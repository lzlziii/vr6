using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.IO;
using System.Net.Sockets;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.Text;
using System.Threading.Tasks;
using DarkTonic.MasterAudio;
using ExitGames.Client.Photon;
using ExitGames.Client.Photon.LoadBalancing;
using ExitGames.Client.Photon.Voice;
using Il2CppDummyDll;
using POpusCodec.Enums;
using Photon;
using Photon.Realtime;
using Pico.Platform;
using Pico.Platform.Models;
using RGCommon;
using TMPro;
using Unity.Collections;
using UnityEngine;
using UnityEngine.Audio;
using UnityEngine.EventSystems;
using UnityEngine.Networking;
using UnityEngine.SceneManagement;
using UnityEngine.Serialization;
using UnityEngine.SpatialTracking;
using UnityEngine.UI;
using UnityEngine.Video;
using UnityEngine.XR;
using cookout.loadsave.v1;
using cookout.loadsave.v2;
using cookout.loadsave.v3;
using cookout.loadsave.v4;
using cookout.matchmaking;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
[AddComponentMenu("Dynamic Bone/Dynamic Bone")]
public class DynamicBone : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x2000003")]
	public enum UpdateMode
	{
		[Token(Token = "0x4000024")]
		Normal,
		[Token(Token = "0x4000025")]
		AnimatePhysics,
		[Token(Token = "0x4000026")]
		UnscaledTime,
		[Token(Token = "0x4000027")]
		Default
	}

	[Token(Token = "0x2000004")]
	public enum FreezeAxis
	{
		[Token(Token = "0x4000029")]
		None,
		[Token(Token = "0x400002A")]
		X,
		[Token(Token = "0x400002B")]
		Y,
		[Token(Token = "0x400002C")]
		Z
	}

	[Token(Token = "0x2000005")]
	private class Particle
	{
		[Token(Token = "0x400002D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform m_Transform;

		[Token(Token = "0x400002E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int m_ParentIndex;

		[Token(Token = "0x400002F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float m_Damping;

		[Token(Token = "0x4000030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float m_Elasticity;

		[Token(Token = "0x4000031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float m_Stiffness;

		[Token(Token = "0x4000032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float m_Inert;

		[Token(Token = "0x4000033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float m_Friction;

		[Token(Token = "0x4000034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float m_Radius;

		[Token(Token = "0x4000035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float m_BoneLength;

		[Token(Token = "0x4000036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool m_isCollide;

		[Token(Token = "0x4000037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 m_Position;

		[Token(Token = "0x4000038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 m_PrevPosition;

		[Token(Token = "0x4000039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Vector3 m_EndOffset;

		[Token(Token = "0x400003A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 m_InitLocalPosition;

		[Token(Token = "0x400003B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Quaternion m_InitLocalRotation;

		[Token(Token = "0x6000019")]
		[Address(RVA = "0x80A908", Offset = "0x80A908", VA = "0x80A908")]
		public Particle()
		{
		}
	}

	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The root of the transform hierarchy to apply physics.")]
	public Transform m_Root;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("Internal physics simulation rate.")]
	public float m_UpdateRate;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public UpdateMode m_UpdateMode;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("How much the bones slowed down.")]
	[Range(0f, 1f)]
	public float m_Damping;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AnimationCurve m_DampingDistrib;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("How much the force applied to return each bone to original orientation.")]
	[Range(0f, 1f)]
	public float m_Elasticity;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AnimationCurve m_ElasticityDistrib;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("How much bone's original orientation are preserved.")]
	[Range(0f, 1f)]
	public float m_Stiffness;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AnimationCurve m_StiffnessDistrib;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Tooltip("How much character's position change is ignored in physics simulation.")]
	[Range(0f, 1f)]
	public float m_Inert;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public AnimationCurve m_InertDistrib;

	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Tooltip("How much the bones slowed down when collide.")]
	public float m_Friction;

	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public AnimationCurve m_FrictionDistrib;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Tooltip("Each bone can be a sphere to collide with colliders. Radius describe sphere's size.")]
	public float m_Radius;

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public AnimationCurve m_RadiusDistrib;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[Tooltip("If End Length is not zero, an extra bone is generated at the end of transform hierarchy.")]
	public float m_EndLength;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[Tooltip("If End Offset is not zero, an extra bone is generated at the end of transform hierarchy.")]
	public Vector3 m_EndOffset;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Tooltip("The force apply to bones. Partial force apply to character's initial pose is cancelled out.")]
	public Vector3 m_Gravity;

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	[Tooltip("The force apply to bones.")]
	public Vector3 m_Force;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[Tooltip("Collider objects interact with the bones.")]
	public List<DynamicBoneColliderBase> m_Colliders;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[Tooltip("Bones exclude from physics simulation.")]
	public List<Transform> m_Exclusions;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[Tooltip("Constrain bones to move on specified plane.")]
	public FreezeAxis m_FreezeAxis;

	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	[Tooltip("Disable physics simulation automatically if character is far from camera or player.")]
	public bool m_DistantDisable;

	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Transform m_ReferenceObject;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public float m_DistanceToObject;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private Vector3 m_LocalGravity;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Vector3 m_ObjectMove;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private Vector3 m_ObjectPrevPosition;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private float m_BoneTotalLength;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private float m_ObjectScale;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private float m_Time;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private float m_Weight;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private bool m_DistantDisabled;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private List<Particle> m_Particles;

	[Token(Token = "0x6000001")]
	[Address(RVA = "0x8085D8", Offset = "0x8085D8", VA = "0x8085D8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0x808748", Offset = "0x808748", VA = "0x808748")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000003")]
	[Address(RVA = "0x80879C", Offset = "0x80879C", VA = "0x80879C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000004")]
	[Address(RVA = "0x8087CC", Offset = "0x8087CC", VA = "0x8087CC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0x808778", Offset = "0x808778", VA = "0x808778")]
	private void PreUpdate()
	{
	}

	[Token(Token = "0x6000006")]
	[Address(RVA = "0x808834", Offset = "0x808834", VA = "0x808834")]
	private void CheckDistance()
	{
	}

	[Token(Token = "0x6000007")]
	[Address(RVA = "0x808E08", Offset = "0x808E08", VA = "0x808E08")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0x808E0C", Offset = "0x808E0C", VA = "0x808E0C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000009")]
	[Address(RVA = "0x808E10", Offset = "0x808E10", VA = "0x808E10")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0x808ED0", Offset = "0x808ED0", VA = "0x808ED0")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x600000B")]
	[Address(RVA = "0x809060", Offset = "0x809060", VA = "0x809060")]
	public void SetWeight(float w)
	{
	}

	[Token(Token = "0x600000C")]
	[Address(RVA = "0x8090B0", Offset = "0x8090B0", VA = "0x8090B0")]
	public float GetWeight()
	{
		return default(float);
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0x8089AC", Offset = "0x8089AC", VA = "0x8089AC")]
	private void UpdateDynamicBones(float t)
	{
	}

	[Token(Token = "0x600000E")]
	[Address(RVA = "0x8085DC", Offset = "0x8085DC", VA = "0x8085DC")]
	public void SetupParticles()
	{
	}

	[Token(Token = "0x600000F")]
	[Address(RVA = "0x80A0A4", Offset = "0x80A0A4", VA = "0x80A0A4")]
	private void AppendParticles(Transform b, int parentIndex, float boneLength)
	{
	}

	[Token(Token = "0x6000010")]
	[Address(RVA = "0x80A5FC", Offset = "0x80A5FC", VA = "0x80A5FC")]
	public void UpdateParameters()
	{
	}

	[Token(Token = "0x6000011")]
	[Address(RVA = "0x808BB8", Offset = "0x808BB8", VA = "0x808BB8")]
	private void InitTransforms()
	{
	}

	[Token(Token = "0x6000012")]
	[Address(RVA = "0x808CBC", Offset = "0x808CBC", VA = "0x808CBC")]
	private void ResetParticlesPosition()
	{
	}

	[Token(Token = "0x6000013")]
	[Address(RVA = "0x8090B8", Offset = "0x8090B8", VA = "0x8090B8")]
	private void UpdateParticles1(float timeVar)
	{
	}

	[Token(Token = "0x6000014")]
	[Address(RVA = "0x80933C", Offset = "0x80933C", VA = "0x80933C")]
	private void UpdateParticles2(float timeVar)
	{
	}

	[Token(Token = "0x6000015")]
	[Address(RVA = "0x8099A4", Offset = "0x8099A4", VA = "0x8099A4")]
	private void SkipUpdateParticles()
	{
	}

	[Token(Token = "0x6000016")]
	[Address(RVA = "0x80A9E4", Offset = "0x80A9E4", VA = "0x80A9E4")]
	private static Vector3 MirrorVector(Vector3 v, Vector3 axis)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000017")]
	[Address(RVA = "0x809E48", Offset = "0x809E48", VA = "0x809E48")]
	private void ApplyParticlesToTransforms()
	{
	}

	[Token(Token = "0x6000018")]
	[Address(RVA = "0x80AA18", Offset = "0x80AA18", VA = "0x80AA18")]
	public DynamicBone()
	{
	}
}
[Token(Token = "0x2000006")]
[AddComponentMenu("Dynamic Bone/Dynamic Bone Collider")]
public class DynamicBoneCollider : DynamicBoneColliderBase
{
	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("The radius of the sphere or capsule.")]
	public float m_Radius;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("The height of the capsule.")]
	public float m_Height;

	[Token(Token = "0x600001A")]
	[Address(RVA = "0x80AB6C", Offset = "0x80AB6C", VA = "0x80AB6C")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x600001B")]
	[Address(RVA = "0x80AB84", Offset = "0x80AB84", VA = "0x80AB84", Slot = "4")]
	public override bool Collide(ref Vector3 particlePosition, float particleRadius)
	{
		return default(bool);
	}

	[Token(Token = "0x600001C")]
	[Address(RVA = "0x80AD78", Offset = "0x80AD78", VA = "0x80AD78")]
	private static bool OutsideSphere(ref Vector3 particlePosition, float particleRadius, Vector3 sphereCenter, float sphereRadius)
	{
		return default(bool);
	}

	[Token(Token = "0x600001D")]
	[Address(RVA = "0x80ADE4", Offset = "0x80ADE4", VA = "0x80ADE4")]
	private static bool InsideSphere(ref Vector3 particlePosition, float particleRadius, Vector3 sphereCenter, float sphereRadius)
	{
		return default(bool);
	}

	[Token(Token = "0x600001E")]
	[Address(RVA = "0x80AE48", Offset = "0x80AE48", VA = "0x80AE48")]
	private static bool OutsideCapsule(ref Vector3 particlePosition, float particleRadius, Vector3 capsuleP0, Vector3 capsuleP1, float capsuleRadius)
	{
		return default(bool);
	}

	[Token(Token = "0x600001F")]
	[Address(RVA = "0x80AFD8", Offset = "0x80AFD8", VA = "0x80AFD8")]
	private static bool InsideCapsule(ref Vector3 particlePosition, float particleRadius, Vector3 capsuleP0, Vector3 capsuleP1, float capsuleRadius)
	{
		return default(bool);
	}

	[Token(Token = "0x6000020")]
	[Address(RVA = "0x80B140", Offset = "0x80B140", VA = "0x80B140")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000021")]
	[Address(RVA = "0x80B2DC", Offset = "0x80B2DC", VA = "0x80B2DC")]
	public DynamicBoneCollider()
	{
	}
}
[Token(Token = "0x2000007")]
public class DynamicBoneColliderBase : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x2000008")]
	public enum Direction
	{
		[Token(Token = "0x4000042")]
		X,
		[Token(Token = "0x4000043")]
		Y,
		[Token(Token = "0x4000044")]
		Z
	}

	[Token(Token = "0x2000009")]
	public enum Bound
	{
		[Token(Token = "0x4000046")]
		Outside,
		[Token(Token = "0x4000047")]
		Inside
	}

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("The axis of the capsule's height.")]
	public Direction m_Direction;

	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Tooltip("The center of the sphere or capsule, in the object's local space.")]
	public Vector3 m_Center;

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("Constrain bones to outside bound or inside bound.")]
	public Bound m_Bound;

	[Token(Token = "0x6000022")]
	[Address(RVA = "0x80B34C", Offset = "0x80B34C", VA = "0x80B34C", Slot = "4")]
	public virtual bool Collide(ref Vector3 particlePosition, float particleRadius)
	{
		return default(bool);
	}

	[Token(Token = "0x6000023")]
	[Address(RVA = "0x80B2E8", Offset = "0x80B2E8", VA = "0x80B2E8")]
	public DynamicBoneColliderBase()
	{
	}
}
[Token(Token = "0x200000A")]
[AddComponentMenu("Dynamic Bone/Dynamic Bone Plane Collider")]
public class DynamicBonePlaneCollider : DynamicBoneColliderBase
{
	[Token(Token = "0x6000024")]
	[Address(RVA = "0x80B354", Offset = "0x80B354", VA = "0x80B354")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000025")]
	[Address(RVA = "0x80B358", Offset = "0x80B358", VA = "0x80B358", Slot = "4")]
	public override bool Collide(ref Vector3 particlePosition, float particleRadius)
	{
		return default(bool);
	}

	[Token(Token = "0x6000026")]
	[Address(RVA = "0x80B4E8", Offset = "0x80B4E8", VA = "0x80B4E8")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000027")]
	[Address(RVA = "0x80B648", Offset = "0x80B648", VA = "0x80B648")]
	public DynamicBonePlaneCollider()
	{
	}
}
[Token(Token = "0x200000B")]
public class Testing240 : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject cube1;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject cube2;

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public RectTransform rect1;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject sprite2;

	[Token(Token = "0x6000028")]
	[Address(RVA = "0x80B64C", Offset = "0x80B64C", VA = "0x80B64C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000029")]
	[Address(RVA = "0x80BD10", Offset = "0x80BD10", VA = "0x80BD10")]
	public static void ScaleGroundColor(Color to)
	{
	}

	[Token(Token = "0x600002A")]
	[Address(RVA = "0x80BD18", Offset = "0x80BD18", VA = "0x80BD18")]
	private void Update()
	{
	}

	[Token(Token = "0x600002B")]
	[Address(RVA = "0x80BD1C", Offset = "0x80BD1C", VA = "0x80BD1C")]
	public Testing240()
	{
	}
}
[Token(Token = "0x200000E")]
public class Testing243 : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject cube1;

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Light light;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public RectTransform imageRectTransform;

	[Token(Token = "0x6000032")]
	[Address(RVA = "0x80BF10", Offset = "0x80BF10", VA = "0x80BF10")]
	private void Start()
	{
	}

	[Token(Token = "0x6000033")]
	[Address(RVA = "0x80C194", Offset = "0x80C194", VA = "0x80C194")]
	private void Update()
	{
	}

	[Token(Token = "0x6000034")]
	[Address(RVA = "0x80C198", Offset = "0x80C198", VA = "0x80C198")]
	public Testing243()
	{
	}
}
[Token(Token = "0x200000F")]
public class Testing246 : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float gameScale;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject tweenAlpha;

	[Token(Token = "0x6000037")]
	[Address(RVA = "0x80C1D8", Offset = "0x80C1D8", VA = "0x80C1D8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0x80C2D8", Offset = "0x80C2D8", VA = "0x80C2D8")]
	private void tweenFinished(object obj)
	{
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0x80C2DC", Offset = "0x80C2DC", VA = "0x80C2DC")]
	public Testing246()
	{
	}
}
[Token(Token = "0x2000010")]
public class TestingColorTweening : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x600003A")]
	[Address(RVA = "0x80C2EC", Offset = "0x80C2EC", VA = "0x80C2EC")]
	private void Start()
	{
	}

	[Token(Token = "0x600003B")]
	[Address(RVA = "0x80C4AC", Offset = "0x80C4AC", VA = "0x80C4AC")]
	private void OnTweenUpdate(Color update, object obj)
	{
	}

	[Token(Token = "0x600003C")]
	[Address(RVA = "0x80C5F4", Offset = "0x80C5F4", VA = "0x80C5F4")]
	public TestingColorTweening()
	{
	}
}
[Token(Token = "0x2000011")]
public class TestingDescr : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int tweenId;

	[Token(Token = "0x4000057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject go;

	[Token(Token = "0x600003D")]
	[Address(RVA = "0x80C5FC", Offset = "0x80C5FC", VA = "0x80C5FC")]
	public void startTween()
	{
	}

	[Token(Token = "0x600003E")]
	[Address(RVA = "0x80C6E0", Offset = "0x80C6E0", VA = "0x80C6E0")]
	public void checkTweenDescr()
	{
	}

	[Token(Token = "0x600003F")]
	[Address(RVA = "0x80C830", Offset = "0x80C830", VA = "0x80C830")]
	public TestingDescr()
	{
	}
}
[Token(Token = "0x2000012")]
public class TestingIssue : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private LTDescr lt;

	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private LTDescr ff;

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int id;

	[Token(Token = "0x400005B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int fid;

	[Token(Token = "0x6000040")]
	[Address(RVA = "0x80C838", Offset = "0x80C838", VA = "0x80C838")]
	private void Start()
	{
	}

	[Token(Token = "0x6000041")]
	[Address(RVA = "0x80C98C", Offset = "0x80C98C", VA = "0x80C98C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000042")]
	[Address(RVA = "0x80CA34", Offset = "0x80CA34", VA = "0x80CA34")]
	public TestingIssue()
	{
	}
}
[Token(Token = "0x2000013")]
public class TestingIssue2 : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RectTransform rect;

	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject go;

	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject go2;

	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private LTDescr descr;

	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool set;

	[Token(Token = "0x6000043")]
	[Address(RVA = "0x80CA3C", Offset = "0x80CA3C", VA = "0x80CA3C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0x80CBB0", Offset = "0x80CBB0", VA = "0x80CBB0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000045")]
	[Address(RVA = "0x80CC60", Offset = "0x80CC60", VA = "0x80CC60")]
	public TestingIssue2()
	{
	}
}
[Token(Token = "0x2000014")]
public class TestingMaxTweens : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int tweenIter;

	[Token(Token = "0x6000046")]
	[Address(RVA = "0x80CC68", Offset = "0x80CC68", VA = "0x80CC68")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0x80CCBC", Offset = "0x80CCBC", VA = "0x80CCBC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0x80CEDC", Offset = "0x80CEDC", VA = "0x80CEDC")]
	public TestingMaxTweens()
	{
	}
}
[Token(Token = "0x2000016")]
public class TestingRotate : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject sun;

	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject earth;

	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject sun2;

	[Token(Token = "0x4000067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject earth2;

	[Token(Token = "0x4000068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject sun3;

	[Token(Token = "0x4000069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject earth3;

	[Token(Token = "0x600004C")]
	[Address(RVA = "0x80CFF8", Offset = "0x80CFF8", VA = "0x80CFF8")]
	private void Start()
	{
	}

	[Token(Token = "0x600004D")]
	[Address(RVA = "0x80D258", Offset = "0x80D258", VA = "0x80D258")]
	private void Update()
	{
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0x80D32C", Offset = "0x80D32C", VA = "0x80D32C")]
	public TestingRotate()
	{
	}
}
[Token(Token = "0x2000017")]
public class TestingSceneSwitching : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x400006A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject cube;

	[Token(Token = "0x400006B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int sceneIter;

	[Token(Token = "0x400006C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int tweenCompleteCnt;

	[Token(Token = "0x600004F")]
	[Address(RVA = "0x80D334", Offset = "0x80D334", VA = "0x80D334")]
	private void Start()
	{
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0x80D5B8", Offset = "0x80D5B8", VA = "0x80D5B8")]
	public TestingSceneSwitching()
	{
	}
}
[Token(Token = "0x2000019")]
public class TestingSequencer : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4000070")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject cube1;

	[Token(Token = "0x600005A")]
	[Address(RVA = "0x80D9A0", Offset = "0x80D9A0", VA = "0x80D9A0")]
	public void Start()
	{
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0x80DD2C", Offset = "0x80DD2C", VA = "0x80DD2C")]
	public TestingSequencer()
	{
	}
}
[Token(Token = "0x200001B")]
internal static class CustomTypes
{
	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly byte[] memVector3;

	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static readonly byte[] memVector2;

	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static readonly byte[] memQuarternion;

	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static readonly byte[] memPlayer;

	[Token(Token = "0x6000061")]
	[Address(RVA = "0x80DFF8", Offset = "0x80DFF8", VA = "0x80DFF8")]
	internal static void Register()
	{
	}

	[Token(Token = "0x6000062")]
	[Address(RVA = "0x80E344", Offset = "0x80E344", VA = "0x80E344")]
	private static short SerializeVector3(StreamBuffer outStream, object customobject)
	{
		return default(short);
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0x80E554", Offset = "0x80E554", VA = "0x80E554")]
	private static object DeserializeVector3(StreamBuffer inStream, short length)
	{
		return null;
	}

	[Token(Token = "0x6000064")]
	[Address(RVA = "0x80E768", Offset = "0x80E768", VA = "0x80E768")]
	private static short SerializeVector2(StreamBuffer outStream, object customobject)
	{
		return default(short);
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0x80E958", Offset = "0x80E958", VA = "0x80E958")]
	private static object DeserializeVector2(StreamBuffer inStream, short length)
	{
		return null;
	}

	[Token(Token = "0x6000066")]
	[Address(RVA = "0x80EB3C", Offset = "0x80EB3C", VA = "0x80EB3C")]
	private static short SerializeQuaternion(StreamBuffer outStream, object customobject)
	{
		return default(short);
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0x80ED68", Offset = "0x80ED68", VA = "0x80ED68")]
	private static object DeserializeQuaternion(StreamBuffer inStream, short length)
	{
		return null;
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0x80EF8C", Offset = "0x80EF8C", VA = "0x80EF8C")]
	private static short SerializePhotonPlayer(StreamBuffer outStream, object customobject)
	{
		return default(short);
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0x80F16C", Offset = "0x80F16C", VA = "0x80F16C")]
	private static object DeserializePhotonPlayer(StreamBuffer inStream, short length)
	{
		return null;
	}
}
[Token(Token = "0x200001C")]
public enum PhotonNetworkingMessage
{
	[Token(Token = "0x400007A")]
	OnConnectedToPhoton,
	[Token(Token = "0x400007B")]
	OnLeftRoom,
	[Token(Token = "0x400007C")]
	OnMasterClientSwitched,
	[Token(Token = "0x400007D")]
	OnPhotonCreateRoomFailed,
	[Token(Token = "0x400007E")]
	OnPhotonJoinRoomFailed,
	[Token(Token = "0x400007F")]
	OnCreatedRoom,
	[Token(Token = "0x4000080")]
	OnJoinedLobby,
	[Token(Token = "0x4000081")]
	OnLeftLobby,
	[Token(Token = "0x4000082")]
	OnDisconnectedFromPhoton,
	[Token(Token = "0x4000083")]
	OnConnectionFail,
	[Token(Token = "0x4000084")]
	OnFailedToConnectToPhoton,
	[Token(Token = "0x4000085")]
	OnReceivedRoomListUpdate,
	[Token(Token = "0x4000086")]
	OnJoinedRoom,
	[Token(Token = "0x4000087")]
	OnPhotonPlayerConnected,
	[Token(Token = "0x4000088")]
	OnPhotonPlayerDisconnected,
	[Token(Token = "0x4000089")]
	OnPhotonRandomJoinFailed,
	[Token(Token = "0x400008A")]
	OnConnectedToMaster,
	[Token(Token = "0x400008B")]
	OnPhotonSerializeView,
	[Token(Token = "0x400008C")]
	OnPhotonInstantiate,
	[Token(Token = "0x400008D")]
	OnPhotonMaxCccuReached,
	[Token(Token = "0x400008E")]
	OnPhotonCustomRoomPropertiesChanged,
	[Token(Token = "0x400008F")]
	OnPhotonPlayerPropertiesChanged,
	[Token(Token = "0x4000090")]
	OnUpdatedFriendList,
	[Token(Token = "0x4000091")]
	OnCustomAuthenticationFailed,
	[Token(Token = "0x4000092")]
	OnCustomAuthenticationResponse,
	[Token(Token = "0x4000093")]
	OnWebRpcResponse,
	[Token(Token = "0x4000094")]
	OnOwnershipRequest,
	[Token(Token = "0x4000095")]
	OnLobbyStatisticsUpdate,
	[Token(Token = "0x4000096")]
	OnPhotonPlayerActivityChanged,
	[Token(Token = "0x4000097")]
	OnOwnershipTransfered
}
[Token(Token = "0x200001D")]
public enum PhotonLogLevel
{
	[Token(Token = "0x4000099")]
	ErrorsOnly,
	[Token(Token = "0x400009A")]
	Informational,
	[Token(Token = "0x400009B")]
	Full
}
[Token(Token = "0x200001E")]
public enum PhotonTargets
{
	[Token(Token = "0x400009D")]
	All,
	[Token(Token = "0x400009E")]
	Others,
	[Token(Token = "0x400009F")]
	MasterClient,
	[Token(Token = "0x40000A0")]
	AllBuffered,
	[Token(Token = "0x40000A1")]
	OthersBuffered,
	[Token(Token = "0x40000A2")]
	AllViaServer,
	[Token(Token = "0x40000A3")]
	AllBufferedViaServer
}
[Token(Token = "0x200001F")]
public enum CloudRegionCode
{
	[Token(Token = "0x40000A5")]
	eu = 0,
	[Token(Token = "0x40000A6")]
	us = 1,
	[Token(Token = "0x40000A7")]
	asia = 2,
	[Token(Token = "0x40000A8")]
	jp = 3,
	[Token(Token = "0x40000A9")]
	au = 5,
	[Token(Token = "0x40000AA")]
	usw = 6,
	[Token(Token = "0x40000AB")]
	sa = 7,
	[Token(Token = "0x40000AC")]
	cae = 8,
	[Token(Token = "0x40000AD")]
	kr = 9,
	[Token(Token = "0x40000AE")]
	@in = 10,
	[Token(Token = "0x40000AF")]
	ru = 11,
	[Token(Token = "0x40000B0")]
	rue = 12,
	[Token(Token = "0x40000B1")]
	none = 4
}
[Token(Token = "0x2000020")]
[Flags]
public enum CloudRegionFlag
{
	[Token(Token = "0x40000B3")]
	eu = 1,
	[Token(Token = "0x40000B4")]
	us = 2,
	[Token(Token = "0x40000B5")]
	asia = 4,
	[Token(Token = "0x40000B6")]
	jp = 8,
	[Token(Token = "0x40000B7")]
	au = 0x10,
	[Token(Token = "0x40000B8")]
	usw = 0x20,
	[Token(Token = "0x40000B9")]
	sa = 0x40,
	[Token(Token = "0x40000BA")]
	cae = 0x80,
	[Token(Token = "0x40000BB")]
	kr = 0x100,
	[Token(Token = "0x40000BC")]
	@in = 0x200,
	[Token(Token = "0x40000BD")]
	ru = 0x400,
	[Token(Token = "0x40000BE")]
	rue = 0x800
}
[Token(Token = "0x2000021")]
public enum ConnectionState
{
	[Token(Token = "0x40000C0")]
	Disconnected,
	[Token(Token = "0x40000C1")]
	Connecting,
	[Token(Token = "0x40000C2")]
	Connected,
	[Token(Token = "0x40000C3")]
	Disconnecting,
	[Token(Token = "0x40000C4")]
	InitializingApplication
}
[Token(Token = "0x2000022")]
public enum EncryptionMode
{
	[Token(Token = "0x40000C6")]
	PayloadEncryption = 0,
	[Token(Token = "0x40000C7")]
	DatagramEncryption = 10
}
[Token(Token = "0x2000023")]
public static class EncryptionDataParameters
{
	[Token(Token = "0x40000C8")]
	public const byte Mode = 0;

	[Token(Token = "0x40000C9")]
	public const byte Secret1 = 1;

	[Token(Token = "0x40000CA")]
	public const byte Secret2 = 2;
}
[Token(Token = "0x2000024")]
public static class Extensions
{
	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Dictionary<MethodInfo, ParameterInfo[]> ParametersOfMethods;

	[Token(Token = "0x600006B")]
	[Address(RVA = "0x80F46C", Offset = "0x80F46C", VA = "0x80F46C")]
	public static ParameterInfo[] GetCachedParemeters(this MethodInfo mo)
	{
		return null;
	}

	[Token(Token = "0x600006C")]
	[Address(RVA = "0x80F56C", Offset = "0x80F56C", VA = "0x80F56C")]
	public static PhotonView[] GetPhotonViewsInChildren(this GameObject go)
	{
		return null;
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0x80F5C0", Offset = "0x80F5C0", VA = "0x80F5C0")]
	public static PhotonView GetPhotonView(this GameObject go)
	{
		return null;
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0x80F610", Offset = "0x80F610", VA = "0x80F610")]
	public static bool AlmostEquals(this Vector3 target, Vector3 second, float sqrMagnitudePrecision)
	{
		return default(bool);
	}

	[Token(Token = "0x600006F")]
	[Address(RVA = "0x80F63C", Offset = "0x80F63C", VA = "0x80F63C")]
	public static bool AlmostEquals(this Vector2 target, Vector2 second, float sqrMagnitudePrecision)
	{
		return default(bool);
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0x80F65C", Offset = "0x80F65C", VA = "0x80F65C")]
	public static bool AlmostEquals(this Quaternion target, Quaternion second, float maxAngle)
	{
		return default(bool);
	}

	[Token(Token = "0x6000071")]
	[Address(RVA = "0x80F6CC", Offset = "0x80F6CC", VA = "0x80F6CC")]
	public static bool AlmostEquals(this float target, float second, float floatDiff)
	{
		return default(bool);
	}

	[Token(Token = "0x6000072")]
	[Address(RVA = "0x80F6DC", Offset = "0x80F6DC", VA = "0x80F6DC")]
	public static void Merge(this IDictionary target, IDictionary addHash)
	{
	}

	[Token(Token = "0x6000073")]
	[Address(RVA = "0x80FB1C", Offset = "0x80FB1C", VA = "0x80FB1C")]
	public static void MergeStringKeys(this IDictionary target, IDictionary addHash)
	{
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0x80FF84", Offset = "0x80FF84", VA = "0x80FF84")]
	public static string ToStringFull(this IDictionary origin)
	{
		return null;
	}

	[Token(Token = "0x6000075")]
	[Address(RVA = "0x80FFE0", Offset = "0x80FFE0", VA = "0x80FFE0")]
	public static string ToStringFull(this object[] data)
	{
		return null;
	}

	[Token(Token = "0x6000076")]
	[Address(RVA = "0x810128", Offset = "0x810128", VA = "0x810128")]
	public static ExitGames.Client.Photon.Hashtable StripToStringKeys(this IDictionary original)
	{
		return null;
	}

	[Token(Token = "0x6000077")]
	[Address(RVA = "0x81054C", Offset = "0x81054C", VA = "0x81054C")]
	public static void StripKeysWithNullValues(this IDictionary original)
	{
	}

	[Token(Token = "0x6000078")]
	[Address(RVA = "0x810A8C", Offset = "0x810A8C", VA = "0x810A8C")]
	public static bool Contains(this int[] target, int nr)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000025")]
public static class GameObjectExtensions
{
	[Token(Token = "0x600007A")]
	[Address(RVA = "0x810B6C", Offset = "0x810B6C", VA = "0x810B6C")]
	public static bool GetActive(this GameObject target)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000026")]
public class FriendInfo
{
	[Token(Token = "0x17000001")]
	[Obsolete("Use UserId.")]
	public string Name
	{
		[Token(Token = "0x600007B")]
		[Address(RVA = "0x810B80", Offset = "0x810B80", VA = "0x810B80")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000002")]
	public string UserId
	{
		[Token(Token = "0x600007C")]
		[Address(RVA = "0x810B88", Offset = "0x810B88", VA = "0x810B88")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600007D")]
		[Address(RVA = "0x810B90", Offset = "0x810B90", VA = "0x810B90")]
		[CompilerGenerated]
		protected internal set
		{
		}
	}

	[Token(Token = "0x17000003")]
	public bool IsOnline
	{
		[Token(Token = "0x600007E")]
		[Address(RVA = "0x810B98", Offset = "0x810B98", VA = "0x810B98")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600007F")]
		[Address(RVA = "0x810BA0", Offset = "0x810BA0", VA = "0x810BA0")]
		[CompilerGenerated]
		protected internal set
		{
		}
	}

	[Token(Token = "0x17000004")]
	public string Room
	{
		[Token(Token = "0x6000080")]
		[Address(RVA = "0x810BAC", Offset = "0x810BAC", VA = "0x810BAC")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000081")]
		[Address(RVA = "0x810BB4", Offset = "0x810BB4", VA = "0x810BB4")]
		[CompilerGenerated]
		protected internal set
		{
		}
	}

	[Token(Token = "0x17000005")]
	public bool IsInRoom
	{
		[Token(Token = "0x6000082")]
		[Address(RVA = "0x810BBC", Offset = "0x810BBC", VA = "0x810BBC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000083")]
	[Address(RVA = "0x810BE4", Offset = "0x810BE4", VA = "0x810BE4", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0x810CA0", Offset = "0x810CA0", VA = "0x810CA0")]
	public FriendInfo()
	{
	}
}
[Token(Token = "0x2000027")]
internal class LoadBalancingPeer : PhotonPeer
{
	[Token(Token = "0x2000028")]
	private enum RoomOptionBit
	{
		[Token(Token = "0x40000D1")]
		CheckUserOnJoin = 1,
		[Token(Token = "0x40000D2")]
		DeleteCacheOnLeave = 2,
		[Token(Token = "0x40000D3")]
		SuppressRoomEvents = 4,
		[Token(Token = "0x40000D4")]
		PublishUserId = 8,
		[Token(Token = "0x40000D5")]
		DeleteNullProps = 0x10,
		[Token(Token = "0x40000D6")]
		BroadcastPropsChangeToAll = 0x20
	}

	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private readonly Dictionary<byte, object> opParameters;

	[Token(Token = "0x17000006")]
	internal bool IsProtocolSecure
	{
		[Token(Token = "0x6000085")]
		[Address(RVA = "0x810CA8", Offset = "0x810CA8", VA = "0x810CA8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000086")]
	[Address(RVA = "0x810CC8", Offset = "0x810CC8", VA = "0x810CC8")]
	public LoadBalancingPeer(ConnectionProtocol protocolType)
	{
	}

	[Token(Token = "0x6000087")]
	[Address(RVA = "0x810D78", Offset = "0x810D78", VA = "0x810D78")]
	public LoadBalancingPeer(IPhotonPeerListener listener, ConnectionProtocol protocolType)
	{
	}

	[Token(Token = "0x6000088")]
	[Address(RVA = "0x810DE8", Offset = "0x810DE8", VA = "0x810DE8", Slot = "18")]
	public virtual bool OpGetRegions(string appId)
	{
		return default(bool);
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0x810ED0", Offset = "0x810ED0", VA = "0x810ED0", Slot = "19")]
	public virtual bool OpJoinLobby([Optional] TypedLobby lobby)
	{
		return default(bool);
	}

	[Token(Token = "0x600008A")]
	[Address(RVA = "0x8110EC", Offset = "0x8110EC", VA = "0x8110EC", Slot = "20")]
	public virtual bool OpLeaveLobby()
	{
		return default(bool);
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0x811204", Offset = "0x811204", VA = "0x811204")]
	private void RoomOptionsToOpParameters(Dictionary<byte, object> op, RoomOptions roomOptions)
	{
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0x8116EC", Offset = "0x8116EC", VA = "0x8116EC", Slot = "21")]
	public virtual bool OpCreateRoom(EnterRoomParams opParams)
	{
		return default(bool);
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0x8119CC", Offset = "0x8119CC", VA = "0x8119CC", Slot = "22")]
	public virtual bool OpJoinRoom(EnterRoomParams opParams)
	{
		return default(bool);
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0x811D1C", Offset = "0x811D1C", VA = "0x811D1C", Slot = "23")]
	public virtual bool OpJoinRandomRoom(OpJoinRandomRoomParams opJoinRandomRoomParams)
	{
		return default(bool);
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0x812084", Offset = "0x812084", VA = "0x812084", Slot = "24")]
	public virtual bool OpLeaveRoom(bool becomeInactive)
	{
		return default(bool);
	}

	[Token(Token = "0x6000090")]
	[Address(RVA = "0x8121B4", Offset = "0x8121B4", VA = "0x8121B4", Slot = "25")]
	public virtual bool OpGetGameList(TypedLobby lobby, string queryData)
	{
		return default(bool);
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0x8124BC", Offset = "0x8124BC", VA = "0x8124BC", Slot = "26")]
	public virtual bool OpFindFriends(string[] friendsToFind, [Optional] FindFriendsOptions options)
	{
		return default(bool);
	}

	[Token(Token = "0x6000092")]
	[Address(RVA = "0x812650", Offset = "0x812650", VA = "0x812650")]
	public bool OpSetCustomPropertiesOfActor(int actorNr, ExitGames.Client.Photon.Hashtable actorProperties)
	{
		return default(bool);
	}

	[Token(Token = "0x6000093")]
	[Address(RVA = "0x8126CC", Offset = "0x8126CC", VA = "0x8126CC")]
	protected internal bool OpSetPropertiesOfActor(int actorNr, ExitGames.Client.Photon.Hashtable actorProperties, [Optional] ExitGames.Client.Photon.Hashtable expectedProperties, bool webForward = false)
	{
		return default(bool);
	}

	[Token(Token = "0x6000094")]
	[Address(RVA = "0x812A04", Offset = "0x812A04", VA = "0x812A04")]
	protected internal void OpSetPropertyOfRoom(byte propCode, object value)
	{
	}

	[Token(Token = "0x6000095")]
	[Address(RVA = "0x812D18", Offset = "0x812D18", VA = "0x812D18")]
	[Obsolete("Use the other overload method")]
	public bool OpSetCustomPropertiesOfRoom(ExitGames.Client.Photon.Hashtable gameProperties, bool broadcast, byte channelId)
	{
		return default(bool);
	}

	[Token(Token = "0x6000096")]
	[Address(RVA = "0x812D8C", Offset = "0x812D8C", VA = "0x812D8C")]
	public bool OpSetCustomPropertiesOfRoom(ExitGames.Client.Photon.Hashtable gameProperties, [Optional] ExitGames.Client.Photon.Hashtable expectedProperties, bool webForward = false)
	{
		return default(bool);
	}

	[Token(Token = "0x6000097")]
	[Address(RVA = "0x812AC4", Offset = "0x812AC4", VA = "0x812AC4")]
	protected internal bool OpSetPropertiesOfRoom(ExitGames.Client.Photon.Hashtable gameProperties, [Optional] ExitGames.Client.Photon.Hashtable expectedProperties, bool webForward = false)
	{
		return default(bool);
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0x812E1C", Offset = "0x812E1C", VA = "0x812E1C", Slot = "27")]
	public virtual bool OpAuthenticate(string appId, string appVersion, AuthenticationValues authValues, string regionCode, bool getLobbyStatistics)
	{
		return default(bool);
	}

	[Token(Token = "0x6000099")]
	[Address(RVA = "0x813284", Offset = "0x813284", VA = "0x813284", Slot = "28")]
	public virtual bool OpAuthenticateOnce(string appId, string appVersion, AuthenticationValues authValues, string regionCode, EncryptionMode encryptionMode, ConnectionProtocol expectedProtocol)
	{
		return default(bool);
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0x8136C0", Offset = "0x8136C0", VA = "0x8136C0", Slot = "29")]
	public virtual bool OpChangeGroups(byte[] groupsToRemove, byte[] groupsToAdd)
	{
		return default(bool);
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0x81386C", Offset = "0x81386C", VA = "0x81386C", Slot = "30")]
	public virtual bool OpRaiseEvent(byte eventCode, object customEventContent, bool sendReliable, RaiseEventOptions raiseEventOptions)
	{
		return default(bool);
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0x813AF8", Offset = "0x813AF8", VA = "0x813AF8", Slot = "31")]
	public virtual bool OpSettings(bool receiveLobbyStats)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000029")]
internal class OpJoinRandomRoomParams
{
	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public ExitGames.Client.Photon.Hashtable ExpectedCustomRoomProperties;

	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public byte ExpectedMaxPlayers;

	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public MatchmakingMode MatchingType;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TypedLobby TypedLobby;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string SqlLobbyFilter;

	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string[] ExpectedUsers;

	[Token(Token = "0x600009D")]
	[Address(RVA = "0x813CD8", Offset = "0x813CD8", VA = "0x813CD8")]
	public OpJoinRandomRoomParams()
	{
	}
}
[Token(Token = "0x200002A")]
internal class EnterRoomParams
{
	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string RoomName;

	[Token(Token = "0x40000DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RoomOptions RoomOptions;

	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TypedLobby Lobby;

	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ExitGames.Client.Photon.Hashtable PlayerProperties;

	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool OnGameServer;

	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool CreateIfNotExists;

	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	public bool RejoinOnly;

	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public string[] ExpectedUsers;

	[Token(Token = "0x600009E")]
	[Address(RVA = "0x813CE0", Offset = "0x813CE0", VA = "0x813CE0")]
	public EnterRoomParams()
	{
	}
}
[Token(Token = "0x200002B")]
public class ErrorCode
{
	[Token(Token = "0x40000E5")]
	public const int Ok = 0;

	[Token(Token = "0x40000E6")]
	public const int OperationNotAllowedInCurrentState = -3;

	[Token(Token = "0x40000E7")]
	[Obsolete("Use InvalidOperation.")]
	public const int InvalidOperationCode = -2;

	[Token(Token = "0x40000E8")]
	public const int InvalidOperation = -2;

	[Token(Token = "0x40000E9")]
	public const int InternalServerError = -1;

	[Token(Token = "0x40000EA")]
	public const int InvalidAuthentication = 32767;

	[Token(Token = "0x40000EB")]
	public const int GameIdAlreadyExists = 32766;

	[Token(Token = "0x40000EC")]
	public const int GameFull = 32765;

	[Token(Token = "0x40000ED")]
	public const int GameClosed = 32764;

	[Token(Token = "0x40000EE")]
	[Obsolete("No longer used, cause random matchmaking is no longer a process.")]
	public const int AlreadyMatched = 32763;

	[Token(Token = "0x40000EF")]
	public const int ServerFull = 32762;

	[Token(Token = "0x40000F0")]
	public const int UserBlocked = 32761;

	[Token(Token = "0x40000F1")]
	public const int NoRandomMatchFound = 32760;

	[Token(Token = "0x40000F2")]
	public const int GameDoesNotExist = 32758;

	[Token(Token = "0x40000F3")]
	public const int MaxCcuReached = 32757;

	[Token(Token = "0x40000F4")]
	public const int InvalidRegion = 32756;

	[Token(Token = "0x40000F5")]
	public const int CustomAuthenticationFailed = 32755;

	[Token(Token = "0x40000F6")]
	public const int AuthenticationTicketExpired = 32753;

	[Token(Token = "0x40000F7")]
	public const int PluginReportedError = 32752;

	[Token(Token = "0x40000F8")]
	public const int PluginMismatch = 32751;

	[Token(Token = "0x40000F9")]
	public const int JoinFailedPeerAlreadyJoined = 32750;

	[Token(Token = "0x40000FA")]
	public const int JoinFailedFoundInactiveJoiner = 32749;

	[Token(Token = "0x40000FB")]
	public const int JoinFailedWithRejoinerNotFound = 32748;

	[Token(Token = "0x40000FC")]
	public const int JoinFailedFoundExcludedUserId = 32747;

	[Token(Token = "0x40000FD")]
	public const int JoinFailedFoundActiveJoiner = 32746;

	[Token(Token = "0x40000FE")]
	public const int HttpLimitReached = 32745;

	[Token(Token = "0x40000FF")]
	public const int ExternalHttpCallFailed = 32744;

	[Token(Token = "0x4000100")]
	public const int SlotError = 32742;

	[Token(Token = "0x4000101")]
	public const int InvalidEncryptionParameters = 32741;

	[Token(Token = "0x600009F")]
	[Address(RVA = "0x813CF0", Offset = "0x813CF0", VA = "0x813CF0")]
	public ErrorCode()
	{
	}
}
[Token(Token = "0x200002C")]
public class ActorProperties
{
	[Token(Token = "0x4000102")]
	public const byte PlayerName = byte.MaxValue;

	[Token(Token = "0x4000103")]
	public const byte IsInactive = 254;

	[Token(Token = "0x4000104")]
	public const byte UserId = 253;

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0x813CF8", Offset = "0x813CF8", VA = "0x813CF8")]
	public ActorProperties()
	{
	}
}
[Token(Token = "0x200002D")]
public class GamePropertyKey
{
	[Token(Token = "0x4000105")]
	public const byte MaxPlayers = byte.MaxValue;

	[Token(Token = "0x4000106")]
	public const byte IsVisible = 254;

	[Token(Token = "0x4000107")]
	public const byte IsOpen = 253;

	[Token(Token = "0x4000108")]
	public const byte PlayerCount = 252;

	[Token(Token = "0x4000109")]
	public const byte Removed = 251;

	[Token(Token = "0x400010A")]
	public const byte PropsListedInLobby = 250;

	[Token(Token = "0x400010B")]
	public const byte CleanupCacheOnLeave = 249;

	[Token(Token = "0x400010C")]
	public const byte MasterClientId = 248;

	[Token(Token = "0x400010D")]
	public const byte ExpectedUsers = 247;

	[Token(Token = "0x400010E")]
	public const byte PlayerTtl = 246;

	[Token(Token = "0x400010F")]
	public const byte EmptyRoomTtl = 245;

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0x813D00", Offset = "0x813D00", VA = "0x813D00")]
	public GamePropertyKey()
	{
	}
}
[Token(Token = "0x200002E")]
public class EventCode
{
	[Token(Token = "0x4000110")]
	public const byte GameList = 230;

	[Token(Token = "0x4000111")]
	public const byte GameListUpdate = 229;

	[Token(Token = "0x4000112")]
	public const byte QueueState = 228;

	[Token(Token = "0x4000113")]
	public const byte Match = 227;

	[Token(Token = "0x4000114")]
	public const byte AppStats = 226;

	[Token(Token = "0x4000115")]
	public const byte LobbyStats = 224;

	[Token(Token = "0x4000116")]
	[Obsolete("TCP routing was removed after becoming obsolete.")]
	public const byte AzureNodeInfo = 210;

	[Token(Token = "0x4000117")]
	public const byte Join = byte.MaxValue;

	[Token(Token = "0x4000118")]
	public const byte Leave = 254;

	[Token(Token = "0x4000119")]
	public const byte PropertiesChanged = 253;

	[Token(Token = "0x400011A")]
	[Obsolete("Use PropertiesChanged now.")]
	public const byte SetProperties = 253;

	[Token(Token = "0x400011B")]
	public const byte ErrorInfo = 251;

	[Token(Token = "0x400011C")]
	public const byte CacheSliceChanged = 250;

	[Token(Token = "0x400011D")]
	public const byte AuthEvent = 223;

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0x813D08", Offset = "0x813D08", VA = "0x813D08")]
	public EventCode()
	{
	}
}
[Token(Token = "0x200002F")]
public class ParameterCode
{
	[Token(Token = "0x400011E")]
	public const byte SuppressRoomEvents = 237;

	[Token(Token = "0x400011F")]
	public const byte EmptyRoomTTL = 236;

	[Token(Token = "0x4000120")]
	public const byte PlayerTTL = 235;

	[Token(Token = "0x4000121")]
	public const byte EventForward = 234;

	[Token(Token = "0x4000122")]
	[Obsolete("Use: IsInactive")]
	public const byte IsComingBack = 233;

	[Token(Token = "0x4000123")]
	public const byte IsInactive = 233;

	[Token(Token = "0x4000124")]
	public const byte CheckUserOnJoin = 232;

	[Token(Token = "0x4000125")]
	public const byte ExpectedValues = 231;

	[Token(Token = "0x4000126")]
	public const byte Address = 230;

	[Token(Token = "0x4000127")]
	public const byte PeerCount = 229;

	[Token(Token = "0x4000128")]
	public const byte GameCount = 228;

	[Token(Token = "0x4000129")]
	public const byte MasterPeerCount = 227;

	[Token(Token = "0x400012A")]
	public const byte UserId = 225;

	[Token(Token = "0x400012B")]
	public const byte ApplicationId = 224;

	[Token(Token = "0x400012C")]
	public const byte Position = 223;

	[Token(Token = "0x400012D")]
	public const byte MatchMakingType = 223;

	[Token(Token = "0x400012E")]
	public const byte GameList = 222;

	[Token(Token = "0x400012F")]
	public const byte Secret = 221;

	[Token(Token = "0x4000130")]
	public const byte AppVersion = 220;

	[Token(Token = "0x4000131")]
	[Obsolete("TCP routing was removed after becoming obsolete.")]
	public const byte AzureNodeInfo = 210;

	[Token(Token = "0x4000132")]
	[Obsolete("TCP routing was removed after becoming obsolete.")]
	public const byte AzureLocalNodeId = 209;

	[Token(Token = "0x4000133")]
	[Obsolete("TCP routing was removed after becoming obsolete.")]
	public const byte AzureMasterNodeId = 208;

	[Token(Token = "0x4000134")]
	public const byte RoomName = byte.MaxValue;

	[Token(Token = "0x4000135")]
	public const byte Broadcast = 250;

	[Token(Token = "0x4000136")]
	public const byte ActorList = 252;

	[Token(Token = "0x4000137")]
	public const byte ActorNr = 254;

	[Token(Token = "0x4000138")]
	public const byte PlayerProperties = 249;

	[Token(Token = "0x4000139")]
	public const byte CustomEventContent = 245;

	[Token(Token = "0x400013A")]
	public const byte Data = 245;

	[Token(Token = "0x400013B")]
	public const byte Code = 244;

	[Token(Token = "0x400013C")]
	public const byte GameProperties = 248;

	[Token(Token = "0x400013D")]
	public const byte Properties = 251;

	[Token(Token = "0x400013E")]
	public const byte TargetActorNr = 253;

	[Token(Token = "0x400013F")]
	public const byte ReceiverGroup = 246;

	[Token(Token = "0x4000140")]
	public const byte Cache = 247;

	[Token(Token = "0x4000141")]
	public const byte CleanupCacheOnLeave = 241;

	[Token(Token = "0x4000142")]
	public const byte Group = 240;

	[Token(Token = "0x4000143")]
	public const byte Remove = 239;

	[Token(Token = "0x4000144")]
	public const byte PublishUserId = 239;

	[Token(Token = "0x4000145")]
	public const byte Add = 238;

	[Token(Token = "0x4000146")]
	public const byte Info = 218;

	[Token(Token = "0x4000147")]
	public const byte ClientAuthenticationType = 217;

	[Token(Token = "0x4000148")]
	public const byte ClientAuthenticationParams = 216;

	[Token(Token = "0x4000149")]
	public const byte JoinMode = 215;

	[Token(Token = "0x400014A")]
	public const byte ClientAuthenticationData = 214;

	[Token(Token = "0x400014B")]
	public const byte MasterClientId = 203;

	[Token(Token = "0x400014C")]
	public const byte FindFriendsRequestList = 1;

	[Token(Token = "0x400014D")]
	public const byte FindFriendsOptions = 2;

	[Token(Token = "0x400014E")]
	public const byte FindFriendsResponseOnlineList = 1;

	[Token(Token = "0x400014F")]
	public const byte FindFriendsResponseRoomIdList = 2;

	[Token(Token = "0x4000150")]
	public const byte LobbyName = 213;

	[Token(Token = "0x4000151")]
	public const byte LobbyType = 212;

	[Token(Token = "0x4000152")]
	public const byte LobbyStats = 211;

	[Token(Token = "0x4000153")]
	public const byte Region = 210;

	[Token(Token = "0x4000154")]
	public const byte UriPath = 209;

	[Token(Token = "0x4000155")]
	public const byte WebRpcParameters = 208;

	[Token(Token = "0x4000156")]
	public const byte WebRpcReturnCode = 207;

	[Token(Token = "0x4000157")]
	public const byte WebRpcReturnMessage = 206;

	[Token(Token = "0x4000158")]
	public const byte CacheSliceIndex = 205;

	[Token(Token = "0x4000159")]
	public const byte Plugins = 204;

	[Token(Token = "0x400015A")]
	public const byte NickName = 202;

	[Token(Token = "0x400015B")]
	public const byte PluginName = 201;

	[Token(Token = "0x400015C")]
	public const byte PluginVersion = 200;

	[Token(Token = "0x400015D")]
	public const byte Cluster = 196;

	[Token(Token = "0x400015E")]
	public const byte ExpectedProtocol = 195;

	[Token(Token = "0x400015F")]
	public const byte CustomInitData = 194;

	[Token(Token = "0x4000160")]
	public const byte EncryptionMode = 193;

	[Token(Token = "0x4000161")]
	public const byte EncryptionData = 192;

	[Token(Token = "0x4000162")]
	public const byte RoomOptionFlags = 191;

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0x813D10", Offset = "0x813D10", VA = "0x813D10")]
	public ParameterCode()
	{
	}
}
[Token(Token = "0x2000030")]
public class OperationCode
{
	[Token(Token = "0x4000163")]
	[Obsolete("Exchanging encrpytion keys is done internally in the lib now. Don't expect this operation-result.")]
	public const byte ExchangeKeysForEncryption = 250;

	[Token(Token = "0x4000164")]
	[Obsolete]
	public const byte Join = byte.MaxValue;

	[Token(Token = "0x4000165")]
	public const byte AuthenticateOnce = 231;

	[Token(Token = "0x4000166")]
	public const byte Authenticate = 230;

	[Token(Token = "0x4000167")]
	public const byte JoinLobby = 229;

	[Token(Token = "0x4000168")]
	public const byte LeaveLobby = 228;

	[Token(Token = "0x4000169")]
	public const byte CreateGame = 227;

	[Token(Token = "0x400016A")]
	public const byte JoinGame = 226;

	[Token(Token = "0x400016B")]
	public const byte JoinRandomGame = 225;

	[Token(Token = "0x400016C")]
	public const byte Leave = 254;

	[Token(Token = "0x400016D")]
	public const byte RaiseEvent = 253;

	[Token(Token = "0x400016E")]
	public const byte SetProperties = 252;

	[Token(Token = "0x400016F")]
	public const byte GetProperties = 251;

	[Token(Token = "0x4000170")]
	public const byte ChangeGroups = 248;

	[Token(Token = "0x4000171")]
	public const byte FindFriends = 222;

	[Token(Token = "0x4000172")]
	public const byte GetLobbyStats = 221;

	[Token(Token = "0x4000173")]
	public const byte GetRegions = 220;

	[Token(Token = "0x4000174")]
	public const byte WebRpc = 219;

	[Token(Token = "0x4000175")]
	public const byte ServerSettings = 218;

	[Token(Token = "0x4000176")]
	public const byte GetGameList = 217;

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0x813D18", Offset = "0x813D18", VA = "0x813D18")]
	public OperationCode()
	{
	}
}
[Token(Token = "0x2000031")]
public enum JoinMode : byte
{
	[Token(Token = "0x4000178")]
	Default,
	[Token(Token = "0x4000179")]
	CreateIfNotExists,
	[Token(Token = "0x400017A")]
	JoinOrRejoin,
	[Token(Token = "0x400017B")]
	RejoinOnly
}
[Token(Token = "0x2000032")]
public enum MatchmakingMode : byte
{
	[Token(Token = "0x400017D")]
	FillRoom,
	[Token(Token = "0x400017E")]
	SerialMatching,
	[Token(Token = "0x400017F")]
	RandomMatching
}
[Token(Token = "0x2000033")]
public enum ReceiverGroup : byte
{
	[Token(Token = "0x4000181")]
	Others,
	[Token(Token = "0x4000182")]
	All,
	[Token(Token = "0x4000183")]
	MasterClient
}
[Token(Token = "0x2000034")]
public enum EventCaching : byte
{
	[Token(Token = "0x4000185")]
	DoNotCache = 0,
	[Token(Token = "0x4000186")]
	[Obsolete]
	MergeCache = 1,
	[Token(Token = "0x4000187")]
	[Obsolete]
	ReplaceCache = 2,
	[Token(Token = "0x4000188")]
	[Obsolete]
	RemoveCache = 3,
	[Token(Token = "0x4000189")]
	AddToRoomCache = 4,
	[Token(Token = "0x400018A")]
	AddToRoomCacheGlobal = 5,
	[Token(Token = "0x400018B")]
	RemoveFromRoomCache = 6,
	[Token(Token = "0x400018C")]
	RemoveFromRoomCacheForActorsLeft = 7,
	[Token(Token = "0x400018D")]
	SliceIncreaseIndex = 10,
	[Token(Token = "0x400018E")]
	SliceSetIndex = 11,
	[Token(Token = "0x400018F")]
	SlicePurgeIndex = 12,
	[Token(Token = "0x4000190")]
	SlicePurgeUpToIndex = 13
}
[Token(Token = "0x2000035")]
[Flags]
public enum PropertyTypeFlag : byte
{
	[Token(Token = "0x4000192")]
	None = 0,
	[Token(Token = "0x4000193")]
	Game = 1,
	[Token(Token = "0x4000194")]
	Actor = 2,
	[Token(Token = "0x4000195")]
	GameAndActor = 3
}
[Token(Token = "0x2000036")]
public class RoomOptions
{
	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool isVisibleField;

	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	private bool isOpenField;

	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
	public byte MaxPlayers;

	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int PlayerTtl;

	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int EmptyRoomTtl;

	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool cleanupCacheOnLeaveField;

	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ExitGames.Client.Photon.Hashtable CustomRoomProperties;

	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string[] CustomRoomPropertiesForLobby;

	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public string[] Plugins;

	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool suppressRoomEventsField;

	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool publishUserIdField;

	[Token(Token = "0x40001A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	private bool deleteNullPropertiesField;

	[Token(Token = "0x17000007")]
	public bool IsVisible
	{
		[Token(Token = "0x60000A5")]
		[Address(RVA = "0x813D20", Offset = "0x813D20", VA = "0x813D20")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000A6")]
		[Address(RVA = "0x813D28", Offset = "0x813D28", VA = "0x813D28")]
		set
		{
		}
	}

	[Token(Token = "0x17000008")]
	public bool IsOpen
	{
		[Token(Token = "0x60000A7")]
		[Address(RVA = "0x813D34", Offset = "0x813D34", VA = "0x813D34")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000A8")]
		[Address(RVA = "0x813D3C", Offset = "0x813D3C", VA = "0x813D3C")]
		set
		{
		}
	}

	[Token(Token = "0x17000009")]
	public bool CleanupCacheOnLeave
	{
		[Token(Token = "0x60000A9")]
		[Address(RVA = "0x813D48", Offset = "0x813D48", VA = "0x813D48")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000AA")]
		[Address(RVA = "0x813D50", Offset = "0x813D50", VA = "0x813D50")]
		set
		{
		}
	}

	[Token(Token = "0x1700000A")]
	public bool SuppressRoomEvents
	{
		[Token(Token = "0x60000AB")]
		[Address(RVA = "0x813D5C", Offset = "0x813D5C", VA = "0x813D5C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700000B")]
	public bool PublishUserId
	{
		[Token(Token = "0x60000AC")]
		[Address(RVA = "0x813D64", Offset = "0x813D64", VA = "0x813D64")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000AD")]
		[Address(RVA = "0x813D6C", Offset = "0x813D6C", VA = "0x813D6C")]
		set
		{
		}
	}

	[Token(Token = "0x1700000C")]
	public bool DeleteNullProperties
	{
		[Token(Token = "0x60000AE")]
		[Address(RVA = "0x813D78", Offset = "0x813D78", VA = "0x813D78")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000AF")]
		[Address(RVA = "0x813D80", Offset = "0x813D80", VA = "0x813D80")]
		set
		{
		}
	}

	[Token(Token = "0x1700000D")]
	[Obsolete("Use property with uppercase naming instead.")]
	public bool isVisible
	{
		[Token(Token = "0x60000B0")]
		[Address(RVA = "0x813D8C", Offset = "0x813D8C", VA = "0x813D8C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000B1")]
		[Address(RVA = "0x813D94", Offset = "0x813D94", VA = "0x813D94")]
		set
		{
		}
	}

	[Token(Token = "0x1700000E")]
	[Obsolete("Use property with uppercase naming instead.")]
	public bool isOpen
	{
		[Token(Token = "0x60000B2")]
		[Address(RVA = "0x813DA0", Offset = "0x813DA0", VA = "0x813DA0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000B3")]
		[Address(RVA = "0x813DA8", Offset = "0x813DA8", VA = "0x813DA8")]
		set
		{
		}
	}

	[Token(Token = "0x1700000F")]
	[Obsolete("Use property with uppercase naming instead.")]
	public byte maxPlayers
	{
		[Token(Token = "0x60000B4")]
		[Address(RVA = "0x813DB4", Offset = "0x813DB4", VA = "0x813DB4")]
		get
		{
			return default(byte);
		}
		[Token(Token = "0x60000B5")]
		[Address(RVA = "0x813DBC", Offset = "0x813DBC", VA = "0x813DBC")]
		set
		{
		}
	}

	[Token(Token = "0x17000010")]
	[Obsolete("Use property with uppercase naming instead.")]
	public bool cleanupCacheOnLeave
	{
		[Token(Token = "0x60000B6")]
		[Address(RVA = "0x813DC4", Offset = "0x813DC4", VA = "0x813DC4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000B7")]
		[Address(RVA = "0x813DCC", Offset = "0x813DCC", VA = "0x813DCC")]
		set
		{
		}
	}

	[Token(Token = "0x17000011")]
	[Obsolete("Use property with uppercase naming instead.")]
	public ExitGames.Client.Photon.Hashtable customRoomProperties
	{
		[Token(Token = "0x60000B8")]
		[Address(RVA = "0x813DD8", Offset = "0x813DD8", VA = "0x813DD8")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000B9")]
		[Address(RVA = "0x813DE0", Offset = "0x813DE0", VA = "0x813DE0")]
		set
		{
		}
	}

	[Token(Token = "0x17000012")]
	[Obsolete("Use property with uppercase naming instead.")]
	public string[] customRoomPropertiesForLobby
	{
		[Token(Token = "0x60000BA")]
		[Address(RVA = "0x813DE8", Offset = "0x813DE8", VA = "0x813DE8")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000BB")]
		[Address(RVA = "0x813DF0", Offset = "0x813DF0", VA = "0x813DF0")]
		set
		{
		}
	}

	[Token(Token = "0x17000013")]
	[Obsolete("Use property with uppercase naming instead.")]
	public string[] plugins
	{
		[Token(Token = "0x60000BC")]
		[Address(RVA = "0x813DF8", Offset = "0x813DF8", VA = "0x813DF8")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000BD")]
		[Address(RVA = "0x813E00", Offset = "0x813E00", VA = "0x813E00")]
		set
		{
		}
	}

	[Token(Token = "0x17000014")]
	[Obsolete("Use property with uppercase naming instead.")]
	public bool suppressRoomEvents
	{
		[Token(Token = "0x60000BE")]
		[Address(RVA = "0x813E08", Offset = "0x813E08", VA = "0x813E08")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000015")]
	[Obsolete("Use property with uppercase naming instead.")]
	public bool publishUserId
	{
		[Token(Token = "0x60000BF")]
		[Address(RVA = "0x813E10", Offset = "0x813E10", VA = "0x813E10")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000C0")]
		[Address(RVA = "0x813E18", Offset = "0x813E18", VA = "0x813E18")]
		set
		{
		}
	}

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0x811628", Offset = "0x811628", VA = "0x811628")]
	public RoomOptions()
	{
	}
}
[Token(Token = "0x2000037")]
public class RaiseEventOptions
{
	[Token(Token = "0x40001A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly RaiseEventOptions Default;

	[Token(Token = "0x40001A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public EventCaching CachingOption;

	[Token(Token = "0x40001A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	public byte InterestGroup;

	[Token(Token = "0x40001A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int[] TargetActors;

	[Token(Token = "0x40001A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ReceiverGroup Receivers;

	[Token(Token = "0x40001A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public byte SequenceChannel;

	[Token(Token = "0x40001A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool ForwardToWebhook;

	[Token(Token = "0x40001A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
	public bool Encrypt;

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0x813E24", Offset = "0x813E24", VA = "0x813E24")]
	public void Reset()
	{
	}

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0x813EC0", Offset = "0x813EC0", VA = "0x813EC0")]
	public RaiseEventOptions()
	{
	}
}
[Token(Token = "0x2000038")]
public enum LobbyType : byte
{
	[Token(Token = "0x40001AB")]
	Default = 0,
	[Token(Token = "0x40001AC")]
	SqlLobby = 2,
	[Token(Token = "0x40001AD")]
	AsyncRandomLobby = 3
}
[Token(Token = "0x2000039")]
public class TypedLobby
{
	[Token(Token = "0x40001AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string Name;

	[Token(Token = "0x40001AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LobbyType Type;

	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly TypedLobby Default;

	[Token(Token = "0x17000016")]
	public bool IsDefault
	{
		[Token(Token = "0x60000C5")]
		[Address(RVA = "0x8110D0", Offset = "0x8110D0", VA = "0x8110D0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0x813F2C", Offset = "0x813F2C", VA = "0x813F2C")]
	public TypedLobby()
	{
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0x813F8C", Offset = "0x813F8C", VA = "0x813F8C")]
	public TypedLobby(string name, LobbyType type)
	{
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0x813FBC", Offset = "0x813FBC", VA = "0x813FBC", Slot = "3")]
	public override string ToString()
	{
		return null;
	}
}
[Token(Token = "0x200003A")]
public class TypedLobbyInfo : TypedLobby
{
	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int PlayerCount;

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int RoomCount;

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0x8140A8", Offset = "0x8140A8", VA = "0x8140A8", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0x814254", Offset = "0x814254", VA = "0x814254")]
	public TypedLobbyInfo()
	{
	}
}
[Token(Token = "0x200003B")]
public enum AuthModeOption
{
	[Token(Token = "0x40001B4")]
	Auth,
	[Token(Token = "0x40001B5")]
	AuthOnce,
	[Token(Token = "0x40001B6")]
	AuthOnceWss
}
[Token(Token = "0x200003C")]
public enum CustomAuthenticationType : byte
{
	[Token(Token = "0x40001B8")]
	Custom = 0,
	[Token(Token = "0x40001B9")]
	Steam = 1,
	[Token(Token = "0x40001BA")]
	Facebook = 2,
	[Token(Token = "0x40001BB")]
	Oculus = 3,
	[Token(Token = "0x40001BC")]
	PlayStation = 4,
	[Token(Token = "0x40001BD")]
	Xbox = 5,
	[Token(Token = "0x40001BE")]
	Viveport = 10,
	[Token(Token = "0x40001BF")]
	NintendoSwitch = 11,
	[Token(Token = "0x40001C0")]
	None = byte.MaxValue
}
[Token(Token = "0x200003D")]
public class AuthenticationValues
{
	[Token(Token = "0x40001C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private CustomAuthenticationType authType;

	[Token(Token = "0x17000017")]
	public CustomAuthenticationType AuthType
	{
		[Token(Token = "0x60000CC")]
		[Address(RVA = "0x8142A8", Offset = "0x8142A8", VA = "0x8142A8")]
		get
		{
			return default(CustomAuthenticationType);
		}
		[Token(Token = "0x60000CD")]
		[Address(RVA = "0x8142B0", Offset = "0x8142B0", VA = "0x8142B0")]
		set
		{
		}
	}

	[Token(Token = "0x17000018")]
	public string AuthGetParameters
	{
		[Token(Token = "0x60000CE")]
		[Address(RVA = "0x8142B8", Offset = "0x8142B8", VA = "0x8142B8")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60000CF")]
		[Address(RVA = "0x8142C0", Offset = "0x8142C0", VA = "0x8142C0")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000019")]
	public object AuthPostData
	{
		[Token(Token = "0x60000D0")]
		[Address(RVA = "0x8142C8", Offset = "0x8142C8", VA = "0x8142C8")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60000D1")]
		[Address(RVA = "0x8142D0", Offset = "0x8142D0", VA = "0x8142D0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700001A")]
	public string Token
	{
		[Token(Token = "0x60000D2")]
		[Address(RVA = "0x8142D8", Offset = "0x8142D8", VA = "0x8142D8")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60000D3")]
		[Address(RVA = "0x8142E0", Offset = "0x8142E0", VA = "0x8142E0")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700001B")]
	public string UserId
	{
		[Token(Token = "0x60000D4")]
		[Address(RVA = "0x8142E8", Offset = "0x8142E8", VA = "0x8142E8")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60000D5")]
		[Address(RVA = "0x8142F0", Offset = "0x8142F0", VA = "0x8142F0")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0x8142F8", Offset = "0x8142F8", VA = "0x8142F8")]
	public AuthenticationValues()
	{
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0x814308", Offset = "0x814308", VA = "0x814308")]
	public AuthenticationValues(string userId)
	{
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0x814338", Offset = "0x814338", VA = "0x814338", Slot = "4")]
	public virtual void SetAuthPostData(string stringData)
	{
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0x814374", Offset = "0x814374", VA = "0x814374", Slot = "5")]
	public virtual void SetAuthPostData(byte[] byteData)
	{
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0x81437C", Offset = "0x81437C", VA = "0x81437C", Slot = "6")]
	public virtual void SetAuthPostData(Dictionary<string, object> dictData)
	{
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0x814384", Offset = "0x814384", VA = "0x814384", Slot = "7")]
	public virtual void AddAuthParameter(string key, string value)
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0x814550", Offset = "0x814550", VA = "0x814550", Slot = "3")]
	public override string ToString()
	{
		return null;
	}
}
[Token(Token = "0x200003E")]
public class FindFriendsOptions
{
	[Token(Token = "0x40001C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool CreatedOnGs;

	[Token(Token = "0x40001C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	public bool Visible;

	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
	public bool Open;

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0x812628", Offset = "0x812628", VA = "0x812628")]
	internal int ToIntFlags()
	{
		return default(int);
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0x8145E8", Offset = "0x8145E8", VA = "0x8145E8")]
	public FindFriendsOptions()
	{
	}
}
[Token(Token = "0x200003F")]
public enum ClientState
{
	[Token(Token = "0x40001CA")]
	Uninitialized,
	[Token(Token = "0x40001CB")]
	PeerCreated,
	[Token(Token = "0x40001CC")]
	Queued,
	[Token(Token = "0x40001CD")]
	Authenticated,
	[Token(Token = "0x40001CE")]
	JoinedLobby,
	[Token(Token = "0x40001CF")]
	DisconnectingFromMasterserver,
	[Token(Token = "0x40001D0")]
	ConnectingToGameserver,
	[Token(Token = "0x40001D1")]
	ConnectedToGameserver,
	[Token(Token = "0x40001D2")]
	Joining,
	[Token(Token = "0x40001D3")]
	Joined,
	[Token(Token = "0x40001D4")]
	Leaving,
	[Token(Token = "0x40001D5")]
	DisconnectingFromGameserver,
	[Token(Token = "0x40001D6")]
	ConnectingToMasterserver,
	[Token(Token = "0x40001D7")]
	QueuedComingFromGameserver,
	[Token(Token = "0x40001D8")]
	Disconnecting,
	[Token(Token = "0x40001D9")]
	Disconnected,
	[Token(Token = "0x40001DA")]
	ConnectedToMaster,
	[Token(Token = "0x40001DB")]
	ConnectingToNameServer,
	[Token(Token = "0x40001DC")]
	ConnectedToNameServer,
	[Token(Token = "0x40001DD")]
	DisconnectingFromNameServer,
	[Token(Token = "0x40001DE")]
	Authenticating
}
[Token(Token = "0x2000040")]
internal enum JoinType
{
	[Token(Token = "0x40001E0")]
	CreateRoom,
	[Token(Token = "0x40001E1")]
	JoinRoom,
	[Token(Token = "0x40001E2")]
	JoinRandomRoom,
	[Token(Token = "0x40001E3")]
	JoinOrCreateRoom
}
[Token(Token = "0x2000041")]
public enum DisconnectCause
{
	[Token(Token = "0x40001E5")]
	DisconnectByServerUserLimit = 1042,
	[Token(Token = "0x40001E6")]
	ExceptionOnConnect = 1023,
	[Token(Token = "0x40001E7")]
	DisconnectByServerTimeout = 1041,
	[Token(Token = "0x40001E8")]
	DisconnectByServerLogic = 1043,
	[Token(Token = "0x40001E9")]
	Exception = 1026,
	[Token(Token = "0x40001EA")]
	InvalidAuthentication = 32767,
	[Token(Token = "0x40001EB")]
	MaxCcuReached = 32757,
	[Token(Token = "0x40001EC")]
	InvalidRegion = 32756,
	[Token(Token = "0x40001ED")]
	SecurityExceptionOnConnect = 1022,
	[Token(Token = "0x40001EE")]
	DisconnectByClientTimeout = 1040,
	[Token(Token = "0x40001EF")]
	InternalReceiveException = 1039,
	[Token(Token = "0x40001F0")]
	AuthenticationTicketExpired = 32753
}
[Token(Token = "0x2000042")]
public enum ServerConnection
{
	[Token(Token = "0x40001F2")]
	MasterServer,
	[Token(Token = "0x40001F3")]
	GameServer,
	[Token(Token = "0x40001F4")]
	NameServer
}
[Token(Token = "0x2000043")]
internal class NetworkingPeer : LoadBalancingPeer, IPhotonPeerListener
{
	[Token(Token = "0x40001F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	protected internal string AppId;

	[Token(Token = "0x40001F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private string tokenCache;

	[Token(Token = "0x40001F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public AuthModeOption AuthMode;

	[Token(Token = "0x40001F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	public EncryptionMode EncryptionMode;

	[Token(Token = "0x40001FB")]
	public const string NameServerHost = "ns.exitgames.com";

	[Token(Token = "0x40001FC")]
	public const string NameServerHttp = "http://ns.exitgamescloud.com:80/photon/n";

	[Token(Token = "0x40001FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Dictionary<ConnectionProtocol, int> ProtocolToNameServerPort;

	[Token(Token = "0x4000202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public bool IsInitialConnect;

	[Token(Token = "0x4000203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x131")]
	public bool insideLobby;

	[Token(Token = "0x4000205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	protected internal List<TypedLobbyInfo> LobbyStatistics;

	[Token(Token = "0x4000206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public Dictionary<string, RoomInfo> mGameList;

	[Token(Token = "0x4000207")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public RoomInfo[] mGameListCopy;

	[Token(Token = "0x4000208")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private string playername;

	[Token(Token = "0x4000209")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private bool mPlayernameHasToBeUpdated;

	[Token(Token = "0x400020A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private Room currentRoom;

	[Token(Token = "0x400020F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
	private JoinType lastJoinType;

	[Token(Token = "0x4000210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	protected internal EnterRoomParams enterRoomParamsCache;

	[Token(Token = "0x4000211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private bool didAuthenticate;

	[Token(Token = "0x4000212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private string[] friendListRequested;

	[Token(Token = "0x4000213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private int friendListTimestamp;

	[Token(Token = "0x4000214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
	private bool isFetchingFriendList;

	[Token(Token = "0x4000217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	private string cloudCluster;

	[Token(Token = "0x4000218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	public string CurrentCluster;

	[Token(Token = "0x4000219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	public Dictionary<int, PhotonPlayer> mActors;

	[Token(Token = "0x400021A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	public PhotonPlayer[] mOtherPlayerListCopy;

	[Token(Token = "0x400021B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	public PhotonPlayer[] mPlayerListCopy;

	[Token(Token = "0x400021C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	public bool hasSwitchedMC;

	[Token(Token = "0x400021D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	private HashSet<byte> allowedReceivingGroups;

	[Token(Token = "0x400021E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	private HashSet<byte> blockSendingGroups;

	[Token(Token = "0x400021F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	protected internal Dictionary<int, PhotonView> photonViewList;

	[Token(Token = "0x4000220")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	private readonly PhotonStream readStream;

	[Token(Token = "0x4000221")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	private readonly PhotonStream pStream;

	[Token(Token = "0x4000222")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
	private readonly Dictionary<int, ExitGames.Client.Photon.Hashtable> dataPerGroupReliable;

	[Token(Token = "0x4000223")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
	private readonly Dictionary<int, ExitGames.Client.Photon.Hashtable> dataPerGroupUnreliable;

	[Token(Token = "0x4000224")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
	protected internal short currentLevelPrefix;

	[Token(Token = "0x4000225")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x222")]
	protected internal bool loadingLevelAndPausedNetwork;

	[Token(Token = "0x4000226")]
	protected internal const string CurrentSceneProperty = "curScn";

	[Token(Token = "0x4000227")]
	protected internal const string CurrentScenePropertyLoadAsync = "curScnLa";

	[Token(Token = "0x4000228")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static bool UsePrefabCache;

	[Token(Token = "0x4000229")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
	internal IPunPrefabPool ObjectPool;

	[Token(Token = "0x400022A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static Dictionary<string, GameObject> PrefabCache;

	[Token(Token = "0x400022B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
	private Dictionary<Type, List<MethodInfo>> monoRPCMethodsCache;

	[Token(Token = "0x400022C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
	private readonly Dictionary<string, int> rpcShortcuts;

	[Token(Token = "0x400022D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly string OnPhotonInstantiateString;

	[Token(Token = "0x400022E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
	private string cachedServerAddress;

	[Token(Token = "0x400022F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
	private string cachedApplicationName;

	[Token(Token = "0x4000230")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
	private ServerConnection cachedServerType;

	[Token(Token = "0x4000231")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
	private AsyncOperation _AsyncLevelLoadingOperation;

	[Token(Token = "0x4000232")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	private RaiseEventOptions _levelReloadEventOptions;

	[Token(Token = "0x4000233")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
	private bool _isReconnecting;

	[Token(Token = "0x4000234")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
	private readonly Type typePunRPC;

	[Token(Token = "0x4000235")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
	private readonly Type typePhotonMessageInfo;

	[Token(Token = "0x4000236")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	private readonly object keyByteZero;

	[Token(Token = "0x4000237")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
	private readonly object keyByteOne;

	[Token(Token = "0x4000238")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
	private readonly object keyByteTwo;

	[Token(Token = "0x4000239")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	private readonly object keyByteThree;

	[Token(Token = "0x400023A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
	private readonly object keyByteFour;

	[Token(Token = "0x400023B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
	private readonly object keyByteFive;

	[Token(Token = "0x400023C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
	private readonly object[] emptyObjectArray;

	[Token(Token = "0x400023D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
	private readonly Type[] emptyTypeArray;

	[Token(Token = "0x400023E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
	private Dictionary<int, object[]> tempInstantiationData;

	[Token(Token = "0x400023F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
	private readonly ExitGames.Client.Photon.Hashtable reusedRpcEvent;

	[Token(Token = "0x4000240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static int ObjectsInOneUpdate;

	[Token(Token = "0x4000241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
	private RaiseEventOptions options;

	[Token(Token = "0x4000242")]
	public const int SyncViewId = 0;

	[Token(Token = "0x4000243")]
	public const int SyncCompressed = 1;

	[Token(Token = "0x4000244")]
	public const int SyncNullValues = 2;

	[Token(Token = "0x4000245")]
	public const int SyncFirstValue = 3;

	[Token(Token = "0x4000246")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
	public bool IsReloadingLevel;

	[Token(Token = "0x4000247")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D9")]
	public bool AsynchLevelLoadCall;

	[Token(Token = "0x1700001C")]
	protected internal string AppVersion
	{
		[Token(Token = "0x60000DF")]
		[Address(RVA = "0x8145F0", Offset = "0x8145F0", VA = "0x8145F0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700001D")]
	public AuthenticationValues AuthValues
	{
		[Token(Token = "0x60000E0")]
		[Address(RVA = "0x8146AC", Offset = "0x8146AC", VA = "0x8146AC")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60000E1")]
		[Address(RVA = "0x8146B4", Offset = "0x8146B4", VA = "0x8146B4")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700001E")]
	private string TokenForInit
	{
		[Token(Token = "0x60000E2")]
		[Address(RVA = "0x8146BC", Offset = "0x8146BC", VA = "0x8146BC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700001F")]
	public bool IsUsingNameServer
	{
		[Token(Token = "0x60000E3")]
		[Address(RVA = "0x8146DC", Offset = "0x8146DC", VA = "0x8146DC")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60000E4")]
		[Address(RVA = "0x8146E4", Offset = "0x8146E4", VA = "0x8146E4")]
		[CompilerGenerated]
		protected internal set
		{
		}
	}

	[Token(Token = "0x17000020")]
	public string NameServerAddress
	{
		[Token(Token = "0x60000E5")]
		[Address(RVA = "0x8146F0", Offset = "0x8146F0", VA = "0x8146F0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000021")]
	public string MasterServerAddress
	{
		[Token(Token = "0x60000E6")]
		[Address(RVA = "0x8148CC", Offset = "0x8148CC", VA = "0x8148CC")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60000E7")]
		[Address(RVA = "0x8148D4", Offset = "0x8148D4", VA = "0x8148D4")]
		[CompilerGenerated]
		protected internal set
		{
		}
	}

	[Token(Token = "0x17000022")]
	public string GameServerAddress
	{
		[Token(Token = "0x60000E8")]
		[Address(RVA = "0x8148DC", Offset = "0x8148DC", VA = "0x8148DC")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60000E9")]
		[Address(RVA = "0x8148E4", Offset = "0x8148E4", VA = "0x8148E4")]
		[CompilerGenerated]
		protected internal set
		{
		}
	}

	[Token(Token = "0x17000023")]
	protected internal ServerConnection Server
	{
		[Token(Token = "0x60000EA")]
		[Address(RVA = "0x8148EC", Offset = "0x8148EC", VA = "0x8148EC")]
		[CompilerGenerated]
		get
		{
			return default(ServerConnection);
		}
		[Token(Token = "0x60000EB")]
		[Address(RVA = "0x8148F4", Offset = "0x8148F4", VA = "0x8148F4")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000024")]
	public ClientState State
	{
		[Token(Token = "0x60000EC")]
		[Address(RVA = "0x8148FC", Offset = "0x8148FC", VA = "0x8148FC")]
		[CompilerGenerated]
		get
		{
			return default(ClientState);
		}
		[Token(Token = "0x60000ED")]
		[Address(RVA = "0x814904", Offset = "0x814904", VA = "0x814904")]
		[CompilerGenerated]
		internal set
		{
		}
	}

	[Token(Token = "0x17000025")]
	public TypedLobby lobby
	{
		[Token(Token = "0x60000EE")]
		[Address(RVA = "0x81490C", Offset = "0x81490C", VA = "0x81490C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60000EF")]
		[Address(RVA = "0x814914", Offset = "0x814914", VA = "0x814914")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000026")]
	private bool requestLobbyStatistics
	{
		[Token(Token = "0x60000F0")]
		[Address(RVA = "0x81491C", Offset = "0x81491C", VA = "0x81491C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000027")]
	public string PlayerName
	{
		[Token(Token = "0x60000F1")]
		[Address(RVA = "0x81498C", Offset = "0x81498C", VA = "0x81498C")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000F2")]
		[Address(RVA = "0x814994", Offset = "0x814994", VA = "0x814994")]
		set
		{
		}
	}

	[Token(Token = "0x17000028")]
	public Room CurrentRoom
	{
		[Token(Token = "0x60000F3")]
		[Address(RVA = "0x814A14", Offset = "0x814A14", VA = "0x814A14")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000F4")]
		[Address(RVA = "0x814B2C", Offset = "0x814B2C", VA = "0x814B2C")]
		private set
		{
		}
	}

	[Token(Token = "0x17000029")]
	public PhotonPlayer LocalPlayer
	{
		[Token(Token = "0x60000F5")]
		[Address(RVA = "0x814B34", Offset = "0x814B34", VA = "0x814B34")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60000F6")]
		[Address(RVA = "0x814B3C", Offset = "0x814B3C", VA = "0x814B3C")]
		[CompilerGenerated]
		internal set
		{
		}
	}

	[Token(Token = "0x1700002A")]
	public int PlayersOnMasterCount
	{
		[Token(Token = "0x60000F7")]
		[Address(RVA = "0x814B44", Offset = "0x814B44", VA = "0x814B44")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60000F8")]
		[Address(RVA = "0x814B4C", Offset = "0x814B4C", VA = "0x814B4C")]
		[CompilerGenerated]
		internal set
		{
		}
	}

	[Token(Token = "0x1700002B")]
	public int PlayersInRoomsCount
	{
		[Token(Token = "0x60000F9")]
		[Address(RVA = "0x814B54", Offset = "0x814B54", VA = "0x814B54")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60000FA")]
		[Address(RVA = "0x814B5C", Offset = "0x814B5C", VA = "0x814B5C")]
		[CompilerGenerated]
		internal set
		{
		}
	}

	[Token(Token = "0x1700002C")]
	public int RoomsCount
	{
		[Token(Token = "0x60000FB")]
		[Address(RVA = "0x814B64", Offset = "0x814B64", VA = "0x814B64")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60000FC")]
		[Address(RVA = "0x814B6C", Offset = "0x814B6C", VA = "0x814B6C")]
		[CompilerGenerated]
		internal set
		{
		}
	}

	[Token(Token = "0x1700002D")]
	protected internal int FriendListAge
	{
		[Token(Token = "0x60000FD")]
		[Address(RVA = "0x814B74", Offset = "0x814B74", VA = "0x814B74")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700002E")]
	public bool IsAuthorizeSecretAvailable
	{
		[Token(Token = "0x60000FE")]
		[Address(RVA = "0x814BAC", Offset = "0x814BAC", VA = "0x814BAC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700002F")]
	public List<Region> AvailableRegions
	{
		[Token(Token = "0x60000FF")]
		[Address(RVA = "0x814BD4", Offset = "0x814BD4", VA = "0x814BD4")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000100")]
		[Address(RVA = "0x814BDC", Offset = "0x814BDC", VA = "0x814BDC")]
		[CompilerGenerated]
		protected internal set
		{
		}
	}

	[Token(Token = "0x17000030")]
	public CloudRegionCode CloudRegion
	{
		[Token(Token = "0x6000101")]
		[Address(RVA = "0x814BE4", Offset = "0x814BE4", VA = "0x814BE4")]
		[CompilerGenerated]
		get
		{
			return default(CloudRegionCode);
		}
		[Token(Token = "0x6000102")]
		[Address(RVA = "0x814BEC", Offset = "0x814BEC", VA = "0x814BEC")]
		[CompilerGenerated]
		protected internal set
		{
		}
	}

	[Token(Token = "0x17000031")]
	public int mMasterClientId
	{
		[Token(Token = "0x6000103")]
		[Address(RVA = "0x814BF4", Offset = "0x814BF4", VA = "0x814BF4")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000104")]
		[Address(RVA = "0x814CB4", Offset = "0x814CB4", VA = "0x814CB4")]
		private set
		{
		}
	}

	[Token(Token = "0x6000105")]
	[Address(RVA = "0x814CCC", Offset = "0x814CCC", VA = "0x814CCC")]
	public NetworkingPeer(string playername, ConnectionProtocol connectionProtocol)
	{
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0x8146F4", Offset = "0x8146F4", VA = "0x8146F4")]
	private string GetNameServerAddress()
	{
		return null;
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0x81553C", Offset = "0x81553C", VA = "0x81553C", Slot = "6")]
	public override bool Connect(string serverAddress, string applicationName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000108")]
	[Address(RVA = "0x8155AC", Offset = "0x8155AC", VA = "0x8155AC")]
	public bool ReconnectToMaster()
	{
		return default(bool);
	}

	[Token(Token = "0x6000109")]
	[Address(RVA = "0x815894", Offset = "0x815894", VA = "0x815894")]
	public bool ReconnectAndRejoin()
	{
		return default(bool);
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0x815674", Offset = "0x815674", VA = "0x815674")]
	public bool Connect(string serverAddress, ServerConnection type)
	{
		return default(bool);
	}

	[Token(Token = "0x600010B")]
	[Address(RVA = "0x815FE4", Offset = "0x815FE4", VA = "0x815FE4")]
	private bool Reconnect()
	{
		return default(bool);
	}

	[Token(Token = "0x600010C")]
	[Address(RVA = "0x8160D0", Offset = "0x8160D0", VA = "0x8160D0")]
	public bool ConnectToNameServer()
	{
		return default(bool);
	}

	[Token(Token = "0x600010D")]
	[Address(RVA = "0x816210", Offset = "0x816210", VA = "0x816210")]
	public bool ConnectToRegionMaster(CloudRegionCode region, [Optional] string specificCluster)
	{
		return default(bool);
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0x815990", Offset = "0x815990", VA = "0x815990")]
	protected internal void SetupProtocol(ServerConnection serverType)
	{
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0x816594", Offset = "0x816594", VA = "0x816594", Slot = "8")]
	public override void Disconnect()
	{
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0x816370", Offset = "0x816370", VA = "0x816370")]
	private bool CallAuthenticate()
	{
		return default(bool);
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0x81669C", Offset = "0x81669C", VA = "0x81669C")]
	private void DisconnectToReconnect()
	{
	}

	[Token(Token = "0x6000112")]
	[Address(RVA = "0x8166C4", Offset = "0x8166C4", VA = "0x8166C4")]
	public bool GetRegions()
	{
		return default(bool);
	}

	[Token(Token = "0x6000113")]
	[Address(RVA = "0x816708", Offset = "0x816708", VA = "0x816708", Slot = "26")]
	public override bool OpFindFriends(string[] friendsToFind, [Optional] FindFriendsOptions findFriendsOptions)
	{
		return default(bool);
	}

	[Token(Token = "0x6000114")]
	[Address(RVA = "0x816728", Offset = "0x816728", VA = "0x816728")]
	public bool OpCreateGame(EnterRoomParams enterRoomParams)
	{
		return default(bool);
	}

	[Token(Token = "0x6000115")]
	[Address(RVA = "0x816880", Offset = "0x816880", VA = "0x816880", Slot = "22")]
	public override bool OpJoinRoom(EnterRoomParams opParams)
	{
		return default(bool);
	}

	[Token(Token = "0x6000116")]
	[Address(RVA = "0x8168C0", Offset = "0x8168C0", VA = "0x8168C0", Slot = "23")]
	public override bool OpJoinRandomRoom(OpJoinRandomRoomParams opJoinRandomRoomParams)
	{
		return default(bool);
	}

	[Token(Token = "0x6000117")]
	[Address(RVA = "0x816958", Offset = "0x816958", VA = "0x816958", Slot = "30")]
	public override bool OpRaiseEvent(byte eventCode, object customEventContent, bool sendReliable, RaiseEventOptions raiseEventOptions)
	{
		return default(bool);
	}

	[Token(Token = "0x6000118")]
	[Address(RVA = "0x816A34", Offset = "0x816A34", VA = "0x816A34")]
	private void ReadoutProperties(ExitGames.Client.Photon.Hashtable gameProperties, ExitGames.Client.Photon.Hashtable pActorProperties, int targetActorNr)
	{
	}

	[Token(Token = "0x6000119")]
	[Address(RVA = "0x8170C8", Offset = "0x8170C8", VA = "0x8170C8")]
	private ExitGames.Client.Photon.Hashtable ReadoutPropertiesForActorNr(ExitGames.Client.Photon.Hashtable actorProperties, int actorNr)
	{
		return null;
	}

	[Token(Token = "0x600011A")]
	[Address(RVA = "0x81772C", Offset = "0x81772C", VA = "0x81772C")]
	public void ChangeLocalID(int newID)
	{
	}

	[Token(Token = "0x600011B")]
	[Address(RVA = "0x817AD4", Offset = "0x817AD4", VA = "0x817AD4")]
	private void LeftLobbyCleanup()
	{
	}

	[Token(Token = "0x600011C")]
	[Address(RVA = "0x817C08", Offset = "0x817C08", VA = "0x817C08")]
	private void LeftRoomCleanup()
	{
	}

	[Token(Token = "0x600011D")]
	[Address(RVA = "0x817F2C", Offset = "0x817F2C", VA = "0x817F2C")]
	protected internal void LocalCleanupAnythingInstantiated(bool destroyInstantiatedGameObjects)
	{
	}

	[Token(Token = "0x600011E")]
	[Address(RVA = "0x81878C", Offset = "0x81878C", VA = "0x81878C")]
	private void GameEnteredOnGameServer(OperationResponse operationResponse)
	{
	}

	[Token(Token = "0x600011F")]
	[Address(RVA = "0x815420", Offset = "0x815420", VA = "0x815420")]
	private void AddNewPlayer(int ID, PhotonPlayer player)
	{
	}

	[Token(Token = "0x6000120")]
	[Address(RVA = "0x819270", Offset = "0x819270", VA = "0x819270")]
	private void RemovePlayer(int ID, PhotonPlayer player)
	{
	}

	[Token(Token = "0x6000121")]
	[Address(RVA = "0x8178F0", Offset = "0x8178F0", VA = "0x8178F0")]
	private void RebuildPlayerListCopies()
	{
	}

	[Token(Token = "0x6000122")]
	[Address(RVA = "0x8192F8", Offset = "0x8192F8", VA = "0x8192F8")]
	private void ResetPhotonViewsOnSerialize()
	{
	}

	[Token(Token = "0x6000123")]
	[Address(RVA = "0x81945C", Offset = "0x81945C", VA = "0x81945C")]
	private void HandleEventLeave(int actorID, EventData evLeave)
	{
	}

	[Token(Token = "0x6000124")]
	[Address(RVA = "0x818FF4", Offset = "0x818FF4", VA = "0x818FF4")]
	private void CheckMasterClient(int leavingPlayerId)
	{
	}

	[Token(Token = "0x6000125")]
	[Address(RVA = "0x819A48", Offset = "0x819A48", VA = "0x819A48")]
	protected internal void UpdateMasterClient()
	{
	}

	[Token(Token = "0x6000126")]
	[Address(RVA = "0x81A018", Offset = "0x81A018", VA = "0x81A018")]
	private static int ReturnLowestPlayerId(PhotonPlayer[] players, int playerIdToIgnore)
	{
		return default(int);
	}

	[Token(Token = "0x6000127")]
	[Address(RVA = "0x81A080", Offset = "0x81A080", VA = "0x81A080")]
	protected internal bool SetMasterClient(int playerId, bool sync)
	{
		return default(bool);
	}

	[Token(Token = "0x6000128")]
	[Address(RVA = "0x81A298", Offset = "0x81A298", VA = "0x81A298")]
	public bool SetMasterClient(int nextMasterId)
	{
		return default(bool);
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0x817058", Offset = "0x817058", VA = "0x817058")]
	protected internal PhotonPlayer GetPlayerWithId(int number)
	{
		return null;
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0x814A34", Offset = "0x814A34", VA = "0x814A34")]
	private void SendPlayerName()
	{
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0x81677C", Offset = "0x81677C", VA = "0x81677C")]
	private ExitGames.Client.Photon.Hashtable GetLocalActorProperties()
	{
		return null;
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0x81A404", Offset = "0x81A404", VA = "0x81A404", Slot = "32")]
	public void DebugReturn(DebugLevel level, string message)
	{
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0x81A538", Offset = "0x81A538", VA = "0x81A538", Slot = "33")]
	public void OnOperationResponse(OperationResponse operationResponse)
	{
	}

	[Token(Token = "0x600012E")]
	[Address(RVA = "0x81D148", Offset = "0x81D148", VA = "0x81D148", Slot = "34")]
	public void OnStatusChanged(StatusCode statusCode)
	{
	}

	[Token(Token = "0x600012F")]
	[Address(RVA = "0x81DEFC", Offset = "0x81DEFC", VA = "0x81DEFC", Slot = "35")]
	public void OnEvent(EventData photonEvent)
	{
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0x822DE8", Offset = "0x822DE8", VA = "0x822DE8")]
	public void OnMessage(object messages)
	{
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0x81CE48", Offset = "0x81CE48", VA = "0x81CE48")]
	private void SetupEncryption(Dictionary<byte, object> encryptionData)
	{
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0x818EBC", Offset = "0x818EBC", VA = "0x818EBC")]
	protected internal void UpdatedActorList(int[] actorsInRoom)
	{
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0x822DEC", Offset = "0x822DEC", VA = "0x822DEC")]
	private void SendVacantViewIds()
	{
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0x8171C8", Offset = "0x8171C8", VA = "0x8171C8")]
	public static void SendMonoMessage(PhotonNetworkingMessage methodString, params object[] parameters)
	{
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0x8202D4", Offset = "0x8202D4", VA = "0x8202D4")]
	protected internal void ExecuteRpc(ExitGames.Client.Photon.Hashtable rpcData, int senderID = 0)
	{
	}

	[Token(Token = "0x6000136")]
	[Address(RVA = "0x82332C", Offset = "0x82332C", VA = "0x82332C")]
	private bool CheckTypeMatch(ParameterInfo[] methodParameters, Type[] callParameterTypes)
	{
		return default(bool);
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0x8234D4", Offset = "0x8234D4", VA = "0x8234D4")]
	internal ExitGames.Client.Photon.Hashtable SendInstantiate(string prefabName, Vector3 position, Quaternion rotation, byte group, int[] viewIDs, object[] data, bool isGlobalObject)
	{
		return null;
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0x82221C", Offset = "0x82221C", VA = "0x82221C")]
	internal GameObject DoInstantiate(ExitGames.Client.Photon.Hashtable evData, PhotonPlayer photonPlayer, GameObject resourceGameObject)
	{
		return null;
	}

	[Token(Token = "0x6000139")]
	[Address(RVA = "0x823980", Offset = "0x823980", VA = "0x823980")]
	private void StoreInstantiationData(int instantiationId, object[] instantiationData)
	{
	}

	[Token(Token = "0x600013A")]
	[Address(RVA = "0x823A40", Offset = "0x823A40", VA = "0x823A40")]
	public object[] FetchInstantiationData(int instantiationId)
	{
		return null;
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0x8239E8", Offset = "0x8239E8", VA = "0x8239E8")]
	private void RemoveInstantiationData(int instantiationId)
	{
	}

	[Token(Token = "0x600013C")]
	[Address(RVA = "0x819B30", Offset = "0x819B30", VA = "0x819B30")]
	public void DestroyPlayerObjects(int playerId, bool localOnly)
	{
	}

	[Token(Token = "0x600013D")]
	[Address(RVA = "0x822DBC", Offset = "0x822DBC", VA = "0x822DBC")]
	public void DestroyAll(bool localOnly)
	{
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0x8182E8", Offset = "0x8182E8", VA = "0x8182E8")]
	protected internal void RemoveInstantiatedGO(GameObject go, bool localOnly)
	{
	}

	[Token(Token = "0x600013F")]
	[Address(RVA = "0x823EB8", Offset = "0x823EB8", VA = "0x823EB8")]
	private void ServerCleanInstantiateAndDestroy(int instantiateId, int creatorId, bool isRuntimeInstantiated)
	{
	}

	[Token(Token = "0x6000140")]
	[Address(RVA = "0x823C4C", Offset = "0x823C4C", VA = "0x823C4C")]
	private void SendDestroyOfPlayer(int actorNr)
	{
	}

	[Token(Token = "0x6000141")]
	[Address(RVA = "0x823DCC", Offset = "0x823DCC", VA = "0x823DCC")]
	private void SendDestroyOfAll()
	{
	}

	[Token(Token = "0x6000142")]
	[Address(RVA = "0x823ABC", Offset = "0x823ABC", VA = "0x823ABC")]
	private void OpRemoveFromServerInstantiationsOfPlayer(int actorNr)
	{
	}

	[Token(Token = "0x6000143")]
	[Address(RVA = "0x8242D8", Offset = "0x8242D8", VA = "0x8242D8")]
	protected internal void RequestOwnership(int viewID, int fromOwner)
	{
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0x8245CC", Offset = "0x8245CC", VA = "0x8245CC")]
	protected internal void TransferOwnership(int viewID, int playerID)
	{
	}

	[Token(Token = "0x6000145")]
	[Address(RVA = "0x82414C", Offset = "0x82414C", VA = "0x82414C")]
	public bool LocalCleanPhotonView(PhotonView view)
	{
		return default(bool);
	}

	[Token(Token = "0x6000146")]
	[Address(RVA = "0x823134", Offset = "0x823134", VA = "0x823134")]
	public PhotonView GetPhotonView(int viewID)
	{
		return null;
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0x8248C0", Offset = "0x8248C0", VA = "0x8248C0")]
	public void RegisterPhotonView(PhotonView netView)
	{
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0x823B84", Offset = "0x823B84", VA = "0x823B84")]
	public void OpCleanRpcBuffer(int actorNumber)
	{
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0x824B80", Offset = "0x824B80", VA = "0x824B80")]
	public void OpRemoveCompleteCacheOfPlayer(int actorNumber)
	{
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0x823D40", Offset = "0x823D40", VA = "0x823D40")]
	public void OpRemoveCompleteCache()
	{
	}

	[Token(Token = "0x600014B")]
	[Address(RVA = "0x824C48", Offset = "0x824C48", VA = "0x824C48")]
	private void RemoveCacheOfLeftPlayers()
	{
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0x824D88", Offset = "0x824D88", VA = "0x824D88")]
	public void CleanRpcBufferIfMine(PhotonView view)
	{
	}

	[Token(Token = "0x600014D")]
	[Address(RVA = "0x8241B0", Offset = "0x8241B0", VA = "0x8241B0")]
	public void OpCleanRpcBuffer(PhotonView view)
	{
	}

	[Token(Token = "0x600014E")]
	[Address(RVA = "0x824ECC", Offset = "0x824ECC", VA = "0x824ECC")]
	public void RemoveRPCsInGroup(int group)
	{
	}

	[Token(Token = "0x600014F")]
	[Address(RVA = "0x825044", Offset = "0x825044", VA = "0x825044")]
	public void SetLevelPrefix(short prefix)
	{
	}

	[Token(Token = "0x6000150")]
	[Address(RVA = "0x82504C", Offset = "0x82504C", VA = "0x82504C")]
	internal void RPC(PhotonView view, string methodName, PhotonTargets target, PhotonPlayer player, bool encrypt, params object[] parameters)
	{
	}

	[Token(Token = "0x6000151")]
	[Address(RVA = "0x825A98", Offset = "0x825A98", VA = "0x825A98")]
	public void SetInterestGroups(byte[] disableGroups, byte[] enableGroups)
	{
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0x825DB4", Offset = "0x825DB4", VA = "0x825DB4")]
	public void SetSendingEnabled(byte group, bool enabled)
	{
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0x825E48", Offset = "0x825E48", VA = "0x825E48")]
	public void SetSendingEnabled(byte[] disableGroups, byte[] enableGroups)
	{
	}

	[Token(Token = "0x6000154")]
	[Address(RVA = "0x825F4C", Offset = "0x825F4C", VA = "0x825F4C")]
	public void NewSceneLoaded()
	{
	}

	[Token(Token = "0x6000155")]
	[Address(RVA = "0x82632C", Offset = "0x82632C", VA = "0x82632C")]
	public void RunViewUpdate()
	{
	}

	[Token(Token = "0x6000156")]
	[Address(RVA = "0x827254", Offset = "0x827254", VA = "0x827254")]
	private object[] OnSerializeWrite(PhotonView view)
	{
		return null;
	}

	[Token(Token = "0x6000157")]
	[Address(RVA = "0x821BC8", Offset = "0x821BC8", VA = "0x821BC8")]
	private void OnSerializeRead(object[] data, PhotonPlayer sender, int networkTime, short correctPrefix)
	{
	}

	[Token(Token = "0x6000158")]
	[Address(RVA = "0x82756C", Offset = "0x82756C", VA = "0x82756C")]
	private object[] DeltaCompressionWrite(object[] previousContent, object[] currentContent)
	{
		return null;
	}

	[Token(Token = "0x6000159")]
	[Address(RVA = "0x82783C", Offset = "0x82783C", VA = "0x82783C")]
	private object[] DeltaCompressionRead(object[] lastOnSerializeDataReceived, object[] incomingData)
	{
		return null;
	}

	[Token(Token = "0x600015A")]
	[Address(RVA = "0x8274C8", Offset = "0x8274C8", VA = "0x8274C8")]
	private bool AlmostEquals(object[] lastData, object[] currentContent)
	{
		return default(bool);
	}

	[Token(Token = "0x600015B")]
	[Address(RVA = "0x8279DC", Offset = "0x8279DC", VA = "0x8279DC")]
	private bool AlmostEquals(object one, object two)
	{
		return default(bool);
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0x827D84", Offset = "0x827D84", VA = "0x827D84")]
	protected internal static bool GetMethod(UnityEngine.MonoBehaviour monob, string methodType, out MethodInfo mi)
	{
		return default(bool);
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0x817424", Offset = "0x817424", VA = "0x817424")]
	protected internal void LoadLevelIfSynced()
	{
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0x827EF4", Offset = "0x827EF4", VA = "0x827EF4")]
	protected internal void SetLevelInPropsIfSynced(object levelId, bool initiatingCall, bool asyncLoading = false)
	{
	}

	[Token(Token = "0x600015F")]
	[Address(RVA = "0x8283E4", Offset = "0x8283E4", VA = "0x8283E4")]
	private void SendLevelReloadEvent()
	{
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0x82849C", Offset = "0x82849C", VA = "0x82849C")]
	public void SetApp(string appId, string gameVersion)
	{
	}

	[Token(Token = "0x6000161")]
	[Address(RVA = "0x828578", Offset = "0x828578", VA = "0x828578")]
	public bool WebRpc(string uriPath, object parameters)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000045")]
public interface IPunObservable
{
	[Token(Token = "0x6000165")]
	void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info);
}
[Token(Token = "0x2000046")]
public interface IPunCallbacks
{
	[Token(Token = "0x6000166")]
	void OnConnectedToPhoton();

	[Token(Token = "0x6000167")]
	void OnLeftRoom();

	[Token(Token = "0x6000168")]
	void OnMasterClientSwitched(PhotonPlayer newMasterClient);

	[Token(Token = "0x6000169")]
	void OnPhotonCreateRoomFailed(object[] codeAndMsg);

	[Token(Token = "0x600016A")]
	void OnPhotonJoinRoomFailed(object[] codeAndMsg);

	[Token(Token = "0x600016B")]
	void OnCreatedRoom();

	[Token(Token = "0x600016C")]
	void OnJoinedLobby();

	[Token(Token = "0x600016D")]
	void OnLeftLobby();

	[Token(Token = "0x600016E")]
	void OnFailedToConnectToPhoton(DisconnectCause cause);

	[Token(Token = "0x600016F")]
	void OnConnectionFail(DisconnectCause cause);

	[Token(Token = "0x6000170")]
	void OnDisconnectedFromPhoton();

	[Token(Token = "0x6000171")]
	void OnPhotonInstantiate(PhotonMessageInfo info);

	[Token(Token = "0x6000172")]
	void OnReceivedRoomListUpdate();

	[Token(Token = "0x6000173")]
	void OnJoinedRoom();

	[Token(Token = "0x6000174")]
	void OnPhotonPlayerConnected(PhotonPlayer newPlayer);

	[Token(Token = "0x6000175")]
	void OnPhotonPlayerDisconnected(PhotonPlayer otherPlayer);

	[Token(Token = "0x6000176")]
	void OnPhotonRandomJoinFailed(object[] codeAndMsg);

	[Token(Token = "0x6000177")]
	void OnConnectedToMaster();

	[Token(Token = "0x6000178")]
	void OnPhotonMaxCccuReached();

	[Token(Token = "0x6000179")]
	void OnPhotonCustomRoomPropertiesChanged(ExitGames.Client.Photon.Hashtable propertiesThatChanged);

	[Token(Token = "0x600017A")]
	void OnPhotonPlayerPropertiesChanged(object[] playerAndUpdatedProps);

	[Token(Token = "0x600017B")]
	void OnUpdatedFriendList();

	[Token(Token = "0x600017C")]
	void OnCustomAuthenticationFailed(string debugMessage);

	[Token(Token = "0x600017D")]
	void OnCustomAuthenticationResponse(Dictionary<string, object> data);

	[Token(Token = "0x600017E")]
	void OnWebRpcResponse(OperationResponse response);

	[Token(Token = "0x600017F")]
	void OnOwnershipRequest(object[] viewAndPlayer);

	[Token(Token = "0x6000180")]
	void OnLobbyStatisticsUpdate();

	[Token(Token = "0x6000181")]
	void OnPhotonPlayerActivityChanged(PhotonPlayer otherPlayer);

	[Token(Token = "0x6000182")]
	void OnOwnershipTransfered(object[] viewAndPlayers);
}
[Token(Token = "0x2000047")]
public interface IPunPrefabPool
{
	[Token(Token = "0x6000183")]
	GameObject Instantiate(string prefabId, Vector3 position, Quaternion rotation);

	[Token(Token = "0x6000184")]
	void Destroy(GameObject gameObject);
}
[Token(Token = "0x2000048")]
public struct PhotonMessageInfo
{
	[Token(Token = "0x4000249")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private readonly int timeInt;

	[Token(Token = "0x400024A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public readonly PhotonPlayer sender;

	[Token(Token = "0x400024B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public readonly PhotonView photonView;

	[Token(Token = "0x17000032")]
	public double timestamp
	{
		[Token(Token = "0x6000186")]
		[Address(RVA = "0x829860", Offset = "0x829860", VA = "0x829860")]
		get
		{
			return default(double);
		}
	}

	[Token(Token = "0x6000185")]
	[Address(RVA = "0x829854", Offset = "0x829854", VA = "0x829854")]
	public PhotonMessageInfo(PhotonPlayer player, int timestamp, PhotonView view)
	{
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0x829878", Offset = "0x829878", VA = "0x829878", Slot = "3")]
	public override string ToString()
	{
		return null;
	}
}
[Token(Token = "0x2000049")]
internal class PunEvent
{
	[Token(Token = "0x400024C")]
	public const byte RPC = 200;

	[Token(Token = "0x400024D")]
	public const byte SendSerialize = 201;

	[Token(Token = "0x400024E")]
	public const byte Instantiation = 202;

	[Token(Token = "0x400024F")]
	public const byte CloseConnection = 203;

	[Token(Token = "0x4000250")]
	public const byte Destroy = 204;

	[Token(Token = "0x4000251")]
	public const byte RemoveCachedRPCs = 205;

	[Token(Token = "0x4000252")]
	public const byte SendSerializeReliable = 206;

	[Token(Token = "0x4000253")]
	public const byte DestroyPlayer = 207;

	[Token(Token = "0x4000254")]
	public const byte AssignMaster = 208;

	[Token(Token = "0x4000255")]
	public const byte OwnershipRequest = 209;

	[Token(Token = "0x4000256")]
	public const byte OwnershipTransfer = 210;

	[Token(Token = "0x4000257")]
	public const byte VacantViewIds = 211;

	[Token(Token = "0x4000258")]
	public const byte levelReload = 212;

	[Token(Token = "0x6000188")]
	[Address(RVA = "0x829910", Offset = "0x829910", VA = "0x829910")]
	public PunEvent()
	{
	}
}
[Token(Token = "0x200004A")]
public class PhotonStream
{
	[Token(Token = "0x4000259")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private bool write;

	[Token(Token = "0x400025A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Queue<object> writeData;

	[Token(Token = "0x400025B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private object[] readData;

	[Token(Token = "0x400025C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	internal byte currentItem;

	[Token(Token = "0x17000033")]
	public bool isWriting
	{
		[Token(Token = "0x600018C")]
		[Address(RVA = "0x829A1C", Offset = "0x829A1C", VA = "0x829A1C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000034")]
	public bool isReading
	{
		[Token(Token = "0x600018D")]
		[Address(RVA = "0x829A24", Offset = "0x829A24", VA = "0x829A24")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000035")]
	public int Count
	{
		[Token(Token = "0x600018E")]
		[Address(RVA = "0x829A34", Offset = "0x829A34", VA = "0x829A34")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000189")]
	[Address(RVA = "0x829918", Offset = "0x829918", VA = "0x829918")]
	public PhotonStream(bool write, object[] incomingData)
	{
	}

	[Token(Token = "0x600018A")]
	[Address(RVA = "0x8299BC", Offset = "0x8299BC", VA = "0x8299BC")]
	public void SetReadStream(object[] incomingData, byte pos = 0)
	{
	}

	[Token(Token = "0x600018B")]
	[Address(RVA = "0x8299CC", Offset = "0x8299CC", VA = "0x8299CC")]
	internal void ResetWriteStream()
	{
	}

	[Token(Token = "0x600018F")]
	[Address(RVA = "0x829A94", Offset = "0x829A94", VA = "0x829A94")]
	public object ReceiveNext()
	{
		return null;
	}

	[Token(Token = "0x6000190")]
	[Address(RVA = "0x829B44", Offset = "0x829B44", VA = "0x829B44")]
	public object PeekNext()
	{
		return null;
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0x829BEC", Offset = "0x829BEC", VA = "0x829BEC")]
	public void SendNext(object obj)
	{
	}

	[Token(Token = "0x6000192")]
	[Address(RVA = "0x829C98", Offset = "0x829C98", VA = "0x829C98")]
	public object[] ToArray()
	{
		return null;
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0x829D00", Offset = "0x829D00", VA = "0x829D00")]
	public void Serialize(ref bool myBool)
	{
	}

	[Token(Token = "0x6000194")]
	[Address(RVA = "0x829E08", Offset = "0x829E08", VA = "0x829E08")]
	public void Serialize(ref int myInt)
	{
	}

	[Token(Token = "0x6000195")]
	[Address(RVA = "0x829F08", Offset = "0x829F08", VA = "0x829F08")]
	public void Serialize(ref string value)
	{
	}

	[Token(Token = "0x6000196")]
	[Address(RVA = "0x829FEC", Offset = "0x829FEC", VA = "0x829FEC")]
	public void Serialize(ref char value)
	{
	}

	[Token(Token = "0x6000197")]
	[Address(RVA = "0x82A0EC", Offset = "0x82A0EC", VA = "0x82A0EC")]
	public void Serialize(ref short value)
	{
	}

	[Token(Token = "0x6000198")]
	[Address(RVA = "0x82A1EC", Offset = "0x82A1EC", VA = "0x82A1EC")]
	public void Serialize(ref float obj)
	{
	}

	[Token(Token = "0x6000199")]
	[Address(RVA = "0x82A2EC", Offset = "0x82A2EC", VA = "0x82A2EC")]
	public void Serialize(ref PhotonPlayer obj)
	{
	}

	[Token(Token = "0x600019A")]
	[Address(RVA = "0x82A408", Offset = "0x82A408", VA = "0x82A408")]
	public void Serialize(ref Vector3 obj)
	{
	}

	[Token(Token = "0x600019B")]
	[Address(RVA = "0x82A518", Offset = "0x82A518", VA = "0x82A518")]
	public void Serialize(ref Vector2 obj)
	{
	}

	[Token(Token = "0x600019C")]
	[Address(RVA = "0x82A618", Offset = "0x82A618", VA = "0x82A618")]
	public void Serialize(ref Quaternion obj)
	{
	}
}
[Token(Token = "0x200004B")]
public class SceneManagerHelper
{
	[Token(Token = "0x17000036")]
	public static string ActiveSceneName
	{
		[Token(Token = "0x600019D")]
		[Address(RVA = "0x82A718", Offset = "0x82A718", VA = "0x82A718")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000037")]
	public static int ActiveSceneBuildIndex
	{
		[Token(Token = "0x600019E")]
		[Address(RVA = "0x82A780", Offset = "0x82A780", VA = "0x82A780")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x600019F")]
	[Address(RVA = "0x82A7E8", Offset = "0x82A7E8", VA = "0x82A7E8")]
	public SceneManagerHelper()
	{
	}
}
[Token(Token = "0x200004C")]
public class WebRpcResponse
{
	[Token(Token = "0x17000038")]
	public string Name
	{
		[Token(Token = "0x60001A0")]
		[Address(RVA = "0x82A7F0", Offset = "0x82A7F0", VA = "0x82A7F0")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60001A1")]
		[Address(RVA = "0x82A7F8", Offset = "0x82A7F8", VA = "0x82A7F8")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000039")]
	public int ReturnCode
	{
		[Token(Token = "0x60001A2")]
		[Address(RVA = "0x82A800", Offset = "0x82A800", VA = "0x82A800")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60001A3")]
		[Address(RVA = "0x82A808", Offset = "0x82A808", VA = "0x82A808")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700003A")]
	public string DebugMessage
	{
		[Token(Token = "0x60001A4")]
		[Address(RVA = "0x82A810", Offset = "0x82A810", VA = "0x82A810")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60001A5")]
		[Address(RVA = "0x82A818", Offset = "0x82A818", VA = "0x82A818")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700003B")]
	public Dictionary<string, object> Parameters
	{
		[Token(Token = "0x60001A6")]
		[Address(RVA = "0x82A820", Offset = "0x82A820", VA = "0x82A820")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60001A7")]
		[Address(RVA = "0x82A828", Offset = "0x82A828", VA = "0x82A828")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0x82A830", Offset = "0x82A830", VA = "0x82A830")]
	public WebRpcResponse(OperationResponse response)
	{
	}

	[Token(Token = "0x60001A9")]
	[Address(RVA = "0x82A9E0", Offset = "0x82A9E0", VA = "0x82A9E0")]
	public string ToStringFull()
	{
		return null;
	}
}
[Token(Token = "0x200004D")]
internal class PhotonHandler : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x200004F")]
	[CompilerGenerated]
	private sealed class <PingAvailableRegionsCoroutine>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400026D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400026E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400026F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool connectToBest;

		[Token(Token = "0x4000270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PhotonPingManager <pingManager>5__2;

		[Token(Token = "0x1700003D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001C0")]
			[Address(RVA = "0x82CD90", Offset = "0x82CD90", VA = "0x82CD90", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001C2")]
			[Address(RVA = "0x82CDD8", Offset = "0x82CDD8", VA = "0x82CDD8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001BD")]
		[Address(RVA = "0x82C090", Offset = "0x82C090", VA = "0x82C090")]
		[DebuggerHidden]
		public <PingAvailableRegionsCoroutine>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x60001BE")]
		[Address(RVA = "0x82C1DC", Offset = "0x82C1DC", VA = "0x82C1DC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001BF")]
		[Address(RVA = "0x82C1E0", Offset = "0x82C1E0", VA = "0x82C1E0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001C1")]
		[Address(RVA = "0x82CD98", Offset = "0x82CD98", VA = "0x82CD98", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000261")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static PhotonHandler SP;

	[Token(Token = "0x4000262")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int updateInterval;

	[Token(Token = "0x4000263")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int updateIntervalOnSerialize;

	[Token(Token = "0x4000264")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int nextSendTickCount;

	[Token(Token = "0x4000265")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int nextSendTickCountOnSerialize;

	[Token(Token = "0x4000266")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static bool sendThreadShouldRun;

	[Token(Token = "0x4000267")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static Stopwatch timerToStopConnectionInBackground;

	[Token(Token = "0x4000268")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected internal static bool AppQuits;

	[Token(Token = "0x4000269")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected internal static Type PingImplementation;

	[Token(Token = "0x400026A")]
	private const string PlayerPrefsKey = "PUNCloudBestRegion";

	[Token(Token = "0x1700003C")]
	internal static CloudRegionCode BestRegionCodeInPreferences
	{
		[Token(Token = "0x60001B5")]
		[Address(RVA = "0x82BCF8", Offset = "0x82BCF8", VA = "0x82BCF8")]
		get
		{
			return default(CloudRegionCode);
		}
		[Token(Token = "0x60001B6")]
		[Address(RVA = "0x82BF14", Offset = "0x82BF14", VA = "0x82BF14")]
		set
		{
		}
	}

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0x82AB7C", Offset = "0x82AB7C", VA = "0x82AB7C")]
	protected void Awake()
	{
	}

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0x82AEEC", Offset = "0x82AEEC", VA = "0x82AEEC")]
	protected void Start()
	{
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0x82AFE4", Offset = "0x82AFE4", VA = "0x82AFE4")]
	protected void OnApplicationQuit()
	{
	}

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0x82B1F4", Offset = "0x82B1F4", VA = "0x82B1F4")]
	protected void OnApplicationPause(bool pause)
	{
	}

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0x82B2FC", Offset = "0x82B2FC", VA = "0x82B2FC")]
	protected void OnDestroy()
	{
	}

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0x82B344", Offset = "0x82B344", VA = "0x82B344")]
	protected void Update()
	{
	}

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0x82B7F4", Offset = "0x82B7F4", VA = "0x82B7F4")]
	protected void OnJoinedRoom()
	{
	}

	[Token(Token = "0x60001B1")]
	[Address(RVA = "0x82B858", Offset = "0x82B858", VA = "0x82B858")]
	protected void OnCreatedRoom()
	{
	}

	[Token(Token = "0x60001B2")]
	[Address(RVA = "0x82ADF8", Offset = "0x82ADF8", VA = "0x82ADF8")]
	public static void StartFallbackSendAckThread()
	{
	}

	[Token(Token = "0x60001B3")]
	[Address(RVA = "0x82B080", Offset = "0x82B080", VA = "0x82B080")]
	public static void StopFallbackSendAckThread()
	{
	}

	[Token(Token = "0x60001B4")]
	[Address(RVA = "0x82B8D0", Offset = "0x82B8D0", VA = "0x82B8D0")]
	public static bool FallbackSendAckThread()
	{
		return default(bool);
	}

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0x82BFC0", Offset = "0x82BFC0", VA = "0x82BFC0")]
	protected internal static void PingAvailableRegionsAndConnectToBest()
	{
	}

	[Token(Token = "0x60001B8")]
	[Address(RVA = "0x82C024", Offset = "0x82C024", VA = "0x82C024")]
	[IteratorStateMachine(typeof(<PingAvailableRegionsCoroutine>d__25))]
	internal IEnumerator PingAvailableRegionsCoroutine(bool connectToBest)
	{
		return null;
	}

	[Token(Token = "0x60001B9")]
	[Address(RVA = "0x82C0B8", Offset = "0x82C0B8", VA = "0x82C0B8")]
	public PhotonHandler()
	{
	}
}
[Token(Token = "0x2000050")]
public class PhotonLagSimulationGui : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4000271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Rect WindowRect;

	[Token(Token = "0x4000272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int WindowId;

	[Token(Token = "0x4000273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool Visible;

	[Token(Token = "0x1700003F")]
	public PhotonPeer Peer
	{
		[Token(Token = "0x60001C3")]
		[Address(RVA = "0x82CDE0", Offset = "0x82CDE0", VA = "0x82CDE0")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60001C4")]
		[Address(RVA = "0x82CDE8", Offset = "0x82CDE8", VA = "0x82CDE8")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60001C5")]
	[Address(RVA = "0x82CDF0", Offset = "0x82CDF0", VA = "0x82CDF0")]
	public void Start()
	{
	}

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0x82CE50", Offset = "0x82CE50", VA = "0x82CE50")]
	public void OnGUI()
	{
	}

	[Token(Token = "0x60001C7")]
	[Address(RVA = "0x82CFB4", Offset = "0x82CFB4", VA = "0x82CFB4")]
	private void NetSimHasNoPeerWindow(int windowId)
	{
	}

	[Token(Token = "0x60001C8")]
	[Address(RVA = "0x82D04C", Offset = "0x82D04C", VA = "0x82D04C")]
	private void NetSimWindow(int windowId)
	{
	}

	[Token(Token = "0x60001C9")]
	[Address(RVA = "0x82D72C", Offset = "0x82D72C", VA = "0x82D72C")]
	public PhotonLagSimulationGui()
	{
	}
}
[Token(Token = "0x2000051")]
public static class PhotonNetwork
{
	[Token(Token = "0x2000052")]
	public delegate void EventCallback(byte eventCode, object content, int senderId);

	[Token(Token = "0x4000275")]
	public const string versionPUN = "1.101";

	[Token(Token = "0x4000277")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	internal static readonly PhotonHandler photonMono;

	[Token(Token = "0x4000278")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	internal static NetworkingPeer networkingPeer;

	[Token(Token = "0x4000279")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static readonly int MAX_VIEW_IDS;

	[Token(Token = "0x400027A")]
	internal const string serverSettingsAssetFile = "PhotonServerSettings";

	[Token(Token = "0x400027B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static ServerSettings PhotonServerSettings;

	[Token(Token = "0x400027C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static bool InstantiateInRoomOnly;

	[Token(Token = "0x400027D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public static PhotonLogLevel logLevel;

	[Token(Token = "0x400027F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public static float precisionForVectorSynchronization;

	[Token(Token = "0x4000280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public static float precisionForQuaternionSynchronization;

	[Token(Token = "0x4000281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static float precisionForFloatSynchronization;

	[Token(Token = "0x4000282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public static bool UseRpcMonoBehaviourCache;

	[Token(Token = "0x4000283")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	public static bool UsePrefabCache;

	[Token(Token = "0x4000284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static Dictionary<string, GameObject> PrefabCache;

	[Token(Token = "0x4000285")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static HashSet<GameObject> SendMonoMessageTargets;

	[Token(Token = "0x4000286")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static Type SendMonoMessageTargetType;

	[Token(Token = "0x4000287")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public static bool StartRpcsAsCoroutine;

	[Token(Token = "0x4000288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	private static bool isOfflineMode;

	[Token(Token = "0x4000289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private static Room offlineModeRoom;

	[Token(Token = "0x400028A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Obsolete("Used for compatibility with Unity networking only.")]
	public static int maxConnections;

	[Token(Token = "0x400028B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private static bool _mAutomaticallySyncScene;

	[Token(Token = "0x400028C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
	private static bool m_autoCleanUpPlayerObjects;

	[Token(Token = "0x400028D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private static int sendInterval;

	[Token(Token = "0x400028E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private static int sendIntervalOnSerialize;

	[Token(Token = "0x400028F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private static bool m_isMessageQueueRunning;

	[Token(Token = "0x4000290")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private static Stopwatch startupStopwatch;

	[Token(Token = "0x4000291")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public static float BackgroundTimeout;

	[Token(Token = "0x4000294")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	internal static int lastUsedViewSubId;

	[Token(Token = "0x4000295")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	internal static int lastUsedViewSubIdStatic;

	[Token(Token = "0x4000296")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	internal static List<int> manuallyAllocatedViewIds;

	[Token(Token = "0x17000040")]
	public static string gameVersion
	{
		[Token(Token = "0x60001CA")]
		[Address(RVA = "0x82D790", Offset = "0x82D790", VA = "0x82D790")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60001CB")]
		[Address(RVA = "0x82D7E8", Offset = "0x82D7E8", VA = "0x82D7E8")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000041")]
	public static string ServerAddress
	{
		[Token(Token = "0x60001CC")]
		[Address(RVA = "0x82D844", Offset = "0x82D844", VA = "0x82D844")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000042")]
	public static CloudRegionCode CloudRegion
	{
		[Token(Token = "0x60001CD")]
		[Address(RVA = "0x82D8EC", Offset = "0x82D8EC", VA = "0x82D8EC")]
		get
		{
			return default(CloudRegionCode);
		}
	}

	[Token(Token = "0x17000043")]
	public static string CurrentCluster
	{
		[Token(Token = "0x60001CE")]
		[Address(RVA = "0x82D9A8", Offset = "0x82D9A8", VA = "0x82D9A8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000044")]
	public static bool connected
	{
		[Token(Token = "0x60001CF")]
		[Address(RVA = "0x82BB78", Offset = "0x82BB78", VA = "0x82BB78")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000045")]
	public static bool connecting
	{
		[Token(Token = "0x60001D0")]
		[Address(RVA = "0x82DA30", Offset = "0x82DA30", VA = "0x82DA30")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000046")]
	public static bool connectedAndReady
	{
		[Token(Token = "0x60001D1")]
		[Address(RVA = "0x82DAF0", Offset = "0x82DAF0", VA = "0x82DAF0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000047")]
	public static ConnectionState connectionState
	{
		[Token(Token = "0x60001D2")]
		[Address(RVA = "0x82DBF0", Offset = "0x82DBF0", VA = "0x82DBF0")]
		get
		{
			return default(ConnectionState);
		}
	}

	[Token(Token = "0x17000048")]
	public static ClientState connectionStateDetailed
	{
		[Token(Token = "0x60001D3")]
		[Address(RVA = "0x82B6F4", Offset = "0x82B6F4", VA = "0x82B6F4")]
		get
		{
			return default(ClientState);
		}
	}

	[Token(Token = "0x17000049")]
	public static ServerConnection Server
	{
		[Token(Token = "0x60001D4")]
		[Address(RVA = "0x82CA24", Offset = "0x82CA24", VA = "0x82CA24")]
		get
		{
			return default(ServerConnection);
		}
	}

	[Token(Token = "0x1700004A")]
	public static AuthenticationValues AuthValues
	{
		[Token(Token = "0x60001D5")]
		[Address(RVA = "0x82DCF0", Offset = "0x82DCF0", VA = "0x82DCF0")]
		get
		{
			return null;
		}
		[Token(Token = "0x60001D6")]
		[Address(RVA = "0x82DD78", Offset = "0x82DD78", VA = "0x82DD78")]
		set
		{
		}
	}

	[Token(Token = "0x1700004B")]
	public static Room room
	{
		[Token(Token = "0x60001D7")]
		[Address(RVA = "0x82DDFC", Offset = "0x82DDFC", VA = "0x82DDFC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700004C")]
	public static PhotonPlayer player
	{
		[Token(Token = "0x60001D8")]
		[Address(RVA = "0x82DEA0", Offset = "0x82DEA0", VA = "0x82DEA0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700004D")]
	public static PhotonPlayer masterClient
	{
		[Token(Token = "0x60001D9")]
		[Address(RVA = "0x82DF28", Offset = "0x82DF28", VA = "0x82DF28")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700004E")]
	public static string playerName
	{
		[Token(Token = "0x60001DA")]
		[Address(RVA = "0x82E038", Offset = "0x82E038", VA = "0x82E038")]
		get
		{
			return null;
		}
		[Token(Token = "0x60001DB")]
		[Address(RVA = "0x82E09C", Offset = "0x82E09C", VA = "0x82E09C")]
		set
		{
		}
	}

	[Token(Token = "0x1700004F")]
	public static PhotonPlayer[] playerList
	{
		[Token(Token = "0x60001DC")]
		[Address(RVA = "0x82E108", Offset = "0x82E108", VA = "0x82E108")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000050")]
	public static PhotonPlayer[] otherPlayers
	{
		[Token(Token = "0x60001DD")]
		[Address(RVA = "0x82E1B0", Offset = "0x82E1B0", VA = "0x82E1B0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000051")]
	public static List<FriendInfo> Friends
	{
		[Token(Token = "0x60001DE")]
		[Address(RVA = "0x82E258", Offset = "0x82E258", VA = "0x82E258")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60001DF")]
		[Address(RVA = "0x82E2B0", Offset = "0x82E2B0", VA = "0x82E2B0")]
		[CompilerGenerated]
		internal set
		{
		}
	}

	[Token(Token = "0x17000052")]
	public static int FriendsListAge
	{
		[Token(Token = "0x60001E0")]
		[Address(RVA = "0x82E30C", Offset = "0x82E30C", VA = "0x82E30C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000053")]
	public static IPunPrefabPool PrefabPool
	{
		[Token(Token = "0x60001E1")]
		[Address(RVA = "0x82E3A0", Offset = "0x82E3A0", VA = "0x82E3A0")]
		get
		{
			return null;
		}
		[Token(Token = "0x60001E2")]
		[Address(RVA = "0x82E404", Offset = "0x82E404", VA = "0x82E404")]
		set
		{
		}
	}

	[Token(Token = "0x17000054")]
	public static bool offlineMode
	{
		[Token(Token = "0x60001E3")]
		[Address(RVA = "0x82E46C", Offset = "0x82E46C", VA = "0x82E46C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001E4")]
		[Address(RVA = "0x82E4C4", Offset = "0x82E4C4", VA = "0x82E4C4")]
		set
		{
		}
	}

	[Token(Token = "0x17000055")]
	public static bool automaticallySyncScene
	{
		[Token(Token = "0x60001E5")]
		[Address(RVA = "0x82E704", Offset = "0x82E704", VA = "0x82E704")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001E6")]
		[Address(RVA = "0x82E75C", Offset = "0x82E75C", VA = "0x82E75C")]
		set
		{
		}
	}

	[Token(Token = "0x17000056")]
	public static bool autoCleanUpPlayerObjects
	{
		[Token(Token = "0x60001E7")]
		[Address(RVA = "0x82E814", Offset = "0x82E814", VA = "0x82E814")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001E8")]
		[Address(RVA = "0x82E86C", Offset = "0x82E86C", VA = "0x82E86C")]
		set
		{
		}
	}

	[Token(Token = "0x17000057")]
	public static bool autoJoinLobby
	{
		[Token(Token = "0x60001E9")]
		[Address(RVA = "0x82E930", Offset = "0x82E930", VA = "0x82E930")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001EA")]
		[Address(RVA = "0x82E994", Offset = "0x82E994", VA = "0x82E994")]
		set
		{
		}
	}

	[Token(Token = "0x17000058")]
	public static bool EnableLobbyStatistics
	{
		[Token(Token = "0x60001EB")]
		[Address(RVA = "0x82EA00", Offset = "0x82EA00", VA = "0x82EA00")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001EC")]
		[Address(RVA = "0x82EA64", Offset = "0x82EA64", VA = "0x82EA64")]
		set
		{
		}
	}

	[Token(Token = "0x17000059")]
	public static List<TypedLobbyInfo> LobbyStatistics
	{
		[Token(Token = "0x60001ED")]
		[Address(RVA = "0x82EAD0", Offset = "0x82EAD0", VA = "0x82EAD0")]
		get
		{
			return null;
		}
		[Token(Token = "0x60001EE")]
		[Address(RVA = "0x82EB34", Offset = "0x82EB34", VA = "0x82EB34")]
		private set
		{
		}
	}

	[Token(Token = "0x1700005A")]
	public static bool insideLobby
	{
		[Token(Token = "0x60001EF")]
		[Address(RVA = "0x82EB9C", Offset = "0x82EB9C", VA = "0x82EB9C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700005B")]
	public static TypedLobby lobby
	{
		[Token(Token = "0x60001F0")]
		[Address(RVA = "0x82EC00", Offset = "0x82EC00", VA = "0x82EC00")]
		get
		{
			return null;
		}
		[Token(Token = "0x60001F1")]
		[Address(RVA = "0x82EC64", Offset = "0x82EC64", VA = "0x82EC64")]
		set
		{
		}
	}

	[Token(Token = "0x1700005C")]
	public static int sendRate
	{
		[Token(Token = "0x60001F2")]
		[Address(RVA = "0x82AD38", Offset = "0x82AD38", VA = "0x82AD38")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60001F3")]
		[Address(RVA = "0x82ECCC", Offset = "0x82ECCC", VA = "0x82ECCC")]
		set
		{
		}
	}

	[Token(Token = "0x1700005D")]
	public static int sendRateOnSerialize
	{
		[Token(Token = "0x60001F4")]
		[Address(RVA = "0x82AD98", Offset = "0x82AD98", VA = "0x82AD98")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60001F5")]
		[Address(RVA = "0x82EDD8", Offset = "0x82EDD8", VA = "0x82EDD8")]
		set
		{
		}
	}

	[Token(Token = "0x1700005E")]
	public static bool isMessageQueueRunning
	{
		[Token(Token = "0x60001F6")]
		[Address(RVA = "0x82EF1C", Offset = "0x82EF1C", VA = "0x82EF1C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001F7")]
		[Address(RVA = "0x82EF74", Offset = "0x82EF74", VA = "0x82EF74")]
		set
		{
		}
	}

	[Token(Token = "0x1700005F")]
	public static double time
	{
		[Token(Token = "0x60001F8")]
		[Address(RVA = "0x82EFF4", Offset = "0x82EFF4", VA = "0x82EFF4")]
		get
		{
			return default(double);
		}
	}

	[Token(Token = "0x17000060")]
	public static int ServerTimestamp
	{
		[Token(Token = "0x60001F9")]
		[Address(RVA = "0x82F054", Offset = "0x82F054", VA = "0x82F054")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000061")]
	public static bool isMasterClient
	{
		[Token(Token = "0x60001FA")]
		[Address(RVA = "0x82F134", Offset = "0x82F134", VA = "0x82F134")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000062")]
	public static bool inRoom
	{
		[Token(Token = "0x60001FB")]
		[Address(RVA = "0x82F208", Offset = "0x82F208", VA = "0x82F208")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000063")]
	public static bool isNonMasterClientInRoom
	{
		[Token(Token = "0x60001FC")]
		[Address(RVA = "0x82F260", Offset = "0x82F260", VA = "0x82F260")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000064")]
	public static int countOfPlayersOnMaster
	{
		[Token(Token = "0x60001FD")]
		[Address(RVA = "0x82F2D8", Offset = "0x82F2D8", VA = "0x82F2D8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000065")]
	public static int countOfPlayersInRooms
	{
		[Token(Token = "0x60001FE")]
		[Address(RVA = "0x82F33C", Offset = "0x82F33C", VA = "0x82F33C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000066")]
	public static int countOfPlayers
	{
		[Token(Token = "0x60001FF")]
		[Address(RVA = "0x82F3A0", Offset = "0x82F3A0", VA = "0x82F3A0")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000067")]
	public static int countOfRooms
	{
		[Token(Token = "0x6000200")]
		[Address(RVA = "0x82F40C", Offset = "0x82F40C", VA = "0x82F40C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000068")]
	public static bool NetworkStatisticsEnabled
	{
		[Token(Token = "0x6000201")]
		[Address(RVA = "0x82F470", Offset = "0x82F470", VA = "0x82F470")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000202")]
		[Address(RVA = "0x82F4D4", Offset = "0x82F4D4", VA = "0x82F4D4")]
		set
		{
		}
	}

	[Token(Token = "0x17000069")]
	public static int ResentReliableCommands
	{
		[Token(Token = "0x6000203")]
		[Address(RVA = "0x82F540", Offset = "0x82F540", VA = "0x82F540")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700006A")]
	public static bool CrcCheckEnabled
	{
		[Token(Token = "0x6000204")]
		[Address(RVA = "0x82F5A4", Offset = "0x82F5A4", VA = "0x82F5A4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000205")]
		[Address(RVA = "0x82F608", Offset = "0x82F608", VA = "0x82F608")]
		set
		{
		}
	}

	[Token(Token = "0x1700006B")]
	public static int PacketLossByCrcCheck
	{
		[Token(Token = "0x6000206")]
		[Address(RVA = "0x82F754", Offset = "0x82F754", VA = "0x82F754")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700006C")]
	public static int MaxResendsBeforeDisconnect
	{
		[Token(Token = "0x6000207")]
		[Address(RVA = "0x82F7B8", Offset = "0x82F7B8", VA = "0x82F7B8")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000208")]
		[Address(RVA = "0x82F81C", Offset = "0x82F81C", VA = "0x82F81C")]
		set
		{
		}
	}

	[Token(Token = "0x1700006D")]
	public static int QuickResends
	{
		[Token(Token = "0x6000209")]
		[Address(RVA = "0x82F89C", Offset = "0x82F89C", VA = "0x82F89C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600020A")]
		[Address(RVA = "0x82F908", Offset = "0x82F908", VA = "0x82F908")]
		set
		{
		}
	}

	[Token(Token = "0x1700006E")]
	public static bool UseAlternativeUdpPorts
	{
		[Token(Token = "0x600020B")]
		[Address(RVA = "0x82F984", Offset = "0x82F984", VA = "0x82F984")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600020C")]
		[Address(RVA = "0x82F9DC", Offset = "0x82F9DC", VA = "0x82F9DC")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x14000001")]
	public static event EventCallback OnEventCall
	{
		[Token(Token = "0x600020D")]
		[Address(RVA = "0x82FA38", Offset = "0x82FA38", VA = "0x82FA38")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600020E")]
		[Address(RVA = "0x82FB14", Offset = "0x82FB14", VA = "0x82FB14")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x600020F")]
	[Address(RVA = "0x82FBF0", Offset = "0x82FBF0", VA = "0x82FBF0")]
	static PhotonNetwork()
	{
	}

	[Token(Token = "0x6000210")]
	[Address(RVA = "0x8300D4", Offset = "0x8300D4", VA = "0x8300D4")]
	public static void SwitchToProtocol(ConnectionProtocol cp)
	{
	}

	[Token(Token = "0x6000211")]
	[Address(RVA = "0x83013C", Offset = "0x83013C", VA = "0x83013C")]
	public static bool ConnectUsingSettings(string gameVersion)
	{
		return default(bool);
	}

	[Token(Token = "0x6000212")]
	[Address(RVA = "0x8308C4", Offset = "0x8308C4", VA = "0x8308C4")]
	public static bool ConnectToMaster(string masterServerAddress, int port, string appID, string gameVersion)
	{
		return default(bool);
	}

	[Token(Token = "0x6000213")]
	[Address(RVA = "0x830C04", Offset = "0x830C04", VA = "0x830C04")]
	public static bool Reconnect()
	{
		return default(bool);
	}

	[Token(Token = "0x6000214")]
	[Address(RVA = "0x830EF8", Offset = "0x830EF8", VA = "0x830EF8")]
	public static bool ReconnectAndRejoin()
	{
		return default(bool);
	}

	[Token(Token = "0x6000215")]
	[Address(RVA = "0x830664", Offset = "0x830664", VA = "0x830664")]
	public static bool ConnectToBestCloudServer(string gameVersion)
	{
		return default(bool);
	}

	[Token(Token = "0x6000216")]
	[Address(RVA = "0x83122C", Offset = "0x83122C", VA = "0x83122C")]
	public static bool ConnectToRegion(CloudRegionCode region, string gameVersion, [Optional] string cluster)
	{
		return default(bool);
	}

	[Token(Token = "0x6000217")]
	[Address(RVA = "0x831534", Offset = "0x831534", VA = "0x831534")]
	public static void OverrideBestCloudServer(CloudRegionCode region)
	{
	}

	[Token(Token = "0x6000218")]
	[Address(RVA = "0x831538", Offset = "0x831538", VA = "0x831538")]
	public static void RefreshCloudServerRating()
	{
	}

	[Token(Token = "0x6000219")]
	[Address(RVA = "0x831588", Offset = "0x831588", VA = "0x831588")]
	public static void NetworkStatisticsReset()
	{
	}

	[Token(Token = "0x600021A")]
	[Address(RVA = "0x8315EC", Offset = "0x8315EC", VA = "0x8315EC")]
	public static string NetworkStatisticsToString()
	{
		return null;
	}

	[Token(Token = "0x600021B")]
	[Address(RVA = "0x8316E0", Offset = "0x8316E0", VA = "0x8316E0")]
	[Obsolete("Used for compatibility with Unity networking only. Encryption is automatically initialized while connecting.")]
	public static void InitializeSecurity()
	{
	}

	[Token(Token = "0x600021C")]
	[Address(RVA = "0x8316E4", Offset = "0x8316E4", VA = "0x8316E4")]
	private static bool VerifyCanUseNetwork()
	{
		return default(bool);
	}

	[Token(Token = "0x600021D")]
	[Address(RVA = "0x82B0C8", Offset = "0x82B0C8", VA = "0x82B0C8")]
	public static void Disconnect()
	{
	}

	[Token(Token = "0x600021E")]
	[Address(RVA = "0x831788", Offset = "0x831788", VA = "0x831788")]
	public static bool FindFriends(string[] friendsToFind, [Optional] FindFriendsOptions options)
	{
		return default(bool);
	}

	[Token(Token = "0x600021F")]
	[Address(RVA = "0x831858", Offset = "0x831858", VA = "0x831858")]
	public static bool CreateRoom(string roomName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000220")]
	[Address(RVA = "0x831B18", Offset = "0x831B18", VA = "0x831B18")]
	public static bool CreateRoom(string roomName, RoomOptions roomOptions, TypedLobby typedLobby)
	{
		return default(bool);
	}

	[Token(Token = "0x6000221")]
	[Address(RVA = "0x8318B8", Offset = "0x8318B8", VA = "0x8318B8")]
	public static bool CreateRoom(string roomName, RoomOptions roomOptions, TypedLobby typedLobby, string[] expectedUsers)
	{
		return default(bool);
	}

	[Token(Token = "0x6000222")]
	[Address(RVA = "0x831D68", Offset = "0x831D68", VA = "0x831D68")]
	public static bool JoinRoom(string roomName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000223")]
	[Address(RVA = "0x831DC0", Offset = "0x831DC0", VA = "0x831DC0")]
	public static bool JoinRoom(string roomName, string[] expectedUsers)
	{
		return default(bool);
	}

	[Token(Token = "0x6000224")]
	[Address(RVA = "0x831FF0", Offset = "0x831FF0", VA = "0x831FF0")]
	public static bool JoinOrCreateRoom(string roomName, RoomOptions roomOptions, TypedLobby typedLobby)
	{
		return default(bool);
	}

	[Token(Token = "0x6000225")]
	[Address(RVA = "0x832060", Offset = "0x832060", VA = "0x832060")]
	public static bool JoinOrCreateRoom(string roomName, RoomOptions roomOptions, TypedLobby typedLobby, string[] expectedUsers)
	{
		return default(bool);
	}

	[Token(Token = "0x6000226")]
	[Address(RVA = "0x832314", Offset = "0x832314", VA = "0x832314")]
	public static bool JoinRandomRoom()
	{
		return default(bool);
	}

	[Token(Token = "0x6000227")]
	[Address(RVA = "0x832610", Offset = "0x832610", VA = "0x832610")]
	public static bool JoinRandomRoom(ExitGames.Client.Photon.Hashtable expectedCustomRoomProperties, byte expectedMaxPlayers)
	{
		return default(bool);
	}

	[Token(Token = "0x6000228")]
	[Address(RVA = "0x832378", Offset = "0x832378", VA = "0x832378")]
	public static bool JoinRandomRoom(ExitGames.Client.Photon.Hashtable expectedCustomRoomProperties, byte expectedMaxPlayers, MatchmakingMode matchingType, TypedLobby typedLobby, string sqlLobbyFilter, [Optional] string[] expectedUsers)
	{
		return default(bool);
	}

	[Token(Token = "0x6000229")]
	[Address(RVA = "0x832684", Offset = "0x832684", VA = "0x832684")]
	public static bool ReJoinRoom(string roomName)
	{
		return default(bool);
	}

	[Token(Token = "0x600022A")]
	[Address(RVA = "0x831B88", Offset = "0x831B88", VA = "0x831B88")]
	private static void EnterOfflineRoom(string roomName, RoomOptions roomOptions, bool createdRoom)
	{
	}

	[Token(Token = "0x600022B")]
	[Address(RVA = "0x832928", Offset = "0x832928", VA = "0x832928")]
	public static bool JoinLobby()
	{
		return default(bool);
	}

	[Token(Token = "0x600022C")]
	[Address(RVA = "0x832978", Offset = "0x832978", VA = "0x832978")]
	public static bool JoinLobby(TypedLobby typedLobby)
	{
		return default(bool);
	}

	[Token(Token = "0x600022D")]
	[Address(RVA = "0x832A88", Offset = "0x832A88", VA = "0x832A88")]
	public static bool LeaveLobby()
	{
		return default(bool);
	}

	[Token(Token = "0x600022E")]
	[Address(RVA = "0x832B34", Offset = "0x832B34", VA = "0x832B34")]
	public static bool LeaveRoom(bool becomeInactive = true)
	{
		return default(bool);
	}

	[Token(Token = "0x600022F")]
	[Address(RVA = "0x832DC4", Offset = "0x832DC4", VA = "0x832DC4")]
	public static bool GetCustomRoomList(TypedLobby typedLobby, string sqlLobbyFilter)
	{
		return default(bool);
	}

	[Token(Token = "0x6000230")]
	[Address(RVA = "0x832E48", Offset = "0x832E48", VA = "0x832E48")]
	public static RoomInfo[] GetRoomList()
	{
		return null;
	}

	[Token(Token = "0x6000231")]
	[Address(RVA = "0x832F3C", Offset = "0x832F3C", VA = "0x832F3C")]
	public static void SetPlayerCustomProperties(ExitGames.Client.Photon.Hashtable customProperties)
	{
	}

	[Token(Token = "0x6000232")]
	[Address(RVA = "0x8336D8", Offset = "0x8336D8", VA = "0x8336D8")]
	public static void RemovePlayerCustomProperties(string[] customPropertiesToDelete)
	{
	}

	[Token(Token = "0x6000233")]
	[Address(RVA = "0x833868", Offset = "0x833868", VA = "0x833868")]
	public static bool RaiseEvent(byte eventCode, object eventContent, bool sendReliable, RaiseEventOptions options)
	{
		return default(bool);
	}

	[Token(Token = "0x6000234")]
	[Address(RVA = "0x833984", Offset = "0x833984", VA = "0x833984")]
	public static int AllocateViewID()
	{
		return default(int);
	}

	[Token(Token = "0x6000235")]
	[Address(RVA = "0x833D60", Offset = "0x833D60", VA = "0x833D60")]
	public static int AllocateSceneViewID()
	{
		return default(int);
	}

	[Token(Token = "0x6000236")]
	[Address(RVA = "0x833A68", Offset = "0x833A68", VA = "0x833A68")]
	private static int AllocateViewID(int ownerId)
	{
		return default(int);
	}

	[Token(Token = "0x6000237")]
	[Address(RVA = "0x833EA0", Offset = "0x833EA0", VA = "0x833EA0")]
	private static int[] AllocateSceneViewIDs(int countOfNewViews)
	{
		return null;
	}

	[Token(Token = "0x6000238")]
	[Address(RVA = "0x833F64", Offset = "0x833F64", VA = "0x833F64")]
	public static void UnAllocateViewID(int viewID)
	{
	}

	[Token(Token = "0x6000239")]
	[Address(RVA = "0x834104", Offset = "0x834104", VA = "0x834104")]
	public static GameObject Instantiate(string prefabName, Vector3 position, Quaternion rotation, byte group)
	{
		return null;
	}

	[Token(Token = "0x600023A")]
	[Address(RVA = "0x8341C4", Offset = "0x8341C4", VA = "0x8341C4")]
	public static GameObject Instantiate(string prefabName, Vector3 position, Quaternion rotation, byte group, object[] data)
	{
		return null;
	}

	[Token(Token = "0x600023B")]
	[Address(RVA = "0x8346EC", Offset = "0x8346EC", VA = "0x8346EC")]
	public static GameObject InstantiateSceneObject(string prefabName, Vector3 position, Quaternion rotation, byte group, object[] data)
	{
		return null;
	}

	[Token(Token = "0x600023C")]
	[Address(RVA = "0x834C2C", Offset = "0x834C2C", VA = "0x834C2C")]
	public static int GetPing()
	{
		return default(int);
	}

	[Token(Token = "0x600023D")]
	[Address(RVA = "0x834C90", Offset = "0x834C90", VA = "0x834C90")]
	public static void FetchServerTimestamp()
	{
	}

	[Token(Token = "0x600023E")]
	[Address(RVA = "0x834D24", Offset = "0x834D24", VA = "0x834D24")]
	public static void SendOutgoingCommands()
	{
	}

	[Token(Token = "0x600023F")]
	[Address(RVA = "0x834DAC", Offset = "0x834DAC", VA = "0x834DAC")]
	public static bool CloseConnection(PhotonPlayer kickPlayer)
	{
		return default(bool);
	}

	[Token(Token = "0x6000240")]
	[Address(RVA = "0x834FCC", Offset = "0x834FCC", VA = "0x834FCC")]
	public static bool SetMasterClient(PhotonPlayer masterClientPlayer)
	{
		return default(bool);
	}

	[Token(Token = "0x6000241")]
	[Address(RVA = "0x8352F8", Offset = "0x8352F8", VA = "0x8352F8")]
	public static void Destroy(PhotonView targetView)
	{
	}

	[Token(Token = "0x6000242")]
	[Address(RVA = "0x83540C", Offset = "0x83540C", VA = "0x83540C")]
	public static void Destroy(GameObject targetGo)
	{
	}

	[Token(Token = "0x6000243")]
	[Address(RVA = "0x835488", Offset = "0x835488", VA = "0x835488")]
	public static void DestroyPlayerObjects(PhotonPlayer targetPlayer)
	{
	}

	[Token(Token = "0x6000244")]
	[Address(RVA = "0x835544", Offset = "0x835544", VA = "0x835544")]
	public static void DestroyPlayerObjects(int targetPlayerId)
	{
	}

	[Token(Token = "0x6000245")]
	[Address(RVA = "0x8356AC", Offset = "0x8356AC", VA = "0x8356AC")]
	public static void DestroyAll()
	{
	}

	[Token(Token = "0x6000246")]
	[Address(RVA = "0x835778", Offset = "0x835778", VA = "0x835778")]
	public static void RemoveRPCs(PhotonPlayer targetPlayer)
	{
	}

	[Token(Token = "0x6000247")]
	[Address(RVA = "0x835878", Offset = "0x835878", VA = "0x835878")]
	public static void RemoveRPCs(PhotonView targetPhotonView)
	{
	}

	[Token(Token = "0x6000248")]
	[Address(RVA = "0x835908", Offset = "0x835908", VA = "0x835908")]
	public static void RemoveRPCsInGroup(int targetGroup)
	{
	}

	[Token(Token = "0x6000249")]
	[Address(RVA = "0x835998", Offset = "0x835998", VA = "0x835998")]
	internal static void RPC(PhotonView view, string methodName, PhotonTargets target, bool encrypt, params object[] parameters)
	{
	}

	[Token(Token = "0x600024A")]
	[Address(RVA = "0x835BF0", Offset = "0x835BF0", VA = "0x835BF0")]
	internal static void RPC(PhotonView view, string methodName, PhotonPlayer targetPlayer, bool encrpyt, params object[] parameters)
	{
	}

	[Token(Token = "0x600024B")]
	[Address(RVA = "0x835E2C", Offset = "0x835E2C", VA = "0x835E2C")]
	public static void CacheSendMonoMessageTargets(Type type)
	{
	}

	[Token(Token = "0x600024C")]
	[Address(RVA = "0x835EE8", Offset = "0x835EE8", VA = "0x835EE8")]
	public static HashSet<GameObject> FindGameObjectsWithComponent(Type type)
	{
		return null;
	}

	[Token(Token = "0x600024D")]
	[Address(RVA = "0x836074", Offset = "0x836074", VA = "0x836074")]
	[Obsolete("Use SetInterestGroups(byte group, bool enabled) instead.")]
	public static void SetReceivingEnabled(int group, bool enabled)
	{
	}

	[Token(Token = "0x600024E")]
	[Address(RVA = "0x836100", Offset = "0x836100", VA = "0x836100")]
	public static void SetInterestGroups(byte group, bool enabled)
	{
	}

	[Token(Token = "0x600024F")]
	[Address(RVA = "0x8361EC", Offset = "0x8361EC", VA = "0x8361EC")]
	[Obsolete("Use SetInterestGroups(byte[] disableGroups, byte[] enableGroups) instead. Mind the parameter order!")]
	public static void SetReceivingEnabled(int[] enableGroups, int[] disableGroups)
	{
	}

	[Token(Token = "0x6000250")]
	[Address(RVA = "0x836304", Offset = "0x836304", VA = "0x836304")]
	public static void SetInterestGroups(byte[] disableGroups, byte[] enableGroups)
	{
	}

	[Token(Token = "0x6000251")]
	[Address(RVA = "0x8363A8", Offset = "0x8363A8", VA = "0x8363A8")]
	[Obsolete("Use SetSendingEnabled(byte group, bool enabled). Interest Groups have a byte-typed ID. Mind the parameter order.")]
	public static void SetSendingEnabled(int group, bool enabled)
	{
	}

	[Token(Token = "0x6000252")]
	[Address(RVA = "0x83640C", Offset = "0x83640C", VA = "0x83640C")]
	public static void SetSendingEnabled(byte group, bool enabled)
	{
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0x8364B0", Offset = "0x8364B0", VA = "0x8364B0")]
	[Obsolete("Use SetSendingEnabled(byte group, bool enabled). Interest Groups have a byte-typed ID. Mind the parameter order.")]
	public static void SetSendingEnabled(int[] enableGroups, int[] disableGroups)
	{
	}

	[Token(Token = "0x6000254")]
	[Address(RVA = "0x836588", Offset = "0x836588", VA = "0x836588")]
	public static void SetSendingEnabled(byte[] disableGroups, byte[] enableGroups)
	{
	}

	[Token(Token = "0x6000255")]
	[Address(RVA = "0x83662C", Offset = "0x83662C", VA = "0x83662C")]
	public static void SetLevelPrefix(short prefix)
	{
	}

	[Token(Token = "0x6000256")]
	[Address(RVA = "0x8366AC", Offset = "0x8366AC", VA = "0x8366AC")]
	public static void LoadLevel(int levelNumber)
	{
	}

	[Token(Token = "0x6000257")]
	[Address(RVA = "0x836810", Offset = "0x836810", VA = "0x836810")]
	public static AsyncOperation LoadLevelAsync(int levelNumber)
	{
		return null;
	}

	[Token(Token = "0x6000258")]
	[Address(RVA = "0x836978", Offset = "0x836978", VA = "0x836978")]
	public static void LoadLevel(string levelName)
	{
	}

	[Token(Token = "0x6000259")]
	[Address(RVA = "0x836AA8", Offset = "0x836AA8", VA = "0x836AA8")]
	public static AsyncOperation LoadLevelAsync(string levelName)
	{
		return null;
	}

	[Token(Token = "0x600025A")]
	[Address(RVA = "0x836BE4", Offset = "0x836BE4", VA = "0x836BE4")]
	public static bool WebRpc(string name, object parameters)
	{
		return default(bool);
	}

	[Token(Token = "0x600025B")]
	[Address(RVA = "0x836C60", Offset = "0x836C60", VA = "0x836C60")]
	public static bool CallEvent(byte eventCode, object content, int senderId)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000054")]
public class PhotonPlayer : IComparable<PhotonPlayer>, IComparable<int>, IEquatable<PhotonPlayer>, IEquatable<int>
{
	[Token(Token = "0x4000298")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private int actorID;

	[Token(Token = "0x4000299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string nameField;

	[Token(Token = "0x400029B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public readonly bool IsLocal;

	[Token(Token = "0x400029E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public object TagObject;

	[Token(Token = "0x1700006F")]
	public int ID
	{
		[Token(Token = "0x6000263")]
		[Address(RVA = "0x836F8C", Offset = "0x836F8C", VA = "0x836F8C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000070")]
	public string NickName
	{
		[Token(Token = "0x6000264")]
		[Address(RVA = "0x836F94", Offset = "0x836F94", VA = "0x836F94")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000265")]
		[Address(RVA = "0x836F9C", Offset = "0x836F9C", VA = "0x836F9C")]
		set
		{
		}
	}

	[Token(Token = "0x17000071")]
	public string UserId
	{
		[Token(Token = "0x6000266")]
		[Address(RVA = "0x837084", Offset = "0x837084", VA = "0x837084")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000267")]
		[Address(RVA = "0x83708C", Offset = "0x83708C", VA = "0x83708C")]
		[CompilerGenerated]
		internal set
		{
		}
	}

	[Token(Token = "0x17000072")]
	public bool IsMasterClient
	{
		[Token(Token = "0x6000268")]
		[Address(RVA = "0x834F54", Offset = "0x834F54", VA = "0x834F54")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000073")]
	public bool IsInactive
	{
		[Token(Token = "0x6000269")]
		[Address(RVA = "0x837094", Offset = "0x837094", VA = "0x837094")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600026A")]
		[Address(RVA = "0x83709C", Offset = "0x83709C", VA = "0x83709C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000074")]
	public ExitGames.Client.Photon.Hashtable CustomProperties
	{
		[Token(Token = "0x600026B")]
		[Address(RVA = "0x8370A8", Offset = "0x8370A8", VA = "0x8370A8")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600026C")]
		[Address(RVA = "0x8370B0", Offset = "0x8370B0", VA = "0x8370B0")]
		[CompilerGenerated]
		internal set
		{
		}
	}

	[Token(Token = "0x17000075")]
	public ExitGames.Client.Photon.Hashtable AllProperties
	{
		[Token(Token = "0x600026D")]
		[Address(RVA = "0x8370B8", Offset = "0x8370B8", VA = "0x8370B8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000076")]
	[Obsolete("Please use NickName (updated case for naming).")]
	public string name
	{
		[Token(Token = "0x6000280")]
		[Address(RVA = "0x837C1C", Offset = "0x837C1C", VA = "0x837C1C")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000281")]
		[Address(RVA = "0x837C24", Offset = "0x837C24", VA = "0x837C24")]
		set
		{
		}
	}

	[Token(Token = "0x17000077")]
	[Obsolete("Please use UserId (updated case for naming).")]
	public string userId
	{
		[Token(Token = "0x6000282")]
		[Address(RVA = "0x837C28", Offset = "0x837C28", VA = "0x837C28")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000283")]
		[Address(RVA = "0x837C30", Offset = "0x837C30", VA = "0x837C30")]
		internal set
		{
		}
	}

	[Token(Token = "0x17000078")]
	[Obsolete("Please use IsLocal (updated case for naming).")]
	public bool isLocal
	{
		[Token(Token = "0x6000284")]
		[Address(RVA = "0x837C38", Offset = "0x837C38", VA = "0x837C38")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000079")]
	[Obsolete("Please use IsMasterClient (updated case for naming).")]
	public bool isMasterClient
	{
		[Token(Token = "0x6000285")]
		[Address(RVA = "0x837C40", Offset = "0x837C40", VA = "0x837C40")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700007A")]
	[Obsolete("Please use IsInactive (updated case for naming).")]
	public bool isInactive
	{
		[Token(Token = "0x6000286")]
		[Address(RVA = "0x837C44", Offset = "0x837C44", VA = "0x837C44")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000287")]
		[Address(RVA = "0x837C4C", Offset = "0x837C4C", VA = "0x837C4C")]
		set
		{
		}
	}

	[Token(Token = "0x1700007B")]
	[Obsolete("Please use CustomProperties (updated case for naming).")]
	public ExitGames.Client.Photon.Hashtable customProperties
	{
		[Token(Token = "0x6000288")]
		[Address(RVA = "0x837C58", Offset = "0x837C58", VA = "0x837C58")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000289")]
		[Address(RVA = "0x837C60", Offset = "0x837C60", VA = "0x837C60")]
		internal set
		{
		}
	}

	[Token(Token = "0x1700007C")]
	[Obsolete("Please use AllProperties (updated case for naming).")]
	public ExitGames.Client.Photon.Hashtable allProperties
	{
		[Token(Token = "0x600028A")]
		[Address(RVA = "0x837C68", Offset = "0x837C68", VA = "0x837C68")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600026E")]
	[Address(RVA = "0x837194", Offset = "0x837194", VA = "0x837194")]
	public PhotonPlayer(bool isLocal, int actorID, string name)
	{
	}

	[Token(Token = "0x600026F")]
	[Address(RVA = "0x837250", Offset = "0x837250", VA = "0x837250")]
	protected internal PhotonPlayer(bool isLocal, int actorID, ExitGames.Client.Photon.Hashtable properties)
	{
	}

	[Token(Token = "0x6000270")]
	[Address(RVA = "0x837310", Offset = "0x837310", VA = "0x837310", Slot = "0")]
	public override bool Equals(object p)
	{
		return default(bool);
	}

	[Token(Token = "0x6000271")]
	[Address(RVA = "0x8373C4", Offset = "0x8373C4", VA = "0x8373C4", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}

	[Token(Token = "0x6000272")]
	[Address(RVA = "0x8373CC", Offset = "0x8373CC", VA = "0x8373CC")]
	internal void InternalChangeLocalID(int newID)
	{
	}

	[Token(Token = "0x6000273")]
	[Address(RVA = "0x83346C", Offset = "0x83346C", VA = "0x83346C")]
	internal void InternalCacheProperties(ExitGames.Client.Photon.Hashtable properties)
	{
	}

	[Token(Token = "0x6000274")]
	[Address(RVA = "0x8331D4", Offset = "0x8331D4", VA = "0x8331D4")]
	public void SetCustomProperties(ExitGames.Client.Photon.Hashtable propertiesToSet, [Optional] ExitGames.Client.Photon.Hashtable expectedValues, bool webForward = false)
	{
	}

	[Token(Token = "0x6000275")]
	[Address(RVA = "0x837454", Offset = "0x837454", VA = "0x837454")]
	public static PhotonPlayer Find(int ID)
	{
		return null;
	}

	[Token(Token = "0x6000276")]
	[Address(RVA = "0x8374F0", Offset = "0x8374F0", VA = "0x8374F0")]
	public PhotonPlayer Get(int id)
	{
		return null;
	}

	[Token(Token = "0x6000277")]
	[Address(RVA = "0x8374F8", Offset = "0x8374F8", VA = "0x8374F8")]
	public PhotonPlayer GetNext()
	{
		return null;
	}

	[Token(Token = "0x6000278")]
	[Address(RVA = "0x83777C", Offset = "0x83777C", VA = "0x83777C")]
	public PhotonPlayer GetNextFor(PhotonPlayer currentPlayer)
	{
		return null;
	}

	[Token(Token = "0x6000279")]
	[Address(RVA = "0x837500", Offset = "0x837500", VA = "0x837500")]
	public PhotonPlayer GetNextFor(int currentPlayerId)
	{
		return null;
	}

	[Token(Token = "0x600027A")]
	[Address(RVA = "0x837790", Offset = "0x837790", VA = "0x837790", Slot = "4")]
	public int CompareTo(PhotonPlayer other)
	{
		return default(int);
	}

	[Token(Token = "0x600027B")]
	[Address(RVA = "0x8377E8", Offset = "0x8377E8", VA = "0x8377E8", Slot = "5")]
	public int CompareTo(int other)
	{
		return default(int);
	}

	[Token(Token = "0x600027C")]
	[Address(RVA = "0x837824", Offset = "0x837824", VA = "0x837824", Slot = "6")]
	public bool Equals(PhotonPlayer other)
	{
		return default(bool);
	}

	[Token(Token = "0x600027D")]
	[Address(RVA = "0x837880", Offset = "0x837880", VA = "0x837880", Slot = "7")]
	public bool Equals(int other)
	{
		return default(bool);
	}

	[Token(Token = "0x600027E")]
	[Address(RVA = "0x8378C0", Offset = "0x8378C0", VA = "0x8378C0", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x600027F")]
	[Address(RVA = "0x837A48", Offset = "0x837A48", VA = "0x837A48")]
	public string ToStringFull()
	{
		return null;
	}
}
[Token(Token = "0x2000055")]
public class PhotonStatsGui : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x400029F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool statsWindowOn;

	[Token(Token = "0x40002A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool statsOn;

	[Token(Token = "0x40002A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool healthStatsVisible;

	[Token(Token = "0x40002A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool trafficStatsOn;

	[Token(Token = "0x40002A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool buttonsOn;

	[Token(Token = "0x40002A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Rect statsRect;

	[Token(Token = "0x40002A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int WindowId;

	[Token(Token = "0x600028B")]
	[Address(RVA = "0x837C6C", Offset = "0x837C6C", VA = "0x837C6C")]
	public void Start()
	{
	}

	[Token(Token = "0x600028C")]
	[Address(RVA = "0x837CCC", Offset = "0x837CCC", VA = "0x837CCC")]
	public void Update()
	{
	}

	[Token(Token = "0x600028D")]
	[Address(RVA = "0x837D10", Offset = "0x837D10", VA = "0x837D10")]
	public void OnGUI()
	{
	}

	[Token(Token = "0x600028E")]
	[Address(RVA = "0x837EC0", Offset = "0x837EC0", VA = "0x837EC0")]
	public void TrafficStatsWindow(int windowID)
	{
	}

	[Token(Token = "0x600028F")]
	[Address(RVA = "0x838D6C", Offset = "0x838D6C", VA = "0x838D6C")]
	public PhotonStatsGui()
	{
	}
}
[Token(Token = "0x2000056")]
public class PhotonStreamQueue
{
	[Token(Token = "0x40002A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private int m_SampleRate;

	[Token(Token = "0x40002A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private int m_SampleCount;

	[Token(Token = "0x40002A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int m_ObjectsPerSample;

	[Token(Token = "0x40002A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float m_LastSampleTime;

	[Token(Token = "0x40002AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int m_LastFrameCount;

	[Token(Token = "0x40002AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int m_NextObjectIndex;

	[Token(Token = "0x40002AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<object> m_Objects;

	[Token(Token = "0x40002AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool m_IsWriting;

	[Token(Token = "0x6000290")]
	[Address(RVA = "0x838DD4", Offset = "0x838DD4", VA = "0x838DD4")]
	public PhotonStreamQueue(int sampleRate)
	{
	}

	[Token(Token = "0x6000291")]
	[Address(RVA = "0x838E74", Offset = "0x838E74", VA = "0x838E74")]
	private void BeginWritePackage()
	{
	}

	[Token(Token = "0x6000292")]
	[Address(RVA = "0x8391F8", Offset = "0x8391F8", VA = "0x8391F8")]
	public void Reset()
	{
	}

	[Token(Token = "0x6000293")]
	[Address(RVA = "0x839278", Offset = "0x839278", VA = "0x839278")]
	public void SendNext(object obj)
	{
	}

	[Token(Token = "0x6000294")]
	[Address(RVA = "0x839350", Offset = "0x839350", VA = "0x839350")]
	public bool HasQueuedObjects()
	{
		return default(bool);
	}

	[Token(Token = "0x6000295")]
	[Address(RVA = "0x839360", Offset = "0x839360", VA = "0x839360")]
	public object ReceiveNext()
	{
		return null;
	}

	[Token(Token = "0x6000296")]
	[Address(RVA = "0x8393F8", Offset = "0x8393F8", VA = "0x8393F8")]
	public void Serialize(PhotonStream stream)
	{
	}

	[Token(Token = "0x6000297")]
	[Address(RVA = "0x83953C", Offset = "0x83953C", VA = "0x83953C")]
	public void Deserialize(PhotonStream stream)
	{
	}
}
[Token(Token = "0x2000057")]
public enum ViewSynchronization
{
	[Token(Token = "0x40002AF")]
	Off,
	[Token(Token = "0x40002B0")]
	ReliableDeltaCompressed,
	[Token(Token = "0x40002B1")]
	Unreliable,
	[Token(Token = "0x40002B2")]
	UnreliableOnChange
}
[Token(Token = "0x2000058")]
public enum OnSerializeTransform
{
	[Token(Token = "0x40002B4")]
	OnlyPosition,
	[Token(Token = "0x40002B5")]
	OnlyRotation,
	[Token(Token = "0x40002B6")]
	OnlyScale,
	[Token(Token = "0x40002B7")]
	PositionAndRotation,
	[Token(Token = "0x40002B8")]
	All
}
[Token(Token = "0x2000059")]
public enum OnSerializeRigidBody
{
	[Token(Token = "0x40002BA")]
	OnlyVelocity,
	[Token(Token = "0x40002BB")]
	OnlyAngularVelocity,
	[Token(Token = "0x40002BC")]
	All
}
[Token(Token = "0x200005A")]
public enum OwnershipOption
{
	[Token(Token = "0x40002BE")]
	Fixed,
	[Token(Token = "0x40002BF")]
	Takeover,
	[Token(Token = "0x40002C0")]
	Request
}
[Token(Token = "0x200005B")]
[AddComponentMenu("Photon Networking/Photon View")]
public class PhotonView : Photon.MonoBehaviour
{
	[Token(Token = "0x40002C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int ownerId;

	[Token(Token = "0x40002C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public byte group;

	[Token(Token = "0x40002C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	protected internal bool mixedModeIsReliable;

	[Token(Token = "0x40002C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
	public bool OwnerShipWasTransfered;

	[Token(Token = "0x40002C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int prefixBackup;

	[Token(Token = "0x40002C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	internal object[] instantiationDataField;

	[Token(Token = "0x40002C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected internal object[] lastOnSerializeDataSent;

	[Token(Token = "0x40002C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected internal object[] lastOnSerializeDataReceived;

	[Token(Token = "0x40002C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ViewSynchronization synchronization;

	[Token(Token = "0x40002CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public OnSerializeTransform onSerializeTransformOption;

	[Token(Token = "0x40002CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public OnSerializeRigidBody onSerializeRigidBodyOption;

	[Token(Token = "0x40002CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public OwnershipOption ownershipTransfer;

	[Token(Token = "0x40002CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public List<Component> ObservedComponents;

	[Token(Token = "0x40002CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Dictionary<Component, MethodInfo> m_OnSerializeMethodInfos;

	[Token(Token = "0x40002CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private int viewIdField;

	[Token(Token = "0x40002D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public int instantiationId;

	[Token(Token = "0x40002D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public int currentMasterID;

	[Token(Token = "0x40002D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	protected internal bool didAwake;

	[Token(Token = "0x40002D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x75")]
	[SerializeField]
	protected internal bool isRuntimeInstantiated;

	[Token(Token = "0x40002D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x76")]
	protected internal bool removedFromLocalViewList;

	[Token(Token = "0x40002D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	internal UnityEngine.MonoBehaviour[] RpcMonoBehaviours;

	[Token(Token = "0x40002D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private MethodInfo OnSerializeMethodInfo;

	[Token(Token = "0x40002D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool failedToFindOnSerialize;

	[Token(Token = "0x1700007D")]
	public int prefix
	{
		[Token(Token = "0x6000298")]
		[Address(RVA = "0x8396F4", Offset = "0x8396F4", VA = "0x8396F4")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000299")]
		[Address(RVA = "0x839790", Offset = "0x839790", VA = "0x839790")]
		set
		{
		}
	}

	[Token(Token = "0x1700007E")]
	public object[] instantiationData
	{
		[Token(Token = "0x600029A")]
		[Address(RVA = "0x839798", Offset = "0x839798", VA = "0x839798")]
		get
		{
			return null;
		}
		[Token(Token = "0x600029B")]
		[Address(RVA = "0x83981C", Offset = "0x83981C", VA = "0x83981C")]
		set
		{
		}
	}

	[Token(Token = "0x1700007F")]
	public int viewID
	{
		[Token(Token = "0x600029C")]
		[Address(RVA = "0x839824", Offset = "0x839824", VA = "0x839824")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600029D")]
		[Address(RVA = "0x83982C", Offset = "0x83982C", VA = "0x83982C")]
		set
		{
		}
	}

	[Token(Token = "0x17000080")]
	public bool isSceneView
	{
		[Token(Token = "0x600029E")]
		[Address(RVA = "0x8398F8", Offset = "0x8398F8", VA = "0x8398F8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000081")]
	public PhotonPlayer owner
	{
		[Token(Token = "0x600029F")]
		[Address(RVA = "0x839974", Offset = "0x839974", VA = "0x839974")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000082")]
	public int OwnerActorNr
	{
		[Token(Token = "0x60002A0")]
		[Address(RVA = "0x83997C", Offset = "0x83997C", VA = "0x83997C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000083")]
	public bool isOwnerActive
	{
		[Token(Token = "0x60002A1")]
		[Address(RVA = "0x839984", Offset = "0x839984", VA = "0x839984")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000084")]
	public int CreatorActorNr
	{
		[Token(Token = "0x60002A2")]
		[Address(RVA = "0x839910", Offset = "0x839910", VA = "0x839910")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000085")]
	public bool isMine
	{
		[Token(Token = "0x60002A3")]
		[Address(RVA = "0x839A24", Offset = "0x839A24", VA = "0x839A24")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60002A4")]
	[Address(RVA = "0x839AC4", Offset = "0x839AC4", VA = "0x839AC4")]
	protected internal void Awake()
	{
	}

	[Token(Token = "0x60002A5")]
	[Address(RVA = "0x839B64", Offset = "0x839B64", VA = "0x839B64")]
	public void RequestOwnership()
	{
	}

	[Token(Token = "0x60002A6")]
	[Address(RVA = "0x839BD4", Offset = "0x839BD4", VA = "0x839BD4")]
	public void TransferOwnership(PhotonPlayer newOwner)
	{
	}

	[Token(Token = "0x60002A7")]
	[Address(RVA = "0x839BEC", Offset = "0x839BEC", VA = "0x839BEC")]
	public void TransferOwnership(int newOwnerId)
	{
	}

	[Token(Token = "0x60002A8")]
	[Address(RVA = "0x839C70", Offset = "0x839C70", VA = "0x839C70")]
	public void OnMasterClientSwitched(PhotonPlayer newMasterClient)
	{
	}

	[Token(Token = "0x60002A9")]
	[Address(RVA = "0x839CD4", Offset = "0x839CD4", VA = "0x839CD4")]
	protected internal void OnDestroy()
	{
	}

	[Token(Token = "0x60002AA")]
	[Address(RVA = "0x839E3C", Offset = "0x839E3C", VA = "0x839E3C")]
	public void SerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60002AB")]
	[Address(RVA = "0x83A3D8", Offset = "0x83A3D8", VA = "0x83A3D8")]
	public void DeserializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60002AC")]
	[Address(RVA = "0x83A4A0", Offset = "0x83A4A0", VA = "0x83A4A0")]
	protected internal void DeserializeComponent(Component component, PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60002AD")]
	[Address(RVA = "0x839F04", Offset = "0x839F04", VA = "0x839F04")]
	protected internal void SerializeComponent(Component component, PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60002AE")]
	[Address(RVA = "0x83AAB4", Offset = "0x83AAB4", VA = "0x83AAB4")]
	protected internal void ExecuteComponentOnSerialize(Component component, PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60002AF")]
	[Address(RVA = "0x83AE88", Offset = "0x83AE88", VA = "0x83AE88")]
	public void RefreshRpcMonoBehaviourCache()
	{
	}

	[Token(Token = "0x60002B0")]
	[Address(RVA = "0x83AED8", Offset = "0x83AED8", VA = "0x83AED8")]
	public void RPC(string methodName, PhotonTargets target, params object[] parameters)
	{
	}

	[Token(Token = "0x60002B1")]
	[Address(RVA = "0x83AF58", Offset = "0x83AF58", VA = "0x83AF58")]
	public void RpcSecure(string methodName, PhotonTargets target, bool encrypt, params object[] parameters)
	{
	}

	[Token(Token = "0x60002B2")]
	[Address(RVA = "0x83AFDC", Offset = "0x83AFDC", VA = "0x83AFDC")]
	public void RPC(string methodName, PhotonPlayer targetPlayer, params object[] parameters)
	{
	}

	[Token(Token = "0x60002B3")]
	[Address(RVA = "0x83B05C", Offset = "0x83B05C", VA = "0x83B05C")]
	public void RpcSecure(string methodName, PhotonPlayer targetPlayer, bool encrypt, params object[] parameters)
	{
	}

	[Token(Token = "0x60002B4")]
	[Address(RVA = "0x83B0E0", Offset = "0x83B0E0", VA = "0x83B0E0")]
	public static PhotonView Get(Component component)
	{
		return null;
	}

	[Token(Token = "0x60002B5")]
	[Address(RVA = "0x83B130", Offset = "0x83B130", VA = "0x83B130")]
	public static PhotonView Get(GameObject gameObj)
	{
		return null;
	}

	[Token(Token = "0x60002B6")]
	[Address(RVA = "0x83B180", Offset = "0x83B180", VA = "0x83B180")]
	public static PhotonView Find(int viewID)
	{
		return null;
	}

	[Token(Token = "0x60002B7")]
	[Address(RVA = "0x83B1EC", Offset = "0x83B1EC", VA = "0x83B1EC", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x60002B8")]
	[Address(RVA = "0x83B440", Offset = "0x83B440", VA = "0x83B440")]
	public PhotonView()
	{
	}
}
[Token(Token = "0x200005C")]
public class PhotonPingManager
{
	[Token(Token = "0x200005D")]
	[CompilerGenerated]
	private sealed class <PingSocket>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Region region;

		[Token(Token = "0x40002E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PhotonPingManager <>4__this;

		[Token(Token = "0x40002E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Photon.Realtime.PhotonPing <ping>5__2;

		[Token(Token = "0x40002E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float <rttSum>5__3;

		[Token(Token = "0x40002E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int <replyCount>5__4;

		[Token(Token = "0x40002E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string <regionAddress>5__5;

		[Token(Token = "0x40002E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int <i>5__6;

		[Token(Token = "0x40002E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool <overtime>5__7;

		[Token(Token = "0x40002E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Stopwatch <sw>5__8;

		[Token(Token = "0x17000088")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002C2")]
			[Address(RVA = "0x83BE0C", Offset = "0x83BE0C", VA = "0x83BE0C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000089")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002C4")]
			[Address(RVA = "0x83BE54", Offset = "0x83BE54", VA = "0x83BE54", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002BF")]
		[Address(RVA = "0x83B4D8", Offset = "0x83B4D8", VA = "0x83B4D8")]
		[DebuggerHidden]
		public <PingSocket>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x60002C0")]
		[Address(RVA = "0x83B7D0", Offset = "0x83B7D0", VA = "0x83B7D0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002C1")]
		[Address(RVA = "0x83B7D4", Offset = "0x83B7D4", VA = "0x83B7D4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002C3")]
		[Address(RVA = "0x83BE14", Offset = "0x83BE14", VA = "0x83BE14", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40002D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool UseNative;

	[Token(Token = "0x40002D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int Attempts;

	[Token(Token = "0x40002DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static bool IgnoreInitialAttempt;

	[Token(Token = "0x40002DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int MaxMilliseconsPerPing;

	[Token(Token = "0x40002DC")]
	private const string wssProtocolString = "wss://";

	[Token(Token = "0x40002DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private int PingsRunning;

	[Token(Token = "0x17000086")]
	public Region BestRegion
	{
		[Token(Token = "0x60002B9")]
		[Address(RVA = "0x82CB38", Offset = "0x82CB38", VA = "0x82CB38")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000087")]
	public bool Done
	{
		[Token(Token = "0x60002BA")]
		[Address(RVA = "0x82CB28", Offset = "0x82CB28", VA = "0x82CB28")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60002BB")]
	[Address(RVA = "0x82CAB4", Offset = "0x82CAB4", VA = "0x82CAB4")]
	[IteratorStateMachine(typeof(<PingSocket>d__10))]
	public IEnumerator PingSocket(Region region)
	{
		return null;
	}

	[Token(Token = "0x60002BC")]
	[Address(RVA = "0x83B500", Offset = "0x83B500", VA = "0x83B500")]
	public static string ResolveHost(string hostName)
	{
		return null;
	}

	[Token(Token = "0x60002BD")]
	[Address(RVA = "0x82CAAC", Offset = "0x82CAAC", VA = "0x82CAAC")]
	public PhotonPingManager()
	{
	}
}
[Token(Token = "0x200005E")]
public class Room : RoomInfo
{
	[Token(Token = "0x1700008A")]
	public new string Name
	{
		[Token(Token = "0x60002C5")]
		[Address(RVA = "0x83BE5C", Offset = "0x83BE5C", VA = "0x83BE5C")]
		get
		{
			return null;
		}
		[Token(Token = "0x60002C6")]
		[Address(RVA = "0x83BE64", Offset = "0x83BE64", VA = "0x83BE64")]
		internal set
		{
		}
	}

	[Token(Token = "0x1700008B")]
	public new bool IsOpen
	{
		[Token(Token = "0x60002C7")]
		[Address(RVA = "0x83BE6C", Offset = "0x83BE6C", VA = "0x83BE6C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60002C8")]
		[Address(RVA = "0x83BE74", Offset = "0x83BE74", VA = "0x83BE74")]
		set
		{
		}
	}

	[Token(Token = "0x1700008C")]
	public new bool IsVisible
	{
		[Token(Token = "0x60002C9")]
		[Address(RVA = "0x83C084", Offset = "0x83C084", VA = "0x83C084")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60002CA")]
		[Address(RVA = "0x83C08C", Offset = "0x83C08C", VA = "0x83C08C")]
		set
		{
		}
	}

	[Token(Token = "0x1700008D")]
	public string[] PropertiesListedInLobby
	{
		[Token(Token = "0x60002CB")]
		[Address(RVA = "0x83C29C", Offset = "0x83C29C", VA = "0x83C29C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60002CC")]
		[Address(RVA = "0x83C2A4", Offset = "0x83C2A4", VA = "0x83C2A4")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700008E")]
	public bool AutoCleanUp
	{
		[Token(Token = "0x60002CD")]
		[Address(RVA = "0x83C2AC", Offset = "0x83C2AC", VA = "0x83C2AC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700008F")]
	public new int MaxPlayers
	{
		[Token(Token = "0x60002CE")]
		[Address(RVA = "0x83C2B4", Offset = "0x83C2B4", VA = "0x83C2B4")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60002CF")]
		[Address(RVA = "0x83C2BC", Offset = "0x83C2BC", VA = "0x83C2BC")]
		set
		{
		}
	}

	[Token(Token = "0x17000090")]
	public new int PlayerCount
	{
		[Token(Token = "0x60002D0")]
		[Address(RVA = "0x83C53C", Offset = "0x83C53C", VA = "0x83C53C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000091")]
	public string[] ExpectedUsers
	{
		[Token(Token = "0x60002D1")]
		[Address(RVA = "0x83C5B0", Offset = "0x83C5B0", VA = "0x83C5B0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000092")]
	public int PlayerTtl
	{
		[Token(Token = "0x60002D2")]
		[Address(RVA = "0x83C5B8", Offset = "0x83C5B8", VA = "0x83C5B8")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60002D3")]
		[Address(RVA = "0x83C5C0", Offset = "0x83C5C0", VA = "0x83C5C0")]
		set
		{
		}
	}

	[Token(Token = "0x17000093")]
	public int EmptyRoomTtl
	{
		[Token(Token = "0x60002D4")]
		[Address(RVA = "0x83C734", Offset = "0x83C734", VA = "0x83C734")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60002D5")]
		[Address(RVA = "0x83C73C", Offset = "0x83C73C", VA = "0x83C73C")]
		set
		{
		}
	}

	[Token(Token = "0x17000094")]
	protected internal int MasterClientId
	{
		[Token(Token = "0x60002D6")]
		[Address(RVA = "0x83C8B0", Offset = "0x83C8B0", VA = "0x83C8B0")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60002D7")]
		[Address(RVA = "0x83C8B8", Offset = "0x83C8B8", VA = "0x83C8B8")]
		set
		{
		}
	}

	[Token(Token = "0x17000095")]
	[Obsolete("Please use Name (updated case for naming).")]
	public new string name
	{
		[Token(Token = "0x60002DF")]
		[Address(RVA = "0x83DAD0", Offset = "0x83DAD0", VA = "0x83DAD0")]
		get
		{
			return null;
		}
		[Token(Token = "0x60002E0")]
		[Address(RVA = "0x83DAD8", Offset = "0x83DAD8", VA = "0x83DAD8")]
		internal set
		{
		}
	}

	[Token(Token = "0x17000096")]
	[Obsolete("Please use IsOpen (updated case for naming).")]
	public new bool open
	{
		[Token(Token = "0x60002E1")]
		[Address(RVA = "0x83DAE0", Offset = "0x83DAE0", VA = "0x83DAE0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60002E2")]
		[Address(RVA = "0x83DAE8", Offset = "0x83DAE8", VA = "0x83DAE8")]
		set
		{
		}
	}

	[Token(Token = "0x17000097")]
	[Obsolete("Please use IsVisible (updated case for naming).")]
	public new bool visible
	{
		[Token(Token = "0x60002E3")]
		[Address(RVA = "0x83DAF0", Offset = "0x83DAF0", VA = "0x83DAF0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60002E4")]
		[Address(RVA = "0x83DAF8", Offset = "0x83DAF8", VA = "0x83DAF8")]
		set
		{
		}
	}

	[Token(Token = "0x17000098")]
	[Obsolete("Please use PropertiesListedInLobby (updated case for naming).")]
	public string[] propertiesListedInLobby
	{
		[Token(Token = "0x60002E5")]
		[Address(RVA = "0x83DB00", Offset = "0x83DB00", VA = "0x83DB00")]
		get
		{
			return null;
		}
		[Token(Token = "0x60002E6")]
		[Address(RVA = "0x83DB08", Offset = "0x83DB08", VA = "0x83DB08")]
		private set
		{
		}
	}

	[Token(Token = "0x17000099")]
	[Obsolete("Please use AutoCleanUp (updated case for naming).")]
	public bool autoCleanUp
	{
		[Token(Token = "0x60002E7")]
		[Address(RVA = "0x83DB10", Offset = "0x83DB10", VA = "0x83DB10")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700009A")]
	[Obsolete("Please use MaxPlayers (updated case for naming).")]
	public new int maxPlayers
	{
		[Token(Token = "0x60002E8")]
		[Address(RVA = "0x83DB18", Offset = "0x83DB18", VA = "0x83DB18")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60002E9")]
		[Address(RVA = "0x83DB20", Offset = "0x83DB20", VA = "0x83DB20")]
		set
		{
		}
	}

	[Token(Token = "0x1700009B")]
	[Obsolete("Please use PlayerCount (updated case for naming).")]
	public new int playerCount
	{
		[Token(Token = "0x60002EA")]
		[Address(RVA = "0x83DB24", Offset = "0x83DB24", VA = "0x83DB24")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700009C")]
	[Obsolete("Please use ExpectedUsers (updated case for naming).")]
	public string[] expectedUsers
	{
		[Token(Token = "0x60002EB")]
		[Address(RVA = "0x83DB28", Offset = "0x83DB28", VA = "0x83DB28")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700009D")]
	[Obsolete("Please use MasterClientId (updated case for naming).")]
	protected internal int masterClientId
	{
		[Token(Token = "0x60002EC")]
		[Address(RVA = "0x83DB30", Offset = "0x83DB30", VA = "0x83DB30")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60002ED")]
		[Address(RVA = "0x83DB38", Offset = "0x83DB38", VA = "0x83DB38")]
		set
		{
		}
	}

	[Token(Token = "0x60002D8")]
	[Address(RVA = "0x832874", Offset = "0x832874", VA = "0x832874")]
	internal Room(string roomName, RoomOptions options)
	{
	}

	[Token(Token = "0x60002D9")]
	[Address(RVA = "0x83CFBC", Offset = "0x83CFBC", VA = "0x83CFBC")]
	public void SetCustomProperties(ExitGames.Client.Photon.Hashtable propertiesToSet, [Optional] ExitGames.Client.Photon.Hashtable expectedValues, bool webForward = false)
	{
	}

	[Token(Token = "0x60002DA")]
	[Address(RVA = "0x83D294", Offset = "0x83D294", VA = "0x83D294")]
	public void SetPropertiesListedInLobby(string[] propsListedInLobby)
	{
	}

	[Token(Token = "0x60002DB")]
	[Address(RVA = "0x83D38C", Offset = "0x83D38C", VA = "0x83D38C")]
	public void ClearExpectedUsers()
	{
	}

	[Token(Token = "0x60002DC")]
	[Address(RVA = "0x83D4E0", Offset = "0x83D4E0", VA = "0x83D4E0")]
	public void SetExpectedUsers(string[] expectedUsers)
	{
	}

	[Token(Token = "0x60002DD")]
	[Address(RVA = "0x83D610", Offset = "0x83D610", VA = "0x83D610", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x60002DE")]
	[Address(RVA = "0x83D83C", Offset = "0x83D83C", VA = "0x83D83C")]
	public new string ToStringFull()
	{
		return null;
	}
}
[Token(Token = "0x200005F")]
public class RoomInfo
{
	[Token(Token = "0x40002EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ExitGames.Client.Photon.Hashtable customPropertiesField;

	[Token(Token = "0x40002EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected byte maxPlayersField;

	[Token(Token = "0x40002ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	protected int emptyRoomTtlField;

	[Token(Token = "0x40002EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected int playerTtlField;

	[Token(Token = "0x40002EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected string[] expectedUsersField;

	[Token(Token = "0x40002F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected bool openField;

	[Token(Token = "0x40002F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	protected bool visibleField;

	[Token(Token = "0x40002F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	protected bool autoCleanUpField;

	[Token(Token = "0x40002F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected string nameField;

	[Token(Token = "0x40002F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected internal int masterClientIdField;

	[Token(Token = "0x1700009E")]
	public bool removedFromList
	{
		[Token(Token = "0x60002EE")]
		[Address(RVA = "0x83DB40", Offset = "0x83DB40", VA = "0x83DB40")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60002EF")]
		[Address(RVA = "0x83DB48", Offset = "0x83DB48", VA = "0x83DB48")]
		[CompilerGenerated]
		internal set
		{
		}
	}

	[Token(Token = "0x1700009F")]
	protected internal bool serverSideMasterClient
	{
		[Token(Token = "0x60002F0")]
		[Address(RVA = "0x83DB54", Offset = "0x83DB54", VA = "0x83DB54")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60002F1")]
		[Address(RVA = "0x83DB5C", Offset = "0x83DB5C", VA = "0x83DB5C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000A0")]
	public ExitGames.Client.Photon.Hashtable CustomProperties
	{
		[Token(Token = "0x60002F2")]
		[Address(RVA = "0x83DB68", Offset = "0x83DB68", VA = "0x83DB68")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000A1")]
	public string Name
	{
		[Token(Token = "0x60002F3")]
		[Address(RVA = "0x83DB70", Offset = "0x83DB70", VA = "0x83DB70")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000A2")]
	public int PlayerCount
	{
		[Token(Token = "0x60002F4")]
		[Address(RVA = "0x83DB78", Offset = "0x83DB78", VA = "0x83DB78")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60002F5")]
		[Address(RVA = "0x83DB80", Offset = "0x83DB80", VA = "0x83DB80")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000A3")]
	public bool IsLocalClientInside
	{
		[Token(Token = "0x60002F6")]
		[Address(RVA = "0x83DB88", Offset = "0x83DB88", VA = "0x83DB88")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60002F7")]
		[Address(RVA = "0x83DB90", Offset = "0x83DB90", VA = "0x83DB90")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000A4")]
	public byte MaxPlayers
	{
		[Token(Token = "0x60002F8")]
		[Address(RVA = "0x83DB9C", Offset = "0x83DB9C", VA = "0x83DB9C")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x170000A5")]
	public bool IsOpen
	{
		[Token(Token = "0x60002F9")]
		[Address(RVA = "0x83DBA4", Offset = "0x83DBA4", VA = "0x83DBA4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000A6")]
	public bool IsVisible
	{
		[Token(Token = "0x60002FA")]
		[Address(RVA = "0x83DBAC", Offset = "0x83DBAC", VA = "0x83DBAC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000A7")]
	[Obsolete("Please use CustomProperties (updated case for naming).")]
	public ExitGames.Client.Photon.Hashtable customProperties
	{
		[Token(Token = "0x6000301")]
		[Address(RVA = "0x83E124", Offset = "0x83E124", VA = "0x83E124")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000A8")]
	[Obsolete("Please use Name (updated case for naming).")]
	public string name
	{
		[Token(Token = "0x6000302")]
		[Address(RVA = "0x83E12C", Offset = "0x83E12C", VA = "0x83E12C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000A9")]
	[Obsolete("Please use PlayerCount (updated case for naming).")]
	public int playerCount
	{
		[Token(Token = "0x6000303")]
		[Address(RVA = "0x83E134", Offset = "0x83E134", VA = "0x83E134")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000304")]
		[Address(RVA = "0x83E13C", Offset = "0x83E13C", VA = "0x83E13C")]
		set
		{
		}
	}

	[Token(Token = "0x170000AA")]
	[Obsolete("Please use IsLocalClientInside (updated case for naming).")]
	public bool isLocalClientInside
	{
		[Token(Token = "0x6000305")]
		[Address(RVA = "0x83E144", Offset = "0x83E144", VA = "0x83E144")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000306")]
		[Address(RVA = "0x83E14C", Offset = "0x83E14C", VA = "0x83E14C")]
		set
		{
		}
	}

	[Token(Token = "0x170000AB")]
	[Obsolete("Please use MaxPlayers (updated case for naming).")]
	public byte maxPlayers
	{
		[Token(Token = "0x6000307")]
		[Address(RVA = "0x83E158", Offset = "0x83E158", VA = "0x83E158")]
		get
		{
			return default(byte);
		}
	}

	[Token(Token = "0x170000AC")]
	[Obsolete("Please use IsOpen (updated case for naming).")]
	public bool open
	{
		[Token(Token = "0x6000308")]
		[Address(RVA = "0x83E160", Offset = "0x83E160", VA = "0x83E160")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000AD")]
	[Obsolete("Please use IsVisible (updated case for naming).")]
	public bool visible
	{
		[Token(Token = "0x6000309")]
		[Address(RVA = "0x83E168", Offset = "0x83E168", VA = "0x83E168")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60002FB")]
	[Address(RVA = "0x83C8C0", Offset = "0x83C8C0", VA = "0x83C8C0")]
	protected internal RoomInfo(string roomName, ExitGames.Client.Photon.Hashtable properties)
	{
	}

	[Token(Token = "0x60002FC")]
	[Address(RVA = "0x83DBB4", Offset = "0x83DBB4", VA = "0x83DBB4", Slot = "0")]
	public override bool Equals(object other)
	{
		return default(bool);
	}

	[Token(Token = "0x60002FD")]
	[Address(RVA = "0x83DC54", Offset = "0x83DC54", VA = "0x83DC54", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}

	[Token(Token = "0x60002FE")]
	[Address(RVA = "0x83DC74", Offset = "0x83DC74", VA = "0x83DC74", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x60002FF")]
	[Address(RVA = "0x83DE9C", Offset = "0x83DE9C", VA = "0x83DE9C")]
	public string ToStringFull()
	{
		return null;
	}

	[Token(Token = "0x6000300")]
	[Address(RVA = "0x83C9B8", Offset = "0x83C9B8", VA = "0x83C9B8")]
	protected internal void InternalCacheProperties(ExitGames.Client.Photon.Hashtable propertiesToCache)
	{
	}
}
[Token(Token = "0x2000060")]
public class PunRPC : Attribute
{
	[Token(Token = "0x600030A")]
	[Address(RVA = "0x83E170", Offset = "0x83E170", VA = "0x83E170")]
	public PunRPC()
	{
	}
}
[Token(Token = "0x2000061")]
public class Region
{
	[Token(Token = "0x40002F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public CloudRegionCode Code;

	[Token(Token = "0x40002F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string Cluster;

	[Token(Token = "0x40002FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string HostAndPort;

	[Token(Token = "0x40002FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int Ping;

	[Token(Token = "0x600030B")]
	[Address(RVA = "0x83E178", Offset = "0x83E178", VA = "0x83E178")]
	public Region(CloudRegionCode code)
	{
	}

	[Token(Token = "0x600030C")]
	[Address(RVA = "0x83E1FC", Offset = "0x83E1FC", VA = "0x83E1FC")]
	public Region(CloudRegionCode code, string regionCodeString, string address)
	{
	}

	[Token(Token = "0x600030D")]
	[Address(RVA = "0x82BD7C", Offset = "0x82BD7C", VA = "0x82BD7C")]
	public static CloudRegionCode Parse(string codeAsString)
	{
		return default(CloudRegionCode);
	}

	[Token(Token = "0x600030E")]
	[Address(RVA = "0x83E238", Offset = "0x83E238", VA = "0x83E238")]
	internal static CloudRegionFlag ParseFlag(CloudRegionCode region)
	{
		return default(CloudRegionFlag);
	}

	[Token(Token = "0x600030F")]
	[Address(RVA = "0x83E3E8", Offset = "0x83E3E8", VA = "0x83E3E8")]
	[Obsolete]
	internal static CloudRegionFlag ParseFlag(string codeAsString)
	{
		return default(CloudRegionFlag);
	}

	[Token(Token = "0x6000310")]
	[Address(RVA = "0x83E54C", Offset = "0x83E54C", VA = "0x83E54C", Slot = "3")]
	public override string ToString()
	{
		return null;
	}
}
[Serializable]
[Token(Token = "0x2000062")]
public class ServerSettings : ScriptableObject
{
	[Token(Token = "0x2000063")]
	public enum HostingOption
	{
		[Token(Token = "0x400030E")]
		NotSet,
		[Token(Token = "0x400030F")]
		PhotonCloud,
		[Token(Token = "0x4000310")]
		SelfHosted,
		[Token(Token = "0x4000311")]
		OfflineMode,
		[Token(Token = "0x4000312")]
		BestRegion
	}

	[Token(Token = "0x40002FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string AppID;

	[Token(Token = "0x40002FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string VoiceAppID;

	[Token(Token = "0x40002FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string ChatAppID;

	[Token(Token = "0x40002FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public HostingOption HostType;

	[Token(Token = "0x4000300")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public CloudRegionCode PreferredRegion;

	[Token(Token = "0x4000301")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public CloudRegionFlag EnabledRegions;

	[Token(Token = "0x4000302")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public ConnectionProtocol Protocol;

	[Token(Token = "0x4000303")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public string ServerAddress;

	[Token(Token = "0x4000304")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int ServerPort;

	[Token(Token = "0x4000305")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public int VoiceServerPort;

	[Token(Token = "0x4000306")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool JoinLobby;

	[Token(Token = "0x4000307")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	public bool EnableLobbyStatistics;

	[Token(Token = "0x4000308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public PhotonLogLevel PunLogging;

	[Token(Token = "0x4000309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public DebugLevel NetworkLogging;

	[Token(Token = "0x400030A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	public bool RunInBackground;

	[Token(Token = "0x400030B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public List<string> RpcList;

	[Token(Token = "0x400030C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[HideInInspector]
	public bool DisableAutoOpenWizard;

	[Token(Token = "0x170000AE")]
	public static CloudRegionCode BestRegionCodeInPreferences
	{
		[Token(Token = "0x6000316")]
		[Address(RVA = "0x83E728", Offset = "0x83E728", VA = "0x83E728")]
		get
		{
			return default(CloudRegionCode);
		}
	}

	[Token(Token = "0x6000311")]
	[Address(RVA = "0x83E5DC", Offset = "0x83E5DC", VA = "0x83E5DC")]
	public void UseCloudBestRegion(string cloudAppid)
	{
	}

	[Token(Token = "0x6000312")]
	[Address(RVA = "0x83E5EC", Offset = "0x83E5EC", VA = "0x83E5EC")]
	public void UseCloud(string cloudAppid)
	{
	}

	[Token(Token = "0x6000313")]
	[Address(RVA = "0x83E5FC", Offset = "0x83E5FC", VA = "0x83E5FC")]
	public void UseCloud(string cloudAppid, CloudRegionCode code)
	{
	}

	[Token(Token = "0x6000314")]
	[Address(RVA = "0x83E60C", Offset = "0x83E60C", VA = "0x83E60C")]
	public void UseMyServer(string serverAddress, int serverPort, string application)
	{
	}

	[Token(Token = "0x6000315")]
	[Address(RVA = "0x83E688", Offset = "0x83E688", VA = "0x83E688")]
	public static bool IsAppId(string val)
	{
		return default(bool);
	}

	[Token(Token = "0x6000317")]
	[Address(RVA = "0x83E72C", Offset = "0x83E72C", VA = "0x83E72C")]
	public static void ResetBestRegionCodeInPreferences()
	{
	}

	[Token(Token = "0x6000318")]
	[Address(RVA = "0x83E734", Offset = "0x83E734", VA = "0x83E734", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x6000319")]
	[Address(RVA = "0x83E7E8", Offset = "0x83E7E8", VA = "0x83E7E8")]
	public ServerSettings()
	{
	}
}
[Token(Token = "0x2000064")]
[RequireComponent(typeof(Animator))]
[AddComponentMenu("Photon Networking/Photon Animator View")]
[RequireComponent(typeof(PhotonView))]
public class PhotonAnimatorView : UnityEngine.MonoBehaviour, IPunObservable
{
	[Token(Token = "0x2000065")]
	public enum ParameterType
	{
		[Token(Token = "0x400031F")]
		Float = 1,
		[Token(Token = "0x4000320")]
		Int = 3,
		[Token(Token = "0x4000321")]
		Bool = 4,
		[Token(Token = "0x4000322")]
		Trigger = 9
	}

	[Token(Token = "0x2000066")]
	public enum SynchronizeType
	{
		[Token(Token = "0x4000324")]
		Disabled,
		[Token(Token = "0x4000325")]
		Discrete,
		[Token(Token = "0x4000326")]
		Continuous
	}

	[Serializable]
	[Token(Token = "0x2000067")]
	public class SynchronizedParameter
	{
		[Token(Token = "0x4000327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ParameterType Type;

		[Token(Token = "0x4000328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public SynchronizeType SynchronizeType;

		[Token(Token = "0x4000329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Name;

		[Token(Token = "0x600032D")]
		[Address(RVA = "0x83F9A0", Offset = "0x83F9A0", VA = "0x83F9A0")]
		public SynchronizedParameter()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x2000068")]
	public class SynchronizedLayer
	{
		[Token(Token = "0x400032A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SynchronizeType SynchronizeType;

		[Token(Token = "0x400032B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int LayerIndex;

		[Token(Token = "0x600032E")]
		[Address(RVA = "0x83F798", Offset = "0x83F798", VA = "0x83F798")]
		public SynchronizedLayer()
		{
		}
	}

	[Token(Token = "0x4000313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Animator m_Animator;

	[Token(Token = "0x4000314")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private PhotonStreamQueue m_StreamQueue;

	[Token(Token = "0x4000315")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	[SerializeField]
	private bool ShowLayerWeightsInspector;

	[Token(Token = "0x4000316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	[HideInInspector]
	[SerializeField]
	private bool ShowParameterInspector;

	[Token(Token = "0x4000317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	[SerializeField]
	private List<SynchronizedParameter> m_SynchronizeParameters;

	[Token(Token = "0x4000318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	[SerializeField]
	private List<SynchronizedLayer> m_SynchronizeLayers;

	[Token(Token = "0x4000319")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 m_ReceiverPosition;

	[Token(Token = "0x400031A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float m_LastDeserializeTime;

	[Token(Token = "0x400031B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool m_WasSynchronizeTypeChanged;

	[Token(Token = "0x400031C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private PhotonView m_PhotonView;

	[Token(Token = "0x400031D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<string> m_raisedDiscreteTriggersCache;

	[Token(Token = "0x600031A")]
	[Address(RVA = "0x83E8AC", Offset = "0x83E8AC", VA = "0x83E8AC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600031B")]
	[Address(RVA = "0x83E95C", Offset = "0x83E95C", VA = "0x83E95C")]
	private void Update()
	{
	}

	[Token(Token = "0x600031C")]
	[Address(RVA = "0x83ED3C", Offset = "0x83ED3C", VA = "0x83ED3C")]
	public void CacheDiscreteTriggers()
	{
	}

	[Token(Token = "0x600031D")]
	[Address(RVA = "0x83F16C", Offset = "0x83F16C", VA = "0x83F16C")]
	public bool DoesLayerSynchronizeTypeExist(int layerIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x600031E")]
	[Address(RVA = "0x83F25C", Offset = "0x83F25C", VA = "0x83F25C")]
	public bool DoesParameterSynchronizeTypeExist(string name)
	{
		return default(bool);
	}

	[Token(Token = "0x600031F")]
	[Address(RVA = "0x83F34C", Offset = "0x83F34C", VA = "0x83F34C")]
	public List<SynchronizedLayer> GetSynchronizedLayers()
	{
		return null;
	}

	[Token(Token = "0x6000320")]
	[Address(RVA = "0x83F354", Offset = "0x83F354", VA = "0x83F354")]
	public List<SynchronizedParameter> GetSynchronizedParameters()
	{
		return null;
	}

	[Token(Token = "0x6000321")]
	[Address(RVA = "0x83F35C", Offset = "0x83F35C", VA = "0x83F35C")]
	public SynchronizeType GetLayerSynchronizeType(int layerIndex)
	{
		return default(SynchronizeType);
	}

	[Token(Token = "0x6000322")]
	[Address(RVA = "0x83F484", Offset = "0x83F484", VA = "0x83F484")]
	public SynchronizeType GetParameterSynchronizeType(string name)
	{
		return default(SynchronizeType);
	}

	[Token(Token = "0x6000323")]
	[Address(RVA = "0x83F5AC", Offset = "0x83F5AC", VA = "0x83F5AC")]
	public void SetLayerSynchronized(int layerIndex, SynchronizeType synchronizeType)
	{
	}

	[Token(Token = "0x6000324")]
	[Address(RVA = "0x83F7A0", Offset = "0x83F7A0", VA = "0x83F7A0")]
	public void SetParameterSynchronized(string name, ParameterType type, SynchronizeType synchronizeType)
	{
	}

	[Token(Token = "0x6000325")]
	[Address(RVA = "0x83EA6C", Offset = "0x83EA6C", VA = "0x83EA6C")]
	private void SerializeDataContinuously()
	{
	}

	[Token(Token = "0x6000326")]
	[Address(RVA = "0x83EE84", Offset = "0x83EE84", VA = "0x83EE84")]
	private void DeserializeDataContinuously()
	{
	}

	[Token(Token = "0x6000327")]
	[Address(RVA = "0x83F9A8", Offset = "0x83F9A8", VA = "0x83F9A8")]
	private void SerializeDataDiscretly(PhotonStream stream)
	{
	}

	[Token(Token = "0x6000328")]
	[Address(RVA = "0x83FC88", Offset = "0x83FC88", VA = "0x83FC88")]
	private void DeserializeDataDiscretly(PhotonStream stream)
	{
	}

	[Token(Token = "0x6000329")]
	[Address(RVA = "0x840018", Offset = "0x840018", VA = "0x840018")]
	private void SerializeSynchronizationTypeState(PhotonStream stream)
	{
	}

	[Token(Token = "0x600032A")]
	[Address(RVA = "0x8401A4", Offset = "0x8401A4", VA = "0x8401A4")]
	private void DeserializeSynchronizationTypeState(PhotonStream stream)
	{
	}

	[Token(Token = "0x600032B")]
	[Address(RVA = "0x84032C", Offset = "0x84032C", VA = "0x84032C", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x600032C")]
	[Address(RVA = "0x840458", Offset = "0x840458", VA = "0x840458")]
	public PhotonAnimatorView()
	{
	}
}
[Token(Token = "0x200006F")]
[RequireComponent(typeof(PhotonView))]
[RequireComponent(typeof(Rigidbody2D))]
[AddComponentMenu("Photon Networking/Photon Rigidbody 2D View")]
public class PhotonRigidbody2DView : UnityEngine.MonoBehaviour, IPunObservable
{
	[Token(Token = "0x4000332")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool m_SynchronizeVelocity;

	[Token(Token = "0x4000333")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[SerializeField]
	private bool m_SynchronizeAngularVelocity;

	[Token(Token = "0x4000334")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Rigidbody2D m_Body;

	[Token(Token = "0x600033B")]
	[Address(RVA = "0x840644", Offset = "0x840644", VA = "0x840644")]
	private void Awake()
	{
	}

	[Token(Token = "0x600033C")]
	[Address(RVA = "0x840694", Offset = "0x840694", VA = "0x840694", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x600033D")]
	[Address(RVA = "0x840818", Offset = "0x840818", VA = "0x840818")]
	public PhotonRigidbody2DView()
	{
	}
}
[Token(Token = "0x2000070")]
[RequireComponent(typeof(Rigidbody))]
[AddComponentMenu("Photon Networking/Photon Rigidbody View")]
[RequireComponent(typeof(PhotonView))]
public class PhotonRigidbodyView : UnityEngine.MonoBehaviour, IPunObservable
{
	[Token(Token = "0x4000335")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Rigidbody m_Body;

	[Token(Token = "0x600033E")]
	[Address(RVA = "0x840828", Offset = "0x840828", VA = "0x840828")]
	private void Awake()
	{
	}

	[Token(Token = "0x600033F")]
	[Address(RVA = "0x840878", Offset = "0x840878", VA = "0x840878", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000340")]
	[Address(RVA = "0x8409B0", Offset = "0x8409B0", VA = "0x8409B0")]
	public PhotonRigidbodyView()
	{
	}
}
[Token(Token = "0x2000071")]
[AddComponentMenu("Photon Networking/Photon Transform View")]
[RequireComponent(typeof(PhotonView))]
public class PhotonTransformView : UnityEngine.MonoBehaviour, IPunObservable
{
	[Token(Token = "0x4000336")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public PhotonTransformViewPositionModel m_PositionModel;

	[Token(Token = "0x4000337")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	public PhotonTransformViewRotationModel m_RotationModel;

	[Token(Token = "0x4000338")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	public PhotonTransformViewScaleModel m_ScaleModel;

	[Token(Token = "0x4000339")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private PhotonView m_PhotonView;

	[Token(Token = "0x400033A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool m_ReceivedNetworkUpdate;

	[Token(Token = "0x400033B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool m_firstTake;

	[Token(Token = "0x400033C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 m_NetworkPosition;

	[Token(Token = "0x400033D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Quaternion m_NetworkRotation;

	[Token(Token = "0x400033E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private double m_LastSerializeTime;

	[Token(Token = "0x6000341")]
	[Address(RVA = "0x8409B8", Offset = "0x8409B8", VA = "0x8409B8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000342")]
	[Address(RVA = "0x840A08", Offset = "0x840A08", VA = "0x840A08")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000343")]
	[Address(RVA = "0x840A14", Offset = "0x840A14", VA = "0x840A14")]
	private void Update()
	{
	}

	[Token(Token = "0x6000344")]
	[Address(RVA = "0x840DA4", Offset = "0x840DA4", VA = "0x840DA4", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000345")]
	[Address(RVA = "0x840F80", Offset = "0x840F80", VA = "0x840F80")]
	public PhotonTransformView()
	{
	}
}
[Token(Token = "0x2000072")]
public class PhotonTransformViewPositionControl
{
	[Token(Token = "0x400033F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private PhotonTransformViewPositionModel m_Model;

	[Token(Token = "0x4000340")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float m_CurrentSpeed;

	[Token(Token = "0x4000341")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private double m_LastSerializeTime;

	[Token(Token = "0x4000342")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 m_SynchronizedSpeed;

	[Token(Token = "0x4000343")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float m_SynchronizedTurnSpeed;

	[Token(Token = "0x4000344")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 m_NetworkPosition;

	[Token(Token = "0x4000345")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Queue<Vector3> m_OldNetworkPositions;

	[Token(Token = "0x4000346")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool m_UpdatedPositionAfterOnSerialize;

	[Token(Token = "0x6000348")]
	[Address(RVA = "0x8412C4", Offset = "0x8412C4", VA = "0x8412C4")]
	public PhotonTransformViewPositionControl(PhotonTransformViewPositionModel model)
	{
	}

	[Token(Token = "0x6000349")]
	[Address(RVA = "0x84139C", Offset = "0x84139C", VA = "0x84139C")]
	private Vector3 GetOldestStoredNetworkPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600034A")]
	[Address(RVA = "0x841414", Offset = "0x841414", VA = "0x841414")]
	public void SetSynchronizedValues(Vector3 speed, float turnSpeed)
	{
	}

	[Token(Token = "0x600034B")]
	[Address(RVA = "0x841420", Offset = "0x841420", VA = "0x841420")]
	public Vector3 UpdatePosition(Vector3 currentPosition)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600034C")]
	[Address(RVA = "0x841C18", Offset = "0x841C18", VA = "0x841C18")]
	public Vector3 GetNetworkPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600034D")]
	[Address(RVA = "0x841978", Offset = "0x841978", VA = "0x841978")]
	public Vector3 GetExtrapolatedPositionOffset()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600034E")]
	[Address(RVA = "0x841C24", Offset = "0x841C24", VA = "0x841C24")]
	public void OnPhotonSerializeView(Vector3 currentPosition, PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x600034F")]
	[Address(RVA = "0x841CE4", Offset = "0x841CE4", VA = "0x841CE4")]
	private void SerializeData(Vector3 currentPosition, PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000350")]
	[Address(RVA = "0x841E00", Offset = "0x841E00", VA = "0x841E00")]
	private void DeserializeData(PhotonStream stream, PhotonMessageInfo info)
	{
	}
}
[Serializable]
[Token(Token = "0x2000073")]
public class PhotonTransformViewPositionModel
{
	[Token(Token = "0x2000074")]
	public enum InterpolateOptions
	{
		[Token(Token = "0x4000356")]
		Disabled,
		[Token(Token = "0x4000357")]
		FixedSpeed,
		[Token(Token = "0x4000358")]
		EstimatedSpeed,
		[Token(Token = "0x4000359")]
		SynchronizeValues,
		[Token(Token = "0x400035A")]
		Lerp
	}

	[Token(Token = "0x2000075")]
	public enum ExtrapolateOptions
	{
		[Token(Token = "0x400035C")]
		Disabled,
		[Token(Token = "0x400035D")]
		SynchronizeValues,
		[Token(Token = "0x400035E")]
		EstimateSpeedAndTurn,
		[Token(Token = "0x400035F")]
		FixedSpeed
	}

	[Token(Token = "0x4000347")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool SynchronizeEnabled;

	[Token(Token = "0x4000348")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	public bool TeleportEnabled;

	[Token(Token = "0x4000349")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float TeleportIfDistanceGreaterThan;

	[Token(Token = "0x400034A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public InterpolateOptions InterpolateOption;

	[Token(Token = "0x400034B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float InterpolateMoveTowardsSpeed;

	[Token(Token = "0x400034C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float InterpolateLerpSpeed;

	[Token(Token = "0x400034D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float InterpolateMoveTowardsAcceleration;

	[Token(Token = "0x400034E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float InterpolateMoveTowardsDeceleration;

	[Token(Token = "0x400034F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AnimationCurve InterpolateSpeedCurve;

	[Token(Token = "0x4000350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ExtrapolateOptions ExtrapolateOption;

	[Token(Token = "0x4000351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float ExtrapolateSpeed;

	[Token(Token = "0x4000352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool ExtrapolateIncludingRoundTripTime;

	[Token(Token = "0x4000353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public int ExtrapolateNumberOfStoredPositions;

	[Token(Token = "0x4000354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool DrawErrorGizmo;

	[Token(Token = "0x6000351")]
	[Address(RVA = "0x841060", Offset = "0x841060", VA = "0x841060")]
	public PhotonTransformViewPositionModel()
	{
	}
}
[Token(Token = "0x2000076")]
public class PhotonTransformViewRotationControl
{
	[Token(Token = "0x4000360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private PhotonTransformViewRotationModel m_Model;

	[Token(Token = "0x4000361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Quaternion m_NetworkRotation;

	[Token(Token = "0x6000352")]
	[Address(RVA = "0x841FD8", Offset = "0x841FD8", VA = "0x841FD8")]
	public PhotonTransformViewRotationControl(PhotonTransformViewRotationModel model)
	{
	}

	[Token(Token = "0x6000353")]
	[Address(RVA = "0x842000", Offset = "0x842000", VA = "0x842000")]
	public Quaternion GetNetworkRotation()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000354")]
	[Address(RVA = "0x84200C", Offset = "0x84200C", VA = "0x84200C")]
	public Quaternion GetRotation(Quaternion currentRotation)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000355")]
	[Address(RVA = "0x8421A0", Offset = "0x8421A0", VA = "0x8421A0")]
	public void OnPhotonSerializeView(Quaternion currentRotation, PhotonStream stream, PhotonMessageInfo info)
	{
	}
}
[Serializable]
[Token(Token = "0x2000077")]
public class PhotonTransformViewRotationModel
{
	[Token(Token = "0x2000078")]
	public enum InterpolateOptions
	{
		[Token(Token = "0x4000367")]
		Disabled,
		[Token(Token = "0x4000368")]
		RotateTowards,
		[Token(Token = "0x4000369")]
		Lerp
	}

	[Token(Token = "0x4000362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool SynchronizeEnabled;

	[Token(Token = "0x4000363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public InterpolateOptions InterpolateOption;

	[Token(Token = "0x4000364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float InterpolateRotateTowardsSpeed;

	[Token(Token = "0x4000365")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float InterpolateLerpSpeed;

	[Token(Token = "0x6000356")]
	[Address(RVA = "0x841298", Offset = "0x841298", VA = "0x841298")]
	public PhotonTransformViewRotationModel()
	{
	}
}
[Token(Token = "0x2000079")]
public class PhotonTransformViewScaleControl
{
	[Token(Token = "0x400036A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private PhotonTransformViewScaleModel m_Model;

	[Token(Token = "0x400036B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 m_NetworkScale;

	[Token(Token = "0x6000357")]
	[Address(RVA = "0x84228C", Offset = "0x84228C", VA = "0x84228C")]
	public PhotonTransformViewScaleControl(PhotonTransformViewScaleModel model)
	{
	}

	[Token(Token = "0x6000358")]
	[Address(RVA = "0x8422F8", Offset = "0x8422F8", VA = "0x8422F8")]
	public Vector3 GetNetworkScale()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000359")]
	[Address(RVA = "0x842304", Offset = "0x842304", VA = "0x842304")]
	public Vector3 GetScale(Vector3 currentScale)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600035A")]
	[Address(RVA = "0x84248C", Offset = "0x84248C", VA = "0x84248C")]
	public void OnPhotonSerializeView(Vector3 currentScale, PhotonStream stream, PhotonMessageInfo info)
	{
	}
}
[Serializable]
[Token(Token = "0x200007A")]
public class PhotonTransformViewScaleModel
{
	[Token(Token = "0x200007B")]
	public enum InterpolateOptions
	{
		[Token(Token = "0x4000371")]
		Disabled,
		[Token(Token = "0x4000372")]
		MoveTowards,
		[Token(Token = "0x4000373")]
		Lerp
	}

	[Token(Token = "0x400036C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool SynchronizeEnabled;

	[Token(Token = "0x400036D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public InterpolateOptions InterpolateOption;

	[Token(Token = "0x400036E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float InterpolateMoveTowardsSpeed;

	[Token(Token = "0x400036F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float InterpolateLerpSpeed;

	[Token(Token = "0x600035B")]
	[Address(RVA = "0x8412B4", Offset = "0x8412B4", VA = "0x8412B4")]
	public PhotonTransformViewScaleModel()
	{
	}
}
[Token(Token = "0x200007C")]
public class ConnectAndJoinRandom : Photon.MonoBehaviour
{
	[Token(Token = "0x4000374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool AutoConnect;

	[Token(Token = "0x4000375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public byte Version;

	[Token(Token = "0x4000376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	private bool ConnectInUpdate;

	[Token(Token = "0x600035C")]
	[Address(RVA = "0x84257C", Offset = "0x84257C", VA = "0x84257C", Slot = "4")]
	public virtual void Start()
	{
	}

	[Token(Token = "0x600035D")]
	[Address(RVA = "0x8425CC", Offset = "0x8425CC", VA = "0x8425CC", Slot = "5")]
	public virtual void Update()
	{
	}

	[Token(Token = "0x600035E")]
	[Address(RVA = "0x8426F4", Offset = "0x8426F4", VA = "0x8426F4", Slot = "6")]
	public virtual void OnConnectedToMaster()
	{
	}

	[Token(Token = "0x600035F")]
	[Address(RVA = "0x842784", Offset = "0x842784", VA = "0x842784", Slot = "7")]
	public virtual void OnJoinedLobby()
	{
	}

	[Token(Token = "0x6000360")]
	[Address(RVA = "0x842814", Offset = "0x842814", VA = "0x842814", Slot = "8")]
	public virtual void OnPhotonRandomJoinFailed()
	{
	}

	[Token(Token = "0x6000361")]
	[Address(RVA = "0x8428E8", Offset = "0x8428E8", VA = "0x8428E8", Slot = "9")]
	public virtual void OnFailedToConnectToPhoton(DisconnectCause cause)
	{
	}

	[Token(Token = "0x6000362")]
	[Address(RVA = "0x8429B4", Offset = "0x8429B4", VA = "0x8429B4")]
	public void OnJoinedRoom()
	{
	}

	[Token(Token = "0x6000363")]
	[Address(RVA = "0x842A1C", Offset = "0x842A1C", VA = "0x842A1C")]
	public ConnectAndJoinRandom()
	{
	}
}
[Token(Token = "0x200007D")]
[HelpURL("https://doc.photonengine.com/en-us/pun/current/demos-and-tutorials/package-demos/culling-demo")]
public class CullArea : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4000377")]
	private const int MAX_NUMBER_OF_ALLOWED_CELLS = 250;

	[Token(Token = "0x4000378")]
	public const int MAX_NUMBER_OF_SUBDIVISIONS = 3;

	[Token(Token = "0x4000379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public readonly byte FIRST_GROUP_ID;

	[Token(Token = "0x400037A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public readonly int[] SUBDIVISION_FIRST_LEVEL_ORDER;

	[Token(Token = "0x400037B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public readonly int[] SUBDIVISION_SECOND_LEVEL_ORDER;

	[Token(Token = "0x400037C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public readonly int[] SUBDIVISION_THIRD_LEVEL_ORDER;

	[Token(Token = "0x400037D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector2 Center;

	[Token(Token = "0x400037E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector2 Size;

	[Token(Token = "0x400037F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector2[] Subdivisions;

	[Token(Token = "0x4000380")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public int NumberOfSubdivisions;

	[Token(Token = "0x4000384")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool YIsUpAxis;

	[Token(Token = "0x4000385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	public bool RecreateCellHierarchy;

	[Token(Token = "0x4000386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
	private byte idCounter;

	[Token(Token = "0x170000AF")]
	public int CellCount
	{
		[Token(Token = "0x6000364")]
		[Address(RVA = "0x842A34", Offset = "0x842A34", VA = "0x842A34")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000365")]
		[Address(RVA = "0x842A3C", Offset = "0x842A3C", VA = "0x842A3C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000B0")]
	public CellTree CellTree
	{
		[Token(Token = "0x6000366")]
		[Address(RVA = "0x842A44", Offset = "0x842A44", VA = "0x842A44")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000367")]
		[Address(RVA = "0x842A4C", Offset = "0x842A4C", VA = "0x842A4C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000B1")]
	public Dictionary<int, GameObject> Map
	{
		[Token(Token = "0x6000368")]
		[Address(RVA = "0x842A54", Offset = "0x842A54", VA = "0x842A54")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000369")]
		[Address(RVA = "0x842A5C", Offset = "0x842A5C", VA = "0x842A5C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x600036A")]
	[Address(RVA = "0x842A64", Offset = "0x842A64", VA = "0x842A64")]
	private void Awake()
	{
	}

	[Token(Token = "0x600036B")]
	[Address(RVA = "0x842E94", Offset = "0x842E94", VA = "0x842E94")]
	public void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600036C")]
	[Address(RVA = "0x842A70", Offset = "0x842A70", VA = "0x842A70")]
	private void CreateCellHierarchy()
	{
	}

	[Token(Token = "0x600036D")]
	[Address(RVA = "0x842FBC", Offset = "0x842FBC", VA = "0x842FBC")]
	private void CreateChildCells(CellTreeNode parent, int cellLevelInHierarchy)
	{
	}

	[Token(Token = "0x600036E")]
	[Address(RVA = "0x842EE0", Offset = "0x842EE0", VA = "0x842EE0")]
	private void DrawCells()
	{
	}

	[Token(Token = "0x600036F")]
	[Address(RVA = "0x842F08", Offset = "0x842F08", VA = "0x842F08")]
	private bool IsCellCountAllowed()
	{
		return default(bool);
	}

	[Token(Token = "0x6000370")]
	[Address(RVA = "0x843234", Offset = "0x843234", VA = "0x843234")]
	public List<byte> GetActiveCells(Vector3 position)
	{
		return null;
	}

	[Token(Token = "0x6000371")]
	[Address(RVA = "0x8432F4", Offset = "0x8432F4", VA = "0x8432F4")]
	public CullArea()
	{
	}
}
[Token(Token = "0x200007E")]
public class CellTree
{
	[Token(Token = "0x170000B2")]
	public CellTreeNode RootNode
	{
		[Token(Token = "0x6000372")]
		[Address(RVA = "0x8C6FA4", Offset = "0x8C6FA4", VA = "0x8C6FA4")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000373")]
		[Address(RVA = "0x8C6FAC", Offset = "0x8C6FAC", VA = "0x8C6FAC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000374")]
	[Address(RVA = "0x8C6FB4", Offset = "0x8C6FB4", VA = "0x8C6FB4")]
	public CellTree()
	{
	}

	[Token(Token = "0x6000375")]
	[Address(RVA = "0x8C6FBC", Offset = "0x8C6FBC", VA = "0x8C6FBC")]
	public CellTree(CellTreeNode root)
	{
	}
}
[Token(Token = "0x200007F")]
public class CellTreeNode
{
	[Token(Token = "0x2000080")]
	public enum ENodeType
	{
		[Token(Token = "0x4000392")]
		Root,
		[Token(Token = "0x4000393")]
		Node,
		[Token(Token = "0x4000394")]
		Leaf
	}

	[Token(Token = "0x4000388")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public byte Id;

	[Token(Token = "0x4000389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public Vector3 Center;

	[Token(Token = "0x400038A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 Size;

	[Token(Token = "0x400038B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Vector3 TopLeft;

	[Token(Token = "0x400038C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector3 BottomRight;

	[Token(Token = "0x400038D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public ENodeType NodeType;

	[Token(Token = "0x400038E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public CellTreeNode Parent;

	[Token(Token = "0x400038F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public List<CellTreeNode> Childs;

	[Token(Token = "0x4000390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float maxDistance;

	[Token(Token = "0x6000376")]
	[Address(RVA = "0x8C6FE4", Offset = "0x8C6FE4", VA = "0x8C6FE4")]
	public CellTreeNode()
	{
	}

	[Token(Token = "0x6000377")]
	[Address(RVA = "0x8C6FEC", Offset = "0x8C6FEC", VA = "0x8C6FEC")]
	public CellTreeNode(byte id, ENodeType nodeType, CellTreeNode parent)
	{
	}

	[Token(Token = "0x6000378")]
	[Address(RVA = "0x8C702C", Offset = "0x8C702C", VA = "0x8C702C")]
	public void AddChild(CellTreeNode child)
	{
	}

	[Token(Token = "0x6000379")]
	[Address(RVA = "0x8C7120", Offset = "0x8C7120", VA = "0x8C7120")]
	public void Draw()
	{
	}

	[Token(Token = "0x600037A")]
	[Address(RVA = "0x8C7124", Offset = "0x8C7124", VA = "0x8C7124")]
	public void GetActiveCells(List<byte> activeCells, bool yIsUpAxis, Vector3 position)
	{
	}

	[Token(Token = "0x600037B")]
	[Address(RVA = "0x8C741C", Offset = "0x8C741C", VA = "0x8C741C")]
	public bool IsPointInsideCell(bool yIsUpAxis, Vector3 point)
	{
		return default(bool);
	}

	[Token(Token = "0x600037C")]
	[Address(RVA = "0x8C73BC", Offset = "0x8C73BC", VA = "0x8C73BC")]
	public bool IsPointNearCell(bool yIsUpAxis, Vector3 point)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000081")]
public class InputToEvent : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4000395")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GameObject lastGo;

	[Token(Token = "0x4000396")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Vector3 inputHitPos;

	[Token(Token = "0x4000397")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool DetectPointedAtGameObject;

	[Token(Token = "0x4000399")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector2 pressedPosition;

	[Token(Token = "0x400039A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector2 currentPos;

	[Token(Token = "0x400039B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool Dragging;

	[Token(Token = "0x400039C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Camera m_Camera;

	[Token(Token = "0x170000B3")]
	public static GameObject goPointedAt
	{
		[Token(Token = "0x600037D")]
		[Address(RVA = "0x8C747C", Offset = "0x8C747C", VA = "0x8C747C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600037E")]
		[Address(RVA = "0x8C74C4", Offset = "0x8C74C4", VA = "0x8C74C4")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000B4")]
	public Vector2 DragVector
	{
		[Token(Token = "0x600037F")]
		[Address(RVA = "0x8C7510", Offset = "0x8C7510", VA = "0x8C7510")]
		get
		{
			return default(Vector2);
		}
	}

	[Token(Token = "0x6000380")]
	[Address(RVA = "0x8C756C", Offset = "0x8C756C", VA = "0x8C756C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000381")]
	[Address(RVA = "0x8C75BC", Offset = "0x8C75BC", VA = "0x8C75BC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000382")]
	[Address(RVA = "0x8C78B4", Offset = "0x8C78B4", VA = "0x8C78B4")]
	private void Press(Vector2 screenPos)
	{
	}

	[Token(Token = "0x6000383")]
	[Address(RVA = "0x8C7988", Offset = "0x8C7988", VA = "0x8C7988")]
	private void Release(Vector2 screenPos)
	{
	}

	[Token(Token = "0x6000384")]
	[Address(RVA = "0x8C77C4", Offset = "0x8C77C4", VA = "0x8C77C4")]
	private GameObject RaycastObject(Vector2 screenPos)
	{
		return null;
	}

	[Token(Token = "0x6000385")]
	[Address(RVA = "0x8C7ADC", Offset = "0x8C7ADC", VA = "0x8C7ADC")]
	public InputToEvent()
	{
	}
}
[Token(Token = "0x2000082")]
[RequireComponent(typeof(PhotonView))]
public class InRoomChat : Photon.MonoBehaviour
{
	[Token(Token = "0x400039D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Rect GuiRect;

	[Token(Token = "0x400039E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool IsVisible;

	[Token(Token = "0x400039F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool AlignBottom;

	[Token(Token = "0x40003A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<string> messages;

	[Token(Token = "0x40003A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private string inputLine;

	[Token(Token = "0x40003A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector2 scrollPos;

	[Token(Token = "0x40003A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly string ChatRPC;

	[Token(Token = "0x6000386")]
	[Address(RVA = "0x8C7B40", Offset = "0x8C7B40", VA = "0x8C7B40")]
	public void Start()
	{
	}

	[Token(Token = "0x6000387")]
	[Address(RVA = "0x8C7B94", Offset = "0x8C7B94", VA = "0x8C7B94")]
	public void OnGUI()
	{
	}

	[Token(Token = "0x6000388")]
	[Address(RVA = "0x8C8118", Offset = "0x8C8118", VA = "0x8C8118")]
	[PunRPC]
	public void Chat(string newLine, PhotonMessageInfo mi)
	{
	}

	[Token(Token = "0x6000389")]
	[Address(RVA = "0x8C8274", Offset = "0x8C8274", VA = "0x8C8274")]
	public void AddLine(string newLine)
	{
	}

	[Token(Token = "0x600038A")]
	[Address(RVA = "0x8C831C", Offset = "0x8C831C", VA = "0x8C831C")]
	public InRoomChat()
	{
	}
}
[Token(Token = "0x2000083")]
[RequireComponent(typeof(PhotonView))]
public class ManualPhotonViewAllocator : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40003A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject Prefab;

	[Token(Token = "0x600038C")]
	[Address(RVA = "0x8C848C", Offset = "0x8C848C", VA = "0x8C848C")]
	public void AllocateManualPhotonView()
	{
	}

	[Token(Token = "0x600038D")]
	[Address(RVA = "0x8C8680", Offset = "0x8C8680", VA = "0x8C8680")]
	[PunRPC]
	public void InstantiateRpc(int viewID)
	{
	}

	[Token(Token = "0x600038E")]
	[Address(RVA = "0x8C8834", Offset = "0x8C8834", VA = "0x8C8834")]
	public ManualPhotonViewAllocator()
	{
	}
}
[Token(Token = "0x2000084")]
[RequireComponent(typeof(PhotonView))]
public class MoveByKeys : Photon.MonoBehaviour
{
	[Token(Token = "0x40003A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Speed;

	[Token(Token = "0x40003A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float JumpForce;

	[Token(Token = "0x40003A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float JumpTimeout;

	[Token(Token = "0x40003A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool isSprite;

	[Token(Token = "0x40003A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float jumpingTime;

	[Token(Token = "0x40003AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Rigidbody body;

	[Token(Token = "0x40003AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Rigidbody2D body2d;

	[Token(Token = "0x600038F")]
	[Address(RVA = "0x8C883C", Offset = "0x8C883C", VA = "0x8C883C")]
	public void Start()
	{
	}

	[Token(Token = "0x6000390")]
	[Address(RVA = "0x8C891C", Offset = "0x8C891C", VA = "0x8C891C")]
	public void FixedUpdate()
	{
	}

	[Token(Token = "0x6000391")]
	[Address(RVA = "0x8C8D00", Offset = "0x8C8D00", VA = "0x8C8D00")]
	public MoveByKeys()
	{
	}
}
[Token(Token = "0x2000085")]
[RequireComponent(typeof(PhotonView))]
public class NetworkCullingHandler : UnityEngine.MonoBehaviour, IPunObservable
{
	[Token(Token = "0x40003AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int orderIndex;

	[Token(Token = "0x40003AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private CullArea cullArea;

	[Token(Token = "0x40003AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<byte> previousActiveCells;

	[Token(Token = "0x40003AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<byte> activeCells;

	[Token(Token = "0x40003B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private PhotonView pView;

	[Token(Token = "0x40003B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 lastPosition;

	[Token(Token = "0x40003B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector3 currentPosition;

	[Token(Token = "0x6000392")]
	[Address(RVA = "0x8C8D1C", Offset = "0x8C8D1C", VA = "0x8C8D1C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000393")]
	[Address(RVA = "0x8C8EA8", Offset = "0x8C8EA8", VA = "0x8C8EA8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000394")]
	[Address(RVA = "0x8C8FDC", Offset = "0x8C8FDC", VA = "0x8C8FDC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000395")]
	[Address(RVA = "0x8C9504", Offset = "0x8C9504", VA = "0x8C9504")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000396")]
	[Address(RVA = "0x8C9084", Offset = "0x8C9084", VA = "0x8C9084")]
	private bool HaveActiveCellsChanged()
	{
		return default(bool);
	}

	[Token(Token = "0x6000397")]
	[Address(RVA = "0x8C9244", Offset = "0x8C9244", VA = "0x8C9244")]
	private void UpdateInterestGroups()
	{
	}

	[Token(Token = "0x6000398")]
	[Address(RVA = "0x8C9910", Offset = "0x8C9910", VA = "0x8C9910", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000399")]
	[Address(RVA = "0x8C9A80", Offset = "0x8C9A80", VA = "0x8C9A80")]
	public NetworkCullingHandler()
	{
	}
}
[Token(Token = "0x2000086")]
[RequireComponent(typeof(PhotonView))]
public class OnClickDestroy : Photon.MonoBehaviour
{
	[Token(Token = "0x2000087")]
	[CompilerGenerated]
	private sealed class <DestroyRpc>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OnClickDestroy <>4__this;

		[Token(Token = "0x170000B5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003A0")]
			[Address(RVA = "0x8C9D60", Offset = "0x8C9D60", VA = "0x8C9D60", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003A2")]
			[Address(RVA = "0x8C9DA8", Offset = "0x8C9DA8", VA = "0x8C9DA8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600039D")]
		[Address(RVA = "0x8C9C0C", Offset = "0x8C9C0C", VA = "0x8C9C0C")]
		[DebuggerHidden]
		public <DestroyRpc>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x600039E")]
		[Address(RVA = "0x8C9C3C", Offset = "0x8C9C3C", VA = "0x8C9C3C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600039F")]
		[Address(RVA = "0x8C9C40", Offset = "0x8C9C40", VA = "0x8C9C40", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003A1")]
		[Address(RVA = "0x8C9D68", Offset = "0x8C9D68", VA = "0x8C9D68", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool DestroyByRpc;

	[Token(Token = "0x600039A")]
	[Address(RVA = "0x8C9A88", Offset = "0x8C9A88", VA = "0x8C9A88")]
	public void OnClick()
	{
	}

	[Token(Token = "0x600039B")]
	[Address(RVA = "0x8C9BA4", Offset = "0x8C9BA4", VA = "0x8C9BA4")]
	[PunRPC]
	[IteratorStateMachine(typeof(<DestroyRpc>d__2))]
	public IEnumerator DestroyRpc()
	{
		return null;
	}

	[Token(Token = "0x600039C")]
	[Address(RVA = "0x8C9C34", Offset = "0x8C9C34", VA = "0x8C9C34")]
	public OnClickDestroy()
	{
	}
}
[Token(Token = "0x2000088")]
public class OnClickInstantiate : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40003B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject Prefab;

	[Token(Token = "0x40003B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int InstantiateType;

	[Token(Token = "0x40003B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string[] InstantiateTypeNames;

	[Token(Token = "0x40003BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool showGui;

	[Token(Token = "0x60003A3")]
	[Address(RVA = "0x8C9DB0", Offset = "0x8C9DB0", VA = "0x8C9DB0")]
	private void OnClick()
	{
	}

	[Token(Token = "0x60003A4")]
	[Address(RVA = "0x8C9FF8", Offset = "0x8C9FF8", VA = "0x8C9FF8")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60003A5")]
	[Address(RVA = "0x8CA0F8", Offset = "0x8CA0F8", VA = "0x8CA0F8")]
	public OnClickInstantiate()
	{
	}
}
[Token(Token = "0x2000089")]
public class OnJoinedInstantiate : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40003BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform SpawnPosition;

	[Token(Token = "0x40003BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float PositionOffset;

	[Token(Token = "0x40003BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject[] PrefabsToInstantiate;

	[Token(Token = "0x60003A6")]
	[Address(RVA = "0x8CA1E8", Offset = "0x8CA1E8", VA = "0x8CA1E8")]
	public void OnJoinedRoom()
	{
	}

	[Token(Token = "0x60003A7")]
	[Address(RVA = "0x8CA518", Offset = "0x8CA518", VA = "0x8CA518")]
	public OnJoinedInstantiate()
	{
	}
}
[Token(Token = "0x200008A")]
public class OnStartDelete : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x60003A8")]
	[Address(RVA = "0x8CA528", Offset = "0x8CA528", VA = "0x8CA528")]
	private void Start()
	{
	}

	[Token(Token = "0x60003A9")]
	[Address(RVA = "0x8CA594", Offset = "0x8CA594", VA = "0x8CA594")]
	public OnStartDelete()
	{
	}
}
[Token(Token = "0x200008B")]
[RequireComponent(typeof(PhotonView))]
public class PickupItem : Photon.MonoBehaviour, IPunObservable
{
	[Token(Token = "0x40003BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float SecondsBeforeRespawn;

	[Token(Token = "0x40003BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool PickupOnTrigger;

	[Token(Token = "0x40003C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public bool PickupIsMine;

	[Token(Token = "0x40003C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public UnityEngine.MonoBehaviour OnPickedUpCall;

	[Token(Token = "0x40003C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool SentPickup;

	[Token(Token = "0x40003C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public double TimeOfRespawn;

	[Token(Token = "0x40003C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static HashSet<PickupItem> DisabledPickupItems;

	[Token(Token = "0x170000B7")]
	public int ViewID
	{
		[Token(Token = "0x60003AA")]
		[Address(RVA = "0x8CA59C", Offset = "0x8CA59C", VA = "0x8CA59C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60003AB")]
	[Address(RVA = "0x8CA5BC", Offset = "0x8CA5BC", VA = "0x8CA5BC")]
	public void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60003AC")]
	[Address(RVA = "0x8CA760", Offset = "0x8CA760", VA = "0x8CA760", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60003AD")]
	[Address(RVA = "0x8CA67C", Offset = "0x8CA67C", VA = "0x8CA67C")]
	public void Pickup()
	{
	}

	[Token(Token = "0x60003AE")]
	[Address(RVA = "0x8CA89C", Offset = "0x8CA89C", VA = "0x8CA89C")]
	public void Drop()
	{
	}

	[Token(Token = "0x60003AF")]
	[Address(RVA = "0x8CA978", Offset = "0x8CA978", VA = "0x8CA978")]
	public void Drop(Vector3 newPosition)
	{
	}

	[Token(Token = "0x60003B0")]
	[Address(RVA = "0x8CAAA0", Offset = "0x8CAAA0", VA = "0x8CAAA0")]
	[PunRPC]
	public void PunPickup(PhotonMessageInfo msgInfo)
	{
	}

	[Token(Token = "0x60003B1")]
	[Address(RVA = "0x8CAEA0", Offset = "0x8CAEA0", VA = "0x8CAEA0")]
	internal void PickedUp(float timeUntilRespawn)
	{
	}

	[Token(Token = "0x60003B2")]
	[Address(RVA = "0x8CAFC4", Offset = "0x8CAFC4", VA = "0x8CAFC4")]
	[PunRPC]
	internal void PunRespawn(Vector3 pos)
	{
	}

	[Token(Token = "0x60003B3")]
	[Address(RVA = "0x8CB088", Offset = "0x8CB088", VA = "0x8CB088")]
	[PunRPC]
	internal void PunRespawn()
	{
	}

	[Token(Token = "0x60003B4")]
	[Address(RVA = "0x8CB184", Offset = "0x8CB184", VA = "0x8CB184")]
	public PickupItem()
	{
	}
}
[Token(Token = "0x200008C")]
[RequireComponent(typeof(PhotonView))]
public class PickupItemSimple : Photon.MonoBehaviour
{
	[Token(Token = "0x40003C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float SecondsBeforeRespawn;

	[Token(Token = "0x40003C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool PickupOnCollide;

	[Token(Token = "0x40003C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public bool SentPickup;

	[Token(Token = "0x60003B6")]
	[Address(RVA = "0x8CB220", Offset = "0x8CB220", VA = "0x8CB220")]
	public void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60003B7")]
	[Address(RVA = "0x8CB2E0", Offset = "0x8CB2E0", VA = "0x8CB2E0")]
	public void Pickup()
	{
	}

	[Token(Token = "0x60003B8")]
	[Address(RVA = "0x8CB3C4", Offset = "0x8CB3C4", VA = "0x8CB3C4")]
	[PunRPC]
	public void PunPickupSimple(PhotonMessageInfo msgInfo)
	{
	}

	[Token(Token = "0x60003B9")]
	[Address(RVA = "0x8CB57C", Offset = "0x8CB57C", VA = "0x8CB57C")]
	public void RespawnAfter()
	{
	}

	[Token(Token = "0x60003BA")]
	[Address(RVA = "0x8CB61C", Offset = "0x8CB61C", VA = "0x8CB61C")]
	public PickupItemSimple()
	{
	}
}
[Token(Token = "0x200008D")]
[RequireComponent(typeof(PhotonView))]
public class PickupItemSyncer : Photon.MonoBehaviour
{
	[Token(Token = "0x40003C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool IsWaitingForPickupInit;

	[Token(Token = "0x40003C9")]
	private const float TimeDeltaToIgnore = 0.2f;

	[Token(Token = "0x60003BB")]
	[Address(RVA = "0x8CB62C", Offset = "0x8CB62C", VA = "0x8CB62C")]
	public void OnPhotonPlayerConnected(PhotonPlayer newPlayer)
	{
	}

	[Token(Token = "0x60003BC")]
	[Address(RVA = "0x8CBF14", Offset = "0x8CBF14", VA = "0x8CBF14")]
	public void OnJoinedRoom()
	{
	}

	[Token(Token = "0x60003BD")]
	[Address(RVA = "0x8CC090", Offset = "0x8CC090", VA = "0x8CC090")]
	public void AskForPickupItemSpawnTimes()
	{
	}

	[Token(Token = "0x60003BE")]
	[Address(RVA = "0x8CC2D0", Offset = "0x8CC2D0", VA = "0x8CC2D0")]
	[Obsolete("Use RequestForPickupItems(PhotonMessageInfo msgInfo) with corrected typing instead.")]
	[PunRPC]
	public void RequestForPickupTimes(PhotonMessageInfo msgInfo)
	{
	}

	[Token(Token = "0x60003BF")]
	[Address(RVA = "0x8CC2FC", Offset = "0x8CC2FC", VA = "0x8CC2FC")]
	[PunRPC]
	public void RequestForPickupItems(PhotonMessageInfo msgInfo)
	{
	}

	[Token(Token = "0x60003C0")]
	[Address(RVA = "0x8CB6AC", Offset = "0x8CB6AC", VA = "0x8CB6AC")]
	private void SendPickedUpItems(PhotonPlayer targetPlayer)
	{
	}

	[Token(Token = "0x60003C1")]
	[Address(RVA = "0x8CC384", Offset = "0x8CC384", VA = "0x8CC384")]
	[PunRPC]
	public void PickupItemInit(double timeBase, float[] inactivePickupsAndTimes)
	{
	}

	[Token(Token = "0x60003C2")]
	[Address(RVA = "0x8CC750", Offset = "0x8CC750", VA = "0x8CC750")]
	public PickupItemSyncer()
	{
	}
}
[Token(Token = "0x200008E")]
[RequireComponent(typeof(InputToEvent))]
public class PointedAtGameObjectInfo : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x60003C3")]
	[Address(RVA = "0x8CC758", Offset = "0x8CC758", VA = "0x8CC758")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60003C4")]
	[Address(RVA = "0x8CCA40", Offset = "0x8CCA40", VA = "0x8CCA40")]
	public PointedAtGameObjectInfo()
	{
	}
}
[Token(Token = "0x200008F")]
public class PunPlayerScores : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40003CA")]
	public const string PlayerScoreProp = "score";

	[Token(Token = "0x60003C5")]
	[Address(RVA = "0x8CCA48", Offset = "0x8CCA48", VA = "0x8CCA48")]
	public PunPlayerScores()
	{
	}
}
[Token(Token = "0x2000090")]
public static class ScoreExtensions
{
	[Token(Token = "0x60003C6")]
	[Address(RVA = "0x8CCA50", Offset = "0x8CCA50", VA = "0x8CCA50")]
	public static void SetScore(this PhotonPlayer player, int newScore)
	{
	}

	[Token(Token = "0x60003C7")]
	[Address(RVA = "0x8CCB28", Offset = "0x8CCB28", VA = "0x8CCB28")]
	public static void AddScore(this PhotonPlayer player, int scoreToAddToCurrent)
	{
	}

	[Token(Token = "0x60003C8")]
	[Address(RVA = "0x8CCC14", Offset = "0x8CCC14", VA = "0x8CCC14")]
	public static int GetScore(this PhotonPlayer player)
	{
		return default(int);
	}
}
[Token(Token = "0x2000091")]
public class PunTeams : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x2000092")]
	public enum Team : byte
	{
		[Token(Token = "0x40003CE")]
		none,
		[Token(Token = "0x40003CF")]
		red,
		[Token(Token = "0x40003D0")]
		blue
	}

	[Token(Token = "0x40003CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Dictionary<Team, List<PhotonPlayer>> PlayersPerTeam;

	[Token(Token = "0x40003CC")]
	public const string TeamPlayerProp = "team";

	[Token(Token = "0x60003C9")]
	[Address(RVA = "0x8CCCD8", Offset = "0x8CCCD8", VA = "0x8CCCD8")]
	public void Start()
	{
	}

	[Token(Token = "0x60003CA")]
	[Address(RVA = "0x8CD10C", Offset = "0x8CD10C", VA = "0x8CD10C")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x60003CB")]
	[Address(RVA = "0x8CD198", Offset = "0x8CD198", VA = "0x8CD198")]
	public void OnJoinedRoom()
	{
	}

	[Token(Token = "0x60003CC")]
	[Address(RVA = "0x8CD664", Offset = "0x8CD664", VA = "0x8CD664")]
	public void OnLeftRoom()
	{
	}

	[Token(Token = "0x60003CD")]
	[Address(RVA = "0x8CD668", Offset = "0x8CD668", VA = "0x8CD668")]
	public void OnPhotonPlayerPropertiesChanged(object[] playerAndUpdatedProps)
	{
	}

	[Token(Token = "0x60003CE")]
	[Address(RVA = "0x8CD66C", Offset = "0x8CD66C", VA = "0x8CD66C")]
	public void OnPhotonPlayerDisconnected(PhotonPlayer otherPlayer)
	{
	}

	[Token(Token = "0x60003CF")]
	[Address(RVA = "0x8CD670", Offset = "0x8CD670", VA = "0x8CD670")]
	public void OnPhotonPlayerConnected(PhotonPlayer newPlayer)
	{
	}

	[Token(Token = "0x60003D0")]
	[Address(RVA = "0x8CD19C", Offset = "0x8CD19C", VA = "0x8CD19C")]
	public void UpdateTeams()
	{
	}

	[Token(Token = "0x60003D1")]
	[Address(RVA = "0x8CD738", Offset = "0x8CD738", VA = "0x8CD738")]
	public PunTeams()
	{
	}
}
[Token(Token = "0x2000093")]
public static class TeamExtensions
{
	[Token(Token = "0x60003D2")]
	[Address(RVA = "0x8CD674", Offset = "0x8CD674", VA = "0x8CD674")]
	public static PunTeams.Team GetTeam(this PhotonPlayer player)
	{
		return default(PunTeams.Team);
	}

	[Token(Token = "0x60003D3")]
	[Address(RVA = "0x8CD740", Offset = "0x8CD740", VA = "0x8CD740")]
	public static void SetTeam(this PhotonPlayer player, PunTeams.Team team)
	{
	}
}
[Token(Token = "0x2000094")]
public class PunTurnManager : PunBehaviour
{
	[Token(Token = "0x40003D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float TurnDuration;

	[Token(Token = "0x40003D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public IPunTurnManagerCallbacks TurnManagerListener;

	[Token(Token = "0x40003D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly HashSet<PhotonPlayer> finishedPlayers;

	[Token(Token = "0x40003D4")]
	public const byte TurnManagerEventOffset = 0;

	[Token(Token = "0x40003D5")]
	public const byte EvMove = 1;

	[Token(Token = "0x40003D6")]
	public const byte EvFinalMove = 2;

	[Token(Token = "0x40003D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool _isOverCallProcessed;

	[Token(Token = "0x170000B8")]
	public int Turn
	{
		[Token(Token = "0x60003D4")]
		[Address(RVA = "0x8CD93C", Offset = "0x8CD93C", VA = "0x8CD93C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60003D5")]
		[Address(RVA = "0x8CDACC", Offset = "0x8CDACC", VA = "0x8CDACC")]
		private set
		{
		}
	}

	[Token(Token = "0x170000B9")]
	public float ElapsedTimeInTurn
	{
		[Token(Token = "0x60003D6")]
		[Address(RVA = "0x8CDCEC", Offset = "0x8CDCEC", VA = "0x8CDCEC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000BA")]
	public float RemainingSecondsInTurn
	{
		[Token(Token = "0x60003D7")]
		[Address(RVA = "0x8CDEA0", Offset = "0x8CDEA0", VA = "0x8CDEA0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170000BB")]
	public bool IsCompletedByAll
	{
		[Token(Token = "0x60003D8")]
		[Address(RVA = "0x8CDEC8", Offset = "0x8CDEC8", VA = "0x8CDEC8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000BC")]
	public bool IsFinishedByMe
	{
		[Token(Token = "0x60003D9")]
		[Address(RVA = "0x8CDF80", Offset = "0x8CDF80", VA = "0x8CDF80")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000BD")]
	public bool IsOver
	{
		[Token(Token = "0x60003DA")]
		[Address(RVA = "0x8CE004", Offset = "0x8CE004", VA = "0x8CE004")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60003DB")]
	[Address(RVA = "0x8CE034", Offset = "0x8CE034", VA = "0x8CE034")]
	private void Start()
	{
	}

	[Token(Token = "0x60003DC")]
	[Address(RVA = "0x8CE0D8", Offset = "0x8CE0D8", VA = "0x8CE0D8")]
	private void Update()
	{
	}

	[Token(Token = "0x60003DD")]
	[Address(RVA = "0x8CE1D8", Offset = "0x8CE1D8", VA = "0x8CE1D8")]
	public void BeginTurn()
	{
	}

	[Token(Token = "0x60003DE")]
	[Address(RVA = "0x8CE1F4", Offset = "0x8CE1F4", VA = "0x8CE1F4")]
	public void SendMove(object move, bool finished)
	{
	}

	[Token(Token = "0x60003DF")]
	[Address(RVA = "0x8CE960", Offset = "0x8CE960", VA = "0x8CE960")]
	public bool GetPlayerFinishedTurn(PhotonPlayer player)
	{
		return default(bool);
	}

	[Token(Token = "0x60003E0")]
	[Address(RVA = "0x8CE5D8", Offset = "0x8CE5D8", VA = "0x8CE5D8")]
	public void OnEvent(byte eventCode, object content, int senderId)
	{
	}

	[Token(Token = "0x60003E1")]
	[Address(RVA = "0x8CE9CC", Offset = "0x8CE9CC", VA = "0x8CE9CC", Slot = "52")]
	public override void OnPhotonCustomRoomPropertiesChanged(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
	{
	}

	[Token(Token = "0x60003E2")]
	[Address(RVA = "0x8CEAF0", Offset = "0x8CEAF0", VA = "0x8CEAF0")]
	public PunTurnManager()
	{
	}
}
[Token(Token = "0x2000095")]
public interface IPunTurnManagerCallbacks
{
	[Token(Token = "0x60003E3")]
	void OnTurnBegins(int turn);

	[Token(Token = "0x60003E4")]
	void OnTurnCompleted(int turn);

	[Token(Token = "0x60003E5")]
	void OnPlayerMove(PhotonPlayer player, int turn, object move);

	[Token(Token = "0x60003E6")]
	void OnPlayerFinished(PhotonPlayer player, int turn, object move);

	[Token(Token = "0x60003E7")]
	void OnTurnTimeEnds(int turn);
}
[Token(Token = "0x2000096")]
public static class TurnExtensions
{
	[Token(Token = "0x40003D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly string TurnPropKey;

	[Token(Token = "0x40003D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static readonly string TurnStartPropKey;

	[Token(Token = "0x40003DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static readonly string FinishedTurnPropKey;

	[Token(Token = "0x60003E8")]
	[Address(RVA = "0x8CDB6C", Offset = "0x8CDB6C", VA = "0x8CDB6C")]
	public static void SetTurn(this Room room, int turn, bool setStartTime = false)
	{
	}

	[Token(Token = "0x60003E9")]
	[Address(RVA = "0x8CD9C0", Offset = "0x8CD9C0", VA = "0x8CD9C0")]
	public static int GetTurn(this RoomInfo room)
	{
		return default(int);
	}

	[Token(Token = "0x60003EA")]
	[Address(RVA = "0x8CDD94", Offset = "0x8CDD94", VA = "0x8CDD94")]
	public static int GetTurnStart(this RoomInfo room)
	{
		return default(int);
	}

	[Token(Token = "0x60003EB")]
	[Address(RVA = "0x8CEB74", Offset = "0x8CEB74", VA = "0x8CEB74")]
	public static int GetFinishedTurn(this PhotonPlayer player)
	{
		return default(int);
	}

	[Token(Token = "0x60003EC")]
	[Address(RVA = "0x8CE478", Offset = "0x8CE478", VA = "0x8CE478")]
	public static void SetFinishedTurn(this PhotonPlayer player, int turn)
	{
	}
}
[Token(Token = "0x2000097")]
public class QuitOnEscapeOrBack : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x60003EE")]
	[Address(RVA = "0x8CED90", Offset = "0x8CED90", VA = "0x8CED90")]
	private void Update()
	{
	}

	[Token(Token = "0x60003EF")]
	[Address(RVA = "0x8CEDB8", Offset = "0x8CEDB8", VA = "0x8CEDB8")]
	public QuitOnEscapeOrBack()
	{
	}
}
[Token(Token = "0x2000098")]
public class ShowStatusWhenConnecting : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40003DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GUISkin Skin;

	[Token(Token = "0x60003F0")]
	[Address(RVA = "0x8CEDC0", Offset = "0x8CEDC0", VA = "0x8CEDC0")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60003F1")]
	[Address(RVA = "0x8CF0D0", Offset = "0x8CF0D0", VA = "0x8CF0D0")]
	private string GetConnectingDots()
	{
		return null;
	}

	[Token(Token = "0x60003F2")]
	[Address(RVA = "0x8CF1C4", Offset = "0x8CF1C4", VA = "0x8CF1C4")]
	public ShowStatusWhenConnecting()
	{
	}
}
[Token(Token = "0x2000099")]
[RequireComponent(typeof(PhotonView))]
public class SmoothSyncMovement : Photon.MonoBehaviour, IPunObservable
{
	[Token(Token = "0x40003DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float SmoothingDelay;

	[Token(Token = "0x40003DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 correctPlayerPos;

	[Token(Token = "0x40003DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Quaternion correctPlayerRot;

	[Token(Token = "0x60003F3")]
	[Address(RVA = "0x8CF1CC", Offset = "0x8CF1CC", VA = "0x8CF1CC")]
	public void Awake()
	{
	}

	[Token(Token = "0x60003F4")]
	[Address(RVA = "0x8CF3D0", Offset = "0x8CF3D0", VA = "0x8CF3D0", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60003F5")]
	[Address(RVA = "0x8CF538", Offset = "0x8CF538", VA = "0x8CF538")]
	public void Update()
	{
	}

	[Token(Token = "0x60003F6")]
	[Address(RVA = "0x8CF6D0", Offset = "0x8CF6D0", VA = "0x8CF6D0")]
	public SmoothSyncMovement()
	{
	}
}
[Token(Token = "0x200009A")]
public class SupportLogger : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40003DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool LogTrafficStats;

	[Token(Token = "0x60003F7")]
	[Address(RVA = "0x8CF770", Offset = "0x8CF770", VA = "0x8CF770")]
	public void Start()
	{
	}

	[Token(Token = "0x60003F8")]
	[Address(RVA = "0x8CF880", Offset = "0x8CF880", VA = "0x8CF880")]
	public SupportLogger()
	{
	}
}
[Token(Token = "0x200009B")]
public class SupportLogging : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40003E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool LogTrafficStats;

	[Token(Token = "0x60003F9")]
	[Address(RVA = "0x8CF890", Offset = "0x8CF890", VA = "0x8CF890")]
	public void Start()
	{
	}

	[Token(Token = "0x60003FA")]
	[Address(RVA = "0x8CF8F8", Offset = "0x8CF8F8", VA = "0x8CF8F8")]
	protected void OnApplicationPause(bool pause)
	{
	}

	[Token(Token = "0x60003FB")]
	[Address(RVA = "0x8CFA04", Offset = "0x8CFA04", VA = "0x8CFA04")]
	public void OnApplicationQuit()
	{
	}

	[Token(Token = "0x60003FC")]
	[Address(RVA = "0x8CFA0C", Offset = "0x8CFA0C", VA = "0x8CFA0C")]
	public void LogStats()
	{
	}

	[Token(Token = "0x60003FD")]
	[Address(RVA = "0x8CFAD4", Offset = "0x8CFAD4", VA = "0x8CFAD4")]
	private void LogBasics()
	{
	}

	[Token(Token = "0x60003FE")]
	[Address(RVA = "0x8CFD4C", Offset = "0x8CFD4C", VA = "0x8CFD4C")]
	public void OnConnectedToPhoton()
	{
	}

	[Token(Token = "0x60003FF")]
	[Address(RVA = "0x8CFE00", Offset = "0x8CFE00", VA = "0x8CFE00")]
	public void OnFailedToConnectToPhoton(DisconnectCause cause)
	{
	}

	[Token(Token = "0x6000400")]
	[Address(RVA = "0x8CFEF0", Offset = "0x8CFEF0", VA = "0x8CFEF0")]
	public void OnJoinedLobby()
	{
	}

	[Token(Token = "0x6000401")]
	[Address(RVA = "0x8CFFD0", Offset = "0x8CFFD0", VA = "0x8CFFD0")]
	public void OnJoinedRoom()
	{
	}

	[Token(Token = "0x6000402")]
	[Address(RVA = "0x8D0248", Offset = "0x8D0248", VA = "0x8D0248")]
	public void OnCreatedRoom()
	{
	}

	[Token(Token = "0x6000403")]
	[Address(RVA = "0x8D04C0", Offset = "0x8D04C0", VA = "0x8D04C0")]
	public void OnLeftRoom()
	{
	}

	[Token(Token = "0x6000404")]
	[Address(RVA = "0x8D0528", Offset = "0x8D0528", VA = "0x8D0528")]
	public void OnDisconnectedFromPhoton()
	{
	}

	[Token(Token = "0x6000405")]
	[Address(RVA = "0x8D0590", Offset = "0x8D0590", VA = "0x8D0590")]
	public SupportLogging()
	{
	}
}
[Token(Token = "0x200009C")]
[DisallowMultipleComponent]
public class PhotonVoiceHandler : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40003E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int updateInterval;

	[Token(Token = "0x40003E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int nextSendTickCount;

	[Token(Token = "0x40003E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool sendThreadShouldRun;

	[Token(Token = "0x40003E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Stopwatch timerToStopConnectionInBackground;

	[Token(Token = "0x6000406")]
	[Address(RVA = "0x8D0598", Offset = "0x8D0598", VA = "0x8D0598")]
	private static void StartFallbackSendAckThread()
	{
	}

	[Token(Token = "0x6000407")]
	[Address(RVA = "0x8D068C", Offset = "0x8D068C", VA = "0x8D068C")]
	private static void StopFallbackSendAckThread()
	{
	}

	[Token(Token = "0x6000408")]
	[Address(RVA = "0x8D06D4", Offset = "0x8D06D4", VA = "0x8D06D4")]
	private static bool FallbackSendAckThread()
	{
		return default(bool);
	}

	[Token(Token = "0x6000409")]
	[Address(RVA = "0x8D09AC", Offset = "0x8D09AC", VA = "0x8D09AC")]
	[RuntimeInitializeOnLoadMethod]
	private static void RuntimeInitializeOnLoad()
	{
	}

	[Token(Token = "0x600040A")]
	[Address(RVA = "0x8D0B10", Offset = "0x8D0B10", VA = "0x8D0B10")]
	private void Awake()
	{
	}

	[Token(Token = "0x600040B")]
	[Address(RVA = "0x8D0EC0", Offset = "0x8D0EC0", VA = "0x8D0EC0")]
	protected void Update()
	{
	}

	[Token(Token = "0x600040C")]
	[Address(RVA = "0x8D1108", Offset = "0x8D1108", VA = "0x8D1108")]
	protected void OnApplicationPause(bool pause)
	{
	}

	[Token(Token = "0x600040D")]
	[Address(RVA = "0x8D1210", Offset = "0x8D1210", VA = "0x8D1210")]
	protected void OnDestroy()
	{
	}

	[Token(Token = "0x600040E")]
	[Address(RVA = "0x8D1258", Offset = "0x8D1258", VA = "0x8D1258")]
	protected void OnApplicationQuit()
	{
	}

	[Token(Token = "0x600040F")]
	[Address(RVA = "0x8D12D8", Offset = "0x8D12D8", VA = "0x8D12D8")]
	public PhotonVoiceHandler()
	{
	}
}
[Token(Token = "0x200009D")]
[DisallowMultipleComponent]
public class PhotonVoiceNetwork : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40003E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static PhotonVoiceNetwork _instance;

	[Token(Token = "0x40003E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static object instanceLock;

	[Token(Token = "0x40003E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static bool destroyed;

	[Token(Token = "0x40003E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public static float BackgroundTimeout;

	[Token(Token = "0x40003E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	internal UnityVoiceFrontend client;

	[Token(Token = "0x40003EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string unityMicrophoneDevice;

	[Token(Token = "0x40003EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int photonMicrophoneDeviceID;

	[Token(Token = "0x40003ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AudioInEnumerator photonMicEnumerator;

	[Token(Token = "0x170000BE")]
	internal static PhotonVoiceNetwork instance
	{
		[Token(Token = "0x6000410")]
		[Address(RVA = "0x8D0BEC", Offset = "0x8D0BEC", VA = "0x8D0BEC")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000411")]
		[Address(RVA = "0x8D12E0", Offset = "0x8D12E0", VA = "0x8D12E0")]
		set
		{
		}
	}

	[Token(Token = "0x170000BF")]
	public static Func<PhotonVoiceRecorder, IAudioSource> AudioSourceFactory
	{
		[Token(Token = "0x6000416")]
		[Address(RVA = "0x8D1A20", Offset = "0x8D1A20", VA = "0x8D1A20")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000417")]
		[Address(RVA = "0x8D1A78", Offset = "0x8D1A78", VA = "0x8D1A78")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000C0")]
	public static UnityVoiceFrontend Client
	{
		[Token(Token = "0x600041A")]
		[Address(RVA = "0x8D08EC", Offset = "0x8D08EC", VA = "0x8D08EC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000C1")]
	public static VoiceClient VoiceClient
	{
		[Token(Token = "0x600041B")]
		[Address(RVA = "0x8D1EA4", Offset = "0x8D1EA4", VA = "0x8D1EA4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000C2")]
	public static ExitGames.Client.Photon.LoadBalancing.ClientState ClientState
	{
		[Token(Token = "0x600041C")]
		[Address(RVA = "0x8D1F08", Offset = "0x8D1F08", VA = "0x8D1F08")]
		get
		{
			return default(ExitGames.Client.Photon.LoadBalancing.ClientState);
		}
	}

	[Token(Token = "0x170000C3")]
	public static string CurrentRoomName
	{
		[Token(Token = "0x600041D")]
		[Address(RVA = "0x8D1F6C", Offset = "0x8D1F6C", VA = "0x8D1F6C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000C4")]
	public static AudioInEnumerator PhotonMicrophoneEnumerator
	{
		[Token(Token = "0x600041E")]
		[Address(RVA = "0x8D201C", Offset = "0x8D201C", VA = "0x8D201C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000C5")]
	public static string MicrophoneDevice
	{
		[Token(Token = "0x600041F")]
		[Address(RVA = "0x8D2078", Offset = "0x8D2078", VA = "0x8D2078")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000420")]
		[Address(RVA = "0x8D20D4", Offset = "0x8D20D4", VA = "0x8D20D4")]
		set
		{
		}
	}

	[Token(Token = "0x170000C6")]
	public static int PhotonMicrophoneDeviceID
	{
		[Token(Token = "0x6000421")]
		[Address(RVA = "0x8D26B8", Offset = "0x8D26B8", VA = "0x8D26B8")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000422")]
		[Address(RVA = "0x8D2714", Offset = "0x8D2714", VA = "0x8D2714")]
		set
		{
		}
	}

	[Token(Token = "0x6000412")]
	[Address(RVA = "0x8D15C0", Offset = "0x8D15C0", VA = "0x8D15C0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000413")]
	[Address(RVA = "0x8D16A4", Offset = "0x8D16A4", VA = "0x8D16A4")]
	private PhotonVoiceNetwork()
	{
	}

	[Token(Token = "0x6000414")]
	[Address(RVA = "0x8D1948", Offset = "0x8D1948", VA = "0x8D1948")]
	[RuntimeInitializeOnLoadMethod]
	public static void RuntimeInitializeOnLoad()
	{
	}

	[Token(Token = "0x6000415")]
	[Address(RVA = "0x8D19CC", Offset = "0x8D19CC", VA = "0x8D19CC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000418")]
	[Address(RVA = "0x8D1AD4", Offset = "0x8D1AD4", VA = "0x8D1AD4")]
	public static bool Connect()
	{
		return default(bool);
	}

	[Token(Token = "0x6000419")]
	[Address(RVA = "0x8D0948", Offset = "0x8D0948", VA = "0x8D0948")]
	public static void Disconnect()
	{
	}

	[Token(Token = "0x6000423")]
	[Address(RVA = "0x8D2B04", Offset = "0x8D2B04", VA = "0x8D2B04")]
	protected void OnEnable()
	{
	}

	[Token(Token = "0x6000424")]
	[Address(RVA = "0x8D2B94", Offset = "0x8D2B94", VA = "0x8D2B94")]
	protected void OnApplicationQuit()
	{
	}

	[Token(Token = "0x6000425")]
	[Address(RVA = "0x8D2C58", Offset = "0x8D2C58", VA = "0x8D2C58")]
	protected void Update()
	{
	}

	[Token(Token = "0x6000426")]
	[Address(RVA = "0x8D2D50", Offset = "0x8D2D50", VA = "0x8D2D50")]
	private void OnJoinedRoom()
	{
	}

	[Token(Token = "0x6000427")]
	[Address(RVA = "0x8D2F60", Offset = "0x8D2F60", VA = "0x8D2F60")]
	private void OnLeftRoom()
	{
	}

	[Token(Token = "0x6000428")]
	[Address(RVA = "0x8D30D8", Offset = "0x8D30D8", VA = "0x8D30D8")]
	private void OnDisconnectedFromPhoton()
	{
	}

	[Token(Token = "0x6000429")]
	[Address(RVA = "0x8D3250", Offset = "0x8D3250", VA = "0x8D3250")]
	internal static void LinkSpeakerToRemoteVoice(PhotonVoiceSpeaker speaker)
	{
	}

	[Token(Token = "0x600042A")]
	[Address(RVA = "0x8D3670", Offset = "0x8D3670", VA = "0x8D3670")]
	internal static void UnlinkSpeakerFromRemoteVoice(PhotonVoiceSpeaker speaker)
	{
	}
}
[Token(Token = "0x200009E")]
public class UnityVoiceFrontend : LoadBalancingFrontend
{
	[Token(Token = "0x40003EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private Dictionary<KeyValuePair<int, byte>, PhotonVoiceSpeaker> voiceSpeakers;

	[Token(Token = "0x40003F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private bool reconnect;

	[Token(Token = "0x170000C7")]
	public Action<int, byte, VoiceInfo> OnRemoteVoiceInfoAction
	{
		[Token(Token = "0x600042C")]
		[Address(RVA = "0x8D3C70", Offset = "0x8D3C70", VA = "0x8D3C70")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600042D")]
		[Address(RVA = "0x8D3C78", Offset = "0x8D3C78", VA = "0x8D3C78")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000C8")]
	public Action<int, byte> OnRemoteVoiceRemoveAction
	{
		[Token(Token = "0x600042E")]
		[Address(RVA = "0x8D3C80", Offset = "0x8D3C80", VA = "0x8D3C80")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600042F")]
		[Address(RVA = "0x8D3C88", Offset = "0x8D3C88", VA = "0x8D3C88")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000C9")]
	public Action<int, byte, float[]> OnAudioFrameAction
	{
		[Token(Token = "0x6000430")]
		[Address(RVA = "0x8D3C90", Offset = "0x8D3C90", VA = "0x8D3C90")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000431")]
		[Address(RVA = "0x8D3C98", Offset = "0x8D3C98", VA = "0x8D3C98")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000CA")]
	public new Action<ExitGames.Client.Photon.LoadBalancing.ClientState> OnStateChangeAction
	{
		[Token(Token = "0x6000432")]
		[Address(RVA = "0x8D3CA0", Offset = "0x8D3CA0", VA = "0x8D3CA0")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000433")]
		[Address(RVA = "0x8D3CA8", Offset = "0x8D3CA8", VA = "0x8D3CA8")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170000CB")]
	public new Action<OperationResponse> OnOpResponseAction
	{
		[Token(Token = "0x6000434")]
		[Address(RVA = "0x8D3CB0", Offset = "0x8D3CB0", VA = "0x8D3CB0")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000435")]
		[Address(RVA = "0x8D3CB8", Offset = "0x8D3CB8", VA = "0x8D3CB8")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x6000436")]
	[Address(RVA = "0x8D1748", Offset = "0x8D1748", VA = "0x8D1748")]
	internal UnityVoiceFrontend(ConnectionProtocol connetProtocol)
	{
	}

	[Token(Token = "0x6000437")]
	[Address(RVA = "0x8D2EE4", Offset = "0x8D2EE4", VA = "0x8D2EE4")]
	public void Reconnect()
	{
	}

	[Token(Token = "0x6000438")]
	[Address(RVA = "0x8D3CC0", Offset = "0x8D3CC0", VA = "0x8D3CC0", Slot = "14")]
	public override void DebugReturn(DebugLevel level, string message)
	{
	}

	[Token(Token = "0x6000439")]
	[Address(RVA = "0x8D3E30", Offset = "0x8D3E30", VA = "0x8D3E30")]
	public void OnOpResponse(OperationResponse resp)
	{
	}

	[Token(Token = "0x600043A")]
	[Address(RVA = "0x8D3E4C", Offset = "0x8D3E4C", VA = "0x8D3E4C")]
	private void linkVoice(int playerId, byte voiceId, VoiceInfo voiceInfo, PhotonVoiceSpeaker speaker)
	{
	}

	[Token(Token = "0x600043B")]
	[Address(RVA = "0x8D4280", Offset = "0x8D4280", VA = "0x8D4280")]
	public void OnRemoteVoiceInfo(int channelId, int playerId, byte voiceId, VoiceInfo voiceInfo, ref RemoteVoiceOptions options)
	{
	}

	[Token(Token = "0x600043C")]
	[Address(RVA = "0x8D32B8", Offset = "0x8D32B8", VA = "0x8D32B8")]
	public void LinkSpeakerToRemoteVoice(PhotonVoiceSpeaker speaker)
	{
	}

	[Token(Token = "0x600043D")]
	[Address(RVA = "0x8D46E4", Offset = "0x8D46E4", VA = "0x8D46E4")]
	public void OnRemoteVoiceRemove(int playerId, byte voiceId)
	{
	}

	[Token(Token = "0x600043E")]
	[Address(RVA = "0x8D496C", Offset = "0x8D496C", VA = "0x8D496C")]
	private bool unlinkSpeaker(KeyValuePair<int, byte> key)
	{
		return default(bool);
	}

	[Token(Token = "0x600043F")]
	[Address(RVA = "0x8D3700", Offset = "0x8D3700", VA = "0x8D3700")]
	public void UnlinkSpeakerFromRemoteVoice(PhotonVoiceSpeaker speaker)
	{
	}

	[Token(Token = "0x6000440")]
	[Address(RVA = "0x8D4A18", Offset = "0x8D4A18", VA = "0x8D4A18")]
	public void OnAudioFrame(int playerId, byte voiceId, float[] frame)
	{
	}

	[Token(Token = "0x6000441")]
	[Address(RVA = "0x8D4D20", Offset = "0x8D4D20", VA = "0x8D4D20")]
	public void OnStateChange(ExitGames.Client.Photon.LoadBalancing.ClientState state)
	{
	}
}
[Token(Token = "0x20000A0")]
[DisallowMultipleComponent]
[AddComponentMenu("Photon Voice/Photon Voice Recorder")]
[RequireComponent(typeof(PhotonVoiceSpeaker))]
public class PhotonVoiceRecorder : Photon.MonoBehaviour
{
	[Token(Token = "0x20000A1")]
	public enum AudioSource
	{
		[Token(Token = "0x4000403")]
		Microphone,
		[Token(Token = "0x4000404")]
		AudioClip,
		[Token(Token = "0x4000405")]
		Factory
	}

	[Token(Token = "0x20000A2")]
	public enum MicAudioSourceType
	{
		[Token(Token = "0x4000407")]
		Settings,
		[Token(Token = "0x4000408")]
		Unity,
		[Token(Token = "0x4000409")]
		Photon
	}

	[Token(Token = "0x20000A3")]
	public enum SampleTypeConv
	{
		[Token(Token = "0x400040B")]
		None,
		[Token(Token = "0x400040C")]
		Short,
		[Token(Token = "0x400040D")]
		ShortAuto
	}

	[Token(Token = "0x20000A4")]
	public class PhotonVoiceCreatedParams
	{
		[Token(Token = "0x170000D7")]
		public LocalVoice Voice
		{
			[Token(Token = "0x6000461")]
			[Address(RVA = "0x8D71D0", Offset = "0x8D71D0", VA = "0x8D71D0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000462")]
			[Address(RVA = "0x8D71D8", Offset = "0x8D71D8", VA = "0x8D71D8")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x170000D8")]
		public IAudioSource AudioSource
		{
			[Token(Token = "0x6000463")]
			[Address(RVA = "0x8D71E0", Offset = "0x8D71E0", VA = "0x8D71E0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000464")]
			[Address(RVA = "0x8D71E8", Offset = "0x8D71E8", VA = "0x8D71E8")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x6000465")]
		[Address(RVA = "0x8D6B88", Offset = "0x8D6B88", VA = "0x8D6B88")]
		public PhotonVoiceCreatedParams()
		{
		}
	}

	[Token(Token = "0x40003F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private LocalVoice voice;

	[Token(Token = "0x40003F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string microphoneDevice;

	[Token(Token = "0x40003FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int photonMicrophoneDeviceID;

	[Token(Token = "0x40003FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private IAudioSource audioSource;

	[Token(Token = "0x40003FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioSource Source;

	[Token(Token = "0x40003FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public MicAudioSourceType MicrophoneType;

	[Token(Token = "0x40003FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public SampleTypeConv TypeConvert;

	[Token(Token = "0x40003FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool forceShort;

	[Token(Token = "0x4000400")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AudioClip AudioClip;

	[Token(Token = "0x4000401")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool LoopAudioClip;

	[Token(Token = "0x170000CC")]
	protected ILocalVoiceAudio voiceAudio
	{
		[Token(Token = "0x6000445")]
		[Address(RVA = "0x8D5008", Offset = "0x8D5008", VA = "0x8D5008")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000CD")]
	public ExitGames.Client.Photon.Voice.AudioUtil.IVoiceDetector VoiceDetector
	{
		[Token(Token = "0x6000446")]
		[Address(RVA = "0x8D5074", Offset = "0x8D5074", VA = "0x8D5074")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000CE")]
	public string MicrophoneDevice
	{
		[Token(Token = "0x6000447")]
		[Address(RVA = "0x8D5148", Offset = "0x8D5148", VA = "0x8D5148")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000448")]
		[Address(RVA = "0x8D25D4", Offset = "0x8D25D4", VA = "0x8D25D4")]
		set
		{
		}
	}

	[Token(Token = "0x170000CF")]
	public int PhotonMicrophoneDeviceID
	{
		[Token(Token = "0x6000449")]
		[Address(RVA = "0x8D566C", Offset = "0x8D566C", VA = "0x8D566C")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600044A")]
		[Address(RVA = "0x8D29EC", Offset = "0x8D29EC", VA = "0x8D29EC")]
		set
		{
		}
	}

	[Token(Token = "0x170000D0")]
	public byte AudioGroup
	{
		[Token(Token = "0x600044C")]
		[Address(RVA = "0x8D5E58", Offset = "0x8D5E58", VA = "0x8D5E58")]
		get
		{
			return default(byte);
		}
		[Token(Token = "0x600044D")]
		[Address(RVA = "0x8D5E74", Offset = "0x8D5E74", VA = "0x8D5E74")]
		set
		{
		}
	}

	[Token(Token = "0x170000D1")]
	public bool IsTransmitting
	{
		[Token(Token = "0x600044E")]
		[Address(RVA = "0x8D5E90", Offset = "0x8D5E90", VA = "0x8D5E90")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000D2")]
	public ExitGames.Client.Photon.Voice.AudioUtil.ILevelMeter LevelMeter
	{
		[Token(Token = "0x600044F")]
		[Address(RVA = "0x8D5EAC", Offset = "0x8D5EAC", VA = "0x8D5EAC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000D3")]
	public bool Transmit
	{
		[Token(Token = "0x6000456")]
		[Address(RVA = "0x8D6C88", Offset = "0x8D6C88", VA = "0x8D6C88")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000457")]
		[Address(RVA = "0x8D6CA4", Offset = "0x8D6CA4", VA = "0x8D6CA4")]
		set
		{
		}
	}

	[Token(Token = "0x170000D4")]
	public bool Detect
	{
		[Token(Token = "0x6000458")]
		[Address(RVA = "0x8D6CC4", Offset = "0x8D6CC4", VA = "0x8D6CC4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000459")]
		[Address(RVA = "0x8D6DE0", Offset = "0x8D6DE0", VA = "0x8D6DE0")]
		set
		{
		}
	}

	[Token(Token = "0x170000D5")]
	public bool DebugEchoMode
	{
		[Token(Token = "0x600045A")]
		[Address(RVA = "0x8D5674", Offset = "0x8D5674", VA = "0x8D5674")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600045B")]
		[Address(RVA = "0x8D5690", Offset = "0x8D5690", VA = "0x8D5690")]
		set
		{
		}
	}

	[Token(Token = "0x170000D6")]
	public bool VoiceDetectorCalibrating
	{
		[Token(Token = "0x600045D")]
		[Address(RVA = "0x8D6FE4", Offset = "0x8D6FE4", VA = "0x8D6FE4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600044B")]
	[Address(RVA = "0x8D5150", Offset = "0x8D5150", VA = "0x8D5150")]
	public void UpdateAudioSource()
	{
	}

	[Token(Token = "0x6000450")]
	[Address(RVA = "0x8D5F58", Offset = "0x8D5F58", VA = "0x8D5F58")]
	private void Start()
	{
	}

	[Token(Token = "0x6000451")]
	[Address(RVA = "0x8D56B0", Offset = "0x8D56B0", VA = "0x8D56B0")]
	private LocalVoice createLocalVoiceAudioAndSource()
	{
		return null;
	}

	[Token(Token = "0x6000452")]
	[Address(RVA = "0x8D62AC", Offset = "0x8D62AC", VA = "0x8D62AC", Slot = "4")]
	protected virtual LocalVoice createLocalVoiceAudio(VoiceInfo voiceInfo, IAudioSource source)
	{
		return null;
	}

	[Token(Token = "0x6000453")]
	[Address(RVA = "0x8D6ADC", Offset = "0x8D6ADC", VA = "0x8D6ADC", Slot = "5")]
	protected virtual void sendPhotonVoiceCreatedMessage()
	{
	}

	[Token(Token = "0x6000454")]
	[Address(RVA = "0x8D6B90", Offset = "0x8D6B90", VA = "0x8D6B90")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000455")]
	[Address(RVA = "0x8D6C84", Offset = "0x8D6C84", VA = "0x8D6C84")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600045C")]
	[Address(RVA = "0x8D6F08", Offset = "0x8D6F08", VA = "0x8D6F08")]
	public void VoiceDetectorCalibrate(int durationMs)
	{
	}

	[Token(Token = "0x600045E")]
	private string tostr<T>(T[] x, int lim = 10)
	{
		return null;
	}

	[Token(Token = "0x600045F")]
	[Address(RVA = "0x8D7090", Offset = "0x8D7090", VA = "0x8D7090")]
	public string ToStringFull()
	{
		return null;
	}

	[Token(Token = "0x6000460")]
	[Address(RVA = "0x8D7158", Offset = "0x8D7158", VA = "0x8D7158")]
	public PhotonVoiceRecorder()
	{
	}
}
[Token(Token = "0x20000A7")]
[DisallowMultipleComponent]
public class PhotonVoiceSettings : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x20000A8")]
	public enum MicAudioSourceType
	{
		[Token(Token = "0x4000423")]
		Unity,
		[Token(Token = "0x4000424")]
		Photon
	}

	[Token(Token = "0x4000412")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool WorkInOfflineMode;

	[Token(Token = "0x4000413")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool AutoConnect;

	[Token(Token = "0x4000414")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool AutoDisconnect;

	[Token(Token = "0x4000415")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool AutoTransmit;

	[Token(Token = "0x4000416")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public SamplingRate SamplingRate;

	[Token(Token = "0x4000417")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OpusCodec.FrameDuration FrameDuration;

	[Token(Token = "0x4000418")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int Bitrate;

	[Token(Token = "0x4000419")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool VoiceDetection;

	[Token(Token = "0x400041A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float VoiceDetectionThreshold;

	[Token(Token = "0x400041B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int PlayDelayMs;

	[Token(Token = "0x400041C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public MicAudioSourceType MicrophoneType;

	[Token(Token = "0x400041D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int DebugLostPercent;

	[Token(Token = "0x400041E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool DebugInfo;

	[Token(Token = "0x400041F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	public bool Encrypt;

	[Token(Token = "0x4000420")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static PhotonVoiceSettings instance;

	[Token(Token = "0x4000421")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static object instanceLock;

	[Token(Token = "0x170000D9")]
	public static PhotonVoiceSettings Instance
	{
		[Token(Token = "0x600046A")]
		[Address(RVA = "0x8D2370", Offset = "0x8D2370", VA = "0x8D2370")]
		get
		{
			return null;
		}
		[Token(Token = "0x600046B")]
		[Address(RVA = "0x8D72A0", Offset = "0x8D72A0", VA = "0x8D72A0")]
		private set
		{
		}
	}

	[Token(Token = "0x600046C")]
	[Address(RVA = "0x8D7580", Offset = "0x8D7580", VA = "0x8D7580")]
	private void Awake()
	{
	}

	[Token(Token = "0x600046D")]
	[Address(RVA = "0x8D75D4", Offset = "0x8D75D4", VA = "0x8D75D4")]
	public PhotonVoiceSettings()
	{
	}
}
[Token(Token = "0x20000A9")]
[RequireComponent(typeof(AudioSource))]
[DisallowMultipleComponent]
[AddComponentMenu("Photon Voice/Photon Voice Speaker")]
public class PhotonVoiceSpeaker : Photon.MonoBehaviour
{
	[Token(Token = "0x4000425")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private IAudioOut player;

	[Token(Token = "0x4000426")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool started;

	[Token(Token = "0x170000DA")]
	public long LastRecvTime
	{
		[Token(Token = "0x600046F")]
		[Address(RVA = "0x8D7684", Offset = "0x8D7684", VA = "0x8D7684")]
		[CompilerGenerated]
		get
		{
			return default(long);
		}
		[Token(Token = "0x6000470")]
		[Address(RVA = "0x8D768C", Offset = "0x8D768C", VA = "0x8D768C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000DB")]
	public bool IsPlaying
	{
		[Token(Token = "0x6000471")]
		[Address(RVA = "0x8D7694", Offset = "0x8D7694", VA = "0x8D7694")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000DC")]
	public int CurrentBufferLag
	{
		[Token(Token = "0x6000472")]
		[Address(RVA = "0x8D7734", Offset = "0x8D7734", VA = "0x8D7734")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170000DD")]
	public bool IsVoiceLinked
	{
		[Token(Token = "0x6000473")]
		[Address(RVA = "0x8D77D8", Offset = "0x8D77D8", VA = "0x8D77D8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000474")]
	[Address(RVA = "0x8D77F8", Offset = "0x8D77F8", VA = "0x8D77F8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000475")]
	[Address(RVA = "0x8D78DC", Offset = "0x8D78DC", VA = "0x8D78DC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000476")]
	[Address(RVA = "0x8D41A0", Offset = "0x8D41A0", VA = "0x8D41A0")]
	internal void OnVoiceLinked(int frequency, int channels, int frameSamplesPerChannel, int playDelayMs)
	{
	}

	[Token(Token = "0x6000477")]
	[Address(RVA = "0x8D4A14", Offset = "0x8D4A14", VA = "0x8D4A14")]
	internal void OnVoiceUnlinked()
	{
	}

	[Token(Token = "0x6000478")]
	[Address(RVA = "0x8D79DC", Offset = "0x8D79DC", VA = "0x8D79DC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000479")]
	[Address(RVA = "0x8D7A80", Offset = "0x8D7A80", VA = "0x8D7A80")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600047A")]
	[Address(RVA = "0x8D7ADC", Offset = "0x8D7ADC", VA = "0x8D7ADC")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x600047B")]
	[Address(RVA = "0x8D7930", Offset = "0x8D7930", VA = "0x8D7930")]
	private void Cleanup()
	{
	}

	[Token(Token = "0x600047C")]
	[Address(RVA = "0x8D4C24", Offset = "0x8D4C24", VA = "0x8D4C24")]
	internal void OnAudioFrame(float[] frame)
	{
	}

	[Token(Token = "0x600047D")]
	[Address(RVA = "0x8D7AE0", Offset = "0x8D7AE0", VA = "0x8D7AE0")]
	public PhotonVoiceSpeaker()
	{
	}
}
[Token(Token = "0x20000AA")]
public class AnimationListener : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x600047E")]
	[Address(RVA = "0x8D7AE8", Offset = "0x8D7AE8", VA = "0x8D7AE8")]
	public void Radish_hello()
	{
	}

	[Token(Token = "0x600047F")]
	[Address(RVA = "0x8D7B98", Offset = "0x8D7B98", VA = "0x8D7B98")]
	public void cat()
	{
	}

	[Token(Token = "0x6000480")]
	[Address(RVA = "0x8D7C48", Offset = "0x8D7C48", VA = "0x8D7C48")]
	public void CatScratch()
	{
	}

	[Token(Token = "0x6000481")]
	[Address(RVA = "0x8D7CF8", Offset = "0x8D7CF8", VA = "0x8D7CF8")]
	public void stove()
	{
	}

	[Token(Token = "0x6000482")]
	[Address(RVA = "0x8D7DA8", Offset = "0x8D7DA8", VA = "0x8D7DA8")]
	public void Openstove()
	{
	}

	[Token(Token = "0x6000483")]
	[Address(RVA = "0x8D7E58", Offset = "0x8D7E58", VA = "0x8D7E58")]
	public void Whooshstove()
	{
	}

	[Token(Token = "0x6000484")]
	[Address(RVA = "0x8D7F08", Offset = "0x8D7F08", VA = "0x8D7F08")]
	public void Woodstove()
	{
	}

	[Token(Token = "0x6000485")]
	[Address(RVA = "0x8D7FB8", Offset = "0x8D7FB8", VA = "0x8D7FB8")]
	public void patbelly()
	{
	}

	[Token(Token = "0x6000486")]
	[Address(RVA = "0x8D8068", Offset = "0x8D8068", VA = "0x8D8068")]
	public void walk()
	{
	}

	[Token(Token = "0x6000487")]
	[Address(RVA = "0x8D8118", Offset = "0x8D8118", VA = "0x8D8118")]
	public void arm()
	{
	}

	[Token(Token = "0x6000488")]
	[Address(RVA = "0x8D8230", Offset = "0x8D8230", VA = "0x8D8230")]
	public void sit()
	{
	}

	[Token(Token = "0x6000489")]
	[Address(RVA = "0x8D8348", Offset = "0x8D8348", VA = "0x8D8348")]
	public void rise()
	{
	}

	[Token(Token = "0x600048A")]
	[Address(RVA = "0x8D8460", Offset = "0x8D8460", VA = "0x8D8460")]
	public void whoosh()
	{
	}

	[Token(Token = "0x600048B")]
	[Address(RVA = "0x8D8578", Offset = "0x8D8578", VA = "0x8D8578")]
	public AnimationListener()
	{
	}
}
[Serializable]
[Token(Token = "0x20000AB")]
[CreateAssetMenu(fileName = "NewCreativeRecipe", menuName = "Creative Recipes/Creative Recipe Data")]
public class CreativeRecipeData : ScriptableObject
{
	[Token(Token = "0x4000428")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string id;

	[Token(Token = "0x4000429")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public IngredientType[] ingredients;

	[Token(Token = "0x400042A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public FryState[] grillStates;

	[Token(Token = "0x400042B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool[] isAnyBreadType;

	[Token(Token = "0x400042C")]
	private const string localizationKey = "creative_recipe_";

	[Token(Token = "0x400042D")]
	private const string localizationHintKey = "creative_recipe_hint_";

	[Token(Token = "0x170000DE")]
	public string LocalizationKey
	{
		[Token(Token = "0x600048D")]
		[Address(RVA = "0x8D8584", Offset = "0x8D8584", VA = "0x8D8584")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000DF")]
	public string HintLocalizationKey
	{
		[Token(Token = "0x600048E")]
		[Address(RVA = "0x8D85D8", Offset = "0x8D85D8", VA = "0x8D85D8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600048C")]
	[Address(RVA = "0x8D8580", Offset = "0x8D8580", VA = "0x8D8580")]
	public void VerifyIntegrity()
	{
	}

	[Token(Token = "0x600048F")]
	[Address(RVA = "0x8D858C", Offset = "0x8D858C", VA = "0x8D858C")]
	public static string CreateLocalizationKey(string id)
	{
		return null;
	}

	[Token(Token = "0x6000490")]
	[Address(RVA = "0x8D85E0", Offset = "0x8D85E0", VA = "0x8D85E0")]
	public static string CreateLocalizationHintKey(string id)
	{
		return null;
	}

	[Token(Token = "0x6000491")]
	[Address(RVA = "0x8D862C", Offset = "0x8D862C", VA = "0x8D862C")]
	public CreativeRecipeData()
	{
	}
}
[Token(Token = "0x20000AC")]
[CreateAssetMenu(fileName = "NewCreativeRecipeList", menuName = "Creative Recipes/Creative Recipe List")]
public class CreativeRecipeList : ScriptableObject
{
	[Token(Token = "0x400042E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<CreativeRecipeData> creativeRecipeDataList;

	[Token(Token = "0x6000492")]
	[Address(RVA = "0x8D86D4", Offset = "0x8D86D4", VA = "0x8D86D4")]
	public CreativeRecipeList()
	{
	}
}
[Token(Token = "0x20000AD")]
[CreateAssetMenu(fileName = "NewCupData", menuName = "Cup Data/Cup Data")]
public class CupData : ScriptableObject
{
	[Token(Token = "0x20000AE")]
	public enum Environment
	{
		[Token(Token = "0x400043C")]
		CozyVillage,
		[Token(Token = "0x400043D")]
		EnchantedForest,
		[Token(Token = "0x400043E")]
		RoyalCastle,
		[Token(Token = "0x400043F")]
		ThroneRoom,
		[Token(Token = "0x4000440")]
		EndlessMode,
		[Token(Token = "0x4000441")]
		CreativeMode
	}

	[Token(Token = "0x20000AF")]
	public enum CupRewardType
	{
		[Token(Token = "0x4000443")]
		Coin,
		[Token(Token = "0x4000444")]
		Potion,
		[Token(Token = "0x4000445")]
		Item
	}

	[Token(Token = "0x400042F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool finalCup;

	[Token(Token = "0x4000430")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private int[] roundCoinRewards;

	[Token(Token = "0x4000431")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private int[] cupCoinRewards;

	[Token(Token = "0x4000432")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private CupRewardType[] cupOneTimeRewardTypes;

	[Token(Token = "0x4000433")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private int[] cupOneTimeCoinRewards;

	[Token(Token = "0x4000434")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private ConsumableType[] cupOneTimeConsumableRewards;

	[Token(Token = "0x4000435")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private ItemRewardID[] cupOneTimeItemRewards;

	[Token(Token = "0x4000436")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public LevelData[] levels;

	[Token(Token = "0x4000437")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public string cupNameID;

	[Token(Token = "0x4000438")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Environment cupEnvironment;

	[Token(Token = "0x4000439")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Sprite storyPicture;

	[Token(Token = "0x400043A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public string storyTextID;

	[Token(Token = "0x6000493")]
	[Address(RVA = "0x8D86DC", Offset = "0x8D86DC", VA = "0x8D86DC")]
	public int GetRoundCoinReward(int starsEarned)
	{
		return default(int);
	}

	[Token(Token = "0x6000494")]
	[Address(RVA = "0x8D8724", Offset = "0x8D8724", VA = "0x8D8724")]
	public int GetCupCoinReward(MapProgression.Rank rank)
	{
		return default(int);
	}

	[Token(Token = "0x6000495")]
	[Address(RVA = "0x8D87A8", Offset = "0x8D87A8", VA = "0x8D87A8")]
	public CupRewardType GetOneTimeRewardType(int rankIndex)
	{
		return default(CupRewardType);
	}

	[Token(Token = "0x6000496")]
	[Address(RVA = "0x8D87D8", Offset = "0x8D87D8", VA = "0x8D87D8")]
	public int GetOneTimeCoinReward(int rankIndex)
	{
		return default(int);
	}

	[Token(Token = "0x6000497")]
	[Address(RVA = "0x8D8808", Offset = "0x8D8808", VA = "0x8D8808")]
	public ConsumableType GetOneTimeConsumableReward(int rankIndex)
	{
		return default(ConsumableType);
	}

	[Token(Token = "0x6000498")]
	[Address(RVA = "0x8D8838", Offset = "0x8D8838", VA = "0x8D8838")]
	public ItemRewardID GetOneTimeItemReward(int rankIndex)
	{
		return default(ItemRewardID);
	}

	[Token(Token = "0x6000499")]
	[Address(RVA = "0x8D8868", Offset = "0x8D8868", VA = "0x8D8868")]
	public CupData()
	{
	}
}
[Token(Token = "0x20000B0")]
[CreateAssetMenu(fileName = "NewCupList", menuName = "Cup Data/Cup List")]
public class CupList : ScriptableObject
{
	[Token(Token = "0x4000446")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<CupData> cupDataList;

	[Token(Token = "0x600049A")]
	[Address(RVA = "0x8D8980", Offset = "0x8D8980", VA = "0x8D8980")]
	public CupList()
	{
	}
}
[Token(Token = "0x20000B1")]
public enum LevelLength
{
	[Token(Token = "0x4000448")]
	Short,
	[Token(Token = "0x4000449")]
	Medium,
	[Token(Token = "0x400044A")]
	Long
}
[Token(Token = "0x20000B2")]
public enum GrillRate
{
	[Token(Token = "0x400044C")]
	None,
	[Token(Token = "0x400044D")]
	Rarely,
	[Token(Token = "0x400044E")]
	Uncommon,
	[Token(Token = "0x400044F")]
	Common,
	[Token(Token = "0x4000450")]
	VeryCommon
}
[Token(Token = "0x20000B3")]
public enum SandwichSizes
{
	[Token(Token = "0x4000452")]
	Tiny,
	[Token(Token = "0x4000453")]
	Small,
	[Token(Token = "0x4000454")]
	Medium,
	[Token(Token = "0x4000455")]
	Big,
	[Token(Token = "0x4000456")]
	VeryBig
}
[Serializable]
[Token(Token = "0x20000B4")]
[CreateAssetMenu(fileName = "NewLevelData", menuName = "Level Data/Level Data")]
public class LevelData : ScriptableObject
{
	[Serializable]
	[Token(Token = "0x20000B5")]
	public struct GoalData
	{
		[Token(Token = "0x4000469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int[] goalTimeThreshold;

		[Token(Token = "0x400046A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public GoalSpeedRun.Pace goalTimeLimitPace;

		[Token(Token = "0x400046B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int[] goalCustomersToServe;

		[Token(Token = "0x400046C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int[] goalPerfectsToServe;

		[Token(Token = "0x400046D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CustomerType goalServePerfectTo;

		[Token(Token = "0x400046E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int goalIngredientsToThrow;

		[Token(Token = "0x400046F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ConsumableType useConsumable;

		[Token(Token = "0x4000470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int[] useConsumableCount;

		[Token(Token = "0x4000471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int tutorialGoalSlot;

		[Token(Token = "0x4000472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int[] finalLevelPerfectCount;

		[Token(Token = "0x4000473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int[] goalSpeedRunCustomersToServe;

		[Token(Token = "0x4000474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int[] goalNoConsumablesCustomersToServe;
	}

	[Token(Token = "0x4000457")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public int levelIndex;

	[Token(Token = "0x4000458")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool endlessMode;

	[Token(Token = "0x4000459")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool creativeMode;

	[Token(Token = "0x400045A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LevelLength levelLength;

	[Token(Token = "0x400045B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public GrillRate grillRate;

	[Token(Token = "0x400045C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SandwichSizes sandwichSizes;

	[Token(Token = "0x400045D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public CustomerType[] customers;

	[Token(Token = "0x400045E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int maxCustomersOnScreen;

	[Token(Token = "0x400045F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int hugeSandwichStackSize;

	[Token(Token = "0x4000460")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool hasDirtyPlates;

	[Token(Token = "0x4000461")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool hasPotionReward;

	[Token(Token = "0x4000462")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public ConsumableType potionReward;

	[Token(Token = "0x4000463")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool hasTutorial;

	[Token(Token = "0x4000464")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string tutorialHeaderStringID;

	[Token(Token = "0x4000465")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public string tutorialTextStringID;

	[Token(Token = "0x4000466")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Sprite tutorialImage;

	[Token(Token = "0x4000467")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GoalType[] goals;

	[Token(Token = "0x4000468")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GoalData[] goalsData;

	[Token(Token = "0x170000E0")]
	public string TutorialHeader
	{
		[Token(Token = "0x600049B")]
		[Address(RVA = "0x8D8988", Offset = "0x8D8988", VA = "0x8D8988")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170000E1")]
	public string TutorialText
	{
		[Token(Token = "0x600049C")]
		[Address(RVA = "0x8D89F8", Offset = "0x8D89F8", VA = "0x8D89F8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600049D")]
	[Address(RVA = "0x8D8A68", Offset = "0x8D8A68", VA = "0x8D8A68")]
	public static void VerifyGoalData(int levelIndex, GoalType goalType, GoalData goalData, bool isEndless)
	{
	}

	[Token(Token = "0x600049E")]
	[Address(RVA = "0x8D8B80", Offset = "0x8D8B80", VA = "0x8D8B80")]
	public LevelData()
	{
	}
}
[Token(Token = "0x20000B6")]
[CreateAssetMenu(fileName = "NewLevelList", menuName = "Level Data/Level List")]
public class LevelList : ScriptableObject
{
	[Token(Token = "0x4000475")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<LevelData> levelDataList;

	[Token(Token = "0x600049F")]
	[Address(RVA = "0x8D8C4C", Offset = "0x8D8C4C", VA = "0x8D8C4C")]
	public LevelList()
	{
	}
}
[Token(Token = "0x20000B7")]
public class AchievementsAux : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x60004A0")]
	[Address(RVA = "0x8D8C54", Offset = "0x8D8C54", VA = "0x8D8C54")]
	private void Start()
	{
	}

	[Token(Token = "0x60004A1")]
	[Address(RVA = "0x8D8EB4", Offset = "0x8D8EB4", VA = "0x8D8EB4")]
	public AchievementsAux()
	{
	}
}
[Token(Token = "0x20000B8")]
public class AchievementsHandler : SingleInstanceBehavior<AchievementsHandler>
{
	[Token(Token = "0x20000B9")]
	private enum GameAreas
	{
		[Token(Token = "0x40004CC")]
		Village,
		[Token(Token = "0x40004CD")]
		Forest,
		[Token(Token = "0x40004CE")]
		Castle
	}

	[Token(Token = "0x20000BA")]
	public class AchievementsResponse
	{
		[Token(Token = "0x40004CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool IsUnlocked;

		[Token(Token = "0x60004D2")]
		[Address(RVA = "0x8DEB08", Offset = "0x8DEB08", VA = "0x8DEB08")]
		public AchievementsResponse()
		{
		}
	}

	[Token(Token = "0x4000476")]
	private const string PRINCE_CHARMING = "Achievement_1";

	[Token(Token = "0x4000477")]
	private const string BLACK_SHEEP = "Achievement_2";

	[Token(Token = "0x4000478")]
	private const string GOLDEN_CLEAVER = "Achievement_3";

	[Token(Token = "0x4000479")]
	private const string FEED_THE_MOUSE = "Achievement_4";

	[Token(Token = "0x400047A")]
	private const string PYROSIS = "Achievement_5";

	[Token(Token = "0x400047B")]
	private const string TRUFFLE_HOG = "Achievement_6";

	[Token(Token = "0x400047C")]
	private const string CANNIBAL = "Achievement_7";

	[Token(Token = "0x400047D")]
	private const string TBA_TBA_TBA = "Achievement_8";

	[Token(Token = "0x400047E")]
	private const string GIANT_RADISH_DUDE = "Achievement_9";

	[Token(Token = "0x400047F")]
	private const string FOOD_FIGHT = "Achievement_10";

	[Token(Token = "0x4000480")]
	private const string COOKOUT_RECIPE = "Achievement_11";

	[Token(Token = "0x4000481")]
	private const string POTION_DEVOTION = "Achievement_12";

	[Token(Token = "0x4000482")]
	private const string DRY_PALACE = "Achievement_13";

	[Token(Token = "0x4000483")]
	private const string ROYAL_FLUSH = "Achievement_14";

	[Token(Token = "0x4000484")]
	private const string TOFU_TOWER = "Achievement_15";

	[Token(Token = "0x4000485")]
	private const string MULTIPLAYER_COOKING = "Achievement_16";

	[Token(Token = "0x4000486")]
	private const string ENDLESS_30 = "Achievement_17";

	[Token(Token = "0x4000487")]
	private const string HUGE_MESS = "Achievement_18";

	[Token(Token = "0x4000488")]
	private const string PERFECT_THROW = "Achievement_19";

	[Token(Token = "0x4000489")]
	private const string POWER_OVERWHELMING = "Achievement_20";

	[Token(Token = "0x400048A")]
	private const string WEREWOLVES_DELIGHT_RECIPE = "Achievement_21";

	[Token(Token = "0x400048B")]
	private const string CATS_DELIGHT_RECIPE = "Achievement_22";

	[Token(Token = "0x400048C")]
	private const string RABBITS_DELIGHT_RECIPE = "Achievement_23";

	[Token(Token = "0x400048D")]
	private const string JESTERS_DELIGHT_RECIPE = "Achievement_24";

	[Token(Token = "0x400048E")]
	private const string THIEVES_DELIGHT_RECIPE = "Achievement_25";

	[Token(Token = "0x400048F")]
	private const string DEERS_DELIGHT_RECIPE = "Achievement_26";

	[Token(Token = "0x4000490")]
	private const string VILLAGE_STAR = "Achievement_27";

	[Token(Token = "0x4000491")]
	private const string FOREST_STAR = "Achievement_28";

	[Token(Token = "0x4000492")]
	private const string CASTLE_STAR = "Achievement_29";

	[Token(Token = "0x4000493")]
	private const string ENDLESS_150 = "Achievement_30";

	[Token(Token = "0x4000494")]
	private const string FENCING = "Achievement_31";

	[Token(Token = "0x4000495")]
	private const string RAGE_AGAINST_THE_MACHINE = "Achievement_32";

	[Token(Token = "0x4000496")]
	private const string WEALTHY = "Achievement_33";

	[Token(Token = "0x4000497")]
	private const string SPENDER = "Achievement_34";

	[Token(Token = "0x4000498")]
	private const string FAST_FOOD = "Achievement_35";

	[Token(Token = "0x4000499")]
	private const string ENDLESS_PERFECTION = "Achievement_36";

	[Token(Token = "0x400049A")]
	private const string KLEPTOMANIA = "Achievement_37";

	[Token(Token = "0x400049B")]
	private const string DISHWASHER = "Achievement_38";

	[Token(Token = "0x400049C")]
	private const string FIST_BUMP = "Achievement_39";

	[Token(Token = "0x400049D")]
	private const string JUNIOR_CHEF = "Achievement_40";

	[Token(Token = "0x400049E")]
	private const string STATION_CHEF = "Achievement_41";

	[Token(Token = "0x400049F")]
	private const string SOUS_CHEF = "Achievement_42";

	[Token(Token = "0x40004A0")]
	private const string HEAD_CHEF = "Achievement_43";

	[Token(Token = "0x40004A1")]
	private const string COOKIE_MONSTER = "Achievement_44";

	[Token(Token = "0x40004A2")]
	private const string ROYAL_DINNER_SERVICE = "Achievement_45";

	[Token(Token = "0x40004A3")]
	private const string ROYAL_BANQUET = "Achievement_46";

	[Token(Token = "0x40004A4")]
	private const string BBQ = "Achievement_47";

	[Token(Token = "0x40004A5")]
	private const string PYROMANIA = "Achievement_48";

	[Token(Token = "0x40004A6")]
	private const string ONE_UP = "Achievement_49";

	[Token(Token = "0x40004A7")]
	private const string SANDWICH_CHEF = "Achievement_50";

	[Token(Token = "0x40004A8")]
	private const string DEDICATED_CHEF = "Achievement_51";

	[Token(Token = "0x40004A9")]
	private const string HIGH_FIVE = "Achievement_52";

	[Token(Token = "0x40004AA")]
	private const string COOKOUT_RECIPE_ID = "85";

	[Token(Token = "0x40004AB")]
	private const string WEREWOLVES_DELIGHT_RECIPE_ID = "52";

	[Token(Token = "0x40004AC")]
	private const string CATS_DELIGHT_RECIPE_ID = "51";

	[Token(Token = "0x40004AD")]
	private const string RABBITS_DELIGHT_RECIPE_ID = "50";

	[Token(Token = "0x40004AE")]
	private const string JESTERS_DELIGHT_RECIPE_ID = "54";

	[Token(Token = "0x40004AF")]
	private const string THIEVES_DELIGHT_RECIPE_ID = "53";

	[Token(Token = "0x40004B0")]
	private const string DEERS_DELIGHT_RECIPE_ID = "145";

	[Token(Token = "0x40004B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly string[] RECIPE_IDS;

	[Token(Token = "0x40004B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private readonly Dictionary<string, string> RECIPE_IDS_REGISTRY;

	[Token(Token = "0x40004B3")]
	private const int ENDLESS_30_GOAL = 30;

	[Token(Token = "0x40004B4")]
	private const int ENDLESS_150_GOAL = 150;

	[Token(Token = "0x40004B5")]
	private const int JUNIOR_CHEF_GOAL = 10;

	[Token(Token = "0x40004B6")]
	private const int STATION_CHEF_GOAL = 50;

	[Token(Token = "0x40004B7")]
	private const int SOUS_CHEF_GOAL = 100;

	[Token(Token = "0x40004B8")]
	private const int HEAD_CHEF_GOAL = 200;

	[Token(Token = "0x40004B9")]
	private const int SANDWICH_CHEF_GOAL = 1000;

	[Token(Token = "0x40004BA")]
	private const int FAST_FOOD_GOAL = 50;

	[Token(Token = "0x40004BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly int[] CREATIVE_CHEF_GOALS;

	[Token(Token = "0x40004BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Dictionary<int, string> CREATIVE_CHEF_GOALS_REGISTRY;

	[Token(Token = "0x40004BD")]
	private const int WEALTHY_GOAL = 50000;

	[Token(Token = "0x40004BE")]
	private const int ENDLESS_PERFECTION_GOAL = 100;

	[Token(Token = "0x40004BF")]
	private const int KLEPTOMANIA_GOAL = 10;

	[Token(Token = "0x40004C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly int[] areaLevelCounts;

	[Token(Token = "0x40004C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private readonly string[] areaLevelAchievements;

	[Token(Token = "0x40004C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool isInitialized;

	[Token(Token = "0x40004C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private SaveManager saveManager;

	[Token(Token = "0x40004C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private EndlessMode endlessMode;

	[Token(Token = "0x40004C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int perfectPlatesStreakInEndlessMode;

	[Token(Token = "0x40004C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private bool isEndlessMode;

	[Token(Token = "0x40004C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool[] unlockedAchievements;

	[Token(Token = "0x40004C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private List<string> achievements;

	[Token(Token = "0x40004C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private readonly string[] COUNTABLE_ACHIEVEMENTS;

	[Token(Token = "0x40004CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly Dictionary<AvatarCustomizationUnlockCondition, string> unlockConditionDescriptions;

	[Token(Token = "0x170000E2")]
	public int AchievementsCount
	{
		[Token(Token = "0x60004A2")]
		[Address(RVA = "0x8D8EBC", Offset = "0x8D8EBC", VA = "0x8D8EBC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60004A3")]
	[Address(RVA = "0x8D8F04", Offset = "0x8D8F04", VA = "0x8D8F04")]
	public void Init()
	{
	}

	[Token(Token = "0x60004A4")]
	[Address(RVA = "0x8D8D1C", Offset = "0x8D8D1C", VA = "0x8D8D1C")]
	public void OnEnterMainScene()
	{
	}

	[Token(Token = "0x60004A5")]
	[Address(RVA = "0x8D995C", Offset = "0x8D995C", VA = "0x8D995C")]
	private void OnEndlessStart()
	{
	}

	[Token(Token = "0x60004A6")]
	[Address(RVA = "0x8D996C", Offset = "0x8D996C", VA = "0x8D996C")]
	private void OnEndlessStop()
	{
	}

	[Token(Token = "0x60004A7")]
	[Address(RVA = "0x8D9978", Offset = "0x8D9978", VA = "0x8D9978")]
	public void OnLeaveMainScene()
	{
	}

	[Token(Token = "0x60004A8")]
	[Address(RVA = "0x8D9AB8", Offset = "0x8D9AB8", VA = "0x8D9AB8")]
	private void UnlockSimpleAchievement(string apiKey)
	{
	}

	[Token(Token = "0x60004A9")]
	[Address(RVA = "0x8D9C10", Offset = "0x8D9C10", VA = "0x8D9C10")]
	private void RecordCountAchievement(string apiKey, int count)
	{
	}

	[Token(Token = "0x60004AA")]
	[Address(RVA = "0x8D939C", Offset = "0x8D939C", VA = "0x8D939C")]
	private void SyncOfflineAchievements()
	{
	}

	[Token(Token = "0x60004AB")]
	[Address(RVA = "0x8D9D64", Offset = "0x8D9D64", VA = "0x8D9D64")]
	private void SyncOfflineSimpleAchievements(int index, string apiKey)
	{
	}

	[Token(Token = "0x60004AC")]
	[Address(RVA = "0x8D9EA8", Offset = "0x8D9EA8", VA = "0x8D9EA8")]
	private void SyncOfflineCountableAchievement(string apiKey)
	{
	}

	[Token(Token = "0x60004AD")]
	[Address(RVA = "0x8DA320", Offset = "0x8DA320", VA = "0x8DA320")]
	private void SyncSimpleAchievementsCallback(string apiKey, bool isRemoteUnlocked)
	{
	}

	[Token(Token = "0x60004AE")]
	[Address(RVA = "0x8DA32C", Offset = "0x8DA32C", VA = "0x8DA32C")]
	private void SyncCountableAchievementsCallback(string apiKey, int localCount, int remoteCount)
	{
	}

	[Token(Token = "0x60004AF")]
	[Address(RVA = "0x8DA510", Offset = "0x8DA510", VA = "0x8DA510")]
	public void OnAvatarKissMirror()
	{
	}

	[Token(Token = "0x60004B0")]
	[Address(RVA = "0x8DA67C", Offset = "0x8DA67C", VA = "0x8DA67C")]
	public void OnCleaverHitWell()
	{
	}

	[Token(Token = "0x60004B1")]
	[Address(RVA = "0x8DA798", Offset = "0x8DA798", VA = "0x8DA798")]
	public void OnIngredientEaten(IngredientBase ingredient)
	{
	}

	[Token(Token = "0x60004B2")]
	[Address(RVA = "0x8DA9B0", Offset = "0x8DA9B0", VA = "0x8DA9B0")]
	public void OnFinalCupBeaten(int cupStars, int consumablesUsed)
	{
	}

	[Token(Token = "0x60004B3")]
	[Address(RVA = "0x8DAA54", Offset = "0x8DAA54", VA = "0x8DAA54")]
	public void OnPerfectThrow()
	{
	}

	[Token(Token = "0x60004B4")]
	[Address(RVA = "0x8DAA9C", Offset = "0x8DAA9C", VA = "0x8DAA9C")]
	public void OnBroFist()
	{
	}

	[Token(Token = "0x60004B5")]
	[Address(RVA = "0x8DAB84", Offset = "0x8DAB84", VA = "0x8DAB84")]
	public void OnHighFive()
	{
	}

	[Token(Token = "0x60004B6")]
	[Address(RVA = "0x8DAC6C", Offset = "0x8DAC6C", VA = "0x8DAC6C")]
	public void OnFencing()
	{
	}

	[Token(Token = "0x60004B7")]
	[Address(RVA = "0x8DAD54", Offset = "0x8DAD54", VA = "0x8DAD54")]
	public void OnStolenIngredient()
	{
	}

	[Token(Token = "0x60004B8")]
	[Address(RVA = "0x8DAE04", Offset = "0x8DAE04", VA = "0x8DAE04")]
	public void OnPlateHandedInHandingInPlayerOnly(Plate plate, bool wasPerfect, bool isCreativeMode, CustomerType customerType)
	{
	}

	[Token(Token = "0x60004B9")]
	[Address(RVA = "0x8DB1DC", Offset = "0x8DB1DC", VA = "0x8DB1DC")]
	public void OnPlateHandedInAnyPlayer(Plate plate, bool wasPerfect, bool isCreativeMode, CustomerType customerType)
	{
	}

	[Token(Token = "0x60004BA")]
	[Address(RVA = "0x8DB394", Offset = "0x8DB394", VA = "0x8DB394")]
	public void OnMouseFeed()
	{
	}

	[Token(Token = "0x60004BB")]
	[Address(RVA = "0x8DB038", Offset = "0x8DB038", VA = "0x8DB038")]
	private bool HasBurntIngredient(Plate plate)
	{
		return default(bool);
	}

	[Token(Token = "0x60004BC")]
	[Address(RVA = "0x8DB2E8", Offset = "0x8DB2E8", VA = "0x8DB2E8")]
	private bool IsTofuTower(Plate plate)
	{
		return default(bool);
	}

	[Token(Token = "0x60004BD")]
	[Address(RVA = "0x8DB120", Offset = "0x8DB120", VA = "0x8DB120")]
	private bool IsExclusiveIngredientPlate(Plate plate, IngredientType ingredientType)
	{
		return default(bool);
	}

	[Token(Token = "0x60004BE")]
	[Address(RVA = "0x8DB414", Offset = "0x8DB414", VA = "0x8DB414")]
	public void OnNewRecipeFound(string recipeId)
	{
	}

	[Token(Token = "0x60004BF")]
	[Address(RVA = "0x8DB53C", Offset = "0x8DB53C", VA = "0x8DB53C")]
	public void OnCoinsSpent(int coins)
	{
	}

	[Token(Token = "0x60004C0")]
	[Address(RVA = "0x8DB5A8", Offset = "0x8DB5A8", VA = "0x8DB5A8")]
	public void OnGrilledIngredient()
	{
	}

	[Token(Token = "0x60004C1")]
	[Address(RVA = "0x8DB604", Offset = "0x8DB604", VA = "0x8DB604")]
	public void OnBurntIngredient()
	{
	}

	[Token(Token = "0x60004C2")]
	[Address(RVA = "0x8DB660", Offset = "0x8DB660", VA = "0x8DB660")]
	public void OnWashPlate()
	{
	}

	[Token(Token = "0x60004C3")]
	[Address(RVA = "0x8DB6BC", Offset = "0x8DB6BC", VA = "0x8DB6BC")]
	public void OnFoodFight()
	{
	}

	[Token(Token = "0x60004C4")]
	[Address(RVA = "0x8DB704", Offset = "0x8DB704", VA = "0x8DB704")]
	public void OnBotHit()
	{
	}

	[Token(Token = "0x60004C5")]
	[Address(RVA = "0x8DB74C", Offset = "0x8DB74C", VA = "0x8DB74C")]
	public void OnGiantRadishDude()
	{
	}

	[Token(Token = "0x60004C6")]
	[Address(RVA = "0x8DB794", Offset = "0x8DB794", VA = "0x8DB794")]
	public void OnBotSupercharged()
	{
	}

	[Token(Token = "0x60004C7")]
	[Address(RVA = "0x8D9044", Offset = "0x8D9044", VA = "0x8D9044")]
	public void CheckForEndlessModeHighscoreAchievements()
	{
	}

	[Token(Token = "0x60004C8")]
	[Address(RVA = "0x8D919C", Offset = "0x8D919C", VA = "0x8D919C")]
	public void CheckForCoinsAchievement()
	{
	}

	[Token(Token = "0x60004C9")]
	[Address(RVA = "0x8D9210", Offset = "0x8D9210", VA = "0x8D9210")]
	public void CheckForUnlockedRecipeIdAchievements()
	{
	}

	[Token(Token = "0x60004CA")]
	[Address(RVA = "0x8D90E0", Offset = "0x8D90E0", VA = "0x8D90E0")]
	public void CheckForUnlockedRecipesCountAchievements()
	{
	}

	[Token(Token = "0x60004CB")]
	[Address(RVA = "0x8D9308", Offset = "0x8D9308", VA = "0x8D9308")]
	public void CheckForUnlockedPotionsAchievement()
	{
	}

	[Token(Token = "0x60004CC")]
	[Address(RVA = "0x8D95C8", Offset = "0x8D95C8", VA = "0x8D95C8")]
	public void CheckForEarnedStarsAchievements()
	{
	}

	[Token(Token = "0x60004CD")]
	[Address(RVA = "0x8DB7F0", Offset = "0x8DB7F0", VA = "0x8DB7F0")]
	public void OnPlayerJoinedRoom()
	{
	}

	[Token(Token = "0x60004CE")]
	[Address(RVA = "0x8DB838", Offset = "0x8DB838", VA = "0x8DB838")]
	public void OnPhotonPlayerConnected()
	{
	}

	[Token(Token = "0x60004CF")]
	[Address(RVA = "0x8DB880", Offset = "0x8DB880", VA = "0x8DB880")]
	public string GetAchievementNameForDebugging(string achievementID)
	{
		return null;
	}

	[Token(Token = "0x60004D0")]
	[Address(RVA = "0x8DCA40", Offset = "0x8DCA40", VA = "0x8DCA40")]
	public AchievementsHandler()
	{
	}
}
[Token(Token = "0x20000BB")]
public class BroFist : NetworkedBehaviour
{
	[Token(Token = "0x40004D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject broFistCollider;

	[Token(Token = "0x40004D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject leftHandCollider;

	[Token(Token = "0x40004D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject rightHandCollider;

	[Token(Token = "0x40004D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private CookoutAvatar cookoutAvatar;

	[Token(Token = "0x40004D4")]
	private const string BRO_FIST_TAG = "BroFist";

	[Token(Token = "0x40004D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private CookoutAvatarHand leftHand;

	[Token(Token = "0x40004D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private CookoutAvatarHand rightHand;

	[Token(Token = "0x60004D3")]
	[Address(RVA = "0x8DEB10", Offset = "0x8DEB10", VA = "0x8DEB10")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004D4")]
	[Address(RVA = "0x8DED38", Offset = "0x8DED38", VA = "0x8DED38")]
	private void OnTriggerEnterRight(Collider otherFist)
	{
	}

	[Token(Token = "0x60004D5")]
	[Address(RVA = "0x8DFA38", Offset = "0x8DFA38", VA = "0x8DFA38")]
	private void OnTriggerEnterLeft(Collider otherFist)
	{
	}

	[Token(Token = "0x60004D6")]
	[Address(RVA = "0x8DED40", Offset = "0x8DED40", VA = "0x8DED40")]
	private void OnTriggerEnterBroFist(Collider otherFist, CookoutHandedness handedness)
	{
	}

	[Token(Token = "0x60004D7")]
	[Address(RVA = "0x8DFA40", Offset = "0x8DFA40", VA = "0x8DFA40")]
	private bool HandIsFist(CookoutAvatarHand hand)
	{
		return default(bool);
	}

	[Token(Token = "0x60004D8")]
	[Address(RVA = "0x8DFA64", Offset = "0x8DFA64", VA = "0x8DFA64")]
	private bool HandIsHighFive(CookoutAvatarHand hand)
	{
		return default(bool);
	}

	[Token(Token = "0x60004D9")]
	[Address(RVA = "0x8DFA98", Offset = "0x8DFA98", VA = "0x8DFA98")]
	[PunRPC]
	private void BroFistRPC(Vector3 otherFistPosition, int otherPlayerID)
	{
	}

	[Token(Token = "0x60004DA")]
	[Address(RVA = "0x8DFBE0", Offset = "0x8DFBE0", VA = "0x8DFBE0")]
	[PunRPC]
	private void HighFiveRPC(Vector3 otherFistPosition, int otherPlayerID)
	{
	}

	[Token(Token = "0x60004DB")]
	[Address(RVA = "0x8DFD28", Offset = "0x8DFD28", VA = "0x8DFD28")]
	public BroFist()
	{
	}
}
[Token(Token = "0x20000BC")]
public class FeedTheMouse : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40004D7")]
	private const string INGREDIENTS_LAYER = "Ingredients";

	[Token(Token = "0x40004D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float eatTimer;

	[Token(Token = "0x40004D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private IngredientBase ingredient;

	[Token(Token = "0x40004DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float eatDelay;

	[Token(Token = "0x60004DC")]
	[Address(RVA = "0x8DFD30", Offset = "0x8DFD30", VA = "0x8DFD30")]
	private void Start()
	{
	}

	[Token(Token = "0x60004DD")]
	[Address(RVA = "0x8DFD38", Offset = "0x8DFD38", VA = "0x8DFD38")]
	private void Update()
	{
	}

	[Token(Token = "0x60004DE")]
	[Address(RVA = "0x8DFF88", Offset = "0x8DFF88", VA = "0x8DFF88")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60004DF")]
	[Address(RVA = "0x8E00C4", Offset = "0x8E00C4", VA = "0x8E00C4")]
	private bool IsCheese(IngredientType ingredientType)
	{
		return default(bool);
	}

	[Token(Token = "0x60004E0")]
	[Address(RVA = "0x8E00EC", Offset = "0x8E00EC", VA = "0x8E00EC")]
	public FeedTheMouse()
	{
	}
}
[Token(Token = "0x20000BD")]
public class Mirror : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x60004E1")]
	[Address(RVA = "0x8E0100", Offset = "0x8E0100", VA = "0x8E0100")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60004E2")]
	[Address(RVA = "0x8E0204", Offset = "0x8E0204", VA = "0x8E0204")]
	public Mirror()
	{
	}
}
[Token(Token = "0x20000BE")]
public class Well : NetworkedBehaviour
{
	[Token(Token = "0x40004DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Collider myCollider;

	[Token(Token = "0x40004DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Vector3 positionCozyVillage;

	[Token(Token = "0x40004DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private Vector3 positionEndlessMode;

	[Token(Token = "0x40004DE")]
	private const string CLEAVER_LAYER = "Cleaver";

	[Token(Token = "0x40004DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool cleaverHitWell;

	[Token(Token = "0x40004E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private EnvironmentLoader environmentLoader;

	[Token(Token = "0x40004E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private ParticleSystem cleaverHitEffect;

	[Token(Token = "0x60004E3")]
	[Address(RVA = "0x8E020C", Offset = "0x8E020C", VA = "0x8E020C")]
	private void Start()
	{
	}

	[Token(Token = "0x60004E4")]
	[Address(RVA = "0x8E0378", Offset = "0x8E0378", VA = "0x8E0378")]
	private void OnEnvironmentChanged()
	{
	}

	[Token(Token = "0x60004E5")]
	[Address(RVA = "0x8E0400", Offset = "0x8E0400", VA = "0x8E0400")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60004E6")]
	[Address(RVA = "0x8E0634", Offset = "0x8E0634", VA = "0x8E0634")]
	[PunRPC]
	private void PlayWellParticleEffectRPC()
	{
	}

	[Token(Token = "0x60004E7")]
	[Address(RVA = "0x8E0668", Offset = "0x8E0668", VA = "0x8E0668")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60004E8")]
	[Address(RVA = "0x8E073C", Offset = "0x8E073C", VA = "0x8E073C")]
	public Well()
	{
	}
}
[Token(Token = "0x20000BF")]
public class AndroidMaterial : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40004E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[FormerlySerializedAs("questMaterials")]
	[SerializeField]
	private Material[] androidMaterials;

	[Token(Token = "0x40004E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Renderer[] rendererTargets;

	[Token(Token = "0x60004E9")]
	[Address(RVA = "0x8E0744", Offset = "0x8E0744", VA = "0x8E0744")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004EA")]
	[Address(RVA = "0x8E0804", Offset = "0x8E0804", VA = "0x8E0804")]
	public AndroidMaterial()
	{
	}
}
[Token(Token = "0x20000C0")]
public class AnimatedCreatureSpawner : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40004E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject creaturePrefab;

	[Token(Token = "0x40004E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform[] spawnPositions;

	[Token(Token = "0x40004E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform cozyVillageGiantSpawnPosition;

	[Token(Token = "0x40004E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform enchantedForestGiantSpawnPosition;

	[Token(Token = "0x40004E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform royalCastleGiantSpawnPosition;

	[Token(Token = "0x40004E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform throneRoomGiantSpawnPosition;

	[Token(Token = "0x40004EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform creativeModeGiantSpawnPosition;

	[Token(Token = "0x40004EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform endlessModeGiantSpawnPosition;

	[Token(Token = "0x60004EB")]
	[Address(RVA = "0x8E080C", Offset = "0x8E080C", VA = "0x8E080C")]
	private void Start()
	{
	}

	[Token(Token = "0x60004EC")]
	[Address(RVA = "0x8E09EC", Offset = "0x8E09EC", VA = "0x8E09EC")]
	public AnimatedCreatureSpawner()
	{
	}
}
[Token(Token = "0x20000C1")]
public class RadishDudeWarp : NetworkedBehaviour, IPunObservable
{
	[Token(Token = "0x40004EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform[] spawnPositions;

	[Token(Token = "0x40004ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform cozyVillageGiantSpawnPosition;

	[Token(Token = "0x40004EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform enchantedForestGiantSpawnPosition;

	[Token(Token = "0x40004EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform royalCastleGiantSpawnPosition;

	[Token(Token = "0x40004F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform throneRoomGiantSpawnPosition;

	[Token(Token = "0x40004F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Transform creativeModeGiantSpawnPosition;

	[Token(Token = "0x40004F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform endlessModeGiantSpawnPosition;

	[Token(Token = "0x40004F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool isHit;

	[Token(Token = "0x40004F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	private byte numberOfHits;

	[Token(Token = "0x40004F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
	private byte currentPosition;

	[Token(Token = "0x40004F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5B")]
	private byte currentGiantPosition;

	[Token(Token = "0x40004F7")]
	private const byte hitsToGetGiant = 5;

	[Token(Token = "0x40004F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float giantScaleFactor;

	[Token(Token = "0x40004F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private float baseScaleFactor;

	[Token(Token = "0x40004FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	private float cozyVillageScaleFactor;

	[Token(Token = "0x40004FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private float enchantedForestScaleFactor;

	[Token(Token = "0x40004FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[SerializeField]
	private float royalCastleScaleFactor;

	[Token(Token = "0x40004FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private float throneRoomScaleFactor;

	[Token(Token = "0x40004FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[SerializeField]
	private float creativeModeScaleFactor;

	[Token(Token = "0x40004FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private float endlessModeScaleFactor;

	[Token(Token = "0x4000500")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private EnvironmentLoader environmentLoader;

	[Token(Token = "0x170000E3")]
	private bool IsGiant
	{
		[Token(Token = "0x60004ED")]
		[Address(RVA = "0x8E09F4", Offset = "0x8E09F4", VA = "0x8E09F4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60004EE")]
	[Address(RVA = "0x8E0A04", Offset = "0x8E0A04", VA = "0x8E0A04")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004EF")]
	[Address(RVA = "0x8E0BA8", Offset = "0x8E0BA8", VA = "0x8E0BA8")]
	private void Start()
	{
	}

	[Token(Token = "0x60004F0")]
	[Address(RVA = "0x8E0D54", Offset = "0x8E0D54", VA = "0x8E0D54")]
	private void Update()
	{
	}

	[Token(Token = "0x60004F1")]
	[Address(RVA = "0x8E0D5C", Offset = "0x8E0D5C", VA = "0x8E0D5C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60004F2")]
	[Address(RVA = "0x8E0E30", Offset = "0x8E0E30", VA = "0x8E0E30")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60004F3")]
	[Address(RVA = "0x8E0F94", Offset = "0x8E0F94", VA = "0x8E0F94")]
	private Transform GetGiantEnvironmentPosition()
	{
		return null;
	}

	[Token(Token = "0x60004F4")]
	[Address(RVA = "0x8E1020", Offset = "0x8E1020", VA = "0x8E1020")]
	private void GigantifyRadish()
	{
	}

	[Token(Token = "0x60004F5")]
	[Address(RVA = "0x8E12D4", Offset = "0x8E12D4", VA = "0x8E12D4")]
	private void OnEnvironmentChanged()
	{
	}

	[Token(Token = "0x60004F6")]
	[Address(RVA = "0x8E1604", Offset = "0x8E1604", VA = "0x8E1604")]
	[PunRPC]
	private void OnRadishDudeHitRPC()
	{
	}

	[Token(Token = "0x60004F7")]
	[Address(RVA = "0x8E138C", Offset = "0x8E138C", VA = "0x8E138C")]
	private void MoveRadish(byte oldPosition, byte newPosition)
	{
	}

	[Token(Token = "0x60004F8")]
	[Address(RVA = "0x8E16CC", Offset = "0x8E16CC", VA = "0x8E16CC", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60004F9")]
	[Address(RVA = "0x8E18D8", Offset = "0x8E18D8", VA = "0x8E18D8")]
	public RadishDudeWarp()
	{
	}
}
[Token(Token = "0x20000C2")]
public class SquirrelAnimations : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4000501")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float runCooldown;

	[Token(Token = "0x4000502")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float firstRunCooldown;

	[Token(Token = "0x4000503")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float runTimer;

	[Token(Token = "0x4000504")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Animator animator;

	[Token(Token = "0x4000505")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private string runTrigger;

	[Token(Token = "0x60004FA")]
	[Address(RVA = "0x8E18F0", Offset = "0x8E18F0", VA = "0x8E18F0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004FB")]
	[Address(RVA = "0x8E1948", Offset = "0x8E1948", VA = "0x8E1948")]
	private void Update()
	{
	}

	[Token(Token = "0x60004FC")]
	[Address(RVA = "0x8E19AC", Offset = "0x8E19AC", VA = "0x8E19AC")]
	public SquirrelAnimations()
	{
	}
}
[Token(Token = "0x20000C3")]
public class SyncedAnimationController : NetworkedBehaviour
{
	[Token(Token = "0x20000C4")]
	private enum AnimatorType
	{
		[Token(Token = "0x400051A")]
		undefined,
		[Token(Token = "0x400051B")]
		cat,
		[Token(Token = "0x400051C")]
		radishDude,
		[Token(Token = "0x400051D")]
		stove
	}

	[Token(Token = "0x4000506")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<string> animationTriggers;

	[Token(Token = "0x4000507")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool isOverridden;

	[Token(Token = "0x4000508")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Animator animator;

	[Token(Token = "0x4000509")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float animationTime;

	[Token(Token = "0x400050A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private bool wasHit;

	[Token(Token = "0x400050B")]
	private const int collisionTriggerID = 0;

	[Token(Token = "0x400050C")]
	private const int touchTriggerID = 1;

	[Token(Token = "0x400050D")]
	private const int randomAnimationsStartID = 2;

	[Token(Token = "0x400050E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Tooltip("The minimum time spent on one animation cycle in seconds")]
	private float minAnimationTime;

	[Token(Token = "0x400050F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	[Tooltip("The maximum time spent on one animation cycle in seconds")]
	private float maxAnimationTime;

	[Token(Token = "0x4000510")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private AnimatorType animatorType;

	[Token(Token = "0x4000511")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Tooltip("Leave empty to ignore collisions")]
	[Header("Optional Collision")]
	public string collisionTrigger;

	[Token(Token = "0x4000512")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float collisionClipLength;

	[Token(Token = "0x4000513")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Header("Optional Touch")]
	[Tooltip("Leave empty to ignore player touch")]
	public string TouchTrigger;

	[Token(Token = "0x4000514")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float TouchClipLength;

	[Token(Token = "0x4000515")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private List<int> touchingHands;

	[Token(Token = "0x4000516")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool launcherScene;

	[Token(Token = "0x4000517")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
	private bool collisionTriggerNotSet;

	[Token(Token = "0x4000518")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7A")]
	private bool touchTriggerNotSet;

	[Token(Token = "0x60004FD")]
	[Address(RVA = "0x8E1A08", Offset = "0x8E1A08", VA = "0x8E1A08")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004FE")]
	[Address(RVA = "0x8E1D20", Offset = "0x8E1D20", VA = "0x8E1D20")]
	private void Update()
	{
	}

	[Token(Token = "0x60004FF")]
	[Address(RVA = "0x8E2088", Offset = "0x8E2088", VA = "0x8E2088")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000500")]
	[Address(RVA = "0x8E1E44", Offset = "0x8E1E44", VA = "0x8E1E44")]
	private void SetNextAnimation(byte triggerKeyID, float newAnimationTime, bool hitSound, bool touchSound)
	{
	}

	[Token(Token = "0x6000501")]
	[Address(RVA = "0x8E21B8", Offset = "0x8E21B8", VA = "0x8E21B8")]
	[PunRPC]
	private void SetNextAnimationRPC(byte triggerKeyID, float newAnimationTime, bool hitSound, bool touchSound)
	{
	}

	[Token(Token = "0x6000502")]
	[Address(RVA = "0x8E2344", Offset = "0x8E2344", VA = "0x8E2344")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000503")]
	[Address(RVA = "0x8E250C", Offset = "0x8E250C", VA = "0x8E250C")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000504")]
	[Address(RVA = "0x8E2624", Offset = "0x8E2624", VA = "0x8E2624")]
	public SyncedAnimationController()
	{
	}
}
[Token(Token = "0x20000C6")]
public class AudioSettingsUI : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4000521")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TextMeshPro soundValueText;

	[Token(Token = "0x4000522")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private PokeButton decreaseSoundButton;

	[Token(Token = "0x4000523")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private PokeButton increaseSoundButton;

	[Token(Token = "0x4000524")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private TextMeshPro voiceValueText;

	[Token(Token = "0x4000525")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private PokeButton decreaseVoiceButton;

	[Token(Token = "0x4000526")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private PokeButton increaseVoiceButton;

	[Token(Token = "0x4000527")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private TextMeshPro musicValueText;

	[Token(Token = "0x4000528")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private PokeButton decreaseMusicButton;

	[Token(Token = "0x4000529")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private PokeButton increaseMusicButton;

	[Token(Token = "0x400052A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private bool isWristMenu;

	[Token(Token = "0x6000507")]
	[Address(RVA = "0x8E3788", Offset = "0x8E3788", VA = "0x8E3788")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000508")]
	[Address(RVA = "0x8E3954", Offset = "0x8E3954", VA = "0x8E3954")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000509")]
	[Address(RVA = "0x8E3A64", Offset = "0x8E3A64", VA = "0x8E3A64")]
	private void RefreshVolumeLevels()
	{
	}

	[Token(Token = "0x600050A")]
	[Address(RVA = "0x8E3EEC", Offset = "0x8E3EEC", VA = "0x8E3EEC")]
	private void IncrementVolume(AudioPreferences.SoundGroup soundGroup, bool increase)
	{
	}

	[Token(Token = "0x600050B")]
	[Address(RVA = "0x8E4144", Offset = "0x8E4144", VA = "0x8E4144")]
	public AudioSettingsUI()
	{
	}
}
[Token(Token = "0x20000C7")]
public class CustomMicWrapper : IAudioReader<float>, IDataReader<float>, IDisposable, IAudioSource
{
	[Token(Token = "0x400052B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private AudioClip mic;

	[Token(Token = "0x400052C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string device;

	[Token(Token = "0x400052D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private IntPtr androidMicrophoneHandle;

	[Token(Token = "0x400052E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int micPrevPos;

	[Token(Token = "0x400052F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int micLoopCnt;

	[Token(Token = "0x4000530")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int readAbsPos;

	[Token(Token = "0x170000E4")]
	public int SamplingRate
	{
		[Token(Token = "0x6000513")]
		[Address(RVA = "0x8E43A4", Offset = "0x8E43A4", VA = "0x8E43A4", Slot = "6")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170000E5")]
	public int Channels
	{
		[Token(Token = "0x6000514")]
		[Address(RVA = "0x8E43C0", Offset = "0x8E43C0", VA = "0x8E43C0", Slot = "7")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000512")]
	[Address(RVA = "0x8E4194", Offset = "0x8E4194", VA = "0x8E4194")]
	public CustomMicWrapper(string device, int suggestedFrequency)
	{
	}

	[Token(Token = "0x6000515")]
	[Address(RVA = "0x8E43DC", Offset = "0x8E43DC", VA = "0x8E43DC", Slot = "5")]
	public void Dispose()
	{
	}

	[Token(Token = "0x6000516")]
	[Address(RVA = "0x8E43E8", Offset = "0x8E43E8", VA = "0x8E43E8", Slot = "4")]
	public bool Read(float[] buffer)
	{
		return default(bool);
	}
}
[Token(Token = "0x20000C8")]
public class LauncherAmbience : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x6000517")]
	[Address(RVA = "0x8E44C0", Offset = "0x8E44C0", VA = "0x8E44C0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000518")]
	[Address(RVA = "0x8E4570", Offset = "0x8E4570", VA = "0x8E4570")]
	public LauncherAmbience()
	{
	}
}
[Token(Token = "0x20000C9")]
public static class AudioTriggers
{
	[Token(Token = "0x20000CA")]
	[CompilerGenerated]
	private sealed class <OnRoundFinishedWin>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool finalLevel;

		[Token(Token = "0x4000535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string <playlist>5__2;

		[Token(Token = "0x170000E6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005DA")]
			[Address(RVA = "0x8ECD0C", Offset = "0x8ECD0C", VA = "0x8ECD0C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005DC")]
			[Address(RVA = "0x8ECD54", Offset = "0x8ECD54", VA = "0x8ECD54", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005D7")]
		[Address(RVA = "0x8E56E0", Offset = "0x8E56E0", VA = "0x8E56E0")]
		[DebuggerHidden]
		public <OnRoundFinishedWin>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x60005D8")]
		[Address(RVA = "0x8EC9A4", Offset = "0x8EC9A4", VA = "0x8EC9A4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005D9")]
		[Address(RVA = "0x8EC9A8", Offset = "0x8EC9A8", VA = "0x8EC9A8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005DB")]
		[Address(RVA = "0x8ECD14", Offset = "0x8ECD14", VA = "0x8ECD14", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000CB")]
	[CompilerGenerated]
	private sealed class <OnRoundFinishedFailed>d__26 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string <playlist>5__2;

		[Token(Token = "0x170000E8")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005E0")]
			[Address(RVA = "0x8ED0D4", Offset = "0x8ED0D4", VA = "0x8ED0D4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000E9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005E2")]
			[Address(RVA = "0x8ED11C", Offset = "0x8ED11C", VA = "0x8ED11C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005DD")]
		[Address(RVA = "0x8E5768", Offset = "0x8E5768", VA = "0x8E5768")]
		[DebuggerHidden]
		public <OnRoundFinishedFailed>d__26(int <>1__state)
		{
		}

		[Token(Token = "0x60005DE")]
		[Address(RVA = "0x8ECD5C", Offset = "0x8ECD5C", VA = "0x8ECD5C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005DF")]
		[Address(RVA = "0x8ECD60", Offset = "0x8ECD60", VA = "0x8ECD60", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005E1")]
		[Address(RVA = "0x8ED0DC", Offset = "0x8ED0DC", VA = "0x8ED0DC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000CC")]
	[CompilerGenerated]
	private sealed class <OnRoundFinishedFailedRoyal>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400053A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400053B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string <playlist>5__2;

		[Token(Token = "0x170000EA")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005E6")]
			[Address(RVA = "0x8ED49C", Offset = "0x8ED49C", VA = "0x8ED49C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005E8")]
			[Address(RVA = "0x8ED4E4", Offset = "0x8ED4E4", VA = "0x8ED4E4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005E3")]
		[Address(RVA = "0x8E57F0", Offset = "0x8E57F0", VA = "0x8E57F0")]
		[DebuggerHidden]
		public <OnRoundFinishedFailedRoyal>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x60005E4")]
		[Address(RVA = "0x8ED124", Offset = "0x8ED124", VA = "0x8ED124", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005E5")]
		[Address(RVA = "0x8ED128", Offset = "0x8ED128", VA = "0x8ED128", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005E7")]
		[Address(RVA = "0x8ED4A4", Offset = "0x8ED4A4", VA = "0x8ED4A4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000CD")]
	[CompilerGenerated]
	private sealed class <OnEndlessModeFinish>d__28 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400053C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400053D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400053E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string <playlist>5__2;

		[Token(Token = "0x170000EC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005EC")]
			[Address(RVA = "0x8ED734", Offset = "0x8ED734", VA = "0x8ED734", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000ED")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005EE")]
			[Address(RVA = "0x8ED77C", Offset = "0x8ED77C", VA = "0x8ED77C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005E9")]
		[Address(RVA = "0x8E5878", Offset = "0x8E5878", VA = "0x8E5878")]
		[DebuggerHidden]
		public <OnEndlessModeFinish>d__28(int <>1__state)
		{
		}

		[Token(Token = "0x60005EA")]
		[Address(RVA = "0x8ED4EC", Offset = "0x8ED4EC", VA = "0x8ED4EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005EB")]
		[Address(RVA = "0x8ED4F0", Offset = "0x8ED4F0", VA = "0x8ED4F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005ED")]
		[Address(RVA = "0x8ED73C", Offset = "0x8ED73C", VA = "0x8ED73C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000CE")]
	[CompilerGenerated]
	private sealed class <OnCreativeModeFinish>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400053F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string <playlist>5__2;

		[Token(Token = "0x170000EE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005F2")]
			[Address(RVA = "0x8ED9CC", Offset = "0x8ED9CC", VA = "0x8ED9CC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005F4")]
			[Address(RVA = "0x8EDA14", Offset = "0x8EDA14", VA = "0x8EDA14", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005EF")]
		[Address(RVA = "0x8E5900", Offset = "0x8E5900", VA = "0x8E5900")]
		[DebuggerHidden]
		public <OnCreativeModeFinish>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x60005F0")]
		[Address(RVA = "0x8ED784", Offset = "0x8ED784", VA = "0x8ED784", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005F1")]
		[Address(RVA = "0x8ED788", Offset = "0x8ED788", VA = "0x8ED788", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005F3")]
		[Address(RVA = "0x8ED9D4", Offset = "0x8ED9D4", VA = "0x8ED9D4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000CF")]
	[CompilerGenerated]
	private sealed class <OnTutorialModeFinish>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x170000F0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005F8")]
			[Address(RVA = "0x8EDC60", Offset = "0x8EDC60", VA = "0x8EDC60", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60005FA")]
			[Address(RVA = "0x8EDCA8", Offset = "0x8EDCA8", VA = "0x8EDCA8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005F5")]
		[Address(RVA = "0x8E5BAC", Offset = "0x8E5BAC", VA = "0x8E5BAC")]
		[DebuggerHidden]
		public <OnTutorialModeFinish>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x60005F6")]
		[Address(RVA = "0x8EDA1C", Offset = "0x8EDA1C", VA = "0x8EDA1C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005F7")]
		[Address(RVA = "0x8EDA20", Offset = "0x8EDA20", VA = "0x8EDA20", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005F9")]
		[Address(RVA = "0x8EDC68", Offset = "0x8EDC68", VA = "0x8EDC68", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000D0")]
	[CompilerGenerated]
	private sealed class <OnBotStartWorking>d__175 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Bot bot;

		[Token(Token = "0x4000547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform transform;

		[Token(Token = "0x4000548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public RecipeIngredient ingredient;

		[Token(Token = "0x4000549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int plateID;

		[Token(Token = "0x170000F2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60005FE")]
			[Address(RVA = "0x8EE098", Offset = "0x8EE098", VA = "0x8EE098", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000600")]
			[Address(RVA = "0x8EE0E0", Offset = "0x8EE0E0", VA = "0x8EE0E0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005FB")]
		[Address(RVA = "0x8EBFB8", Offset = "0x8EBFB8", VA = "0x8EBFB8")]
		[DebuggerHidden]
		public <OnBotStartWorking>d__175(int <>1__state)
		{
		}

		[Token(Token = "0x60005FC")]
		[Address(RVA = "0x8EDCB0", Offset = "0x8EDCB0", VA = "0x8EDCB0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60005FD")]
		[Address(RVA = "0x8EDCB4", Offset = "0x8EDCB4", VA = "0x8EDCB4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60005FF")]
		[Address(RVA = "0x8EE0A0", Offset = "0x8EE0A0", VA = "0x8EE0A0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000D1")]
	[CompilerGenerated]
	private sealed class <OnBotStartWashing>d__176 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400054A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400054B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400054C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Bot bot;

		[Token(Token = "0x400054D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform transform;

		[Token(Token = "0x400054E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int plateID;

		[Token(Token = "0x170000F4")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000604")]
			[Address(RVA = "0x8EE2E0", Offset = "0x8EE2E0", VA = "0x8EE2E0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000606")]
			[Address(RVA = "0x8EE328", Offset = "0x8EE328", VA = "0x8EE328", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000601")]
		[Address(RVA = "0x8EC05C", Offset = "0x8EC05C", VA = "0x8EC05C")]
		[DebuggerHidden]
		public <OnBotStartWashing>d__176(int <>1__state)
		{
		}

		[Token(Token = "0x6000602")]
		[Address(RVA = "0x8EE0E8", Offset = "0x8EE0E8", VA = "0x8EE0E8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000603")]
		[Address(RVA = "0x8EE0EC", Offset = "0x8EE0EC", VA = "0x8EE0EC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000605")]
		[Address(RVA = "0x8EE2E8", Offset = "0x8EE2E8", VA = "0x8EE2E8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000531")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool xmasMode;

	[Token(Token = "0x6000519")]
	[Address(RVA = "0x8E4578", Offset = "0x8E4578", VA = "0x8E4578")]
	internal static void OnGrabBegin(Transform grabbedTransform)
	{
	}

	[Token(Token = "0x600051A")]
	[Address(RVA = "0x8E4600", Offset = "0x8E4600", VA = "0x8E4600")]
	internal static void PlayMagicPoofAt(Transform transform)
	{
	}

	[Token(Token = "0x600051B")]
	[Address(RVA = "0x8E4688", Offset = "0x8E4688", VA = "0x8E4688")]
	internal static void PlayMagicPoofAt(Vector3 position)
	{
	}

	[Token(Token = "0x600051C")]
	[Address(RVA = "0x8E4730", Offset = "0x8E4730", VA = "0x8E4730")]
	internal static void OnThrown(Transform transform)
	{
	}

	[Token(Token = "0x600051D")]
	[Address(RVA = "0x8E47CC", Offset = "0x8E47CC", VA = "0x8E47CC")]
	internal static void OnBroFist(Vector3 position)
	{
	}

	[Token(Token = "0x600051E")]
	[Address(RVA = "0x8E4874", Offset = "0x8E4874", VA = "0x8E4874")]
	internal static void OnFencing(Vector3 position)
	{
	}

	[Token(Token = "0x600051F")]
	[Address(RVA = "0x8E491C", Offset = "0x8E491C", VA = "0x8E491C")]
	internal static void OnHighFive(Vector3 position)
	{
	}

	[Token(Token = "0x6000520")]
	[Address(RVA = "0x8E49C4", Offset = "0x8E49C4", VA = "0x8E49C4")]
	internal static PlaySoundResult OnPlateSpawn(Transform transform)
	{
		return null;
	}

	[Token(Token = "0x6000521")]
	[Address(RVA = "0x8E4A60", Offset = "0x8E4A60", VA = "0x8E4A60")]
	internal static void OnPlateGrabbed(Transform transform)
	{
	}

	[Token(Token = "0x6000522")]
	[Address(RVA = "0x8E4AFC", Offset = "0x8E4AFC", VA = "0x8E4AFC")]
	internal static void OnPlatePutDown(Transform transform)
	{
	}

	[Token(Token = "0x6000523")]
	[Address(RVA = "0x8E4B84", Offset = "0x8E4B84", VA = "0x8E4B84")]
	internal static void OnPlateHandedIn(Transform transform)
	{
	}

	[Token(Token = "0x6000524")]
	[Address(RVA = "0x8E4C20", Offset = "0x8E4C20", VA = "0x8E4C20")]
	internal static void OnPlateHandedInPerfectly(Transform transform)
	{
	}

	[Token(Token = "0x6000525")]
	[Address(RVA = "0x8E4D58", Offset = "0x8E4D58", VA = "0x8E4D58")]
	internal static void OnPlateHandedInNewRecipe(Transform transform)
	{
	}

	[Token(Token = "0x6000526")]
	[Address(RVA = "0x8E4DF4", Offset = "0x8E4DF4", VA = "0x8E4DF4")]
	internal static void OnPlateHandedInOldRecipe(Transform transform)
	{
	}

	[Token(Token = "0x6000527")]
	[Address(RVA = "0x8E4E90", Offset = "0x8E4E90", VA = "0x8E4E90")]
	internal static void OnPlateAssembledPerfectly(Transform transform)
	{
	}

	[Token(Token = "0x6000528")]
	[Address(RVA = "0x8E4E94", Offset = "0x8E4E94", VA = "0x8E4E94")]
	internal static void OnCorrectIngredientAddedToPlate(Transform transform)
	{
	}

	[Token(Token = "0x6000529")]
	[Address(RVA = "0x8E4F30", Offset = "0x8E4F30", VA = "0x8E4F30")]
	internal static void OnWrongIngredientAddedToPlate(Transform transform)
	{
	}

	[Token(Token = "0x600052A")]
	[Address(RVA = "0x8E4FCC", Offset = "0x8E4FCC", VA = "0x8E4FCC")]
	internal static void OnPlateShake(Transform transform)
	{
	}

	[Token(Token = "0x600052B")]
	[Address(RVA = "0x8E5068", Offset = "0x8E5068", VA = "0x8E5068")]
	internal static void OnPlateCrack(Transform transform)
	{
	}

	[Token(Token = "0x600052C")]
	[Address(RVA = "0x8E5104", Offset = "0x8E5104", VA = "0x8E5104")]
	internal static void OnPlateCollision(Transform transform)
	{
	}

	[Token(Token = "0x600052D")]
	[Address(RVA = "0x8E51A0", Offset = "0x8E51A0", VA = "0x8E51A0")]
	internal static void OnPlateIngredientAddedHard(Transform transform)
	{
	}

	[Token(Token = "0x600052E")]
	[Address(RVA = "0x8E523C", Offset = "0x8E523C", VA = "0x8E523C")]
	internal static void OnCountdownStart(Transform transform)
	{
	}

	[Token(Token = "0x600052F")]
	[Address(RVA = "0x8E5334", Offset = "0x8E5334", VA = "0x8E5334")]
	internal static void PlayLauncherMenuMusic()
	{
	}

	[Token(Token = "0x6000530")]
	[Address(RVA = "0x8E539C", Offset = "0x8E539C", VA = "0x8E539C")]
	internal static void OnRoundStarted()
	{
	}

	[Token(Token = "0x6000531")]
	[Address(RVA = "0x8E5674", Offset = "0x8E5674", VA = "0x8E5674")]
	[IteratorStateMachine(typeof(<OnRoundFinishedWin>d__25))]
	internal static IEnumerator OnRoundFinishedWin(bool finalLevel)
	{
		return null;
	}

	[Token(Token = "0x6000532")]
	[Address(RVA = "0x8E5708", Offset = "0x8E5708", VA = "0x8E5708")]
	[IteratorStateMachine(typeof(<OnRoundFinishedFailed>d__26))]
	internal static IEnumerator OnRoundFinishedFailed()
	{
		return null;
	}

	[Token(Token = "0x6000533")]
	[Address(RVA = "0x8E5790", Offset = "0x8E5790", VA = "0x8E5790")]
	[IteratorStateMachine(typeof(<OnRoundFinishedFailedRoyal>d__27))]
	internal static IEnumerator OnRoundFinishedFailedRoyal()
	{
		return null;
	}

	[Token(Token = "0x6000534")]
	[Address(RVA = "0x8E5818", Offset = "0x8E5818", VA = "0x8E5818")]
	[IteratorStateMachine(typeof(<OnEndlessModeFinish>d__28))]
	internal static IEnumerator OnEndlessModeFinish()
	{
		return null;
	}

	[Token(Token = "0x6000535")]
	[Address(RVA = "0x8E58A0", Offset = "0x8E58A0", VA = "0x8E58A0")]
	[IteratorStateMachine(typeof(<OnCreativeModeFinish>d__29))]
	internal static IEnumerator OnCreativeModeFinish()
	{
		return null;
	}

	[Token(Token = "0x6000536")]
	[Address(RVA = "0x8E5928", Offset = "0x8E5928", VA = "0x8E5928")]
	internal static void OnEndlessRevealCustomerServed(Transform transform)
	{
	}

	[Token(Token = "0x6000537")]
	[Address(RVA = "0x8E59C4", Offset = "0x8E59C4", VA = "0x8E59C4")]
	internal static void OnEndlessCustomerServedTrail(Transform transform)
	{
	}

	[Token(Token = "0x6000538")]
	[Address(RVA = "0x8E5A60", Offset = "0x8E5A60", VA = "0x8E5A60")]
	internal static void OnNewEndlessHighScore(Transform transform)
	{
	}

	[Token(Token = "0x6000539")]
	[Address(RVA = "0x8E5B4C", Offset = "0x8E5B4C", VA = "0x8E5B4C")]
	[IteratorStateMachine(typeof(<OnTutorialModeFinish>d__33))]
	internal static IEnumerator OnTutorialModeFinish(float stingerPlayTime)
	{
		return null;
	}

	[Token(Token = "0x600053A")]
	[Address(RVA = "0x8E5BD4", Offset = "0x8E5BD4", VA = "0x8E5BD4")]
	internal static void OnTutorialAborted()
	{
	}

	[Token(Token = "0x600053B")]
	[Address(RVA = "0x8E5D38", Offset = "0x8E5D38", VA = "0x8E5D38")]
	internal static void OnCreativeRevealRecipesUnlocked(Transform transform)
	{
	}

	[Token(Token = "0x600053C")]
	[Address(RVA = "0x8E5DD4", Offset = "0x8E5DD4", VA = "0x8E5DD4")]
	internal static void OnPlayerVoting(CookoutAvatarHand hand)
	{
	}

	[Token(Token = "0x600053D")]
	[Address(RVA = "0x8E5E8C", Offset = "0x8E5E8C", VA = "0x8E5E8C")]
	internal static void OnPlayerEndVoting(CookoutAvatarHand hand)
	{
	}

	[Token(Token = "0x600053E")]
	[Address(RVA = "0x8E5F18", Offset = "0x8E5F18", VA = "0x8E5F18")]
	internal static void OnPlayerVotedYes(CookoutAvatarHand hand)
	{
	}

	[Token(Token = "0x600053F")]
	[Address(RVA = "0x8E5FD0", Offset = "0x8E5FD0", VA = "0x8E5FD0")]
	internal static void OnPlayerVotedNo(CookoutAvatarHand hand)
	{
	}

	[Token(Token = "0x6000540")]
	[Address(RVA = "0x8E6088", Offset = "0x8E6088", VA = "0x8E6088")]
	internal static void OnBurningIngredientTouchWater(Transform transform)
	{
	}

	[Token(Token = "0x6000541")]
	[Address(RVA = "0x8E6124", Offset = "0x8E6124", VA = "0x8E6124")]
	internal static void StartFrySoundLoop(Transform transform)
	{
	}

	[Token(Token = "0x6000542")]
	[Address(RVA = "0x8E6210", Offset = "0x8E6210", VA = "0x8E6210")]
	internal static void StopFrySoundLoop(Transform transform)
	{
	}

	[Token(Token = "0x6000543")]
	[Address(RVA = "0x8E6288", Offset = "0x8E6288", VA = "0x8E6288")]
	internal static void startFireLoop(Transform transform)
	{
	}

	[Token(Token = "0x6000544")]
	[Address(RVA = "0x8E6374", Offset = "0x8E6374", VA = "0x8E6374")]
	internal static void StopFireLoop(Transform transform)
	{
	}

	[Token(Token = "0x6000545")]
	[Address(RVA = "0x8E63EC", Offset = "0x8E63EC", VA = "0x8E63EC")]
	internal static void OnEatIngredient(Transform transform)
	{
	}

	[Token(Token = "0x6000546")]
	[Address(RVA = "0x8E6488", Offset = "0x8E6488", VA = "0x8E6488")]
	internal static void OnIngredientThrownCollision(Transform transform, Grabbable.GrabbableDropSound dropSound)
	{
	}

	[Token(Token = "0x6000547")]
	[Address(RVA = "0x8E653C", Offset = "0x8E653C", VA = "0x8E653C")]
	internal static void OnIngredientNicelyFriedFeedback(Vector3 position)
	{
	}

	[Token(Token = "0x6000548")]
	[Address(RVA = "0x8E65E4", Offset = "0x8E65E4", VA = "0x8E65E4")]
	internal static void OnIngredientOnFireAlarm(Vector3 position)
	{
	}

	[Token(Token = "0x6000549")]
	[Address(RVA = "0x8E668C", Offset = "0x8E668C", VA = "0x8E668C")]
	internal static void OnGrabBurningObject(Transform transform)
	{
	}

	[Token(Token = "0x600054A")]
	[Address(RVA = "0x8E6728", Offset = "0x8E6728", VA = "0x8E6728")]
	internal static void OnIngredientSliced(Transform transform)
	{
	}

	[Token(Token = "0x600054B")]
	[Address(RVA = "0x8E67C4", Offset = "0x8E67C4", VA = "0x8E67C4")]
	internal static void OnCuttingBoardChop(Transform transform)
	{
	}

	[Token(Token = "0x600054C")]
	[Address(RVA = "0x8E6860", Offset = "0x8E6860", VA = "0x8E6860")]
	internal static void OnIngredientChop(Transform transform)
	{
	}

	[Token(Token = "0x600054D")]
	[Address(RVA = "0x8E68FC", Offset = "0x8E68FC", VA = "0x8E68FC")]
	internal static void OnUnlockGrill(Transform transform)
	{
	}

	[Token(Token = "0x600054E")]
	[Address(RVA = "0x8E6998", Offset = "0x8E6998", VA = "0x8E6998")]
	internal static void OnUnlockWashBasin(Transform transform)
	{
	}

	[Token(Token = "0x600054F")]
	[Address(RVA = "0x8E6A34", Offset = "0x8E6A34", VA = "0x8E6A34")]
	internal static void OnCleaverTransformToBouquet(Transform transform)
	{
	}

	[Token(Token = "0x6000550")]
	[Address(RVA = "0x8E6B04", Offset = "0x8E6B04", VA = "0x8E6B04")]
	internal static void OnBouquetTransformToCleaver(Transform transform)
	{
	}

	[Token(Token = "0x6000551")]
	[Address(RVA = "0x8E6B8C", Offset = "0x8E6B8C", VA = "0x8E6B8C")]
	internal static void OnExtinguisherSprayStarted(Transform transform)
	{
	}

	[Token(Token = "0x6000552")]
	[Address(RVA = "0x8E6C78", Offset = "0x8E6C78", VA = "0x8E6C78")]
	internal static void OnExtinguisherSprayStopped(Transform transform, bool immediate = false)
	{
	}

	[Token(Token = "0x6000553")]
	[Address(RVA = "0x8E6D70", Offset = "0x8E6D70", VA = "0x8E6D70")]
	internal static void OnFridgeButtonClicked(Transform transform)
	{
	}

	[Token(Token = "0x6000554")]
	[Address(RVA = "0x8E6E0C", Offset = "0x8E6E0C", VA = "0x8E6E0C")]
	internal static void OnFridgeExtending(Transform transform)
	{
	}

	[Token(Token = "0x6000555")]
	[Address(RVA = "0x8E6EA8", Offset = "0x8E6EA8", VA = "0x8E6EA8")]
	internal static void OnFridgeLowering(Transform transform)
	{
	}

	[Token(Token = "0x6000556")]
	[Address(RVA = "0x8E6F44", Offset = "0x8E6F44", VA = "0x8E6F44")]
	internal static void OnFridgeMist(Transform transform)
	{
	}

	[Token(Token = "0x6000557")]
	[Address(RVA = "0x8E6FE0", Offset = "0x8E6FE0", VA = "0x8E6FE0")]
	internal static void OnSpiceShakers(Transform transform)
	{
	}

	[Token(Token = "0x6000558")]
	[Address(RVA = "0x8E707C", Offset = "0x8E707C", VA = "0x8E707C")]
	internal static PlaySoundResult OnCondimentSqueeze(Transform transform)
	{
		return null;
	}

	[Token(Token = "0x6000559")]
	[Address(RVA = "0x8E7118", Offset = "0x8E7118", VA = "0x8E7118")]
	internal static void OnWashScrubbing(Transform transform)
	{
	}

	[Token(Token = "0x600055A")]
	[Address(RVA = "0x8E71B4", Offset = "0x8E71B4", VA = "0x8E71B4")]
	internal static void OnDryScrubbing(Transform transform)
	{
	}

	[Token(Token = "0x600055B")]
	[Address(RVA = "0x8E7250", Offset = "0x8E7250", VA = "0x8E7250")]
	internal static void OnWashWetPlate(Transform transform)
	{
	}

	[Token(Token = "0x600055C")]
	[Address(RVA = "0x8E72EC", Offset = "0x8E72EC", VA = "0x8E72EC")]
	internal static void OnWashClean(Transform transform)
	{
	}

	[Token(Token = "0x600055D")]
	[Address(RVA = "0x8E7388", Offset = "0x8E7388", VA = "0x8E7388")]
	internal static void OnWashInstaCleaned(Transform transform)
	{
	}

	[Token(Token = "0x600055E")]
	[Address(RVA = "0x8E7474", Offset = "0x8E7474", VA = "0x8E7474")]
	internal static void OnCustomerEat(Transform transform)
	{
	}

	[Token(Token = "0x600055F")]
	[Address(RVA = "0x8E7510", Offset = "0x8E7510", VA = "0x8E7510")]
	internal static void OnCustomerServedPerfect(Transform transform, CustomerType customerType, bool isFemale)
	{
	}

	[Token(Token = "0x6000560")]
	[Address(RVA = "0x8E778C", Offset = "0x8E778C", VA = "0x8E778C")]
	internal static void OnCustomerServedNonPerfect(Transform transform, CustomerType customerType, bool isFemale)
	{
	}

	[Token(Token = "0x6000561")]
	[Address(RVA = "0x8E7868", Offset = "0x8E7868", VA = "0x8E7868")]
	internal static void OnCustomerArrival(Transform transform, CustomerType customerType, bool isFemale)
	{
	}

	[Token(Token = "0x6000562")]
	[Address(RVA = "0x8E7944", Offset = "0x8E7944", VA = "0x8E7944")]
	internal static void OnCustomerTimeRunningOut(Transform transform, CustomerType customerType, bool isFemale)
	{
	}

	[Token(Token = "0x6000563")]
	[Address(RVA = "0x8E7A20", Offset = "0x8E7A20", VA = "0x8E7A20")]
	internal static void OnCustomerTimedOut(Transform transform, CustomerType customerType, bool isFemale)
	{
	}

	[Token(Token = "0x6000564")]
	[Address(RVA = "0x8E7AFC", Offset = "0x8E7AFC", VA = "0x8E7AFC")]
	internal static void OnJesterAbility(Transform transform)
	{
	}

	[Token(Token = "0x6000565")]
	[Address(RVA = "0x8E7B98", Offset = "0x8E7B98", VA = "0x8E7B98")]
	internal static void OnThiefSteal(Transform transform)
	{
	}

	[Token(Token = "0x6000566")]
	[Address(RVA = "0x8E7C34", Offset = "0x8E7C34", VA = "0x8E7C34")]
	internal static void OnFinalBossAskForMore(Transform transform, CustomerType customerType)
	{
	}

	[Token(Token = "0x6000567")]
	[Address(RVA = "0x8E7D30", Offset = "0x8E7D30", VA = "0x8E7D30")]
	internal static void OnFinalBossIsFull(Transform transform, CustomerType customerType)
	{
	}

	[Token(Token = "0x6000568")]
	[Address(RVA = "0x8E7E2C", Offset = "0x8E7E2C", VA = "0x8E7E2C")]
	internal static void OnFinalBossCelebrate(Transform transform, CustomerType customerType)
	{
	}

	[Token(Token = "0x6000569")]
	[Address(RVA = "0x8E7F28", Offset = "0x8E7F28", VA = "0x8E7F28")]
	internal static void OnCustomerHitLight(Transform transform)
	{
	}

	[Token(Token = "0x600056A")]
	[Address(RVA = "0x8E7FC4", Offset = "0x8E7FC4", VA = "0x8E7FC4")]
	internal static void OnCustomerHitHeavy(Transform transform)
	{
	}

	[Token(Token = "0x600056B")]
	[Address(RVA = "0x8E8060", Offset = "0x8E8060", VA = "0x8E8060")]
	internal static void OnHandingInFailedPlate(Transform transform, CustomerType type)
	{
	}

	[Token(Token = "0x600056C")]
	[Address(RVA = "0x8E75EC", Offset = "0x8E75EC", VA = "0x8E75EC")]
	private static string GetCustomerSpecificTrigger(CustomerType customerType, bool isFemale)
	{
		return null;
	}

	[Token(Token = "0x600056D")]
	[Address(RVA = "0x8E81C8", Offset = "0x8E81C8", VA = "0x8E81C8")]
	internal static void OnEnvironmentChanged()
	{
	}

	[Token(Token = "0x600056E")]
	[Address(RVA = "0x8E8420", Offset = "0x8E8420", VA = "0x8E8420")]
	internal static PlaySoundResult EnvironmentAmbience(int index, Transform transform)
	{
		return null;
	}

	[Token(Token = "0x600056F")]
	[Address(RVA = "0x8E44D4", Offset = "0x8E44D4", VA = "0x8E44D4")]
	internal static void LauncherAmbience(Transform transform)
	{
	}

	[Token(Token = "0x6000570")]
	[Address(RVA = "0x8E84F0", Offset = "0x8E84F0", VA = "0x8E84F0")]
	internal static void PlayLiftUpSound(Transform transform)
	{
	}

	[Token(Token = "0x6000571")]
	[Address(RVA = "0x8E858C", Offset = "0x8E858C", VA = "0x8E858C")]
	internal static void PlayLiftDownSound(Transform transform)
	{
	}

	[Token(Token = "0x6000572")]
	[Address(RVA = "0x8E8628", Offset = "0x8E8628", VA = "0x8E8628")]
	internal static void OnFryingPanSoftHit(Transform transform)
	{
	}

	[Token(Token = "0x6000573")]
	[Address(RVA = "0x8E86C4", Offset = "0x8E86C4", VA = "0x8E86C4")]
	internal static void OnFryingPanHardHit(Transform transform)
	{
	}

	[Token(Token = "0x6000574")]
	[Address(RVA = "0x8E8760", Offset = "0x8E8760", VA = "0x8E8760")]
	internal static void OnRadishDudeHit(Transform transform)
	{
	}

	[Token(Token = "0x6000575")]
	[Address(RVA = "0x8E87FC", Offset = "0x8E87FC", VA = "0x8E87FC")]
	internal static void OnCatHit(Transform transform)
	{
	}

	[Token(Token = "0x6000576")]
	[Address(RVA = "0x8E8898", Offset = "0x8E8898", VA = "0x8E8898")]
	internal static void OnCatPet(Transform transform)
	{
	}

	[Token(Token = "0x6000577")]
	[Address(RVA = "0x8E8934", Offset = "0x8E8934", VA = "0x8E8934")]
	internal static void OnCabinIsMoving(Transform transform)
	{
	}

	[Token(Token = "0x6000578")]
	[Address(RVA = "0x8E89D0", Offset = "0x8E89D0", VA = "0x8E89D0")]
	internal static void OnMapTransition(Transform transform)
	{
	}

	[Token(Token = "0x6000579")]
	[Address(RVA = "0x8E8A6C", Offset = "0x8E8A6C", VA = "0x8E8A6C")]
	internal static void OnContinueMarkerMove(Transform transform)
	{
	}

	[Token(Token = "0x600057A")]
	[Address(RVA = "0x8E8B08", Offset = "0x8E8B08", VA = "0x8E8B08")]
	internal static void OnBubbleSpawn(Transform transform)
	{
	}

	[Token(Token = "0x600057B")]
	[Address(RVA = "0x8E8BA4", Offset = "0x8E8BA4", VA = "0x8E8BA4")]
	internal static void OnBubblePop(Transform transform)
	{
	}

	[Token(Token = "0x600057C")]
	[Address(RVA = "0x8E8C40", Offset = "0x8E8C40", VA = "0x8E8C40")]
	internal static void OnRewardCoins(Transform transform)
	{
	}

	[Token(Token = "0x600057D")]
	[Address(RVA = "0x8E8D2C", Offset = "0x8E8D2C", VA = "0x8E8D2C")]
	internal static void OnRewardConsumable(Transform transform)
	{
	}

	[Token(Token = "0x600057E")]
	[Address(RVA = "0x8E8DC8", Offset = "0x8E8DC8", VA = "0x8E8DC8")]
	internal static void OnRewardConsumable(Vector3 position)
	{
	}

	[Token(Token = "0x600057F")]
	[Address(RVA = "0x8E8E70", Offset = "0x8E8E70", VA = "0x8E8E70")]
	internal static void OnRewardItem(Transform transform)
	{
	}

	[Token(Token = "0x6000580")]
	[Address(RVA = "0x8E8F0C", Offset = "0x8E8F0C", VA = "0x8E8F0C")]
	internal static PlaySoundResult OnPotionPour(Transform transform)
	{
		return null;
	}

	[Token(Token = "0x6000581")]
	[Address(RVA = "0x8E8FA8", Offset = "0x8E8FA8", VA = "0x8E8FA8")]
	internal static void OnDrink(Transform transform)
	{
	}

	[Token(Token = "0x6000582")]
	[Address(RVA = "0x8E9044", Offset = "0x8E9044", VA = "0x8E9044")]
	internal static void OnUncorkPotion(Transform transform)
	{
	}

	[Token(Token = "0x6000583")]
	[Address(RVA = "0x8E90E0", Offset = "0x8E90E0", VA = "0x8E90E0")]
	internal static void OnInstantGrillActivated(Vector3 position)
	{
	}

	[Token(Token = "0x6000584")]
	[Address(RVA = "0x8E9188", Offset = "0x8E9188", VA = "0x8E9188")]
	internal static void OnInstantWashActivated(Vector3 position)
	{
	}

	[Token(Token = "0x6000585")]
	[Address(RVA = "0x8E9278", Offset = "0x8E9278", VA = "0x8E9278")]
	internal static void OnInstantSandwichActivated(Vector3 position)
	{
	}

	[Token(Token = "0x6000586")]
	[Address(RVA = "0x8E9320", Offset = "0x8E9320", VA = "0x8E9320")]
	internal static void OnPerfectizerActivated(Vector3 position)
	{
	}

	[Token(Token = "0x6000587")]
	[Address(RVA = "0x8E93C8", Offset = "0x8E93C8", VA = "0x8E93C8")]
	internal static void OnSuperSharpActivated(Vector3 position)
	{
	}

	[Token(Token = "0x6000588")]
	[Address(RVA = "0x8E9470", Offset = "0x8E9470", VA = "0x8E9470")]
	internal static void OnTofuActivated(Vector3 position)
	{
	}

	[Token(Token = "0x6000589")]
	[Address(RVA = "0x8E9518", Offset = "0x8E9518", VA = "0x8E9518")]
	internal static void OnTownCelebrationStarFilling(Transform transform)
	{
	}

	[Token(Token = "0x600058A")]
	[Address(RVA = "0x8E95B4", Offset = "0x8E95B4", VA = "0x8E95B4")]
	internal static void OnTownCelebrationStarStopFilling(Transform transform)
	{
	}

	[Token(Token = "0x600058B")]
	[Address(RVA = "0x8E9624", Offset = "0x8E9624", VA = "0x8E9624")]
	internal static void OnTownCelebrationStar1Filled(Transform transform)
	{
	}

	[Token(Token = "0x600058C")]
	[Address(RVA = "0x8E9710", Offset = "0x8E9710", VA = "0x8E9710")]
	internal static void OnTownCelebrationStar2Filled(Transform transform)
	{
	}

	[Token(Token = "0x600058D")]
	[Address(RVA = "0x8E97FC", Offset = "0x8E97FC", VA = "0x8E97FC")]
	internal static void OnTownCelebrationStar3Filled(Transform transform)
	{
	}

	[Token(Token = "0x600058E")]
	[Address(RVA = "0x8E98E8", Offset = "0x8E98E8", VA = "0x8E98E8")]
	internal static void OnTownCelebrationConfetti(Transform transform)
	{
	}

	[Token(Token = "0x600058F")]
	[Address(RVA = "0x8E9984", Offset = "0x8E9984", VA = "0x8E9984")]
	internal static void OnTownCelebrationFireworks(Transform transform)
	{
	}

	[Token(Token = "0x6000590")]
	[Address(RVA = "0x8E9A20", Offset = "0x8E9A20", VA = "0x8E9A20")]
	internal static void OnTownCompleteEnter(Transform transform, bool isFinalLevel)
	{
	}

	[Token(Token = "0x6000591")]
	[Address(RVA = "0x8E9B1C", Offset = "0x8E9B1C", VA = "0x8E9B1C")]
	internal static void OnNewEnvironmentUnlocked(Transform transform)
	{
	}

	[Token(Token = "0x6000592")]
	[Address(RVA = "0x8E9BB8", Offset = "0x8E9BB8", VA = "0x8E9BB8")]
	internal static void OnFinalLevelSingleFirework(Transform transform)
	{
	}

	[Token(Token = "0x6000593")]
	[Address(RVA = "0x8E9C54", Offset = "0x8E9C54", VA = "0x8E9C54")]
	internal static void OnFinalLevelMultipleFireworks(Transform transform)
	{
	}

	[Token(Token = "0x6000594")]
	[Address(RVA = "0x8E9CF0", Offset = "0x8E9CF0", VA = "0x8E9CF0")]
	internal static PlaySoundResult OnFinalLevelGoldenSandwich(Transform transform)
	{
		return null;
	}

	[Token(Token = "0x6000595")]
	[Address(RVA = "0x8E9D8C", Offset = "0x8E9D8C", VA = "0x8E9D8C")]
	internal static void PlayClickSoundAt(Transform transform)
	{
	}

	[Token(Token = "0x6000596")]
	[Address(RVA = "0x8E9E28", Offset = "0x8E9E28", VA = "0x8E9E28")]
	internal static void OnButtonLocked(Transform transform)
	{
	}

	[Token(Token = "0x6000597")]
	[Address(RVA = "0x8E9EC4", Offset = "0x8E9EC4", VA = "0x8E9EC4")]
	internal static void PlayStarPopupSound(Transform transform, float delay = 0f)
	{
	}

	[Token(Token = "0x6000598")]
	[Address(RVA = "0x8E9F60", Offset = "0x8E9F60", VA = "0x8E9F60")]
	internal static void OnConsumableEquipped(Transform transform)
	{
	}

	[Token(Token = "0x6000599")]
	[Address(RVA = "0x8E9FFC", Offset = "0x8E9FFC", VA = "0x8E9FFC")]
	internal static void OnConsumableUnequipped(Transform transform)
	{
	}

	[Token(Token = "0x600059A")]
	[Address(RVA = "0x8EA098", Offset = "0x8EA098", VA = "0x8EA098")]
	internal static void OnBuy(Transform transform)
	{
	}

	[Token(Token = "0x600059B")]
	[Address(RVA = "0x8EA134", Offset = "0x8EA134", VA = "0x8EA134")]
	internal static void OnGoalSummaryStarChime(Transform transform)
	{
	}

	[Token(Token = "0x600059C")]
	[Address(RVA = "0x8EA220", Offset = "0x8EA220", VA = "0x8EA220")]
	internal static void OnGoalSummaryFailed(Transform transform)
	{
	}

	[Token(Token = "0x600059D")]
	[Address(RVA = "0x8EA2BC", Offset = "0x8EA2BC", VA = "0x8EA2BC")]
	internal static void OnGoalSummaryBoardFall(Transform transform)
	{
	}

	[Token(Token = "0x600059E")]
	[Address(RVA = "0x8EA358", Offset = "0x8EA358", VA = "0x8EA358")]
	internal static void OnGoalStarFlyingToMeter(Transform transform)
	{
	}

	[Token(Token = "0x600059F")]
	[Address(RVA = "0x8EA3F4", Offset = "0x8EA3F4", VA = "0x8EA3F4")]
	internal static void OnStarBarEnter(Transform transform)
	{
	}

	[Token(Token = "0x60005A0")]
	[Address(RVA = "0x8EA490", Offset = "0x8EA490", VA = "0x8EA490")]
	internal static void OnStarBarExit(Transform transform)
	{
	}

	[Token(Token = "0x60005A1")]
	[Address(RVA = "0x8EA52C", Offset = "0x8EA52C", VA = "0x8EA52C")]
	internal static void OnPreRoundUIEnter(Transform transform)
	{
	}

	[Token(Token = "0x60005A2")]
	[Address(RVA = "0x8EA5C8", Offset = "0x8EA5C8", VA = "0x8EA5C8")]
	internal static void OnPreRoundUIExit(Transform transform)
	{
	}

	[Token(Token = "0x60005A3")]
	[Address(RVA = "0x8EA664", Offset = "0x8EA664", VA = "0x8EA664")]
	internal static void OnTableCenterUIEnter(Transform transform)
	{
	}

	[Token(Token = "0x60005A4")]
	[Address(RVA = "0x8EA700", Offset = "0x8EA700", VA = "0x8EA700")]
	internal static void OnTableCenterUIExit(Transform transform)
	{
	}

	[Token(Token = "0x60005A5")]
	[Address(RVA = "0x8EA79C", Offset = "0x8EA79C", VA = "0x8EA79C")]
	internal static void OnTutorialStepCleared(Transform transform)
	{
	}

	[Token(Token = "0x60005A6")]
	[Address(RVA = "0x8EA838", Offset = "0x8EA838", VA = "0x8EA838")]
	internal static void OnEquipPotionParticles(Transform transform)
	{
	}

	[Token(Token = "0x60005A7")]
	[Address(RVA = "0x8EA924", Offset = "0x8EA924", VA = "0x8EA924")]
	internal static void OnTimeGoalRunningOut(Transform transform, int urgencyLevel)
	{
	}

	[Token(Token = "0x60005A8")]
	[Address(RVA = "0x8EAABC", Offset = "0x8EAABC", VA = "0x8EAABC")]
	internal static void OnTimeGoalFailed(Transform transform)
	{
	}

	[Token(Token = "0x60005A9")]
	[Address(RVA = "0x8EAB60", Offset = "0x8EAB60", VA = "0x8EAB60")]
	internal static void OnStopTimeGoalWarnings(Transform transform)
	{
	}

	[Token(Token = "0x60005AA")]
	[Address(RVA = "0x8EA9FC", Offset = "0x8EA9FC", VA = "0x8EA9FC")]
	internal static void StopAllTimeWarnings(Transform transform)
	{
	}

	[Token(Token = "0x60005AB")]
	[Address(RVA = "0x8EAB64", Offset = "0x8EAB64", VA = "0x8EAB64")]
	internal static void OnPresentNewGoal(Transform transform, int goalID)
	{
	}

	[Token(Token = "0x60005AC")]
	[Address(RVA = "0x8EAC68", Offset = "0x8EAC68", VA = "0x8EAC68")]
	internal static void OnElevatorMusicJingle()
	{
	}

	[Token(Token = "0x60005AD")]
	[Address(RVA = "0x8EACF0", Offset = "0x8EACF0", VA = "0x8EACF0")]
	internal static PlaySoundResult PlayIntroStoryNarration(Transform transform)
	{
		return null;
	}

	[Token(Token = "0x60005AE")]
	[Address(RVA = "0x8EAD8C", Offset = "0x8EAD8C", VA = "0x8EAD8C")]
	internal static PlaySoundResult PlayEndlessStoryNarration(Transform transform)
	{
		return null;
	}

	[Token(Token = "0x60005AF")]
	[Address(RVA = "0x8EAE28", Offset = "0x8EAE28", VA = "0x8EAE28")]
	internal static PlaySoundResult PlayCreativeStoryNarration(Transform transform)
	{
		return null;
	}

	[Token(Token = "0x60005B0")]
	[Address(RVA = "0x8EAF08", Offset = "0x8EAF08", VA = "0x8EAF08")]
	internal static PlaySoundResult OnStoryNarration(Transform transform, CupData data)
	{
		return null;
	}

	[Token(Token = "0x60005B1")]
	[Address(RVA = "0x8EAFA0", Offset = "0x8EAFA0", VA = "0x8EAFA0")]
	internal static void OnStopNarration(Transform transform, CupData data)
	{
	}

	[Token(Token = "0x60005B2")]
	[Address(RVA = "0x8EB00C", Offset = "0x8EB00C", VA = "0x8EB00C")]
	internal static PlaySoundResult PlayFinalLevelOutro(Transform transform, bool threeStarRound)
	{
		return null;
	}

	[Token(Token = "0x60005B3")]
	[Address(RVA = "0x8EB0DC", Offset = "0x8EB0DC", VA = "0x8EB0DC")]
	internal static PlaySoundResult OnItemDroppedSoft(Transform transform, Grabbable.GrabbableDropSound dropSound)
	{
		return null;
	}

	[Token(Token = "0x60005B4")]
	[Address(RVA = "0x8EB1D0", Offset = "0x8EB1D0", VA = "0x8EB1D0")]
	internal static PlaySoundResult OnItemDroppedRegular(Transform transform, Grabbable.GrabbableDropSound dropSound)
	{
		return null;
	}

	[Token(Token = "0x60005B5")]
	[Address(RVA = "0x8EB314", Offset = "0x8EB314", VA = "0x8EB314")]
	internal static PlaySoundResult OnItemDroppedHard(Transform transform, Grabbable.GrabbableDropSound dropSound)
	{
		return null;
	}

	[Token(Token = "0x60005B6")]
	[Address(RVA = "0x8EB480", Offset = "0x8EB480", VA = "0x8EB480")]
	internal static PlaySoundResult OnBotCrank(Transform transform)
	{
		return null;
	}

	[Token(Token = "0x60005B7")]
	[Address(RVA = "0x8EB51C", Offset = "0x8EB51C", VA = "0x8EB51C")]
	internal static PlaySoundResult OnBotPowerDown(Transform transform)
	{
		return null;
	}

	[Token(Token = "0x60005B8")]
	[Address(RVA = "0x8EB5B8", Offset = "0x8EB5B8", VA = "0x8EB5B8")]
	internal static PlaySoundResult OnBotOffline(Transform transform)
	{
		return null;
	}

	[Token(Token = "0x60005B9")]
	[Address(RVA = "0x8EB654", Offset = "0x8EB654", VA = "0x8EB654")]
	internal static PlaySoundResult OnBotPowerUp(Transform transform)
	{
		return null;
	}

	[Token(Token = "0x60005BA")]
	[Address(RVA = "0x8EB6F0", Offset = "0x8EB6F0", VA = "0x8EB6F0")]
	internal static PlaySoundResult OnBotRecharging(Transform transform)
	{
		return null;
	}

	[Token(Token = "0x60005BB")]
	[Address(RVA = "0x8EB78C", Offset = "0x8EB78C", VA = "0x8EB78C")]
	internal static PlaySoundResult OnBotCrankFullyRecharged(Transform transform)
	{
		return null;
	}

	[Token(Token = "0x60005BC")]
	[Address(RVA = "0x8EB828", Offset = "0x8EB828", VA = "0x8EB828")]
	internal static PlaySoundResult OnBotCrankOverchargeCharged(Transform transform)
	{
		return null;
	}

	[Token(Token = "0x60005BD")]
	[Address(RVA = "0x8EB8C4", Offset = "0x8EB8C4", VA = "0x8EB8C4")]
	internal static void OnBotRechargingWhileActive(Transform transform)
	{
	}

	[Token(Token = "0x60005BE")]
	[Address(RVA = "0x8EB960", Offset = "0x8EB960", VA = "0x8EB960")]
	internal static void OnBotSupercharged(Transform transform)
	{
	}

	[Token(Token = "0x60005BF")]
	[Address(RVA = "0x8EB9FC", Offset = "0x8EB9FC", VA = "0x8EB9FC")]
	internal static PlaySoundResult OnBotCrankSupercharged(Transform transform)
	{
		return null;
	}

	[Token(Token = "0x60005C0")]
	[Address(RVA = "0x8EBA98", Offset = "0x8EBA98", VA = "0x8EBA98")]
	internal static void OnBotTurnHead(Transform transform)
	{
	}

	[Token(Token = "0x60005C1")]
	[Address(RVA = "0x8EBB34", Offset = "0x8EBB34", VA = "0x8EBB34")]
	internal static PlaySoundResult OnBotFailedWork(Transform transform)
	{
		return null;
	}

	[Token(Token = "0x60005C2")]
	[Address(RVA = "0x8EBBD0", Offset = "0x8EBBD0", VA = "0x8EBBD0")]
	internal static PlaySoundResult OnBotFinishedWork(Transform transform)
	{
		return null;
	}

	[Token(Token = "0x60005C3")]
	[Address(RVA = "0x8EBC6C", Offset = "0x8EBC6C", VA = "0x8EBC6C")]
	internal static PlaySoundResult OnBotFinishedWash(Transform transform)
	{
		return null;
	}

	[Token(Token = "0x60005C4")]
	[Address(RVA = "0x8EBD58", Offset = "0x8EBD58", VA = "0x8EBD58")]
	internal static PlaySoundResult OnBotRequestHelp(Transform transform)
	{
		return null;
	}

	[Token(Token = "0x60005C5")]
	[Address(RVA = "0x8EBDF4", Offset = "0x8EBDF4", VA = "0x8EBDF4")]
	internal static PlaySoundResult OnBotHitLight(Transform transform)
	{
		return null;
	}

	[Token(Token = "0x60005C6")]
	[Address(RVA = "0x8EBE90", Offset = "0x8EBE90", VA = "0x8EBE90")]
	internal static PlaySoundResult OnBotHitHeavy(Transform transform)
	{
		return null;
	}

	[Token(Token = "0x60005C7")]
	[Address(RVA = "0x8EBF2C", Offset = "0x8EBF2C", VA = "0x8EBF2C")]
	[IteratorStateMachine(typeof(<OnBotStartWorking>d__175))]
	internal static IEnumerator OnBotStartWorking(Transform transform, RecipeIngredient ingredient, int plateID, Bot bot)
	{
		return null;
	}

	[Token(Token = "0x60005C8")]
	[Address(RVA = "0x8EBFE0", Offset = "0x8EBFE0", VA = "0x8EBFE0")]
	[IteratorStateMachine(typeof(<OnBotStartWashing>d__176))]
	internal static IEnumerator OnBotStartWashing(Transform transform, int plateID, Bot bot)
	{
		return null;
	}

	[Token(Token = "0x60005C9")]
	[Address(RVA = "0x8EC084", Offset = "0x8EC084", VA = "0x8EC084")]
	internal static PlaySoundResult OnBotTutorialFullDescription(Transform transform, TutorialStep newStep)
	{
		return null;
	}

	[Token(Token = "0x60005CA")]
	[Address(RVA = "0x8EC158", Offset = "0x8EC158", VA = "0x8EC158")]
	internal static PlaySoundResult OnBotTutorialShortVersion(Transform transform, TutorialStep newStep)
	{
		return null;
	}

	[Token(Token = "0x60005CB")]
	[Address(RVA = "0x8EC254", Offset = "0x8EC254", VA = "0x8EC254")]
	internal static PlaySoundResult OnBotGreetings(Transform transform)
	{
		return null;
	}

	[Token(Token = "0x60005CC")]
	[Address(RVA = "0x8EC2F0", Offset = "0x8EC2F0", VA = "0x8EC2F0")]
	internal static PlaySoundResult OnBotWonRound(Transform transform)
	{
		return null;
	}

	[Token(Token = "0x60005CD")]
	[Address(RVA = "0x8EC38C", Offset = "0x8EC38C", VA = "0x8EC38C")]
	internal static PlaySoundResult OnBotLeave(Transform transform)
	{
		return null;
	}

	[Token(Token = "0x60005CE")]
	[Address(RVA = "0x8EC428", Offset = "0x8EC428", VA = "0x8EC428")]
	internal static PlaySoundResult OnBotLostRound(Transform transform)
	{
		return null;
	}

	[Token(Token = "0x60005CF")]
	[Address(RVA = "0x8EC4C4", Offset = "0x8EC4C4", VA = "0x8EC4C4")]
	internal static PlaySoundResult OnBotRoundCountdownStart(Transform transform)
	{
		return null;
	}

	[Token(Token = "0x60005D0")]
	[Address(RVA = "0x8EC560", Offset = "0x8EC560", VA = "0x8EC560")]
	internal static PlaySoundResult OnBotIdle(Transform transform)
	{
		return null;
	}

	[Token(Token = "0x60005D1")]
	[Address(RVA = "0x8EC5FC", Offset = "0x8EC5FC", VA = "0x8EC5FC")]
	internal static PlaySoundResult OnBotRecommendMultiplayer(Transform transform)
	{
		return null;
	}

	[Token(Token = "0x60005D2")]
	[Address(RVA = "0x8EC698", Offset = "0x8EC698", VA = "0x8EC698")]
	internal static PlaySoundResult OnBotContinueSinglePlayer(Transform transform)
	{
		return null;
	}

	[Token(Token = "0x60005D3")]
	[Address(RVA = "0x8EC734", Offset = "0x8EC734", VA = "0x8EC734")]
	internal static PlaySoundResult OnBotSwitchToMultiplayer(Transform transform)
	{
		return null;
	}

	[Token(Token = "0x60005D4")]
	[Address(RVA = "0x8EC7D0", Offset = "0x8EC7D0", VA = "0x8EC7D0")]
	internal static void OnLogoAnimationStarted(Transform transform)
	{
	}

	[Token(Token = "0x60005D5")]
	[Address(RVA = "0x8EC86C", Offset = "0x8EC86C", VA = "0x8EC86C")]
	internal static void OnLogoAnimationLeave(Transform transform)
	{
	}

	[Token(Token = "0x60005D6")]
	[Address(RVA = "0x8EC908", Offset = "0x8EC908", VA = "0x8EC908")]
	internal static void OnMirrorKissed(Transform transform)
	{
	}
}
[Token(Token = "0x20000D2")]
public class NotNull : Attribute
{
	[Token(Token = "0x6000607")]
	[Address(RVA = "0x8EE330", Offset = "0x8EE330", VA = "0x8EE330")]
	public NotNull()
	{
	}
}
[Token(Token = "0x20000D3")]
public static class AssetValidator
{
	[Token(Token = "0x6000608")]
	[Address(RVA = "0x8EE338", Offset = "0x8EE338", VA = "0x8EE338")]
	private static bool IsNull(object obj)
	{
		return default(bool);
	}

	[Token(Token = "0x6000609")]
	public static void Validate<T>(T component) where T : Component
	{
	}
}
[Token(Token = "0x20000D4")]
public class CollisionCallback : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x400054F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action<Collider> onTriggerEnter;

	[Token(Token = "0x4000550")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Action<Collider> onTriggerExit;

	[Token(Token = "0x600060A")]
	[Address(RVA = "0x8EE3D8", Offset = "0x8EE3D8", VA = "0x8EE3D8")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600060B")]
	[Address(RVA = "0x8EE3F4", Offset = "0x8EE3F4", VA = "0x8EE3F4")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600060C")]
	[Address(RVA = "0x8EE410", Offset = "0x8EE410", VA = "0x8EE410")]
	public CollisionCallback()
	{
	}
}
[Token(Token = "0x20000D5")]
public class CookoutApplicationLifecycle : SingleInstanceBehavior<CookoutApplicationLifecycle>
{
	[Token(Token = "0x20000D6")]
	public delegate void HMDMounted();

	[Token(Token = "0x20000D7")]
	public delegate void HMDUnmounted();

	[Token(Token = "0x20000D8")]
	public delegate void HasFocusChanged();

	[Token(Token = "0x20000D9")]
	public delegate void ApplicationPauseChanged();

	[Token(Token = "0x4000551")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private PhotonView pv;

	[Token(Token = "0x4000552")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private PrefabRegistry prefabRegistry;

	[Token(Token = "0x4000553")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private CookoutControllerSettings cookoutControllerSettings;

	[Token(Token = "0x4000554")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private CookoutAvatar[] avatars;

	[Token(Token = "0x4000555")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private CookoutControllerSettings controllerSettings;

	[Token(Token = "0x400055A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool isInitialized;

	[Token(Token = "0x400055E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private bool hadFocus;

	[Token(Token = "0x400055F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	private bool userWasPresent;

	[Token(Token = "0x170000F6")]
	public static bool IsSinglePlayerPaused
	{
		[Token(Token = "0x6000616")]
		[Address(RVA = "0x8EE900", Offset = "0x8EE900", VA = "0x8EE900")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000F7")]
	public bool IsHMDMounted
	{
		[Token(Token = "0x6000617")]
		[Address(RVA = "0x8EE91C", Offset = "0x8EE91C", VA = "0x8EE91C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000618")]
		[Address(RVA = "0x8EE924", Offset = "0x8EE924", VA = "0x8EE924")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000F8")]
	public bool IsPaused
	{
		[Token(Token = "0x6000619")]
		[Address(RVA = "0x8EE930", Offset = "0x8EE930", VA = "0x8EE930")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600061A")]
		[Address(RVA = "0x8EE938", Offset = "0x8EE938", VA = "0x8EE938")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170000F9")]
	public bool IsFocused
	{
		[Token(Token = "0x600061B")]
		[Address(RVA = "0x8EE944", Offset = "0x8EE944", VA = "0x8EE944")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600061C")]
		[Address(RVA = "0x8EE94C", Offset = "0x8EE94C", VA = "0x8EE94C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x14000002")]
	public event HMDMounted OnHMDMounted
	{
		[Token(Token = "0x600060D")]
		[Address(RVA = "0x8EE418", Offset = "0x8EE418", VA = "0x8EE418")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600060E")]
		[Address(RVA = "0x8EE4B4", Offset = "0x8EE4B4", VA = "0x8EE4B4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000003")]
	public event HMDUnmounted OnHMDUnmounted
	{
		[Token(Token = "0x600060F")]
		[Address(RVA = "0x8EE550", Offset = "0x8EE550", VA = "0x8EE550")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000610")]
		[Address(RVA = "0x8EE5EC", Offset = "0x8EE5EC", VA = "0x8EE5EC")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000004")]
	public event HasFocusChanged OnHasFocusChanged
	{
		[Token(Token = "0x6000611")]
		[Address(RVA = "0x8EE688", Offset = "0x8EE688", VA = "0x8EE688")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000612")]
		[Address(RVA = "0x8EE724", Offset = "0x8EE724", VA = "0x8EE724")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000005")]
	public event ApplicationPauseChanged OnApplicationPauseChanged
	{
		[Token(Token = "0x6000613")]
		[Address(RVA = "0x8EE7C0", Offset = "0x8EE7C0", VA = "0x8EE7C0")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000614")]
		[Address(RVA = "0x8EE85C", Offset = "0x8EE85C", VA = "0x8EE85C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000615")]
	[Address(RVA = "0x8EE8F8", Offset = "0x8EE8F8", VA = "0x8EE8F8")]
	public bool IsInitialized()
	{
		return default(bool);
	}

	[Token(Token = "0x600061D")]
	[Address(RVA = "0x8EE958", Offset = "0x8EE958", VA = "0x8EE958")]
	private void OnInputFocusLost()
	{
	}

	[Token(Token = "0x600061E")]
	[Address(RVA = "0x8EE960", Offset = "0x8EE960", VA = "0x8EE960")]
	private void OnInputFocusAcquired()
	{
	}

	[Token(Token = "0x600061F")]
	[Address(RVA = "0x8EE96C", Offset = "0x8EE96C", VA = "0x8EE96C")]
	public void LocalAvatarInitialized(CookoutAvatar avatar)
	{
	}

	[Token(Token = "0x6000620")]
	[Address(RVA = "0x8EE970", Offset = "0x8EE970", VA = "0x8EE970", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000621")]
	[Address(RVA = "0x8EED94", Offset = "0x8EED94", VA = "0x8EED94", Slot = "5")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x6000622")]
	[Address(RVA = "0x8EEE5C", Offset = "0x8EEE5C", VA = "0x8EEE5C")]
	private void UserNoLongerPresent()
	{
	}

	[Token(Token = "0x6000623")]
	[Address(RVA = "0x8EEE94", Offset = "0x8EEE94", VA = "0x8EEE94")]
	private void UserBecamePresent()
	{
	}

	[Token(Token = "0x6000624")]
	[Address(RVA = "0x8EEEE4", Offset = "0x8EEEE4", VA = "0x8EEEE4")]
	private void OnApplicationPause(bool pause)
	{
	}

	[Token(Token = "0x6000625")]
	[Address(RVA = "0x8EEF08", Offset = "0x8EEF08", VA = "0x8EEF08")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x6000626")]
	[Address(RVA = "0x8EEF64", Offset = "0x8EEF64", VA = "0x8EEF64")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000627")]
	[Address(RVA = "0x8EEFC4", Offset = "0x8EEFC4", VA = "0x8EEFC4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000628")]
	[Address(RVA = "0x8EFB40", Offset = "0x8EFB40", VA = "0x8EFB40")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000629")]
	[Address(RVA = "0x8EFBDC", Offset = "0x8EFBDC", VA = "0x8EFBDC")]
	private static void PauseSinglePlayerGame()
	{
	}

	[Token(Token = "0x600062A")]
	[Address(RVA = "0x8F00C0", Offset = "0x8F00C0", VA = "0x8F00C0")]
	public static void UnpauseSinglePlayerGame()
	{
	}

	[Token(Token = "0x600062B")]
	[Address(RVA = "0x8EEE90", Offset = "0x8EEE90", VA = "0x8EEE90")]
	private void OnHeadsetUnmounted()
	{
	}

	[Token(Token = "0x600062C")]
	[Address(RVA = "0x8EEED4", Offset = "0x8EEED4", VA = "0x8EEED4")]
	private void OnHeadsetMounted()
	{
	}

	[Token(Token = "0x600062D")]
	[Address(RVA = "0x8EFB3C", Offset = "0x8EFB3C", VA = "0x8EFB3C")]
	private void OnLostFocus()
	{
	}

	[Token(Token = "0x600062E")]
	[Address(RVA = "0x8EFB2C", Offset = "0x8EFB2C", VA = "0x8EFB2C")]
	private void OnGotFocus()
	{
	}

	[Token(Token = "0x600062F")]
	[Address(RVA = "0x8F0300", Offset = "0x8F0300", VA = "0x8F0300")]
	public CookoutApplicationLifecycle()
	{
	}
}
[Token(Token = "0x20000DA")]
public enum CookoutPlatformType : byte
{
	[Token(Token = "0x4000561")]
	Invalid,
	[Token(Token = "0x4000562")]
	Oculus,
	[Token(Token = "0x4000563")]
	Steam,
	[Token(Token = "0x4000564")]
	Pico
}
[Token(Token = "0x20000DB")]
public enum ControllerType : byte
{
	[Token(Token = "0x4000566")]
	Invalid,
	[Token(Token = "0x4000567")]
	OculusTouch,
	[Token(Token = "0x4000568")]
	ViveWand,
	[Token(Token = "0x4000569")]
	ValveIndex,
	[Token(Token = "0x400056A")]
	WindowsMixedReality,
	[Token(Token = "0x400056B")]
	HPMotion,
	[Token(Token = "0x400056C")]
	ViveCosmos,
	[Token(Token = "0x400056D")]
	PicoNeo3,
	[Token(Token = "0x400056E")]
	Pico4
}
[Token(Token = "0x20000DC")]
public enum CookoutApplicationState : byte
{
	[Token(Token = "0x4000570")]
	LauncherMenu,
	[Token(Token = "0x4000571")]
	MainGame
}
[Token(Token = "0x20000DD")]
public enum AvatarType : byte
{
	[Token(Token = "0x4000573")]
	Invalid,
	[Token(Token = "0x4000574")]
	OculusAvatar,
	[Token(Token = "0x4000575")]
	CookoutAvatar,
	[Token(Token = "0x4000576")]
	OculusAvatar2
}
[Token(Token = "0x20000DE")]
public enum CookoutAvatarVisualType : byte
{
	[Token(Token = "0x4000578")]
	Monkey,
	[Token(Token = "0x4000579")]
	Sheep,
	[Token(Token = "0x400057A")]
	Pig,
	[Token(Token = "0x400057B")]
	Frog,
	[Token(Token = "0x400057C")]
	Pug,
	[Token(Token = "0x400057D")]
	Cat,
	[Token(Token = "0x400057E")]
	Lion,
	[Token(Token = "0x400057F")]
	Bot,
	[Token(Token = "0x4000580")]
	Schnauzer
}
[Token(Token = "0x20000DF")]
public enum CookoutHandedness : byte
{
	[Token(Token = "0x4000582")]
	Left,
	[Token(Token = "0x4000583")]
	Right
}
[Token(Token = "0x20000E0")]
public enum CookoutVotingHandPose : byte
{
	[Token(Token = "0x4000585")]
	None,
	[Token(Token = "0x4000586")]
	ThumbsUp,
	[Token(Token = "0x4000587")]
	ThumbsDown
}
[Token(Token = "0x20000E1")]
public enum PlayerColor
{
	[Token(Token = "0x4000589")]
	None,
	[Token(Token = "0x400058A")]
	Red,
	[Token(Token = "0x400058B")]
	Yellow,
	[Token(Token = "0x400058C")]
	Blue,
	[Token(Token = "0x400058D")]
	Green
}
[Token(Token = "0x20000E2")]
[Flags]
public enum CookoutHandPose : byte
{
	[Token(Token = "0x400058F")]
	Default = 0,
	[Token(Token = "0x4000590")]
	PointerThumbUp = 1,
	[Token(Token = "0x4000591")]
	RelaxedIndexCurled = 2,
	[Token(Token = "0x4000592")]
	RelaxedThumbCurled = 4,
	[Token(Token = "0x4000593")]
	RelaxedIndexClosed = 8,
	[Token(Token = "0x4000594")]
	ThumbsUp = 3,
	[Token(Token = "0x4000595")]
	Pointer = 5,
	[Token(Token = "0x4000596")]
	thumbIndexCurled = 6,
	[Token(Token = "0x4000597")]
	Fist = 7,
	[Token(Token = "0x4000598")]
	OkSign = 0xC,
	[Token(Token = "0x4000599")]
	OkSignAlt = 0xE,
	[Token(Token = "0x400059A")]
	PointerThumbUpAlt = 9,
	[Token(Token = "0x400059B")]
	RelaxedIndexCurledAlt = 0xA,
	[Token(Token = "0x400059C")]
	ThumbsUpAlt = 0xB,
	[Token(Token = "0x400059D")]
	PointerAlt = 0xD,
	[Token(Token = "0x400059E")]
	FistAlt = 0xF,
	[Token(Token = "0x400059F")]
	CustomGrip = 0x10
}
[Token(Token = "0x20000E3")]
public enum CookoutCustomHandPose : byte
{
	[Token(Token = "0x40005A1")]
	None,
	[Token(Token = "0x40005A2")]
	GrabChessPiece,
	[Token(Token = "0x40005A3")]
	GrabDefault,
	[Token(Token = "0x40005A4")]
	GrabGeneric,
	[Token(Token = "0x40005A5")]
	GrabPencil,
	[Token(Token = "0x40005A6")]
	GrabPhotosphere,
	[Token(Token = "0x40005A7")]
	GrabPingPongBall,
	[Token(Token = "0x40005A8")]
	GrabSelfieStick,
	[Token(Token = "0x40005A9")]
	Handshake,
	[Token(Token = "0x40005AA")]
	HighFive
}
[Serializable]
[Token(Token = "0x20000E4")]
public sealed class CookoutRichPresence
{
	[Token(Token = "0x40005AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string apiName;

	[Token(Token = "0x40005AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool joinable;

	[Token(Token = "0x40005AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string deeplinkMsg;

	[Token(Token = "0x40005AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int capacity;

	[Token(Token = "0x40005AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int capacityMax;

	[Token(Token = "0x6000640")]
	[Address(RVA = "0x8F075C", Offset = "0x8F075C", VA = "0x8F075C")]
	public CookoutRichPresence()
	{
	}
}
[Serializable]
[Token(Token = "0x20000E5")]
public struct CookoutUserId
{
	[Token(Token = "0x40005B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public CookoutPlatformType platformType;

	[Token(Token = "0x40005B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
	public ulong platformId;

	[Token(Token = "0x6000641")]
	[Address(RVA = "0x8F0764", Offset = "0x8F0764", VA = "0x8F0764")]
	public static bool operator ==(CookoutUserId lhs, CookoutUserId rhs)
	{
		return default(bool);
	}

	[Token(Token = "0x6000642")]
	[Address(RVA = "0x8F0950", Offset = "0x8F0950", VA = "0x8F0950")]
	public static bool operator !=(CookoutUserId lhs, CookoutUserId rhs)
	{
		return default(bool);
	}

	[Token(Token = "0x6000643")]
	[Address(RVA = "0x8F09D4", Offset = "0x8F09D4", VA = "0x8F09D4", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x6000644")]
	[Address(RVA = "0x8F07E4", Offset = "0x8F07E4", VA = "0x8F07E4", Slot = "0")]
	public override bool Equals(object o)
	{
		return default(bool);
	}

	[Token(Token = "0x6000645")]
	[Address(RVA = "0x8F0A90", Offset = "0x8F0A90", VA = "0x8F0A90", Slot = "2")]
	public override int GetHashCode()
	{
		return default(int);
	}
}
[Serializable]
[Token(Token = "0x20000E6")]
public sealed class CookoutUserData
{
	[Token(Token = "0x40005B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public CookoutUserId userId;

	[Token(Token = "0x40005B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string name;

	[Token(Token = "0x6000646")]
	[Address(RVA = "0x8F0A98", Offset = "0x8F0A98", VA = "0x8F0A98", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x6000647")]
	[Address(RVA = "0x8F0B50", Offset = "0x8F0B50", VA = "0x8F0B50")]
	public CookoutUserData()
	{
	}
}
[Serializable]
[Token(Token = "0x20000E7")]
public struct NetMsgSpawnPlayerAvatar
{
	[Token(Token = "0x40005B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public int viewId;

	[Token(Token = "0x40005B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public CookoutUserId userId;

	[Token(Token = "0x40005B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
	public AvatarType avatarType;

	[Token(Token = "0x40005B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
	public CookoutAvatarVisualType avatarVisualType;

	[Token(Token = "0x40005B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF")]
	public int preselectedOculusAvatar;

	[Token(Token = "0x40005B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
	public ControllerType controllerType;

	[Token(Token = "0x40005BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public AvatarBodyType bodyType;

	[Token(Token = "0x40005BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
	public AvatarHatType hatType;

	[Token(Token = "0x40005BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
	public int headMaterialIndex;

	[Token(Token = "0x40005BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public AvatarHandMaterial handMaterial;
}
[Serializable]
[Token(Token = "0x20000E8")]
public struct NetMsgAvatarHand
{
	[Token(Token = "0x40005BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public int viewId;

	[Token(Token = "0x40005BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public CookoutHandedness handedness;
}
[Token(Token = "0x20000E9")]
public static class RoomProperty
{
	[Token(Token = "0x40005C0")]
	public const string RoomVersion = "V";

	[Token(Token = "0x40005C1")]
	public const string RoomOwner = "o";

	[Token(Token = "0x40005C2")]
	public const string RoomIntent = "i";

	[Token(Token = "0x40005C3")]
	public const string RoomVisibility = "v";

	[Token(Token = "0x40005C4")]
	public const string RoomPlayerProgression = "l";

	[Token(Token = "0x40005C5")]
	public const string PlayerIDList = "p";

	[Token(Token = "0x40005C6")]
	public const string BlockIDList = "b";

	[Token(Token = "0x40005C7")]
	public const string PlayerNameList = "N";

	[Token(Token = "0x40005C8")]
	public const string BlockNameList = "n";

	[Token(Token = "0x40005C9")]
	public const string RoomSelectedTown = "s";
}
[Token(Token = "0x20000EA")]
public enum RoomIntent
{
	[Token(Token = "0x40005CB")]
	Casual,
	[Token(Token = "0x40005CC")]
	Progression,
	[Token(Token = "0x40005CD")]
	Perfection,
	[Token(Token = "0x40005CE")]
	Endless,
	[Token(Token = "0x40005CF")]
	Assist
}
[Token(Token = "0x20000EB")]
public enum RoomVisibility
{
	[Token(Token = "0x40005D1")]
	None,
	[Token(Token = "0x40005D2")]
	Friends,
	[Token(Token = "0x40005D3")]
	All
}
[StructLayout(2)]
[Token(Token = "0x20000EC")]
public struct RoomVersion
{
	[Token(Token = "0x40005D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public readonly int buffer;

	[Token(Token = "0x40005D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public readonly ushort major;

	[Token(Token = "0x40005D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
	public readonly ushort minor;

	[Token(Token = "0x6000648")]
	[Address(RVA = "0x8F0B58", Offset = "0x8F0B58", VA = "0x8F0B58")]
	public RoomVersion(int versionBuffer)
	{
	}

	[Token(Token = "0x6000649")]
	[Address(RVA = "0x8F0B60", Offset = "0x8F0B60", VA = "0x8F0B60")]
	public RoomVersion(int versionMajor, int versionMinor)
	{
	}
}
[Token(Token = "0x20000ED")]
public enum CookoutDisconnectReason
{
	[Token(Token = "0x40005D8")]
	None,
	[Token(Token = "0x40005D9")]
	Kicked,
	[Token(Token = "0x40005DA")]
	LostConnectionToServer
}
[Token(Token = "0x20000EE")]
public static class CookoutAux
{
	[Token(Token = "0x40005DB")]
	public const int maxPlayerCount = 4;

	[Token(Token = "0x40005DC")]
	public const string UserId = "UserId";

	[Token(Token = "0x40005DD")]
	public const string UserName = "UserName";

	[Token(Token = "0x40005DE")]
	public const string SCENE_LAUNCHER = "SamusLauncher";

	[Token(Token = "0x40005DF")]
	public const string SCENE_MAIN = "SamusMain";

	[Token(Token = "0x40005E0")]
	public const string API_NAME_MENU = "cookout_menu";

	[Token(Token = "0x40005E1")]
	public const string API_NAME_SINGLEPLAYER = "cookout_singleplayer";

	[Token(Token = "0x40005E2")]
	public const string API_NAME_MULTIPLAYER = "cookout_multiplayer";

	[Token(Token = "0x40005E3")]
	public const float CONVEYOR_BELT_DELTA_DEG_SLOW = 18f;

	[Token(Token = "0x40005E4")]
	public const float CONVEYOR_BELT_DELTA_DEG_FAST = 25f;

	[Token(Token = "0x40005E5")]
	public const float DELIVER_TARGET_HEIGHT_DELTA = 0.4f;

	[Token(Token = "0x40005E6")]
	public const float DELIVER_SPEED = 4.5f;

	[Token(Token = "0x40005E7")]
	private const int CONDIMENT_PARTICLES_MAX_MUL = 100;

	[Token(Token = "0x40005E8")]
	private const int CONDIMENT_PARTICLES_RATE_MUL = 20;

	[Token(Token = "0x40005E9")]
	private const int CONDIMENT_RATE_QUEST1 = 1;

	[Token(Token = "0x40005EA")]
	private const int CONDIMENT_RATE_QUEST2 = 5;

	[Token(Token = "0x40005EB")]
	public const int CONDIMENT_THRESHOLD = 50;

	[Token(Token = "0x40005EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly int condimentRate;

	[Token(Token = "0x40005ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static readonly int condimentParticlesMax;

	[Token(Token = "0x40005EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static readonly int condimentParticlesRate;

	[Token(Token = "0x40005EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static readonly Color buttonColorSelect;

	[Token(Token = "0x40005F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public static readonly Color buttonColorDeselect;

	[Token(Token = "0x40005F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public static readonly bool isQuestFamily;

	[Token(Token = "0x40005F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public static readonly bool isQuest1;

	[Token(Token = "0x40005F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
	public static readonly bool isQuest2;

	[Token(Token = "0x40005F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2F")]
	public static readonly bool isAndroid;

	[Token(Token = "0x40005F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static readonly Vector3 avatarDefaultPosition;

	[Token(Token = "0x40005F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public static bool isApplicationQuitting;

	[Token(Token = "0x40005F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public static string appVersion;

	[Token(Token = "0x40005F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public static string appVersionLatest;

	[Token(Token = "0x40005F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static string savePath;

	[Token(Token = "0x40005FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static int ticks;

	[Token(Token = "0x40005FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public static int ticksFixed;

	[Token(Token = "0x40005FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public static bool startTutorialImmediately;

	[Token(Token = "0x40005FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	public static bool showMultiplayerMenuImmediately;

	[Token(Token = "0x40005FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public static CookoutDisconnectReason disconnectReason;

	[Token(Token = "0x40005FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private static CookoutAvatar[] avatars;

	[Token(Token = "0x170000FA")]
	public static bool OfflineMode
	{
		[Token(Token = "0x600064B")]
		[Address(RVA = "0x8F0BE4", Offset = "0x8F0BE4", VA = "0x8F0BE4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170000FB")]
	public static CookoutApplicationState ApplicationState
	{
		[Token(Token = "0x600064C")]
		[Address(RVA = "0x8EFF30", Offset = "0x8EFF30", VA = "0x8EFF30")]
		get
		{
			return default(CookoutApplicationState);
		}
	}

	[Token(Token = "0x600064A")]
	[Address(RVA = "0x8F0B6C", Offset = "0x8F0B6C", VA = "0x8F0B6C")]
	public static float NetworkedAngleConveyorBelt(float deltaDeg)
	{
		return default(float);
	}

	[Token(Token = "0x600064D")]
	[Address(RVA = "0x8F0C6C", Offset = "0x8F0C6C", VA = "0x8F0C6C")]
	static CookoutAux()
	{
	}

	[Token(Token = "0x600064E")]
	[Address(RVA = "0x8F0D14", Offset = "0x8F0D14", VA = "0x8F0D14")]
	public static void Quit()
	{
	}

	[Token(Token = "0x600064F")]
	[Address(RVA = "0x8F0D1C", Offset = "0x8F0D1C", VA = "0x8F0D1C")]
	public static int Mod(int a, int b)
	{
		return default(int);
	}

	[Token(Token = "0x6000650")]
	[Address(RVA = "0x8F0DA4", Offset = "0x8F0DA4", VA = "0x8F0DA4")]
	public static float Mod(float a, float b)
	{
		return default(float);
	}

	[Token(Token = "0x6000651")]
	public static T[] EnumArray<T>() where T : Enum
	{
		return null;
	}

	[Token(Token = "0x6000652")]
	public static int EnumLength<T>() where T : Enum
	{
		return default(int);
	}

	[Token(Token = "0x6000653")]
	public static void ReplaceWithLast<T>(List<T> li, int i, int iLast)
	{
	}

	[Token(Token = "0x6000654")]
	public static void ReplaceWithLast<T>(List<T> li, int i)
	{
	}

	[Token(Token = "0x6000655")]
	public static void ReplaceWithLast<T>(List<T> li, T instance)
	{
	}

	[Token(Token = "0x6000656")]
	public static T CastOrDefault<T>(ExitGames.Client.Photon.Hashtable dict, string key, T defaultValue)
	{
		return (T)null;
	}

	[Token(Token = "0x6000657")]
	[Address(RVA = "0x8F0DB8", Offset = "0x8F0DB8", VA = "0x8F0DB8")]
	public static void FreezePhysics(Rigidbody rb)
	{
	}

	[Token(Token = "0x6000658")]
	[Address(RVA = "0x8F0E6C", Offset = "0x8F0E6C", VA = "0x8F0E6C")]
	public static void UnfreezePhysics(Rigidbody rb)
	{
	}

	[Token(Token = "0x6000659")]
	[Address(RVA = "0x8F0E9C", Offset = "0x8F0E9C", VA = "0x8F0E9C")]
	public static bool SecondsElapsed(float seconds)
	{
		return default(bool);
	}

	[Token(Token = "0x600065A")]
	[Address(RVA = "0x8F0F04", Offset = "0x8F0F04", VA = "0x8F0F04")]
	public static void SetAvatars(CookoutAvatar[] cookoutAvatars)
	{
	}

	[Token(Token = "0x600065B")]
	[Address(RVA = "0x8F0F60", Offset = "0x8F0F60", VA = "0x8F0F60")]
	public static bool TryGetAvatarById(int id, out CookoutAvatar avatar)
	{
		return default(bool);
	}

	[Token(Token = "0x600065C")]
	[Address(RVA = "0x8EFFF0", Offset = "0x8EFFF0", VA = "0x8EFFF0")]
	public static bool HasPlayerAvatar()
	{
		return default(bool);
	}

	[Token(Token = "0x600065D")]
	[Address(RVA = "0x8F0050", Offset = "0x8F0050", VA = "0x8F0050")]
	public static CookoutAvatar GetPlayerAvatar()
	{
		return null;
	}

	[Token(Token = "0x600065E")]
	[Address(RVA = "0x8F1088", Offset = "0x8F1088", VA = "0x8F1088")]
	public static AvatarType GetPlayerAvatarType()
	{
		return default(AvatarType);
	}

	[Token(Token = "0x600065F")]
	[Address(RVA = "0x8F1100", Offset = "0x8F1100", VA = "0x8F1100")]
	public static Transform GetPlayerRoot()
	{
		return null;
	}

	[Token(Token = "0x6000660")]
	[Address(RVA = "0x8F1178", Offset = "0x8F1178", VA = "0x8F1178")]
	public static Transform GetPlayerHeadRoot()
	{
		return null;
	}

	[Token(Token = "0x6000661")]
	[Address(RVA = "0x8F11F8", Offset = "0x8F11F8", VA = "0x8F11F8")]
	public static CookoutAvatar AllocAvatar(int viewId)
	{
		return null;
	}

	[Token(Token = "0x6000662")]
	[Address(RVA = "0x8F1380", Offset = "0x8F1380", VA = "0x8F1380")]
	public static void FreeAvatar(CookoutAvatar avatar)
	{
	}

	[Token(Token = "0x6000663")]
	[Address(RVA = "0x8F149C", Offset = "0x8F149C", VA = "0x8F149C")]
	public static void FreeAvatarsOnReturnToLauncher()
	{
	}

	[Token(Token = "0x6000664")]
	[Address(RVA = "0x8F1644", Offset = "0x8F1644", VA = "0x8F1644")]
	public static string CalcHandednessKeyString(CookoutHandedness handedness)
	{
		return null;
	}

	[Token(Token = "0x6000665")]
	[Address(RVA = "0x8F16B8", Offset = "0x8F16B8", VA = "0x8F16B8")]
	public static CookoutHandPose CalcHandPoseMask(HandInput handInput)
	{
		return default(CookoutHandPose);
	}

	[Token(Token = "0x6000666")]
	[Address(RVA = "0x8F16F8", Offset = "0x8F16F8", VA = "0x8F16F8")]
	public static RoomVersion CreateRoomVersion()
	{
		return default(RoomVersion);
	}

	[Token(Token = "0x6000667")]
	[Address(RVA = "0x8F1700", Offset = "0x8F1700", VA = "0x8F1700")]
	public static RoomOptions CreateRoomOptions(RoomIntent roomIntent, RoomVisibility roomVisibility, int maxPlayers)
	{
		return null;
	}

	[Token(Token = "0x6000668")]
	[Address(RVA = "0x8F1E70", Offset = "0x8F1E70", VA = "0x8F1E70")]
	public static int CalcCupProgressionValue()
	{
		return default(int);
	}

	[Token(Token = "0x6000669")]
	[Address(RVA = "0x8F1F94", Offset = "0x8F1F94", VA = "0x8F1F94")]
	public static string GetRoomIntentLocaleKey(RoomIntent roomIntent)
	{
		return null;
	}

	[Token(Token = "0x600066A")]
	[Address(RVA = "0x8F2064", Offset = "0x8F2064", VA = "0x8F2064")]
	public static void SetupRadioButtons(PokeButton[] radioButtons, Material buttonMaterialSelect, Material buttonMaterialDeselect, int defaultValue, Action<int> callback)
	{
	}

	[Token(Token = "0x600066B")]
	[Address(RVA = "0x8F2504", Offset = "0x8F2504", VA = "0x8F2504")]
	public static void SetupCheckboxButtons(PokeButton[] radioButtons, Material buttonMaterialSelect, Material buttonMaterialDeselect, IReadOnlyList<bool> defaultChecked, Action<int> callback)
	{
	}
}
[Token(Token = "0x20000F4")]
public static class IngredientAux
{
	[Token(Token = "0x4000613")]
	public const int NoIngredientViewID = -1;

	[Token(Token = "0x6000678")]
	[Address(RVA = "0x8F2BCC", Offset = "0x8F2BCC", VA = "0x8F2BCC")]
	public static bool IsAtCenterOfTable(IngredientBase ingredient)
	{
		return default(bool);
	}

	[Token(Token = "0x6000679")]
	[Address(RVA = "0x8F2C38", Offset = "0x8F2C38", VA = "0x8F2C38")]
	public static void Despawn(IngredientBase ingredient)
	{
	}

	[Token(Token = "0x600067A")]
	[Address(RVA = "0x8F2E48", Offset = "0x8F2E48", VA = "0x8F2E48")]
	public static void DespawnLocal(IngredientBase ingredient, bool showPoof = true)
	{
	}

	[Token(Token = "0x600067B")]
	[Address(RVA = "0x8F3064", Offset = "0x8F3064", VA = "0x8F3064")]
	public static void TryRemoveIngredientFromGrills(Grillable grillable)
	{
	}

	[Token(Token = "0x600067C")]
	[Address(RVA = "0x8F3188", Offset = "0x8F3188", VA = "0x8F3188")]
	public static void TryRemoveIngredientFromFireExtinguishers(Grillable grillable)
	{
	}
}
[Token(Token = "0x20000F5")]
[Flags]
public enum CookoutLogCat
{
	[Token(Token = "0x4000615")]
	_SwitchCaseUnhandled = 1,
	[Token(Token = "0x4000616")]
	_App = 2,
	[Token(Token = "0x4000617")]
	_Platform = 4,
	[Token(Token = "0x4000618")]
	_Gui = 8,
	[Token(Token = "0x4000619")]
	_Net = 0x10,
	[Token(Token = "0x400061A")]
	_Scene = 0x20,
	[Token(Token = "0x400061B")]
	_LoadSave = 0x40,
	[Token(Token = "0x400061C")]
	_Avatar = 0x80
}
[Token(Token = "0x20000F6")]
public static class CookoutLog
{
	[Token(Token = "0x400061D")]
	private const string LOG_FORMAT = "{0,7} | {1,7} | {2,13:.000}ms | {3}";

	[Token(Token = "0x400061E")]
	private const string LOG_FORMAT_CAT = "{0,7} | {1,7} | {2,13:.000}ms [{4}] {3}";

	[MethodImpl(256)]
	[Token(Token = "0x600067D")]
	[Address(RVA = "0x8F32AC", Offset = "0x8F32AC", VA = "0x8F32AC")]
	[Conditional("UNITY_EDITOR")]
	public static void SPAM(string msg)
	{
	}

	[MethodImpl(256)]
	[Token(Token = "0x600067E")]
	[Address(RVA = "0x8F3584", Offset = "0x8F3584", VA = "0x8F3584")]
	[Conditional("DEBUG")]
	public static void info(string msg)
	{
	}

	[MethodImpl(256)]
	[Token(Token = "0x600067F")]
	[Address(RVA = "0x8F385C", Offset = "0x8F385C", VA = "0x8F385C")]
	[Conditional("DEBUG")]
	public static void warn(string msg)
	{
	}

	[MethodImpl(256)]
	[Token(Token = "0x6000680")]
	[Address(RVA = "0x8F3B34", Offset = "0x8F3B34", VA = "0x8F3B34")]
	[Conditional("DEBUG")]
	public static void err(string msg)
	{
	}

	[MethodImpl(256)]
	[Token(Token = "0x6000681")]
	[Address(RVA = "0x8F3E0C", Offset = "0x8F3E0C", VA = "0x8F3E0C")]
	public static void important(string msg)
	{
	}

	[MethodImpl(256)]
	[Token(Token = "0x6000682")]
	[Address(RVA = "0x8F40E4", Offset = "0x8F40E4", VA = "0x8F40E4")]
	public static void critical(string msg)
	{
	}

	[MethodImpl(256)]
	[Token(Token = "0x6000683")]
	[Address(RVA = "0x8F43BC", Offset = "0x8F43BC", VA = "0x8F43BC")]
	public static void fatal(string msg)
	{
	}

	[MethodImpl(256)]
	[Token(Token = "0x6000684")]
	[Address(RVA = "0x8F4694", Offset = "0x8F4694", VA = "0x8F4694")]
	[Conditional("UNITY_EDITOR")]
	public static void SPAM(CookoutLogCat logcat, string msg)
	{
	}

	[MethodImpl(256)]
	[Token(Token = "0x6000685")]
	[Address(RVA = "0x8F49C0", Offset = "0x8F49C0", VA = "0x8F49C0")]
	[Conditional("DEBUG")]
	public static void info(CookoutLogCat logcat, string msg)
	{
	}

	[MethodImpl(256)]
	[Token(Token = "0x6000686")]
	[Address(RVA = "0x8F4CEC", Offset = "0x8F4CEC", VA = "0x8F4CEC")]
	[Conditional("DEBUG")]
	public static void warn(CookoutLogCat logcat, string msg)
	{
	}

	[MethodImpl(256)]
	[Token(Token = "0x6000687")]
	[Address(RVA = "0x8F5018", Offset = "0x8F5018", VA = "0x8F5018")]
	[Conditional("DEBUG")]
	public static void err(CookoutLogCat logcat, string msg)
	{
	}

	[MethodImpl(256)]
	[Token(Token = "0x6000688")]
	[Address(RVA = "0x8F5344", Offset = "0x8F5344", VA = "0x8F5344")]
	public static void important(CookoutLogCat logcat, string msg)
	{
	}

	[MethodImpl(256)]
	[Token(Token = "0x6000689")]
	[Address(RVA = "0x8F5670", Offset = "0x8F5670", VA = "0x8F5670")]
	public static void critical(CookoutLogCat logcat, string msg)
	{
	}

	[MethodImpl(256)]
	[Token(Token = "0x600068A")]
	[Address(RVA = "0x8F599C", Offset = "0x8F599C", VA = "0x8F599C")]
	public static void fatal(CookoutLogCat logcat, string msg)
	{
	}
}
[Token(Token = "0x20000F7")]
public static class CookoutMsg<TMsgType> where TMsgType : Enum
{
	[Token(Token = "0x20000F8")]
	public interface IMsg
	{
		[Token(Token = "0x600068B")]
		TMsgType Type();
	}

	[Token(Token = "0x20000F9")]
	public abstract class MsgBuffer
	{
		[Token(Token = "0x400061F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected List<IMsg> buf;

		[Token(Token = "0x170000FC")]
		public int Count
		{
			[Token(Token = "0x600068D")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600068C")]
		protected MsgBuffer(int capacity)
		{
		}

		[Token(Token = "0x600068E")]
		public bool Any()
		{
			return default(bool);
		}

		[Token(Token = "0x600068F")]
		public void Add(IMsg msg)
		{
		}

		[Token(Token = "0x6000690")]
		public void Clear()
		{
		}
	}

	[Token(Token = "0x20000FA")]
	public sealed class MsgBuffer<TMsg> : MsgBuffer, IEnumerable<TMsg>, IEnumerable where TMsg : struct, IMsg
	{
		[Token(Token = "0x20000FB")]
		[CompilerGenerated]
		private sealed class <System-Collections-Generic-IEnumerable<TMsg>-GetEnumerator>d__2 : IEnumerator<TMsg>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000620")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x4000621")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private TMsg <>2__current;

			[Token(Token = "0x4000622")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public MsgBuffer<TMsg> <>4__this;

			[Token(Token = "0x4000623")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <i>5__2;

			[Token(Token = "0x4000624")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <n>5__3;

			[Token(Token = "0x170000FD")]
			private TMsg System.Collections.Generic.IEnumerator<TMsg>.Current
			{
				[Token(Token = "0x6000697")]
				[DebuggerHidden]
				get
				{
					return (TMsg)null;
				}
			}

			[Token(Token = "0x170000FE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000699")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000694")]
			[DebuggerHidden]
			public <System-Collections-Generic-IEnumerable<TMsg>-GetEnumerator>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x6000695")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000696")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000698")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6000691")]
		public MsgBuffer(int capacity)
		{
		}

		[Token(Token = "0x6000692")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000693")]
		[IteratorStateMachine(typeof(MsgBuffer<>.<System-Collections-Generic-IEnumerable<TMsg>-GetEnumerator>d__2))]
		private IEnumerator<TMsg> System.Collections.Generic.IEnumerable<TMsg>.GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x20000FC")]
	public sealed class MsgRouter : IEnumerable<MsgBuffer>, IEnumerable
	{
		[Token(Token = "0x20000FD")]
		[CompilerGenerated]
		private sealed class <System-Collections-Generic-IEnumerable<CookoutMsg<TMsgType>-MsgBuffer>-GetEnumerator>d__3 : IEnumerator<MsgBuffer>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000626")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x4000627")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private MsgBuffer <>2__current;

			[Token(Token = "0x4000628")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public MsgRouter <>4__this;

			[Token(Token = "0x4000629")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <i>5__2;

			[Token(Token = "0x400062A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <n>5__3;

			[Token(Token = "0x170000FF")]
			private MsgBuffer System.Collections.Generic.IEnumerator<CookoutMsg<TMsgType>.MsgBuffer>.Current
			{
				[Token(Token = "0x60006A5")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000100")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60006A7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60006A2")]
			[DebuggerHidden]
			public <System-Collections-Generic-IEnumerable<CookoutMsg<TMsgType>-MsgBuffer>-GetEnumerator>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x60006A3")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60006A4")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60006A6")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly MsgBuffer[] bufRecv;

		[Token(Token = "0x600069A")]
		public MsgRouter()
		{
		}

		[Token(Token = "0x600069B")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600069C")]
		[IteratorStateMachine(typeof(CookoutMsg<>.MsgRouter.<System-Collections-Generic-IEnumerable<CookoutMsg<TMsgType>-MsgBuffer>-GetEnumerator>d__3))]
		private IEnumerator<MsgBuffer> System.Collections.Generic.IEnumerable<CookoutMsg<TMsgType>.MsgBuffer>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600069D")]
		private void Add(TMsgType msgType, MsgBuffer buf)
		{
		}

		[Token(Token = "0x600069E")]
		public void Add<TMsg>(MsgBuffer<TMsg> buf) where TMsg : struct, IMsg
		{
		}

		[Token(Token = "0x600069F")]
		private MsgBuffer Resolve(TMsgType msgType)
		{
			return null;
		}

		[Token(Token = "0x60006A0")]
		public MsgBuffer<TMsg> Resolve<TMsg>() where TMsg : struct, IMsg
		{
			return null;
		}

		[Token(Token = "0x60006A1")]
		public void Route<TMsg>(TMsg msg) where TMsg : struct, IMsg
		{
		}
	}
}
[Token(Token = "0x20000FE")]
public interface ICookoutPlatform
{
	[Token(Token = "0x60006A8")]
	CookoutPlatformType GetTargetPlatformType();

	[Token(Token = "0x60006A9")]
	bool IsInitialized();

	[Token(Token = "0x60006AA")]
	void Initialize();

	[Token(Token = "0x60006AB")]
	void Dispose();

	[Token(Token = "0x60006AC")]
	void Tick();

	[Token(Token = "0x60006AD")]
	void XrToggle();

	[Token(Token = "0x60006AE")]
	void XrRecenter();

	[Token(Token = "0x60006AF")]
	bool HasLocalUser();

	[Token(Token = "0x60006B0")]
	CookoutUserData LocalUser();

	[Token(Token = "0x60006B1")]
	IReadOnlyList<CookoutUserId> LocalUserFriends();

	[Token(Token = "0x60006B2")]
	CookoutMsg<CookoutPlatform.MsgType>.MsgBuffer<TMsg> ResolveMsgBuf<TMsg>() where TMsg : struct, CookoutMsg<CookoutPlatform.MsgType>.IMsg;

	[Token(Token = "0x60006B3")]
	void ValidateMsgBufferIntegrity();

	[Token(Token = "0x60006B4")]
	void AsyncGetVersion();

	[Token(Token = "0x60006B5")]
	void AsyncCheckDeepLink();

	[Token(Token = "0x60006B6")]
	void AsyncGetUserDirectoryPath();

	[Token(Token = "0x60006B7")]
	void AsyncGetFriends();

	[Token(Token = "0x60006B8")]
	void EnableFFR();

	[Token(Token = "0x60006B9")]
	void DisableFFR();

	[Token(Token = "0x60006BA")]
	void SetHighFrameRate();

	[Token(Token = "0x60006BB")]
	void RichPresenceSet(CookoutRichPresence presence);

	[Token(Token = "0x60006BC")]
	void RichPresenceClear();

	[Token(Token = "0x60006BD")]
	void VoipSuppress(bool flag);

	[Token(Token = "0x60006BE")]
	IntPtr MicrophoneCreate();

	[Token(Token = "0x60006BF")]
	void MicrophoneStart(IntPtr handle);

	[Token(Token = "0x60006C0")]
	void MicrophoneDestroy(IntPtr handle);

	[Token(Token = "0x60006C1")]
	int MicrophoneGetNumSamples(IntPtr handle);

	[Token(Token = "0x60006C2")]
	void MicrophoneRead(IntPtr handle, float[] buf);

	[Token(Token = "0x60006C3")]
	bool PlayerIsIdle();

	[Token(Token = "0x60006C4")]
	void SetAvatarRemote(CookoutAvatar avatar, CookoutUserId userId, AvatarType avatarType, CookoutAvatarVisualType visualType, ControllerType controllerType, int preselectedOculusAvatar, AvatarBodyType bodyType, AvatarHatType hatType, int headMaterialIndex, AvatarHandMaterial handMaterialIndex, int senderID);

	[Token(Token = "0x60006C5")]
	ControllerType GetControllerType();

	[Token(Token = "0x60006C6")]
	void GetAchievementUnlockedStatus(string apiName, Action<string, bool> callback);

	[Token(Token = "0x60006C7")]
	void GetAchievementCountStatus(string apiName, int localCount, Action<string, int, int> callback);

	[Token(Token = "0x60006C8")]
	void RecordCountAchievement(string apiName, int count);

	[Token(Token = "0x60006C9")]
	void UnlockSimpleAchievement(string apiName);
}
[Token(Token = "0x20000FF")]
public sealed class CookoutPlatform : ICookoutPlatform
{
	[Token(Token = "0x2000100")]
	public enum MsgType
	{
		[Token(Token = "0x4000638")]
		PlatformVersion,
		[Token(Token = "0x4000639")]
		DeepLink,
		[Token(Token = "0x400063A")]
		UserDirectoryPath,
		[Token(Token = "0x400063B")]
		User
	}

	[Token(Token = "0x2000101")]
	public struct MsgPlatformVersion : CookoutMsg<MsgType>.IMsg
	{
		[Token(Token = "0x400063C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool isError;

		[Token(Token = "0x400063D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string version;

		[Token(Token = "0x400063E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string versionLatest;

		[Token(Token = "0x400063F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int versionCode;

		[Token(Token = "0x4000640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int versionCodeLatest;

		[Token(Token = "0x60006F6")]
		[Address(RVA = "0x8F8B94", Offset = "0x8F8B94", VA = "0x8F8B94", Slot = "4")]
		public MsgType Type()
		{
			return default(MsgType);
		}
	}

	[Token(Token = "0x2000102")]
	public struct MsgDeepLink : CookoutMsg<MsgType>.IMsg
	{
		[Token(Token = "0x4000641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool isError;

		[Token(Token = "0x4000642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string errMsg;

		[Token(Token = "0x4000643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool isGroupLaunch;

		[Token(Token = "0x4000644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string room;

		[Token(Token = "0x4000645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string destination;

		[Token(Token = "0x60006F7")]
		[Address(RVA = "0x8F8B9C", Offset = "0x8F8B9C", VA = "0x8F8B9C", Slot = "4")]
		public MsgType Type()
		{
			return default(MsgType);
		}
	}

	[Token(Token = "0x2000103")]
	public struct MsgUserDirectoryPath : CookoutMsg<MsgType>.IMsg
	{
		[Token(Token = "0x4000646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool isError;

		[Token(Token = "0x4000647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string errMsg;

		[Token(Token = "0x4000648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string path;

		[Token(Token = "0x60006F8")]
		[Address(RVA = "0x8F8BA4", Offset = "0x8F8BA4", VA = "0x8F8BA4", Slot = "4")]
		public MsgType Type()
		{
			return default(MsgType);
		}
	}

	[Token(Token = "0x400062B")]
	private const int USER_CAPACITY = 128;

	[Token(Token = "0x400062C")]
	private const float USER_TTL = 3600f;

	[Token(Token = "0x400062D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ICookoutPlatform instance;

	[Token(Token = "0x400062E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private readonly CookoutMsg<MsgType>.MsgRouter msgRouter;

	[Token(Token = "0x400062F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool everInitialized;

	[Token(Token = "0x4000630")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool isInitialized;

	[Token(Token = "0x4000631")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<bool> userIsValid;

	[Token(Token = "0x4000632")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<float> userFetchTimestamp;

	[Token(Token = "0x4000633")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<CookoutUserId> userId;

	[Token(Token = "0x4000634")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<CookoutUserData> userData;

	[Token(Token = "0x4000635")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private CookoutUserData localUser;

	[Token(Token = "0x4000636")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<CookoutUserId> localUserFriends;

	[Token(Token = "0x60006CA")]
	[Address(RVA = "0x8EED24", Offset = "0x8EED24", VA = "0x8EED24")]
	public static ICookoutPlatform Instance()
	{
		return null;
	}

	[Token(Token = "0x60006CB")]
	[Address(RVA = "0x8F5CC8", Offset = "0x8F5CC8", VA = "0x8F5CC8")]
	private CookoutPlatform()
	{
	}

	[Token(Token = "0x60006CC")]
	[Address(RVA = "0x8F5FF8", Offset = "0x8F5FF8", VA = "0x8F5FF8", Slot = "5")]
	public bool IsInitialized()
	{
		return default(bool);
	}

	[Token(Token = "0x60006CD")]
	[Address(RVA = "0x8F6000", Offset = "0x8F6000", VA = "0x8F6000", Slot = "9")]
	public void XrToggle()
	{
	}

	[Token(Token = "0x60006CE")]
	[Address(RVA = "0x8F6004", Offset = "0x8F6004", VA = "0x8F6004", Slot = "11")]
	public bool HasLocalUser()
	{
		return default(bool);
	}

	[Token(Token = "0x60006CF")]
	[Address(RVA = "0x8F6028", Offset = "0x8F6028", VA = "0x8F6028", Slot = "12")]
	public CookoutUserData LocalUser()
	{
		return null;
	}

	[Token(Token = "0x60006D0")]
	[Address(RVA = "0x8F6030", Offset = "0x8F6030", VA = "0x8F6030", Slot = "13")]
	public IReadOnlyList<CookoutUserId> LocalUserFriends()
	{
		return null;
	}

	[Token(Token = "0x60006D1")]
	public CookoutMsg<MsgType>.MsgBuffer<TMsg> ResolveMsgBuf<TMsg>() where TMsg : struct, CookoutMsg<MsgType>.IMsg
	{
		return null;
	}

	[Token(Token = "0x60006D2")]
	[Address(RVA = "0x8F6038", Offset = "0x8F6038", VA = "0x8F6038", Slot = "15")]
	public void ValidateMsgBufferIntegrity()
	{
	}

	[Token(Token = "0x60006D3")]
	[Address(RVA = "0x8F632C", Offset = "0x8F632C", VA = "0x8F632C")]
	private (bool, int) MemoizeUserGet(CookoutUserId id)
	{
		return default((bool, int));
	}

	[Token(Token = "0x60006D4")]
	[Address(RVA = "0x8F6528", Offset = "0x8F6528", VA = "0x8F6528")]
	private void MemoizeUserSet(bool isValid, CookoutUserData data)
	{
	}

	[Token(Token = "0x60006D5")]
	[Address(RVA = "0x8F6848", Offset = "0x8F6848", VA = "0x8F6848")]
	private void SetLocalUser(CookoutUserData data)
	{
	}

	[Token(Token = "0x60006D6")]
	[Address(RVA = "0x8F69DC", Offset = "0x8F69DC", VA = "0x8F69DC", Slot = "32")]
	public void SetAvatarRemote(CookoutAvatar avatar, CookoutUserId id, AvatarType avatarType, CookoutAvatarVisualType visualType, ControllerType controllerType, int preselectedOculusAvatar, AvatarBodyType bodyType, AvatarHatType hatType, int headMaterialIndex, AvatarHandMaterial handMaterialIndex, int senderID)
	{
	}

	[Token(Token = "0x60006D7")]
	[Address(RVA = "0x8F6FD4", Offset = "0x8F6FD4", VA = "0x8F6FD4", Slot = "4")]
	public CookoutPlatformType GetTargetPlatformType()
	{
		return default(CookoutPlatformType);
	}

	[Token(Token = "0x60006D8")]
	[Address(RVA = "0x8F6FDC", Offset = "0x8F6FDC", VA = "0x8F6FDC")]
	private ulong GenerateUserIDHash(string userIDString)
	{
		return default(ulong);
	}

	[Token(Token = "0x60006D9")]
	[Address(RVA = "0x8F707C", Offset = "0x8F707C", VA = "0x8F707C", Slot = "6")]
	public void Initialize()
	{
	}

	[Token(Token = "0x60006DA")]
	[Address(RVA = "0x8F7208", Offset = "0x8F7208", VA = "0x8F7208")]
	private void EntitlementCallback(int code)
	{
	}

	[Token(Token = "0x60006DB")]
	[Address(RVA = "0x8F7620", Offset = "0x8F7620", VA = "0x8F7620")]
	private void GetLocalUserCallback(Message<User> msg)
	{
	}

	[Token(Token = "0x60006DC")]
	[Address(RVA = "0x8F771C", Offset = "0x8F771C", VA = "0x8F771C", Slot = "7")]
	public void Dispose()
	{
	}

	[Token(Token = "0x60006DD")]
	[Address(RVA = "0x8F77C0", Offset = "0x8F77C0", VA = "0x8F77C0", Slot = "8")]
	public void Tick()
	{
	}

	[Token(Token = "0x60006DE")]
	[Address(RVA = "0x8F77C4", Offset = "0x8F77C4", VA = "0x8F77C4", Slot = "16")]
	public void AsyncGetVersion()
	{
	}

	[Token(Token = "0x60006DF")]
	[Address(RVA = "0x8F7858", Offset = "0x8F7858", VA = "0x8F7858", Slot = "17")]
	public void AsyncCheckDeepLink()
	{
	}

	[Token(Token = "0x60006E0")]
	[Address(RVA = "0x8F785C", Offset = "0x8F785C", VA = "0x8F785C", Slot = "18")]
	public void AsyncGetUserDirectoryPath()
	{
	}

	[Token(Token = "0x60006E1")]
	[Address(RVA = "0x8F792C", Offset = "0x8F792C", VA = "0x8F792C", Slot = "19")]
	public void AsyncGetFriends()
	{
	}

	[Token(Token = "0x60006E2")]
	[Address(RVA = "0x8F7D7C", Offset = "0x8F7D7C", VA = "0x8F7D7C", Slot = "20")]
	public void EnableFFR()
	{
	}

	[Token(Token = "0x60006E3")]
	[Address(RVA = "0x8F7D88", Offset = "0x8F7D88", VA = "0x8F7D88", Slot = "21")]
	public void DisableFFR()
	{
	}

	[Token(Token = "0x60006E4")]
	[Address(RVA = "0x8F7D94", Offset = "0x8F7D94", VA = "0x8F7D94", Slot = "22")]
	public void SetHighFrameRate()
	{
	}

	[Token(Token = "0x60006E5")]
	[Address(RVA = "0x8F7D98", Offset = "0x8F7D98", VA = "0x8F7D98", Slot = "23")]
	public void RichPresenceSet(CookoutRichPresence presence)
	{
	}

	[Token(Token = "0x60006E6")]
	[Address(RVA = "0x8F7D9C", Offset = "0x8F7D9C", VA = "0x8F7D9C", Slot = "24")]
	public void RichPresenceClear()
	{
	}

	[Token(Token = "0x60006E7")]
	[Address(RVA = "0x8F7DA0", Offset = "0x8F7DA0", VA = "0x8F7DA0", Slot = "25")]
	public void VoipSuppress(bool flag)
	{
	}

	[Token(Token = "0x60006E8")]
	[Address(RVA = "0x8F7DA4", Offset = "0x8F7DA4", VA = "0x8F7DA4", Slot = "26")]
	public IntPtr MicrophoneCreate()
	{
		return default(IntPtr);
	}

	[Token(Token = "0x60006E9")]
	[Address(RVA = "0x8F7DEC", Offset = "0x8F7DEC", VA = "0x8F7DEC", Slot = "27")]
	public void MicrophoneStart(IntPtr handle)
	{
	}

	[Token(Token = "0x60006EA")]
	[Address(RVA = "0x8F7DF0", Offset = "0x8F7DF0", VA = "0x8F7DF0", Slot = "28")]
	public void MicrophoneDestroy(IntPtr handle)
	{
	}

	[Token(Token = "0x60006EB")]
	[Address(RVA = "0x8F7DF4", Offset = "0x8F7DF4", VA = "0x8F7DF4", Slot = "29")]
	public int MicrophoneGetNumSamples(IntPtr handle)
	{
		return default(int);
	}

	[Token(Token = "0x60006EC")]
	[Address(RVA = "0x8F7DFC", Offset = "0x8F7DFC", VA = "0x8F7DFC", Slot = "30")]
	public void MicrophoneRead(IntPtr handle, float[] buf)
	{
	}

	[Token(Token = "0x60006ED")]
	[Address(RVA = "0x8F7E00", Offset = "0x8F7E00", VA = "0x8F7E00", Slot = "31")]
	public bool PlayerIsIdle()
	{
		return default(bool);
	}

	[Token(Token = "0x60006EE")]
	[Address(RVA = "0x8F7EA4", Offset = "0x8F7EA4", VA = "0x8F7EA4", Slot = "10")]
	public void XrRecenter()
	{
	}

	[Token(Token = "0x60006EF")]
	[Address(RVA = "0x8F8024", Offset = "0x8F8024", VA = "0x8F8024", Slot = "33")]
	public ControllerType GetControllerType()
	{
		return default(ControllerType);
	}

	[Token(Token = "0x60006F0")]
	[Address(RVA = "0x8F8044", Offset = "0x8F8044", VA = "0x8F8044", Slot = "34")]
	public void GetAchievementUnlockedStatus(string apiName, Action<string, bool> callback)
	{
	}

	[Token(Token = "0x60006F1")]
	[Address(RVA = "0x8F81A0", Offset = "0x8F81A0", VA = "0x8F81A0", Slot = "35")]
	public void GetAchievementCountStatus(string apiName, int localCount, Action<string, int, int> callback)
	{
	}

	[Token(Token = "0x60006F2")]
	[Address(RVA = "0x8F8324", Offset = "0x8F8324", VA = "0x8F8324", Slot = "36")]
	public void RecordCountAchievement(string apiName, int count)
	{
	}

	[Token(Token = "0x60006F3")]
	[Address(RVA = "0x8F8424", Offset = "0x8F8424", VA = "0x8F8424", Slot = "37")]
	public void UnlockSimpleAchievement(string apiName)
	{
	}
}
[Token(Token = "0x2000108")]
public struct QuantBufferPhy
{
	[Token(Token = "0x4000653")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	internal Vector3 velocity;

	[Token(Token = "0x4000654")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	internal Vector3 angularVelocity;
}
[Token(Token = "0x2000109")]
public struct QuantBufferTfm
{
	[Token(Token = "0x4000655")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector3 pos;

	[Token(Token = "0x4000656")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Quaternion rot;
}
[Token(Token = "0x200010A")]
public static class CookoutSerDes
{
	[Token(Token = "0x200010B")]
	private enum Msg : byte
	{
		[Token(Token = "0x4000670")]
		QuantBufferPhy,
		[Token(Token = "0x4000671")]
		QuantBufferTfm,
		[Token(Token = "0x4000672")]
		CookoutUserId,
		[Token(Token = "0x4000673")]
		NetMsgAvatarHand,
		[Token(Token = "0x4000674")]
		NetMsgSpawnPlayerAvatar,
		[Token(Token = "0x4000675")]
		RecipeIngredient,
		[Token(Token = "0x4000676")]
		StackedIngredientData
	}

	[Token(Token = "0x4000657")]
	private const float quantize_float_16bit_signed8max = 4096f;

	[Token(Token = "0x4000658")]
	private const float quantize_float_16bit_signed8max_inv = 0.00024414062f;

	[Token(Token = "0x4000659")]
	private const int largestIndexBitSize = 2;

	[Token(Token = "0x400065A")]
	private const int rotationBitSize = 10;

	[Token(Token = "0x400065B")]
	private const int largestIndexBitMask = 3;

	[Token(Token = "0x400065C")]
	private const int rotationBitMask = 1023;

	[Token(Token = "0x400065D")]
	private const float sqrtTwoInv = 0.70710653f;

	[Token(Token = "0x400065E")]
	private const float componentMin = -0.70710653f;

	[Token(Token = "0x400065F")]
	private const float componentMax = 0.70710653f;

	[Token(Token = "0x4000660")]
	private const float componentScale = 1023f;

	[Token(Token = "0x4000661")]
	private const float componentScaleInv = 0.0009775171f;

	[Token(Token = "0x4000662")]
	private const int nquat = 4;

	[Token(Token = "0x4000663")]
	private const int nabc = 3;

	[Token(Token = "0x4000664")]
	private const float deg2byte = 17f / 24f;

	[Token(Token = "0x4000665")]
	private const float byte2deg = 1.4117647f;

	[Token(Token = "0x4000666")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static StreamBuffer _stream;

	[Token(Token = "0x4000667")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static short _size;

	[Token(Token = "0x4000668")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static int _iExpected;

	[Token(Token = "0x4000669")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static int i;

	[Token(Token = "0x400066A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static byte[] buf;

	[Token(Token = "0x400066B")]
	private const int size_QuantBufferPhy = 12;

	[Token(Token = "0x400066C")]
	private const int size_QuantBufferTfm = 10;

	[Token(Token = "0x400066D")]
	private const int size_RecipeIngredient = 2;

	[Token(Token = "0x400066E")]
	private const int size_StackedIngredientData = 15;

	[Token(Token = "0x6000701")]
	[Address(RVA = "0x8FA3A4", Offset = "0x8FA3A4", VA = "0x8FA3A4")]
	public static void RegisterPhotonTypes()
	{
	}

	[Token(Token = "0x6000702")]
	private static T SerializeBegin<T>(StreamBuffer stream, object obj, short size)
	{
		return (T)null;
	}

	[Token(Token = "0x6000703")]
	private static T SerializeBegin<T>(StreamBuffer stream, object obj) where T : struct
	{
		return (T)null;
	}

	[Token(Token = "0x6000704")]
	[Address(RVA = "0x8FA8E8", Offset = "0x8FA8E8", VA = "0x8FA8E8")]
	private static short SerializeEnd()
	{
		return default(short);
	}

	[Token(Token = "0x6000705")]
	private static T DeserializeBegin<T>(StreamBuffer stream, short size) where T : struct
	{
		return (T)null;
	}

	[Token(Token = "0x6000706")]
	private static T DeserializeBegin<T>(StreamBuffer stream) where T : struct
	{
		return (T)null;
	}

	[Token(Token = "0x6000707")]
	private unsafe static ref T DeserializeEnd<T>(ref T msg)
	{
		return ref *(T*)null;
	}

	[Token(Token = "0x6000708")]
	[Address(RVA = "0x8FA960", Offset = "0x8FA960", VA = "0x8FA960")]
	public static void ser_u32(uint u, byte[] b, ref int i)
	{
	}

	[Token(Token = "0x6000709")]
	[Address(RVA = "0x8FAA04", Offset = "0x8FAA04", VA = "0x8FAA04")]
	public static void des_u32(out uint u, byte[] b, ref int i)
	{
	}

	[Token(Token = "0x600070A")]
	[Address(RVA = "0x8FAA98", Offset = "0x8FAA98", VA = "0x8FAA98")]
	public static void ser_u64(ulong u, byte[] b, ref int i)
	{
	}

	[Token(Token = "0x600070B")]
	[Address(RVA = "0x8FABCC", Offset = "0x8FABCC", VA = "0x8FABCC")]
	public static void des_u64(out ulong u, byte[] b, ref int i)
	{
	}

	[Token(Token = "0x600070C")]
	[Address(RVA = "0x8FACD0", Offset = "0x8FACD0", VA = "0x8FACD0")]
	public static short f32_to_s16(float quant, float v)
	{
		return default(short);
	}

	[Token(Token = "0x600070D")]
	[Address(RVA = "0x8FACEC", Offset = "0x8FACEC", VA = "0x8FACEC")]
	public static float s16_to_f32(float quant_inv, short v)
	{
		return default(float);
	}

	[Token(Token = "0x600070E")]
	[Address(RVA = "0x8FACFC", Offset = "0x8FACFC", VA = "0x8FACFC")]
	public static uint QuantizeQuaternion(Quaternion quaternion)
	{
		return default(uint);
	}

	[Token(Token = "0x600070F")]
	[Address(RVA = "0x8FB024", Offset = "0x8FB024", VA = "0x8FB024")]
	public static Quaternion QuantizeQuaternionInv(uint smallestThree)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000710")]
	[Address(RVA = "0x8FB2A8", Offset = "0x8FB2A8", VA = "0x8FB2A8")]
	public static short photon_ser_QuantBufferPhy(StreamBuffer stream, object obj)
	{
		return default(short);
	}

	[Token(Token = "0x6000711")]
	[Address(RVA = "0x8FB49C", Offset = "0x8FB49C", VA = "0x8FB49C")]
	public static object photon_des_QuantBufferPhy(StreamBuffer stream, short length)
	{
		return null;
	}

	[Token(Token = "0x6000712")]
	[Address(RVA = "0x8FB6C8", Offset = "0x8FB6C8", VA = "0x8FB6C8")]
	public static short photon_ser_QuantBufferTfm(StreamBuffer stream, object obj)
	{
		return default(short);
	}

	[Token(Token = "0x6000713")]
	[Address(RVA = "0x8FB878", Offset = "0x8FB878", VA = "0x8FB878")]
	public static object photon_des_QuantBufferTfm(StreamBuffer stream, short length)
	{
		return null;
	}

	[Token(Token = "0x6000714")]
	[Address(RVA = "0x8FBA5C", Offset = "0x8FBA5C", VA = "0x8FBA5C")]
	public static void ser_CookoutUserId(CookoutUserId userId, byte[] b, ref int i)
	{
	}

	[Token(Token = "0x6000715")]
	[Address(RVA = "0x8FBAB0", Offset = "0x8FBAB0", VA = "0x8FBAB0")]
	public static void des_CookoutUserId(out CookoutUserId userId, byte[] b, ref int i)
	{
	}

	[Token(Token = "0x6000716")]
	[Address(RVA = "0x8FBB0C", Offset = "0x8FBB0C", VA = "0x8FBB0C")]
	public static short photon_ser_CookoutUserId(StreamBuffer stream, object obj)
	{
		return default(short);
	}

	[Token(Token = "0x6000717")]
	[Address(RVA = "0x8FBB94", Offset = "0x8FBB94", VA = "0x8FBB94")]
	public static object photon_des_CookoutUserId(StreamBuffer stream, short length)
	{
		return null;
	}

	[Token(Token = "0x6000718")]
	[Address(RVA = "0x8FBC9C", Offset = "0x8FBC9C", VA = "0x8FBC9C")]
	public static short photon_ser_NetMsgAvatarHand(StreamBuffer stream, object obj)
	{
		return default(short);
	}

	[Token(Token = "0x6000719")]
	[Address(RVA = "0x8FBDA4", Offset = "0x8FBDA4", VA = "0x8FBDA4")]
	public static object photon_des_NetMsgAvatarHand(StreamBuffer stream, short length)
	{
		return null;
	}

	[Token(Token = "0x600071A")]
	[Address(RVA = "0x8FBEF8", Offset = "0x8FBEF8", VA = "0x8FBEF8")]
	public static short photon_ser_NetMsgSpawnPlayerAvatar(StreamBuffer stream, object obj)
	{
		return default(short);
	}

	[Token(Token = "0x600071B")]
	[Address(RVA = "0x8FC190", Offset = "0x8FC190", VA = "0x8FC190")]
	public static object photon_des_NetMsgSpawnPlayerAvatar(StreamBuffer stream, short length)
	{
		return null;
	}

	[Token(Token = "0x600071C")]
	[Address(RVA = "0x8FC41C", Offset = "0x8FC41C", VA = "0x8FC41C")]
	public static short photon_ser_RecipeIngredient(StreamBuffer stream, object obj)
	{
		return default(short);
	}

	[Token(Token = "0x600071D")]
	[Address(RVA = "0x8FC544", Offset = "0x8FC544", VA = "0x8FC544")]
	public static object photon_des_RecipeIngredient(StreamBuffer stream, short length)
	{
		return null;
	}

	[Token(Token = "0x600071E")]
	[Address(RVA = "0x8FC6B0", Offset = "0x8FC6B0", VA = "0x8FC6B0")]
	public static short photon_ser_StackedIngredientData(StreamBuffer stream, object obj)
	{
		return default(short);
	}

	[Token(Token = "0x600071F")]
	[Address(RVA = "0x8FC908", Offset = "0x8FC908", VA = "0x8FC908")]
	public static object photon_des_StackedIngredientData(StreamBuffer stream, short length)
	{
		return null;
	}
}
[Token(Token = "0x200010C")]
public class DisableOnPlay : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x6000720")]
	[Address(RVA = "0x8FCB70", Offset = "0x8FCB70", VA = "0x8FCB70")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000721")]
	[Address(RVA = "0x8FCB94", Offset = "0x8FCB94", VA = "0x8FCB94")]
	public DisableOnPlay()
	{
	}
}
[Token(Token = "0x200010D")]
public class InPlayAreaChecker : SingleInstanceBehavior<InPlayAreaChecker>
{
	[Token(Token = "0x4000677")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Collider playArea;

	[Token(Token = "0x4000678")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject environment;

	[Token(Token = "0x4000679")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject menuBoard;

	[Token(Token = "0x400067A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject outofBoundsOverlay;

	[Token(Token = "0x400067B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private TMP_Text outOfBoundsText;

	[Token(Token = "0x400067C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private LauncherMenu launcherMenu;

	[Token(Token = "0x400067D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Transform playerRoot;

	[Token(Token = "0x400067E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private CookoutAvatar cookoutAvatar;

	[Token(Token = "0x400067F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3 playAreaPos;

	[Token(Token = "0x4000680")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Vector3 playAreaExtent;

	[Token(Token = "0x4000681")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool isInbounds;

	[Token(Token = "0x4000682")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
	private bool initialized;

	[Token(Token = "0x4000683")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
	private bool leavingLauncher;

	[Token(Token = "0x4000684")]
	private const string oculusLocalization = "launcher_recenter";

	[Token(Token = "0x4000685")]
	private const string questLocalization = "launcher_recenter_quest";

	[Token(Token = "0x4000686")]
	private const string viveLocalization = "launcher_recenter_vive";

	[Token(Token = "0x4000687")]
	private const string valveIndexLocalization = "launcher_recenter_knuckles";

	[Token(Token = "0x6000722")]
	[Address(RVA = "0x8FCB9C", Offset = "0x8FCB9C", VA = "0x8FCB9C")]
	public void Init()
	{
	}

	[Token(Token = "0x6000723")]
	[Address(RVA = "0x8FD064", Offset = "0x8FD064", VA = "0x8FD064")]
	public void OnLeavingLauncher()
	{
	}

	[Token(Token = "0x6000724")]
	[Address(RVA = "0x8FD0E0", Offset = "0x8FD0E0", VA = "0x8FD0E0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000725")]
	[Address(RVA = "0x8FCD78", Offset = "0x8FCD78", VA = "0x8FCD78")]
	private void SetMessage()
	{
	}

	[Token(Token = "0x6000726")]
	[Address(RVA = "0x8FD184", Offset = "0x8FD184", VA = "0x8FD184")]
	public InPlayAreaChecker()
	{
	}
}
[Token(Token = "0x200010E")]
[CreateAssetMenu(fileName = "MaterialList", menuName = "Materials/New Material List")]
public class MaterialList : ScriptableObject
{
	[Token(Token = "0x4000688")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public UnityEngine.Object[] scenes;

	[Token(Token = "0x4000689")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string[] prefabLocations;

	[Token(Token = "0x400068A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Material[] materials;

	[Token(Token = "0x6000727")]
	[Address(RVA = "0x8FD1F8", Offset = "0x8FD1F8", VA = "0x8FD1F8")]
	public MaterialList()
	{
	}
}
[Token(Token = "0x200010F")]
[DisallowMultipleComponent]
public class NetworkDestroyIfDropped : NetworkedBehaviour
{
	[Token(Token = "0x400068B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private IngredientBase optionalIngredient;

	[Token(Token = "0x400068C")]
	private const string floorTag = "Floor";

	[Token(Token = "0x400068D")]
	private const string environmentTag = "Environment";

	[Token(Token = "0x400068E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float destroyLimit;

	[Token(Token = "0x400068F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float floorDestroyTime;

	[Token(Token = "0x4000690")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform myTransform;

	[Token(Token = "0x4000691")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool aboutToBeDespawned;

	[Token(Token = "0x4000692")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int isTouchingFloor;

	[Token(Token = "0x4000693")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float floorDestroyTimer;

	[Token(Token = "0x17000101")]
	private bool AboutToBeDespawned
	{
		[Token(Token = "0x6000728")]
		[Address(RVA = "0x8FD200", Offset = "0x8FD200", VA = "0x8FD200")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000729")]
		[Address(RVA = "0x8FD2A0", Offset = "0x8FD2A0", VA = "0x8FD2A0")]
		set
		{
		}
	}

	[Token(Token = "0x600072A")]
	[Address(RVA = "0x8FD340", Offset = "0x8FD340", VA = "0x8FD340")]
	private void Awake()
	{
	}

	[Token(Token = "0x600072B")]
	[Address(RVA = "0x8FD35C", Offset = "0x8FD35C", VA = "0x8FD35C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600072C")]
	[Address(RVA = "0x8FD368", Offset = "0x8FD368", VA = "0x8FD368")]
	private void Update()
	{
	}

	[Token(Token = "0x600072D")]
	[Address(RVA = "0x8FD564", Offset = "0x8FD564", VA = "0x8FD564")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600072E")]
	[Address(RVA = "0x8FD63C", Offset = "0x8FD63C", VA = "0x8FD63C")]
	private void OnCollisionExit(Collision collision)
	{
	}

	[Token(Token = "0x600072F")]
	[Address(RVA = "0x8FD710", Offset = "0x8FD710", VA = "0x8FD710")]
	[PunRPC]
	private void OnDroppedObjectDestroyRPC()
	{
	}

	[Token(Token = "0x6000730")]
	[Address(RVA = "0x8FD8E0", Offset = "0x8FD8E0", VA = "0x8FD8E0")]
	public NetworkDestroyIfDropped()
	{
	}
}
[Token(Token = "0x2000110")]
public sealed class ShaderWarmup : SingleInstanceBehavior<ShaderWarmup>
{
	[Token(Token = "0x2000111")]
	[CompilerGenerated]
	private sealed class <DrawAllMaterials>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400069A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ShaderWarmup <>4__this;

		[Token(Token = "0x17000102")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000738")]
			[Address(RVA = "0x8FF8E0", Offset = "0x8FF8E0", VA = "0x8FF8E0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000103")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600073A")]
			[Address(RVA = "0x8FF928", Offset = "0x8FF928", VA = "0x8FF928", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000735")]
		[Address(RVA = "0x8FE9FC", Offset = "0x8FE9FC", VA = "0x8FE9FC")]
		[DebuggerHidden]
		public <DrawAllMaterials>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x6000736")]
		[Address(RVA = "0x8FEF0C", Offset = "0x8FEF0C", VA = "0x8FEF0C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000737")]
		[Address(RVA = "0x8FEF10", Offset = "0x8FEF10", VA = "0x8FEF10", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000739")]
		[Address(RVA = "0x8FF8E8", Offset = "0x8FF8E8", VA = "0x8FF8E8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000694")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private MaterialList materialList;

	[Token(Token = "0x4000695")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private bool logWarmedUpShaders;

	[Token(Token = "0x4000696")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Mesh warmUpMesh;

	[Token(Token = "0x4000697")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<string> warmedUpSceneCombinations;

	[Token(Token = "0x6000731")]
	[Address(RVA = "0x8FE8F4", Offset = "0x8FE8F4", VA = "0x8FE8F4", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000732")]
	[Address(RVA = "0x8FE994", Offset = "0x8FE994", VA = "0x8FE994")]
	[IteratorStateMachine(typeof(<DrawAllMaterials>d__5))]
	private IEnumerator DrawAllMaterials()
	{
		return null;
	}

	[Token(Token = "0x6000733")]
	[Address(RVA = "0x8FEA24", Offset = "0x8FEA24", VA = "0x8FEA24")]
	public void WarmupShaders(CookoutApplicationState state, string environment)
	{
	}

	[Token(Token = "0x6000734")]
	[Address(RVA = "0x8FEEA0", Offset = "0x8FEEA0", VA = "0x8FEEA0")]
	public ShaderWarmup()
	{
	}
}
[Token(Token = "0x2000112")]
public class SteamVRLoadFailHandler : SingleInstanceBehavior<SteamVRLoadFailHandler>
{
	[Token(Token = "0x400069B")]
	private const float messageDisplayTime = 12f;

	[Token(Token = "0x600073B")]
	[Address(RVA = "0x8FF930", Offset = "0x8FF930", VA = "0x8FF930")]
	public void OnSteamVRLoadFailed()
	{
	}

	[Token(Token = "0x600073C")]
	[Address(RVA = "0x8FFAD0", Offset = "0x8FFAD0", VA = "0x8FFAD0")]
	public SteamVRLoadFailHandler()
	{
	}
}
[Token(Token = "0x2000114")]
public class UnparentAndFollow : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x400069E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[FormerlySerializedAs("spawnPosition")]
	public Transform target;

	[Token(Token = "0x6000740")]
	[Address(RVA = "0x8FFBF8", Offset = "0x8FFBF8", VA = "0x8FFBF8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000741")]
	[Address(RVA = "0x8FFBFC", Offset = "0x8FFBFC", VA = "0x8FFBFC")]
	public void Unparent()
	{
	}

	[Token(Token = "0x6000742")]
	[Address(RVA = "0x8FFC20", Offset = "0x8FFC20", VA = "0x8FFC20")]
	private void Update()
	{
	}

	[Token(Token = "0x6000743")]
	[Address(RVA = "0x8FFD54", Offset = "0x8FFD54", VA = "0x8FFD54")]
	public UnparentAndFollow()
	{
	}
}
[Token(Token = "0x2000115")]
public class AvatarBody : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x400069F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform anchor;

	[Token(Token = "0x40006A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Renderer myRenderer;

	[Token(Token = "0x17000104")]
	public Transform GetAnchor
	{
		[Token(Token = "0x6000744")]
		[Address(RVA = "0x8FFD5C", Offset = "0x8FFD5C", VA = "0x8FFD5C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000105")]
	public Renderer GetRenderer
	{
		[Token(Token = "0x6000745")]
		[Address(RVA = "0x8FFD64", Offset = "0x8FFD64", VA = "0x8FFD64")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000746")]
	[Address(RVA = "0x8FFD6C", Offset = "0x8FFD6C", VA = "0x8FFD6C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000747")]
	[Address(RVA = "0x8FFD70", Offset = "0x8FFD70", VA = "0x8FFD70")]
	public AvatarBody()
	{
	}
}
[Serializable]
[Token(Token = "0x2000116")]
[CreateAssetMenu(fileName = "NewAvatarBodyData", menuName = "Avatars/Avatar Body Data")]
public class AvatarBodyData : ScriptableObject
{
	[Token(Token = "0x40006A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AvatarBodyType type;

	[Token(Token = "0x40006A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject prefab;

	[Token(Token = "0x40006A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool hasColorCoding;

	[Token(Token = "0x40006A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Material[] colorCodeMaterials;

	[Token(Token = "0x40006A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Sprite icon;

	[Token(Token = "0x6000748")]
	[Address(RVA = "0x8FFD78", Offset = "0x8FFD78", VA = "0x8FFD78")]
	public AvatarBodyData()
	{
	}
}
[Serializable]
[Token(Token = "0x2000117")]
[CreateAssetMenu(fileName = "NewAvatarBodyList", menuName = "Avatars/Avatar Body List")]
public class AvatarBodyList : ScriptableObject
{
	[Token(Token = "0x40006A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<AvatarBodyData> avatarBodies;

	[Token(Token = "0x6000749")]
	[Address(RVA = "0x8FFDD0", Offset = "0x8FFDD0", VA = "0x8FFDD0")]
	public AvatarBodyList()
	{
	}
}
[Token(Token = "0x2000118")]
public enum AvatarBodyType : byte
{
	[Token(Token = "0x40006A8")]
	ChefsJacket,
	[Token(Token = "0x40006A9")]
	ChefsJacketScarf,
	[Token(Token = "0x40006AA")]
	Benihana,
	[Token(Token = "0x40006AB")]
	Artist,
	[Token(Token = "0x40006AC")]
	Apron,
	[Token(Token = "0x40006AD")]
	ApronCookoutLogo,
	[Token(Token = "0x40006AE")]
	ApronCookoutSandwich,
	[Token(Token = "0x40006AF")]
	ApronBlaston,
	[Token(Token = "0x40006B0")]
	ApronDemeo,
	[Token(Token = "0x40006B1")]
	ChefsJacketBlack,
	[Token(Token = "0x40006B2")]
	RoyalCape,
	[Token(Token = "0x40006B3")]
	ApronCarrot,
	[Token(Token = "0x40006B4")]
	Wackohnalds,
	[Token(Token = "0x40006B5")]
	Moonbucks,
	[Token(Token = "0x40006B6")]
	FrillyApronPink,
	[Token(Token = "0x40006B7")]
	FrillyApronBlue,
	[Token(Token = "0x40006B8")]
	BeeBody,
	[Token(Token = "0x40006B9")]
	DirtyLineChef,
	[Token(Token = "0x40006BA")]
	TRexGreen,
	[Token(Token = "0x40006BB")]
	TRexBlue,
	[Token(Token = "0x40006BC")]
	DressShirtWhite,
	[Token(Token = "0x40006BD")]
	DressShirtBlack,
	[Token(Token = "0x40006BE")]
	HawaiianShirtBlue,
	[Token(Token = "0x40006BF")]
	HawaiianShirtRed,
	[Token(Token = "0x40006C0")]
	PirateVest,
	[Token(Token = "0x40006C1")]
	ChefsJacketCyan,
	[Token(Token = "0x40006C2")]
	ChefsJacketLime,
	[Token(Token = "0x40006C3")]
	ChefsJacketOrange,
	[Token(Token = "0x40006C4")]
	ChefsJacketPink,
	[Token(Token = "0x40006C5")]
	ChefsJacketPurple,
	[Token(Token = "0x40006C6")]
	ChefsJacketRed,
	[Token(Token = "0x40006C7")]
	BatShirt,
	[Token(Token = "0x40006C8")]
	GingerbreadShirt
}
[Token(Token = "0x2000119")]
public class AvatarBodyRegistery : SingleInstanceBehavior<AvatarBodyRegistery>
{
	[Token(Token = "0x40006C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AvatarBodyList bodies;

	[Token(Token = "0x40006CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<AvatarBodyType, AvatarBodyData> bodyRegistry;

	[Token(Token = "0x17000106")]
	public int BodyCount
	{
		[Token(Token = "0x600074A")]
		[Address(RVA = "0x8FFDD8", Offset = "0x8FFDD8", VA = "0x8FFDD8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x600074B")]
	[Address(RVA = "0x8FFE28", Offset = "0x8FFE28", VA = "0x8FFE28", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x600074C")]
	[Address(RVA = "0x8FFF54", Offset = "0x8FFF54", VA = "0x8FFF54")]
	public AvatarBodyData GetBodyData(AvatarBodyType type)
	{
		return null;
	}

	[Token(Token = "0x600074D")]
	[Address(RVA = "0x8FFFAC", Offset = "0x8FFFAC", VA = "0x8FFFAC")]
	public Sprite GetBodyIcon(AvatarBodyType type)
	{
		return null;
	}

	[Token(Token = "0x600074E")]
	[Address(RVA = "0x900010", Offset = "0x900010", VA = "0x900010")]
	public bool GetBodyHasColorCoding(AvatarBodyType type)
	{
		return default(bool);
	}

	[Token(Token = "0x600074F")]
	[Address(RVA = "0x900074", Offset = "0x900074", VA = "0x900074")]
	public Material GetBodyColorCoding(AvatarBodyType type, PlayerColor color)
	{
		return null;
	}

	[Token(Token = "0x6000750")]
	[Address(RVA = "0x900244", Offset = "0x900244", VA = "0x900244")]
	public AvatarBodyRegistery()
	{
	}
}
[Token(Token = "0x200011A")]
public class AvatarCustomizationBuyables
{
	[Token(Token = "0x40006CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Dictionary<CookoutAvatarVisualType, HeadUnlockData> buyableAvatars;

	[Token(Token = "0x40006CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Dictionary<AvatarHatType, bool> buyableHats;

	[Token(Token = "0x40006CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static Dictionary<AvatarBodyType, bool> buyableBodies;

	[Token(Token = "0x40006CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static Dictionary<AvatarHandMaterial, bool> buyableHandMaterials;

	[Token(Token = "0x40006CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static Dictionary<CookoutAvatarVisualType, int[]> avatarPrices;

	[Token(Token = "0x40006D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static Dictionary<AvatarHatType, int> hatPrices;

	[Token(Token = "0x40006D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static Dictionary<AvatarBodyType, int> bodyPrices;

	[Token(Token = "0x40006D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static Dictionary<AvatarHandMaterial, int> handMaterialPrices;

	[Token(Token = "0x40006D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static SaveManager saveManager;

	[Token(Token = "0x40006D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static AvatarSelectionMenu avatarSelectionMenu;

	[Token(Token = "0x40006D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static CoinCount coinCount;

	[Token(Token = "0x40006D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static bool initialized;

	[Token(Token = "0x17000107")]
	private static int CoinBalance
	{
		[Token(Token = "0x6000751")]
		[Address(RVA = "0x9002B0", Offset = "0x9002B0", VA = "0x9002B0")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000752")]
	[Address(RVA = "0x900314", Offset = "0x900314", VA = "0x900314")]
	public static void Init(BuyableAvatarCustomizationList buyableList)
	{
	}

	[Token(Token = "0x6000753")]
	[Address(RVA = "0x900D90", Offset = "0x900D90", VA = "0x900D90")]
	public static bool GetHatIsBought(AvatarHatType hat)
	{
		return default(bool);
	}

	[Token(Token = "0x6000754")]
	[Address(RVA = "0x900E64", Offset = "0x900E64", VA = "0x900E64")]
	public static bool GetAvatarHasBuyableSkins(CookoutAvatarVisualType avatar)
	{
		return default(bool);
	}

	[Token(Token = "0x6000755")]
	[Address(RVA = "0x900EE4", Offset = "0x900EE4", VA = "0x900EE4")]
	public static bool[] GetBoughtAvatarSkins(CookoutAvatarVisualType avatar)
	{
		return null;
	}

	[Token(Token = "0x6000756")]
	[Address(RVA = "0x900F70", Offset = "0x900F70", VA = "0x900F70")]
	public static bool GetBodyIsBought(AvatarBodyType body)
	{
		return default(bool);
	}

	[Token(Token = "0x6000757")]
	[Address(RVA = "0x901044", Offset = "0x901044", VA = "0x901044")]
	public static bool GetHandMaterialIsBought(AvatarHandMaterial hand)
	{
		return default(bool);
	}

	[Token(Token = "0x6000758")]
	[Address(RVA = "0x901118", Offset = "0x901118", VA = "0x901118")]
	public static bool TryBuyHat(AvatarHatType hat)
	{
		return default(bool);
	}

	[Token(Token = "0x6000759")]
	[Address(RVA = "0x90139C", Offset = "0x90139C", VA = "0x90139C")]
	public static bool TryBuyAvatarSkin(CookoutAvatarVisualType type, int materialIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x600075A")]
	[Address(RVA = "0x9014E4", Offset = "0x9014E4", VA = "0x9014E4")]
	public static bool TryBuyBody(AvatarBodyType body)
	{
		return default(bool);
	}

	[Token(Token = "0x600075B")]
	[Address(RVA = "0x9015DC", Offset = "0x9015DC", VA = "0x9015DC")]
	public static bool TryBuyHandMaterial(AvatarHandMaterial handMaterial)
	{
		return default(bool);
	}

	[Token(Token = "0x600075C")]
	[Address(RVA = "0x9016D4", Offset = "0x9016D4", VA = "0x9016D4")]
	public static int GetHatPrice(AvatarHatType type)
	{
		return default(int);
	}

	[Token(Token = "0x600075D")]
	[Address(RVA = "0x901754", Offset = "0x901754", VA = "0x901754")]
	public static int GetAvatarSkinPrice(CookoutAvatarVisualType type, int index)
	{
		return default(int);
	}

	[Token(Token = "0x600075E")]
	[Address(RVA = "0x901800", Offset = "0x901800", VA = "0x901800")]
	public static int GetBodyPrice(AvatarBodyType type)
	{
		return default(int);
	}

	[Token(Token = "0x600075F")]
	[Address(RVA = "0x901880", Offset = "0x901880", VA = "0x901880")]
	public static int GetHandPrice(AvatarHandMaterial type)
	{
		return default(int);
	}

	[Token(Token = "0x6000760")]
	[Address(RVA = "0x901210", Offset = "0x901210", VA = "0x901210")]
	private static bool BuyItem(int price)
	{
		return default(bool);
	}

	[Token(Token = "0x6000761")]
	[Address(RVA = "0x901900", Offset = "0x901900", VA = "0x901900")]
	public AvatarCustomizationBuyables()
	{
	}
}
[Serializable]
[Token(Token = "0x200011B")]
public class HeadUnlockData
{
	[Token(Token = "0x40006D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public CookoutAvatarVisualType type;

	[Token(Token = "0x40006D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool[] materialsUnlocked;

	[Token(Token = "0x6000763")]
	[Address(RVA = "0x900C30", Offset = "0x900C30", VA = "0x900C30")]
	public HeadUnlockData(CookoutAvatarVisualType type)
	{
	}

	[Token(Token = "0x6000764")]
	[Address(RVA = "0x901C04", Offset = "0x901C04", VA = "0x901C04")]
	public HeadUnlockData(CookoutAvatarVisualType type, int defaultMaterialIndex)
	{
	}

	[Token(Token = "0x6000765")]
	[Address(RVA = "0x901D70", Offset = "0x901D70", VA = "0x901D70")]
	public bool AvatarIsUnlocked()
	{
		return default(bool);
	}
}
[Token(Token = "0x200011C")]
public enum AvatarCustomizationUnlockCondition
{
	[Token(Token = "0x40006DA")]
	Invalid,
	[Token(Token = "0x40006DB")]
	ServeManyRabbits,
	[Token(Token = "0x40006DC")]
	EatTruffleAsPig,
	[Token(Token = "0x40006DD")]
	ServeBurntIngredient,
	[Token(Token = "0x40006DE")]
	ServeManyConsecutivePerfectsEndlessMode,
	[Token(Token = "0x40006DF")]
	ClearRoyalDinnerService,
	[Token(Token = "0x40006E0")]
	Serve1000Plates,
	[Token(Token = "0x40006E1")]
	KissMirror,
	[Token(Token = "0x40006E2")]
	CleaverInWell,
	[Token(Token = "0x40006E3")]
	FeedTheMouse,
	[Token(Token = "0x40006E4")]
	Kleptomania,
	[Token(Token = "0x40006E5")]
	DryPalace,
	[Token(Token = "0x40006E6")]
	Fencing,
	[Token(Token = "0x40006E7")]
	FistBump,
	[Token(Token = "0x40006E8")]
	HighFive
}
[Token(Token = "0x200011D")]
public class AvatarCustomizationUnlocks
{
	[Token(Token = "0x40006E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Dictionary<CookoutAvatarVisualType, HeadUnlockData> unlockableAvatars;

	[Token(Token = "0x40006EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Dictionary<AvatarHatType, bool> unlockableHats;

	[Token(Token = "0x40006EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static Dictionary<AvatarBodyType, bool> unlockableBodies;

	[Token(Token = "0x40006EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static Dictionary<AvatarHandMaterial, bool> unlockableHandMaterials;

	[Token(Token = "0x40006ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static Dictionary<AvatarCustomizationUnlockCondition, List<UnlockableAvatarCustomizationData>> unlocksByCondition;

	[Token(Token = "0x40006EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static SaveManager saveManager;

	[Token(Token = "0x40006EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static bool initialized;

	[Token(Token = "0x40006F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static List<UnlockableAvatarCustomizationData> unlockList;

	[Token(Token = "0x6000766")]
	[Address(RVA = "0x901DC8", Offset = "0x901DC8", VA = "0x901DC8")]
	public static void Init(UnlockableAvatarCustomizationList newUnlockList)
	{
	}

	[Token(Token = "0x6000767")]
	[Address(RVA = "0x902694", Offset = "0x902694", VA = "0x902694")]
	public static bool GetHatIsUnlocked(AvatarHatType hat)
	{
		return default(bool);
	}

	[Token(Token = "0x6000768")]
	[Address(RVA = "0x902768", Offset = "0x902768", VA = "0x902768")]
	public static bool GetBodyIsUnlocked(AvatarBodyType body)
	{
		return default(bool);
	}

	[Token(Token = "0x6000769")]
	[Address(RVA = "0x90283C", Offset = "0x90283C", VA = "0x90283C")]
	public static bool GetHandMaterialIsUnlocked(AvatarHandMaterial hand)
	{
		return default(bool);
	}

	[Token(Token = "0x600076A")]
	[Address(RVA = "0x902910", Offset = "0x902910", VA = "0x902910")]
	public static bool GetAvatarHasUnlockableSkins(CookoutAvatarVisualType avatar)
	{
		return default(bool);
	}

	[Token(Token = "0x600076B")]
	[Address(RVA = "0x902990", Offset = "0x902990", VA = "0x902990")]
	public static bool GetAvatarIsUnlocked(CookoutAvatarVisualType avatar)
	{
		return default(bool);
	}

	[Token(Token = "0x600076C")]
	[Address(RVA = "0x902A6C", Offset = "0x902A6C", VA = "0x902A6C")]
	public static bool GetAvatarSkinIsUnlocked(CookoutAvatarVisualType avatar, int materialIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x600076D")]
	[Address(RVA = "0x902B74", Offset = "0x902B74", VA = "0x902B74")]
	public static bool[] GetUnlockedAvatarHeadSkins(CookoutAvatarVisualType avatar)
	{
		return null;
	}

	[Token(Token = "0x600076E")]
	[Address(RVA = "0x902C00", Offset = "0x902C00", VA = "0x902C00")]
	public static void UnlockAvatarCustomizationOption(AvatarCustomizationUnlockCondition unlockCondition)
	{
	}

	[Token(Token = "0x600076F")]
	[Address(RVA = "0x902FB0", Offset = "0x902FB0", VA = "0x902FB0")]
	public static string GetUnlockConditionText(AvatarHatType type)
	{
		return null;
	}

	[Token(Token = "0x6000770")]
	[Address(RVA = "0x903134", Offset = "0x903134", VA = "0x903134")]
	public static string GetUnlockConditionText(CookoutAvatarVisualType type, int materialIndex)
	{
		return null;
	}

	[Token(Token = "0x6000771")]
	[Address(RVA = "0x9032C8", Offset = "0x9032C8", VA = "0x9032C8")]
	public static string GetUnlockConditionText(AvatarBodyType type)
	{
		return null;
	}

	[Token(Token = "0x6000772")]
	[Address(RVA = "0x90344C", Offset = "0x90344C", VA = "0x90344C")]
	public static string GetUnlockConditionText(AvatarHandMaterial type)
	{
		return null;
	}

	[Token(Token = "0x6000773")]
	[Address(RVA = "0x9035D0", Offset = "0x9035D0", VA = "0x9035D0")]
	public AvatarCustomizationUnlocks()
	{
	}
}
[Token(Token = "0x200011E")]
public enum AvatarHandMaterial : byte
{
	[Token(Token = "0x40006F2")]
	Standard,
	[Token(Token = "0x40006F3")]
	BlackLeather,
	[Token(Token = "0x40006F4")]
	Wackohnalds,
	[Token(Token = "0x40006F5")]
	Moonbucks,
	[Token(Token = "0x40006F6")]
	BabyPink,
	[Token(Token = "0x40006F7")]
	BabyBlue,
	[Token(Token = "0x40006F8")]
	BrownLeather,
	[Token(Token = "0x40006F9")]
	DirtyGloves,
	[Token(Token = "0x40006FA")]
	RoyalGloves,
	[Token(Token = "0x40006FB")]
	Chainmail,
	[Token(Token = "0x40006FC")]
	PowGloves,
	[Token(Token = "0x40006FD")]
	SmackGloves,
	[Token(Token = "0x40006FE")]
	SandwixhGloves,
	[Token(Token = "0x40006FF")]
	GlovesRed,
	[Token(Token = "0x4000700")]
	GlovesCyan,
	[Token(Token = "0x4000701")]
	GlovesOrange,
	[Token(Token = "0x4000702")]
	GlovesPurple,
	[Token(Token = "0x4000703")]
	GlovesLime,
	[Token(Token = "0x4000704")]
	TentacleGloves
}
[Token(Token = "0x200011F")]
public class AvatarHandRegistry : SingleInstanceBehavior<AvatarHandRegistry>
{
	[Token(Token = "0x4000705")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Material[] handMaterialsRed;

	[Token(Token = "0x4000706")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Material[] handMaterialsBlue;

	[Token(Token = "0x4000707")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Material[] handMaterialsYellow;

	[Token(Token = "0x4000708")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Material[] handMaterialsGreen;

	[Token(Token = "0x4000709")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Sprite[] handIcons;

	[Token(Token = "0x17000108")]
	public int HandCount
	{
		[Token(Token = "0x6000775")]
		[Address(RVA = "0x903798", Offset = "0x903798", VA = "0x903798")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000776")]
	[Address(RVA = "0x9037B4", Offset = "0x9037B4", VA = "0x9037B4", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000777")]
	[Address(RVA = "0x903820", Offset = "0x903820", VA = "0x903820")]
	public int GetHandMaterialCount()
	{
		return default(int);
	}

	[Token(Token = "0x6000778")]
	[Address(RVA = "0x90383C", Offset = "0x90383C", VA = "0x90383C")]
	public Sprite GetHandIcon(AvatarHandMaterial material)
	{
		return null;
	}

	[Token(Token = "0x6000779")]
	[Address(RVA = "0x90386C", Offset = "0x90386C", VA = "0x90386C")]
	public Material GetHandMaterial(PlayerColor color, AvatarHandMaterial material)
	{
		return null;
	}

	[Token(Token = "0x600077A")]
	[Address(RVA = "0x90399C", Offset = "0x90399C", VA = "0x90399C")]
	public AvatarHandRegistry()
	{
	}
}
[Token(Token = "0x2000120")]
public class AvatarHat : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x400070A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Renderer myRenderer;

	[Token(Token = "0x17000109")]
	public Renderer GetRenderer
	{
		[Token(Token = "0x600077B")]
		[Address(RVA = "0x903A08", Offset = "0x903A08", VA = "0x903A08")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600077C")]
	[Address(RVA = "0x903A10", Offset = "0x903A10", VA = "0x903A10")]
	private void Awake()
	{
	}

	[Token(Token = "0x600077D")]
	[Address(RVA = "0x903A14", Offset = "0x903A14", VA = "0x903A14")]
	public AvatarHat()
	{
	}
}
[Token(Token = "0x2000121")]
public class AvatarHatAnchor : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x400070B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform anchor;

	[Token(Token = "0x1700010A")]
	public Transform GetAnchor
	{
		[Token(Token = "0x600077E")]
		[Address(RVA = "0x903A1C", Offset = "0x903A1C", VA = "0x903A1C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600077F")]
	[Address(RVA = "0x903A24", Offset = "0x903A24", VA = "0x903A24")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000780")]
	[Address(RVA = "0x903A28", Offset = "0x903A28", VA = "0x903A28")]
	public AvatarHatAnchor()
	{
	}
}
[Serializable]
[Token(Token = "0x2000122")]
[CreateAssetMenu(fileName = "NewAvatarHatData", menuName = "Avatars/Avatar Hat Data")]
public class AvatarHatData : ScriptableObject
{
	[Token(Token = "0x400070C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AvatarHatType type;

	[Token(Token = "0x400070D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject prefab;

	[Token(Token = "0x400070E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Sprite icon;

	[Token(Token = "0x6000781")]
	[Address(RVA = "0x903A30", Offset = "0x903A30", VA = "0x903A30")]
	public AvatarHatData()
	{
	}
}
[Serializable]
[Token(Token = "0x2000123")]
[CreateAssetMenu(fileName = "NewAvatarHatList", menuName = "Avatars/Avatar Hat List")]
public class AvatarHatList : ScriptableObject
{
	[Token(Token = "0x400070F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<AvatarHatData> avatarHats;

	[Token(Token = "0x6000782")]
	[Address(RVA = "0x903A38", Offset = "0x903A38", VA = "0x903A38")]
	public AvatarHatList()
	{
	}
}
[Token(Token = "0x2000124")]
public enum AvatarHatType : byte
{
	[Token(Token = "0x4000711")]
	None,
	[Token(Token = "0x4000712")]
	ChefHatBulb,
	[Token(Token = "0x4000713")]
	ChefHatCylinderShort,
	[Token(Token = "0x4000714")]
	ChefHatCylinderMedium,
	[Token(Token = "0x4000715")]
	ChefHatCylinderTall,
	[Token(Token = "0x4000716")]
	ChefHatBenihana,
	[Token(Token = "0x4000717")]
	ChefHatArtist,
	[Token(Token = "0x4000718")]
	ChefsHatRoyal,
	[Token(Token = "0x4000719")]
	WackohnaldsCap,
	[Token(Token = "0x400071A")]
	MoonbucksCap,
	[Token(Token = "0x400071B")]
	WackohnaldsHat,
	[Token(Token = "0x400071C")]
	MoonbucksHat,
	[Token(Token = "0x400071D")]
	SunhatPink,
	[Token(Token = "0x400071E")]
	SunhatBlue,
	[Token(Token = "0x400071F")]
	SunhatBlack,
	[Token(Token = "0x4000720")]
	BalloonHatPink,
	[Token(Token = "0x4000721")]
	BalloonHatBlue,
	[Token(Token = "0x4000722")]
	BeeBeret,
	[Token(Token = "0x4000723")]
	DirtyChefsHat,
	[Token(Token = "0x4000724")]
	JimbobCap,
	[Token(Token = "0x4000725")]
	BlastonCap,
	[Token(Token = "0x4000726")]
	ClassicCap,
	[Token(Token = "0x4000727")]
	CookoutLogoCap,
	[Token(Token = "0x4000728")]
	BuildersHat,
	[Token(Token = "0x4000729")]
	TRexHatGreen,
	[Token(Token = "0x400072A")]
	TRexHatBlue,
	[Token(Token = "0x400072B")]
	RatHat,
	[Token(Token = "0x400072C")]
	DeadFish,
	[Token(Token = "0x400072D")]
	AcornHat,
	[Token(Token = "0x400072E")]
	PirateHat,
	[Token(Token = "0x400072F")]
	WitchHat,
	[Token(Token = "0x4000730")]
	WizardHat,
	[Token(Token = "0x4000731")]
	CylinderHatBlack,
	[Token(Token = "0x4000732")]
	BulbHatBlack,
	[Token(Token = "0x4000733")]
	CylinderHatCyan,
	[Token(Token = "0x4000734")]
	BulbHatCyan,
	[Token(Token = "0x4000735")]
	CylinderHatLime,
	[Token(Token = "0x4000736")]
	BulbHatLime,
	[Token(Token = "0x4000737")]
	CylinderHatOrange,
	[Token(Token = "0x4000738")]
	BulbHatOrange,
	[Token(Token = "0x4000739")]
	CylinderHatPink,
	[Token(Token = "0x400073A")]
	BulbHatPink,
	[Token(Token = "0x400073B")]
	CylinderHatPurple,
	[Token(Token = "0x400073C")]
	BulbHatPurple,
	[Token(Token = "0x400073D")]
	CylinderHatRed,
	[Token(Token = "0x400073E")]
	BulbHatRed,
	[Token(Token = "0x400073F")]
	BandanaStriped,
	[Token(Token = "0x4000740")]
	BandanaRed,
	[Token(Token = "0x4000741")]
	BandanaPurple,
	[Token(Token = "0x4000742")]
	Pumpkin,
	[Token(Token = "0x4000743")]
	DemeoWizardHat,
	[Token(Token = "0x4000744")]
	SantaHat,
	[Token(Token = "0x4000745")]
	GingerbreadHat
}
[Token(Token = "0x2000125")]
public class AvatarHatRegistry : SingleInstanceBehavior<AvatarHatRegistry>
{
	[Token(Token = "0x4000746")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AvatarHatList hats;

	[Token(Token = "0x4000747")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Sprite noHatIcon;

	[Token(Token = "0x4000748")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<AvatarHatType, AvatarHatData> hatRegistry;

	[Token(Token = "0x1700010B")]
	public int HatCount
	{
		[Token(Token = "0x6000783")]
		[Address(RVA = "0x903A40", Offset = "0x903A40", VA = "0x903A40")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000784")]
	[Address(RVA = "0x903A98", Offset = "0x903A98", VA = "0x903A98", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000785")]
	[Address(RVA = "0x903BC4", Offset = "0x903BC4", VA = "0x903BC4")]
	public AvatarHatData GetHatData(AvatarHatType type)
	{
		return null;
	}

	[Token(Token = "0x6000786")]
	[Address(RVA = "0x903C1C", Offset = "0x903C1C", VA = "0x903C1C")]
	public Sprite GetHatIcon(AvatarHatType type)
	{
		return null;
	}

	[Token(Token = "0x6000787")]
	[Address(RVA = "0x903C94", Offset = "0x903C94", VA = "0x903C94")]
	public AvatarHatRegistry()
	{
	}
}
[Serializable]
[Token(Token = "0x2000126")]
[CreateAssetMenu(fileName = "NewAvatarHeadData", menuName = "Avatars/Avatar Head Data")]
public class AvatarHeadData : ScriptableObject
{
	[Token(Token = "0x4000749")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CookoutAvatarVisualType type;

	[Token(Token = "0x400074A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject prefab;

	[Token(Token = "0x400074B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Sprite[] menuIconSprites;

	[Token(Token = "0x400074C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Material[] headMaterials;

	[Token(Token = "0x400074D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Material[] eyeMaterials;

	[Token(Token = "0x400074E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Color[] headMaterialColors;

	[Token(Token = "0x6000788")]
	[Address(RVA = "0x903D00", Offset = "0x903D00", VA = "0x903D00")]
	public AvatarHeadData()
	{
	}
}
[Serializable]
[Token(Token = "0x2000127")]
[CreateAssetMenu(fileName = "NewAvatarHeadList", menuName = "Avatars/Avatar Head List")]
public class AvatarHeadList : ScriptableObject
{
	[Token(Token = "0x400074F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<AvatarHeadData> avatarHeads;

	[Token(Token = "0x6000789")]
	[Address(RVA = "0x903D08", Offset = "0x903D08", VA = "0x903D08")]
	public AvatarHeadList()
	{
	}
}
[Token(Token = "0x2000128")]
public class AvatarHeadRegistry : SingleInstanceBehavior<AvatarHeadRegistry>
{
	[Token(Token = "0x4000750")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AvatarHeadList avatarHeads;

	[Token(Token = "0x4000751")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<CookoutAvatarVisualType, AvatarHeadData> avatarHeadRegistry;

	[Token(Token = "0x1700010C")]
	public int HeadCount
	{
		[Token(Token = "0x600078A")]
		[Address(RVA = "0x903D10", Offset = "0x903D10", VA = "0x903D10")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x600078B")]
	[Address(RVA = "0x903D60", Offset = "0x903D60", VA = "0x903D60", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x600078C")]
	[Address(RVA = "0x901BAC", Offset = "0x901BAC", VA = "0x901BAC")]
	public AvatarHeadData GetAvatarHeadData(CookoutAvatarVisualType type)
	{
		return null;
	}

	[Token(Token = "0x600078D")]
	[Address(RVA = "0x903E48", Offset = "0x903E48", VA = "0x903E48")]
	public Sprite GetAvatarHeadIcon(CookoutAvatarVisualType type, int colorVariant)
	{
		return null;
	}

	[Token(Token = "0x600078E")]
	[Address(RVA = "0x903ED4", Offset = "0x903ED4", VA = "0x903ED4")]
	public int GetAvatarHeadCount()
	{
		return default(int);
	}

	[Token(Token = "0x600078F")]
	[Address(RVA = "0x903F24", Offset = "0x903F24", VA = "0x903F24")]
	public AvatarHeadRegistry()
	{
	}
}
[Token(Token = "0x2000129")]
public class AvatarSelection
{
	[Token(Token = "0x1700010D")]
	public static int GetSelectedAvatar
	{
		[Token(Token = "0x6000790")]
		[Address(RVA = "0x903FE0", Offset = "0x903FE0", VA = "0x903FE0")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000791")]
		[Address(RVA = "0x904028", Offset = "0x904028", VA = "0x904028")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000792")]
	[Address(RVA = "0x904074", Offset = "0x904074", VA = "0x904074")]
	public static void LoadPresetOculusAvatar2(CookoutAvatar avatar, int index)
	{
	}

	[Token(Token = "0x6000793")]
	[Address(RVA = "0x904078", Offset = "0x904078", VA = "0x904078")]
	public static void LoadOculusAvatar2(CookoutAvatar avatar, CookoutUserId userId)
	{
	}

	[Token(Token = "0x6000794")]
	[Address(RVA = "0x90407C", Offset = "0x90407C", VA = "0x90407C")]
	public static void SelectCookoutAvatar(CookoutAvatarVisualType avatarType, CookoutAvatar avatar, PlayerColor color = PlayerColor.Red)
	{
	}

	[Token(Token = "0x6000795")]
	[Address(RVA = "0x904794", Offset = "0x904794", VA = "0x904794")]
	public AvatarSelection()
	{
	}
}
[Token(Token = "0x200012A")]
public class AvatarSelectionMenu : SingleInstanceBehavior<AvatarSelectionMenu>
{
	[Token(Token = "0x200012B")]
	public enum CustomizationOption
	{
		[Token(Token = "0x40007CA")]
		Hat,
		[Token(Token = "0x40007CB")]
		Head,
		[Token(Token = "0x40007CC")]
		Body,
		[Token(Token = "0x40007CD")]
		Hand
	}

	[Token(Token = "0x200012C")]
	private struct AvatarButton
	{
		[Token(Token = "0x40007CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PokeButton button;

		[Token(Token = "0x40007CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public GameObject gameObject;

		[Token(Token = "0x40007D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MeshRenderer buttonRenderer;

		[Token(Token = "0x40007D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SpriteRenderer spriteRenderer;

		[Token(Token = "0x40007D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject checkMark;
	}

	[Token(Token = "0x200012D")]
	private struct OculusAvatarOption
	{
		[Token(Token = "0x40007D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int id;

		[Token(Token = "0x40007D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Sprite icon;
	}

	[Token(Token = "0x4000753")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Header("Action Buttons")]
	private PokeButton chooseAvatarButton;

	[Token(Token = "0x4000754")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private PokeButton chooseAvatarIntroButton;

	[Token(Token = "0x4000755")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private PokeButton avatarTypeSelectionButton;

	[Token(Token = "0x4000756")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private PokeButton revertChangesButton;

	[Token(Token = "0x4000757")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private PokeButton editOculusAvatar2Button;

	[Token(Token = "0x4000758")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Header("Parent GameObjects")]
	private GameObject avatarSelectionParent;

	[Token(Token = "0x4000759")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GameObject avatarNavigationParent;

	[Token(Token = "0x400075A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GameObject cookoutAvatarSelectionRoot;

	[Token(Token = "0x400075B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private GameObject oculusAvatarSelectionRootSteam;

	[Token(Token = "0x400075C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private GameObject oculusAvatarSelectionRootOculus;

	[Token(Token = "0x400075D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private GameObject loadingOculusAvatarLabel;

	[Token(Token = "0x400075E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private GameObject[] checkingOculusAvatarObjects;

	[Token(Token = "0x400075F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private GameObject loadingPresetOculusAvatarlabel;

	[Token(Token = "0x4000760")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private CoinCount coinCountBacking;

	[Token(Token = "0x4000761")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	[Header("Oculus Avatars")]
	private Sprite[] oculusAvatarPreviews;

	[Token(Token = "0x4000762")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[Header("Avatar Buttons")]
	[SerializeField]
	private PokeButton[] avatarsButtons;

	[Token(Token = "0x4000763")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Header("Textures & Materials")]
	[SerializeField]
	private Texture inactiveTexture;

	[Token(Token = "0x4000764")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private Texture activeTexture;

	[Token(Token = "0x4000765")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private Material categoryActiveMat;

	[Token(Token = "0x4000766")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private Material categoryInactiveMat;

	[Token(Token = "0x4000767")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	[Header("Text")]
	private TextMeshPro pageDisplayTextOculus;

	[Token(Token = "0x4000768")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private TextMeshPro pageDisplayTextCookout;

	[Token(Token = "0x4000769")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	private TextMeshPro selectCookoutCustomizationLabel;

	[Token(Token = "0x400076A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	[Header("Pagination Buttons")]
	private PokeButton scrollPrevious;

	[Token(Token = "0x400076B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[SerializeField]
	private PokeButton scrollNext;

	[Token(Token = "0x400076C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[SerializeField]
	[Header("Oculus avatar popup")]
	private GameObject oculusAvatarFailedPopupParent;

	[Token(Token = "0x400076D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[SerializeField]
	private PokeButton popupConfirmButton;

	[Token(Token = "0x400076E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[Header("Customization")]
	[SerializeField]
	private PokeButton categoryHats;

	[Token(Token = "0x400076F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[SerializeField]
	private PokeButton categoryHeads;

	[Token(Token = "0x4000770")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[SerializeField]
	private PokeButton categoryTorsos;

	[Token(Token = "0x4000771")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SerializeField]
	private PokeButton categoryGloves;

	[Token(Token = "0x4000772")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[SerializeField]
	private PokeButton nextGridPage;

	[Token(Token = "0x4000773")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[SerializeField]
	private PokeButton previousGridPage;

	[Token(Token = "0x4000774")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[SerializeField]
	private PokeButton selectCookoutCustomizationButton;

	[Token(Token = "0x4000775")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[SerializeField]
	private PokeButton[] colorOptions;

	[Token(Token = "0x4000776")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[SerializeField]
	private PokeButton[] customizationGridButtons;

	[Token(Token = "0x4000777")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[SerializeField]
	private SpriteRenderer[] customizationGridIcons;

	[Token(Token = "0x4000778")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	[SerializeField]
	private GameObject[] customizationGridEquippedLabels;

	[Token(Token = "0x4000779")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	[SerializeField]
	private GameObject[] customizationGridNewLabels;

	[Token(Token = "0x400077A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	[SerializeField]
	private GameObject[] customizationGridLockIcons;

	[Token(Token = "0x400077B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	[SerializeField]
	private GameObject[] customizationGridBuyIcons;

	[Token(Token = "0x400077C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	[SerializeField]
	private MeshRenderer[] customizationGridRenderer;

	[Token(Token = "0x400077D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	[SerializeField]
	private MeshRenderer categoryHatsRenderer;

	[Token(Token = "0x400077E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	[SerializeField]
	private MeshRenderer categoryHeadsRenderer;

	[Token(Token = "0x400077F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	[SerializeField]
	private MeshRenderer categoryTorsosRenderer;

	[Token(Token = "0x4000780")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	[SerializeField]
	private MeshRenderer categoryGlovesRenderer;

	[Token(Token = "0x4000781")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	[SerializeField]
	private MeshRenderer selectCookoutCustomizationRenderer;

	[Token(Token = "0x4000782")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	[SerializeField]
	private SpriteRenderer toggleAvatarTypeRenderer;

	[Token(Token = "0x4000783")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	[SerializeField]
	private Sprite toggleAvatarTypeOculusIcon;

	[Token(Token = "0x4000784")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	[SerializeField]
	private Sprite toggleAvatarTypeCookoutIcon;

	[Token(Token = "0x4000785")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	[SerializeField]
	private GameObject buyIcon;

	[Token(Token = "0x4000786")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	[SerializeField]
	private GameObject colorButtonRoot;

	[Token(Token = "0x4000787")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	[SerializeField]
	private GameObject paginationRoot;

	[Token(Token = "0x4000788")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	[SerializeField]
	private GameObject UnlockHintGO;

	[Token(Token = "0x4000789")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	[SerializeField]
	private GameObject switchAvatarTypePrompt;

	[Token(Token = "0x400078A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	[SerializeField]
	private TextMeshPro UnlockHintText;

	[Token(Token = "0x400078B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	private GameObject revertChangesButtonGO;

	[Token(Token = "0x400078C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	private GameObject avatarTypeSelectionButtonGO;

	[Token(Token = "0x400078D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	private GameObject chooseAvatarButtonGO;

	[Token(Token = "0x400078E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	private GameObject chooseAvatarIntroButtonGO;

	[Token(Token = "0x400078F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	private GameObject editOculusAvatar2ButtonGO;

	[Token(Token = "0x4000790")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	private GameObject selectCookoutCustomizationGO;

	[Token(Token = "0x4000791")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	private GameObject[] actionButtons;

	[Token(Token = "0x4000792")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
	private Locale locale;

	[Token(Token = "0x4000793")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
	private StringBuilder stringBuilder;

	[Token(Token = "0x4000794")]
	private const string localizationBuy = "buy_item";

	[Token(Token = "0x4000795")]
	private const string localizationAchievementUnlock = "inv_unlock_condition_bubble_18";

	[Token(Token = "0x4000796")]
	private const string localizationAchievementUnlockReplacementKey = "{achievementName}";

	[Token(Token = "0x4000797")]
	private const string checkMarkIdentifier = "CheckMark";

	[Token(Token = "0x4000798")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
	private OculusAvatarOption[] avatars;

	[Token(Token = "0x4000799")]
	private const int oculusAvatarCount = 32;

	[Token(Token = "0x400079A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
	private AvatarButton[] avatarsButtonsInternal;

	[Token(Token = "0x400079B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
	private MaterialPropertyBlock propertyBlock;

	[Token(Token = "0x400079C")]
	private const string propertyMainTexture = "_MainTex";

	[Token(Token = "0x400079D")]
	private const string propertyColor = "_Color";

	[Token(Token = "0x400079E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
	private GameObject[] headColorFrames;

	[Token(Token = "0x400079F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
	private GameObject[] customizationGridButtonsGO;

	[Token(Token = "0x40007A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
	private Renderer[] headColorRenderers;

	[Token(Token = "0x40007A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
	private SpriteRenderer[] headColorLockIcons;

	[Token(Token = "0x40007A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
	private SpriteRenderer[] headColorCoinBagIcons;

	[Token(Token = "0x40007A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	private GameObject[] headColorNewLabels;

	[Token(Token = "0x40007A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
	private int selectedAvatar;

	[Token(Token = "0x40007A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x26C")]
	private int selectedButtonIndex;

	[Token(Token = "0x40007A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
	private bool firstTimeSetup;

	[Token(Token = "0x40007A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x274")]
	private int avatarsButtonsCount;

	[Token(Token = "0x40007A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
	private int currentPageOculus;

	[Token(Token = "0x40007A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x27C")]
	private int pageCountOculus;

	[Token(Token = "0x40007AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	private int customizationGridButtonCount;

	[Token(Token = "0x40007AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x284")]
	private int currentPageCookout;

	[Token(Token = "0x40007AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
	private int pageCountCookout;

	[Token(Token = "0x40007AD")]
	private const int noAvatarCustomizationSelected = -1;

	[Token(Token = "0x40007AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28C")]
	private CustomizationOption currentCustomizationOption;

	[Token(Token = "0x40007AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
	private bool selectedOptionIsLocked;

	[Token(Token = "0x40007B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x291")]
	private bool selectedOptionIsBought;

	[Token(Token = "0x40007B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x292")]
	private bool enablingFirstTime;

	[Token(Token = "0x40007B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x294")]
	private int selectedCookoutAvatarCustomizationBacking;

	[Token(Token = "0x40007B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	private bool waitingForOculusV2ToLoad;

	[Token(Token = "0x40007B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x299")]
	private bool waitingForOculusV2ToLoadDelayFrame;

	[Token(Token = "0x40007B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29C")]
	private int savedAvatar;

	[Token(Token = "0x40007B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
	private bool isSteamPlatform;

	[Token(Token = "0x40007B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A1")]
	private bool isOculusPlatform;

	[Token(Token = "0x40007B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A2")]
	private AvatarType revertAvatarType;

	[Token(Token = "0x40007B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A3")]
	private CookoutAvatarVisualType revertHeadType;

	[Token(Token = "0x40007BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A4")]
	private AvatarHatType revertHatType;

	[Token(Token = "0x40007BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A5")]
	private AvatarBodyType revertBodyType;

	[Token(Token = "0x40007BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
	private int revertColor;

	[Token(Token = "0x40007BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2AC")]
	private AvatarHandMaterial revertHandMaterial;

	[Token(Token = "0x40007BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
	private int selectedHat;

	[Token(Token = "0x40007BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B4")]
	private int selectedHead;

	[Token(Token = "0x40007C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
	private int selectedBody;

	[Token(Token = "0x40007C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2BC")]
	private int selectedHand;

	[Token(Token = "0x40007C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
	private int selectedColor;

	[Token(Token = "0x40007C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C4")]
	private int hatCount;

	[Token(Token = "0x40007C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
	private int headCount;

	[Token(Token = "0x40007C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2CC")]
	private int bodyCount;

	[Token(Token = "0x40007C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
	private int handCount;

	[Token(Token = "0x40007C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D4")]
	private float buttonCooldownTimer;

	[Token(Token = "0x40007C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
	private float buttonCooldown;

	[Token(Token = "0x1700010E")]
	public CoinCount CoinCount
	{
		[Token(Token = "0x6000796")]
		[Address(RVA = "0x90479C", Offset = "0x90479C", VA = "0x90479C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700010F")]
	private int SelectedAvatarCustomization
	{
		[Token(Token = "0x6000797")]
		[Address(RVA = "0x9047A4", Offset = "0x9047A4", VA = "0x9047A4")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000798")]
		[Address(RVA = "0x9047AC", Offset = "0x9047AC", VA = "0x9047AC")]
		set
		{
		}
	}

	[Token(Token = "0x17000110")]
	private int avatarsOffset
	{
		[Token(Token = "0x6000799")]
		[Address(RVA = "0x904860", Offset = "0x904860", VA = "0x904860")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000111")]
	private int customizationOffset
	{
		[Token(Token = "0x600079A")]
		[Address(RVA = "0x904870", Offset = "0x904870", VA = "0x904870")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000112")]
	private AvatarType CurrentAvatarType
	{
		[Token(Token = "0x600079B")]
		[Address(RVA = "0x904880", Offset = "0x904880", VA = "0x904880")]
		get
		{
			return default(AvatarType);
		}
	}

	[Token(Token = "0x600079C")]
	[Address(RVA = "0x9048D0", Offset = "0x9048D0", VA = "0x9048D0", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x600079D")]
	[Address(RVA = "0x905B00", Offset = "0x905B00", VA = "0x905B00")]
	private void Start()
	{
	}

	[Token(Token = "0x600079E")]
	[Address(RVA = "0x905B88", Offset = "0x905B88", VA = "0x905B88")]
	public void Init()
	{
	}

	[Token(Token = "0x600079F")]
	[Address(RVA = "0x905D6C", Offset = "0x905D6C", VA = "0x905D6C", Slot = "5")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x60007A0")]
	[Address(RVA = "0x906084", Offset = "0x906084", VA = "0x906084")]
	private void Update()
	{
	}

	[Token(Token = "0x60007A1")]
	[Address(RVA = "0x90615C", Offset = "0x90615C", VA = "0x90615C")]
	private void SetAllButtonsActive(bool active)
	{
	}

	[Token(Token = "0x60007A2")]
	[Address(RVA = "0x906350", Offset = "0x906350", VA = "0x906350")]
	private void EditOculusAvatar2()
	{
	}

	[Token(Token = "0x60007A3")]
	[Address(RVA = "0x906354", Offset = "0x906354", VA = "0x906354")]
	private void OnHasFocusChanged()
	{
	}

	[Token(Token = "0x60007A4")]
	[Address(RVA = "0x906358", Offset = "0x906358", VA = "0x906358")]
	private void OnHasPausedChanged()
	{
	}

	[Token(Token = "0x60007A5")]
	[Address(RVA = "0x90635C", Offset = "0x90635C", VA = "0x90635C")]
	private void OnAvatarV2NotFound()
	{
	}

	[Token(Token = "0x60007A6")]
	[Address(RVA = "0x9064C0", Offset = "0x9064C0", VA = "0x9064C0")]
	private void OnOculusAvatarLoading()
	{
	}

	[Token(Token = "0x60007A7")]
	[Address(RVA = "0x9062E4", Offset = "0x9062E4", VA = "0x9062E4")]
	private void OnOculusAvatarLoaded()
	{
	}

	[Token(Token = "0x60007A8")]
	[Address(RVA = "0x905A48", Offset = "0x905A48", VA = "0x905A48")]
	private void SetupOculusAvatarOptions()
	{
	}

	[Token(Token = "0x60007A9")]
	[Address(RVA = "0x906964", Offset = "0x906964", VA = "0x906964")]
	public void Show(bool isEnabled)
	{
	}

	[Token(Token = "0x60007AA")]
	[Address(RVA = "0x907480", Offset = "0x907480", VA = "0x907480")]
	public void OnIntroShown()
	{
	}

	[Token(Token = "0x60007AB")]
	[Address(RVA = "0x907028", Offset = "0x907028", VA = "0x907028")]
	private void OnShowSetMenuType()
	{
	}

	[Token(Token = "0x60007AC")]
	[Address(RVA = "0x906B10", Offset = "0x906B10", VA = "0x906B10")]
	private void FirstTimeEnabled()
	{
	}

	[Token(Token = "0x60007AD")]
	[Address(RVA = "0x9056C4", Offset = "0x9056C4", VA = "0x9056C4")]
	private void SetupActionButtons(bool isIntro)
	{
	}

	[Token(Token = "0x60007AE")]
	[Address(RVA = "0x907828", Offset = "0x907828", VA = "0x907828")]
	private void CookoutNextPage()
	{
	}

	[Token(Token = "0x60007AF")]
	[Address(RVA = "0x907E68", Offset = "0x907E68", VA = "0x907E68")]
	private void CookoutPreviousPage()
	{
	}

	[Token(Token = "0x60007B0")]
	[Address(RVA = "0x907E88", Offset = "0x907E88", VA = "0x907E88")]
	private void OculusPreviousPage()
	{
	}

	[Token(Token = "0x60007B1")]
	[Address(RVA = "0x907EA4", Offset = "0x907EA4", VA = "0x907EA4")]
	private void OculusNextPage()
	{
	}

	[Token(Token = "0x60007B2")]
	[Address(RVA = "0x906624", Offset = "0x906624", VA = "0x906624")]
	private void RefreshPage()
	{
	}

	[Token(Token = "0x60007B3")]
	[Address(RVA = "0x907F60", Offset = "0x907F60", VA = "0x907F60")]
	private void HideUnusedButtons()
	{
	}

	[Token(Token = "0x60007B4")]
	[Address(RVA = "0x906518", Offset = "0x906518", VA = "0x906518")]
	private void ShowActionButtons(bool showActionButtons)
	{
	}

	[Token(Token = "0x60007B5")]
	[Address(RVA = "0x906468", Offset = "0x906468", VA = "0x906468")]
	private void ShowOculusAvatarFailedPopup(bool showPopup)
	{
	}

	[Token(Token = "0x60007B6")]
	[Address(RVA = "0x907FE0", Offset = "0x907FE0", VA = "0x907FE0")]
	private void SelectOculusAvatar(int avatar)
	{
	}

	[Token(Token = "0x60007B7")]
	[Address(RVA = "0x907FE4", Offset = "0x907FE4", VA = "0x907FE4")]
	private void LoadOculusAvatar(int avatar)
	{
	}

	[Token(Token = "0x60007B8")]
	[Address(RVA = "0x907FE8", Offset = "0x907FE8", VA = "0x907FE8")]
	private void SaveAvatar()
	{
	}

	[Token(Token = "0x60007B9")]
	[Address(RVA = "0x9075D8", Offset = "0x9075D8", VA = "0x9075D8")]
	private void SelectAvatarButton(int avatar)
	{
	}

	[Token(Token = "0x60007BA")]
	[Address(RVA = "0x907EC4", Offset = "0x907EC4", VA = "0x907EC4")]
	private void SetButtonActiveVisuals(Renderer renderer, bool isActive)
	{
	}

	[Token(Token = "0x60007BB")]
	[Address(RVA = "0x9082E0", Offset = "0x9082E0", VA = "0x9082E0")]
	public void SwitchAvatarType()
	{
	}

	[Token(Token = "0x60007BC")]
	[Address(RVA = "0x908670", Offset = "0x908670", VA = "0x908670")]
	private void ForceReturnToCookoutMenu()
	{
	}

	[Token(Token = "0x60007BD")]
	[Address(RVA = "0x9086D0", Offset = "0x9086D0", VA = "0x9086D0")]
	private void UpdateHat(CookoutAvatar avatar, AvatarHatType hatType)
	{
	}

	[Token(Token = "0x60007BE")]
	[Address(RVA = "0x9088F8", Offset = "0x9088F8", VA = "0x9088F8")]
	private void UpdateHead(CookoutAvatar avatar, CookoutAvatarVisualType headType)
	{
	}

	[Token(Token = "0x60007BF")]
	[Address(RVA = "0x908E80", Offset = "0x908E80", VA = "0x908E80")]
	private void UpdateHeadUI(CookoutAvatarVisualType headType)
	{
	}

	[Token(Token = "0x60007C0")]
	[Address(RVA = "0x909434", Offset = "0x909434", VA = "0x909434")]
	private void UpdateBody(CookoutAvatar avatar, AvatarBodyType bodyType)
	{
	}

	[Token(Token = "0x60007C1")]
	[Address(RVA = "0x909470", Offset = "0x909470", VA = "0x909470")]
	private void UpdateHandMaterial(CookoutAvatar avatar, AvatarHandMaterial material)
	{
	}

	[Token(Token = "0x60007C2")]
	[Address(RVA = "0x9063F0", Offset = "0x9063F0", VA = "0x9063F0")]
	private void SwitchToCookoutAvatarIfNeeded(CookoutAvatar avatar)
	{
	}

	[Token(Token = "0x60007C3")]
	[Address(RVA = "0x909508", Offset = "0x909508", VA = "0x909508")]
	private void RevertAvatarCustomization()
	{
	}

	[Token(Token = "0x60007C4")]
	[Address(RVA = "0x907268", Offset = "0x907268", VA = "0x907268")]
	private void SetSelectedColor(int activeIndex)
	{
	}

	[Token(Token = "0x60007C5")]
	[Address(RVA = "0x90A4E4", Offset = "0x90A4E4", VA = "0x90A4E4")]
	private void ShowUnlockHint(string unlockConditionLocalizationKey)
	{
	}

	[Token(Token = "0x60007C6")]
	[Address(RVA = "0x90A5F0", Offset = "0x90A5F0", VA = "0x90A5F0")]
	private void OnCookoutCustomizationButtonClicked(int index)
	{
	}

	[Token(Token = "0x60007C7")]
	[Address(RVA = "0x90A11C", Offset = "0x90A11C", VA = "0x90A11C")]
	private void UpdateCookoutSelectButton()
	{
	}

	[Token(Token = "0x60007C8")]
	[Address(RVA = "0x90AB04", Offset = "0x90AB04", VA = "0x90AB04")]
	private void OnCookoutCustomizationBuyButtonClicked()
	{
	}

	[Token(Token = "0x60007C9")]
	[Address(RVA = "0x9047B4", Offset = "0x9047B4", VA = "0x9047B4")]
	private void RefreshSelectedGridOptions()
	{
	}

	[Token(Token = "0x60007CA")]
	[Address(RVA = "0x907680", Offset = "0x907680", VA = "0x907680")]
	private void SetCookoutCustomizationCategory(CustomizationOption type)
	{
	}

	[Token(Token = "0x60007CB")]
	[Address(RVA = "0x90788C", Offset = "0x90788C", VA = "0x90788C")]
	private void RefreshCookoutCustomizationGridPage(CustomizationOption type)
	{
	}

	[Token(Token = "0x60007CC")]
	[Address(RVA = "0x9097C0", Offset = "0x9097C0", VA = "0x9097C0")]
	private void RefreshGridButtonIcons(CustomizationOption type)
	{
	}

	[Token(Token = "0x60007CD")]
	[Address(RVA = "0x90AD28", Offset = "0x90AD28", VA = "0x90AD28")]
	public void OnKissedMirror()
	{
	}

	[Token(Token = "0x60007CE")]
	[Address(RVA = "0x90B164", Offset = "0x90B164", VA = "0x90B164")]
	public AvatarSelectionMenu()
	{
	}
}
[Token(Token = "0x2000132")]
public class AvatarV2Aux : SingleInstanceBehavior<AvatarV2Aux>
{
	[Token(Token = "0x60007DE")]
	[Address(RVA = "0x90B588", Offset = "0x90B588", VA = "0x90B588")]
	public AvatarV2Aux()
	{
	}
}
[Serializable]
[Token(Token = "0x2000133")]
[CreateAssetMenu(fileName = "newBuyableAvatarCustomization", menuName = "Avatars/Buyable Avatar Customization")]
public class BuyableAvatarCustomizationData : ScriptableObject
{
	[Token(Token = "0x40007DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int price;

	[Token(Token = "0x40007DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool isHat;

	[Token(Token = "0x40007E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public AvatarHatType hatType;

	[Token(Token = "0x40007E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	public bool isHead;

	[Token(Token = "0x40007E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
	public CookoutAvatarVisualType avatarVisualType;

	[Token(Token = "0x40007E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int headMaterialIndex;

	[Token(Token = "0x40007E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool isBody;

	[Token(Token = "0x40007E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public AvatarBodyType bodyType;

	[Token(Token = "0x40007E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
	public bool isHandMaterial;

	[Token(Token = "0x40007E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
	public AvatarHandMaterial handMaterial;

	[Token(Token = "0x60007DF")]
	[Address(RVA = "0x90B5F4", Offset = "0x90B5F4", VA = "0x90B5F4")]
	public BuyableAvatarCustomizationData()
	{
	}
}
[Serializable]
[Token(Token = "0x2000134")]
[CreateAssetMenu(fileName = "NewBuyableAvatarCustomizationList", menuName = "Avatars/Unlockable Avatar Buyable List")]
public class BuyableAvatarCustomizationList : ScriptableObject
{
	[Token(Token = "0x40007E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<BuyableAvatarCustomizationData> buyableAvatarCustomizationDataList;

	[Token(Token = "0x60007E0")]
	[Address(RVA = "0x90B5FC", Offset = "0x90B5FC", VA = "0x90B5FC")]
	public BuyableAvatarCustomizationList()
	{
	}
}
[Token(Token = "0x2000135")]
public sealed class CookoutAvatar : UnityEngine.MonoBehaviour, IPunObservable
{
	[Token(Token = "0x2000136")]
	private enum HoldingMask
	{
		[Token(Token = "0x400082F")]
		None,
		[Token(Token = "0x4000830")]
		Left,
		[Token(Token = "0x4000831")]
		Right,
		[Token(Token = "0x4000832")]
		Both
	}

	[Token(Token = "0x2000137")]
	private sealed class NetTfmSync
	{
		[Token(Token = "0x4000833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform tfm;

		[Token(Token = "0x4000834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public QuantBufferTfm src;

		[Token(Token = "0x4000835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public QuantBufferTfm dst;

		[Token(Token = "0x600080D")]
		[Address(RVA = "0x90D214", Offset = "0x90D214", VA = "0x90D214")]
		public NetTfmSync()
		{
		}
	}

	[Token(Token = "0x40007E9")]
	private const int layerHideInFirstPerson = 25;

	[Token(Token = "0x40007EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PhotonView pv;

	[Token(Token = "0x40007EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CookoutAvatarHead head;

	[Token(Token = "0x40007EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public CookoutAvatarHand handL;

	[Token(Token = "0x40007ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public CookoutAvatarHand handR;

	[Token(Token = "0x40007EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject cookoutHandL;

	[Token(Token = "0x40007EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject cookoutHandR;

	[Token(Token = "0x40007F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform safetyBubbleAnchor;

	[Token(Token = "0x40007F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool isLocalAvatar;

	[Token(Token = "0x40007F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public CustomHandPoseList customHandPoseList;

	[Token(Token = "0x40007F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Renderer handLRenderer;

	[Token(Token = "0x40007F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Renderer handRRenderer;

	[Token(Token = "0x40007F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Vector3 torsoOffset;

	[Token(Token = "0x40007F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private SafetyBubble safetyBubble;

	[Token(Token = "0x40007F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private PlayerNameDisplayer nameDisplayer;

	[Token(Token = "0x40007F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[Header("Local Only")]
	public int metaAvatarLocalPlayerWithHeadLayer;

	[Token(Token = "0x40007F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public int metaAvatarLocalPlayerNoHeadLayer;

	[Token(Token = "0x40007FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public TrackedPoseDriver poseDriverHead;

	[Token(Token = "0x40007FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public TrackedPoseDriver poseDriverLeftHand;

	[Token(Token = "0x40007FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public TrackedPoseDriver poseDriverRightHand;

	[Token(Token = "0x40007FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public GameObject waitingForHostText;

	[Token(Token = "0x40007FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public GameObject outofBoundsOverlay;

	[Token(Token = "0x40007FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public TMP_Text outOfBoundsTextRift;

	[Token(Token = "0x4000800")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private CookoutAvatarVisualType avatarVisualType;

	[Token(Token = "0x4000801")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
	private AvatarType avatarType;

	[Token(Token = "0x4000802")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private GameObject headVisuals;

	[Token(Token = "0x4000803")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Renderer hatRenderer;

	[Token(Token = "0x4000804")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Renderer headRenderer;

	[Token(Token = "0x4000805")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Renderer leftEyeRenderer;

	[Token(Token = "0x4000806")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private Renderer rightEyeRenderer;

	[Token(Token = "0x4000807")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private float netInterpolationElapsed;

	[Token(Token = "0x4000808")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private NetTfmSync netTfmHead;

	[Token(Token = "0x4000809")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private NetTfmSync netTfmHandL;

	[Token(Token = "0x400080A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private NetTfmSync netTfmHandR;

	[Token(Token = "0x400080B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private ControllerType remoteControllerType;

	[Token(Token = "0x400080C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x119")]
	private CookoutPlatformType remotePlatformType;

	[Token(Token = "0x400080D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private Animator eyesAnimator;

	[Token(Token = "0x400080E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private CookoutAvatarEyesAnimations eyesAnimations;

	[Token(Token = "0x400080F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private readonly string[] eyesAnimationTriggers;

	[Token(Token = "0x4000810")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private readonly float[] eyesAnimationOdds;

	[Token(Token = "0x4000811")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private int headMaterialIndex;

	[Token(Token = "0x4000812")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	private AvatarHandMaterial handMaterialIndex;

	[Token(Token = "0x4000813")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x145")]
	private AvatarHatType currentHatType;

	[Token(Token = "0x4000814")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private GameObject hat;

	[Token(Token = "0x4000815")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private AvatarBodyType currentBodyType;

	[Token(Token = "0x4000816")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private Renderer torsoRenderer;

	[Token(Token = "0x4000817")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private Transform headAnchor;

	[Token(Token = "0x4000818")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private GameObject cookoutTorso;

	[Token(Token = "0x4000819")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private AvatarHatRegistry hatRegistery;

	[Token(Token = "0x400081A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private AvatarHeadRegistry headRegistery;

	[Token(Token = "0x400081B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private AvatarHandRegistry handRegistery;

	[Token(Token = "0x400081C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private AvatarBodyRegistery bodyRegistery;

	[Token(Token = "0x400081D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private bool metaAvatarLayersWereSet;

	[Token(Token = "0x400081F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private float lastPacketDelay;

	[Token(Token = "0x4000820")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
	private float maxJitter;

	[Token(Token = "0x4000821")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private float minJitter;

	[Token(Token = "0x4000822")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
	private bool firstPacket;

	[Token(Token = "0x4000823")]
	private const float playbackSmoothFactor = 1f;

	[Token(Token = "0x4000824")]
	private const float maxJitterCap = 0.2f;

	[Token(Token = "0x4000825")]
	private const float minJitterCap = -0.2f;

	[Token(Token = "0x4000826")]
	private const int jitterSamplesCap = 100;

	[Token(Token = "0x4000827")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private Queue<float> JitterMemory;

	[Token(Token = "0x4000828")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	private float[] JitterMemoryArray;

	[Token(Token = "0x4000829")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	private NativeArray<byte> oculus2DataArray;

	[Token(Token = "0x400082A")]
	private const string v2VisualRoot = "LOD0";

	[Token(Token = "0x400082B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	private Transform oculus2LeftWrist;

	[Token(Token = "0x400082C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	private Transform oculus2RightWrist;

	[Token(Token = "0x400082D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	private bool playerPaused;

	[Token(Token = "0x17000113")]
	public bool IsActive
	{
		[Token(Token = "0x60007E1")]
		[Address(RVA = "0x90B604", Offset = "0x90B604", VA = "0x90B604")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000114")]
	public Transform GetTorsoTransform
	{
		[Token(Token = "0x60007E2")]
		[Address(RVA = "0x90B148", Offset = "0x90B148", VA = "0x90B148")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000115")]
	public Transform HatAnchor
	{
		[Token(Token = "0x60007E3")]
		[Address(RVA = "0x90B61C", Offset = "0x90B61C", VA = "0x90B61C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60007E4")]
		[Address(RVA = "0x90B624", Offset = "0x90B624", VA = "0x90B624")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000116")]
	public bool AvatarFullyLoaded
	{
		[Token(Token = "0x60007E5")]
		[Address(RVA = "0x9062DC", Offset = "0x9062DC", VA = "0x9062DC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000117")]
	public bool HandSkeletonLoaded
	{
		[Token(Token = "0x60007E6")]
		[Address(RVA = "0x90B62C", Offset = "0x90B62C", VA = "0x90B62C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000118")]
	public bool VisualsLoaded
	{
		[Token(Token = "0x60007E7")]
		[Address(RVA = "0x90B634", Offset = "0x90B634", VA = "0x90B634")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60007E8")]
	[Address(RVA = "0x90B63C", Offset = "0x90B63C", VA = "0x90B63C")]
	private void Start()
	{
	}

	[Token(Token = "0x60007E9")]
	[Address(RVA = "0x90BB14", Offset = "0x90BB14", VA = "0x90BB14")]
	private void SetMetaAvatarLayers()
	{
	}

	[Token(Token = "0x60007EA")]
	[Address(RVA = "0x90BB18", Offset = "0x90BB18", VA = "0x90BB18")]
	private void Update()
	{
	}

	[Token(Token = "0x60007EB")]
	[Address(RVA = "0x90BD98", Offset = "0x90BD98", VA = "0x90BD98")]
	private void OnHasFocusChanged()
	{
	}

	[Token(Token = "0x60007EC")]
	[Address(RVA = "0x90C078", Offset = "0x90C078", VA = "0x90C078")]
	public AvatarType GetAvatarType()
	{
		return default(AvatarType);
	}

	[Token(Token = "0x60007ED")]
	[Address(RVA = "0x90C080", Offset = "0x90C080", VA = "0x90C080")]
	public AvatarHandMaterial GetHandMaterial()
	{
		return default(AvatarHandMaterial);
	}

	[Token(Token = "0x60007EE")]
	[Address(RVA = "0x90C088", Offset = "0x90C088", VA = "0x90C088")]
	public int GetHeadMaterialIndex()
	{
		return default(int);
	}

	[Token(Token = "0x60007EF")]
	[Address(RVA = "0x90C090", Offset = "0x90C090", VA = "0x90C090")]
	public AvatarHatType GetAvatarHatType()
	{
		return default(AvatarHatType);
	}

	[Token(Token = "0x60007F0")]
	[Address(RVA = "0x90C098", Offset = "0x90C098", VA = "0x90C098")]
	public AvatarBodyType GetAvatarBodyType()
	{
		return default(AvatarBodyType);
	}

	[Token(Token = "0x60007F1")]
	[Address(RVA = "0x90C0A0", Offset = "0x90C0A0", VA = "0x90C0A0")]
	public SafetyBubble GetSafetyBubble()
	{
		return null;
	}

	[Token(Token = "0x60007F2")]
	[Address(RVA = "0x90C0A8", Offset = "0x90C0A8", VA = "0x90C0A8")]
	public PlayerNameDisplayer GetNameDisplayer()
	{
		return null;
	}

	[Token(Token = "0x60007F3")]
	[Address(RVA = "0x9040C4", Offset = "0x9040C4", VA = "0x9040C4")]
	public void SetAvatarType(AvatarType type)
	{
	}

	[Token(Token = "0x60007F4")]
	[Address(RVA = "0x90C20C", Offset = "0x90C20C", VA = "0x90C20C")]
	public CookoutAvatarVisualType GetAvatarVisualType()
	{
		return default(CookoutAvatarVisualType);
	}

	[Token(Token = "0x60007F5")]
	private T GetStateMachineBehaviour<T>() where T : StateMachineBehaviour
	{
		return null;
	}

	[Token(Token = "0x60007F6")]
	[Address(RVA = "0x9043E8", Offset = "0x9043E8", VA = "0x9043E8")]
	public void SetCookoutAvatarVisualType(CookoutAvatarVisualType newAvatarType)
	{
	}

	[Token(Token = "0x60007F7")]
	[Address(RVA = "0x9094AC", Offset = "0x9094AC", VA = "0x9094AC")]
	public void SetCookoutAvatarVisualCustomization(AvatarBodyType newBodyType, AvatarHatType newHatType, int newHeadMaterialIndex, AvatarHandMaterial newHandMaterialIndex, PlayerColor playerColor = PlayerColor.Red)
	{
	}

	[Token(Token = "0x60007F8")]
	[Address(RVA = "0x908A64", Offset = "0x908A64", VA = "0x908A64")]
	public void SetCookoutAvatarBodyType(AvatarBodyType newBodyType, PlayerColor playerColor = PlayerColor.Red)
	{
	}

	[Token(Token = "0x60007F9")]
	[Address(RVA = "0x90C214", Offset = "0x90C214", VA = "0x90C214")]
	private void GetRandomEyesAnimation()
	{
	}

	[Token(Token = "0x60007FA")]
	[Address(RVA = "0x904330", Offset = "0x904330", VA = "0x904330")]
	public void SetUniformColor(PlayerColor color)
	{
	}

	[Token(Token = "0x60007FB")]
	[Address(RVA = "0x90A034", Offset = "0x90A034", VA = "0x90A034")]
	public void SetHeadMaterial(int materialIndex)
	{
	}

	[Token(Token = "0x60007FC")]
	[Address(RVA = "0x908E04", Offset = "0x908E04", VA = "0x908E04")]
	public void SetHandMaterial(AvatarHandMaterial materialIndex, PlayerColor color = PlayerColor.Red)
	{
	}

	[Token(Token = "0x60007FD")]
	[Address(RVA = "0x9086F4", Offset = "0x9086F4", VA = "0x9086F4")]
	public void SetHat(AvatarHatType type)
	{
	}

	[Token(Token = "0x60007FE")]
	[Address(RVA = "0x90C304", Offset = "0x90C304", VA = "0x90C304")]
	public void SetRemoteAvatarVisible(bool isVisible)
	{
	}

	[Token(Token = "0x60007FF")]
	[Address(RVA = "0x90BE9C", Offset = "0x90BE9C", VA = "0x90BE9C")]
	public void SetAvatarVisible(bool isVisible)
	{
	}

	[Token(Token = "0x6000800")]
	[Address(RVA = "0x90C318", Offset = "0x90C318", VA = "0x90C318")]
	public void SetLightProbeAnchor(Transform anchor)
	{
	}

	[Token(Token = "0x6000801")]
	[Address(RVA = "0x90C428", Offset = "0x90C428", VA = "0x90C428")]
	public void OnLocalAvatarLeavingMainScene()
	{
	}

	[Token(Token = "0x6000802")]
	[Address(RVA = "0x90C4C4", Offset = "0x90C4C4", VA = "0x90C4C4")]
	public void SetRemoteAvatarControllerAndPlatformType(CookoutPlatformType platformType, ControllerType controllerType)
	{
	}

	[Token(Token = "0x6000803")]
	[Address(RVA = "0x90C4D0", Offset = "0x90C4D0", VA = "0x90C4D0")]
	private void HideOculusAvatar1stPerson(Transform root)
	{
	}

	[Token(Token = "0x6000804")]
	[Address(RVA = "0x90C558", Offset = "0x90C558", VA = "0x90C558")]
	public bool IsSpecificCookoutAvatar(CookoutAvatarVisualType expectedAvatar)
	{
		return default(bool);
	}

	[Token(Token = "0x6000805")]
	[Address(RVA = "0x90C57C", Offset = "0x90C57C", VA = "0x90C57C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000806")]
	[Address(RVA = "0x90C5E8", Offset = "0x90C5E8", VA = "0x90C5E8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000807")]
	[Address(RVA = "0x90C81C", Offset = "0x90C81C", VA = "0x90C81C", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000808")]
	[Address(RVA = "0x90CF64", Offset = "0x90CF64", VA = "0x90CF64")]
	public CookoutAvatar()
	{
	}
}
[Token(Token = "0x2000139")]
public class CookoutAvatarEyesAnimations : StateMachineBehaviour
{
	[Token(Token = "0x4000837")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action OnAnimationComplete;

	[Token(Token = "0x4000838")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool switchingAnimation;

	[Token(Token = "0x600080E")]
	[Address(RVA = "0x90D21C", Offset = "0x90D21C", VA = "0x90D21C", Slot = "5")]
	public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x600080F")]
	[Address(RVA = "0x90D278", Offset = "0x90D278", VA = "0x90D278", Slot = "4")]
	public override void OnStateEnter(Animator animator, AnimatorStateInfo animatorStateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000810")]
	[Address(RVA = "0x90D280", Offset = "0x90D280", VA = "0x90D280")]
	public CookoutAvatarEyesAnimations()
	{
	}
}
[Token(Token = "0x200013A")]
public class CookoutAvatarHand : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x200013B")]
	[CompilerGenerated]
	private sealed class <Start>d__108 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400088F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CookoutAvatarHand <>4__this;

		[Token(Token = "0x1700011C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000845")]
			[Address(RVA = "0x910E48", Offset = "0x910E48", VA = "0x910E48", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000847")]
			[Address(RVA = "0x910E90", Offset = "0x910E90", VA = "0x910E90", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000842")]
		[Address(RVA = "0x90DBCC", Offset = "0x90DBCC", VA = "0x90DBCC")]
		[DebuggerHidden]
		public <Start>d__108(int <>1__state)
		{
		}

		[Token(Token = "0x6000843")]
		[Address(RVA = "0x9104CC", Offset = "0x9104CC", VA = "0x9104CC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000844")]
		[Address(RVA = "0x9104D0", Offset = "0x9104D0", VA = "0x9104D0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000846")]
		[Address(RVA = "0x910E50", Offset = "0x910E50", VA = "0x910E50", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000839")]
	private const float grabRadius = 0.05f;

	[Token(Token = "0x400083A")]
	private const string propertyColor = "_Color";

	[Token(Token = "0x400083B")]
	private const string propertyProgress = "_Progress";

	[Token(Token = "0x400083C")]
	private const float handPosingSpeed = 8f;

	[NonSerialized]
	[Token(Token = "0x400083E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public CookoutVotingHandPose handPose;

	[NonSerialized]
	[Token(Token = "0x400083F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public CookoutVotingHandPose oldHandPose;

	[NonSerialized]
	[Token(Token = "0x4000840")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float poseHoldTime;

	[Token(Token = "0x4000841")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CookoutAvatar avatar;

	[Token(Token = "0x4000842")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public CookoutAvatarHand otherHand;

	[Token(Token = "0x4000843")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public CookoutHandedness handedness;

	[Token(Token = "0x4000844")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool autoHold;

	[Token(Token = "0x4000845")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	public CookoutHandPose inputHandPosing;

	[Token(Token = "0x4000846")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private CookoutInput.Button gripButton;

	[Token(Token = "0x4000847")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private CookoutInput.Button squeezeButton;

	[Token(Token = "0x4000848")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private CookoutInput.Button thumbUpButton;

	[Token(Token = "0x4000849")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform offsetTransform;

	[Token(Token = "0x400084A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GameObject handColliders;

	[Token(Token = "0x400084B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GameObject pokeCollider;

	[Token(Token = "0x400084C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Transform throwAnchor;

	[Token(Token = "0x400084D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Transform cookoutHandVisuals;

	[Token(Token = "0x400084E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private GameObject wristMenuAttachment;

	[Token(Token = "0x400084F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private bool isRemoteAvatar;

	[Token(Token = "0x4000850")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[Tooltip("The magnitude of force to add to an object when throwing it")]
	[SerializeField]
	private float throwStrength;

	[Token(Token = "0x4000851")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private float grabCooldownTime;

	[Token(Token = "0x4000852")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[SerializeField]
	private Vector3 grabSphereOffset;

	[Token(Token = "0x4000853")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[Header("Collider offsets")]
	[SerializeField]
	private Vector3 oculusHandPosition;

	[Token(Token = "0x4000854")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[SerializeField]
	private Vector3 oculusHandOrientation;

	[Token(Token = "0x4000855")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private Vector3 viveHandPosition;

	[Token(Token = "0x4000856")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	[SerializeField]
	private Vector3 viveHandOrientation;

	[Token(Token = "0x4000857")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Vector3 OculusV2HandOrientation;

	[Token(Token = "0x4000858")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	public Vector3 OculusV2HandPosition;

	[Token(Token = "0x4000859")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	[Header("CookoutHandVisual Offset")]
	private Vector3 cookoutHandVisualsPosition;

	[Token(Token = "0x400085A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	[SerializeField]
	private Vector3 cookoutHandVisualsOrientation;

	[Token(Token = "0x400085B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[SerializeField]
	[Header("WristMenuAnchor offsets")]
	private Vector3 oculusWristPosition;

	[Token(Token = "0x400085C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	[SerializeField]
	private Vector3 oculusWristOrientation;

	[Token(Token = "0x400085D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[SerializeField]
	private Vector3 oculusWristParentPosition;

	[Token(Token = "0x400085E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	[SerializeField]
	private Vector3 oculusWristParentOrientation;

	[Token(Token = "0x400085F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[SerializeField]
	private Vector3 cookoutWristPosition;

	[Token(Token = "0x4000860")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	[SerializeField]
	private Vector3 cookoutWristOrientation;

	[Token(Token = "0x4000861")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[SerializeField]
	private Vector3 cookoutWristParentPosition;

	[Token(Token = "0x4000862")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	[SerializeField]
	private Vector3 cookoutWristParentOrientation;

	[Token(Token = "0x4000863")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	[Header("Hand Vote Timer")]
	[SerializeField]
	private Color voteYesBarColor;

	[Token(Token = "0x4000864")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	[SerializeField]
	private Color voteYesBackgroundColor;

	[Token(Token = "0x4000865")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	[SerializeField]
	private Color voteNoBarColor;

	[Token(Token = "0x4000866")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	[SerializeField]
	private Color voteNoBackgroundColor;

	[Token(Token = "0x4000867")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	[SerializeField]
	private GameObject handTimer;

	[Token(Token = "0x4000868")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	[SerializeField]
	private UnparentAndFollow unparentAndFollow;

	[Token(Token = "0x4000869")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	[SerializeField]
	private SpriteRenderer timerBackground;

	[Token(Token = "0x400086A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	[SerializeField]
	private SpriteRenderer timerRenderer;

	[Token(Token = "0x400086B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	[SerializeField]
	private SpriteRenderer voteYesSprite;

	[Token(Token = "0x400086C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	[SerializeField]
	private SpriteRenderer voteNoSprite;

	[Token(Token = "0x400086D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	[Header("Hand Posing")]
	[SerializeField]
	private Transform handVisuals;

	[Token(Token = "0x400086E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	[SerializeField]
	private Transform poseRelax;

	[Token(Token = "0x400086F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	[SerializeField]
	private Transform poseThumbsUp;

	[Token(Token = "0x4000870")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	[SerializeField]
	private Transform posePerfect;

	[Token(Token = "0x4000871")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	[SerializeField]
	private Transform poseFist;

	[Token(Token = "0x4000872")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	[SerializeField]
	private Transform posePoint;

	[Token(Token = "0x4000873")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	[SerializeField]
	private Transform posePointThumbUp;

	[Token(Token = "0x4000874")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	[SerializeField]
	private Transform poseRelaxedIndexCurled;

	[Token(Token = "0x4000875")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	[SerializeField]
	private Transform poseRelaxedThumbCurled;

	[Token(Token = "0x4000876")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	[SerializeField]
	private Transform poseRelaxedIndexThumbCurled;

	[Token(Token = "0x4000877")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	[Header("Custom Hand Pose")]
	public GameObject oculusAvatarV2HandSkeleton;

	[Token(Token = "0x4000878")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
	public GameObject oculusAvatarV2Root;

	[Token(Token = "0x4000879")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
	private Grabbable heldObject;

	[Token(Token = "0x400087A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
	private Collider[] collidersHit;

	[Token(Token = "0x400087B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
	private List<Transform> closestCollidersHit;

	[Token(Token = "0x400087C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
	private Vector3[] trackedMoves;

	[Token(Token = "0x400087D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
	private Vector3 previousPosition;

	[Token(Token = "0x400087E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
	private Vector3[] trackedRotations;

	[Token(Token = "0x400087F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
	private Quaternion previousRotation;

	[Token(Token = "0x4000880")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
	private int numMovesTracked;

	[Token(Token = "0x4000881")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x264")]
	private int currentTrackedMove;

	[Token(Token = "0x4000882")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
	private bool hasCustomPose;

	[Token(Token = "0x4000883")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x269")]
	private bool wasPoking;

	[Token(Token = "0x4000884")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x26C")]
	private float grabCooldown;

	[Token(Token = "0x4000885")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
	private MaterialPropertyBlock mpb;

	[Token(Token = "0x4000886")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
	private string handednessKey;

	[Token(Token = "0x4000887")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
	private CookoutHandPose inputHandPosingPrev;

	[Token(Token = "0x4000888")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
	private ExitGames.Client.Photon.Hashtable customHandPoseCache;

	[Token(Token = "0x4000889")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
	private bool isGripping;

	[Token(Token = "0x400088A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x294")]
	private float handPosingElapsed;

	[Token(Token = "0x400088B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
	private List<Vector3> handPosingPosition;

	[Token(Token = "0x400088C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
	private List<Quaternion> handPosingRotation;

	[Token(Token = "0x400088D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
	private int handPosingCursor;

	[Token(Token = "0x400088E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2AC")]
	public bool isRemotelyHoldingObject;

	[Token(Token = "0x17000119")]
	public Transform OffsetTransform
	{
		[Token(Token = "0x6000811")]
		[Address(RVA = "0x90D288", Offset = "0x90D288", VA = "0x90D288")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700011A")]
	public GameObject WristMenuAttachment
	{
		[Token(Token = "0x6000812")]
		[Address(RVA = "0x90D290", Offset = "0x90D290", VA = "0x90D290")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700011B")]
	public bool setupComplete
	{
		[Token(Token = "0x6000813")]
		[Address(RVA = "0x90D298", Offset = "0x90D298", VA = "0x90D298")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000814")]
		[Address(RVA = "0x90D2A0", Offset = "0x90D2A0", VA = "0x90D2A0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000815")]
	[Address(RVA = "0x90D2AC", Offset = "0x90D2AC", VA = "0x90D2AC")]
	public bool IsLeft()
	{
		return default(bool);
	}

	[Token(Token = "0x6000816")]
	[Address(RVA = "0x90D2BC", Offset = "0x90D2BC", VA = "0x90D2BC")]
	public bool IsRight()
	{
		return default(bool);
	}

	[Token(Token = "0x6000817")]
	[Address(RVA = "0x90CD34", Offset = "0x90CD34", VA = "0x90CD34")]
	public bool IsHoldingObject()
	{
		return default(bool);
	}

	[Token(Token = "0x6000818")]
	[Address(RVA = "0x90D2CC", Offset = "0x90D2CC", VA = "0x90D2CC")]
	private bool IsMetaAvatar()
	{
		return default(bool);
	}

	[Token(Token = "0x6000819")]
	[Address(RVA = "0x90D2D4", Offset = "0x90D2D4", VA = "0x90D2D4")]
	public (Vector3, Quaternion) CalcHandOffset()
	{
		return default((Vector3, Quaternion));
	}

	[Token(Token = "0x600081A")]
	[Address(RVA = "0x90D460", Offset = "0x90D460", VA = "0x90D460")]
	public (Vector3, Quaternion) CalcHandOffset(CookoutPlatformType platformType, ControllerType controllerType, AvatarType avatarType)
	{
		return default((Vector3, Quaternion));
	}

	[Token(Token = "0x600081B")]
	[Address(RVA = "0x90D5DC", Offset = "0x90D5DC", VA = "0x90D5DC")]
	public (Vector3, Quaternion) CalcWristOffset()
	{
		return default((Vector3, Quaternion));
	}

	[Token(Token = "0x600081C")]
	[Address(RVA = "0x90D6AC", Offset = "0x90D6AC", VA = "0x90D6AC")]
	public (Vector3, Quaternion) CalcWristParentOffset()
	{
		return default((Vector3, Quaternion));
	}

	[Token(Token = "0x600081D")]
	[Address(RVA = "0x90D77C", Offset = "0x90D77C", VA = "0x90D77C")]
	public float CalcThumbsUpAngle()
	{
		return default(float);
	}

	[Token(Token = "0x600081E")]
	[Address(RVA = "0x90D8D0", Offset = "0x90D8D0", VA = "0x90D8D0")]
	public bool IsPoking()
	{
		return default(bool);
	}

	[Token(Token = "0x600081F")]
	[Address(RVA = "0x90D948", Offset = "0x90D948", VA = "0x90D948")]
	public bool IsGripping()
	{
		return default(bool);
	}

	[Token(Token = "0x6000820")]
	[Address(RVA = "0x90D9A0", Offset = "0x90D9A0", VA = "0x90D9A0")]
	public bool IsSqueezing()
	{
		return default(bool);
	}

	[Token(Token = "0x6000821")]
	[Address(RVA = "0x90D9F8", Offset = "0x90D9F8", VA = "0x90D9F8")]
	public bool IsSqueezingBegin()
	{
		return default(bool);
	}

	[Token(Token = "0x6000822")]
	[Address(RVA = "0x90DA50", Offset = "0x90DA50", VA = "0x90DA50")]
	public bool IsSqueezingEnd()
	{
		return default(bool);
	}

	[Token(Token = "0x6000823")]
	[Address(RVA = "0x90DAA8", Offset = "0x90DAA8", VA = "0x90DAA8")]
	public bool IsThumbsUpPose()
	{
		return default(bool);
	}

	[Token(Token = "0x6000824")]
	[Address(RVA = "0x90DB64", Offset = "0x90DB64", VA = "0x90DB64")]
	[IteratorStateMachine(typeof(<Start>d__108))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000825")]
	[Address(RVA = "0x90DBF4", Offset = "0x90DBF4", VA = "0x90DBF4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000826")]
	[Address(RVA = "0x90E168", Offset = "0x90E168", VA = "0x90E168")]
	private void Update()
	{
	}

	[Token(Token = "0x6000827")]
	[Address(RVA = "0x90F2E8", Offset = "0x90F2E8", VA = "0x90F2E8")]
	private void GetCurrentTransform(Transform joint, bool firstRecursion)
	{
	}

	[Token(Token = "0x6000828")]
	[Address(RVA = "0x90F26C", Offset = "0x90F26C", VA = "0x90F26C")]
	private Transform GetGesture(CookoutHandPose inputMask)
	{
		return null;
	}

	[Token(Token = "0x6000829")]
	[Address(RVA = "0x90F4CC", Offset = "0x90F4CC", VA = "0x90F4CC")]
	private void SetGesture(Transform pose, float tween)
	{
	}

	[Token(Token = "0x600082A")]
	[Address(RVA = "0x90F6E0", Offset = "0x90F6E0", VA = "0x90F6E0")]
	private void SetGestureOculusV2(Transform pose)
	{
	}

	[Token(Token = "0x600082B")]
	[Address(RVA = "0x90F71C", Offset = "0x90F71C", VA = "0x90F71C")]
	private void SetGestureOculusV2Recursive(Transform joint, Transform newPose)
	{
	}

	[Token(Token = "0x600082C")]
	[Address(RVA = "0x90F4E0", Offset = "0x90F4E0", VA = "0x90F4E0")]
	private void SetGestureRecursive(Transform joint, Transform newPose, float tweenRate, bool firstRecursion)
	{
	}

	[Token(Token = "0x600082D")]
	[Address(RVA = "0x90F7E4", Offset = "0x90F7E4", VA = "0x90F7E4")]
	private void SetGripPose(Transform newPose)
	{
	}

	[Token(Token = "0x600082E")]
	[Address(RVA = "0x90F88C", Offset = "0x90F88C", VA = "0x90F88C")]
	private void OnPlayerPropertiesChanged(PhotonPlayer player, ExitGames.Client.Photon.Hashtable changedPoses)
	{
	}

	[Token(Token = "0x600082F")]
	[Address(RVA = "0x90F9D8", Offset = "0x90F9D8", VA = "0x90F9D8")]
	public void SetPose(CookoutCustomHandPose pose)
	{
	}

	[Token(Token = "0x6000830")]
	[Address(RVA = "0x90F008", Offset = "0x90F008", VA = "0x90F008")]
	private void ClearHandPose()
	{
	}

	[Token(Token = "0x6000831")]
	[Address(RVA = "0x90C0B0", Offset = "0x90C0B0", VA = "0x90C0B0")]
	public void CalibrateHandOffset()
	{
	}

	[Token(Token = "0x6000832")]
	[Address(RVA = "0x90C148", Offset = "0x90C148", VA = "0x90C148")]
	public void CalibrateHandOffset(CookoutPlatformType platformType, ControllerType controllerType, AvatarType avatarType)
	{
	}

	[Token(Token = "0x6000833")]
	[Address(RVA = "0x90FADC", Offset = "0x90FADC", VA = "0x90FADC")]
	public void ShowAndUpdateTimer(bool isThumbsUp, float progress)
	{
	}

	[Token(Token = "0x6000834")]
	[Address(RVA = "0x90FD40", Offset = "0x90FD40", VA = "0x90FD40")]
	public void HideTimer()
	{
	}

	[Token(Token = "0x6000835")]
	[Address(RVA = "0x90FD60", Offset = "0x90FD60", VA = "0x90FD60")]
	private void RefreshHandCollidersEnabled()
	{
	}

	[Token(Token = "0x6000836")]
	[Address(RVA = "0x90FF64", Offset = "0x90FF64", VA = "0x90FF64")]
	public bool IsIndexFingerCollider(GameObject gameObject)
	{
		return default(bool);
	}

	[Token(Token = "0x6000837")]
	[Address(RVA = "0x90E3A8", Offset = "0x90E3A8", VA = "0x90E3A8")]
	private void GrabNearestGrabbable()
	{
	}

	[Token(Token = "0x6000838")]
	[Address(RVA = "0x90FFE8", Offset = "0x90FFE8", VA = "0x90FFE8")]
	public void ForceGrab(Grabbable grabbable)
	{
	}

	[Token(Token = "0x6000839")]
	[Address(RVA = "0x90FFEC", Offset = "0x90FFEC", VA = "0x90FFEC")]
	private void Grab(Grabbable target)
	{
	}

	[Token(Token = "0x600083A")]
	[Address(RVA = "0x90C48C", Offset = "0x90C48C", VA = "0x90C48C")]
	public void ForceRelease(bool playHaptics = true)
	{
	}

	[Token(Token = "0x600083B")]
	[Address(RVA = "0x90EEAC", Offset = "0x90EEAC", VA = "0x90EEAC")]
	private void Release(bool playHaptics = true)
	{
	}

	[Token(Token = "0x600083C")]
	[Address(RVA = "0x90F030", Offset = "0x90F030", VA = "0x90F030")]
	private void TrackCurrentPosition()
	{
	}

	[Token(Token = "0x600083D")]
	[Address(RVA = "0x910328", Offset = "0x910328", VA = "0x910328")]
	public Vector3 GetHandMovementSpeed()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600083E")]
	[Address(RVA = "0x910330", Offset = "0x910330", VA = "0x910330")]
	public Vector3 GetHandAngularSpeed()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600083F")]
	[Address(RVA = "0x910338", Offset = "0x910338", VA = "0x910338")]
	private Vector3 MeanValue(Vector3[] values)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000840")]
	[Address(RVA = "0x9103EC", Offset = "0x9103EC", VA = "0x9103EC")]
	private void OnAutoHoldChanged(bool isActive)
	{
	}

	[Token(Token = "0x6000841")]
	[Address(RVA = "0x9103F8", Offset = "0x9103F8", VA = "0x9103F8")]
	public CookoutAvatarHand()
	{
	}
}
[Token(Token = "0x200013D")]
public sealed class CookoutAvatarHead : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4000893")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TrackedPoseDriver poseDriver;

	[Token(Token = "0x4000894")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Camera cam;

	[Token(Token = "0x4000895")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioListener audioListener;

	[Token(Token = "0x600084A")]
	[Address(RVA = "0x910F54", Offset = "0x910F54", VA = "0x910F54")]
	public CookoutAvatarHead()
	{
	}
}
[Token(Token = "0x200013E")]
public class GazeTarget : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x600084B")]
	[Address(RVA = "0x910F5C", Offset = "0x910F5C", VA = "0x910F5C")]
	public GazeTarget()
	{
	}
}
[Serializable]
[Token(Token = "0x200013F")]
public sealed class OvrAvatarShader
{
	[Token(Token = "0x4000896")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Shader Monochrome_SurfaceShader;

	[Token(Token = "0x4000897")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Shader Monochrome_SurfaceShader_SelfOccluding;

	[Token(Token = "0x4000898")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Shader Monochrome_SurfaceShader_PBS;

	[Token(Token = "0x4000899")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Shader Skinshaded_SurfaceShader_SingleComponent;

	[Token(Token = "0x400089A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Shader Skinshaded_VertFrag_SingleComponent;

	[Token(Token = "0x400089B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Shader Skinshaded_VertFrag_CombinedMesh;

	[Token(Token = "0x400089C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Shader Skinshaded_Expressive_SurfaceShader_SingleComponent;

	[Token(Token = "0x400089D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Shader Skinshaded_Expressive_VertFrag_SingleComponent;

	[Token(Token = "0x400089E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Shader Skinshaded_Expressive_VertFrag_CombinedMesh;

	[Token(Token = "0x400089F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Shader Loader_VertFrag_CombinedMesh;

	[Token(Token = "0x40008A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Shader EyeLens;

	[Token(Token = "0x40008A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Shader ControllerShader;

	[Token(Token = "0x600084C")]
	[Address(RVA = "0x910F64", Offset = "0x910F64", VA = "0x910F64")]
	public OvrAvatarShader()
	{
	}
}
[Token(Token = "0x2000140")]
public class OculusAvatarSettings : ScriptableObject
{
	[Token(Token = "0x40008A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OvrAvatarShader ovrAvatarShader;

	[Token(Token = "0x40008A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static OculusAvatarSettings instance;

	[Token(Token = "0x600084D")]
	[Address(RVA = "0x910F6C", Offset = "0x910F6C", VA = "0x910F6C")]
	public static OculusAvatarSettings Instance()
	{
		return null;
	}

	[Token(Token = "0x600084E")]
	[Address(RVA = "0x911038", Offset = "0x911038", VA = "0x911038")]
	public OculusAvatarSettings()
	{
	}
}
[Serializable]
[Token(Token = "0x2000141")]
[CreateAssetMenu(fileName = "newUnlockableAvatarCustomization", menuName = "Avatars/Unlockable Avatar Customization")]
public class UnlockableAvatarCustomizationData : ScriptableObject
{
	[Token(Token = "0x40008A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AvatarCustomizationUnlockCondition unlockCondition;

	[Token(Token = "0x40008A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool isHat;

	[Token(Token = "0x40008A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public AvatarHatType hatType;

	[Token(Token = "0x40008A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	public bool isHead;

	[Token(Token = "0x40008A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
	public CookoutAvatarVisualType avatarVisualType;

	[Token(Token = "0x40008A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int headMaterialIndex;

	[Token(Token = "0x40008AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool isBody;

	[Token(Token = "0x40008AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public AvatarBodyType bodyType;

	[Token(Token = "0x40008AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
	public bool isHandMaterial;

	[Token(Token = "0x40008AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
	public AvatarHandMaterial handMaterial;

	[Token(Token = "0x600084F")]
	[Address(RVA = "0x911040", Offset = "0x911040", VA = "0x911040")]
	public UnlockableAvatarCustomizationData()
	{
	}
}
[Serializable]
[Token(Token = "0x2000142")]
[CreateAssetMenu(fileName = "NewUnlockableAvatarCustomizationList", menuName = "Avatars/Unlockable Avatar Customization List")]
public class UnlockableAvatarCustomizationList : ScriptableObject
{
	[Token(Token = "0x40008AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<UnlockableAvatarCustomizationData> unlockableAvatarCustomizationDataList;

	[Token(Token = "0x6000850")]
	[Address(RVA = "0x911048", Offset = "0x911048", VA = "0x911048")]
	public UnlockableAvatarCustomizationList()
	{
	}
}
[Token(Token = "0x2000143")]
public class CastleFountain : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40008AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float speed;

	[Token(Token = "0x40008B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Renderer fountainArc;

	[Token(Token = "0x40008B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float textureOffset;

	[Token(Token = "0x40008B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private MaterialPropertyBlock propertyBlock;

	[Token(Token = "0x40008B3")]
	private const string propertyTextureOffset = "_TextureOffset";

	[Token(Token = "0x6000851")]
	[Address(RVA = "0x911050", Offset = "0x911050", VA = "0x911050")]
	private void Start()
	{
	}

	[Token(Token = "0x6000852")]
	[Address(RVA = "0x9110B0", Offset = "0x9110B0", VA = "0x9110B0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000853")]
	[Address(RVA = "0x911154", Offset = "0x911154", VA = "0x911154")]
	public CastleFountain()
	{
	}
}
[Token(Token = "0x2000144")]
public class CondimentCollision : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40008B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private IngredientType condimentType;

	[Token(Token = "0x40008B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Tooltip("Add a reference to a Condiment Splotches prefab in the scene here. Make sure its position is 0,0,0")]
	private CondimentSplotches roomSplotches;

	[Token(Token = "0x40008B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private PhotonView bottleView;

	[Token(Token = "0x40008B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem squirts;

	[Token(Token = "0x40008B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Color color;

	[Token(Token = "0x40008B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<ParticleCollisionEvent> collisionEvents;

	[Token(Token = "0x40008BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private uint collisionCounter;

	[Token(Token = "0x6000854")]
	[Address(RVA = "0x91115C", Offset = "0x91115C", VA = "0x91115C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000855")]
	[Address(RVA = "0x911260", Offset = "0x911260", VA = "0x911260")]
	private void OnParticleCollision(GameObject other)
	{
	}

	[Token(Token = "0x6000856")]
	[Address(RVA = "0x911C50", Offset = "0x911C50", VA = "0x911C50")]
	public CondimentCollision()
	{
	}
}
[Token(Token = "0x2000145")]
public class Condiments : NetworkedBehaviour, IPunObservable
{
	[Token(Token = "0x40008BB")]
	private const float particleCooldown = 0.1f;

	[Token(Token = "0x40008BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Color bottleColor;

	[Token(Token = "0x40008BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private MeshRenderer bottleRenderer;

	[Token(Token = "0x40008BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private ParticleSystem[] squirtParticles;

	[Token(Token = "0x40008BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private CookingNetworkManager networkManager;

	[Token(Token = "0x40008C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Grabbable grabbable;

	[Token(Token = "0x40008C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GameObject myCollider;

	[Token(Token = "0x40008C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool isSqueezedLocally;

	[Token(Token = "0x40008C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
	private bool isSqueezedRemote;

	[Token(Token = "0x40008C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float particleTimer;

	[Token(Token = "0x40008C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private PlaySoundResult squeezeNoise;

	[Token(Token = "0x40008C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private CookoutHandedness lastGrabbedBy;

	[Token(Token = "0x40008C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private int squirtParticleIndex;

	[Token(Token = "0x40008C8")]
	private const int notHeldLayer = 0;

	[Token(Token = "0x40008C9")]
	private const int heldItemLayer = 10;

	[Token(Token = "0x1700011E")]
	private bool IsSqueezed
	{
		[Token(Token = "0x6000857")]
		[Address(RVA = "0x911C58", Offset = "0x911C58", VA = "0x911C58")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000858")]
	[Address(RVA = "0x911C78", Offset = "0x911C78", VA = "0x911C78")]
	private void Start()
	{
	}

	[Token(Token = "0x6000859")]
	[Address(RVA = "0x91208C", Offset = "0x91208C", VA = "0x91208C")]
	private void OnGrabBegin()
	{
	}

	[Token(Token = "0x600085A")]
	[Address(RVA = "0x9123CC", Offset = "0x9123CC", VA = "0x9123CC")]
	private void OnGrabEnd()
	{
	}

	[Token(Token = "0x600085B")]
	[Address(RVA = "0x9123D4", Offset = "0x9123D4", VA = "0x9123D4")]
	private void OnRemoteGrabEnd()
	{
	}

	[Token(Token = "0x600085C")]
	[Address(RVA = "0x9124CC", Offset = "0x9124CC", VA = "0x9124CC")]
	private void Update()
	{
	}

	[Token(Token = "0x600085D")]
	[Address(RVA = "0x9125E4", Offset = "0x9125E4", VA = "0x9125E4", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x600085E")]
	[Address(RVA = "0x912120", Offset = "0x912120", VA = "0x912120")]
	private void StopSoundAndHaptics(CookoutHandedness handedness)
	{
	}

	[Token(Token = "0x600085F")]
	[Address(RVA = "0x912430", Offset = "0x912430", VA = "0x912430")]
	private void StopSound()
	{
	}

	[Token(Token = "0x6000860")]
	[Address(RVA = "0x91222C", Offset = "0x91222C", VA = "0x91222C")]
	private void StartSqueeze()
	{
	}

	[Token(Token = "0x6000861")]
	[Address(RVA = "0x912838", Offset = "0x912838", VA = "0x912838")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000862")]
	[Address(RVA = "0x9129C4", Offset = "0x9129C4", VA = "0x9129C4")]
	public Condiments()
	{
	}
}
[Token(Token = "0x2000146")]
public class CondimentSlice : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40008CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Mesh[] sliceVariations;

	[Token(Token = "0x6000863")]
	[Address(RVA = "0x912A1C", Offset = "0x912A1C", VA = "0x912A1C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000864")]
	[Address(RVA = "0x912A20", Offset = "0x912A20", VA = "0x912A20")]
	public Mesh GetRandomMesh()
	{
		return null;
	}

	[Token(Token = "0x6000865")]
	[Address(RVA = "0x912A60", Offset = "0x912A60", VA = "0x912A60")]
	public CondimentSlice()
	{
	}
}
[Token(Token = "0x2000147")]
public class CondimentSplotches : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40008CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem splotches;

	[Token(Token = "0x40008CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool canAdd;

	[Token(Token = "0x40008CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool clearOnEnvironmentChange;

	[Token(Token = "0x40008CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private ParticleSystem.EmitParams emitParams;

	[Token(Token = "0x40008CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private EnvironmentLoader environmentLoader;

	[Token(Token = "0x40008D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private CookingRound cookingRound;

	[Token(Token = "0x6000866")]
	[Address(RVA = "0x912A68", Offset = "0x912A68", VA = "0x912A68")]
	private void Start()
	{
	}

	[Token(Token = "0x6000867")]
	[Address(RVA = "0x911530", Offset = "0x911530", VA = "0x911530")]
	public void AddParticles(Vector3 position, Color color)
	{
	}

	[Token(Token = "0x6000868")]
	[Address(RVA = "0x911B44", Offset = "0x911B44", VA = "0x911B44")]
	public void AddParticlesSplashOnly(Vector3 position, Color color)
	{
	}

	[Token(Token = "0x6000869")]
	[Address(RVA = "0x912D10", Offset = "0x912D10", VA = "0x912D10")]
	private void ClearAllParticles()
	{
	}

	[Token(Token = "0x600086A")]
	[Address(RVA = "0x912D2C", Offset = "0x912D2C", VA = "0x912D2C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600086B")]
	[Address(RVA = "0x912ECC", Offset = "0x912ECC", VA = "0x912ECC")]
	public CondimentSplotches()
	{
	}
}
[Token(Token = "0x2000148")]
public class CondimentStainOnConveyorBelt : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40008D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem stains;

	[Token(Token = "0x40008D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ConveyorBelt conveyorBelt;

	[Token(Token = "0x40008D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 pivot;

	[Token(Token = "0x40008D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float beltRotationLast;

	[Token(Token = "0x40008D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<ParticleSystem.Particle> particlesOnBelt;

	[Token(Token = "0x600086C")]
	[Address(RVA = "0x912F3C", Offset = "0x912F3C", VA = "0x912F3C")]
	private void Start()
	{
	}

	[Token(Token = "0x600086D")]
	[Address(RVA = "0x9130A0", Offset = "0x9130A0", VA = "0x9130A0")]
	private void OnParticleTrigger()
	{
	}

	[Token(Token = "0x600086E")]
	[Address(RVA = "0x913290", Offset = "0x913290", VA = "0x913290")]
	public CondimentStainOnConveyorBelt()
	{
	}
}
[Token(Token = "0x2000149")]
public class PlateCondiment : NetworkedBehaviour, IPunObservable
{
	[Token(Token = "0x40008D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	public CondimentSplotches condimentSplotches;

	[Token(Token = "0x40008D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private ParticleSystem splotches;

	[Token(Token = "0x40008D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private PlateVisuals plateVisuals;

	[Token(Token = "0x40008D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Dictionary<IngredientType, int> condimentRateIndex;

	[Token(Token = "0x40008DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private byte[] condimentRate;

	[Token(Token = "0x40008DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int condimentTextRate;

	[Token(Token = "0x600086F")]
	[Address(RVA = "0x913298", Offset = "0x913298", VA = "0x913298")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000870")]
	[Address(RVA = "0x911988", Offset = "0x911988", VA = "0x911988")]
	public void AddCondiment(int rate, IngredientType type)
	{
	}

	[Token(Token = "0x6000871")]
	[Address(RVA = "0x9133A0", Offset = "0x9133A0", VA = "0x9133A0")]
	public void ResetPlateCondiment()
	{
	}

	[Token(Token = "0x6000872")]
	[Address(RVA = "0x9134A4", Offset = "0x9134A4", VA = "0x9134A4")]
	public void DisablePlateCondiment()
	{
	}

	[Token(Token = "0x6000873")]
	[Address(RVA = "0x9134E4", Offset = "0x9134E4", VA = "0x9134E4")]
	[PunRPC]
	private void AddCondimentRPC(byte rate, byte ingredientType)
	{
	}

	[Token(Token = "0x6000874")]
	[Address(RVA = "0x913A84", Offset = "0x913A84", VA = "0x913A84")]
	[PunRPC]
	private void CondimentAddedProgressFeedbackRPC(byte newRate, byte ingredientType)
	{
	}

	[Token(Token = "0x6000875")]
	[Address(RVA = "0x913B48", Offset = "0x913B48", VA = "0x913B48")]
	[PunRPC]
	private void RemovePlateSplotchesRPC(bool completeReset)
	{
	}

	[Token(Token = "0x6000876")]
	[Address(RVA = "0x913B50", Offset = "0x913B50", VA = "0x913B50")]
	public void ResetLocalSplotches(bool completeReset)
	{
	}

	[Token(Token = "0x6000877")]
	[Address(RVA = "0x913BEC", Offset = "0x913BEC", VA = "0x913BEC", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000878")]
	[Address(RVA = "0x913C8C", Offset = "0x913C8C", VA = "0x913C8C")]
	public PlateCondiment()
	{
	}
}
[Token(Token = "0x200014A")]
public class Consumable : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40008DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ConsumableData data;

	[Token(Token = "0x6000879")]
	[Address(RVA = "0x913C94", Offset = "0x913C94", VA = "0x913C94")]
	private void Start()
	{
	}

	[Token(Token = "0x600087A")]
	[Address(RVA = "0x913DD0", Offset = "0x913DD0", VA = "0x913DD0")]
	public Consumable()
	{
	}
}
[Token(Token = "0x200014B")]
public class ConsumableBeingHeld : SingleInstanceBehavior<ConsumableBeingHeld>
{
	[Token(Token = "0x200014C")]
	public delegate void ConsumableOnGrab(ConsumableType consumableType);

	[Token(Token = "0x200014D")]
	public delegate void ConsumableOnRelease(ConsumableType consumableType);

	[Token(Token = "0x40008DE")]
	private const int noConsumableHeld = -1;

	[Token(Token = "0x1700011F")]
	public int[] HeldCondiment
	{
		[Token(Token = "0x600087B")]
		[Address(RVA = "0x913DD8", Offset = "0x913DD8", VA = "0x913DD8")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600087C")]
		[Address(RVA = "0x913DE0", Offset = "0x913DE0", VA = "0x913DE0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x14000006")]
	public event ConsumableOnGrab onConsumableGrabbed
	{
		[Token(Token = "0x600087D")]
		[Address(RVA = "0x913DE8", Offset = "0x913DE8", VA = "0x913DE8")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600087E")]
		[Address(RVA = "0x913E84", Offset = "0x913E84", VA = "0x913E84")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000007")]
	public event ConsumableOnRelease onConsumableReleased
	{
		[Token(Token = "0x600087F")]
		[Address(RVA = "0x913F20", Offset = "0x913F20", VA = "0x913F20")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000880")]
		[Address(RVA = "0x913FBC", Offset = "0x913FBC", VA = "0x913FBC")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000881")]
	[Address(RVA = "0x914058", Offset = "0x914058", VA = "0x914058", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000882")]
	[Address(RVA = "0x9140F8", Offset = "0x9140F8", VA = "0x9140F8")]
	public void SetHeldConsumable(ConsumableType type, CookoutHandedness hand)
	{
	}

	[Token(Token = "0x6000883")]
	[Address(RVA = "0x91414C", Offset = "0x91414C", VA = "0x91414C")]
	public void RemoveHeldConsumable(CookoutHandedness hand)
	{
	}

	[Token(Token = "0x6000884")]
	[Address(RVA = "0x9141DC", Offset = "0x9141DC", VA = "0x9141DC")]
	public bool PotionTypeIsHeld(ConsumableType type)
	{
		return default(bool);
	}

	[Token(Token = "0x6000885")]
	[Address(RVA = "0x914238", Offset = "0x914238", VA = "0x914238")]
	public ConsumableBeingHeld()
	{
	}
}
[Token(Token = "0x200014E")]
public class ConsumableBottle : NetworkedBehaviour, IPunObservable
{
	[Token(Token = "0x40008E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject myCollider;

	[Token(Token = "0x40008E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform lidAnchor;

	[Token(Token = "0x40008E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Collider lidCollider;

	[Token(Token = "0x40008E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Material bottleMaterial;

	[Token(Token = "0x40008E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Material ghostMaterial;

	[Token(Token = "0x40008E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Renderer bottleRenderer;

	[Token(Token = "0x40008E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private MeshFilter bottleMeshFilter;

	[Token(Token = "0x40008E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private ParticleSystem consumableLiquid;

	[Token(Token = "0x40008E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Mesh meshNoLid;

	[Token(Token = "0x40008EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private float angleThreshold;

	[Token(Token = "0x40008EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Grabbable bottleGrabbable;

	[Token(Token = "0x40008EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private CookingRound cookingRound;

	[Token(Token = "0x40008ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Consumable consumable;

	[Token(Token = "0x40008EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private ConsumableBeingHeld consumableBeingHeld;

	[Token(Token = "0x40008EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private PlaySoundResult pourNoise;

	[Token(Token = "0x40008F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private ConsumableType consumableType;

	[Token(Token = "0x40008F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private CookoutHandedness handedness;

	[Token(Token = "0x40008F2")]
	private const int notHeldLayer = 0;

	[Token(Token = "0x40008F3")]
	private const int heldItemLayer = 11;

	[Token(Token = "0x40008F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
	public bool lidOn;

	[Token(Token = "0x40008F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9E")]
	private bool facingWorldDown;

	[Token(Token = "0x40008F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9F")]
	private bool isGhost;

	[Token(Token = "0x600088E")]
	[Address(RVA = "0x914574", Offset = "0x914574", VA = "0x914574")]
	private void Start()
	{
	}

	[Token(Token = "0x600088F")]
	[Address(RVA = "0x914B38", Offset = "0x914B38", VA = "0x914B38")]
	private void OnGrabBegin()
	{
	}

	[Token(Token = "0x6000890")]
	[Address(RVA = "0x914D38", Offset = "0x914D38", VA = "0x914D38")]
	private void OnGrabEnd()
	{
	}

	[Token(Token = "0x6000891")]
	[Address(RVA = "0x914BB8", Offset = "0x914BB8", VA = "0x914BB8")]
	private void UncorkLid()
	{
	}

	[Token(Token = "0x6000892")]
	[Address(RVA = "0x914D6C", Offset = "0x914D6C", VA = "0x914D6C")]
	private void DisableBottle()
	{
	}

	[Token(Token = "0x6000893")]
	[Address(RVA = "0x914D74", Offset = "0x914D74", VA = "0x914D74")]
	private void EnableBottle()
	{
	}

	[Token(Token = "0x6000894")]
	[Address(RVA = "0x914A80", Offset = "0x914A80", VA = "0x914A80")]
	private void SetEnabled(bool isEnabled)
	{
	}

	[Token(Token = "0x6000895")]
	[Address(RVA = "0x914E68", Offset = "0x914E68", VA = "0x914E68")]
	[PunRPC]
	private void UncorkPotionRPC()
	{
	}

	[Token(Token = "0x6000896")]
	[Address(RVA = "0x914F78", Offset = "0x914F78", VA = "0x914F78")]
	private void Update()
	{
	}

	[Token(Token = "0x6000897")]
	[Address(RVA = "0x91518C", Offset = "0x91518C", VA = "0x91518C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000898")]
	[Address(RVA = "0x915464", Offset = "0x915464", VA = "0x915464")]
	[PunRPC]
	private void PlayConsumableParticleEffectRPC(Vector3 position, Quaternion rotation, int consumableType)
	{
	}

	[Token(Token = "0x6000899")]
	[Address(RVA = "0x915670", Offset = "0x915670", VA = "0x915670", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x600089A")]
	[Address(RVA = "0x915784", Offset = "0x915784", VA = "0x915784")]
	public ConsumableBottle()
	{
	}
}
[Token(Token = "0x200014F")]
public abstract class ConsumableEffect : NetworkedBehaviour
{
	[Token(Token = "0x40008F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ConsumableLiquid liquid;

	[Token(Token = "0x40008F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Consumable consumableData;

	[Token(Token = "0x600089B")]
	[Address(RVA = "0x9167A0", Offset = "0x9167A0", VA = "0x9167A0")]
	private void Start()
	{
	}

	[Token(Token = "0x600089C")]
	[Address(RVA = "0x9169B4", Offset = "0x9169B4", VA = "0x9169B4", Slot = "4")]
	protected virtual void ApplyEffect(GameObject collidedWith, Vector3 collisionPoint)
	{
	}

	[Token(Token = "0x600089D")]
	[Address(RVA = "0x916E08", Offset = "0x916E08", VA = "0x916E08")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600089E")]
	[Address(RVA = "0x916EC4", Offset = "0x916EC4", VA = "0x916EC4")]
	protected ConsumableEffect()
	{
	}
}
[Token(Token = "0x2000150")]
public class ConsumableLiquid : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x2000151")]
	public delegate void LiquidActivated(GameObject collidedWith, Vector3 collisionPoint);

	[Token(Token = "0x40008F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem liquidParticles;

	[Token(Token = "0x40008FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<ParticleCollisionEvent> collisionEvents;

	[Token(Token = "0x40008FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private PhotonView bottleView;

	[Token(Token = "0x14000008")]
	public event LiquidActivated OnConsumableLiquidCollision
	{
		[Token(Token = "0x600089F")]
		[Address(RVA = "0x916918", Offset = "0x916918", VA = "0x916918")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60008A0")]
		[Address(RVA = "0x916D6C", Offset = "0x916D6C", VA = "0x916D6C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60008A1")]
	[Address(RVA = "0x916ECC", Offset = "0x916ECC", VA = "0x916ECC")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008A2")]
	[Address(RVA = "0x916F58", Offset = "0x916F58", VA = "0x916F58")]
	private void OnParticleCollision(GameObject other)
	{
	}

	[Token(Token = "0x60008A3")]
	[Address(RVA = "0x91702C", Offset = "0x91702C", VA = "0x91702C")]
	public ConsumableLiquid()
	{
	}
}
[Token(Token = "0x2000152")]
public class ConsumableSpawner : SingleInstanceBehavior<ConsumableSpawner>
{
	[Token(Token = "0x40008FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[NotNull]
	[SerializeField]
	private Transform[] spawnPoints;

	[NonSerialized]
	[Token(Token = "0x40008FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] spawnedConsumables;

	[NonSerialized]
	[Token(Token = "0x40008FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int[] spawnedConsumableType;

	[Token(Token = "0x60008A8")]
	[Address(RVA = "0x917160", Offset = "0x917160", VA = "0x917160")]
	public void SpawnSelectedConsumables(int[] selectedConsumables, int playerPositionIndex)
	{
	}

	[Token(Token = "0x60008A9")]
	[Address(RVA = "0x917578", Offset = "0x917578", VA = "0x917578")]
	public Transform GetConsumableSpawnPoint(int seat, int slot)
	{
		return null;
	}

	[Token(Token = "0x60008AA")]
	[Address(RVA = "0x9175B4", Offset = "0x9175B4", VA = "0x9175B4")]
	public void OnValidate()
	{
	}

	[Token(Token = "0x60008AB")]
	[Address(RVA = "0x9175FC", Offset = "0x9175FC", VA = "0x9175FC")]
	public ConsumableSpawner()
	{
	}
}
[Token(Token = "0x2000153")]
public class HeartRecovery : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4000900")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private LifeCounter lifeCounter;

	[Token(Token = "0x4000901")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private MagicalDrops drops;

	[Token(Token = "0x60008AC")]
	[Address(RVA = "0x9176B8", Offset = "0x9176B8", VA = "0x9176B8")]
	private void Start()
	{
	}

	[Token(Token = "0x60008AD")]
	[Address(RVA = "0x917978", Offset = "0x917978", VA = "0x917978")]
	private void RecoverHeart(GameObject collidedWith)
	{
	}

	[Token(Token = "0x60008AE")]
	[Address(RVA = "0x917C88", Offset = "0x917C88", VA = "0x917C88")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60008AF")]
	[Address(RVA = "0x917DF0", Offset = "0x917DF0", VA = "0x917DF0")]
	public HeartRecovery()
	{
	}
}
[Token(Token = "0x2000154")]
public interface IConsumableTarget
{
	[Token(Token = "0x17000120")]
	UseConsumableHere UseConsumableHere
	{
		[Token(Token = "0x60008B0")]
		get;
		[Token(Token = "0x60008B1")]
		set;
	}

	[Token(Token = "0x17000121")]
	bool ReactsToConsumables
	{
		[Token(Token = "0x60008B2")]
		get;
	}
}
[Token(Token = "0x2000155")]
public class InstantGrilled : ConsumableEffect
{
	[Token(Token = "0x60008B3")]
	[Address(RVA = "0x917DF8", Offset = "0x917DF8", VA = "0x917DF8", Slot = "4")]
	protected override void ApplyEffect(GameObject collidedWith, Vector3 collisionPoint)
	{
	}

	[Token(Token = "0x60008B4")]
	[Address(RVA = "0x9180F4", Offset = "0x9180F4", VA = "0x9180F4")]
	public InstantGrilled()
	{
	}
}
[Token(Token = "0x2000156")]
public class InstantSandwich : ConsumableEffect
{
	[Token(Token = "0x60008B5")]
	[Address(RVA = "0x9180FC", Offset = "0x9180FC", VA = "0x9180FC", Slot = "4")]
	protected override void ApplyEffect(GameObject collidedWith, Vector3 collisionPoint)
	{
	}

	[Token(Token = "0x60008B6")]
	[Address(RVA = "0x918424", Offset = "0x918424", VA = "0x918424")]
	public InstantSandwich()
	{
	}
}
[Token(Token = "0x2000157")]
public class InstantWash : ConsumableEffect
{
	[Token(Token = "0x60008B7")]
	[Address(RVA = "0x91842C", Offset = "0x91842C", VA = "0x91842C", Slot = "4")]
	protected override void ApplyEffect(GameObject collidedWith, Vector3 collisionPoint)
	{
	}

	[Token(Token = "0x60008B8")]
	[Address(RVA = "0x918810", Offset = "0x918810", VA = "0x918810")]
	public InstantWash()
	{
	}
}
[Token(Token = "0x2000158")]
public class MagicalDrops : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x2000159")]
	public delegate void MagicalDropActivated(GameObject collidedWith);

	[Token(Token = "0x4000904")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private bool collidesWithAllColliders;

	[Token(Token = "0x4000905")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	[SerializeField]
	private bool collidesWithTriggers;

	[Token(Token = "0x4000906")]
	private const int heldItemLayer = 10;

	[Token(Token = "0x4000907")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CookingRound cookingRound;

	[Token(Token = "0x4000908")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float despawnTimer;

	[Token(Token = "0x4000909")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float despawnTime;

	[Token(Token = "0x17000122")]
	public PhotonView view
	{
		[Token(Token = "0x60008BB")]
		[Address(RVA = "0x918818", Offset = "0x918818", VA = "0x918818")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60008BC")]
		[Address(RVA = "0x918820", Offset = "0x918820", VA = "0x918820")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x14000009")]
	public event MagicalDropActivated OnMagicalDropActivated
	{
		[Token(Token = "0x60008B9")]
		[Address(RVA = "0x9178DC", Offset = "0x9178DC", VA = "0x9178DC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60008BA")]
		[Address(RVA = "0x917D54", Offset = "0x917D54", VA = "0x917D54")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60008BD")]
	[Address(RVA = "0x918828", Offset = "0x918828", VA = "0x918828")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008BE")]
	[Address(RVA = "0x918890", Offset = "0x918890", VA = "0x918890")]
	private void Start()
	{
	}

	[Token(Token = "0x60008BF")]
	[Address(RVA = "0x918958", Offset = "0x918958", VA = "0x918958")]
	private void Update()
	{
	}

	[Token(Token = "0x60008C0")]
	[Address(RVA = "0x9189BC", Offset = "0x9189BC", VA = "0x9189BC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60008C1")]
	[Address(RVA = "0x918A48", Offset = "0x918A48", VA = "0x918A48")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60008C2")]
	[Address(RVA = "0x918B24", Offset = "0x918B24", VA = "0x918B24")]
	public MagicalDrops()
	{
	}
}
[Token(Token = "0x200015A")]
public class MultiTimeStopper : ConsumableEffect
{
	[Token(Token = "0x400090A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float timeStopDuration;

	[Token(Token = "0x400090B")]
	private const string tableColliderName = "ConveyorBeltCenter";

	[Token(Token = "0x60008C7")]
	[Address(RVA = "0x918B78", Offset = "0x918B78", VA = "0x918B78", Slot = "4")]
	protected override void ApplyEffect(GameObject collidedWith, Vector3 collisionPoint)
	{
	}

	[Token(Token = "0x60008C8")]
	[Address(RVA = "0x918EEC", Offset = "0x918EEC", VA = "0x918EEC")]
	public MultiTimeStopper()
	{
	}
}
[Token(Token = "0x200015B")]
public class SandwichNeatnessFixer : ConsumableEffect
{
	[Token(Token = "0x60008C9")]
	[Address(RVA = "0x918EFC", Offset = "0x918EFC", VA = "0x918EFC", Slot = "4")]
	protected override void ApplyEffect(GameObject collidedWith, Vector3 collisionPoint)
	{
	}

	[Token(Token = "0x60008CA")]
	[Address(RVA = "0x919238", Offset = "0x919238", VA = "0x919238")]
	public SandwichNeatnessFixer()
	{
	}
}
[Token(Token = "0x200015C")]
public class SuperSharpness : ConsumableEffect
{
	[Token(Token = "0x400090C")]
	private const int cleaverLayer = 14;

	[Token(Token = "0x60008CB")]
	[Address(RVA = "0x919240", Offset = "0x919240", VA = "0x919240", Slot = "4")]
	protected override void ApplyEffect(GameObject collidedWith, Vector3 collisionPoint)
	{
	}

	[Token(Token = "0x60008CC")]
	[Address(RVA = "0x919530", Offset = "0x919530", VA = "0x919530")]
	public SuperSharpness()
	{
	}
}
[Token(Token = "0x200015D")]
public class TimeSlowdownHandler : SingleInstanceNetworkedBehavior<TimeSlowdownHandler>, IPunObservable
{
	[Token(Token = "0x400090F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float slowDownTimer;

	[Token(Token = "0x4000910")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float stopTimer;

	[Token(Token = "0x4000911")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private MusicPitcher musicPitcher;

	[Token(Token = "0x4000912")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private OrderMonitor orderMonitor;

	[Token(Token = "0x4000913")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private CookingGameState gameState;

	[Token(Token = "0x4000914")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private FinalLevelHandler finalLevelHandler;

	[Token(Token = "0x17000123")]
	public bool IsSlowedDown
	{
		[Token(Token = "0x60008CD")]
		[Address(RVA = "0x919538", Offset = "0x919538", VA = "0x919538")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000124")]
	public bool IsStopped
	{
		[Token(Token = "0x60008CE")]
		[Address(RVA = "0x919548", Offset = "0x919548", VA = "0x919548")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000125")]
	public bool RoundTimerDisabled
	{
		[Token(Token = "0x60008CF")]
		[Address(RVA = "0x919574", Offset = "0x919574", VA = "0x919574")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60008D0")]
		[Address(RVA = "0x91957C", Offset = "0x91957C", VA = "0x91957C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000126")]
	public bool singlePlayerPauseStop
	{
		[Token(Token = "0x60008D1")]
		[Address(RVA = "0x919588", Offset = "0x919588", VA = "0x919588")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60008D2")]
		[Address(RVA = "0x919590", Offset = "0x919590", VA = "0x919590")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000127")]
	public float SlowdownTimer
	{
		[Token(Token = "0x60008D3")]
		[Address(RVA = "0x91959C", Offset = "0x91959C", VA = "0x91959C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60008D4")]
		[Address(RVA = "0x9195A4", Offset = "0x9195A4", VA = "0x9195A4")]
		private set
		{
		}
	}

	[Token(Token = "0x17000128")]
	public float StopTimer
	{
		[Token(Token = "0x60008D5")]
		[Address(RVA = "0x919684", Offset = "0x919684", VA = "0x919684")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60008D6")]
		[Address(RVA = "0x91968C", Offset = "0x91968C", VA = "0x91968C")]
		private set
		{
		}
	}

	[Token(Token = "0x17000129")]
	public float SlowDownFactor
	{
		[Token(Token = "0x60008D7")]
		[Address(RVA = "0x9196CC", Offset = "0x9196CC", VA = "0x9196CC")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x60008D8")]
	[Address(RVA = "0x91970C", Offset = "0x91970C", VA = "0x91970C", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x60008D9")]
	[Address(RVA = "0x91976C", Offset = "0x91976C", VA = "0x91976C")]
	private void Start()
	{
	}

	[Token(Token = "0x60008DA")]
	[Address(RVA = "0x919BC0", Offset = "0x919BC0", VA = "0x919BC0")]
	private void Update()
	{
	}

	[Token(Token = "0x60008DB")]
	[Address(RVA = "0x919E58", Offset = "0x919E58", VA = "0x919E58")]
	private void OnGameStateChanged(GameState oldState, GameState newState)
	{
	}

	[Token(Token = "0x60008DC")]
	[Address(RVA = "0x919ED0", Offset = "0x919ED0", VA = "0x919ED0")]
	[PunRPC]
	private void SlowDownTimeRPC(float duration)
	{
	}

	[Token(Token = "0x60008DD")]
	[Address(RVA = "0x919F38", Offset = "0x919F38", VA = "0x919F38")]
	[PunRPC]
	private void StopTimeRPC(float duration)
	{
	}

	[Token(Token = "0x60008DE")]
	[Address(RVA = "0x919F94", Offset = "0x919F94", VA = "0x919F94")]
	public void SetRoundTimerDisabled(bool isStopped)
	{
	}

	[Token(Token = "0x60008DF")]
	[Address(RVA = "0x9195C8", Offset = "0x9195C8", VA = "0x9195C8")]
	private void SlowDownTimeEffect(bool pitchMusic)
	{
	}

	[Token(Token = "0x60008E0")]
	[Address(RVA = "0x919DFC", Offset = "0x919DFC", VA = "0x919DFC")]
	private void RestoreTimeFlow()
	{
	}

	[Token(Token = "0x60008E1")]
	[Address(RVA = "0x919D7C", Offset = "0x919D7C", VA = "0x919D7C")]
	private void OnTimeStopEnd()
	{
	}

	[Token(Token = "0x60008E2")]
	[Address(RVA = "0x919FA0", Offset = "0x919FA0", VA = "0x919FA0", Slot = "6")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60008E3")]
	[Address(RVA = "0x91A1E0", Offset = "0x91A1E0", VA = "0x91A1E0", Slot = "5")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x60008E4")]
	[Address(RVA = "0x91A35C", Offset = "0x91A35C", VA = "0x91A35C")]
	public TimeSlowdownHandler()
	{
	}
}
[Token(Token = "0x200015E")]
public class TofuBottle : ConsumableEffect
{
	[Token(Token = "0x4000915")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private IngredientSlice OmniIngredientPrefab;

	[Token(Token = "0x4000916")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private int OmniIngredientCount;

	[Token(Token = "0x60008E5")]
	[Address(RVA = "0x91A3C8", Offset = "0x91A3C8", VA = "0x91A3C8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008E6")]
	[Address(RVA = "0x91A3CC", Offset = "0x91A3CC", VA = "0x91A3CC", Slot = "4")]
	protected override void ApplyEffect(GameObject collidedWith, Vector3 collisionPoint)
	{
	}

	[Token(Token = "0x60008E7")]
	[Address(RVA = "0x91A904", Offset = "0x91A904", VA = "0x91A904")]
	public TofuBottle()
	{
	}
}
[Token(Token = "0x200015F")]
public class ConsumableMenu : SingleInstanceBehavior<ConsumableMenu>
{
	[Token(Token = "0x4000917")]
	public const int noConsumableSelected = -1;

	[Token(Token = "0x4000918")]
	public const int maxSelectedCount = 2;

	[Token(Token = "0x4000919")]
	private const string equippedLabelPath = "EquippedLabel";

	[Token(Token = "0x400091A")]
	private const string consumableStockCountPath = "Count";

	[Token(Token = "0x400091B")]
	private const string potionFreeSampleString = "potion_free_sample";

	[Token(Token = "0x400091C")]
	private const string propertyMainTex = "_MainTex";

	[Token(Token = "0x400091D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly int consumableTypeCount;

	[Token(Token = "0x400091E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly ConsumableType[] consumableOrder;

	[Token(Token = "0x400091F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Game Objects/Transforms")]
	[SerializeField]
	private GameObject menuRoot;

	[Token(Token = "0x4000920")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform gridRoot;

	[Token(Token = "0x4000921")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform coinPouch;

	[Token(Token = "0x4000922")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GameObject lockpad;

	[Token(Token = "0x4000923")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Header("Buttons")]
	private PokeButton equipButton;

	[Token(Token = "0x4000924")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private PokeButton cancelButton;

	[Token(Token = "0x4000925")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private PokeButton[] slotButtons;

	[Token(Token = "0x4000926")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	[Header("Equip Particles")]
	private ParticleSystem equipTrailParticles;

	[Token(Token = "0x4000927")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private ParticleSystem equipParticles;

	[Token(Token = "0x4000928")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private GameObject equipTrailTarget;

	[Token(Token = "0x4000929")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private float equipTrailTargetHeightOffset;

	[Token(Token = "0x400092A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[SerializeField]
	private float potionTwinkleDelay;

	[Token(Token = "0x400092B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Header("Other")]
	[SerializeField]
	private Sprite consumableLockedIcon;

	[Token(Token = "0x400092C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private Sprite noConsumableSelectedIcon;

	[Token(Token = "0x400092D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private SpriteRenderer SelectedConsumableIcon;

	[Token(Token = "0x400092E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private TextMeshPro SelectedConsumableHeader;

	[Token(Token = "0x400092F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private TextMeshPro SelectedConsumableDescription;

	[Token(Token = "0x4000930")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private TextMeshPro SelectedConsumableCost;

	[Token(Token = "0x4000931")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private float buttonClickCooldown;

	[Token(Token = "0x4000932")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private Texture inactiveTexture;

	[Token(Token = "0x4000933")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private Texture activeTexture;

	[Token(Token = "0x4000934")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private ConsumableRegistry registry;

	[Token(Token = "0x4000935")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private ConsumableSpawner consumableSpawner;

	[Token(Token = "0x4000936")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private SaveManager saveManager;

	[Token(Token = "0x4000937")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private PreRoundUI preRoundUI;

	[Token(Token = "0x4000938")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private int selectedSlot;

	[Token(Token = "0x4000939")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private int[] loadoutItems;

	[Token(Token = "0x400093A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private bool[] loadoutPaidWithCoupon;

	[Token(Token = "0x400093B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private int[] consumableCost;

	[Token(Token = "0x400093C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private string[] consumableCostString;

	[Token(Token = "0x400093D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private GameObject[] equippedLabel;

	[Token(Token = "0x400093E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private TextMeshPro[] consumableStockCounter;

	[Token(Token = "0x400093F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private SpriteRenderer[] slotButtonIconRenders;

	[Token(Token = "0x4000940")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private MeshRenderer[] slotButtonRenders;

	[Token(Token = "0x4000941")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private SpriteRenderer[] consumableButtonIconRenderers;

	[Token(Token = "0x4000942")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private MeshRenderer[] consumableButtonRenderers;

	[Token(Token = "0x4000943")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private PokeButton[] consumableButtons;

	[Token(Token = "0x4000944")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private Dictionary<ConsumableType, int> consumablePlacement;

	[Token(Token = "0x4000945")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private int selectedConsumable;

	[Token(Token = "0x4000946")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
	private float buttonClickCooldownTimer;

	[Token(Token = "0x4000947")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private ParticleSystem[] equipParticleSystems;

	[Token(Token = "0x4000948")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private MaterialPropertyBlock propertyBlock;

	[Token(Token = "0x4000949")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private CoinCount coinCount;

	[Token(Token = "0x400094A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private Locale locale;

	[Token(Token = "0x1700012A")]
	private int CoinBalance
	{
		[Token(Token = "0x60008E8")]
		[Address(RVA = "0x91A914", Offset = "0x91A914", VA = "0x91A914")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700012B")]
	public Transform CoinPouchTransform
	{
		[Token(Token = "0x60008E9")]
		[Address(RVA = "0x91A930", Offset = "0x91A930", VA = "0x91A930")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60008EA")]
	[Address(RVA = "0x91A938", Offset = "0x91A938", VA = "0x91A938", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x60008EB")]
	[Address(RVA = "0x91AE80", Offset = "0x91AE80", VA = "0x91AE80")]
	private void Start()
	{
	}

	[Token(Token = "0x60008EC")]
	[Address(RVA = "0x91BAAC", Offset = "0x91BAAC", VA = "0x91BAAC")]
	public void OnLocalPlayerAssignedPosition(int position)
	{
	}

	[Token(Token = "0x60008ED")]
	[Address(RVA = "0x91C33C", Offset = "0x91C33C", VA = "0x91C33C")]
	private void Update()
	{
	}

	[Token(Token = "0x60008EE")]
	[Address(RVA = "0x91C38C", Offset = "0x91C38C", VA = "0x91C38C")]
	public void SetButtonsEnabled(bool isEnabled)
	{
	}

	[Token(Token = "0x60008EF")]
	[Address(RVA = "0x91C428", Offset = "0x91C428", VA = "0x91C428")]
	private void OnSelectConsumable(ConsumableData data)
	{
	}

	[Token(Token = "0x60008F0")]
	[Address(RVA = "0x91C640", Offset = "0x91C640", VA = "0x91C640")]
	private void ResetSelectedConsumable()
	{
	}

	[Token(Token = "0x60008F1")]
	[Address(RVA = "0x91BA50", Offset = "0x91BA50", VA = "0x91BA50")]
	private void ToggleMenuPage()
	{
	}

	[Token(Token = "0x60008F2")]
	[Address(RVA = "0x91C9E8", Offset = "0x91C9E8", VA = "0x91C9E8")]
	private void OnSlotClicked(int slotID)
	{
	}

	[Token(Token = "0x60008F3")]
	[Address(RVA = "0x91CA10", Offset = "0x91CA10", VA = "0x91CA10")]
	private void OnConsumableCountChanged(ConsumableType type, int count)
	{
	}

	[Token(Token = "0x60008F4")]
	[Address(RVA = "0x91B758", Offset = "0x91B758", VA = "0x91B758")]
	private void UpdateConsumableCouponCounter(ConsumableType type, int count)
	{
	}

	[Token(Token = "0x60008F5")]
	[Address(RVA = "0x91CA14", Offset = "0x91CA14", VA = "0x91CA14")]
	private void OnConsumableUnlocked(ConsumableType type, bool isUnlocked)
	{
	}

	[Token(Token = "0x60008F6")]
	[Address(RVA = "0x91CACC", Offset = "0x91CACC", VA = "0x91CACC")]
	public bool BuyPotion(int loadoutSlot)
	{
		return default(bool);
	}

	[Token(Token = "0x60008F7")]
	[Address(RVA = "0x91BB3C", Offset = "0x91BB3C", VA = "0x91BB3C")]
	private void AddToLoadout(int consumableType, int slot, int playerPositionIndex)
	{
	}

	[Token(Token = "0x60008F8")]
	[Address(RVA = "0x91CEEC", Offset = "0x91CEEC", VA = "0x91CEEC")]
	public void SetConsumableCount(ConsumableType type, int newCount)
	{
	}

	[Token(Token = "0x60008F9")]
	[Address(RVA = "0x91CF10", Offset = "0x91CF10", VA = "0x91CF10")]
	private void ClearLoadoutSlot(int slotIndex)
	{
	}

	[Token(Token = "0x60008FA")]
	[Address(RVA = "0x91D154", Offset = "0x91D154", VA = "0x91D154")]
	public void OnPotionSelectionActivated()
	{
	}

	[Token(Token = "0x60008FB")]
	[Address(RVA = "0x91D180", Offset = "0x91D180", VA = "0x91D180")]
	public void OnPreRoundUIActivated()
	{
	}

	[Token(Token = "0x60008FC")]
	[Address(RVA = "0x91C8D8", Offset = "0x91C8D8", VA = "0x91C8D8")]
	private void SetPotionButtonActive(int potionID, bool isActive)
	{
	}

	[Token(Token = "0x60008FD")]
	[Address(RVA = "0x91B978", Offset = "0x91B978", VA = "0x91B978")]
	private void SetSlotButtonActive(int slotID, bool isActive)
	{
	}

	[Token(Token = "0x60008FE")]
	[Address(RVA = "0x916CEC", Offset = "0x916CEC", VA = "0x916CEC")]
	public void OnPotionApplied(ConsumableType type)
	{
	}

	[Token(Token = "0x60008FF")]
	[Address(RVA = "0x91D1E8", Offset = "0x91D1E8", VA = "0x91D1E8")]
	public int[] GetLoadout()
	{
		return null;
	}

	[Token(Token = "0x6000900")]
	[Address(RVA = "0x91D1F0", Offset = "0x91D1F0", VA = "0x91D1F0")]
	public void WipeConsumableStock()
	{
	}

	[Token(Token = "0x6000901")]
	[Address(RVA = "0x91D27C", Offset = "0x91D27C", VA = "0x91D27C", Slot = "5")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x6000902")]
	[Address(RVA = "0x91D3DC", Offset = "0x91D3DC", VA = "0x91D3DC")]
	public ConsumableMenu()
	{
	}
}
[Token(Token = "0x2000163")]
public enum ConsumableType
{
	[Token(Token = "0x4000952")]
	InstantWash,
	[Token(Token = "0x4000953")]
	InstantGrill,
	[Token(Token = "0x4000954")]
	InstantSandwich,
	[Token(Token = "0x4000955")]
	MultiTimeStopper,
	[Token(Token = "0x4000956")]
	NeatnessFixer,
	[Token(Token = "0x4000957")]
	Tofu,
	[Token(Token = "0x4000958")]
	SuperSharpness,
	[Token(Token = "0x4000959")]
	BigTofu,
	[Token(Token = "0x400095A")]
	BigTimeStopper
}
[Serializable]
[Token(Token = "0x2000164")]
public struct ConsumableData
{
	[Token(Token = "0x400095B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public ConsumableType type;

	[Token(Token = "0x400095C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public GameObject prefab;

	[Token(Token = "0x400095D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string nameID;

	[Token(Token = "0x400095E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Sprite icon;

	[Token(Token = "0x400095F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject bubbleIcon;

	[Token(Token = "0x4000960")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject potionMeshPrefab;

	[Token(Token = "0x4000961")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int price;

	[Token(Token = "0x4000962")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public CookoutCustomHandPose grabPose;

	[Token(Token = "0x4000963")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector3 grabPosition;

	[Token(Token = "0x4000964")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public Vector3 grabRotation;

	[Token(Token = "0x4000965")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Color equipParticleColor;

	[Token(Token = "0x4000966")]
	private const string descriptionIDPostfix = "_desc";

	[Token(Token = "0x1700012C")]
	public string LocalizedNameSingular
	{
		[Token(Token = "0x600090C")]
		[Address(RVA = "0x91C77C", Offset = "0x91C77C", VA = "0x91C77C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700012D")]
	public string Description
	{
		[Token(Token = "0x600090D")]
		[Address(RVA = "0x91C830", Offset = "0x91C830", VA = "0x91C830")]
		get
		{
			return null;
		}
	}
}
[Token(Token = "0x2000165")]
public class ConsumableRegistry : SingleInstanceBehavior<ConsumableRegistry>
{
	[Token(Token = "0x4000967")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Consumable[] consumables;

	[Token(Token = "0x4000968")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<ConsumableType, ConsumableData> dataDict;

	[Token(Token = "0x600090E")]
	[Address(RVA = "0x91D8BC", Offset = "0x91D8BC", VA = "0x91D8BC", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x600090F")]
	[Address(RVA = "0x91B63C", Offset = "0x91B63C", VA = "0x91B63C")]
	public ConsumableData GetConsumableData(ConsumableType consumableType)
	{
		return default(ConsumableData);
	}

	[Token(Token = "0x6000910")]
	[Address(RVA = "0x91B86C", Offset = "0x91B86C", VA = "0x91B86C")]
	public Sprite GetIcon(ConsumableType consumableType)
	{
		return null;
	}

	[Token(Token = "0x6000911")]
	[Address(RVA = "0x91D04C", Offset = "0x91D04C", VA = "0x91D04C")]
	public Color GetParticleColor(ConsumableType consumableType)
	{
		return default(Color);
	}

	[Token(Token = "0x6000912")]
	[Address(RVA = "0x917474", Offset = "0x917474", VA = "0x917474")]
	public GameObject GetPrefab(ConsumableType consumableType)
	{
		return null;
	}

	[Token(Token = "0x6000913")]
	[Address(RVA = "0x91DA4C", Offset = "0x91DA4C", VA = "0x91DA4C")]
	public ConsumableRegistry()
	{
	}
}
[Token(Token = "0x2000166")]
public class UseConsumableHere : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4000969")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private ParticleSystem usePotionHereParticles;

	[Token(Token = "0x400096A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ConsumableType consumableToUse;

	[Token(Token = "0x400096B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private bool hasExtraRequirements;

	[Token(Token = "0x400096C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IConsumableTarget target;

	[Token(Token = "0x400096D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ConsumableBeingHeld consumableBeingHeld;

	[Token(Token = "0x400096E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private CookingRound cookingRound;

	[Token(Token = "0x400096F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private CookingGameState gameState;

	[Token(Token = "0x1700012E")]
	private bool ReactsToConsumable
	{
		[Token(Token = "0x6000914")]
		[Address(RVA = "0x91DB08", Offset = "0x91DB08", VA = "0x91DB08")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000915")]
	[Address(RVA = "0x91DBB8", Offset = "0x91DBB8", VA = "0x91DBB8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000916")]
	[Address(RVA = "0x91DC20", Offset = "0x91DC20", VA = "0x91DC20")]
	private void Start()
	{
	}

	[Token(Token = "0x6000917")]
	[Address(RVA = "0x91E27C", Offset = "0x91E27C", VA = "0x91E27C")]
	private void OnConsumableGrabbed(ConsumableType type)
	{
	}

	[Token(Token = "0x6000918")]
	[Address(RVA = "0x91E2E4", Offset = "0x91E2E4", VA = "0x91E2E4")]
	private void OnConsumableReleased(ConsumableType type)
	{
	}

	[Token(Token = "0x6000919")]
	[Address(RVA = "0x91E318", Offset = "0x91E318", VA = "0x91E318")]
	public void SetConsumableReacts(bool isActive)
	{
	}

	[Token(Token = "0x600091A")]
	[Address(RVA = "0x91E574", Offset = "0x91E574", VA = "0x91E574")]
	private void OnRoundEnd()
	{
	}

	[Token(Token = "0x600091B")]
	[Address(RVA = "0x91E594", Offset = "0x91E594", VA = "0x91E594")]
	private void OnRoundStart()
	{
	}

	[Token(Token = "0x600091C")]
	[Address(RVA = "0x91E5F4", Offset = "0x91E5F4", VA = "0x91E5F4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600091D")]
	[Address(RVA = "0x91E944", Offset = "0x91E944", VA = "0x91E944")]
	public UseConsumableHere()
	{
	}
}
[Token(Token = "0x2000167")]
public class CookingCup : SingleInstanceNetworkedBehavior<CookingCup>, IPunObservable
{
	[Token(Token = "0x2000168")]
	public delegate void CupStartHandler();

	[Token(Token = "0x2000169")]
	public delegate void CupStopHandler();

	[Token(Token = "0x200016A")]
	public enum State
	{
		[Token(Token = "0x4000985")]
		Inactive,
		[Token(Token = "0x4000986")]
		Running,
		[Token(Token = "0x4000987")]
		Failed,
		[Token(Token = "0x4000988")]
		DisplayFinalResults
	}

	[Token(Token = "0x200016B")]
	[CompilerGenerated]
	private sealed class <StartCup>d__58 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400098A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400098B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CookingCup <>4__this;

		[Token(Token = "0x400098C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int cupIndex;

		[Token(Token = "0x400098D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CupData <cupData>5__2;

		[Token(Token = "0x1700013A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600094E")]
			[Address(RVA = "0x920FE8", Offset = "0x920FE8", VA = "0x920FE8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000950")]
			[Address(RVA = "0x921030", Offset = "0x921030", VA = "0x921030", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600094B")]
		[Address(RVA = "0x91F2C8", Offset = "0x91F2C8", VA = "0x91F2C8")]
		[DebuggerHidden]
		public <StartCup>d__58(int <>1__state)
		{
		}

		[Token(Token = "0x600094C")]
		[Address(RVA = "0x920D5C", Offset = "0x920D5C", VA = "0x920D5C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600094D")]
		[Address(RVA = "0x920D60", Offset = "0x920D60", VA = "0x920D60", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600094F")]
		[Address(RVA = "0x920FF0", Offset = "0x920FF0", VA = "0x920FF0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000973")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private CupList cupList;

	[Token(Token = "0x4000979")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int[] cupStars;

	[Token(Token = "0x400097A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool royalFail;

	[Token(Token = "0x400097B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private CookingRound cookingRound;

	[Token(Token = "0x400097C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private MapProgression mapProgression;

	[Token(Token = "0x400097D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private EnvironmentLoader environmentLoader;

	[Token(Token = "0x400097E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private RewardBubbleSpawner rewardBubbleSpawner;

	[Token(Token = "0x400097F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private CookingGameState gameState;

	[Token(Token = "0x4000980")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private CookingGame cookingGame;

	[Token(Token = "0x4000981")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private StarGoalsHandler goalsHandler;

	[Token(Token = "0x4000982")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private RoundResultDisplayer roundResultDisplayer;

	[Token(Token = "0x4000983")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private int playerCountAtCupStart;

	[Token(Token = "0x1700012F")]
	public CupData[] Cups
	{
		[Token(Token = "0x600091E")]
		[Address(RVA = "0x91E94C", Offset = "0x91E94C", VA = "0x91E94C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600091F")]
		[Address(RVA = "0x91E954", Offset = "0x91E954", VA = "0x91E954")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000130")]
	public CupData CurrentCup
	{
		[Token(Token = "0x6000920")]
		[Address(RVA = "0x91E95C", Offset = "0x91E95C", VA = "0x91E95C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000131")]
	public int CupID
	{
		[Token(Token = "0x6000925")]
		[Address(RVA = "0x91EC00", Offset = "0x91EC00", VA = "0x91EC00")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000926")]
		[Address(RVA = "0x91EC08", Offset = "0x91EC08", VA = "0x91EC08")]
		[CompilerGenerated]
		internal set
		{
		}
	}

	[Token(Token = "0x17000132")]
	public State CupState
	{
		[Token(Token = "0x6000927")]
		[Address(RVA = "0x91EC10", Offset = "0x91EC10", VA = "0x91EC10")]
		[CompilerGenerated]
		get
		{
			return default(State);
		}
		[Token(Token = "0x6000928")]
		[Address(RVA = "0x91EC18", Offset = "0x91EC18", VA = "0x91EC18")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000133")]
	public int CurrentRound
	{
		[Token(Token = "0x6000929")]
		[Address(RVA = "0x91EC20", Offset = "0x91EC20", VA = "0x91EC20")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600092A")]
		[Address(RVA = "0x91EC28", Offset = "0x91EC28", VA = "0x91EC28")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000134")]
	public int NumberOfRounds
	{
		[Token(Token = "0x600092B")]
		[Address(RVA = "0x91EC30", Offset = "0x91EC30", VA = "0x91EC30")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600092C")]
		[Address(RVA = "0x91EC38", Offset = "0x91EC38", VA = "0x91EC38")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000135")]
	public int TotalCupStars
	{
		[Token(Token = "0x600092D")]
		[Address(RVA = "0x91EC40", Offset = "0x91EC40", VA = "0x91EC40")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000136")]
	public MapProgression.Rank CupReward
	{
		[Token(Token = "0x600092E")]
		[Address(RVA = "0x91EC4C", Offset = "0x91EC4C", VA = "0x91EC4C")]
		[CompilerGenerated]
		get
		{
			return default(MapProgression.Rank);
		}
		[Token(Token = "0x600092F")]
		[Address(RVA = "0x91EC54", Offset = "0x91EC54", VA = "0x91EC54")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000137")]
	public bool IsRunning
	{
		[Token(Token = "0x6000930")]
		[Address(RVA = "0x91EC5C", Offset = "0x91EC5C", VA = "0x91EC5C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000138")]
	public bool IsComplete
	{
		[Token(Token = "0x6000931")]
		[Address(RVA = "0x91EC6C", Offset = "0x91EC6C", VA = "0x91EC6C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000139")]
	public bool CurrentCupIsFinalLevel
	{
		[Token(Token = "0x6000932")]
		[Address(RVA = "0x91EC7C", Offset = "0x91EC7C", VA = "0x91EC7C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1400000A")]
	public event CupStartHandler CupStart
	{
		[Token(Token = "0x6000921")]
		[Address(RVA = "0x91E990", Offset = "0x91E990", VA = "0x91E990")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000922")]
		[Address(RVA = "0x91EA2C", Offset = "0x91EA2C", VA = "0x91EA2C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000B")]
	public event CupStopHandler CupStop
	{
		[Token(Token = "0x6000923")]
		[Address(RVA = "0x91EAC8", Offset = "0x91EAC8", VA = "0x91EAC8")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000924")]
		[Address(RVA = "0x91EB64", Offset = "0x91EB64", VA = "0x91EB64")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000933")]
	[Address(RVA = "0x91EC98", Offset = "0x91EC98", VA = "0x91EC98", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000934")]
	[Address(RVA = "0x91ED20", Offset = "0x91ED20", VA = "0x91ED20")]
	private void Start()
	{
	}

	[Token(Token = "0x6000935")]
	[Address(RVA = "0x91F22C", Offset = "0x91F22C", VA = "0x91F22C")]
	public bool IsValidCup(int cupIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x6000936")]
	[Address(RVA = "0x91F250", Offset = "0x91F250", VA = "0x91F250")]
	[IteratorStateMachine(typeof(<StartCup>d__58))]
	public IEnumerator StartCup(int cupIndex)
	{
		return null;
	}

	[Token(Token = "0x6000937")]
	[Address(RVA = "0x91F2F0", Offset = "0x91F2F0", VA = "0x91F2F0")]
	public void FailCup(bool royalFail = false)
	{
	}

	[Token(Token = "0x6000938")]
	[Address(RVA = "0x91F358", Offset = "0x91F358", VA = "0x91F358")]
	public GameState OnRoundEnded()
	{
		return default(GameState);
	}

	[Token(Token = "0x6000939")]
	[Address(RVA = "0x91F6E4", Offset = "0x91F6E4", VA = "0x91F6E4")]
	public int GetRoundCoinReward(int cupID, int starsEarned)
	{
		return default(int);
	}

	[Token(Token = "0x600093A")]
	[Address(RVA = "0x91F720", Offset = "0x91F720", VA = "0x91F720")]
	public void PlayNextRound()
	{
	}

	[Token(Token = "0x600093B")]
	[Address(RVA = "0x91F7A0", Offset = "0x91F7A0", VA = "0x91F7A0")]
	public void RetryRound()
	{
	}

	[Token(Token = "0x600093C")]
	[Address(RVA = "0x91F730", Offset = "0x91F730", VA = "0x91F730")]
	private void PlayRound()
	{
	}

	[Token(Token = "0x600093D")]
	[Address(RVA = "0x92016C", Offset = "0x92016C", VA = "0x92016C", Slot = "6")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x600093E")]
	[Address(RVA = "0x9205AC", Offset = "0x9205AC", VA = "0x9205AC")]
	public void OnCupEnd(bool failed)
	{
	}

	[Token(Token = "0x600093F")]
	[Address(RVA = "0x9208A0", Offset = "0x9208A0", VA = "0x9208A0")]
	[PunRPC]
	private void SpawnPrivateRewardsRPC(int cupID, int starsEarned)
	{
	}

	[Token(Token = "0x6000940")]
	[Address(RVA = "0x920A94", Offset = "0x920A94", VA = "0x920A94")]
	public void DebugForceEndCup(int starsEarnedPerLevel)
	{
	}

	[Token(Token = "0x6000941")]
	[Address(RVA = "0x920AEC", Offset = "0x920AEC", VA = "0x920AEC")]
	public void DebugSetCup(int cupID, int[] cupStars)
	{
	}

	[Token(Token = "0x6000942")]
	[Address(RVA = "0x920AF8", Offset = "0x920AF8", VA = "0x920AF8")]
	public CookingCup()
	{
	}
}
[Token(Token = "0x200016C")]
public class CookingGame : SingleInstanceNetworkedBehavior<CookingGame>
{
	[Token(Token = "0x400098E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Sink[] sinks;

	[Token(Token = "0x400098F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public FryingArea[] grills;

	[Token(Token = "0x4000990")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public FireExtinguisher[] fireExtinguishers;

	[Token(Token = "0x4000991")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int endlessUnlockedByCup;

	[Token(Token = "0x4000992")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private int firstGrillCup;

	[Token(Token = "0x4000993")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private int firstSinkCup;

	[Token(Token = "0x4000994")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Transform lightProbeAnchor;

	[Token(Token = "0x4000995")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private CookingGameState gameStateManager;

	[Token(Token = "0x4000996")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private CookingRound cookingRound;

	[Token(Token = "0x4000997")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private CookingCup cookingCup;

	[Token(Token = "0x4000998")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private LifeCounter lifeCounter;

	[Token(Token = "0x4000999")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private EndlessMode endlessMode;

	[Token(Token = "0x400099A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private CreativeMode creativeMode;

	[Token(Token = "0x400099B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private StarGoalsHandler starGoalsHandler;

	[Token(Token = "0x400099C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private TutorialMode tutorialMode;

	[Token(Token = "0x400099D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private TipHandler tipHandler;

	[Token(Token = "0x1700013C")]
	public Transform GetLightProbe
	{
		[Token(Token = "0x6000951")]
		[Address(RVA = "0x921038", Offset = "0x921038", VA = "0x921038")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000952")]
	[Address(RVA = "0x921040", Offset = "0x921040", VA = "0x921040", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000953")]
	[Address(RVA = "0x9211B8", Offset = "0x9211B8", VA = "0x9211B8")]
	public void Start()
	{
	}

	[Token(Token = "0x6000954")]
	[Address(RVA = "0x921920", Offset = "0x921920", VA = "0x921920")]
	public Transform GetLightProbeAnchor()
	{
		return null;
	}

	[Token(Token = "0x6000955")]
	[Address(RVA = "0x921928", Offset = "0x921928", VA = "0x921928")]
	public void OnLocalPlayerAssignedPosition()
	{
	}

	[Token(Token = "0x6000956")]
	[Address(RVA = "0x9219F4", Offset = "0x9219F4", VA = "0x9219F4")]
	[PunRPC]
	private void SelectCupRPC(int cupIndex)
	{
	}

	[Token(Token = "0x6000957")]
	[Address(RVA = "0x920FCC", Offset = "0x920FCC", VA = "0x920FCC")]
	public void OnStartCupEnvironmentLoadComplete(int cupIndex)
	{
	}

	[Token(Token = "0x6000958")]
	[Address(RVA = "0x921B64", Offset = "0x921B64", VA = "0x921B64")]
	[PunRPC]
	private void StartEndlessModeRPC()
	{
	}

	[Token(Token = "0x6000959")]
	[Address(RVA = "0x921BC0", Offset = "0x921BC0", VA = "0x921BC0")]
	[PunRPC]
	private void StartCreativeModeRPC()
	{
	}

	[Token(Token = "0x600095A")]
	[Address(RVA = "0x92199C", Offset = "0x92199C", VA = "0x92199C")]
	public void StartTutorialMode(bool launchOnStartup = false)
	{
	}

	[Token(Token = "0x600095B")]
	[Address(RVA = "0x921C80", Offset = "0x921C80", VA = "0x921C80")]
	public void OnPlateHandedIn(int orderID, bool wasPerfect, int customerType, bool wasClean)
	{
	}

	[Token(Token = "0x600095C")]
	[Address(RVA = "0x921E78", Offset = "0x921E78", VA = "0x921E78")]
	[PunRPC]
	private void OnPlateHandedInRPC(int orderID, bool wasPerfect, int customerTypeInt, bool wasClean)
	{
	}

	[Token(Token = "0x600095D")]
	[Address(RVA = "0x922220", Offset = "0x922220", VA = "0x922220")]
	public void OnPlateDeliveryComplete(int orderID, CustomerType customerType)
	{
	}

	[Token(Token = "0x600095E")]
	[Address(RVA = "0x92236C", Offset = "0x92236C", VA = "0x92236C")]
	[PunRPC]
	private void PlateDeliveryCompleteRPC(int orderID, int customerType)
	{
	}

	[Token(Token = "0x600095F")]
	[Address(RVA = "0x9224A8", Offset = "0x9224A8", VA = "0x9224A8")]
	public void OnPlateTimedOut(Plate plate, bool wasClean)
	{
	}

	[Token(Token = "0x6000960")]
	[Address(RVA = "0x92265C", Offset = "0x92265C", VA = "0x92265C")]
	[PunRPC]
	private void OnPlateTimedOutRPC(int orderID, int customerTypeInt, bool wasClean)
	{
	}

	[Token(Token = "0x6000961")]
	[Address(RVA = "0x9229E0", Offset = "0x9229E0", VA = "0x9229E0")]
	public void OnPlateConsumeStarted(Plate plate)
	{
	}

	[Token(Token = "0x6000962")]
	[Address(RVA = "0x922B6C", Offset = "0x922B6C", VA = "0x922B6C")]
	public void OnAllActiveStarGoalsFailed()
	{
	}

	[Token(Token = "0x6000963")]
	[Address(RVA = "0x922B9C", Offset = "0x922B9C", VA = "0x922B9C")]
	public void OnRoundEnded()
	{
	}

	[Token(Token = "0x6000964")]
	[Address(RVA = "0x923150", Offset = "0x923150", VA = "0x923150")]
	public void ReturnToCupSelect()
	{
	}

	[Token(Token = "0x6000965")]
	[Address(RVA = "0x92316C", Offset = "0x92316C", VA = "0x92316C")]
	public void OnMidRoundResultsDisplayed(int cupID, int starsEarned, int levelIndex)
	{
	}

	[Token(Token = "0x6000966")]
	[Address(RVA = "0x92339C", Offset = "0x92339C", VA = "0x92339C")]
	public void OnFinalCupResultsDisplayed(int cupID, int[] cupStars)
	{
	}

	[Token(Token = "0x6000967")]
	[Address(RVA = "0x923480", Offset = "0x923480", VA = "0x923480")]
	public void OnTownCelebrationComplete()
	{
	}

	[Token(Token = "0x6000968")]
	[Address(RVA = "0x92350C", Offset = "0x92350C", VA = "0x92350C")]
	public void LeaveTownCompleteCelebration()
	{
	}

	[Token(Token = "0x6000969")]
	[Address(RVA = "0x921740", Offset = "0x921740", VA = "0x921740")]
	public void SetLockedTools(bool lockedGrills, bool lockedSinks)
	{
	}

	[Token(Token = "0x600096A")]
	[Address(RVA = "0x923590", Offset = "0x923590", VA = "0x923590")]
	public CookingGame()
	{
	}
}
[Token(Token = "0x200016D")]
public enum GameState
{
	[Token(Token = "0x400099F")]
	GameModeSelection,
	[Token(Token = "0x40009A0")]
	CupRound,
	[Token(Token = "0x40009A1")]
	MidCupResults,
	[Token(Token = "0x40009A2")]
	FailedCupResults,
	[Token(Token = "0x40009A3")]
	PostCupResults,
	[Token(Token = "0x40009A4")]
	EndlessRound,
	[Token(Token = "0x40009A5")]
	PostEndlessRound,
	[Token(Token = "0x40009A6")]
	TutorialRound,
	[Token(Token = "0x40009A7")]
	FinalRound,
	[Token(Token = "0x40009A8")]
	CreativeRound,
	[Token(Token = "0x40009A9")]
	PostCreativeRound
}
[Token(Token = "0x200016E")]
public class CookingGameState : SingleInstanceNetworkedBehavior<CookingGameState>, IPunObservable
{
	[Token(Token = "0x200016F")]
	public delegate void GameStateChangedHandler(GameState oldState, GameState newState);

	[Token(Token = "0x1700013D")]
	public GameState State
	{
		[Token(Token = "0x600096D")]
		[Address(RVA = "0x923604", Offset = "0x923604", VA = "0x923604")]
		[CompilerGenerated]
		get
		{
			return default(GameState);
		}
		[Token(Token = "0x600096E")]
		[Address(RVA = "0x92360C", Offset = "0x92360C", VA = "0x92360C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1400000C")]
	public event GameStateChangedHandler OnGameStateChanged
	{
		[Token(Token = "0x600096B")]
		[Address(RVA = "0x919B24", Offset = "0x919B24", VA = "0x919B24")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600096C")]
		[Address(RVA = "0x91A2C0", Offset = "0x91A2C0", VA = "0x91A2C0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x600096F")]
	[Address(RVA = "0x923614", Offset = "0x923614", VA = "0x923614")]
	public static bool IsGameRound(GameState gameState)
	{
		return default(bool);
	}

	[Token(Token = "0x6000970")]
	[Address(RVA = "0x91F800", Offset = "0x91F800", VA = "0x91F800")]
	public void EnterState(GameState newState)
	{
	}

	[Token(Token = "0x6000971")]
	[Address(RVA = "0x9237B8", Offset = "0x9237B8", VA = "0x9237B8", Slot = "6")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000972")]
	[Address(RVA = "0x923648", Offset = "0x923648", VA = "0x923648")]
	private void OnNewGameState(GameState oldState)
	{
	}

	[Token(Token = "0x6000973")]
	[Address(RVA = "0x923894", Offset = "0x923894", VA = "0x923894")]
	public void DebugSetState(GameState state)
	{
	}

	[Token(Token = "0x6000974")]
	[Address(RVA = "0x9239A0", Offset = "0x9239A0", VA = "0x9239A0")]
	[PunRPC]
	private void DebugSetStateRPC(int state)
	{
	}

	[Token(Token = "0x6000975")]
	[Address(RVA = "0x9239A4", Offset = "0x9239A4", VA = "0x9239A4")]
	public CookingGameState()
	{
	}
}
[Token(Token = "0x2000170")]
public class CookingRound : SingleInstanceNetworkedBehavior<CookingRound>, IPunObservable
{
	[Token(Token = "0x2000171")]
	public delegate void RoundStartHandler();

	[Token(Token = "0x2000172")]
	public delegate void RoundStopHandler();

	[Token(Token = "0x2000173")]
	public delegate void RoundCountdownHandler();

	[Token(Token = "0x2000174")]
	private enum State
	{
		[Token(Token = "0x40009D2")]
		Inactive,
		[Token(Token = "0x40009D3")]
		ReadyVote,
		[Token(Token = "0x40009D4")]
		Countdown,
		[Token(Token = "0x40009D5")]
		Running,
		[Token(Token = "0x40009D6")]
		Failed,
		[Token(Token = "0x40009D7")]
		Complete,
		[Token(Token = "0x40009D8")]
		RetryRoundAborted,
		[Token(Token = "0x40009D9")]
		RoundAborted
	}

	[Token(Token = "0x40009AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private LevelList levelList;

	[Token(Token = "0x40009B7")]
	public const float roundCountdownStartAt = 5f;

	[Token(Token = "0x40009B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float spawnDelay;

	[Token(Token = "0x40009B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool pauseSpawn;

	[Token(Token = "0x40009BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	public bool abortedLevel;

	[Token(Token = "0x40009BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private State state;

	[Token(Token = "0x40009BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private int numPlatesSpawned;

	[Token(Token = "0x40009BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private List<Recipe> recipeList;

	[Token(Token = "0x40009BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private List<int> platesInPlay;

	[Token(Token = "0x40009BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float spawnDelayTimer;

	[Token(Token = "0x40009C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float waitingForSlotTimer;

	[Token(Token = "0x40009C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float waitingForPlateTimer;

	[Token(Token = "0x40009C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private ConveyorBelt conveyorBelt;

	[Token(Token = "0x40009C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private CookingNetworkManager cookingNetworkManager;

	[Token(Token = "0x40009C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private CookingGameState cookingGameState;

	[Token(Token = "0x40009C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private EndlessMode endlessMode;

	[Token(Token = "0x40009C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private CookingRecipeFactory recipeFactory;

	[Token(Token = "0x40009C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private StarGoalsHandler starGoalsHandler;

	[Token(Token = "0x40009C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private TableCenterUI tableCenterUI;

	[Token(Token = "0x40009C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Fridge[] fridges;

	[Token(Token = "0x40009CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private SaveManager saveManager;

	[Token(Token = "0x40009CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private TutorialModePlateHandler tutorialModePlateHandler;

	[Token(Token = "0x40009CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private CreativeModeCustomers creativeModeCustomers;

	[Token(Token = "0x40009CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private WorkSpaceMenu workSpaceMenu;

	[Token(Token = "0x40009CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private FinalLevelHandler finalLevelHandler;

	[Token(Token = "0x40009CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private TimeSlowdownHandler timeSlowdown;

	[Token(Token = "0x40009D0")]
	private const float waitTimeWarningLimit = 20f;

	[Token(Token = "0x1700013E")]
	public LevelData[] Levels
	{
		[Token(Token = "0x6000980")]
		[Address(RVA = "0x923C00", Offset = "0x923C00", VA = "0x923C00")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000981")]
		[Address(RVA = "0x923C08", Offset = "0x923C08", VA = "0x923C08")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700013F")]
	public int LevelIndex
	{
		[Token(Token = "0x6000982")]
		[Address(RVA = "0x923C10", Offset = "0x923C10", VA = "0x923C10")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000983")]
		[Address(RVA = "0x923C18", Offset = "0x923C18", VA = "0x923C18")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000140")]
	public int PendingPlateSpawnRequests
	{
		[Token(Token = "0x6000984")]
		[Address(RVA = "0x923C20", Offset = "0x923C20", VA = "0x923C20")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000985")]
		[Address(RVA = "0x923C28", Offset = "0x923C28", VA = "0x923C28")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000141")]
	public int NumPlatesServedOrFailed
	{
		[Token(Token = "0x6000986")]
		[Address(RVA = "0x923C30", Offset = "0x923C30", VA = "0x923C30")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000987")]
		[Address(RVA = "0x923C38", Offset = "0x923C38", VA = "0x923C38")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000142")]
	public int NumPlatesFailed
	{
		[Token(Token = "0x6000988")]
		[Address(RVA = "0x923C40", Offset = "0x923C40", VA = "0x923C40")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000989")]
		[Address(RVA = "0x923C48", Offset = "0x923C48", VA = "0x923C48")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000143")]
	public int NumPlatesServed
	{
		[Token(Token = "0x600098A")]
		[Address(RVA = "0x923C50", Offset = "0x923C50", VA = "0x923C50")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000144")]
	public int NumPlatesRequired
	{
		[Token(Token = "0x600098B")]
		[Address(RVA = "0x923C5C", Offset = "0x923C5C", VA = "0x923C5C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000145")]
	public bool ReadyVoteActive
	{
		[Token(Token = "0x600098C")]
		[Address(RVA = "0x923CC0", Offset = "0x923CC0", VA = "0x923CC0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000146")]
	public bool IsRunning
	{
		[Token(Token = "0x600098D")]
		[Address(RVA = "0x918800", Offset = "0x918800", VA = "0x918800")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000147")]
	public bool IsCountingDown
	{
		[Token(Token = "0x600098E")]
		[Address(RVA = "0x923CD0", Offset = "0x923CD0", VA = "0x923CD0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000148")]
	public bool HasDirtyPlates
	{
		[Token(Token = "0x600098F")]
		[Address(RVA = "0x923CE0", Offset = "0x923CE0", VA = "0x923CE0")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000990")]
		[Address(RVA = "0x923CE8", Offset = "0x923CE8", VA = "0x923CE8")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000149")]
	public LevelData CurrentLevel
	{
		[Token(Token = "0x6000991")]
		[Address(RVA = "0x923CF4", Offset = "0x923CF4", VA = "0x923CF4")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700014A")]
	public float CountdownElapsedTime
	{
		[Token(Token = "0x6000992")]
		[Address(RVA = "0x923D28", Offset = "0x923D28", VA = "0x923D28")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000993")]
		[Address(RVA = "0x923D30", Offset = "0x923D30", VA = "0x923D30")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1400000D")]
	public event RoundStartHandler RoundStart
	{
		[Token(Token = "0x600097A")]
		[Address(RVA = "0x91E088", Offset = "0x91E088", VA = "0x91E088")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600097B")]
		[Address(RVA = "0x91E80C", Offset = "0x91E80C", VA = "0x91E80C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000E")]
	public event RoundStopHandler RoundStop
	{
		[Token(Token = "0x600097C")]
		[Address(RVA = "0x91E1E0", Offset = "0x91E1E0", VA = "0x91E1E0")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600097D")]
		[Address(RVA = "0x91E8A8", Offset = "0x91E8A8", VA = "0x91E8A8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000F")]
	public event RoundCountdownHandler CountdownStarted
	{
		[Token(Token = "0x600097E")]
		[Address(RVA = "0x923AC8", Offset = "0x923AC8", VA = "0x923AC8")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600097F")]
		[Address(RVA = "0x923B64", Offset = "0x923B64", VA = "0x923B64")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000994")]
	[Address(RVA = "0x923D38", Offset = "0x923D38", VA = "0x923D38")]
	private void Start()
	{
	}

	[Token(Token = "0x6000995")]
	[Address(RVA = "0x92477C", Offset = "0x92477C", VA = "0x92477C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000996")]
	[Address(RVA = "0x925474", Offset = "0x925474", VA = "0x925474")]
	public bool IsValidLevel(int level)
	{
		return default(bool);
	}

	[Token(Token = "0x6000997")]
	[Address(RVA = "0x91F924", Offset = "0x91F924", VA = "0x91F924")]
	public void StartRound(string cupNameID, int levelIndex)
	{
	}

	[Token(Token = "0x6000998")]
	[Address(RVA = "0x9257D4", Offset = "0x9257D4", VA = "0x9257D4")]
	public void AllPlayersReadyForRound()
	{
	}

	[Token(Token = "0x6000999")]
	[Address(RVA = "0x925B48", Offset = "0x925B48", VA = "0x925B48")]
	private void StartCountdown()
	{
	}

	[Token(Token = "0x600099A")]
	[Address(RVA = "0x924F54", Offset = "0x924F54", VA = "0x924F54")]
	private void SpawnPlate()
	{
	}

	[Token(Token = "0x600099B")]
	[Address(RVA = "0x921F64", Offset = "0x921F64", VA = "0x921F64")]
	public bool TryRemovingPlateFromPlay(int orderID, bool timedOut)
	{
		return default(bool);
	}

	[Token(Token = "0x600099C")]
	[Address(RVA = "0x92241C", Offset = "0x92241C", VA = "0x92241C")]
	public void OnPlateDeliveryComplete(int orderID, CustomerType customerType)
	{
	}

	[Token(Token = "0x600099D")]
	[Address(RVA = "0x925498", Offset = "0x925498", VA = "0x925498")]
	private void StartTutorial()
	{
	}

	[Token(Token = "0x600099E")]
	[Address(RVA = "0x924DE0", Offset = "0x924DE0", VA = "0x924DE0")]
	private void OnRoundCountdownComplete()
	{
	}

	[Token(Token = "0x600099F")]
	[Address(RVA = "0x91F33C", Offset = "0x91F33C", VA = "0x91F33C")]
	public void FailRound()
	{
	}

	[Token(Token = "0x60009A0")]
	[Address(RVA = "0x925780", Offset = "0x925780", VA = "0x925780")]
	private void UpdateState(State newState)
	{
	}

	[Token(Token = "0x60009A1")]
	[Address(RVA = "0x925FC4", Offset = "0x925FC4", VA = "0x925FC4")]
	private void OnReadyVoteStarted()
	{
	}

	[Token(Token = "0x60009A2")]
	[Address(RVA = "0x9261B0", Offset = "0x9261B0", VA = "0x9261B0")]
	private void OnRoundCountdown()
	{
	}

	[Token(Token = "0x60009A3")]
	[Address(RVA = "0x9262C4", Offset = "0x9262C4", VA = "0x9262C4")]
	private void OnNewRoundStarted()
	{
	}

	[Token(Token = "0x60009A4")]
	[Address(RVA = "0x9263C0", Offset = "0x9263C0", VA = "0x9263C0")]
	private void OnRoundFailed()
	{
	}

	[Token(Token = "0x60009A5")]
	[Address(RVA = "0x926434", Offset = "0x926434", VA = "0x926434")]
	private void OnRoundComplete()
	{
	}

	[Token(Token = "0x60009A6")]
	[Address(RVA = "0x9264A8", Offset = "0x9264A8", VA = "0x9264A8")]
	private void OnRoundAborted()
	{
	}

	[Token(Token = "0x60009A7")]
	[Address(RVA = "0x926554", Offset = "0x926554", VA = "0x926554")]
	private void OnRoundEnded()
	{
	}

	[Token(Token = "0x60009A8")]
	[Address(RVA = "0x926994", Offset = "0x926994", VA = "0x926994", Slot = "6")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60009A9")]
	[Address(RVA = "0x927100", Offset = "0x927100", VA = "0x927100")]
	public void EndTutorialRound()
	{
	}

	[Token(Token = "0x60009AA")]
	[Address(RVA = "0x926524", Offset = "0x926524", VA = "0x926524")]
	private void OnRoundRetryAborted()
	{
	}

	[Token(Token = "0x60009AB")]
	[Address(RVA = "0x92711C", Offset = "0x92711C", VA = "0x92711C")]
	public void TutorialModeSetPendingPlateCount(int count)
	{
	}

	[Token(Token = "0x60009AC")]
	[Address(RVA = "0x927124", Offset = "0x927124", VA = "0x927124")]
	public void AbortRetryRound()
	{
	}

	[Token(Token = "0x60009AD")]
	[Address(RVA = "0x927140", Offset = "0x927140", VA = "0x927140")]
	public void ForceAddPlateSpawnRequest()
	{
	}

	[Token(Token = "0x60009AE")]
	[Address(RVA = "0x925F7C", Offset = "0x925F7C", VA = "0x925F7C")]
	public int MaxCustomersOnScreen()
	{
		return default(int);
	}

	[Token(Token = "0x60009AF")]
	[Address(RVA = "0x927150", Offset = "0x927150", VA = "0x927150")]
	public void AbortCupRound()
	{
	}

	[Token(Token = "0x60009B0")]
	[Address(RVA = "0x92716C", Offset = "0x92716C", VA = "0x92716C")]
	public void AbortTutorialRound()
	{
	}

	[Token(Token = "0x60009B1")]
	[Address(RVA = "0x927188", Offset = "0x927188", VA = "0x927188")]
	public void DebugForceRoundComplete()
	{
	}

	[Token(Token = "0x60009B2")]
	[Address(RVA = "0x9271A4", Offset = "0x9271A4", VA = "0x9271A4")]
	public CookingRound()
	{
	}
}
[Token(Token = "0x2000175")]
public class CreativeMode : SingleInstanceNetworkedBehavior<CreativeMode>, IPunObservable
{
	[Token(Token = "0x2000176")]
	[CompilerGenerated]
	private sealed class <StartCreativeMode>d__24 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40009E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40009E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40009EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CreativeMode <>4__this;

		[Token(Token = "0x1700014E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009DA")]
			[Address(RVA = "0x9285D0", Offset = "0x9285D0", VA = "0x9285D0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009DC")]
			[Address(RVA = "0x928618", Offset = "0x928618", VA = "0x928618", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0x927A74", Offset = "0x927A74", VA = "0x927A74")]
		[DebuggerHidden]
		public <StartCreativeMode>d__24(int <>1__state)
		{
		}

		[Token(Token = "0x60009D8")]
		[Address(RVA = "0x928464", Offset = "0x928464", VA = "0x928464", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009D9")]
		[Address(RVA = "0x928468", Offset = "0x928468", VA = "0x928468", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009DB")]
		[Address(RVA = "0x9285D8", Offset = "0x9285D8", VA = "0x9285D8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40009DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private LevelData creativeLevelData;

	[Token(Token = "0x40009DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private int customersToServe;

	[Token(Token = "0x40009DE")]
	private const float delayBeforeBreak = 1f;

	[Token(Token = "0x40009DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float delayBeforeBreakTimer;

	[Token(Token = "0x40009E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int photosSavedDuringRound;

	[Token(Token = "0x40009E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public int photosSharedDuringRound;

	[Token(Token = "0x40009E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private EnvironmentLoader environmentLoader;

	[Token(Token = "0x40009E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private CookingRound cookingRound;

	[Token(Token = "0x40009E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private MapVoteCounter mapVoteCounter;

	[Token(Token = "0x40009E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private CreativeModeContinuePrompt continuePrompt;

	[Token(Token = "0x40009E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private CreativeModeCustomers creativeModeCustomers;

	[Token(Token = "0x40009E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private HandInColliderEnabler handInColliderEnabler;

	[Token(Token = "0x1700014B")]
	public int CustomersToServe
	{
		[Token(Token = "0x60009BF")]
		[Address(RVA = "0x92742C", Offset = "0x92742C", VA = "0x92742C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700014C")]
	public int NewRecipesFound
	{
		[Token(Token = "0x60009C0")]
		[Address(RVA = "0x927434", Offset = "0x927434", VA = "0x927434")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60009C1")]
		[Address(RVA = "0x92743C", Offset = "0x92743C", VA = "0x92743C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700014D")]
	public int CustomersServed
	{
		[Token(Token = "0x60009C2")]
		[Address(RVA = "0x927444", Offset = "0x927444", VA = "0x927444")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60009C3")]
		[Address(RVA = "0x92744C", Offset = "0x92744C", VA = "0x92744C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60009C4")]
	[Address(RVA = "0x927454", Offset = "0x927454", VA = "0x927454")]
	private void Start()
	{
	}

	[Token(Token = "0x60009C5")]
	[Address(RVA = "0x927914", Offset = "0x927914", VA = "0x927914")]
	private void Update()
	{
	}

	[Token(Token = "0x60009C6")]
	[Address(RVA = "0x921C18", Offset = "0x921C18", VA = "0x921C18")]
	[IteratorStateMachine(typeof(<StartCreativeMode>d__24))]
	public IEnumerator StartCreativeMode()
	{
		return null;
	}

	[Token(Token = "0x60009C7")]
	[Address(RVA = "0x927A9C", Offset = "0x927A9C", VA = "0x927A9C")]
	[PunRPC]
	private void OnCreativeModeStartedRPC()
	{
	}

	[Token(Token = "0x60009C8")]
	[Address(RVA = "0x923078", Offset = "0x923078", VA = "0x923078")]
	public void OnRoundEnded()
	{
	}

	[Token(Token = "0x60009C9")]
	[Address(RVA = "0x927BA8", Offset = "0x927BA8", VA = "0x927BA8")]
	[PunRPC]
	private void OnCreativeModeEndRPC()
	{
	}

	[Token(Token = "0x60009CA")]
	[Address(RVA = "0x927DD8", Offset = "0x927DD8", VA = "0x927DD8")]
	public void AbortCreativeMode()
	{
	}

	[Token(Token = "0x60009CB")]
	[Address(RVA = "0x922A14", Offset = "0x922A14", VA = "0x922A14")]
	public void OnPlateConsumeStarted(Plate plate)
	{
	}

	[Token(Token = "0x60009CC")]
	[Address(RVA = "0x927AAC", Offset = "0x927AAC", VA = "0x927AAC")]
	private void EndPhotoBreak()
	{
	}

	[Token(Token = "0x60009CD")]
	[Address(RVA = "0x927E20", Offset = "0x927E20", VA = "0x927E20")]
	[PunRPC]
	private void ShowPhotoGallery()
	{
	}

	[Token(Token = "0x60009CE")]
	[Address(RVA = "0x927EEC", Offset = "0x927EEC", VA = "0x927EEC")]
	public void OnLocalPlayerVoted(bool wasLastVote)
	{
	}

	[Token(Token = "0x60009CF")]
	[Address(RVA = "0x927FC0", Offset = "0x927FC0", VA = "0x927FC0")]
	[PunRPC]
	private void HideAndClearPhotoGallery()
	{
	}

	[Token(Token = "0x60009D0")]
	[Address(RVA = "0x92808C", Offset = "0x92808C", VA = "0x92808C")]
	public void OnNewRecipeFound(CreativeRecipeData recipe)
	{
	}

	[Token(Token = "0x60009D1")]
	[Address(RVA = "0x9281B8", Offset = "0x9281B8", VA = "0x9281B8")]
	public void ContinueRound()
	{
	}

	[Token(Token = "0x60009D2")]
	[Address(RVA = "0x9281BC", Offset = "0x9281BC", VA = "0x9281BC")]
	public void FinishRound()
	{
	}

	[Token(Token = "0x60009D3")]
	[Address(RVA = "0x922158", Offset = "0x922158", VA = "0x922158")]
	public void OnPlateDelivered()
	{
	}

	[Token(Token = "0x60009D4")]
	[Address(RVA = "0x9281FC", Offset = "0x9281FC", VA = "0x9281FC")]
	[PunRPC]
	private void OnCreativeModePlateDelivered()
	{
	}

	[Token(Token = "0x60009D5")]
	[Address(RVA = "0x9282C8", Offset = "0x9282C8", VA = "0x9282C8", Slot = "6")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60009D6")]
	[Address(RVA = "0x9283F0", Offset = "0x9283F0", VA = "0x9283F0")]
	public CreativeMode()
	{
	}
}
[Token(Token = "0x2000177")]
public class CreativeModeContinuePrompt : SingleInstanceNetworkedBehavior<CreativeModeContinuePrompt>, IPunObservable
{
	[Token(Token = "0x40009EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject visualRoot;

	[Token(Token = "0x40009EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool activeBacking;

	[Token(Token = "0x17000150")]
	private bool Active
	{
		[Token(Token = "0x60009DD")]
		[Address(RVA = "0x928620", Offset = "0x928620", VA = "0x928620")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60009DE")]
		[Address(RVA = "0x928628", Offset = "0x928628", VA = "0x928628")]
		set
		{
		}
	}

	[Token(Token = "0x60009DF")]
	[Address(RVA = "0x928650", Offset = "0x928650", VA = "0x928650", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x60009E0")]
	[Address(RVA = "0x927A6C", Offset = "0x927A6C", VA = "0x927A6C")]
	public void SetVisible(bool isVisible)
	{
	}

	[Token(Token = "0x60009E1")]
	[Address(RVA = "0x9286A4", Offset = "0x9286A4", VA = "0x9286A4", Slot = "6")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60009E2")]
	[Address(RVA = "0x92876C", Offset = "0x92876C", VA = "0x92876C")]
	public CreativeModeContinuePrompt()
	{
	}
}
[Token(Token = "0x2000178")]
public class CreativeModeCustomers : SingleInstanceBehavior<CreativeModeCustomers>
{
	[Token(Token = "0x40009ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private CustomerType[] customerToUnlock;

	[Token(Token = "0x40009EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private CreativeRecipeData[] recipeUnlockingCustomer;

	[Token(Token = "0x40009EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float specialCustomersOdds;

	[Token(Token = "0x40009F0")]
	private const int bearSpawnIndex = 2;

	[Token(Token = "0x40009F1")]
	private const int customerCycleLength = 10;

	[Token(Token = "0x40009F2")]
	private const CustomerType standardCustomer = CustomerType.CustomerNormal;

	[Token(Token = "0x40009F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private SaveManager saveManager;

	[Token(Token = "0x40009F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private OrderMonitor orderMonitor;

	[Token(Token = "0x40009F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<CustomerType> specialCustomers;

	[Token(Token = "0x60009E3")]
	[Address(RVA = "0x9287D8", Offset = "0x9287D8", VA = "0x9287D8", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x60009E4")]
	[Address(RVA = "0x928830", Offset = "0x928830", VA = "0x928830")]
	public void Start()
	{
	}

	[Token(Token = "0x60009E5")]
	[Address(RVA = "0x925E0C", Offset = "0x925E0C", VA = "0x925E0C")]
	public CustomerType GetCustomer(int numPlatesSpawned)
	{
		return default(CustomerType);
	}

	[Token(Token = "0x60009E6")]
	[Address(RVA = "0x9280C8", Offset = "0x9280C8", VA = "0x9280C8")]
	public void CheckIfUnlockedCharacter(CreativeRecipeData recipe)
	{
	}

	[Token(Token = "0x60009E7")]
	[Address(RVA = "0x9289AC", Offset = "0x9289AC", VA = "0x9289AC")]
	public void DebugRefreshUnlockedCustomers()
	{
	}

	[Token(Token = "0x60009E8")]
	[Address(RVA = "0x9289D4", Offset = "0x9289D4", VA = "0x9289D4")]
	public void DebugUnlockAllCustomers()
	{
	}

	[Token(Token = "0x60009E9")]
	[Address(RVA = "0x928A88", Offset = "0x928A88", VA = "0x928A88")]
	public CreativeModeCustomers()
	{
	}
}
[Token(Token = "0x2000179")]
public enum CreativeModeFeedback
{
	[Token(Token = "0x40009F7")]
	PerfectMatch,
	[Token(Token = "0x40009F8")]
	RightOrderWrongGrilling,
	[Token(Token = "0x40009F9")]
	CorrectContentWrongOrder,
	[Token(Token = "0x40009FA")]
	OneIngredientMismatch,
	[Token(Token = "0x40009FB")]
	TwoIngredientsMismatch,
	[Token(Token = "0x40009FC")]
	NoMatch
}
[Token(Token = "0x200017A")]
public static class CreativeModeFeedbackText
{
	[Token(Token = "0x40009FD")]
	private const string localizationHintGrill = "creative_feedback_hint_grill";

	[Token(Token = "0x40009FE")]
	private const string localizationHintOrder = "creative_feedback_hint_order";

	[Token(Token = "0x40009FF")]
	private const string localizationHintOneMismatch = "creative_feedback_hint_replace";

	[Token(Token = "0x4000A00")]
	private const string localizationHintXMismatch = "creative_feedback_hint_replace_amount";

	[Token(Token = "0x60009EA")]
	[Address(RVA = "0x928B50", Offset = "0x928B50", VA = "0x928B50")]
	public static string GetLocalizedHintText(CreativeModeFeedback feedback)
	{
		return null;
	}
}
[Token(Token = "0x200017B")]
public class CreativeModeRecipeRegistry : SingleInstanceBehavior<CreativeModeRecipeRegistry>
{
	[Token(Token = "0x200017C")]
	public delegate void NewRecipeUnlocked(CreativeRecipeData recipe);

	[Token(Token = "0x4000A02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private CreativeRecipeList recipeList;

	[Token(Token = "0x4000A03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Dictionary<IngredientType, int> ingredientsRequiredCount;

	[Token(Token = "0x4000A04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private SaveManager saveManager;

	[Token(Token = "0x4000A05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Locale locale;

	[Token(Token = "0x4000A06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private StringBuilder stringBuilder;

	[Token(Token = "0x4000A07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<IngredientType> uniqueIngredients;

	[Token(Token = "0x4000A08")]
	private const string localizationIngredientCount = "creative_ingredient_count";

	[Token(Token = "0x4000A09")]
	private const string localizationGrillCount = "creative_grilled_count";

	[Token(Token = "0x4000A0A")]
	private const string localizationUniqueCount = "creative_unique_count";

	[Token(Token = "0x4000A0B")]
	private const string textNewLine = "\n";

	[Token(Token = "0x4000A0C")]
	private const string textParameterAmount = "{amount}";

	[Token(Token = "0x4000A0D")]
	private const string textParameterNewLine = "{newline}";

	[Token(Token = "0x17000151")]
	public int RecipeCount
	{
		[Token(Token = "0x60009ED")]
		[Address(RVA = "0x928DF8", Offset = "0x928DF8", VA = "0x928DF8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x14000010")]
	public event NewRecipeUnlocked OnNewRecipeUnlocked
	{
		[Token(Token = "0x60009EB")]
		[Address(RVA = "0x928CC0", Offset = "0x928CC0", VA = "0x928CC0")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60009EC")]
		[Address(RVA = "0x928D5C", Offset = "0x928D5C", VA = "0x928D5C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60009EE")]
	[Address(RVA = "0x928E48", Offset = "0x928E48", VA = "0x928E48", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x60009EF")]
	[Address(RVA = "0x928ED0", Offset = "0x928ED0", VA = "0x928ED0")]
	private void Start()
	{
	}

	[Token(Token = "0x60009F0")]
	[Address(RVA = "0x928FB8", Offset = "0x928FB8", VA = "0x928FB8")]
	public CreativeRecipeData GetMatchingRecipe(IList<StackedIngredientData> addedIngredients, out CreativeModeFeedback feedback)
	{
		return null;
	}

	[Token(Token = "0x60009F1")]
	[Address(RVA = "0x929324", Offset = "0x929324", VA = "0x929324")]
	public bool CheckIfUnlockedNewRecipe(CreativeRecipeData recipe, CreativeModeFeedback feedback)
	{
		return default(bool);
	}

	[Token(Token = "0x60009F2")]
	[Address(RVA = "0x929164", Offset = "0x929164", VA = "0x929164")]
	public static CreativeModeFeedback RecipeMatches(CreativeRecipeData recipe, IList<StackedIngredientData> addedIngredients)
	{
		return default(CreativeModeFeedback);
	}

	[Token(Token = "0x60009F3")]
	[Address(RVA = "0x929A00", Offset = "0x929A00", VA = "0x929A00")]
	private static bool AreIngredientsCorrectlyGrilled(CreativeRecipeData recipe, IList<StackedIngredientData> addedIngredients)
	{
		return default(bool);
	}

	[Token(Token = "0x60009F4")]
	[Address(RVA = "0x929804", Offset = "0x929804", VA = "0x929804")]
	private static bool AreIngredientsOrderedCorrect(CreativeRecipeData recipe, IList<StackedIngredientData> addedIngredients)
	{
		return default(bool);
	}

	[Token(Token = "0x60009F5")]
	[Address(RVA = "0x929420", Offset = "0x929420", VA = "0x929420")]
	private static bool AreTheCorrectIngredientsUsed(CreativeRecipeData creativeRecipe, IList<StackedIngredientData> addedIngredients, int maxNumWrongIngredients)
	{
		return default(bool);
	}

	[Token(Token = "0x60009F6")]
	[Address(RVA = "0x929BE4", Offset = "0x929BE4", VA = "0x929BE4")]
	public CreativeRecipeData GetRecipe(int index)
	{
		return null;
	}

	[Token(Token = "0x60009F7")]
	[Address(RVA = "0x929C44", Offset = "0x929C44", VA = "0x929C44")]
	public bool GetRecipeUnlocked(CreativeRecipeData recipe)
	{
		return default(bool);
	}

	[Token(Token = "0x60009F8")]
	[Address(RVA = "0x929BB4", Offset = "0x929BB4", VA = "0x929BB4")]
	private static bool IngredientIsBread(IngredientType type)
	{
		return default(bool);
	}

	[Token(Token = "0x60009F9")]
	[Address(RVA = "0x929CAC", Offset = "0x929CAC", VA = "0x929CAC")]
	public string GetRecipeDescription(CreativeRecipeData recipe)
	{
		return null;
	}

	[Token(Token = "0x60009FA")]
	[Address(RVA = "0x92A0F8", Offset = "0x92A0F8", VA = "0x92A0F8")]
	public void DebugUnlockAllRecipes()
	{
	}

	[Token(Token = "0x60009FB")]
	[Address(RVA = "0x92A230", Offset = "0x92A230", VA = "0x92A230")]
	public CreativeModeRecipeRegistry()
	{
	}
}
[Token(Token = "0x200017D")]
public class CreativeModeResultDisplayer : SingleInstanceNetworkedBehavior<CreativeModeResultDisplayer>, IPunObservable
{
	[Token(Token = "0x200017E")]
	[CompilerGenerated]
	private sealed class <ShowResults>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CreativeModeResultDisplayer <>4__this;

		[Token(Token = "0x17000152")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A0E")]
			[Address(RVA = "0x92AFF0", Offset = "0x92AFF0", VA = "0x92AFF0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000153")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A10")]
			[Address(RVA = "0x92B038", Offset = "0x92B038", VA = "0x92B038", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0x92A7C8", Offset = "0x92A7C8", VA = "0x92A7C8")]
		[DebuggerHidden]
		public <ShowResults>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0x92AC24", Offset = "0x92AC24", VA = "0x92AC24", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0x92AC28", Offset = "0x92AC28", VA = "0x92AC28", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0x92AFF8", Offset = "0x92AFF8", VA = "0x92AFF8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000A0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool shouldShow;

	[Token(Token = "0x4000A0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float scaleUpWindowTime;

	[Token(Token = "0x4000A10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float scaleDownWindowTime;

	[Token(Token = "0x4000A11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float scaleUpDelayTime;

	[Token(Token = "0x4000A12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Coroutine showRoutine;

	[Token(Token = "0x4000A13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private WaitForSeconds shortDelay;

	[Token(Token = "0x4000A14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private WaitForSeconds longDelay;

	[Token(Token = "0x4000A15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GameObject visualsRoot;

	[Token(Token = "0x4000A16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GameObject windowDisplay;

	[Token(Token = "0x4000A17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private CookingRound cookingRound;

	[Token(Token = "0x4000A18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private TextMeshPro newUnlockCounter;

	[Token(Token = "0x4000A19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private ParticleSystem unlockCountEffect;

	[Token(Token = "0x6000A01")]
	[Address(RVA = "0x92A4E4", Offset = "0x92A4E4", VA = "0x92A4E4", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000A02")]
	[Address(RVA = "0x92A630", Offset = "0x92A630", VA = "0x92A630")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A03")]
	[Address(RVA = "0x927D94", Offset = "0x927D94", VA = "0x927D94")]
	public void ShowLocally()
	{
	}

	[Token(Token = "0x6000A04")]
	[Address(RVA = "0x92A760", Offset = "0x92A760", VA = "0x92A760")]
	[IteratorStateMachine(typeof(<ShowResults>d__15))]
	private IEnumerator ShowResults()
	{
		return null;
	}

	[Token(Token = "0x6000A05")]
	[Address(RVA = "0x92A7F0", Offset = "0x92A7F0", VA = "0x92A7F0")]
	public void HideWithDelay()
	{
	}

	[Token(Token = "0x6000A06")]
	[Address(RVA = "0x92A950", Offset = "0x92A950", VA = "0x92A950")]
	private void OnCountdownStarted()
	{
	}

	[Token(Token = "0x6000A07")]
	[Address(RVA = "0x92A954", Offset = "0x92A954", VA = "0x92A954", Slot = "5")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x6000A08")]
	[Address(RVA = "0x92AA4C", Offset = "0x92AA4C", VA = "0x92AA4C", Slot = "6")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000A09")]
	[Address(RVA = "0x92AB20", Offset = "0x92AB20", VA = "0x92AB20")]
	public CreativeModeResultDisplayer()
	{
	}
}
[Token(Token = "0x200017F")]
public class PlateScoringCreativeMode : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4000A1D")]
	private const int maxStackSize = 20;

	[Token(Token = "0x6000A11")]
	[Address(RVA = "0x92B040", Offset = "0x92B040", VA = "0x92B040")]
	public static PlateScoring.AddIngredientFeedback CanAddIngredient(IList<StackedIngredientData> stackedIngredients)
	{
		return default(PlateScoring.AddIngredientFeedback);
	}

	[Token(Token = "0x6000A12")]
	[Address(RVA = "0x92B0EC", Offset = "0x92B0EC", VA = "0x92B0EC")]
	public static PlateScoring.Grade GetPlateCurrentGrade()
	{
		return default(PlateScoring.Grade);
	}

	[Token(Token = "0x6000A13")]
	[Address(RVA = "0x92B0F4", Offset = "0x92B0F4", VA = "0x92B0F4")]
	public PlateScoringCreativeMode()
	{
	}
}
[Token(Token = "0x2000180")]
public class RecipeBookButtons : SingleInstanceBehavior<RecipeBookButtons>
{
	[Token(Token = "0x4000A1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject[] buttonsGO;

	[Token(Token = "0x4000A1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private PokeButton[] pokeButtons;

	[Token(Token = "0x4000A20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RecipeBookMenu recipeBook;

	[Token(Token = "0x4000A21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CookingGameState gameState;

	[Token(Token = "0x6000A14")]
	[Address(RVA = "0x92B0FC", Offset = "0x92B0FC", VA = "0x92B0FC", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000A15")]
	[Address(RVA = "0x92B18C", Offset = "0x92B18C", VA = "0x92B18C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A16")]
	[Address(RVA = "0x92B418", Offset = "0x92B418", VA = "0x92B418")]
	private void OnStateChange(GameState oldState, GameState newState)
	{
	}

	[Token(Token = "0x6000A17")]
	[Address(RVA = "0x92B490", Offset = "0x92B490", VA = "0x92B490", Slot = "5")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x6000A18")]
	[Address(RVA = "0x92B57C", Offset = "0x92B57C", VA = "0x92B57C")]
	public RecipeBookButtons()
	{
	}
}
[Token(Token = "0x2000181")]
public class RecipeBookMenu : SingleInstanceBehavior<RecipeBookMenu>
{
	[Token(Token = "0x2000182")]
	private struct RecipeButton
	{
		[Token(Token = "0x4000A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PokeButton button;

		[Token(Token = "0x4000A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public SpriteRenderer buttonRenderer;

		[Token(Token = "0x4000A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public SpriteRenderer lockIconRenderer;

		[Token(Token = "0x4000A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject newRecipeIcon;

		[Token(Token = "0x4000A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshPro label;

		[Token(Token = "0x4000A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject gameObject;
	}

	[Token(Token = "0x4000A22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Spawn locations")]
	[SerializeField]
	private Vector3[] spawnLocations;

	[Token(Token = "0x4000A23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Vector3[] spawnRotations;

	[Token(Token = "0x4000A24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Header("Texts")]
	private TextMeshPro bannerLabel;

	[Token(Token = "0x4000A25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private TextMeshPro SelectedRecipeLabel;

	[Token(Token = "0x4000A26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private TextMeshPro SelectedRecipeDescription;

	[Token(Token = "0x4000A27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private TextMeshPro pageDisplayText;

	[Token(Token = "0x4000A28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("Buttons")]
	[SerializeField]
	private PokeButton exitButton;

	[Token(Token = "0x4000A29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private PokeButton scrollPrevious;

	[Token(Token = "0x4000A2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private PokeButton scrollNext;

	[Token(Token = "0x4000A2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private PokeButton[] recipeButtons;

	[Token(Token = "0x4000A2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	[Header("Other")]
	private Color lockedColor;

	[Token(Token = "0x4000A2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Color unlockedColor;

	[Token(Token = "0x4000A2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private Color selectedColor;

	[Token(Token = "0x4000A2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private Animator animator;

	[Token(Token = "0x4000A30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private GameObject menuRoot;

	[Token(Token = "0x4000A31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private Transform RecipeIconRoot;

	[Token(Token = "0x4000A32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private Sprite anyBreadSprite;

	[Token(Token = "0x4000A33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private Sprite anyBreadGrilledSprite;

	[Token(Token = "0x4000A34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private Sprite anyBreadBurntSprite;

	[Token(Token = "0x4000A35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	private float iconMinSize;

	[Token(Token = "0x4000A36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	[SerializeField]
	private float iconMaxSize;

	[Token(Token = "0x4000A37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	private float iconMinSpacing;

	[Token(Token = "0x4000A38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	[SerializeField]
	private float iconMaxSpacing;

	[Token(Token = "0x4000A39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[SerializeField]
	private Vector3 IconMinPosition;

	[Token(Token = "0x4000A3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	[SerializeField]
	private Vector3 IconMaxPosition;

	[Token(Token = "0x4000A3B")]
	private const int noRecipeSelected = -1;

	[Token(Token = "0x4000A3C")]
	private const int recipeButtonCount = 8;

	[Token(Token = "0x4000A3D")]
	private const float exitAnimationTime = 1.033f;

	[Token(Token = "0x4000A3E")]
	private const float enterAnimationTime = 1.033f;

	[Token(Token = "0x4000A3F")]
	private const string enterAnimationTrigger = "Enter";

	[Token(Token = "0x4000A40")]
	private const string exitAnimationTrigger = "Exit";

	[Token(Token = "0x4000A41")]
	private const string localizationHeaderRecipes = "inventory_header_recipes";

	[Token(Token = "0x4000A42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private int selectedButtonIndex;

	[Token(Token = "0x4000A43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private bool selectedRecipeIsUnlocked;

	[Token(Token = "0x4000A44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private int currentPage;

	[Token(Token = "0x4000A45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private int pageCount;

	[Token(Token = "0x4000A46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private int recipeCount;

	[Token(Token = "0x4000A47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private int iconCount;

	[Token(Token = "0x4000A48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private bool active;

	[Token(Token = "0x4000A49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private Locale locale;

	[Token(Token = "0x4000A4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private CreativeModeRecipeRegistry recipeRegistry;

	[Token(Token = "0x4000A4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private CookingNetworkManager networkManager;

	[Token(Token = "0x4000A4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private CookingGameState gameState;

	[Token(Token = "0x4000A4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private IngredientPrefabRegistry ingredientPrefabRegistry;

	[Token(Token = "0x4000A4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private WorkSpaceMenu workSpaceMenu;

	[Token(Token = "0x4000A4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private RecipeButton[] recipeButtonsInternal;

	[Token(Token = "0x4000A50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private Collider[] colliders;

	[Token(Token = "0x4000A51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private GridLayoutGroup gridLayout;

	[Token(Token = "0x4000A52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private SpriteRenderer[] ingredientIcons;

	[Token(Token = "0x4000A53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private Transform[] ingredientIconTransforms;

	[Token(Token = "0x4000A54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private List<CreativeRecipeData> newlyDiscoveredRecipes;

	[Token(Token = "0x17000154")]
	private int recipeOffset
	{
		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0x92B618", Offset = "0x92B618", VA = "0x92B618")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000A1B")]
	[Address(RVA = "0x92B624", Offset = "0x92B624", VA = "0x92B624")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A1C")]
	[Address(RVA = "0x92C0EC", Offset = "0x92C0EC", VA = "0x92C0EC")]
	private void Show(bool spawnOverInventoryMenu)
	{
	}

	[Token(Token = "0x6000A1D")]
	[Address(RVA = "0x92BF74", Offset = "0x92BF74", VA = "0x92BF74")]
	private void Hide()
	{
	}

	[Token(Token = "0x6000A1E")]
	[Address(RVA = "0x92B604", Offset = "0x92B604", VA = "0x92B604")]
	public void ToogleActive(bool spawnOverInventoryMenu = false)
	{
	}

	[Token(Token = "0x6000A1F")]
	[Address(RVA = "0x92C810", Offset = "0x92C810", VA = "0x92C810")]
	public void ShowRecipe(CreativeRecipeData recipe)
	{
	}

	[Token(Token = "0x6000A20")]
	[Address(RVA = "0x92CB14", Offset = "0x92CB14", VA = "0x92CB14")]
	private void ScrollPrevious()
	{
	}

	[Token(Token = "0x6000A21")]
	[Address(RVA = "0x92CB30", Offset = "0x92CB30", VA = "0x92CB30")]
	private void ScrollNext()
	{
	}

	[Token(Token = "0x6000A22")]
	[Address(RVA = "0x92C128", Offset = "0x92C128", VA = "0x92C128")]
	private void RefreshPage()
	{
	}

	[Token(Token = "0x6000A23")]
	[Address(RVA = "0x92C954", Offset = "0x92C954", VA = "0x92C954")]
	private void SelectRecipe(int buttonIndex, CreativeRecipeData recipe)
	{
	}

	[Token(Token = "0x6000A24")]
	[Address(RVA = "0x92CBC8", Offset = "0x92CBC8", VA = "0x92CBC8")]
	private void UpdateSelectedRecipeIcons(CreativeRecipeData recipe)
	{
	}

	[Token(Token = "0x6000A25")]
	[Address(RVA = "0x92CB54", Offset = "0x92CB54", VA = "0x92CB54")]
	private void SetButtonActiveVisuals(SpriteRenderer renderer, bool isActive, bool isUnlocked)
	{
	}

	[Token(Token = "0x6000A26")]
	[Address(RVA = "0x92C054", Offset = "0x92C054", VA = "0x92C054")]
	private void OnLocalPlayerMoved(int playerPosIndex)
	{
	}

	[Token(Token = "0x6000A27")]
	[Address(RVA = "0x92C4F4", Offset = "0x92C4F4", VA = "0x92C4F4")]
	private void SetPosition(bool spawnOverInventoryMenu)
	{
	}

	[Token(Token = "0x6000A28")]
	[Address(RVA = "0x92C610", Offset = "0x92C610", VA = "0x92C610")]
	public void PlayEnterOrExitAnimation(bool isEntering)
	{
	}

	[Token(Token = "0x6000A29")]
	[Address(RVA = "0x92D018", Offset = "0x92D018", VA = "0x92D018")]
	public void RefreshUnlockedRecipe()
	{
	}

	[Token(Token = "0x6000A2A")]
	[Address(RVA = "0x92D25C", Offset = "0x92D25C", VA = "0x92D25C")]
	public void OnRecipeUnlocked(CreativeRecipeData recipe)
	{
	}

	[Token(Token = "0x6000A2B")]
	[Address(RVA = "0x92D304", Offset = "0x92D304", VA = "0x92D304")]
	private void OnStateChange(GameState oldState, GameState newState)
	{
	}

	[Token(Token = "0x6000A2C")]
	[Address(RVA = "0x92D314", Offset = "0x92D314", VA = "0x92D314", Slot = "5")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x6000A2D")]
	[Address(RVA = "0x92D514", Offset = "0x92D514", VA = "0x92D514")]
	public RecipeBookMenu()
	{
	}
}
[Token(Token = "0x2000185")]
public class SnowParticleHandler : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4000A60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private string ParameterName;

	[Token(Token = "0x4000A61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform LightCentre;

	[Token(Token = "0x4000A62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Material mat;

	[Token(Token = "0x6000A32")]
	[Address(RVA = "0x92D738", Offset = "0x92D738", VA = "0x92D738")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A33")]
	[Address(RVA = "0x92D808", Offset = "0x92D808", VA = "0x92D808")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A34")]
	[Address(RVA = "0x92D80C", Offset = "0x92D80C", VA = "0x92D80C")]
	public SnowParticleHandler()
	{
	}
}
[Token(Token = "0x2000186")]
public enum CustomerType
{
	[Token(Token = "0x4000A64")]
	CustomerNormal,
	[Token(Token = "0x4000A65")]
	Rabbit,
	[Token(Token = "0x4000A66")]
	Picky,
	[Token(Token = "0x4000A67")]
	Royal,
	[Token(Token = "0x4000A68")]
	Werewolf,
	[Token(Token = "0x4000A69")]
	Jester,
	[Token(Token = "0x4000A6A")]
	Thief,
	[Token(Token = "0x4000A6B")]
	CustomerPerfectionTutorial,
	[Token(Token = "0x4000A6C")]
	FinalBossKing,
	[Token(Token = "0x4000A6D")]
	FinalBossQueen,
	[Token(Token = "0x4000A6E")]
	Bear,
	[Token(Token = "0x4000A6F")]
	Reindeer
}
[Token(Token = "0x2000187")]
[CreateAssetMenu(fileName = "NewCustomer", menuName = "Customers/Customer")]
public class CustomerData : ScriptableObject
{
	[Token(Token = "0x2000188")]
	public enum RequirementFeedback
	{
		[Token(Token = "0x4000A7E")]
		Pass,
		[Token(Token = "0x4000A7F")]
		NeedsPerfectGrade,
		[Token(Token = "0x4000A80")]
		NoRequirements
	}

	[Token(Token = "0x4000A70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CustomerType type;

	[Token(Token = "0x4000A71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int waitTime;

	[Token(Token = "0x4000A72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int coinTip;

	[Token(Token = "0x4000A73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool requirePerfectGrade;

	[Token(Token = "0x4000A74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	[FormerlySerializedAs("displayShortTimeWarning")]
	public bool limitGrillAmount;

	[Token(Token = "0x4000A75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x26")]
	public bool causesRoyalFail;

	[Token(Token = "0x4000A76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x27")]
	public bool hugeSandwich;

	[Token(Token = "0x4000A77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool obfuscatesIngredients;

	[Token(Token = "0x4000A78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool stealsIngredients;

	[Token(Token = "0x4000A79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public CustomerVisual[] prefabs;

	[Token(Token = "0x4000A7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Texture customerPlateTexture;

	[Token(Token = "0x4000A7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int customerPlateTextureArrayIndex;

	[Token(Token = "0x4000A7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Sprite goalServePerfectToIcon;

	[Token(Token = "0x6000A35")]
	[Address(RVA = "0x92D814", Offset = "0x92D814", VA = "0x92D814")]
	public CustomerData()
	{
	}
}
[Token(Token = "0x2000189")]
public class CustomerDeliveryPoints : SingleInstanceBehavior<CustomerDeliveryPoints>
{
	[Token(Token = "0x6000A36")]
	[Address(RVA = "0x92D81C", Offset = "0x92D81C", VA = "0x92D81C")]
	public Vector3 GetDeliveryPoint(int customerSlotIndex)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000A37")]
	[Address(RVA = "0x92D850", Offset = "0x92D850", VA = "0x92D850")]
	public CustomerDeliveryPoints()
	{
	}
}
[Token(Token = "0x200018A")]
[CreateAssetMenu(fileName = "NewCustomerList", menuName = "Customers/CustomerList")]
public class CustomerList : ScriptableObject
{
	[Token(Token = "0x4000A81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<CustomerData> customerDataList;

	[Token(Token = "0x6000A38")]
	[Address(RVA = "0x92D8BC", Offset = "0x92D8BC", VA = "0x92D8BC")]
	public void Verify()
	{
	}

	[Token(Token = "0x6000A39")]
	[Address(RVA = "0x92DAF0", Offset = "0x92DAF0", VA = "0x92DAF0")]
	public CustomerList()
	{
	}
}
[Token(Token = "0x200018B")]
public class CustomerRegistry : SingleInstanceBehavior<CustomerRegistry>
{
	[Token(Token = "0x4000A82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CustomerList customerList;

	[Token(Token = "0x4000A84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<CustomerType, CustomerVisual[]> customersTypes;

	[Token(Token = "0x17000155")]
	public Dictionary<CustomerType, CustomerData> CustomerTypeToData
	{
		[Token(Token = "0x6000A3A")]
		[Address(RVA = "0x92DAF8", Offset = "0x92DAF8", VA = "0x92DAF8")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000A3B")]
		[Address(RVA = "0x92DB00", Offset = "0x92DB00", VA = "0x92DB00")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000A3C")]
	[Address(RVA = "0x92DB08", Offset = "0x92DB08", VA = "0x92DB08", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000A3D")]
	[Address(RVA = "0x92DC6C", Offset = "0x92DC6C", VA = "0x92DC6C")]
	public CustomerVisual GetCustomerVisuals(CustomerType customerType)
	{
		return null;
	}

	[Token(Token = "0x6000A3E")]
	[Address(RVA = "0x92DD98", Offset = "0x92DD98", VA = "0x92DD98")]
	public CustomerData.RequirementFeedback PlatePassesRequirements(CustomerType customerType, PlateScoring.Grade plateGrade)
	{
		return default(CustomerData.RequirementFeedback);
	}

	[Token(Token = "0x6000A3F")]
	[Address(RVA = "0x92DE1C", Offset = "0x92DE1C", VA = "0x92DE1C")]
	public CustomerData GetCustomerData(CustomerType customerType)
	{
		return null;
	}

	[Token(Token = "0x6000A40")]
	[Address(RVA = "0x92297C", Offset = "0x92297C", VA = "0x92297C")]
	public bool CustomerCausesRoyalFail(CustomerType customerType)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A41")]
	[Address(RVA = "0x92DE74", Offset = "0x92DE74", VA = "0x92DE74")]
	public bool CustomerSteals(CustomerType customerType)
	{
		return default(bool);
	}

	[Token(Token = "0x6000A42")]
	[Address(RVA = "0x92DED8", Offset = "0x92DED8", VA = "0x92DED8")]
	public int GetCustomerTip(CustomerType customerType)
	{
		return default(int);
	}

	[Token(Token = "0x6000A43")]
	[Address(RVA = "0x92DF3C", Offset = "0x92DF3C", VA = "0x92DF3C")]
	public CustomerRegistry()
	{
	}
}
[Token(Token = "0x200018C")]
public class CustomerVisual : NetworkedBehaviour
{
	[Token(Token = "0x200018D")]
	[CompilerGenerated]
	private sealed class <ThiefStealingAnimationCoroutine>d__60 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CustomerVisual <>4__this;

		[Token(Token = "0x1700015A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000A62")]
			[Address(RVA = "0x92F3E4", Offset = "0x92F3E4", VA = "0x92F3E4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000A64")]
			[Address(RVA = "0x92F42C", Offset = "0x92F42C", VA = "0x92F42C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0x92F2E8", Offset = "0x92F2E8", VA = "0x92F2E8")]
		[DebuggerHidden]
		public <ThiefStealingAnimationCoroutine>d__60(int <>1__state)
		{
		}

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0x92F310", Offset = "0x92F310", VA = "0x92F310", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000A61")]
		[Address(RVA = "0x92F314", Offset = "0x92F314", VA = "0x92F314", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A63")]
		[Address(RVA = "0x92F3EC", Offset = "0x92F3EC", VA = "0x92F3EC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000A86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	private bool isLeavingBacking;

	[Token(Token = "0x4000A87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[Header("References")]
	private Renderer myRenderer;

	[Token(Token = "0x4000A88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	[Header("Settings")]
	private Vector3 positionOffset;

	[Token(Token = "0x4000A89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Texture[] textureVariants;

	[Token(Token = "0x4000A8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Vector3 rotationOffset;

	[Token(Token = "0x4000A8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	private float fadeInTime;

	[Token(Token = "0x4000A8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private bool isFemale;

	[Token(Token = "0x4000A8D")]
	private const float thiefStealAnimationPadding = 1.5f;

	[Token(Token = "0x4000A8E")]
	private const float hitAnimationVelocityThreshold = 5f;

	[Token(Token = "0x4000A8F")]
	private const float hitLightAnimationVelocityThreshold = 2f;

	[Token(Token = "0x4000A90")]
	private const float hitCooldown = 0.1f;

	[Token(Token = "0x4000A91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private int orderID;

	[Token(Token = "0x4000A92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float hitCooldownTimer;

	[Token(Token = "0x4000A93")]
	private const string triggerReactionNotPerfect = "reactionNotPerfect";

	[Token(Token = "0x4000A94")]
	private const string triggerReactionPerfect = "reactionPerfect";

	[Token(Token = "0x4000A95")]
	private const string triggerLeaving = "leaving";

	[Token(Token = "0x4000A96")]
	private const string triggerHit = "hit";

	[Token(Token = "0x4000A97")]
	private const string triggerLightHit = "lightHit";

	[Token(Token = "0x4000A98")]
	private const string triggerStealEntry = "stealingEntry";

	[Token(Token = "0x4000A99")]
	private const string triggerStealExit = "stealingExit";

	[Token(Token = "0x4000A9A")]
	private const string triggerObscureIngredient = "obscuringRecipe";

	[Token(Token = "0x4000A9B")]
	private const string grabbableTag = "Grabbable";

	[Token(Token = "0x4000A9C")]
	private const string propertyMainText = "_MainTex";

	[Token(Token = "0x4000A9D")]
	private const string propertyFadeRate = "_FadeRate";

	[Token(Token = "0x4000A9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private string[] allSharedTriggers;

	[Token(Token = "0x4000A9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private CustomerType customerType;

	[Token(Token = "0x4000AA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private bool inIdleAnimation;

	[Token(Token = "0x4000AA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Animator animator;

	[Token(Token = "0x4000AA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private MaterialPropertyBlock propertyBlock;

	[Token(Token = "0x4000AA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Action OnCustomerFinishedEating;

	[Token(Token = "0x4000AA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private WaitForSeconds thiefStealAnimationTime;

	[Token(Token = "0x4000AA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private CustomerEatAnimation eatBehaviours;

	[Token(Token = "0x17000156")]
	public bool IsFemale
	{
		[Token(Token = "0x6000A44")]
		[Address(RVA = "0x92DFF8", Offset = "0x92DFF8", VA = "0x92DFF8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000157")]
	public bool IsServed
	{
		[Token(Token = "0x6000A45")]
		[Address(RVA = "0x92E000", Offset = "0x92E000", VA = "0x92E000")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000A46")]
		[Address(RVA = "0x92E008", Offset = "0x92E008", VA = "0x92E008")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000158")]
	public bool IsLeaving
	{
		[Token(Token = "0x6000A47")]
		[Address(RVA = "0x92E014", Offset = "0x92E014", VA = "0x92E014")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000A48")]
		[Address(RVA = "0x92E01C", Offset = "0x92E01C", VA = "0x92E01C")]
		set
		{
		}
	}

	[Token(Token = "0x17000159")]
	public Collider VisualCollider
	{
		[Token(Token = "0x6000A49")]
		[Address(RVA = "0x92E154", Offset = "0x92E154", VA = "0x92E154")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000A4A")]
	[Address(RVA = "0x92E19C", Offset = "0x92E19C", VA = "0x92E19C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A4B")]
	private T GetStateMachineBehaviour<T>() where T : StateMachineBehaviour
	{
		return null;
	}

	[Token(Token = "0x6000A4C")]
	[Address(RVA = "0x92E46C", Offset = "0x92E46C", VA = "0x92E46C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A4D")]
	[Address(RVA = "0x92EA34", Offset = "0x92EA34", VA = "0x92EA34")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A4E")]
	[Address(RVA = "0x92EA68", Offset = "0x92EA68", VA = "0x92EA68")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000A4F")]
	[Address(RVA = "0x92E0E0", Offset = "0x92E0E0", VA = "0x92E0E0")]
	public void SetTrigger(string trigger)
	{
	}

	[Token(Token = "0x6000A50")]
	[Address(RVA = "0x92EBF4", Offset = "0x92EBF4", VA = "0x92EBF4")]
	public void PlayReactionAndEat(PlateScoring.Grade reaction)
	{
	}

	[Token(Token = "0x6000A51")]
	[Address(RVA = "0x92ED34", Offset = "0x92ED34", VA = "0x92ED34")]
	public void TimeOutCustomerReaction()
	{
	}

	[Token(Token = "0x6000A52")]
	[Address(RVA = "0x92EA18", Offset = "0x92EA18", VA = "0x92EA18")]
	public void SlowAnimation(float speed)
	{
	}

	[Token(Token = "0x6000A53")]
	[Address(RVA = "0x92ED58", Offset = "0x92ED58", VA = "0x92ED58")]
	public void ResumeAnimation()
	{
	}

	[Token(Token = "0x6000A54")]
	[Address(RVA = "0x92ED78", Offset = "0x92ED78", VA = "0x92ED78")]
	private void OnLeavingUpdate(float normalizedTime)
	{
	}

	[Token(Token = "0x6000A55")]
	[Address(RVA = "0x92EE08", Offset = "0x92EE08", VA = "0x92EE08")]
	public void HasLeft()
	{
	}

	[Token(Token = "0x6000A56")]
	[Address(RVA = "0x92EEA0", Offset = "0x92EEA0", VA = "0x92EEA0")]
	private void OnCustomerEatAnimationComplete()
	{
	}

	[Token(Token = "0x6000A57")]
	[Address(RVA = "0x92EECC", Offset = "0x92EECC", VA = "0x92EECC")]
	public void SetOncustomerEatenCallback(Action onCustomerEatenCallback)
	{
	}

	[Token(Token = "0x6000A58")]
	[Address(RVA = "0x92ED7C", Offset = "0x92ED7C", VA = "0x92ED7C")]
	private void SetOcclusion(float newValue)
	{
	}

	[Token(Token = "0x6000A59")]
	[Address(RVA = "0x92EED4", Offset = "0x92EED4", VA = "0x92EED4")]
	public void OnMyPlateDestroyed()
	{
	}

	[Token(Token = "0x6000A5A")]
	[Address(RVA = "0x92F008", Offset = "0x92F008", VA = "0x92F008")]
	public void ThiefStealingAnimation()
	{
	}

	[Token(Token = "0x6000A5B")]
	[Address(RVA = "0x92F028", Offset = "0x92F028", VA = "0x92F028")]
	[IteratorStateMachine(typeof(<ThiefStealingAnimationCoroutine>d__60))]
	private IEnumerator ThiefStealingAnimationCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000A5C")]
	[Address(RVA = "0x92F090", Offset = "0x92F090", VA = "0x92F090")]
	public void JesterObscuringAnimation()
	{
	}

	[Token(Token = "0x6000A5D")]
	[Address(RVA = "0x92F0E8", Offset = "0x92F0E8", VA = "0x92F0E8")]
	public CustomerVisual()
	{
	}
}
[Token(Token = "0x200018E")]
public class CustomerEatAnimation : StateMachineBehaviour
{
	[Token(Token = "0x4000AA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action OnAnimationComplete;

	[Token(Token = "0x4000AAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Action OnLeaveEatAnimation;

	[Token(Token = "0x6000A65")]
	[Address(RVA = "0x92F434", Offset = "0x92F434", VA = "0x92F434", Slot = "5")]
	public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000A66")]
	[Address(RVA = "0x92F484", Offset = "0x92F484", VA = "0x92F484", Slot = "4")]
	public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000A67")]
	[Address(RVA = "0x92F4D4", Offset = "0x92F4D4", VA = "0x92F4D4", Slot = "6")]
	public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000A68")]
	[Address(RVA = "0x92F4F0", Offset = "0x92F4F0", VA = "0x92F4F0")]
	public CustomerEatAnimation()
	{
	}
}
[Token(Token = "0x200018F")]
public class CustomerIdleAnimationState : StateMachineBehaviour
{
	[Token(Token = "0x4000AAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action OnIdleEnter;

	[Token(Token = "0x6000A69")]
	[Address(RVA = "0x92F4F8", Offset = "0x92F4F8", VA = "0x92F4F8", Slot = "4")]
	public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000A6A")]
	[Address(RVA = "0x92F544", Offset = "0x92F544", VA = "0x92F544")]
	public CustomerIdleAnimationState()
	{
	}
}
[Token(Token = "0x2000190")]
public class CustomerLeaveAnimation : StateMachineBehaviour
{
	[Token(Token = "0x4000AAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve leaveFadeCurve;

	[Token(Token = "0x4000AAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Action<float> OnLeavingUpdate;

	[Token(Token = "0x4000AAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Action OnAnimationComplete;

	[Token(Token = "0x6000A6B")]
	[Address(RVA = "0x92F54C", Offset = "0x92F54C", VA = "0x92F54C", Slot = "5")]
	public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x6000A6C")]
	[Address(RVA = "0x92F5F0", Offset = "0x92F5F0", VA = "0x92F5F0")]
	public CustomerLeaveAnimation()
	{
	}
}
[Token(Token = "0x2000191")]
[CreateAssetMenu]
public class CustomHandPoseList : ScriptableObject
{
	[Serializable]
	[Token(Token = "0x2000192")]
	public struct HandPoseStruct
	{
		[Token(Token = "0x4000AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CookoutCustomHandPose handPose;

		[Token(Token = "0x4000AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Transform poseL;

		[Token(Token = "0x4000AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform poseR;
	}

	[Token(Token = "0x4000AAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private List<HandPoseStruct> handPoses;

	[Token(Token = "0x4000AB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private List<HandPoseStruct> handPosesCookout;

	[Token(Token = "0x4000AB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<CookoutCustomHandPose, HandPoseStruct> poseDictionaryOculus;

	[Token(Token = "0x4000AB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<CookoutCustomHandPose, HandPoseStruct> poseDictionaryCookout;

	[Token(Token = "0x6000A6D")]
	[Address(RVA = "0x92F624", Offset = "0x92F624", VA = "0x92F624")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000A6E")]
	[Address(RVA = "0x92F8CC", Offset = "0x92F8CC", VA = "0x92F8CC")]
	public Transform CalcOculusAvatarPoseTransform(CookoutHandedness hand, CookoutCustomHandPose key)
	{
		return null;
	}

	[Token(Token = "0x6000A6F")]
	[Address(RVA = "0x92F970", Offset = "0x92F970", VA = "0x92F970")]
	public Transform CalcCookoutAvatarPoseTransform(CookoutHandedness hand, CookoutCustomHandPose key)
	{
		return null;
	}

	[Token(Token = "0x6000A70")]
	[Address(RVA = "0x92FA14", Offset = "0x92FA14", VA = "0x92FA14")]
	public CustomHandPoseList()
	{
	}
}
[Token(Token = "0x2000194")]
public class DebugCustomGripHandler : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4000ABB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Grabbable masterObject;

	[Token(Token = "0x4000ABC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Grabbable mirrorObject;

	[Token(Token = "0x6000A77")]
	[Address(RVA = "0x92FB58", Offset = "0x92FB58", VA = "0x92FB58")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A78")]
	[Address(RVA = "0x92FD90", Offset = "0x92FD90", VA = "0x92FD90")]
	private void ForceHandsToStayActive(Transform handRenderer)
	{
	}

	[Token(Token = "0x6000A79")]
	[Address(RVA = "0x92FD94", Offset = "0x92FD94", VA = "0x92FD94")]
	public DebugCustomGripHandler()
	{
	}
}
[Token(Token = "0x2000195")]
public class DebugLoadLauncher : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x6000A7A")]
	[Address(RVA = "0x92FD9C", Offset = "0x92FD9C", VA = "0x92FD9C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A7B")]
	[Address(RVA = "0x92FE08", Offset = "0x92FE08", VA = "0x92FE08")]
	public DebugLoadLauncher()
	{
	}
}
[Token(Token = "0x2000196")]
public class DebugMenu : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x6000A7C")]
	[Address(RVA = "0x92FE10", Offset = "0x92FE10", VA = "0x92FE10")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A7D")]
	[Address(RVA = "0x92FE68", Offset = "0x92FE68", VA = "0x92FE68")]
	public DebugMenu()
	{
	}
}
[Token(Token = "0x2000197")]
public class DebugNonVRCamera : SingleInstanceBehavior<DebugNonVRCamera>
{
	[Token(Token = "0x4000ABD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject cameraPrefab;

	[Token(Token = "0x4000ABE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Vector3 pos;

	[Token(Token = "0x4000ABF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private Vector3 rot;

	[Token(Token = "0x4000AC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject cam;

	[Token(Token = "0x4000AC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private AudioListener audioListenerVR;

	[Token(Token = "0x4000AC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Quaternion quaternion;

	[Token(Token = "0x6000A7E")]
	[Address(RVA = "0x92FE70", Offset = "0x92FE70", VA = "0x92FE70", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000A7F")]
	[Address(RVA = "0x92FF34", Offset = "0x92FF34", VA = "0x92FF34")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A80")]
	[Address(RVA = "0x92FF5C", Offset = "0x92FF5C", VA = "0x92FF5C")]
	private void SpawnNonVRCamera()
	{
	}

	[Token(Token = "0x6000A81")]
	[Address(RVA = "0x930080", Offset = "0x930080", VA = "0x930080")]
	public void ToggleCamera(bool VRModeOn)
	{
	}

	[Token(Token = "0x6000A82")]
	[Address(RVA = "0x930134", Offset = "0x930134", VA = "0x930134")]
	public DebugNonVRCamera()
	{
	}
}
[Token(Token = "0x2000198")]
public class ErrorDisplayer : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4000AC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject errorDisplayerPrefab;

	[Token(Token = "0x4000AC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 offsetFromCamera;

	[Token(Token = "0x4000AC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool showInEditor;

	[Token(Token = "0x4000AC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject errorDisplayer;

	[Token(Token = "0x4000AC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private TextMeshPro errorText;

	[Token(Token = "0x4000AC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<string> errorList;

	[Token(Token = "0x4000AC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool isListening;

	[Token(Token = "0x4000ACA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private CookoutInput input;

	[Token(Token = "0x4000ACB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Camera mainCamera;

	[Token(Token = "0x4000ACC")]
	private const int errorSaveCount = 10;

	[Token(Token = "0x6000A83")]
	[Address(RVA = "0x9301B4", Offset = "0x9301B4", VA = "0x9301B4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A84")]
	[Address(RVA = "0x930394", Offset = "0x930394", VA = "0x930394")]
	private void OnLog(string condition, string stackTrace, LogType type)
	{
	}

	[Token(Token = "0x6000A85")]
	[Address(RVA = "0x9304E4", Offset = "0x9304E4", VA = "0x9304E4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A86")]
	[Address(RVA = "0x9305EC", Offset = "0x9305EC", VA = "0x9305EC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000A87")]
	[Address(RVA = "0x930708", Offset = "0x930708", VA = "0x930708")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000A88")]
	[Address(RVA = "0x93079C", Offset = "0x93079C", VA = "0x93079C")]
	public ErrorDisplayer()
	{
	}
}
[Token(Token = "0x2000199")]
public class HandDebugMenu : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4000ACE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TextMeshPro menuHeader;

	[Token(Token = "0x4000ACF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMeshPro logNameText;

	[Token(Token = "0x4000AD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Main Game Buttons")]
	[SerializeField]
	private PokeButton UnlockAllButton;

	[Token(Token = "0x4000AD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private PokeButton lockAllButton;

	[Token(Token = "0x4000AD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private PokeButton foveatedButton;

	[Token(Token = "0x4000AD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private TextMeshPro foveatedButtonText;

	[Token(Token = "0x4000AD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private PokeButton finishRoundInputButton;

	[Token(Token = "0x4000AD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private TextMeshPro finishRoundInputText;

	[Token(Token = "0x4000AD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private PokeButton finishRoundButton;

	[Token(Token = "0x4000AD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private PokeButton autoHoldButton;

	[Token(Token = "0x4000AD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private PokeButton grillPowerUpButton;

	[Token(Token = "0x4000AD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private PokeButton sinkPowerUpButton;

	[Token(Token = "0x4000ADA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private PokeButton spawnBot;

	[Token(Token = "0x4000ADB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private PokeButton spawnAvatar;

	[Token(Token = "0x4000ADC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private PokeButton equipWorstCase;

	[Token(Token = "0x4000ADD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private PokeButton ingredientsWorstCase;

	[Token(Token = "0x4000ADE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private PokeButton toggleIndoorCabin;

	[Token(Token = "0x4000ADF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private PokeButton toggleEnvironment;

	[Token(Token = "0x4000AE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private PokeButton returnToLobby;

	[Token(Token = "0x4000AE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private PokeButton disableCamera;

	[Token(Token = "0x4000AE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private PokeButton reduceRendering;

	[Token(Token = "0x4000AE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private PokeButton textureResButton;

	[Token(Token = "0x4000AE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	private TextMeshPro textureResButtonText;

	[Token(Token = "0x4000AE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	private PokeButton unlockUpToEndless;

	[Token(Token = "0x4000AE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[SerializeField]
	private PokeButton increaseIngredientCap;

	[Token(Token = "0x4000AE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[SerializeField]
	private PokeButton decreaseIngredientCap;

	[Token(Token = "0x4000AE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[SerializeField]
	private TextMeshPro ingredientCap;

	[Token(Token = "0x4000AE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[SerializeField]
	private TextMeshPro currentLocale;

	[Token(Token = "0x4000AEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[SerializeField]
	private PokeButton changeLocale;

	[Token(Token = "0x4000AEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[SerializeField]
	private PokeButton toggleEcho;

	[Token(Token = "0x4000AEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SerializeField]
	private PokeButton debugVoIP;

	[Token(Token = "0x4000AED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[SerializeField]
	private PokeButton firePerformanceTest;

	[Token(Token = "0x4000AEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[SerializeField]
	private PokeButton firePerformanceTest2;

	[Token(Token = "0x4000AEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[SerializeField]
	private PokeButton respawnPlayerVoIP;

	[Token(Token = "0x4000AF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[SerializeField]
	private PokeButton cycleIngredients;

	[Token(Token = "0x4000AF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[SerializeField]
	private PokeButton addRandomIngredient;

	[Token(Token = "0x4000AF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[SerializeField]
	private PokeButton addBaguetteIngredient;

	[Token(Token = "0x4000AF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	[SerializeField]
	[Header("Launcher Buttons")]
	private PokeButton resetIntroButton;

	[Token(Token = "0x4000AF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	[SerializeField]
	private PokeButton CyclePopup;

	[Token(Token = "0x4000AF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	[Header("Always Showing Buttons")]
	[SerializeField]
	private PokeButton uploadLogButton;

	[Token(Token = "0x4000AF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	[Header("Console log")]
	[SerializeField]
	private TextMeshPro consoleLogText;

	[Token(Token = "0x4000AF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	[SerializeField]
	private bool showStackTrace;

	[Token(Token = "0x4000AF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	[SerializeField]
	private TextMeshPro consolePageText;

	[Token(Token = "0x1700015C")]
	public static HandDebugMenu CurrentHandDebugMenu
	{
		[Token(Token = "0x6000A89")]
		[Address(RVA = "0x93081C", Offset = "0x93081C", VA = "0x93081C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0x930864", Offset = "0x930864", VA = "0x930864")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000A8B")]
	[Address(RVA = "0x9308B0", Offset = "0x9308B0", VA = "0x9308B0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000A8C")]
	[Address(RVA = "0x93091C", Offset = "0x93091C", VA = "0x93091C")]
	public HandDebugMenu()
	{
	}
}
[Token(Token = "0x200019A")]
public class InputDebug : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4000AF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TMP_Text text;

	[Token(Token = "0x6000A8D")]
	[Address(RVA = "0x930924", Offset = "0x930924", VA = "0x930924")]
	private void DisplayUsage(StringBuilder sb, InputDevice device, InputFeatureUsage<bool> usage, string name)
	{
	}

	[Token(Token = "0x6000A8E")]
	[Address(RVA = "0x930A0C", Offset = "0x930A0C", VA = "0x930A0C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000A8F")]
	[Address(RVA = "0x930D68", Offset = "0x930D68", VA = "0x930D68")]
	public InputDebug()
	{
	}
}
[Token(Token = "0x200019B")]
public class InventoryButtons : SingleInstanceBehavior<InventoryButtons>
{
	[Token(Token = "0x4000AFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject[] buttonActiveGO;

	[Token(Token = "0x4000AFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject[] buttonInactiveGO;

	[Token(Token = "0x4000AFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform[] buttons;

	[Token(Token = "0x4000AFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private PokeButton[] pokeButtons;

	[Token(Token = "0x6000A90")]
	[Address(RVA = "0x930D70", Offset = "0x930D70", VA = "0x930D70", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000A91")]
	[Address(RVA = "0x930EB8", Offset = "0x930EB8", VA = "0x930EB8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000A92")]
	[Address(RVA = "0x9310EC", Offset = "0x9310EC", VA = "0x9310EC")]
	public Transform GetClosestInventoryButton(int playerPositionIndex)
	{
		return null;
	}

	[Token(Token = "0x6000A93")]
	[Address(RVA = "0x93111C", Offset = "0x93111C", VA = "0x93111C")]
	public void SetInventoryButtonsActive(bool isActive)
	{
	}

	[Token(Token = "0x6000A94")]
	[Address(RVA = "0x9311E8", Offset = "0x9311E8", VA = "0x9311E8")]
	public InventoryButtons()
	{
	}
}
[Token(Token = "0x200019D")]
public class LogSender : SingleInstanceBehavior<LogSender>
{
	[Token(Token = "0x200019E")]
	[CompilerGenerated]
	private sealed class <UploadApplicationLog>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LogSender <>4__this;

		[Token(Token = "0x4000B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string forcedLogName;

		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UnityWebRequest <request>5__2;

		[Token(Token = "0x1700015D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000AA8")]
			[Address(RVA = "0x932FF4", Offset = "0x932FF4", VA = "0x932FF4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000AAA")]
			[Address(RVA = "0x93303C", Offset = "0x93303C", VA = "0x93303C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AA4")]
		[Address(RVA = "0x93252C", Offset = "0x93252C", VA = "0x93252C")]
		[DebuggerHidden]
		public <UploadApplicationLog>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x6000AA5")]
		[Address(RVA = "0x9325C0", Offset = "0x9325C0", VA = "0x9325C0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000AA6")]
		[Address(RVA = "0x9325DC", Offset = "0x9325DC", VA = "0x9325DC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0x932F44", Offset = "0x932F44", VA = "0x932F44")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0x932FFC", Offset = "0x932FFC", VA = "0x932FFC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000B00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private MemoryStream stream;

	[Token(Token = "0x4000B01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private StreamWriter writer;

	[Token(Token = "0x4000B02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool seenErrorSinceLastReset;

	[Token(Token = "0x4000B03")]
	public const string APPLICATION_QUIT_PROPERLY = "APPLICATION_QUIT_PROPERLY";

	[Token(Token = "0x4000B04")]
	public const string LAST_SEEN_ERROR = "LAST_SEEN_ERROR";

	[Token(Token = "0x6000A97")]
	[Address(RVA = "0x931270", Offset = "0x931270", VA = "0x931270", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000A98")]
	[Address(RVA = "0x9319F4", Offset = "0x9319F4", VA = "0x9319F4")]
	private void SetupStream()
	{
	}

	[Token(Token = "0x6000A99")]
	[Address(RVA = "0x931C2C", Offset = "0x931C2C", VA = "0x931C2C")]
	public void Clear()
	{
	}

	[Token(Token = "0x6000A9A")]
	[Address(RVA = "0x931C78", Offset = "0x931C78", VA = "0x931C78")]
	public MemoryStream GetStream()
	{
		return null;
	}

	[Token(Token = "0x6000A9B")]
	[Address(RVA = "0x931C80", Offset = "0x931C80", VA = "0x931C80")]
	private void OnLogMessage(string condition, string stacktrace, LogType type)
	{
	}

	[Token(Token = "0x6000A9C")]
	[Address(RVA = "0x9320AC", Offset = "0x9320AC", VA = "0x9320AC")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x6000A9D")]
	[Address(RVA = "0x932108", Offset = "0x932108", VA = "0x932108")]
	public void SendLogsToLogStorageIfErrorOccurred()
	{
	}

	[Token(Token = "0x6000A9E")]
	[Address(RVA = "0x931AC0", Offset = "0x931AC0", VA = "0x931AC0")]
	private void TrackLatestSeenErrorAsCrashReport(string crashMessage)
	{
	}

	[Token(Token = "0x6000A9F")]
	[Address(RVA = "0x932470", Offset = "0x932470", VA = "0x932470")]
	private void SendLogsToLogStorage([Optional] string logName)
	{
	}

	[Token(Token = "0x6000AA0")]
	[Address(RVA = "0x932508", Offset = "0x932508", VA = "0x932508")]
	public void ForceLogUpload()
	{
	}

	[Token(Token = "0x6000AA1")]
	[Address(RVA = "0x932494", Offset = "0x932494", VA = "0x932494")]
	[IteratorStateMachine(typeof(<UploadApplicationLog>d__15))]
	private IEnumerator UploadApplicationLog([Optional] string forcedLogName)
	{
		return null;
	}

	[Token(Token = "0x6000AA2")]
	[Address(RVA = "0x9322A0", Offset = "0x9322A0", VA = "0x9322A0")]
	public string GetLogfileName()
	{
		return null;
	}

	[Token(Token = "0x6000AA3")]
	[Address(RVA = "0x932554", Offset = "0x932554", VA = "0x932554")]
	public LogSender()
	{
	}
}
[Token(Token = "0x200019F")]
public class NetworkStats : SingleInstanceNetworkedBehavior<NetworkStats>
{
	[Token(Token = "0x20001A0")]
	private struct AvatarTrafficStats
	{
		[Token(Token = "0x4000B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float time;

		[Token(Token = "0x4000B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int numBytes;
	}

	[Token(Token = "0x4000B0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private List<AvatarTrafficStats> sentBytes;

	[Token(Token = "0x4000B0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<AvatarTrafficStats> receivedBytes;

	[Token(Token = "0x4000B0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float lastDebugOutput;

	[Token(Token = "0x4000B0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int lastIncomingBytes;

	[Token(Token = "0x4000B0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int lastOutgoingBytes;

	[Token(Token = "0x6000AAB")]
	[Address(RVA = "0x933044", Offset = "0x933044", VA = "0x933044")]
	public void Start()
	{
	}

	[Token(Token = "0x6000AAC")]
	[Address(RVA = "0x933050", Offset = "0x933050", VA = "0x933050")]
	public void Update()
	{
	}

	[Token(Token = "0x6000AAD")]
	[Address(RVA = "0x933394", Offset = "0x933394", VA = "0x933394")]
	public void SentAvatarData(int numBytes)
	{
	}

	[Token(Token = "0x6000AAE")]
	[Address(RVA = "0x93345C", Offset = "0x93345C", VA = "0x93345C")]
	public void ReceivedAvatarData(int numBytes)
	{
	}

	[Token(Token = "0x6000AAF")]
	[Address(RVA = "0x933524", Offset = "0x933524", VA = "0x933524")]
	public NetworkStats()
	{
	}
}
[Token(Token = "0x20001A1")]
[CreateAssetMenu(fileName = "PrefabRegistry", menuName = "RG/Prefab Registry")]
public class PrefabRegistry : ScriptableObject
{
	[Token(Token = "0x4000B11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] prefabs;

	[Token(Token = "0x4000B12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] particlePrefabs;

	[Token(Token = "0x6000AB0")]
	[Address(RVA = "0x9335FC", Offset = "0x9335FC", VA = "0x9335FC")]
	public PrefabRegistry()
	{
	}
}
[Token(Token = "0x20001A2")]
public class EndlessMapScoreDisplayer : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4000B13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TextMeshPro highScoreText;

	[Token(Token = "0x4000B14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMeshPro highScoreTextBack;

	[Token(Token = "0x4000B15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Animator anim;

	[Token(Token = "0x6000AB1")]
	[Address(RVA = "0x933604", Offset = "0x933604", VA = "0x933604")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000AB2")]
	[Address(RVA = "0x93365C", Offset = "0x93365C", VA = "0x93365C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000AB3")]
	[Address(RVA = "0x933804", Offset = "0x933804", VA = "0x933804")]
	public void HideText()
	{
	}

	[Token(Token = "0x6000AB4")]
	[Address(RVA = "0x933664", Offset = "0x933664", VA = "0x933664")]
	internal void UpdateAndShowText(bool withBounceEffect = false)
	{
	}

	[Token(Token = "0x6000AB5")]
	[Address(RVA = "0x93388C", Offset = "0x93388C", VA = "0x93388C")]
	public EndlessMapScoreDisplayer()
	{
	}
}
[Token(Token = "0x20001A3")]
public class EndlessMode : SingleInstanceNetworkedBehavior<EndlessMode>, IPunObservable
{
	[Token(Token = "0x20001A4")]
	public delegate void EndlessModeStartHandler();

	[Token(Token = "0x20001A5")]
	public delegate void EndlessModeBreak();

	[Token(Token = "0x20001A6")]
	public delegate void EndlessModeStopHandler();

	[Token(Token = "0x20001A7")]
	private enum State
	{
		[Token(Token = "0x4000B31")]
		Inactive,
		[Token(Token = "0x4000B32")]
		Running,
		[Token(Token = "0x4000B33")]
		Complete
	}

	[Token(Token = "0x20001A8")]
	[CompilerGenerated]
	private sealed class <StartEndlessMode>d__47 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EndlessMode <>4__this;

		[Token(Token = "0x17000162")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000AE2")]
			[Address(RVA = "0x936D6C", Offset = "0x936D6C", VA = "0x936D6C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000163")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000AE4")]
			[Address(RVA = "0x936DB4", Offset = "0x936DB4", VA = "0x936DB4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0x934558", Offset = "0x934558", VA = "0x934558")]
		[DebuggerHidden]
		public <StartEndlessMode>d__47(int <>1__state)
		{
		}

		[Token(Token = "0x6000AE0")]
		[Address(RVA = "0x9369E8", Offset = "0x9369E8", VA = "0x9369E8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000AE1")]
		[Address(RVA = "0x9369EC", Offset = "0x9369EC", VA = "0x9369EC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0x936D74", Offset = "0x936D74", VA = "0x936D74", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000B19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int perfectsServedThreshold;

	[Token(Token = "0x4000B1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public EndlessRewardList endlessRewardList;

	[Token(Token = "0x4000B1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private int lifeCount;

	[Token(Token = "0x4000B1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private int serveCountForPause;

	[Token(Token = "0x4000B1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private float timeStopDuration;

	[Token(Token = "0x4000B1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private LevelData endlessLevelData;

	[Token(Token = "0x4000B1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private State state;

	[Token(Token = "0x4000B20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private int perfectsServed;

	[Token(Token = "0x4000B21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int servedCount;

	[Token(Token = "0x4000B22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool breakActiveBacking;

	[Token(Token = "0x4000B24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private int hugeSandwichStackSize;

	[Token(Token = "0x4000B25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private CookingGameState cookingGameState;

	[Token(Token = "0x4000B26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private CookingRound cookingRound;

	[Token(Token = "0x4000B27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private EndlessModeRewardSpawner endlessModeRewardSpawner;

	[Token(Token = "0x4000B28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private EndlessWaveDisplayer endlessWaveDisplayer;

	[Token(Token = "0x4000B29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private CookingRecipeFactory recipeFactory;

	[Token(Token = "0x4000B2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private SaveManager saveManager;

	[Token(Token = "0x4000B2B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private CookingNetworkManager cookingNetworkManager;

	[Token(Token = "0x4000B2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private TimeSlowdownHandler timeSlowdownHandler;

	[Token(Token = "0x4000B2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private RewardBubbleSpawner rewardBubbleSpawner;

	[Token(Token = "0x4000B2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private EnvironmentLoader environmentLoader;

	[Token(Token = "0x4000B2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private EndlessModeWaveSelecter waveSelecter;

	[Token(Token = "0x1700015F")]
	public bool IsRunning
	{
		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0x933C3C", Offset = "0x933C3C", VA = "0x933C3C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000160")]
	private bool BreakActive
	{
		[Token(Token = "0x6000ABD")]
		[Address(RVA = "0x933C4C", Offset = "0x933C4C", VA = "0x933C4C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000ABE")]
		[Address(RVA = "0x933C54", Offset = "0x933C54", VA = "0x933C54")]
		set
		{
		}
	}

	[Token(Token = "0x17000161")]
	private float BreakElapsedTime
	{
		[Token(Token = "0x6000ABF")]
		[Address(RVA = "0x933C78", Offset = "0x933C78", VA = "0x933C78")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000AC0")]
		[Address(RVA = "0x933C80", Offset = "0x933C80", VA = "0x933C80")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x14000011")]
	public event EndlessModeStartHandler OnEndlessStart
	{
		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0x933894", Offset = "0x933894", VA = "0x933894")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000AB7")]
		[Address(RVA = "0x933930", Offset = "0x933930", VA = "0x933930")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000012")]
	public event EndlessModeBreak OnEndlessModeBreak
	{
		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0x9339CC", Offset = "0x9339CC", VA = "0x9339CC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0x933A68", Offset = "0x933A68", VA = "0x933A68")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000013")]
	public event EndlessModeStopHandler OnEndlessStop
	{
		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0x933B04", Offset = "0x933B04", VA = "0x933B04")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0x933BA0", Offset = "0x933BA0", VA = "0x933BA0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000AC1")]
	[Address(RVA = "0x933C88", Offset = "0x933C88", VA = "0x933C88", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000AC2")]
	[Address(RVA = "0x933D00", Offset = "0x933D00", VA = "0x933D00")]
	private void Start()
	{
	}

	[Token(Token = "0x6000AC3")]
	[Address(RVA = "0x93444C", Offset = "0x93444C", VA = "0x93444C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000AC4")]
	[Address(RVA = "0x9344F0", Offset = "0x9344F0", VA = "0x9344F0")]
	[IteratorStateMachine(typeof(<StartEndlessMode>d__47))]
	public IEnumerator StartEndlessMode()
	{
		return null;
	}

	[Token(Token = "0x6000AC5")]
	[Address(RVA = "0x934580", Offset = "0x934580", VA = "0x934580")]
	private void UpdateState(State newState)
	{
	}

	[Token(Token = "0x6000AC6")]
	[Address(RVA = "0x934614", Offset = "0x934614", VA = "0x934614")]
	public void OnPlateHandedIn(bool isPerfect)
	{
	}

	[Token(Token = "0x6000AC7")]
	[Address(RVA = "0x934844", Offset = "0x934844", VA = "0x934844")]
	[PunRPC]
	private void EndlessModeActivateBreakRPC(bool spawnRewards)
	{
	}

	[Token(Token = "0x6000AC8")]
	[Address(RVA = "0x934CC8", Offset = "0x934CC8", VA = "0x934CC8")]
	public void ForceQuit()
	{
	}

	[Token(Token = "0x6000AC9")]
	[Address(RVA = "0x9345D8", Offset = "0x9345D8", VA = "0x9345D8")]
	public void OnEndlessFinished()
	{
	}

	[Token(Token = "0x6000ACA")]
	[Address(RVA = "0x934EB8", Offset = "0x934EB8", VA = "0x934EB8")]
	public Recipe GetNewRecipe(CustomerType customer)
	{
		return default(Recipe);
	}

	[Token(Token = "0x6000ACB")]
	[Address(RVA = "0x93551C", Offset = "0x93551C", VA = "0x93551C")]
	public CustomerType GetNextCustomerType()
	{
		return default(CustomerType);
	}

	[Token(Token = "0x6000ACC")]
	[Address(RVA = "0x935764", Offset = "0x935764", VA = "0x935764")]
	public void OnRoundEnded()
	{
	}

	[Token(Token = "0x6000ACD")]
	[Address(RVA = "0x9359FC", Offset = "0x9359FC", VA = "0x9359FC")]
	[PunRPC]
	public void OnNewEndlessScoreRPC(int clearedCustomers)
	{
	}

	[Token(Token = "0x6000ACE")]
	[Address(RVA = "0x935D7C", Offset = "0x935D7C", VA = "0x935D7C")]
	public void OnPlayerDisconnected()
	{
	}

	[Token(Token = "0x6000ACF")]
	[Address(RVA = "0x936280", Offset = "0x936280", VA = "0x936280")]
	public void OnPlayerMoved()
	{
	}

	[Token(Token = "0x6000AD0")]
	[Address(RVA = "0x936378", Offset = "0x936378", VA = "0x936378")]
	public void AbortEndlessMode()
	{
	}

	[Token(Token = "0x6000AD1")]
	[Address(RVA = "0x93645C", Offset = "0x93645C", VA = "0x93645C", Slot = "6")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000AD2")]
	[Address(RVA = "0x936664", Offset = "0x936664", VA = "0x936664")]
	public EndlessMode()
	{
	}
}
[Token(Token = "0x20001A9")]
public class EndlessModeNewHighScoreEffect : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4000B37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Header("Particles")]
	private ParticleSystem particles;

	[Token(Token = "0x4000B38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Header("Animated Text")]
	private GameObject newHighScoreText;

	[Token(Token = "0x4000B39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float textFlyTime;

	[Token(Token = "0x4000B3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float textTargetHeight;

	[Token(Token = "0x4000B3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float lingerTime;

	[Token(Token = "0x4000B3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 textStartPosition;

	[Token(Token = "0x4000B3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 textStartScale;

	[Token(Token = "0x6000AE5")]
	[Address(RVA = "0x936DBC", Offset = "0x936DBC", VA = "0x936DBC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000AE6")]
	[Address(RVA = "0x936E48", Offset = "0x936E48", VA = "0x936E48")]
	public void Show(float particlesAppearDelay, float textAppearDelay)
	{
	}

	[Token(Token = "0x6000AE7")]
	[Address(RVA = "0x93706C", Offset = "0x93706C", VA = "0x93706C")]
	public EndlessModeNewHighScoreEffect()
	{
	}
}
[Token(Token = "0x20001AB")]
public class EndlessModeResultDisplayer : SingleInstanceNetworkedBehavior<EndlessModeResultDisplayer>, IPunObservable
{
	[Token(Token = "0x20001AC")]
	[CompilerGenerated]
	private sealed class <ShowResults>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EndlessModeResultDisplayer <>4__this;

		[Token(Token = "0x4000B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <timeToMoveToMap>5__2;

		[Token(Token = "0x4000B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 <windowPositionGlobal>5__3;

		[Token(Token = "0x17000164")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000AFC")]
			[Address(RVA = "0x938408", Offset = "0x938408", VA = "0x938408", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000165")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000AFE")]
			[Address(RVA = "0x938450", Offset = "0x938450", VA = "0x938450", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000AF9")]
		[Address(RVA = "0x937628", Offset = "0x937628", VA = "0x937628")]
		[DebuggerHidden]
		public <ShowResults>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x6000AFA")]
		[Address(RVA = "0x937C14", Offset = "0x937C14", VA = "0x937C14", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000AFB")]
		[Address(RVA = "0x937C18", Offset = "0x937C18", VA = "0x937C18", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AFD")]
		[Address(RVA = "0x938410", Offset = "0x938410", VA = "0x938410", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000B41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMeshPro customersServedCount;

	[Token(Token = "0x4000B42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject magicTrail;

	[Token(Token = "0x4000B43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private ParticleSystem scoreParticles;

	[Token(Token = "0x4000B44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[Header("Startup")]
	private float trailStartDelay;

	[Token(Token = "0x4000B45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private float scaleUpWindowDisplayDelay;

	[Token(Token = "0x4000B46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float delayBeforeScoreReveal;

	[Token(Token = "0x4000B47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	[Header("Magic Trail")]
	private Vector3 trailStartPosition;

	[Token(Token = "0x4000B48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private float upToWindowTime;

	[Token(Token = "0x4000B49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	private Vector3 trailWindowPosition;

	[Token(Token = "0x4000B4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private float flyToMapTime;

	[Token(Token = "0x4000B4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private EndlessMapScoreDisplayer zoomedInMapScoreDisplayer;

	[Token(Token = "0x4000B4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Header("Personal High Score Effects")]
	[SerializeField]
	private float textAppearDelay;

	[Token(Token = "0x4000B4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[SerializeField]
	private float particlesAppearDelay;

	[Token(Token = "0x4000B4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private EndlessModeNewHighScoreEffect[] personalHighScoreEffects;

	[Token(Token = "0x4000B4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool shouldShow;

	[Token(Token = "0x4000B50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private GameObject windowDisplay;

	[Token(Token = "0x4000B51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private int customersCleared;

	[Token(Token = "0x4000B52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private bool newPersonalHighScore;

	[Token(Token = "0x4000B53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private CookingRound cookingRound;

	[Token(Token = "0x4000B54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Map map;

	[Token(Token = "0x4000B55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private GameObject visualsRoot;

	[Token(Token = "0x4000B56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Coroutine showRoutine;

	[Token(Token = "0x4000B57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private WaitForSeconds longDelay;

	[Token(Token = "0x4000B58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private WaitForSeconds mediumDelay;

	[Token(Token = "0x6000AEC")]
	[Address(RVA = "0x9372C8", Offset = "0x9372C8", VA = "0x9372C8", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000AED")]
	[Address(RVA = "0x937388", Offset = "0x937388", VA = "0x937388")]
	private void Start()
	{
	}

	[Token(Token = "0x6000AEE")]
	[Address(RVA = "0x935D24", Offset = "0x935D24", VA = "0x935D24")]
	public void ShowLocally(int newScore, bool newPersonalHighScore)
	{
	}

	[Token(Token = "0x6000AEF")]
	[Address(RVA = "0x9375C0", Offset = "0x9375C0", VA = "0x9375C0")]
	[IteratorStateMachine(typeof(<ShowResults>d__27))]
	private IEnumerator ShowResults()
	{
		return null;
	}

	[Token(Token = "0x6000AF0")]
	[Address(RVA = "0x937650", Offset = "0x937650", VA = "0x937650")]
	[PunRPC]
	private void ShowEndlessHighscoreEffectRPC(int positionIndex)
	{
	}

	[Token(Token = "0x6000AF1")]
	[Address(RVA = "0x93768C", Offset = "0x93768C", VA = "0x93768C")]
	private void OnCountdownStarted()
	{
	}

	[Token(Token = "0x6000AF2")]
	[Address(RVA = "0x9377F0", Offset = "0x9377F0", VA = "0x9377F0")]
	private void OnConfirmModeStart()
	{
	}

	[Token(Token = "0x6000AF3")]
	[Address(RVA = "0x937690", Offset = "0x937690", VA = "0x937690")]
	public void HideWithDelay()
	{
	}

	[Token(Token = "0x6000AF4")]
	[Address(RVA = "0x9377F4", Offset = "0x9377F4", VA = "0x9377F4", Slot = "5")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x6000AF5")]
	[Address(RVA = "0x93797C", Offset = "0x93797C", VA = "0x93797C", Slot = "6")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000AF6")]
	[Address(RVA = "0x937ACC", Offset = "0x937ACC", VA = "0x937ACC")]
	public EndlessModeResultDisplayer()
	{
	}
}
[Token(Token = "0x20001AD")]
public class EndlessModeRewardSpawner : SingleInstanceNetworkedBehavior<EndlessModeRewardSpawner>
{
	[Token(Token = "0x4000B5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform[] spawnAnchors;

	[Token(Token = "0x4000B60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject bubblePrefab;

	[Token(Token = "0x4000B61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GameObject pickPotionUI;

	[Token(Token = "0x4000B62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private int maxPotionCount;

	[Token(Token = "0x4000B63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private float[] tierOdds;

	[Token(Token = "0x4000B64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private ConsumableType[] tier1Consumables;

	[Token(Token = "0x4000B65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private ConsumableType[] tier2Consumables;

	[Token(Token = "0x4000B66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private ConsumableType[] tier3Consumables;

	[Token(Token = "0x4000B67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private GameObject potionRackFullNoticePrefab;

	[Token(Token = "0x4000B68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private GameObject[] locallySpawnedConsumables;

	[Token(Token = "0x4000B69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private List<GameObject> spawnedBubbles;

	[Token(Token = "0x4000B6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private CookingNetworkManager cookingNetworkManager;

	[Token(Token = "0x4000B6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private ConsumableSpawner consumableSpawner;

	[Token(Token = "0x4000B6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private GameObject potionRackFullNoticeGO;

	[Token(Token = "0x4000B6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Transform potionRackFullNoticeT;

	[Token(Token = "0x4000B6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private ConsumableType[][] consumableTiers;

	[Token(Token = "0x4000B6F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private List<ConsumableType> selectedTierConsumables;

	[Token(Token = "0x17000166")]
	public bool potionSpawned
	{
		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0x938458", Offset = "0x938458", VA = "0x938458")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000B00")]
		[Address(RVA = "0x938460", Offset = "0x938460", VA = "0x938460")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000B01")]
	[Address(RVA = "0x93846C", Offset = "0x93846C", VA = "0x93846C", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000B02")]
	[Address(RVA = "0x93865C", Offset = "0x93865C", VA = "0x93865C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B03")]
	[Address(RVA = "0x934980", Offset = "0x934980", VA = "0x934980")]
	public void OnEndlessModeBreak(bool spawnRewards)
	{
	}

	[Token(Token = "0x6000B04")]
	[Address(RVA = "0x934CF8", Offset = "0x934CF8", VA = "0x934CF8")]
	public void OnEndlessModeFinished()
	{
	}

	[Token(Token = "0x6000B05")]
	[Address(RVA = "0x938B94", Offset = "0x938B94", VA = "0x938B94")]
	public bool PotionRackIsFull()
	{
		return default(bool);
	}

	[Token(Token = "0x6000B06")]
	[Address(RVA = "0x938CB0", Offset = "0x938CB0", VA = "0x938CB0")]
	public int GetEmptySlot()
	{
		return default(int);
	}

	[Token(Token = "0x6000B07")]
	[Address(RVA = "0x938DFC", Offset = "0x938DFC", VA = "0x938DFC")]
	public void OnNewLocalConsumableSpawned(GameObject newConsumable, int slot)
	{
	}

	[Token(Token = "0x6000B08")]
	[Address(RVA = "0x938818", Offset = "0x938818", VA = "0x938818")]
	public void RemoveRewardBubbles()
	{
	}

	[Token(Token = "0x6000B09")]
	[Address(RVA = "0x938918", Offset = "0x938918", VA = "0x938918")]
	private int RandomizePotion(int previousPotion)
	{
		return default(int);
	}

	[Token(Token = "0x6000B0A")]
	[Address(RVA = "0x938E74", Offset = "0x938E74", VA = "0x938E74")]
	public void DisplayPotionRackFull(Vector3 position)
	{
	}

	[Token(Token = "0x6000B0B")]
	[Address(RVA = "0x939060", Offset = "0x939060", VA = "0x939060")]
	public EndlessModeRewardSpawner()
	{
	}
}
[Token(Token = "0x20001AF")]
public class EndlessModeWaveSelecter : SingleInstanceNetworkedBehavior<EndlessModeWaveSelecter>, IPunObservable
{
	[Token(Token = "0x4000B72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private EndlessWaveList waveList;

	[Token(Token = "0x4000B73")]
	private const int customersBeforeWaveSwitch = 10;

	[Token(Token = "0x4000B74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<int, List<EndlessWaveData>> tieredWaveData;

	[Token(Token = "0x4000B75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int highestTier;

	[Token(Token = "0x4000B76")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int currentWaveNumber;

	[Token(Token = "0x4000B77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int currentTier;

	[Token(Token = "0x4000B78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int endlessWaveDataID;

	[Token(Token = "0x4000B79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private EndlessWaveData endlessWaveData;

	[Token(Token = "0x17000167")]
	public GrillRate currentGrillRate
	{
		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0x934F58", Offset = "0x934F58", VA = "0x934F58")]
		get
		{
			return default(GrillRate);
		}
	}

	[Token(Token = "0x17000168")]
	public SandwichSizes currentSandwichSizes
	{
		[Token(Token = "0x6000B0F")]
		[Address(RVA = "0x934FD8", Offset = "0x934FD8", VA = "0x934FD8")]
		get
		{
			return default(SandwichSizes);
		}
	}

	[Token(Token = "0x6000B10")]
	[Address(RVA = "0x939260", Offset = "0x939260", VA = "0x939260", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000B11")]
	[Address(RVA = "0x935620", Offset = "0x935620", VA = "0x935620")]
	public float[] GetCurrentWaveProbability(int customerCount)
	{
		return null;
	}

	[Token(Token = "0x6000B12")]
	[Address(RVA = "0x936BB8", Offset = "0x936BB8", VA = "0x936BB8")]
	public void ResetWaveProgression()
	{
	}

	[Token(Token = "0x6000B13")]
	[Address(RVA = "0x9394D8", Offset = "0x9394D8", VA = "0x9394D8", Slot = "6")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000B14")]
	[Address(RVA = "0x9396C8", Offset = "0x9396C8", VA = "0x9396C8")]
	public EndlessModeWaveSelecter()
	{
	}
}
[Token(Token = "0x20001B0")]
public class EndlessRewardDisplay : UnityEngine.MonoBehaviour
{
	[Serializable]
	[Token(Token = "0x20001B1")]
	public class UpcomingReward
	{
		[Token(Token = "0x4000B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TextMeshPro countNeeded;

		[Token(Token = "0x4000B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SpriteRenderer spriteRenderer;

		[Token(Token = "0x6000B18")]
		[Address(RVA = "0x939CB0", Offset = "0x939CB0", VA = "0x939CB0")]
		public UpcomingReward()
		{
		}
	}

	[Token(Token = "0x4000B7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TextMeshPro yourHighScore;

	[Token(Token = "0x4000B7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMeshPro latestRewardCount;

	[Token(Token = "0x4000B7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private SpriteRenderer latestRewardCheckmark;

	[Token(Token = "0x4000B7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private UpcomingReward[] upcomingRewards;

	[Token(Token = "0x4000B7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GameObject nextRewardsParent;

	[Token(Token = "0x4000B7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private GameObject allRewardsClaimedParent;

	[Token(Token = "0x4000B80")]
	private const int numUpcomingRewardsToDisplay = 4;

	[Token(Token = "0x6000B15")]
	[Address(RVA = "0x939744", Offset = "0x939744", VA = "0x939744")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B16")]
	[Address(RVA = "0x939748", Offset = "0x939748", VA = "0x939748")]
	public void Show()
	{
	}

	[Token(Token = "0x6000B17")]
	[Address(RVA = "0x939CA8", Offset = "0x939CA8", VA = "0x939CA8")]
	public EndlessRewardDisplay()
	{
	}
}
[Token(Token = "0x20001B2")]
[CreateAssetMenu(fileName = "EndlessModeRewardList", menuName = "Endless Mode/RewardList")]
public class EndlessRewardList : ScriptableObject
{
	[Serializable]
	[Token(Token = "0x20001B3")]
	public struct RewardEntry
	{
		[Token(Token = "0x4000B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int customerCount;

		[Token(Token = "0x4000B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ItemRewardID rewardID;
	}

	[Token(Token = "0x4000B83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private RewardEntry[] rewardList;

	[Token(Token = "0x4000B84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool hasSorted;

	[Token(Token = "0x17000169")]
	public RewardEntry[] RewardList
	{
		[Token(Token = "0x6000B19")]
		[Address(RVA = "0x935C38", Offset = "0x935C38", VA = "0x935C38")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000B1A")]
	[Address(RVA = "0x939CB8", Offset = "0x939CB8", VA = "0x939CB8")]
	public void SortAscending()
	{
	}

	[Token(Token = "0x6000B1B")]
	[Address(RVA = "0x939DC0", Offset = "0x939DC0", VA = "0x939DC0")]
	public EndlessRewardList()
	{
	}
}
[Serializable]
[Token(Token = "0x20001B5")]
[CreateAssetMenu(fileName = "NewEndlessWaveData", menuName = "Endless Mode/Endless Wave Data")]
public class EndlessWaveData : ScriptableObject
{
	[Token(Token = "0x4000B89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float[] customerProbability;

	[Token(Token = "0x4000B8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int waveTier;

	[Token(Token = "0x4000B8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public GrillRate grillRate;

	[Token(Token = "0x4000B8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SandwichSizes sandwichSizes;

	[Token(Token = "0x6000B1F")]
	[Address(RVA = "0x939E54", Offset = "0x939E54", VA = "0x939E54")]
	public EndlessWaveData()
	{
	}
}
[Token(Token = "0x20001B6")]
[CreateAssetMenu(fileName = "NewEndlessWaveList", menuName = "Endless Mode/Endless Wave List")]
public class EndlessWaveList : ScriptableObject
{
	[Token(Token = "0x4000B8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<EndlessWaveData> endlessWaveList;

	[Token(Token = "0x6000B20")]
	[Address(RVA = "0x939EAC", Offset = "0x939EAC", VA = "0x939EAC")]
	public EndlessWaveList()
	{
	}
}
[Token(Token = "0x20001B7")]
public class EnvironmentLoader : SingleInstanceNetworkedBehavior<EnvironmentLoader>, IPunObservable
{
	[Token(Token = "0x20001B8")]
	public delegate void EnvironmentChangedHandler();

	[Token(Token = "0x20001B9")]
	[CompilerGenerated]
	private sealed class <ChangeEnvironmentRoutine>d__34 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EnvironmentLoader <>4__this;

		[Token(Token = "0x4000BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int oldSceneIndex;

		[Token(Token = "0x4000BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int newSceneIndex;

		[Token(Token = "0x1700016E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B3A")]
			[Address(RVA = "0x93AD4C", Offset = "0x93AD4C", VA = "0x93AD4C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B3C")]
			[Address(RVA = "0x93AD94", Offset = "0x93AD94", VA = "0x93AD94", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B37")]
		[Address(RVA = "0x93A448", Offset = "0x93A448", VA = "0x93A448")]
		[DebuggerHidden]
		public <ChangeEnvironmentRoutine>d__34(int <>1__state)
		{
		}

		[Token(Token = "0x6000B38")]
		[Address(RVA = "0x93A874", Offset = "0x93A874", VA = "0x93A874", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B39")]
		[Address(RVA = "0x93A878", Offset = "0x93A878", VA = "0x93A878", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B3B")]
		[Address(RVA = "0x93AD54", Offset = "0x93AD54", VA = "0x93AD54", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000B8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private string[] environments;

	[Token(Token = "0x4000B90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private string[] questEnvironments;

	[Token(Token = "0x4000B91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float blackScreenDurationTime;

	[Token(Token = "0x4000B92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Color[] fogColor;

	[Token(Token = "0x4000B93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private FogMode[] fogMode;

	[Token(Token = "0x4000B94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Header("Exponential, Exponential Squared")]
	[SerializeField]
	private float[] fogDensity;

	[Token(Token = "0x4000B95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Header("Linear")]
	[SerializeField]
	private float[] fogStart;

	[Token(Token = "0x4000B96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private float[] fogEnd;

	[Token(Token = "0x4000B97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Transform customerLightProbeAnchor;

	[Token(Token = "0x4000B98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Transform mainLightProbeAnchor;

	[Token(Token = "0x4000B9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private WaitForSeconds blackScreenDuration;

	[Token(Token = "0x4000B9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private FadeToBlack fadeToBlack;

	[Token(Token = "0x4000B9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private PlaySoundResult currentEnvironmentSound;

	[Token(Token = "0x4000B9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private PhotonCallbackManager photonCallbackManager;

	[Token(Token = "0x1700016A")]
	public bool InTransit
	{
		[Token(Token = "0x6000B23")]
		[Address(RVA = "0x939FEC", Offset = "0x939FEC", VA = "0x939FEC")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000B24")]
		[Address(RVA = "0x939FF4", Offset = "0x939FF4", VA = "0x939FF4")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700016B")]
	public int CurrentEnvironmentIndex
	{
		[Token(Token = "0x6000B26")]
		[Address(RVA = "0x93A008", Offset = "0x93A008", VA = "0x93A008")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000B25")]
		[Address(RVA = "0x93A000", Offset = "0x93A000", VA = "0x93A000")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700016C")]
	public Transform CustomerLightProbeAnchor
	{
		[Token(Token = "0x6000B27")]
		[Address(RVA = "0x93A010", Offset = "0x93A010", VA = "0x93A010")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700016D")]
	public Transform MainLightProbeAnchor
	{
		[Token(Token = "0x6000B28")]
		[Address(RVA = "0x93A018", Offset = "0x93A018", VA = "0x93A018")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x14000014")]
	public event EnvironmentChangedHandler OnEnvironmentChanged
	{
		[Token(Token = "0x6000B21")]
		[Address(RVA = "0x939EB4", Offset = "0x939EB4", VA = "0x939EB4")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000B22")]
		[Address(RVA = "0x939F50", Offset = "0x939F50", VA = "0x939F50")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000B29")]
	[Address(RVA = "0x93A020", Offset = "0x93A020", VA = "0x93A020", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000B2A")]
	[Address(RVA = "0x93A0C0", Offset = "0x93A0C0", VA = "0x93A0C0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B2B")]
	[Address(RVA = "0x93A33C", Offset = "0x93A33C", VA = "0x93A33C")]
	private void OnMasterClientChanged(PhotonPlayer newMaster)
	{
	}

	[Token(Token = "0x6000B2C")]
	[Address(RVA = "0x936BD0", Offset = "0x936BD0", VA = "0x936BD0")]
	public void ChangeEnvironment(int newEnvironmentIndex)
	{
	}

	[Token(Token = "0x6000B2D")]
	[Address(RVA = "0x93A3CC", Offset = "0x93A3CC", VA = "0x93A3CC")]
	[IteratorStateMachine(typeof(<ChangeEnvironmentRoutine>d__34))]
	private IEnumerator ChangeEnvironmentRoutine(int oldSceneIndex, int newSceneIndex)
	{
		return null;
	}

	[Token(Token = "0x6000B2E")]
	[Address(RVA = "0x93A470", Offset = "0x93A470", VA = "0x93A470")]
	private string GetEnvironment(int index)
	{
		return null;
	}

	[Token(Token = "0x6000B2F")]
	[Address(RVA = "0x93A508", Offset = "0x93A508", VA = "0x93A508", Slot = "6")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000B30")]
	[Address(RVA = "0x93A5F4", Offset = "0x93A5F4", VA = "0x93A5F4", Slot = "5")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x6000B31")]
	[Address(RVA = "0x93A6F4", Offset = "0x93A6F4", VA = "0x93A6F4")]
	public EnvironmentLoader()
	{
	}
}
[Token(Token = "0x20001BA")]
public class FadeToBlack : SingleInstanceBehavior<FadeToBlack>
{
	[Token(Token = "0x20001BB")]
	[CompilerGenerated]
	private sealed class <FadeOutRoutine>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FadeToBlack <>4__this;

		[Token(Token = "0x4000BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action onFadeComplete;

		[Token(Token = "0x17000172")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B4B")]
			[Address(RVA = "0x93B17C", Offset = "0x93B17C", VA = "0x93B17C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000173")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B4D")]
			[Address(RVA = "0x93B1C4", Offset = "0x93B1C4", VA = "0x93B1C4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B48")]
		[Address(RVA = "0x93AF68", Offset = "0x93AF68", VA = "0x93AF68")]
		[DebuggerHidden]
		public <FadeOutRoutine>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x6000B49")]
		[Address(RVA = "0x93B0A0", Offset = "0x93B0A0", VA = "0x93B0A0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B4A")]
		[Address(RVA = "0x93B0A4", Offset = "0x93B0A4", VA = "0x93B0A4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B4C")]
		[Address(RVA = "0x93B184", Offset = "0x93B184", VA = "0x93B184", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001BC")]
	[CompilerGenerated]
	private sealed class <FadeInRoutine>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FadeToBlack <>4__this;

		[Token(Token = "0x4000BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action onFadeComplete;

		[Token(Token = "0x17000174")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000B51")]
			[Address(RVA = "0x93B2A0", Offset = "0x93B2A0", VA = "0x93B2A0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000175")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000B53")]
			[Address(RVA = "0x93B2E8", Offset = "0x93B2E8", VA = "0x93B2E8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0x93B004", Offset = "0x93B004", VA = "0x93B004")]
		[DebuggerHidden]
		public <FadeInRoutine>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x6000B4F")]
		[Address(RVA = "0x93B1CC", Offset = "0x93B1CC", VA = "0x93B1CC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000B50")]
		[Address(RVA = "0x93B1D0", Offset = "0x93B1D0", VA = "0x93B1D0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B52")]
		[Address(RVA = "0x93B2A8", Offset = "0x93B2A8", VA = "0x93B2A8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000BA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Renderer fadeToBlackRenderer;

	[Token(Token = "0x4000BA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float fadeSpeed;

	[Token(Token = "0x4000BA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private MaterialPropertyBlock propertyBlockAlpha;

	[Token(Token = "0x4000BA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float fadeAlphaBacking;

	[Token(Token = "0x4000BA9")]
	private const string propertyAlpha = "_Alpha";

	[Token(Token = "0x17000170")]
	public bool Fading
	{
		[Token(Token = "0x6000B3D")]
		[Address(RVA = "0x93AD9C", Offset = "0x93AD9C", VA = "0x93AD9C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000B3E")]
		[Address(RVA = "0x93ADA4", Offset = "0x93ADA4", VA = "0x93ADA4")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000171")]
	private float FadeAlpha
	{
		[Token(Token = "0x6000B40")]
		[Address(RVA = "0x93AE40", Offset = "0x93AE40", VA = "0x93AE40")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0x93ADB0", Offset = "0x93ADB0", VA = "0x93ADB0")]
		set
		{
		}
	}

	[Token(Token = "0x6000B41")]
	[Address(RVA = "0x93AE48", Offset = "0x93AE48", VA = "0x93AE48", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000B42")]
	[Address(RVA = "0x93A2F8", Offset = "0x93A2F8", VA = "0x93A2F8")]
	public void FadeOutImmediately()
	{
	}

	[Token(Token = "0x6000B43")]
	[Address(RVA = "0x93ACD4", Offset = "0x93ACD4", VA = "0x93ACD4")]
	public void FadeOut([Optional] Action onFadeComplete)
	{
	}

	[Token(Token = "0x6000B44")]
	[Address(RVA = "0x93AEF4", Offset = "0x93AEF4", VA = "0x93AEF4")]
	[IteratorStateMachine(typeof(<FadeOutRoutine>d__15))]
	private IEnumerator FadeOutRoutine(Action onFadeComplete)
	{
		return null;
	}

	[Token(Token = "0x6000B45")]
	[Address(RVA = "0x93AD04", Offset = "0x93AD04", VA = "0x93AD04")]
	public void FadeIn([Optional] Action OnFadeInComplete)
	{
	}

	[Token(Token = "0x6000B46")]
	[Address(RVA = "0x93AF90", Offset = "0x93AF90", VA = "0x93AF90")]
	[IteratorStateMachine(typeof(<FadeInRoutine>d__17))]
	private IEnumerator FadeInRoutine(Action onFadeComplete)
	{
		return null;
	}

	[Token(Token = "0x6000B47")]
	[Address(RVA = "0x93B02C", Offset = "0x93B02C", VA = "0x93B02C")]
	public FadeToBlack()
	{
	}
}
[Token(Token = "0x20001BD")]
public class FinalBossVisuals : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x20001BE")]
	public enum Animation
	{
		[Token(Token = "0x4000BCC")]
		Idle,
		[Token(Token = "0x4000BCD")]
		Accept,
		[Token(Token = "0x4000BCE")]
		Eat,
		[Token(Token = "0x4000BCF")]
		NextOne,
		[Token(Token = "0x4000BD0")]
		Win,
		[Token(Token = "0x4000BD1")]
		Fail,
		[Token(Token = "0x4000BD2")]
		Leave
	}

	[Token(Token = "0x4000BB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool isLeavingBacking;

	[Token(Token = "0x4000BB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Renderer myRenderer;

	[Token(Token = "0x4000BB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Renderer crownRenderer;

	[Token(Token = "0x4000BB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Animator animator;

	[Token(Token = "0x4000BB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float fadeInTime;

	[Token(Token = "0x4000BB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private bool isFemale;

	[Token(Token = "0x4000BB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private MaterialPropertyBlock propertyBlock;

	[Token(Token = "0x4000BB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private TimeSlowdownHandler timeSlowdown;

	[Token(Token = "0x4000BBA")]
	private const float hitAnimationVelocityThreshold = 5f;

	[Token(Token = "0x4000BBB")]
	private const float hitLightAnimationVelocityThreshold = 2f;

	[Token(Token = "0x4000BBC")]
	private const float hitCooldown = 0.1f;

	[Token(Token = "0x4000BBD")]
	private const string triggerHit = "hit";

	[Token(Token = "0x4000BBE")]
	private const string triggerLightHit = "lightHit";

	[Token(Token = "0x4000BBF")]
	private const string triggerAccept = "reactionPerfect";

	[Token(Token = "0x4000BC0")]
	private const string triggerFail = "reactionNotPerfect";

	[Token(Token = "0x4000BC1")]
	private const string triggerLeave = "leaving";

	[Token(Token = "0x4000BC2")]
	private const string triggerCelebrateVictory = "celebrateVictory";

	[Token(Token = "0x4000BC3")]
	private const string toggleIsFull = "isFull";

	[Token(Token = "0x4000BC4")]
	private const string grabbableTag = "Grabbable";

	[Token(Token = "0x4000BC5")]
	private const string propertyFadeRate = "_FadeRate";

	[Token(Token = "0x4000BC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private readonly string[] allTriggers;

	[Token(Token = "0x4000BC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool isFull;

	[Token(Token = "0x4000BC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float hitCooldownTimer;

	[Token(Token = "0x4000BC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool inIdleAnimation;

	[Token(Token = "0x4000BCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	private bool noSlowdown;

	[Token(Token = "0x17000176")]
	private CustomerType CustomerType
	{
		[Token(Token = "0x6000B54")]
		[Address(RVA = "0x93B2F0", Offset = "0x93B2F0", VA = "0x93B2F0")]
		get
		{
			return default(CustomerType);
		}
	}

	[Token(Token = "0x17000177")]
	public bool IsLeaving
	{
		[Token(Token = "0x6000B55")]
		[Address(RVA = "0x93B304", Offset = "0x93B304", VA = "0x93B304")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000B56")]
		[Address(RVA = "0x93B30C", Offset = "0x93B30C", VA = "0x93B30C")]
		set
		{
		}
	}

	[Token(Token = "0x6000B57")]
	[Address(RVA = "0x93B478", Offset = "0x93B478", VA = "0x93B478")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B58")]
	private T GetStateMachineBehaviour<T>() where T : StateMachineBehaviour
	{
		return null;
	}

	[Token(Token = "0x6000B59")]
	[Address(RVA = "0x93B7D4", Offset = "0x93B7D4", VA = "0x93B7D4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B5A")]
	[Address(RVA = "0x93BA1C", Offset = "0x93BA1C", VA = "0x93BA1C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B5B")]
	[Address(RVA = "0x93BA50", Offset = "0x93BA50", VA = "0x93BA50")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6000B5C")]
	[Address(RVA = "0x93B9F0", Offset = "0x93B9F0", VA = "0x93B9F0")]
	public void SlowAnimation(float speed)
	{
	}

	[Token(Token = "0x6000B5D")]
	[Address(RVA = "0x93B3D8", Offset = "0x93B3D8", VA = "0x93B3D8")]
	public void ResumeAnimation()
	{
	}

	[Token(Token = "0x6000B5E")]
	[Address(RVA = "0x93BBDC", Offset = "0x93BBDC", VA = "0x93BBDC")]
	private void OnEnterIdleAnimation()
	{
	}

	[Token(Token = "0x6000B5F")]
	[Address(RVA = "0x93BC28", Offset = "0x93BC28", VA = "0x93BC28")]
	private void OnLeavingUpdate(float normalizedTime)
	{
	}

	[Token(Token = "0x6000B60")]
	[Address(RVA = "0x93BC2C", Offset = "0x93BC2C", VA = "0x93BC2C")]
	private void SetOcclusion(float newValue)
	{
	}

	[Token(Token = "0x6000B61")]
	[Address(RVA = "0x93BCB8", Offset = "0x93BCB8", VA = "0x93BCB8")]
	public void HasLeft()
	{
	}

	[Token(Token = "0x6000B62")]
	[Address(RVA = "0x93BD24", Offset = "0x93BD24", VA = "0x93BD24")]
	public void FinishedEatingServing()
	{
	}

	[Token(Token = "0x6000B63")]
	[Address(RVA = "0x93B404", Offset = "0x93B404", VA = "0x93B404")]
	public void SetTrigger(string trigger)
	{
	}

	[Token(Token = "0x6000B64")]
	[Address(RVA = "0x93BD6C", Offset = "0x93BD6C", VA = "0x93BD6C")]
	public void PlayReactionAndEat(PlateScoring.Grade reaction, bool finalServing)
	{
	}

	[Token(Token = "0x6000B65")]
	[Address(RVA = "0x93BE8C", Offset = "0x93BE8C", VA = "0x93BE8C")]
	public void OnLevelFailed()
	{
	}

	[Token(Token = "0x6000B66")]
	[Address(RVA = "0x93BEAC", Offset = "0x93BEAC", VA = "0x93BEAC")]
	public void OnLevelComplete()
	{
	}

	[Token(Token = "0x6000B67")]
	[Address(RVA = "0x93BF20", Offset = "0x93BF20", VA = "0x93BF20")]
	public FinalBossVisuals()
	{
	}
}
[Token(Token = "0x20001BF")]
public class FinalLevelHandler : SingleInstanceBehavior<FinalLevelHandler>, IPunObservable
{
	[Token(Token = "0x4000BD3")]
	public const int MaxCustomerOnScreen = 3;

	[Token(Token = "0x4000BD4")]
	private const int maleIndex = 0;

	[Token(Token = "0x4000BD5")]
	private const int femaleIndex = 1;

	[Token(Token = "0x4000BD6")]
	private const int bossCount = 2;

	[Token(Token = "0x4000BD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly Quaternion rotationOffset;

	[Token(Token = "0x4000BD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private int bossMaleServeTargetCount;

	[Token(Token = "0x4000BD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private int bossFemaleServeTargetCount;

	[Token(Token = "0x4000BDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private CustomerType[] bonusCustomerRotation;

	[Token(Token = "0x4000BDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GameObject FinalBossVisualsMale;

	[Token(Token = "0x4000BDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private GameObject FinalBossVisualsFemale;

	[Token(Token = "0x4000BDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Transform[] bossVisualsAnchors;

	[Token(Token = "0x4000BDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int bonusCustomerIndex;

	[Token(Token = "0x4000BDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int bonusCustomersServed;

	[Token(Token = "0x4000BE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int[] bossServedCount;

	[Token(Token = "0x4000BE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int consumablesUsed;

	[Token(Token = "0x4000BE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private List<CustomerType> customersToSpawn;

	[Token(Token = "0x4000BE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private CookingRound cookingRound;

	[Token(Token = "0x4000BE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private CookingCup cookingCup;

	[Token(Token = "0x4000BE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private CookingRecipeFactory recipeFactory;

	[Token(Token = "0x4000BE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private CookingGameState gameState;

	[Token(Token = "0x4000BE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private GameObject[] bossGOs;

	[Token(Token = "0x4000BE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private FinalBossVisuals[] bossVisuals;

	[Token(Token = "0x4000BE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private StarGoalsHandler goalsHandler;

	[Token(Token = "0x17000178")]
	public int TotalOrders
	{
		[Token(Token = "0x6000B68")]
		[Address(RVA = "0x93C0D8", Offset = "0x93C0D8", VA = "0x93C0D8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000B69")]
	[Address(RVA = "0x93C100", Offset = "0x93C100", VA = "0x93C100", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000B6A")]
	[Address(RVA = "0x93C148", Offset = "0x93C148", VA = "0x93C148")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B6B")]
	[Address(RVA = "0x93C608", Offset = "0x93C608", VA = "0x93C608")]
	public bool OnPlateHandedIn(CustomerType customerType)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B6C")]
	[Address(RVA = "0x93C8A4", Offset = "0x93C8A4", VA = "0x93C8A4")]
	public RecipeIngredient[] GetNewRecipe(out CustomerType customerType)
	{
		return null;
	}

	[Token(Token = "0x6000B6D")]
	[Address(RVA = "0x93C7C0", Offset = "0x93C7C0", VA = "0x93C7C0")]
	private void SpawnBonusCustomer()
	{
	}

	[Token(Token = "0x6000B6E")]
	[Address(RVA = "0x93CAA8", Offset = "0x93CAA8", VA = "0x93CAA8")]
	public void StartFinalRound()
	{
	}

	[Token(Token = "0x6000B6F")]
	[Address(RVA = "0x93CC0C", Offset = "0x93CC0C", VA = "0x93CC0C")]
	private void OnRoundStart()
	{
	}

	[Token(Token = "0x6000B70")]
	[Address(RVA = "0x93CE9C", Offset = "0x93CE9C", VA = "0x93CE9C")]
	public void OnPlateDelivered(CustomerType customer, PlateScoring.Grade grade)
	{
	}

	[Token(Token = "0x6000B71")]
	[Address(RVA = "0x93CF3C", Offset = "0x93CF3C", VA = "0x93CF3C")]
	private void OnGameStateChanged(GameState oldState, GameState newState)
	{
	}

	[Token(Token = "0x6000B72")]
	[Address(RVA = "0x93D0DC", Offset = "0x93D0DC", VA = "0x93D0DC")]
	public int GetCustomerSlot(CustomerType customerType)
	{
		return default(int);
	}

	[Token(Token = "0x6000B73")]
	[Address(RVA = "0x93C774", Offset = "0x93C774", VA = "0x93C774")]
	public bool BossIsFull(bool isFemale)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B74")]
	[Address(RVA = "0x93D0FC", Offset = "0x93D0FC", VA = "0x93D0FC")]
	public void OnTimeSlowdownStart()
	{
	}

	[Token(Token = "0x6000B75")]
	[Address(RVA = "0x93D224", Offset = "0x93D224", VA = "0x93D224")]
	public void OnTimeSlowdownEnd()
	{
	}

	[Token(Token = "0x6000B76")]
	[Address(RVA = "0x93D280", Offset = "0x93D280", VA = "0x93D280")]
	private void OnCupEnd()
	{
	}

	[Token(Token = "0x6000B77")]
	[Address(RVA = "0x93D57C", Offset = "0x93D57C", VA = "0x93D57C")]
	internal void HideBosses()
	{
	}

	[Token(Token = "0x6000B78")]
	[Address(RVA = "0x93D648", Offset = "0x93D648", VA = "0x93D648")]
	private void OnConsumableUsed(ConsumableType type)
	{
	}

	[Token(Token = "0x6000B79")]
	[Address(RVA = "0x93D658", Offset = "0x93D658", VA = "0x93D658", Slot = "5")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x6000B7A")]
	[Address(RVA = "0x93D8F0", Offset = "0x93D8F0", VA = "0x93D8F0", Slot = "6")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000B7B")]
	[Address(RVA = "0x93DCB8", Offset = "0x93DCB8", VA = "0x93DCB8")]
	public FinalLevelHandler()
	{
	}
}
[Token(Token = "0x20001C0")]
public class CookingRecipeFactory : SingleInstanceBehavior<CookingRecipeFactory>
{
	[Token(Token = "0x20001C1")]
	public struct RecipeData
	{
		[Token(Token = "0x4000C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Recipe[] recipes;

		[Token(Token = "0x4000C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IngredientType[][] fridgeIngredients;
	}

	[Token(Token = "0x4000BEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<GrillRate, float> friedSpawnRate;

	[Token(Token = "0x4000BEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<SandwichSizes, float[]> recipeSizeDistribution;

	[Token(Token = "0x4000BED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int maxIngredientNumDif;

	[Token(Token = "0x4000BEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int maxPlayerIngredientNumDif;

	[Token(Token = "0x4000BEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int maxFriedIngredientCountForQuickCustomers;

	[Token(Token = "0x4000BF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private readonly IngredientType[] bread;

	[Token(Token = "0x4000BF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private readonly IngredientType[] fillings;

	[Token(Token = "0x4000BF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private readonly IngredientType[] neverAloneFillings;

	[Token(Token = "0x4000BF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public readonly IngredientType[] condimentsAndSpice;

	[Token(Token = "0x4000BF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<IngredientType> roundBread;

	[Token(Token = "0x4000BF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private List<IngredientType> roundFillings;

	[Token(Token = "0x4000BF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private List<IngredientType> roundNeverAloneFillings;

	[Token(Token = "0x4000BF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private List<IngredientType> roundAllFillings;

	[Token(Token = "0x4000BF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private RecipeData recipeData;

	[Token(Token = "0x4000BF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private List<IngredientType> availableIngredients;

	[Token(Token = "0x4000BFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private int[] ingredientDistribution;

	[Token(Token = "0x4000BFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private int[] ingredientUsagePerPlayer;

	[Token(Token = "0x4000BFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private int numRecipes;

	[Token(Token = "0x4000BFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private int hugeSandwichSize;

	[Token(Token = "0x4000BFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private CustomerRegistry customerRegistry;

	[Token(Token = "0x4000BFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private List<IngredientType> toRemove;

	[Token(Token = "0x17000179")]
	public bool FirstSetupComplete
	{
		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0x93DE7C", Offset = "0x93DE7C", VA = "0x93DE7C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0x93DE84", Offset = "0x93DE84", VA = "0x93DE84")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000B7E")]
	[Address(RVA = "0x93DE90", Offset = "0x93DE90", VA = "0x93DE90")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B7F")]
	[Address(RVA = "0x93DF58", Offset = "0x93DF58", VA = "0x93DF58")]
	public RecipeData GetRecipeList(CustomerType[] customers, SandwichSizes sandwichSizes, GrillRate grillRate, bool[] occupiedSeats, IngredientType[][] fridgeSetup, int hugeSandwichSize)
	{
		return default(RecipeData);
	}

	[Token(Token = "0x6000B80")]
	[Address(RVA = "0x935E74", Offset = "0x935E74", VA = "0x935E74")]
	public void InitRecipeGeneration(bool[] occupiedSeats, IngredientType[][] fridgeSetup, int hugeSandwichSize)
	{
	}

	[Token(Token = "0x6000B81")]
	[Address(RVA = "0x9351C4", Offset = "0x9351C4", VA = "0x9351C4")]
	public Recipe GetRecipe(CustomerType customer, GrillRate grillRate, int ingredientCount, IngredientType breadType)
	{
		return default(Recipe);
	}

	[Token(Token = "0x6000B82")]
	[Address(RVA = "0x93ED40", Offset = "0x93ED40", VA = "0x93ED40")]
	private bool ShouldFinishWithBread(bool comboFillingNecessary, IngredientType bottomBread, CustomerData customerData, RecipeIngredient[] ingredients)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B83")]
	[Address(RVA = "0x93E59C", Offset = "0x93E59C", VA = "0x93E59C")]
	private void RemoveBannedIngredients(List<IngredientType> ingredientList, List<IngredientType> availableIngredients)
	{
	}

	[Token(Token = "0x6000B84")]
	[Address(RVA = "0x93E678", Offset = "0x93E678", VA = "0x93E678")]
	private bool DetermineIfFried(GrillRate grillRate, IngredientType ingredientType)
	{
		return default(bool);
	}

	[Token(Token = "0x6000B85")]
	[Address(RVA = "0x93E380", Offset = "0x93E380", VA = "0x93E380")]
	private List<IngredientType> GetIngredientsAvailableInRound(IngredientType[][] fridgeSetup)
	{
		return null;
	}

	[Token(Token = "0x6000B86")]
	[Address(RVA = "0x93E0B8", Offset = "0x93E0B8", VA = "0x93E0B8")]
	private int[] GetRecipeDistribution(CustomerType[] customers, SandwichSizes sandwichSizes)
	{
		return null;
	}

	[Token(Token = "0x6000B87")]
	[Address(RVA = "0x935058", Offset = "0x935058", VA = "0x935058")]
	public int GetRandomRecipeSize(CustomerType customer, SandwichSizes sandwichSizes)
	{
		return default(int);
	}

	[Token(Token = "0x6000B88")]
	[Address(RVA = "0x93E754", Offset = "0x93E754", VA = "0x93E754")]
	private IngredientType EqualizedRandomizedIngredient(List<IngredientType> ingredientPool)
	{
		return default(IngredientType);
	}

	[Token(Token = "0x6000B89")]
	[Address(RVA = "0x93ED94", Offset = "0x93ED94", VA = "0x93ED94")]
	private RecipeIngredient[] LimitFriedIngredientCountForQuickCustomer(RecipeIngredient[] ingredients)
	{
		return null;
	}

	[Token(Token = "0x6000B8A")]
	[Address(RVA = "0x93E238", Offset = "0x93E238", VA = "0x93E238")]
	private IngredientType[] ShuffleBread(List<IngredientType> roundBread)
	{
		return null;
	}

	[Token(Token = "0x6000B8B")]
	[Address(RVA = "0x935150", Offset = "0x935150", VA = "0x935150")]
	public IngredientType GetRandomBread()
	{
		return default(IngredientType);
	}

	[Token(Token = "0x6000B8C")]
	[Address(RVA = "0x93EE74", Offset = "0x93EE74", VA = "0x93EE74")]
	public void SetRecipeGenerationValues(int maxIngredientCountDifference, int maxPlayerWorkloadDifference, float[] fryRates, float[,] sizeDistribution)
	{
	}

	[Token(Token = "0x6000B8D")]
	[Address(RVA = "0x93F110", Offset = "0x93F110", VA = "0x93F110")]
	public CookingRecipeFactory()
	{
	}
}
[Token(Token = "0x20001C3")]
public class DestroyIngredientOnTouch : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4000C06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private LayerMask targetLayer;

	[Token(Token = "0x6000B91")]
	[Address(RVA = "0x93F5C4", Offset = "0x93F5C4", VA = "0x93F5C4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000B92")]
	[Address(RVA = "0x93F61C", Offset = "0x93F61C", VA = "0x93F61C")]
	public void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000B93")]
	[Address(RVA = "0x93F7B8", Offset = "0x93F7B8", VA = "0x93F7B8")]
	public DestroyIngredientOnTouch()
	{
	}
}
[Token(Token = "0x20001C4")]
[DisallowMultipleComponent]
[RequireComponent(typeof(IngredientBase))]
public class DestructibleWhenThrown : NetworkedBehaviour
{
	[Token(Token = "0x4000C07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float speedThresholdPlayer;

	[Token(Token = "0x4000C08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float speedThresholdEnvironment;

	[Token(Token = "0x4000C09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Rigidbody rb;

	[Token(Token = "0x4000C0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private IngredientBase ingredient;

	[Token(Token = "0x4000C0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Grabbable grabbable;

	[Token(Token = "0x4000C0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 previousPos;

	[Token(Token = "0x6000B94")]
	[Address(RVA = "0x93F7C0", Offset = "0x93F7C0", VA = "0x93F7C0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000B95")]
	[Address(RVA = "0x93F7F0", Offset = "0x93F7F0", VA = "0x93F7F0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000B96")]
	[Address(RVA = "0x93F820", Offset = "0x93F820", VA = "0x93F820")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000B97")]
	[Address(RVA = "0x93FBFC", Offset = "0x93FBFC", VA = "0x93FBFC")]
	private void OnCollisionEnter(Collision other)
	{
	}

	[Token(Token = "0x6000B98")]
	[Address(RVA = "0x93FE64", Offset = "0x93FE64", VA = "0x93FE64")]
	[PunRPC]
	private void CollideRPC(Vector3 collisionPosition, Vector3 movementDirection)
	{
	}

	[Token(Token = "0x6000B99")]
	[Address(RVA = "0x93FFF0", Offset = "0x93FFF0", VA = "0x93FFF0")]
	public DestructibleWhenThrown()
	{
	}
}
[Token(Token = "0x20001C5")]
[DisallowMultipleComponent]
[RequireComponent(typeof(IngredientBase))]
public class Edible : NetworkedBehaviour
{
	[Token(Token = "0x4000C0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private IngredientBase ingredient;

	[Token(Token = "0x4000C0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Grabbable grabbable;

	[Token(Token = "0x4000C0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float eatDelay;

	[Token(Token = "0x4000C10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Color crumbColor;

	[Token(Token = "0x4000C11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float eatTimer;

	[Token(Token = "0x6000B9A")]
	[Address(RVA = "0x940004", Offset = "0x940004", VA = "0x940004")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000B9B")]
	[Address(RVA = "0x9400B4", Offset = "0x9400B4", VA = "0x9400B4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000B9C")]
	[Address(RVA = "0x940180", Offset = "0x940180", VA = "0x940180")]
	private void Update()
	{
	}

	[Token(Token = "0x6000B9D")]
	[Address(RVA = "0x9403A8", Offset = "0x9403A8", VA = "0x9403A8")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000B9E")]
	[Address(RVA = "0x940458", Offset = "0x940458", VA = "0x940458")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000B9F")]
	[Address(RVA = "0x9404F0", Offset = "0x9404F0", VA = "0x9404F0")]
	public void OnGrabEnd()
	{
	}

	[Token(Token = "0x6000BA0")]
	[Address(RVA = "0x9404F8", Offset = "0x9404F8", VA = "0x9404F8")]
	[PunRPC]
	private void EatRPC(float fryValue)
	{
	}

	[Token(Token = "0x6000BA1")]
	[Address(RVA = "0x9406E4", Offset = "0x9406E4", VA = "0x9406E4")]
	public Edible()
	{
	}
}
[Token(Token = "0x20001C6")]
public class FlameParticlePool : SingleInstanceBehavior<FlameParticlePool>
{
	[Token(Token = "0x4000C12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private ParticleSystem flameParticlesSerialized;

	[Token(Token = "0x4000C13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float emissionCycleSerialized;

	[Token(Token = "0x4000C14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ParticleSystem flameParticles;

	[Token(Token = "0x4000C15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static List<Transform> burningIngredients;

	[Token(Token = "0x4000C16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static List<Mesh> ingredientShape;

	[Token(Token = "0x4000C17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static List<float> timeLeftToEmit;

	[Token(Token = "0x4000C18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static Transform flameParticlesTransform;

	[Token(Token = "0x4000C19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static Quaternion emitUpwards;

	[Token(Token = "0x4000C1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static ParticleSystem.ShapeModule shapeModule;

	[Token(Token = "0x4000C1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static float emissionCycle;

	[Token(Token = "0x6000BA2")]
	[Address(RVA = "0x9406F8", Offset = "0x9406F8", VA = "0x9406F8", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000BA3")]
	[Address(RVA = "0x9407A4", Offset = "0x9407A4", VA = "0x9407A4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000BA4")]
	[Address(RVA = "0x940A04", Offset = "0x940A04", VA = "0x940A04")]
	public static void AddIngredientToPool(Transform t, Grillable grillable)
	{
	}

	[Token(Token = "0x6000BA5")]
	[Address(RVA = "0x940CD0", Offset = "0x940CD0", VA = "0x940CD0")]
	public static void RemoveIngredientFromPool(Transform t)
	{
	}

	[Token(Token = "0x6000BA6")]
	[Address(RVA = "0x940E38", Offset = "0x940E38", VA = "0x940E38")]
	public static void ClearAllParticles()
	{
	}

	[Token(Token = "0x6000BA7")]
	[Address(RVA = "0x940E9C", Offset = "0x940E9C", VA = "0x940E9C")]
	public FlameParticlePool()
	{
	}
}
[Token(Token = "0x20001C7")]
public class FlyingEmberPool : SingleInstanceBehavior<FlyingEmberPool>
{
	[Token(Token = "0x4000C1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private ParticleSystem flyingEmbersExposed;

	[Token(Token = "0x4000C1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static float[] emissionOdds;

	[Token(Token = "0x4000C1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static float[] emissionCycles;

	[Token(Token = "0x4000C1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static int[] burstCount;

	[Token(Token = "0x4000C20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static List<Transform> burningIngredients;

	[Token(Token = "0x4000C21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static List<float[]> timeLeftToEmit;

	[Token(Token = "0x4000C22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform flyingEmbersTransform;

	[Token(Token = "0x4000C23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Quaternion shootUpwards;

	[Token(Token = "0x4000C24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 positionOffset;

	[Token(Token = "0x4000C25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static ParticleSystem flyingEmbers;

	[Token(Token = "0x6000BA9")]
	[Address(RVA = "0x94106C", Offset = "0x94106C", VA = "0x94106C", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000BAA")]
	[Address(RVA = "0x94110C", Offset = "0x94110C", VA = "0x94110C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000BAB")]
	[Address(RVA = "0x9413FC", Offset = "0x9413FC", VA = "0x9413FC")]
	public static void AddIngredientToPool(Transform t)
	{
	}

	[Token(Token = "0x6000BAC")]
	[Address(RVA = "0x941684", Offset = "0x941684", VA = "0x941684")]
	public static void RemoveIngredientFromPool(Transform t)
	{
	}

	[Token(Token = "0x6000BAD")]
	[Address(RVA = "0x9417B0", Offset = "0x9417B0", VA = "0x9417B0")]
	public static void ClearAllParticles()
	{
	}

	[Token(Token = "0x6000BAE")]
	[Address(RVA = "0x941814", Offset = "0x941814", VA = "0x941814")]
	public FlyingEmberPool()
	{
	}
}
[Token(Token = "0x20001C8")]
public class FlyingEmbers : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x6000BB0")]
	[Address(RVA = "0x941A80", Offset = "0x941A80", VA = "0x941A80")]
	private void OnParticleCollision(GameObject other)
	{
	}

	[Token(Token = "0x6000BB1")]
	[Address(RVA = "0x941CA4", Offset = "0x941CA4", VA = "0x941CA4")]
	public FlyingEmbers()
	{
	}
}
[Token(Token = "0x20001C9")]
public class FryingGlow : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4000C26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleSystem glowSystem;

	[Token(Token = "0x6000BB2")]
	[Address(RVA = "0x941CAC", Offset = "0x941CAC", VA = "0x941CAC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000BB3")]
	[Address(RVA = "0x941CB0", Offset = "0x941CB0", VA = "0x941CB0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000BB4")]
	[Address(RVA = "0x941DA8", Offset = "0x941DA8", VA = "0x941DA8")]
	public void StartGlowing()
	{
	}

	[Token(Token = "0x6000BB5")]
	[Address(RVA = "0x941CB4", Offset = "0x941CB4", VA = "0x941CB4")]
	public void StopGlowing()
	{
	}

	[Token(Token = "0x6000BB6")]
	[Address(RVA = "0x941E2C", Offset = "0x941E2C", VA = "0x941E2C")]
	public FryingGlow()
	{
	}
}
[Token(Token = "0x20001CA")]
public enum FryState
{
	[Token(Token = "0x4000C28")]
	Unfried,
	[Token(Token = "0x4000C29")]
	Fried,
	[Token(Token = "0x4000C2A")]
	Burnt,
	[Token(Token = "0x4000C2B")]
	Burning
}
[Token(Token = "0x20001CB")]
public struct FryValuePair
{
	[Token(Token = "0x4000C2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public FryState state;

	[Token(Token = "0x4000C2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float value;

	[Token(Token = "0x6000BB8")]
	[Address(RVA = "0x941E58", Offset = "0x941E58", VA = "0x941E58")]
	public FryValuePair(FryState state, float value)
	{
	}
}
[Token(Token = "0x20001CC")]
public class FryValue
{
	[Token(Token = "0x4000C2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static FryValuePair[] fryStateValues;

	[Token(Token = "0x4000C2F")]
	public const float maxValue = 2.6f;

	[Token(Token = "0x6000BB9")]
	[Address(RVA = "0x941E64", Offset = "0x941E64", VA = "0x941E64")]
	public static float GetNextfryValue(float value)
	{
		return default(float);
	}

	[Token(Token = "0x6000BBA")]
	[Address(RVA = "0x941EC4", Offset = "0x941EC4", VA = "0x941EC4")]
	public static FryState GetFryState(float fryValue)
	{
		return default(FryState);
	}

	[Token(Token = "0x6000BBB")]
	[Address(RVA = "0x940668", Offset = "0x940668", VA = "0x940668")]
	public static float GetFryValue(FryState fryState)
	{
		return default(float);
	}

	[Token(Token = "0x6000BBC")]
	[Address(RVA = "0x941FD0", Offset = "0x941FD0", VA = "0x941FD0")]
	public static float GetNextStateThreshold(FryState fryState)
	{
		return default(float);
	}

	[Token(Token = "0x6000BBD")]
	[Address(RVA = "0x942098", Offset = "0x942098", VA = "0x942098")]
	public FryValue()
	{
	}
}
[Token(Token = "0x20001CD")]
[DisallowMultipleComponent]
[RequireComponent(typeof(IngredientBase))]
public class Grillable : NetworkedBehaviour, IPunObservable
{
	[Token(Token = "0x20001CE")]
	private enum GrillType
	{
		[Token(Token = "0x4000C47")]
		Slice,
		[Token(Token = "0x4000C48")]
		Whole
	}

	[Token(Token = "0x4000C30")]
	private const float extinguishSpeed = 10f;

	[Token(Token = "0x4000C31")]
	private const float fryStateFriedThresholdFraction = 0.05f;

	[Token(Token = "0x4000C32")]
	private const float fryStateBurntThresholdFraction = 0.05f;

	[Token(Token = "0x4000C33")]
	private const float burnMercyTime = 5f;

	[Token(Token = "0x4000C34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static MaterialPropertyBlock matPropBlock;

	[Token(Token = "0x4000C35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static float fryStateFriedThreshold;

	[Token(Token = "0x4000C36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static float fryStateBurntThreshold;

	[Token(Token = "0x4000C37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	public Renderer ingredientRenderer;

	[Token(Token = "0x4000C38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private HotGrabbable hotGrabbable;

	[NonSerialized]
	[Token(Token = "0x4000C39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform fireRoot;

	[NonSerialized]
	[Token(Token = "0x4000C3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public FryingGlow fryingGlow;

	[NonSerialized]
	[Token(Token = "0x4000C3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public ParticleSystem fireParticles;

	[NonSerialized]
	[Token(Token = "0x4000C3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject fireParticlesGlow;

	[Token(Token = "0x4000C3D")]
	private const float stateChangeThreshold = 10f;

	[Token(Token = "0x4000C3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GrillType grillType;

	[Token(Token = "0x4000C3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float burningValue;

	[Token(Token = "0x4000C40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float timeFried;

	[Token(Token = "0x4000C41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private FryState fryState;

	[Token(Token = "0x4000C42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float burnMercyTimer;

	[Token(Token = "0x4000C43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private bool isBeingExtinguished;

	[Token(Token = "0x4000C44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	private bool inWater;

	[Token(Token = "0x4000C45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
	private bool flyingEmberEmitting;

	[Token(Token = "0x1700017A")]
	public float CurrentFryValue
	{
		[Token(Token = "0x6000BBF")]
		[Address(RVA = "0x94215C", Offset = "0x94215C", VA = "0x94215C")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700017B")]
	public bool CanForceBurn
	{
		[Token(Token = "0x6000BC0")]
		[Address(RVA = "0x941C0C", Offset = "0x941C0C", VA = "0x941C0C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700017C")]
	public bool IsBuring
	{
		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0x94216C", Offset = "0x94216C", VA = "0x94216C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000BC2")]
	[Address(RVA = "0x94217C", Offset = "0x94217C", VA = "0x94217C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000BC3")]
	[Address(RVA = "0x94224C", Offset = "0x94224C", VA = "0x94224C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000BC4")]
	[Address(RVA = "0x942258", Offset = "0x942258", VA = "0x942258")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000BC5")]
	[Address(RVA = "0x9422D4", Offset = "0x9422D4", VA = "0x9422D4")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000BC6")]
	[Address(RVA = "0x9423F4", Offset = "0x9423F4", VA = "0x9423F4")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000BC7")]
	[Address(RVA = "0x942458", Offset = "0x942458", VA = "0x942458")]
	public void HideFryParticles()
	{
	}

	[Token(Token = "0x6000BC8")]
	[Address(RVA = "0x94261C", Offset = "0x94261C", VA = "0x94261C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000BC9")]
	[Address(RVA = "0x942794", Offset = "0x942794", VA = "0x942794")]
	public void UpdateVisualFryState()
	{
	}

	[Token(Token = "0x6000BCA")]
	[Address(RVA = "0x943024", Offset = "0x943024", VA = "0x943024")]
	public void UpdateVisualsBurnState()
	{
	}

	[Token(Token = "0x6000BCB")]
	[Address(RVA = "0x942B0C", Offset = "0x942B0C", VA = "0x942B0C")]
	private static void UpdateVisuals(Renderer renderer, float fryValue, GrillType grillType)
	{
	}

	[Token(Token = "0x6000BCC")]
	[Address(RVA = "0x943040", Offset = "0x943040", VA = "0x943040")]
	public void OnFryingStarted()
	{
	}

	[Token(Token = "0x6000BCD")]
	[Address(RVA = "0x943058", Offset = "0x943058", VA = "0x943058")]
	public void Fry(float elapsedTime)
	{
	}

	[Token(Token = "0x6000BCE")]
	[Address(RVA = "0x9430C8", Offset = "0x9430C8", VA = "0x9430C8")]
	public void OnFryingStopped()
	{
	}

	[Token(Token = "0x6000BCF")]
	[Address(RVA = "0x9430E0", Offset = "0x9430E0", VA = "0x9430E0")]
	public void SetFryValue(float fryValue)
	{
	}

	[Token(Token = "0x6000BD0")]
	[Address(RVA = "0x9430F0", Offset = "0x9430F0", VA = "0x9430F0")]
	public static void GetFryVisualsCopyTo(float fryValue, GameObject visualsCopy)
	{
	}

	[Token(Token = "0x6000BD1")]
	[Address(RVA = "0x942D14", Offset = "0x942D14", VA = "0x942D14")]
	private void PlayFriedFeedback()
	{
	}

	[Token(Token = "0x6000BD2")]
	[Address(RVA = "0x9432C0", Offset = "0x9432C0", VA = "0x9432C0")]
	[PunRPC]
	private void ForceBurnIngredientRPC()
	{
	}

	[Token(Token = "0x6000BD3")]
	[Address(RVA = "0x943300", Offset = "0x943300", VA = "0x943300")]
	[PunRPC]
	private void StartExtinguishFireRPC()
	{
	}

	[Token(Token = "0x6000BD4")]
	[Address(RVA = "0x943340", Offset = "0x943340", VA = "0x943340")]
	[PunRPC]
	private void StopExtinguishFireRPC()
	{
	}

	[Token(Token = "0x6000BD5")]
	[Address(RVA = "0x94252C", Offset = "0x94252C", VA = "0x94252C")]
	private void StopFire()
	{
	}

	[Token(Token = "0x6000BD6")]
	[Address(RVA = "0x942F6C", Offset = "0x942F6C", VA = "0x942F6C")]
	private void StartFlyingEmbersAndFlames()
	{
	}

	[Token(Token = "0x6000BD7")]
	[Address(RVA = "0x943388", Offset = "0x943388", VA = "0x943388")]
	public void ForceExtinguish()
	{
	}

	[Token(Token = "0x6000BD8")]
	[Address(RVA = "0x94340C", Offset = "0x94340C", VA = "0x94340C", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000BD9")]
	[Address(RVA = "0x943578", Offset = "0x943578", VA = "0x943578")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000BDA")]
	[Address(RVA = "0x9435F0", Offset = "0x9435F0", VA = "0x9435F0")]
	public Grillable()
	{
	}
}
[Token(Token = "0x20001CF")]
public class GrillingPopUpPool : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4000C49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject toastyPopUpPrefab;

	[Token(Token = "0x4000C4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject skullPopUpPrefab;

	[Token(Token = "0x4000C4B")]
	private const int toastyCount = 8;

	[Token(Token = "0x4000C4C")]
	private const int skullCount = 8;

	[Token(Token = "0x4000C4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Transform[] toastyPopUps;

	[Token(Token = "0x4000C4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static GameObject[] toastyPopUpGOs;

	[Token(Token = "0x4000C4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static Transform[] skullPopUps;

	[Token(Token = "0x4000C50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static GameObject[] skullPopUpGOs;

	[Token(Token = "0x4000C51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static int toastyIndex;

	[Token(Token = "0x4000C52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private static int skullIndex;

	[Token(Token = "0x6000BDB")]
	[Address(RVA = "0x9435F8", Offset = "0x9435F8", VA = "0x9435F8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000BDC")]
	[Address(RVA = "0x942E04", Offset = "0x942E04", VA = "0x942E04")]
	public static void DisplaySkullPopUp(Vector3 position)
	{
	}

	[Token(Token = "0x6000BDD")]
	[Address(RVA = "0x943158", Offset = "0x943158", VA = "0x943158")]
	public static void DisplayToastyPopUp(Vector3 position)
	{
	}

	[Token(Token = "0x6000BDE")]
	[Address(RVA = "0x943940", Offset = "0x943940", VA = "0x943940")]
	public GrillingPopUpPool()
	{
	}
}
[Token(Token = "0x20001D0")]
public abstract class IngredientBase : NetworkedBehaviour
{
	[Token(Token = "0x1700017D")]
	public abstract IngredientType IngredientType
	{
		[Token(Token = "0x6000BE0")]
		get;
	}

	[Token(Token = "0x1700017E")]
	public abstract bool IsRaw
	{
		[Token(Token = "0x6000BE1")]
		get;
	}

	[Token(Token = "0x1700017F")]
	public abstract bool poofOnDestroy
	{
		[Token(Token = "0x6000BE2")]
		get;
		[Token(Token = "0x6000BE3")]
		set;
	}

	[Token(Token = "0x17000180")]
	public abstract bool IsBeingDestroyed
	{
		[Token(Token = "0x6000BE4")]
		get;
		[Token(Token = "0x6000BE5")]
		set;
	}

	[Token(Token = "0x17000181")]
	public abstract bool CanBeDestroyedByThrow
	{
		[Token(Token = "0x6000BE6")]
		get;
	}

	[Token(Token = "0x17000182")]
	public abstract Color CrumbColor
	{
		[Token(Token = "0x6000BE7")]
		get;
	}

	[Token(Token = "0x17000183")]
	public abstract float GetFryValue
	{
		[Token(Token = "0x6000BE8")]
		get;
	}

	[Token(Token = "0x6000BE9")]
	[Address(RVA = "0x943A14", Offset = "0x943A14", VA = "0x943A14")]
	protected IngredientBase()
	{
	}
}
[Token(Token = "0x20001D1")]
public enum IngredientType
{
	[Token(Token = "0x4000C54")]
	None,
	[Token(Token = "0x4000C55")]
	Bread,
	[Token(Token = "0x4000C56")]
	Ham,
	[Token(Token = "0x4000C57")]
	Cheese,
	[Token(Token = "0x4000C58")]
	Salad,
	[Token(Token = "0x4000C59")]
	Tomato,
	[Token(Token = "0x4000C5A")]
	Mushroom,
	[Token(Token = "0x4000C5B")]
	DevilEgg,
	[Token(Token = "0x4000C5C")]
	Tentacle,
	[Token(Token = "0x4000C5D")]
	MoldyCheese,
	[Token(Token = "0x4000C5E")]
	Pumpkin,
	[Token(Token = "0x4000C5F")]
	BreadDark,
	[Token(Token = "0x4000C60")]
	Bagel,
	[Token(Token = "0x4000C61")]
	Salmon,
	[Token(Token = "0x4000C62")]
	Cauldron,
	[Token(Token = "0x4000C63")]
	Moon,
	[Token(Token = "0x4000C64")]
	Onion,
	[Token(Token = "0x4000C65")]
	Mayo,
	[Token(Token = "0x4000C66")]
	Ketchup,
	[Token(Token = "0x4000C67")]
	Spice,
	[Token(Token = "0x4000C68")]
	Tofu,
	[Token(Token = "0x4000C69")]
	Carrot,
	[Token(Token = "0x4000C6A")]
	Beet,
	[Token(Token = "0x4000C6B")]
	Egg,
	[Token(Token = "0x4000C6C")]
	Baguette,
	[Token(Token = "0x4000C6D")]
	Pepper,
	[Token(Token = "0x4000C6E")]
	RoyalSalad,
	[Token(Token = "0x4000C6F")]
	StarFruit,
	[Token(Token = "0x4000C70")]
	Truffle,
	[Token(Token = "0x4000C71")]
	Lobster,
	[Token(Token = "0x4000C72")]
	Avocado,
	[Token(Token = "0x4000C73")]
	RedOnion,
	[Token(Token = "0x4000C74")]
	CandyCane,
	[Token(Token = "0x4000C75")]
	Gingerbread,
	[Token(Token = "0x4000C76")]
	Potato,
	[Token(Token = "0x4000C77")]
	Snowman,
	[Token(Token = "0x4000C78")]
	Turkey
}
[Token(Token = "0x20001D2")]
public class IngredientPrefabRegistry : SingleInstanceBehavior<IngredientPrefabRegistry>
{
	[Token(Token = "0x4000C79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] ingredientPrefabs;

	[Token(Token = "0x4000C7A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] unprocessedIngredientPrefabs;

	[Token(Token = "0x4000C7B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<IngredientType, GameObject> prefabsDict;

	[Token(Token = "0x4000C7C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<IngredientType, GameObject> unProcessedPrefabsDict;

	[Token(Token = "0x4000C7D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Dictionary<IngredientType, Material> ingredientSliceMaterials;

	[Token(Token = "0x4000C7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Dictionary<IngredientType, IngredientSlice> ingredientsDict;

	[Token(Token = "0x6000BEA")]
	[Address(RVA = "0x943A1C", Offset = "0x943A1C", VA = "0x943A1C", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000BEB")]
	[Address(RVA = "0x943C68", Offset = "0x943C68", VA = "0x943C68")]
	public GameObject GetIngredientPrefab(IngredientType ingredientType)
	{
		return null;
	}

	[Token(Token = "0x6000BEC")]
	[Address(RVA = "0x943D60", Offset = "0x943D60", VA = "0x943D60")]
	public GameObject GetUnprocessedIngredientPrefab(IngredientType ingredientType)
	{
		return null;
	}

	[Token(Token = "0x6000BED")]
	[Address(RVA = "0x943E58", Offset = "0x943E58", VA = "0x943E58")]
	public IngredientSliceData GetIngredientData(IngredientType ingredientType)
	{
		return default(IngredientSliceData);
	}

	[Token(Token = "0x6000BEE")]
	[Address(RVA = "0x943F70", Offset = "0x943F70", VA = "0x943F70")]
	public Material GetIngredientSliceMaterial(IngredientType ingredientType)
	{
		return null;
	}

	[Token(Token = "0x6000BEF")]
	[Address(RVA = "0x944068", Offset = "0x944068", VA = "0x944068")]
	public IngredientPrefabRegistry()
	{
	}
}
[Serializable]
[Token(Token = "0x20001D3")]
public struct IngredientSliceData
{
	[Token(Token = "0x4000C7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public IngredientType ingredientType;

	[Token(Token = "0x4000C80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float softness;

	[Token(Token = "0x4000C81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float platePaddingTop;

	[Token(Token = "0x4000C82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float platePaddingBot;

	[Token(Token = "0x4000C83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float cuttingBoardYRotationOffset;

	[Token(Token = "0x4000C84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Sprite icon;

	[Token(Token = "0x4000C85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Sprite friedIcon;

	[Token(Token = "0x4000C86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Sprite burntIcon;

	[Token(Token = "0x4000C87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Color crumbColor;

	[Token(Token = "0x4000C88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("Optional top mesh used when the ingredient is the last ingredient type in the recipe and is correctly placed last")]
	public Mesh topMesh;

	[Token(Token = "0x4000C89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Mesh bottomMesh;

	[Token(Token = "0x17000184")]
	public bool HasTopSlice
	{
		[Token(Token = "0x6000BF0")]
		[Address(RVA = "0x9441C8", Offset = "0x9441C8", VA = "0x9441C8")]
		get
		{
			return default(bool);
		}
	}
}
[Token(Token = "0x20001D4")]
public class IngredientSlice : IngredientBase
{
	[Token(Token = "0x4000C8A")]
	private const float cleaverCollisionMercyTime = 1.8f;

	[Token(Token = "0x4000C8B")]
	private const float dropOnPlateSphereRadius = 0.05f;

	[Token(Token = "0x4000C8C")]
	private const string plateColliderName = "AddToPlateCollider";

	[Token(Token = "0x4000C8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Grabbable grabbable;

	[Token(Token = "0x4000C8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Grillable grillable;

	[Token(Token = "0x4000C8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public IngredientSliceData ingredientData;

	[Token(Token = "0x4000C90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject visuals;

	[Token(Token = "0x4000C93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Collider[] collidersHit;

	[Token(Token = "0x4000C94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private int justSpawnedLayer;

	[Token(Token = "0x4000C95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private int defaultLayer;

	[Token(Token = "0x4000C96")]
	private const string justSpawnedLayerName = "JustSpawnedSlice";

	[Token(Token = "0x4000C97")]
	private const string defaultLayerName = "Ingredients";

	[Token(Token = "0x17000185")]
	public override IngredientType IngredientType
	{
		[Token(Token = "0x6000BF1")]
		[Address(RVA = "0x944228", Offset = "0x944228", VA = "0x944228", Slot = "4")]
		get
		{
			return default(IngredientType);
		}
	}

	[Token(Token = "0x17000186")]
	public override bool IsRaw
	{
		[Token(Token = "0x6000BF2")]
		[Address(RVA = "0x944230", Offset = "0x944230", VA = "0x944230", Slot = "5")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000187")]
	public override float GetFryValue
	{
		[Token(Token = "0x6000BF3")]
		[Address(RVA = "0x944238", Offset = "0x944238", VA = "0x944238", Slot = "12")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000188")]
	public override Color CrumbColor
	{
		[Token(Token = "0x6000BF4")]
		[Address(RVA = "0x94425C", Offset = "0x94425C", VA = "0x94425C", Slot = "11")]
		get
		{
			return default(Color);
		}
	}

	[Token(Token = "0x17000189")]
	public override bool CanBeDestroyedByThrow
	{
		[Token(Token = "0x6000BF5")]
		[Address(RVA = "0x944268", Offset = "0x944268", VA = "0x944268", Slot = "10")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700018A")]
	public override bool IsBeingDestroyed
	{
		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0x9442E4", Offset = "0x9442E4", VA = "0x9442E4", Slot = "8")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000BF7")]
		[Address(RVA = "0x9442EC", Offset = "0x9442EC", VA = "0x9442EC", Slot = "9")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700018B")]
	public override bool poofOnDestroy
	{
		[Token(Token = "0x6000BF8")]
		[Address(RVA = "0x9442F8", Offset = "0x9442F8", VA = "0x9442F8", Slot = "6")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000BF9")]
		[Address(RVA = "0x944300", Offset = "0x944300", VA = "0x944300", Slot = "7")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700018C")]
	public Grabbable Grabbable
	{
		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0x94430C", Offset = "0x94430C", VA = "0x94430C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700018D")]
	public Grillable Grillable
	{
		[Token(Token = "0x6000BFB")]
		[Address(RVA = "0x944314", Offset = "0x944314", VA = "0x944314")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000BFC")]
	[Address(RVA = "0x94431C", Offset = "0x94431C", VA = "0x94431C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000BFD")]
	[Address(RVA = "0x944398", Offset = "0x944398", VA = "0x944398")]
	private void Start()
	{
	}

	[Token(Token = "0x6000BFE")]
	[Address(RVA = "0x9444A8", Offset = "0x9444A8", VA = "0x9444A8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000BFF")]
	[Address(RVA = "0x944610", Offset = "0x944610", VA = "0x944610")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000C00")]
	[Address(RVA = "0x9447B8", Offset = "0x9447B8", VA = "0x9447B8")]
	private void OnGrabEnd()
	{
	}

	[Token(Token = "0x6000C01")]
	[Address(RVA = "0x944890", Offset = "0x944890", VA = "0x944890")]
	private Plate GetNearestPlate()
	{
		return null;
	}

	[Token(Token = "0x6000C02")]
	[Address(RVA = "0x9449B8", Offset = "0x9449B8", VA = "0x9449B8")]
	private void AddIngredientToPlate(Plate nearestPlate, float dropForce)
	{
	}

	[Token(Token = "0x6000C03")]
	[Address(RVA = "0x944D70", Offset = "0x944D70", VA = "0x944D70")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000C04")]
	[Address(RVA = "0x944F38", Offset = "0x944F38", VA = "0x944F38")]
	private void CheckThrowIngredientStarGoal(Plate plate)
	{
	}

	[Token(Token = "0x6000C05")]
	[Address(RVA = "0x944ADC", Offset = "0x944ADC", VA = "0x944ADC")]
	public static IngredientType FindTypeToReplicate(RecipeIngredient[] recipeIngredients, List<StackedIngredientData> addedIngredients)
	{
		return default(IngredientType);
	}

	[Token(Token = "0x6000C06")]
	[Address(RVA = "0x94519C", Offset = "0x94519C", VA = "0x94519C")]
	public IngredientSlice()
	{
	}
}
[Token(Token = "0x20001D5")]
[RequireComponent(typeof(Grillable))]
[DisallowMultipleComponent]
[RequireComponent(typeof(Edible))]
[RequireComponent(typeof(Grabbable))]
[RequireComponent(typeof(HotGrabbable))]
public class IngredientWhole : IngredientBase, IPunObservable
{
	[Token(Token = "0x20001D6")]
	public delegate void OnIngredientDisabledHandler(IngredientWhole ingredient);

	[Token(Token = "0x4000C98")]
	private const float rawIngredientReleaseSphereRadius = 0.05f;

	[Token(Token = "0x4000C99")]
	private const string CuttingBoardName = "RawIngredientTriggerVolume";

	[Token(Token = "0x4000C9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private IngredientType ingredientType;

	[Token(Token = "0x4000C9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float chopProgressThreshold;

	[Token(Token = "0x4000C9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Grabbable grabbable;

	[Token(Token = "0x4000C9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Grillable grillable;

	[Token(Token = "0x4000C9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Renderer ingredientRenderer;

	[Token(Token = "0x4000C9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Collider[] colliders;

	[Token(Token = "0x4000CA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject visuals;

	[Token(Token = "0x4000CA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Vector3 fridgePositionOffset;

	[Token(Token = "0x4000CA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public Vector3 fridgeRotationOffset;

	[Token(Token = "0x4000CA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float fridgeScaleMultiplier;

	[Token(Token = "0x4000CA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[Header("Cutting Board Settings")]
	public Vector3 cuttingBoardPositionOffset;

	[Token(Token = "0x4000CA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Vector3 cuttingBoardRotation;

	[Token(Token = "0x4000CA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[Header("Slice Spawn Settings")]
	public Vector3 sliceSpawnRotationOffset;

	[Token(Token = "0x4000CAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Action<bool> OnGrabbed;

	[Token(Token = "0x4000CAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[HideInInspector]
	public int onCuttingBoardViewID;

	[Token(Token = "0x4000CAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Collider[] collidersHit;

	[Token(Token = "0x4000CAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private float destroyTimer;

	[Token(Token = "0x4000CB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private float destroyTime;

	[Token(Token = "0x1700018E")]
	public override IngredientType IngredientType
	{
		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0x9453CC", Offset = "0x9453CC", VA = "0x9453CC", Slot = "4")]
		get
		{
			return default(IngredientType);
		}
	}

	[Token(Token = "0x1700018F")]
	public override bool IsRaw
	{
		[Token(Token = "0x6000C0B")]
		[Address(RVA = "0x9453D4", Offset = "0x9453D4", VA = "0x9453D4", Slot = "5")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000190")]
	public override float GetFryValue
	{
		[Token(Token = "0x6000C0C")]
		[Address(RVA = "0x9453DC", Offset = "0x9453DC", VA = "0x9453DC", Slot = "12")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000191")]
	public override Color CrumbColor
	{
		[Token(Token = "0x6000C0D")]
		[Address(RVA = "0x945400", Offset = "0x945400", VA = "0x945400", Slot = "11")]
		get
		{
			return default(Color);
		}
	}

	[Token(Token = "0x17000192")]
	public override bool CanBeDestroyedByThrow
	{
		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0x9454FC", Offset = "0x9454FC", VA = "0x9454FC", Slot = "10")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000193")]
	public override bool poofOnDestroy
	{
		[Token(Token = "0x6000C0F")]
		[Address(RVA = "0x945578", Offset = "0x945578", VA = "0x945578", Slot = "6")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000C10")]
		[Address(RVA = "0x945580", Offset = "0x945580", VA = "0x945580", Slot = "7")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000194")]
	public override bool IsBeingDestroyed
	{
		[Token(Token = "0x6000C11")]
		[Address(RVA = "0x94558C", Offset = "0x94558C", VA = "0x94558C", Slot = "8")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000C12")]
		[Address(RVA = "0x945594", Offset = "0x945594", VA = "0x945594", Slot = "9")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000195")]
	public Grabbable Grabbable
	{
		[Token(Token = "0x6000C13")]
		[Address(RVA = "0x9455A0", Offset = "0x9455A0", VA = "0x9455A0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000196")]
	public Grillable Grillable
	{
		[Token(Token = "0x6000C14")]
		[Address(RVA = "0x9455A8", Offset = "0x9455A8", VA = "0x9455A8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000197")]
	public bool IsGrabbed
	{
		[Token(Token = "0x6000C15")]
		[Address(RVA = "0x9455B0", Offset = "0x9455B0", VA = "0x9455B0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000198")]
	public bool IsBurning
	{
		[Token(Token = "0x6000C16")]
		[Address(RVA = "0x9455CC", Offset = "0x9455CC", VA = "0x9455CC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000199")]
	private bool IsBurnt
	{
		[Token(Token = "0x6000C17")]
		[Address(RVA = "0x945648", Offset = "0x945648", VA = "0x945648")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700019A")]
	public float ChopProgressThreshold
	{
		[Token(Token = "0x6000C19")]
		[Address(RVA = "0x9456CC", Offset = "0x9456CC", VA = "0x9456CC")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000C18")]
		[Address(RVA = "0x9456C4", Offset = "0x9456C4", VA = "0x9456C4")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700019B")]
	public float ChopProgress
	{
		[Token(Token = "0x6000C1B")]
		[Address(RVA = "0x9456DC", Offset = "0x9456DC", VA = "0x9456DC")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000C1A")]
		[Address(RVA = "0x9456D4", Offset = "0x9456D4", VA = "0x9456D4")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x14000015")]
	public event OnIngredientDisabledHandler OnIngredientDisabled
	{
		[Token(Token = "0x6000C08")]
		[Address(RVA = "0x945294", Offset = "0x945294", VA = "0x945294")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000C09")]
		[Address(RVA = "0x945330", Offset = "0x945330", VA = "0x945330")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000C1C")]
	[Address(RVA = "0x9456E4", Offset = "0x9456E4", VA = "0x9456E4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000C1D")]
	[Address(RVA = "0x9456F0", Offset = "0x9456F0", VA = "0x9456F0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C1E")]
	[Address(RVA = "0x9457D0", Offset = "0x9457D0", VA = "0x9457D0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000C1F")]
	[Address(RVA = "0x9459CC", Offset = "0x9459CC", VA = "0x9459CC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000C20")]
	[Address(RVA = "0x945940", Offset = "0x945940", VA = "0x945940")]
	private void SetGfxAndPhx(bool flag)
	{
	}

	[Token(Token = "0x6000C21")]
	[Address(RVA = "0x945E40", Offset = "0x945E40", VA = "0x945E40")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000C22")]
	[Address(RVA = "0x945F04", Offset = "0x945F04", VA = "0x945F04")]
	private void Update()
	{
	}

	[Token(Token = "0x6000C23")]
	[Address(RVA = "0x946030", Offset = "0x946030", VA = "0x946030")]
	private void OnGrabBegin()
	{
	}

	[Token(Token = "0x6000C24")]
	[Address(RVA = "0x946060", Offset = "0x946060", VA = "0x946060")]
	private void OnRemoteGrabBegin()
	{
	}

	[Token(Token = "0x6000C25")]
	[Address(RVA = "0x946080", Offset = "0x946080", VA = "0x946080")]
	private void OnGrabEnd()
	{
	}

	[Token(Token = "0x6000C26")]
	[Address(RVA = "0x945D24", Offset = "0x945D24", VA = "0x945D24")]
	private void RemoveFromCuttingBoard()
	{
	}

	[Token(Token = "0x6000C27")]
	[Address(RVA = "0x946230", Offset = "0x946230", VA = "0x946230")]
	[PunRPC]
	private void ChopIngredientRPC(float force, bool superSharp)
	{
	}

	[Token(Token = "0x6000C28")]
	[Address(RVA = "0x946AE0", Offset = "0x946AE0", VA = "0x946AE0", Slot = "13")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000C29")]
	[Address(RVA = "0x9468B4", Offset = "0x9468B4", VA = "0x9468B4")]
	private void ChopEffect()
	{
	}

	[Token(Token = "0x6000C2A")]
	[Address(RVA = "0x946674", Offset = "0x946674", VA = "0x946674")]
	private void SliceEffect()
	{
	}

	[Token(Token = "0x6000C2B")]
	[Address(RVA = "0x946C44", Offset = "0x946C44", VA = "0x946C44")]
	public IngredientWhole()
	{
	}
}
[Serializable]
[Token(Token = "0x20001D7")]
public struct Recipe
{
	[Token(Token = "0x4000CB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public RecipeIngredient[] ingredients;

	[Token(Token = "0x6000C30")]
	[Address(RVA = "0x946E24", Offset = "0x946E24", VA = "0x946E24")]
	public Recipe(RecipeIngredient[] ingredients)
	{
	}

	[Token(Token = "0x6000C31")]
	[Address(RVA = "0x946E2C", Offset = "0x946E2C", VA = "0x946E2C", Slot = "3")]
	public override string ToString()
	{
		return null;
	}
}
[Serializable]
[Token(Token = "0x20001D8")]
public struct RecipeIngredient
{
	[Token(Token = "0x4000CB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public int typeInt;

	[Token(Token = "0x4000CB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public bool fried;

	[Token(Token = "0x1700019C")]
	public IngredientType type
	{
		[Token(Token = "0x6000C32")]
		[Address(RVA = "0x946F9C", Offset = "0x946F9C", VA = "0x946F9C")]
		get
		{
			return default(IngredientType);
		}
	}

	[Token(Token = "0x6000C33")]
	[Address(RVA = "0x946FA4", Offset = "0x946FA4", VA = "0x946FA4")]
	public RecipeIngredient(IngredientType type)
	{
	}

	[Token(Token = "0x6000C34")]
	[Address(RVA = "0x93E744", Offset = "0x93E744", VA = "0x93E744")]
	public RecipeIngredient(IngredientType type, bool fried)
	{
	}

	[Token(Token = "0x6000C35")]
	[Address(RVA = "0x946FB0", Offset = "0x946FB0", VA = "0x946FB0")]
	public float GetFryValue()
	{
		return default(float);
	}
}
[Token(Token = "0x20001D9")]
public class LeaderboardEndlessMode : SingleInstanceBehavior<LeaderboardEndlessMode>
{
	[Token(Token = "0x20001DA")]
	private enum LeaderboardType
	{
		[Token(Token = "0x4000CCC")]
		Global,
		[Token(Token = "0x4000CCD")]
		Friends
	}

	[Token(Token = "0x4000CB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject root;

	[Token(Token = "0x4000CB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMeshPro header;

	[Token(Token = "0x4000CB6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private PokeButton[] switchLeaderboard;

	[Token(Token = "0x4000CB7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private TextMeshPro[] nameFields;

	[Token(Token = "0x4000CB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private TextMeshPro[] scoreFields;

	[Token(Token = "0x4000CB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private GameObject solidBackground;

	[Token(Token = "0x4000CBA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GameObject splitBackground;

	[Token(Token = "0x4000CBB")]
	private const string localizationGlobal = "leaderboard_endless_global";

	[Token(Token = "0x4000CBC")]
	private const string localizationFriend = "leaderboard_endless_friends";

	[Token(Token = "0x4000CBD")]
	private const string localizationError = "leaderboard_endless_error";

	[Token(Token = "0x4000CBE")]
	private const string localizationLoading = "leaderboard_loading";

	[Token(Token = "0x4000CBF")]
	private const string leaderboardName = "EndlessMode";

	[Token(Token = "0x4000CC0")]
	private const string blankEntry = "-";

	[Token(Token = "0x4000CC1")]
	private const int entriesToDisplay = 8;

	[Token(Token = "0x4000CC2")]
	private const int topEntriesCount = 5;

	[Token(Token = "0x4000CC3")]
	private const int entriesRelativeToPlayerCount = 3;

	[Token(Token = "0x4000CC4")]
	private const int friendEntriesToGet = 50;

	[Token(Token = "0x4000CC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GameObject[] switchLeaderboardGO;

	[Token(Token = "0x4000CC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private LeaderboardType currentLeaderboardType;

	[Token(Token = "0x4000CC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Locale locale;

	[Token(Token = "0x4000CC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private List<LeaderboardResponse.Entry> leaderboardEntries;

	[Token(Token = "0x4000CC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private string localUserId;

	[Token(Token = "0x4000CCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private ILeaderboard leaderboardWrapper;

	[Token(Token = "0x6000C36")]
	[Address(RVA = "0x947008", Offset = "0x947008", VA = "0x947008")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C37")]
	[Address(RVA = "0x94745C", Offset = "0x94745C", VA = "0x94745C")]
	private void UpdateLocalUserId()
	{
	}

	[Token(Token = "0x6000C38")]
	[Address(RVA = "0x947518", Offset = "0x947518", VA = "0x947518")]
	private void SubmitOfflineHighscore(int leaderboardScore)
	{
	}

	[Token(Token = "0x6000C39")]
	[Address(RVA = "0x935C5C", Offset = "0x935C5C", VA = "0x935C5C")]
	public void SubmitHighScore(int highScore)
	{
	}

	[Token(Token = "0x6000C3A")]
	[Address(RVA = "0x947618", Offset = "0x947618", VA = "0x947618")]
	private void SwitchLeaderboard()
	{
	}

	[Token(Token = "0x6000C3B")]
	[Address(RVA = "0x9476C4", Offset = "0x9476C4", VA = "0x9476C4")]
	private void GetLeaderboard()
	{
	}

	[Token(Token = "0x6000C3C")]
	[Address(RVA = "0x9478EC", Offset = "0x9478EC", VA = "0x9478EC")]
	private void LeaderboardGetCallback(LeaderboardResponse response)
	{
	}

	[Token(Token = "0x6000C3D")]
	[Address(RVA = "0x94846C", Offset = "0x94846C", VA = "0x94846C")]
	private void LeaderboardGetPlayerCentricCallbackGlobal(LeaderboardResponse response)
	{
	}

	[Token(Token = "0x6000C3E")]
	[Address(RVA = "0x9486A0", Offset = "0x9486A0", VA = "0x9486A0")]
	private void LeaderboardGetFullFriendList(LeaderboardResponse response)
	{
	}

	[Token(Token = "0x6000C3F")]
	[Address(RVA = "0x947DD8", Offset = "0x947DD8", VA = "0x947DD8")]
	private void UpdateUI(bool splitScores, int friendlistRankOffset = -1)
	{
	}

	[Token(Token = "0x6000C40")]
	[Address(RVA = "0x9483AC", Offset = "0x9483AC", VA = "0x9483AC")]
	private void OnFailedGetLeaderBoard()
	{
	}

	[Token(Token = "0x6000C41")]
	[Address(RVA = "0x947398", Offset = "0x947398", VA = "0x947398")]
	private void ClearEntries()
	{
	}

	[Token(Token = "0x6000C42")]
	[Address(RVA = "0x948924", Offset = "0x948924", VA = "0x948924")]
	public void SetActive(bool isActive)
	{
	}

	[Token(Token = "0x6000C43")]
	[Address(RVA = "0x94896C", Offset = "0x94896C", VA = "0x94896C")]
	public void OnOpenEndlessLeaderboardPage()
	{
	}

	[Token(Token = "0x6000C44")]
	[Address(RVA = "0x9489E4", Offset = "0x9489E4", VA = "0x9489E4")]
	public LeaderboardEndlessMode()
	{
	}
}
[Token(Token = "0x20001DB")]
public class LeaderboardResponse
{
	[Token(Token = "0x20001DC")]
	public class Entry
	{
		[Token(Token = "0x4000CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly int Rank;

		[Token(Token = "0x4000CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly int Score;

		[Token(Token = "0x4000CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string PlatformID;

		[Token(Token = "0x6000C47")]
		[Address(RVA = "0x948A5C", Offset = "0x948A5C", VA = "0x948A5C")]
		public Entry(int rank, int score, string platformID)
		{
		}
	}

	[Token(Token = "0x4000CCE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool IsError;

	[Token(Token = "0x4000CCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<Entry> Entries;

	[Token(Token = "0x6000C46")]
	[Address(RVA = "0x948A54", Offset = "0x948A54", VA = "0x948A54")]
	public LeaderboardResponse()
	{
	}
}
[Token(Token = "0x20001DD")]
internal interface ILeaderboard
{
	[Token(Token = "0x6000C48")]
	void GetLeaderboardEntries(string leaderboardName, int entriesToDisplay, LeaderboardFilterType filterType, LeaderboardStartAt startAt, Action<LeaderboardResponse> callback);

	[Token(Token = "0x6000C49")]
	void WriteEntry(string leaderboardName, int score);

	[Token(Token = "0x6000C4A")]
	void InitLeaderboard(string leaderboardName);
}
[Token(Token = "0x20001DE")]
internal class LeaderboardMock : ILeaderboard
{
	[Token(Token = "0x20001DF")]
	private struct ScoreEntry
	{
		[Token(Token = "0x4000CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public long score;

		[Token(Token = "0x4000CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string fakePlatformId;

		[Token(Token = "0x6000C51")]
		[Address(RVA = "0x949280", Offset = "0x949280", VA = "0x949280")]
		public ScoreEntry(long score, string fakePlatformId)
		{
		}
	}

	[Token(Token = "0x4000CD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Dictionary<string, long> myScorePerLeaderboard;

	[Token(Token = "0x4000CD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private string myPlatformId;

	[Token(Token = "0x4000CD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private long? forceMyScore;

	[Token(Token = "0x4000CD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly List<ScoreEntry> globalLeaderboard;

	[Token(Token = "0x4000CD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly List<string> myFriends;

	[Token(Token = "0x6000C4B")]
	[Address(RVA = "0x948A98", Offset = "0x948A98", VA = "0x948A98")]
	public LeaderboardMock()
	{
	}

	[Token(Token = "0x6000C4C")]
	[Address(RVA = "0x949288", Offset = "0x949288", VA = "0x949288")]
	public void ForceMyScore(long score)
	{
	}

	[Token(Token = "0x6000C4D")]
	[Address(RVA = "0x9492F8", Offset = "0x9492F8", VA = "0x9492F8", Slot = "4")]
	public void GetLeaderboardEntries(string leaderboardName, int limit, LeaderboardFilterType filterType, LeaderboardStartAt startAt, Action<LeaderboardResponse> callback)
	{
	}

	[Token(Token = "0x6000C4E")]
	[Address(RVA = "0x949A38", Offset = "0x949A38", VA = "0x949A38", Slot = "5")]
	public void WriteEntry(string leaderboardName, int score)
	{
	}

	[Token(Token = "0x6000C4F")]
	[Address(RVA = "0x949B0C", Offset = "0x949B0C", VA = "0x949B0C", Slot = "6")]
	public void InitLeaderboard(string leaderboardName)
	{
	}
}
[Token(Token = "0x20001E2")]
internal class LeaderboardReal : ILeaderboard
{
	[Token(Token = "0x6000C59")]
	[Address(RVA = "0x949C3C", Offset = "0x949C3C", VA = "0x949C3C", Slot = "4")]
	public void GetLeaderboardEntries(string leaderboardName, int entriesToDisplay, LeaderboardFilterType filterType, LeaderboardStartAt startAt, Action<LeaderboardResponse> callback)
	{
	}

	[Token(Token = "0x6000C5A")]
	[Address(RVA = "0x949D54", Offset = "0x949D54", VA = "0x949D54", Slot = "5")]
	public void WriteEntry(string leaderboardName, int score)
	{
	}

	[Token(Token = "0x6000C5B")]
	[Address(RVA = "0x949E78", Offset = "0x949E78", VA = "0x949E78", Slot = "6")]
	public void InitLeaderboard(string leaderboardName)
	{
	}

	[Token(Token = "0x6000C5C")]
	[Address(RVA = "0x949E7C", Offset = "0x949E7C", VA = "0x949E7C")]
	public LeaderboardReal()
	{
	}
}
[Token(Token = "0x20001E5")]
public class LifeCounter : SingleInstanceNetworkedBehavior<LifeCounter>, IPunObservable
{
	[Token(Token = "0x4000CE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int stressfulMusicThreshold;

	[Token(Token = "0x4000CE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private MusicPitcher musicPitcher;

	[Token(Token = "0x1700019D")]
	public int LivesLeft
	{
		[Token(Token = "0x6000C62")]
		[Address(RVA = "0x94A2DC", Offset = "0x94A2DC", VA = "0x94A2DC")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000C63")]
		[Address(RVA = "0x94A2E4", Offset = "0x94A2E4", VA = "0x94A2E4")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700019E")]
	public int MaxLives
	{
		[Token(Token = "0x6000C64")]
		[Address(RVA = "0x94A2EC", Offset = "0x94A2EC", VA = "0x94A2EC")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000C65")]
		[Address(RVA = "0x94A2F4", Offset = "0x94A2F4", VA = "0x94A2F4")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700019F")]
	public bool IsAtCriticalHealth
	{
		[Token(Token = "0x6000C66")]
		[Address(RVA = "0x94A2FC", Offset = "0x94A2FC", VA = "0x94A2FC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000C67")]
	[Address(RVA = "0x94A3EC", Offset = "0x94A3EC", VA = "0x94A3EC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C68")]
	[Address(RVA = "0x94A4B4", Offset = "0x94A4B4", VA = "0x94A4B4")]
	public void ResetCounter(int maxLives)
	{
	}

	[Token(Token = "0x6000C69")]
	[Address(RVA = "0x94A4BC", Offset = "0x94A4BC", VA = "0x94A4BC")]
	public bool DecreaseAndCheckIfAtZeroLives(int livesLost)
	{
		return default(bool);
	}

	[Token(Token = "0x6000C6A")]
	[Address(RVA = "0x94A540", Offset = "0x94A540", VA = "0x94A540", Slot = "6")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000C6B")]
	[Address(RVA = "0x94A680", Offset = "0x94A680", VA = "0x94A680")]
	public LifeCounter()
	{
	}
}
[Token(Token = "0x20001E6")]
public class MusicPitcher : SingleInstanceNetworkedBehavior<MusicPitcher>
{
	[Token(Token = "0x20001E7")]
	[CompilerGenerated]
	private sealed class <ShiftPitch>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MusicPitcher <>4__this;

		[Token(Token = "0x4000CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float targetPitch;

		[Token(Token = "0x4000CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <startPitch>5__2;

		[Token(Token = "0x4000CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <transitionTime>5__3;

		[Token(Token = "0x170001A0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000C7A")]
			[Address(RVA = "0x94AD94", Offset = "0x94AD94", VA = "0x94AD94", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000C7C")]
			[Address(RVA = "0x94ADDC", Offset = "0x94ADDC", VA = "0x94ADDC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000C77")]
		[Address(RVA = "0x94AB9C", Offset = "0x94AB9C", VA = "0x94AB9C")]
		[DebuggerHidden]
		public <ShiftPitch>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x6000C78")]
		[Address(RVA = "0x94ACA0", Offset = "0x94ACA0", VA = "0x94ACA0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000C79")]
		[Address(RVA = "0x94ACA4", Offset = "0x94ACA4", VA = "0x94ACA4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C7B")]
		[Address(RVA = "0x94AD9C", Offset = "0x94AD9C", VA = "0x94AD9C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000CE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AudioMixer mixer;

	[Token(Token = "0x4000CE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private string keyPitch;

	[Token(Token = "0x4000CE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float pitchTransitionTime;

	[Token(Token = "0x4000CE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool platesSlowedDown;

	[Token(Token = "0x4000CEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private LifeCounter lifeCounter;

	[Token(Token = "0x4000CEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private CookingGameState cookingGameState;

	[Token(Token = "0x4000CEC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float slowPitch;

	[Token(Token = "0x4000CED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float normalPitch;

	[Token(Token = "0x4000CEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float fastPitch;

	[Token(Token = "0x6000C6C")]
	[Address(RVA = "0x94A6F4", Offset = "0x94A6F4", VA = "0x94A6F4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C6D")]
	[Address(RVA = "0x94A8C0", Offset = "0x94A8C0", VA = "0x94A8C0", Slot = "5")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x6000C6E")]
	[Address(RVA = "0x94A9A8", Offset = "0x94A9A8", VA = "0x94A9A8")]
	public void SlowDownLevelMusic()
	{
	}

	[Token(Token = "0x6000C6F")]
	[Address(RVA = "0x94AA64", Offset = "0x94AA64", VA = "0x94AA64")]
	public void RemoveLevelMusicSlowDownEffect()
	{
	}

	[Token(Token = "0x6000C70")]
	[Address(RVA = "0x94AAC8", Offset = "0x94AAC8", VA = "0x94AAC8")]
	public void RemoveLevelMusicSpeedUpEffect()
	{
	}

	[Token(Token = "0x6000C71")]
	[Address(RVA = "0x94A500", Offset = "0x94A500", VA = "0x94A500")]
	public void SpeedUpLevelMusic()
	{
	}

	[Token(Token = "0x6000C72")]
	[Address(RVA = "0x94AAF8", Offset = "0x94AAF8", VA = "0x94AAF8")]
	private void OnNewGameState(GameState oldState, GameState newState)
	{
	}

	[Token(Token = "0x6000C73")]
	[Address(RVA = "0x94AB4C", Offset = "0x94AB4C", VA = "0x94AB4C")]
	public void OnRoundStart()
	{
	}

	[Token(Token = "0x6000C74")]
	[Address(RVA = "0x94A9EC", Offset = "0x94A9EC", VA = "0x94A9EC")]
	[IteratorStateMachine(typeof(<ShiftPitch>d__17))]
	private IEnumerator ShiftPitch(float targetPitch)
	{
		return null;
	}

	[Token(Token = "0x6000C75")]
	[Address(RVA = "0x94ABC4", Offset = "0x94ABC4", VA = "0x94ABC4")]
	public void OnReturnToLobby()
	{
	}

	[Token(Token = "0x6000C76")]
	[Address(RVA = "0x94ABF4", Offset = "0x94ABF4", VA = "0x94ABF4")]
	public MusicPitcher()
	{
	}
}
[Token(Token = "0x20001E8")]
public class BlockListManager : SingleInstanceBehavior<BlockListManager>
{
	[Token(Token = "0x4000CF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private SaveManager saveManager;

	[Token(Token = "0x4000CF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private PhotonCallbackManager photonCallbackManager;

	[Token(Token = "0x170001A2")]
	public bool blockListAvailable
	{
		[Token(Token = "0x6000C7D")]
		[Address(RVA = "0x94ADE4", Offset = "0x94ADE4", VA = "0x94ADE4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000C7E")]
	[Address(RVA = "0x94AE00", Offset = "0x94AE00", VA = "0x94AE00")]
	private void Start()
	{
	}

	[Token(Token = "0x6000C7F")]
	[Address(RVA = "0x94B5C8", Offset = "0x94B5C8", VA = "0x94B5C8")]
	public CookoutUserId[] GetBlockedPlayersArray()
	{
		return null;
	}

	[Token(Token = "0x6000C80")]
	[Address(RVA = "0x94B6C4", Offset = "0x94B6C4", VA = "0x94B6C4")]
	public string[] GetBlockedPlayerNamesArray()
	{
		return null;
	}

	[Token(Token = "0x6000C81")]
	[Address(RVA = "0x94B7EC", Offset = "0x94B7EC", VA = "0x94B7EC")]
	public void BlockPlayer(CookoutUserData userData)
	{
	}

	[Token(Token = "0x6000C82")]
	[Address(RVA = "0x94BD04", Offset = "0x94BD04", VA = "0x94BD04")]
	public void UnblockPlayer(CookoutUserId userId)
	{
	}

	[Token(Token = "0x6000C83")]
	[Address(RVA = "0x94C134", Offset = "0x94C134", VA = "0x94C134")]
	private void UpdateRoomPlayerList()
	{
	}

	[Token(Token = "0x6000C84")]
	[Address(RVA = "0x94BBE8", Offset = "0x94BBE8", VA = "0x94BBE8")]
	private void UpdateRoomBlockList()
	{
	}

	[Token(Token = "0x6000C85")]
	[Address(RVA = "0x94C750", Offset = "0x94C750", VA = "0x94C750")]
	private void OnPhotonPlayerConnected(PhotonPlayer newPlayer)
	{
	}

	[Token(Token = "0x6000C86")]
	[Address(RVA = "0x94CE4C", Offset = "0x94CE4C", VA = "0x94CE4C")]
	private void OnPhotonPlayerDisconnected(PhotonPlayer player)
	{
	}

	[Token(Token = "0x6000C87")]
	[Address(RVA = "0x94CEB0", Offset = "0x94CEB0", VA = "0x94CEB0")]
	private void OnMasterClientChanged(PhotonPlayer newMasterClient)
	{
	}

	[Token(Token = "0x6000C88")]
	[Address(RVA = "0x94CF30", Offset = "0x94CF30", VA = "0x94CF30", Slot = "5")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x6000C89")]
	[Address(RVA = "0x94D2AC", Offset = "0x94D2AC", VA = "0x94D2AC")]
	public BlockListManager()
	{
	}
}
[Token(Token = "0x20001EA")]
public class CookingLauncher : SingleInstancePhotonCallbackListener<CookingLauncher>
{
	[Token(Token = "0x20001EB")]
	public enum Status
	{
		[Token(Token = "0x4000D0C")]
		Connecting,
		[Token(Token = "0x4000D0D")]
		Connected,
		[Token(Token = "0x4000D0E")]
		LoadingPlayerData,
		[Token(Token = "0x4000D0F")]
		ReadyToJoinRoom,
		[Token(Token = "0x4000D10")]
		JoiningRoom,
		[Token(Token = "0x4000D11")]
		Disconnected,
		[Token(Token = "0x4000D12")]
		StartingSinglePlayerOffline,
		[Token(Token = "0x4000D13")]
		OfflineMode_LoadingPlayerData,
		[Token(Token = "0x4000D14")]
		OfflineMode_ReadyToJoinRoom
	}

	[Token(Token = "0x20001EC")]
	[CompilerGenerated]
	private sealed class <Start>d__22 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CookingLauncher <>4__this;

		[Token(Token = "0x4000D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private SaveManager <save>5__2;

		[Token(Token = "0x170001A6")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000CB2")]
			[Address(RVA = "0x95336C", Offset = "0x95336C", VA = "0x95336C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A7")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CB4")]
			[Address(RVA = "0x9533B4", Offset = "0x9533B4", VA = "0x9533B4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CAF")]
		[Address(RVA = "0x94DA48", Offset = "0x94DA48", VA = "0x94DA48")]
		[DebuggerHidden]
		public <Start>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x6000CB0")]
		[Address(RVA = "0x9519A8", Offset = "0x9519A8", VA = "0x9519A8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CB1")]
		[Address(RVA = "0x9519AC", Offset = "0x9519AC", VA = "0x9519AC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CB3")]
		[Address(RVA = "0x953374", Offset = "0x953374", VA = "0x953374", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001ED")]
	[CompilerGenerated]
	private sealed class <WaitForPlayerData>d__27 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CookingLauncher <>4__this;

		[Token(Token = "0x170001A8")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000CB8")]
			[Address(RVA = "0x9535D0", Offset = "0x9535D0", VA = "0x9535D0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001A9")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CBA")]
			[Address(RVA = "0x953618", Offset = "0x953618", VA = "0x953618", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CB5")]
		[Address(RVA = "0x94DE88", Offset = "0x94DE88", VA = "0x94DE88")]
		[DebuggerHidden]
		public <WaitForPlayerData>d__27(int <>1__state)
		{
		}

		[Token(Token = "0x6000CB6")]
		[Address(RVA = "0x9533BC", Offset = "0x9533BC", VA = "0x9533BC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CB7")]
		[Address(RVA = "0x9533C0", Offset = "0x9533C0", VA = "0x9533C0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CB9")]
		[Address(RVA = "0x9535D8", Offset = "0x9535D8", VA = "0x9535D8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20001EE")]
	[CompilerGenerated]
	private sealed class <WaitForPlayerDataOffline>d__28 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CookingLauncher <>4__this;

		[Token(Token = "0x170001AA")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000CBE")]
			[Address(RVA = "0x953800", Offset = "0x953800", VA = "0x953800", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001AB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000CC0")]
			[Address(RVA = "0x953848", Offset = "0x953848", VA = "0x953848", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CBB")]
		[Address(RVA = "0x94DEB0", Offset = "0x94DEB0", VA = "0x94DEB0")]
		[DebuggerHidden]
		public <WaitForPlayerDataOffline>d__28(int <>1__state)
		{
		}

		[Token(Token = "0x6000CBC")]
		[Address(RVA = "0x953620", Offset = "0x953620", VA = "0x953620", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000CBD")]
		[Address(RVA = "0x953624", Offset = "0x953624", VA = "0x953624", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CBF")]
		[Address(RVA = "0x953808", Offset = "0x953808", VA = "0x953808", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000CFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string gameVersion;

	[Token(Token = "0x4000CFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool enableUnityLogging;

	[Token(Token = "0x4000D00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private CookoutApplicationLifecycle prefabCookoutApplicationLifecycle;

	[Token(Token = "0x4000D01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private LauncherMenu launcherMenu;

	[Token(Token = "0x4000D02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Vector3 defaultCameraPosition;

	[Token(Token = "0x4000D03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private Vector3 defaultCameraRotation;

	[Token(Token = "0x4000D04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private UnlockableAvatarCustomizationList unlockableAvatarCustomizationList;

	[Token(Token = "0x4000D05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private BuyableAvatarCustomizationList buyableAvatarCustomizationList;

	[Token(Token = "0x4000D06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public PokeButton[] roomsAvailable;

	[Token(Token = "0x4000D07")]
	private const float reconnectPhotonWaitTime = 3f;

	[Token(Token = "0x4000D08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float reconnectPhotonTimer;

	[Token(Token = "0x4000D09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool firstAvatarLoad;

	[Token(Token = "0x4000D0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Status connectingStatusCache;

	[Token(Token = "0x170001A3")]
	public bool ReadyToJoin
	{
		[Token(Token = "0x6000C92")]
		[Address(RVA = "0x94D57C", Offset = "0x94D57C", VA = "0x94D57C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001A4")]
	public bool ReadyToPlayOffline
	{
		[Token(Token = "0x6000C93")]
		[Address(RVA = "0x94D598", Offset = "0x94D598", VA = "0x94D598")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001A5")]
	public Status ConnectingStatus
	{
		[Token(Token = "0x6000C94")]
		[Address(RVA = "0x94D6F4", Offset = "0x94D6F4", VA = "0x94D6F4")]
		get
		{
			return default(Status);
		}
		[Token(Token = "0x6000C95")]
		[Address(RVA = "0x94D6FC", Offset = "0x94D6FC", VA = "0x94D6FC")]
		private set
		{
		}
	}

	[Token(Token = "0x6000C96")]
	[Address(RVA = "0x94D8CC", Offset = "0x94D8CC", VA = "0x94D8CC")]
	public void ResetIntro()
	{
	}

	[Token(Token = "0x6000C97")]
	[Address(RVA = "0x94D9E0", Offset = "0x94D9E0", VA = "0x94D9E0")]
	[IteratorStateMachine(typeof(<Start>d__22))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000C98")]
	[Address(RVA = "0x94DA70", Offset = "0x94DA70", VA = "0x94DA70")]
	private void Update()
	{
	}

	[Token(Token = "0x6000C99")]
	[Address(RVA = "0x94DB88", Offset = "0x94DB88", VA = "0x94DB88")]
	public void PlayOffline()
	{
	}

	[Token(Token = "0x6000C9A")]
	[Address(RVA = "0x94DAC8", Offset = "0x94DAC8", VA = "0x94DAC8")]
	private void Connect()
	{
	}

	[Token(Token = "0x6000C9B")]
	[Address(RVA = "0x94DCA0", Offset = "0x94DCA0", VA = "0x94DCA0", Slot = "39")]
	public override void OnJoinedLobby()
	{
	}

	[Token(Token = "0x6000C9C")]
	[Address(RVA = "0x94DE20", Offset = "0x94DE20", VA = "0x94DE20")]
	[IteratorStateMachine(typeof(<WaitForPlayerData>d__27))]
	private IEnumerator WaitForPlayerData()
	{
		return null;
	}

	[Token(Token = "0x6000C9D")]
	[Address(RVA = "0x94DC38", Offset = "0x94DC38", VA = "0x94DC38")]
	[IteratorStateMachine(typeof(<WaitForPlayerDataOffline>d__28))]
	private IEnumerator WaitForPlayerDataOffline()
	{
		return null;
	}

	[Token(Token = "0x6000C9E")]
	[Address(RVA = "0x94D71C", Offset = "0x94D71C", VA = "0x94D71C")]
	private void OnStatusChanged(Status oldState, Status newState)
	{
	}

	[Token(Token = "0x6000C9F")]
	[Address(RVA = "0x94DF5C", Offset = "0x94DF5C", VA = "0x94DF5C")]
	private void JoinOrCreateRoom(string roomName, RoomIntent roomIntent, RoomVisibility roomVisibility, ApplicationTracking.JoinData trackingData)
	{
	}

	[Token(Token = "0x6000CA0")]
	[Address(RVA = "0x94E5C4", Offset = "0x94E5C4", VA = "0x94E5C4")]
	public void JoinRoom(string roomName, ApplicationTracking.JoinData trackingData)
	{
	}

	[Token(Token = "0x6000CA1")]
	[Address(RVA = "0x94EA80", Offset = "0x94EA80", VA = "0x94EA80")]
	public void CreateRoom(RoomIntent roomIntent, RoomVisibility roomVisibility, int maxPlayerCount = 4)
	{
	}

	[Token(Token = "0x6000CA2")]
	[Address(RVA = "0x94F1FC", Offset = "0x94F1FC", VA = "0x94F1FC")]
	public void OnDeepLinkToRoom()
	{
	}

	[Token(Token = "0x6000CA3")]
	[Address(RVA = "0x94F348", Offset = "0x94F348", VA = "0x94F348", Slot = "45")]
	public override void OnReceivedRoomListUpdate()
	{
	}

	[Token(Token = "0x6000CA4")]
	[Address(RVA = "0x94F380", Offset = "0x94F380", VA = "0x94F380", Slot = "46")]
	public override void OnJoinedRoom()
	{
	}

	[Token(Token = "0x6000CA5")]
	[Address(RVA = "0x94FA18", Offset = "0x94FA18", VA = "0x94FA18", Slot = "36")]
	public override void OnPhotonCreateRoomFailed(object[] codeAndMsg)
	{
	}

	[Token(Token = "0x6000CA6")]
	[Address(RVA = "0x94FE04", Offset = "0x94FE04", VA = "0x94FE04", Slot = "49")]
	public override void OnPhotonRandomJoinFailed(object[] codeAndMsg)
	{
	}

	[Token(Token = "0x6000CA7")]
	[Address(RVA = "0x9501A4", Offset = "0x9501A4", VA = "0x9501A4", Slot = "37")]
	public override void OnPhotonJoinRoomFailed(object[] codeAndMsg)
	{
	}

	[Token(Token = "0x6000CA8")]
	[Address(RVA = "0x950590", Offset = "0x950590", VA = "0x950590", Slot = "41")]
	public override void OnFailedToConnectToPhoton(DisconnectCause cause)
	{
	}

	[Token(Token = "0x6000CA9")]
	[Address(RVA = "0x950958", Offset = "0x950958", VA = "0x950958", Slot = "43")]
	public override void OnConnectionFail(DisconnectCause cause)
	{
	}

	[Token(Token = "0x6000CAA")]
	[Address(RVA = "0x950D44", Offset = "0x950D44", VA = "0x950D44", Slot = "42")]
	public override void OnDisconnectedFromPhoton()
	{
	}

	[Token(Token = "0x6000CAB")]
	[Address(RVA = "0x95182C", Offset = "0x95182C", VA = "0x95182C")]
	public void StartSinglePlayer()
	{
	}

	[Token(Token = "0x6000CAC")]
	[Address(RVA = "0x9513F4", Offset = "0x9513F4", VA = "0x9513F4")]
	private void EnterOfflineSinglePlayerRoom()
	{
	}

	[Token(Token = "0x6000CAD")]
	[Address(RVA = "0x9518E8", Offset = "0x9518E8", VA = "0x9518E8")]
	public CookingLauncher()
	{
	}
}
[Token(Token = "0x20001F1")]
public class CookingNetworkManager : SingleInstancePhotonCallbackListener<CookingNetworkManager>
{
	[Token(Token = "0x20001F2")]
	public delegate void LocalPlayerMovedHandler(int spawnPointIndex);

	[Token(Token = "0x20001F3")]
	public delegate void OnPlayerMovedHandler(int playerID);

	[Token(Token = "0x20001F7")]
	[CompilerGenerated]
	private sealed class <ReturnToLauncherAfterDelay>d__59 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x4000D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CookingNetworkManager <>4__this;

		[Token(Token = "0x170001B3")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000D07")]
			[Address(RVA = "0x95A9AC", Offset = "0x95A9AC", VA = "0x95A9AC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B4")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000D09")]
			[Address(RVA = "0x95A9F4", Offset = "0x95A9F4", VA = "0x95A9F4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D04")]
		[Address(RVA = "0x959494", Offset = "0x959494", VA = "0x959494")]
		[DebuggerHidden]
		public <ReturnToLauncherAfterDelay>d__59(int <>1__state)
		{
		}

		[Token(Token = "0x6000D05")]
		[Address(RVA = "0x95A8FC", Offset = "0x95A8FC", VA = "0x95A8FC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000D06")]
		[Address(RVA = "0x95A900", Offset = "0x95A900", VA = "0x95A900", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D08")]
		[Address(RVA = "0x95A9B4", Offset = "0x95A9B4", VA = "0x95A9B4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000D22")]
	public const byte InstantiateVrAvatarEventCode = 123;

	[Token(Token = "0x4000D25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform[] playerSpawnPoints;

	[Token(Token = "0x4000D28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public List<string> playerPositionKeys;

	[Token(Token = "0x4000D29")]
	public const string masterPausedKey = "masterPaused";

	[Token(Token = "0x4000D2A")]
	public const int noPlayerPositionAssigned = -1;

	[Token(Token = "0x4000D2B")]
	public const int noNewPositionClaimed = -1;

	[Token(Token = "0x4000D2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private PhotonCallbackManager photonCallbackManager;

	[Token(Token = "0x4000D2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int pendingPositionClaim;

	[Token(Token = "0x4000D30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private bool isReturningToLauncher;

	[Token(Token = "0x4000D31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	private bool masterClientPaused;

	[Token(Token = "0x4000D32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float masterClientPausedTimer;

	[Token(Token = "0x170001AC")]
	public static GameObject waitingForHostText
	{
		[Token(Token = "0x6000CCA")]
		[Address(RVA = "0x953BB8", Offset = "0x953BB8", VA = "0x953BB8")]
		[CompilerGenerated]
		private get
		{
			return null;
		}
		[Token(Token = "0x6000CCB")]
		[Address(RVA = "0x953C00", Offset = "0x953C00", VA = "0x953C00")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170001AD")]
	public bool LocalPlayerAssignedPosition
	{
		[Token(Token = "0x6000CCC")]
		[Address(RVA = "0x953C4C", Offset = "0x953C4C", VA = "0x953C4C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001AE")]
	public int LocalPlayerPosIndex
	{
		[Token(Token = "0x6000CCD")]
		[Address(RVA = "0x953C5C", Offset = "0x953C5C", VA = "0x953C5C")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000CCE")]
		[Address(RVA = "0x953C64", Offset = "0x953C64", VA = "0x953C64")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001AF")]
	public PlayerVoIP LocalVoIP
	{
		[Token(Token = "0x6000CCF")]
		[Address(RVA = "0x953C6C", Offset = "0x953C6C", VA = "0x953C6C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0x953C74", Offset = "0x953C74", VA = "0x953C74")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170001B0")]
	public bool LeavingGame
	{
		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0x953C7C", Offset = "0x953C7C", VA = "0x953C7C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0x953C84", Offset = "0x953C84", VA = "0x953C84")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x14000016")]
	public event LocalPlayerMovedHandler OnLocalPlayerMoved
	{
		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0x953948", Offset = "0x953948", VA = "0x953948")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0x9539E4", Offset = "0x9539E4", VA = "0x9539E4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000017")]
	public event OnPlayerMovedHandler OnPlayerMoved
	{
		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0x953A80", Offset = "0x953A80", VA = "0x953A80")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000CC9")]
		[Address(RVA = "0x953B1C", Offset = "0x953B1C", VA = "0x953B1C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000CD3")]
	[Address(RVA = "0x953C90", Offset = "0x953C90", VA = "0x953C90", Slot = "62")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000CD4")]
	[Address(RVA = "0x953D38", Offset = "0x953D38", VA = "0x953D38")]
	private void Start()
	{
	}

	[Token(Token = "0x6000CD5")]
	[Address(RVA = "0x9549D0", Offset = "0x9549D0", VA = "0x9549D0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000CD6")]
	[Address(RVA = "0x954B6C", Offset = "0x954B6C", VA = "0x954B6C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000CD7")]
	[Address(RVA = "0x954CBC", Offset = "0x954CBC", VA = "0x954CBC")]
	private void OnApplicationPause(bool pause)
	{
	}

	[Token(Token = "0x6000CD8")]
	[Address(RVA = "0x955170", Offset = "0x955170", VA = "0x955170")]
	private void Update()
	{
	}

	[Token(Token = "0x6000CD9")]
	[Address(RVA = "0x9556AC", Offset = "0x9556AC", VA = "0x9556AC")]
	private void OnCookoutPhotonRecv(byte eventcode, object content, int senderid)
	{
	}

	[Token(Token = "0x6000CDA")]
	[Address(RVA = "0x955FCC", Offset = "0x955FCC", VA = "0x955FCC")]
	private void OnMasterClientChanged(PhotonPlayer newMasterClient)
	{
	}

	[Token(Token = "0x6000CDB")]
	[Address(RVA = "0x956140", Offset = "0x956140", VA = "0x956140")]
	private void SetLocalMasterClientPaused(bool isPaused)
	{
	}

	[Token(Token = "0x6000CDC")]
	[Address(RVA = "0x955E88", Offset = "0x955E88", VA = "0x955E88")]
	private void UpdateRemoteAvatarPosition(int remotePlayerID)
	{
	}

	[Token(Token = "0x6000CDD")]
	[Address(RVA = "0x955AE8", Offset = "0x955AE8", VA = "0x955AE8")]
	public void MoveLocalPlayerToNextFreePosition(bool newPlayer)
	{
	}

	[Token(Token = "0x6000CDE")]
	[Address(RVA = "0x95678C", Offset = "0x95678C", VA = "0x95678C")]
	public int GetNextFreePlayerPosition()
	{
		return default(int);
	}

	[Token(Token = "0x6000CDF")]
	[Address(RVA = "0x9568A4", Offset = "0x9568A4", VA = "0x9568A4")]
	public void MoveLocalPlayerToPosition(int newPositionIndex, int oldPositionIndex = -1)
	{
	}

	[Token(Token = "0x6000CE0")]
	[Address(RVA = "0x956B1C", Offset = "0x956B1C", VA = "0x956B1C", Slot = "52")]
	public override void OnPhotonCustomRoomPropertiesChanged(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
	{
	}

	[Token(Token = "0x6000CE1")]
	[Address(RVA = "0x956328", Offset = "0x956328", VA = "0x956328")]
	private void MovePlayerAvatar(int id, string positionKey)
	{
	}

	[Token(Token = "0x6000CE2")]
	[Address(RVA = "0x9570E8", Offset = "0x9570E8", VA = "0x9570E8")]
	public int GetLocalPlayerSpawnPointIndex()
	{
		return default(int);
	}

	[Token(Token = "0x6000CE3")]
	[Address(RVA = "0x957150", Offset = "0x957150", VA = "0x957150")]
	public int GetPlayerPositionIndex(int targetID)
	{
		return default(int);
	}

	[Token(Token = "0x6000CE4")]
	[Address(RVA = "0x9572D8", Offset = "0x9572D8", VA = "0x9572D8")]
	public int GetPlayerAtPosition(int playerSlotIndex)
	{
		return default(int);
	}

	[Token(Token = "0x6000CE5")]
	[Address(RVA = "0x957450", Offset = "0x957450", VA = "0x957450", Slot = "48")]
	public override void OnPhotonPlayerDisconnected(PhotonPlayer otherPlayer)
	{
	}

	[Token(Token = "0x6000CE6")]
	[Address(RVA = "0x958968", Offset = "0x958968", VA = "0x958968")]
	public bool[] GetOccupiedSeats()
	{
		return null;
	}

	[Token(Token = "0x6000CE7")]
	[Address(RVA = "0x958C00", Offset = "0x958C00", VA = "0x958C00", Slot = "43")]
	public override void OnConnectionFail(DisconnectCause cause)
	{
	}

	[Token(Token = "0x6000CE8")]
	[Address(RVA = "0x958C5C", Offset = "0x958C5C", VA = "0x958C5C")]
	public void ReturnToLauncher()
	{
	}

	[Token(Token = "0x6000CE9")]
	[Address(RVA = "0x95941C", Offset = "0x95941C", VA = "0x95941C")]
	[IteratorStateMachine(typeof(<ReturnToLauncherAfterDelay>d__59))]
	public IEnumerator ReturnToLauncherAfterDelay(float delay)
	{
		return null;
	}

	[Token(Token = "0x6000CEA")]
	[Address(RVA = "0x9594BC", Offset = "0x9594BC", VA = "0x9594BC", Slot = "34")]
	public override void OnLeftRoom()
	{
	}

	[Token(Token = "0x6000CEB")]
	[Address(RVA = "0x9598AC", Offset = "0x9598AC", VA = "0x9598AC", Slot = "42")]
	public override void OnDisconnectedFromPhoton()
	{
	}

	[Token(Token = "0x6000CEC")]
	[Address(RVA = "0x95908C", Offset = "0x95908C", VA = "0x95908C")]
	private void ClearPoolsAndMainSceneObjects()
	{
	}

	[Token(Token = "0x6000CED")]
	[Address(RVA = "0x959824", Offset = "0x959824", VA = "0x959824")]
	private void LoadLauncherScene()
	{
	}

	[Token(Token = "0x6000CEE")]
	[Address(RVA = "0x94CD40", Offset = "0x94CD40", VA = "0x94CD40")]
	public void KickPlayer(PhotonPlayer player)
	{
	}

	[Token(Token = "0x6000CEF")]
	[Address(RVA = "0x959EF8", Offset = "0x959EF8", VA = "0x959EF8")]
	[PunRPC]
	private void KickPlayerRPC(int playerID)
	{
	}

	[Token(Token = "0x6000CF0")]
	[Address(RVA = "0x959FCC", Offset = "0x959FCC", VA = "0x959FCC")]
	public static bool SinglePlayerActive()
	{
		return default(bool);
	}

	[Token(Token = "0x6000CF1")]
	[Address(RVA = "0x95A08C", Offset = "0x95A08C", VA = "0x95A08C")]
	public CookingNetworkManager()
	{
	}
}
[Token(Token = "0x20001F8")]
public class DisconnectedWarning : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4000D3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 offsetFromCamera;

	[Token(Token = "0x4000D3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Camera mainCamera;

	[Token(Token = "0x6000D0A")]
	[Address(RVA = "0x95A9FC", Offset = "0x95A9FC", VA = "0x95A9FC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000D0B")]
	[Address(RVA = "0x95AA68", Offset = "0x95AA68", VA = "0x95AA68")]
	private void Start()
	{
	}

	[Token(Token = "0x6000D0C")]
	[Address(RVA = "0x95AA84", Offset = "0x95AA84", VA = "0x95AA84")]
	private void Update()
	{
	}

	[Token(Token = "0x6000D0D")]
	[Address(RVA = "0x95AB54", Offset = "0x95AB54", VA = "0x95AB54")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000D0E")]
	[Address(RVA = "0x95AC54", Offset = "0x95AC54", VA = "0x95AC54")]
	public DisconnectedWarning()
	{
	}
}
[Token(Token = "0x20001F9")]
public class IdlePlayerKicker : SingleInstanceNetworkedBehavior<IdlePlayerKicker>, IPunObservable
{
	[Token(Token = "0x4000D40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private bool checkForIdlePlayer;

	[Token(Token = "0x4000D41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float idleTimeThreshold;

	[Token(Token = "0x4000D42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float idleTime;

	[Token(Token = "0x170001B5")]
	public bool IsActive
	{
		[Token(Token = "0x6000D0F")]
		[Address(RVA = "0x95AC5C", Offset = "0x95AC5C", VA = "0x95AC5C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000D10")]
	[Address(RVA = "0x95AC64", Offset = "0x95AC64", VA = "0x95AC64")]
	private void Update()
	{
	}

	[Token(Token = "0x6000D11")]
	[Address(RVA = "0x95AD68", Offset = "0x95AD68", VA = "0x95AD68")]
	private void KickIdlePlayer()
	{
	}

	[Token(Token = "0x6000D12")]
	[Address(RVA = "0x95AE48", Offset = "0x95AE48", VA = "0x95AE48")]
	[PunRPC]
	private void DebugSetIdleKickerActiveRPC(bool isActive)
	{
	}

	[Token(Token = "0x6000D13")]
	[Address(RVA = "0x95AE54", Offset = "0x95AE54", VA = "0x95AE54", Slot = "6")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000D14")]
	[Address(RVA = "0x95AF10", Offset = "0x95AF10", VA = "0x95AF10")]
	public IdlePlayerKicker()
	{
	}
}
[Token(Token = "0x20001FA")]
public interface IOwnershipTransferedListener
{
	[Token(Token = "0x6000D15")]
	void OnOwnershipTransfered(PhotonPlayer newOwner, PhotonPlayer oldOwner);
}
[Token(Token = "0x20001FB")]
public class LauncherMenu : SingleInstanceBehavior<LauncherMenu>
{
	[Token(Token = "0x20001FC")]
	public enum State
	{
		[Token(Token = "0x4000D6E")]
		Inactive,
		[Token(Token = "0x4000D6F")]
		Intro,
		[Token(Token = "0x4000D70")]
		GameModeSelect,
		[Token(Token = "0x4000D71")]
		Connecting,
		[Token(Token = "0x4000D72")]
		MultiplayerMenu,
		[Token(Token = "0x4000D73")]
		Settings,
		[Token(Token = "0x4000D74")]
		BlockList,
		[Token(Token = "0x4000D75")]
		AudioSettings,
		[Token(Token = "0x4000D76")]
		LanguageSettings,
		[Token(Token = "0x4000D77")]
		AvatarSelection,
		[Token(Token = "0x4000D78")]
		Error
	}

	[Token(Token = "0x20001FD")]
	private enum ActionOnReadyToJoin
	{
		[Token(Token = "0x4000D7A")]
		None,
		[Token(Token = "0x4000D7B")]
		SelectSinglePlayer,
		[Token(Token = "0x4000D7C")]
		SelectMultiplayer,
		[Token(Token = "0x4000D7D")]
		SelectTutorial
	}

	[Token(Token = "0x4000D43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Header("Button Materials")]
	private Material activeMultiplayerButtonMat;

	[Token(Token = "0x4000D44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Material inactiveButtonMat;

	[Token(Token = "0x4000D45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("References")]
	[SerializeField]
	private PokeButton singlePlayerButton;

	[Token(Token = "0x4000D46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private PokeButton multiPlayerButton;

	[Token(Token = "0x4000D47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private PokeButton settingsButton;

	[Token(Token = "0x4000D48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private PokeButton tutorialButton;

	[Token(Token = "0x4000D49")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private PokeButton avatarSelectionButton;

	[Token(Token = "0x4000D4A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Transform launcherMenuRoot;

	[Token(Token = "0x4000D4B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private GameObject modeSelectionRoot;

	[Token(Token = "0x4000D4C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private GameObject connectionStateRoot;

	[Token(Token = "0x4000D4D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private TextMeshPro connectingLabel;

	[Token(Token = "0x4000D4E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private TextMeshPro connectionAttemptCountText;

	[Token(Token = "0x4000D4F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private CookingLauncher launcher;

	[Token(Token = "0x4000D50")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private PokeButton playOfflineButton;

	[Token(Token = "0x4000D51")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private GameObject discordPrompt;

	[Token(Token = "0x4000D52")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private GameObject patchPrompt;

	[Token(Token = "0x4000D53")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private AudioSource musicAudioSource;

	[Token(Token = "0x4000D54")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private TextMeshPro versionNumberText;

	[Token(Token = "0x4000D55")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private GameObject errorMessageGO;

	[Token(Token = "0x4000D56")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private GameObject newAvatarOptionNotification;

	[Token(Token = "0x4000D57")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private PokeButton customizeDefaultAvatarButton;

	[Token(Token = "0x4000D58")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private PokeButton setupNewOculusAvatarButton;

	[NonSerialized]
	[Token(Token = "0x4000D59")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public bool versionMismatchWarn;

	[Token(Token = "0x4000D5A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private LauncherMenuIntro launcherMenuIntro;

	[Token(Token = "0x4000D5B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private LauncherMultiplayerMenu multiplayerMenu;

	[Token(Token = "0x4000D5C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private LauncherMenuPopup popup;

	[Token(Token = "0x4000D5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private LauncherMenuBlockList launcherMenuBlockList;

	[Token(Token = "0x4000D5E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private LauncherMenuSettings launcherMenuSettings;

	[Token(Token = "0x4000D5F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private LauncherMenuAudioSettings LauncherMenuAudioSettings;

	[Token(Token = "0x4000D60")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private LanguageSettings LauncherMenuLanguageSettings;

	[Token(Token = "0x4000D61")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private LauncherMenuPopup launcherMenuPopup;

	[Token(Token = "0x4000D62")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private AvatarSelectionMenu AvatarSelectionMenu;

	[Token(Token = "0x4000D63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private Renderer multiplayerButtonRenderer;

	[Token(Token = "0x4000D64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private LocalizedText multiplayerButtonText;

	[Token(Token = "0x4000D65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private State menuStateBacking;

	[Token(Token = "0x4000D66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	private ActionOnReadyToJoin actionOnReadyToJoin;

	[Token(Token = "0x4000D67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private int connectionAttemptCount;

	[Token(Token = "0x4000D68")]
	private const float newAvatarScaleMin = 0.01f;

	[Token(Token = "0x4000D69")]
	private const float newAvatarScaleMax = 0.012f;

	[Token(Token = "0x4000D6A")]
	private const float newAvatarCycleLength = 1.5f;

	[Token(Token = "0x4000D6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	private float newAvatarAnimationTick;

	[Token(Token = "0x4000D6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private Transform newAvatarOptionNotificationT;

	[Token(Token = "0x170001B6")]
	private State MenuState
	{
		[Token(Token = "0x6000D16")]
		[Address(RVA = "0x95AF8C", Offset = "0x95AF8C", VA = "0x95AF8C")]
		get
		{
			return default(State);
		}
		[Token(Token = "0x6000D17")]
		[Address(RVA = "0x95AF94", Offset = "0x95AF94", VA = "0x95AF94")]
		set
		{
		}
	}

	[Token(Token = "0x170001B7")]
	public static bool NewAvatarOptionsAvailable
	{
		[Token(Token = "0x6000D18")]
		[Address(RVA = "0x95B1D0", Offset = "0x95B1D0", VA = "0x95B1D0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000D19")]
	[Address(RVA = "0x95B29C", Offset = "0x95B29C", VA = "0x95B29C", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000D1A")]
	[Address(RVA = "0x95B82C", Offset = "0x95B82C", VA = "0x95B82C")]
	private void ShortcutToAvatarMenu(AvatarType expectedType)
	{
	}

	[Token(Token = "0x6000D1B")]
	[Address(RVA = "0x95B978", Offset = "0x95B978", VA = "0x95B978")]
	private void Start()
	{
	}

	[Token(Token = "0x6000D1C")]
	[Address(RVA = "0x95321C", Offset = "0x95321C", VA = "0x95321C")]
	public void Init()
	{
	}

	[Token(Token = "0x6000D1D")]
	[Address(RVA = "0x95BAC8", Offset = "0x95BAC8", VA = "0x95BAC8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000D1E")]
	[Address(RVA = "0x95BD00", Offset = "0x95BD00", VA = "0x95BD00")]
	public void VersionTextRefresh()
	{
	}

	[Token(Token = "0x6000D1F")]
	[Address(RVA = "0x95BCD0", Offset = "0x95BCD0", VA = "0x95BCD0")]
	private void OculusOnHMDMounted()
	{
	}

	[Token(Token = "0x6000D20")]
	[Address(RVA = "0x95BFA4", Offset = "0x95BFA4", VA = "0x95BFA4")]
	public void PlayOffline()
	{
	}

	[Token(Token = "0x6000D21")]
	[Address(RVA = "0x95C09C", Offset = "0x95C09C", VA = "0x95C09C")]
	public void SelectSinglePlayer()
	{
	}

	[Token(Token = "0x6000D22")]
	[Address(RVA = "0x95B9CC", Offset = "0x95B9CC", VA = "0x95B9CC")]
	public void SelectMultiPlayer()
	{
	}

	[Token(Token = "0x6000D23")]
	[Address(RVA = "0x95C338", Offset = "0x95C338", VA = "0x95C338")]
	public void SelectTutorial()
	{
	}

	[Token(Token = "0x6000D24")]
	[Address(RVA = "0x94D9C0", Offset = "0x94D9C0", VA = "0x94D9C0")]
	public void ShowIntro()
	{
	}

	[Token(Token = "0x6000D25")]
	[Address(RVA = "0x95C45C", Offset = "0x95C45C", VA = "0x95C45C")]
	public void ShowSettings()
	{
	}

	[Token(Token = "0x6000D26")]
	[Address(RVA = "0x94D9A0", Offset = "0x94D9A0", VA = "0x94D9A0")]
	public void ShowGameModeSelect()
	{
	}

	[Token(Token = "0x6000D27")]
	[Address(RVA = "0x95C47C", Offset = "0x95C47C", VA = "0x95C47C")]
	public void ShowBlockList()
	{
	}

	[Token(Token = "0x6000D28")]
	[Address(RVA = "0x95C49C", Offset = "0x95C49C", VA = "0x95C49C")]
	public void ShowAudioSettings()
	{
	}

	[Token(Token = "0x6000D29")]
	[Address(RVA = "0x95C4BC", Offset = "0x95C4BC", VA = "0x95C4BC")]
	public void ShowLanguageSettings()
	{
	}

	[Token(Token = "0x6000D2A")]
	[Address(RVA = "0x95B8DC", Offset = "0x95B8DC", VA = "0x95B8DC")]
	public void ShowAvatarSelection()
	{
	}

	[Token(Token = "0x6000D2B")]
	[Address(RVA = "0x95C4DC", Offset = "0x95C4DC", VA = "0x95C4DC")]
	public void ShowError()
	{
	}

	[Token(Token = "0x6000D2C")]
	[Address(RVA = "0x95C1BC", Offset = "0x95C1BC", VA = "0x95C1BC")]
	public void ShowConnecting(bool disconnected = false)
	{
	}

	[Token(Token = "0x6000D2D")]
	[Address(RVA = "0x95AFB0", Offset = "0x95AFB0", VA = "0x95AFB0")]
	private void OnMenuStateChanged(State oldState, State newState)
	{
	}

	[Token(Token = "0x6000D2E")]
	[Address(RVA = "0x94E494", Offset = "0x94E494", VA = "0x94E494")]
	public void OnReadyToJoinRoom()
	{
	}

	[Token(Token = "0x6000D2F")]
	[Address(RVA = "0x94F368", Offset = "0x94F368", VA = "0x94F368")]
	public void OnRoomListUpdate()
	{
	}

	[Token(Token = "0x6000D30")]
	[Address(RVA = "0x94E560", Offset = "0x94E560", VA = "0x94E560")]
	public void StartingSinglePlayer()
	{
	}

	[Token(Token = "0x6000D31")]
	[Address(RVA = "0x95D65C", Offset = "0x95D65C", VA = "0x95D65C")]
	public void InformAboutDeprecatedAvatars()
	{
	}

	[Token(Token = "0x6000D32")]
	[Address(RVA = "0x94E584", Offset = "0x94E584", VA = "0x94E584")]
	public void OnJoiningRoom()
	{
	}

	[Token(Token = "0x6000D33")]
	[Address(RVA = "0x94FDC4", Offset = "0x94FDC4", VA = "0x94FDC4")]
	public void OnRoomHostFailed()
	{
	}

	[Token(Token = "0x6000D34")]
	[Address(RVA = "0x950550", Offset = "0x950550", VA = "0x950550")]
	public void OnRoomJoinFailed()
	{
	}

	[Token(Token = "0x6000D35")]
	[Address(RVA = "0x94DDA4", Offset = "0x94DDA4", VA = "0x94DDA4")]
	public void OnConnectedToPhoton()
	{
	}

	[Token(Token = "0x6000D36")]
	[Address(RVA = "0x950954", Offset = "0x950954", VA = "0x950954")]
	public void OnFailedToConnectToPhoton()
	{
	}

	[Token(Token = "0x6000D37")]
	[Address(RVA = "0x950D20", Offset = "0x950D20", VA = "0x950D20")]
	public void OnConnectionFail()
	{
	}

	[Token(Token = "0x6000D38")]
	[Address(RVA = "0x95CAF4", Offset = "0x95CAF4", VA = "0x95CAF4")]
	public void DisplayVersionMismatchPopup()
	{
	}

	[Token(Token = "0x6000D39")]
	[Address(RVA = "0x95D88C", Offset = "0x95D88C", VA = "0x95D88C")]
	public void ClosePopup()
	{
	}

	[Token(Token = "0x6000D3A")]
	[Address(RVA = "0x9513C4", Offset = "0x9513C4", VA = "0x9513C4")]
	public void OnNetworkConnectionFailed()
	{
	}

	[Token(Token = "0x6000D3B")]
	[Address(RVA = "0x94F1D8", Offset = "0x94F1D8", VA = "0x94F1D8")]
	public void FailedToCreateUniqueRoomCode()
	{
	}

	[Token(Token = "0x6000D3C")]
	[Address(RVA = "0x95B9A8", Offset = "0x95B9A8", VA = "0x95B9A8")]
	public void OnKickedFromRoom()
	{
	}

	[Token(Token = "0x6000D3D")]
	[Address(RVA = "0x95D98C", Offset = "0x95D98C", VA = "0x95D98C")]
	public void HideLauncher(bool isActive)
	{
	}

	[Token(Token = "0x6000D3E")]
	[Address(RVA = "0x95CA4C", Offset = "0x95CA4C", VA = "0x95CA4C")]
	private void MultiplayerMenuButtonActiveSet(bool isActive)
	{
	}

	[Token(Token = "0x6000D3F")]
	[Address(RVA = "0x95DA48", Offset = "0x95DA48", VA = "0x95DA48")]
	public LauncherMenu()
	{
	}
}
[Token(Token = "0x20001FF")]
public class LauncherMenuAudioSettings : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4000D80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject SettingsParent;

	[Token(Token = "0x4000D81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private PokeButton exitButton;

	[Token(Token = "0x6000D46")]
	[Address(RVA = "0x95DC30", Offset = "0x95DC30", VA = "0x95DC30")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000D47")]
	[Address(RVA = "0x95CA14", Offset = "0x95CA14", VA = "0x95CA14")]
	public void Show(bool shouldShow)
	{
	}

	[Token(Token = "0x6000D48")]
	[Address(RVA = "0x95DD14", Offset = "0x95DD14", VA = "0x95DD14")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000D49")]
	[Address(RVA = "0x95DD1C", Offset = "0x95DD1C", VA = "0x95DD1C")]
	public LauncherMenuAudioSettings()
	{
	}
}
[Token(Token = "0x2000201")]
public class LauncherMenuBlockList : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x2000202")]
	private class BlockedPlayer
	{
		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CookoutUserId id;

		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string name;

		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool hasUnblocked;

		[Token(Token = "0x6000D58")]
		[Address(RVA = "0x95DF64", Offset = "0x95DF64", VA = "0x95DF64")]
		public BlockedPlayer(CookoutUserId id, string name)
		{
		}
	}

	[Token(Token = "0x4000D83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Row References")]
	[SerializeField]
	private PokeButton[] unblockButtons;

	[Token(Token = "0x4000D84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private MeshRenderer[] unblockButtonRenderers;

	[Token(Token = "0x4000D85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TextMeshPro[] unblockButtonTexts;

	[Token(Token = "0x4000D86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private TextMeshPro[] playerNameTexts;

	[Token(Token = "0x4000D87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Material pressedMaterial;

	[Token(Token = "0x4000D88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Material defaultMaterial;

	[Token(Token = "0x4000D89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	[Header("Other")]
	private PokeButton scrollBackButton;

	[Token(Token = "0x4000D8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private PokeButton scrollForwardButton;

	[Token(Token = "0x4000D8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private GameObject blockListParent;

	[Token(Token = "0x4000D8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private TextMeshPro failedToLoadText;

	[Token(Token = "0x4000D8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private GameObject noPlayerBlockedText;

	[Token(Token = "0x4000D8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private PokeButton exitButton;

	[Token(Token = "0x4000D8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private LauncherMenu launcherMenu;

	[Token(Token = "0x4000D90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private int entriesPerPage;

	[Token(Token = "0x4000D91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private BlockedPlayer[] blockedPlayers;

	[Token(Token = "0x4000D92")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private int currentPageIndex;

	[Token(Token = "0x6000D4C")]
	[Address(RVA = "0x95DD5C", Offset = "0x95DD5C", VA = "0x95DD5C")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000D4D")]
	[Address(RVA = "0x95C568", Offset = "0x95C568", VA = "0x95C568")]
	public void Show(bool shouldShow)
	{
	}

	[Token(Token = "0x6000D4E")]
	[Address(RVA = "0x95DFA8", Offset = "0x95DFA8", VA = "0x95DFA8")]
	private void OnBlockedPlayerNameUpdated(int listIndex)
	{
	}

	[Token(Token = "0x6000D4F")]
	[Address(RVA = "0x95DFD8", Offset = "0x95DFD8", VA = "0x95DFD8")]
	private void ShowPage(int pageIndex)
	{
	}

	[Token(Token = "0x6000D50")]
	[Address(RVA = "0x95E1A0", Offset = "0x95E1A0", VA = "0x95E1A0")]
	private void UpdateDisplayedPlayerRow(int buttonIndex, int listIndex)
	{
	}

	[Token(Token = "0x6000D51")]
	[Address(RVA = "0x95E36C", Offset = "0x95E36C", VA = "0x95E36C")]
	private void OnUnblockedPresed(int buttonIndex)
	{
	}

	[Token(Token = "0x6000D52")]
	[Address(RVA = "0x95E4AC", Offset = "0x95E4AC", VA = "0x95E4AC")]
	private void ScrollForwardPressed()
	{
	}

	[Token(Token = "0x6000D53")]
	[Address(RVA = "0x95E4B8", Offset = "0x95E4B8", VA = "0x95E4B8")]
	private void ScrollBackwardPressed()
	{
	}

	[Token(Token = "0x6000D54")]
	[Address(RVA = "0x95E35C", Offset = "0x95E35C", VA = "0x95E35C")]
	private int ButtonIndexToListIndex(int buttonIndex)
	{
		return default(int);
	}

	[Token(Token = "0x6000D55")]
	[Address(RVA = "0x95E190", Offset = "0x95E190", VA = "0x95E190")]
	private int ListIndexToButtonIndex(int listIndex)
	{
		return default(int);
	}

	[Token(Token = "0x6000D56")]
	[Address(RVA = "0x95E4C4", Offset = "0x95E4C4", VA = "0x95E4C4")]
	public LauncherMenuBlockList()
	{
	}
}
[Token(Token = "0x2000204")]
public class LauncherMenuIntro : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x2000205")]
	private enum IntroState
	{
		[Token(Token = "0x4000DC6")]
		Inactive,
		[Token(Token = "0x4000DC7")]
		GDPR,
		[Token(Token = "0x4000DC8")]
		Logo,
		[Token(Token = "0x4000DC9")]
		AvatarSelection,
		[Token(Token = "0x4000DCA")]
		Tutorial,
		[Token(Token = "0x4000DCB")]
		ConfirmSkipTutorial
	}

	[Token(Token = "0x4000D98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private IntroState stateBacking;

	[Token(Token = "0x4000D99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool hasStartedWithLogo;

	[Token(Token = "0x4000D9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Header("References")]
	private PokeButton checkboxGDPR;

	[Token(Token = "0x4000D9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private PokeButton acceptGDPRButton;

	[Token(Token = "0x4000D9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Material activeButtonMaterial;

	[Token(Token = "0x4000D9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Material inactiveButtonMaterial;

	[Token(Token = "0x4000D9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private MeshRenderer acceptGDPRButtonRenderer;

	[Token(Token = "0x4000D9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private PokeButton playButton;

	[Token(Token = "0x4000DA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private PokeButton[] playTutorialButtons;

	[Token(Token = "0x4000DA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private PokeButton skipTutorialButton;

	[Token(Token = "0x4000DA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private PokeButton confirmSkipTutorialButton;

	[Token(Token = "0x4000DA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private GameObject GDPRparent;

	[Token(Token = "0x4000DA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private GameObject logoParent;

	[Token(Token = "0x4000DA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private GameObject avatarSelectionParent;

	[Token(Token = "0x4000DA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private GameObject startTutorialParent;

	[Token(Token = "0x4000DA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private GameObject confirmSkipTutorialParent;

	[Token(Token = "0x4000DA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private GameObject LoadingPrompt;

	[Token(Token = "0x4000DA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private MenuVisibility mainMenuVisuals;

	[Token(Token = "0x4000DAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private SpriteRenderer checkMarkRenderer;

	[Token(Token = "0x4000DAB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private Sprite checkMarkFilled;

	[Token(Token = "0x4000DAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private Sprite checkMarkOutline;

	[Token(Token = "0x4000DAD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[Header("Logo Animation")]
	[SerializeField]
	private Animator logoAnimator;

	[Token(Token = "0x4000DAE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private Animator logoButtonAnimator;

	[Token(Token = "0x4000DAF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	private GameObject subLogoJapanese;

	[Token(Token = "0x4000DB0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	private GameObject subLogoKorean;

	[Token(Token = "0x4000DB1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[SerializeField]
	private Renderer bannerRenderer;

	[Token(Token = "0x4000DB2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[SerializeField]
	private Texture[] bannerTextures;

	[Token(Token = "0x4000DB3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[SerializeField]
	private float exitDelay;

	[Token(Token = "0x4000DB4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	[SerializeField]
	private float buttonEnterDelay;

	[Token(Token = "0x4000DB5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[SerializeField]
	private float buttonExitDelay;

	[Token(Token = "0x4000DB6")]
	public const int trueValue = 1;

	[Token(Token = "0x4000DB7")]
	public const string playerPrefKeyGDPR = "GDPRAccepted";

	[Token(Token = "0x4000DB8")]
	public const string playerPrefKeyIntroPassed = "IntroPassed";

	[Token(Token = "0x4000DB9")]
	private const string localeJP = "ja-JP";

	[Token(Token = "0x4000DBA")]
	private const string localeKR = "ko-KR";

	[Token(Token = "0x4000DBB")]
	private const string localeEN = "en-US";

	[Token(Token = "0x4000DBC")]
	private const string localeDE = "de-DE";

	[Token(Token = "0x4000DBD")]
	private const string localeFR = "fr-FR";

	[Token(Token = "0x4000DBE")]
	private const string localeES = "es-419";

	[Token(Token = "0x4000DBF")]
	private const string mainTexProperty = "_MainTex";

	[Token(Token = "0x4000DC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private bool isGDPRChecked;

	[Token(Token = "0x4000DC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF5")]
	private bool loadingOculusV2Avatar;

	[Token(Token = "0x4000DC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private MaterialPropertyBlock propertyBlock;

	[Token(Token = "0x4000DC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private AvatarSelectionMenu avatarSelectionMenu;

	[Token(Token = "0x4000DC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private LauncherMenu launcherMenu;

	[Token(Token = "0x170001B8")]
	private IntroState State
	{
		[Token(Token = "0x6000D5B")]
		[Address(RVA = "0x95E524", Offset = "0x95E524", VA = "0x95E524")]
		get
		{
			return default(IntroState);
		}
		[Token(Token = "0x6000D5C")]
		[Address(RVA = "0x95E52C", Offset = "0x95E52C", VA = "0x95E52C")]
		set
		{
		}
	}

	[Token(Token = "0x170001B9")]
	public static bool HasAcceptedGDPR
	{
		[Token(Token = "0x6000D5D")]
		[Address(RVA = "0x95E738", Offset = "0x95E738", VA = "0x95E738")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000D5E")]
	[Address(RVA = "0x95E78C", Offset = "0x95E78C", VA = "0x95E78C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000D5F")]
	[Address(RVA = "0x95EACC", Offset = "0x95EACC", VA = "0x95EACC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000D60")]
	[Address(RVA = "0x95EF80", Offset = "0x95EF80", VA = "0x95EF80")]
	private void ToggleGDPRCheckbox()
	{
	}

	[Token(Token = "0x6000D61")]
	[Address(RVA = "0x95EF90", Offset = "0x95EF90", VA = "0x95EF90")]
	private void UpdateGDPRButtonVisuals()
	{
	}

	[Token(Token = "0x6000D62")]
	[Address(RVA = "0x95EFFC", Offset = "0x95EFFC", VA = "0x95EFFC")]
	public void OnPlayButtonClicked()
	{
	}

	[Token(Token = "0x6000D63")]
	[Address(RVA = "0x95F180", Offset = "0x95F180", VA = "0x95F180")]
	public void OnChooseAvatarButtonClicked()
	{
	}

	[Token(Token = "0x6000D64")]
	[Address(RVA = "0x95F1A0", Offset = "0x95F1A0", VA = "0x95F1A0")]
	private void MarkIntroAsPassed()
	{
	}

	[Token(Token = "0x6000D65")]
	[Address(RVA = "0x95E54C", Offset = "0x95E54C", VA = "0x95E54C")]
	private void OnStateChange(IntroState oldState, IntroState newState)
	{
	}

	[Token(Token = "0x6000D66")]
	[Address(RVA = "0x95EBAC", Offset = "0x95EBAC", VA = "0x95EBAC")]
	private void StartLogoAnimation()
	{
	}

	[Token(Token = "0x6000D67")]
	[Address(RVA = "0x95EB6C", Offset = "0x95EB6C", VA = "0x95EB6C")]
	private void ActivateGDPRUI()
	{
	}

	[Token(Token = "0x6000D68")]
	[Address(RVA = "0x95C95C", Offset = "0x95C95C", VA = "0x95C95C")]
	public void Show(bool shouldShow)
	{
	}

	[Token(Token = "0x6000D69")]
	[Address(RVA = "0x95BA8C", Offset = "0x95BA8C", VA = "0x95BA8C")]
	public void SkipLoadingSequence()
	{
	}

	[Token(Token = "0x6000D6A")]
	[Address(RVA = "0x95F1E8", Offset = "0x95F1E8", VA = "0x95F1E8")]
	public LauncherMenuIntro()
	{
	}
}
[Token(Token = "0x2000206")]
public class LauncherMenuPopup : SingleInstanceBehavior<LauncherMenuPopup>
{
	[Token(Token = "0x2000207")]
	public delegate void OnPopupDisplayedHandler();

	[Token(Token = "0x2000208")]
	public delegate void OnPopupHiddenHandler();

	[Token(Token = "0x2000209")]
	public enum PopupType
	{
		[Token(Token = "0x4000DEA")]
		JoiningRoom,
		[Token(Token = "0x4000DEB")]
		FailedToJoinRoom,
		[Token(Token = "0x4000DEC")]
		FailedToHostRoom,
		[Token(Token = "0x4000DED")]
		FailedCreatingUniqueCode,
		[Token(Token = "0x4000DEE")]
		KickedFromRoom,
		[Token(Token = "0x4000DEF")]
		ConnectionToServerLost,
		[Token(Token = "0x4000DF0")]
		VersionMismatch,
		[Token(Token = "0x4000DF1")]
		ConfirmJoinRoom,
		[Token(Token = "0x4000DF2")]
		QuickJoinFailed,
		[Token(Token = "0x4000DF3")]
		None,
		[Token(Token = "0x4000DF4")]
		DeprecatedAvatar
	}

	[Token(Token = "0x200020A")]
	public class DialogButtonSettings
	{
		[Token(Token = "0x4000DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Action onPressed;

		[Token(Token = "0x4000DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string buttonText;

		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0x9603B8", Offset = "0x9603B8", VA = "0x9603B8")]
		public DialogButtonSettings()
		{
		}
	}

	[Token(Token = "0x4000DCE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Generic Popup")]
	public GameObject popupRoot;

	[Token(Token = "0x4000DCF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public PokeButton[] exitButtons;

	[Token(Token = "0x4000DD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextMeshPro popupText;

	[Token(Token = "0x4000DD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject popupTextAvatarDeprecated;

	[Token(Token = "0x4000DD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TextMeshPro versionText;

	[Token(Token = "0x4000DD3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject genericPopupParent;

	[Token(Token = "0x4000DD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public PokeButton dialogButton;

	[Token(Token = "0x4000DD5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public PokeButton cancelAvatarUpdate;

	[Token(Token = "0x4000DD6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Header("Confirm Join Popup")]
	public GameObject confirmJoinPopupParent;

	[Token(Token = "0x4000DD7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public PokeButton confirmJoinButton;

	[Token(Token = "0x4000DD8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject forceAvatarChoiceParent;

	[Token(Token = "0x4000DD9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public SpriteRenderer townSprite;

	[Token(Token = "0x4000DDA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public SpriteRenderer playerCountSpriteRenderer;

	[Token(Token = "0x4000DDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public TextMeshPro intentText;

	[Token(Token = "0x4000DDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public TextMeshPro townName;

	[Token(Token = "0x4000DDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public TextMeshPro[] playerNames;

	[Token(Token = "0x4000DDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public SpriteRenderer[] playerNameSprites;

	[Token(Token = "0x4000DDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Sprite emptySlotSprite;

	[Token(Token = "0x4000DE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Sprite occupiedSlotSprite;

	[Token(Token = "0x4000DE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private CookoutUserId[] playerUserIds;

	[Token(Token = "0x4000DE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Vector3 startScale;

	[Token(Token = "0x4000DE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private PopupType displayedType;

	[Token(Token = "0x4000DE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private PopupType queuedPopupType;

	[Token(Token = "0x4000DE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Action onJoinPressedAction;

	[Token(Token = "0x4000DE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Collider[] colliders;

	[Token(Token = "0x4000DE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private TextMeshPro dialogButtonText;

	[Token(Token = "0x4000DE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private Action dialogButtonPressAction;

	[Token(Token = "0x170001BA")]
	public bool IsShowing
	{
		[Token(Token = "0x6000D78")]
		[Address(RVA = "0x95DC20", Offset = "0x95DC20", VA = "0x95DC20")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x14000018")]
	public event OnPopupDisplayedHandler OnPopupDisplayed
	{
		[Token(Token = "0x6000D74")]
		[Address(RVA = "0x95F75C", Offset = "0x95F75C", VA = "0x95F75C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000D75")]
		[Address(RVA = "0x95F7F8", Offset = "0x95F7F8", VA = "0x95F7F8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000019")]
	public event OnPopupHiddenHandler OnPopupHidden
	{
		[Token(Token = "0x6000D76")]
		[Address(RVA = "0x95F894", Offset = "0x95F894", VA = "0x95F894")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000D77")]
		[Address(RVA = "0x95F930", Offset = "0x95F930", VA = "0x95F930")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000D79")]
	[Address(RVA = "0x95F9CC", Offset = "0x95F9CC", VA = "0x95F9CC", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000D7A")]
	[Address(RVA = "0x95D114", Offset = "0x95D114", VA = "0x95D114")]
	public void ShowPopup(PopupType popupType, bool queueIfAlreadyShowing = false, [Optional] DialogButtonSettings dialogButtonSettings)
	{
	}

	[Token(Token = "0x6000D7B")]
	[Address(RVA = "0x95FCC4", Offset = "0x95FCC4", VA = "0x95FCC4")]
	private void EnableColliders(bool enabled)
	{
	}

	[Token(Token = "0x6000D7C")]
	[Address(RVA = "0x95FC50", Offset = "0x95FC50", VA = "0x95FC50")]
	private void EnableExitButtons(bool enabled)
	{
	}

	[Token(Token = "0x6000D7D")]
	[Address(RVA = "0x95FD2C", Offset = "0x95FD2C", VA = "0x95FD2C")]
	public void ShowConfirmJoinPopup(Action OnJoinedPressed, Sprite environment, string townName, Sprite playerCountSprite, MatchmakingTicket roomTicket)
	{
	}

	[Token(Token = "0x6000D7E")]
	[Address(RVA = "0x9600C8", Offset = "0x9600C8", VA = "0x9600C8")]
	private void OnDialogButtonPressed()
	{
	}

	[Token(Token = "0x6000D7F")]
	[Address(RVA = "0x96010C", Offset = "0x96010C", VA = "0x96010C")]
	private void OnJoinButtonPressed()
	{
	}

	[Token(Token = "0x6000D80")]
	[Address(RVA = "0x95B8FC", Offset = "0x95B8FC", VA = "0x95B8FC")]
	public void OnExitButtonClicked()
	{
	}

	[Token(Token = "0x6000D81")]
	[Address(RVA = "0x960144", Offset = "0x960144", VA = "0x960144")]
	public LauncherMenuPopup()
	{
	}
}
[Token(Token = "0x200020B")]
public class LauncherMenuSettings : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4000DF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject SettingsParent;

	[Token(Token = "0x4000DF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private PokeButton preferLeftHandButton;

	[Token(Token = "0x4000DF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private PokeButton preferRightHandButton;

	[Token(Token = "0x4000DFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private PokeButton autoHoldHandButton;

	[Token(Token = "0x4000DFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private PokeButton exitAudioSettingsButton;

	[Token(Token = "0x4000DFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private PokeButton exitLanguageSettingsButton;

	[Token(Token = "0x4000DFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private PokeButton audioSettingsButton;

	[Token(Token = "0x4000DFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private PokeButton languageSettingsButton;

	[Token(Token = "0x4000DFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private PokeButton openBlockListButton;

	[Token(Token = "0x4000E00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Material inactiveMat;

	[Token(Token = "0x4000E01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Material activeMat;

	[Token(Token = "0x4000E02")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Renderer leftButtonRenderer;

	[Token(Token = "0x4000E03")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Renderer rightButtonRenderer;

	[Token(Token = "0x4000E04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Renderer autoHoldHandRenderer;

	[Token(Token = "0x4000E05")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private LauncherMenu launcherMenu;

	[Token(Token = "0x6000D8C")]
	[Address(RVA = "0x9603C0", Offset = "0x9603C0", VA = "0x9603C0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000D8D")]
	[Address(RVA = "0x95C518", Offset = "0x95C518", VA = "0x95C518")]
	public void Show(bool shouldShow)
	{
	}

	[Token(Token = "0x6000D8E")]
	[Address(RVA = "0x9606D0", Offset = "0x9606D0", VA = "0x9606D0")]
	private void RefreshPreferredHandButtons()
	{
	}

	[Token(Token = "0x6000D8F")]
	[Address(RVA = "0x9607F0", Offset = "0x9607F0", VA = "0x9607F0")]
	private void RefreshAutoHoldButtons()
	{
	}

	[Token(Token = "0x6000D90")]
	[Address(RVA = "0x9608E8", Offset = "0x9608E8", VA = "0x9608E8")]
	private void SetPreferredHand(CookoutHandedness handedness)
	{
	}

	[Token(Token = "0x6000D91")]
	[Address(RVA = "0x9609DC", Offset = "0x9609DC", VA = "0x9609DC")]
	private void SetAutoTogglePreference()
	{
	}

	[Token(Token = "0x6000D92")]
	[Address(RVA = "0x960AD0", Offset = "0x960AD0", VA = "0x960AD0")]
	public LauncherMenuSettings()
	{
	}
}
[Token(Token = "0x200020C")]
public class LauncherMultiplayerMenu : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x200020D")]
	public enum MultiplayerMenuState
	{
		[Token(Token = "0x4000E4A")]
		Inactive,
		[Token(Token = "0x4000E4B")]
		StartMenu,
		[Token(Token = "0x4000E4C")]
		JoinByCode,
		[Token(Token = "0x4000E4D")]
		Host,
		[Token(Token = "0x4000E4E")]
		Matchmake,
		[Token(Token = "0x4000E4F")]
		RoomList
	}

	[Token(Token = "0x200020E")]
	private enum MatchmakingType
	{
		[Token(Token = "0x4000E51")]
		Fun,
		[Token(Token = "0x4000E52")]
		Progression
	}

	[Token(Token = "0x4000E06")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private CookingLauncher launcher;

	[Token(Token = "0x4000E07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private PokeButton goBackButton;

	[Token(Token = "0x4000E08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Material selectButtonLettuceMaterial;

	[Token(Token = "0x4000E09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Material deselectLettuceButtonMaterial;

	[Token(Token = "0x4000E0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Material selectButtonMaterial;

	[Token(Token = "0x4000E0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Material deselectButtonMaterial;

	[Token(Token = "0x4000E0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("MultiplayerMenu")]
	[SerializeField]
	private GameObject startMenuStateRoot;

	[Token(Token = "0x4000E0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private PokeButton enterCodeButton;

	[Token(Token = "0x4000E0E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private PokeButton hostMenuButton;

	[Token(Token = "0x4000E0F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private PokeButton quickplayButtonFun;

	[Token(Token = "0x4000E10")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private PokeButton quickplayButtonProgression;

	[Token(Token = "0x4000E11")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private PokeButton roomListButton;

	[Token(Token = "0x4000E12")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private GameObject recommendedRoomRoot;

	[Token(Token = "0x4000E13")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private RoomListItem[] recommendedRooms;

	[Token(Token = "0x4000E14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[Header("Room List")]
	[SerializeField]
	private GameObject roomListStateRoot;

	[Token(Token = "0x4000E15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private Sprite spritePlayer1;

	[Token(Token = "0x4000E16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private Sprite spritePlayer2;

	[Token(Token = "0x4000E17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private Sprite spritePlayer3;

	[Token(Token = "0x4000E18")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private Sprite spriteLobbyCastle;

	[Token(Token = "0x4000E19")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private Sprite spriteLobbyEndless;

	[Token(Token = "0x4000E1A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private Sprite spriteLobbyForest;

	[Token(Token = "0x4000E1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private Sprite spriteLobbyVillage;

	[Token(Token = "0x4000E1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	private Sprite spriteLobbyThroneRoom;

	[Token(Token = "0x4000E1D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	private Sprite spriteLobbyCreative;

	[Token(Token = "0x4000E1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[SerializeField]
	private TMP_Text textPagination;

	[Token(Token = "0x4000E1F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[SerializeField]
	private PokeButton buttonPaginationPrev;

	[Token(Token = "0x4000E20")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[SerializeField]
	private PokeButton buttonPaginationNext;

	[Token(Token = "0x4000E21")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[SerializeField]
	private TMP_Text noRoomsText;

	[Token(Token = "0x4000E22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[SerializeField]
	private RoomListItem[] roomListItems;

	[Token(Token = "0x4000E23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[SerializeField]
	private PokeButton[] filterRoomIntentButtons;

	[Token(Token = "0x4000E24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[Header("Room Code")]
	[SerializeField]
	private GameObject privateJoinStateRoot;

	[Token(Token = "0x4000E25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[SerializeField]
	[Header("Host Room")]
	private GameObject hostStateRoot;

	[Token(Token = "0x4000E26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[SerializeField]
	private PokeButton roomCreateButton;

	[Token(Token = "0x4000E27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[SerializeField]
	private PokeButton[] hostRoomIntentButtons;

	[Token(Token = "0x4000E28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[SerializeField]
	private PokeButton[] hostRoomVisibilityButtons;

	[Token(Token = "0x4000E29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[SerializeField]
	[Header("Matchmake")]
	private GameObject matchmakeStateRoot;

	[Token(Token = "0x4000E2A")]
	private const string NO_ROOM_LABEL = "---";

	[Token(Token = "0x4000E2B")]
	private const float BUTTON_PRESS_COOLDOWN_TIME = 0.25f;

	[Token(Token = "0x4000E2C")]
	private const float POPUP_HIDDEN_BUTTON_DELAY = 0.25f;

	[Token(Token = "0x4000E2D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly CookoutUserId[] emptyList;

	[Token(Token = "0x4000E2E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly string[] emptyNameList;

	[Token(Token = "0x4000E2F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private MultiplayerMenuState menuStatePrev;

	[Token(Token = "0x4000E30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	private MultiplayerMenuState menuStateCurr;

	[Token(Token = "0x4000E31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private RoomNumpad roomNumpad;

	[Token(Token = "0x4000E32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private LauncherMenu launcherMenu;

	[Token(Token = "0x4000E33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private LauncherMenuPopup launcherMenuPopup;

	[Token(Token = "0x4000E34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private bool[] filterRoomIntent;

	[Token(Token = "0x4000E35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private RoomIntent hostRoomIntent;

	[Token(Token = "0x4000E36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
	private RoomVisibility hostRoomVisibility;

	[Token(Token = "0x4000E37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private List<float> visitRoomTimestamp;

	[Token(Token = "0x4000E38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private List<string> visitRoomCode;

	[Token(Token = "0x4000E39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private List<MatchmakingTicket> availableRoomTickets;

	[Token(Token = "0x4000E3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private IList<MatchmakingTicket> validSortedRoomTickets;

	[Token(Token = "0x4000E3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private MatchmakingConfig matchmakingConfig;

	[Token(Token = "0x4000E3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private MatchmakingAlgorithm matchmakingAlgorithmQuickPlayFun;

	[Token(Token = "0x4000E3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private MatchmakingAlgorithm matchmakingAlgorithmQuickPlayProgression;

	[Token(Token = "0x4000E3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private MatchmakingAlgorithm matchmakingAlgorithmFriends;

	[Token(Token = "0x4000E3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private float buttonPressCooldown;

	[Token(Token = "0x4000E40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
	private bool doRefreshRoomList;

	[Token(Token = "0x4000E41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private int roomListPaginationCursor;

	[Token(Token = "0x4000E42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	private Renderer paginationPrevArrowRenderer;

	[Token(Token = "0x4000E43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	private Renderer paginationNextArrowRenderer;

	[Token(Token = "0x4000E44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	private MatchmakingType matchmakingType;

	[Token(Token = "0x4000E45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	private bool[] quickplayFunValidIntents;

	[Token(Token = "0x4000E46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	private bool[] quickplayProgressValidIntents;

	[Token(Token = "0x4000E47")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	private RoomIntent[] roomIntentOrderFun;

	[Token(Token = "0x4000E48")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	private RoomIntent[] roomIntentOrderProgress;

	[Token(Token = "0x6000D97")]
	[Address(RVA = "0x960B24", Offset = "0x960B24", VA = "0x960B24")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000D98")]
	[Address(RVA = "0x9623EC", Offset = "0x9623EC", VA = "0x9623EC")]
	private void OnPopupHidden()
	{
	}

	[Token(Token = "0x6000D99")]
	[Address(RVA = "0x962400", Offset = "0x962400", VA = "0x962400")]
	private void ChangeState(MultiplayerMenuState menuStateNext)
	{
	}

	[Token(Token = "0x6000D9A")]
	[Address(RVA = "0x95C4FC", Offset = "0x95C4FC", VA = "0x95C4FC")]
	public void Show(bool shouldShow)
	{
	}

	[Token(Token = "0x6000D9B")]
	[Address(RVA = "0x962408", Offset = "0x962408", VA = "0x962408")]
	private void GoToPreviousMenuState()
	{
	}

	[Token(Token = "0x6000D9C")]
	[Address(RVA = "0x95D680", Offset = "0x95D680", VA = "0x95D680")]
	public void OnJoiningRoom()
	{
	}

	[Token(Token = "0x6000D9D")]
	[Address(RVA = "0x95D778", Offset = "0x95D778", VA = "0x95D778")]
	public void OnRoomHostFailed()
	{
	}

	[Token(Token = "0x6000D9E")]
	[Address(RVA = "0x95D77C", Offset = "0x95D77C", VA = "0x95D77C")]
	public void OnRoomJoinFailed()
	{
	}

	[Token(Token = "0x6000D9F")]
	[Address(RVA = "0x95D8A4", Offset = "0x95D8A4", VA = "0x95D8A4")]
	public void OnPhotonDisconnect()
	{
	}

	[Token(Token = "0x6000DA0")]
	[Address(RVA = "0x95CB18", Offset = "0x95CB18", VA = "0x95CB18")]
	public void OnRoomListUpdate()
	{
	}

	[Token(Token = "0x6000DA1")]
	[Address(RVA = "0x96246C", Offset = "0x96246C", VA = "0x96246C")]
	private void RefreshRoomListItem(RoomListItem room, MatchmakingTicket roomTicket)
	{
	}

	[Token(Token = "0x6000DA2")]
	[Address(RVA = "0x962A50", Offset = "0x962A50", VA = "0x962A50")]
	private void JoinRoomFromList(RoomListItem room, int iRoomTicket, bool suggestedRoom = false)
	{
	}

	[Token(Token = "0x6000DA3")]
	[Address(RVA = "0x962DD0", Offset = "0x962DD0", VA = "0x962DD0")]
	private void SubmitTelemetryMatchmaking(bool success, string reason, int roomCountValid, int roomCountTotal)
	{
	}

	[Token(Token = "0x6000DA4")]
	[Address(RVA = "0x9631CC", Offset = "0x9631CC", VA = "0x9631CC")]
	private MatchmakingTicket CreatePlayerTicket()
	{
		return null;
	}

	[Token(Token = "0x6000DA5")]
	[Address(RVA = "0x963570", Offset = "0x963570", VA = "0x963570")]
	private void Update()
	{
	}

	[Token(Token = "0x6000DA6")]
	[Address(RVA = "0x964450", Offset = "0x964450", VA = "0x964450")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000DA7")]
	[Address(RVA = "0x96451C", Offset = "0x96451C", VA = "0x96451C")]
	public LauncherMultiplayerMenu()
	{
	}
}
[Token(Token = "0x2000213")]
public class NetworkedBehaviour : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4000E5D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private PhotonView pvCache;

	[Token(Token = "0x170001BB")]
	public PhotonView photonView
	{
		[Token(Token = "0x6000DC1")]
		[Address(RVA = "0x958854", Offset = "0x958854", VA = "0x958854")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000DC2")]
	[Address(RVA = "0x964A84", Offset = "0x964A84", VA = "0x964A84")]
	public NetworkedBehaviour()
	{
	}
}
[Token(Token = "0x2000214")]
public class PhotonCallbackListener : PunBehaviour
{
	[Token(Token = "0x6000DC3")]
	[Address(RVA = "0x964A8C", Offset = "0x964A8C", VA = "0x964A8C", Slot = "62")]
	public virtual void Awake()
	{
	}

	[Token(Token = "0x6000DC4")]
	[Address(RVA = "0x964B94", Offset = "0x964B94", VA = "0x964B94", Slot = "63")]
	public virtual void OnDestroy()
	{
	}

	[Token(Token = "0x6000DC5")]
	[Address(RVA = "0x964CB0", Offset = "0x964CB0", VA = "0x964CB0")]
	public PhotonCallbackListener()
	{
	}
}
[Token(Token = "0x2000215")]
public class PhotonCallbackManager : SingleInstancePhotonCallbackListener<PhotonCallbackManager>
{
	[Token(Token = "0x2000216")]
	public delegate void OnPlayerConnectedHandler(PhotonPlayer newPlayer);

	[Token(Token = "0x2000217")]
	public delegate void OnPlayerDisconnectedHandler(PhotonPlayer otherPlayer);

	[Token(Token = "0x2000218")]
	public delegate void OnPlayerPropertiesChangedHandler(PhotonPlayer player, ExitGames.Client.Photon.Hashtable props);

	[Token(Token = "0x2000219")]
	public delegate void OnPhotonCustomRoomPropertiesChangedHandler(ExitGames.Client.Photon.Hashtable props);

	[Token(Token = "0x200021A")]
	public delegate void OnMasterClientSwitchedHandler(PhotonPlayer newMasterClient);

	[Token(Token = "0x4000E63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public HashSet<PhotonView> grabbableOwnershipTransferListeners;

	[Token(Token = "0x4000E64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Dictionary<PhotonView, IOwnershipTransferedListener> ownershipTransferListeners;

	[Token(Token = "0x1400001A")]
	public event OnPlayerConnectedHandler OnPlayerConnected
	{
		[Token(Token = "0x6000DC6")]
		[Address(RVA = "0x94B19C", Offset = "0x94B19C", VA = "0x94B19C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000DC7")]
		[Address(RVA = "0x94D0D8", Offset = "0x94D0D8", VA = "0x94D0D8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400001B")]
	public event OnPlayerDisconnectedHandler OnPlayerDisconnected
	{
		[Token(Token = "0x6000DC8")]
		[Address(RVA = "0x94B364", Offset = "0x94B364", VA = "0x94B364")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000DC9")]
		[Address(RVA = "0x94D174", Offset = "0x94D174", VA = "0x94D174")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400001C")]
	public event OnPlayerPropertiesChangedHandler OnPlayerPropertiesChanged
	{
		[Token(Token = "0x6000DCA")]
		[Address(RVA = "0x964CB8", Offset = "0x964CB8", VA = "0x964CB8")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000DCB")]
		[Address(RVA = "0x964D54", Offset = "0x964D54", VA = "0x964D54")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400001D")]
	public event OnPhotonCustomRoomPropertiesChangedHandler OnRoomPropertiesChanged
	{
		[Token(Token = "0x6000DCC")]
		[Address(RVA = "0x964DF0", Offset = "0x964DF0", VA = "0x964DF0")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000DCD")]
		[Address(RVA = "0x964E8C", Offset = "0x964E8C", VA = "0x964E8C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400001E")]
	public event OnMasterClientSwitchedHandler OnMasterClientChanged
	{
		[Token(Token = "0x6000DCE")]
		[Address(RVA = "0x94B52C", Offset = "0x94B52C", VA = "0x94B52C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000DCF")]
		[Address(RVA = "0x94D210", Offset = "0x94D210", VA = "0x94D210")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000DD0")]
	[Address(RVA = "0x964F28", Offset = "0x964F28", VA = "0x964F28", Slot = "61")]
	public override void OnOwnershipTransfered(object[] viewAndPlayers)
	{
	}

	[Token(Token = "0x6000DD1")]
	[Address(RVA = "0x9651D8", Offset = "0x9651D8", VA = "0x9651D8", Slot = "47")]
	public override void OnPhotonPlayerConnected(PhotonPlayer newPlayer)
	{
	}

	[Token(Token = "0x6000DD2")]
	[Address(RVA = "0x9651F4", Offset = "0x9651F4", VA = "0x9651F4", Slot = "48")]
	public override void OnPhotonPlayerDisconnected(PhotonPlayer otherPlayer)
	{
	}

	[Token(Token = "0x6000DD3")]
	[Address(RVA = "0x965210", Offset = "0x965210", VA = "0x965210", Slot = "53")]
	public override void OnPhotonPlayerPropertiesChanged(object[] playerAndUpdatedProps)
	{
	}

	[Token(Token = "0x6000DD4")]
	[Address(RVA = "0x96531C", Offset = "0x96531C", VA = "0x96531C", Slot = "52")]
	public override void OnPhotonCustomRoomPropertiesChanged(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
	{
	}

	[Token(Token = "0x6000DD5")]
	[Address(RVA = "0x965338", Offset = "0x965338", VA = "0x965338", Slot = "35")]
	public override void OnMasterClientSwitched(PhotonPlayer newMasterClient)
	{
	}

	[Token(Token = "0x6000DD6")]
	[Address(RVA = "0x965354", Offset = "0x965354", VA = "0x965354")]
	public PhotonCallbackManager()
	{
	}
}
[Token(Token = "0x200021B")]
public static class RoomCodeGenerator
{
	[Token(Token = "0x4000E65")]
	public const int CodeLength = 7;

	[Token(Token = "0x4000E66")]
	private const string regularRoomPrefix = "0";

	[Token(Token = "0x4000E67")]
	private const string groupLaunchRoomPrefix = "1";

	[Token(Token = "0x6000DEB")]
	[Address(RVA = "0x94DED8", Offset = "0x94DED8", VA = "0x94DED8")]
	public static string GenerateGroupLaunchRoom(string deepLinkRoomNamePart)
	{
		return null;
	}

	[Token(Token = "0x6000DEC")]
	[Address(RVA = "0x94F104", Offset = "0x94F104", VA = "0x94F104")]
	internal static string GenerateRegularRoom()
	{
		return null;
	}
}
[Token(Token = "0x200021C")]
public class SingleInstanceNetworkedBehavior<T> : NetworkedBehaviour where T : SingleInstanceNetworkedBehavior<T>
{
	[Token(Token = "0x4000E68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static T instance;

	[Token(Token = "0x4000E69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string noInstanceMessage;

	[Token(Token = "0x170001BC")]
	public static T Instance
	{
		[Token(Token = "0x6000DF0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000DED")]
	static SingleInstanceNetworkedBehavior()
	{
	}

	[Token(Token = "0x6000DEE")]
	public virtual void Awake()
	{
	}

	[Token(Token = "0x6000DEF")]
	public virtual void OnDestroy()
	{
	}

	[Token(Token = "0x6000DF1")]
	public static T GetInstance()
	{
		return null;
	}

	[Token(Token = "0x6000DF2")]
	public SingleInstanceNetworkedBehavior()
	{
	}
}
[Token(Token = "0x200021D")]
public class SingleInstancePhotonCallbackListener<T> : PhotonCallbackListener where T : SingleInstancePhotonCallbackListener<T>
{
	[Token(Token = "0x4000E6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static T instance;

	[Token(Token = "0x4000E6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string noInstanceMessage;

	[Token(Token = "0x170001BD")]
	public static T Instance
	{
		[Token(Token = "0x6000DF6")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000DF3")]
	static SingleInstancePhotonCallbackListener()
	{
	}

	[Token(Token = "0x6000DF4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000DF5")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x6000DF7")]
	public static T GetInstance()
	{
		return null;
	}

	[Token(Token = "0x6000DF8")]
	public SingleInstancePhotonCallbackListener()
	{
	}
}
[Token(Token = "0x200021E")]
public class Notes : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4000E6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[TextArea(3, 10)]
	public string note;

	[Token(Token = "0x6000DF9")]
	[Address(RVA = "0x9657F8", Offset = "0x9657F8", VA = "0x9657F8")]
	public Notes()
	{
	}
}
[Token(Token = "0x200021F")]
public class IngredientCapHandler
{
	[Token(Token = "0x4000E6E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static List<IngredientBase> spawnedIngredients;

	[Token(Token = "0x170001BE")]
	public static bool CapReached
	{
		[Token(Token = "0x6000DFA")]
		[Address(RVA = "0x965800", Offset = "0x965800", VA = "0x965800")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001BF")]
	public static int maxSpawnCount
	{
		[Token(Token = "0x6000DFB")]
		[Address(RVA = "0x9658B0", Offset = "0x9658B0", VA = "0x9658B0")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000DFC")]
		[Address(RVA = "0x965908", Offset = "0x965908", VA = "0x965908")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000DFD")]
	[Address(RVA = "0x965964", Offset = "0x965964", VA = "0x965964")]
	public static void MakeSpaceIfCapReached()
	{
	}

	[Token(Token = "0x6000DFE")]
	[Address(RVA = "0x965A0C", Offset = "0x965A0C", VA = "0x965A0C")]
	public static void OnIngredientSpawned(IngredientBase ingredient)
	{
	}

	[Token(Token = "0x6000DFF")]
	[Address(RVA = "0x965ADC", Offset = "0x965ADC", VA = "0x965ADC")]
	public static void OnIngredientDespawn(IngredientBase ingredient)
	{
	}

	[Token(Token = "0x6000E00")]
	[Address(RVA = "0x965BB4", Offset = "0x965BB4", VA = "0x965BB4")]
	public static void AdjustCapSize(int newMax)
	{
	}

	[Token(Token = "0x6000E01")]
	[Address(RVA = "0x965C70", Offset = "0x965C70", VA = "0x965C70")]
	public IngredientCapHandler()
	{
	}
}
[Token(Token = "0x2000220")]
public class IngredientSliceFactory : SingleInstancePhotonCallbackListener<IngredientSliceFactory>
{
	[Token(Token = "0x2000221")]
	[CompilerGenerated]
	private sealed class <get_AllocatedObjects>d__8 : IEnumerable<IngredientSlice>, IEnumerable, IEnumerator<IngredientSlice>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IngredientSlice <>2__current;

		[Token(Token = "0x4000E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int <>l__initialThreadId;

		[Token(Token = "0x4000E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IngredientSliceFactory <>4__this;

		[Token(Token = "0x4000E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<IngredientType, ComponentPrefabPool<IngredientSlice>>.ValueCollection.Enumerator <>7__wrap1;

		[Token(Token = "0x4000E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int <i>5__3;

		[Token(Token = "0x4000E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int <n>5__4;

		[Token(Token = "0x170001C1")]
		private IngredientSlice System.Collections.Generic.IEnumerator<IngredientSlice>.Current
		{
			[Token(Token = "0x6000E1A")]
			[Address(RVA = "0x968418", Offset = "0x968418", VA = "0x968418", Slot = "6")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C2")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E1C")]
			[Address(RVA = "0x968460", Offset = "0x968460", VA = "0x968460", Slot = "9")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E16")]
		[Address(RVA = "0x965D50", Offset = "0x965D50", VA = "0x965D50")]
		[DebuggerHidden]
		public <get_AllocatedObjects>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x6000E17")]
		[Address(RVA = "0x9680B8", Offset = "0x9680B8", VA = "0x9680B8", Slot = "7")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E18")]
		[Address(RVA = "0x9680D4", Offset = "0x9680D4", VA = "0x9680D4", Slot = "8")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E19")]
		[Address(RVA = "0x9683C8", Offset = "0x9683C8", VA = "0x9683C8")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0x968420", Offset = "0x968420", VA = "0x968420", Slot = "10")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}

		[Token(Token = "0x6000E1D")]
		[Address(RVA = "0x968468", Offset = "0x968468", VA = "0x968468", Slot = "4")]
		[DebuggerHidden]
		private IEnumerator<IngredientSlice> System.Collections.Generic.IEnumerable<IngredientSlice>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0x96850C", Offset = "0x96850C", VA = "0x96850C", Slot = "5")]
		[DebuggerHidden]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x4000E6F")]
	private const int INITIAL_POOL_CAPACITY = 4;

	[Token(Token = "0x4000E70")]
	private const int INITIAL_POOL_CAPACITY_TOFU = 8;

	[Token(Token = "0x4000E71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly IngredientType[] ingredientSliceTypes;

	[Token(Token = "0x4000E72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform disabledPoolRoot;

	[Token(Token = "0x4000E73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private IngredientVfxFactory vfxFactory;

	[Token(Token = "0x4000E74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<IngredientType, ComponentPrefabPool<IngredientSlice>> poolLookup;

	[Token(Token = "0x4000E75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<IngredientSlice> allocatedObjectsCache;

	[Token(Token = "0x170001C0")]
	public IEnumerable<IngredientSlice> AllocatedObjects
	{
		[Token(Token = "0x6000E03")]
		[Address(RVA = "0x9588E8", Offset = "0x9588E8", VA = "0x9588E8")]
		[IteratorStateMachine(typeof(<get_AllocatedObjects>d__8))]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000E04")]
	[Address(RVA = "0x965D84", Offset = "0x965D84", VA = "0x965D84")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E05")]
	[Address(RVA = "0x966018", Offset = "0x966018", VA = "0x966018", Slot = "47")]
	public override void OnPhotonPlayerConnected(PhotonPlayer newPlayer)
	{
	}

	[Token(Token = "0x6000E06")]
	[Address(RVA = "0x9665E4", Offset = "0x9665E4", VA = "0x9665E4")]
	private IngredientSlice SpawnInternal(int viewId, IngredientType ingredientType, Vector3 pos, Quaternion rot)
	{
		return null;
	}

	[Token(Token = "0x6000E07")]
	[Address(RVA = "0x9667D8", Offset = "0x9667D8", VA = "0x9667D8")]
	[PunRPC]
	private void IngredientSliceSpawnRPC(int viewId, IngredientType ingredientType, Vector3 pos, Quaternion rot)
	{
	}

	[Token(Token = "0x6000E08")]
	[Address(RVA = "0x966BFC", Offset = "0x966BFC", VA = "0x966BFC")]
	public IngredientSlice Spawn(IngredientType ingredientType, Vector3 pos, Quaternion rot)
	{
		return null;
	}

	[Token(Token = "0x6000E09")]
	[Address(RVA = "0x966F80", Offset = "0x966F80", VA = "0x966F80")]
	private void DespawnInternal(IngredientSlice instance, bool showPoof = true)
	{
	}

	[Token(Token = "0x6000E0A")]
	[Address(RVA = "0x9671D4", Offset = "0x9671D4", VA = "0x9671D4")]
	[PunRPC]
	private void IngredientSliceDespawnRPC(int viewId)
	{
	}

	[Token(Token = "0x6000E0B")]
	[Address(RVA = "0x967320", Offset = "0x967320", VA = "0x967320")]
	[PunRPC]
	private void IngredientSliceDespawnAllRPC()
	{
	}

	[Token(Token = "0x6000E0C")]
	[Address(RVA = "0x967604", Offset = "0x967604", VA = "0x967604")]
	[PunRPC]
	private void IngredientSliceDespawnAllOnConveyorBeltRPC()
	{
	}

	[Token(Token = "0x6000E0D")]
	[Address(RVA = "0x9678FC", Offset = "0x9678FC", VA = "0x9678FC")]
	[PunRPC]
	private void IngredientSlicePutOutFiresRPC()
	{
	}

	[Token(Token = "0x6000E0E")]
	[Address(RVA = "0x967BEC", Offset = "0x967BEC", VA = "0x967BEC")]
	public void DespawnLocal(IngredientSlice instance, bool showPoof = true)
	{
	}

	[Token(Token = "0x6000E0F")]
	[Address(RVA = "0x967BF4", Offset = "0x967BF4", VA = "0x967BF4")]
	public void Despawn(IngredientSlice instance)
	{
	}

	[Token(Token = "0x6000E10")]
	[Address(RVA = "0x967D0C", Offset = "0x967D0C", VA = "0x967D0C")]
	public void DespawnAll()
	{
	}

	[Token(Token = "0x6000E11")]
	[Address(RVA = "0x959C14", Offset = "0x959C14", VA = "0x959C14")]
	public void DespawnAllLocalOnly()
	{
	}

	[Token(Token = "0x6000E12")]
	[Address(RVA = "0x967DD4", Offset = "0x967DD4", VA = "0x967DD4")]
	public void DespawnAllOnConveyorBelt()
	{
	}

	[Token(Token = "0x6000E13")]
	[Address(RVA = "0x967E9C", Offset = "0x967E9C", VA = "0x967E9C")]
	public void ForceExtinguishAll()
	{
	}

	[Token(Token = "0x6000E14")]
	[Address(RVA = "0x967F64", Offset = "0x967F64", VA = "0x967F64")]
	public IngredientSliceFactory()
	{
	}
}
[Token(Token = "0x2000222")]
public class IngredientVfxFactory : SingleInstanceNetworkedBehavior<IngredientVfxFactory>
{
	[Token(Token = "0x4000E7D")]
	private const int INITIAL_POOL_CAPACITY = 16;

	[Token(Token = "0x4000E7E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform disabledPoolRoot;

	[Token(Token = "0x4000E7F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject fireParticlesPrefab;

	[Token(Token = "0x4000E80")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject fryingGlowPrefab;

	[Token(Token = "0x4000E81")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ComponentPrefabPool<Transform> fireParticlesPool;

	[Token(Token = "0x4000E82")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private ComponentPrefabPool<FryingGlow> fryingGlowPool;

	[Token(Token = "0x6000E1F")]
	[Address(RVA = "0x969510", Offset = "0x969510", VA = "0x969510")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E20")]
	[Address(RVA = "0x969634", Offset = "0x969634", VA = "0x969634")]
	private void SpawnInternal(Grillable grillable)
	{
	}

	[Token(Token = "0x6000E21")]
	[Address(RVA = "0x9697A0", Offset = "0x9697A0", VA = "0x9697A0")]
	private void DespawnInternal(Grillable grillable)
	{
	}

	[Token(Token = "0x6000E22")]
	[Address(RVA = "0x969840", Offset = "0x969840", VA = "0x969840")]
	public void Attach(IngredientWhole ingredient)
	{
	}

	[Token(Token = "0x6000E23")]
	[Address(RVA = "0x9699EC", Offset = "0x9699EC", VA = "0x9699EC")]
	public void Attach(IngredientSlice ingredient)
	{
	}

	[Token(Token = "0x6000E24")]
	[Address(RVA = "0x969B00", Offset = "0x969B00", VA = "0x969B00")]
	public void Detach(IngredientWhole ingredient)
	{
	}

	[Token(Token = "0x6000E25")]
	[Address(RVA = "0x969B18", Offset = "0x969B18", VA = "0x969B18")]
	public void Detach(IngredientSlice ingredient)
	{
	}

	[Token(Token = "0x6000E26")]
	[Address(RVA = "0x969B30", Offset = "0x969B30", VA = "0x969B30")]
	public IngredientVfxFactory()
	{
	}
}
[Token(Token = "0x2000223")]
public class IngredientWholeFactory : SingleInstancePhotonCallbackListener<IngredientWholeFactory>
{
	[Token(Token = "0x2000224")]
	[CompilerGenerated]
	private sealed class <get_AllocatedObjects>d__7 : IEnumerable<IngredientWhole>, IEnumerable, IEnumerator<IngredientWhole>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IngredientWhole <>2__current;

		[Token(Token = "0x4000E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int <>l__initialThreadId;

		[Token(Token = "0x4000E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IngredientWholeFactory <>4__this;

		[Token(Token = "0x4000E8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<IngredientType, ComponentPrefabPool<IngredientWhole>>.ValueCollection.Enumerator <>7__wrap1;

		[Token(Token = "0x4000E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int <i>5__3;

		[Token(Token = "0x4000E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int <n>5__4;

		[Token(Token = "0x170001C4")]
		private IngredientWhole System.Collections.Generic.IEnumerator<IngredientWhole>.Current
		{
			[Token(Token = "0x6000E3E")]
			[Address(RVA = "0x96C5D0", Offset = "0x96C5D0", VA = "0x96C5D0", Slot = "6")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C5")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E40")]
			[Address(RVA = "0x96C618", Offset = "0x96C618", VA = "0x96C618", Slot = "9")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E3A")]
		[Address(RVA = "0x969C14", Offset = "0x969C14", VA = "0x969C14")]
		[DebuggerHidden]
		public <get_AllocatedObjects>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6000E3B")]
		[Address(RVA = "0x96C270", Offset = "0x96C270", VA = "0x96C270", Slot = "7")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E3C")]
		[Address(RVA = "0x96C28C", Offset = "0x96C28C", VA = "0x96C28C", Slot = "8")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E3D")]
		[Address(RVA = "0x96C580", Offset = "0x96C580", VA = "0x96C580")]
		private void <>m__Finally1()
		{
		}

		[Token(Token = "0x6000E3F")]
		[Address(RVA = "0x96C5D8", Offset = "0x96C5D8", VA = "0x96C5D8", Slot = "10")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}

		[Token(Token = "0x6000E41")]
		[Address(RVA = "0x96C620", Offset = "0x96C620", VA = "0x96C620", Slot = "4")]
		[DebuggerHidden]
		private IEnumerator<IngredientWhole> System.Collections.Generic.IEnumerable<IngredientWhole>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000E42")]
		[Address(RVA = "0x96C6C4", Offset = "0x96C6C4", VA = "0x96C6C4", Slot = "5")]
		[DebuggerHidden]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x4000E83")]
	private const int INITIAL_POOL_CAPACITY = 4;

	[Token(Token = "0x4000E84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly IngredientType[] ingredientWholeTypes;

	[Token(Token = "0x4000E85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform disabledPoolRoot;

	[Token(Token = "0x4000E86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private IngredientVfxFactory vfxFactory;

	[Token(Token = "0x4000E87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<IngredientType, ComponentPrefabPool<IngredientWhole>> poolLookup;

	[Token(Token = "0x4000E88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<IngredientWhole> allocatedObjectsCache;

	[Token(Token = "0x170001C3")]
	public IEnumerable<IngredientWhole> AllocatedObjects
	{
		[Token(Token = "0x6000E27")]
		[Address(RVA = "0x969B9C", Offset = "0x969B9C", VA = "0x969B9C")]
		[IteratorStateMachine(typeof(<get_AllocatedObjects>d__7))]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000E28")]
	[Address(RVA = "0x969C48", Offset = "0x969C48", VA = "0x969C48")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E29")]
	[Address(RVA = "0x969ED0", Offset = "0x969ED0", VA = "0x969ED0", Slot = "47")]
	public override void OnPhotonPlayerConnected(PhotonPlayer newPlayer)
	{
	}

	[Token(Token = "0x6000E2A")]
	[Address(RVA = "0x96A4A0", Offset = "0x96A4A0", VA = "0x96A4A0")]
	private IngredientWhole SpawnInternal(int viewId, IngredientType ingredientType, Vector3 pos, Quaternion rot)
	{
		return null;
	}

	[Token(Token = "0x6000E2B")]
	[Address(RVA = "0x96A694", Offset = "0x96A694", VA = "0x96A694")]
	[PunRPC]
	private void IngredientWholeSpawnRPC(int viewId, IngredientType ingredientType, Vector3 pos, Quaternion rot)
	{
	}

	[Token(Token = "0x6000E2C")]
	[Address(RVA = "0x96AAB8", Offset = "0x96AAB8", VA = "0x96AAB8")]
	public IngredientWhole Spawn(IngredientType ingredientType, Vector3 pos, Quaternion rot)
	{
		return null;
	}

	[Token(Token = "0x6000E2D")]
	[Address(RVA = "0x96AE44", Offset = "0x96AE44", VA = "0x96AE44")]
	private void DespawnInternal(IngredientWhole instance, bool showPoof = true)
	{
	}

	[Token(Token = "0x6000E2E")]
	[Address(RVA = "0x96B0A4", Offset = "0x96B0A4", VA = "0x96B0A4")]
	[PunRPC]
	private void IngredientWholeDespawnRPC(int viewId)
	{
	}

	[Token(Token = "0x6000E2F")]
	[Address(RVA = "0x96B1F0", Offset = "0x96B1F0", VA = "0x96B1F0")]
	[PunRPC]
	private void IngredientWholeDespawnAllRPC()
	{
	}

	[Token(Token = "0x6000E30")]
	[Address(RVA = "0x96B4D4", Offset = "0x96B4D4", VA = "0x96B4D4")]
	[PunRPC]
	private void IngredientWholeDespawnAllOnConveyorBeltRPC()
	{
	}

	[Token(Token = "0x6000E31")]
	[Address(RVA = "0x96B7CC", Offset = "0x96B7CC", VA = "0x96B7CC")]
	[PunRPC]
	private void IngredientWholePutOutFiresRPC()
	{
	}

	[Token(Token = "0x6000E32")]
	[Address(RVA = "0x96BABC", Offset = "0x96BABC", VA = "0x96BABC")]
	public void DespawnLocal(IngredientWhole instance, bool showPoof)
	{
	}

	[Token(Token = "0x6000E33")]
	[Address(RVA = "0x96BAC4", Offset = "0x96BAC4", VA = "0x96BAC4")]
	public void Despawn(IngredientWhole instance)
	{
	}

	[Token(Token = "0x6000E34")]
	[Address(RVA = "0x96BBE0", Offset = "0x96BBE0", VA = "0x96BBE0")]
	public void DespawnAll()
	{
	}

	[Token(Token = "0x6000E35")]
	[Address(RVA = "0x96BCA8", Offset = "0x96BCA8", VA = "0x96BCA8")]
	public void DespawnAllLocalOnly()
	{
	}

	[Token(Token = "0x6000E36")]
	[Address(RVA = "0x96BF8C", Offset = "0x96BF8C", VA = "0x96BF8C")]
	public void DespawnAllOnConveyorBelt()
	{
	}

	[Token(Token = "0x6000E37")]
	[Address(RVA = "0x96C054", Offset = "0x96C054", VA = "0x96C054")]
	public void ForceExtinguishAll()
	{
	}

	[Token(Token = "0x6000E38")]
	[Address(RVA = "0x96C11C", Offset = "0x96C11C", VA = "0x96C11C")]
	public IngredientWholeFactory()
	{
	}
}
[Token(Token = "0x2000225")]
public enum ParticleType
{
	[Token(Token = "0x4000E91")]
	Eating,
	[Token(Token = "0x4000E92")]
	InstantSandwichPoof,
	[Token(Token = "0x4000E93")]
	GenericPoof,
	[Token(Token = "0x4000E94")]
	ToothpickSpawn,
	[Token(Token = "0x4000E95")]
	IngredientCollideBread,
	[Token(Token = "0x4000E96")]
	SpiceShaker,
	[Token(Token = "0x4000E97")]
	ScrubbingBubbles,
	[Token(Token = "0x4000E98")]
	ThumbsUp,
	[Token(Token = "0x4000E99")]
	ThumbsDown,
	[Token(Token = "0x4000E9A")]
	FireSparks,
	[Token(Token = "0x4000E9B")]
	IngredientChop,
	[Token(Token = "0x4000E9C")]
	IngredientChopSmall,
	[Token(Token = "0x4000E9D")]
	ChoppingCrumbs,
	[Token(Token = "0x4000E9E")]
	ChoppingSplinter,
	[Token(Token = "0x4000E9F")]
	PotionGrill,
	[Token(Token = "0x4000EA0")]
	PotionInstantSandwich,
	[Token(Token = "0x4000EA1")]
	PotionWash,
	[Token(Token = "0x4000EA2")]
	PotionPerfectizer,
	[Token(Token = "0x4000EA3")]
	PotionSharpness,
	[Token(Token = "0x4000EA4")]
	PotionTimeFreeze,
	[Token(Token = "0x4000EA5")]
	PotionTofu,
	[Token(Token = "0x4000EA6")]
	ThiefStealing,
	[Token(Token = "0x4000EA7")]
	FlowerPetals,
	[Token(Token = "0x4000EA8")]
	IngredientCollideHam,
	[Token(Token = "0x4000EA9")]
	IngredientCollideCheese,
	[Token(Token = "0x4000EAA")]
	IngredientCollideSalad,
	[Token(Token = "0x4000EAB")]
	IngredientCollideTomato,
	[Token(Token = "0x4000EAC")]
	IngredientCollideMushroom,
	[Token(Token = "0x4000EAD")]
	IngredientCollideTentacle,
	[Token(Token = "0x4000EAE")]
	IngredientCollideMoldyCheese,
	[Token(Token = "0x4000EAF")]
	IngredientCollidePumpkin,
	[Token(Token = "0x4000EB0")]
	IngredientCollideBreadDark,
	[Token(Token = "0x4000EB1")]
	IngredientCollideBagel,
	[Token(Token = "0x4000EB2")]
	IngredientCollideSalmon,
	[Token(Token = "0x4000EB3")]
	IngredientCollideCauldron,
	[Token(Token = "0x4000EB4")]
	IngredientCollideMoon,
	[Token(Token = "0x4000EB5")]
	IngredientCollideOnion,
	[Token(Token = "0x4000EB6")]
	IngredientCollideTofu,
	[Token(Token = "0x4000EB7")]
	IngredientCollideCarrot,
	[Token(Token = "0x4000EB8")]
	IngredientCollideBeet,
	[Token(Token = "0x4000EB9")]
	IngredientCollideEgg,
	[Token(Token = "0x4000EBA")]
	IngredientCollideBaguette,
	[Token(Token = "0x4000EBB")]
	IngredientCollidePepper,
	[Token(Token = "0x4000EBC")]
	IngredientCollideRoyalSalad,
	[Token(Token = "0x4000EBD")]
	IngredientCollideStarFruit,
	[Token(Token = "0x4000EBE")]
	IngredientCollideTruffle,
	[Token(Token = "0x4000EBF")]
	IngredientCollideLobster,
	[Token(Token = "0x4000EC0")]
	IngredientCollideAvocado,
	[Token(Token = "0x4000EC1")]
	IngredientCollideRedOnion,
	[Token(Token = "0x4000EC2")]
	LoopingFire,
	[Token(Token = "0x4000EC3")]
	LoopingFireExtinguisher,
	[Token(Token = "0x4000EC4")]
	LoopingGrillPoweredUp,
	[Token(Token = "0x4000EC5")]
	LoopingIngredientFriedSmoke,
	[Token(Token = "0x4000EC6")]
	LoopingIngredientBurntSmoke,
	[Token(Token = "0x4000EC7")]
	OpenFridgeParticles,
	[Token(Token = "0x4000EC8")]
	ServeBannerSmoke,
	[Token(Token = "0x4000EC9")]
	LoopingWetPlate,
	[Token(Token = "0x4000ECA")]
	IngredientAddedBurst,
	[Token(Token = "0x4000ECB")]
	PlateCleanSparkle,
	[Token(Token = "0x4000ECC")]
	IngredientAddedSmall,
	[Token(Token = "0x4000ECD")]
	CondimentSplash,
	[Token(Token = "0x4000ECE")]
	WrongIngredientAdded,
	[Token(Token = "0x4000ECF")]
	IngredientCollisionQuestGeneric,
	[Token(Token = "0x4000ED0")]
	RewardBubbleBurst,
	[Token(Token = "0x4000ED1")]
	NewRecipeUnlocked,
	[Token(Token = "0x4000ED2")]
	OldRecipeHandedInEffect,
	[Token(Token = "0x4000ED3")]
	IngredientCollideCandyCane,
	[Token(Token = "0x4000ED4")]
	IngredientCollideGingerbread,
	[Token(Token = "0x4000ED5")]
	IngredientCollidePotato,
	[Token(Token = "0x4000ED6")]
	IngredientCollideSnowman,
	[Token(Token = "0x4000ED7")]
	IngredientCollideTurkey,
	[Token(Token = "0x4000ED8")]
	BroFist,
	[Token(Token = "0x4000ED9")]
	FencingSparks,
	[Token(Token = "0x4000EDA")]
	HighFive
}
[Token(Token = "0x2000226")]
public class ParticlePool : SingleInstanceBehavior<ParticlePool>
{
	[Token(Token = "0x2000227")]
	public struct ParticelEffectBurst
	{
		[Token(Token = "0x4000EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly ParticleType type;

		[Token(Token = "0x4000EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly ParticleSystem particleSystem;

		[Token(Token = "0x4000EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float timer;

		[Token(Token = "0x4000EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public readonly Vector3 position;

		[Token(Token = "0x4000EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly Quaternion rotation;

		[Token(Token = "0x4000EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly Transform target;

		[Token(Token = "0x4000EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BurstData burstData;

		[Token(Token = "0x6000E50")]
		[Address(RVA = "0x96DEA8", Offset = "0x96DEA8", VA = "0x96DEA8")]
		public ParticelEffectBurst(ParticleType type, ParticleSystem particleSystem, Vector3 position, Quaternion rotation, BurstData burstData)
		{
		}

		[Token(Token = "0x6000E51")]
		[Address(RVA = "0x96E24C", Offset = "0x96E24C", VA = "0x96E24C")]
		public ParticelEffectBurst(ParticleType type, ParticleSystem particleSystem, Transform target, BurstData burstData)
		{
		}
	}

	[Token(Token = "0x2000228")]
	public struct BurstData
	{
		[Token(Token = "0x4000EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int cycles;

		[Token(Token = "0x4000EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public readonly int burstCount;

		[Token(Token = "0x4000EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly float interval;

		[Token(Token = "0x4000EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public readonly float probability;

		[Token(Token = "0x6000E52")]
		[Address(RVA = "0x96D258", Offset = "0x96D258", VA = "0x96D258")]
		public BurstData(int cycles, int burstCount, float interval, float probability)
		{
		}
	}

	[Token(Token = "0x4000EDB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject[] particleSystemPrefabs;

	[Token(Token = "0x4000EDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Dictionary<IngredientType, ParticleType> ingredientCollisionEffects;

	[Token(Token = "0x4000EDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Dictionary<ParticleType, List<ParticleSystem>> particleSystems;

	[Token(Token = "0x4000EDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static Dictionary<ParticleType, Transform> particleSystemTransforms;

	[Token(Token = "0x4000EDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static Dictionary<ParticleType, BurstData[][]> cachedBurstData;

	[Token(Token = "0x4000EE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static Dictionary<ParticleType, ParticleSystem> ingredientCollisionSliceEmitter;

	[Token(Token = "0x4000EE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static Dictionary<ParticleType, int> ingredientCollisionSliceBurstCount;

	[Token(Token = "0x4000EE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static Dictionary<ParticleType, bool> isLoopingParticleSystem;

	[Token(Token = "0x4000EE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static Dictionary<ParticleType, ParticleSystem[]> emitFacingPlayer;

	[Token(Token = "0x4000EE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static List<ParticelEffectBurst> activeBursts;

	[Token(Token = "0x4000EE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static List<ParticelEffectBurst> activeLoopingBursts;

	[Token(Token = "0x4000EE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static ParticleSystem.MainModule mainModule;

	[Token(Token = "0x4000EE7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static ParticleSystem.EmissionModule emissionModule;

	[Token(Token = "0x4000EE8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static ParticleSystem.Burst burstModule;

	[Token(Token = "0x4000EE9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private static ParticleSystem.ShapeModule shapeModule;

	[Token(Token = "0x4000EEA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private static ParticelEffectBurst activeBurst;

	[Token(Token = "0x4000EEB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private static ParticleType[] particleTypesInUse;

	[Token(Token = "0x4000EEC")]
	private const string IngredientCollideIdentifier = "IngredientCollide";

	[Token(Token = "0x4000EED")]
	private const string IngredientCollideSubEmitterIdentifier = "ingredient";

	[Token(Token = "0x6000E43")]
	[Address(RVA = "0x96C6C8", Offset = "0x96C6C8", VA = "0x96C6C8", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000E44")]
	[Address(RVA = "0x96D264", Offset = "0x96D264", VA = "0x96D264")]
	private void Update()
	{
	}

	[Token(Token = "0x6000E45")]
	[Address(RVA = "0x96DA10", Offset = "0x96DA10", VA = "0x96DA10")]
	public static void PlayParticles(ParticleType type, Vector3 position, Quaternion rotation)
	{
	}

	[Token(Token = "0x6000E46")]
	[Address(RVA = "0x96DED0", Offset = "0x96DED0", VA = "0x96DED0")]
	public static void PlayLoopingParticles(ParticleType type, Transform target)
	{
	}

	[Token(Token = "0x6000E47")]
	[Address(RVA = "0x96E354", Offset = "0x96E354", VA = "0x96E354")]
	public static void StopLoopingParticles(ParticleType type, Transform target)
	{
	}

	[Token(Token = "0x6000E48")]
	[Address(RVA = "0x96D718", Offset = "0x96D718", VA = "0x96D718")]
	public static void PlayBurst(Vector3 position, Quaternion rotation, ParticleType type, ParticleSystem particleSystem, int burstCount)
	{
	}

	[Token(Token = "0x6000E49")]
	[Address(RVA = "0x96E504", Offset = "0x96E504", VA = "0x96E504")]
	public static void ClearAllParticles()
	{
	}

	[Token(Token = "0x6000E4A")]
	[Address(RVA = "0x96E720", Offset = "0x96E720", VA = "0x96E720")]
	public static void ClearLoopingParticleSystem(ParticleType particleType)
	{
	}

	[Token(Token = "0x6000E4B")]
	[Address(RVA = "0x96E8E4", Offset = "0x96E8E4", VA = "0x96E8E4")]
	public static void PlayIngredientCollision(Vector3 position, Quaternion rotation, IngredientType ingredientType, bool isWhole, Color color)
	{
	}

	[Token(Token = "0x6000E4C")]
	[Address(RVA = "0x96EBC8", Offset = "0x96EBC8", VA = "0x96EBC8")]
	public static void PlayParticlesColoredSingleCycle(ParticleType type, Vector3 position, Quaternion rotation, Color color)
	{
	}

	[Token(Token = "0x6000E4D")]
	[Address(RVA = "0x96EEE4", Offset = "0x96EEE4", VA = "0x96EEE4")]
	public static void PlayParticlesSpice(ParticleType type, Vector3 position, Quaternion rotation, float emissionRate)
	{
	}

	[Token(Token = "0x6000E4E")]
	[Address(RVA = "0x96F1D8", Offset = "0x96F1D8", VA = "0x96F1D8")]
	public ParticlePool()
	{
	}
}
[Token(Token = "0x2000229")]
public class ParticlePoolID : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4000EF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ParticleType type;

	[Token(Token = "0x4000EFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool isLooping;

	[Token(Token = "0x4000EFB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool availableOnAndroid;

	[Token(Token = "0x4000EFC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	public bool availableOnPC;

	[Token(Token = "0x4000EFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ParticleSystem[] facePlayerEmitters;

	[Token(Token = "0x6000E53")]
	[Address(RVA = "0x96F7F8", Offset = "0x96F7F8", VA = "0x96F7F8")]
	public ParticlePoolID()
	{
	}
}
[Token(Token = "0x200022A")]
public class PlatePool : SingleInstanceNetworkedBehavior<PlatePool>, IPunObservable
{
	[Token(Token = "0x4000EFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool debugPlateOrders;

	[Token(Token = "0x4000EFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Plate[] allPlates;

	[Token(Token = "0x4000F00")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Queue<Plate> pooledPlates;

	[Token(Token = "0x4000F01")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Dictionary<int, Plate> plateLookup;

	[Token(Token = "0x4000F02")]
	public const int unknownOrderID = -2;

	[Token(Token = "0x4000F03")]
	public const int pooledOrderID = -1;

	[Token(Token = "0x4000F04")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int orderIDCount;

	[Token(Token = "0x4000F05")]
	private const int maxOrderID = 1000;

	[Token(Token = "0x170001C6")]
	public bool HasPlate
	{
		[Token(Token = "0x6000E54")]
		[Address(RVA = "0x96F808", Offset = "0x96F808", VA = "0x96F808")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000E55")]
	[Address(RVA = "0x96F858", Offset = "0x96F858", VA = "0x96F858")]
	private void Start()
	{
	}

	[Token(Token = "0x6000E56")]
	[Address(RVA = "0x96FB74", Offset = "0x96FB74", VA = "0x96FB74")]
	public void SpawnPlate(int orderID, RecipeIngredient[] ingredients, CustomerType customer, int customerSlot, int timeStamp, ConveyorPlateSlot plateSlot, bool spawnDirty)
	{
	}

	[Token(Token = "0x6000E57")]
	[Address(RVA = "0x96FECC", Offset = "0x96FECC", VA = "0x96FECC")]
	[PunRPC]
	private void SpawnPlateRPC(int plateViewID, int orderID, RecipeIngredient[] ingredients, int customer, int customerSlot, int timeStamp, int plateSlotID, bool spawnDirty)
	{
	}

	[Token(Token = "0x6000E58")]
	[Address(RVA = "0x97024C", Offset = "0x97024C", VA = "0x97024C")]
	public void RemoveAllPlatesFromGame()
	{
	}

	[Token(Token = "0x6000E59")]
	[Address(RVA = "0x9703DC", Offset = "0x9703DC", VA = "0x9703DC")]
	[PunRPC]
	private void RemovePlateFromGameRPC(int plateViewID)
	{
	}

	[Token(Token = "0x6000E5A")]
	[Address(RVA = "0x970498", Offset = "0x970498", VA = "0x970498")]
	public void ReturnInactivePlateToPool(Plate plate)
	{
	}

	[Token(Token = "0x6000E5B")]
	[Address(RVA = "0x9705B4", Offset = "0x9705B4", VA = "0x9705B4")]
	[PunRPC]
	private void PoolPlateRPC(int plateViewID)
	{
	}

	[Token(Token = "0x6000E5C")]
	[Address(RVA = "0x9706EC", Offset = "0x9706EC", VA = "0x9706EC", Slot = "6")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000E5D")]
	[Address(RVA = "0x970904", Offset = "0x970904", VA = "0x970904")]
	public int GenerateOrderID(int masterClientID)
	{
		return default(int);
	}

	[Token(Token = "0x6000E5E")]
	[Address(RVA = "0x970930", Offset = "0x970930", VA = "0x970930")]
	public static bool IsActiveOrderID(int orderID)
	{
		return default(bool);
	}

	[Token(Token = "0x6000E5F")]
	[Address(RVA = "0x97093C", Offset = "0x97093C", VA = "0x97093C")]
	public PlatePool()
	{
	}
}
[Token(Token = "0x200022B")]
internal sealed class ComponentPrefabPool<T> where T : Component
{
	[Token(Token = "0x200022C")]
	[CompilerGenerated]
	private sealed class <get_AllocatedObjects>d__11 : IEnumerable<T>, IEnumerable, IEnumerator<T>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <>1__state;

		[Token(Token = "0x4000F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T <>2__current;

		[Token(Token = "0x4000F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <>l__initialThreadId;

		[Token(Token = "0x4000F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ComponentPrefabPool<T> <>4__this;

		[Token(Token = "0x4000F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <capacityMask>5__2;

		[Token(Token = "0x4000F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int <i>5__3;

		[Token(Token = "0x170001C9")]
		private T System.Collections.Generic.IEnumerator<T>.Current
		{
			[Token(Token = "0x6000E70")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CA")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E72")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E6D")]
		[DebuggerHidden]
		public <get_AllocatedObjects>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x6000E6E")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E6F")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E71")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}

		[Token(Token = "0x6000E73")]
		[DebuggerHidden]
		private IEnumerator<T> System.Collections.Generic.IEnumerable<T>.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000E74")]
		[DebuggerHidden]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}

	[Token(Token = "0x4000F06")]
	private const int MAX_CAPACITY = 4096;

	[Token(Token = "0x4000F07")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private readonly Transform disabledParentTransform;

	[Token(Token = "0x4000F08")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private readonly T prefab;

	[Token(Token = "0x4000F09")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private T[] buffer;

	[Token(Token = "0x4000F0A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private int capacity;

	[Token(Token = "0x4000F0B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private int size;

	[Token(Token = "0x4000F0C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private int head;

	[Token(Token = "0x4000F0D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private int tail;

	[Token(Token = "0x170001C7")]
	internal T Prefab
	{
		[Token(Token = "0x6000E60")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001C8")]
	internal IEnumerable<T> AllocatedObjects
	{
		[Token(Token = "0x6000E61")]
		[IteratorStateMachine(typeof(ComponentPrefabPool<>.<get_AllocatedObjects>d__11))]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000E62")]
	internal ComponentPrefabPool(Transform disabledParentTransform, T prefab, int capacity)
	{
	}

	[Token(Token = "0x6000E63")]
	internal T Pop()
	{
		return null;
	}

	[Token(Token = "0x6000E64")]
	internal T Pop(Transform parent)
	{
		return null;
	}

	[Token(Token = "0x6000E65")]
	internal T Pop(Transform parent, Vector3 localPosition, Quaternion localRotation)
	{
		return null;
	}

	[Token(Token = "0x6000E66")]
	internal T Pop(Transform parent, Vector3 localPosition, Quaternion localRotation, Vector3 localScale)
	{
		return null;
	}

	[Token(Token = "0x6000E67")]
	internal void Push(T obj)
	{
	}

	[Token(Token = "0x6000E68")]
	internal bool AssertSizeZero()
	{
		return default(bool);
	}

	[Token(Token = "0x6000E69")]
	internal bool AssertBufferIntegrity()
	{
		return default(bool);
	}

	[Token(Token = "0x6000E6A")]
	private void IncreaseCapacity(int n)
	{
	}

	[Token(Token = "0x6000E6B")]
	private T PopInternal()
	{
		return null;
	}

	[Token(Token = "0x6000E6C")]
	private void PushInternal(T obj)
	{
	}
}
[Token(Token = "0x200022D")]
public class AvatarTesting : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x6000E75")]
	[Address(RVA = "0x970A3C", Offset = "0x970A3C", VA = "0x970A3C")]
	public AvatarTesting()
	{
	}
}
[Token(Token = "0x200022E")]
public class CustomHandContainer : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4000F14")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject HandPose;

	[Token(Token = "0x4000F15")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform WristOffset;

	[Token(Token = "0x6000E76")]
	[Address(RVA = "0x970A44", Offset = "0x970A44", VA = "0x970A44")]
	public CustomHandContainer()
	{
	}
}
[Token(Token = "0x200022F")]
public class DeepLinkLauncher : SingleInstanceBehavior<DeepLinkLauncher>
{
	[Token(Token = "0x4000F16")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool isGroupLaunch;

	[Token(Token = "0x4000F17")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string targetRoom;

	[Token(Token = "0x6000E77")]
	[Address(RVA = "0x970A4C", Offset = "0x970A4C", VA = "0x970A4C")]
	public string ConsumeStoredRoomNamePart()
	{
		return null;
	}

	[Token(Token = "0x6000E78")]
	[Address(RVA = "0x970A5C", Offset = "0x970A5C", VA = "0x970A5C")]
	public bool ConsumeIsGroupLaunch()
	{
		return default(bool);
	}

	[Token(Token = "0x6000E79")]
	[Address(RVA = "0x970A6C", Offset = "0x970A6C", VA = "0x970A6C")]
	public DeepLinkLauncher()
	{
	}
}
[Token(Token = "0x2000230")]
public class OculusSystemVoIPSuppressor : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x2000231")]
	[CompilerGenerated]
	private sealed class <Start>d__0 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public OculusSystemVoIPSuppressor <>4__this;

		[Token(Token = "0x170001CB")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E83")]
			[Address(RVA = "0x971450", Offset = "0x971450", VA = "0x971450", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CC")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E85")]
			[Address(RVA = "0x971498", Offset = "0x971498", VA = "0x971498", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E80")]
		[Address(RVA = "0x970B40", Offset = "0x970B40", VA = "0x970B40")]
		[DebuggerHidden]
		public <Start>d__0(int <>1__state)
		{
		}

		[Token(Token = "0x6000E81")]
		[Address(RVA = "0x971008", Offset = "0x971008", VA = "0x971008", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E82")]
		[Address(RVA = "0x97100C", Offset = "0x97100C", VA = "0x97100C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E84")]
		[Address(RVA = "0x971458", Offset = "0x971458", VA = "0x971458", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x6000E7A")]
	[Address(RVA = "0x970AD8", Offset = "0x970AD8", VA = "0x970AD8")]
	[IteratorStateMachine(typeof(<Start>d__0))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000E7B")]
	[Address(RVA = "0x970B68", Offset = "0x970B68", VA = "0x970B68")]
	private static void RefreshSuppressionState()
	{
	}

	[Token(Token = "0x6000E7C")]
	[Address(RVA = "0x970C50", Offset = "0x970C50", VA = "0x970C50")]
	private void OnPlayerConnected(PhotonPlayer newPlayer)
	{
	}

	[Token(Token = "0x6000E7D")]
	[Address(RVA = "0x970C54", Offset = "0x970C54", VA = "0x970C54")]
	private void OnPlayerDisconnected(PhotonPlayer otherPlayer)
	{
	}

	[Token(Token = "0x6000E7E")]
	[Address(RVA = "0x970C58", Offset = "0x970C58", VA = "0x970C58")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000E7F")]
	[Address(RVA = "0x971000", Offset = "0x971000", VA = "0x971000")]
	public OculusSystemVoIPSuppressor()
	{
	}
}
[Token(Token = "0x2000232")]
public class RichPresenceManager : SingleInstanceNetworkedBehavior<RichPresenceManager>
{
	[Token(Token = "0x2000233")]
	[CompilerGenerated]
	private sealed class <Start>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RichPresenceManager <>4__this;

		[Token(Token = "0x170001CD")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000E92")]
			[Address(RVA = "0x97208C", Offset = "0x97208C", VA = "0x97208C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CE")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000E94")]
			[Address(RVA = "0x9720D4", Offset = "0x9720D4", VA = "0x9720D4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E8F")]
		[Address(RVA = "0x971508", Offset = "0x971508", VA = "0x971508")]
		[DebuggerHidden]
		public <Start>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x6000E90")]
		[Address(RVA = "0x971C94", Offset = "0x971C94", VA = "0x971C94", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000E91")]
		[Address(RVA = "0x971C98", Offset = "0x971C98", VA = "0x971C98", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E93")]
		[Address(RVA = "0x972094", Offset = "0x972094", VA = "0x972094", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000F1B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool presenceEnabled;

	[Token(Token = "0x4000F1C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool debug;

	[Token(Token = "0x4000F1D")]
	private const int maxPlayers = 4;

	[Token(Token = "0x4000F1E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private PhotonCallbackManager photonCallbackManager;

	[Token(Token = "0x6000E86")]
	[Address(RVA = "0x9714A0", Offset = "0x9714A0", VA = "0x9714A0")]
	[IteratorStateMachine(typeof(<Start>d__4))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x6000E87")]
	[Address(RVA = "0x971530", Offset = "0x971530", VA = "0x971530")]
	public void EnablePresence()
	{
	}

	[Token(Token = "0x6000E88")]
	[Address(RVA = "0x97153C", Offset = "0x97153C", VA = "0x97153C")]
	private void RefreshPresenceOptions()
	{
	}

	[Token(Token = "0x6000E89")]
	[Address(RVA = "0x97194C", Offset = "0x97194C", VA = "0x97194C")]
	private void OnPlayerConnected(PhotonPlayer newPlayer)
	{
	}

	[Token(Token = "0x6000E8A")]
	[Address(RVA = "0x971950", Offset = "0x971950", VA = "0x971950")]
	private void OnPlayerDisconnected(PhotonPlayer otherPlayer)
	{
	}

	[Token(Token = "0x6000E8B")]
	[Address(RVA = "0x971954", Offset = "0x971954", VA = "0x971954")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000E8C")]
	[Address(RVA = "0x971958", Offset = "0x971958", VA = "0x971958")]
	public void ClearPresence()
	{
	}

	[Token(Token = "0x6000E8D")]
	[Address(RVA = "0x971AC0", Offset = "0x971AC0", VA = "0x971AC0", Slot = "5")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x6000E8E")]
	[Address(RVA = "0x971C20", Offset = "0x971C20", VA = "0x971C20")]
	public RichPresenceManager()
	{
	}
}
[Token(Token = "0x2000234")]
public class PhotoCollection
{
	[Token(Token = "0x4000F22")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public RenderTexture sandwichWithContext;

	[Token(Token = "0x4000F23")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RenderTexture onlySandwich;

	[Token(Token = "0x4000F24")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Plate.CreativeRecipeResults creativeRecipeResults;

	[Token(Token = "0x6000E95")]
	[Address(RVA = "0x9720DC", Offset = "0x9720DC", VA = "0x9720DC")]
	public PhotoCollection()
	{
	}
}
[Token(Token = "0x2000235")]
public class PhotoFrame : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x2000236")]
	public enum PhotoType
	{
		[Token(Token = "0x4000F2E")]
		SandwichWithContext,
		[Token(Token = "0x4000F2F")]
		OnlySandwich
	}

	[Token(Token = "0x4000F25")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private MeshRenderer meshRenderer;

	[Token(Token = "0x4000F26")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject newBadge;

	[Token(Token = "0x4000F27")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject almostBadge;

	[Token(Token = "0x4000F28")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private LocalizedText recipeName;

	[Token(Token = "0x4000F29")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private PokeButton infoButton;

	[Token(Token = "0x4000F2A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private bool canShowHintAndRecipeSimultaneous;

	[Token(Token = "0x4000F2C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public PhotoType photoType;

	[Token(Token = "0x170001CF")]
	public PhotoCollection Collection
	{
		[Token(Token = "0x6000E96")]
		[Address(RVA = "0x9720E4", Offset = "0x9720E4", VA = "0x9720E4")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000E97")]
		[Address(RVA = "0x9720EC", Offset = "0x9720EC", VA = "0x9720EC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001D0")]
	public Action OnInfoButtonClick
	{
		[Token(Token = "0x6000E98")]
		[Address(RVA = "0x9720F4", Offset = "0x9720F4", VA = "0x9720F4")]
		set
		{
		}
	}

	[Token(Token = "0x170001D1")]
	public bool InfoButtonActive
	{
		[Token(Token = "0x6000E99")]
		[Address(RVA = "0x972110", Offset = "0x972110", VA = "0x972110")]
		set
		{
		}
	}

	[Token(Token = "0x6000E9A")]
	[Address(RVA = "0x972130", Offset = "0x972130", VA = "0x972130")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000E9B")]
	[Address(RVA = "0x972134", Offset = "0x972134", VA = "0x972134")]
	public void ShowPhoto(PhotoCollection photoCollection, bool withInfoButton)
	{
	}

	[Token(Token = "0x6000E9C")]
	[Address(RVA = "0x9722D4", Offset = "0x9722D4", VA = "0x9722D4")]
	public void ClearAndHide()
	{
	}

	[Token(Token = "0x6000E9D")]
	[Address(RVA = "0x972330", Offset = "0x972330", VA = "0x972330")]
	public PhotoFrame()
	{
	}
}
[Token(Token = "0x2000237")]
public class PhotoGallery : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x2000238")]
	private enum SubPage
	{
		[Token(Token = "0x4000F48")]
		None,
		[Token(Token = "0x4000F49")]
		Gallery,
		[Token(Token = "0x4000F4A")]
		Details,
		[Token(Token = "0x4000F4B")]
		PermissionPrompt
	}

	[Token(Token = "0x4000F30")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Gallery")]
	[SerializeField]
	private GameObject galleryContainer;

	[Token(Token = "0x4000F31")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private PhotoFrame[] photoFrames;

	[Token(Token = "0x4000F32")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private PokeButton forwardButton;

	[Token(Token = "0x4000F33")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private PokeButton backButton;

	[Token(Token = "0x4000F34")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private TextMeshPro pageDisplayerText;

	[Token(Token = "0x4000F35")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private GameObject pagerBase;

	[Token(Token = "0x4000F36")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("Detailed view")]
	[SerializeField]
	private GameObject detailedViewBase;

	[Token(Token = "0x4000F37")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private PokeButton closeDetailedViewButton;

	[Token(Token = "0x4000F38")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private PokeButton viewRecipeButton;

	[Token(Token = "0x4000F39")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private PokeButton saveButton;

	[Token(Token = "0x4000F3A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private GameObject shareContainer;

	[Token(Token = "0x4000F3B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private PokeButton shareButton;

	[Token(Token = "0x4000F3C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private PhotoFrame detailedPhotoFrame;

	[Token(Token = "0x4000F3D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private TextMeshPro hintText;

	[Token(Token = "0x4000F3E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private GameObject photoToast;

	[Token(Token = "0x4000F3F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	[Header("PermissionPrompt")]
	private GameObject premissionPromptBase;

	[Token(Token = "0x4000F40")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private PokeButton permissionOkButton;

	[Token(Token = "0x4000F41")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private PokeButton permissionCancelButton;

	[Token(Token = "0x4000F42")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[Header("Player ready")]
	[SerializeField]
	private GameObject playerReadyContainer;

	[Token(Token = "0x4000F43")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[Header("Other")]
	[SerializeField]
	private Animator animator;

	[Token(Token = "0x4000F44")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Collider[] colliders;

	[Token(Token = "0x4000F45")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private int currentPage;

	[Token(Token = "0x4000F46")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private List<Action> syncActions;

	[Token(Token = "0x170001D2")]
	private int NumPages
	{
		[Token(Token = "0x6000E9E")]
		[Address(RVA = "0x972338", Offset = "0x972338", VA = "0x972338")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6000E9F")]
	[Address(RVA = "0x9724E4", Offset = "0x9724E4", VA = "0x9724E4")]
	public void Awake()
	{
	}

	[Token(Token = "0x6000EA0")]
	[Address(RVA = "0x972538", Offset = "0x972538", VA = "0x972538")]
	public void Start()
	{
	}

	[Token(Token = "0x6000EA1")]
	[Address(RVA = "0x972A04", Offset = "0x972A04", VA = "0x972A04")]
	public void Update()
	{
	}

	[Token(Token = "0x6000EA2")]
	[Address(RVA = "0x9726F4", Offset = "0x9726F4", VA = "0x9726F4")]
	public void Show(bool isVisible)
	{
	}

	[Token(Token = "0x6000EA3")]
	[Address(RVA = "0x972B8C", Offset = "0x972B8C", VA = "0x972B8C")]
	private void ShowPage(int newPage)
	{
	}

	[Token(Token = "0x6000EA4")]
	[Address(RVA = "0x972F3C", Offset = "0x972F3C", VA = "0x972F3C")]
	private void ShowDetailView(PhotoCollection photoCollection)
	{
	}

	[Token(Token = "0x6000EA5")]
	[Address(RVA = "0x9732F8", Offset = "0x9732F8", VA = "0x9732F8")]
	private void HideDetailView()
	{
	}

	[Token(Token = "0x6000EA6")]
	[Address(RVA = "0x9733F0", Offset = "0x9733F0", VA = "0x9733F0")]
	private void HidePermissionPrompt()
	{
	}

	[Token(Token = "0x6000EA7")]
	[Address(RVA = "0x972ABC", Offset = "0x972ABC", VA = "0x972ABC")]
	private void SetButtons(SubPage subPage)
	{
	}

	[Token(Token = "0x6000EA8")]
	[Address(RVA = "0x973524", Offset = "0x973524", VA = "0x973524")]
	public void OnLocalPlayerVoted(bool wasLastVote)
	{
	}

	[Token(Token = "0x6000EA9")]
	[Address(RVA = "0x973630", Offset = "0x973630", VA = "0x973630")]
	private void SharePhoto(PhotoCollection photoCollection)
	{
	}

	[Token(Token = "0x6000EAA")]
	[Address(RVA = "0x973634", Offset = "0x973634", VA = "0x973634")]
	private void SavePhoto(PhotoCollection photoCollection)
	{
	}

	[Token(Token = "0x6000EAB")]
	[Address(RVA = "0x973D40", Offset = "0x973D40", VA = "0x973D40")]
	private void EncodeToFile(RenderTexture texture, bool saveToPng, string basePath, string fileNameFormat)
	{
	}

	[Token(Token = "0x6000EAC")]
	[Address(RVA = "0x973F90", Offset = "0x973F90", VA = "0x973F90")]
	private System.Threading.Tasks.Task<byte[]> EncodeTexture(Texture2D texture, bool saveToPng)
	{
		return null;
	}

	[Token(Token = "0x6000EAD")]
	[Address(RVA = "0x974108", Offset = "0x974108", VA = "0x974108")]
	private System.Threading.Tasks.Task SaveDataToFile(byte[] imageData, string basePath, string fileNameFormat)
	{
		return null;
	}

	[Token(Token = "0x6000EAE")]
	[Address(RVA = "0x974314", Offset = "0x974314", VA = "0x974314")]
	private System.Threading.Tasks.Task SaveToFile(RenderTexture photo, string filePath)
	{
		return null;
	}

	[Token(Token = "0x6000EAF")]
	[Address(RVA = "0x973E58", Offset = "0x973E58", VA = "0x973E58")]
	private Texture2D ConvertToTexture2D(RenderTexture texture)
	{
		return null;
	}

	[Token(Token = "0x6000EB0")]
	[Address(RVA = "0x973B30", Offset = "0x973B30", VA = "0x973B30")]
	private string GetPublicPictureFolder()
	{
		return null;
	}

	[Token(Token = "0x6000EB1")]
	[Address(RVA = "0x973AD0", Offset = "0x973AD0", VA = "0x973AD0")]
	private bool CanSave()
	{
		return default(bool);
	}

	[Token(Token = "0x6000EB2")]
	[Address(RVA = "0x97422C", Offset = "0x97422C", VA = "0x97422C")]
	private static string GenerateFileName(string fileNameWithoutTime)
	{
		return null;
	}

	[Token(Token = "0x6000EB3")]
	[Address(RVA = "0x974414", Offset = "0x974414", VA = "0x974414")]
	public PhotoGallery()
	{
	}
}
[Token(Token = "0x2000242")]
public class PhotoMaker : SingleInstanceBehavior<PhotoMaker>
{
	[Token(Token = "0x4000F63")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Camera captureCamera;

	[Token(Token = "0x4000F64")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float maxAtHeight;

	[Token(Token = "0x4000F65")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 maxSandwichCameraPosition;

	[Token(Token = "0x4000F66")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Quaternion maxSandwichCameraRotation;

	[Token(Token = "0x4000F67")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float minAtHeight;

	[Token(Token = "0x4000F68")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 minSandwichCameraPosition;

	[Token(Token = "0x4000F69")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Quaternion minSandwichCameraRotation;

	[Token(Token = "0x4000F6A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector2Int captureResolution;

	[Token(Token = "0x4000F6B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private List<PhotoCollection> photoCollections;

	[Token(Token = "0x4000F6C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private CookingGameState gameState;

	[Token(Token = "0x4000F6D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool isActivated;

	[Token(Token = "0x170001D3")]
	public IReadOnlyList<PhotoCollection> Photos
	{
		[Token(Token = "0x6000ED1")]
		[Address(RVA = "0x972494", Offset = "0x972494", VA = "0x972494")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000ED2")]
	[Address(RVA = "0x974D0C", Offset = "0x974D0C", VA = "0x974D0C")]
	public void Start()
	{
	}

	[Token(Token = "0x6000ED3")]
	[Address(RVA = "0x974EA8", Offset = "0x974EA8", VA = "0x974EA8", Slot = "5")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x6000ED4")]
	[Address(RVA = "0x974E78", Offset = "0x974E78", VA = "0x974E78")]
	private void OnStateChanged(GameState oldState, GameState newState)
	{
	}

	[Token(Token = "0x6000ED5")]
	[Address(RVA = "0x974FC0", Offset = "0x974FC0", VA = "0x974FC0")]
	private void TryActivatePhotos()
	{
	}

	[Token(Token = "0x6000ED6")]
	[Address(RVA = "0x974FAC", Offset = "0x974FAC", VA = "0x974FAC")]
	private void TryDeactivateAndCleanupPhotos()
	{
	}

	[Token(Token = "0x6000ED7")]
	[Address(RVA = "0x974614", Offset = "0x974614", VA = "0x974614")]
	public void DeleteAllPhotos()
	{
	}

	[Token(Token = "0x6000ED8")]
	[Address(RVA = "0x974FD8", Offset = "0x974FD8", VA = "0x974FD8")]
	private static void DeleteRenderTexture(RenderTexture texture)
	{
	}

	[Token(Token = "0x6000ED9")]
	[Address(RVA = "0x975074", Offset = "0x975074", VA = "0x975074")]
	private void PositionCameraForTargetHeight(float photoTargetHeight)
	{
	}

	[Token(Token = "0x6000EDA")]
	[Address(RVA = "0x975188", Offset = "0x975188", VA = "0x975188")]
	public void TryTakePhoto(Plate plate)
	{
	}

	[Token(Token = "0x6000EDB")]
	[Address(RVA = "0x9755BC", Offset = "0x9755BC", VA = "0x9755BC")]
	private RenderTexture CaptureToTexture(int layerMask)
	{
		return null;
	}

	[Token(Token = "0x6000EDC")]
	[Address(RVA = "0x975674", Offset = "0x975674", VA = "0x975674")]
	public PhotoMaker()
	{
	}
}
[Token(Token = "0x2000243")]
public class ConveyorPlateSlot : NetworkedBehaviour, IPunObservable
{
	[Token(Token = "0x170001D4")]
	public int OccupantID
	{
		[Token(Token = "0x6000EDD")]
		[Address(RVA = "0x9757A4", Offset = "0x9757A4", VA = "0x9757A4")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000EDE")]
		[Address(RVA = "0x9757AC", Offset = "0x9757AC", VA = "0x9757AC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001D5")]
	public int OccupantOrderID
	{
		[Token(Token = "0x6000EDF")]
		[Address(RVA = "0x9757B4", Offset = "0x9757B4", VA = "0x9757B4")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000EE0")]
		[Address(RVA = "0x9757BC", Offset = "0x9757BC", VA = "0x9757BC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001D6")]
	public bool IsOccupied
	{
		[Token(Token = "0x6000EE1")]
		[Address(RVA = "0x9706D0", Offset = "0x9706D0", VA = "0x9706D0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000EE2")]
	[Address(RVA = "0x9757C4", Offset = "0x9757C4", VA = "0x9757C4", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000EE3")]
	[Address(RVA = "0x96FEC4", Offset = "0x96FEC4", VA = "0x96FEC4")]
	public void MasterOccupy(int occupantID, int orderID)
	{
	}

	[Token(Token = "0x6000EE4")]
	[Address(RVA = "0x9758D8", Offset = "0x9758D8", VA = "0x9758D8")]
	public void Free(int occupantToFreeID, int occupantOrderID)
	{
	}

	[Token(Token = "0x6000EE5")]
	[Address(RVA = "0x975A24", Offset = "0x975A24", VA = "0x975A24")]
	[PunRPC]
	private void FreePlateSlotRPC(int occupantToFreeID, int occupantToFreeOrderID)
	{
	}

	[Token(Token = "0x6000EE6")]
	[Address(RVA = "0x9706E0", Offset = "0x9706E0", VA = "0x9706E0")]
	public void MasterFree()
	{
	}

	[Token(Token = "0x6000EE7")]
	[Address(RVA = "0x975AB0", Offset = "0x975AB0", VA = "0x975AB0")]
	public ConveyorPlateSlot()
	{
	}
}
[Token(Token = "0x2000244")]
public class FollowPlateSlot : NetworkedBehaviour, IGrabbableTransformController, IPunObservable
{
	[Token(Token = "0x4000F70")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool hasTarget;

	[Token(Token = "0x4000F71")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float returnTime;

	[Token(Token = "0x4000F72")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool returnTimerEnabled;

	[Token(Token = "0x4000F73")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[HideInInspector]
	public float returnTimer;

	[Token(Token = "0x4000F74")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Grabbable grabbable;

	[Token(Token = "0x4000F75")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Rigidbody rigidBody;

	[Token(Token = "0x4000F77")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Transform targetTransform;

	[Token(Token = "0x4000F78")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private PlateCollision plateCollision;

	[Token(Token = "0x4000F79")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool dependenciesFetched;

	[Token(Token = "0x170001D7")]
	public bool FollowingPlateSlot
	{
		[Token(Token = "0x6000EE8")]
		[Address(RVA = "0x975AB8", Offset = "0x975AB8", VA = "0x975AB8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001D8")]
	public ConveyorPlateSlot TargetSlot
	{
		[Token(Token = "0x6000EE9")]
		[Address(RVA = "0x975AD8", Offset = "0x975AD8", VA = "0x975AD8")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0x975AE0", Offset = "0x975AE0", VA = "0x975AE0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000EEB")]
	[Address(RVA = "0x975AE8", Offset = "0x975AE8", VA = "0x975AE8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000EEC")]
	[Address(RVA = "0x975B54", Offset = "0x975B54", VA = "0x975B54")]
	private void GetDependencies()
	{
	}

	[Token(Token = "0x6000EED")]
	[Address(RVA = "0x975CAC", Offset = "0x975CAC", VA = "0x975CAC")]
	public void SetupToFollow(int plateSlotViewID)
	{
	}

	[Token(Token = "0x6000EEE")]
	[Address(RVA = "0x975F54", Offset = "0x975F54", VA = "0x975F54")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000EEF")]
	[Address(RVA = "0x9761C0", Offset = "0x9761C0", VA = "0x9761C0")]
	public void ForceReturn()
	{
	}

	[Token(Token = "0x6000EF0")]
	[Address(RVA = "0x97646C", Offset = "0x97646C", VA = "0x97646C")]
	public void StopFollowingPlateSlot(int orderID)
	{
	}

	[Token(Token = "0x6000EF1")]
	[Address(RVA = "0x976634", Offset = "0x976634", VA = "0x976634")]
	public void OnGrabBegin()
	{
	}

	[Token(Token = "0x6000EF2")]
	[Address(RVA = "0x976668", Offset = "0x976668", VA = "0x976668")]
	private void OnRemoteGrabBegin()
	{
	}

	[Token(Token = "0x6000EF3")]
	[Address(RVA = "0x976690", Offset = "0x976690", VA = "0x976690", Slot = "4")]
	public bool ShouldDisableNetworkSyncing(bool isGrabbed)
	{
		return default(bool);
	}

	[Token(Token = "0x6000EF4")]
	[Address(RVA = "0x9766B8", Offset = "0x9766B8", VA = "0x9766B8")]
	public Transform GetTargetSlotTransform()
	{
		return null;
	}

	[Token(Token = "0x6000EF5")]
	[Address(RVA = "0x9766C0", Offset = "0x9766C0", VA = "0x9766C0", Slot = "5")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000EF6")]
	[Address(RVA = "0x9767C4", Offset = "0x9767C4", VA = "0x9767C4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000EF7")]
	[Address(RVA = "0x976898", Offset = "0x976898", VA = "0x976898")]
	public FollowPlateSlot()
	{
	}
}
[Token(Token = "0x2000245")]
public class Plate : NetworkedBehaviour, IGrabbableTransformController, IPunObservable, IConsumableTarget
{
	[Token(Token = "0x2000246")]
	public enum PlateState
	{
		[Token(Token = "0x4000FAF")]
		Setup,
		[Token(Token = "0x4000FB0")]
		Inactive,
		[Token(Token = "0x4000FB1")]
		WaitingForIngredients,
		[Token(Token = "0x4000FB2")]
		Delivering,
		[Token(Token = "0x4000FB3")]
		TimedOut,
		[Token(Token = "0x4000FB4")]
		Shattered
	}

	[Token(Token = "0x2000247")]
	public struct CreativeRecipeResults
	{
		[Token(Token = "0x4000FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CreativeRecipeData recipe;

		[Token(Token = "0x4000FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CreativeModeFeedback feedback;

		[Token(Token = "0x4000FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool unlockedNewRecipe;
	}

	[Token(Token = "0x4000F83")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public List<IngredientType> addedIngredientTypes;

	[Token(Token = "0x4000F84")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public List<bool> stackedCorrectly;

	[Token(Token = "0x4000F85")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public List<bool> friedCorrectly;

	[Token(Token = "0x4000F86")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[HideInInspector]
	public bool hasRemovedOrder;

	[Token(Token = "0x4000F87")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Collider topIngredientGrabCollider;

	[Token(Token = "0x4000F88")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private float mercyTime;

	[Token(Token = "0x4000F89")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private PlateDirt plateDirt;

	[Token(Token = "0x4000F8A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private GameObject Colliders;

	[Token(Token = "0x4000F8B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private UseConsumableHere useConsumableHere;

	[Token(Token = "0x4000F8C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Vector3 handInPosition;

	[Token(Token = "0x4000F8D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Grabbable grabbable;

	[Token(Token = "0x4000F8E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Rigidbody rigidBody;

	[Token(Token = "0x4000F8F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private List<StackedIngredientData> addedIngredients;

	[Token(Token = "0x4000F90")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private List<StackedIngredientData> networkAddedIngredients;

	[Token(Token = "0x4000F91")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private CustomerData customerData;

	[Token(Token = "0x4000F93")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private PlateAnimation plateAnimation;

	[Token(Token = "0x4000F94")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private PlateCollision plateCollision;

	[Token(Token = "0x4000F95")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private OrderMonitor orderMonitor;

	[Token(Token = "0x4000F96")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private OrderObscurer orderObscurer;

	[Token(Token = "0x4000F97")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private ThievingHandler thievingHandler;

	[Token(Token = "0x4000F98")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private CookingGame cookingGame;

	[Token(Token = "0x4000F99")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private PlateCondiment plateCondiment;

	[Token(Token = "0x4000F9A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private PlateSpice plateSpice;

	[Token(Token = "0x4000F9B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private CustomerRegistry customerRegistry;

	[Token(Token = "0x4000F9C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private TimeSlowdownHandler timeSlowdownHandler;

	[Token(Token = "0x4000F9D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private PlateAddToCollider addToPlateCollider;

	[Token(Token = "0x4000F9E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private PlateScoring.Grade recipeGrade;

	[Token(Token = "0x4000F9F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	private bool playLocalDeliveryAnimation;

	[Token(Token = "0x4000FA0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13D")]
	private bool awaitingRemovalFromOwner;

	[Token(Token = "0x4000FA1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13E")]
	private bool awaitingRemovalSendDeliveryComplete;

	[Token(Token = "0x4000FA2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private float respawnTime;

	[Token(Token = "0x4000FA3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	private float respawnTimer;

	[Token(Token = "0x4000FA4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private float elapsedTime;

	[Token(Token = "0x4000FA5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
	private float maxWaitTime;

	[Token(Token = "0x4000FA6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private float unfriedValue;

	[Token(Token = "0x4000FA7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	private float friedValue;

	[Token(Token = "0x4000FA8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private float previousTimeStamp;

	[Token(Token = "0x4000FA9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
	private int targetPlateSlot;

	[Token(Token = "0x4000FAA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private RecipeIngredient[] recipeIngredientReceiver;

	[Token(Token = "0x4000FAB")]
	private const float firstIngredientSnapFactor = 0.02f;

	[Token(Token = "0x4000FAC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public bool acceptsOnlyPerfectIngredients;

	[Token(Token = "0x170001D9")]
	public int OrderID
	{
		[Token(Token = "0x6000EF8")]
		[Address(RVA = "0x9768A8", Offset = "0x9768A8", VA = "0x9768A8")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000EF9")]
		[Address(RVA = "0x9768B0", Offset = "0x9768B0", VA = "0x9768B0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001DA")]
	public Recipe OrderRecipe
	{
		[Token(Token = "0x6000EFA")]
		[Address(RVA = "0x9768B8", Offset = "0x9768B8", VA = "0x9768B8")]
		[CompilerGenerated]
		get
		{
			return default(Recipe);
		}
		[Token(Token = "0x6000EFB")]
		[Address(RVA = "0x9768C0", Offset = "0x9768C0", VA = "0x9768C0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001DB")]
	public CustomerType OrderCustomer
	{
		[Token(Token = "0x6000EFC")]
		[Address(RVA = "0x9768C8", Offset = "0x9768C8", VA = "0x9768C8")]
		[CompilerGenerated]
		get
		{
			return default(CustomerType);
		}
		[Token(Token = "0x6000EFD")]
		[Address(RVA = "0x9768D0", Offset = "0x9768D0", VA = "0x9768D0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001DC")]
	public int CustomerSlot
	{
		[Token(Token = "0x6000EFE")]
		[Address(RVA = "0x9768D8", Offset = "0x9768D8", VA = "0x9768D8")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6000EFF")]
		[Address(RVA = "0x9768E0", Offset = "0x9768E0", VA = "0x9768E0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001DD")]
	public PlateState MyPlateState
	{
		[Token(Token = "0x6000F00")]
		[Address(RVA = "0x9768E8", Offset = "0x9768E8", VA = "0x9768E8")]
		[CompilerGenerated]
		get
		{
			return default(PlateState);
		}
		[Token(Token = "0x6000F01")]
		[Address(RVA = "0x9768F0", Offset = "0x9768F0", VA = "0x9768F0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001DE")]
	public List<StackedIngredientData> AddedIngredientsData
	{
		[Token(Token = "0x6000F02")]
		[Address(RVA = "0x9768F8", Offset = "0x9768F8", VA = "0x9768F8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x170001DF")]
	public bool ReadyToDeliver
	{
		[Token(Token = "0x6000F03")]
		[Address(RVA = "0x976900", Offset = "0x976900", VA = "0x976900")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000F04")]
		[Address(RVA = "0x976908", Offset = "0x976908", VA = "0x976908")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001E0")]
	public float OrderTimeFraction
	{
		[Token(Token = "0x6000F05")]
		[Address(RVA = "0x976914", Offset = "0x976914", VA = "0x976914")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170001E1")]
	public float OrderSafeTimeFraction
	{
		[Token(Token = "0x6000F06")]
		[Address(RVA = "0x976938", Offset = "0x976938", VA = "0x976938")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170001E2")]
	public float TimeLeft
	{
		[Token(Token = "0x6000F07")]
		[Address(RVA = "0x976964", Offset = "0x976964", VA = "0x976964")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170001E3")]
	public bool PlateIsEmpty
	{
		[Token(Token = "0x6000F08")]
		[Address(RVA = "0x976974", Offset = "0x976974", VA = "0x976974")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001E4")]
	public int StackSize
	{
		[Token(Token = "0x6000F09")]
		[Address(RVA = "0x9769C4", Offset = "0x9769C4", VA = "0x9769C4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170001E5")]
	public bool CanSmash
	{
		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0x976A0C", Offset = "0x976A0C", VA = "0x976A0C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001E6")]
	public UseConsumableHere UseConsumableHere
	{
		[Token(Token = "0x6000F0B")]
		[Address(RVA = "0x976AAC", Offset = "0x976AAC", VA = "0x976AAC", Slot = "6")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0x976AB4", Offset = "0x976AB4", VA = "0x976AB4", Slot = "7")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170001E7")]
	public bool ReactsToConsumables
	{
		[Token(Token = "0x6000F0D")]
		[Address(RVA = "0x976ABC", Offset = "0x976ABC", VA = "0x976ABC", Slot = "8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001E8")]
	public bool IsLocallyHeld
	{
		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0x976B70", Offset = "0x976B70", VA = "0x976B70")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001E9")]
	public FollowPlateSlot plateSlotFollower
	{
		[Token(Token = "0x6000F0F")]
		[Address(RVA = "0x976B8C", Offset = "0x976B8C", VA = "0x976B8C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000F10")]
		[Address(RVA = "0x976B94", Offset = "0x976B94", VA = "0x976B94")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001EA")]
	public bool IsClean
	{
		[Token(Token = "0x6000F11")]
		[Address(RVA = "0x976B9C", Offset = "0x976B9C", VA = "0x976B9C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001EB")]
	private bool InTutorial
	{
		[Token(Token = "0x6000F12")]
		[Address(RVA = "0x976BD0", Offset = "0x976BD0", VA = "0x976BD0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001EC")]
	public StackedIngredientData GetTopIngredient
	{
		[Token(Token = "0x6000F13")]
		[Address(RVA = "0x976CA4", Offset = "0x976CA4", VA = "0x976CA4")]
		get
		{
			return default(StackedIngredientData);
		}
	}

	[Token(Token = "0x170001ED")]
	public bool CreativeModePlate
	{
		[Token(Token = "0x6000F14")]
		[Address(RVA = "0x976D2C", Offset = "0x976D2C", VA = "0x976D2C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000F15")]
		[Address(RVA = "0x976D34", Offset = "0x976D34", VA = "0x976D34")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001EE")]
	public PlateVisuals PlateVisuals
	{
		[Token(Token = "0x6000F16")]
		[Address(RVA = "0x976D40", Offset = "0x976D40", VA = "0x976D40")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000F17")]
		[Address(RVA = "0x976D48", Offset = "0x976D48", VA = "0x976D48")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001EF")]
	public CreativeRecipeResults DeliveredCreativeRecipeResults
	{
		[Token(Token = "0x6000F18")]
		[Address(RVA = "0x976D50", Offset = "0x976D50", VA = "0x976D50")]
		[CompilerGenerated]
		get
		{
			return default(CreativeRecipeResults);
		}
		[Token(Token = "0x6000F19")]
		[Address(RVA = "0x976D5C", Offset = "0x976D5C", VA = "0x976D5C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000F1A")]
	[Address(RVA = "0x976D64", Offset = "0x976D64", VA = "0x976D64")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000F1B")]
	[Address(RVA = "0x977024", Offset = "0x977024", VA = "0x977024")]
	private void Start()
	{
	}

	[Token(Token = "0x6000F1C")]
	[Address(RVA = "0x96FFC0", Offset = "0x96FFC0", VA = "0x96FFC0")]
	public void AddToGame(int orderID, Recipe recipe, CustomerType customer, int customerSlot, int timeStamp, int targetPlateSlotID, bool dirty)
	{
	}

	[Token(Token = "0x6000F1D")]
	[Address(RVA = "0x977498", Offset = "0x977498", VA = "0x977498")]
	private void OnPlateAddedToGame()
	{
	}

	[Token(Token = "0x6000F1E")]
	[Address(RVA = "0x977998", Offset = "0x977998", VA = "0x977998")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000F1F")]
	[Address(RVA = "0x977D80", Offset = "0x977D80", VA = "0x977D80")]
	private void Update()
	{
	}

	[Token(Token = "0x6000F20")]
	[Address(RVA = "0x978430", Offset = "0x978430", VA = "0x978430")]
	public void OnDeliveryComplete(int deliveredOrderID)
	{
	}

	[Token(Token = "0x6000F21")]
	[Address(RVA = "0x9775BC", Offset = "0x9775BC", VA = "0x9775BC")]
	private void SetPlateState(PlateState newState)
	{
	}

	[Token(Token = "0x6000F22")]
	[Address(RVA = "0x97844C", Offset = "0x97844C", VA = "0x97844C")]
	private void OnPlateStateChanged(PlateState oldState)
	{
	}

	[Token(Token = "0x6000F23")]
	[Address(RVA = "0x96F934", Offset = "0x96F934", VA = "0x96F934")]
	public void RemoveFromGame(bool sendOnDeliveryComplete)
	{
	}

	[Token(Token = "0x6000F24")]
	[Address(RVA = "0x978C80", Offset = "0x978C80", VA = "0x978C80")]
	private void OnPlateRemovedFromGame()
	{
	}

	[Token(Token = "0x6000F25")]
	[Address(RVA = "0x978E74", Offset = "0x978E74", VA = "0x978E74")]
	public void AddIngredientToPlate(IngredientType ingredientType, Vector3 position, Quaternion rotation, float fryValue, IngredientSlice ingredient, bool isTofu = false, bool showFeedbackToAll = false, float dropForce = 0f)
	{
	}

	[Token(Token = "0x6000F26")]
	[Address(RVA = "0x979FA4", Offset = "0x979FA4", VA = "0x979FA4")]
	[PunRPC]
	private void AddIngredientToPlateRPC(int ingredientType, float fryValue, float rotationRelativePlate, float posOnPlateX, float posOnPlateZ, bool isTofu)
	{
	}

	[Token(Token = "0x6000F27")]
	[Address(RVA = "0x97A630", Offset = "0x97A630", VA = "0x97A630")]
	[PunRPC]
	private void AddTofuStackRPC(Vector3 position, Quaternion rotation, int numberOfTofu)
	{
	}

	[Token(Token = "0x6000F28")]
	[Address(RVA = "0x97A708", Offset = "0x97A708", VA = "0x97A708")]
	[PunRPC]
	private void CreatePerfectSandwichStackRPC(bool keepTofu)
	{
	}

	[Token(Token = "0x6000F29")]
	[Address(RVA = "0x9775CC", Offset = "0x9775CC", VA = "0x9775CC")]
	private void UpdateLocalOrderProgress()
	{
	}

	[Token(Token = "0x6000F2A")]
	[Address(RVA = "0x97AB00", Offset = "0x97AB00", VA = "0x97AB00")]
	public void OnGrabEnd()
	{
	}

	[Token(Token = "0x6000F2B")]
	[Address(RVA = "0x97AFE0", Offset = "0x97AFE0", VA = "0x97AFE0")]
	public void OnRemoteGrabEnd()
	{
	}

	[Token(Token = "0x6000F2C")]
	[Address(RVA = "0x97AD98", Offset = "0x97AD98", VA = "0x97AD98")]
	public void CheckAndHandInIfPossible()
	{
	}

	[Token(Token = "0x6000F2D")]
	[Address(RVA = "0x97B068", Offset = "0x97B068", VA = "0x97B068")]
	public void HandInPlate(Vector3 handInPosition)
	{
	}

	[Token(Token = "0x6000F2E")]
	[Address(RVA = "0x978A04", Offset = "0x978A04", VA = "0x978A04")]
	private void OnPlateStoppedWaitingForIngredients()
	{
	}

	[Token(Token = "0x6000F2F")]
	[Address(RVA = "0x976AE4", Offset = "0x976AE4", VA = "0x976AE4")]
	public PlateScoring.Grade GetFinalGrade()
	{
		return default(PlateScoring.Grade);
	}

	[Token(Token = "0x6000F30")]
	[Address(RVA = "0x97B3EC", Offset = "0x97B3EC", VA = "0x97B3EC", Slot = "4")]
	public bool ShouldDisableNetworkSyncing(bool isGrabbed)
	{
		return default(bool);
	}

	[Token(Token = "0x6000F31")]
	[Address(RVA = "0x97B3FC", Offset = "0x97B3FC", VA = "0x97B3FC")]
	public void RemoveIngredientsFromPlate()
	{
	}

	[Token(Token = "0x6000F32")]
	[Address(RVA = "0x97B4C4", Offset = "0x97B4C4", VA = "0x97B4C4")]
	[PunRPC]
	private void RemoveIngredientsFromPlateRPC()
	{
	}

	[Token(Token = "0x6000F33")]
	[Address(RVA = "0x97B530", Offset = "0x97B530", VA = "0x97B530")]
	[PunRPC]
	private void ShatterPlateRPC(CustomerData.RequirementFeedback passesRequirements)
	{
	}

	[Token(Token = "0x6000F34")]
	[Address(RVA = "0x97A2B0", Offset = "0x97A2B0", VA = "0x97A2B0")]
	private void CheckIfReadyToServe()
	{
	}

	[Token(Token = "0x6000F35")]
	[Address(RVA = "0x97B600", Offset = "0x97B600", VA = "0x97B600")]
	[PunRPC]
	public void ForceTimeoutRPC()
	{
	}

	[Token(Token = "0x6000F36")]
	[Address(RVA = "0x97B640", Offset = "0x97B640", VA = "0x97B640", Slot = "5")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000F37")]
	[Address(RVA = "0x97C060", Offset = "0x97C060", VA = "0x97C060")]
	private void UpdateNetworkedAddedIngredients()
	{
	}

	[Token(Token = "0x6000F38")]
	[Address(RVA = "0x97A564", Offset = "0x97A564", VA = "0x97A564")]
	private void UpdateTopColliders()
	{
	}

	[Token(Token = "0x6000F39")]
	[Address(RVA = "0x97C35C", Offset = "0x97C35C", VA = "0x97C35C")]
	private bool IdenticalStacksSoFar(List<StackedIngredientData> listOriginal, List<StackedIngredientData> listNew)
	{
		return default(bool);
	}

	[Token(Token = "0x6000F3A")]
	[Address(RVA = "0x97C72C", Offset = "0x97C72C", VA = "0x97C72C")]
	public void RemoveTopIngredient()
	{
	}

	[Token(Token = "0x6000F3B")]
	[Address(RVA = "0x97C464", Offset = "0x97C464", VA = "0x97C464")]
	private void RemoveIngredient(int index, IngredientType removedType)
	{
	}

	[Token(Token = "0x6000F3C")]
	[Address(RVA = "0x9773F8", Offset = "0x9773F8", VA = "0x9773F8")]
	private void WipePlate()
	{
	}

	[Token(Token = "0x6000F3D")]
	[Address(RVA = "0x97C844", Offset = "0x97C844", VA = "0x97C844")]
	public void StealTopIngredient()
	{
	}

	[Token(Token = "0x6000F3E")]
	[Address(RVA = "0x97C86C", Offset = "0x97C86C", VA = "0x97C86C")]
	public void OnPlayerDisconnected()
	{
	}

	[Token(Token = "0x6000F3F")]
	[Address(RVA = "0x97C8B0", Offset = "0x97C8B0", VA = "0x97C8B0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000F40")]
	[Address(RVA = "0x97C9F0", Offset = "0x97C9F0", VA = "0x97C9F0")]
	public Plate()
	{
	}
}
[Token(Token = "0x2000248")]
public class PlateAddToCollider : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4000FB8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private CapsuleCollider addToPlateCollider;

	[Token(Token = "0x4000FB9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float creativeModeColliderRadius;

	[Token(Token = "0x4000FBA")]
	private const float firstIngredientColliderRadius = 20f;

	[Token(Token = "0x4000FBB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 colliderOriginPos;

	[Token(Token = "0x4000FBC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float toothpickColliderDefaultRadius;

	[Token(Token = "0x6000F41")]
	[Address(RVA = "0x97CAE0", Offset = "0x97CAE0", VA = "0x97CAE0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000F42")]
	[Address(RVA = "0x97C4F8", Offset = "0x97C4F8", VA = "0x97C4F8")]
	public void AdjustCollider(List<StackedIngredientData> addedIngredients, bool inCreativeMode)
	{
	}

	[Token(Token = "0x6000F43")]
	[Address(RVA = "0x97C810", Offset = "0x97C810", VA = "0x97C810")]
	public void OnPlateClear()
	{
	}

	[Token(Token = "0x6000F44")]
	[Address(RVA = "0x97CB40", Offset = "0x97CB40", VA = "0x97CB40")]
	public PlateAddToCollider()
	{
	}
}
[Token(Token = "0x2000249")]
public class PlateAnimation : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x200024A")]
	private enum AnimationStep
	{
		[Token(Token = "0x4000FD6")]
		Inactive,
		[Token(Token = "0x4000FD7")]
		GoingDownTableCenter,
		[Token(Token = "0x4000FD8")]
		GoingUpToCustomer,
		[Token(Token = "0x4000FD9")]
		CustomerReactAndEat,
		[Token(Token = "0x4000FDA")]
		EndDelay,
		[Token(Token = "0x4000FDB")]
		TimedOutCustomerReaction
	}

	[Token(Token = "0x4000FBD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Delivery Animation")]
	public float leaveDelayTime;

	[Token(Token = "0x4000FBE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Header("Time out Animation")]
	public float crackTime;

	[Token(Token = "0x4000FC0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float animationCooldown;

	[Token(Token = "0x4000FC1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float timeLeftWhenStartShaking;

	[Token(Token = "0x4000FC2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float stackSizeAnimationThreshold;

	[Token(Token = "0x4000FC3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float risingUpToCustomerTime;

	[Token(Token = "0x4000FC4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private AnimationStep animationStep;

	[Token(Token = "0x4000FC5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Plate plate;

	[Token(Token = "0x4000FC6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private PlateVisuals plateVisuals;

	[Token(Token = "0x4000FC7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ConveyorBelt conveyorBelt;

	[Token(Token = "0x4000FC8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private OrderMonitor orderMonitor;

	[Token(Token = "0x4000FC9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private CustomerVisual customer;

	[Token(Token = "0x4000FCA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Animator plateShake;

	[Token(Token = "0x4000FCB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3 belowTableCenterTarget;

	[Token(Token = "0x4000FCC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Vector3 infrontOfCustomerTarget;

	[Token(Token = "0x4000FCD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool customerFinishedEating;

	[Token(Token = "0x4000FCE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float leaveDelayTimer;

	[Token(Token = "0x4000FCF")]
	private const int numCrackStates = 3;

	[Token(Token = "0x4000FD0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private int currentCrackState;

	[Token(Token = "0x4000FD1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private float animationTimer;

	[Token(Token = "0x4000FD2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Rigidbody rigidBody;

	[Token(Token = "0x4000FD3")]
	private const int deliveringNoOrderID = -3;

	[Token(Token = "0x4000FD4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private int deliveringOrderID;

	[Token(Token = "0x170001F0")]
	public float StartShakingThreshold
	{
		[Token(Token = "0x6000F45")]
		[Address(RVA = "0x97CB50", Offset = "0x97CB50", VA = "0x97CB50")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x170001F1")]
	public float StartCrackingTime
	{
		[Token(Token = "0x6000F46")]
		[Address(RVA = "0x97CB58", Offset = "0x97CB58", VA = "0x97CB58")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000F47")]
		[Address(RVA = "0x97CB60", Offset = "0x97CB60", VA = "0x97CB60")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000F48")]
	[Address(RVA = "0x97CB68", Offset = "0x97CB68", VA = "0x97CB68")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000F49")]
	[Address(RVA = "0x97CC48", Offset = "0x97CC48", VA = "0x97CC48")]
	private void Start()
	{
	}

	[Token(Token = "0x6000F4A")]
	[Address(RVA = "0x977970", Offset = "0x977970", VA = "0x977970")]
	public void Reset()
	{
	}

	[Token(Token = "0x6000F4B")]
	[Address(RVA = "0x97CDD0", Offset = "0x97CDD0", VA = "0x97CDD0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000F4C")]
	[Address(RVA = "0x9782E8", Offset = "0x9782E8", VA = "0x9782E8")]
	public void UpdateCrackState(float timeLeftToTimeOut)
	{
	}

	[Token(Token = "0x6000F4D")]
	[Address(RVA = "0x978A74", Offset = "0x978A74", VA = "0x978A74")]
	public void StartDelivery(Vector3 handInPosition)
	{
	}

	[Token(Token = "0x6000F4E")]
	[Address(RVA = "0x97D398", Offset = "0x97D398", VA = "0x97D398")]
	private void TryGettingCustomer()
	{
	}

	[Token(Token = "0x6000F4F")]
	[Address(RVA = "0x978094", Offset = "0x978094", VA = "0x978094")]
	public void TickDeliveryAnimation()
	{
	}

	[Token(Token = "0x6000F50")]
	[Address(RVA = "0x9779C0", Offset = "0x9779C0", VA = "0x9779C0")]
	public void FixedTickDeliveryAnimation()
	{
	}

	[Token(Token = "0x6000F51")]
	[Address(RVA = "0x978BD4", Offset = "0x978BD4", VA = "0x978BD4")]
	public void StartPlateTimeOut()
	{
	}

	[Token(Token = "0x6000F52")]
	[Address(RVA = "0x97828C", Offset = "0x97828C", VA = "0x97828C")]
	public void TickTimeOutAnimation()
	{
	}

	[Token(Token = "0x6000F53")]
	[Address(RVA = "0x97CEDC", Offset = "0x97CEDC", VA = "0x97CEDC")]
	private void TryRemoveOrder()
	{
	}

	[Token(Token = "0x6000F54")]
	[Address(RVA = "0x97CF2C", Offset = "0x97CF2C", VA = "0x97CF2C")]
	private bool CheckIfCustomerIsAvailable()
	{
		return default(bool);
	}

	[Token(Token = "0x6000F55")]
	[Address(RVA = "0x97D5C4", Offset = "0x97D5C4", VA = "0x97D5C4")]
	public PlateAnimation()
	{
	}
}
[Token(Token = "0x200024B")]
public class PlateCollision : NetworkedBehaviour
{
	[Token(Token = "0x4000FDC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float speedThresholdPlayer;

	[Token(Token = "0x4000FDD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float speedThresholdStandard;

	[Token(Token = "0x4000FDE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float speedThresholdEnvironment;

	[Token(Token = "0x4000FDF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Grabbable grabbable;

	[Token(Token = "0x4000FE0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Plate plate;

	[Token(Token = "0x4000FE1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Rigidbody rigidBody;

	[Token(Token = "0x4000FE2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Collider[] collidersHit;

	[Token(Token = "0x4000FE3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<Collider> plateColliders;

	[Token(Token = "0x4000FE4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private FollowPlateSlot followPlateSlot;

	[Token(Token = "0x4000FE5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private LayerMask plateOnBeltMask;

	[Token(Token = "0x4000FE6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private LayerMask plateOffBeltMask;

	[Token(Token = "0x4000FE7")]
	public const string handInColliderName = "HandInCollider";

	[Token(Token = "0x4000FE8")]
	public const string conveyorBeltTriggerName = "ConveyorBeltTrigger";

	[Token(Token = "0x4000FE9")]
	private const float isCloseRadius = 0.03f;

	[Token(Token = "0x4000FEA")]
	private const string throwInColliderName = "ThrowInCollider";

	[Token(Token = "0x4000FEB")]
	private const string environmentTag = "Environment";

	[Token(Token = "0x4000FEC")]
	private const string floorTag = "Floor";

	[Token(Token = "0x6000F58")]
	[Address(RVA = "0x97D8CC", Offset = "0x97D8CC", VA = "0x97D8CC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000F59")]
	[Address(RVA = "0x97DA68", Offset = "0x97DA68", VA = "0x97DA68")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000F5A")]
	[Address(RVA = "0x97DCAC", Offset = "0x97DCAC", VA = "0x97DCAC")]
	private void OnCollisionEnter(Collision other)
	{
	}

	[Token(Token = "0x6000F5B")]
	[Address(RVA = "0x97ACD8", Offset = "0x97ACD8", VA = "0x97ACD8")]
	public bool IsCloseToCollider(string colliderName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000F5C")]
	[Address(RVA = "0x97DF30", Offset = "0x97DF30", VA = "0x97DF30")]
	public void AddPlateCollider(Collider collider)
	{
	}

	[Token(Token = "0x6000F5D")]
	[Address(RVA = "0x97E030", Offset = "0x97E030", VA = "0x97E030")]
	public void RemovePlateCollider(Collider collider)
	{
	}

	[Token(Token = "0x6000F5E")]
	[Address(RVA = "0x975DDC", Offset = "0x975DDC", VA = "0x975DDC")]
	public void PlateReturnedToBelt()
	{
	}

	[Token(Token = "0x6000F5F")]
	[Address(RVA = "0x976570", Offset = "0x976570", VA = "0x976570")]
	public void PlateLeftBelt()
	{
	}

	[Token(Token = "0x6000F60")]
	[Address(RVA = "0x97E0C0", Offset = "0x97E0C0", VA = "0x97E0C0")]
	public PlateCollision()
	{
	}
}
[Token(Token = "0x200024C")]
public class PlateCompleteEffect : SingleInstanceBehavior<PlateCompleteEffect>
{
	[Token(Token = "0x4000FED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TextMeshPro coinTipText;

	[Token(Token = "0x4000FEE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMeshPro creativeFeedbackText;

	[Token(Token = "0x4000FEF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject coinTipParent;

	[Token(Token = "0x4000FF0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject creativeFeedbackParent;

	[Token(Token = "0x4000FF1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float startHeightOffset;

	[Token(Token = "0x4000FF2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float liveTime;

	[Token(Token = "0x4000FF3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float longLiveTime;

	[Token(Token = "0x4000FF4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform visualParent;

	[Token(Token = "0x4000FF5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject visualGameObject;

	[Token(Token = "0x4000FF6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3 targetScale;

	[Token(Token = "0x4000FF7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float targetLocalHeight;

	[Token(Token = "0x4000FF8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private GameObject visualParentGO;

	[Token(Token = "0x4000FF9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private ParticleSystem plateCompletePoof;

	[Token(Token = "0x4000FFA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Locale locale;

	[Token(Token = "0x4000FFB")]
	private const string localizationNew = "creative_recipe_new";

	[Token(Token = "0x6000F61")]
	[Address(RVA = "0x97E17C", Offset = "0x97E17C", VA = "0x97E17C", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000F62")]
	[Address(RVA = "0x97E25C", Offset = "0x97E25C", VA = "0x97E25C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000F63")]
	[Address(RVA = "0x97E2A8", Offset = "0x97E2A8", VA = "0x97E2A8")]
	public void Show(PlateScoring.Grade grade, CustomerType customerType)
	{
	}

	[Token(Token = "0x6000F64")]
	[Address(RVA = "0x97E53C", Offset = "0x97E53C", VA = "0x97E53C")]
	public void Show(CreativeRecipeData recipe, bool isNewRecipe, CreativeModeFeedback feedback)
	{
	}

	[Token(Token = "0x6000F65")]
	[Address(RVA = "0x97E3D4", Offset = "0x97E3D4", VA = "0x97E3D4")]
	private void AnimateVisual(CustomerType customerType)
	{
	}

	[Token(Token = "0x6000F66")]
	[Address(RVA = "0x97E608", Offset = "0x97E608", VA = "0x97E608")]
	private void AnimateVisualCreativeMode(CreativeRecipeData recipe, bool isNewRecipe, CreativeModeFeedback feedback)
	{
	}

	[Token(Token = "0x6000F67")]
	[Address(RVA = "0x97E8A8", Offset = "0x97E8A8", VA = "0x97E8A8")]
	private void AnimateVisual(float timeToLive)
	{
	}

	[Token(Token = "0x6000F68")]
	[Address(RVA = "0x97EA9C", Offset = "0x97EA9C", VA = "0x97EA9C")]
	public PlateCompleteEffect()
	{
	}
}
[Token(Token = "0x200024D")]
public class PlateDirt : NetworkedBehaviour, IPunObservable
{
	[Token(Token = "0x4000FFD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Renderer plateRenderer;

	[Token(Token = "0x4000FFE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform wetPlateParticlesAnchor;

	[Token(Token = "0x4000FFF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Transform cleanedParticlesAnchor;

	[Token(Token = "0x4001000")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float dryTime;

	[Token(Token = "0x4001001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private AnimationCurve dirtCurve;

	[Token(Token = "0x4001002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private MaterialPropertyBlock propertyBlock;

	[Token(Token = "0x4001003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Plate plate;

	[Token(Token = "0x4001004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float dirtFraction;

	[Token(Token = "0x4001005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float bubbleProgress;

	[Token(Token = "0x4001006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float bubbleThreshold;

	[Token(Token = "0x4001007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float dryTimer;

	[Token(Token = "0x4001008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool wetParticlesPlaying;

	[Token(Token = "0x4001009")]
	private const string propertyDirtFraction = "_DirtFraction";

	[Token(Token = "0x400100A")]
	private const string tagDishWater = "DishWater";

	[Token(Token = "0x170001F2")]
	public float DirtFraction
	{
		[Token(Token = "0x6000F6A")]
		[Address(RVA = "0x97EB3C", Offset = "0x97EB3C", VA = "0x97EB3C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000F6B")]
		[Address(RVA = "0x97EB44", Offset = "0x97EB44", VA = "0x97EB44")]
		private set
		{
		}
	}

	[Token(Token = "0x170001F3")]
	public bool IsWet
	{
		[Token(Token = "0x6000F6C")]
		[Address(RVA = "0x97EC18", Offset = "0x97EC18", VA = "0x97EC18")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000F6D")]
		[Address(RVA = "0x97EC20", Offset = "0x97EC20", VA = "0x97EC20")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001F4")]
	public bool IsClean
	{
		[Token(Token = "0x6000F6E")]
		[Address(RVA = "0x976BC0", Offset = "0x976BC0", VA = "0x976BC0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000F6F")]
	[Address(RVA = "0x97EC2C", Offset = "0x97EC2C", VA = "0x97EC2C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000F70")]
	[Address(RVA = "0x97ECB8", Offset = "0x97ECB8", VA = "0x97ECB8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000F71")]
	[Address(RVA = "0x97ED68", Offset = "0x97ED68", VA = "0x97ED68")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000F72")]
	[Address(RVA = "0x97EFFC", Offset = "0x97EFFC", VA = "0x97EFFC")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000F73")]
	[Address(RVA = "0x97F0A8", Offset = "0x97F0A8", VA = "0x97F0A8")]
	public void Wash(float fractionWashedOff, bool botWashed = false)
	{
	}

	[Token(Token = "0x6000F74")]
	[Address(RVA = "0x97F340", Offset = "0x97F340", VA = "0x97F340")]
	[PunRPC]
	public void PlayWashBubblesRPC(bool plateCleaned)
	{
	}

	[Token(Token = "0x6000F75")]
	[Address(RVA = "0x977474", Offset = "0x977474", VA = "0x977474")]
	public void ResetDirtFraction(float fraction)
	{
	}

	[Token(Token = "0x6000F76")]
	[Address(RVA = "0x978C48", Offset = "0x978C48", VA = "0x978C48")]
	public void OnPlateShatter()
	{
	}

	[Token(Token = "0x6000F77")]
	[Address(RVA = "0x97ED08", Offset = "0x97ED08", VA = "0x97ED08")]
	private void StopWetParticles()
	{
	}

	[Token(Token = "0x6000F78")]
	[Address(RVA = "0x97A990", Offset = "0x97A990", VA = "0x97A990")]
	public void OnPlatePerfectized()
	{
	}

	[Token(Token = "0x6000F79")]
	[Address(RVA = "0x97F514", Offset = "0x97F514", VA = "0x97F514", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000F7A")]
	[Address(RVA = "0x97F6A0", Offset = "0x97F6A0", VA = "0x97F6A0")]
	public PlateDirt()
	{
	}
}
[Token(Token = "0x200024E")]
public static class PlateScoring
{
	[Token(Token = "0x200024F")]
	public enum AddIngredientFeedback
	{
		[Token(Token = "0x400101D")]
		Perfect,
		[Token(Token = "0x400101E")]
		WrongIngredient,
		[Token(Token = "0x400101F")]
		ShouldBeMoreGrilled,
		[Token(Token = "0x4001020")]
		ShouldNotBeGrilled,
		[Token(Token = "0x4001021")]
		ShouldNotBeBurnt,
		[Token(Token = "0x4001022")]
		WrongOrder,
		[Token(Token = "0x4001023")]
		SloppilyStacked,
		[Token(Token = "0x4001024")]
		AlreadyFull,
		[Token(Token = "0x4001025")]
		CreativeModePlacement
	}

	[Token(Token = "0x2000250")]
	public enum Grade
	{
		[Token(Token = "0x4001027")]
		Perfect,
		[Token(Token = "0x4001028")]
		NotPerfect
	}

	[Token(Token = "0x400100B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string positivePrefix;

	[Token(Token = "0x400100C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static int positiveVariationCount;

	[Token(Token = "0x400100D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static string notFriedPrefix;

	[Token(Token = "0x400100E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static int notFriedVariationCount;

	[Token(Token = "0x400100F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static string serveColdPrefix;

	[Token(Token = "0x4001010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static int serveColdVariationCount;

	[Token(Token = "0x4001011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static string burntPrefix;

	[Token(Token = "0x4001012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static int burntVariationCount;

	[Token(Token = "0x4001013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static string wrongStackingOrderPrefix;

	[Token(Token = "0x4001014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static int wrongStackingOrderVariationCount;

	[Token(Token = "0x4001015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static string notCenteredPrefix;

	[Token(Token = "0x4001016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static int notCenteredVariationCount;

	[Token(Token = "0x4001017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static string wrongIngredientPrefix;

	[Token(Token = "0x4001018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private static int wrongIngredientVariationCount;

	[Token(Token = "0x4001019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static string alreadyFullPrefix;

	[Token(Token = "0x400101A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private static int alreadyFullVariationCount;

	[Token(Token = "0x400101B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public static float ingredientCenteredOnPlateLimit;

	[Token(Token = "0x6000F7B")]
	[Address(RVA = "0x979934", Offset = "0x979934", VA = "0x979934")]
	public static AddIngredientFeedback CanAddIngredient(Plate plate, IList<StackedIngredientData> stackedIngredients, IngredientType ingredient, float fryValue, float localPosX, float localPosZ, bool isTofu)
	{
		return default(AddIngredientFeedback);
	}

	[Token(Token = "0x6000F7C")]
	[Address(RVA = "0x97A9CC", Offset = "0x97A9CC", VA = "0x97A9CC")]
	public static AddIngredientFeedback IsCorrectlyGrilled(float desiredFryAmount, float currentFryAmount, bool isTofu)
	{
		return default(AddIngredientFeedback);
	}

	[Token(Token = "0x6000F7D")]
	[Address(RVA = "0x979D64", Offset = "0x979D64", VA = "0x979D64")]
	public static bool IsNeatlyStackedAt(IngredientType type, IList<StackedIngredientData> addedIngredients, float posXRelativePlate, float posZRelativePlate)
	{
		return default(bool);
	}

	[Token(Token = "0x6000F7E")]
	[Address(RVA = "0x97B2C8", Offset = "0x97B2C8", VA = "0x97B2C8")]
	public static Grade GetPlateFinalGrade(RecipeIngredient[] recipeIngredients, IList<StackedIngredientData> addedIngredients, bool isClean, bool creativeModePlate)
	{
		return default(Grade);
	}

	[Token(Token = "0x6000F7F")]
	[Address(RVA = "0x97F6C4", Offset = "0x97F6C4", VA = "0x97F6C4")]
	public static Grade GetPlateCurrentGrade(RecipeIngredient[] recipeIngredients, IList<StackedIngredientData> addedIngredients, bool isClean, bool creativeModePlate)
	{
		return default(Grade);
	}

	[Token(Token = "0x6000F80")]
	[Address(RVA = "0x97F90C", Offset = "0x97F90C", VA = "0x97F90C")]
	public static string GetRandomizedFeedbackStringID(AddIngredientFeedback addIngredientFeedback)
	{
		return null;
	}
}
[Token(Token = "0x2000252")]
public class PlateServeBanner : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x400102A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject readyToServe;

	[Token(Token = "0x400102B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject failed;

	[Token(Token = "0x400102C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform poofAnchor;

	[Token(Token = "0x400102D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float offsetFromTallSandwiches;

	[Token(Token = "0x400102E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 defaultPosition;

	[Token(Token = "0x6000F85")]
	[Address(RVA = "0x97FD88", Offset = "0x97FD88", VA = "0x97FD88")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000F86")]
	[Address(RVA = "0x97FDB8", Offset = "0x97FDB8", VA = "0x97FDB8")]
	public void Show(bool passedRequirements, int numberOfIngredients, float sandwichHeight)
	{
	}

	[Token(Token = "0x6000F87")]
	[Address(RVA = "0x97FF6C", Offset = "0x97FF6C", VA = "0x97FF6C")]
	public bool IsShowing()
	{
		return default(bool);
	}

	[Token(Token = "0x6000F88")]
	[Address(RVA = "0x97FFAC", Offset = "0x97FFAC", VA = "0x97FFAC")]
	public void Hide()
	{
	}

	[Token(Token = "0x6000F89")]
	[Address(RVA = "0x97FFE4", Offset = "0x97FFE4", VA = "0x97FFE4")]
	public PlateServeBanner()
	{
	}
}
[Token(Token = "0x2000253")]
public class PlateSpice : NetworkedBehaviour, IPunObservable
{
	[Token(Token = "0x400102F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float spiceCountdownThresholdIncrease;

	[Token(Token = "0x4001030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private int spiceStartingCountdown;

	[Token(Token = "0x4001031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float cooldown;

	[Token(Token = "0x4001032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int spiceCountdown;

	[Token(Token = "0x4001033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float cooldownTimer;

	[Token(Token = "0x4001034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float spiceCountdownThreshold;

	[Token(Token = "0x4001035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float spiceCountdownThresholdStart;

	[Token(Token = "0x4001036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float spiciness;

	[Token(Token = "0x4001037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Plate plate;

	[Token(Token = "0x4001038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private PlateVisuals plateVisuals;

	[Token(Token = "0x6000F8A")]
	[Address(RVA = "0x97FFF8", Offset = "0x97FFF8", VA = "0x97FFF8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000F8B")]
	[Address(RVA = "0x980084", Offset = "0x980084", VA = "0x980084")]
	private void Update()
	{
	}

	[Token(Token = "0x6000F8C")]
	[Address(RVA = "0x9800B8", Offset = "0x9800B8", VA = "0x9800B8")]
	private void UpdateSpiceProgress()
	{
	}

	[Token(Token = "0x6000F8D")]
	[Address(RVA = "0x9802C0", Offset = "0x9802C0", VA = "0x9802C0")]
	public void IncreaseSpiceParticles(float rate)
	{
	}

	[Token(Token = "0x6000F8E")]
	[Address(RVA = "0x9803D4", Offset = "0x9803D4", VA = "0x9803D4")]
	[PunRPC]
	public void IncreaseSpiceParticlesRPC(float rate)
	{
	}

	[Token(Token = "0x6000F8F")]
	[Address(RVA = "0x977480", Offset = "0x977480", VA = "0x977480")]
	public void ResetPlateSpice()
	{
	}

	[Token(Token = "0x6000F90")]
	[Address(RVA = "0x980434", Offset = "0x980434", VA = "0x980434", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6000F91")]
	[Address(RVA = "0x980500", Offset = "0x980500", VA = "0x980500")]
	public PlateSpice()
	{
	}
}
[Token(Token = "0x2000254")]
public class PlateToothpick : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4001039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject toothpickPrefab;

	[Token(Token = "0x400103A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject ghostVisualStraight;

	[Token(Token = "0x400103B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject ghostVisualCrooked;

	[Token(Token = "0x400103C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Plate plate;

	[Token(Token = "0x400103D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private PlateDirt plateDirt;

	[Token(Token = "0x400103E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject ghostVisuals;

	[Token(Token = "0x400103F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GameObject visualsParent;

	[Token(Token = "0x4001040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GameObject toothpick;

	[Token(Token = "0x4001041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float yOrigin;

	[Token(Token = "0x4001042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float ghostVisualYOrigin;

	[Token(Token = "0x6000F92")]
	[Address(RVA = "0x980520", Offset = "0x980520", VA = "0x980520")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000F93")]
	[Address(RVA = "0x98060C", Offset = "0x98060C", VA = "0x98060C")]
	public void OnNewIngredientAdded(int nStackedIngredients, StackedIngredientData newIngredient, float totalPadding)
	{
	}

	[Token(Token = "0x6000F94")]
	[Address(RVA = "0x9807A8", Offset = "0x9807A8", VA = "0x9807A8")]
	public void MaterializeAndAnimate(float topIngredientYPos, float topIngredientPadding)
	{
	}

	[Token(Token = "0x6000F95")]
	[Address(RVA = "0x980AE8", Offset = "0x980AE8", VA = "0x980AE8")]
	public void HideGhostToothpick()
	{
	}

	[Token(Token = "0x6000F96")]
	[Address(RVA = "0x980B08", Offset = "0x980B08", VA = "0x980B08")]
	public void ResetToothpick(List<StackedIngredientData> addedIngredients, int recipeSize)
	{
	}

	[Token(Token = "0x6000F97")]
	[Address(RVA = "0x980DFC", Offset = "0x980DFC", VA = "0x980DFC")]
	public PlateToothpick()
	{
	}
}
[Token(Token = "0x2000256")]
public class PlateVisuals : NetworkedBehaviour
{
	[Token(Token = "0x2000257")]
	public enum TextColor
	{
		[Token(Token = "0x4001072")]
		White,
		[Token(Token = "0x4001073")]
		Red,
		[Token(Token = "0x4001074")]
		Yellow,
		[Token(Token = "0x4001075")]
		Green
	}

	[Token(Token = "0x2000258")]
	[CompilerGenerated]
	private sealed class <ShowServeFeedbackWhenReady>d__56 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool isPerfect;

		[Token(Token = "0x4001079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PlateVisuals <>4__this;

		[Token(Token = "0x400107A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float platePaddingTop;

		[Token(Token = "0x400107B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Plate plate;

		[Token(Token = "0x400107C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool passedRequirements;

		[Token(Token = "0x170001F5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000FBF")]
			[Address(RVA = "0x984198", Offset = "0x984198", VA = "0x984198", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000FC1")]
			[Address(RVA = "0x9841E0", Offset = "0x9841E0", VA = "0x9841E0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000FBC")]
		[Address(RVA = "0x982CFC", Offset = "0x982CFC", VA = "0x982CFC")]
		[DebuggerHidden]
		public <ShowServeFeedbackWhenReady>d__56(int <>1__state)
		{
		}

		[Token(Token = "0x6000FBD")]
		[Address(RVA = "0x983FF0", Offset = "0x983FF0", VA = "0x983FF0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000FBE")]
		[Address(RVA = "0x983FF4", Offset = "0x983FF4", VA = "0x983FF4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000FC0")]
		[Address(RVA = "0x9841A0", Offset = "0x9841A0", VA = "0x9841A0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Renderer plateRenderer;

	[Token(Token = "0x4001046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Material TofuMaterial;

	[Token(Token = "0x4001047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform ingredientVisualRoot;

	[Token(Token = "0x4001048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Transform ingredientAddedParticleAnchor;

	[Token(Token = "0x4001049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float timeLeftWhenTimeWarning;

	[Token(Token = "0x400104A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Color[] textColors;

	[Token(Token = "0x400104B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private ParticleSystem completeGlowEffect;

	[Token(Token = "0x400104C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private ParticleSystem PlateShatter;

	[Token(Token = "0x400104D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private float maxDistanceFromStack;

	[Token(Token = "0x400104E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	private float maxDistanceFromStackCreativeMode;

	[Token(Token = "0x400104F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Plate plate;

	[Token(Token = "0x4001050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private GameObject feedbackParent;

	[Token(Token = "0x4001051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private FeedbackPopup blimpFeedbackPopup;

	[Token(Token = "0x4001052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Vector3 feedbackParentOrigin;

	[Token(Token = "0x4001053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private PlateServeBanner serveBanner;

	[Token(Token = "0x4001054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private PlateCondiment plateCondiment;

	[Token(Token = "0x4001055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private GameObject visuals;

	[Token(Token = "0x4001056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private GameObject plateNumberHolder;

	[Token(Token = "0x4001057")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Renderer plateNumberHolderRenderer;

	[Token(Token = "0x4001058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private List<GameObject> ingredientVisualsList;

	[Token(Token = "0x4001059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private List<Renderer> ingredientVisualsRendererList;

	[Token(Token = "0x400105A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private List<Collider> ingredientVisualsColliderList;

	[Token(Token = "0x400105B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private PlateToothpick toothpick;

	[Token(Token = "0x400105C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private IEnumerator serveCoroutine;

	[Token(Token = "0x400105D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private MaterialPropertyBlock propertyBlock;

	[Token(Token = "0x400105E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private WaitForEndOfFrame waitForEndOfFrame;

	[Token(Token = "0x400105F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private GameObject timeWarning;

	[Token(Token = "0x4001060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private GameObject stolenIngredientWarning;

	[Token(Token = "0x4001061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private ParticleSystem isPerfectParticles;

	[Token(Token = "0x4001062")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private GameObject isPerfectParticlesGO;

	[Token(Token = "0x4001063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private PlateDirt plateDirt;

	[Token(Token = "0x4001064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private EnvironmentLoader environmentLoader;

	[Token(Token = "0x4001065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private List<ParticleSystemRenderer> plateShardRenderers;

	[Token(Token = "0x4001066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private int plateTextureArrayIndex;

	[Token(Token = "0x4001067")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private PlateCollision plateCollision;

	[Token(Token = "0x4001068")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private Locale locale;

	[Token(Token = "0x4001069")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private PlateCompleteEffect plateCompleteEffect;

	[Token(Token = "0x400106A")]
	private const float plateBasePadding = 0.005f;

	[Token(Token = "0x400106B")]
	private const float regularPutOnPlateSpeedThreshold = 0.4f;

	[Token(Token = "0x400106C")]
	private const float hardPutOnPlateSpeedThreshold = 1.3f;

	[Token(Token = "0x400106D")]
	private const string plateIngredientTag = "PlateIngredient";

	[Token(Token = "0x400106E")]
	private const string propertyTextureIndex = "_TextureIndex";

	[Token(Token = "0x400106F")]
	private const string propertyCrackState = "_CrackState";

	[Token(Token = "0x4001070")]
	private const string localizationShatteredPlateFeedback = "plate_shattered_on_serve";

	[Token(Token = "0x6000F9A")]
	[Address(RVA = "0x980E98", Offset = "0x980E98", VA = "0x980E98")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000F9B")]
	[Address(RVA = "0x981214", Offset = "0x981214", VA = "0x981214")]
	private void Start()
	{
	}

	[Token(Token = "0x6000F9C")]
	[Address(RVA = "0x981590", Offset = "0x981590", VA = "0x981590")]
	private void Update()
	{
	}

	[Token(Token = "0x6000F9D")]
	[Address(RVA = "0x9815FC", Offset = "0x9815FC", VA = "0x9815FC")]
	public void PlateSpawned(CustomerType customerType, int plateTextureArrayIndex, int customerSlot, Vector3 spawnPosition)
	{
	}

	[Token(Token = "0x6000F9E")]
	[Address(RVA = "0x981850", Offset = "0x981850", VA = "0x981850")]
	public void ShowStackingFeedback(PlateScoring.AddIngredientFeedback ingredientFeedback, IngredientType ingredient, bool showFeedbackToAll)
	{
	}

	[Token(Token = "0x6000F9F")]
	[Address(RVA = "0x981A04", Offset = "0x981A04", VA = "0x981A04")]
	public void ShowTextFeedback(string stringID, TextColor textColor = TextColor.White)
	{
	}

	[Token(Token = "0x6000FA0")]
	[Address(RVA = "0x981B08", Offset = "0x981B08", VA = "0x981B08")]
	[PunRPC]
	private void ShowTextFeedbackToAllRPC(string stringID, int textColorID)
	{
	}

	[Token(Token = "0x6000FA1")]
	[Address(RVA = "0x981B0C", Offset = "0x981B0C", VA = "0x981B0C")]
	public void AddToStack(StackedIngredientData stackedData, List<StackedIngredientData> addedIngredients, int recipeLength)
	{
	}

	[Token(Token = "0x6000FA2")]
	[Address(RVA = "0x982918", Offset = "0x982918", VA = "0x982918")]
	[PunRPC]
	private void ShowAddIngredientFeedbackRPC(bool canAdd, bool playBigEffect, float force, int dropSoundInt)
	{
	}

	[Token(Token = "0x6000FA3")]
	[Address(RVA = "0x982770", Offset = "0x982770", VA = "0x982770")]
	private void AdjustFeedbackPosition(float totalPadding)
	{
	}

	[Token(Token = "0x6000FA4")]
	[Address(RVA = "0x982B9C", Offset = "0x982B9C", VA = "0x982B9C")]
	public void ShowServeFeedback(Plate plate, bool passedRequirements, bool isPerfect, float platePaddingTop)
	{
	}

	[Token(Token = "0x6000FA5")]
	[Address(RVA = "0x982C54", Offset = "0x982C54", VA = "0x982C54")]
	[IteratorStateMachine(typeof(<ShowServeFeedbackWhenReady>d__56))]
	private IEnumerator ShowServeFeedbackWhenReady(Plate plate, bool passedRequirements, bool isPerfect, float platePaddingTop)
	{
		return null;
	}

	[Token(Token = "0x6000FA6")]
	[Address(RVA = "0x982D24", Offset = "0x982D24", VA = "0x982D24")]
	public void HideServeFeedback()
	{
	}

	[Token(Token = "0x6000FA7")]
	[Address(RVA = "0x982D7C", Offset = "0x982D7C", VA = "0x982D7C")]
	public void HideServeFeedbackAndResetToothpick(List<StackedIngredientData> addedIngredients)
	{
	}

	[Token(Token = "0x6000FA8")]
	[Address(RVA = "0x982DCC", Offset = "0x982DCC", VA = "0x982DCC")]
	public void HandInPlate(PlateScoring.Grade recipeGrade)
	{
	}

	[Token(Token = "0x6000FA9")]
	[Address(RVA = "0x982EB0", Offset = "0x982EB0", VA = "0x982EB0")]
	public void HandInPlate(CreativeRecipeData recipe, bool isNewRecipe, CreativeModeFeedback feedback)
	{
	}

	[Token(Token = "0x6000FAA")]
	[Address(RVA = "0x982E00", Offset = "0x982E00", VA = "0x982E00")]
	private void HandInPlate()
	{
	}

	[Token(Token = "0x6000FAB")]
	[Address(RVA = "0x982EDC", Offset = "0x982EDC", VA = "0x982EDC")]
	public void HideNumberHolder()
	{
	}

	[Token(Token = "0x6000FAC")]
	[Address(RVA = "0x982EFC", Offset = "0x982EFC", VA = "0x982EFC")]
	public void SetCrackState(int crackState)
	{
	}

	[Token(Token = "0x6000FAD")]
	[Address(RVA = "0x982FA0", Offset = "0x982FA0", VA = "0x982FA0")]
	public void ShatterPlate(CustomerData.RequirementFeedback passesRequirements)
	{
	}

	[Token(Token = "0x6000FAE")]
	[Address(RVA = "0x983288", Offset = "0x983288", VA = "0x983288")]
	public void RespawnBrokenPlate(Vector3 respawnPosition)
	{
	}

	[Token(Token = "0x6000FAF")]
	[Address(RVA = "0x983050", Offset = "0x983050", VA = "0x983050")]
	public void Show(bool shouldShow)
	{
	}

	[Token(Token = "0x6000FB0")]
	[Address(RVA = "0x98335C", Offset = "0x98335C", VA = "0x98335C")]
	internal void PlateTimedOut()
	{
	}

	[Token(Token = "0x6000FB1")]
	[Address(RVA = "0x9833EC", Offset = "0x9833EC", VA = "0x9833EC")]
	[PunRPC]
	private void SnapToConveyorBeltEffectRPC(Vector3 position)
	{
	}

	[Token(Token = "0x6000FB2")]
	[Address(RVA = "0x983140", Offset = "0x983140", VA = "0x983140")]
	private void PlayShatterParticles()
	{
	}

	[Token(Token = "0x6000FB3")]
	[Address(RVA = "0x9834C0", Offset = "0x9834C0", VA = "0x9834C0")]
	public void RemoveIngredientAt(int index, IngredientType removedIngredientType, List<StackedIngredientData> remainingIngredients)
	{
	}

	[Token(Token = "0x6000FB4")]
	[Address(RVA = "0x983894", Offset = "0x983894", VA = "0x983894")]
	public void ClearIngredients()
	{
	}

	[Token(Token = "0x6000FB5")]
	[Address(RVA = "0x983AC4", Offset = "0x983AC4", VA = "0x983AC4")]
	public void OnIngredientStolen()
	{
	}

	[Token(Token = "0x6000FB6")]
	[Address(RVA = "0x983C4C", Offset = "0x983C4C", VA = "0x983C4C")]
	public Vector3 GetTopIngredientLocalPos()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000FB7")]
	[Address(RVA = "0x983D0C", Offset = "0x983D0C", VA = "0x983D0C")]
	public Vector3 GetTopIngredientWorldPos()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000FB8")]
	[Address(RVA = "0x983D9C", Offset = "0x983D9C", VA = "0x983D9C")]
	public float GetSandwichVisualHeight()
	{
		return default(float);
	}

	[Token(Token = "0x6000FB9")]
	[Address(RVA = "0x9827E4", Offset = "0x9827E4", VA = "0x9827E4")]
	private void ResolveIsPerfectParticles()
	{
	}

	[Token(Token = "0x6000FBA")]
	[Address(RVA = "0x9817CC", Offset = "0x9817CC", VA = "0x9817CC")]
	private void UpdateRendererPlateTexture(Renderer myRenderer)
	{
	}

	[Token(Token = "0x6000FBB")]
	[Address(RVA = "0x983E64", Offset = "0x983E64", VA = "0x983E64")]
	public PlateVisuals()
	{
	}
}
[Serializable]
[Token(Token = "0x2000259")]
public struct StackedIngredientData
{
	[Token(Token = "0x400107D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public IngredientType type;

	[Token(Token = "0x400107E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public float fryValue;

	[Token(Token = "0x400107F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float yRotation;

	[Token(Token = "0x4001080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public float xLocalPos;

	[Token(Token = "0x4001081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float zLocalPos;

	[Token(Token = "0x4001082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool isTofu;

	[Token(Token = "0x6000FC2")]
	[Address(RVA = "0x9841E8", Offset = "0x9841E8", VA = "0x9841E8")]
	public bool Equals(StackedIngredientData other)
	{
		return default(bool);
	}

	[Token(Token = "0x6000FC3")]
	[Address(RVA = "0x984340", Offset = "0x984340", VA = "0x984340", Slot = "3")]
	public override string ToString()
	{
		return null;
	}
}
[Token(Token = "0x200025A")]
public class PlayerColorManager
{
	[Token(Token = "0x4001083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Color[] playerColors;

	[Token(Token = "0x6000FC4")]
	[Address(RVA = "0x984594", Offset = "0x984594", VA = "0x984594")]
	public static Color GetPlayerColor(int playerSlotIndex)
	{
		return default(Color);
	}

	[Token(Token = "0x6000FC5")]
	[Address(RVA = "0x984618", Offset = "0x984618", VA = "0x984618")]
	public static Color GetPlayerColorValue(PlayerColor color)
	{
		return default(Color);
	}

	[Token(Token = "0x6000FC6")]
	[Address(RVA = "0x98478C", Offset = "0x98478C", VA = "0x98478C")]
	public static PlayerColor GetLocalPlayerColor()
	{
		return default(PlayerColor);
	}

	[Token(Token = "0x6000FC7")]
	[Address(RVA = "0x984894", Offset = "0x984894", VA = "0x984894")]
	public static PlayerColor GetPlayerColorEnum(int playerSlotIndex)
	{
		return default(PlayerColor);
	}

	[Token(Token = "0x6000FC8")]
	[Address(RVA = "0x9848B0", Offset = "0x9848B0", VA = "0x9848B0")]
	public PlayerColorManager()
	{
	}
}
[Token(Token = "0x200025B")]
public class AudioPreferences : SingleInstanceBehavior<AudioPreferences>
{
	[Token(Token = "0x200025C")]
	public enum SoundGroup
	{
		[Token(Token = "0x400108C")]
		Sound,
		[Token(Token = "0x400108D")]
		Voice,
		[Token(Token = "0x400108E")]
		Music
	}

	[Token(Token = "0x4001084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AudioMixer audioMixer;

	[Token(Token = "0x4001085")]
	private const string soundVolumeKey = "SoundVolume";

	[Token(Token = "0x4001086")]
	private const string voiceVolumeKey = "VoiceVolume";

	[Token(Token = "0x4001087")]
	private const string musicVolumeKey = "MusicVolume";

	[Token(Token = "0x4001088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float soundVolumeLevel;

	[Token(Token = "0x4001089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float voiceVolumeLevel;

	[Token(Token = "0x400108A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float musicVolumeLevel;

	[Token(Token = "0x6000FCA")]
	[Address(RVA = "0x98497C", Offset = "0x98497C", VA = "0x98497C", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6000FCB")]
	[Address(RVA = "0x9849C4", Offset = "0x9849C4", VA = "0x9849C4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000FCC")]
	[Address(RVA = "0x984AAC", Offset = "0x984AAC", VA = "0x984AAC")]
	private void ReadPlayerPrefs(string groupKey, out float volume)
	{
	}

	[Token(Token = "0x6000FCD")]
	[Address(RVA = "0x984B40", Offset = "0x984B40", VA = "0x984B40")]
	public float GetGroupVolume(SoundGroup soundGroup)
	{
		return default(float);
	}

	[Token(Token = "0x6000FCE")]
	[Address(RVA = "0x984B74", Offset = "0x984B74", VA = "0x984B74")]
	public void IncrementGroupVolume(SoundGroup soundGroup, bool increase)
	{
	}

	[Token(Token = "0x6000FCF")]
	[Address(RVA = "0x984C30", Offset = "0x984C30", VA = "0x984C30")]
	private void IncrementVolumeAndSetMixer(string groupKey, ref float volume, bool increase)
	{
	}

	[Token(Token = "0x6000FD0")]
	[Address(RVA = "0x984AEC", Offset = "0x984AEC", VA = "0x984AEC")]
	private void SetAudioMixerFloat(string groupKey, float volume)
	{
	}

	[Token(Token = "0x6000FD1")]
	[Address(RVA = "0x984CA0", Offset = "0x984CA0", VA = "0x984CA0")]
	public AudioPreferences()
	{
	}
}
[Token(Token = "0x200025D")]
public class AvatarColliderManager : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x400108F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject mouthColliderPrefab;

	[Token(Token = "0x4001090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject bodyColliderPrefab;

	[Token(Token = "0x170001F7")]
	public Transform AttachmentRoot
	{
		[Token(Token = "0x6000FD2")]
		[Address(RVA = "0x984D0C", Offset = "0x984D0C", VA = "0x984D0C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0x984D14", Offset = "0x984D14", VA = "0x984D14")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6000FD4")]
	[Address(RVA = "0x984D1C", Offset = "0x984D1C", VA = "0x984D1C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000FD5")]
	[Address(RVA = "0x984EE8", Offset = "0x984EE8", VA = "0x984EE8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000FD6")]
	[Address(RVA = "0x984F74", Offset = "0x984F74", VA = "0x984F74")]
	public AvatarColliderManager()
	{
	}
}
[Token(Token = "0x200025E")]
public interface ICookoutInput
{
	[Token(Token = "0x6000FD7")]
	void Initialize(CookoutControllerSettings cookoutControllerSettings, CookoutInputData cookoutInputData);

	[Token(Token = "0x6000FD8")]
	void Tick();

	[Token(Token = "0x6000FD9")]
	bool ButtonIsDown(CookoutInput.Button button);

	[Token(Token = "0x6000FDA")]
	bool ButtonWasPressed(CookoutInput.Button button);

	[Token(Token = "0x6000FDB")]
	bool ButtonWasReleased(CookoutInput.Button button);

	[Token(Token = "0x6000FDC")]
	bool IndexFingerExtended(CookoutHandedness handedness);

	[Token(Token = "0x6000FDD")]
	bool ThumbExtended(CookoutHandedness handedness);

	[Token(Token = "0x6000FDE")]
	bool RecenterPressed();

	[Token(Token = "0x6000FDF")]
	bool WasMenuButtonPressed();

	[Token(Token = "0x6000FE0")]
	bool HeadsetIsMountedSteam();
}
[Token(Token = "0x200025F")]
public sealed class CookoutInput : Singleton<CookoutInput>, ICookoutInput
{
	[Token(Token = "0x2000260")]
	[Flags]
	public enum Button
	{
		[Token(Token = "0x400109B")]
		A = 2,
		[Token(Token = "0x400109C")]
		B = 4,
		[Token(Token = "0x400109D")]
		X = 8,
		[Token(Token = "0x400109E")]
		Y = 0x10,
		[Token(Token = "0x400109F")]
		LeftIndex = 0x20,
		[Token(Token = "0x40010A0")]
		LeftGrip = 0x40,
		[Token(Token = "0x40010A1")]
		RightIndex = 0x80,
		[Token(Token = "0x40010A2")]
		RightGrip = 0x100,
		[Token(Token = "0x40010A3")]
		Menu = 0x200,
		[Token(Token = "0x40010A4")]
		LeftIndexTouch = 0x400,
		[Token(Token = "0x40010A5")]
		RightIndexTouch = 0x800
	}

	[Token(Token = "0x4001092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Dictionary<Button, string> buttonNames;

	[Token(Token = "0x4001093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private CookoutControllerSettings cookoutControllerSettings;

	[Token(Token = "0x4001094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private CookoutInputData cookoutInputData;

	[Token(Token = "0x4001095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Button previousButtonState;

	[Token(Token = "0x4001096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Button currentButtonState;

	[Token(Token = "0x4001097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<InputDevice> leftInputDevices;

	[Token(Token = "0x4001098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<InputDevice> rightInputDevices;

	[Token(Token = "0x4001099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private InputFeatureUsage<bool>[] thumbTouchFeatures;

	[Token(Token = "0x6000FE1")]
	[Address(RVA = "0x984F7C", Offset = "0x984F7C", VA = "0x984F7C")]
	public CookoutInputData GetCookoutInputData()
	{
		return null;
	}

	[Token(Token = "0x6000FE2")]
	[Address(RVA = "0x984F84", Offset = "0x984F84", VA = "0x984F84")]
	public string GetCurrentButtonStateString()
	{
		return null;
	}

	[Token(Token = "0x6000FE3")]
	[Address(RVA = "0x9853F0", Offset = "0x9853F0", VA = "0x9853F0", Slot = "4")]
	public void Initialize(CookoutControllerSettings cookoutControllerSettings, CookoutInputData cookoutInputData)
	{
	}

	[Token(Token = "0x6000FE4")]
	[Address(RVA = "0x9853F8", Offset = "0x9853F8", VA = "0x9853F8", Slot = "5")]
	public void Tick()
	{
	}

	[Token(Token = "0x6000FE5")]
	[Address(RVA = "0x9853E0", Offset = "0x9853E0", VA = "0x9853E0", Slot = "6")]
	public bool ButtonIsDown(Button button)
	{
		return default(bool);
	}

	[Token(Token = "0x6000FE6")]
	[Address(RVA = "0x985C7C", Offset = "0x985C7C", VA = "0x985C7C", Slot = "7")]
	public bool ButtonWasPressed(Button button)
	{
		return default(bool);
	}

	[Token(Token = "0x6000FE7")]
	[Address(RVA = "0x985C90", Offset = "0x985C90", VA = "0x985C90", Slot = "8")]
	public bool ButtonWasReleased(Button button)
	{
		return default(bool);
	}

	[Token(Token = "0x6000FE8")]
	[Address(RVA = "0x985CA4", Offset = "0x985CA4", VA = "0x985CA4", Slot = "9")]
	public bool IndexFingerExtended(CookoutHandedness handedness)
	{
		return default(bool);
	}

	[Token(Token = "0x6000FE9")]
	[Address(RVA = "0x985ED4", Offset = "0x985ED4", VA = "0x985ED4", Slot = "10")]
	public bool ThumbExtended(CookoutHandedness handedness)
	{
		return default(bool);
	}

	[Token(Token = "0x6000FEA")]
	[Address(RVA = "0x9860C4", Offset = "0x9860C4", VA = "0x9860C4", Slot = "11")]
	public bool RecenterPressed()
	{
		return default(bool);
	}

	[Token(Token = "0x6000FEB")]
	[Address(RVA = "0x9860CC", Offset = "0x9860CC", VA = "0x9860CC", Slot = "12")]
	public bool WasMenuButtonPressed()
	{
		return default(bool);
	}

	[Token(Token = "0x6000FEC")]
	[Address(RVA = "0x9854B0", Offset = "0x9854B0", VA = "0x9854B0")]
	private void ReadCurrentButtonState()
	{
	}

	[Token(Token = "0x6000FED")]
	[Address(RVA = "0x985A10", Offset = "0x985A10", VA = "0x985A10")]
	private void HandUpdate(HandInput hand, CookoutHandedness handedness)
	{
	}

	[Token(Token = "0x6000FEE")]
	[Address(RVA = "0x9860DC", Offset = "0x9860DC", VA = "0x9860DC", Slot = "13")]
	public bool HeadsetIsMountedSteam()
	{
		return default(bool);
	}

	[Token(Token = "0x6000FEF")]
	[Address(RVA = "0x9860E4", Offset = "0x9860E4", VA = "0x9860E4")]
	public CookoutInput()
	{
	}
}
[Token(Token = "0x2000261")]
[DisallowMultipleComponent]
public class Grabbable : NetworkedBehaviour, IPunObservable
{
	[Token(Token = "0x2000262")]
	private enum GrabSound
	{
		[Token(Token = "0x40010D3")]
		Generic,
		[Token(Token = "0x40010D4")]
		Plate
	}

	[Token(Token = "0x2000263")]
	public enum GrabbableDropSound
	{
		[Token(Token = "0x40010D6")]
		Generic,
		[Token(Token = "0x40010D7")]
		Slice,
		[Token(Token = "0x40010D8")]
		Plate,
		[Token(Token = "0x40010D9")]
		Tools,
		[Token(Token = "0x40010DA")]
		Potion,
		[Token(Token = "0x40010DB")]
		Cleaver,
		[Token(Token = "0x40010DC")]
		Condiment,
		[Token(Token = "0x40010DD")]
		MoistSlice
	}

	[Token(Token = "0x2000264")]
	public delegate void OnGrabBeginHandler();

	[Token(Token = "0x2000265")]
	public delegate void OnRemoteGrabBeginHandler();

	[Token(Token = "0x40010AA")]
	private const float regularDropSpeedThreshold = 0.4f;

	[Token(Token = "0x40010AB")]
	private const float hardDropSpeedThreshold = 1.3f;

	[Token(Token = "0x40010AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
	public bool overrideTagCheck;

	[Token(Token = "0x40010AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x43")]
	public bool isNetworked;

	[Token(Token = "0x40010B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool snap;

	[Token(Token = "0x40010B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector3 snapPosition;

	[Token(Token = "0x40010B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public Vector3 snapRotation;

	[Token(Token = "0x40010B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Vector3 cookoutAvatarSnapPosition;

	[Token(Token = "0x40010B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public Vector3 cookoutAvatarSnapRotation;

	[Token(Token = "0x40010B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public bool regularMirrorMethod;

	[Token(Token = "0x40010B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public Vector3 alternateMirrorRotation;

	[Token(Token = "0x40010B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Vector3 alternateCookoutAvatarMirrorRotation;

	[Token(Token = "0x40010B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public CookoutCustomHandPose grabPose;

	[Token(Token = "0x40010B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
	public CookoutCustomHandPose cookoutAvatarGrabPose;

	[Token(Token = "0x40010BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private float throwSoundSpeedThreshold;

	[Token(Token = "0x40010BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[SerializeField]
	private float angularVelocityConstant;

	[Token(Token = "0x40010BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private bool hasRigidBodyView;

	[Token(Token = "0x40010BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	[SerializeField]
	private GrabSound grabSound;

	[Token(Token = "0x40010BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private GrabbableDropSound dropSound;

	[Token(Token = "0x40010BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	[SerializeField]
	private bool canOnlyBeGrabbedByOwner;

	[Token(Token = "0x40010C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private CookoutAvatarHand grabberRemote;

	[Token(Token = "0x40010C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private bool forceKinematicOnRelease;

	[Token(Token = "0x40010C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private Vector3 onGrabbedRemotePos;

	[Token(Token = "0x40010C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Quaternion onGrabbedRemoteRot;

	[Token(Token = "0x40010C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private IGrabbableTransformController[] transformSyncControllers;

	[Token(Token = "0x40010C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Vector3 onGrabbedLocalPos;

	[Token(Token = "0x40010C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	private Quaternion onGrabbedLocalRot;

	[Token(Token = "0x40010C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private Rigidbody rigidBody;

	[Token(Token = "0x40010CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private PhotonTransformView transformView;

	[Token(Token = "0x40010CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private PhotonRigidbodyView rigidView;

	[Token(Token = "0x40010CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private CookoutCustomHandPose oldGrabPose;

	[Token(Token = "0x40010CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private Vector3[] trackedMoves;

	[Token(Token = "0x40010CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private Vector3 previousPosition;

	[Token(Token = "0x40010CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
	private int numMovesTracked;

	[Token(Token = "0x40010D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private int currentTrackedMove;

	[Token(Token = "0x40010D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	private bool isDropped;

	[Token(Token = "0x170001F8")]
	public bool CanBeGrabbedByThisPlayer
	{
		[Token(Token = "0x6000FF8")]
		[Address(RVA = "0x986A50", Offset = "0x986A50", VA = "0x986A50")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001F9")]
	public bool IsGrabbed
	{
		[Token(Token = "0x6000FF9")]
		[Address(RVA = "0x986A98", Offset = "0x986A98", VA = "0x986A98")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001FA")]
	public bool IsLocallyOwned
	{
		[Token(Token = "0x6000FFA")]
		[Address(RVA = "0x986A64", Offset = "0x986A64", VA = "0x986A64")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001FB")]
	public bool IsLocallyGrabbed
	{
		[Token(Token = "0x6000FFB")]
		[Address(RVA = "0x986AC4", Offset = "0x986AC4", VA = "0x986AC4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170001FC")]
	public bool IsRemoteGrabbed
	{
		[Token(Token = "0x6000FFC")]
		[Address(RVA = "0x986B40", Offset = "0x986B40", VA = "0x986B40")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000FFD")]
		[Address(RVA = "0x986B48", Offset = "0x986B48", VA = "0x986B48")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001FD")]
	public bool IsBeingTransferedBetweenPlayers
	{
		[Token(Token = "0x6000FFE")]
		[Address(RVA = "0x986B54", Offset = "0x986B54", VA = "0x986B54")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000FFF")]
		[Address(RVA = "0x986B5C", Offset = "0x986B5C", VA = "0x986B5C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170001FE")]
	public GrabbableDropSound DropSound
	{
		[Token(Token = "0x6001000")]
		[Address(RVA = "0x986B68", Offset = "0x986B68", VA = "0x986B68")]
		get
		{
			return default(GrabbableDropSound);
		}
	}

	[Token(Token = "0x170001FF")]
	public bool PendingGrabRequest
	{
		[Token(Token = "0x6001001")]
		[Address(RVA = "0x986B70", Offset = "0x986B70", VA = "0x986B70")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001002")]
		[Address(RVA = "0x986B78", Offset = "0x986B78", VA = "0x986B78")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000200")]
	public CookoutAvatarHand grabberLocal
	{
		[Token(Token = "0x6001003")]
		[Address(RVA = "0x986B84", Offset = "0x986B84", VA = "0x986B84")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001004")]
		[Address(RVA = "0x986B8C", Offset = "0x986B8C", VA = "0x986B8C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1400001F")]
	public event OnGrabBeginHandler OnGrabBegin
	{
		[Token(Token = "0x6000FF0")]
		[Address(RVA = "0x986570", Offset = "0x986570", VA = "0x986570")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000FF1")]
		[Address(RVA = "0x98660C", Offset = "0x98660C", VA = "0x98660C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000020")]
	public event OnGrabBeginHandler OnGrabEnd
	{
		[Token(Token = "0x6000FF2")]
		[Address(RVA = "0x9866A8", Offset = "0x9866A8", VA = "0x9866A8")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000FF3")]
		[Address(RVA = "0x986744", Offset = "0x986744", VA = "0x986744")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000021")]
	public event OnRemoteGrabBeginHandler OnRemoteGrab
	{
		[Token(Token = "0x6000FF4")]
		[Address(RVA = "0x9867E0", Offset = "0x9867E0", VA = "0x9867E0")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000FF5")]
		[Address(RVA = "0x98687C", Offset = "0x98687C", VA = "0x98687C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000022")]
	public event OnRemoteGrabBeginHandler OnRemoteGrabEnd
	{
		[Token(Token = "0x6000FF6")]
		[Address(RVA = "0x986918", Offset = "0x986918", VA = "0x986918")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000FF7")]
		[Address(RVA = "0x9869B4", Offset = "0x9869B4", VA = "0x9869B4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6001005")]
	[Address(RVA = "0x986B94", Offset = "0x986B94", VA = "0x986B94")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001006")]
	[Address(RVA = "0x986CBC", Offset = "0x986CBC", VA = "0x986CBC")]
	private void Start()
	{
	}

	[Token(Token = "0x6001007")]
	[Address(RVA = "0x986E68", Offset = "0x986E68", VA = "0x986E68")]
	public void InitIngredient()
	{
	}

	[Token(Token = "0x6001008")]
	[Address(RVA = "0x986EC8", Offset = "0x986EC8", VA = "0x986EC8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001009")]
	[Address(RVA = "0x98720C", Offset = "0x98720C", VA = "0x98720C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600100A")]
	[Address(RVA = "0x98757C", Offset = "0x98757C", VA = "0x98757C")]
	private void UpdateGrabbedPosition(CookoutAvatarHand hand, Vector3 localPosition, Quaternion localRotation)
	{
	}

	[Token(Token = "0x600100B")]
	[Address(RVA = "0x9878BC", Offset = "0x9878BC", VA = "0x9878BC")]
	public void OnGrabbed(Transform handAnchor, CookoutAvatarHand hand, bool wasMine)
	{
	}

	[Token(Token = "0x600100C")]
	[Address(RVA = "0x987A90", Offset = "0x987A90", VA = "0x987A90")]
	private void SendGrabEvent()
	{
	}

	[Token(Token = "0x600100D")]
	[Address(RVA = "0x987B14", Offset = "0x987B14", VA = "0x987B14")]
	public void OnOwnerChanged(PhotonPlayer newOwner, PhotonPlayer oldOwner)
	{
	}

	[Token(Token = "0x600100E")]
	[Address(RVA = "0x987BF4", Offset = "0x987BF4", VA = "0x987BF4")]
	public void OnRelease(Vector3 force, Vector3 angularForce)
	{
	}

	[Token(Token = "0x600100F")]
	[Address(RVA = "0x987DF4", Offset = "0x987DF4", VA = "0x987DF4")]
	public void SetForceKinematicOnRelease(bool value)
	{
	}

	[Token(Token = "0x6001010")]
	[Address(RVA = "0x987E00", Offset = "0x987E00", VA = "0x987E00", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6001011")]
	[Address(RVA = "0x988214", Offset = "0x988214", VA = "0x988214")]
	private void RemoteGrab(CookoutAvatarHand grabber)
	{
	}

	[Token(Token = "0x6001012")]
	[Address(RVA = "0x987118", Offset = "0x987118", VA = "0x987118")]
	private void RemoteRelease()
	{
	}

	[Token(Token = "0x6001013")]
	[Address(RVA = "0x9882DC", Offset = "0x9882DC", VA = "0x9882DC")]
	public bool ShouldDisableNetworkSyncing()
	{
		return default(bool);
	}

	[Token(Token = "0x6001014")]
	[Address(RVA = "0x987AC4", Offset = "0x987AC4", VA = "0x987AC4")]
	private void GrabbableSound()
	{
	}

	[Token(Token = "0x6001015")]
	[Address(RVA = "0x988308", Offset = "0x988308", VA = "0x988308")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6001016")]
	[Address(RVA = "0x9884F0", Offset = "0x9884F0", VA = "0x9884F0")]
	public void OnPlayerHandDestroyed(CookoutAvatarHand avatarHand)
	{
	}

	[Token(Token = "0x6001017")]
	[Address(RVA = "0x98843C", Offset = "0x98843C", VA = "0x98843C")]
	public Vector3 GetMovementForce()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6001018")]
	[Address(RVA = "0x988568", Offset = "0x988568", VA = "0x988568")]
	[PunRPC]
	private void ForceTransferReleaseRPC(NetMsgAvatarHand msg)
	{
	}

	[Token(Token = "0x6001019")]
	[Address(RVA = "0x9887E8", Offset = "0x9887E8", VA = "0x9887E8")]
	[PunRPC]
	private void ForceTransferGrabRPC(NetMsgAvatarHand msg)
	{
	}

	[Token(Token = "0x600101A")]
	[Address(RVA = "0x988724", Offset = "0x988724", VA = "0x988724")]
	[PunRPC]
	private void GrabbableTransferFeedbackRPC(Vector3 pos, Quaternion rot)
	{
	}

	[Token(Token = "0x600101B")]
	[Address(RVA = "0x988930", Offset = "0x988930", VA = "0x988930")]
	public Grabbable()
	{
	}
}
[Serializable]
[Token(Token = "0x2000266")]
[CreateAssetMenu(fileName = "NewHapticClip", menuName = "Haptics/Haptic Clip")]
public class HapticClip : ScriptableObject
{
	[Token(Token = "0x40010DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vibration vibration;

	[Token(Token = "0x40010DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(0f, 10f)]
	public float length;

	[Token(Token = "0x40010E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Range(0f, 1f)]
	public float frequency;

	[Token(Token = "0x40010E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve amplitudeCurve;

	[Token(Token = "0x40010E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool loops;

	[Token(Token = "0x6001024")]
	[Address(RVA = "0x988B54", Offset = "0x988B54", VA = "0x988B54")]
	public HapticClip()
	{
	}
}
[Token(Token = "0x2000267")]
[CreateAssetMenu(fileName = "NewHapticClipList", menuName = "Haptics/Haptic Clip List")]
public class HapticClipList : ScriptableObject
{
	[Token(Token = "0x40010E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<HapticClip> hapticClipList;

	[Token(Token = "0x6001025")]
	[Address(RVA = "0x988B5C", Offset = "0x988B5C", VA = "0x988B5C")]
	public HapticClipList()
	{
	}
}
[Token(Token = "0x2000268")]
public enum Vibration
{
	[Token(Token = "0x40010E5")]
	MenuButton,
	[Token(Token = "0x40010E6")]
	BurntHand,
	[Token(Token = "0x40010E7")]
	PopBubble,
	[Token(Token = "0x40010E8")]
	Grab,
	[Token(Token = "0x40010E9")]
	Release,
	[Token(Token = "0x40010EA")]
	PanHitHeavy,
	[Token(Token = "0x40010EB")]
	PanHitLight,
	[Token(Token = "0x40010EC")]
	PanHitNudge,
	[Token(Token = "0x40010ED")]
	SpiceShaker,
	[Token(Token = "0x40010EE")]
	CondimentSqueeze,
	[Token(Token = "0x40010EF")]
	CleaverChop,
	[Token(Token = "0x40010F0")]
	CleaverSlice,
	[Token(Token = "0x40010F1")]
	WashingPlate,
	[Token(Token = "0x40010F2")]
	UncorkBottle,
	[Token(Token = "0x40010F3")]
	VoteReminder,
	[Token(Token = "0x40010F4")]
	BroFist
}
[Token(Token = "0x2000269")]
public interface IHapticMessages
{
	[Token(Token = "0x6001026")]
	void Init();

	[Token(Token = "0x6001027")]
	void Tick();

	[Token(Token = "0x6001028")]
	void PlayHaptic(CookoutAvatarHand hand, Vibration vibration);

	[Token(Token = "0x6001029")]
	void StopLoopingHaptics(CookoutHandedness handedness, Vibration vibration);

	[Token(Token = "0x600102A")]
	void StopAllHaptics();
}
[Token(Token = "0x200026A")]
public sealed class HapticMessages : SingleInstanceBehavior<HapticMessages>, IHapticMessages
{
	[Token(Token = "0x40010F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private HapticClipList hapticClipList;

	[Token(Token = "0x40010F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<Vibration, HapticClip> clipDictionary;

	[Token(Token = "0x40010F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private HapticClip playingClipLeft;

	[Token(Token = "0x40010F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private HapticClip playingClipRight;

	[Token(Token = "0x40010F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float clipLeftLifeTime;

	[Token(Token = "0x40010FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float clipRightLifeTime;

	[Token(Token = "0x40010FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float hapticStrength;

	[Token(Token = "0x40010FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<InputDevice> leftInputDevices;

	[Token(Token = "0x40010FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<InputDevice> rightInputDevices;

	[Token(Token = "0x600102B")]
	[Address(RVA = "0x988B64", Offset = "0x988B64", VA = "0x988B64", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x600102C")]
	[Address(RVA = "0x988C84", Offset = "0x988C84", VA = "0x988C84")]
	private void Update()
	{
	}

	[Token(Token = "0x600102D")]
	[Address(RVA = "0x988BB4", Offset = "0x988BB4", VA = "0x988BB4", Slot = "6")]
	public void Init()
	{
	}

	[Token(Token = "0x600102E")]
	[Address(RVA = "0x988C88", Offset = "0x988C88", VA = "0x988C88", Slot = "7")]
	public void Tick()
	{
	}

	[Token(Token = "0x600102F")]
	[Address(RVA = "0x988FF4", Offset = "0x988FF4", VA = "0x988FF4", Slot = "8")]
	public void PlayHaptic(CookoutAvatarHand hand, Vibration vibration)
	{
	}

	[Token(Token = "0x6001030")]
	[Address(RVA = "0x9890B0", Offset = "0x9890B0", VA = "0x9890B0", Slot = "9")]
	public void StopLoopingHaptics(CookoutHandedness handedness, Vibration vibration)
	{
	}

	[Token(Token = "0x6001031")]
	[Address(RVA = "0x989280", Offset = "0x989280", VA = "0x989280", Slot = "10")]
	public void StopAllHaptics()
	{
	}

	[Token(Token = "0x6001032")]
	[Address(RVA = "0x988DAC", Offset = "0x988DAC", VA = "0x988DAC")]
	private void UpdateControllerHaptics(ref HapticClip clip, ref float clipLifeTime, List<InputDevice> inputDevices)
	{
	}

	[Token(Token = "0x6001033")]
	[Address(RVA = "0x989490", Offset = "0x989490", VA = "0x989490")]
	public HapticMessages()
	{
	}
}
[Token(Token = "0x200026B")]
public class HeightAdjusterGrabbable : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40010FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action OnRelease;

	[Token(Token = "0x40010FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Grabbable grabbable;

	[Token(Token = "0x6001034")]
	[Address(RVA = "0x9895AC", Offset = "0x9895AC", VA = "0x9895AC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001035")]
	[Address(RVA = "0x98965C", Offset = "0x98965C", VA = "0x98965C")]
	public void OnGrabEnd()
	{
	}

	[Token(Token = "0x6001036")]
	[Address(RVA = "0x989678", Offset = "0x989678", VA = "0x989678")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001037")]
	[Address(RVA = "0x989744", Offset = "0x989744", VA = "0x989744")]
	public HeightAdjusterGrabbable()
	{
	}
}
[Token(Token = "0x200026C")]
public class HeightAdjusterHandle : UnityEngine.MonoBehaviour, ILocallyGrabbable
{
	[Token(Token = "0x4001100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private HeightAdjusterGrabbable adjusterGrabbable;

	[Token(Token = "0x4001101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private HeightAdjusterGrabbable adjusterSecondaryGrabbable;

	[Token(Token = "0x4001102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject tooltip;

	[Token(Token = "0x4001103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform[] tooltipAnchors;

	[Token(Token = "0x4001104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float handleHeight;

	[Token(Token = "0x4001105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Grabbable grabbable;

	[Token(Token = "0x4001106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Grabbable secondaryGrabbable;

	[Token(Token = "0x4001107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private PlayerHeightAdjuster playerHeightAdjuster;

	[Token(Token = "0x6001038")]
	[Address(RVA = "0x98974C", Offset = "0x98974C", VA = "0x98974C")]
	private void Start()
	{
	}

	[Token(Token = "0x6001039")]
	[Address(RVA = "0x9898C0", Offset = "0x9898C0", VA = "0x9898C0", Slot = "4")]
	public void OnLocalGrab(CookoutAvatarHand grabbedBy, Transform handAnchor)
	{
	}

	[Token(Token = "0x600103A")]
	[Address(RVA = "0x989DC8", Offset = "0x989DC8", VA = "0x989DC8")]
	private void OnGrabReleased()
	{
	}

	[Token(Token = "0x600103B")]
	[Address(RVA = "0x989E80", Offset = "0x989E80", VA = "0x989E80")]
	private void Update()
	{
	}

	[Token(Token = "0x600103C")]
	[Address(RVA = "0x989A78", Offset = "0x989A78", VA = "0x989A78")]
	private void ToggleTooltip()
	{
	}

	[Token(Token = "0x600103D")]
	[Address(RVA = "0x989FA4", Offset = "0x989FA4", VA = "0x989FA4")]
	public HeightAdjusterHandle()
	{
	}
}
[Token(Token = "0x200026D")]
[DisallowMultipleComponent]
public class HotGrabbable : NetworkedBehaviour
{
	[Token(Token = "0x4001108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private bool tooHot;

	[Token(Token = "0x4001109")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Grabbable grabbable;

	[Token(Token = "0x17000201")]
	public bool TooHot
	{
		[Token(Token = "0x600103E")]
		[Address(RVA = "0x989FAC", Offset = "0x989FAC", VA = "0x989FAC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600103F")]
		[Address(RVA = "0x989FB4", Offset = "0x989FB4", VA = "0x989FB4")]
		set
		{
		}
	}

	[Token(Token = "0x6001040")]
	[Address(RVA = "0x98A11C", Offset = "0x98A11C", VA = "0x98A11C")]
	private void Start()
	{
	}

	[Token(Token = "0x6001041")]
	[Address(RVA = "0x98A17C", Offset = "0x98A17C", VA = "0x98A17C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001042")]
	[Address(RVA = "0x98A184", Offset = "0x98A184", VA = "0x98A184")]
	public void GrabBurning()
	{
	}

	[Token(Token = "0x6001043")]
	[Address(RVA = "0x98A24C", Offset = "0x98A24C", VA = "0x98A24C")]
	[PunRPC]
	private void GrabBurningRPC()
	{
	}

	[Token(Token = "0x6001044")]
	[Address(RVA = "0x98A344", Offset = "0x98A344", VA = "0x98A344")]
	public HotGrabbable()
	{
	}
}
[Token(Token = "0x200026E")]
public interface IGrabbableTransformController
{
	[Token(Token = "0x6001045")]
	bool ShouldDisableNetworkSyncing(bool isGrabbed);
}
[Token(Token = "0x200026F")]
public interface ILocallyGrabbable
{
	[Token(Token = "0x6001046")]
	void OnLocalGrab(CookoutAvatarHand grabbedBy, Transform handAnchor);
}
[Token(Token = "0x2000270")]
public class PlayerHeightAdjuster : SingleInstancePhotonCallbackListener<PlayerHeightAdjuster>
{
	[Token(Token = "0x2000271")]
	[CompilerGenerated]
	private sealed class <Start>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400110D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400110E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400110F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PlayerHeightAdjuster <>4__this;

		[Token(Token = "0x17000204")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001055")]
			[Address(RVA = "0x98ACA8", Offset = "0x98ACA8", VA = "0x98ACA8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000205")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001057")]
			[Address(RVA = "0x98ACF0", Offset = "0x98ACF0", VA = "0x98ACF0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001052")]
		[Address(RVA = "0x98A550", Offset = "0x98A550", VA = "0x98A550")]
		[DebuggerHidden]
		public <Start>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x6001053")]
		[Address(RVA = "0x98AA90", Offset = "0x98AA90", VA = "0x98AA90", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001054")]
		[Address(RVA = "0x98AA94", Offset = "0x98AA94", VA = "0x98AA94", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001056")]
		[Address(RVA = "0x98ACB0", Offset = "0x98ACB0", VA = "0x98ACB0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400110A")]
	private const string playerHeightOffsetKey = "playerHeightOffset";

	[Token(Token = "0x400110B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float maxHeightDeltaAllowed;

	[Token(Token = "0x400110C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float baseHeight;

	[Token(Token = "0x17000202")]
	private bool PlayerDataReady
	{
		[Token(Token = "0x6001047")]
		[Address(RVA = "0x98A34C", Offset = "0x98A34C", VA = "0x98A34C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000203")]
	private string PlayerHeightPrefKey
	{
		[Token(Token = "0x6001048")]
		[Address(RVA = "0x98A3EC", Offset = "0x98A3EC", VA = "0x98A3EC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001049")]
	[Address(RVA = "0x98A4E8", Offset = "0x98A4E8", VA = "0x98A4E8")]
	[IteratorStateMachine(typeof(<Start>d__7))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x600104A")]
	[Address(RVA = "0x98A578", Offset = "0x98A578", VA = "0x98A578")]
	public void OnLocalPlayerAvatarAssignedPosition()
	{
	}

	[Token(Token = "0x600104B")]
	[Address(RVA = "0x989EE8", Offset = "0x989EE8", VA = "0x989EE8")]
	public void AdjustLocalPlayerHeightOffset(float heightDelta)
	{
	}

	[Token(Token = "0x600104C")]
	[Address(RVA = "0x989E0C", Offset = "0x989E0C", VA = "0x989E0C")]
	public void SyncLocalPlayerHeight()
	{
	}

	[Token(Token = "0x600104D")]
	[Address(RVA = "0x98A5AC", Offset = "0x98A5AC", VA = "0x98A5AC")]
	private void SyncPlayerHeightOffset(float heightOffset, bool writeToPrefs = true)
	{
	}

	[Token(Token = "0x600104E")]
	[Address(RVA = "0x98A764", Offset = "0x98A764", VA = "0x98A764")]
	public void UpdateRemoteAvatarHeightOffset(CookoutAvatar avatar)
	{
	}

	[Token(Token = "0x600104F")]
	[Address(RVA = "0x98A854", Offset = "0x98A854", VA = "0x98A854", Slot = "53")]
	public override void OnPhotonPlayerPropertiesChanged(object[] playerAndUpdatedProps)
	{
	}

	[Token(Token = "0x6001050")]
	[Address(RVA = "0x98A6F8", Offset = "0x98A6F8", VA = "0x98A6F8")]
	private void SetNewYPosition(CookoutAvatar avatar, float y)
	{
	}

	[Token(Token = "0x6001051")]
	[Address(RVA = "0x98AA18", Offset = "0x98AA18", VA = "0x98AA18")]
	public PlayerHeightAdjuster()
	{
	}
}
[Token(Token = "0x2000272")]
public class PlayerNameDisplayer : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4001110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject nameTagPrefab;

	[Token(Token = "0x4001111")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private TextMeshPro nameTagText;

	[Token(Token = "0x4001112")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private PhotonPlayer owner;

	[Token(Token = "0x4001113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject hostIcon;

	[Token(Token = "0x4001114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject nameTag;

	[Token(Token = "0x4001115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private CookoutAvatar avatar;

	[Token(Token = "0x4001116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool waitingForName;

	[Token(Token = "0x6001058")]
	[Address(RVA = "0x98ACF8", Offset = "0x98ACF8", VA = "0x98ACF8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001059")]
	[Address(RVA = "0x98AEA8", Offset = "0x98AEA8", VA = "0x98AEA8")]
	private void Update()
	{
	}

	[Token(Token = "0x600105A")]
	[Address(RVA = "0x98B0E8", Offset = "0x98B0E8", VA = "0x98B0E8")]
	public void OnAvatarEnabled()
	{
	}

	[Token(Token = "0x600105B")]
	[Address(RVA = "0x98B25C", Offset = "0x98B25C", VA = "0x98B25C")]
	private void OnMasterClientChanged(PhotonPlayer newMasterClient)
	{
	}

	[Token(Token = "0x600105C")]
	[Address(RVA = "0x98B288", Offset = "0x98B288", VA = "0x98B288")]
	public void OnAvatarDisabled()
	{
	}

	[Token(Token = "0x600105D")]
	[Address(RVA = "0x98B4AC", Offset = "0x98B4AC", VA = "0x98B4AC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600105E")]
	[Address(RVA = "0x98B6CC", Offset = "0x98B6CC", VA = "0x98B6CC")]
	public PlayerNameDisplayer()
	{
	}
}
[Token(Token = "0x2000273")]
public class PlayerVoIP : NetworkedBehaviour
{
	[Token(Token = "0x4001117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AudioMixer mixer;

	[Token(Token = "0x4001118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string voiceGroup;

	[Token(Token = "0x4001119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AudioSource voiceSource;

	[Token(Token = "0x400111A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private PhotonVoiceRecorder voiceRecorder;

	[Token(Token = "0x400111B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private VoIPManager voIPManager;

	[Token(Token = "0x400111C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int ownerID;

	[Token(Token = "0x600105F")]
	[Address(RVA = "0x98B6D4", Offset = "0x98B6D4", VA = "0x98B6D4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001060")]
	[Address(RVA = "0x98B750", Offset = "0x98B750", VA = "0x98B750")]
	private void Start()
	{
	}

	[Token(Token = "0x6001061")]
	[Address(RVA = "0x98B8E0", Offset = "0x98B8E0", VA = "0x98B8E0")]
	private void Update()
	{
	}

	[Token(Token = "0x6001062")]
	[Address(RVA = "0x98B9F0", Offset = "0x98B9F0", VA = "0x98B9F0")]
	public void ToggleMicActive()
	{
	}

	[Token(Token = "0x6001063")]
	[Address(RVA = "0x98BA24", Offset = "0x98BA24", VA = "0x98BA24")]
	public bool IsMicEnabled()
	{
		return default(bool);
	}

	[Token(Token = "0x6001064")]
	[Address(RVA = "0x98BA40", Offset = "0x98BA40", VA = "0x98BA40")]
	public void ToggleMute()
	{
	}

	[Token(Token = "0x6001065")]
	[Address(RVA = "0x98BA74", Offset = "0x98BA74", VA = "0x98BA74")]
	public bool IsMuted()
	{
		return default(bool);
	}

	[Token(Token = "0x6001066")]
	[Address(RVA = "0x98BA9C", Offset = "0x98BA9C", VA = "0x98BA9C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001067")]
	[Address(RVA = "0x98BBB0", Offset = "0x98BBB0", VA = "0x98BBB0")]
	public PlayerVoIP()
	{
	}
}
[Token(Token = "0x2000274")]
public class SafetyBubble : NetworkedBehaviour, IPunObservable
{
	[Token(Token = "0x400111D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject safetyBubbleCollider;

	[Token(Token = "0x400111E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject handIntruderCollider;

	[Token(Token = "0x400111F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject bodyIntruderCollider;

	[Token(Token = "0x4001120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool safetyBubbleActive;

	[Token(Token = "0x4001121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private CookoutAvatar cookoutAvatar;

	[Token(Token = "0x4001122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Dictionary<int, List<Collider>> intrudingPlayerColliders;

	[Token(Token = "0x4001123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GameObject safetyBubbleGO;

	[Token(Token = "0x4001124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private GameObject leftHandCollider;

	[Token(Token = "0x4001125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private GameObject rightHandCollider;

	[Token(Token = "0x4001126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private GameObject bodyCollider;

	[Token(Token = "0x6001068")]
	[Address(RVA = "0x98BC00", Offset = "0x98BC00", VA = "0x98BC00")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001069")]
	[Address(RVA = "0x98BF8C", Offset = "0x98BF8C", VA = "0x98BF8C")]
	private void OnTriggerEnterSafetyBubble(Collider other)
	{
	}

	[Token(Token = "0x600106A")]
	[Address(RVA = "0x98C224", Offset = "0x98C224", VA = "0x98C224")]
	private void OnTriggerExitSafetyBubble(Collider other)
	{
	}

	[Token(Token = "0x600106B")]
	[Address(RVA = "0x98C3F0", Offset = "0x98C3F0", VA = "0x98C3F0")]
	public void OnPlayerLeft(CookoutAvatar leavingPlayer)
	{
	}

	[Token(Token = "0x600106C")]
	[Address(RVA = "0x98BE98", Offset = "0x98BE98", VA = "0x98BE98")]
	public void SetCollidersEnabled(bool isEnabled)
	{
	}

	[Token(Token = "0x600106D")]
	[Address(RVA = "0x98C4B4", Offset = "0x98C4B4", VA = "0x98C4B4", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x600106E")]
	[Address(RVA = "0x98C5A8", Offset = "0x98C5A8", VA = "0x98C5A8")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x600106F")]
	[Address(RVA = "0x98C710", Offset = "0x98C710", VA = "0x98C710")]
	public SafetyBubble()
	{
	}
}
[Serializable]
[Token(Token = "0x2000275")]
public sealed class CookoutKeybindings
{
	[Token(Token = "0x6001070")]
	[Address(RVA = "0x98C78C", Offset = "0x98C78C", VA = "0x98C78C")]
	public CookoutKeybindings()
	{
	}
}
[Token(Token = "0x2000276")]
[CreateAssetMenu(menuName = "PlatformRelated/CookoutControllerSettings", fileName = "CookoutControllerSettings")]
public sealed class CookoutControllerSettings : ScriptableObject
{
	[Token(Token = "0x4001127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CookoutKeybindings cookoutKeybindings;

	[Token(Token = "0x6001071")]
	[Address(RVA = "0x98C794", Offset = "0x98C794", VA = "0x98C794")]
	public CookoutControllerSettings()
	{
	}
}
[Token(Token = "0x2000277")]
public class HandInput
{
	[Token(Token = "0x4001128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool grabPress;

	[Token(Token = "0x4001129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	public bool grabHeld;

	[Token(Token = "0x400112A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
	public bool grabRelease;

	[Token(Token = "0x400112B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
	public bool squeezePress;

	[Token(Token = "0x400112C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool SqueezeHeld;

	[Token(Token = "0x400112D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
	public bool squeezeRelease;

	[Token(Token = "0x400112E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
	public bool thumbTouch;

	[Token(Token = "0x400112F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17")]
	public bool indexFingerTouch;

	[Token(Token = "0x4001130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float indexFingerPull;

	[Token(Token = "0x6001072")]
	[Address(RVA = "0x98C79C", Offset = "0x98C79C", VA = "0x98C79C")]
	public HandInput()
	{
	}
}
[Token(Token = "0x2000278")]
public class CookoutInputData
{
	[Token(Token = "0x4001131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public readonly HandInput leftHand;

	[Token(Token = "0x4001132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public readonly HandInput rightHand;

	[Token(Token = "0x4001133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool menuPress;

	[Token(Token = "0x4001134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool recenterPressed;

	[Token(Token = "0x6001073")]
	[Address(RVA = "0x9864EC", Offset = "0x9864EC", VA = "0x9864EC")]
	public CookoutInputData()
	{
	}
}
[Token(Token = "0x2000279")]
public class SteamControlTests : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x6001074")]
	[Address(RVA = "0x98C7A4", Offset = "0x98C7A4", VA = "0x98C7A4")]
	public SteamControlTests()
	{
	}
}
[Token(Token = "0x200027A")]
public class VoIPManager : SingleInstanceBehavior<VoIPManager>
{
	[Token(Token = "0x4001135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<int, PlayerVoIP> players;

	[Token(Token = "0x6001075")]
	[Address(RVA = "0x98B878", Offset = "0x98B878", VA = "0x98B878")]
	public void RegisterPlayer(int playerID, PlayerVoIP playerVoIP)
	{
	}

	[Token(Token = "0x6001076")]
	[Address(RVA = "0x98BB20", Offset = "0x98BB20", VA = "0x98BB20")]
	public void UnregisterPlayer(int playerID)
	{
	}

	[Token(Token = "0x6001077")]
	[Address(RVA = "0x98C7AC", Offset = "0x98C7AC", VA = "0x98C7AC")]
	public void TogglePlayerMute(int playerID)
	{
	}

	[Token(Token = "0x6001078")]
	[Address(RVA = "0x98C844", Offset = "0x98C844", VA = "0x98C844")]
	public bool IsPlayerMuted(int playerID)
	{
		return default(bool);
	}

	[Token(Token = "0x6001079")]
	[Address(RVA = "0x98C8E0", Offset = "0x98C8E0", VA = "0x98C8E0")]
	public VoIPManager()
	{
	}
}
[Token(Token = "0x200027B")]
public class VotingHands : SingleInstanceNetworkedBehavior<VotingHands>
{
	[Token(Token = "0x200027C")]
	[CompilerGenerated]
	private sealed class <Start>d__15 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VotingHands <>4__this;

		[Token(Token = "0x17000207")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001086")]
			[Address(RVA = "0x98D8E8", Offset = "0x98D8E8", VA = "0x98D8E8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000208")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001088")]
			[Address(RVA = "0x98D930", Offset = "0x98D930", VA = "0x98D930", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001083")]
		[Address(RVA = "0x98CA18", Offset = "0x98CA18", VA = "0x98CA18")]
		[DebuggerHidden]
		public <Start>d__15(int <>1__state)
		{
		}

		[Token(Token = "0x6001084")]
		[Address(RVA = "0x98D604", Offset = "0x98D604", VA = "0x98D604", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001085")]
		[Address(RVA = "0x98D608", Offset = "0x98D608", VA = "0x98D608", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001087")]
		[Address(RVA = "0x98D8F0", Offset = "0x98D8F0", VA = "0x98D8F0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float thumbsUpThreshold;

	[Token(Token = "0x4001138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float thumbDownThreshold;

	[Token(Token = "0x4001139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float holdTimeThreshold;

	[Token(Token = "0x400113A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float voteCooldownTime;

	[Token(Token = "0x400113B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float voteReminderCooldown;

	[Token(Token = "0x400113C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private MapVoteCounter mapVoteCounter;

	[Token(Token = "0x400113D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private CookingNetworkManager networkManager;

	[Token(Token = "0x400113E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool hasInitiated;

	[Token(Token = "0x400113F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float voteCooldown;

	[Token(Token = "0x4001140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float voteReminderTimer;

	[Token(Token = "0x4001141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private RewardBubbleSpawner rewardBubbleSpawner;

	[Token(Token = "0x17000206")]
	public bool HasVoted
	{
		[Token(Token = "0x600107A")]
		[Address(RVA = "0x98C99C", Offset = "0x98C99C", VA = "0x98C99C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600107B")]
		[Address(RVA = "0x98C9A4", Offset = "0x98C9A4", VA = "0x98C9A4")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x600107C")]
	[Address(RVA = "0x98C9B0", Offset = "0x98C9B0", VA = "0x98C9B0")]
	[IteratorStateMachine(typeof(<Start>d__15))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x600107D")]
	[Address(RVA = "0x98CA40", Offset = "0x98CA40", VA = "0x98CA40")]
	private void Update()
	{
	}

	[Token(Token = "0x600107E")]
	[Address(RVA = "0x98D1CC", Offset = "0x98D1CC", VA = "0x98D1CC")]
	public void EndVote()
	{
	}

	[Token(Token = "0x600107F")]
	[Address(RVA = "0x98D28C", Offset = "0x98D28C", VA = "0x98D28C")]
	public void StartVote()
	{
	}

	[Token(Token = "0x6001080")]
	[Address(RVA = "0x98D37C", Offset = "0x98D37C", VA = "0x98D37C")]
	[PunRPC]
	private void PlayVoteFeedbackRPC(NetMsgAvatarHand msg, bool votedYes, int playerPosIndex)
	{
	}

	[Token(Token = "0x6001081")]
	[Address(RVA = "0x98D584", Offset = "0x98D584", VA = "0x98D584")]
	public VotingHands()
	{
	}
}
[Token(Token = "0x200027D")]
public class Preloader : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x200027E")]
	[CompilerGenerated]
	private sealed class <LoadLauncherScene>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Preloader <>4__this;

		[Token(Token = "0x17000209")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600108F")]
			[Address(RVA = "0x98DB98", Offset = "0x98DB98", VA = "0x98DB98", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700020A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001091")]
			[Address(RVA = "0x98DBE0", Offset = "0x98DBE0", VA = "0x98DBE0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600108C")]
		[Address(RVA = "0x98D9D8", Offset = "0x98D9D8", VA = "0x98D9D8")]
		[DebuggerHidden]
		public <LoadLauncherScene>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x600108D")]
		[Address(RVA = "0x98DA08", Offset = "0x98DA08", VA = "0x98DA08", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600108E")]
		[Address(RVA = "0x98DA0C", Offset = "0x98DA0C", VA = "0x98DA0C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001090")]
		[Address(RVA = "0x98DBA0", Offset = "0x98DBA0", VA = "0x98DBA0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public VideoPlayer video;

	[Token(Token = "0x4001146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private AsyncOperation asyncOperation;

	[Token(Token = "0x6001089")]
	[Address(RVA = "0x98D938", Offset = "0x98D938", VA = "0x98D938")]
	private void Start()
	{
	}

	[Token(Token = "0x600108A")]
	[Address(RVA = "0x98D970", Offset = "0x98D970", VA = "0x98D970")]
	[IteratorStateMachine(typeof(<LoadLauncherScene>d__3))]
	private IEnumerator LoadLauncherScene()
	{
		return null;
	}

	[Token(Token = "0x600108B")]
	[Address(RVA = "0x98DA00", Offset = "0x98DA00", VA = "0x98DA00")]
	public Preloader()
	{
	}
}
[Token(Token = "0x200027F")]
public class ContinueMarker : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x2000280")]
	[CompilerGenerated]
	private sealed class <MoveToCupRoutine>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400115C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400115D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400115E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ContinueMarker <>4__this;

		[Token(Token = "0x400115F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool delayed;

		[Token(Token = "0x4001160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform target;

		[Token(Token = "0x1700020B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600109C")]
			[Address(RVA = "0x98E65C", Offset = "0x98E65C", VA = "0x98E65C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700020C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600109E")]
			[Address(RVA = "0x98E6A4", Offset = "0x98E6A4", VA = "0x98E6A4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001099")]
		[Address(RVA = "0x98E334", Offset = "0x98E334", VA = "0x98E334")]
		[DebuggerHidden]
		public <MoveToCupRoutine>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x600109A")]
		[Address(RVA = "0x98E4A4", Offset = "0x98E4A4", VA = "0x98E4A4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600109B")]
		[Address(RVA = "0x98E4A8", Offset = "0x98E4A8", VA = "0x98E4A8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600109D")]
		[Address(RVA = "0x98E664", Offset = "0x98E664", VA = "0x98E664", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400114A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PokeButton button;

	[Token(Token = "0x400114B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float transitionTime;

	[Token(Token = "0x400114C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float appearTime;

	[Token(Token = "0x400114D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float mapAnimationDelay;

	[Token(Token = "0x400114E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private TextMeshPro townName;

	[Token(Token = "0x400114F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private TextMeshPro townNumber;

	[Token(Token = "0x4001150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Animator animator;

	[Token(Token = "0x4001151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private WaitForSeconds transitionWaitTime;

	[Token(Token = "0x4001152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private WaitForSeconds appearWaitTime;

	[Token(Token = "0x4001153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private WaitForSeconds mapAnimationDelayTime;

	[Token(Token = "0x4001154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int latestCup;

	[Token(Token = "0x4001155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private int arriveID;

	[Token(Token = "0x4001156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int departID;

	[Token(Token = "0x4001157")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private int idleID;

	[Token(Token = "0x4001158")]
	private const string localizationEndlessHeader = "endless_header";

	[Token(Token = "0x4001159")]
	private const string localizationTutorialHeader = "tutorial_header";

	[Token(Token = "0x400115A")]
	private const string localizationCreativeHeader = "creative_header";

	[Token(Token = "0x400115B")]
	private const string localizationCampaignTownHeader = "campaign_town_number";

	[Token(Token = "0x6001092")]
	[Address(RVA = "0x98DBE8", Offset = "0x98DBE8", VA = "0x98DBE8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001093")]
	[Address(RVA = "0x98DD10", Offset = "0x98DD10", VA = "0x98DD10")]
	public void MoveToCupInstant(int cupIndex)
	{
	}

	[Token(Token = "0x6001094")]
	[Address(RVA = "0x98DEC4", Offset = "0x98DEC4", VA = "0x98DEC4")]
	public void MoveToCup(int cupIndex, bool delayed = false)
	{
	}

	[Token(Token = "0x6001095")]
	[Address(RVA = "0x98E2B0", Offset = "0x98E2B0", VA = "0x98E2B0")]
	[IteratorStateMachine(typeof(<MoveToCupRoutine>d__21))]
	private IEnumerator MoveToCupRoutine(Transform target, bool delayed)
	{
		return null;
	}

	[Token(Token = "0x6001096")]
	[Address(RVA = "0x98E35C", Offset = "0x98E35C", VA = "0x98E35C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001097")]
	[Address(RVA = "0x98E388", Offset = "0x98E388", VA = "0x98E388")]
	private void SetAnimationTrigger(int triggerID)
	{
	}

	[Token(Token = "0x6001098")]
	[Address(RVA = "0x98E3F4", Offset = "0x98E3F4", VA = "0x98E3F4")]
	public ContinueMarker()
	{
	}
}
[Token(Token = "0x2000281")]
public class CreativeModeTooltip : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4001161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private CookingRound cookingRound;

	[Token(Token = "0x600109F")]
	[Address(RVA = "0x98E6AC", Offset = "0x98E6AC", VA = "0x98E6AC")]
	private void Start()
	{
	}

	[Token(Token = "0x60010A0")]
	[Address(RVA = "0x98E7F4", Offset = "0x98E7F4", VA = "0x98E7F4")]
	public void DisplayRetryLevelTip()
	{
	}

	[Token(Token = "0x60010A1")]
	[Address(RVA = "0x98E8F0", Offset = "0x98E8F0", VA = "0x98E8F0")]
	public void OnCreativeButtonPushed()
	{
	}

	[Token(Token = "0x60010A2")]
	[Address(RVA = "0x98E914", Offset = "0x98E914", VA = "0x98E914")]
	public void OnCountdownStarted()
	{
	}

	[Token(Token = "0x60010A3")]
	[Address(RVA = "0x98EAC8", Offset = "0x98EAC8", VA = "0x98EAC8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60010A4")]
	[Address(RVA = "0x98EB9C", Offset = "0x98EB9C", VA = "0x98EB9C")]
	public CreativeModeTooltip()
	{
	}
}
[Token(Token = "0x2000282")]
public class CupButton : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4001162")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PokeButton button;

	[Token(Token = "0x4001163")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Color lockedColor;

	[Token(Token = "0x4001164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool isEndlessMode;

	[Token(Token = "0x4001165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float lockedYOffset;

	[Token(Token = "0x4001166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("Town Visuals")]
	[SerializeField]
	private MeshRenderer buttonRenderer;

	[Token(Token = "0x4001167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform[] meeplePositions;

	[Token(Token = "0x4001168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("Star Visuals")]
	[SerializeField]
	private MeshRenderer[] starRenderers;

	[Token(Token = "0x4001169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[Header("Endless Mode Visuals")]
	[SerializeField]
	private GameObject endlessModeHighscore;

	[Token(Token = "0x400116A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool isLocked;

	[Token(Token = "0x400116B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private MaterialPropertyBlock propertyBlock;

	[Token(Token = "0x400116C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Animator animator;

	[Token(Token = "0x400116D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private GameObject cupButtonPadlock;

	[Token(Token = "0x400116E")]
	private const string propertyTextureIndex = "_TextureIndex";

	[Token(Token = "0x400116F")]
	private const string propertyColor = "_Color";

	[Token(Token = "0x4001170")]
	private const string triggerNextTown = "nextTown";

	[Token(Token = "0x4001171")]
	private const string pathNamePadlock = "Padlock";

	[Token(Token = "0x60010A5")]
	[Address(RVA = "0x98EBA4", Offset = "0x98EBA4", VA = "0x98EBA4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60010A6")]
	[Address(RVA = "0x98EC84", Offset = "0x98EC84", VA = "0x98EC84")]
	public void SetLocked(bool locked)
	{
	}

	[Token(Token = "0x60010A7")]
	[Address(RVA = "0x98EE30", Offset = "0x98EE30", VA = "0x98EE30")]
	public void UpdateStarCount(int starCount)
	{
	}

	[Token(Token = "0x60010A8")]
	[Address(RVA = "0x98EF1C", Offset = "0x98EF1C", VA = "0x98EF1C")]
	public void SetInteractable(bool interactable)
	{
	}

	[Token(Token = "0x60010A9")]
	[Address(RVA = "0x98EF58", Offset = "0x98EF58", VA = "0x98EF58")]
	public void PlayNextTownAnimation()
	{
	}

	[Token(Token = "0x60010AA")]
	[Address(RVA = "0x98EFAC", Offset = "0x98EFAC", VA = "0x98EFAC")]
	public Vector3 GetMeeplePosition(PlayerColor playerColor)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60010AB")]
	[Address(RVA = "0x98EFE8", Offset = "0x98EFE8", VA = "0x98EFE8")]
	public CupButton()
	{
	}
}
[Token(Token = "0x2000283")]
public class Map : SingleInstanceNetworkedBehavior<Map>, IPunObservable
{
	[Token(Token = "0x2000284")]
	public delegate void OnConfirmCupStartedHandler();

	[Token(Token = "0x2000285")]
	public enum State
	{
		[Token(Token = "0x40011A4")]
		Hidden,
		[Token(Token = "0x40011A5")]
		CupSelect,
		[Token(Token = "0x40011A6")]
		ConfirmCup,
		[Token(Token = "0x40011A7")]
		ConfirmEndlessMode,
		[Token(Token = "0x40011A8")]
		ConfirmTutorialMode,
		[Token(Token = "0x40011A9")]
		ConfirmCreativeMode,
		[Token(Token = "0x40011AA")]
		CupResults,
		[Token(Token = "0x40011AB")]
		EndlessResults
	}

	[Token(Token = "0x4001172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Buttons")]
	public GameObject[] levelMarkers;

	[Token(Token = "0x4001173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform[] levelStarParents;

	[Token(Token = "0x4001174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public CupButton[] CupButtons;

	[Token(Token = "0x4001175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public MapHouse mapHouse;

	[Token(Token = "0x4001176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public CupButton endlessModeButton;

	[Token(Token = "0x4001177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public PokeButton tutorialModeButton;

	[Token(Token = "0x4001178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public PokeButton creativeModeButton;

	[Token(Token = "0x4001179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public ContinueMarker continueMarker;

	[Token(Token = "0x400117A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float buttonScaleUpTime;

	[Token(Token = "0x400117B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Header("Map")]
	public Transform mapRoot;

	[Token(Token = "0x400117C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject cupSelectionMenu;

	[Token(Token = "0x400117D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject levelSelectionMenu;

	[Token(Token = "0x400117E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public RetryLevelTip retryLevelTip;

	[Token(Token = "0x400117F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public CreativeModeTooltip creativeModeTip;

	[Token(Token = "0x4001180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public GameObject[] environments;

	[Token(Token = "0x4001181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public float newEnvironmentCelebrationLifetime;

	[Token(Token = "0x4001182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[Header("Level Marker")]
	public Material roundStarLitMaterial;

	[Token(Token = "0x4001183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Material starUnlitMaterial;

	[Token(Token = "0x4001184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[Header("Star rotation speed")]
	public float starRotationSpeed;

	[Token(Token = "0x4001185")]
	public const int tutorialCupID = 1000;

	[Token(Token = "0x4001186")]
	public const int endlessEnvironmentID = 4;

	[Token(Token = "0x4001187")]
	public const int creativeEnvironmentID = 5;

	[Token(Token = "0x4001188")]
	public const int endlessModeCupID = 2000;

	[Token(Token = "0x4001189")]
	public const int creativeModeCupID = 3000;

	[Token(Token = "0x400118B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private int selectedCupBacking;

	[Token(Token = "0x400118D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private MapVoteCounter mapVoteCounter;

	[Token(Token = "0x400118E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private MeshRenderer[][] starsAboveLevels;

	[Token(Token = "0x400118F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Vector3[][] levelStarStartPositions;

	[Token(Token = "0x4001190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Vector3[][] levelStarStartScale;

	[Token(Token = "0x4001191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Quaternion[][] levelStarStartRotation;

	[Token(Token = "0x4001192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private int addedStars;

	[Token(Token = "0x4001193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private CookingCup cookingCup;

	[Token(Token = "0x4001194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private TableCenterUI tableCenterUI;

	[Token(Token = "0x4001195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private MapAnimation mapAnimation;

	[Token(Token = "0x4001196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private Transform[] CupButtonTransforms;

	[Token(Token = "0x4001197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private Vector3 defaultButtonScale;

	[Token(Token = "0x4001198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	private bool waitingForFirstTimeSync;

	[Token(Token = "0x4001199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private int confirmCupID;

	[Token(Token = "0x400119A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	private int cupResultCupID;

	[Token(Token = "0x400119B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private int cupResultLevel;

	[Token(Token = "0x400119C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private List<int> cupResultStars;

	[Token(Token = "0x400119D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private bool cupResultsFailed;

	[Token(Token = "0x400119E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x141")]
	private bool waitForStarsFromRoundResultDisplayer;

	[Token(Token = "0x400119F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private GameObject unlockForestCelebration;

	[Token(Token = "0x40011A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private GameObject unlockCastleCelebration;

	[Token(Token = "0x40011A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private GameObject unlockEndlessCelebration;

	[Token(Token = "0x40011A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private PhotonCallbackManager photonCallbackManager;

	[Token(Token = "0x1700020D")]
	[HideInInspector]
	public int SelectedCup
	{
		[Token(Token = "0x60010AE")]
		[Address(RVA = "0x98F134", Offset = "0x98F134", VA = "0x98F134")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x60010AF")]
		[Address(RVA = "0x98F13C", Offset = "0x98F13C", VA = "0x98F13C")]
		set
		{
		}
	}

	[Token(Token = "0x1700020E")]
	public State MapState
	{
		[Token(Token = "0x60010B0")]
		[Address(RVA = "0x98F374", Offset = "0x98F374", VA = "0x98F374")]
		[CompilerGenerated]
		get
		{
			return default(State);
		}
		[Token(Token = "0x60010B1")]
		[Address(RVA = "0x98F37C", Offset = "0x98F37C", VA = "0x98F37C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x14000023")]
	public event OnConfirmCupStartedHandler OnConfirmModeStart
	{
		[Token(Token = "0x60010AC")]
		[Address(RVA = "0x98EFFC", Offset = "0x98EFFC", VA = "0x98EFFC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60010AD")]
		[Address(RVA = "0x98F098", Offset = "0x98F098", VA = "0x98F098")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60010B2")]
	[Address(RVA = "0x98F384", Offset = "0x98F384", VA = "0x98F384", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x60010B3")]
	[Address(RVA = "0x98F588", Offset = "0x98F588", VA = "0x98F588")]
	private void Start()
	{
	}

	[Token(Token = "0x60010B4")]
	[Address(RVA = "0x990390", Offset = "0x990390", VA = "0x990390")]
	private void OnMasterClientChanged(PhotonPlayer newMasterClient)
	{
	}

	[Token(Token = "0x60010B5")]
	[Address(RVA = "0x9904F4", Offset = "0x9904F4", VA = "0x9904F4")]
	private void Update()
	{
	}

	[Token(Token = "0x60010B6")]
	[Address(RVA = "0x990598", Offset = "0x990598", VA = "0x990598")]
	private void OnGameStateChanged(GameState oldState, GameState newState)
	{
	}

	[Token(Token = "0x60010B7")]
	[Address(RVA = "0x990A1C", Offset = "0x990A1C", VA = "0x990A1C")]
	private void OnCountdownStarted()
	{
	}

	[Token(Token = "0x60010B8")]
	[Address(RVA = "0x990A38", Offset = "0x990A38", VA = "0x990A38")]
	[PunRPC]
	private void SelectCupRPC(int cupID)
	{
	}

	[Token(Token = "0x60010B9")]
	[Address(RVA = "0x990A3C", Offset = "0x990A3C", VA = "0x990A3C")]
	[PunRPC]
	private void GoToCupConfirmationRPC(int cupID)
	{
	}

	[Token(Token = "0x60010BA")]
	[Address(RVA = "0x990C44", Offset = "0x990C44", VA = "0x990C44")]
	[PunRPC]
	private void GoToEndlessModeConfirmationRPC()
	{
	}

	[Token(Token = "0x60010BB")]
	[Address(RVA = "0x990E04", Offset = "0x990E04", VA = "0x990E04")]
	[PunRPC]
	private void GoToTutorialModeConfirmationRPC()
	{
	}

	[Token(Token = "0x60010BC")]
	[Address(RVA = "0x990EA4", Offset = "0x990EA4", VA = "0x990EA4")]
	[PunRPC]
	private void GoToCreativeModeConfirmationRPC()
	{
	}

	[Token(Token = "0x60010BD")]
	[Address(RVA = "0x991064", Offset = "0x991064", VA = "0x991064")]
	[PunRPC]
	private void ReturnToCupSelectRPC()
	{
	}

	[Token(Token = "0x60010BE")]
	[Address(RVA = "0x991088", Offset = "0x991088", VA = "0x991088")]
	public void ShowCupResults(int cupID, int cupLevelIndex, int[] cupStars, bool cupFailed)
	{
	}

	[Token(Token = "0x60010BF")]
	[Address(RVA = "0x9911EC", Offset = "0x9911EC", VA = "0x9911EC")]
	public void ShowEndlessResults()
	{
	}

	[Token(Token = "0x60010C0")]
	[Address(RVA = "0x990238", Offset = "0x990238", VA = "0x990238")]
	private void SetState(State newState)
	{
	}

	[Token(Token = "0x60010C1")]
	[Address(RVA = "0x991210", Offset = "0x991210", VA = "0x991210")]
	private void OnStateChanged(State previousState)
	{
	}

	[Token(Token = "0x60010C2")]
	[Address(RVA = "0x9919E0", Offset = "0x9919E0", VA = "0x9919E0")]
	private void ClearTableForVoting()
	{
	}

	[Token(Token = "0x60010C3")]
	[Address(RVA = "0x99268C", Offset = "0x99268C", VA = "0x99268C")]
	public void SetCupButtonsEnabled(bool enabled)
	{
	}

	[Token(Token = "0x60010C4")]
	[Address(RVA = "0x9926FC", Offset = "0x9926FC", VA = "0x9926FC")]
	public void UpdateUnlockedCups(bool[] availableCups, int latestCupCompleted)
	{
	}

	[Token(Token = "0x60010C5")]
	[Address(RVA = "0x98DE50", Offset = "0x98DE50", VA = "0x98DE50")]
	public Transform GetCupButtonTransform(int cupID)
	{
		return null;
	}

	[Token(Token = "0x60010C6")]
	[Address(RVA = "0x992A1C", Offset = "0x992A1C", VA = "0x992A1C")]
	public void ShowCupButton(int cupIndex, bool show)
	{
	}

	[Token(Token = "0x60010C7")]
	[Address(RVA = "0x992B78", Offset = "0x992B78", VA = "0x992B78")]
	public void UpdateCupStars(int[] cupStarCounts)
	{
	}

	[Token(Token = "0x60010C8")]
	[Address(RVA = "0x992D14", Offset = "0x992D14", VA = "0x992D14")]
	public static int GetAverageStarCount(int cupStarCount, int numberOfLevels)
	{
		return default(int);
	}

	[Token(Token = "0x60010C9")]
	[Address(RVA = "0x991F70", Offset = "0x991F70", VA = "0x991F70")]
	private void SelectCupEnvironment(int cupID)
	{
	}

	[Token(Token = "0x60010CA")]
	[Address(RVA = "0x992160", Offset = "0x992160", VA = "0x992160")]
	private void SelectCupEnvironmentByIndex(int environmentIndex)
	{
	}

	[Token(Token = "0x60010CB")]
	[Address(RVA = "0x992228", Offset = "0x992228", VA = "0x992228")]
	private void UpdateLevelMarkers()
	{
	}

	[Token(Token = "0x60010CC")]
	[Address(RVA = "0x991B3C", Offset = "0x991B3C", VA = "0x991B3C")]
	private void ResetLevelStars()
	{
	}

	[Token(Token = "0x60010CD")]
	[Address(RVA = "0x9922C4", Offset = "0x9922C4", VA = "0x9922C4")]
	private void UpdateLevelStars()
	{
	}

	[Token(Token = "0x60010CE")]
	[Address(RVA = "0x992D44", Offset = "0x992D44", VA = "0x992D44")]
	public void AddStarToLevel(int levelIndex)
	{
	}

	[Token(Token = "0x60010CF")]
	[Address(RVA = "0x992E48", Offset = "0x992E48", VA = "0x992E48")]
	public void SendStarsOfLevelTo(int levelIndex, Vector3 position, int numberOfStars)
	{
	}

	[Token(Token = "0x60010D0")]
	[Address(RVA = "0x992F70", Offset = "0x992F70", VA = "0x992F70")]
	private void SendStarTo(Vector3 position, GameObject star, float delay)
	{
	}

	[Token(Token = "0x60010D1")]
	[Address(RVA = "0x991E28", Offset = "0x991E28", VA = "0x991E28")]
	private void UpdateDisplayedLevels(int cupID)
	{
	}

	[Token(Token = "0x60010D2")]
	[Address(RVA = "0x9921CC", Offset = "0x9921CC", VA = "0x9921CC")]
	private void DisableLevelDisplays()
	{
	}

	[Token(Token = "0x60010D3")]
	[Address(RVA = "0x99025C", Offset = "0x99025C", VA = "0x99025C")]
	private Vector3 GetHouseTarget(int levelIndex)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60010D4")]
	[Address(RVA = "0x9931CC", Offset = "0x9931CC", VA = "0x9931CC")]
	public void OnOpenSPRoomToMP()
	{
	}

	[Token(Token = "0x60010D5")]
	[Address(RVA = "0x9932D0", Offset = "0x9932D0", VA = "0x9932D0")]
	public void CelebrateNewEnvironmentUnlocked(CupData.Environment cupEnvironment)
	{
	}

	[Token(Token = "0x60010D6")]
	[Address(RVA = "0x99353C", Offset = "0x99353C", VA = "0x99353C", Slot = "6")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60010D7")]
	[Address(RVA = "0x9939A4", Offset = "0x9939A4", VA = "0x9939A4", Slot = "5")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x60010D8")]
	[Address(RVA = "0x993AA4", Offset = "0x993AA4", VA = "0x993AA4")]
	public void DebugConfirmCup(int cupID)
	{
	}

	[Token(Token = "0x60010D9")]
	[Address(RVA = "0x993AF4", Offset = "0x993AF4", VA = "0x993AF4")]
	public Map()
	{
	}
}
[Token(Token = "0x2000289")]
public class MapAnimation : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40011B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Vector3 aboveMapCenterPos;

	[Token(Token = "0x40011B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private Vector3 mapCenterPos;

	[Token(Token = "0x40011B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Vector3 shrunkWorldMapScale;

	[Token(Token = "0x40011B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private float targetButtonPositionYOffset;

	[Token(Token = "0x40011B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Animator mapLevelAnimator;

	[Token(Token = "0x40011B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private RetryLevelTip retryLevelTip;

	[Token(Token = "0x40011B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GameObject mapWorld;

	[Token(Token = "0x40011BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private float delayBeforeMoveToCenter;

	[Token(Token = "0x40011BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SerializeField]
	private float moveTime;

	[Token(Token = "0x40011BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private float mapWorldDisappearTime;

	[Token(Token = "0x40011BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Transform mapLevelTransform;

	[Token(Token = "0x40011BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private GameObject mapLevelGO;

	[Token(Token = "0x40011BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Transform mapWorldTransform;

	[Token(Token = "0x40011C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Map map;

	[Token(Token = "0x60010E9")]
	[Address(RVA = "0x994564", Offset = "0x994564", VA = "0x994564")]
	private void Awake()
	{
	}

	[Token(Token = "0x60010EA")]
	[Address(RVA = "0x991FB0", Offset = "0x991FB0", VA = "0x991FB0")]
	public void ZoomInOnLevel(Vector3 localStartPos)
	{
	}

	[Token(Token = "0x60010EB")]
	[Address(RVA = "0x9917E4", Offset = "0x9917E4", VA = "0x9917E4")]
	public void ZoomOutToWorld(Vector3 localDestination)
	{
	}

	[Token(Token = "0x60010EC")]
	[Address(RVA = "0x991640", Offset = "0x991640", VA = "0x991640")]
	public void NoTransitionAnimation(bool worldMapIsActive)
	{
	}

	[Token(Token = "0x60010ED")]
	[Address(RVA = "0x994604", Offset = "0x994604", VA = "0x994604")]
	public MapAnimation()
	{
	}
}
[Token(Token = "0x200028B")]
public class MapHouse : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x200028C")]
	[CompilerGenerated]
	private sealed class <MoveMapHouseCoroutine>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40011C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40011C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40011CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MapHouse <>4__this;

		[Token(Token = "0x40011CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 start;

		[Token(Token = "0x40011CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 target;

		[Token(Token = "0x1700020F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60010FE")]
			[Address(RVA = "0x994F7C", Offset = "0x994F7C", VA = "0x994F7C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000210")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001100")]
			[Address(RVA = "0x994FC4", Offset = "0x994FC4", VA = "0x994FC4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010FB")]
		[Address(RVA = "0x994D18", Offset = "0x994D18", VA = "0x994D18")]
		[DebuggerHidden]
		public <MoveMapHouseCoroutine>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x60010FC")]
		[Address(RVA = "0x994E00", Offset = "0x994E00", VA = "0x994E00", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60010FD")]
		[Address(RVA = "0x994E04", Offset = "0x994E04", VA = "0x994E04", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60010FF")]
		[Address(RVA = "0x994F84", Offset = "0x994F84", VA = "0x994F84", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40011C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject mapHouse;

	[Token(Token = "0x40011C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Animator mapHouseAnimator;

	[Token(Token = "0x40011C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private WaitForSeconds roundSummaryDelay;

	[Token(Token = "0x60010F5")]
	[Address(RVA = "0x994C20", Offset = "0x994C20", VA = "0x994C20")]
	private void Awake()
	{
	}

	[Token(Token = "0x60010F6")]
	[Address(RVA = "0x992618", Offset = "0x992618", VA = "0x992618")]
	public void MoveMapHouse(Vector3 start, Vector3 target)
	{
	}

	[Token(Token = "0x60010F7")]
	[Address(RVA = "0x994C74", Offset = "0x994C74", VA = "0x994C74")]
	[IteratorStateMachine(typeof(<MoveMapHouseCoroutine>d__5))]
	private IEnumerator MoveMapHouseCoroutine(Vector3 start, Vector3 target)
	{
		return null;
	}

	[Token(Token = "0x60010F8")]
	[Address(RVA = "0x9902DC", Offset = "0x9902DC", VA = "0x9902DC")]
	public void ResetHousePosition(Vector3 pos)
	{
	}

	[Token(Token = "0x60010F9")]
	[Address(RVA = "0x994D40", Offset = "0x994D40", VA = "0x994D40")]
	public MapHouse()
	{
	}
}
[Token(Token = "0x200028D")]
public class MapProgression : SingleInstanceNetworkedBehavior<MapProgression>, IPunObservable
{
	[Token(Token = "0x200028E")]
	public enum Rank
	{
		[Token(Token = "0x40011D9")]
		NotBeaten,
		[Token(Token = "0x40011DA")]
		OneStarAverage,
		[Token(Token = "0x40011DB")]
		TwoStarAverage,
		[Token(Token = "0x40011DC")]
		ThreeStarAverage
	}

	[Token(Token = "0x40011CD")]
	public const string beatenCupsKey = "beatenCups";

	[Token(Token = "0x40011CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int latestCupCompleted;

	[Token(Token = "0x40011CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ExitGames.Client.Photon.Hashtable syncHashTable;

	[Token(Token = "0x40011D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private SaveManager saveManager;

	[Token(Token = "0x40011D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Map map;

	[Token(Token = "0x40011D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private MapRoad mapRoad;

	[Token(Token = "0x40011D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int cupCount;

	[Token(Token = "0x40011D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int newEnvironmentUnlockedByCup;

	[Token(Token = "0x40011D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private PhotonCallbackManager photonCallbackManager;

	[Token(Token = "0x40011D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int currentCupPreviousRank;

	[Token(Token = "0x40011D7")]
	private const int noCupCompleted = -1;

	[Token(Token = "0x17000211")]
	private Rank[] CupsRank
	{
		[Token(Token = "0x6001101")]
		[Address(RVA = "0x994FCC", Offset = "0x994FCC", VA = "0x994FCC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001102")]
	[Address(RVA = "0x994FE8", Offset = "0x994FE8", VA = "0x994FE8")]
	private void Start()
	{
	}

	[Token(Token = "0x6001103")]
	[Address(RVA = "0x98F264", Offset = "0x98F264", VA = "0x98F264")]
	internal void UpdateRoomSelectedTownProperty(int townIndex)
	{
	}

	[Token(Token = "0x6001104")]
	[Address(RVA = "0x995518", Offset = "0x995518", VA = "0x995518")]
	private static void UpdateRoomProgressionProperty()
	{
	}

	[Token(Token = "0x6001105")]
	[Address(RVA = "0x99574C", Offset = "0x99574C", VA = "0x99574C")]
	[PunRPC]
	public void UpdateLocalPlayerBeatenCupRPC(int cupIndex, int rankValue, int totalCupStars, bool isDebug)
	{
	}

	[Token(Token = "0x6001106")]
	[Address(RVA = "0x995ED8", Offset = "0x995ED8", VA = "0x995ED8")]
	public bool GetNewEnvironmentUnlockedBy(int cupIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x6001107")]
	[Address(RVA = "0x995EFC", Offset = "0x995EFC", VA = "0x995EFC")]
	private void OnMasterClientChanged(PhotonPlayer newMasterClient)
	{
	}

	[Token(Token = "0x6001108")]
	[Address(RVA = "0x995F68", Offset = "0x995F68", VA = "0x995F68")]
	public void OnPlayerPropertiesChanged(PhotonPlayer player, ExitGames.Client.Photon.Hashtable changedProps)
	{
	}

	[Token(Token = "0x6001109")]
	[Address(RVA = "0x996288", Offset = "0x996288", VA = "0x996288")]
	public void OnPlayerDisconnected(PhotonPlayer otherPlayer)
	{
	}

	[Token(Token = "0x600110A")]
	[Address(RVA = "0x995FEC", Offset = "0x995FEC", VA = "0x995FEC")]
	private void OnSharedPlayerProgressionChanged()
	{
	}

	[Token(Token = "0x600110B")]
	[Address(RVA = "0x995654", Offset = "0x995654", VA = "0x995654")]
	public bool[] GetBeatenCups()
	{
		return null;
	}

	[Token(Token = "0x600110C")]
	[Address(RVA = "0x9907D4", Offset = "0x9907D4", VA = "0x9907D4")]
	public int GetNextRecommendedCup()
	{
		return default(int);
	}

	[Token(Token = "0x600110D")]
	[Address(RVA = "0x99628C", Offset = "0x99628C", VA = "0x99628C", Slot = "6")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x600110E")]
	[Address(RVA = "0x996364", Offset = "0x996364", VA = "0x996364", Slot = "5")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x600110F")]
	[Address(RVA = "0x996524", Offset = "0x996524", VA = "0x996524")]
	public void DebugSetNewEnvironmentSetByCup(int cupIndex)
	{
	}

	[Token(Token = "0x6001110")]
	[Address(RVA = "0x99652C", Offset = "0x99652C", VA = "0x99652C")]
	public MapProgression()
	{
	}
}
[Token(Token = "0x200028F")]
public class MapProgressMarker : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40011DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int unlockedByCup;

	[Token(Token = "0x40011DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject redMarker;

	[Token(Token = "0x40011DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject yellowMarker;

	[Token(Token = "0x40011E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject blueMarker;

	[Token(Token = "0x40011E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject greenMarker;

	[Token(Token = "0x40011E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 startScale;

	[Token(Token = "0x40011E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private bool animatingIn;

	[Token(Token = "0x40011E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float animationTime;

	[Token(Token = "0x6001111")]
	[Address(RVA = "0x9965A8", Offset = "0x9965A8", VA = "0x9965A8")]
	public void Setup()
	{
	}

	[Token(Token = "0x6001112")]
	[Address(RVA = "0x9966A8", Offset = "0x9966A8", VA = "0x9966A8")]
	public void SetPlayerColor(PlayerColor color)
	{
	}

	[Token(Token = "0x6001113")]
	[Address(RVA = "0x996778", Offset = "0x996778", VA = "0x996778")]
	public void Show()
	{
	}

	[Token(Token = "0x6001114")]
	[Address(RVA = "0x9967D0", Offset = "0x9967D0", VA = "0x9967D0")]
	public void Hide()
	{
	}

	[Token(Token = "0x6001115")]
	[Address(RVA = "0x996860", Offset = "0x996860", VA = "0x996860")]
	public void ShowWithDelay(float delay)
	{
	}

	[Token(Token = "0x6001116")]
	[Address(RVA = "0x9969F4", Offset = "0x9969F4", VA = "0x9969F4")]
	public MapProgressMarker()
	{
	}
}
[Token(Token = "0x2000290")]
public class MapRoad : SingleInstanceNetworkedBehavior<MapRoad>
{
	[Token(Token = "0x40011E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private MapProgressMarker[] roadProgessMarkers;

	[Token(Token = "0x40011E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float roadFillTime;

	[Token(Token = "0x40011E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject[] meepleReferences;

	[Token(Token = "0x40011E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool setupComplete;

	[Token(Token = "0x40011E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Dictionary<PlayerColor, GameObject> playerMeeples;

	[Token(Token = "0x40011EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 meepleStartScale;

	[Token(Token = "0x40011EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private bool isAnimatingLocalMeeple;

	[Token(Token = "0x40011EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int localMeepleLastIndex;

	[Token(Token = "0x40011ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private PhotonCallbackManager photonCallbackManager;

	[Token(Token = "0x40011EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private MaterialPropertyBlock materialPropertyBlock;

	[Token(Token = "0x40011EF")]
	private const string propertyColor = "_Color";

	[Token(Token = "0x40011F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private CookingNetworkManager cookingNetworkManager;

	[Token(Token = "0x6001118")]
	[Address(RVA = "0x996A10", Offset = "0x996A10", VA = "0x996A10", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6001119")]
	[Address(RVA = "0x996A74", Offset = "0x996A74", VA = "0x996A74")]
	private void Setup()
	{
	}

	[Token(Token = "0x600111A")]
	[Address(RVA = "0x996D68", Offset = "0x996D68", VA = "0x996D68")]
	private void Start()
	{
	}

	[Token(Token = "0x600111B")]
	[Address(RVA = "0x99754C", Offset = "0x99754C", VA = "0x99754C")]
	private void OnPlayerPropertiesChanged(PhotonPlayer player, ExitGames.Client.Photon.Hashtable changedProps)
	{
	}

	[Token(Token = "0x600111C")]
	[Address(RVA = "0x99769C", Offset = "0x99769C", VA = "0x99769C")]
	private void OnLocalPlayerMoved(int spawnPointIndex)
	{
	}

	[Token(Token = "0x600111D")]
	[Address(RVA = "0x99770C", Offset = "0x99770C", VA = "0x99770C")]
	private void OnPlayerMoved(int playerID)
	{
	}

	[Token(Token = "0x600111E")]
	[Address(RVA = "0x997A80", Offset = "0x997A80", VA = "0x997A80")]
	public void OnPlayerDisconnectedAtPosition(int positionKey)
	{
	}

	[Token(Token = "0x600111F")]
	[Address(RVA = "0x9972D0", Offset = "0x9972D0", VA = "0x9972D0")]
	private void UpdatePlayerMeepleIfAvailable(ExitGames.Client.Photon.Hashtable playerProperties, int playerID)
	{
	}

	[Token(Token = "0x6001120")]
	[Address(RVA = "0x997B24", Offset = "0x997B24", VA = "0x997B24")]
	private void MoveMeepleToCup(int playerID, PlayerColor playerColor, int cupIndex)
	{
	}

	[Token(Token = "0x6001121")]
	[Address(RVA = "0x9971CC", Offset = "0x9971CC", VA = "0x9971CC")]
	private void UpdateRoadProgressMarkerColor(PlayerColor playerColor)
	{
	}

	[Token(Token = "0x6001122")]
	[Address(RVA = "0x997230", Offset = "0x997230", VA = "0x997230")]
	private void UpdateRoadProgress(bool[] beatenCups)
	{
	}

	[Token(Token = "0x6001123")]
	[Address(RVA = "0x995DA0", Offset = "0x995DA0", VA = "0x995DA0")]
	public void OnCupRankChangedLocally(int cupIndex, MapProgression.Rank newRank, MapProgression.Rank oldRank, bool isDebug)
	{
	}

	[Token(Token = "0x6001124")]
	[Address(RVA = "0x997D3C", Offset = "0x997D3C", VA = "0x997D3C")]
	public void PlayFillRoadAnimation(float startDelay, int latestUnlockedCup)
	{
	}

	[Token(Token = "0x6001125")]
	[Address(RVA = "0x998148", Offset = "0x998148", VA = "0x998148", Slot = "5")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x6001126")]
	[Address(RVA = "0x998330", Offset = "0x998330", VA = "0x998330")]
	public MapRoad()
	{
	}
}
[Token(Token = "0x2000292")]
public class MapVoteCounter : SingleInstanceNetworkedBehavior<MapVoteCounter>, IPunObservable
{
	[Token(Token = "0x2000293")]
	public enum VoteType
	{
		[Token(Token = "0x4001206")]
		None,
		[Token(Token = "0x4001207")]
		RoundReadyVote,
		[Token(Token = "0x4001208")]
		ConfirmSelectedEndless,
		[Token(Token = "0x4001209")]
		ConfirmTutorialMode,
		[Token(Token = "0x400120A")]
		RetryFailedCup,
		[Token(Token = "0x400120B")]
		ContinueCreativeMode
	}

	[Token(Token = "0x40011F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private SpriteRenderer[] playerIcons;

	[Token(Token = "0x40011F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float pulseSpeed;

	[Token(Token = "0x40011F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private Vector3 thumbsUpMaxScale;

	[Token(Token = "0x40011F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GameObject thumbsUpIcon;

	[Token(Token = "0x40011FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<int> playersWhoVoted;

	[Token(Token = "0x40011FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int voteID;

	[Token(Token = "0x40011FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Vector3 thumbsUpStartScale;

	[Token(Token = "0x40011FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private CookingGame cookingGame;

	[Token(Token = "0x4001200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private CookingCup cookingCup;

	[Token(Token = "0x4001201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private CookingRound cookingRound;

	[Token(Token = "0x4001202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private VotingHands votingHands;

	[Token(Token = "0x4001203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private CreativeMode creativeMode;

	[Token(Token = "0x4001204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private PhotonCallbackManager photonCallbackManager;

	[Token(Token = "0x17000212")]
	public bool CanVote
	{
		[Token(Token = "0x6001129")]
		[Address(RVA = "0x8435D0", Offset = "0x8435D0", VA = "0x8435D0")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600112A")]
		[Address(RVA = "0x8435D8", Offset = "0x8435D8", VA = "0x8435D8")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000213")]
	public VoteType CurrentVoteType
	{
		[Token(Token = "0x600112B")]
		[Address(RVA = "0x8435E4", Offset = "0x8435E4", VA = "0x8435E4")]
		[CompilerGenerated]
		get
		{
			return default(VoteType);
		}
		[Token(Token = "0x600112C")]
		[Address(RVA = "0x8435EC", Offset = "0x8435EC", VA = "0x8435EC")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000214")]
	public bool IHaveVoted
	{
		[Token(Token = "0x600112D")]
		[Address(RVA = "0x8435F4", Offset = "0x8435F4", VA = "0x8435F4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000215")]
	public bool CanVoteNo
	{
		[Token(Token = "0x600112E")]
		[Address(RVA = "0x8436B4", Offset = "0x8436B4", VA = "0x8436B4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600112F")]
	[Address(RVA = "0x84365C", Offset = "0x84365C", VA = "0x84365C")]
	public bool HavePlayerVoted(int playerId)
	{
		return default(bool);
	}

	[Token(Token = "0x6001130")]
	[Address(RVA = "0x8436DC", Offset = "0x8436DC", VA = "0x8436DC")]
	private void Start()
	{
	}

	[Token(Token = "0x6001131")]
	[Address(RVA = "0x843B68", Offset = "0x843B68", VA = "0x843B68")]
	private void Update()
	{
	}

	[Token(Token = "0x6001132")]
	[Address(RVA = "0x843C40", Offset = "0x843C40", VA = "0x843C40")]
	public void StartVote(VoteType voteType)
	{
	}

	[Token(Token = "0x6001133")]
	[Address(RVA = "0x843CB8", Offset = "0x843CB8", VA = "0x843CB8")]
	public void FinishVote()
	{
	}

	[Token(Token = "0x6001134")]
	[Address(RVA = "0x843B3C", Offset = "0x843B3C", VA = "0x843B3C")]
	private void OnCanVoteChanged(bool canVote)
	{
	}

	[Token(Token = "0x6001135")]
	[Address(RVA = "0x843D1C", Offset = "0x843D1C", VA = "0x843D1C")]
	public void Vote(bool pass)
	{
	}

	[Token(Token = "0x6001136")]
	[Address(RVA = "0x843F78", Offset = "0x843F78", VA = "0x843F78")]
	[PunRPC]
	private void PlayerVotedYesRPC(int playerID)
	{
	}

	[Token(Token = "0x6001137")]
	[Address(RVA = "0x844184", Offset = "0x844184", VA = "0x844184")]
	private void AllPlayersVoted()
	{
	}

	[Token(Token = "0x6001138")]
	[Address(RVA = "0x844288", Offset = "0x844288", VA = "0x844288")]
	[PunRPC]
	private void PlayerVotedNoRPC()
	{
	}

	[Token(Token = "0x6001139")]
	[Address(RVA = "0x844558", Offset = "0x844558", VA = "0x844558", Slot = "6")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x600113A")]
	[Address(RVA = "0x8449B4", Offset = "0x8449B4", VA = "0x8449B4")]
	private void OnPlayerDisconnected(PhotonPlayer otherPlayer)
	{
	}

	[Token(Token = "0x600113B")]
	[Address(RVA = "0x844AC8", Offset = "0x844AC8", VA = "0x844AC8", Slot = "5")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x600113C")]
	[Address(RVA = "0x844BC8", Offset = "0x844BC8", VA = "0x844BC8")]
	public MapVoteCounter()
	{
	}
}
[Token(Token = "0x2000294")]
public class RetryLevelTip : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x400120C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float showDelay;

	[Token(Token = "0x600113D")]
	[Address(RVA = "0x844C8C", Offset = "0x844C8C", VA = "0x844C8C")]
	private void Start()
	{
	}

	[Token(Token = "0x600113E")]
	[Address(RVA = "0x844CBC", Offset = "0x844CBC", VA = "0x844CBC")]
	public void DisplayRetryLevelTip()
	{
	}

	[Token(Token = "0x600113F")]
	[Address(RVA = "0x844F24", Offset = "0x844F24", VA = "0x844F24")]
	public void OnCupButtonPushed(int pushedButtonIndex)
	{
	}

	[Token(Token = "0x6001140")]
	[Address(RVA = "0x845060", Offset = "0x845060", VA = "0x845060")]
	public void OnReplayingLevel(int pushedButtonIndex)
	{
	}

	[Token(Token = "0x6001141")]
	[Address(RVA = "0x844F60", Offset = "0x844F60", VA = "0x844F60")]
	private bool GetIsBeatenButNotPerfectlyRanked(int cupIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x6001142")]
	[Address(RVA = "0x8451A0", Offset = "0x8451A0", VA = "0x8451A0")]
	public RetryLevelTip()
	{
	}
}
[Token(Token = "0x2000296")]
public class DisablePerPlatform : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x400120F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool DisableOnQuest;

	[Token(Token = "0x6001145")]
	[Address(RVA = "0x845330", Offset = "0x845330", VA = "0x845330")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001146")]
	[Address(RVA = "0x8453C0", Offset = "0x8453C0", VA = "0x8453C0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001147")]
	[Address(RVA = "0x845450", Offset = "0x845450", VA = "0x845450")]
	public DisablePerPlatform()
	{
	}
}
[Token(Token = "0x2000297")]
public class RoomNumpad : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x2000298")]
	private enum SubPage
	{
		[Token(Token = "0x400121F")]
		RoomCode,
		[Token(Token = "0x4001220")]
		Joining,
		[Token(Token = "0x4001221")]
		RoomNotFound
	}

	[Token(Token = "0x4001211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public PokeButton[] numberButtons;

	[Token(Token = "0x4001212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public PokeButton undoButton;

	[Token(Token = "0x4001213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TextMeshPro[] roomCodeNumbers;

	[Token(Token = "0x4001214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public PokeButton joinButton;

	[Token(Token = "0x4001215")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TextMeshPro descriptionText;

	[Token(Token = "0x4001216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject roomCodePage;

	[Token(Token = "0x4001217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject joiningPage;

	[Token(Token = "0x4001218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject roomNotFoundPage;

	[Token(Token = "0x4001219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public PokeButton backButton;

	[Token(Token = "0x400121A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Action joinGameAction;

	[Token(Token = "0x400121B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Material enabledButtonMaterial;

	[Token(Token = "0x400121C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Material disableButtonMaterial;

	[Token(Token = "0x400121D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Locale locale;

	[Token(Token = "0x17000216")]
	public string RoomCode
	{
		[Token(Token = "0x6001148")]
		[Address(RVA = "0x845458", Offset = "0x845458", VA = "0x845458")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001149")]
		[Address(RVA = "0x845460", Offset = "0x845460", VA = "0x845460")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x600114A")]
	[Address(RVA = "0x845468", Offset = "0x845468", VA = "0x845468")]
	private void Start()
	{
	}

	[Token(Token = "0x600114B")]
	[Address(RVA = "0x845668", Offset = "0x845668", VA = "0x845668")]
	private void ShowSubPage(SubPage subPage)
	{
	}

	[Token(Token = "0x600114C")]
	[Address(RVA = "0x8456CC", Offset = "0x8456CC", VA = "0x8456CC")]
	private void SetRoomCode(string code)
	{
	}

	[Token(Token = "0x600114D")]
	[Address(RVA = "0x845888", Offset = "0x845888", VA = "0x845888")]
	private void UpdateRoomCode(int digit)
	{
	}

	[Token(Token = "0x600114E")]
	[Address(RVA = "0x8458E4", Offset = "0x8458E4", VA = "0x8458E4")]
	private void UndoRoomCodeDigit()
	{
	}

	[Token(Token = "0x600114F")]
	[Address(RVA = "0x84579C", Offset = "0x84579C", VA = "0x84579C")]
	private void SetJoinButtonActive(bool isActive)
	{
	}

	[Token(Token = "0x6001150")]
	[Address(RVA = "0x845920", Offset = "0x845920", VA = "0x845920")]
	public void OnShowJoinByCode()
	{
	}

	[Token(Token = "0x6001151")]
	[Address(RVA = "0x845974", Offset = "0x845974", VA = "0x845974")]
	public void OnFailedToFindRoom()
	{
	}

	[Token(Token = "0x6001152")]
	[Address(RVA = "0x84597C", Offset = "0x84597C", VA = "0x84597C")]
	public RoomNumpad()
	{
	}
}
[Serializable]
[Token(Token = "0x200029A")]
[CreateAssetMenu(fileName = "NewAchievementRewardDataList", menuName = "Achievement Reward Data List")]
public class AchievementRewardDataList : ScriptableObject
{
	[Token(Token = "0x4001224")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int[] accumulatedStarRewardThreshold;

	[Token(Token = "0x4001225")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ItemRewardID[] accumulatedStarRewardIDs;

	[Token(Token = "0x4001226")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int[] accumulatedCoinRewardThreshold;

	[Token(Token = "0x4001227")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ItemRewardID[] accumulatedCoinRewardIDs;

	[Token(Token = "0x4001228")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public ItemRewardID[] fullyCompleteAreaRewards;

	[Token(Token = "0x4001229")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int[] cupClearMaxRankInMPLevelID;

	[Token(Token = "0x400122A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ItemRewardID[] cupClearMaxRankInMPRewardID;

	[Token(Token = "0x400122B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public int[] accumlatedCreativeRecipeThreshold;

	[Token(Token = "0x400122C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public ItemRewardID[] accumlatedCreativeRecipeRewardIDs;

	[Token(Token = "0x400122D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public int[] serveCountCreativeModeThreshold;

	[Token(Token = "0x400122E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public ItemRewardID[] serveCountCreativeModeRewardIDs;

	[Token(Token = "0x400122F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public AvatarCustomizationUnlockCondition[] platformAchievementUnlockCondition;

	[Token(Token = "0x4001230")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public ItemRewardID[] platformAchievementRewardIDs;

	[Token(Token = "0x6001157")]
	[Address(RVA = "0x8459E0", Offset = "0x8459E0", VA = "0x8459E0")]
	public AchievementRewardDataList()
	{
	}
}
[Token(Token = "0x200029B")]
public class AchievementRewardHandler : SingleInstanceBehavior<AchievementRewardHandler>
{
	[Token(Token = "0x200029C")]
	public struct AccumulationsRewards
	{
		[Token(Token = "0x400123D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int threshold;

		[Token(Token = "0x400123E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ItemRewardID reward;

		[Token(Token = "0x600116F")]
		[Address(RVA = "0x846060", Offset = "0x846060", VA = "0x846060")]
		public AccumulationsRewards(int threshold, ItemRewardID reward)
		{
		}
	}

	[Token(Token = "0x4001231")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<ItemRewardID> achievementUnlocks;

	[Token(Token = "0x4001232")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Dictionary<int, ItemRewardID> MaxRankInMPRewards;

	[Token(Token = "0x4001238")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private AchievementRewardDataList achievementRewardDataList;

	[Token(Token = "0x4001239")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int accumulatedStars;

	[Token(Token = "0x400123A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private int accumulatedCoins;

	[Token(Token = "0x400123B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private SaveManager saveManager;

	[Token(Token = "0x400123C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private RewardBubbleSpawner RewardBubbleSpawner;

	[Token(Token = "0x17000217")]
	public AccumulationsRewards[] AccumulatedStarRewardArray
	{
		[Token(Token = "0x6001158")]
		[Address(RVA = "0x845A38", Offset = "0x845A38", VA = "0x845A38")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001159")]
		[Address(RVA = "0x845A40", Offset = "0x845A40", VA = "0x845A40")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000218")]
	public AccumulationsRewards[] AccumulatedCoinRewardArray
	{
		[Token(Token = "0x600115A")]
		[Address(RVA = "0x845A48", Offset = "0x845A48", VA = "0x845A48")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600115B")]
		[Address(RVA = "0x845A50", Offset = "0x845A50", VA = "0x845A50")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000219")]
	public AccumulationsRewards[] AccumulatedCreativeRecipeRewardArray
	{
		[Token(Token = "0x600115C")]
		[Address(RVA = "0x845A58", Offset = "0x845A58", VA = "0x845A58")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600115D")]
		[Address(RVA = "0x845A60", Offset = "0x845A60", VA = "0x845A60")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700021A")]
	public AccumulationsRewards[] ServeCountCreativeModeRewardArray
	{
		[Token(Token = "0x600115E")]
		[Address(RVA = "0x845A68", Offset = "0x845A68", VA = "0x845A68")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600115F")]
		[Address(RVA = "0x845A70", Offset = "0x845A70", VA = "0x845A70")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700021B")]
	public ItemRewardID[] FullyCompleteAreaRewardArray
	{
		[Token(Token = "0x6001160")]
		[Address(RVA = "0x845A78", Offset = "0x845A78", VA = "0x845A78")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001161")]
		[Address(RVA = "0x845A80", Offset = "0x845A80", VA = "0x845A80")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6001162")]
	[Address(RVA = "0x845A88", Offset = "0x845A88", VA = "0x845A88", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6001163")]
	[Address(RVA = "0x846068", Offset = "0x846068", VA = "0x846068")]
	private void Start()
	{
	}

	[Token(Token = "0x6001164")]
	[Address(RVA = "0x846280", Offset = "0x846280", VA = "0x846280")]
	private void SpawnReward(ItemRewardID rewardID)
	{
	}

	[Token(Token = "0x6001165")]
	[Address(RVA = "0x846410", Offset = "0x846410", VA = "0x846410")]
	public void OnRoundComplete()
	{
	}

	[Token(Token = "0x6001166")]
	[Address(RVA = "0x8464B8", Offset = "0x8464B8", VA = "0x8464B8")]
	public void OnCupComplete(CupData cupData, int cupID)
	{
	}

	[Token(Token = "0x6001167")]
	[Address(RVA = "0x8461F4", Offset = "0x8461F4", VA = "0x8461F4")]
	private int GetTotalStars()
	{
		return default(int);
	}

	[Token(Token = "0x6001168")]
	[Address(RVA = "0x846414", Offset = "0x846414", VA = "0x846414")]
	private void SpawnNewlyUnlockedCoinRewards()
	{
	}

	[Token(Token = "0x6001169")]
	[Address(RVA = "0x8466B4", Offset = "0x8466B4", VA = "0x8466B4")]
	public bool CheckIfAreaIsFullyCleared(CupData.Environment environment)
	{
		return default(bool);
	}

	[Token(Token = "0x600116A")]
	[Address(RVA = "0x8468B0", Offset = "0x8468B0", VA = "0x8468B0")]
	public bool CheckIfUnlockedCupMaxRankInMPReward(int cupID)
	{
		return default(bool);
	}

	[Token(Token = "0x600116B")]
	[Address(RVA = "0x846BA8", Offset = "0x846BA8", VA = "0x846BA8")]
	public void SpawnCreativeRecipeCountRewards()
	{
	}

	[Token(Token = "0x600116C")]
	[Address(RVA = "0x846D54", Offset = "0x846D54", VA = "0x846D54")]
	public void SpawnCreativeModeServeCountRewards()
	{
	}

	[Token(Token = "0x600116D")]
	[Address(RVA = "0x846EC4", Offset = "0x846EC4", VA = "0x846EC4")]
	public void DebugWipeAllProgress()
	{
	}

	[Token(Token = "0x600116E")]
	[Address(RVA = "0x846ECC", Offset = "0x846ECC", VA = "0x846ECC")]
	public AchievementRewardHandler()
	{
	}
}
[Token(Token = "0x200029D")]
public class EndlessModeRewardBubble : NetworkedBehaviour
{
	[Token(Token = "0x400123F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform iconParent;

	[Token(Token = "0x4001240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ConsumableRegistry registry;

	[Token(Token = "0x4001241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private EndlessModeRewardSpawner endlessModeRewardSpawner;

	[Token(Token = "0x4001242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ConsumableSpawner consumableSpawner;

	[Token(Token = "0x4001243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private CookingNetworkManager networkManager;

	[Token(Token = "0x4001244")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private GameObject bubbleIcon;

	[Token(Token = "0x4001245")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private RewardBubbleVisuals bubbleVisuals;

	[Token(Token = "0x4001246")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private ConsumableType type;

	[Token(Token = "0x4001247")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public bool canPop;

	[Token(Token = "0x6001170")]
	[Address(RVA = "0x846FCC", Offset = "0x846FCC", VA = "0x846FCC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001171")]
	[Address(RVA = "0x847274", Offset = "0x847274", VA = "0x847274")]
	private void Start()
	{
	}

	[Token(Token = "0x6001172")]
	[Address(RVA = "0x847510", Offset = "0x847510", VA = "0x847510")]
	private void PopBubble(CookoutAvatarHand hand)
	{
	}

	[Token(Token = "0x6001173")]
	[Address(RVA = "0x84799C", Offset = "0x84799C", VA = "0x84799C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001174")]
	[Address(RVA = "0x847AFC", Offset = "0x847AFC", VA = "0x847AFC")]
	public EndlessModeRewardBubble()
	{
	}
}
[Token(Token = "0x200029E")]
public enum ItemRewardID
{
	[Token(Token = "0x4001249")]
	CleaverStandard = 0,
	[Token(Token = "0x400124A")]
	CleaverDamascus = 1,
	[Token(Token = "0x400124B")]
	CleaverDemon = 2,
	[Token(Token = "0x400124C")]
	CleaverBattleAxe = 3,
	[Token(Token = "0x400124D")]
	Cleaver03ChukaBocho = 4,
	[Token(Token = "0x400124E")]
	Cleaver04CeramicBlade = 5,
	[Token(Token = "0x400124F")]
	Cleaver05SabreCleaver = 6,
	[Token(Token = "0x4001250")]
	Cleaver06ElegantCleaver = 7,
	[Token(Token = "0x4001251")]
	Cleaver07ButchersKnife = 8,
	[Token(Token = "0x4001252")]
	Cleaver08BambooKnife = 9,
	[Token(Token = "0x4001253")]
	Cleaver15CurvedCleaver = 10,
	[Token(Token = "0x4001254")]
	Cleaver19SharpBlade = 11,
	[Token(Token = "0x4001255")]
	Cleaver09SleekCleaver = 12,
	[Token(Token = "0x4001256")]
	Cleaver11ChefsKnife = 13,
	[Token(Token = "0x4001257")]
	Cleaver17IvoryCleaver = 14,
	[Token(Token = "0x4001258")]
	Cleaver23CrystalCleaver = 15,
	[Token(Token = "0x4001259")]
	Cleaver25Katana = 16,
	[Token(Token = "0x400125A")]
	Cleaver10StainlessCleaver = 17,
	[Token(Token = "0x400125B")]
	Cleaver12RoundedCleaver = 18,
	[Token(Token = "0x400125C")]
	Cleaver13DebaKnife = 19,
	[Token(Token = "0x400125D")]
	Cleaver18SleekDamascus = 20,
	[Token(Token = "0x400125E")]
	Cleaver14SlimKnife = 21,
	[Token(Token = "0x400125F")]
	Cleaver16StraightEdge = 22,
	[Token(Token = "0x4001260")]
	Cleaver20OldReliable = 23,
	[Token(Token = "0x4001261")]
	Cleaver21AncientButcher = 24,
	[Token(Token = "0x4001262")]
	Cleaver22MysticSword = 25,
	[Token(Token = "0x4001263")]
	Cleaver24Mjolnir = 26,
	[Token(Token = "0x4001264")]
	Cleaver26ElvenBlade = 27,
	[Token(Token = "0x4001265")]
	Cleaver27StoneAgeAxe = 28,
	[Token(Token = "0x4001266")]
	Cleaver28LeekKnife = 29,
	[Token(Token = "0x4001267")]
	Cleaver29BlackSmithsKnife = 30,
	[Token(Token = "0x4001268")]
	Cleaver30OrcHakker = 31,
	[Token(Token = "0x4001269")]
	Cleaver31CarrotCleaver = 32,
	[Token(Token = "0x400126A")]
	Cleaver32MyFirstCleaver = 33,
	[Token(Token = "0x400126B")]
	Cleaver33RoyalCleaver = 34,
	[Token(Token = "0x400126C")]
	Cleaver34CandyCaneCleaver = 35,
	[Token(Token = "0x400126D")]
	Cleaver35PocketKnife = 36,
	[Token(Token = "0x400126E")]
	Cleaver36ButterKnife = 37,
	[Token(Token = "0x400126F")]
	Cleaver37DiyAxe = 38,
	[Token(Token = "0x4001270")]
	Cleaver38DiyHammer = 39,
	[Token(Token = "0x4001271")]
	Cleaver39VikingAxe = 40,
	[Token(Token = "0x4001272")]
	Cleaver40DiySaw = 41,
	[Token(Token = "0x4001273")]
	Cleaver41CutesyCleaver = 42,
	[Token(Token = "0x4001274")]
	Cleaver42HeavyMetalAxe = 43,
	[Token(Token = "0x4001275")]
	Cleaver43GoldenCleaver = 44,
	[Token(Token = "0x4001276")]
	FridgeStandard = 1000,
	[Token(Token = "0x4001277")]
	FridgeCopper = 1001,
	[Token(Token = "0x4001278")]
	FridgeSilver = 1002,
	[Token(Token = "0x4001279")]
	FridgeGold = 1003,
	[Token(Token = "0x400127A")]
	FridgeFullmoon = 1004,
	[Token(Token = "0x400127B")]
	FridgeDessert = 1005,
	[Token(Token = "0x400127C")]
	FridgeCute = 1006,
	[Token(Token = "0x400127D")]
	FridgeFrozen = 1007,
	[Token(Token = "0x400127E")]
	FridgeFineChina = 1008,
	[Token(Token = "0x400127F")]
	FridgeHoliday = 1009,
	[Token(Token = "0x4001280")]
	FridgeCow = 1010,
	[Token(Token = "0x4001281")]
	FridgeFlames = 1011,
	[Token(Token = "0x4001282")]
	FridgeBlackMarble = 1012,
	[Token(Token = "0x4001283")]
	FridgeWhiteMarble = 1013,
	[Token(Token = "0x4001284")]
	FridgeStainlessSteel = 1014,
	[Token(Token = "0x4001285")]
	CuttingBoardStandard = 2000,
	[Token(Token = "0x4001286")]
	CuttingBoardCopper = 2001,
	[Token(Token = "0x4001287")]
	CuttingBoardSilver = 2002,
	[Token(Token = "0x4001288")]
	CuttingBoard02Novelty = 2003,
	[Token(Token = "0x4001289")]
	CuttingBoard03Ash = 2004,
	[Token(Token = "0x400128A")]
	CuttingBoard04Checkered = 2005,
	[Token(Token = "0x400128B")]
	CuttingBoard05Herringbone = 2006,
	[Token(Token = "0x400128C")]
	CuttingBoard06Striped = 2007,
	[Token(Token = "0x400128D")]
	CuttingBoard07Gradient = 2008,
	[Token(Token = "0x400128E")]
	CuttingBoard08Wavy = 2009,
	[Token(Token = "0x400128F")]
	CuttingBoard09BlueRiver = 2010,
	[Token(Token = "0x4001290")]
	CuttingBoard10Opal = 2011,
	[Token(Token = "0x4001291")]
	CuttingBoard11Holiday = 2012,
	[Token(Token = "0x4001292")]
	CuttingBoard12Hexagon = 2013,
	[Token(Token = "0x4001293")]
	CuttingBoard13MarbleBlack = 2014,
	[Token(Token = "0x4001294")]
	CuttingBoard14MarbleWhite = 2015,
	[Token(Token = "0x4001295")]
	CuttingBoard15RetroBrand = 2016
}
[Token(Token = "0x200029F")]
public enum RewardType
{
	[Token(Token = "0x4001297")]
	Cleaver,
	[Token(Token = "0x4001298")]
	Fridge,
	[Token(Token = "0x4001299")]
	CuttingBoard
}
[Token(Token = "0x20002A0")]
public class ItemRewardsRegistry : SingleInstanceBehavior<ItemRewardsRegistry>
{
	[Token(Token = "0x400129A")]
	public const int itemsPerCategory = 1000;

	[Token(Token = "0x400129C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<ItemRewardID, RewardItem> rewardDictionary;

	[Token(Token = "0x400129D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Dictionary<ItemRewardID, string> rewardUnlockTexts;

	[Token(Token = "0x400129E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<ItemRewardID, string> rewardUnlockTextsBubble;

	[Token(Token = "0x400129F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private CupList cupList;

	[Token(Token = "0x40012A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private EndlessRewardList endlessRewardList;

	[Token(Token = "0x40012A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private AchievementRewardDataList achievementRewardDataList;

	[Token(Token = "0x40012A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Cleaver[] cleavers;

	[Token(Token = "0x40012A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private CleaverList cleaverList;

	[Token(Token = "0x40012A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Fridge[] fridges;

	[Token(Token = "0x40012A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private FridgeList fridgeList;

	[Token(Token = "0x40012A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private CuttingBoard[] cuttingBoards;

	[Token(Token = "0x40012A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private CuttingBoardList cuttingBoardList;

	[Token(Token = "0x40012A8")]
	private const string unlockByEndlessModeString = "inv_unlock_condition_1";

	[Token(Token = "0x40012A9")]
	private const string unlockByProgressionSingularString = "inv_unlock_condition_2";

	[Token(Token = "0x40012AA")]
	private const string unlockByProgressionPluralString = "inv_unlock_condition_3";

	[Token(Token = "0x40012AB")]
	private const string unlockByAccumulateStarsString = "inv_unlock_condition_5";

	[Token(Token = "0x40012AC")]
	private const string unlockByAccumulateCoinsString = "inv_unlock_condition_6";

	[Token(Token = "0x40012AD")]
	private const string unlockByMaxRankInMPString = "inv_unlock_condition_8";

	[Token(Token = "0x40012AE")]
	private const string fullyCompleteAreaBaseString = "inv_unlock_condition_";

	[Token(Token = "0x40012AF")]
	private const string unlockByEndlessModeBubbleString = "inv_unlock_condition_bubble_1";

	[Token(Token = "0x40012B0")]
	private const string unlockByProgressionSingularBubbleString = "inv_unlock_condition_bubble_2";

	[Token(Token = "0x40012B1")]
	private const string unlockByProgressionPluralBubbleString = "inv_unlock_condition_bubble_3";

	[Token(Token = "0x40012B2")]
	private const string unlockByAccumulateStarsBubbleString = "inv_unlock_condition_bubble_5";

	[Token(Token = "0x40012B3")]
	private const string unlockByAccumulateCoinsBubbleString = "inv_unlock_condition_bubble_6";

	[Token(Token = "0x40012B4")]
	private const string unlockByMaxRankInMPBubbleString = "inv_unlock_condition_bubble_8";

	[Token(Token = "0x40012B5")]
	private const string fullyCompleteAreaBaseBubbleString = "inv_unlock_condition_bubble_";

	[Token(Token = "0x40012B6")]
	private const string unlockByAccumulatedCreativeRecipeString = "inv_unlock_condition_bubble_14";

	[Token(Token = "0x40012B7")]
	private const string unlockByCreativeModeServeCountString = "inv_unlock_condition_bubble_16";

	[Token(Token = "0x40012B8")]
	private const string unlockByPlatformAchievementString = "inv_unlock_condition_bubble_18";

	[Token(Token = "0x40012B9")]
	private const int fullyCompleteAreaStartIndex = 9;

	[Token(Token = "0x1700021C")]
	public int[] RewardTypeCount
	{
		[Token(Token = "0x6001175")]
		[Address(RVA = "0x847B04", Offset = "0x847B04", VA = "0x847B04")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001176")]
		[Address(RVA = "0x847B0C", Offset = "0x847B0C", VA = "0x847B0C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6001177")]
	[Address(RVA = "0x847B14", Offset = "0x847B14", VA = "0x847B14", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6001178")]
	[Address(RVA = "0x849250", Offset = "0x849250", VA = "0x849250")]
	private void AddReward(ItemRewardID rewardID, RewardItem data)
	{
	}

	[Token(Token = "0x6001179")]
	[Address(RVA = "0x849438", Offset = "0x849438", VA = "0x849438")]
	private void Start()
	{
	}

	[Token(Token = "0x600117A")]
	[Address(RVA = "0x849474", Offset = "0x849474", VA = "0x849474")]
	public static RewardType GetRewardType(ItemRewardID rewardID)
	{
		return default(RewardType);
	}

	[Token(Token = "0x600117B")]
	[Address(RVA = "0x8494EC", Offset = "0x8494EC", VA = "0x8494EC")]
	public RewardItem GetRewardData(ItemRewardID rewardID)
	{
		return null;
	}

	[Token(Token = "0x600117C")]
	[Address(RVA = "0x849244", Offset = "0x849244", VA = "0x849244")]
	public static int GetOffset(RewardType type)
	{
		return default(int);
	}

	[Token(Token = "0x600117D")]
	[Address(RVA = "0x848F6C", Offset = "0x848F6C", VA = "0x848F6C")]
	private void TryAddUnlockText(ItemRewardID reward, string unlockText)
	{
	}

	[Token(Token = "0x600117E")]
	[Address(RVA = "0x8490D8", Offset = "0x8490D8", VA = "0x8490D8")]
	private void TryAddUnlockTextBubble(ItemRewardID reward, string unlockTextBubble)
	{
	}

	[Token(Token = "0x600117F")]
	[Address(RVA = "0x849544", Offset = "0x849544", VA = "0x849544")]
	public int NumberOfRewardsOfType(RewardType type)
	{
		return default(int);
	}

	[Token(Token = "0x6001180")]
	[Address(RVA = "0x8495E4", Offset = "0x8495E4", VA = "0x8495E4")]
	public List<CleaverData> GetAllCleavers()
	{
		return null;
	}

	[Token(Token = "0x6001181")]
	[Address(RVA = "0x849600", Offset = "0x849600", VA = "0x849600")]
	public List<FridgeData> GetAllFridges()
	{
		return null;
	}

	[Token(Token = "0x6001182")]
	[Address(RVA = "0x84961C", Offset = "0x84961C", VA = "0x84961C")]
	public List<CuttingBoardData> GetAllCuttingBoards()
	{
		return null;
	}

	[Token(Token = "0x6001183")]
	[Address(RVA = "0x849638", Offset = "0x849638", VA = "0x849638")]
	public ItemRewardsRegistry()
	{
	}
}
[Token(Token = "0x20002A1")]
public class RewardBubble : NetworkedBehaviour, IPunObservable
{
	[Token(Token = "0x20002A2")]
	public enum BubbleType
	{
		[Token(Token = "0x40012D7")]
		Coins,
		[Token(Token = "0x40012D8")]
		Potion,
		[Token(Token = "0x40012D9")]
		Item
	}

	[Token(Token = "0x40012BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Action<RewardBubble> OnBubblePopped;

	[Token(Token = "0x40012BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TextMeshPro TextFeedback;

	[Token(Token = "0x40012BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform iconParent;

	[Token(Token = "0x40012BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GameObject[] coinIcons;

	[Token(Token = "0x40012BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private int largeCoinIconThreshold;

	[Token(Token = "0x40012BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private int mediumCoinIconThreshold;

	[Token(Token = "0x40012C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private float bubbleIconToButtonTime;

	[Token(Token = "0x40012C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private float bubbleIconFlyDelay;

	[Token(Token = "0x40012C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool canPop;

	[Token(Token = "0x40012C3")]
	private const float trailWidth = 0.22f;

	[Token(Token = "0x40012C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	private bool isPopped;

	[Token(Token = "0x40012C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private BubbleType bubbleType;

	[Token(Token = "0x40012C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int coinReward;

	[Token(Token = "0x40012C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private ConsumableType consumableReward;

	[Token(Token = "0x40012C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private ItemRewardID itemReward;

	[Token(Token = "0x40012C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private SaveManager saveManager;

	[Token(Token = "0x40012CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private RewardBubbleVisuals visuals;

	[Token(Token = "0x40012CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private ItemRewardsRegistry rewardsRegistry;

	[Token(Token = "0x40012CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private GameObject bubbleIcon;

	[Token(Token = "0x40012CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private GameObject bubbleIconTrailGO;

	[Token(Token = "0x40012CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private TrailRenderer bubbleIconTrail;

	[Token(Token = "0x40012CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private GameObject bubbleIconRoot;

	[Token(Token = "0x40012D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private ConsumableRegistry consumableRegistry;

	[Token(Token = "0x40012D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private MaterialPropertyBlock materialPropertyBlock;

	[Token(Token = "0x40012D2")]
	private const string propertyTextureIndex = "_TextureIndex";

	[Token(Token = "0x40012D3")]
	private const string localizationRewardCoins = "reward_coins";

	[Token(Token = "0x40012D4")]
	private const string tagPlayerHand = "PlayerHand";

	[Token(Token = "0x40012D5")]
	private const string tagGrabbable = "Grabbable";

	[Token(Token = "0x6001184")]
	[Address(RVA = "0x8496A4", Offset = "0x8496A4", VA = "0x8496A4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001185")]
	[Address(RVA = "0x849A1C", Offset = "0x849A1C", VA = "0x849A1C")]
	private void Start()
	{
	}

	[Token(Token = "0x6001186")]
	[Address(RVA = "0x84A4DC", Offset = "0x84A4DC", VA = "0x84A4DC")]
	public void PopBubble([Optional] CookoutAvatarHand hand)
	{
	}

	[Token(Token = "0x6001187")]
	[Address(RVA = "0x84B1AC", Offset = "0x84B1AC", VA = "0x84B1AC")]
	private void ScaleTrailWidth(float newWidth)
	{
	}

	[Token(Token = "0x6001188")]
	[Address(RVA = "0x84B1C8", Offset = "0x84B1C8", VA = "0x84B1C8")]
	private void FloatUpAndDestroy(float yPos)
	{
	}

	[Token(Token = "0x6001189")]
	[Address(RVA = "0x84B2B8", Offset = "0x84B2B8", VA = "0x84B2B8", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x600118A")]
	[Address(RVA = "0x84B458", Offset = "0x84B458", VA = "0x84B458")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600118B")]
	[Address(RVA = "0x84B59C", Offset = "0x84B59C", VA = "0x84B59C")]
	public RewardBubble()
	{
	}
}
[Token(Token = "0x20002A4")]
public class RewardBubbleSpawner : SingleInstanceNetworkedBehavior<RewardBubbleSpawner>, IPunObservable
{
	[Token(Token = "0x40012DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public int allPlayersBubbleCount;

	[Token(Token = "0x40012DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Vector3[] rewardBubbleSpawnPosition;

	[Token(Token = "0x40012DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float coinBubbleMinSize;

	[Token(Token = "0x40012DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float coinBubbleMaxSize;

	[Token(Token = "0x40012E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private int coinBubbleMaxSizeCoinVal;

	[Token(Token = "0x40012E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private float consumableBubbleScale;

	[Token(Token = "0x40012E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float itemRewardBubbleScale;

	[Token(Token = "0x40012E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private float minYSpeed;

	[Token(Token = "0x40012E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private float maxYSpeed;

	[Token(Token = "0x40012E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private float minXSpeed;

	[Token(Token = "0x40012E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private float maxXSpeed;

	[Token(Token = "0x40012E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	private float minZSpeed;

	[Token(Token = "0x40012E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private float maxZSpeed;

	[Token(Token = "0x40012E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SerializeField]
	private float minZOffset;

	[Token(Token = "0x40012EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private float maxZOffset;

	[Token(Token = "0x40012EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	private float maxTimeSpeed;

	[Token(Token = "0x40012EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private float minTimeSpeed;

	[Token(Token = "0x40012ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private GameObject[] bubblePrefabs;

	[Token(Token = "0x40012EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Vector3 bubbleOffset;

	[Token(Token = "0x40012EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private List<RewardBubble> spawnedOwnedBubbles;

	[Token(Token = "0x40012F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private CookingCup cookingCup;

	[Token(Token = "0x40012F1")]
	private const float tau = (float)Math.PI * 2f;

	[Token(Token = "0x1700021D")]
	public bool HasActiveRewardBubbles
	{
		[Token(Token = "0x6001191")]
		[Address(RVA = "0x84BC10", Offset = "0x84BC10", VA = "0x84BC10")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700021E")]
	private int GetRandomDirection
	{
		[Token(Token = "0x6001192")]
		[Address(RVA = "0x84BC60", Offset = "0x84BC60", VA = "0x84BC60")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x6001193")]
	[Address(RVA = "0x84BC84", Offset = "0x84BC84", VA = "0x84BC84")]
	private void Start()
	{
	}

	[Token(Token = "0x6001194")]
	[Address(RVA = "0x84BD6C", Offset = "0x84BD6C", VA = "0x84BD6C")]
	public void SpawnCoinBubble(int coins, bool localPlayerOnly = false)
	{
	}

	[Token(Token = "0x6001195")]
	[Address(RVA = "0x84C760", Offset = "0x84C760", VA = "0x84C760")]
	public void SpawnConsumableBubble(ConsumableType type, bool localPlayerOnly = false)
	{
	}

	[Token(Token = "0x6001196")]
	[Address(RVA = "0x84629C", Offset = "0x84629C", VA = "0x84629C")]
	public void SpawnItemBubble(ItemRewardID item, bool localPlayerOnly = false)
	{
	}

	[Token(Token = "0x6001197")]
	[Address(RVA = "0x84BF38", Offset = "0x84BF38", VA = "0x84BF38")]
	[PunRPC]
	private void SpawnRewardBubblesRPC(int bubbleType, int payload)
	{
	}

	[Token(Token = "0x6001198")]
	[Address(RVA = "0x84C950", Offset = "0x84C950", VA = "0x84C950")]
	private void OnBubblePopped(RewardBubble poppedBubble)
	{
	}

	[Token(Token = "0x6001199")]
	[Address(RVA = "0x84CB58", Offset = "0x84CB58", VA = "0x84CB58")]
	[PunRPC]
	private void ClearRewardBubbleRPC()
	{
	}

	[Token(Token = "0x600119A")]
	[Address(RVA = "0x84CC78", Offset = "0x84CC78", VA = "0x84CC78")]
	[PunRPC]
	private void DecreaseRewardBubblesCountRPC()
	{
	}

	[Token(Token = "0x600119B")]
	[Address(RVA = "0x84CC88", Offset = "0x84CC88", VA = "0x84CC88")]
	[PunRPC]
	private void CheckForMidCupAchievementBubblesRPC()
	{
	}

	[Token(Token = "0x600119C")]
	[Address(RVA = "0x84CD50", Offset = "0x84CD50", VA = "0x84CD50", Slot = "6")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x600119D")]
	[Address(RVA = "0x84CE0C", Offset = "0x84CE0C", VA = "0x84CE0C")]
	public RewardBubbleSpawner()
	{
	}
}
[Token(Token = "0x20002A6")]
public class RewardBubbleVisuals : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40012F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float sizeVariation;

	[Token(Token = "0x40012F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private Color particleColor;

	[Token(Token = "0x40012F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform popParticlesAnchor;

	[Token(Token = "0x40012FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Material questMaterial;

	[Token(Token = "0x40012FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private ParticleSystem smallBubbleParticles;

	[Token(Token = "0x40012FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool isEndlessModeBubble;

	[Token(Token = "0x40012FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector3 targetScale;

	[Token(Token = "0x40012FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float timeOffset;

	[Token(Token = "0x40012FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float scaleTimeOffset;

	[Token(Token = "0x4001300")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float timeSpeed;

	[Token(Token = "0x4001301")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private Vector3 speeds;

	[Token(Token = "0x4001302")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool isPopped;

	[Token(Token = "0x4001303")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Vector3 originPos;

	[Token(Token = "0x4001304")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool spawnAnimationDone;

	[Token(Token = "0x4001305")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private MeshRenderer bubbleRenderer;

	[Token(Token = "0x4001306")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Transform myTransform;

	[Token(Token = "0x17000221")]
	public bool IsPopped
	{
		[Token(Token = "0x60011A6")]
		[Address(RVA = "0x84D0E8", Offset = "0x84D0E8", VA = "0x84D0E8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60011A5")]
		[Address(RVA = "0x847834", Offset = "0x847834", VA = "0x847834")]
		set
		{
		}
	}

	[Token(Token = "0x60011A7")]
	[Address(RVA = "0x84D0F0", Offset = "0x84D0F0", VA = "0x84D0F0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60011A8")]
	[Address(RVA = "0x84D1B0", Offset = "0x84D1B0", VA = "0x84D1B0")]
	private void Start()
	{
	}

	[Token(Token = "0x60011A9")]
	[Address(RVA = "0x84999C", Offset = "0x84999C", VA = "0x84999C")]
	public void Init(Vector3 targetScale, float timeOffset, Vector3 speeds, Vector3 posOffset, float timeSpeed)
	{
	}

	[Token(Token = "0x60011AA")]
	[Address(RVA = "0x84D3F0", Offset = "0x84D3F0", VA = "0x84D3F0")]
	private void Update()
	{
	}

	[Token(Token = "0x60011AB")]
	[Address(RVA = "0x84D4E8", Offset = "0x84D4E8", VA = "0x84D4E8")]
	public RewardBubbleVisuals()
	{
	}
}
[Token(Token = "0x20002A7")]
public abstract class RewardItem : ScriptableObject
{
	[Token(Token = "0x4001307")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public ItemRewardID id;

	[Token(Token = "0x4001308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string stringID;

	[Token(Token = "0x4001309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Sprite icon;

	[Token(Token = "0x400130A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject bubbleIcon;

	[Token(Token = "0x400130B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int inventorySortingNumber;

	[Token(Token = "0x17000222")]
	public string Name
	{
		[Token(Token = "0x60011AD")]
		[Address(RVA = "0x84B154", Offset = "0x84B154", VA = "0x84B154")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000223")]
	public string Description
	{
		[Token(Token = "0x60011AE")]
		[Address(RVA = "0x84D5F8", Offset = "0x84D5F8", VA = "0x84D5F8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000224")]
	public string UnlockInstruction
	{
		[Token(Token = "0x60011AF")]
		[Address(RVA = "0x84D688", Offset = "0x84D688", VA = "0x84D688")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60011B0")]
		[Address(RVA = "0x84D690", Offset = "0x84D690", VA = "0x84D690")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000225")]
	public string UnlockInstructionBubble
	{
		[Token(Token = "0x60011B1")]
		[Address(RVA = "0x84D698", Offset = "0x84D698", VA = "0x84D698")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60011B2")]
		[Address(RVA = "0x84D6A0", Offset = "0x84D6A0", VA = "0x84D6A0")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60011B3")]
	[Address(RVA = "0x84D6A8", Offset = "0x84D6A8", VA = "0x84D6A8")]
	protected RewardItem()
	{
	}
}
[Token(Token = "0x20002A8")]
public class UnlockCheckOnLoad : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x20002A9")]
	[CompilerGenerated]
	private sealed class <Start>d__0 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400130E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400130F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x17000226")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60011BA")]
			[Address(RVA = "0x84DF74", Offset = "0x84DF74", VA = "0x84DF74", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000227")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60011BC")]
			[Address(RVA = "0x84DFBC", Offset = "0x84DFBC", VA = "0x84DFBC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011B7")]
		[Address(RVA = "0x84D710", Offset = "0x84D710", VA = "0x84D710")]
		[DebuggerHidden]
		public <Start>d__0(int <>1__state)
		{
		}

		[Token(Token = "0x60011B8")]
		[Address(RVA = "0x84DF30", Offset = "0x84DF30", VA = "0x84DF30", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60011B9")]
		[Address(RVA = "0x84DF34", Offset = "0x84DF34", VA = "0x84DF34", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60011BB")]
		[Address(RVA = "0x84DF7C", Offset = "0x84DF7C", VA = "0x84DF7C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x60011B4")]
	[Address(RVA = "0x84D6B0", Offset = "0x84D6B0", VA = "0x84D6B0")]
	[IteratorStateMachine(typeof(<Start>d__0))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60011B5")]
	[Address(RVA = "0x84D738", Offset = "0x84D738", VA = "0x84D738")]
	public static void RefreshUnlocks()
	{
	}

	[Token(Token = "0x60011B6")]
	[Address(RVA = "0x84DF28", Offset = "0x84DF28", VA = "0x84DF28")]
	public UnlockCheckOnLoad()
	{
	}
}
[Token(Token = "0x20002AA")]
public class SaveManager : SingleInstanceBehavior<SaveManager>
{
	[Token(Token = "0x20002AB")]
	public delegate void CoinCountChangedHandler();

	[Token(Token = "0x20002AC")]
	public delegate void ConsumableCountChangedHandler(ConsumableType type, int count);

	[Token(Token = "0x20002AD")]
	public delegate void ConsumableUnlockedHandler(ConsumableType type, bool isUnlocked);

	[Token(Token = "0x20002AE")]
	public delegate void AutoHoldChanged(bool isActive);

	[Token(Token = "0x20002AF")]
	[CompilerGenerated]
	private sealed class <Start>d__83 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400131C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400131D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400131E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SaveManager <>4__this;

		[Token(Token = "0x17000244")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001252")]
			[Address(RVA = "0x854490", Offset = "0x854490", VA = "0x854490", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000245")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001254")]
			[Address(RVA = "0x8544D8", Offset = "0x8544D8", VA = "0x8544D8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600124F")]
		[Address(RVA = "0x84E848", Offset = "0x84E848", VA = "0x84E848")]
		[DebuggerHidden]
		public <Start>d__83(int <>1__state)
		{
		}

		[Token(Token = "0x6001250")]
		[Address(RVA = "0x853C80", Offset = "0x853C80", VA = "0x853C80", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001251")]
		[Address(RVA = "0x853C84", Offset = "0x853C84", VA = "0x853C84", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001253")]
		[Address(RVA = "0x854498", Offset = "0x854498", VA = "0x854498", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001310")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly List<int> defaultItems;

	[Token(Token = "0x4001311")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly int[] emptyLoadout;

	[Token(Token = "0x4001316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private CupList cupList;

	[Token(Token = "0x4001317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public bool initialLoadComplete;

	[Token(Token = "0x400131A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private cookout.loadsave.v4.SaveGameData savegame;

	[Token(Token = "0x400131B")]
	private const string unknownUserName = "UNKNOWN";

	[Token(Token = "0x17000228")]
	public int CoinCount
	{
		[Token(Token = "0x60011C5")]
		[Address(RVA = "0x84ADBC", Offset = "0x84ADBC", VA = "0x84ADBC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000229")]
	public int AccumulatedCoinCount
	{
		[Token(Token = "0x60011C6")]
		[Address(RVA = "0x846264", Offset = "0x846264", VA = "0x846264")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700022A")]
	public int[] ConsumableCount
	{
		[Token(Token = "0x60011C7")]
		[Address(RVA = "0x84AE80", Offset = "0x84AE80", VA = "0x84AE80")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700022B")]
	public bool[] ConsumablesUnlocked
	{
		[Token(Token = "0x60011C8")]
		[Address(RVA = "0x84DEF0", Offset = "0x84DEF0", VA = "0x84DEF0")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700022C")]
	public int EndlessModeHighScore
	{
		[Token(Token = "0x60011C9")]
		[Address(RVA = "0x84DF0C", Offset = "0x84DF0C", VA = "0x84DF0C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700022D")]
	public ItemRewardID CurrentCleaver
	{
		[Token(Token = "0x60011CA")]
		[Address(RVA = "0x84E4A4", Offset = "0x84E4A4", VA = "0x84E4A4")]
		get
		{
			return default(ItemRewardID);
		}
	}

	[Token(Token = "0x1700022E")]
	public ItemRewardID CurrentCuttingBoard
	{
		[Token(Token = "0x60011CB")]
		[Address(RVA = "0x84E4C0", Offset = "0x84E4C0", VA = "0x84E4C0")]
		get
		{
			return default(ItemRewardID);
		}
	}

	[Token(Token = "0x1700022F")]
	public ItemRewardID CurrentFridge
	{
		[Token(Token = "0x60011CC")]
		[Address(RVA = "0x84E4DC", Offset = "0x84E4DC", VA = "0x84E4DC")]
		get
		{
			return default(ItemRewardID);
		}
	}

	[Token(Token = "0x17000230")]
	public int[] StoredLoadout
	{
		[Token(Token = "0x60011CD")]
		[Address(RVA = "0x84E4F8", Offset = "0x84E4F8", VA = "0x84E4F8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000231")]
	public ReadOnlyCollection<CookoutUserId> BlockedPlayers
	{
		[Token(Token = "0x60011CE")]
		[Address(RVA = "0x84E54C", Offset = "0x84E54C", VA = "0x84E54C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60011CF")]
		[Address(RVA = "0x84E554", Offset = "0x84E554", VA = "0x84E554")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000232")]
	public bool HasRetriedALevel
	{
		[Token(Token = "0x60011D0")]
		[Address(RVA = "0x844EEC", Offset = "0x844EEC", VA = "0x844EEC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000233")]
	public bool HasSwitchedCreativeModeIngredients
	{
		[Token(Token = "0x60011D1")]
		[Address(RVA = "0x84E55C", Offset = "0x84E55C", VA = "0x84E55C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000234")]
	public bool HasTriedCreativeMode
	{
		[Token(Token = "0x60011D2")]
		[Address(RVA = "0x84E578", Offset = "0x84E578", VA = "0x84E578")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000235")]
	public IList<CupData> Cups
	{
		[Token(Token = "0x60011D3")]
		[Address(RVA = "0x84E594", Offset = "0x84E594", VA = "0x84E594")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000236")]
	public int UnlockedRecipeCount
	{
		[Token(Token = "0x60011D4")]
		[Address(RVA = "0x846CFC", Offset = "0x846CFC", VA = "0x846CFC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000237")]
	public int ServeCountCreativeMode
	{
		[Token(Token = "0x60011D5")]
		[Address(RVA = "0x846EA8", Offset = "0x846EA8", VA = "0x846EA8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000238")]
	public int RabbitsServed
	{
		[Token(Token = "0x60011D6")]
		[Address(RVA = "0x84E5B0", Offset = "0x84E5B0", VA = "0x84E5B0")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000239")]
	public int StolenIngredients
	{
		[Token(Token = "0x60011D7")]
		[Address(RVA = "0x84E5CC", Offset = "0x84E5CC", VA = "0x84E5CC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700023A")]
	public int DishesWashed
	{
		[Token(Token = "0x60011D8")]
		[Address(RVA = "0x84E5E8", Offset = "0x84E5E8", VA = "0x84E5E8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700023B")]
	public int GrilledIngredients
	{
		[Token(Token = "0x60011D9")]
		[Address(RVA = "0x84E604", Offset = "0x84E604", VA = "0x84E604")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700023C")]
	public int BotOvercharged
	{
		[Token(Token = "0x60011DA")]
		[Address(RVA = "0x84E620", Offset = "0x84E620", VA = "0x84E620")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700023D")]
	public int BurntIngredients
	{
		[Token(Token = "0x60011DB")]
		[Address(RVA = "0x84E63C", Offset = "0x84E63C", VA = "0x84E63C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700023E")]
	public int CoinsSpent
	{
		[Token(Token = "0x60011DC")]
		[Address(RVA = "0x84E658", Offset = "0x84E658", VA = "0x84E658")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700023F")]
	public int CustomersServed
	{
		[Token(Token = "0x60011DD")]
		[Address(RVA = "0x84E674", Offset = "0x84E674", VA = "0x84E674")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000240")]
	public bool[] UnlockedAchievements
	{
		[Token(Token = "0x60011DE")]
		[Address(RVA = "0x84E690", Offset = "0x84E690", VA = "0x84E690")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000241")]
	public bool NewAvatarOptionsAvailable
	{
		[Token(Token = "0x60011DF")]
		[Address(RVA = "0x84E6AC", Offset = "0x84E6AC", VA = "0x84E6AC")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000242")]
	public bool HasTriedOculusAvatar
	{
		[Token(Token = "0x60011E0")]
		[Address(RVA = "0x84E76C", Offset = "0x84E76C", VA = "0x84E76C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000243")]
	public ReadOnlyCollection<string> BlockedPlayerNames
	{
		[Token(Token = "0x60011E1")]
		[Address(RVA = "0x84E788", Offset = "0x84E788", VA = "0x84E788")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60011E2")]
		[Address(RVA = "0x84E790", Offset = "0x84E790", VA = "0x84E790")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x14000024")]
	public event CoinCountChangedHandler OnCoinCountChanged
	{
		[Token(Token = "0x60011BD")]
		[Address(RVA = "0x84DFC4", Offset = "0x84DFC4", VA = "0x84DFC4")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60011BE")]
		[Address(RVA = "0x84E060", Offset = "0x84E060", VA = "0x84E060")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000025")]
	public event ConsumableCountChangedHandler OnConsumableCountChanged
	{
		[Token(Token = "0x60011BF")]
		[Address(RVA = "0x84E0FC", Offset = "0x84E0FC", VA = "0x84E0FC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60011C0")]
		[Address(RVA = "0x84E198", Offset = "0x84E198", VA = "0x84E198")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000026")]
	public event ConsumableUnlockedHandler OnConsumableUnlocked
	{
		[Token(Token = "0x60011C1")]
		[Address(RVA = "0x84E234", Offset = "0x84E234", VA = "0x84E234")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60011C2")]
		[Address(RVA = "0x84E2D0", Offset = "0x84E2D0", VA = "0x84E2D0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000027")]
	public event AutoHoldChanged OnAutoHoldChanged
	{
		[Token(Token = "0x60011C3")]
		[Address(RVA = "0x84E36C", Offset = "0x84E36C", VA = "0x84E36C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60011C4")]
		[Address(RVA = "0x84E408", Offset = "0x84E408", VA = "0x84E408")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60011E3")]
	[Address(RVA = "0x84E798", Offset = "0x84E798", VA = "0x84E798", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x60011E4")]
	[Address(RVA = "0x84E7E0", Offset = "0x84E7E0", VA = "0x84E7E0")]
	[IteratorStateMachine(typeof(<Start>d__83))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60011E5")]
	[Address(RVA = "0x84E870", Offset = "0x84E870", VA = "0x84E870")]
	private void LoadBeatenCups()
	{
	}

	[Token(Token = "0x60011E6")]
	[Address(RVA = "0x84ECEC", Offset = "0x84ECEC", VA = "0x84ECEC")]
	public bool GetHasBeatenCups()
	{
		return default(bool);
	}

	[Token(Token = "0x60011E7")]
	[Address(RVA = "0x844F08", Offset = "0x844F08", VA = "0x844F08")]
	public MapProgression.Rank[] GetBeatenCups()
	{
		return null;
	}

	[Token(Token = "0x60011E8")]
	[Address(RVA = "0x84ED40", Offset = "0x84ED40", VA = "0x84ED40")]
	public void UpdateCupsBeatenStatus(MapProgression.Rank cupBeaten, int cupID)
	{
	}

	[Token(Token = "0x60011E9")]
	[Address(RVA = "0x84F0C4", Offset = "0x84F0C4", VA = "0x84F0C4")]
	public int[] GetCupStarCounts()
	{
		return null;
	}

	[Token(Token = "0x60011EA")]
	[Address(RVA = "0x84F388", Offset = "0x84F388", VA = "0x84F388")]
	public void SaveCupStarCount(int cupIndex, int starCount)
	{
	}

	[Token(Token = "0x60011EB")]
	[Address(RVA = "0x8469DC", Offset = "0x8469DC", VA = "0x8469DC")]
	public bool[] GetCupMaxRankedInMP()
	{
		return null;
	}

	[Token(Token = "0x60011EC")]
	[Address(RVA = "0x84F3C0", Offset = "0x84F3C0", VA = "0x84F3C0")]
	public void SaveCupMaxRankedInMP(int cupIndex, bool completed)
	{
	}

	[Token(Token = "0x60011ED")]
	[Address(RVA = "0x84ADD8", Offset = "0x84ADD8", VA = "0x84ADD8")]
	public void SaveCoinCount(int newCoinsValue, int coinsEarned = 0)
	{
	}

	[Token(Token = "0x60011EE")]
	[Address(RVA = "0x84F3FC", Offset = "0x84F3FC", VA = "0x84F3FC")]
	private void LoadConsumables()
	{
	}

	[Token(Token = "0x60011EF")]
	[Address(RVA = "0x84FA34", Offset = "0x84FA34", VA = "0x84FA34")]
	public void SaveConsumableCount(ConsumableType consumableType, int count)
	{
	}

	[Token(Token = "0x60011F0")]
	[Address(RVA = "0x84FAAC", Offset = "0x84FAAC", VA = "0x84FAAC")]
	public void SaveEndlessModeHighScore(int newHighscore)
	{
	}

	[Token(Token = "0x60011F1")]
	[Address(RVA = "0x846654", Offset = "0x846654", VA = "0x846654")]
	public bool GetItemUnlocked(ItemRewardID item)
	{
		return default(bool);
	}

	[Token(Token = "0x60011F2")]
	[Address(RVA = "0x84AE9C", Offset = "0x84AE9C", VA = "0x84AE9C")]
	public void SetUnlockItem(ItemRewardID item, bool unlocked)
	{
	}

	[Token(Token = "0x60011F3")]
	[Address(RVA = "0x84FAC8", Offset = "0x84FAC8", VA = "0x84FAC8")]
	private void LoadUnlockedItems()
	{
	}

	[Token(Token = "0x60011F4")]
	[Address(RVA = "0x84FEB0", Offset = "0x84FEB0", VA = "0x84FEB0")]
	public void SaveEquippedCleaver(ItemRewardID cleaver)
	{
	}

	[Token(Token = "0x60011F5")]
	[Address(RVA = "0x84FECC", Offset = "0x84FECC", VA = "0x84FECC")]
	public void SaveEquippedCuttingBoard(ItemRewardID cuttingBoard)
	{
	}

	[Token(Token = "0x60011F6")]
	[Address(RVA = "0x84FEE8", Offset = "0x84FEE8", VA = "0x84FEE8")]
	public void SaveEquippedFridge(ItemRewardID fridge)
	{
	}

	[Token(Token = "0x60011F7")]
	[Address(RVA = "0x84AE20", Offset = "0x84AE20", VA = "0x84AE20")]
	public void SetConsumableUnlocked(bool isUnlocked, ConsumableType type)
	{
	}

	[Token(Token = "0x60011F8")]
	[Address(RVA = "0x84FF04", Offset = "0x84FF04", VA = "0x84FF04")]
	public void OnApplicationPause(bool pause)
	{
	}

	[Token(Token = "0x60011F9")]
	[Address(RVA = "0x84FF80", Offset = "0x84FF80", VA = "0x84FF80")]
	public void StorePlayerPotionLoadout(int[] loadoutPotions)
	{
	}

	[Token(Token = "0x60011FA")]
	[Address(RVA = "0x84FFF0", Offset = "0x84FFF0", VA = "0x84FFF0")]
	public void AddBlockedPlayer(CookoutUserData oculusUserData)
	{
	}

	[Token(Token = "0x60011FB")]
	[Address(RVA = "0x850128", Offset = "0x850128", VA = "0x850128")]
	public void RemoveBlockedPlayer(CookoutUserId oculusUserID)
	{
	}

	[Token(Token = "0x60011FC")]
	[Address(RVA = "0x850214", Offset = "0x850214", VA = "0x850214")]
	public void EditBlockedPlayerName(CookoutUserId oculusUserID, string newName)
	{
	}

	[Token(Token = "0x60011FD")]
	[Address(RVA = "0x8502D4", Offset = "0x8502D4", VA = "0x8502D4")]
	public bool PlayerPrefersLeftHand()
	{
		return default(bool);
	}

	[Token(Token = "0x60011FE")]
	[Address(RVA = "0x8502F0", Offset = "0x8502F0", VA = "0x8502F0")]
	public void SetPlayerHandedness(CookoutHandedness handedness)
	{
	}

	[Token(Token = "0x60011FF")]
	[Address(RVA = "0x850314", Offset = "0x850314", VA = "0x850314")]
	public bool AutoHoldIsActive()
	{
		return default(bool);
	}

	[Token(Token = "0x6001200")]
	[Address(RVA = "0x850330", Offset = "0x850330", VA = "0x850330")]
	public void ToggleAutoHold()
	{
	}

	[Token(Token = "0x6001201")]
	[Address(RVA = "0x845180", Offset = "0x845180", VA = "0x845180")]
	public void OnRetriedALevel()
	{
	}

	[Token(Token = "0x6001202")]
	[Address(RVA = "0x850378", Offset = "0x850378", VA = "0x850378")]
	public void OnSwitchCreativeModeIngredients()
	{
	}

	[Token(Token = "0x6001203")]
	[Address(RVA = "0x850398", Offset = "0x850398", VA = "0x850398")]
	public void OnPlayedCreativeMode()
	{
	}

	[Token(Token = "0x6001204")]
	[Address(RVA = "0x8503B8", Offset = "0x8503B8", VA = "0x8503B8")]
	public void OnApplicationQuit()
	{
	}

	[Token(Token = "0x6001205")]
	[Address(RVA = "0x85042C", Offset = "0x85042C", VA = "0x85042C", Slot = "5")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x6001206")]
	[Address(RVA = "0x85047C", Offset = "0x85047C", VA = "0x85047C")]
	public void DebugWipeAccumulatedCoinRecords()
	{
	}

	[Token(Token = "0x6001207")]
	[Address(RVA = "0x850498", Offset = "0x850498", VA = "0x850498")]
	public void DebugWipeAllMaxRankedInMP()
	{
	}

	[Token(Token = "0x6001208")]
	[Address(RVA = "0x8504E8", Offset = "0x8504E8", VA = "0x8504E8")]
	public void DebugWipeFlags()
	{
	}

	[Token(Token = "0x6001209")]
	[Address(RVA = "0x850510", Offset = "0x850510", VA = "0x850510")]
	public ReadOnlyCollection<string> GetUnlockedRecipes()
	{
		return null;
	}

	[Token(Token = "0x600120A")]
	[Address(RVA = "0x8505BC", Offset = "0x8505BC", VA = "0x8505BC")]
	public void AddUnlockedRecipes(string recipe)
	{
	}

	[Token(Token = "0x600120B")]
	[Address(RVA = "0x85076C", Offset = "0x85076C", VA = "0x85076C")]
	public void ClearUnlockedRecipes()
	{
	}

	[Token(Token = "0x600120C")]
	[Address(RVA = "0x850770", Offset = "0x850770", VA = "0x850770")]
	public List<CustomerType> GetUnlockedCreativeModeCustomers()
	{
		return null;
	}

	[Token(Token = "0x600120D")]
	[Address(RVA = "0x850800", Offset = "0x850800", VA = "0x850800")]
	public List<CustomerType> AddUnlockedCreativeModeCustomers(CustomerType customer)
	{
		return null;
	}

	[Token(Token = "0x600120E")]
	[Address(RVA = "0x85091C", Offset = "0x85091C", VA = "0x85091C")]
	public void OnCreativeModePlateServed()
	{
	}

	[Token(Token = "0x600120F")]
	[Address(RVA = "0x850940", Offset = "0x850940", VA = "0x850940")]
	public void DebugWipeCreativeModePlateServeCount()
	{
	}

	[Token(Token = "0x6001210")]
	[Address(RVA = "0x85095C", Offset = "0x85095C", VA = "0x85095C")]
	public int GetSelectedOculusAvatar()
	{
		return default(int);
	}

	[Token(Token = "0x6001211")]
	[Address(RVA = "0x850978", Offset = "0x850978", VA = "0x850978")]
	public void SaveSelectedOculusAvatar(int oculusAvatarVisualType)
	{
	}

	[Token(Token = "0x6001212")]
	[Address(RVA = "0x85099C", Offset = "0x85099C", VA = "0x85099C")]
	public void SaveCookoutAvatarCustomization(CookoutAvatarVisualType avatarVisualType, AvatarHatType avatarHatType, AvatarBodyType avatarBodyType, int headMaterialIndex, AvatarHandMaterial handMaterial)
	{
	}

	[Token(Token = "0x6001213")]
	[Address(RVA = "0x8509D0", Offset = "0x8509D0", VA = "0x8509D0")]
	public void OnRabbitServed()
	{
	}

	[Token(Token = "0x6001214")]
	[Address(RVA = "0x8509F4", Offset = "0x8509F4", VA = "0x8509F4")]
	public void OnStolenIngredient()
	{
	}

	[Token(Token = "0x6001215")]
	[Address(RVA = "0x850A18", Offset = "0x850A18", VA = "0x850A18")]
	public void OnDishWashed()
	{
	}

	[Token(Token = "0x6001216")]
	[Address(RVA = "0x850A3C", Offset = "0x850A3C", VA = "0x850A3C")]
	public void OnGrilledIngredient()
	{
	}

	[Token(Token = "0x6001217")]
	[Address(RVA = "0x850A60", Offset = "0x850A60", VA = "0x850A60")]
	public void OnBurntIngredient()
	{
	}

	[Token(Token = "0x6001218")]
	[Address(RVA = "0x850A84", Offset = "0x850A84", VA = "0x850A84")]
	public void OnBotOvercharged()
	{
	}

	[Token(Token = "0x6001219")]
	[Address(RVA = "0x850AA8", Offset = "0x850AA8", VA = "0x850AA8")]
	public void OnCoinsSpent(int coins)
	{
	}

	[Token(Token = "0x600121A")]
	[Address(RVA = "0x850ACC", Offset = "0x850ACC", VA = "0x850ACC")]
	public void OnCustomerServed()
	{
	}

	[Token(Token = "0x600121B")]
	[Address(RVA = "0x850AF0", Offset = "0x850AF0", VA = "0x850AF0")]
	public void OnUnlockAchievement(int index)
	{
	}

	[Token(Token = "0x600121C")]
	[Address(RVA = "0x850B2C", Offset = "0x850B2C", VA = "0x850B2C")]
	public CookoutAvatarVisualType GetSelectedCookoutAvatar()
	{
		return default(CookoutAvatarVisualType);
	}

	[Token(Token = "0x600121D")]
	[Address(RVA = "0x850B48", Offset = "0x850B48", VA = "0x850B48")]
	public AvatarType GetCurrentAvatarType()
	{
		return default(AvatarType);
	}

	[Token(Token = "0x600121E")]
	[Address(RVA = "0x850B64", Offset = "0x850B64", VA = "0x850B64")]
	public AvatarHatType GetCurrentAvatarHatType()
	{
		return default(AvatarHatType);
	}

	[Token(Token = "0x600121F")]
	[Address(RVA = "0x850B80", Offset = "0x850B80", VA = "0x850B80")]
	public AvatarBodyType GetCurrentAvatarBodyType()
	{
		return default(AvatarBodyType);
	}

	[Token(Token = "0x6001220")]
	[Address(RVA = "0x850B9C", Offset = "0x850B9C", VA = "0x850B9C")]
	public int GetCurrentCookoutAvatarHeadMaterialIndex()
	{
		return default(int);
	}

	[Token(Token = "0x6001221")]
	[Address(RVA = "0x850BB8", Offset = "0x850BB8", VA = "0x850BB8")]
	public AvatarHandMaterial GetCurrentCookoutAvatarHandMaterial()
	{
		return default(AvatarHandMaterial);
	}

	[Token(Token = "0x6001222")]
	[Address(RVA = "0x850BD4", Offset = "0x850BD4", VA = "0x850BD4")]
	public List<AvatarHatType> GetUnlockedAvatarHats()
	{
		return null;
	}

	[Token(Token = "0x6001223")]
	[Address(RVA = "0x850C58", Offset = "0x850C58", VA = "0x850C58")]
	public void UnlockAvatarHat(AvatarHatType hat)
	{
	}

	[Token(Token = "0x6001224")]
	[Address(RVA = "0x850E0C", Offset = "0x850E0C", VA = "0x850E0C")]
	public void RemoveNewUnlockHat(AvatarHatType hat)
	{
	}

	[Token(Token = "0x6001225")]
	[Address(RVA = "0x850EB4", Offset = "0x850EB4", VA = "0x850EB4")]
	public List<HeadUnlockData> GetUnlockedAvatarHeads()
	{
		return null;
	}

	[Token(Token = "0x6001226")]
	[Address(RVA = "0x850F38", Offset = "0x850F38", VA = "0x850F38")]
	public void UnlockAvatarHead(CookoutAvatarVisualType type, int materialIndex)
	{
	}

	[Token(Token = "0x6001227")]
	[Address(RVA = "0x8511F8", Offset = "0x8511F8", VA = "0x8511F8")]
	public void RemoveNewUnlockHead(CookoutAvatarVisualType head, int materialIndex)
	{
	}

	[Token(Token = "0x6001228")]
	[Address(RVA = "0x851318", Offset = "0x851318", VA = "0x851318")]
	public List<AvatarBodyType> GetUnlockedAvatarBodies()
	{
		return null;
	}

	[Token(Token = "0x6001229")]
	[Address(RVA = "0x85139C", Offset = "0x85139C", VA = "0x85139C")]
	public void UnlockAvatarBody(AvatarBodyType body)
	{
	}

	[Token(Token = "0x600122A")]
	[Address(RVA = "0x851550", Offset = "0x851550", VA = "0x851550")]
	public void RemoveNewUnlockBody(AvatarBodyType body)
	{
	}

	[Token(Token = "0x600122B")]
	[Address(RVA = "0x8515F8", Offset = "0x8515F8", VA = "0x8515F8")]
	public List<AvatarHandMaterial> GetUnlockedAvatarHandMaterials()
	{
		return null;
	}

	[Token(Token = "0x600122C")]
	[Address(RVA = "0x85167C", Offset = "0x85167C", VA = "0x85167C")]
	public void UnlockAvatarHandMaterials(AvatarHandMaterial handMaterials)
	{
	}

	[Token(Token = "0x600122D")]
	[Address(RVA = "0x851830", Offset = "0x851830", VA = "0x851830")]
	public void RemoveNewUnlockHand(AvatarHandMaterial handMaterials)
	{
	}

	[Token(Token = "0x600122E")]
	[Address(RVA = "0x8518D8", Offset = "0x8518D8", VA = "0x8518D8")]
	public List<AvatarHatType> GetBoughtAvatarHats()
	{
		return null;
	}

	[Token(Token = "0x600122F")]
	[Address(RVA = "0x85195C", Offset = "0x85195C", VA = "0x85195C")]
	public void BuyAvatarHat(AvatarHatType hat)
	{
	}

	[Token(Token = "0x6001230")]
	[Address(RVA = "0x851A68", Offset = "0x851A68", VA = "0x851A68")]
	public List<HeadUnlockData> GetBoughtAvatarHeads()
	{
		return null;
	}

	[Token(Token = "0x6001231")]
	[Address(RVA = "0x851AEC", Offset = "0x851AEC", VA = "0x851AEC")]
	public void BuyAvatarHead(CookoutAvatarVisualType type, int materialIndex)
	{
	}

	[Token(Token = "0x6001232")]
	[Address(RVA = "0x851CF4", Offset = "0x851CF4", VA = "0x851CF4")]
	public List<AvatarBodyType> GetBoughtAvatarBodies()
	{
		return null;
	}

	[Token(Token = "0x6001233")]
	[Address(RVA = "0x851D78", Offset = "0x851D78", VA = "0x851D78")]
	public void BuyAvatarBody(AvatarBodyType body)
	{
	}

	[Token(Token = "0x6001234")]
	[Address(RVA = "0x851E84", Offset = "0x851E84", VA = "0x851E84")]
	public List<AvatarHandMaterial> GetBoughtAvatarHandMaterials()
	{
		return null;
	}

	[Token(Token = "0x6001235")]
	[Address(RVA = "0x851F08", Offset = "0x851F08", VA = "0x851F08")]
	public void BuyAvatarHandMaterials(AvatarHandMaterial handMaterials)
	{
	}

	[Token(Token = "0x6001236")]
	[Address(RVA = "0x852014", Offset = "0x852014", VA = "0x852014")]
	public List<AvatarHatType> GetNewHatsAvailable()
	{
		return null;
	}

	[Token(Token = "0x6001237")]
	[Address(RVA = "0x852030", Offset = "0x852030", VA = "0x852030")]
	public List<HeadUnlockData> GetNewHeadsAvailable()
	{
		return null;
	}

	[Token(Token = "0x6001238")]
	[Address(RVA = "0x85204C", Offset = "0x85204C", VA = "0x85204C")]
	public List<AvatarBodyType> GetNewBodiesAvailable()
	{
		return null;
	}

	[Token(Token = "0x6001239")]
	[Address(RVA = "0x852068", Offset = "0x852068", VA = "0x852068")]
	public List<AvatarHandMaterial> GetNewHandsAvailable()
	{
		return null;
	}

	[Token(Token = "0x600123A")]
	[Address(RVA = "0x852084", Offset = "0x852084", VA = "0x852084")]
	public void OnTriedOculusAvatar()
	{
	}

	[Token(Token = "0x600123B")]
	[Address(RVA = "0x8520A4", Offset = "0x8520A4", VA = "0x8520A4")]
	private static cookout.loadsave.v4.SaveGameData LoadSaveData()
	{
		return null;
	}

	[Token(Token = "0x600123C")]
	[Address(RVA = "0x84EE38", Offset = "0x84EE38", VA = "0x84EE38")]
	public void SavePlayerData()
	{
	}

	[Token(Token = "0x600123D")]
	[Address(RVA = "0x853454", Offset = "0x853454", VA = "0x853454")]
	public SaveManager()
	{
	}
}
[Token(Token = "0x20002B0")]
public class Bot : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x20002B1")]
	public enum BotAction
	{
		[Token(Token = "0x400136B")]
		None,
		[Token(Token = "0x400136C")]
		PowerDown,
		[Token(Token = "0x400136D")]
		PowerUp,
		[Token(Token = "0x400136E")]
		RequestHelp,
		[Token(Token = "0x400136F")]
		StartWorking,
		[Token(Token = "0x4001370")]
		StartWashing,
		[Token(Token = "0x4001371")]
		FailedWork,
		[Token(Token = "0x4001372")]
		FinishedServe,
		[Token(Token = "0x4001373")]
		FinishedWash,
		[Token(Token = "0x4001374")]
		Enter,
		[Token(Token = "0x4001375")]
		Exit,
		[Token(Token = "0x4001376")]
		RoundEnd,
		[Token(Token = "0x4001377")]
		Hit,
		[Token(Token = "0x4001378")]
		LightHit,
		[Token(Token = "0x4001379")]
		LookAtWindow,
		[Token(Token = "0x400137A")]
		RechargeWhileOffline,
		[Token(Token = "0x400137B")]
		StopTutorialWork,
		[Token(Token = "0x400137C")]
		RechargeWhileActive,
		[Token(Token = "0x400137D")]
		IdleVoice,
		[Token(Token = "0x400137E")]
		RoundCountdownVoice
	}

	[Token(Token = "0x4001320")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMeshPro botNameText;

	[Token(Token = "0x4001321")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SpriteRenderer timerRenderer;

	[Token(Token = "0x4001322")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public SpriteRenderer actionIcon;

	[Token(Token = "0x4001323")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TextMeshPro targetPlateOrderText;

	[Token(Token = "0x4001324")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public SpriteRenderer plateIcon;

	[Token(Token = "0x4001325")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Sprite helpNeededIcon;

	[Token(Token = "0x4001326")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Sprite outOfPowerIcon;

	[Token(Token = "0x4001327")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Sprite idleIcon;

	[Token(Token = "0x4001328")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Sprite washingIcon;

	[Token(Token = "0x4001329")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Sprite tutorialIcon;

	[Token(Token = "0x400132A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Animator animator;

	[Token(Token = "0x400132B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public SkinnedMeshRenderer myRenderer;

	[Token(Token = "0x400132C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Transform mouthAnchor;

	[Token(Token = "0x400132D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public TrailRenderer ingredientTrail;

	[Token(Token = "0x400132E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public ParticleSystem[] ingredientTrailParticleSystems;

	[Token(Token = "0x400132F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public TrailRenderer washTrail;

	[Token(Token = "0x4001330")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public ParticleSystem inhaleParticles;

	[Token(Token = "0x4001331")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public ParticleSystem washMuzzleParticles;

	[Token(Token = "0x4001332")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public ParticleSystem ingredientMuzzleParticles;

	[Token(Token = "0x4001333")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public ParticleSystem[] ingredientMuzzleParticlesSubSystems;

	[Token(Token = "0x4001334")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public ParticleSystem waterDripParticles;

	[Token(Token = "0x4001335")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public ParticleSystem gurgleParticles;

	[Token(Token = "0x4001336")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public ParticleSystem rechargeParticles;

	[Token(Token = "0x4001337")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public ParticleSystem superChargedParticles;

	[Token(Token = "0x4001338")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Color rechargeColor;

	[Token(Token = "0x4001339")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public Color superChargedColor;

	[Token(Token = "0x400133A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public float hitAnimationVelocityThreshold;

	[Token(Token = "0x400133B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	public float hitLightAnimationVelocityThreshold;

	[Token(Token = "0x400133C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public float hitCooldown;

	[Token(Token = "0x400133D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	public float fridgeOpenTime;

	[Token(Token = "0x400133E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public float powerDownTime;

	[Token(Token = "0x400133F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	public float waterDripDelayTime;

	[Token(Token = "0x4001340")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public float ingredientTrailTravelTime;

	[Token(Token = "0x4001341")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	public float startPrepareEffectDelay;

	[Token(Token = "0x4001342")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public float startWashEffectDelay;

	[Token(Token = "0x4001343")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	public bool workDuringTutorial;

	[Token(Token = "0x4001344")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public float idleVoiceWaitTime;

	[Token(Token = "0x4001346")]
	private const float offlineSoundSpacing = 5f;

	[Token(Token = "0x4001347")]
	private const string TogglePrepare = "Prepare";

	[Token(Token = "0x4001348")]
	private const string TogglePowerDown = "PowerDown";

	[Token(Token = "0x4001349")]
	private const string ToggleHelp = "Help";

	[Token(Token = "0x400134A")]
	private const string ToggleTalk = "Talk";

	[Token(Token = "0x400134B")]
	private const string ToggleWash = "Wash";

	[Token(Token = "0x400134C")]
	private const string TriggerExit = "Exit";

	[Token(Token = "0x400134D")]
	private const string TriggerStart = "Start";

	[Token(Token = "0x400134E")]
	private const string TriggerHit = "Hit";

	[Token(Token = "0x400134F")]
	private const string TriggerHitLight = "HitLight";

	[Token(Token = "0x4001350")]
	private const string TriggerRecharge = "Recharge";

	[Token(Token = "0x4001351")]
	private const string TriggerLookLeft = "LookLeft";

	[Token(Token = "0x4001352")]
	private const string TriggerLookRight = "LookRight";

	[Token(Token = "0x4001353")]
	private const string TriggerServe = "Serve";

	[Token(Token = "0x4001354")]
	private const string TriggerFailServe = "FailServe";

	[Token(Token = "0x4001355")]
	private const string TriggerWin = "Win";

	[Token(Token = "0x4001356")]
	private const string TriggerLose = "Lose";

	[Token(Token = "0x4001357")]
	private const string grabbableTag = "Grabbable";

	[Token(Token = "0x4001358")]
	private const string propertyProgress = "_Progress";

	[Token(Token = "0x4001359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public PlaySoundResult currentVoiceLine;

	[Token(Token = "0x400135A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private BotAI botAI;

	[Token(Token = "0x400135B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private CookingRound cookingRound;

	[Token(Token = "0x400135C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private CookingGameState gameState;

	[Token(Token = "0x400135D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private IngredientPrefabRegistry ingredientRegistry;

	[Token(Token = "0x400135E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private MaterialPropertyBlock propertyBlock;

	[Token(Token = "0x400135F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private GameObject workingTimer;

	[Token(Token = "0x4001360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private GameObject ingredientTrailGO;

	[Token(Token = "0x4001361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private GameObject washTrailGO;

	[Token(Token = "0x4001362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private BotTutorialMode BotTutorialMode;

	[Token(Token = "0x4001363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private BotWashLoopState botWashLoopState;

	[Token(Token = "0x4001364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private float hitCooldownTimer;

	[Token(Token = "0x4001365")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	private float offlineSoundTimer;

	[Token(Token = "0x4001366")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private float powerDownTimer;

	[Token(Token = "0x4001367")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private ParticleSystem.MainModule particleMain;

	[Token(Token = "0x4001368")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private float idleVoiceCountdown;

	[Token(Token = "0x4001369")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
	private bool isLeaving;

	[Token(Token = "0x17000246")]
	public Fridge MyFridge
	{
		[Token(Token = "0x6001255")]
		[Address(RVA = "0x8544E0", Offset = "0x8544E0", VA = "0x8544E0")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001256")]
		[Address(RVA = "0x8544E8", Offset = "0x8544E8", VA = "0x8544E8")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000247")]
	public float EnergyLeft
	{
		[Token(Token = "0x6001257")]
		[Address(RVA = "0x8544F0", Offset = "0x8544F0", VA = "0x8544F0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x17000248")]
	public int Slot
	{
		[Token(Token = "0x6001258")]
		[Address(RVA = "0x854524", Offset = "0x854524", VA = "0x854524")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001259")]
		[Address(RVA = "0x85452C", Offset = "0x85452C", VA = "0x85452C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x600125A")]
	[Address(RVA = "0x854534", Offset = "0x854534", VA = "0x854534")]
	private void Awake()
	{
	}

	[Token(Token = "0x600125B")]
	[Address(RVA = "0x854990", Offset = "0x854990", VA = "0x854990")]
	public void Enter()
	{
	}

	[Token(Token = "0x600125C")]
	[Address(RVA = "0x85544C", Offset = "0x85544C", VA = "0x85544C")]
	public void SetSlot(int slot)
	{
	}

	[Token(Token = "0x600125D")]
	[Address(RVA = "0x85554C", Offset = "0x85554C", VA = "0x85554C")]
	private void Start()
	{
	}

	[Token(Token = "0x600125E")]
	[Address(RVA = "0x855B80", Offset = "0x855B80", VA = "0x855B80")]
	private void OnRoundStart()
	{
	}

	[Token(Token = "0x600125F")]
	[Address(RVA = "0x855E20", Offset = "0x855E20", VA = "0x855E20")]
	private void OnCountdownStart()
	{
	}

	[Token(Token = "0x6001260")]
	[Address(RVA = "0x856154", Offset = "0x856154", VA = "0x856154")]
	private void OnGameStateChanged(GameState oldState, GameState newState)
	{
	}

	[Token(Token = "0x6001261")]
	[Address(RVA = "0x85636C", Offset = "0x85636C", VA = "0x85636C")]
	private void Update()
	{
	}

	[Token(Token = "0x6001262")]
	[Address(RVA = "0x856858", Offset = "0x856858", VA = "0x856858")]
	private void SetDeliveryTarget()
	{
	}

	[Token(Token = "0x6001263")]
	[Address(RVA = "0x8569F0", Offset = "0x8569F0", VA = "0x8569F0")]
	private void SetWashTarget()
	{
	}

	[Token(Token = "0x6001264")]
	[Address(RVA = "0x855B20", Offset = "0x855B20", VA = "0x855B20")]
	private void SetUIStateIcon(Sprite icon)
	{
	}

	[Token(Token = "0x6001265")]
	[Address(RVA = "0x856AEC", Offset = "0x856AEC", VA = "0x856AEC")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x6001266")]
	[Address(RVA = "0x856CE4", Offset = "0x856CE4", VA = "0x856CE4")]
	public void RechargeStamina(float rechargeFraction)
	{
	}

	[Token(Token = "0x6001267")]
	[Address(RVA = "0x856F70", Offset = "0x856F70", VA = "0x856F70")]
	private void PlayIngredientTrailFridgeToBot(float delay)
	{
	}

	[Token(Token = "0x6001268")]
	[Address(RVA = "0x8572A4", Offset = "0x8572A4", VA = "0x8572A4")]
	private void PlayIngredientTrailBotToPlate()
	{
	}

	[Token(Token = "0x6001269")]
	[Address(RVA = "0x8573C0", Offset = "0x8573C0", VA = "0x8573C0")]
	private void PlayWashTrailBotToPlate()
	{
	}

	[Token(Token = "0x600126A")]
	[Address(RVA = "0x8574DC", Offset = "0x8574DC", VA = "0x8574DC")]
	public void DespawnBot(Action onDespawnComplete)
	{
	}

	[Token(Token = "0x600126B")]
	[Address(RVA = "0x8576A0", Offset = "0x8576A0", VA = "0x8576A0")]
	public void TutorialStartWorking()
	{
	}

	[Token(Token = "0x600126C")]
	[Address(RVA = "0x8578C0", Offset = "0x8578C0", VA = "0x8578C0")]
	public void TutorialStopWorking()
	{
	}

	[Token(Token = "0x600126D")]
	[Address(RVA = "0x855DCC", Offset = "0x855DCC", VA = "0x855DCC")]
	public void ForcePowerDown()
	{
	}

	[Token(Token = "0x600126E")]
	[Address(RVA = "0x8549F4", Offset = "0x8549F4", VA = "0x8549F4")]
	private void PlayAction(BotAction action)
	{
	}

	[Token(Token = "0x600126F")]
	[Address(RVA = "0x855E28", Offset = "0x855E28", VA = "0x855E28")]
	private void PlayVoiceLine(BotAction action)
	{
	}

	[Token(Token = "0x6001270")]
	[Address(RVA = "0x857910", Offset = "0x857910", VA = "0x857910")]
	private void playRechargeEffect()
	{
	}

	[Token(Token = "0x6001271")]
	[Address(RVA = "0x8579F4", Offset = "0x8579F4", VA = "0x8579F4")]
	public bool IsWaitingForPlayerHelp()
	{
		return default(bool);
	}

	[Token(Token = "0x6001272")]
	[Address(RVA = "0x857A10", Offset = "0x857A10", VA = "0x857A10")]
	public bool HasNoPower()
	{
		return default(bool);
	}

	[Token(Token = "0x6001273")]
	[Address(RVA = "0x857A2C", Offset = "0x857A2C", VA = "0x857A2C")]
	private void OnWashLoopEnter()
	{
	}

	[Token(Token = "0x6001274")]
	[Address(RVA = "0x857A48", Offset = "0x857A48", VA = "0x857A48")]
	private void OnWashLoopExit()
	{
	}

	[Token(Token = "0x6001275")]
	[Address(RVA = "0x857094", Offset = "0x857094", VA = "0x857094")]
	private void SetIngredientTrailColor(IngredientType ingredient)
	{
	}

	[Token(Token = "0x6001276")]
	[Address(RVA = "0x857A64", Offset = "0x857A64", VA = "0x857A64")]
	public void OnCrankReleased()
	{
	}

	[Token(Token = "0x6001277")]
	[Address(RVA = "0x857AA8", Offset = "0x857AA8", VA = "0x857AA8")]
	public void OnSuperchargedStateChanged(bool isActivated)
	{
	}

	[Token(Token = "0x6001278")]
	[Address(RVA = "0x857BD0", Offset = "0x857BD0", VA = "0x857BD0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001279")]
	[Address(RVA = "0x857EC0", Offset = "0x857EC0", VA = "0x857EC0")]
	public Bot()
	{
	}
}
[Token(Token = "0x20002B6")]
public class BotAI : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x400138C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float staminaBacking;

	[Token(Token = "0x400138D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float superChargeRateBacking;

	[Token(Token = "0x400138E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool superChargedActiveBacking;

	[Token(Token = "0x400138F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float maxStamina;

	[Token(Token = "0x4001390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private float workTime;

	[Token(Token = "0x4001391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float washTime;

	[Token(Token = "0x4001392")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[SerializeField]
	private float idleTime;

	[Token(Token = "0x4001393")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private float LookAtWindowThreshold;

	[Token(Token = "0x4001394")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private float grillTime;

	[Token(Token = "0x4001395")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private float powerUpThreshold;

	[Token(Token = "0x4001396")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	private float delayBeforeServe;

	[Token(Token = "0x4001397")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private float delayBeforeWash;

	[Token(Token = "0x4001398")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SerializeField]
	private float superChargeDuration;

	[Token(Token = "0x4001399")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private float superChargeMaxRate;

	[Token(Token = "0x400139A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	private float superChargeMinRate;

	[Token(Token = "0x400139B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private float superChargeSpeedUp;

	[Token(Token = "0x400139C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	[Header("Normal, Rabbit, Picky, Royal, Werewolf, Jester, Thief, Tutorial, FinalBossKing, FinalBossQueen")]
	private int[] customerPriority;

	[Token(Token = "0x400139D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private int timeRunningLowPriority;

	[Token(Token = "0x400139E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[SerializeField]
	private int timeCriticalPriority;

	[Token(Token = "0x400139F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private int uniqueIngredientPriority;

	[Token(Token = "0x40013A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[SerializeField]
	private int plateTimeRunningOutThreshold;

	[Token(Token = "0x40013A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private int plateTimeCriticalThreshold;

	[Token(Token = "0x40013A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private CookingRound cookingRound;

	[Token(Token = "0x40013A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private BotCrank botCrank;

	[Token(Token = "0x40013A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private CustomerRegistry customerRegistry;

	[Token(Token = "0x40013A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private List<Plate> targetPlates;

	[Token(Token = "0x40013A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private List<RecipeIngredient> targetPlateIngredients;

	[Token(Token = "0x40013A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private IngredientType[] myIngredients;

	[Token(Token = "0x40013A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private List<IngredientType> uniqueIngredients;

	[Token(Token = "0x40013A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private float powerUpShakeCountdown;

	[Token(Token = "0x40013AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private float workTimer;

	[Token(Token = "0x40013AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private float idleTimer;

	[Token(Token = "0x40013AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Bot botMain;

	[Token(Token = "0x40013AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Fridge[] fridges;

	[Token(Token = "0x40013AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private CookingNetworkManager networkManager;

	[Token(Token = "0x40013AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private WorkspaceRegistry workspaceRegistry;

	[Token(Token = "0x40013B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private OrderMonitor orderMonitor;

	[Token(Token = "0x40013B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private RecipeIngredient noIngredient;

	[Token(Token = "0x40013B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private List<RecipeIngredient> missingIngredients;

	[Token(Token = "0x40013B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private List<StackedIngredientData> addedIngredients;

	[Token(Token = "0x40013B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private List<RecipeIngredient> currentVisibleRecipe;

	[Token(Token = "0x40013B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private readonly RecipeIngredient noTargetIngredient;

	[Token(Token = "0x17000249")]
	public RecipeIngredient TargetIngredient
	{
		[Token(Token = "0x6001284")]
		[Address(RVA = "0x85852C", Offset = "0x85852C", VA = "0x85852C")]
		[CompilerGenerated]
		get
		{
			return default(RecipeIngredient);
		}
		[Token(Token = "0x6001285")]
		[Address(RVA = "0x858534", Offset = "0x858534", VA = "0x858534")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700024A")]
	public Plate TargetPlate
	{
		[Token(Token = "0x6001286")]
		[Address(RVA = "0x85853C", Offset = "0x85853C", VA = "0x85853C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001287")]
		[Address(RVA = "0x858544", Offset = "0x858544", VA = "0x858544")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700024B")]
	public bool IsOffline
	{
		[Token(Token = "0x6001288")]
		[Address(RVA = "0x85854C", Offset = "0x85854C", VA = "0x85854C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001289")]
		[Address(RVA = "0x858554", Offset = "0x858554", VA = "0x858554")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700024C")]
	public bool RequestedHelp
	{
		[Token(Token = "0x600128A")]
		[Address(RVA = "0x858560", Offset = "0x858560", VA = "0x858560")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600128B")]
		[Address(RVA = "0x858568", Offset = "0x858568", VA = "0x858568")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700024D")]
	public bool IsWashing
	{
		[Token(Token = "0x600128C")]
		[Address(RVA = "0x858574", Offset = "0x858574", VA = "0x858574")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600128D")]
		[Address(RVA = "0x85857C", Offset = "0x85857C", VA = "0x85857C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700024E")]
	public float EnergyLeft
	{
		[Token(Token = "0x600128E")]
		[Address(RVA = "0x854514", Offset = "0x854514", VA = "0x854514")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700024F")]
	private float Stamina
	{
		[Token(Token = "0x600128F")]
		[Address(RVA = "0x858588", Offset = "0x858588", VA = "0x858588")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001290")]
		[Address(RVA = "0x858590", Offset = "0x858590", VA = "0x858590")]
		set
		{
		}
	}

	[Token(Token = "0x17000250")]
	public float SuperChargeRate
	{
		[Token(Token = "0x6001291")]
		[Address(RVA = "0x8585CC", Offset = "0x8585CC", VA = "0x8585CC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001292")]
		[Address(RVA = "0x8585D4", Offset = "0x8585D4", VA = "0x8585D4")]
		private set
		{
		}
	}

	[Token(Token = "0x17000251")]
	private bool SuperChargedActive
	{
		[Token(Token = "0x6001293")]
		[Address(RVA = "0x858614", Offset = "0x858614", VA = "0x858614")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001294")]
		[Address(RVA = "0x85861C", Offset = "0x85861C", VA = "0x85861C")]
		set
		{
		}
	}

	[Token(Token = "0x6001295")]
	[Address(RVA = "0x858684", Offset = "0x858684", VA = "0x858684")]
	private void Start()
	{
	}

	[Token(Token = "0x6001296")]
	[Address(RVA = "0x856648", Offset = "0x856648", VA = "0x856648")]
	public Bot.BotAction Tick()
	{
		return default(Bot.BotAction);
	}

	[Token(Token = "0x6001297")]
	[Address(RVA = "0x858C10", Offset = "0x858C10", VA = "0x858C10")]
	private Bot.BotAction ServeIngredient()
	{
		return default(Bot.BotAction);
	}

	[Token(Token = "0x6001298")]
	[Address(RVA = "0x858AFC", Offset = "0x858AFC", VA = "0x858AFC")]
	private Bot.BotAction WashPlate()
	{
		return default(Bot.BotAction);
	}

	[Token(Token = "0x6001299")]
	[Address(RVA = "0x859EB8", Offset = "0x859EB8", VA = "0x859EB8")]
	private Bot.BotAction ResolveFinisingWork(bool success)
	{
		return default(Bot.BotAction);
	}

	[Token(Token = "0x600129A")]
	[Address(RVA = "0x858E60", Offset = "0x858E60", VA = "0x858E60")]
	private void DetermineValidPlateTargets()
	{
	}

	[Token(Token = "0x600129B")]
	[Address(RVA = "0x859744", Offset = "0x859744", VA = "0x859744")]
	private void DetermineWhatPlateToWorkOn()
	{
	}

	[Token(Token = "0x600129C")]
	[Address(RVA = "0x85A074", Offset = "0x85A074", VA = "0x85A074")]
	private void OnRoundStart()
	{
	}

	[Token(Token = "0x600129D")]
	[Address(RVA = "0x856364", Offset = "0x856364", VA = "0x856364")]
	public void OnRoundEnded()
	{
	}

	[Token(Token = "0x600129E")]
	[Address(RVA = "0x859E34", Offset = "0x859E34", VA = "0x859E34")]
	private RecipeIngredient GetNextPlateIngredient(Plate plate)
	{
		return default(RecipeIngredient);
	}

	[Token(Token = "0x600129F")]
	[Address(RVA = "0x859D1C", Offset = "0x859D1C", VA = "0x859D1C")]
	private void AddToPlate(IngredientType ingredientType, Plate plate, float fryValue)
	{
	}

	[Token(Token = "0x60012A0")]
	[Address(RVA = "0x859F6C", Offset = "0x859F6C", VA = "0x859F6C")]
	private void WashPlate(Plate plate)
	{
	}

	[Token(Token = "0x60012A1")]
	[Address(RVA = "0x856AAC", Offset = "0x856AAC", VA = "0x856AAC")]
	public float elapsedTimeFraction()
	{
		return default(float);
	}

	[Token(Token = "0x60012A2")]
	[Address(RVA = "0x856E24", Offset = "0x856E24", VA = "0x856E24")]
	public Bot.BotAction RechargeStamina(float fraction)
	{
		return default(Bot.BotAction);
	}

	[Token(Token = "0x60012A3")]
	[Address(RVA = "0x859AEC", Offset = "0x859AEC", VA = "0x859AEC")]
	private bool PlateIsEmptyAndDirty(Plate plate)
	{
		return default(bool);
	}

	[Token(Token = "0x60012A4")]
	[Address(RVA = "0x859BFC", Offset = "0x859BFC", VA = "0x859BFC")]
	private bool RequiresMoreOfIngredient(IngredientType ingredient, Plate plate)
	{
		return default(bool);
	}

	[Token(Token = "0x60012A5")]
	[Address(RVA = "0x859B58", Offset = "0x859B58", VA = "0x859B58")]
	private bool PlateIsPerfectSoFar(Plate plate)
	{
		return default(bool);
	}

	[Token(Token = "0x60012A6")]
	[Address(RVA = "0x8576C4", Offset = "0x8576C4", VA = "0x8576C4")]
	public void UpdateMyIngredients()
	{
	}

	[Token(Token = "0x60012A7")]
	[Address(RVA = "0x8578E4", Offset = "0x8578E4", VA = "0x8578E4")]
	public Bot.BotAction ForceShutDown()
	{
		return default(Bot.BotAction);
	}

	[Token(Token = "0x60012A8")]
	[Address(RVA = "0x857A7C", Offset = "0x857A7C", VA = "0x857A7C")]
	public void OnCrankReleased()
	{
	}

	[Token(Token = "0x60012A9")]
	[Address(RVA = "0x85A1B0", Offset = "0x85A1B0", VA = "0x85A1B0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60012AA")]
	[Address(RVA = "0x85A284", Offset = "0x85A284", VA = "0x85A284")]
	public BotAI()
	{
	}
}
[Token(Token = "0x20002B9")]
public class BotCrank : SingleInstanceBehavior<BotCrank>, ILocallyGrabbable
{
	[Token(Token = "0x40013BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Grabbable grabbable;

	[Token(Token = "0x40013BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform handleAnchor;

	[Token(Token = "0x40013BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform rotationRoot;

	[Token(Token = "0x40013BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private MeshRenderer staminaMeterRenderer;

	[Token(Token = "0x40013BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float maxRotationPerFrame;

	[Token(Token = "0x40013BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private float rechargeMagnitude;

	[Token(Token = "0x40013C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private ParticleSystem superchargeGlow;

	[Token(Token = "0x40013C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private ParticleSystem superchargeParticles;

	[Token(Token = "0x40013C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private ParticleSystem staminaChargedParticles;

	[Token(Token = "0x40013C3")]
	private const float soundThreshold = 30f;

	[Token(Token = "0x40013C4")]
	private const float hapticThreshold = 5f;

	[Token(Token = "0x40013C5")]
	private const string propertyFillRate = "_FillRate";

	[Token(Token = "0x40013C6")]
	private const string propertyChargeRate = "_ChargeRate";

	[Token(Token = "0x40013C7")]
	private const string propertyChargeIsVisible = "_ChargeIsVisible";

	[Token(Token = "0x40013C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private readonly Vector3 noYValue;

	[Token(Token = "0x40013C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Bot bot;

	[Token(Token = "0x40013CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private CookoutAvatarHand holdingHand;

	[Token(Token = "0x40013CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Transform holdingHandTransform;

	[Token(Token = "0x40013CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Vector3 previousCenterToHand;

	[Token(Token = "0x40013CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private float soundCounter;

	[Token(Token = "0x40013CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private MaterialPropertyBlock propertyBlock;

	[Token(Token = "0x40013CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool chargeIsVisible;

	[Token(Token = "0x40013D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private PlaySoundResult crankSuperchargedSound;

	[Token(Token = "0x40013D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private CookingRound cookingRound;

	[Token(Token = "0x60012AF")]
	[Address(RVA = "0x85B964", Offset = "0x85B964", VA = "0x85B964", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x60012B0")]
	[Address(RVA = "0x85BA48", Offset = "0x85BA48", VA = "0x85BA48")]
	private void Start()
	{
	}

	[Token(Token = "0x60012B1")]
	[Address(RVA = "0x85BC98", Offset = "0x85BC98", VA = "0x85BC98")]
	private void Update()
	{
	}

	[Token(Token = "0x60012B2")]
	[Address(RVA = "0x85BB78", Offset = "0x85BB78", VA = "0x85BB78")]
	public void SetActive(bool isActive)
	{
	}

	[Token(Token = "0x60012B3")]
	[Address(RVA = "0x85C05C", Offset = "0x85C05C", VA = "0x85C05C", Slot = "6")]
	public void OnLocalGrab(CookoutAvatarHand grabbedBy, Transform handAnchor)
	{
	}

	[Token(Token = "0x60012B4")]
	[Address(RVA = "0x85C114", Offset = "0x85C114", VA = "0x85C114")]
	private void OnRelease()
	{
	}

	[Token(Token = "0x60012B5")]
	[Address(RVA = "0x85C130", Offset = "0x85C130", VA = "0x85C130")]
	public void UpdateStaminaMeter(float fillRate, float chargeRate, bool superChargeActive)
	{
	}

	[Token(Token = "0x60012B6")]
	[Address(RVA = "0x85C1F4", Offset = "0x85C1F4", VA = "0x85C1F4")]
	public void SetSuperchargeVisiblity(bool isVisible)
	{
	}

	[Token(Token = "0x60012B7")]
	[Address(RVA = "0x85C2E0", Offset = "0x85C2E0", VA = "0x85C2E0")]
	public void OnSuperchargeIsFull()
	{
	}

	[Token(Token = "0x60012B8")]
	[Address(RVA = "0x85C330", Offset = "0x85C330", VA = "0x85C330")]
	public void SetChargeActiveGlow(bool isVisible)
	{
	}

	[Token(Token = "0x60012B9")]
	[Address(RVA = "0x85C3A0", Offset = "0x85C3A0", VA = "0x85C3A0")]
	public void OnStaminaCharged()
	{
	}

	[Token(Token = "0x60012BA")]
	[Address(RVA = "0x85C3D4", Offset = "0x85C3D4", VA = "0x85C3D4")]
	private void OnRoundEnd()
	{
	}

	[Token(Token = "0x60012BB")]
	[Address(RVA = "0x85C408", Offset = "0x85C408", VA = "0x85C408", Slot = "5")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x60012BC")]
	[Address(RVA = "0x85C590", Offset = "0x85C590", VA = "0x85C590")]
	public BotCrank()
	{
	}
}
[Token(Token = "0x20002BA")]
public class BotManager : SingleInstanceBehavior<BotManager>
{
	[Token(Token = "0x20002BB")]
	public delegate void OnBotCountChangedHandler();

	[Token(Token = "0x40013D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject botPrefab;

	[Token(Token = "0x40013D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Transform lightProbeAnchor;

	[Token(Token = "0x40013D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<Bot> bots;

	[Token(Token = "0x40013D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private CookingNetworkManager networkManager;

	[Token(Token = "0x40013D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private PhotonCallbackManager photonCallbackManager;

	[Token(Token = "0x17000252")]
	public Transform LightProbeAnchor
	{
		[Token(Token = "0x60012BF")]
		[Address(RVA = "0x85C754", Offset = "0x85C754", VA = "0x85C754")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000253")]
	public bool IsPlayerAlone
	{
		[Token(Token = "0x60012C0")]
		[Address(RVA = "0x85C75C", Offset = "0x85C75C", VA = "0x85C75C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x14000028")]
	public event OnBotCountChangedHandler OnBotCountChanged
	{
		[Token(Token = "0x60012BD")]
		[Address(RVA = "0x85C61C", Offset = "0x85C61C", VA = "0x85C61C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60012BE")]
		[Address(RVA = "0x85C6B8", Offset = "0x85C6B8", VA = "0x85C6B8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60012C1")]
	[Address(RVA = "0x85C82C", Offset = "0x85C82C", VA = "0x85C82C")]
	private void Start()
	{
	}

	[Token(Token = "0x60012C2")]
	[Address(RVA = "0x85CE6C", Offset = "0x85CE6C", VA = "0x85CE6C")]
	private void OnPlayerConnected(PhotonPlayer newPlayer)
	{
	}

	[Token(Token = "0x60012C3")]
	[Address(RVA = "0x85CFA4", Offset = "0x85CFA4", VA = "0x85CFA4")]
	public void SpawnBot()
	{
	}

	[Token(Token = "0x60012C4")]
	[Address(RVA = "0x85CA50", Offset = "0x85CA50", VA = "0x85CA50")]
	public void SpawnBotAtPosition(int position, bool forcePosition = false)
	{
	}

	[Token(Token = "0x60012C5")]
	[Address(RVA = "0x85CE70", Offset = "0x85CE70", VA = "0x85CE70")]
	public void DespawnBots()
	{
	}

	[Token(Token = "0x60012C6")]
	[Address(RVA = "0x85C7DC", Offset = "0x85C7DC", VA = "0x85C7DC")]
	public bool HasActiveBots()
	{
		return default(bool);
	}

	[Token(Token = "0x60012C7")]
	[Address(RVA = "0x85D044", Offset = "0x85D044", VA = "0x85D044")]
	public bool[] GetBotSeats()
	{
		return null;
	}

	[Token(Token = "0x60012C8")]
	[Address(RVA = "0x85D120", Offset = "0x85D120", VA = "0x85D120")]
	public void TutorialMakeBotWork()
	{
	}

	[Token(Token = "0x60012C9")]
	[Address(RVA = "0x85D1AC", Offset = "0x85D1AC", VA = "0x85D1AC")]
	public void TutorialStopBotWork()
	{
	}

	[Token(Token = "0x60012CA")]
	[Address(RVA = "0x85D238", Offset = "0x85D238", VA = "0x85D238")]
	public void TutorialForceBotsPowerDown()
	{
	}

	[Token(Token = "0x60012CB")]
	[Address(RVA = "0x85D2C4", Offset = "0x85D2C4", VA = "0x85D2C4", Slot = "5")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x60012CC")]
	[Address(RVA = "0x85D3AC", Offset = "0x85D3AC", VA = "0x85D3AC")]
	public void RespawnBotAndMovePlayer()
	{
	}

	[Token(Token = "0x60012CD")]
	[Address(RVA = "0x85D7C4", Offset = "0x85D7C4", VA = "0x85D7C4")]
	public void TutorialShowBot()
	{
	}

	[Token(Token = "0x60012CE")]
	[Address(RVA = "0x85D824", Offset = "0x85D824", VA = "0x85D824")]
	public Bot GetBot()
	{
		return null;
	}

	[Token(Token = "0x60012CF")]
	[Address(RVA = "0x85D878", Offset = "0x85D878", VA = "0x85D878")]
	public BotManager()
	{
	}
}
[Token(Token = "0x20002BC")]
public class BotTutorialMode : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40013D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float remindCooldown;

	[Token(Token = "0x40013DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Animator animator;

	[Token(Token = "0x40013DB")]
	private const string talkToggle = "Talk";

	[Token(Token = "0x40013DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float remindTimer;

	[Token(Token = "0x40013DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private TutorialMode tutorialMode;

	[Token(Token = "0x40013DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private TutorialStep currentStep;

	[Token(Token = "0x40013DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static PlaySoundResult soundResult;

	[Token(Token = "0x17000254")]
	public static float VoiceLineLength
	{
		[Token(Token = "0x60012D5")]
		[Address(RVA = "0x85DA4C", Offset = "0x85DA4C", VA = "0x85DA4C")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60012D6")]
		[Address(RVA = "0x85DA94", Offset = "0x85DA94", VA = "0x85DA94")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000255")]
	public bool IsNarrating
	{
		[Token(Token = "0x60012D7")]
		[Address(RVA = "0x85DAE8", Offset = "0x85DAE8", VA = "0x85DAE8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60012D8")]
	[Address(RVA = "0x85DB3C", Offset = "0x85DB3C", VA = "0x85DB3C")]
	private void Start()
	{
	}

	[Token(Token = "0x60012D9")]
	[Address(RVA = "0x85DC60", Offset = "0x85DC60", VA = "0x85DC60")]
	private void Update()
	{
	}

	[Token(Token = "0x60012DA")]
	[Address(RVA = "0x85DEA0", Offset = "0x85DEA0", VA = "0x85DEA0")]
	private void OnTutorialStateChanged(TutorialStep newStep)
	{
	}

	[Token(Token = "0x60012DB")]
	[Address(RVA = "0x85DCBC", Offset = "0x85DCBC", VA = "0x85DCBC")]
	private void PlayVoiceLine(TutorialStep step, bool fullDescription)
	{
	}

	[Token(Token = "0x60012DC")]
	[Address(RVA = "0x85DEEC", Offset = "0x85DEEC", VA = "0x85DEEC")]
	public static void StopCurrentVoiceLine()
	{
	}

	[Token(Token = "0x60012DD")]
	[Address(RVA = "0x85DF5C", Offset = "0x85DF5C", VA = "0x85DF5C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60012DE")]
	[Address(RVA = "0x85E030", Offset = "0x85E030", VA = "0x85E030")]
	public BotTutorialMode()
	{
	}
}
[Token(Token = "0x20002BD")]
public class BotWashLoopState : StateMachineBehaviour
{
	[Token(Token = "0x40013E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action OnWashLoopEnter;

	[Token(Token = "0x40013E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Action OnWashLoopExit;

	[Token(Token = "0x60012E0")]
	[Address(RVA = "0x85E0A0", Offset = "0x85E0A0", VA = "0x85E0A0", Slot = "4")]
	public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60012E1")]
	[Address(RVA = "0x85E0BC", Offset = "0x85E0BC", VA = "0x85E0BC", Slot = "6")]
	public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60012E2")]
	[Address(RVA = "0x85E0D8", Offset = "0x85E0D8", VA = "0x85E0D8")]
	public BotWashLoopState()
	{
	}
}
[Token(Token = "0x20002BE")]
public class RandomizeNextAnimationVariant : StateMachineBehaviour
{
	[Token(Token = "0x40013E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string parameterName;

	[Token(Token = "0x40013E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float[] parameterVariantOdds;

	[Token(Token = "0x40013E4")]
	private const int parameterInactive = -1;

	[Token(Token = "0x60012E3")]
	[Address(RVA = "0x85E0E0", Offset = "0x85E0E0", VA = "0x85E0E0", Slot = "4")]
	public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
	{
	}

	[Token(Token = "0x60012E4")]
	[Address(RVA = "0x85E118", Offset = "0x85E118", VA = "0x85E118")]
	private int GetAnimationVariant()
	{
		return default(int);
	}

	[Token(Token = "0x60012E5")]
	[Address(RVA = "0x85E1E4", Offset = "0x85E1E4", VA = "0x85E1E4")]
	public RandomizeNextAnimationVariant()
	{
	}
}
[Token(Token = "0x20002BF")]
public class GoalNoIngredientRearranging : StarGoal
{
	[Token(Token = "0x40013E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private CookingRound cookingRound;

	[Token(Token = "0x17000256")]
	public override GoalType goalType
	{
		[Token(Token = "0x60012E6")]
		[Address(RVA = "0x85E1EC", Offset = "0x85E1EC", VA = "0x85E1EC", Slot = "6")]
		get
		{
			return default(GoalType);
		}
	}

	[Token(Token = "0x17000257")]
	public override string GoalDescription
	{
		[Token(Token = "0x60012E7")]
		[Address(RVA = "0x85E1F4", Offset = "0x85E1F4", VA = "0x85E1F4", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000258")]
	public override string GoalResultsDescription
	{
		[Token(Token = "0x60012E8")]
		[Address(RVA = "0x85E234", Offset = "0x85E234", VA = "0x85E234", Slot = "8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60012E9")]
	[Address(RVA = "0x85E274", Offset = "0x85E274", VA = "0x85E274")]
	public void Start()
	{
	}

	[Token(Token = "0x60012EA")]
	[Address(RVA = "0x85E66C", Offset = "0x85E66C", VA = "0x85E66C")]
	private void OnTopIngredientRemoved()
	{
	}

	[Token(Token = "0x60012EB")]
	[Address(RVA = "0x85E6DC", Offset = "0x85E6DC", VA = "0x85E6DC")]
	private void OnRoundEnded()
	{
	}

	[Token(Token = "0x60012EC")]
	[Address(RVA = "0x85E708", Offset = "0x85E708", VA = "0x85E708", Slot = "15")]
	protected override void ReceiveSyncData(PhotonStream stream, GoalState oldState)
	{
	}

	[Token(Token = "0x60012ED")]
	[Address(RVA = "0x85E724", Offset = "0x85E724", VA = "0x85E724")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x60012EE")]
	[Address(RVA = "0x85E938", Offset = "0x85E938", VA = "0x85E938")]
	public GoalNoIngredientRearranging()
	{
	}
}
[Token(Token = "0x20002C0")]
public class GoalServeAllCustomers : StarGoal, IPunObservable
{
	[Token(Token = "0x40013E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int targetCount;

	[Token(Token = "0x40013E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int servedCount;

	[Token(Token = "0x40013E8")]
	private const string localizationKey = "stargoal_serve_all";

	[Token(Token = "0x40013E9")]
	private const string localizationResultsKey = "stargoal_results_serve_all";

	[Token(Token = "0x17000259")]
	public override GoalType goalType
	{
		[Token(Token = "0x60012EF")]
		[Address(RVA = "0x85E948", Offset = "0x85E948", VA = "0x85E948", Slot = "6")]
		get
		{
			return default(GoalType);
		}
	}

	[Token(Token = "0x1700025A")]
	public override string GoalDescription
	{
		[Token(Token = "0x60012F0")]
		[Address(RVA = "0x85E950", Offset = "0x85E950", VA = "0x85E950", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700025B")]
	public override string GoalResultsDescription
	{
		[Token(Token = "0x60012F1")]
		[Address(RVA = "0x85E9B8", Offset = "0x85E9B8", VA = "0x85E9B8", Slot = "8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60012F2")]
	[Address(RVA = "0x85EA20", Offset = "0x85EA20", VA = "0x85EA20")]
	public void Start()
	{
	}

	[Token(Token = "0x60012F3")]
	[Address(RVA = "0x85EC10", Offset = "0x85EC10", VA = "0x85EC10", Slot = "9")]
	public override void ActivateGoal(LevelData level, LevelData.GoalData goalData, int playerCount)
	{
	}

	[Token(Token = "0x60012F4")]
	[Address(RVA = "0x85EC4C", Offset = "0x85EC4C", VA = "0x85EC4C")]
	private void OnPlateHandedIn(bool wasHandedIn, bool wasPerfect, CustomerType customerType, bool wasClean)
	{
	}

	[Token(Token = "0x60012F5")]
	[Address(RVA = "0x85ECA4", Offset = "0x85ECA4", VA = "0x85ECA4", Slot = "14")]
	protected override void SendSyncData(PhotonStream stream)
	{
	}

	[Token(Token = "0x60012F6")]
	[Address(RVA = "0x85ED40", Offset = "0x85ED40", VA = "0x85ED40", Slot = "15")]
	protected override void ReceiveSyncData(PhotonStream stream, GoalState oldState)
	{
	}

	[Token(Token = "0x60012F7")]
	[Address(RVA = "0x85EE40", Offset = "0x85EE40", VA = "0x85EE40", Slot = "11")]
	public override string GetPreRoundIconText()
	{
		return null;
	}

	[Token(Token = "0x60012F8")]
	[Address(RVA = "0x85EEA8", Offset = "0x85EEA8", VA = "0x85EEA8", Slot = "12")]
	public override string GetRoundIconText()
	{
		return null;
	}

	[Token(Token = "0x60012F9")]
	[Address(RVA = "0x85EF48", Offset = "0x85EF48", VA = "0x85EF48")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x60012FA")]
	[Address(RVA = "0x85F0C8", Offset = "0x85F0C8", VA = "0x85F0C8")]
	public GoalServeAllCustomers()
	{
	}
}
[Token(Token = "0x20002C1")]
public class GoalServeAllPerfect : StarGoal, IPunObservable
{
	[Token(Token = "0x40013EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int targetCount;

	[Token(Token = "0x40013EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int servedCount;

	[Token(Token = "0x40013EC")]
	private const string localizationKey = "stargoal_serve_allperfect";

	[Token(Token = "0x40013ED")]
	private const string localizationResultsKey = "stargoal_serve_allperfect";

	[Token(Token = "0x1700025C")]
	public override GoalType goalType
	{
		[Token(Token = "0x60012FB")]
		[Address(RVA = "0x85F0D0", Offset = "0x85F0D0", VA = "0x85F0D0", Slot = "6")]
		get
		{
			return default(GoalType);
		}
	}

	[Token(Token = "0x1700025D")]
	public override string GoalDescription
	{
		[Token(Token = "0x60012FC")]
		[Address(RVA = "0x85F0D8", Offset = "0x85F0D8", VA = "0x85F0D8", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700025E")]
	public override string GoalResultsDescription
	{
		[Token(Token = "0x60012FD")]
		[Address(RVA = "0x85F140", Offset = "0x85F140", VA = "0x85F140", Slot = "8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60012FE")]
	[Address(RVA = "0x85F1A8", Offset = "0x85F1A8", VA = "0x85F1A8")]
	public void Start()
	{
	}

	[Token(Token = "0x60012FF")]
	[Address(RVA = "0x85F238", Offset = "0x85F238", VA = "0x85F238", Slot = "9")]
	public override void ActivateGoal(LevelData level, LevelData.GoalData goalData, int playerCount)
	{
	}

	[Token(Token = "0x6001300")]
	[Address(RVA = "0x85F268", Offset = "0x85F268", VA = "0x85F268")]
	private void OnPlateHandedIn(bool wasHandedIn, bool wasPerfect, CustomerType customerType, bool wasClean)
	{
	}

	[Token(Token = "0x6001301")]
	[Address(RVA = "0x85F2BC", Offset = "0x85F2BC", VA = "0x85F2BC", Slot = "14")]
	protected override void SendSyncData(PhotonStream stream)
	{
	}

	[Token(Token = "0x6001302")]
	[Address(RVA = "0x85F358", Offset = "0x85F358", VA = "0x85F358", Slot = "15")]
	protected override void ReceiveSyncData(PhotonStream stream, GoalState oldState)
	{
	}

	[Token(Token = "0x6001303")]
	[Address(RVA = "0x85F464", Offset = "0x85F464", VA = "0x85F464", Slot = "11")]
	public override string GetPreRoundIconText()
	{
		return null;
	}

	[Token(Token = "0x6001304")]
	[Address(RVA = "0x85F4CC", Offset = "0x85F4CC", VA = "0x85F4CC", Slot = "12")]
	public override string GetRoundIconText()
	{
		return null;
	}

	[Token(Token = "0x6001305")]
	[Address(RVA = "0x85F56C", Offset = "0x85F56C", VA = "0x85F56C")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x6001306")]
	[Address(RVA = "0x85F650", Offset = "0x85F650", VA = "0x85F650")]
	public GoalServeAllPerfect()
	{
	}
}
[Token(Token = "0x20002C2")]
public class GoalServeManyCustomers : StarGoal, IPunObservable
{
	[Token(Token = "0x40013EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int targetCount;

	[Token(Token = "0x40013EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int servedCount;

	[Token(Token = "0x40013F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int remainingCount;

	[Token(Token = "0x40013F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private StringBuilder stringBuilder;

	[Token(Token = "0x40013F2")]
	private const string localizationSingular = "stargoal_serve_customers_singular";

	[Token(Token = "0x40013F3")]
	private const string localizationPlural = "stargoal_serve_customers_plural";

	[Token(Token = "0x40013F4")]
	private const string localizationResultsSingular = "stargoal_results_serve_customers_singular";

	[Token(Token = "0x40013F5")]
	private const string localizationResultsPlural = "stargoal_results_serve_customers_plural";

	[Token(Token = "0x40013F6")]
	private const string replaceAmount = "{amount}";

	[Token(Token = "0x1700025F")]
	public override GoalType goalType
	{
		[Token(Token = "0x6001307")]
		[Address(RVA = "0x85F658", Offset = "0x85F658", VA = "0x85F658", Slot = "6")]
		get
		{
			return default(GoalType);
		}
	}

	[Token(Token = "0x17000260")]
	public override string GoalDescription
	{
		[Token(Token = "0x6001308")]
		[Address(RVA = "0x85F660", Offset = "0x85F660", VA = "0x85F660", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000261")]
	public override string GoalResultsDescription
	{
		[Token(Token = "0x6001309")]
		[Address(RVA = "0x85F7DC", Offset = "0x85F7DC", VA = "0x85F7DC", Slot = "8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600130A")]
	[Address(RVA = "0x85F668", Offset = "0x85F668", VA = "0x85F668")]
	private string getDescription(bool isResults)
	{
		return null;
	}

	[Token(Token = "0x600130B")]
	[Address(RVA = "0x85F7E4", Offset = "0x85F7E4", VA = "0x85F7E4")]
	public void Start()
	{
	}

	[Token(Token = "0x600130C")]
	[Address(RVA = "0x85F874", Offset = "0x85F874", VA = "0x85F874", Slot = "9")]
	public override void ActivateGoal(LevelData level, LevelData.GoalData goalData, int playerCount)
	{
	}

	[Token(Token = "0x600130D")]
	[Address(RVA = "0x85F8CC", Offset = "0x85F8CC", VA = "0x85F8CC")]
	private void OnPlateHandedIn(bool wasHandedIn, bool wasPerfect, CustomerType customerType, bool wasClean)
	{
	}

	[Token(Token = "0x600130E")]
	[Address(RVA = "0x85F93C", Offset = "0x85F93C", VA = "0x85F93C", Slot = "14")]
	protected override void SendSyncData(PhotonStream stream)
	{
	}

	[Token(Token = "0x600130F")]
	[Address(RVA = "0x85FA04", Offset = "0x85FA04", VA = "0x85FA04", Slot = "15")]
	protected override void ReceiveSyncData(PhotonStream stream, GoalState oldState)
	{
	}

	[Token(Token = "0x6001310")]
	[Address(RVA = "0x85FB3C", Offset = "0x85FB3C", VA = "0x85FB3C", Slot = "11")]
	public override string GetPreRoundIconText()
	{
		return null;
	}

	[Token(Token = "0x6001311")]
	[Address(RVA = "0x85FBC0", Offset = "0x85FBC0", VA = "0x85FBC0", Slot = "12")]
	public override string GetRoundIconText()
	{
		return null;
	}

	[Token(Token = "0x6001312")]
	[Address(RVA = "0x85FC60", Offset = "0x85FC60", VA = "0x85FC60")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x6001313")]
	[Address(RVA = "0x85FD44", Offset = "0x85FD44", VA = "0x85FD44")]
	public GoalServeManyCustomers()
	{
	}
}
[Token(Token = "0x20002C3")]
public class GoalServeManyPerfect : StarGoal, IPunObservable
{
	[Token(Token = "0x40013F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int targetCount;

	[Token(Token = "0x40013F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int servedCount;

	[Token(Token = "0x40013F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int remainingCount;

	[Token(Token = "0x40013FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private StringBuilder stringBuilder;

	[Token(Token = "0x40013FB")]
	private const string localizationSingular = "stargoal_serve_perfects_singular";

	[Token(Token = "0x40013FC")]
	private const string localizationPlural = "stargoal_serve_perfects_plural";

	[Token(Token = "0x40013FD")]
	private const string localizationResultsSingular = "stargoal_results_serve_perfects_singular";

	[Token(Token = "0x40013FE")]
	private const string localizationResultsPlural = "stargoal_results_serve_perfects_plural";

	[Token(Token = "0x40013FF")]
	private const string replaceAmount = "{amount}";

	[Token(Token = "0x17000262")]
	public override GoalType goalType
	{
		[Token(Token = "0x6001314")]
		[Address(RVA = "0x85FDAC", Offset = "0x85FDAC", VA = "0x85FDAC", Slot = "6")]
		get
		{
			return default(GoalType);
		}
	}

	[Token(Token = "0x17000263")]
	public override string GoalDescription
	{
		[Token(Token = "0x6001315")]
		[Address(RVA = "0x85FDB4", Offset = "0x85FDB4", VA = "0x85FDB4", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000264")]
	public override string GoalResultsDescription
	{
		[Token(Token = "0x6001316")]
		[Address(RVA = "0x85FF30", Offset = "0x85FF30", VA = "0x85FF30", Slot = "8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001317")]
	[Address(RVA = "0x85FDBC", Offset = "0x85FDBC", VA = "0x85FDBC")]
	private string getDescription(bool isResults)
	{
		return null;
	}

	[Token(Token = "0x6001318")]
	[Address(RVA = "0x85FF38", Offset = "0x85FF38", VA = "0x85FF38")]
	public void Start()
	{
	}

	[Token(Token = "0x6001319")]
	[Address(RVA = "0x85FFC8", Offset = "0x85FFC8", VA = "0x85FFC8", Slot = "9")]
	public override void ActivateGoal(LevelData level, LevelData.GoalData goalData, int playerCount)
	{
	}

	[Token(Token = "0x600131A")]
	[Address(RVA = "0x860020", Offset = "0x860020", VA = "0x860020")]
	private void OnPlateHandedIn(bool wasHandedIn, bool wasPerfect, CustomerType customerType, bool wasClean)
	{
	}

	[Token(Token = "0x600131B")]
	[Address(RVA = "0x860094", Offset = "0x860094", VA = "0x860094", Slot = "14")]
	protected override void SendSyncData(PhotonStream stream)
	{
	}

	[Token(Token = "0x600131C")]
	[Address(RVA = "0x86015C", Offset = "0x86015C", VA = "0x86015C", Slot = "15")]
	protected override void ReceiveSyncData(PhotonStream stream, GoalState oldState)
	{
	}

	[Token(Token = "0x600131D")]
	[Address(RVA = "0x860294", Offset = "0x860294", VA = "0x860294", Slot = "11")]
	public override string GetPreRoundIconText()
	{
		return null;
	}

	[Token(Token = "0x600131E")]
	[Address(RVA = "0x860318", Offset = "0x860318", VA = "0x860318", Slot = "12")]
	public override string GetRoundIconText()
	{
		return null;
	}

	[Token(Token = "0x600131F")]
	[Address(RVA = "0x8603B8", Offset = "0x8603B8", VA = "0x8603B8")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x6001320")]
	[Address(RVA = "0x86049C", Offset = "0x86049C", VA = "0x86049C")]
	public GoalServeManyPerfect()
	{
	}
}
[Token(Token = "0x20002C4")]
public class GoalServeManyPerfectsFinalLevel : StarGoal, IPunObservable
{
	[Token(Token = "0x4001400")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int targetCount;

	[Token(Token = "0x4001401")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int servedCount;

	[Token(Token = "0x4001402")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int remainingCount;

	[Token(Token = "0x4001403")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private StringBuilder stringBuilder;

	[Token(Token = "0x4001404")]
	private const string localizationSingular = "stargoal_serve_perfects_singular";

	[Token(Token = "0x4001405")]
	private const string localizationPlural = "stargoal_serve_perfects_plural";

	[Token(Token = "0x4001406")]
	private const string localizationResultsSingular = "stargoal_results_serve_perfects_singular";

	[Token(Token = "0x4001407")]
	private const string localizationResultsPlural = "stargoal_results_serve_perfects_plural";

	[Token(Token = "0x4001408")]
	private const string replaceAmount = "{amount}";

	[Token(Token = "0x17000265")]
	public override GoalType goalType
	{
		[Token(Token = "0x6001321")]
		[Address(RVA = "0x860504", Offset = "0x860504", VA = "0x860504", Slot = "6")]
		get
		{
			return default(GoalType);
		}
	}

	[Token(Token = "0x17000266")]
	public override string GoalDescription
	{
		[Token(Token = "0x6001322")]
		[Address(RVA = "0x86050C", Offset = "0x86050C", VA = "0x86050C", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000267")]
	public override string GoalResultsDescription
	{
		[Token(Token = "0x6001323")]
		[Address(RVA = "0x860688", Offset = "0x860688", VA = "0x860688", Slot = "8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001324")]
	[Address(RVA = "0x860514", Offset = "0x860514", VA = "0x860514")]
	private string getDescription(bool isResults)
	{
		return null;
	}

	[Token(Token = "0x6001325")]
	[Address(RVA = "0x860690", Offset = "0x860690", VA = "0x860690")]
	public void Start()
	{
	}

	[Token(Token = "0x6001326")]
	[Address(RVA = "0x860720", Offset = "0x860720", VA = "0x860720", Slot = "9")]
	public override void ActivateGoal(LevelData level, LevelData.GoalData goalData, int playerCount)
	{
	}

	[Token(Token = "0x6001327")]
	[Address(RVA = "0x86083C", Offset = "0x86083C", VA = "0x86083C")]
	private void OnPlateHandedIn(bool wasHandedIn, bool wasPerfect, CustomerType customerType, bool wasClean)
	{
	}

	[Token(Token = "0x6001328")]
	[Address(RVA = "0x8608B0", Offset = "0x8608B0", VA = "0x8608B0", Slot = "14")]
	protected override void SendSyncData(PhotonStream stream)
	{
	}

	[Token(Token = "0x6001329")]
	[Address(RVA = "0x860978", Offset = "0x860978", VA = "0x860978", Slot = "15")]
	protected override void ReceiveSyncData(PhotonStream stream, GoalState oldState)
	{
	}

	[Token(Token = "0x600132A")]
	[Address(RVA = "0x860AB0", Offset = "0x860AB0", VA = "0x860AB0", Slot = "11")]
	public override string GetPreRoundIconText()
	{
		return null;
	}

	[Token(Token = "0x600132B")]
	[Address(RVA = "0x860B34", Offset = "0x860B34", VA = "0x860B34", Slot = "12")]
	public override string GetRoundIconText()
	{
		return null;
	}

	[Token(Token = "0x600132C")]
	[Address(RVA = "0x860BD4", Offset = "0x860BD4", VA = "0x860BD4")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x600132D")]
	[Address(RVA = "0x860CB8", Offset = "0x860CB8", VA = "0x860CB8")]
	public GoalServeManyPerfectsFinalLevel()
	{
	}
}
[Token(Token = "0x20002C5")]
public class GoalServePerfectTo : StarGoal
{
	[Token(Token = "0x4001409")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private CustomerType target;

	[Token(Token = "0x400140A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int targetCount;

	[Token(Token = "0x400140B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int servedCount;

	[Token(Token = "0x400140C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int remainingCount;

	[Token(Token = "0x400140D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private StringBuilder stringBuilder;

	[Token(Token = "0x400140E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private CookingRound cookingRound;

	[Token(Token = "0x400140F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private readonly string[] localizationSingular;

	[Token(Token = "0x4001410")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private readonly string[] localizationPlural;

	[Token(Token = "0x4001411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private readonly string[] localizationResultsSingular;

	[Token(Token = "0x4001412")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private readonly string[] localizationResultsPlural;

	[Token(Token = "0x4001413")]
	private const string replaceAmount = "{amount}";

	[Token(Token = "0x17000268")]
	public override GoalType goalType
	{
		[Token(Token = "0x600132E")]
		[Address(RVA = "0x860D20", Offset = "0x860D20", VA = "0x860D20", Slot = "6")]
		get
		{
			return default(GoalType);
		}
	}

	[Token(Token = "0x17000269")]
	public override string GoalDescription
	{
		[Token(Token = "0x600132F")]
		[Address(RVA = "0x860D28", Offset = "0x860D28", VA = "0x860D28", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700026A")]
	public override string GoalResultsDescription
	{
		[Token(Token = "0x6001330")]
		[Address(RVA = "0x860F58", Offset = "0x860F58", VA = "0x860F58", Slot = "8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001331")]
	[Address(RVA = "0x860D30", Offset = "0x860D30", VA = "0x860D30")]
	private string getDescription(bool isResults)
	{
		return null;
	}

	[Token(Token = "0x6001332")]
	[Address(RVA = "0x860F60", Offset = "0x860F60", VA = "0x860F60")]
	public void Start()
	{
	}

	[Token(Token = "0x6001333")]
	[Address(RVA = "0x8610F4", Offset = "0x8610F4", VA = "0x8610F4", Slot = "9")]
	public override void ActivateGoal(LevelData level, LevelData.GoalData goalData, int playerCount)
	{
	}

	[Token(Token = "0x6001334")]
	[Address(RVA = "0x8611A0", Offset = "0x8611A0", VA = "0x8611A0")]
	private void OnPlateHandedIn(bool wasHandedIn, bool wasPerfect, CustomerType customerType, bool wasClean)
	{
	}

	[Token(Token = "0x6001335")]
	[Address(RVA = "0x86121C", Offset = "0x86121C", VA = "0x86121C")]
	private void OnRoundEnded()
	{
	}

	[Token(Token = "0x6001336")]
	[Address(RVA = "0x861248", Offset = "0x861248", VA = "0x861248", Slot = "14")]
	protected override void SendSyncData(PhotonStream stream)
	{
	}

	[Token(Token = "0x6001337")]
	[Address(RVA = "0x861334", Offset = "0x861334", VA = "0x861334", Slot = "15")]
	protected override void ReceiveSyncData(PhotonStream stream, GoalState oldState)
	{
	}

	[Token(Token = "0x6001338")]
	[Address(RVA = "0x8614CC", Offset = "0x8614CC", VA = "0x8614CC", Slot = "10")]
	public override Sprite GetRoundIcon()
	{
		return null;
	}

	[Token(Token = "0x6001339")]
	[Address(RVA = "0x8615AC", Offset = "0x8615AC", VA = "0x8615AC", Slot = "11")]
	public override string GetPreRoundIconText()
	{
		return null;
	}

	[Token(Token = "0x600133A")]
	[Address(RVA = "0x861630", Offset = "0x861630", VA = "0x861630", Slot = "12")]
	public override string GetRoundIconText()
	{
		return null;
	}

	[Token(Token = "0x600133B")]
	[Address(RVA = "0x8616D0", Offset = "0x8616D0", VA = "0x8616D0")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x600133C")]
	[Address(RVA = "0x861848", Offset = "0x861848", VA = "0x861848")]
	public GoalServePerfectTo()
	{
	}
}
[Token(Token = "0x20002C6")]
public class GoalSpeedRun : StarGoal, IPunObservable
{
	[Token(Token = "0x20002C7")]
	public enum Pace
	{
		[Token(Token = "0x400142B")]
		Slow,
		[Token(Token = "0x400142C")]
		Medium,
		[Token(Token = "0x400142D")]
		Fast
	}

	[Token(Token = "0x4001414")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Sprite[] preRoundIcons;

	[Token(Token = "0x4001415")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private readonly float[] warningThresholds;

	[Token(Token = "0x4001416")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int startTime;

	[Token(Token = "0x4001417")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float elapsedTime;

	[Token(Token = "0x4001418")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float previousTimeStamp;

	[Token(Token = "0x4001419")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private bool timerActive;

	[Token(Token = "0x400141A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int goalTimeThreshold;

	[Token(Token = "0x400141B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private int nextTimerWarning;

	[Token(Token = "0x400141C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int targetCount;

	[Token(Token = "0x400141D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private int servedCount;

	[Token(Token = "0x400141E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private int remainingCount;

	[Token(Token = "0x400141F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private Pace goalPace;

	[Token(Token = "0x4001420")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private CookingRound cookingRound;

	[Token(Token = "0x4001421")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private TimeSlowdownHandler slowdown;

	[Token(Token = "0x4001422")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private StringBuilder stringBuilder;

	[Token(Token = "0x4001423")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private string latestRoundIconText;

	[Token(Token = "0x4001424")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private bool roundIconTextChanged;

	[Token(Token = "0x4001425")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private readonly string[] localizationSingular;

	[Token(Token = "0x4001426")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private readonly string[] localizationPlural;

	[Token(Token = "0x4001427")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private readonly string[] localizationResultsSingular;

	[Token(Token = "0x4001428")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private readonly string[] localizationResultsPlural;

	[Token(Token = "0x4001429")]
	private const string replaceAmount = "{amount}";

	[Token(Token = "0x1700026B")]
	public override GoalType goalType
	{
		[Token(Token = "0x600133D")]
		[Address(RVA = "0x862244", Offset = "0x862244", VA = "0x862244", Slot = "6")]
		get
		{
			return default(GoalType);
		}
	}

	[Token(Token = "0x1700026C")]
	public override string GoalDescription
	{
		[Token(Token = "0x600133E")]
		[Address(RVA = "0x86224C", Offset = "0x86224C", VA = "0x86224C", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700026D")]
	public override string GoalResultsDescription
	{
		[Token(Token = "0x600133F")]
		[Address(RVA = "0x8623C4", Offset = "0x8623C4", VA = "0x8623C4", Slot = "8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001340")]
	[Address(RVA = "0x8623CC", Offset = "0x8623CC", VA = "0x8623CC")]
	public void Start()
	{
	}

	[Token(Token = "0x6001341")]
	[Address(RVA = "0x862254", Offset = "0x862254", VA = "0x862254")]
	private string GenerateDescription(bool isResults)
	{
		return null;
	}

	[Token(Token = "0x6001342")]
	[Address(RVA = "0x8625FC", Offset = "0x8625FC", VA = "0x8625FC", Slot = "9")]
	public override void ActivateGoal(LevelData level, LevelData.GoalData goalData, int playerCount)
	{
	}

	[Token(Token = "0x6001343")]
	[Address(RVA = "0x862698", Offset = "0x862698", VA = "0x862698")]
	private void OnRoundStarted()
	{
	}

	[Token(Token = "0x6001344")]
	[Address(RVA = "0x862718", Offset = "0x862718", VA = "0x862718")]
	private void Update()
	{
	}

	[Token(Token = "0x6001345")]
	[Address(RVA = "0x862894", Offset = "0x862894", VA = "0x862894")]
	private void OnPlateHandedIn(bool wasHandedIn, bool wasPerfect, CustomerType customerType, bool wasClean)
	{
	}

	[Token(Token = "0x6001346")]
	[Address(RVA = "0x86294C", Offset = "0x86294C", VA = "0x86294C", Slot = "10")]
	public override Sprite GetRoundIcon()
	{
		return null;
	}

	[Token(Token = "0x6001347")]
	[Address(RVA = "0x862980", Offset = "0x862980", VA = "0x862980", Slot = "14")]
	protected override void SendSyncData(PhotonStream stream)
	{
	}

	[Token(Token = "0x6001348")]
	[Address(RVA = "0x862B48", Offset = "0x862B48", VA = "0x862B48", Slot = "15")]
	protected override void ReceiveSyncData(PhotonStream stream, GoalState oldState)
	{
	}

	[Token(Token = "0x6001349")]
	[Address(RVA = "0x862E3C", Offset = "0x862E3C", VA = "0x862E3C", Slot = "13")]
	public override float TimeFractionLeft()
	{
		return default(float);
	}

	[Token(Token = "0x600134A")]
	[Address(RVA = "0x862E68", Offset = "0x862E68", VA = "0x862E68", Slot = "11")]
	public override string GetPreRoundIconText()
	{
		return null;
	}

	[Token(Token = "0x600134B")]
	[Address(RVA = "0x862EEC", Offset = "0x862EEC", VA = "0x862EEC", Slot = "12")]
	public override string GetRoundIconText()
	{
		return null;
	}

	[Token(Token = "0x600134C")]
	[Address(RVA = "0x862FD4", Offset = "0x862FD4", VA = "0x862FD4")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x600134D")]
	[Address(RVA = "0x86314C", Offset = "0x86314C", VA = "0x86314C")]
	public GoalSpeedRun()
	{
	}
}
[Token(Token = "0x20002C8")]
public class GoalThrowMany : StarGoal
{
	[Token(Token = "0x400142E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int targetCount;

	[Token(Token = "0x400142F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int thrownCount;

	[Token(Token = "0x4001430")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private CookingRound cookingRound;

	[Token(Token = "0x1700026E")]
	public override GoalType goalType
	{
		[Token(Token = "0x600134E")]
		[Address(RVA = "0x86359C", Offset = "0x86359C", VA = "0x86359C", Slot = "6")]
		get
		{
			return default(GoalType);
		}
	}

	[Token(Token = "0x1700026F")]
	public override string GoalDescription
	{
		[Token(Token = "0x600134F")]
		[Address(RVA = "0x8635A4", Offset = "0x8635A4", VA = "0x8635A4", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000270")]
	public override string GoalResultsDescription
	{
		[Token(Token = "0x6001350")]
		[Address(RVA = "0x8636AC", Offset = "0x8636AC", VA = "0x8636AC", Slot = "8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001351")]
	[Address(RVA = "0x8637B4", Offset = "0x8637B4", VA = "0x8637B4")]
	public void Start()
	{
	}

	[Token(Token = "0x6001352")]
	[Address(RVA = "0x863AA0", Offset = "0x863AA0", VA = "0x863AA0", Slot = "9")]
	public override void ActivateGoal(LevelData level, LevelData.GoalData goalData, int playerCount)
	{
	}

	[Token(Token = "0x6001353")]
	[Address(RVA = "0x863AB4", Offset = "0x863AB4", VA = "0x863AB4")]
	private void OnIngredientThrownOnPlate()
	{
	}

	[Token(Token = "0x6001354")]
	[Address(RVA = "0x863AF0", Offset = "0x863AF0", VA = "0x863AF0")]
	private void OnRoundEnded()
	{
	}

	[Token(Token = "0x6001355")]
	[Address(RVA = "0x863B1C", Offset = "0x863B1C", VA = "0x863B1C", Slot = "14")]
	protected override void SendSyncData(PhotonStream stream)
	{
	}

	[Token(Token = "0x6001356")]
	[Address(RVA = "0x863BB8", Offset = "0x863BB8", VA = "0x863BB8", Slot = "15")]
	protected override void ReceiveSyncData(PhotonStream stream, GoalState oldState)
	{
	}

	[Token(Token = "0x6001357")]
	[Address(RVA = "0x863CB8", Offset = "0x863CB8", VA = "0x863CB8", Slot = "11")]
	public override string GetPreRoundIconText()
	{
		return null;
	}

	[Token(Token = "0x6001358")]
	[Address(RVA = "0x863D3C", Offset = "0x863D3C", VA = "0x863D3C", Slot = "12")]
	public override string GetRoundIconText()
	{
		return null;
	}

	[Token(Token = "0x6001359")]
	[Address(RVA = "0x863DE8", Offset = "0x863DE8", VA = "0x863DE8")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x600135A")]
	[Address(RVA = "0x863FFC", Offset = "0x863FFC", VA = "0x863FFC")]
	public GoalThrowMany()
	{
	}
}
[Token(Token = "0x20002C9")]
public class GoalTutorial : StarGoal, IPunObservable
{
	[Token(Token = "0x4001431")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Sprite[] icons;

	[Token(Token = "0x4001432")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int goalSlot;

	[Token(Token = "0x4001433")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private TutorialMode tutorialMode;

	[Token(Token = "0x4001434")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int handInCount;

	[Token(Token = "0x4001435")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private int targetCount;

	[Token(Token = "0x4001436")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private StringBuilder stringBuilder;

	[Token(Token = "0x4001437")]
	private const string localizationSingular = "stargoal_serve_customers_singular";

	[Token(Token = "0x4001438")]
	private const string localizationPlural = "stargoal_serve_customers_plural";

	[Token(Token = "0x4001439")]
	private const string localizationPerfectSingular = "stargoal_serve_perfects_singular";

	[Token(Token = "0x400143A")]
	private const string replaceAmount = "{amount}";

	[Token(Token = "0x17000271")]
	public override GoalType goalType
	{
		[Token(Token = "0x600135B")]
		[Address(RVA = "0x864004", Offset = "0x864004", VA = "0x864004", Slot = "6")]
		get
		{
			return default(GoalType);
		}
	}

	[Token(Token = "0x17000272")]
	public override string GoalDescription
	{
		[Token(Token = "0x600135C")]
		[Address(RVA = "0x86400C", Offset = "0x86400C", VA = "0x86400C", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000273")]
	public override string GoalResultsDescription
	{
		[Token(Token = "0x600135D")]
		[Address(RVA = "0x864030", Offset = "0x864030", VA = "0x864030", Slot = "8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600135E")]
	[Address(RVA = "0x864044", Offset = "0x864044", VA = "0x864044")]
	public void Start()
	{
	}

	[Token(Token = "0x600135F")]
	[Address(RVA = "0x864194", Offset = "0x864194", VA = "0x864194", Slot = "9")]
	public override void ActivateGoal(LevelData level, LevelData.GoalData goalData, int playerCount)
	{
	}

	[Token(Token = "0x6001360")]
	[Address(RVA = "0x8642E8", Offset = "0x8642E8", VA = "0x8642E8")]
	private void OnPlateHandedIn(bool wasHandedIn, bool wasPerfect, CustomerType customerType, bool wasClean)
	{
	}

	[Token(Token = "0x6001361")]
	[Address(RVA = "0x864344", Offset = "0x864344", VA = "0x864344", Slot = "12")]
	public override string GetRoundIconText()
	{
		return null;
	}

	[Token(Token = "0x6001362")]
	[Address(RVA = "0x8643E4", Offset = "0x8643E4", VA = "0x8643E4", Slot = "10")]
	public override Sprite GetRoundIcon()
	{
		return null;
	}

	[Token(Token = "0x6001363")]
	[Address(RVA = "0x864418", Offset = "0x864418", VA = "0x864418", Slot = "14")]
	protected override void SendSyncData(PhotonStream stream)
	{
	}

	[Token(Token = "0x6001364")]
	[Address(RVA = "0x8644E0", Offset = "0x8644E0", VA = "0x8644E0", Slot = "15")]
	protected override void ReceiveSyncData(PhotonStream stream, GoalState oldState)
	{
	}

	[Token(Token = "0x6001365")]
	[Address(RVA = "0x864020", Offset = "0x864020", VA = "0x864020")]
	private string GetDescription(int goalSlot)
	{
		return null;
	}

	[Token(Token = "0x6001366")]
	[Address(RVA = "0x864680", Offset = "0x864680", VA = "0x864680")]
	private string getServeXDescription()
	{
		return null;
	}

	[Token(Token = "0x6001367")]
	[Address(RVA = "0x864618", Offset = "0x864618", VA = "0x864618")]
	private string getServePerfectDescription()
	{
		return null;
	}

	[Token(Token = "0x6001368")]
	[Address(RVA = "0x8647B8", Offset = "0x8647B8", VA = "0x8647B8")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x6001369")]
	[Address(RVA = "0x86489C", Offset = "0x86489C", VA = "0x86489C")]
	public GoalTutorial()
	{
	}
}
[Token(Token = "0x20002CA")]
public class GoalUseConsumable : StarGoal, IPunObservable
{
	[Token(Token = "0x400143B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int targetCount;

	[Token(Token = "0x400143C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int usedCount;

	[Token(Token = "0x400143D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private CookingRound cookingRound;

	[Token(Token = "0x400143E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private StringBuilder stringBuilder;

	[Token(Token = "0x400143F")]
	private const string localizationSingular = "stargoal_use_anypotion";

	[Token(Token = "0x4001440")]
	private const string localizationPlural = "stargoal_use_anypotions";

	[Token(Token = "0x4001441")]
	private const string localizationResultsSingular = "stargoal_results_use_anypotion";

	[Token(Token = "0x4001442")]
	private const string localizationResultsPlural = "stargoal_results_use_anypotions";

	[Token(Token = "0x4001443")]
	private const string replaceAmount = "{amount}";

	[Token(Token = "0x17000274")]
	public override GoalType goalType
	{
		[Token(Token = "0x600136A")]
		[Address(RVA = "0x864930", Offset = "0x864930", VA = "0x864930", Slot = "6")]
		get
		{
			return default(GoalType);
		}
	}

	[Token(Token = "0x17000275")]
	public override string GoalDescription
	{
		[Token(Token = "0x600136B")]
		[Address(RVA = "0x864938", Offset = "0x864938", VA = "0x864938", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000276")]
	public override string GoalResultsDescription
	{
		[Token(Token = "0x600136C")]
		[Address(RVA = "0x864AB4", Offset = "0x864AB4", VA = "0x864AB4", Slot = "8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600136D")]
	[Address(RVA = "0x864940", Offset = "0x864940", VA = "0x864940")]
	private string getDescription(bool isResults)
	{
		return null;
	}

	[Token(Token = "0x600136E")]
	[Address(RVA = "0x864ABC", Offset = "0x864ABC", VA = "0x864ABC")]
	public void Start()
	{
	}

	[Token(Token = "0x600136F")]
	[Address(RVA = "0x864DB0", Offset = "0x864DB0", VA = "0x864DB0", Slot = "9")]
	public override void ActivateGoal(LevelData level, LevelData.GoalData goalData, int playerCount)
	{
	}

	[Token(Token = "0x6001370")]
	[Address(RVA = "0x864DF4", Offset = "0x864DF4", VA = "0x864DF4")]
	private void OnConsumableUsed(ConsumableType type)
	{
	}

	[Token(Token = "0x6001371")]
	[Address(RVA = "0x864E30", Offset = "0x864E30", VA = "0x864E30")]
	private void OnRoundEnded()
	{
	}

	[Token(Token = "0x6001372")]
	[Address(RVA = "0x864E5C", Offset = "0x864E5C", VA = "0x864E5C", Slot = "11")]
	public override string GetPreRoundIconText()
	{
		return null;
	}

	[Token(Token = "0x6001373")]
	[Address(RVA = "0x864EE0", Offset = "0x864EE0", VA = "0x864EE0", Slot = "12")]
	public override string GetRoundIconText()
	{
		return null;
	}

	[Token(Token = "0x6001374")]
	[Address(RVA = "0x864F80", Offset = "0x864F80", VA = "0x864F80", Slot = "14")]
	protected override void SendSyncData(PhotonStream stream)
	{
	}

	[Token(Token = "0x6001375")]
	[Address(RVA = "0x86501C", Offset = "0x86501C", VA = "0x86501C", Slot = "15")]
	protected override void ReceiveSyncData(PhotonStream stream, GoalState oldState)
	{
	}

	[Token(Token = "0x6001376")]
	[Address(RVA = "0x86511C", Offset = "0x86511C", VA = "0x86511C")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x6001377")]
	[Address(RVA = "0x865330", Offset = "0x865330", VA = "0x865330")]
	public GoalUseConsumable()
	{
	}
}
[Token(Token = "0x20002CB")]
public class GoalUseConsumableX : StarGoal, IPunObservable
{
	[Token(Token = "0x4001444")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int targetCount;

	[Token(Token = "0x4001445")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ConsumableType target;

	[Token(Token = "0x4001446")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int usedCount;

	[Token(Token = "0x4001447")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private CookingRound cookingRound;

	[Token(Token = "0x4001448")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private StringBuilder stringBuilder;

	[Token(Token = "0x4001449")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private readonly string[] localizationSingular;

	[Token(Token = "0x400144A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private readonly string[] localizationPlural;

	[Token(Token = "0x400144B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private readonly string[] localizationResultsSingular;

	[Token(Token = "0x400144C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private readonly string[] localizationResultsPlural;

	[Token(Token = "0x400144D")]
	private const string replaceAmount = "{amount}";

	[Token(Token = "0x17000277")]
	public override GoalType goalType
	{
		[Token(Token = "0x6001378")]
		[Address(RVA = "0x865398", Offset = "0x865398", VA = "0x865398", Slot = "6")]
		get
		{
			return default(GoalType);
		}
	}

	[Token(Token = "0x17000278")]
	public override string GoalDescription
	{
		[Token(Token = "0x6001379")]
		[Address(RVA = "0x8653A0", Offset = "0x8653A0", VA = "0x8653A0", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000279")]
	public override string GoalResultsDescription
	{
		[Token(Token = "0x600137A")]
		[Address(RVA = "0x8655D0", Offset = "0x8655D0", VA = "0x8655D0", Slot = "8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600137B")]
	[Address(RVA = "0x8653A8", Offset = "0x8653A8", VA = "0x8653A8")]
	private string getDescription(bool isResults)
	{
		return null;
	}

	[Token(Token = "0x600137C")]
	[Address(RVA = "0x8655D8", Offset = "0x8655D8", VA = "0x8655D8")]
	public void Start()
	{
	}

	[Token(Token = "0x600137D")]
	[Address(RVA = "0x865768", Offset = "0x865768", VA = "0x865768", Slot = "9")]
	public override void ActivateGoal(LevelData level, LevelData.GoalData goalData, int playerCount)
	{
	}

	[Token(Token = "0x600137E")]
	[Address(RVA = "0x8657BC", Offset = "0x8657BC", VA = "0x8657BC")]
	private void OnConsumableUsed(ConsumableType type)
	{
	}

	[Token(Token = "0x600137F")]
	[Address(RVA = "0x865808", Offset = "0x865808", VA = "0x865808")]
	private void OnRoundEnded()
	{
	}

	[Token(Token = "0x6001380")]
	[Address(RVA = "0x865834", Offset = "0x865834", VA = "0x865834", Slot = "10")]
	public override Sprite GetRoundIcon()
	{
		return null;
	}

	[Token(Token = "0x6001381")]
	[Address(RVA = "0x86591C", Offset = "0x86591C", VA = "0x86591C", Slot = "11")]
	public override string GetPreRoundIconText()
	{
		return null;
	}

	[Token(Token = "0x6001382")]
	[Address(RVA = "0x8659A0", Offset = "0x8659A0", VA = "0x8659A0", Slot = "12")]
	public override string GetRoundIconText()
	{
		return null;
	}

	[Token(Token = "0x6001383")]
	[Address(RVA = "0x865A40", Offset = "0x865A40", VA = "0x865A40", Slot = "14")]
	protected override void SendSyncData(PhotonStream stream)
	{
	}

	[Token(Token = "0x6001384")]
	[Address(RVA = "0x865B08", Offset = "0x865B08", VA = "0x865B08", Slot = "15")]
	protected override void ReceiveSyncData(PhotonStream stream, GoalState oldState)
	{
	}

	[Token(Token = "0x6001385")]
	[Address(RVA = "0x865C3C", Offset = "0x865C3C", VA = "0x865C3C")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x6001386")]
	[Address(RVA = "0x865DB4", Offset = "0x865DB4", VA = "0x865DB4")]
	public GoalUseConsumableX()
	{
	}
}
[Token(Token = "0x20002CC")]
public class GoalUseNoConsumables : StarGoal, IPunObservable
{
	[Token(Token = "0x400144E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int targetCount;

	[Token(Token = "0x400144F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int servedCount;

	[Token(Token = "0x4001450")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int remainingCount;

	[Token(Token = "0x4001451")]
	private const string localizationSingular = "stargoal_use_nopotion_singular";

	[Token(Token = "0x4001452")]
	private const string localizationPlural = "stargoal_use_nopotion_plural";

	[Token(Token = "0x4001453")]
	private const string localizationResultsSingular = "stargoal_results_use_nopotion_singular";

	[Token(Token = "0x4001454")]
	private const string localizationResultsPlural = "stargoal_results_use_nopotion_plural";

	[Token(Token = "0x4001455")]
	private const string replaceAmount = "{amount}";

	[Token(Token = "0x4001456")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private StringBuilder stringBuilder;

	[Token(Token = "0x1700027A")]
	public override GoalType goalType
	{
		[Token(Token = "0x6001387")]
		[Address(RVA = "0x866798", Offset = "0x866798", VA = "0x866798", Slot = "6")]
		get
		{
			return default(GoalType);
		}
	}

	[Token(Token = "0x1700027B")]
	public override string GoalDescription
	{
		[Token(Token = "0x6001388")]
		[Address(RVA = "0x8667A0", Offset = "0x8667A0", VA = "0x8667A0", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700027C")]
	public override string GoalResultsDescription
	{
		[Token(Token = "0x6001389")]
		[Address(RVA = "0x86691C", Offset = "0x86691C", VA = "0x86691C", Slot = "8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600138A")]
	[Address(RVA = "0x866924", Offset = "0x866924", VA = "0x866924")]
	public void Start()
	{
	}

	[Token(Token = "0x600138B")]
	[Address(RVA = "0x8667A8", Offset = "0x8667A8", VA = "0x8667A8")]
	private string GetDescription(bool isResults)
	{
		return null;
	}

	[Token(Token = "0x600138C")]
	[Address(RVA = "0x866A20", Offset = "0x866A20", VA = "0x866A20", Slot = "9")]
	public override void ActivateGoal(LevelData level, LevelData.GoalData goalData, int playerCount)
	{
	}

	[Token(Token = "0x600138D")]
	[Address(RVA = "0x866A78", Offset = "0x866A78", VA = "0x866A78")]
	private void FailGoal(ConsumableType type)
	{
	}

	[Token(Token = "0x600138E")]
	[Address(RVA = "0x866AA4", Offset = "0x866AA4", VA = "0x866AA4")]
	private void OnPlateHandedIn(bool wasHandedIn, bool wasPerfect, CustomerType customerType, bool wasClean)
	{
	}

	[Token(Token = "0x600138F")]
	[Address(RVA = "0x866B30", Offset = "0x866B30", VA = "0x866B30", Slot = "14")]
	protected override void SendSyncData(PhotonStream stream)
	{
	}

	[Token(Token = "0x6001390")]
	[Address(RVA = "0x866BF8", Offset = "0x866BF8", VA = "0x866BF8", Slot = "15")]
	protected override void ReceiveSyncData(PhotonStream stream, GoalState oldState)
	{
	}

	[Token(Token = "0x6001391")]
	[Address(RVA = "0x866D30", Offset = "0x866D30", VA = "0x866D30", Slot = "11")]
	public override string GetPreRoundIconText()
	{
		return null;
	}

	[Token(Token = "0x6001392")]
	[Address(RVA = "0x866DB4", Offset = "0x866DB4", VA = "0x866DB4", Slot = "12")]
	public override string GetRoundIconText()
	{
		return null;
	}

	[Token(Token = "0x6001393")]
	[Address(RVA = "0x866E54", Offset = "0x866E54", VA = "0x866E54")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x6001394")]
	[Address(RVA = "0x866FA8", Offset = "0x866FA8", VA = "0x866FA8")]
	public GoalUseNoConsumables()
	{
	}
}
[Token(Token = "0x20002CD")]
public class GoalWashAllPlates : StarGoal
{
	[Token(Token = "0x4001457")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int remainingCount;

	[Token(Token = "0x4001458")]
	private const string localizationKey = "stargoal_wash_all";

	[Token(Token = "0x4001459")]
	private const string localizationResultsKey = "stargoal_results_wash_all";

	[Token(Token = "0x1700027D")]
	public override GoalType goalType
	{
		[Token(Token = "0x6001395")]
		[Address(RVA = "0x867010", Offset = "0x867010", VA = "0x867010", Slot = "6")]
		get
		{
			return default(GoalType);
		}
	}

	[Token(Token = "0x1700027E")]
	public override string GoalDescription
	{
		[Token(Token = "0x6001396")]
		[Address(RVA = "0x867018", Offset = "0x867018", VA = "0x867018", Slot = "7")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700027F")]
	public override string GoalResultsDescription
	{
		[Token(Token = "0x6001397")]
		[Address(RVA = "0x867080", Offset = "0x867080", VA = "0x867080", Slot = "8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6001398")]
	[Address(RVA = "0x8670E8", Offset = "0x8670E8", VA = "0x8670E8")]
	public void Start()
	{
	}

	[Token(Token = "0x6001399")]
	[Address(RVA = "0x867178", Offset = "0x867178", VA = "0x867178", Slot = "9")]
	public override void ActivateGoal(LevelData level, LevelData.GoalData goalData, int playerCount)
	{
	}

	[Token(Token = "0x600139A")]
	[Address(RVA = "0x8671A8", Offset = "0x8671A8", VA = "0x8671A8")]
	private void OnPlateHandedIn(bool wasHandedIn, bool wasPerfect, CustomerType customerType, bool wasClean)
	{
	}

	[Token(Token = "0x600139B")]
	[Address(RVA = "0x8671F8", Offset = "0x8671F8", VA = "0x8671F8", Slot = "14")]
	protected override void SendSyncData(PhotonStream stream)
	{
	}

	[Token(Token = "0x600139C")]
	[Address(RVA = "0x867270", Offset = "0x867270", VA = "0x867270", Slot = "15")]
	protected override void ReceiveSyncData(PhotonStream stream, GoalState oldState)
	{
	}

	[Token(Token = "0x600139D")]
	[Address(RVA = "0x867310", Offset = "0x867310", VA = "0x867310")]
	public void OnDestroy()
	{
	}

	[Token(Token = "0x600139E")]
	[Address(RVA = "0x8673F4", Offset = "0x8673F4", VA = "0x8673F4")]
	public GoalWashAllPlates()
	{
	}
}
[Token(Token = "0x20002CE")]
public enum GoalState
{
	[Token(Token = "0x400145B")]
	Inactive,
	[Token(Token = "0x400145C")]
	Ongoing,
	[Token(Token = "0x400145D")]
	Failed,
	[Token(Token = "0x400145E")]
	Cleared
}
[Token(Token = "0x20002CF")]
public abstract class StarGoal : NetworkedBehaviour, IPunObservable
{
	[Token(Token = "0x400145F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	protected Sprite icon;

	[Token(Token = "0x4001460")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GoalState stateBacking;

	[Token(Token = "0x4001461")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	protected int playerCount;

	[Token(Token = "0x4001462")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected bool displayDataChanged;

	[Token(Token = "0x4001463")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected StarGoalsHandler goalsHandlerBacking;

	[Token(Token = "0x4001464")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int goalIndex;

	[Token(Token = "0x17000280")]
	public GoalState State
	{
		[Token(Token = "0x600139F")]
		[Address(RVA = "0x8673FC", Offset = "0x8673FC", VA = "0x8673FC")]
		get
		{
			return default(GoalState);
		}
		[Token(Token = "0x60013A0")]
		[Address(RVA = "0x85E698", Offset = "0x85E698", VA = "0x85E698")]
		set
		{
		}
	}

	[Token(Token = "0x17000281")]
	protected StarGoalsHandler GoalsHandler
	{
		[Token(Token = "0x60013A1")]
		[Address(RVA = "0x85E408", Offset = "0x85E408", VA = "0x85E408")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000282")]
	public abstract GoalType goalType
	{
		[Token(Token = "0x60013A3")]
		get;
	}

	[Token(Token = "0x17000283")]
	public abstract string GoalDescription
	{
		[Token(Token = "0x60013A4")]
		get;
	}

	[Token(Token = "0x17000284")]
	public abstract string GoalResultsDescription
	{
		[Token(Token = "0x60013A5")]
		get;
	}

	[Token(Token = "0x60013A2")]
	[Address(RVA = "0x8675B4", Offset = "0x8675B4", VA = "0x8675B4", Slot = "5")]
	public virtual void Awake()
	{
	}

	[Token(Token = "0x60013A6")]
	[Address(RVA = "0x85EC40", Offset = "0x85EC40", VA = "0x85EC40", Slot = "9")]
	public virtual void ActivateGoal(LevelData level, LevelData.GoalData goalData, int playerCount)
	{
	}

	[Token(Token = "0x60013A7")]
	[Address(RVA = "0x867654", Offset = "0x867654", VA = "0x867654", Slot = "10")]
	public virtual Sprite GetRoundIcon()
	{
		return null;
	}

	[Token(Token = "0x60013A8")]
	[Address(RVA = "0x86765C", Offset = "0x86765C", VA = "0x86765C", Slot = "11")]
	public virtual string GetPreRoundIconText()
	{
		return null;
	}

	[Token(Token = "0x60013A9")]
	[Address(RVA = "0x8676A4", Offset = "0x8676A4", VA = "0x8676A4", Slot = "12")]
	public virtual string GetRoundIconText()
	{
		return null;
	}

	[Token(Token = "0x60013AA")]
	[Address(RVA = "0x8676EC", Offset = "0x8676EC", VA = "0x8676EC", Slot = "13")]
	public virtual float TimeFractionLeft()
	{
		return default(float);
	}

	[Token(Token = "0x60013AB")]
	[Address(RVA = "0x8676F4", Offset = "0x8676F4", VA = "0x8676F4")]
	public bool ConsumeDisplayDataChange()
	{
		return default(bool);
	}

	[Token(Token = "0x60013AC")]
	[Address(RVA = "0x867710", Offset = "0x867710", VA = "0x867710", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60013AD")]
	[Address(RVA = "0x867944", Offset = "0x867944", VA = "0x867944", Slot = "14")]
	protected virtual void SendSyncData(PhotonStream stream)
	{
	}

	[Token(Token = "0x60013AE")]
	[Address(RVA = "0x867948", Offset = "0x867948", VA = "0x867948", Slot = "15")]
	protected virtual void ReceiveSyncData(PhotonStream stream, GoalState oldState)
	{
	}

	[Token(Token = "0x60013AF")]
	[Address(RVA = "0x85E940", Offset = "0x85E940", VA = "0x85E940")]
	protected StarGoal()
	{
	}
}
[Token(Token = "0x20002D0")]
public enum GoalType
{
	[Token(Token = "0x4001466")]
	None = -1,
	[Token(Token = "0x4001467")]
	ServeX,
	[Token(Token = "0x4001468")]
	Speed,
	[Token(Token = "0x4001469")]
	PerfectionX,
	[Token(Token = "0x400146A")]
	NoConsumable,
	[Token(Token = "0x400146B")]
	ServeAll,
	[Token(Token = "0x400146C")]
	PerfectionAll,
	[Token(Token = "0x400146D")]
	ServeManyPerfectsToType,
	[Token(Token = "0x400146E")]
	UseAnyConsumable,
	[Token(Token = "0x400146F")]
	WashAllPlates,
	[Token(Token = "0x4001470")]
	NoRearranging,
	[Token(Token = "0x4001471")]
	ThrowX,
	[Token(Token = "0x4001472")]
	UseConsumableX,
	[Token(Token = "0x4001473")]
	Tutorial,
	[Token(Token = "0x4001474")]
	ServeXPerfectFinalLevel
}
[Token(Token = "0x20002D1")]
public class StarGoalsHandler : SingleInstanceNetworkedBehavior<StarGoalsHandler>, IPunObservable
{
	[Token(Token = "0x20002D2")]
	public delegate void StarGoalsPlateHandedIn(bool wasHandedIn, bool wasPerfect, CustomerType customerType, bool wasClean);

	[Token(Token = "0x20002D3")]
	public delegate void StarGoalsConsumableUsed(ConsumableType type);

	[Token(Token = "0x20002D4")]
	public delegate void StarGoalIngredientThrownOnPlate();

	[Token(Token = "0x20002D5")]
	public delegate void StarGoalsTopIngredientRemoved();

	[Token(Token = "0x20002D6")]
	public delegate void GoalWasCleared();

	[Token(Token = "0x4001475")]
	public const int goalCount = 3;

	[Token(Token = "0x400147B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private StarGoal[] goalPrefabs;

	[Token(Token = "0x400147C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private PhotonView[] activeGoalViews;

	[Token(Token = "0x400147D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private TableCenterUI tableCenterUI;

	[Token(Token = "0x400147E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private StarGoalsWindowUI starGoalsWindowUI;

	[Token(Token = "0x400147F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private StarGoal[] activeGoals;

	[Token(Token = "0x4001480")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Dictionary<GoalType, GameObject> goalPrefabDict;

	[Token(Token = "0x14000029")]
	public event StarGoalsPlateHandedIn OnPlateHandedIn
	{
		[Token(Token = "0x60013B0")]
		[Address(RVA = "0x85EB74", Offset = "0x85EB74", VA = "0x85EB74")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60013B1")]
		[Address(RVA = "0x85F02C", Offset = "0x85F02C", VA = "0x85F02C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400002A")]
	public event StarGoalsConsumableUsed OnConsumableUsed
	{
		[Token(Token = "0x60013B2")]
		[Address(RVA = "0x864D14", Offset = "0x864D14", VA = "0x864D14")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60013B3")]
		[Address(RVA = "0x865294", Offset = "0x865294", VA = "0x865294")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400002B")]
	public event StarGoalIngredientThrownOnPlate OnIngredientThrownOnPlate
	{
		[Token(Token = "0x60013B4")]
		[Address(RVA = "0x863A04", Offset = "0x863A04", VA = "0x863A04")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60013B5")]
		[Address(RVA = "0x863F60", Offset = "0x863F60", VA = "0x863F60")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400002C")]
	public event StarGoalsTopIngredientRemoved OnTopIngredientRemoved
	{
		[Token(Token = "0x60013B6")]
		[Address(RVA = "0x85E5D0", Offset = "0x85E5D0", VA = "0x85E5D0")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60013B7")]
		[Address(RVA = "0x85E89C", Offset = "0x85E89C", VA = "0x85E89C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400002D")]
	public event GoalWasCleared OnGoalCleared
	{
		[Token(Token = "0x60013B8")]
		[Address(RVA = "0x86794C", Offset = "0x86794C", VA = "0x86794C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60013B9")]
		[Address(RVA = "0x8679E8", Offset = "0x8679E8", VA = "0x8679E8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60013BA")]
	[Address(RVA = "0x867A84", Offset = "0x867A84", VA = "0x867A84")]
	private void Start()
	{
	}

	[Token(Token = "0x60013BB")]
	[Address(RVA = "0x867C9C", Offset = "0x867C9C", VA = "0x867C9C")]
	private void Update()
	{
	}

	[Token(Token = "0x60013BC")]
	[Address(RVA = "0x8682B4", Offset = "0x8682B4", VA = "0x8682B4")]
	public void SetGoals(LevelData level)
	{
	}

	[Token(Token = "0x60013BD")]
	[Address(RVA = "0x8678C4", Offset = "0x8678C4", VA = "0x8678C4")]
	public void OnGoalActivated(StarGoal goal, int i)
	{
	}

	[Token(Token = "0x60013BE")]
	[Address(RVA = "0x868690", Offset = "0x868690", VA = "0x868690")]
	public void RemoveActiveGoals()
	{
	}

	[Token(Token = "0x60013BF")]
	[Address(RVA = "0x867404", Offset = "0x867404", VA = "0x867404")]
	public void OnGoalFailed()
	{
	}

	[Token(Token = "0x60013C0")]
	[Address(RVA = "0x867564", Offset = "0x867564", VA = "0x867564")]
	public void OnNewGoalCleared()
	{
	}

	[Token(Token = "0x60013C1")]
	[Address(RVA = "0x868860", Offset = "0x868860", VA = "0x868860")]
	public StarGoal[] GetActiveGoals()
	{
		return null;
	}

	[Token(Token = "0x60013C2")]
	[Address(RVA = "0x868868", Offset = "0x868868", VA = "0x868868")]
	[PunRPC]
	public void OnIngredientThrownOnPlateRPC()
	{
	}

	[Token(Token = "0x60013C3")]
	[Address(RVA = "0x8688B8", Offset = "0x8688B8", VA = "0x8688B8")]
	public void PlateRemovedFromPlay(bool wasHandedIn, bool wasPerfect, CustomerType customerType, bool wasClean)
	{
	}

	[Token(Token = "0x60013C4")]
	[Address(RVA = "0x868940", Offset = "0x868940", VA = "0x868940")]
	public void PlateTopIngredientRemoved()
	{
	}

	[Token(Token = "0x60013C5")]
	[Address(RVA = "0x868990", Offset = "0x868990", VA = "0x868990")]
	[PunRPC]
	private void ConsumableWasUsedRPC(int type)
	{
	}

	[Token(Token = "0x60013C6")]
	[Address(RVA = "0x8689F4", Offset = "0x8689F4", VA = "0x8689F4")]
	public bool[] GetClearedGoals()
	{
		return null;
	}

	[Token(Token = "0x60013C7")]
	[Address(RVA = "0x868B1C", Offset = "0x868B1C", VA = "0x868B1C")]
	public int GetClearedGoalsCount()
	{
		return default(int);
	}

	[Token(Token = "0x60013C8")]
	[Address(RVA = "0x868BF8", Offset = "0x868BF8", VA = "0x868BF8")]
	public float GetGoalTimeFraction(int index)
	{
		return default(float);
	}

	[Token(Token = "0x60013C9")]
	[Address(RVA = "0x868C38", Offset = "0x868C38", VA = "0x868C38", Slot = "6")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60013CA")]
	[Address(RVA = "0x868F20", Offset = "0x868F20", VA = "0x868F20")]
	public StarGoalsHandler()
	{
	}
}
[Token(Token = "0x20002D7")]
public class StarGoalsWindowUI : SingleInstanceBehavior<StarGoalsWindowUI>
{
	[Token(Token = "0x4001481")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private SpriteRenderer[] iconRenderers;

	[Token(Token = "0x4001482")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMeshPro[] iconTexts;

	[Token(Token = "0x4001483")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private MeshRenderer[] timerQuads;

	[Token(Token = "0x4001484")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private SpriteRenderer[] goalStateIcons;

	[Token(Token = "0x4001485")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private SpriteRenderer[] starTraceIcons;

	[Token(Token = "0x4001486")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform[] starSlots;

	[Token(Token = "0x4001487")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Sprite goalCleared;

	[Token(Token = "0x4001488")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Sprite goalFailed;

	[Token(Token = "0x4001489")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	[Header("Timer colors")]
	private Color greenTimeColor;

	[Token(Token = "0x400148A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Color yellowTimeColor;

	[Token(Token = "0x400148B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Color redTimeColor;

	[Token(Token = "0x400148C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private Color timeSlowdownColor;

	[Token(Token = "0x400148E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private bool[] isDisplayingGoal;

	[Token(Token = "0x400148F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private MaterialPropertyBlock propertyBlock;

	[Token(Token = "0x4001490")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Transform[] starHolders;

	[Token(Token = "0x4001491")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Vector3[] starHoldersStartPositions;

	[Token(Token = "0x4001492")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private TimeSlowdownHandler timeSlowdown;

	[Token(Token = "0x4001493")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private StarGoalsHandler goalsHandler;

	[Token(Token = "0x4001494")]
	private const string propertyProgress = "_Progress";

	[Token(Token = "0x4001495")]
	private const string propertyColor = "_Color";

	[Token(Token = "0x4001496")]
	private const int goalCount = 3;

	[Token(Token = "0x17000285")]
	public bool IsLocallyAnimating
	{
		[Token(Token = "0x60013DF")]
		[Address(RVA = "0x869364", Offset = "0x869364", VA = "0x869364")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60013E0")]
		[Address(RVA = "0x86936C", Offset = "0x86936C", VA = "0x86936C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60013E1")]
	[Address(RVA = "0x869378", Offset = "0x869378", VA = "0x869378", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x60013E2")]
	[Address(RVA = "0x869624", Offset = "0x869624", VA = "0x869624")]
	private void Start()
	{
	}

	[Token(Token = "0x60013E3")]
	[Address(RVA = "0x867E58", Offset = "0x867E58", VA = "0x867E58")]
	public void UpdateGoal(int goalIndex, Sprite icon, string iconText, GoalState goalState)
	{
	}

	[Token(Token = "0x60013E4")]
	[Address(RVA = "0x867F94", Offset = "0x867F94", VA = "0x867F94")]
	public void UpdateTimedGoal(int goalIndex, float fractionLeft)
	{
	}

	[Token(Token = "0x60013E5")]
	[Address(RVA = "0x867E28", Offset = "0x867E28", VA = "0x867E28")]
	public bool IsDisplayingGoalAtIndex(int index)
	{
		return default(bool);
	}

	[Token(Token = "0x60013E6")]
	[Address(RVA = "0x868154", Offset = "0x868154", VA = "0x868154")]
	public void RemoveGoalDisplayedAt(int i)
	{
	}

	[Token(Token = "0x60013E7")]
	[Address(RVA = "0x869788", Offset = "0x869788", VA = "0x869788")]
	public void OnPostRoundAnimationStarted()
	{
	}

	[Token(Token = "0x60013E8")]
	[Address(RVA = "0x869888", Offset = "0x869888", VA = "0x869888")]
	public Vector3 GetStarHolderStartPosition(int index)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60013E9")]
	[Address(RVA = "0x8698C4", Offset = "0x8698C4", VA = "0x8698C4")]
	public void MoveDownStarHolder(int i, float starHolderDropLength, float time)
	{
	}

	[Token(Token = "0x60013EA")]
	[Address(RVA = "0x8699CC", Offset = "0x8699CC", VA = "0x8699CC")]
	public void ShowGoalIconText(int index, string text, Sprite icon, bool showTimerQuad)
	{
	}

	[Token(Token = "0x60013EB")]
	[Address(RVA = "0x869ACC", Offset = "0x869ACC", VA = "0x869ACC")]
	public void ShowStarTrace(int index)
	{
	}

	[Token(Token = "0x60013EC")]
	[Address(RVA = "0x869B08", Offset = "0x869B08", VA = "0x869B08")]
	public Transform GetStarSlot(int i)
	{
		return null;
	}

	[Token(Token = "0x60013ED")]
	[Address(RVA = "0x869B38", Offset = "0x869B38", VA = "0x869B38")]
	public void OnPostRoundAnimationFinished()
	{
	}

	[Token(Token = "0x60013EE")]
	[Address(RVA = "0x869C48", Offset = "0x869C48", VA = "0x869C48")]
	public StarGoalsWindowUI()
	{
	}
}
[Token(Token = "0x20002D8")]
public class TableCenterUI : SingleInstanceNetworkedBehavior<TableCenterUI>, IPunObservable
{
	[Token(Token = "0x20002D9")]
	public enum State
	{
		[Token(Token = "0x40014C5")]
		Hidden,
		[Token(Token = "0x40014C6")]
		ConfirmEndless,
		[Token(Token = "0x40014C7")]
		RoundStarGoals,
		[Token(Token = "0x40014C8")]
		ConfirmTutorialMode,
		[Token(Token = "0x40014C9")]
		Story,
		[Token(Token = "0x40014CA")]
		TutorialStory,
		[Token(Token = "0x40014CB")]
		EndlessStory,
		[Token(Token = "0x40014CC")]
		FinalLevelOutro,
		[Token(Token = "0x40014CD")]
		FinalLevelOutro2Star,
		[Token(Token = "0x40014CE")]
		FinalLevelOutro3Star,
		[Token(Token = "0x40014CF")]
		ConfirmCreativeMode
	}

	[Token(Token = "0x20002DA")]
	[CompilerGenerated]
	private sealed class <PresentGoals>d__50 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40014D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40014D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40014D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TableCenterUI <>4__this;

		[Token(Token = "0x40014D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <i>5__2;

		[Token(Token = "0x17000287")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60013FE")]
			[Address(RVA = "0x86B310", Offset = "0x86B310", VA = "0x86B310", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000288")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001400")]
			[Address(RVA = "0x86B358", Offset = "0x86B358", VA = "0x86B358", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013FB")]
		[Address(RVA = "0x86A21C", Offset = "0x86A21C", VA = "0x86A21C")]
		[DebuggerHidden]
		public <PresentGoals>d__50(int <>1__state)
		{
		}

		[Token(Token = "0x60013FC")]
		[Address(RVA = "0x86AEEC", Offset = "0x86AEEC", VA = "0x86AEEC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60013FD")]
		[Address(RVA = "0x86AEF0", Offset = "0x86AEF0", VA = "0x86AEF0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60013FF")]
		[Address(RVA = "0x86B318", Offset = "0x86B318", VA = "0x86B318", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001497")]
	private const int goalCount = 3;

	[Token(Token = "0x4001498")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject visualsParent;

	[Token(Token = "0x4001499")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Animator animator;

	[Token(Token = "0x400149A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private MeshRenderer townBarIllustration;

	[Token(Token = "0x400149B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private LocalizedText townBarText;

	[Token(Token = "0x400149C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private TextMeshPro subHeaderText;

	[Token(Token = "0x400149D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private TextMeshPro roundCounterText;

	[Token(Token = "0x400149E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Texture[] environmentIllustrations;

	[Token(Token = "0x400149F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Texture tutorialIllustration;

	[Token(Token = "0x40014A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private GameObject starGoalsPage;

	[Token(Token = "0x40014A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private GameObject storyPage;

	[Token(Token = "0x40014A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private GameObject tutorialPage;

	[Token(Token = "0x40014A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private GameObject endlessModePage;

	[Token(Token = "0x40014A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Header("Campaign: Star Goals")]
	[SerializeField]
	private GameObject starGoalsParent;

	[Token(Token = "0x40014A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private GameObject starGoalsBackground;

	[Token(Token = "0x40014A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private ParticleSystem goalParticles;

	[Token(Token = "0x40014A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private GameObject[] stars;

	[Token(Token = "0x40014A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private SpriteRenderer[] goalIcons;

	[Token(Token = "0x40014A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private TextMeshPro[] goalIconTexts;

	[Token(Token = "0x40014AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private TextMeshPro[] goalDescriptions;

	[Token(Token = "0x40014AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private Transform[] goalParticlesAnchors;

	[Token(Token = "0x40014AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private Color[] levelLengthColors;

	[Token(Token = "0x40014AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	private float exitAnimationTime;

	[Token(Token = "0x40014AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	[SerializeField]
	private float goalRevealSpacingTime;

	[Token(Token = "0x40014AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[Header("Endless Mode")]
	[SerializeField]
	private GameObject endlessModeParent;

	[Token(Token = "0x40014B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[SerializeField]
	private TextMeshPro endlessPersonalBest;

	[Token(Token = "0x40014B1")]
	private const string triggerEnter = "Enter";

	[Token(Token = "0x40014B2")]
	private const string triggerExit = "Exit";

	[Token(Token = "0x40014B3")]
	private const string propertyMainTexture = "_MainTex";

	[Token(Token = "0x40014B4")]
	private const string localizationCampaginRound = "campaign_round";

	[Token(Token = "0x40014B5")]
	private const string localizationEndlessHeader = "endless_header";

	[Token(Token = "0x40014B6")]
	private const string localizationCreativeHeader = "creative_header";

	[Token(Token = "0x40014B7")]
	private const string localizationTutorialHeader = "tutorial_header";

	[Token(Token = "0x40014B8")]
	private const string localizationStoryOutroHeader = "story_outro_header";

	[Token(Token = "0x40014B9")]
	private const string localizationEndlessPersonalBest = "endless_personal_best";

	[Token(Token = "0x40014BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Vector3 starScale;

	[Token(Token = "0x40014BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private SaveManager saveManager;

	[Token(Token = "0x40014BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private MaterialPropertyBlock matPropBlock;

	[Token(Token = "0x40014BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private StoryDisplay storyDisplay;

	[Token(Token = "0x40014BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private WaitForSeconds goalRevealSpacing;

	[Token(Token = "0x40014BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private LocalizedText subHeaderTextLocalized;

	[Token(Token = "0x40014C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private State state;

	[Token(Token = "0x40014C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
	private Vector3 startPos;

	[Token(Token = "0x40014C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private Coroutine starPresentationRoutine;

	[Token(Token = "0x40014C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private State syncedState;

	[Token(Token = "0x17000286")]
	public float StoryVoiceOverLength
	{
		[Token(Token = "0x60013EF")]
		[Address(RVA = "0x869CE0", Offset = "0x869CE0", VA = "0x869CE0")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x60013F0")]
	[Address(RVA = "0x869CFC", Offset = "0x869CFC", VA = "0x869CFC")]
	private void Start()
	{
	}

	[Token(Token = "0x60013F1")]
	[Address(RVA = "0x868798", Offset = "0x868798", VA = "0x868798")]
	public void SetStarGoalIconAndText(int goalIndex, Sprite icon, string iconText, string description)
	{
	}

	[Token(Token = "0x60013F2")]
	[Address(RVA = "0x86A1B4", Offset = "0x86A1B4", VA = "0x86A1B4")]
	[IteratorStateMachine(typeof(<PresentGoals>d__50))]
	private IEnumerator PresentGoals()
	{
		return null;
	}

	[Token(Token = "0x60013F3")]
	[Address(RVA = "0x869F00", Offset = "0x869F00", VA = "0x869F00")]
	public void ShowAtTableCenter(State newState)
	{
	}

	[Token(Token = "0x60013F4")]
	[Address(RVA = "0x86A244", Offset = "0x86A244", VA = "0x86A244")]
	private void UpdateContent(State newState)
	{
	}

	[Token(Token = "0x60013F5")]
	[Address(RVA = "0x86A060", Offset = "0x86A060", VA = "0x86A060")]
	public void Hide()
	{
	}

	[Token(Token = "0x60013F6")]
	[Address(RVA = "0x86ABF8", Offset = "0x86ABF8", VA = "0x86ABF8")]
	public void OnStoryFinishedPlaying()
	{
	}

	[Token(Token = "0x60013F7")]
	[Address(RVA = "0x86AC50", Offset = "0x86AC50", VA = "0x86AC50")]
	public void OnEndlessStoryFinished()
	{
	}

	[Token(Token = "0x60013F8")]
	[Address(RVA = "0x86ACA8", Offset = "0x86ACA8", VA = "0x86ACA8", Slot = "6")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60013F9")]
	[Address(RVA = "0x86AD64", Offset = "0x86AD64", VA = "0x86AD64")]
	public TableCenterUI()
	{
	}
}
[Token(Token = "0x20002DB")]
public class ConveyorBelt : SingleInstanceNetworkedBehavior<ConveyorBelt>
{
	[Token(Token = "0x40014D4")]
	private const float RADIUS_FROM_CENTER = 0.29f;

	[Token(Token = "0x40014D5")]
	private const float CENTER_DOWN_TIMER = 1.5f;

	[Token(Token = "0x40014D6")]
	private const float CENTER_AUDIO_TRIGGER_HEIGHT_DOWN = 1.18f;

	[Token(Token = "0x40014D7")]
	private const float CENTER_AUDIO_TRIGGER_HEIGHT_UP = 1.05f;

	[Token(Token = "0x40014D8")]
	private const float BELT_HEIGHT_DEFAULT = 1.08f;

	[Token(Token = "0x40014D9")]
	private const float BELT_HEIGHT_MAP = 1.095f;

	[Token(Token = "0x40014DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject beltRenderer;

	[Token(Token = "0x40014DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Rigidbody beltPhysics;

	[Token(Token = "0x40014DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Rigidbody beltCenter;

	[Token(Token = "0x40014DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 centerStartPosition;

	[Token(Token = "0x40014DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 centerDownPosition;

	[Token(Token = "0x40014DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float centerDownTimer;

	[Token(Token = "0x40014E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float centerAudioLastPosY;

	[Token(Token = "0x40014E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private CookingGameState gameState;

	[Token(Token = "0x40014E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Quaternion startRotation;

	[Token(Token = "0x40014E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Map.State? mapStateLast;

	[NonSerialized]
	[Token(Token = "0x40014E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float degreesPerSecond;

	[Token(Token = "0x17000289")]
	public bool IsMoving
	{
		[Token(Token = "0x6001401")]
		[Address(RVA = "0x86B360", Offset = "0x86B360", VA = "0x86B360")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001402")]
		[Address(RVA = "0x86B368", Offset = "0x86B368", VA = "0x86B368")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700028A")]
	public float BeltRotation
	{
		[Token(Token = "0x6001403")]
		[Address(RVA = "0x86B374", Offset = "0x86B374", VA = "0x86B374")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6001404")]
		[Address(RVA = "0x86B37C", Offset = "0x86B37C", VA = "0x86B37C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700028B")]
	public List<ConveyorPlateSlot> PlateSlots
	{
		[Token(Token = "0x6001405")]
		[Address(RVA = "0x86B384", Offset = "0x86B384", VA = "0x86B384")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001406")]
		[Address(RVA = "0x86B38C", Offset = "0x86B38C", VA = "0x86B38C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700028C")]
	public float CenterSurfaceHeight
	{
		[Token(Token = "0x6001407")]
		[Address(RVA = "0x86B394", Offset = "0x86B394", VA = "0x86B394")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x1700028D")]
	public Vector3 Pivot
	{
		[Token(Token = "0x6001408")]
		[Address(RVA = "0x86B3C4", Offset = "0x86B3C4", VA = "0x86B3C4")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x1700028E")]
	public int NumberOfSlots
	{
		[Token(Token = "0x6001409")]
		[Address(RVA = "0x86B3EC", Offset = "0x86B3EC", VA = "0x86B3EC")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x600140A")]
	[Address(RVA = "0x86B434", Offset = "0x86B434", VA = "0x86B434", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x600140B")]
	[Address(RVA = "0x86B74C", Offset = "0x86B74C", VA = "0x86B74C")]
	private void Start()
	{
	}

	[Token(Token = "0x600140C")]
	[Address(RVA = "0x86BB18", Offset = "0x86BB18", VA = "0x86BB18")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600140D")]
	[Address(RVA = "0x86B698", Offset = "0x86B698", VA = "0x86B698")]
	private void RotateToNetworkedPosition()
	{
	}

	[Token(Token = "0x600140E")]
	[Address(RVA = "0x86BF98", Offset = "0x86BF98", VA = "0x86BF98")]
	public void OnPlateHandIn()
	{
	}

	[Token(Token = "0x600140F")]
	[Address(RVA = "0x86BFA4", Offset = "0x86BFA4", VA = "0x86BFA4")]
	public ConveyorPlateSlot GetUnoccupiedSlot()
	{
		return null;
	}

	[Token(Token = "0x6001410")]
	[Address(RVA = "0x86B554", Offset = "0x86B554", VA = "0x86B554")]
	private void PositionConveyorPlateSlots()
	{
	}

	[Token(Token = "0x6001411")]
	[Address(RVA = "0x86C0A0", Offset = "0x86C0A0", VA = "0x86C0A0")]
	private Vector3 PositionOnCircle(float angle, float radius, float height)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6001412")]
	[Address(RVA = "0x86C0E4", Offset = "0x86C0E4", VA = "0x86C0E4")]
	public void ShowBelt(bool shouldShow)
	{
	}

	[Token(Token = "0x6001413")]
	[Address(RVA = "0x86C104", Offset = "0x86C104", VA = "0x86C104")]
	private void OnCountdownStarted()
	{
	}

	[Token(Token = "0x6001414")]
	[Address(RVA = "0x86C124", Offset = "0x86C124", VA = "0x86C124")]
	private void OnRoundStart()
	{
	}

	[Token(Token = "0x6001415")]
	[Address(RVA = "0x86BAE8", Offset = "0x86BAE8", VA = "0x86BAE8")]
	private void StopBelt()
	{
	}

	[Token(Token = "0x6001416")]
	[Address(RVA = "0x86C144", Offset = "0x86C144", VA = "0x86C144")]
	private void StartBelt()
	{
	}

	[Token(Token = "0x6001417")]
	[Address(RVA = "0x86C150", Offset = "0x86C150", VA = "0x86C150")]
	private void OnGameStateChanged(GameState oldState, GameState newState)
	{
	}

	[Token(Token = "0x6001418")]
	[Address(RVA = "0x86C198", Offset = "0x86C198", VA = "0x86C198")]
	public void SetMoving(bool shouldMove)
	{
	}

	[Token(Token = "0x6001419")]
	[Address(RVA = "0x86C1C4", Offset = "0x86C1C4", VA = "0x86C1C4")]
	public ConveyorBelt()
	{
	}
}
[Token(Token = "0x20002DC")]
public class FryingPan : NetworkedBehaviour
{
	[Token(Token = "0x40014E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float velocityLoss;

	[Token(Token = "0x40014E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float softSoundVelocityThreshold;

	[Token(Token = "0x40014EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float heavySoundVelocityThreshold;

	[Token(Token = "0x40014EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Rigidbody myRigidbody;

	[Token(Token = "0x600141A")]
	[Address(RVA = "0x86C230", Offset = "0x86C230", VA = "0x86C230")]
	private void Awake()
	{
	}

	[Token(Token = "0x600141B")]
	[Address(RVA = "0x86C280", Offset = "0x86C280", VA = "0x86C280")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600141C")]
	[Address(RVA = "0x86C7D8", Offset = "0x86C7D8", VA = "0x86C7D8")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600141D")]
	[Address(RVA = "0x86CAA4", Offset = "0x86CAA4", VA = "0x86CAA4")]
	[PunRPC]
	private void PanCollisionRPC(Vector3 v, Vector3 vAng)
	{
	}

	[Token(Token = "0x600141E")]
	[Address(RVA = "0x86C5DC", Offset = "0x86C5DC", VA = "0x86C5DC")]
	private void PlayHapticFeedback(CookoutAvatarHand hand)
	{
	}

	[Token(Token = "0x600141F")]
	[Address(RVA = "0x86CC48", Offset = "0x86CC48", VA = "0x86CC48")]
	public FryingPan()
	{
	}
}
[Token(Token = "0x20002DD")]
public class HandInColliderEnabler : SingleInstanceNetworkedBehavior<HandInColliderEnabler>, IPunObservable
{
	[Token(Token = "0x40014EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool collidersEnabledBacking;

	[Token(Token = "0x40014ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Collider handInCollider;

	[Token(Token = "0x40014EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Collider throwInCollider;

	[Token(Token = "0x1700028F")]
	public bool CollidersEnabled
	{
		[Token(Token = "0x6001420")]
		[Address(RVA = "0x86CC68", Offset = "0x86CC68", VA = "0x86CC68")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001421")]
		[Address(RVA = "0x86CC70", Offset = "0x86CC70", VA = "0x86CC70")]
		set
		{
		}
	}

	[Token(Token = "0x6001422")]
	[Address(RVA = "0x86CCB8", Offset = "0x86CCB8", VA = "0x86CCB8", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6001423")]
	[Address(RVA = "0x86CD00", Offset = "0x86CD00", VA = "0x86CD00", Slot = "6")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6001424")]
	[Address(RVA = "0x86CDC8", Offset = "0x86CDC8", VA = "0x86CDC8")]
	public HandInColliderEnabler()
	{
	}
}
[Token(Token = "0x20002DE")]
public class ReturnToOriginIfLost : NetworkedBehaviour, IPunObservable
{
	[Token(Token = "0x20002DF")]
	[CompilerGenerated]
	private sealed class <SetKinematicTemporary>d__29 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ReturnToOriginIfLost <>4__this;

		[Token(Token = "0x17000292")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001435")]
			[Address(RVA = "0x86DB34", Offset = "0x86DB34", VA = "0x86DB34", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000293")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001437")]
			[Address(RVA = "0x86DB7C", Offset = "0x86DB7C", VA = "0x86DB7C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001432")]
		[Address(RVA = "0x86D650", Offset = "0x86D650", VA = "0x86D650")]
		[DebuggerHidden]
		public <SetKinematicTemporary>d__29(int <>1__state)
		{
		}

		[Token(Token = "0x6001433")]
		[Address(RVA = "0x86DA0C", Offset = "0x86DA0C", VA = "0x86DA0C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001434")]
		[Address(RVA = "0x86DA10", Offset = "0x86DA10", VA = "0x86DA10", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001436")]
		[Address(RVA = "0x86DB3C", Offset = "0x86DB3C", VA = "0x86DB3C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40014F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float returnDistanceThreshold;

	[Token(Token = "0x40014F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Vector3 myOriginPos;

	[Token(Token = "0x40014F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private Quaternion myOriginRot;

	[Token(Token = "0x40014F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SerializeField]
	private float returnToOriginTime;

	[Token(Token = "0x40014F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private bool setKinematicOnReturn;

	[Token(Token = "0x40014F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	[Header("Rubber band teleportation hotfix")]
	[SerializeField]
	private bool tempKinematicOnRespawn;

	[Token(Token = "0x40014F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	private float tempKinematicDuration;

	[Token(Token = "0x40014F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private bool syncReturnPositionOverNetwork;

	[Token(Token = "0x40014F9")]
	private const float returnHeightThreshold = 1.08f;

	[Token(Token = "0x40014FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Rigidbody rigidBody;

	[Token(Token = "0x40014FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private PhotonTransformView transformView;

	[Token(Token = "0x40014FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Grabbable grabbable;

	[Token(Token = "0x40014FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float returnToOriginTimer;

	[Token(Token = "0x40014FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private float returnTimer;

	[Token(Token = "0x40014FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float returnCooldown;

	[Token(Token = "0x4001500")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private Transform myTransform;

	[Token(Token = "0x17000290")]
	public Vector3 OriginPos
	{
		[Token(Token = "0x6001425")]
		[Address(RVA = "0x86CE3C", Offset = "0x86CE3C", VA = "0x86CE3C")]
		[CompilerGenerated]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6001426")]
		[Address(RVA = "0x86CE48", Offset = "0x86CE48", VA = "0x86CE48")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000291")]
	public Quaternion OriginRot
	{
		[Token(Token = "0x6001427")]
		[Address(RVA = "0x86CE54", Offset = "0x86CE54", VA = "0x86CE54")]
		[CompilerGenerated]
		get
		{
			return default(Quaternion);
		}
		[Token(Token = "0x6001428")]
		[Address(RVA = "0x86CE60", Offset = "0x86CE60", VA = "0x86CE60")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6001429")]
	[Address(RVA = "0x86CE6C", Offset = "0x86CE6C", VA = "0x86CE6C")]
	private void Awake()
	{
	}

	[Token(Token = "0x600142A")]
	[Address(RVA = "0x86D000", Offset = "0x86D000", VA = "0x86D000")]
	private void Update()
	{
	}

	[Token(Token = "0x600142B")]
	[Address(RVA = "0x86D348", Offset = "0x86D348", VA = "0x86D348")]
	private void OnGrabBegin()
	{
	}

	[Token(Token = "0x600142C")]
	[Address(RVA = "0x86D1F8", Offset = "0x86D1F8", VA = "0x86D1F8")]
	public void ReturnToOriginPosition()
	{
	}

	[Token(Token = "0x600142D")]
	[Address(RVA = "0x86D350", Offset = "0x86D350", VA = "0x86D350")]
	[PunRPC]
	private void ReturnToOriginPositionRPC(Vector3 currentPos)
	{
	}

	[Token(Token = "0x600142E")]
	[Address(RVA = "0x86D5E8", Offset = "0x86D5E8", VA = "0x86D5E8")]
	[IteratorStateMachine(typeof(<SetKinematicTemporary>d__29))]
	private IEnumerator SetKinematicTemporary()
	{
		return null;
	}

	[Token(Token = "0x600142F")]
	[Address(RVA = "0x86D678", Offset = "0x86D678", VA = "0x86D678", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6001430")]
	[Address(RVA = "0x86D90C", Offset = "0x86D90C", VA = "0x86D90C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001431")]
	[Address(RVA = "0x86D9E0", Offset = "0x86D9E0", VA = "0x86D9E0")]
	public ReturnToOriginIfLost()
	{
	}
}
[Token(Token = "0x20002E0")]
public class SpiceShaker : NetworkedBehaviour
{
	[Token(Token = "0x4001504")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float angleThreshold;

	[Token(Token = "0x4001505")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float speedThreshold;

	[Token(Token = "0x4001506")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float particleRate;

	[Token(Token = "0x4001507")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float spiceMagnitude;

	[Token(Token = "0x4001508")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject hitBox;

	[Token(Token = "0x4001509")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool facingWorldDown;

	[Token(Token = "0x400150A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int numMovesTracked;

	[Token(Token = "0x400150B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int currentTrackedMove;

	[Token(Token = "0x400150C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3[] trackedMoves;

	[Token(Token = "0x400150D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 previousPos;

	[Token(Token = "0x400150E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool movingUp;

	[Token(Token = "0x400150F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Transform particleSpawnPoint;

	[Token(Token = "0x4001510")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Grabbable grabbable;

	[Token(Token = "0x4001511")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Collider[] collidersHit;

	[Token(Token = "0x6001438")]
	[Address(RVA = "0x86DB84", Offset = "0x86DB84", VA = "0x86DB84")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001439")]
	[Address(RVA = "0x86DBE8", Offset = "0x86DBE8", VA = "0x86DBE8")]
	private void Start()
	{
	}

	[Token(Token = "0x600143A")]
	[Address(RVA = "0x86DCC8", Offset = "0x86DCC8", VA = "0x86DCC8")]
	private void Update()
	{
	}

	[Token(Token = "0x600143B")]
	[Address(RVA = "0x86E64C", Offset = "0x86E64C", VA = "0x86E64C")]
	public SpiceShaker()
	{
	}
}
[Token(Token = "0x20002E1")]
public class TipHandler : SingleInstanceBehavior<TipHandler>, IPunObservable
{
	[Token(Token = "0x4001513")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private CustomerRegistry customerRegistry;

	[Token(Token = "0x4001514")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private CookingRound cookingRound;

	[Token(Token = "0x17000294")]
	public int CoinTipSum
	{
		[Token(Token = "0x600143C")]
		[Address(RVA = "0x86E6B8", Offset = "0x86E6B8", VA = "0x86E6B8")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x600143D")]
		[Address(RVA = "0x86E6C0", Offset = "0x86E6C0", VA = "0x86E6C0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x600143E")]
	[Address(RVA = "0x86E6C8", Offset = "0x86E6C8", VA = "0x86E6C8")]
	private void Start()
	{
	}

	[Token(Token = "0x600143F")]
	[Address(RVA = "0x86E888", Offset = "0x86E888", VA = "0x86E888")]
	public void OnPlateDeliver(bool wasPerfect, CustomerType customer)
	{
	}

	[Token(Token = "0x6001440")]
	[Address(RVA = "0x86E8C8", Offset = "0x86E8C8", VA = "0x86E8C8")]
	public void OnRoundStart()
	{
	}

	[Token(Token = "0x6001441")]
	[Address(RVA = "0x86E8D0", Offset = "0x86E8D0", VA = "0x86E8D0", Slot = "5")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x6001442")]
	[Address(RVA = "0x86E9D0", Offset = "0x86E9D0", VA = "0x86E9D0", Slot = "6")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6001443")]
	[Address(RVA = "0x86EA8C", Offset = "0x86EA8C", VA = "0x86EA8C")]
	public TipHandler()
	{
	}
}
[Token(Token = "0x20002E2")]
public class ApplicationTracking : SingleInstanceBehavior<ApplicationTracking>
{
	[Token(Token = "0x20002E3")]
	private enum Mode
	{
		[Token(Token = "0x4001519")]
		None,
		[Token(Token = "0x400151A")]
		Menu,
		[Token(Token = "0x400151B")]
		Tutorial,
		[Token(Token = "0x400151C")]
		SinglePlayer,
		[Token(Token = "0x400151D")]
		Multiplayer
	}

	[Token(Token = "0x20002E4")]
	public enum JoinRoomBy
	{
		[Token(Token = "0x400151F")]
		None,
		[Token(Token = "0x4001520")]
		RoomList,
		[Token(Token = "0x4001521")]
		SuggestedRooms,
		[Token(Token = "0x4001522")]
		EnterCode,
		[Token(Token = "0x4001523")]
		QuickJoin,
		[Token(Token = "0x4001524")]
		DeepLink,
		[Token(Token = "0x4001525")]
		GroupLaunch,
		[Token(Token = "0x4001526")]
		DebugMenu
	}

	[Token(Token = "0x20002E5")]
	public struct JoinData
	{
		[Token(Token = "0x4001527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public JoinRoomBy joinRoomBy;

		[Token(Token = "0x4001528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool[] filterButtonStates;
	}

	[Token(Token = "0x4001515")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Mode currentMode;

	[Token(Token = "0x4001516")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float startTimeStamp;

	[Token(Token = "0x4001517")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private TutorialMode tutorialMode;

	[Token(Token = "0x6001444")]
	[Address(RVA = "0x86EAF8", Offset = "0x86EAF8", VA = "0x86EAF8")]
	private void Start()
	{
	}

	[Token(Token = "0x6001445")]
	[Address(RVA = "0x86EDE8", Offset = "0x86EDE8", VA = "0x86EDE8")]
	public static void SendSessionProgressionEvent(string event_name, MapProgression.Rank[] beatenCups)
	{
	}

	[Token(Token = "0x6001446")]
	[Address(RVA = "0x86EC5C", Offset = "0x86EC5C", VA = "0x86EC5C")]
	private void RefreshCurrentMode()
	{
	}

	[Token(Token = "0x6001447")]
	[Address(RVA = "0x86F008", Offset = "0x86F008", VA = "0x86F008")]
	private void Instance_onTutorialStepChange(TutorialStep newStep)
	{
	}

	[Token(Token = "0x6001448")]
	[Address(RVA = "0x86F084", Offset = "0x86F084", VA = "0x86F084")]
	private void SetNewMode(Mode newMode)
	{
	}

	[Token(Token = "0x6001449")]
	[Address(RVA = "0x86F0B4", Offset = "0x86F0B4", VA = "0x86F0B4")]
	private void SubmitTimeSpentInCurrentMode()
	{
	}

	[Token(Token = "0x600144A")]
	[Address(RVA = "0x86F3A4", Offset = "0x86F3A4", VA = "0x86F3A4")]
	private void OnApplicationPause(bool pause)
	{
	}

	[Token(Token = "0x600144B")]
	[Address(RVA = "0x86F3B0", Offset = "0x86F3B0", VA = "0x86F3B0")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x600144C")]
	[Address(RVA = "0x86F3B4", Offset = "0x86F3B4", VA = "0x86F3B4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600144D")]
	[Address(RVA = "0x86F4C4", Offset = "0x86F4C4", VA = "0x86F4C4", Slot = "5")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x600144E")]
	[Address(RVA = "0x86F5C4", Offset = "0x86F5C4", VA = "0x86F5C4")]
	public static void OnJoiningRoom(JoinData data)
	{
	}

	[Token(Token = "0x600144F")]
	[Address(RVA = "0x86F934", Offset = "0x86F934", VA = "0x86F934")]
	private static Dictionary<RoomIntent, bool> GetIntentsIncludedInFilter(bool[] filterButtonStates)
	{
		return null;
	}

	[Token(Token = "0x6001450")]
	[Address(RVA = "0x86FB9C", Offset = "0x86FB9C", VA = "0x86FB9C")]
	public static void OnRoomListFilterChanged(int buttonIndex, bool isIncludedInFilter)
	{
	}

	[Token(Token = "0x6001451")]
	[Address(RVA = "0x86FEC4", Offset = "0x86FEC4", VA = "0x86FEC4")]
	public static void OnRoomCreated(RoomIntent roomIntent, RoomVisibility roomVisibility)
	{
	}

	[Token(Token = "0x6001452")]
	[Address(RVA = "0x870100", Offset = "0x870100", VA = "0x870100")]
	public ApplicationTracking()
	{
	}
}
[Token(Token = "0x20002E6")]
public class BotTracking : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4001529")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Bot bot;

	[Token(Token = "0x400152A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private CookingRound cookingRound;

	[Token(Token = "0x400152B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float timeSpentWaiting;

	[Token(Token = "0x400152C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float timeSpentUncharged;

	[Token(Token = "0x400152D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool roundActive;

	[Token(Token = "0x400152E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool outOfPower;

	[Token(Token = "0x400152F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int restartedCount;

	[Token(Token = "0x6001453")]
	[Address(RVA = "0x87016C", Offset = "0x87016C", VA = "0x87016C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001454")]
	[Address(RVA = "0x8701BC", Offset = "0x8701BC", VA = "0x8701BC")]
	private void Start()
	{
	}

	[Token(Token = "0x6001455")]
	[Address(RVA = "0x870348", Offset = "0x870348", VA = "0x870348")]
	private void Update()
	{
	}

	[Token(Token = "0x6001456")]
	[Address(RVA = "0x87042C", Offset = "0x87042C", VA = "0x87042C")]
	private void OnRoundStart()
	{
	}

	[Token(Token = "0x6001457")]
	[Address(RVA = "0x870440", Offset = "0x870440", VA = "0x870440")]
	private void OnRoundStop()
	{
	}

	[Token(Token = "0x6001458")]
	[Address(RVA = "0x8706A0", Offset = "0x8706A0", VA = "0x8706A0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001459")]
	[Address(RVA = "0x8707E0", Offset = "0x8707E0", VA = "0x8707E0")]
	public BotTracking()
	{
	}
}
[Token(Token = "0x20002E7")]
public static class CreativeModeTracking
{
	[Token(Token = "0x4001530")]
	private const string roundEndByWristMenuEvent = "creative_round_end_by_wrist_menu";

	[Token(Token = "0x4001531")]
	private const string startRoundEvent = "creative_round_start";

	[Token(Token = "0x4001532")]
	private const string roundEndByVoteEvent = "creative_round_end_by_vote";

	[Token(Token = "0x4001533")]
	private const string onRoundEndEvent = "creative_round_end_per_player";

	[Token(Token = "0x4001534")]
	private const string onRecipeDiscoveredEvent = "creative_round_recipe_found";

	[Token(Token = "0x4001535")]
	private const string playerCountParameter = "player_count";

	[Token(Token = "0x4001536")]
	private const string recipesUnlockParameter = "recipe_unlock_count";

	[Token(Token = "0x4001537")]
	private const string photoSaveCount = "photo_save_count";

	[Token(Token = "0x4001538")]
	private const string photoShareCount = "photo_share_count";

	[Token(Token = "0x4001539")]
	private const string newRecipeID = "recipe_id";

	[Token(Token = "0x600145A")]
	[Address(RVA = "0x8707E8", Offset = "0x8707E8", VA = "0x8707E8")]
	public static void OnRoundEndByWristMenu()
	{
	}

	[Token(Token = "0x600145B")]
	[Address(RVA = "0x87096C", Offset = "0x87096C", VA = "0x87096C")]
	public static void OnStartedRound()
	{
	}

	[Token(Token = "0x600145C")]
	[Address(RVA = "0x870AF0", Offset = "0x870AF0", VA = "0x870AF0")]
	public static void OnRoundEndByVote()
	{
	}

	[Token(Token = "0x600145D")]
	[Address(RVA = "0x870C74", Offset = "0x870C74", VA = "0x870C74")]
	public static void OnRoundEnded(int recipesFound, int photosSaved, int photosShared)
	{
	}

	[Token(Token = "0x600145E")]
	[Address(RVA = "0x870ECC", Offset = "0x870ECC", VA = "0x870ECC")]
	public static void OnNewRecipeFound(string recipeID)
	{
	}
}
[Token(Token = "0x20002E8")]
public class FoodFightTracking : SingleInstanceBehavior<FoodFightTracking>
{
	[Token(Token = "0x400153A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int numberOfPlayerHits;

	[Token(Token = "0x600145F")]
	[Address(RVA = "0x871010", Offset = "0x871010", VA = "0x871010")]
	public void HitPlayerWithIngredient()
	{
	}

	[Token(Token = "0x6001460")]
	[Address(RVA = "0x871020", Offset = "0x871020", VA = "0x871020")]
	private void OnApplicationPause(bool pause)
	{
	}

	[Token(Token = "0x6001461")]
	[Address(RVA = "0x87118C", Offset = "0x87118C", VA = "0x87118C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001462")]
	[Address(RVA = "0x871038", Offset = "0x871038", VA = "0x871038")]
	private void SubmitNumberOfPlayerHits()
	{
	}

	[Token(Token = "0x6001463")]
	[Address(RVA = "0x8711A0", Offset = "0x8711A0", VA = "0x8711A0")]
	public FoodFightTracking()
	{
	}
}
[Token(Token = "0x20002E9")]
public static class GameTracking
{
	[Token(Token = "0x6001464")]
	[Address(RVA = "0x87120C", Offset = "0x87120C", VA = "0x87120C")]
	public static void Start()
	{
	}

	[Token(Token = "0x6001465")]
	[Address(RVA = "0x87131C", Offset = "0x87131C", VA = "0x87131C")]
	public static void OnFirstTimeBeatenTown(int beatenTownIndex, MapProgression.Rank rank)
	{
	}
}
[Token(Token = "0x20002EA")]
public class LauncherSettingsTracking
{
	[Token(Token = "0x400153B")]
	private const string changeVolumeEvent = "settings_main_volume";

	[Token(Token = "0x400153C")]
	private const string changeLanguageEvent = "settings_main_language";

	[Token(Token = "0x400153D")]
	private const string changeAutoholdEvent = "settings_main_autohold";

	[Token(Token = "0x400153E")]
	private const string changeHandednessEvent = "settings_main_handedness";

	[Token(Token = "0x400153F")]
	private const string chosenLanguageParameter = "selected_language";

	[Token(Token = "0x4001540")]
	private const string autoholdParameter = "auto_grip";

	[Token(Token = "0x4001541")]
	private const string handednessParameter = "handedness";

	[Token(Token = "0x4001542")]
	private const string volumeMusicParameter = "volume_music";

	[Token(Token = "0x4001543")]
	private const string volumeVoipParameter = "volume_voip";

	[Token(Token = "0x4001544")]
	private const string volumeSoundParameter = "volume_sound";

	[Token(Token = "0x4001545")]
	private const string volumeMusicDeltaParameter = "volume_music_delta";

	[Token(Token = "0x4001546")]
	private const string volumeVoipDeltaParameter = "volume_voip_delta";

	[Token(Token = "0x4001547")]
	private const string volumeSoundDeltaParameter = "volume_sound_delta";

	[Token(Token = "0x4001548")]
	private const string rightHanded = "Right";

	[Token(Token = "0x4001549")]
	private const string leftHanded = "Left";

	[Token(Token = "0x400154A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static float volumeMusic;

	[Token(Token = "0x400154B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static float volumeVoip;

	[Token(Token = "0x400154C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static float volumeSound;

	[Token(Token = "0x400154D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static float volumeMusicDelta;

	[Token(Token = "0x400154E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static float volumeVoipDelta;

	[Token(Token = "0x400154F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public static float volumeSoundDelta;

	[Token(Token = "0x6001466")]
	[Address(RVA = "0x871A2C", Offset = "0x871A2C", VA = "0x871A2C")]
	public static void SubmitChangeLocalEvent(string chosenLanguage)
	{
	}

	[Token(Token = "0x6001467")]
	[Address(RVA = "0x871B70", Offset = "0x871B70", VA = "0x871B70")]
	public static void SubmitChangeAutoholdEvent(bool autoholdActive)
	{
	}

	[Token(Token = "0x6001468")]
	[Address(RVA = "0x871CB8", Offset = "0x871CB8", VA = "0x871CB8")]
	public static void SubmitChangeHandednessEvent(CookoutHandedness handedness)
	{
	}

	[Token(Token = "0x6001469")]
	[Address(RVA = "0x871E34", Offset = "0x871E34", VA = "0x871E34")]
	public static void SubmitLauncherAudioSettings()
	{
	}

	[Token(Token = "0x600146A")]
	[Address(RVA = "0x8722B8", Offset = "0x8722B8", VA = "0x8722B8")]
	public LauncherSettingsTracking()
	{
	}
}
[Token(Token = "0x20002EB")]
public class RoundPerformanceTracking : SingleInstanceBehavior<RoundPerformanceTracking>
{
	[Token(Token = "0x4001550")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool debugMenuUsed;

	[Token(Token = "0x4001551")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool failByRoyal;

	[Token(Token = "0x4001552")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static float roundStartTime;

	[Token(Token = "0x4001553")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int[] consumablesUsed;

	[Token(Token = "0x4001554")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private LevelData level;

	[Token(Token = "0x4001555")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int dishesWashed;

	[Token(Token = "0x4001556")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int platesServedDirty;

	[Token(Token = "0x4001557")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int consumablesUsedSum;

	[Token(Token = "0x4001558")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int servedPlateCount;

	[Token(Token = "0x4001559")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int servedPerfectPlateCount;

	[Token(Token = "0x400155A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int[] customerTypesServed;

	[Token(Token = "0x400155B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private CookingRound cookingRound;

	[Token(Token = "0x400155C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private StarGoalsHandler goalsHandler;

	[Token(Token = "0x400155D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private CookingCup cookingCup;

	[Token(Token = "0x600146B")]
	[Address(RVA = "0x8722C0", Offset = "0x8722C0", VA = "0x8722C0")]
	private void Start()
	{
	}

	[Token(Token = "0x600146C")]
	[Address(RVA = "0x8725D8", Offset = "0x8725D8", VA = "0x8725D8")]
	public void TrackRoundResult(bool roundFailed, bool roundAborted)
	{
	}

	[Token(Token = "0x600146D")]
	[Address(RVA = "0x872A24", Offset = "0x872A24", VA = "0x872A24")]
	private void TrackRoundEnd(string townName, int levelID, int playerCount, string clearState, bool townCleared, int clearTime, string levelLength, StarGoal[] goals, int[] consumableUsed, bool hasActiveBots)
	{
	}

	[Token(Token = "0x600146E")]
	[Address(RVA = "0x873F20", Offset = "0x873F20", VA = "0x873F20")]
	public void TrackEndlessRoundResult()
	{
	}

	[Token(Token = "0x600146F")]
	[Address(RVA = "0x873B70", Offset = "0x873B70", VA = "0x873B70")]
	private string ParseGoalInfo(StarGoal goal, int goalIndex)
	{
		return null;
	}

	[Token(Token = "0x6001470")]
	[Address(RVA = "0x874D68", Offset = "0x874D68", VA = "0x874D68")]
	private void RoundStart()
	{
	}

	[Token(Token = "0x6001471")]
	[Address(RVA = "0x874E74", Offset = "0x874E74", VA = "0x874E74")]
	private void OnConsumableUsed(ConsumableType type)
	{
	}

	[Token(Token = "0x6001472")]
	[Address(RVA = "0x874EB8", Offset = "0x874EB8", VA = "0x874EB8")]
	private void OnPlateHandedIn(bool wasHandedIn, bool wasPerfect, CustomerType customerType, bool wasClean)
	{
	}

	[Token(Token = "0x6001473")]
	[Address(RVA = "0x87502C", Offset = "0x87502C", VA = "0x87502C", Slot = "5")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x6001474")]
	[Address(RVA = "0x8751E4", Offset = "0x8751E4", VA = "0x8751E4")]
	public RoundPerformanceTracking()
	{
	}
}
[Token(Token = "0x20002EC")]
public class TutorialTracking : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x20002ED")]
	private enum TutorialStartedFrom
	{
		[Token(Token = "0x4001563")]
		None,
		[Token(Token = "0x4001564")]
		Intro,
		[Token(Token = "0x4001565")]
		IntroConfirmSkip,
		[Token(Token = "0x4001566")]
		LauncherMenu,
		[Token(Token = "0x4001567")]
		TownMap
	}

	[Token(Token = "0x400155E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private TutorialStep currentStep;

	[Token(Token = "0x400155F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private int startTimeStamp;

	[Token(Token = "0x4001560")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int failedPerfectPlacements;

	[Token(Token = "0x4001561")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static TutorialStartedFrom tutorialStartedFrom;

	[Token(Token = "0x6001475")]
	[Address(RVA = "0x875358", Offset = "0x875358", VA = "0x875358")]
	public void OnTutorialStepStarted(TutorialStep tutorialStep)
	{
	}

	[Token(Token = "0x6001476")]
	[Address(RVA = "0x875468", Offset = "0x875468", VA = "0x875468")]
	public void OnTutorialStepEnded(TutorialStep tutorialStep)
	{
	}

	[Token(Token = "0x6001477")]
	[Address(RVA = "0x875878", Offset = "0x875878", VA = "0x875878")]
	public void FailedPlacingIngredientPerfectly()
	{
	}

	[Token(Token = "0x6001478")]
	[Address(RVA = "0x875894", Offset = "0x875894", VA = "0x875894")]
	public static void TutorialStartedFromIntro()
	{
	}

	[Token(Token = "0x6001479")]
	[Address(RVA = "0x8758E0", Offset = "0x8758E0", VA = "0x8758E0")]
	public static void TutorialStartedFromIntroConfirmSkip()
	{
	}

	[Token(Token = "0x600147A")]
	[Address(RVA = "0x87592C", Offset = "0x87592C", VA = "0x87592C")]
	public static void TutorialStartedFromMenu()
	{
	}

	[Token(Token = "0x600147B")]
	[Address(RVA = "0x875978", Offset = "0x875978", VA = "0x875978")]
	public static void OnCookingSchoolSkipped()
	{
	}

	[Token(Token = "0x600147C")]
	[Address(RVA = "0x875A38", Offset = "0x875A38", VA = "0x875A38")]
	public static void OnCookingSchoolStart(bool launchOnStartup)
	{
	}

	[Token(Token = "0x600147D")]
	[Address(RVA = "0x875C10", Offset = "0x875C10", VA = "0x875C10")]
	public TutorialTracking()
	{
	}
}
[Token(Token = "0x20002EE")]
public class WristMenuTracking
{
	[Token(Token = "0x4001568")]
	private const string spawnBotEvent = "settings_wrist_spawn_bot";

	[Token(Token = "0x4001569")]
	private const string settingsMuteEvent = "settings_wrist_mute";

	[Token(Token = "0x400156A")]
	private const string settingsVolumeEvent = "settings_wrist_volume";

	[Token(Token = "0x400156B")]
	private const string settingsAutoholdEvent = "settings_wrist_autohold";

	[Token(Token = "0x400156C")]
	private const string abortCupRoundEvent = "aborted_cup_round";

	[Token(Token = "0x400156D")]
	private const string abortEndlessRoundEvent = "aborted_endless_round";

	[Token(Token = "0x400156E")]
	private const string abortTutorialEvent = "aborted_tutorial";

	[Token(Token = "0x400156F")]
	private const string mutedSelfParameter = "muted_self";

	[Token(Token = "0x4001570")]
	private const string mutedOthersParameter = "muted_others";

	[Token(Token = "0x4001571")]
	private const string volumeMusicParameter = "volume_music";

	[Token(Token = "0x4001572")]
	private const string volumeVoipParameter = "volume_voip";

	[Token(Token = "0x4001573")]
	private const string volumeSoundParameter = "volume_sound";

	[Token(Token = "0x4001574")]
	private const string volumeMusicDeltaParameter = "volume_music_delta";

	[Token(Token = "0x4001575")]
	private const string volumeVoipDeltaParameter = "volume_voip_delta";

	[Token(Token = "0x4001576")]
	private const string volumeSoundDeltaParameter = "volume_sound_delta";

	[Token(Token = "0x4001577")]
	private const string autoGripParameter = "auto_grip";

	[Token(Token = "0x4001578")]
	private const string cupIDParameter = "cup_ID";

	[Token(Token = "0x4001579")]
	private const string cupRoundNumberParameter = "round_number";

	[Token(Token = "0x400157A")]
	private const string abortRoundPlayerCountParameter = "player_count";

	[Token(Token = "0x400157B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool mutedSelf;

	[Token(Token = "0x400157C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static int mutedOthers;

	[Token(Token = "0x400157D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static bool muteSettingsDirty;

	[Token(Token = "0x400157E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static float volumeMusic;

	[Token(Token = "0x400157F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static float volumeVoip;

	[Token(Token = "0x4001580")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public static float volumeSound;

	[Token(Token = "0x4001581")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static float volumeMusicDelta;

	[Token(Token = "0x4001582")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public static float volumeVoipDelta;

	[Token(Token = "0x4001583")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static float volumeSoundDelta;

	[Token(Token = "0x600147E")]
	[Address(RVA = "0x875C20", Offset = "0x875C20", VA = "0x875C20")]
	public static void SubmitBotSpawned()
	{
	}

	[Token(Token = "0x600147F")]
	[Address(RVA = "0x875CE0", Offset = "0x875CE0", VA = "0x875CE0")]
	public static void SubmitWristMenuAutoHoldToggled(bool autoHoldActive)
	{
	}

	[Token(Token = "0x6001480")]
	[Address(RVA = "0x875E28", Offset = "0x875E28", VA = "0x875E28")]
	public static void SubmitPlayerMuteSettings()
	{
	}

	[Token(Token = "0x6001481")]
	[Address(RVA = "0x876040", Offset = "0x876040", VA = "0x876040")]
	public static void SubmitWristAudioSettings()
	{
	}

	[Token(Token = "0x6001482")]
	[Address(RVA = "0x8764C4", Offset = "0x8764C4", VA = "0x8764C4")]
	public static void OnPlayerKicked(bool blocked)
	{
	}

	[Token(Token = "0x6001483")]
	[Address(RVA = "0x87660C", Offset = "0x87660C", VA = "0x87660C")]
	public static void OnCupRoundAborted(int cupID, int roundNumber, int playerCount)
	{
	}

	[Token(Token = "0x6001484")]
	[Address(RVA = "0x876864", Offset = "0x876864", VA = "0x876864")]
	public static void OnEndlessRoundAborted(int playerCount)
	{
	}

	[Token(Token = "0x6001485")]
	[Address(RVA = "0x8769AC", Offset = "0x8769AC", VA = "0x8769AC")]
	public static void OnTutorialAborted()
	{
	}

	[Token(Token = "0x6001486")]
	[Address(RVA = "0x876A6C", Offset = "0x876A6C", VA = "0x876A6C")]
	public WristMenuTracking()
	{
	}
}
[Token(Token = "0x20002EF")]
public enum TutorialStep
{
	[Token(Token = "0x4001585")]
	Story = -1,
	[Token(Token = "0x4001586")]
	Introduction,
	[Token(Token = "0x4001587")]
	OpenFridge,
	[Token(Token = "0x4001588")]
	ChopIngredient,
	[Token(Token = "0x4001589")]
	AddToPlate,
	[Token(Token = "0x400158A")]
	CompleteSandwich,
	[Token(Token = "0x400158B")]
	HandInPlate,
	[Token(Token = "0x400158C")]
	Perfection,
	[Token(Token = "0x400158D")]
	RearrangeSandwiches,
	[Token(Token = "0x400158E")]
	Timers,
	[Token(Token = "0x400158F")]
	IntroduceGoals,
	[Token(Token = "0x4001590")]
	FinishGoals,
	[Token(Token = "0x4001591")]
	BotCooperation,
	[Token(Token = "0x4001592")]
	BotRecharge,
	[Token(Token = "0x4001593")]
	Finished,
	[Token(Token = "0x4001594")]
	NotActive
}
[Token(Token = "0x20002F0")]
public class TutorialMode : SingleInstanceBehavior<TutorialMode>
{
	[Token(Token = "0x20002F1")]
	public delegate void TutorialStepChange(TutorialStep newStep);

	[Token(Token = "0x20002F3")]
	[CompilerGenerated]
	private sealed class <TypeOutTextOverTime>d__81 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40015C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40015C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40015C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TutorialMode <>4__this;

		[Token(Token = "0x40015C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool showBot;

		[Token(Token = "0x40015C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float totalTime;

		[Token(Token = "0x1700029A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60014B2")]
			[Address(RVA = "0x8793C4", Offset = "0x8793C4", VA = "0x8793C4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700029B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60014B4")]
			[Address(RVA = "0x87940C", Offset = "0x87940C", VA = "0x87940C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014AF")]
		[Address(RVA = "0x878EA0", Offset = "0x878EA0", VA = "0x878EA0")]
		[DebuggerHidden]
		public <TypeOutTextOverTime>d__81(int <>1__state)
		{
		}

		[Token(Token = "0x60014B0")]
		[Address(RVA = "0x879220", Offset = "0x879220", VA = "0x879220", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60014B1")]
		[Address(RVA = "0x879224", Offset = "0x879224", VA = "0x879224", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60014B3")]
		[Address(RVA = "0x8793CC", Offset = "0x8793CC", VA = "0x8793CC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4001595")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private TutorialStep currentStepBacking;

	[Token(Token = "0x4001596")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private bool isActive;

	[Token(Token = "0x4001599")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Sprite storyPicture;

	[Token(Token = "0x400159A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool debugStepChanges;

	[Token(Token = "0x400159B")]
	private const string EnterTrigger = "Enter";

	[Token(Token = "0x400159C")]
	private const string ExitTrigger = "Exit";

	[Token(Token = "0x400159D")]
	private const string NextLineTrigger = "NextLine";

	[Token(Token = "0x400159E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private LevelData tutorialLevelData;

	[Token(Token = "0x400159F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private VideoPlayer videoPlayer;

	[Token(Token = "0x40015A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private TextMeshPro tutorialText;

	[Token(Token = "0x40015A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private TextMeshPro callToActionText;

	[Token(Token = "0x40015A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private VideoClip[] tutorialClips;

	[Token(Token = "0x40015A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private ParticleSystem pointerParticle;

	[Token(Token = "0x40015A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Transform pointerParticleTarget;

	[Token(Token = "0x40015A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Transform pointerAnchorWindow;

	[Token(Token = "0x40015A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private EmitFromMesh pointerEmitFromMesh;

	[Token(Token = "0x40015A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private Transform pointerAnchorGoals;

	[Token(Token = "0x40015A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private GameObject dummyGoalsUI;

	[Token(Token = "0x40015A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private TextMeshPro[] dummyGoalsUIDescriptions;

	[Token(Token = "0x40015AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private Animator speechBubbleAnimator;

	[Token(Token = "0x40015AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private float pauseBeforeEndingTutorial;

	[Token(Token = "0x40015AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private CookingRound cookingRound;

	[Token(Token = "0x40015AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private TimeSlowdownHandler timeSlowdownHandler;

	[Token(Token = "0x40015AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private GameObject speechBubbleRoot;

	[Token(Token = "0x40015AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private GameObject videoRoot;

	[Token(Token = "0x40015B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private GameObject pointerParticleGO;

	[Token(Token = "0x40015B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private TutorialModePlateHandler TutorialModePlateHandler;

	[Token(Token = "0x40015B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private ConveyorBelt conveyorBelt;

	[Token(Token = "0x40015B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Fridge[] fridges;

	[Token(Token = "0x40015B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private HandInColliderEnabler handInColliderEnabler;

	[Token(Token = "0x40015B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private LocalizedText localizedTutorialText;

	[Token(Token = "0x40015B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private LocalizedText localizedCallToActionText;

	[Token(Token = "0x40015B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private StarGoalsHandler goalHandler;

	[Token(Token = "0x40015B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private float endingTutorialCountdown;

	[Token(Token = "0x40015B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	private int tutorialDescriptionLength;

	[Token(Token = "0x40015BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private int stringCharDisplayCount;

	[Token(Token = "0x40015BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private WaitForSeconds typingDelayBetweenChar;

	[Token(Token = "0x40015BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private TutorialTracking tutorialTracking;

	[Token(Token = "0x40015BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private BotManager botManager;

	[Token(Token = "0x40015BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private Coroutine typingCoroutine;

	[Token(Token = "0x40015BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private Renderer[] videoRenderers;

	[Token(Token = "0x40015C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private Animator videoWindowAnimator;

	[Token(Token = "0x40015C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private int enterTriggerID;

	[Token(Token = "0x17000295")]
	public TutorialStep CurrentStep
	{
		[Token(Token = "0x6001487")]
		[Address(RVA = "0x876A74", Offset = "0x876A74", VA = "0x876A74")]
		get
		{
			return default(TutorialStep);
		}
		[Token(Token = "0x6001488")]
		[Address(RVA = "0x876A7C", Offset = "0x876A7C", VA = "0x876A7C")]
		private set
		{
		}
	}

	[Token(Token = "0x17000296")]
	public bool IsActive
	{
		[Token(Token = "0x6001489")]
		[Address(RVA = "0x8771BC", Offset = "0x8771BC", VA = "0x8771BC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600148A")]
		[Address(RVA = "0x8771C4", Offset = "0x8771C4", VA = "0x8771C4")]
		private set
		{
		}
	}

	[Token(Token = "0x17000297")]
	public LevelData TutorialLevel
	{
		[Token(Token = "0x600148B")]
		[Address(RVA = "0x877218", Offset = "0x877218", VA = "0x877218")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000298")]
	public bool GoalsAreActive
	{
		[Token(Token = "0x600148C")]
		[Address(RVA = "0x877220", Offset = "0x877220", VA = "0x877220")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600148D")]
		[Address(RVA = "0x877228", Offset = "0x877228", VA = "0x877228")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000299")]
	public bool CanShowPlateHandInEffect
	{
		[Token(Token = "0x600148E")]
		[Address(RVA = "0x877234", Offset = "0x877234", VA = "0x877234")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1400002E")]
	public event TutorialStepChange OnTutorialStepChange
	{
		[Token(Token = "0x600148F")]
		[Address(RVA = "0x877248", Offset = "0x877248", VA = "0x877248")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6001490")]
		[Address(RVA = "0x8772E4", Offset = "0x8772E4", VA = "0x8772E4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6001491")]
	[Address(RVA = "0x877380", Offset = "0x877380", VA = "0x877380", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6001492")]
	[Address(RVA = "0x877674", Offset = "0x877674", VA = "0x877674")]
	private void SetVideoRenderersEnabled(bool enabled)
	{
	}

	[Token(Token = "0x6001493")]
	[Address(RVA = "0x8776DC", Offset = "0x8776DC", VA = "0x8776DC")]
	private void Start()
	{
	}

	[Token(Token = "0x6001494")]
	[Address(RVA = "0x877BBC", Offset = "0x877BBC", VA = "0x877BBC")]
	private void Update()
	{
	}

	[Token(Token = "0x6001495")]
	[Address(RVA = "0x876A9C", Offset = "0x876A9C", VA = "0x876A9C")]
	private void OnStepChange(TutorialStep oldStep, TutorialStep newStep)
	{
	}

	[Token(Token = "0x6001496")]
	[Address(RVA = "0x8780DC", Offset = "0x8780DC", VA = "0x8780DC")]
	private void ShowVideoExample(TutorialStep newStep)
	{
	}

	[Token(Token = "0x6001497")]
	[Address(RVA = "0x878150", Offset = "0x878150", VA = "0x878150")]
	private void UnlockStepAction(TutorialStep newStep)
	{
	}

	[Token(Token = "0x6001498")]
	[Address(RVA = "0x877D6C", Offset = "0x877D6C", VA = "0x877D6C")]
	private void SetPlayerFridgeIngredients(IngredientType[] ingredients)
	{
	}

	[Token(Token = "0x6001499")]
	[Address(RVA = "0x878644", Offset = "0x878644", VA = "0x878644")]
	public void OnPlateDelivered(bool wasPerfect)
	{
	}

	[Token(Token = "0x600149A")]
	[Address(RVA = "0x878684", Offset = "0x878684", VA = "0x878684")]
	public void StartTutorialMode()
	{
	}

	[Token(Token = "0x600149B")]
	[Address(RVA = "0x878740", Offset = "0x878740", VA = "0x878740")]
	public void OnTutorialStart()
	{
	}

	[Token(Token = "0x600149C")]
	[Address(RVA = "0x878A04", Offset = "0x878A04", VA = "0x878A04")]
	public void OnTutorialStoryComplete()
	{
	}

	[Token(Token = "0x600149D")]
	[Address(RVA = "0x877CF0", Offset = "0x877CF0", VA = "0x877CF0")]
	private void SetFridgeLocks(bool isLocked)
	{
	}

	[Token(Token = "0x600149E")]
	[Address(RVA = "0x878A44", Offset = "0x878A44", VA = "0x878A44")]
	public void OnIngredientAddedToPlate(StackedIngredientData stackedData, bool readyToDeliver)
	{
	}

	[Token(Token = "0x600149F")]
	[Address(RVA = "0x878AC0", Offset = "0x878AC0", VA = "0x878AC0")]
	public void OnBotRecharged()
	{
	}

	[Token(Token = "0x60014A0")]
	[Address(RVA = "0x878AE4", Offset = "0x878AE4", VA = "0x878AE4")]
	public void OnTriedAddingIngredientToPerfectOnlyPlate(bool canAddIngredient)
	{
	}

	[Token(Token = "0x60014A1")]
	[Address(RVA = "0x878B24", Offset = "0x878B24", VA = "0x878B24")]
	public void OnTutorialEnd()
	{
	}

	[Token(Token = "0x60014A2")]
	[Address(RVA = "0x878A24", Offset = "0x878A24", VA = "0x878A24")]
	public void GoToNextTutorialStep(TutorialStep from, TutorialStep to)
	{
	}

	[Token(Token = "0x60014A3")]
	[Address(RVA = "0x878E34", Offset = "0x878E34", VA = "0x878E34")]
	private void OnGoalCleared()
	{
	}

	[Token(Token = "0x60014A4")]
	[Address(RVA = "0x8785F0", Offset = "0x8785F0", VA = "0x8785F0")]
	private void PointTowardsPointOfInterest(Vector3 endPoint)
	{
	}

	[Token(Token = "0x60014A5")]
	[Address(RVA = "0x878050", Offset = "0x878050", VA = "0x878050")]
	[IteratorStateMachine(typeof(<TypeOutTextOverTime>d__81))]
	private IEnumerator TypeOutTextOverTime(float totalTime, bool showBot = false)
	{
		return null;
	}

	[Token(Token = "0x60014A6")]
	[Address(RVA = "0x878EC8", Offset = "0x878EC8", VA = "0x878EC8", Slot = "5")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x60014A7")]
	[Address(RVA = "0x878FC8", Offset = "0x878FC8", VA = "0x878FC8")]
	public void DebugSkipTutorialStep()
	{
	}

	[Token(Token = "0x60014A8")]
	[Address(RVA = "0x878FE8", Offset = "0x878FE8", VA = "0x878FE8")]
	public TutorialMode()
	{
	}
}
[Token(Token = "0x20002F4")]
public class TutorialModePlateHandler : SingleInstanceBehavior<TutorialModePlateHandler>
{
	[Token(Token = "0x40015C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Recipe[] basicRecipes;

	[Token(Token = "0x40015CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Recipe[] perfectionRecipes;

	[Token(Token = "0x40015CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Recipe[] StandardRecipes;

	[Token(Token = "0x40015CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Recipe[] CooperationRecipe;

	[Token(Token = "0x40015CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public List<PhotonView> SpawnedPlates;

	[Token(Token = "0x40015CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private CookingRound cookingRound;

	[Token(Token = "0x40015CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private TutorialMode tutorialMode;

	[Token(Token = "0x1700029C")]
	public CustomerType GetNextCustomerType
	{
		[Token(Token = "0x60014B5")]
		[Address(RVA = "0x879414", Offset = "0x879414", VA = "0x879414")]
		get
		{
			return default(CustomerType);
		}
	}

	[Token(Token = "0x60014B6")]
	[Address(RVA = "0x879440", Offset = "0x879440", VA = "0x879440")]
	private void Start()
	{
	}

	[Token(Token = "0x60014B7")]
	[Address(RVA = "0x877DA0", Offset = "0x877DA0", VA = "0x877DA0")]
	public void ClearPlates()
	{
	}

	[Token(Token = "0x60014B8")]
	[Address(RVA = "0x8795A4", Offset = "0x8795A4", VA = "0x8795A4")]
	public void OnPlateSpawned(Plate plate)
	{
	}

	[Token(Token = "0x60014B9")]
	[Address(RVA = "0x8785D0", Offset = "0x8785D0", VA = "0x8785D0")]
	public void SpawnPlate()
	{
	}

	[Token(Token = "0x60014BA")]
	[Address(RVA = "0x8799AC", Offset = "0x8799AC", VA = "0x8799AC")]
	public void OnShatteredPlateRespawn(Plate plate)
	{
	}

	[Token(Token = "0x60014BB")]
	[Address(RVA = "0x8799D8", Offset = "0x8799D8", VA = "0x8799D8")]
	public Recipe GetNewRecipe()
	{
		return default(Recipe);
	}

	[Token(Token = "0x60014BC")]
	[Address(RVA = "0x879694", Offset = "0x879694", VA = "0x879694")]
	private void AddUpsideDownSandwichToPlate(Plate plate)
	{
	}

	[Token(Token = "0x60014BD")]
	[Address(RVA = "0x879A60", Offset = "0x879A60", VA = "0x879A60")]
	public TutorialModePlateHandler()
	{
	}
}
[Token(Token = "0x20002F5")]
public class CoinCount : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40015D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TextMeshPro coinCountText;

	[Token(Token = "0x40015D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float coinAdjustmentTime;

	[Token(Token = "0x40015D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool setupComplete;

	[Token(Token = "0x40015D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int coinStringValue;

	[Token(Token = "0x40015D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Color textStartColor;

	[Token(Token = "0x40015D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private SaveManager saveManager;

	[Token(Token = "0x1700029D")]
	private int Balance
	{
		[Token(Token = "0x60014BE")]
		[Address(RVA = "0x87A33C", Offset = "0x87A33C", VA = "0x87A33C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60014BF")]
	[Address(RVA = "0x87A358", Offset = "0x87A358", VA = "0x87A358")]
	private void Awake()
	{
	}

	[Token(Token = "0x60014C0")]
	[Address(RVA = "0x87A35C", Offset = "0x87A35C", VA = "0x87A35C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60014C1")]
	[Address(RVA = "0x87A700", Offset = "0x87A700", VA = "0x87A700")]
	private void OnCoinCountChanged()
	{
	}

	[Token(Token = "0x60014C2")]
	[Address(RVA = "0x87A600", Offset = "0x87A600", VA = "0x87A600")]
	private void TweenCoinCount(int newCount)
	{
	}

	[Token(Token = "0x60014C3")]
	[Address(RVA = "0x87A74C", Offset = "0x87A74C", VA = "0x87A74C")]
	private void UpdateCoinCount(float newValue)
	{
	}

	[Token(Token = "0x60014C4")]
	[Address(RVA = "0x87A8E4", Offset = "0x87A8E4", VA = "0x87A8E4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60014C5")]
	[Address(RVA = "0x87A9B8", Offset = "0x87A9B8", VA = "0x87A9B8")]
	public void PlayCannotAffordEffect()
	{
	}

	[Token(Token = "0x60014C6")]
	[Address(RVA = "0x87ABE8", Offset = "0x87ABE8", VA = "0x87ABE8")]
	public void PlayCannotAffordEffectAvatarMenu()
	{
	}

	[Token(Token = "0x60014C7")]
	[Address(RVA = "0x87AE14", Offset = "0x87AE14", VA = "0x87AE14")]
	public CoinCount()
	{
	}
}
[Token(Token = "0x20002F6")]
public class CupWindowUI : SingleInstanceBehavior<CupWindowUI>
{
	[Token(Token = "0x20002F7")]
	private enum DisplayerState
	{
		[Token(Token = "0x40015E1")]
		Disabled,
		[Token(Token = "0x40015E2")]
		CupRound,
		[Token(Token = "0x40015E3")]
		EndlessRound,
		[Token(Token = "0x40015E4")]
		CreativeRound
	}

	[Token(Token = "0x40015D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TextMeshPro customerLeftText;

	[Token(Token = "0x40015D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject cupModeUI;

	[Token(Token = "0x40015D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject endlessModeUI;

	[Token(Token = "0x40015D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CookingCup cookingCup;

	[Token(Token = "0x40015DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private CookingRound cookingRound;

	[Token(Token = "0x40015DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private CreativeMode creativeMode;

	[Token(Token = "0x40015DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private CookingGameState cookingGameState;

	[Token(Token = "0x40015DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int customersCleared;

	[Token(Token = "0x40015DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int totalCustomers;

	[Token(Token = "0x40015DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private DisplayerState displayerState;

	[Token(Token = "0x60014D0")]
	[Address(RVA = "0x87B508", Offset = "0x87B508", VA = "0x87B508", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x60014D1")]
	[Address(RVA = "0x87B550", Offset = "0x87B550", VA = "0x87B550")]
	private void Start()
	{
	}

	[Token(Token = "0x60014D2")]
	[Address(RVA = "0x87B9FC", Offset = "0x87B9FC", VA = "0x87B9FC")]
	private void UpdateDisplayedInfo()
	{
	}

	[Token(Token = "0x60014D3")]
	[Address(RVA = "0x87BA44", Offset = "0x87BA44", VA = "0x87BA44")]
	private void OnRoundStart()
	{
	}

	[Token(Token = "0x60014D4")]
	[Address(RVA = "0x87BCF0", Offset = "0x87BCF0", VA = "0x87BCF0")]
	private void OnRoundStop()
	{
	}

	[Token(Token = "0x60014D5")]
	[Address(RVA = "0x87BD1C", Offset = "0x87BD1C", VA = "0x87BD1C")]
	private void Update()
	{
	}

	[Token(Token = "0x60014D6")]
	[Address(RVA = "0x87BE8C", Offset = "0x87BE8C", VA = "0x87BE8C")]
	private void OnGameStateChanged(GameState oldState, GameState newState)
	{
	}

	[Token(Token = "0x60014D7")]
	[Address(RVA = "0x87BF30", Offset = "0x87BF30", VA = "0x87BF30", Slot = "5")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x60014D8")]
	[Address(RVA = "0x87C108", Offset = "0x87C108", VA = "0x87C108")]
	public CupWindowUI()
	{
	}
}
[Token(Token = "0x20002F8")]
public class DiscordPrompt : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40015E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private PokeButton closeButton;

	[Token(Token = "0x40015E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private PokeButton openButton;

	[Token(Token = "0x40015E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject prompt;

	[Token(Token = "0x40015E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject openButtonGO;

	[Token(Token = "0x60014DB")]
	[Address(RVA = "0x87C17C", Offset = "0x87C17C", VA = "0x87C17C")]
	private void Start()
	{
	}

	[Token(Token = "0x60014DC")]
	[Address(RVA = "0x87C26C", Offset = "0x87C26C", VA = "0x87C26C")]
	private void Hide()
	{
	}

	[Token(Token = "0x60014DD")]
	[Address(RVA = "0x87C2A4", Offset = "0x87C2A4", VA = "0x87C2A4")]
	private void Show()
	{
	}

	[Token(Token = "0x60014DE")]
	[Address(RVA = "0x87C2DC", Offset = "0x87C2DC", VA = "0x87C2DC")]
	public DiscordPrompt()
	{
	}
}
[Token(Token = "0x20002F9")]
public class EndlessWaveDisplayer : SingleInstanceNetworkedBehavior<EndlessWaveDisplayer>, IPunObservable
{
	[Token(Token = "0x40015E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Sprite perfectServedIcon;

	[Token(Token = "0x40015EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Sprite servedIcon;

	[Token(Token = "0x40015EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Sprite notServedIcon;

	[Token(Token = "0x40015EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private TextMeshPro perfectCountText;

	[Token(Token = "0x40015ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private SpriteRenderer prizeUnlockedBG;

	[Token(Token = "0x40015EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private SpriteRenderer[] serveIcons;

	[Token(Token = "0x40015EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private byte[] servedOrders;

	[Token(Token = "0x40015F0")]
	private const int numberOfDisplayedOrders = 10;

	[Token(Token = "0x40015F1")]
	private const byte unserved = 0;

	[Token(Token = "0x40015F2")]
	private const byte served = 1;

	[Token(Token = "0x40015F3")]
	private const byte servedPerfect = 2;

	[Token(Token = "0x60014DF")]
	[Address(RVA = "0x87C2E4", Offset = "0x87C2E4", VA = "0x87C2E4")]
	private void Start()
	{
	}

	[Token(Token = "0x60014E0")]
	[Address(RVA = "0x87C58C", Offset = "0x87C58C", VA = "0x87C58C")]
	public void Reset()
	{
	}

	[Token(Token = "0x60014E1")]
	[Address(RVA = "0x87C5CC", Offset = "0x87C5CC", VA = "0x87C5CC")]
	public void OnOrderServed(int numberOfServed, bool wasPerfect)
	{
	}

	[Token(Token = "0x60014E2")]
	[Address(RVA = "0x87C32C", Offset = "0x87C32C", VA = "0x87C32C")]
	public void UpdateDisplay()
	{
	}

	[Token(Token = "0x60014E3")]
	[Address(RVA = "0x87C60C", Offset = "0x87C60C", VA = "0x87C60C", Slot = "6")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60014E4")]
	[Address(RVA = "0x87C754", Offset = "0x87C754", VA = "0x87C754")]
	public EndlessWaveDisplayer()
	{
	}
}
[Token(Token = "0x20002FA")]
public class FaceLocalPlayer : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40015F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Global Rotation Settings")]
	public bool ignoreY;

	[Token(Token = "0x40015F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool flip;

	[Token(Token = "0x40015F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	[Header("Local Rotation Settings")]
	public bool rotateLocallyOnly;

	[Token(Token = "0x60014E5")]
	[Address(RVA = "0x87C810", Offset = "0x87C810", VA = "0x87C810")]
	private void Update()
	{
	}

	[Token(Token = "0x60014E6")]
	[Address(RVA = "0x87CAD0", Offset = "0x87CAD0", VA = "0x87CAD0")]
	public FaceLocalPlayer()
	{
	}
}
[Token(Token = "0x20002FB")]
public class FaceLocalPlayerSide : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40015F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3[] rotationsTowardLocalPlayer;

	[Token(Token = "0x60014E7")]
	[Address(RVA = "0x87CAE0", Offset = "0x87CAE0", VA = "0x87CAE0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60014E8")]
	[Address(RVA = "0x87CAE4", Offset = "0x87CAE4", VA = "0x87CAE4")]
	private void Start()
	{
	}

	[Token(Token = "0x60014E9")]
	[Address(RVA = "0x87CCF4", Offset = "0x87CCF4", VA = "0x87CCF4")]
	public void FacePlayerSide()
	{
	}

	[Token(Token = "0x60014EA")]
	[Address(RVA = "0x87CCF8", Offset = "0x87CCF8", VA = "0x87CCF8")]
	private void OnLocalPlayerMoved(int spawnPointIndex)
	{
	}

	[Token(Token = "0x60014EB")]
	[Address(RVA = "0x87CC0C", Offset = "0x87CC0C", VA = "0x87CC0C")]
	private void UpdateRotationIfAvailable()
	{
	}

	[Token(Token = "0x60014EC")]
	[Address(RVA = "0x87CCFC", Offset = "0x87CCFC", VA = "0x87CCFC")]
	private void UpdateRotation(int spawnPointIndex)
	{
	}

	[Token(Token = "0x60014ED")]
	[Address(RVA = "0x87CD7C", Offset = "0x87CD7C", VA = "0x87CD7C")]
	public FaceLocalPlayerSide()
	{
	}
}
[Token(Token = "0x20002FC")]
public class FeedbackPopup : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x20002FD")]
	public enum PopupType
	{
		[Token(Token = "0x4001607")]
		Text,
		[Token(Token = "0x4001608")]
		Sprite
	}

	[Token(Token = "0x40015F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public bool isShowing;

	[Token(Token = "0x40015F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool playOnAwake;

	[Token(Token = "0x40015FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool fadeOutAutomatically;

	[Token(Token = "0x40015FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public PopupType popupType;

	[Token(Token = "0x40015FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float fadeTime;

	[Token(Token = "0x40015FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float fadeOutDelay;

	[Token(Token = "0x40015FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float moveTime;

	[Token(Token = "0x40015FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float targetHeight;

	[Token(Token = "0x4001600")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private TextMeshPro textComponent;

	[Token(Token = "0x4001601")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SpriteRenderer spriteRenderer;

	[Token(Token = "0x4001602")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Color visibleColor;

	[Token(Token = "0x4001603")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Color invisibleColor;

	[Token(Token = "0x4001604")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3 visibleScale;

	[Token(Token = "0x4001605")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private GameObject parent;

	[Token(Token = "0x60014EE")]
	[Address(RVA = "0x87CD84", Offset = "0x87CD84", VA = "0x87CD84")]
	private void Awake()
	{
	}

	[Token(Token = "0x60014EF")]
	[Address(RVA = "0x87CEF0", Offset = "0x87CEF0", VA = "0x87CEF0")]
	public void Show()
	{
	}

	[Token(Token = "0x60014F0")]
	[Address(RVA = "0x87CF28", Offset = "0x87CF28", VA = "0x87CF28")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60014F1")]
	[Address(RVA = "0x87D28C", Offset = "0x87D28C", VA = "0x87D28C")]
	private void FadeOut()
	{
	}

	[Token(Token = "0x60014F2")]
	[Address(RVA = "0x87D23C", Offset = "0x87D23C", VA = "0x87D23C")]
	private void SetColor(Color color)
	{
	}

	[Token(Token = "0x60014F3")]
	[Address(RVA = "0x87CE90", Offset = "0x87CE90", VA = "0x87CE90")]
	private Color GetColor()
	{
		return default(Color);
	}

	[Token(Token = "0x60014F4")]
	[Address(RVA = "0x87D438", Offset = "0x87D438", VA = "0x87D438")]
	internal void SetText(string feedback, Color color)
	{
	}

	[Token(Token = "0x60014F5")]
	[Address(RVA = "0x87D73C", Offset = "0x87D73C", VA = "0x87D73C")]
	public FeedbackPopup()
	{
	}
}
[Token(Token = "0x20002FE")]
public class GhostMenu : NetworkedBehaviour, IPunObservable
{
	[Token(Token = "0x4001609")]
	private const int noLoadoutItem = -1;

	[Token(Token = "0x400160A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private SpriteRenderer[] loadoutIcons;

	[Token(Token = "0x400160B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool shouldShow;

	[Token(Token = "0x400160C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool shouldShowLoadout;

	[Token(Token = "0x400160D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Renderer meshRenderer;

	[Token(Token = "0x400160E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 position;

	[Token(Token = "0x400160F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Quaternion rotation;

	[Token(Token = "0x4001610")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private int[] loadout;

	[Token(Token = "0x4001611")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private ConsumableRegistry registry;

	[Token(Token = "0x60014FA")]
	[Address(RVA = "0x87D78C", Offset = "0x87D78C", VA = "0x87D78C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60014FB")]
	[Address(RVA = "0x87D93C", Offset = "0x87D93C", VA = "0x87D93C")]
	public void Setup(bool shouldShow, Vector3 position, Quaternion rotation)
	{
	}

	[Token(Token = "0x60014FC")]
	[Address(RVA = "0x87D9E0", Offset = "0x87D9E0", VA = "0x87D9E0")]
	public void SetPosition(Vector3 position, Quaternion rotation)
	{
	}

	[Token(Token = "0x60014FD")]
	[Address(RVA = "0x87DA84", Offset = "0x87DA84", VA = "0x87DA84")]
	public void Show(bool shouldShow)
	{
	}

	[Token(Token = "0x60014FE")]
	[Address(RVA = "0x87DA90", Offset = "0x87DA90", VA = "0x87DA90")]
	public void ResetLoadout()
	{
	}

	[Token(Token = "0x60014FF")]
	[Address(RVA = "0x87DB80", Offset = "0x87DB80", VA = "0x87DB80")]
	public void ShowLoadout(bool shouldShow)
	{
	}

	[Token(Token = "0x6001500")]
	[Address(RVA = "0x87DAFC", Offset = "0x87DAFC", VA = "0x87DAFC")]
	public void UpdateLoadout(int loadoutIndex, int consumableType)
	{
	}

	[Token(Token = "0x6001501")]
	[Address(RVA = "0x87DC14", Offset = "0x87DC14", VA = "0x87DC14", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6001502")]
	[Address(RVA = "0x87E030", Offset = "0x87E030", VA = "0x87E030")]
	public GhostMenu()
	{
	}
}
[Token(Token = "0x20002FF")]
public class InventoryMenu : SingleInstanceBehavior<InventoryMenu>
{
	[Token(Token = "0x2000300")]
	private enum State
	{
		[Token(Token = "0x400164B")]
		Inactive,
		[Token(Token = "0x400164C")]
		SelectType,
		[Token(Token = "0x400164D")]
		SelectItem,
		[Token(Token = "0x400164E")]
		ViewRecipes
	}

	[Token(Token = "0x4001612")]
	private const int noItemSelected = -1;

	[Token(Token = "0x4001613")]
	private const int itemButtonCount = 9;

	[Token(Token = "0x4001614")]
	private const string propertyMainTexture = "_MainTex";

	[Token(Token = "0x4001615")]
	private const string localizationHeaderCleavers = "inventory_header_cleavers";

	[Token(Token = "0x4001616")]
	private const string localizationHeaderFridges = "inventory_header_fridges";

	[Token(Token = "0x4001617")]
	private const string localizationHeaderBoards = "inventory_header_boards";

	[Token(Token = "0x4001618")]
	private const string localizationHeaderRecipes = "inventory_header_recipes";

	[Token(Token = "0x4001619")]
	private const string localizationInventoryHeader = "inventory_header";

	[Token(Token = "0x400161A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int selectedItem;

	[Token(Token = "0x400161B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private State currentStateBacking;

	[Token(Token = "0x400161C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Roots")]
	[SerializeField]
	private GameObject menuRoot;

	[Token(Token = "0x400161D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject itemSelectRoot;

	[Token(Token = "0x400161E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Texts")]
	[SerializeField]
	private TextMeshPro bannerLabel;

	[Token(Token = "0x400161F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private TextMeshPro SelectedItemLabel;

	[Token(Token = "0x4001620")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private TextMeshPro SelectedItemDescription;

	[Token(Token = "0x4001621")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private TextMeshPro pageDisplayText;

	[Token(Token = "0x4001622")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[Header("Buttons")]
	private PokeButton equipItemButton;

	[Token(Token = "0x4001623")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private PokeButton exitTypeSelectButton;

	[Token(Token = "0x4001624")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private PokeButton cleaverSelectButton;

	[Token(Token = "0x4001625")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private PokeButton cuttingBoardSelectButton;

	[Token(Token = "0x4001626")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private PokeButton fridgeSelectButton;

	[Token(Token = "0x4001627")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private PokeButton viewRecipesButton;

	[Token(Token = "0x4001628")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private PokeButton scrollUp;

	[Token(Token = "0x4001629")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private PokeButton scrollDown;

	[Token(Token = "0x400162A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private PokeButton ExitItemSelectButton;

	[Token(Token = "0x400162B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private GameObject[] itemButtonsGO;

	[Token(Token = "0x400162C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[Header("Textures/Sprites")]
	[SerializeField]
	private Texture inactiveTexture;

	[Token(Token = "0x400162D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private Texture activeTexture;

	[Token(Token = "0x400162E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private Sprite lockedIcon;

	[Token(Token = "0x400162F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private Material inactiveMaterial;

	[Token(Token = "0x4001630")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private Material activeMaterial;

	[Token(Token = "0x4001631")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	[Header("Other")]
	private SpriteRenderer itemIconRenderer;

	[Token(Token = "0x4001632")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	private GameObject equipButtonLock;

	[Token(Token = "0x4001633")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[SerializeField]
	private Animator animator;

	[Token(Token = "0x4001634")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private RewardType currentType;

	[Token(Token = "0x4001635")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private GameObject equipButtonGO;

	[Token(Token = "0x4001636")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private ItemRewardsRegistry rewardsRegistry;

	[Token(Token = "0x4001637")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private MeshRenderer[] itemButtonRenderers;

	[Token(Token = "0x4001638")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private SpriteRenderer[] itemButtonIcons;

	[Token(Token = "0x4001639")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private GameObject[] itemButtonEquippedLabels;

	[Token(Token = "0x400163A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private PokeButton[] itemButtons;

	[Token(Token = "0x400163B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private SaveManager saveManager;

	[Token(Token = "0x400163C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private bool CurrentItemUnlocked;

	[Token(Token = "0x400163D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private MaterialPropertyBlock propertyBlock;

	[Token(Token = "0x400163E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private Locale locale;

	[Token(Token = "0x400163F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private Dictionary<RewardType, int> currentPage;

	[Token(Token = "0x4001640")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private Dictionary<RewardType, int> pageCounts;

	[Token(Token = "0x4001641")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private int[] pageOffsets;

	[Token(Token = "0x4001642")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private bool skipAnimation;

	[Token(Token = "0x4001643")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private Collider[] colliders;

	[Token(Token = "0x4001644")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private Renderer upButtonRenderer;

	[Token(Token = "0x4001645")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private Renderer downButtonRenderer;

	[Token(Token = "0x4001646")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private ItemRewardID[] cleaverMapping;

	[Token(Token = "0x4001647")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private ItemRewardID[] fridgesMapping;

	[Token(Token = "0x4001648")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private ItemRewardID[] cuttingBoardsMapping;

	[Token(Token = "0x4001649")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private int selectedButtonIndex;

	[Token(Token = "0x1700029E")]
	private int SelectedItem
	{
		[Token(Token = "0x6001503")]
		[Address(RVA = "0x87E0DC", Offset = "0x87E0DC", VA = "0x87E0DC")]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001504")]
		[Address(RVA = "0x87E0E4", Offset = "0x87E0E4", VA = "0x87E0E4")]
		set
		{
		}
	}

	[Token(Token = "0x1700029F")]
	private State CurrentState
	{
		[Token(Token = "0x6001505")]
		[Address(RVA = "0x87E190", Offset = "0x87E190", VA = "0x87E190")]
		get
		{
			return default(State);
		}
		[Token(Token = "0x6001506")]
		[Address(RVA = "0x87E198", Offset = "0x87E198", VA = "0x87E198")]
		set
		{
		}
	}

	[Token(Token = "0x170002A0")]
	public bool IsVisible
	{
		[Token(Token = "0x6001507")]
		[Address(RVA = "0x87E4A4", Offset = "0x87E4A4", VA = "0x87E4A4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001508")]
	[Address(RVA = "0x87E4B4", Offset = "0x87E4B4", VA = "0x87E4B4", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6001509")]
	[Address(RVA = "0x87EBDC", Offset = "0x87EBDC", VA = "0x87EBDC")]
	public void Start()
	{
	}

	[Token(Token = "0x600150A")]
	[Address(RVA = "0x87F034", Offset = "0x87F034", VA = "0x87F034")]
	private void SetupSortMapping(List<RewardItem> rewardItems, ref ItemRewardID[] mapping)
	{
	}

	[Token(Token = "0x600150B")]
	[Address(RVA = "0x87F560", Offset = "0x87F560", VA = "0x87F560")]
	public void Show(bool shouldShow, bool skipHideAnimation)
	{
	}

	[Token(Token = "0x600150C")]
	[Address(RVA = "0x87E1A8", Offset = "0x87E1A8", VA = "0x87E1A8")]
	private void OnStateChange(State oldState)
	{
	}

	[Token(Token = "0x600150D")]
	[Address(RVA = "0x87F468", Offset = "0x87F468", VA = "0x87F468")]
	private void Hide(bool skipAnimation = false)
	{
	}

	[Token(Token = "0x600150E")]
	[Address(RVA = "0x87F57C", Offset = "0x87F57C", VA = "0x87F57C")]
	private void SelectEquippable(int buttonIndex, ItemRewardID itemRewardID)
	{
	}

	[Token(Token = "0x600150F")]
	[Address(RVA = "0x87F690", Offset = "0x87F690", VA = "0x87F690")]
	private void SelectItem(int buttonIndex)
	{
	}

	[Token(Token = "0x6001510")]
	[Address(RVA = "0x87F7B0", Offset = "0x87F7B0", VA = "0x87F7B0")]
	private void SetItemTypeTab(RewardType type)
	{
	}

	[Token(Token = "0x6001511")]
	[Address(RVA = "0x87FCD0", Offset = "0x87FCD0", VA = "0x87FCD0")]
	private ItemRewardID GetItemInSortedOrder(RewardType type, int index)
	{
		return default(ItemRewardID);
	}

	[Token(Token = "0x6001512")]
	[Address(RVA = "0x87FE2C", Offset = "0x87FE2C", VA = "0x87FE2C")]
	private void EquipSelectedItem()
	{
	}

	[Token(Token = "0x6001513")]
	[Address(RVA = "0x87FF8C", Offset = "0x87FF8C", VA = "0x87FF8C")]
	public void RefreshUnlockedEquippable()
	{
	}

	[Token(Token = "0x6001514")]
	[Address(RVA = "0x87E0EC", Offset = "0x87E0EC", VA = "0x87E0EC")]
	private void OnSelectedItem(int newSelectedItem)
	{
	}

	[Token(Token = "0x6001515")]
	[Address(RVA = "0x88041C", Offset = "0x88041C", VA = "0x88041C")]
	private void ScrollUp()
	{
	}

	[Token(Token = "0x6001516")]
	[Address(RVA = "0x8804E4", Offset = "0x8804E4", VA = "0x8804E4")]
	private void ScrollDown()
	{
	}

	[Token(Token = "0x6001517")]
	[Address(RVA = "0x87F714", Offset = "0x87F714", VA = "0x87F714")]
	private void SetButtonActiveVisuals(Renderer renderer, bool isActive)
	{
	}

	[Token(Token = "0x6001518")]
	[Address(RVA = "0x8805F4", Offset = "0x8805F4", VA = "0x8805F4")]
	private void OnExitItemSelect()
	{
	}

	[Token(Token = "0x6001519")]
	[Address(RVA = "0x880614", Offset = "0x880614", VA = "0x880614")]
	public void OnRecipeBookClosed()
	{
	}

	[Token(Token = "0x600151A")]
	[Address(RVA = "0x880634", Offset = "0x880634", VA = "0x880634")]
	public InventoryMenu()
	{
	}
}
[Token(Token = "0x2000303")]
public class LanguageSettings : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4001654")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private PokeButton[] languageButtons;

	[Token(Token = "0x4001655")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject SettingsParent;

	[Token(Token = "0x4001656")]
	private const int languageCount = 8;

	[Token(Token = "0x4001657")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private SpriteRenderer[] checkMarks;

	[Token(Token = "0x4001658")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Locale locale;

	[Token(Token = "0x4001659")]
	private const string selectedLocaleKey = "selectedLanguage";

	[Token(Token = "0x6001524")]
	[Address(RVA = "0x880A1C", Offset = "0x880A1C", VA = "0x880A1C")]
	private void Start()
	{
	}

	[Token(Token = "0x6001525")]
	[Address(RVA = "0x880D88", Offset = "0x880D88", VA = "0x880D88")]
	private void SelectLanguage(int index)
	{
	}

	[Token(Token = "0x6001526")]
	public static List<T> FindObjectsOfTypeInLoadedScenes<T>()
	{
		return null;
	}

	[Token(Token = "0x6001527")]
	[Address(RVA = "0x880FC8", Offset = "0x880FC8", VA = "0x880FC8")]
	public void Show(bool isEnabled)
	{
	}

	[Token(Token = "0x6001528")]
	[Address(RVA = "0x880FE8", Offset = "0x880FE8", VA = "0x880FE8")]
	public LanguageSettings()
	{
	}
}
[Token(Token = "0x2000306")]
public class LifeDisplayer : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x400165E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform fullHeartsParent;

	[Token(Token = "0x400165F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform brokenHeartsParent;

	[Token(Token = "0x4001660")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float heartXSpacing;

	[Token(Token = "0x4001661")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private EndlessMode endlessMode;

	[Token(Token = "0x4001662")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private LifeCounter lifeCounter;

	[Token(Token = "0x4001663")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int livesLeftDisplayed;

	[Token(Token = "0x4001664")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int livesLeft;

	[Token(Token = "0x4001665")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Transform[] fullHearts;

	[Token(Token = "0x4001666")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform[] brokenHearts;

	[Token(Token = "0x600152C")]
	[Address(RVA = "0x88109C", Offset = "0x88109C", VA = "0x88109C")]
	private void Start()
	{
	}

	[Token(Token = "0x600152D")]
	[Address(RVA = "0x881458", Offset = "0x881458", VA = "0x881458")]
	private void UpdateHeartStatus(int livesLeft, int heartIndex)
	{
	}

	[Token(Token = "0x600152E")]
	[Address(RVA = "0x881520", Offset = "0x881520", VA = "0x881520")]
	private void OnEndlessModeActiveChanged(bool active)
	{
	}

	[Token(Token = "0x600152F")]
	[Address(RVA = "0x88157C", Offset = "0x88157C", VA = "0x88157C")]
	private void Update()
	{
	}

	[Token(Token = "0x6001530")]
	[Address(RVA = "0x881608", Offset = "0x881608", VA = "0x881608")]
	private void UpdateMaxLives(int newLifeCount)
	{
	}

	[Token(Token = "0x6001531")]
	[Address(RVA = "0x88178C", Offset = "0x88178C", VA = "0x88178C")]
	public LifeDisplayer()
	{
	}
}
[Token(Token = "0x2000307")]
public class MenuVisibility : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x2000308")]
	private enum MenuState
	{
		[Token(Token = "0x400166B")]
		Startup,
		[Token(Token = "0x400166C")]
		Invisible,
		[Token(Token = "0x400166D")]
		Animating,
		[Token(Token = "0x400166E")]
		FullyVisible
	}

	[Token(Token = "0x4001667")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject menuRoot;

	[Token(Token = "0x4001668")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private MenuState menuState;

	[Token(Token = "0x4001669")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool firstTimeSetup;

	[Token(Token = "0x6001534")]
	[Address(RVA = "0x8817B0", Offset = "0x8817B0", VA = "0x8817B0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001535")]
	[Address(RVA = "0x881844", Offset = "0x881844", VA = "0x881844")]
	public void SetActive(bool visible, bool animate)
	{
	}

	[Token(Token = "0x6001536")]
	[Address(RVA = "0x881998", Offset = "0x881998", VA = "0x881998")]
	private void ShowContent()
	{
	}

	[Token(Token = "0x6001537")]
	[Address(RVA = "0x8819C4", Offset = "0x8819C4", VA = "0x8819C4")]
	private void OnAnimationEventShowContent()
	{
	}

	[Token(Token = "0x6001538")]
	[Address(RVA = "0x8819C8", Offset = "0x8819C8", VA = "0x8819C8")]
	public MenuVisibility()
	{
	}
}
[Token(Token = "0x2000309")]
public class NameTagOffset : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x400166F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 offset;

	[Token(Token = "0x600153A")]
	[Address(RVA = "0x881A1C", Offset = "0x881A1C", VA = "0x881A1C")]
	public NameTagOffset()
	{
	}
}
[Token(Token = "0x200030A")]
public class NewEnvironmentUnlockedCelebration : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4001670")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject celebrationMessage;

	[Token(Token = "0x4001671")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float floatUpTime;

	[Token(Token = "0x4001672")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float displayTime;

	[Token(Token = "0x4001673")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float disappearTime;

	[Token(Token = "0x4001674")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 targetScale;

	[Token(Token = "0x4001675")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 targetPosition;

	[Token(Token = "0x600153B")]
	[Address(RVA = "0x881A24", Offset = "0x881A24", VA = "0x881A24")]
	private void Awake()
	{
	}

	[Token(Token = "0x600153C")]
	[Address(RVA = "0x881A80", Offset = "0x881A80", VA = "0x881A80")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600153D")]
	[Address(RVA = "0x881C40", Offset = "0x881C40", VA = "0x881C40")]
	public NewEnvironmentUnlockedCelebration()
	{
	}
}
[Token(Token = "0x200030B")]
public class Order : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x200030C")]
	private enum MarkedStatus
	{
		[Token(Token = "0x400169A")]
		NotMarked,
		[Token(Token = "0x400169B")]
		YellowMark,
		[Token(Token = "0x400169C")]
		GreenMark
	}

	[Token(Token = "0x4001676")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int customerSlot;

	[Token(Token = "0x4001677")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float obscureSpeed;

	[Token(Token = "0x4001678")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OrderIcon[] orderIcons;

	[Token(Token = "0x4001679")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject readyToDeliverMarker;

	[Token(Token = "0x400167A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject cannotHandInMarker;

	[Token(Token = "0x400167B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("Timer colors")]
	public Color greenTimeColor;

	[Token(Token = "0x400167C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Color yellowTimeColor;

	[Token(Token = "0x400167D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Color redTimeColor;

	[Token(Token = "0x400167F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Sprite obscuredIngredientIcon;

	[Token(Token = "0x4001680")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Renderer timerRenderer;

	[Token(Token = "0x4001681")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private Transform timerTransform;

	[Token(Token = "0x4001682")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private GameObject iconGrid;

	[Token(Token = "0x4001683")]
	public const int ingredientsDisplayedAtOnce = 5;

	[Token(Token = "0x4001684")]
	private const int notObscured = -1;

	[Token(Token = "0x4001685")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private List<OrderIcon> displayedIngredients;

	[Token(Token = "0x4001686")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private RecipeIngredient[] recipe;

	[Token(Token = "0x4001687")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private List<int> obscuredIngredients;

	[Token(Token = "0x4001688")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private CustomerType customerType;

	[Token(Token = "0x4001689")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private OrderMonitor orderMonitor;

	[Token(Token = "0x400168A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private TimeSlowdownHandler timeSlowdownHandler;

	[Token(Token = "0x400168B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private GameObject ingredientsParent;

	[Token(Token = "0x400168C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private float timerStartScale;

	[Token(Token = "0x400168D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private float orderStartXScale;

	[Token(Token = "0x400168E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Dictionary<int, MarkedStatus> markedOffIndices;

	[Token(Token = "0x400168F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private float startHeight;

	[Token(Token = "0x4001690")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private float scrollStep;

	[Token(Token = "0x4001691")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private int highestScrollIndex;

	[Token(Token = "0x4001692")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private bool firstTime;

	[Token(Token = "0x4001693")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private float timeIsRunningOutAlarmThreshold;

	[Token(Token = "0x4001694")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private bool timeIsRunningOutAlarm;

	[Token(Token = "0x4001695")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private MaterialPropertyBlock matPropBlock;

	[Token(Token = "0x4001696")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private bool isShowing;

	[Token(Token = "0x4001697")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF9")]
	private bool setupComplete;

	[Token(Token = "0x4001698")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private int colorPropertyID;

	[Token(Token = "0x170002A1")]
	public int BottomVisibleIngredientIndex
	{
		[Token(Token = "0x600153F")]
		[Address(RVA = "0x881D34", Offset = "0x881D34", VA = "0x881D34")]
		[CompilerGenerated]
		get
		{
			return default(int);
		}
		[Token(Token = "0x6001540")]
		[Address(RVA = "0x881D3C", Offset = "0x881D3C", VA = "0x881D3C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6001541")]
	[Address(RVA = "0x881D44", Offset = "0x881D44", VA = "0x881D44")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001542")]
	[Address(RVA = "0x881EB0", Offset = "0x881EB0", VA = "0x881EB0")]
	private void Start()
	{
	}

	[Token(Token = "0x6001543")]
	[Address(RVA = "0x882064", Offset = "0x882064", VA = "0x882064")]
	public void ShowOrder(RecipeIngredient[] ingredients, float animationDelay, CustomerData customerData)
	{
	}

	[Token(Token = "0x6001544")]
	[Address(RVA = "0x882034", Offset = "0x882034", VA = "0x882034")]
	public void Hide()
	{
	}

	[Token(Token = "0x6001545")]
	[Address(RVA = "0x882640", Offset = "0x882640", VA = "0x882640")]
	public void UpdateTimer(float timeFraction, float safeTimeFraction, bool timerSlowedDown)
	{
	}

	[Token(Token = "0x6001546")]
	[Address(RVA = "0x8828EC", Offset = "0x8828EC", VA = "0x8828EC")]
	public void UpdateObscuredIngredients()
	{
	}

	[Token(Token = "0x6001547")]
	[Address(RVA = "0x882AA4", Offset = "0x882AA4", VA = "0x882AA4")]
	public void MarkOffAddedIngredients(IList<IngredientType> addedIngredients, IList<bool> stackedCorrectly, IList<bool> friedCorrectly)
	{
	}

	[Token(Token = "0x6001548")]
	[Address(RVA = "0x88310C", Offset = "0x88310C", VA = "0x88310C")]
	private void UpdateScrolling()
	{
	}

	[Token(Token = "0x6001549")]
	[Address(RVA = "0x883060", Offset = "0x883060", VA = "0x883060")]
	private static void MarkIngredient(OrderIcon displayedIngredient, MarkedStatus markedStatus)
	{
	}

	[Token(Token = "0x600154A")]
	[Address(RVA = "0x883230", Offset = "0x883230", VA = "0x883230")]
	public void MarkAsReadyToDeliver(bool fullyAssembled, bool canBeHandedIn)
	{
	}

	[Token(Token = "0x600154B")]
	[Address(RVA = "0x882388", Offset = "0x882388", VA = "0x882388")]
	private void SetIngredientIcon(int index)
	{
	}

	[Token(Token = "0x600154C")]
	[Address(RVA = "0x8832A0", Offset = "0x8832A0", VA = "0x8832A0")]
	public void ObscureIngredient(int index, int jesterID)
	{
	}

	[Token(Token = "0x600154D")]
	[Address(RVA = "0x883308", Offset = "0x883308", VA = "0x883308")]
	public void RemoveObscuredIcons(int jesterID)
	{
	}

	[Token(Token = "0x600154E")]
	[Address(RVA = "0x8833D4", Offset = "0x8833D4", VA = "0x8833D4")]
	public bool CanBeFurtherObscured()
	{
		return default(bool);
	}

	[Token(Token = "0x600154F")]
	[Address(RVA = "0x8834C8", Offset = "0x8834C8", VA = "0x8834C8")]
	public int GetRandomUnassignedIngredient()
	{
		return default(int);
	}

	[Token(Token = "0x6001550")]
	[Address(RVA = "0x8836C4", Offset = "0x8836C4", VA = "0x8836C4")]
	public bool OrderIconIsObscured(int index)
	{
		return default(bool);
	}

	[Token(Token = "0x6001551")]
	[Address(RVA = "0x883728", Offset = "0x883728", VA = "0x883728")]
	public void SetOrderHidden(bool isHidden)
	{
	}

	[Token(Token = "0x6001552")]
	[Address(RVA = "0x88374C", Offset = "0x88374C", VA = "0x88374C")]
	public Order()
	{
	}
}
[Token(Token = "0x200030D")]
public class OrderIcon : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x400169D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SpriteRenderer icon;

	[Token(Token = "0x400169E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SpriteRenderer iconShadow;

	[Token(Token = "0x400169F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SpriteRenderer addedMarker;

	[Token(Token = "0x6001553")]
	[Address(RVA = "0x88385C", Offset = "0x88385C", VA = "0x88385C")]
	public OrderIcon()
	{
	}
}
[Token(Token = "0x200030E")]
public class OrderMonitor : SingleInstanceNetworkedBehavior<OrderMonitor>
{
	[Token(Token = "0x40016A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform[] customerModelSlots;

	[Token(Token = "0x40016A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Order[] orders;

	[Token(Token = "0x40016A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool isQuitting;

	[Token(Token = "0x40016A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Dictionary<int, CustomerVisual> customers;

	[Token(Token = "0x40016A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private CustomerRegistry customerRegistry;

	[Token(Token = "0x40016A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private CookingRound cookingRound;

	[Token(Token = "0x40016A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private CookingGameState gameState;

	[Token(Token = "0x40016AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private TimeSlowdownHandler timeSlowdownHandler;

	[Token(Token = "0x40016AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private OrderObscurer orderObscurer;

	[Token(Token = "0x40016AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private int[] customerTutorialPlacement;

	[Token(Token = "0x40016AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private int[][] customerStandardPlacements;

	[Token(Token = "0x40016AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private List<int> freeSlotCache;

	[Token(Token = "0x40016AF")]
	private const int unassignedSlot = -1;

	[Token(Token = "0x170002A2")]
	public int[] CustomerSlots
	{
		[Token(Token = "0x6001554")]
		[Address(RVA = "0x883864", Offset = "0x883864", VA = "0x883864")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001555")]
		[Address(RVA = "0x88386C", Offset = "0x88386C", VA = "0x88386C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170002A3")]
	public List<Plate> Plates
	{
		[Token(Token = "0x6001556")]
		[Address(RVA = "0x883874", Offset = "0x883874", VA = "0x883874")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001557")]
		[Address(RVA = "0x88387C", Offset = "0x88387C", VA = "0x88387C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170002A4")]
	public Dictionary<int, Order> OrdersByID
	{
		[Token(Token = "0x6001558")]
		[Address(RVA = "0x883884", Offset = "0x883884", VA = "0x883884")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001559")]
		[Address(RVA = "0x88388C", Offset = "0x88388C", VA = "0x88388C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x600155A")]
	[Address(RVA = "0x883894", Offset = "0x883894", VA = "0x883894", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x600155B")]
	[Address(RVA = "0x883A4C", Offset = "0x883A4C", VA = "0x883A4C")]
	private void Start()
	{
	}

	[Token(Token = "0x600155C")]
	[Address(RVA = "0x883D84", Offset = "0x883D84", VA = "0x883D84")]
	private void Update()
	{
	}

	[Token(Token = "0x600155D")]
	[Address(RVA = "0x883EE0", Offset = "0x883EE0", VA = "0x883EE0")]
	private void OnApplicationQuitting()
	{
	}

	[Token(Token = "0x600155E")]
	[Address(RVA = "0x883EEC", Offset = "0x883EEC", VA = "0x883EEC")]
	public void OnNewRoundStarted()
	{
	}

	[Token(Token = "0x600155F")]
	[Address(RVA = "0x883F40", Offset = "0x883F40", VA = "0x883F40")]
	public bool HasFreeSlot()
	{
		return default(bool);
	}

	[Token(Token = "0x6001560")]
	[Address(RVA = "0x884108", Offset = "0x884108", VA = "0x884108")]
	public int ReserveCustomerSlot(int orderID, CustomerType customerType)
	{
		return default(int);
	}

	[Token(Token = "0x6001561")]
	[Address(RVA = "0x884234", Offset = "0x884234", VA = "0x884234")]
	private int GetFreeCustomerSlot(int orderID)
	{
		return default(int);
	}

	[Token(Token = "0x6001562")]
	[Address(RVA = "0x884338", Offset = "0x884338", VA = "0x884338")]
	private List<int> GetFreeSlots()
	{
		return null;
	}

	[Token(Token = "0x6001563")]
	[Address(RVA = "0x8845EC", Offset = "0x8845EC", VA = "0x8845EC")]
	public void ReleaseCustomerSlot(int orderID)
	{
	}

	[Token(Token = "0x6001564")]
	[Address(RVA = "0x8847A8", Offset = "0x8847A8", VA = "0x8847A8")]
	public void UpdateOrder(Plate plate)
	{
	}

	[Token(Token = "0x6001565")]
	[Address(RVA = "0x8849B8", Offset = "0x8849B8", VA = "0x8849B8")]
	private void AddOrder(Plate plate, RecipeIngredient[] recipeIngredients, IList<IngredientType> addedIngredients, IList<bool> stackedCorrectly, bool readyToDeliver)
	{
	}

	[Token(Token = "0x6001566")]
	[Address(RVA = "0x8853B0", Offset = "0x8853B0", VA = "0x8853B0")]
	public bool HasOrderForPlate(Plate plate)
	{
		return default(bool);
	}

	[Token(Token = "0x6001567")]
	[Address(RVA = "0x88560C", Offset = "0x88560C", VA = "0x88560C")]
	public void RemoveOrder(Plate plate)
	{
	}

	[Token(Token = "0x6001568")]
	[Address(RVA = "0x88598C", Offset = "0x88598C", VA = "0x88598C")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6001569")]
	[Address(RVA = "0x885AB4", Offset = "0x885AB4", VA = "0x885AB4")]
	public void OnCustomerVisualSpawned(int orderID, int slotID, Transform modelTransform, Vector3 offset, CustomerVisual customerVisual)
	{
	}

	[Token(Token = "0x600156A")]
	[Address(RVA = "0x885CEC", Offset = "0x885CEC", VA = "0x885CEC")]
	public bool HasCustomerVisual(int orderID)
	{
		return default(bool);
	}

	[Token(Token = "0x600156B")]
	[Address(RVA = "0x885DBC", Offset = "0x885DBC", VA = "0x885DBC")]
	public CustomerVisual GetCustomerVisual(int orderID)
	{
		return null;
	}

	[Token(Token = "0x600156C")]
	[Address(RVA = "0x885E14", Offset = "0x885E14", VA = "0x885E14")]
	public void RemoveCustomer(int orderID)
	{
	}

	[Token(Token = "0x600156D")]
	[Address(RVA = "0x885EA4", Offset = "0x885EA4", VA = "0x885EA4")]
	public void OnTimeSlowdownStart()
	{
	}

	[Token(Token = "0x600156E")]
	[Address(RVA = "0x886058", Offset = "0x886058", VA = "0x886058")]
	public void OnTimeSlowdownEnd()
	{
	}

	[Token(Token = "0x600156F")]
	[Address(RVA = "0x8858E8", Offset = "0x8858E8", VA = "0x8858E8")]
	private void ResumeCustomerAnimation(Plate plate)
	{
	}

	[Token(Token = "0x6001570")]
	[Address(RVA = "0x8860E4", Offset = "0x8860E4", VA = "0x8860E4")]
	public void SetOrdersHidden(bool isHidden)
	{
	}

	[Token(Token = "0x6001571")]
	[Address(RVA = "0x8844B0", Offset = "0x8844B0", VA = "0x8844B0")]
	public string GetDebugCustomerSlotContent()
	{
		return null;
	}

	[Token(Token = "0x6001572")]
	[Address(RVA = "0x884EF0", Offset = "0x884EF0", VA = "0x884EF0")]
	private string GetDebugPlateAndOrderContent()
	{
		return null;
	}

	[Token(Token = "0x6001573")]
	[Address(RVA = "0x8861C0", Offset = "0x8861C0", VA = "0x8861C0")]
	public OrderMonitor()
	{
	}
}
[Token(Token = "0x200030F")]
public class OrderObscurer : SingleInstanceNetworkedBehavior<OrderObscurer>
{
	[Token(Token = "0x40016B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float obscureTime;

	[Token(Token = "0x40016B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float obscureTimer;

	[Token(Token = "0x40016B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<int> activeJesterOrderIDs;

	[Token(Token = "0x40016B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private OrderMonitor orderMonitor;

	[Token(Token = "0x40016B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private CookingRound cookingRound;

	[Token(Token = "0x40016B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private TimeSlowdownHandler slowdown;

	[Token(Token = "0x40016B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<int> orderIDs;

	[Token(Token = "0x40016B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<int> ingredientIndices;

	[Token(Token = "0x40016B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private List<int> jesterOrderIDs;

	[Token(Token = "0x170002A5")]
	public bool ObscurerActive
	{
		[Token(Token = "0x6001574")]
		[Address(RVA = "0x886504", Offset = "0x886504", VA = "0x886504")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001575")]
		[Address(RVA = "0x88650C", Offset = "0x88650C", VA = "0x88650C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6001576")]
	[Address(RVA = "0x886518", Offset = "0x886518", VA = "0x886518")]
	private void Start()
	{
	}

	[Token(Token = "0x6001577")]
	[Address(RVA = "0x886944", Offset = "0x886944", VA = "0x886944")]
	private void Update()
	{
	}

	[Token(Token = "0x6001578")]
	[Address(RVA = "0x886FC0", Offset = "0x886FC0", VA = "0x886FC0", Slot = "5")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x6001579")]
	[Address(RVA = "0x887094", Offset = "0x887094", VA = "0x887094")]
	private void OnRoundStart()
	{
	}

	[Token(Token = "0x600157A")]
	[Address(RVA = "0x886A30", Offset = "0x886A30", VA = "0x886A30")]
	private void ObscureRandomPlayerOrderIngredient()
	{
	}

	[Token(Token = "0x600157B")]
	[Address(RVA = "0x8870EC", Offset = "0x8870EC", VA = "0x8870EC")]
	[PunRPC]
	private void ObscureRandomPlayerOrderIngredientRPC(int[] targetOrderIDs, int[] ingredientIndices, int[] jesterOrderIDs)
	{
	}

	[Token(Token = "0x600157C")]
	[Address(RVA = "0x8872BC", Offset = "0x8872BC", VA = "0x8872BC")]
	public void RemoveJester(int jesterOrderID)
	{
	}

	[Token(Token = "0x600157D")]
	[Address(RVA = "0x886870", Offset = "0x886870", VA = "0x886870")]
	public void AddJester(int orderID)
	{
	}

	[Token(Token = "0x600157E")]
	[Address(RVA = "0x887418", Offset = "0x887418", VA = "0x887418")]
	public OrderObscurer()
	{
	}
}
[Token(Token = "0x2000310")]
public class PatchNotesPrompt : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40016BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private PokeButton closeButton;

	[Token(Token = "0x40016BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private PokeButton openButton;

	[Token(Token = "0x40016BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject prompt;

	[Token(Token = "0x40016BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject openButtonGO;

	[Token(Token = "0x600157F")]
	[Address(RVA = "0x887534", Offset = "0x887534", VA = "0x887534")]
	private void Start()
	{
	}

	[Token(Token = "0x6001580")]
	[Address(RVA = "0x887624", Offset = "0x887624", VA = "0x887624")]
	private void Hide()
	{
	}

	[Token(Token = "0x6001581")]
	[Address(RVA = "0x88765C", Offset = "0x88765C", VA = "0x88765C")]
	private void Show()
	{
	}

	[Token(Token = "0x6001582")]
	[Address(RVA = "0x887694", Offset = "0x887694", VA = "0x887694")]
	public PatchNotesPrompt()
	{
	}
}
[Token(Token = "0x2000311")]
public class PlayerHint : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40016BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TextMeshPro hintText;

	[Token(Token = "0x40016BF")]
	private const int hintCount = 10;

	[Token(Token = "0x40016C0")]
	private const string hintPrefix = "hint_";

	[Token(Token = "0x6001583")]
	[Address(RVA = "0x88769C", Offset = "0x88769C", VA = "0x88769C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001584")]
	[Address(RVA = "0x8876A0", Offset = "0x8876A0", VA = "0x8876A0")]
	private void Start()
	{
	}

	[Token(Token = "0x6001585")]
	[Address(RVA = "0x8876A4", Offset = "0x8876A4", VA = "0x8876A4")]
	public void ShowRandomHint()
	{
	}

	[Token(Token = "0x6001586")]
	[Address(RVA = "0x8877B0", Offset = "0x8877B0", VA = "0x8877B0")]
	public PlayerHint()
	{
	}
}
[Token(Token = "0x2000312")]
public class PlayersReadyUI : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40016C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private SpriteRenderer[] playerIcons;

	[Token(Token = "0x40016C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject[] votedMarkers;

	[Token(Token = "0x6001587")]
	[Address(RVA = "0x8877B8", Offset = "0x8877B8", VA = "0x8877B8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001588")]
	[Address(RVA = "0x8878E4", Offset = "0x8878E4", VA = "0x8878E4")]
	public void Update()
	{
	}

	[Token(Token = "0x6001589")]
	[Address(RVA = "0x8878E8", Offset = "0x8878E8", VA = "0x8878E8")]
	private void UpdateAreDoneIcons()
	{
	}

	[Token(Token = "0x600158A")]
	[Address(RVA = "0x887E70", Offset = "0x887E70", VA = "0x887E70")]
	public PlayersReadyUI()
	{
	}
}
[Token(Token = "0x2000314")]
public class PokeButton : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x2000315")]
	public enum Interaction
	{
		[Token(Token = "0x40016DB")]
		IndexFingerPoke,
		[Token(Token = "0x40016DC")]
		FullHand
	}

	[Token(Token = "0x2000316")]
	public enum ButtonDirection
	{
		[Token(Token = "0x40016DE")]
		Forward,
		[Token(Token = "0x40016DF")]
		Backward,
		[Token(Token = "0x40016E0")]
		Up,
		[Token(Token = "0x40016E1")]
		Down,
		[Token(Token = "0x40016E2")]
		Right,
		[Token(Token = "0x40016E3")]
		Left
	}

	[Token(Token = "0x2000317")]
	public enum PressEffect
	{
		[Token(Token = "0x40016E5")]
		None,
		[Token(Token = "0x40016E6")]
		Tween
	}

	[Token(Token = "0x2000318")]
	public enum ButtonPressSound
	{
		[Token(Token = "0x40016E8")]
		Standard,
		[Token(Token = "0x40016E9")]
		None
	}

	[Token(Token = "0x40016C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Action onClick;

	[Token(Token = "0x40016C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Action onRelease;

	[Token(Token = "0x40016C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ButtonDirection buttonFaceDirection;

	[Token(Token = "0x40016C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool active;

	[Token(Token = "0x40016C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool soundOnInactive;

	[Token(Token = "0x40016C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Func<bool> shouldIgnoreClicks;

	[Token(Token = "0x40016CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject buttonBody;

	[Token(Token = "0x40016CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float delayBetweenClicks;

	[Token(Token = "0x40016CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("Stop a button from being clickable for a short time to avoid accidental clicks when enabled")]
	public float OnEnableClickableDelay;

	[Token(Token = "0x40016CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Header("Interaction Type")]
	public Interaction interaction;

	[Token(Token = "0x40016CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[Header("Index Finger Poke Settings")]
	public bool requireMinAngleToPoke;

	[Token(Token = "0x40016CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float minAngleToPoke;

	[Token(Token = "0x40016D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool forcePointerPose;

	[Token(Token = "0x40016D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Tooltip("The minimum angle in degrees between the hand speed direction & the button facing direction to poke the button")]
	[Header("Hand Velocity Direction Settings")]
	public float minHandVelocityButtonAngle;

	[Token(Token = "0x40016D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[Header("Press Effect")]
	public PressEffect pressEffect;

	[Token(Token = "0x40016D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public ButtonPressSound pressSound;

	[Token(Token = "0x40016D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[Tooltip("Used only if press effect is set to Tween")]
	public float tweenOffset;

	[Token(Token = "0x40016D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool vibrates;

	[Token(Token = "0x40016D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float clickDelayTimer;

	[Token(Token = "0x40016D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector3 localStartPosition;

	[Token(Token = "0x40016D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private CookoutAvatarHand hand;

	[Token(Token = "0x40016D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool isBeingPoked;

	[Token(Token = "0x170002A6")]
	public Action OnClick
	{
		[Token(Token = "0x600158D")]
		[Address(RVA = "0x887E9C", Offset = "0x887E9C", VA = "0x887E9C")]
		set
		{
		}
	}

	[Token(Token = "0x170002A7")]
	public Action OnRelease
	{
		[Token(Token = "0x600158E")]
		[Address(RVA = "0x887EA4", Offset = "0x887EA4", VA = "0x887EA4")]
		set
		{
		}
	}

	[Token(Token = "0x600158F")]
	[Address(RVA = "0x887EAC", Offset = "0x887EAC", VA = "0x887EAC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001590")]
	[Address(RVA = "0x887EEC", Offset = "0x887EEC", VA = "0x887EEC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6001591")]
	[Address(RVA = "0x887F00", Offset = "0x887F00", VA = "0x887F00")]
	private void Update()
	{
	}

	[Token(Token = "0x6001592")]
	[Address(RVA = "0x888004", Offset = "0x888004", VA = "0x888004")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001593")]
	[Address(RVA = "0x888758", Offset = "0x888758", VA = "0x888758")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6001594")]
	[Address(RVA = "0x8885E0", Offset = "0x8885E0", VA = "0x8885E0")]
	private void ClickButton()
	{
	}

	[Token(Token = "0x6001595")]
	[Address(RVA = "0x888830", Offset = "0x888830", VA = "0x888830")]
	private void TweenButtonBody()
	{
	}

	[Token(Token = "0x6001596")]
	[Address(RVA = "0x888440", Offset = "0x888440", VA = "0x888440")]
	private Vector3 GetDirectionVector(ButtonDirection direction)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6001597")]
	[Address(RVA = "0x888918", Offset = "0x888918", VA = "0x888918")]
	public PokeButton()
	{
	}
}
[Token(Token = "0x2000319")]
public class PreRoundUI : SingleInstanceBehavior<PreRoundUI>
{
	[Token(Token = "0x200031A")]
	public enum MenuState
	{
		[Token(Token = "0x400171A")]
		Disabled,
		[Token(Token = "0x400171B")]
		Tutorial,
		[Token(Token = "0x400171C")]
		EndlessTutorial0,
		[Token(Token = "0x400171D")]
		EndlessTutorial1,
		[Token(Token = "0x400171E")]
		EndlessTutorial2,
		[Token(Token = "0x400171F")]
		EndlessRewardDisplay,
		[Token(Token = "0x4001720")]
		SlotSelect,
		[Token(Token = "0x4001721")]
		PotionSelect,
		[Token(Token = "0x4001722")]
		Vote,
		[Token(Token = "0x4001723")]
		Voted,
		[Token(Token = "0x4001724")]
		HiddenByInventory,
		[Token(Token = "0x4001725")]
		EndlessLeaderboard,
		[Token(Token = "0x4001726")]
		creativeTutorial
	}

	[Token(Token = "0x40016EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private MenuState stateBacking;

	[Token(Token = "0x40016EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Roots")]
	[SerializeField]
	private GameObject mainRoot;

	[Token(Token = "0x40016EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject tutorialRoot;

	[Token(Token = "0x40016ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject potionSelectSlotRoot;

	[Token(Token = "0x40016EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private GameObject potionSelectRoot;

	[Token(Token = "0x40016EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private GameObject voteRoot;

	[Token(Token = "0x40016F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GameObject preVoteRoot;

	[Token(Token = "0x40016F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GameObject postVoteRoot;

	[Token(Token = "0x40016F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private GameObject endlessRewardDisplayRoot;

	[Token(Token = "0x40016F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[Header("Buttons")]
	private GameObject nextStepButtonGO;

	[Token(Token = "0x40016F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private GameObject goBackButtonGO;

	[Token(Token = "0x40016F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Header("Other")]
	[SerializeField]
	private TextMeshPro pageDisplayerText;

	[Token(Token = "0x40016F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private GameObject coinPouch;

	[Token(Token = "0x40016F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private Texture inactiveTexture;

	[Token(Token = "0x40016F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private Texture activeTexture;

	[Token(Token = "0x40016F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private Animator animator;

	[Token(Token = "0x40016FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private TextMeshPro header;

	[Token(Token = "0x40016FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private Material inactiveMaterial;

	[Token(Token = "0x40016FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private Material activeMaterial;

	[Token(Token = "0x40016FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private int currentStateIndex;

	[Token(Token = "0x40016FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private List<MenuState> stateFlow;

	[Token(Token = "0x40016FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private TutorialDisplay tutorial;

	[Token(Token = "0x4001700")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private EndlessRewardDisplay endlessRewardDisplay;

	[Token(Token = "0x4001701")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private CookingCup cookingCup;

	[Token(Token = "0x4001702")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private CookingRound cookingRound;

	[Token(Token = "0x4001703")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private PlayerHint hint;

	[Token(Token = "0x4001704")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private SaveManager saveManager;

	[Token(Token = "0x4001705")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private ConsumableMenu consumableMenu;

	[Token(Token = "0x4001706")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private MapVoteCounter voteCounter;

	[Token(Token = "0x4001707")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private PokeButton nextStepButton;

	[Token(Token = "0x4001708")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private PokeButton goBackButton;

	[Token(Token = "0x4001709")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private bool unlockedConsumables;

	[Token(Token = "0x400170A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	private MenuState stateBeforeHiding;

	[Token(Token = "0x400170B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private bool hasSeenEndlessTutorial;

	[Token(Token = "0x400170C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private Collider[] colliders;

	[Token(Token = "0x400170D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private Renderer nextStepRenderer;

	[Token(Token = "0x400170E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private Renderer goBackButtonRenderer;

	[Token(Token = "0x400170F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private Transform nextStepButtonTransform;

	[Token(Token = "0x4001710")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private LeaderboardEndlessMode LeaderboardEndlessMode;

	[Token(Token = "0x4001711")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private Vector3 nextStepStartScale;

	[Token(Token = "0x4001712")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	private float nextStepPulseSpeed;

	[Token(Token = "0x4001713")]
	private const string localizationHeaderTutorial = "preround_header_tutorial";

	[Token(Token = "0x4001714")]
	private const string localizationHeaderEndlessReward = "endless_rewardsheader";

	[Token(Token = "0x4001715")]
	private const string localizationHeaderPotionSelection = "preround_header_potionselection";

	[Token(Token = "0x4001716")]
	private const string localizationHeaderSelectPotion = "preround_header_selectpotion";

	[Token(Token = "0x4001717")]
	private const string localizationHeaderConfirm = "preround_header_confirm";

	[Token(Token = "0x4001718")]
	private const string localizationHeaderReady = "preround_header_ready";

	[Token(Token = "0x170002A8")]
	public MenuState State
	{
		[Token(Token = "0x6001598")]
		[Address(RVA = "0x88895C", Offset = "0x88895C", VA = "0x88895C")]
		get
		{
			return default(MenuState);
		}
		[Token(Token = "0x6001599")]
		[Address(RVA = "0x888964", Offset = "0x888964", VA = "0x888964")]
		private set
		{
		}
	}

	[Token(Token = "0x170002A9")]
	public bool IsActive
	{
		[Token(Token = "0x600159A")]
		[Address(RVA = "0x888DF8", Offset = "0x888DF8", VA = "0x888DF8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600159B")]
	[Address(RVA = "0x888E08", Offset = "0x888E08", VA = "0x888E08", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x600159C")]
	[Address(RVA = "0x889048", Offset = "0x889048", VA = "0x889048")]
	private void Start()
	{
	}

	[Token(Token = "0x600159D")]
	[Address(RVA = "0x889580", Offset = "0x889580", VA = "0x889580")]
	private void Update()
	{
	}

	[Token(Token = "0x600159E")]
	[Address(RVA = "0x88896C", Offset = "0x88896C", VA = "0x88896C")]
	private void OnStateChange()
	{
	}

	[Token(Token = "0x600159F")]
	[Address(RVA = "0x889630", Offset = "0x889630", VA = "0x889630")]
	public void GoToNextStep()
	{
	}

	[Token(Token = "0x60015A0")]
	[Address(RVA = "0x889988", Offset = "0x889988", VA = "0x889988")]
	public void GoToPreviousStep()
	{
	}

	[Token(Token = "0x60015A1")]
	[Address(RVA = "0x8898C0", Offset = "0x8898C0", VA = "0x8898C0")]
	private void RefreshChangeStateButtons()
	{
	}

	[Token(Token = "0x60015A2")]
	[Address(RVA = "0x889B28", Offset = "0x889B28", VA = "0x889B28")]
	public void OnVoted()
	{
	}

	[Token(Token = "0x60015A3")]
	[Address(RVA = "0x889C0C", Offset = "0x889C0C", VA = "0x889C0C")]
	public void Show(bool shouldShow, bool wasHiddenByInventory, bool isHiddenByInventory, bool instantlyToVoting)
	{
	}

	[Token(Token = "0x60015A4")]
	[Address(RVA = "0x8897E4", Offset = "0x8897E4", VA = "0x8897E4")]
	private void UpdatePageCount(int activePageIndex)
	{
	}

	[Token(Token = "0x60015A5")]
	[Address(RVA = "0x88A1CC", Offset = "0x88A1CC", VA = "0x88A1CC")]
	public void OnSlotSelected()
	{
	}

	[Token(Token = "0x60015A6")]
	[Address(RVA = "0x88A1D8", Offset = "0x88A1D8", VA = "0x88A1D8")]
	public void OnFinishPotionSelection()
	{
	}

	[Token(Token = "0x60015A7")]
	[Address(RVA = "0x88A1E4", Offset = "0x88A1E4", VA = "0x88A1E4")]
	public void UpdateGhostMenuLoadout(int slot, int potionType)
	{
	}

	[Token(Token = "0x60015A8")]
	[Address(RVA = "0x88A2CC", Offset = "0x88A2CC", VA = "0x88A2CC")]
	public bool CanBeHiddenByInventory()
	{
		return default(bool);
	}

	[Token(Token = "0x60015A9")]
	[Address(RVA = "0x88A31C", Offset = "0x88A31C", VA = "0x88A31C")]
	public PreRoundUI()
	{
	}
}
[Token(Token = "0x200031B")]
public sealed class RoomListItem : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4001727")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PokeButton button;

	[Token(Token = "0x4001728")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public SpriteRenderer environment;

	[Token(Token = "0x4001729")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SpriteRenderer playerCount;

	[Token(Token = "0x400172A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public TMP_Text owner;

	[Token(Token = "0x400172B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public TMP_Text intent;

	[Token(Token = "0x400172C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public TMP_Text townName;

	[Token(Token = "0x60015AA")]
	[Address(RVA = "0x88A3E4", Offset = "0x88A3E4", VA = "0x88A3E4")]
	public RoomListItem()
	{
	}
}
[Token(Token = "0x200031C")]
public class RoundCountdown : SingleInstanceBehavior<RoundCountdown>
{
	[Token(Token = "0x200031D")]
	[CompilerGenerated]
	private sealed class <DoRoundCountDown>d__10 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RoundCountdown <>4__this;

		[Token(Token = "0x4001737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float countdownLength;

		[Token(Token = "0x4001738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CookingRound <cookingRound>5__2;

		[Token(Token = "0x170002AA")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60015B5")]
			[Address(RVA = "0x88ABB0", Offset = "0x88ABB0", VA = "0x88ABB0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002AB")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60015B7")]
			[Address(RVA = "0x88ABF8", Offset = "0x88ABF8", VA = "0x88ABF8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60015B2")]
		[Address(RVA = "0x88A720", Offset = "0x88A720", VA = "0x88A720")]
		[DebuggerHidden]
		public <DoRoundCountDown>d__10(int <>1__state)
		{
		}

		[Token(Token = "0x60015B3")]
		[Address(RVA = "0x88A844", Offset = "0x88A844", VA = "0x88A844", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60015B4")]
		[Address(RVA = "0x88A848", Offset = "0x88A848", VA = "0x88A848", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60015B6")]
		[Address(RVA = "0x88ABB8", Offset = "0x88ABB8", VA = "0x88ABB8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200031E")]
	[CompilerGenerated]
	private sealed class <DoPauseCountdown>d__11 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001739")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400173A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400173B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RoundCountdown <>4__this;

		[Token(Token = "0x400173C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float countdownLength;

		[Token(Token = "0x170002AC")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60015BB")]
			[Address(RVA = "0x88AE70", Offset = "0x88AE70", VA = "0x88AE70", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002AD")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60015BD")]
			[Address(RVA = "0x88AEB8", Offset = "0x88AEB8", VA = "0x88AEB8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60015B8")]
		[Address(RVA = "0x88A748", Offset = "0x88A748", VA = "0x88A748")]
		[DebuggerHidden]
		public <DoPauseCountdown>d__11(int <>1__state)
		{
		}

		[Token(Token = "0x60015B9")]
		[Address(RVA = "0x88AC00", Offset = "0x88AC00", VA = "0x88AC00", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60015BA")]
		[Address(RVA = "0x88AC04", Offset = "0x88AC04", VA = "0x88AC04", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60015BC")]
		[Address(RVA = "0x88AE78", Offset = "0x88AE78", VA = "0x88AE78", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400172D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private TextMeshPro roundCountDownText;

	[Token(Token = "0x400172E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMeshPro roundCountDownLabel;

	[Token(Token = "0x400172F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Animator anim;

	[Token(Token = "0x4001730")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject endlessPauseCup;

	[Token(Token = "0x4001731")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool finalCountdownSoundPlaying;

	[Token(Token = "0x4001732")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int latestWholeSecondsLeft;

	[Token(Token = "0x4001733")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private WaitForSeconds countdownStartDelay;

	[Token(Token = "0x60015AB")]
	[Address(RVA = "0x88A3EC", Offset = "0x88A3EC", VA = "0x88A3EC", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x60015AC")]
	[Address(RVA = "0x88A454", Offset = "0x88A454", VA = "0x88A454")]
	public void ShowCountdown(float countdownLength, bool isEndlessModePause = false)
	{
	}

	[Token(Token = "0x60015AD")]
	[Address(RVA = "0x88A624", Offset = "0x88A624", VA = "0x88A624")]
	public void Hide()
	{
	}

	[Token(Token = "0x60015AE")]
	[Address(RVA = "0x88A534", Offset = "0x88A534", VA = "0x88A534")]
	[IteratorStateMachine(typeof(<DoRoundCountDown>d__10))]
	private IEnumerator DoRoundCountDown(float countdownLength)
	{
		return null;
	}

	[Token(Token = "0x60015AF")]
	[Address(RVA = "0x88A5AC", Offset = "0x88A5AC", VA = "0x88A5AC")]
	[IteratorStateMachine(typeof(<DoPauseCountdown>d__11))]
	private IEnumerator DoPauseCountdown(float countdownLength)
	{
		return null;
	}

	[Token(Token = "0x60015B0")]
	[Address(RVA = "0x88A770", Offset = "0x88A770", VA = "0x88A770")]
	public RoundCountdown()
	{
	}
}
[Token(Token = "0x200031F")]
public class RoundResultDisplayer : SingleInstanceNetworkedBehavior<RoundResultDisplayer>, IPunObservable
{
	[Token(Token = "0x2000320")]
	public enum State
	{
		[Token(Token = "0x400177A")]
		Hidden,
		[Token(Token = "0x400177B")]
		ShowWin,
		[Token(Token = "0x400177C")]
		ShowFail,
		[Token(Token = "0x400177D")]
		ShowRoyalFail,
		[Token(Token = "0x400177E")]
		ShowAborted
	}

	[Token(Token = "0x2000322")]
	[CompilerGenerated]
	private sealed class <Show>d__66 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4001781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4001782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4001783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RoundResultDisplayer <>4__this;

		[Token(Token = "0x4001784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private StarGoal[] <starGoals>5__2;

		[Token(Token = "0x4001785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 <targetPosition>5__3;

		[Token(Token = "0x4001786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int <i>5__4;

		[Token(Token = "0x170002AE")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60015D5")]
			[Address(RVA = "0x88EC28", Offset = "0x88EC28", VA = "0x88EC28", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002AF")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60015D7")]
			[Address(RVA = "0x88EC70", Offset = "0x88EC70", VA = "0x88EC70", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60015D2")]
		[Address(RVA = "0x88D968", Offset = "0x88D968", VA = "0x88D968")]
		[DebuggerHidden]
		public <Show>d__66(int <>1__state)
		{
		}

		[Token(Token = "0x60015D3")]
		[Address(RVA = "0x88D990", Offset = "0x88D990", VA = "0x88D990", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60015D4")]
		[Address(RVA = "0x88D994", Offset = "0x88D994", VA = "0x88D994", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60015D6")]
		[Address(RVA = "0x88EC30", Offset = "0x88EC30", VA = "0x88EC30", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000324")]
	[CompilerGenerated]
	private sealed class <ShowRoyalFail>d__74 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400178A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400178B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400178C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RoundResultDisplayer <>4__this;

		[Token(Token = "0x170002B0")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60015DE")]
			[Address(RVA = "0x88F0FC", Offset = "0x88F0FC", VA = "0x88F0FC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B1")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60015E0")]
			[Address(RVA = "0x88F144", Offset = "0x88F144", VA = "0x88F144", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60015DB")]
		[Address(RVA = "0x88EE0C", Offset = "0x88EE0C", VA = "0x88EE0C")]
		[DebuggerHidden]
		public <ShowRoyalFail>d__74(int <>1__state)
		{
		}

		[Token(Token = "0x60015DC")]
		[Address(RVA = "0x88EE34", Offset = "0x88EE34", VA = "0x88EE34", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60015DD")]
		[Address(RVA = "0x88EE38", Offset = "0x88EE38", VA = "0x88EE38", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60015DF")]
		[Address(RVA = "0x88F104", Offset = "0x88F104", VA = "0x88F104", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000325")]
	[CompilerGenerated]
	private sealed class <ShowAborted>d__75 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400178D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400178E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400178F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RoundResultDisplayer <>4__this;

		[Token(Token = "0x170002B2")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60015E4")]
			[Address(RVA = "0x88F43C", Offset = "0x88F43C", VA = "0x88F43C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B3")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60015E6")]
			[Address(RVA = "0x88F484", Offset = "0x88F484", VA = "0x88F484", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60015E1")]
		[Address(RVA = "0x88F14C", Offset = "0x88F14C", VA = "0x88F14C")]
		[DebuggerHidden]
		public <ShowAborted>d__75(int <>1__state)
		{
		}

		[Token(Token = "0x60015E2")]
		[Address(RVA = "0x88F174", Offset = "0x88F174", VA = "0x88F174", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60015E3")]
		[Address(RVA = "0x88F178", Offset = "0x88F178", VA = "0x88F178", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60015E5")]
		[Address(RVA = "0x88F444", Offset = "0x88F444", VA = "0x88F444", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400173D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Color clearedTextColor;

	[Token(Token = "0x400173E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Color failedTextColor;

	[Token(Token = "0x400173F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Sprite clearGoalMarker;

	[Token(Token = "0x4001740")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Sprite failedGoalMarker;

	[Token(Token = "0x4001741")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private GameObject[] starMeshes;

	[Token(Token = "0x4001742")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private GameObject[] brokenStarMeshes;

	[Token(Token = "0x4001743")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private ParticleSystem[] starBurstSystems;

	[Token(Token = "0x4001744")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private GameObject gameOverDisplay;

	[Token(Token = "0x4001745")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private GameObject royalFailDisplay;

	[Token(Token = "0x4001746")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private GameObject abortedDisplay;

	[Token(Token = "0x4001747")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private SpriteRenderer goalStateIcon;

	[Token(Token = "0x4001748")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private TextMeshPro goalDescriptionText;

	[Token(Token = "0x4001749")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private ParticleSystem starGoalClearParticles;

	[Token(Token = "0x400174A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private ParticleSystem starGoalFailParticles;

	[Token(Token = "0x400174B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[Header("Star Holder Drop Settings")]
	[SerializeField]
	private float starHolderDropLength;

	[Token(Token = "0x400174C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	[Header("Timing Settings")]
	[SerializeField]
	private float startDelayTime;

	[Token(Token = "0x400174D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private float beforeDropDelayTime;

	[Token(Token = "0x400174E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	[SerializeField]
	private float dropDurationTime;

	[Token(Token = "0x400174F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private float dropLandPaddingTime;

	[Token(Token = "0x4001750")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	[SerializeField]
	private float nextGoalDelayTime;

	[Token(Token = "0x4001751")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private float beforeFlyingStarDelayTime;

	[Token(Token = "0x4001752")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	[SerializeField]
	private float flyingStarPacingTime;

	[Token(Token = "0x4001753")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private float finalDelayBeforeVoteTime;

	[Token(Token = "0x4001754")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	[SerializeField]
	private float trophyBarDisappearTime;

	[Token(Token = "0x4001755")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	private float royalFailDelayTime;

	[Token(Token = "0x4001756")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	[SerializeField]
	private float abortedDelayTime;

	[Token(Token = "0x4001757")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public State state;

	[Token(Token = "0x4001758")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private int cupID;

	[Token(Token = "0x4001759")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private int levelIndexInCup;

	[Token(Token = "0x400175A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private int[] cupStars;

	[Token(Token = "0x400175B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private bool cupFinished;

	[Token(Token = "0x400175C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private int starsEarnedThisRound;

	[Token(Token = "0x400175D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private bool[] goalsCleared;

	[Token(Token = "0x400175E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private CookingRound cookingRound;

	[Token(Token = "0x400175F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private Map map;

	[Token(Token = "0x4001760")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private StarGoalsWindowUI starGoalsWindowUI;

	[Token(Token = "0x4001761")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private Transform starGoalClearParticlesTransform;

	[Token(Token = "0x4001762")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private Transform starGoalFailParticlesTransform;

	[Token(Token = "0x4001763")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private TrophyStarBar trophyStarBar;

	[Token(Token = "0x4001764")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private TrailRenderer[] starTrails;

	[Token(Token = "0x4001765")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private FaceLocalPlayer[] starsFaceLocalPlayer;

	[Token(Token = "0x4001766")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private Renderer[] starRenderers;

	[Token(Token = "0x4001767")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private Vector3 starDefaultScale;

	[Token(Token = "0x4001768")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
	private Color defaultDescriptionColor;

	[Token(Token = "0x4001769")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private GameObject visualParent;

	[Token(Token = "0x400176A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private Coroutine displayRoutine;

	[Token(Token = "0x400176B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private bool isBeingHidden;

	[Token(Token = "0x400176C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x171")]
	private bool setupComplete;

	[Token(Token = "0x400176D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private WaitForSeconds startDelay;

	[Token(Token = "0x400176E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private WaitForSeconds beforeDropDelay;

	[Token(Token = "0x400176F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private WaitForSeconds dropDuration;

	[Token(Token = "0x4001770")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private WaitForSeconds nextGoalDelay;

	[Token(Token = "0x4001771")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private WaitForSeconds beforeFlyingStarDelay;

	[Token(Token = "0x4001772")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private WaitForSeconds flyingStarPacing;

	[Token(Token = "0x4001773")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private WaitForSeconds finalDelayBeforeVote;

	[Token(Token = "0x4001774")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private WaitForSeconds trophyBarDisappearDuration;

	[Token(Token = "0x4001775")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	private WaitForSeconds royalFailDelay;

	[Token(Token = "0x4001776")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	private WaitForSeconds abortedDelay;

	[Token(Token = "0x4001777")]
	private const int goalCount = 3;

	[Token(Token = "0x4001778")]
	private const float trailWidth = 0.22f;

	[Token(Token = "0x60015BE")]
	[Address(RVA = "0x88AEC0", Offset = "0x88AEC0", VA = "0x88AEC0", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x60015BF")]
	[Address(RVA = "0x88B338", Offset = "0x88B338", VA = "0x88B338")]
	private void Start()
	{
	}

	[Token(Token = "0x60015C0")]
	[Address(RVA = "0x88B37C", Offset = "0x88B37C", VA = "0x88B37C")]
	private void Setup()
	{
	}

	[Token(Token = "0x60015C1")]
	[Address(RVA = "0x88B6E8", Offset = "0x88B6E8", VA = "0x88B6E8")]
	public void ShowResults(int cupID, int levelIndexInCup, bool failedCup, bool royalFail, bool cupFinished, bool[] goalsCleared, int[] cupStars, bool aborted)
	{
	}

	[Token(Token = "0x60015C2")]
	[Address(RVA = "0x88B72C", Offset = "0x88B72C", VA = "0x88B72C")]
	private void DisplayResultsLocally()
	{
	}

	[Token(Token = "0x60015C3")]
	[Address(RVA = "0x88BC7C", Offset = "0x88BC7C", VA = "0x88BC7C")]
	[IteratorStateMachine(typeof(<Show>d__66))]
	private IEnumerator Show()
	{
		return null;
	}

	[Token(Token = "0x60015C4")]
	[Address(RVA = "0x88BCE4", Offset = "0x88BCE4", VA = "0x88BCE4")]
	private void ScaleTrailWidth(float newWidth)
	{
	}

	[Token(Token = "0x60015C5")]
	[Address(RVA = "0x88BD94", Offset = "0x88BD94", VA = "0x88BD94")]
	private void OnCountdownStarted()
	{
	}

	[Token(Token = "0x60015C6")]
	[Address(RVA = "0x88BFAC", Offset = "0x88BFAC", VA = "0x88BFAC")]
	private void OnConfirmModeStart()
	{
	}

	[Token(Token = "0x60015C7")]
	[Address(RVA = "0x88BFBC", Offset = "0x88BFBC", VA = "0x88BFBC")]
	public void Hide()
	{
	}

	[Token(Token = "0x60015C8")]
	[Address(RVA = "0x88C084", Offset = "0x88C084", VA = "0x88C084")]
	[PunRPC]
	private void HideResultsRPC()
	{
	}

	[Token(Token = "0x60015C9")]
	[Address(RVA = "0x88BDA4", Offset = "0x88BDA4", VA = "0x88BDA4")]
	public void HideLocally(float disappearTime, float destroyDelay)
	{
	}

	[Token(Token = "0x60015CA")]
	[Address(RVA = "0x88C094", Offset = "0x88C094", VA = "0x88C094")]
	private void OnStarReachedBar(GameObject star, int levelIndex)
	{
	}

	[Token(Token = "0x60015CB")]
	[Address(RVA = "0x88BC14", Offset = "0x88BC14", VA = "0x88BC14")]
	[IteratorStateMachine(typeof(<ShowRoyalFail>d__74))]
	private IEnumerator ShowRoyalFail()
	{
		return null;
	}

	[Token(Token = "0x60015CC")]
	[Address(RVA = "0x88BBAC", Offset = "0x88BBAC", VA = "0x88BBAC")]
	[IteratorStateMachine(typeof(<ShowAborted>d__75))]
	private IEnumerator ShowAborted()
	{
		return null;
	}

	[Token(Token = "0x60015CD")]
	[Address(RVA = "0x88C280", Offset = "0x88C280", VA = "0x88C280", Slot = "5")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x60015CE")]
	[Address(RVA = "0x88C408", Offset = "0x88C408", VA = "0x88C408", Slot = "6")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60015CF")]
	[Address(RVA = "0x88C83C", Offset = "0x88C83C", VA = "0x88C83C")]
	public RoundResultDisplayer()
	{
	}
}
[Token(Token = "0x2000326")]
public class SpinTransform : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4001790")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Vector3 axis;

	[Token(Token = "0x4001791")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float speed;

	[Token(Token = "0x60015E7")]
	[Address(RVA = "0x88F48C", Offset = "0x88F48C", VA = "0x88F48C")]
	private void Update()
	{
	}

	[Token(Token = "0x60015E8")]
	[Address(RVA = "0x88F4E8", Offset = "0x88F4E8", VA = "0x88F4E8")]
	public SpinTransform()
	{
	}
}
[Token(Token = "0x2000327")]
public class StoryDisplay : SingleInstanceBehavior<StoryDisplay>
{
	[Token(Token = "0x4001793")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject root;

	[Token(Token = "0x4001794")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float narrationPadding;

	[Token(Token = "0x4001795")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Sprite endlessStoryPicture;

	[Token(Token = "0x4001796")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Sprite creativeStoryPicture;

	[Token(Token = "0x4001797")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[Header("Final Level")]
	private Sprite outro1Star;

	[Token(Token = "0x4001798")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Sprite outro2Star;

	[Token(Token = "0x4001799")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Sprite outro3Star;

	[Token(Token = "0x400179A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private PlaySoundResult currentVoiceClip;

	[Token(Token = "0x400179B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private TextMeshPro text;

	[Token(Token = "0x400179C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private SpriteRenderer storyPicture;

	[Token(Token = "0x400179D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private TableCenterUI TableCenterUI;

	[Token(Token = "0x400179E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private CookingRound cookingRound;

	[Token(Token = "0x400179F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float storyTimer;

	[Token(Token = "0x40017A0")]
	private const string localizationStoryIntro = "story_intro";

	[Token(Token = "0x40017A1")]
	private const string localizationStoryEndless = "story_Endless";

	[Token(Token = "0x40017A2")]
	private const string localizationCreativeStory = "creative_mode_story";

	[Token(Token = "0x170002B4")]
	public float voiceOverLength
	{
		[Token(Token = "0x60015E9")]
		[Address(RVA = "0x88F4F0", Offset = "0x88F4F0", VA = "0x88F4F0")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60015EA")]
		[Address(RVA = "0x88F4F8", Offset = "0x88F4F8", VA = "0x88F4F8")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60015EB")]
	[Address(RVA = "0x88F500", Offset = "0x88F500", VA = "0x88F500", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x60015EC")]
	[Address(RVA = "0x88F610", Offset = "0x88F610", VA = "0x88F610")]
	private void Start()
	{
	}

	[Token(Token = "0x60015ED")]
	[Address(RVA = "0x88F734", Offset = "0x88F734", VA = "0x88F734")]
	private void Update()
	{
	}

	[Token(Token = "0x60015EE")]
	[Address(RVA = "0x88F78C", Offset = "0x88F78C", VA = "0x88F78C")]
	public void Show(int cupID)
	{
	}

	[Token(Token = "0x60015EF")]
	[Address(RVA = "0x88F998", Offset = "0x88F998", VA = "0x88F998")]
	public void ShowTutorialStory()
	{
	}

	[Token(Token = "0x60015F0")]
	[Address(RVA = "0x88FBA8", Offset = "0x88FBA8", VA = "0x88FBA8")]
	public void ShowEndlessStory()
	{
	}

	[Token(Token = "0x60015F1")]
	[Address(RVA = "0x88FD14", Offset = "0x88FD14", VA = "0x88FD14")]
	public void ShowCreativeStory()
	{
	}

	[Token(Token = "0x60015F2")]
	[Address(RVA = "0x88FE80", Offset = "0x88FE80", VA = "0x88FE80")]
	private void OnTutorialStoryFinished()
	{
	}

	[Token(Token = "0x60015F3")]
	[Address(RVA = "0x890098", Offset = "0x890098", VA = "0x890098")]
	public void ShowFinalLevelOutro(TableCenterUI.State outroState)
	{
	}

	[Token(Token = "0x60015F4")]
	[Address(RVA = "0x88F964", Offset = "0x88F964", VA = "0x88F964")]
	public void StopCurrentVoiceClip()
	{
	}

	[Token(Token = "0x60015F5")]
	[Address(RVA = "0x8901F0", Offset = "0x8901F0", VA = "0x8901F0", Slot = "5")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x60015F6")]
	[Address(RVA = "0x8902F0", Offset = "0x8902F0", VA = "0x8902F0")]
	public StoryDisplay()
	{
	}
}
[Token(Token = "0x2000328")]
public class ThanksForPlaying : SingleInstanceBehavior<ThanksForPlaying>
{
	[Token(Token = "0x40017A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject root;

	[Token(Token = "0x40017A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMeshPro starsCollectedText;

	[Token(Token = "0x40017A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TextMeshPro inventoryUnlocksText;

	[Token(Token = "0x40017A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private TextMeshPro endlessRecordText;

	[Token(Token = "0x40017A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Animator animator;

	[Token(Token = "0x40017A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private PokeButton closeButton;

	[Token(Token = "0x40017A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int totalStars;

	[Token(Token = "0x40017AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int totalInventoryUnlocks;

	[Token(Token = "0x40017AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private CookingCup cookingCup;

	[Token(Token = "0x40017AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private SaveManager saveManager;

	[Token(Token = "0x40017AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private ItemRewardsRegistry itemRewardsRegistry;

	[Token(Token = "0x40017AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool isShowing;

	[Token(Token = "0x40017AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Collider[] colliders;

	[Token(Token = "0x40017B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool setupComplete;

	[Token(Token = "0x60015FC")]
	[Address(RVA = "0x8905F4", Offset = "0x8905F4", VA = "0x8905F4", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x60015FD")]
	[Address(RVA = "0x890690", Offset = "0x890690", VA = "0x890690")]
	private void Start()
	{
	}

	[Token(Token = "0x60015FE")]
	[Address(RVA = "0x8909C0", Offset = "0x8909C0", VA = "0x8909C0")]
	public void Show(bool shouldShow, bool skipExitAnimation)
	{
	}

	[Token(Token = "0x60015FF")]
	[Address(RVA = "0x890B94", Offset = "0x890B94", VA = "0x890B94")]
	public void RefreshStats()
	{
	}

	[Token(Token = "0x6001600")]
	[Address(RVA = "0x891088", Offset = "0x891088", VA = "0x891088")]
	public ThanksForPlaying()
	{
	}
}
[Token(Token = "0x2000329")]
public class ThievingHandler : SingleInstanceNetworkedBehavior<ThievingHandler>
{
	[Token(Token = "0x40017B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float stealCooldown;

	[Token(Token = "0x40017B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float stealTimer;

	[Token(Token = "0x40017B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<int> activeThieves;

	[Token(Token = "0x40017B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private OrderMonitor orderMonitor;

	[Token(Token = "0x40017B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private CookingRound cookingRound;

	[Token(Token = "0x40017B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private TimeSlowdownHandler slowdown;

	[Token(Token = "0x40017B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private CustomerRegistry customerRegistry;

	[Token(Token = "0x40017B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private List<int> platesWithStealables;

	[Token(Token = "0x6001601")]
	[Address(RVA = "0x8910F4", Offset = "0x8910F4", VA = "0x8910F4")]
	private void Start()
	{
	}

	[Token(Token = "0x6001602")]
	[Address(RVA = "0x8915EC", Offset = "0x8915EC", VA = "0x8915EC")]
	private void Update()
	{
	}

	[Token(Token = "0x6001603")]
	[Address(RVA = "0x891B20", Offset = "0x891B20", VA = "0x891B20", Slot = "5")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x6001604")]
	[Address(RVA = "0x891BF4", Offset = "0x891BF4", VA = "0x891BF4")]
	private void OnRoundStart()
	{
	}

	[Token(Token = "0x6001605")]
	[Address(RVA = "0x891C4C", Offset = "0x891C4C", VA = "0x891C4C")]
	public void RemoveThief(int thiefID)
	{
	}

	[Token(Token = "0x6001606")]
	[Address(RVA = "0x891520", Offset = "0x891520", VA = "0x891520")]
	public void AddThief(int id)
	{
	}

	[Token(Token = "0x6001607")]
	[Address(RVA = "0x8916D8", Offset = "0x8916D8", VA = "0x8916D8")]
	private void StealIngredients()
	{
	}

	[Token(Token = "0x6001608")]
	[Address(RVA = "0x891CA4", Offset = "0x891CA4", VA = "0x891CA4")]
	[PunRPC]
	private void StealIngredientRPC(int victimPlateViewID, int thiefPlateViewID, int thiefOrder)
	{
	}

	[Token(Token = "0x6001609")]
	[Address(RVA = "0x891E7C", Offset = "0x891E7C", VA = "0x891E7C")]
	public ThievingHandler()
	{
	}
}
[Token(Token = "0x200032A")]
public class TownCompleteCelebration : SingleInstanceNetworkedBehavior<TownCompleteCelebration>, IPunObservable
{
	[Token(Token = "0x200032C")]
	[CompilerGenerated]
	private sealed class <ScoreCountupCoroutine>d__70 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40017FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40017FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40017FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TownCompleteCelebration <>4__this;

		[Token(Token = "0x40017FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int <numberOfLevels>5__2;

		[Token(Token = "0x40017FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <totalStars>5__3;

		[Token(Token = "0x4001800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int <starsToReward>5__4;

		[Token(Token = "0x4001801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <starCountup>5__5;

		[Token(Token = "0x4001802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private WaitForSeconds <fillTime>5__6;

		[Token(Token = "0x4001803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <fillTimeValue>5__7;

		[Token(Token = "0x4001804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int <i>5__8;

		[Token(Token = "0x4001805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private TableCenterUI <tableCenterUI>5__9;

		[Token(Token = "0x170002B5")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600161F")]
			[Address(RVA = "0x89443C", Offset = "0x89443C", VA = "0x89443C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B6")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001621")]
			[Address(RVA = "0x894484", Offset = "0x894484", VA = "0x894484", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600161C")]
		[Address(RVA = "0x8935EC", Offset = "0x8935EC", VA = "0x8935EC")]
		[DebuggerHidden]
		public <ScoreCountupCoroutine>d__70(int <>1__state)
		{
		}

		[Token(Token = "0x600161D")]
		[Address(RVA = "0x893AD8", Offset = "0x893AD8", VA = "0x893AD8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600161E")]
		[Address(RVA = "0x893ADC", Offset = "0x893ADC", VA = "0x893ADC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001620")]
		[Address(RVA = "0x894444", Offset = "0x894444", VA = "0x894444", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200032D")]
	[CompilerGenerated]
	private sealed class <>c__DisplayClass73_0
	{
		[Token(Token = "0x4001806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public TownCompleteCelebration <>4__this;

		[Token(Token = "0x4001807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int nextCup;

		[Token(Token = "0x4001808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CupButton nextCupButton;

		[Token(Token = "0x4001809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action <>9__1;

		[Token(Token = "0x6001622")]
		[Address(RVA = "0x89448C", Offset = "0x89448C", VA = "0x89448C")]
		public <>c__DisplayClass73_0()
		{
		}

		[Token(Token = "0x6001623")]
		[Address(RVA = "0x894494", Offset = "0x894494", VA = "0x894494")]
		internal void <ReturnToMap>b__0()
		{
		}

		[Token(Token = "0x6001624")]
		[Address(RVA = "0x8947E0", Offset = "0x8947E0", VA = "0x8947E0")]
		internal void <ReturnToMap>b__1()
		{
		}
	}

	[Token(Token = "0x200032E")]
	[CompilerGenerated]
	private sealed class <ReturnToMap>d__73 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400180A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400180B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400180C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TownCompleteCelebration <>4__this;

		[Token(Token = "0x400180D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private <>c__DisplayClass73_0 <>8__1;

		[Token(Token = "0x400180E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Map <map>5__2;

		[Token(Token = "0x400180F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CupButton <cupButtonTarget>5__3;

		[Token(Token = "0x4001810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <distance>5__4;

		[Token(Token = "0x4001811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float <startDistance>5__5;

		[Token(Token = "0x170002B7")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6001628")]
			[Address(RVA = "0x8950D4", Offset = "0x8950D4", VA = "0x8950D4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002B8")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600162A")]
			[Address(RVA = "0x89511C", Offset = "0x89511C", VA = "0x89511C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001625")]
		[Address(RVA = "0x8936D0", Offset = "0x8936D0", VA = "0x8936D0")]
		[DebuggerHidden]
		public <ReturnToMap>d__73(int <>1__state)
		{
		}

		[Token(Token = "0x6001626")]
		[Address(RVA = "0x8947FC", Offset = "0x8947FC", VA = "0x8947FC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6001627")]
		[Address(RVA = "0x894800", Offset = "0x894800", VA = "0x894800", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001629")]
		[Address(RVA = "0x8950DC", Offset = "0x8950DC", VA = "0x8950DC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40017B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Header("References")]
	private Renderer[] starRenderers;

	[Token(Token = "0x40017BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject[] townVisuals;

	[Token(Token = "0x40017BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject[] bannerVisuals;

	[Token(Token = "0x40017BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private LocalizedText townNameText;

	[Token(Token = "0x40017BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private ParticleSystem starFullParticles;

	[Token(Token = "0x40017BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private ParticleSystem[] starShimmerParticles;

	[Token(Token = "0x40017BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private ParticleSystem confettiParticles;

	[Token(Token = "0x40017C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private ParticleSystem fireworksParticles;

	[Token(Token = "0x40017C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private ParticleSystem fireworksLoopingParticles;

	[Token(Token = "0x40017C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private TrailRenderer trailRenderer;

	[Token(Token = "0x40017C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Transform[] starShimmerTransform;

	[Token(Token = "0x40017C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Animator animator;

	[Token(Token = "0x40017C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private GameObject[] RewardIconRoots;

	[Token(Token = "0x40017C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private Sprite coinRewardIcon;

	[Token(Token = "0x40017C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[Header("Celebration Settings")]
	[SerializeField]
	private Vector3 starTarget;

	[Token(Token = "0x40017C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	[SerializeField]
	private Vector3 moveToMapTargetScale;

	[Token(Token = "0x40017C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private float moveToMapSpeed;

	[Token(Token = "0x40017CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	[SerializeField]
	private float reachedMapTreshold;

	[Token(Token = "0x40017CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private float StarFillRateTime;

	[Token(Token = "0x40017CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	[SerializeField]
	private float waitForMapTransitionTime;

	[Token(Token = "0x40017CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private float waitForHighRankEffectsTime;

	[Token(Token = "0x40017CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	[SerializeField]
	private float celebrationFinishTime;

	[Token(Token = "0x40017CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private float returnToTownSelectDelay;

	[Token(Token = "0x40017D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	[SerializeField]
	private float roadFillTimeDelay;

	[Token(Token = "0x40017D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	private float delayBeforeShowingNextTown;

	[Token(Token = "0x40017D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	[SerializeField]
	private float delayNextTownOnRegionCelebration;

	[Token(Token = "0x40017D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	private float trailWidth;

	[Token(Token = "0x40017D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	[SerializeField]
	private float singleFireworkLaunchCooldown;

	[Token(Token = "0x40017D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[SerializeField]
	private float multipleFireworkLaunchCooldown;

	[Token(Token = "0x40017D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	[Header("Final Level")]
	[SerializeField]
	private float hideTownCelebrationTime;

	[Token(Token = "0x40017D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[SerializeField]
	private float delayAfterVoiceOver;

	[Token(Token = "0x40017D8")]
	private const float shimmerStartX = 0.011153f;

	[Token(Token = "0x40017D9")]
	private const float shimmerStopX = -0.0086469f;

	[Token(Token = "0x40017DA")]
	private const float shimmerDeltaX = -0.0197999f;

	[Token(Token = "0x40017DB")]
	private const string triggerEnter = "Enter";

	[Token(Token = "0x40017DC")]
	private const string triggerExit = "Exit";

	[Token(Token = "0x40017DD")]
	private const string propertyProgress = "_Progress";

	[Token(Token = "0x40017DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private bool isRunning;

	[Token(Token = "0x40017DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private int cupIndex;

	[Token(Token = "0x40017E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private int[] cupStars;

	[Token(Token = "0x40017E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private bool isRunningLocally;

	[Token(Token = "0x40017E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private Map progressionMap;

	[Token(Token = "0x40017E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private bool[] filledStars;

	[Token(Token = "0x40017E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private Vector3 startPosition;

	[Token(Token = "0x40017E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private Coroutine countupRoutine;

	[Token(Token = "0x40017E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private GameObject visualsParent;

	[Token(Token = "0x40017E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private bool finalTown;

	[Token(Token = "0x40017E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	private float singleFireworkLaunchTimer;

	[Token(Token = "0x40017E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private float multipleFireworkLaunchTimer;

	[Token(Token = "0x40017EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private WaitForSeconds StarFillRate;

	[Token(Token = "0x40017EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private WaitForSeconds starFillRateOneLevel;

	[Token(Token = "0x40017EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private WaitForSeconds waitForMapTransition;

	[Token(Token = "0x40017ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	private WaitForSeconds celebrationFinishDelay;

	[Token(Token = "0x40017EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private WaitForSeconds waitForHighRankEffects;

	[Token(Token = "0x40017EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private WaitForSeconds returnToTownSelect;

	[Token(Token = "0x40017F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private WaitForSeconds hideTownCelebrationDelay;

	[Token(Token = "0x40017F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private MaterialPropertyBlock matPropBlock;

	[Token(Token = "0x40017F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private CookingGameState gameState;

	[Token(Token = "0x40017F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private Transform starFullParticlesTransform;

	[Token(Token = "0x40017F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private CookingCup cookingCup;

	[Token(Token = "0x40017F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private MapRoad mapRoad;

	[Token(Token = "0x40017F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private FaceLocalPlayerSide faceLocalPlayerSide;

	[Token(Token = "0x40017F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private SpriteRenderer[] rewardIconRenderers;

	[Token(Token = "0x40017F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private PlaySoundResult goldenToastSound;

	[Token(Token = "0x600160A")]
	[Address(RVA = "0x891F60", Offset = "0x891F60", VA = "0x891F60", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x600160B")]
	[Address(RVA = "0x89250C", Offset = "0x89250C", VA = "0x89250C")]
	private void Start()
	{
	}

	[Token(Token = "0x600160C")]
	[Address(RVA = "0x892894", Offset = "0x892894", VA = "0x892894")]
	private void Update()
	{
	}

	[Token(Token = "0x600160D")]
	[Address(RVA = "0x89293C", Offset = "0x89293C", VA = "0x89293C")]
	public void Show(int cupIndex, int[] cupStars)
	{
	}

	[Token(Token = "0x600160E")]
	[Address(RVA = "0x892FF8", Offset = "0x892FF8", VA = "0x892FF8", Slot = "6")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x600160F")]
	[Address(RVA = "0x892950", Offset = "0x892950", VA = "0x892950")]
	private void ScoreCountup()
	{
	}

	[Token(Token = "0x6001610")]
	[Address(RVA = "0x893584", Offset = "0x893584", VA = "0x893584")]
	[IteratorStateMachine(typeof(<ScoreCountupCoroutine>d__70))]
	private IEnumerator ScoreCountupCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6001611")]
	[Address(RVA = "0x8932C0", Offset = "0x8932C0", VA = "0x8932C0")]
	private void UpdateStarProgress(float progress)
	{
	}

	[Token(Token = "0x6001612")]
	[Address(RVA = "0x893614", Offset = "0x893614", VA = "0x893614")]
	private void OnGameStateChanged(GameState oldState, GameState newState)
	{
	}

	[Token(Token = "0x6001613")]
	[Address(RVA = "0x893668", Offset = "0x893668", VA = "0x893668")]
	[IteratorStateMachine(typeof(<ReturnToMap>d__73))]
	private IEnumerator ReturnToMap()
	{
		return null;
	}

	[Token(Token = "0x6001614")]
	[Address(RVA = "0x892814", Offset = "0x892814", VA = "0x892814")]
	private void Hide()
	{
	}

	[Token(Token = "0x6001615")]
	[Address(RVA = "0x892474", Offset = "0x892474", VA = "0x892474")]
	private void SetShimmerLocalPosition(int id, float progress)
	{
	}

	[Token(Token = "0x6001616")]
	[Address(RVA = "0x8936F8", Offset = "0x8936F8", VA = "0x8936F8")]
	private void HideEarnedRewardIcons(int rank)
	{
	}

	[Token(Token = "0x6001617")]
	[Address(RVA = "0x893874", Offset = "0x893874", VA = "0x893874", Slot = "5")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x6001618")]
	[Address(RVA = "0x893974", Offset = "0x893974", VA = "0x893974")]
	public TownCompleteCelebration()
	{
	}
}
[Token(Token = "0x200032F")]
public class TrophyStarBar : SingleInstanceBehavior<TrophyStarBar>
{
	[Token(Token = "0x4001812")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform[] trophyThresholds;

	[Token(Token = "0x4001813")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Material starLit;

	[Token(Token = "0x4001814")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Material starUnlit;

	[Token(Token = "0x4001815")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float starStartY;

	[Token(Token = "0x4001816")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float starStopY;

	[Token(Token = "0x4001817")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Transform[] starsParents;

	[Token(Token = "0x4001818")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private ParticleSystem[] starParticles;

	[Token(Token = "0x4001819")]
	private const float exitAnimatyionTime = 0.3f;

	[Token(Token = "0x400181A")]
	private const float minThresholdHeight = -0.098f;

	[Token(Token = "0x400181B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int cupMaxStarCount;

	[Token(Token = "0x400181C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Renderer[][] stars;

	[Token(Token = "0x400181D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Transform[][] starsTransform;

	[Token(Token = "0x400181E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int currentActiveStars;

	[Token(Token = "0x400181F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private CookingGameState cookingGameState;

	[Token(Token = "0x4001820")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Animator animator;

	[Token(Token = "0x4001821")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private int nextParticleSystem;

	[Token(Token = "0x600162B")]
	[Address(RVA = "0x895124", Offset = "0x895124", VA = "0x895124", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x600162C")]
	[Address(RVA = "0x895400", Offset = "0x895400", VA = "0x895400")]
	private void Start()
	{
	}

	[Token(Token = "0x600162D")]
	[Address(RVA = "0x895688", Offset = "0x895688", VA = "0x895688")]
	private void OnNewGameState(GameState oldState, GameState newState)
	{
	}

	[Token(Token = "0x600162E")]
	[Address(RVA = "0x89553C", Offset = "0x89553C", VA = "0x89553C")]
	private void SetStarStatus(int activeStars)
	{
	}

	[Token(Token = "0x600162F")]
	[Address(RVA = "0x895698", Offset = "0x895698", VA = "0x895698")]
	public void Show(int numberOfStars)
	{
	}

	[Token(Token = "0x6001630")]
	[Address(RVA = "0x88EAEC", Offset = "0x88EAEC", VA = "0x88EAEC")]
	public void Hide(bool instantDisappear)
	{
	}

	[Token(Token = "0x6001631")]
	[Address(RVA = "0x895754", Offset = "0x895754", VA = "0x895754")]
	public void AddStar()
	{
	}

	[Token(Token = "0x6001632")]
	[Address(RVA = "0x8958D4", Offset = "0x8958D4", VA = "0x8958D4")]
	public void SetCupStarsAndThresholdValues(int cupID)
	{
	}

	[Token(Token = "0x6001633")]
	[Address(RVA = "0x895B90", Offset = "0x895B90", VA = "0x895B90", Slot = "5")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x6001634")]
	[Address(RVA = "0x895C78", Offset = "0x895C78", VA = "0x895C78")]
	public TrophyStarBar()
	{
	}
}
[Token(Token = "0x2000330")]
public class TutorialDisplay : SingleInstanceBehavior<TutorialDisplay>
{
	[Token(Token = "0x4001822")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject root;

	[Token(Token = "0x4001823")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Sprite[] endlessTutorialSprites;

	[Token(Token = "0x4001824")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Sprite creativeModeSprite;

	[Token(Token = "0x4001825")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private TextMeshPro title;

	[Token(Token = "0x4001826")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private TextMeshPro description;

	[Token(Token = "0x4001827")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private SpriteRenderer tutorialPicture;

	[Token(Token = "0x4001828")]
	private const string localizationEndlessHeader = "endless_header";

	[Token(Token = "0x4001829")]
	private const string localizationCreativeHeader = "creative_header";

	[Token(Token = "0x400182A")]
	private const string localizationCreativeDescription = "creative_mode_tutorial";

	[Token(Token = "0x6001636")]
	[Address(RVA = "0x895D74", Offset = "0x895D74", VA = "0x895D74", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6001637")]
	[Address(RVA = "0x895EBC", Offset = "0x895EBC", VA = "0x895EBC")]
	public void ShowCupTutorial(int cupID, int levelIndex)
	{
	}

	[Token(Token = "0x6001638")]
	[Address(RVA = "0x89605C", Offset = "0x89605C", VA = "0x89605C")]
	public void ShowEndlessTutorial(int pageIndex)
	{
	}

	[Token(Token = "0x6001639")]
	[Address(RVA = "0x896250", Offset = "0x896250", VA = "0x896250")]
	public void ShowCreativeTutorial()
	{
	}

	[Token(Token = "0x600163A")]
	[Address(RVA = "0x89633C", Offset = "0x89633C", VA = "0x89633C")]
	public TutorialDisplay()
	{
	}
}
[Token(Token = "0x2000331")]
public class TutorialSuggestMultiplayer : SingleInstanceBehavior<TutorialSuggestMultiplayer>
{
	[Token(Token = "0x400182B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private CupData tutorialTown;

	[Token(Token = "0x400182C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private PokeButton continueSoloButton;

	[Token(Token = "0x400182D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private PokeButton playMultiplayerButton;

	[Token(Token = "0x400182F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool startedDirectlyInTutorial;

	[Token(Token = "0x4001830")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	private bool justBeatTutorialTownFirstTime;

	[Token(Token = "0x4001831")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int tutorialTownCupIndex;

	[Token(Token = "0x4001832")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private CookingGameState gameStateManager;

	[Token(Token = "0x4001833")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private BotManager botManager;

	[Token(Token = "0x4001834")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Animator animator;

	[Token(Token = "0x4001835")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GameObject visuals;

	[Token(Token = "0x4001836")]
	private const int singlePlayerPositionIndex = 0;

	[Token(Token = "0x4001837")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Collider[] colliders;

	[Token(Token = "0x170002B9")]
	public bool IsShowing
	{
		[Token(Token = "0x600163B")]
		[Address(RVA = "0x8963A8", Offset = "0x8963A8", VA = "0x8963A8")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600163C")]
		[Address(RVA = "0x8963B0", Offset = "0x8963B0", VA = "0x8963B0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x600163D")]
	[Address(RVA = "0x8963BC", Offset = "0x8963BC", VA = "0x8963BC", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x600163E")]
	[Address(RVA = "0x89653C", Offset = "0x89653C", VA = "0x89653C")]
	private void Start()
	{
	}

	[Token(Token = "0x600163F")]
	[Address(RVA = "0x896898", Offset = "0x896898", VA = "0x896898")]
	public void OnTownBeatenFirstTime(int cupIndex)
	{
	}

	[Token(Token = "0x6001640")]
	[Address(RVA = "0x8968B0", Offset = "0x8968B0", VA = "0x8968B0")]
	private void OnGameStateChanged(GameState oldState, GameState newState)
	{
	}

	[Token(Token = "0x6001641")]
	[Address(RVA = "0x896A88", Offset = "0x896A88", VA = "0x896A88")]
	public void Show(bool shouldShow)
	{
	}

	[Token(Token = "0x6001642")]
	[Address(RVA = "0x896D34", Offset = "0x896D34", VA = "0x896D34")]
	private void OnContinueSingleplayer()
	{
	}

	[Token(Token = "0x6001643")]
	[Address(RVA = "0x896E7C", Offset = "0x896E7C", VA = "0x896E7C")]
	private void OnSwitchToMultiplayer()
	{
	}

	[Token(Token = "0x6001644")]
	[Address(RVA = "0x896FB8", Offset = "0x896FB8", VA = "0x896FB8", Slot = "5")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x6001645")]
	[Address(RVA = "0x8970B8", Offset = "0x8970B8", VA = "0x8970B8")]
	public TutorialSuggestMultiplayer()
	{
	}
}
[Token(Token = "0x2000332")]
public class WorkSpaceMenu : SingleInstanceBehavior<WorkSpaceMenu>
{
	[Token(Token = "0x2000333")]
	public enum MenuState
	{
		[Token(Token = "0x4001848")]
		Hidden,
		[Token(Token = "0x4001849")]
		PreRoundUI,
		[Token(Token = "0x400184A")]
		Inventory,
		[Token(Token = "0x400184B")]
		InventoryHidingPreRoundUI,
		[Token(Token = "0x400184C")]
		SuggestMultiplayer,
		[Token(Token = "0x400184D")]
		ThanksForPlaying,
		[Token(Token = "0x400184E")]
		PhotoGallery
	}

	[Token(Token = "0x4001838")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private MenuState menuStateBacking;

	[Token(Token = "0x4001839")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Spawn locations")]
	[SerializeField]
	private Vector3[] spawnLocations;

	[Token(Token = "0x400183A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Vector3[] spawnRotations;

	[Token(Token = "0x400183B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("Menus")]
	[SerializeField]
	private PreRoundUI preRoundUI;

	[Token(Token = "0x400183C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private InventoryMenu inventoryMenu;

	[Token(Token = "0x400183D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private TutorialSuggestMultiplayer tutorialSuggestMultiplayer;

	[Token(Token = "0x400183E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GameObject ghostMenuPrefab;

	[Token(Token = "0x400183F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private ThanksForPlaying thanksForPlaying;

	[Token(Token = "0x4001840")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private PhotoGallery photoGallery;

	[Token(Token = "0x4001842")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private CookingNetworkManager cookingNetworkManager;

	[Token(Token = "0x4001843")]
	private const float exitAnimationTime = 1.033f;

	[Token(Token = "0x4001844")]
	private const float enterAnimationTime = 1.033f;

	[Token(Token = "0x4001845")]
	private const string enterAnimationTrigger = "Enter";

	[Token(Token = "0x4001846")]
	private const string exitAnimationTrigger = "Exit";

	[Token(Token = "0x170002BA")]
	public MenuState State
	{
		[Token(Token = "0x6001646")]
		[Address(RVA = "0x897124", Offset = "0x897124", VA = "0x897124")]
		get
		{
			return default(MenuState);
		}
		[Token(Token = "0x6001647")]
		[Address(RVA = "0x89712C", Offset = "0x89712C", VA = "0x89712C")]
		private set
		{
		}
	}

	[Token(Token = "0x170002BB")]
	public GhostMenu GhostMenu
	{
		[Token(Token = "0x6001648")]
		[Address(RVA = "0x89731C", Offset = "0x89731C", VA = "0x89731C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001649")]
		[Address(RVA = "0x897324", Offset = "0x897324", VA = "0x897324")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x600164A")]
	[Address(RVA = "0x89732C", Offset = "0x89732C", VA = "0x89732C", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x600164B")]
	[Address(RVA = "0x897374", Offset = "0x897374", VA = "0x897374")]
	private void Start()
	{
	}

	[Token(Token = "0x600164C")]
	[Address(RVA = "0x897770", Offset = "0x897770", VA = "0x897770")]
	public void OnInventoryButtonPressed()
	{
	}

	[Token(Token = "0x600164D")]
	[Address(RVA = "0x8978EC", Offset = "0x8978EC", VA = "0x8978EC")]
	public void PreparePlayerForRound()
	{
	}

	[Token(Token = "0x600164E")]
	[Address(RVA = "0x89714C", Offset = "0x89714C", VA = "0x89714C")]
	private void OnMenuStateChanged(MenuState oldState, MenuState newState)
	{
	}

	[Token(Token = "0x600164F")]
	[Address(RVA = "0x89790C", Offset = "0x89790C", VA = "0x89790C")]
	private void UpdateFridge(int playerPosIndex, bool menuHidden)
	{
	}

	[Token(Token = "0x6001650")]
	[Address(RVA = "0x897638", Offset = "0x897638", VA = "0x897638")]
	private void OnLocalPlayerMoved(int playerPosIndex)
	{
	}

	[Token(Token = "0x6001651")]
	[Address(RVA = "0x897ADC", Offset = "0x897ADC", VA = "0x897ADC")]
	public void RefreshInventoryButtonActiveStatus()
	{
	}

	[Token(Token = "0x6001652")]
	[Address(RVA = "0x897F7C", Offset = "0x897F7C", VA = "0x897F7C")]
	public void OnLocalPlayerVoted(bool wasLastVote)
	{
	}

	[Token(Token = "0x6001653")]
	[Address(RVA = "0x897FB0", Offset = "0x897FB0", VA = "0x897FB0")]
	public void ShowPhotoGallery()
	{
	}

	[Token(Token = "0x6001654")]
	[Address(RVA = "0x896A64", Offset = "0x896A64", VA = "0x896A64")]
	public void ShowTutorialSuggestMultiplayer()
	{
	}

	[Token(Token = "0x6001655")]
	[Address(RVA = "0x896E5C", Offset = "0x896E5C", VA = "0x896E5C")]
	public void HideTutorialSuggestMultiplayer()
	{
	}

	[Token(Token = "0x6001656")]
	[Address(RVA = "0x8950B0", Offset = "0x8950B0", VA = "0x8950B0")]
	public void ShowThanksForPlaying()
	{
	}

	[Token(Token = "0x6001657")]
	[Address(RVA = "0x897FD0", Offset = "0x897FD0", VA = "0x897FD0")]
	public void CloseThanksForPlaying()
	{
	}

	[Token(Token = "0x6001658")]
	[Address(RVA = "0x897FF0", Offset = "0x897FF0", VA = "0x897FF0")]
	public void Hide()
	{
	}

	[Token(Token = "0x6001659")]
	[Address(RVA = "0x890E80", Offset = "0x890E80", VA = "0x890E80")]
	public void PlayEnterOrExitAnimation(bool isEntering, Animator animator, GameObject visuals, Collider[] colliders, [Optional] Action callbackWhenDone)
	{
	}

	[Token(Token = "0x600165A")]
	[Address(RVA = "0x898010", Offset = "0x898010", VA = "0x898010")]
	public WorkSpaceMenu()
	{
	}
}
[Token(Token = "0x2000335")]
public class WristMenu : SingleInstanceBehavior<WristMenu>
{
	[Token(Token = "0x2000336")]
	private enum State
	{
		[Token(Token = "0x4001890")]
		Hidden,
		[Token(Token = "0x4001891")]
		Menu,
		[Token(Token = "0x4001892")]
		KickPopup,
		[Token(Token = "0x4001893")]
		AudioPopup,
		[Token(Token = "0x4001894")]
		LeavePopup,
		[Token(Token = "0x4001895")]
		CancelRoundPopup,
		[Token(Token = "0x4001896")]
		MakeRoomPrivatePopup,
		[Token(Token = "0x4001897")]
		MakeRoomPublicPopup
	}

	[Token(Token = "0x2000337")]
	private enum Seat
	{
		[Token(Token = "0x4001899")]
		Empty,
		[Token(Token = "0x400189A")]
		Player,
		[Token(Token = "0x400189B")]
		Bot
	}

	[Token(Token = "0x4001853")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject wristWatchLeft;

	[Token(Token = "0x4001854")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject wristWatchRight;

	[Token(Token = "0x4001855")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private PokeButton closeMenuButton;

	[Token(Token = "0x4001856")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private TextMeshPro roomCodeText;

	[Token(Token = "0x4001857")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private PokeButton[] menuButtons;

	[Token(Token = "0x4001858")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private PokeButton leaveRoomButton;

	[Token(Token = "0x4001859")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private PokeButton cancelRoundButton;

	[Token(Token = "0x400185A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private PokeButton toogleRoomVisibilityButton;

	[Token(Token = "0x400185B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private PokeButton spawnBotButton;

	[Token(Token = "0x400185C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private PokeButton audioButton;

	[Token(Token = "0x400185D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private GameObject menuRoot;

	[Token(Token = "0x400185E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Transform wristRoot;

	[Token(Token = "0x400185F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Header("Player Row")]
	[SerializeField]
	private Color localPlayerColor;

	[Token(Token = "0x4001860")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private Color remotePlayerColor;

	[Token(Token = "0x4001861")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	private SpriteRenderer[] playerIcons;

	[Token(Token = "0x4001862")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	private SpriteRenderer[] hostIcons;

	[Token(Token = "0x4001863")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	private TextMeshPro[] playerNames;

	[Token(Token = "0x4001864")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private SpriteRenderer[] playerRowBackgrounds;

	[Token(Token = "0x4001865")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private PokeButton[] KickButtons;

	[Token(Token = "0x4001866")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	[Header("Mute & Unmute")]
	private Sprite mutePlayerIcon;

	[Token(Token = "0x4001867")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	private Sprite unmutePlayerIcon;

	[Token(Token = "0x4001868")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	private Sprite muteLocalMicIcon;

	[Token(Token = "0x4001869")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[SerializeField]
	private Sprite unmuteLocalMicIcon;

	[Token(Token = "0x400186A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	[SerializeField]
	private PokeButton[] mutePlayerButtons;

	[Token(Token = "0x400186B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[SerializeField]
	private SpriteRenderer[] mutePlayerButtonIcons;

	[Token(Token = "0x400186C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[SerializeField]
	private PokeButton[] muteLocalMicButtons;

	[Token(Token = "0x400186D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	[SerializeField]
	private SpriteRenderer[] muteLocalMicButtonIcons;

	[Token(Token = "0x400186E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	[Header("Popup General")]
	[SerializeField]
	private PokeButton closePopupButton;

	[Token(Token = "0x400186F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SerializeField]
	private GameObject popupParent;

	[Token(Token = "0x4001870")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	[Header("Kick Popup")]
	[SerializeField]
	private GameObject kickPopupParent;

	[Token(Token = "0x4001871")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[SerializeField]
	private TextMeshPro kickPlayerName;

	[Token(Token = "0x4001872")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	[SerializeField]
	private PokeButton confirmKickButton;

	[Token(Token = "0x4001873")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[SerializeField]
	private PokeButton confirmKickAndBlockButton;

	[Token(Token = "0x4001874")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	[SerializeField]
	[Header("Leave Popup")]
	private GameObject leavePopupParent;

	[Token(Token = "0x4001875")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	[SerializeField]
	private PokeButton confirmLeaveButton;

	[Token(Token = "0x4001876")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	[SerializeField]
	[Header("Cancel Round Popup")]
	private GameObject cancelRoundPopupParent;

	[Token(Token = "0x4001877")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	[SerializeField]
	private PokeButton cancelRoundConfirmButton;

	[Token(Token = "0x4001878")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	[SerializeField]
	[Header("Confirm Make Room Private Popup")]
	private GameObject makePrivatePopupParent;

	[Token(Token = "0x4001879")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	[SerializeField]
	private PokeButton makePrivateConfirmButton;

	[Token(Token = "0x400187A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	[SerializeField]
	[Header("Confirm Make Room Public Popup")]
	private GameObject makePublicPopupParent;

	[Token(Token = "0x400187B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	[SerializeField]
	private PokeButton makePublicConfirmButton;

	[Token(Token = "0x400187C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	[Header("Audio Popup")]
	[SerializeField]
	private GameObject audioPopupParent;

	[Token(Token = "0x400187D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private State state;

	[Token(Token = "0x400187E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private Seat[] seats;

	[Token(Token = "0x400187F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private BotManager botManager;

	[Token(Token = "0x4001880")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private CookingNetworkManager cookingNetworkManager;

	[Token(Token = "0x4001881")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private PhotonCallbackManager photonCallbackManager;

	[Token(Token = "0x4001882")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	private CookingRound cookingRound;

	[Token(Token = "0x4001883")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private CookingGameState gameState;

	[Token(Token = "0x4001884")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	private Locale locale;

	[Token(Token = "0x4001885")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	private int selectedPlayerPositionIndex;

	[Token(Token = "0x4001886")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	private Transform menuParent;

	[Token(Token = "0x4001887")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	private TextMeshPro toggleRoomVisibilityText;

	[Token(Token = "0x4001888")]
	private const string localizationMakeRoomPublic = "wristmenu_make_public";

	[Token(Token = "0x4001889")]
	private const string localizationMakeRoomPrivate = "wristmenu_make_private";

	[Token(Token = "0x400188A")]
	private const string localizationSinglePlayer = "wristmenu_singleplayer";

	[Token(Token = "0x400188B")]
	private const string localizationRoomCode = "wristmenu_roomcode";

	[Token(Token = "0x400188C")]
	private const string localizationHost = "wristmenu_host";

	[Token(Token = "0x400188D")]
	private const string localizationBotName = "wristmenu_botname";

	[Token(Token = "0x400188E")]
	private const string localizationEmpty = "wristmenu_empty";

	[Token(Token = "0x170002BC")]
	private bool IsShowingPopup
	{
		[Token(Token = "0x600165D")]
		[Address(RVA = "0x89815C", Offset = "0x89815C", VA = "0x89815C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170002BD")]
	private bool CancelRoundEnabled
	{
		[Token(Token = "0x600165E")]
		[Address(RVA = "0x898184", Offset = "0x898184", VA = "0x898184")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600165F")]
	[Address(RVA = "0x898274", Offset = "0x898274", VA = "0x898274", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x6001660")]
	[Address(RVA = "0x89837C", Offset = "0x89837C", VA = "0x89837C")]
	private void Start()
	{
	}

	[Token(Token = "0x6001661")]
	[Address(RVA = "0x899768", Offset = "0x899768", VA = "0x899768")]
	private void OnMenuCloseButtonPressed()
	{
	}

	[Token(Token = "0x6001662")]
	[Address(RVA = "0x899500", Offset = "0x899500", VA = "0x899500")]
	private void UpdateRoomCode()
	{
	}

	[Token(Token = "0x6001663")]
	[Address(RVA = "0x89930C", Offset = "0x89930C", VA = "0x89930C")]
	private void SetState(State newState)
	{
	}

	[Token(Token = "0x6001664")]
	[Address(RVA = "0x89A05C", Offset = "0x89A05C", VA = "0x89A05C")]
	private void Update()
	{
	}

	[Token(Token = "0x6001665")]
	[Address(RVA = "0x89A0D8", Offset = "0x89A0D8", VA = "0x89A0D8")]
	private void ReturnToLobby()
	{
	}

	[Token(Token = "0x6001666")]
	[Address(RVA = "0x89A0F4", Offset = "0x89A0F4", VA = "0x89A0F4")]
	private void ToggleRoomVisibilityClicked()
	{
	}

	[Token(Token = "0x6001667")]
	[Address(RVA = "0x89A1DC", Offset = "0x89A1DC", VA = "0x89A1DC")]
	public void SetRoomVisibility(RoomVisibility roomVisibility)
	{
	}

	[Token(Token = "0x6001668")]
	[Address(RVA = "0x899BC0", Offset = "0x899BC0", VA = "0x899BC0")]
	private void RefreshToggleVisibilityButton()
	{
	}

	[Token(Token = "0x6001669")]
	[Address(RVA = "0x89A300", Offset = "0x89A300", VA = "0x89A300")]
	private void ToggleMicActive()
	{
	}

	[Token(Token = "0x600166A")]
	[Address(RVA = "0x89A0C8", Offset = "0x89A0C8", VA = "0x89A0C8")]
	private void ToggleMenu()
	{
	}

	[Token(Token = "0x600166B")]
	[Address(RVA = "0x89A970", Offset = "0x89A970", VA = "0x89A970")]
	public void Hide()
	{
	}

	[Token(Token = "0x600166C")]
	[Address(RVA = "0x89A978", Offset = "0x89A978", VA = "0x89A978")]
	private void OnPlayerConnected(PhotonPlayer player)
	{
	}

	[Token(Token = "0x600166D")]
	[Address(RVA = "0x89A97C", Offset = "0x89A97C", VA = "0x89A97C")]
	private void OnPlayerDisconnected(PhotonPlayer player)
	{
	}

	[Token(Token = "0x600166E")]
	[Address(RVA = "0x89A980", Offset = "0x89A980", VA = "0x89A980")]
	private void OnMasterClientChanged(PhotonPlayer newMasterClient)
	{
	}

	[Token(Token = "0x600166F")]
	[Address(RVA = "0x89A998", Offset = "0x89A998", VA = "0x89A998")]
	private void OnPlayerMoved(int playerID)
	{
	}

	[Token(Token = "0x6001670")]
	[Address(RVA = "0x899770", Offset = "0x899770", VA = "0x899770")]
	private void RefreshPlayerSeats()
	{
	}

	[Token(Token = "0x6001671")]
	[Address(RVA = "0x89A99C", Offset = "0x89A99C", VA = "0x89A99C")]
	private void UpdatePlayerIcon(int index, Color color, bool isMaster)
	{
	}

	[Token(Token = "0x6001672")]
	[Address(RVA = "0x899E04", Offset = "0x899E04", VA = "0x899E04")]
	private string GetPlayerName(int positionIndex, PhotonPlayer photonPlayer)
	{
		return null;
	}

	[Token(Token = "0x6001673")]
	[Address(RVA = "0x89A338", Offset = "0x89A338", VA = "0x89A338")]
	private void RefreshMuteAndKickButtons()
	{
	}

	[Token(Token = "0x6001674")]
	[Address(RVA = "0x89AAC0", Offset = "0x89AAC0", VA = "0x89AAC0")]
	private void RefreshSpawnBotButton()
	{
	}

	[Token(Token = "0x6001675")]
	[Address(RVA = "0x89AB3C", Offset = "0x89AB3C", VA = "0x89AB3C")]
	private void SpawnBot()
	{
	}

	[Token(Token = "0x6001676")]
	[Address(RVA = "0x89AB60", Offset = "0x89AB60", VA = "0x89AB60")]
	private void OnMuteButtonClicked(int positionIndex)
	{
	}

	[Token(Token = "0x6001677")]
	[Address(RVA = "0x89AC6C", Offset = "0x89AC6C", VA = "0x89AC6C")]
	private void OnKickButtonPressed(int positionIndex)
	{
	}

	[Token(Token = "0x6001678")]
	[Address(RVA = "0x89AD14", Offset = "0x89AD14", VA = "0x89AD14")]
	private void KickAndBlockPlayer()
	{
	}

	[Token(Token = "0x6001679")]
	[Address(RVA = "0x89AF14", Offset = "0x89AF14", VA = "0x89AF14")]
	private void KickPlayer()
	{
	}

	[Token(Token = "0x600167A")]
	[Address(RVA = "0x899D6C", Offset = "0x899D6C", VA = "0x899D6C")]
	private PhotonPlayer GetPlayer(int ID)
	{
		return null;
	}

	[Token(Token = "0x600167B")]
	[Address(RVA = "0x89AF64", Offset = "0x89AF64", VA = "0x89AF64")]
	private void OnCountdownStarted()
	{
	}

	[Token(Token = "0x600167C")]
	[Address(RVA = "0x89AFB8", Offset = "0x89AFB8", VA = "0x89AFB8")]
	private void OnRoundStop()
	{
	}

	[Token(Token = "0x600167D")]
	[Address(RVA = "0x89AFEC", Offset = "0x89AFEC", VA = "0x89AFEC")]
	private void OnRoundStart()
	{
	}

	[Token(Token = "0x600167E")]
	[Address(RVA = "0x89B034", Offset = "0x89B034", VA = "0x89B034")]
	private void CancelRound()
	{
	}

	[Token(Token = "0x600167F")]
	[Address(RVA = "0x89B374", Offset = "0x89B374", VA = "0x89B374")]
	private void OnGameStateChanged(GameState oldState, GameState newState)
	{
	}

	[Token(Token = "0x6001680")]
	[Address(RVA = "0x89B38C", Offset = "0x89B38C", VA = "0x89B38C")]
	public void MasterClientRefresh()
	{
	}

	[Token(Token = "0x6001681")]
	[Address(RVA = "0x899610", Offset = "0x899610", VA = "0x899610")]
	private void TrackingInit()
	{
	}

	[Token(Token = "0x6001682")]
	[Address(RVA = "0x89A79C", Offset = "0x89A79C", VA = "0x89A79C")]
	private void TrackingUpdateMuted()
	{
	}

	[Token(Token = "0x6001683")]
	[Address(RVA = "0x89B424", Offset = "0x89B424", VA = "0x89B424")]
	public void OnLeavingMainScene()
	{
	}

	[Token(Token = "0x6001684")]
	[Address(RVA = "0x89B490", Offset = "0x89B490", VA = "0x89B490")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6001685")]
	[Address(RVA = "0x89B4A8", Offset = "0x89B4A8", VA = "0x89B4A8", Slot = "5")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x6001686")]
	[Address(RVA = "0x89B940", Offset = "0x89B940", VA = "0x89B940")]
	public WristMenu()
	{
	}
}
[Token(Token = "0x2000339")]
public class WristMenuAutoholdSettings : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x400189E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private PokeButton autoHoldHandButton;

	[Token(Token = "0x400189F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Material inactiveMat;

	[Token(Token = "0x40018A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Material activeMat;

	[Token(Token = "0x40018A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private SaveManager saveManager;

	[Token(Token = "0x40018A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private MeshRenderer autoHoldButtonRenderer;

	[Token(Token = "0x6001694")]
	[Address(RVA = "0x89BAD0", Offset = "0x89BAD0", VA = "0x89BAD0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001695")]
	[Address(RVA = "0x89BB20", Offset = "0x89BB20", VA = "0x89BB20")]
	private void Start()
	{
	}

	[Token(Token = "0x6001696")]
	[Address(RVA = "0x89BC8C", Offset = "0x89BC8C", VA = "0x89BC8C")]
	private void SetAutoTogglePreference()
	{
	}

	[Token(Token = "0x6001697")]
	[Address(RVA = "0x89BC44", Offset = "0x89BC44", VA = "0x89BC44")]
	private void RefreshAutoHoldStatus()
	{
	}

	[Token(Token = "0x6001698")]
	[Address(RVA = "0x89BCD0", Offset = "0x89BCD0", VA = "0x89BCD0")]
	public WristMenuAutoholdSettings()
	{
	}
}
[Token(Token = "0x200033A")]
public class Cleaver : NetworkedBehaviour, IPunObservable, IConsumableTarget
{
	[Token(Token = "0x40018A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool superSharpBacking;

	[Token(Token = "0x40018A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float maxChopForce;

	[Token(Token = "0x40018A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float minChopForce;

	[Token(Token = "0x40018A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private CleaverSafety safety;

	[Token(Token = "0x40018A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform centerOfMass;

	[Token(Token = "0x40018A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private Collider blade;

	[Token(Token = "0x40018AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private float maxChopAngle;

	[Token(Token = "0x40018AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	private float maxChopAngleReversed;

	[Token(Token = "0x40018AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private float attachAngleMax;

	[Token(Token = "0x40018AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[SerializeField]
	private float attachAngleReversed;

	[Token(Token = "0x40018AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private float snapUpperYThreshold;

	[Token(Token = "0x40018AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	[SerializeField]
	private float snapLowerYThreshold;

	[Token(Token = "0x40018B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private float attachToBoardVelocityThreshold;

	[Token(Token = "0x40018B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[SerializeField]
	private float chopSplinterSpeedThreshold;

	[Token(Token = "0x40018B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private float backSwingCooldown;

	[Token(Token = "0x40018B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private GameObject superSharpnessVFX;

	[Token(Token = "0x40018B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Tooltip("When thrown into a cutting board, force the cleaver an extra x cm into the board to make it feel like it stuck properly.")]
	[SerializeField]
	private float forceExtraIntoCuttingBoard;

	[Token(Token = "0x40018B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[HideInInspector]
	public bool doubleEdged;

	[Token(Token = "0x40018B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Rigidbody rigidBody;

	[Token(Token = "0x40018B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Grabbable grabbable;

	[Token(Token = "0x40018B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private List<Transform> insideIngredientTransforms;

	[Token(Token = "0x40018B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private List<IngredientWhole> insideIngredients;

	[Token(Token = "0x40018BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Collider[] collidersHit;

	[Token(Token = "0x40018BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Vector3 colliderExtents;

	[Token(Token = "0x40018BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private CookingRound cookingRound;

	[Token(Token = "0x40018BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private EndlessMode endlessMode;

	[Token(Token = "0x40018BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private float backSwingTimer;

	[Token(Token = "0x40018BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private bool lastHitWasForwardEdge;

	[Token(Token = "0x40018C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private float fencingCooldown;

	[Token(Token = "0x40018C1")]
	private const float fencingCooldownTime = 0.1f;

	[Token(Token = "0x40018C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	public int inSafetyZone;

	[Token(Token = "0x40018C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public float pausePhysicsTimer;

	[Token(Token = "0x170002BE")]
	public bool SuperSharp
	{
		[Token(Token = "0x6001699")]
		[Address(RVA = "0x89BCD8", Offset = "0x89BCD8", VA = "0x89BCD8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600169A")]
		[Address(RVA = "0x89BCE0", Offset = "0x89BCE0", VA = "0x89BCE0")]
		private set
		{
		}
	}

	[Token(Token = "0x170002BF")]
	public UseConsumableHere UseConsumableHere
	{
		[Token(Token = "0x600169B")]
		[Address(RVA = "0x89BD10", Offset = "0x89BD10", VA = "0x89BD10", Slot = "5")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600169C")]
		[Address(RVA = "0x89BD18", Offset = "0x89BD18", VA = "0x89BD18", Slot = "6")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170002C0")]
	public bool ReactsToConsumables
	{
		[Token(Token = "0x600169D")]
		[Address(RVA = "0x89BD20", Offset = "0x89BD20", VA = "0x89BD20", Slot = "7")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600169E")]
	[Address(RVA = "0x89BD30", Offset = "0x89BD30", VA = "0x89BD30")]
	private void Awake()
	{
	}

	[Token(Token = "0x600169F")]
	[Address(RVA = "0x89BF08", Offset = "0x89BF08", VA = "0x89BF08")]
	private void Start()
	{
	}

	[Token(Token = "0x60016A0")]
	[Address(RVA = "0x89C180", Offset = "0x89C180", VA = "0x89C180")]
	private void Update()
	{
	}

	[Token(Token = "0x60016A1")]
	[Address(RVA = "0x89C224", Offset = "0x89C224", VA = "0x89C224")]
	public void OnGrabBegin()
	{
	}

	[Token(Token = "0x60016A2")]
	[Address(RVA = "0x89C3B8", Offset = "0x89C3B8", VA = "0x89C3B8")]
	public void OnGrabEnd()
	{
	}

	[Token(Token = "0x60016A3")]
	[Address(RVA = "0x89C93C", Offset = "0x89C93C", VA = "0x89C93C")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60016A4")]
	[Address(RVA = "0x89DC50", Offset = "0x89DC50", VA = "0x89DC50")]
	private void OnIngredientDisabled(IngredientWhole ingredient)
	{
	}

	[Token(Token = "0x60016A5")]
	[Address(RVA = "0x89DCD8", Offset = "0x89DCD8", VA = "0x89DCD8")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60016A6")]
	[Address(RVA = "0x89DB5C", Offset = "0x89DB5C", VA = "0x89DB5C")]
	private void RemoveInsideIngredient(IngredientWhole ingredient)
	{
	}

	[Token(Token = "0x60016A7")]
	[Address(RVA = "0x89C7F4", Offset = "0x89C7F4", VA = "0x89C7F4")]
	private void AnchorCleaver(bool wasReleased)
	{
	}

	[Token(Token = "0x60016A8")]
	[Address(RVA = "0x89D7BC", Offset = "0x89D7BC", VA = "0x89D7BC")]
	private bool ChoppingWithEdgeFacingForward()
	{
		return default(bool);
	}

	[Token(Token = "0x60016A9")]
	[Address(RVA = "0x89C540", Offset = "0x89C540", VA = "0x89C540")]
	private bool EdgeFacingChoppingBoard()
	{
		return default(bool);
	}

	[Token(Token = "0x60016AA")]
	[Address(RVA = "0x89DDE0", Offset = "0x89DDE0", VA = "0x89DDE0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60016AB")]
	[Address(RVA = "0x89E008", Offset = "0x89E008", VA = "0x89E008")]
	private void EndSuperSharpness()
	{
	}

	[Token(Token = "0x60016AC")]
	[Address(RVA = "0x89E010", Offset = "0x89E010", VA = "0x89E010")]
	private void ApplyCreativeModeSuperSharpness()
	{
	}

	[Token(Token = "0x60016AD")]
	[Address(RVA = "0x89E1A8", Offset = "0x89E1A8", VA = "0x89E1A8")]
	[PunRPC]
	private void ActiveSuperSharpRPC()
	{
	}

	[Token(Token = "0x60016AE")]
	[Address(RVA = "0x89DA14", Offset = "0x89DA14", VA = "0x89DA14")]
	[PunRPC]
	private void FencingRPC(Vector3 fencingPosition, int otherPlayerID)
	{
	}

	[Token(Token = "0x60016AF")]
	[Address(RVA = "0x89E1D8", Offset = "0x89E1D8", VA = "0x89E1D8", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60016B0")]
	[Address(RVA = "0x89E63C", Offset = "0x89E63C", VA = "0x89E63C")]
	public Cleaver()
	{
	}
}
[Token(Token = "0x200033B")]
public enum CleaverShape
{
	[Token(Token = "0x40018C5")]
	Regular,
	[Token(Token = "0x40018C6")]
	BattleAxe,
	[Token(Token = "0x40018C7")]
	CurvedBlade,
	[Token(Token = "0x40018C8")]
	SleekDamascus,
	[Token(Token = "0x40018C9")]
	machete,
	[Token(Token = "0x40018CA")]
	Royal,
	[Token(Token = "0x40018CB")]
	ChukaBocho,
	[Token(Token = "0x40018CC")]
	SleekCleaver,
	[Token(Token = "0x40018CD")]
	Rounded,
	[Token(Token = "0x40018CE")]
	Butcher,
	[Token(Token = "0x40018CF")]
	Bone,
	[Token(Token = "0x40018D0")]
	Orc,
	[Token(Token = "0x40018D1")]
	Carrot,
	[Token(Token = "0x40018D2")]
	BrokenSword,
	[Token(Token = "0x40018D3")]
	Mjolnir,
	[Token(Token = "0x40018D4")]
	PlasticKnife,
	[Token(Token = "0x40018D5")]
	DiyAxe,
	[Token(Token = "0x40018D6")]
	DiyHammer,
	[Token(Token = "0x40018D7")]
	DiySaw
}
[Serializable]
[Token(Token = "0x200033C")]
[CreateAssetMenu(fileName = "NewCleaverData", menuName = "Cleaver Data/Cleaver Data")]
public class CleaverData : RewardItem
{
	[Token(Token = "0x40018D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Mesh mesh;

	[Token(Token = "0x40018D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Material material;

	[Token(Token = "0x40018DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Material questMaterial;

	[Token(Token = "0x40018DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public CleaverShape shape;

	[Token(Token = "0x40018DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public bool doubleEdged;

	[Token(Token = "0x40018DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Vector3 snapPosition;

	[Token(Token = "0x40018DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public Vector3 snapRotation;

	[Token(Token = "0x40018DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Vector3 alternateSnapRotation;

	[Token(Token = "0x40018E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Mesh superSharpParticleMesh;

	[Token(Token = "0x60016B1")]
	[Address(RVA = "0x89E758", Offset = "0x89E758", VA = "0x89E758")]
	public CleaverData()
	{
	}
}
[Token(Token = "0x200033D")]
public class CleaverDispenser : UnityEngine.MonoBehaviour, ILocallyGrabbable
{
	[Token(Token = "0x40018E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Grabbable cleaverGrabbable;

	[Token(Token = "0x40018E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Renderer ghostCleaverRenderer;

	[Token(Token = "0x40018E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private int id;

	[Token(Token = "0x40018E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool isMine;

	[Token(Token = "0x40018E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CookingNetworkManager cookingNetworkManager;

	[Token(Token = "0x60016B2")]
	[Address(RVA = "0x89E760", Offset = "0x89E760", VA = "0x89E760")]
	private void Start()
	{
	}

	[Token(Token = "0x60016B3")]
	[Address(RVA = "0x89E924", Offset = "0x89E924", VA = "0x89E924", Slot = "4")]
	public void OnLocalGrab(CookoutAvatarHand grabbedBy, Transform handAnchor)
	{
	}

	[Token(Token = "0x60016B4")]
	[Address(RVA = "0x89E910", Offset = "0x89E910", VA = "0x89E910")]
	public void SetMyDispenser(int myIndex)
	{
	}

	[Token(Token = "0x60016B5")]
	[Address(RVA = "0x89EC5C", Offset = "0x89EC5C", VA = "0x89EC5C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60016B6")]
	[Address(RVA = "0x89ED30", Offset = "0x89ED30", VA = "0x89ED30")]
	private void Update()
	{
	}

	[Token(Token = "0x60016B7")]
	[Address(RVA = "0x89ED70", Offset = "0x89ED70", VA = "0x89ED70")]
	public CleaverDispenser()
	{
	}
}
[Token(Token = "0x200033E")]
[CreateAssetMenu(fileName = "NewCleaverList", menuName = "Cleaver Data/Cleaver List")]
public class CleaverList : ScriptableObject
{
	[Token(Token = "0x40018E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<CleaverData> cleaverDataList;

	[Token(Token = "0x60016B8")]
	[Address(RVA = "0x89ED78", Offset = "0x89ED78", VA = "0x89ED78")]
	public CleaverList()
	{
	}
}
[Token(Token = "0x200033F")]
public class CleaverSafety : NetworkedBehaviour
{
	[Token(Token = "0x40018E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject Edge;

	[Token(Token = "0x40018E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject Flower;

	[Token(Token = "0x40018E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float highSpeedThreshold;

	[Token(Token = "0x40018EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float pausePhysicsTime;

	[Token(Token = "0x40018EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool activated;

	[Token(Token = "0x40018EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private PhotonView cleaverView;

	[Token(Token = "0x40018ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Cleaver cleaver;

	[Token(Token = "0x40018EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Rigidbody rigidBody;

	[Token(Token = "0x40018EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Collider[] triggers;

	[Token(Token = "0x60016B9")]
	[Address(RVA = "0x89ED80", Offset = "0x89ED80", VA = "0x89ED80")]
	private void Start()
	{
	}

	[Token(Token = "0x60016BA")]
	[Address(RVA = "0x89EE74", Offset = "0x89EE74", VA = "0x89EE74")]
	private void Update()
	{
	}

	[Token(Token = "0x60016BB")]
	[Address(RVA = "0x89EF38", Offset = "0x89EF38", VA = "0x89EF38")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60016BC")]
	[Address(RVA = "0x89F174", Offset = "0x89F174", VA = "0x89F174")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60016BD")]
	[Address(RVA = "0x89C270", Offset = "0x89C270", VA = "0x89C270")]
	public void SetSafety(bool safetyOn)
	{
	}

	[Token(Token = "0x60016BE")]
	[Address(RVA = "0x89E530", Offset = "0x89E530", VA = "0x89E530")]
	public void SafetyPhotonSerializationReceive(int newSafetyCount, float newPauseTimer)
	{
	}

	[Token(Token = "0x60016BF")]
	[Address(RVA = "0x89F300", Offset = "0x89F300", VA = "0x89F300")]
	public void SetActiveTrigger(int id)
	{
	}

	[Token(Token = "0x60016C0")]
	[Address(RVA = "0x89F36C", Offset = "0x89F36C", VA = "0x89F36C")]
	public CleaverSafety()
	{
	}
}
[Token(Token = "0x2000340")]
public class CleaverVisuals : NetworkedBehaviour, IPunObservable
{
	[Token(Token = "0x40018F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ItemRewardID cleaverType;

	[Token(Token = "0x40018F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private CleaverShape shape;

	[Token(Token = "0x40018F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private MeshFilter meshFilter;

	[Token(Token = "0x40018F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Renderer myRenderer;

	[Token(Token = "0x40018F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Transform collidersHandleParent;

	[Token(Token = "0x40018F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Transform collidersBladeParent;

	[Token(Token = "0x40018F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private CleaverSafety safety;

	[Token(Token = "0x40018F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private ParticleSystem superSharpParticles;

	[Token(Token = "0x40018F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private ItemRewardsRegistry rewardsRegistry;

	[Token(Token = "0x40018F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Cleaver cleaver;

	[Token(Token = "0x40018FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Grabbable grabbable;

	[Token(Token = "0x170002C1")]
	public ItemRewardID CleaverType
	{
		[Token(Token = "0x60016C1")]
		[Address(RVA = "0x89F380", Offset = "0x89F380", VA = "0x89F380")]
		get
		{
			return default(ItemRewardID);
		}
		[Token(Token = "0x60016C2")]
		[Address(RVA = "0x89F388", Offset = "0x89F388", VA = "0x89F388")]
		set
		{
		}
	}

	[Token(Token = "0x170002C2")]
	public CleaverShape Shape
	{
		[Token(Token = "0x60016C3")]
		[Address(RVA = "0x89F620", Offset = "0x89F620", VA = "0x89F620")]
		get
		{
			return default(CleaverShape);
		}
		[Token(Token = "0x60016C4")]
		[Address(RVA = "0x89F56C", Offset = "0x89F56C", VA = "0x89F56C")]
		set
		{
		}
	}

	[Token(Token = "0x60016C5")]
	[Address(RVA = "0x89F628", Offset = "0x89F628", VA = "0x89F628")]
	private void Start()
	{
	}

	[Token(Token = "0x60016C6")]
	[Address(RVA = "0x89F750", Offset = "0x89F750", VA = "0x89F750")]
	[PunRPC]
	private void SetCleaverTypeRPC(int type)
	{
	}

	[Token(Token = "0x60016C7")]
	[Address(RVA = "0x89F754", Offset = "0x89F754", VA = "0x89F754", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60016C8")]
	[Address(RVA = "0x89F90C", Offset = "0x89F90C", VA = "0x89F90C")]
	public CleaverVisuals()
	{
	}
}
[Token(Token = "0x2000341")]
public class CuttingBoard : NetworkedBehaviour, IPunObservable
{
	[Token(Token = "0x40018FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ItemRewardID type;

	[Token(Token = "0x40018FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform choppingBoardCenter;

	[Token(Token = "0x40018FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int ingredientViewID;

	[Token(Token = "0x40018FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ItemRewardsRegistry rewardsRegistry;

	[Token(Token = "0x40018FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private MeshRenderer meshRenderer;

	[Token(Token = "0x4001900")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private MaterialPropertyBlock materialPropertyBlock;

	[Token(Token = "0x4001901")]
	private const string propertyTextureIndex = "_TextureIndex";

	[Token(Token = "0x170002C3")]
	public ItemRewardID Type
	{
		[Token(Token = "0x60016C9")]
		[Address(RVA = "0x89F914", Offset = "0x89F914", VA = "0x89F914")]
		get
		{
			return default(ItemRewardID);
		}
		[Token(Token = "0x60016CA")]
		[Address(RVA = "0x89F91C", Offset = "0x89F91C", VA = "0x89F91C")]
		set
		{
		}
	}

	[Token(Token = "0x60016CB")]
	[Address(RVA = "0x89FA28", Offset = "0x89FA28", VA = "0x89FA28")]
	private void Awake()
	{
	}

	[Token(Token = "0x60016CC")]
	[Address(RVA = "0x89FA88", Offset = "0x89FA88", VA = "0x89FA88")]
	private void Start()
	{
	}

	[Token(Token = "0x60016CD")]
	[Address(RVA = "0x89FBD0", Offset = "0x89FBD0", VA = "0x89FBD0")]
	public bool HasNoIngredient()
	{
		return default(bool);
	}

	[Token(Token = "0x60016CE")]
	[Address(RVA = "0x89FC58", Offset = "0x89FC58", VA = "0x89FC58")]
	public void AddIngredientToCuttingBoard(int newIngredientViewID)
	{
	}

	[Token(Token = "0x60016CF")]
	[Address(RVA = "0x89FE60", Offset = "0x89FE60", VA = "0x89FE60")]
	[PunRPC]
	private void RemoveIngredientFromCuttingBoardRPC()
	{
	}

	[Token(Token = "0x60016D0")]
	[Address(RVA = "0x89FE6C", Offset = "0x89FE6C", VA = "0x89FE6C", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60016D1")]
	[Address(RVA = "0x89FFA0", Offset = "0x89FFA0", VA = "0x89FFA0")]
	[PunRPC]
	private void SplinterParticlesRPC()
	{
	}

	[Token(Token = "0x60016D2")]
	[Address(RVA = "0x8A00F0", Offset = "0x8A00F0", VA = "0x8A00F0")]
	[PunRPC]
	private void SetCuttingBoardTypeRPC(int type)
	{
	}

	[Token(Token = "0x60016D3")]
	[Address(RVA = "0x8A00F4", Offset = "0x8A00F4", VA = "0x8A00F4")]
	public IngredientType GetIngredientOnBoard()
	{
		return default(IngredientType);
	}

	[Token(Token = "0x60016D4")]
	[Address(RVA = "0x8A01B4", Offset = "0x8A01B4", VA = "0x8A01B4")]
	public CuttingBoard()
	{
	}
}
[Serializable]
[Token(Token = "0x2000342")]
[CreateAssetMenu(fileName = "NewCuttingBoardData", menuName = "Cutting Board Data/Cutting Board Data")]
public class CuttingBoardData : RewardItem
{
	[Token(Token = "0x4001902")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public int textureIndex;

	[Token(Token = "0x60016D5")]
	[Address(RVA = "0x8A01BC", Offset = "0x8A01BC", VA = "0x8A01BC")]
	public CuttingBoardData()
	{
	}
}
[Token(Token = "0x2000343")]
[CreateAssetMenu(fileName = "NewCleaverList", menuName = "Cutting Board Data/Cutting Board List")]
public class CuttingBoardList : ScriptableObject
{
	[Token(Token = "0x4001903")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<CuttingBoardData> cuttingBoardDataList;

	[Token(Token = "0x60016D6")]
	[Address(RVA = "0x8A01C4", Offset = "0x8A01C4", VA = "0x8A01C4")]
	public CuttingBoardList()
	{
	}
}
[Token(Token = "0x2000344")]
public class DishBrush : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x4001904")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float cleaningConstant;

	[Token(Token = "0x4001905")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float speedThreshold;

	[Token(Token = "0x4001906")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float minCleanFraction;

	[Token(Token = "0x4001907")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float maxCleanFraction;

	[Token(Token = "0x4001908")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float brushColliderRadius;

	[Token(Token = "0x4001909")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Transform brushHead;

	[Token(Token = "0x400190A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float brushSoundCooldown;

	[Token(Token = "0x400190B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Collider[] collidersHit;

	[Token(Token = "0x400190C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Grabbable grabbable;

	[Token(Token = "0x400190D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3[] trackedMoves;

	[Token(Token = "0x400190E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3 previousPosition;

	[Token(Token = "0x400190F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private int currentTrackedMove;

	[Token(Token = "0x4001910")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float hapticCooldownTimer;

	[Token(Token = "0x4001911")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float brushSoundCooldownTimer;

	[Token(Token = "0x4001912")]
	private const int numMovesTracked = 5;

	[Token(Token = "0x4001913")]
	private const float hapticCooldown = 0.056f;

	[Token(Token = "0x4001914")]
	private const string grabbableTag = "Grabbable";

	[Token(Token = "0x4001915")]
	private const string plateName = "Plate";

	[Token(Token = "0x60016D7")]
	[Address(RVA = "0x8A01CC", Offset = "0x8A01CC", VA = "0x8A01CC")]
	private void Start()
	{
	}

	[Token(Token = "0x60016D8")]
	[Address(RVA = "0x8A026C", Offset = "0x8A026C", VA = "0x8A026C")]
	private void Update()
	{
	}

	[Token(Token = "0x60016D9")]
	[Address(RVA = "0x8A072C", Offset = "0x8A072C", VA = "0x8A072C")]
	private Vector3 MeanValue(Vector3[] values)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60016DA")]
	[Address(RVA = "0x8A07E0", Offset = "0x8A07E0", VA = "0x8A07E0")]
	public DishBrush()
	{
	}
}
[Token(Token = "0x2000345")]
public class FireExtinguisher : NetworkedBehaviour, IPunObservable
{
	[Token(Token = "0x2000346")]
	private struct IngredientInRange
	{
		[Token(Token = "0x400191E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Grillable grillable;

		[Token(Token = "0x400191F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int intersectingColliderCount;

		[Token(Token = "0x60016E8")]
		[Address(RVA = "0x8A13F0", Offset = "0x8A13F0", VA = "0x8A13F0")]
		public IngredientInRange(Grillable grillable, int intersectingColliderCount = 1)
		{
		}
	}

	[Token(Token = "0x4001916")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform particleAnchor;

	[Token(Token = "0x4001917")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Grabbable grabbable;

	[Token(Token = "0x4001918")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CookoutInput input;

	[Token(Token = "0x4001919")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool isSpraying;

	[Token(Token = "0x400191A")]
	private const string grabbableTag = "Grabbable";

	[Token(Token = "0x400191B")]
	private const string nameSlice = "Slice";

	[Token(Token = "0x400191C")]
	private const string nameWhole = "Whole";

	[Token(Token = "0x400191D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<IngredientInRange> ingredientsInRange;

	[Token(Token = "0x60016DB")]
	[Address(RVA = "0x8A085C", Offset = "0x8A085C", VA = "0x8A085C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60016DC")]
	[Address(RVA = "0x8A0960", Offset = "0x8A0960", VA = "0x8A0960")]
	private void Start()
	{
	}

	[Token(Token = "0x60016DD")]
	[Address(RVA = "0x8A09AC", Offset = "0x8A09AC", VA = "0x8A09AC")]
	private void Update()
	{
	}

	[Token(Token = "0x60016DE")]
	[Address(RVA = "0x8A0D2C", Offset = "0x8A0D2C", VA = "0x8A0D2C")]
	public void TryRemoveIngredient(Grillable grillable)
	{
	}

	[Token(Token = "0x60016DF")]
	[Address(RVA = "0x8A0C00", Offset = "0x8A0C00", VA = "0x8A0C00")]
	private void StopExtinguishingInRangeIngredients()
	{
	}

	[Token(Token = "0x60016E0")]
	[Address(RVA = "0x8A0E74", Offset = "0x8A0E74", VA = "0x8A0E74")]
	public void OnGrabEnd()
	{
	}

	[Token(Token = "0x60016E1")]
	[Address(RVA = "0x8A0EF8", Offset = "0x8A0EF8", VA = "0x8A0EF8", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60016E2")]
	[Address(RVA = "0x8A0B60", Offset = "0x8A0B60", VA = "0x8A0B60")]
	private void OnSprayingChanged()
	{
	}

	[Token(Token = "0x60016E3")]
	[Address(RVA = "0x8A0FD0", Offset = "0x8A0FD0", VA = "0x8A0FD0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60016E4")]
	[Address(RVA = "0x8A1088", Offset = "0x8A1088", VA = "0x8A1088")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60016E5")]
	[Address(RVA = "0x8A13FC", Offset = "0x8A13FC", VA = "0x8A13FC")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60016E6")]
	[Address(RVA = "0x8A1750", Offset = "0x8A1750", VA = "0x8A1750")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60016E7")]
	[Address(RVA = "0x8A1824", Offset = "0x8A1824", VA = "0x8A1824")]
	public FireExtinguisher()
	{
	}
}
[Token(Token = "0x2000347")]
public class Fridge : NetworkedBehaviour, IPunObservable
{
	[Token(Token = "0x4001920")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly IngredientType[][] villageIngredients;

	[Token(Token = "0x4001921")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static readonly IngredientType[][] forestIngredients;

	[Token(Token = "0x4001922")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static readonly IngredientType[][] castleIngredients;

	[Token(Token = "0x4001923")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public static readonly IngredientType[][] endlessModeIngredients;

	[Token(Token = "0x4001924")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public static readonly IngredientType[] breadOnlyFridge;

	[Token(Token = "0x4001925")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public static readonly IngredientType[][] tutorialIngredients;

	[Token(Token = "0x4001926")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public static readonly IngredientType[][] fullIngredientSets;

	[Token(Token = "0x4001927")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ItemRewardID type;

	[Token(Token = "0x4001928")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int fridgeIDBacking;

	[Token(Token = "0x4001929")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public PokeButton fridgeButton;

	[Token(Token = "0x400192A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform fridgePlayerIconTransform;

	[Token(Token = "0x400192B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject fridgeButtonActive;

	[Token(Token = "0x400192C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject fridgeButtonInactive;

	[Token(Token = "0x400192D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject cycleIngredientsPrevious;

	[Token(Token = "0x400192E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject cycleIngredientsNext;

	[Token(Token = "0x400192F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject cycleIngredientsButtonFrames;

	[Token(Token = "0x4001930")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GameObject creativeModeToolTip;

	[Token(Token = "0x4001931")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float extensionSpeed;

	[Token(Token = "0x4001932")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float extendedHeightOffset;

	[Token(Token = "0x4001933")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float interactableAboveHeight;

	[Token(Token = "0x4001934")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private bool shouldBeExtended;

	[Token(Token = "0x4001935")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Vector3 flatPosition;

	[Token(Token = "0x4001936")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private Vector3 extendedPosition;

	[Token(Token = "0x4001937")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Transform extendablePart;

	[Token(Token = "0x4001938")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool interactable;

	[Token(Token = "0x4001939")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private FridgeIngredient[] fridgeIngredients;

	[Token(Token = "0x400193A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Transform openParticlesAnchor;

	[Token(Token = "0x400193B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private ParticleSystem closedParticles;

	[Token(Token = "0x400193C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private bool forceShutBacking;

	[Token(Token = "0x400193D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
	private bool fridgeIconIsVisible;

	[Token(Token = "0x400193E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBA")]
	private bool tooltipActive;

	[Token(Token = "0x400193F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private int ingredientSetIndex;

	[Token(Token = "0x4001940")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private EnvironmentLoader environmentLoader;

	[Token(Token = "0x4001941")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private ItemRewardsRegistry rewardsRegistry;

	[Token(Token = "0x4001942")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private CookingRound cookingRound;

	[Token(Token = "0x4001943")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private MeshRenderer fridgeRendererBody;

	[Token(Token = "0x4001944")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private MeshRenderer switchIngredientRendererBody;

	[Token(Token = "0x4001945")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Rigidbody rigidBody;

	[Token(Token = "0x4001946")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private IngredientType[] ingredientTypesBacking;

	[Token(Token = "0x4001947")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private IngredientType[] ingredientsToSwitchTo;

	[Token(Token = "0x4001948")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private MaterialPropertyBlock materialPropertyBlock;

	[Token(Token = "0x4001949")]
	private const string propertyTextureIndex = "_TextureIndex";

	[Token(Token = "0x170002C4")]
	public ItemRewardID Type
	{
		[Token(Token = "0x60016E9")]
		[Address(RVA = "0x8A18A4", Offset = "0x8A18A4", VA = "0x8A18A4")]
		get
		{
			return default(ItemRewardID);
		}
		[Token(Token = "0x60016EA")]
		[Address(RVA = "0x8A18AC", Offset = "0x8A18AC", VA = "0x8A18AC")]
		set
		{
		}
	}

	[Token(Token = "0x170002C5")]
	public bool ForceShut
	{
		[Token(Token = "0x60016EB")]
		[Address(RVA = "0x8A19FC", Offset = "0x8A19FC", VA = "0x8A19FC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60016EC")]
		[Address(RVA = "0x897E2C", Offset = "0x897E2C", VA = "0x897E2C")]
		set
		{
		}
	}

	[Token(Token = "0x170002C6")]
	public int FridgeID
	{
		[Token(Token = "0x60016ED")]
		[Address(RVA = "0x8A1A04", Offset = "0x8A1A04", VA = "0x8A1A04")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x170002C7")]
	private bool InCreativeModeRound
	{
		[Token(Token = "0x60016EE")]
		[Address(RVA = "0x8A1C34", Offset = "0x8A1C34", VA = "0x8A1C34")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60016EF")]
	[Address(RVA = "0x8A1D08", Offset = "0x8A1D08", VA = "0x8A1D08")]
	private void Awake()
	{
	}

	[Token(Token = "0x60016F0")]
	[Address(RVA = "0x8A2058", Offset = "0x8A2058", VA = "0x8A2058")]
	private void Start()
	{
	}

	[Token(Token = "0x60016F1")]
	[Address(RVA = "0x8A2AF4", Offset = "0x8A2AF4", VA = "0x8A2AF4")]
	private void OnLocalPlayerMoved(int spawnPointIndex)
	{
	}

	[Token(Token = "0x60016F2")]
	[Address(RVA = "0x8A2C28", Offset = "0x8A2C28", VA = "0x8A2C28")]
	private void OnEnvironmentChanged()
	{
	}

	[Token(Token = "0x60016F3")]
	[Address(RVA = "0x8A2C2C", Offset = "0x8A2C2C", VA = "0x8A2C2C")]
	public void OnButtonClicked()
	{
	}

	[Token(Token = "0x60016F4")]
	[Address(RVA = "0x8A2F20", Offset = "0x8A2F20", VA = "0x8A2F20")]
	private void OnIngredientGrabbed()
	{
	}

	[Token(Token = "0x60016F5")]
	[Address(RVA = "0x8A3150", Offset = "0x8A3150", VA = "0x8A3150")]
	[PunRPC]
	private void OnFridgeToggleRPC(bool extend)
	{
	}

	[Token(Token = "0x60016F6")]
	[Address(RVA = "0x8A32C4", Offset = "0x8A32C4", VA = "0x8A32C4")]
	[PunRPC]
	private void OnFridgeIngredientGrabbedRPC()
	{
	}

	[Token(Token = "0x60016F7")]
	[Address(RVA = "0x8A3308", Offset = "0x8A3308", VA = "0x8A3308")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60016F8")]
	[Address(RVA = "0x8A2778", Offset = "0x8A2778", VA = "0x8A2778")]
	private void SetInteractable(bool isInteractable)
	{
	}

	[Token(Token = "0x60016F9")]
	[Address(RVA = "0x8A1A2C", Offset = "0x8A1A2C", VA = "0x8A1A2C")]
	private int GetClosestPlayerIndex()
	{
		return default(int);
	}

	[Token(Token = "0x60016FA")]
	[Address(RVA = "0x8A2840", Offset = "0x8A2840", VA = "0x8A2840")]
	public void SetIngredientsAccordingToEnvironment()
	{
	}

	[Token(Token = "0x60016FB")]
	[Address(RVA = "0x8A374C", Offset = "0x8A374C", VA = "0x8A374C")]
	public static IngredientType[][] GetIngredientsForEnvironment(CupData.Environment environment)
	{
		return null;
	}

	[Token(Token = "0x60016FC")]
	[Address(RVA = "0x8A35BC", Offset = "0x8A35BC", VA = "0x8A35BC")]
	public void SwitchIngredientsInFridge(IngredientType[] ingredients, bool instantSwitch)
	{
	}

	[Token(Token = "0x60016FD")]
	[Address(RVA = "0x8A3904", Offset = "0x8A3904", VA = "0x8A3904")]
	public IngredientType[] GetCurrentIngredients()
	{
		return null;
	}

	[Token(Token = "0x60016FE")]
	[Address(RVA = "0x8A3978", Offset = "0x8A3978", VA = "0x8A3978")]
	public Vector3 GetIngredientPositionAndHide(IngredientType type)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60016FF")]
	[Address(RVA = "0x897CA8", Offset = "0x897CA8", VA = "0x897CA8")]
	public void UpdateFridgePlayerIconVisibility(bool workSpaceMenuShowing)
	{
	}

	[Token(Token = "0x6001700")]
	[Address(RVA = "0x8A3BE4", Offset = "0x8A3BE4", VA = "0x8A3BE4")]
	public void CycleFullSetIngredients(int indexOffset)
	{
	}

	[Token(Token = "0x6001701")]
	[Address(RVA = "0x8A3DA0", Offset = "0x8A3DA0", VA = "0x8A3DA0")]
	private void OnRoundStart()
	{
	}

	[Token(Token = "0x6001702")]
	[Address(RVA = "0x8A401C", Offset = "0x8A401C", VA = "0x8A401C")]
	private void OnRoundStop()
	{
	}

	[Token(Token = "0x6001703")]
	[Address(RVA = "0x8A27E4", Offset = "0x8A27E4", VA = "0x8A27E4")]
	private void SetCycleIngredientsButtonsActive(bool isActive)
	{
	}

	[Token(Token = "0x6001704")]
	[Address(RVA = "0x8A4224", Offset = "0x8A4224", VA = "0x8A4224")]
	[PunRPC]
	private void SetFridgeTypeRPC(int type)
	{
	}

	[Token(Token = "0x6001705")]
	[Address(RVA = "0x8A4228", Offset = "0x8A4228", VA = "0x8A4228")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001706")]
	[Address(RVA = "0x8A43F0", Offset = "0x8A43F0", VA = "0x8A43F0", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6001707")]
	[Address(RVA = "0x8A4734", Offset = "0x8A4734", VA = "0x8A4734")]
	public Fridge()
	{
	}
}
[Serializable]
[Token(Token = "0x2000348")]
[CreateAssetMenu(fileName = "NewFridgeData", menuName = "Fridge Data/Fridge Data")]
public class FridgeData : RewardItem
{
	[Token(Token = "0x400194A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public int textureIndex;

	[Token(Token = "0x600170B")]
	[Address(RVA = "0x8A51FC", Offset = "0x8A51FC", VA = "0x8A51FC")]
	public FridgeData()
	{
	}
}
[Token(Token = "0x2000349")]
public class FridgeIngredient : UnityEngine.MonoBehaviour, ILocallyGrabbable
{
	[Token(Token = "0x400194B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Action OnIngredientGrabbed;

	[Token(Token = "0x400194C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public IngredientType ingredientType;

	[Token(Token = "0x400194D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private MeshRenderer ContentSignIcon;

	[Token(Token = "0x400194E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private IngredientPrefabRegistry ingredientRegistry;

	[Token(Token = "0x400194F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Collider trigger;

	[Token(Token = "0x4001950")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject rawIngredientVisuals;

	[Token(Token = "0x4001951")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Transform visualsParent;

	[Token(Token = "0x4001952")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private MaterialPropertyBlock matPropBlock;

	[Token(Token = "0x4001953")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private EnvironmentLoader EnvironmentLoader;

	[Token(Token = "0x4001954")]
	private const string propertyTextureIndex = "_TextureIndex";

	[Token(Token = "0x170002C8")]
	private IngredientPrefabRegistry IngredientRegistry
	{
		[Token(Token = "0x600170C")]
		[Address(RVA = "0x8A5204", Offset = "0x8A5204", VA = "0x8A5204")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600170D")]
	[Address(RVA = "0x8A5310", Offset = "0x8A5310", VA = "0x8A5310")]
	private void Awake()
	{
	}

	[Token(Token = "0x600170E")]
	[Address(RVA = "0x8A53D4", Offset = "0x8A53D4", VA = "0x8A53D4")]
	private void Start()
	{
	}

	[Token(Token = "0x600170F")]
	[Address(RVA = "0x8A549C", Offset = "0x8A549C", VA = "0x8A549C")]
	public void SetNewIngredientType(IngredientType ingredientType)
	{
	}

	[Token(Token = "0x6001710")]
	[Address(RVA = "0x8A568C", Offset = "0x8A568C", VA = "0x8A568C")]
	public void UpdateIngredientTransform()
	{
	}

	[Token(Token = "0x6001711")]
	[Address(RVA = "0x8A57E8", Offset = "0x8A57E8", VA = "0x8A57E8")]
	public void SetInteractable(bool interactable)
	{
	}

	[Token(Token = "0x6001712")]
	[Address(RVA = "0x8A584C", Offset = "0x8A584C", VA = "0x8A584C", Slot = "4")]
	public void OnLocalGrab(CookoutAvatarHand grabbedBy, Transform handAnchor)
	{
	}

	[Token(Token = "0x6001713")]
	[Address(RVA = "0x8A5A40", Offset = "0x8A5A40", VA = "0x8A5A40")]
	public FridgeIngredient()
	{
	}
}
[Token(Token = "0x200034A")]
[CreateAssetMenu(fileName = "NewFridgeList", menuName = "Fridge Data/Fridge List")]
public class FridgeList : ScriptableObject
{
	[Token(Token = "0x4001955")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<FridgeData> fridgeDataList;

	[Token(Token = "0x6001714")]
	[Address(RVA = "0x8A5A48", Offset = "0x8A5A48", VA = "0x8A5A48")]
	public FridgeList()
	{
	}
}
[Token(Token = "0x200034B")]
public class WorkspaceRegistry : SingleInstanceBehavior<WorkspaceRegistry>
{
	[Token(Token = "0x4001956")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private CuttingBoard[] cuttingBoardsInScene;

	[Token(Token = "0x4001958")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Fridge[] fridgesInScene;

	[Token(Token = "0x170002C9")]
	public CuttingBoard[] CuttingBoards
	{
		[Token(Token = "0x6001715")]
		[Address(RVA = "0x8A5A50", Offset = "0x8A5A50", VA = "0x8A5A50")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001716")]
		[Address(RVA = "0x8A5A58", Offset = "0x8A5A58", VA = "0x8A5A58")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x170002CA")]
	public Fridge[] Fridges
	{
		[Token(Token = "0x6001717")]
		[Address(RVA = "0x8A5A60", Offset = "0x8A5A60", VA = "0x8A5A60")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001718")]
		[Address(RVA = "0x8A5A68", Offset = "0x8A5A68", VA = "0x8A5A68")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6001719")]
	[Address(RVA = "0x8A5A70", Offset = "0x8A5A70", VA = "0x8A5A70", Slot = "4")]
	public override void Awake()
	{
	}

	[Token(Token = "0x600171A")]
	[Address(RVA = "0x8A5ACC", Offset = "0x8A5ACC", VA = "0x8A5ACC")]
	public WorkspaceRegistry()
	{
	}
}
[Token(Token = "0x200034C")]
public class FryingArea : NetworkedBehaviour, IPunObservable, IConsumableTarget
{
	[Token(Token = "0x200034D")]
	private enum GrillState
	{
		[Token(Token = "0x400197E")]
		Off,
		[Token(Token = "0x400197F")]
		On,
		[Token(Token = "0x4001980")]
		PoweredUp
	}

	[Token(Token = "0x200034E")]
	private struct IngredientInRange
	{
		[Token(Token = "0x4001981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Grillable grillable;

		[Token(Token = "0x4001982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int intersectingColliderCount;

		[Token(Token = "0x6001739")]
		[Address(RVA = "0x8A6FAC", Offset = "0x8A6FAC", VA = "0x8A6FAC")]
		public IngredientInRange(Grillable grillable, int intersectingColliderCount = 1)
		{
		}
	}

	[Token(Token = "0x400195A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool isLocked;

	[Token(Token = "0x400195B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float coalsEmissiveRate;

	[Token(Token = "0x400195C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GrillState state;

	[Token(Token = "0x400195E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private UseConsumableHere useConsumableHere;

	[Token(Token = "0x400195F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private PokeButton powerButton;

	[Token(Token = "0x4001960")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private GameObject lockedMesh;

	[Token(Token = "0x4001961")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private Grabbable extinguisher;

	[Token(Token = "0x4001962")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private Transform poweredUpParticlesAnchor;

	[Token(Token = "0x4001963")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Vector3 buttonInactiveOffset;

	[Token(Token = "0x4001964")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Animator lockAnimator;

	[Token(Token = "0x4001965")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private ParticleSystem unlockParticles;

	[Token(Token = "0x4001966")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private float unlockParticlesDelay;

	[Token(Token = "0x4001967")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[SerializeField]
	private float powerUpRate;

	[Token(Token = "0x4001968")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float ovenOnTransitionTime;

	[Token(Token = "0x4001969")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public float ovenOffTransitionTime;

	[Token(Token = "0x400196A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float fryingFactor;

	[Token(Token = "0x400196B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float coalsEmissiveTarget;

	[Token(Token = "0x400196C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float friedStateValue;

	[Token(Token = "0x400196D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private List<IngredientInRange> fryTargets;

	[Token(Token = "0x400196E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Renderer ovenBodyRenderer;

	[Token(Token = "0x400196F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private SpriteRenderer buttonGlowRenderer;

	[Token(Token = "0x4001970")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private CookingRound cookingRound;

	[Token(Token = "0x4001971")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private EndlessMode endlessMode;

	[Token(Token = "0x4001972")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private MaterialPropertyBlock propertyBlock;

	[Token(Token = "0x4001973")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Transform buttonTransform;

	[Token(Token = "0x4001974")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Transform buttonBodyTransform;

	[Token(Token = "0x4001975")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private GameObject lockGameObject;

	[Token(Token = "0x4001976")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private ReturnToOriginIfLost extinguisherReturn;

	[Token(Token = "0x4001977")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private GameObject unlockedMesh;

	[Token(Token = "0x4001978")]
	private const string propertyEmissive = "_Emissive";

	[Token(Token = "0x4001979")]
	private const string tagGrabbable = "Grabbable";

	[Token(Token = "0x400197A")]
	private const string nameSlice = "Slice";

	[Token(Token = "0x400197B")]
	private const string nameWhole = "Whole";

	[Token(Token = "0x400197C")]
	private const string triggerPlay = "play";

	[Token(Token = "0x170002CB")]
	public bool IsLocked
	{
		[Token(Token = "0x600171B")]
		[Address(RVA = "0x8A5B88", Offset = "0x8A5B88", VA = "0x8A5B88")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600171C")]
		[Address(RVA = "0x8A5B90", Offset = "0x8A5B90", VA = "0x8A5B90")]
		set
		{
		}
	}

	[Token(Token = "0x170002CC")]
	private float CoalsEmissiveRate
	{
		[Token(Token = "0x600171D")]
		[Address(RVA = "0x8A5EA0", Offset = "0x8A5EA0", VA = "0x8A5EA0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600171E")]
		[Address(RVA = "0x8A5EA8", Offset = "0x8A5EA8", VA = "0x8A5EA8")]
		set
		{
		}
	}

	[Token(Token = "0x170002CD")]
	private GrillState State
	{
		[Token(Token = "0x600171F")]
		[Address(RVA = "0x8A5F38", Offset = "0x8A5F38", VA = "0x8A5F38")]
		get
		{
			return default(GrillState);
		}
		[Token(Token = "0x6001720")]
		[Address(RVA = "0x8A5D7C", Offset = "0x8A5D7C", VA = "0x8A5D7C")]
		set
		{
		}
	}

	[Token(Token = "0x170002CE")]
	private bool IsOn
	{
		[Token(Token = "0x6001721")]
		[Address(RVA = "0x8A60F0", Offset = "0x8A60F0", VA = "0x8A60F0")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170002CF")]
	private bool IsPoweredUp
	{
		[Token(Token = "0x6001722")]
		[Address(RVA = "0x8A6100", Offset = "0x8A6100", VA = "0x8A6100")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x170002D0")]
	public UseConsumableHere UseConsumableHere
	{
		[Token(Token = "0x6001723")]
		[Address(RVA = "0x8A6110", Offset = "0x8A6110", VA = "0x8A6110", Slot = "5")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6001724")]
		[Address(RVA = "0x8A6118", Offset = "0x8A6118", VA = "0x8A6118", Slot = "6")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170002D1")]
	public bool ReactsToConsumables
	{
		[Token(Token = "0x6001725")]
		[Address(RVA = "0x8A6120", Offset = "0x8A6120", VA = "0x8A6120", Slot = "7")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6001726")]
	[Address(RVA = "0x8A6130", Offset = "0x8A6130", VA = "0x8A6130")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001727")]
	[Address(RVA = "0x8A62EC", Offset = "0x8A62EC", VA = "0x8A62EC")]
	private void Start()
	{
	}

	[Token(Token = "0x6001728")]
	[Address(RVA = "0x8A6708", Offset = "0x8A6708", VA = "0x8A6708")]
	private void Update()
	{
	}

	[Token(Token = "0x6001729")]
	[Address(RVA = "0x8A5F40", Offset = "0x8A5F40", VA = "0x8A5F40")]
	private void OnGrillStateChanged(GrillState oldState, GrillState newState)
	{
	}

	[Token(Token = "0x600172A")]
	[Address(RVA = "0x8A6884", Offset = "0x8A6884", VA = "0x8A6884")]
	[PunRPC]
	private void TurnOvenOnOffRPC(bool newIsOn)
	{
	}

	[Token(Token = "0x600172B")]
	[Address(RVA = "0x8A68AC", Offset = "0x8A68AC", VA = "0x8A68AC")]
	[PunRPC]
	private void OvenButtonTooHotFeedbackRPC()
	{
	}

	[Token(Token = "0x600172C")]
	[Address(RVA = "0x8A6994", Offset = "0x8A6994", VA = "0x8A6994")]
	private void ApplyCreativeModePoweredUp()
	{
	}

	[Token(Token = "0x600172D")]
	[Address(RVA = "0x8A6B2C", Offset = "0x8A6B2C", VA = "0x8A6B2C")]
	private void OnRoundStartOrEnd()
	{
	}

	[Token(Token = "0x600172E")]
	[Address(RVA = "0x8A6B44", Offset = "0x8A6B44", VA = "0x8A6B44")]
	private void OnEndlessModeBreak()
	{
	}

	[Token(Token = "0x600172F")]
	[Address(RVA = "0x8A6B68", Offset = "0x8A6B68", VA = "0x8A6B68")]
	public void TryRemoveIngredient(Grillable grillable)
	{
	}

	[Token(Token = "0x6001730")]
	[Address(RVA = "0x8A6CC8", Offset = "0x8A6CC8", VA = "0x8A6CC8")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6001731")]
	[Address(RVA = "0x8A6FB8", Offset = "0x8A6FB8", VA = "0x8A6FB8")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6001732")]
	[Address(RVA = "0x8A7250", Offset = "0x8A7250", VA = "0x8A7250")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001733")]
	[Address(RVA = "0x8A5D9C", Offset = "0x8A5D9C", VA = "0x8A5D9C")]
	private void OnUnlockedGrill()
	{
	}

	[Token(Token = "0x6001734")]
	[Address(RVA = "0x8A7410", Offset = "0x8A7410", VA = "0x8A7410")]
	[PunRPC]
	private void ActivateOvenPowerUpRPC()
	{
	}

	[Token(Token = "0x6001735")]
	[Address(RVA = "0x8A7438", Offset = "0x8A7438", VA = "0x8A7438", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6001736")]
	[Address(RVA = "0x8A75E8", Offset = "0x8A75E8", VA = "0x8A75E8")]
	public FryingArea()
	{
	}
}
[Token(Token = "0x200034F")]
public class PlayerLoadout : SingleInstanceBehavior<PlayerLoadout>
{
	[Token(Token = "0x4001983")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private CleaverVisuals[] cleavers;

	[Token(Token = "0x4001984")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private CuttingBoard[] cuttingBoards;

	[Token(Token = "0x4001985")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Fridge[] fridges;

	[Token(Token = "0x4001986")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CookingNetworkManager networkManager;

	[Token(Token = "0x4001987")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SaveManager saveManager;

	[Token(Token = "0x4001988")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int lastPlayerPositionIndex;

	[Token(Token = "0x600173A")]
	[Address(RVA = "0x8A78A8", Offset = "0x8A78A8", VA = "0x8A78A8")]
	private void Start()
	{
	}

	[Token(Token = "0x600173B")]
	[Address(RVA = "0x8A7AA4", Offset = "0x8A7AA4", VA = "0x8A7AA4")]
	public void EquipReward(ItemRewardID type)
	{
	}

	[Token(Token = "0x600173C")]
	[Address(RVA = "0x8A8008", Offset = "0x8A8008", VA = "0x8A8008")]
	private void OnNewWorkspace(int index)
	{
	}

	[Token(Token = "0x600173D")]
	[Address(RVA = "0x8A84D4", Offset = "0x8A84D4", VA = "0x8A84D4", Slot = "5")]
	public override void OnDestroy()
	{
	}

	[Token(Token = "0x600173E")]
	[Address(RVA = "0x8A85D4", Offset = "0x8A85D4", VA = "0x8A85D4")]
	public PlayerLoadout()
	{
	}
}
[Token(Token = "0x2000350")]
public class ShowPlayerColor : NetworkedBehaviour
{
	[Token(Token = "0x4001989")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private int playerSlot;

	[Token(Token = "0x400198A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private bool hideDuringRound;

	[Token(Token = "0x400198B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private MaterialPropertyBlock propertyBlock;

	[Token(Token = "0x400198C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private MeshRenderer colorRenderer;

	[Token(Token = "0x400198D")]
	private const string propertyTextureIndex = "_TextureIndex";

	[Token(Token = "0x400198E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private CookingRound cookingRound;

	[Token(Token = "0x600173F")]
	[Address(RVA = "0x8A86C4", Offset = "0x8A86C4", VA = "0x8A86C4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001740")]
	[Address(RVA = "0x8A8748", Offset = "0x8A8748", VA = "0x8A8748")]
	private void Start()
	{
	}

	[Token(Token = "0x6001741")]
	[Address(RVA = "0x8A8A2C", Offset = "0x8A8A2C", VA = "0x8A8A2C")]
	private void UpdateVisibility()
	{
	}

	[Token(Token = "0x6001742")]
	[Address(RVA = "0x8A89A8", Offset = "0x8A89A8", VA = "0x8A89A8")]
	private void UpdateColor(int playerSlotIndex)
	{
	}

	[Token(Token = "0x6001743")]
	[Address(RVA = "0x8A8B2C", Offset = "0x8A8B2C", VA = "0x8A8B2C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001744")]
	[Address(RVA = "0x8A8D48", Offset = "0x8A8D48", VA = "0x8A8D48")]
	public ShowPlayerColor()
	{
	}
}
[Token(Token = "0x2000351")]
public class Sink : NetworkedBehaviour, IPunObservable, IConsumableTarget
{
	[Token(Token = "0x400198F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool isPoweredUp;

	[Token(Token = "0x4001990")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	private bool isLocked;

	[Token(Token = "0x4001991")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private UseConsumableHere useConsumableHere;

	[Token(Token = "0x4001992")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Animator lockAnimator;

	[Token(Token = "0x4001993")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private ParticleSystem unlockParticles;

	[Token(Token = "0x4001994")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float unlockParticlesDelay;

	[Token(Token = "0x4001995")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Collider trigger;

	[Token(Token = "0x4001996")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private ParticleSystem poweredUpParticles;

	[Token(Token = "0x4001997")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private MeshRenderer poweredUpMesh;

	[Token(Token = "0x4001998")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Material regularWaterMaterial;

	[Token(Token = "0x4001999")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[SerializeField]
	private Material poweredUpWaterMaterial;

	[Token(Token = "0x400199A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private MeshRenderer waterRenderer;

	[Token(Token = "0x400199B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private ParticleSystemRenderer[] bubbleParticles;

	[Token(Token = "0x400199C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private Grabbable brush;

	[Token(Token = "0x400199D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private GameObject lid;

	[Token(Token = "0x400199E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private GameObject water;

	[Token(Token = "0x400199F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private ReturnToOriginIfLost brushReturn;

	[Token(Token = "0x40019A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private CookingGameState gameState;

	[Token(Token = "0x40019A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private EndlessMode endlessMode;

	[Token(Token = "0x40019A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private GameObject lockGameObject;

	[Token(Token = "0x170002D2")]
	public bool IsPoweredUp
	{
		[Token(Token = "0x6001745")]
		[Address(RVA = "0x8A8D58", Offset = "0x8A8D58", VA = "0x8A8D58")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001746")]
		[Address(RVA = "0x8A8D60", Offset = "0x8A8D60", VA = "0x8A8D60")]
		set
		{
		}
	}

	[Token(Token = "0x170002D3")]
	public bool IsLocked
	{
		[Token(Token = "0x6001747")]
		[Address(RVA = "0x8A8E6C", Offset = "0x8A8E6C", VA = "0x8A8E6C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001748")]
		[Address(RVA = "0x8A8E74", Offset = "0x8A8E74", VA = "0x8A8E74")]
		set
		{
		}
	}

	[Token(Token = "0x170002D4")]
	public UseConsumableHere UseConsumableHere
	{
		[Token(Token = "0x6001749")]
		[Address(RVA = "0x8A91B4", Offset = "0x8A91B4", VA = "0x8A91B4", Slot = "5")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600174A")]
		[Address(RVA = "0x8A91BC", Offset = "0x8A91BC", VA = "0x8A91BC", Slot = "6")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x170002D5")]
	public bool ReactsToConsumables
	{
		[Token(Token = "0x600174B")]
		[Address(RVA = "0x8A91C4", Offset = "0x8A91C4", VA = "0x8A91C4", Slot = "7")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x600174C")]
	[Address(RVA = "0x8A91D4", Offset = "0x8A91D4", VA = "0x8A91D4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600174D")]
	[Address(RVA = "0x8A926C", Offset = "0x8A926C", VA = "0x8A926C")]
	private void Start()
	{
	}

	[Token(Token = "0x600174E")]
	[Address(RVA = "0x8A94C8", Offset = "0x8A94C8", VA = "0x8A94C8")]
	private void OnGameStateChanged(GameState oldState, GameState newState)
	{
	}

	[Token(Token = "0x600174F")]
	[Address(RVA = "0x8A94F8", Offset = "0x8A94F8", VA = "0x8A94F8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6001750")]
	[Address(RVA = "0x8A9660", Offset = "0x8A9660", VA = "0x8A9660")]
	private void EndSinkPowerUp()
	{
	}

	[Token(Token = "0x6001751")]
	[Address(RVA = "0x8A90B0", Offset = "0x8A90B0", VA = "0x8A90B0")]
	private void OnUnlockedSink()
	{
	}

	[Token(Token = "0x6001752")]
	[Address(RVA = "0x8A9668", Offset = "0x8A9668", VA = "0x8A9668")]
	[PunRPC]
	private void ActivateSinkPowerUpRPC(bool isPoweredUp)
	{
	}

	[Token(Token = "0x6001753")]
	[Address(RVA = "0x8A967C", Offset = "0x8A967C", VA = "0x8A967C", Slot = "4")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x6001754")]
	[Address(RVA = "0x8A97A0", Offset = "0x8A97A0", VA = "0x8A97A0")]
	public Sink()
	{
	}
}
[Token(Token = "0x2000352")]
public class SnapToHanger : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40019A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform myHanger;

	[Token(Token = "0x40019A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ReturnToOriginIfLost returnToOrigin;

	[Token(Token = "0x40019A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Grabbable grabbable;

	[Token(Token = "0x40019A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Rigidbody rigidBody;

	[Token(Token = "0x40019A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool inTrigger;

	[Token(Token = "0x170002D6")]
	public bool IsAttached
	{
		[Token(Token = "0x6001756")]
		[Address(RVA = "0x8A981C", Offset = "0x8A981C", VA = "0x8A981C")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6001757")]
		[Address(RVA = "0x8A9824", Offset = "0x8A9824", VA = "0x8A9824")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x6001758")]
	[Address(RVA = "0x8A9830", Offset = "0x8A9830", VA = "0x8A9830")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001759")]
	[Address(RVA = "0x8A9990", Offset = "0x8A9990", VA = "0x8A9990")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600175A")]
	[Address(RVA = "0x8A9A20", Offset = "0x8A9A20", VA = "0x8A9A20")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600175B")]
	[Address(RVA = "0x8A9AAC", Offset = "0x8A9AAC", VA = "0x8A9AAC")]
	public void OnGrabBegin()
	{
	}

	[Token(Token = "0x600175C")]
	[Address(RVA = "0x8A9AB4", Offset = "0x8A9AB4", VA = "0x8A9AB4")]
	public void OnGrabEnd()
	{
	}

	[Token(Token = "0x600175D")]
	[Address(RVA = "0x8A9B4C", Offset = "0x8A9B4C", VA = "0x8A9B4C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600175E")]
	[Address(RVA = "0x8A9C78", Offset = "0x8A9C78", VA = "0x8A9C78")]
	public SnapToHanger()
	{
	}
}
[Token(Token = "0x2000353")]
public class AssignAnimationClip : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40019AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private AnimationClip animationClip;

	[Token(Token = "0x40019AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Animation anim;

	[Token(Token = "0x600175F")]
	[Address(RVA = "0x8A9C88", Offset = "0x8A9C88", VA = "0x8A9C88")]
	private void playAnimation()
	{
	}

	[Token(Token = "0x6001760")]
	[Address(RVA = "0x8A9D04", Offset = "0x8A9D04", VA = "0x8A9D04")]
	private void Update()
	{
	}

	[Token(Token = "0x6001761")]
	[Address(RVA = "0x8A9D30", Offset = "0x8A9D30", VA = "0x8A9D30")]
	public AssignAnimationClip()
	{
	}
}
[Token(Token = "0x2000354")]
public class AssignMeshRenderer : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40019AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GameObject _hero;

	[Token(Token = "0x40019AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem _ps;

	[Token(Token = "0x40019AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private SkinnedMeshRenderer _heroSkin;

	[Token(Token = "0x6001762")]
	[Address(RVA = "0x8A9D38", Offset = "0x8A9D38", VA = "0x8A9D38")]
	private void Start()
	{
	}

	[Token(Token = "0x6001763")]
	[Address(RVA = "0x8A9E38", Offset = "0x8A9E38", VA = "0x8A9E38")]
	private void Update()
	{
	}

	[Token(Token = "0x6001764")]
	[Address(RVA = "0x8A9E3C", Offset = "0x8A9E3C", VA = "0x8A9E3C")]
	public AssignMeshRenderer()
	{
	}
}
[Token(Token = "0x2000355")]
public class AssignShapePosition : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40019AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem ps;

	[Token(Token = "0x40019B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Transform target;

	[Token(Token = "0x40019B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 source;

	[Token(Token = "0x6001765")]
	[Address(RVA = "0x8A9E44", Offset = "0x8A9E44", VA = "0x8A9E44")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001766")]
	[Address(RVA = "0x8A9ED0", Offset = "0x8A9ED0", VA = "0x8A9ED0")]
	private void Update()
	{
	}

	[Token(Token = "0x6001767")]
	[Address(RVA = "0x8AA0A0", Offset = "0x8AA0A0", VA = "0x8AA0A0")]
	public AssignShapePosition()
	{
	}
}
[Token(Token = "0x2000356")]
public class EmitFromMesh : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40019B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem ps;

	[Token(Token = "0x40019B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem.VelocityOverLifetimeModule velocityModule;

	[Token(Token = "0x40019B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem.EmitParams emitParams;

	[Token(Token = "0x40019B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private Transform target;

	[Token(Token = "0x40019B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	private float distanceSpeedScale;

	[Token(Token = "0x40019B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	[SerializeField]
	private float burstInterval;

	[Token(Token = "0x40019B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private float distance;

	[Token(Token = "0x40019B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private float burstTimer;

	[Token(Token = "0x6001768")]
	[Address(RVA = "0x8AA0A8", Offset = "0x8AA0A8", VA = "0x8AA0A8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001769")]
	[Address(RVA = "0x8AA114", Offset = "0x8AA114", VA = "0x8AA114")]
	private void Update()
	{
	}

	[Token(Token = "0x600176A")]
	[Address(RVA = "0x8AA264", Offset = "0x8AA264", VA = "0x8AA264")]
	private void DoEmit()
	{
	}

	[Token(Token = "0x600176B")]
	[Address(RVA = "0x8AA17C", Offset = "0x8AA17C", VA = "0x8AA17C")]
	private void CheckDistance()
	{
	}

	[Token(Token = "0x600176C")]
	[Address(RVA = "0x8AA24C", Offset = "0x8AA24C", VA = "0x8AA24C")]
	private void SetRadialVelocity()
	{
	}

	[Token(Token = "0x600176D")]
	[Address(RVA = "0x8AA2F4", Offset = "0x8AA2F4", VA = "0x8AA2F4")]
	public void StartEmit()
	{
	}

	[Token(Token = "0x600176E")]
	[Address(RVA = "0x8AA310", Offset = "0x8AA310", VA = "0x8AA310")]
	public void StopEmit()
	{
	}

	[Token(Token = "0x600176F")]
	[Address(RVA = "0x8AA318", Offset = "0x8AA318", VA = "0x8AA318")]
	public EmitFromMesh()
	{
	}
}
[Token(Token = "0x2000357")]
public class EmitFromMeshArray : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40019BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem ps;

	[Token(Token = "0x40019BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private MeshRenderer[] emissionMeshes;

	[Token(Token = "0x6001770")]
	[Address(RVA = "0x8AA320", Offset = "0x8AA320", VA = "0x8AA320")]
	private void Awake()
	{
	}

	[Token(Token = "0x6001771")]
	[Address(RVA = "0x8AA3AC", Offset = "0x8AA3AC", VA = "0x8AA3AC")]
	private void Update()
	{
	}

	[Token(Token = "0x6001772")]
	[Address(RVA = "0x8AA3B0", Offset = "0x8AA3B0", VA = "0x8AA3B0")]
	private void DoEmit()
	{
	}

	[Token(Token = "0x6001773")]
	[Address(RVA = "0x8AA45C", Offset = "0x8AA45C", VA = "0x8AA45C")]
	public EmitFromMeshArray()
	{
	}
}
[Token(Token = "0x2000358")]
public class LookAtObject : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x40019BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform target;

	[Token(Token = "0x6001774")]
	[Address(RVA = "0x8AA464", Offset = "0x8AA464", VA = "0x8AA464")]
	private void Update()
	{
	}

	[Token(Token = "0x6001775")]
	[Address(RVA = "0x8AA48C", Offset = "0x8AA48C", VA = "0x8AA48C")]
	public LookAtObject()
	{
	}
}
[Token(Token = "0x2000359")]
public class SetRotation : UnityEngine.MonoBehaviour
{
	[Token(Token = "0x6001776")]
	[Address(RVA = "0x8AA494", Offset = "0x8AA494", VA = "0x8AA494")]
	private void Start()
	{
	}

	[Token(Token = "0x6001777")]
	[Address(RVA = "0x8AA4F8", Offset = "0x8AA4F8", VA = "0x8AA4F8")]
	public SetRotation()
	{
	}
}
[Token(Token = "0x200035A")]
public abstract class RGVersion
{
	[Token(Token = "0x40019BD")]
	public const string VERSION = "1.13.213183";

	[Token(Token = "0x6001778")]
	[Address(RVA = "0x8AA500", Offset = "0x8AA500", VA = "0x8AA500")]
	protected RGVersion()
	{
	}
}
namespace UnityEngine.UI
{
	[Token(Token = "0x200035B")]
	public class LetterSpacing : BaseMeshEffect
	{
		[Token(Token = "0x40019BE")]
		private const string SupportedTagRegexPattersn = "<b>|</b>|<i>|</i>|<size=.*?>|</size>|<color=.*?>|</color>|<material=.*?>|</material>";

		[Token(Token = "0x40019BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool useRichText;

		[Token(Token = "0x40019C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float m_spacing;

		[Token(Token = "0x170002D7")]
		public float spacing
		{
			[Token(Token = "0x600177A")]
			[Address(RVA = "0x8AA510", Offset = "0x8AA510", VA = "0x8AA510")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600177B")]
			[Address(RVA = "0x8AA518", Offset = "0x8AA518", VA = "0x8AA518")]
			set
			{
			}
		}

		[Token(Token = "0x6001779")]
		[Address(RVA = "0x8AA508", Offset = "0x8AA508", VA = "0x8AA508")]
		protected LetterSpacing()
		{
		}

		[Token(Token = "0x600177C")]
		[Address(RVA = "0x8AA5DC", Offset = "0x8AA5DC", VA = "0x8AA5DC", Slot = "20")]
		public override void ModifyMesh(VertexHelper vh)
		{
		}

		[Token(Token = "0x600177D")]
		[Address(RVA = "0x8AA6A8", Offset = "0x8AA6A8", VA = "0x8AA6A8")]
		public void ModifyVertices(List<UIVertex> verts)
		{
		}

		[Token(Token = "0x600177E")]
		[Address(RVA = "0x8AB15C", Offset = "0x8AB15C", VA = "0x8AB15C")]
		private IEnumerator GetRegexMatchedTagCollection(string line, out int lineLengthWithoutTags)
		{
			return null;
		}
	}
}
namespace cookout.loadsave
{
	[Token(Token = "0x200035C")]
	public interface ISaveGameData
	{
	}
	[Token(Token = "0x200035D")]
	public sealed class LoadSaveGameDataBinder : SerializationBinder
	{
		[Token(Token = "0x600177F")]
		[Address(RVA = "0x8AB4C8", Offset = "0x8AB4C8", VA = "0x8AB4C8", Slot = "5")]
		public override Type BindToType(string assemblyName, string typeName)
		{
			return null;
		}

		[Token(Token = "0x6001780")]
		[Address(RVA = "0x8AB600", Offset = "0x8AB600", VA = "0x8AB600")]
		public LoadSaveGameDataBinder()
		{
		}
	}
	[Token(Token = "0x200035E")]
	public sealed class SaveGameDataPatcher
	{
		[Token(Token = "0x6001781")]
		[Address(RVA = "0x8AB608", Offset = "0x8AB608", VA = "0x8AB608")]
		public bool Patch(ISaveGameData savegame, out ISaveGameData savegamePatched)
		{
			return default(bool);
		}

		[Token(Token = "0x6001782")]
		[Address(RVA = "0x8AB8D8", Offset = "0x8AB8D8", VA = "0x8AB8D8")]
		private cookout.loadsave.v2.SaveGameData PatchInternal(cookout.loadsave.v1.SaveGameData savegame)
		{
			return null;
		}

		[Token(Token = "0x6001783")]
		[Address(RVA = "0x8ABCA8", Offset = "0x8ABCA8", VA = "0x8ABCA8")]
		private cookout.loadsave.v3.SaveGameData PatchInternal(cookout.loadsave.v2.SaveGameData savegame)
		{
			return null;
		}

		[Token(Token = "0x6001784")]
		[Address(RVA = "0x8AC07C", Offset = "0x8AC07C", VA = "0x8AC07C")]
		private cookout.loadsave.v4.SaveGameData PatchInternal(cookout.loadsave.v3.SaveGameData savegame)
		{
			return null;
		}

		[Token(Token = "0x6001785")]
		[Address(RVA = "0x8AC404", Offset = "0x8AC404", VA = "0x8AC404")]
		public SaveGameDataPatcher()
		{
		}
	}
}
namespace cookout.loadsave.v4
{
	[Serializable]
	[Token(Token = "0x2000360")]
	public class SaveGameData : ISaveGameData
	{
		[Token(Token = "0x40019C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MapProgression.Rank[] cupRanks;

		[Token(Token = "0x40019C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int[] cupStars;

		[Token(Token = "0x40019C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool[] cupMaxRankedInMP;

		[Token(Token = "0x40019C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int[] consumableCount;

		[Token(Token = "0x40019C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool[] consumablesUnlocked;

		[Token(Token = "0x40019C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int coins;

		[Token(Token = "0x40019C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int accumulatedCoins;

		[Token(Token = "0x40019CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int endlessModeHighScore;

		[Token(Token = "0x40019CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<int> items;

		[Token(Token = "0x40019CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ItemRewardID currentCleaver;

		[Token(Token = "0x40019CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public ItemRewardID currentCuttingBoard;

		[Token(Token = "0x40019CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ItemRewardID currentFridge;

		[Token(Token = "0x40019CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int[] storedLoadoutSlots;

		[Token(Token = "0x40019D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<CookoutUserId> blockedPlayers;

		[Token(Token = "0x40019D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool isLeftHanded;

		[Token(Token = "0x40019D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		public bool autoHoldActive;

		[Token(Token = "0x40019D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		public bool retriedALevel;

		[Token(Token = "0x40019D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public List<string> recipesUnlocked;

		[Token(Token = "0x40019D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public List<CustomerType> creativeModeCustomersUnlocked;

		[Token(Token = "0x40019D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool hasSwitchedCreativeModeIngredients;

		[Token(Token = "0x40019D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public int serveCountCreativeMode;

		[Token(Token = "0x40019D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool hasTriedCreativeMode;

		[Token(Token = "0x40019D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public List<string> blockedPlayerNames;

		[Token(Token = "0x40019DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public int oculusAvatarVisualType;

		[Token(Token = "0x40019DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public CookoutAvatarVisualType cookoutAvatarVisualType;

		[Token(Token = "0x40019DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA5")]
		public AvatarType avatarType;

		[Token(Token = "0x40019DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA6")]
		public AvatarHatType cookoutAvatarHatType;

		[Token(Token = "0x40019DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA7")]
		public AvatarBodyType cookoutAvatarBodyType;

		[Token(Token = "0x40019DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public int cookoutAvatarHeadMaterialIndex;

		[Token(Token = "0x40019E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public AvatarHandMaterial cookoutAvatarHandMaterial;

		[Token(Token = "0x40019E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public List<AvatarHatType> unlockedHats;

		[Token(Token = "0x40019E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public List<HeadUnlockData> unlockedHeads;

		[Token(Token = "0x40019E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public List<AvatarBodyType> unlockedBodies;

		[Token(Token = "0x40019E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public List<AvatarHandMaterial> unlockedHandMaterials;

		[Token(Token = "0x40019E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public List<AvatarHatType> boughtHats;

		[Token(Token = "0x40019E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public List<HeadUnlockData> boughtHeads;

		[Token(Token = "0x40019E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public List<AvatarBodyType> boughtBodies;

		[Token(Token = "0x40019E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public List<AvatarHandMaterial> boughtHandMaterials;

		[Token(Token = "0x40019E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public bool[] unlockedAchievements;

		[Token(Token = "0x40019EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public int rabbitsServed;

		[Token(Token = "0x40019EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public int stolenIngredients;

		[Token(Token = "0x40019EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public int dishesWashed;

		[Token(Token = "0x40019ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		public int grilledIngredients;

		[Token(Token = "0x40019EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public int botOvercharged;

		[Token(Token = "0x40019EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public int burntIngredients;

		[Token(Token = "0x40019F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public int coinsSpent;

		[Token(Token = "0x40019F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public int customersServed;

		[Token(Token = "0x40019F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public List<AvatarHatType> newHatsAvailable;

		[Token(Token = "0x40019F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public List<HeadUnlockData> newHeadsAvailable;

		[Token(Token = "0x40019F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public List<AvatarBodyType> newBodiesAvailable;

		[Token(Token = "0x40019F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public List<AvatarHandMaterial> newHandsAvailable;

		[Token(Token = "0x40019F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public bool hasTriedOculusAvatar;

		[Token(Token = "0x6001789")]
		[Address(RVA = "0x8AC3FC", Offset = "0x8AC3FC", VA = "0x8AC3FC")]
		public SaveGameData()
		{
		}
	}
}
namespace cookout.loadsave.v3
{
	[Serializable]
	[Token(Token = "0x2000361")]
	public class SaveGameData : ISaveGameData
	{
		[Token(Token = "0x40019F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MapProgression.Rank[] cupRanks;

		[Token(Token = "0x40019F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int[] cupStars;

		[Token(Token = "0x40019F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool[] cupMaxRankedInMP;

		[Token(Token = "0x40019FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int[] consumableCount;

		[Token(Token = "0x40019FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool[] consumablesUnlocked;

		[Token(Token = "0x40019FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int coins;

		[Token(Token = "0x40019FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int accumulatedCoins;

		[Token(Token = "0x40019FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int endlessModeHighScore;

		[Token(Token = "0x40019FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<int> items;

		[Token(Token = "0x4001A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ItemRewardID currentCleaver;

		[Token(Token = "0x4001A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public ItemRewardID currentCuttingBoard;

		[Token(Token = "0x4001A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ItemRewardID currentFridge;

		[Token(Token = "0x4001A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int[] storedLoadoutSlots;

		[Token(Token = "0x4001A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<CookoutUserId> blockedPlayers;

		[Token(Token = "0x4001A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool isLeftHanded;

		[Token(Token = "0x4001A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		public bool autoHoldActive;

		[Token(Token = "0x4001A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		public bool retriedALevel;

		[Token(Token = "0x4001A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public List<string> recipesUnlocked;

		[Token(Token = "0x4001A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public List<CustomerType> creativeModeCustomersUnlocked;

		[Token(Token = "0x4001A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool hasSwitchedCreativeModeIngredients;

		[Token(Token = "0x4001A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public int serveCountCreativeMode;

		[Token(Token = "0x4001A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool hasTriedCreativeMode;

		[Token(Token = "0x4001A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public List<string> blockedPlayerNames;

		[Token(Token = "0x4001A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public int oculusAvatarVisualType;

		[Token(Token = "0x4001A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public CookoutAvatarVisualType cookoutAvatarVisualType;

		[Token(Token = "0x4001A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA5")]
		public AvatarType avatarType;

		[Token(Token = "0x4001A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA6")]
		public AvatarHatType cookoutAvatarHatType;

		[Token(Token = "0x4001A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA7")]
		public AvatarBodyType cookoutAvatarBodyType;

		[Token(Token = "0x4001A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public int cookoutAvatarHeadMaterialIndex;

		[Token(Token = "0x4001A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public AvatarHandMaterial cookoutAvatarHandMaterial;

		[Token(Token = "0x4001A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public List<AvatarHatType> unlockedHats;

		[Token(Token = "0x4001A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public List<HeadUnlockData> unlockedHeads;

		[Token(Token = "0x4001A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public List<AvatarBodyType> unlockedBodies;

		[Token(Token = "0x4001A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public List<AvatarHandMaterial> unlockedHandMaterials;

		[Token(Token = "0x4001A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public List<AvatarHatType> boughtHats;

		[Token(Token = "0x4001A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public List<HeadUnlockData> boughtHeads;

		[Token(Token = "0x4001A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public List<AvatarBodyType> boughtBodies;

		[Token(Token = "0x4001A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public List<AvatarHandMaterial> boughtHandMaterials;

		[Token(Token = "0x4001A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public bool[] unlockedAchievements;

		[Token(Token = "0x4001A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public int rabbitsServed;

		[Token(Token = "0x4001A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public int stolenIngredients;

		[Token(Token = "0x4001A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public int dishesWashed;

		[Token(Token = "0x4001A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		public int grilledIngredients;

		[Token(Token = "0x4001A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public int botOvercharged;

		[Token(Token = "0x4001A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public int burntIngredients;

		[Token(Token = "0x4001A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public int coinsSpent;

		[Token(Token = "0x4001A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public int customersServed;

		[Token(Token = "0x600178A")]
		[Address(RVA = "0x8AC3F4", Offset = "0x8AC3F4", VA = "0x8AC3F4")]
		public SaveGameData()
		{
		}
	}
}
namespace cookout.loadsave.v2
{
	[Serializable]
	[Token(Token = "0x2000362")]
	public class SaveGameData : ISaveGameData
	{
		[Token(Token = "0x4001A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MapProgression.Rank[] cupRanks;

		[Token(Token = "0x4001A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int[] cupStars;

		[Token(Token = "0x4001A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool[] cupMaxRankedInMP;

		[Token(Token = "0x4001A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int[] consumableCount;

		[Token(Token = "0x4001A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool[] consumablesUnlocked;

		[Token(Token = "0x4001A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int coins;

		[Token(Token = "0x4001A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int accumulatedCoins;

		[Token(Token = "0x4001A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int endlessModeHighScore;

		[Token(Token = "0x4001A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<int> items;

		[Token(Token = "0x4001A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ItemRewardID currentCleaver;

		[Token(Token = "0x4001A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public ItemRewardID currentCuttingBoard;

		[Token(Token = "0x4001A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ItemRewardID currentFridge;

		[Token(Token = "0x4001A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int[] storedLoadoutSlots;

		[Token(Token = "0x4001A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<CookoutUserId> blockedPlayers;

		[Token(Token = "0x4001A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool isLeftHanded;

		[Token(Token = "0x4001A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		public bool autoHoldActive;

		[Token(Token = "0x4001A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		public bool retriedALevel;

		[Token(Token = "0x4001A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public List<string> recipesUnlocked;

		[Token(Token = "0x4001A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public List<CustomerType> creativeModeCustomersUnlocked;

		[Token(Token = "0x4001A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool hasSwitchedCreativeModeIngredients;

		[Token(Token = "0x4001A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public int serveCountCreativeMode;

		[Token(Token = "0x4001A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool hasTriedCreativeMode;

		[Token(Token = "0x4001A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public List<string> blockedPlayerNames;

		[Token(Token = "0x4001A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public int oculusAvatarVisualType;

		[Token(Token = "0x4001A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public CookoutAvatarVisualType cookoutAvatarVisualType;

		[Token(Token = "0x4001A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA5")]
		public AvatarType avatarType;

		[Token(Token = "0x600178B")]
		[Address(RVA = "0x8AC3EC", Offset = "0x8AC3EC", VA = "0x8AC3EC")]
		public SaveGameData()
		{
		}
	}
}
namespace cookout.loadsave.v1
{
	[Serializable]
	[Token(Token = "0x2000363")]
	public class SaveGameData : ISaveGameData
	{
		[Token(Token = "0x4001A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public MapProgression.Rank[] cupRanks;

		[Token(Token = "0x4001A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int[] cupStars;

		[Token(Token = "0x4001A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool[] cupMaxRankedInMP;

		[Token(Token = "0x4001A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int[] consumableCount;

		[Token(Token = "0x4001A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool[] consumablesUnlocked;

		[Token(Token = "0x4001A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int coins;

		[Token(Token = "0x4001A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int accumulatedCoins;

		[Token(Token = "0x4001A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int endlessModeHighScore;

		[Token(Token = "0x4001A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<int> items;

		[Token(Token = "0x4001A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ItemRewardID currentCleaver;

		[Token(Token = "0x4001A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public ItemRewardID currentCuttingBoard;

		[Token(Token = "0x4001A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ItemRewardID currentFridge;

		[Token(Token = "0x4001A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int[] StoredLoadoutSlots;

		[Token(Token = "0x4001A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<long> blockedPlayers;

		[Token(Token = "0x4001A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool isLeftHanded;

		[Token(Token = "0x4001A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		public bool autoHoldActive;

		[Token(Token = "0x4001A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		public bool retriedALevel;

		[Token(Token = "0x4001A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public List<string> recipesUnlocked;

		[Token(Token = "0x4001A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public List<CustomerType> creativeModeCustomersUnlocked;

		[Token(Token = "0x4001A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool hasSwitchedCreativeModeIngredients;

		[Token(Token = "0x4001A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public int serveCountCreativeMode;

		[Token(Token = "0x4001A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool hasTriedCreativeMode;

		[Token(Token = "0x600178C")]
		[Address(RVA = "0x8AC490", Offset = "0x8AC490", VA = "0x8AC490")]
		public SaveGameData()
		{
		}
	}
}
namespace cookout.matchmaking
{
	[Token(Token = "0x2000364")]
	public sealed class MatchmakingAlgorithm
	{
		[Token(Token = "0x4001A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IList<MatchmakingRule> rules;

		[Token(Token = "0x600178D")]
		[Address(RVA = "0x8AC498", Offset = "0x8AC498", VA = "0x8AC498")]
		public MatchmakingAlgorithm(IList<MatchmakingRule> rules)
		{
		}

		[Token(Token = "0x600178E")]
		[Address(RVA = "0x8AC4C0", Offset = "0x8AC4C0", VA = "0x8AC4C0")]
		public IList<MatchmakingTicket> Calculate(MatchmakingTicket playerTicket, IList<MatchmakingTicket> roomTicketCandidates)
		{
			return null;
		}
	}
	[Token(Token = "0x2000365")]
	public sealed class MatchmakingConfig
	{
		[Token(Token = "0x4001A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int versionMajor;

		[Token(Token = "0x4001A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int versionMinor;

		[Token(Token = "0x4001A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int roomVisitCooldownSeconds;

		[Token(Token = "0x4001A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int ruleWeightRoomIntent;

		[Token(Token = "0x4001A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int ruleWeightPlayerProgression;

		[Token(Token = "0x4001A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int ruleWeightPlayerCount;

		[Token(Token = "0x4001A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int ruleWeightFriends;

		[Token(Token = "0x4001A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public RoomIntent[] roomIntentOrder;

		[Token(Token = "0x4001A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int[] roomIntentDistance;

		[Token(Token = "0x600178F")]
		[Address(RVA = "0x8AC980", Offset = "0x8AC980", VA = "0x8AC980")]
		public MatchmakingConfig()
		{
		}
	}
	[Token(Token = "0x2000366")]
	public abstract class MatchmakingRule
	{
		[Token(Token = "0x6001790")]
		public abstract bool IsValid(MatchmakingTicket playerTicket, MatchmakingTicket roomTicket);

		[Token(Token = "0x6001791")]
		public abstract int CalcError(MatchmakingTicket playerTicket, MatchmakingTicket roomTicket);

		[Token(Token = "0x6001792")]
		[Address(RVA = "0x8AC988", Offset = "0x8AC988", VA = "0x8AC988")]
		protected MatchmakingRule()
		{
		}
	}
	[Token(Token = "0x2000367")]
	public sealed class MatchmakingRuleVersion : MatchmakingRule
	{
		[Token(Token = "0x6001793")]
		[Address(RVA = "0x8AC990", Offset = "0x8AC990", VA = "0x8AC990", Slot = "4")]
		public override bool IsValid(MatchmakingTicket playerTicket, MatchmakingTicket roomTicket)
		{
			return default(bool);
		}

		[Token(Token = "0x6001794")]
		[Address(RVA = "0x8AC9D0", Offset = "0x8AC9D0", VA = "0x8AC9D0", Slot = "5")]
		public override int CalcError(MatchmakingTicket playerTicket, MatchmakingTicket roomTicket)
		{
			return default(int);
		}

		[Token(Token = "0x6001795")]
		[Address(RVA = "0x8AC9D8", Offset = "0x8AC9D8", VA = "0x8AC9D8")]
		public MatchmakingRuleVersion()
		{
		}
	}
	[Token(Token = "0x2000368")]
	public sealed class MatchmakingRuleRoomVisibilityPublic : MatchmakingRule
	{
		[Token(Token = "0x6001796")]
		[Address(RVA = "0x8AC9E0", Offset = "0x8AC9E0", VA = "0x8AC9E0", Slot = "4")]
		public override bool IsValid(MatchmakingTicket playerTicket, MatchmakingTicket roomTicket)
		{
			return default(bool);
		}

		[Token(Token = "0x6001797")]
		[Address(RVA = "0x8ACA00", Offset = "0x8ACA00", VA = "0x8ACA00", Slot = "5")]
		public override int CalcError(MatchmakingTicket playerTicket, MatchmakingTicket roomTicket)
		{
			return default(int);
		}

		[Token(Token = "0x6001798")]
		[Address(RVA = "0x8ACA08", Offset = "0x8ACA08", VA = "0x8ACA08")]
		public MatchmakingRuleRoomVisibilityPublic()
		{
		}
	}
	[Token(Token = "0x2000369")]
	public sealed class MatchmakingRuleRoomVisibilityFriends : MatchmakingRule
	{
		[Token(Token = "0x4001A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IReadOnlyList<CookoutUserId> userIdFriends;

		[Token(Token = "0x6001799")]
		[Address(RVA = "0x8ACA10", Offset = "0x8ACA10", VA = "0x8ACA10")]
		public MatchmakingRuleRoomVisibilityFriends(IReadOnlyList<CookoutUserId> userIdFriends)
		{
		}

		[Token(Token = "0x600179A")]
		[Address(RVA = "0x8ACA38", Offset = "0x8ACA38", VA = "0x8ACA38", Slot = "4")]
		public override bool IsValid(MatchmakingTicket playerTicket, MatchmakingTicket roomTicket)
		{
			return default(bool);
		}

		[Token(Token = "0x600179B")]
		[Address(RVA = "0x8ACB00", Offset = "0x8ACB00", VA = "0x8ACB00", Slot = "5")]
		public override int CalcError(MatchmakingTicket playerTicket, MatchmakingTicket roomTicket)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200036A")]
	public sealed class MatchmakingRuleRoomPublicOrFriends : MatchmakingRule
	{
		[Token(Token = "0x4001A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IReadOnlyList<CookoutUserId> userIdFriends;

		[Token(Token = "0x4001A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly int weight;

		[Token(Token = "0x600179D")]
		[Address(RVA = "0x8ACB68", Offset = "0x8ACB68", VA = "0x8ACB68")]
		public MatchmakingRuleRoomPublicOrFriends(IReadOnlyList<CookoutUserId> userIdFriends, int weight)
		{
		}

		[Token(Token = "0x600179E")]
		[Address(RVA = "0x8ACB98", Offset = "0x8ACB98", VA = "0x8ACB98", Slot = "4")]
		public override bool IsValid(MatchmakingTicket playerTicket, MatchmakingTicket roomTicket)
		{
			return default(bool);
		}

		[Token(Token = "0x600179F")]
		[Address(RVA = "0x8ACC70", Offset = "0x8ACC70", VA = "0x8ACC70", Slot = "5")]
		public override int CalcError(MatchmakingTicket playerTicket, MatchmakingTicket roomTicket)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200036B")]
	public sealed class MatchmakingRuleBlockList : MatchmakingRule
	{
		[Token(Token = "0x60017A2")]
		[Address(RVA = "0x8ACDF0", Offset = "0x8ACDF0", VA = "0x8ACDF0", Slot = "4")]
		public override bool IsValid(MatchmakingTicket playerTicket, MatchmakingTicket roomTicket)
		{
			return default(bool);
		}

		[Token(Token = "0x60017A3")]
		[Address(RVA = "0x8ACF2C", Offset = "0x8ACF2C", VA = "0x8ACF2C", Slot = "5")]
		public override int CalcError(MatchmakingTicket playerTicket, MatchmakingTicket roomTicket)
		{
			return default(int);
		}

		[Token(Token = "0x60017A4")]
		[Address(RVA = "0x8ACF34", Offset = "0x8ACF34", VA = "0x8ACF34")]
		public MatchmakingRuleBlockList()
		{
		}
	}
	[Token(Token = "0x200036D")]
	public sealed class MatchmakingRuleRoomOwnerIsSet : MatchmakingRule
	{
		[Token(Token = "0x60017A7")]
		[Address(RVA = "0x8ACFA8", Offset = "0x8ACFA8", VA = "0x8ACFA8", Slot = "4")]
		public override bool IsValid(MatchmakingTicket playerTicket, MatchmakingTicket roomTicket)
		{
			return default(bool);
		}

		[Token(Token = "0x60017A8")]
		[Address(RVA = "0x8ACFC8", Offset = "0x8ACFC8", VA = "0x8ACFC8", Slot = "5")]
		public override int CalcError(MatchmakingTicket playerTicket, MatchmakingTicket roomTicket)
		{
			return default(int);
		}

		[Token(Token = "0x60017A9")]
		[Address(RVA = "0x8ACFD0", Offset = "0x8ACFD0", VA = "0x8ACFD0")]
		public MatchmakingRuleRoomOwnerIsSet()
		{
		}
	}
	[Token(Token = "0x200036E")]
	public sealed class MatchmakingRuleRoomVisitCooldown : MatchmakingRule
	{
		[Token(Token = "0x4001A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IReadOnlyList<string> visitRoomCode;

		[Token(Token = "0x60017AA")]
		[Address(RVA = "0x8ACFD8", Offset = "0x8ACFD8", VA = "0x8ACFD8")]
		public MatchmakingRuleRoomVisitCooldown(IReadOnlyList<string> visitRoomCode)
		{
		}

		[Token(Token = "0x60017AB")]
		[Address(RVA = "0x8AD000", Offset = "0x8AD000", VA = "0x8AD000", Slot = "4")]
		public override bool IsValid(MatchmakingTicket playerTicket, MatchmakingTicket roomTicket)
		{
			return default(bool);
		}

		[Token(Token = "0x60017AC")]
		[Address(RVA = "0x8AD064", Offset = "0x8AD064", VA = "0x8AD064", Slot = "5")]
		public override int CalcError(MatchmakingTicket playerTicket, MatchmakingTicket roomTicket)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200036F")]
	public sealed class MatchmakingRuleRoomIntentSoft : MatchmakingRule
	{
		[Token(Token = "0x4001A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly int weight;

		[Token(Token = "0x4001A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly RoomIntent[] roomIntentOrder;

		[Token(Token = "0x4001A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly int[] roomIntentDistance;

		[Token(Token = "0x60017AD")]
		[Address(RVA = "0x8AD06C", Offset = "0x8AD06C", VA = "0x8AD06C")]
		public MatchmakingRuleRoomIntentSoft(int weight, RoomIntent[] roomIntentOrder, int[] roomIntentDistance)
		{
		}

		[Token(Token = "0x60017AE")]
		[Address(RVA = "0x8AD0A8", Offset = "0x8AD0A8", VA = "0x8AD0A8", Slot = "4")]
		public override bool IsValid(MatchmakingTicket playerTicket, MatchmakingTicket roomTicket)
		{
			return default(bool);
		}

		[Token(Token = "0x60017AF")]
		[Address(RVA = "0x8AD0B0", Offset = "0x8AD0B0", VA = "0x8AD0B0", Slot = "5")]
		public override int CalcError(MatchmakingTicket playerTicket, MatchmakingTicket roomTicket)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000370")]
	public sealed class MatchmakingRuleRoomIntentHard : MatchmakingRule
	{
		[Token(Token = "0x4001A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IReadOnlyList<bool> roomIntent;

		[Token(Token = "0x60017B0")]
		[Address(RVA = "0x8AD198", Offset = "0x8AD198", VA = "0x8AD198")]
		public MatchmakingRuleRoomIntentHard(params bool[] roomIntent)
		{
		}

		[Token(Token = "0x60017B1")]
		[Address(RVA = "0x8AD1C0", Offset = "0x8AD1C0", VA = "0x8AD1C0", Slot = "4")]
		public override bool IsValid(MatchmakingTicket playerTicket, MatchmakingTicket roomTicket)
		{
			return default(bool);
		}

		[Token(Token = "0x60017B2")]
		[Address(RVA = "0x8AD270", Offset = "0x8AD270", VA = "0x8AD270", Slot = "5")]
		public override int CalcError(MatchmakingTicket playerTicket, MatchmakingTicket roomTicket)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000371")]
	public sealed class MatchmakingRulePlayerProgression : MatchmakingRule
	{
		[Token(Token = "0x4001A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly int weight;

		[Token(Token = "0x60017B3")]
		[Address(RVA = "0x8AD278", Offset = "0x8AD278", VA = "0x8AD278")]
		public MatchmakingRulePlayerProgression(int weight)
		{
		}

		[Token(Token = "0x60017B4")]
		[Address(RVA = "0x8AD2A0", Offset = "0x8AD2A0", VA = "0x8AD2A0", Slot = "4")]
		public override bool IsValid(MatchmakingTicket playerTicket, MatchmakingTicket roomTicket)
		{
			return default(bool);
		}

		[Token(Token = "0x60017B5")]
		[Address(RVA = "0x8AD2A8", Offset = "0x8AD2A8", VA = "0x8AD2A8", Slot = "5")]
		public override int CalcError(MatchmakingTicket playerTicket, MatchmakingTicket roomTicket)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000372")]
	public sealed class MatchmakingRulePlayerCount : MatchmakingRule
	{
		[Token(Token = "0x4001A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly int weight;

		[Token(Token = "0x60017B6")]
		[Address(RVA = "0x8AD32C", Offset = "0x8AD32C", VA = "0x8AD32C")]
		public MatchmakingRulePlayerCount(int weight)
		{
		}

		[Token(Token = "0x60017B7")]
		[Address(RVA = "0x8AD354", Offset = "0x8AD354", VA = "0x8AD354", Slot = "4")]
		public override bool IsValid(MatchmakingTicket playerTicket, MatchmakingTicket roomTicket)
		{
			return default(bool);
		}

		[Token(Token = "0x60017B8")]
		[Address(RVA = "0x8AD388", Offset = "0x8AD388", VA = "0x8AD388", Slot = "5")]
		public override int CalcError(MatchmakingTicket playerTicket, MatchmakingTicket roomTicket)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000373")]
	public sealed class MatchmakingTicket
	{
		[Token(Token = "0x4001A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly RoomVersion roomVersion;

		[Token(Token = "0x4001A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly string roomCode;

		[Token(Token = "0x4001A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly string roomOwner;

		[Token(Token = "0x4001A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly RoomVisibility roomVisibility;

		[Token(Token = "0x4001A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public readonly RoomIntent roomIntent;

		[Token(Token = "0x4001A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public readonly int roomPlayerProgression;

		[Token(Token = "0x4001A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public readonly int roomSelectedTown;

		[Token(Token = "0x4001A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly int roomPlayerCount;

		[Token(Token = "0x4001A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public readonly int roomPlayerCountMax;

		[Token(Token = "0x4001A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public readonly CookoutUserId[] playerIDList;

		[Token(Token = "0x4001A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public readonly CookoutUserId[] blockIDList;

		[Token(Token = "0x4001A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public readonly string[] playerNameList;

		[Token(Token = "0x4001A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public readonly string[] blockNameList;

		[Token(Token = "0x60017B9")]
		[Address(RVA = "0x8AD3C0", Offset = "0x8AD3C0", VA = "0x8AD3C0")]
		public MatchmakingTicket(RoomVersion roomVersion, string roomCode, string roomOwner, RoomVisibility roomVisibility, RoomIntent roomIntent, int roomPlayerProgression, int roomPlayerCount, int roomPlayerCountMax, CookoutUserId[] playerIDList, CookoutUserId[] blockIDList, string[] playerNameList, string[] blockNameList, int roomSelectedTown)
		{
		}
	}
}
namespace RGCommon
{
	[Token(Token = "0x2000374")]
	public static class SynthesizedAudio
	{
		[Token(Token = "0x2000375")]
		private abstract class Generator
		{
			[Token(Token = "0x4001A79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public readonly float frequency;

			[Token(Token = "0x4001A7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public readonly float amplitude;

			[Token(Token = "0x4001A7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			protected int position;

			[Token(Token = "0x60017BB")]
			[Address(RVA = "0x8AD684", Offset = "0x8AD684", VA = "0x8AD684")]
			public Generator(float frequency, float amplitude)
			{
			}

			[Token(Token = "0x60017BC")]
			public abstract void OnAudioRead(float[] data);

			[Token(Token = "0x60017BD")]
			[Address(RVA = "0x8AD6B0", Offset = "0x8AD6B0", VA = "0x8AD6B0")]
			public void OnAudioSetPosition(int newPosition)
			{
			}
		}

		[Token(Token = "0x2000376")]
		private class SineGenerator : Generator
		{
			[Token(Token = "0x60017BE")]
			[Address(RVA = "0x8AD658", Offset = "0x8AD658", VA = "0x8AD658")]
			public SineGenerator(float frequency, float amplitude)
			{
			}

			[Token(Token = "0x60017BF")]
			[Address(RVA = "0x8AD6B8", Offset = "0x8AD6B8", VA = "0x8AD6B8", Slot = "4")]
			public override void OnAudioRead(float[] data)
			{
			}
		}

		[Token(Token = "0x4001A78")]
		private const int sampleRate = 44100;

		[Token(Token = "0x60017BA")]
		[Address(RVA = "0x8AD45C", Offset = "0x8AD45C", VA = "0x8AD45C")]
		public static AudioClip GenerateSineBeep(float frequency, float amplitude, float lengthInSeconds)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000377")]
	public class BuildInformation
	{
		[Token(Token = "0x4001A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string platform;

		[Token(Token = "0x4001A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string versionString;

		[Token(Token = "0x4001A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int[] versionArray;

		[Token(Token = "0x4001A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int buildNumber;

		[Token(Token = "0x4001A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool release;

		[Token(Token = "0x4001A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool debug;

		[Token(Token = "0x4001A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string targetDirectory;

		[Token(Token = "0x4001A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool loaded;

		[Token(Token = "0x4001A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static BuildInformation instance;

		[Token(Token = "0x60017C0")]
		[Address(RVA = "0x8AD744", Offset = "0x8AD744", VA = "0x8AD744", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60017C1")]
		[Address(RVA = "0x8AD74C", Offset = "0x8AD74C", VA = "0x8AD74C")]
		public static BuildInformation GetInstance()
		{
			return null;
		}

		[Token(Token = "0x60017C2")]
		[Address(RVA = "0x8AD9A8", Offset = "0x8AD9A8", VA = "0x8AD9A8")]
		public int GetAndroidVersionCode()
		{
			return default(int);
		}

		[Token(Token = "0x60017C3")]
		[Address(RVA = "0x8ADA00", Offset = "0x8ADA00", VA = "0x8ADA00")]
		public BuildInformation()
		{
		}
	}
	[Token(Token = "0x2000378")]
	public class VersionDisplay : UnityEngine.MonoBehaviour
	{
		[Token(Token = "0x60017C4")]
		[Address(RVA = "0x8ADA08", Offset = "0x8ADA08", VA = "0x8ADA08")]
		private void Start()
		{
		}

		[Token(Token = "0x60017C5")]
		[Address(RVA = "0x8ADC50", Offset = "0x8ADC50", VA = "0x8ADC50")]
		public VersionDisplay()
		{
		}
	}
	[Token(Token = "0x2000379")]
	public static class VersionInformation
	{
		[Token(Token = "0x170002D8")]
		public static string Version
		{
			[Token(Token = "0x60017C6")]
			[Address(RVA = "0x8ADC00", Offset = "0x8ADC00", VA = "0x8ADC00")]
			get
			{
				return null;
			}
		}
	}
	[Token(Token = "0x200037A")]
	public static class BestMatch
	{
		[Token(Token = "0x60017C7")]
		public static void UpdateIfGreater<T>(ref T currentBest, ref float bestValue, T candidate, float candidateValue)
		{
		}

		[Token(Token = "0x60017C8")]
		public static void UpdateIfLess<T>(ref T currentBest, ref float bestValue, T candidate, float candidateValue)
		{
		}
	}
	[Token(Token = "0x200037B")]
	public static class Collections
	{
		[Token(Token = "0x60017C9")]
		public static void Shuffle<T>(T[] values)
		{
		}

		[Token(Token = "0x60017CA")]
		public static void Shuffle<T>(List<T> values)
		{
		}
	}
	[Token(Token = "0x200037C")]
	public class CSVTable
	{
		[Token(Token = "0x200037D")]
		public struct Row
		{
			[Token(Token = "0x4001A8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int index;

			[Token(Token = "0x4001A8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private Dictionary<string, int> headerIndexes;

			[Token(Token = "0x4001A8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private string[] columns;

			[Token(Token = "0x170002DB")]
			public int Count
			{
				[Token(Token = "0x60017E3")]
				[Address(RVA = "0x8AF4C8", Offset = "0x8AF4C8", VA = "0x8AF4C8")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x60017D6")]
			[Address(RVA = "0x8AE34C", Offset = "0x8AE34C", VA = "0x8AE34C")]
			internal Row(int index, Dictionary<string, int> headerIndexes, string[] columns)
			{
			}

			[Token(Token = "0x60017D7")]
			[Address(RVA = "0x8AED84", Offset = "0x8AED84", VA = "0x8AED84")]
			private void ValidateHeader(string header)
			{
			}

			[Token(Token = "0x60017D8")]
			[Address(RVA = "0x8AEFC0", Offset = "0x8AEFC0", VA = "0x8AEFC0")]
			private void ValidateIndex(int i)
			{
			}

			[Token(Token = "0x60017D9")]
			[Address(RVA = "0x8AF1F8", Offset = "0x8AF1F8", VA = "0x8AF1F8")]
			public bool HasValue(int i)
			{
				return default(bool);
			}

			[Token(Token = "0x60017DA")]
			[Address(RVA = "0x8AF24C", Offset = "0x8AF24C", VA = "0x8AF24C")]
			public bool NotEmpty(string header)
			{
				return default(bool);
			}

			[Token(Token = "0x60017DB")]
			[Address(RVA = "0x8AF2BC", Offset = "0x8AF2BC", VA = "0x8AF2BC")]
			public string GetColumn(int i)
			{
				return null;
			}

			[Token(Token = "0x60017DC")]
			[Address(RVA = "0x8AF300", Offset = "0x8AF300", VA = "0x8AF300")]
			public string GetColumn(string header)
			{
				return null;
			}

			[Token(Token = "0x60017DD")]
			[Address(RVA = "0x8AF370", Offset = "0x8AF370", VA = "0x8AF370")]
			public int GetColumnInt(string header)
			{
				return default(int);
			}

			[Token(Token = "0x60017DE")]
			[Address(RVA = "0x8AF384", Offset = "0x8AF384", VA = "0x8AF384")]
			public int GetColumnInt(int i)
			{
				return default(int);
			}

			[Token(Token = "0x60017DF")]
			[Address(RVA = "0x8AF398", Offset = "0x8AF398", VA = "0x8AF398")]
			public float GetColumnFloat(string header)
			{
				return default(float);
			}

			[Token(Token = "0x60017E0")]
			[Address(RVA = "0x8AF3AC", Offset = "0x8AF3AC", VA = "0x8AF3AC")]
			public float GetColumnFloat(int i)
			{
				return default(float);
			}

			[Token(Token = "0x60017E1")]
			[Address(RVA = "0x8AF3C0", Offset = "0x8AF3C0", VA = "0x8AF3C0")]
			public bool GetColumnBool(string header)
			{
				return default(bool);
			}

			[Token(Token = "0x60017E2")]
			[Address(RVA = "0x8AF424", Offset = "0x8AF424", VA = "0x8AF424")]
			public bool GetColumnBool(int i)
			{
				return default(bool);
			}

			[Token(Token = "0x60017E4")]
			[Address(RVA = "0x8AF4E4", Offset = "0x8AF4E4", VA = "0x8AF4E4")]
			public int Index()
			{
				return default(int);
			}

			[Token(Token = "0x60017E5")]
			[Address(RVA = "0x8AF4EC", Offset = "0x8AF4EC", VA = "0x8AF4EC", Slot = "3")]
			public override string ToString()
			{
				return null;
			}
		}

		[Token(Token = "0x4001A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string path;

		[Token(Token = "0x4001A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool isLoaded;

		[Token(Token = "0x4001A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Row[] rows;

		[Token(Token = "0x4001A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string[] headers;

		[Token(Token = "0x4001A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<string, int> headerIndexes;

		[Token(Token = "0x170002D9")]
		public int NumRows
		{
			[Token(Token = "0x60017CF")]
			[Address(RVA = "0x8AE4C0", Offset = "0x8AE4C0", VA = "0x8AE4C0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002DA")]
		public int NumColumns
		{
			[Token(Token = "0x60017D0")]
			[Address(RVA = "0x8AE4E0", Offset = "0x8AE4E0", VA = "0x8AE4E0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60017CB")]
		[Address(RVA = "0x8ADC58", Offset = "0x8ADC58", VA = "0x8ADC58")]
		public void LoadFromResources(string path)
		{
		}

		[Token(Token = "0x60017CC")]
		[Address(RVA = "0x8AE358", Offset = "0x8AE358", VA = "0x8AE358")]
		public string GetHeader(int i)
		{
			return null;
		}

		[Token(Token = "0x60017CD")]
		[Address(RVA = "0x8AE410", Offset = "0x8AE410", VA = "0x8AE410")]
		public int GetHeaderIndex(string name)
		{
			return default(int);
		}

		[Token(Token = "0x60017CE")]
		[Address(RVA = "0x8AE468", Offset = "0x8AE468", VA = "0x8AE468")]
		public bool HasHeader(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60017D1")]
		[Address(RVA = "0x8AE4FC", Offset = "0x8AE4FC", VA = "0x8AE4FC")]
		public Row GetRow(int i)
		{
			return default(Row);
		}

		[Token(Token = "0x60017D2")]
		[Address(RVA = "0x8AE5C4", Offset = "0x8AE5C4", VA = "0x8AE5C4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60017D3")]
		[Address(RVA = "0x8AE75C", Offset = "0x8AE75C", VA = "0x8AE75C")]
		public bool LoadFromFile(string path)
		{
			return default(bool);
		}

		[Token(Token = "0x60017D4")]
		[Address(RVA = "0x8AE81C", Offset = "0x8AE81C", VA = "0x8AE81C")]
		public void Parse(string[] textLines)
		{
		}

		[Token(Token = "0x60017D5")]
		[Address(RVA = "0x8AED7C", Offset = "0x8AED7C", VA = "0x8AED7C")]
		public CSVTable()
		{
		}
	}
	[Token(Token = "0x200037E")]
	public class PerFrameCounter : UnityEngine.MonoBehaviour
	{
		[Token(Token = "0x60017E6")]
		[Address(RVA = "0x8AF5D0", Offset = "0x8AF5D0", VA = "0x8AF5D0")]
		[Conditional("UNITY_EDITOR")]
		public static void Add(string name, int amount = 1)
		{
		}

		[Token(Token = "0x60017E7")]
		[Address(RVA = "0x8AF5D4", Offset = "0x8AF5D4", VA = "0x8AF5D4")]
		public PerFrameCounter()
		{
		}
	}
	[Token(Token = "0x200037F")]
	public class SpeedControl : UnityEngine.MonoBehaviour
	{
		[Token(Token = "0x4001A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool enableOnDevice;

		[Token(Token = "0x4001A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public KeyCode activationKey;

		[Token(Token = "0x4001A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float speedFactorWhenActivated;

		[Token(Token = "0x4001A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private bool activated;

		[Token(Token = "0x60017E8")]
		[Address(RVA = "0x8AF5DC", Offset = "0x8AF5DC", VA = "0x8AF5DC")]
		private void Start()
		{
		}

		[Token(Token = "0x60017E9")]
		[Address(RVA = "0x8AF5E8", Offset = "0x8AF5E8", VA = "0x8AF5E8")]
		private void Update()
		{
		}

		[Token(Token = "0x60017EA")]
		[Address(RVA = "0x8AF630", Offset = "0x8AF630", VA = "0x8AF630")]
		public SpeedControl()
		{
		}
	}
	[Token(Token = "0x2000380")]
	public class ToggleActive : UnityEngine.MonoBehaviour
	{
		[Token(Token = "0x4001A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] objects;

		[Token(Token = "0x4001A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public KeyCode key;

		[Token(Token = "0x60017EB")]
		[Address(RVA = "0x8AF648", Offset = "0x8AF648", VA = "0x8AF648")]
		private void Update()
		{
		}

		[Token(Token = "0x60017EC")]
		[Address(RVA = "0x8AF6D4", Offset = "0x8AF6D4", VA = "0x8AF6D4")]
		public ToggleActive()
		{
		}
	}
	[Token(Token = "0x2000381")]
	public class CameraControl : UnityEngine.MonoBehaviour
	{
		[Token(Token = "0x2000382")]
		private struct Pose
		{
			[Token(Token = "0x4001AA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 position;

			[Token(Token = "0x4001AA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Quaternion rotation;

			[Token(Token = "0x60017F5")]
			[Address(RVA = "0x8B0598", Offset = "0x8B0598", VA = "0x8B0598")]
			public Pose(Vector3 position, Quaternion rotation)
			{
			}
		}

		[Token(Token = "0x4001A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The size of one step. (Can be scaled with the shift/ctrl/alt keys.)")]
		public float stepSize;

		[Token(Token = "0x4001A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("In desktop mode, move smoothly instead of in discrete steps")]
		public bool smoothOnDesktop;

		[Token(Token = "0x4001A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("When moving smoothly, move at this speed")]
		public float smoothMovementSpeed;

		[Token(Token = "0x4001A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private new Transform transform;

		[Token(Token = "0x4001A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Camera camera;

		[Token(Token = "0x4001A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform cameraTransform;

		[Token(Token = "0x4001A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private InputDevice hmdDevice;

		[Token(Token = "0x4001A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float[] stepSizes;

		[Token(Token = "0x4001A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float[] rotationAngles;

		[Token(Token = "0x4001A9C")]
		private const float mouseSpeed = 2f;

		[Token(Token = "0x4001A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool mouseEnabled;

		[Token(Token = "0x4001A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool userIsWearingHeadset;

		[Token(Token = "0x4001A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		private bool desktopMode;

		[Token(Token = "0x4001AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Pose? poseInDesktopMode;

		[Token(Token = "0x4001AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Pose? poseInXRMode;

		[Token(Token = "0x60017ED")]
		[Address(RVA = "0x8AF6E4", Offset = "0x8AF6E4", VA = "0x8AF6E4")]
		public bool IsDesktopMode()
		{
			return default(bool);
		}

		[Token(Token = "0x60017EE")]
		[Address(RVA = "0x8AF6EC", Offset = "0x8AF6EC", VA = "0x8AF6EC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60017EF")]
		[Address(RVA = "0x8AF7AC", Offset = "0x8AF7AC", VA = "0x8AF7AC")]
		private void Update()
		{
		}

		[Token(Token = "0x60017F0")]
		[Address(RVA = "0x8B0098", Offset = "0x8B0098", VA = "0x8B0098")]
		private bool IsUserPresent()
		{
			return default(bool);
		}

		[Token(Token = "0x60017F1")]
		private T GetKeyAmount<T>(KeyCode key, T value)
		{
			return (T)null;
		}

		[Token(Token = "0x60017F2")]
		[Address(RVA = "0x8B0154", Offset = "0x8B0154", VA = "0x8B0154")]
		private void SetDesktopMode(bool newDesktopMode)
		{
		}

		[Token(Token = "0x60017F3")]
		[Address(RVA = "0x8B0464", Offset = "0x8B0464", VA = "0x8B0464")]
		private void SetTrackingEnabled(bool enable)
		{
		}

		[Token(Token = "0x60017F4")]
		[Address(RVA = "0x8B04C4", Offset = "0x8B04C4", VA = "0x8B04C4")]
		public CameraControl()
		{
		}
	}
	[Token(Token = "0x2000383")]
	public class CaptureCamera : UnityEngine.MonoBehaviour
	{
		[Token(Token = "0x2000384")]
		public enum FileFormat
		{
			[Token(Token = "0x4001AAA")]
			PNG,
			[Token(Token = "0x4001AAB")]
			PNGWithAlpha,
			[Token(Token = "0x4001AAC")]
			JPG,
			[Token(Token = "0x4001AAD")]
			EXR
		}

		[Token(Token = "0x4001AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Name of input in InputManager that triggers capturing the camera")]
		public string inputName;

		[Token(Token = "0x4001AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2Int resolution;

		[Token(Token = "0x4001AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public FileFormat fileFormat;

		[Token(Token = "0x4001AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string[] extensions;

		[Token(Token = "0x4001AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Camera to capture. Default is main camera")]
		public Camera cameraToCapture;

		[Token(Token = "0x60017F6")]
		[Address(RVA = "0x8B05AC", Offset = "0x8B05AC", VA = "0x8B05AC")]
		public void Update()
		{
		}

		[Token(Token = "0x60017F7")]
		[Address(RVA = "0x8B07B4", Offset = "0x8B07B4", VA = "0x8B07B4")]
		private void Capture(Camera cam)
		{
		}

		[Token(Token = "0x60017F8")]
		[Address(RVA = "0x8B0BB4", Offset = "0x8B0BB4", VA = "0x8B0BB4")]
		private TextureFormat GetTargetTextureFormat()
		{
			return default(TextureFormat);
		}

		[Token(Token = "0x60017F9")]
		[Address(RVA = "0x8B0BD8", Offset = "0x8B0BD8", VA = "0x8B0BD8")]
		public CaptureCamera()
		{
		}
	}
	[Token(Token = "0x2000385")]
	public class EditorCameraControl : UnityEngine.MonoBehaviour
	{
		[Token(Token = "0x4001AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float mouseSpeed;

		[Token(Token = "0x4001AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float maxKeyboardRotation;

		[Token(Token = "0x4001AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public KeyCode freezeKey;

		[Token(Token = "0x4001AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float touchRotationSpeed;

		[Token(Token = "0x4001AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float keyboardRotationSpeed;

		[Token(Token = "0x4001AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public KeyCode turnLeftKey;

		[Token(Token = "0x4001AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public KeyCode turnRightKey;

		[Token(Token = "0x4001AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public KeyCode lookUpKey;

		[Token(Token = "0x4001AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public KeyCode lookDownKey;

		[Token(Token = "0x4001AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public KeyCode recenterKey;

		[Token(Token = "0x4001AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool startMouseEnabled;

		[Token(Token = "0x4001AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("If set, rotate the camera in the opposite direction of this object's orientation to disable head rotation tracking")]
		public Transform vrHead;

		[Token(Token = "0x4001ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion startRotation;

		[Token(Token = "0x4001ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 currentRotation;

		[Token(Token = "0x4001ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3? currentPosition;

		[Token(Token = "0x4001ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private bool mouseEnabled;

		[Token(Token = "0x4001ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private XRInputSubsystem XRInputSubsystem;

		[Token(Token = "0x60017FB")]
		[Address(RVA = "0x8B0D98", Offset = "0x8B0D98", VA = "0x8B0D98")]
		private void Start()
		{
		}

		[Token(Token = "0x60017FC")]
		[Address(RVA = "0x8B0E30", Offset = "0x8B0E30", VA = "0x8B0E30")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60017FD")]
		[Address(RVA = "0x8B0E8C", Offset = "0x8B0E8C", VA = "0x8B0E8C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60017FE")]
		[Address(RVA = "0x8B0EB8", Offset = "0x8B0EB8", VA = "0x8B0EB8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60017FF")]
		[Address(RVA = "0x8B0ED4", Offset = "0x8B0ED4", VA = "0x8B0ED4")]
		public void SetPosition(Vector3 localPosition)
		{
		}

		[Token(Token = "0x6001800")]
		[Address(RVA = "0x8B0FAC", Offset = "0x8B0FAC", VA = "0x8B0FAC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001801")]
		[Address(RVA = "0x8B1414", Offset = "0x8B1414", VA = "0x8B1414")]
		public EditorCameraControl()
		{
		}
	}
	[Token(Token = "0x2000386")]
	public class Fader : UnityEngine.MonoBehaviour
	{
		[Token(Token = "0x4001ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float targetAlpha;

		[Token(Token = "0x4001AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float fadeTime;

		[Token(Token = "0x4001AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Shader fadeShader;

		[Token(Token = "0x4001AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color color;

		[Token(Token = "0x4001AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected float currentAlpha;

		[Token(Token = "0x4001AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material fadeMaterial;

		[Token(Token = "0x170002DC")]
		public bool Done
		{
			[Token(Token = "0x6001804")]
			[Address(RVA = "0x8B146C", Offset = "0x8B146C", VA = "0x8B146C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001802")]
		[Address(RVA = "0x8B1458", Offset = "0x8B1458", VA = "0x8B1458")]
		public void FadeIn()
		{
		}

		[Token(Token = "0x6001803")]
		[Address(RVA = "0x8B1460", Offset = "0x8B1460", VA = "0x8B1460")]
		public void FadeOut()
		{
		}

		[Token(Token = "0x6001805")]
		[Address(RVA = "0x8B1480", Offset = "0x8B1480", VA = "0x8B1480")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001806")]
		[Address(RVA = "0x8B164C", Offset = "0x8B164C", VA = "0x8B164C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001807")]
		[Address(RVA = "0x8B1658", Offset = "0x8B1658", VA = "0x8B1658")]
		private void Reset()
		{
		}

		[Token(Token = "0x6001808")]
		[Address(RVA = "0x8B1500", Offset = "0x8B1500", VA = "0x8B1500")]
		private void Setup()
		{
		}

		[Token(Token = "0x6001809")]
		[Address(RVA = "0x8B165C", Offset = "0x8B165C", VA = "0x8B165C")]
		private void Update()
		{
		}

		[Token(Token = "0x600180A")]
		[Address(RVA = "0x8B16E8", Offset = "0x8B16E8", VA = "0x8B16E8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600180B")]
		[Address(RVA = "0x8B178C", Offset = "0x8B178C", VA = "0x8B178C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600180C")]
		[Address(RVA = "0x8B1830", Offset = "0x8B1830", VA = "0x8B1830")]
		private void SceneWasLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x600180D")]
		[Address(RVA = "0x8B1838", Offset = "0x8B1838", VA = "0x8B1838")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600180E")]
		[Address(RVA = "0x8B18C8", Offset = "0x8B18C8", VA = "0x8B18C8")]
		private void OnPostRender()
		{
		}

		[Token(Token = "0x600180F")]
		[Address(RVA = "0x8B19A8", Offset = "0x8B19A8", VA = "0x8B19A8")]
		public Fader()
		{
		}
	}
	[Token(Token = "0x2000387")]
	public class FpsDisplay : UnityEngine.MonoBehaviour
	{
		[Token(Token = "0x4001AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float updateInterval;

		[Token(Token = "0x4001AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public KeyCode toggleKey;

		[Token(Token = "0x4001AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool visible;

		[Token(Token = "0x4001AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float warningTime;

		[Token(Token = "0x4001AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color standardColor;

		[Token(Token = "0x4001ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color warningColor;

		[Token(Token = "0x4001ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private TextMesh textMesh;

		[Token(Token = "0x4001ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Renderer rendererComponent;

		[Token(Token = "0x4001ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int frameCount;

		[Token(Token = "0x4001ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int warningCount;

		[Token(Token = "0x4001ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float elapsed;

		[Token(Token = "0x4001AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float fps;

		[Token(Token = "0x4001AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float msPerFrame;

		[Token(Token = "0x4001AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float maxTime;

		[Token(Token = "0x4001AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float minTime;

		[Token(Token = "0x4001AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private string text;

		[Token(Token = "0x4001AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float lastUpdate;

		[Token(Token = "0x4001AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float collectionStartTime;

		[Token(Token = "0x6001810")]
		[Address(RVA = "0x8B19C4", Offset = "0x8B19C4", VA = "0x8B19C4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001811")]
		[Address(RVA = "0x8B1A40", Offset = "0x8B1A40", VA = "0x8B1A40")]
		private void Start()
		{
		}

		[Token(Token = "0x6001812")]
		[Address(RVA = "0x8B1A94", Offset = "0x8B1A94", VA = "0x8B1A94")]
		private void Update()
		{
		}

		[Token(Token = "0x6001813")]
		[Address(RVA = "0x8B1BC4", Offset = "0x8B1BC4", VA = "0x8B1BC4")]
		public void ToggleVisibility()
		{
		}

		[Token(Token = "0x6001814")]
		[Address(RVA = "0x8B1C10", Offset = "0x8B1C10", VA = "0x8B1C10")]
		private void UpdateDisplay()
		{
		}

		[Token(Token = "0x6001815")]
		[Address(RVA = "0x8B1E44", Offset = "0x8B1E44", VA = "0x8B1E44")]
		public FpsDisplay()
		{
		}
	}
	[Token(Token = "0x2000388")]
	public class Screenshot : UnityEngine.MonoBehaviour
	{
		[Token(Token = "0x4001AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public KeyCode screenshotKey;

		[Token(Token = "0x4001AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int superSize;

		[Token(Token = "0x6001816")]
		[Address(RVA = "0x8B1E80", Offset = "0x8B1E80", VA = "0x8B1E80")]
		public void Start()
		{
		}

		[Token(Token = "0x6001817")]
		[Address(RVA = "0x8B1ED8", Offset = "0x8B1ED8", VA = "0x8B1ED8")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x6001818")]
		[Address(RVA = "0x8B1FA4", Offset = "0x8B1FA4", VA = "0x8B1FA4")]
		public static string ScreenShotName()
		{
			return null;
		}

		[Token(Token = "0x6001819")]
		[Address(RVA = "0x8B1F04", Offset = "0x8B1F04", VA = "0x8B1F04")]
		public void TakeScreenshot()
		{
		}

		[Token(Token = "0x600181A")]
		[Address(RVA = "0x8B204C", Offset = "0x8B204C", VA = "0x8B204C")]
		public Screenshot()
		{
		}
	}
	[Token(Token = "0x2000389")]
	public static class Find
	{
		[Token(Token = "0x600181B")]
		[Address(RVA = "0x8B2060", Offset = "0x8B2060", VA = "0x8B2060")]
		public static GameObject ChildByName(Component tag, string path)
		{
			return null;
		}

		[Token(Token = "0x600181C")]
		[Address(RVA = "0x8B21C0", Offset = "0x8B21C0", VA = "0x8B21C0")]
		public static GameObject ChildByName(object tag, GameObject go, string path)
		{
			return null;
		}

		[Token(Token = "0x600181D")]
		[Address(RVA = "0x8B2208", Offset = "0x8B2208", VA = "0x8B2208")]
		public static Transform ChildTransformByName(Component tag, string path)
		{
			return null;
		}

		[Token(Token = "0x600181E")]
		[Address(RVA = "0x8B2240", Offset = "0x8B2240", VA = "0x8B2240")]
		public static Transform ChildTransformByName(object tag, Transform go, string path)
		{
			return null;
		}

		[Token(Token = "0x600181F")]
		public static T ComponentOnGameObject<T>(Component tag) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6001820")]
		public static T ComponentOnGameObject<T>(GameObject tag) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6001821")]
		public static T ComponentOnGameObject<T>(object tag, GameObject go) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6001822")]
		public static T ComponentOrCreate<T>(GameObject gameObject) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6001823")]
		public static T ComponentOnChild<T>(Component tag, string path) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6001824")]
		public static T ComponentOnChild<T>(object tag, GameObject go, string path) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6001825")]
		public static T ComponentInChildren<T>(Component tag) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6001826")]
		public static T ComponentInChildren<T>(object tag, GameObject go) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6001827")]
		public static T ComponentOrNull<T>(GameObject container) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6001828")]
		public static List<T> ComponentsInActiveScene<T>(bool includeInactive) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6001829")]
		public static List<T> ComponentsInScene<T>(Scene scene, bool includeInactive) where T : Component
		{
			return null;
		}

		[Token(Token = "0x600182A")]
		[Address(RVA = "0x8B20A4", Offset = "0x8B20A4", VA = "0x8B20A4")]
		private static Transform InternalFindChildByName(object tag, Transform transform, string path)
		{
			return null;
		}

		[Token(Token = "0x600182B")]
		private static T InternalFindComponentOnGameObject<T>(object tag, GameObject go) where T : Component
		{
			return null;
		}

		[Token(Token = "0x600182C")]
		private static T InternalFindComponentOnChild<T>(object tag, GameObject go, string path) where T : Component
		{
			return null;
		}

		[Token(Token = "0x600182D")]
		private static T InternalFindComponentInChildren<T>(object tag, GameObject go)
		{
			return (T)null;
		}

		[Token(Token = "0x600182E")]
		[Address(RVA = "0x8B2244", Offset = "0x8B2244", VA = "0x8B2244")]
		private static string FormatError(string template, object tag, GameObject go, string path, Type t, string reason)
		{
			return null;
		}

		[Token(Token = "0x600182F")]
		[Address(RVA = "0x8B2284", Offset = "0x8B2284", VA = "0x8B2284")]
		private static string FormatTag(object theTag)
		{
			return null;
		}
	}
	[Token(Token = "0x200038A")]
	public static class ComponentValidation
	{
		[Token(Token = "0x6001830")]
		[Address(RVA = "0x8B23B8", Offset = "0x8B23B8", VA = "0x8B23B8")]
		public static bool DisableIfNull(UnityEngine.MonoBehaviour component, object attributeValue, string attributeName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001831")]
		[Address(RVA = "0x8B2590", Offset = "0x8B2590", VA = "0x8B2590")]
		[Conditional("UNITY_ASSERTIONS")]
		public static void FailIfNull(object component, object attributeValue, string attributeName)
		{
		}

		[Token(Token = "0x6001832")]
		[Address(RVA = "0x8B24F0", Offset = "0x8B24F0", VA = "0x8B24F0")]
		public static bool IsNull(object o)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200038B")]
	public class DontDestroyOnLoad : UnityEngine.MonoBehaviour
	{
		[Token(Token = "0x6001833")]
		[Address(RVA = "0x8B2758", Offset = "0x8B2758", VA = "0x8B2758")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001834")]
		[Address(RVA = "0x8B27C4", Offset = "0x8B27C4", VA = "0x8B27C4")]
		public DontDestroyOnLoad()
		{
		}
	}
	[Token(Token = "0x200038C")]
	public class Loader : UnityEngine.MonoBehaviour
	{
		[Token(Token = "0x200038D")]
		[CompilerGenerated]
		private sealed class <Start>d__2 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001ADB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001ADC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001ADD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Loader <>4__this;

			[Token(Token = "0x4001ADE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Fader[] <faders>5__2;

			[Token(Token = "0x4001ADF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <startTime>5__3;

			[Token(Token = "0x4001AE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private AsyncOperation <async>5__4;

			[Token(Token = "0x170002DD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600183A")]
				[Address(RVA = "0x8B2BD8", Offset = "0x8B2BD8", VA = "0x8B2BD8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002DE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600183C")]
				[Address(RVA = "0x8B2C20", Offset = "0x8B2C20", VA = "0x8B2C20", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001837")]
			[Address(RVA = "0x8B2834", Offset = "0x8B2834", VA = "0x8B2834")]
			[DebuggerHidden]
			public <Start>d__2(int <>1__state)
			{
			}

			[Token(Token = "0x6001838")]
			[Address(RVA = "0x8B2864", Offset = "0x8B2864", VA = "0x8B2864", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001839")]
			[Address(RVA = "0x8B2868", Offset = "0x8B2868", VA = "0x8B2868", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600183B")]
			[Address(RVA = "0x8B2BE0", Offset = "0x8B2BE0", VA = "0x8B2BE0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string scene;

		[Token(Token = "0x4001ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float minimumTime;

		[Token(Token = "0x6001835")]
		[Address(RVA = "0x8B27CC", Offset = "0x8B27CC", VA = "0x8B27CC")]
		[IteratorStateMachine(typeof(<Start>d__2))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6001836")]
		[Address(RVA = "0x8B285C", Offset = "0x8B285C", VA = "0x8B285C")]
		public Loader()
		{
		}
	}
	[Token(Token = "0x200038E")]
	public struct ObjectAndTransform
	{
		[Token(Token = "0x4001AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly GameObject gameObject;

		[Token(Token = "0x4001AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly Transform transform;

		[Token(Token = "0x600183D")]
		[Address(RVA = "0x8B2C28", Offset = "0x8B2C28", VA = "0x8B2C28")]
		public ObjectAndTransform(GameObject obj)
		{
		}

		[Token(Token = "0x600183E")]
		[Address(RVA = "0x8B2C54", Offset = "0x8B2C54", VA = "0x8B2C54")]
		public ObjectAndTransform(Transform t)
		{
		}

		[Token(Token = "0x600183F")]
		[Address(RVA = "0x8B2C88", Offset = "0x8B2C88", VA = "0x8B2C88")]
		public ObjectAndTransform(GameObject obj, Transform t)
		{
		}

		[Token(Token = "0x6001840")]
		[Address(RVA = "0x8B2CBC", Offset = "0x8B2CBC", VA = "0x8B2CBC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6001841")]
		[Address(RVA = "0x8B2D28", Offset = "0x8B2D28", VA = "0x8B2D28")]
		public bool IsNull()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200038F")]
	[DisallowMultipleComponent]
	public abstract class SingleInstanceBehavior<T> : UnityEngine.MonoBehaviour where T : SingleInstanceBehavior<T>
	{
		[Token(Token = "0x4001AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T instance;

		[Token(Token = "0x4001AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string noInstanceMessage;

		[Token(Token = "0x170002DF")]
		public static T Instance
		{
			[Token(Token = "0x6001845")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001842")]
		static SingleInstanceBehavior()
		{
		}

		[Token(Token = "0x6001843")]
		public virtual void Awake()
		{
		}

		[Token(Token = "0x6001844")]
		public virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001846")]
		public static T GetInstance()
		{
			return null;
		}

		[Token(Token = "0x6001847")]
		protected SingleInstanceBehavior()
		{
		}
	}
	[Token(Token = "0x2000390")]
	public class Singleton<T> where T : Singleton<T>, new()
	{
		[Token(Token = "0x4001AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T instance;

		[Token(Token = "0x170002E0")]
		public static T Instance
		{
			[Token(Token = "0x6001849")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001848")]
		public Singleton()
		{
		}

		[Token(Token = "0x600184A")]
		public static T GetInstance()
		{
			return null;
		}
	}
	[Token(Token = "0x2000391")]
	public class SingletonBehavior<T> : UnityEngine.MonoBehaviour where T : SingletonBehavior<T>
	{
		[Token(Token = "0x4001AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T instance;

		[Token(Token = "0x170002E1")]
		public static T Instance
		{
			[Token(Token = "0x600184D")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600184B")]
		public virtual void Awake()
		{
		}

		[Token(Token = "0x600184C")]
		public virtual void OnDestroy()
		{
		}

		[Token(Token = "0x600184E")]
		public static T GetInstance()
		{
			return null;
		}

		[Token(Token = "0x600184F")]
		public SingletonBehavior()
		{
		}
	}
	[Token(Token = "0x2000392")]
	public class Locale : Singleton<Locale>
	{
		[Token(Token = "0x4001AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private string language;

		[Token(Token = "0x4001AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string country;

		[Token(Token = "0x4001AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string explicitlySetLocale;

		[Token(Token = "0x4001AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string currentLocale;

		[Token(Token = "0x4001AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string[] availableLocales;

		[Token(Token = "0x4001AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string[] stringIDs;

		[Token(Token = "0x4001AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Dictionary<string, string> strings;

		[Token(Token = "0x4001AEE")]
		private const string resourceFolder = "Text";

		[Token(Token = "0x4001AEF")]
		private const string binaryResourceSuffix = "_Strings";

		[Token(Token = "0x4001AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<string, string> countrySpecificLocales;

		[Token(Token = "0x6001850")]
		[Address(RVA = "0x8B2D88", Offset = "0x8B2D88", VA = "0x8B2D88")]
		public Locale()
		{
		}

		[Token(Token = "0x6001851")]
		[Address(RVA = "0x8B3578", Offset = "0x8B3578", VA = "0x8B3578")]
		public string GetString(string key)
		{
			return null;
		}

		[Token(Token = "0x6001852")]
		[Address(RVA = "0x8B3608", Offset = "0x8B3608", VA = "0x8B3608")]
		public bool TryGetString(string key, out string localized)
		{
			return default(bool);
		}

		[Token(Token = "0x6001853")]
		[Address(RVA = "0x8B3698", Offset = "0x8B3698", VA = "0x8B3698")]
		public string Format(string key, params object[] templateArguments)
		{
			return null;
		}

		[Token(Token = "0x6001854")]
		[Address(RVA = "0x8B3858", Offset = "0x8B3858", VA = "0x8B3858")]
		public bool TryFormat(string key, out string localized, params object[] templateArguments)
		{
			return default(bool);
		}

		[Token(Token = "0x6001855")]
		[Address(RVA = "0x8B3A3C", Offset = "0x8B3A3C", VA = "0x8B3A3C")]
		public string GetDefaultLanguageOrLocale()
		{
			return null;
		}

		[Token(Token = "0x6001856")]
		[Address(RVA = "0x8B3A58", Offset = "0x8B3A58", VA = "0x8B3A58")]
		public string GetDefaultCountry()
		{
			return null;
		}

		[Token(Token = "0x6001857")]
		[Address(RVA = "0x8B3A60", Offset = "0x8B3A60", VA = "0x8B3A60")]
		public string GetCurrentLocale()
		{
			return null;
		}

		[Token(Token = "0x6001858")]
		[Address(RVA = "0x8B3A68", Offset = "0x8B3A68", VA = "0x8B3A68")]
		public void SetLocale(string localeCode)
		{
		}

		[Token(Token = "0x6001859")]
		[Address(RVA = "0x8B3A70", Offset = "0x8B3A70", VA = "0x8B3A70")]
		public string[] GetAvailableLocales()
		{
			return null;
		}

		[Token(Token = "0x600185A")]
		[Address(RVA = "0x8B3244", Offset = "0x8B3244", VA = "0x8B3244")]
		public string GetLocale(string[] availableLocales)
		{
			return null;
		}

		[Token(Token = "0x600185B")]
		[Address(RVA = "0x8B3AA0", Offset = "0x8B3AA0", VA = "0x8B3AA0")]
		public string[] GetStringIDs()
		{
			return null;
		}

		[Token(Token = "0x600185C")]
		[Address(RVA = "0x8B3AFC", Offset = "0x8B3AFC", VA = "0x8B3AFC")]
		public void Refresh()
		{
		}

		[Token(Token = "0x600185D")]
		[Address(RVA = "0x8B2DF8", Offset = "0x8B2DF8", VA = "0x8B2DF8")]
		private void LoadAvailableLocales()
		{
		}

		[Token(Token = "0x600185E")]
		[Address(RVA = "0x8B3458", Offset = "0x8B3458", VA = "0x8B3458")]
		private void LoadStrings()
		{
		}

		[Token(Token = "0x600185F")]
		[Address(RVA = "0x8B3B14", Offset = "0x8B3B14", VA = "0x8B3B14")]
		private bool TryLoadStrings()
		{
			return default(bool);
		}

		[Token(Token = "0x6001860")]
		[Address(RVA = "0x8B3C54", Offset = "0x8B3C54", VA = "0x8B3C54")]
		private bool TryLoadStringsFromBinaryAssets()
		{
			return default(bool);
		}

		[Token(Token = "0x6001861")]
		[Address(RVA = "0x8B2F74", Offset = "0x8B2F74", VA = "0x8B2F74")]
		private void SetDefaultLanguageAndCountry()
		{
		}

		[Token(Token = "0x6001862")]
		[Address(RVA = "0x8B3F30", Offset = "0x8B3F30", VA = "0x8B3F30")]
		[Obsolete("GetLanguage is deprecated, use GetResourceLocale instead.")]
		public string GetLanguage()
		{
			return null;
		}

		[Token(Token = "0x6001863")]
		[Address(RVA = "0x8B3F38", Offset = "0x8B3F38", VA = "0x8B3F38")]
		[Obsolete("SetLanguage is deprecated, use SetLocale instead.")]
		public void SetLanguage(string languageCode)
		{
		}

		[Token(Token = "0x6001864")]
		[Address(RVA = "0x8B3F40", Offset = "0x8B3F40", VA = "0x8B3F40")]
		[Obsolete("GetAvailableLanguages is deprecated, use GetAvailableLocales instead.")]
		public string[] GetAvailableLanguages()
		{
			return null;
		}
	}
	[Token(Token = "0x2000393")]
	public class LocaleFonts : SingleInstanceBehavior<LocaleFonts>
	{
		[Serializable]
		[Token(Token = "0x2000394")]
		public class Settings
		{
			[Token(Token = "0x4001AF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Locale code (language or language-region)")]
			public string locale;

			[Token(Token = "0x4001AF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The font to use for text in this locale")]
			public Font[] font;

			[Token(Token = "0x4001AF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The TMPro font to use for text in this locale")]
			public TMP_FontAsset[] fontTMPro;

			[Token(Token = "0x4001AF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Optional material applied only on TMPro GUI components, use to fix the TMPro UGUI disappears bug.")]
			public Material[] materialTMProGUI;

			[Token(Token = "0x4001AF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("The size of the text relative to the original font")]
			public float scale;

			[Token(Token = "0x6001868")]
			[Address(RVA = "0x8B454C", Offset = "0x8B454C", VA = "0x8B454C")]
			public Settings()
			{
			}
		}

		[Token(Token = "0x4001AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Locales that should use a specific font")]
		[SerializeField]
		private Settings[] localeSettings;

		[Token(Token = "0x6001866")]
		[Address(RVA = "0x8B4400", Offset = "0x8B4400", VA = "0x8B4400")]
		public Settings GetCurrentLocaleSettings()
		{
			return null;
		}

		[Token(Token = "0x6001867")]
		[Address(RVA = "0x8B44E0", Offset = "0x8B44E0", VA = "0x8B44E0")]
		public LocaleFonts()
		{
		}
	}
	[Token(Token = "0x2000395")]
	public enum FontMaterialID
	{
		[Token(Token = "0x4001AF8")]
		InteractiveHeader,
		[Token(Token = "0x4001AF9")]
		InteractiveBasic,
		[Token(Token = "0x4001AFA")]
		InteractiveOutline,
		[Token(Token = "0x4001AFB")]
		NonInteractiveOutline,
		[Token(Token = "0x4001AFC")]
		NonInteractiveBasic,
		[Token(Token = "0x4001AFD")]
		Overlay,
		[Token(Token = "0x4001AFE")]
		NonInteractiveHeader
	}
	[Token(Token = "0x2000396")]
	[DisallowMultipleComponent]
	public class LocalizedText : UnityEngine.MonoBehaviour
	{
		[Token(Token = "0x2000397")]
		private struct FontProxy
		{
			[Token(Token = "0x4001B08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Font font;

			[Token(Token = "0x4001B09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public TMP_FontAsset fontTMPro;

			[Token(Token = "0x4001B0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Material materialTMProGUI;
		}

		[Token(Token = "0x2000398")]
		private interface ITextComponent
		{
			[Token(Token = "0x170002E2")]
			string Text
			{
				[Token(Token = "0x6001872")]
				get;
				[Token(Token = "0x6001873")]
				set;
			}

			[Token(Token = "0x170002E3")]
			FontProxy Font
			{
				[Token(Token = "0x6001874")]
				get;
				[Token(Token = "0x6001875")]
				set;
			}

			[Token(Token = "0x170002E4")]
			float FontSize
			{
				[Token(Token = "0x6001876")]
				get;
				[Token(Token = "0x6001877")]
				set;
			}
		}

		[Token(Token = "0x2000399")]
		private sealed class TextComponent : ITextComponent
		{
			[Token(Token = "0x4001B0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Text textComponent;

			[Token(Token = "0x170002E5")]
			public string Text
			{
				[Token(Token = "0x6001879")]
				[Address(RVA = "0x8B5354", Offset = "0x8B5354", VA = "0x8B5354", Slot = "4")]
				get
				{
					return null;
				}
				[Token(Token = "0x600187A")]
				[Address(RVA = "0x8B5378", Offset = "0x8B5378", VA = "0x8B5378", Slot = "5")]
				set
				{
				}
			}

			[Token(Token = "0x170002E6")]
			public FontProxy Font
			{
				[Token(Token = "0x600187B")]
				[Address(RVA = "0x8B539C", Offset = "0x8B539C", VA = "0x8B539C", Slot = "6")]
				get
				{
					return default(FontProxy);
				}
				[Token(Token = "0x600187C")]
				[Address(RVA = "0x8B53D8", Offset = "0x8B53D8", VA = "0x8B53D8", Slot = "7")]
				set
				{
				}
			}

			[Token(Token = "0x170002E7")]
			public float FontSize
			{
				[Token(Token = "0x600187D")]
				[Address(RVA = "0x8B53F8", Offset = "0x8B53F8", VA = "0x8B53F8", Slot = "8")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x600187E")]
				[Address(RVA = "0x8B541C", Offset = "0x8B541C", VA = "0x8B541C", Slot = "9")]
				set
				{
				}
			}

			[Token(Token = "0x6001878")]
			[Address(RVA = "0x8B5250", Offset = "0x8B5250", VA = "0x8B5250")]
			public TextComponent(Text text)
			{
			}
		}

		[Token(Token = "0x200039A")]
		private sealed class TextMeshComponent : ITextComponent
		{
			[Token(Token = "0x4001B0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly TextMesh textComponent;

			[Token(Token = "0x170002E8")]
			public string Text
			{
				[Token(Token = "0x6001880")]
				[Address(RVA = "0x8B5510", Offset = "0x8B5510", VA = "0x8B5510", Slot = "4")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001881")]
				[Address(RVA = "0x8B552C", Offset = "0x8B552C", VA = "0x8B552C", Slot = "5")]
				set
				{
				}
			}

			[Token(Token = "0x170002E9")]
			public FontProxy Font
			{
				[Token(Token = "0x6001882")]
				[Address(RVA = "0x8B5548", Offset = "0x8B5548", VA = "0x8B5548", Slot = "6")]
				get
				{
					return default(FontProxy);
				}
				[Token(Token = "0x6001883")]
				[Address(RVA = "0x8B5584", Offset = "0x8B5584", VA = "0x8B5584", Slot = "7")]
				set
				{
				}
			}

			[Token(Token = "0x170002EA")]
			public float FontSize
			{
				[Token(Token = "0x6001884")]
				[Address(RVA = "0x8B55A4", Offset = "0x8B55A4", VA = "0x8B55A4", Slot = "8")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001885")]
				[Address(RVA = "0x8B55C8", Offset = "0x8B55C8", VA = "0x8B55C8", Slot = "9")]
				set
				{
				}
			}

			[Token(Token = "0x600187F")]
			[Address(RVA = "0x8B5278", Offset = "0x8B5278", VA = "0x8B5278")]
			public TextMeshComponent(TextMesh text)
			{
			}
		}

		[Token(Token = "0x200039B")]
		private sealed class TextComponentTMPro : ITextComponent
		{
			[Token(Token = "0x4001B0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly TMP_Text textComponent;

			[Token(Token = "0x170002EB")]
			public string Text
			{
				[Token(Token = "0x6001887")]
				[Address(RVA = "0x8B56BC", Offset = "0x8B56BC", VA = "0x8B56BC", Slot = "4")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001888")]
				[Address(RVA = "0x8B56E0", Offset = "0x8B56E0", VA = "0x8B56E0", Slot = "5")]
				set
				{
				}
			}

			[Token(Token = "0x170002EC")]
			public FontProxy Font
			{
				[Token(Token = "0x6001889")]
				[Address(RVA = "0x8B5704", Offset = "0x8B5704", VA = "0x8B5704", Slot = "6")]
				get
				{
					return default(FontProxy);
				}
				[Token(Token = "0x600188A")]
				[Address(RVA = "0x8B5728", Offset = "0x8B5728", VA = "0x8B5728", Slot = "7")]
				set
				{
				}
			}

			[Token(Token = "0x170002ED")]
			public float FontSize
			{
				[Token(Token = "0x600188B")]
				[Address(RVA = "0x8B57C8", Offset = "0x8B57C8", VA = "0x8B57C8", Slot = "8")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x600188C")]
				[Address(RVA = "0x8B57E4", Offset = "0x8B57E4", VA = "0x8B57E4", Slot = "9")]
				set
				{
				}
			}

			[Token(Token = "0x6001886")]
			[Address(RVA = "0x8B52A0", Offset = "0x8B52A0", VA = "0x8B52A0")]
			public TextComponentTMPro(TMP_Text text)
			{
			}
		}

		[Token(Token = "0x4001AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string stringID;

		[Token(Token = "0x4001B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool shouldUpdateFont;

		[Token(Token = "0x4001B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private FontMaterialID fontMaterialID;

		[Token(Token = "0x4001B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ITextComponent textComponent;

		[Token(Token = "0x4001B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string[] templateArguments;

		[Token(Token = "0x4001B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int?[] templateArgumentsInts;

		[Token(Token = "0x4001B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool fontOverridden;

		[Token(Token = "0x4001B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private FontProxy? originalFont;

		[Token(Token = "0x4001B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float originalFontSize;

		[Token(Token = "0x6001869")]
		[Address(RVA = "0x8B455C", Offset = "0x8B455C", VA = "0x8B455C")]
		private void Start()
		{
		}

		[Token(Token = "0x600186A")]
		[Address(RVA = "0x8B4F70", Offset = "0x8B4F70", VA = "0x8B4F70")]
		public void ShowString(string stringID)
		{
		}

		[Token(Token = "0x600186B")]
		[Address(RVA = "0x8B4F78", Offset = "0x8B4F78", VA = "0x8B4F78")]
		public void SetTemplateArgument(int index, string value)
		{
		}

		[Token(Token = "0x600186C")]
		[Address(RVA = "0x8B504C", Offset = "0x8B504C", VA = "0x8B504C")]
		public void SetTemplateArgument(int index, int value)
		{
		}

		[Token(Token = "0x600186D")]
		[Address(RVA = "0x8B5190", Offset = "0x8B5190", VA = "0x8B5190")]
		public void ShowRawText(string text)
		{
		}

		[Token(Token = "0x600186E")]
		[Address(RVA = "0x8B48D8", Offset = "0x8B48D8", VA = "0x8B48D8")]
		public void UpdateText()
		{
		}

		[Token(Token = "0x600186F")]
		[Address(RVA = "0x8B49E0", Offset = "0x8B49E0", VA = "0x8B49E0")]
		public void UpdateFont(bool forceChangeInEditor = false)
		{
		}

		[Token(Token = "0x6001870")]
		[Address(RVA = "0x8B4580", Offset = "0x8B4580", VA = "0x8B4580")]
		private void FindComponents()
		{
		}

		[Token(Token = "0x6001871")]
		[Address(RVA = "0x8B52C8", Offset = "0x8B52C8", VA = "0x8B52C8")]
		public LocalizedText()
		{
		}
	}
	[Token(Token = "0x200039C")]
	public struct SeparatedStringReader
	{
		[Token(Token = "0x4001B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private byte[] bytes;

		[Token(Token = "0x4001B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private int index;

		[Token(Token = "0x600188D")]
		[Address(RVA = "0x8B3E50", Offset = "0x8B3E50", VA = "0x8B3E50")]
		public SeparatedStringReader(byte[] bytes, int startingIndex = 0)
		{
		}

		[Token(Token = "0x600188E")]
		[Address(RVA = "0x8B3F08", Offset = "0x8B3F08", VA = "0x8B3F08")]
		public bool HasNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600188F")]
		[Address(RVA = "0x8B3E5C", Offset = "0x8B3E5C", VA = "0x8B3E5C")]
		public string GetNext()
		{
			return null;
		}
	}
	[Token(Token = "0x200039D")]
	public class TextTemplateDemo : UnityEngine.MonoBehaviour
	{
		[Token(Token = "0x4001B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool useIntegerArgument;

		[Token(Token = "0x4001B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int number;

		[Token(Token = "0x6001890")]
		[Address(RVA = "0x8B5800", Offset = "0x8B5800", VA = "0x8B5800")]
		private void Update()
		{
		}

		[Token(Token = "0x6001891")]
		[Address(RVA = "0x8B58D0", Offset = "0x8B58D0", VA = "0x8B58D0")]
		public TextTemplateDemo()
		{
		}
	}
	[Token(Token = "0x200039E")]
	public class Translations : ScriptableObject
	{
		[Serializable]
		[Token(Token = "0x200039F")]
		public struct StringEntry
		{
			[Token(Token = "0x4001B13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string id;

			[Token(Token = "0x4001B14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string translation;
		}

		[Token(Token = "0x4001B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public StringEntry[] entries;

		[Token(Token = "0x6001892")]
		[Address(RVA = "0x8B58E0", Offset = "0x8B58E0", VA = "0x8B58E0")]
		public Translations()
		{
		}
	}
	[Token(Token = "0x20003A0")]
	public static class Interpolation
	{
		[Token(Token = "0x6001893")]
		[Address(RVA = "0x8B58E8", Offset = "0x8B58E8", VA = "0x8B58E8")]
		public static float EaseInEaseOut(float progress, int depth)
		{
			return default(float);
		}

		[Token(Token = "0x6001894")]
		[Address(RVA = "0x8B5944", Offset = "0x8B5944", VA = "0x8B5944")]
		public static bool ProgressOverTime(float startTime, float totalTime, ref float progress)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20003A1")]
	public abstract class TwoD
	{
		[Token(Token = "0x6001895")]
		[Address(RVA = "0x8B59B0", Offset = "0x8B59B0", VA = "0x8B59B0")]
		public static bool TriangleIsInBounds(Rect bounds, Vector2 p0, Vector2 p1, Vector2 p2)
		{
			return default(bool);
		}

		[Token(Token = "0x6001896")]
		[Address(RVA = "0x8B5E34", Offset = "0x8B5E34", VA = "0x8B5E34")]
		public static bool TriangleContainsPoint(Vector2 vertex0, Vector2 vertex1, Vector2 vertex2, Vector2 point)
		{
			return default(bool);
		}

		[Token(Token = "0x6001897")]
		[Address(RVA = "0x8B5EEC", Offset = "0x8B5EEC", VA = "0x8B5EEC")]
		public static bool PointsOnSameSide(Vector2 line0, Vector2 line1, Vector2 point0, Vector2 point1)
		{
			return default(bool);
		}

		[Token(Token = "0x6001898")]
		[Address(RVA = "0x8B5F68", Offset = "0x8B5F68", VA = "0x8B5F68")]
		public static Vector3 ToBarycentric(Vector2 p0, Vector2 p1, Vector2 p2, Vector2 p)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001899")]
		[Address(RVA = "0x8B5F38", Offset = "0x8B5F38", VA = "0x8B5F38")]
		public static float Determinant(Vector2 p0, Vector2 p1, Vector2 p2)
		{
			return default(float);
		}

		[Token(Token = "0x600189A")]
		[Address(RVA = "0x8B5B40", Offset = "0x8B5B40", VA = "0x8B5B40")]
		public static bool TriangleIntersectsRectangle(Vector2 vertex0, Vector2 vertex1, Vector2 vertex2, Rect rect)
		{
			return default(bool);
		}

		[Token(Token = "0x600189B")]
		[Address(RVA = "0x8B5FC0", Offset = "0x8B5FC0", VA = "0x8B5FC0")]
		[Obsolete("Use VectorExtensions.SwizzleXZ instead")]
		public static Vector2 SwizzleXZ(Vector3 v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600189C")]
		[Address(RVA = "0x8B5FC8", Offset = "0x8B5FC8", VA = "0x8B5FC8")]
		protected TwoD()
		{
		}
	}
	[Token(Token = "0x20003A2")]
	public class MeasurePoint : UnityEngine.MonoBehaviour
	{
		[Token(Token = "0x4001B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int nextNumber;

		[Token(Token = "0x4001B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int number;

		[Token(Token = "0x600189D")]
		[Address(RVA = "0x8B5FD0", Offset = "0x8B5FD0", VA = "0x8B5FD0")]
		public MeasurePoint()
		{
		}
	}
	[Token(Token = "0x20003A3")]
	public class DummyEvent : Tracking.TrackingEvent
	{
		[Token(Token = "0x4001B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static DummyEvent instance;

		[Token(Token = "0x600189E")]
		[Address(RVA = "0x8B5FD8", Offset = "0x8B5FD8", VA = "0x8B5FD8", Slot = "6")]
		public Tracking.TrackingEvent AddParameter(string name, float value)
		{
			return null;
		}

		[Token(Token = "0x600189F")]
		[Address(RVA = "0x8B5FDC", Offset = "0x8B5FDC", VA = "0x8B5FDC", Slot = "8")]
		public Tracking.TrackingEvent AddParameter(string name, bool value)
		{
			return null;
		}

		[Token(Token = "0x60018A0")]
		[Address(RVA = "0x8B5FE0", Offset = "0x8B5FE0", VA = "0x8B5FE0", Slot = "7")]
		public Tracking.TrackingEvent AddParameter(string name, double value)
		{
			return null;
		}

		[Token(Token = "0x60018A1")]
		[Address(RVA = "0x8B5FE4", Offset = "0x8B5FE4", VA = "0x8B5FE4", Slot = "5")]
		public Tracking.TrackingEvent AddParameter(string name, int value)
		{
			return null;
		}

		[Token(Token = "0x60018A2")]
		[Address(RVA = "0x8B5FE8", Offset = "0x8B5FE8", VA = "0x8B5FE8", Slot = "4")]
		public Tracking.TrackingEvent AddParameter(string name, string value)
		{
			return null;
		}

		[Token(Token = "0x60018A3")]
		[Address(RVA = "0x8B5FEC", Offset = "0x8B5FEC", VA = "0x8B5FEC", Slot = "9")]
		public void Submit()
		{
		}

		[Token(Token = "0x60018A4")]
		[Address(RVA = "0x8B5FF0", Offset = "0x8B5FF0", VA = "0x8B5FF0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60018A5")]
		[Address(RVA = "0x8B6030", Offset = "0x8B6030", VA = "0x8B6030")]
		public DummyEvent()
		{
		}
	}
	[Token(Token = "0x20003A4")]
	public class ErrorCheckingTracker : Tracking.Tracker
	{
		[Token(Token = "0x20003A5")]
		public class Failure : ApplicationException
		{
			[Token(Token = "0x60018A9")]
			[Address(RVA = "0x8B6290", Offset = "0x8B6290", VA = "0x8B6290")]
			public Failure(string message)
			{
			}
		}

		[Token(Token = "0x20003A6")]
		private class ErrorCheckingEvent : Tracking.TrackingEvent
		{
			[Token(Token = "0x4001B19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public readonly string eventName;

			[Token(Token = "0x4001B1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Dictionary<string, string> parameters;

			[Token(Token = "0x4001B1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private bool revenueSet;

			[Token(Token = "0x4001B1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
			public bool isSubmitted;

			[Token(Token = "0x60018AA")]
			[Address(RVA = "0x8B6298", Offset = "0x8B6298", VA = "0x8B6298")]
			public ErrorCheckingEvent(string eventName)
			{
			}

			[Token(Token = "0x60018AB")]
			[Address(RVA = "0x8B6330", Offset = "0x8B6330", VA = "0x8B6330", Slot = "4")]
			public Tracking.TrackingEvent AddParameter(string name, string value)
			{
				return null;
			}

			[Token(Token = "0x60018AC")]
			[Address(RVA = "0x8B65D8", Offset = "0x8B65D8", VA = "0x8B65D8", Slot = "6")]
			public Tracking.TrackingEvent AddParameter(string name, float value)
			{
				return null;
			}

			[Token(Token = "0x60018AD")]
			[Address(RVA = "0x8B6618", Offset = "0x8B6618", VA = "0x8B6618", Slot = "7")]
			public Tracking.TrackingEvent AddParameter(string name, double value)
			{
				return null;
			}

			[Token(Token = "0x60018AE")]
			[Address(RVA = "0x8B6658", Offset = "0x8B6658", VA = "0x8B6658", Slot = "5")]
			public Tracking.TrackingEvent AddParameter(string name, int value)
			{
				return null;
			}

			[Token(Token = "0x60018AF")]
			[Address(RVA = "0x8B6698", Offset = "0x8B6698", VA = "0x8B6698", Slot = "8")]
			public Tracking.TrackingEvent AddParameter(string name, bool value)
			{
				return null;
			}

			[Token(Token = "0x60018B0")]
			[Address(RVA = "0x8B66DC", Offset = "0x8B66DC", VA = "0x8B66DC", Slot = "9")]
			public void Submit()
			{
			}

			[Token(Token = "0x60018B1")]
			[Address(RVA = "0x8B6774", Offset = "0x8B6774", VA = "0x8B6774", Slot = "3")]
			public override string ToString()
			{
				return null;
			}
		}

		[Token(Token = "0x4001B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private ErrorCheckingEvent currentEvent;

		[Token(Token = "0x60018A7")]
		[Address(RVA = "0x8B609C", Offset = "0x8B609C", VA = "0x8B609C", Slot = "4")]
		public Tracking.TrackingEvent Track(string eventName)
		{
			return null;
		}

		[Token(Token = "0x60018A8")]
		[Address(RVA = "0x8B6328", Offset = "0x8B6328", VA = "0x8B6328")]
		public ErrorCheckingTracker()
		{
		}
	}
	[Token(Token = "0x20003A7")]
	public class FirebaseTracking : UnityEngine.MonoBehaviour, Tracking.Tracker
	{
		[Token(Token = "0x60018B2")]
		[Address(RVA = "0x8B67C0", Offset = "0x8B67C0", VA = "0x8B67C0", Slot = "4")]
		private Tracking.TrackingEvent RGCommon.Tracking.Tracker.Track(string eventName)
		{
			return null;
		}

		[Token(Token = "0x60018B3")]
		[Address(RVA = "0x8B6810", Offset = "0x8B6810", VA = "0x8B6810")]
		public FirebaseTracking()
		{
		}
	}
	[Token(Token = "0x20003A8")]
	public class HTTPTracking : UnityEngine.MonoBehaviour, Tracking.Tracker, Tracking.TrackingEvent
	{
		[Token(Token = "0x20003A9")]
		private struct Timing
		{
			[Token(Token = "0x4001B30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float time;

			[Token(Token = "0x4001B31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float variation;
		}

		[Token(Token = "0x20003AA")]
		[CompilerGenerated]
		private sealed class <Quit>d__33 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001B32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001B33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001B34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HTTPTracking <>4__this;

			[Token(Token = "0x170002EE")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60018CD")]
				[Address(RVA = "0x8B7A38", Offset = "0x8B7A38", VA = "0x8B7A38", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002EF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60018CF")]
				[Address(RVA = "0x8B7A80", Offset = "0x8B7A80", VA = "0x8B7A80", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60018CA")]
			[Address(RVA = "0x8B75FC", Offset = "0x8B75FC", VA = "0x8B75FC")]
			[DebuggerHidden]
			public <Quit>d__33(int <>1__state)
			{
			}

			[Token(Token = "0x60018CB")]
			[Address(RVA = "0x8B7934", Offset = "0x8B7934", VA = "0x8B7934", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60018CC")]
			[Address(RVA = "0x8B7938", Offset = "0x8B7938", VA = "0x8B7938", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60018CE")]
			[Address(RVA = "0x8B7A40", Offset = "0x8B7A40", VA = "0x8B7A40", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003AB")]
		[CompilerGenerated]
		private sealed class <Start>d__34 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001B35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001B36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001B37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HTTPTracking <>4__this;

			[Token(Token = "0x4001B38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <nextSendTime>5__2;

			[Token(Token = "0x170002F0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60018D3")]
				[Address(RVA = "0x8B7BC4", Offset = "0x8B7BC4", VA = "0x8B7BC4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002F1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60018D5")]
				[Address(RVA = "0x8B7C0C", Offset = "0x8B7C0C", VA = "0x8B7C0C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60018D0")]
			[Address(RVA = "0x8B768C", Offset = "0x8B768C", VA = "0x8B768C")]
			[DebuggerHidden]
			public <Start>d__34(int <>1__state)
			{
			}

			[Token(Token = "0x60018D1")]
			[Address(RVA = "0x8B7A88", Offset = "0x8B7A88", VA = "0x8B7A88", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60018D2")]
			[Address(RVA = "0x8B7A8C", Offset = "0x8B7A8C", VA = "0x8B7A8C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60018D4")]
			[Address(RVA = "0x8B7BCC", Offset = "0x8B7BCC", VA = "0x8B7BCC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003AC")]
		[CompilerGenerated]
		private sealed class <SendPending>d__35 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001B39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001B3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001B3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HTTPTracking <>4__this;

			[Token(Token = "0x4001B3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private string <prefsKey>5__2;

			[Token(Token = "0x170002F2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60018D9")]
				[Address(RVA = "0x8B80E0", Offset = "0x8B80E0", VA = "0x8B80E0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002F3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60018DB")]
				[Address(RVA = "0x8B8128", Offset = "0x8B8128", VA = "0x8B8128", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60018D6")]
			[Address(RVA = "0x8B771C", Offset = "0x8B771C", VA = "0x8B771C")]
			[DebuggerHidden]
			public <SendPending>d__35(int <>1__state)
			{
			}

			[Token(Token = "0x60018D7")]
			[Address(RVA = "0x8B7C14", Offset = "0x8B7C14", VA = "0x8B7C14", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60018D8")]
			[Address(RVA = "0x8B7C18", Offset = "0x8B7C18", VA = "0x8B7C18", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60018DA")]
			[Address(RVA = "0x8B80E8", Offset = "0x8B80E8", VA = "0x8B80E8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20003AD")]
		[CompilerGenerated]
		private sealed class <SendBatch>d__37 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001B3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001B3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001B3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int batchNumber;

			[Token(Token = "0x4001B40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string eventsData;

			[Token(Token = "0x4001B41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public HTTPTracking <>4__this;

			[Token(Token = "0x4001B42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private UnityWebRequest <request>5__2;

			[Token(Token = "0x170002F4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60018E0")]
				[Address(RVA = "0x8B8D58", Offset = "0x8B8D58", VA = "0x8B8D58", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002F5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60018E2")]
				[Address(RVA = "0x8B8DA0", Offset = "0x8B8DA0", VA = "0x8B8DA0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60018DC")]
			[Address(RVA = "0x8B77C0", Offset = "0x8B77C0", VA = "0x8B77C0")]
			[DebuggerHidden]
			public <SendBatch>d__37(int <>1__state)
			{
			}

			[Token(Token = "0x60018DD")]
			[Address(RVA = "0x8B8130", Offset = "0x8B8130", VA = "0x8B8130", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60018DE")]
			[Address(RVA = "0x8B814C", Offset = "0x8B814C", VA = "0x8B814C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60018DF")]
			[Address(RVA = "0x8B8CA8", Offset = "0x8B8CA8", VA = "0x8B8CA8")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60018E1")]
			[Address(RVA = "0x8B8D60", Offset = "0x8B8D60", VA = "0x8B8D60", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001B1D")]
		private const float highFrequencyTime = 300f;

		[Token(Token = "0x4001B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Timing highFrequencyTimeBetweenSends;

		[Token(Token = "0x4001B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly Timing standardTimeBetweenSends;

		[Token(Token = "0x4001B20")]
		private const string serverUrl = "https://e.resgam.com/";

		[Token(Token = "0x4001B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly DateTime epoch;

		[Token(Token = "0x4001B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static string baseUrl;

		[Token(Token = "0x4001B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private StringBuilder eventLog;

		[Token(Token = "0x4001B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool eventOngoing;

		[Token(Token = "0x4001B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool quitting;

		[Token(Token = "0x4001B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool sendNow;

		[Token(Token = "0x4001B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		private bool stopped;

		[Token(Token = "0x4001B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly string NEXT_BATCH_NUMBER_KEY;

		[Token(Token = "0x4001B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly string FIRST_UNSENT_BATCH_KEY;

		[Token(Token = "0x4001B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly string BATCH_KEY_PREFIX;

		[Token(Token = "0x4001B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int currentBatchNumber;

		[Token(Token = "0x4001B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int firstUnsentBatch;

		[Token(Token = "0x4001B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool lastSendFailed;

		[Token(Token = "0x4001B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int lastResponseCode;

		[Token(Token = "0x4001B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int consecutiveSendFailures;

		[Token(Token = "0x60018B4")]
		[Address(RVA = "0x8B6818", Offset = "0x8B6818", VA = "0x8B6818", Slot = "5")]
		public Tracking.TrackingEvent AddParameter(string name, string value)
		{
			return null;
		}

		[Token(Token = "0x60018B5")]
		[Address(RVA = "0x8B69F0", Offset = "0x8B69F0", VA = "0x8B69F0", Slot = "7")]
		public Tracking.TrackingEvent AddParameter(string name, float value)
		{
			return null;
		}

		[Token(Token = "0x60018B6")]
		[Address(RVA = "0x8B6B08", Offset = "0x8B6B08", VA = "0x8B6B08", Slot = "9")]
		public Tracking.TrackingEvent AddParameter(string name, bool value)
		{
			return null;
		}

		[Token(Token = "0x60018B7")]
		[Address(RVA = "0x8B6BE8", Offset = "0x8B6BE8", VA = "0x8B6BE8", Slot = "8")]
		public Tracking.TrackingEvent AddParameter(string name, double value)
		{
			return null;
		}

		[Token(Token = "0x60018B8")]
		[Address(RVA = "0x8B6D00", Offset = "0x8B6D00", VA = "0x8B6D00", Slot = "6")]
		public Tracking.TrackingEvent AddParameter(string name, int value)
		{
			return null;
		}

		[Token(Token = "0x60018B9")]
		[Address(RVA = "0x8B6E18", Offset = "0x8B6E18", VA = "0x8B6E18", Slot = "10")]
		public void Submit()
		{
		}

		[Token(Token = "0x60018BA")]
		[Address(RVA = "0x8B6E40", Offset = "0x8B6E40", VA = "0x8B6E40", Slot = "4")]
		public Tracking.TrackingEvent Track(string eventName)
		{
			return null;
		}

		[Token(Token = "0x60018BB")]
		[Address(RVA = "0x8B7014", Offset = "0x8B7014", VA = "0x8B7014")]
		public void Awake()
		{
		}

		[Token(Token = "0x60018BC")]
		[Address(RVA = "0x8B7294", Offset = "0x8B7294", VA = "0x8B7294")]
		public bool HasOutgoingEvents()
		{
			return default(bool);
		}

		[Token(Token = "0x60018BD")]
		[Address(RVA = "0x8B72D8", Offset = "0x8B72D8", VA = "0x8B72D8")]
		public void SendNow()
		{
		}

		[Token(Token = "0x60018BE")]
		[Address(RVA = "0x8B72E4", Offset = "0x8B72E4", VA = "0x8B72E4")]
		private bool OnWantsToQuit()
		{
			return default(bool);
		}

		[Token(Token = "0x60018BF")]
		[Address(RVA = "0x8B73EC", Offset = "0x8B73EC", VA = "0x8B73EC")]
		private void OnApplicationPause(bool pause)
		{
		}

		[Token(Token = "0x60018C0")]
		[Address(RVA = "0x8B75C8", Offset = "0x8B75C8", VA = "0x8B75C8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60018C1")]
		[Address(RVA = "0x8B7384", Offset = "0x8B7384", VA = "0x8B7384")]
		[IteratorStateMachine(typeof(<Quit>d__33))]
		private IEnumerator Quit()
		{
			return null;
		}

		[Token(Token = "0x60018C2")]
		[Address(RVA = "0x8B7624", Offset = "0x8B7624", VA = "0x8B7624")]
		[IteratorStateMachine(typeof(<Start>d__34))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x60018C3")]
		[Address(RVA = "0x8B76B4", Offset = "0x8B76B4", VA = "0x8B76B4")]
		[IteratorStateMachine(typeof(<SendPending>d__35))]
		private IEnumerator SendPending()
		{
			return null;
		}

		[Token(Token = "0x60018C4")]
		[Address(RVA = "0x8B73F8", Offset = "0x8B73F8", VA = "0x8B73F8")]
		private void EndBatch()
		{
		}

		[Token(Token = "0x60018C5")]
		[Address(RVA = "0x8B7744", Offset = "0x8B7744", VA = "0x8B7744")]
		[IteratorStateMachine(typeof(<SendBatch>d__37))]
		private IEnumerator SendBatch(int batchNumber, string eventsData)
		{
			return null;
		}

		[Token(Token = "0x60018C6")]
		[Address(RVA = "0x8B68E8", Offset = "0x8B68E8", VA = "0x8B68E8")]
		private static string Encode(string v)
		{
			return null;
		}

		[Token(Token = "0x60018C7")]
		[Address(RVA = "0x8B6F68", Offset = "0x8B6F68", VA = "0x8B6F68")]
		private static double GetTimestamp()
		{
			return default(double);
		}

		[Token(Token = "0x60018C8")]
		[Address(RVA = "0x8B77E8", Offset = "0x8B77E8", VA = "0x8B77E8")]
		public HTTPTracking()
		{
		}
	}
	[Token(Token = "0x20003AE")]
	public class LifecycleTracking : UnityEngine.MonoBehaviour
	{
		[Token(Token = "0x4001B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string platform;

		[Token(Token = "0x4001B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string PRODUCT_VERSION_KEY;

		[Token(Token = "0x4001B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool hasSentStopEvent;

		[Token(Token = "0x4001B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private bool? lastKnownPause;

		[Token(Token = "0x4001B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string androidVersion;

		[Token(Token = "0x60018E3")]
		[Address(RVA = "0x8B8DA8", Offset = "0x8B8DA8", VA = "0x8B8DA8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60018E4")]
		[Address(RVA = "0x8B8E00", Offset = "0x8B8E00", VA = "0x8B8E00")]
		private void Start()
		{
		}

		[Token(Token = "0x60018E5")]
		[Address(RVA = "0x8B968C", Offset = "0x8B968C", VA = "0x8B968C")]
		private void OnApplicationPause(bool pause)
		{
		}

		[Token(Token = "0x60018E6")]
		[Address(RVA = "0x8B97FC", Offset = "0x8B97FC", VA = "0x8B97FC")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x60018E7")]
		[Address(RVA = "0x8B91F4", Offset = "0x8B91F4", VA = "0x8B91F4")]
		private Tracking.TrackingEvent AddCommonParameters(Tracking.TrackingEvent ev)
		{
			return null;
		}

		[Token(Token = "0x60018E8")]
		[Address(RVA = "0x8B98D0", Offset = "0x8B98D0", VA = "0x8B98D0")]
		public LifecycleTracking()
		{
		}
	}
	[Token(Token = "0x20003AF")]
	internal class MultiTracker : Tracking.Tracker
	{
		[Token(Token = "0x20003B0")]
		private class MultiEvent : Tracking.TrackingEvent
		{
			[Token(Token = "0x4001B49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private Tracking.TrackingEvent[] events;

			[Token(Token = "0x60018EC")]
			[Address(RVA = "0x8B9CDC", Offset = "0x8B9CDC", VA = "0x8B9CDC")]
			public MultiEvent(Tracking.TrackingEvent[] events)
			{
			}

			[Token(Token = "0x60018ED")]
			[Address(RVA = "0x8B9D80", Offset = "0x8B9D80", VA = "0x8B9D80", Slot = "5")]
			public Tracking.TrackingEvent AddParameter(string name, int value)
			{
				return null;
			}

			[Token(Token = "0x60018EE")]
			[Address(RVA = "0x8B9E8C", Offset = "0x8B9E8C", VA = "0x8B9E8C", Slot = "7")]
			public Tracking.TrackingEvent AddParameter(string name, double value)
			{
				return null;
			}

			[Token(Token = "0x60018EF")]
			[Address(RVA = "0x8B9FA0", Offset = "0x8B9FA0", VA = "0x8B9FA0", Slot = "8")]
			public Tracking.TrackingEvent AddParameter(string name, bool value)
			{
				return null;
			}

			[Token(Token = "0x60018F0")]
			[Address(RVA = "0x8BA0B0", Offset = "0x8BA0B0", VA = "0x8BA0B0", Slot = "6")]
			public Tracking.TrackingEvent AddParameter(string name, float value)
			{
				return null;
			}

			[Token(Token = "0x60018F1")]
			[Address(RVA = "0x8BA1C4", Offset = "0x8BA1C4", VA = "0x8BA1C4", Slot = "4")]
			public Tracking.TrackingEvent AddParameter(string name, string value)
			{
				return null;
			}

			[Token(Token = "0x60018F2")]
			[Address(RVA = "0x8BA2CC", Offset = "0x8BA2CC", VA = "0x8BA2CC", Slot = "9")]
			public void Submit()
			{
			}
		}

		[Token(Token = "0x4001B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public List<Tracking.Tracker> trackers;

		[Token(Token = "0x60018EA")]
		[Address(RVA = "0x8B9938", Offset = "0x8B9938", VA = "0x8B9938", Slot = "4")]
		public Tracking.TrackingEvent Track(string eventName)
		{
			return null;
		}

		[Token(Token = "0x60018EB")]
		[Address(RVA = "0x8B9D04", Offset = "0x8B9D04", VA = "0x8B9D04")]
		public MultiTracker()
		{
		}
	}
	[Token(Token = "0x20003B1")]
	public static class SimpleTracking
	{
		[Token(Token = "0x20003B2")]
		public struct Settings
		{
			[Token(Token = "0x4001B4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public string productName;

			[Token(Token = "0x4001B4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string platform;
		}

		[Token(Token = "0x4001B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool started;

		[Token(Token = "0x4001B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static HTTPTracking httpTracking;

		[Token(Token = "0x60018F3")]
		[Address(RVA = "0x8BA55C", Offset = "0x8BA55C", VA = "0x8BA55C")]
		public static void Start(Settings settings)
		{
		}
	}
	[Token(Token = "0x20003B3")]
	public static class Tracking
	{
		[Token(Token = "0x20003B4")]
		public interface TrackingEvent
		{
			[Token(Token = "0x60018FB")]
			TrackingEvent AddParameter(string name, string value);

			[Token(Token = "0x60018FC")]
			TrackingEvent AddParameter(string name, int value);

			[Token(Token = "0x60018FD")]
			TrackingEvent AddParameter(string name, float value);

			[Token(Token = "0x60018FE")]
			TrackingEvent AddParameter(string name, double value);

			[Token(Token = "0x60018FF")]
			TrackingEvent AddParameter(string name, bool value);

			[Token(Token = "0x6001900")]
			void Submit();
		}

		[Token(Token = "0x20003B5")]
		public interface Tracker
		{
			[Token(Token = "0x6001901")]
			TrackingEvent Track(string eventName);
		}

		[Token(Token = "0x4001B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string installationId;

		[Token(Token = "0x4001B4F")]
		private const string installationIdPrefsKey = "installationId";

		[Token(Token = "0x4001B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static string productId;

		[Token(Token = "0x4001B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Tracker tracker;

		[Token(Token = "0x60018F4")]
		[Address(RVA = "0x8B7FE8", Offset = "0x8B7FE8", VA = "0x8B7FE8")]
		public static TrackingEvent Track(string eventName)
		{
			return null;
		}

		[Token(Token = "0x60018F5")]
		[Address(RVA = "0x8B70F8", Offset = "0x8B70F8", VA = "0x8B70F8")]
		public static void RegisterTracker(Tracker newTracker)
		{
		}

		[Token(Token = "0x60018F6")]
		[Address(RVA = "0x8BA714", Offset = "0x8BA714", VA = "0x8BA714")]
		public static void DeregisterTracker(Tracker trackerToBeRemoved)
		{
		}

		[Token(Token = "0x60018F7")]
		[Address(RVA = "0x8BA7EC", Offset = "0x8BA7EC", VA = "0x8BA7EC")]
		public static void SetProduct(string product)
		{
		}

		[Token(Token = "0x60018F8")]
		[Address(RVA = "0x8B8B24", Offset = "0x8B8B24", VA = "0x8B8B24")]
		public static string GetProduct()
		{
			return null;
		}

		[Token(Token = "0x60018F9")]
		[Address(RVA = "0x8B8BBC", Offset = "0x8B8BBC", VA = "0x8B8BBC")]
		public static string GetVersion()
		{
			return null;
		}

		[Token(Token = "0x60018FA")]
		[Address(RVA = "0x8B8BC0", Offset = "0x8B8BC0", VA = "0x8B8BC0")]
		public static string GetUserId()
		{
			return null;
		}
	}
	[Token(Token = "0x20003B6")]
	public static class TrackingNames
	{
		[Token(Token = "0x4001B52")]
		public const string eventAddPaymentInfo = "add_payment_info";

		[Token(Token = "0x4001B53")]
		public const string eventAddToCart = "add_to_cart";

		[Token(Token = "0x4001B54")]
		public const string eventAddToWishlist = "add_to_wishlist";

		[Token(Token = "0x4001B55")]
		public const string eventAppOpen = "app_open";

		[Token(Token = "0x4001B56")]
		public const string eventBeginCheckout = "begin_checkout";

		[Token(Token = "0x4001B57")]
		public const string eventCampaignDetails = "campaign_details";

		[Token(Token = "0x4001B58")]
		public const string eventCheckoutProgress = "checkout_progress";

		[Token(Token = "0x4001B59")]
		public const string eventEarnVirtualCurrency = "earn_virtual_currency";

		[Token(Token = "0x4001B5A")]
		public const string eventEcommercePurchase = "ecommerce_purchase";

		[Token(Token = "0x4001B5B")]
		public const string eventGenerateLead = "generate_lead";

		[Token(Token = "0x4001B5C")]
		public const string eventJoinGroup = "join_group";

		[Token(Token = "0x4001B5D")]
		public const string eventLevelUp = "level_up";

		[Token(Token = "0x4001B5E")]
		public const string eventLogin = "login";

		[Token(Token = "0x4001B5F")]
		public const string eventPostScore = "post_score";

		[Token(Token = "0x4001B60")]
		public const string eventPresentOffer = "present_offer";

		[Token(Token = "0x4001B61")]
		public const string eventPurchaseRefund = "purchase_refund";

		[Token(Token = "0x4001B62")]
		public const string eventRemoveFromCart = "remove_from_cart";

		[Token(Token = "0x4001B63")]
		public const string eventSearch = "search";

		[Token(Token = "0x4001B64")]
		public const string eventSelectContent = "select_content";

		[Token(Token = "0x4001B65")]
		public const string eventSetCheckoutOption = "set_checkout_option";

		[Token(Token = "0x4001B66")]
		public const string eventShare = "share";

		[Token(Token = "0x4001B67")]
		public const string eventSignUp = "sign_up";

		[Token(Token = "0x4001B68")]
		public const string eventSpendVirtualCurrency = "spend_virtual_currency";

		[Token(Token = "0x4001B69")]
		public const string eventTutorialBegin = "tutorial_begin";

		[Token(Token = "0x4001B6A")]
		public const string eventTutorialComplete = "tutorial_complete";

		[Token(Token = "0x4001B6B")]
		public const string eventUnlockAchievement = "unlock_achievement";

		[Token(Token = "0x4001B6C")]
		public const string eventViewItem = "view_item";

		[Token(Token = "0x4001B6D")]
		public const string eventViewItemList = "view_item_list";

		[Token(Token = "0x4001B6E")]
		public const string eventViewSearchResults = "view_search_results";

		[Token(Token = "0x4001B6F")]
		public const string parameterAchievementId = "achievement_id";

		[Token(Token = "0x4001B70")]
		public const string parameterAdNetworkClickID = "aclid";

		[Token(Token = "0x4001B71")]
		public const string parameterAffiliation = "affiliation";

		[Token(Token = "0x4001B72")]
		public const string parameterCampaign = "campaign";

		[Token(Token = "0x4001B73")]
		public const string parameterCharacter = "character";

		[Token(Token = "0x4001B74")]
		public const string parameterCheckoutOption = "checkout_option";

		[Token(Token = "0x4001B75")]
		public const string parameterCheckoutStep = "checkout_step";

		[Token(Token = "0x4001B76")]
		public const string parameterContent = "content";

		[Token(Token = "0x4001B77")]
		public const string parameterContentType = "content_type";

		[Token(Token = "0x4001B78")]
		public const string parameterCoupon = "coupon";

		[Token(Token = "0x4001B79")]
		public const string parameterCP1 = "cp1";

		[Token(Token = "0x4001B7A")]
		public const string parameterCreativeName = "creative_name";

		[Token(Token = "0x4001B7B")]
		public const string parameterCreativeSlot = "creative_slot";

		[Token(Token = "0x4001B7C")]
		public const string parameterCurrency = "currency";

		[Token(Token = "0x4001B7D")]
		public const string parameterDestination = "destination";

		[Token(Token = "0x4001B7E")]
		public const string parameterEndDate = "end_date";

		[Token(Token = "0x4001B7F")]
		public const string parameterFlightNumber = "flight_number";

		[Token(Token = "0x4001B80")]
		public const string parameterGroupId = "group_id";

		[Token(Token = "0x4001B81")]
		public const string parameterItemBrand = "item_brand";

		[Token(Token = "0x4001B82")]
		public const string parameterItemCategory = "item_category";

		[Token(Token = "0x4001B83")]
		public const string parameterItemId = "item_id";

		[Token(Token = "0x4001B84")]
		public const string parameterItemList = "item_list";

		[Token(Token = "0x4001B85")]
		public const string parameterItemLocationId = "item_location_id";

		[Token(Token = "0x4001B86")]
		public const string parameterItemName = "item_name";

		[Token(Token = "0x4001B87")]
		public const string parameterItemVariant = "item_variant";

		[Token(Token = "0x4001B88")]
		public const string parameterLevel = "level";

		[Token(Token = "0x4001B89")]
		public const string parameterLocation = "location";

		[Token(Token = "0x4001B8A")]
		public const string parameterMedium = "medium";

		[Token(Token = "0x4001B8B")]
		public const string parameterNumberOfNights = "number_of_nights";

		[Token(Token = "0x4001B8C")]
		public const string parameterNumberOfPassengers = "number_of_passengers";

		[Token(Token = "0x4001B8D")]
		public const string parameterNumberOfRooms = "number_of_rooms";

		[Token(Token = "0x4001B8E")]
		public const string parameterOrigin = "origin";

		[Token(Token = "0x4001B8F")]
		public const string parameterPrice = "price";

		[Token(Token = "0x4001B90")]
		public const string parameterQuantity = "quantity";

		[Token(Token = "0x4001B91")]
		public const string parameterScore = "score";

		[Token(Token = "0x4001B92")]
		public const string parameterSearchTerm = "search_term";

		[Token(Token = "0x4001B93")]
		public const string parameterShipping = "shipping";

		[Token(Token = "0x4001B94")]
		public const string parameterSignUpMethod = "sign_up_method";

		[Token(Token = "0x4001B95")]
		public const string parameterSource = "source";

		[Token(Token = "0x4001B96")]
		public const string parameterStartDate = "start_date";

		[Token(Token = "0x4001B97")]
		public const string parameterTax = "tax";

		[Token(Token = "0x4001B98")]
		public const string parameterTerm = "term";

		[Token(Token = "0x4001B99")]
		public const string parameterTransactionId = "transaction_id";

		[Token(Token = "0x4001B9A")]
		public const string parameterTravelClass = "travel_class";

		[Token(Token = "0x4001B9B")]
		public const string parameterValue = "value";

		[Token(Token = "0x4001B9C")]
		public const string parameterVirtualCurrencyName = "virtual_currency_name";

		[Token(Token = "0x4001B9D")]
		public const string userPropertySignUpMethod = "sign_up_method";
	}
	[Token(Token = "0x20003B7")]
	public class TrackingPlatformNames
	{
		[Token(Token = "0x4001B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string Quest;

		[Token(Token = "0x4001B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string Quest2;

		[Token(Token = "0x4001BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string Rift;

		[Token(Token = "0x4001BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static string SteamVR;

		[Token(Token = "0x4001BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static string Windows;

		[Token(Token = "0x4001BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static string[] SuggestedPlarformNames;

		[Token(Token = "0x6001902")]
		[Address(RVA = "0x8BA838", Offset = "0x8BA838", VA = "0x8BA838")]
		public TrackingPlatformNames()
		{
		}
	}
	[Token(Token = "0x20003B8")]
	public class FollowPose : UnityEngine.MonoBehaviour
	{
		[Token(Token = "0x4001BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The object to follow if not main camera")]
		public Transform objectToFollow;

		[Token(Token = "0x4001BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("How long it takes for the object to settle at the target object's position")]
		[SerializeField]
		private float movementSmoothTime;

		[Token(Token = "0x4001BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[Tooltip("How long it takes for the object to settle at the target object's rotation")]
		private float rotationSmoothTime;

		[Token(Token = "0x4001BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Offset from target object's global position")]
		[SerializeField]
		private Vector3 globalPositionOffset;

		[Token(Token = "0x4001BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Offset from target object's local position")]
		[SerializeField]
		private Vector3 localPositionOffset;

		[Token(Token = "0x4001BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Offset from target object's local position")]
		[SerializeField]
		private Vector3 rotationOffset;

		[Token(Token = "0x4001BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		[Tooltip("Make sure the horizon stays straight")]
		private bool keepHorizontal;

		[Token(Token = "0x4001BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private new Transform transform;

		[Token(Token = "0x4001BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 movementVelocity;

		[Token(Token = "0x4001BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Quaternion rotationVelocity;

		[Token(Token = "0x6001904")]
		[Address(RVA = "0x8BAA44", Offset = "0x8BAA44", VA = "0x8BAA44")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001905")]
		[Address(RVA = "0x8BAA60", Offset = "0x8BAA60", VA = "0x8BAA60")]
		private void Update()
		{
		}

		[Token(Token = "0x6001906")]
		[Address(RVA = "0x8BADBC", Offset = "0x8BADBC", VA = "0x8BADBC")]
		private static Quaternion SmoothDamp(Quaternion rot, Quaternion target, ref Quaternion deriv, float time)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001907")]
		[Address(RVA = "0x8BB030", Offset = "0x8BB030", VA = "0x8BB030")]
		public FollowPose()
		{
		}
	}
	[Token(Token = "0x20003B9")]
	public class VideoSlate : UnityEngine.MonoBehaviour
	{
		[Token(Token = "0x4001BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public KeyCode visibilityKey;

		[Token(Token = "0x4001BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public KeyCode slateKey;

		[Token(Token = "0x4001BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GUIStyle guiStyle;

		[Token(Token = "0x4001BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int framesLeft;

		[Token(Token = "0x4001BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Texture2D bgTexture;

		[Token(Token = "0x4001BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int slateNumber;

		[Token(Token = "0x4001BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool showSlateNumber;

		[Token(Token = "0x4001BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AudioSource audioSource;

		[Token(Token = "0x6001908")]
		[Address(RVA = "0x8BC0C8", Offset = "0x8BC0C8", VA = "0x8BC0C8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001909")]
		[Address(RVA = "0x8BC21C", Offset = "0x8BC21C", VA = "0x8BC21C")]
		private void Update()
		{
		}

		[Token(Token = "0x600190A")]
		[Address(RVA = "0x8BC2E8", Offset = "0x8BC2E8", VA = "0x8BC2E8")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600190B")]
		[Address(RVA = "0x8BC6B0", Offset = "0x8BC6B0", VA = "0x8BC6B0")]
		public VideoSlate()
		{
		}
	}
}
namespace RGCommon.Network
{
	[Token(Token = "0x20003BA")]
	public interface NetworkConnectionProxy
	{
		[Token(Token = "0x600190C")]
		void Connect(string networkProtocolVersion);

		[Token(Token = "0x600190D")]
		void JoinLobby(string lobbyName);

		[Token(Token = "0x600190E")]
		void JoinRoom(string roomCode);

		[Token(Token = "0x600190F")]
		void LeaveRoom(string roomCode);

		[Token(Token = "0x6001910")]
		void Reconnect();

		[Token(Token = "0x6001911")]
		void RejoinRoom(string roomCode);

		[Token(Token = "0x6001912")]
		void CreateRoom(string roomCode, int maxPlayers, bool isVisible);

		[Token(Token = "0x6001913")]
		int GetPingRoundtripTime();

		[Token(Token = "0x6001914")]
		int GetReliableSendsCount();

		[Token(Token = "0x6001915")]
		int GetReliableResendsCount();

		[Token(Token = "0x6001916")]
		double GetTime();

		[Token(Token = "0x6001917")]
		void Disconnect();

		[Token(Token = "0x6001918")]
		float GetSerializationRate();

		[Token(Token = "0x6001919")]
		Dictionary<NetworkingRegion, int> GetRegionPings();
	}
	[Token(Token = "0x20003BB")]
	public enum NetworkConnectionState
	{
		[Token(Token = "0x4001BB7")]
		Disconnected,
		[Token(Token = "0x4001BB8")]
		Connected,
		[Token(Token = "0x4001BB9")]
		Joined,
		[Token(Token = "0x4001BBA")]
		Connecting,
		[Token(Token = "0x4001BBB")]
		Joining,
		[Token(Token = "0x4001BBC")]
		Leaving,
		[Token(Token = "0x4001BBD")]
		CreatingRoom,
		[Token(Token = "0x4001BBE")]
		Disconnecting,
		[Token(Token = "0x4001BBF")]
		JoiningLobby
	}
	[Token(Token = "0x20003BC")]
	public enum NetworkConnectionEvent
	{
		[Token(Token = "0x4001BC1")]
		OnConnect,
		[Token(Token = "0x4001BC2")]
		OnConnectFail,
		[Token(Token = "0x4001BC3")]
		OnDisconnectError,
		[Token(Token = "0x4001BC4")]
		OnDisconnectIntentional,
		[Token(Token = "0x4001BC5")]
		OnJoin,
		[Token(Token = "0x4001BC6")]
		OnJoinFail,
		[Token(Token = "0x4001BC7")]
		OnJoinFailExpectedRejoin,
		[Token(Token = "0x4001BC8")]
		OnLeftRoom,
		[Token(Token = "0x4001BC9")]
		OnJoinedLobby,
		[Token(Token = "0x4001BCA")]
		OnCreatedRoom,
		[Token(Token = "0x4001BCB")]
		OnCreateRoomFailed,
		[Token(Token = "0x4001BCC")]
		RequestConnect,
		[Token(Token = "0x4001BCD")]
		RequestJoin,
		[Token(Token = "0x4001BCE")]
		RequestLeaveRoom,
		[Token(Token = "0x4001BCF")]
		RequestCreateRoom,
		[Token(Token = "0x4001BD0")]
		RequestDisconnect,
		[Token(Token = "0x4001BD1")]
		Tick,
		[Token(Token = "0x4001BD2")]
		OnLeftLobby
	}
	[Token(Token = "0x20003BD")]
	public enum NetworkPeerEvent
	{
		[Token(Token = "0x4001BD4")]
		Active,
		[Token(Token = "0x4001BD5")]
		Inactive,
		[Token(Token = "0x4001BD6")]
		Connect,
		[Token(Token = "0x4001BD7")]
		Disconnect
	}
	[Token(Token = "0x20003BE")]
	public static class NetworkSettings
	{
		[Token(Token = "0x4001BD8")]
		public const int NUMBER_OF_TICKS_PER_PING_MEASUREMENT = 100;

		[Token(Token = "0x4001BD9")]
		public const int NUMBER_OF_PING_MEASUREMENTS = 30;

		[Token(Token = "0x4001BDA")]
		public const int APP_BACKGROUND_DISCONNECT_TIMEOUT = 0;

		[Token(Token = "0x4001BDB")]
		public const int PHOTON_NETWORK_SENDRATE = 20;

		[Token(Token = "0x4001BDC")]
		public const int PLAYER_TTL = 5000;

		[Token(Token = "0x4001BDD")]
		public const int MAX_PLAYERS = 2;

		[Token(Token = "0x4001BDE")]
		public const int MAX_SPECTATORS = 8;
	}
	[Token(Token = "0x20003BF")]
	public struct PeerEvent
	{
		[Token(Token = "0x4001BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly NetworkPeerEvent networkEvent;

		[Token(Token = "0x4001BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public readonly int serverID;

		[Token(Token = "0x4001BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string userID;

		[Token(Token = "0x600191A")]
		[Address(RVA = "0x8BC72C", Offset = "0x8BC72C", VA = "0x8BC72C")]
		public PeerEvent(NetworkPeerEvent networkEvent, int netID, string userID)
		{
		}
	}
	[Token(Token = "0x20003C0")]
	public enum FailJoinRoomReasons
	{
		[Token(Token = "0x4001BE3")]
		None,
		[Token(Token = "0x4001BE4")]
		RoomDoesNotExist,
		[Token(Token = "0x4001BE5")]
		RoomIsFull,
		[Token(Token = "0x4001BE6")]
		FailExpectedRejoin
	}
	[Token(Token = "0x20003C1")]
	public struct PlayerNetworkData
	{
		[Token(Token = "0x4001BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public readonly int netID;

		[Token(Token = "0x4001BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public readonly string userID;

		[Token(Token = "0x600191B")]
		[Address(RVA = "0x8BC738", Offset = "0x8BC738", VA = "0x8BC738")]
		public PlayerNetworkData(int netID, string userID)
		{
		}
	}
	[Token(Token = "0x20003C2")]
	public class NetworkData
	{
		[Token(Token = "0x4001BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public NetworkConnectionState networkConnectionStatePrev;

		[Token(Token = "0x4001BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public NetworkConnectionState networkConnectionState;

		[Token(Token = "0x4001BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string roomCode;

		[Token(Token = "0x4001BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool roomIsVisible;

		[Token(Token = "0x4001BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int maxNumberOfPlayersInRoom;

		[Token(Token = "0x4001BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool isMaster;

		[Token(Token = "0x4001BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int masterID;

		[Token(Token = "0x4001BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int localPlayerServerId;

		[Token(Token = "0x4001BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public readonly Queue<NetworkConnectionEvent> networkConnectionEventQueue;

		[Token(Token = "0x4001BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public readonly Queue<PeerEvent> networkPeerEventQueue;

		[Token(Token = "0x4001BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public FailJoinRoomReasons lastJoinRoomFailReason;

		[Token(Token = "0x4001BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float serializationRate;

		[Token(Token = "0x4001BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int ticksSinceLastPing;

		[Token(Token = "0x4001BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public int nextPingMeasurementIndex;

		[Token(Token = "0x4001BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public readonly double[] timeMeasurements;

		[Token(Token = "0x4001BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public readonly int[] pingMeasurements;

		[Token(Token = "0x4001BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public readonly int[] reliableResendMeasurements;

		[Token(Token = "0x4001BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public readonly double[] lossPerSecondMeasurements;

		[Token(Token = "0x4001BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public int currentPing;

		[Token(Token = "0x4001BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public int disconnectCount;

		[Token(Token = "0x4001BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public List<string> rooms;

		[Token(Token = "0x4001BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool shouldJoinLobby;

		[Token(Token = "0x4001BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public string lobbyName;

		[Token(Token = "0x4001C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public NetworkingRegion selectedNetworkingRegion;

		[Token(Token = "0x4001C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public int consecutiveConnectErrorCount;

		[Token(Token = "0x4001C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Dictionary<NetworkingRegion, int> regionPings;

		[Token(Token = "0x600191C")]
		[Address(RVA = "0x8BC744", Offset = "0x8BC744", VA = "0x8BC744")]
		public NetworkData()
		{
		}
	}
	[Token(Token = "0x20003C3")]
	public interface NetworkRegionSelector
	{
		[Token(Token = "0x600191D")]
		void SelectRegion(NetworkingRegion region);

		[Token(Token = "0x600191E")]
		NetworkingRegion GetSelectedRegion();
	}
	[Token(Token = "0x20003C4")]
	public interface NetworkRegionProvider
	{
		[Token(Token = "0x600191F")]
		NetworkingRegion GetCurrentRegion();
	}
	[Token(Token = "0x20003C5")]
	public enum NetworkingRegion
	{
		[Token(Token = "0x4001C04")]
		None,
		[Token(Token = "0x4001C05")]
		Best,
		[Token(Token = "0x4001C06")]
		EU,
		[Token(Token = "0x4001C07")]
		US,
		[Token(Token = "0x4001C08")]
		Asia,
		[Token(Token = "0x4001C09")]
		Japan,
		[Token(Token = "0x4001C0A")]
		Australia,
		[Token(Token = "0x4001C0B")]
		UsWest,
		[Token(Token = "0x4001C0C")]
		SouthAmerica,
		[Token(Token = "0x4001C0D")]
		India,
		[Token(Token = "0x4001C0E")]
		CanadaEast,
		[Token(Token = "0x4001C0F")]
		SouthKorea,
		[Token(Token = "0x4001C10")]
		Russia,
		[Token(Token = "0x4001C11")]
		RussiaEast,
		[Token(Token = "0x4001C12")]
		ChineseMainland,
		[Token(Token = "0x4001C13")]
		SouthAfrica
	}
}
namespace RGCommon.VectorExtensions
{
	[Token(Token = "0x20003C6")]
	public static class VectorComponentReplacement
	{
		[Token(Token = "0x6001920")]
		[Address(RVA = "0x8BC8C4", Offset = "0x8BC8C4", VA = "0x8BC8C4")]
		public static Vector3 WithX(this Vector3 original, float newX)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001921")]
		[Address(RVA = "0x8BC8CC", Offset = "0x8BC8CC", VA = "0x8BC8CC")]
		public static Vector3 WithY(this Vector3 original, float newY)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001922")]
		[Address(RVA = "0x8BC8D4", Offset = "0x8BC8D4", VA = "0x8BC8D4")]
		public static Vector3 WithZ(this Vector3 original, float newZ)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001923")]
		[Address(RVA = "0x8BC8DC", Offset = "0x8BC8DC", VA = "0x8BC8DC")]
		public static Vector2 WithX(this Vector2 original, float newX)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001924")]
		[Address(RVA = "0x8BC8E4", Offset = "0x8BC8E4", VA = "0x8BC8E4")]
		public static Vector2 WithY(this Vector2 original, float newY)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001925")]
		[Address(RVA = "0x8BC8EC", Offset = "0x8BC8EC", VA = "0x8BC8EC")]
		public static Vector3 NegX(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001926")]
		[Address(RVA = "0x8BC8F4", Offset = "0x8BC8F4", VA = "0x8BC8F4")]
		public static Vector3 NegY(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001927")]
		[Address(RVA = "0x8BC8FC", Offset = "0x8BC8FC", VA = "0x8BC8FC")]
		public static Vector3 NegZ(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001928")]
		[Address(RVA = "0x8BC904", Offset = "0x8BC904", VA = "0x8BC904")]
		public static Vector2 NegX(this Vector2 original)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001929")]
		[Address(RVA = "0x8BC90C", Offset = "0x8BC90C", VA = "0x8BC90C")]
		public static Vector2 NegY(this Vector2 original)
		{
			return default(Vector2);
		}
	}
	[Token(Token = "0x20003C7")]
	public static class VectorSwizzle
	{
		[Token(Token = "0x600192A")]
		[Address(RVA = "0x8BC914", Offset = "0x8BC914", VA = "0x8BC914")]
		public static Vector2 Swizzle00(this Vector3 original)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600192B")]
		[Address(RVA = "0x8BC920", Offset = "0x8BC920", VA = "0x8BC920")]
		public static Vector2 Swizzle0X(this Vector3 original)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600192C")]
		[Address(RVA = "0x8BC92C", Offset = "0x8BC92C", VA = "0x8BC92C")]
		public static Vector2 Swizzle0Y(this Vector3 original)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600192D")]
		[Address(RVA = "0x8BC934", Offset = "0x8BC934", VA = "0x8BC934")]
		public static Vector2 Swizzle0Z(this Vector3 original)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600192E")]
		[Address(RVA = "0x8BC940", Offset = "0x8BC940", VA = "0x8BC940")]
		public static Vector2 SwizzleX0(this Vector3 original)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600192F")]
		[Address(RVA = "0x8BC948", Offset = "0x8BC948", VA = "0x8BC948")]
		public static Vector2 SwizzleXX(this Vector3 original)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001930")]
		[Address(RVA = "0x8BC950", Offset = "0x8BC950", VA = "0x8BC950")]
		public static Vector2 SwizzleXY(this Vector3 original)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001931")]
		[Address(RVA = "0x8BC954", Offset = "0x8BC954", VA = "0x8BC954")]
		public static Vector2 SwizzleXZ(this Vector3 original)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001932")]
		[Address(RVA = "0x8BC95C", Offset = "0x8BC95C", VA = "0x8BC95C")]
		public static Vector2 SwizzleY0(this Vector3 original)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001933")]
		[Address(RVA = "0x8BC968", Offset = "0x8BC968", VA = "0x8BC968")]
		public static Vector2 SwizzleYX(this Vector3 original)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001934")]
		[Address(RVA = "0x8BC978", Offset = "0x8BC978", VA = "0x8BC978")]
		public static Vector2 SwizzleYY(this Vector3 original)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001935")]
		[Address(RVA = "0x8BC980", Offset = "0x8BC980", VA = "0x8BC980")]
		public static Vector2 SwizzleYZ(this Vector3 original)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001936")]
		[Address(RVA = "0x8BC98C", Offset = "0x8BC98C", VA = "0x8BC98C")]
		public static Vector2 SwizzleZ0(this Vector3 original)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001937")]
		[Address(RVA = "0x8BC998", Offset = "0x8BC998", VA = "0x8BC998")]
		public static Vector2 SwizzleZX(this Vector3 original)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001938")]
		[Address(RVA = "0x8BC9A4", Offset = "0x8BC9A4", VA = "0x8BC9A4")]
		public static Vector2 SwizzleZY(this Vector3 original)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001939")]
		[Address(RVA = "0x8BC9AC", Offset = "0x8BC9AC", VA = "0x8BC9AC")]
		public static Vector2 SwizzleZZ(this Vector3 original)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600193A")]
		[Address(RVA = "0x8BC9B8", Offset = "0x8BC9B8", VA = "0x8BC9B8")]
		public static Vector3 Swizzle000(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600193B")]
		[Address(RVA = "0x8BC9C8", Offset = "0x8BC9C8", VA = "0x8BC9C8")]
		public static Vector3 Swizzle00X(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600193C")]
		[Address(RVA = "0x8BC9D8", Offset = "0x8BC9D8", VA = "0x8BC9D8")]
		public static Vector3 Swizzle00Y(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600193D")]
		[Address(RVA = "0x8BC9E8", Offset = "0x8BC9E8", VA = "0x8BC9E8")]
		public static Vector3 Swizzle00Z(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600193E")]
		[Address(RVA = "0x8BC9F4", Offset = "0x8BC9F4", VA = "0x8BC9F4")]
		public static Vector3 Swizzle0X0(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600193F")]
		[Address(RVA = "0x8BCA04", Offset = "0x8BCA04", VA = "0x8BCA04")]
		public static Vector3 Swizzle0XX(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001940")]
		[Address(RVA = "0x8BCA14", Offset = "0x8BCA14", VA = "0x8BCA14")]
		public static Vector3 Swizzle0XY(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001941")]
		[Address(RVA = "0x8BCA2C", Offset = "0x8BCA2C", VA = "0x8BCA2C")]
		public static Vector3 Swizzle0XZ(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001942")]
		[Address(RVA = "0x8BCA38", Offset = "0x8BCA38", VA = "0x8BCA38")]
		public static Vector3 Swizzle0Y0(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001943")]
		[Address(RVA = "0x8BCA44", Offset = "0x8BCA44", VA = "0x8BCA44")]
		public static Vector3 Swizzle0YX(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001944")]
		[Address(RVA = "0x8BCA50", Offset = "0x8BCA50", VA = "0x8BCA50")]
		public static Vector3 Swizzle0YY(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001945")]
		[Address(RVA = "0x8BCA5C", Offset = "0x8BCA5C", VA = "0x8BCA5C")]
		public static Vector3 Swizzle0YZ(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001946")]
		[Address(RVA = "0x8BCA64", Offset = "0x8BCA64", VA = "0x8BCA64")]
		public static Vector3 Swizzle0Z0(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001947")]
		[Address(RVA = "0x8BCA74", Offset = "0x8BCA74", VA = "0x8BCA74")]
		public static Vector3 Swizzle0ZX(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001948")]
		[Address(RVA = "0x8BCA88", Offset = "0x8BCA88", VA = "0x8BCA88")]
		public static Vector3 Swizzle0ZY(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001949")]
		[Address(RVA = "0x8BCA9C", Offset = "0x8BCA9C", VA = "0x8BCA9C")]
		public static Vector3 Swizzle0ZZ(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600194A")]
		[Address(RVA = "0x8BCAA8", Offset = "0x8BCAA8", VA = "0x8BCAA8")]
		public static Vector3 SwizzleX00(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600194B")]
		[Address(RVA = "0x8BCAB4", Offset = "0x8BCAB4", VA = "0x8BCAB4")]
		public static Vector3 SwizzleX0X(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600194C")]
		[Address(RVA = "0x8BCAC0", Offset = "0x8BCAC0", VA = "0x8BCAC0")]
		public static Vector3 SwizzleX0Y(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600194D")]
		[Address(RVA = "0x8BCACC", Offset = "0x8BCACC", VA = "0x8BCACC")]
		public static Vector3 SwizzleX0Z(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600194E")]
		[Address(RVA = "0x8BCAD4", Offset = "0x8BCAD4", VA = "0x8BCAD4")]
		public static Vector3 SwizzleXX0(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600194F")]
		[Address(RVA = "0x8BCAE0", Offset = "0x8BCAE0", VA = "0x8BCAE0")]
		public static Vector3 SwizzleXXX(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001950")]
		[Address(RVA = "0x8BCAEC", Offset = "0x8BCAEC", VA = "0x8BCAEC")]
		public static Vector3 SwizzleXXY(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001951")]
		[Address(RVA = "0x8BCAF8", Offset = "0x8BCAF8", VA = "0x8BCAF8")]
		public static Vector3 SwizzleXXZ(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001952")]
		[Address(RVA = "0x8BCB00", Offset = "0x8BCB00", VA = "0x8BCB00")]
		public static Vector3 SwizzleXY0(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001953")]
		[Address(RVA = "0x8BCB08", Offset = "0x8BCB08", VA = "0x8BCB08")]
		public static Vector3 SwizzleXYX(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001954")]
		[Address(RVA = "0x8BCB10", Offset = "0x8BCB10", VA = "0x8BCB10")]
		public static Vector3 SwizzleXYY(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001955")]
		[Address(RVA = "0x8BCB18", Offset = "0x8BCB18", VA = "0x8BCB18")]
		public static Vector3 SwizzleXYZ(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001956")]
		[Address(RVA = "0x8BCB1C", Offset = "0x8BCB1C", VA = "0x8BCB1C")]
		public static Vector3 SwizzleXZ0(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001957")]
		[Address(RVA = "0x8BCB28", Offset = "0x8BCB28", VA = "0x8BCB28")]
		public static Vector3 SwizzleXZX(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001958")]
		[Address(RVA = "0x8BCB34", Offset = "0x8BCB34", VA = "0x8BCB34")]
		public static Vector3 SwizzleXZY(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001959")]
		[Address(RVA = "0x8BCB44", Offset = "0x8BCB44", VA = "0x8BCB44")]
		public static Vector3 SwizzleXZZ(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600195A")]
		[Address(RVA = "0x8BCB4C", Offset = "0x8BCB4C", VA = "0x8BCB4C")]
		public static Vector3 SwizzleY00(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600195B")]
		[Address(RVA = "0x8BCB5C", Offset = "0x8BCB5C", VA = "0x8BCB5C")]
		public static Vector3 SwizzleY0X(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600195C")]
		[Address(RVA = "0x8BCB74", Offset = "0x8BCB74", VA = "0x8BCB74")]
		public static Vector3 SwizzleY0Y(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600195D")]
		[Address(RVA = "0x8BCB84", Offset = "0x8BCB84", VA = "0x8BCB84")]
		public static Vector3 SwizzleY0Z(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600195E")]
		[Address(RVA = "0x8BCB90", Offset = "0x8BCB90", VA = "0x8BCB90")]
		public static Vector3 SwizzleYX0(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600195F")]
		[Address(RVA = "0x8BCBA4", Offset = "0x8BCBA4", VA = "0x8BCBA4")]
		public static Vector3 SwizzleYXX(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001960")]
		[Address(RVA = "0x8BCBB4", Offset = "0x8BCBB4", VA = "0x8BCBB4")]
		public static Vector3 SwizzleYXY(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001961")]
		[Address(RVA = "0x8BCBC4", Offset = "0x8BCBC4", VA = "0x8BCBC4")]
		public static Vector3 SwizzleYXZ(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001962")]
		[Address(RVA = "0x8BCBD4", Offset = "0x8BCBD4", VA = "0x8BCBD4")]
		public static Vector3 SwizzleYY0(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001963")]
		[Address(RVA = "0x8BCBE0", Offset = "0x8BCBE0", VA = "0x8BCBE0")]
		public static Vector3 SwizzleYYX(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001964")]
		[Address(RVA = "0x8BCBEC", Offset = "0x8BCBEC", VA = "0x8BCBEC")]
		public static Vector3 SwizzleYYY(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001965")]
		[Address(RVA = "0x8BCBF8", Offset = "0x8BCBF8", VA = "0x8BCBF8")]
		public static Vector3 SwizzleYYZ(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001966")]
		[Address(RVA = "0x8BCC00", Offset = "0x8BCC00", VA = "0x8BCC00")]
		public static Vector3 SwizzleYZ0(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001967")]
		[Address(RVA = "0x8BCC14", Offset = "0x8BCC14", VA = "0x8BCC14")]
		public static Vector3 SwizzleYZX(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001968")]
		[Address(RVA = "0x8BCC28", Offset = "0x8BCC28", VA = "0x8BCC28")]
		public static Vector3 SwizzleYZY(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001969")]
		[Address(RVA = "0x8BCC38", Offset = "0x8BCC38", VA = "0x8BCC38")]
		public static Vector3 SwizzleYZZ(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600196A")]
		[Address(RVA = "0x8BCC44", Offset = "0x8BCC44", VA = "0x8BCC44")]
		public static Vector3 SwizzleZ00(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600196B")]
		[Address(RVA = "0x8BCC54", Offset = "0x8BCC54", VA = "0x8BCC54")]
		public static Vector3 SwizzleZ0X(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600196C")]
		[Address(RVA = "0x8BCC68", Offset = "0x8BCC68", VA = "0x8BCC68")]
		public static Vector3 SwizzleZ0Y(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600196D")]
		[Address(RVA = "0x8BCC7C", Offset = "0x8BCC7C", VA = "0x8BCC7C")]
		public static Vector3 SwizzleZ0Z(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600196E")]
		[Address(RVA = "0x8BCC88", Offset = "0x8BCC88", VA = "0x8BCC88")]
		public static Vector3 SwizzleZX0(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600196F")]
		[Address(RVA = "0x8BCCA0", Offset = "0x8BCCA0", VA = "0x8BCCA0")]
		public static Vector3 SwizzleZXX(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001970")]
		[Address(RVA = "0x8BCCB0", Offset = "0x8BCCB0", VA = "0x8BCCB0")]
		public static Vector3 SwizzleZXY(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001971")]
		[Address(RVA = "0x8BCCC4", Offset = "0x8BCCC4", VA = "0x8BCCC4")]
		public static Vector3 SwizzleZXZ(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001972")]
		[Address(RVA = "0x8BCCD0", Offset = "0x8BCCD0", VA = "0x8BCCD0")]
		public static Vector3 SwizzleZY0(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001973")]
		[Address(RVA = "0x8BCCDC", Offset = "0x8BCCDC", VA = "0x8BCCDC")]
		public static Vector3 SwizzleZYX(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001974")]
		[Address(RVA = "0x8BCCEC", Offset = "0x8BCCEC", VA = "0x8BCCEC")]
		public static Vector3 SwizzleZYY(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001975")]
		[Address(RVA = "0x8BCCF8", Offset = "0x8BCCF8", VA = "0x8BCCF8")]
		public static Vector3 SwizzleZYZ(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001976")]
		[Address(RVA = "0x8BCD00", Offset = "0x8BCD00", VA = "0x8BCD00")]
		public static Vector3 SwizzleZZ0(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001977")]
		[Address(RVA = "0x8BCD10", Offset = "0x8BCD10", VA = "0x8BCD10")]
		public static Vector3 SwizzleZZX(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001978")]
		[Address(RVA = "0x8BCD20", Offset = "0x8BCD20", VA = "0x8BCD20")]
		public static Vector3 SwizzleZZY(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001979")]
		[Address(RVA = "0x8BCD30", Offset = "0x8BCD30", VA = "0x8BCD30")]
		public static Vector3 SwizzleZZZ(this Vector3 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600197A")]
		[Address(RVA = "0x8BCD3C", Offset = "0x8BCD3C", VA = "0x8BCD3C")]
		public static Vector2 Swizzle00(this Vector2 original)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600197B")]
		[Address(RVA = "0x8BCD48", Offset = "0x8BCD48", VA = "0x8BCD48")]
		public static Vector2 Swizzle0X(this Vector2 original)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600197C")]
		[Address(RVA = "0x8BCD54", Offset = "0x8BCD54", VA = "0x8BCD54")]
		public static Vector2 Swizzle0Y(this Vector2 original)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600197D")]
		[Address(RVA = "0x8BCD5C", Offset = "0x8BCD5C", VA = "0x8BCD5C")]
		public static Vector2 SwizzleX0(this Vector2 original)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600197E")]
		[Address(RVA = "0x8BCD64", Offset = "0x8BCD64", VA = "0x8BCD64")]
		public static Vector2 SwizzleXX(this Vector2 original)
		{
			return default(Vector2);
		}

		[Token(Token = "0x600197F")]
		[Address(RVA = "0x8BCD6C", Offset = "0x8BCD6C", VA = "0x8BCD6C")]
		public static Vector2 SwizzleXY(this Vector2 original)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001980")]
		[Address(RVA = "0x8BCD70", Offset = "0x8BCD70", VA = "0x8BCD70")]
		public static Vector2 SwizzleY0(this Vector2 original)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001981")]
		[Address(RVA = "0x8BCD7C", Offset = "0x8BCD7C", VA = "0x8BCD7C")]
		public static Vector2 SwizzleYX(this Vector2 original)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001982")]
		[Address(RVA = "0x8BCD8C", Offset = "0x8BCD8C", VA = "0x8BCD8C")]
		public static Vector2 SwizzleYY(this Vector2 original)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001983")]
		[Address(RVA = "0x8BCD94", Offset = "0x8BCD94", VA = "0x8BCD94")]
		public static Vector3 Swizzle000(this Vector2 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001984")]
		[Address(RVA = "0x8BCDA4", Offset = "0x8BCDA4", VA = "0x8BCDA4")]
		public static Vector3 Swizzle00X(this Vector2 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001985")]
		[Address(RVA = "0x8BCDB4", Offset = "0x8BCDB4", VA = "0x8BCDB4")]
		public static Vector3 Swizzle00Y(this Vector2 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001986")]
		[Address(RVA = "0x8BCDC4", Offset = "0x8BCDC4", VA = "0x8BCDC4")]
		public static Vector3 Swizzle0X0(this Vector2 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001987")]
		[Address(RVA = "0x8BCDD4", Offset = "0x8BCDD4", VA = "0x8BCDD4")]
		public static Vector3 Swizzle0XX(this Vector2 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001988")]
		[Address(RVA = "0x8BCDE4", Offset = "0x8BCDE4", VA = "0x8BCDE4")]
		public static Vector3 Swizzle0XY(this Vector2 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001989")]
		[Address(RVA = "0x8BCDFC", Offset = "0x8BCDFC", VA = "0x8BCDFC")]
		public static Vector3 Swizzle0Y0(this Vector2 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600198A")]
		[Address(RVA = "0x8BCE08", Offset = "0x8BCE08", VA = "0x8BCE08")]
		public static Vector3 Swizzle0YX(this Vector2 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600198B")]
		[Address(RVA = "0x8BCE14", Offset = "0x8BCE14", VA = "0x8BCE14")]
		public static Vector3 Swizzle0YY(this Vector2 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600198C")]
		[Address(RVA = "0x8BCE20", Offset = "0x8BCE20", VA = "0x8BCE20")]
		public static Vector3 SwizzleX00(this Vector2 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600198D")]
		[Address(RVA = "0x8BCE2C", Offset = "0x8BCE2C", VA = "0x8BCE2C")]
		public static Vector3 SwizzleX0X(this Vector2 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600198E")]
		[Address(RVA = "0x8BCE38", Offset = "0x8BCE38", VA = "0x8BCE38")]
		public static Vector3 SwizzleX0Y(this Vector2 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600198F")]
		[Address(RVA = "0x8BCE44", Offset = "0x8BCE44", VA = "0x8BCE44")]
		public static Vector3 SwizzleXX0(this Vector2 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001990")]
		[Address(RVA = "0x8BCE50", Offset = "0x8BCE50", VA = "0x8BCE50")]
		public static Vector3 SwizzleXXX(this Vector2 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001991")]
		[Address(RVA = "0x8BCE5C", Offset = "0x8BCE5C", VA = "0x8BCE5C")]
		public static Vector3 SwizzleXXY(this Vector2 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001992")]
		[Address(RVA = "0x8BCE68", Offset = "0x8BCE68", VA = "0x8BCE68")]
		public static Vector3 SwizzleXY0(this Vector2 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001993")]
		[Address(RVA = "0x8BCE70", Offset = "0x8BCE70", VA = "0x8BCE70")]
		public static Vector3 SwizzleXYX(this Vector2 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001994")]
		[Address(RVA = "0x8BCE78", Offset = "0x8BCE78", VA = "0x8BCE78")]
		public static Vector3 SwizzleXYY(this Vector2 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001995")]
		[Address(RVA = "0x8BCE80", Offset = "0x8BCE80", VA = "0x8BCE80")]
		public static Vector3 SwizzleY00(this Vector2 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001996")]
		[Address(RVA = "0x8BCE90", Offset = "0x8BCE90", VA = "0x8BCE90")]
		public static Vector3 SwizzleY0X(this Vector2 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001997")]
		[Address(RVA = "0x8BCEA8", Offset = "0x8BCEA8", VA = "0x8BCEA8")]
		public static Vector3 SwizzleY0Y(this Vector2 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001998")]
		[Address(RVA = "0x8BCEB8", Offset = "0x8BCEB8", VA = "0x8BCEB8")]
		public static Vector3 SwizzleYX0(this Vector2 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001999")]
		[Address(RVA = "0x8BCECC", Offset = "0x8BCECC", VA = "0x8BCECC")]
		public static Vector3 SwizzleYXX(this Vector2 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600199A")]
		[Address(RVA = "0x8BCEDC", Offset = "0x8BCEDC", VA = "0x8BCEDC")]
		public static Vector3 SwizzleYXY(this Vector2 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600199B")]
		[Address(RVA = "0x8BCEEC", Offset = "0x8BCEEC", VA = "0x8BCEEC")]
		public static Vector3 SwizzleYY0(this Vector2 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600199C")]
		[Address(RVA = "0x8BCEF8", Offset = "0x8BCEF8", VA = "0x8BCEF8")]
		public static Vector3 SwizzleYYX(this Vector2 original)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600199D")]
		[Address(RVA = "0x8BCF04", Offset = "0x8BCF04", VA = "0x8BCF04")]
		public static Vector3 SwizzleYYY(this Vector2 original)
		{
			return default(Vector3);
		}
	}
}
namespace RGCommon.Logging
{
	[Token(Token = "0x20003C8")]
	public interface ILogger
	{
		[Token(Token = "0x600199E")]
		void Error(string message);

		[Token(Token = "0x600199F")]
		void Warn(string message);

		[Token(Token = "0x60019A0")]
		void Info(string message);
	}
	[Token(Token = "0x20003C9")]
	public class DefaultLogger : ILogger
	{
		[Token(Token = "0x60019A1")]
		[Address(RVA = "0x8BCF10", Offset = "0x8BCF10", VA = "0x8BCF10", Slot = "4")]
		public void Error(string message)
		{
		}

		[Token(Token = "0x60019A2")]
		[Address(RVA = "0x8BCF68", Offset = "0x8BCF68", VA = "0x8BCF68", Slot = "5")]
		public void Warn(string message)
		{
		}

		[Token(Token = "0x60019A3")]
		[Address(RVA = "0x8BCFC0", Offset = "0x8BCFC0", VA = "0x8BCFC0", Slot = "6")]
		public void Info(string message)
		{
		}

		[Token(Token = "0x60019A4")]
		[Address(RVA = "0x8BD018", Offset = "0x8BD018", VA = "0x8BD018")]
		public DefaultLogger()
		{
		}
	}
}
namespace RGCommon.ECS
{
	[Token(Token = "0x20003CA")]
	public interface ITickable
	{
		[Token(Token = "0x60019A5")]
		void Tick();
	}
	[Token(Token = "0x20003CB")]
	public interface IFixedTickable
	{
		[Token(Token = "0x60019A6")]
		void FixedTick();
	}
	[Token(Token = "0x20003CC")]
	public interface ILateTickable
	{
		[Token(Token = "0x60019A7")]
		void LateTick();
	}
}
namespace Photon
{
	[Token(Token = "0x20003CD")]
	public class MonoBehaviour : UnityEngine.MonoBehaviour
	{
		[Token(Token = "0x4001C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private PhotonView pvCache;

		[Token(Token = "0x170002F6")]
		public PhotonView photonView
		{
			[Token(Token = "0x60019A8")]
			[Address(RVA = "0x8BD020", Offset = "0x8BD020", VA = "0x8BD020")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019A9")]
		[Address(RVA = "0x8BD0A0", Offset = "0x8BD0A0", VA = "0x8BD0A0")]
		public MonoBehaviour()
		{
		}
	}
	[Token(Token = "0x20003CE")]
	public class PunBehaviour : MonoBehaviour, IPunCallbacks
	{
		[Token(Token = "0x60019AA")]
		[Address(RVA = "0x8BD0A8", Offset = "0x8BD0A8", VA = "0x8BD0A8", Slot = "33")]
		public virtual void OnConnectedToPhoton()
		{
		}

		[Token(Token = "0x60019AB")]
		[Address(RVA = "0x8BD0AC", Offset = "0x8BD0AC", VA = "0x8BD0AC", Slot = "34")]
		public virtual void OnLeftRoom()
		{
		}

		[Token(Token = "0x60019AC")]
		[Address(RVA = "0x8BD0B0", Offset = "0x8BD0B0", VA = "0x8BD0B0", Slot = "35")]
		public virtual void OnMasterClientSwitched(PhotonPlayer newMasterClient)
		{
		}

		[Token(Token = "0x60019AD")]
		[Address(RVA = "0x8BD0B4", Offset = "0x8BD0B4", VA = "0x8BD0B4", Slot = "36")]
		public virtual void OnPhotonCreateRoomFailed(object[] codeAndMsg)
		{
		}

		[Token(Token = "0x60019AE")]
		[Address(RVA = "0x8BD0B8", Offset = "0x8BD0B8", VA = "0x8BD0B8", Slot = "37")]
		public virtual void OnPhotonJoinRoomFailed(object[] codeAndMsg)
		{
		}

		[Token(Token = "0x60019AF")]
		[Address(RVA = "0x8BD0BC", Offset = "0x8BD0BC", VA = "0x8BD0BC", Slot = "38")]
		public virtual void OnCreatedRoom()
		{
		}

		[Token(Token = "0x60019B0")]
		[Address(RVA = "0x8BD0C0", Offset = "0x8BD0C0", VA = "0x8BD0C0", Slot = "39")]
		public virtual void OnJoinedLobby()
		{
		}

		[Token(Token = "0x60019B1")]
		[Address(RVA = "0x8BD0C4", Offset = "0x8BD0C4", VA = "0x8BD0C4", Slot = "40")]
		public virtual void OnLeftLobby()
		{
		}

		[Token(Token = "0x60019B2")]
		[Address(RVA = "0x8BD0C8", Offset = "0x8BD0C8", VA = "0x8BD0C8", Slot = "41")]
		public virtual void OnFailedToConnectToPhoton(DisconnectCause cause)
		{
		}

		[Token(Token = "0x60019B3")]
		[Address(RVA = "0x8BD0CC", Offset = "0x8BD0CC", VA = "0x8BD0CC", Slot = "42")]
		public virtual void OnDisconnectedFromPhoton()
		{
		}

		[Token(Token = "0x60019B4")]
		[Address(RVA = "0x8BD0D0", Offset = "0x8BD0D0", VA = "0x8BD0D0", Slot = "43")]
		public virtual void OnConnectionFail(DisconnectCause cause)
		{
		}

		[Token(Token = "0x60019B5")]
		[Address(RVA = "0x8BD0D4", Offset = "0x8BD0D4", VA = "0x8BD0D4", Slot = "44")]
		public virtual void OnPhotonInstantiate(PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x60019B6")]
		[Address(RVA = "0x8BD0D8", Offset = "0x8BD0D8", VA = "0x8BD0D8", Slot = "45")]
		public virtual void OnReceivedRoomListUpdate()
		{
		}

		[Token(Token = "0x60019B7")]
		[Address(RVA = "0x8BD0DC", Offset = "0x8BD0DC", VA = "0x8BD0DC", Slot = "46")]
		public virtual void OnJoinedRoom()
		{
		}

		[Token(Token = "0x60019B8")]
		[Address(RVA = "0x8BD0E0", Offset = "0x8BD0E0", VA = "0x8BD0E0", Slot = "47")]
		public virtual void OnPhotonPlayerConnected(PhotonPlayer newPlayer)
		{
		}

		[Token(Token = "0x60019B9")]
		[Address(RVA = "0x8BD0E4", Offset = "0x8BD0E4", VA = "0x8BD0E4", Slot = "48")]
		public virtual void OnPhotonPlayerDisconnected(PhotonPlayer otherPlayer)
		{
		}

		[Token(Token = "0x60019BA")]
		[Address(RVA = "0x8BD0E8", Offset = "0x8BD0E8", VA = "0x8BD0E8", Slot = "49")]
		public virtual void OnPhotonRandomJoinFailed(object[] codeAndMsg)
		{
		}

		[Token(Token = "0x60019BB")]
		[Address(RVA = "0x8BD0EC", Offset = "0x8BD0EC", VA = "0x8BD0EC", Slot = "50")]
		public virtual void OnConnectedToMaster()
		{
		}

		[Token(Token = "0x60019BC")]
		[Address(RVA = "0x8BD0F0", Offset = "0x8BD0F0", VA = "0x8BD0F0", Slot = "51")]
		public virtual void OnPhotonMaxCccuReached()
		{
		}

		[Token(Token = "0x60019BD")]
		[Address(RVA = "0x8BD0F4", Offset = "0x8BD0F4", VA = "0x8BD0F4", Slot = "52")]
		public virtual void OnPhotonCustomRoomPropertiesChanged(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
		{
		}

		[Token(Token = "0x60019BE")]
		[Address(RVA = "0x8BD0F8", Offset = "0x8BD0F8", VA = "0x8BD0F8", Slot = "53")]
		public virtual void OnPhotonPlayerPropertiesChanged(object[] playerAndUpdatedProps)
		{
		}

		[Token(Token = "0x60019BF")]
		[Address(RVA = "0x8BD0FC", Offset = "0x8BD0FC", VA = "0x8BD0FC", Slot = "54")]
		public virtual void OnUpdatedFriendList()
		{
		}

		[Token(Token = "0x60019C0")]
		[Address(RVA = "0x8BD100", Offset = "0x8BD100", VA = "0x8BD100", Slot = "55")]
		public virtual void OnCustomAuthenticationFailed(string debugMessage)
		{
		}

		[Token(Token = "0x60019C1")]
		[Address(RVA = "0x8BD104", Offset = "0x8BD104", VA = "0x8BD104", Slot = "56")]
		public virtual void OnCustomAuthenticationResponse(Dictionary<string, object> data)
		{
		}

		[Token(Token = "0x60019C2")]
		[Address(RVA = "0x8BD108", Offset = "0x8BD108", VA = "0x8BD108", Slot = "57")]
		public virtual void OnWebRpcResponse(OperationResponse response)
		{
		}

		[Token(Token = "0x60019C3")]
		[Address(RVA = "0x8BD10C", Offset = "0x8BD10C", VA = "0x8BD10C", Slot = "58")]
		public virtual void OnOwnershipRequest(object[] viewAndPlayer)
		{
		}

		[Token(Token = "0x60019C4")]
		[Address(RVA = "0x8BD110", Offset = "0x8BD110", VA = "0x8BD110", Slot = "59")]
		public virtual void OnLobbyStatisticsUpdate()
		{
		}

		[Token(Token = "0x60019C5")]
		[Address(RVA = "0x8BD114", Offset = "0x8BD114", VA = "0x8BD114", Slot = "60")]
		public virtual void OnPhotonPlayerActivityChanged(PhotonPlayer otherPlayer)
		{
		}

		[Token(Token = "0x60019C6")]
		[Address(RVA = "0x8BD118", Offset = "0x8BD118", VA = "0x8BD118", Slot = "61")]
		public virtual void OnOwnershipTransfered(object[] viewAndPlayers)
		{
		}

		[Token(Token = "0x60019C7")]
		[Address(RVA = "0x8BD11C", Offset = "0x8BD11C", VA = "0x8BD11C")]
		public PunBehaviour()
		{
		}
	}
}
namespace Photon.Realtime
{
	[Token(Token = "0x20003CF")]
	public abstract class PhotonPing : IDisposable
	{
		[Token(Token = "0x4001C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string DebugString;

		[Token(Token = "0x4001C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool Successful;

		[Token(Token = "0x4001C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		protected internal bool GotResult;

		[Token(Token = "0x4001C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		protected internal int PingLength;

		[Token(Token = "0x4001C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected internal byte[] PingBytes;

		[Token(Token = "0x4001C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected internal byte PingId;

		[Token(Token = "0x60019C8")]
		[Address(RVA = "0x8BD124", Offset = "0x8BD124", VA = "0x8BD124", Slot = "5")]
		public virtual bool StartPing(string ip)
		{
			return default(bool);
		}

		[Token(Token = "0x60019C9")]
		[Address(RVA = "0x8BD164", Offset = "0x8BD164", VA = "0x8BD164", Slot = "6")]
		public virtual bool Done()
		{
			return default(bool);
		}

		[Token(Token = "0x60019CA")]
		[Address(RVA = "0x8BD1A4", Offset = "0x8BD1A4", VA = "0x8BD1A4", Slot = "7")]
		public virtual void Dispose()
		{
		}

		[Token(Token = "0x60019CB")]
		[Address(RVA = "0x8BD1E4", Offset = "0x8BD1E4", VA = "0x8BD1E4")]
		protected internal void Init()
		{
		}

		[Token(Token = "0x60019CC")]
		[Address(RVA = "0x8BD224", Offset = "0x8BD224", VA = "0x8BD224")]
		protected PhotonPing()
		{
		}
	}
	[Token(Token = "0x20003D0")]
	public class PingMono : PhotonPing
	{
		[Token(Token = "0x4001C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Socket sock;

		[Token(Token = "0x60019CD")]
		[Address(RVA = "0x8BD2CC", Offset = "0x8BD2CC", VA = "0x8BD2CC", Slot = "5")]
		public override bool StartPing(string ip)
		{
			return default(bool);
		}

		[Token(Token = "0x60019CE")]
		[Address(RVA = "0x8BD544", Offset = "0x8BD544", VA = "0x8BD544", Slot = "6")]
		public override bool Done()
		{
			return default(bool);
		}

		[Token(Token = "0x60019CF")]
		[Address(RVA = "0x8BD66C", Offset = "0x8BD66C", VA = "0x8BD66C", Slot = "7")]
		public override void Dispose()
		{
		}

		[Token(Token = "0x60019D0")]
		[Address(RVA = "0x8BD70C", Offset = "0x8BD70C", VA = "0x8BD70C")]
		public PingMono()
		{
		}
	}
}
namespace ExitGames.UtilityScripts
{
	[Token(Token = "0x20003D1")]
	public class PlayerRoomIndexing : PunBehaviour
	{
		[Token(Token = "0x20003D2")]
		public delegate void RoomIndexingChanged();

		[Token(Token = "0x4001C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static PlayerRoomIndexing instance;

		[Token(Token = "0x4001C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RoomIndexingChanged OnRoomIndexingChanged;

		[Token(Token = "0x4001C1E")]
		public const string RoomPlayerIndexedProp = "PlayerIndexes";

		[Token(Token = "0x4001C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int[] _playerIds;

		[Token(Token = "0x4001C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private object _indexes;

		[Token(Token = "0x4001C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<int, int> _indexesLUT;

		[Token(Token = "0x4001C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<bool> _indexesPool;

		[Token(Token = "0x4001C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private PhotonPlayer _p;

		[Token(Token = "0x170002F7")]
		public int[] PlayerIds
		{
			[Token(Token = "0x60019D1")]
			[Address(RVA = "0x8BD710", Offset = "0x8BD710", VA = "0x8BD710")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60019D2")]
		[Address(RVA = "0x8BD718", Offset = "0x8BD718", VA = "0x8BD718")]
		public void Awake()
		{
		}

		[Token(Token = "0x60019D3")]
		[Address(RVA = "0x8BDA8C", Offset = "0x8BDA8C", VA = "0x8BDA8C", Slot = "46")]
		public override void OnJoinedRoom()
		{
		}

		[Token(Token = "0x60019D4")]
		[Address(RVA = "0x8BE288", Offset = "0x8BE288", VA = "0x8BE288", Slot = "34")]
		public override void OnLeftRoom()
		{
		}

		[Token(Token = "0x60019D5")]
		[Address(RVA = "0x8BE28C", Offset = "0x8BE28C", VA = "0x8BE28C", Slot = "47")]
		public override void OnPhotonPlayerConnected(PhotonPlayer newPlayer)
		{
		}

		[Token(Token = "0x60019D6")]
		[Address(RVA = "0x8BE30C", Offset = "0x8BE30C", VA = "0x8BE30C", Slot = "48")]
		public override void OnPhotonPlayerDisconnected(PhotonPlayer otherPlayer)
		{
		}

		[Token(Token = "0x60019D7")]
		[Address(RVA = "0x8BE570", Offset = "0x8BE570", VA = "0x8BE570", Slot = "52")]
		public override void OnPhotonCustomRoomPropertiesChanged(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
		{
		}

		[Token(Token = "0x60019D8")]
		[Address(RVA = "0x8BE5F4", Offset = "0x8BE5F4", VA = "0x8BE5F4", Slot = "35")]
		public override void OnMasterClientSwitched(PhotonPlayer newMasterClient)
		{
		}

		[Token(Token = "0x60019D9")]
		[Address(RVA = "0x8BE664", Offset = "0x8BE664", VA = "0x8BE664")]
		public int GetRoomIndex(PhotonPlayer player)
		{
			return default(int);
		}

		[Token(Token = "0x60019DA")]
		[Address(RVA = "0x8BD83C", Offset = "0x8BD83C", VA = "0x8BD83C")]
		private void SanitizeIndexing(bool forceIndexing = false)
		{
		}

		[Token(Token = "0x60019DB")]
		[Address(RVA = "0x8BDF6C", Offset = "0x8BDF6C", VA = "0x8BDF6C")]
		private void RefreshData()
		{
		}

		[Token(Token = "0x60019DC")]
		[Address(RVA = "0x8BDB18", Offset = "0x8BDB18", VA = "0x8BDB18")]
		private void AssignIndex(PhotonPlayer player)
		{
		}

		[Token(Token = "0x60019DD")]
		[Address(RVA = "0x8BE38C", Offset = "0x8BE38C", VA = "0x8BE38C")]
		private void UnAssignIndex(PhotonPlayer player)
		{
		}

		[Token(Token = "0x60019DE")]
		[Address(RVA = "0x8BE6FC", Offset = "0x8BE6FC", VA = "0x8BE6FC")]
		public PlayerRoomIndexing()
		{
		}
	}
	[Token(Token = "0x20003D3")]
	public static class PlayerRoomIndexingExtensions
	{
		[Token(Token = "0x60019E3")]
		[Address(RVA = "0x8BE800", Offset = "0x8BE800", VA = "0x8BE800")]
		public static int GetRoomIndex(this PhotonPlayer player)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20003D4")]
	public class ButtonInsideScrollList : UnityEngine.MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler
	{
		[Token(Token = "0x4001C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ScrollRect scrollRect;

		[Token(Token = "0x60019E4")]
		[Address(RVA = "0x8BE8FC", Offset = "0x8BE8FC", VA = "0x8BE8FC")]
		private void Start()
		{
		}

		[Token(Token = "0x60019E5")]
		[Address(RVA = "0x8BE94C", Offset = "0x8BE94C", VA = "0x8BE94C", Slot = "4")]
		private void UnityEngine.EventSystems.IPointerDownHandler.OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60019E6")]
		[Address(RVA = "0x8BE9EC", Offset = "0x8BE9EC", VA = "0x8BE9EC", Slot = "5")]
		private void UnityEngine.EventSystems.IPointerUpHandler.OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60019E7")]
		[Address(RVA = "0x8BEA88", Offset = "0x8BEA88", VA = "0x8BEA88")]
		public ButtonInsideScrollList()
		{
		}
	}
	[Token(Token = "0x20003D5")]
	[RequireComponent(typeof(Text))]
	public class TextButtonTransition : UnityEngine.MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
	{
		[Token(Token = "0x4001C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Text _text;

		[Token(Token = "0x4001C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color NormalColor;

		[Token(Token = "0x4001C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color HoverColor;

		[Token(Token = "0x60019E8")]
		[Address(RVA = "0x8BEA90", Offset = "0x8BEA90", VA = "0x8BEA90")]
		public void Awake()
		{
		}

		[Token(Token = "0x60019E9")]
		[Address(RVA = "0x8BEAE0", Offset = "0x8BEAE0", VA = "0x8BEAE0", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60019EA")]
		[Address(RVA = "0x8BEB10", Offset = "0x8BEB10", VA = "0x8BEB10", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60019EB")]
		[Address(RVA = "0x8BEB40", Offset = "0x8BEB40", VA = "0x8BEB40")]
		public TextButtonTransition()
		{
		}
	}
	[Token(Token = "0x20003D6")]
	[RequireComponent(typeof(Text))]
	public class TextToggleIsOnTransition : UnityEngine.MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
	{
		[Token(Token = "0x4001C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Toggle toggle;

		[Token(Token = "0x4001C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Text _text;

		[Token(Token = "0x4001C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color NormalOnColor;

		[Token(Token = "0x4001C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color NormalOffColor;

		[Token(Token = "0x4001C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Color HoverOnColor;

		[Token(Token = "0x4001C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Color HoverOffColor;

		[Token(Token = "0x4001C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool isHover;

		[Token(Token = "0x60019EC")]
		[Address(RVA = "0x8BEB58", Offset = "0x8BEB58", VA = "0x8BEB58")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x60019ED")]
		[Address(RVA = "0x8BEC24", Offset = "0x8BEC24", VA = "0x8BEC24")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x60019EE")]
		[Address(RVA = "0x8BECCC", Offset = "0x8BECCC", VA = "0x8BECCC")]
		public void OnValueChanged(bool isOn)
		{
		}

		[Token(Token = "0x60019EF")]
		[Address(RVA = "0x8BED68", Offset = "0x8BED68", VA = "0x8BED68", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60019F0")]
		[Address(RVA = "0x8BEDDC", Offset = "0x8BEDDC", VA = "0x8BEDDC", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60019F1")]
		[Address(RVA = "0x8BEE4C", Offset = "0x8BEE4C", VA = "0x8BEE4C")]
		public TextToggleIsOnTransition()
		{
		}
	}
}
namespace ExitGames.Client.Photon.Chat
{
	[Token(Token = "0x20003D7")]
	public class ChannelCreationOptions
	{
		[Token(Token = "0x4001C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static ChannelCreationOptions Default;

		[Token(Token = "0x170002F8")]
		public bool PublishSubscribers
		{
			[Token(Token = "0x60019F2")]
			[Address(RVA = "0x8BEE70", Offset = "0x8BEE70", VA = "0x8BEE70")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60019F3")]
			[Address(RVA = "0x8BEE78", Offset = "0x8BEE78", VA = "0x8BEE78")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170002F9")]
		public int MaxSubscribers
		{
			[Token(Token = "0x60019F4")]
			[Address(RVA = "0x8BEE84", Offset = "0x8BEE84", VA = "0x8BEE84")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60019F5")]
			[Address(RVA = "0x8BEE8C", Offset = "0x8BEE8C", VA = "0x8BEE8C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60019F6")]
		[Address(RVA = "0x8BEE94", Offset = "0x8BEE94", VA = "0x8BEE94")]
		public ChannelCreationOptions()
		{
		}
	}
	[Token(Token = "0x20003D8")]
	public class ChannelWellKnownProperties
	{
		[Token(Token = "0x4001C32")]
		public const byte MaxSubscribers = byte.MaxValue;

		[Token(Token = "0x4001C33")]
		public const byte PublishSubscribers = 254;

		[Token(Token = "0x60019F8")]
		[Address(RVA = "0x8BEF00", Offset = "0x8BEF00", VA = "0x8BEF00")]
		public ChannelWellKnownProperties()
		{
		}
	}
	[Token(Token = "0x20003D9")]
	public class ChatChannel
	{
		[Token(Token = "0x4001C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly string Name;

		[Token(Token = "0x4001C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly List<string> Senders;

		[Token(Token = "0x4001C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly List<object> Messages;

		[Token(Token = "0x4001C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int MessageLimit;

		[Token(Token = "0x4001C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Dictionary<object, object> properties;

		[Token(Token = "0x4001C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public readonly HashSet<string> Subscribers;

		[Token(Token = "0x170002FA")]
		public bool IsPrivate
		{
			[Token(Token = "0x60019F9")]
			[Address(RVA = "0x8BEF08", Offset = "0x8BEF08", VA = "0x8BEF08")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60019FA")]
			[Address(RVA = "0x8BEF10", Offset = "0x8BEF10", VA = "0x8BEF10")]
			[CompilerGenerated]
			protected internal set
			{
			}
		}

		[Token(Token = "0x170002FB")]
		public int MessageCount
		{
			[Token(Token = "0x60019FB")]
			[Address(RVA = "0x8BEF1C", Offset = "0x8BEF1C", VA = "0x8BEF1C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002FC")]
		public int LastMsgId
		{
			[Token(Token = "0x60019FC")]
			[Address(RVA = "0x8BEF64", Offset = "0x8BEF64", VA = "0x8BEF64")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60019FD")]
			[Address(RVA = "0x8BEF6C", Offset = "0x8BEF6C", VA = "0x8BEF6C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170002FD")]
		public bool PublishSubscribers
		{
			[Token(Token = "0x60019FE")]
			[Address(RVA = "0x8BEF74", Offset = "0x8BEF74", VA = "0x8BEF74")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60019FF")]
			[Address(RVA = "0x8BEF7C", Offset = "0x8BEF7C", VA = "0x8BEF7C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170002FE")]
		public int MaxSubscribers
		{
			[Token(Token = "0x6001A00")]
			[Address(RVA = "0x8BEF88", Offset = "0x8BEF88", VA = "0x8BEF88")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001A01")]
			[Address(RVA = "0x8BEF90", Offset = "0x8BEF90", VA = "0x8BEF90")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x6001A02")]
		[Address(RVA = "0x8BEF98", Offset = "0x8BEF98", VA = "0x8BEF98")]
		public ChatChannel(string name)
		{
		}

		[Token(Token = "0x6001A03")]
		[Address(RVA = "0x8BF0B0", Offset = "0x8BF0B0", VA = "0x8BF0B0")]
		public void Add(string sender, object message, int msgId)
		{
		}

		[Token(Token = "0x6001A04")]
		[Address(RVA = "0x8BF298", Offset = "0x8BF298", VA = "0x8BF298")]
		public void Add(string[] senders, object[] messages, int lastMsgId)
		{
		}

		[Token(Token = "0x6001A05")]
		[Address(RVA = "0x8BF1DC", Offset = "0x8BF1DC", VA = "0x8BF1DC")]
		public void TruncateMessages()
		{
		}

		[Token(Token = "0x6001A06")]
		[Address(RVA = "0x8BF334", Offset = "0x8BF334", VA = "0x8BF334")]
		public void ClearMessages()
		{
		}

		[Token(Token = "0x6001A07")]
		[Address(RVA = "0x8BF3DC", Offset = "0x8BF3DC", VA = "0x8BF3DC")]
		public string ToStringMessages()
		{
			return null;
		}

		[Token(Token = "0x6001A08")]
		[Address(RVA = "0x8BF518", Offset = "0x8BF518", VA = "0x8BF518")]
		internal void ReadProperties(Dictionary<object, object> newProperties)
		{
		}

		[Token(Token = "0x6001A09")]
		[Address(RVA = "0x8BF95C", Offset = "0x8BF95C", VA = "0x8BF95C")]
		internal bool TryAddSubscriber(string user)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A0A")]
		[Address(RVA = "0x8BFA00", Offset = "0x8BFA00", VA = "0x8BFA00")]
		internal void AddSubscribers(string[] users)
		{
		}
	}
	[Token(Token = "0x20003DA")]
	public class ChatClient : IPhotonPeerListener
	{
		[Token(Token = "0x4001C3E")]
		private const int FriendRequestListMax = 1024;

		[Token(Token = "0x4001C3F")]
		public const int DefaultMaxSubscribers = 100;

		[Token(Token = "0x4001C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string chatRegion;

		[Token(Token = "0x4001C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int MessageLimit;

		[Token(Token = "0x4001C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public readonly Dictionary<string, ChatChannel> PublicChannels;

		[Token(Token = "0x4001C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public readonly Dictionary<string, ChatChannel> PrivateChannels;

		[Token(Token = "0x4001C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly HashSet<string> PublicChannelsUnsubscribing;

		[Token(Token = "0x4001C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly IChatClientListener listener;

		[Token(Token = "0x4001C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public ChatPeer chatPeer;

		[Token(Token = "0x4001C4E")]
		private const string ChatAppName = "chat";

		[Token(Token = "0x4001C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool didAuthenticate;

		[Token(Token = "0x4001C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int msDeltaForServiceCalls;

		[Token(Token = "0x4001C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int msTimestampOfLastServiceCall;

		[Token(Token = "0x170002FF")]
		public string NameServerAddress
		{
			[Token(Token = "0x6001A0B")]
			[Address(RVA = "0x8BFA68", Offset = "0x8BFA68", VA = "0x8BFA68")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A0C")]
			[Address(RVA = "0x8BFA70", Offset = "0x8BFA70", VA = "0x8BFA70")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000300")]
		public string FrontendAddress
		{
			[Token(Token = "0x6001A0D")]
			[Address(RVA = "0x8BFA78", Offset = "0x8BFA78", VA = "0x8BFA78")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A0E")]
			[Address(RVA = "0x8BFA80", Offset = "0x8BFA80", VA = "0x8BFA80")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000301")]
		public string ChatRegion
		{
			[Token(Token = "0x6001A0F")]
			[Address(RVA = "0x8BFA88", Offset = "0x8BFA88", VA = "0x8BFA88")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A10")]
			[Address(RVA = "0x8BFA90", Offset = "0x8BFA90", VA = "0x8BFA90")]
			set
			{
			}
		}

		[Token(Token = "0x17000302")]
		public ChatState State
		{
			[Token(Token = "0x6001A11")]
			[Address(RVA = "0x8BFA98", Offset = "0x8BFA98", VA = "0x8BFA98")]
			[CompilerGenerated]
			get
			{
				return default(ChatState);
			}
			[Token(Token = "0x6001A12")]
			[Address(RVA = "0x8BFAA0", Offset = "0x8BFAA0", VA = "0x8BFAA0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000303")]
		public ChatDisconnectCause DisconnectedCause
		{
			[Token(Token = "0x6001A13")]
			[Address(RVA = "0x8BFAA8", Offset = "0x8BFAA8", VA = "0x8BFAA8")]
			[CompilerGenerated]
			get
			{
				return default(ChatDisconnectCause);
			}
			[Token(Token = "0x6001A14")]
			[Address(RVA = "0x8BFAB0", Offset = "0x8BFAB0", VA = "0x8BFAB0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000304")]
		public bool CanChat
		{
			[Token(Token = "0x6001A15")]
			[Address(RVA = "0x8BFAB8", Offset = "0x8BFAB8", VA = "0x8BFAB8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000305")]
		private bool HasPeer
		{
			[Token(Token = "0x6001A17")]
			[Address(RVA = "0x8BFADC", Offset = "0x8BFADC", VA = "0x8BFADC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000306")]
		public string AppVersion
		{
			[Token(Token = "0x6001A18")]
			[Address(RVA = "0x8BFB98", Offset = "0x8BFB98", VA = "0x8BFB98")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A19")]
			[Address(RVA = "0x8BFBA0", Offset = "0x8BFBA0", VA = "0x8BFBA0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000307")]
		public string AppId
		{
			[Token(Token = "0x6001A1A")]
			[Address(RVA = "0x8BFBA8", Offset = "0x8BFBA8", VA = "0x8BFBA8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A1B")]
			[Address(RVA = "0x8BFBB0", Offset = "0x8BFBB0", VA = "0x8BFBB0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000308")]
		public AuthenticationValues AuthValues
		{
			[Token(Token = "0x6001A1C")]
			[Address(RVA = "0x8BFBB8", Offset = "0x8BFBB8", VA = "0x8BFBB8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A1D")]
			[Address(RVA = "0x8BFBC0", Offset = "0x8BFBC0", VA = "0x8BFBC0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000309")]
		public string UserId
		{
			[Token(Token = "0x6001A1E")]
			[Address(RVA = "0x8BFBC8", Offset = "0x8BFBC8", VA = "0x8BFBC8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A1F")]
			[Address(RVA = "0x8BFBE0", Offset = "0x8BFBE0", VA = "0x8BFBE0")]
			private set
			{
			}
		}

		[Token(Token = "0x1700030A")]
		public bool UseBackgroundWorkerForSending
		{
			[Token(Token = "0x6001A20")]
			[Address(RVA = "0x8BFC68", Offset = "0x8BFC68", VA = "0x8BFC68")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A21")]
			[Address(RVA = "0x8BFC70", Offset = "0x8BFC70", VA = "0x8BFC70")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700030B")]
		public ConnectionProtocol TransportProtocol
		{
			[Token(Token = "0x6001A22")]
			[Address(RVA = "0x8BFC7C", Offset = "0x8BFC7C", VA = "0x8BFC7C")]
			get
			{
				return default(ConnectionProtocol);
			}
			[Token(Token = "0x6001A23")]
			[Address(RVA = "0x8BFC98", Offset = "0x8BFC98", VA = "0x8BFC98")]
			set
			{
			}
		}

		[Token(Token = "0x1700030C")]
		public Dictionary<ConnectionProtocol, Type> SocketImplementationConfig
		{
			[Token(Token = "0x6001A24")]
			[Address(RVA = "0x8BFE38", Offset = "0x8BFE38", VA = "0x8BFE38")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700030D")]
		public DebugLevel DebugOut
		{
			[Token(Token = "0x6001A40")]
			[Address(RVA = "0x8C02F8", Offset = "0x8C02F8", VA = "0x8C02F8")]
			get
			{
				return default(DebugLevel);
			}
			[Token(Token = "0x6001A3F")]
			[Address(RVA = "0x8C1E34", Offset = "0x8C1E34", VA = "0x8C1E34")]
			set
			{
			}
		}

		[Token(Token = "0x6001A16")]
		[Address(RVA = "0x8BFAEC", Offset = "0x8BFAEC", VA = "0x8BFAEC")]
		public bool CanChatInChannel(string channelName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A25")]
		[Address(RVA = "0x8BFE54", Offset = "0x8BFE54", VA = "0x8BFE54")]
		public ChatClient(IChatClientListener listener, ConnectionProtocol protocol = ConnectionProtocol.Udp)
		{
		}

		[Token(Token = "0x6001A26")]
		[Address(RVA = "0x8C0024", Offset = "0x8C0024", VA = "0x8C0024")]
		public bool Connect(string appId, string appVersion, AuthenticationValues authValues)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A27")]
		[Address(RVA = "0x8C0434", Offset = "0x8C0434", VA = "0x8C0434")]
		public void Service()
		{
		}

		[Token(Token = "0x6001A28")]
		[Address(RVA = "0x8C04AC", Offset = "0x8C04AC", VA = "0x8C04AC")]
		private bool SendOutgoingInBackground()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A29")]
		[Address(RVA = "0x8C04E0", Offset = "0x8C04E0", VA = "0x8C04E0")]
		[Obsolete("Better use UseBackgroundWorkerForSending and Service().")]
		public void SendAcksOnly()
		{
		}

		[Token(Token = "0x6001A2A")]
		[Address(RVA = "0x8C04FC", Offset = "0x8C04FC", VA = "0x8C04FC")]
		public void Disconnect()
		{
		}

		[Token(Token = "0x6001A2B")]
		[Address(RVA = "0x8C0540", Offset = "0x8C0540", VA = "0x8C0540")]
		public void StopThread()
		{
		}

		[Token(Token = "0x6001A2C")]
		[Address(RVA = "0x8C0558", Offset = "0x8C0558", VA = "0x8C0558")]
		public bool Subscribe(string[] channels)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A2D")]
		[Address(RVA = "0x8C0560", Offset = "0x8C0560", VA = "0x8C0560")]
		public bool Subscribe(string[] channels, int messagesFromHistory)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A2E")]
		[Address(RVA = "0x8C085C", Offset = "0x8C085C", VA = "0x8C085C")]
		public bool Subscribe(string[] channels, int[] lastMsgIds)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A2F")]
		[Address(RVA = "0x8C0C44", Offset = "0x8C0C44", VA = "0x8C0C44")]
		public bool Unsubscribe(string[] channels)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A30")]
		[Address(RVA = "0x8C0E40", Offset = "0x8C0E40", VA = "0x8C0E40")]
		public bool PublishMessage(string channelName, object message, bool forwardAsWebhook = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A31")]
		[Address(RVA = "0x8C110C", Offset = "0x8C110C", VA = "0x8C110C")]
		internal bool PublishMessageUnreliable(string channelName, object message, bool forwardAsWebhook = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A32")]
		[Address(RVA = "0x8C0E4C", Offset = "0x8C0E4C", VA = "0x8C0E4C")]
		private bool publishMessage(string channelName, object message, bool reliable, bool forwardAsWebhook = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A33")]
		[Address(RVA = "0x8C1118", Offset = "0x8C1118", VA = "0x8C1118")]
		public bool SendPrivateMessage(string target, object message, bool forwardAsWebhook = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A34")]
		[Address(RVA = "0x8C1128", Offset = "0x8C1128", VA = "0x8C1128")]
		public bool SendPrivateMessage(string target, object message, bool encrypt, bool forwardAsWebhook)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A35")]
		[Address(RVA = "0x8C1404", Offset = "0x8C1404", VA = "0x8C1404")]
		internal bool SendPrivateMessageUnreliable(string target, object message, bool encrypt, bool forwardAsWebhook = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A36")]
		[Address(RVA = "0x8C1138", Offset = "0x8C1138", VA = "0x8C1138")]
		private bool sendPrivateMessage(string target, object message, bool encrypt, bool reliable, bool forwardAsWebhook = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A37")]
		[Address(RVA = "0x8C1414", Offset = "0x8C1414", VA = "0x8C1414")]
		private bool SetOnlineStatus(int status, object message, bool skipMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A38")]
		[Address(RVA = "0x8C167C", Offset = "0x8C167C", VA = "0x8C167C")]
		public bool SetOnlineStatus(int status)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A39")]
		[Address(RVA = "0x8C1688", Offset = "0x8C1688", VA = "0x8C1688")]
		public bool SetOnlineStatus(int status, object message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A3A")]
		[Address(RVA = "0x8C1690", Offset = "0x8C1690", VA = "0x8C1690")]
		public bool AddFriends(string[] friends)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A3B")]
		[Address(RVA = "0x8C19A8", Offset = "0x8C19A8", VA = "0x8C19A8")]
		public bool RemoveFriends(string[] friends)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A3C")]
		[Address(RVA = "0x8C1CC0", Offset = "0x8C1CC0", VA = "0x8C1CC0")]
		public string GetPrivateChannelNameByUser(string userName)
		{
			return null;
		}

		[Token(Token = "0x6001A3D")]
		[Address(RVA = "0x8C1D24", Offset = "0x8C1D24", VA = "0x8C1D24")]
		public bool TryGetChannel(string channelName, bool isPrivate, out ChatChannel channel)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A3E")]
		[Address(RVA = "0x8C1D9C", Offset = "0x8C1D9C", VA = "0x8C1D9C")]
		public bool TryGetChannel(string channelName, out ChatChannel channel)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A41")]
		[Address(RVA = "0x8C1E50", Offset = "0x8C1E50", VA = "0x8C1E50", Slot = "4")]
		private void ExitGames.Client.Photon.IPhotonPeerListener.DebugReturn(DebugLevel level, string message)
		{
		}

		[Token(Token = "0x6001A42")]
		[Address(RVA = "0x8C1F08", Offset = "0x8C1F08", VA = "0x8C1F08", Slot = "7")]
		private void ExitGames.Client.Photon.IPhotonPeerListener.OnEvent(EventData eventData)
		{
		}

		[Token(Token = "0x6001A43")]
		[Address(RVA = "0x8C3404", Offset = "0x8C3404", VA = "0x8C3404", Slot = "5")]
		private void ExitGames.Client.Photon.IPhotonPeerListener.OnOperationResponse(OperationResponse operationResponse)
		{
		}

		[Token(Token = "0x6001A44")]
		[Address(RVA = "0x8C3B74", Offset = "0x8C3B74", VA = "0x8C3B74", Slot = "6")]
		private void ExitGames.Client.Photon.IPhotonPeerListener.OnStatusChanged(StatusCode statusCode)
		{
		}

		[Token(Token = "0x6001A45")]
		[Address(RVA = "0x8C070C", Offset = "0x8C070C", VA = "0x8C070C")]
		private bool SendChannelOperation(string[] channels, byte operation, int historyLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A46")]
		[Address(RVA = "0x8C22AC", Offset = "0x8C22AC", VA = "0x8C22AC")]
		private void HandlePrivateMessageEvent(EventData eventData)
		{
		}

		[Token(Token = "0x6001A47")]
		[Address(RVA = "0x8C1F78", Offset = "0x8C1F78", VA = "0x8C1F78")]
		private void HandleChatMessagesEvent(EventData eventData)
		{
		}

		[Token(Token = "0x6001A48")]
		[Address(RVA = "0x8C2734", Offset = "0x8C2734", VA = "0x8C2734")]
		private void HandleSubscribeEvent(EventData eventData)
		{
		}

		[Token(Token = "0x6001A49")]
		[Address(RVA = "0x8C2B04", Offset = "0x8C2B04", VA = "0x8C2B04")]
		private void HandleUnsubscribeEvent(EventData eventData)
		{
		}

		[Token(Token = "0x6001A4A")]
		[Address(RVA = "0x8C3618", Offset = "0x8C3618", VA = "0x8C3618")]
		private void HandleAuthResponse(OperationResponse operationResponse)
		{
		}

		[Token(Token = "0x6001A4B")]
		[Address(RVA = "0x8C256C", Offset = "0x8C256C", VA = "0x8C256C")]
		private void HandleStatusUpdate(EventData eventData)
		{
		}

		[Token(Token = "0x6001A4C")]
		[Address(RVA = "0x8C4494", Offset = "0x8C4494", VA = "0x8C4494")]
		private void ConnectToFrontEnd()
		{
		}

		[Token(Token = "0x6001A4D")]
		[Address(RVA = "0x8C4274", Offset = "0x8C4274", VA = "0x8C4274")]
		private bool AuthenticateOnFrontEnd()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A4E")]
		[Address(RVA = "0x8C311C", Offset = "0x8C311C", VA = "0x8C311C")]
		private void HandleUserUnsubscribedEvent(EventData eventData)
		{
		}

		[Token(Token = "0x6001A4F")]
		[Address(RVA = "0x8C2C98", Offset = "0x8C2C98", VA = "0x8C2C98")]
		private void HandleUserSubscribedEvent(EventData eventData)
		{
		}

		[Token(Token = "0x6001A50")]
		[Address(RVA = "0x8C45B0", Offset = "0x8C45B0", VA = "0x8C45B0")]
		public bool Subscribe(string channel, int lastMsgId = 0, int messagesFromHistory = -1, [Optional] ChannelCreationOptions creationOptions)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20003DB")]
	public enum ChatDisconnectCause
	{
		[Token(Token = "0x4001C54")]
		None,
		[Token(Token = "0x4001C55")]
		DisconnectByServerUserLimit,
		[Token(Token = "0x4001C56")]
		ExceptionOnConnect,
		[Token(Token = "0x4001C57")]
		DisconnectByServer,
		[Token(Token = "0x4001C58")]
		TimeoutDisconnect,
		[Token(Token = "0x4001C59")]
		Exception,
		[Token(Token = "0x4001C5A")]
		InvalidAuthentication,
		[Token(Token = "0x4001C5B")]
		MaxCcuReached,
		[Token(Token = "0x4001C5C")]
		InvalidRegion,
		[Token(Token = "0x4001C5D")]
		OperationNotAllowedInCurrentState,
		[Token(Token = "0x4001C5E")]
		CustomAuthenticationFailed
	}
	[Token(Token = "0x20003DC")]
	public class ChatEventCode
	{
		[Token(Token = "0x4001C5F")]
		public const byte ChatMessages = 0;

		[Token(Token = "0x4001C60")]
		public const byte Users = 1;

		[Token(Token = "0x4001C61")]
		public const byte PrivateMessage = 2;

		[Token(Token = "0x4001C62")]
		public const byte FriendsList = 3;

		[Token(Token = "0x4001C63")]
		public const byte StatusUpdate = 4;

		[Token(Token = "0x4001C64")]
		public const byte Subscribe = 5;

		[Token(Token = "0x4001C65")]
		public const byte Unsubscribe = 6;

		[Token(Token = "0x4001C66")]
		public const byte UserSubscribed = 8;

		[Token(Token = "0x4001C67")]
		public const byte UserUnsubscribed = 9;

		[Token(Token = "0x6001A51")]
		[Address(RVA = "0x8C4CC0", Offset = "0x8C4CC0", VA = "0x8C4CC0")]
		public ChatEventCode()
		{
		}
	}
	[Token(Token = "0x20003DD")]
	public class ChatOperationCode
	{
		[Token(Token = "0x4001C68")]
		public const byte Authenticate = 230;

		[Token(Token = "0x4001C69")]
		public const byte Subscribe = 0;

		[Token(Token = "0x4001C6A")]
		public const byte Unsubscribe = 1;

		[Token(Token = "0x4001C6B")]
		public const byte Publish = 2;

		[Token(Token = "0x4001C6C")]
		public const byte SendPrivate = 3;

		[Token(Token = "0x4001C6D")]
		public const byte ChannelHistory = 4;

		[Token(Token = "0x4001C6E")]
		public const byte UpdateStatus = 5;

		[Token(Token = "0x4001C6F")]
		public const byte AddFriends = 6;

		[Token(Token = "0x4001C70")]
		public const byte RemoveFriends = 7;

		[Token(Token = "0x6001A52")]
		[Address(RVA = "0x8C4CC8", Offset = "0x8C4CC8", VA = "0x8C4CC8")]
		public ChatOperationCode()
		{
		}
	}
	[Token(Token = "0x20003DE")]
	public class ChatParameterCode
	{
		[Token(Token = "0x4001C71")]
		public const byte Channels = 0;

		[Token(Token = "0x4001C72")]
		public const byte Channel = 1;

		[Token(Token = "0x4001C73")]
		public const byte Messages = 2;

		[Token(Token = "0x4001C74")]
		public const byte Message = 3;

		[Token(Token = "0x4001C75")]
		public const byte Senders = 4;

		[Token(Token = "0x4001C76")]
		public const byte Sender = 5;

		[Token(Token = "0x4001C77")]
		public const byte ChannelUserCount = 6;

		[Token(Token = "0x4001C78")]
		public const byte UserId = 225;

		[Token(Token = "0x4001C79")]
		public const byte MsgId = 8;

		[Token(Token = "0x4001C7A")]
		public const byte MsgIds = 9;

		[Token(Token = "0x4001C7B")]
		public const byte Secret = 221;

		[Token(Token = "0x4001C7C")]
		public const byte SubscribeResults = 15;

		[Token(Token = "0x4001C7D")]
		public const byte Status = 10;

		[Token(Token = "0x4001C7E")]
		public const byte Friends = 11;

		[Token(Token = "0x4001C7F")]
		public const byte SkipMessage = 12;

		[Token(Token = "0x4001C80")]
		public const byte HistoryLength = 14;

		[Token(Token = "0x4001C81")]
		public const byte WebFlags = 21;

		[Token(Token = "0x4001C82")]
		public const byte Properties = 22;

		[Token(Token = "0x4001C83")]
		public const byte ChannelSubscribers = 23;

		[Token(Token = "0x6001A53")]
		[Address(RVA = "0x8C4CD0", Offset = "0x8C4CD0", VA = "0x8C4CD0")]
		public ChatParameterCode()
		{
		}
	}
	[Token(Token = "0x20003DF")]
	public class ChatPeer : PhotonPeer
	{
		[Token(Token = "0x4001C84")]
		public const string NameServerHost = "ns.exitgames.com";

		[Token(Token = "0x4001C85")]
		public const string NameServerHttp = "http://ns.exitgamescloud.com:80/photon/n";

		[Token(Token = "0x4001C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Dictionary<ConnectionProtocol, int> ProtocolToNameServerPort;

		[Token(Token = "0x1700030E")]
		public string NameServerAddress
		{
			[Token(Token = "0x6001A54")]
			[Address(RVA = "0x8C0314", Offset = "0x8C0314", VA = "0x8C0314")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700030F")]
		internal virtual bool IsProtocolSecure
		{
			[Token(Token = "0x6001A55")]
			[Address(RVA = "0x8C4E74", Offset = "0x8C4E74", VA = "0x8C4E74", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001A56")]
		[Address(RVA = "0x8BFFAC", Offset = "0x8BFFAC", VA = "0x8BFFAC")]
		public ChatPeer(IPhotonPeerListener listener, ConnectionProtocol protocol)
		{
		}

		[Token(Token = "0x6001A57")]
		[Address(RVA = "0x8C4E94", Offset = "0x8C4E94", VA = "0x8C4E94")]
		[Conditional("UNITY")]
		private void ConfigUnitySockets()
		{
		}

		[Token(Token = "0x6001A58")]
		[Address(RVA = "0x8C4CD8", Offset = "0x8C4CD8", VA = "0x8C4CD8")]
		private string GetNameServerAddress()
		{
			return null;
		}

		[Token(Token = "0x6001A59")]
		[Address(RVA = "0x8C0318", Offset = "0x8C0318", VA = "0x8C0318")]
		public bool Connect()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A5A")]
		[Address(RVA = "0x8C3FD0", Offset = "0x8C3FD0", VA = "0x8C3FD0")]
		public bool AuthenticateOnNameServer(string appId, string appVersion, string region, AuthenticationValues authValues)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20003E0")]
	public enum CustomAuthenticationType : byte
	{
		[Token(Token = "0x4001C88")]
		Custom = 0,
		[Token(Token = "0x4001C89")]
		Steam = 1,
		[Token(Token = "0x4001C8A")]
		Facebook = 2,
		[Token(Token = "0x4001C8B")]
		Oculus = 3,
		[Token(Token = "0x4001C8C")]
		PlayStation = 4,
		[Token(Token = "0x4001C8D")]
		Xbox = 5,
		[Token(Token = "0x4001C8E")]
		None = byte.MaxValue
	}
	[Token(Token = "0x20003E1")]
	public class AuthenticationValues
	{
		[Token(Token = "0x4001C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private CustomAuthenticationType authType;

		[Token(Token = "0x17000310")]
		public CustomAuthenticationType AuthType
		{
			[Token(Token = "0x6001A5C")]
			[Address(RVA = "0x8C50F4", Offset = "0x8C50F4", VA = "0x8C50F4")]
			get
			{
				return default(CustomAuthenticationType);
			}
			[Token(Token = "0x6001A5D")]
			[Address(RVA = "0x8C50FC", Offset = "0x8C50FC", VA = "0x8C50FC")]
			set
			{
			}
		}

		[Token(Token = "0x17000311")]
		public string AuthGetParameters
		{
			[Token(Token = "0x6001A5E")]
			[Address(RVA = "0x8C5104", Offset = "0x8C5104", VA = "0x8C5104")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A5F")]
			[Address(RVA = "0x8C510C", Offset = "0x8C510C", VA = "0x8C510C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000312")]
		public object AuthPostData
		{
			[Token(Token = "0x6001A60")]
			[Address(RVA = "0x8C5114", Offset = "0x8C5114", VA = "0x8C5114")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A61")]
			[Address(RVA = "0x8C511C", Offset = "0x8C511C", VA = "0x8C511C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000313")]
		public string Token
		{
			[Token(Token = "0x6001A62")]
			[Address(RVA = "0x8C5124", Offset = "0x8C5124", VA = "0x8C5124")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A63")]
			[Address(RVA = "0x8C512C", Offset = "0x8C512C", VA = "0x8C512C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000314")]
		public string UserId
		{
			[Token(Token = "0x6001A64")]
			[Address(RVA = "0x8C5134", Offset = "0x8C5134", VA = "0x8C5134")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001A65")]
			[Address(RVA = "0x8C513C", Offset = "0x8C513C", VA = "0x8C513C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001A66")]
		[Address(RVA = "0x8BFC58", Offset = "0x8BFC58", VA = "0x8BFC58")]
		public AuthenticationValues()
		{
		}

		[Token(Token = "0x6001A67")]
		[Address(RVA = "0x8C5144", Offset = "0x8C5144", VA = "0x8C5144")]
		public AuthenticationValues(string userId)
		{
		}

		[Token(Token = "0x6001A68")]
		[Address(RVA = "0x8C5174", Offset = "0x8C5174", VA = "0x8C5174", Slot = "4")]
		public virtual void SetAuthPostData(string stringData)
		{
		}

		[Token(Token = "0x6001A69")]
		[Address(RVA = "0x8C51B0", Offset = "0x8C51B0", VA = "0x8C51B0", Slot = "5")]
		public virtual void SetAuthPostData(byte[] byteData)
		{
		}

		[Token(Token = "0x6001A6A")]
		[Address(RVA = "0x8C51B8", Offset = "0x8C51B8", VA = "0x8C51B8", Slot = "6")]
		public virtual void AddAuthParameter(string key, string value)
		{
		}

		[Token(Token = "0x6001A6B")]
		[Address(RVA = "0x8C538C", Offset = "0x8C538C", VA = "0x8C538C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x20003E2")]
	public class ParameterCode
	{
		[Token(Token = "0x4001C94")]
		public const byte ApplicationId = 224;

		[Token(Token = "0x4001C95")]
		public const byte Secret = 221;

		[Token(Token = "0x4001C96")]
		public const byte AppVersion = 220;

		[Token(Token = "0x4001C97")]
		public const byte ClientAuthenticationType = 217;

		[Token(Token = "0x4001C98")]
		public const byte ClientAuthenticationParams = 216;

		[Token(Token = "0x4001C99")]
		public const byte ClientAuthenticationData = 214;

		[Token(Token = "0x4001C9A")]
		public const byte Region = 210;

		[Token(Token = "0x4001C9B")]
		public const byte Address = 230;

		[Token(Token = "0x4001C9C")]
		public const byte UserId = 225;

		[Token(Token = "0x6001A6C")]
		[Address(RVA = "0x8C5424", Offset = "0x8C5424", VA = "0x8C5424")]
		public ParameterCode()
		{
		}
	}
	[Token(Token = "0x20003E3")]
	public class ErrorCode
	{
		[Token(Token = "0x4001C9D")]
		public const int Ok = 0;

		[Token(Token = "0x4001C9E")]
		public const int OperationNotAllowedInCurrentState = -3;

		[Token(Token = "0x4001C9F")]
		public const int InvalidOperationCode = -2;

		[Token(Token = "0x4001CA0")]
		public const int InternalServerError = -1;

		[Token(Token = "0x4001CA1")]
		public const int InvalidAuthentication = 32767;

		[Token(Token = "0x4001CA2")]
		public const int GameIdAlreadyExists = 32766;

		[Token(Token = "0x4001CA3")]
		public const int GameFull = 32765;

		[Token(Token = "0x4001CA4")]
		public const int GameClosed = 32764;

		[Token(Token = "0x4001CA5")]
		public const int ServerFull = 32762;

		[Token(Token = "0x4001CA6")]
		public const int UserBlocked = 32761;

		[Token(Token = "0x4001CA7")]
		public const int NoRandomMatchFound = 32760;

		[Token(Token = "0x4001CA8")]
		public const int GameDoesNotExist = 32758;

		[Token(Token = "0x4001CA9")]
		public const int MaxCcuReached = 32757;

		[Token(Token = "0x4001CAA")]
		public const int InvalidRegion = 32756;

		[Token(Token = "0x4001CAB")]
		public const int CustomAuthenticationFailed = 32755;

		[Token(Token = "0x6001A6D")]
		[Address(RVA = "0x8C542C", Offset = "0x8C542C", VA = "0x8C542C")]
		public ErrorCode()
		{
		}
	}
	[Token(Token = "0x20003E4")]
	public enum ChatState
	{
		[Token(Token = "0x4001CAD")]
		Uninitialized,
		[Token(Token = "0x4001CAE")]
		ConnectingToNameServer,
		[Token(Token = "0x4001CAF")]
		ConnectedToNameServer,
		[Token(Token = "0x4001CB0")]
		Authenticating,
		[Token(Token = "0x4001CB1")]
		Authenticated,
		[Token(Token = "0x4001CB2")]
		DisconnectingFromNameServer,
		[Token(Token = "0x4001CB3")]
		ConnectingToFrontEnd,
		[Token(Token = "0x4001CB4")]
		ConnectedToFrontEnd,
		[Token(Token = "0x4001CB5")]
		DisconnectingFromFrontEnd,
		[Token(Token = "0x4001CB6")]
		QueuedComingFromFrontEnd,
		[Token(Token = "0x4001CB7")]
		Disconnecting,
		[Token(Token = "0x4001CB8")]
		Disconnected
	}
	[Token(Token = "0x20003E5")]
	public static class ChatUserStatus
	{
		[Token(Token = "0x4001CB9")]
		public const int Offline = 0;

		[Token(Token = "0x4001CBA")]
		public const int Invisible = 1;

		[Token(Token = "0x4001CBB")]
		public const int Online = 2;

		[Token(Token = "0x4001CBC")]
		public const int Away = 3;

		[Token(Token = "0x4001CBD")]
		public const int DND = 4;

		[Token(Token = "0x4001CBE")]
		public const int LFG = 5;

		[Token(Token = "0x4001CBF")]
		public const int Playing = 6;
	}
	[Token(Token = "0x20003E6")]
	public interface IChatClientListener
	{
		[Token(Token = "0x6001A6E")]
		void DebugReturn(DebugLevel level, string message);

		[Token(Token = "0x6001A6F")]
		void OnDisconnected();

		[Token(Token = "0x6001A70")]
		void OnConnected();

		[Token(Token = "0x6001A71")]
		void OnChatStateChange(ChatState state);

		[Token(Token = "0x6001A72")]
		void OnGetMessages(string channelName, string[] senders, object[] messages);

		[Token(Token = "0x6001A73")]
		void OnPrivateMessage(string sender, object message, string channelName);

		[Token(Token = "0x6001A74")]
		void OnSubscribed(string[] channels, bool[] results);

		[Token(Token = "0x6001A75")]
		void OnUnsubscribed(string[] channels);

		[Token(Token = "0x6001A76")]
		void OnStatusUpdate(string user, int status, bool gotMessage, object message);

		[Token(Token = "0x6001A77")]
		void OnUserSubscribed(string channel, string user);

		[Token(Token = "0x6001A78")]
		void OnUserUnsubscribed(string channel, string user);
	}
}
namespace ExitGames.Client.DemoParticle
{
	[Token(Token = "0x20003E7")]
	public class TimeKeeper
	{
		[Token(Token = "0x4001CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int lastExecutionTime;

		[Token(Token = "0x4001CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private bool shouldExecute;

		[Token(Token = "0x17000315")]
		public int Interval
		{
			[Token(Token = "0x6001A79")]
			[Address(RVA = "0x8C5434", Offset = "0x8C5434", VA = "0x8C5434")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001A7A")]
			[Address(RVA = "0x8C543C", Offset = "0x8C543C", VA = "0x8C543C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000316")]
		public bool IsEnabled
		{
			[Token(Token = "0x6001A7B")]
			[Address(RVA = "0x8C5444", Offset = "0x8C5444", VA = "0x8C5444")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A7C")]
			[Address(RVA = "0x8C544C", Offset = "0x8C544C", VA = "0x8C544C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000317")]
		public bool ShouldExecute
		{
			[Token(Token = "0x6001A7D")]
			[Address(RVA = "0x8C5458", Offset = "0x8C5458", VA = "0x8C5458")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001A7E")]
			[Address(RVA = "0x8C54A4", Offset = "0x8C54A4", VA = "0x8C54A4")]
			set
			{
			}
		}

		[Token(Token = "0x6001A7F")]
		[Address(RVA = "0x8C54B0", Offset = "0x8C54B0", VA = "0x8C54B0")]
		public TimeKeeper(int interval)
		{
		}

		[Token(Token = "0x6001A80")]
		[Address(RVA = "0x8C54F0", Offset = "0x8C54F0", VA = "0x8C54F0")]
		public void Reset()
		{
		}
	}
}
namespace ExitGames.Client.GUI
{
	[Token(Token = "0x20003E8")]
	public enum GizmoType
	{
		[Token(Token = "0x4001CC5")]
		WireSphere,
		[Token(Token = "0x4001CC6")]
		Sphere,
		[Token(Token = "0x4001CC7")]
		WireCube,
		[Token(Token = "0x4001CC8")]
		Cube
	}
	[Token(Token = "0x20003E9")]
	public class GizmoTypeDrawer
	{
		[Token(Token = "0x6001A81")]
		[Address(RVA = "0x8C5510", Offset = "0x8C5510", VA = "0x8C5510")]
		public static void Draw(Vector3 center, GizmoType type, Color color, float size)
		{
		}

		[Token(Token = "0x6001A82")]
		[Address(RVA = "0x8C5694", Offset = "0x8C5694", VA = "0x8C5694")]
		public GizmoTypeDrawer()
		{
		}
	}
}
namespace ntw.CurvedTextMeshPro
{
	[Token(Token = "0x20003EA")]
	[ExecuteInEditMode]
	public class TextProOnACircle : TextProOnACurve
	{
		[Token(Token = "0x4001CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[Tooltip("The radius of the text circle arc")]
		private float m_radius;

		[Token(Token = "0x4001CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("How much degrees the text arc should span")]
		[SerializeField]
		private float m_arcDegrees;

		[Token(Token = "0x4001CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("The angular offset at which the arc should be centered, in degrees")]
		[SerializeField]
		private float m_angularOffset;

		[Token(Token = "0x4001CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float m_oldRadius;

		[Token(Token = "0x4001CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float m_oldArcDegrees;

		[Token(Token = "0x4001CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float m_oldAngularOffset;

		[Token(Token = "0x6001A83")]
		[Address(RVA = "0x8C569C", Offset = "0x8C569C", VA = "0x8C569C", Slot = "4")]
		protected override bool ParametersHaveChanged()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A84")]
		[Address(RVA = "0x8C56F0", Offset = "0x8C56F0", VA = "0x8C56F0", Slot = "5")]
		protected override Matrix4x4 ComputeTransformationMatrix(Vector3 charMidBaselinePos, float zeroToOnePos, TMP_TextInfo textInfo, int charIdx)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6001A85")]
		[Address(RVA = "0x8C58AC", Offset = "0x8C58AC", VA = "0x8C58AC")]
		public TextProOnACircle()
		{
		}
	}
	[Token(Token = "0x20003EB")]
	[ExecuteInEditMode]
	public abstract class TextProOnACurve : UnityEngine.MonoBehaviour
	{
		[Token(Token = "0x4001CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TMP_Text m_TextComponent;

		[Token(Token = "0x4001CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool m_forceUpdate;

		[Token(Token = "0x6001A86")]
		[Address(RVA = "0x8C58D4", Offset = "0x8C58D4", VA = "0x8C58D4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001A87")]
		[Address(RVA = "0x8C5934", Offset = "0x8C5934", VA = "0x8C5934")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001A88")]
		[Address(RVA = "0x8C5940", Offset = "0x8C5940", VA = "0x8C5940")]
		protected void Update()
		{
		}

		[Token(Token = "0x6001A89")]
		protected abstract bool ParametersHaveChanged();

		[Token(Token = "0x6001A8A")]
		protected abstract Matrix4x4 ComputeTransformationMatrix(Vector3 charMidBaselinePos, float zeroToOnePos, TMP_TextInfo textInfo, int charIdx);

		[Token(Token = "0x6001A8B")]
		[Address(RVA = "0x8C58CC", Offset = "0x8C58CC", VA = "0x8C58CC")]
		protected TextProOnACurve()
		{
		}
	}
	[Token(Token = "0x20003EC")]
	[ExecuteInEditMode]
	public class TextProOnAExp : TextProOnACurve
	{
		[Token(Token = "0x4001CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		[Tooltip("The base of the exponential curve")]
		private float m_expBase;

		[Token(Token = "0x4001CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float m_oldExpBase;

		[Token(Token = "0x6001A8C")]
		[Address(RVA = "0x8C5D78", Offset = "0x8C5D78", VA = "0x8C5D78", Slot = "4")]
		protected override bool ParametersHaveChanged()
		{
			return default(bool);
		}

		[Token(Token = "0x6001A8D")]
		[Address(RVA = "0x8C5D90", Offset = "0x8C5D90", VA = "0x8C5D90", Slot = "5")]
		protected override Matrix4x4 ComputeTransformationMatrix(Vector3 charMidBaselinePos, float zeroToOnePos, TMP_TextInfo textInfo, int charIdx)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6001A8E")]
		[Address(RVA = "0x8C5F14", Offset = "0x8C5F14", VA = "0x8C5F14")]
		public TextProOnAExp()
		{
		}
	}
}
