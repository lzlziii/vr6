using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using DG.Tweening.Core;
using DG.Tweening.Plugins.Core.PathCore;
using DG.Tweening.Plugins.Options;
using Il2CppDummyDll;
using Microsoft.Win32.SafeHandles;
using RootMotion.FinalIK;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Audio;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.Playables;
using UnityEngine.SceneManagement;
using UnityEngine.Scripting;
using UnityEngine.UI;
using YamlDotNet.Core;
using YamlDotNet.Core.Events;
using YamlDotNet.Core.Tokens;
using YamlDotNet.Serialization;
using YamlDotNet.Serialization.EventEmitters;
using YamlDotNet.Serialization.TypeInspectors;
using YamlDotNet.Serialization.Utilities;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
public class HangDebug : MonoBehaviour
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject CharaObj;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA7EEDC", Offset = "0xA7EEDC")]
	public int FpsLimit;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GUIStyle s_GuiStyle;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GUIStyleState s_StyleState;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private HangManager script_HangManager;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static float FpsAccuracy;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static int FpsFrameCount;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static float FpsElapsedTime;

	[Token(Token = "0x6000001")]
	[Address(RVA = "0x28A6CDC", Offset = "0x28A6CDC", VA = "0x28A6CDC")]
	public static int FpsCalc()
	{
		return default(int);
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0x28A6DF4", Offset = "0x28A6DF4", VA = "0x28A6DF4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000003")]
	[Address(RVA = "0x28A6FA4", Offset = "0x28A6FA4", VA = "0x28A6FA4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000004")]
	[Address(RVA = "0x28A7110", Offset = "0x28A7110", VA = "0x28A7110")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0x28A72C0", Offset = "0x28A72C0", VA = "0x28A72C0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000006")]
	[Address(RVA = "0x28A7338", Offset = "0x28A7338", VA = "0x28A7338")]
	public HangDebug()
	{
	}
}
[Token(Token = "0x2000003")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xA7C698", Offset = "0xA7C698")]
public class HangCollider_Capsule : MonoBehaviour
{
	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float ColliCapsuleRadius;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ColliCapsuleHeight;

	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public HangManager HangManager;

	[Token(Token = "0x6000008")]
	[Address(RVA = "0x28A6308", Offset = "0x28A6308", VA = "0x28A6308")]
	public static HangManager FindHangManager(Transform check)
	{
		return null;
	}

	[Token(Token = "0x6000009")]
	[Address(RVA = "0x28A6460", Offset = "0x28A6460", VA = "0x28A6460")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0x28A64A8", Offset = "0x28A64A8", VA = "0x28A64A8")]
	public void Collider_Capsule(ref Vector3 Pos, float Rad)
	{
	}

	[Token(Token = "0x600000B")]
	[Address(RVA = "0x28A692C", Offset = "0x28A692C", VA = "0x28A692C")]
	public HangCollider_Capsule()
	{
	}
}
[Token(Token = "0x2000004")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xA7C6D0", Offset = "0xA7C6D0")]
public class HangCollider_Plane : MonoBehaviour
{
	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public HangManager script_HangManager;

	[Token(Token = "0x600000C")]
	[Address(RVA = "0x28A6940", Offset = "0x28A6940", VA = "0x28A6940")]
	private void Awake()
	{
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0x28A69EC", Offset = "0x28A69EC", VA = "0x28A69EC")]
	public void Collider_Plane(ref Vector3 Pos, float Rad)
	{
	}

	[Token(Token = "0x600000E")]
	[Address(RVA = "0x28A6BF0", Offset = "0x28A6BF0", VA = "0x28A6BF0")]
	public HangCollider_Plane()
	{
	}
}
[Token(Token = "0x2000005")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xA7C708", Offset = "0xA7C708")]
public class HangCollider_Sphere : MonoBehaviour
{
	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float ColliSphereRadius;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public HangManager HangManager;

	[Token(Token = "0x600000F")]
	[Address(RVA = "0x28A6BF8", Offset = "0x28A6BF8", VA = "0x28A6BF8")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000010")]
	[Address(RVA = "0x28A6C28", Offset = "0x28A6C28", VA = "0x28A6C28")]
	public void Collider_Sphere(ref Vector3 Pos, float Rad)
	{
	}

	[Token(Token = "0x6000011")]
	[Address(RVA = "0x28A6CCC", Offset = "0x28A6CCC", VA = "0x28A6CCC")]
	public HangCollider_Sphere()
	{
	}
}
[Token(Token = "0x2000006")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xA7C740", Offset = "0xA7C740")]
public class HangManager : MonoBehaviour
{
	[Token(Token = "0x20002FD")]
	public enum LANGUAGE_TYPE
	{
		[Token(Token = "0x4000E2F")]
		JAPAN,
		[Token(Token = "0x4000E30")]
		ENGLISH
	}

	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LANGUAGE_TYPE LanguageType;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform FarClippingObjRef;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float UpdateRate;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int StartResetWaitFrame;

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 WindVec;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float WindPower;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float WindRotAdd;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool WindRandFlag;

	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	public bool WindIntermittentMassFlag;

	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
	public bool CalcFlag;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
	public bool CalcHangTransCopyOnlyFlag;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool DBG_DispFlag;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA7EEF8", Offset = "0xA7EEF8")]
	public int SetupFrameCount;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA7EF10", Offset = "0xA7EF10")]
	public int ResetKeepFrameCount;

	[NonSerialized]
	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private int ResetCount;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private GameObject HangObj;

	[Token(Token = "0x6000012")]
	[Address(RVA = "0x28A734C", Offset = "0x28A734C", VA = "0x28A734C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000013")]
	[Address(RVA = "0x28A74E0", Offset = "0x28A74E0", VA = "0x28A74E0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000014")]
	[Address(RVA = "0x28A78F4", Offset = "0x28A78F4", VA = "0x28A78F4")]
	private void HangReset()
	{
	}

	[Token(Token = "0x6000015")]
	[Address(RVA = "0x28A7B3C", Offset = "0x28A7B3C", VA = "0x28A7B3C")]
	public void HangStringDelivery(LANGUAGE_TYPE LanguageType)
	{
	}

	[Token(Token = "0x6000016")]
	[Address(RVA = "0x28A7D4C", Offset = "0x28A7D4C", VA = "0x28A7D4C")]
	public void HangResetRequest(int WaitFrame)
	{
	}

	[Token(Token = "0x6000017")]
	[Address(RVA = "0x28A7D64", Offset = "0x28A7D64", VA = "0x28A7D64")]
	public void WindSet(Vector3 Vec, float Power, bool RandFlag, bool IntermittentMassFlag)
	{
	}

	[Token(Token = "0x6000018")]
	[Address(RVA = "0x28A7DD0", Offset = "0x28A7DD0", VA = "0x28A7DD0")]
	public void Teleport()
	{
	}

	[Token(Token = "0x6000019")]
	[Address(RVA = "0x28A7FB4", Offset = "0x28A7FB4", VA = "0x28A7FB4")]
	public void CalcFlagOn()
	{
	}

	[Token(Token = "0x600001A")]
	[Address(RVA = "0x28A7FC0", Offset = "0x28A7FC0", VA = "0x28A7FC0")]
	public void CalcFlagOff()
	{
	}

	[Token(Token = "0x600001B")]
	[Address(RVA = "0x28A7FC8", Offset = "0x28A7FC8", VA = "0x28A7FC8")]
	public void CalcHangTransCopyOnlyFlagOn()
	{
	}

	[Token(Token = "0x600001C")]
	[Address(RVA = "0x28A7FD4", Offset = "0x28A7FD4", VA = "0x28A7FD4")]
	public void CalcHangTransCopyOnlyFlagOff()
	{
	}

	[Token(Token = "0x600001D")]
	[Address(RVA = "0x28A7FDC", Offset = "0x28A7FDC", VA = "0x28A7FDC")]
	public bool IsCalcFlag()
	{
		return default(bool);
	}

	[Token(Token = "0x600001E")]
	[Address(RVA = "0x28A7FE4", Offset = "0x28A7FE4", VA = "0x28A7FE4")]
	public float CalcInter(float v1, float v2, float t)
	{
		return default(float);
	}

	[Token(Token = "0x600001F")]
	[Address(RVA = "0x28A7FFC", Offset = "0x28A7FFC", VA = "0x28A7FFC")]
	public float CalcReducedScaleChangeNoLimit(float defult_len, float change_over_len, float alpha)
	{
		return default(float);
	}

	[Token(Token = "0x6000020")]
	[Address(RVA = "0x28A8018", Offset = "0x28A8018", VA = "0x28A8018")]
	private float CalcSpherePlateDist(Vector3 pos, Vector3 nml, float coef_d)
	{
		return default(float);
	}

	[Token(Token = "0x6000021")]
	[Address(RVA = "0x28A6B98", Offset = "0x28A6B98", VA = "0x28A6B98")]
	public void CalcPlateNodePerpendicular(Vector3 c_pos, out Vector3 dst, Vector3 p0, Vector3 nml)
	{
	}

	[Token(Token = "0x6000022")]
	[Address(RVA = "0x28A6B54", Offset = "0x28A6B54", VA = "0x28A6B54")]
	public int CalcTriangle3DWrongSideOutNormal(Vector3 node, Vector3 l_node, Vector3 nml)
	{
		return default(int);
	}

	[Token(Token = "0x6000023")]
	[Address(RVA = "0x28A664C", Offset = "0x28A664C", VA = "0x28A664C")]
	public void CalcSphereHit(ref Vector3 StringPos, float StringRad, Vector3 SpherePos, float SphereRad)
	{
	}

	[Token(Token = "0x6000024")]
	[Address(RVA = "0x28A6708", Offset = "0x28A6708", VA = "0x28A6708")]
	public void CalcCapsuleHit(ref Vector3 StringPos, float StringRad, Vector3 CapsulePos_0, Vector3 CapsulePos_1, float CapsuleRad)
	{
	}

	[Token(Token = "0x6000025")]
	[Address(RVA = "0x28A8034", Offset = "0x28A8034", VA = "0x28A8034")]
	public Matrix4x4 CreateMatrix(Vector3 x, Vector3 y, Vector3 z, Vector3 t)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x6000026")]
	[Address(RVA = "0x28A8190", Offset = "0x28A8190", VA = "0x28A8190")]
	public Quaternion Matrix2Quaternion(Matrix4x4 m)
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000027")]
	[Address(RVA = "0x28A8498", Offset = "0x28A8498", VA = "0x28A8498")]
	private float Determinant(Matrix4x4 m)
	{
		return default(float);
	}

	[Token(Token = "0x6000028")]
	[Address(RVA = "0x28A8620", Offset = "0x28A8620", VA = "0x28A8620")]
	public Vector3 VectorRot(Vector3 VecSide, Vector3 VecForward, float Deg)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000029")]
	[Address(RVA = "0x28A86A8", Offset = "0x28A86A8", VA = "0x28A86A8")]
	public float CalcSinTblGet(float x1, float x2, float rot)
	{
		return default(float);
	}

	[Token(Token = "0x600002A")]
	[Address(RVA = "0x28A86E4", Offset = "0x28A86E4", VA = "0x28A86E4")]
	public void Anglelimit(Vector3 SideVec, Vector3 UpVec, Vector3 ForwardVec, float AngleMin, float AngleMax, ref Vector3 NodePos)
	{
	}

	[Token(Token = "0x600002B")]
	[Address(RVA = "0x28A886C", Offset = "0x28A886C", VA = "0x28A886C")]
	public HangManager()
	{
	}
}
[Token(Token = "0x2000007")]
public class HangPivot : MonoBehaviour
{
	[Token(Token = "0x600002C")]
	[Address(RVA = "0x28A88A0", Offset = "0x28A88A0", VA = "0x28A88A0")]
	public HangPivot()
	{
	}
}
[Serializable]
[Token(Token = "0x2000008")]
public struct ANGLE_LIMIT
{
	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Transform BaseAxis_1;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7EF28", Offset = "0xA7EF28")]
	public Transform BaseAxis_2;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA7EF60", Offset = "0xA7EF60")]
	public float BaseAxisTwoSettingsRate;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float BoneBlendRate;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool PivotLimitUseFlag;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float PivotLimitRotOffset;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool DBG_PivotLimitDispFlag;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA7EF78", Offset = "0xA7EF78")]
	public float Y_AngleMin;

	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA7EF94", Offset = "0xA7EF94")]
	public float Y_AngleMax;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA7EFB0", Offset = "0xA7EFB0")]
	public float Z_AngleMin;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA7EFCC", Offset = "0xA7EFCC")]
	public float Z_AngleMax;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public HangManager.LANGUAGE_TYPE LanguageType;
}
[Token(Token = "0x2000009")]
[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xA7C778", Offset = "0xA7C778")]
public class HangString : MonoBehaviour
{
	[Token(Token = "0x20002FE")]
	public enum FREEZE_AXIS
	{
		[Token(Token = "0x4000E32")]
		None,
		[Token(Token = "0x4000E33")]
		X,
		[Token(Token = "0x4000E34")]
		Y,
		[Token(Token = "0x4000E35")]
		Z
	}

	[Token(Token = "0x20002FF")]
	private class STRING
	{
		[Token(Token = "0x4000E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform Trans;

		[Token(Token = "0x4000E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int ParentId;

		[Token(Token = "0x4000E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float Hardness;

		[Token(Token = "0x4000E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float AirResistance;

		[Token(Token = "0x4000E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float Radius;

		[Token(Token = "0x4000E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float Length;

		[Token(Token = "0x4000E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 PosNow;

		[Token(Token = "0x4000E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 PosPrev;

		[Token(Token = "0x4000E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 InitLocalPos;

		[Token(Token = "0x4000E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Quaternion InitLocalRot;

		[Token(Token = "0x600148B")]
		[Address(RVA = "0x1E36104", Offset = "0x1E36104", VA = "0x1E36104")]
		public STRING()
		{
		}
	}

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA7EFE8", Offset = "0xA7EFE8")]
	public int CalcPriorityId;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform StringFirstBonTrans;

	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA7F000", Offset = "0xA7F000")]
	public float Hardness;

	[Token(Token = "0x400002E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AnimationCurve HardnessCurve;

	[Token(Token = "0x400002F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA7F01C", Offset = "0xA7F01C")]
	public float AirResistance;

	[Token(Token = "0x4000030")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AnimationCurve AirResistanceCurve;

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float StringRad;

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AnimationCurve StringRadCurve;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float StringGravity;

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public List<float> NodeGravity;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public List<Transform> ExcludeTrans;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public FREEZE_AXIS FreezeAxis;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float FarClipCalcDist;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7F034", Offset = "0xA7F034")]
	public List<HangCollider_Sphere> HangCollider_SphereList;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public List<HangCollider_Capsule> HangCollider_CapsuleList;

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public List<HangCollider_Plane> HangCollider_PlaneList;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public bool DBG_AngleLimitDisp;

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public ANGLE_LIMIT[] AngleLimit;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public float FirstBoneRotZOffset;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float[] InitSpringLength;

	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float s_StringTotalLength;

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private float s_ObjectScale;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private bool s_DistantDisabled;

	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
	private bool s_TeleportFlag;

	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private int s_Start_SetupFrameCount;

	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private bool s_Start_SetupOnceFlag;

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private int s_Start_ResetKeepFrameCount;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private List<STRING> String;

	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private HangManager script_HangManager;

	[Token(Token = "0x600002D")]
	[Address(RVA = "0x28A88A8", Offset = "0x28A88A8", VA = "0x28A88A8")]
	public static HangManager FindHangManager(Transform check)
	{
		return null;
	}

	[Token(Token = "0x600002E")]
	[Address(RVA = "0x28A89B0", Offset = "0x28A89B0", VA = "0x28A89B0")]
	private void Awake()
	{
	}

	[Token(Token = "0x600002F")]
	[Address(RVA = "0x28A77B4", Offset = "0x28A77B4", VA = "0x28A77B4")]
	public void LateUpdateCalc()
	{
	}

	[Token(Token = "0x6000030")]
	[Address(RVA = "0x28A8C50", Offset = "0x28A8C50", VA = "0x28A8C50")]
	private void FarClipCalc()
	{
	}

	[Token(Token = "0x6000031")]
	[Address(RVA = "0x28A8E80", Offset = "0x28A8E80", VA = "0x28A8E80")]
	private void StringPos2ModelPos()
	{
	}

	[Token(Token = "0x6000032")]
	[Address(RVA = "0x28A8F80", Offset = "0x28A8F80", VA = "0x28A8F80")]
	private void LocalTransInit()
	{
	}

	[Token(Token = "0x6000033")]
	[Address(RVA = "0x28A9094", Offset = "0x28A9094", VA = "0x28A9094")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000034")]
	[Address(RVA = "0x28A9098", Offset = "0x28A9098", VA = "0x28A9098")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0x28A909C", Offset = "0x28A909C", VA = "0x28A909C")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x6000036")]
	[Address(RVA = "0x28A8D7C", Offset = "0x28A8D7C", VA = "0x28A8D7C")]
	private void StringCalc(float Dt)
	{
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0x28A8A94", Offset = "0x28A8A94", VA = "0x28A8A94")]
	private void StringSetup()
	{
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0x28AA1BC", Offset = "0x28AA1BC", VA = "0x28AA1BC")]
	private void AddStringNode(Transform Trans, int ParentId, float Length)
	{
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0x28AA608", Offset = "0x28AA608", VA = "0x28AA608")]
	private void UpdateParam()
	{
	}

	[Token(Token = "0x600003A")]
	[Address(RVA = "0x28A9130", Offset = "0x28A9130", VA = "0x28A9130")]
	private void StringCalcSub_1_FirstBone()
	{
	}

	[Token(Token = "0x600003B")]
	[Address(RVA = "0x28A91C4", Offset = "0x28A91C4", VA = "0x28A91C4")]
	private void StringCalcSub_2_WindAndMove(float Dt)
	{
	}

	[Token(Token = "0x600003C")]
	[Address(RVA = "0x28A979C", Offset = "0x28A979C", VA = "0x28A979C")]
	private void StringCalcSub_3_LimitAndTransform()
	{
	}

	[Token(Token = "0x600003D")]
	[Address(RVA = "0x28A9A1C", Offset = "0x28A9A1C", VA = "0x28A9A1C")]
	private void StringCalcSub_4_ColiHit()
	{
	}

	[Token(Token = "0x600003E")]
	[Address(RVA = "0x28A9F50", Offset = "0x28A9F50", VA = "0x28A9F50")]
	private void StringCalcSub_5_Trans()
	{
	}

	[Token(Token = "0x600003F")]
	[Address(RVA = "0x28AA808", Offset = "0x28AA808", VA = "0x28AA808")]
	private void AngleLimit_YZ(int NodeId)
	{
	}

	[Token(Token = "0x6000040")]
	[Address(RVA = "0x28A7AF8", Offset = "0x28A7AF8", VA = "0x28A7AF8")]
	public void StringReset()
	{
	}

	[Token(Token = "0x6000041")]
	[Address(RVA = "0x28A7FA8", Offset = "0x28A7FA8", VA = "0x28A7FA8")]
	public void Teleport()
	{
	}

	[Token(Token = "0x6000042")]
	[Address(RVA = "0x28AAFF4", Offset = "0x28AAFF4", VA = "0x28AAFF4")]
	public HangString()
	{
	}
}
[Token(Token = "0x200000A")]
[ExecuteInEditMode]
public class LODGroupOverride : MonoBehaviour
{
	[Token(Token = "0x2000300")]
	[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E4AC", Offset = "0xA7E4AC")]
	private sealed class <AutoSizeScene>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LODGroupOverride <>4__this;

		[Token(Token = "0x4000E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Scene? scene;

		[Token(Token = "0x17000151")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600148F")]
			[Address(RVA = "0x1EA8064", Offset = "0x1EA8064", VA = "0x1EA8064", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000152")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6001491")]
			[Address(RVA = "0x1EA80AC", Offset = "0x1EA80AC", VA = "0x1EA80AC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600148C")]
		[Address(RVA = "0x1EA78E4", Offset = "0x1EA78E4", VA = "0x1EA78E4")]
		[DebuggerHidden]
		public <AutoSizeScene>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x600148D")]
		[Address(RVA = "0x1EA7910", Offset = "0x1EA7910", VA = "0x1EA7910", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600148E")]
		[Address(RVA = "0x1EA7914", Offset = "0x1EA7914", VA = "0x1EA7914", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6001490")]
		[Address(RVA = "0x1EA806C", Offset = "0x1EA806C", VA = "0x1EA806C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool AutoSizeSceneFor100Rule;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7F06C", Offset = "0xA7F06C")]
	public float ManualFOV;

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float lodSize;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool ScaleWithObjectScale;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 localReference;

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private LODGroup m_LODGroup;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool m_bWasAuto;

	[Token(Token = "0x6000043")]
	[Address(RVA = "0x22F1A10", Offset = "0x22F1A10", VA = "0x22F1A10")]
	public void ForceRefreshAutosize()
	{
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0x22F1AC8", Offset = "0x22F1AC8", VA = "0x22F1AC8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000045")]
	[Address(RVA = "0x22F1C78", Offset = "0x22F1C78", VA = "0x22F1C78")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0x22F1D34", Offset = "0x22F1D34", VA = "0x22F1D34")]
	private void OnSceneManagerOnsceneLoaded(Scene arg0, LoadSceneMode mode)
	{
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0x22F1DB4", Offset = "0x22F1DB4", VA = "0x22F1DB4")]
	private LODGroup[] GetLODGroups(Scene? scene)
	{
		return null;
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0x22F1A40", Offset = "0x22F1A40", VA = "0x22F1A40")]
	[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xA89604", Offset = "0xA89604")]
	private IEnumerator AutoSizeScene(Scene? scene)
	{
		return null;
	}

	[Token(Token = "0x6000049")]
	[Address(RVA = "0x22F1F88", Offset = "0x22F1F88", VA = "0x22F1F88")]
	public LODGroupOverride()
	{
	}
}
[Token(Token = "0x200000B")]
[ExecuteInEditMode]
public class LightmappedLOD : MonoBehaviour
{
	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private MeshRenderer currentRenderer;

	[Token(Token = "0x600004A")]
	[Address(RVA = "0x22F28C4", Offset = "0x22F28C4", VA = "0x22F28C4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600004B")]
	[Address(RVA = "0x22F2938", Offset = "0x22F2938", VA = "0x22F2938")]
	private void RendererInfoTransfer()
	{
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0x22F30AC", Offset = "0x22F30AC", VA = "0x22F30AC")]
	public LightmappedLOD()
	{
	}
}
[Token(Token = "0x200000C")]
[ExecuteInEditMode]
public class StealLightmap : MonoBehaviour
{
	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private MeshRenderer currentRenderer;

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshRenderer lightmappedObject;

	[Token(Token = "0x600004D")]
	[Address(RVA = "0x1632C0C", Offset = "0x1632C0C", VA = "0x1632C0C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0x1632C10", Offset = "0x1632C10", VA = "0x1632C10")]
	private void Awake()
	{
	}

	[Token(Token = "0x600004F")]
	[Address(RVA = "0x1632C84", Offset = "0x1632C84", VA = "0x1632C84")]
	private void RendererInfoTransfer()
	{
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0x1632E00", Offset = "0x1632E00", VA = "0x1632E00")]
	public StealLightmap()
	{
	}
}
[Token(Token = "0x200000D")]
public class TextureScaler
{
	[Token(Token = "0x6000051")]
	[Address(RVA = "0x1653120", Offset = "0x1653120", VA = "0x1653120")]
	public static Texture2D scaled(Texture2D src, int width, int height, FilterMode mode = FilterMode.Trilinear)
	{
		return null;
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0x1653398", Offset = "0x1653398", VA = "0x1653398")]
	public static void scale(Texture2D tex, int width, int height, FilterMode mode = FilterMode.Trilinear)
	{
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0x1653220", Offset = "0x1653220", VA = "0x1653220")]
	private static void _gpu_scale(Texture2D src, int width, int height, FilterMode fmode)
	{
	}

	[Token(Token = "0x6000054")]
	[Address(RVA = "0x1653450", Offset = "0x1653450", VA = "0x1653450")]
	public TextureScaler()
	{
	}
}
namespace UnityStandardAssets.CrossPlatformInput
{
	[Token(Token = "0x200000E")]
	public class AxisTouchButton : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler
	{
		[Token(Token = "0x4000052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string axisName;

		[Token(Token = "0x4000053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float axisValue;

		[Token(Token = "0x4000054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float responseSpeed;

		[Token(Token = "0x4000055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float returnToCentreSpeed;

		[Token(Token = "0x4000056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private AxisTouchButton m_PairedWith;

		[Token(Token = "0x4000057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CrossPlatformInputManager.VirtualAxis m_Axis;

		[Token(Token = "0x6000055")]
		[Address(RVA = "0x2313FB4", Offset = "0x2313FB4", VA = "0x2313FB4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000056")]
		[Address(RVA = "0x23140D4", Offset = "0x23140D4", VA = "0x23140D4")]
		private void FindPairedButton()
		{
		}

		[Token(Token = "0x6000057")]
		[Address(RVA = "0x2314284", Offset = "0x2314284", VA = "0x2314284")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000058")]
		[Address(RVA = "0x23142A0", Offset = "0x23142A0", VA = "0x23142A0", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x6000059")]
		[Address(RVA = "0x2314360", Offset = "0x2314360", VA = "0x2314360", Slot = "5")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x600005A")]
		[Address(RVA = "0x23143B4", Offset = "0x23143B4", VA = "0x23143B4")]
		public AxisTouchButton()
		{
		}
	}
	[Token(Token = "0x200000F")]
	public class ButtonHandler : MonoBehaviour
	{
		[Token(Token = "0x4000058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Name;

		[Token(Token = "0x600005B")]
		[Address(RVA = "0x23208A0", Offset = "0x23208A0", VA = "0x23208A0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600005C")]
		[Address(RVA = "0x23208A4", Offset = "0x23208A4", VA = "0x23208A4")]
		public void SetDownState()
		{
		}

		[Token(Token = "0x600005D")]
		[Address(RVA = "0x232090C", Offset = "0x232090C", VA = "0x232090C")]
		public void SetUpState()
		{
		}

		[Token(Token = "0x600005E")]
		[Address(RVA = "0x2320974", Offset = "0x2320974", VA = "0x2320974")]
		public void SetAxisPositiveState()
		{
		}

		[Token(Token = "0x600005F")]
		[Address(RVA = "0x23209DC", Offset = "0x23209DC", VA = "0x23209DC")]
		public void SetAxisNeutralState()
		{
		}

		[Token(Token = "0x6000060")]
		[Address(RVA = "0x2320A44", Offset = "0x2320A44", VA = "0x2320A44")]
		public void SetAxisNegativeState()
		{
		}

		[Token(Token = "0x6000061")]
		[Address(RVA = "0x2320AAC", Offset = "0x2320AAC", VA = "0x2320AAC")]
		public void Update()
		{
		}

		[Token(Token = "0x6000062")]
		[Address(RVA = "0x2320AB0", Offset = "0x2320AB0", VA = "0x2320AB0")]
		public ButtonHandler()
		{
		}
	}
	[Token(Token = "0x2000010")]
	public static class CrossPlatformInputManager
	{
		[Token(Token = "0x2000301")]
		public enum ActiveInputMethod
		{
			[Token(Token = "0x4000E45")]
			Hardware,
			[Token(Token = "0x4000E46")]
			Touch
		}

		[Token(Token = "0x2000302")]
		public class VirtualAxis
		{
			[Token(Token = "0x4000E47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA84350", Offset = "0xA84350")]
			private string <name>k__BackingField;

			[Token(Token = "0x4000E48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private float m_Value;

			[Token(Token = "0x4000E49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA84360", Offset = "0xA84360")]
			private bool <matchWithInputManager>k__BackingField;

			[Token(Token = "0x17000153")]
			public string name
			{
				[Token(Token = "0x6001492")]
				[Address(RVA = "0x1A813DC", Offset = "0x1A813DC", VA = "0x1A813DC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8CEFC", Offset = "0xA8CEFC")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001493")]
				[Address(RVA = "0x1A813E4", Offset = "0x1A813E4", VA = "0x1A813E4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8CF0C", Offset = "0xA8CF0C")]
				private set
				{
				}
			}

			[Token(Token = "0x17000154")]
			public bool matchWithInputManager
			{
				[Token(Token = "0x6001494")]
				[Address(RVA = "0x1A813EC", Offset = "0x1A813EC", VA = "0x1A813EC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8CF1C", Offset = "0xA8CF1C")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001495")]
				[Address(RVA = "0x1A813F4", Offset = "0x1A813F4", VA = "0x1A813F4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8CF2C", Offset = "0xA8CF2C")]
				private set
				{
				}
			}

			[Token(Token = "0x17000155")]
			public float GetValue
			{
				[Token(Token = "0x600149A")]
				[Address(RVA = "0x1A814FC", Offset = "0x1A814FC", VA = "0x1A814FC")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000156")]
			public float GetValueRaw
			{
				[Token(Token = "0x600149B")]
				[Address(RVA = "0x1A81504", Offset = "0x1A81504", VA = "0x1A81504")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x6001496")]
			[Address(RVA = "0x1A81400", Offset = "0x1A81400", VA = "0x1A81400")]
			public VirtualAxis(string name)
			{
			}

			[Token(Token = "0x6001497")]
			[Address(RVA = "0x1A81440", Offset = "0x1A81440", VA = "0x1A81440")]
			public VirtualAxis(string name, bool matchToInputSettings)
			{
			}

			[Token(Token = "0x6001498")]
			[Address(RVA = "0x1A8148C", Offset = "0x1A8148C", VA = "0x1A8148C")]
			public void Remove()
			{
			}

			[Token(Token = "0x6001499")]
			[Address(RVA = "0x1A814F4", Offset = "0x1A814F4", VA = "0x1A814F4")]
			public void Update(float value)
			{
			}
		}

		[Token(Token = "0x2000303")]
		public class VirtualButton
		{
			[Token(Token = "0x4000E4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA84370", Offset = "0xA84370")]
			private string <name>k__BackingField;

			[Token(Token = "0x4000E4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA84380", Offset = "0xA84380")]
			private bool <matchWithInputManager>k__BackingField;

			[Token(Token = "0x4000E4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private int m_LastPressedFrame;

			[Token(Token = "0x4000E4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int m_ReleasedFrame;

			[Token(Token = "0x4000E4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private bool m_Pressed;

			[Token(Token = "0x17000157")]
			public string name
			{
				[Token(Token = "0x600149C")]
				[Address(RVA = "0x1A8150C", Offset = "0x1A8150C", VA = "0x1A8150C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8CF3C", Offset = "0xA8CF3C")]
				get
				{
					return null;
				}
				[Token(Token = "0x600149D")]
				[Address(RVA = "0x1A81514", Offset = "0x1A81514", VA = "0x1A81514")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8CF4C", Offset = "0xA8CF4C")]
				private set
				{
				}
			}

			[Token(Token = "0x17000158")]
			public bool matchWithInputManager
			{
				[Token(Token = "0x600149E")]
				[Address(RVA = "0x1A8151C", Offset = "0x1A8151C", VA = "0x1A8151C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8CF5C", Offset = "0xA8CF5C")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x600149F")]
				[Address(RVA = "0x1A81524", Offset = "0x1A81524", VA = "0x1A81524")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8CF6C", Offset = "0xA8CF6C")]
				private set
				{
				}
			}

			[Token(Token = "0x17000159")]
			public bool GetButton
			{
				[Token(Token = "0x60014A5")]
				[Address(RVA = "0x1A8169C", Offset = "0x1A8169C", VA = "0x1A8169C")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700015A")]
			public bool GetButtonDown
			{
				[Token(Token = "0x60014A6")]
				[Address(RVA = "0x1A816A4", Offset = "0x1A816A4", VA = "0x1A816A4")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700015B")]
			public bool GetButtonUp
			{
				[Token(Token = "0x60014A7")]
				[Address(RVA = "0x1A816D4", Offset = "0x1A816D4", VA = "0x1A816D4")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60014A0")]
			[Address(RVA = "0x1A81530", Offset = "0x1A81530", VA = "0x1A81530")]
			public VirtualButton(string name)
			{
			}

			[Token(Token = "0x60014A1")]
			[Address(RVA = "0x1A81578", Offset = "0x1A81578", VA = "0x1A81578")]
			public VirtualButton(string name, bool matchToInputSettings)
			{
			}

			[Token(Token = "0x60014A2")]
			[Address(RVA = "0x1A815CC", Offset = "0x1A815CC", VA = "0x1A815CC")]
			public void Pressed()
			{
			}

			[Token(Token = "0x60014A3")]
			[Address(RVA = "0x1A81608", Offset = "0x1A81608", VA = "0x1A81608")]
			public void Released()
			{
			}

			[Token(Token = "0x60014A4")]
			[Address(RVA = "0x1A81634", Offset = "0x1A81634", VA = "0x1A81634")]
			public void Remove()
			{
			}
		}

		[Token(Token = "0x4000059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static VirtualInput activeInput;

		[Token(Token = "0x400005A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static VirtualInput s_TouchInput;

		[Token(Token = "0x400005B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static VirtualInput s_HardwareInput;

		[Token(Token = "0x17000001")]
		public static Vector3 mousePosition
		{
			[Token(Token = "0x6000078")]
			[Address(RVA = "0x169A234", Offset = "0x169A234", VA = "0x169A234")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000063")]
		[Address(RVA = "0x1699760", Offset = "0x1699760", VA = "0x1699760")]
		static CrossPlatformInputManager()
		{
		}

		[Token(Token = "0x6000064")]
		[Address(RVA = "0x1699828", Offset = "0x1699828", VA = "0x1699828")]
		public static void SwitchActiveInputMethod(ActiveInputMethod activeInputMethod)
		{
		}

		[Token(Token = "0x6000065")]
		[Address(RVA = "0x16998DC", Offset = "0x16998DC", VA = "0x16998DC")]
		public static bool AxisExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000066")]
		[Address(RVA = "0x1699954", Offset = "0x1699954", VA = "0x1699954")]
		public static bool ButtonExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000067")]
		[Address(RVA = "0x16999CC", Offset = "0x16999CC", VA = "0x16999CC")]
		public static void RegisterVirtualAxis(VirtualAxis axis)
		{
		}

		[Token(Token = "0x6000068")]
		[Address(RVA = "0x1699A44", Offset = "0x1699A44", VA = "0x1699A44")]
		public static void RegisterVirtualButton(VirtualButton button)
		{
		}

		[Token(Token = "0x6000069")]
		[Address(RVA = "0x1699ABC", Offset = "0x1699ABC", VA = "0x1699ABC")]
		public static void UnRegisterVirtualAxis(string name)
		{
		}

		[Token(Token = "0x600006A")]
		[Address(RVA = "0x1699B80", Offset = "0x1699B80", VA = "0x1699B80")]
		public static void UnRegisterVirtualButton(string name)
		{
		}

		[Token(Token = "0x600006B")]
		[Address(RVA = "0x1699BF8", Offset = "0x1699BF8", VA = "0x1699BF8")]
		public static VirtualAxis VirtualAxisReference(string name)
		{
			return null;
		}

		[Token(Token = "0x600006C")]
		[Address(RVA = "0x1699C70", Offset = "0x1699C70", VA = "0x1699C70")]
		public static float GetAxis(string name)
		{
			return default(float);
		}

		[Token(Token = "0x600006D")]
		[Address(RVA = "0x1699D60", Offset = "0x1699D60", VA = "0x1699D60")]
		public static float GetAxisRaw(string name)
		{
			return default(float);
		}

		[Token(Token = "0x600006E")]
		[Address(RVA = "0x1699CD4", Offset = "0x1699CD4", VA = "0x1699CD4")]
		private static float GetAxis(string name, bool raw)
		{
			return default(float);
		}

		[Token(Token = "0x600006F")]
		[Address(RVA = "0x1699DC4", Offset = "0x1699DC4", VA = "0x1699DC4")]
		public static bool GetButton(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000070")]
		[Address(RVA = "0x1699E40", Offset = "0x1699E40", VA = "0x1699E40")]
		public static bool GetButtonDown(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000071")]
		[Address(RVA = "0x1699EBC", Offset = "0x1699EBC", VA = "0x1699EBC")]
		public static bool GetButtonUp(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6000072")]
		[Address(RVA = "0x1699F38", Offset = "0x1699F38", VA = "0x1699F38")]
		public static void SetButtonDown(string name)
		{
		}

		[Token(Token = "0x6000073")]
		[Address(RVA = "0x1699FB4", Offset = "0x1699FB4", VA = "0x1699FB4")]
		public static void SetButtonUp(string name)
		{
		}

		[Token(Token = "0x6000074")]
		[Address(RVA = "0x169A030", Offset = "0x169A030", VA = "0x169A030")]
		public static void SetAxisPositive(string name)
		{
		}

		[Token(Token = "0x6000075")]
		[Address(RVA = "0x169A0AC", Offset = "0x169A0AC", VA = "0x169A0AC")]
		public static void SetAxisNegative(string name)
		{
		}

		[Token(Token = "0x6000076")]
		[Address(RVA = "0x169A128", Offset = "0x169A128", VA = "0x169A128")]
		public static void SetAxisZero(string name)
		{
		}

		[Token(Token = "0x6000077")]
		[Address(RVA = "0x169A1A4", Offset = "0x169A1A4", VA = "0x169A1A4")]
		public static void SetAxis(string name, float value)
		{
		}

		[Token(Token = "0x6000079")]
		[Address(RVA = "0x169A2AC", Offset = "0x169A2AC", VA = "0x169A2AC")]
		public static void SetVirtualMousePositionX(float f)
		{
		}

		[Token(Token = "0x600007A")]
		[Address(RVA = "0x169A32C", Offset = "0x169A32C", VA = "0x169A32C")]
		public static void SetVirtualMousePositionY(float f)
		{
		}

		[Token(Token = "0x600007B")]
		[Address(RVA = "0x169A3AC", Offset = "0x169A3AC", VA = "0x169A3AC")]
		public static void SetVirtualMousePositionZ(float f)
		{
		}
	}
	[Token(Token = "0x2000011")]
	public class InputAxisScrollbar : MonoBehaviour
	{
		[Token(Token = "0x400005C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string axis;

		[Token(Token = "0x600007C")]
		[Address(RVA = "0x22E71E4", Offset = "0x22E71E4", VA = "0x22E71E4")]
		private void Update()
		{
		}

		[Token(Token = "0x600007D")]
		[Address(RVA = "0x22E71E8", Offset = "0x22E71E8", VA = "0x22E71E8")]
		public void HandleInput(float value)
		{
		}

		[Token(Token = "0x600007E")]
		[Address(RVA = "0x22E7268", Offset = "0x22E7268", VA = "0x22E7268")]
		public InputAxisScrollbar()
		{
		}
	}
	[Token(Token = "0x2000012")]
	public class Joystick : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler, IDragHandler
	{
		[Token(Token = "0x2000304")]
		public enum AxisOption
		{
			[Token(Token = "0x4000E50")]
			Both,
			[Token(Token = "0x4000E51")]
			OnlyHorizontal,
			[Token(Token = "0x4000E52")]
			OnlyVertical
		}

		[Token(Token = "0x400005D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int MovementRange;

		[Token(Token = "0x400005E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AxisOption axesToUse;

		[Token(Token = "0x400005F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string horizontalAxisName;

		[Token(Token = "0x4000060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string verticalAxisName;

		[Token(Token = "0x4000061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 m_StartPos;

		[Token(Token = "0x4000062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool m_UseX;

		[Token(Token = "0x4000063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		private bool m_UseY;

		[Token(Token = "0x4000064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CrossPlatformInputManager.VirtualAxis m_HorizontalVirtualAxis;

		[Token(Token = "0x4000065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CrossPlatformInputManager.VirtualAxis m_VerticalVirtualAxis;

		[Token(Token = "0x600007F")]
		[Address(RVA = "0x22F0D80", Offset = "0x22F0D80", VA = "0x22F0D80")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000080")]
		[Address(RVA = "0x22F0EE0", Offset = "0x22F0EE0", VA = "0x22F0EE0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000081")]
		[Address(RVA = "0x22F0F1C", Offset = "0x22F0F1C", VA = "0x22F0F1C")]
		private void UpdateVirtualAxes(Vector3 value)
		{
		}

		[Token(Token = "0x6000082")]
		[Address(RVA = "0x22F0D84", Offset = "0x22F0D84", VA = "0x22F0D84")]
		private void CreateVirtualAxes()
		{
		}

		[Token(Token = "0x6000083")]
		[Address(RVA = "0x22F0F80", Offset = "0x22F0F80", VA = "0x22F0F80", Slot = "6")]
		public void OnDrag(PointerEventData data)
		{
		}

		[Token(Token = "0x6000084")]
		[Address(RVA = "0x22F1074", Offset = "0x22F1074", VA = "0x22F1074", Slot = "5")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x6000085")]
		[Address(RVA = "0x22F10BC", Offset = "0x22F10BC", VA = "0x22F10BC", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x6000086")]
		[Address(RVA = "0x22F10C0", Offset = "0x22F10C0", VA = "0x22F10C0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000087")]
		[Address(RVA = "0x22F1118", Offset = "0x22F1118", VA = "0x22F1118")]
		public Joystick()
		{
		}
	}
	[Token(Token = "0x2000013")]
	[ExecuteInEditMode]
	public class MobileControlRig : MonoBehaviour
	{
		[Token(Token = "0x6000088")]
		[Address(RVA = "0x22F79B8", Offset = "0x22F79B8", VA = "0x22F79B8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000089")]
		[Address(RVA = "0x22F79C8", Offset = "0x22F79C8", VA = "0x22F79C8")]
		private void Start()
		{
		}

		[Token(Token = "0x600008A")]
		[Address(RVA = "0x22F79C0", Offset = "0x22F79C0", VA = "0x22F79C0")]
		private void CheckEnableControlRig()
		{
		}

		[Token(Token = "0x600008B")]
		[Address(RVA = "0x22F7ADC", Offset = "0x22F7ADC", VA = "0x22F7ADC")]
		private void EnableControlRig(bool enabled)
		{
		}

		[Token(Token = "0x600008C")]
		[Address(RVA = "0x22F7D98", Offset = "0x22F7D98", VA = "0x22F7D98")]
		public MobileControlRig()
		{
		}
	}
	[Token(Token = "0x2000014")]
	public class TiltInput : MonoBehaviour
	{
		[Token(Token = "0x2000305")]
		public enum AxisOptions
		{
			[Token(Token = "0x4000E54")]
			ForwardAxis,
			[Token(Token = "0x4000E55")]
			SidewaysAxis
		}

		[Serializable]
		[Token(Token = "0x2000306")]
		public class AxisMapping
		{
			[Token(Token = "0x2000430")]
			public enum MappingType
			{
				[Token(Token = "0x400128E")]
				NamedAxis,
				[Token(Token = "0x400128F")]
				MousePositionX,
				[Token(Token = "0x4001290")]
				MousePositionY,
				[Token(Token = "0x4001291")]
				MousePositionZ
			}

			[Token(Token = "0x4000E56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public MappingType type;

			[Token(Token = "0x4000E57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string axisName;

			[Token(Token = "0x60014A8")]
			[Address(RVA = "0x1EAD374", Offset = "0x1EAD374", VA = "0x1EAD374")]
			public AxisMapping()
			{
			}
		}

		[Token(Token = "0x4000066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AxisMapping mapping;

		[Token(Token = "0x4000067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AxisOptions tiltAroundAxis;

		[Token(Token = "0x4000068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float fullTiltAngle;

		[Token(Token = "0x4000069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float centreAngleOffset;

		[Token(Token = "0x400006A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CrossPlatformInputManager.VirtualAxis m_SteerAxis;

		[Token(Token = "0x600008D")]
		[Address(RVA = "0x1653458", Offset = "0x1653458", VA = "0x1653458")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600008E")]
		[Address(RVA = "0x165352C", Offset = "0x165352C", VA = "0x165352C")]
		private void Update()
		{
		}

		[Token(Token = "0x600008F")]
		[Address(RVA = "0x1653754", Offset = "0x1653754", VA = "0x1653754")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000090")]
		[Address(RVA = "0x1653770", Offset = "0x1653770", VA = "0x1653770")]
		public TiltInput()
		{
		}
	}
	[Token(Token = "0x2000015")]
	[AttributeAttribute(Name = "RequireComponent", RVA = "0xA7C7F0", Offset = "0xA7C7F0")]
	public class TouchPad : MonoBehaviour, IPointerDownHandler, IEventSystemHandler, IPointerUpHandler
	{
		[Token(Token = "0x2000307")]
		public enum AxisOption
		{
			[Token(Token = "0x4000E59")]
			Both,
			[Token(Token = "0x4000E5A")]
			OnlyHorizontal,
			[Token(Token = "0x4000E5B")]
			OnlyVertical
		}

		[Token(Token = "0x2000308")]
		public enum ControlStyle
		{
			[Token(Token = "0x4000E5D")]
			Absolute,
			[Token(Token = "0x4000E5E")]
			Relative,
			[Token(Token = "0x4000E5F")]
			Swipe
		}

		[Token(Token = "0x400006B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AxisOption axesToUse;

		[Token(Token = "0x400006C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ControlStyle controlStyle;

		[Token(Token = "0x400006D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string horizontalAxisName;

		[Token(Token = "0x400006E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string verticalAxisName;

		[Token(Token = "0x400006F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float Xsensitivity;

		[Token(Token = "0x4000070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float Ysensitivity;

		[Token(Token = "0x4000071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 m_StartPos;

		[Token(Token = "0x4000072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector2 m_PreviousDelta;

		[Token(Token = "0x4000073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 m_JoytickOutput;

		[Token(Token = "0x4000074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool m_UseX;

		[Token(Token = "0x4000075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool m_UseY;

		[Token(Token = "0x4000076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private CrossPlatformInputManager.VirtualAxis m_HorizontalVirtualAxis;

		[Token(Token = "0x4000077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private CrossPlatformInputManager.VirtualAxis m_VerticalVirtualAxis;

		[Token(Token = "0x4000078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool m_Dragging;

		[Token(Token = "0x4000079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int m_Id;

		[Token(Token = "0x400007A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector2 m_PreviousTouchPos;

		[Token(Token = "0x400007B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 m_Center;

		[Token(Token = "0x400007C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Image m_Image;

		[Token(Token = "0x6000091")]
		[Address(RVA = "0x1653790", Offset = "0x1653790", VA = "0x1653790")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000092")]
		[Address(RVA = "0x16538F0", Offset = "0x16538F0", VA = "0x16538F0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000093")]
		[Address(RVA = "0x1653794", Offset = "0x1653794", VA = "0x1653794")]
		private void CreateVirtualAxes()
		{
		}

		[Token(Token = "0x6000094")]
		[Address(RVA = "0x1653978", Offset = "0x1653978", VA = "0x1653978")]
		private void UpdateVirtualAxes(Vector3 value)
		{
		}

		[Token(Token = "0x6000095")]
		[Address(RVA = "0x16539E4", Offset = "0x16539E4", VA = "0x16539E4", Slot = "4")]
		public void OnPointerDown(PointerEventData data)
		{
		}

		[Token(Token = "0x6000096")]
		[Address(RVA = "0x1653A1C", Offset = "0x1653A1C", VA = "0x1653A1C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000097")]
		[Address(RVA = "0x1653B64", Offset = "0x1653B64", VA = "0x1653B64", Slot = "5")]
		public void OnPointerUp(PointerEventData data)
		{
		}

		[Token(Token = "0x6000098")]
		[Address(RVA = "0x1653B98", Offset = "0x1653B98", VA = "0x1653B98")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000099")]
		[Address(RVA = "0x1653C98", Offset = "0x1653C98", VA = "0x1653C98")]
		public TouchPad()
		{
		}
	}
	[Token(Token = "0x2000016")]
	public abstract class VirtualInput
	{
		[Token(Token = "0x400007D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F0A4", Offset = "0xA7F0A4")]
		private Vector3 <virtualMousePosition>k__BackingField;

		[Token(Token = "0x400007E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Dictionary<string, CrossPlatformInputManager.VirtualAxis> m_VirtualAxes;

		[Token(Token = "0x400007F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Dictionary<string, CrossPlatformInputManager.VirtualButton> m_VirtualButtons;

		[Token(Token = "0x4000080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected List<string> m_AlwaysUseVirtual;

		[Token(Token = "0x17000002")]
		public Vector3 virtualMousePosition
		{
			[Token(Token = "0x600009A")]
			[Address(RVA = "0x1A73A90", Offset = "0x1A73A90", VA = "0x1A73A90")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89664", Offset = "0xA89664")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600009B")]
			[Address(RVA = "0x1A73A9C", Offset = "0x1A73A9C", VA = "0x1A73A9C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89674", Offset = "0xA89674")]
			private set
			{
			}
		}

		[Token(Token = "0x600009C")]
		[Address(RVA = "0x1A73AA8", Offset = "0x1A73AA8", VA = "0x1A73AA8")]
		public bool AxisExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x600009D")]
		[Address(RVA = "0x1A73B0C", Offset = "0x1A73B0C", VA = "0x1A73B0C")]
		public bool ButtonExists(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x600009E")]
		[Address(RVA = "0x1A73B70", Offset = "0x1A73B70", VA = "0x1A73B70")]
		public void RegisterVirtualAxis(CrossPlatformInputManager.VirtualAxis axis)
		{
		}

		[Token(Token = "0x600009F")]
		[Address(RVA = "0x1A73CD0", Offset = "0x1A73CD0", VA = "0x1A73CD0")]
		public void RegisterVirtualButton(CrossPlatformInputManager.VirtualButton button)
		{
		}

		[Token(Token = "0x60000A0")]
		[Address(RVA = "0x1A73E30", Offset = "0x1A73E30", VA = "0x1A73E30")]
		public void UnRegisterVirtualAxis(string name)
		{
		}

		[Token(Token = "0x60000A1")]
		[Address(RVA = "0x1A73ED0", Offset = "0x1A73ED0", VA = "0x1A73ED0")]
		public void UnRegisterVirtualButton(string name)
		{
		}

		[Token(Token = "0x60000A2")]
		[Address(RVA = "0x1A73F70", Offset = "0x1A73F70", VA = "0x1A73F70")]
		public CrossPlatformInputManager.VirtualAxis VirtualAxisReference(string name)
		{
			return null;
		}

		[Token(Token = "0x60000A3")]
		[Address(RVA = "0x1A7400C", Offset = "0x1A7400C", VA = "0x1A7400C")]
		public void SetVirtualMousePositionX(float f)
		{
		}

		[Token(Token = "0x60000A4")]
		[Address(RVA = "0x1A74014", Offset = "0x1A74014", VA = "0x1A74014")]
		public void SetVirtualMousePositionY(float f)
		{
		}

		[Token(Token = "0x60000A5")]
		[Address(RVA = "0x1A7401C", Offset = "0x1A7401C", VA = "0x1A7401C")]
		public void SetVirtualMousePositionZ(float f)
		{
		}

		[Token(Token = "0x60000A6")]
		public abstract float GetAxis(string name, bool raw);

		[Token(Token = "0x60000A7")]
		public abstract bool GetButton(string name);

		[Token(Token = "0x60000A8")]
		public abstract bool GetButtonDown(string name);

		[Token(Token = "0x60000A9")]
		public abstract bool GetButtonUp(string name);

		[Token(Token = "0x60000AA")]
		public abstract void SetButtonDown(string name);

		[Token(Token = "0x60000AB")]
		public abstract void SetButtonUp(string name);

		[Token(Token = "0x60000AC")]
		public abstract void SetAxisPositive(string name);

		[Token(Token = "0x60000AD")]
		public abstract void SetAxisNegative(string name);

		[Token(Token = "0x60000AE")]
		public abstract void SetAxisZero(string name);

		[Token(Token = "0x60000AF")]
		public abstract void SetAxis(string name, float value);

		[Token(Token = "0x60000B0")]
		public abstract Vector3 MousePosition();

		[Token(Token = "0x60000B1")]
		[Address(RVA = "0x1A74024", Offset = "0x1A74024", VA = "0x1A74024")]
		protected VirtualInput()
		{
		}
	}
}
namespace UnityStandardAssets.CrossPlatformInput.PlatformSpecific
{
	[Token(Token = "0x2000017")]
	public class MobileInput : VirtualInput
	{
		[Token(Token = "0x60000B2")]
		[Address(RVA = "0x22F7DA0", Offset = "0x22F7DA0", VA = "0x22F7DA0")]
		private void AddButton(string name)
		{
		}

		[Token(Token = "0x60000B3")]
		[Address(RVA = "0x22F7E30", Offset = "0x22F7E30", VA = "0x22F7E30")]
		private void AddAxes(string name)
		{
		}

		[Token(Token = "0x60000B4")]
		[Address(RVA = "0x22F7EC0", Offset = "0x22F7EC0", VA = "0x22F7EC0", Slot = "4")]
		public override float GetAxis(string name, bool raw)
		{
			return default(float);
		}

		[Token(Token = "0x60000B5")]
		[Address(RVA = "0x22F7F64", Offset = "0x22F7F64", VA = "0x22F7F64", Slot = "8")]
		public override void SetButtonDown(string name)
		{
		}

		[Token(Token = "0x60000B6")]
		[Address(RVA = "0x22F8008", Offset = "0x22F8008", VA = "0x22F8008", Slot = "9")]
		public override void SetButtonUp(string name)
		{
		}

		[Token(Token = "0x60000B7")]
		[Address(RVA = "0x22F80AC", Offset = "0x22F80AC", VA = "0x22F80AC", Slot = "10")]
		public override void SetAxisPositive(string name)
		{
		}

		[Token(Token = "0x60000B8")]
		[Address(RVA = "0x22F8154", Offset = "0x22F8154", VA = "0x22F8154", Slot = "11")]
		public override void SetAxisNegative(string name)
		{
		}

		[Token(Token = "0x60000B9")]
		[Address(RVA = "0x22F81FC", Offset = "0x22F81FC", VA = "0x22F81FC", Slot = "12")]
		public override void SetAxisZero(string name)
		{
		}

		[Token(Token = "0x60000BA")]
		[Address(RVA = "0x22F82A0", Offset = "0x22F82A0", VA = "0x22F82A0", Slot = "13")]
		public override void SetAxis(string name, float value)
		{
		}

		[Token(Token = "0x60000BB")]
		[Address(RVA = "0x22F8350", Offset = "0x22F8350", VA = "0x22F8350", Slot = "6")]
		public override bool GetButtonDown(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60000BC")]
		[Address(RVA = "0x22F83F4", Offset = "0x22F83F4", VA = "0x22F83F4", Slot = "7")]
		public override bool GetButtonUp(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60000BD")]
		[Address(RVA = "0x22F8498", Offset = "0x22F8498", VA = "0x22F8498", Slot = "5")]
		public override bool GetButton(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60000BE")]
		[Address(RVA = "0x22F853C", Offset = "0x22F853C", VA = "0x22F853C", Slot = "14")]
		public override Vector3 MousePosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60000BF")]
		[Address(RVA = "0x22F8548", Offset = "0x22F8548", VA = "0x22F8548")]
		public MobileInput()
		{
		}
	}
	[Token(Token = "0x2000018")]
	public class StandaloneInput : VirtualInput
	{
		[Token(Token = "0x60000C0")]
		[Address(RVA = "0x16329BC", Offset = "0x16329BC", VA = "0x16329BC", Slot = "4")]
		public override float GetAxis(string name, bool raw)
		{
			return default(float);
		}

		[Token(Token = "0x60000C1")]
		[Address(RVA = "0x16329D0", Offset = "0x16329D0", VA = "0x16329D0", Slot = "5")]
		public override bool GetButton(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60000C2")]
		[Address(RVA = "0x16329DC", Offset = "0x16329DC", VA = "0x16329DC", Slot = "6")]
		public override bool GetButtonDown(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60000C3")]
		[Address(RVA = "0x16329E8", Offset = "0x16329E8", VA = "0x16329E8", Slot = "7")]
		public override bool GetButtonUp(string name)
		{
			return default(bool);
		}

		[Token(Token = "0x60000C4")]
		[Address(RVA = "0x16329F4", Offset = "0x16329F4", VA = "0x16329F4", Slot = "8")]
		public override void SetButtonDown(string name)
		{
		}

		[Token(Token = "0x60000C5")]
		[Address(RVA = "0x1632A48", Offset = "0x1632A48", VA = "0x1632A48", Slot = "9")]
		public override void SetButtonUp(string name)
		{
		}

		[Token(Token = "0x60000C6")]
		[Address(RVA = "0x1632A9C", Offset = "0x1632A9C", VA = "0x1632A9C", Slot = "10")]
		public override void SetAxisPositive(string name)
		{
		}

		[Token(Token = "0x60000C7")]
		[Address(RVA = "0x1632AF0", Offset = "0x1632AF0", VA = "0x1632AF0", Slot = "11")]
		public override void SetAxisNegative(string name)
		{
		}

		[Token(Token = "0x60000C8")]
		[Address(RVA = "0x1632B44", Offset = "0x1632B44", VA = "0x1632B44", Slot = "12")]
		public override void SetAxisZero(string name)
		{
		}

		[Token(Token = "0x60000C9")]
		[Address(RVA = "0x1632B98", Offset = "0x1632B98", VA = "0x1632B98", Slot = "13")]
		public override void SetAxis(string name, float value)
		{
		}

		[Token(Token = "0x60000CA")]
		[Address(RVA = "0x1632BEC", Offset = "0x1632BEC", VA = "0x1632BEC", Slot = "14")]
		public override Vector3 MousePosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60000CB")]
		[Address(RVA = "0x1632BF4", Offset = "0x1632BF4", VA = "0x1632BF4")]
		public StandaloneInput()
		{
		}
	}
}
namespace YamlDotNet
{
	[Token(Token = "0x2000019")]
	internal static class StandardRegexOptions
	{
		[Token(Token = "0x4000081")]
		public const RegexOptions Compiled = RegexOptions.None;
	}
	[Token(Token = "0x200001A")]
	internal static class ReflectionExtensions
	{
		[Token(Token = "0x2000309")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E4BC", Offset = "0xA7E4BC")]
		private sealed class <>c__DisplayClass8_0
		{
			[Token(Token = "0x4000E60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public BindingFlags instancePublic;

			[Token(Token = "0x60014A9")]
			[Address(RVA = "0x1EAAF7C", Offset = "0x1EAAF7C", VA = "0x1EAAF7C")]
			public <>c__DisplayClass8_0()
			{
			}

			[Token(Token = "0x60014AA")]
			[Address(RVA = "0x1EAAF84", Offset = "0x1EAAF84", VA = "0x1EAAF84")]
			internal IEnumerable<PropertyInfo> <GetPublicProperties>b__0(Type i)
			{
				return null;
			}
		}

		[Token(Token = "0x4000082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly FieldInfo remoteStackTraceField;

		[Token(Token = "0x60000CC")]
		[Address(RVA = "0x10C0AD0", Offset = "0x10C0AD0", VA = "0x10C0AD0")]
		public static Type BaseType(this Type type)
		{
			return null;
		}

		[Token(Token = "0x60000CD")]
		[Address(RVA = "0x10C0AF0", Offset = "0x10C0AF0", VA = "0x10C0AF0")]
		public static bool IsValueType(this Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x60000CE")]
		[Address(RVA = "0x10C0B08", Offset = "0x10C0B08", VA = "0x10C0B08")]
		public static bool IsGenericType(this Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x60000CF")]
		[Address(RVA = "0x10C0B28", Offset = "0x10C0B28", VA = "0x10C0B28")]
		public static bool IsInterface(this Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x60000D0")]
		[Address(RVA = "0x10C0B40", Offset = "0x10C0B40", VA = "0x10C0B40")]
		public static bool IsEnum(this Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x60000D1")]
		[Address(RVA = "0x10C0B60", Offset = "0x10C0B60", VA = "0x10C0B60")]
		public static bool HasDefaultConstructor(this Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x60000D2")]
		[Address(RVA = "0x10C0C48", Offset = "0x10C0C48", VA = "0x10C0C48")]
		public static TypeCode GetTypeCode(this Type type)
		{
			return default(TypeCode);
		}

		[Token(Token = "0x60000D3")]
		[Address(RVA = "0x10C0CAC", Offset = "0x10C0CAC", VA = "0x10C0CAC")]
		public static PropertyInfo GetPublicProperty(this Type type, string name)
		{
			return null;
		}

		[Token(Token = "0x60000D4")]
		[Address(RVA = "0x10BF61C", Offset = "0x10BF61C", VA = "0x10BF61C")]
		public static IEnumerable<PropertyInfo> GetPublicProperties(this Type type)
		{
			return null;
		}

		[Token(Token = "0x60000D5")]
		[Address(RVA = "0x10C0CC4", Offset = "0x10C0CC4", VA = "0x10C0CC4")]
		public static IEnumerable<MethodInfo> GetPublicStaticMethods(this Type type)
		{
			return null;
		}

		[Token(Token = "0x60000D6")]
		[Address(RVA = "0x10C0CE8", Offset = "0x10C0CE8", VA = "0x10C0CE8")]
		public static MethodInfo GetPublicStaticMethod(this Type type, string name, params Type[] parameterTypes)
		{
			return null;
		}

		[Token(Token = "0x60000D7")]
		[Address(RVA = "0x10C0D10", Offset = "0x10C0D10", VA = "0x10C0D10")]
		public static MethodInfo GetPublicInstanceMethod(this Type type, string name)
		{
			return null;
		}

		[Token(Token = "0x60000D8")]
		[Address(RVA = "0x10C0D2C", Offset = "0x10C0D2C", VA = "0x10C0D2C")]
		public static Exception Unwrap(this TargetInvocationException ex)
		{
			return null;
		}

		[Token(Token = "0x60000D9")]
		[Address(RVA = "0x10C0E30", Offset = "0x10C0E30", VA = "0x10C0E30")]
		public static bool IsInstanceOf(this Type type, object o)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200001B")]
	internal sealed class CultureInfoAdapter : CultureInfo
	{
		[Token(Token = "0x4000083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private readonly IFormatProvider _provider;

		[Token(Token = "0x60000DB")]
		[Address(RVA = "0x169A42C", Offset = "0x169A42C", VA = "0x169A42C")]
		public CultureInfoAdapter(CultureInfo baseCulture, IFormatProvider provider)
		{
		}

		[Token(Token = "0x60000DC")]
		[Address(RVA = "0x169A4CC", Offset = "0x169A4CC", VA = "0x169A4CC", Slot = "19")]
		public override object GetFormat(Type formatType)
		{
			return null;
		}
	}
	[Token(Token = "0x200001C")]
	internal static class PropertyInfoExtensions
	{
		[Token(Token = "0x60000DD")]
		[Address(RVA = "0x10BCAB8", Offset = "0x10BCAB8", VA = "0x10BCAB8")]
		public static object ReadValue(this PropertyInfo property, object target)
		{
			return null;
		}
	}
}
namespace YamlDotNet.Serialization
{
	[Token(Token = "0x200001D")]
	public abstract class BuilderSkeleton<TBuilder> where TBuilder : BuilderSkeleton<TBuilder>
	{
		[Serializable]
		[Token(Token = "0x200030A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E4CC", Offset = "0xA7E4CC")]
		private sealed class <>c
		{
			[Token(Token = "0x4000E61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000E62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<Nothing, IYamlTypeConverter> <>9__5_0;

			[Token(Token = "0x4000E63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Action<IRegistrationLocationSelectionSyntax<IYamlTypeConverter>> <>9__13_0;

			[Token(Token = "0x60014AC")]
			public <>c()
			{
			}

			[Token(Token = "0x60014AD")]
			internal IYamlTypeConverter <.ctor>b__5_0(Nothing _)
			{
				return null;
			}

			[Token(Token = "0x60014AE")]
			internal void <WithTypeConverter>b__13_0(IRegistrationLocationSelectionSyntax<IYamlTypeConverter> w)
			{
			}
		}

		[Token(Token = "0x200030B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E4DC", Offset = "0xA7E4DC")]
		private sealed class <>c__DisplayClass14_0
		{
			[Token(Token = "0x4000E64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IYamlTypeConverter typeConverter;

			[Token(Token = "0x60014AF")]
			public <>c__DisplayClass14_0()
			{
			}

			[Token(Token = "0x60014B0")]
			internal IYamlTypeConverter <WithTypeConverter>b__0(Nothing _)
			{
				return null;
			}
		}

		[Token(Token = "0x200030C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E4EC", Offset = "0xA7E4EC")]
		private sealed class <>c__DisplayClass15_0<TYamlTypeConverter> where TYamlTypeConverter : IYamlTypeConverter
		{
			[Token(Token = "0x4000E65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public WrapperFactory<IYamlTypeConverter, IYamlTypeConverter> typeConverterFactory;

			[Token(Token = "0x60014B1")]
			public <>c__DisplayClass15_0()
			{
			}

			[Token(Token = "0x60014B2")]
			internal IYamlTypeConverter <WithTypeConverter>b__0(IYamlTypeConverter wrapped, Nothing _)
			{
				return null;
			}
		}

		[Serializable]
		[Token(Token = "0x200030D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E4FC", Offset = "0xA7E4FC")]
		private sealed class <>c__18<TTypeInspector> where TTypeInspector : ITypeInspector
		{
			[Token(Token = "0x4000E66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__18<TTypeInspector> <>9;

			[Token(Token = "0x4000E67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Action<IRegistrationLocationSelectionSyntax<ITypeInspector>> <>9__18_0;

			[Token(Token = "0x60014B4")]
			public <>c__18()
			{
			}

			[Token(Token = "0x60014B5")]
			internal void <WithTypeInspector>b__18_0(IRegistrationLocationSelectionSyntax<ITypeInspector> w)
			{
			}
		}

		[Token(Token = "0x200030E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E50C", Offset = "0xA7E50C")]
		private sealed class <>c__DisplayClass19_0<TTypeInspector> where TTypeInspector : ITypeInspector
		{
			[Token(Token = "0x4000E68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Func<ITypeInspector, TTypeInspector> typeInspectorFactory;

			[Token(Token = "0x60014B6")]
			public <>c__DisplayClass19_0()
			{
			}

			[Token(Token = "0x60014B7")]
			internal ITypeInspector <WithTypeInspector>b__0(ITypeInspector inner)
			{
				return null;
			}
		}

		[Token(Token = "0x200030F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E51C", Offset = "0xA7E51C")]
		private sealed class <>c__DisplayClass20_0<TTypeInspector> where TTypeInspector : ITypeInspector
		{
			[Token(Token = "0x4000E69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public WrapperFactory<ITypeInspector, ITypeInspector, TTypeInspector> typeInspectorFactory;

			[Token(Token = "0x60014B8")]
			public <>c__DisplayClass20_0()
			{
			}

			[Token(Token = "0x60014B9")]
			internal ITypeInspector <WithTypeInspector>b__0(ITypeInspector wrapped, ITypeInspector inner)
			{
				return null;
			}
		}

		[Token(Token = "0x4000084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal INamingConvention namingConvention;

		[Token(Token = "0x4000085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal ITypeResolver typeResolver;

		[Token(Token = "0x4000086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal readonly YamlAttributeOverrides overrides;

		[Token(Token = "0x4000087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal readonly LazyComponentRegistrationList<Nothing, IYamlTypeConverter> typeConverterFactories;

		[Token(Token = "0x4000088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal readonly LazyComponentRegistrationList<ITypeInspector, ITypeInspector> typeInspectorFactories;

		[Token(Token = "0x17000003")]
		protected abstract TBuilder Self
		{
			[Token(Token = "0x60000DF")]
			get;
		}

		[Token(Token = "0x60000DE")]
		internal BuilderSkeleton()
		{
		}

		[Token(Token = "0x60000E0")]
		internal ITypeInspector BuildTypeInspector()
		{
			return null;
		}

		[Token(Token = "0x60000E1")]
		public TBuilder WithNamingConvention(INamingConvention namingConvention)
		{
			return null;
		}

		[Token(Token = "0x60000E2")]
		public TBuilder WithTypeResolver(ITypeResolver typeResolver)
		{
			return null;
		}

		[Token(Token = "0x60000E3")]
		public TBuilder WithAttributeOverride<TClass>(Expression<Func<TClass, object>> propertyAccessor, Attribute attribute)
		{
			return null;
		}

		[Token(Token = "0x60000E4")]
		public TBuilder WithAttributeOverride(Type type, string member, Attribute attribute)
		{
			return null;
		}

		[Token(Token = "0x60000E5")]
		public TBuilder WithTypeConverter(IYamlTypeConverter typeConverter)
		{
			return null;
		}

		[Token(Token = "0x60000E6")]
		public TBuilder WithTypeConverter(IYamlTypeConverter typeConverter, Action<IRegistrationLocationSelectionSyntax<IYamlTypeConverter>> where)
		{
			return null;
		}

		[Token(Token = "0x60000E7")]
		public TBuilder WithTypeConverter<TYamlTypeConverter>(WrapperFactory<IYamlTypeConverter, IYamlTypeConverter> typeConverterFactory, Action<ITrackingRegistrationLocationSelectionSyntax<IYamlTypeConverter>> where) where TYamlTypeConverter : IYamlTypeConverter
		{
			return null;
		}

		[Token(Token = "0x60000E8")]
		public TBuilder WithoutTypeConverter<TYamlTypeConverter>() where TYamlTypeConverter : IYamlTypeConverter
		{
			return null;
		}

		[Token(Token = "0x60000E9")]
		public TBuilder WithoutTypeConverter(Type converterType)
		{
			return null;
		}

		[Token(Token = "0x60000EA")]
		public TBuilder WithTypeInspector<TTypeInspector>(Func<ITypeInspector, TTypeInspector> typeInspectorFactory) where TTypeInspector : ITypeInspector
		{
			return null;
		}

		[Token(Token = "0x60000EB")]
		public TBuilder WithTypeInspector<TTypeInspector>(Func<ITypeInspector, TTypeInspector> typeInspectorFactory, Action<IRegistrationLocationSelectionSyntax<ITypeInspector>> where) where TTypeInspector : ITypeInspector
		{
			return null;
		}

		[Token(Token = "0x60000EC")]
		public TBuilder WithTypeInspector<TTypeInspector>(WrapperFactory<ITypeInspector, ITypeInspector, TTypeInspector> typeInspectorFactory, Action<ITrackingRegistrationLocationSelectionSyntax<ITypeInspector>> where) where TTypeInspector : ITypeInspector
		{
			return null;
		}

		[Token(Token = "0x60000ED")]
		public TBuilder WithoutTypeInspector<TTypeInspector>() where TTypeInspector : ITypeInspector
		{
			return null;
		}

		[Token(Token = "0x60000EE")]
		public TBuilder WithoutTypeInspector(Type inspectorType)
		{
			return null;
		}

		[Token(Token = "0x60000EF")]
		protected IEnumerable<IYamlTypeConverter> BuildTypeConverters()
		{
			return null;
		}
	}
	[Token(Token = "0x200001E")]
	public delegate TComponent WrapperFactory<TComponentBase, TComponent>(TComponentBase wrapped) where TComponent : TComponentBase;
	[Token(Token = "0x200001F")]
	public delegate TComponent WrapperFactory<TArgument, TComponentBase, TComponent>(TComponentBase wrapped, TArgument argument) where TComponent : TComponentBase;
	[Token(Token = "0x2000020")]
	public sealed class Deserializer
	{
		[Token(Token = "0x2000310")]
		private class BackwardsCompatibleConfiguration
		{
			[Token(Token = "0x2000431")]
			private class TypeDescriptorProxy : ITypeInspector
			{
				[Token(Token = "0x4001292")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public ITypeInspector TypeDescriptor;

				[Token(Token = "0x600192E")]
				[Address(RVA = "0x1EB2E68", Offset = "0x1EB2E68", VA = "0x1EB2E68", Slot = "4")]
				public IEnumerable<IPropertyDescriptor> GetProperties(Type type, object container)
				{
					return null;
				}

				[Token(Token = "0x600192F")]
				[Address(RVA = "0x1EB2F2C", Offset = "0x1EB2F2C", VA = "0x1EB2F2C", Slot = "5")]
				public IPropertyDescriptor GetProperty(Type type, object container, string name, bool ignoreUnmatched)
				{
					return null;
				}

				[Token(Token = "0x6001930")]
				[Address(RVA = "0x1EB300C", Offset = "0x1EB300C", VA = "0x1EB300C")]
				public TypeDescriptorProxy()
				{
				}
			}

			[Token(Token = "0x4000E6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static readonly Dictionary<string, Type> predefinedTagMappings;

			[Token(Token = "0x4000E6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Dictionary<string, Type> tagMappings;

			[Token(Token = "0x4000E6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly List<IYamlTypeConverter> converters;

			[Token(Token = "0x4000E6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private TypeDescriptorProxy typeDescriptor;

			[Token(Token = "0x4000E6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public IValueDeserializer valueDeserializer;

			[Token(Token = "0x4000E6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA84390", Offset = "0xA84390")]
			private IList<INodeDeserializer> <NodeDeserializers>k__BackingField;

			[Token(Token = "0x4000E70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA843A0", Offset = "0xA843A0")]
			private IList<INodeTypeResolver> <TypeResolvers>k__BackingField;

			[Token(Token = "0x1700015C")]
			public IList<INodeDeserializer> NodeDeserializers
			{
				[Token(Token = "0x60014BA")]
				[Address(RVA = "0x1E30978", Offset = "0x1E30978", VA = "0x1E30978")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8CF7C", Offset = "0xA8CF7C")]
				get
				{
					return null;
				}
				[Token(Token = "0x60014BB")]
				[Address(RVA = "0x1E30980", Offset = "0x1E30980", VA = "0x1E30980")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8CF8C", Offset = "0xA8CF8C")]
				private set
				{
				}
			}

			[Token(Token = "0x1700015D")]
			public IList<INodeTypeResolver> TypeResolvers
			{
				[Token(Token = "0x60014BC")]
				[Address(RVA = "0x1E30988", Offset = "0x1E30988", VA = "0x1E30988")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8CF9C", Offset = "0xA8CF9C")]
				get
				{
					return null;
				}
				[Token(Token = "0x60014BD")]
				[Address(RVA = "0x1E30990", Offset = "0x1E30990", VA = "0x1E30990")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8CFAC", Offset = "0xA8CFAC")]
				private set
				{
				}
			}

			[Token(Token = "0x60014BE")]
			[Address(RVA = "0x1E30998", Offset = "0x1E30998", VA = "0x1E30998")]
			public BackwardsCompatibleConfiguration(IObjectFactory objectFactory, INamingConvention namingConvention, bool ignoreUnmatched, YamlAttributeOverrides overrides)
			{
			}

			[Token(Token = "0x60014BF")]
			[Address(RVA = "0x1E31774", Offset = "0x1E31774", VA = "0x1E31774")]
			public void RegisterTagMapping(string tag, Type type)
			{
			}

			[Token(Token = "0x60014C0")]
			[Address(RVA = "0x1E317E0", Offset = "0x1E317E0", VA = "0x1E317E0")]
			public void RegisterTypeConverter(IYamlTypeConverter typeConverter)
			{
			}
		}

		[Token(Token = "0x4000089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly BackwardsCompatibleConfiguration backwardsCompatibleConfiguration;

		[Token(Token = "0x400008A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IValueDeserializer valueDeserializer;

		[Token(Token = "0x17000004")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xA8DC4C", Offset = "0xA8DC4C")]
		public IList<INodeDeserializer> NodeDeserializers
		{
			[Token(Token = "0x60000F9")]
			[Address(RVA = "0x16A6508", Offset = "0x16A6508", VA = "0x16A6508")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000005")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xA8DC84", Offset = "0xA8DC84")]
		public IList<INodeTypeResolver> TypeResolvers
		{
			[Token(Token = "0x60000FA")]
			[Address(RVA = "0x16A6538", Offset = "0x16A6538", VA = "0x16A6538")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60000F8")]
		[Address(RVA = "0x16A64A8", Offset = "0x16A64A8", VA = "0x16A64A8")]
		private void ThrowUnlessInBackwardsCompatibleMode()
		{
		}

		[Token(Token = "0x60000FB")]
		[Address(RVA = "0x16A6568", Offset = "0x16A6568", VA = "0x16A6568")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xA89774", Offset = "0xA89774")]
		public Deserializer([Optional] IObjectFactory objectFactory, [Optional] INamingConvention namingConvention, bool ignoreUnmatched = false, [Optional] YamlAttributeOverrides overrides)
		{
		}

		[Token(Token = "0x60000FC")]
		[Address(RVA = "0x16A6624", Offset = "0x16A6624", VA = "0x16A6624")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xA897AC", Offset = "0xA897AC")]
		public void RegisterTagMapping(string tag, Type type)
		{
		}

		[Token(Token = "0x60000FD")]
		[Address(RVA = "0x16A666C", Offset = "0x16A666C", VA = "0x16A666C")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xA897E4", Offset = "0xA897E4")]
		public void RegisterTypeConverter(IYamlTypeConverter typeConverter)
		{
		}

		[Token(Token = "0x60000FE")]
		[Address(RVA = "0x16A66A4", Offset = "0x16A66A4", VA = "0x16A66A4")]
		public Deserializer()
		{
		}

		[Token(Token = "0x60000FF")]
		[Address(RVA = "0x16A6740", Offset = "0x16A6740", VA = "0x16A6740")]
		private Deserializer(IValueDeserializer valueDeserializer)
		{
		}

		[Token(Token = "0x6000100")]
		[Address(RVA = "0x16A67C0", Offset = "0x16A67C0", VA = "0x16A67C0")]
		public static Deserializer FromValueDeserializer(IValueDeserializer valueDeserializer)
		{
			return null;
		}

		[Token(Token = "0x6000101")]
		public T Deserialize<T>(string input)
		{
			return (T)null;
		}

		[Token(Token = "0x6000102")]
		public T Deserialize<T>(TextReader input)
		{
			return (T)null;
		}

		[Token(Token = "0x6000103")]
		[Address(RVA = "0x16A681C", Offset = "0x16A681C", VA = "0x16A681C")]
		public object Deserialize(TextReader input)
		{
			return null;
		}

		[Token(Token = "0x6000104")]
		[Address(RVA = "0x16A692C", Offset = "0x16A692C", VA = "0x16A692C")]
		public object Deserialize(string input, Type type)
		{
			return null;
		}

		[Token(Token = "0x6000105")]
		[Address(RVA = "0x16A68B4", Offset = "0x16A68B4", VA = "0x16A68B4")]
		public object Deserialize(TextReader input, Type type)
		{
			return null;
		}

		[Token(Token = "0x6000106")]
		public T Deserialize<T>(IParser parser)
		{
			return (T)null;
		}

		[Token(Token = "0x6000107")]
		[Address(RVA = "0x16A6E38", Offset = "0x16A6E38", VA = "0x16A6E38")]
		public object Deserialize(IParser parser)
		{
			return null;
		}

		[Token(Token = "0x6000108")]
		[Address(RVA = "0x16A6A9C", Offset = "0x16A6A9C", VA = "0x16A6A9C")]
		public object Deserialize(IParser parser, Type type)
		{
			return null;
		}
	}
	[Token(Token = "0x2000021")]
	public sealed class DeserializerBuilder : BuilderSkeleton<DeserializerBuilder>
	{
		[Serializable]
		[Token(Token = "0x2000311")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E52C", Offset = "0xA7E52C")]
		private sealed class <>c
		{
			[Token(Token = "0x4000E71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000E72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<ITypeInspector, ITypeInspector> <>9__5_0;

			[Token(Token = "0x4000E73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<ITypeInspector, ITypeInspector> <>9__5_2;

			[Token(Token = "0x4000E74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<ITypeInspector, ITypeInspector> <>9__5_4;

			[Token(Token = "0x4000E75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Func<Nothing, INodeDeserializer> <>9__5_8;

			[Token(Token = "0x4000E76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public static Func<Nothing, INodeDeserializer> <>9__5_9;

			[Token(Token = "0x4000E77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public static Func<Nothing, INodeDeserializer> <>9__5_10;

			[Token(Token = "0x4000E78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public static Func<Nothing, INodeDeserializer> <>9__5_13;

			[Token(Token = "0x4000E79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public static Func<Nothing, INodeTypeResolver> <>9__5_15;

			[Token(Token = "0x4000E7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public static Func<Nothing, INodeTypeResolver> <>9__5_16;

			[Token(Token = "0x4000E7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public static Func<Nothing, INodeTypeResolver> <>9__5_18;

			[Token(Token = "0x4000E7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public static Func<Nothing, INodeTypeResolver> <>9__5_19;

			[Token(Token = "0x4000E7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public static Action<IRegistrationLocationSelectionSyntax<INodeDeserializer>> <>9__10_0;

			[Token(Token = "0x4000E7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public static Action<IRegistrationLocationSelectionSyntax<INodeTypeResolver>> <>9__15_0;

			[Token(Token = "0x60014C3")]
			[Address(RVA = "0x1E31B34", Offset = "0x1E31B34", VA = "0x1E31B34")]
			public <>c()
			{
			}

			[Token(Token = "0x60014C4")]
			[Address(RVA = "0x1E31B3C", Offset = "0x1E31B3C", VA = "0x1E31B3C")]
			internal ITypeInspector <.ctor>b__5_0(ITypeInspector inner)
			{
				return null;
			}

			[Token(Token = "0x60014C5")]
			[Address(RVA = "0x1E31B9C", Offset = "0x1E31B9C", VA = "0x1E31B9C")]
			internal ITypeInspector <.ctor>b__5_2(ITypeInspector inner)
			{
				return null;
			}

			[Token(Token = "0x60014C6")]
			[Address(RVA = "0x1E31BFC", Offset = "0x1E31BFC", VA = "0x1E31BFC")]
			internal ITypeInspector <.ctor>b__5_4(ITypeInspector inner)
			{
				return null;
			}

			[Token(Token = "0x60014C7")]
			[Address(RVA = "0x1E31C5C", Offset = "0x1E31C5C", VA = "0x1E31C5C")]
			internal INodeDeserializer <.ctor>b__5_8(Nothing _)
			{
				return null;
			}

			[Token(Token = "0x60014C8")]
			[Address(RVA = "0x1E31CB4", Offset = "0x1E31CB4", VA = "0x1E31CB4")]
			internal INodeDeserializer <.ctor>b__5_9(Nothing _)
			{
				return null;
			}

			[Token(Token = "0x60014C9")]
			[Address(RVA = "0x1E31D0C", Offset = "0x1E31D0C", VA = "0x1E31D0C")]
			internal INodeDeserializer <.ctor>b__5_10(Nothing _)
			{
				return null;
			}

			[Token(Token = "0x60014CA")]
			[Address(RVA = "0x1E31D64", Offset = "0x1E31D64", VA = "0x1E31D64")]
			internal INodeDeserializer <.ctor>b__5_13(Nothing _)
			{
				return null;
			}

			[Token(Token = "0x60014CB")]
			[Address(RVA = "0x1E31DBC", Offset = "0x1E31DBC", VA = "0x1E31DBC")]
			internal INodeTypeResolver <.ctor>b__5_15(Nothing _)
			{
				return null;
			}

			[Token(Token = "0x60014CC")]
			[Address(RVA = "0x1E31E14", Offset = "0x1E31E14", VA = "0x1E31E14")]
			internal INodeTypeResolver <.ctor>b__5_16(Nothing _)
			{
				return null;
			}

			[Token(Token = "0x60014CD")]
			[Address(RVA = "0x1E31E6C", Offset = "0x1E31E6C", VA = "0x1E31E6C")]
			internal INodeTypeResolver <.ctor>b__5_18(Nothing _)
			{
				return null;
			}

			[Token(Token = "0x60014CE")]
			[Address(RVA = "0x1E31EC4", Offset = "0x1E31EC4", VA = "0x1E31EC4")]
			internal INodeTypeResolver <.ctor>b__5_19(Nothing _)
			{
				return null;
			}

			[Token(Token = "0x60014CF")]
			[Address(RVA = "0x1E31F1C", Offset = "0x1E31F1C", VA = "0x1E31F1C")]
			internal void <WithNodeDeserializer>b__10_0(IRegistrationLocationSelectionSyntax<INodeDeserializer> w)
			{
			}

			[Token(Token = "0x60014D0")]
			[Address(RVA = "0x1E31FC8", Offset = "0x1E31FC8", VA = "0x1E31FC8")]
			internal void <WithNodeTypeResolver>b__15_0(IRegistrationLocationSelectionSyntax<INodeTypeResolver> w)
			{
			}
		}

		[Token(Token = "0x2000312")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E53C", Offset = "0xA7E53C")]
		private sealed class <>c__DisplayClass11_0
		{
			[Token(Token = "0x4000E7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public INodeDeserializer nodeDeserializer;

			[Token(Token = "0x60014D1")]
			[Address(RVA = "0x1E32074", Offset = "0x1E32074", VA = "0x1E32074")]
			public <>c__DisplayClass11_0()
			{
			}

			[Token(Token = "0x60014D2")]
			[Address(RVA = "0x1E3207C", Offset = "0x1E3207C", VA = "0x1E3207C")]
			internal INodeDeserializer <WithNodeDeserializer>b__0(Nothing _)
			{
				return null;
			}
		}

		[Token(Token = "0x2000313")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E54C", Offset = "0xA7E54C")]
		private sealed class <>c__DisplayClass12_0<TNodeDeserializer> where TNodeDeserializer : INodeDeserializer
		{
			[Token(Token = "0x4000E80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public WrapperFactory<INodeDeserializer, TNodeDeserializer> nodeDeserializerFactory;

			[Token(Token = "0x60014D3")]
			public <>c__DisplayClass12_0()
			{
			}

			[Token(Token = "0x60014D4")]
			internal INodeDeserializer <WithNodeDeserializer>b__0(INodeDeserializer wrapped, Nothing _)
			{
				return null;
			}
		}

		[Token(Token = "0x2000314")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E55C", Offset = "0xA7E55C")]
		private sealed class <>c__DisplayClass16_0
		{
			[Token(Token = "0x4000E81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public INodeTypeResolver nodeTypeResolver;

			[Token(Token = "0x60014D5")]
			[Address(RVA = "0x1E32084", Offset = "0x1E32084", VA = "0x1E32084")]
			public <>c__DisplayClass16_0()
			{
			}

			[Token(Token = "0x60014D6")]
			[Address(RVA = "0x1E3208C", Offset = "0x1E3208C", VA = "0x1E3208C")]
			internal INodeTypeResolver <WithNodeTypeResolver>b__0(Nothing _)
			{
				return null;
			}
		}

		[Token(Token = "0x2000315")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E56C", Offset = "0xA7E56C")]
		private sealed class <>c__DisplayClass17_0<TNodeTypeResolver> where TNodeTypeResolver : INodeTypeResolver
		{
			[Token(Token = "0x4000E82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public WrapperFactory<INodeTypeResolver, TNodeTypeResolver> nodeTypeResolverFactory;

			[Token(Token = "0x60014D7")]
			public <>c__DisplayClass17_0()
			{
			}

			[Token(Token = "0x60014D8")]
			internal INodeTypeResolver <WithNodeTypeResolver>b__0(INodeTypeResolver wrapped, Nothing _)
			{
				return null;
			}
		}

		[Token(Token = "0x400008B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private IObjectFactory objectFactory;

		[Token(Token = "0x400008C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly LazyComponentRegistrationList<Nothing, INodeDeserializer> nodeDeserializerFactories;

		[Token(Token = "0x400008D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly LazyComponentRegistrationList<Nothing, INodeTypeResolver> nodeTypeResolverFactories;

		[Token(Token = "0x400008E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly Dictionary<string, Type> tagMappings;

		[Token(Token = "0x400008F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool ignoreUnmatched;

		[Token(Token = "0x17000006")]
		protected override DeserializerBuilder Self
		{
			[Token(Token = "0x600010A")]
			[Address(RVA = "0x16A8174", Offset = "0x16A8174", VA = "0x16A8174", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000109")]
		[Address(RVA = "0x16A6ED0", Offset = "0x16A6ED0", VA = "0x16A6ED0")]
		public DeserializerBuilder()
		{
		}

		[Token(Token = "0x600010B")]
		[Address(RVA = "0x16A8178", Offset = "0x16A8178", VA = "0x16A8178")]
		public DeserializerBuilder WithObjectFactory(IObjectFactory objectFactory)
		{
			return null;
		}

		[Token(Token = "0x600010C")]
		[Address(RVA = "0x16A81EC", Offset = "0x16A81EC", VA = "0x16A81EC")]
		public DeserializerBuilder WithObjectFactory(Func<Type, object> objectFactory)
		{
			return null;
		}

		[Token(Token = "0x600010D")]
		[Address(RVA = "0x16A82A8", Offset = "0x16A82A8", VA = "0x16A82A8")]
		public DeserializerBuilder WithNodeDeserializer(INodeDeserializer nodeDeserializer)
		{
			return null;
		}

		[Token(Token = "0x600010E")]
		[Address(RVA = "0x16A83C8", Offset = "0x16A83C8", VA = "0x16A83C8")]
		public DeserializerBuilder WithNodeDeserializer(INodeDeserializer nodeDeserializer, Action<IRegistrationLocationSelectionSyntax<INodeDeserializer>> where)
		{
			return null;
		}

		[Token(Token = "0x600010F")]
		public DeserializerBuilder WithNodeDeserializer<TNodeDeserializer>(WrapperFactory<INodeDeserializer, TNodeDeserializer> nodeDeserializerFactory, Action<ITrackingRegistrationLocationSelectionSyntax<INodeDeserializer>> where) where TNodeDeserializer : INodeDeserializer
		{
			return null;
		}

		[Token(Token = "0x6000110")]
		public DeserializerBuilder WithoutNodeDeserializer<TNodeDeserializer>() where TNodeDeserializer : INodeDeserializer
		{
			return null;
		}

		[Token(Token = "0x6000111")]
		[Address(RVA = "0x16A8588", Offset = "0x16A8588", VA = "0x16A8588")]
		public DeserializerBuilder WithoutNodeDeserializer(Type nodeDeserializerType)
		{
			return null;
		}

		[Token(Token = "0x6000112")]
		[Address(RVA = "0x16A867C", Offset = "0x16A867C", VA = "0x16A867C")]
		public DeserializerBuilder WithNodeTypeResolver(INodeTypeResolver nodeTypeResolver)
		{
			return null;
		}

		[Token(Token = "0x6000113")]
		[Address(RVA = "0x16A879C", Offset = "0x16A879C", VA = "0x16A879C")]
		public DeserializerBuilder WithNodeTypeResolver(INodeTypeResolver nodeTypeResolver, Action<IRegistrationLocationSelectionSyntax<INodeTypeResolver>> where)
		{
			return null;
		}

		[Token(Token = "0x6000114")]
		public DeserializerBuilder WithNodeTypeResolver<TNodeTypeResolver>(WrapperFactory<INodeTypeResolver, TNodeTypeResolver> nodeTypeResolverFactory, Action<ITrackingRegistrationLocationSelectionSyntax<INodeTypeResolver>> where) where TNodeTypeResolver : INodeTypeResolver
		{
			return null;
		}

		[Token(Token = "0x6000115")]
		public DeserializerBuilder WithoutNodeTypeResolver<TNodeTypeResolver>() where TNodeTypeResolver : INodeTypeResolver
		{
			return null;
		}

		[Token(Token = "0x6000116")]
		[Address(RVA = "0x16A895C", Offset = "0x16A895C", VA = "0x16A895C")]
		public DeserializerBuilder WithoutNodeTypeResolver(Type nodeTypeResolverType)
		{
			return null;
		}

		[Token(Token = "0x6000117")]
		[Address(RVA = "0x16A8A50", Offset = "0x16A8A50", VA = "0x16A8A50")]
		public DeserializerBuilder WithTagMapping(string tag, Type type)
		{
			return null;
		}

		[Token(Token = "0x6000118")]
		[Address(RVA = "0x16A8C3C", Offset = "0x16A8C3C", VA = "0x16A8C3C")]
		public DeserializerBuilder WithoutTagMapping(string tag)
		{
			return null;
		}

		[Token(Token = "0x6000119")]
		[Address(RVA = "0x16A8D4C", Offset = "0x16A8D4C", VA = "0x16A8D4C")]
		public DeserializerBuilder IgnoreUnmatchedProperties()
		{
			return null;
		}

		[Token(Token = "0x600011A")]
		[Address(RVA = "0x16A8D58", Offset = "0x16A8D58", VA = "0x16A8D58")]
		public Deserializer Build()
		{
			return null;
		}

		[Token(Token = "0x600011B")]
		[Address(RVA = "0x16A8D6C", Offset = "0x16A8D6C", VA = "0x16A8D6C")]
		public IValueDeserializer BuildValueDeserializer()
		{
			return null;
		}

		[Token(Token = "0x600011C")]
		[Address(RVA = "0x16A8E54", Offset = "0x16A8E54", VA = "0x16A8E54")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8981C", Offset = "0xA8981C")]
		private ITypeInspector <.ctor>b__5_1(ITypeInspector inner)
		{
			return null;
		}

		[Token(Token = "0x600011D")]
		[Address(RVA = "0x16A8ED0", Offset = "0x16A8ED0", VA = "0x16A8ED0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8982C", Offset = "0xA8982C")]
		private ITypeInspector <.ctor>b__5_3(ITypeInspector inner)
		{
			return null;
		}

		[Token(Token = "0x600011E")]
		[Address(RVA = "0x16A8F5C", Offset = "0x16A8F5C", VA = "0x16A8F5C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8983C", Offset = "0xA8983C")]
		private INodeDeserializer <.ctor>b__5_5(Nothing _)
		{
			return null;
		}

		[Token(Token = "0x600011F")]
		[Address(RVA = "0x16A8FC0", Offset = "0x16A8FC0", VA = "0x16A8FC0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8984C", Offset = "0xA8984C")]
		private INodeDeserializer <.ctor>b__5_6(Nothing _)
		{
			return null;
		}

		[Token(Token = "0x6000120")]
		[Address(RVA = "0x16A9024", Offset = "0x16A9024", VA = "0x16A9024")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8985C", Offset = "0xA8985C")]
		private INodeDeserializer <.ctor>b__5_7(Nothing _)
		{
			return null;
		}

		[Token(Token = "0x6000121")]
		[Address(RVA = "0x16A90AC", Offset = "0x16A90AC", VA = "0x16A90AC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8986C", Offset = "0xA8986C")]
		private INodeDeserializer <.ctor>b__5_11(Nothing _)
		{
			return null;
		}

		[Token(Token = "0x6000122")]
		[Address(RVA = "0x16A9150", Offset = "0x16A9150", VA = "0x16A9150")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8987C", Offset = "0xA8987C")]
		private INodeDeserializer <.ctor>b__5_12(Nothing _)
		{
			return null;
		}

		[Token(Token = "0x6000123")]
		[Address(RVA = "0x16A91C0", Offset = "0x16A91C0", VA = "0x16A91C0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8988C", Offset = "0xA8988C")]
		private INodeDeserializer <.ctor>b__5_14(Nothing _)
		{
			return null;
		}

		[Token(Token = "0x6000124")]
		[Address(RVA = "0x16A9260", Offset = "0x16A9260", VA = "0x16A9260")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8989C", Offset = "0xA8989C")]
		private INodeTypeResolver <.ctor>b__5_17(Nothing _)
		{
			return null;
		}
	}
	[Token(Token = "0x2000022")]
	public sealed class EmissionPhaseObjectGraphVisitorArgs
	{
		[Token(Token = "0x4000090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F0B4", Offset = "0xA7F0B4")]
		private IObjectGraphVisitor<IEmitter> <InnerVisitor>k__BackingField;

		[Token(Token = "0x4000091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F0C4", Offset = "0xA7F0C4")]
		private IEventEmitter <EventEmitter>k__BackingField;

		[Token(Token = "0x4000092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F0D4", Offset = "0xA7F0D4")]
		private ObjectSerializer <NestedObjectSerializer>k__BackingField;

		[Token(Token = "0x4000093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F0E4", Offset = "0xA7F0E4")]
		private IEnumerable<IYamlTypeConverter> <TypeConverters>k__BackingField;

		[Token(Token = "0x4000094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly IEnumerable<IObjectGraphVisitor<Nothing>> preProcessingPhaseVisitors;

		[Token(Token = "0x17000007")]
		public IObjectGraphVisitor<IEmitter> InnerVisitor
		{
			[Token(Token = "0x6000125")]
			[Address(RVA = "0x16ABD98", Offset = "0x16ABD98", VA = "0x16ABD98")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA898AC", Offset = "0xA898AC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000126")]
			[Address(RVA = "0x16ABDA0", Offset = "0x16ABDA0", VA = "0x16ABDA0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA898BC", Offset = "0xA898BC")]
			private set
			{
			}
		}

		[Token(Token = "0x17000008")]
		public IEventEmitter EventEmitter
		{
			[Token(Token = "0x6000127")]
			[Address(RVA = "0x16ABDA8", Offset = "0x16ABDA8", VA = "0x16ABDA8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA898CC", Offset = "0xA898CC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000128")]
			[Address(RVA = "0x16ABDB0", Offset = "0x16ABDB0", VA = "0x16ABDB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA898DC", Offset = "0xA898DC")]
			private set
			{
			}
		}

		[Token(Token = "0x17000009")]
		public ObjectSerializer NestedObjectSerializer
		{
			[Token(Token = "0x6000129")]
			[Address(RVA = "0x16ABDB8", Offset = "0x16ABDB8", VA = "0x16ABDB8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA898EC", Offset = "0xA898EC")]
			get
			{
				return null;
			}
			[Token(Token = "0x600012A")]
			[Address(RVA = "0x16ABDC0", Offset = "0x16ABDC0", VA = "0x16ABDC0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA898FC", Offset = "0xA898FC")]
			private set
			{
			}
		}

		[Token(Token = "0x1700000A")]
		public IEnumerable<IYamlTypeConverter> TypeConverters
		{
			[Token(Token = "0x600012B")]
			[Address(RVA = "0x16ABDC8", Offset = "0x16ABDC8", VA = "0x16ABDC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8990C", Offset = "0xA8990C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600012C")]
			[Address(RVA = "0x16ABDD0", Offset = "0x16ABDD0", VA = "0x16ABDD0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8991C", Offset = "0xA8991C")]
			private set
			{
			}
		}

		[Token(Token = "0x600012D")]
		[Address(RVA = "0x16ABDD8", Offset = "0x16ABDD8", VA = "0x16ABDD8")]
		public EmissionPhaseObjectGraphVisitorArgs(IObjectGraphVisitor<IEmitter> innerVisitor, IEventEmitter eventEmitter, IEnumerable<IObjectGraphVisitor<Nothing>> preProcessingPhaseVisitors, IEnumerable<IYamlTypeConverter> typeConverters, ObjectSerializer nestedObjectSerializer)
		{
		}

		[Token(Token = "0x600012E")]
		public T GetPreProcessingPhaseObjectGraphVisitor<T>() where T : IObjectGraphVisitor<Nothing>
		{
			return (T)null;
		}
	}
	[Token(Token = "0x2000023")]
	public abstract class EventInfo
	{
		[Token(Token = "0x4000095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F0F4", Offset = "0xA7F0F4")]
		private IObjectDescriptor <Source>k__BackingField;

		[Token(Token = "0x1700000B")]
		public IObjectDescriptor Source
		{
			[Token(Token = "0x600012F")]
			[Address(RVA = "0x27614B0", Offset = "0x27614B0", VA = "0x27614B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8992C", Offset = "0xA8992C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000130")]
			[Address(RVA = "0x27614B8", Offset = "0x27614B8", VA = "0x27614B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8993C", Offset = "0xA8993C")]
			private set
			{
			}
		}

		[Token(Token = "0x6000131")]
		[Address(RVA = "0x27614C0", Offset = "0x27614C0", VA = "0x27614C0")]
		protected EventInfo(IObjectDescriptor source)
		{
		}
	}
	[Token(Token = "0x2000024")]
	public class AliasEventInfo : EventInfo
	{
		[Token(Token = "0x4000096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F104", Offset = "0xA7F104")]
		private string <Alias>k__BackingField;

		[Token(Token = "0x1700000C")]
		public string Alias
		{
			[Token(Token = "0x6000133")]
			[Address(RVA = "0x230F974", Offset = "0x230F974", VA = "0x230F974")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8994C", Offset = "0xA8994C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000134")]
			[Address(RVA = "0x230F97C", Offset = "0x230F97C", VA = "0x230F97C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8995C", Offset = "0xA8995C")]
			set
			{
			}
		}

		[Token(Token = "0x6000132")]
		[Address(RVA = "0x230F96C", Offset = "0x230F96C", VA = "0x230F96C")]
		public AliasEventInfo(IObjectDescriptor source)
		{
		}
	}
	[Token(Token = "0x2000025")]
	public class ObjectEventInfo : EventInfo
	{
		[Token(Token = "0x4000097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F114", Offset = "0xA7F114")]
		private string <Anchor>k__BackingField;

		[Token(Token = "0x4000098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F124", Offset = "0xA7F124")]
		private string <Tag>k__BackingField;

		[Token(Token = "0x1700000D")]
		public string Anchor
		{
			[Token(Token = "0x6000136")]
			[Address(RVA = "0x10B4D44", Offset = "0x10B4D44", VA = "0x10B4D44")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8996C", Offset = "0xA8996C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000137")]
			[Address(RVA = "0x10B4D4C", Offset = "0x10B4D4C", VA = "0x10B4D4C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8997C", Offset = "0xA8997C")]
			set
			{
			}
		}

		[Token(Token = "0x1700000E")]
		public string Tag
		{
			[Token(Token = "0x6000138")]
			[Address(RVA = "0x10B4D54", Offset = "0x10B4D54", VA = "0x10B4D54")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8998C", Offset = "0xA8998C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000139")]
			[Address(RVA = "0x10B4D5C", Offset = "0x10B4D5C", VA = "0x10B4D5C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8999C", Offset = "0xA8999C")]
			set
			{
			}
		}

		[Token(Token = "0x6000135")]
		[Address(RVA = "0x10B4D3C", Offset = "0x10B4D3C", VA = "0x10B4D3C")]
		protected ObjectEventInfo(IObjectDescriptor source)
		{
		}
	}
	[Token(Token = "0x2000026")]
	public sealed class ScalarEventInfo : ObjectEventInfo
	{
		[Token(Token = "0x4000099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F134", Offset = "0xA7F134")]
		private string <RenderedValue>k__BackingField;

		[Token(Token = "0x400009A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F144", Offset = "0xA7F144")]
		private ScalarStyle <Style>k__BackingField;

		[Token(Token = "0x400009B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F154", Offset = "0xA7F154")]
		private bool <IsPlainImplicit>k__BackingField;

		[Token(Token = "0x400009C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F164", Offset = "0xA7F164")]
		private bool <IsQuotedImplicit>k__BackingField;

		[Token(Token = "0x1700000F")]
		public string RenderedValue
		{
			[Token(Token = "0x600013B")]
			[Address(RVA = "0x10C4700", Offset = "0x10C4700", VA = "0x10C4700")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA899AC", Offset = "0xA899AC")]
			get
			{
				return null;
			}
			[Token(Token = "0x600013C")]
			[Address(RVA = "0x10C4708", Offset = "0x10C4708", VA = "0x10C4708")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA899BC", Offset = "0xA899BC")]
			set
			{
			}
		}

		[Token(Token = "0x17000010")]
		public ScalarStyle Style
		{
			[Token(Token = "0x600013D")]
			[Address(RVA = "0x10C4710", Offset = "0x10C4710", VA = "0x10C4710")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA899CC", Offset = "0xA899CC")]
			get
			{
				return default(ScalarStyle);
			}
			[Token(Token = "0x600013E")]
			[Address(RVA = "0x10C4718", Offset = "0x10C4718", VA = "0x10C4718")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA899DC", Offset = "0xA899DC")]
			set
			{
			}
		}

		[Token(Token = "0x17000011")]
		public bool IsPlainImplicit
		{
			[Token(Token = "0x600013F")]
			[Address(RVA = "0x10C4720", Offset = "0x10C4720", VA = "0x10C4720")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA899EC", Offset = "0xA899EC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000140")]
			[Address(RVA = "0x10C4728", Offset = "0x10C4728", VA = "0x10C4728")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA899FC", Offset = "0xA899FC")]
			set
			{
			}
		}

		[Token(Token = "0x17000012")]
		public bool IsQuotedImplicit
		{
			[Token(Token = "0x6000141")]
			[Address(RVA = "0x10C4734", Offset = "0x10C4734", VA = "0x10C4734")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89A0C", Offset = "0xA89A0C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000142")]
			[Address(RVA = "0x10C473C", Offset = "0x10C473C", VA = "0x10C473C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89A1C", Offset = "0xA89A1C")]
			set
			{
			}
		}

		[Token(Token = "0x600013A")]
		[Address(RVA = "0x10C4630", Offset = "0x10C4630", VA = "0x10C4630")]
		public ScalarEventInfo(IObjectDescriptor source)
		{
		}
	}
	[Token(Token = "0x2000027")]
	public sealed class MappingStartEventInfo : ObjectEventInfo
	{
		[Token(Token = "0x400009D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F174", Offset = "0xA7F174")]
		private bool <IsImplicit>k__BackingField;

		[Token(Token = "0x400009E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F184", Offset = "0xA7F184")]
		private MappingStyle <Style>k__BackingField;

		[Token(Token = "0x17000013")]
		public bool IsImplicit
		{
			[Token(Token = "0x6000144")]
			[Address(RVA = "0x22F4CEC", Offset = "0x22F4CEC", VA = "0x22F4CEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89A2C", Offset = "0xA89A2C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000145")]
			[Address(RVA = "0x22F4CF4", Offset = "0x22F4CF4", VA = "0x22F4CF4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89A3C", Offset = "0xA89A3C")]
			set
			{
			}
		}

		[Token(Token = "0x17000014")]
		public MappingStyle Style
		{
			[Token(Token = "0x6000146")]
			[Address(RVA = "0x22F4D00", Offset = "0x22F4D00", VA = "0x22F4D00")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89A4C", Offset = "0xA89A4C")]
			get
			{
				return default(MappingStyle);
			}
			[Token(Token = "0x6000147")]
			[Address(RVA = "0x22F4D08", Offset = "0x22F4D08", VA = "0x22F4D08")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89A5C", Offset = "0xA89A5C")]
			set
			{
			}
		}

		[Token(Token = "0x6000143")]
		[Address(RVA = "0x22F4CE4", Offset = "0x22F4CE4", VA = "0x22F4CE4")]
		public MappingStartEventInfo(IObjectDescriptor source)
		{
		}
	}
	[Token(Token = "0x2000028")]
	public sealed class MappingEndEventInfo : EventInfo
	{
		[Token(Token = "0x6000148")]
		[Address(RVA = "0x22F4808", Offset = "0x22F4808", VA = "0x22F4808")]
		public MappingEndEventInfo(IObjectDescriptor source)
		{
		}
	}
	[Token(Token = "0x2000029")]
	public sealed class SequenceStartEventInfo : ObjectEventInfo
	{
		[Token(Token = "0x400009F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F194", Offset = "0xA7F194")]
		private bool <IsImplicit>k__BackingField;

		[Token(Token = "0x40000A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F1A4", Offset = "0xA7F1A4")]
		private SequenceStyle <Style>k__BackingField;

		[Token(Token = "0x17000015")]
		public bool IsImplicit
		{
			[Token(Token = "0x600014A")]
			[Address(RVA = "0x162D7B0", Offset = "0x162D7B0", VA = "0x162D7B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89A6C", Offset = "0xA89A6C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600014B")]
			[Address(RVA = "0x162D7B8", Offset = "0x162D7B8", VA = "0x162D7B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89A7C", Offset = "0xA89A7C")]
			set
			{
			}
		}

		[Token(Token = "0x17000016")]
		public SequenceStyle Style
		{
			[Token(Token = "0x600014C")]
			[Address(RVA = "0x162D7C4", Offset = "0x162D7C4", VA = "0x162D7C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89A8C", Offset = "0xA89A8C")]
			get
			{
				return default(SequenceStyle);
			}
			[Token(Token = "0x600014D")]
			[Address(RVA = "0x162D7CC", Offset = "0x162D7CC", VA = "0x162D7CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89A9C", Offset = "0xA89A9C")]
			set
			{
			}
		}

		[Token(Token = "0x6000149")]
		[Address(RVA = "0x162D7A8", Offset = "0x162D7A8", VA = "0x162D7A8")]
		public SequenceStartEventInfo(IObjectDescriptor source)
		{
		}
	}
	[Token(Token = "0x200002A")]
	public sealed class SequenceEndEventInfo : EventInfo
	{
		[Token(Token = "0x600014E")]
		[Address(RVA = "0x162D34C", Offset = "0x162D34C", VA = "0x162D34C")]
		public SequenceEndEventInfo(IObjectDescriptor source)
		{
		}
	}
	[Token(Token = "0x200002B")]
	public interface IAliasProvider
	{
		[Token(Token = "0x600014F")]
		string GetAlias(object target);
	}
	[Token(Token = "0x200002C")]
	public interface IEventEmitter
	{
		[Token(Token = "0x6000150")]
		void Emit(AliasEventInfo eventInfo, IEmitter emitter);

		[Token(Token = "0x6000151")]
		void Emit(ScalarEventInfo eventInfo, IEmitter emitter);

		[Token(Token = "0x6000152")]
		void Emit(MappingStartEventInfo eventInfo, IEmitter emitter);

		[Token(Token = "0x6000153")]
		void Emit(MappingEndEventInfo eventInfo, IEmitter emitter);

		[Token(Token = "0x6000154")]
		void Emit(SequenceStartEventInfo eventInfo, IEmitter emitter);

		[Token(Token = "0x6000155")]
		void Emit(SequenceEndEventInfo eventInfo, IEmitter emitter);
	}
	[Token(Token = "0x200002D")]
	public interface INamingConvention
	{
		[Token(Token = "0x6000156")]
		string Apply(string value);
	}
	[Token(Token = "0x200002E")]
	public interface INodeDeserializer
	{
		[Token(Token = "0x6000157")]
		bool Deserialize(IParser reader, Type expectedType, Func<IParser, Type, object> nestedObjectDeserializer, out object value);
	}
	[Token(Token = "0x200002F")]
	public interface INodeTypeResolver
	{
		[Token(Token = "0x6000158")]
		bool Resolve(NodeEvent nodeEvent, ref Type currentType);
	}
	[Token(Token = "0x2000030")]
	public interface IObjectDescriptor
	{
		[Token(Token = "0x17000017")]
		object Value
		{
			[Token(Token = "0x6000159")]
			get;
		}

		[Token(Token = "0x17000018")]
		Type Type
		{
			[Token(Token = "0x600015A")]
			get;
		}

		[Token(Token = "0x17000019")]
		Type StaticType
		{
			[Token(Token = "0x600015B")]
			get;
		}

		[Token(Token = "0x1700001A")]
		ScalarStyle ScalarStyle
		{
			[Token(Token = "0x600015C")]
			get;
		}
	}
	[Token(Token = "0x2000031")]
	public interface IObjectFactory
	{
		[Token(Token = "0x600015D")]
		object Create(Type type);
	}
	[Token(Token = "0x2000032")]
	public interface IObjectGraphTraversalStrategy
	{
		[Token(Token = "0x600015E")]
		void Traverse<TContext>(IObjectDescriptor graph, IObjectGraphVisitor<TContext> visitor, TContext context);
	}
	[Token(Token = "0x2000033")]
	public interface IObjectGraphVisitor<TContext>
	{
		[Token(Token = "0x600015F")]
		bool Enter(IObjectDescriptor value, TContext context);

		[Token(Token = "0x6000160")]
		bool EnterMapping(IObjectDescriptor key, IObjectDescriptor value, TContext context);

		[Token(Token = "0x6000161")]
		bool EnterMapping(IPropertyDescriptor key, IObjectDescriptor value, TContext context);

		[Token(Token = "0x6000162")]
		void VisitScalar(IObjectDescriptor scalar, TContext context);

		[Token(Token = "0x6000163")]
		void VisitMappingStart(IObjectDescriptor mapping, Type keyType, Type valueType, TContext context);

		[Token(Token = "0x6000164")]
		void VisitMappingEnd(IObjectDescriptor mapping, TContext context);

		[Token(Token = "0x6000165")]
		void VisitSequenceStart(IObjectDescriptor sequence, Type elementType, TContext context);

		[Token(Token = "0x6000166")]
		void VisitSequenceEnd(IObjectDescriptor sequence, TContext context);
	}
	[Token(Token = "0x2000034")]
	public interface IPropertyDescriptor
	{
		[Token(Token = "0x1700001B")]
		string Name
		{
			[Token(Token = "0x6000167")]
			get;
		}

		[Token(Token = "0x1700001C")]
		bool CanWrite
		{
			[Token(Token = "0x6000168")]
			get;
		}

		[Token(Token = "0x1700001D")]
		Type Type
		{
			[Token(Token = "0x6000169")]
			get;
		}

		[Token(Token = "0x1700001E")]
		Type TypeOverride
		{
			[Token(Token = "0x600016A")]
			get;
			[Token(Token = "0x600016B")]
			set;
		}

		[Token(Token = "0x1700001F")]
		int Order
		{
			[Token(Token = "0x600016C")]
			get;
			[Token(Token = "0x600016D")]
			set;
		}

		[Token(Token = "0x17000020")]
		ScalarStyle ScalarStyle
		{
			[Token(Token = "0x600016E")]
			get;
			[Token(Token = "0x600016F")]
			set;
		}

		[Token(Token = "0x6000170")]
		T GetCustomAttribute<T>() where T : Attribute;

		[Token(Token = "0x6000171")]
		IObjectDescriptor Read(object target);

		[Token(Token = "0x6000172")]
		void Write(object target, object value);
	}
	[Token(Token = "0x2000035")]
	public interface IRegistrationLocationSelectionSyntax<TBaseRegistrationType>
	{
		[Token(Token = "0x6000173")]
		void InsteadOf<TRegistrationType>() where TRegistrationType : TBaseRegistrationType;

		[Token(Token = "0x6000174")]
		void Before<TRegistrationType>() where TRegistrationType : TBaseRegistrationType;

		[Token(Token = "0x6000175")]
		void After<TRegistrationType>() where TRegistrationType : TBaseRegistrationType;

		[Token(Token = "0x6000176")]
		void OnTop();

		[Token(Token = "0x6000177")]
		void OnBottom();
	}
	[Token(Token = "0x2000036")]
	public interface ITrackingRegistrationLocationSelectionSyntax<TBaseRegistrationType>
	{
		[Token(Token = "0x6000178")]
		void InsteadOf<TRegistrationType>() where TRegistrationType : TBaseRegistrationType;
	}
	[Token(Token = "0x2000037")]
	public interface ITypeInspector
	{
		[Token(Token = "0x6000179")]
		IEnumerable<IPropertyDescriptor> GetProperties(Type type, object container);

		[Token(Token = "0x600017A")]
		IPropertyDescriptor GetProperty(Type type, object container, string name, bool ignoreUnmatched);
	}
	[Token(Token = "0x2000038")]
	public interface ITypeResolver
	{
		[Token(Token = "0x600017B")]
		Type Resolve(Type staticType, object actualValue);
	}
	[Token(Token = "0x2000039")]
	public interface IValueDeserializer
	{
		[Token(Token = "0x600017C")]
		object DeserializeValue(IParser parser, Type expectedType, SerializerState state, IValueDeserializer nestedObjectDeserializer);
	}
	[Token(Token = "0x200003A")]
	public interface IValuePromise
	{
		[Token(Token = "0x14000001")]
		event Action<object> ValueAvailable;
	}
	[Token(Token = "0x200003B")]
	public interface IValueSerializer
	{
		[Token(Token = "0x600017F")]
		void SerializeValue(IEmitter emitter, object value, Type type);
	}
	[Token(Token = "0x200003C")]
	public interface IYamlConvertible
	{
		[Token(Token = "0x6000180")]
		void Read(IParser parser, Type expectedType, ObjectDeserializer nestedObjectDeserializer);

		[Token(Token = "0x6000181")]
		void Write(IEmitter emitter, ObjectSerializer nestedObjectSerializer);
	}
	[Token(Token = "0x200003D")]
	public delegate object ObjectDeserializer(Type type);
	[Token(Token = "0x200003E")]
	public delegate void ObjectSerializer(object value, [Optional] Type type);
	[Token(Token = "0x200003F")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xA7C870", Offset = "0xA7C870")]
	public interface IYamlSerializable
	{
		[Token(Token = "0x600018A")]
		void ReadYaml(IParser parser);

		[Token(Token = "0x600018B")]
		void WriteYaml(IEmitter emitter);
	}
	[Token(Token = "0x2000040")]
	public interface IYamlTypeConverter
	{
		[Token(Token = "0x600018C")]
		bool Accepts(Type type);

		[Token(Token = "0x600018D")]
		object ReadYaml(IParser parser, Type type);

		[Token(Token = "0x600018E")]
		void WriteYaml(IEmitter emitter, object value, Type type);
	}
	[Token(Token = "0x2000041")]
	internal sealed class LazyComponentRegistrationList<TArgument, TComponent> : IEnumerable<Func<TArgument, TComponent>>, IEnumerable
	{
		[Token(Token = "0x2000316")]
		public sealed class LazyComponentRegistration
		{
			[Token(Token = "0x4000E83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly Type ComponentType;

			[Token(Token = "0x4000E84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly Func<TArgument, TComponent> Factory;

			[Token(Token = "0x60014D9")]
			public LazyComponentRegistration(Type componentType, Func<TArgument, TComponent> factory)
			{
			}
		}

		[Token(Token = "0x2000317")]
		public sealed class TrackingLazyComponentRegistration
		{
			[Token(Token = "0x4000E85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly Type ComponentType;

			[Token(Token = "0x4000E86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly Func<TComponent, TArgument, TComponent> Factory;

			[Token(Token = "0x60014DA")]
			public TrackingLazyComponentRegistration(Type componentType, Func<TComponent, TArgument, TComponent> factory)
			{
			}
		}

		[Token(Token = "0x2000318")]
		private class RegistrationLocationSelector : IRegistrationLocationSelectionSyntax<TComponent>
		{
			[Token(Token = "0x4000E87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly LazyComponentRegistrationList<TArgument, TComponent> registrations;

			[Token(Token = "0x4000E88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly LazyComponentRegistration newRegistration;

			[Token(Token = "0x60014DB")]
			public RegistrationLocationSelector(LazyComponentRegistrationList<TArgument, TComponent> registrations, LazyComponentRegistration newRegistration)
			{
			}

			[Token(Token = "0x60014DC")]
			private void YamlDotNet.Serialization.IRegistrationLocationSelectionSyntax<TComponent>.InsteadOf<TRegistrationType>() where TRegistrationType : TComponent
			{
			}

			[Token(Token = "0x60014DD")]
			private void YamlDotNet.Serialization.IRegistrationLocationSelectionSyntax<TComponent>.After<TRegistrationType>() where TRegistrationType : TComponent
			{
			}

			[Token(Token = "0x60014DE")]
			private void YamlDotNet.Serialization.IRegistrationLocationSelectionSyntax<TComponent>.Before<TRegistrationType>() where TRegistrationType : TComponent
			{
			}

			[Token(Token = "0x60014DF")]
			private void YamlDotNet.Serialization.IRegistrationLocationSelectionSyntax<TComponent>.OnBottom()
			{
			}

			[Token(Token = "0x60014E0")]
			private void YamlDotNet.Serialization.IRegistrationLocationSelectionSyntax<TComponent>.OnTop()
			{
			}
		}

		[Token(Token = "0x2000319")]
		private class TrackingRegistrationLocationSelector : ITrackingRegistrationLocationSelectionSyntax<TComponent>
		{
			[Token(Token = "0x2000432")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EE9C", Offset = "0xA7EE9C")]
			private sealed class <>c__DisplayClass3_0<TRegistrationType> where TRegistrationType : TComponent
			{
				[Token(Token = "0x4001293")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public TrackingRegistrationLocationSelector <>4__this;

				[Token(Token = "0x4001294")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public Func<TArgument, TComponent> innerComponentFactory;

				[Token(Token = "0x6001931")]
				public <>c__DisplayClass3_0()
				{
				}

				[Token(Token = "0x6001932")]
				internal TComponent <YamlDotNet.Serialization.ITrackingRegistrationLocationSelectionSyntax<TComponent>.InsteadOf>b__0(TArgument arg)
				{
					return (TComponent)null;
				}
			}

			[Token(Token = "0x4000E89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly LazyComponentRegistrationList<TArgument, TComponent> registrations;

			[Token(Token = "0x4000E8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly TrackingLazyComponentRegistration newRegistration;

			[Token(Token = "0x60014E1")]
			public TrackingRegistrationLocationSelector(LazyComponentRegistrationList<TArgument, TComponent> registrations, TrackingLazyComponentRegistration newRegistration)
			{
			}

			[Token(Token = "0x60014E2")]
			private void YamlDotNet.Serialization.ITrackingRegistrationLocationSelectionSyntax<TComponent>.InsteadOf<TRegistrationType>() where TRegistrationType : TComponent
			{
			}
		}

		[Token(Token = "0x200031A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E57C", Offset = "0xA7E57C")]
		private sealed class <get_InReverseOrder>d__9 : IEnumerable<Func<TArgument, TComponent>>, IEnumerable, IEnumerator<Func<TArgument, TComponent>>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>1__state;

			[Token(Token = "0x4000E8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private Func<TArgument, TComponent> <>2__current;

			[Token(Token = "0x4000E8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000E8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public LazyComponentRegistrationList<TArgument, TComponent> <>4__this;

			[Token(Token = "0x4000E8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int <i>5__2;

			[Token(Token = "0x1700015E")]
			private Func<TArgument, TComponent> System.Collections.Generic.IEnumerator<System.Func<TArgument,TComponent>>.Current
			{
				[Token(Token = "0x60014E6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700015F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014E8")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014E3")]
			[DebuggerHidden]
			public <get_InReverseOrder>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x60014E4")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014E5")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014E7")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x60014E9")]
			[DebuggerHidden]
			private IEnumerator<Func<TArgument, TComponent>> System.Collections.Generic.IEnumerable<System.Func<TArgument,TComponent>>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60014EA")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Serializable]
		[Token(Token = "0x200031B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E58C", Offset = "0xA7E58C")]
		private sealed class <>c
		{
			[Token(Token = "0x4000E90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000E91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<LazyComponentRegistration, Func<TArgument, TComponent>> <>9__12_0;

			[Token(Token = "0x60014EC")]
			public <>c()
			{
			}

			[Token(Token = "0x60014ED")]
			internal Func<TArgument, TComponent> <GetEnumerator>b__12_0(LazyComponentRegistration e)
			{
				return null;
			}
		}

		[Token(Token = "0x40000A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly List<LazyComponentRegistration> entries;

		[Token(Token = "0x17000021")]
		public int Count
		{
			[Token(Token = "0x6000192")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000022")]
		public IEnumerable<Func<TArgument, TComponent>> InReverseOrder
		{
			[Token(Token = "0x6000193")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xA89ACC", Offset = "0xA89ACC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600018F")]
		public LazyComponentRegistrationList<TArgument, TComponent> Clone()
		{
			return null;
		}

		[Token(Token = "0x6000190")]
		public void Add(Type componentType, Func<TArgument, TComponent> factory)
		{
		}

		[Token(Token = "0x6000191")]
		public void Remove(Type componentType)
		{
		}

		[Token(Token = "0x6000194")]
		public IRegistrationLocationSelectionSyntax<TComponent> CreateRegistrationLocationSelector(Type componentType, Func<TArgument, TComponent> factory)
		{
			return null;
		}

		[Token(Token = "0x6000195")]
		public ITrackingRegistrationLocationSelectionSyntax<TComponent> CreateTrackingRegistrationLocationSelector(Type componentType, Func<TComponent, TArgument, TComponent> factory)
		{
			return null;
		}

		[Token(Token = "0x6000196")]
		public IEnumerator<Func<TArgument, TComponent>> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000197")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000198")]
		private int IndexOfRegistration(Type registrationType)
		{
			return default(int);
		}

		[Token(Token = "0x6000199")]
		private void EnsureNoDuplicateRegistrationType(Type componentType)
		{
		}

		[Token(Token = "0x600019A")]
		private int EnsureRegistrationExists<TRegistrationType>()
		{
			return default(int);
		}

		[Token(Token = "0x600019B")]
		public LazyComponentRegistrationList()
		{
		}
	}
	[Token(Token = "0x2000042")]
	internal static class LazyComponentRegistrationListExtensions
	{
		[Serializable]
		[Token(Token = "0x200031C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E59C", Offset = "0xA7E59C")]
		private sealed class <>c__0<TComponent>
		{
			[Token(Token = "0x4000E92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__0<TComponent> <>9;

			[Token(Token = "0x4000E93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<TComponent, Func<TComponent, TComponent>, TComponent> <>9__0_0;

			[Token(Token = "0x60014EF")]
			public <>c__0()
			{
			}

			[Token(Token = "0x60014F0")]
			internal TComponent <BuildComponentChain>b__0_0(TComponent inner, Func<TComponent, TComponent> factory)
			{
				return (TComponent)null;
			}
		}

		[Token(Token = "0x200031D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E5AC", Offset = "0xA7E5AC")]
		private sealed class <>c__DisplayClass1_0<TArgument, TComponent>
		{
			[Token(Token = "0x4000E94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Func<TComponent, TArgument> argumentBuilder;

			[Token(Token = "0x60014F1")]
			public <>c__DisplayClass1_0()
			{
			}

			[Token(Token = "0x60014F2")]
			internal TComponent <BuildComponentChain>b__0(TComponent inner, Func<TArgument, TComponent> factory)
			{
				return (TComponent)null;
			}
		}

		[Serializable]
		[Token(Token = "0x200031E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E5BC", Offset = "0xA7E5BC")]
		private sealed class <>c__2<TComponent>
		{
			[Token(Token = "0x4000E95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__2<TComponent> <>9;

			[Token(Token = "0x4000E96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Func<Func<Nothing, TComponent>, TComponent> <>9__2_0;

			[Token(Token = "0x60014F4")]
			public <>c__2()
			{
			}

			[Token(Token = "0x60014F5")]
			internal TComponent <BuildComponentList>b__2_0(Func<Nothing, TComponent> factory)
			{
				return (TComponent)null;
			}
		}

		[Token(Token = "0x200031F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E5CC", Offset = "0xA7E5CC")]
		private sealed class <>c__DisplayClass3_0<TArgument, TComponent>
		{
			[Token(Token = "0x4000E97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public TArgument argument;

			[Token(Token = "0x60014F6")]
			public <>c__DisplayClass3_0()
			{
			}

			[Token(Token = "0x60014F7")]
			internal TComponent <BuildComponentList>b__0(Func<TArgument, TComponent> factory)
			{
				return (TComponent)null;
			}
		}

		[Token(Token = "0x600019C")]
		public static TComponent BuildComponentChain<TComponent>(this LazyComponentRegistrationList<TComponent, TComponent> registrations, TComponent innerComponent)
		{
			return (TComponent)null;
		}

		[Token(Token = "0x600019D")]
		public static TComponent BuildComponentChain<TArgument, TComponent>(this LazyComponentRegistrationList<TArgument, TComponent> registrations, TComponent innerComponent, Func<TComponent, TArgument> argumentBuilder)
		{
			return (TComponent)null;
		}

		[Token(Token = "0x600019E")]
		public static List<TComponent> BuildComponentList<TComponent>(this LazyComponentRegistrationList<Nothing, TComponent> registrations)
		{
			return null;
		}

		[Token(Token = "0x600019F")]
		public static List<TComponent> BuildComponentList<TArgument, TComponent>(this LazyComponentRegistrationList<TArgument, TComponent> registrations, TArgument argument)
		{
			return null;
		}
	}
	[Token(Token = "0x2000043")]
	public sealed class Nothing
	{
		[Token(Token = "0x60001A0")]
		[Address(RVA = "0x10B4028", Offset = "0x10B4028", VA = "0x10B4028")]
		private Nothing()
		{
		}
	}
	[Token(Token = "0x2000044")]
	public sealed class ObjectDescriptor : IObjectDescriptor
	{
		[Token(Token = "0x40000A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F1B4", Offset = "0xA7F1B4")]
		private object <Value>k__BackingField;

		[Token(Token = "0x40000A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F1C4", Offset = "0xA7F1C4")]
		private Type <Type>k__BackingField;

		[Token(Token = "0x40000A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F1D4", Offset = "0xA7F1D4")]
		private Type <StaticType>k__BackingField;

		[Token(Token = "0x40000A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F1E4", Offset = "0xA7F1E4")]
		private ScalarStyle <ScalarStyle>k__BackingField;

		[Token(Token = "0x17000023")]
		public object Value
		{
			[Token(Token = "0x60001A1")]
			[Address(RVA = "0x10B47D0", Offset = "0x10B47D0", VA = "0x10B47D0", Slot = "4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89B6C", Offset = "0xA89B6C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60001A2")]
			[Address(RVA = "0x10B47D8", Offset = "0x10B47D8", VA = "0x10B47D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89B7C", Offset = "0xA89B7C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000024")]
		public Type Type
		{
			[Token(Token = "0x60001A3")]
			[Address(RVA = "0x10B47E0", Offset = "0x10B47E0", VA = "0x10B47E0", Slot = "5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89B8C", Offset = "0xA89B8C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60001A4")]
			[Address(RVA = "0x10B47E8", Offset = "0x10B47E8", VA = "0x10B47E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89B9C", Offset = "0xA89B9C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000025")]
		public Type StaticType
		{
			[Token(Token = "0x60001A5")]
			[Address(RVA = "0x10B47F0", Offset = "0x10B47F0", VA = "0x10B47F0", Slot = "6")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89BAC", Offset = "0xA89BAC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60001A6")]
			[Address(RVA = "0x10B47F8", Offset = "0x10B47F8", VA = "0x10B47F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89BBC", Offset = "0xA89BBC")]
			private set
			{
			}
		}

		[Token(Token = "0x17000026")]
		public ScalarStyle ScalarStyle
		{
			[Token(Token = "0x60001A7")]
			[Address(RVA = "0x10B4800", Offset = "0x10B4800", VA = "0x10B4800", Slot = "7")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89BCC", Offset = "0xA89BCC")]
			get
			{
				return default(ScalarStyle);
			}
			[Token(Token = "0x60001A8")]
			[Address(RVA = "0x10B4808", Offset = "0x10B4808", VA = "0x10B4808")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89BDC", Offset = "0xA89BDC")]
			private set
			{
			}
		}

		[Token(Token = "0x60001A9")]
		[Address(RVA = "0x10B4810", Offset = "0x10B4810", VA = "0x10B4810")]
		public ObjectDescriptor(object value, Type type, Type staticType)
		{
		}

		[Token(Token = "0x60001AA")]
		[Address(RVA = "0x10B4818", Offset = "0x10B4818", VA = "0x10B4818")]
		public ObjectDescriptor(object value, Type type, Type staticType, ScalarStyle scalarStyle)
		{
		}
	}
	[Token(Token = "0x2000045")]
	public sealed class PropertyDescriptor : IPropertyDescriptor
	{
		[Token(Token = "0x40000A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IPropertyDescriptor baseDescriptor;

		[Token(Token = "0x40000A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F1F4", Offset = "0xA7F1F4")]
		private string <Name>k__BackingField;

		[Token(Token = "0x40000A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F204", Offset = "0xA7F204")]
		private int <Order>k__BackingField;

		[Token(Token = "0x17000027")]
		public string Name
		{
			[Token(Token = "0x60001AC")]
			[Address(RVA = "0x10BC4D0", Offset = "0x10BC4D0", VA = "0x10BC4D0", Slot = "4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89BEC", Offset = "0xA89BEC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60001AD")]
			[Address(RVA = "0x10BC4D8", Offset = "0x10BC4D8", VA = "0x10BC4D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89BFC", Offset = "0xA89BFC")]
			set
			{
			}
		}

		[Token(Token = "0x17000028")]
		public Type Type
		{
			[Token(Token = "0x60001AE")]
			[Address(RVA = "0x10BC4E0", Offset = "0x10BC4E0", VA = "0x10BC4E0", Slot = "6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000029")]
		public Type TypeOverride
		{
			[Token(Token = "0x60001AF")]
			[Address(RVA = "0x10BC590", Offset = "0x10BC590", VA = "0x10BC590", Slot = "7")]
			get
			{
				return null;
			}
			[Token(Token = "0x60001B0")]
			[Address(RVA = "0x10BC640", Offset = "0x10BC640", VA = "0x10BC640", Slot = "8")]
			set
			{
			}
		}

		[Token(Token = "0x1700002A")]
		public int Order
		{
			[Token(Token = "0x60001B1")]
			[Address(RVA = "0x10BC700", Offset = "0x10BC700", VA = "0x10BC700", Slot = "9")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89C0C", Offset = "0xA89C0C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60001B2")]
			[Address(RVA = "0x10BC708", Offset = "0x10BC708", VA = "0x10BC708", Slot = "10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89C1C", Offset = "0xA89C1C")]
			set
			{
			}
		}

		[Token(Token = "0x1700002B")]
		public ScalarStyle ScalarStyle
		{
			[Token(Token = "0x60001B3")]
			[Address(RVA = "0x10BC710", Offset = "0x10BC710", VA = "0x10BC710", Slot = "11")]
			get
			{
				return default(ScalarStyle);
			}
			[Token(Token = "0x60001B4")]
			[Address(RVA = "0x10BC7C0", Offset = "0x10BC7C0", VA = "0x10BC7C0", Slot = "12")]
			set
			{
			}
		}

		[Token(Token = "0x1700002C")]
		public bool CanWrite
		{
			[Token(Token = "0x60001B5")]
			[Address(RVA = "0x10BC880", Offset = "0x10BC880", VA = "0x10BC880", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60001AB")]
		[Address(RVA = "0x1091C6C", Offset = "0x1091C6C", VA = "0x1091C6C")]
		public PropertyDescriptor(IPropertyDescriptor baseDescriptor)
		{
		}

		[Token(Token = "0x60001B6")]
		[Address(RVA = "0x10BC930", Offset = "0x10BC930", VA = "0x10BC930", Slot = "15")]
		public void Write(object target, object value)
		{
		}

		[Token(Token = "0x60001B7")]
		public T GetCustomAttribute<T>() where T : Attribute
		{
			return null;
		}

		[Token(Token = "0x60001B8")]
		[Address(RVA = "0x10BC9F8", Offset = "0x10BC9F8", VA = "0x10BC9F8", Slot = "14")]
		public IObjectDescriptor Read(object target)
		{
			return null;
		}
	}
	[Token(Token = "0x2000046")]
	[Flags]
	public enum SerializationOptions
	{
		[Token(Token = "0x40000AA")]
		None = 0,
		[Token(Token = "0x40000AB")]
		Roundtrip = 1,
		[Token(Token = "0x40000AC")]
		DisableAliases = 2,
		[Token(Token = "0x40000AD")]
		EmitDefaults = 4,
		[Token(Token = "0x40000AE")]
		JsonCompatible = 8,
		[Token(Token = "0x40000AF")]
		DefaultToStaticType = 0x10
	}
	[Token(Token = "0x2000047")]
	public sealed class Serializer
	{
		[Token(Token = "0x2000320")]
		private class BackwardsCompatibleConfiguration : IValueSerializer
		{
			[Token(Token = "0x2000433")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EEAC", Offset = "0xA7EEAC")]
			private sealed class <>c__DisplayClass10_0
			{
				[Token(Token = "0x4001295")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public BackwardsCompatibleConfiguration <>4__this;

				[Token(Token = "0x4001296")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				public IEmitter emitter;

				[Token(Token = "0x6001933")]
				[Address(RVA = "0x1EABD58", Offset = "0x1EABD58", VA = "0x1EABD58")]
				public <>c__DisplayClass10_0()
				{
				}

				[Token(Token = "0x6001934")]
				[Address(RVA = "0x1EB3440", Offset = "0x1EB3440", VA = "0x1EB3440")]
				internal void <CreateEmittingVisitor>b__0(object v, Type t)
				{
				}
			}

			[Token(Token = "0x4000E98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA843B0", Offset = "0xA843B0")]
			private IList<IYamlTypeConverter> <Converters>k__BackingField;

			[Token(Token = "0x4000E99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly SerializationOptions options;

			[Token(Token = "0x4000E9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private readonly INamingConvention namingConvention;

			[Token(Token = "0x4000E9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private readonly ITypeResolver typeResolver;

			[Token(Token = "0x4000E9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private readonly YamlAttributeOverrides overrides;

			[Token(Token = "0x17000160")]
			public IList<IYamlTypeConverter> Converters
			{
				[Token(Token = "0x60014F8")]
				[Address(RVA = "0x1EAB880", Offset = "0x1EAB880", VA = "0x1EAB880")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D02C", Offset = "0xA8D02C")]
				get
				{
					return null;
				}
				[Token(Token = "0x60014F9")]
				[Address(RVA = "0x1EAB888", Offset = "0x1EAB888", VA = "0x1EAB888")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D03C", Offset = "0xA8D03C")]
				private set
				{
				}
			}

			[Token(Token = "0x60014FA")]
			[Address(RVA = "0x1EAB890", Offset = "0x1EAB890", VA = "0x1EAB890")]
			public BackwardsCompatibleConfiguration(SerializationOptions options, INamingConvention namingConvention, YamlAttributeOverrides overrides)
			{
			}

			[Token(Token = "0x60014FB")]
			[Address(RVA = "0x1EABAAC", Offset = "0x1EABAAC", VA = "0x1EABAAC")]
			public bool IsOptionSet(SerializationOptions option)
			{
				return default(bool);
			}

			[Token(Token = "0x60014FC")]
			[Address(RVA = "0x1EABABC", Offset = "0x1EABABC", VA = "0x1EABABC")]
			private IObjectGraphVisitor<IEmitter> CreateEmittingVisitor(IEmitter emitter, IObjectGraphTraversalStrategy traversalStrategy, IEventEmitter eventEmitter, IObjectDescriptor graph)
			{
				return null;
			}

			[Token(Token = "0x60014FD")]
			[Address(RVA = "0x1EABD60", Offset = "0x1EABD60", VA = "0x1EABD60")]
			private IEventEmitter CreateEventEmitter()
			{
				return null;
			}

			[Token(Token = "0x60014FE")]
			[Address(RVA = "0x1EABE30", Offset = "0x1EABE30", VA = "0x1EABE30")]
			private IObjectGraphTraversalStrategy CreateTraversalStrategy()
			{
				return null;
			}

			[Token(Token = "0x60014FF")]
			[Address(RVA = "0x1EAC028", Offset = "0x1EAC028", VA = "0x1EAC028", Slot = "4")]
			public void SerializeValue(IEmitter emitter, object value, Type type)
			{
			}
		}

		[Token(Token = "0x40000B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IValueSerializer valueSerializer;

		[Token(Token = "0x40000B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly BackwardsCompatibleConfiguration backwardsCompatibleConfiguration;

		[Token(Token = "0x60001B9")]
		[Address(RVA = "0x162D7D4", Offset = "0x162D7D4", VA = "0x162D7D4")]
		private void ThrowUnlessInBackwardsCompatibleMode()
		{
		}

		[Token(Token = "0x60001BA")]
		[Address(RVA = "0x162D834", Offset = "0x162D834", VA = "0x162D834")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xA89C2C", Offset = "0xA89C2C")]
		public Serializer(SerializationOptions options = SerializationOptions.None, [Optional] INamingConvention namingConvention, [Optional] YamlAttributeOverrides overrides)
		{
		}

		[Token(Token = "0x60001BB")]
		[Address(RVA = "0x162D8CC", Offset = "0x162D8CC", VA = "0x162D8CC")]
		[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xA89C64", Offset = "0xA89C64")]
		public void RegisterTypeConverter(IYamlTypeConverter converter)
		{
		}

		[Token(Token = "0x60001BC")]
		[Address(RVA = "0x162D9A0", Offset = "0x162D9A0", VA = "0x162D9A0")]
		public Serializer()
		{
		}

		[Token(Token = "0x60001BD")]
		[Address(RVA = "0x162DA1C", Offset = "0x162DA1C", VA = "0x162DA1C")]
		private Serializer(IValueSerializer valueSerializer)
		{
		}

		[Token(Token = "0x60001BE")]
		[Address(RVA = "0x162DA9C", Offset = "0x162DA9C", VA = "0x162DA9C")]
		public static Serializer FromValueSerializer(IValueSerializer valueSerializer)
		{
			return null;
		}

		[Token(Token = "0x60001BF")]
		[Address(RVA = "0x162DAF8", Offset = "0x162DAF8", VA = "0x162DAF8")]
		public void Serialize(TextWriter writer, object graph)
		{
		}

		[Token(Token = "0x60001C0")]
		[Address(RVA = "0x162DBD0", Offset = "0x162DBD0", VA = "0x162DBD0")]
		public string Serialize(object graph)
		{
			return null;
		}

		[Token(Token = "0x60001C1")]
		[Address(RVA = "0x162DD54", Offset = "0x162DD54", VA = "0x162DD54")]
		public void Serialize(TextWriter writer, object graph, Type type)
		{
		}

		[Token(Token = "0x60001C2")]
		[Address(RVA = "0x162DB70", Offset = "0x162DB70", VA = "0x162DB70")]
		public void Serialize(IEmitter emitter, object graph)
		{
		}

		[Token(Token = "0x60001C3")]
		[Address(RVA = "0x162DDDC", Offset = "0x162DDDC", VA = "0x162DDDC")]
		public void Serialize(IEmitter emitter, object graph, Type type)
		{
		}

		[Token(Token = "0x60001C4")]
		[Address(RVA = "0x162DEE4", Offset = "0x162DEE4", VA = "0x162DEE4")]
		private void EmitDocument(IEmitter emitter, object graph, Type type)
		{
		}
	}
	[Token(Token = "0x2000048")]
	public sealed class SerializerBuilder : BuilderSkeleton<SerializerBuilder>
	{
		[Token(Token = "0x2000321")]
		private class ValueSerializer : IValueSerializer
		{
			[Token(Token = "0x2000434")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EEBC", Offset = "0xA7EEBC")]
			private sealed class <>c__DisplayClass6_0
			{
				[Token(Token = "0x4001297")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public ValueSerializer <>4__this;

				[Token(Token = "0x4001298")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				public IEmitter emitter;

				[Token(Token = "0x4001299")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public List<IObjectGraphVisitor<Nothing>> preProcessingPhaseObjectGraphVisitors;

				[Token(Token = "0x400129A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				public ObjectSerializer nestedObjectSerializer;

				[Token(Token = "0x6001935")]
				[Address(RVA = "0x1EAD018", Offset = "0x1EAD018", VA = "0x1EAD018")]
				public <>c__DisplayClass6_0()
				{
				}

				[Token(Token = "0x6001936")]
				[Address(RVA = "0x1EB3468", Offset = "0x1EB3468", VA = "0x1EB3468")]
				internal void <SerializeValue>b__0(object v, Type t)
				{
				}

				[Token(Token = "0x6001937")]
				[Address(RVA = "0x1EB3490", Offset = "0x1EB3490", VA = "0x1EB3490")]
				internal EmissionPhaseObjectGraphVisitorArgs <SerializeValue>b__1(IObjectGraphVisitor<IEmitter> inner)
				{
					return null;
				}
			}

			[Token(Token = "0x4000E9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly IObjectGraphTraversalStrategy traversalStrategy;

			[Token(Token = "0x4000E9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly IEventEmitter eventEmitter;

			[Token(Token = "0x4000E9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private readonly IEnumerable<IYamlTypeConverter> typeConverters;

			[Token(Token = "0x4000EA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private readonly LazyComponentRegistrationList<IEnumerable<IYamlTypeConverter>, IObjectGraphVisitor<Nothing>> preProcessingPhaseObjectGraphVisitorFactories;

			[Token(Token = "0x4000EA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private readonly LazyComponentRegistrationList<EmissionPhaseObjectGraphVisitorArgs, IObjectGraphVisitor<IEmitter>> emissionPhaseObjectGraphVisitorFactories;

			[Token(Token = "0x6001500")]
			[Address(RVA = "0x1EACA70", Offset = "0x1EACA70", VA = "0x1EACA70")]
			public ValueSerializer(IObjectGraphTraversalStrategy traversalStrategy, IEventEmitter eventEmitter, IEnumerable<IYamlTypeConverter> typeConverters, LazyComponentRegistrationList<IEnumerable<IYamlTypeConverter>, IObjectGraphVisitor<Nothing>> preProcessingPhaseObjectGraphVisitorFactories, LazyComponentRegistrationList<EmissionPhaseObjectGraphVisitorArgs, IObjectGraphVisitor<IEmitter>> emissionPhaseObjectGraphVisitorFactories)
			{
			}

			[Token(Token = "0x6001501")]
			[Address(RVA = "0x1EACB04", Offset = "0x1EACB04", VA = "0x1EACB04", Slot = "4")]
			public void SerializeValue(IEmitter emitter, object value, Type type)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000322")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E5DC", Offset = "0xA7E5DC")]
		private sealed class <>c
		{
			[Token(Token = "0x4000EA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000EA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<ITypeInspector, ITypeInspector> <>9__5_0;

			[Token(Token = "0x4000EA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<ITypeInspector, ITypeInspector> <>9__5_2;

			[Token(Token = "0x4000EA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<IEnumerable<IYamlTypeConverter>, IObjectGraphVisitor<Nothing>> <>9__5_4;

			[Token(Token = "0x4000EA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static Func<EmissionPhaseObjectGraphVisitorArgs, IObjectGraphVisitor<IEmitter>> <>9__5_5;

			[Token(Token = "0x4000EA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public static Func<EmissionPhaseObjectGraphVisitorArgs, IObjectGraphVisitor<IEmitter>> <>9__5_6;

			[Token(Token = "0x4000EA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public static Func<EmissionPhaseObjectGraphVisitorArgs, IObjectGraphVisitor<IEmitter>> <>9__5_7;

			[Token(Token = "0x4000EA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public static Func<IEventEmitter, IEventEmitter> <>9__5_8;

			[Token(Token = "0x4000EAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public static Func<ITypeInspector, ITypeResolver, IEnumerable<IYamlTypeConverter>, IObjectGraphTraversalStrategy> <>9__15_0;

			[Token(Token = "0x4000EAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public static Func<IEventEmitter, TypeAssigningEventEmitter> <>9__15_1;

			[Token(Token = "0x4000EAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public static Action<IRegistrationLocationSelectionSyntax<IEventEmitter>> <>9__15_2;

			[Token(Token = "0x4000EAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public static Func<ITypeInspector, ReadableAndWritablePropertiesTypeInspector> <>9__15_3;

			[Token(Token = "0x4000EAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public static Action<IRegistrationLocationSelectionSyntax<ITypeInspector>> <>9__15_4;

			[Token(Token = "0x4000EAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public static Action<IRegistrationLocationSelectionSyntax<IYamlTypeConverter>> <>9__18_0;

			[Token(Token = "0x4000EB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public static Func<IEventEmitter, JsonEventEmitter> <>9__18_1;

			[Token(Token = "0x4000EB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public static Action<IRegistrationLocationSelectionSyntax<IEventEmitter>> <>9__18_2;

			[Token(Token = "0x6001503")]
			[Address(RVA = "0x1EAC2C8", Offset = "0x1EAC2C8", VA = "0x1EAC2C8")]
			public <>c()
			{
			}

			[Token(Token = "0x6001504")]
			[Address(RVA = "0x1EAC2D0", Offset = "0x1EAC2D0", VA = "0x1EAC2D0")]
			internal ITypeInspector <.ctor>b__5_0(ITypeInspector inner)
			{
				return null;
			}

			[Token(Token = "0x6001505")]
			[Address(RVA = "0x1EAC330", Offset = "0x1EAC330", VA = "0x1EAC330")]
			internal ITypeInspector <.ctor>b__5_2(ITypeInspector inner)
			{
				return null;
			}

			[Token(Token = "0x6001506")]
			[Address(RVA = "0x1EAC390", Offset = "0x1EAC390", VA = "0x1EAC390")]
			internal IObjectGraphVisitor<Nothing> <.ctor>b__5_4(IEnumerable<IYamlTypeConverter> typeConverters)
			{
				return null;
			}

			[Token(Token = "0x6001507")]
			[Address(RVA = "0x1EAC3F0", Offset = "0x1EAC3F0", VA = "0x1EAC3F0")]
			internal IObjectGraphVisitor<IEmitter> <.ctor>b__5_5(EmissionPhaseObjectGraphVisitorArgs args)
			{
				return null;
			}

			[Token(Token = "0x6001508")]
			[Address(RVA = "0x1EAC470", Offset = "0x1EAC470", VA = "0x1EAC470")]
			internal IObjectGraphVisitor<IEmitter> <.ctor>b__5_6(EmissionPhaseObjectGraphVisitorArgs args)
			{
				return null;
			}

			[Token(Token = "0x6001509")]
			[Address(RVA = "0x1EAC514", Offset = "0x1EAC514", VA = "0x1EAC514")]
			internal IObjectGraphVisitor<IEmitter> <.ctor>b__5_7(EmissionPhaseObjectGraphVisitorArgs args)
			{
				return null;
			}

			[Token(Token = "0x600150A")]
			[Address(RVA = "0x1EAC580", Offset = "0x1EAC580", VA = "0x1EAC580")]
			internal IEventEmitter <.ctor>b__5_8(IEventEmitter inner)
			{
				return null;
			}

			[Token(Token = "0x600150B")]
			[Address(RVA = "0x1EAC5E4", Offset = "0x1EAC5E4", VA = "0x1EAC5E4")]
			internal IObjectGraphTraversalStrategy <EnsureRoundtrip>b__15_0(ITypeInspector typeInspector, ITypeResolver typeResolver, IEnumerable<IYamlTypeConverter> typeConverters)
			{
				return null;
			}

			[Token(Token = "0x600150C")]
			[Address(RVA = "0x1EAC660", Offset = "0x1EAC660", VA = "0x1EAC660")]
			internal TypeAssigningEventEmitter <EnsureRoundtrip>b__15_1(IEventEmitter inner)
			{
				return null;
			}

			[Token(Token = "0x600150D")]
			[Address(RVA = "0x1EAC6C4", Offset = "0x1EAC6C4", VA = "0x1EAC6C4")]
			internal void <EnsureRoundtrip>b__15_2(IRegistrationLocationSelectionSyntax<IEventEmitter> loc)
			{
			}

			[Token(Token = "0x600150E")]
			[Address(RVA = "0x1EAC784", Offset = "0x1EAC784", VA = "0x1EAC784")]
			internal ReadableAndWritablePropertiesTypeInspector <EnsureRoundtrip>b__15_3(ITypeInspector inner)
			{
				return null;
			}

			[Token(Token = "0x600150F")]
			[Address(RVA = "0x1EAC7E4", Offset = "0x1EAC7E4", VA = "0x1EAC7E4")]
			internal void <EnsureRoundtrip>b__15_4(IRegistrationLocationSelectionSyntax<ITypeInspector> loc)
			{
			}

			[Token(Token = "0x6001510")]
			[Address(RVA = "0x1EAC890", Offset = "0x1EAC890", VA = "0x1EAC890")]
			internal void <JsonCompatible>b__18_0(IRegistrationLocationSelectionSyntax<IYamlTypeConverter> w)
			{
			}

			[Token(Token = "0x6001511")]
			[Address(RVA = "0x1EAC950", Offset = "0x1EAC950", VA = "0x1EAC950")]
			internal JsonEventEmitter <JsonCompatible>b__18_1(IEventEmitter inner)
			{
				return null;
			}

			[Token(Token = "0x6001512")]
			[Address(RVA = "0x1EAC9B0", Offset = "0x1EAC9B0", VA = "0x1EAC9B0")]
			internal void <JsonCompatible>b__18_2(IRegistrationLocationSelectionSyntax<IEventEmitter> loc)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000323")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E5EC", Offset = "0xA7E5EC")]
		private sealed class <>c__8<TEventEmitter> where TEventEmitter : IEventEmitter
		{
			[Token(Token = "0x4000EB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__8<TEventEmitter> <>9;

			[Token(Token = "0x4000EB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Action<IRegistrationLocationSelectionSyntax<IEventEmitter>> <>9__8_0;

			[Token(Token = "0x6001514")]
			public <>c__8()
			{
			}

			[Token(Token = "0x6001515")]
			internal void <WithEventEmitter>b__8_0(IRegistrationLocationSelectionSyntax<IEventEmitter> w)
			{
			}
		}

		[Token(Token = "0x2000324")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E5FC", Offset = "0xA7E5FC")]
		private sealed class <>c__DisplayClass9_0<TEventEmitter> where TEventEmitter : IEventEmitter
		{
			[Token(Token = "0x4000EB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Func<IEventEmitter, TEventEmitter> eventEmitterFactory;

			[Token(Token = "0x6001516")]
			public <>c__DisplayClass9_0()
			{
			}

			[Token(Token = "0x6001517")]
			internal IEventEmitter <WithEventEmitter>b__0(IEventEmitter inner)
			{
				return null;
			}
		}

		[Token(Token = "0x2000325")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E60C", Offset = "0xA7E60C")]
		private sealed class <>c__DisplayClass10_0<TEventEmitter> where TEventEmitter : IEventEmitter
		{
			[Token(Token = "0x4000EB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public WrapperFactory<IEventEmitter, IEventEmitter, TEventEmitter> eventEmitterFactory;

			[Token(Token = "0x6001518")]
			public <>c__DisplayClass10_0()
			{
			}

			[Token(Token = "0x6001519")]
			internal IEventEmitter <WithEventEmitter>b__0(IEventEmitter wrapped, IEventEmitter inner)
			{
				return null;
			}
		}

		[Serializable]
		[Token(Token = "0x2000326")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E61C", Offset = "0xA7E61C")]
		private sealed class <>c__19<TObjectGraphVisitor> where TObjectGraphVisitor : IObjectGraphVisitor<Nothing>
		{
			[Token(Token = "0x4000EB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__19<TObjectGraphVisitor> <>9;

			[Token(Token = "0x4000EB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Action<IRegistrationLocationSelectionSyntax<IObjectGraphVisitor<Nothing>>> <>9__19_0;

			[Token(Token = "0x600151B")]
			public <>c__19()
			{
			}

			[Token(Token = "0x600151C")]
			internal void <WithPreProcessingPhaseObjectGraphVisitor>b__19_0(IRegistrationLocationSelectionSyntax<IObjectGraphVisitor<Nothing>> w)
			{
			}
		}

		[Token(Token = "0x2000327")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E62C", Offset = "0xA7E62C")]
		private sealed class <>c__DisplayClass20_0<TObjectGraphVisitor> where TObjectGraphVisitor : IObjectGraphVisitor<Nothing>
		{
			[Token(Token = "0x4000EB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public TObjectGraphVisitor objectGraphVisitor;

			[Token(Token = "0x600151D")]
			public <>c__DisplayClass20_0()
			{
			}

			[Token(Token = "0x600151E")]
			internal IObjectGraphVisitor<Nothing> <WithPreProcessingPhaseObjectGraphVisitor>b__0(IEnumerable<IYamlTypeConverter> _)
			{
				return null;
			}
		}

		[Token(Token = "0x2000328")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E63C", Offset = "0xA7E63C")]
		private sealed class <>c__DisplayClass21_0<TObjectGraphVisitor> where TObjectGraphVisitor : IObjectGraphVisitor<Nothing>
		{
			[Token(Token = "0x4000EB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public WrapperFactory<IObjectGraphVisitor<Nothing>, TObjectGraphVisitor> objectGraphVisitorFactory;

			[Token(Token = "0x600151F")]
			public <>c__DisplayClass21_0()
			{
			}

			[Token(Token = "0x6001520")]
			internal IObjectGraphVisitor<Nothing> <WithPreProcessingPhaseObjectGraphVisitor>b__0(IObjectGraphVisitor<Nothing> wrapped, IEnumerable<IYamlTypeConverter> _)
			{
				return null;
			}
		}

		[Serializable]
		[Token(Token = "0x2000329")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E64C", Offset = "0xA7E64C")]
		private sealed class <>c__24<TObjectGraphVisitor> where TObjectGraphVisitor : IObjectGraphVisitor<IEmitter>
		{
			[Token(Token = "0x4000EBA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c__24<TObjectGraphVisitor> <>9;

			[Token(Token = "0x4000EBB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static Action<IRegistrationLocationSelectionSyntax<IObjectGraphVisitor<IEmitter>>> <>9__24_0;

			[Token(Token = "0x6001522")]
			public <>c__24()
			{
			}

			[Token(Token = "0x6001523")]
			internal void <WithEmissionPhaseObjectGraphVisitor>b__24_0(IRegistrationLocationSelectionSyntax<IObjectGraphVisitor<IEmitter>> w)
			{
			}
		}

		[Token(Token = "0x200032A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E65C", Offset = "0xA7E65C")]
		private sealed class <>c__DisplayClass25_0<TObjectGraphVisitor> where TObjectGraphVisitor : IObjectGraphVisitor<IEmitter>
		{
			[Token(Token = "0x4000EBC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Func<EmissionPhaseObjectGraphVisitorArgs, TObjectGraphVisitor> objectGraphVisitorFactory;

			[Token(Token = "0x6001524")]
			public <>c__DisplayClass25_0()
			{
			}

			[Token(Token = "0x6001525")]
			internal IObjectGraphVisitor<IEmitter> <WithEmissionPhaseObjectGraphVisitor>b__0(EmissionPhaseObjectGraphVisitorArgs args)
			{
				return null;
			}
		}

		[Token(Token = "0x200032B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E66C", Offset = "0xA7E66C")]
		private sealed class <>c__DisplayClass26_0<TObjectGraphVisitor> where TObjectGraphVisitor : IObjectGraphVisitor<IEmitter>
		{
			[Token(Token = "0x4000EBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public WrapperFactory<EmissionPhaseObjectGraphVisitorArgs, IObjectGraphVisitor<IEmitter>, TObjectGraphVisitor> objectGraphVisitorFactory;

			[Token(Token = "0x6001526")]
			public <>c__DisplayClass26_0()
			{
			}

			[Token(Token = "0x6001527")]
			internal IObjectGraphVisitor<IEmitter> <WithEmissionPhaseObjectGraphVisitor>b__0(IObjectGraphVisitor<IEmitter> wrapped, EmissionPhaseObjectGraphVisitorArgs args)
			{
				return null;
			}
		}

		[Token(Token = "0x40000B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Func<ITypeInspector, ITypeResolver, IEnumerable<IYamlTypeConverter>, IObjectGraphTraversalStrategy> objectGraphTraversalStrategyFactory;

		[Token(Token = "0x40000B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly LazyComponentRegistrationList<IEnumerable<IYamlTypeConverter>, IObjectGraphVisitor<Nothing>> preProcessingPhaseObjectGraphVisitorFactories;

		[Token(Token = "0x40000B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private readonly LazyComponentRegistrationList<EmissionPhaseObjectGraphVisitorArgs, IObjectGraphVisitor<IEmitter>> emissionPhaseObjectGraphVisitorFactories;

		[Token(Token = "0x40000B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private readonly LazyComponentRegistrationList<IEventEmitter, IEventEmitter> eventEmitterFactories;

		[Token(Token = "0x40000B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private readonly IDictionary<Type, string> tagMappings;

		[Token(Token = "0x1700002D")]
		protected override SerializerBuilder Self
		{
			[Token(Token = "0x60001C6")]
			[Address(RVA = "0x162EE88", Offset = "0x162EE88", VA = "0x162EE88", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001C5")]
		[Address(RVA = "0x162E2EC", Offset = "0x162E2EC", VA = "0x162E2EC")]
		public SerializerBuilder()
		{
		}

		[Token(Token = "0x60001C7")]
		public SerializerBuilder WithEventEmitter<TEventEmitter>(Func<IEventEmitter, TEventEmitter> eventEmitterFactory) where TEventEmitter : IEventEmitter
		{
			return null;
		}

		[Token(Token = "0x60001C8")]
		public SerializerBuilder WithEventEmitter<TEventEmitter>(Func<IEventEmitter, TEventEmitter> eventEmitterFactory, Action<IRegistrationLocationSelectionSyntax<IEventEmitter>> where) where TEventEmitter : IEventEmitter
		{
			return null;
		}

		[Token(Token = "0x60001C9")]
		public SerializerBuilder WithEventEmitter<TEventEmitter>(WrapperFactory<IEventEmitter, IEventEmitter, TEventEmitter> eventEmitterFactory, Action<ITrackingRegistrationLocationSelectionSyntax<IEventEmitter>> where) where TEventEmitter : IEventEmitter
		{
			return null;
		}

		[Token(Token = "0x60001CA")]
		public SerializerBuilder WithoutEventEmitter<TEventEmitter>() where TEventEmitter : IEventEmitter
		{
			return null;
		}

		[Token(Token = "0x60001CB")]
		[Address(RVA = "0x162EE8C", Offset = "0x162EE8C", VA = "0x162EE8C")]
		public SerializerBuilder WithoutEventEmitter(Type eventEmitterType)
		{
			return null;
		}

		[Token(Token = "0x60001CC")]
		[Address(RVA = "0x162EF80", Offset = "0x162EF80", VA = "0x162EF80")]
		public SerializerBuilder WithTagMapping(string tag, Type type)
		{
			return null;
		}

		[Token(Token = "0x60001CD")]
		[Address(RVA = "0x162F210", Offset = "0x162F210", VA = "0x162F210")]
		public SerializerBuilder WithoutTagMapping(Type type)
		{
			return null;
		}

		[Token(Token = "0x60001CE")]
		[Address(RVA = "0x162F3D8", Offset = "0x162F3D8", VA = "0x162F3D8")]
		public SerializerBuilder EnsureRoundtrip()
		{
			return null;
		}

		[Token(Token = "0x60001CF")]
		[Address(RVA = "0x162F814", Offset = "0x162F814", VA = "0x162F814")]
		public SerializerBuilder DisableAliases()
		{
			return null;
		}

		[Token(Token = "0x60001D0")]
		[Address(RVA = "0x162F91C", Offset = "0x162F91C", VA = "0x162F91C")]
		public SerializerBuilder EmitDefaults()
		{
			return null;
		}

		[Token(Token = "0x60001D1")]
		[Address(RVA = "0x162F9D8", Offset = "0x162F9D8", VA = "0x162F9D8")]
		public SerializerBuilder JsonCompatible()
		{
			return null;
		}

		[Token(Token = "0x60001D2")]
		public SerializerBuilder WithPreProcessingPhaseObjectGraphVisitor<TObjectGraphVisitor>(TObjectGraphVisitor objectGraphVisitor) where TObjectGraphVisitor : IObjectGraphVisitor<Nothing>
		{
			return null;
		}

		[Token(Token = "0x60001D3")]
		public SerializerBuilder WithPreProcessingPhaseObjectGraphVisitor<TObjectGraphVisitor>(TObjectGraphVisitor objectGraphVisitor, Action<IRegistrationLocationSelectionSyntax<IObjectGraphVisitor<Nothing>>> where) where TObjectGraphVisitor : IObjectGraphVisitor<Nothing>
		{
			return null;
		}

		[Token(Token = "0x60001D4")]
		public SerializerBuilder WithPreProcessingPhaseObjectGraphVisitor<TObjectGraphVisitor>(WrapperFactory<IObjectGraphVisitor<Nothing>, TObjectGraphVisitor> objectGraphVisitorFactory, Action<ITrackingRegistrationLocationSelectionSyntax<IObjectGraphVisitor<Nothing>>> where) where TObjectGraphVisitor : IObjectGraphVisitor<Nothing>
		{
			return null;
		}

		[Token(Token = "0x60001D5")]
		public SerializerBuilder WithoutPreProcessingPhaseObjectGraphVisitor<TObjectGraphVisitor>() where TObjectGraphVisitor : IObjectGraphVisitor<Nothing>
		{
			return null;
		}

		[Token(Token = "0x60001D6")]
		[Address(RVA = "0x162FCE0", Offset = "0x162FCE0", VA = "0x162FCE0")]
		public SerializerBuilder WithoutPreProcessingPhaseObjectGraphVisitor(Type objectGraphVisitorType)
		{
			return null;
		}

		[Token(Token = "0x60001D7")]
		public SerializerBuilder WithEmissionPhaseObjectGraphVisitor<TObjectGraphVisitor>(Func<EmissionPhaseObjectGraphVisitorArgs, TObjectGraphVisitor> objectGraphVisitorFactory) where TObjectGraphVisitor : IObjectGraphVisitor<IEmitter>
		{
			return null;
		}

		[Token(Token = "0x60001D8")]
		public SerializerBuilder WithEmissionPhaseObjectGraphVisitor<TObjectGraphVisitor>(Func<EmissionPhaseObjectGraphVisitorArgs, TObjectGraphVisitor> objectGraphVisitorFactory, Action<IRegistrationLocationSelectionSyntax<IObjectGraphVisitor<IEmitter>>> where) where TObjectGraphVisitor : IObjectGraphVisitor<IEmitter>
		{
			return null;
		}

		[Token(Token = "0x60001D9")]
		public SerializerBuilder WithEmissionPhaseObjectGraphVisitor<TObjectGraphVisitor>(WrapperFactory<EmissionPhaseObjectGraphVisitorArgs, IObjectGraphVisitor<IEmitter>, TObjectGraphVisitor> objectGraphVisitorFactory, Action<ITrackingRegistrationLocationSelectionSyntax<IObjectGraphVisitor<IEmitter>>> where) where TObjectGraphVisitor : IObjectGraphVisitor<IEmitter>
		{
			return null;
		}

		[Token(Token = "0x60001DA")]
		public SerializerBuilder WithoutEmissionPhaseObjectGraphVisitor<TObjectGraphVisitor>() where TObjectGraphVisitor : IObjectGraphVisitor<IEmitter>
		{
			return null;
		}

		[Token(Token = "0x60001DB")]
		[Address(RVA = "0x162FDD4", Offset = "0x162FDD4", VA = "0x162FDD4")]
		public SerializerBuilder WithoutEmissionPhaseObjectGraphVisitor(Type objectGraphVisitorType)
		{
			return null;
		}

		[Token(Token = "0x60001DC")]
		[Address(RVA = "0x162FEC8", Offset = "0x162FEC8", VA = "0x162FEC8")]
		public Serializer Build()
		{
			return null;
		}

		[Token(Token = "0x60001DD")]
		[Address(RVA = "0x162FEDC", Offset = "0x162FEDC", VA = "0x162FEDC")]
		public IValueSerializer BuildValueSerializer()
		{
			return null;
		}

		[Token(Token = "0x60001DE")]
		[Address(RVA = "0x1630090", Offset = "0x1630090", VA = "0x1630090")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89C9C", Offset = "0xA89C9C")]
		private ITypeInspector <.ctor>b__5_1(ITypeInspector inner)
		{
			return null;
		}

		[Token(Token = "0x60001DF")]
		[Address(RVA = "0x163010C", Offset = "0x163010C", VA = "0x163010C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89CAC", Offset = "0xA89CAC")]
		private ITypeInspector <.ctor>b__5_3(ITypeInspector inner)
		{
			return null;
		}

		[Token(Token = "0x60001E0")]
		[Address(RVA = "0x1630198", Offset = "0x1630198", VA = "0x1630198")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89CBC", Offset = "0xA89CBC")]
		private IObjectGraphTraversalStrategy <.ctor>b__5_9(ITypeInspector typeInspector, ITypeResolver typeResolver, IEnumerable<IYamlTypeConverter> typeConverters)
		{
			return null;
		}

		[Token(Token = "0x60001E1")]
		[Address(RVA = "0x1630244", Offset = "0x1630244", VA = "0x1630244")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89CCC", Offset = "0xA89CCC")]
		private CustomTagEventEmitter <.ctor>b__5_10(IEventEmitter inner)
		{
			return null;
		}
	}
	[Token(Token = "0x2000049")]
	public sealed class StreamFragment : IYamlConvertible
	{
		[Token(Token = "0x40000B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly List<ParsingEvent> events;

		[Token(Token = "0x1700002E")]
		public IList<ParsingEvent> Events
		{
			[Token(Token = "0x60001E2")]
			[Address(RVA = "0x16513E0", Offset = "0x16513E0", VA = "0x16513E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001E3")]
		[Address(RVA = "0x16513E8", Offset = "0x16513E8", VA = "0x16513E8", Slot = "4")]
		private void YamlDotNet.Serialization.IYamlConvertible.Read(IParser parser, Type expectedType, ObjectDeserializer nestedObjectDeserializer)
		{
		}

		[Token(Token = "0x60001E4")]
		[Address(RVA = "0x1651628", Offset = "0x1651628", VA = "0x1651628", Slot = "5")]
		private void YamlDotNet.Serialization.IYamlConvertible.Write(IEmitter emitter, ObjectSerializer nestedObjectSerializer)
		{
		}

		[Token(Token = "0x60001E5")]
		[Address(RVA = "0x16517BC", Offset = "0x16517BC", VA = "0x16517BC")]
		public StreamFragment()
		{
		}
	}
	[Token(Token = "0x200004A")]
	public sealed class TagMappings
	{
		[Token(Token = "0x40000B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IDictionary<string, Type> mappings;

		[Token(Token = "0x60001E6")]
		[Address(RVA = "0x16529A4", Offset = "0x16529A4", VA = "0x16529A4")]
		public TagMappings()
		{
		}

		[Token(Token = "0x60001E7")]
		[Address(RVA = "0x1652A28", Offset = "0x1652A28", VA = "0x1652A28")]
		public TagMappings(IDictionary<string, Type> mappings)
		{
		}

		[Token(Token = "0x60001E8")]
		[Address(RVA = "0x1652ABC", Offset = "0x1652ABC", VA = "0x1652ABC")]
		public void Add(string tag, Type mapping)
		{
		}

		[Token(Token = "0x60001E9")]
		[Address(RVA = "0x1652B84", Offset = "0x1652B84", VA = "0x1652B84")]
		internal Type GetMapping(string tag)
		{
			return null;
		}
	}
	[Token(Token = "0x200004B")]
	public sealed class YamlAttributeOverrides
	{
		[Token(Token = "0x200032C")]
		private struct AttributeKey
		{
			[Token(Token = "0x4000EBE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public readonly Type AttributeType;

			[Token(Token = "0x4000EBF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public readonly string PropertyName;

			[Token(Token = "0x6001528")]
			[Address(RVA = "0x1EB0134", Offset = "0x1EB0134", VA = "0x1EB0134")]
			public AttributeKey(Type attributeType, string propertyName)
			{
			}

			[Token(Token = "0x6001529")]
			[Address(RVA = "0x1EB0168", Offset = "0x1EB0168", VA = "0x1EB0168", Slot = "0")]
			public override bool Equals(object obj)
			{
				return default(bool);
			}

			[Token(Token = "0x600152A")]
			[Address(RVA = "0x1EB022C", Offset = "0x1EB022C", VA = "0x1EB022C", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}
		}

		[Token(Token = "0x200032D")]
		private sealed class AttributeMapping
		{
			[Token(Token = "0x4000EC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public readonly Type RegisteredType;

			[Token(Token = "0x4000EC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public readonly Attribute Attribute;

			[Token(Token = "0x600152B")]
			[Address(RVA = "0x1EB0288", Offset = "0x1EB0288", VA = "0x1EB0288")]
			public AttributeMapping(Type registeredType, Attribute attribute)
			{
			}

			[Token(Token = "0x600152C")]
			[Address(RVA = "0x1EB02D8", Offset = "0x1EB02D8", VA = "0x1EB02D8", Slot = "0")]
			public override bool Equals(object obj)
			{
				return default(bool);
			}

			[Token(Token = "0x600152D")]
			[Address(RVA = "0x1EB0390", Offset = "0x1EB0390", VA = "0x1EB0390", Slot = "2")]
			public override int GetHashCode()
			{
				return default(int);
			}

			[Token(Token = "0x600152E")]
			[Address(RVA = "0x1EB03EC", Offset = "0x1EB03EC", VA = "0x1EB03EC")]
			public int Matches(Type matchType)
			{
				return default(int);
			}
		}

		[Token(Token = "0x40000B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Dictionary<AttributeKey, List<AttributeMapping>> overrides;

		[Token(Token = "0x60001EA")]
		public T GetAttribute<T>(Type type, string member) where T : Attribute
		{
			return null;
		}

		[Token(Token = "0x60001EB")]
		[Address(RVA = "0x1A74BF4", Offset = "0x1A74BF4", VA = "0x1A74BF4")]
		public void Add(Type type, string member, Attribute attribute)
		{
		}

		[Token(Token = "0x60001EC")]
		public void Add<TClass>(Expression<Func<TClass, object>> propertyAccessor, Attribute attribute)
		{
		}

		[Token(Token = "0x60001ED")]
		[Address(RVA = "0x1A74E60", Offset = "0x1A74E60", VA = "0x1A74E60")]
		public YamlAttributeOverrides Clone()
		{
			return null;
		}

		[Token(Token = "0x60001EE")]
		[Address(RVA = "0x1A75170", Offset = "0x1A75170", VA = "0x1A75170")]
		public YamlAttributeOverrides()
		{
		}
	}
	[Token(Token = "0x200004C")]
	public sealed class YamlAttributeOverridesInspector : TypeInspectorSkeleton
	{
		[Token(Token = "0x200032E")]
		public sealed class OverridePropertyDescriptor : IPropertyDescriptor
		{
			[Token(Token = "0x4000EC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly IPropertyDescriptor baseDescriptor;

			[Token(Token = "0x4000EC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly YamlAttributeOverrides overrides;

			[Token(Token = "0x4000EC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private readonly Type classType;

			[Token(Token = "0x17000161")]
			public string Name
			{
				[Token(Token = "0x6001530")]
				[Address(RVA = "0x1EB0630", Offset = "0x1EB0630", VA = "0x1EB0630", Slot = "4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000162")]
			public bool CanWrite
			{
				[Token(Token = "0x6001531")]
				[Address(RVA = "0x1EB06DC", Offset = "0x1EB06DC", VA = "0x1EB06DC", Slot = "5")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000163")]
			public Type Type
			{
				[Token(Token = "0x6001532")]
				[Address(RVA = "0x1EB078C", Offset = "0x1EB078C", VA = "0x1EB078C", Slot = "6")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000164")]
			public Type TypeOverride
			{
				[Token(Token = "0x6001533")]
				[Address(RVA = "0x1EB083C", Offset = "0x1EB083C", VA = "0x1EB083C", Slot = "7")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001534")]
				[Address(RVA = "0x1EB08EC", Offset = "0x1EB08EC", VA = "0x1EB08EC", Slot = "8")]
				set
				{
				}
			}

			[Token(Token = "0x17000165")]
			public int Order
			{
				[Token(Token = "0x6001535")]
				[Address(RVA = "0x1EB09AC", Offset = "0x1EB09AC", VA = "0x1EB09AC", Slot = "9")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6001536")]
				[Address(RVA = "0x1EB0A5C", Offset = "0x1EB0A5C", VA = "0x1EB0A5C", Slot = "10")]
				set
				{
				}
			}

			[Token(Token = "0x17000166")]
			public ScalarStyle ScalarStyle
			{
				[Token(Token = "0x6001537")]
				[Address(RVA = "0x1EB0B1C", Offset = "0x1EB0B1C", VA = "0x1EB0B1C", Slot = "11")]
				get
				{
					return default(ScalarStyle);
				}
				[Token(Token = "0x6001538")]
				[Address(RVA = "0x1EB0BCC", Offset = "0x1EB0BCC", VA = "0x1EB0BCC", Slot = "12")]
				set
				{
				}
			}

			[Token(Token = "0x600152F")]
			[Address(RVA = "0x1EB05CC", Offset = "0x1EB05CC", VA = "0x1EB05CC")]
			public OverridePropertyDescriptor(IPropertyDescriptor baseDescriptor, YamlAttributeOverrides overrides, Type classType)
			{
			}

			[Token(Token = "0x6001539")]
			[Address(RVA = "0x1EB0C8C", Offset = "0x1EB0C8C", VA = "0x1EB0C8C", Slot = "15")]
			public void Write(object target, object value)
			{
			}

			[Token(Token = "0x600153A")]
			public T GetCustomAttribute<T>() where T : Attribute
			{
				return null;
			}

			[Token(Token = "0x600153B")]
			[Address(RVA = "0x1EB0D54", Offset = "0x1EB0D54", VA = "0x1EB0D54", Slot = "14")]
			public IObjectDescriptor Read(object target)
			{
				return null;
			}
		}

		[Token(Token = "0x200032F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E67C", Offset = "0xA7E67C")]
		private sealed class <>c__DisplayClass3_0
		{
			[Token(Token = "0x4000EC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public YamlAttributeOverridesInspector <>4__this;

			[Token(Token = "0x4000EC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Type type;

			[Token(Token = "0x600153C")]
			[Address(RVA = "0x1EB0540", Offset = "0x1EB0540", VA = "0x1EB0540")]
			public <>c__DisplayClass3_0()
			{
			}

			[Token(Token = "0x600153D")]
			[Address(RVA = "0x1EB0548", Offset = "0x1EB0548", VA = "0x1EB0548")]
			internal IPropertyDescriptor <GetProperties>b__0(IPropertyDescriptor p)
			{
				return null;
			}
		}

		[Token(Token = "0x40000BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ITypeInspector innerTypeDescriptor;

		[Token(Token = "0x40000BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly YamlAttributeOverrides overrides;

		[Token(Token = "0x60001EF")]
		[Address(RVA = "0x1A751F4", Offset = "0x1A751F4", VA = "0x1A751F4")]
		public YamlAttributeOverridesInspector(ITypeInspector innerTypeDescriptor, YamlAttributeOverrides overrides)
		{
		}

		[Token(Token = "0x60001F0")]
		[Address(RVA = "0x1A75244", Offset = "0x1A75244", VA = "0x1A75244", Slot = "6")]
		public override IEnumerable<IPropertyDescriptor> GetProperties(Type type, object container)
		{
			return null;
		}
	}
	[Token(Token = "0x200004D")]
	public sealed class YamlAttributesTypeInspector : TypeInspectorSkeleton
	{
		[Serializable]
		[Token(Token = "0x2000330")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E68C", Offset = "0xA7E68C")]
		private sealed class <>c
		{
			[Token(Token = "0x4000EC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000EC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<IPropertyDescriptor, bool> <>9__2_0;

			[Token(Token = "0x4000EC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static Func<IPropertyDescriptor, IPropertyDescriptor> <>9__2_1;

			[Token(Token = "0x4000ECA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static Func<IPropertyDescriptor, int> <>9__2_2;

			[Token(Token = "0x600153F")]
			[Address(RVA = "0x1EB0E78", Offset = "0x1EB0E78", VA = "0x1EB0E78")]
			public <>c()
			{
			}

			[Token(Token = "0x6001540")]
			[Address(RVA = "0x1EB0E80", Offset = "0x1EB0E80", VA = "0x1EB0E80")]
			internal bool <GetProperties>b__2_0(IPropertyDescriptor p)
			{
				return default(bool);
			}

			[Token(Token = "0x6001541")]
			[Address(RVA = "0x1EB0F4C", Offset = "0x1EB0F4C", VA = "0x1EB0F4C")]
			internal IPropertyDescriptor <GetProperties>b__2_1(IPropertyDescriptor p)
			{
				return null;
			}

			[Token(Token = "0x6001542")]
			[Address(RVA = "0x1EB10DC", Offset = "0x1EB10DC", VA = "0x1EB10DC")]
			internal int <GetProperties>b__2_2(IPropertyDescriptor p)
			{
				return default(int);
			}
		}

		[Token(Token = "0x40000BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ITypeInspector innerTypeDescriptor;

		[Token(Token = "0x60001F1")]
		[Address(RVA = "0x1A75404", Offset = "0x1A75404", VA = "0x1A75404")]
		public YamlAttributesTypeInspector(ITypeInspector innerTypeDescriptor)
		{
		}

		[Token(Token = "0x60001F2")]
		[Address(RVA = "0x1A75438", Offset = "0x1A75438", VA = "0x1A75438", Slot = "6")]
		public override IEnumerable<IPropertyDescriptor> GetProperties(Type type, object container)
		{
			return null;
		}
	}
	[Token(Token = "0x200004E")]
	internal static class YamlFormatter
	{
		[Token(Token = "0x40000BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly NumberFormatInfo NumberFormat;

		[Token(Token = "0x60001F3")]
		[Address(RVA = "0x1A69ABC", Offset = "0x1A69ABC", VA = "0x1A69ABC")]
		public static string FormatNumber(object number)
		{
			return null;
		}

		[Token(Token = "0x60001F4")]
		[Address(RVA = "0x1A69BEC", Offset = "0x1A69BEC", VA = "0x1A69BEC")]
		public static string FormatNumber(double number)
		{
			return null;
		}

		[Token(Token = "0x60001F5")]
		[Address(RVA = "0x1A69B60", Offset = "0x1A69B60", VA = "0x1A69B60")]
		public static string FormatNumber(float number)
		{
			return null;
		}

		[Token(Token = "0x60001F6")]
		[Address(RVA = "0x1A69A0C", Offset = "0x1A69A0C", VA = "0x1A69A0C")]
		public static string FormatBoolean(object boolean)
		{
			return null;
		}

		[Token(Token = "0x60001F7")]
		[Address(RVA = "0x1A69C78", Offset = "0x1A69C78", VA = "0x1A69C78")]
		public static string FormatDateTime(object dateTime)
		{
			return null;
		}

		[Token(Token = "0x60001F8")]
		[Address(RVA = "0x1A69D58", Offset = "0x1A69D58", VA = "0x1A69D58")]
		public static string FormatTimeSpan(object timeSpan)
		{
			return null;
		}
	}
	[Token(Token = "0x200004F")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xA7C8C8", Offset = "0xA7C8C8")]
	public sealed class YamlIgnoreAttribute : Attribute
	{
		[Token(Token = "0x60001FA")]
		[Address(RVA = "0x1A76974", Offset = "0x1A76974", VA = "0x1A76974")]
		public YamlIgnoreAttribute()
		{
		}
	}
	[Token(Token = "0x2000050")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xA7C8FC", Offset = "0xA7C8FC")]
	public sealed class YamlMemberAttribute : Attribute
	{
		[Token(Token = "0x40000BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F214", Offset = "0xA7F214")]
		private Type <SerializeAs>k__BackingField;

		[Token(Token = "0x40000BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F224", Offset = "0xA7F224")]
		private int <Order>k__BackingField;

		[Token(Token = "0x40000C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F234", Offset = "0xA7F234")]
		private string <Alias>k__BackingField;

		[Token(Token = "0x40000C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F244", Offset = "0xA7F244")]
		private bool <ApplyNamingConventions>k__BackingField;

		[Token(Token = "0x40000C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F254", Offset = "0xA7F254")]
		private ScalarStyle <ScalarStyle>k__BackingField;

		[Token(Token = "0x1700002F")]
		public Type SerializeAs
		{
			[Token(Token = "0x60001FB")]
			[Address(RVA = "0x1A79CEC", Offset = "0x1A79CEC", VA = "0x1A79CEC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89CDC", Offset = "0xA89CDC")]
			get
			{
				return null;
			}
			[Token(Token = "0x60001FC")]
			[Address(RVA = "0x1A79CF4", Offset = "0x1A79CF4", VA = "0x1A79CF4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89CEC", Offset = "0xA89CEC")]
			set
			{
			}
		}

		[Token(Token = "0x17000030")]
		public int Order
		{
			[Token(Token = "0x60001FD")]
			[Address(RVA = "0x1A79CFC", Offset = "0x1A79CFC", VA = "0x1A79CFC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89CFC", Offset = "0xA89CFC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60001FE")]
			[Address(RVA = "0x1A79D04", Offset = "0x1A79D04", VA = "0x1A79D04")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89D0C", Offset = "0xA89D0C")]
			set
			{
			}
		}

		[Token(Token = "0x17000031")]
		public string Alias
		{
			[Token(Token = "0x60001FF")]
			[Address(RVA = "0x1A79D0C", Offset = "0x1A79D0C", VA = "0x1A79D0C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89D1C", Offset = "0xA89D1C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000200")]
			[Address(RVA = "0x1A79D14", Offset = "0x1A79D14", VA = "0x1A79D14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89D2C", Offset = "0xA89D2C")]
			set
			{
			}
		}

		[Token(Token = "0x17000032")]
		public bool ApplyNamingConventions
		{
			[Token(Token = "0x6000201")]
			[Address(RVA = "0x1A79D1C", Offset = "0x1A79D1C", VA = "0x1A79D1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89D3C", Offset = "0xA89D3C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000202")]
			[Address(RVA = "0x1A79D24", Offset = "0x1A79D24", VA = "0x1A79D24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89D4C", Offset = "0xA89D4C")]
			set
			{
			}
		}

		[Token(Token = "0x17000033")]
		public ScalarStyle ScalarStyle
		{
			[Token(Token = "0x6000203")]
			[Address(RVA = "0x1A79D30", Offset = "0x1A79D30", VA = "0x1A79D30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89D5C", Offset = "0xA89D5C")]
			get
			{
				return default(ScalarStyle);
			}
			[Token(Token = "0x6000204")]
			[Address(RVA = "0x1A79D38", Offset = "0x1A79D38", VA = "0x1A79D38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89D6C", Offset = "0xA89D6C")]
			set
			{
			}
		}

		[Token(Token = "0x6000205")]
		[Address(RVA = "0x1A79D40", Offset = "0x1A79D40", VA = "0x1A79D40")]
		public YamlMemberAttribute()
		{
		}

		[Token(Token = "0x6000206")]
		[Address(RVA = "0x1A79D70", Offset = "0x1A79D70", VA = "0x1A79D70")]
		public YamlMemberAttribute(Type serializeAs)
		{
		}
	}
}
namespace YamlDotNet.Serialization.ValueDeserializers
{
	[Token(Token = "0x2000051")]
	public sealed class AliasValueDeserializer : IValueDeserializer
	{
		[Token(Token = "0x2000331")]
		private sealed class AliasState : Dictionary<string, ValuePromise>, IPostDeserializationCallback
		{
			[Token(Token = "0x6001543")]
			[Address(RVA = "0x1A7F688", Offset = "0x1A7F688", VA = "0x1A7F688", Slot = "41")]
			public void OnDeserialization()
			{
			}

			[Token(Token = "0x6001544")]
			[Address(RVA = "0x1A7F848", Offset = "0x1A7F848", VA = "0x1A7F848")]
			public AliasState()
			{
			}
		}

		[Token(Token = "0x2000332")]
		private sealed class ValuePromise : IValuePromise
		{
			[Token(Token = "0x4000ECC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA843D0", Offset = "0xA843D0")]
			private bool <HasValue>k__BackingField;

			[Token(Token = "0x4000ECD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private object value;

			[Token(Token = "0x4000ECE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public readonly YamlDotNet.Core.Events.AnchorAlias Alias;

			[Token(Token = "0x17000167")]
			public bool HasValue
			{
				[Token(Token = "0x6001547")]
				[Address(RVA = "0x1A7F9D4", Offset = "0x1A7F9D4", VA = "0x1A7F9D4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D06C", Offset = "0xA8D06C")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001548")]
				[Address(RVA = "0x1A7F9DC", Offset = "0x1A7F9DC", VA = "0x1A7F9DC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D07C", Offset = "0xA8D07C")]
				private set
				{
				}
			}

			[Token(Token = "0x17000168")]
			public object Value
			{
				[Token(Token = "0x600154B")]
				[Address(RVA = "0x1A7FA58", Offset = "0x1A7FA58", VA = "0x1A7FA58")]
				get
				{
					return null;
				}
				[Token(Token = "0x600154C")]
				[Address(RVA = "0x1A7FABC", Offset = "0x1A7FABC", VA = "0x1A7FABC")]
				set
				{
				}
			}

			[Token(Token = "0x14000004")]
			public event Action<object> ValueAvailable
			{
				[Token(Token = "0x6001545")]
				[Address(RVA = "0x1A7F894", Offset = "0x1A7F894", VA = "0x1A7F894", Slot = "4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D04C", Offset = "0xA8D04C")]
				add
				{
				}
				[Token(Token = "0x6001546")]
				[Address(RVA = "0x1A7F934", Offset = "0x1A7F934", VA = "0x1A7F934", Slot = "5")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D05C", Offset = "0xA8D05C")]
				remove
				{
				}
			}

			[Token(Token = "0x6001549")]
			[Address(RVA = "0x1A7F9E8", Offset = "0x1A7F9E8", VA = "0x1A7F9E8")]
			public ValuePromise(YamlDotNet.Core.Events.AnchorAlias alias)
			{
			}

			[Token(Token = "0x600154A")]
			[Address(RVA = "0x1A7FA1C", Offset = "0x1A7FA1C", VA = "0x1A7FA1C")]
			public ValuePromise(object value)
			{
			}
		}

		[Token(Token = "0x40000C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IValueDeserializer innerDeserializer;

		[Token(Token = "0x6000207")]
		[Address(RVA = "0x230F984", Offset = "0x230F984", VA = "0x230F984")]
		public AliasValueDeserializer(IValueDeserializer innerDeserializer)
		{
		}

		[Token(Token = "0x6000208")]
		[Address(RVA = "0x230FA04", Offset = "0x230FA04", VA = "0x230FA04", Slot = "4")]
		public object DeserializeValue(IParser parser, Type expectedType, SerializerState state, IValueDeserializer nestedObjectDeserializer)
		{
			return null;
		}
	}
	[Token(Token = "0x2000052")]
	public sealed class NodeValueDeserializer : IValueDeserializer
	{
		[Token(Token = "0x2000333")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E69C", Offset = "0xA7E69C")]
		private sealed class <>c__DisplayClass3_0
		{
			[Token(Token = "0x4000ECF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public IValueDeserializer nestedObjectDeserializer;

			[Token(Token = "0x4000ED0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public SerializerState state;

			[Token(Token = "0x4000ED1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Func<IParser, Type, object> <>9__0;

			[Token(Token = "0x600154D")]
			[Address(RVA = "0x1EA8D68", Offset = "0x1EA8D68", VA = "0x1EA8D68")]
			public <>c__DisplayClass3_0()
			{
			}

			[Token(Token = "0x600154E")]
			[Address(RVA = "0x1EA8D70", Offset = "0x1EA8D70", VA = "0x1EA8D70")]
			internal object <DeserializeValue>b__0(IParser r, Type t)
			{
				return null;
			}
		}

		[Token(Token = "0x40000C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IList<INodeDeserializer> deserializers;

		[Token(Token = "0x40000C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IList<INodeTypeResolver> typeResolvers;

		[Token(Token = "0x6000209")]
		[Address(RVA = "0x10B35D0", Offset = "0x10B35D0", VA = "0x10B35D0")]
		public NodeValueDeserializer(IList<INodeDeserializer> deserializers, IList<INodeTypeResolver> typeResolvers)
		{
		}

		[Token(Token = "0x600020A")]
		[Address(RVA = "0x10B3690", Offset = "0x10B3690", VA = "0x10B3690", Slot = "4")]
		public object DeserializeValue(IParser parser, Type expectedType, SerializerState state, IValueDeserializer nestedObjectDeserializer)
		{
			return null;
		}

		[Token(Token = "0x600020B")]
		[Address(RVA = "0x10B3CE0", Offset = "0x10B3CE0", VA = "0x10B3CE0")]
		private Type GetTypeFromEvent(NodeEvent nodeEvent, Type currentType)
		{
			return null;
		}
	}
}
namespace YamlDotNet.Serialization.Utilities
{
	[Token(Token = "0x2000053")]
	public interface IPostDeserializationCallback
	{
		[Token(Token = "0x600020C")]
		void OnDeserialization();
	}
	[Token(Token = "0x2000054")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xA7C930", Offset = "0xA7C930")]
	internal sealed class ObjectAnchorCollection
	{
		[Token(Token = "0x40000C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IDictionary<string, object> objectsByAnchor;

		[Token(Token = "0x40000C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IDictionary<object, string> anchorsByObject;

		[Token(Token = "0x17000034")]
		public object Item
		{
			[Token(Token = "0x600020F")]
			[Address(RVA = "0x10B458C", Offset = "0x10B458C", VA = "0x10B458C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600020D")]
		[Address(RVA = "0x10B4360", Offset = "0x10B4360", VA = "0x10B4360")]
		public void Add(string anchor, object @object)
		{
		}

		[Token(Token = "0x600020E")]
		[Address(RVA = "0x10B44C4", Offset = "0x10B44C4", VA = "0x10B44C4")]
		public bool TryGetAnchor(object @object, out string anchor)
		{
			return default(bool);
		}

		[Token(Token = "0x6000210")]
		[Address(RVA = "0x10B4700", Offset = "0x10B4700", VA = "0x10B4700")]
		public ObjectAnchorCollection()
		{
		}
	}
	[Token(Token = "0x2000055")]
	internal static class ReflectionUtility
	{
		[Token(Token = "0x2000334")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E6AC", Offset = "0xA7E6AC")]
		private sealed class <GetImplementedInterfaces>d__1 : IEnumerable<Type>, IEnumerable, IEnumerator<Type>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000ED2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000ED3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Type <>2__current;

			[Token(Token = "0x4000ED4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000ED5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Type type;

			[Token(Token = "0x4000ED6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Type <>3__type;

			[Token(Token = "0x4000ED7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Type[] <>7__wrap1;

			[Token(Token = "0x4000ED8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <>7__wrap2;

			[Token(Token = "0x17000169")]
			private Type System.Collections.Generic.IEnumerator<System.Type>.Current
			{
				[Token(Token = "0x6001552")]
				[Address(RVA = "0x1EAB160", Offset = "0x1EAB160", VA = "0x1EAB160", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700016A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001554")]
				[Address(RVA = "0x1EAB1A8", Offset = "0x1EAB1A8", VA = "0x1EAB1A8", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600154F")]
			[Address(RVA = "0x1EAAFB0", Offset = "0x1EAAFB0", VA = "0x1EAAFB0")]
			[DebuggerHidden]
			public <GetImplementedInterfaces>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x6001550")]
			[Address(RVA = "0x1EAAFE8", Offset = "0x1EAAFE8", VA = "0x1EAAFE8", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001551")]
			[Address(RVA = "0x1EAAFEC", Offset = "0x1EAAFEC", VA = "0x1EAAFEC", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001553")]
			[Address(RVA = "0x1EAB168", Offset = "0x1EAB168", VA = "0x1EAB168", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x6001555")]
			[Address(RVA = "0x1EAB1B0", Offset = "0x1EAB1B0", VA = "0x1EAB1B0", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<Type> System.Collections.Generic.IEnumerable<System.Type>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x6001556")]
			[Address(RVA = "0x1EAB260", Offset = "0x1EAB260", VA = "0x1EAB260", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x6000211")]
		[Address(RVA = "0x10C0F28", Offset = "0x10C0F28", VA = "0x10C0F28")]
		public static Type GetImplementedGenericInterface(Type type, Type genericInterfaceType)
		{
			return null;
		}

		[Token(Token = "0x6000212")]
		[Address(RVA = "0x10C12D0", Offset = "0x10C12D0", VA = "0x10C12D0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xA89D7C", Offset = "0xA89D7C")]
		public static IEnumerable<Type> GetImplementedInterfaces(Type type)
		{
			return null;
		}
	}
	[Token(Token = "0x2000056")]
	public sealed class SerializerState : IDisposable
	{
		[Token(Token = "0x40000C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IDictionary<Type, object> items;

		[Token(Token = "0x6000213")]
		public T Get<T>() where T : class, new()
		{
			return null;
		}

		[Token(Token = "0x6000214")]
		[Address(RVA = "0x16302B8", Offset = "0x16302B8", VA = "0x16302B8")]
		public void OnDeserialization()
		{
		}

		[Token(Token = "0x6000215")]
		[Address(RVA = "0x163067C", Offset = "0x163067C", VA = "0x163067C", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x6000216")]
		[Address(RVA = "0x1630A34", Offset = "0x1630A34", VA = "0x1630A34")]
		public SerializerState()
		{
		}
	}
	[Token(Token = "0x2000057")]
	internal static class StringExtensions
	{
		[Serializable]
		[Token(Token = "0x2000335")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E6BC", Offset = "0xA7E6BC")]
		private sealed class <>c
		{
			[Token(Token = "0x4000ED9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000EDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static MatchEvaluator <>9__0_0;

			[Token(Token = "0x6001558")]
			[Address(RVA = "0x1EAD244", Offset = "0x1EAD244", VA = "0x1EAD244")]
			public <>c()
			{
			}

			[Token(Token = "0x6001559")]
			[Address(RVA = "0x1EAD24C", Offset = "0x1EAD24C", VA = "0x1EAD24C")]
			internal string <ToCamelOrPascalCase>b__0_0(Match match)
			{
				return null;
			}
		}

		[Token(Token = "0x2000336")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E6CC", Offset = "0xA7E6CC")]
		private sealed class <>c__DisplayClass3_0
		{
			[Token(Token = "0x4000EDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string separator;

			[Token(Token = "0x600155A")]
			[Address(RVA = "0x1EAD2CC", Offset = "0x1EAD2CC", VA = "0x1EAD2CC")]
			public <>c__DisplayClass3_0()
			{
			}

			[Token(Token = "0x600155B")]
			[Address(RVA = "0x1EAD2D4", Offset = "0x1EAD2D4", VA = "0x1EAD2D4")]
			internal string <FromCamelCase>b__0(Match match)
			{
				return null;
			}
		}

		[Token(Token = "0x6000217")]
		[Address(RVA = "0x16519CC", Offset = "0x16519CC", VA = "0x16519CC")]
		private static string ToCamelOrPascalCase(string str, Func<char, char> firstLetterTransform)
		{
			return null;
		}

		[Token(Token = "0x6000218")]
		[Address(RVA = "0x1651BA0", Offset = "0x1651BA0", VA = "0x1651BA0")]
		public static string ToCamelCase(this string str)
		{
			return null;
		}

		[Token(Token = "0x6000219")]
		[Address(RVA = "0x1651C30", Offset = "0x1651C30", VA = "0x1651C30")]
		public static string ToPascalCase(this string str)
		{
			return null;
		}

		[Token(Token = "0x600021A")]
		[Address(RVA = "0x1651CC0", Offset = "0x1651CC0", VA = "0x1651CC0")]
		public static string FromCamelCase(this string str, string separator)
		{
			return null;
		}
	}
	[Token(Token = "0x2000058")]
	public static class TypeConverter
	{
		[Token(Token = "0x600021B")]
		public static T ChangeType<T>(object value)
		{
			return (T)null;
		}

		[Token(Token = "0x600021C")]
		public static T ChangeType<T>(object value, IFormatProvider provider)
		{
			return (T)null;
		}

		[Token(Token = "0x600021D")]
		public static T ChangeType<T>(object value, CultureInfo culture)
		{
			return (T)null;
		}

		[Token(Token = "0x600021E")]
		[Address(RVA = "0x1A6A11C", Offset = "0x1A6A11C", VA = "0x1A6A11C")]
		public static object ChangeType(object value, Type destinationType)
		{
			return null;
		}

		[Token(Token = "0x600021F")]
		[Address(RVA = "0x1A6B400", Offset = "0x1A6B400", VA = "0x1A6B400")]
		public static object ChangeType(object value, Type destinationType, IFormatProvider provider)
		{
			return null;
		}

		[Token(Token = "0x6000220")]
		[Address(RVA = "0x1A6A198", Offset = "0x1A6A198", VA = "0x1A6A198")]
		public static object ChangeType(object value, Type destinationType, CultureInfo culture)
		{
			return null;
		}
	}
}
namespace YamlDotNet.Serialization.TypeResolvers
{
	[Token(Token = "0x2000059")]
	public sealed class DynamicTypeResolver : ITypeResolver
	{
		[Token(Token = "0x6000221")]
		[Address(RVA = "0x16AAB8C", Offset = "0x16AAB8C", VA = "0x16AAB8C", Slot = "4")]
		public Type Resolve(Type staticType, object actualValue)
		{
			return null;
		}

		[Token(Token = "0x6000222")]
		[Address(RVA = "0x16AABA4", Offset = "0x16AABA4", VA = "0x16AABA4")]
		public DynamicTypeResolver()
		{
		}
	}
	[Token(Token = "0x200005A")]
	public sealed class StaticTypeResolver : ITypeResolver
	{
		[Token(Token = "0x6000223")]
		[Address(RVA = "0x1632BFC", Offset = "0x1632BFC", VA = "0x1632BFC", Slot = "4")]
		public Type Resolve(Type staticType, object actualValue)
		{
			return null;
		}

		[Token(Token = "0x6000224")]
		[Address(RVA = "0x1632C04", Offset = "0x1632C04", VA = "0x1632C04")]
		public StaticTypeResolver()
		{
		}
	}
}
namespace YamlDotNet.Serialization.TypeInspectors
{
	[Token(Token = "0x200005B")]
	public sealed class CachedTypeInspector : TypeInspectorSkeleton
	{
		[Token(Token = "0x40000C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ITypeInspector innerTypeDescriptor;

		[Token(Token = "0x40000CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Dictionary<Type, List<IPropertyDescriptor>> cache;

		[Token(Token = "0x6000225")]
		[Address(RVA = "0x2321920", Offset = "0x2321920", VA = "0x2321920")]
		public CachedTypeInspector(ITypeInspector innerTypeDescriptor)
		{
		}

		[Token(Token = "0x6000226")]
		[Address(RVA = "0x2321A0C", Offset = "0x2321A0C", VA = "0x2321A0C", Slot = "6")]
		public override IEnumerable<IPropertyDescriptor> GetProperties(Type type, object container)
		{
			return null;
		}
	}
	[Token(Token = "0x200005C")]
	public sealed class NamingConventionTypeInspector : TypeInspectorSkeleton
	{
		[Token(Token = "0x40000CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ITypeInspector innerTypeDescriptor;

		[Token(Token = "0x40000CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly INamingConvention namingConvention;

		[Token(Token = "0x6000227")]
		[Address(RVA = "0x1091848", Offset = "0x1091848", VA = "0x1091848")]
		public NamingConventionTypeInspector(ITypeInspector innerTypeDescriptor, INamingConvention namingConvention)
		{
		}

		[Token(Token = "0x6000228")]
		[Address(RVA = "0x1091908", Offset = "0x1091908", VA = "0x1091908", Slot = "6")]
		public override IEnumerable<IPropertyDescriptor> GetProperties(Type type, object container)
		{
			return null;
		}

		[Token(Token = "0x6000229")]
		[Address(RVA = "0x1091A50", Offset = "0x1091A50", VA = "0x1091A50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89E0C", Offset = "0xA89E0C")]
		private IPropertyDescriptor <GetProperties>b__3_0(IPropertyDescriptor p)
		{
			return null;
		}
	}
	[Token(Token = "0x200005D")]
	public sealed class ReadableAndWritablePropertiesTypeInspector : TypeInspectorSkeleton
	{
		[Serializable]
		[Token(Token = "0x2000337")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E6DC", Offset = "0xA7E6DC")]
		private sealed class <>c
		{
			[Token(Token = "0x4000EDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000EDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<IPropertyDescriptor, bool> <>9__2_0;

			[Token(Token = "0x600155D")]
			[Address(RVA = "0x1EAAA20", Offset = "0x1EAAA20", VA = "0x1EAAA20")]
			public <>c()
			{
			}

			[Token(Token = "0x600155E")]
			[Address(RVA = "0x1EAAA28", Offset = "0x1EAAA28", VA = "0x1EAAA28")]
			internal bool <GetProperties>b__2_0(IPropertyDescriptor p)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40000CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ITypeInspector _innerTypeDescriptor;

		[Token(Token = "0x600022A")]
		[Address(RVA = "0x10BF1C8", Offset = "0x10BF1C8", VA = "0x10BF1C8")]
		public ReadableAndWritablePropertiesTypeInspector(ITypeInspector innerTypeDescriptor)
		{
		}

		[Token(Token = "0x600022B")]
		[Address(RVA = "0x10BF1FC", Offset = "0x10BF1FC", VA = "0x10BF1FC", Slot = "6")]
		public override IEnumerable<IPropertyDescriptor> GetProperties(Type type, object container)
		{
			return null;
		}
	}
	[Token(Token = "0x200005E")]
	public sealed class ReadablePropertiesTypeInspector : TypeInspectorSkeleton
	{
		[Token(Token = "0x2000338")]
		private sealed class ReflectionPropertyDescriptor : IPropertyDescriptor
		{
			[Token(Token = "0x4000EDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly PropertyInfo _propertyInfo;

			[Token(Token = "0x4000EDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly ITypeResolver _typeResolver;

			[Token(Token = "0x4000EE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA843E0", Offset = "0xA843E0")]
			private Type <TypeOverride>k__BackingField;

			[Token(Token = "0x4000EE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA843F0", Offset = "0xA843F0")]
			private int <Order>k__BackingField;

			[Token(Token = "0x4000EE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA84400", Offset = "0xA84400")]
			private ScalarStyle <ScalarStyle>k__BackingField;

			[Token(Token = "0x1700016B")]
			public string Name
			{
				[Token(Token = "0x6001560")]
				[Address(RVA = "0x1EAAB2C", Offset = "0x1EAAB2C", VA = "0x1EAAB2C", Slot = "4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700016C")]
			public Type Type
			{
				[Token(Token = "0x6001561")]
				[Address(RVA = "0x1EAAB4C", Offset = "0x1EAAB4C", VA = "0x1EAAB4C", Slot = "6")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700016D")]
			public Type TypeOverride
			{
				[Token(Token = "0x6001562")]
				[Address(RVA = "0x1EAAB70", Offset = "0x1EAAB70", VA = "0x1EAAB70", Slot = "7")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D0FC", Offset = "0xA8D0FC")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001563")]
				[Address(RVA = "0x1EAAB78", Offset = "0x1EAAB78", VA = "0x1EAAB78", Slot = "8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D10C", Offset = "0xA8D10C")]
				set
				{
				}
			}

			[Token(Token = "0x1700016E")]
			public int Order
			{
				[Token(Token = "0x6001564")]
				[Address(RVA = "0x1EAAB80", Offset = "0x1EAAB80", VA = "0x1EAAB80", Slot = "9")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D11C", Offset = "0xA8D11C")]
				get
				{
					return default(int);
				}
				[Token(Token = "0x6001565")]
				[Address(RVA = "0x1EAAB88", Offset = "0x1EAAB88", VA = "0x1EAAB88", Slot = "10")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D12C", Offset = "0xA8D12C")]
				set
				{
				}
			}

			[Token(Token = "0x1700016F")]
			public bool CanWrite
			{
				[Token(Token = "0x6001566")]
				[Address(RVA = "0x1EAAB90", Offset = "0x1EAAB90", VA = "0x1EAAB90", Slot = "5")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000170")]
			public ScalarStyle ScalarStyle
			{
				[Token(Token = "0x6001567")]
				[Address(RVA = "0x1EAABB4", Offset = "0x1EAABB4", VA = "0x1EAABB4", Slot = "11")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D13C", Offset = "0xA8D13C")]
				get
				{
					return default(ScalarStyle);
				}
				[Token(Token = "0x6001568")]
				[Address(RVA = "0x1EAABBC", Offset = "0x1EAABBC", VA = "0x1EAABBC", Slot = "12")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D14C", Offset = "0xA8D14C")]
				set
				{
				}
			}

			[Token(Token = "0x600155F")]
			[Address(RVA = "0x1EAAAD4", Offset = "0x1EAAAD4", VA = "0x1EAAAD4")]
			public ReflectionPropertyDescriptor(PropertyInfo propertyInfo, ITypeResolver typeResolver)
			{
			}

			[Token(Token = "0x6001569")]
			[Address(RVA = "0x1EAABC4", Offset = "0x1EAABC4", VA = "0x1EAABC4", Slot = "15")]
			public void Write(object target, object value)
			{
			}

			[Token(Token = "0x600156A")]
			public T GetCustomAttribute<T>() where T : Attribute
			{
				return null;
			}

			[Token(Token = "0x600156B")]
			[Address(RVA = "0x1EAABEC", Offset = "0x1EAABEC", VA = "0x1EAABEC", Slot = "14")]
			public IObjectDescriptor Read(object target)
			{
				return null;
			}
		}

		[Token(Token = "0x40000CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly ITypeResolver _typeResolver;

		[Token(Token = "0x600022C")]
		[Address(RVA = "0x10BF3B8", Offset = "0x10BF3B8", VA = "0x10BF3B8")]
		public ReadablePropertiesTypeInspector(ITypeResolver typeResolver)
		{
		}

		[Token(Token = "0x600022D")]
		[Address(RVA = "0x10BF438", Offset = "0x10BF438", VA = "0x10BF438")]
		private static bool IsValidProperty(PropertyInfo property)
		{
			return default(bool);
		}

		[Token(Token = "0x600022E")]
		[Address(RVA = "0x10BF4A8", Offset = "0x10BF4A8", VA = "0x10BF4A8", Slot = "6")]
		public override IEnumerable<IPropertyDescriptor> GetProperties(Type type, object container)
		{
			return null;
		}

		[Token(Token = "0x600022F")]
		[Address(RVA = "0x10BF7E8", Offset = "0x10BF7E8", VA = "0x10BF7E8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89E1C", Offset = "0xA89E1C")]
		private IPropertyDescriptor <GetProperties>b__3_0(PropertyInfo p)
		{
			return null;
		}
	}
	[Token(Token = "0x200005F")]
	public abstract class TypeInspectorSkeleton : ITypeInspector
	{
		[Token(Token = "0x2000339")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E6EC", Offset = "0xA7E6EC")]
		private sealed class <>c__DisplayClass1_0
		{
			[Token(Token = "0x4000EE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string name;

			[Token(Token = "0x600156C")]
			[Address(RVA = "0x1EAE408", Offset = "0x1EAE408", VA = "0x1EAE408")]
			public <>c__DisplayClass1_0()
			{
			}

			[Token(Token = "0x600156D")]
			[Address(RVA = "0x1EAE410", Offset = "0x1EAE410", VA = "0x1EAE410")]
			internal bool <GetProperty>b__0(IPropertyDescriptor p)
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x200033A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E6FC", Offset = "0xA7E6FC")]
		private sealed class <>c
		{
			[Token(Token = "0x4000EE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000EE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<IPropertyDescriptor, string> <>9__1_1;

			[Token(Token = "0x600156F")]
			[Address(RVA = "0x1EAE358", Offset = "0x1EAE358", VA = "0x1EAE358")]
			public <>c()
			{
			}

			[Token(Token = "0x6001570")]
			[Address(RVA = "0x1EAE360", Offset = "0x1EAE360", VA = "0x1EAE360")]
			internal string <GetProperty>b__1_1(IPropertyDescriptor p)
			{
				return null;
			}
		}

		[Token(Token = "0x6000230")]
		public abstract IEnumerable<IPropertyDescriptor> GetProperties(Type type, object container);

		[Token(Token = "0x6000231")]
		[Address(RVA = "0x1A6B708", Offset = "0x1A6B708", VA = "0x1A6B708", Slot = "5")]
		public IPropertyDescriptor GetProperty(Type type, object container, string name, bool ignoreUnmatched)
		{
			return null;
		}

		[Token(Token = "0x6000232")]
		[Address(RVA = "0x1A6BE90", Offset = "0x1A6BE90", VA = "0x1A6BE90")]
		protected TypeInspectorSkeleton()
		{
		}
	}
}
namespace YamlDotNet.Serialization.ObjectGraphVisitors
{
	[Token(Token = "0x2000060")]
	public sealed class AnchorAssigner : PreProcessingPhaseObjectGraphVisitorSkeleton, IAliasProvider
	{
		[Token(Token = "0x200033B")]
		private class AnchorAssignment
		{
			[Token(Token = "0x4000EE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string Anchor;

			[Token(Token = "0x6001571")]
			[Address(RVA = "0x1A7FEE0", Offset = "0x1A7FEE0", VA = "0x1A7FEE0")]
			public AnchorAssignment()
			{
			}
		}

		[Token(Token = "0x40000CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IDictionary<object, AnchorAssignment> assignments;

		[Token(Token = "0x40000D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private uint nextId;

		[Token(Token = "0x6000233")]
		[Address(RVA = "0x2310330", Offset = "0x2310330", VA = "0x2310330")]
		public AnchorAssigner(IEnumerable<IYamlTypeConverter> typeConverters)
		{
		}

		[Token(Token = "0x6000234")]
		[Address(RVA = "0x23103C4", Offset = "0x23103C4", VA = "0x23103C4", Slot = "12")]
		protected override bool Enter(IObjectDescriptor value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000235")]
		[Address(RVA = "0x231062C", Offset = "0x231062C", VA = "0x231062C", Slot = "14")]
		protected override bool EnterMapping(IObjectDescriptor key, IObjectDescriptor value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000236")]
		[Address(RVA = "0x2310634", Offset = "0x2310634", VA = "0x2310634", Slot = "13")]
		protected override bool EnterMapping(IPropertyDescriptor key, IObjectDescriptor value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000237")]
		[Address(RVA = "0x231063C", Offset = "0x231063C", VA = "0x231063C", Slot = "17")]
		protected override void VisitScalar(IObjectDescriptor scalar)
		{
		}

		[Token(Token = "0x6000238")]
		[Address(RVA = "0x2310640", Offset = "0x2310640", VA = "0x2310640", Slot = "16")]
		protected override void VisitMappingStart(IObjectDescriptor mapping, Type keyType, Type valueType)
		{
		}

		[Token(Token = "0x6000239")]
		[Address(RVA = "0x2310824", Offset = "0x2310824", VA = "0x2310824", Slot = "15")]
		protected override void VisitMappingEnd(IObjectDescriptor mapping)
		{
		}

		[Token(Token = "0x600023A")]
		[Address(RVA = "0x2310828", Offset = "0x2310828", VA = "0x2310828", Slot = "19")]
		protected override void VisitSequenceStart(IObjectDescriptor sequence, Type elementType)
		{
		}

		[Token(Token = "0x600023B")]
		[Address(RVA = "0x231082C", Offset = "0x231082C", VA = "0x231082C", Slot = "18")]
		protected override void VisitSequenceEnd(IObjectDescriptor sequence)
		{
		}

		[Token(Token = "0x600023C")]
		[Address(RVA = "0x2310644", Offset = "0x2310644", VA = "0x2310644")]
		private void VisitObject(IObjectDescriptor value)
		{
		}

		[Token(Token = "0x600023D")]
		[Address(RVA = "0x2310830", Offset = "0x2310830", VA = "0x2310830", Slot = "20")]
		private string YamlDotNet.Serialization.IAliasProvider.GetAlias(object target)
		{
			return null;
		}
	}
	[Token(Token = "0x2000061")]
	public sealed class AnchorAssigningObjectGraphVisitor : ChainedObjectGraphVisitor
	{
		[Token(Token = "0x40000D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IEventEmitter eventEmitter;

		[Token(Token = "0x40000D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly IAliasProvider aliasProvider;

		[Token(Token = "0x40000D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly HashSet<string> emittedAliases;

		[Token(Token = "0x600023E")]
		[Address(RVA = "0x2310918", Offset = "0x2310918", VA = "0x2310918")]
		public AnchorAssigningObjectGraphVisitor(IObjectGraphVisitor<IEmitter> nextVisitor, IEventEmitter eventEmitter, IAliasProvider aliasProvider)
		{
		}

		[Token(Token = "0x600023F")]
		[Address(RVA = "0x2310A1C", Offset = "0x2310A1C", VA = "0x2310A1C", Slot = "12")]
		public override bool Enter(IObjectDescriptor value, IEmitter context)
		{
			return default(bool);
		}

		[Token(Token = "0x6000240")]
		[Address(RVA = "0x2310D44", Offset = "0x2310D44", VA = "0x2310D44", Slot = "16")]
		public override void VisitMappingStart(IObjectDescriptor mapping, Type keyType, Type valueType, IEmitter context)
		{
		}

		[Token(Token = "0x6000241")]
		[Address(RVA = "0x2310F50", Offset = "0x2310F50", VA = "0x2310F50", Slot = "18")]
		public override void VisitSequenceStart(IObjectDescriptor sequence, Type elementType, IEmitter context)
		{
		}

		[Token(Token = "0x6000242")]
		[Address(RVA = "0x231115C", Offset = "0x231115C", VA = "0x231115C", Slot = "15")]
		public override void VisitScalar(IObjectDescriptor scalar, IEmitter context)
		{
		}
	}
	[Token(Token = "0x2000062")]
	public abstract class ChainedObjectGraphVisitor : IObjectGraphVisitor<IEmitter>
	{
		[Token(Token = "0x40000D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IObjectGraphVisitor<IEmitter> nextVisitor;

		[Token(Token = "0x6000243")]
		[Address(RVA = "0x23109E8", Offset = "0x23109E8", VA = "0x23109E8")]
		protected ChainedObjectGraphVisitor(IObjectGraphVisitor<IEmitter> nextVisitor)
		{
		}

		[Token(Token = "0x6000244")]
		[Address(RVA = "0x2310C80", Offset = "0x2310C80", VA = "0x2310C80", Slot = "12")]
		public virtual bool Enter(IObjectDescriptor value, IEmitter context)
		{
			return default(bool);
		}

		[Token(Token = "0x6000245")]
		[Address(RVA = "0x2322F40", Offset = "0x2322F40", VA = "0x2322F40", Slot = "13")]
		public virtual bool EnterMapping(IObjectDescriptor key, IObjectDescriptor value, IEmitter context)
		{
			return default(bool);
		}

		[Token(Token = "0x6000246")]
		[Address(RVA = "0x2323018", Offset = "0x2323018", VA = "0x2323018", Slot = "14")]
		public virtual bool EnterMapping(IPropertyDescriptor key, IObjectDescriptor value, IEmitter context)
		{
			return default(bool);
		}

		[Token(Token = "0x6000247")]
		[Address(RVA = "0x23230F0", Offset = "0x23230F0", VA = "0x23230F0", Slot = "15")]
		public virtual void VisitScalar(IObjectDescriptor scalar, IEmitter context)
		{
		}

		[Token(Token = "0x6000248")]
		[Address(RVA = "0x23231B8", Offset = "0x23231B8", VA = "0x23231B8", Slot = "16")]
		public virtual void VisitMappingStart(IObjectDescriptor mapping, Type keyType, Type valueType, IEmitter context)
		{
		}

		[Token(Token = "0x6000249")]
		[Address(RVA = "0x2323298", Offset = "0x2323298", VA = "0x2323298", Slot = "17")]
		public virtual void VisitMappingEnd(IObjectDescriptor mapping, IEmitter context)
		{
		}

		[Token(Token = "0x600024A")]
		[Address(RVA = "0x2323360", Offset = "0x2323360", VA = "0x2323360", Slot = "18")]
		public virtual void VisitSequenceStart(IObjectDescriptor sequence, Type elementType, IEmitter context)
		{
		}

		[Token(Token = "0x600024B")]
		[Address(RVA = "0x2323438", Offset = "0x2323438", VA = "0x2323438", Slot = "19")]
		public virtual void VisitSequenceEnd(IObjectDescriptor sequence, IEmitter context)
		{
		}
	}
	[Token(Token = "0x2000063")]
	public sealed class CustomSerializationObjectGraphVisitor : ChainedObjectGraphVisitor
	{
		[Token(Token = "0x200033C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E70C", Offset = "0xA7E70C")]
		private sealed class <>c__DisplayClass3_0
		{
			[Token(Token = "0x4000EE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public IObjectDescriptor value;

			[Token(Token = "0x6001572")]
			[Address(RVA = "0x1A81704", Offset = "0x1A81704", VA = "0x1A81704")]
			public <>c__DisplayClass3_0()
			{
			}

			[Token(Token = "0x6001573")]
			[Address(RVA = "0x1A8170C", Offset = "0x1A8170C", VA = "0x1A8170C")]
			internal bool <Enter>b__0(IYamlTypeConverter t)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40000D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IEnumerable<IYamlTypeConverter> typeConverters;

		[Token(Token = "0x40000D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ObjectSerializer nestedObjectSerializer;

		[Token(Token = "0x600024C")]
		[Address(RVA = "0x169A6F0", Offset = "0x169A6F0", VA = "0x169A6F0")]
		public CustomSerializationObjectGraphVisitor(IObjectGraphVisitor<IEmitter> nextVisitor, IEnumerable<IYamlTypeConverter> typeConverters, ObjectSerializer nestedObjectSerializer)
		{
		}

		[Token(Token = "0x600024D")]
		[Address(RVA = "0x169A830", Offset = "0x169A830", VA = "0x169A830", Slot = "12")]
		public override bool Enter(IObjectDescriptor value, IEmitter context)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000064")]
	public sealed class DefaultExclusiveObjectGraphVisitor : ChainedObjectGraphVisitor
	{
		[Token(Token = "0x40000D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly IEqualityComparer<object> _objectComparer;

		[Token(Token = "0x600024E")]
		[Address(RVA = "0x16A576C", Offset = "0x16A576C", VA = "0x16A576C")]
		public DefaultExclusiveObjectGraphVisitor(IObjectGraphVisitor<IEmitter> nextVisitor)
		{
		}

		[Token(Token = "0x600024F")]
		[Address(RVA = "0x16A5774", Offset = "0x16A5774", VA = "0x16A5774")]
		private static object GetDefault(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000250")]
		[Address(RVA = "0x16A57F8", Offset = "0x16A57F8", VA = "0x16A57F8", Slot = "13")]
		public override bool EnterMapping(IObjectDescriptor key, IObjectDescriptor value, IEmitter context)
		{
			return default(bool);
		}

		[Token(Token = "0x6000251")]
		[Address(RVA = "0x16A59B4", Offset = "0x16A59B4", VA = "0x16A59B4", Slot = "14")]
		public override bool EnterMapping(IPropertyDescriptor key, IObjectDescriptor value, IEmitter context)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000065")]
	public sealed class EmittingObjectGraphVisitor : IObjectGraphVisitor<IEmitter>
	{
		[Token(Token = "0x40000D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IEventEmitter eventEmitter;

		[Token(Token = "0x6000253")]
		[Address(RVA = "0x2760CF0", Offset = "0x2760CF0", VA = "0x2760CF0")]
		public EmittingObjectGraphVisitor(IEventEmitter eventEmitter)
		{
		}

		[Token(Token = "0x6000254")]
		[Address(RVA = "0x2760D24", Offset = "0x2760D24", VA = "0x2760D24", Slot = "4")]
		private bool YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Core.IEmitter>.Enter(IObjectDescriptor value, IEmitter context)
		{
			return default(bool);
		}

		[Token(Token = "0x6000255")]
		[Address(RVA = "0x2760D2C", Offset = "0x2760D2C", VA = "0x2760D2C", Slot = "5")]
		private bool YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Core.IEmitter>.EnterMapping(IObjectDescriptor key, IObjectDescriptor value, IEmitter context)
		{
			return default(bool);
		}

		[Token(Token = "0x6000256")]
		[Address(RVA = "0x2760D34", Offset = "0x2760D34", VA = "0x2760D34", Slot = "6")]
		private bool YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Core.IEmitter>.EnterMapping(IPropertyDescriptor key, IObjectDescriptor value, IEmitter context)
		{
			return default(bool);
		}

		[Token(Token = "0x6000257")]
		[Address(RVA = "0x2760D3C", Offset = "0x2760D3C", VA = "0x2760D3C", Slot = "7")]
		private void YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Core.IEmitter>.VisitScalar(IObjectDescriptor scalar, IEmitter context)
		{
		}

		[Token(Token = "0x6000258")]
		[Address(RVA = "0x2760E30", Offset = "0x2760E30", VA = "0x2760E30", Slot = "8")]
		private void YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Core.IEmitter>.VisitMappingStart(IObjectDescriptor mapping, Type keyType, Type valueType, IEmitter context)
		{
		}

		[Token(Token = "0x6000259")]
		[Address(RVA = "0x2760F24", Offset = "0x2760F24", VA = "0x2760F24", Slot = "9")]
		private void YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Core.IEmitter>.VisitMappingEnd(IObjectDescriptor mapping, IEmitter context)
		{
		}

		[Token(Token = "0x600025A")]
		[Address(RVA = "0x2761018", Offset = "0x2761018", VA = "0x2761018", Slot = "10")]
		private void YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Core.IEmitter>.VisitSequenceStart(IObjectDescriptor sequence, Type elementType, IEmitter context)
		{
		}

		[Token(Token = "0x600025B")]
		[Address(RVA = "0x276110C", Offset = "0x276110C", VA = "0x276110C", Slot = "11")]
		private void YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Core.IEmitter>.VisitSequenceEnd(IObjectDescriptor sequence, IEmitter context)
		{
		}
	}
	[Token(Token = "0x2000066")]
	public abstract class PreProcessingPhaseObjectGraphVisitorSkeleton : IObjectGraphVisitor<Nothing>
	{
		[Token(Token = "0x200033D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E71C", Offset = "0xA7E71C")]
		private sealed class <>c__DisplayClass2_0
		{
			[Token(Token = "0x4000EE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public IObjectDescriptor value;

			[Token(Token = "0x6001574")]
			[Address(RVA = "0x1EA9F9C", Offset = "0x1EA9F9C", VA = "0x1EA9F9C")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x6001575")]
			[Address(RVA = "0x1EA9FA4", Offset = "0x1EA9FA4", VA = "0x1EA9FA4")]
			internal bool <YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Serialization.Nothing>.Enter>b__0(IYamlTypeConverter t)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40000D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly IEnumerable<IYamlTypeConverter> typeConverters;

		[Token(Token = "0x600025C")]
		[Address(RVA = "0x10BBFD8", Offset = "0x10BBFD8", VA = "0x10BBFD8")]
		public PreProcessingPhaseObjectGraphVisitorSkeleton(IEnumerable<IYamlTypeConverter> typeConverters)
		{
		}

		[Token(Token = "0x600025D")]
		[Address(RVA = "0x10BC0F4", Offset = "0x10BC0F4", VA = "0x10BC0F4", Slot = "4")]
		private bool YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Serialization.Nothing>.Enter(IObjectDescriptor value, Nothing context)
		{
			return default(bool);
		}

		[Token(Token = "0x600025E")]
		[Address(RVA = "0x10BC34C", Offset = "0x10BC34C", VA = "0x10BC34C", Slot = "6")]
		private bool YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Serialization.Nothing>.EnterMapping(IPropertyDescriptor key, IObjectDescriptor value, Nothing context)
		{
			return default(bool);
		}

		[Token(Token = "0x600025F")]
		[Address(RVA = "0x10BC35C", Offset = "0x10BC35C", VA = "0x10BC35C", Slot = "5")]
		private bool YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Serialization.Nothing>.EnterMapping(IObjectDescriptor key, IObjectDescriptor value, Nothing context)
		{
			return default(bool);
		}

		[Token(Token = "0x6000260")]
		[Address(RVA = "0x10BC36C", Offset = "0x10BC36C", VA = "0x10BC36C", Slot = "9")]
		private void YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Serialization.Nothing>.VisitMappingEnd(IObjectDescriptor mapping, Nothing context)
		{
		}

		[Token(Token = "0x6000261")]
		[Address(RVA = "0x10BC37C", Offset = "0x10BC37C", VA = "0x10BC37C", Slot = "8")]
		private void YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Serialization.Nothing>.VisitMappingStart(IObjectDescriptor mapping, Type keyType, Type valueType, Nothing context)
		{
		}

		[Token(Token = "0x6000262")]
		[Address(RVA = "0x10BC38C", Offset = "0x10BC38C", VA = "0x10BC38C", Slot = "7")]
		private void YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Serialization.Nothing>.VisitScalar(IObjectDescriptor scalar, Nothing context)
		{
		}

		[Token(Token = "0x6000263")]
		[Address(RVA = "0x10BC39C", Offset = "0x10BC39C", VA = "0x10BC39C", Slot = "11")]
		private void YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Serialization.Nothing>.VisitSequenceEnd(IObjectDescriptor sequence, Nothing context)
		{
		}

		[Token(Token = "0x6000264")]
		[Address(RVA = "0x10BC3AC", Offset = "0x10BC3AC", VA = "0x10BC3AC", Slot = "10")]
		private void YamlDotNet.Serialization.IObjectGraphVisitor<YamlDotNet.Serialization.Nothing>.VisitSequenceStart(IObjectDescriptor sequence, Type elementType, Nothing context)
		{
		}

		[Token(Token = "0x6000265")]
		protected abstract bool Enter(IObjectDescriptor value);

		[Token(Token = "0x6000266")]
		protected abstract bool EnterMapping(IPropertyDescriptor key, IObjectDescriptor value);

		[Token(Token = "0x6000267")]
		protected abstract bool EnterMapping(IObjectDescriptor key, IObjectDescriptor value);

		[Token(Token = "0x6000268")]
		protected abstract void VisitMappingEnd(IObjectDescriptor mapping);

		[Token(Token = "0x6000269")]
		protected abstract void VisitMappingStart(IObjectDescriptor mapping, Type keyType, Type valueType);

		[Token(Token = "0x600026A")]
		protected abstract void VisitScalar(IObjectDescriptor scalar);

		[Token(Token = "0x600026B")]
		protected abstract void VisitSequenceEnd(IObjectDescriptor sequence);

		[Token(Token = "0x600026C")]
		protected abstract void VisitSequenceStart(IObjectDescriptor sequence, Type elementType);
	}
}
namespace YamlDotNet.Serialization.ObjectGraphTraversalStrategies
{
	[Token(Token = "0x2000067")]
	public class FullObjectGraphTraversalStrategy : IObjectGraphTraversalStrategy
	{
		[Token(Token = "0x40000DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly int maxRecursion;

		[Token(Token = "0x40000DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ITypeInspector typeDescriptor;

		[Token(Token = "0x40000DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly ITypeResolver typeResolver;

		[Token(Token = "0x40000DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private INamingConvention namingConvention;

		[Token(Token = "0x600026D")]
		[Address(RVA = "0x276BAFC", Offset = "0x276BAFC", VA = "0x276BAFC")]
		public FullObjectGraphTraversalStrategy(ITypeInspector typeDescriptor, ITypeResolver typeResolver, int maxRecursion, INamingConvention namingConvention)
		{
		}

		[Token(Token = "0x600026E")]
		private void YamlDotNet.Serialization.IObjectGraphTraversalStrategy.Traverse<TContext>(IObjectDescriptor graph, IObjectGraphVisitor<TContext> visitor, TContext context)
		{
		}

		[Token(Token = "0x600026F")]
		protected virtual void Traverse<TContext>(IObjectDescriptor value, IObjectGraphVisitor<TContext> visitor, int currentDepth, TContext context)
		{
		}

		[Token(Token = "0x6000270")]
		protected virtual void TraverseObject<TContext>(IObjectDescriptor value, IObjectGraphVisitor<TContext> visitor, int currentDepth, TContext context)
		{
		}

		[Token(Token = "0x6000271")]
		protected virtual void TraverseDictionary<TContext>(IObjectDescriptor dictionary, IObjectGraphVisitor<TContext> visitor, int currentDepth, Type keyType, Type valueType, TContext context)
		{
		}

		[Token(Token = "0x6000272")]
		private void TraverseList<TContext>(IObjectDescriptor value, IObjectGraphVisitor<TContext> visitor, int currentDepth, TContext context)
		{
		}

		[Token(Token = "0x6000273")]
		protected virtual void TraverseProperties<TContext>(IObjectDescriptor value, IObjectGraphVisitor<TContext> visitor, int currentDepth, TContext context)
		{
		}

		[Token(Token = "0x6000274")]
		[Address(RVA = "0x276BC64", Offset = "0x276BC64", VA = "0x276BC64")]
		private IObjectDescriptor GetObjectDescriptor(object value, Type staticType)
		{
			return null;
		}
	}
	[Token(Token = "0x2000068")]
	public class RoundtripObjectGraphTraversalStrategy : FullObjectGraphTraversalStrategy
	{
		[Token(Token = "0x200033E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E72C", Offset = "0xA7E72C")]
		private sealed class <>c__DisplayClass2_0<TContext>
		{
			[Token(Token = "0x4000EE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IObjectDescriptor value;

			[Token(Token = "0x6001576")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x6001577")]
			internal bool <TraverseProperties>b__0(IYamlTypeConverter c)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40000DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly IEnumerable<IYamlTypeConverter> converters;

		[Token(Token = "0x6000275")]
		[Address(RVA = "0x10C3CDC", Offset = "0x10C3CDC", VA = "0x10C3CDC")]
		public RoundtripObjectGraphTraversalStrategy(IEnumerable<IYamlTypeConverter> converters, ITypeInspector typeDescriptor, ITypeResolver typeResolver, int maxRecursion)
		{
		}

		[Token(Token = "0x6000276")]
		protected override void TraverseProperties<TContext>(IObjectDescriptor value, IObjectGraphVisitor<TContext> visitor, int currentDepth, TContext context)
		{
		}
	}
}
namespace YamlDotNet.Serialization.ObjectFactories
{
	[Token(Token = "0x2000069")]
	public sealed class DefaultObjectFactory : IObjectFactory
	{
		[Token(Token = "0x40000DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Dictionary<Type, Type> defaultInterfaceImplementations;

		[Token(Token = "0x6000277")]
		[Address(RVA = "0x16A5D34", Offset = "0x16A5D34", VA = "0x16A5D34", Slot = "4")]
		public object Create(Type type)
		{
			return null;
		}

		[Token(Token = "0x6000278")]
		[Address(RVA = "0x16A5F3C", Offset = "0x16A5F3C", VA = "0x16A5F3C")]
		public DefaultObjectFactory()
		{
		}
	}
	[Token(Token = "0x200006A")]
	public sealed class LambdaObjectFactory : IObjectFactory
	{
		[Token(Token = "0x40000E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Func<Type, object> _factory;

		[Token(Token = "0x600027A")]
		[Address(RVA = "0x22F1FCC", Offset = "0x22F1FCC", VA = "0x22F1FCC")]
		public LambdaObjectFactory(Func<Type, object> factory)
		{
		}

		[Token(Token = "0x600027B")]
		[Address(RVA = "0x22F204C", Offset = "0x22F204C", VA = "0x22F204C", Slot = "4")]
		public object Create(Type type)
		{
			return null;
		}
	}
}
namespace YamlDotNet.Serialization.NodeTypeResolvers
{
	[Token(Token = "0x200006B")]
	public sealed class DefaultContainersNodeTypeResolver : INodeTypeResolver
	{
		[Token(Token = "0x600027C")]
		[Address(RVA = "0x16A55C8", Offset = "0x16A55C8", VA = "0x16A55C8", Slot = "4")]
		private bool YamlDotNet.Serialization.INodeTypeResolver.Resolve(NodeEvent nodeEvent, ref Type currentType)
		{
			return default(bool);
		}

		[Token(Token = "0x600027D")]
		[Address(RVA = "0x16A5764", Offset = "0x16A5764", VA = "0x16A5764")]
		public DefaultContainersNodeTypeResolver()
		{
		}
	}
	[Token(Token = "0x200006C")]
	public sealed class TagNodeTypeResolver : INodeTypeResolver
	{
		[Token(Token = "0x40000E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IDictionary<string, Type> tagMappings;

		[Token(Token = "0x600027E")]
		[Address(RVA = "0x1652C5C", Offset = "0x1652C5C", VA = "0x1652C5C")]
		public TagNodeTypeResolver(IDictionary<string, Type> tagMappings)
		{
		}

		[Token(Token = "0x600027F")]
		[Address(RVA = "0x1652CDC", Offset = "0x1652CDC", VA = "0x1652CDC", Slot = "4")]
		private bool YamlDotNet.Serialization.INodeTypeResolver.Resolve(NodeEvent nodeEvent, ref Type currentType)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200006D")]
	public sealed class TypeNameInTagNodeTypeResolver : INodeTypeResolver
	{
		[Token(Token = "0x6000280")]
		[Address(RVA = "0x1A6BE98", Offset = "0x1A6BE98", VA = "0x1A6BE98", Slot = "4")]
		private bool YamlDotNet.Serialization.INodeTypeResolver.Resolve(NodeEvent nodeEvent, ref Type currentType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000281")]
		[Address(RVA = "0x1A6BFA0", Offset = "0x1A6BFA0", VA = "0x1A6BFA0")]
		public TypeNameInTagNodeTypeResolver()
		{
		}
	}
	[Token(Token = "0x200006E")]
	public sealed class YamlConvertibleTypeResolver : INodeTypeResolver
	{
		[Token(Token = "0x6000282")]
		[Address(RVA = "0x1A75AA8", Offset = "0x1A75AA8", VA = "0x1A75AA8", Slot = "4")]
		public bool Resolve(NodeEvent nodeEvent, ref Type currentType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000283")]
		[Address(RVA = "0x1A75B40", Offset = "0x1A75B40", VA = "0x1A75B40")]
		public YamlConvertibleTypeResolver()
		{
		}
	}
	[Token(Token = "0x200006F")]
	public sealed class YamlSerializableTypeResolver : INodeTypeResolver
	{
		[Token(Token = "0x6000284")]
		[Address(RVA = "0x1A7C748", Offset = "0x1A7C748", VA = "0x1A7C748", Slot = "4")]
		public bool Resolve(NodeEvent nodeEvent, ref Type currentType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000285")]
		[Address(RVA = "0x1A7C7E0", Offset = "0x1A7C7E0", VA = "0x1A7C7E0")]
		public YamlSerializableTypeResolver()
		{
		}
	}
}
namespace YamlDotNet.Serialization.NodeDeserializers
{
	[Token(Token = "0x2000070")]
	public sealed class ArrayNodeDeserializer : INodeDeserializer
	{
		[Token(Token = "0x200033F")]
		[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xA7E73C", Offset = "0xA7E73C")]
		private sealed class ArrayList : IList, ICollection, IEnumerable
		{
			[Token(Token = "0x2000435")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EECC", Offset = "0xA7EECC")]
			private sealed class <GetEnumerator>d__24 : IEnumerator<object>, IEnumerator, IDisposable
			{
				[Token(Token = "0x400129B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				private int <>1__state;

				[Token(Token = "0x400129C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private object <>2__current;

				[Token(Token = "0x400129D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public ArrayList <>4__this;

				[Token(Token = "0x400129E")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				private int <i>5__2;

				[Token(Token = "0x170001E4")]
				private object System.Collections.Generic.IEnumerator<System.Object>.Current
				{
					[Token(Token = "0x600193B")]
					[Address(RVA = "0x1EB2E18", Offset = "0x1EB2E18", VA = "0x1EB2E18", Slot = "4")]
					[DebuggerHidden]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x170001E5")]
				private object System.Collections.IEnumerator.Current
				{
					[Token(Token = "0x600193D")]
					[Address(RVA = "0x1EB2E60", Offset = "0x1EB2E60", VA = "0x1EB2E60", Slot = "7")]
					[DebuggerHidden]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x6001938")]
				[Address(RVA = "0x1EB2D38", Offset = "0x1EB2D38", VA = "0x1EB2D38")]
				[DebuggerHidden]
				public <GetEnumerator>d__24(int <>1__state)
				{
				}

				[Token(Token = "0x6001939")]
				[Address(RVA = "0x1EB2D64", Offset = "0x1EB2D64", VA = "0x1EB2D64", Slot = "5")]
				[DebuggerHidden]
				private void System.IDisposable.Dispose()
				{
				}

				[Token(Token = "0x600193A")]
				[Address(RVA = "0x1EB2D68", Offset = "0x1EB2D68", VA = "0x1EB2D68", Slot = "6")]
				private bool MoveNext()
				{
					return default(bool);
				}

				[Token(Token = "0x600193C")]
				[Address(RVA = "0x1EB2E20", Offset = "0x1EB2E20", VA = "0x1EB2E20", Slot = "8")]
				[DebuggerHidden]
				private void System.Collections.IEnumerator.Reset()
				{
				}
			}

			[Token(Token = "0x4000EEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private object[] data;

			[Token(Token = "0x4000EEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private int count;

			[Token(Token = "0x17000171")]
			public bool IsFixedSize
			{
				[Token(Token = "0x600157E")]
				[Address(RVA = "0x1A80114", Offset = "0x1A80114", VA = "0x1A80114", Slot = "10")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000172")]
			public bool IsReadOnly
			{
				[Token(Token = "0x600157F")]
				[Address(RVA = "0x1A8011C", Offset = "0x1A8011C", VA = "0x1A8011C", Slot = "9")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000173")]
			public object Item
			{
				[Token(Token = "0x6001582")]
				[Address(RVA = "0x1A801A4", Offset = "0x1A801A4", VA = "0x1A801A4", Slot = "4")]
				get
				{
					return null;
				}
				[Token(Token = "0x6001583")]
				[Address(RVA = "0x1A801E0", Offset = "0x1A801E0", VA = "0x1A801E0", Slot = "5")]
				set
				{
				}
			}

			[Token(Token = "0x17000174")]
			public int Count
			{
				[Token(Token = "0x6001585")]
				[Address(RVA = "0x1A8027C", Offset = "0x1A8027C", VA = "0x1A8027C", Slot = "16")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x17000175")]
			public bool IsSynchronized
			{
				[Token(Token = "0x6001586")]
				[Address(RVA = "0x1A80284", Offset = "0x1A80284", VA = "0x1A80284", Slot = "18")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000176")]
			public object SyncRoot
			{
				[Token(Token = "0x6001587")]
				[Address(RVA = "0x1A8028C", Offset = "0x1A8028C", VA = "0x1A8028C", Slot = "17")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001578")]
			[Address(RVA = "0x1A7FEE8", Offset = "0x1A7FEE8", VA = "0x1A7FEE8")]
			public ArrayList()
			{
			}

			[Token(Token = "0x6001579")]
			[Address(RVA = "0x1A7FF74", Offset = "0x1A7FF74", VA = "0x1A7FF74", Slot = "6")]
			public int Add(object value)
			{
				return default(int);
			}

			[Token(Token = "0x600157A")]
			[Address(RVA = "0x1A7FF10", Offset = "0x1A7FF10", VA = "0x1A7FF10", Slot = "8")]
			public void Clear()
			{
			}

			[Token(Token = "0x600157B")]
			[Address(RVA = "0x1A80054", Offset = "0x1A80054", VA = "0x1A80054", Slot = "7")]
			public bool Contains(object value)
			{
				return default(bool);
			}

			[Token(Token = "0x600157C")]
			[Address(RVA = "0x1A80094", Offset = "0x1A80094", VA = "0x1A80094", Slot = "11")]
			public int IndexOf(object value)
			{
				return default(int);
			}

			[Token(Token = "0x600157D")]
			[Address(RVA = "0x1A800D4", Offset = "0x1A800D4", VA = "0x1A800D4", Slot = "12")]
			public void Insert(int index, object value)
			{
			}

			[Token(Token = "0x6001580")]
			[Address(RVA = "0x1A80124", Offset = "0x1A80124", VA = "0x1A80124", Slot = "13")]
			public void Remove(object value)
			{
			}

			[Token(Token = "0x6001581")]
			[Address(RVA = "0x1A80164", Offset = "0x1A80164", VA = "0x1A80164", Slot = "14")]
			public void RemoveAt(int index)
			{
			}

			[Token(Token = "0x6001584")]
			[Address(RVA = "0x1A8025C", Offset = "0x1A8025C", VA = "0x1A8025C", Slot = "15")]
			public void CopyTo(Array array, int index)
			{
			}

			[Token(Token = "0x6001588")]
			[Address(RVA = "0x1A80294", Offset = "0x1A80294", VA = "0x1A80294", Slot = "19")]
			[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xA8D15C", Offset = "0xA8D15C")]
			public IEnumerator GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x6000286")]
		[Address(RVA = "0x2312C18", Offset = "0x2312C18", VA = "0x2312C18", Slot = "4")]
		private bool YamlDotNet.Serialization.INodeDeserializer.Deserialize(IParser parser, Type expectedType, Func<IParser, Type, object> nestedObjectDeserializer, out object value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000287")]
		[Address(RVA = "0x2312D58", Offset = "0x2312D58", VA = "0x2312D58")]
		public ArrayNodeDeserializer()
		{
		}
	}
	[Token(Token = "0x2000071")]
	public sealed class CollectionNodeDeserializer : INodeDeserializer
	{
		[Token(Token = "0x2000340")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E774", Offset = "0xA7E774")]
		private sealed class <>c__DisplayClass3_0
		{
			[Token(Token = "0x4000EEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public IList result;

			[Token(Token = "0x4000EED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Type tItem;

			[Token(Token = "0x6001589")]
			[Address(RVA = "0x1A812F0", Offset = "0x1A812F0", VA = "0x1A812F0")]
			public <>c__DisplayClass3_0()
			{
			}
		}

		[Token(Token = "0x2000341")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E784", Offset = "0xA7E784")]
		private sealed class <>c__DisplayClass3_1
		{
			[Token(Token = "0x4000EEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int index;

			[Token(Token = "0x4000EEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public <>c__DisplayClass3_0 CS$<>8__locals1;

			[Token(Token = "0x600158A")]
			[Address(RVA = "0x1A812F8", Offset = "0x1A812F8", VA = "0x1A812F8")]
			public <>c__DisplayClass3_1()
			{
			}

			[Token(Token = "0x600158B")]
			[Address(RVA = "0x1A81300", Offset = "0x1A81300", VA = "0x1A81300")]
			internal void <DeserializeHelper>b__0(object v)
			{
			}
		}

		[Token(Token = "0x40000E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IObjectFactory _objectFactory;

		[Token(Token = "0x6000288")]
		[Address(RVA = "0x169812C", Offset = "0x169812C", VA = "0x169812C")]
		public CollectionNodeDeserializer(IObjectFactory objectFactory)
		{
		}

		[Token(Token = "0x6000289")]
		[Address(RVA = "0x1698160", Offset = "0x1698160", VA = "0x1698160", Slot = "4")]
		private bool YamlDotNet.Serialization.INodeDeserializer.Deserialize(IParser parser, Type expectedType, Func<IParser, Type, object> nestedObjectDeserializer, out object value)
		{
			return default(bool);
		}

		[Token(Token = "0x600028A")]
		[Address(RVA = "0x1698548", Offset = "0x1698548", VA = "0x1698548")]
		internal static void DeserializeHelper(Type tItem, IParser parser, Func<IParser, Type, object> nestedObjectDeserializer, IList result, bool canUpdate)
		{
		}
	}
	[Token(Token = "0x2000072")]
	public sealed class DictionaryNodeDeserializer : INodeDeserializer
	{
		[Token(Token = "0x2000342")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E794", Offset = "0xA7E794")]
		private sealed class <>c__DisplayClass3_0
		{
			[Token(Token = "0x4000EF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public IDictionary result;

			[Token(Token = "0x600158C")]
			[Address(RVA = "0x1E32094", Offset = "0x1E32094", VA = "0x1E32094")]
			public <>c__DisplayClass3_0()
			{
			}
		}

		[Token(Token = "0x2000343")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E7A4", Offset = "0xA7E7A4")]
		private sealed class <>c__DisplayClass3_1
		{
			[Token(Token = "0x4000EF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public object key;

			[Token(Token = "0x4000EF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public object value;

			[Token(Token = "0x4000EF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public <>c__DisplayClass3_0 CS$<>8__locals1;

			[Token(Token = "0x600158D")]
			[Address(RVA = "0x1E3209C", Offset = "0x1E3209C", VA = "0x1E3209C")]
			public <>c__DisplayClass3_1()
			{
			}

			[Token(Token = "0x600158E")]
			[Address(RVA = "0x1E320A4", Offset = "0x1E320A4", VA = "0x1E320A4")]
			internal void <DeserializeHelper>b__0(object v)
			{
			}

			[Token(Token = "0x600158F")]
			[Address(RVA = "0x1E32174", Offset = "0x1E32174", VA = "0x1E32174")]
			internal void <DeserializeHelper>b__1(object v)
			{
			}
		}

		[Token(Token = "0x2000344")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E7B4", Offset = "0xA7E7B4")]
		private sealed class <>c__DisplayClass3_2
		{
			[Token(Token = "0x4000EF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool hasFirstPart;

			[Token(Token = "0x4000EF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public <>c__DisplayClass3_1 CS$<>8__locals2;

			[Token(Token = "0x6001590")]
			[Address(RVA = "0x1E32244", Offset = "0x1E32244", VA = "0x1E32244")]
			public <>c__DisplayClass3_2()
			{
			}

			[Token(Token = "0x6001591")]
			[Address(RVA = "0x1E3224C", Offset = "0x1E3224C", VA = "0x1E3224C")]
			internal void <DeserializeHelper>b__2(object v)
			{
			}

			[Token(Token = "0x6001592")]
			[Address(RVA = "0x1E32350", Offset = "0x1E32350", VA = "0x1E32350")]
			internal void <DeserializeHelper>b__3(object v)
			{
			}
		}

		[Token(Token = "0x40000E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IObjectFactory _objectFactory;

		[Token(Token = "0x600028B")]
		[Address(RVA = "0x16A911C", Offset = "0x16A911C", VA = "0x16A911C")]
		public DictionaryNodeDeserializer(IObjectFactory objectFactory)
		{
		}

		[Token(Token = "0x600028C")]
		[Address(RVA = "0x16A92C4", Offset = "0x16A92C4", VA = "0x16A92C4", Slot = "4")]
		private bool YamlDotNet.Serialization.INodeDeserializer.Deserialize(IParser parser, Type expectedType, Func<IParser, Type, object> nestedObjectDeserializer, out object value)
		{
			return default(bool);
		}

		[Token(Token = "0x600028D")]
		[Address(RVA = "0x16A9660", Offset = "0x16A9660", VA = "0x16A9660")]
		private static void DeserializeHelper(Type tKey, Type tValue, IParser parser, Func<IParser, Type, object> nestedObjectDeserializer, IDictionary result)
		{
		}
	}
	[Token(Token = "0x2000073")]
	public sealed class EnumerableNodeDeserializer : INodeDeserializer
	{
		[Token(Token = "0x600028E")]
		[Address(RVA = "0x2761200", Offset = "0x2761200", VA = "0x2761200", Slot = "4")]
		private bool YamlDotNet.Serialization.INodeDeserializer.Deserialize(IParser parser, Type expectedType, Func<IParser, Type, object> nestedObjectDeserializer, out object value)
		{
			return default(bool);
		}

		[Token(Token = "0x600028F")]
		[Address(RVA = "0x27614A8", Offset = "0x27614A8", VA = "0x27614A8")]
		public EnumerableNodeDeserializer()
		{
		}
	}
	[Token(Token = "0x2000074")]
	public sealed class NullNodeDeserializer : INodeDeserializer
	{
		[Token(Token = "0x6000290")]
		[Address(RVA = "0x10B4040", Offset = "0x10B4040", VA = "0x10B4040", Slot = "4")]
		private bool YamlDotNet.Serialization.INodeDeserializer.Deserialize(IParser parser, Type expectedType, Func<IParser, Type, object> nestedObjectDeserializer, out object value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000291")]
		[Address(RVA = "0x10B40D0", Offset = "0x10B40D0", VA = "0x10B40D0")]
		private bool NodeIsNull(NodeEvent nodeEvent)
		{
			return default(bool);
		}

		[Token(Token = "0x6000292")]
		[Address(RVA = "0x10B4358", Offset = "0x10B4358", VA = "0x10B4358")]
		public NullNodeDeserializer()
		{
		}
	}
	[Token(Token = "0x2000075")]
	public sealed class ObjectNodeDeserializer : INodeDeserializer
	{
		[Token(Token = "0x2000345")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E7C4", Offset = "0xA7E7C4")]
		private sealed class <>c__DisplayClass4_0
		{
			[Token(Token = "0x4000EF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public IPropertyDescriptor property;

			[Token(Token = "0x4000EF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public object valueRef;

			[Token(Token = "0x6001593")]
			[Address(RVA = "0x1EA8E40", Offset = "0x1EA8E40", VA = "0x1EA8E40")]
			public <>c__DisplayClass4_0()
			{
			}

			[Token(Token = "0x6001594")]
			[Address(RVA = "0x1EA8E48", Offset = "0x1EA8E48", VA = "0x1EA8E48")]
			internal void <YamlDotNet.Serialization.INodeDeserializer.Deserialize>b__0(object v)
			{
			}
		}

		[Token(Token = "0x40000E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IObjectFactory _objectFactory;

		[Token(Token = "0x40000E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly ITypeInspector _typeDescriptor;

		[Token(Token = "0x40000E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly bool _ignoreUnmatched;

		[Token(Token = "0x6000293")]
		[Address(RVA = "0x10B4D64", Offset = "0x10B4D64", VA = "0x10B4D64")]
		public ObjectNodeDeserializer(IObjectFactory objectFactory, ITypeInspector typeDescriptor, bool ignoreUnmatched)
		{
		}

		[Token(Token = "0x6000294")]
		[Address(RVA = "0x10B4DC4", Offset = "0x10B4DC4", VA = "0x10B4DC4", Slot = "4")]
		private bool YamlDotNet.Serialization.INodeDeserializer.Deserialize(IParser parser, Type expectedType, Func<IParser, Type, object> nestedObjectDeserializer, out object value)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000076")]
	public sealed class ScalarNodeDeserializer : INodeDeserializer
	{
		[Token(Token = "0x40000E7")]
		private const string BooleanTruePattern = "^(true|y|yes|on)$";

		[Token(Token = "0x40000E8")]
		private const string BooleanFalsePattern = "^(false|n|no|off)$";

		[Token(Token = "0x6000295")]
		[Address(RVA = "0x10C4748", Offset = "0x10C4748", VA = "0x10C4748", Slot = "4")]
		private bool YamlDotNet.Serialization.INodeDeserializer.Deserialize(IParser parser, Type expectedType, Func<IParser, Type, object> nestedObjectDeserializer, out object value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000296")]
		[Address(RVA = "0x10C4B94", Offset = "0x10C4B94", VA = "0x10C4B94")]
		private object DeserializeBooleanHelper(string value)
		{
			return null;
		}

		[Token(Token = "0x6000297")]
		[Address(RVA = "0x10C4CE8", Offset = "0x10C4CE8", VA = "0x10C4CE8")]
		private object DeserializeIntegerHelper(TypeCode typeCode, string value)
		{
			return null;
		}

		[Token(Token = "0x6000298")]
		[Address(RVA = "0x10C50CC", Offset = "0x10C50CC", VA = "0x10C50CC")]
		private static object CastInteger(long number, TypeCode typeCode)
		{
			return null;
		}

		[Token(Token = "0x6000299")]
		[Address(RVA = "0x10C5264", Offset = "0x10C5264", VA = "0x10C5264")]
		private static object CastInteger(ulong number, TypeCode typeCode)
		{
			return null;
		}

		[Token(Token = "0x600029A")]
		[Address(RVA = "0x10C53F8", Offset = "0x10C53F8", VA = "0x10C53F8")]
		public ScalarNodeDeserializer()
		{
		}
	}
	[Token(Token = "0x2000077")]
	public sealed class TypeConverterNodeDeserializer : INodeDeserializer
	{
		[Token(Token = "0x2000346")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E7D4", Offset = "0xA7E7D4")]
		private sealed class <>c__DisplayClass2_0
		{
			[Token(Token = "0x4000EF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Type expectedType;

			[Token(Token = "0x6001595")]
			[Address(RVA = "0x1EAE230", Offset = "0x1EAE230", VA = "0x1EAE230")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x6001596")]
			[Address(RVA = "0x1EAE238", Offset = "0x1EAE238", VA = "0x1EAE238")]
			internal bool <YamlDotNet.Serialization.INodeDeserializer.Deserialize>b__0(IYamlTypeConverter c)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40000E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IEnumerable<IYamlTypeConverter> converters;

		[Token(Token = "0x600029B")]
		[Address(RVA = "0x1A6B4C0", Offset = "0x1A6B4C0", VA = "0x1A6B4C0")]
		public TypeConverterNodeDeserializer(IEnumerable<IYamlTypeConverter> converters)
		{
		}

		[Token(Token = "0x600029C")]
		[Address(RVA = "0x1A6B540", Offset = "0x1A6B540", VA = "0x1A6B540", Slot = "4")]
		private bool YamlDotNet.Serialization.INodeDeserializer.Deserialize(IParser parser, Type expectedType, Func<IParser, Type, object> nestedObjectDeserializer, out object value)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000078")]
	public sealed class YamlConvertibleNodeDeserializer : INodeDeserializer
	{
		[Token(Token = "0x2000347")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E7E4", Offset = "0xA7E7E4")]
		private sealed class <>c__DisplayClass2_0
		{
			[Token(Token = "0x4000EF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Func<IParser, Type, object> nestedObjectDeserializer;

			[Token(Token = "0x4000EFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public IParser parser;

			[Token(Token = "0x6001597")]
			[Address(RVA = "0x1EB1188", Offset = "0x1EB1188", VA = "0x1EB1188")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x6001598")]
			[Address(RVA = "0x1EB1190", Offset = "0x1EB1190", VA = "0x1EB1190")]
			internal object <Deserialize>b__0(Type type)
			{
				return null;
			}
		}

		[Token(Token = "0x40000EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IObjectFactory objectFactory;

		[Token(Token = "0x600029D")]
		[Address(RVA = "0x1A757BC", Offset = "0x1A757BC", VA = "0x1A757BC")]
		public YamlConvertibleNodeDeserializer(IObjectFactory objectFactory)
		{
		}

		[Token(Token = "0x600029E")]
		[Address(RVA = "0x1A757F0", Offset = "0x1A757F0", VA = "0x1A757F0", Slot = "4")]
		public bool Deserialize(IParser parser, Type expectedType, Func<IParser, Type, object> nestedObjectDeserializer, out object value)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000079")]
	public sealed class YamlSerializableNodeDeserializer : INodeDeserializer
	{
		[Token(Token = "0x40000EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IObjectFactory objectFactory;

		[Token(Token = "0x600029F")]
		[Address(RVA = "0x1A7C50C", Offset = "0x1A7C50C", VA = "0x1A7C50C")]
		public YamlSerializableNodeDeserializer(IObjectFactory objectFactory)
		{
		}

		[Token(Token = "0x60002A0")]
		[Address(RVA = "0x1A7C540", Offset = "0x1A7C540", VA = "0x1A7C540", Slot = "4")]
		public bool Deserialize(IParser parser, Type expectedType, Func<IParser, Type, object> nestedObjectDeserializer, out object value)
		{
			return default(bool);
		}
	}
}
namespace YamlDotNet.Serialization.NamingConventions
{
	[Token(Token = "0x200007A")]
	public sealed class CamelCaseNamingConvention : INamingConvention
	{
		[Token(Token = "0x60002A1")]
		[Address(RVA = "0x2321DA8", Offset = "0x2321DA8", VA = "0x2321DA8", Slot = "4")]
		public string Apply(string value)
		{
			return null;
		}

		[Token(Token = "0x60002A2")]
		[Address(RVA = "0x2321DB4", Offset = "0x2321DB4", VA = "0x2321DB4")]
		public CamelCaseNamingConvention()
		{
		}
	}
	[Token(Token = "0x200007B")]
	public sealed class HyphenatedNamingConvention : INamingConvention
	{
		[Token(Token = "0x60002A3")]
		[Address(RVA = "0x28AE044", Offset = "0x28AE044", VA = "0x28AE044", Slot = "4")]
		public string Apply(string value)
		{
			return null;
		}

		[Token(Token = "0x60002A4")]
		[Address(RVA = "0x28AE094", Offset = "0x28AE094", VA = "0x28AE094")]
		public HyphenatedNamingConvention()
		{
		}
	}
	[Token(Token = "0x200007C")]
	public sealed class NullNamingConvention : INamingConvention
	{
		[Token(Token = "0x60002A5")]
		[Address(RVA = "0x10B4030", Offset = "0x10B4030", VA = "0x10B4030", Slot = "4")]
		public string Apply(string value)
		{
			return null;
		}

		[Token(Token = "0x60002A6")]
		[Address(RVA = "0x10B4038", Offset = "0x10B4038", VA = "0x10B4038")]
		public NullNamingConvention()
		{
		}
	}
	[Token(Token = "0x200007D")]
	public sealed class PascalCaseNamingConvention : INamingConvention
	{
		[Token(Token = "0x60002A7")]
		[Address(RVA = "0x10B9CF4", Offset = "0x10B9CF4", VA = "0x10B9CF4", Slot = "4")]
		public string Apply(string value)
		{
			return null;
		}

		[Token(Token = "0x60002A8")]
		[Address(RVA = "0x10B9D00", Offset = "0x10B9D00", VA = "0x10B9D00")]
		public PascalCaseNamingConvention()
		{
		}
	}
	[Token(Token = "0x200007E")]
	public sealed class UnderscoredNamingConvention : INamingConvention
	{
		[Token(Token = "0x60002A9")]
		[Address(RVA = "0x1A6C6A8", Offset = "0x1A6C6A8", VA = "0x1A6C6A8", Slot = "4")]
		public string Apply(string value)
		{
			return null;
		}

		[Token(Token = "0x60002AA")]
		[Address(RVA = "0x1A6C6F8", Offset = "0x1A6C6F8", VA = "0x1A6C6F8")]
		public UnderscoredNamingConvention()
		{
		}
	}
}
namespace YamlDotNet.Serialization.EventEmitters
{
	[Token(Token = "0x200007F")]
	public abstract class ChainedEventEmitter : IEventEmitter
	{
		[Token(Token = "0x40000EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected readonly IEventEmitter nextEmitter;

		[Token(Token = "0x60002AB")]
		[Address(RVA = "0x2322A14", Offset = "0x2322A14", VA = "0x2322A14")]
		protected ChainedEventEmitter(IEventEmitter nextEmitter)
		{
		}

		[Token(Token = "0x60002AC")]
		[Address(RVA = "0x2322A94", Offset = "0x2322A94", VA = "0x2322A94", Slot = "10")]
		public virtual void Emit(AliasEventInfo eventInfo, IEmitter emitter)
		{
		}

		[Token(Token = "0x60002AD")]
		[Address(RVA = "0x2322B58", Offset = "0x2322B58", VA = "0x2322B58", Slot = "11")]
		public virtual void Emit(ScalarEventInfo eventInfo, IEmitter emitter)
		{
		}

		[Token(Token = "0x60002AE")]
		[Address(RVA = "0x2322C20", Offset = "0x2322C20", VA = "0x2322C20", Slot = "12")]
		public virtual void Emit(MappingStartEventInfo eventInfo, IEmitter emitter)
		{
		}

		[Token(Token = "0x60002AF")]
		[Address(RVA = "0x2322CE8", Offset = "0x2322CE8", VA = "0x2322CE8", Slot = "13")]
		public virtual void Emit(MappingEndEventInfo eventInfo, IEmitter emitter)
		{
		}

		[Token(Token = "0x60002B0")]
		[Address(RVA = "0x2322DB0", Offset = "0x2322DB0", VA = "0x2322DB0", Slot = "14")]
		public virtual void Emit(SequenceStartEventInfo eventInfo, IEmitter emitter)
		{
		}

		[Token(Token = "0x60002B1")]
		[Address(RVA = "0x2322E78", Offset = "0x2322E78", VA = "0x2322E78", Slot = "15")]
		public virtual void Emit(SequenceEndEventInfo eventInfo, IEmitter emitter)
		{
		}
	}
	[Token(Token = "0x2000080")]
	internal class CustomTagEventEmitter : ChainedEventEmitter
	{
		[Token(Token = "0x40000ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IDictionary<Type, string> tagMappings;

		[Token(Token = "0x60002B2")]
		[Address(RVA = "0x169AC80", Offset = "0x169AC80", VA = "0x169AC80")]
		public CustomTagEventEmitter(IEventEmitter inner, IDictionary<Type, string> tagMappings)
		{
		}

		[Token(Token = "0x60002B3")]
		[Address(RVA = "0x169ACB4", Offset = "0x169ACB4", VA = "0x169ACB4", Slot = "12")]
		public override void Emit(MappingStartEventInfo eventInfo, IEmitter emitter)
		{
		}
	}
	[Token(Token = "0x2000081")]
	public sealed class JsonEventEmitter : ChainedEventEmitter
	{
		[Token(Token = "0x60002B4")]
		[Address(RVA = "0x22F11A0", Offset = "0x22F11A0", VA = "0x22F11A0")]
		public JsonEventEmitter(IEventEmitter nextEmitter)
		{
		}

		[Token(Token = "0x60002B5")]
		[Address(RVA = "0x22F11A8", Offset = "0x22F11A8", VA = "0x22F11A8", Slot = "10")]
		public override void Emit(AliasEventInfo eventInfo, IEmitter emitter)
		{
		}

		[Token(Token = "0x60002B6")]
		[Address(RVA = "0x22F11FC", Offset = "0x22F11FC", VA = "0x22F11FC", Slot = "11")]
		public override void Emit(ScalarEventInfo eventInfo, IEmitter emitter)
		{
		}

		[Token(Token = "0x60002B7")]
		[Address(RVA = "0x22F18A0", Offset = "0x22F18A0", VA = "0x22F18A0", Slot = "12")]
		public override void Emit(MappingStartEventInfo eventInfo, IEmitter emitter)
		{
		}

		[Token(Token = "0x60002B8")]
		[Address(RVA = "0x22F18C0", Offset = "0x22F18C0", VA = "0x22F18C0", Slot = "14")]
		public override void Emit(SequenceStartEventInfo eventInfo, IEmitter emitter)
		{
		}
	}
	[Token(Token = "0x2000082")]
	public sealed class TypeAssigningEventEmitter : ChainedEventEmitter
	{
		[Token(Token = "0x40000EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly bool _assignTypeWhenDifferent;

		[Token(Token = "0x60002B9")]
		[Address(RVA = "0x1A69020", Offset = "0x1A69020", VA = "0x1A69020")]
		public TypeAssigningEventEmitter(IEventEmitter nextEmitter, bool assignTypeWhenDifferent)
		{
		}

		[Token(Token = "0x60002BA")]
		[Address(RVA = "0x1A69050", Offset = "0x1A69050", VA = "0x1A69050", Slot = "11")]
		public override void Emit(ScalarEventInfo eventInfo, IEmitter emitter)
		{
		}

		[Token(Token = "0x60002BB")]
		[Address(RVA = "0x1A69DE8", Offset = "0x1A69DE8", VA = "0x1A69DE8", Slot = "12")]
		public override void Emit(MappingStartEventInfo eventInfo, IEmitter emitter)
		{
		}

		[Token(Token = "0x60002BC")]
		[Address(RVA = "0x1A6A0DC", Offset = "0x1A6A0DC", VA = "0x1A6A0DC", Slot = "14")]
		public override void Emit(SequenceStartEventInfo eventInfo, IEmitter emitter)
		{
		}

		[Token(Token = "0x60002BD")]
		[Address(RVA = "0x1A69E28", Offset = "0x1A69E28", VA = "0x1A69E28")]
		private void AssignTypeIfDifferent(ObjectEventInfo eventInfo)
		{
		}
	}
	[Token(Token = "0x2000083")]
	public sealed class WriterEventEmitter : IEventEmitter
	{
		[Token(Token = "0x60002BE")]
		[Address(RVA = "0x1A74298", Offset = "0x1A74298", VA = "0x1A74298", Slot = "4")]
		private void YamlDotNet.Serialization.IEventEmitter.Emit(AliasEventInfo eventInfo, IEmitter emitter)
		{
		}

		[Token(Token = "0x60002BF")]
		[Address(RVA = "0x1A74384", Offset = "0x1A74384", VA = "0x1A74384", Slot = "5")]
		private void YamlDotNet.Serialization.IEventEmitter.Emit(ScalarEventInfo eventInfo, IEmitter emitter)
		{
		}

		[Token(Token = "0x60002C0")]
		[Address(RVA = "0x1A744A4", Offset = "0x1A744A4", VA = "0x1A744A4", Slot = "6")]
		private void YamlDotNet.Serialization.IEventEmitter.Emit(MappingStartEventInfo eventInfo, IEmitter emitter)
		{
		}

		[Token(Token = "0x60002C1")]
		[Address(RVA = "0x1A745AC", Offset = "0x1A745AC", VA = "0x1A745AC", Slot = "7")]
		private void YamlDotNet.Serialization.IEventEmitter.Emit(MappingEndEventInfo eventInfo, IEmitter emitter)
		{
		}

		[Token(Token = "0x60002C2")]
		[Address(RVA = "0x1A74680", Offset = "0x1A74680", VA = "0x1A74680", Slot = "8")]
		private void YamlDotNet.Serialization.IEventEmitter.Emit(SequenceStartEventInfo eventInfo, IEmitter emitter)
		{
		}

		[Token(Token = "0x60002C3")]
		[Address(RVA = "0x1A74788", Offset = "0x1A74788", VA = "0x1A74788", Slot = "9")]
		private void YamlDotNet.Serialization.IEventEmitter.Emit(SequenceEndEventInfo eventInfo, IEmitter emitter)
		{
		}

		[Token(Token = "0x60002C4")]
		[Address(RVA = "0x1A7485C", Offset = "0x1A7485C", VA = "0x1A7485C")]
		public WriterEventEmitter()
		{
		}
	}
}
namespace YamlDotNet.Serialization.Converters
{
	[Token(Token = "0x2000084")]
	public class DateTimeConverter : IYamlTypeConverter
	{
		[Token(Token = "0x40000EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly DateTimeKind kind;

		[Token(Token = "0x40000F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IFormatProvider provider;

		[Token(Token = "0x40000F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly string[] formats;

		[Token(Token = "0x60002C5")]
		[Address(RVA = "0x16A4FF8", Offset = "0x16A4FF8", VA = "0x16A4FF8")]
		public DateTimeConverter(DateTimeKind kind = DateTimeKind.Utc, [Optional] IFormatProvider provider, params string[] formats)
		{
		}

		[Token(Token = "0x60002C6")]
		[Address(RVA = "0x16A5110", Offset = "0x16A5110", VA = "0x16A5110", Slot = "4")]
		public bool Accepts(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x60002C7")]
		[Address(RVA = "0x16A519C", Offset = "0x16A519C", VA = "0x16A519C", Slot = "5")]
		public object ReadYaml(IParser parser, Type type)
		{
			return null;
		}

		[Token(Token = "0x60002C8")]
		[Address(RVA = "0x16A5414", Offset = "0x16A5414", VA = "0x16A5414", Slot = "6")]
		public void WriteYaml(IEmitter emitter, object value, Type type)
		{
		}

		[Token(Token = "0x60002C9")]
		[Address(RVA = "0x16A5398", Offset = "0x16A5398", VA = "0x16A5398")]
		private static DateTime EnsureDateTimeKind(DateTime dt, DateTimeKind kind)
		{
			return default(DateTime);
		}
	}
	[Token(Token = "0x2000085")]
	public class GuidConverter : IYamlTypeConverter
	{
		[Token(Token = "0x40000F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly bool jsonCompatible;

		[Token(Token = "0x60002CA")]
		[Address(RVA = "0x28A4BAC", Offset = "0x28A4BAC", VA = "0x28A4BAC")]
		public GuidConverter(bool jsonCompatible)
		{
		}

		[Token(Token = "0x60002CB")]
		[Address(RVA = "0x28A4BDC", Offset = "0x28A4BDC", VA = "0x28A4BDC", Slot = "4")]
		public bool Accepts(Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x60002CC")]
		[Address(RVA = "0x28A4C68", Offset = "0x28A4C68", VA = "0x28A4C68", Slot = "5")]
		public object ReadYaml(IParser parser, Type type)
		{
			return null;
		}

		[Token(Token = "0x60002CD")]
		[Address(RVA = "0x28A4E10", Offset = "0x28A4E10", VA = "0x28A4E10", Slot = "6")]
		public void WriteYaml(IEmitter emitter, object value, Type type)
		{
		}
	}
}
namespace YamlDotNet.RepresentationModel
{
	[Token(Token = "0x2000086")]
	internal class DocumentLoadingState
	{
		[Token(Token = "0x40000F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IDictionary<string, YamlNode> anchors;

		[Token(Token = "0x40000F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IList<YamlNode> nodesWithUnresolvedAliases;

		[Token(Token = "0x60002CE")]
		[Address(RVA = "0x16AA00C", Offset = "0x16AA00C", VA = "0x16AA00C")]
		public void AddAnchor(YamlNode node)
		{
		}

		[Token(Token = "0x60002CF")]
		[Address(RVA = "0x16AA1E4", Offset = "0x16AA1E4", VA = "0x16AA1E4")]
		public YamlNode GetNode(string anchor, bool throwException, Mark start, Mark end)
		{
			return null;
		}

		[Token(Token = "0x60002D0")]
		[Address(RVA = "0x16AA388", Offset = "0x16AA388", VA = "0x16AA388")]
		public void AddNodeWithUnresolvedAliases(YamlNode node)
		{
		}

		[Token(Token = "0x60002D1")]
		[Address(RVA = "0x16AA448", Offset = "0x16AA448", VA = "0x16AA448")]
		public void ResolveAliases()
		{
		}

		[Token(Token = "0x60002D2")]
		[Address(RVA = "0x16AA708", Offset = "0x16AA708", VA = "0x16AA708")]
		public DocumentLoadingState()
		{
		}
	}
	[Token(Token = "0x2000087")]
	internal class EmitterState
	{
		[Token(Token = "0x40000F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly HashSet<string> emittedAnchors;

		[Token(Token = "0x17000035")]
		public HashSet<string> EmittedAnchors
		{
			[Token(Token = "0x60002D3")]
			[Address(RVA = "0x2760C64", Offset = "0x2760C64", VA = "0x2760C64")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002D4")]
		[Address(RVA = "0x2760C6C", Offset = "0x2760C6C", VA = "0x2760C6C")]
		public EmitterState()
		{
		}
	}
	[Token(Token = "0x2000088")]
	public interface IYamlVisitor
	{
		[Token(Token = "0x60002D5")]
		void Visit(YamlStream stream);

		[Token(Token = "0x60002D6")]
		void Visit(YamlDocument document);

		[Token(Token = "0x60002D7")]
		void Visit(YamlScalarNode scalar);

		[Token(Token = "0x60002D8")]
		void Visit(YamlSequenceNode sequence);

		[Token(Token = "0x60002D9")]
		void Visit(YamlMappingNode mapping);
	}
	[Serializable]
	[Token(Token = "0x2000089")]
	internal class YamlAliasNode : YamlNode
	{
		[Token(Token = "0x2000348")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E7F4", Offset = "0xA7E7F4")]
		private sealed class <SafeAllNodes>d__7 : IEnumerable<YamlNode>, IEnumerable, IEnumerator<YamlNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000EFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000EFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private YamlNode <>2__current;

			[Token(Token = "0x4000EFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000EFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public YamlAliasNode <>4__this;

			[Token(Token = "0x17000177")]
			private YamlNode System.Collections.Generic.IEnumerator<YamlDotNet.RepresentationModel.YamlNode>.Current
			{
				[Token(Token = "0x600159C")]
				[Address(RVA = "0x1EB0030", Offset = "0x1EB0030", VA = "0x1EB0030", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000178")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600159E")]
				[Address(RVA = "0x1EB0078", Offset = "0x1EB0078", VA = "0x1EB0078", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001599")]
			[Address(RVA = "0x1EAFF98", Offset = "0x1EAFF98", VA = "0x1EAFF98")]
			[DebuggerHidden]
			public <SafeAllNodes>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x600159A")]
			[Address(RVA = "0x1EAFFD0", Offset = "0x1EAFFD0", VA = "0x1EAFFD0", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600159B")]
			[Address(RVA = "0x1EAFFD4", Offset = "0x1EAFFD4", VA = "0x1EAFFD4", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600159D")]
			[Address(RVA = "0x1EB0038", Offset = "0x1EB0038", VA = "0x1EB0038", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x600159F")]
			[Address(RVA = "0x1EB0080", Offset = "0x1EB0080", VA = "0x1EB0080", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<YamlNode> System.Collections.Generic.IEnumerable<YamlDotNet.RepresentationModel.YamlNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60015A0")]
			[Address(RVA = "0x1EB0130", Offset = "0x1EB0130", VA = "0x1EB0130", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x17000036")]
		public override YamlNodeType NodeType
		{
			[Token(Token = "0x60002E2")]
			[Address(RVA = "0x1A74BEC", Offset = "0x1A74BEC", VA = "0x1A74BEC", Slot = "9")]
			get
			{
				return default(YamlNodeType);
			}
		}

		[Token(Token = "0x60002DA")]
		[Address(RVA = "0x1A74864", Offset = "0x1A74864", VA = "0x1A74864")]
		internal YamlAliasNode(string anchor)
		{
		}

		[Token(Token = "0x60002DB")]
		[Address(RVA = "0x1A748A0", Offset = "0x1A748A0", VA = "0x1A748A0", Slot = "4")]
		internal override void ResolveAliases(DocumentLoadingState state)
		{
		}

		[Token(Token = "0x60002DC")]
		[Address(RVA = "0x1A748F4", Offset = "0x1A748F4", VA = "0x1A748F4", Slot = "5")]
		internal override void Emit(IEmitter emitter, EmitterState state)
		{
		}

		[Token(Token = "0x60002DD")]
		[Address(RVA = "0x1A74948", Offset = "0x1A74948", VA = "0x1A74948", Slot = "6")]
		public override void Accept(IYamlVisitor visitor)
		{
		}

		[Token(Token = "0x60002DE")]
		[Address(RVA = "0x1A7499C", Offset = "0x1A7499C", VA = "0x1A7499C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60002DF")]
		[Address(RVA = "0x1A74AF4", Offset = "0x1A74AF4", VA = "0x1A74AF4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60002E0")]
		[Address(RVA = "0x1A74B24", Offset = "0x1A74B24", VA = "0x1A74B24", Slot = "7")]
		internal override string ToString(RecursionLevel level)
		{
			return null;
		}

		[Token(Token = "0x60002E1")]
		[Address(RVA = "0x1A74B74", Offset = "0x1A74B74", VA = "0x1A74B74", Slot = "8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xA89E2C", Offset = "0xA89E2C")]
		internal override IEnumerable<YamlNode> SafeAllNodes(RecursionLevel level)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x200008A")]
	public class YamlDocument
	{
		[Token(Token = "0x2000349")]
		private class AnchorAssigningVisitor : YamlVisitorBase
		{
			[Token(Token = "0x4000EFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly HashSet<string> existingAnchors;

			[Token(Token = "0x4000F00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly Dictionary<YamlNode, bool> visitedNodes;

			[Token(Token = "0x60015A1")]
			[Address(RVA = "0x1EB11F8", Offset = "0x1EB11F8", VA = "0x1EB11F8")]
			public void AssignAnchors(YamlDocument document)
			{
			}

			[Token(Token = "0x60015A2")]
			[Address(RVA = "0x1EB1514", Offset = "0x1EB1514", VA = "0x1EB1514")]
			private bool VisitNodeAndFindDuplicates(YamlNode node)
			{
				return default(bool);
			}

			[Token(Token = "0x60015A3")]
			[Address(RVA = "0x1EB15FC", Offset = "0x1EB15FC", VA = "0x1EB15FC", Slot = "11")]
			public override void Visit(YamlScalarNode scalar)
			{
			}

			[Token(Token = "0x60015A4")]
			[Address(RVA = "0x1EB1600", Offset = "0x1EB1600", VA = "0x1EB1600", Slot = "13")]
			public override void Visit(YamlMappingNode mapping)
			{
			}

			[Token(Token = "0x60015A5")]
			[Address(RVA = "0x1EB1640", Offset = "0x1EB1640", VA = "0x1EB1640", Slot = "12")]
			public override void Visit(YamlSequenceNode sequence)
			{
			}

			[Token(Token = "0x60015A6")]
			[Address(RVA = "0x1EB1680", Offset = "0x1EB1680", VA = "0x1EB1680")]
			public AnchorAssigningVisitor()
			{
			}
		}

		[Token(Token = "0x40000F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F264", Offset = "0xA7F264")]
		private YamlNode <RootNode>k__BackingField;

		[Token(Token = "0x17000037")]
		public YamlNode RootNode
		{
			[Token(Token = "0x60002E3")]
			[Address(RVA = "0x1A75B48", Offset = "0x1A75B48", VA = "0x1A75B48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89E8C", Offset = "0xA89E8C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60002E4")]
			[Address(RVA = "0x1A75B50", Offset = "0x1A75B50", VA = "0x1A75B50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89E9C", Offset = "0xA89E9C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000038")]
		public IEnumerable<YamlNode> AllNodes
		{
			[Token(Token = "0x60002EB")]
			[Address(RVA = "0x1A764D0", Offset = "0x1A764D0", VA = "0x1A764D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002E5")]
		[Address(RVA = "0x1A75B58", Offset = "0x1A75B58", VA = "0x1A75B58")]
		public YamlDocument(YamlNode rootNode)
		{
		}

		[Token(Token = "0x60002E6")]
		[Address(RVA = "0x1A75B8C", Offset = "0x1A75B8C", VA = "0x1A75B8C")]
		public YamlDocument(string rootNode)
		{
		}

		[Token(Token = "0x60002E7")]
		[Address(RVA = "0x1A75C4C", Offset = "0x1A75C4C", VA = "0x1A75C4C")]
		internal YamlDocument(IParser parser)
		{
		}

		[Token(Token = "0x60002E8")]
		[Address(RVA = "0x1A76098", Offset = "0x1A76098", VA = "0x1A76098")]
		private void AssignAnchors()
		{
		}

		[Token(Token = "0x60002E9")]
		[Address(RVA = "0x1A76104", Offset = "0x1A76104", VA = "0x1A76104")]
		internal void Save(IEmitter emitter, bool assignAnchors = true)
		{
		}

		[Token(Token = "0x60002EA")]
		[Address(RVA = "0x1A76414", Offset = "0x1A76414", VA = "0x1A76414")]
		public void Accept(IYamlVisitor visitor)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200008B")]
	public sealed class YamlMappingNode : YamlNode, IEnumerable<KeyValuePair<YamlNode, YamlNode>>, IEnumerable, IYamlConvertible
	{
		[Token(Token = "0x200034A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E804", Offset = "0xA7E804")]
		private sealed class <SafeAllNodes>d__24 : IEnumerable<YamlNode>, IEnumerable, IEnumerator<YamlNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private YamlNode <>2__current;

			[Token(Token = "0x4000F03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000F04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private RecursionLevel level;

			[Token(Token = "0x4000F05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public RecursionLevel <>3__level;

			[Token(Token = "0x4000F06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public YamlMappingNode <>4__this;

			[Token(Token = "0x4000F07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private IEnumerator<KeyValuePair<YamlNode, YamlNode>> <>7__wrap1;

			[Token(Token = "0x4000F08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private KeyValuePair<YamlNode, YamlNode> <child>5__3;

			[Token(Token = "0x4000F09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private IEnumerator<YamlNode> <>7__wrap3;

			[Token(Token = "0x17000179")]
			private YamlNode System.Collections.Generic.IEnumerator<YamlDotNet.RepresentationModel.YamlNode>.Current
			{
				[Token(Token = "0x60015AD")]
				[Address(RVA = "0x1EB21EC", Offset = "0x1EB21EC", VA = "0x1EB21EC", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700017A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60015AF")]
				[Address(RVA = "0x1EB2234", Offset = "0x1EB2234", VA = "0x1EB2234", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60015A7")]
			[Address(RVA = "0x1EB1750", Offset = "0x1EB1750", VA = "0x1EB1750")]
			[DebuggerHidden]
			public <SafeAllNodes>d__24(int <>1__state)
			{
			}

			[Token(Token = "0x60015A8")]
			[Address(RVA = "0x1EB1788", Offset = "0x1EB1788", VA = "0x1EB1788", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60015A9")]
			[Address(RVA = "0x1EB1ADC", Offset = "0x1EB1ADC", VA = "0x1EB1ADC", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60015AA")]
			[Address(RVA = "0x1EB1A20", Offset = "0x1EB1A20", VA = "0x1EB1A20")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60015AB")]
			[Address(RVA = "0x1EB18A8", Offset = "0x1EB18A8", VA = "0x1EB18A8")]
			private void <>m__Finally2()
			{
			}

			[Token(Token = "0x60015AC")]
			[Address(RVA = "0x1EB1964", Offset = "0x1EB1964", VA = "0x1EB1964")]
			private void <>m__Finally3()
			{
			}

			[Token(Token = "0x60015AE")]
			[Address(RVA = "0x1EB21F4", Offset = "0x1EB21F4", VA = "0x1EB21F4", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x60015B0")]
			[Address(RVA = "0x1EB223C", Offset = "0x1EB223C", VA = "0x1EB223C", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<YamlNode> System.Collections.Generic.IEnumerable<YamlDotNet.RepresentationModel.YamlNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60015B1")]
			[Address(RVA = "0x1EB22FC", Offset = "0x1EB22FC", VA = "0x1EB22FC", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x40000F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly IDictionary<YamlNode, YamlNode> children;

		[Token(Token = "0x40000F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F274", Offset = "0xA7F274")]
		private MappingStyle <Style>k__BackingField;

		[Token(Token = "0x17000039")]
		public IDictionary<YamlNode, YamlNode> Children
		{
			[Token(Token = "0x60002EC")]
			[Address(RVA = "0x1A7697C", Offset = "0x1A7697C", VA = "0x1A7697C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003A")]
		public MappingStyle Style
		{
			[Token(Token = "0x60002ED")]
			[Address(RVA = "0x1A76984", Offset = "0x1A76984", VA = "0x1A76984")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89EAC", Offset = "0xA89EAC")]
			get
			{
				return default(MappingStyle);
			}
			[Token(Token = "0x60002EE")]
			[Address(RVA = "0x1A7698C", Offset = "0x1A7698C", VA = "0x1A7698C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89EBC", Offset = "0xA89EBC")]
			set
			{
			}
		}

		[Token(Token = "0x1700003B")]
		public override YamlNodeType NodeType
		{
			[Token(Token = "0x6000301")]
			[Address(RVA = "0x1A79148", Offset = "0x1A79148", VA = "0x1A79148", Slot = "9")]
			get
			{
				return default(YamlNodeType);
			}
		}

		[Token(Token = "0x60002EF")]
		[Address(RVA = "0x1A76994", Offset = "0x1A76994", VA = "0x1A76994")]
		internal YamlMappingNode(IParser parser, DocumentLoadingState state)
		{
		}

		[Token(Token = "0x60002F0")]
		[Address(RVA = "0x1A76A38", Offset = "0x1A76A38", VA = "0x1A76A38")]
		private void Load(IParser parser, DocumentLoadingState state)
		{
		}

		[Token(Token = "0x60002F1")]
		[Address(RVA = "0x1A76DE8", Offset = "0x1A76DE8", VA = "0x1A76DE8")]
		public YamlMappingNode()
		{
		}

		[Token(Token = "0x60002F2")]
		[Address(RVA = "0x1A76E6C", Offset = "0x1A76E6C", VA = "0x1A76E6C")]
		public YamlMappingNode(int dummy)
		{
		}

		[Token(Token = "0x60002F3")]
		[Address(RVA = "0x1A76EF0", Offset = "0x1A76EF0", VA = "0x1A76EF0")]
		public YamlMappingNode(params KeyValuePair<YamlNode, YamlNode>[] children)
		{
		}

		[Token(Token = "0x60002F4")]
		[Address(RVA = "0x1A76EF4", Offset = "0x1A76EF4", VA = "0x1A76EF4")]
		public YamlMappingNode(IEnumerable<KeyValuePair<YamlNode, YamlNode>> children)
		{
		}

		[Token(Token = "0x60002F5")]
		[Address(RVA = "0x1A772A0", Offset = "0x1A772A0", VA = "0x1A772A0")]
		public YamlMappingNode(params YamlNode[] children)
		{
		}

		[Token(Token = "0x60002F6")]
		[Address(RVA = "0x1A772A4", Offset = "0x1A772A4", VA = "0x1A772A4")]
		public YamlMappingNode(IEnumerable<YamlNode> children)
		{
		}

		[Token(Token = "0x60002F7")]
		[Address(RVA = "0x1A776CC", Offset = "0x1A776CC", VA = "0x1A776CC")]
		public void Add(YamlNode key, YamlNode value)
		{
		}

		[Token(Token = "0x60002F8")]
		[Address(RVA = "0x1A77794", Offset = "0x1A77794", VA = "0x1A77794")]
		public void Add(string key, YamlNode value)
		{
		}

		[Token(Token = "0x60002F9")]
		[Address(RVA = "0x1A77894", Offset = "0x1A77894", VA = "0x1A77894")]
		public void Add(YamlNode key, string value)
		{
		}

		[Token(Token = "0x60002FA")]
		[Address(RVA = "0x1A77994", Offset = "0x1A77994", VA = "0x1A77994")]
		public void Add(string key, string value)
		{
		}

		[Token(Token = "0x60002FB")]
		[Address(RVA = "0x1A77AC0", Offset = "0x1A77AC0", VA = "0x1A77AC0", Slot = "4")]
		internal override void ResolveAliases(DocumentLoadingState state)
		{
		}

		[Token(Token = "0x60002FC")]
		[Address(RVA = "0x1A78350", Offset = "0x1A78350", VA = "0x1A78350", Slot = "5")]
		internal override void Emit(IEmitter emitter, EmitterState state)
		{
		}

		[Token(Token = "0x60002FD")]
		[Address(RVA = "0x1A787A4", Offset = "0x1A787A4", VA = "0x1A787A4", Slot = "6")]
		public override void Accept(IYamlVisitor visitor)
		{
		}

		[Token(Token = "0x60002FE")]
		[Address(RVA = "0x1A78860", Offset = "0x1A78860", VA = "0x1A78860", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60002FF")]
		[Address(RVA = "0x1A78D6C", Offset = "0x1A78D6C", VA = "0x1A78D6C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000300")]
		[Address(RVA = "0x1A790B4", Offset = "0x1A790B4", VA = "0x1A790B4", Slot = "8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xA89ECC", Offset = "0xA89ECC")]
		internal override IEnumerable<YamlNode> SafeAllNodes(RecursionLevel level)
		{
			return null;
		}

		[Token(Token = "0x6000302")]
		[Address(RVA = "0x1A79150", Offset = "0x1A79150", VA = "0x1A79150", Slot = "7")]
		internal override string ToString(RecursionLevel level)
		{
			return null;
		}

		[Token(Token = "0x6000303")]
		[Address(RVA = "0x1A7961C", Offset = "0x1A7961C", VA = "0x1A7961C", Slot = "10")]
		public IEnumerator<KeyValuePair<YamlNode, YamlNode>> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000304")]
		[Address(RVA = "0x1A796C8", Offset = "0x1A796C8", VA = "0x1A796C8", Slot = "11")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000305")]
		[Address(RVA = "0x1A796CC", Offset = "0x1A796CC", VA = "0x1A796CC", Slot = "12")]
		private void YamlDotNet.Serialization.IYamlConvertible.Read(IParser parser, Type expectedType, ObjectDeserializer nestedObjectDeserializer)
		{
		}

		[Token(Token = "0x6000306")]
		[Address(RVA = "0x1A7973C", Offset = "0x1A7973C", VA = "0x1A7973C", Slot = "13")]
		private void YamlDotNet.Serialization.IYamlConvertible.Write(IEmitter emitter, ObjectSerializer nestedObjectSerializer)
		{
		}

		[Token(Token = "0x6000307")]
		[Address(RVA = "0x1A797B4", Offset = "0x1A797B4", VA = "0x1A797B4")]
		public static YamlMappingNode FromObject(object mapping)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x200008C")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xA7C978", Offset = "0xA7C978")]
	public abstract class YamlNode
	{
		[Serializable]
		[Token(Token = "0x200034B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E814", Offset = "0xA7E814")]
		private sealed class <>c
		{
			[Token(Token = "0x4000F0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000F0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<string, YamlNode> <>9__37_0;

			[Token(Token = "0x60015B3")]
			[Address(RVA = "0x1EB2364", Offset = "0x1EB2364", VA = "0x1EB2364")]
			public <>c()
			{
			}

			[Token(Token = "0x60015B4")]
			[Address(RVA = "0x1EB236C", Offset = "0x1EB236C", VA = "0x1EB236C")]
			internal YamlNode <op_Implicit>b__37_0(string i)
			{
				return null;
			}
		}

		[Token(Token = "0x40000F9")]
		private const int MaximumRecursionLevel = 1000;

		[Token(Token = "0x40000FA")]
		internal const string MaximumRecursionLevelReachedToStringValue = "WARNING! INFINITE RECURSION!";

		[Token(Token = "0x40000FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F284", Offset = "0xA7F284")]
		private string <Anchor>k__BackingField;

		[Token(Token = "0x40000FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F294", Offset = "0xA7F294")]
		private string <Tag>k__BackingField;

		[Token(Token = "0x40000FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F2A4", Offset = "0xA7F2A4")]
		private Mark <Start>k__BackingField;

		[Token(Token = "0x40000FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F2B4", Offset = "0xA7F2B4")]
		private Mark <End>k__BackingField;

		[Token(Token = "0x1700003C")]
		public string Anchor
		{
			[Token(Token = "0x6000308")]
			[Address(RVA = "0x1A79DB0", Offset = "0x1A79DB0", VA = "0x1A79DB0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89F2C", Offset = "0xA89F2C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000309")]
			[Address(RVA = "0x1A79DB8", Offset = "0x1A79DB8", VA = "0x1A79DB8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89F3C", Offset = "0xA89F3C")]
			set
			{
			}
		}

		[Token(Token = "0x1700003D")]
		public string Tag
		{
			[Token(Token = "0x600030A")]
			[Address(RVA = "0x1A79DC0", Offset = "0x1A79DC0", VA = "0x1A79DC0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89F4C", Offset = "0xA89F4C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600030B")]
			[Address(RVA = "0x1A79DC8", Offset = "0x1A79DC8", VA = "0x1A79DC8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89F5C", Offset = "0xA89F5C")]
			set
			{
			}
		}

		[Token(Token = "0x1700003E")]
		public Mark Start
		{
			[Token(Token = "0x600030C")]
			[Address(RVA = "0x1A79DD0", Offset = "0x1A79DD0", VA = "0x1A79DD0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89F6C", Offset = "0xA89F6C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600030D")]
			[Address(RVA = "0x1A79DD8", Offset = "0x1A79DD8", VA = "0x1A79DD8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89F7C", Offset = "0xA89F7C")]
			private set
			{
			}
		}

		[Token(Token = "0x1700003F")]
		public Mark End
		{
			[Token(Token = "0x600030E")]
			[Address(RVA = "0x1A79DE0", Offset = "0x1A79DE0", VA = "0x1A79DE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89F8C", Offset = "0xA89F8C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600030F")]
			[Address(RVA = "0x1A79DE8", Offset = "0x1A79DE8", VA = "0x1A79DE8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89F9C", Offset = "0xA89F9C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000040")]
		public IEnumerable<YamlNode> AllNodes
		{
			[Token(Token = "0x600031D")]
			[Address(RVA = "0x1A764E8", Offset = "0x1A764E8", VA = "0x1A764E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000041")]
		public abstract YamlNodeType NodeType
		{
			[Token(Token = "0x600031F")]
			get;
		}

		[Token(Token = "0x17000042")]
		public YamlNode Item
		{
			[Token(Token = "0x6000323")]
			[Address(RVA = "0x1A7A49C", Offset = "0x1A7A49C", VA = "0x1A7A49C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000043")]
		public YamlNode Item
		{
			[Token(Token = "0x6000324")]
			[Address(RVA = "0x1A7A588", Offset = "0x1A7A588", VA = "0x1A7A588")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000310")]
		[Address(RVA = "0x1A76D64", Offset = "0x1A76D64", VA = "0x1A76D64")]
		internal void Load(NodeEvent yamlEvent, DocumentLoadingState state)
		{
		}

		[Token(Token = "0x6000311")]
		[Address(RVA = "0x1A75DE0", Offset = "0x1A75DE0", VA = "0x1A75DE0")]
		internal static YamlNode ParseNode(IParser parser, DocumentLoadingState state)
		{
			return null;
		}

		[Token(Token = "0x6000312")]
		internal abstract void ResolveAliases(DocumentLoadingState state);

		[Token(Token = "0x6000313")]
		[Address(RVA = "0x1A762C4", Offset = "0x1A762C4", VA = "0x1A762C4")]
		internal void Save(IEmitter emitter, EmitterState state)
		{
		}

		[Token(Token = "0x6000314")]
		internal abstract void Emit(IEmitter emitter, EmitterState state);

		[Token(Token = "0x6000315")]
		public abstract void Accept(IYamlVisitor visitor);

		[Token(Token = "0x6000316")]
		[Address(RVA = "0x1A74A7C", Offset = "0x1A74A7C", VA = "0x1A74A7C")]
		protected bool Equals(YamlNode other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000317")]
		[Address(RVA = "0x1A74AC4", Offset = "0x1A74AC4", VA = "0x1A74AC4")]
		protected static bool SafeEquals(object first, object second)
		{
			return default(bool);
		}

		[Token(Token = "0x6000318")]
		[Address(RVA = "0x1A74B0C", Offset = "0x1A74B0C", VA = "0x1A74B0C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000319")]
		[Address(RVA = "0x1A79094", Offset = "0x1A79094", VA = "0x1A79094")]
		protected static int GetHashCode(object value)
		{
			return default(int);
		}

		[Token(Token = "0x600031A")]
		[Address(RVA = "0x1A790A8", Offset = "0x1A790A8", VA = "0x1A790A8")]
		protected static int CombineHashCodes(int h1, int h2)
		{
			return default(int);
		}

		[Token(Token = "0x600031B")]
		[Address(RVA = "0x1A79ED4", Offset = "0x1A79ED4", VA = "0x1A79ED4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600031C")]
		internal abstract string ToString(RecursionLevel level);

		[Token(Token = "0x600031E")]
		internal abstract IEnumerable<YamlNode> SafeAllNodes(RecursionLevel level);

		[Token(Token = "0x6000320")]
		[Address(RVA = "0x1A79C80", Offset = "0x1A79C80", VA = "0x1A79C80")]
		public static implicit operator YamlNode(string value)
		{
			return null;
		}

		[Token(Token = "0x6000321")]
		[Address(RVA = "0x1A79F40", Offset = "0x1A79F40", VA = "0x1A79F40")]
		public static implicit operator YamlNode(string[] sequence)
		{
			return null;
		}

		[Token(Token = "0x6000322")]
		[Address(RVA = "0x1A7A434", Offset = "0x1A7A434", VA = "0x1A7A434")]
		public static explicit operator string(YamlNode scalar)
		{
			return null;
		}

		[Token(Token = "0x6000325")]
		[Address(RVA = "0x1A74898", Offset = "0x1A74898", VA = "0x1A74898")]
		protected YamlNode()
		{
		}
	}
	[Token(Token = "0x200008D")]
	public sealed class YamlNodeIdentityEqualityComparer : IEqualityComparer<YamlNode>
	{
		[Token(Token = "0x6000326")]
		[Address(RVA = "0x1A7A674", Offset = "0x1A7A674", VA = "0x1A7A674", Slot = "4")]
		public bool Equals(YamlNode x, YamlNode y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000327")]
		[Address(RVA = "0x1A7A680", Offset = "0x1A7A680", VA = "0x1A7A680", Slot = "5")]
		public int GetHashCode(YamlNode obj)
		{
			return default(int);
		}

		[Token(Token = "0x6000328")]
		[Address(RVA = "0x1A7A6A0", Offset = "0x1A7A6A0", VA = "0x1A7A6A0")]
		public YamlNodeIdentityEqualityComparer()
		{
		}
	}
	[Token(Token = "0x200008E")]
	public enum YamlNodeType
	{
		[Token(Token = "0x4000100")]
		Alias,
		[Token(Token = "0x4000101")]
		Mapping,
		[Token(Token = "0x4000102")]
		Scalar,
		[Token(Token = "0x4000103")]
		Sequence
	}
	[Serializable]
	[Token(Token = "0x200008F")]
	[AttributeAttribute(Name = "DebuggerDisplayAttribute", RVA = "0xA7C9B0", Offset = "0xA7C9B0")]
	public sealed class YamlScalarNode : YamlNode, IYamlConvertible
	{
		[Token(Token = "0x200034C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E824", Offset = "0xA7E824")]
		private sealed class <SafeAllNodes>d__19 : IEnumerable<YamlNode>, IEnumerable, IEnumerator<YamlNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private YamlNode <>2__current;

			[Token(Token = "0x4000F0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000F0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public YamlScalarNode <>4__this;

			[Token(Token = "0x1700017B")]
			private YamlNode System.Collections.Generic.IEnumerator<YamlDotNet.RepresentationModel.YamlNode>.Current
			{
				[Token(Token = "0x60015B8")]
				[Address(RVA = "0x1EB2410", Offset = "0x1EB2410", VA = "0x1EB2410", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700017C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60015BA")]
				[Address(RVA = "0x1EB2458", Offset = "0x1EB2458", VA = "0x1EB2458", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60015B5")]
			[Address(RVA = "0x1EB2378", Offset = "0x1EB2378", VA = "0x1EB2378")]
			[DebuggerHidden]
			public <SafeAllNodes>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x60015B6")]
			[Address(RVA = "0x1EB23B0", Offset = "0x1EB23B0", VA = "0x1EB23B0", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60015B7")]
			[Address(RVA = "0x1EB23B4", Offset = "0x1EB23B4", VA = "0x1EB23B4", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60015B9")]
			[Address(RVA = "0x1EB2418", Offset = "0x1EB2418", VA = "0x1EB2418", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x60015BB")]
			[Address(RVA = "0x1EB2460", Offset = "0x1EB2460", VA = "0x1EB2460", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<YamlNode> System.Collections.Generic.IEnumerable<YamlDotNet.RepresentationModel.YamlNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60015BC")]
			[Address(RVA = "0x1EB2510", Offset = "0x1EB2510", VA = "0x1EB2510", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x4000104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F2C4", Offset = "0xA7F2C4")]
		private string <Value>k__BackingField;

		[Token(Token = "0x4000105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F2D4", Offset = "0xA7F2D4")]
		private ScalarStyle <Style>k__BackingField;

		[Token(Token = "0x17000044")]
		public string Value
		{
			[Token(Token = "0x6000329")]
			[Address(RVA = "0x1A7A6A8", Offset = "0x1A7A6A8", VA = "0x1A7A6A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89FAC", Offset = "0xA89FAC")]
			get
			{
				return null;
			}
			[Token(Token = "0x600032A")]
			[Address(RVA = "0x1A7A6B0", Offset = "0x1A7A6B0", VA = "0x1A7A6B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89FBC", Offset = "0xA89FBC")]
			set
			{
			}
		}

		[Token(Token = "0x17000045")]
		public ScalarStyle Style
		{
			[Token(Token = "0x600032B")]
			[Address(RVA = "0x1A7A6B8", Offset = "0x1A7A6B8", VA = "0x1A7A6B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89FCC", Offset = "0xA89FCC")]
			get
			{
				return default(ScalarStyle);
			}
			[Token(Token = "0x600032C")]
			[Address(RVA = "0x1A7A6C0", Offset = "0x1A7A6C0", VA = "0x1A7A6C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA89FDC", Offset = "0xA89FDC")]
			set
			{
			}
		}

		[Token(Token = "0x17000046")]
		public override YamlNodeType NodeType
		{
			[Token(Token = "0x6000339")]
			[Address(RVA = "0x1A7AB34", Offset = "0x1A7AB34", VA = "0x1A7AB34", Slot = "9")]
			get
			{
				return default(YamlNodeType);
			}
		}

		[Token(Token = "0x600032D")]
		[Address(RVA = "0x1A79DF0", Offset = "0x1A79DF0", VA = "0x1A79DF0")]
		internal YamlScalarNode(IParser parser, DocumentLoadingState state)
		{
		}

		[Token(Token = "0x600032E")]
		[Address(RVA = "0x1A7A6C8", Offset = "0x1A7A6C8", VA = "0x1A7A6C8")]
		private void Load(IParser parser, DocumentLoadingState state)
		{
		}

		[Token(Token = "0x600032F")]
		[Address(RVA = "0x1A7A75C", Offset = "0x1A7A75C", VA = "0x1A7A75C")]
		public YamlScalarNode()
		{
		}

		[Token(Token = "0x6000330")]
		[Address(RVA = "0x1A75C18", Offset = "0x1A75C18", VA = "0x1A75C18")]
		public YamlScalarNode(string value)
		{
		}

		[Token(Token = "0x6000331")]
		[Address(RVA = "0x1A7A764", Offset = "0x1A7A764", VA = "0x1A7A764", Slot = "4")]
		internal override void ResolveAliases(DocumentLoadingState state)
		{
		}

		[Token(Token = "0x6000332")]
		[Address(RVA = "0x1A7A7B8", Offset = "0x1A7A7B8", VA = "0x1A7A7B8", Slot = "5")]
		internal override void Emit(IEmitter emitter, EmitterState state)
		{
		}

		[Token(Token = "0x6000333")]
		[Address(RVA = "0x1A7A8C8", Offset = "0x1A7A8C8", VA = "0x1A7A8C8", Slot = "6")]
		public override void Accept(IYamlVisitor visitor)
		{
		}

		[Token(Token = "0x6000334")]
		[Address(RVA = "0x1A7A984", Offset = "0x1A7A984", VA = "0x1A7A984", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000335")]
		[Address(RVA = "0x1A7AA48", Offset = "0x1A7AA48", VA = "0x1A7AA48", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000336")]
		[Address(RVA = "0x1A7AA9C", Offset = "0x1A7AA9C", VA = "0x1A7AA9C")]
		public static explicit operator string(YamlScalarNode value)
		{
			return null;
		}

		[Token(Token = "0x6000337")]
		[Address(RVA = "0x1A7AAB4", Offset = "0x1A7AAB4", VA = "0x1A7AAB4", Slot = "7")]
		internal override string ToString(RecursionLevel level)
		{
			return null;
		}

		[Token(Token = "0x6000338")]
		[Address(RVA = "0x1A7AABC", Offset = "0x1A7AABC", VA = "0x1A7AABC", Slot = "8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xA89FEC", Offset = "0xA89FEC")]
		internal override IEnumerable<YamlNode> SafeAllNodes(RecursionLevel level)
		{
			return null;
		}

		[Token(Token = "0x600033A")]
		[Address(RVA = "0x1A7AB3C", Offset = "0x1A7AB3C", VA = "0x1A7AB3C", Slot = "10")]
		private void YamlDotNet.Serialization.IYamlConvertible.Read(IParser parser, Type expectedType, ObjectDeserializer nestedObjectDeserializer)
		{
		}

		[Token(Token = "0x600033B")]
		[Address(RVA = "0x1A7ABAC", Offset = "0x1A7ABAC", VA = "0x1A7ABAC", Slot = "11")]
		private void YamlDotNet.Serialization.IYamlConvertible.Write(IEmitter emitter, ObjectSerializer nestedObjectSerializer)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000090")]
	[AttributeAttribute(Name = "DebuggerDisplayAttribute", RVA = "0xA7C9E8", Offset = "0xA7C9E8")]
	public sealed class YamlSequenceNode : YamlNode, IEnumerable<YamlNode>, IEnumerable, IYamlConvertible
	{
		[Token(Token = "0x200034D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E834", Offset = "0xA7E834")]
		private sealed class <SafeAllNodes>d__19 : IEnumerable<YamlNode>, IEnumerable, IEnumerator<YamlNode>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private YamlNode <>2__current;

			[Token(Token = "0x4000F12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <>l__initialThreadId;

			[Token(Token = "0x4000F13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private RecursionLevel level;

			[Token(Token = "0x4000F14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public RecursionLevel <>3__level;

			[Token(Token = "0x4000F15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public YamlSequenceNode <>4__this;

			[Token(Token = "0x4000F16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private IEnumerator<YamlNode> <>7__wrap1;

			[Token(Token = "0x4000F17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private IEnumerator<YamlNode> <>7__wrap2;

			[Token(Token = "0x1700017D")]
			private YamlNode System.Collections.Generic.IEnumerator<YamlDotNet.RepresentationModel.YamlNode>.Current
			{
				[Token(Token = "0x60015C2")]
				[Address(RVA = "0x1EB2C1C", Offset = "0x1EB2C1C", VA = "0x1EB2C1C", Slot = "6")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700017E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60015C4")]
				[Address(RVA = "0x1EB2C64", Offset = "0x1EB2C64", VA = "0x1EB2C64", Slot = "9")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60015BD")]
			[Address(RVA = "0x1EB2514", Offset = "0x1EB2514", VA = "0x1EB2514")]
			[DebuggerHidden]
			public <SafeAllNodes>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x60015BE")]
			[Address(RVA = "0x1EB254C", Offset = "0x1EB254C", VA = "0x1EB254C", Slot = "7")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60015BF")]
			[Address(RVA = "0x1EB2754", Offset = "0x1EB2754", VA = "0x1EB2754", Slot = "8")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60015C0")]
			[Address(RVA = "0x1EB2698", Offset = "0x1EB2698", VA = "0x1EB2698")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60015C1")]
			[Address(RVA = "0x1EB25DC", Offset = "0x1EB25DC", VA = "0x1EB25DC")]
			private void <>m__Finally2()
			{
			}

			[Token(Token = "0x60015C3")]
			[Address(RVA = "0x1EB2C24", Offset = "0x1EB2C24", VA = "0x1EB2C24", Slot = "10")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}

			[Token(Token = "0x60015C5")]
			[Address(RVA = "0x1EB2C6C", Offset = "0x1EB2C6C", VA = "0x1EB2C6C", Slot = "4")]
			[DebuggerHidden]
			private IEnumerator<YamlNode> System.Collections.Generic.IEnumerable<YamlDotNet.RepresentationModel.YamlNode>.GetEnumerator()
			{
				return null;
			}

			[Token(Token = "0x60015C6")]
			[Address(RVA = "0x1EB2D2C", Offset = "0x1EB2D2C", VA = "0x1EB2D2C", Slot = "5")]
			[DebuggerHidden]
			private IEnumerator System.Collections.IEnumerable.GetEnumerator()
			{
				return null;
			}
		}

		[Token(Token = "0x4000106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly IList<YamlNode> children;

		[Token(Token = "0x4000107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F2E4", Offset = "0xA7F2E4")]
		private SequenceStyle <Style>k__BackingField;

		[Token(Token = "0x17000047")]
		public IList<YamlNode> Children
		{
			[Token(Token = "0x600033C")]
			[Address(RVA = "0x1A7AC24", Offset = "0x1A7AC24", VA = "0x1A7AC24")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000048")]
		public SequenceStyle Style
		{
			[Token(Token = "0x600033D")]
			[Address(RVA = "0x1A7AC2C", Offset = "0x1A7AC2C", VA = "0x1A7AC2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A04C", Offset = "0xA8A04C")]
			get
			{
				return default(SequenceStyle);
			}
			[Token(Token = "0x600033E")]
			[Address(RVA = "0x1A7AC34", Offset = "0x1A7AC34", VA = "0x1A7AC34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A05C", Offset = "0xA8A05C")]
			set
			{
			}
		}

		[Token(Token = "0x17000049")]
		public override YamlNodeType NodeType
		{
			[Token(Token = "0x600034C")]
			[Address(RVA = "0x1A7BF80", Offset = "0x1A7BF80", VA = "0x1A7BF80", Slot = "9")]
			get
			{
				return default(YamlNodeType);
			}
		}

		[Token(Token = "0x600033F")]
		[Address(RVA = "0x1A79E30", Offset = "0x1A79E30", VA = "0x1A79E30")]
		internal YamlSequenceNode(IParser parser, DocumentLoadingState state)
		{
		}

		[Token(Token = "0x6000340")]
		[Address(RVA = "0x1A7AC3C", Offset = "0x1A7AC3C", VA = "0x1A7AC3C")]
		private void Load(IParser parser, DocumentLoadingState state)
		{
		}

		[Token(Token = "0x6000341")]
		[Address(RVA = "0x1A7AE30", Offset = "0x1A7AE30", VA = "0x1A7AE30")]
		public YamlSequenceNode()
		{
		}

		[Token(Token = "0x6000342")]
		[Address(RVA = "0x1A7AEB4", Offset = "0x1A7AEB4", VA = "0x1A7AEB4")]
		public YamlSequenceNode(params YamlNode[] children)
		{
		}

		[Token(Token = "0x6000343")]
		[Address(RVA = "0x1A7A098", Offset = "0x1A7A098", VA = "0x1A7A098")]
		public YamlSequenceNode(IEnumerable<YamlNode> children)
		{
		}

		[Token(Token = "0x6000344")]
		[Address(RVA = "0x1A7AEB8", Offset = "0x1A7AEB8", VA = "0x1A7AEB8")]
		public void Add(YamlNode child)
		{
		}

		[Token(Token = "0x6000345")]
		[Address(RVA = "0x1A7AF78", Offset = "0x1A7AF78", VA = "0x1A7AF78")]
		public void Add(string child)
		{
		}

		[Token(Token = "0x6000346")]
		[Address(RVA = "0x1A7B070", Offset = "0x1A7B070", VA = "0x1A7B070", Slot = "4")]
		internal override void ResolveAliases(DocumentLoadingState state)
		{
		}

		[Token(Token = "0x6000347")]
		[Address(RVA = "0x1A7B408", Offset = "0x1A7B408", VA = "0x1A7B408", Slot = "5")]
		internal override void Emit(IEmitter emitter, EmitterState state)
		{
		}

		[Token(Token = "0x6000348")]
		[Address(RVA = "0x1A7B820", Offset = "0x1A7B820", VA = "0x1A7B820", Slot = "6")]
		public override void Accept(IYamlVisitor visitor)
		{
		}

		[Token(Token = "0x6000349")]
		[Address(RVA = "0x1A7B8DC", Offset = "0x1A7B8DC", VA = "0x1A7B8DC", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x600034A")]
		[Address(RVA = "0x1A7BC08", Offset = "0x1A7BC08", VA = "0x1A7BC08", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x600034B")]
		[Address(RVA = "0x1A7BEEC", Offset = "0x1A7BEEC", VA = "0x1A7BEEC", Slot = "8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xA8A06C", Offset = "0xA8A06C")]
		internal override IEnumerable<YamlNode> SafeAllNodes(RecursionLevel level)
		{
			return null;
		}

		[Token(Token = "0x600034D")]
		[Address(RVA = "0x1A7BF88", Offset = "0x1A7BF88", VA = "0x1A7BF88", Slot = "7")]
		internal override string ToString(RecursionLevel level)
		{
			return null;
		}

		[Token(Token = "0x600034E")]
		[Address(RVA = "0x1A7C374", Offset = "0x1A7C374", VA = "0x1A7C374", Slot = "10")]
		public IEnumerator<YamlNode> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600034F")]
		[Address(RVA = "0x1A7C420", Offset = "0x1A7C420", VA = "0x1A7C420", Slot = "11")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000350")]
		[Address(RVA = "0x1A7C424", Offset = "0x1A7C424", VA = "0x1A7C424", Slot = "12")]
		private void YamlDotNet.Serialization.IYamlConvertible.Read(IParser parser, Type expectedType, ObjectDeserializer nestedObjectDeserializer)
		{
		}

		[Token(Token = "0x6000351")]
		[Address(RVA = "0x1A7C494", Offset = "0x1A7C494", VA = "0x1A7C494", Slot = "13")]
		private void YamlDotNet.Serialization.IYamlConvertible.Write(IEmitter emitter, ObjectSerializer nestedObjectSerializer)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000091")]
	public class YamlStream : IEnumerable<YamlDocument>, IEnumerable
	{
		[Token(Token = "0x4000108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly IList<YamlDocument> documents;

		[Token(Token = "0x1700004A")]
		public IList<YamlDocument> Documents
		{
			[Token(Token = "0x6000352")]
			[Address(RVA = "0x1A7C7E8", Offset = "0x1A7C7E8", VA = "0x1A7C7E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000353")]
		[Address(RVA = "0x1A7C7F0", Offset = "0x1A7C7F0", VA = "0x1A7C7F0")]
		public YamlStream()
		{
		}

		[Token(Token = "0x6000354")]
		[Address(RVA = "0x1A7C874", Offset = "0x1A7C874", VA = "0x1A7C874")]
		public YamlStream(params YamlDocument[] documents)
		{
		}

		[Token(Token = "0x6000355")]
		[Address(RVA = "0x1A7C878", Offset = "0x1A7C878", VA = "0x1A7C878")]
		public YamlStream(IEnumerable<YamlDocument> documents)
		{
		}

		[Token(Token = "0x6000356")]
		[Address(RVA = "0x1A7CC14", Offset = "0x1A7CC14", VA = "0x1A7CC14")]
		public void Add(YamlDocument document)
		{
		}

		[Token(Token = "0x6000357")]
		[Address(RVA = "0x1A7CCD4", Offset = "0x1A7CCD4", VA = "0x1A7CCD4")]
		public void Load(TextReader input)
		{
		}

		[Token(Token = "0x6000358")]
		[Address(RVA = "0x1A7CD44", Offset = "0x1A7CD44", VA = "0x1A7CD44")]
		public void Load(IParser parser)
		{
		}

		[Token(Token = "0x6000359")]
		[Address(RVA = "0x1A7CF1C", Offset = "0x1A7CF1C", VA = "0x1A7CF1C")]
		public void Save(TextWriter output)
		{
		}

		[Token(Token = "0x600035A")]
		[Address(RVA = "0x1A7CF24", Offset = "0x1A7CF24", VA = "0x1A7CF24")]
		public void Save(TextWriter output, bool assignAnchors)
		{
		}

		[Token(Token = "0x600035B")]
		[Address(RVA = "0x1A7D354", Offset = "0x1A7D354", VA = "0x1A7D354")]
		public void Accept(IYamlVisitor visitor)
		{
		}

		[Token(Token = "0x600035C")]
		[Address(RVA = "0x1A7D40C", Offset = "0x1A7D40C", VA = "0x1A7D40C", Slot = "4")]
		public IEnumerator<YamlDocument> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600035D")]
		[Address(RVA = "0x1A7D4B8", Offset = "0x1A7D4B8", VA = "0x1A7D4B8", Slot = "5")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x2000092")]
	[AttributeAttribute(Name = "ObsoleteAttribute", RVA = "0xA7CA20", Offset = "0xA7CA20")]
	public abstract class YamlVisitor : IYamlVisitor
	{
		[Token(Token = "0x600035E")]
		[Address(RVA = "0x1A7D4BC", Offset = "0x1A7D4BC", VA = "0x1A7D4BC", Slot = "9")]
		protected virtual void Visit(YamlStream stream)
		{
		}

		[Token(Token = "0x600035F")]
		[Address(RVA = "0x1A7D4C0", Offset = "0x1A7D4C0", VA = "0x1A7D4C0", Slot = "10")]
		protected virtual void Visited(YamlStream stream)
		{
		}

		[Token(Token = "0x6000360")]
		[Address(RVA = "0x1A7D4C4", Offset = "0x1A7D4C4", VA = "0x1A7D4C4", Slot = "11")]
		protected virtual void Visit(YamlDocument document)
		{
		}

		[Token(Token = "0x6000361")]
		[Address(RVA = "0x1A7D4C8", Offset = "0x1A7D4C8", VA = "0x1A7D4C8", Slot = "12")]
		protected virtual void Visited(YamlDocument document)
		{
		}

		[Token(Token = "0x6000362")]
		[Address(RVA = "0x1A7D4CC", Offset = "0x1A7D4CC", VA = "0x1A7D4CC", Slot = "13")]
		protected virtual void Visit(YamlScalarNode scalar)
		{
		}

		[Token(Token = "0x6000363")]
		[Address(RVA = "0x1A7D4D0", Offset = "0x1A7D4D0", VA = "0x1A7D4D0", Slot = "14")]
		protected virtual void Visited(YamlScalarNode scalar)
		{
		}

		[Token(Token = "0x6000364")]
		[Address(RVA = "0x1A7D4D4", Offset = "0x1A7D4D4", VA = "0x1A7D4D4", Slot = "15")]
		protected virtual void Visit(YamlSequenceNode sequence)
		{
		}

		[Token(Token = "0x6000365")]
		[Address(RVA = "0x1A7D4D8", Offset = "0x1A7D4D8", VA = "0x1A7D4D8", Slot = "16")]
		protected virtual void Visited(YamlSequenceNode sequence)
		{
		}

		[Token(Token = "0x6000366")]
		[Address(RVA = "0x1A7D4DC", Offset = "0x1A7D4DC", VA = "0x1A7D4DC", Slot = "17")]
		protected virtual void Visit(YamlMappingNode mapping)
		{
		}

		[Token(Token = "0x6000367")]
		[Address(RVA = "0x1A7D4E0", Offset = "0x1A7D4E0", VA = "0x1A7D4E0", Slot = "18")]
		protected virtual void Visited(YamlMappingNode mapping)
		{
		}

		[Token(Token = "0x6000368")]
		[Address(RVA = "0x1A7D4E4", Offset = "0x1A7D4E4", VA = "0x1A7D4E4", Slot = "19")]
		protected virtual void VisitChildren(YamlStream stream)
		{
		}

		[Token(Token = "0x6000369")]
		[Address(RVA = "0x1A7D7A4", Offset = "0x1A7D7A4", VA = "0x1A7D7A4", Slot = "20")]
		protected virtual void VisitChildren(YamlDocument document)
		{
		}

		[Token(Token = "0x600036A")]
		[Address(RVA = "0x1A7D7D4", Offset = "0x1A7D7D4", VA = "0x1A7D7D4", Slot = "21")]
		protected virtual void VisitChildren(YamlSequenceNode sequence)
		{
		}

		[Token(Token = "0x600036B")]
		[Address(RVA = "0x1A7DA9C", Offset = "0x1A7DA9C", VA = "0x1A7DA9C", Slot = "22")]
		protected virtual void VisitChildren(YamlMappingNode mapping)
		{
		}

		[Token(Token = "0x600036C")]
		[Address(RVA = "0x1A7DDA8", Offset = "0x1A7DDA8", VA = "0x1A7DDA8", Slot = "4")]
		private void YamlDotNet.RepresentationModel.IYamlVisitor.Visit(YamlStream stream)
		{
		}

		[Token(Token = "0x600036D")]
		[Address(RVA = "0x1A7DDFC", Offset = "0x1A7DDFC", VA = "0x1A7DDFC", Slot = "5")]
		private void YamlDotNet.RepresentationModel.IYamlVisitor.Visit(YamlDocument document)
		{
		}

		[Token(Token = "0x600036E")]
		[Address(RVA = "0x1A7DE50", Offset = "0x1A7DE50", VA = "0x1A7DE50", Slot = "6")]
		private void YamlDotNet.RepresentationModel.IYamlVisitor.Visit(YamlScalarNode scalar)
		{
		}

		[Token(Token = "0x600036F")]
		[Address(RVA = "0x1A7DE94", Offset = "0x1A7DE94", VA = "0x1A7DE94", Slot = "7")]
		private void YamlDotNet.RepresentationModel.IYamlVisitor.Visit(YamlSequenceNode sequence)
		{
		}

		[Token(Token = "0x6000370")]
		[Address(RVA = "0x1A7DEF0", Offset = "0x1A7DEF0", VA = "0x1A7DEF0", Slot = "8")]
		private void YamlDotNet.RepresentationModel.IYamlVisitor.Visit(YamlMappingNode mapping)
		{
		}

		[Token(Token = "0x6000371")]
		[Address(RVA = "0x1A7DF4C", Offset = "0x1A7DF4C", VA = "0x1A7DF4C")]
		protected YamlVisitor()
		{
		}
	}
	[Token(Token = "0x2000093")]
	public abstract class YamlVisitorBase : IYamlVisitor
	{
		[Token(Token = "0x6000372")]
		[Address(RVA = "0x1A7DF54", Offset = "0x1A7DF54", VA = "0x1A7DF54", Slot = "9")]
		public virtual void Visit(YamlStream stream)
		{
		}

		[Token(Token = "0x6000373")]
		[Address(RVA = "0x1A7DF64", Offset = "0x1A7DF64", VA = "0x1A7DF64", Slot = "10")]
		public virtual void Visit(YamlDocument document)
		{
		}

		[Token(Token = "0x6000374")]
		[Address(RVA = "0x1A7DF74", Offset = "0x1A7DF74", VA = "0x1A7DF74", Slot = "11")]
		public virtual void Visit(YamlScalarNode scalar)
		{
		}

		[Token(Token = "0x6000375")]
		[Address(RVA = "0x1A7DF78", Offset = "0x1A7DF78", VA = "0x1A7DF78", Slot = "12")]
		public virtual void Visit(YamlSequenceNode sequence)
		{
		}

		[Token(Token = "0x6000376")]
		[Address(RVA = "0x1A7DF88", Offset = "0x1A7DF88", VA = "0x1A7DF88", Slot = "13")]
		public virtual void Visit(YamlMappingNode mapping)
		{
		}

		[Token(Token = "0x6000377")]
		[Address(RVA = "0x1A7DF98", Offset = "0x1A7DF98", VA = "0x1A7DF98", Slot = "14")]
		protected virtual void VisitPair(YamlNode key, YamlNode value)
		{
		}

		[Token(Token = "0x6000378")]
		[Address(RVA = "0x1A7DFE8", Offset = "0x1A7DFE8", VA = "0x1A7DFE8", Slot = "15")]
		protected virtual void VisitChildren(YamlStream stream)
		{
		}

		[Token(Token = "0x6000379")]
		[Address(RVA = "0x1A7E2A8", Offset = "0x1A7E2A8", VA = "0x1A7E2A8", Slot = "16")]
		protected virtual void VisitChildren(YamlDocument document)
		{
		}

		[Token(Token = "0x600037A")]
		[Address(RVA = "0x1A7E2D8", Offset = "0x1A7E2D8", VA = "0x1A7E2D8", Slot = "17")]
		protected virtual void VisitChildren(YamlSequenceNode sequence)
		{
		}

		[Token(Token = "0x600037B")]
		[Address(RVA = "0x1A7E5A0", Offset = "0x1A7E5A0", VA = "0x1A7E5A0", Slot = "18")]
		protected virtual void VisitChildren(YamlMappingNode mapping)
		{
		}

		[Token(Token = "0x600037C")]
		[Address(RVA = "0x1A7E88C", Offset = "0x1A7E88C", VA = "0x1A7E88C")]
		protected YamlVisitorBase()
		{
		}
	}
}
namespace YamlDotNet.Samples.Helpers
{
	[Token(Token = "0x2000094")]
	public interface ITestOutputHelper
	{
		[Token(Token = "0x600037D")]
		void WriteLine();

		[Token(Token = "0x600037E")]
		void WriteLine(string value);

		[Token(Token = "0x600037F")]
		void WriteLine(string format, params object[] args);
	}
}
namespace YamlDotNet.Helpers
{
	[Token(Token = "0x2000095")]
	public static class ExpressionExtensions
	{
		[Token(Token = "0x6000380")]
		[Address(RVA = "0x2761A24", Offset = "0x2761A24", VA = "0x2761A24")]
		public static PropertyInfo AsProperty(this LambdaExpression propertyAccessor)
		{
			return null;
		}

		[Token(Token = "0x6000381")]
		private static TMemberInfo TryGetMemberExpression<TMemberInfo>(LambdaExpression lambdaExpression) where TMemberInfo : MemberInfo
		{
			return null;
		}
	}
	[Token(Token = "0x2000096")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xA7CA68", Offset = "0xA7CA68")]
	internal sealed class GenericCollectionToNonGenericAdapter : IList, ICollection, IEnumerable
	{
		[Token(Token = "0x4000109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly object genericCollection;

		[Token(Token = "0x400010A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly MethodInfo addMethod;

		[Token(Token = "0x400010B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly MethodInfo indexerSetter;

		[Token(Token = "0x400010C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly MethodInfo countGetter;

		[Token(Token = "0x1700004B")]
		public bool IsFixedSize
		{
			[Token(Token = "0x6000388")]
			[Address(RVA = "0x276CCA8", Offset = "0x276CCA8", VA = "0x276CCA8", Slot = "10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700004C")]
		public bool IsReadOnly
		{
			[Token(Token = "0x6000389")]
			[Address(RVA = "0x276CCE8", Offset = "0x276CCE8", VA = "0x276CCE8", Slot = "9")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700004D")]
		public object Item
		{
			[Token(Token = "0x600038C")]
			[Address(RVA = "0x276CDA8", Offset = "0x276CDA8", VA = "0x276CDA8", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600038D")]
			[Address(RVA = "0x276CDE8", Offset = "0x276CDE8", VA = "0x276CDE8", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x1700004E")]
		public int Count
		{
			[Token(Token = "0x600038F")]
			[Address(RVA = "0x276CF60", Offset = "0x276CF60", VA = "0x276CF60", Slot = "16")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700004F")]
		public bool IsSynchronized
		{
			[Token(Token = "0x6000390")]
			[Address(RVA = "0x276CFA0", Offset = "0x276CFA0", VA = "0x276CFA0", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000050")]
		public object SyncRoot
		{
			[Token(Token = "0x6000391")]
			[Address(RVA = "0x276CFE0", Offset = "0x276CFE0", VA = "0x276CFE0", Slot = "17")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000382")]
		[Address(RVA = "0x276C8C8", Offset = "0x276C8C8", VA = "0x276C8C8")]
		public GenericCollectionToNonGenericAdapter(object genericCollection, Type genericCollectionType, Type genericListType)
		{
		}

		[Token(Token = "0x6000383")]
		[Address(RVA = "0x276CA7C", Offset = "0x276CA7C", VA = "0x276CA7C", Slot = "6")]
		public int Add(object value)
		{
			return default(int);
		}

		[Token(Token = "0x6000384")]
		[Address(RVA = "0x276CBA8", Offset = "0x276CBA8", VA = "0x276CBA8", Slot = "8")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000385")]
		[Address(RVA = "0x276CBE8", Offset = "0x276CBE8", VA = "0x276CBE8", Slot = "7")]
		public bool Contains(object value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000386")]
		[Address(RVA = "0x276CC28", Offset = "0x276CC28", VA = "0x276CC28", Slot = "11")]
		public int IndexOf(object value)
		{
			return default(int);
		}

		[Token(Token = "0x6000387")]
		[Address(RVA = "0x276CC68", Offset = "0x276CC68", VA = "0x276CC68", Slot = "12")]
		public void Insert(int index, object value)
		{
		}

		[Token(Token = "0x600038A")]
		[Address(RVA = "0x276CD28", Offset = "0x276CD28", VA = "0x276CD28", Slot = "13")]
		public void Remove(object value)
		{
		}

		[Token(Token = "0x600038B")]
		[Address(RVA = "0x276CD68", Offset = "0x276CD68", VA = "0x276CD68", Slot = "14")]
		public void RemoveAt(int index)
		{
		}

		[Token(Token = "0x600038E")]
		[Address(RVA = "0x276CF20", Offset = "0x276CF20", VA = "0x276CF20", Slot = "15")]
		public void CopyTo(Array array, int index)
		{
		}

		[Token(Token = "0x6000392")]
		[Address(RVA = "0x276D020", Offset = "0x276D020", VA = "0x276D020", Slot = "19")]
		public IEnumerator GetEnumerator()
		{
			return null;
		}
	}
	[Token(Token = "0x2000097")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xA7CAA0", Offset = "0xA7CAA0")]
	internal sealed class GenericDictionaryToNonGenericAdapter : IDictionary, ICollection, IEnumerable
	{
		[Token(Token = "0x200034E")]
		private class DictionaryEnumerator : IDictionaryEnumerator, IEnumerator
		{
			[Token(Token = "0x4000F18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly IEnumerator enumerator;

			[Token(Token = "0x4000F19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly MethodInfo getKeyMethod;

			[Token(Token = "0x4000F1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private readonly MethodInfo getValueMethod;

			[Token(Token = "0x1700017F")]
			public DictionaryEntry Entry
			{
				[Token(Token = "0x60015C8")]
				[Address(RVA = "0x1E33034", Offset = "0x1E33034", VA = "0x1E33034", Slot = "6")]
				get
				{
					return default(DictionaryEntry);
				}
			}

			[Token(Token = "0x17000180")]
			public object Key
			{
				[Token(Token = "0x60015C9")]
				[Address(RVA = "0x1E33084", Offset = "0x1E33084", VA = "0x1E33084", Slot = "4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000181")]
			public object Value
			{
				[Token(Token = "0x60015CA")]
				[Address(RVA = "0x1E33150", Offset = "0x1E33150", VA = "0x1E33150", Slot = "5")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000182")]
			public object Current
			{
				[Token(Token = "0x60015CB")]
				[Address(RVA = "0x1E3321C", Offset = "0x1E3321C", VA = "0x1E3321C", Slot = "8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60015C7")]
			[Address(RVA = "0x1E32DE0", Offset = "0x1E32DE0", VA = "0x1E32DE0")]
			public DictionaryEnumerator(object genericDictionary, Type genericDictionaryType)
			{
			}

			[Token(Token = "0x60015CC")]
			[Address(RVA = "0x1E33284", Offset = "0x1E33284", VA = "0x1E33284", Slot = "7")]
			public bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60015CD")]
			[Address(RVA = "0x1E33330", Offset = "0x1E33330", VA = "0x1E33330", Slot = "9")]
			public void Reset()
			{
			}
		}

		[Token(Token = "0x400010D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly object genericDictionary;

		[Token(Token = "0x400010E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Type genericDictionaryType;

		[Token(Token = "0x400010F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly MethodInfo indexerSetter;

		[Token(Token = "0x17000051")]
		public bool IsFixedSize
		{
			[Token(Token = "0x6000398")]
			[Address(RVA = "0x276D320", Offset = "0x276D320", VA = "0x276D320", Slot = "12")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000052")]
		public bool IsReadOnly
		{
			[Token(Token = "0x6000399")]
			[Address(RVA = "0x276D360", Offset = "0x276D360", VA = "0x276D360", Slot = "11")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000053")]
		public ICollection Keys
		{
			[Token(Token = "0x600039A")]
			[Address(RVA = "0x276D3A0", Offset = "0x276D3A0", VA = "0x276D3A0", Slot = "6")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000054")]
		public ICollection Values
		{
			[Token(Token = "0x600039C")]
			[Address(RVA = "0x276D420", Offset = "0x276D420", VA = "0x276D420", Slot = "7")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000055")]
		public object Item
		{
			[Token(Token = "0x600039D")]
			[Address(RVA = "0x276D460", Offset = "0x276D460", VA = "0x276D460", Slot = "4")]
			get
			{
				return null;
			}
			[Token(Token = "0x600039E")]
			[Address(RVA = "0x276D4A0", Offset = "0x276D4A0", VA = "0x276D4A0", Slot = "5")]
			set
			{
			}
		}

		[Token(Token = "0x17000056")]
		public int Count
		{
			[Token(Token = "0x60003A0")]
			[Address(RVA = "0x276D5EC", Offset = "0x276D5EC", VA = "0x276D5EC", Slot = "16")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000057")]
		public bool IsSynchronized
		{
			[Token(Token = "0x60003A1")]
			[Address(RVA = "0x276D62C", Offset = "0x276D62C", VA = "0x276D62C", Slot = "18")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000058")]
		public object SyncRoot
		{
			[Token(Token = "0x60003A2")]
			[Address(RVA = "0x276D66C", Offset = "0x276D66C", VA = "0x276D66C", Slot = "17")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000393")]
		[Address(RVA = "0x276D118", Offset = "0x276D118", VA = "0x276D118")]
		public GenericDictionaryToNonGenericAdapter(object genericDictionary, Type genericDictionaryType)
		{
		}

		[Token(Token = "0x6000394")]
		[Address(RVA = "0x276D1F0", Offset = "0x276D1F0", VA = "0x276D1F0", Slot = "9")]
		public void Add(object key, object value)
		{
		}

		[Token(Token = "0x6000395")]
		[Address(RVA = "0x276D230", Offset = "0x276D230", VA = "0x276D230", Slot = "10")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000396")]
		[Address(RVA = "0x276D270", Offset = "0x276D270", VA = "0x276D270", Slot = "8")]
		public bool Contains(object key)
		{
			return default(bool);
		}

		[Token(Token = "0x6000397")]
		[Address(RVA = "0x276D2B0", Offset = "0x276D2B0", VA = "0x276D2B0", Slot = "13")]
		public IDictionaryEnumerator GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x600039B")]
		[Address(RVA = "0x276D3E0", Offset = "0x276D3E0", VA = "0x276D3E0", Slot = "14")]
		public void Remove(object key)
		{
		}

		[Token(Token = "0x600039F")]
		[Address(RVA = "0x276D5AC", Offset = "0x276D5AC", VA = "0x276D5AC", Slot = "15")]
		public void CopyTo(Array array, int index)
		{
		}

		[Token(Token = "0x60003A3")]
		[Address(RVA = "0x276D6AC", Offset = "0x276D6AC", VA = "0x276D6AC", Slot = "19")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
}
namespace YamlDotNet.Core
{
	[Serializable]
	[Token(Token = "0x2000098")]
	public class AnchorNotFoundException : YamlException
	{
		[Token(Token = "0x60003A4")]
		[Address(RVA = "0x2311368", Offset = "0x2311368", VA = "0x2311368")]
		public AnchorNotFoundException()
		{
		}

		[Token(Token = "0x60003A5")]
		[Address(RVA = "0x2311370", Offset = "0x2311370", VA = "0x2311370")]
		public AnchorNotFoundException(string message)
		{
		}

		[Token(Token = "0x60003A6")]
		[Address(RVA = "0x2311378", Offset = "0x2311378", VA = "0x2311378")]
		public AnchorNotFoundException(Mark start, Mark end, string message)
		{
		}

		[Token(Token = "0x60003A7")]
		[Address(RVA = "0x2311380", Offset = "0x2311380", VA = "0x2311380")]
		public AnchorNotFoundException(string message, Exception inner)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000099")]
	internal class CharacterAnalyzer<TBuffer> where TBuffer : ILookAheadBuffer
	{
		[Token(Token = "0x4000110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly TBuffer buffer;

		[Token(Token = "0x17000059")]
		public TBuffer Buffer
		{
			[Token(Token = "0x60003A9")]
			get
			{
				return (TBuffer)null;
			}
		}

		[Token(Token = "0x1700005A")]
		public bool EndOfInput
		{
			[Token(Token = "0x60003AA")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60003A8")]
		public CharacterAnalyzer(TBuffer buffer)
		{
		}

		[Token(Token = "0x60003AB")]
		public char Peek(int offset)
		{
			return default(char);
		}

		[Token(Token = "0x60003AC")]
		public void Skip(int length)
		{
		}

		[Token(Token = "0x60003AD")]
		public bool IsAlphaNumericDashOrUnderscore(int offset = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x60003AE")]
		public bool IsAscii(int offset = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x60003AF")]
		public bool IsPrintable(int offset = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x60003B0")]
		public bool IsDigit(int offset = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x60003B1")]
		public int AsDigit(int offset = 0)
		{
			return default(int);
		}

		[Token(Token = "0x60003B2")]
		public bool IsHex(int offset)
		{
			return default(bool);
		}

		[Token(Token = "0x60003B3")]
		public int AsHex(int offset)
		{
			return default(int);
		}

		[Token(Token = "0x60003B4")]
		public bool IsSpace(int offset = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x60003B5")]
		public bool IsZero(int offset = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x60003B6")]
		public bool IsTab(int offset = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x60003B7")]
		public bool IsWhite(int offset = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x60003B8")]
		public bool IsBreak(int offset = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x60003B9")]
		public bool IsCrLf(int offset = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x60003BA")]
		public bool IsBreakOrZero(int offset = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x60003BB")]
		public bool IsWhiteBreakOrZero(int offset = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x60003BC")]
		public bool Check(char expected, int offset = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x60003BD")]
		public bool Check(string expectedCharacters, int offset = 0)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200009A")]
	internal static class Constants
	{
		[Token(Token = "0x4000111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly TagDirective[] DefaultTagDirectives;

		[Token(Token = "0x4000112")]
		public const int MajorVersion = 1;

		[Token(Token = "0x4000113")]
		public const int MinorVersion = 1;

		[Token(Token = "0x4000114")]
		public const char HandleCharacter = '!';

		[Token(Token = "0x4000115")]
		public const string DefaultHandle = "!";
	}
	[Serializable]
	[Token(Token = "0x200009B")]
	internal class Cursor
	{
		[Token(Token = "0x4000116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F2F4", Offset = "0xA7F2F4")]
		private int <Index>k__BackingField;

		[Token(Token = "0x4000117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F304", Offset = "0xA7F304")]
		private int <Line>k__BackingField;

		[Token(Token = "0x4000118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F314", Offset = "0xA7F314")]
		private int <LineOffset>k__BackingField;

		[Token(Token = "0x1700005B")]
		public int Index
		{
			[Token(Token = "0x60003BF")]
			[Address(RVA = "0x169A588", Offset = "0x169A588", VA = "0x169A588")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A0DC", Offset = "0xA8A0DC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60003C0")]
			[Address(RVA = "0x169A590", Offset = "0x169A590", VA = "0x169A590")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A0EC", Offset = "0xA8A0EC")]
			set
			{
			}
		}

		[Token(Token = "0x1700005C")]
		public int Line
		{
			[Token(Token = "0x60003C1")]
			[Address(RVA = "0x169A598", Offset = "0x169A598", VA = "0x169A598")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A0FC", Offset = "0xA8A0FC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60003C2")]
			[Address(RVA = "0x169A5A0", Offset = "0x169A5A0", VA = "0x169A5A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A10C", Offset = "0xA8A10C")]
			set
			{
			}
		}

		[Token(Token = "0x1700005D")]
		public int LineOffset
		{
			[Token(Token = "0x60003C3")]
			[Address(RVA = "0x169A5A8", Offset = "0x169A5A8", VA = "0x169A5A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A11C", Offset = "0xA8A11C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60003C4")]
			[Address(RVA = "0x169A5B0", Offset = "0x169A5B0", VA = "0x169A5B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A12C", Offset = "0xA8A12C")]
			set
			{
			}
		}

		[Token(Token = "0x60003C5")]
		[Address(RVA = "0x169A5B8", Offset = "0x169A5B8", VA = "0x169A5B8")]
		public Cursor()
		{
		}

		[Token(Token = "0x60003C6")]
		[Address(RVA = "0x169A5E4", Offset = "0x169A5E4", VA = "0x169A5E4")]
		public Cursor(Cursor cursor)
		{
		}

		[Token(Token = "0x60003C7")]
		[Address(RVA = "0x169A62C", Offset = "0x169A62C", VA = "0x169A62C")]
		public Mark Mark()
		{
			return null;
		}

		[Token(Token = "0x60003C8")]
		[Address(RVA = "0x169A6A4", Offset = "0x169A6A4", VA = "0x169A6A4")]
		public void Skip()
		{
		}

		[Token(Token = "0x60003C9")]
		[Address(RVA = "0x169A6C0", Offset = "0x169A6C0", VA = "0x169A6C0")]
		public void SkipLineByOffset(int offset)
		{
		}

		[Token(Token = "0x60003CA")]
		[Address(RVA = "0x169A6D8", Offset = "0x169A6D8", VA = "0x169A6D8")]
		public void ForceSkipLineAfterNonBreak()
		{
		}
	}
	[Token(Token = "0x200009C")]
	public class Emitter : IEmitter
	{
		[Token(Token = "0x200034F")]
		private class AnchorData
		{
			[Token(Token = "0x4000F1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string anchor;

			[Token(Token = "0x4000F1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool isAlias;

			[Token(Token = "0x60015CE")]
			[Address(RVA = "0x1E32618", Offset = "0x1E32618", VA = "0x1E32618")]
			public AnchorData()
			{
			}
		}

		[Token(Token = "0x2000350")]
		private class TagData
		{
			[Token(Token = "0x4000F1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string handle;

			[Token(Token = "0x4000F1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string suffix;

			[Token(Token = "0x60015CF")]
			[Address(RVA = "0x1E32628", Offset = "0x1E32628", VA = "0x1E32628")]
			public TagData()
			{
			}
		}

		[Token(Token = "0x2000351")]
		private class ScalarData
		{
			[Token(Token = "0x4000F1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string value;

			[Token(Token = "0x4000F20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool isMultiline;

			[Token(Token = "0x4000F21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
			public bool isFlowPlainAllowed;

			[Token(Token = "0x4000F22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
			public bool isBlockPlainAllowed;

			[Token(Token = "0x4000F23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
			public bool isSingleQuotedAllowed;

			[Token(Token = "0x4000F24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public bool isBlockAllowed;

			[Token(Token = "0x4000F25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
			public bool hasSingleQuotes;

			[Token(Token = "0x4000F26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ScalarStyle style;

			[Token(Token = "0x60015D0")]
			[Address(RVA = "0x1E32620", Offset = "0x1E32620", VA = "0x1E32620")]
			public ScalarData()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000352")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E844", Offset = "0xA7E844")]
		private sealed class <>c
		{
			[Token(Token = "0x4000F27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000F28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static MatchEvaluator <>9__89_0;

			[Token(Token = "0x60015D2")]
			[Address(RVA = "0x1E324B8", Offset = "0x1E324B8", VA = "0x1E324B8")]
			public <>c()
			{
			}

			[Token(Token = "0x60015D3")]
			[Address(RVA = "0x1E324C0", Offset = "0x1E324C0", VA = "0x1E324C0")]
			internal string <UrlEncode>b__89_0(Match match)
			{
				return null;
			}
		}

		[Token(Token = "0x4000119")]
		private const int MinBestIndent = 2;

		[Token(Token = "0x400011A")]
		private const int MaxBestIndent = 9;

		[Token(Token = "0x400011B")]
		private const int MaxAliasLength = 128;

		[Token(Token = "0x400011C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Regex uriReplacer;

		[Token(Token = "0x400011D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly TextWriter output;

		[Token(Token = "0x400011E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly bool outputUsesUnicodeEncoding;

		[Token(Token = "0x400011F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private readonly bool isCanonical;

		[Token(Token = "0x4000120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private readonly int bestIndent;

		[Token(Token = "0x4000121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly int bestWidth;

		[Token(Token = "0x4000122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private EmitterState state;

		[Token(Token = "0x4000123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly Stack<EmitterState> states;

		[Token(Token = "0x4000124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly Queue<ParsingEvent> events;

		[Token(Token = "0x4000125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly Stack<int> indents;

		[Token(Token = "0x4000126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly TagDirectiveCollection tagDirectives;

		[Token(Token = "0x4000127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int indent;

		[Token(Token = "0x4000128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int flowLevel;

		[Token(Token = "0x4000129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool isMappingContext;

		[Token(Token = "0x400012A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		private bool isSimpleKeyContext;

		[Token(Token = "0x400012B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		private bool isRootContext;

		[Token(Token = "0x400012C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int column;

		[Token(Token = "0x400012D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool isWhitespace;

		[Token(Token = "0x400012E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool isIndentation;

		[Token(Token = "0x400012F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		private bool isOpenEnded;

		[Token(Token = "0x4000130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5B")]
		private bool isDocumentEndWritten;

		[Token(Token = "0x4000131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private readonly AnchorData anchorData;

		[Token(Token = "0x4000132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private readonly TagData tagData;

		[Token(Token = "0x4000133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private readonly ScalarData scalarData;

		[Token(Token = "0x60003CB")]
		[Address(RVA = "0x16ABF48", Offset = "0x16ABF48", VA = "0x16ABF48")]
		public Emitter(TextWriter output)
		{
		}

		[Token(Token = "0x60003CC")]
		[Address(RVA = "0x16ABF58", Offset = "0x16ABF58", VA = "0x16ABF58")]
		public Emitter(TextWriter output, int bestIndent)
		{
		}

		[Token(Token = "0x60003CD")]
		[Address(RVA = "0x16ABF64", Offset = "0x16ABF64", VA = "0x16ABF64")]
		public Emitter(TextWriter output, int bestIndent, int bestWidth)
		{
		}

		[Token(Token = "0x60003CE")]
		[Address(RVA = "0x16ABF6C", Offset = "0x16ABF6C", VA = "0x16ABF6C")]
		public Emitter(TextWriter output, int bestIndent, int bestWidth, bool isCanonical)
		{
		}

		[Token(Token = "0x60003CF")]
		[Address(RVA = "0x16AC464", Offset = "0x16AC464", VA = "0x16AC464", Slot = "4")]
		public void Emit(ParsingEvent @event)
		{
		}

		[Token(Token = "0x60003D0")]
		[Address(RVA = "0x16ACA08", Offset = "0x16ACA08", VA = "0x16ACA08")]
		private bool NeedMoreEvents()
		{
			return default(bool);
		}

		[Token(Token = "0x60003D1")]
		[Address(RVA = "0x16AC5CC", Offset = "0x16AC5CC", VA = "0x16AC5CC")]
		private void AnalyzeEvent(ParsingEvent evt)
		{
		}

		[Token(Token = "0x60003D2")]
		[Address(RVA = "0x16ACC28", Offset = "0x16ACC28", VA = "0x16ACC28")]
		private void AnalyzeAnchor(string anchor, bool isAlias)
		{
		}

		[Token(Token = "0x60003D3")]
		[Address(RVA = "0x16ACC6C", Offset = "0x16ACC6C", VA = "0x16ACC6C")]
		private void AnalyzeScalar(YamlDotNet.Core.Events.Scalar scalar)
		{
		}

		[Token(Token = "0x60003D4")]
		[Address(RVA = "0x16AD6D0", Offset = "0x16AD6D0", VA = "0x16AD6D0")]
		private bool ValueIsRepresentableInOutputEncoding(string value)
		{
			return default(bool);
		}

		[Token(Token = "0x60003D5")]
		[Address(RVA = "0x16AC348", Offset = "0x16AC348", VA = "0x16AC348")]
		private bool IsUnicode(Encoding encoding)
		{
			return default(bool);
		}

		[Token(Token = "0x60003D6")]
		[Address(RVA = "0x16AD3C8", Offset = "0x16AD3C8", VA = "0x16AD3C8")]
		private void AnalyzeTag(string tag)
		{
		}

		[Token(Token = "0x60003D7")]
		[Address(RVA = "0x16AC77C", Offset = "0x16AC77C", VA = "0x16AC77C")]
		private void StateMachine(ParsingEvent evt)
		{
		}

		[Token(Token = "0x60003D8")]
		[Address(RVA = "0x16AD850", Offset = "0x16AD850", VA = "0x16AD850")]
		private void EmitComment(YamlDotNet.Core.Events.Comment comment)
		{
		}

		[Token(Token = "0x60003D9")]
		[Address(RVA = "0x16AD904", Offset = "0x16AD904", VA = "0x16AD904")]
		private void EmitStreamStart(ParsingEvent evt)
		{
		}

		[Token(Token = "0x60003DA")]
		[Address(RVA = "0x16AD9FC", Offset = "0x16AD9FC", VA = "0x16AD9FC")]
		private void EmitDocumentStart(ParsingEvent evt, bool isFirst)
		{
		}

		[Token(Token = "0x60003DB")]
		[Address(RVA = "0x16AF0C4", Offset = "0x16AF0C4", VA = "0x16AF0C4")]
		private TagDirectiveCollection NonDefaultTagsAmong(IEnumerable<TagDirective> tagCollection)
		{
			return null;
		}

		[Token(Token = "0x60003DC")]
		[Address(RVA = "0x16AF4F0", Offset = "0x16AF4F0", VA = "0x16AF4F0")]
		private void AnalyzeVersionDirective(VersionDirective versionDirective)
		{
		}

		[Token(Token = "0x60003DD")]
		[Address(RVA = "0x16AF578", Offset = "0x16AF578", VA = "0x16AF578")]
		private static void AppendTagDirectiveTo(TagDirective value, bool allowDuplicates, TagDirectiveCollection tagDirectives)
		{
		}

		[Token(Token = "0x60003DE")]
		[Address(RVA = "0x16AE358", Offset = "0x16AE358", VA = "0x16AE358")]
		private void EmitDocumentContent(ParsingEvent evt)
		{
		}

		[Token(Token = "0x60003DF")]
		[Address(RVA = "0x16AF884", Offset = "0x16AF884", VA = "0x16AF884")]
		private void EmitNode(ParsingEvent evt, bool isRoot, bool isMapping, bool isSimpleKey)
		{
		}

		[Token(Token = "0x60003E0")]
		[Address(RVA = "0x16AF9D0", Offset = "0x16AF9D0", VA = "0x16AF9D0")]
		private void EmitAlias()
		{
		}

		[Token(Token = "0x60003E1")]
		[Address(RVA = "0x16AFA34", Offset = "0x16AFA34", VA = "0x16AFA34")]
		private void EmitScalar(ParsingEvent evt)
		{
		}

		[Token(Token = "0x60003E2")]
		[Address(RVA = "0x16AFD64", Offset = "0x16AFD64", VA = "0x16AFD64")]
		private void SelectScalarStyle(ParsingEvent evt)
		{
		}

		[Token(Token = "0x60003E3")]
		[Address(RVA = "0x16B0130", Offset = "0x16B0130", VA = "0x16B0130")]
		private void ProcessScalar()
		{
		}

		[Token(Token = "0x60003E4")]
		[Address(RVA = "0x16B0214", Offset = "0x16B0214", VA = "0x16B0214")]
		private void WritePlainScalar(string value, bool allowBreaks)
		{
		}

		[Token(Token = "0x60003E5")]
		[Address(RVA = "0x16B0440", Offset = "0x16B0440", VA = "0x16B0440")]
		private void WriteSingleQuotedScalar(string value, bool allowBreaks)
		{
		}

		[Token(Token = "0x60003E6")]
		[Address(RVA = "0x16B0680", Offset = "0x16B0680", VA = "0x16B0680")]
		private void WriteDoubleQuotedScalar(string value, bool allowBreaks)
		{
		}

		[Token(Token = "0x60003E7")]
		[Address(RVA = "0x16B0C80", Offset = "0x16B0C80", VA = "0x16B0C80")]
		private void WriteLiteralScalar(string value)
		{
		}

		[Token(Token = "0x60003E8")]
		[Address(RVA = "0x16B0E40", Offset = "0x16B0E40", VA = "0x16B0E40")]
		private void WriteFoldedScalar(string value)
		{
		}

		[Token(Token = "0x60003E9")]
		[Address(RVA = "0x16B11CC", Offset = "0x16B11CC", VA = "0x16B11CC")]
		private static bool IsSpace(char character)
		{
			return default(bool);
		}

		[Token(Token = "0x60003EA")]
		[Address(RVA = "0x16B11DC", Offset = "0x16B11DC", VA = "0x16B11DC")]
		private static bool IsBreak(char character, out char breakChar)
		{
			return default(bool);
		}

		[Token(Token = "0x60003EB")]
		[Address(RVA = "0x16B1518", Offset = "0x16B1518", VA = "0x16B1518")]
		private static bool IsBlank(char character)
		{
			return default(bool);
		}

		[Token(Token = "0x60003EC")]
		[Address(RVA = "0x16B1244", Offset = "0x16B1244", VA = "0x16B1244")]
		private static bool IsPrintable(char character)
		{
			return default(bool);
		}

		[Token(Token = "0x60003ED")]
		[Address(RVA = "0x16B12AC", Offset = "0x16B12AC", VA = "0x16B12AC")]
		private static bool IsHighSurrogate(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x60003EE")]
		[Address(RVA = "0x16B12BC", Offset = "0x16B12BC", VA = "0x16B12BC")]
		private static bool IsLowSurrogate(char c)
		{
			return default(bool);
		}

		[Token(Token = "0x60003EF")]
		[Address(RVA = "0x16AFAFC", Offset = "0x16AFAFC", VA = "0x16AFAFC")]
		private void EmitSequenceStart(ParsingEvent evt)
		{
		}

		[Token(Token = "0x60003F0")]
		[Address(RVA = "0x16AFBDC", Offset = "0x16AFBDC", VA = "0x16AFBDC")]
		private void EmitMappingStart(ParsingEvent evt)
		{
		}

		[Token(Token = "0x60003F1")]
		[Address(RVA = "0x16AFCBC", Offset = "0x16AFCBC", VA = "0x16AFCBC")]
		private void ProcessAnchor()
		{
		}

		[Token(Token = "0x60003F2")]
		[Address(RVA = "0x16AFFA8", Offset = "0x16AFFA8", VA = "0x16AFFA8")]
		private void ProcessTag()
		{
		}

		[Token(Token = "0x60003F3")]
		[Address(RVA = "0x16AE3D4", Offset = "0x16AE3D4", VA = "0x16AE3D4")]
		private void EmitDocumentEnd(ParsingEvent evt)
		{
		}

		[Token(Token = "0x60003F4")]
		[Address(RVA = "0x16AE514", Offset = "0x16AE514", VA = "0x16AE514")]
		private void EmitFlowSequenceItem(ParsingEvent evt, bool isFirst)
		{
		}

		[Token(Token = "0x60003F5")]
		[Address(RVA = "0x16AE740", Offset = "0x16AE740", VA = "0x16AE740")]
		private void EmitFlowMappingKey(ParsingEvent evt, bool isFirst)
		{
		}

		[Token(Token = "0x60003F6")]
		[Address(RVA = "0x16AE9E0", Offset = "0x16AE9E0", VA = "0x16AE9E0")]
		private void EmitFlowMappingValue(ParsingEvent evt, bool isSimple)
		{
		}

		[Token(Token = "0x60003F7")]
		[Address(RVA = "0x16AEAD0", Offset = "0x16AEAD0", VA = "0x16AEAD0")]
		private void EmitBlockSequenceItem(ParsingEvent evt, bool isFirst)
		{
		}

		[Token(Token = "0x60003F8")]
		[Address(RVA = "0x16AEC64", Offset = "0x16AEC64", VA = "0x16AEC64")]
		private void EmitBlockMappingKey(ParsingEvent evt, bool isFirst)
		{
		}

		[Token(Token = "0x60003F9")]
		[Address(RVA = "0x16AEE20", Offset = "0x16AEE20", VA = "0x16AEE20")]
		private void EmitBlockMappingValue(ParsingEvent evt, bool isSimple)
		{
		}

		[Token(Token = "0x60003FA")]
		[Address(RVA = "0x16B0098", Offset = "0x16B0098", VA = "0x16B0098")]
		private void IncreaseIndent(bool isFlow, bool isIndentless)
		{
		}

		[Token(Token = "0x60003FB")]
		[Address(RVA = "0x16AF6E4", Offset = "0x16AF6E4", VA = "0x16AF6E4")]
		private bool CheckEmptyDocument()
		{
			return default(bool);
		}

		[Token(Token = "0x60003FC")]
		[Address(RVA = "0x16B1810", Offset = "0x16B1810", VA = "0x16B1810")]
		private bool CheckSimpleKey()
		{
			return default(bool);
		}

		[Token(Token = "0x60003FD")]
		[Address(RVA = "0x16B1984", Offset = "0x16B1984", VA = "0x16B1984")]
		private int SafeStringLength(string value)
		{
			return default(int);
		}

		[Token(Token = "0x60003FE")]
		[Address(RVA = "0x16B1534", Offset = "0x16B1534", VA = "0x16B1534")]
		private bool CheckEmptySequence()
		{
			return default(bool);
		}

		[Token(Token = "0x60003FF")]
		[Address(RVA = "0x16B1690", Offset = "0x16B1690", VA = "0x16B1690")]
		private bool CheckEmptyMapping()
		{
			return default(bool);
		}

		[Token(Token = "0x6000400")]
		[Address(RVA = "0x16B12CC", Offset = "0x16B12CC", VA = "0x16B12CC")]
		private void WriteBlockScalarHints(string value)
		{
		}

		[Token(Token = "0x6000401")]
		[Address(RVA = "0x16AF47C", Offset = "0x16AF47C", VA = "0x16AF47C")]
		private void WriteIndicator(string indicator, bool needWhitespace, bool whitespace, bool indentation)
		{
		}

		[Token(Token = "0x6000402")]
		[Address(RVA = "0x16AEF3C", Offset = "0x16AEF3C", VA = "0x16AEF3C")]
		private void WriteIndent()
		{
		}

		[Token(Token = "0x6000403")]
		[Address(RVA = "0x16B17EC", Offset = "0x16B17EC", VA = "0x16B17EC")]
		private void WriteAnchor(string value)
		{
		}

		[Token(Token = "0x6000404")]
		[Address(RVA = "0x16AF650", Offset = "0x16AF650", VA = "0x16AF650")]
		private void WriteTagHandle(string value)
		{
		}

		[Token(Token = "0x6000405")]
		[Address(RVA = "0x16AF694", Offset = "0x16AF694", VA = "0x16AF694")]
		private void WriteTagContent(string value, bool needsWhitespace)
		{
		}

		[Token(Token = "0x6000406")]
		[Address(RVA = "0x16B1998", Offset = "0x16B1998", VA = "0x16B1998")]
		private string UrlEncode(string text)
		{
			return null;
		}

		[Token(Token = "0x6000407")]
		[Address(RVA = "0x16AEEF8", Offset = "0x16AEEF8", VA = "0x16AEEF8")]
		private void Write(char value)
		{
		}

		[Token(Token = "0x6000408")]
		[Address(RVA = "0x16AF01C", Offset = "0x16AF01C", VA = "0x16AF01C")]
		private void Write(string value)
		{
		}

		[Token(Token = "0x6000409")]
		[Address(RVA = "0x16AF06C", Offset = "0x16AF06C", VA = "0x16AF06C")]
		private void WriteBreak(char breakCharacter = '\n')
		{
		}
	}
	[Token(Token = "0x200009D")]
	internal enum EmitterState
	{
		[Token(Token = "0x4000135")]
		StreamStart,
		[Token(Token = "0x4000136")]
		StreamEnd,
		[Token(Token = "0x4000137")]
		FirstDocumentStart,
		[Token(Token = "0x4000138")]
		DocumentStart,
		[Token(Token = "0x4000139")]
		DocumentContent,
		[Token(Token = "0x400013A")]
		DocumentEnd,
		[Token(Token = "0x400013B")]
		FlowSequenceFirstItem,
		[Token(Token = "0x400013C")]
		FlowSequenceItem,
		[Token(Token = "0x400013D")]
		FlowMappingFirstKey,
		[Token(Token = "0x400013E")]
		FlowMappingKey,
		[Token(Token = "0x400013F")]
		FlowMappingSimpleValue,
		[Token(Token = "0x4000140")]
		FlowMappingValue,
		[Token(Token = "0x4000141")]
		BlockSequenceFirstItem,
		[Token(Token = "0x4000142")]
		BlockSequenceItem,
		[Token(Token = "0x4000143")]
		BlockMappingFirstKey,
		[Token(Token = "0x4000144")]
		BlockMappingKey,
		[Token(Token = "0x4000145")]
		BlockMappingSimpleValue,
		[Token(Token = "0x4000146")]
		BlockMappingValue
	}
	[Token(Token = "0x200009E")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xA7CAD8", Offset = "0xA7CAD8")]
	public class FakeList<T>
	{
		[Token(Token = "0x4000147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IEnumerator<T> collection;

		[Token(Token = "0x4000148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int currentIndex;

		[Token(Token = "0x1700005E")]
		public T Item
		{
			[Token(Token = "0x600040D")]
			get
			{
				return (T)null;
			}
		}

		[Token(Token = "0x600040B")]
		public FakeList(IEnumerator<T> collection)
		{
		}

		[Token(Token = "0x600040C")]
		public FakeList(IEnumerable<T> collection)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200009F")]
	public class ForwardAnchorNotSupportedException : YamlException
	{
		[Token(Token = "0x600040E")]
		[Address(RVA = "0x276B0D4", Offset = "0x276B0D4", VA = "0x276B0D4")]
		public ForwardAnchorNotSupportedException()
		{
		}

		[Token(Token = "0x600040F")]
		[Address(RVA = "0x276B0DC", Offset = "0x276B0DC", VA = "0x276B0DC")]
		public ForwardAnchorNotSupportedException(string message)
		{
		}

		[Token(Token = "0x6000410")]
		[Address(RVA = "0x276B0E4", Offset = "0x276B0E4", VA = "0x276B0E4")]
		public ForwardAnchorNotSupportedException(Mark start, Mark end, string message)
		{
		}

		[Token(Token = "0x6000411")]
		[Address(RVA = "0x276B0EC", Offset = "0x276B0EC", VA = "0x276B0EC")]
		public ForwardAnchorNotSupportedException(string message, Exception inner)
		{
		}
	}
	[Token(Token = "0x20000A0")]
	internal static class HashCode
	{
		[Token(Token = "0x6000412")]
		[Address(RVA = "0x28AB0E4", Offset = "0x28AB0E4", VA = "0x28AB0E4")]
		public static int CombineHashCodes(int h1, int h2)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20000A1")]
	public interface IEmitter
	{
		[Token(Token = "0x6000413")]
		void Emit(ParsingEvent @event);
	}
	[Token(Token = "0x20000A2")]
	internal interface ILookAheadBuffer
	{
		[Token(Token = "0x1700005F")]
		bool EndOfInput
		{
			[Token(Token = "0x6000414")]
			get;
		}

		[Token(Token = "0x6000415")]
		char Peek(int offset);

		[Token(Token = "0x6000416")]
		void Skip(int length);
	}
	[Token(Token = "0x20000A3")]
	public interface IParser
	{
		[Token(Token = "0x17000060")]
		ParsingEvent Current
		{
			[Token(Token = "0x6000417")]
			get;
		}

		[Token(Token = "0x6000418")]
		bool MoveNext();
	}
	[Token(Token = "0x20000A4")]
	public interface IScanner
	{
		[Token(Token = "0x17000061")]
		Mark CurrentPosition
		{
			[Token(Token = "0x6000419")]
			get;
		}

		[Token(Token = "0x17000062")]
		Token Current
		{
			[Token(Token = "0x600041A")]
			get;
		}

		[Token(Token = "0x600041B")]
		bool MoveNext();

		[Token(Token = "0x600041C")]
		bool MoveNextWithoutConsuming();

		[Token(Token = "0x600041D")]
		void ConsumeCurrent();
	}
	[Serializable]
	[Token(Token = "0x20000A5")]
	public class InsertionQueue<T>
	{
		[Token(Token = "0x4000149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly IList<T> items;

		[Token(Token = "0x17000063")]
		public int Count
		{
			[Token(Token = "0x600041E")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x600041F")]
		public void Enqueue(T item)
		{
		}

		[Token(Token = "0x6000420")]
		public T Dequeue()
		{
			return (T)null;
		}

		[Token(Token = "0x6000421")]
		public void Insert(int index, T item)
		{
		}

		[Token(Token = "0x6000422")]
		public InsertionQueue()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000A6")]
	public class LookAheadBuffer : ILookAheadBuffer
	{
		[Token(Token = "0x400014A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly TextReader input;

		[Token(Token = "0x400014B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly char[] buffer;

		[Token(Token = "0x400014C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int firstIndex;

		[Token(Token = "0x400014D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int count;

		[Token(Token = "0x400014E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool endOfInput;

		[Token(Token = "0x17000064")]
		public bool EndOfInput
		{
			[Token(Token = "0x6000424")]
			[Address(RVA = "0x22F3370", Offset = "0x22F3370", VA = "0x22F3370", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000423")]
		[Address(RVA = "0x22F324C", Offset = "0x22F324C", VA = "0x22F324C")]
		public LookAheadBuffer(TextReader input, int capacity)
		{
		}

		[Token(Token = "0x6000425")]
		[Address(RVA = "0x22F3390", Offset = "0x22F3390", VA = "0x22F3390")]
		private int GetIndexForOffset(int offset)
		{
			return default(int);
		}

		[Token(Token = "0x6000426")]
		[Address(RVA = "0x22F33C0", Offset = "0x22F33C0", VA = "0x22F33C0", Slot = "5")]
		public char Peek(int offset)
		{
			return default(char);
		}

		[Token(Token = "0x6000427")]
		[Address(RVA = "0x22F34B4", Offset = "0x22F34B4", VA = "0x22F34B4")]
		public void Cache(int length)
		{
		}

		[Token(Token = "0x6000428")]
		[Address(RVA = "0x22F3558", Offset = "0x22F3558", VA = "0x22F3558", Slot = "6")]
		public void Skip(int length)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000A7")]
	public class Mark : IEquatable<Mark>, IComparable<Mark>, IComparable
	{
		[Token(Token = "0x400014F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Mark Empty;

		[Token(Token = "0x4000150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F324", Offset = "0xA7F324")]
		private int <Index>k__BackingField;

		[Token(Token = "0x4000151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F334", Offset = "0xA7F334")]
		private int <Line>k__BackingField;

		[Token(Token = "0x4000152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F344", Offset = "0xA7F344")]
		private int <Column>k__BackingField;

		[Token(Token = "0x17000065")]
		public int Index
		{
			[Token(Token = "0x6000429")]
			[Address(RVA = "0x22F4D10", Offset = "0x22F4D10", VA = "0x22F4D10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A13C", Offset = "0xA8A13C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600042A")]
			[Address(RVA = "0x22F4D18", Offset = "0x22F4D18", VA = "0x22F4D18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A14C", Offset = "0xA8A14C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000066")]
		public int Line
		{
			[Token(Token = "0x600042B")]
			[Address(RVA = "0x22F4D20", Offset = "0x22F4D20", VA = "0x22F4D20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A15C", Offset = "0xA8A15C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600042C")]
			[Address(RVA = "0x22F4D28", Offset = "0x22F4D28", VA = "0x22F4D28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A16C", Offset = "0xA8A16C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000067")]
		public int Column
		{
			[Token(Token = "0x600042D")]
			[Address(RVA = "0x22F4D30", Offset = "0x22F4D30", VA = "0x22F4D30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A17C", Offset = "0xA8A17C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600042E")]
			[Address(RVA = "0x22F4D38", Offset = "0x22F4D38", VA = "0x22F4D38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A18C", Offset = "0xA8A18C")]
			private set
			{
			}
		}

		[Token(Token = "0x600042F")]
		[Address(RVA = "0x22F4D40", Offset = "0x22F4D40", VA = "0x22F4D40")]
		public Mark()
		{
		}

		[Token(Token = "0x6000430")]
		[Address(RVA = "0x22F4D6C", Offset = "0x22F4D6C", VA = "0x22F4D6C")]
		public Mark(int index, int line, int column)
		{
		}

		[Token(Token = "0x6000431")]
		[Address(RVA = "0x22F4E7C", Offset = "0x22F4E7C", VA = "0x22F4E7C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000432")]
		[Address(RVA = "0x22F4F44", Offset = "0x22F4F44", VA = "0x22F4F44", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000433")]
		[Address(RVA = "0x22F4FFC", Offset = "0x22F4FFC", VA = "0x22F4FFC", Slot = "4")]
		public bool Equals(Mark other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000434")]
		[Address(RVA = "0x22F503C", Offset = "0x22F503C", VA = "0x22F503C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000435")]
		[Address(RVA = "0x22F50C4", Offset = "0x22F50C4", VA = "0x22F50C4", Slot = "6")]
		public int CompareTo(object obj)
		{
			return default(int);
		}

		[Token(Token = "0x6000436")]
		[Address(RVA = "0x22F5198", Offset = "0x22F5198", VA = "0x22F5198", Slot = "5")]
		public int CompareTo(Mark other)
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20000A8")]
	public class MaximumRecursionLevelReachedException : YamlException
	{
		[Token(Token = "0x6000438")]
		[Address(RVA = "0x22F52E4", Offset = "0x22F52E4", VA = "0x22F52E4")]
		public MaximumRecursionLevelReachedException()
		{
		}

		[Token(Token = "0x6000439")]
		[Address(RVA = "0x22F52EC", Offset = "0x22F52EC", VA = "0x22F52EC")]
		public MaximumRecursionLevelReachedException(string message)
		{
		}

		[Token(Token = "0x600043A")]
		[Address(RVA = "0x22F52F4", Offset = "0x22F52F4", VA = "0x22F52F4")]
		public MaximumRecursionLevelReachedException(Mark start, Mark end, string message)
		{
		}

		[Token(Token = "0x600043B")]
		[Address(RVA = "0x22F52FC", Offset = "0x22F52FC", VA = "0x22F52FC")]
		public MaximumRecursionLevelReachedException(string message, Exception inner)
		{
		}
	}
	[Token(Token = "0x20000A9")]
	public sealed class MergingParser : IParser
	{
		[Token(Token = "0x2000353")]
		private class ParsingEventCloner : IParsingEventVisitor
		{
			[Token(Token = "0x4000F29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private ParsingEvent clonedEvent;

			[Token(Token = "0x60015D4")]
			[Address(RVA = "0x1EA85B4", Offset = "0x1EA85B4", VA = "0x1EA85B4")]
			public ParsingEvent Clone(ParsingEvent e)
			{
				return null;
			}

			[Token(Token = "0x60015D5")]
			[Address(RVA = "0x1EA85F0", Offset = "0x1EA85F0", VA = "0x1EA85F0", Slot = "4")]
			private void YamlDotNet.Core.Events.IParsingEventVisitor.Visit(YamlDotNet.Core.Events.AnchorAlias e)
			{
			}

			[Token(Token = "0x60015D6")]
			[Address(RVA = "0x1EA8684", Offset = "0x1EA8684", VA = "0x1EA8684", Slot = "5")]
			private void YamlDotNet.Core.Events.IParsingEventVisitor.Visit(YamlDotNet.Core.Events.StreamStart e)
			{
			}

			[Token(Token = "0x60015D7")]
			[Address(RVA = "0x1EA86C4", Offset = "0x1EA86C4", VA = "0x1EA86C4", Slot = "6")]
			private void YamlDotNet.Core.Events.IParsingEventVisitor.Visit(YamlDotNet.Core.Events.StreamEnd e)
			{
			}

			[Token(Token = "0x60015D8")]
			[Address(RVA = "0x1EA8704", Offset = "0x1EA8704", VA = "0x1EA8704", Slot = "7")]
			private void YamlDotNet.Core.Events.IParsingEventVisitor.Visit(YamlDotNet.Core.Events.DocumentStart e)
			{
			}

			[Token(Token = "0x60015D9")]
			[Address(RVA = "0x1EA8744", Offset = "0x1EA8744", VA = "0x1EA8744", Slot = "8")]
			private void YamlDotNet.Core.Events.IParsingEventVisitor.Visit(YamlDotNet.Core.Events.DocumentEnd e)
			{
			}

			[Token(Token = "0x60015DA")]
			[Address(RVA = "0x1EA8784", Offset = "0x1EA8784", VA = "0x1EA8784", Slot = "9")]
			private void YamlDotNet.Core.Events.IParsingEventVisitor.Visit(YamlDotNet.Core.Events.Scalar e)
			{
			}

			[Token(Token = "0x60015DB")]
			[Address(RVA = "0x1EA884C", Offset = "0x1EA884C", VA = "0x1EA884C", Slot = "10")]
			private void YamlDotNet.Core.Events.IParsingEventVisitor.Visit(SequenceStart e)
			{
			}

			[Token(Token = "0x60015DC")]
			[Address(RVA = "0x1EA88FC", Offset = "0x1EA88FC", VA = "0x1EA88FC", Slot = "11")]
			private void YamlDotNet.Core.Events.IParsingEventVisitor.Visit(SequenceEnd e)
			{
			}

			[Token(Token = "0x60015DD")]
			[Address(RVA = "0x1EA8980", Offset = "0x1EA8980", VA = "0x1EA8980", Slot = "12")]
			private void YamlDotNet.Core.Events.IParsingEventVisitor.Visit(MappingStart e)
			{
			}

			[Token(Token = "0x60015DE")]
			[Address(RVA = "0x1EA8A30", Offset = "0x1EA8A30", VA = "0x1EA8A30", Slot = "13")]
			private void YamlDotNet.Core.Events.IParsingEventVisitor.Visit(MappingEnd e)
			{
			}

			[Token(Token = "0x60015DF")]
			[Address(RVA = "0x1EA8AB4", Offset = "0x1EA8AB4", VA = "0x1EA8AB4", Slot = "14")]
			private void YamlDotNet.Core.Events.IParsingEventVisitor.Visit(YamlDotNet.Core.Events.Comment e)
			{
			}

			[Token(Token = "0x60015E0")]
			[Address(RVA = "0x1EA8AF4", Offset = "0x1EA8AF4", VA = "0x1EA8AF4")]
			public ParsingEventCloner()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000354")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E854", Offset = "0xA7E854")]
		private sealed class <>c
		{
			[Token(Token = "0x4000F2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static readonly <>c <>9;

			[Token(Token = "0x4000F2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static Func<IEnumerable<ParsingEvent>, IEnumerable<ParsingEvent>> <>9__8_0;

			[Token(Token = "0x60015E2")]
			[Address(RVA = "0x1EA8464", Offset = "0x1EA8464", VA = "0x1EA8464")]
			public <>c()
			{
			}

			[Token(Token = "0x60015E3")]
			[Address(RVA = "0x1EA846C", Offset = "0x1EA846C", VA = "0x1EA846C")]
			internal IEnumerable<ParsingEvent> <MoveNext>b__8_0(IEnumerable<ParsingEvent> e)
			{
				return null;
			}
		}

		[Token(Token = "0x2000355")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E864", Offset = "0xA7E864")]
		private sealed class <>c__DisplayClass9_0
		{
			[Token(Token = "0x4000F2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string mappingAlias;

			[Token(Token = "0x4000F2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int nesting;

			[Token(Token = "0x4000F2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ParsingEventCloner cloner;

			[Token(Token = "0x60015E4")]
			[Address(RVA = "0x1EA8474", Offset = "0x1EA8474", VA = "0x1EA8474")]
			public <>c__DisplayClass9_0()
			{
			}

			[Token(Token = "0x60015E5")]
			[Address(RVA = "0x1EA847C", Offset = "0x1EA847C", VA = "0x1EA847C")]
			internal bool <GetMappingEvents>b__0(ParsingEvent e)
			{
				return default(bool);
			}

			[Token(Token = "0x60015E6")]
			[Address(RVA = "0x1EA8528", Offset = "0x1EA8528", VA = "0x1EA8528")]
			internal bool <GetMappingEvents>b__1(ParsingEvent e)
			{
				return default(bool);
			}

			[Token(Token = "0x60015E7")]
			[Address(RVA = "0x1EA8574", Offset = "0x1EA8574", VA = "0x1EA8574")]
			internal ParsingEvent <GetMappingEvents>b__2(ParsingEvent e)
			{
				return null;
			}
		}

		[Token(Token = "0x4000153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly List<ParsingEvent> _allEvents;

		[Token(Token = "0x4000154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly IParser _innerParser;

		[Token(Token = "0x4000155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int _currentIndex;

		[Token(Token = "0x4000156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F354", Offset = "0xA7F354")]
		private ParsingEvent <Current>k__BackingField;

		[Token(Token = "0x17000068")]
		public ParsingEvent Current
		{
			[Token(Token = "0x600043D")]
			[Address(RVA = "0x22F7030", Offset = "0x22F7030", VA = "0x22F7030", Slot = "4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A19C", Offset = "0xA8A19C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600043E")]
			[Address(RVA = "0x22F7038", Offset = "0x22F7038", VA = "0x22F7038")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A1AC", Offset = "0xA8A1AC")]
			private set
			{
			}
		}

		[Token(Token = "0x600043C")]
		[Address(RVA = "0x22F6F88", Offset = "0x22F6F88", VA = "0x22F6F88")]
		public MergingParser(IParser innerParser)
		{
		}

		[Token(Token = "0x600043F")]
		[Address(RVA = "0x22F7040", Offset = "0x22F7040", VA = "0x22F7040", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000440")]
		[Address(RVA = "0x22F7760", Offset = "0x22F7760", VA = "0x22F7760")]
		private IEnumerable<ParsingEvent> GetMappingEvents(string mappingAlias)
		{
			return null;
		}
	}
	[Token(Token = "0x20000AA")]
	public class Parser : IParser
	{
		[Token(Token = "0x2000356")]
		private class EventQueue
		{
			[Token(Token = "0x4000F2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Queue<ParsingEvent> highPriorityEvents;

			[Token(Token = "0x4000F30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly Queue<ParsingEvent> normalPriorityEvents;

			[Token(Token = "0x17000183")]
			public int Count
			{
				[Token(Token = "0x60015EA")]
				[Address(RVA = "0x1EA98D4", Offset = "0x1EA98D4", VA = "0x1EA98D4")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x60015E8")]
			[Address(RVA = "0x1EA97D4", Offset = "0x1EA97D4", VA = "0x1EA97D4")]
			public void Enqueue(ParsingEvent @event)
			{
			}

			[Token(Token = "0x60015E9")]
			[Address(RVA = "0x1EA9860", Offset = "0x1EA9860", VA = "0x1EA9860")]
			public ParsingEvent Dequeue()
			{
				return null;
			}

			[Token(Token = "0x60015EB")]
			[Address(RVA = "0x1EA9930", Offset = "0x1EA9930", VA = "0x1EA9930")]
			public EventQueue()
			{
			}
		}

		[Token(Token = "0x4000157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Stack<ParserState> states;

		[Token(Token = "0x4000158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly TagDirectiveCollection tagDirectives;

		[Token(Token = "0x4000159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ParserState state;

		[Token(Token = "0x400015A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly IScanner scanner;

		[Token(Token = "0x400015B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ParsingEvent currentEvent;

		[Token(Token = "0x400015C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Token currentToken;

		[Token(Token = "0x400015D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private readonly EventQueue pendingEvents;

		[Token(Token = "0x17000069")]
		public ParsingEvent Current
		{
			[Token(Token = "0x6000444")]
			[Address(RVA = "0x10B6AE4", Offset = "0x10B6AE4", VA = "0x10B6AE4", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000441")]
		[Address(RVA = "0x10B6558", Offset = "0x10B6558", VA = "0x10B6558")]
		private Token GetCurrentToken()
		{
			return null;
		}

		[Token(Token = "0x6000442")]
		[Address(RVA = "0x10B676C", Offset = "0x10B676C", VA = "0x10B676C")]
		public Parser(TextReader input)
		{
		}

		[Token(Token = "0x6000443")]
		[Address(RVA = "0x10B69D4", Offset = "0x10B69D4", VA = "0x10B69D4")]
		public Parser(IScanner scanner)
		{
		}

		[Token(Token = "0x6000445")]
		[Address(RVA = "0x10B6AEC", Offset = "0x10B6AEC", VA = "0x10B6AEC", Slot = "5")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000446")]
		[Address(RVA = "0x10B6B88", Offset = "0x10B6B88", VA = "0x10B6B88")]
		private ParsingEvent StateMachine()
		{
			return null;
		}

		[Token(Token = "0x6000447")]
		[Address(RVA = "0x10B94AC", Offset = "0x10B94AC", VA = "0x10B94AC")]
		private void Skip()
		{
		}

		[Token(Token = "0x6000448")]
		[Address(RVA = "0x10B6C8C", Offset = "0x10B6C8C", VA = "0x10B6C8C")]
		private ParsingEvent ParseStreamStart()
		{
			return null;
		}

		[Token(Token = "0x6000449")]
		[Address(RVA = "0x10B6DCC", Offset = "0x10B6DCC", VA = "0x10B6DCC")]
		private ParsingEvent ParseDocumentStart(bool isImplicit)
		{
			return null;
		}

		[Token(Token = "0x600044A")]
		[Address(RVA = "0x10B9580", Offset = "0x10B9580", VA = "0x10B9580")]
		private VersionDirective ProcessDirectives(TagDirectiveCollection tags)
		{
			return null;
		}

		[Token(Token = "0x600044B")]
		[Address(RVA = "0x10B9860", Offset = "0x10B9860", VA = "0x10B9860")]
		private static void AddTagDirectives(TagDirectiveCollection directives, IEnumerable<TagDirective> source)
		{
		}

		[Token(Token = "0x600044C")]
		[Address(RVA = "0x10B7314", Offset = "0x10B7314", VA = "0x10B7314")]
		private ParsingEvent ParseDocumentContent()
		{
			return null;
		}

		[Token(Token = "0x600044D")]
		[Address(RVA = "0x10B9B5C", Offset = "0x10B9B5C", VA = "0x10B9B5C")]
		private static ParsingEvent ProcessEmptyScalar(Mark position)
		{
			return null;
		}

		[Token(Token = "0x600044E")]
		[Address(RVA = "0x10B7680", Offset = "0x10B7680", VA = "0x10B7680")]
		private ParsingEvent ParseNode(bool isBlock, bool isIndentlessSequence)
		{
			return null;
		}

		[Token(Token = "0x600044F")]
		[Address(RVA = "0x10B7580", Offset = "0x10B7580", VA = "0x10B7580")]
		private ParsingEvent ParseDocumentEnd()
		{
			return null;
		}

		[Token(Token = "0x6000450")]
		[Address(RVA = "0x10B7E7C", Offset = "0x10B7E7C", VA = "0x10B7E7C")]
		private ParsingEvent ParseBlockSequenceEntry(bool isFirst)
		{
			return null;
		}

		[Token(Token = "0x6000451")]
		[Address(RVA = "0x10B814C", Offset = "0x10B814C", VA = "0x10B814C")]
		private ParsingEvent ParseIndentlessSequenceEntry()
		{
			return null;
		}

		[Token(Token = "0x6000452")]
		[Address(RVA = "0x10B83E4", Offset = "0x10B83E4", VA = "0x10B83E4")]
		private ParsingEvent ParseBlockMappingKey(bool isFirst)
		{
			return null;
		}

		[Token(Token = "0x6000453")]
		[Address(RVA = "0x10B8700", Offset = "0x10B8700", VA = "0x10B8700")]
		private ParsingEvent ParseBlockMappingValue()
		{
			return null;
		}

		[Token(Token = "0x6000454")]
		[Address(RVA = "0x10B88DC", Offset = "0x10B88DC", VA = "0x10B88DC")]
		private ParsingEvent ParseFlowSequenceEntry(bool isFirst)
		{
			return null;
		}

		[Token(Token = "0x6000455")]
		[Address(RVA = "0x10B8BD4", Offset = "0x10B8BD4", VA = "0x10B8BD4")]
		private ParsingEvent ParseFlowSequenceEntryMappingKey()
		{
			return null;
		}

		[Token(Token = "0x6000456")]
		[Address(RVA = "0x10B8D50", Offset = "0x10B8D50", VA = "0x10B8D50")]
		private ParsingEvent ParseFlowSequenceEntryMappingValue()
		{
			return null;
		}

		[Token(Token = "0x6000457")]
		[Address(RVA = "0x10B8EC8", Offset = "0x10B8EC8", VA = "0x10B8EC8")]
		private ParsingEvent ParseFlowSequenceEntryMappingEnd()
		{
			return null;
		}

		[Token(Token = "0x6000458")]
		[Address(RVA = "0x10B8F60", Offset = "0x10B8F60", VA = "0x10B8F60")]
		private ParsingEvent ParseFlowMappingKey(bool isFirst)
		{
			return null;
		}

		[Token(Token = "0x6000459")]
		[Address(RVA = "0x10B9320", Offset = "0x10B9320", VA = "0x10B9320")]
		private ParsingEvent ParseFlowMappingValue(bool isEmpty)
		{
			return null;
		}
	}
	[Token(Token = "0x20000AB")]
	public static class ParserExtensions
	{
		[Token(Token = "0x600045A")]
		public static T Expect<T>(this IParser parser) where T : ParsingEvent
		{
			return null;
		}

		[Token(Token = "0x600045B")]
		public static bool Accept<T>(this IParser parser) where T : ParsingEvent
		{
			return default(bool);
		}

		[Token(Token = "0x600045C")]
		public static T Allow<T>(this IParser parser) where T : ParsingEvent
		{
			return null;
		}

		[Token(Token = "0x600045D")]
		public static T Peek<T>(this IParser parser) where T : ParsingEvent
		{
			return null;
		}

		[Token(Token = "0x600045E")]
		[Address(RVA = "0x10B4260", Offset = "0x10B4260", VA = "0x10B4260")]
		public static void SkipThisAndNestedEvents(this IParser parser)
		{
		}
	}
	[Token(Token = "0x20000AC")]
	internal enum ParserState
	{
		[Token(Token = "0x400015F")]
		StreamStart,
		[Token(Token = "0x4000160")]
		StreamEnd,
		[Token(Token = "0x4000161")]
		ImplicitDocumentStart,
		[Token(Token = "0x4000162")]
		DocumentStart,
		[Token(Token = "0x4000163")]
		DocumentContent,
		[Token(Token = "0x4000164")]
		DocumentEnd,
		[Token(Token = "0x4000165")]
		BlockNode,
		[Token(Token = "0x4000166")]
		BlockNodeOrIndentlessSequence,
		[Token(Token = "0x4000167")]
		FlowNode,
		[Token(Token = "0x4000168")]
		BlockSequenceFirstEntry,
		[Token(Token = "0x4000169")]
		BlockSequenceEntry,
		[Token(Token = "0x400016A")]
		IndentlessSequenceEntry,
		[Token(Token = "0x400016B")]
		BlockMappingFirstKey,
		[Token(Token = "0x400016C")]
		BlockMappingKey,
		[Token(Token = "0x400016D")]
		BlockMappingValue,
		[Token(Token = "0x400016E")]
		FlowSequenceFirstEntry,
		[Token(Token = "0x400016F")]
		FlowSequenceEntry,
		[Token(Token = "0x4000170")]
		FlowSequenceEntryMappingKey,
		[Token(Token = "0x4000171")]
		FlowSequenceEntryMappingValue,
		[Token(Token = "0x4000172")]
		FlowSequenceEntryMappingEnd,
		[Token(Token = "0x4000173")]
		FlowMappingFirstKey,
		[Token(Token = "0x4000174")]
		FlowMappingKey,
		[Token(Token = "0x4000175")]
		FlowMappingValue,
		[Token(Token = "0x4000176")]
		FlowMappingEmptyValue
	}
	[Token(Token = "0x20000AD")]
	internal class RecursionLevel
	{
		[Token(Token = "0x4000177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int current;

		[Token(Token = "0x4000178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F364", Offset = "0xA7F364")]
		private int <Maximum>k__BackingField;

		[Token(Token = "0x1700006A")]
		public int Maximum
		{
			[Token(Token = "0x600045F")]
			[Address(RVA = "0x10C09B0", Offset = "0x10C09B0", VA = "0x10C09B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A20C", Offset = "0xA8A20C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000460")]
			[Address(RVA = "0x10C09B8", Offset = "0x10C09B8", VA = "0x10C09B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A21C", Offset = "0xA8A21C")]
			private set
			{
			}
		}

		[Token(Token = "0x6000461")]
		[Address(RVA = "0x10C09C0", Offset = "0x10C09C0", VA = "0x10C09C0")]
		public RecursionLevel(int maximum)
		{
		}

		[Token(Token = "0x6000462")]
		[Address(RVA = "0x10C09EC", Offset = "0x10C09EC", VA = "0x10C09EC")]
		public void Increment()
		{
		}

		[Token(Token = "0x6000463")]
		[Address(RVA = "0x10C0A44", Offset = "0x10C0A44", VA = "0x10C0A44")]
		public bool TryIncrement()
		{
			return default(bool);
		}

		[Token(Token = "0x6000464")]
		[Address(RVA = "0x10C0A68", Offset = "0x10C0A68", VA = "0x10C0A68")]
		public void Decrement()
		{
		}
	}
	[Token(Token = "0x20000AE")]
	public enum ScalarStyle
	{
		[Token(Token = "0x400017A")]
		Any,
		[Token(Token = "0x400017B")]
		Plain,
		[Token(Token = "0x400017C")]
		SingleQuoted,
		[Token(Token = "0x400017D")]
		DoubleQuoted,
		[Token(Token = "0x400017E")]
		Literal,
		[Token(Token = "0x400017F")]
		Folded
	}
	[Serializable]
	[Token(Token = "0x20000AF")]
	public class Scanner : IScanner
	{
		[Token(Token = "0x4000180")]
		private const int MaxVersionNumberLength = 9;

		[Token(Token = "0x4000181")]
		private const int MaxBufferLength = 8;

		[Token(Token = "0x4000182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly IDictionary<char, char> simpleEscapeCodes;

		[Token(Token = "0x4000183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Stack<int> indents;

		[Token(Token = "0x4000184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly InsertionQueue<Token> tokens;

		[Token(Token = "0x4000185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly Stack<SimpleKey> simpleKeys;

		[Token(Token = "0x4000186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly CharacterAnalyzer<LookAheadBuffer> analyzer;

		[Token(Token = "0x4000187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly Cursor cursor;

		[Token(Token = "0x4000188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool streamStartProduced;

		[Token(Token = "0x4000189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool streamEndProduced;

		[Token(Token = "0x400018A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int indent;

		[Token(Token = "0x400018B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool simpleKeyAllowed;

		[Token(Token = "0x400018C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int flowLevel;

		[Token(Token = "0x400018D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int tokensParsed;

		[Token(Token = "0x400018E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool tokenAvailable;

		[Token(Token = "0x400018F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Token previous;

		[Token(Token = "0x4000190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F374", Offset = "0xA7F374")]
		private bool <SkipComments>k__BackingField;

		[Token(Token = "0x4000191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F384", Offset = "0xA7F384")]
		private Token <Current>k__BackingField;

		[Token(Token = "0x1700006B")]
		public bool SkipComments
		{
			[Token(Token = "0x6000465")]
			[Address(RVA = "0x10C5400", Offset = "0x10C5400", VA = "0x10C5400")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A22C", Offset = "0xA8A22C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000466")]
			[Address(RVA = "0x10C5408", Offset = "0x10C5408", VA = "0x10C5408")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A23C", Offset = "0xA8A23C")]
			private set
			{
			}
		}

		[Token(Token = "0x1700006C")]
		public Token Current
		{
			[Token(Token = "0x6000467")]
			[Address(RVA = "0x10C5414", Offset = "0x10C5414", VA = "0x10C5414", Slot = "5")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A24C", Offset = "0xA8A24C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000468")]
			[Address(RVA = "0x10C541C", Offset = "0x10C541C", VA = "0x10C541C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A25C", Offset = "0xA8A25C")]
			private set
			{
			}
		}

		[Token(Token = "0x1700006D")]
		public Mark CurrentPosition
		{
			[Token(Token = "0x600046A")]
			[Address(RVA = "0x10C5424", Offset = "0x10C5424", VA = "0x10C5424", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000469")]
		[Address(RVA = "0x10B67DC", Offset = "0x10B67DC", VA = "0x10B67DC")]
		public Scanner(TextReader input, bool skipComments = true)
		{
		}

		[Token(Token = "0x600046B")]
		[Address(RVA = "0x10C5440", Offset = "0x10C5440", VA = "0x10C5440", Slot = "6")]
		public bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600046C")]
		[Address(RVA = "0x10C54B8", Offset = "0x10C54B8", VA = "0x10C54B8", Slot = "7")]
		public bool MoveNextWithoutConsuming()
		{
			return default(bool);
		}

		[Token(Token = "0x600046D")]
		[Address(RVA = "0x10C5470", Offset = "0x10C5470", VA = "0x10C5470", Slot = "8")]
		public void ConsumeCurrent()
		{
		}

		[Token(Token = "0x600046E")]
		[Address(RVA = "0x10C5794", Offset = "0x10C5794", VA = "0x10C5794")]
		private char ReadCurrentCharacter()
		{
			return default(char);
		}

		[Token(Token = "0x600046F")]
		[Address(RVA = "0x10C5868", Offset = "0x10C5868", VA = "0x10C5868")]
		private char ReadLine()
		{
			return default(char);
		}

		[Token(Token = "0x6000470")]
		[Address(RVA = "0x10C5584", Offset = "0x10C5584", VA = "0x10C5584")]
		private void FetchMoreTokens()
		{
		}

		[Token(Token = "0x6000471")]
		[Address(RVA = "0x10C6404", Offset = "0x10C6404", VA = "0x10C6404")]
		private static bool StartsWith(StringBuilder what, char start)
		{
			return default(bool);
		}

		[Token(Token = "0x6000472")]
		[Address(RVA = "0x10C5A98", Offset = "0x10C5A98", VA = "0x10C5A98")]
		private void StaleSimpleKeys()
		{
		}

		[Token(Token = "0x6000473")]
		[Address(RVA = "0x10C5CAC", Offset = "0x10C5CAC", VA = "0x10C5CAC")]
		private void FetchNextToken()
		{
		}

		[Token(Token = "0x6000474")]
		[Address(RVA = "0x10C7440", Offset = "0x10C7440", VA = "0x10C7440")]
		private bool CheckWhiteSpace()
		{
			return default(bool);
		}

		[Token(Token = "0x6000475")]
		[Address(RVA = "0x10C74E4", Offset = "0x10C74E4", VA = "0x10C74E4")]
		private bool IsDocumentIndicator()
		{
			return default(bool);
		}

		[Token(Token = "0x6000476")]
		[Address(RVA = "0x10C5800", Offset = "0x10C5800", VA = "0x10C5800")]
		private void Skip()
		{
		}

		[Token(Token = "0x6000477")]
		[Address(RVA = "0x10C5928", Offset = "0x10C5928", VA = "0x10C5928")]
		private void SkipLine()
		{
		}

		[Token(Token = "0x6000478")]
		[Address(RVA = "0x10C656C", Offset = "0x10C656C", VA = "0x10C656C")]
		private void ScanToNextToken()
		{
		}

		[Token(Token = "0x6000479")]
		[Address(RVA = "0x10C7644", Offset = "0x10C7644", VA = "0x10C7644")]
		private void ProcessComment()
		{
		}

		[Token(Token = "0x600047A")]
		[Address(RVA = "0x10C6460", Offset = "0x10C6460", VA = "0x10C6460")]
		private void FetchStreamStart()
		{
		}

		[Token(Token = "0x600047B")]
		[Address(RVA = "0x10C6608", Offset = "0x10C6608", VA = "0x10C6608")]
		private void UnrollIndent(int column)
		{
		}

		[Token(Token = "0x600047C")]
		[Address(RVA = "0x10C6710", Offset = "0x10C6710", VA = "0x10C6710")]
		private void FetchStreamEnd()
		{
		}

		[Token(Token = "0x600047D")]
		[Address(RVA = "0x10C67EC", Offset = "0x10C67EC", VA = "0x10C67EC")]
		private void FetchDirective()
		{
		}

		[Token(Token = "0x600047E")]
		[Address(RVA = "0x10C79B0", Offset = "0x10C79B0", VA = "0x10C79B0")]
		private Token ScanDirective()
		{
			return null;
		}

		[Token(Token = "0x600047F")]
		[Address(RVA = "0x10C6868", Offset = "0x10C6868", VA = "0x10C6868")]
		private void FetchDocumentIndicator(bool isStartToken)
		{
		}

		[Token(Token = "0x6000480")]
		[Address(RVA = "0x10C6990", Offset = "0x10C6990", VA = "0x10C6990")]
		private void FetchFlowCollectionStart(bool isSequenceToken)
		{
		}

		[Token(Token = "0x6000481")]
		[Address(RVA = "0x10C8200", Offset = "0x10C8200", VA = "0x10C8200")]
		private void IncreaseFlowLevel()
		{
		}

		[Token(Token = "0x6000482")]
		[Address(RVA = "0x10C6A90", Offset = "0x10C6A90", VA = "0x10C6A90")]
		private void FetchFlowCollectionEnd(bool isSequenceToken)
		{
		}

		[Token(Token = "0x6000483")]
		[Address(RVA = "0x10C829C", Offset = "0x10C829C", VA = "0x10C829C")]
		private void DecreaseFlowLevel()
		{
		}

		[Token(Token = "0x6000484")]
		[Address(RVA = "0x10C6B8C", Offset = "0x10C6B8C", VA = "0x10C6B8C")]
		private void FetchFlowEntry()
		{
		}

		[Token(Token = "0x6000485")]
		[Address(RVA = "0x10C6C64", Offset = "0x10C6C64", VA = "0x10C6C64")]
		private void FetchBlockEntry()
		{
		}

		[Token(Token = "0x6000486")]
		[Address(RVA = "0x10C6DD4", Offset = "0x10C6DD4", VA = "0x10C6DD4")]
		private void FetchKey()
		{
		}

		[Token(Token = "0x6000487")]
		[Address(RVA = "0x10C6F4C", Offset = "0x10C6F4C", VA = "0x10C6F4C")]
		private void FetchValue()
		{
		}

		[Token(Token = "0x6000488")]
		[Address(RVA = "0x10C830C", Offset = "0x10C830C", VA = "0x10C830C")]
		private void RollIndent(int column, int number, bool isSequence, Mark position)
		{
		}

		[Token(Token = "0x6000489")]
		[Address(RVA = "0x10C71DC", Offset = "0x10C71DC", VA = "0x10C71DC")]
		private void FetchAnchor(bool isAlias)
		{
		}

		[Token(Token = "0x600048A")]
		[Address(RVA = "0x10C8484", Offset = "0x10C8484", VA = "0x10C8484")]
		private Token ScanAnchor(bool isAlias)
		{
			return null;
		}

		[Token(Token = "0x600048B")]
		[Address(RVA = "0x10C725C", Offset = "0x10C725C", VA = "0x10C725C")]
		private void FetchTag()
		{
		}

		[Token(Token = "0x600048C")]
		[Address(RVA = "0x10C86F0", Offset = "0x10C86F0", VA = "0x10C86F0")]
		private Token ScanTag()
		{
			return null;
		}

		[Token(Token = "0x600048D")]
		[Address(RVA = "0x10C72CC", Offset = "0x10C72CC", VA = "0x10C72CC")]
		private void FetchBlockScalar(bool isLiteral)
		{
		}

		[Token(Token = "0x600048E")]
		[Address(RVA = "0x10C8E54", Offset = "0x10C8E54", VA = "0x10C8E54")]
		private Token ScanBlockScalar(bool isLiteral)
		{
			return null;
		}

		[Token(Token = "0x600048F")]
		[Address(RVA = "0x10C9530", Offset = "0x10C9530", VA = "0x10C9530")]
		private int ScanBlockScalarBreaks(int currentIndent, StringBuilder breaks, Mark start, ref Mark end)
		{
			return default(int);
		}

		[Token(Token = "0x6000490")]
		[Address(RVA = "0x10C7350", Offset = "0x10C7350", VA = "0x10C7350")]
		private void FetchFlowScalar(bool isSingleQuoted)
		{
		}

		[Token(Token = "0x6000491")]
		[Address(RVA = "0x10C97AC", Offset = "0x10C97AC", VA = "0x10C97AC")]
		private Token ScanFlowScalar(bool isSingleQuoted)
		{
			return null;
		}

		[Token(Token = "0x6000492")]
		[Address(RVA = "0x10C73D0", Offset = "0x10C73D0", VA = "0x10C73D0")]
		private void FetchPlainScalar()
		{
		}

		[Token(Token = "0x6000493")]
		[Address(RVA = "0x10CA0F4", Offset = "0x10CA0F4", VA = "0x10CA0F4")]
		private Token ScanPlainScalar()
		{
			return null;
		}

		[Token(Token = "0x6000494")]
		[Address(RVA = "0x10C78B8", Offset = "0x10C78B8", VA = "0x10C78B8")]
		private void RemoveSimpleKey()
		{
		}

		[Token(Token = "0x6000495")]
		[Address(RVA = "0x10C7BD8", Offset = "0x10C7BD8", VA = "0x10C7BD8")]
		private string ScanDirectiveName(Mark start)
		{
			return null;
		}

		[Token(Token = "0x6000496")]
		[Address(RVA = "0x10CA74C", Offset = "0x10CA74C", VA = "0x10CA74C")]
		private void SkipWhitespaces()
		{
		}

		[Token(Token = "0x6000497")]
		[Address(RVA = "0x10C7D84", Offset = "0x10C7D84", VA = "0x10C7D84")]
		private Token ScanVersionDirectiveValue(Mark start)
		{
			return null;
		}

		[Token(Token = "0x6000498")]
		[Address(RVA = "0x10C7F00", Offset = "0x10C7F00", VA = "0x10C7F00")]
		private Token ScanTagDirectiveValue(Mark start)
		{
			return null;
		}

		[Token(Token = "0x6000499")]
		[Address(RVA = "0x10C89C8", Offset = "0x10C89C8", VA = "0x10C89C8")]
		private string ScanTagUri(string head, Mark start)
		{
			return null;
		}

		[Token(Token = "0x600049A")]
		[Address(RVA = "0x10CA940", Offset = "0x10CA940", VA = "0x10CA940")]
		private string ScanUriEscapes(Mark start)
		{
			return null;
		}

		[Token(Token = "0x600049B")]
		[Address(RVA = "0x10C8C28", Offset = "0x10C8C28", VA = "0x10C8C28")]
		private string ScanTagHandle(bool isDirective, Mark start)
		{
			return null;
		}

		[Token(Token = "0x600049C")]
		[Address(RVA = "0x10CA7BC", Offset = "0x10CA7BC", VA = "0x10CA7BC")]
		private int ScanVersionDirectiveNumber(Mark start)
		{
			return default(int);
		}

		[Token(Token = "0x600049D")]
		[Address(RVA = "0x10C80BC", Offset = "0x10C80BC", VA = "0x10C80BC")]
		private void SaveSimpleKey()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000B0")]
	public class SemanticErrorException : YamlException
	{
		[Token(Token = "0x600049F")]
		[Address(RVA = "0x162D1A0", Offset = "0x162D1A0", VA = "0x162D1A0")]
		public SemanticErrorException()
		{
		}

		[Token(Token = "0x60004A0")]
		[Address(RVA = "0x162D1A8", Offset = "0x162D1A8", VA = "0x162D1A8")]
		public SemanticErrorException(string message)
		{
		}

		[Token(Token = "0x60004A1")]
		[Address(RVA = "0x162D1B0", Offset = "0x162D1B0", VA = "0x162D1B0")]
		public SemanticErrorException(Mark start, Mark end, string message)
		{
		}

		[Token(Token = "0x60004A2")]
		[Address(RVA = "0x162D1B8", Offset = "0x162D1B8", VA = "0x162D1B8")]
		public SemanticErrorException(string message, Exception inner)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000B1")]
	internal class SimpleKey
	{
		[Token(Token = "0x4000192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Cursor cursor;

		[Token(Token = "0x4000193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F394", Offset = "0xA7F394")]
		private bool <IsPossible>k__BackingField;

		[Token(Token = "0x4000194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F3A4", Offset = "0xA7F3A4")]
		private bool <IsRequired>k__BackingField;

		[Token(Token = "0x4000195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F3B4", Offset = "0xA7F3B4")]
		private int <TokenNumber>k__BackingField;

		[Token(Token = "0x1700006E")]
		public bool IsPossible
		{
			[Token(Token = "0x60004A3")]
			[Address(RVA = "0x163187C", Offset = "0x163187C", VA = "0x163187C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A26C", Offset = "0xA8A26C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60004A4")]
			[Address(RVA = "0x1631884", Offset = "0x1631884", VA = "0x1631884")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A27C", Offset = "0xA8A27C")]
			set
			{
			}
		}

		[Token(Token = "0x1700006F")]
		public bool IsRequired
		{
			[Token(Token = "0x60004A5")]
			[Address(RVA = "0x1631890", Offset = "0x1631890", VA = "0x1631890")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A28C", Offset = "0xA8A28C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60004A6")]
			[Address(RVA = "0x1631898", Offset = "0x1631898", VA = "0x1631898")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A29C", Offset = "0xA8A29C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000070")]
		public int TokenNumber
		{
			[Token(Token = "0x60004A7")]
			[Address(RVA = "0x16318A4", Offset = "0x16318A4", VA = "0x16318A4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A2AC", Offset = "0xA8A2AC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60004A8")]
			[Address(RVA = "0x16318AC", Offset = "0x16318AC", VA = "0x16318AC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A2BC", Offset = "0xA8A2BC")]
			private set
			{
			}
		}

		[Token(Token = "0x17000071")]
		public int Index
		{
			[Token(Token = "0x60004A9")]
			[Address(RVA = "0x16318B4", Offset = "0x16318B4", VA = "0x16318B4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000072")]
		public int Line
		{
			[Token(Token = "0x60004AA")]
			[Address(RVA = "0x16318D0", Offset = "0x16318D0", VA = "0x16318D0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000073")]
		public int LineOffset
		{
			[Token(Token = "0x60004AB")]
			[Address(RVA = "0x16318EC", Offset = "0x16318EC", VA = "0x16318EC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000074")]
		public Mark Mark
		{
			[Token(Token = "0x60004AC")]
			[Address(RVA = "0x1631908", Offset = "0x1631908", VA = "0x1631908")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004AD")]
		[Address(RVA = "0x1631924", Offset = "0x1631924", VA = "0x1631924")]
		public SimpleKey()
		{
		}

		[Token(Token = "0x60004AE")]
		[Address(RVA = "0x1631994", Offset = "0x1631994", VA = "0x1631994")]
		public SimpleKey(bool isPossible, bool isRequired, int tokenNumber, Cursor cursor)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000B2")]
	internal class StringLookAheadBuffer : ILookAheadBuffer
	{
		[Token(Token = "0x4000196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly string value;

		[Token(Token = "0x4000197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F3C4", Offset = "0xA7F3C4")]
		private int <Position>k__BackingField;

		[Token(Token = "0x17000075")]
		public int Position
		{
			[Token(Token = "0x60004AF")]
			[Address(RVA = "0x1651E6C", Offset = "0x1651E6C", VA = "0x1651E6C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A2CC", Offset = "0xA8A2CC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60004B0")]
			[Address(RVA = "0x1651E74", Offset = "0x1651E74", VA = "0x1651E74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A2DC", Offset = "0xA8A2DC")]
			private set
			{
			}
		}

		[Token(Token = "0x17000076")]
		public int Length
		{
			[Token(Token = "0x60004B2")]
			[Address(RVA = "0x1651EB0", Offset = "0x1651EB0", VA = "0x1651EB0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000077")]
		public bool EndOfInput
		{
			[Token(Token = "0x60004B3")]
			[Address(RVA = "0x1651ECC", Offset = "0x1651ECC", VA = "0x1651ECC", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60004B1")]
		[Address(RVA = "0x1651E7C", Offset = "0x1651E7C", VA = "0x1651E7C")]
		public StringLookAheadBuffer(string value)
		{
		}

		[Token(Token = "0x60004B4")]
		[Address(RVA = "0x1651F18", Offset = "0x1651F18", VA = "0x1651F18", Slot = "5")]
		public char Peek(int offset)
		{
			return default(char);
		}

		[Token(Token = "0x60004B5")]
		[Address(RVA = "0x1651EF4", Offset = "0x1651EF4", VA = "0x1651EF4")]
		private bool IsOutside(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x60004B6")]
		[Address(RVA = "0x1651F54", Offset = "0x1651F54", VA = "0x1651F54", Slot = "6")]
		public void Skip(int length)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000B3")]
	public class SyntaxErrorException : YamlException
	{
		[Token(Token = "0x60004B7")]
		[Address(RVA = "0x1651FD0", Offset = "0x1651FD0", VA = "0x1651FD0")]
		public SyntaxErrorException()
		{
		}

		[Token(Token = "0x60004B8")]
		[Address(RVA = "0x1651FD8", Offset = "0x1651FD8", VA = "0x1651FD8")]
		public SyntaxErrorException(string message)
		{
		}

		[Token(Token = "0x60004B9")]
		[Address(RVA = "0x1651FE0", Offset = "0x1651FE0", VA = "0x1651FE0")]
		public SyntaxErrorException(Mark start, Mark end, string message)
		{
		}

		[Token(Token = "0x60004BA")]
		[Address(RVA = "0x1651FE8", Offset = "0x1651FE8", VA = "0x1651FE8")]
		public SyntaxErrorException(string message, Exception inner)
		{
		}
	}
	[Token(Token = "0x20000B4")]
	public class TagDirectiveCollection : KeyedCollection<string, TagDirective>
	{
		[Token(Token = "0x60004BB")]
		[Address(RVA = "0x16525E0", Offset = "0x16525E0", VA = "0x16525E0")]
		public TagDirectiveCollection()
		{
		}

		[Token(Token = "0x60004BC")]
		[Address(RVA = "0x165262C", Offset = "0x165262C", VA = "0x165262C")]
		public TagDirectiveCollection(IEnumerable<TagDirective> tagDirectives)
		{
		}

		[Token(Token = "0x60004BD")]
		[Address(RVA = "0x1652918", Offset = "0x1652918", VA = "0x1652918", Slot = "39")]
		protected override string GetKeyForItem(TagDirective item)
		{
			return null;
		}

		[Token(Token = "0x60004BE")]
		[Address(RVA = "0x1652930", Offset = "0x1652930", VA = "0x1652930")]
		public new bool Contains(TagDirective directive)
		{
			return default(bool);
		}
	}
	[Serializable]
	[Token(Token = "0x20000B5")]
	public class Version
	{
		[Token(Token = "0x4000198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F3D4", Offset = "0xA7F3D4")]
		private int <Major>k__BackingField;

		[Token(Token = "0x4000199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F3E4", Offset = "0xA7F3E4")]
		private int <Minor>k__BackingField;

		[Token(Token = "0x17000078")]
		public int Major
		{
			[Token(Token = "0x60004BF")]
			[Address(RVA = "0x1A73788", Offset = "0x1A73788", VA = "0x1A73788")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A2EC", Offset = "0xA8A2EC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60004C0")]
			[Address(RVA = "0x1A73790", Offset = "0x1A73790", VA = "0x1A73790")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A2FC", Offset = "0xA8A2FC")]
			private set
			{
			}
		}

		[Token(Token = "0x17000079")]
		public int Minor
		{
			[Token(Token = "0x60004C1")]
			[Address(RVA = "0x1A73798", Offset = "0x1A73798", VA = "0x1A73798")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A30C", Offset = "0xA8A30C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60004C2")]
			[Address(RVA = "0x1A737A0", Offset = "0x1A737A0", VA = "0x1A737A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A31C", Offset = "0xA8A31C")]
			private set
			{
			}
		}

		[Token(Token = "0x60004C3")]
		[Address(RVA = "0x1A737A8", Offset = "0x1A737A8", VA = "0x1A737A8")]
		public Version(int major, int minor)
		{
		}

		[Token(Token = "0x60004C4")]
		[Address(RVA = "0x1A737E0", Offset = "0x1A737E0", VA = "0x1A737E0", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60004C5")]
		[Address(RVA = "0x1A73894", Offset = "0x1A73894", VA = "0x1A73894", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
	[Serializable]
	[Token(Token = "0x20000B6")]
	public class YamlException : Exception
	{
		[Token(Token = "0x400019A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F3F4", Offset = "0xA7F3F4")]
		private Mark <Start>k__BackingField;

		[Token(Token = "0x400019B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F404", Offset = "0xA7F404")]
		private Mark <End>k__BackingField;

		[Token(Token = "0x1700007A")]
		public Mark Start
		{
			[Token(Token = "0x60004C6")]
			[Address(RVA = "0x1A76554", Offset = "0x1A76554", VA = "0x1A76554")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A32C", Offset = "0xA8A32C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60004C7")]
			[Address(RVA = "0x1A7655C", Offset = "0x1A7655C", VA = "0x1A7655C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A33C", Offset = "0xA8A33C")]
			private set
			{
			}
		}

		[Token(Token = "0x1700007B")]
		public Mark End
		{
			[Token(Token = "0x60004C8")]
			[Address(RVA = "0x1A76564", Offset = "0x1A76564", VA = "0x1A76564")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A34C", Offset = "0xA8A34C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60004C9")]
			[Address(RVA = "0x1A7656C", Offset = "0x1A7656C", VA = "0x1A7656C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A35C", Offset = "0xA8A35C")]
			private set
			{
			}
		}

		[Token(Token = "0x60004CA")]
		[Address(RVA = "0x1A76034", Offset = "0x1A76034", VA = "0x1A76034")]
		public YamlException()
		{
		}

		[Token(Token = "0x60004CB")]
		[Address(RVA = "0x1A76574", Offset = "0x1A76574", VA = "0x1A76574")]
		public YamlException(string message)
		{
		}

		[Token(Token = "0x60004CC")]
		[Address(RVA = "0x1A765E8", Offset = "0x1A765E8", VA = "0x1A765E8")]
		public YamlException(Mark start, Mark end, string message)
		{
		}

		[Token(Token = "0x60004CD")]
		[Address(RVA = "0x1A765F0", Offset = "0x1A765F0", VA = "0x1A765F0")]
		public YamlException(Mark start, Mark end, string message, Exception innerException)
		{
		}

		[Token(Token = "0x60004CE")]
		[Address(RVA = "0x1A766D0", Offset = "0x1A766D0", VA = "0x1A766D0")]
		public YamlException(string message, Exception inner)
		{
		}
	}
}
namespace YamlDotNet.Core.Tokens
{
	[Serializable]
	[Token(Token = "0x20000B7")]
	public class Anchor : Token
	{
		[Token(Token = "0x400019C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly string value;

		[Token(Token = "0x1700007C")]
		public string Value
		{
			[Token(Token = "0x60004CF")]
			[Address(RVA = "0x230FE80", Offset = "0x230FE80", VA = "0x230FE80")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004D0")]
		[Address(RVA = "0x230FE88", Offset = "0x230FE88", VA = "0x230FE88")]
		public Anchor(string value)
		{
		}

		[Token(Token = "0x60004D1")]
		[Address(RVA = "0x230FF18", Offset = "0x230FF18", VA = "0x230FF18")]
		public Anchor(string value, Mark start, Mark end)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000B8")]
	public class AnchorAlias : Token
	{
		[Token(Token = "0x400019D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly string value;

		[Token(Token = "0x1700007D")]
		public string Value
		{
			[Token(Token = "0x60004D2")]
			[Address(RVA = "0x231025C", Offset = "0x231025C", VA = "0x231025C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004D3")]
		[Address(RVA = "0x2310264", Offset = "0x2310264", VA = "0x2310264")]
		public AnchorAlias(string value)
		{
		}

		[Token(Token = "0x60004D4")]
		[Address(RVA = "0x23102F4", Offset = "0x23102F4", VA = "0x23102F4")]
		public AnchorAlias(string value, Mark start, Mark end)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000B9")]
	public class BlockEnd : Token
	{
		[Token(Token = "0x60004D5")]
		[Address(RVA = "0x232049C", Offset = "0x232049C", VA = "0x232049C")]
		public BlockEnd()
		{
		}

		[Token(Token = "0x60004D6")]
		[Address(RVA = "0x2320510", Offset = "0x2320510", VA = "0x2320510")]
		public BlockEnd(Mark start, Mark end)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000BA")]
	public class BlockEntry : Token
	{
		[Token(Token = "0x60004D7")]
		[Address(RVA = "0x2320518", Offset = "0x2320518", VA = "0x2320518")]
		public BlockEntry()
		{
		}

		[Token(Token = "0x60004D8")]
		[Address(RVA = "0x232058C", Offset = "0x232058C", VA = "0x232058C")]
		public BlockEntry(Mark start, Mark end)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000BB")]
	public class BlockMappingStart : Token
	{
		[Token(Token = "0x60004D9")]
		[Address(RVA = "0x2320594", Offset = "0x2320594", VA = "0x2320594")]
		public BlockMappingStart()
		{
		}

		[Token(Token = "0x60004DA")]
		[Address(RVA = "0x2320608", Offset = "0x2320608", VA = "0x2320608")]
		public BlockMappingStart(Mark start, Mark end)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000BC")]
	public class BlockSequenceStart : Token
	{
		[Token(Token = "0x60004DB")]
		[Address(RVA = "0x2320610", Offset = "0x2320610", VA = "0x2320610")]
		public BlockSequenceStart()
		{
		}

		[Token(Token = "0x60004DC")]
		[Address(RVA = "0x2320684", Offset = "0x2320684", VA = "0x2320684")]
		public BlockSequenceStart(Mark start, Mark end)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000BD")]
	public class Comment : Token
	{
		[Token(Token = "0x400019E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F414", Offset = "0xA7F414")]
		private string <Value>k__BackingField;

		[Token(Token = "0x400019F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F424", Offset = "0xA7F424")]
		private bool <IsInline>k__BackingField;

		[Token(Token = "0x1700007E")]
		public string Value
		{
			[Token(Token = "0x60004DD")]
			[Address(RVA = "0x1698C14", Offset = "0x1698C14", VA = "0x1698C14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A36C", Offset = "0xA8A36C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60004DE")]
			[Address(RVA = "0x1698C1C", Offset = "0x1698C1C", VA = "0x1698C1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A37C", Offset = "0xA8A37C")]
			private set
			{
			}
		}

		[Token(Token = "0x1700007F")]
		public bool IsInline
		{
			[Token(Token = "0x60004DF")]
			[Address(RVA = "0x1698C24", Offset = "0x1698C24", VA = "0x1698C24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A38C", Offset = "0xA8A38C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60004E0")]
			[Address(RVA = "0x1698C2C", Offset = "0x1698C2C", VA = "0x1698C2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A39C", Offset = "0xA8A39C")]
			private set
			{
			}
		}

		[Token(Token = "0x60004E1")]
		[Address(RVA = "0x1698C38", Offset = "0x1698C38", VA = "0x1698C38")]
		public Comment(string value, bool isInline)
		{
		}

		[Token(Token = "0x60004E2")]
		[Address(RVA = "0x1698CD4", Offset = "0x1698CD4", VA = "0x1698CD4")]
		public Comment(string value, bool isInline, Mark start, Mark end)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000BE")]
	public class DocumentEnd : Token
	{
		[Token(Token = "0x60004E3")]
		[Address(RVA = "0x16A9F90", Offset = "0x16A9F90", VA = "0x16A9F90")]
		public DocumentEnd()
		{
		}

		[Token(Token = "0x60004E4")]
		[Address(RVA = "0x16AA004", Offset = "0x16AA004", VA = "0x16AA004")]
		public DocumentEnd(Mark start, Mark end)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000BF")]
	public class DocumentStart : Token
	{
		[Token(Token = "0x60004E5")]
		[Address(RVA = "0x16AAB10", Offset = "0x16AAB10", VA = "0x16AAB10")]
		public DocumentStart()
		{
		}

		[Token(Token = "0x60004E6")]
		[Address(RVA = "0x16AAB84", Offset = "0x16AAB84", VA = "0x16AAB84")]
		public DocumentStart(Mark start, Mark end)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000C0")]
	public class FlowEntry : Token
	{
		[Token(Token = "0x60004E7")]
		[Address(RVA = "0x276AE60", Offset = "0x276AE60", VA = "0x276AE60")]
		public FlowEntry()
		{
		}

		[Token(Token = "0x60004E8")]
		[Address(RVA = "0x276AED4", Offset = "0x276AED4", VA = "0x276AED4")]
		public FlowEntry(Mark start, Mark end)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000C1")]
	public class FlowMappingEnd : Token
	{
		[Token(Token = "0x60004E9")]
		[Address(RVA = "0x276AEDC", Offset = "0x276AEDC", VA = "0x276AEDC")]
		public FlowMappingEnd()
		{
		}

		[Token(Token = "0x60004EA")]
		[Address(RVA = "0x276AF50", Offset = "0x276AF50", VA = "0x276AF50")]
		public FlowMappingEnd(Mark start, Mark end)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000C2")]
	public class FlowMappingStart : Token
	{
		[Token(Token = "0x60004EB")]
		[Address(RVA = "0x276AF58", Offset = "0x276AF58", VA = "0x276AF58")]
		public FlowMappingStart()
		{
		}

		[Token(Token = "0x60004EC")]
		[Address(RVA = "0x276AFCC", Offset = "0x276AFCC", VA = "0x276AFCC")]
		public FlowMappingStart(Mark start, Mark end)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000C3")]
	public class FlowSequenceEnd : Token
	{
		[Token(Token = "0x60004ED")]
		[Address(RVA = "0x276AFD4", Offset = "0x276AFD4", VA = "0x276AFD4")]
		public FlowSequenceEnd()
		{
		}

		[Token(Token = "0x60004EE")]
		[Address(RVA = "0x276B048", Offset = "0x276B048", VA = "0x276B048")]
		public FlowSequenceEnd(Mark start, Mark end)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000C4")]
	public class FlowSequenceStart : Token
	{
		[Token(Token = "0x60004EF")]
		[Address(RVA = "0x276B050", Offset = "0x276B050", VA = "0x276B050")]
		public FlowSequenceStart()
		{
		}

		[Token(Token = "0x60004F0")]
		[Address(RVA = "0x276B0C4", Offset = "0x276B0C4", VA = "0x276B0C4")]
		public FlowSequenceStart(Mark start, Mark end)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000C5")]
	public class Key : Token
	{
		[Token(Token = "0x60004F1")]
		[Address(RVA = "0x22F18E0", Offset = "0x22F18E0", VA = "0x22F18E0")]
		public Key()
		{
		}

		[Token(Token = "0x60004F2")]
		[Address(RVA = "0x22F1954", Offset = "0x22F1954", VA = "0x22F1954")]
		public Key(Mark start, Mark end)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000C6")]
	public class Scalar : Token
	{
		[Token(Token = "0x40001A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly string value;

		[Token(Token = "0x40001A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly ScalarStyle style;

		[Token(Token = "0x17000080")]
		public string Value
		{
			[Token(Token = "0x60004F3")]
			[Address(RVA = "0x10C452C", Offset = "0x10C452C", VA = "0x10C452C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000081")]
		public ScalarStyle Style
		{
			[Token(Token = "0x60004F4")]
			[Address(RVA = "0x10C4534", Offset = "0x10C4534", VA = "0x10C4534")]
			get
			{
				return default(ScalarStyle);
			}
		}

		[Token(Token = "0x60004F5")]
		[Address(RVA = "0x10C453C", Offset = "0x10C453C", VA = "0x10C453C")]
		public Scalar(string value)
		{
		}

		[Token(Token = "0x60004F6")]
		[Address(RVA = "0x10C4544", Offset = "0x10C4544", VA = "0x10C4544")]
		public Scalar(string value, ScalarStyle style)
		{
		}

		[Token(Token = "0x60004F7")]
		[Address(RVA = "0x10C45E0", Offset = "0x10C45E0", VA = "0x10C45E0")]
		public Scalar(string value, ScalarStyle style, Mark start, Mark end)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000C7")]
	public class StreamEnd : Token
	{
		[Token(Token = "0x60004F8")]
		[Address(RVA = "0x165131C", Offset = "0x165131C", VA = "0x165131C")]
		public StreamEnd()
		{
		}

		[Token(Token = "0x60004F9")]
		[Address(RVA = "0x165138C", Offset = "0x165138C", VA = "0x165138C")]
		public StreamEnd(Mark start, Mark end)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000C8")]
	public class StreamStart : Token
	{
		[Token(Token = "0x60004FA")]
		[Address(RVA = "0x1651958", Offset = "0x1651958", VA = "0x1651958")]
		public StreamStart()
		{
		}

		[Token(Token = "0x60004FB")]
		[Address(RVA = "0x16519C8", Offset = "0x16519C8", VA = "0x16519C8")]
		public StreamStart(Mark start, Mark end)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000C9")]
	public class Tag : Token
	{
		[Token(Token = "0x40001A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly string handle;

		[Token(Token = "0x40001A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly string suffix;

		[Token(Token = "0x17000082")]
		public string Handle
		{
			[Token(Token = "0x60004FC")]
			[Address(RVA = "0x1652068", Offset = "0x1652068", VA = "0x1652068")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000083")]
		public string Suffix
		{
			[Token(Token = "0x60004FD")]
			[Address(RVA = "0x1652070", Offset = "0x1652070", VA = "0x1652070")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004FE")]
		[Address(RVA = "0x1652078", Offset = "0x1652078", VA = "0x1652078")]
		public Tag(string handle, string suffix)
		{
		}

		[Token(Token = "0x60004FF")]
		[Address(RVA = "0x1652100", Offset = "0x1652100", VA = "0x1652100")]
		public Tag(string handle, string suffix, Mark start, Mark end)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000CA")]
	public class TagDirective : Token
	{
		[Token(Token = "0x40001A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly string handle;

		[Token(Token = "0x40001A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly string prefix;

		[Token(Token = "0x40001A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Regex tagHandleValidator;

		[Token(Token = "0x17000084")]
		public string Handle
		{
			[Token(Token = "0x6000500")]
			[Address(RVA = "0x1652154", Offset = "0x1652154", VA = "0x1652154")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000085")]
		public string Prefix
		{
			[Token(Token = "0x6000501")]
			[Address(RVA = "0x165215C", Offset = "0x165215C", VA = "0x165215C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000502")]
		[Address(RVA = "0x1652164", Offset = "0x1652164", VA = "0x1652164")]
		public TagDirective(string handle, string prefix)
		{
		}

		[Token(Token = "0x6000503")]
		[Address(RVA = "0x16521EC", Offset = "0x16521EC", VA = "0x16521EC")]
		public TagDirective(string handle, string prefix, Mark start, Mark end)
		{
		}

		[Token(Token = "0x6000504")]
		[Address(RVA = "0x16523AC", Offset = "0x16523AC", VA = "0x16523AC", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000505")]
		[Address(RVA = "0x1652474", Offset = "0x1652474", VA = "0x1652474", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000506")]
		[Address(RVA = "0x16524C8", Offset = "0x16524C8", VA = "0x16524C8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x20000CB")]
	public abstract class Token
	{
		[Token(Token = "0x40001A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Mark start;

		[Token(Token = "0x40001A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Mark end;

		[Token(Token = "0x17000086")]
		public Mark Start
		{
			[Token(Token = "0x6000508")]
			[Address(RVA = "0x1653780", Offset = "0x1653780", VA = "0x1653780")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000087")]
		public Mark End
		{
			[Token(Token = "0x6000509")]
			[Address(RVA = "0x1653788", Offset = "0x1653788", VA = "0x1653788")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600050A")]
		[Address(RVA = "0x1651390", Offset = "0x1651390", VA = "0x1651390")]
		protected Token(Mark start, Mark end)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000CC")]
	public class Value : Token
	{
		[Token(Token = "0x600050B")]
		[Address(RVA = "0x1A7370C", Offset = "0x1A7370C", VA = "0x1A7370C")]
		public Value()
		{
		}

		[Token(Token = "0x600050C")]
		[Address(RVA = "0x1A73780", Offset = "0x1A73780", VA = "0x1A73780")]
		public Value(Mark start, Mark end)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000CD")]
	public class VersionDirective : Token
	{
		[Token(Token = "0x40001A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly Version version;

		[Token(Token = "0x17000088")]
		public Version Version
		{
			[Token(Token = "0x600050D")]
			[Address(RVA = "0x1A738E8", Offset = "0x1A738E8", VA = "0x1A738E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600050E")]
		[Address(RVA = "0x1A738F0", Offset = "0x1A738F0", VA = "0x1A738F0")]
		public VersionDirective(Version version)
		{
		}

		[Token(Token = "0x600050F")]
		[Address(RVA = "0x1A73980", Offset = "0x1A73980", VA = "0x1A73980")]
		public VersionDirective(Version version, Mark start, Mark end)
		{
		}

		[Token(Token = "0x6000510")]
		[Address(RVA = "0x1A739BC", Offset = "0x1A739BC", VA = "0x1A739BC", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6000511")]
		[Address(RVA = "0x1A73A70", Offset = "0x1A73A70", VA = "0x1A73A70", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}
	}
}
namespace YamlDotNet.Core.Events
{
	[Token(Token = "0x20000CE")]
	public class AnchorAlias : ParsingEvent
	{
		[Token(Token = "0x40001AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly string value;

		[Token(Token = "0x17000089")]
		internal override EventType Type
		{
			[Token(Token = "0x6000512")]
			[Address(RVA = "0x230FF54", Offset = "0x230FF54", VA = "0x230FF54", Slot = "5")]
			get
			{
				return default(EventType);
			}
		}

		[Token(Token = "0x1700008A")]
		public string Value
		{
			[Token(Token = "0x6000513")]
			[Address(RVA = "0x230FF5C", Offset = "0x230FF5C", VA = "0x230FF5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000514")]
		[Address(RVA = "0x230FF64", Offset = "0x230FF64", VA = "0x230FF64")]
		public AnchorAlias(string value, Mark start, Mark end)
		{
		}

		[Token(Token = "0x6000515")]
		[Address(RVA = "0x23100A0", Offset = "0x23100A0", VA = "0x23100A0")]
		public AnchorAlias(string value)
		{
		}

		[Token(Token = "0x6000516")]
		[Address(RVA = "0x2310120", Offset = "0x2310120", VA = "0x2310120", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000517")]
		[Address(RVA = "0x23101A4", Offset = "0x23101A4", VA = "0x23101A4", Slot = "6")]
		public override void Accept(IParsingEventVisitor visitor)
		{
		}
	}
	[Token(Token = "0x20000CF")]
	public class Comment : ParsingEvent
	{
		[Token(Token = "0x40001AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F434", Offset = "0xA7F434")]
		private string <Value>k__BackingField;

		[Token(Token = "0x40001AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F444", Offset = "0xA7F444")]
		private bool <IsInline>k__BackingField;

		[Token(Token = "0x1700008B")]
		public string Value
		{
			[Token(Token = "0x6000518")]
			[Address(RVA = "0x1698A38", Offset = "0x1698A38", VA = "0x1698A38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A3AC", Offset = "0xA8A3AC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000519")]
			[Address(RVA = "0x1698A40", Offset = "0x1698A40", VA = "0x1698A40")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A3BC", Offset = "0xA8A3BC")]
			private set
			{
			}
		}

		[Token(Token = "0x1700008C")]
		public bool IsInline
		{
			[Token(Token = "0x600051A")]
			[Address(RVA = "0x1698A48", Offset = "0x1698A48", VA = "0x1698A48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A3CC", Offset = "0xA8A3CC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600051B")]
			[Address(RVA = "0x1698A50", Offset = "0x1698A50", VA = "0x1698A50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A3DC", Offset = "0xA8A3DC")]
			private set
			{
			}
		}

		[Token(Token = "0x1700008D")]
		internal override EventType Type
		{
			[Token(Token = "0x600051E")]
			[Address(RVA = "0x1698B50", Offset = "0x1698B50", VA = "0x1698B50", Slot = "5")]
			get
			{
				return default(EventType);
			}
		}

		[Token(Token = "0x600051C")]
		[Address(RVA = "0x1698A5C", Offset = "0x1698A5C", VA = "0x1698A5C")]
		public Comment(string value, bool isInline)
		{
		}

		[Token(Token = "0x600051D")]
		[Address(RVA = "0x1698AFC", Offset = "0x1698AFC", VA = "0x1698AFC")]
		public Comment(string value, bool isInline, Mark start, Mark end)
		{
		}

		[Token(Token = "0x600051F")]
		[Address(RVA = "0x1698B58", Offset = "0x1698B58", VA = "0x1698B58", Slot = "6")]
		public override void Accept(IParsingEventVisitor visitor)
		{
		}
	}
	[Token(Token = "0x20000D0")]
	public class DocumentEnd : ParsingEvent
	{
		[Token(Token = "0x40001AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly bool isImplicit;

		[Token(Token = "0x1700008E")]
		public override int NestingIncrease
		{
			[Token(Token = "0x6000520")]
			[Address(RVA = "0x16A9D38", Offset = "0x16A9D38", VA = "0x16A9D38", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700008F")]
		internal override EventType Type
		{
			[Token(Token = "0x6000521")]
			[Address(RVA = "0x16A9D40", Offset = "0x16A9D40", VA = "0x16A9D40", Slot = "5")]
			get
			{
				return default(EventType);
			}
		}

		[Token(Token = "0x17000090")]
		public bool IsImplicit
		{
			[Token(Token = "0x6000522")]
			[Address(RVA = "0x16A9D48", Offset = "0x16A9D48", VA = "0x16A9D48")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000523")]
		[Address(RVA = "0x16A9D50", Offset = "0x16A9D50", VA = "0x16A9D50")]
		public DocumentEnd(bool isImplicit, Mark start, Mark end)
		{
		}

		[Token(Token = "0x6000524")]
		[Address(RVA = "0x16A9D88", Offset = "0x16A9D88", VA = "0x16A9D88")]
		public DocumentEnd(bool isImplicit)
		{
		}

		[Token(Token = "0x6000525")]
		[Address(RVA = "0x16A9E14", Offset = "0x16A9E14", VA = "0x16A9E14", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000526")]
		[Address(RVA = "0x16A9ED4", Offset = "0x16A9ED4", VA = "0x16A9ED4", Slot = "6")]
		public override void Accept(IParsingEventVisitor visitor)
		{
		}
	}
	[Token(Token = "0x20000D1")]
	public class DocumentStart : ParsingEvent
	{
		[Token(Token = "0x40001AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly TagDirectiveCollection tags;

		[Token(Token = "0x40001AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly VersionDirective version;

		[Token(Token = "0x40001B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly bool isImplicit;

		[Token(Token = "0x17000091")]
		public override int NestingIncrease
		{
			[Token(Token = "0x6000527")]
			[Address(RVA = "0x16AA7D8", Offset = "0x16AA7D8", VA = "0x16AA7D8", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000092")]
		internal override EventType Type
		{
			[Token(Token = "0x6000528")]
			[Address(RVA = "0x16AA7E0", Offset = "0x16AA7E0", VA = "0x16AA7E0", Slot = "5")]
			get
			{
				return default(EventType);
			}
		}

		[Token(Token = "0x17000093")]
		public TagDirectiveCollection Tags
		{
			[Token(Token = "0x6000529")]
			[Address(RVA = "0x16AA7E8", Offset = "0x16AA7E8", VA = "0x16AA7E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000094")]
		public VersionDirective Version
		{
			[Token(Token = "0x600052A")]
			[Address(RVA = "0x16AA7F0", Offset = "0x16AA7F0", VA = "0x16AA7F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000095")]
		public bool IsImplicit
		{
			[Token(Token = "0x600052B")]
			[Address(RVA = "0x16AA7F8", Offset = "0x16AA7F8", VA = "0x16AA7F8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600052C")]
		[Address(RVA = "0x16AA800", Offset = "0x16AA800", VA = "0x16AA800")]
		public DocumentStart(VersionDirective version, TagDirectiveCollection tags, bool isImplicit, Mark start, Mark end)
		{
		}

		[Token(Token = "0x600052D")]
		[Address(RVA = "0x16AA868", Offset = "0x16AA868", VA = "0x16AA868")]
		public DocumentStart(VersionDirective version, TagDirectiveCollection tags, bool isImplicit)
		{
		}

		[Token(Token = "0x600052E")]
		[Address(RVA = "0x16AA900", Offset = "0x16AA900", VA = "0x16AA900")]
		public DocumentStart(Mark start, Mark end)
		{
		}

		[Token(Token = "0x600052F")]
		[Address(RVA = "0x16AA918", Offset = "0x16AA918", VA = "0x16AA918")]
		public DocumentStart()
		{
		}

		[Token(Token = "0x6000530")]
		[Address(RVA = "0x16AA994", Offset = "0x16AA994", VA = "0x16AA994", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000531")]
		[Address(RVA = "0x16AAA54", Offset = "0x16AAA54", VA = "0x16AAA54", Slot = "6")]
		public override void Accept(IParsingEventVisitor visitor)
		{
		}
	}
	[Token(Token = "0x20000D2")]
	internal enum EventType
	{
		[Token(Token = "0x40001B2")]
		None,
		[Token(Token = "0x40001B3")]
		StreamStart,
		[Token(Token = "0x40001B4")]
		StreamEnd,
		[Token(Token = "0x40001B5")]
		DocumentStart,
		[Token(Token = "0x40001B6")]
		DocumentEnd,
		[Token(Token = "0x40001B7")]
		Alias,
		[Token(Token = "0x40001B8")]
		Scalar,
		[Token(Token = "0x40001B9")]
		SequenceStart,
		[Token(Token = "0x40001BA")]
		SequenceEnd,
		[Token(Token = "0x40001BB")]
		MappingStart,
		[Token(Token = "0x40001BC")]
		MappingEnd,
		[Token(Token = "0x40001BD")]
		Comment
	}
	[Token(Token = "0x20000D3")]
	public interface IParsingEventVisitor
	{
		[Token(Token = "0x6000532")]
		void Visit(AnchorAlias e);

		[Token(Token = "0x6000533")]
		void Visit(StreamStart e);

		[Token(Token = "0x6000534")]
		void Visit(StreamEnd e);

		[Token(Token = "0x6000535")]
		void Visit(DocumentStart e);

		[Token(Token = "0x6000536")]
		void Visit(DocumentEnd e);

		[Token(Token = "0x6000537")]
		void Visit(Scalar e);

		[Token(Token = "0x6000538")]
		void Visit(SequenceStart e);

		[Token(Token = "0x6000539")]
		void Visit(SequenceEnd e);

		[Token(Token = "0x600053A")]
		void Visit(MappingStart e);

		[Token(Token = "0x600053B")]
		void Visit(MappingEnd e);

		[Token(Token = "0x600053C")]
		void Visit(Comment e);
	}
	[Token(Token = "0x20000D4")]
	public class MappingEnd : ParsingEvent
	{
		[Token(Token = "0x17000096")]
		public override int NestingIncrease
		{
			[Token(Token = "0x600053D")]
			[Address(RVA = "0x22F467C", Offset = "0x22F467C", VA = "0x22F467C", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000097")]
		internal override EventType Type
		{
			[Token(Token = "0x600053E")]
			[Address(RVA = "0x22F4684", Offset = "0x22F4684", VA = "0x22F4684", Slot = "5")]
			get
			{
				return default(EventType);
			}
		}

		[Token(Token = "0x600053F")]
		[Address(RVA = "0x22F468C", Offset = "0x22F468C", VA = "0x22F468C")]
		public MappingEnd(Mark start, Mark end)
		{
		}

		[Token(Token = "0x6000540")]
		[Address(RVA = "0x22F4694", Offset = "0x22F4694", VA = "0x22F4694")]
		public MappingEnd()
		{
		}

		[Token(Token = "0x6000541")]
		[Address(RVA = "0x22F4708", Offset = "0x22F4708", VA = "0x22F4708", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000542")]
		[Address(RVA = "0x22F474C", Offset = "0x22F474C", VA = "0x22F474C", Slot = "6")]
		public override void Accept(IParsingEventVisitor visitor)
		{
		}
	}
	[Token(Token = "0x20000D5")]
	public class MappingStart : NodeEvent
	{
		[Token(Token = "0x40001BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly bool isImplicit;

		[Token(Token = "0x40001BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private readonly MappingStyle style;

		[Token(Token = "0x17000098")]
		public override int NestingIncrease
		{
			[Token(Token = "0x6000543")]
			[Address(RVA = "0x22F4810", Offset = "0x22F4810", VA = "0x22F4810", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000099")]
		internal override EventType Type
		{
			[Token(Token = "0x6000544")]
			[Address(RVA = "0x22F4818", Offset = "0x22F4818", VA = "0x22F4818", Slot = "5")]
			get
			{
				return default(EventType);
			}
		}

		[Token(Token = "0x1700009A")]
		public bool IsImplicit
		{
			[Token(Token = "0x6000545")]
			[Address(RVA = "0x22F4820", Offset = "0x22F4820", VA = "0x22F4820")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700009B")]
		public override bool IsCanonical
		{
			[Token(Token = "0x6000546")]
			[Address(RVA = "0x22F4828", Offset = "0x22F4828", VA = "0x22F4828", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700009C")]
		public MappingStyle Style
		{
			[Token(Token = "0x6000547")]
			[Address(RVA = "0x22F4838", Offset = "0x22F4838", VA = "0x22F4838")]
			get
			{
				return default(MappingStyle);
			}
		}

		[Token(Token = "0x6000548")]
		[Address(RVA = "0x22F4840", Offset = "0x22F4840", VA = "0x22F4840")]
		public MappingStart(string anchor, string tag, bool isImplicit, MappingStyle style, Mark start, Mark end)
		{
		}

		[Token(Token = "0x6000549")]
		[Address(RVA = "0x22F48F4", Offset = "0x22F48F4", VA = "0x22F48F4")]
		public MappingStart(string anchor, string tag, bool isImplicit, MappingStyle style)
		{
		}

		[Token(Token = "0x600054A")]
		[Address(RVA = "0x22F4994", Offset = "0x22F4994", VA = "0x22F4994")]
		public MappingStart()
		{
		}

		[Token(Token = "0x600054B")]
		[Address(RVA = "0x22F4A14", Offset = "0x22F4A14", VA = "0x22F4A14", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600054C")]
		[Address(RVA = "0x22F4C28", Offset = "0x22F4C28", VA = "0x22F4C28", Slot = "6")]
		public override void Accept(IParsingEventVisitor visitor)
		{
		}
	}
	[Token(Token = "0x20000D6")]
	public enum MappingStyle
	{
		[Token(Token = "0x40001C1")]
		Any,
		[Token(Token = "0x40001C2")]
		Block,
		[Token(Token = "0x40001C3")]
		Flow
	}
	[Token(Token = "0x20000D7")]
	public abstract class NodeEvent : ParsingEvent
	{
		[Token(Token = "0x40001C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly Regex anchorValidator;

		[Token(Token = "0x40001C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private readonly string anchor;

		[Token(Token = "0x40001C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private readonly string tag;

		[Token(Token = "0x1700009D")]
		public string Anchor
		{
			[Token(Token = "0x600054D")]
			[Address(RVA = "0x10B32C4", Offset = "0x10B32C4", VA = "0x10B32C4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009E")]
		public string Tag
		{
			[Token(Token = "0x600054E")]
			[Address(RVA = "0x10B32CC", Offset = "0x10B32CC", VA = "0x10B32CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700009F")]
		public abstract bool IsCanonical
		{
			[Token(Token = "0x600054F")]
			get;
		}

		[Token(Token = "0x6000550")]
		[Address(RVA = "0x10B32D4", Offset = "0x10B32D4", VA = "0x10B32D4")]
		protected NodeEvent(string anchor, string tag, Mark start, Mark end)
		{
		}

		[Token(Token = "0x6000551")]
		[Address(RVA = "0x10B34B4", Offset = "0x10B34B4", VA = "0x10B34B4")]
		protected NodeEvent(string anchor, string tag)
		{
		}
	}
	[Token(Token = "0x20000D8")]
	public abstract class ParsingEvent
	{
		[Token(Token = "0x40001C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private readonly Mark start;

		[Token(Token = "0x40001C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private readonly Mark end;

		[Token(Token = "0x170000A0")]
		public virtual int NestingIncrease
		{
			[Token(Token = "0x6000553")]
			[Address(RVA = "0x10B9CDC", Offset = "0x10B9CDC", VA = "0x10B9CDC", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000A1")]
		internal abstract EventType Type
		{
			[Token(Token = "0x6000554")]
			get;
		}

		[Token(Token = "0x170000A2")]
		public Mark Start
		{
			[Token(Token = "0x6000555")]
			[Address(RVA = "0x10B9CE4", Offset = "0x10B9CE4", VA = "0x10B9CE4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A3")]
		public Mark End
		{
			[Token(Token = "0x6000556")]
			[Address(RVA = "0x10B9CEC", Offset = "0x10B9CEC", VA = "0x10B9CEC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000557")]
		public abstract void Accept(IParsingEventVisitor visitor);

		[Token(Token = "0x6000558")]
		[Address(RVA = "0x10B3464", Offset = "0x10B3464", VA = "0x10B3464")]
		internal ParsingEvent(Mark start, Mark end)
		{
		}
	}
	[Token(Token = "0x20000D9")]
	public class Scalar : NodeEvent
	{
		[Token(Token = "0x40001C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly string value;

		[Token(Token = "0x40001CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private readonly ScalarStyle style;

		[Token(Token = "0x40001CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private readonly bool isPlainImplicit;

		[Token(Token = "0x40001CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		private readonly bool isQuotedImplicit;

		[Token(Token = "0x170000A4")]
		internal override EventType Type
		{
			[Token(Token = "0x6000559")]
			[Address(RVA = "0x10C3ED0", Offset = "0x10C3ED0", VA = "0x10C3ED0", Slot = "5")]
			get
			{
				return default(EventType);
			}
		}

		[Token(Token = "0x170000A5")]
		public string Value
		{
			[Token(Token = "0x600055A")]
			[Address(RVA = "0x10C3ED8", Offset = "0x10C3ED8", VA = "0x10C3ED8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A6")]
		public ScalarStyle Style
		{
			[Token(Token = "0x600055B")]
			[Address(RVA = "0x10C3EE0", Offset = "0x10C3EE0", VA = "0x10C3EE0")]
			get
			{
				return default(ScalarStyle);
			}
		}

		[Token(Token = "0x170000A7")]
		public bool IsPlainImplicit
		{
			[Token(Token = "0x600055C")]
			[Address(RVA = "0x10C3EE8", Offset = "0x10C3EE8", VA = "0x10C3EE8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000A8")]
		public bool IsQuotedImplicit
		{
			[Token(Token = "0x600055D")]
			[Address(RVA = "0x10C3EF0", Offset = "0x10C3EF0", VA = "0x10C3EF0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000A9")]
		public override bool IsCanonical
		{
			[Token(Token = "0x600055E")]
			[Address(RVA = "0x10C3EF8", Offset = "0x10C3EF8", VA = "0x10C3EF8", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600055F")]
		[Address(RVA = "0x10B9C04", Offset = "0x10B9C04", VA = "0x10B9C04")]
		public Scalar(string anchor, string tag, string value, ScalarStyle style, bool isPlainImplicit, bool isQuotedImplicit, Mark start, Mark end)
		{
		}

		[Token(Token = "0x6000560")]
		[Address(RVA = "0x10C3F18", Offset = "0x10C3F18", VA = "0x10C3F18")]
		public Scalar(string anchor, string tag, string value, ScalarStyle style, bool isPlainImplicit, bool isQuotedImplicit)
		{
		}

		[Token(Token = "0x6000561")]
		[Address(RVA = "0x10C3FDC", Offset = "0x10C3FDC", VA = "0x10C3FDC")]
		public Scalar(string value)
		{
		}

		[Token(Token = "0x6000562")]
		[Address(RVA = "0x10C407C", Offset = "0x10C407C", VA = "0x10C407C")]
		public Scalar(string tag, string value)
		{
		}

		[Token(Token = "0x6000563")]
		[Address(RVA = "0x10C4120", Offset = "0x10C4120", VA = "0x10C4120")]
		public Scalar(string anchor, string tag, string value)
		{
		}

		[Token(Token = "0x6000564")]
		[Address(RVA = "0x10C41D0", Offset = "0x10C41D0", VA = "0x10C41D0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000565")]
		[Address(RVA = "0x10C4470", Offset = "0x10C4470", VA = "0x10C4470", Slot = "6")]
		public override void Accept(IParsingEventVisitor visitor)
		{
		}
	}
	[Token(Token = "0x20000DA")]
	public class SequenceEnd : ParsingEvent
	{
		[Token(Token = "0x170000AA")]
		public override int NestingIncrease
		{
			[Token(Token = "0x6000566")]
			[Address(RVA = "0x162D1C0", Offset = "0x162D1C0", VA = "0x162D1C0", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000AB")]
		internal override EventType Type
		{
			[Token(Token = "0x6000567")]
			[Address(RVA = "0x162D1C8", Offset = "0x162D1C8", VA = "0x162D1C8", Slot = "5")]
			get
			{
				return default(EventType);
			}
		}

		[Token(Token = "0x6000568")]
		[Address(RVA = "0x162D1D0", Offset = "0x162D1D0", VA = "0x162D1D0")]
		public SequenceEnd(Mark start, Mark end)
		{
		}

		[Token(Token = "0x6000569")]
		[Address(RVA = "0x162D1D8", Offset = "0x162D1D8", VA = "0x162D1D8")]
		public SequenceEnd()
		{
		}

		[Token(Token = "0x600056A")]
		[Address(RVA = "0x162D24C", Offset = "0x162D24C", VA = "0x162D24C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600056B")]
		[Address(RVA = "0x162D290", Offset = "0x162D290", VA = "0x162D290", Slot = "6")]
		public override void Accept(IParsingEventVisitor visitor)
		{
		}
	}
	[Token(Token = "0x20000DB")]
	public class SequenceStart : NodeEvent
	{
		[Token(Token = "0x40001CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private readonly bool isImplicit;

		[Token(Token = "0x40001CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private readonly SequenceStyle style;

		[Token(Token = "0x170000AC")]
		public override int NestingIncrease
		{
			[Token(Token = "0x600056C")]
			[Address(RVA = "0x162D354", Offset = "0x162D354", VA = "0x162D354", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000AD")]
		internal override EventType Type
		{
			[Token(Token = "0x600056D")]
			[Address(RVA = "0x162D35C", Offset = "0x162D35C", VA = "0x162D35C", Slot = "5")]
			get
			{
				return default(EventType);
			}
		}

		[Token(Token = "0x170000AE")]
		public bool IsImplicit
		{
			[Token(Token = "0x600056E")]
			[Address(RVA = "0x162D364", Offset = "0x162D364", VA = "0x162D364")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000AF")]
		public override bool IsCanonical
		{
			[Token(Token = "0x600056F")]
			[Address(RVA = "0x162D36C", Offset = "0x162D36C", VA = "0x162D36C", Slot = "7")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B0")]
		public SequenceStyle Style
		{
			[Token(Token = "0x6000570")]
			[Address(RVA = "0x162D37C", Offset = "0x162D37C", VA = "0x162D37C")]
			get
			{
				return default(SequenceStyle);
			}
		}

		[Token(Token = "0x6000571")]
		[Address(RVA = "0x162D384", Offset = "0x162D384", VA = "0x162D384")]
		public SequenceStart(string anchor, string tag, bool isImplicit, SequenceStyle style, Mark start, Mark end)
		{
		}

		[Token(Token = "0x6000572")]
		[Address(RVA = "0x162D438", Offset = "0x162D438", VA = "0x162D438")]
		public SequenceStart(string anchor, string tag, bool isImplicit, SequenceStyle style)
		{
		}

		[Token(Token = "0x6000573")]
		[Address(RVA = "0x162D4D8", Offset = "0x162D4D8", VA = "0x162D4D8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000574")]
		[Address(RVA = "0x162D6EC", Offset = "0x162D6EC", VA = "0x162D6EC", Slot = "6")]
		public override void Accept(IParsingEventVisitor visitor)
		{
		}
	}
	[Token(Token = "0x20000DC")]
	public enum SequenceStyle
	{
		[Token(Token = "0x40001D0")]
		Any,
		[Token(Token = "0x40001D1")]
		Block,
		[Token(Token = "0x40001D2")]
		Flow
	}
	[Token(Token = "0x20000DD")]
	public class StreamEnd : ParsingEvent
	{
		[Token(Token = "0x170000B1")]
		public override int NestingIncrease
		{
			[Token(Token = "0x6000575")]
			[Address(RVA = "0x1651204", Offset = "0x1651204", VA = "0x1651204", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000B2")]
		internal override EventType Type
		{
			[Token(Token = "0x6000576")]
			[Address(RVA = "0x165120C", Offset = "0x165120C", VA = "0x165120C", Slot = "5")]
			get
			{
				return default(EventType);
			}
		}

		[Token(Token = "0x6000577")]
		[Address(RVA = "0x1651214", Offset = "0x1651214", VA = "0x1651214")]
		public StreamEnd(Mark start, Mark end)
		{
		}

		[Token(Token = "0x6000578")]
		[Address(RVA = "0x162E278", Offset = "0x162E278", VA = "0x162E278")]
		public StreamEnd()
		{
		}

		[Token(Token = "0x6000579")]
		[Address(RVA = "0x165121C", Offset = "0x165121C", VA = "0x165121C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x600057A")]
		[Address(RVA = "0x1651260", Offset = "0x1651260", VA = "0x1651260", Slot = "6")]
		public override void Accept(IParsingEventVisitor visitor)
		{
		}
	}
	[Token(Token = "0x20000DE")]
	public class StreamStart : ParsingEvent
	{
		[Token(Token = "0x170000B3")]
		public override int NestingIncrease
		{
			[Token(Token = "0x600057B")]
			[Address(RVA = "0x1651840", Offset = "0x1651840", VA = "0x1651840", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000B4")]
		internal override EventType Type
		{
			[Token(Token = "0x600057C")]
			[Address(RVA = "0x1651848", Offset = "0x1651848", VA = "0x1651848", Slot = "5")]
			get
			{
				return default(EventType);
			}
		}

		[Token(Token = "0x600057D")]
		[Address(RVA = "0x162E204", Offset = "0x162E204", VA = "0x162E204")]
		public StreamStart()
		{
		}

		[Token(Token = "0x600057E")]
		[Address(RVA = "0x1651850", Offset = "0x1651850", VA = "0x1651850")]
		public StreamStart(Mark start, Mark end)
		{
		}

		[Token(Token = "0x600057F")]
		[Address(RVA = "0x1651858", Offset = "0x1651858", VA = "0x1651858", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000580")]
		[Address(RVA = "0x165189C", Offset = "0x165189C", VA = "0x165189C", Slot = "6")]
		public override void Accept(IParsingEventVisitor visitor)
		{
		}
	}
}
namespace Steamworks
{
	[Token(Token = "0x20000DF")]
	public static class CallbackDispatcher
	{
		[Token(Token = "0x6000581")]
		[Address(RVA = "0x2321B68", Offset = "0x2321B68", VA = "0x2321B68")]
		public static void ExceptionHandler(Exception e)
		{
		}
	}
	[Token(Token = "0x20000E0")]
	public sealed class Callback<T>
	{
		[Token(Token = "0x2000357")]
		public delegate void DispatchDelegate(T param);

		[Token(Token = "0x40001D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CCallbackBaseVTable VTable;

		[Token(Token = "0x40001D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IntPtr m_pVTable;

		[Token(Token = "0x40001D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CCallbackBase m_CCallbackBase;

		[Token(Token = "0x40001D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private GCHandle m_pCCallbackBase;

		[Token(Token = "0x40001D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool m_bGameServer;

		[Token(Token = "0x40001D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int m_size;

		[Token(Token = "0x14000002")]
		private event DispatchDelegate m_Func
		{
			[Token(Token = "0x6000582")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A3EC", Offset = "0xA8A3EC")]
			add
			{
			}
			[Token(Token = "0x6000583")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A3FC", Offset = "0xA8A3FC")]
			remove
			{
			}
		}

		[Token(Token = "0x6000584")]
		public static Callback<T> Create(DispatchDelegate func)
		{
			return null;
		}

		[Token(Token = "0x6000585")]
		public static Callback<T> CreateGameServer(DispatchDelegate func)
		{
			return null;
		}

		[Token(Token = "0x6000586")]
		public Callback(DispatchDelegate func, bool bGameServer = false)
		{
		}

		[Token(Token = "0x6000587")]
		~Callback()
		{
		}

		[Token(Token = "0x6000588")]
		public void Register(DispatchDelegate func)
		{
		}

		[Token(Token = "0x6000589")]
		public void Unregister()
		{
		}

		[Token(Token = "0x600058A")]
		public void SetGameserverFlag()
		{
		}

		[Token(Token = "0x600058B")]
		private void OnRunCallback(IntPtr thisptr, IntPtr pvParam)
		{
		}

		[Token(Token = "0x600058C")]
		private void OnRunCallResult(IntPtr thisptr, IntPtr pvParam, bool bFailed, ulong hSteamAPICall)
		{
		}

		[Token(Token = "0x600058D")]
		private int OnGetCallbackSizeBytes(IntPtr thisptr)
		{
			return default(int);
		}

		[Token(Token = "0x600058E")]
		private void BuildCCallbackBase()
		{
		}
	}
	[Token(Token = "0x20000E1")]
	public sealed class CallResult<T>
	{
		[Token(Token = "0x2000358")]
		public delegate void APIDispatchDelegate(T param, bool bIOFailure);

		[Token(Token = "0x40001DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CCallbackBaseVTable VTable;

		[Token(Token = "0x40001DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private IntPtr m_pVTable;

		[Token(Token = "0x40001DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private CCallbackBase m_CCallbackBase;

		[Token(Token = "0x40001DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private GCHandle m_pCCallbackBase;

		[Token(Token = "0x40001DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private SteamAPICall_t m_hAPICall;

		[Token(Token = "0x40001E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly int m_size;

		[Token(Token = "0x170000B5")]
		public SteamAPICall_t Handle
		{
			[Token(Token = "0x6000591")]
			get
			{
				return default(SteamAPICall_t);
			}
		}

		[Token(Token = "0x14000003")]
		private event APIDispatchDelegate m_Func
		{
			[Token(Token = "0x600058F")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A40C", Offset = "0xA8A40C")]
			add
			{
			}
			[Token(Token = "0x6000590")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A41C", Offset = "0xA8A41C")]
			remove
			{
			}
		}

		[Token(Token = "0x6000592")]
		public static CallResult<T> Create([Optional] APIDispatchDelegate func)
		{
			return null;
		}

		[Token(Token = "0x6000593")]
		public CallResult([Optional] APIDispatchDelegate func)
		{
		}

		[Token(Token = "0x6000594")]
		~CallResult()
		{
		}

		[Token(Token = "0x6000595")]
		public void Set(SteamAPICall_t hAPICall, [Optional] APIDispatchDelegate func)
		{
		}

		[Token(Token = "0x6000596")]
		public bool IsActive()
		{
			return default(bool);
		}

		[Token(Token = "0x6000597")]
		public void Cancel()
		{
		}

		[Token(Token = "0x6000598")]
		public void SetGameserverFlag()
		{
		}

		[Token(Token = "0x6000599")]
		private void OnRunCallback(IntPtr thisptr, IntPtr pvParam)
		{
		}

		[Token(Token = "0x600059A")]
		private void OnRunCallResult(IntPtr thisptr, IntPtr pvParam, bool bFailed, ulong hSteamAPICall)
		{
		}

		[Token(Token = "0x600059B")]
		private int OnGetCallbackSizeBytes(IntPtr thisptr)
		{
			return default(int);
		}

		[Token(Token = "0x600059C")]
		private void BuildCCallbackBase()
		{
		}
	}
	[StructLayout(0)]
	[Token(Token = "0x20000E2")]
	internal class CCallbackBase
	{
		[Token(Token = "0x40001E1")]
		public const byte k_ECallbackFlagsRegistered = 1;

		[Token(Token = "0x40001E2")]
		public const byte k_ECallbackFlagsGameServer = 2;

		[Token(Token = "0x40001E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr m_vfptr;

		[Token(Token = "0x40001E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public byte m_nCallbackFlags;

		[Token(Token = "0x40001E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int m_iCallback;

		[Token(Token = "0x600059D")]
		[Address(RVA = "0x2321090", Offset = "0x2321090", VA = "0x2321090")]
		public CCallbackBase()
		{
		}
	}
	[StructLayout(0)]
	[Token(Token = "0x20000E3")]
	internal class CCallbackBaseVTable
	{
		[Token(Token = "0x2000359")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xA7E874", Offset = "0xA7E874")]
		public delegate void RunCBDel(IntPtr thisptr, IntPtr pvParam);

		[Token(Token = "0x200035A")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xA7E888", Offset = "0xA7E888")]
		public delegate void RunCRDel(IntPtr thisptr, IntPtr pvParam, bool bIOFailure, ulong hSteamAPICall);

		[Token(Token = "0x200035B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xA7E89C", Offset = "0xA7E89C")]
		public delegate int GetCallbackSizeBytesDel(IntPtr thisptr);

		[Token(Token = "0x40001E6")]
		private const CallingConvention cc = CallingConvention.Cdecl;

		[NonSerialized]
		[Token(Token = "0x40001E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public RunCBDel m_RunCallback;

		[NonSerialized]
		[Token(Token = "0x40001E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RunCRDel m_RunCallResult;

		[NonSerialized]
		[Token(Token = "0x40001E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GetCallbackSizeBytesDel m_GetCallbackSizeBytes;

		[Token(Token = "0x600059E")]
		[Address(RVA = "0x2321098", Offset = "0x2321098", VA = "0x2321098")]
		public CCallbackBaseVTable()
		{
		}
	}
	[Token(Token = "0x20000E4")]
	internal class CallbackIdentities
	{
		[Token(Token = "0x600059F")]
		[Address(RVA = "0x2321BEC", Offset = "0x2321BEC", VA = "0x2321BEC")]
		public static int GetCallbackIdentity(Type callbackStruct)
		{
			return default(int);
		}

		[Token(Token = "0x60005A0")]
		[Address(RVA = "0x2321D64", Offset = "0x2321D64", VA = "0x2321D64")]
		public CallbackIdentities()
		{
		}
	}
	[Token(Token = "0x20000E5")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xA7CB20", Offset = "0xA7CB20")]
	internal class CallbackIdentityAttribute : Attribute
	{
		[Token(Token = "0x40001EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F474", Offset = "0xA7F474")]
		private int <Identity>k__BackingField;

		[Token(Token = "0x170000B6")]
		public int Identity
		{
			[Token(Token = "0x60005A1")]
			[Address(RVA = "0x2321D6C", Offset = "0x2321D6C", VA = "0x2321D6C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A42C", Offset = "0xA8A42C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60005A2")]
			[Address(RVA = "0x2321D74", Offset = "0x2321D74", VA = "0x2321D74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A43C", Offset = "0xA8A43C")]
			set
			{
			}
		}

		[Token(Token = "0x60005A3")]
		[Address(RVA = "0x2321D7C", Offset = "0x2321D7C", VA = "0x2321D7C")]
		public CallbackIdentityAttribute(int callbackNum)
		{
		}
	}
	[Token(Token = "0x20000E6")]
	public class ISteamMatchmakingServerListResponse
	{
		[Token(Token = "0x200035C")]
		public delegate void ServerResponded(HServerListRequest hRequest, int iServer);

		[Token(Token = "0x200035D")]
		public delegate void ServerFailedToRespond(HServerListRequest hRequest, int iServer);

		[Token(Token = "0x200035E")]
		public delegate void RefreshComplete(HServerListRequest hRequest, EMatchMakingServerResponse response);

		[Token(Token = "0x200035F")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xA7E8B0", Offset = "0xA7E8B0")]
		private delegate void InternalServerResponded(IntPtr thisptr, HServerListRequest hRequest, int iServer);

		[Token(Token = "0x2000360")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xA7E8C4", Offset = "0xA7E8C4")]
		private delegate void InternalServerFailedToRespond(IntPtr thisptr, HServerListRequest hRequest, int iServer);

		[Token(Token = "0x2000361")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xA7E8D8", Offset = "0xA7E8D8")]
		private delegate void InternalRefreshComplete(IntPtr thisptr, HServerListRequest hRequest, EMatchMakingServerResponse response);

		[StructLayout(0)]
		[Token(Token = "0x2000362")]
		private class VTable
		{
			[NonSerialized]
			[Token(Token = "0x4000F31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public InternalServerResponded m_VTServerResponded;

			[NonSerialized]
			[Token(Token = "0x4000F32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public InternalServerFailedToRespond m_VTServerFailedToRespond;

			[NonSerialized]
			[Token(Token = "0x4000F33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InternalRefreshComplete m_VTRefreshComplete;

			[Token(Token = "0x6001618")]
			[Address(RVA = "0x1EA5054", Offset = "0x1EA5054", VA = "0x1EA5054")]
			public VTable()
			{
			}
		}

		[Token(Token = "0x40001EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private VTable m_VTable;

		[Token(Token = "0x40001EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr m_pVTable;

		[Token(Token = "0x40001ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GCHandle m_pGCHandle;

		[Token(Token = "0x40001EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ServerResponded m_ServerResponded;

		[Token(Token = "0x40001EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ServerFailedToRespond m_ServerFailedToRespond;

		[Token(Token = "0x40001F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RefreshComplete m_RefreshComplete;

		[Token(Token = "0x60005A4")]
		[Address(RVA = "0x22E6C18", Offset = "0x22E6C18", VA = "0x22E6C18")]
		public ISteamMatchmakingServerListResponse(ServerResponded onServerResponded, ServerFailedToRespond onServerFailedToRespond, RefreshComplete onRefreshComplete)
		{
		}

		[Token(Token = "0x60005A5")]
		[Address(RVA = "0x22E6F18", Offset = "0x22E6F18", VA = "0x22E6F18", Slot = "1")]
		~ISteamMatchmakingServerListResponse()
		{
		}

		[Token(Token = "0x60005A6")]
		[Address(RVA = "0x22E7018", Offset = "0x22E7018", VA = "0x22E7018")]
		private void InternalOnServerResponded(IntPtr thisptr, HServerListRequest hRequest, int iServer)
		{
		}

		[Token(Token = "0x60005A7")]
		[Address(RVA = "0x22E703C", Offset = "0x22E703C", VA = "0x22E703C")]
		private void InternalOnServerFailedToRespond(IntPtr thisptr, HServerListRequest hRequest, int iServer)
		{
		}

		[Token(Token = "0x60005A8")]
		[Address(RVA = "0x22E7060", Offset = "0x22E7060", VA = "0x22E7060")]
		private void InternalOnRefreshComplete(IntPtr thisptr, HServerListRequest hRequest, EMatchMakingServerResponse response)
		{
		}

		[Token(Token = "0x60005A9")]
		[Address(RVA = "0x22E7084", Offset = "0x22E7084", VA = "0x22E7084")]
		public static explicit operator IntPtr(ISteamMatchmakingServerListResponse that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x20000E7")]
	public class ISteamMatchmakingPingResponse
	{
		[Token(Token = "0x2000363")]
		public delegate void ServerResponded(gameserveritem_t server);

		[Token(Token = "0x2000364")]
		public delegate void ServerFailedToRespond();

		[Token(Token = "0x2000365")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xA7E8EC", Offset = "0xA7E8EC")]
		private delegate void InternalServerResponded(IntPtr thisptr, gameserveritem_t server);

		[Token(Token = "0x2000366")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xA7E900", Offset = "0xA7E900")]
		private delegate void InternalServerFailedToRespond(IntPtr thisptr);

		[StructLayout(0)]
		[Token(Token = "0x2000367")]
		private class VTable
		{
			[NonSerialized]
			[Token(Token = "0x4000F34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public InternalServerResponded m_VTServerResponded;

			[NonSerialized]
			[Token(Token = "0x4000F35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public InternalServerFailedToRespond m_VTServerFailedToRespond;

			[Token(Token = "0x6001629")]
			[Address(RVA = "0x1EA1898", Offset = "0x1EA1898", VA = "0x1EA1898")]
			public VTable()
			{
			}
		}

		[Token(Token = "0x40001F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private VTable m_VTable;

		[Token(Token = "0x40001F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr m_pVTable;

		[Token(Token = "0x40001F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GCHandle m_pGCHandle;

		[Token(Token = "0x40001F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ServerResponded m_ServerResponded;

		[Token(Token = "0x40001F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ServerFailedToRespond m_ServerFailedToRespond;

		[Token(Token = "0x60005AA")]
		[Address(RVA = "0x22E5D90", Offset = "0x22E5D90", VA = "0x22E5D90")]
		public ISteamMatchmakingPingResponse(ServerResponded onServerResponded, ServerFailedToRespond onServerFailedToRespond)
		{
		}

		[Token(Token = "0x60005AB")]
		[Address(RVA = "0x22E6024", Offset = "0x22E6024", VA = "0x22E6024", Slot = "1")]
		~ISteamMatchmakingPingResponse()
		{
		}

		[Token(Token = "0x60005AC")]
		[Address(RVA = "0x22E6124", Offset = "0x22E6124", VA = "0x22E6124")]
		private void InternalOnServerResponded(IntPtr thisptr, gameserveritem_t server)
		{
		}

		[Token(Token = "0x60005AD")]
		[Address(RVA = "0x22E6144", Offset = "0x22E6144", VA = "0x22E6144")]
		private void InternalOnServerFailedToRespond(IntPtr thisptr)
		{
		}

		[Token(Token = "0x60005AE")]
		[Address(RVA = "0x22E6160", Offset = "0x22E6160", VA = "0x22E6160")]
		public static explicit operator IntPtr(ISteamMatchmakingPingResponse that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x20000E8")]
	public class ISteamMatchmakingPlayersResponse
	{
		[Token(Token = "0x2000368")]
		public delegate void AddPlayerToList(string pchName, int nScore, float flTimePlayed);

		[Token(Token = "0x2000369")]
		public delegate void PlayersFailedToRespond();

		[Token(Token = "0x200036A")]
		public delegate void PlayersRefreshComplete();

		[Token(Token = "0x200036B")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xA7E914", Offset = "0xA7E914")]
		public delegate void InternalAddPlayerToList(IntPtr thisptr, IntPtr pchName, int nScore, float flTimePlayed);

		[Token(Token = "0x200036C")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xA7E928", Offset = "0xA7E928")]
		public delegate void InternalPlayersFailedToRespond(IntPtr thisptr);

		[Token(Token = "0x200036D")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xA7E93C", Offset = "0xA7E93C")]
		public delegate void InternalPlayersRefreshComplete(IntPtr thisptr);

		[StructLayout(0)]
		[Token(Token = "0x200036E")]
		private class VTable
		{
			[NonSerialized]
			[Token(Token = "0x4000F36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public InternalAddPlayerToList m_VTAddPlayerToList;

			[NonSerialized]
			[Token(Token = "0x4000F37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public InternalPlayersFailedToRespond m_VTPlayersFailedToRespond;

			[NonSerialized]
			[Token(Token = "0x4000F38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InternalPlayersRefreshComplete m_VTPlayersRefreshComplete;

			[Token(Token = "0x6001642")]
			[Address(RVA = "0x1EA2B20", Offset = "0x1EA2B20", VA = "0x1EA2B20")]
			public VTable()
			{
			}
		}

		[Token(Token = "0x40001F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private VTable m_VTable;

		[Token(Token = "0x40001F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr m_pVTable;

		[Token(Token = "0x40001F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GCHandle m_pGCHandle;

		[Token(Token = "0x40001F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AddPlayerToList m_AddPlayerToList;

		[Token(Token = "0x40001FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private PlayersFailedToRespond m_PlayersFailedToRespond;

		[Token(Token = "0x40001FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PlayersRefreshComplete m_PlayersRefreshComplete;

		[Token(Token = "0x60005AF")]
		[Address(RVA = "0x22E617C", Offset = "0x22E617C", VA = "0x22E617C")]
		public ISteamMatchmakingPlayersResponse(AddPlayerToList onAddPlayerToList, PlayersFailedToRespond onPlayersFailedToRespond, PlayersRefreshComplete onPlayersRefreshComplete)
		{
		}

		[Token(Token = "0x60005B0")]
		[Address(RVA = "0x22E647C", Offset = "0x22E647C", VA = "0x22E647C", Slot = "1")]
		~ISteamMatchmakingPlayersResponse()
		{
		}

		[Token(Token = "0x60005B1")]
		[Address(RVA = "0x22E657C", Offset = "0x22E657C", VA = "0x22E657C")]
		private void InternalOnAddPlayerToList(IntPtr thisptr, IntPtr pchName, int nScore, float flTimePlayed)
		{
		}

		[Token(Token = "0x60005B2")]
		[Address(RVA = "0x22E671C", Offset = "0x22E671C", VA = "0x22E671C")]
		private void InternalOnPlayersFailedToRespond(IntPtr thisptr)
		{
		}

		[Token(Token = "0x60005B3")]
		[Address(RVA = "0x22E6738", Offset = "0x22E6738", VA = "0x22E6738")]
		private void InternalOnPlayersRefreshComplete(IntPtr thisptr)
		{
		}

		[Token(Token = "0x60005B4")]
		[Address(RVA = "0x22E6754", Offset = "0x22E6754", VA = "0x22E6754")]
		public static explicit operator IntPtr(ISteamMatchmakingPlayersResponse that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x20000E9")]
	public class ISteamMatchmakingRulesResponse
	{
		[Token(Token = "0x200036F")]
		public delegate void RulesResponded(string pchRule, string pchValue);

		[Token(Token = "0x2000370")]
		public delegate void RulesFailedToRespond();

		[Token(Token = "0x2000371")]
		public delegate void RulesRefreshComplete();

		[Token(Token = "0x2000372")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xA7E950", Offset = "0xA7E950")]
		public delegate void InternalRulesResponded(IntPtr thisptr, IntPtr pchRule, IntPtr pchValue);

		[Token(Token = "0x2000373")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xA7E964", Offset = "0xA7E964")]
		public delegate void InternalRulesFailedToRespond(IntPtr thisptr);

		[Token(Token = "0x2000374")]
		[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xA7E978", Offset = "0xA7E978")]
		public delegate void InternalRulesRefreshComplete(IntPtr thisptr);

		[StructLayout(0)]
		[Token(Token = "0x2000375")]
		private class VTable
		{
			[NonSerialized]
			[Token(Token = "0x4000F39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public InternalRulesResponded m_VTRulesResponded;

			[NonSerialized]
			[Token(Token = "0x4000F3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public InternalRulesFailedToRespond m_VTRulesFailedToRespond;

			[NonSerialized]
			[Token(Token = "0x4000F3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InternalRulesRefreshComplete m_VTRulesRefreshComplete;

			[Token(Token = "0x600165B")]
			[Address(RVA = "0x1EA3C90", Offset = "0x1EA3C90", VA = "0x1EA3C90")]
			public VTable()
			{
			}
		}

		[Token(Token = "0x40001FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private VTable m_VTable;

		[Token(Token = "0x40001FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr m_pVTable;

		[Token(Token = "0x40001FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private GCHandle m_pGCHandle;

		[Token(Token = "0x40001FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RulesResponded m_RulesResponded;

		[Token(Token = "0x4000200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RulesFailedToRespond m_RulesFailedToRespond;

		[Token(Token = "0x4000201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RulesRefreshComplete m_RulesRefreshComplete;

		[Token(Token = "0x60005B5")]
		[Address(RVA = "0x22E6770", Offset = "0x22E6770", VA = "0x22E6770")]
		public ISteamMatchmakingRulesResponse(RulesResponded onRulesResponded, RulesFailedToRespond onRulesFailedToRespond, RulesRefreshComplete onRulesRefreshComplete)
		{
		}

		[Token(Token = "0x60005B6")]
		[Address(RVA = "0x22E6A70", Offset = "0x22E6A70", VA = "0x22E6A70", Slot = "1")]
		~ISteamMatchmakingRulesResponse()
		{
		}

		[Token(Token = "0x60005B7")]
		[Address(RVA = "0x22E6B70", Offset = "0x22E6B70", VA = "0x22E6B70")]
		private void InternalOnRulesResponded(IntPtr thisptr, IntPtr pchRule, IntPtr pchValue)
		{
		}

		[Token(Token = "0x60005B8")]
		[Address(RVA = "0x22E6BC4", Offset = "0x22E6BC4", VA = "0x22E6BC4")]
		private void InternalOnRulesFailedToRespond(IntPtr thisptr)
		{
		}

		[Token(Token = "0x60005B9")]
		[Address(RVA = "0x22E6BE0", Offset = "0x22E6BE0", VA = "0x22E6BE0")]
		private void InternalOnRulesRefreshComplete(IntPtr thisptr)
		{
		}

		[Token(Token = "0x60005BA")]
		[Address(RVA = "0x22E6BFC", Offset = "0x22E6BFC", VA = "0x22E6BFC")]
		public static explicit operator IntPtr(ISteamMatchmakingRulesResponse that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x20000EA")]
	public class InteropHelp
	{
		[Token(Token = "0x2000376")]
		public class UTF8StringHandle : SafeHandleZeroOrMinusOneIsInvalid
		{
			[Token(Token = "0x600165C")]
			[Address(RVA = "0x1EA6F78", Offset = "0x1EA6F78", VA = "0x1EA6F78")]
			public UTF8StringHandle(string str)
			{
			}

			[Token(Token = "0x600165D")]
			[Address(RVA = "0x1EA70A8", Offset = "0x1EA70A8", VA = "0x1EA70A8", Slot = "7")]
			protected override bool ReleaseHandle()
			{
				return default(bool);
			}
		}

		[Token(Token = "0x2000377")]
		public class SteamParamStringArray
		{
			[Token(Token = "0x4000F3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private IntPtr[] m_Strings;

			[Token(Token = "0x4000F3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private IntPtr m_ptrStrings;

			[Token(Token = "0x4000F3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private IntPtr m_pSteamParamStringArray;

			[Token(Token = "0x600165E")]
			[Address(RVA = "0x1EA6860", Offset = "0x1EA6860", VA = "0x1EA6860")]
			public SteamParamStringArray(IList<string> strings)
			{
			}

			[Token(Token = "0x600165F")]
			[Address(RVA = "0x1EA6DA0", Offset = "0x1EA6DA0", VA = "0x1EA6DA0", Slot = "1")]
			~SteamParamStringArray()
			{
			}

			[Token(Token = "0x6001660")]
			[Address(RVA = "0x1EA6F60", Offset = "0x1EA6F60", VA = "0x1EA6F60")]
			public static implicit operator IntPtr(SteamParamStringArray that)
			{
				return default(IntPtr);
			}
		}

		[Token(Token = "0x60005BB")]
		[Address(RVA = "0x22F055C", Offset = "0x22F055C", VA = "0x22F055C")]
		public static void TestIfPlatformSupported()
		{
		}

		[Token(Token = "0x60005BC")]
		[Address(RVA = "0x22F05B0", Offset = "0x22F05B0", VA = "0x22F05B0")]
		public static void TestIfAvailableClient()
		{
		}

		[Token(Token = "0x60005BD")]
		[Address(RVA = "0x22F05E0", Offset = "0x22F05E0", VA = "0x22F05E0")]
		public static void TestIfAvailableGameServer()
		{
		}

		[Token(Token = "0x60005BE")]
		[Address(RVA = "0x22E65CC", Offset = "0x22E65CC", VA = "0x22E65CC")]
		public static string PtrToStringUTF8(IntPtr nativeUtf8)
		{
			return null;
		}

		[Token(Token = "0x60005BF")]
		[Address(RVA = "0x22F0610", Offset = "0x22F0610", VA = "0x22F0610")]
		public InteropHelp()
		{
		}
	}
	[Token(Token = "0x20000EB")]
	public class MMKVPMarshaller
	{
		[Token(Token = "0x4000202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr m_pNativeArray;

		[Token(Token = "0x4000203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private IntPtr m_pArrayEntries;

		[Token(Token = "0x60005C0")]
		[Address(RVA = "0x22F413C", Offset = "0x22F413C", VA = "0x22F413C")]
		public MMKVPMarshaller(MatchMakingKeyValuePair_t[] filters)
		{
		}

		[Token(Token = "0x60005C1")]
		[Address(RVA = "0x22F4384", Offset = "0x22F4384", VA = "0x22F4384", Slot = "1")]
		~MMKVPMarshaller()
		{
		}

		[Token(Token = "0x60005C2")]
		[Address(RVA = "0x22F44A8", Offset = "0x22F44A8", VA = "0x22F44A8")]
		public static implicit operator IntPtr(MMKVPMarshaller that)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x20000EC")]
	public class DllCheck
	{
		[PreserveSig]
		[Token(Token = "0x60005C3")]
		[Address(RVA = "0x16A9BC8", Offset = "0x16A9BC8", VA = "0x16A9BC8")]
		public static extern IntPtr GetModuleHandle(string lpModuleName);

		[PreserveSig]
		[Token(Token = "0x60005C4")]
		[Address(RVA = "0x16A9C60", Offset = "0x16A9C60", VA = "0x16A9C60")]
		private static extern int GetModuleFileName(IntPtr hModule, StringBuilder strFullPath, int nSize);

		[Token(Token = "0x60005C5")]
		[Address(RVA = "0x16A9D20", Offset = "0x16A9D20", VA = "0x16A9D20")]
		public static bool Test()
		{
			return default(bool);
		}

		[Token(Token = "0x60005C6")]
		[Address(RVA = "0x16A9D28", Offset = "0x16A9D28", VA = "0x16A9D28")]
		private static bool CheckSteamAPIDLL()
		{
			return default(bool);
		}

		[Token(Token = "0x60005C7")]
		[Address(RVA = "0x16A9D30", Offset = "0x16A9D30", VA = "0x16A9D30")]
		public DllCheck()
		{
		}
	}
	[Token(Token = "0x20000ED")]
	public static class Packsize
	{
		[Token(Token = "0x2000378")]
		private struct ValvePackingSentinel_t
		{
			[Token(Token = "0x4000F3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private uint m_u32;

			[Token(Token = "0x4000F40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private ulong m_u64;

			[Token(Token = "0x4000F41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private ushort m_u16;

			[Token(Token = "0x4000F42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private double m_d;
		}

		[Token(Token = "0x4000204")]
		public const int value = 8;

		[Token(Token = "0x60005C8")]
		[Address(RVA = "0x10B6454", Offset = "0x10B6454", VA = "0x10B6454")]
		public static bool Test()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20000EE")]
	public static class Version
	{
		[Token(Token = "0x4000205")]
		public const string SteamworksNETVersion = "7.0.0";

		[Token(Token = "0x4000206")]
		public const string SteamworksSDKVersion = "1.34";

		[Token(Token = "0x4000207")]
		public const string SteamAPIDLLVersion = "02.89.45.04";

		[Token(Token = "0x4000208")]
		public const int SteamAPIDLLSize = 186560;

		[Token(Token = "0x4000209")]
		public const int SteamAPI64DLLSize = 206760;
	}
	[Token(Token = "0x20000EF")]
	public static class SteamAPI
	{
		[Token(Token = "0x60005C9")]
		[Address(RVA = "0x1632E08", Offset = "0x1632E08", VA = "0x1632E08")]
		public static bool RestartAppIfNecessary(AppId_t unOwnAppID)
		{
			return default(bool);
		}

		[Token(Token = "0x60005CA")]
		[Address(RVA = "0x1632E34", Offset = "0x1632E34", VA = "0x1632E34")]
		public static bool InitSafe()
		{
			return default(bool);
		}

		[Token(Token = "0x60005CB")]
		[Address(RVA = "0x1632E50", Offset = "0x1632E50", VA = "0x1632E50")]
		public static bool Init()
		{
			return default(bool);
		}

		[Token(Token = "0x60005CC")]
		[Address(RVA = "0x1632E6C", Offset = "0x1632E6C", VA = "0x1632E6C")]
		public static void Shutdown()
		{
		}

		[Token(Token = "0x60005CD")]
		[Address(RVA = "0x1632E88", Offset = "0x1632E88", VA = "0x1632E88")]
		public static void RunCallbacks()
		{
		}

		[Token(Token = "0x60005CE")]
		[Address(RVA = "0x1632EA4", Offset = "0x1632EA4", VA = "0x1632EA4")]
		public static bool IsSteamRunning()
		{
			return default(bool);
		}

		[Token(Token = "0x60005CF")]
		[Address(RVA = "0x1632EC0", Offset = "0x1632EC0", VA = "0x1632EC0")]
		public static HSteamUser GetHSteamUserCurrent()
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x60005D0")]
		[Address(RVA = "0x1632EEC", Offset = "0x1632EEC", VA = "0x1632EEC")]
		public static HSteamPipe GetHSteamPipe()
		{
			return default(HSteamPipe);
		}

		[Token(Token = "0x60005D1")]
		[Address(RVA = "0x1632F18", Offset = "0x1632F18", VA = "0x1632F18")]
		public static HSteamUser GetHSteamUser()
		{
			return default(HSteamUser);
		}
	}
	[Token(Token = "0x20000F0")]
	public static class GameServer
	{
		[Token(Token = "0x60005D2")]
		[Address(RVA = "0x276BD6C", Offset = "0x276BD6C", VA = "0x276BD6C")]
		public static bool InitSafe(uint unIP, ushort usSteamPort, ushort usGamePort, ushort usQueryPort, EServerMode eServerMode, string pchVersionString)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D3")]
		[Address(RVA = "0x276BF08", Offset = "0x276BF08", VA = "0x276BF08")]
		public static bool Init(uint unIP, ushort usSteamPort, ushort usGamePort, ushort usQueryPort, EServerMode eServerMode, string pchVersionString)
		{
			return default(bool);
		}

		[Token(Token = "0x60005D4")]
		[Address(RVA = "0x276C0A4", Offset = "0x276C0A4", VA = "0x276C0A4")]
		public static void Shutdown()
		{
		}

		[Token(Token = "0x60005D5")]
		[Address(RVA = "0x276C0C0", Offset = "0x276C0C0", VA = "0x276C0C0")]
		public static void RunCallbacks()
		{
		}

		[Token(Token = "0x60005D6")]
		[Address(RVA = "0x276C0DC", Offset = "0x276C0DC", VA = "0x276C0DC")]
		public static bool BSecure()
		{
			return default(bool);
		}

		[Token(Token = "0x60005D7")]
		[Address(RVA = "0x276C0F8", Offset = "0x276C0F8", VA = "0x276C0F8")]
		public static CSteamID GetSteamID()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60005D8")]
		[Address(RVA = "0x276C170", Offset = "0x276C170", VA = "0x276C170")]
		public static HSteamPipe GetHSteamPipe()
		{
			return default(HSteamPipe);
		}

		[Token(Token = "0x60005D9")]
		[Address(RVA = "0x276C19C", Offset = "0x276C19C", VA = "0x276C19C")]
		public static HSteamUser GetHSteamUser()
		{
			return default(HSteamUser);
		}
	}
	[Token(Token = "0x20000F1")]
	public static class SteamEncryptedAppTicket
	{
		[Token(Token = "0x60005DA")]
		[Address(RVA = "0x1636C7C", Offset = "0x1636C7C", VA = "0x1636C7C")]
		public static bool BDecryptTicket(byte[] rgubTicketEncrypted, uint cubTicketEncrypted, byte[] rgubTicketDecrypted, ref uint pcubTicketDecrypted, byte[] rgubKey, int cubKey)
		{
			return default(bool);
		}

		[Token(Token = "0x60005DB")]
		[Address(RVA = "0x1636CE0", Offset = "0x1636CE0", VA = "0x1636CE0")]
		public static bool BIsTicketForApp(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID)
		{
			return default(bool);
		}

		[Token(Token = "0x60005DC")]
		[Address(RVA = "0x1636D24", Offset = "0x1636D24", VA = "0x1636D24")]
		public static uint GetTicketIssueTime(byte[] rgubTicketDecrypted, uint cubTicketDecrypted)
		{
			return default(uint);
		}

		[Token(Token = "0x60005DD")]
		[Address(RVA = "0x1636D58", Offset = "0x1636D58", VA = "0x1636D58")]
		public static void GetTicketSteamID(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out CSteamID psteamID)
		{
		}

		[Token(Token = "0x60005DE")]
		[Address(RVA = "0x1636D9C", Offset = "0x1636D9C", VA = "0x1636D9C")]
		public static uint GetTicketAppID(byte[] rgubTicketDecrypted, uint cubTicketDecrypted)
		{
			return default(uint);
		}

		[Token(Token = "0x60005DF")]
		[Address(RVA = "0x1636DD0", Offset = "0x1636DD0", VA = "0x1636DD0")]
		public static bool BUserOwnsAppInTicket(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID)
		{
			return default(bool);
		}

		[Token(Token = "0x60005E0")]
		[Address(RVA = "0x1636E14", Offset = "0x1636E14", VA = "0x1636E14")]
		public static bool BUserIsVacBanned(byte[] rgubTicketDecrypted, uint cubTicketDecrypted)
		{
			return default(bool);
		}

		[Token(Token = "0x60005E1")]
		[Address(RVA = "0x1636E48", Offset = "0x1636E48", VA = "0x1636E48")]
		public static byte[] GetUserVariableData(byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out uint pcubUserData)
		{
			return null;
		}
	}
	[Token(Token = "0x20000F2")]
	internal static class NativeMethods
	{
		[Token(Token = "0x400020A")]
		internal const string NativeLibraryName = "CSteamworks";

		[PreserveSig]
		[Token(Token = "0x60005E2")]
		[Address(RVA = "0x1091D4C", Offset = "0x1091D4C", VA = "0x1091D4C")]
		public static extern void SteamAPI_Shutdown();

		[PreserveSig]
		[Token(Token = "0x60005E3")]
		[Address(RVA = "0x1091DBC", Offset = "0x1091DBC", VA = "0x1091DBC")]
		public static extern bool SteamAPI_IsSteamRunning();

		[PreserveSig]
		[Token(Token = "0x60005E4")]
		[Address(RVA = "0x1091E38", Offset = "0x1091E38", VA = "0x1091E38")]
		public static extern bool SteamAPI_RestartAppIfNecessary(AppId_t unOwnAppID);

		[PreserveSig]
		[Token(Token = "0x60005E5")]
		[Address(RVA = "0x1091EC0", Offset = "0x1091EC0", VA = "0x1091EC0")]
		public static extern void SteamAPI_WriteMiniDump(uint uStructuredExceptionCode, IntPtr pvExceptionInfo, uint uBuildID);

		[PreserveSig]
		[Token(Token = "0x60005E6")]
		[Address(RVA = "0x1091F58", Offset = "0x1091F58", VA = "0x1091F58")]
		public static extern void SteamAPI_SetMiniDumpComment(InteropHelp.UTF8StringHandle pchMsg);

		[PreserveSig]
		[Token(Token = "0x60005E7")]
		[Address(RVA = "0x1092018", Offset = "0x1092018", VA = "0x1092018")]
		public static extern IntPtr SteamClient();

		[PreserveSig]
		[Token(Token = "0x60005E8")]
		[Address(RVA = "0x109208C", Offset = "0x109208C", VA = "0x109208C")]
		public static extern bool SteamAPI_InitSafe();

		[PreserveSig]
		[Token(Token = "0x60005E9")]
		[Address(RVA = "0x1092108", Offset = "0x1092108", VA = "0x1092108")]
		public static extern void SteamAPI_RunCallbacks();

		[PreserveSig]
		[Token(Token = "0x60005EA")]
		[Address(RVA = "0x1092178", Offset = "0x1092178", VA = "0x1092178")]
		public static extern void SteamAPI_RegisterCallback(IntPtr pCallback, int iCallback);

		[PreserveSig]
		[Token(Token = "0x60005EB")]
		[Address(RVA = "0x1092208", Offset = "0x1092208", VA = "0x1092208")]
		public static extern void SteamAPI_UnregisterCallback(IntPtr pCallback);

		[PreserveSig]
		[Token(Token = "0x60005EC")]
		[Address(RVA = "0x1092288", Offset = "0x1092288", VA = "0x1092288")]
		public static extern void SteamAPI_RegisterCallResult(IntPtr pCallback, ulong hAPICall);

		[PreserveSig]
		[Token(Token = "0x60005ED")]
		[Address(RVA = "0x1092318", Offset = "0x1092318", VA = "0x1092318")]
		public static extern void SteamAPI_UnregisterCallResult(IntPtr pCallback, ulong hAPICall);

		[PreserveSig]
		[Token(Token = "0x60005EE")]
		[Address(RVA = "0x10923A8", Offset = "0x10923A8", VA = "0x10923A8")]
		public static extern void Steam_RunCallbacks(HSteamPipe hSteamPipe, bool bGameServerCallbacks);

		[PreserveSig]
		[Token(Token = "0x60005EF")]
		[Address(RVA = "0x1092438", Offset = "0x1092438", VA = "0x1092438")]
		public static extern void Steam_RegisterInterfaceFuncs(IntPtr hModule);

		[PreserveSig]
		[Token(Token = "0x60005F0")]
		[Address(RVA = "0x10924B8", Offset = "0x10924B8", VA = "0x10924B8")]
		public static extern int Steam_GetHSteamUserCurrent();

		[PreserveSig]
		[Token(Token = "0x60005F1")]
		[Address(RVA = "0x109252C", Offset = "0x109252C", VA = "0x109252C")]
		public static extern int SteamAPI_GetSteamInstallPath();

		[PreserveSig]
		[Token(Token = "0x60005F2")]
		[Address(RVA = "0x10925A0", Offset = "0x10925A0", VA = "0x10925A0")]
		public static extern int SteamAPI_GetHSteamPipe();

		[PreserveSig]
		[Token(Token = "0x60005F3")]
		[Address(RVA = "0x1092614", Offset = "0x1092614", VA = "0x1092614")]
		public static extern void SteamAPI_SetTryCatchCallbacks(bool bTryCatchCallbacks);

		[PreserveSig]
		[Token(Token = "0x60005F4")]
		[Address(RVA = "0x1092694", Offset = "0x1092694", VA = "0x1092694")]
		public static extern int SteamAPI_GetHSteamUser();

		[PreserveSig]
		[Token(Token = "0x60005F5")]
		[Address(RVA = "0x1092708", Offset = "0x1092708", VA = "0x1092708")]
		public static extern void SteamAPI_UseBreakpadCrashHandler(InteropHelp.UTF8StringHandle pchVersion, InteropHelp.UTF8StringHandle pchDate, InteropHelp.UTF8StringHandle pchTime, bool bFullMemoryDumps, IntPtr pvContext, IntPtr m_pfnPreMinidumpCallback);

		[PreserveSig]
		[Token(Token = "0x60005F6")]
		[Address(RVA = "0x109288C", Offset = "0x109288C", VA = "0x109288C")]
		public static extern IntPtr SteamUser();

		[PreserveSig]
		[Token(Token = "0x60005F7")]
		[Address(RVA = "0x1092900", Offset = "0x1092900", VA = "0x1092900")]
		public static extern IntPtr SteamFriends();

		[PreserveSig]
		[Token(Token = "0x60005F8")]
		[Address(RVA = "0x1092974", Offset = "0x1092974", VA = "0x1092974")]
		public static extern IntPtr SteamUtils();

		[PreserveSig]
		[Token(Token = "0x60005F9")]
		[Address(RVA = "0x10929E8", Offset = "0x10929E8", VA = "0x10929E8")]
		public static extern IntPtr SteamMatchmaking();

		[PreserveSig]
		[Token(Token = "0x60005FA")]
		[Address(RVA = "0x1092A5C", Offset = "0x1092A5C", VA = "0x1092A5C")]
		public static extern IntPtr SteamUserStats();

		[PreserveSig]
		[Token(Token = "0x60005FB")]
		[Address(RVA = "0x1092AD0", Offset = "0x1092AD0", VA = "0x1092AD0")]
		public static extern IntPtr SteamApps();

		[PreserveSig]
		[Token(Token = "0x60005FC")]
		[Address(RVA = "0x1092B44", Offset = "0x1092B44", VA = "0x1092B44")]
		public static extern IntPtr SteamNetworking();

		[PreserveSig]
		[Token(Token = "0x60005FD")]
		[Address(RVA = "0x1092BB8", Offset = "0x1092BB8", VA = "0x1092BB8")]
		public static extern IntPtr SteamMatchmakingServers();

		[PreserveSig]
		[Token(Token = "0x60005FE")]
		[Address(RVA = "0x1092C2C", Offset = "0x1092C2C", VA = "0x1092C2C")]
		public static extern IntPtr SteamRemoteStorage();

		[PreserveSig]
		[Token(Token = "0x60005FF")]
		[Address(RVA = "0x1092CA0", Offset = "0x1092CA0", VA = "0x1092CA0")]
		public static extern IntPtr SteamScreenshots();

		[PreserveSig]
		[Token(Token = "0x6000600")]
		[Address(RVA = "0x1092D14", Offset = "0x1092D14", VA = "0x1092D14")]
		public static extern IntPtr SteamHTTP();

		[PreserveSig]
		[Token(Token = "0x6000601")]
		[Address(RVA = "0x1092D88", Offset = "0x1092D88", VA = "0x1092D88")]
		public static extern IntPtr SteamUnifiedMessages();

		[PreserveSig]
		[Token(Token = "0x6000602")]
		[Address(RVA = "0x1092DFC", Offset = "0x1092DFC", VA = "0x1092DFC")]
		public static extern IntPtr SteamController();

		[PreserveSig]
		[Token(Token = "0x6000603")]
		[Address(RVA = "0x1092E70", Offset = "0x1092E70", VA = "0x1092E70")]
		public static extern IntPtr SteamUGC();

		[PreserveSig]
		[Token(Token = "0x6000604")]
		[Address(RVA = "0x1092EE4", Offset = "0x1092EE4", VA = "0x1092EE4")]
		public static extern IntPtr SteamAppList();

		[PreserveSig]
		[Token(Token = "0x6000605")]
		[Address(RVA = "0x1092F58", Offset = "0x1092F58", VA = "0x1092F58")]
		public static extern IntPtr SteamMusic();

		[PreserveSig]
		[Token(Token = "0x6000606")]
		[Address(RVA = "0x1092FCC", Offset = "0x1092FCC", VA = "0x1092FCC")]
		public static extern IntPtr SteamMusicRemote();

		[PreserveSig]
		[Token(Token = "0x6000607")]
		[Address(RVA = "0x1093040", Offset = "0x1093040", VA = "0x1093040")]
		public static extern IntPtr SteamHTMLSurface();

		[PreserveSig]
		[Token(Token = "0x6000608")]
		[Address(RVA = "0x10930B4", Offset = "0x10930B4", VA = "0x10930B4")]
		public static extern IntPtr SteamInventory();

		[PreserveSig]
		[Token(Token = "0x6000609")]
		[Address(RVA = "0x1093128", Offset = "0x1093128", VA = "0x1093128")]
		public static extern IntPtr SteamVideo();

		[PreserveSig]
		[Token(Token = "0x600060A")]
		[Address(RVA = "0x109319C", Offset = "0x109319C", VA = "0x109319C")]
		public static extern bool SteamGameServer_InitSafe(uint unIP, ushort usSteamPort, ushort usGamePort, ushort usQueryPort, EServerMode eServerMode, InteropHelp.UTF8StringHandle pchVersionString);

		[PreserveSig]
		[Token(Token = "0x600060B")]
		[Address(RVA = "0x10932A8", Offset = "0x10932A8", VA = "0x10932A8")]
		public static extern void SteamGameServer_Shutdown();

		[PreserveSig]
		[Token(Token = "0x600060C")]
		[Address(RVA = "0x1093318", Offset = "0x1093318", VA = "0x1093318")]
		public static extern void SteamGameServer_RunCallbacks();

		[PreserveSig]
		[Token(Token = "0x600060D")]
		[Address(RVA = "0x1093388", Offset = "0x1093388", VA = "0x1093388")]
		public static extern bool SteamGameServer_BSecure();

		[PreserveSig]
		[Token(Token = "0x600060E")]
		[Address(RVA = "0x1093404", Offset = "0x1093404", VA = "0x1093404")]
		public static extern ulong SteamGameServer_GetSteamID();

		[PreserveSig]
		[Token(Token = "0x600060F")]
		[Address(RVA = "0x1093478", Offset = "0x1093478", VA = "0x1093478")]
		public static extern int SteamGameServer_GetHSteamPipe();

		[PreserveSig]
		[Token(Token = "0x6000610")]
		[Address(RVA = "0x10934EC", Offset = "0x10934EC", VA = "0x10934EC")]
		public static extern int SteamGameServer_GetHSteamUser();

		[PreserveSig]
		[Token(Token = "0x6000611")]
		[Address(RVA = "0x1093560", Offset = "0x1093560", VA = "0x1093560")]
		public static extern IntPtr SteamClientGameServer();

		[PreserveSig]
		[Token(Token = "0x6000612")]
		[Address(RVA = "0x10935D4", Offset = "0x10935D4", VA = "0x10935D4")]
		public static extern IntPtr SteamGameServer();

		[PreserveSig]
		[Token(Token = "0x6000613")]
		[Address(RVA = "0x1093648", Offset = "0x1093648", VA = "0x1093648")]
		public static extern IntPtr SteamGameServerUtils();

		[PreserveSig]
		[Token(Token = "0x6000614")]
		[Address(RVA = "0x10936BC", Offset = "0x10936BC", VA = "0x10936BC")]
		public static extern IntPtr SteamGameServerNetworking();

		[PreserveSig]
		[Token(Token = "0x6000615")]
		[Address(RVA = "0x1093730", Offset = "0x1093730", VA = "0x1093730")]
		public static extern IntPtr SteamGameServerStats();

		[PreserveSig]
		[Token(Token = "0x6000616")]
		[Address(RVA = "0x10937A4", Offset = "0x10937A4", VA = "0x10937A4")]
		public static extern IntPtr SteamGameServerHTTP();

		[PreserveSig]
		[Token(Token = "0x6000617")]
		[Address(RVA = "0x1093818", Offset = "0x1093818", VA = "0x1093818")]
		public static extern IntPtr SteamGameServerInventory();

		[PreserveSig]
		[Token(Token = "0x6000618")]
		[Address(RVA = "0x109388C", Offset = "0x109388C", VA = "0x109388C")]
		public static extern IntPtr SteamGameServerUGC();

		[PreserveSig]
		[Token(Token = "0x6000619")]
		[Address(RVA = "0x1093900", Offset = "0x1093900", VA = "0x1093900")]
		public static extern bool BDecryptTicket([In][Out] byte[] rgubTicketEncrypted, uint cubTicketEncrypted, [In][Out] byte[] rgubTicketDecrypted, ref uint pcubTicketDecrypted, byte[] rgubKey, int cubKey);

		[PreserveSig]
		[Token(Token = "0x600061A")]
		[Address(RVA = "0x10939E0", Offset = "0x10939E0", VA = "0x10939E0")]
		public static extern bool BIsTicketForApp([In][Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x600061B")]
		[Address(RVA = "0x1093A88", Offset = "0x1093A88", VA = "0x1093A88")]
		public static extern uint GetTicketIssueTime([In][Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted);

		[PreserveSig]
		[Token(Token = "0x600061C")]
		[Address(RVA = "0x1093B20", Offset = "0x1093B20", VA = "0x1093B20")]
		public static extern void GetTicketSteamID([In][Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out CSteamID psteamID);

		[PreserveSig]
		[Token(Token = "0x600061D")]
		[Address(RVA = "0x1093BC0", Offset = "0x1093BC0", VA = "0x1093BC0")]
		public static extern uint GetTicketAppID([In][Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted);

		[PreserveSig]
		[Token(Token = "0x600061E")]
		[Address(RVA = "0x1093C58", Offset = "0x1093C58", VA = "0x1093C58")]
		public static extern bool BUserOwnsAppInTicket([In][Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted, AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x600061F")]
		[Address(RVA = "0x1093D00", Offset = "0x1093D00", VA = "0x1093D00")]
		public static extern bool BUserIsVacBanned([In][Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted);

		[PreserveSig]
		[Token(Token = "0x6000620")]
		[Address(RVA = "0x1093DA0", Offset = "0x1093DA0", VA = "0x1093DA0")]
		public static extern IntPtr GetUserVariableData([In][Out] byte[] rgubTicketDecrypted, uint cubTicketDecrypted, out uint pcubUserData);

		[PreserveSig]
		[Token(Token = "0x6000621")]
		[Address(RVA = "0x1093E40", Offset = "0x1093E40", VA = "0x1093E40")]
		public static extern uint ISteamAppList_GetNumInstalledApps();

		[PreserveSig]
		[Token(Token = "0x6000622")]
		[Address(RVA = "0x1093EB4", Offset = "0x1093EB4", VA = "0x1093EB4")]
		public static extern uint ISteamAppList_GetInstalledApps([In][Out] AppId_t[] pvecAppID, uint unMaxAppIDs);

		[PreserveSig]
		[Token(Token = "0x6000623")]
		[Address(RVA = "0x1093F4C", Offset = "0x1093F4C", VA = "0x1093F4C")]
		public static extern int ISteamAppList_GetAppName(AppId_t nAppID, IntPtr pchName, int cchNameMax);

		[PreserveSig]
		[Token(Token = "0x6000624")]
		[Address(RVA = "0x1093FE4", Offset = "0x1093FE4", VA = "0x1093FE4")]
		public static extern int ISteamAppList_GetAppInstallDir(AppId_t nAppID, IntPtr pchDirectory, int cchNameMax);

		[PreserveSig]
		[Token(Token = "0x6000625")]
		[Address(RVA = "0x109407C", Offset = "0x109407C", VA = "0x109407C")]
		public static extern int ISteamAppList_GetAppBuildId(AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x6000626")]
		[Address(RVA = "0x10940FC", Offset = "0x10940FC", VA = "0x10940FC")]
		public static extern bool ISteamApps_BIsSubscribed();

		[PreserveSig]
		[Token(Token = "0x6000627")]
		[Address(RVA = "0x1094178", Offset = "0x1094178", VA = "0x1094178")]
		public static extern bool ISteamApps_BIsLowViolence();

		[PreserveSig]
		[Token(Token = "0x6000628")]
		[Address(RVA = "0x10941F4", Offset = "0x10941F4", VA = "0x10941F4")]
		public static extern bool ISteamApps_BIsCybercafe();

		[PreserveSig]
		[Token(Token = "0x6000629")]
		[Address(RVA = "0x1094270", Offset = "0x1094270", VA = "0x1094270")]
		public static extern bool ISteamApps_BIsVACBanned();

		[PreserveSig]
		[Token(Token = "0x600062A")]
		[Address(RVA = "0x10942EC", Offset = "0x10942EC", VA = "0x10942EC")]
		public static extern IntPtr ISteamApps_GetCurrentGameLanguage();

		[PreserveSig]
		[Token(Token = "0x600062B")]
		[Address(RVA = "0x1094360", Offset = "0x1094360", VA = "0x1094360")]
		public static extern IntPtr ISteamApps_GetAvailableGameLanguages();

		[PreserveSig]
		[Token(Token = "0x600062C")]
		[Address(RVA = "0x10943D4", Offset = "0x10943D4", VA = "0x10943D4")]
		public static extern bool ISteamApps_BIsSubscribedApp(AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x600062D")]
		[Address(RVA = "0x109445C", Offset = "0x109445C", VA = "0x109445C")]
		public static extern bool ISteamApps_BIsDlcInstalled(AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x600062E")]
		[Address(RVA = "0x10944E4", Offset = "0x10944E4", VA = "0x10944E4")]
		public static extern uint ISteamApps_GetEarliestPurchaseUnixTime(AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x600062F")]
		[Address(RVA = "0x1094564", Offset = "0x1094564", VA = "0x1094564")]
		public static extern bool ISteamApps_BIsSubscribedFromFreeWeekend();

		[PreserveSig]
		[Token(Token = "0x6000630")]
		[Address(RVA = "0x10945E0", Offset = "0x10945E0", VA = "0x10945E0")]
		public static extern int ISteamApps_GetDLCCount();

		[PreserveSig]
		[Token(Token = "0x6000631")]
		[Address(RVA = "0x1094654", Offset = "0x1094654", VA = "0x1094654")]
		public static extern bool ISteamApps_BGetDLCDataByIndex(int iDLC, out AppId_t pAppID, out bool pbAvailable, IntPtr pchName, int cchNameBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000632")]
		[Address(RVA = "0x1094720", Offset = "0x1094720", VA = "0x1094720")]
		public static extern void ISteamApps_InstallDLC(AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x6000633")]
		[Address(RVA = "0x10947A0", Offset = "0x10947A0", VA = "0x10947A0")]
		public static extern void ISteamApps_UninstallDLC(AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x6000634")]
		[Address(RVA = "0x1094820", Offset = "0x1094820", VA = "0x1094820")]
		public static extern void ISteamApps_RequestAppProofOfPurchaseKey(AppId_t nAppID);

		[PreserveSig]
		[Token(Token = "0x6000635")]
		[Address(RVA = "0x10948A0", Offset = "0x10948A0", VA = "0x10948A0")]
		public static extern bool ISteamApps_GetCurrentBetaName(IntPtr pchName, int cchNameBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000636")]
		[Address(RVA = "0x1094938", Offset = "0x1094938", VA = "0x1094938")]
		public static extern bool ISteamApps_MarkContentCorrupt(bool bMissingFilesOnly);

		[PreserveSig]
		[Token(Token = "0x6000637")]
		[Address(RVA = "0x10949C0", Offset = "0x10949C0", VA = "0x10949C0")]
		public static extern uint ISteamApps_GetInstalledDepots(AppId_t appID, [In][Out] DepotId_t[] pvecDepots, uint cMaxDepots);

		[PreserveSig]
		[Token(Token = "0x6000638")]
		[Address(RVA = "0x1094A60", Offset = "0x1094A60", VA = "0x1094A60")]
		public static extern uint ISteamApps_GetAppInstallDir(AppId_t appID, IntPtr pchFolder, uint cchFolderBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000639")]
		[Address(RVA = "0x1094AF8", Offset = "0x1094AF8", VA = "0x1094AF8")]
		public static extern bool ISteamApps_BIsAppInstalled(AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x600063A")]
		[Address(RVA = "0x1094B80", Offset = "0x1094B80", VA = "0x1094B80")]
		public static extern ulong ISteamApps_GetAppOwner();

		[PreserveSig]
		[Token(Token = "0x600063B")]
		[Address(RVA = "0x1094BF4", Offset = "0x1094BF4", VA = "0x1094BF4")]
		public static extern IntPtr ISteamApps_GetLaunchQueryParam(InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x600063C")]
		[Address(RVA = "0x1094CBC", Offset = "0x1094CBC", VA = "0x1094CBC")]
		public static extern bool ISteamApps_GetDlcDownloadProgress(AppId_t nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal);

		[PreserveSig]
		[Token(Token = "0x600063D")]
		[Address(RVA = "0x1094D5C", Offset = "0x1094D5C", VA = "0x1094D5C")]
		public static extern int ISteamApps_GetAppBuildId();

		[PreserveSig]
		[Token(Token = "0x600063E")]
		[Address(RVA = "0x1094DD0", Offset = "0x1094DD0", VA = "0x1094DD0")]
		public static extern int ISteamClient_CreateSteamPipe();

		[PreserveSig]
		[Token(Token = "0x600063F")]
		[Address(RVA = "0x1094E44", Offset = "0x1094E44", VA = "0x1094E44")]
		public static extern bool ISteamClient_BReleaseSteamPipe(HSteamPipe hSteamPipe);

		[PreserveSig]
		[Token(Token = "0x6000640")]
		[Address(RVA = "0x1094ECC", Offset = "0x1094ECC", VA = "0x1094ECC")]
		public static extern int ISteamClient_ConnectToGlobalUser(HSteamPipe hSteamPipe);

		[PreserveSig]
		[Token(Token = "0x6000641")]
		[Address(RVA = "0x1094F4C", Offset = "0x1094F4C", VA = "0x1094F4C")]
		public static extern int ISteamClient_CreateLocalUser(out HSteamPipe phSteamPipe, EAccountType eAccountType);

		[PreserveSig]
		[Token(Token = "0x6000642")]
		[Address(RVA = "0x1094FDC", Offset = "0x1094FDC", VA = "0x1094FDC")]
		public static extern void ISteamClient_ReleaseUser(HSteamPipe hSteamPipe, HSteamUser hUser);

		[PreserveSig]
		[Token(Token = "0x6000643")]
		[Address(RVA = "0x109506C", Offset = "0x109506C", VA = "0x109506C")]
		public static extern IntPtr ISteamClient_GetISteamUser(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000644")]
		[Address(RVA = "0x109514C", Offset = "0x109514C", VA = "0x109514C")]
		public static extern IntPtr ISteamClient_GetISteamGameServer(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000645")]
		[Address(RVA = "0x109522C", Offset = "0x109522C", VA = "0x109522C")]
		public static extern void ISteamClient_SetLocalIPBinding(uint unIP, ushort usPort);

		[PreserveSig]
		[Token(Token = "0x6000646")]
		[Address(RVA = "0x10952BC", Offset = "0x10952BC", VA = "0x10952BC")]
		public static extern IntPtr ISteamClient_GetISteamFriends(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000647")]
		[Address(RVA = "0x109539C", Offset = "0x109539C", VA = "0x109539C")]
		public static extern IntPtr ISteamClient_GetISteamUtils(HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000648")]
		[Address(RVA = "0x1095474", Offset = "0x1095474", VA = "0x1095474")]
		public static extern IntPtr ISteamClient_GetISteamMatchmaking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000649")]
		[Address(RVA = "0x1095554", Offset = "0x1095554", VA = "0x1095554")]
		public static extern IntPtr ISteamClient_GetISteamMatchmakingServers(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x600064A")]
		[Address(RVA = "0x1095634", Offset = "0x1095634", VA = "0x1095634")]
		public static extern IntPtr ISteamClient_GetISteamGenericInterface(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x600064B")]
		[Address(RVA = "0x1095714", Offset = "0x1095714", VA = "0x1095714")]
		public static extern IntPtr ISteamClient_GetISteamUserStats(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x600064C")]
		[Address(RVA = "0x10957F4", Offset = "0x10957F4", VA = "0x10957F4")]
		public static extern IntPtr ISteamClient_GetISteamGameServerStats(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x600064D")]
		[Address(RVA = "0x10958D4", Offset = "0x10958D4", VA = "0x10958D4")]
		public static extern IntPtr ISteamClient_GetISteamApps(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x600064E")]
		[Address(RVA = "0x10959B4", Offset = "0x10959B4", VA = "0x10959B4")]
		public static extern IntPtr ISteamClient_GetISteamNetworking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x600064F")]
		[Address(RVA = "0x1095A94", Offset = "0x1095A94", VA = "0x1095A94")]
		public static extern IntPtr ISteamClient_GetISteamRemoteStorage(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000650")]
		[Address(RVA = "0x1095B74", Offset = "0x1095B74", VA = "0x1095B74")]
		public static extern IntPtr ISteamClient_GetISteamScreenshots(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000651")]
		[Address(RVA = "0x1095C54", Offset = "0x1095C54", VA = "0x1095C54")]
		public static extern void ISteamClient_RunFrame();

		[PreserveSig]
		[Token(Token = "0x6000652")]
		[Address(RVA = "0x1095CC4", Offset = "0x1095CC4", VA = "0x1095CC4")]
		public static extern uint ISteamClient_GetIPCCallCount();

		[PreserveSig]
		[Token(Token = "0x6000653")]
		[Address(RVA = "0x1095D38", Offset = "0x1095D38", VA = "0x1095D38")]
		public static extern void ISteamClient_SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction);

		[PreserveSig]
		[Token(Token = "0x6000654")]
		[Address(RVA = "0x1095DBC", Offset = "0x1095DBC", VA = "0x1095DBC")]
		public static extern bool ISteamClient_BShutdownIfAllPipesClosed();

		[PreserveSig]
		[Token(Token = "0x6000655")]
		[Address(RVA = "0x1095E38", Offset = "0x1095E38", VA = "0x1095E38")]
		public static extern IntPtr ISteamClient_GetISteamHTTP(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000656")]
		[Address(RVA = "0x1095F18", Offset = "0x1095F18", VA = "0x1095F18")]
		public static extern IntPtr ISteamClient_GetISteamUnifiedMessages(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000657")]
		[Address(RVA = "0x1095FF8", Offset = "0x1095FF8", VA = "0x1095FF8")]
		public static extern IntPtr ISteamClient_GetISteamController(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000658")]
		[Address(RVA = "0x10960D8", Offset = "0x10960D8", VA = "0x10960D8")]
		public static extern IntPtr ISteamClient_GetISteamUGC(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000659")]
		[Address(RVA = "0x10961B8", Offset = "0x10961B8", VA = "0x10961B8")]
		public static extern IntPtr ISteamClient_GetISteamAppList(HSteamUser hSteamUser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x600065A")]
		[Address(RVA = "0x1096298", Offset = "0x1096298", VA = "0x1096298")]
		public static extern IntPtr ISteamClient_GetISteamMusic(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x600065B")]
		[Address(RVA = "0x1096378", Offset = "0x1096378", VA = "0x1096378")]
		public static extern IntPtr ISteamClient_GetISteamMusicRemote(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x600065C")]
		[Address(RVA = "0x1096458", Offset = "0x1096458", VA = "0x1096458")]
		public static extern IntPtr ISteamClient_GetISteamHTMLSurface(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x600065D")]
		[Address(RVA = "0x1096538", Offset = "0x1096538", VA = "0x1096538")]
		public static extern void ISteamClient_Set_SteamAPI_CPostAPIResultInProcess(SteamAPI_PostAPIResultInProcess_t func);

		[PreserveSig]
		[Token(Token = "0x600065E")]
		[Address(RVA = "0x10965BC", Offset = "0x10965BC", VA = "0x10965BC")]
		public static extern void ISteamClient_Remove_SteamAPI_CPostAPIResultInProcess(SteamAPI_PostAPIResultInProcess_t func);

		[PreserveSig]
		[Token(Token = "0x600065F")]
		[Address(RVA = "0x1096640", Offset = "0x1096640", VA = "0x1096640")]
		public static extern void ISteamClient_Set_SteamAPI_CCheckCallbackRegisteredInProcess(SteamAPI_CheckCallbackRegistered_t func);

		[PreserveSig]
		[Token(Token = "0x6000660")]
		[Address(RVA = "0x10966C4", Offset = "0x10966C4", VA = "0x10966C4")]
		public static extern IntPtr ISteamClient_GetISteamInventory(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000661")]
		[Address(RVA = "0x10967A4", Offset = "0x10967A4", VA = "0x10967A4")]
		public static extern IntPtr ISteamClient_GetISteamVideo(HSteamUser hSteamuser, HSteamPipe hSteamPipe, InteropHelp.UTF8StringHandle pchVersion);

		[PreserveSig]
		[Token(Token = "0x6000662")]
		[Address(RVA = "0x1096884", Offset = "0x1096884", VA = "0x1096884")]
		public static extern bool ISteamController_Init(InteropHelp.UTF8StringHandle pchAbsolutePathToControllerConfigVDF);

		[PreserveSig]
		[Token(Token = "0x6000663")]
		[Address(RVA = "0x1096950", Offset = "0x1096950", VA = "0x1096950")]
		public static extern bool ISteamController_Shutdown();

		[PreserveSig]
		[Token(Token = "0x6000664")]
		[Address(RVA = "0x10969CC", Offset = "0x10969CC", VA = "0x10969CC")]
		public static extern void ISteamController_RunFrame();

		[PreserveSig]
		[Token(Token = "0x6000665")]
		[Address(RVA = "0x1096A3C", Offset = "0x1096A3C", VA = "0x1096A3C")]
		public static extern bool ISteamController_GetControllerState(uint unControllerIndex, out SteamControllerState_t pState);

		[PreserveSig]
		[Token(Token = "0x6000666")]
		[Address(RVA = "0x1096AD4", Offset = "0x1096AD4", VA = "0x1096AD4")]
		public static extern void ISteamController_TriggerHapticPulse(uint unControllerIndex, ESteamControllerPad eTargetPad, ushort usDurationMicroSec);

		[PreserveSig]
		[Token(Token = "0x6000667")]
		[Address(RVA = "0x1096B6C", Offset = "0x1096B6C", VA = "0x1096B6C")]
		public static extern void ISteamController_SetOverrideMode(InteropHelp.UTF8StringHandle pchMode);

		[PreserveSig]
		[Token(Token = "0x6000668")]
		[Address(RVA = "0x1096C2C", Offset = "0x1096C2C", VA = "0x1096C2C")]
		public static extern IntPtr ISteamFriends_GetPersonaName();

		[PreserveSig]
		[Token(Token = "0x6000669")]
		[Address(RVA = "0x1096CA0", Offset = "0x1096CA0", VA = "0x1096CA0")]
		public static extern ulong ISteamFriends_SetPersonaName(InteropHelp.UTF8StringHandle pchPersonaName);

		[PreserveSig]
		[Token(Token = "0x600066A")]
		[Address(RVA = "0x1096D68", Offset = "0x1096D68", VA = "0x1096D68")]
		public static extern EPersonaState ISteamFriends_GetPersonaState();

		[PreserveSig]
		[Token(Token = "0x600066B")]
		[Address(RVA = "0x1096DDC", Offset = "0x1096DDC", VA = "0x1096DDC")]
		public static extern int ISteamFriends_GetFriendCount(EFriendFlags iFriendFlags);

		[PreserveSig]
		[Token(Token = "0x600066C")]
		[Address(RVA = "0x1096E5C", Offset = "0x1096E5C", VA = "0x1096E5C")]
		public static extern ulong ISteamFriends_GetFriendByIndex(int iFriend, EFriendFlags iFriendFlags);

		[PreserveSig]
		[Token(Token = "0x600066D")]
		[Address(RVA = "0x1096EEC", Offset = "0x1096EEC", VA = "0x1096EEC")]
		public static extern EFriendRelationship ISteamFriends_GetFriendRelationship(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x600066E")]
		[Address(RVA = "0x1096F6C", Offset = "0x1096F6C", VA = "0x1096F6C")]
		public static extern EPersonaState ISteamFriends_GetFriendPersonaState(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x600066F")]
		[Address(RVA = "0x1096FEC", Offset = "0x1096FEC", VA = "0x1096FEC")]
		public static extern IntPtr ISteamFriends_GetFriendPersonaName(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6000670")]
		[Address(RVA = "0x109706C", Offset = "0x109706C", VA = "0x109706C")]
		public static extern bool ISteamFriends_GetFriendGamePlayed(CSteamID steamIDFriend, out FriendGameInfo_t pFriendGameInfo);

		[PreserveSig]
		[Token(Token = "0x6000671")]
		[Address(RVA = "0x1097104", Offset = "0x1097104", VA = "0x1097104")]
		public static extern IntPtr ISteamFriends_GetFriendPersonaNameHistory(CSteamID steamIDFriend, int iPersonaName);

		[PreserveSig]
		[Token(Token = "0x6000672")]
		[Address(RVA = "0x1097194", Offset = "0x1097194", VA = "0x1097194")]
		public static extern int ISteamFriends_GetFriendSteamLevel(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6000673")]
		[Address(RVA = "0x1097214", Offset = "0x1097214", VA = "0x1097214")]
		public static extern IntPtr ISteamFriends_GetPlayerNickname(CSteamID steamIDPlayer);

		[PreserveSig]
		[Token(Token = "0x6000674")]
		[Address(RVA = "0x1097294", Offset = "0x1097294", VA = "0x1097294")]
		public static extern int ISteamFriends_GetFriendsGroupCount();

		[PreserveSig]
		[Token(Token = "0x6000675")]
		[Address(RVA = "0x1097308", Offset = "0x1097308", VA = "0x1097308")]
		public static extern short ISteamFriends_GetFriendsGroupIDByIndex(int iFG);

		[PreserveSig]
		[Token(Token = "0x6000676")]
		[Address(RVA = "0x1097388", Offset = "0x1097388", VA = "0x1097388")]
		public static extern IntPtr ISteamFriends_GetFriendsGroupName(FriendsGroupID_t friendsGroupID);

		[PreserveSig]
		[Token(Token = "0x6000677")]
		[Address(RVA = "0x1097408", Offset = "0x1097408", VA = "0x1097408")]
		public static extern int ISteamFriends_GetFriendsGroupMembersCount(FriendsGroupID_t friendsGroupID);

		[PreserveSig]
		[Token(Token = "0x6000678")]
		[Address(RVA = "0x1097488", Offset = "0x1097488", VA = "0x1097488")]
		public static extern void ISteamFriends_GetFriendsGroupMembersList(FriendsGroupID_t friendsGroupID, [In][Out] CSteamID[] pOutSteamIDMembers, int nMembersCount);

		[PreserveSig]
		[Token(Token = "0x6000679")]
		[Address(RVA = "0x1097528", Offset = "0x1097528", VA = "0x1097528")]
		public static extern bool ISteamFriends_HasFriend(CSteamID steamIDFriend, EFriendFlags iFriendFlags);

		[PreserveSig]
		[Token(Token = "0x600067A")]
		[Address(RVA = "0x10975C0", Offset = "0x10975C0", VA = "0x10975C0")]
		public static extern int ISteamFriends_GetClanCount();

		[PreserveSig]
		[Token(Token = "0x600067B")]
		[Address(RVA = "0x1097634", Offset = "0x1097634", VA = "0x1097634")]
		public static extern ulong ISteamFriends_GetClanByIndex(int iClan);

		[PreserveSig]
		[Token(Token = "0x600067C")]
		[Address(RVA = "0x10976B4", Offset = "0x10976B4", VA = "0x10976B4")]
		public static extern IntPtr ISteamFriends_GetClanName(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x600067D")]
		[Address(RVA = "0x1097734", Offset = "0x1097734", VA = "0x1097734")]
		public static extern IntPtr ISteamFriends_GetClanTag(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x600067E")]
		[Address(RVA = "0x10977B4", Offset = "0x10977B4", VA = "0x10977B4")]
		public static extern bool ISteamFriends_GetClanActivityCounts(CSteamID steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting);

		[PreserveSig]
		[Token(Token = "0x600067F")]
		[Address(RVA = "0x1097864", Offset = "0x1097864", VA = "0x1097864")]
		public static extern ulong ISteamFriends_DownloadClanActivityCounts([In][Out] CSteamID[] psteamIDClans, int cClansToRequest);

		[PreserveSig]
		[Token(Token = "0x6000680")]
		[Address(RVA = "0x10978FC", Offset = "0x10978FC", VA = "0x10978FC")]
		public static extern int ISteamFriends_GetFriendCountFromSource(CSteamID steamIDSource);

		[PreserveSig]
		[Token(Token = "0x6000681")]
		[Address(RVA = "0x109797C", Offset = "0x109797C", VA = "0x109797C")]
		public static extern ulong ISteamFriends_GetFriendFromSourceByIndex(CSteamID steamIDSource, int iFriend);

		[PreserveSig]
		[Token(Token = "0x6000682")]
		[Address(RVA = "0x1097A0C", Offset = "0x1097A0C", VA = "0x1097A0C")]
		public static extern bool ISteamFriends_IsUserInSource(CSteamID steamIDUser, CSteamID steamIDSource);

		[PreserveSig]
		[Token(Token = "0x6000683")]
		[Address(RVA = "0x1097AA4", Offset = "0x1097AA4", VA = "0x1097AA4")]
		public static extern void ISteamFriends_SetInGameVoiceSpeaking(CSteamID steamIDUser, bool bSpeaking);

		[PreserveSig]
		[Token(Token = "0x6000684")]
		[Address(RVA = "0x1097B34", Offset = "0x1097B34", VA = "0x1097B34")]
		public static extern void ISteamFriends_ActivateGameOverlay(InteropHelp.UTF8StringHandle pchDialog);

		[PreserveSig]
		[Token(Token = "0x6000685")]
		[Address(RVA = "0x1097BF4", Offset = "0x1097BF4", VA = "0x1097BF4")]
		public static extern void ISteamFriends_ActivateGameOverlayToUser(InteropHelp.UTF8StringHandle pchDialog, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x6000686")]
		[Address(RVA = "0x1097CC4", Offset = "0x1097CC4", VA = "0x1097CC4")]
		public static extern void ISteamFriends_ActivateGameOverlayToWebPage(InteropHelp.UTF8StringHandle pchURL);

		[PreserveSig]
		[Token(Token = "0x6000687")]
		[Address(RVA = "0x1097D84", Offset = "0x1097D84", VA = "0x1097D84")]
		public static extern void ISteamFriends_ActivateGameOverlayToStore(AppId_t nAppID, EOverlayToStoreFlag eFlag);

		[PreserveSig]
		[Token(Token = "0x6000688")]
		[Address(RVA = "0x1097E14", Offset = "0x1097E14", VA = "0x1097E14")]
		public static extern void ISteamFriends_SetPlayedWith(CSteamID steamIDUserPlayedWith);

		[PreserveSig]
		[Token(Token = "0x6000689")]
		[Address(RVA = "0x1097E94", Offset = "0x1097E94", VA = "0x1097E94")]
		public static extern void ISteamFriends_ActivateGameOverlayInviteDialog(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x600068A")]
		[Address(RVA = "0x1097F14", Offset = "0x1097F14", VA = "0x1097F14")]
		public static extern int ISteamFriends_GetSmallFriendAvatar(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x600068B")]
		[Address(RVA = "0x1097F94", Offset = "0x1097F94", VA = "0x1097F94")]
		public static extern int ISteamFriends_GetMediumFriendAvatar(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x600068C")]
		[Address(RVA = "0x1098014", Offset = "0x1098014", VA = "0x1098014")]
		public static extern int ISteamFriends_GetLargeFriendAvatar(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x600068D")]
		[Address(RVA = "0x1098094", Offset = "0x1098094", VA = "0x1098094")]
		public static extern bool ISteamFriends_RequestUserInformation(CSteamID steamIDUser, bool bRequireNameOnly);

		[PreserveSig]
		[Token(Token = "0x600068E")]
		[Address(RVA = "0x109812C", Offset = "0x109812C", VA = "0x109812C")]
		public static extern ulong ISteamFriends_RequestClanOfficerList(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x600068F")]
		[Address(RVA = "0x10981AC", Offset = "0x10981AC", VA = "0x10981AC")]
		public static extern ulong ISteamFriends_GetClanOwner(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000690")]
		[Address(RVA = "0x109822C", Offset = "0x109822C", VA = "0x109822C")]
		public static extern int ISteamFriends_GetClanOfficerCount(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x6000691")]
		[Address(RVA = "0x10982AC", Offset = "0x10982AC", VA = "0x10982AC")]
		public static extern ulong ISteamFriends_GetClanOfficerByIndex(CSteamID steamIDClan, int iOfficer);

		[PreserveSig]
		[Token(Token = "0x6000692")]
		[Address(RVA = "0x109833C", Offset = "0x109833C", VA = "0x109833C")]
		public static extern uint ISteamFriends_GetUserRestrictions();

		[PreserveSig]
		[Token(Token = "0x6000693")]
		[Address(RVA = "0x10983B0", Offset = "0x10983B0", VA = "0x10983B0")]
		public static extern bool ISteamFriends_SetRichPresence(InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x6000694")]
		[Address(RVA = "0x10984C8", Offset = "0x10984C8", VA = "0x10984C8")]
		public static extern void ISteamFriends_ClearRichPresence();

		[PreserveSig]
		[Token(Token = "0x6000695")]
		[Address(RVA = "0x1098538", Offset = "0x1098538", VA = "0x1098538")]
		public static extern IntPtr ISteamFriends_GetFriendRichPresence(CSteamID steamIDFriend, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x6000696")]
		[Address(RVA = "0x1098610", Offset = "0x1098610", VA = "0x1098610")]
		public static extern int ISteamFriends_GetFriendRichPresenceKeyCount(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6000697")]
		[Address(RVA = "0x1098690", Offset = "0x1098690", VA = "0x1098690")]
		public static extern IntPtr ISteamFriends_GetFriendRichPresenceKeyByIndex(CSteamID steamIDFriend, int iKey);

		[PreserveSig]
		[Token(Token = "0x6000698")]
		[Address(RVA = "0x1098720", Offset = "0x1098720", VA = "0x1098720")]
		public static extern void ISteamFriends_RequestFriendRichPresence(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x6000699")]
		[Address(RVA = "0x10987A0", Offset = "0x10987A0", VA = "0x10987A0")]
		public static extern bool ISteamFriends_InviteUserToGame(CSteamID steamIDFriend, InteropHelp.UTF8StringHandle pchConnectString);

		[PreserveSig]
		[Token(Token = "0x600069A")]
		[Address(RVA = "0x109887C", Offset = "0x109887C", VA = "0x109887C")]
		public static extern int ISteamFriends_GetCoplayFriendCount();

		[PreserveSig]
		[Token(Token = "0x600069B")]
		[Address(RVA = "0x10988F0", Offset = "0x10988F0", VA = "0x10988F0")]
		public static extern ulong ISteamFriends_GetCoplayFriend(int iCoplayFriend);

		[PreserveSig]
		[Token(Token = "0x600069C")]
		[Address(RVA = "0x1098970", Offset = "0x1098970", VA = "0x1098970")]
		public static extern int ISteamFriends_GetFriendCoplayTime(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x600069D")]
		[Address(RVA = "0x10989F0", Offset = "0x10989F0", VA = "0x10989F0")]
		public static extern uint ISteamFriends_GetFriendCoplayGame(CSteamID steamIDFriend);

		[PreserveSig]
		[Token(Token = "0x600069E")]
		[Address(RVA = "0x1098A70", Offset = "0x1098A70", VA = "0x1098A70")]
		public static extern ulong ISteamFriends_JoinClanChatRoom(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x600069F")]
		[Address(RVA = "0x1098AF0", Offset = "0x1098AF0", VA = "0x1098AF0")]
		public static extern bool ISteamFriends_LeaveClanChatRoom(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x60006A0")]
		[Address(RVA = "0x1098B78", Offset = "0x1098B78", VA = "0x1098B78")]
		public static extern int ISteamFriends_GetClanChatMemberCount(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x60006A1")]
		[Address(RVA = "0x1098BF8", Offset = "0x1098BF8", VA = "0x1098BF8")]
		public static extern ulong ISteamFriends_GetChatMemberByIndex(CSteamID steamIDClan, int iUser);

		[PreserveSig]
		[Token(Token = "0x60006A2")]
		[Address(RVA = "0x1098C88", Offset = "0x1098C88", VA = "0x1098C88")]
		public static extern bool ISteamFriends_SendClanChatMessage(CSteamID steamIDClanChat, InteropHelp.UTF8StringHandle pchText);

		[PreserveSig]
		[Token(Token = "0x60006A3")]
		[Address(RVA = "0x1098D64", Offset = "0x1098D64", VA = "0x1098D64")]
		public static extern int ISteamFriends_GetClanChatMessage(CSteamID steamIDClanChat, int iMessage, IntPtr prgchText, int cchTextMax, out EChatEntryType peChatEntryType, out CSteamID psteamidChatter);

		[PreserveSig]
		[Token(Token = "0x60006A4")]
		[Address(RVA = "0x1098E24", Offset = "0x1098E24", VA = "0x1098E24")]
		public static extern bool ISteamFriends_IsClanChatAdmin(CSteamID steamIDClanChat, CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x60006A5")]
		[Address(RVA = "0x1098EBC", Offset = "0x1098EBC", VA = "0x1098EBC")]
		public static extern bool ISteamFriends_IsClanChatWindowOpenInSteam(CSteamID steamIDClanChat);

		[PreserveSig]
		[Token(Token = "0x60006A6")]
		[Address(RVA = "0x1098F44", Offset = "0x1098F44", VA = "0x1098F44")]
		public static extern bool ISteamFriends_OpenClanChatWindowInSteam(CSteamID steamIDClanChat);

		[PreserveSig]
		[Token(Token = "0x60006A7")]
		[Address(RVA = "0x1098FCC", Offset = "0x1098FCC", VA = "0x1098FCC")]
		public static extern bool ISteamFriends_CloseClanChatWindowInSteam(CSteamID steamIDClanChat);

		[PreserveSig]
		[Token(Token = "0x60006A8")]
		[Address(RVA = "0x1099054", Offset = "0x1099054", VA = "0x1099054")]
		public static extern bool ISteamFriends_SetListenForFriendsMessages(bool bInterceptEnabled);

		[PreserveSig]
		[Token(Token = "0x60006A9")]
		[Address(RVA = "0x10990DC", Offset = "0x10990DC", VA = "0x10990DC")]
		public static extern bool ISteamFriends_ReplyToFriendMessage(CSteamID steamIDFriend, InteropHelp.UTF8StringHandle pchMsgToSend);

		[PreserveSig]
		[Token(Token = "0x60006AA")]
		[Address(RVA = "0x10991B8", Offset = "0x10991B8", VA = "0x10991B8")]
		public static extern int ISteamFriends_GetFriendMessage(CSteamID steamIDFriend, int iMessageID, IntPtr pvData, int cubData, out EChatEntryType peChatEntryType);

		[PreserveSig]
		[Token(Token = "0x60006AB")]
		[Address(RVA = "0x1099268", Offset = "0x1099268", VA = "0x1099268")]
		public static extern ulong ISteamFriends_GetFollowerCount(CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x60006AC")]
		[Address(RVA = "0x10992E8", Offset = "0x10992E8", VA = "0x10992E8")]
		public static extern ulong ISteamFriends_IsFollowing(CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x60006AD")]
		[Address(RVA = "0x1099368", Offset = "0x1099368", VA = "0x1099368")]
		public static extern ulong ISteamFriends_EnumerateFollowingList(uint unStartIndex);

		[PreserveSig]
		[Token(Token = "0x60006AE")]
		[Address(RVA = "0x10993E8", Offset = "0x10993E8", VA = "0x10993E8")]
		public static extern bool ISteamGameServer_InitGameServer(uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, AppId_t nGameAppId, InteropHelp.UTF8StringHandle pchVersionString);

		[PreserveSig]
		[Token(Token = "0x60006AF")]
		[Address(RVA = "0x10994F4", Offset = "0x10994F4", VA = "0x10994F4")]
		public static extern void ISteamGameServer_SetProduct(InteropHelp.UTF8StringHandle pszProduct);

		[PreserveSig]
		[Token(Token = "0x60006B0")]
		[Address(RVA = "0x10995B4", Offset = "0x10995B4", VA = "0x10995B4")]
		public static extern void ISteamGameServer_SetGameDescription(InteropHelp.UTF8StringHandle pszGameDescription);

		[PreserveSig]
		[Token(Token = "0x60006B1")]
		[Address(RVA = "0x1099674", Offset = "0x1099674", VA = "0x1099674")]
		public static extern void ISteamGameServer_SetModDir(InteropHelp.UTF8StringHandle pszModDir);

		[PreserveSig]
		[Token(Token = "0x60006B2")]
		[Address(RVA = "0x1099734", Offset = "0x1099734", VA = "0x1099734")]
		public static extern void ISteamGameServer_SetDedicatedServer(bool bDedicated);

		[PreserveSig]
		[Token(Token = "0x60006B3")]
		[Address(RVA = "0x10997B4", Offset = "0x10997B4", VA = "0x10997B4")]
		public static extern void ISteamGameServer_LogOn(InteropHelp.UTF8StringHandle pszToken);

		[PreserveSig]
		[Token(Token = "0x60006B4")]
		[Address(RVA = "0x1099874", Offset = "0x1099874", VA = "0x1099874")]
		public static extern void ISteamGameServer_LogOnAnonymous();

		[PreserveSig]
		[Token(Token = "0x60006B5")]
		[Address(RVA = "0x10998E4", Offset = "0x10998E4", VA = "0x10998E4")]
		public static extern void ISteamGameServer_LogOff();

		[PreserveSig]
		[Token(Token = "0x60006B6")]
		[Address(RVA = "0x1099954", Offset = "0x1099954", VA = "0x1099954")]
		public static extern bool ISteamGameServer_BLoggedOn();

		[PreserveSig]
		[Token(Token = "0x60006B7")]
		[Address(RVA = "0x10999D0", Offset = "0x10999D0", VA = "0x10999D0")]
		public static extern bool ISteamGameServer_BSecure();

		[PreserveSig]
		[Token(Token = "0x60006B8")]
		[Address(RVA = "0x1099A4C", Offset = "0x1099A4C", VA = "0x1099A4C")]
		public static extern ulong ISteamGameServer_GetSteamID();

		[PreserveSig]
		[Token(Token = "0x60006B9")]
		[Address(RVA = "0x1099AC0", Offset = "0x1099AC0", VA = "0x1099AC0")]
		public static extern bool ISteamGameServer_WasRestartRequested();

		[PreserveSig]
		[Token(Token = "0x60006BA")]
		[Address(RVA = "0x1099B3C", Offset = "0x1099B3C", VA = "0x1099B3C")]
		public static extern void ISteamGameServer_SetMaxPlayerCount(int cPlayersMax);

		[PreserveSig]
		[Token(Token = "0x60006BB")]
		[Address(RVA = "0x1099BBC", Offset = "0x1099BBC", VA = "0x1099BBC")]
		public static extern void ISteamGameServer_SetBotPlayerCount(int cBotplayers);

		[PreserveSig]
		[Token(Token = "0x60006BC")]
		[Address(RVA = "0x1099C3C", Offset = "0x1099C3C", VA = "0x1099C3C")]
		public static extern void ISteamGameServer_SetServerName(InteropHelp.UTF8StringHandle pszServerName);

		[PreserveSig]
		[Token(Token = "0x60006BD")]
		[Address(RVA = "0x1099CFC", Offset = "0x1099CFC", VA = "0x1099CFC")]
		public static extern void ISteamGameServer_SetMapName(InteropHelp.UTF8StringHandle pszMapName);

		[PreserveSig]
		[Token(Token = "0x60006BE")]
		[Address(RVA = "0x1099DBC", Offset = "0x1099DBC", VA = "0x1099DBC")]
		public static extern void ISteamGameServer_SetPasswordProtected(bool bPasswordProtected);

		[PreserveSig]
		[Token(Token = "0x60006BF")]
		[Address(RVA = "0x1099E3C", Offset = "0x1099E3C", VA = "0x1099E3C")]
		public static extern void ISteamGameServer_SetSpectatorPort(ushort unSpectatorPort);

		[PreserveSig]
		[Token(Token = "0x60006C0")]
		[Address(RVA = "0x1099EBC", Offset = "0x1099EBC", VA = "0x1099EBC")]
		public static extern void ISteamGameServer_SetSpectatorServerName(InteropHelp.UTF8StringHandle pszSpectatorServerName);

		[PreserveSig]
		[Token(Token = "0x60006C1")]
		[Address(RVA = "0x1099F7C", Offset = "0x1099F7C", VA = "0x1099F7C")]
		public static extern void ISteamGameServer_ClearAllKeyValues();

		[PreserveSig]
		[Token(Token = "0x60006C2")]
		[Address(RVA = "0x1099FEC", Offset = "0x1099FEC", VA = "0x1099FEC")]
		public static extern void ISteamGameServer_SetKeyValue(InteropHelp.UTF8StringHandle pKey, InteropHelp.UTF8StringHandle pValue);

		[PreserveSig]
		[Token(Token = "0x60006C3")]
		[Address(RVA = "0x109A0F8", Offset = "0x109A0F8", VA = "0x109A0F8")]
		public static extern void ISteamGameServer_SetGameTags(InteropHelp.UTF8StringHandle pchGameTags);

		[PreserveSig]
		[Token(Token = "0x60006C4")]
		[Address(RVA = "0x109A1B8", Offset = "0x109A1B8", VA = "0x109A1B8")]
		public static extern void ISteamGameServer_SetGameData(InteropHelp.UTF8StringHandle pchGameData);

		[PreserveSig]
		[Token(Token = "0x60006C5")]
		[Address(RVA = "0x109A278", Offset = "0x109A278", VA = "0x109A278")]
		public static extern void ISteamGameServer_SetRegion(InteropHelp.UTF8StringHandle pszRegion);

		[PreserveSig]
		[Token(Token = "0x60006C6")]
		[Address(RVA = "0x109A338", Offset = "0x109A338", VA = "0x109A338")]
		public static extern bool ISteamGameServer_SendUserConnectAndAuthenticate(uint unIPClient, [In][Out] byte[] pvAuthBlob, uint cubAuthBlobSize, out CSteamID pSteamIDUser);

		[PreserveSig]
		[Token(Token = "0x60006C7")]
		[Address(RVA = "0x109A3F0", Offset = "0x109A3F0", VA = "0x109A3F0")]
		public static extern ulong ISteamGameServer_CreateUnauthenticatedUserConnection();

		[PreserveSig]
		[Token(Token = "0x60006C8")]
		[Address(RVA = "0x109A464", Offset = "0x109A464", VA = "0x109A464")]
		public static extern void ISteamGameServer_SendUserDisconnect(CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x60006C9")]
		[Address(RVA = "0x109A4E4", Offset = "0x109A4E4", VA = "0x109A4E4")]
		public static extern bool ISteamGameServer_BUpdateUserData(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchPlayerName, uint uScore);

		[PreserveSig]
		[Token(Token = "0x60006CA")]
		[Address(RVA = "0x109A5C8", Offset = "0x109A5C8", VA = "0x109A5C8")]
		public static extern uint ISteamGameServer_GetAuthSessionTicket([In][Out] byte[] pTicket, int cbMaxTicket, out uint pcbTicket);

		[PreserveSig]
		[Token(Token = "0x60006CB")]
		[Address(RVA = "0x109A668", Offset = "0x109A668", VA = "0x109A668")]
		public static extern EBeginAuthSessionResult ISteamGameServer_BeginAuthSession([In][Out] byte[] pAuthTicket, int cbAuthTicket, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x60006CC")]
		[Address(RVA = "0x109A708", Offset = "0x109A708", VA = "0x109A708")]
		public static extern void ISteamGameServer_EndAuthSession(CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x60006CD")]
		[Address(RVA = "0x109A788", Offset = "0x109A788", VA = "0x109A788")]
		public static extern void ISteamGameServer_CancelAuthTicket(HAuthTicket hAuthTicket);

		[PreserveSig]
		[Token(Token = "0x60006CE")]
		[Address(RVA = "0x109A808", Offset = "0x109A808", VA = "0x109A808")]
		public static extern EUserHasLicenseForAppResult ISteamGameServer_UserHasLicenseForApp(CSteamID steamID, AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x60006CF")]
		[Address(RVA = "0x109A898", Offset = "0x109A898", VA = "0x109A898")]
		public static extern bool ISteamGameServer_RequestUserGroupStatus(CSteamID steamIDUser, CSteamID steamIDGroup);

		[PreserveSig]
		[Token(Token = "0x60006D0")]
		[Address(RVA = "0x109A930", Offset = "0x109A930", VA = "0x109A930")]
		public static extern void ISteamGameServer_GetGameplayStats();

		[PreserveSig]
		[Token(Token = "0x60006D1")]
		[Address(RVA = "0x109A9A0", Offset = "0x109A9A0", VA = "0x109A9A0")]
		public static extern ulong ISteamGameServer_GetServerReputation();

		[PreserveSig]
		[Token(Token = "0x60006D2")]
		[Address(RVA = "0x109AA14", Offset = "0x109AA14", VA = "0x109AA14")]
		public static extern uint ISteamGameServer_GetPublicIP();

		[PreserveSig]
		[Token(Token = "0x60006D3")]
		[Address(RVA = "0x109AA88", Offset = "0x109AA88", VA = "0x109AA88")]
		public static extern bool ISteamGameServer_HandleIncomingPacket([In][Out] byte[] pData, int cbData, uint srcIP, ushort srcPort);

		[PreserveSig]
		[Token(Token = "0x60006D4")]
		[Address(RVA = "0x109AB40", Offset = "0x109AB40", VA = "0x109AB40")]
		public static extern int ISteamGameServer_GetNextOutgoingPacket([In][Out] byte[] pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort);

		[PreserveSig]
		[Token(Token = "0x60006D5")]
		[Address(RVA = "0x109ABF0", Offset = "0x109ABF0", VA = "0x109ABF0")]
		public static extern void ISteamGameServer_EnableHeartbeats(bool bActive);

		[PreserveSig]
		[Token(Token = "0x60006D6")]
		[Address(RVA = "0x109AC70", Offset = "0x109AC70", VA = "0x109AC70")]
		public static extern void ISteamGameServer_SetHeartbeatInterval(int iHeartbeatInterval);

		[PreserveSig]
		[Token(Token = "0x60006D7")]
		[Address(RVA = "0x109ACF0", Offset = "0x109ACF0", VA = "0x109ACF0")]
		public static extern void ISteamGameServer_ForceHeartbeat();

		[PreserveSig]
		[Token(Token = "0x60006D8")]
		[Address(RVA = "0x109AD60", Offset = "0x109AD60", VA = "0x109AD60")]
		public static extern ulong ISteamGameServer_AssociateWithClan(CSteamID steamIDClan);

		[PreserveSig]
		[Token(Token = "0x60006D9")]
		[Address(RVA = "0x109ADE0", Offset = "0x109ADE0", VA = "0x109ADE0")]
		public static extern ulong ISteamGameServer_ComputeNewPlayerCompatibility(CSteamID steamIDNewPlayer);

		[PreserveSig]
		[Token(Token = "0x60006DA")]
		[Address(RVA = "0x109AE60", Offset = "0x109AE60", VA = "0x109AE60")]
		public static extern ulong ISteamGameServerStats_RequestUserStats(CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x60006DB")]
		[Address(RVA = "0x109AEE0", Offset = "0x109AEE0", VA = "0x109AEE0")]
		public static extern bool ISteamGameServerStats_GetUserStat(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out int pData);

		[PreserveSig]
		[Token(Token = "0x60006DC")]
		[Address(RVA = "0x109AFC4", Offset = "0x109AFC4", VA = "0x109AFC4")]
		public static extern bool ISteamGameServerStats_GetUserStat_(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out float pData);

		[PreserveSig]
		[Token(Token = "0x60006DD")]
		[Address(RVA = "0x109B0A8", Offset = "0x109B0A8", VA = "0x109B0A8")]
		public static extern bool ISteamGameServerStats_GetUserAchievement(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x60006DE")]
		[Address(RVA = "0x109B1A0", Offset = "0x109B1A0", VA = "0x109B1A0")]
		public static extern bool ISteamGameServerStats_SetUserStat(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, int nData);

		[PreserveSig]
		[Token(Token = "0x60006DF")]
		[Address(RVA = "0x109B284", Offset = "0x109B284", VA = "0x109B284")]
		public static extern bool ISteamGameServerStats_SetUserStat_(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, float fData);

		[PreserveSig]
		[Token(Token = "0x60006E0")]
		[Address(RVA = "0x109B370", Offset = "0x109B370", VA = "0x109B370")]
		public static extern bool ISteamGameServerStats_UpdateUserAvgRateStat(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, float flCountThisSession, double dSessionLength);

		[PreserveSig]
		[Token(Token = "0x60006E1")]
		[Address(RVA = "0x109B464", Offset = "0x109B464", VA = "0x109B464")]
		public static extern bool ISteamGameServerStats_SetUserAchievement(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x60006E2")]
		[Address(RVA = "0x109B540", Offset = "0x109B540", VA = "0x109B540")]
		public static extern bool ISteamGameServerStats_ClearUserAchievement(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x60006E3")]
		[Address(RVA = "0x109B61C", Offset = "0x109B61C", VA = "0x109B61C")]
		public static extern ulong ISteamGameServerStats_StoreUserStats(CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x60006E4")]
		[Address(RVA = "0x109B69C", Offset = "0x109B69C", VA = "0x109B69C")]
		public static extern bool ISteamHTMLSurface_Init();

		[PreserveSig]
		[Token(Token = "0x60006E5")]
		[Address(RVA = "0x109B718", Offset = "0x109B718", VA = "0x109B718")]
		public static extern bool ISteamHTMLSurface_Shutdown();

		[PreserveSig]
		[Token(Token = "0x60006E6")]
		[Address(RVA = "0x109B794", Offset = "0x109B794", VA = "0x109B794")]
		public static extern ulong ISteamHTMLSurface_CreateBrowser(InteropHelp.UTF8StringHandle pchUserAgent, InteropHelp.UTF8StringHandle pchUserCSS);

		[PreserveSig]
		[Token(Token = "0x60006E7")]
		[Address(RVA = "0x109B8A8", Offset = "0x109B8A8", VA = "0x109B8A8")]
		public static extern void ISteamHTMLSurface_RemoveBrowser(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x60006E8")]
		[Address(RVA = "0x109B928", Offset = "0x109B928", VA = "0x109B928")]
		public static extern void ISteamHTMLSurface_LoadURL(HHTMLBrowser unBrowserHandle, InteropHelp.UTF8StringHandle pchURL, InteropHelp.UTF8StringHandle pchPostData);

		[PreserveSig]
		[Token(Token = "0x60006E9")]
		[Address(RVA = "0x109BA44", Offset = "0x109BA44", VA = "0x109BA44")]
		public static extern void ISteamHTMLSurface_SetSize(HHTMLBrowser unBrowserHandle, uint unWidth, uint unHeight);

		[PreserveSig]
		[Token(Token = "0x60006EA")]
		[Address(RVA = "0x109BADC", Offset = "0x109BADC", VA = "0x109BADC")]
		public static extern void ISteamHTMLSurface_StopLoad(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x60006EB")]
		[Address(RVA = "0x109BB5C", Offset = "0x109BB5C", VA = "0x109BB5C")]
		public static extern void ISteamHTMLSurface_Reload(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x60006EC")]
		[Address(RVA = "0x109BBDC", Offset = "0x109BBDC", VA = "0x109BBDC")]
		public static extern void ISteamHTMLSurface_GoBack(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x60006ED")]
		[Address(RVA = "0x109BC5C", Offset = "0x109BC5C", VA = "0x109BC5C")]
		public static extern void ISteamHTMLSurface_GoForward(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x60006EE")]
		[Address(RVA = "0x109BCDC", Offset = "0x109BCDC", VA = "0x109BCDC")]
		public static extern void ISteamHTMLSurface_AddHeader(HHTMLBrowser unBrowserHandle, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x60006EF")]
		[Address(RVA = "0x109BDF8", Offset = "0x109BDF8", VA = "0x109BDF8")]
		public static extern void ISteamHTMLSurface_ExecuteJavascript(HHTMLBrowser unBrowserHandle, InteropHelp.UTF8StringHandle pchScript);

		[PreserveSig]
		[Token(Token = "0x60006F0")]
		[Address(RVA = "0x109BEC8", Offset = "0x109BEC8", VA = "0x109BEC8")]
		public static extern void ISteamHTMLSurface_MouseUp(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton);

		[PreserveSig]
		[Token(Token = "0x60006F1")]
		[Address(RVA = "0x109BF58", Offset = "0x109BF58", VA = "0x109BF58")]
		public static extern void ISteamHTMLSurface_MouseDown(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton);

		[PreserveSig]
		[Token(Token = "0x60006F2")]
		[Address(RVA = "0x109BFE8", Offset = "0x109BFE8", VA = "0x109BFE8")]
		public static extern void ISteamHTMLSurface_MouseDoubleClick(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton);

		[PreserveSig]
		[Token(Token = "0x60006F3")]
		[Address(RVA = "0x109C078", Offset = "0x109C078", VA = "0x109C078")]
		public static extern void ISteamHTMLSurface_MouseMove(HHTMLBrowser unBrowserHandle, int x, int y);

		[PreserveSig]
		[Token(Token = "0x60006F4")]
		[Address(RVA = "0x109C110", Offset = "0x109C110", VA = "0x109C110")]
		public static extern void ISteamHTMLSurface_MouseWheel(HHTMLBrowser unBrowserHandle, int nDelta);

		[PreserveSig]
		[Token(Token = "0x60006F5")]
		[Address(RVA = "0x109C1A0", Offset = "0x109C1A0", VA = "0x109C1A0")]
		public static extern void ISteamHTMLSurface_KeyDown(HHTMLBrowser unBrowserHandle, uint nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers);

		[PreserveSig]
		[Token(Token = "0x60006F6")]
		[Address(RVA = "0x109C238", Offset = "0x109C238", VA = "0x109C238")]
		public static extern void ISteamHTMLSurface_KeyUp(HHTMLBrowser unBrowserHandle, uint nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers);

		[PreserveSig]
		[Token(Token = "0x60006F7")]
		[Address(RVA = "0x109C2D0", Offset = "0x109C2D0", VA = "0x109C2D0")]
		public static extern void ISteamHTMLSurface_KeyChar(HHTMLBrowser unBrowserHandle, uint cUnicodeChar, EHTMLKeyModifiers eHTMLKeyModifiers);

		[PreserveSig]
		[Token(Token = "0x60006F8")]
		[Address(RVA = "0x109C368", Offset = "0x109C368", VA = "0x109C368")]
		public static extern void ISteamHTMLSurface_SetHorizontalScroll(HHTMLBrowser unBrowserHandle, uint nAbsolutePixelScroll);

		[PreserveSig]
		[Token(Token = "0x60006F9")]
		[Address(RVA = "0x109C3F8", Offset = "0x109C3F8", VA = "0x109C3F8")]
		public static extern void ISteamHTMLSurface_SetVerticalScroll(HHTMLBrowser unBrowserHandle, uint nAbsolutePixelScroll);

		[PreserveSig]
		[Token(Token = "0x60006FA")]
		[Address(RVA = "0x109C488", Offset = "0x109C488", VA = "0x109C488")]
		public static extern void ISteamHTMLSurface_SetKeyFocus(HHTMLBrowser unBrowserHandle, bool bHasKeyFocus);

		[PreserveSig]
		[Token(Token = "0x60006FB")]
		[Address(RVA = "0x109C518", Offset = "0x109C518", VA = "0x109C518")]
		public static extern void ISteamHTMLSurface_ViewSource(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x60006FC")]
		[Address(RVA = "0x109C598", Offset = "0x109C598", VA = "0x109C598")]
		public static extern void ISteamHTMLSurface_CopyToClipboard(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x60006FD")]
		[Address(RVA = "0x109C618", Offset = "0x109C618", VA = "0x109C618")]
		public static extern void ISteamHTMLSurface_PasteFromClipboard(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x60006FE")]
		[Address(RVA = "0x109C698", Offset = "0x109C698", VA = "0x109C698")]
		public static extern void ISteamHTMLSurface_Find(HHTMLBrowser unBrowserHandle, InteropHelp.UTF8StringHandle pchSearchStr, bool bCurrentlyInFind, bool bReverse);

		[PreserveSig]
		[Token(Token = "0x60006FF")]
		[Address(RVA = "0x109C788", Offset = "0x109C788", VA = "0x109C788")]
		public static extern void ISteamHTMLSurface_StopFind(HHTMLBrowser unBrowserHandle);

		[PreserveSig]
		[Token(Token = "0x6000700")]
		[Address(RVA = "0x109C808", Offset = "0x109C808", VA = "0x109C808")]
		public static extern void ISteamHTMLSurface_GetLinkAtPosition(HHTMLBrowser unBrowserHandle, int x, int y);

		[PreserveSig]
		[Token(Token = "0x6000701")]
		[Address(RVA = "0x109C8A0", Offset = "0x109C8A0", VA = "0x109C8A0")]
		public static extern void ISteamHTMLSurface_SetCookie(InteropHelp.UTF8StringHandle pchHostname, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue, InteropHelp.UTF8StringHandle pchPath, uint nExpires, bool bSecure, bool bHTTPOnly);

		[PreserveSig]
		[Token(Token = "0x6000702")]
		[Address(RVA = "0x109CA70", Offset = "0x109CA70", VA = "0x109CA70")]
		public static extern void ISteamHTMLSurface_SetPageScaleFactor(HHTMLBrowser unBrowserHandle, float flZoom, int nPointX, int nPointY);

		[PreserveSig]
		[Token(Token = "0x6000703")]
		[Address(RVA = "0x109CB18", Offset = "0x109CB18", VA = "0x109CB18")]
		public static extern void ISteamHTMLSurface_SetBackgroundMode(HHTMLBrowser unBrowserHandle, bool bBackgroundMode);

		[PreserveSig]
		[Token(Token = "0x6000704")]
		[Address(RVA = "0x109CBA8", Offset = "0x109CBA8", VA = "0x109CBA8")]
		public static extern void ISteamHTMLSurface_AllowStartRequest(HHTMLBrowser unBrowserHandle, bool bAllowed);

		[PreserveSig]
		[Token(Token = "0x6000705")]
		[Address(RVA = "0x109CC38", Offset = "0x109CC38", VA = "0x109CC38")]
		public static extern void ISteamHTMLSurface_JSDialogResponse(HHTMLBrowser unBrowserHandle, bool bResult);

		[PreserveSig]
		[Token(Token = "0x6000706")]
		[Address(RVA = "0x109CCC8", Offset = "0x109CCC8", VA = "0x109CCC8")]
		public static extern void ISteamHTMLSurface_FileLoadDialogResponse(HHTMLBrowser unBrowserHandle, IntPtr pchSelectedFiles);

		[PreserveSig]
		[Token(Token = "0x6000707")]
		[Address(RVA = "0x109CD58", Offset = "0x109CD58", VA = "0x109CD58")]
		public static extern uint ISteamHTTP_CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, InteropHelp.UTF8StringHandle pchAbsoluteURL);

		[PreserveSig]
		[Token(Token = "0x6000708")]
		[Address(RVA = "0x109CE30", Offset = "0x109CE30", VA = "0x109CE30")]
		public static extern bool ISteamHTTP_SetHTTPRequestContextValue(HTTPRequestHandle hRequest, ulong ulContextValue);

		[PreserveSig]
		[Token(Token = "0x6000709")]
		[Address(RVA = "0x109CEC8", Offset = "0x109CEC8", VA = "0x109CEC8")]
		public static extern bool ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint unTimeoutSeconds);

		[PreserveSig]
		[Token(Token = "0x600070A")]
		[Address(RVA = "0x109CF60", Offset = "0x109CF60", VA = "0x109CF60")]
		public static extern bool ISteamHTTP_SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, InteropHelp.UTF8StringHandle pchHeaderValue);

		[PreserveSig]
		[Token(Token = "0x600070B")]
		[Address(RVA = "0x109D088", Offset = "0x109D088", VA = "0x109D088")]
		public static extern bool ISteamHTTP_SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchParamName, InteropHelp.UTF8StringHandle pchParamValue);

		[PreserveSig]
		[Token(Token = "0x600070C")]
		[Address(RVA = "0x109D1B0", Offset = "0x109D1B0", VA = "0x109D1B0")]
		public static extern bool ISteamHTTP_SendHTTPRequest(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle);

		[PreserveSig]
		[Token(Token = "0x600070D")]
		[Address(RVA = "0x109D248", Offset = "0x109D248", VA = "0x109D248")]
		public static extern bool ISteamHTTP_SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle);

		[PreserveSig]
		[Token(Token = "0x600070E")]
		[Address(RVA = "0x109D2E0", Offset = "0x109D2E0", VA = "0x109D2E0")]
		public static extern bool ISteamHTTP_DeferHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x600070F")]
		[Address(RVA = "0x109D368", Offset = "0x109D368", VA = "0x109D368")]
		public static extern bool ISteamHTTP_PrioritizeHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x6000710")]
		[Address(RVA = "0x109D3F0", Offset = "0x109D3F0", VA = "0x109D3F0")]
		public static extern bool ISteamHTTP_GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, out uint unResponseHeaderSize);

		[PreserveSig]
		[Token(Token = "0x6000711")]
		[Address(RVA = "0x109D4D4", Offset = "0x109D4D4", VA = "0x109D4D4")]
		public static extern bool ISteamHTTP_GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, [In][Out] byte[] pHeaderValueBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000712")]
		[Address(RVA = "0x109D5D0", Offset = "0x109D5D0", VA = "0x109D5D0")]
		public static extern bool ISteamHTTP_GetHTTPResponseBodySize(HTTPRequestHandle hRequest, out uint unBodySize);

		[PreserveSig]
		[Token(Token = "0x6000713")]
		[Address(RVA = "0x109D668", Offset = "0x109D668", VA = "0x109D668")]
		public static extern bool ISteamHTTP_GetHTTPResponseBodyData(HTTPRequestHandle hRequest, [In][Out] byte[] pBodyDataBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000714")]
		[Address(RVA = "0x109D710", Offset = "0x109D710", VA = "0x109D710")]
		public static extern bool ISteamHTTP_GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint cOffset, [In][Out] byte[] pBodyDataBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000715")]
		[Address(RVA = "0x109D7C8", Offset = "0x109D7C8", VA = "0x109D7C8")]
		public static extern bool ISteamHTTP_ReleaseHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x6000716")]
		[Address(RVA = "0x109D850", Offset = "0x109D850", VA = "0x109D850")]
		public static extern bool ISteamHTTP_GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, out float pflPercentOut);

		[PreserveSig]
		[Token(Token = "0x6000717")]
		[Address(RVA = "0x109D8E8", Offset = "0x109D8E8", VA = "0x109D8E8")]
		public static extern bool ISteamHTTP_SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchContentType, [In][Out] byte[] pubBody, uint unBodyLen);

		[PreserveSig]
		[Token(Token = "0x6000718")]
		[Address(RVA = "0x109D9E4", Offset = "0x109D9E4", VA = "0x109D9E4")]
		public static extern uint ISteamHTTP_CreateCookieContainer(bool bAllowResponsesToModify);

		[PreserveSig]
		[Token(Token = "0x6000719")]
		[Address(RVA = "0x109DA64", Offset = "0x109DA64", VA = "0x109DA64")]
		public static extern bool ISteamHTTP_ReleaseCookieContainer(HTTPCookieContainerHandle hCookieContainer);

		[PreserveSig]
		[Token(Token = "0x600071A")]
		[Address(RVA = "0x109DAEC", Offset = "0x109DAEC", VA = "0x109DAEC")]
		public static extern bool ISteamHTTP_SetCookie(HTTPCookieContainerHandle hCookieContainer, InteropHelp.UTF8StringHandle pchHost, InteropHelp.UTF8StringHandle pchUrl, InteropHelp.UTF8StringHandle pchCookie);

		[PreserveSig]
		[Token(Token = "0x600071B")]
		[Address(RVA = "0x109DC60", Offset = "0x109DC60", VA = "0x109DC60")]
		public static extern bool ISteamHTTP_SetHTTPRequestCookieContainer(HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer);

		[PreserveSig]
		[Token(Token = "0x600071C")]
		[Address(RVA = "0x109DCF8", Offset = "0x109DCF8", VA = "0x109DCF8")]
		public static extern bool ISteamHTTP_SetHTTPRequestUserAgentInfo(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchUserAgentInfo);

		[PreserveSig]
		[Token(Token = "0x600071D")]
		[Address(RVA = "0x109DDD4", Offset = "0x109DDD4", VA = "0x109DDD4")]
		public static extern bool ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate);

		[PreserveSig]
		[Token(Token = "0x600071E")]
		[Address(RVA = "0x109DE6C", Offset = "0x109DE6C", VA = "0x109DE6C")]
		public static extern bool ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(HTTPRequestHandle hRequest, uint unMilliseconds);

		[PreserveSig]
		[Token(Token = "0x600071F")]
		[Address(RVA = "0x109DF04", Offset = "0x109DF04", VA = "0x109DF04")]
		public static extern bool ISteamHTTP_GetHTTPRequestWasTimedOut(HTTPRequestHandle hRequest, out bool pbWasTimedOut);

		[PreserveSig]
		[Token(Token = "0x6000720")]
		[Address(RVA = "0x109DFB0", Offset = "0x109DFB0", VA = "0x109DFB0")]
		public static extern EResult ISteamInventory_GetResultStatus(SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x6000721")]
		[Address(RVA = "0x109E030", Offset = "0x109E030", VA = "0x109E030")]
		public static extern bool ISteamInventory_GetResultItems(SteamInventoryResult_t resultHandle, [In][Out] SteamItemDetails_t[] pOutItemsArray, ref uint punOutItemsArraySize);

		[PreserveSig]
		[Token(Token = "0x6000722")]
		[Address(RVA = "0x109E0D8", Offset = "0x109E0D8", VA = "0x109E0D8")]
		public static extern uint ISteamInventory_GetResultTimestamp(SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x6000723")]
		[Address(RVA = "0x109E158", Offset = "0x109E158", VA = "0x109E158")]
		public static extern bool ISteamInventory_CheckResultSteamID(SteamInventoryResult_t resultHandle, CSteamID steamIDExpected);

		[PreserveSig]
		[Token(Token = "0x6000724")]
		[Address(RVA = "0x109E1F0", Offset = "0x109E1F0", VA = "0x109E1F0")]
		public static extern void ISteamInventory_DestroyResult(SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x6000725")]
		[Address(RVA = "0x109E270", Offset = "0x109E270", VA = "0x109E270")]
		public static extern bool ISteamInventory_GetAllItems(out SteamInventoryResult_t pResultHandle);

		[PreserveSig]
		[Token(Token = "0x6000726")]
		[Address(RVA = "0x109E2F8", Offset = "0x109E2F8", VA = "0x109E2F8")]
		public static extern bool ISteamInventory_GetItemsByID(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemInstanceID_t[] pInstanceIDs, uint unCountInstanceIDs);

		[PreserveSig]
		[Token(Token = "0x6000727")]
		[Address(RVA = "0x109E3A0", Offset = "0x109E3A0", VA = "0x109E3A0")]
		public static extern bool ISteamInventory_SerializeResult(SteamInventoryResult_t resultHandle, [In][Out] byte[] pOutBuffer, out uint punOutBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000728")]
		[Address(RVA = "0x109E448", Offset = "0x109E448", VA = "0x109E448")]
		public static extern bool ISteamInventory_DeserializeResult(out SteamInventoryResult_t pOutResultHandle, [In][Out] byte[] pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE);

		[PreserveSig]
		[Token(Token = "0x6000729")]
		[Address(RVA = "0x109E500", Offset = "0x109E500", VA = "0x109E500")]
		public static extern bool ISteamInventory_GenerateItems(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayItemDefs, [In][Out] uint[] punArrayQuantity, uint unArrayLength);

		[PreserveSig]
		[Token(Token = "0x600072A")]
		[Address(RVA = "0x109E5C0", Offset = "0x109E5C0", VA = "0x109E5C0")]
		public static extern bool ISteamInventory_GrantPromoItems(out SteamInventoryResult_t pResultHandle);

		[PreserveSig]
		[Token(Token = "0x600072B")]
		[Address(RVA = "0x109E648", Offset = "0x109E648", VA = "0x109E648")]
		public static extern bool ISteamInventory_AddPromoItem(out SteamInventoryResult_t pResultHandle, SteamItemDef_t itemDef);

		[PreserveSig]
		[Token(Token = "0x600072C")]
		[Address(RVA = "0x109E6E0", Offset = "0x109E6E0", VA = "0x109E6E0")]
		public static extern bool ISteamInventory_AddPromoItems(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayItemDefs, uint unArrayLength);

		[PreserveSig]
		[Token(Token = "0x600072D")]
		[Address(RVA = "0x109E788", Offset = "0x109E788", VA = "0x109E788")]
		public static extern bool ISteamInventory_ConsumeItem(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemConsume, uint unQuantity);

		[PreserveSig]
		[Token(Token = "0x600072E")]
		[Address(RVA = "0x109E828", Offset = "0x109E828", VA = "0x109E828")]
		public static extern bool ISteamInventory_ExchangeItems(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayGenerate, [In][Out] uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, [In][Out] SteamItemInstanceID_t[] pArrayDestroy, [In][Out] uint[] punArrayDestroyQuantity, uint unArrayDestroyLength);

		[PreserveSig]
		[Token(Token = "0x600072F")]
		[Address(RVA = "0x109E918", Offset = "0x109E918", VA = "0x109E918")]
		public static extern bool ISteamInventory_TransferItemQuantity(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemIdSource, uint unQuantity, SteamItemInstanceID_t itemIdDest);

		[PreserveSig]
		[Token(Token = "0x6000730")]
		[Address(RVA = "0x109E9C8", Offset = "0x109E9C8", VA = "0x109E9C8")]
		public static extern void ISteamInventory_SendItemDropHeartbeat();

		[PreserveSig]
		[Token(Token = "0x6000731")]
		[Address(RVA = "0x109EA38", Offset = "0x109EA38", VA = "0x109EA38")]
		public static extern bool ISteamInventory_TriggerItemDrop(out SteamInventoryResult_t pResultHandle, SteamItemDef_t dropListDefinition);

		[PreserveSig]
		[Token(Token = "0x6000732")]
		[Address(RVA = "0x109EAD0", Offset = "0x109EAD0", VA = "0x109EAD0")]
		public static extern bool ISteamInventory_TradeItems(out SteamInventoryResult_t pResultHandle, CSteamID steamIDTradePartner, [In][Out] SteamItemInstanceID_t[] pArrayGive, [In][Out] uint[] pArrayGiveQuantity, uint nArrayGiveLength, [In][Out] SteamItemInstanceID_t[] pArrayGet, [In][Out] uint[] pArrayGetQuantity, uint nArrayGetLength);

		[PreserveSig]
		[Token(Token = "0x6000733")]
		[Address(RVA = "0x109EBD0", Offset = "0x109EBD0", VA = "0x109EBD0")]
		public static extern bool ISteamInventory_LoadItemDefinitions();

		[PreserveSig]
		[Token(Token = "0x6000734")]
		[Address(RVA = "0x109EC4C", Offset = "0x109EC4C", VA = "0x109EC4C")]
		public static extern bool ISteamInventory_GetItemDefinitionIDs([In][Out] SteamItemDef_t[] pItemDefIDs, out uint punItemDefIDsArraySize);

		[PreserveSig]
		[Token(Token = "0x6000735")]
		[Address(RVA = "0x109ECEC", Offset = "0x109ECEC", VA = "0x109ECEC")]
		public static extern bool ISteamInventory_GetItemDefinitionProperty(SteamItemDef_t iDefinition, InteropHelp.UTF8StringHandle pchPropertyName, IntPtr pchValueBuffer, ref uint punValueBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000736")]
		[Address(RVA = "0x109EDE0", Offset = "0x109EDE0", VA = "0x109EDE0")]
		public static extern int ISteamMatchmaking_GetFavoriteGameCount();

		[PreserveSig]
		[Token(Token = "0x6000737")]
		[Address(RVA = "0x109EE54", Offset = "0x109EE54", VA = "0x109EE54")]
		public static extern bool ISteamMatchmaking_GetFavoriteGame(int iGame, out AppId_t pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer);

		[PreserveSig]
		[Token(Token = "0x6000738")]
		[Address(RVA = "0x109EF24", Offset = "0x109EF24", VA = "0x109EF24")]
		public static extern int ISteamMatchmaking_AddFavoriteGame(AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer);

		[PreserveSig]
		[Token(Token = "0x6000739")]
		[Address(RVA = "0x109EFE4", Offset = "0x109EFE4", VA = "0x109EFE4")]
		public static extern bool ISteamMatchmaking_RemoveFavoriteGame(AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags);

		[PreserveSig]
		[Token(Token = "0x600073A")]
		[Address(RVA = "0x109F09C", Offset = "0x109F09C", VA = "0x109F09C")]
		public static extern ulong ISteamMatchmaking_RequestLobbyList();

		[PreserveSig]
		[Token(Token = "0x600073B")]
		[Address(RVA = "0x109F110", Offset = "0x109F110", VA = "0x109F110")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListStringFilter(InteropHelp.UTF8StringHandle pchKeyToMatch, InteropHelp.UTF8StringHandle pchValueToMatch, ELobbyComparison eComparisonType);

		[PreserveSig]
		[Token(Token = "0x600073C")]
		[Address(RVA = "0x109F22C", Offset = "0x109F22C", VA = "0x109F22C")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListNumericalFilter(InteropHelp.UTF8StringHandle pchKeyToMatch, int nValueToMatch, ELobbyComparison eComparisonType);

		[PreserveSig]
		[Token(Token = "0x600073D")]
		[Address(RVA = "0x109F304", Offset = "0x109F304", VA = "0x109F304")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListNearValueFilter(InteropHelp.UTF8StringHandle pchKeyToMatch, int nValueToBeCloseTo);

		[PreserveSig]
		[Token(Token = "0x600073E")]
		[Address(RVA = "0x109F3D4", Offset = "0x109F3D4", VA = "0x109F3D4")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable);

		[PreserveSig]
		[Token(Token = "0x600073F")]
		[Address(RVA = "0x109F454", Offset = "0x109F454", VA = "0x109F454")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListDistanceFilter(ELobbyDistanceFilter eLobbyDistanceFilter);

		[PreserveSig]
		[Token(Token = "0x6000740")]
		[Address(RVA = "0x109F4D4", Offset = "0x109F4D4", VA = "0x109F4D4")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListResultCountFilter(int cMaxResults);

		[PreserveSig]
		[Token(Token = "0x6000741")]
		[Address(RVA = "0x109F554", Offset = "0x109F554", VA = "0x109F554")]
		public static extern void ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x6000742")]
		[Address(RVA = "0x109F5D4", Offset = "0x109F5D4", VA = "0x109F5D4")]
		public static extern ulong ISteamMatchmaking_GetLobbyByIndex(int iLobby);

		[PreserveSig]
		[Token(Token = "0x6000743")]
		[Address(RVA = "0x109F654", Offset = "0x109F654", VA = "0x109F654")]
		public static extern ulong ISteamMatchmaking_CreateLobby(ELobbyType eLobbyType, int cMaxMembers);

		[PreserveSig]
		[Token(Token = "0x6000744")]
		[Address(RVA = "0x109F6E4", Offset = "0x109F6E4", VA = "0x109F6E4")]
		public static extern ulong ISteamMatchmaking_JoinLobby(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x6000745")]
		[Address(RVA = "0x109F764", Offset = "0x109F764", VA = "0x109F764")]
		public static extern void ISteamMatchmaking_LeaveLobby(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x6000746")]
		[Address(RVA = "0x109F7E4", Offset = "0x109F7E4", VA = "0x109F7E4")]
		public static extern bool ISteamMatchmaking_InviteUserToLobby(CSteamID steamIDLobby, CSteamID steamIDInvitee);

		[PreserveSig]
		[Token(Token = "0x6000747")]
		[Address(RVA = "0x109F87C", Offset = "0x109F87C", VA = "0x109F87C")]
		public static extern int ISteamMatchmaking_GetNumLobbyMembers(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x6000748")]
		[Address(RVA = "0x109F8FC", Offset = "0x109F8FC", VA = "0x109F8FC")]
		public static extern ulong ISteamMatchmaking_GetLobbyMemberByIndex(CSteamID steamIDLobby, int iMember);

		[PreserveSig]
		[Token(Token = "0x6000749")]
		[Address(RVA = "0x109F98C", Offset = "0x109F98C", VA = "0x109F98C")]
		public static extern IntPtr ISteamMatchmaking_GetLobbyData(CSteamID steamIDLobby, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x600074A")]
		[Address(RVA = "0x109FA64", Offset = "0x109FA64", VA = "0x109FA64")]
		public static extern bool ISteamMatchmaking_SetLobbyData(CSteamID steamIDLobby, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x600074B")]
		[Address(RVA = "0x109FB8C", Offset = "0x109FB8C", VA = "0x109FB8C")]
		public static extern int ISteamMatchmaking_GetLobbyDataCount(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x600074C")]
		[Address(RVA = "0x109FC0C", Offset = "0x109FC0C", VA = "0x109FC0C")]
		public static extern bool ISteamMatchmaking_GetLobbyDataByIndex(CSteamID steamIDLobby, int iLobbyData, IntPtr pchKey, int cchKeyBufferSize, IntPtr pchValue, int cchValueBufferSize);

		[PreserveSig]
		[Token(Token = "0x600074D")]
		[Address(RVA = "0x109FCD4", Offset = "0x109FCD4", VA = "0x109FCD4")]
		public static extern bool ISteamMatchmaking_DeleteLobbyData(CSteamID steamIDLobby, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x600074E")]
		[Address(RVA = "0x109FDB0", Offset = "0x109FDB0", VA = "0x109FDB0")]
		public static extern IntPtr ISteamMatchmaking_GetLobbyMemberData(CSteamID steamIDLobby, CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x600074F")]
		[Address(RVA = "0x109FE90", Offset = "0x109FE90", VA = "0x109FE90")]
		public static extern void ISteamMatchmaking_SetLobbyMemberData(CSteamID steamIDLobby, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x6000750")]
		[Address(RVA = "0x109FFAC", Offset = "0x109FFAC", VA = "0x109FFAC")]
		public static extern bool ISteamMatchmaking_SendLobbyChatMsg(CSteamID steamIDLobby, [In][Out] byte[] pvMsgBody, int cubMsgBody);

		[PreserveSig]
		[Token(Token = "0x6000751")]
		[Address(RVA = "0x10A0054", Offset = "0x10A0054", VA = "0x10A0054")]
		public static extern int ISteamMatchmaking_GetLobbyChatEntry(CSteamID steamIDLobby, int iChatID, out CSteamID pSteamIDUser, [In][Out] byte[] pvData, int cubData, out EChatEntryType peChatEntryType);

		[PreserveSig]
		[Token(Token = "0x6000752")]
		[Address(RVA = "0x10A011C", Offset = "0x10A011C", VA = "0x10A011C")]
		public static extern bool ISteamMatchmaking_RequestLobbyData(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x6000753")]
		[Address(RVA = "0x10A01A4", Offset = "0x10A01A4", VA = "0x10A01A4")]
		public static extern void ISteamMatchmaking_SetLobbyGameServer(CSteamID steamIDLobby, uint unGameServerIP, ushort unGameServerPort, CSteamID steamIDGameServer);

		[PreserveSig]
		[Token(Token = "0x6000754")]
		[Address(RVA = "0x10A024C", Offset = "0x10A024C", VA = "0x10A024C")]
		public static extern bool ISteamMatchmaking_GetLobbyGameServer(CSteamID steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out CSteamID psteamIDGameServer);

		[PreserveSig]
		[Token(Token = "0x6000755")]
		[Address(RVA = "0x10A02FC", Offset = "0x10A02FC", VA = "0x10A02FC")]
		public static extern bool ISteamMatchmaking_SetLobbyMemberLimit(CSteamID steamIDLobby, int cMaxMembers);

		[PreserveSig]
		[Token(Token = "0x6000756")]
		[Address(RVA = "0x10A0394", Offset = "0x10A0394", VA = "0x10A0394")]
		public static extern int ISteamMatchmaking_GetLobbyMemberLimit(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x6000757")]
		[Address(RVA = "0x10A0414", Offset = "0x10A0414", VA = "0x10A0414")]
		public static extern bool ISteamMatchmaking_SetLobbyType(CSteamID steamIDLobby, ELobbyType eLobbyType);

		[PreserveSig]
		[Token(Token = "0x6000758")]
		[Address(RVA = "0x10A04AC", Offset = "0x10A04AC", VA = "0x10A04AC")]
		public static extern bool ISteamMatchmaking_SetLobbyJoinable(CSteamID steamIDLobby, bool bLobbyJoinable);

		[PreserveSig]
		[Token(Token = "0x6000759")]
		[Address(RVA = "0x10A0544", Offset = "0x10A0544", VA = "0x10A0544")]
		public static extern ulong ISteamMatchmaking_GetLobbyOwner(CSteamID steamIDLobby);

		[PreserveSig]
		[Token(Token = "0x600075A")]
		[Address(RVA = "0x10A05C4", Offset = "0x10A05C4", VA = "0x10A05C4")]
		public static extern bool ISteamMatchmaking_SetLobbyOwner(CSteamID steamIDLobby, CSteamID steamIDNewOwner);

		[PreserveSig]
		[Token(Token = "0x600075B")]
		[Address(RVA = "0x10A065C", Offset = "0x10A065C", VA = "0x10A065C")]
		public static extern bool ISteamMatchmaking_SetLinkedLobby(CSteamID steamIDLobby, CSteamID steamIDLobbyDependent);

		[PreserveSig]
		[Token(Token = "0x600075C")]
		[Address(RVA = "0x10A06F4", Offset = "0x10A06F4", VA = "0x10A06F4")]
		public static extern IntPtr ISteamMatchmakingServers_RequestInternetServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x600075D")]
		[Address(RVA = "0x10A079C", Offset = "0x10A079C", VA = "0x10A079C")]
		public static extern IntPtr ISteamMatchmakingServers_RequestLANServerList(AppId_t iApp, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x600075E")]
		[Address(RVA = "0x10A082C", Offset = "0x10A082C", VA = "0x10A082C")]
		public static extern IntPtr ISteamMatchmakingServers_RequestFriendsServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x600075F")]
		[Address(RVA = "0x10A08D4", Offset = "0x10A08D4", VA = "0x10A08D4")]
		public static extern IntPtr ISteamMatchmakingServers_RequestFavoritesServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x6000760")]
		[Address(RVA = "0x10A097C", Offset = "0x10A097C", VA = "0x10A097C")]
		public static extern IntPtr ISteamMatchmakingServers_RequestHistoryServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x6000761")]
		[Address(RVA = "0x10A0A24", Offset = "0x10A0A24", VA = "0x10A0A24")]
		public static extern IntPtr ISteamMatchmakingServers_RequestSpectatorServerList(AppId_t iApp, IntPtr ppchFilters, uint nFilters, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x6000762")]
		[Address(RVA = "0x10A0ACC", Offset = "0x10A0ACC", VA = "0x10A0ACC")]
		public static extern void ISteamMatchmakingServers_ReleaseRequest(HServerListRequest hServerListRequest);

		[PreserveSig]
		[Token(Token = "0x6000763")]
		[Address(RVA = "0x10A0B4C", Offset = "0x10A0B4C", VA = "0x10A0B4C")]
		public static extern IntPtr ISteamMatchmakingServers_GetServerDetails(HServerListRequest hRequest, int iServer);

		[PreserveSig]
		[Token(Token = "0x6000764")]
		[Address(RVA = "0x10A0BDC", Offset = "0x10A0BDC", VA = "0x10A0BDC")]
		public static extern void ISteamMatchmakingServers_CancelQuery(HServerListRequest hRequest);

		[PreserveSig]
		[Token(Token = "0x6000765")]
		[Address(RVA = "0x10A0C5C", Offset = "0x10A0C5C", VA = "0x10A0C5C")]
		public static extern void ISteamMatchmakingServers_RefreshQuery(HServerListRequest hRequest);

		[PreserveSig]
		[Token(Token = "0x6000766")]
		[Address(RVA = "0x10A0CDC", Offset = "0x10A0CDC", VA = "0x10A0CDC")]
		public static extern bool ISteamMatchmakingServers_IsRefreshing(HServerListRequest hRequest);

		[PreserveSig]
		[Token(Token = "0x6000767")]
		[Address(RVA = "0x10A0D64", Offset = "0x10A0D64", VA = "0x10A0D64")]
		public static extern int ISteamMatchmakingServers_GetServerCount(HServerListRequest hRequest);

		[PreserveSig]
		[Token(Token = "0x6000768")]
		[Address(RVA = "0x10A0DE4", Offset = "0x10A0DE4", VA = "0x10A0DE4")]
		public static extern void ISteamMatchmakingServers_RefreshServer(HServerListRequest hRequest, int iServer);

		[PreserveSig]
		[Token(Token = "0x6000769")]
		[Address(RVA = "0x10A0E74", Offset = "0x10A0E74", VA = "0x10A0E74")]
		public static extern int ISteamMatchmakingServers_PingServer(uint unIP, ushort usPort, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x600076A")]
		[Address(RVA = "0x10A0F0C", Offset = "0x10A0F0C", VA = "0x10A0F0C")]
		public static extern int ISteamMatchmakingServers_PlayerDetails(uint unIP, ushort usPort, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x600076B")]
		[Address(RVA = "0x10A0FA4", Offset = "0x10A0FA4", VA = "0x10A0FA4")]
		public static extern int ISteamMatchmakingServers_ServerRules(uint unIP, ushort usPort, IntPtr pRequestServersResponse);

		[PreserveSig]
		[Token(Token = "0x600076C")]
		[Address(RVA = "0x10A103C", Offset = "0x10A103C", VA = "0x10A103C")]
		public static extern void ISteamMatchmakingServers_CancelServerQuery(HServerQuery hServerQuery);

		[PreserveSig]
		[Token(Token = "0x600076D")]
		[Address(RVA = "0x10A10BC", Offset = "0x10A10BC", VA = "0x10A10BC")]
		public static extern bool ISteamMusic_BIsEnabled();

		[PreserveSig]
		[Token(Token = "0x600076E")]
		[Address(RVA = "0x10A1138", Offset = "0x10A1138", VA = "0x10A1138")]
		public static extern bool ISteamMusic_BIsPlaying();

		[PreserveSig]
		[Token(Token = "0x600076F")]
		[Address(RVA = "0x10A11B4", Offset = "0x10A11B4", VA = "0x10A11B4")]
		public static extern AudioPlayback_Status ISteamMusic_GetPlaybackStatus();

		[PreserveSig]
		[Token(Token = "0x6000770")]
		[Address(RVA = "0x10A1228", Offset = "0x10A1228", VA = "0x10A1228")]
		public static extern void ISteamMusic_Play();

		[PreserveSig]
		[Token(Token = "0x6000771")]
		[Address(RVA = "0x10A1298", Offset = "0x10A1298", VA = "0x10A1298")]
		public static extern void ISteamMusic_Pause();

		[PreserveSig]
		[Token(Token = "0x6000772")]
		[Address(RVA = "0x10A1308", Offset = "0x10A1308", VA = "0x10A1308")]
		public static extern void ISteamMusic_PlayPrevious();

		[PreserveSig]
		[Token(Token = "0x6000773")]
		[Address(RVA = "0x10A1378", Offset = "0x10A1378", VA = "0x10A1378")]
		public static extern void ISteamMusic_PlayNext();

		[PreserveSig]
		[Token(Token = "0x6000774")]
		[Address(RVA = "0x10A13E8", Offset = "0x10A13E8", VA = "0x10A13E8")]
		public static extern void ISteamMusic_SetVolume(float flVolume);

		[PreserveSig]
		[Token(Token = "0x6000775")]
		[Address(RVA = "0x10A146C", Offset = "0x10A146C", VA = "0x10A146C")]
		public static extern float ISteamMusic_GetVolume();

		[PreserveSig]
		[Token(Token = "0x6000776")]
		[Address(RVA = "0x10A14DC", Offset = "0x10A14DC", VA = "0x10A14DC")]
		public static extern bool ISteamMusicRemote_RegisterSteamMusicRemote(InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x6000777")]
		[Address(RVA = "0x10A15A8", Offset = "0x10A15A8", VA = "0x10A15A8")]
		public static extern bool ISteamMusicRemote_DeregisterSteamMusicRemote();

		[PreserveSig]
		[Token(Token = "0x6000778")]
		[Address(RVA = "0x10A1624", Offset = "0x10A1624", VA = "0x10A1624")]
		public static extern bool ISteamMusicRemote_BIsCurrentMusicRemote();

		[PreserveSig]
		[Token(Token = "0x6000779")]
		[Address(RVA = "0x10A16A0", Offset = "0x10A16A0", VA = "0x10A16A0")]
		public static extern bool ISteamMusicRemote_BActivationSuccess(bool bValue);

		[PreserveSig]
		[Token(Token = "0x600077A")]
		[Address(RVA = "0x10A1728", Offset = "0x10A1728", VA = "0x10A1728")]
		public static extern bool ISteamMusicRemote_SetDisplayName(InteropHelp.UTF8StringHandle pchDisplayName);

		[PreserveSig]
		[Token(Token = "0x600077B")]
		[Address(RVA = "0x10A17F4", Offset = "0x10A17F4", VA = "0x10A17F4")]
		public static extern bool ISteamMusicRemote_SetPNGIcon_64x64([In][Out] byte[] pvBuffer, uint cbBufferLength);

		[PreserveSig]
		[Token(Token = "0x600077C")]
		[Address(RVA = "0x10A1894", Offset = "0x10A1894", VA = "0x10A1894")]
		public static extern bool ISteamMusicRemote_EnablePlayPrevious(bool bValue);

		[PreserveSig]
		[Token(Token = "0x600077D")]
		[Address(RVA = "0x10A191C", Offset = "0x10A191C", VA = "0x10A191C")]
		public static extern bool ISteamMusicRemote_EnablePlayNext(bool bValue);

		[PreserveSig]
		[Token(Token = "0x600077E")]
		[Address(RVA = "0x10A19A4", Offset = "0x10A19A4", VA = "0x10A19A4")]
		public static extern bool ISteamMusicRemote_EnableShuffled(bool bValue);

		[PreserveSig]
		[Token(Token = "0x600077F")]
		[Address(RVA = "0x10A1A2C", Offset = "0x10A1A2C", VA = "0x10A1A2C")]
		public static extern bool ISteamMusicRemote_EnableLooped(bool bValue);

		[PreserveSig]
		[Token(Token = "0x6000780")]
		[Address(RVA = "0x10A1AB4", Offset = "0x10A1AB4", VA = "0x10A1AB4")]
		public static extern bool ISteamMusicRemote_EnableQueue(bool bValue);

		[PreserveSig]
		[Token(Token = "0x6000781")]
		[Address(RVA = "0x10A1B3C", Offset = "0x10A1B3C", VA = "0x10A1B3C")]
		public static extern bool ISteamMusicRemote_EnablePlaylists(bool bValue);

		[PreserveSig]
		[Token(Token = "0x6000782")]
		[Address(RVA = "0x10A1BC4", Offset = "0x10A1BC4", VA = "0x10A1BC4")]
		public static extern bool ISteamMusicRemote_UpdatePlaybackStatus(AudioPlayback_Status nStatus);

		[PreserveSig]
		[Token(Token = "0x6000783")]
		[Address(RVA = "0x10A1C4C", Offset = "0x10A1C4C", VA = "0x10A1C4C")]
		public static extern bool ISteamMusicRemote_UpdateShuffled(bool bValue);

		[PreserveSig]
		[Token(Token = "0x6000784")]
		[Address(RVA = "0x10A1CD4", Offset = "0x10A1CD4", VA = "0x10A1CD4")]
		public static extern bool ISteamMusicRemote_UpdateLooped(bool bValue);

		[PreserveSig]
		[Token(Token = "0x6000785")]
		[Address(RVA = "0x10A1D5C", Offset = "0x10A1D5C", VA = "0x10A1D5C")]
		public static extern bool ISteamMusicRemote_UpdateVolume(float flValue);

		[PreserveSig]
		[Token(Token = "0x6000786")]
		[Address(RVA = "0x10A1DEC", Offset = "0x10A1DEC", VA = "0x10A1DEC")]
		public static extern bool ISteamMusicRemote_CurrentEntryWillChange();

		[PreserveSig]
		[Token(Token = "0x6000787")]
		[Address(RVA = "0x10A1E68", Offset = "0x10A1E68", VA = "0x10A1E68")]
		public static extern bool ISteamMusicRemote_CurrentEntryIsAvailable(bool bAvailable);

		[PreserveSig]
		[Token(Token = "0x6000788")]
		[Address(RVA = "0x10A1EF0", Offset = "0x10A1EF0", VA = "0x10A1EF0")]
		public static extern bool ISteamMusicRemote_UpdateCurrentEntryText(InteropHelp.UTF8StringHandle pchText);

		[PreserveSig]
		[Token(Token = "0x6000789")]
		[Address(RVA = "0x10A1FBC", Offset = "0x10A1FBC", VA = "0x10A1FBC")]
		public static extern bool ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(int nValue);

		[PreserveSig]
		[Token(Token = "0x600078A")]
		[Address(RVA = "0x10A2044", Offset = "0x10A2044", VA = "0x10A2044")]
		public static extern bool ISteamMusicRemote_UpdateCurrentEntryCoverArt([In][Out] byte[] pvBuffer, uint cbBufferLength);

		[PreserveSig]
		[Token(Token = "0x600078B")]
		[Address(RVA = "0x10A20E4", Offset = "0x10A20E4", VA = "0x10A20E4")]
		public static extern bool ISteamMusicRemote_CurrentEntryDidChange();

		[PreserveSig]
		[Token(Token = "0x600078C")]
		[Address(RVA = "0x10A2160", Offset = "0x10A2160", VA = "0x10A2160")]
		public static extern bool ISteamMusicRemote_QueueWillChange();

		[PreserveSig]
		[Token(Token = "0x600078D")]
		[Address(RVA = "0x10A21DC", Offset = "0x10A21DC", VA = "0x10A21DC")]
		public static extern bool ISteamMusicRemote_ResetQueueEntries();

		[PreserveSig]
		[Token(Token = "0x600078E")]
		[Address(RVA = "0x10A2258", Offset = "0x10A2258", VA = "0x10A2258")]
		public static extern bool ISteamMusicRemote_SetQueueEntry(int nID, int nPosition, InteropHelp.UTF8StringHandle pchEntryText);

		[PreserveSig]
		[Token(Token = "0x600078F")]
		[Address(RVA = "0x10A233C", Offset = "0x10A233C", VA = "0x10A233C")]
		public static extern bool ISteamMusicRemote_SetCurrentQueueEntry(int nID);

		[PreserveSig]
		[Token(Token = "0x6000790")]
		[Address(RVA = "0x10A23C4", Offset = "0x10A23C4", VA = "0x10A23C4")]
		public static extern bool ISteamMusicRemote_QueueDidChange();

		[PreserveSig]
		[Token(Token = "0x6000791")]
		[Address(RVA = "0x10A2440", Offset = "0x10A2440", VA = "0x10A2440")]
		public static extern bool ISteamMusicRemote_PlaylistWillChange();

		[PreserveSig]
		[Token(Token = "0x6000792")]
		[Address(RVA = "0x10A24BC", Offset = "0x10A24BC", VA = "0x10A24BC")]
		public static extern bool ISteamMusicRemote_ResetPlaylistEntries();

		[PreserveSig]
		[Token(Token = "0x6000793")]
		[Address(RVA = "0x10A2538", Offset = "0x10A2538", VA = "0x10A2538")]
		public static extern bool ISteamMusicRemote_SetPlaylistEntry(int nID, int nPosition, InteropHelp.UTF8StringHandle pchEntryText);

		[PreserveSig]
		[Token(Token = "0x6000794")]
		[Address(RVA = "0x10A261C", Offset = "0x10A261C", VA = "0x10A261C")]
		public static extern bool ISteamMusicRemote_SetCurrentPlaylistEntry(int nID);

		[PreserveSig]
		[Token(Token = "0x6000795")]
		[Address(RVA = "0x10A26A4", Offset = "0x10A26A4", VA = "0x10A26A4")]
		public static extern bool ISteamMusicRemote_PlaylistDidChange();

		[PreserveSig]
		[Token(Token = "0x6000796")]
		[Address(RVA = "0x10A2720", Offset = "0x10A2720", VA = "0x10A2720")]
		public static extern bool ISteamNetworking_SendP2PPacket(CSteamID steamIDRemote, [In][Out] byte[] pubData, uint cubData, EP2PSend eP2PSendType, int nChannel);

		[PreserveSig]
		[Token(Token = "0x6000797")]
		[Address(RVA = "0x10A27E0", Offset = "0x10A27E0", VA = "0x10A27E0")]
		public static extern bool ISteamNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel);

		[PreserveSig]
		[Token(Token = "0x6000798")]
		[Address(RVA = "0x10A2878", Offset = "0x10A2878", VA = "0x10A2878")]
		public static extern bool ISteamNetworking_ReadP2PPacket([In][Out] byte[] pubDest, uint cubDest, out uint pcubMsgSize, out CSteamID psteamIDRemote, int nChannel);

		[PreserveSig]
		[Token(Token = "0x6000799")]
		[Address(RVA = "0x10A2938", Offset = "0x10A2938", VA = "0x10A2938")]
		public static extern bool ISteamNetworking_AcceptP2PSessionWithUser(CSteamID steamIDRemote);

		[PreserveSig]
		[Token(Token = "0x600079A")]
		[Address(RVA = "0x10A29C0", Offset = "0x10A29C0", VA = "0x10A29C0")]
		public static extern bool ISteamNetworking_CloseP2PSessionWithUser(CSteamID steamIDRemote);

		[PreserveSig]
		[Token(Token = "0x600079B")]
		[Address(RVA = "0x10A2A48", Offset = "0x10A2A48", VA = "0x10A2A48")]
		public static extern bool ISteamNetworking_CloseP2PChannelWithUser(CSteamID steamIDRemote, int nChannel);

		[PreserveSig]
		[Token(Token = "0x600079C")]
		[Address(RVA = "0x10A2AE0", Offset = "0x10A2AE0", VA = "0x10A2AE0")]
		public static extern bool ISteamNetworking_GetP2PSessionState(CSteamID steamIDRemote, out P2PSessionState_t pConnectionState);

		[PreserveSig]
		[Token(Token = "0x600079D")]
		[Address(RVA = "0x10A2B78", Offset = "0x10A2B78", VA = "0x10A2B78")]
		public static extern bool ISteamNetworking_AllowP2PPacketRelay(bool bAllow);

		[PreserveSig]
		[Token(Token = "0x600079E")]
		[Address(RVA = "0x10A2C00", Offset = "0x10A2C00", VA = "0x10A2C00")]
		public static extern uint ISteamNetworking_CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay);

		[PreserveSig]
		[Token(Token = "0x600079F")]
		[Address(RVA = "0x10A2CA8", Offset = "0x10A2CA8", VA = "0x10A2CA8")]
		public static extern uint ISteamNetworking_CreateP2PConnectionSocket(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay);

		[PreserveSig]
		[Token(Token = "0x60007A0")]
		[Address(RVA = "0x10A2D50", Offset = "0x10A2D50", VA = "0x10A2D50")]
		public static extern uint ISteamNetworking_CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec);

		[PreserveSig]
		[Token(Token = "0x60007A1")]
		[Address(RVA = "0x10A2DE8", Offset = "0x10A2DE8", VA = "0x10A2DE8")]
		public static extern bool ISteamNetworking_DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd);

		[PreserveSig]
		[Token(Token = "0x60007A2")]
		[Address(RVA = "0x10A2E80", Offset = "0x10A2E80", VA = "0x10A2E80")]
		public static extern bool ISteamNetworking_DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd);

		[PreserveSig]
		[Token(Token = "0x60007A3")]
		[Address(RVA = "0x10A2F18", Offset = "0x10A2F18", VA = "0x10A2F18")]
		public static extern bool ISteamNetworking_SendDataOnSocket(SNetSocket_t hSocket, IntPtr pubData, uint cubData, bool bReliable);

		[PreserveSig]
		[Token(Token = "0x60007A4")]
		[Address(RVA = "0x10A2FC8", Offset = "0x10A2FC8", VA = "0x10A2FC8")]
		public static extern bool ISteamNetworking_IsDataAvailableOnSocket(SNetSocket_t hSocket, out uint pcubMsgSize);

		[PreserveSig]
		[Token(Token = "0x60007A5")]
		[Address(RVA = "0x10A3060", Offset = "0x10A3060", VA = "0x10A3060")]
		public static extern bool ISteamNetworking_RetrieveDataFromSocket(SNetSocket_t hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize);

		[PreserveSig]
		[Token(Token = "0x60007A6")]
		[Address(RVA = "0x10A3110", Offset = "0x10A3110", VA = "0x10A3110")]
		public static extern bool ISteamNetworking_IsDataAvailable(SNetListenSocket_t hListenSocket, out uint pcubMsgSize, out SNetSocket_t phSocket);

		[PreserveSig]
		[Token(Token = "0x60007A7")]
		[Address(RVA = "0x10A31B0", Offset = "0x10A31B0", VA = "0x10A31B0")]
		public static extern bool ISteamNetworking_RetrieveData(SNetListenSocket_t hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out SNetSocket_t phSocket);

		[PreserveSig]
		[Token(Token = "0x60007A8")]
		[Address(RVA = "0x10A3268", Offset = "0x10A3268", VA = "0x10A3268")]
		public static extern bool ISteamNetworking_GetSocketInfo(SNetSocket_t hSocket, out CSteamID pSteamIDRemote, out int peSocketStatus, out uint punIPRemote, out ushort punPortRemote);

		[PreserveSig]
		[Token(Token = "0x60007A9")]
		[Address(RVA = "0x10A3320", Offset = "0x10A3320", VA = "0x10A3320")]
		public static extern bool ISteamNetworking_GetListenSocketInfo(SNetListenSocket_t hListenSocket, out uint pnIP, out ushort pnPort);

		[PreserveSig]
		[Token(Token = "0x60007AA")]
		[Address(RVA = "0x10A33C0", Offset = "0x10A33C0", VA = "0x10A33C0")]
		public static extern ESNetSocketConnectionType ISteamNetworking_GetSocketConnectionType(SNetSocket_t hSocket);

		[PreserveSig]
		[Token(Token = "0x60007AB")]
		[Address(RVA = "0x10A3440", Offset = "0x10A3440", VA = "0x10A3440")]
		public static extern int ISteamNetworking_GetMaxPacketSize(SNetSocket_t hSocket);

		[PreserveSig]
		[Token(Token = "0x60007AC")]
		[Address(RVA = "0x10A34C0", Offset = "0x10A34C0", VA = "0x10A34C0")]
		public static extern bool ISteamRemoteStorage_FileWrite(InteropHelp.UTF8StringHandle pchFile, [In][Out] byte[] pvData, int cubData);

		[PreserveSig]
		[Token(Token = "0x60007AD")]
		[Address(RVA = "0x10A35AC", Offset = "0x10A35AC", VA = "0x10A35AC")]
		public static extern int ISteamRemoteStorage_FileRead(InteropHelp.UTF8StringHandle pchFile, [In][Out] byte[] pvData, int cubDataToRead);

		[PreserveSig]
		[Token(Token = "0x60007AE")]
		[Address(RVA = "0x10A3694", Offset = "0x10A3694", VA = "0x10A3694")]
		public static extern bool ISteamRemoteStorage_FileForget(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x60007AF")]
		[Address(RVA = "0x10A3760", Offset = "0x10A3760", VA = "0x10A3760")]
		public static extern bool ISteamRemoteStorage_FileDelete(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x60007B0")]
		[Address(RVA = "0x10A382C", Offset = "0x10A382C", VA = "0x10A382C")]
		public static extern ulong ISteamRemoteStorage_FileShare(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x60007B1")]
		[Address(RVA = "0x10A38F4", Offset = "0x10A38F4", VA = "0x10A38F4")]
		public static extern bool ISteamRemoteStorage_SetSyncPlatforms(InteropHelp.UTF8StringHandle pchFile, ERemoteStoragePlatform eRemoteStoragePlatform);

		[PreserveSig]
		[Token(Token = "0x60007B2")]
		[Address(RVA = "0x10A39D0", Offset = "0x10A39D0", VA = "0x10A39D0")]
		public static extern ulong ISteamRemoteStorage_FileWriteStreamOpen(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x60007B3")]
		[Address(RVA = "0x10A3A98", Offset = "0x10A3A98", VA = "0x10A3A98")]
		public static extern bool ISteamRemoteStorage_FileWriteStreamWriteChunk(UGCFileWriteStreamHandle_t writeHandle, [In][Out] byte[] pvData, int cubData);

		[PreserveSig]
		[Token(Token = "0x60007B4")]
		[Address(RVA = "0x10A3B40", Offset = "0x10A3B40", VA = "0x10A3B40")]
		public static extern bool ISteamRemoteStorage_FileWriteStreamClose(UGCFileWriteStreamHandle_t writeHandle);

		[PreserveSig]
		[Token(Token = "0x60007B5")]
		[Address(RVA = "0x10A3BC8", Offset = "0x10A3BC8", VA = "0x10A3BC8")]
		public static extern bool ISteamRemoteStorage_FileWriteStreamCancel(UGCFileWriteStreamHandle_t writeHandle);

		[PreserveSig]
		[Token(Token = "0x60007B6")]
		[Address(RVA = "0x10A3C50", Offset = "0x10A3C50", VA = "0x10A3C50")]
		public static extern bool ISteamRemoteStorage_FileExists(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x60007B7")]
		[Address(RVA = "0x10A3D1C", Offset = "0x10A3D1C", VA = "0x10A3D1C")]
		public static extern bool ISteamRemoteStorage_FilePersisted(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x60007B8")]
		[Address(RVA = "0x10A3DE8", Offset = "0x10A3DE8", VA = "0x10A3DE8")]
		public static extern int ISteamRemoteStorage_GetFileSize(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x60007B9")]
		[Address(RVA = "0x10A3EB0", Offset = "0x10A3EB0", VA = "0x10A3EB0")]
		public static extern long ISteamRemoteStorage_GetFileTimestamp(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x60007BA")]
		[Address(RVA = "0x10A3F78", Offset = "0x10A3F78", VA = "0x10A3F78")]
		public static extern ERemoteStoragePlatform ISteamRemoteStorage_GetSyncPlatforms(InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x60007BB")]
		[Address(RVA = "0x10A4040", Offset = "0x10A4040", VA = "0x10A4040")]
		public static extern int ISteamRemoteStorage_GetFileCount();

		[PreserveSig]
		[Token(Token = "0x60007BC")]
		[Address(RVA = "0x10A40B4", Offset = "0x10A40B4", VA = "0x10A40B4")]
		public static extern IntPtr ISteamRemoteStorage_GetFileNameAndSize(int iFile, out int pnFileSizeInBytes);

		[PreserveSig]
		[Token(Token = "0x60007BD")]
		[Address(RVA = "0x10A4144", Offset = "0x10A4144", VA = "0x10A4144")]
		public static extern bool ISteamRemoteStorage_GetQuota(out int pnTotalBytes, out int puAvailableBytes);

		[PreserveSig]
		[Token(Token = "0x60007BE")]
		[Address(RVA = "0x10A41DC", Offset = "0x10A41DC", VA = "0x10A41DC")]
		public static extern bool ISteamRemoteStorage_IsCloudEnabledForAccount();

		[PreserveSig]
		[Token(Token = "0x60007BF")]
		[Address(RVA = "0x10A4258", Offset = "0x10A4258", VA = "0x10A4258")]
		public static extern bool ISteamRemoteStorage_IsCloudEnabledForApp();

		[PreserveSig]
		[Token(Token = "0x60007C0")]
		[Address(RVA = "0x10A42D4", Offset = "0x10A42D4", VA = "0x10A42D4")]
		public static extern void ISteamRemoteStorage_SetCloudEnabledForApp(bool bEnabled);

		[PreserveSig]
		[Token(Token = "0x60007C1")]
		[Address(RVA = "0x10A4354", Offset = "0x10A4354", VA = "0x10A4354")]
		public static extern ulong ISteamRemoteStorage_UGCDownload(UGCHandle_t hContent, uint unPriority);

		[PreserveSig]
		[Token(Token = "0x60007C2")]
		[Address(RVA = "0x10A43E4", Offset = "0x10A43E4", VA = "0x10A43E4")]
		public static extern bool ISteamRemoteStorage_GetUGCDownloadProgress(UGCHandle_t hContent, out int pnBytesDownloaded, out int pnBytesExpected);

		[PreserveSig]
		[Token(Token = "0x60007C3")]
		[Address(RVA = "0x10A4484", Offset = "0x10A4484", VA = "0x10A4484")]
		public static extern bool ISteamRemoteStorage_GetUGCDetails(UGCHandle_t hContent, out AppId_t pnAppID, out IntPtr ppchName, out int pnFileSizeInBytes, out CSteamID pSteamIDOwner);

		[PreserveSig]
		[Token(Token = "0x60007C4")]
		[Address(RVA = "0x10A453C", Offset = "0x10A453C", VA = "0x10A453C")]
		public static extern int ISteamRemoteStorage_UGCRead(UGCHandle_t hContent, [In][Out] byte[] pvData, int cubDataToRead, uint cOffset, EUGCReadAction eAction);

		[PreserveSig]
		[Token(Token = "0x60007C5")]
		[Address(RVA = "0x10A45F4", Offset = "0x10A45F4", VA = "0x10A45F4")]
		public static extern int ISteamRemoteStorage_GetCachedUGCCount();

		[PreserveSig]
		[Token(Token = "0x60007C6")]
		[Address(RVA = "0x10A4668", Offset = "0x10A4668", VA = "0x10A4668")]
		public static extern ulong ISteamRemoteStorage_GetCachedUGCHandle(int iCachedContent);

		[PreserveSig]
		[Token(Token = "0x60007C7")]
		[Address(RVA = "0x10A46E8", Offset = "0x10A46E8", VA = "0x10A46E8")]
		public static extern ulong ISteamRemoteStorage_PublishWorkshopFile(InteropHelp.UTF8StringHandle pchFile, InteropHelp.UTF8StringHandle pchPreviewFile, AppId_t nConsumerAppId, InteropHelp.UTF8StringHandle pchTitle, InteropHelp.UTF8StringHandle pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, IntPtr pTags, EWorkshopFileType eWorkshopFileType);

		[PreserveSig]
		[Token(Token = "0x60007C8")]
		[Address(RVA = "0x10A48C8", Offset = "0x10A48C8", VA = "0x10A48C8")]
		public static extern ulong ISteamRemoteStorage_CreatePublishedFileUpdateRequest(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x60007C9")]
		[Address(RVA = "0x10A4948", Offset = "0x10A4948", VA = "0x10A4948")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileFile(PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchFile);

		[PreserveSig]
		[Token(Token = "0x60007CA")]
		[Address(RVA = "0x10A4A24", Offset = "0x10A4A24", VA = "0x10A4A24")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFilePreviewFile(PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchPreviewFile);

		[PreserveSig]
		[Token(Token = "0x60007CB")]
		[Address(RVA = "0x10A4B00", Offset = "0x10A4B00", VA = "0x10A4B00")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileTitle(PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchTitle);

		[PreserveSig]
		[Token(Token = "0x60007CC")]
		[Address(RVA = "0x10A4BDC", Offset = "0x10A4BDC", VA = "0x10A4BDC")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileDescription(PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchDescription);

		[PreserveSig]
		[Token(Token = "0x60007CD")]
		[Address(RVA = "0x10A4CB8", Offset = "0x10A4CB8", VA = "0x10A4CB8")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileVisibility(PublishedFileUpdateHandle_t updateHandle, ERemoteStoragePublishedFileVisibility eVisibility);

		[PreserveSig]
		[Token(Token = "0x60007CE")]
		[Address(RVA = "0x10A4D50", Offset = "0x10A4D50", VA = "0x10A4D50")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileTags(PublishedFileUpdateHandle_t updateHandle, IntPtr pTags);

		[PreserveSig]
		[Token(Token = "0x60007CF")]
		[Address(RVA = "0x10A4DE8", Offset = "0x10A4DE8", VA = "0x10A4DE8")]
		public static extern ulong ISteamRemoteStorage_CommitPublishedFileUpdate(PublishedFileUpdateHandle_t updateHandle);

		[PreserveSig]
		[Token(Token = "0x60007D0")]
		[Address(RVA = "0x10A4E68", Offset = "0x10A4E68", VA = "0x10A4E68")]
		public static extern ulong ISteamRemoteStorage_GetPublishedFileDetails(PublishedFileId_t unPublishedFileId, uint unMaxSecondsOld);

		[PreserveSig]
		[Token(Token = "0x60007D1")]
		[Address(RVA = "0x10A4EF8", Offset = "0x10A4EF8", VA = "0x10A4EF8")]
		public static extern ulong ISteamRemoteStorage_DeletePublishedFile(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x60007D2")]
		[Address(RVA = "0x10A4F78", Offset = "0x10A4F78", VA = "0x10A4F78")]
		public static extern ulong ISteamRemoteStorage_EnumerateUserPublishedFiles(uint unStartIndex);

		[PreserveSig]
		[Token(Token = "0x60007D3")]
		[Address(RVA = "0x10A4FF8", Offset = "0x10A4FF8", VA = "0x10A4FF8")]
		public static extern ulong ISteamRemoteStorage_SubscribePublishedFile(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x60007D4")]
		[Address(RVA = "0x10A5078", Offset = "0x10A5078", VA = "0x10A5078")]
		public static extern ulong ISteamRemoteStorage_EnumerateUserSubscribedFiles(uint unStartIndex);

		[PreserveSig]
		[Token(Token = "0x60007D5")]
		[Address(RVA = "0x10A50F8", Offset = "0x10A50F8", VA = "0x10A50F8")]
		public static extern ulong ISteamRemoteStorage_UnsubscribePublishedFile(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x60007D6")]
		[Address(RVA = "0x10A5178", Offset = "0x10A5178", VA = "0x10A5178")]
		public static extern bool ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(PublishedFileUpdateHandle_t updateHandle, InteropHelp.UTF8StringHandle pchChangeDescription);

		[PreserveSig]
		[Token(Token = "0x60007D7")]
		[Address(RVA = "0x10A5254", Offset = "0x10A5254", VA = "0x10A5254")]
		public static extern ulong ISteamRemoteStorage_GetPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x60007D8")]
		[Address(RVA = "0x10A52D4", Offset = "0x10A52D4", VA = "0x10A52D4")]
		public static extern ulong ISteamRemoteStorage_UpdateUserPublishedItemVote(PublishedFileId_t unPublishedFileId, bool bVoteUp);

		[PreserveSig]
		[Token(Token = "0x60007D9")]
		[Address(RVA = "0x10A5364", Offset = "0x10A5364", VA = "0x10A5364")]
		public static extern ulong ISteamRemoteStorage_GetUserPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId);

		[PreserveSig]
		[Token(Token = "0x60007DA")]
		[Address(RVA = "0x10A53E4", Offset = "0x10A53E4", VA = "0x10A53E4")]
		public static extern ulong ISteamRemoteStorage_EnumerateUserSharedWorkshopFiles(CSteamID steamId, uint unStartIndex, IntPtr pRequiredTags, IntPtr pExcludedTags);

		[PreserveSig]
		[Token(Token = "0x60007DB")]
		[Address(RVA = "0x10A548C", Offset = "0x10A548C", VA = "0x10A548C")]
		public static extern ulong ISteamRemoteStorage_PublishVideo(EWorkshopVideoProvider eVideoProvider, InteropHelp.UTF8StringHandle pchVideoAccount, InteropHelp.UTF8StringHandle pchVideoIdentifier, InteropHelp.UTF8StringHandle pchPreviewFile, AppId_t nConsumerAppId, InteropHelp.UTF8StringHandle pchTitle, InteropHelp.UTF8StringHandle pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, IntPtr pTags);

		[PreserveSig]
		[Token(Token = "0x60007DC")]
		[Address(RVA = "0x10A56BC", Offset = "0x10A56BC", VA = "0x10A56BC")]
		public static extern ulong ISteamRemoteStorage_SetUserPublishedFileAction(PublishedFileId_t unPublishedFileId, EWorkshopFileAction eAction);

		[PreserveSig]
		[Token(Token = "0x60007DD")]
		[Address(RVA = "0x10A574C", Offset = "0x10A574C", VA = "0x10A574C")]
		public static extern ulong ISteamRemoteStorage_EnumeratePublishedFilesByUserAction(EWorkshopFileAction eAction, uint unStartIndex);

		[PreserveSig]
		[Token(Token = "0x60007DE")]
		[Address(RVA = "0x10A57DC", Offset = "0x10A57DC", VA = "0x10A57DC")]
		public static extern ulong ISteamRemoteStorage_EnumeratePublishedWorkshopFiles(EWorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, IntPtr pTags, IntPtr pUserTags);

		[PreserveSig]
		[Token(Token = "0x60007DF")]
		[Address(RVA = "0x10A589C", Offset = "0x10A589C", VA = "0x10A589C")]
		public static extern ulong ISteamRemoteStorage_UGCDownloadToLocation(UGCHandle_t hContent, InteropHelp.UTF8StringHandle pchLocation, uint unPriority);

		[PreserveSig]
		[Token(Token = "0x60007E0")]
		[Address(RVA = "0x10A597C", Offset = "0x10A597C", VA = "0x10A597C")]
		public static extern uint ISteamScreenshots_WriteScreenshot([In][Out] byte[] pubRGB, uint cubRGB, int nWidth, int nHeight);

		[PreserveSig]
		[Token(Token = "0x60007E1")]
		[Address(RVA = "0x10A5A2C", Offset = "0x10A5A2C", VA = "0x10A5A2C")]
		public static extern uint ISteamScreenshots_AddScreenshotToLibrary(InteropHelp.UTF8StringHandle pchFilename, InteropHelp.UTF8StringHandle pchThumbnailFilename, int nWidth, int nHeight);

		[PreserveSig]
		[Token(Token = "0x60007E2")]
		[Address(RVA = "0x10A5B58", Offset = "0x10A5B58", VA = "0x10A5B58")]
		public static extern void ISteamScreenshots_TriggerScreenshot();

		[PreserveSig]
		[Token(Token = "0x60007E3")]
		[Address(RVA = "0x10A5BC8", Offset = "0x10A5BC8", VA = "0x10A5BC8")]
		public static extern void ISteamScreenshots_HookScreenshots(bool bHook);

		[PreserveSig]
		[Token(Token = "0x60007E4")]
		[Address(RVA = "0x10A5C48", Offset = "0x10A5C48", VA = "0x10A5C48")]
		public static extern bool ISteamScreenshots_SetLocation(ScreenshotHandle hScreenshot, InteropHelp.UTF8StringHandle pchLocation);

		[PreserveSig]
		[Token(Token = "0x60007E5")]
		[Address(RVA = "0x10A5D24", Offset = "0x10A5D24", VA = "0x10A5D24")]
		public static extern bool ISteamScreenshots_TagUser(ScreenshotHandle hScreenshot, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x60007E6")]
		[Address(RVA = "0x10A5DBC", Offset = "0x10A5DBC", VA = "0x10A5DBC")]
		public static extern bool ISteamScreenshots_TagPublishedFile(ScreenshotHandle hScreenshot, PublishedFileId_t unPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60007E7")]
		[Address(RVA = "0x10A5E54", Offset = "0x10A5E54", VA = "0x10A5E54")]
		public static extern ulong ISteamUGC_CreateQueryUserUGCRequest(AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage);

		[PreserveSig]
		[Token(Token = "0x60007E8")]
		[Address(RVA = "0x10A5F1C", Offset = "0x10A5F1C", VA = "0x10A5F1C")]
		public static extern ulong ISteamUGC_CreateQueryAllUGCRequest(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage);

		[PreserveSig]
		[Token(Token = "0x60007E9")]
		[Address(RVA = "0x10A5FCC", Offset = "0x10A5FCC", VA = "0x10A5FCC")]
		public static extern ulong ISteamUGC_CreateQueryUGCDetailsRequest([In][Out] PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs);

		[PreserveSig]
		[Token(Token = "0x60007EA")]
		[Address(RVA = "0x10A6064", Offset = "0x10A6064", VA = "0x10A6064")]
		public static extern ulong ISteamUGC_SendQueryUGCRequest(UGCQueryHandle_t handle);

		[PreserveSig]
		[Token(Token = "0x60007EB")]
		[Address(RVA = "0x10A60E4", Offset = "0x10A60E4", VA = "0x10A60E4")]
		public static extern bool ISteamUGC_GetQueryUGCResult(UGCQueryHandle_t handle, uint index, out SteamUGCDetails_t pDetails);

		[PreserveSig]
		[Token(Token = "0x60007EC")]
		[Address(RVA = "0x10A61E8", Offset = "0x10A61E8", VA = "0x10A61E8")]
		public static extern bool ISteamUGC_GetQueryUGCPreviewURL(UGCQueryHandle_t handle, uint index, IntPtr pchURL, uint cchURLSize);

		[PreserveSig]
		[Token(Token = "0x60007ED")]
		[Address(RVA = "0x10A6298", Offset = "0x10A6298", VA = "0x10A6298")]
		public static extern bool ISteamUGC_GetQueryUGCMetadata(UGCQueryHandle_t handle, uint index, IntPtr pchMetadata, uint cchMetadatasize);

		[PreserveSig]
		[Token(Token = "0x60007EE")]
		[Address(RVA = "0x10A6348", Offset = "0x10A6348", VA = "0x10A6348")]
		public static extern bool ISteamUGC_GetQueryUGCChildren(UGCQueryHandle_t handle, uint index, [In][Out] PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries);

		[PreserveSig]
		[Token(Token = "0x60007EF")]
		[Address(RVA = "0x10A6400", Offset = "0x10A6400", VA = "0x10A6400")]
		public static extern bool ISteamUGC_GetQueryUGCStatistic(UGCQueryHandle_t handle, uint index, EItemStatistic eStatType, out uint pStatValue);

		[PreserveSig]
		[Token(Token = "0x60007F0")]
		[Address(RVA = "0x10A64B0", Offset = "0x10A64B0", VA = "0x10A64B0")]
		public static extern uint ISteamUGC_GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, uint index);

		[PreserveSig]
		[Token(Token = "0x60007F1")]
		[Address(RVA = "0x10A6540", Offset = "0x10A6540", VA = "0x10A6540")]
		public static extern bool ISteamUGC_GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, uint index, uint previewIndex, IntPtr pchURLOrVideoID, uint cchURLSize, out bool pbIsImage);

		[PreserveSig]
		[Token(Token = "0x60007F2")]
		[Address(RVA = "0x10A661C", Offset = "0x10A661C", VA = "0x10A661C")]
		public static extern uint ISteamUGC_GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, uint index);

		[PreserveSig]
		[Token(Token = "0x60007F3")]
		[Address(RVA = "0x10A66AC", Offset = "0x10A66AC", VA = "0x10A66AC")]
		public static extern bool ISteamUGC_GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, uint index, uint keyValueTagIndex, IntPtr pchKey, uint cchKeySize, IntPtr pchValue, uint cchValueSize);

		[PreserveSig]
		[Token(Token = "0x60007F4")]
		[Address(RVA = "0x10A677C", Offset = "0x10A677C", VA = "0x10A677C")]
		public static extern bool ISteamUGC_ReleaseQueryUGCRequest(UGCQueryHandle_t handle);

		[PreserveSig]
		[Token(Token = "0x60007F5")]
		[Address(RVA = "0x10A6804", Offset = "0x10A6804", VA = "0x10A6804")]
		public static extern bool ISteamUGC_AddRequiredTag(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pTagName);

		[PreserveSig]
		[Token(Token = "0x60007F6")]
		[Address(RVA = "0x10A68E0", Offset = "0x10A68E0", VA = "0x10A68E0")]
		public static extern bool ISteamUGC_AddExcludedTag(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pTagName);

		[PreserveSig]
		[Token(Token = "0x60007F7")]
		[Address(RVA = "0x10A69BC", Offset = "0x10A69BC", VA = "0x10A69BC")]
		public static extern bool ISteamUGC_SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags);

		[PreserveSig]
		[Token(Token = "0x60007F8")]
		[Address(RVA = "0x10A6A54", Offset = "0x10A6A54", VA = "0x10A6A54")]
		public static extern bool ISteamUGC_SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription);

		[PreserveSig]
		[Token(Token = "0x60007F9")]
		[Address(RVA = "0x10A6AEC", Offset = "0x10A6AEC", VA = "0x10A6AEC")]
		public static extern bool ISteamUGC_SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata);

		[PreserveSig]
		[Token(Token = "0x60007FA")]
		[Address(RVA = "0x10A6B84", Offset = "0x10A6B84", VA = "0x10A6B84")]
		public static extern bool ISteamUGC_SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren);

		[PreserveSig]
		[Token(Token = "0x60007FB")]
		[Address(RVA = "0x10A6C1C", Offset = "0x10A6C1C", VA = "0x10A6C1C")]
		public static extern bool ISteamUGC_SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews);

		[PreserveSig]
		[Token(Token = "0x60007FC")]
		[Address(RVA = "0x10A6CB4", Offset = "0x10A6CB4", VA = "0x10A6CB4")]
		public static extern bool ISteamUGC_SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly);

		[PreserveSig]
		[Token(Token = "0x60007FD")]
		[Address(RVA = "0x10A6D4C", Offset = "0x10A6D4C", VA = "0x10A6D4C")]
		public static extern bool ISteamUGC_SetLanguage(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pchLanguage);

		[PreserveSig]
		[Token(Token = "0x60007FE")]
		[Address(RVA = "0x10A6E28", Offset = "0x10A6E28", VA = "0x10A6E28")]
		public static extern bool ISteamUGC_SetAllowCachedResponse(UGCQueryHandle_t handle, uint unMaxAgeSeconds);

		[PreserveSig]
		[Token(Token = "0x60007FF")]
		[Address(RVA = "0x10A6EC0", Offset = "0x10A6EC0", VA = "0x10A6EC0")]
		public static extern bool ISteamUGC_SetCloudFileNameFilter(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pMatchCloudFileName);

		[PreserveSig]
		[Token(Token = "0x6000800")]
		[Address(RVA = "0x10A6F9C", Offset = "0x10A6F9C", VA = "0x10A6F9C")]
		public static extern bool ISteamUGC_SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag);

		[PreserveSig]
		[Token(Token = "0x6000801")]
		[Address(RVA = "0x10A7034", Offset = "0x10A7034", VA = "0x10A7034")]
		public static extern bool ISteamUGC_SetSearchText(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pSearchText);

		[PreserveSig]
		[Token(Token = "0x6000802")]
		[Address(RVA = "0x10A7110", Offset = "0x10A7110", VA = "0x10A7110")]
		public static extern bool ISteamUGC_SetRankedByTrendDays(UGCQueryHandle_t handle, uint unDays);

		[PreserveSig]
		[Token(Token = "0x6000803")]
		[Address(RVA = "0x10A71A8", Offset = "0x10A71A8", VA = "0x10A71A8")]
		public static extern bool ISteamUGC_AddRequiredKeyValueTag(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pKey, InteropHelp.UTF8StringHandle pValue);

		[PreserveSig]
		[Token(Token = "0x6000804")]
		[Address(RVA = "0x10A72D0", Offset = "0x10A72D0", VA = "0x10A72D0")]
		public static extern ulong ISteamUGC_RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint unMaxAgeSeconds);

		[PreserveSig]
		[Token(Token = "0x6000805")]
		[Address(RVA = "0x10A7360", Offset = "0x10A7360", VA = "0x10A7360")]
		public static extern ulong ISteamUGC_CreateItem(AppId_t nConsumerAppId, EWorkshopFileType eFileType);

		[PreserveSig]
		[Token(Token = "0x6000806")]
		[Address(RVA = "0x10A73F0", Offset = "0x10A73F0", VA = "0x10A73F0")]
		public static extern ulong ISteamUGC_StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x6000807")]
		[Address(RVA = "0x10A7480", Offset = "0x10A7480", VA = "0x10A7480")]
		public static extern bool ISteamUGC_SetItemTitle(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchTitle);

		[PreserveSig]
		[Token(Token = "0x6000808")]
		[Address(RVA = "0x10A755C", Offset = "0x10A755C", VA = "0x10A755C")]
		public static extern bool ISteamUGC_SetItemDescription(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchDescription);

		[PreserveSig]
		[Token(Token = "0x6000809")]
		[Address(RVA = "0x10A7638", Offset = "0x10A7638", VA = "0x10A7638")]
		public static extern bool ISteamUGC_SetItemUpdateLanguage(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchLanguage);

		[PreserveSig]
		[Token(Token = "0x600080A")]
		[Address(RVA = "0x10A7714", Offset = "0x10A7714", VA = "0x10A7714")]
		public static extern bool ISteamUGC_SetItemMetadata(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchMetaData);

		[PreserveSig]
		[Token(Token = "0x600080B")]
		[Address(RVA = "0x10A77F0", Offset = "0x10A77F0", VA = "0x10A77F0")]
		public static extern bool ISteamUGC_SetItemVisibility(UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility);

		[PreserveSig]
		[Token(Token = "0x600080C")]
		[Address(RVA = "0x10A7888", Offset = "0x10A7888", VA = "0x10A7888")]
		public static extern bool ISteamUGC_SetItemTags(UGCUpdateHandle_t updateHandle, IntPtr pTags);

		[PreserveSig]
		[Token(Token = "0x600080D")]
		[Address(RVA = "0x10A7920", Offset = "0x10A7920", VA = "0x10A7920")]
		public static extern bool ISteamUGC_SetItemContent(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszContentFolder);

		[PreserveSig]
		[Token(Token = "0x600080E")]
		[Address(RVA = "0x10A79FC", Offset = "0x10A79FC", VA = "0x10A79FC")]
		public static extern bool ISteamUGC_SetItemPreview(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszPreviewFile);

		[PreserveSig]
		[Token(Token = "0x600080F")]
		[Address(RVA = "0x10A7AD8", Offset = "0x10A7AD8", VA = "0x10A7AD8")]
		public static extern bool ISteamUGC_RemoveItemKeyValueTags(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x6000810")]
		[Address(RVA = "0x10A7BB4", Offset = "0x10A7BB4", VA = "0x10A7BB4")]
		public static extern bool ISteamUGC_AddItemKeyValueTag(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x6000811")]
		[Address(RVA = "0x10A7CDC", Offset = "0x10A7CDC", VA = "0x10A7CDC")]
		public static extern ulong ISteamUGC_SubmitItemUpdate(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchChangeNote);

		[PreserveSig]
		[Token(Token = "0x6000812")]
		[Address(RVA = "0x10A7DB4", Offset = "0x10A7DB4", VA = "0x10A7DB4")]
		public static extern EItemUpdateStatus ISteamUGC_GetItemUpdateProgress(UGCUpdateHandle_t handle, out ulong punBytesProcessed, out ulong punBytesTotal);

		[PreserveSig]
		[Token(Token = "0x6000813")]
		[Address(RVA = "0x10A7E4C", Offset = "0x10A7E4C", VA = "0x10A7E4C")]
		public static extern ulong ISteamUGC_SetUserItemVote(PublishedFileId_t nPublishedFileID, bool bVoteUp);

		[PreserveSig]
		[Token(Token = "0x6000814")]
		[Address(RVA = "0x10A7EDC", Offset = "0x10A7EDC", VA = "0x10A7EDC")]
		public static extern ulong ISteamUGC_GetUserItemVote(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x6000815")]
		[Address(RVA = "0x10A7F5C", Offset = "0x10A7F5C", VA = "0x10A7F5C")]
		public static extern ulong ISteamUGC_AddItemToFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x6000816")]
		[Address(RVA = "0x10A7FEC", Offset = "0x10A7FEC", VA = "0x10A7FEC")]
		public static extern ulong ISteamUGC_RemoveItemFromFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x6000817")]
		[Address(RVA = "0x10A807C", Offset = "0x10A807C", VA = "0x10A807C")]
		public static extern ulong ISteamUGC_SubscribeItem(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x6000818")]
		[Address(RVA = "0x10A80FC", Offset = "0x10A80FC", VA = "0x10A80FC")]
		public static extern ulong ISteamUGC_UnsubscribeItem(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x6000819")]
		[Address(RVA = "0x10A817C", Offset = "0x10A817C", VA = "0x10A817C")]
		public static extern uint ISteamUGC_GetNumSubscribedItems();

		[PreserveSig]
		[Token(Token = "0x600081A")]
		[Address(RVA = "0x10A81F0", Offset = "0x10A81F0", VA = "0x10A81F0")]
		public static extern uint ISteamUGC_GetSubscribedItems([In][Out] PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries);

		[PreserveSig]
		[Token(Token = "0x600081B")]
		[Address(RVA = "0x10A8288", Offset = "0x10A8288", VA = "0x10A8288")]
		public static extern uint ISteamUGC_GetItemState(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x600081C")]
		[Address(RVA = "0x10A8308", Offset = "0x10A8308", VA = "0x10A8308")]
		public static extern bool ISteamUGC_GetItemInstallInfo(PublishedFileId_t nPublishedFileID, out ulong punSizeOnDisk, IntPtr pchFolder, uint cchFolderSize, out uint punTimeStamp);

		[PreserveSig]
		[Token(Token = "0x600081D")]
		[Address(RVA = "0x10A83C0", Offset = "0x10A83C0", VA = "0x10A83C0")]
		public static extern bool ISteamUGC_GetItemDownloadInfo(PublishedFileId_t nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal);

		[PreserveSig]
		[Token(Token = "0x600081E")]
		[Address(RVA = "0x10A8460", Offset = "0x10A8460", VA = "0x10A8460")]
		public static extern bool ISteamUGC_DownloadItem(PublishedFileId_t nPublishedFileID, bool bHighPriority);

		[PreserveSig]
		[Token(Token = "0x600081F")]
		[Address(RVA = "0x10A84F8", Offset = "0x10A84F8", VA = "0x10A84F8")]
		public static extern ulong ISteamUnifiedMessages_SendMethod(InteropHelp.UTF8StringHandle pchServiceMethod, [In][Out] byte[] pRequestBuffer, uint unRequestBufferSize, ulong unContext);

		[PreserveSig]
		[Token(Token = "0x6000820")]
		[Address(RVA = "0x10A85F0", Offset = "0x10A85F0", VA = "0x10A85F0")]
		public static extern bool ISteamUnifiedMessages_GetMethodResponseInfo(ClientUnifiedMessageHandle hHandle, out uint punResponseSize, out EResult peResult);

		[PreserveSig]
		[Token(Token = "0x6000821")]
		[Address(RVA = "0x10A8690", Offset = "0x10A8690", VA = "0x10A8690")]
		public static extern bool ISteamUnifiedMessages_GetMethodResponseData(ClientUnifiedMessageHandle hHandle, [In][Out] byte[] pResponseBuffer, uint unResponseBufferSize, bool bAutoRelease);

		[PreserveSig]
		[Token(Token = "0x6000822")]
		[Address(RVA = "0x10A8748", Offset = "0x10A8748", VA = "0x10A8748")]
		public static extern bool ISteamUnifiedMessages_ReleaseMethod(ClientUnifiedMessageHandle hHandle);

		[PreserveSig]
		[Token(Token = "0x6000823")]
		[Address(RVA = "0x10A87D0", Offset = "0x10A87D0", VA = "0x10A87D0")]
		public static extern bool ISteamUnifiedMessages_SendNotification(InteropHelp.UTF8StringHandle pchServiceNotification, [In][Out] byte[] pNotificationBuffer, uint unNotificationBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000824")]
		[Address(RVA = "0x10A88BC", Offset = "0x10A88BC", VA = "0x10A88BC")]
		public static extern int ISteamUser_GetHSteamUser();

		[PreserveSig]
		[Token(Token = "0x6000825")]
		[Address(RVA = "0x10A8930", Offset = "0x10A8930", VA = "0x10A8930")]
		public static extern bool ISteamUser_BLoggedOn();

		[PreserveSig]
		[Token(Token = "0x6000826")]
		[Address(RVA = "0x10A89AC", Offset = "0x10A89AC", VA = "0x10A89AC")]
		public static extern ulong ISteamUser_GetSteamID();

		[PreserveSig]
		[Token(Token = "0x6000827")]
		[Address(RVA = "0x10A8A20", Offset = "0x10A8A20", VA = "0x10A8A20")]
		public static extern int ISteamUser_InitiateGameConnection([In][Out] byte[] pAuthBlob, int cbMaxAuthBlob, CSteamID steamIDGameServer, uint unIPServer, ushort usPortServer, bool bSecure);

		[PreserveSig]
		[Token(Token = "0x6000828")]
		[Address(RVA = "0x10A8AE8", Offset = "0x10A8AE8", VA = "0x10A8AE8")]
		public static extern void ISteamUser_TerminateGameConnection(uint unIPServer, ushort usPortServer);

		[PreserveSig]
		[Token(Token = "0x6000829")]
		[Address(RVA = "0x10A8B78", Offset = "0x10A8B78", VA = "0x10A8B78")]
		public static extern void ISteamUser_TrackAppUsageEvent(CGameID gameID, int eAppUsageEvent, InteropHelp.UTF8StringHandle pchExtraInfo);

		[PreserveSig]
		[Token(Token = "0x600082A")]
		[Address(RVA = "0x10A8C50", Offset = "0x10A8C50", VA = "0x10A8C50")]
		public static extern bool ISteamUser_GetUserDataFolder(IntPtr pchBuffer, int cubBuffer);

		[PreserveSig]
		[Token(Token = "0x600082B")]
		[Address(RVA = "0x10A8CE8", Offset = "0x10A8CE8", VA = "0x10A8CE8")]
		public static extern void ISteamUser_StartVoiceRecording();

		[PreserveSig]
		[Token(Token = "0x600082C")]
		[Address(RVA = "0x10A8D58", Offset = "0x10A8D58", VA = "0x10A8D58")]
		public static extern void ISteamUser_StopVoiceRecording();

		[PreserveSig]
		[Token(Token = "0x600082D")]
		[Address(RVA = "0x10A8DC8", Offset = "0x10A8DC8", VA = "0x10A8DC8")]
		public static extern EVoiceResult ISteamUser_GetAvailableVoice(out uint pcbCompressed, out uint pcbUncompressed, uint nUncompressedVoiceDesiredSampleRate);

		[PreserveSig]
		[Token(Token = "0x600082E")]
		[Address(RVA = "0x10A8E60", Offset = "0x10A8E60", VA = "0x10A8E60")]
		public static extern EVoiceResult ISteamUser_GetVoice(bool bWantCompressed, [In][Out] byte[] pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, bool bWantUncompressed, [In][Out] byte[] pUncompressedDestBuffer, uint cbUncompressedDestBufferSize, out uint nUncompressBytesWritten, uint nUncompressedVoiceDesiredSampleRate);

		[PreserveSig]
		[Token(Token = "0x600082F")]
		[Address(RVA = "0x10A8F50", Offset = "0x10A8F50", VA = "0x10A8F50")]
		public static extern EVoiceResult ISteamUser_DecompressVoice([In][Out] byte[] pCompressed, uint cbCompressed, [In][Out] byte[] pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate);

		[PreserveSig]
		[Token(Token = "0x6000830")]
		[Address(RVA = "0x10A9020", Offset = "0x10A9020", VA = "0x10A9020")]
		public static extern uint ISteamUser_GetVoiceOptimalSampleRate();

		[PreserveSig]
		[Token(Token = "0x6000831")]
		[Address(RVA = "0x10A9094", Offset = "0x10A9094", VA = "0x10A9094")]
		public static extern uint ISteamUser_GetAuthSessionTicket([In][Out] byte[] pTicket, int cbMaxTicket, out uint pcbTicket);

		[PreserveSig]
		[Token(Token = "0x6000832")]
		[Address(RVA = "0x10A9134", Offset = "0x10A9134", VA = "0x10A9134")]
		public static extern EBeginAuthSessionResult ISteamUser_BeginAuthSession([In][Out] byte[] pAuthTicket, int cbAuthTicket, CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x6000833")]
		[Address(RVA = "0x10A91D4", Offset = "0x10A91D4", VA = "0x10A91D4")]
		public static extern void ISteamUser_EndAuthSession(CSteamID steamID);

		[PreserveSig]
		[Token(Token = "0x6000834")]
		[Address(RVA = "0x10A9254", Offset = "0x10A9254", VA = "0x10A9254")]
		public static extern void ISteamUser_CancelAuthTicket(HAuthTicket hAuthTicket);

		[PreserveSig]
		[Token(Token = "0x6000835")]
		[Address(RVA = "0x10A92D4", Offset = "0x10A92D4", VA = "0x10A92D4")]
		public static extern EUserHasLicenseForAppResult ISteamUser_UserHasLicenseForApp(CSteamID steamID, AppId_t appID);

		[PreserveSig]
		[Token(Token = "0x6000836")]
		[Address(RVA = "0x10A9364", Offset = "0x10A9364", VA = "0x10A9364")]
		public static extern bool ISteamUser_BIsBehindNAT();

		[PreserveSig]
		[Token(Token = "0x6000837")]
		[Address(RVA = "0x10A93E0", Offset = "0x10A93E0", VA = "0x10A93E0")]
		public static extern void ISteamUser_AdvertiseGame(CSteamID steamIDGameServer, uint unIPServer, ushort usPortServer);

		[PreserveSig]
		[Token(Token = "0x6000838")]
		[Address(RVA = "0x10A9478", Offset = "0x10A9478", VA = "0x10A9478")]
		public static extern ulong ISteamUser_RequestEncryptedAppTicket([In][Out] byte[] pDataToInclude, int cbDataToInclude);

		[PreserveSig]
		[Token(Token = "0x6000839")]
		[Address(RVA = "0x10A9510", Offset = "0x10A9510", VA = "0x10A9510")]
		public static extern bool ISteamUser_GetEncryptedAppTicket([In][Out] byte[] pTicket, int cbMaxTicket, out uint pcbTicket);

		[PreserveSig]
		[Token(Token = "0x600083A")]
		[Address(RVA = "0x10A95B8", Offset = "0x10A95B8", VA = "0x10A95B8")]
		public static extern int ISteamUser_GetGameBadgeLevel(int nSeries, bool bFoil);

		[PreserveSig]
		[Token(Token = "0x600083B")]
		[Address(RVA = "0x10A9648", Offset = "0x10A9648", VA = "0x10A9648")]
		public static extern int ISteamUser_GetPlayerSteamLevel();

		[PreserveSig]
		[Token(Token = "0x600083C")]
		[Address(RVA = "0x10A96BC", Offset = "0x10A96BC", VA = "0x10A96BC")]
		public static extern ulong ISteamUser_RequestStoreAuthURL(InteropHelp.UTF8StringHandle pchRedirectURL);

		[PreserveSig]
		[Token(Token = "0x600083D")]
		[Address(RVA = "0x10A9784", Offset = "0x10A9784", VA = "0x10A9784")]
		public static extern bool ISteamUserStats_RequestCurrentStats();

		[PreserveSig]
		[Token(Token = "0x600083E")]
		[Address(RVA = "0x10A9800", Offset = "0x10A9800", VA = "0x10A9800")]
		public static extern bool ISteamUserStats_GetStat(InteropHelp.UTF8StringHandle pchName, out int pData);

		[PreserveSig]
		[Token(Token = "0x600083F")]
		[Address(RVA = "0x10A98DC", Offset = "0x10A98DC", VA = "0x10A98DC")]
		public static extern bool ISteamUserStats_GetStat_(InteropHelp.UTF8StringHandle pchName, out float pData);

		[PreserveSig]
		[Token(Token = "0x6000840")]
		[Address(RVA = "0x10A99B8", Offset = "0x10A99B8", VA = "0x10A99B8")]
		public static extern bool ISteamUserStats_SetStat(InteropHelp.UTF8StringHandle pchName, int nData);

		[PreserveSig]
		[Token(Token = "0x6000841")]
		[Address(RVA = "0x10A9A94", Offset = "0x10A9A94", VA = "0x10A9A94")]
		public static extern bool ISteamUserStats_SetStat_(InteropHelp.UTF8StringHandle pchName, float fData);

		[PreserveSig]
		[Token(Token = "0x6000842")]
		[Address(RVA = "0x10A9B70", Offset = "0x10A9B70", VA = "0x10A9B70")]
		public static extern bool ISteamUserStats_UpdateAvgRateStat(InteropHelp.UTF8StringHandle pchName, float flCountThisSession, double dSessionLength);

		[PreserveSig]
		[Token(Token = "0x6000843")]
		[Address(RVA = "0x10A9C54", Offset = "0x10A9C54", VA = "0x10A9C54")]
		public static extern bool ISteamUserStats_GetAchievement(InteropHelp.UTF8StringHandle pchName, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x6000844")]
		[Address(RVA = "0x10A9D44", Offset = "0x10A9D44", VA = "0x10A9D44")]
		public static extern bool ISteamUserStats_SetAchievement(InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x6000845")]
		[Address(RVA = "0x10A9E10", Offset = "0x10A9E10", VA = "0x10A9E10")]
		public static extern bool ISteamUserStats_ClearAchievement(InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x6000846")]
		[Address(RVA = "0x10A9EDC", Offset = "0x10A9EDC", VA = "0x10A9EDC")]
		public static extern bool ISteamUserStats_GetAchievementAndUnlockTime(InteropHelp.UTF8StringHandle pchName, out bool pbAchieved, out uint punUnlockTime);

		[PreserveSig]
		[Token(Token = "0x6000847")]
		[Address(RVA = "0x10A9FD4", Offset = "0x10A9FD4", VA = "0x10A9FD4")]
		public static extern bool ISteamUserStats_StoreStats();

		[PreserveSig]
		[Token(Token = "0x6000848")]
		[Address(RVA = "0x10AA050", Offset = "0x10AA050", VA = "0x10AA050")]
		public static extern int ISteamUserStats_GetAchievementIcon(InteropHelp.UTF8StringHandle pchName);

		[PreserveSig]
		[Token(Token = "0x6000849")]
		[Address(RVA = "0x10AA118", Offset = "0x10AA118", VA = "0x10AA118")]
		public static extern IntPtr ISteamUserStats_GetAchievementDisplayAttribute(InteropHelp.UTF8StringHandle pchName, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x600084A")]
		[Address(RVA = "0x10AA22C", Offset = "0x10AA22C", VA = "0x10AA22C")]
		public static extern bool ISteamUserStats_IndicateAchievementProgress(InteropHelp.UTF8StringHandle pchName, uint nCurProgress, uint nMaxProgress);

		[PreserveSig]
		[Token(Token = "0x600084B")]
		[Address(RVA = "0x10AA310", Offset = "0x10AA310", VA = "0x10AA310")]
		public static extern uint ISteamUserStats_GetNumAchievements();

		[PreserveSig]
		[Token(Token = "0x600084C")]
		[Address(RVA = "0x10AA384", Offset = "0x10AA384", VA = "0x10AA384")]
		public static extern IntPtr ISteamUserStats_GetAchievementName(uint iAchievement);

		[PreserveSig]
		[Token(Token = "0x600084D")]
		[Address(RVA = "0x10AA404", Offset = "0x10AA404", VA = "0x10AA404")]
		public static extern ulong ISteamUserStats_RequestUserStats(CSteamID steamIDUser);

		[PreserveSig]
		[Token(Token = "0x600084E")]
		[Address(RVA = "0x10AA484", Offset = "0x10AA484", VA = "0x10AA484")]
		public static extern bool ISteamUserStats_GetUserStat(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out int pData);

		[PreserveSig]
		[Token(Token = "0x600084F")]
		[Address(RVA = "0x10AA568", Offset = "0x10AA568", VA = "0x10AA568")]
		public static extern bool ISteamUserStats_GetUserStat_(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out float pData);

		[PreserveSig]
		[Token(Token = "0x6000850")]
		[Address(RVA = "0x10AA64C", Offset = "0x10AA64C", VA = "0x10AA64C")]
		public static extern bool ISteamUserStats_GetUserAchievement(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x6000851")]
		[Address(RVA = "0x10AA744", Offset = "0x10AA744", VA = "0x10AA744")]
		public static extern bool ISteamUserStats_GetUserAchievementAndUnlockTime(CSteamID steamIDUser, InteropHelp.UTF8StringHandle pchName, out bool pbAchieved, out uint punUnlockTime);

		[PreserveSig]
		[Token(Token = "0x6000852")]
		[Address(RVA = "0x10AA84C", Offset = "0x10AA84C", VA = "0x10AA84C")]
		public static extern bool ISteamUserStats_ResetAllStats(bool bAchievementsToo);

		[PreserveSig]
		[Token(Token = "0x6000853")]
		[Address(RVA = "0x10AA8D4", Offset = "0x10AA8D4", VA = "0x10AA8D4")]
		public static extern ulong ISteamUserStats_FindOrCreateLeaderboard(InteropHelp.UTF8StringHandle pchLeaderboardName, ELeaderboardSortMethod eLeaderboardSortMethod, ELeaderboardDisplayType eLeaderboardDisplayType);

		[PreserveSig]
		[Token(Token = "0x6000854")]
		[Address(RVA = "0x10AA9B4", Offset = "0x10AA9B4", VA = "0x10AA9B4")]
		public static extern ulong ISteamUserStats_FindLeaderboard(InteropHelp.UTF8StringHandle pchLeaderboardName);

		[PreserveSig]
		[Token(Token = "0x6000855")]
		[Address(RVA = "0x10AAA7C", Offset = "0x10AAA7C", VA = "0x10AAA7C")]
		public static extern IntPtr ISteamUserStats_GetLeaderboardName(SteamLeaderboard_t hSteamLeaderboard);

		[PreserveSig]
		[Token(Token = "0x6000856")]
		[Address(RVA = "0x10AAAFC", Offset = "0x10AAAFC", VA = "0x10AAAFC")]
		public static extern int ISteamUserStats_GetLeaderboardEntryCount(SteamLeaderboard_t hSteamLeaderboard);

		[PreserveSig]
		[Token(Token = "0x6000857")]
		[Address(RVA = "0x10AAB7C", Offset = "0x10AAB7C", VA = "0x10AAB7C")]
		public static extern ELeaderboardSortMethod ISteamUserStats_GetLeaderboardSortMethod(SteamLeaderboard_t hSteamLeaderboard);

		[PreserveSig]
		[Token(Token = "0x6000858")]
		[Address(RVA = "0x10AABFC", Offset = "0x10AABFC", VA = "0x10AABFC")]
		public static extern ELeaderboardDisplayType ISteamUserStats_GetLeaderboardDisplayType(SteamLeaderboard_t hSteamLeaderboard);

		[PreserveSig]
		[Token(Token = "0x6000859")]
		[Address(RVA = "0x10AAC7C", Offset = "0x10AAC7C", VA = "0x10AAC7C")]
		public static extern ulong ISteamUserStats_DownloadLeaderboardEntries(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd);

		[PreserveSig]
		[Token(Token = "0x600085A")]
		[Address(RVA = "0x10AAD24", Offset = "0x10AAD24", VA = "0x10AAD24")]
		public static extern ulong ISteamUserStats_DownloadLeaderboardEntriesForUsers(SteamLeaderboard_t hSteamLeaderboard, [In][Out] CSteamID[] prgUsers, int cUsers);

		[PreserveSig]
		[Token(Token = "0x600085B")]
		[Address(RVA = "0x10AADC4", Offset = "0x10AADC4", VA = "0x10AADC4")]
		public static extern bool ISteamUserStats_GetDownloadedLeaderboardEntry(SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, out LeaderboardEntry_t pLeaderboardEntry, [In][Out] int[] pDetails, int cDetailsMax);

		[PreserveSig]
		[Token(Token = "0x600085C")]
		[Address(RVA = "0x10AAE84", Offset = "0x10AAE84", VA = "0x10AAE84")]
		public static extern ulong ISteamUserStats_UploadLeaderboardScore(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, [In][Out] int[] pScoreDetails, int cScoreDetailsCount);

		[PreserveSig]
		[Token(Token = "0x600085D")]
		[Address(RVA = "0x10AAF3C", Offset = "0x10AAF3C", VA = "0x10AAF3C")]
		public static extern ulong ISteamUserStats_AttachLeaderboardUGC(SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC);

		[PreserveSig]
		[Token(Token = "0x600085E")]
		[Address(RVA = "0x10AAFCC", Offset = "0x10AAFCC", VA = "0x10AAFCC")]
		public static extern ulong ISteamUserStats_GetNumberOfCurrentPlayers();

		[PreserveSig]
		[Token(Token = "0x600085F")]
		[Address(RVA = "0x10AB040", Offset = "0x10AB040", VA = "0x10AB040")]
		public static extern ulong ISteamUserStats_RequestGlobalAchievementPercentages();

		[PreserveSig]
		[Token(Token = "0x6000860")]
		[Address(RVA = "0x10AB0B4", Offset = "0x10AB0B4", VA = "0x10AB0B4")]
		public static extern int ISteamUserStats_GetMostAchievedAchievementInfo(IntPtr pchName, uint unNameBufLen, out float pflPercent, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x6000861")]
		[Address(RVA = "0x10AB170", Offset = "0x10AB170", VA = "0x10AB170")]
		public static extern int ISteamUserStats_GetNextMostAchievedAchievementInfo(int iIteratorPrevious, IntPtr pchName, uint unNameBufLen, out float pflPercent, out bool pbAchieved);

		[PreserveSig]
		[Token(Token = "0x6000862")]
		[Address(RVA = "0x10AB234", Offset = "0x10AB234", VA = "0x10AB234")]
		public static extern bool ISteamUserStats_GetAchievementAchievedPercent(InteropHelp.UTF8StringHandle pchName, out float pflPercent);

		[PreserveSig]
		[Token(Token = "0x6000863")]
		[Address(RVA = "0x10AB310", Offset = "0x10AB310", VA = "0x10AB310")]
		public static extern ulong ISteamUserStats_RequestGlobalStats(int nHistoryDays);

		[PreserveSig]
		[Token(Token = "0x6000864")]
		[Address(RVA = "0x10AB390", Offset = "0x10AB390", VA = "0x10AB390")]
		public static extern bool ISteamUserStats_GetGlobalStat(InteropHelp.UTF8StringHandle pchStatName, out long pData);

		[PreserveSig]
		[Token(Token = "0x6000865")]
		[Address(RVA = "0x10AB46C", Offset = "0x10AB46C", VA = "0x10AB46C")]
		public static extern bool ISteamUserStats_GetGlobalStat_(InteropHelp.UTF8StringHandle pchStatName, out double pData);

		[PreserveSig]
		[Token(Token = "0x6000866")]
		[Address(RVA = "0x10AB548", Offset = "0x10AB548", VA = "0x10AB548")]
		public static extern int ISteamUserStats_GetGlobalStatHistory(InteropHelp.UTF8StringHandle pchStatName, [In][Out] long[] pData, uint cubData);

		[PreserveSig]
		[Token(Token = "0x6000867")]
		[Address(RVA = "0x10AB630", Offset = "0x10AB630", VA = "0x10AB630")]
		public static extern int ISteamUserStats_GetGlobalStatHistory_(InteropHelp.UTF8StringHandle pchStatName, [In][Out] double[] pData, uint cubData);

		[PreserveSig]
		[Token(Token = "0x6000868")]
		[Address(RVA = "0x10AB718", Offset = "0x10AB718", VA = "0x10AB718")]
		public static extern uint ISteamUtils_GetSecondsSinceAppActive();

		[PreserveSig]
		[Token(Token = "0x6000869")]
		[Address(RVA = "0x10AB78C", Offset = "0x10AB78C", VA = "0x10AB78C")]
		public static extern uint ISteamUtils_GetSecondsSinceComputerActive();

		[PreserveSig]
		[Token(Token = "0x600086A")]
		[Address(RVA = "0x10AB800", Offset = "0x10AB800", VA = "0x10AB800")]
		public static extern EUniverse ISteamUtils_GetConnectedUniverse();

		[PreserveSig]
		[Token(Token = "0x600086B")]
		[Address(RVA = "0x10AB874", Offset = "0x10AB874", VA = "0x10AB874")]
		public static extern uint ISteamUtils_GetServerRealTime();

		[PreserveSig]
		[Token(Token = "0x600086C")]
		[Address(RVA = "0x10AB8E8", Offset = "0x10AB8E8", VA = "0x10AB8E8")]
		public static extern IntPtr ISteamUtils_GetIPCountry();

		[PreserveSig]
		[Token(Token = "0x600086D")]
		[Address(RVA = "0x10AB95C", Offset = "0x10AB95C", VA = "0x10AB95C")]
		public static extern bool ISteamUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight);

		[PreserveSig]
		[Token(Token = "0x600086E")]
		[Address(RVA = "0x10AB9FC", Offset = "0x10AB9FC", VA = "0x10AB9FC")]
		public static extern bool ISteamUtils_GetImageRGBA(int iImage, [In][Out] byte[] pubDest, int nDestBufferSize);

		[PreserveSig]
		[Token(Token = "0x600086F")]
		[Address(RVA = "0x10ABAA4", Offset = "0x10ABAA4", VA = "0x10ABAA4")]
		public static extern bool ISteamUtils_GetCSERIPPort(out uint unIP, out ushort usPort);

		[PreserveSig]
		[Token(Token = "0x6000870")]
		[Address(RVA = "0x10ABB3C", Offset = "0x10ABB3C", VA = "0x10ABB3C")]
		public static extern byte ISteamUtils_GetCurrentBatteryPower();

		[PreserveSig]
		[Token(Token = "0x6000871")]
		[Address(RVA = "0x10ABBB0", Offset = "0x10ABBB0", VA = "0x10ABBB0")]
		public static extern uint ISteamUtils_GetAppID();

		[PreserveSig]
		[Token(Token = "0x6000872")]
		[Address(RVA = "0x10ABC24", Offset = "0x10ABC24", VA = "0x10ABC24")]
		public static extern void ISteamUtils_SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition);

		[PreserveSig]
		[Token(Token = "0x6000873")]
		[Address(RVA = "0x10ABCA4", Offset = "0x10ABCA4", VA = "0x10ABCA4")]
		public static extern bool ISteamUtils_IsAPICallCompleted(SteamAPICall_t hSteamAPICall, out bool pbFailed);

		[PreserveSig]
		[Token(Token = "0x6000874")]
		[Address(RVA = "0x10ABD50", Offset = "0x10ABD50", VA = "0x10ABD50")]
		public static extern ESteamAPICallFailure ISteamUtils_GetAPICallFailureReason(SteamAPICall_t hSteamAPICall);

		[PreserveSig]
		[Token(Token = "0x6000875")]
		[Address(RVA = "0x10ABDD0", Offset = "0x10ABDD0", VA = "0x10ABDD0")]
		public static extern bool ISteamUtils_GetAPICallResult(SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, out bool pbFailed);

		[PreserveSig]
		[Token(Token = "0x6000876")]
		[Address(RVA = "0x10ABE9C", Offset = "0x10ABE9C", VA = "0x10ABE9C")]
		public static extern void ISteamUtils_RunFrame();

		[PreserveSig]
		[Token(Token = "0x6000877")]
		[Address(RVA = "0x10ABF0C", Offset = "0x10ABF0C", VA = "0x10ABF0C")]
		public static extern uint ISteamUtils_GetIPCCallCount();

		[PreserveSig]
		[Token(Token = "0x6000878")]
		[Address(RVA = "0x10ABF80", Offset = "0x10ABF80", VA = "0x10ABF80")]
		public static extern void ISteamUtils_SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction);

		[PreserveSig]
		[Token(Token = "0x6000879")]
		[Address(RVA = "0x10AC004", Offset = "0x10AC004", VA = "0x10AC004")]
		public static extern bool ISteamUtils_IsOverlayEnabled();

		[PreserveSig]
		[Token(Token = "0x600087A")]
		[Address(RVA = "0x10AC080", Offset = "0x10AC080", VA = "0x10AC080")]
		public static extern bool ISteamUtils_BOverlayNeedsPresent();

		[PreserveSig]
		[Token(Token = "0x600087B")]
		[Address(RVA = "0x10AC0FC", Offset = "0x10AC0FC", VA = "0x10AC0FC")]
		public static extern ulong ISteamUtils_CheckFileSignature(InteropHelp.UTF8StringHandle szFileName);

		[PreserveSig]
		[Token(Token = "0x600087C")]
		[Address(RVA = "0x10AC1C4", Offset = "0x10AC1C4", VA = "0x10AC1C4")]
		public static extern bool ISteamUtils_ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, InteropHelp.UTF8StringHandle pchDescription, uint unCharMax, InteropHelp.UTF8StringHandle pchExistingText);

		[PreserveSig]
		[Token(Token = "0x600087D")]
		[Address(RVA = "0x10AC304", Offset = "0x10AC304", VA = "0x10AC304")]
		public static extern uint ISteamUtils_GetEnteredGamepadTextLength();

		[PreserveSig]
		[Token(Token = "0x600087E")]
		[Address(RVA = "0x10AC378", Offset = "0x10AC378", VA = "0x10AC378")]
		public static extern bool ISteamUtils_GetEnteredGamepadTextInput(IntPtr pchText, uint cchText);

		[PreserveSig]
		[Token(Token = "0x600087F")]
		[Address(RVA = "0x10AC410", Offset = "0x10AC410", VA = "0x10AC410")]
		public static extern IntPtr ISteamUtils_GetSteamUILanguage();

		[PreserveSig]
		[Token(Token = "0x6000880")]
		[Address(RVA = "0x10AC484", Offset = "0x10AC484", VA = "0x10AC484")]
		public static extern bool ISteamUtils_IsSteamRunningInVR();

		[PreserveSig]
		[Token(Token = "0x6000881")]
		[Address(RVA = "0x10AC500", Offset = "0x10AC500", VA = "0x10AC500")]
		public static extern void ISteamUtils_SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset);

		[PreserveSig]
		[Token(Token = "0x6000882")]
		[Address(RVA = "0x10AC590", Offset = "0x10AC590", VA = "0x10AC590")]
		public static extern void ISteamVideo_GetVideoURL(AppId_t unVideoAppID);

		[PreserveSig]
		[Token(Token = "0x6000883")]
		[Address(RVA = "0x10AC610", Offset = "0x10AC610", VA = "0x10AC610")]
		public static extern bool ISteamVideo_IsBroadcasting(out int pnNumViewers);

		[PreserveSig]
		[Token(Token = "0x6000884")]
		[Address(RVA = "0x10AC698", Offset = "0x10AC698", VA = "0x10AC698")]
		public static extern uint ISteamGameServerHTTP_CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, InteropHelp.UTF8StringHandle pchAbsoluteURL);

		[PreserveSig]
		[Token(Token = "0x6000885")]
		[Address(RVA = "0x10AC770", Offset = "0x10AC770", VA = "0x10AC770")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestContextValue(HTTPRequestHandle hRequest, ulong ulContextValue);

		[PreserveSig]
		[Token(Token = "0x6000886")]
		[Address(RVA = "0x10AC808", Offset = "0x10AC808", VA = "0x10AC808")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint unTimeoutSeconds);

		[PreserveSig]
		[Token(Token = "0x6000887")]
		[Address(RVA = "0x10AC8A0", Offset = "0x10AC8A0", VA = "0x10AC8A0")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, InteropHelp.UTF8StringHandle pchHeaderValue);

		[PreserveSig]
		[Token(Token = "0x6000888")]
		[Address(RVA = "0x10AC9C8", Offset = "0x10AC9C8", VA = "0x10AC9C8")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchParamName, InteropHelp.UTF8StringHandle pchParamValue);

		[PreserveSig]
		[Token(Token = "0x6000889")]
		[Address(RVA = "0x10ACAF0", Offset = "0x10ACAF0", VA = "0x10ACAF0")]
		public static extern bool ISteamGameServerHTTP_SendHTTPRequest(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle);

		[PreserveSig]
		[Token(Token = "0x600088A")]
		[Address(RVA = "0x10ACB88", Offset = "0x10ACB88", VA = "0x10ACB88")]
		public static extern bool ISteamGameServerHTTP_SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle);

		[PreserveSig]
		[Token(Token = "0x600088B")]
		[Address(RVA = "0x10ACC20", Offset = "0x10ACC20", VA = "0x10ACC20")]
		public static extern bool ISteamGameServerHTTP_DeferHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x600088C")]
		[Address(RVA = "0x10ACCA8", Offset = "0x10ACCA8", VA = "0x10ACCA8")]
		public static extern bool ISteamGameServerHTTP_PrioritizeHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x600088D")]
		[Address(RVA = "0x10ACD30", Offset = "0x10ACD30", VA = "0x10ACD30")]
		public static extern bool ISteamGameServerHTTP_GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, out uint unResponseHeaderSize);

		[PreserveSig]
		[Token(Token = "0x600088E")]
		[Address(RVA = "0x10ACE14", Offset = "0x10ACE14", VA = "0x10ACE14")]
		public static extern bool ISteamGameServerHTTP_GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchHeaderName, [In][Out] byte[] pHeaderValueBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x600088F")]
		[Address(RVA = "0x10ACF10", Offset = "0x10ACF10", VA = "0x10ACF10")]
		public static extern bool ISteamGameServerHTTP_GetHTTPResponseBodySize(HTTPRequestHandle hRequest, out uint unBodySize);

		[PreserveSig]
		[Token(Token = "0x6000890")]
		[Address(RVA = "0x10ACFA8", Offset = "0x10ACFA8", VA = "0x10ACFA8")]
		public static extern bool ISteamGameServerHTTP_GetHTTPResponseBodyData(HTTPRequestHandle hRequest, [In][Out] byte[] pBodyDataBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000891")]
		[Address(RVA = "0x10AD050", Offset = "0x10AD050", VA = "0x10AD050")]
		public static extern bool ISteamGameServerHTTP_GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint cOffset, [In][Out] byte[] pBodyDataBuffer, uint unBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000892")]
		[Address(RVA = "0x10AD108", Offset = "0x10AD108", VA = "0x10AD108")]
		public static extern bool ISteamGameServerHTTP_ReleaseHTTPRequest(HTTPRequestHandle hRequest);

		[PreserveSig]
		[Token(Token = "0x6000893")]
		[Address(RVA = "0x10AD190", Offset = "0x10AD190", VA = "0x10AD190")]
		public static extern bool ISteamGameServerHTTP_GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, out float pflPercentOut);

		[PreserveSig]
		[Token(Token = "0x6000894")]
		[Address(RVA = "0x10AD228", Offset = "0x10AD228", VA = "0x10AD228")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchContentType, [In][Out] byte[] pubBody, uint unBodyLen);

		[PreserveSig]
		[Token(Token = "0x6000895")]
		[Address(RVA = "0x10AD324", Offset = "0x10AD324", VA = "0x10AD324")]
		public static extern uint ISteamGameServerHTTP_CreateCookieContainer(bool bAllowResponsesToModify);

		[PreserveSig]
		[Token(Token = "0x6000896")]
		[Address(RVA = "0x10AD3A4", Offset = "0x10AD3A4", VA = "0x10AD3A4")]
		public static extern bool ISteamGameServerHTTP_ReleaseCookieContainer(HTTPCookieContainerHandle hCookieContainer);

		[PreserveSig]
		[Token(Token = "0x6000897")]
		[Address(RVA = "0x10AD42C", Offset = "0x10AD42C", VA = "0x10AD42C")]
		public static extern bool ISteamGameServerHTTP_SetCookie(HTTPCookieContainerHandle hCookieContainer, InteropHelp.UTF8StringHandle pchHost, InteropHelp.UTF8StringHandle pchUrl, InteropHelp.UTF8StringHandle pchCookie);

		[PreserveSig]
		[Token(Token = "0x6000898")]
		[Address(RVA = "0x10AD5A0", Offset = "0x10AD5A0", VA = "0x10AD5A0")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestCookieContainer(HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer);

		[PreserveSig]
		[Token(Token = "0x6000899")]
		[Address(RVA = "0x10AD638", Offset = "0x10AD638", VA = "0x10AD638")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestUserAgentInfo(HTTPRequestHandle hRequest, InteropHelp.UTF8StringHandle pchUserAgentInfo);

		[PreserveSig]
		[Token(Token = "0x600089A")]
		[Address(RVA = "0x10AD714", Offset = "0x10AD714", VA = "0x10AD714")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestRequiresVerifiedCertificate(HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate);

		[PreserveSig]
		[Token(Token = "0x600089B")]
		[Address(RVA = "0x10AD7AC", Offset = "0x10AD7AC", VA = "0x10AD7AC")]
		public static extern bool ISteamGameServerHTTP_SetHTTPRequestAbsoluteTimeoutMS(HTTPRequestHandle hRequest, uint unMilliseconds);

		[PreserveSig]
		[Token(Token = "0x600089C")]
		[Address(RVA = "0x10AD844", Offset = "0x10AD844", VA = "0x10AD844")]
		public static extern bool ISteamGameServerHTTP_GetHTTPRequestWasTimedOut(HTTPRequestHandle hRequest, out bool pbWasTimedOut);

		[PreserveSig]
		[Token(Token = "0x600089D")]
		[Address(RVA = "0x10AD8F0", Offset = "0x10AD8F0", VA = "0x10AD8F0")]
		public static extern EResult ISteamGameServerInventory_GetResultStatus(SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x600089E")]
		[Address(RVA = "0x10AD970", Offset = "0x10AD970", VA = "0x10AD970")]
		public static extern bool ISteamGameServerInventory_GetResultItems(SteamInventoryResult_t resultHandle, [In][Out] SteamItemDetails_t[] pOutItemsArray, ref uint punOutItemsArraySize);

		[PreserveSig]
		[Token(Token = "0x600089F")]
		[Address(RVA = "0x10ADA18", Offset = "0x10ADA18", VA = "0x10ADA18")]
		public static extern uint ISteamGameServerInventory_GetResultTimestamp(SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x60008A0")]
		[Address(RVA = "0x10ADA98", Offset = "0x10ADA98", VA = "0x10ADA98")]
		public static extern bool ISteamGameServerInventory_CheckResultSteamID(SteamInventoryResult_t resultHandle, CSteamID steamIDExpected);

		[PreserveSig]
		[Token(Token = "0x60008A1")]
		[Address(RVA = "0x10ADB30", Offset = "0x10ADB30", VA = "0x10ADB30")]
		public static extern void ISteamGameServerInventory_DestroyResult(SteamInventoryResult_t resultHandle);

		[PreserveSig]
		[Token(Token = "0x60008A2")]
		[Address(RVA = "0x10ADBB0", Offset = "0x10ADBB0", VA = "0x10ADBB0")]
		public static extern bool ISteamGameServerInventory_GetAllItems(out SteamInventoryResult_t pResultHandle);

		[PreserveSig]
		[Token(Token = "0x60008A3")]
		[Address(RVA = "0x10ADC38", Offset = "0x10ADC38", VA = "0x10ADC38")]
		public static extern bool ISteamGameServerInventory_GetItemsByID(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemInstanceID_t[] pInstanceIDs, uint unCountInstanceIDs);

		[PreserveSig]
		[Token(Token = "0x60008A4")]
		[Address(RVA = "0x10ADCE0", Offset = "0x10ADCE0", VA = "0x10ADCE0")]
		public static extern bool ISteamGameServerInventory_SerializeResult(SteamInventoryResult_t resultHandle, [In][Out] byte[] pOutBuffer, out uint punOutBufferSize);

		[PreserveSig]
		[Token(Token = "0x60008A5")]
		[Address(RVA = "0x10ADD88", Offset = "0x10ADD88", VA = "0x10ADD88")]
		public static extern bool ISteamGameServerInventory_DeserializeResult(out SteamInventoryResult_t pOutResultHandle, [In][Out] byte[] pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE);

		[PreserveSig]
		[Token(Token = "0x60008A6")]
		[Address(RVA = "0x10ADE40", Offset = "0x10ADE40", VA = "0x10ADE40")]
		public static extern bool ISteamGameServerInventory_GenerateItems(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayItemDefs, [In][Out] uint[] punArrayQuantity, uint unArrayLength);

		[PreserveSig]
		[Token(Token = "0x60008A7")]
		[Address(RVA = "0x10ADF00", Offset = "0x10ADF00", VA = "0x10ADF00")]
		public static extern bool ISteamGameServerInventory_GrantPromoItems(out SteamInventoryResult_t pResultHandle);

		[PreserveSig]
		[Token(Token = "0x60008A8")]
		[Address(RVA = "0x10ADF88", Offset = "0x10ADF88", VA = "0x10ADF88")]
		public static extern bool ISteamGameServerInventory_AddPromoItem(out SteamInventoryResult_t pResultHandle, SteamItemDef_t itemDef);

		[PreserveSig]
		[Token(Token = "0x60008A9")]
		[Address(RVA = "0x10AE020", Offset = "0x10AE020", VA = "0x10AE020")]
		public static extern bool ISteamGameServerInventory_AddPromoItems(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayItemDefs, uint unArrayLength);

		[PreserveSig]
		[Token(Token = "0x60008AA")]
		[Address(RVA = "0x10AE0C8", Offset = "0x10AE0C8", VA = "0x10AE0C8")]
		public static extern bool ISteamGameServerInventory_ConsumeItem(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemConsume, uint unQuantity);

		[PreserveSig]
		[Token(Token = "0x60008AB")]
		[Address(RVA = "0x10AE168", Offset = "0x10AE168", VA = "0x10AE168")]
		public static extern bool ISteamGameServerInventory_ExchangeItems(out SteamInventoryResult_t pResultHandle, [In][Out] SteamItemDef_t[] pArrayGenerate, [In][Out] uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, [In][Out] SteamItemInstanceID_t[] pArrayDestroy, [In][Out] uint[] punArrayDestroyQuantity, uint unArrayDestroyLength);

		[PreserveSig]
		[Token(Token = "0x60008AC")]
		[Address(RVA = "0x10AE258", Offset = "0x10AE258", VA = "0x10AE258")]
		public static extern bool ISteamGameServerInventory_TransferItemQuantity(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemIdSource, uint unQuantity, SteamItemInstanceID_t itemIdDest);

		[PreserveSig]
		[Token(Token = "0x60008AD")]
		[Address(RVA = "0x10AE308", Offset = "0x10AE308", VA = "0x10AE308")]
		public static extern void ISteamGameServerInventory_SendItemDropHeartbeat();

		[PreserveSig]
		[Token(Token = "0x60008AE")]
		[Address(RVA = "0x10AE378", Offset = "0x10AE378", VA = "0x10AE378")]
		public static extern bool ISteamGameServerInventory_TriggerItemDrop(out SteamInventoryResult_t pResultHandle, SteamItemDef_t dropListDefinition);

		[PreserveSig]
		[Token(Token = "0x60008AF")]
		[Address(RVA = "0x10AE410", Offset = "0x10AE410", VA = "0x10AE410")]
		public static extern bool ISteamGameServerInventory_TradeItems(out SteamInventoryResult_t pResultHandle, CSteamID steamIDTradePartner, [In][Out] SteamItemInstanceID_t[] pArrayGive, [In][Out] uint[] pArrayGiveQuantity, uint nArrayGiveLength, [In][Out] SteamItemInstanceID_t[] pArrayGet, [In][Out] uint[] pArrayGetQuantity, uint nArrayGetLength);

		[PreserveSig]
		[Token(Token = "0x60008B0")]
		[Address(RVA = "0x10AE510", Offset = "0x10AE510", VA = "0x10AE510")]
		public static extern bool ISteamGameServerInventory_LoadItemDefinitions();

		[PreserveSig]
		[Token(Token = "0x60008B1")]
		[Address(RVA = "0x10AE58C", Offset = "0x10AE58C", VA = "0x10AE58C")]
		public static extern bool ISteamGameServerInventory_GetItemDefinitionIDs([In][Out] SteamItemDef_t[] pItemDefIDs, out uint punItemDefIDsArraySize);

		[PreserveSig]
		[Token(Token = "0x60008B2")]
		[Address(RVA = "0x10AE62C", Offset = "0x10AE62C", VA = "0x10AE62C")]
		public static extern bool ISteamGameServerInventory_GetItemDefinitionProperty(SteamItemDef_t iDefinition, InteropHelp.UTF8StringHandle pchPropertyName, IntPtr pchValueBuffer, ref uint punValueBufferSize);

		[PreserveSig]
		[Token(Token = "0x60008B3")]
		[Address(RVA = "0x10AE720", Offset = "0x10AE720", VA = "0x10AE720")]
		public static extern bool ISteamGameServerNetworking_SendP2PPacket(CSteamID steamIDRemote, [In][Out] byte[] pubData, uint cubData, EP2PSend eP2PSendType, int nChannel);

		[PreserveSig]
		[Token(Token = "0x60008B4")]
		[Address(RVA = "0x10AE7E0", Offset = "0x10AE7E0", VA = "0x10AE7E0")]
		public static extern bool ISteamGameServerNetworking_IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel);

		[PreserveSig]
		[Token(Token = "0x60008B5")]
		[Address(RVA = "0x10AE878", Offset = "0x10AE878", VA = "0x10AE878")]
		public static extern bool ISteamGameServerNetworking_ReadP2PPacket([In][Out] byte[] pubDest, uint cubDest, out uint pcubMsgSize, out CSteamID psteamIDRemote, int nChannel);

		[PreserveSig]
		[Token(Token = "0x60008B6")]
		[Address(RVA = "0x10AE938", Offset = "0x10AE938", VA = "0x10AE938")]
		public static extern bool ISteamGameServerNetworking_AcceptP2PSessionWithUser(CSteamID steamIDRemote);

		[PreserveSig]
		[Token(Token = "0x60008B7")]
		[Address(RVA = "0x10AE9C0", Offset = "0x10AE9C0", VA = "0x10AE9C0")]
		public static extern bool ISteamGameServerNetworking_CloseP2PSessionWithUser(CSteamID steamIDRemote);

		[PreserveSig]
		[Token(Token = "0x60008B8")]
		[Address(RVA = "0x10AEA48", Offset = "0x10AEA48", VA = "0x10AEA48")]
		public static extern bool ISteamGameServerNetworking_CloseP2PChannelWithUser(CSteamID steamIDRemote, int nChannel);

		[PreserveSig]
		[Token(Token = "0x60008B9")]
		[Address(RVA = "0x10AEAE0", Offset = "0x10AEAE0", VA = "0x10AEAE0")]
		public static extern bool ISteamGameServerNetworking_GetP2PSessionState(CSteamID steamIDRemote, out P2PSessionState_t pConnectionState);

		[PreserveSig]
		[Token(Token = "0x60008BA")]
		[Address(RVA = "0x10AEB78", Offset = "0x10AEB78", VA = "0x10AEB78")]
		public static extern bool ISteamGameServerNetworking_AllowP2PPacketRelay(bool bAllow);

		[PreserveSig]
		[Token(Token = "0x60008BB")]
		[Address(RVA = "0x10AEC00", Offset = "0x10AEC00", VA = "0x10AEC00")]
		public static extern uint ISteamGameServerNetworking_CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay);

		[PreserveSig]
		[Token(Token = "0x60008BC")]
		[Address(RVA = "0x10AECA8", Offset = "0x10AECA8", VA = "0x10AECA8")]
		public static extern uint ISteamGameServerNetworking_CreateP2PConnectionSocket(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay);

		[PreserveSig]
		[Token(Token = "0x60008BD")]
		[Address(RVA = "0x10AED50", Offset = "0x10AED50", VA = "0x10AED50")]
		public static extern uint ISteamGameServerNetworking_CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec);

		[PreserveSig]
		[Token(Token = "0x60008BE")]
		[Address(RVA = "0x10AEDE8", Offset = "0x10AEDE8", VA = "0x10AEDE8")]
		public static extern bool ISteamGameServerNetworking_DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd);

		[PreserveSig]
		[Token(Token = "0x60008BF")]
		[Address(RVA = "0x10AEE80", Offset = "0x10AEE80", VA = "0x10AEE80")]
		public static extern bool ISteamGameServerNetworking_DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd);

		[PreserveSig]
		[Token(Token = "0x60008C0")]
		[Address(RVA = "0x10AEF18", Offset = "0x10AEF18", VA = "0x10AEF18")]
		public static extern bool ISteamGameServerNetworking_SendDataOnSocket(SNetSocket_t hSocket, IntPtr pubData, uint cubData, bool bReliable);

		[PreserveSig]
		[Token(Token = "0x60008C1")]
		[Address(RVA = "0x10AEFC8", Offset = "0x10AEFC8", VA = "0x10AEFC8")]
		public static extern bool ISteamGameServerNetworking_IsDataAvailableOnSocket(SNetSocket_t hSocket, out uint pcubMsgSize);

		[PreserveSig]
		[Token(Token = "0x60008C2")]
		[Address(RVA = "0x10AF060", Offset = "0x10AF060", VA = "0x10AF060")]
		public static extern bool ISteamGameServerNetworking_RetrieveDataFromSocket(SNetSocket_t hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize);

		[PreserveSig]
		[Token(Token = "0x60008C3")]
		[Address(RVA = "0x10AF110", Offset = "0x10AF110", VA = "0x10AF110")]
		public static extern bool ISteamGameServerNetworking_IsDataAvailable(SNetListenSocket_t hListenSocket, out uint pcubMsgSize, out SNetSocket_t phSocket);

		[PreserveSig]
		[Token(Token = "0x60008C4")]
		[Address(RVA = "0x10AF1B0", Offset = "0x10AF1B0", VA = "0x10AF1B0")]
		public static extern bool ISteamGameServerNetworking_RetrieveData(SNetListenSocket_t hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out SNetSocket_t phSocket);

		[PreserveSig]
		[Token(Token = "0x60008C5")]
		[Address(RVA = "0x10AF268", Offset = "0x10AF268", VA = "0x10AF268")]
		public static extern bool ISteamGameServerNetworking_GetSocketInfo(SNetSocket_t hSocket, out CSteamID pSteamIDRemote, out int peSocketStatus, out uint punIPRemote, out ushort punPortRemote);

		[PreserveSig]
		[Token(Token = "0x60008C6")]
		[Address(RVA = "0x10AF320", Offset = "0x10AF320", VA = "0x10AF320")]
		public static extern bool ISteamGameServerNetworking_GetListenSocketInfo(SNetListenSocket_t hListenSocket, out uint pnIP, out ushort pnPort);

		[PreserveSig]
		[Token(Token = "0x60008C7")]
		[Address(RVA = "0x10AF3C0", Offset = "0x10AF3C0", VA = "0x10AF3C0")]
		public static extern ESNetSocketConnectionType ISteamGameServerNetworking_GetSocketConnectionType(SNetSocket_t hSocket);

		[PreserveSig]
		[Token(Token = "0x60008C8")]
		[Address(RVA = "0x10AF440", Offset = "0x10AF440", VA = "0x10AF440")]
		public static extern int ISteamGameServerNetworking_GetMaxPacketSize(SNetSocket_t hSocket);

		[PreserveSig]
		[Token(Token = "0x60008C9")]
		[Address(RVA = "0x10AF4C0", Offset = "0x10AF4C0", VA = "0x10AF4C0")]
		public static extern ulong ISteamGameServerUGC_CreateQueryUserUGCRequest(AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage);

		[PreserveSig]
		[Token(Token = "0x60008CA")]
		[Address(RVA = "0x10AF588", Offset = "0x10AF588", VA = "0x10AF588")]
		public static extern ulong ISteamGameServerUGC_CreateQueryAllUGCRequest(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage);

		[PreserveSig]
		[Token(Token = "0x60008CB")]
		[Address(RVA = "0x10AF638", Offset = "0x10AF638", VA = "0x10AF638")]
		public static extern ulong ISteamGameServerUGC_CreateQueryUGCDetailsRequest([In][Out] PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs);

		[PreserveSig]
		[Token(Token = "0x60008CC")]
		[Address(RVA = "0x10AF6D0", Offset = "0x10AF6D0", VA = "0x10AF6D0")]
		public static extern ulong ISteamGameServerUGC_SendQueryUGCRequest(UGCQueryHandle_t handle);

		[PreserveSig]
		[Token(Token = "0x60008CD")]
		[Address(RVA = "0x10AF750", Offset = "0x10AF750", VA = "0x10AF750")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCResult(UGCQueryHandle_t handle, uint index, out SteamUGCDetails_t pDetails);

		[PreserveSig]
		[Token(Token = "0x60008CE")]
		[Address(RVA = "0x10AF854", Offset = "0x10AF854", VA = "0x10AF854")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCPreviewURL(UGCQueryHandle_t handle, uint index, IntPtr pchURL, uint cchURLSize);

		[PreserveSig]
		[Token(Token = "0x60008CF")]
		[Address(RVA = "0x10AF904", Offset = "0x10AF904", VA = "0x10AF904")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCMetadata(UGCQueryHandle_t handle, uint index, IntPtr pchMetadata, uint cchMetadatasize);

		[PreserveSig]
		[Token(Token = "0x60008D0")]
		[Address(RVA = "0x10AF9B4", Offset = "0x10AF9B4", VA = "0x10AF9B4")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCChildren(UGCQueryHandle_t handle, uint index, [In][Out] PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries);

		[PreserveSig]
		[Token(Token = "0x60008D1")]
		[Address(RVA = "0x10AFA6C", Offset = "0x10AFA6C", VA = "0x10AFA6C")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCStatistic(UGCQueryHandle_t handle, uint index, EItemStatistic eStatType, out uint pStatValue);

		[PreserveSig]
		[Token(Token = "0x60008D2")]
		[Address(RVA = "0x10AFB1C", Offset = "0x10AFB1C", VA = "0x10AFB1C")]
		public static extern uint ISteamGameServerUGC_GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, uint index);

		[PreserveSig]
		[Token(Token = "0x60008D3")]
		[Address(RVA = "0x10AFBAC", Offset = "0x10AFBAC", VA = "0x10AFBAC")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, uint index, uint previewIndex, IntPtr pchURLOrVideoID, uint cchURLSize, out bool pbIsImage);

		[PreserveSig]
		[Token(Token = "0x60008D4")]
		[Address(RVA = "0x10AFC88", Offset = "0x10AFC88", VA = "0x10AFC88")]
		public static extern uint ISteamGameServerUGC_GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, uint index);

		[PreserveSig]
		[Token(Token = "0x60008D5")]
		[Address(RVA = "0x10AFD18", Offset = "0x10AFD18", VA = "0x10AFD18")]
		public static extern bool ISteamGameServerUGC_GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, uint index, uint keyValueTagIndex, IntPtr pchKey, uint cchKeySize, IntPtr pchValue, uint cchValueSize);

		[PreserveSig]
		[Token(Token = "0x60008D6")]
		[Address(RVA = "0x10AFDE8", Offset = "0x10AFDE8", VA = "0x10AFDE8")]
		public static extern bool ISteamGameServerUGC_ReleaseQueryUGCRequest(UGCQueryHandle_t handle);

		[PreserveSig]
		[Token(Token = "0x60008D7")]
		[Address(RVA = "0x10AFE70", Offset = "0x10AFE70", VA = "0x10AFE70")]
		public static extern bool ISteamGameServerUGC_AddRequiredTag(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pTagName);

		[PreserveSig]
		[Token(Token = "0x60008D8")]
		[Address(RVA = "0x10AFF4C", Offset = "0x10AFF4C", VA = "0x10AFF4C")]
		public static extern bool ISteamGameServerUGC_AddExcludedTag(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pTagName);

		[PreserveSig]
		[Token(Token = "0x60008D9")]
		[Address(RVA = "0x10B0028", Offset = "0x10B0028", VA = "0x10B0028")]
		public static extern bool ISteamGameServerUGC_SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags);

		[PreserveSig]
		[Token(Token = "0x60008DA")]
		[Address(RVA = "0x10B00C0", Offset = "0x10B00C0", VA = "0x10B00C0")]
		public static extern bool ISteamGameServerUGC_SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription);

		[PreserveSig]
		[Token(Token = "0x60008DB")]
		[Address(RVA = "0x10B0158", Offset = "0x10B0158", VA = "0x10B0158")]
		public static extern bool ISteamGameServerUGC_SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata);

		[PreserveSig]
		[Token(Token = "0x60008DC")]
		[Address(RVA = "0x10B01F0", Offset = "0x10B01F0", VA = "0x10B01F0")]
		public static extern bool ISteamGameServerUGC_SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren);

		[PreserveSig]
		[Token(Token = "0x60008DD")]
		[Address(RVA = "0x10B0288", Offset = "0x10B0288", VA = "0x10B0288")]
		public static extern bool ISteamGameServerUGC_SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews);

		[PreserveSig]
		[Token(Token = "0x60008DE")]
		[Address(RVA = "0x10B0320", Offset = "0x10B0320", VA = "0x10B0320")]
		public static extern bool ISteamGameServerUGC_SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly);

		[PreserveSig]
		[Token(Token = "0x60008DF")]
		[Address(RVA = "0x10B03B8", Offset = "0x10B03B8", VA = "0x10B03B8")]
		public static extern bool ISteamGameServerUGC_SetLanguage(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pchLanguage);

		[PreserveSig]
		[Token(Token = "0x60008E0")]
		[Address(RVA = "0x10B0494", Offset = "0x10B0494", VA = "0x10B0494")]
		public static extern bool ISteamGameServerUGC_SetAllowCachedResponse(UGCQueryHandle_t handle, uint unMaxAgeSeconds);

		[PreserveSig]
		[Token(Token = "0x60008E1")]
		[Address(RVA = "0x10B052C", Offset = "0x10B052C", VA = "0x10B052C")]
		public static extern bool ISteamGameServerUGC_SetCloudFileNameFilter(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pMatchCloudFileName);

		[PreserveSig]
		[Token(Token = "0x60008E2")]
		[Address(RVA = "0x10B0608", Offset = "0x10B0608", VA = "0x10B0608")]
		public static extern bool ISteamGameServerUGC_SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag);

		[PreserveSig]
		[Token(Token = "0x60008E3")]
		[Address(RVA = "0x10B06A0", Offset = "0x10B06A0", VA = "0x10B06A0")]
		public static extern bool ISteamGameServerUGC_SetSearchText(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pSearchText);

		[PreserveSig]
		[Token(Token = "0x60008E4")]
		[Address(RVA = "0x10B077C", Offset = "0x10B077C", VA = "0x10B077C")]
		public static extern bool ISteamGameServerUGC_SetRankedByTrendDays(UGCQueryHandle_t handle, uint unDays);

		[PreserveSig]
		[Token(Token = "0x60008E5")]
		[Address(RVA = "0x10B0814", Offset = "0x10B0814", VA = "0x10B0814")]
		public static extern bool ISteamGameServerUGC_AddRequiredKeyValueTag(UGCQueryHandle_t handle, InteropHelp.UTF8StringHandle pKey, InteropHelp.UTF8StringHandle pValue);

		[PreserveSig]
		[Token(Token = "0x60008E6")]
		[Address(RVA = "0x10B093C", Offset = "0x10B093C", VA = "0x10B093C")]
		public static extern ulong ISteamGameServerUGC_RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint unMaxAgeSeconds);

		[PreserveSig]
		[Token(Token = "0x60008E7")]
		[Address(RVA = "0x10B09CC", Offset = "0x10B09CC", VA = "0x10B09CC")]
		public static extern ulong ISteamGameServerUGC_CreateItem(AppId_t nConsumerAppId, EWorkshopFileType eFileType);

		[PreserveSig]
		[Token(Token = "0x60008E8")]
		[Address(RVA = "0x10B0A5C", Offset = "0x10B0A5C", VA = "0x10B0A5C")]
		public static extern ulong ISteamGameServerUGC_StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60008E9")]
		[Address(RVA = "0x10B0AEC", Offset = "0x10B0AEC", VA = "0x10B0AEC")]
		public static extern bool ISteamGameServerUGC_SetItemTitle(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchTitle);

		[PreserveSig]
		[Token(Token = "0x60008EA")]
		[Address(RVA = "0x10B0BC8", Offset = "0x10B0BC8", VA = "0x10B0BC8")]
		public static extern bool ISteamGameServerUGC_SetItemDescription(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchDescription);

		[PreserveSig]
		[Token(Token = "0x60008EB")]
		[Address(RVA = "0x10B0CA4", Offset = "0x10B0CA4", VA = "0x10B0CA4")]
		public static extern bool ISteamGameServerUGC_SetItemUpdateLanguage(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchLanguage);

		[PreserveSig]
		[Token(Token = "0x60008EC")]
		[Address(RVA = "0x10B0D80", Offset = "0x10B0D80", VA = "0x10B0D80")]
		public static extern bool ISteamGameServerUGC_SetItemMetadata(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchMetaData);

		[PreserveSig]
		[Token(Token = "0x60008ED")]
		[Address(RVA = "0x10B0E5C", Offset = "0x10B0E5C", VA = "0x10B0E5C")]
		public static extern bool ISteamGameServerUGC_SetItemVisibility(UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility);

		[PreserveSig]
		[Token(Token = "0x60008EE")]
		[Address(RVA = "0x10B0EF4", Offset = "0x10B0EF4", VA = "0x10B0EF4")]
		public static extern bool ISteamGameServerUGC_SetItemTags(UGCUpdateHandle_t updateHandle, IntPtr pTags);

		[PreserveSig]
		[Token(Token = "0x60008EF")]
		[Address(RVA = "0x10B0F8C", Offset = "0x10B0F8C", VA = "0x10B0F8C")]
		public static extern bool ISteamGameServerUGC_SetItemContent(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszContentFolder);

		[PreserveSig]
		[Token(Token = "0x60008F0")]
		[Address(RVA = "0x10B1068", Offset = "0x10B1068", VA = "0x10B1068")]
		public static extern bool ISteamGameServerUGC_SetItemPreview(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pszPreviewFile);

		[PreserveSig]
		[Token(Token = "0x60008F1")]
		[Address(RVA = "0x10B1144", Offset = "0x10B1144", VA = "0x10B1144")]
		public static extern bool ISteamGameServerUGC_RemoveItemKeyValueTags(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchKey);

		[PreserveSig]
		[Token(Token = "0x60008F2")]
		[Address(RVA = "0x10B1220", Offset = "0x10B1220", VA = "0x10B1220")]
		public static extern bool ISteamGameServerUGC_AddItemKeyValueTag(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchKey, InteropHelp.UTF8StringHandle pchValue);

		[PreserveSig]
		[Token(Token = "0x60008F3")]
		[Address(RVA = "0x10B1348", Offset = "0x10B1348", VA = "0x10B1348")]
		public static extern ulong ISteamGameServerUGC_SubmitItemUpdate(UGCUpdateHandle_t handle, InteropHelp.UTF8StringHandle pchChangeNote);

		[PreserveSig]
		[Token(Token = "0x60008F4")]
		[Address(RVA = "0x10B1420", Offset = "0x10B1420", VA = "0x10B1420")]
		public static extern EItemUpdateStatus ISteamGameServerUGC_GetItemUpdateProgress(UGCUpdateHandle_t handle, out ulong punBytesProcessed, out ulong punBytesTotal);

		[PreserveSig]
		[Token(Token = "0x60008F5")]
		[Address(RVA = "0x10B14B8", Offset = "0x10B14B8", VA = "0x10B14B8")]
		public static extern ulong ISteamGameServerUGC_SetUserItemVote(PublishedFileId_t nPublishedFileID, bool bVoteUp);

		[PreserveSig]
		[Token(Token = "0x60008F6")]
		[Address(RVA = "0x10B1548", Offset = "0x10B1548", VA = "0x10B1548")]
		public static extern ulong ISteamGameServerUGC_GetUserItemVote(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60008F7")]
		[Address(RVA = "0x10B15C8", Offset = "0x10B15C8", VA = "0x10B15C8")]
		public static extern ulong ISteamGameServerUGC_AddItemToFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60008F8")]
		[Address(RVA = "0x10B1658", Offset = "0x10B1658", VA = "0x10B1658")]
		public static extern ulong ISteamGameServerUGC_RemoveItemFromFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60008F9")]
		[Address(RVA = "0x10B16E8", Offset = "0x10B16E8", VA = "0x10B16E8")]
		public static extern ulong ISteamGameServerUGC_SubscribeItem(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60008FA")]
		[Address(RVA = "0x10B1768", Offset = "0x10B1768", VA = "0x10B1768")]
		public static extern ulong ISteamGameServerUGC_UnsubscribeItem(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60008FB")]
		[Address(RVA = "0x10B17E8", Offset = "0x10B17E8", VA = "0x10B17E8")]
		public static extern uint ISteamGameServerUGC_GetNumSubscribedItems();

		[PreserveSig]
		[Token(Token = "0x60008FC")]
		[Address(RVA = "0x10B185C", Offset = "0x10B185C", VA = "0x10B185C")]
		public static extern uint ISteamGameServerUGC_GetSubscribedItems([In][Out] PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries);

		[PreserveSig]
		[Token(Token = "0x60008FD")]
		[Address(RVA = "0x10B18F4", Offset = "0x10B18F4", VA = "0x10B18F4")]
		public static extern uint ISteamGameServerUGC_GetItemState(PublishedFileId_t nPublishedFileID);

		[PreserveSig]
		[Token(Token = "0x60008FE")]
		[Address(RVA = "0x10B1974", Offset = "0x10B1974", VA = "0x10B1974")]
		public static extern bool ISteamGameServerUGC_GetItemInstallInfo(PublishedFileId_t nPublishedFileID, out ulong punSizeOnDisk, IntPtr pchFolder, uint cchFolderSize, out uint punTimeStamp);

		[PreserveSig]
		[Token(Token = "0x60008FF")]
		[Address(RVA = "0x10B1A2C", Offset = "0x10B1A2C", VA = "0x10B1A2C")]
		public static extern bool ISteamGameServerUGC_GetItemDownloadInfo(PublishedFileId_t nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal);

		[PreserveSig]
		[Token(Token = "0x6000900")]
		[Address(RVA = "0x10B1ACC", Offset = "0x10B1ACC", VA = "0x10B1ACC")]
		public static extern bool ISteamGameServerUGC_DownloadItem(PublishedFileId_t nPublishedFileID, bool bHighPriority);

		[PreserveSig]
		[Token(Token = "0x6000901")]
		[Address(RVA = "0x10B1B64", Offset = "0x10B1B64", VA = "0x10B1B64")]
		public static extern uint ISteamGameServerUtils_GetSecondsSinceAppActive();

		[PreserveSig]
		[Token(Token = "0x6000902")]
		[Address(RVA = "0x10B1BD8", Offset = "0x10B1BD8", VA = "0x10B1BD8")]
		public static extern uint ISteamGameServerUtils_GetSecondsSinceComputerActive();

		[PreserveSig]
		[Token(Token = "0x6000903")]
		[Address(RVA = "0x10B1C4C", Offset = "0x10B1C4C", VA = "0x10B1C4C")]
		public static extern EUniverse ISteamGameServerUtils_GetConnectedUniverse();

		[PreserveSig]
		[Token(Token = "0x6000904")]
		[Address(RVA = "0x10B1CC0", Offset = "0x10B1CC0", VA = "0x10B1CC0")]
		public static extern uint ISteamGameServerUtils_GetServerRealTime();

		[PreserveSig]
		[Token(Token = "0x6000905")]
		[Address(RVA = "0x10B1D34", Offset = "0x10B1D34", VA = "0x10B1D34")]
		public static extern IntPtr ISteamGameServerUtils_GetIPCountry();

		[PreserveSig]
		[Token(Token = "0x6000906")]
		[Address(RVA = "0x10B1DA8", Offset = "0x10B1DA8", VA = "0x10B1DA8")]
		public static extern bool ISteamGameServerUtils_GetImageSize(int iImage, out uint pnWidth, out uint pnHeight);

		[PreserveSig]
		[Token(Token = "0x6000907")]
		[Address(RVA = "0x10B1E48", Offset = "0x10B1E48", VA = "0x10B1E48")]
		public static extern bool ISteamGameServerUtils_GetImageRGBA(int iImage, [In][Out] byte[] pubDest, int nDestBufferSize);

		[PreserveSig]
		[Token(Token = "0x6000908")]
		[Address(RVA = "0x10B1EF0", Offset = "0x10B1EF0", VA = "0x10B1EF0")]
		public static extern bool ISteamGameServerUtils_GetCSERIPPort(out uint unIP, out ushort usPort);

		[PreserveSig]
		[Token(Token = "0x6000909")]
		[Address(RVA = "0x10B1F88", Offset = "0x10B1F88", VA = "0x10B1F88")]
		public static extern byte ISteamGameServerUtils_GetCurrentBatteryPower();

		[PreserveSig]
		[Token(Token = "0x600090A")]
		[Address(RVA = "0x10B1FFC", Offset = "0x10B1FFC", VA = "0x10B1FFC")]
		public static extern uint ISteamGameServerUtils_GetAppID();

		[PreserveSig]
		[Token(Token = "0x600090B")]
		[Address(RVA = "0x10B2070", Offset = "0x10B2070", VA = "0x10B2070")]
		public static extern void ISteamGameServerUtils_SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition);

		[PreserveSig]
		[Token(Token = "0x600090C")]
		[Address(RVA = "0x10B20F0", Offset = "0x10B20F0", VA = "0x10B20F0")]
		public static extern bool ISteamGameServerUtils_IsAPICallCompleted(SteamAPICall_t hSteamAPICall, out bool pbFailed);

		[PreserveSig]
		[Token(Token = "0x600090D")]
		[Address(RVA = "0x10B219C", Offset = "0x10B219C", VA = "0x10B219C")]
		public static extern ESteamAPICallFailure ISteamGameServerUtils_GetAPICallFailureReason(SteamAPICall_t hSteamAPICall);

		[PreserveSig]
		[Token(Token = "0x600090E")]
		[Address(RVA = "0x10B221C", Offset = "0x10B221C", VA = "0x10B221C")]
		public static extern bool ISteamGameServerUtils_GetAPICallResult(SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, out bool pbFailed);

		[PreserveSig]
		[Token(Token = "0x600090F")]
		[Address(RVA = "0x10B22E8", Offset = "0x10B22E8", VA = "0x10B22E8")]
		public static extern void ISteamGameServerUtils_RunFrame();

		[PreserveSig]
		[Token(Token = "0x6000910")]
		[Address(RVA = "0x10B2358", Offset = "0x10B2358", VA = "0x10B2358")]
		public static extern uint ISteamGameServerUtils_GetIPCCallCount();

		[PreserveSig]
		[Token(Token = "0x6000911")]
		[Address(RVA = "0x10B23CC", Offset = "0x10B23CC", VA = "0x10B23CC")]
		public static extern void ISteamGameServerUtils_SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction);

		[PreserveSig]
		[Token(Token = "0x6000912")]
		[Address(RVA = "0x10B2450", Offset = "0x10B2450", VA = "0x10B2450")]
		public static extern bool ISteamGameServerUtils_IsOverlayEnabled();

		[PreserveSig]
		[Token(Token = "0x6000913")]
		[Address(RVA = "0x10B24CC", Offset = "0x10B24CC", VA = "0x10B24CC")]
		public static extern bool ISteamGameServerUtils_BOverlayNeedsPresent();

		[PreserveSig]
		[Token(Token = "0x6000914")]
		[Address(RVA = "0x10B2548", Offset = "0x10B2548", VA = "0x10B2548")]
		public static extern ulong ISteamGameServerUtils_CheckFileSignature(InteropHelp.UTF8StringHandle szFileName);

		[PreserveSig]
		[Token(Token = "0x6000915")]
		[Address(RVA = "0x10B2610", Offset = "0x10B2610", VA = "0x10B2610")]
		public static extern bool ISteamGameServerUtils_ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, InteropHelp.UTF8StringHandle pchDescription, uint unCharMax, InteropHelp.UTF8StringHandle pchExistingText);

		[PreserveSig]
		[Token(Token = "0x6000916")]
		[Address(RVA = "0x10B2750", Offset = "0x10B2750", VA = "0x10B2750")]
		public static extern uint ISteamGameServerUtils_GetEnteredGamepadTextLength();

		[PreserveSig]
		[Token(Token = "0x6000917")]
		[Address(RVA = "0x10B27C4", Offset = "0x10B27C4", VA = "0x10B27C4")]
		public static extern bool ISteamGameServerUtils_GetEnteredGamepadTextInput(IntPtr pchText, uint cchText);

		[PreserveSig]
		[Token(Token = "0x6000918")]
		[Address(RVA = "0x10B285C", Offset = "0x10B285C", VA = "0x10B285C")]
		public static extern IntPtr ISteamGameServerUtils_GetSteamUILanguage();

		[PreserveSig]
		[Token(Token = "0x6000919")]
		[Address(RVA = "0x10B28D0", Offset = "0x10B28D0", VA = "0x10B28D0")]
		public static extern bool ISteamGameServerUtils_IsSteamRunningInVR();

		[PreserveSig]
		[Token(Token = "0x600091A")]
		[Address(RVA = "0x10B294C", Offset = "0x10B294C", VA = "0x10B294C")]
		public static extern void ISteamGameServerUtils_SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset);
	}
	[Token(Token = "0x20000F3")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CB54", Offset = "0xA7CB54")]
	public struct SteamAppInstalled_t
	{
		[Token(Token = "0x400020B")]
		public const int k_iCallback = 3901;

		[Token(Token = "0x400020C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x20000F4")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CB68", Offset = "0xA7CB68")]
	public struct SteamAppUninstalled_t
	{
		[Token(Token = "0x400020D")]
		public const int k_iCallback = 3902;

		[Token(Token = "0x400020E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x20000F5")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CB7C", Offset = "0xA7CB7C")]
	public struct DlcInstalled_t
	{
		[Token(Token = "0x400020F")]
		public const int k_iCallback = 1005;

		[Token(Token = "0x4000210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x20000F6")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CB90", Offset = "0xA7CB90")]
	public struct RegisterActivationCodeResponse_t
	{
		[Token(Token = "0x4000211")]
		public const int k_iCallback = 1008;

		[Token(Token = "0x4000212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ERegisterActivationCodeResult m_eResult;

		[Token(Token = "0x4000213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_unPackageRegistered;
	}
	[Token(Token = "0x20000F7")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CBA4", Offset = "0xA7CBA4")]
	public struct AppProofOfPurchaseKeyResponse_t
	{
		[Token(Token = "0x4000214")]
		public const int k_iCallback = 1013;

		[Token(Token = "0x4000215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_nAppID;

		[Token(Token = "0x4000217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_rgchKey;
	}
	[Token(Token = "0x20000F8")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CBB8", Offset = "0xA7CBB8")]
	public struct NewLaunchQueryParameters_t
	{
		[Token(Token = "0x4000218")]
		public const int k_iCallback = 1014;
	}
	[Token(Token = "0x20000F9")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CBCC", Offset = "0xA7CBCC")]
	public struct PersonaStateChange_t
	{
		[Token(Token = "0x4000219")]
		public const int k_iCallback = 304;

		[Token(Token = "0x400021A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamID;

		[Token(Token = "0x400021B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EPersonaChange m_nChangeFlags;
	}
	[Token(Token = "0x20000FA")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CBE0", Offset = "0xA7CBE0")]
	public struct GameOverlayActivated_t
	{
		[Token(Token = "0x400021C")]
		public const int k_iCallback = 331;

		[Token(Token = "0x400021D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bActive;
	}
	[Token(Token = "0x20000FB")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CBF4", Offset = "0xA7CBF4")]
	public struct GameServerChangeRequested_t
	{
		[Token(Token = "0x400021E")]
		public const int k_iCallback = 332;

		[Token(Token = "0x400021F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_rgchServer;

		[Token(Token = "0x4000220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_rgchPassword;
	}
	[Token(Token = "0x20000FC")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CC08", Offset = "0xA7CC08")]
	public struct GameLobbyJoinRequested_t
	{
		[Token(Token = "0x4000221")]
		public const int k_iCallback = 333;

		[Token(Token = "0x4000222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDLobby;

		[Token(Token = "0x4000223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDFriend;
	}
	[Token(Token = "0x20000FD")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CC1C", Offset = "0xA7CC1C")]
	public struct AvatarImageLoaded_t
	{
		[Token(Token = "0x4000224")]
		public const int k_iCallback = 334;

		[Token(Token = "0x4000225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamID;

		[Token(Token = "0x4000226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_iImage;

		[Token(Token = "0x4000227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_iWide;

		[Token(Token = "0x4000228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_iTall;
	}
	[Token(Token = "0x20000FE")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CC30", Offset = "0xA7CC30")]
	public struct ClanOfficerListResponse_t
	{
		[Token(Token = "0x4000229")]
		public const int k_iCallback = 335;

		[Token(Token = "0x400022A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClan;

		[Token(Token = "0x400022B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_cOfficers;

		[Token(Token = "0x400022C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public byte m_bSuccess;
	}
	[Token(Token = "0x20000FF")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CC44", Offset = "0xA7CC44")]
	public struct FriendRichPresenceUpdate_t
	{
		[Token(Token = "0x400022D")]
		public const int k_iCallback = 336;

		[Token(Token = "0x400022E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDFriend;

		[Token(Token = "0x400022F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x2000100")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CC58", Offset = "0xA7CC58")]
	public struct GameRichPresenceJoinRequested_t
	{
		[Token(Token = "0x4000230")]
		public const int k_iCallback = 337;

		[Token(Token = "0x4000231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDFriend;

		[Token(Token = "0x4000232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_rgchConnect;
	}
	[Token(Token = "0x2000101")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CC6C", Offset = "0xA7CC6C")]
	public struct GameConnectedClanChatMsg_t
	{
		[Token(Token = "0x4000233")]
		public const int k_iCallback = 338;

		[Token(Token = "0x4000234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClanChat;

		[Token(Token = "0x4000235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDUser;

		[Token(Token = "0x4000236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_iMessageID;
	}
	[Token(Token = "0x2000102")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CC80", Offset = "0xA7CC80")]
	public struct GameConnectedChatJoin_t
	{
		[Token(Token = "0x4000237")]
		public const int k_iCallback = 339;

		[Token(Token = "0x4000238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClanChat;

		[Token(Token = "0x4000239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x2000103")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CC94", Offset = "0xA7CC94")]
	public struct GameConnectedChatLeave_t
	{
		[Token(Token = "0x400023A")]
		public const int k_iCallback = 340;

		[Token(Token = "0x400023B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClanChat;

		[Token(Token = "0x400023C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDUser;

		[Token(Token = "0x400023D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bKicked;

		[Token(Token = "0x400023E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool m_bDropped;
	}
	[Token(Token = "0x2000104")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CCA8", Offset = "0xA7CCA8")]
	public struct DownloadClanActivityCountsResult_t
	{
		[Token(Token = "0x400023F")]
		public const int k_iCallback = 341;

		[Token(Token = "0x4000240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bSuccess;
	}
	[Token(Token = "0x2000105")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CCBC", Offset = "0xA7CCBC")]
	public struct JoinClanChatRoomCompletionResult_t
	{
		[Token(Token = "0x4000241")]
		public const int k_iCallback = 342;

		[Token(Token = "0x4000242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDClanChat;

		[Token(Token = "0x4000243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EChatRoomEnterResponse m_eChatRoomEnterResponse;
	}
	[Token(Token = "0x2000106")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CCD0", Offset = "0xA7CCD0")]
	public struct GameConnectedFriendChatMsg_t
	{
		[Token(Token = "0x4000244")]
		public const int k_iCallback = 343;

		[Token(Token = "0x4000245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDUser;

		[Token(Token = "0x4000246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_iMessageID;
	}
	[Token(Token = "0x2000107")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CCE4", Offset = "0xA7CCE4")]
	public struct FriendsGetFollowerCount_t
	{
		[Token(Token = "0x4000247")]
		public const int k_iCallback = 344;

		[Token(Token = "0x4000248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID m_steamID;

		[Token(Token = "0x400024A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nCount;
	}
	[Token(Token = "0x2000108")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CCF8", Offset = "0xA7CCF8")]
	public struct FriendsIsFollowing_t
	{
		[Token(Token = "0x400024B")]
		public const int k_iCallback = 345;

		[Token(Token = "0x400024C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400024D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID m_steamID;

		[Token(Token = "0x400024E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bIsFollowing;
	}
	[Token(Token = "0x2000109")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CD0C", Offset = "0xA7CD0C")]
	public struct FriendsEnumerateFollowingList_t
	{
		[Token(Token = "0x400024F")]
		public const int k_iCallback = 346;

		[Token(Token = "0x4000250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID[] m_rgSteamID;

		[Token(Token = "0x4000252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_nResultsReturned;

		[Token(Token = "0x4000253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int m_nTotalResultCount;
	}
	[Token(Token = "0x200010A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CD20", Offset = "0xA7CD20")]
	public struct SetPersonaNameResponse_t
	{
		[Token(Token = "0x4000254")]
		public const int k_iCallback = 347;

		[Token(Token = "0x4000255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bSuccess;

		[Token(Token = "0x4000256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public bool m_bLocalSuccess;

		[Token(Token = "0x4000257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_result;
	}
	[Token(Token = "0x200010B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CD34", Offset = "0xA7CD34")]
	public struct GCMessageAvailable_t
	{
		[Token(Token = "0x4000258")]
		public const int k_iCallback = 1701;

		[Token(Token = "0x4000259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nMessageSize;
	}
	[Token(Token = "0x200010C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CD48", Offset = "0xA7CD48")]
	public struct GCMessageFailed_t
	{
		[Token(Token = "0x400025A")]
		public const int k_iCallback = 1702;
	}
	[Token(Token = "0x200010D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CD5C", Offset = "0xA7CD5C")]
	public struct GSClientApprove_t
	{
		[Token(Token = "0x400025B")]
		public const int k_iCallback = 201;

		[Token(Token = "0x400025C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamID;

		[Token(Token = "0x400025D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_OwnerSteamID;
	}
	[Token(Token = "0x200010E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CD70", Offset = "0xA7CD70")]
	public struct GSClientDeny_t
	{
		[Token(Token = "0x400025E")]
		public const int k_iCallback = 202;

		[Token(Token = "0x400025F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamID;

		[Token(Token = "0x4000260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EDenyReason m_eDenyReason;

		[Token(Token = "0x4000261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string m_rgchOptionalText;
	}
	[Token(Token = "0x200010F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CD84", Offset = "0xA7CD84")]
	public struct GSClientKick_t
	{
		[Token(Token = "0x4000262")]
		public const int k_iCallback = 203;

		[Token(Token = "0x4000263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamID;

		[Token(Token = "0x4000264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EDenyReason m_eDenyReason;
	}
	[Token(Token = "0x2000110")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CD98", Offset = "0xA7CD98")]
	public struct GSClientAchievementStatus_t
	{
		[Token(Token = "0x4000265")]
		public const int k_iCallback = 206;

		[Token(Token = "0x4000266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamID;

		[Token(Token = "0x4000267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_pchAchievement;

		[Token(Token = "0x4000268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bUnlocked;
	}
	[Token(Token = "0x2000111")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CDAC", Offset = "0xA7CDAC")]
	public struct GSPolicyResponse_t
	{
		[Token(Token = "0x4000269")]
		public const int k_iCallback = 115;

		[Token(Token = "0x400026A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bSecure;
	}
	[Token(Token = "0x2000112")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CDC0", Offset = "0xA7CDC0")]
	public struct GSGameplayStats_t
	{
		[Token(Token = "0x400026B")]
		public const int k_iCallback = 207;

		[Token(Token = "0x400026C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400026D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nRank;

		[Token(Token = "0x400026E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_unTotalConnects;

		[Token(Token = "0x400026F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_unTotalMinutesPlayed;
	}
	[Token(Token = "0x2000113")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CDD4", Offset = "0xA7CDD4")]
	public struct GSClientGroupStatus_t
	{
		[Token(Token = "0x4000270")]
		public const int k_iCallback = 208;

		[Token(Token = "0x4000271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamIDUser;

		[Token(Token = "0x4000272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_SteamIDGroup;

		[Token(Token = "0x4000273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bMember;

		[Token(Token = "0x4000274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool m_bOfficer;
	}
	[Token(Token = "0x2000114")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CDE8", Offset = "0xA7CDE8")]
	public struct GSReputation_t
	{
		[Token(Token = "0x4000275")]
		public const int k_iCallback = 209;

		[Token(Token = "0x4000276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_unReputationScore;

		[Token(Token = "0x4000278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool m_bBanned;

		[Token(Token = "0x4000279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_unBannedIP;

		[Token(Token = "0x400027A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ushort m_usBannedPort;

		[Token(Token = "0x400027B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ulong m_ulBannedGameID;

		[Token(Token = "0x400027C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint m_unBanExpires;
	}
	[Token(Token = "0x2000115")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CDFC", Offset = "0xA7CDFC")]
	public struct AssociateWithClanResult_t
	{
		[Token(Token = "0x400027D")]
		public const int k_iCallback = 210;

		[Token(Token = "0x400027E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000116")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CE10", Offset = "0xA7CE10")]
	public struct ComputeNewPlayerCompatibilityResult_t
	{
		[Token(Token = "0x400027F")]
		public const int k_iCallback = 211;

		[Token(Token = "0x4000280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_cPlayersThatDontLikeCandidate;

		[Token(Token = "0x4000282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_cPlayersThatCandidateDoesntLike;

		[Token(Token = "0x4000283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_cClanPlayersThatDontLikeCandidate;

		[Token(Token = "0x4000284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CSteamID m_SteamIDCandidate;
	}
	[Token(Token = "0x2000117")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CE24", Offset = "0xA7CE24")]
	public struct GSStatsReceived_t
	{
		[Token(Token = "0x4000285")]
		public const int k_iCallback = 1800;

		[Token(Token = "0x4000286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x2000118")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CE38", Offset = "0xA7CE38")]
	public struct GSStatsStored_t
	{
		[Token(Token = "0x4000288")]
		public const int k_iCallback = 1801;

		[Token(Token = "0x4000289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400028A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x2000119")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CE4C", Offset = "0xA7CE4C")]
	public struct GSStatsUnloaded_t
	{
		[Token(Token = "0x400028B")]
		public const int k_iCallback = 1108;

		[Token(Token = "0x400028C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x200011A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CE60", Offset = "0xA7CE60")]
	public struct HTML_BrowserReady_t
	{
		[Token(Token = "0x400028D")]
		public const int k_iCallback = 4501;

		[Token(Token = "0x400028E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;
	}
	[Token(Token = "0x200011B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CE74", Offset = "0xA7CE74")]
	public struct HTML_NeedsPaint_t
	{
		[Token(Token = "0x400028F")]
		public const int k_iCallback = 4502;

		[Token(Token = "0x4000290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x4000291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr pBGRA;

		[Token(Token = "0x4000292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint unWide;

		[Token(Token = "0x4000293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unTall;

		[Token(Token = "0x4000294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint unUpdateX;

		[Token(Token = "0x4000295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint unUpdateY;

		[Token(Token = "0x4000296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public uint unUpdateWide;

		[Token(Token = "0x4000297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint unUpdateTall;

		[Token(Token = "0x4000298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public uint unScrollX;

		[Token(Token = "0x4000299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public uint unScrollY;

		[Token(Token = "0x400029A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float flPageScale;

		[Token(Token = "0x400029B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public uint unPageSerial;
	}
	[Token(Token = "0x200011C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CE88", Offset = "0xA7CE88")]
	public struct HTML_StartRequest_t
	{
		[Token(Token = "0x400029C")]
		public const int k_iCallback = 4503;

		[Token(Token = "0x400029D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x400029E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchURL;

		[Token(Token = "0x400029F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string pchTarget;

		[Token(Token = "0x40002A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string pchPostData;

		[Token(Token = "0x40002A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool bIsRedirect;
	}
	[Token(Token = "0x200011D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CE9C", Offset = "0xA7CE9C")]
	public struct HTML_CloseBrowser_t
	{
		[Token(Token = "0x40002A2")]
		public const int k_iCallback = 4504;

		[Token(Token = "0x40002A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;
	}
	[Token(Token = "0x200011E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CEB0", Offset = "0xA7CEB0")]
	public struct HTML_URLChanged_t
	{
		[Token(Token = "0x40002A4")]
		public const int k_iCallback = 4505;

		[Token(Token = "0x40002A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40002A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchURL;

		[Token(Token = "0x40002A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string pchPostData;

		[Token(Token = "0x40002A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool bIsRedirect;

		[Token(Token = "0x40002A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string pchPageTitle;

		[Token(Token = "0x40002AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool bNewNavigation;
	}
	[Token(Token = "0x200011F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CEC4", Offset = "0xA7CEC4")]
	public struct HTML_FinishedRequest_t
	{
		[Token(Token = "0x40002AB")]
		public const int k_iCallback = 4506;

		[Token(Token = "0x40002AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40002AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchURL;

		[Token(Token = "0x40002AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string pchPageTitle;
	}
	[Token(Token = "0x2000120")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CED8", Offset = "0xA7CED8")]
	public struct HTML_OpenLinkInNewTab_t
	{
		[Token(Token = "0x40002AF")]
		public const int k_iCallback = 4507;

		[Token(Token = "0x40002B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40002B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchURL;
	}
	[Token(Token = "0x2000121")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CEEC", Offset = "0xA7CEEC")]
	public struct HTML_ChangedTitle_t
	{
		[Token(Token = "0x40002B2")]
		public const int k_iCallback = 4508;

		[Token(Token = "0x40002B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40002B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchTitle;
	}
	[Token(Token = "0x2000122")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CF00", Offset = "0xA7CF00")]
	public struct HTML_SearchResults_t
	{
		[Token(Token = "0x40002B5")]
		public const int k_iCallback = 4509;

		[Token(Token = "0x40002B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40002B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint unResults;

		[Token(Token = "0x40002B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unCurrentMatch;
	}
	[Token(Token = "0x2000123")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CF14", Offset = "0xA7CF14")]
	public struct HTML_CanGoBackAndForward_t
	{
		[Token(Token = "0x40002B9")]
		public const int k_iCallback = 4510;

		[Token(Token = "0x40002BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40002BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool bCanGoBack;

		[Token(Token = "0x40002BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		public bool bCanGoForward;
	}
	[Token(Token = "0x2000124")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CF28", Offset = "0xA7CF28")]
	public struct HTML_HorizontalScroll_t
	{
		[Token(Token = "0x40002BD")]
		public const int k_iCallback = 4511;

		[Token(Token = "0x40002BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40002BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint unScrollMax;

		[Token(Token = "0x40002C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unScrollCurrent;

		[Token(Token = "0x40002C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float flPageScale;

		[Token(Token = "0x40002C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool bVisible;

		[Token(Token = "0x40002C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unPageSize;
	}
	[Token(Token = "0x2000125")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CF3C", Offset = "0xA7CF3C")]
	public struct HTML_VerticalScroll_t
	{
		[Token(Token = "0x40002C4")]
		public const int k_iCallback = 4512;

		[Token(Token = "0x40002C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40002C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint unScrollMax;

		[Token(Token = "0x40002C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint unScrollCurrent;

		[Token(Token = "0x40002C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float flPageScale;

		[Token(Token = "0x40002C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool bVisible;

		[Token(Token = "0x40002CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unPageSize;
	}
	[Token(Token = "0x2000126")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CF50", Offset = "0xA7CF50")]
	public struct HTML_LinkAtPosition_t
	{
		[Token(Token = "0x40002CB")]
		public const int k_iCallback = 4513;

		[Token(Token = "0x40002CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40002CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint x;

		[Token(Token = "0x40002CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint y;

		[Token(Token = "0x40002CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string pchURL;

		[Token(Token = "0x40002D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool bInput;

		[Token(Token = "0x40002D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool bLiveLink;
	}
	[Token(Token = "0x2000127")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CF64", Offset = "0xA7CF64")]
	public struct HTML_JSAlert_t
	{
		[Token(Token = "0x40002D2")]
		public const int k_iCallback = 4514;

		[Token(Token = "0x40002D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40002D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchMessage;
	}
	[Token(Token = "0x2000128")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CF78", Offset = "0xA7CF78")]
	public struct HTML_JSConfirm_t
	{
		[Token(Token = "0x40002D5")]
		public const int k_iCallback = 4515;

		[Token(Token = "0x40002D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40002D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchMessage;
	}
	[Token(Token = "0x2000129")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CF8C", Offset = "0xA7CF8C")]
	public struct HTML_FileOpenDialog_t
	{
		[Token(Token = "0x40002D8")]
		public const int k_iCallback = 4516;

		[Token(Token = "0x40002D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40002DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchTitle;

		[Token(Token = "0x40002DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string pchInitialFile;
	}
	[Token(Token = "0x200012A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CFA0", Offset = "0xA7CFA0")]
	public struct HTML_NewWindow_t
	{
		[Token(Token = "0x40002DC")]
		public const int k_iCallback = 4521;

		[Token(Token = "0x40002DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40002DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchURL;

		[Token(Token = "0x40002DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint unX;

		[Token(Token = "0x40002E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint unY;

		[Token(Token = "0x40002E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint unWide;

		[Token(Token = "0x40002E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint unTall;

		[Token(Token = "0x40002E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HHTMLBrowser unNewWindow_BrowserHandle;
	}
	[Token(Token = "0x200012B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CFB4", Offset = "0xA7CFB4")]
	public struct HTML_SetCursor_t
	{
		[Token(Token = "0x40002E4")]
		public const int k_iCallback = 4522;

		[Token(Token = "0x40002E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40002E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint eMouseCursor;
	}
	[Token(Token = "0x200012C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CFC8", Offset = "0xA7CFC8")]
	public struct HTML_StatusText_t
	{
		[Token(Token = "0x40002E7")]
		public const int k_iCallback = 4523;

		[Token(Token = "0x40002E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40002E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchMsg;
	}
	[Token(Token = "0x200012D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CFDC", Offset = "0xA7CFDC")]
	public struct HTML_ShowToolTip_t
	{
		[Token(Token = "0x40002EA")]
		public const int k_iCallback = 4524;

		[Token(Token = "0x40002EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40002EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchMsg;
	}
	[Token(Token = "0x200012E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7CFF0", Offset = "0xA7CFF0")]
	public struct HTML_UpdateToolTip_t
	{
		[Token(Token = "0x40002ED")]
		public const int k_iCallback = 4525;

		[Token(Token = "0x40002EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;

		[Token(Token = "0x40002EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string pchMsg;
	}
	[Token(Token = "0x200012F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D004", Offset = "0xA7D004")]
	public struct HTML_HideToolTip_t
	{
		[Token(Token = "0x40002F0")]
		public const int k_iCallback = 4526;

		[Token(Token = "0x40002F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HHTMLBrowser unBrowserHandle;
	}
	[Token(Token = "0x2000130")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D018", Offset = "0xA7D018")]
	public struct HTTPRequestCompleted_t
	{
		[Token(Token = "0x40002F2")]
		public const int k_iCallback = 2101;

		[Token(Token = "0x40002F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HTTPRequestHandle m_hRequest;

		[Token(Token = "0x40002F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulContextValue;

		[Token(Token = "0x40002F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bRequestSuccessful;

		[Token(Token = "0x40002F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public EHTTPStatusCode m_eStatusCode;

		[Token(Token = "0x40002F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint m_unBodySize;
	}
	[Token(Token = "0x2000131")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D02C", Offset = "0xA7D02C")]
	public struct HTTPRequestHeadersReceived_t
	{
		[Token(Token = "0x40002F8")]
		public const int k_iCallback = 2102;

		[Token(Token = "0x40002F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HTTPRequestHandle m_hRequest;

		[Token(Token = "0x40002FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulContextValue;
	}
	[Token(Token = "0x2000132")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D040", Offset = "0xA7D040")]
	public struct HTTPRequestDataReceived_t
	{
		[Token(Token = "0x40002FB")]
		public const int k_iCallback = 2103;

		[Token(Token = "0x40002FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HTTPRequestHandle m_hRequest;

		[Token(Token = "0x40002FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulContextValue;

		[Token(Token = "0x40002FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_cOffset;

		[Token(Token = "0x40002FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_cBytesReceived;
	}
	[Token(Token = "0x2000133")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D054", Offset = "0xA7D054")]
	public struct SteamInventoryResultReady_t
	{
		[Token(Token = "0x4000300")]
		public const int k_iCallback = 4700;

		[Token(Token = "0x4000301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamInventoryResult_t m_handle;

		[Token(Token = "0x4000302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_result;
	}
	[Token(Token = "0x2000134")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D068", Offset = "0xA7D068")]
	public struct SteamInventoryFullUpdate_t
	{
		[Token(Token = "0x4000303")]
		public const int k_iCallback = 4701;

		[Token(Token = "0x4000304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamInventoryResult_t m_handle;
	}
	[Token(Token = "0x2000135")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D07C", Offset = "0xA7D07C")]
	public struct SteamInventoryDefinitionUpdate_t
	{
		[Token(Token = "0x4000305")]
		public const int k_iCallback = 4702;
	}
	[Token(Token = "0x2000136")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D090", Offset = "0xA7D090")]
	public struct FavoritesListChanged_t
	{
		[Token(Token = "0x4000306")]
		public const int k_iCallback = 502;

		[Token(Token = "0x4000307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nIP;

		[Token(Token = "0x4000308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_nQueryPort;

		[Token(Token = "0x4000309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_nConnPort;

		[Token(Token = "0x400030A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_nAppID;

		[Token(Token = "0x400030B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_nFlags;

		[Token(Token = "0x400030C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool m_bAdd;

		[Token(Token = "0x400030D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AccountID_t m_unAccountId;
	}
	[Token(Token = "0x2000137")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D0A4", Offset = "0xA7D0A4")]
	public struct LobbyInvite_t
	{
		[Token(Token = "0x400030E")]
		public const int k_iCallback = 503;

		[Token(Token = "0x400030F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDUser;

		[Token(Token = "0x4000310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x4000311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong m_ulGameID;
	}
	[Token(Token = "0x2000138")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D0B8", Offset = "0xA7D0B8")]
	public struct LobbyEnter_t
	{
		[Token(Token = "0x4000312")]
		public const int k_iCallback = 504;

		[Token(Token = "0x4000313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x4000314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_rgfChatPermissions;

		[Token(Token = "0x4000315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bLocked;

		[Token(Token = "0x4000316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_EChatRoomEnterResponse;
	}
	[Token(Token = "0x2000139")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D0CC", Offset = "0xA7D0CC")]
	public struct LobbyDataUpdate_t
	{
		[Token(Token = "0x4000317")]
		public const int k_iCallback = 505;

		[Token(Token = "0x4000318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x4000319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDMember;

		[Token(Token = "0x400031A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte m_bSuccess;
	}
	[Token(Token = "0x200013A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D0E0", Offset = "0xA7D0E0")]
	public struct LobbyChatUpdate_t
	{
		[Token(Token = "0x400031B")]
		public const int k_iCallback = 506;

		[Token(Token = "0x400031C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x400031D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDUserChanged;

		[Token(Token = "0x400031E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ulong m_ulSteamIDMakingChange;

		[Token(Token = "0x400031F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint m_rgfChatMemberStateChange;
	}
	[Token(Token = "0x200013B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D0F4", Offset = "0xA7D0F4")]
	public struct LobbyChatMsg_t
	{
		[Token(Token = "0x4000320")]
		public const int k_iCallback = 507;

		[Token(Token = "0x4000321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x4000322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDUser;

		[Token(Token = "0x4000323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte m_eChatEntryType;

		[Token(Token = "0x4000324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_iChatID;
	}
	[Token(Token = "0x200013C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D108", Offset = "0xA7D108")]
	public struct LobbyGameCreated_t
	{
		[Token(Token = "0x4000325")]
		public const int k_iCallback = 509;

		[Token(Token = "0x4000326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x4000327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDGameServer;

		[Token(Token = "0x4000328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_unIP;

		[Token(Token = "0x4000329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ushort m_usPort;
	}
	[Token(Token = "0x200013D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D11C", Offset = "0xA7D11C")]
	public struct LobbyMatchList_t
	{
		[Token(Token = "0x400032A")]
		public const int k_iCallback = 510;

		[Token(Token = "0x400032B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_nLobbiesMatching;
	}
	[Token(Token = "0x200013E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D130", Offset = "0xA7D130")]
	public struct LobbyKicked_t
	{
		[Token(Token = "0x400032C")]
		public const int k_iCallback = 512;

		[Token(Token = "0x400032D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ulSteamIDLobby;

		[Token(Token = "0x400032E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDAdmin;

		[Token(Token = "0x400032F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte m_bKickedDueToDisconnect;
	}
	[Token(Token = "0x200013F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D144", Offset = "0xA7D144")]
	public struct LobbyCreated_t
	{
		[Token(Token = "0x4000330")]
		public const int k_iCallback = 513;

		[Token(Token = "0x4000331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulSteamIDLobby;
	}
	[Token(Token = "0x2000140")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D158", Offset = "0xA7D158")]
	public struct FavoritesListAccountsUpdated_t
	{
		[Token(Token = "0x4000333")]
		public const int k_iCallback = 516;

		[Token(Token = "0x4000334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000141")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D16C", Offset = "0xA7D16C")]
	public struct PlaybackStatusHasChanged_t
	{
		[Token(Token = "0x4000335")]
		public const int k_iCallback = 4001;
	}
	[Token(Token = "0x2000142")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D180", Offset = "0xA7D180")]
	public struct VolumeHasChanged_t
	{
		[Token(Token = "0x4000336")]
		public const int k_iCallback = 4002;

		[Token(Token = "0x4000337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m_flNewVolume;
	}
	[Token(Token = "0x2000143")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D194", Offset = "0xA7D194")]
	public struct MusicPlayerRemoteWillActivate_t
	{
		[Token(Token = "0x4000338")]
		public const int k_iCallback = 4101;
	}
	[Token(Token = "0x2000144")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D1A8", Offset = "0xA7D1A8")]
	public struct MusicPlayerRemoteWillDeactivate_t
	{
		[Token(Token = "0x4000339")]
		public const int k_iCallback = 4102;
	}
	[Token(Token = "0x2000145")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D1BC", Offset = "0xA7D1BC")]
	public struct MusicPlayerRemoteToFront_t
	{
		[Token(Token = "0x400033A")]
		public const int k_iCallback = 4103;
	}
	[Token(Token = "0x2000146")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D1D0", Offset = "0xA7D1D0")]
	public struct MusicPlayerWillQuit_t
	{
		[Token(Token = "0x400033B")]
		public const int k_iCallback = 4104;
	}
	[Token(Token = "0x2000147")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D1E4", Offset = "0xA7D1E4")]
	public struct MusicPlayerWantsPlay_t
	{
		[Token(Token = "0x400033C")]
		public const int k_iCallback = 4105;
	}
	[Token(Token = "0x2000148")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D1F8", Offset = "0xA7D1F8")]
	public struct MusicPlayerWantsPause_t
	{
		[Token(Token = "0x400033D")]
		public const int k_iCallback = 4106;
	}
	[Token(Token = "0x2000149")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D20C", Offset = "0xA7D20C")]
	public struct MusicPlayerWantsPlayPrevious_t
	{
		[Token(Token = "0x400033E")]
		public const int k_iCallback = 4107;
	}
	[Token(Token = "0x200014A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D220", Offset = "0xA7D220")]
	public struct MusicPlayerWantsPlayNext_t
	{
		[Token(Token = "0x400033F")]
		public const int k_iCallback = 4108;
	}
	[Token(Token = "0x200014B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D234", Offset = "0xA7D234")]
	public struct MusicPlayerWantsShuffled_t
	{
		[Token(Token = "0x4000340")]
		public const int k_iCallback = 4109;

		[Token(Token = "0x4000341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bShuffled;
	}
	[Token(Token = "0x200014C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D248", Offset = "0xA7D248")]
	public struct MusicPlayerWantsLooped_t
	{
		[Token(Token = "0x4000342")]
		public const int k_iCallback = 4110;

		[Token(Token = "0x4000343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bLooped;
	}
	[Token(Token = "0x200014D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D25C", Offset = "0xA7D25C")]
	public struct MusicPlayerWantsVolume_t
	{
		[Token(Token = "0x4000344")]
		public const int k_iCallback = 4011;

		[Token(Token = "0x4000345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m_flNewVolume;
	}
	[Token(Token = "0x200014E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D270", Offset = "0xA7D270")]
	public struct MusicPlayerSelectsQueueEntry_t
	{
		[Token(Token = "0x4000346")]
		public const int k_iCallback = 4012;

		[Token(Token = "0x4000347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int nID;
	}
	[Token(Token = "0x200014F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D284", Offset = "0xA7D284")]
	public struct MusicPlayerSelectsPlaylistEntry_t
	{
		[Token(Token = "0x4000348")]
		public const int k_iCallback = 4013;

		[Token(Token = "0x4000349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int nID;
	}
	[Token(Token = "0x2000150")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D298", Offset = "0xA7D298")]
	public struct MusicPlayerWantsPlayingRepeatStatus_t
	{
		[Token(Token = "0x400034A")]
		public const int k_iCallback = 4114;

		[Token(Token = "0x400034B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_nPlayingRepeatStatus;
	}
	[Token(Token = "0x2000151")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D2AC", Offset = "0xA7D2AC")]
	public struct P2PSessionRequest_t
	{
		[Token(Token = "0x400034C")]
		public const int k_iCallback = 1202;

		[Token(Token = "0x400034D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDRemote;
	}
	[Token(Token = "0x2000152")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D2C0", Offset = "0xA7D2C0")]
	public struct P2PSessionConnectFail_t
	{
		[Token(Token = "0x400034E")]
		public const int k_iCallback = 1203;

		[Token(Token = "0x400034F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDRemote;

		[Token(Token = "0x4000350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public byte m_eP2PSessionError;
	}
	[Token(Token = "0x2000153")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D2D4", Offset = "0xA7D2D4")]
	public struct SocketStatusCallback_t
	{
		[Token(Token = "0x4000351")]
		public const int k_iCallback = 1201;

		[Token(Token = "0x4000352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SNetSocket_t m_hSocket;

		[Token(Token = "0x4000353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public SNetListenSocket_t m_hListenSocket;

		[Token(Token = "0x4000354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public CSteamID m_steamIDRemote;

		[Token(Token = "0x4000355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_eSNetSocketState;
	}
	[Token(Token = "0x2000154")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D2E8", Offset = "0xA7D2E8")]
	public struct RemoteStorageAppSyncedClient_t
	{
		[Token(Token = "0x4000356")]
		public const int k_iCallback = 1301;

		[Token(Token = "0x4000357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;

		[Token(Token = "0x4000358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;

		[Token(Token = "0x4000359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_unNumDownloads;
	}
	[Token(Token = "0x2000155")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D2FC", Offset = "0xA7D2FC")]
	public struct RemoteStorageAppSyncedServer_t
	{
		[Token(Token = "0x400035A")]
		public const int k_iCallback = 1302;

		[Token(Token = "0x400035B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;

		[Token(Token = "0x400035C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;

		[Token(Token = "0x400035D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_unNumUploads;
	}
	[Token(Token = "0x2000156")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D310", Offset = "0xA7D310")]
	public struct RemoteStorageAppSyncProgress_t
	{
		[Token(Token = "0x400035E")]
		public const int k_iCallback = 1303;

		[Token(Token = "0x400035F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_rgchCurrentFile;

		[Token(Token = "0x4000360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;

		[Token(Token = "0x4000361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_uBytesTransferredThisChunk;

		[Token(Token = "0x4000362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public double m_dAppPercentComplete;

		[Token(Token = "0x4000363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool m_bUploading;
	}
	[Token(Token = "0x2000157")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D324", Offset = "0xA7D324")]
	public struct RemoteStorageAppSyncStatusCheck_t
	{
		[Token(Token = "0x4000364")]
		public const int k_iCallback = 1305;

		[Token(Token = "0x4000365")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;

		[Token(Token = "0x4000366")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000158")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D338", Offset = "0xA7D338")]
	public struct RemoteStorageConflictResolution_t
	{
		[Token(Token = "0x4000367")]
		public const int k_iCallback = 1306;

		[Token(Token = "0x4000368")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_nAppID;

		[Token(Token = "0x4000369")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000159")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D34C", Offset = "0xA7D34C")]
	public struct RemoteStorageFileShareResult_t
	{
		[Token(Token = "0x400036A")]
		public const int k_iCallback = 1307;

		[Token(Token = "0x400036B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400036C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public UGCHandle_t m_hFile;

		[Token(Token = "0x400036D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string m_rgchFilename;
	}
	[Token(Token = "0x200015A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D360", Offset = "0xA7D360")]
	public struct RemoteStoragePublishFileResult_t
	{
		[Token(Token = "0x400036E")]
		public const int k_iCallback = 1309;

		[Token(Token = "0x400036F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
	}
	[Token(Token = "0x200015B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D374", Offset = "0xA7D374")]
	public struct RemoteStorageDeletePublishedFileResult_t
	{
		[Token(Token = "0x4000372")]
		public const int k_iCallback = 1311;

		[Token(Token = "0x4000373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x200015C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D388", Offset = "0xA7D388")]
	public struct RemoteStorageEnumerateUserPublishedFilesResult_t
	{
		[Token(Token = "0x4000375")]
		public const int k_iCallback = 1312;

		[Token(Token = "0x4000376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nResultsReturned;

		[Token(Token = "0x4000378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nTotalResultCount;

		[Token(Token = "0x4000379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PublishedFileId_t[] m_rgPublishedFileId;
	}
	[Token(Token = "0x200015D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D39C", Offset = "0xA7D39C")]
	public struct RemoteStorageSubscribePublishedFileResult_t
	{
		[Token(Token = "0x400037A")]
		public const int k_iCallback = 1313;

		[Token(Token = "0x400037B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400037C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x200015E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D3B0", Offset = "0xA7D3B0")]
	public struct RemoteStorageEnumerateUserSubscribedFilesResult_t
	{
		[Token(Token = "0x400037D")]
		public const int k_iCallback = 1314;

		[Token(Token = "0x400037E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400037F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nResultsReturned;

		[Token(Token = "0x4000380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nTotalResultCount;

		[Token(Token = "0x4000381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PublishedFileId_t[] m_rgPublishedFileId;

		[Token(Token = "0x4000382")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint[] m_rgRTimeSubscribed;
	}
	[Token(Token = "0x200015F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D3C4", Offset = "0xA7D3C4")]
	public struct RemoteStorageUnsubscribePublishedFileResult_t
	{
		[Token(Token = "0x4000383")]
		public const int k_iCallback = 1315;

		[Token(Token = "0x4000384")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000385")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x2000160")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D3D8", Offset = "0xA7D3D8")]
	public struct RemoteStorageUpdatePublishedFileResult_t
	{
		[Token(Token = "0x4000386")]
		public const int k_iCallback = 1316;

		[Token(Token = "0x4000387")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
	}
	[Token(Token = "0x2000161")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D3EC", Offset = "0xA7D3EC")]
	public struct RemoteStorageDownloadUGCResult_t
	{
		[Token(Token = "0x400038A")]
		public const int k_iCallback = 1317;

		[Token(Token = "0x400038B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x400038C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public UGCHandle_t m_hFile;

		[Token(Token = "0x400038D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AppId_t m_nAppID;

		[Token(Token = "0x400038E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int m_nSizeInBytes;

		[Token(Token = "0x400038F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string m_pchFileName;

		[Token(Token = "0x4000390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ulong m_ulSteamIDOwner;
	}
	[Token(Token = "0x2000162")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D400", Offset = "0xA7D400")]
	public struct RemoteStorageGetPublishedFileDetailsResult_t
	{
		[Token(Token = "0x4000391")]
		public const int k_iCallback = 1318;

		[Token(Token = "0x4000392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AppId_t m_nCreatorAppID;

		[Token(Token = "0x4000395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public AppId_t m_nConsumerAppID;

		[Token(Token = "0x4000396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string m_rgchTitle;

		[Token(Token = "0x4000397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string m_rgchDescription;

		[Token(Token = "0x4000398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UGCHandle_t m_hFile;

		[Token(Token = "0x4000399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UGCHandle_t m_hPreviewFile;

		[Token(Token = "0x400039A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ulong m_ulSteamIDOwner;

		[Token(Token = "0x400039B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public uint m_rtimeCreated;

		[Token(Token = "0x400039C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public uint m_rtimeUpdated;

		[Token(Token = "0x400039D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ERemoteStoragePublishedFileVisibility m_eVisibility;

		[Token(Token = "0x400039E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool m_bBanned;

		[Token(Token = "0x400039F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string m_rgchTags;

		[Token(Token = "0x40003A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool m_bTagsTruncated;

		[Token(Token = "0x40003A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string m_pchFileName;

		[Token(Token = "0x40003A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int m_nFileSize;

		[Token(Token = "0x40003A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int m_nPreviewFileSize;

		[Token(Token = "0x40003A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string m_rgchURL;

		[Token(Token = "0x40003A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public EWorkshopFileType m_eFileType;

		[Token(Token = "0x40003A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public bool m_bAcceptedForUse;
	}
	[Token(Token = "0x2000163")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D414", Offset = "0xA7D414")]
	public struct RemoteStorageEnumerateWorkshopFilesResult_t
	{
		[Token(Token = "0x40003A7")]
		public const int k_iCallback = 1319;

		[Token(Token = "0x40003A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40003A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nResultsReturned;

		[Token(Token = "0x40003AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nTotalResultCount;

		[Token(Token = "0x40003AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PublishedFileId_t[] m_rgPublishedFileId;

		[Token(Token = "0x40003AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float[] m_rgScore;

		[Token(Token = "0x40003AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AppId_t m_nAppId;

		[Token(Token = "0x40003AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public uint m_unStartIndex;
	}
	[Token(Token = "0x2000164")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D428", Offset = "0xA7D428")]
	public struct RemoteStorageGetPublishedItemVoteDetailsResult_t
	{
		[Token(Token = "0x40003AF")]
		public const int k_iCallback = 1320;

		[Token(Token = "0x40003B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40003B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_unPublishedFileId;

		[Token(Token = "0x40003B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_nVotesFor;

		[Token(Token = "0x40003B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int m_nVotesAgainst;

		[Token(Token = "0x40003B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int m_nReports;

		[Token(Token = "0x40003B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float m_fScore;
	}
	[Token(Token = "0x2000165")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D43C", Offset = "0xA7D43C")]
	public struct RemoteStoragePublishedFileSubscribed_t
	{
		[Token(Token = "0x40003B6")]
		public const int k_iCallback = 1321;

		[Token(Token = "0x40003B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40003B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x2000166")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D450", Offset = "0xA7D450")]
	public struct RemoteStoragePublishedFileUnsubscribed_t
	{
		[Token(Token = "0x40003B9")]
		public const int k_iCallback = 1322;

		[Token(Token = "0x40003BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40003BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x2000167")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D464", Offset = "0xA7D464")]
	public struct RemoteStoragePublishedFileDeleted_t
	{
		[Token(Token = "0x40003BC")]
		public const int k_iCallback = 1323;

		[Token(Token = "0x40003BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40003BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;
	}
	[Token(Token = "0x2000168")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D478", Offset = "0xA7D478")]
	public struct RemoteStorageUpdateUserPublishedItemVoteResult_t
	{
		[Token(Token = "0x40003BF")]
		public const int k_iCallback = 1324;

		[Token(Token = "0x40003C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40003C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x2000169")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D48C", Offset = "0xA7D48C")]
	public struct RemoteStorageUserVoteDetails_t
	{
		[Token(Token = "0x40003C2")]
		public const int k_iCallback = 1325;

		[Token(Token = "0x40003C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40003C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40003C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EWorkshopVote m_eVote;
	}
	[Token(Token = "0x200016A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D4A0", Offset = "0xA7D4A0")]
	public struct RemoteStorageEnumerateUserSharedWorkshopFilesResult_t
	{
		[Token(Token = "0x40003C6")]
		public const int k_iCallback = 1326;

		[Token(Token = "0x40003C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40003C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nResultsReturned;

		[Token(Token = "0x40003C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nTotalResultCount;

		[Token(Token = "0x40003CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PublishedFileId_t[] m_rgPublishedFileId;
	}
	[Token(Token = "0x200016B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D4B4", Offset = "0xA7D4B4")]
	public struct RemoteStorageSetUserPublishedFileActionResult_t
	{
		[Token(Token = "0x40003CB")]
		public const int k_iCallback = 1327;

		[Token(Token = "0x40003CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40003CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40003CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EWorkshopFileAction m_eAction;
	}
	[Token(Token = "0x200016C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D4C8", Offset = "0xA7D4C8")]
	public struct RemoteStorageEnumeratePublishedFilesByUserActionResult_t
	{
		[Token(Token = "0x40003CF")]
		public const int k_iCallback = 1328;

		[Token(Token = "0x40003D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40003D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EWorkshopFileAction m_eAction;

		[Token(Token = "0x40003D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nResultsReturned;

		[Token(Token = "0x40003D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nTotalResultCount;

		[Token(Token = "0x40003D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PublishedFileId_t[] m_rgPublishedFileId;

		[Token(Token = "0x40003D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint[] m_rgRTimeUpdated;
	}
	[Token(Token = "0x200016D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D4DC", Offset = "0xA7D4DC")]
	public struct RemoteStoragePublishFileProgress_t
	{
		[Token(Token = "0x40003D6")]
		public const int k_iCallback = 1329;

		[Token(Token = "0x40003D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public double m_dPercentFile;

		[Token(Token = "0x40003D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool m_bPreview;
	}
	[Token(Token = "0x200016E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D4F0", Offset = "0xA7D4F0")]
	public struct RemoteStoragePublishedFileUpdated_t
	{
		[Token(Token = "0x40003D9")]
		public const int k_iCallback = 1330;

		[Token(Token = "0x40003DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40003DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public AppId_t m_nAppID;

		[Token(Token = "0x40003DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public UGCHandle_t m_hFile;
	}
	[Token(Token = "0x200016F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D504", Offset = "0xA7D504")]
	public struct ScreenshotReady_t
	{
		[Token(Token = "0x40003DD")]
		public const int k_iCallback = 2301;

		[Token(Token = "0x40003DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ScreenshotHandle m_hLocal;

		[Token(Token = "0x40003DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000170")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D518", Offset = "0xA7D518")]
	public struct ScreenshotRequested_t
	{
		[Token(Token = "0x40003E0")]
		public const int k_iCallback = 2302;
	}
	[Token(Token = "0x2000171")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D52C", Offset = "0xA7D52C")]
	public struct SteamUGCQueryCompleted_t
	{
		[Token(Token = "0x40003E1")]
		public const int k_iCallback = 3401;

		[Token(Token = "0x40003E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public UGCQueryHandle_t m_handle;

		[Token(Token = "0x40003E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x40003E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_unNumResultsReturned;

		[Token(Token = "0x40003E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public uint m_unTotalMatchingResults;

		[Token(Token = "0x40003E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool m_bCachedData;
	}
	[Token(Token = "0x2000172")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D540", Offset = "0xA7D540")]
	public struct SteamUGCRequestUGCDetailsResult_t
	{
		[Token(Token = "0x40003E7")]
		public const int k_iCallback = 3402;

		[Token(Token = "0x40003E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamUGCDetails_t m_details;

		[Token(Token = "0x40003E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool m_bCachedData;
	}
	[Token(Token = "0x2000173")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D554", Offset = "0xA7D554")]
	public struct CreateItemResult_t
	{
		[Token(Token = "0x40003EA")]
		public const int k_iCallback = 3403;

		[Token(Token = "0x40003EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40003EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40003ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
	}
	[Token(Token = "0x2000174")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D568", Offset = "0xA7D568")]
	public struct SubmitItemUpdateResult_t
	{
		[Token(Token = "0x40003EE")]
		public const int k_iCallback = 3404;

		[Token(Token = "0x40003EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x40003F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public bool m_bUserNeedsToAcceptWorkshopLegalAgreement;
	}
	[Token(Token = "0x2000175")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D57C", Offset = "0xA7D57C")]
	public struct ItemInstalled_t
	{
		[Token(Token = "0x40003F1")]
		public const int k_iCallback = 3405;

		[Token(Token = "0x40003F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_unAppID;

		[Token(Token = "0x40003F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;
	}
	[Token(Token = "0x2000176")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D590", Offset = "0xA7D590")]
	public struct DownloadItemResult_t
	{
		[Token(Token = "0x40003F4")]
		public const int k_iCallback = 3406;

		[Token(Token = "0x40003F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public AppId_t m_unAppID;

		[Token(Token = "0x40003F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40003F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000177")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D5A4", Offset = "0xA7D5A4")]
	public struct UserFavoriteItemsListChanged_t
	{
		[Token(Token = "0x40003F8")]
		public const int k_iCallback = 3407;

		[Token(Token = "0x40003F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40003FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x40003FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bWasAddRequest;
	}
	[Token(Token = "0x2000178")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D5B8", Offset = "0xA7D5B8")]
	public struct SetUserItemVoteResult_t
	{
		[Token(Token = "0x40003FC")]
		public const int k_iCallback = 3408;

		[Token(Token = "0x40003FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40003FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x40003FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bVoteUp;
	}
	[Token(Token = "0x2000179")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D5CC", Offset = "0xA7D5CC")]
	public struct GetUserItemVoteResult_t
	{
		[Token(Token = "0x4000400")]
		public const int k_iCallback = 3409;

		[Token(Token = "0x4000401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x4000402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x4000403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool m_bVotedUp;

		[Token(Token = "0x4000404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
		public bool m_bVotedDown;

		[Token(Token = "0x4000405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		public bool m_bVoteSkipped;
	}
	[Token(Token = "0x200017A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D5E0", Offset = "0xA7D5E0")]
	public struct SteamUnifiedMessagesSendMethodResult_t
	{
		[Token(Token = "0x4000406")]
		public const int k_iCallback = 2501;

		[Token(Token = "0x4000407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ClientUnifiedMessageHandle m_hHandle;

		[Token(Token = "0x4000408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_unContext;

		[Token(Token = "0x4000409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public EResult m_eResult;

		[Token(Token = "0x400040A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public uint m_unResponseSize;
	}
	[Token(Token = "0x200017B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D5F4", Offset = "0xA7D5F4")]
	public struct SteamServersConnected_t
	{
		[Token(Token = "0x400040B")]
		public const int k_iCallback = 101;
	}
	[Token(Token = "0x200017C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D608", Offset = "0xA7D608")]
	public struct SteamServerConnectFailure_t
	{
		[Token(Token = "0x400040C")]
		public const int k_iCallback = 102;

		[Token(Token = "0x400040D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x200017D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D61C", Offset = "0xA7D61C")]
	public struct SteamServersDisconnected_t
	{
		[Token(Token = "0x400040E")]
		public const int k_iCallback = 103;

		[Token(Token = "0x400040F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x200017E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D630", Offset = "0xA7D630")]
	public struct ClientGameServerDeny_t
	{
		[Token(Token = "0x4000410")]
		public const int k_iCallback = 113;

		[Token(Token = "0x4000411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_uAppID;

		[Token(Token = "0x4000412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_unGameServerIP;

		[Token(Token = "0x4000413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ushort m_usGameServerPort;

		[Token(Token = "0x4000414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA")]
		public ushort m_bSecure;

		[Token(Token = "0x4000415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_uReason;
	}
	[Token(Token = "0x200017F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D644", Offset = "0xA7D644")]
	public struct IPCFailure_t
	{
		[Token(Token = "0x4000416")]
		public const int k_iCallback = 117;

		[Token(Token = "0x4000417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_eFailureType;
	}
	[Token(Token = "0x2000180")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D658", Offset = "0xA7D658")]
	public struct LicensesUpdated_t
	{
		[Token(Token = "0x4000418")]
		public const int k_iCallback = 125;
	}
	[Token(Token = "0x2000181")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D66C", Offset = "0xA7D66C")]
	public struct ValidateAuthTicketResponse_t
	{
		[Token(Token = "0x4000419")]
		public const int k_iCallback = 143;

		[Token(Token = "0x400041A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_SteamID;

		[Token(Token = "0x400041B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EAuthSessionResponse m_eAuthSessionResponse;

		[Token(Token = "0x400041C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public CSteamID m_OwnerSteamID;
	}
	[Token(Token = "0x2000182")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D680", Offset = "0xA7D680")]
	public struct MicroTxnAuthorizationResponse_t
	{
		[Token(Token = "0x400041D")]
		public const int k_iCallback = 152;

		[Token(Token = "0x400041E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_unAppID;

		[Token(Token = "0x400041F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ulong m_ulOrderID;

		[Token(Token = "0x4000420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte m_bAuthorized;
	}
	[Token(Token = "0x2000183")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D694", Offset = "0xA7D694")]
	public struct EncryptedAppTicketResponse_t
	{
		[Token(Token = "0x4000421")]
		public const int k_iCallback = 154;

		[Token(Token = "0x4000422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000184")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D6A8", Offset = "0xA7D6A8")]
	public struct GetAuthSessionTicketResponse_t
	{
		[Token(Token = "0x4000423")]
		public const int k_iCallback = 163;

		[Token(Token = "0x4000424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public HAuthTicket m_hAuthTicket;

		[Token(Token = "0x4000425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000185")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D6BC", Offset = "0xA7D6BC")]
	public struct GameWebCallback_t
	{
		[Token(Token = "0x4000426")]
		public const int k_iCallback = 164;

		[Token(Token = "0x4000427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_szURL;
	}
	[Token(Token = "0x2000186")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D6D0", Offset = "0xA7D6D0")]
	public struct StoreAuthURLResponse_t
	{
		[Token(Token = "0x4000428")]
		public const int k_iCallback = 165;

		[Token(Token = "0x4000429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_szURL;
	}
	[StructLayout(2)]
	[Token(Token = "0x2000187")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D6E4", Offset = "0xA7D6E4")]
	public struct UserStatsReceived_t
	{
		[Token(Token = "0x400042A")]
		public const int k_iCallback = 1101;

		[Token(Token = "0x400042B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x400042C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x400042D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x2000188")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D6F8", Offset = "0xA7D6F8")]
	public struct UserStatsStored_t
	{
		[Token(Token = "0x400042E")]
		public const int k_iCallback = 1102;

		[Token(Token = "0x400042F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x4000430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000189")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D70C", Offset = "0xA7D70C")]
	public struct UserAchievementStored_t
	{
		[Token(Token = "0x4000431")]
		public const int k_iCallback = 1103;

		[Token(Token = "0x4000432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x4000433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public bool m_bGroupAchievement;

		[Token(Token = "0x4000434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string m_rgchAchievementName;

		[Token(Token = "0x4000435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public uint m_nCurProgress;

		[Token(Token = "0x4000436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint m_nMaxProgress;
	}
	[Token(Token = "0x200018A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D720", Offset = "0xA7D720")]
	public struct LeaderboardFindResult_t
	{
		[Token(Token = "0x4000437")]
		public const int k_iCallback = 1104;

		[Token(Token = "0x4000438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamLeaderboard_t m_hSteamLeaderboard;

		[Token(Token = "0x4000439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public byte m_bLeaderboardFound;
	}
	[Token(Token = "0x200018B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D734", Offset = "0xA7D734")]
	public struct LeaderboardScoresDownloaded_t
	{
		[Token(Token = "0x400043A")]
		public const int k_iCallback = 1105;

		[Token(Token = "0x400043B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamLeaderboard_t m_hSteamLeaderboard;

		[Token(Token = "0x400043C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public SteamLeaderboardEntries_t m_hSteamLeaderboardEntries;

		[Token(Token = "0x400043D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_cEntryCount;
	}
	[Token(Token = "0x200018C")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D748", Offset = "0xA7D748")]
	public struct LeaderboardScoreUploaded_t
	{
		[Token(Token = "0x400043E")]
		public const int k_iCallback = 1106;

		[Token(Token = "0x400043F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bSuccess;

		[Token(Token = "0x4000440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public SteamLeaderboard_t m_hSteamLeaderboard;

		[Token(Token = "0x4000441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_nScore;

		[Token(Token = "0x4000442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public byte m_bScoreChanged;

		[Token(Token = "0x4000443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int m_nGlobalRankNew;

		[Token(Token = "0x4000444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int m_nGlobalRankPrevious;
	}
	[Token(Token = "0x200018D")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D75C", Offset = "0xA7D75C")]
	public struct NumberOfCurrentPlayers_t
	{
		[Token(Token = "0x4000445")]
		public const int k_iCallback = 1107;

		[Token(Token = "0x4000446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bSuccess;

		[Token(Token = "0x4000447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_cPlayers;
	}
	[Token(Token = "0x200018E")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D770", Offset = "0xA7D770")]
	public struct UserStatsUnloaded_t
	{
		[Token(Token = "0x4000448")]
		public const int k_iCallback = 1108;

		[Token(Token = "0x4000449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDUser;
	}
	[Token(Token = "0x200018F")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D784", Offset = "0xA7D784")]
	public struct UserAchievementIconFetched_t
	{
		[Token(Token = "0x400044A")]
		public const int k_iCallback = 1109;

		[Token(Token = "0x400044B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CGameID m_nGameID;

		[Token(Token = "0x400044C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_rgchAchievementName;

		[Token(Token = "0x400044D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool m_bAchieved;

		[Token(Token = "0x400044E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int m_nIconHandle;
	}
	[Token(Token = "0x2000190")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D798", Offset = "0xA7D798")]
	public struct GlobalAchievementPercentagesReady_t
	{
		[Token(Token = "0x400044F")]
		public const int k_iCallback = 1110;

		[Token(Token = "0x4000450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x4000451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000191")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D7AC", Offset = "0xA7D7AC")]
	public struct LeaderboardUGCSet_t
	{
		[Token(Token = "0x4000452")]
		public const int k_iCallback = 1111;

		[Token(Token = "0x4000453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public SteamLeaderboard_t m_hSteamLeaderboard;
	}
	[Token(Token = "0x2000192")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D7C0", Offset = "0xA7D7C0")]
	public struct GlobalStatsReceived_t
	{
		[Token(Token = "0x4000455")]
		public const int k_iCallback = 1112;

		[Token(Token = "0x4000456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_nGameID;

		[Token(Token = "0x4000457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;
	}
	[Token(Token = "0x2000193")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D7D4", Offset = "0xA7D7D4")]
	public struct IPCountry_t
	{
		[Token(Token = "0x4000458")]
		public const int k_iCallback = 701;
	}
	[Token(Token = "0x2000194")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D7E8", Offset = "0xA7D7E8")]
	public struct LowBatteryPower_t
	{
		[Token(Token = "0x4000459")]
		public const int k_iCallback = 702;

		[Token(Token = "0x400045A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_nMinutesBatteryLeft;
	}
	[Token(Token = "0x2000195")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D7FC", Offset = "0xA7D7FC")]
	public struct SteamAPICallCompleted_t
	{
		[Token(Token = "0x400045B")]
		public const int k_iCallback = 703;

		[Token(Token = "0x400045C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamAPICall_t m_hAsyncCall;
	}
	[Token(Token = "0x2000196")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D810", Offset = "0xA7D810")]
	public struct SteamShutdown_t
	{
		[Token(Token = "0x400045D")]
		public const int k_iCallback = 704;
	}
	[Token(Token = "0x2000197")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D824", Offset = "0xA7D824")]
	public struct CheckFileSignature_t
	{
		[Token(Token = "0x400045E")]
		public const int k_iCallback = 705;

		[Token(Token = "0x400045F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ECheckFileSignature m_eCheckFileSignature;
	}
	[Token(Token = "0x2000198")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D838", Offset = "0xA7D838")]
	public struct GamepadTextInputDismissed_t
	{
		[Token(Token = "0x4000460")]
		public const int k_iCallback = 714;

		[Token(Token = "0x4000461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool m_bSubmitted;

		[Token(Token = "0x4000462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public uint m_unSubmittedText;
	}
	[Token(Token = "0x2000199")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D84C", Offset = "0xA7D84C")]
	public struct BroadcastUploadStart_t
	{
		[Token(Token = "0x4000463")]
		public const int k_iCallback = 4604;
	}
	[Token(Token = "0x200019A")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D860", Offset = "0xA7D860")]
	public struct BroadcastUploadStop_t
	{
		[Token(Token = "0x4000464")]
		public const int k_iCallback = 4605;

		[Token(Token = "0x4000465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EBroadcastUploadResult m_eResult;
	}
	[Token(Token = "0x200019B")]
	[AttributeAttribute(Name = "CallbackIdentityAttribute", RVA = "0xA7D874", Offset = "0xA7D874")]
	public struct GetVideoURLResult_t
	{
		[Token(Token = "0x4000466")]
		public const int k_iCallback = 4611;

		[Token(Token = "0x4000467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public EResult m_eResult;

		[Token(Token = "0x4000468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public AppId_t m_unVideoAppID;

		[Token(Token = "0x4000469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_rgchURL;
	}
	[Token(Token = "0x200019C")]
	public static class Constants
	{
		[Token(Token = "0x400046A")]
		public const string STEAMAPPLIST_INTERFACE_VERSION = "STEAMAPPLIST_INTERFACE_VERSION001";

		[Token(Token = "0x400046B")]
		public const string STEAMAPPS_INTERFACE_VERSION = "STEAMAPPS_INTERFACE_VERSION007";

		[Token(Token = "0x400046C")]
		public const string STEAMAPPTICKET_INTERFACE_VERSION = "STEAMAPPTICKET_INTERFACE_VERSION001";

		[Token(Token = "0x400046D")]
		public const string STEAMCLIENT_INTERFACE_VERSION = "SteamClient017";

		[Token(Token = "0x400046E")]
		public const string STEAMCONTROLLER_INTERFACE_VERSION = "STEAMCONTROLLER_INTERFACE_VERSION";

		[Token(Token = "0x400046F")]
		public const string STEAMFRIENDS_INTERFACE_VERSION = "SteamFriends015";

		[Token(Token = "0x4000470")]
		public const string STEAMGAMECOORDINATOR_INTERFACE_VERSION = "SteamGameCoordinator001";

		[Token(Token = "0x4000471")]
		public const string STEAMGAMESERVER_INTERFACE_VERSION = "SteamGameServer012";

		[Token(Token = "0x4000472")]
		public const string STEAMGAMESERVERSTATS_INTERFACE_VERSION = "SteamGameServerStats001";

		[Token(Token = "0x4000473")]
		public const string STEAMHTMLSURFACE_INTERFACE_VERSION = "STEAMHTMLSURFACE_INTERFACE_VERSION_003";

		[Token(Token = "0x4000474")]
		public const string STEAMHTTP_INTERFACE_VERSION = "STEAMHTTP_INTERFACE_VERSION002";

		[Token(Token = "0x4000475")]
		public const string STEAMINVENTORY_INTERFACE_VERSION = "STEAMINVENTORY_INTERFACE_V001";

		[Token(Token = "0x4000476")]
		public const string STEAMMATCHMAKING_INTERFACE_VERSION = "SteamMatchMaking009";

		[Token(Token = "0x4000477")]
		public const string STEAMMATCHMAKINGSERVERS_INTERFACE_VERSION = "SteamMatchMakingServers002";

		[Token(Token = "0x4000478")]
		public const string STEAMMUSIC_INTERFACE_VERSION = "STEAMMUSIC_INTERFACE_VERSION001";

		[Token(Token = "0x4000479")]
		public const string STEAMMUSICREMOTE_INTERFACE_VERSION = "STEAMMUSICREMOTE_INTERFACE_VERSION001";

		[Token(Token = "0x400047A")]
		public const string STEAMNETWORKING_INTERFACE_VERSION = "SteamNetworking005";

		[Token(Token = "0x400047B")]
		public const string STEAMREMOTESTORAGE_INTERFACE_VERSION = "STEAMREMOTESTORAGE_INTERFACE_VERSION012";

		[Token(Token = "0x400047C")]
		public const string STEAMSCREENSHOTS_INTERFACE_VERSION = "STEAMSCREENSHOTS_INTERFACE_VERSION002";

		[Token(Token = "0x400047D")]
		public const string STEAMUGC_INTERFACE_VERSION = "STEAMUGC_INTERFACE_VERSION007";

		[Token(Token = "0x400047E")]
		public const string STEAMUNIFIEDMESSAGES_INTERFACE_VERSION = "STEAMUNIFIEDMESSAGES_INTERFACE_VERSION001";

		[Token(Token = "0x400047F")]
		public const string STEAMUSER_INTERFACE_VERSION = "SteamUser018";

		[Token(Token = "0x4000480")]
		public const string STEAMUSERSTATS_INTERFACE_VERSION = "STEAMUSERSTATS_INTERFACE_VERSION011";

		[Token(Token = "0x4000481")]
		public const string STEAMUTILS_INTERFACE_VERSION = "SteamUtils007";

		[Token(Token = "0x4000482")]
		public const string STEAMVIDEO_INTERFACE_VERSION = "STEAMVIDEO_INTERFACE_V001";

		[Token(Token = "0x4000483")]
		public const int k_cubAppProofOfPurchaseKeyMax = 64;

		[Token(Token = "0x4000484")]
		public const int k_iSteamUserCallbacks = 100;

		[Token(Token = "0x4000485")]
		public const int k_iSteamGameServerCallbacks = 200;

		[Token(Token = "0x4000486")]
		public const int k_iSteamFriendsCallbacks = 300;

		[Token(Token = "0x4000487")]
		public const int k_iSteamBillingCallbacks = 400;

		[Token(Token = "0x4000488")]
		public const int k_iSteamMatchmakingCallbacks = 500;

		[Token(Token = "0x4000489")]
		public const int k_iSteamContentServerCallbacks = 600;

		[Token(Token = "0x400048A")]
		public const int k_iSteamUtilsCallbacks = 700;

		[Token(Token = "0x400048B")]
		public const int k_iClientFriendsCallbacks = 800;

		[Token(Token = "0x400048C")]
		public const int k_iClientUserCallbacks = 900;

		[Token(Token = "0x400048D")]
		public const int k_iSteamAppsCallbacks = 1000;

		[Token(Token = "0x400048E")]
		public const int k_iSteamUserStatsCallbacks = 1100;

		[Token(Token = "0x400048F")]
		public const int k_iSteamNetworkingCallbacks = 1200;

		[Token(Token = "0x4000490")]
		public const int k_iClientRemoteStorageCallbacks = 1300;

		[Token(Token = "0x4000491")]
		public const int k_iClientDepotBuilderCallbacks = 1400;

		[Token(Token = "0x4000492")]
		public const int k_iSteamGameServerItemsCallbacks = 1500;

		[Token(Token = "0x4000493")]
		public const int k_iClientUtilsCallbacks = 1600;

		[Token(Token = "0x4000494")]
		public const int k_iSteamGameCoordinatorCallbacks = 1700;

		[Token(Token = "0x4000495")]
		public const int k_iSteamGameServerStatsCallbacks = 1800;

		[Token(Token = "0x4000496")]
		public const int k_iSteam2AsyncCallbacks = 1900;

		[Token(Token = "0x4000497")]
		public const int k_iSteamGameStatsCallbacks = 2000;

		[Token(Token = "0x4000498")]
		public const int k_iClientHTTPCallbacks = 2100;

		[Token(Token = "0x4000499")]
		public const int k_iClientScreenshotsCallbacks = 2200;

		[Token(Token = "0x400049A")]
		public const int k_iSteamScreenshotsCallbacks = 2300;

		[Token(Token = "0x400049B")]
		public const int k_iClientAudioCallbacks = 2400;

		[Token(Token = "0x400049C")]
		public const int k_iClientUnifiedMessagesCallbacks = 2500;

		[Token(Token = "0x400049D")]
		public const int k_iSteamStreamLauncherCallbacks = 2600;

		[Token(Token = "0x400049E")]
		public const int k_iClientControllerCallbacks = 2700;

		[Token(Token = "0x400049F")]
		public const int k_iSteamControllerCallbacks = 2800;

		[Token(Token = "0x40004A0")]
		public const int k_iClientParentalSettingsCallbacks = 2900;

		[Token(Token = "0x40004A1")]
		public const int k_iClientDeviceAuthCallbacks = 3000;

		[Token(Token = "0x40004A2")]
		public const int k_iClientNetworkDeviceManagerCallbacks = 3100;

		[Token(Token = "0x40004A3")]
		public const int k_iClientMusicCallbacks = 3200;

		[Token(Token = "0x40004A4")]
		public const int k_iClientRemoteClientManagerCallbacks = 3300;

		[Token(Token = "0x40004A5")]
		public const int k_iClientUGCCallbacks = 3400;

		[Token(Token = "0x40004A6")]
		public const int k_iSteamStreamClientCallbacks = 3500;

		[Token(Token = "0x40004A7")]
		public const int k_IClientProductBuilderCallbacks = 3600;

		[Token(Token = "0x40004A8")]
		public const int k_iClientShortcutsCallbacks = 3700;

		[Token(Token = "0x40004A9")]
		public const int k_iClientRemoteControlManagerCallbacks = 3800;

		[Token(Token = "0x40004AA")]
		public const int k_iSteamAppListCallbacks = 3900;

		[Token(Token = "0x40004AB")]
		public const int k_iSteamMusicCallbacks = 4000;

		[Token(Token = "0x40004AC")]
		public const int k_iSteamMusicRemoteCallbacks = 4100;

		[Token(Token = "0x40004AD")]
		public const int k_iClientVRCallbacks = 4200;

		[Token(Token = "0x40004AE")]
		public const int k_iClientReservedCallbacks = 4300;

		[Token(Token = "0x40004AF")]
		public const int k_iSteamReservedCallbacks = 4400;

		[Token(Token = "0x40004B0")]
		public const int k_iSteamHTMLSurfaceCallbacks = 4500;

		[Token(Token = "0x40004B1")]
		public const int k_iClientVideoCallbacks = 4600;

		[Token(Token = "0x40004B2")]
		public const int k_iClientInventoryCallbacks = 4700;

		[Token(Token = "0x40004B3")]
		public const int k_cchMaxFriendsGroupName = 64;

		[Token(Token = "0x40004B4")]
		public const int k_cFriendsGroupLimit = 100;

		[Token(Token = "0x40004B5")]
		public const int k_cEnumerateFollowersMax = 50;

		[Token(Token = "0x40004B6")]
		public const int k_cchPersonaNameMax = 128;

		[Token(Token = "0x40004B7")]
		public const int k_cwchPersonaNameMax = 32;

		[Token(Token = "0x40004B8")]
		public const int k_cubChatMetadataMax = 8192;

		[Token(Token = "0x40004B9")]
		public const int k_cchMaxRichPresenceKeys = 20;

		[Token(Token = "0x40004BA")]
		public const int k_cchMaxRichPresenceKeyLength = 64;

		[Token(Token = "0x40004BB")]
		public const int k_cchMaxRichPresenceValueLength = 256;

		[Token(Token = "0x40004BC")]
		public const int k_unServerFlagNone = 0;

		[Token(Token = "0x40004BD")]
		public const int k_unServerFlagActive = 1;

		[Token(Token = "0x40004BE")]
		public const int k_unServerFlagSecure = 2;

		[Token(Token = "0x40004BF")]
		public const int k_unServerFlagDedicated = 4;

		[Token(Token = "0x40004C0")]
		public const int k_unServerFlagLinux = 8;

		[Token(Token = "0x40004C1")]
		public const int k_unServerFlagPassworded = 16;

		[Token(Token = "0x40004C2")]
		public const int k_unServerFlagPrivate = 32;

		[Token(Token = "0x40004C3")]
		public const int k_unFavoriteFlagNone = 0;

		[Token(Token = "0x40004C4")]
		public const int k_unFavoriteFlagFavorite = 1;

		[Token(Token = "0x40004C5")]
		public const int k_unFavoriteFlagHistory = 2;

		[Token(Token = "0x40004C6")]
		public const int k_unMaxCloudFileChunkSize = 104857600;

		[Token(Token = "0x40004C7")]
		public const int k_cchPublishedDocumentTitleMax = 129;

		[Token(Token = "0x40004C8")]
		public const int k_cchPublishedDocumentDescriptionMax = 8000;

		[Token(Token = "0x40004C9")]
		public const int k_cchPublishedDocumentChangeDescriptionMax = 8000;

		[Token(Token = "0x40004CA")]
		public const int k_unEnumeratePublishedFilesMaxResults = 50;

		[Token(Token = "0x40004CB")]
		public const int k_cchTagListMax = 1025;

		[Token(Token = "0x40004CC")]
		public const int k_cchFilenameMax = 260;

		[Token(Token = "0x40004CD")]
		public const int k_cchPublishedFileURLMax = 256;

		[Token(Token = "0x40004CE")]
		public const int k_nScreenshotMaxTaggedUsers = 32;

		[Token(Token = "0x40004CF")]
		public const int k_nScreenshotMaxTaggedPublishedFiles = 32;

		[Token(Token = "0x40004D0")]
		public const int k_cubUFSTagTypeMax = 255;

		[Token(Token = "0x40004D1")]
		public const int k_cubUFSTagValueMax = 255;

		[Token(Token = "0x40004D2")]
		public const int k_ScreenshotThumbWidth = 200;

		[Token(Token = "0x40004D3")]
		public const int kNumUGCResultsPerPage = 50;

		[Token(Token = "0x40004D4")]
		public const int k_cchDeveloperMetadataMax = 5000;

		[Token(Token = "0x40004D5")]
		public const int k_cchStatNameMax = 128;

		[Token(Token = "0x40004D6")]
		public const int k_cchLeaderboardNameMax = 128;

		[Token(Token = "0x40004D7")]
		public const int k_cLeaderboardDetailsMax = 64;

		[Token(Token = "0x40004D8")]
		public const int k_cbMaxGameServerGameDir = 32;

		[Token(Token = "0x40004D9")]
		public const int k_cbMaxGameServerMapName = 32;

		[Token(Token = "0x40004DA")]
		public const int k_cbMaxGameServerGameDescription = 64;

		[Token(Token = "0x40004DB")]
		public const int k_cbMaxGameServerName = 64;

		[Token(Token = "0x40004DC")]
		public const int k_cbMaxGameServerTags = 128;

		[Token(Token = "0x40004DD")]
		public const int k_cbMaxGameServerGameData = 2048;

		[Token(Token = "0x40004DE")]
		public const int k_unSteamAccountIDMask = -1;

		[Token(Token = "0x40004DF")]
		public const int k_unSteamAccountInstanceMask = 1048575;

		[Token(Token = "0x40004E0")]
		public const int k_unSteamUserDesktopInstance = 1;

		[Token(Token = "0x40004E1")]
		public const int k_unSteamUserConsoleInstance = 2;

		[Token(Token = "0x40004E2")]
		public const int k_unSteamUserWebInstance = 4;

		[Token(Token = "0x40004E3")]
		public const int k_cchGameExtraInfoMax = 64;

		[Token(Token = "0x40004E4")]
		public const int k_nSteamEncryptedAppTicketSymmetricKeyLen = 32;

		[Token(Token = "0x40004E5")]
		public const int k_cubSaltSize = 8;

		[Token(Token = "0x40004E6")]
		public const ulong k_GIDNil = ulong.MaxValue;

		[Token(Token = "0x40004E7")]
		public const ulong k_TxnIDNil = ulong.MaxValue;

		[Token(Token = "0x40004E8")]
		public const ulong k_TxnIDUnknown = 0uL;

		[Token(Token = "0x40004E9")]
		public const int k_uPackageIdFreeSub = 0;

		[Token(Token = "0x40004EA")]
		public const int k_uPackageIdInvalid = -1;

		[Token(Token = "0x40004EB")]
		public const ulong k_ulAssetClassIdInvalid = 0uL;

		[Token(Token = "0x40004EC")]
		public const int k_uPhysicalItemIdInvalid = 0;

		[Token(Token = "0x40004ED")]
		public const int k_uCellIDInvalid = -1;

		[Token(Token = "0x40004EE")]
		public const int k_uPartnerIdInvalid = 0;

		[Token(Token = "0x40004EF")]
		public const int MAX_STEAM_CONTROLLERS = 16;

		[Token(Token = "0x40004F0")]
		public const int STEAM_RIGHT_TRIGGER_MASK = 1;

		[Token(Token = "0x40004F1")]
		public const int STEAM_LEFT_TRIGGER_MASK = 2;

		[Token(Token = "0x40004F2")]
		public const int STEAM_RIGHT_BUMPER_MASK = 4;

		[Token(Token = "0x40004F3")]
		public const int STEAM_LEFT_BUMPER_MASK = 8;

		[Token(Token = "0x40004F4")]
		public const int STEAM_BUTTON_0_MASK = 16;

		[Token(Token = "0x40004F5")]
		public const int STEAM_BUTTON_1_MASK = 32;

		[Token(Token = "0x40004F6")]
		public const int STEAM_BUTTON_2_MASK = 64;

		[Token(Token = "0x40004F7")]
		public const int STEAM_BUTTON_3_MASK = 128;

		[Token(Token = "0x40004F8")]
		public const int STEAM_TOUCH_0_MASK = 256;

		[Token(Token = "0x40004F9")]
		public const int STEAM_TOUCH_1_MASK = 512;

		[Token(Token = "0x40004FA")]
		public const int STEAM_TOUCH_2_MASK = 1024;

		[Token(Token = "0x40004FB")]
		public const int STEAM_TOUCH_3_MASK = 2048;

		[Token(Token = "0x40004FC")]
		public const int STEAM_BUTTON_MENU_MASK = 4096;

		[Token(Token = "0x40004FD")]
		public const int STEAM_BUTTON_STEAM_MASK = 8192;

		[Token(Token = "0x40004FE")]
		public const int STEAM_BUTTON_ESCAPE_MASK = 16384;

		[Token(Token = "0x40004FF")]
		public const int STEAM_BUTTON_BACK_LEFT_MASK = 32768;

		[Token(Token = "0x4000500")]
		public const int STEAM_BUTTON_BACK_RIGHT_MASK = 65536;

		[Token(Token = "0x4000501")]
		public const int STEAM_BUTTON_LEFTPAD_CLICKED_MASK = 131072;

		[Token(Token = "0x4000502")]
		public const int STEAM_BUTTON_RIGHTPAD_CLICKED_MASK = 262144;

		[Token(Token = "0x4000503")]
		public const int STEAM_LEFTPAD_FINGERDOWN_MASK = 524288;

		[Token(Token = "0x4000504")]
		public const int STEAM_RIGHTPAD_FINGERDOWN_MASK = 1048576;

		[Token(Token = "0x4000505")]
		public const int STEAM_JOYSTICK_BUTTON_MASK = 4194304;

		[Token(Token = "0x4000506")]
		public const short MASTERSERVERUPDATERPORT_USEGAMESOCKETSHARE = -1;

		[Token(Token = "0x4000507")]
		public const int INVALID_HTTPREQUEST_HANDLE = 0;

		[Token(Token = "0x4000508")]
		public const byte k_nMaxLobbyKeyLength = byte.MaxValue;

		[Token(Token = "0x4000509")]
		public const int k_SteamMusicNameMaxLength = 255;

		[Token(Token = "0x400050A")]
		public const int k_SteamMusicPNGMaxLength = 65535;

		[Token(Token = "0x400050B")]
		public const int QUERY_PORT_NOT_INITIALIZED = 65535;

		[Token(Token = "0x400050C")]
		public const int QUERY_PORT_ERROR = 65534;
	}
	[Token(Token = "0x200019D")]
	public enum ERegisterActivationCodeResult
	{
		[Token(Token = "0x400050E")]
		k_ERegisterActivationCodeResultOK,
		[Token(Token = "0x400050F")]
		k_ERegisterActivationCodeResultFail,
		[Token(Token = "0x4000510")]
		k_ERegisterActivationCodeResultAlreadyRegistered,
		[Token(Token = "0x4000511")]
		k_ERegisterActivationCodeResultTimeout,
		[Token(Token = "0x4000512")]
		k_ERegisterActivationCodeAlreadyOwned
	}
	[Token(Token = "0x200019E")]
	public enum ESteamControllerPad
	{
		[Token(Token = "0x4000514")]
		k_ESteamControllerPad_Left,
		[Token(Token = "0x4000515")]
		k_ESteamControllerPad_Right
	}
	[Token(Token = "0x200019F")]
	public enum EFriendRelationship
	{
		[Token(Token = "0x4000517")]
		k_EFriendRelationshipNone,
		[Token(Token = "0x4000518")]
		k_EFriendRelationshipBlocked,
		[Token(Token = "0x4000519")]
		k_EFriendRelationshipRequestRecipient,
		[Token(Token = "0x400051A")]
		k_EFriendRelationshipFriend,
		[Token(Token = "0x400051B")]
		k_EFriendRelationshipRequestInitiator,
		[Token(Token = "0x400051C")]
		k_EFriendRelationshipIgnored,
		[Token(Token = "0x400051D")]
		k_EFriendRelationshipIgnoredFriend,
		[Token(Token = "0x400051E")]
		k_EFriendRelationshipSuggested,
		[Token(Token = "0x400051F")]
		k_EFriendRelationshipMax
	}
	[Token(Token = "0x20001A0")]
	public enum EPersonaState
	{
		[Token(Token = "0x4000521")]
		k_EPersonaStateOffline,
		[Token(Token = "0x4000522")]
		k_EPersonaStateOnline,
		[Token(Token = "0x4000523")]
		k_EPersonaStateBusy,
		[Token(Token = "0x4000524")]
		k_EPersonaStateAway,
		[Token(Token = "0x4000525")]
		k_EPersonaStateSnooze,
		[Token(Token = "0x4000526")]
		k_EPersonaStateLookingToTrade,
		[Token(Token = "0x4000527")]
		k_EPersonaStateLookingToPlay,
		[Token(Token = "0x4000528")]
		k_EPersonaStateMax
	}
	[Token(Token = "0x20001A1")]
	[Flags]
	public enum EFriendFlags
	{
		[Token(Token = "0x400052A")]
		k_EFriendFlagNone = 0,
		[Token(Token = "0x400052B")]
		k_EFriendFlagBlocked = 1,
		[Token(Token = "0x400052C")]
		k_EFriendFlagFriendshipRequested = 2,
		[Token(Token = "0x400052D")]
		k_EFriendFlagImmediate = 4,
		[Token(Token = "0x400052E")]
		k_EFriendFlagClanMember = 8,
		[Token(Token = "0x400052F")]
		k_EFriendFlagOnGameServer = 0x10,
		[Token(Token = "0x4000530")]
		k_EFriendFlagRequestingFriendship = 0x80,
		[Token(Token = "0x4000531")]
		k_EFriendFlagRequestingInfo = 0x100,
		[Token(Token = "0x4000532")]
		k_EFriendFlagIgnored = 0x200,
		[Token(Token = "0x4000533")]
		k_EFriendFlagIgnoredFriend = 0x400,
		[Token(Token = "0x4000534")]
		k_EFriendFlagSuggested = 0x800,
		[Token(Token = "0x4000535")]
		k_EFriendFlagAll = 0xFFFF
	}
	[Token(Token = "0x20001A2")]
	public enum EUserRestriction
	{
		[Token(Token = "0x4000537")]
		k_nUserRestrictionNone = 0,
		[Token(Token = "0x4000538")]
		k_nUserRestrictionUnknown = 1,
		[Token(Token = "0x4000539")]
		k_nUserRestrictionAnyChat = 2,
		[Token(Token = "0x400053A")]
		k_nUserRestrictionVoiceChat = 4,
		[Token(Token = "0x400053B")]
		k_nUserRestrictionGroupChat = 8,
		[Token(Token = "0x400053C")]
		k_nUserRestrictionRating = 0x10,
		[Token(Token = "0x400053D")]
		k_nUserRestrictionGameInvites = 0x20,
		[Token(Token = "0x400053E")]
		k_nUserRestrictionTrading = 0x40
	}
	[Token(Token = "0x20001A3")]
	public enum EOverlayToStoreFlag
	{
		[Token(Token = "0x4000540")]
		k_EOverlayToStoreFlag_None,
		[Token(Token = "0x4000541")]
		k_EOverlayToStoreFlag_AddToCart,
		[Token(Token = "0x4000542")]
		k_EOverlayToStoreFlag_AddToCartAndShow
	}
	[Token(Token = "0x20001A4")]
	[Flags]
	public enum EPersonaChange
	{
		[Token(Token = "0x4000544")]
		k_EPersonaChangeName = 1,
		[Token(Token = "0x4000545")]
		k_EPersonaChangeStatus = 2,
		[Token(Token = "0x4000546")]
		k_EPersonaChangeComeOnline = 4,
		[Token(Token = "0x4000547")]
		k_EPersonaChangeGoneOffline = 8,
		[Token(Token = "0x4000548")]
		k_EPersonaChangeGamePlayed = 0x10,
		[Token(Token = "0x4000549")]
		k_EPersonaChangeGameServer = 0x20,
		[Token(Token = "0x400054A")]
		k_EPersonaChangeAvatar = 0x40,
		[Token(Token = "0x400054B")]
		k_EPersonaChangeJoinedSource = 0x80,
		[Token(Token = "0x400054C")]
		k_EPersonaChangeLeftSource = 0x100,
		[Token(Token = "0x400054D")]
		k_EPersonaChangeRelationshipChanged = 0x200,
		[Token(Token = "0x400054E")]
		k_EPersonaChangeNameFirstSet = 0x400,
		[Token(Token = "0x400054F")]
		k_EPersonaChangeFacebookInfo = 0x800,
		[Token(Token = "0x4000550")]
		k_EPersonaChangeNickname = 0x1000,
		[Token(Token = "0x4000551")]
		k_EPersonaChangeSteamLevel = 0x2000
	}
	[Token(Token = "0x20001A5")]
	public enum EGCResults
	{
		[Token(Token = "0x4000553")]
		k_EGCResultOK,
		[Token(Token = "0x4000554")]
		k_EGCResultNoMessage,
		[Token(Token = "0x4000555")]
		k_EGCResultBufferTooSmall,
		[Token(Token = "0x4000556")]
		k_EGCResultNotLoggedOn,
		[Token(Token = "0x4000557")]
		k_EGCResultInvalidMessage
	}
	[Token(Token = "0x20001A6")]
	public enum EHTMLMouseButton
	{
		[Token(Token = "0x4000559")]
		eHTMLMouseButton_Left,
		[Token(Token = "0x400055A")]
		eHTMLMouseButton_Right,
		[Token(Token = "0x400055B")]
		eHTMLMouseButton_Middle
	}
	[Token(Token = "0x20001A7")]
	public enum EMouseCursor
	{
		[Token(Token = "0x400055D")]
		dc_user,
		[Token(Token = "0x400055E")]
		dc_none,
		[Token(Token = "0x400055F")]
		dc_arrow,
		[Token(Token = "0x4000560")]
		dc_ibeam,
		[Token(Token = "0x4000561")]
		dc_hourglass,
		[Token(Token = "0x4000562")]
		dc_waitarrow,
		[Token(Token = "0x4000563")]
		dc_crosshair,
		[Token(Token = "0x4000564")]
		dc_up,
		[Token(Token = "0x4000565")]
		dc_sizenw,
		[Token(Token = "0x4000566")]
		dc_sizese,
		[Token(Token = "0x4000567")]
		dc_sizene,
		[Token(Token = "0x4000568")]
		dc_sizesw,
		[Token(Token = "0x4000569")]
		dc_sizew,
		[Token(Token = "0x400056A")]
		dc_sizee,
		[Token(Token = "0x400056B")]
		dc_sizen,
		[Token(Token = "0x400056C")]
		dc_sizes,
		[Token(Token = "0x400056D")]
		dc_sizewe,
		[Token(Token = "0x400056E")]
		dc_sizens,
		[Token(Token = "0x400056F")]
		dc_sizeall,
		[Token(Token = "0x4000570")]
		dc_no,
		[Token(Token = "0x4000571")]
		dc_hand,
		[Token(Token = "0x4000572")]
		dc_blank,
		[Token(Token = "0x4000573")]
		dc_middle_pan,
		[Token(Token = "0x4000574")]
		dc_north_pan,
		[Token(Token = "0x4000575")]
		dc_north_east_pan,
		[Token(Token = "0x4000576")]
		dc_east_pan,
		[Token(Token = "0x4000577")]
		dc_south_east_pan,
		[Token(Token = "0x4000578")]
		dc_south_pan,
		[Token(Token = "0x4000579")]
		dc_south_west_pan,
		[Token(Token = "0x400057A")]
		dc_west_pan,
		[Token(Token = "0x400057B")]
		dc_north_west_pan,
		[Token(Token = "0x400057C")]
		dc_alias,
		[Token(Token = "0x400057D")]
		dc_cell,
		[Token(Token = "0x400057E")]
		dc_colresize,
		[Token(Token = "0x400057F")]
		dc_copycur,
		[Token(Token = "0x4000580")]
		dc_verticaltext,
		[Token(Token = "0x4000581")]
		dc_rowresize,
		[Token(Token = "0x4000582")]
		dc_zoomin,
		[Token(Token = "0x4000583")]
		dc_zoomout,
		[Token(Token = "0x4000584")]
		dc_help,
		[Token(Token = "0x4000585")]
		dc_custom,
		[Token(Token = "0x4000586")]
		dc_last
	}
	[Token(Token = "0x20001A8")]
	[Flags]
	public enum EHTMLKeyModifiers
	{
		[Token(Token = "0x4000588")]
		k_eHTMLKeyModifier_None = 0,
		[Token(Token = "0x4000589")]
		k_eHTMLKeyModifier_AltDown = 1,
		[Token(Token = "0x400058A")]
		k_eHTMLKeyModifier_CtrlDown = 2,
		[Token(Token = "0x400058B")]
		k_eHTMLKeyModifier_ShiftDown = 4
	}
	[Token(Token = "0x20001A9")]
	[Flags]
	public enum ESteamItemFlags
	{
		[Token(Token = "0x400058D")]
		k_ESteamItemNoTrade = 1,
		[Token(Token = "0x400058E")]
		k_ESteamItemRemoved = 0x100,
		[Token(Token = "0x400058F")]
		k_ESteamItemConsumed = 0x200
	}
	[Token(Token = "0x20001AA")]
	public enum ELobbyType
	{
		[Token(Token = "0x4000591")]
		k_ELobbyTypePrivate,
		[Token(Token = "0x4000592")]
		k_ELobbyTypeFriendsOnly,
		[Token(Token = "0x4000593")]
		k_ELobbyTypePublic,
		[Token(Token = "0x4000594")]
		k_ELobbyTypeInvisible
	}
	[Token(Token = "0x20001AB")]
	public enum ELobbyComparison
	{
		[Token(Token = "0x4000596")]
		k_ELobbyComparisonEqualToOrLessThan = -2,
		[Token(Token = "0x4000597")]
		k_ELobbyComparisonLessThan,
		[Token(Token = "0x4000598")]
		k_ELobbyComparisonEqual,
		[Token(Token = "0x4000599")]
		k_ELobbyComparisonGreaterThan,
		[Token(Token = "0x400059A")]
		k_ELobbyComparisonEqualToOrGreaterThan,
		[Token(Token = "0x400059B")]
		k_ELobbyComparisonNotEqual
	}
	[Token(Token = "0x20001AC")]
	public enum ELobbyDistanceFilter
	{
		[Token(Token = "0x400059D")]
		k_ELobbyDistanceFilterClose,
		[Token(Token = "0x400059E")]
		k_ELobbyDistanceFilterDefault,
		[Token(Token = "0x400059F")]
		k_ELobbyDistanceFilterFar,
		[Token(Token = "0x40005A0")]
		k_ELobbyDistanceFilterWorldwide
	}
	[Token(Token = "0x20001AD")]
	[Flags]
	public enum EChatMemberStateChange
	{
		[Token(Token = "0x40005A2")]
		k_EChatMemberStateChangeEntered = 1,
		[Token(Token = "0x40005A3")]
		k_EChatMemberStateChangeLeft = 2,
		[Token(Token = "0x40005A4")]
		k_EChatMemberStateChangeDisconnected = 4,
		[Token(Token = "0x40005A5")]
		k_EChatMemberStateChangeKicked = 8,
		[Token(Token = "0x40005A6")]
		k_EChatMemberStateChangeBanned = 0x10
	}
	[Token(Token = "0x20001AE")]
	public enum AudioPlayback_Status
	{
		[Token(Token = "0x40005A8")]
		AudioPlayback_Undefined,
		[Token(Token = "0x40005A9")]
		AudioPlayback_Playing,
		[Token(Token = "0x40005AA")]
		AudioPlayback_Paused,
		[Token(Token = "0x40005AB")]
		AudioPlayback_Idle
	}
	[Token(Token = "0x20001AF")]
	public enum EP2PSessionError
	{
		[Token(Token = "0x40005AD")]
		k_EP2PSessionErrorNone,
		[Token(Token = "0x40005AE")]
		k_EP2PSessionErrorNotRunningApp,
		[Token(Token = "0x40005AF")]
		k_EP2PSessionErrorNoRightsToApp,
		[Token(Token = "0x40005B0")]
		k_EP2PSessionErrorDestinationNotLoggedIn,
		[Token(Token = "0x40005B1")]
		k_EP2PSessionErrorTimeout,
		[Token(Token = "0x40005B2")]
		k_EP2PSessionErrorMax
	}
	[Token(Token = "0x20001B0")]
	public enum EP2PSend
	{
		[Token(Token = "0x40005B4")]
		k_EP2PSendUnreliable,
		[Token(Token = "0x40005B5")]
		k_EP2PSendUnreliableNoDelay,
		[Token(Token = "0x40005B6")]
		k_EP2PSendReliable,
		[Token(Token = "0x40005B7")]
		k_EP2PSendReliableWithBuffering
	}
	[Token(Token = "0x20001B1")]
	public enum ESNetSocketState
	{
		[Token(Token = "0x40005B9")]
		k_ESNetSocketStateInvalid = 0,
		[Token(Token = "0x40005BA")]
		k_ESNetSocketStateConnected = 1,
		[Token(Token = "0x40005BB")]
		k_ESNetSocketStateInitiated = 10,
		[Token(Token = "0x40005BC")]
		k_ESNetSocketStateLocalCandidatesFound = 11,
		[Token(Token = "0x40005BD")]
		k_ESNetSocketStateReceivedRemoteCandidates = 12,
		[Token(Token = "0x40005BE")]
		k_ESNetSocketStateChallengeHandshake = 15,
		[Token(Token = "0x40005BF")]
		k_ESNetSocketStateDisconnecting = 21,
		[Token(Token = "0x40005C0")]
		k_ESNetSocketStateLocalDisconnect = 22,
		[Token(Token = "0x40005C1")]
		k_ESNetSocketStateTimeoutDuringConnect = 23,
		[Token(Token = "0x40005C2")]
		k_ESNetSocketStateRemoteEndDisconnected = 24,
		[Token(Token = "0x40005C3")]
		k_ESNetSocketStateConnectionBroken = 25
	}
	[Token(Token = "0x20001B2")]
	public enum ESNetSocketConnectionType
	{
		[Token(Token = "0x40005C5")]
		k_ESNetSocketConnectionTypeNotConnected,
		[Token(Token = "0x40005C6")]
		k_ESNetSocketConnectionTypeUDP,
		[Token(Token = "0x40005C7")]
		k_ESNetSocketConnectionTypeUDPRelay
	}
	[Token(Token = "0x20001B3")]
	public enum EResolveConflict
	{
		[Token(Token = "0x40005C9")]
		k_EResolveConflictKeepClient = 1,
		[Token(Token = "0x40005CA")]
		k_EResolveConflictKeepServer
	}
	[Token(Token = "0x20001B4")]
	[Flags]
	public enum ERemoteStoragePlatform
	{
		[Token(Token = "0x40005CC")]
		k_ERemoteStoragePlatformNone = 0,
		[Token(Token = "0x40005CD")]
		k_ERemoteStoragePlatformWindows = 1,
		[Token(Token = "0x40005CE")]
		k_ERemoteStoragePlatformOSX = 2,
		[Token(Token = "0x40005CF")]
		k_ERemoteStoragePlatformPS3 = 4,
		[Token(Token = "0x40005D0")]
		k_ERemoteStoragePlatformLinux = 8,
		[Token(Token = "0x40005D1")]
		k_ERemoteStoragePlatformReserved2 = 0x10,
		[Token(Token = "0x40005D2")]
		k_ERemoteStoragePlatformAll = -1
	}
	[Token(Token = "0x20001B5")]
	public enum ERemoteStoragePublishedFileVisibility
	{
		[Token(Token = "0x40005D4")]
		k_ERemoteStoragePublishedFileVisibilityPublic,
		[Token(Token = "0x40005D5")]
		k_ERemoteStoragePublishedFileVisibilityFriendsOnly,
		[Token(Token = "0x40005D6")]
		k_ERemoteStoragePublishedFileVisibilityPrivate
	}
	[Token(Token = "0x20001B6")]
	public enum EWorkshopFileType
	{
		[Token(Token = "0x40005D8")]
		k_EWorkshopFileTypeFirst = 0,
		[Token(Token = "0x40005D9")]
		k_EWorkshopFileTypeCommunity = 0,
		[Token(Token = "0x40005DA")]
		k_EWorkshopFileTypeMicrotransaction = 1,
		[Token(Token = "0x40005DB")]
		k_EWorkshopFileTypeCollection = 2,
		[Token(Token = "0x40005DC")]
		k_EWorkshopFileTypeArt = 3,
		[Token(Token = "0x40005DD")]
		k_EWorkshopFileTypeVideo = 4,
		[Token(Token = "0x40005DE")]
		k_EWorkshopFileTypeScreenshot = 5,
		[Token(Token = "0x40005DF")]
		k_EWorkshopFileTypeGame = 6,
		[Token(Token = "0x40005E0")]
		k_EWorkshopFileTypeSoftware = 7,
		[Token(Token = "0x40005E1")]
		k_EWorkshopFileTypeConcept = 8,
		[Token(Token = "0x40005E2")]
		k_EWorkshopFileTypeWebGuide = 9,
		[Token(Token = "0x40005E3")]
		k_EWorkshopFileTypeIntegratedGuide = 10,
		[Token(Token = "0x40005E4")]
		k_EWorkshopFileTypeMerch = 11,
		[Token(Token = "0x40005E5")]
		k_EWorkshopFileTypeControllerBinding = 12,
		[Token(Token = "0x40005E6")]
		k_EWorkshopFileTypeSteamworksAccessInvite = 13,
		[Token(Token = "0x40005E7")]
		k_EWorkshopFileTypeSteamVideo = 14,
		[Token(Token = "0x40005E8")]
		k_EWorkshopFileTypeGameManagedItem = 15,
		[Token(Token = "0x40005E9")]
		k_EWorkshopFileTypeMax = 16
	}
	[Token(Token = "0x20001B7")]
	public enum EWorkshopVote
	{
		[Token(Token = "0x40005EB")]
		k_EWorkshopVoteUnvoted,
		[Token(Token = "0x40005EC")]
		k_EWorkshopVoteFor,
		[Token(Token = "0x40005ED")]
		k_EWorkshopVoteAgainst,
		[Token(Token = "0x40005EE")]
		k_EWorkshopVoteLater
	}
	[Token(Token = "0x20001B8")]
	public enum EWorkshopFileAction
	{
		[Token(Token = "0x40005F0")]
		k_EWorkshopFileActionPlayed,
		[Token(Token = "0x40005F1")]
		k_EWorkshopFileActionCompleted
	}
	[Token(Token = "0x20001B9")]
	public enum EWorkshopEnumerationType
	{
		[Token(Token = "0x40005F3")]
		k_EWorkshopEnumerationTypeRankedByVote,
		[Token(Token = "0x40005F4")]
		k_EWorkshopEnumerationTypeRecent,
		[Token(Token = "0x40005F5")]
		k_EWorkshopEnumerationTypeTrending,
		[Token(Token = "0x40005F6")]
		k_EWorkshopEnumerationTypeFavoritesOfFriends,
		[Token(Token = "0x40005F7")]
		k_EWorkshopEnumerationTypeVotedByFriends,
		[Token(Token = "0x40005F8")]
		k_EWorkshopEnumerationTypeContentByFriends,
		[Token(Token = "0x40005F9")]
		k_EWorkshopEnumerationTypeRecentFromFollowedUsers
	}
	[Token(Token = "0x20001BA")]
	public enum EWorkshopVideoProvider
	{
		[Token(Token = "0x40005FB")]
		k_EWorkshopVideoProviderNone,
		[Token(Token = "0x40005FC")]
		k_EWorkshopVideoProviderYoutube
	}
	[Token(Token = "0x20001BB")]
	public enum EUGCReadAction
	{
		[Token(Token = "0x40005FE")]
		k_EUGCRead_ContinueReadingUntilFinished,
		[Token(Token = "0x40005FF")]
		k_EUGCRead_ContinueReading,
		[Token(Token = "0x4000600")]
		k_EUGCRead_Close
	}
	[Token(Token = "0x20001BC")]
	public enum EUGCMatchingUGCType
	{
		[Token(Token = "0x4000602")]
		k_EUGCMatchingUGCType_Items,
		[Token(Token = "0x4000603")]
		k_EUGCMatchingUGCType_Items_Mtx,
		[Token(Token = "0x4000604")]
		k_EUGCMatchingUGCType_Items_ReadyToUse,
		[Token(Token = "0x4000605")]
		k_EUGCMatchingUGCType_Collections,
		[Token(Token = "0x4000606")]
		k_EUGCMatchingUGCType_Artwork,
		[Token(Token = "0x4000607")]
		k_EUGCMatchingUGCType_Videos,
		[Token(Token = "0x4000608")]
		k_EUGCMatchingUGCType_Screenshots,
		[Token(Token = "0x4000609")]
		k_EUGCMatchingUGCType_AllGuides,
		[Token(Token = "0x400060A")]
		k_EUGCMatchingUGCType_WebGuides,
		[Token(Token = "0x400060B")]
		k_EUGCMatchingUGCType_IntegratedGuides,
		[Token(Token = "0x400060C")]
		k_EUGCMatchingUGCType_UsableInGame,
		[Token(Token = "0x400060D")]
		k_EUGCMatchingUGCType_ControllerBindings,
		[Token(Token = "0x400060E")]
		k_EUGCMatchingUGCType_GameManagedItems
	}
	[Token(Token = "0x20001BD")]
	public enum EUserUGCList
	{
		[Token(Token = "0x4000610")]
		k_EUserUGCList_Published,
		[Token(Token = "0x4000611")]
		k_EUserUGCList_VotedOn,
		[Token(Token = "0x4000612")]
		k_EUserUGCList_VotedUp,
		[Token(Token = "0x4000613")]
		k_EUserUGCList_VotedDown,
		[Token(Token = "0x4000614")]
		k_EUserUGCList_WillVoteLater,
		[Token(Token = "0x4000615")]
		k_EUserUGCList_Favorited,
		[Token(Token = "0x4000616")]
		k_EUserUGCList_Subscribed,
		[Token(Token = "0x4000617")]
		k_EUserUGCList_UsedOrPlayed,
		[Token(Token = "0x4000618")]
		k_EUserUGCList_Followed
	}
	[Token(Token = "0x20001BE")]
	public enum EUserUGCListSortOrder
	{
		[Token(Token = "0x400061A")]
		k_EUserUGCListSortOrder_CreationOrderDesc,
		[Token(Token = "0x400061B")]
		k_EUserUGCListSortOrder_CreationOrderAsc,
		[Token(Token = "0x400061C")]
		k_EUserUGCListSortOrder_TitleAsc,
		[Token(Token = "0x400061D")]
		k_EUserUGCListSortOrder_LastUpdatedDesc,
		[Token(Token = "0x400061E")]
		k_EUserUGCListSortOrder_SubscriptionDateDesc,
		[Token(Token = "0x400061F")]
		k_EUserUGCListSortOrder_VoteScoreDesc,
		[Token(Token = "0x4000620")]
		k_EUserUGCListSortOrder_ForModeration
	}
	[Token(Token = "0x20001BF")]
	public enum EUGCQuery
	{
		[Token(Token = "0x4000622")]
		k_EUGCQuery_RankedByVote,
		[Token(Token = "0x4000623")]
		k_EUGCQuery_RankedByPublicationDate,
		[Token(Token = "0x4000624")]
		k_EUGCQuery_AcceptedForGameRankedByAcceptanceDate,
		[Token(Token = "0x4000625")]
		k_EUGCQuery_RankedByTrend,
		[Token(Token = "0x4000626")]
		k_EUGCQuery_FavoritedByFriendsRankedByPublicationDate,
		[Token(Token = "0x4000627")]
		k_EUGCQuery_CreatedByFriendsRankedByPublicationDate,
		[Token(Token = "0x4000628")]
		k_EUGCQuery_RankedByNumTimesReported,
		[Token(Token = "0x4000629")]
		k_EUGCQuery_CreatedByFollowedUsersRankedByPublicationDate,
		[Token(Token = "0x400062A")]
		k_EUGCQuery_NotYetRated,
		[Token(Token = "0x400062B")]
		k_EUGCQuery_RankedByTotalVotesAsc,
		[Token(Token = "0x400062C")]
		k_EUGCQuery_RankedByVotesUp,
		[Token(Token = "0x400062D")]
		k_EUGCQuery_RankedByTextSearch,
		[Token(Token = "0x400062E")]
		k_EUGCQuery_RankedByTotalUniqueSubscriptions
	}
	[Token(Token = "0x20001C0")]
	public enum EItemUpdateStatus
	{
		[Token(Token = "0x4000630")]
		k_EItemUpdateStatusInvalid,
		[Token(Token = "0x4000631")]
		k_EItemUpdateStatusPreparingConfig,
		[Token(Token = "0x4000632")]
		k_EItemUpdateStatusPreparingContent,
		[Token(Token = "0x4000633")]
		k_EItemUpdateStatusUploadingContent,
		[Token(Token = "0x4000634")]
		k_EItemUpdateStatusUploadingPreviewFile,
		[Token(Token = "0x4000635")]
		k_EItemUpdateStatusCommittingChanges
	}
	[Token(Token = "0x20001C1")]
	[Flags]
	public enum EItemState
	{
		[Token(Token = "0x4000637")]
		k_EItemStateNone = 0,
		[Token(Token = "0x4000638")]
		k_EItemStateSubscribed = 1,
		[Token(Token = "0x4000639")]
		k_EItemStateLegacyItem = 2,
		[Token(Token = "0x400063A")]
		k_EItemStateInstalled = 4,
		[Token(Token = "0x400063B")]
		k_EItemStateNeedsUpdate = 8,
		[Token(Token = "0x400063C")]
		k_EItemStateDownloading = 0x10,
		[Token(Token = "0x400063D")]
		k_EItemStateDownloadPending = 0x20
	}
	[Token(Token = "0x20001C2")]
	public enum EItemStatistic
	{
		[Token(Token = "0x400063F")]
		k_EItemStatistic_NumSubscriptions,
		[Token(Token = "0x4000640")]
		k_EItemStatistic_NumFavorites,
		[Token(Token = "0x4000641")]
		k_EItemStatistic_NumFollowers,
		[Token(Token = "0x4000642")]
		k_EItemStatistic_NumUniqueSubscriptions,
		[Token(Token = "0x4000643")]
		k_EItemStatistic_NumUniqueFavorites,
		[Token(Token = "0x4000644")]
		k_EItemStatistic_NumUniqueFollowers,
		[Token(Token = "0x4000645")]
		k_EItemStatistic_NumUniqueWebsiteViews,
		[Token(Token = "0x4000646")]
		k_EItemStatistic_ReportScore
	}
	[Token(Token = "0x20001C3")]
	public enum EFailureType
	{
		[Token(Token = "0x4000648")]
		k_EFailureFlushedCallbackQueue,
		[Token(Token = "0x4000649")]
		k_EFailurePipeFail
	}
	[Token(Token = "0x20001C4")]
	public enum ELeaderboardDataRequest
	{
		[Token(Token = "0x400064B")]
		k_ELeaderboardDataRequestGlobal,
		[Token(Token = "0x400064C")]
		k_ELeaderboardDataRequestGlobalAroundUser,
		[Token(Token = "0x400064D")]
		k_ELeaderboardDataRequestFriends,
		[Token(Token = "0x400064E")]
		k_ELeaderboardDataRequestUsers
	}
	[Token(Token = "0x20001C5")]
	public enum ELeaderboardSortMethod
	{
		[Token(Token = "0x4000650")]
		k_ELeaderboardSortMethodNone,
		[Token(Token = "0x4000651")]
		k_ELeaderboardSortMethodAscending,
		[Token(Token = "0x4000652")]
		k_ELeaderboardSortMethodDescending
	}
	[Token(Token = "0x20001C6")]
	public enum ELeaderboardDisplayType
	{
		[Token(Token = "0x4000654")]
		k_ELeaderboardDisplayTypeNone,
		[Token(Token = "0x4000655")]
		k_ELeaderboardDisplayTypeNumeric,
		[Token(Token = "0x4000656")]
		k_ELeaderboardDisplayTypeTimeSeconds,
		[Token(Token = "0x4000657")]
		k_ELeaderboardDisplayTypeTimeMilliSeconds
	}
	[Token(Token = "0x20001C7")]
	public enum ELeaderboardUploadScoreMethod
	{
		[Token(Token = "0x4000659")]
		k_ELeaderboardUploadScoreMethodNone,
		[Token(Token = "0x400065A")]
		k_ELeaderboardUploadScoreMethodKeepBest,
		[Token(Token = "0x400065B")]
		k_ELeaderboardUploadScoreMethodForceUpdate
	}
	[Token(Token = "0x20001C8")]
	public enum ESteamAPICallFailure
	{
		[Token(Token = "0x400065D")]
		k_ESteamAPICallFailureNone = -1,
		[Token(Token = "0x400065E")]
		k_ESteamAPICallFailureSteamGone,
		[Token(Token = "0x400065F")]
		k_ESteamAPICallFailureNetworkFailure,
		[Token(Token = "0x4000660")]
		k_ESteamAPICallFailureInvalidHandle,
		[Token(Token = "0x4000661")]
		k_ESteamAPICallFailureMismatchedCallback
	}
	[Token(Token = "0x20001C9")]
	public enum EGamepadTextInputMode
	{
		[Token(Token = "0x4000663")]
		k_EGamepadTextInputModeNormal,
		[Token(Token = "0x4000664")]
		k_EGamepadTextInputModePassword
	}
	[Token(Token = "0x20001CA")]
	public enum EGamepadTextInputLineMode
	{
		[Token(Token = "0x4000666")]
		k_EGamepadTextInputLineModeSingleLine,
		[Token(Token = "0x4000667")]
		k_EGamepadTextInputLineModeMultipleLines
	}
	[Token(Token = "0x20001CB")]
	public enum ECheckFileSignature
	{
		[Token(Token = "0x4000669")]
		k_ECheckFileSignatureInvalidSignature,
		[Token(Token = "0x400066A")]
		k_ECheckFileSignatureValidSignature,
		[Token(Token = "0x400066B")]
		k_ECheckFileSignatureFileNotFound,
		[Token(Token = "0x400066C")]
		k_ECheckFileSignatureNoSignaturesFoundForThisApp,
		[Token(Token = "0x400066D")]
		k_ECheckFileSignatureNoSignaturesFoundForThisFile
	}
	[Token(Token = "0x20001CC")]
	public enum EMatchMakingServerResponse
	{
		[Token(Token = "0x400066F")]
		eServerResponded,
		[Token(Token = "0x4000670")]
		eServerFailedToRespond,
		[Token(Token = "0x4000671")]
		eNoServersListedOnMasterServer
	}
	[Token(Token = "0x20001CD")]
	public enum EServerMode
	{
		[Token(Token = "0x4000673")]
		eServerModeInvalid,
		[Token(Token = "0x4000674")]
		eServerModeNoAuthentication,
		[Token(Token = "0x4000675")]
		eServerModeAuthentication,
		[Token(Token = "0x4000676")]
		eServerModeAuthenticationAndSecure
	}
	[Token(Token = "0x20001CE")]
	public enum EResult
	{
		[Token(Token = "0x4000678")]
		k_EResultOK = 1,
		[Token(Token = "0x4000679")]
		k_EResultFail = 2,
		[Token(Token = "0x400067A")]
		k_EResultNoConnection = 3,
		[Token(Token = "0x400067B")]
		k_EResultInvalidPassword = 5,
		[Token(Token = "0x400067C")]
		k_EResultLoggedInElsewhere = 6,
		[Token(Token = "0x400067D")]
		k_EResultInvalidProtocolVer = 7,
		[Token(Token = "0x400067E")]
		k_EResultInvalidParam = 8,
		[Token(Token = "0x400067F")]
		k_EResultFileNotFound = 9,
		[Token(Token = "0x4000680")]
		k_EResultBusy = 10,
		[Token(Token = "0x4000681")]
		k_EResultInvalidState = 11,
		[Token(Token = "0x4000682")]
		k_EResultInvalidName = 12,
		[Token(Token = "0x4000683")]
		k_EResultInvalidEmail = 13,
		[Token(Token = "0x4000684")]
		k_EResultDuplicateName = 14,
		[Token(Token = "0x4000685")]
		k_EResultAccessDenied = 15,
		[Token(Token = "0x4000686")]
		k_EResultTimeout = 16,
		[Token(Token = "0x4000687")]
		k_EResultBanned = 17,
		[Token(Token = "0x4000688")]
		k_EResultAccountNotFound = 18,
		[Token(Token = "0x4000689")]
		k_EResultInvalidSteamID = 19,
		[Token(Token = "0x400068A")]
		k_EResultServiceUnavailable = 20,
		[Token(Token = "0x400068B")]
		k_EResultNotLoggedOn = 21,
		[Token(Token = "0x400068C")]
		k_EResultPending = 22,
		[Token(Token = "0x400068D")]
		k_EResultEncryptionFailure = 23,
		[Token(Token = "0x400068E")]
		k_EResultInsufficientPrivilege = 24,
		[Token(Token = "0x400068F")]
		k_EResultLimitExceeded = 25,
		[Token(Token = "0x4000690")]
		k_EResultRevoked = 26,
		[Token(Token = "0x4000691")]
		k_EResultExpired = 27,
		[Token(Token = "0x4000692")]
		k_EResultAlreadyRedeemed = 28,
		[Token(Token = "0x4000693")]
		k_EResultDuplicateRequest = 29,
		[Token(Token = "0x4000694")]
		k_EResultAlreadyOwned = 30,
		[Token(Token = "0x4000695")]
		k_EResultIPNotFound = 31,
		[Token(Token = "0x4000696")]
		k_EResultPersistFailed = 32,
		[Token(Token = "0x4000697")]
		k_EResultLockingFailed = 33,
		[Token(Token = "0x4000698")]
		k_EResultLogonSessionReplaced = 34,
		[Token(Token = "0x4000699")]
		k_EResultConnectFailed = 35,
		[Token(Token = "0x400069A")]
		k_EResultHandshakeFailed = 36,
		[Token(Token = "0x400069B")]
		k_EResultIOFailure = 37,
		[Token(Token = "0x400069C")]
		k_EResultRemoteDisconnect = 38,
		[Token(Token = "0x400069D")]
		k_EResultShoppingCartNotFound = 39,
		[Token(Token = "0x400069E")]
		k_EResultBlocked = 40,
		[Token(Token = "0x400069F")]
		k_EResultIgnored = 41,
		[Token(Token = "0x40006A0")]
		k_EResultNoMatch = 42,
		[Token(Token = "0x40006A1")]
		k_EResultAccountDisabled = 43,
		[Token(Token = "0x40006A2")]
		k_EResultServiceReadOnly = 44,
		[Token(Token = "0x40006A3")]
		k_EResultAccountNotFeatured = 45,
		[Token(Token = "0x40006A4")]
		k_EResultAdministratorOK = 46,
		[Token(Token = "0x40006A5")]
		k_EResultContentVersion = 47,
		[Token(Token = "0x40006A6")]
		k_EResultTryAnotherCM = 48,
		[Token(Token = "0x40006A7")]
		k_EResultPasswordRequiredToKickSession = 49,
		[Token(Token = "0x40006A8")]
		k_EResultAlreadyLoggedInElsewhere = 50,
		[Token(Token = "0x40006A9")]
		k_EResultSuspended = 51,
		[Token(Token = "0x40006AA")]
		k_EResultCancelled = 52,
		[Token(Token = "0x40006AB")]
		k_EResultDataCorruption = 53,
		[Token(Token = "0x40006AC")]
		k_EResultDiskFull = 54,
		[Token(Token = "0x40006AD")]
		k_EResultRemoteCallFailed = 55,
		[Token(Token = "0x40006AE")]
		k_EResultPasswordUnset = 56,
		[Token(Token = "0x40006AF")]
		k_EResultExternalAccountUnlinked = 57,
		[Token(Token = "0x40006B0")]
		k_EResultPSNTicketInvalid = 58,
		[Token(Token = "0x40006B1")]
		k_EResultExternalAccountAlreadyLinked = 59,
		[Token(Token = "0x40006B2")]
		k_EResultRemoteFileConflict = 60,
		[Token(Token = "0x40006B3")]
		k_EResultIllegalPassword = 61,
		[Token(Token = "0x40006B4")]
		k_EResultSameAsPreviousValue = 62,
		[Token(Token = "0x40006B5")]
		k_EResultAccountLogonDenied = 63,
		[Token(Token = "0x40006B6")]
		k_EResultCannotUseOldPassword = 64,
		[Token(Token = "0x40006B7")]
		k_EResultInvalidLoginAuthCode = 65,
		[Token(Token = "0x40006B8")]
		k_EResultAccountLogonDeniedNoMail = 66,
		[Token(Token = "0x40006B9")]
		k_EResultHardwareNotCapableOfIPT = 67,
		[Token(Token = "0x40006BA")]
		k_EResultIPTInitError = 68,
		[Token(Token = "0x40006BB")]
		k_EResultParentalControlRestricted = 69,
		[Token(Token = "0x40006BC")]
		k_EResultFacebookQueryError = 70,
		[Token(Token = "0x40006BD")]
		k_EResultExpiredLoginAuthCode = 71,
		[Token(Token = "0x40006BE")]
		k_EResultIPLoginRestrictionFailed = 72,
		[Token(Token = "0x40006BF")]
		k_EResultAccountLockedDown = 73,
		[Token(Token = "0x40006C0")]
		k_EResultAccountLogonDeniedVerifiedEmailRequired = 74,
		[Token(Token = "0x40006C1")]
		k_EResultNoMatchingURL = 75,
		[Token(Token = "0x40006C2")]
		k_EResultBadResponse = 76,
		[Token(Token = "0x40006C3")]
		k_EResultRequirePasswordReEntry = 77,
		[Token(Token = "0x40006C4")]
		k_EResultValueOutOfRange = 78,
		[Token(Token = "0x40006C5")]
		k_EResultUnexpectedError = 79,
		[Token(Token = "0x40006C6")]
		k_EResultDisabled = 80,
		[Token(Token = "0x40006C7")]
		k_EResultInvalidCEGSubmission = 81,
		[Token(Token = "0x40006C8")]
		k_EResultRestrictedDevice = 82,
		[Token(Token = "0x40006C9")]
		k_EResultRegionLocked = 83,
		[Token(Token = "0x40006CA")]
		k_EResultRateLimitExceeded = 84,
		[Token(Token = "0x40006CB")]
		k_EResultAccountLoginDeniedNeedTwoFactor = 85,
		[Token(Token = "0x40006CC")]
		k_EResultItemDeleted = 86,
		[Token(Token = "0x40006CD")]
		k_EResultAccountLoginDeniedThrottle = 87,
		[Token(Token = "0x40006CE")]
		k_EResultTwoFactorCodeMismatch = 88,
		[Token(Token = "0x40006CF")]
		k_EResultTwoFactorActivationCodeMismatch = 89,
		[Token(Token = "0x40006D0")]
		k_EResultAccountAssociatedToMultiplePartners = 90,
		[Token(Token = "0x40006D1")]
		k_EResultNotModified = 91,
		[Token(Token = "0x40006D2")]
		k_EResultNoMobileDevice = 92,
		[Token(Token = "0x40006D3")]
		k_EResultTimeNotSynced = 93,
		[Token(Token = "0x40006D4")]
		k_EResultSmsCodeFailed = 94,
		[Token(Token = "0x40006D5")]
		k_EResultAccountLimitExceeded = 95,
		[Token(Token = "0x40006D6")]
		k_EResultAccountActivityLimitExceeded = 96,
		[Token(Token = "0x40006D7")]
		k_EResultPhoneActivityLimitExceeded = 97,
		[Token(Token = "0x40006D8")]
		k_EResultRefundToWallet = 98,
		[Token(Token = "0x40006D9")]
		k_EResultEmailSendFailure = 99,
		[Token(Token = "0x40006DA")]
		k_EResultNotSettled = 100
	}
	[Token(Token = "0x20001CF")]
	public enum EVoiceResult
	{
		[Token(Token = "0x40006DC")]
		k_EVoiceResultOK,
		[Token(Token = "0x40006DD")]
		k_EVoiceResultNotInitialized,
		[Token(Token = "0x40006DE")]
		k_EVoiceResultNotRecording,
		[Token(Token = "0x40006DF")]
		k_EVoiceResultNoData,
		[Token(Token = "0x40006E0")]
		k_EVoiceResultBufferTooSmall,
		[Token(Token = "0x40006E1")]
		k_EVoiceResultDataCorrupted,
		[Token(Token = "0x40006E2")]
		k_EVoiceResultRestricted,
		[Token(Token = "0x40006E3")]
		k_EVoiceResultUnsupportedCodec,
		[Token(Token = "0x40006E4")]
		k_EVoiceResultReceiverOutOfDate,
		[Token(Token = "0x40006E5")]
		k_EVoiceResultReceiverDidNotAnswer
	}
	[Token(Token = "0x20001D0")]
	public enum EDenyReason
	{
		[Token(Token = "0x40006E7")]
		k_EDenyInvalid,
		[Token(Token = "0x40006E8")]
		k_EDenyInvalidVersion,
		[Token(Token = "0x40006E9")]
		k_EDenyGeneric,
		[Token(Token = "0x40006EA")]
		k_EDenyNotLoggedOn,
		[Token(Token = "0x40006EB")]
		k_EDenyNoLicense,
		[Token(Token = "0x40006EC")]
		k_EDenyCheater,
		[Token(Token = "0x40006ED")]
		k_EDenyLoggedInElseWhere,
		[Token(Token = "0x40006EE")]
		k_EDenyUnknownText,
		[Token(Token = "0x40006EF")]
		k_EDenyIncompatibleAnticheat,
		[Token(Token = "0x40006F0")]
		k_EDenyMemoryCorruption,
		[Token(Token = "0x40006F1")]
		k_EDenyIncompatibleSoftware,
		[Token(Token = "0x40006F2")]
		k_EDenySteamConnectionLost,
		[Token(Token = "0x40006F3")]
		k_EDenySteamConnectionError,
		[Token(Token = "0x40006F4")]
		k_EDenySteamResponseTimedOut,
		[Token(Token = "0x40006F5")]
		k_EDenySteamValidationStalled,
		[Token(Token = "0x40006F6")]
		k_EDenySteamOwnerLeftGuestUser
	}
	[Token(Token = "0x20001D1")]
	public enum EBeginAuthSessionResult
	{
		[Token(Token = "0x40006F8")]
		k_EBeginAuthSessionResultOK,
		[Token(Token = "0x40006F9")]
		k_EBeginAuthSessionResultInvalidTicket,
		[Token(Token = "0x40006FA")]
		k_EBeginAuthSessionResultDuplicateRequest,
		[Token(Token = "0x40006FB")]
		k_EBeginAuthSessionResultInvalidVersion,
		[Token(Token = "0x40006FC")]
		k_EBeginAuthSessionResultGameMismatch,
		[Token(Token = "0x40006FD")]
		k_EBeginAuthSessionResultExpiredTicket
	}
	[Token(Token = "0x20001D2")]
	public enum EAuthSessionResponse
	{
		[Token(Token = "0x40006FF")]
		k_EAuthSessionResponseOK,
		[Token(Token = "0x4000700")]
		k_EAuthSessionResponseUserNotConnectedToSteam,
		[Token(Token = "0x4000701")]
		k_EAuthSessionResponseNoLicenseOrExpired,
		[Token(Token = "0x4000702")]
		k_EAuthSessionResponseVACBanned,
		[Token(Token = "0x4000703")]
		k_EAuthSessionResponseLoggedInElseWhere,
		[Token(Token = "0x4000704")]
		k_EAuthSessionResponseVACCheckTimedOut,
		[Token(Token = "0x4000705")]
		k_EAuthSessionResponseAuthTicketCanceled,
		[Token(Token = "0x4000706")]
		k_EAuthSessionResponseAuthTicketInvalidAlreadyUsed,
		[Token(Token = "0x4000707")]
		k_EAuthSessionResponseAuthTicketInvalid,
		[Token(Token = "0x4000708")]
		k_EAuthSessionResponsePublisherIssuedBan
	}
	[Token(Token = "0x20001D3")]
	public enum EUserHasLicenseForAppResult
	{
		[Token(Token = "0x400070A")]
		k_EUserHasLicenseResultHasLicense,
		[Token(Token = "0x400070B")]
		k_EUserHasLicenseResultDoesNotHaveLicense,
		[Token(Token = "0x400070C")]
		k_EUserHasLicenseResultNoAuth
	}
	[Token(Token = "0x20001D4")]
	public enum EAccountType
	{
		[Token(Token = "0x400070E")]
		k_EAccountTypeInvalid,
		[Token(Token = "0x400070F")]
		k_EAccountTypeIndividual,
		[Token(Token = "0x4000710")]
		k_EAccountTypeMultiseat,
		[Token(Token = "0x4000711")]
		k_EAccountTypeGameServer,
		[Token(Token = "0x4000712")]
		k_EAccountTypeAnonGameServer,
		[Token(Token = "0x4000713")]
		k_EAccountTypePending,
		[Token(Token = "0x4000714")]
		k_EAccountTypeContentServer,
		[Token(Token = "0x4000715")]
		k_EAccountTypeClan,
		[Token(Token = "0x4000716")]
		k_EAccountTypeChat,
		[Token(Token = "0x4000717")]
		k_EAccountTypeConsoleUser,
		[Token(Token = "0x4000718")]
		k_EAccountTypeAnonUser,
		[Token(Token = "0x4000719")]
		k_EAccountTypeMax
	}
	[Token(Token = "0x20001D5")]
	public enum EAppReleaseState
	{
		[Token(Token = "0x400071B")]
		k_EAppReleaseState_Unknown,
		[Token(Token = "0x400071C")]
		k_EAppReleaseState_Unavailable,
		[Token(Token = "0x400071D")]
		k_EAppReleaseState_Prerelease,
		[Token(Token = "0x400071E")]
		k_EAppReleaseState_PreloadOnly,
		[Token(Token = "0x400071F")]
		k_EAppReleaseState_Released
	}
	[Token(Token = "0x20001D6")]
	[Flags]
	public enum EAppOwnershipFlags
	{
		[Token(Token = "0x4000721")]
		k_EAppOwnershipFlags_None = 0,
		[Token(Token = "0x4000722")]
		k_EAppOwnershipFlags_OwnsLicense = 1,
		[Token(Token = "0x4000723")]
		k_EAppOwnershipFlags_FreeLicense = 2,
		[Token(Token = "0x4000724")]
		k_EAppOwnershipFlags_RegionRestricted = 4,
		[Token(Token = "0x4000725")]
		k_EAppOwnershipFlags_LowViolence = 8,
		[Token(Token = "0x4000726")]
		k_EAppOwnershipFlags_InvalidPlatform = 0x10,
		[Token(Token = "0x4000727")]
		k_EAppOwnershipFlags_SharedLicense = 0x20,
		[Token(Token = "0x4000728")]
		k_EAppOwnershipFlags_FreeWeekend = 0x40,
		[Token(Token = "0x4000729")]
		k_EAppOwnershipFlags_RetailLicense = 0x80,
		[Token(Token = "0x400072A")]
		k_EAppOwnershipFlags_LicenseLocked = 0x100,
		[Token(Token = "0x400072B")]
		k_EAppOwnershipFlags_LicensePending = 0x200,
		[Token(Token = "0x400072C")]
		k_EAppOwnershipFlags_LicenseExpired = 0x400,
		[Token(Token = "0x400072D")]
		k_EAppOwnershipFlags_LicensePermanent = 0x800,
		[Token(Token = "0x400072E")]
		k_EAppOwnershipFlags_LicenseRecurring = 0x1000,
		[Token(Token = "0x400072F")]
		k_EAppOwnershipFlags_LicenseCanceled = 0x2000,
		[Token(Token = "0x4000730")]
		k_EAppOwnershipFlags_AutoGrant = 0x4000
	}
	[Token(Token = "0x20001D7")]
	[Flags]
	public enum EAppType
	{
		[Token(Token = "0x4000732")]
		k_EAppType_Invalid = 0,
		[Token(Token = "0x4000733")]
		k_EAppType_Game = 1,
		[Token(Token = "0x4000734")]
		k_EAppType_Application = 2,
		[Token(Token = "0x4000735")]
		k_EAppType_Tool = 4,
		[Token(Token = "0x4000736")]
		k_EAppType_Demo = 8,
		[Token(Token = "0x4000737")]
		k_EAppType_Media_DEPRECATED = 0x10,
		[Token(Token = "0x4000738")]
		k_EAppType_DLC = 0x20,
		[Token(Token = "0x4000739")]
		k_EAppType_Guide = 0x40,
		[Token(Token = "0x400073A")]
		k_EAppType_Driver = 0x80,
		[Token(Token = "0x400073B")]
		k_EAppType_Config = 0x100,
		[Token(Token = "0x400073C")]
		k_EAppType_Hardware = 0x200,
		[Token(Token = "0x400073D")]
		k_EAppType_Video = 0x800,
		[Token(Token = "0x400073E")]
		k_EAppType_Plugin = 0x1000,
		[Token(Token = "0x400073F")]
		k_EAppType_Music = 0x2000,
		[Token(Token = "0x4000740")]
		k_EAppType_Shortcut = 0x40000000,
		[Token(Token = "0x4000741")]
		k_EAppType_DepotOnly = -2147483647
	}
	[Token(Token = "0x20001D8")]
	public enum ESteamUserStatType
	{
		[Token(Token = "0x4000743")]
		k_ESteamUserStatTypeINVALID,
		[Token(Token = "0x4000744")]
		k_ESteamUserStatTypeINT,
		[Token(Token = "0x4000745")]
		k_ESteamUserStatTypeFLOAT,
		[Token(Token = "0x4000746")]
		k_ESteamUserStatTypeAVGRATE,
		[Token(Token = "0x4000747")]
		k_ESteamUserStatTypeACHIEVEMENTS,
		[Token(Token = "0x4000748")]
		k_ESteamUserStatTypeGROUPACHIEVEMENTS,
		[Token(Token = "0x4000749")]
		k_ESteamUserStatTypeMAX
	}
	[Token(Token = "0x20001D9")]
	public enum EChatEntryType
	{
		[Token(Token = "0x400074B")]
		k_EChatEntryTypeInvalid = 0,
		[Token(Token = "0x400074C")]
		k_EChatEntryTypeChatMsg = 1,
		[Token(Token = "0x400074D")]
		k_EChatEntryTypeTyping = 2,
		[Token(Token = "0x400074E")]
		k_EChatEntryTypeInviteGame = 3,
		[Token(Token = "0x400074F")]
		k_EChatEntryTypeEmote = 4,
		[Token(Token = "0x4000750")]
		k_EChatEntryTypeLeftConversation = 6,
		[Token(Token = "0x4000751")]
		k_EChatEntryTypeEntered = 7,
		[Token(Token = "0x4000752")]
		k_EChatEntryTypeWasKicked = 8,
		[Token(Token = "0x4000753")]
		k_EChatEntryTypeWasBanned = 9,
		[Token(Token = "0x4000754")]
		k_EChatEntryTypeDisconnected = 10,
		[Token(Token = "0x4000755")]
		k_EChatEntryTypeHistoricalChat = 11,
		[Token(Token = "0x4000756")]
		k_EChatEntryTypeReserved1 = 12,
		[Token(Token = "0x4000757")]
		k_EChatEntryTypeReserved2 = 13,
		[Token(Token = "0x4000758")]
		k_EChatEntryTypeLinkBlocked = 14
	}
	[Token(Token = "0x20001DA")]
	public enum EChatRoomEnterResponse
	{
		[Token(Token = "0x400075A")]
		k_EChatRoomEnterResponseSuccess = 1,
		[Token(Token = "0x400075B")]
		k_EChatRoomEnterResponseDoesntExist,
		[Token(Token = "0x400075C")]
		k_EChatRoomEnterResponseNotAllowed,
		[Token(Token = "0x400075D")]
		k_EChatRoomEnterResponseFull,
		[Token(Token = "0x400075E")]
		k_EChatRoomEnterResponseError,
		[Token(Token = "0x400075F")]
		k_EChatRoomEnterResponseBanned,
		[Token(Token = "0x4000760")]
		k_EChatRoomEnterResponseLimited,
		[Token(Token = "0x4000761")]
		k_EChatRoomEnterResponseClanDisabled,
		[Token(Token = "0x4000762")]
		k_EChatRoomEnterResponseCommunityBan,
		[Token(Token = "0x4000763")]
		k_EChatRoomEnterResponseMemberBlockedYou,
		[Token(Token = "0x4000764")]
		k_EChatRoomEnterResponseYouBlockedMember
	}
	[Token(Token = "0x20001DB")]
	[Flags]
	public enum EChatSteamIDInstanceFlags
	{
		[Token(Token = "0x4000766")]
		k_EChatAccountInstanceMask = 0xFFF,
		[Token(Token = "0x4000767")]
		k_EChatInstanceFlagClan = 0x80000,
		[Token(Token = "0x4000768")]
		k_EChatInstanceFlagLobby = 0x40000,
		[Token(Token = "0x4000769")]
		k_EChatInstanceFlagMMSLobby = 0x20000
	}
	[Token(Token = "0x20001DC")]
	[Flags]
	public enum EMarketingMessageFlags
	{
		[Token(Token = "0x400076B")]
		k_EMarketingMessageFlagsNone = 0,
		[Token(Token = "0x400076C")]
		k_EMarketingMessageFlagsHighPriority = 1,
		[Token(Token = "0x400076D")]
		k_EMarketingMessageFlagsPlatformWindows = 2,
		[Token(Token = "0x400076E")]
		k_EMarketingMessageFlagsPlatformMac = 4,
		[Token(Token = "0x400076F")]
		k_EMarketingMessageFlagsPlatformLinux = 8,
		[Token(Token = "0x4000770")]
		k_EMarketingMessageFlagsPlatformRestrictions = 0xE
	}
	[Token(Token = "0x20001DD")]
	public enum ENotificationPosition
	{
		[Token(Token = "0x4000772")]
		k_EPositionTopLeft,
		[Token(Token = "0x4000773")]
		k_EPositionTopRight,
		[Token(Token = "0x4000774")]
		k_EPositionBottomLeft,
		[Token(Token = "0x4000775")]
		k_EPositionBottomRight
	}
	[Token(Token = "0x20001DE")]
	public enum EBroadcastUploadResult
	{
		[Token(Token = "0x4000777")]
		k_EBroadcastUploadResultNone,
		[Token(Token = "0x4000778")]
		k_EBroadcastUploadResultOK,
		[Token(Token = "0x4000779")]
		k_EBroadcastUploadResultInitFailed,
		[Token(Token = "0x400077A")]
		k_EBroadcastUploadResultFrameFailed,
		[Token(Token = "0x400077B")]
		k_EBroadcastUploadResultTimeout,
		[Token(Token = "0x400077C")]
		k_EBroadcastUploadResultBandwidthExceeded,
		[Token(Token = "0x400077D")]
		k_EBroadcastUploadResultLowFPS,
		[Token(Token = "0x400077E")]
		k_EBroadcastUploadResultMissingKeyFrames,
		[Token(Token = "0x400077F")]
		k_EBroadcastUploadResultNoConnection,
		[Token(Token = "0x4000780")]
		k_EBroadcastUploadResultRelayFailed,
		[Token(Token = "0x4000781")]
		k_EBroadcastUploadResultSettingsChanged,
		[Token(Token = "0x4000782")]
		k_EBroadcastUploadResultMissingAudio,
		[Token(Token = "0x4000783")]
		k_EBroadcastUploadResultTooFarBehind
	}
	[Token(Token = "0x20001DF")]
	public enum EHTTPMethod
	{
		[Token(Token = "0x4000785")]
		k_EHTTPMethodInvalid,
		[Token(Token = "0x4000786")]
		k_EHTTPMethodGET,
		[Token(Token = "0x4000787")]
		k_EHTTPMethodHEAD,
		[Token(Token = "0x4000788")]
		k_EHTTPMethodPOST,
		[Token(Token = "0x4000789")]
		k_EHTTPMethodPUT,
		[Token(Token = "0x400078A")]
		k_EHTTPMethodDELETE,
		[Token(Token = "0x400078B")]
		k_EHTTPMethodOPTIONS
	}
	[Token(Token = "0x20001E0")]
	public enum EHTTPStatusCode
	{
		[Token(Token = "0x400078D")]
		k_EHTTPStatusCodeInvalid = 0,
		[Token(Token = "0x400078E")]
		k_EHTTPStatusCode100Continue = 100,
		[Token(Token = "0x400078F")]
		k_EHTTPStatusCode101SwitchingProtocols = 101,
		[Token(Token = "0x4000790")]
		k_EHTTPStatusCode200OK = 200,
		[Token(Token = "0x4000791")]
		k_EHTTPStatusCode201Created = 201,
		[Token(Token = "0x4000792")]
		k_EHTTPStatusCode202Accepted = 202,
		[Token(Token = "0x4000793")]
		k_EHTTPStatusCode203NonAuthoritative = 203,
		[Token(Token = "0x4000794")]
		k_EHTTPStatusCode204NoContent = 204,
		[Token(Token = "0x4000795")]
		k_EHTTPStatusCode205ResetContent = 205,
		[Token(Token = "0x4000796")]
		k_EHTTPStatusCode206PartialContent = 206,
		[Token(Token = "0x4000797")]
		k_EHTTPStatusCode300MultipleChoices = 300,
		[Token(Token = "0x4000798")]
		k_EHTTPStatusCode301MovedPermanently = 301,
		[Token(Token = "0x4000799")]
		k_EHTTPStatusCode302Found = 302,
		[Token(Token = "0x400079A")]
		k_EHTTPStatusCode303SeeOther = 303,
		[Token(Token = "0x400079B")]
		k_EHTTPStatusCode304NotModified = 304,
		[Token(Token = "0x400079C")]
		k_EHTTPStatusCode305UseProxy = 305,
		[Token(Token = "0x400079D")]
		k_EHTTPStatusCode307TemporaryRedirect = 307,
		[Token(Token = "0x400079E")]
		k_EHTTPStatusCode400BadRequest = 400,
		[Token(Token = "0x400079F")]
		k_EHTTPStatusCode401Unauthorized = 401,
		[Token(Token = "0x40007A0")]
		k_EHTTPStatusCode402PaymentRequired = 402,
		[Token(Token = "0x40007A1")]
		k_EHTTPStatusCode403Forbidden = 403,
		[Token(Token = "0x40007A2")]
		k_EHTTPStatusCode404NotFound = 404,
		[Token(Token = "0x40007A3")]
		k_EHTTPStatusCode405MethodNotAllowed = 405,
		[Token(Token = "0x40007A4")]
		k_EHTTPStatusCode406NotAcceptable = 406,
		[Token(Token = "0x40007A5")]
		k_EHTTPStatusCode407ProxyAuthRequired = 407,
		[Token(Token = "0x40007A6")]
		k_EHTTPStatusCode408RequestTimeout = 408,
		[Token(Token = "0x40007A7")]
		k_EHTTPStatusCode409Conflict = 409,
		[Token(Token = "0x40007A8")]
		k_EHTTPStatusCode410Gone = 410,
		[Token(Token = "0x40007A9")]
		k_EHTTPStatusCode411LengthRequired = 411,
		[Token(Token = "0x40007AA")]
		k_EHTTPStatusCode412PreconditionFailed = 412,
		[Token(Token = "0x40007AB")]
		k_EHTTPStatusCode413RequestEntityTooLarge = 413,
		[Token(Token = "0x40007AC")]
		k_EHTTPStatusCode414RequestURITooLong = 414,
		[Token(Token = "0x40007AD")]
		k_EHTTPStatusCode415UnsupportedMediaType = 415,
		[Token(Token = "0x40007AE")]
		k_EHTTPStatusCode416RequestedRangeNotSatisfiable = 416,
		[Token(Token = "0x40007AF")]
		k_EHTTPStatusCode417ExpectationFailed = 417,
		[Token(Token = "0x40007B0")]
		k_EHTTPStatusCode4xxUnknown = 418,
		[Token(Token = "0x40007B1")]
		k_EHTTPStatusCode429TooManyRequests = 429,
		[Token(Token = "0x40007B2")]
		k_EHTTPStatusCode500InternalServerError = 500,
		[Token(Token = "0x40007B3")]
		k_EHTTPStatusCode501NotImplemented = 501,
		[Token(Token = "0x40007B4")]
		k_EHTTPStatusCode502BadGateway = 502,
		[Token(Token = "0x40007B5")]
		k_EHTTPStatusCode503ServiceUnavailable = 503,
		[Token(Token = "0x40007B6")]
		k_EHTTPStatusCode504GatewayTimeout = 504,
		[Token(Token = "0x40007B7")]
		k_EHTTPStatusCode505HTTPVersionNotSupported = 505,
		[Token(Token = "0x40007B8")]
		k_EHTTPStatusCode5xxUnknown = 599
	}
	[Token(Token = "0x20001E1")]
	public enum EUniverse
	{
		[Token(Token = "0x40007BA")]
		k_EUniverseInvalid,
		[Token(Token = "0x40007BB")]
		k_EUniversePublic,
		[Token(Token = "0x40007BC")]
		k_EUniverseBeta,
		[Token(Token = "0x40007BD")]
		k_EUniverseInternal,
		[Token(Token = "0x40007BE")]
		k_EUniverseDev,
		[Token(Token = "0x40007BF")]
		k_EUniverseMax
	}
	[Token(Token = "0x20001E2")]
	public struct SteamControllerState_t
	{
		[Token(Token = "0x40007C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint unPacketNum;

		[Token(Token = "0x40007C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public ulong ulButtons;

		[Token(Token = "0x40007C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public short sLeftPadX;

		[Token(Token = "0x40007C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		public short sLeftPadY;

		[Token(Token = "0x40007C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public short sRightPadX;

		[Token(Token = "0x40007C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public short sRightPadY;
	}
	[Token(Token = "0x20001E3")]
	public struct FriendGameInfo_t
	{
		[Token(Token = "0x40007C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CGameID m_gameID;

		[Token(Token = "0x40007C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public uint m_unGameIP;

		[Token(Token = "0x40007C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ushort m_usGamePort;

		[Token(Token = "0x40007C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		public ushort m_usQueryPort;

		[Token(Token = "0x40007CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CSteamID m_steamIDLobby;
	}
	[Token(Token = "0x20001E4")]
	public struct FriendSessionStateInfo_t
	{
		[Token(Token = "0x40007CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_uiOnlineSessionInstances;

		[Token(Token = "0x40007CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public byte m_uiPublishedToFriendsSessionInstance;
	}
	[Token(Token = "0x20001E5")]
	public struct SteamItemDetails_t
	{
		[Token(Token = "0x40007CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SteamItemInstanceID_t m_itemId;

		[Token(Token = "0x40007CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public SteamItemDef_t m_iDefinition;

		[Token(Token = "0x40007CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public ushort m_unQuantity;

		[Token(Token = "0x40007D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
		public ushort m_unFlags;
	}
	[Token(Token = "0x20001E6")]
	public struct P2PSessionState_t
	{
		[Token(Token = "0x40007D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public byte m_bConnectionActive;

		[Token(Token = "0x40007D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public byte m_bConnecting;

		[Token(Token = "0x40007D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public byte m_eP2PSessionError;

		[Token(Token = "0x40007D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
		public byte m_bUsingRelay;

		[Token(Token = "0x40007D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_nBytesQueuedForSend;

		[Token(Token = "0x40007D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nPacketsQueuedForSend;

		[Token(Token = "0x40007D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public uint m_nRemoteIP;

		[Token(Token = "0x40007D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ushort m_nRemotePort;
	}
	[Token(Token = "0x20001E7")]
	public struct SteamParamStringArray_t
	{
		[Token(Token = "0x40007D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr m_ppStrings;

		[Token(Token = "0x40007DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nNumStrings;
	}
	[Token(Token = "0x20001E8")]
	public struct SteamUGCDetails_t
	{
		[Token(Token = "0x40007DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public PublishedFileId_t m_nPublishedFileId;

		[Token(Token = "0x40007DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public EResult m_eResult;

		[Token(Token = "0x40007DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public EWorkshopFileType m_eFileType;

		[Token(Token = "0x40007DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AppId_t m_nCreatorAppID;

		[Token(Token = "0x40007DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public AppId_t m_nConsumerAppID;

		[Token(Token = "0x40007E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string m_rgchTitle;

		[Token(Token = "0x40007E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string m_rgchDescription;

		[Token(Token = "0x40007E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ulong m_ulSteamIDOwner;

		[Token(Token = "0x40007E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public uint m_rtimeCreated;

		[Token(Token = "0x40007E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public uint m_rtimeUpdated;

		[Token(Token = "0x40007E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public uint m_rtimeAddedToUserList;

		[Token(Token = "0x40007E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public ERemoteStoragePublishedFileVisibility m_eVisibility;

		[Token(Token = "0x40007E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool m_bBanned;

		[Token(Token = "0x40007E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool m_bAcceptedForUse;

		[Token(Token = "0x40007E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		public bool m_bTagsTruncated;

		[Token(Token = "0x40007EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string m_rgchTags;

		[Token(Token = "0x40007EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UGCHandle_t m_hFile;

		[Token(Token = "0x40007EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UGCHandle_t m_hPreviewFile;

		[Token(Token = "0x40007ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string m_pchFileName;

		[Token(Token = "0x40007EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int m_nFileSize;

		[Token(Token = "0x40007EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int m_nPreviewFileSize;

		[Token(Token = "0x40007F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string m_rgchURL;

		[Token(Token = "0x40007F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public uint m_unVotesUp;

		[Token(Token = "0x40007F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public uint m_unVotesDown;

		[Token(Token = "0x40007F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float m_flScore;

		[Token(Token = "0x40007F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public uint m_unNumChildren;
	}
	[Token(Token = "0x20001E9")]
	public struct CallbackMsg_t
	{
		[Token(Token = "0x40007F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_hSteamUser;

		[Token(Token = "0x40007F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int m_iCallback;

		[Token(Token = "0x40007F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr m_pubParam;

		[Token(Token = "0x40007F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_cubParam;
	}
	[Token(Token = "0x20001EA")]
	public struct LeaderboardEntry_t
	{
		[Token(Token = "0x40007F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public CSteamID m_steamIDUser;

		[Token(Token = "0x40007FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int m_nGlobalRank;

		[Token(Token = "0x40007FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public int m_nScore;

		[Token(Token = "0x40007FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int m_cDetails;

		[Token(Token = "0x40007FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UGCHandle_t m_hUGC;
	}
	[Token(Token = "0x20001EB")]
	public struct MatchMakingKeyValuePair_t
	{
		[Token(Token = "0x40007FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string m_szKey;

		[Token(Token = "0x40007FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string m_szValue;

		[Token(Token = "0x600091B")]
		[Address(RVA = "0x22F52B0", Offset = "0x22F52B0", VA = "0x22F52B0")]
		private MatchMakingKeyValuePair_t(string strKey, string strValue)
		{
		}
	}
	[Token(Token = "0x20001EC")]
	public static class SteamAppList
	{
		[Token(Token = "0x600091C")]
		[Address(RVA = "0x1633A80", Offset = "0x1633A80", VA = "0x1633A80")]
		public static uint GetNumInstalledApps()
		{
			return default(uint);
		}

		[Token(Token = "0x600091D")]
		[Address(RVA = "0x1633A9C", Offset = "0x1633A9C", VA = "0x1633A9C")]
		public static uint GetInstalledApps(AppId_t[] pvecAppID, uint unMaxAppIDs)
		{
			return default(uint);
		}

		[Token(Token = "0x600091E")]
		[Address(RVA = "0x1633AD0", Offset = "0x1633AD0", VA = "0x1633AD0")]
		public static int GetAppName(AppId_t nAppID, out string pchName, int cchNameMax)
		{
			return default(int);
		}

		[Token(Token = "0x600091F")]
		[Address(RVA = "0x1633BC8", Offset = "0x1633BC8", VA = "0x1633BC8")]
		public static int GetAppInstallDir(AppId_t nAppID, out string pchDirectory, int cchNameMax)
		{
			return default(int);
		}

		[Token(Token = "0x6000920")]
		[Address(RVA = "0x1633CC0", Offset = "0x1633CC0", VA = "0x1633CC0")]
		public static int GetAppBuildId(AppId_t nAppID)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001ED")]
	public static class SteamApps
	{
		[Token(Token = "0x6000921")]
		[Address(RVA = "0x1633CEC", Offset = "0x1633CEC", VA = "0x1633CEC")]
		public static bool BIsSubscribed()
		{
			return default(bool);
		}

		[Token(Token = "0x6000922")]
		[Address(RVA = "0x1633D08", Offset = "0x1633D08", VA = "0x1633D08")]
		public static bool BIsLowViolence()
		{
			return default(bool);
		}

		[Token(Token = "0x6000923")]
		[Address(RVA = "0x1633D24", Offset = "0x1633D24", VA = "0x1633D24")]
		public static bool BIsCybercafe()
		{
			return default(bool);
		}

		[Token(Token = "0x6000924")]
		[Address(RVA = "0x1633D40", Offset = "0x1633D40", VA = "0x1633D40")]
		public static bool BIsVACBanned()
		{
			return default(bool);
		}

		[Token(Token = "0x6000925")]
		[Address(RVA = "0x1633D5C", Offset = "0x1633D5C", VA = "0x1633D5C")]
		public static string GetCurrentGameLanguage()
		{
			return null;
		}

		[Token(Token = "0x6000926")]
		[Address(RVA = "0x1633D80", Offset = "0x1633D80", VA = "0x1633D80")]
		public static string GetAvailableGameLanguages()
		{
			return null;
		}

		[Token(Token = "0x6000927")]
		[Address(RVA = "0x1633DA4", Offset = "0x1633DA4", VA = "0x1633DA4")]
		public static bool BIsSubscribedApp(AppId_t appID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000928")]
		[Address(RVA = "0x1633DD0", Offset = "0x1633DD0", VA = "0x1633DD0")]
		public static bool BIsDlcInstalled(AppId_t appID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000929")]
		[Address(RVA = "0x1633DFC", Offset = "0x1633DFC", VA = "0x1633DFC")]
		public static uint GetEarliestPurchaseUnixTime(AppId_t nAppID)
		{
			return default(uint);
		}

		[Token(Token = "0x600092A")]
		[Address(RVA = "0x1633E28", Offset = "0x1633E28", VA = "0x1633E28")]
		public static bool BIsSubscribedFromFreeWeekend()
		{
			return default(bool);
		}

		[Token(Token = "0x600092B")]
		[Address(RVA = "0x1633E44", Offset = "0x1633E44", VA = "0x1633E44")]
		public static int GetDLCCount()
		{
			return default(int);
		}

		[Token(Token = "0x600092C")]
		[Address(RVA = "0x1633E60", Offset = "0x1633E60", VA = "0x1633E60")]
		public static bool BGetDLCDataByIndex(int iDLC, out AppId_t pAppID, out bool pbAvailable, out string pchName, int cchNameBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x600092D")]
		[Address(RVA = "0x1633F68", Offset = "0x1633F68", VA = "0x1633F68")]
		public static void InstallDLC(AppId_t nAppID)
		{
		}

		[Token(Token = "0x600092E")]
		[Address(RVA = "0x1633F94", Offset = "0x1633F94", VA = "0x1633F94")]
		public static void UninstallDLC(AppId_t nAppID)
		{
		}

		[Token(Token = "0x600092F")]
		[Address(RVA = "0x1633FC0", Offset = "0x1633FC0", VA = "0x1633FC0")]
		public static void RequestAppProofOfPurchaseKey(AppId_t nAppID)
		{
		}

		[Token(Token = "0x6000930")]
		[Address(RVA = "0x1633FEC", Offset = "0x1633FEC", VA = "0x1633FEC")]
		public static bool GetCurrentBetaName(out string pchName, int cchNameBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000931")]
		[Address(RVA = "0x16340C8", Offset = "0x16340C8", VA = "0x16340C8")]
		public static bool MarkContentCorrupt(bool bMissingFilesOnly)
		{
			return default(bool);
		}

		[Token(Token = "0x6000932")]
		[Address(RVA = "0x16340F4", Offset = "0x16340F4", VA = "0x16340F4")]
		public static uint GetInstalledDepots(AppId_t appID, DepotId_t[] pvecDepots, uint cMaxDepots)
		{
			return default(uint);
		}

		[Token(Token = "0x6000933")]
		[Address(RVA = "0x1634138", Offset = "0x1634138", VA = "0x1634138")]
		public static uint GetAppInstallDir(AppId_t appID, out string pchFolder, uint cchFolderBufferSize)
		{
			return default(uint);
		}

		[Token(Token = "0x6000934")]
		[Address(RVA = "0x163422C", Offset = "0x163422C", VA = "0x163422C")]
		public static bool BIsAppInstalled(AppId_t appID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000935")]
		[Address(RVA = "0x1634258", Offset = "0x1634258", VA = "0x1634258")]
		public static CSteamID GetAppOwner()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000936")]
		[Address(RVA = "0x16342D0", Offset = "0x16342D0", VA = "0x16342D0")]
		public static string GetLaunchQueryParam(string pchKey)
		{
			return null;
		}

		[Token(Token = "0x6000937")]
		[Address(RVA = "0x1634448", Offset = "0x1634448", VA = "0x1634448")]
		public static bool GetDlcDownloadProgress(AppId_t nAppID, out ulong punBytesDownloaded, out ulong punBytesTotal)
		{
			return default(bool);
		}

		[Token(Token = "0x6000938")]
		[Address(RVA = "0x163448C", Offset = "0x163448C", VA = "0x163448C")]
		public static int GetAppBuildId()
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001EE")]
	public static class SteamClient
	{
		[Token(Token = "0x6000939")]
		[Address(RVA = "0x16344A8", Offset = "0x16344A8", VA = "0x16344A8")]
		public static HSteamPipe CreateSteamPipe()
		{
			return default(HSteamPipe);
		}

		[Token(Token = "0x600093A")]
		[Address(RVA = "0x16344D4", Offset = "0x16344D4", VA = "0x16344D4")]
		public static bool BReleaseSteamPipe(HSteamPipe hSteamPipe)
		{
			return default(bool);
		}

		[Token(Token = "0x600093B")]
		[Address(RVA = "0x1634500", Offset = "0x1634500", VA = "0x1634500")]
		public static HSteamUser ConnectToGlobalUser(HSteamPipe hSteamPipe)
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x600093C")]
		[Address(RVA = "0x163453C", Offset = "0x163453C", VA = "0x163453C")]
		public static HSteamUser CreateLocalUser(out HSteamPipe phSteamPipe, EAccountType eAccountType)
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x600093D")]
		[Address(RVA = "0x1634580", Offset = "0x1634580", VA = "0x1634580")]
		public static void ReleaseUser(HSteamPipe hSteamPipe, HSteamUser hUser)
		{
		}

		[Token(Token = "0x600093E")]
		[Address(RVA = "0x16345B4", Offset = "0x16345B4", VA = "0x16345B4")]
		public static IntPtr GetISteamUser(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600093F")]
		[Address(RVA = "0x1634730", Offset = "0x1634730", VA = "0x1634730")]
		public static IntPtr GetISteamGameServer(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000940")]
		[Address(RVA = "0x16348AC", Offset = "0x16348AC", VA = "0x16348AC")]
		public static void SetLocalIPBinding(uint unIP, ushort usPort)
		{
		}

		[Token(Token = "0x6000941")]
		[Address(RVA = "0x16348E0", Offset = "0x16348E0", VA = "0x16348E0")]
		public static IntPtr GetISteamFriends(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000942")]
		[Address(RVA = "0x1634A5C", Offset = "0x1634A5C", VA = "0x1634A5C")]
		public static IntPtr GetISteamUtils(HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000943")]
		[Address(RVA = "0x1634BD0", Offset = "0x1634BD0", VA = "0x1634BD0")]
		public static IntPtr GetISteamMatchmaking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000944")]
		[Address(RVA = "0x1634D4C", Offset = "0x1634D4C", VA = "0x1634D4C")]
		public static IntPtr GetISteamMatchmakingServers(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000945")]
		[Address(RVA = "0x1634EC8", Offset = "0x1634EC8", VA = "0x1634EC8")]
		public static IntPtr GetISteamGenericInterface(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000946")]
		[Address(RVA = "0x1635044", Offset = "0x1635044", VA = "0x1635044")]
		public static IntPtr GetISteamUserStats(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000947")]
		[Address(RVA = "0x16351C0", Offset = "0x16351C0", VA = "0x16351C0")]
		public static IntPtr GetISteamGameServerStats(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000948")]
		[Address(RVA = "0x163533C", Offset = "0x163533C", VA = "0x163533C")]
		public static IntPtr GetISteamApps(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000949")]
		[Address(RVA = "0x16354B8", Offset = "0x16354B8", VA = "0x16354B8")]
		public static IntPtr GetISteamNetworking(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600094A")]
		[Address(RVA = "0x1635634", Offset = "0x1635634", VA = "0x1635634")]
		public static IntPtr GetISteamRemoteStorage(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600094B")]
		[Address(RVA = "0x16357B0", Offset = "0x16357B0", VA = "0x16357B0")]
		public static IntPtr GetISteamScreenshots(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600094C")]
		[Address(RVA = "0x163592C", Offset = "0x163592C", VA = "0x163592C")]
		public static void RunFrame()
		{
		}

		[Token(Token = "0x600094D")]
		[Address(RVA = "0x1635948", Offset = "0x1635948", VA = "0x1635948")]
		public static uint GetIPCCallCount()
		{
			return default(uint);
		}

		[Token(Token = "0x600094E")]
		[Address(RVA = "0x1635964", Offset = "0x1635964", VA = "0x1635964")]
		public static void SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction)
		{
		}

		[Token(Token = "0x600094F")]
		[Address(RVA = "0x1635990", Offset = "0x1635990", VA = "0x1635990")]
		public static bool BShutdownIfAllPipesClosed()
		{
			return default(bool);
		}

		[Token(Token = "0x6000950")]
		[Address(RVA = "0x16359AC", Offset = "0x16359AC", VA = "0x16359AC")]
		public static IntPtr GetISteamHTTP(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000951")]
		[Address(RVA = "0x1635B28", Offset = "0x1635B28", VA = "0x1635B28")]
		public static IntPtr GetISteamUnifiedMessages(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000952")]
		[Address(RVA = "0x1635CA4", Offset = "0x1635CA4", VA = "0x1635CA4")]
		public static IntPtr GetISteamController(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000953")]
		[Address(RVA = "0x1635E20", Offset = "0x1635E20", VA = "0x1635E20")]
		public static IntPtr GetISteamUGC(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000954")]
		[Address(RVA = "0x1635F9C", Offset = "0x1635F9C", VA = "0x1635F9C")]
		public static IntPtr GetISteamAppList(HSteamUser hSteamUser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000955")]
		[Address(RVA = "0x1636118", Offset = "0x1636118", VA = "0x1636118")]
		public static IntPtr GetISteamMusic(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000956")]
		[Address(RVA = "0x1636294", Offset = "0x1636294", VA = "0x1636294")]
		public static IntPtr GetISteamMusicRemote(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000957")]
		[Address(RVA = "0x1636410", Offset = "0x1636410", VA = "0x1636410")]
		public static IntPtr GetISteamHTMLSurface(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000958")]
		[Address(RVA = "0x163658C", Offset = "0x163658C", VA = "0x163658C")]
		public static void Set_SteamAPI_CPostAPIResultInProcess(SteamAPI_PostAPIResultInProcess_t func)
		{
		}

		[Token(Token = "0x6000959")]
		[Address(RVA = "0x16365B8", Offset = "0x16365B8", VA = "0x16365B8")]
		public static void Remove_SteamAPI_CPostAPIResultInProcess(SteamAPI_PostAPIResultInProcess_t func)
		{
		}

		[Token(Token = "0x600095A")]
		[Address(RVA = "0x16365E4", Offset = "0x16365E4", VA = "0x16365E4")]
		public static void Set_SteamAPI_CCheckCallbackRegisteredInProcess(SteamAPI_CheckCallbackRegistered_t func)
		{
		}

		[Token(Token = "0x600095B")]
		[Address(RVA = "0x1636610", Offset = "0x1636610", VA = "0x1636610")]
		public static IntPtr GetISteamInventory(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x600095C")]
		[Address(RVA = "0x163678C", Offset = "0x163678C", VA = "0x163678C")]
		public static IntPtr GetISteamVideo(HSteamUser hSteamuser, HSteamPipe hSteamPipe, string pchVersion)
		{
			return default(IntPtr);
		}
	}
	[Token(Token = "0x20001EF")]
	public static class SteamController
	{
		[Token(Token = "0x600095D")]
		[Address(RVA = "0x1636908", Offset = "0x1636908", VA = "0x1636908")]
		public static bool Init(string pchAbsolutePathToControllerConfigVDF)
		{
			return default(bool);
		}

		[Token(Token = "0x600095E")]
		[Address(RVA = "0x1636A74", Offset = "0x1636A74", VA = "0x1636A74")]
		public static bool Shutdown()
		{
			return default(bool);
		}

		[Token(Token = "0x600095F")]
		[Address(RVA = "0x1636A90", Offset = "0x1636A90", VA = "0x1636A90")]
		public static void RunFrame()
		{
		}

		[Token(Token = "0x6000960")]
		[Address(RVA = "0x1636AAC", Offset = "0x1636AAC", VA = "0x1636AAC")]
		public static bool GetControllerState(uint unControllerIndex, out SteamControllerState_t pState)
		{
			return default(bool);
		}

		[Token(Token = "0x6000961")]
		[Address(RVA = "0x1636AE0", Offset = "0x1636AE0", VA = "0x1636AE0")]
		public static void TriggerHapticPulse(uint unControllerIndex, ESteamControllerPad eTargetPad, ushort usDurationMicroSec)
		{
		}

		[Token(Token = "0x6000962")]
		[Address(RVA = "0x1636B24", Offset = "0x1636B24", VA = "0x1636B24")]
		public static void SetOverrideMode(string pchMode)
		{
		}
	}
	[Token(Token = "0x20001F0")]
	public static class SteamFriends
	{
		[Token(Token = "0x6000963")]
		[Address(RVA = "0x1636F20", Offset = "0x1636F20", VA = "0x1636F20")]
		public static string GetPersonaName()
		{
			return null;
		}

		[Token(Token = "0x6000964")]
		[Address(RVA = "0x1636F44", Offset = "0x1636F44", VA = "0x1636F44")]
		public static SteamAPICall_t SetPersonaName(string pchPersonaName)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000965")]
		[Address(RVA = "0x16370DC", Offset = "0x16370DC", VA = "0x16370DC")]
		public static EPersonaState GetPersonaState()
		{
			return default(EPersonaState);
		}

		[Token(Token = "0x6000966")]
		[Address(RVA = "0x16370F8", Offset = "0x16370F8", VA = "0x16370F8")]
		public static int GetFriendCount(EFriendFlags iFriendFlags)
		{
			return default(int);
		}

		[Token(Token = "0x6000967")]
		[Address(RVA = "0x1637124", Offset = "0x1637124", VA = "0x1637124")]
		public static CSteamID GetFriendByIndex(int iFriend, EFriendFlags iFriendFlags)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000968")]
		[Address(RVA = "0x16371B4", Offset = "0x16371B4", VA = "0x16371B4")]
		public static EFriendRelationship GetFriendRelationship(CSteamID steamIDFriend)
		{
			return default(EFriendRelationship);
		}

		[Token(Token = "0x6000969")]
		[Address(RVA = "0x16371E0", Offset = "0x16371E0", VA = "0x16371E0")]
		public static EPersonaState GetFriendPersonaState(CSteamID steamIDFriend)
		{
			return default(EPersonaState);
		}

		[Token(Token = "0x600096A")]
		[Address(RVA = "0x163720C", Offset = "0x163720C", VA = "0x163720C")]
		public static string GetFriendPersonaName(CSteamID steamIDFriend)
		{
			return null;
		}

		[Token(Token = "0x600096B")]
		[Address(RVA = "0x1637240", Offset = "0x1637240", VA = "0x1637240")]
		public static bool GetFriendGamePlayed(CSteamID steamIDFriend, out FriendGameInfo_t pFriendGameInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x600096C")]
		[Address(RVA = "0x1637274", Offset = "0x1637274", VA = "0x1637274")]
		public static string GetFriendPersonaNameHistory(CSteamID steamIDFriend, int iPersonaName)
		{
			return null;
		}

		[Token(Token = "0x600096D")]
		[Address(RVA = "0x16372B0", Offset = "0x16372B0", VA = "0x16372B0")]
		public static int GetFriendSteamLevel(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x600096E")]
		[Address(RVA = "0x16372DC", Offset = "0x16372DC", VA = "0x16372DC")]
		public static string GetPlayerNickname(CSteamID steamIDPlayer)
		{
			return null;
		}

		[Token(Token = "0x600096F")]
		[Address(RVA = "0x1637310", Offset = "0x1637310", VA = "0x1637310")]
		public static int GetFriendsGroupCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000970")]
		[Address(RVA = "0x163732C", Offset = "0x163732C", VA = "0x163732C")]
		public static FriendsGroupID_t GetFriendsGroupIDByIndex(int iFG)
		{
			return default(FriendsGroupID_t);
		}

		[Token(Token = "0x6000971")]
		[Address(RVA = "0x16373B4", Offset = "0x16373B4", VA = "0x16373B4")]
		public static string GetFriendsGroupName(FriendsGroupID_t friendsGroupID)
		{
			return null;
		}

		[Token(Token = "0x6000972")]
		[Address(RVA = "0x16373E8", Offset = "0x16373E8", VA = "0x16373E8")]
		public static int GetFriendsGroupMembersCount(FriendsGroupID_t friendsGroupID)
		{
			return default(int);
		}

		[Token(Token = "0x6000973")]
		[Address(RVA = "0x1637414", Offset = "0x1637414", VA = "0x1637414")]
		public static void GetFriendsGroupMembersList(FriendsGroupID_t friendsGroupID, CSteamID[] pOutSteamIDMembers, int nMembersCount)
		{
		}

		[Token(Token = "0x6000974")]
		[Address(RVA = "0x1637458", Offset = "0x1637458", VA = "0x1637458")]
		public static bool HasFriend(CSteamID steamIDFriend, EFriendFlags iFriendFlags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000975")]
		[Address(RVA = "0x163748C", Offset = "0x163748C", VA = "0x163748C")]
		public static int GetClanCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000976")]
		[Address(RVA = "0x16374A8", Offset = "0x16374A8", VA = "0x16374A8")]
		public static CSteamID GetClanByIndex(int iClan)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000977")]
		[Address(RVA = "0x1637528", Offset = "0x1637528", VA = "0x1637528")]
		public static string GetClanName(CSteamID steamIDClan)
		{
			return null;
		}

		[Token(Token = "0x6000978")]
		[Address(RVA = "0x163755C", Offset = "0x163755C", VA = "0x163755C")]
		public static string GetClanTag(CSteamID steamIDClan)
		{
			return null;
		}

		[Token(Token = "0x6000979")]
		[Address(RVA = "0x1637590", Offset = "0x1637590", VA = "0x1637590")]
		public static bool GetClanActivityCounts(CSteamID steamIDClan, out int pnOnline, out int pnInGame, out int pnChatting)
		{
			return default(bool);
		}

		[Token(Token = "0x600097A")]
		[Address(RVA = "0x16375DC", Offset = "0x16375DC", VA = "0x16375DC")]
		public static SteamAPICall_t DownloadClanActivityCounts(CSteamID[] psteamIDClans, int cClansToRequest)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600097B")]
		[Address(RVA = "0x1637668", Offset = "0x1637668", VA = "0x1637668")]
		public static int GetFriendCountFromSource(CSteamID steamIDSource)
		{
			return default(int);
		}

		[Token(Token = "0x600097C")]
		[Address(RVA = "0x1637694", Offset = "0x1637694", VA = "0x1637694")]
		public static CSteamID GetFriendFromSourceByIndex(CSteamID steamIDSource, int iFriend)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x600097D")]
		[Address(RVA = "0x1637724", Offset = "0x1637724", VA = "0x1637724")]
		public static bool IsUserInSource(CSteamID steamIDUser, CSteamID steamIDSource)
		{
			return default(bool);
		}

		[Token(Token = "0x600097E")]
		[Address(RVA = "0x1637758", Offset = "0x1637758", VA = "0x1637758")]
		public static void SetInGameVoiceSpeaking(CSteamID steamIDUser, bool bSpeaking)
		{
		}

		[Token(Token = "0x600097F")]
		[Address(RVA = "0x163778C", Offset = "0x163778C", VA = "0x163778C")]
		public static void ActivateGameOverlay(string pchDialog)
		{
		}

		[Token(Token = "0x6000980")]
		[Address(RVA = "0x16378E4", Offset = "0x16378E4", VA = "0x16378E4")]
		public static void ActivateGameOverlayToUser(string pchDialog, CSteamID steamID)
		{
		}

		[Token(Token = "0x6000981")]
		[Address(RVA = "0x1637A44", Offset = "0x1637A44", VA = "0x1637A44")]
		public static void ActivateGameOverlayToWebPage(string pchURL)
		{
		}

		[Token(Token = "0x6000982")]
		[Address(RVA = "0x1637B9C", Offset = "0x1637B9C", VA = "0x1637B9C")]
		public static void ActivateGameOverlayToStore(AppId_t nAppID, EOverlayToStoreFlag eFlag)
		{
		}

		[Token(Token = "0x6000983")]
		[Address(RVA = "0x1637BD0", Offset = "0x1637BD0", VA = "0x1637BD0")]
		public static void SetPlayedWith(CSteamID steamIDUserPlayedWith)
		{
		}

		[Token(Token = "0x6000984")]
		[Address(RVA = "0x1637BFC", Offset = "0x1637BFC", VA = "0x1637BFC")]
		public static void ActivateGameOverlayInviteDialog(CSteamID steamIDLobby)
		{
		}

		[Token(Token = "0x6000985")]
		[Address(RVA = "0x1637C28", Offset = "0x1637C28", VA = "0x1637C28")]
		public static int GetSmallFriendAvatar(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x6000986")]
		[Address(RVA = "0x1637C54", Offset = "0x1637C54", VA = "0x1637C54")]
		public static int GetMediumFriendAvatar(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x6000987")]
		[Address(RVA = "0x1637C80", Offset = "0x1637C80", VA = "0x1637C80")]
		public static int GetLargeFriendAvatar(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x6000988")]
		[Address(RVA = "0x1637CAC", Offset = "0x1637CAC", VA = "0x1637CAC")]
		public static bool RequestUserInformation(CSteamID steamIDUser, bool bRequireNameOnly)
		{
			return default(bool);
		}

		[Token(Token = "0x6000989")]
		[Address(RVA = "0x1637CE0", Offset = "0x1637CE0", VA = "0x1637CE0")]
		public static SteamAPICall_t RequestClanOfficerList(CSteamID steamIDClan)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600098A")]
		[Address(RVA = "0x1637D5C", Offset = "0x1637D5C", VA = "0x1637D5C")]
		public static CSteamID GetClanOwner(CSteamID steamIDClan)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x600098B")]
		[Address(RVA = "0x1637DDC", Offset = "0x1637DDC", VA = "0x1637DDC")]
		public static int GetClanOfficerCount(CSteamID steamIDClan)
		{
			return default(int);
		}

		[Token(Token = "0x600098C")]
		[Address(RVA = "0x1637E08", Offset = "0x1637E08", VA = "0x1637E08")]
		public static CSteamID GetClanOfficerByIndex(CSteamID steamIDClan, int iOfficer)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x600098D")]
		[Address(RVA = "0x1637E98", Offset = "0x1637E98", VA = "0x1637E98")]
		public static uint GetUserRestrictions()
		{
			return default(uint);
		}

		[Token(Token = "0x600098E")]
		[Address(RVA = "0x1637EB4", Offset = "0x1637EB4", VA = "0x1637EB4")]
		public static bool SetRichPresence(string pchKey, string pchValue)
		{
			return default(bool);
		}

		[Token(Token = "0x600098F")]
		[Address(RVA = "0x16380FC", Offset = "0x16380FC", VA = "0x16380FC")]
		public static void ClearRichPresence()
		{
		}

		[Token(Token = "0x6000990")]
		[Address(RVA = "0x1638118", Offset = "0x1638118", VA = "0x1638118")]
		public static string GetFriendRichPresence(CSteamID steamIDFriend, string pchKey)
		{
			return null;
		}

		[Token(Token = "0x6000991")]
		[Address(RVA = "0x1638298", Offset = "0x1638298", VA = "0x1638298")]
		public static int GetFriendRichPresenceKeyCount(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x6000992")]
		[Address(RVA = "0x16382C4", Offset = "0x16382C4", VA = "0x16382C4")]
		public static string GetFriendRichPresenceKeyByIndex(CSteamID steamIDFriend, int iKey)
		{
			return null;
		}

		[Token(Token = "0x6000993")]
		[Address(RVA = "0x1638300", Offset = "0x1638300", VA = "0x1638300")]
		public static void RequestFriendRichPresence(CSteamID steamIDFriend)
		{
		}

		[Token(Token = "0x6000994")]
		[Address(RVA = "0x163832C", Offset = "0x163832C", VA = "0x163832C")]
		public static bool InviteUserToGame(CSteamID steamIDFriend, string pchConnectString)
		{
			return default(bool);
		}

		[Token(Token = "0x6000995")]
		[Address(RVA = "0x16384A0", Offset = "0x16384A0", VA = "0x16384A0")]
		public static int GetCoplayFriendCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000996")]
		[Address(RVA = "0x16384BC", Offset = "0x16384BC", VA = "0x16384BC")]
		public static CSteamID GetCoplayFriend(int iCoplayFriend)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000997")]
		[Address(RVA = "0x163853C", Offset = "0x163853C", VA = "0x163853C")]
		public static int GetFriendCoplayTime(CSteamID steamIDFriend)
		{
			return default(int);
		}

		[Token(Token = "0x6000998")]
		[Address(RVA = "0x1638568", Offset = "0x1638568", VA = "0x1638568")]
		public static AppId_t GetFriendCoplayGame(CSteamID steamIDFriend)
		{
			return default(AppId_t);
		}

		[Token(Token = "0x6000999")]
		[Address(RVA = "0x16385F0", Offset = "0x16385F0", VA = "0x16385F0")]
		public static SteamAPICall_t JoinClanChatRoom(CSteamID steamIDClan)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x600099A")]
		[Address(RVA = "0x163866C", Offset = "0x163866C", VA = "0x163866C")]
		public static bool LeaveClanChatRoom(CSteamID steamIDClan)
		{
			return default(bool);
		}

		[Token(Token = "0x600099B")]
		[Address(RVA = "0x1638698", Offset = "0x1638698", VA = "0x1638698")]
		public static int GetClanChatMemberCount(CSteamID steamIDClan)
		{
			return default(int);
		}

		[Token(Token = "0x600099C")]
		[Address(RVA = "0x16386C4", Offset = "0x16386C4", VA = "0x16386C4")]
		public static CSteamID GetChatMemberByIndex(CSteamID steamIDClan, int iUser)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x600099D")]
		[Address(RVA = "0x1638754", Offset = "0x1638754", VA = "0x1638754")]
		public static bool SendClanChatMessage(CSteamID steamIDClanChat, string pchText)
		{
			return default(bool);
		}

		[Token(Token = "0x600099E")]
		[Address(RVA = "0x16388C8", Offset = "0x16388C8", VA = "0x16388C8")]
		public static int GetClanChatMessage(CSteamID steamIDClanChat, int iMessage, out string prgchText, int cchTextMax, out EChatEntryType peChatEntryType, out CSteamID psteamidChatter)
		{
			return default(int);
		}

		[Token(Token = "0x600099F")]
		[Address(RVA = "0x16389DC", Offset = "0x16389DC", VA = "0x16389DC")]
		public static bool IsClanChatAdmin(CSteamID steamIDClanChat, CSteamID steamIDUser)
		{
			return default(bool);
		}

		[Token(Token = "0x60009A0")]
		[Address(RVA = "0x1638A10", Offset = "0x1638A10", VA = "0x1638A10")]
		public static bool IsClanChatWindowOpenInSteam(CSteamID steamIDClanChat)
		{
			return default(bool);
		}

		[Token(Token = "0x60009A1")]
		[Address(RVA = "0x1638A3C", Offset = "0x1638A3C", VA = "0x1638A3C")]
		public static bool OpenClanChatWindowInSteam(CSteamID steamIDClanChat)
		{
			return default(bool);
		}

		[Token(Token = "0x60009A2")]
		[Address(RVA = "0x1638A68", Offset = "0x1638A68", VA = "0x1638A68")]
		public static bool CloseClanChatWindowInSteam(CSteamID steamIDClanChat)
		{
			return default(bool);
		}

		[Token(Token = "0x60009A3")]
		[Address(RVA = "0x1638A94", Offset = "0x1638A94", VA = "0x1638A94")]
		public static bool SetListenForFriendsMessages(bool bInterceptEnabled)
		{
			return default(bool);
		}

		[Token(Token = "0x60009A4")]
		[Address(RVA = "0x1638AC0", Offset = "0x1638AC0", VA = "0x1638AC0")]
		public static bool ReplyToFriendMessage(CSteamID steamIDFriend, string pchMsgToSend)
		{
			return default(bool);
		}

		[Token(Token = "0x60009A5")]
		[Address(RVA = "0x1638C34", Offset = "0x1638C34", VA = "0x1638C34")]
		public static int GetFriendMessage(CSteamID steamIDFriend, int iMessageID, out string pvData, int cubData, out EChatEntryType peChatEntryType)
		{
			return default(int);
		}

		[Token(Token = "0x60009A6")]
		[Address(RVA = "0x1638D40", Offset = "0x1638D40", VA = "0x1638D40")]
		public static SteamAPICall_t GetFollowerCount(CSteamID steamID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60009A7")]
		[Address(RVA = "0x1638DBC", Offset = "0x1638DBC", VA = "0x1638DBC")]
		public static SteamAPICall_t IsFollowing(CSteamID steamID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60009A8")]
		[Address(RVA = "0x1638E38", Offset = "0x1638E38", VA = "0x1638E38")]
		public static SteamAPICall_t EnumerateFollowingList(uint unStartIndex)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x20001F1")]
	public static class SteamGameServer
	{
		[Token(Token = "0x60009A9")]
		[Address(RVA = "0x1638EB4", Offset = "0x1638EB4", VA = "0x1638EB4")]
		public static bool InitGameServer(uint unIP, ushort usGamePort, ushort usQueryPort, uint unFlags, AppId_t nGameAppId, string pchVersionString)
		{
			return default(bool);
		}

		[Token(Token = "0x60009AA")]
		[Address(RVA = "0x1639050", Offset = "0x1639050", VA = "0x1639050")]
		public static void SetProduct(string pszProduct)
		{
		}

		[Token(Token = "0x60009AB")]
		[Address(RVA = "0x16391A8", Offset = "0x16391A8", VA = "0x16391A8")]
		public static void SetGameDescription(string pszGameDescription)
		{
		}

		[Token(Token = "0x60009AC")]
		[Address(RVA = "0x1639300", Offset = "0x1639300", VA = "0x1639300")]
		public static void SetModDir(string pszModDir)
		{
		}

		[Token(Token = "0x60009AD")]
		[Address(RVA = "0x1639458", Offset = "0x1639458", VA = "0x1639458")]
		public static void SetDedicatedServer(bool bDedicated)
		{
		}

		[Token(Token = "0x60009AE")]
		[Address(RVA = "0x1639484", Offset = "0x1639484", VA = "0x1639484")]
		public static void LogOn(string pszToken)
		{
		}

		[Token(Token = "0x60009AF")]
		[Address(RVA = "0x16395DC", Offset = "0x16395DC", VA = "0x16395DC")]
		public static void LogOnAnonymous()
		{
		}

		[Token(Token = "0x60009B0")]
		[Address(RVA = "0x16395F8", Offset = "0x16395F8", VA = "0x16395F8")]
		public static void LogOff()
		{
		}

		[Token(Token = "0x60009B1")]
		[Address(RVA = "0x1639614", Offset = "0x1639614", VA = "0x1639614")]
		public static bool BLoggedOn()
		{
			return default(bool);
		}

		[Token(Token = "0x60009B2")]
		[Address(RVA = "0x1639630", Offset = "0x1639630", VA = "0x1639630")]
		public static bool BSecure()
		{
			return default(bool);
		}

		[Token(Token = "0x60009B3")]
		[Address(RVA = "0x163964C", Offset = "0x163964C", VA = "0x163964C")]
		public static CSteamID GetSteamID()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60009B4")]
		[Address(RVA = "0x16396C4", Offset = "0x16396C4", VA = "0x16396C4")]
		public static bool WasRestartRequested()
		{
			return default(bool);
		}

		[Token(Token = "0x60009B5")]
		[Address(RVA = "0x16396E0", Offset = "0x16396E0", VA = "0x16396E0")]
		public static void SetMaxPlayerCount(int cPlayersMax)
		{
		}

		[Token(Token = "0x60009B6")]
		[Address(RVA = "0x163970C", Offset = "0x163970C", VA = "0x163970C")]
		public static void SetBotPlayerCount(int cBotplayers)
		{
		}

		[Token(Token = "0x60009B7")]
		[Address(RVA = "0x1639738", Offset = "0x1639738", VA = "0x1639738")]
		public static void SetServerName(string pszServerName)
		{
		}

		[Token(Token = "0x60009B8")]
		[Address(RVA = "0x1639890", Offset = "0x1639890", VA = "0x1639890")]
		public static void SetMapName(string pszMapName)
		{
		}

		[Token(Token = "0x60009B9")]
		[Address(RVA = "0x16399E8", Offset = "0x16399E8", VA = "0x16399E8")]
		public static void SetPasswordProtected(bool bPasswordProtected)
		{
		}

		[Token(Token = "0x60009BA")]
		[Address(RVA = "0x1639A14", Offset = "0x1639A14", VA = "0x1639A14")]
		public static void SetSpectatorPort(ushort unSpectatorPort)
		{
		}

		[Token(Token = "0x60009BB")]
		[Address(RVA = "0x1639A40", Offset = "0x1639A40", VA = "0x1639A40")]
		public static void SetSpectatorServerName(string pszSpectatorServerName)
		{
		}

		[Token(Token = "0x60009BC")]
		[Address(RVA = "0x1639B98", Offset = "0x1639B98", VA = "0x1639B98")]
		public static void ClearAllKeyValues()
		{
		}

		[Token(Token = "0x60009BD")]
		[Address(RVA = "0x1639BB4", Offset = "0x1639BB4", VA = "0x1639BB4")]
		public static void SetKeyValue(string pKey, string pValue)
		{
		}

		[Token(Token = "0x60009BE")]
		[Address(RVA = "0x1639DE0", Offset = "0x1639DE0", VA = "0x1639DE0")]
		public static void SetGameTags(string pchGameTags)
		{
		}

		[Token(Token = "0x60009BF")]
		[Address(RVA = "0x1639F38", Offset = "0x1639F38", VA = "0x1639F38")]
		public static void SetGameData(string pchGameData)
		{
		}

		[Token(Token = "0x60009C0")]
		[Address(RVA = "0x163A090", Offset = "0x163A090", VA = "0x163A090")]
		public static void SetRegion(string pszRegion)
		{
		}

		[Token(Token = "0x60009C1")]
		[Address(RVA = "0x163A1E8", Offset = "0x163A1E8", VA = "0x163A1E8")]
		public static bool SendUserConnectAndAuthenticate(uint unIPClient, byte[] pvAuthBlob, uint cubAuthBlobSize, out CSteamID pSteamIDUser)
		{
			return default(bool);
		}

		[Token(Token = "0x60009C2")]
		[Address(RVA = "0x163A234", Offset = "0x163A234", VA = "0x163A234")]
		public static CSteamID CreateUnauthenticatedUserConnection()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x60009C3")]
		[Address(RVA = "0x163A2AC", Offset = "0x163A2AC", VA = "0x163A2AC")]
		public static void SendUserDisconnect(CSteamID steamIDUser)
		{
		}

		[Token(Token = "0x60009C4")]
		[Address(RVA = "0x163A2D8", Offset = "0x163A2D8", VA = "0x163A2D8")]
		public static bool BUpdateUserData(CSteamID steamIDUser, string pchPlayerName, uint uScore)
		{
			return default(bool);
		}

		[Token(Token = "0x60009C5")]
		[Address(RVA = "0x163A454", Offset = "0x163A454", VA = "0x163A454")]
		public static HAuthTicket GetAuthSessionTicket(byte[] pTicket, int cbMaxTicket, out uint pcbTicket)
		{
			return default(HAuthTicket);
		}

		[Token(Token = "0x60009C6")]
		[Address(RVA = "0x163A4F4", Offset = "0x163A4F4", VA = "0x163A4F4")]
		public static EBeginAuthSessionResult BeginAuthSession(byte[] pAuthTicket, int cbAuthTicket, CSteamID steamID)
		{
			return default(EBeginAuthSessionResult);
		}

		[Token(Token = "0x60009C7")]
		[Address(RVA = "0x163A538", Offset = "0x163A538", VA = "0x163A538")]
		public static void EndAuthSession(CSteamID steamID)
		{
		}

		[Token(Token = "0x60009C8")]
		[Address(RVA = "0x163A564", Offset = "0x163A564", VA = "0x163A564")]
		public static void CancelAuthTicket(HAuthTicket hAuthTicket)
		{
		}

		[Token(Token = "0x60009C9")]
		[Address(RVA = "0x163A590", Offset = "0x163A590", VA = "0x163A590")]
		public static EUserHasLicenseForAppResult UserHasLicenseForApp(CSteamID steamID, AppId_t appID)
		{
			return default(EUserHasLicenseForAppResult);
		}

		[Token(Token = "0x60009CA")]
		[Address(RVA = "0x163A5C4", Offset = "0x163A5C4", VA = "0x163A5C4")]
		public static bool RequestUserGroupStatus(CSteamID steamIDUser, CSteamID steamIDGroup)
		{
			return default(bool);
		}

		[Token(Token = "0x60009CB")]
		[Address(RVA = "0x163A5F8", Offset = "0x163A5F8", VA = "0x163A5F8")]
		public static void GetGameplayStats()
		{
		}

		[Token(Token = "0x60009CC")]
		[Address(RVA = "0x163A614", Offset = "0x163A614", VA = "0x163A614")]
		public static SteamAPICall_t GetServerReputation()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60009CD")]
		[Address(RVA = "0x163A688", Offset = "0x163A688", VA = "0x163A688")]
		public static uint GetPublicIP()
		{
			return default(uint);
		}

		[Token(Token = "0x60009CE")]
		[Address(RVA = "0x163A6A4", Offset = "0x163A6A4", VA = "0x163A6A4")]
		public static bool HandleIncomingPacket(byte[] pData, int cbData, uint srcIP, ushort srcPort)
		{
			return default(bool);
		}

		[Token(Token = "0x60009CF")]
		[Address(RVA = "0x163A6F0", Offset = "0x163A6F0", VA = "0x163A6F0")]
		public static int GetNextOutgoingPacket(byte[] pOut, int cbMaxOut, out uint pNetAdr, out ushort pPort)
		{
			return default(int);
		}

		[Token(Token = "0x60009D0")]
		[Address(RVA = "0x163A73C", Offset = "0x163A73C", VA = "0x163A73C")]
		public static void EnableHeartbeats(bool bActive)
		{
		}

		[Token(Token = "0x60009D1")]
		[Address(RVA = "0x163A768", Offset = "0x163A768", VA = "0x163A768")]
		public static void SetHeartbeatInterval(int iHeartbeatInterval)
		{
		}

		[Token(Token = "0x60009D2")]
		[Address(RVA = "0x163A794", Offset = "0x163A794", VA = "0x163A794")]
		public static void ForceHeartbeat()
		{
		}

		[Token(Token = "0x60009D3")]
		[Address(RVA = "0x163A7B0", Offset = "0x163A7B0", VA = "0x163A7B0")]
		public static SteamAPICall_t AssociateWithClan(CSteamID steamIDClan)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x60009D4")]
		[Address(RVA = "0x163A82C", Offset = "0x163A82C", VA = "0x163A82C")]
		public static SteamAPICall_t ComputeNewPlayerCompatibility(CSteamID steamIDNewPlayer)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x20001F2")]
	public static class SteamGameServerHTTP
	{
		[Token(Token = "0x60009D5")]
		[Address(RVA = "0x163A8A8", Offset = "0x163A8A8", VA = "0x163A8A8")]
		public static HTTPRequestHandle CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, string pchAbsoluteURL)
		{
			return default(HTTPRequestHandle);
		}

		[Token(Token = "0x60009D6")]
		[Address(RVA = "0x163AA5C", Offset = "0x163AA5C", VA = "0x163AA5C")]
		public static bool SetHTTPRequestContextValue(HTTPRequestHandle hRequest, ulong ulContextValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0x163AA90", Offset = "0x163AA90", VA = "0x163AA90")]
		public static bool SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint unTimeoutSeconds)
		{
			return default(bool);
		}

		[Token(Token = "0x60009D8")]
		[Address(RVA = "0x163AAC4", Offset = "0x163AAC4", VA = "0x163AAC4")]
		public static bool SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, string pchHeaderValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60009D9")]
		[Address(RVA = "0x163AD14", Offset = "0x163AD14", VA = "0x163AD14")]
		public static bool SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, string pchParamName, string pchParamValue)
		{
			return default(bool);
		}

		[Token(Token = "0x60009DA")]
		[Address(RVA = "0x163AF64", Offset = "0x163AF64", VA = "0x163AF64")]
		public static bool SendHTTPRequest(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60009DB")]
		[Address(RVA = "0x163AF98", Offset = "0x163AF98", VA = "0x163AF98")]
		public static bool SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60009DC")]
		[Address(RVA = "0x163AFCC", Offset = "0x163AFCC", VA = "0x163AFCC")]
		public static bool DeferHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x60009DD")]
		[Address(RVA = "0x163AFF8", Offset = "0x163AFF8", VA = "0x163AFF8")]
		public static bool PrioritizeHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x60009DE")]
		[Address(RVA = "0x163B024", Offset = "0x163B024", VA = "0x163B024")]
		public static bool GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, string pchHeaderName, out uint unResponseHeaderSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60009DF")]
		[Address(RVA = "0x163B1A0", Offset = "0x163B1A0", VA = "0x163B1A0")]
		public static bool GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, byte[] pHeaderValueBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E0")]
		[Address(RVA = "0x163B324", Offset = "0x163B324", VA = "0x163B324")]
		public static bool GetHTTPResponseBodySize(HTTPRequestHandle hRequest, out uint unBodySize)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E1")]
		[Address(RVA = "0x163B358", Offset = "0x163B358", VA = "0x163B358")]
		public static bool GetHTTPResponseBodyData(HTTPRequestHandle hRequest, byte[] pBodyDataBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E2")]
		[Address(RVA = "0x163B39C", Offset = "0x163B39C", VA = "0x163B39C")]
		public static bool GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint cOffset, byte[] pBodyDataBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E3")]
		[Address(RVA = "0x163B3E8", Offset = "0x163B3E8", VA = "0x163B3E8")]
		public static bool ReleaseHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E4")]
		[Address(RVA = "0x163B414", Offset = "0x163B414", VA = "0x163B414")]
		public static bool GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, out float pflPercentOut)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E5")]
		[Address(RVA = "0x163B448", Offset = "0x163B448", VA = "0x163B448")]
		public static bool SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, string pchContentType, byte[] pubBody, uint unBodyLen)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E6")]
		[Address(RVA = "0x163B5CC", Offset = "0x163B5CC", VA = "0x163B5CC")]
		public static HTTPCookieContainerHandle CreateCookieContainer(bool bAllowResponsesToModify)
		{
			return default(HTTPCookieContainerHandle);
		}

		[Token(Token = "0x60009E7")]
		[Address(RVA = "0x163B654", Offset = "0x163B654", VA = "0x163B654")]
		public static bool ReleaseCookieContainer(HTTPCookieContainerHandle hCookieContainer)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E8")]
		[Address(RVA = "0x163B680", Offset = "0x163B680", VA = "0x163B680")]
		public static bool SetCookie(HTTPCookieContainerHandle hCookieContainer, string pchHost, string pchUrl, string pchCookie)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E9")]
		[Address(RVA = "0x163B9B0", Offset = "0x163B9B0", VA = "0x163B9B0")]
		public static bool SetHTTPRequestCookieContainer(HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer)
		{
			return default(bool);
		}

		[Token(Token = "0x60009EA")]
		[Address(RVA = "0x163B9E4", Offset = "0x163B9E4", VA = "0x163B9E4")]
		public static bool SetHTTPRequestUserAgentInfo(HTTPRequestHandle hRequest, string pchUserAgentInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x60009EB")]
		[Address(RVA = "0x163BB58", Offset = "0x163BB58", VA = "0x163BB58")]
		public static bool SetHTTPRequestRequiresVerifiedCertificate(HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate)
		{
			return default(bool);
		}

		[Token(Token = "0x60009EC")]
		[Address(RVA = "0x163BB8C", Offset = "0x163BB8C", VA = "0x163BB8C")]
		public static bool SetHTTPRequestAbsoluteTimeoutMS(HTTPRequestHandle hRequest, uint unMilliseconds)
		{
			return default(bool);
		}

		[Token(Token = "0x60009ED")]
		[Address(RVA = "0x163BBC0", Offset = "0x163BBC0", VA = "0x163BBC0")]
		public static bool GetHTTPRequestWasTimedOut(HTTPRequestHandle hRequest, out bool pbWasTimedOut)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001F3")]
	public static class SteamGameServerInventory
	{
		[Token(Token = "0x60009EE")]
		[Address(RVA = "0x163BBF4", Offset = "0x163BBF4", VA = "0x163BBF4")]
		public static EResult GetResultStatus(SteamInventoryResult_t resultHandle)
		{
			return default(EResult);
		}

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0x163BC20", Offset = "0x163BC20", VA = "0x163BC20")]
		public static bool GetResultItems(SteamInventoryResult_t resultHandle, SteamItemDetails_t[] pOutItemsArray, ref uint punOutItemsArraySize)
		{
			return default(bool);
		}

		[Token(Token = "0x60009F0")]
		[Address(RVA = "0x163BC64", Offset = "0x163BC64", VA = "0x163BC64")]
		public static uint GetResultTimestamp(SteamInventoryResult_t resultHandle)
		{
			return default(uint);
		}

		[Token(Token = "0x60009F1")]
		[Address(RVA = "0x163BC90", Offset = "0x163BC90", VA = "0x163BC90")]
		public static bool CheckResultSteamID(SteamInventoryResult_t resultHandle, CSteamID steamIDExpected)
		{
			return default(bool);
		}

		[Token(Token = "0x60009F2")]
		[Address(RVA = "0x163BCC4", Offset = "0x163BCC4", VA = "0x163BCC4")]
		public static void DestroyResult(SteamInventoryResult_t resultHandle)
		{
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0x163BCF0", Offset = "0x163BCF0", VA = "0x163BCF0")]
		public static bool GetAllItems(out SteamInventoryResult_t pResultHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60009F4")]
		[Address(RVA = "0x163BD1C", Offset = "0x163BD1C", VA = "0x163BD1C")]
		public static bool GetItemsByID(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t[] pInstanceIDs, uint unCountInstanceIDs)
		{
			return default(bool);
		}

		[Token(Token = "0x60009F5")]
		[Address(RVA = "0x163BD60", Offset = "0x163BD60", VA = "0x163BD60")]
		public static bool SerializeResult(SteamInventoryResult_t resultHandle, byte[] pOutBuffer, out uint punOutBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x60009F6")]
		[Address(RVA = "0x163BDA4", Offset = "0x163BDA4", VA = "0x163BDA4")]
		public static bool DeserializeResult(out SteamInventoryResult_t pOutResultHandle, byte[] pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60009F7")]
		[Address(RVA = "0x163BDF0", Offset = "0x163BDF0", VA = "0x163BDF0")]
		public static bool GenerateItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength)
		{
			return default(bool);
		}

		[Token(Token = "0x60009F8")]
		[Address(RVA = "0x163BE3C", Offset = "0x163BE3C", VA = "0x163BE3C")]
		public static bool GrantPromoItems(out SteamInventoryResult_t pResultHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x60009F9")]
		[Address(RVA = "0x163BE68", Offset = "0x163BE68", VA = "0x163BE68")]
		public static bool AddPromoItem(out SteamInventoryResult_t pResultHandle, SteamItemDef_t itemDef)
		{
			return default(bool);
		}

		[Token(Token = "0x60009FA")]
		[Address(RVA = "0x163BE9C", Offset = "0x163BE9C", VA = "0x163BE9C")]
		public static bool AddPromoItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayItemDefs, uint unArrayLength)
		{
			return default(bool);
		}

		[Token(Token = "0x60009FB")]
		[Address(RVA = "0x163BEE0", Offset = "0x163BEE0", VA = "0x163BEE0")]
		public static bool ConsumeItem(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemConsume, uint unQuantity)
		{
			return default(bool);
		}

		[Token(Token = "0x60009FC")]
		[Address(RVA = "0x163BF24", Offset = "0x163BF24", VA = "0x163BF24")]
		public static bool ExchangeItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, SteamItemInstanceID_t[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength)
		{
			return default(bool);
		}

		[Token(Token = "0x60009FD")]
		[Address(RVA = "0x163BF98", Offset = "0x163BF98", VA = "0x163BF98")]
		public static bool TransferItemQuantity(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemIdSource, uint unQuantity, SteamItemInstanceID_t itemIdDest)
		{
			return default(bool);
		}

		[Token(Token = "0x60009FE")]
		[Address(RVA = "0x163BFE4", Offset = "0x163BFE4", VA = "0x163BFE4")]
		public static void SendItemDropHeartbeat()
		{
		}

		[Token(Token = "0x60009FF")]
		[Address(RVA = "0x163C000", Offset = "0x163C000", VA = "0x163C000")]
		public static bool TriggerItemDrop(out SteamInventoryResult_t pResultHandle, SteamItemDef_t dropListDefinition)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A00")]
		[Address(RVA = "0x163C034", Offset = "0x163C034", VA = "0x163C034")]
		public static bool TradeItems(out SteamInventoryResult_t pResultHandle, CSteamID steamIDTradePartner, SteamItemInstanceID_t[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, SteamItemInstanceID_t[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A01")]
		[Address(RVA = "0x163C0B0", Offset = "0x163C0B0", VA = "0x163C0B0")]
		public static bool LoadItemDefinitions()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A02")]
		[Address(RVA = "0x163C0CC", Offset = "0x163C0CC", VA = "0x163C0CC")]
		public static bool GetItemDefinitionIDs(SteamItemDef_t[] pItemDefIDs, out uint punItemDefIDsArraySize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A03")]
		[Address(RVA = "0x163C100", Offset = "0x163C100", VA = "0x163C100")]
		public static bool GetItemDefinitionProperty(SteamItemDef_t iDefinition, string pchPropertyName, out string pchValueBuffer, ref uint punValueBufferSize)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001F4")]
	public static class SteamGameServerNetworking
	{
		[Token(Token = "0x6000A04")]
		[Address(RVA = "0x163C328", Offset = "0x163C328", VA = "0x163C328")]
		public static bool SendP2PPacket(CSteamID steamIDRemote, byte[] pubData, uint cubData, EP2PSend eP2PSendType, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0x163C384", Offset = "0x163C384", VA = "0x163C384")]
		public static bool IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A06")]
		[Address(RVA = "0x163C3B8", Offset = "0x163C3B8", VA = "0x163C3B8")]
		public static bool ReadP2PPacket(byte[] pubDest, uint cubDest, out uint pcubMsgSize, out CSteamID psteamIDRemote, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A07")]
		[Address(RVA = "0x163C414", Offset = "0x163C414", VA = "0x163C414")]
		public static bool AcceptP2PSessionWithUser(CSteamID steamIDRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A08")]
		[Address(RVA = "0x163C440", Offset = "0x163C440", VA = "0x163C440")]
		public static bool CloseP2PSessionWithUser(CSteamID steamIDRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0x163C46C", Offset = "0x163C46C", VA = "0x163C46C")]
		public static bool CloseP2PChannelWithUser(CSteamID steamIDRemote, int nChannel)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A0A")]
		[Address(RVA = "0x163C4A0", Offset = "0x163C4A0", VA = "0x163C4A0")]
		public static bool GetP2PSessionState(CSteamID steamIDRemote, out P2PSessionState_t pConnectionState)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0x163C4D4", Offset = "0x163C4D4", VA = "0x163C4D4")]
		public static bool AllowP2PPacketRelay(bool bAllow)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0x163C500", Offset = "0x163C500", VA = "0x163C500")]
		public static SNetListenSocket_t CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay)
		{
			return default(SNetListenSocket_t);
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0x163C55C", Offset = "0x163C55C", VA = "0x163C55C")]
		public static SNetSocket_t CreateP2PConnectionSocket(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0x163C5B8", Offset = "0x163C5B8", VA = "0x163C5B8")]
		public static SNetSocket_t CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0x163C60C", Offset = "0x163C60C", VA = "0x163C60C")]
		public static bool DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A10")]
		[Address(RVA = "0x163C640", Offset = "0x163C640", VA = "0x163C640")]
		public static bool DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0x163C674", Offset = "0x163C674", VA = "0x163C674")]
		public static bool SendDataOnSocket(SNetSocket_t hSocket, IntPtr pubData, uint cubData, bool bReliable)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A12")]
		[Address(RVA = "0x163C6C0", Offset = "0x163C6C0", VA = "0x163C6C0")]
		public static bool IsDataAvailableOnSocket(SNetSocket_t hSocket, out uint pcubMsgSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A13")]
		[Address(RVA = "0x163C6F4", Offset = "0x163C6F4", VA = "0x163C6F4")]
		public static bool RetrieveDataFromSocket(SNetSocket_t hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A14")]
		[Address(RVA = "0x163C740", Offset = "0x163C740", VA = "0x163C740")]
		public static bool IsDataAvailable(SNetListenSocket_t hListenSocket, out uint pcubMsgSize, out SNetSocket_t phSocket)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A15")]
		[Address(RVA = "0x163C784", Offset = "0x163C784", VA = "0x163C784")]
		public static bool RetrieveData(SNetListenSocket_t hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out SNetSocket_t phSocket)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A16")]
		[Address(RVA = "0x163C7E0", Offset = "0x163C7E0", VA = "0x163C7E0")]
		public static bool GetSocketInfo(SNetSocket_t hSocket, out CSteamID pSteamIDRemote, out int peSocketStatus, out uint punIPRemote, out ushort punPortRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A17")]
		[Address(RVA = "0x163C83C", Offset = "0x163C83C", VA = "0x163C83C")]
		public static bool GetListenSocketInfo(SNetListenSocket_t hListenSocket, out uint pnIP, out ushort pnPort)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A18")]
		[Address(RVA = "0x163C880", Offset = "0x163C880", VA = "0x163C880")]
		public static ESNetSocketConnectionType GetSocketConnectionType(SNetSocket_t hSocket)
		{
			return default(ESNetSocketConnectionType);
		}

		[Token(Token = "0x6000A19")]
		[Address(RVA = "0x163C8AC", Offset = "0x163C8AC", VA = "0x163C8AC")]
		public static int GetMaxPacketSize(SNetSocket_t hSocket)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20001F5")]
	public static class SteamGameServerStats
	{
		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0x163C8D8", Offset = "0x163C8D8", VA = "0x163C8D8")]
		public static SteamAPICall_t RequestUserStats(CSteamID steamIDUser)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A1B")]
		[Address(RVA = "0x163C954", Offset = "0x163C954", VA = "0x163C954")]
		public static bool GetUserStat(CSteamID steamIDUser, string pchName, out int pData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A1C")]
		[Address(RVA = "0x163CAD0", Offset = "0x163CAD0", VA = "0x163CAD0")]
		public static bool GetUserStat(CSteamID steamIDUser, string pchName, out float pData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A1D")]
		[Address(RVA = "0x163CC4C", Offset = "0x163CC4C", VA = "0x163CC4C")]
		public static bool GetUserAchievement(CSteamID steamIDUser, string pchName, out bool pbAchieved)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A1E")]
		[Address(RVA = "0x163CDC8", Offset = "0x163CDC8", VA = "0x163CDC8")]
		public static bool SetUserStat(CSteamID steamIDUser, string pchName, int nData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A1F")]
		[Address(RVA = "0x163CF44", Offset = "0x163CF44", VA = "0x163CF44")]
		public static bool SetUserStat(CSteamID steamIDUser, string pchName, float fData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A20")]
		[Address(RVA = "0x163D0C0", Offset = "0x163D0C0", VA = "0x163D0C0")]
		public static bool UpdateUserAvgRateStat(CSteamID steamIDUser, string pchName, float flCountThisSession, double dSessionLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A21")]
		[Address(RVA = "0x163D24C", Offset = "0x163D24C", VA = "0x163D24C")]
		public static bool SetUserAchievement(CSteamID steamIDUser, string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A22")]
		[Address(RVA = "0x163D3C0", Offset = "0x163D3C0", VA = "0x163D3C0")]
		public static bool ClearUserAchievement(CSteamID steamIDUser, string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A23")]
		[Address(RVA = "0x163D534", Offset = "0x163D534", VA = "0x163D534")]
		public static SteamAPICall_t StoreUserStats(CSteamID steamIDUser)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x20001F6")]
	public static class SteamGameServerUGC
	{
		[Token(Token = "0x6000A24")]
		[Address(RVA = "0x163D5B0", Offset = "0x163D5B0", VA = "0x163D5B0")]
		public static UGCQueryHandle_t CreateQueryUserUGCRequest(AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000A25")]
		[Address(RVA = "0x163D678", Offset = "0x163D678", VA = "0x163D678")]
		public static UGCQueryHandle_t CreateQueryAllUGCRequest(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000A26")]
		[Address(RVA = "0x163D728", Offset = "0x163D728", VA = "0x163D728")]
		public static UGCQueryHandle_t CreateQueryUGCDetailsRequest(PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000A27")]
		[Address(RVA = "0x163D7B8", Offset = "0x163D7B8", VA = "0x163D7B8")]
		public static SteamAPICall_t SendQueryUGCRequest(UGCQueryHandle_t handle)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A28")]
		[Address(RVA = "0x163D834", Offset = "0x163D834", VA = "0x163D834")]
		public static bool GetQueryUGCResult(UGCQueryHandle_t handle, uint index, out SteamUGCDetails_t pDetails)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A29")]
		[Address(RVA = "0x163D878", Offset = "0x163D878", VA = "0x163D878")]
		public static bool GetQueryUGCPreviewURL(UGCQueryHandle_t handle, uint index, out string pchURL, uint cchURLSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A2A")]
		[Address(RVA = "0x163D970", Offset = "0x163D970", VA = "0x163D970")]
		public static bool GetQueryUGCMetadata(UGCQueryHandle_t handle, uint index, out string pchMetadata, uint cchMetadatasize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0x163DA68", Offset = "0x163DA68", VA = "0x163DA68")]
		public static bool GetQueryUGCChildren(UGCQueryHandle_t handle, uint index, PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0x163DAB4", Offset = "0x163DAB4", VA = "0x163DAB4")]
		public static bool GetQueryUGCStatistic(UGCQueryHandle_t handle, uint index, EItemStatistic eStatType, out uint pStatValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A2D")]
		[Address(RVA = "0x163DB00", Offset = "0x163DB00", VA = "0x163DB00")]
		public static uint GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, uint index)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A2E")]
		[Address(RVA = "0x163DB34", Offset = "0x163DB34", VA = "0x163DB34")]
		public static bool GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, uint index, uint previewIndex, out string pchURLOrVideoID, uint cchURLSize, out bool pbIsImage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0x163DC44", Offset = "0x163DC44", VA = "0x163DC44")]
		public static uint GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, uint index)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A30")]
		[Address(RVA = "0x163DC78", Offset = "0x163DC78", VA = "0x163DC78")]
		public static bool GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, uint index, uint keyValueTagIndex, out string pchKey, uint cchKeySize, out string pchValue, uint cchValueSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A31")]
		[Address(RVA = "0x163DDF0", Offset = "0x163DDF0", VA = "0x163DDF0")]
		public static bool ReleaseQueryUGCRequest(UGCQueryHandle_t handle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A32")]
		[Address(RVA = "0x163DE1C", Offset = "0x163DE1C", VA = "0x163DE1C")]
		public static bool AddRequiredTag(UGCQueryHandle_t handle, string pTagName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0x163DF90", Offset = "0x163DF90", VA = "0x163DF90")]
		public static bool AddExcludedTag(UGCQueryHandle_t handle, string pTagName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A34")]
		[Address(RVA = "0x163E104", Offset = "0x163E104", VA = "0x163E104")]
		public static bool SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A35")]
		[Address(RVA = "0x163E138", Offset = "0x163E138", VA = "0x163E138")]
		public static bool SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A36")]
		[Address(RVA = "0x163E16C", Offset = "0x163E16C", VA = "0x163E16C")]
		public static bool SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A37")]
		[Address(RVA = "0x163E1A0", Offset = "0x163E1A0", VA = "0x163E1A0")]
		public static bool SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A38")]
		[Address(RVA = "0x163E1D4", Offset = "0x163E1D4", VA = "0x163E1D4")]
		public static bool SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A39")]
		[Address(RVA = "0x163E208", Offset = "0x163E208", VA = "0x163E208")]
		public static bool SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A3A")]
		[Address(RVA = "0x163E23C", Offset = "0x163E23C", VA = "0x163E23C")]
		public static bool SetLanguage(UGCQueryHandle_t handle, string pchLanguage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A3B")]
		[Address(RVA = "0x163E3B0", Offset = "0x163E3B0", VA = "0x163E3B0")]
		public static bool SetAllowCachedResponse(UGCQueryHandle_t handle, uint unMaxAgeSeconds)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A3C")]
		[Address(RVA = "0x163E3E4", Offset = "0x163E3E4", VA = "0x163E3E4")]
		public static bool SetCloudFileNameFilter(UGCQueryHandle_t handle, string pMatchCloudFileName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A3D")]
		[Address(RVA = "0x163E558", Offset = "0x163E558", VA = "0x163E558")]
		public static bool SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A3E")]
		[Address(RVA = "0x163E58C", Offset = "0x163E58C", VA = "0x163E58C")]
		public static bool SetSearchText(UGCQueryHandle_t handle, string pSearchText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0x163E700", Offset = "0x163E700", VA = "0x163E700")]
		public static bool SetRankedByTrendDays(UGCQueryHandle_t handle, uint unDays)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A40")]
		[Address(RVA = "0x163E734", Offset = "0x163E734", VA = "0x163E734")]
		public static bool AddRequiredKeyValueTag(UGCQueryHandle_t handle, string pKey, string pValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A41")]
		[Address(RVA = "0x163E984", Offset = "0x163E984", VA = "0x163E984")]
		public static SteamAPICall_t RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint unMaxAgeSeconds)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A42")]
		[Address(RVA = "0x163EA10", Offset = "0x163EA10", VA = "0x163EA10")]
		public static SteamAPICall_t CreateItem(AppId_t nConsumerAppId, EWorkshopFileType eFileType)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A43")]
		[Address(RVA = "0x163EA9C", Offset = "0x163EA9C", VA = "0x163EA9C")]
		public static UGCUpdateHandle_t StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(UGCUpdateHandle_t);
		}

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0x163EB2C", Offset = "0x163EB2C", VA = "0x163EB2C")]
		public static bool SetItemTitle(UGCUpdateHandle_t handle, string pchTitle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A45")]
		[Address(RVA = "0x163ECA0", Offset = "0x163ECA0", VA = "0x163ECA0")]
		public static bool SetItemDescription(UGCUpdateHandle_t handle, string pchDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A46")]
		[Address(RVA = "0x163EE14", Offset = "0x163EE14", VA = "0x163EE14")]
		public static bool SetItemUpdateLanguage(UGCUpdateHandle_t handle, string pchLanguage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A47")]
		[Address(RVA = "0x163EF88", Offset = "0x163EF88", VA = "0x163EF88")]
		public static bool SetItemMetadata(UGCUpdateHandle_t handle, string pchMetaData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0x163F0FC", Offset = "0x163F0FC", VA = "0x163F0FC")]
		public static bool SetItemVisibility(UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A49")]
		[Address(RVA = "0x163F130", Offset = "0x163F130", VA = "0x163F130")]
		public static bool SetItemTags(UGCUpdateHandle_t updateHandle, IList<string> pTags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0x163F1B4", Offset = "0x163F1B4", VA = "0x163F1B4")]
		public static bool SetItemContent(UGCUpdateHandle_t handle, string pszContentFolder)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0x163F328", Offset = "0x163F328", VA = "0x163F328")]
		public static bool SetItemPreview(UGCUpdateHandle_t handle, string pszPreviewFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0x163F49C", Offset = "0x163F49C", VA = "0x163F49C")]
		public static bool RemoveItemKeyValueTags(UGCUpdateHandle_t handle, string pchKey)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0x163F610", Offset = "0x163F610", VA = "0x163F610")]
		public static bool AddItemKeyValueTag(UGCUpdateHandle_t handle, string pchKey, string pchValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0x163F860", Offset = "0x163F860", VA = "0x163F860")]
		public static SteamAPICall_t SubmitItemUpdate(UGCUpdateHandle_t handle, string pchChangeNote)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A4F")]
		[Address(RVA = "0x163FA00", Offset = "0x163FA00", VA = "0x163FA00")]
		public static EItemUpdateStatus GetItemUpdateProgress(UGCUpdateHandle_t handle, out ulong punBytesProcessed, out ulong punBytesTotal)
		{
			return default(EItemUpdateStatus);
		}

		[Token(Token = "0x6000A50")]
		[Address(RVA = "0x163FA44", Offset = "0x163FA44", VA = "0x163FA44")]
		public static SteamAPICall_t SetUserItemVote(PublishedFileId_t nPublishedFileID, bool bVoteUp)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0x163FAD0", Offset = "0x163FAD0", VA = "0x163FAD0")]
		public static SteamAPICall_t GetUserItemVote(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0x163FB4C", Offset = "0x163FB4C", VA = "0x163FB4C")]
		public static SteamAPICall_t AddItemToFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0x163FBD8", Offset = "0x163FBD8", VA = "0x163FBD8")]
		public static SteamAPICall_t RemoveItemFromFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0x163FC64", Offset = "0x163FC64", VA = "0x163FC64")]
		public static SteamAPICall_t SubscribeItem(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0x163FCE0", Offset = "0x163FCE0", VA = "0x163FCE0")]
		public static SteamAPICall_t UnsubscribeItem(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0x163FD5C", Offset = "0x163FD5C", VA = "0x163FD5C")]
		public static uint GetNumSubscribedItems()
		{
			return default(uint);
		}

		[Token(Token = "0x6000A57")]
		[Address(RVA = "0x163FD78", Offset = "0x163FD78", VA = "0x163FD78")]
		public static uint GetSubscribedItems(PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A58")]
		[Address(RVA = "0x163FDAC", Offset = "0x163FDAC", VA = "0x163FDAC")]
		public static uint GetItemState(PublishedFileId_t nPublishedFileID)
		{
			return default(uint);
		}

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0x163FDD8", Offset = "0x163FDD8", VA = "0x163FDD8")]
		public static bool GetItemInstallInfo(PublishedFileId_t nPublishedFileID, out ulong punSizeOnDisk, out string pchFolder, uint cchFolderSize, out uint punTimeStamp)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0x163FEE0", Offset = "0x163FEE0", VA = "0x163FEE0")]
		public static bool GetItemDownloadInfo(PublishedFileId_t nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0x163FF24", Offset = "0x163FF24", VA = "0x163FF24")]
		public static bool DownloadItem(PublishedFileId_t nPublishedFileID, bool bHighPriority)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001F7")]
	public static class SteamGameServerUtils
	{
		[Token(Token = "0x6000A5C")]
		[Address(RVA = "0x163FF58", Offset = "0x163FF58", VA = "0x163FF58")]
		public static uint GetSecondsSinceAppActive()
		{
			return default(uint);
		}

		[Token(Token = "0x6000A5D")]
		[Address(RVA = "0x163FF74", Offset = "0x163FF74", VA = "0x163FF74")]
		public static uint GetSecondsSinceComputerActive()
		{
			return default(uint);
		}

		[Token(Token = "0x6000A5E")]
		[Address(RVA = "0x163FF90", Offset = "0x163FF90", VA = "0x163FF90")]
		public static EUniverse GetConnectedUniverse()
		{
			return default(EUniverse);
		}

		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0x163FFAC", Offset = "0x163FFAC", VA = "0x163FFAC")]
		public static uint GetServerRealTime()
		{
			return default(uint);
		}

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0x163FFC8", Offset = "0x163FFC8", VA = "0x163FFC8")]
		public static string GetIPCountry()
		{
			return null;
		}

		[Token(Token = "0x6000A61")]
		[Address(RVA = "0x163FFEC", Offset = "0x163FFEC", VA = "0x163FFEC")]
		public static bool GetImageSize(int iImage, out uint pnWidth, out uint pnHeight)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A62")]
		[Address(RVA = "0x1640030", Offset = "0x1640030", VA = "0x1640030")]
		public static bool GetImageRGBA(int iImage, byte[] pubDest, int nDestBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A63")]
		[Address(RVA = "0x1640074", Offset = "0x1640074", VA = "0x1640074")]
		public static bool GetCSERIPPort(out uint unIP, out ushort usPort)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A64")]
		[Address(RVA = "0x16400A8", Offset = "0x16400A8", VA = "0x16400A8")]
		public static byte GetCurrentBatteryPower()
		{
			return default(byte);
		}

		[Token(Token = "0x6000A65")]
		[Address(RVA = "0x16400C4", Offset = "0x16400C4", VA = "0x16400C4")]
		public static AppId_t GetAppID()
		{
			return default(AppId_t);
		}

		[Token(Token = "0x6000A66")]
		[Address(RVA = "0x1640144", Offset = "0x1640144", VA = "0x1640144")]
		public static void SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition)
		{
		}

		[Token(Token = "0x6000A67")]
		[Address(RVA = "0x1640170", Offset = "0x1640170", VA = "0x1640170")]
		public static bool IsAPICallCompleted(SteamAPICall_t hSteamAPICall, out bool pbFailed)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A68")]
		[Address(RVA = "0x16401A4", Offset = "0x16401A4", VA = "0x16401A4")]
		public static ESteamAPICallFailure GetAPICallFailureReason(SteamAPICall_t hSteamAPICall)
		{
			return default(ESteamAPICallFailure);
		}

		[Token(Token = "0x6000A69")]
		[Address(RVA = "0x16401D0", Offset = "0x16401D0", VA = "0x16401D0")]
		public static bool GetAPICallResult(SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, out bool pbFailed)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0x164022C", Offset = "0x164022C", VA = "0x164022C")]
		public static void RunFrame()
		{
		}

		[Token(Token = "0x6000A6B")]
		[Address(RVA = "0x1640248", Offset = "0x1640248", VA = "0x1640248")]
		public static uint GetIPCCallCount()
		{
			return default(uint);
		}

		[Token(Token = "0x6000A6C")]
		[Address(RVA = "0x1640264", Offset = "0x1640264", VA = "0x1640264")]
		public static void SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction)
		{
		}

		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0x1640290", Offset = "0x1640290", VA = "0x1640290")]
		public static bool IsOverlayEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0x16402AC", Offset = "0x16402AC", VA = "0x16402AC")]
		public static bool BOverlayNeedsPresent()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A6F")]
		[Address(RVA = "0x16402C8", Offset = "0x16402C8", VA = "0x16402C8")]
		public static SteamAPICall_t CheckFileSignature(string szFileName)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A70")]
		[Address(RVA = "0x1640460", Offset = "0x1640460", VA = "0x1640460")]
		public static bool ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A71")]
		[Address(RVA = "0x16406C8", Offset = "0x16406C8", VA = "0x16406C8")]
		public static uint GetEnteredGamepadTextLength()
		{
			return default(uint);
		}

		[Token(Token = "0x6000A72")]
		[Address(RVA = "0x16406E4", Offset = "0x16406E4", VA = "0x16406E4")]
		public static bool GetEnteredGamepadTextInput(out string pchText, uint cchText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A73")]
		[Address(RVA = "0x16407C0", Offset = "0x16407C0", VA = "0x16407C0")]
		public static string GetSteamUILanguage()
		{
			return null;
		}

		[Token(Token = "0x6000A74")]
		[Address(RVA = "0x16407E4", Offset = "0x16407E4", VA = "0x16407E4")]
		public static bool IsSteamRunningInVR()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A75")]
		[Address(RVA = "0x1640800", Offset = "0x1640800", VA = "0x1640800")]
		public static void SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset)
		{
		}
	}
	[Token(Token = "0x20001F8")]
	public static class SteamHTMLSurface
	{
		[Token(Token = "0x6000A76")]
		[Address(RVA = "0x1640834", Offset = "0x1640834", VA = "0x1640834")]
		public static bool Init()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A77")]
		[Address(RVA = "0x1640850", Offset = "0x1640850", VA = "0x1640850")]
		public static bool Shutdown()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A78")]
		[Address(RVA = "0x164086C", Offset = "0x164086C", VA = "0x164086C")]
		public static SteamAPICall_t CreateBrowser(string pchUserAgent, string pchUserCSS)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000A79")]
		[Address(RVA = "0x1640AD4", Offset = "0x1640AD4", VA = "0x1640AD4")]
		public static void RemoveBrowser(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x6000A7A")]
		[Address(RVA = "0x1640B00", Offset = "0x1640B00", VA = "0x1640B00")]
		public static void LoadURL(HHTMLBrowser unBrowserHandle, string pchURL, string pchPostData)
		{
		}

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0x1640D34", Offset = "0x1640D34", VA = "0x1640D34")]
		public static void SetSize(HHTMLBrowser unBrowserHandle, uint unWidth, uint unHeight)
		{
		}

		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0x1640D78", Offset = "0x1640D78", VA = "0x1640D78")]
		public static void StopLoad(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x6000A7D")]
		[Address(RVA = "0x1640DA4", Offset = "0x1640DA4", VA = "0x1640DA4")]
		public static void Reload(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0x1640DD0", Offset = "0x1640DD0", VA = "0x1640DD0")]
		public static void GoBack(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0x1640DFC", Offset = "0x1640DFC", VA = "0x1640DFC")]
		public static void GoForward(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x6000A80")]
		[Address(RVA = "0x1640E28", Offset = "0x1640E28", VA = "0x1640E28")]
		public static void AddHeader(HHTMLBrowser unBrowserHandle, string pchKey, string pchValue)
		{
		}

		[Token(Token = "0x6000A81")]
		[Address(RVA = "0x164105C", Offset = "0x164105C", VA = "0x164105C")]
		public static void ExecuteJavascript(HHTMLBrowser unBrowserHandle, string pchScript)
		{
		}

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0x16411BC", Offset = "0x16411BC", VA = "0x16411BC")]
		public static void MouseUp(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
		{
		}

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0x16411F0", Offset = "0x16411F0", VA = "0x16411F0")]
		public static void MouseDown(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
		{
		}

		[Token(Token = "0x6000A84")]
		[Address(RVA = "0x1641224", Offset = "0x1641224", VA = "0x1641224")]
		public static void MouseDoubleClick(HHTMLBrowser unBrowserHandle, EHTMLMouseButton eMouseButton)
		{
		}

		[Token(Token = "0x6000A85")]
		[Address(RVA = "0x1641258", Offset = "0x1641258", VA = "0x1641258")]
		public static void MouseMove(HHTMLBrowser unBrowserHandle, int x, int y)
		{
		}

		[Token(Token = "0x6000A86")]
		[Address(RVA = "0x164129C", Offset = "0x164129C", VA = "0x164129C")]
		public static void MouseWheel(HHTMLBrowser unBrowserHandle, int nDelta)
		{
		}

		[Token(Token = "0x6000A87")]
		[Address(RVA = "0x16412D0", Offset = "0x16412D0", VA = "0x16412D0")]
		public static void KeyDown(HHTMLBrowser unBrowserHandle, uint nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers)
		{
		}

		[Token(Token = "0x6000A88")]
		[Address(RVA = "0x1641314", Offset = "0x1641314", VA = "0x1641314")]
		public static void KeyUp(HHTMLBrowser unBrowserHandle, uint nNativeKeyCode, EHTMLKeyModifiers eHTMLKeyModifiers)
		{
		}

		[Token(Token = "0x6000A89")]
		[Address(RVA = "0x1641358", Offset = "0x1641358", VA = "0x1641358")]
		public static void KeyChar(HHTMLBrowser unBrowserHandle, uint cUnicodeChar, EHTMLKeyModifiers eHTMLKeyModifiers)
		{
		}

		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0x164139C", Offset = "0x164139C", VA = "0x164139C")]
		public static void SetHorizontalScroll(HHTMLBrowser unBrowserHandle, uint nAbsolutePixelScroll)
		{
		}

		[Token(Token = "0x6000A8B")]
		[Address(RVA = "0x16413D0", Offset = "0x16413D0", VA = "0x16413D0")]
		public static void SetVerticalScroll(HHTMLBrowser unBrowserHandle, uint nAbsolutePixelScroll)
		{
		}

		[Token(Token = "0x6000A8C")]
		[Address(RVA = "0x1641404", Offset = "0x1641404", VA = "0x1641404")]
		public static void SetKeyFocus(HHTMLBrowser unBrowserHandle, bool bHasKeyFocus)
		{
		}

		[Token(Token = "0x6000A8D")]
		[Address(RVA = "0x1641438", Offset = "0x1641438", VA = "0x1641438")]
		public static void ViewSource(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x6000A8E")]
		[Address(RVA = "0x1641464", Offset = "0x1641464", VA = "0x1641464")]
		public static void CopyToClipboard(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x6000A8F")]
		[Address(RVA = "0x1641490", Offset = "0x1641490", VA = "0x1641490")]
		public static void PasteFromClipboard(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x6000A90")]
		[Address(RVA = "0x16414BC", Offset = "0x16414BC", VA = "0x16414BC")]
		public static void Find(HHTMLBrowser unBrowserHandle, string pchSearchStr, bool bCurrentlyInFind, bool bReverse)
		{
		}

		[Token(Token = "0x6000A91")]
		[Address(RVA = "0x1641634", Offset = "0x1641634", VA = "0x1641634")]
		public static void StopFind(HHTMLBrowser unBrowserHandle)
		{
		}

		[Token(Token = "0x6000A92")]
		[Address(RVA = "0x1641660", Offset = "0x1641660", VA = "0x1641660")]
		public static void GetLinkAtPosition(HHTMLBrowser unBrowserHandle, int x, int y)
		{
		}

		[Token(Token = "0x6000A93")]
		[Address(RVA = "0x16416A4", Offset = "0x16416A4", VA = "0x16416A4")]
		public static void SetCookie(string pchHostname, string pchKey, string pchValue, string pchPath = "/", uint nExpires = 0u, bool bSecure = false, bool bHTTPOnly = false)
		{
		}

		[Token(Token = "0x6000A94")]
		[Address(RVA = "0x1641A88", Offset = "0x1641A88", VA = "0x1641A88")]
		public static void SetPageScaleFactor(HHTMLBrowser unBrowserHandle, float flZoom, int nPointX, int nPointY)
		{
		}

		[Token(Token = "0x6000A95")]
		[Address(RVA = "0x1641ADC", Offset = "0x1641ADC", VA = "0x1641ADC")]
		public static void SetBackgroundMode(HHTMLBrowser unBrowserHandle, bool bBackgroundMode)
		{
		}

		[Token(Token = "0x6000A96")]
		[Address(RVA = "0x1641B10", Offset = "0x1641B10", VA = "0x1641B10")]
		public static void AllowStartRequest(HHTMLBrowser unBrowserHandle, bool bAllowed)
		{
		}

		[Token(Token = "0x6000A97")]
		[Address(RVA = "0x1641B44", Offset = "0x1641B44", VA = "0x1641B44")]
		public static void JSDialogResponse(HHTMLBrowser unBrowserHandle, bool bResult)
		{
		}

		[Token(Token = "0x6000A98")]
		[Address(RVA = "0x1641B78", Offset = "0x1641B78", VA = "0x1641B78")]
		public static void FileLoadDialogResponse(HHTMLBrowser unBrowserHandle, IntPtr pchSelectedFiles)
		{
		}
	}
	[Token(Token = "0x20001F9")]
	public static class SteamHTTP
	{
		[Token(Token = "0x6000A99")]
		[Address(RVA = "0x1641BAC", Offset = "0x1641BAC", VA = "0x1641BAC")]
		public static HTTPRequestHandle CreateHTTPRequest(EHTTPMethod eHTTPRequestMethod, string pchAbsoluteURL)
		{
			return default(HTTPRequestHandle);
		}

		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0x1641D60", Offset = "0x1641D60", VA = "0x1641D60")]
		public static bool SetHTTPRequestContextValue(HTTPRequestHandle hRequest, ulong ulContextValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0x1641D94", Offset = "0x1641D94", VA = "0x1641D94")]
		public static bool SetHTTPRequestNetworkActivityTimeout(HTTPRequestHandle hRequest, uint unTimeoutSeconds)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0x1641DC8", Offset = "0x1641DC8", VA = "0x1641DC8")]
		public static bool SetHTTPRequestHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, string pchHeaderValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0x1642018", Offset = "0x1642018", VA = "0x1642018")]
		public static bool SetHTTPRequestGetOrPostParameter(HTTPRequestHandle hRequest, string pchParamName, string pchParamValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0x1642268", Offset = "0x1642268", VA = "0x1642268")]
		public static bool SendHTTPRequest(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0x164229C", Offset = "0x164229C", VA = "0x164229C")]
		public static bool SendHTTPRequestAndStreamResponse(HTTPRequestHandle hRequest, out SteamAPICall_t pCallHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0x16422D0", Offset = "0x16422D0", VA = "0x16422D0")]
		public static bool DeferHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0x16422FC", Offset = "0x16422FC", VA = "0x16422FC")]
		public static bool PrioritizeHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0x1642328", Offset = "0x1642328", VA = "0x1642328")]
		public static bool GetHTTPResponseHeaderSize(HTTPRequestHandle hRequest, string pchHeaderName, out uint unResponseHeaderSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA3")]
		[Address(RVA = "0x16424A4", Offset = "0x16424A4", VA = "0x16424A4")]
		public static bool GetHTTPResponseHeaderValue(HTTPRequestHandle hRequest, string pchHeaderName, byte[] pHeaderValueBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA4")]
		[Address(RVA = "0x1642628", Offset = "0x1642628", VA = "0x1642628")]
		public static bool GetHTTPResponseBodySize(HTTPRequestHandle hRequest, out uint unBodySize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA5")]
		[Address(RVA = "0x164265C", Offset = "0x164265C", VA = "0x164265C")]
		public static bool GetHTTPResponseBodyData(HTTPRequestHandle hRequest, byte[] pBodyDataBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA6")]
		[Address(RVA = "0x16426A0", Offset = "0x16426A0", VA = "0x16426A0")]
		public static bool GetHTTPStreamingResponseBodyData(HTTPRequestHandle hRequest, uint cOffset, byte[] pBodyDataBuffer, uint unBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0x16426EC", Offset = "0x16426EC", VA = "0x16426EC")]
		public static bool ReleaseHTTPRequest(HTTPRequestHandle hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0x1642718", Offset = "0x1642718", VA = "0x1642718")]
		public static bool GetHTTPDownloadProgressPct(HTTPRequestHandle hRequest, out float pflPercentOut)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0x164274C", Offset = "0x164274C", VA = "0x164274C")]
		public static bool SetHTTPRequestRawPostBody(HTTPRequestHandle hRequest, string pchContentType, byte[] pubBody, uint unBodyLen)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AAA")]
		[Address(RVA = "0x16428D0", Offset = "0x16428D0", VA = "0x16428D0")]
		public static HTTPCookieContainerHandle CreateCookieContainer(bool bAllowResponsesToModify)
		{
			return default(HTTPCookieContainerHandle);
		}

		[Token(Token = "0x6000AAB")]
		[Address(RVA = "0x1642958", Offset = "0x1642958", VA = "0x1642958")]
		public static bool ReleaseCookieContainer(HTTPCookieContainerHandle hCookieContainer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AAC")]
		[Address(RVA = "0x1642984", Offset = "0x1642984", VA = "0x1642984")]
		public static bool SetCookie(HTTPCookieContainerHandle hCookieContainer, string pchHost, string pchUrl, string pchCookie)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AAD")]
		[Address(RVA = "0x1642CB4", Offset = "0x1642CB4", VA = "0x1642CB4")]
		public static bool SetHTTPRequestCookieContainer(HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AAE")]
		[Address(RVA = "0x1642CE8", Offset = "0x1642CE8", VA = "0x1642CE8")]
		public static bool SetHTTPRequestUserAgentInfo(HTTPRequestHandle hRequest, string pchUserAgentInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AAF")]
		[Address(RVA = "0x1642E5C", Offset = "0x1642E5C", VA = "0x1642E5C")]
		public static bool SetHTTPRequestRequiresVerifiedCertificate(HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB0")]
		[Address(RVA = "0x1642E90", Offset = "0x1642E90", VA = "0x1642E90")]
		public static bool SetHTTPRequestAbsoluteTimeoutMS(HTTPRequestHandle hRequest, uint unMilliseconds)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0x1642EC4", Offset = "0x1642EC4", VA = "0x1642EC4")]
		public static bool GetHTTPRequestWasTimedOut(HTTPRequestHandle hRequest, out bool pbWasTimedOut)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001FA")]
	public static class SteamInventory
	{
		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0x1642EF8", Offset = "0x1642EF8", VA = "0x1642EF8")]
		public static EResult GetResultStatus(SteamInventoryResult_t resultHandle)
		{
			return default(EResult);
		}

		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0x1642F24", Offset = "0x1642F24", VA = "0x1642F24")]
		public static bool GetResultItems(SteamInventoryResult_t resultHandle, SteamItemDetails_t[] pOutItemsArray, ref uint punOutItemsArraySize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB4")]
		[Address(RVA = "0x1642F68", Offset = "0x1642F68", VA = "0x1642F68")]
		public static uint GetResultTimestamp(SteamInventoryResult_t resultHandle)
		{
			return default(uint);
		}

		[Token(Token = "0x6000AB5")]
		[Address(RVA = "0x1642F94", Offset = "0x1642F94", VA = "0x1642F94")]
		public static bool CheckResultSteamID(SteamInventoryResult_t resultHandle, CSteamID steamIDExpected)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0x1642FC8", Offset = "0x1642FC8", VA = "0x1642FC8")]
		public static void DestroyResult(SteamInventoryResult_t resultHandle)
		{
		}

		[Token(Token = "0x6000AB7")]
		[Address(RVA = "0x1642FF4", Offset = "0x1642FF4", VA = "0x1642FF4")]
		public static bool GetAllItems(out SteamInventoryResult_t pResultHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0x1643020", Offset = "0x1643020", VA = "0x1643020")]
		public static bool GetItemsByID(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t[] pInstanceIDs, uint unCountInstanceIDs)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0x1643064", Offset = "0x1643064", VA = "0x1643064")]
		public static bool SerializeResult(SteamInventoryResult_t resultHandle, byte[] pOutBuffer, out uint punOutBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0x16430A8", Offset = "0x16430A8", VA = "0x16430A8")]
		public static bool DeserializeResult(out SteamInventoryResult_t pOutResultHandle, byte[] pBuffer, uint unBufferSize, bool bRESERVED_MUST_BE_FALSE = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0x16430F4", Offset = "0x16430F4", VA = "0x16430F4")]
		public static bool GenerateItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayItemDefs, uint[] punArrayQuantity, uint unArrayLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0x1643140", Offset = "0x1643140", VA = "0x1643140")]
		public static bool GrantPromoItems(out SteamInventoryResult_t pResultHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABD")]
		[Address(RVA = "0x164316C", Offset = "0x164316C", VA = "0x164316C")]
		public static bool AddPromoItem(out SteamInventoryResult_t pResultHandle, SteamItemDef_t itemDef)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABE")]
		[Address(RVA = "0x16431A0", Offset = "0x16431A0", VA = "0x16431A0")]
		public static bool AddPromoItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayItemDefs, uint unArrayLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABF")]
		[Address(RVA = "0x16431E4", Offset = "0x16431E4", VA = "0x16431E4")]
		public static bool ConsumeItem(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemConsume, uint unQuantity)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC0")]
		[Address(RVA = "0x1643228", Offset = "0x1643228", VA = "0x1643228")]
		public static bool ExchangeItems(out SteamInventoryResult_t pResultHandle, SteamItemDef_t[] pArrayGenerate, uint[] punArrayGenerateQuantity, uint unArrayGenerateLength, SteamItemInstanceID_t[] pArrayDestroy, uint[] punArrayDestroyQuantity, uint unArrayDestroyLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC1")]
		[Address(RVA = "0x164329C", Offset = "0x164329C", VA = "0x164329C")]
		public static bool TransferItemQuantity(out SteamInventoryResult_t pResultHandle, SteamItemInstanceID_t itemIdSource, uint unQuantity, SteamItemInstanceID_t itemIdDest)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC2")]
		[Address(RVA = "0x16432E8", Offset = "0x16432E8", VA = "0x16432E8")]
		public static void SendItemDropHeartbeat()
		{
		}

		[Token(Token = "0x6000AC3")]
		[Address(RVA = "0x1643304", Offset = "0x1643304", VA = "0x1643304")]
		public static bool TriggerItemDrop(out SteamInventoryResult_t pResultHandle, SteamItemDef_t dropListDefinition)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC4")]
		[Address(RVA = "0x1643338", Offset = "0x1643338", VA = "0x1643338")]
		public static bool TradeItems(out SteamInventoryResult_t pResultHandle, CSteamID steamIDTradePartner, SteamItemInstanceID_t[] pArrayGive, uint[] pArrayGiveQuantity, uint nArrayGiveLength, SteamItemInstanceID_t[] pArrayGet, uint[] pArrayGetQuantity, uint nArrayGetLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC5")]
		[Address(RVA = "0x16433B4", Offset = "0x16433B4", VA = "0x16433B4")]
		public static bool LoadItemDefinitions()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC6")]
		[Address(RVA = "0x16433D0", Offset = "0x16433D0", VA = "0x16433D0")]
		public static bool GetItemDefinitionIDs(SteamItemDef_t[] pItemDefIDs, out uint punItemDefIDsArraySize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC7")]
		[Address(RVA = "0x1643404", Offset = "0x1643404", VA = "0x1643404")]
		public static bool GetItemDefinitionProperty(SteamItemDef_t iDefinition, string pchPropertyName, out string pchValueBuffer, ref uint punValueBufferSize)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001FB")]
	public static class SteamMatchmaking
	{
		[Token(Token = "0x6000AC8")]
		[Address(RVA = "0x1643C30", Offset = "0x1643C30", VA = "0x1643C30")]
		public static int GetFavoriteGameCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000AC9")]
		[Address(RVA = "0x1643C4C", Offset = "0x1643C4C", VA = "0x1643C4C")]
		public static bool GetFavoriteGame(int iGame, out AppId_t pnAppID, out uint pnIP, out ushort pnConnPort, out ushort pnQueryPort, out uint punFlags, out uint pRTime32LastPlayedOnServer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ACA")]
		[Address(RVA = "0x1643CC0", Offset = "0x1643CC0", VA = "0x1643CC0")]
		public static int AddFavoriteGame(AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags, uint rTime32LastPlayedOnServer)
		{
			return default(int);
		}

		[Token(Token = "0x6000ACB")]
		[Address(RVA = "0x1643D24", Offset = "0x1643D24", VA = "0x1643D24")]
		public static bool RemoveFavoriteGame(AppId_t nAppID, uint nIP, ushort nConnPort, ushort nQueryPort, uint unFlags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ACC")]
		[Address(RVA = "0x1643D80", Offset = "0x1643D80", VA = "0x1643D80")]
		public static SteamAPICall_t RequestLobbyList()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000ACD")]
		[Address(RVA = "0x1643DF4", Offset = "0x1643DF4", VA = "0x1643DF4")]
		public static void AddRequestLobbyListStringFilter(string pchKeyToMatch, string pchValueToMatch, ELobbyComparison eComparisonType)
		{
		}

		[Token(Token = "0x6000ACE")]
		[Address(RVA = "0x1644028", Offset = "0x1644028", VA = "0x1644028")]
		public static void AddRequestLobbyListNumericalFilter(string pchKeyToMatch, int nValueToMatch, ELobbyComparison eComparisonType)
		{
		}

		[Token(Token = "0x6000ACF")]
		[Address(RVA = "0x1644198", Offset = "0x1644198", VA = "0x1644198")]
		public static void AddRequestLobbyListNearValueFilter(string pchKeyToMatch, int nValueToBeCloseTo)
		{
		}

		[Token(Token = "0x6000AD0")]
		[Address(RVA = "0x16442F8", Offset = "0x16442F8", VA = "0x16442F8")]
		public static void AddRequestLobbyListFilterSlotsAvailable(int nSlotsAvailable)
		{
		}

		[Token(Token = "0x6000AD1")]
		[Address(RVA = "0x1644324", Offset = "0x1644324", VA = "0x1644324")]
		public static void AddRequestLobbyListDistanceFilter(ELobbyDistanceFilter eLobbyDistanceFilter)
		{
		}

		[Token(Token = "0x6000AD2")]
		[Address(RVA = "0x1644350", Offset = "0x1644350", VA = "0x1644350")]
		public static void AddRequestLobbyListResultCountFilter(int cMaxResults)
		{
		}

		[Token(Token = "0x6000AD3")]
		[Address(RVA = "0x164437C", Offset = "0x164437C", VA = "0x164437C")]
		public static void AddRequestLobbyListCompatibleMembersFilter(CSteamID steamIDLobby)
		{
		}

		[Token(Token = "0x6000AD4")]
		[Address(RVA = "0x16443A8", Offset = "0x16443A8", VA = "0x16443A8")]
		public static CSteamID GetLobbyByIndex(int iLobby)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000AD5")]
		[Address(RVA = "0x1644428", Offset = "0x1644428", VA = "0x1644428")]
		public static SteamAPICall_t CreateLobby(ELobbyType eLobbyType, int cMaxMembers)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000AD6")]
		[Address(RVA = "0x16444B4", Offset = "0x16444B4", VA = "0x16444B4")]
		public static SteamAPICall_t JoinLobby(CSteamID steamIDLobby)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000AD7")]
		[Address(RVA = "0x1644530", Offset = "0x1644530", VA = "0x1644530")]
		public static void LeaveLobby(CSteamID steamIDLobby)
		{
		}

		[Token(Token = "0x6000AD8")]
		[Address(RVA = "0x164455C", Offset = "0x164455C", VA = "0x164455C")]
		public static bool InviteUserToLobby(CSteamID steamIDLobby, CSteamID steamIDInvitee)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AD9")]
		[Address(RVA = "0x1644590", Offset = "0x1644590", VA = "0x1644590")]
		public static int GetNumLobbyMembers(CSteamID steamIDLobby)
		{
			return default(int);
		}

		[Token(Token = "0x6000ADA")]
		[Address(RVA = "0x16445BC", Offset = "0x16445BC", VA = "0x16445BC")]
		public static CSteamID GetLobbyMemberByIndex(CSteamID steamIDLobby, int iMember)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000ADB")]
		[Address(RVA = "0x164464C", Offset = "0x164464C", VA = "0x164464C")]
		public static string GetLobbyData(CSteamID steamIDLobby, string pchKey)
		{
			return null;
		}

		[Token(Token = "0x6000ADC")]
		[Address(RVA = "0x16447CC", Offset = "0x16447CC", VA = "0x16447CC")]
		public static bool SetLobbyData(CSteamID steamIDLobby, string pchKey, string pchValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ADD")]
		[Address(RVA = "0x1644A1C", Offset = "0x1644A1C", VA = "0x1644A1C")]
		public static int GetLobbyDataCount(CSteamID steamIDLobby)
		{
			return default(int);
		}

		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0x1644A48", Offset = "0x1644A48", VA = "0x1644A48")]
		public static bool GetLobbyDataByIndex(CSteamID steamIDLobby, int iLobbyData, out string pchKey, int cchKeyBufferSize, out string pchValue, int cchValueBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0x1644BB8", Offset = "0x1644BB8", VA = "0x1644BB8")]
		public static bool DeleteLobbyData(CSteamID steamIDLobby, string pchKey)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE0")]
		[Address(RVA = "0x1644D2C", Offset = "0x1644D2C", VA = "0x1644D2C")]
		public static string GetLobbyMemberData(CSteamID steamIDLobby, CSteamID steamIDUser, string pchKey)
		{
			return null;
		}

		[Token(Token = "0x6000AE1")]
		[Address(RVA = "0x1644EB4", Offset = "0x1644EB4", VA = "0x1644EB4")]
		public static void SetLobbyMemberData(CSteamID steamIDLobby, string pchKey, string pchValue)
		{
		}

		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0x16450E8", Offset = "0x16450E8", VA = "0x16450E8")]
		public static bool SendLobbyChatMsg(CSteamID steamIDLobby, byte[] pvMsgBody, int cubMsgBody)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0x164512C", Offset = "0x164512C", VA = "0x164512C")]
		public static int GetLobbyChatEntry(CSteamID steamIDLobby, int iChatID, out CSteamID pSteamIDUser, byte[] pvData, int cubData, out EChatEntryType peChatEntryType)
		{
			return default(int);
		}

		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0x1645190", Offset = "0x1645190", VA = "0x1645190")]
		public static bool RequestLobbyData(CSteamID steamIDLobby)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0x16451BC", Offset = "0x16451BC", VA = "0x16451BC")]
		public static void SetLobbyGameServer(CSteamID steamIDLobby, uint unGameServerIP, ushort unGameServerPort, CSteamID steamIDGameServer)
		{
		}

		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0x1645208", Offset = "0x1645208", VA = "0x1645208")]
		public static bool GetLobbyGameServer(CSteamID steamIDLobby, out uint punGameServerIP, out ushort punGameServerPort, out CSteamID psteamIDGameServer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0x1645254", Offset = "0x1645254", VA = "0x1645254")]
		public static bool SetLobbyMemberLimit(CSteamID steamIDLobby, int cMaxMembers)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AE8")]
		[Address(RVA = "0x1645288", Offset = "0x1645288", VA = "0x1645288")]
		public static int GetLobbyMemberLimit(CSteamID steamIDLobby)
		{
			return default(int);
		}

		[Token(Token = "0x6000AE9")]
		[Address(RVA = "0x16452B4", Offset = "0x16452B4", VA = "0x16452B4")]
		public static bool SetLobbyType(CSteamID steamIDLobby, ELobbyType eLobbyType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AEA")]
		[Address(RVA = "0x16452E8", Offset = "0x16452E8", VA = "0x16452E8")]
		public static bool SetLobbyJoinable(CSteamID steamIDLobby, bool bLobbyJoinable)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0x164531C", Offset = "0x164531C", VA = "0x164531C")]
		public static CSteamID GetLobbyOwner(CSteamID steamIDLobby)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000AEC")]
		[Address(RVA = "0x164539C", Offset = "0x164539C", VA = "0x164539C")]
		public static bool SetLobbyOwner(CSteamID steamIDLobby, CSteamID steamIDNewOwner)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AED")]
		[Address(RVA = "0x16453D0", Offset = "0x16453D0", VA = "0x16453D0")]
		public static bool SetLinkedLobby(CSteamID steamIDLobby, CSteamID steamIDLobbyDependent)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001FC")]
	public static class SteamMatchmakingServers
	{
		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0x1645404", Offset = "0x1645404", VA = "0x1645404")]
		public static HServerListRequest RequestInternetServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0x16454F0", Offset = "0x16454F0", VA = "0x16454F0")]
		public static HServerListRequest RequestLANServerList(AppId_t iApp, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000AF0")]
		[Address(RVA = "0x164558C", Offset = "0x164558C", VA = "0x164558C")]
		public static HServerListRequest RequestFriendsServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000AF1")]
		[Address(RVA = "0x1645678", Offset = "0x1645678", VA = "0x1645678")]
		public static HServerListRequest RequestFavoritesServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0x1645764", Offset = "0x1645764", VA = "0x1645764")]
		public static HServerListRequest RequestHistoryServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0x1645850", Offset = "0x1645850", VA = "0x1645850")]
		public static HServerListRequest RequestSpectatorServerList(AppId_t iApp, MatchMakingKeyValuePair_t[] ppchFilters, uint nFilters, ISteamMatchmakingServerListResponse pRequestServersResponse)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000AF4")]
		[Address(RVA = "0x164593C", Offset = "0x164593C", VA = "0x164593C")]
		public static void ReleaseRequest(HServerListRequest hServerListRequest)
		{
		}

		[Token(Token = "0x6000AF5")]
		[Address(RVA = "0x1645968", Offset = "0x1645968", VA = "0x1645968")]
		public static gameserveritem_t GetServerDetails(HServerListRequest hRequest, int iServer)
		{
			return null;
		}

		[Token(Token = "0x6000AF6")]
		[Address(RVA = "0x1645AA0", Offset = "0x1645AA0", VA = "0x1645AA0")]
		public static void CancelQuery(HServerListRequest hRequest)
		{
		}

		[Token(Token = "0x6000AF7")]
		[Address(RVA = "0x1645ACC", Offset = "0x1645ACC", VA = "0x1645ACC")]
		public static void RefreshQuery(HServerListRequest hRequest)
		{
		}

		[Token(Token = "0x6000AF8")]
		[Address(RVA = "0x1645AF8", Offset = "0x1645AF8", VA = "0x1645AF8")]
		public static bool IsRefreshing(HServerListRequest hRequest)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AF9")]
		[Address(RVA = "0x1645B24", Offset = "0x1645B24", VA = "0x1645B24")]
		public static int GetServerCount(HServerListRequest hRequest)
		{
			return default(int);
		}

		[Token(Token = "0x6000AFA")]
		[Address(RVA = "0x1645B50", Offset = "0x1645B50", VA = "0x1645B50")]
		public static void RefreshServer(HServerListRequest hRequest, int iServer)
		{
		}

		[Token(Token = "0x6000AFB")]
		[Address(RVA = "0x1645B84", Offset = "0x1645B84", VA = "0x1645B84")]
		public static HServerQuery PingServer(uint unIP, ushort usPort, ISteamMatchmakingPingResponse pRequestServersResponse)
		{
			return default(HServerQuery);
		}

		[Token(Token = "0x6000AFC")]
		[Address(RVA = "0x1645C30", Offset = "0x1645C30", VA = "0x1645C30")]
		public static HServerQuery PlayerDetails(uint unIP, ushort usPort, ISteamMatchmakingPlayersResponse pRequestServersResponse)
		{
			return default(HServerQuery);
		}

		[Token(Token = "0x6000AFD")]
		[Address(RVA = "0x1645CDC", Offset = "0x1645CDC", VA = "0x1645CDC")]
		public static HServerQuery ServerRules(uint unIP, ushort usPort, ISteamMatchmakingRulesResponse pRequestServersResponse)
		{
			return default(HServerQuery);
		}

		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0x1645D88", Offset = "0x1645D88", VA = "0x1645D88")]
		public static void CancelServerQuery(HServerQuery hServerQuery)
		{
		}
	}
	[Token(Token = "0x20001FD")]
	public static class SteamMusic
	{
		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0x1645DB4", Offset = "0x1645DB4", VA = "0x1645DB4")]
		public static bool BIsEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B00")]
		[Address(RVA = "0x1645DD0", Offset = "0x1645DD0", VA = "0x1645DD0")]
		public static bool BIsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B01")]
		[Address(RVA = "0x1645DEC", Offset = "0x1645DEC", VA = "0x1645DEC")]
		public static AudioPlayback_Status GetPlaybackStatus()
		{
			return default(AudioPlayback_Status);
		}

		[Token(Token = "0x6000B02")]
		[Address(RVA = "0x1645E08", Offset = "0x1645E08", VA = "0x1645E08")]
		public static void Play()
		{
		}

		[Token(Token = "0x6000B03")]
		[Address(RVA = "0x1645E24", Offset = "0x1645E24", VA = "0x1645E24")]
		public static void Pause()
		{
		}

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0x1645E40", Offset = "0x1645E40", VA = "0x1645E40")]
		public static void PlayPrevious()
		{
		}

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0x1645E5C", Offset = "0x1645E5C", VA = "0x1645E5C")]
		public static void PlayNext()
		{
		}

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0x1645E78", Offset = "0x1645E78", VA = "0x1645E78")]
		public static void SetVolume(float flVolume)
		{
		}

		[Token(Token = "0x6000B07")]
		[Address(RVA = "0x1645EA4", Offset = "0x1645EA4", VA = "0x1645EA4")]
		public static float GetVolume()
		{
			return default(float);
		}
	}
	[Token(Token = "0x20001FE")]
	public static class SteamMusicRemote
	{
		[Token(Token = "0x6000B08")]
		[Address(RVA = "0x1645EC0", Offset = "0x1645EC0", VA = "0x1645EC0")]
		public static bool RegisterSteamMusicRemote(string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0x164602C", Offset = "0x164602C", VA = "0x164602C")]
		public static bool DeregisterSteamMusicRemote()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0x1646048", Offset = "0x1646048", VA = "0x1646048")]
		public static bool BIsCurrentMusicRemote()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0x1646064", Offset = "0x1646064", VA = "0x1646064")]
		public static bool BActivationSuccess(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B0C")]
		[Address(RVA = "0x1646090", Offset = "0x1646090", VA = "0x1646090")]
		public static bool SetDisplayName(string pchDisplayName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0x16461FC", Offset = "0x16461FC", VA = "0x16461FC")]
		public static bool SetPNGIcon_64x64(byte[] pvBuffer, uint cbBufferLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0x1646230", Offset = "0x1646230", VA = "0x1646230")]
		public static bool EnablePlayPrevious(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B0F")]
		[Address(RVA = "0x164625C", Offset = "0x164625C", VA = "0x164625C")]
		public static bool EnablePlayNext(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0x1646288", Offset = "0x1646288", VA = "0x1646288")]
		public static bool EnableShuffled(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B11")]
		[Address(RVA = "0x16462B4", Offset = "0x16462B4", VA = "0x16462B4")]
		public static bool EnableLooped(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B12")]
		[Address(RVA = "0x16462E0", Offset = "0x16462E0", VA = "0x16462E0")]
		public static bool EnableQueue(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B13")]
		[Address(RVA = "0x164630C", Offset = "0x164630C", VA = "0x164630C")]
		public static bool EnablePlaylists(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B14")]
		[Address(RVA = "0x1646338", Offset = "0x1646338", VA = "0x1646338")]
		public static bool UpdatePlaybackStatus(AudioPlayback_Status nStatus)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B15")]
		[Address(RVA = "0x1646364", Offset = "0x1646364", VA = "0x1646364")]
		public static bool UpdateShuffled(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B16")]
		[Address(RVA = "0x1646390", Offset = "0x1646390", VA = "0x1646390")]
		public static bool UpdateLooped(bool bValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B17")]
		[Address(RVA = "0x16463BC", Offset = "0x16463BC", VA = "0x16463BC")]
		public static bool UpdateVolume(float flValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B18")]
		[Address(RVA = "0x16463E8", Offset = "0x16463E8", VA = "0x16463E8")]
		public static bool CurrentEntryWillChange()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B19")]
		[Address(RVA = "0x1646404", Offset = "0x1646404", VA = "0x1646404")]
		public static bool CurrentEntryIsAvailable(bool bAvailable)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B1A")]
		[Address(RVA = "0x1646430", Offset = "0x1646430", VA = "0x1646430")]
		public static bool UpdateCurrentEntryText(string pchText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B1B")]
		[Address(RVA = "0x164659C", Offset = "0x164659C", VA = "0x164659C")]
		public static bool UpdateCurrentEntryElapsedSeconds(int nValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B1C")]
		[Address(RVA = "0x16465C8", Offset = "0x16465C8", VA = "0x16465C8")]
		public static bool UpdateCurrentEntryCoverArt(byte[] pvBuffer, uint cbBufferLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B1D")]
		[Address(RVA = "0x16465FC", Offset = "0x16465FC", VA = "0x16465FC")]
		public static bool CurrentEntryDidChange()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B1E")]
		[Address(RVA = "0x1646618", Offset = "0x1646618", VA = "0x1646618")]
		public static bool QueueWillChange()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B1F")]
		[Address(RVA = "0x1646634", Offset = "0x1646634", VA = "0x1646634")]
		public static bool ResetQueueEntries()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B20")]
		[Address(RVA = "0x1646650", Offset = "0x1646650", VA = "0x1646650")]
		public static bool SetQueueEntry(int nID, int nPosition, string pchEntryText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B21")]
		[Address(RVA = "0x16467CC", Offset = "0x16467CC", VA = "0x16467CC")]
		public static bool SetCurrentQueueEntry(int nID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B22")]
		[Address(RVA = "0x16467F8", Offset = "0x16467F8", VA = "0x16467F8")]
		public static bool QueueDidChange()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B23")]
		[Address(RVA = "0x1646814", Offset = "0x1646814", VA = "0x1646814")]
		public static bool PlaylistWillChange()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B24")]
		[Address(RVA = "0x1646830", Offset = "0x1646830", VA = "0x1646830")]
		public static bool ResetPlaylistEntries()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B25")]
		[Address(RVA = "0x164684C", Offset = "0x164684C", VA = "0x164684C")]
		public static bool SetPlaylistEntry(int nID, int nPosition, string pchEntryText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B26")]
		[Address(RVA = "0x16469C8", Offset = "0x16469C8", VA = "0x16469C8")]
		public static bool SetCurrentPlaylistEntry(int nID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B27")]
		[Address(RVA = "0x16469F4", Offset = "0x16469F4", VA = "0x16469F4")]
		public static bool PlaylistDidChange()
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20001FF")]
	public static class SteamNetworking
	{
		[Token(Token = "0x6000B28")]
		[Address(RVA = "0x1646A10", Offset = "0x1646A10", VA = "0x1646A10")]
		public static bool SendP2PPacket(CSteamID steamIDRemote, byte[] pubData, uint cubData, EP2PSend eP2PSendType, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B29")]
		[Address(RVA = "0x1646A6C", Offset = "0x1646A6C", VA = "0x1646A6C")]
		public static bool IsP2PPacketAvailable(out uint pcubMsgSize, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0x1646AA0", Offset = "0x1646AA0", VA = "0x1646AA0")]
		public static bool ReadP2PPacket(byte[] pubDest, uint cubDest, out uint pcubMsgSize, out CSteamID psteamIDRemote, int nChannel = 0)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0x1646AFC", Offset = "0x1646AFC", VA = "0x1646AFC")]
		public static bool AcceptP2PSessionWithUser(CSteamID steamIDRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0x1646B28", Offset = "0x1646B28", VA = "0x1646B28")]
		public static bool CloseP2PSessionWithUser(CSteamID steamIDRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0x1646B54", Offset = "0x1646B54", VA = "0x1646B54")]
		public static bool CloseP2PChannelWithUser(CSteamID steamIDRemote, int nChannel)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B2E")]
		[Address(RVA = "0x1646B88", Offset = "0x1646B88", VA = "0x1646B88")]
		public static bool GetP2PSessionState(CSteamID steamIDRemote, out P2PSessionState_t pConnectionState)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B2F")]
		[Address(RVA = "0x1646BBC", Offset = "0x1646BBC", VA = "0x1646BBC")]
		public static bool AllowP2PPacketRelay(bool bAllow)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B30")]
		[Address(RVA = "0x1646BE8", Offset = "0x1646BE8", VA = "0x1646BE8")]
		public static SNetListenSocket_t CreateListenSocket(int nVirtualP2PPort, uint nIP, ushort nPort, bool bAllowUseOfPacketRelay)
		{
			return default(SNetListenSocket_t);
		}

		[Token(Token = "0x6000B31")]
		[Address(RVA = "0x1646C44", Offset = "0x1646C44", VA = "0x1646C44")]
		public static SNetSocket_t CreateP2PConnectionSocket(CSteamID steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x6000B32")]
		[Address(RVA = "0x1646CA0", Offset = "0x1646CA0", VA = "0x1646CA0")]
		public static SNetSocket_t CreateConnectionSocket(uint nIP, ushort nPort, int nTimeoutSec)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x6000B33")]
		[Address(RVA = "0x1646CF4", Offset = "0x1646CF4", VA = "0x1646CF4")]
		public static bool DestroySocket(SNetSocket_t hSocket, bool bNotifyRemoteEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B34")]
		[Address(RVA = "0x1646D28", Offset = "0x1646D28", VA = "0x1646D28")]
		public static bool DestroyListenSocket(SNetListenSocket_t hSocket, bool bNotifyRemoteEnd)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0x1646D5C", Offset = "0x1646D5C", VA = "0x1646D5C")]
		public static bool SendDataOnSocket(SNetSocket_t hSocket, IntPtr pubData, uint cubData, bool bReliable)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B36")]
		[Address(RVA = "0x1646DA8", Offset = "0x1646DA8", VA = "0x1646DA8")]
		public static bool IsDataAvailableOnSocket(SNetSocket_t hSocket, out uint pcubMsgSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B37")]
		[Address(RVA = "0x1646DDC", Offset = "0x1646DDC", VA = "0x1646DDC")]
		public static bool RetrieveDataFromSocket(SNetSocket_t hSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B38")]
		[Address(RVA = "0x1646E28", Offset = "0x1646E28", VA = "0x1646E28")]
		public static bool IsDataAvailable(SNetListenSocket_t hListenSocket, out uint pcubMsgSize, out SNetSocket_t phSocket)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B39")]
		[Address(RVA = "0x1646E6C", Offset = "0x1646E6C", VA = "0x1646E6C")]
		public static bool RetrieveData(SNetListenSocket_t hListenSocket, IntPtr pubDest, uint cubDest, out uint pcubMsgSize, out SNetSocket_t phSocket)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0x1646EC8", Offset = "0x1646EC8", VA = "0x1646EC8")]
		public static bool GetSocketInfo(SNetSocket_t hSocket, out CSteamID pSteamIDRemote, out int peSocketStatus, out uint punIPRemote, out ushort punPortRemote)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B3B")]
		[Address(RVA = "0x1646F24", Offset = "0x1646F24", VA = "0x1646F24")]
		public static bool GetListenSocketInfo(SNetListenSocket_t hListenSocket, out uint pnIP, out ushort pnPort)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B3C")]
		[Address(RVA = "0x1646F68", Offset = "0x1646F68", VA = "0x1646F68")]
		public static ESNetSocketConnectionType GetSocketConnectionType(SNetSocket_t hSocket)
		{
			return default(ESNetSocketConnectionType);
		}

		[Token(Token = "0x6000B3D")]
		[Address(RVA = "0x1646F94", Offset = "0x1646F94", VA = "0x1646F94")]
		public static int GetMaxPacketSize(SNetSocket_t hSocket)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000200")]
	public static class SteamRemoteStorage
	{
		[Token(Token = "0x6000B3E")]
		[Address(RVA = "0x1646FC0", Offset = "0x1646FC0", VA = "0x1646FC0")]
		public static bool FileWrite(string pchFile, byte[] pvData, int cubData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0x164713C", Offset = "0x164713C", VA = "0x164713C")]
		public static int FileRead(string pchFile, byte[] pvData, int cubDataToRead)
		{
			return default(int);
		}

		[Token(Token = "0x6000B40")]
		[Address(RVA = "0x16472B8", Offset = "0x16472B8", VA = "0x16472B8")]
		public static bool FileForget(string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0x1647424", Offset = "0x1647424", VA = "0x1647424")]
		public static bool FileDelete(string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B42")]
		[Address(RVA = "0x1647590", Offset = "0x1647590", VA = "0x1647590")]
		public static SteamAPICall_t FileShare(string pchFile)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000B43")]
		[Address(RVA = "0x1647728", Offset = "0x1647728", VA = "0x1647728")]
		public static bool SetSyncPlatforms(string pchFile, ERemoteStoragePlatform eRemoteStoragePlatform)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B44")]
		[Address(RVA = "0x164789C", Offset = "0x164789C", VA = "0x164789C")]
		public static UGCFileWriteStreamHandle_t FileWriteStreamOpen(string pchFile)
		{
			return default(UGCFileWriteStreamHandle_t);
		}

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0x1647A48", Offset = "0x1647A48", VA = "0x1647A48")]
		public static bool FileWriteStreamWriteChunk(UGCFileWriteStreamHandle_t writeHandle, byte[] pvData, int cubData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B46")]
		[Address(RVA = "0x1647A8C", Offset = "0x1647A8C", VA = "0x1647A8C")]
		public static bool FileWriteStreamClose(UGCFileWriteStreamHandle_t writeHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B47")]
		[Address(RVA = "0x1647AB8", Offset = "0x1647AB8", VA = "0x1647AB8")]
		public static bool FileWriteStreamCancel(UGCFileWriteStreamHandle_t writeHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B48")]
		[Address(RVA = "0x1647AE4", Offset = "0x1647AE4", VA = "0x1647AE4")]
		public static bool FileExists(string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B49")]
		[Address(RVA = "0x1647C50", Offset = "0x1647C50", VA = "0x1647C50")]
		public static bool FilePersisted(string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B4A")]
		[Address(RVA = "0x1647DBC", Offset = "0x1647DBC", VA = "0x1647DBC")]
		public static int GetFileSize(string pchFile)
		{
			return default(int);
		}

		[Token(Token = "0x6000B4B")]
		[Address(RVA = "0x1647F28", Offset = "0x1647F28", VA = "0x1647F28")]
		public static long GetFileTimestamp(string pchFile)
		{
			return default(long);
		}

		[Token(Token = "0x6000B4C")]
		[Address(RVA = "0x1648094", Offset = "0x1648094", VA = "0x1648094")]
		public static ERemoteStoragePlatform GetSyncPlatforms(string pchFile)
		{
			return default(ERemoteStoragePlatform);
		}

		[Token(Token = "0x6000B4D")]
		[Address(RVA = "0x1648200", Offset = "0x1648200", VA = "0x1648200")]
		public static int GetFileCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0x164821C", Offset = "0x164821C", VA = "0x164821C")]
		public static string GetFileNameAndSize(int iFile, out int pnFileSizeInBytes)
		{
			return null;
		}

		[Token(Token = "0x6000B4F")]
		[Address(RVA = "0x1648258", Offset = "0x1648258", VA = "0x1648258")]
		public static bool GetQuota(out int pnTotalBytes, out int puAvailableBytes)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B50")]
		[Address(RVA = "0x164828C", Offset = "0x164828C", VA = "0x164828C")]
		public static bool IsCloudEnabledForAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B51")]
		[Address(RVA = "0x16482A8", Offset = "0x16482A8", VA = "0x16482A8")]
		public static bool IsCloudEnabledForApp()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B52")]
		[Address(RVA = "0x16482C4", Offset = "0x16482C4", VA = "0x16482C4")]
		public static void SetCloudEnabledForApp(bool bEnabled)
		{
		}

		[Token(Token = "0x6000B53")]
		[Address(RVA = "0x16482F0", Offset = "0x16482F0", VA = "0x16482F0")]
		public static SteamAPICall_t UGCDownload(UGCHandle_t hContent, uint unPriority)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000B54")]
		[Address(RVA = "0x164837C", Offset = "0x164837C", VA = "0x164837C")]
		public static bool GetUGCDownloadProgress(UGCHandle_t hContent, out int pnBytesDownloaded, out int pnBytesExpected)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B55")]
		[Address(RVA = "0x16483C0", Offset = "0x16483C0", VA = "0x16483C0")]
		public static bool GetUGCDetails(UGCHandle_t hContent, out AppId_t pnAppID, out string ppchName, out int pnFileSizeInBytes, out CSteamID pSteamIDOwner)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B56")]
		[Address(RVA = "0x1648450", Offset = "0x1648450", VA = "0x1648450")]
		public static int UGCRead(UGCHandle_t hContent, byte[] pvData, int cubDataToRead, uint cOffset, EUGCReadAction eAction)
		{
			return default(int);
		}

		[Token(Token = "0x6000B57")]
		[Address(RVA = "0x16484AC", Offset = "0x16484AC", VA = "0x16484AC")]
		public static int GetCachedUGCCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000B58")]
		[Address(RVA = "0x16484C8", Offset = "0x16484C8", VA = "0x16484C8")]
		public static UGCHandle_t GetCachedUGCHandle(int iCachedContent)
		{
			return default(UGCHandle_t);
		}

		[Token(Token = "0x6000B59")]
		[Address(RVA = "0x1648548", Offset = "0x1648548", VA = "0x1648548")]
		public static SteamAPICall_t PublishWorkshopFile(string pchFile, string pchPreviewFile, AppId_t nConsumerAppId, string pchTitle, string pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, IList<string> pTags, EWorkshopFileType eWorkshopFileType)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000B5A")]
		[Address(RVA = "0x16489BC", Offset = "0x16489BC", VA = "0x16489BC")]
		public static PublishedFileUpdateHandle_t CreatePublishedFileUpdateRequest(PublishedFileId_t unPublishedFileId)
		{
			return default(PublishedFileUpdateHandle_t);
		}

		[Token(Token = "0x6000B5B")]
		[Address(RVA = "0x1648A3C", Offset = "0x1648A3C", VA = "0x1648A3C")]
		public static bool UpdatePublishedFileFile(PublishedFileUpdateHandle_t updateHandle, string pchFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B5C")]
		[Address(RVA = "0x1648BB0", Offset = "0x1648BB0", VA = "0x1648BB0")]
		public static bool UpdatePublishedFilePreviewFile(PublishedFileUpdateHandle_t updateHandle, string pchPreviewFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B5D")]
		[Address(RVA = "0x1648D24", Offset = "0x1648D24", VA = "0x1648D24")]
		public static bool UpdatePublishedFileTitle(PublishedFileUpdateHandle_t updateHandle, string pchTitle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0x1648E98", Offset = "0x1648E98", VA = "0x1648E98")]
		public static bool UpdatePublishedFileDescription(PublishedFileUpdateHandle_t updateHandle, string pchDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0x164900C", Offset = "0x164900C", VA = "0x164900C")]
		public static bool UpdatePublishedFileVisibility(PublishedFileUpdateHandle_t updateHandle, ERemoteStoragePublishedFileVisibility eVisibility)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B60")]
		[Address(RVA = "0x1649040", Offset = "0x1649040", VA = "0x1649040")]
		public static bool UpdatePublishedFileTags(PublishedFileUpdateHandle_t updateHandle, IList<string> pTags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B61")]
		[Address(RVA = "0x16490C4", Offset = "0x16490C4", VA = "0x16490C4")]
		public static SteamAPICall_t CommitPublishedFileUpdate(PublishedFileUpdateHandle_t updateHandle)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000B62")]
		[Address(RVA = "0x1649140", Offset = "0x1649140", VA = "0x1649140")]
		public static SteamAPICall_t GetPublishedFileDetails(PublishedFileId_t unPublishedFileId, uint unMaxSecondsOld)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000B63")]
		[Address(RVA = "0x16491CC", Offset = "0x16491CC", VA = "0x16491CC")]
		public static SteamAPICall_t DeletePublishedFile(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000B64")]
		[Address(RVA = "0x1649248", Offset = "0x1649248", VA = "0x1649248")]
		public static SteamAPICall_t EnumerateUserPublishedFiles(uint unStartIndex)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0x16492C4", Offset = "0x16492C4", VA = "0x16492C4")]
		public static SteamAPICall_t SubscribePublishedFile(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000B66")]
		[Address(RVA = "0x1649340", Offset = "0x1649340", VA = "0x1649340")]
		public static SteamAPICall_t EnumerateUserSubscribedFiles(uint unStartIndex)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000B67")]
		[Address(RVA = "0x16493BC", Offset = "0x16493BC", VA = "0x16493BC")]
		public static SteamAPICall_t UnsubscribePublishedFile(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000B68")]
		[Address(RVA = "0x1649438", Offset = "0x1649438", VA = "0x1649438")]
		public static bool UpdatePublishedFileSetChangeDescription(PublishedFileUpdateHandle_t updateHandle, string pchChangeDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B69")]
		[Address(RVA = "0x16495AC", Offset = "0x16495AC", VA = "0x16495AC")]
		public static SteamAPICall_t GetPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000B6A")]
		[Address(RVA = "0x1649628", Offset = "0x1649628", VA = "0x1649628")]
		public static SteamAPICall_t UpdateUserPublishedItemVote(PublishedFileId_t unPublishedFileId, bool bVoteUp)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000B6B")]
		[Address(RVA = "0x16496B4", Offset = "0x16496B4", VA = "0x16496B4")]
		public static SteamAPICall_t GetUserPublishedItemVoteDetails(PublishedFileId_t unPublishedFileId)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000B6C")]
		[Address(RVA = "0x1649730", Offset = "0x1649730", VA = "0x1649730")]
		public static SteamAPICall_t EnumerateUserSharedWorkshopFiles(CSteamID steamId, uint unStartIndex, IList<string> pRequiredTags, IList<string> pExcludedTags)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000B6D")]
		[Address(RVA = "0x1649828", Offset = "0x1649828", VA = "0x1649828")]
		public static SteamAPICall_t PublishVideo(EWorkshopVideoProvider eVideoProvider, string pchVideoAccount, string pchVideoIdentifier, string pchPreviewFile, AppId_t nConsumerAppId, string pchTitle, string pchDescription, ERemoteStoragePublishedFileVisibility eVisibility, IList<string> pTags)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000B6E")]
		[Address(RVA = "0x1649D64", Offset = "0x1649D64", VA = "0x1649D64")]
		public static SteamAPICall_t SetUserPublishedFileAction(PublishedFileId_t unPublishedFileId, EWorkshopFileAction eAction)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000B6F")]
		[Address(RVA = "0x1649DF0", Offset = "0x1649DF0", VA = "0x1649DF0")]
		public static SteamAPICall_t EnumeratePublishedFilesByUserAction(EWorkshopFileAction eAction, uint unStartIndex)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000B70")]
		[Address(RVA = "0x1649E7C", Offset = "0x1649E7C", VA = "0x1649E7C")]
		public static SteamAPICall_t EnumeratePublishedWorkshopFiles(EWorkshopEnumerationType eEnumerationType, uint unStartIndex, uint unCount, uint unDays, IList<string> pTags, IList<string> pUserTags)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0x1649F8C", Offset = "0x1649F8C", VA = "0x1649F8C")]
		public static SteamAPICall_t UGCDownloadToLocation(UGCHandle_t hContent, string pchLocation, uint unPriority)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x2000201")]
	public static class SteamScreenshots
	{
		[Token(Token = "0x6000B72")]
		[Address(RVA = "0x164A134", Offset = "0x164A134", VA = "0x164A134")]
		public static ScreenshotHandle WriteScreenshot(byte[] pubRGB, uint cubRGB, int nWidth, int nHeight)
		{
			return default(ScreenshotHandle);
		}

		[Token(Token = "0x6000B73")]
		[Address(RVA = "0x164A1D8", Offset = "0x164A1D8", VA = "0x164A1D8")]
		public static ScreenshotHandle AddScreenshotToLibrary(string pchFilename, string pchThumbnailFilename, int nWidth, int nHeight)
		{
			return default(ScreenshotHandle);
		}

		[Token(Token = "0x6000B74")]
		[Address(RVA = "0x164A458", Offset = "0x164A458", VA = "0x164A458")]
		public static void TriggerScreenshot()
		{
		}

		[Token(Token = "0x6000B75")]
		[Address(RVA = "0x164A474", Offset = "0x164A474", VA = "0x164A474")]
		public static void HookScreenshots(bool bHook)
		{
		}

		[Token(Token = "0x6000B76")]
		[Address(RVA = "0x164A4A0", Offset = "0x164A4A0", VA = "0x164A4A0")]
		public static bool SetLocation(ScreenshotHandle hScreenshot, string pchLocation)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B77")]
		[Address(RVA = "0x164A614", Offset = "0x164A614", VA = "0x164A614")]
		public static bool TagUser(ScreenshotHandle hScreenshot, CSteamID steamID)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B78")]
		[Address(RVA = "0x164A648", Offset = "0x164A648", VA = "0x164A648")]
		public static bool TagPublishedFile(ScreenshotHandle hScreenshot, PublishedFileId_t unPublishedFileID)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000202")]
	public static class SteamUGC
	{
		[Token(Token = "0x6000B79")]
		[Address(RVA = "0x164A67C", Offset = "0x164A67C", VA = "0x164A67C")]
		public static UGCQueryHandle_t CreateQueryUserUGCRequest(AccountID_t unAccountID, EUserUGCList eListType, EUGCMatchingUGCType eMatchingUGCType, EUserUGCListSortOrder eSortOrder, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0x164A744", Offset = "0x164A744", VA = "0x164A744")]
		public static UGCQueryHandle_t CreateQueryAllUGCRequest(EUGCQuery eQueryType, EUGCMatchingUGCType eMatchingeMatchingUGCTypeFileType, AppId_t nCreatorAppID, AppId_t nConsumerAppID, uint unPage)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0x164A7F4", Offset = "0x164A7F4", VA = "0x164A7F4")]
		public static UGCQueryHandle_t CreateQueryUGCDetailsRequest(PublishedFileId_t[] pvecPublishedFileID, uint unNumPublishedFileIDs)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0x164A884", Offset = "0x164A884", VA = "0x164A884")]
		public static SteamAPICall_t SendQueryUGCRequest(UGCQueryHandle_t handle)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0x164A900", Offset = "0x164A900", VA = "0x164A900")]
		public static bool GetQueryUGCResult(UGCQueryHandle_t handle, uint index, out SteamUGCDetails_t pDetails)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0x164A944", Offset = "0x164A944", VA = "0x164A944")]
		public static bool GetQueryUGCPreviewURL(UGCQueryHandle_t handle, uint index, out string pchURL, uint cchURLSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0x164AA3C", Offset = "0x164AA3C", VA = "0x164AA3C")]
		public static bool GetQueryUGCMetadata(UGCQueryHandle_t handle, uint index, out string pchMetadata, uint cchMetadatasize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B80")]
		[Address(RVA = "0x164AB34", Offset = "0x164AB34", VA = "0x164AB34")]
		public static bool GetQueryUGCChildren(UGCQueryHandle_t handle, uint index, PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B81")]
		[Address(RVA = "0x164AB80", Offset = "0x164AB80", VA = "0x164AB80")]
		public static bool GetQueryUGCStatistic(UGCQueryHandle_t handle, uint index, EItemStatistic eStatType, out uint pStatValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0x164ABCC", Offset = "0x164ABCC", VA = "0x164ABCC")]
		public static uint GetQueryUGCNumAdditionalPreviews(UGCQueryHandle_t handle, uint index)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B83")]
		[Address(RVA = "0x164AC00", Offset = "0x164AC00", VA = "0x164AC00")]
		public static bool GetQueryUGCAdditionalPreview(UGCQueryHandle_t handle, uint index, uint previewIndex, out string pchURLOrVideoID, uint cchURLSize, out bool pbIsImage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B84")]
		[Address(RVA = "0x164AD10", Offset = "0x164AD10", VA = "0x164AD10")]
		public static uint GetQueryUGCNumKeyValueTags(UGCQueryHandle_t handle, uint index)
		{
			return default(uint);
		}

		[Token(Token = "0x6000B85")]
		[Address(RVA = "0x164AD44", Offset = "0x164AD44", VA = "0x164AD44")]
		public static bool GetQueryUGCKeyValueTag(UGCQueryHandle_t handle, uint index, uint keyValueTagIndex, out string pchKey, uint cchKeySize, out string pchValue, uint cchValueSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0x164AEBC", Offset = "0x164AEBC", VA = "0x164AEBC")]
		public static bool ReleaseQueryUGCRequest(UGCQueryHandle_t handle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B87")]
		[Address(RVA = "0x164AEE8", Offset = "0x164AEE8", VA = "0x164AEE8")]
		public static bool AddRequiredTag(UGCQueryHandle_t handle, string pTagName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B88")]
		[Address(RVA = "0x164B05C", Offset = "0x164B05C", VA = "0x164B05C")]
		public static bool AddExcludedTag(UGCQueryHandle_t handle, string pTagName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B89")]
		[Address(RVA = "0x164B1D0", Offset = "0x164B1D0", VA = "0x164B1D0")]
		public static bool SetReturnKeyValueTags(UGCQueryHandle_t handle, bool bReturnKeyValueTags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0x164B204", Offset = "0x164B204", VA = "0x164B204")]
		public static bool SetReturnLongDescription(UGCQueryHandle_t handle, bool bReturnLongDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8B")]
		[Address(RVA = "0x164B238", Offset = "0x164B238", VA = "0x164B238")]
		public static bool SetReturnMetadata(UGCQueryHandle_t handle, bool bReturnMetadata)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8C")]
		[Address(RVA = "0x164B26C", Offset = "0x164B26C", VA = "0x164B26C")]
		public static bool SetReturnChildren(UGCQueryHandle_t handle, bool bReturnChildren)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8D")]
		[Address(RVA = "0x164B2A0", Offset = "0x164B2A0", VA = "0x164B2A0")]
		public static bool SetReturnAdditionalPreviews(UGCQueryHandle_t handle, bool bReturnAdditionalPreviews)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8E")]
		[Address(RVA = "0x164B2D4", Offset = "0x164B2D4", VA = "0x164B2D4")]
		public static bool SetReturnTotalOnly(UGCQueryHandle_t handle, bool bReturnTotalOnly)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8F")]
		[Address(RVA = "0x164B308", Offset = "0x164B308", VA = "0x164B308")]
		public static bool SetLanguage(UGCQueryHandle_t handle, string pchLanguage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B90")]
		[Address(RVA = "0x164B47C", Offset = "0x164B47C", VA = "0x164B47C")]
		public static bool SetAllowCachedResponse(UGCQueryHandle_t handle, uint unMaxAgeSeconds)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B91")]
		[Address(RVA = "0x164B4B0", Offset = "0x164B4B0", VA = "0x164B4B0")]
		public static bool SetCloudFileNameFilter(UGCQueryHandle_t handle, string pMatchCloudFileName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B92")]
		[Address(RVA = "0x164B624", Offset = "0x164B624", VA = "0x164B624")]
		public static bool SetMatchAnyTag(UGCQueryHandle_t handle, bool bMatchAnyTag)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B93")]
		[Address(RVA = "0x164B658", Offset = "0x164B658", VA = "0x164B658")]
		public static bool SetSearchText(UGCQueryHandle_t handle, string pSearchText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B94")]
		[Address(RVA = "0x164B7CC", Offset = "0x164B7CC", VA = "0x164B7CC")]
		public static bool SetRankedByTrendDays(UGCQueryHandle_t handle, uint unDays)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0x164B800", Offset = "0x164B800", VA = "0x164B800")]
		public static bool AddRequiredKeyValueTag(UGCQueryHandle_t handle, string pKey, string pValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0x164BA50", Offset = "0x164BA50", VA = "0x164BA50")]
		public static SteamAPICall_t RequestUGCDetails(PublishedFileId_t nPublishedFileID, uint unMaxAgeSeconds)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0x164BADC", Offset = "0x164BADC", VA = "0x164BADC")]
		public static SteamAPICall_t CreateItem(AppId_t nConsumerAppId, EWorkshopFileType eFileType)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000B98")]
		[Address(RVA = "0x164BB68", Offset = "0x164BB68", VA = "0x164BB68")]
		public static UGCUpdateHandle_t StartItemUpdate(AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(UGCUpdateHandle_t);
		}

		[Token(Token = "0x6000B99")]
		[Address(RVA = "0x164BBF8", Offset = "0x164BBF8", VA = "0x164BBF8")]
		public static bool SetItemTitle(UGCUpdateHandle_t handle, string pchTitle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0x164BD6C", Offset = "0x164BD6C", VA = "0x164BD6C")]
		public static bool SetItemDescription(UGCUpdateHandle_t handle, string pchDescription)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B9B")]
		[Address(RVA = "0x164BEE0", Offset = "0x164BEE0", VA = "0x164BEE0")]
		public static bool SetItemUpdateLanguage(UGCUpdateHandle_t handle, string pchLanguage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B9C")]
		[Address(RVA = "0x164C054", Offset = "0x164C054", VA = "0x164C054")]
		public static bool SetItemMetadata(UGCUpdateHandle_t handle, string pchMetaData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B9D")]
		[Address(RVA = "0x164C1C8", Offset = "0x164C1C8", VA = "0x164C1C8")]
		public static bool SetItemVisibility(UGCUpdateHandle_t handle, ERemoteStoragePublishedFileVisibility eVisibility)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B9E")]
		[Address(RVA = "0x164C1FC", Offset = "0x164C1FC", VA = "0x164C1FC")]
		public static bool SetItemTags(UGCUpdateHandle_t updateHandle, IList<string> pTags)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B9F")]
		[Address(RVA = "0x164C280", Offset = "0x164C280", VA = "0x164C280")]
		public static bool SetItemContent(UGCUpdateHandle_t handle, string pszContentFolder)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BA0")]
		[Address(RVA = "0x164C3F4", Offset = "0x164C3F4", VA = "0x164C3F4")]
		public static bool SetItemPreview(UGCUpdateHandle_t handle, string pszPreviewFile)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BA1")]
		[Address(RVA = "0x164C568", Offset = "0x164C568", VA = "0x164C568")]
		public static bool RemoveItemKeyValueTags(UGCUpdateHandle_t handle, string pchKey)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BA2")]
		[Address(RVA = "0x164C6DC", Offset = "0x164C6DC", VA = "0x164C6DC")]
		public static bool AddItemKeyValueTag(UGCUpdateHandle_t handle, string pchKey, string pchValue)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BA3")]
		[Address(RVA = "0x164C92C", Offset = "0x164C92C", VA = "0x164C92C")]
		public static SteamAPICall_t SubmitItemUpdate(UGCUpdateHandle_t handle, string pchChangeNote)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0x164CACC", Offset = "0x164CACC", VA = "0x164CACC")]
		public static EItemUpdateStatus GetItemUpdateProgress(UGCUpdateHandle_t handle, out ulong punBytesProcessed, out ulong punBytesTotal)
		{
			return default(EItemUpdateStatus);
		}

		[Token(Token = "0x6000BA5")]
		[Address(RVA = "0x164CB10", Offset = "0x164CB10", VA = "0x164CB10")]
		public static SteamAPICall_t SetUserItemVote(PublishedFileId_t nPublishedFileID, bool bVoteUp)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0x164CB9C", Offset = "0x164CB9C", VA = "0x164CB9C")]
		public static SteamAPICall_t GetUserItemVote(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0x164CC18", Offset = "0x164CC18", VA = "0x164CC18")]
		public static SteamAPICall_t AddItemToFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0x164CCA4", Offset = "0x164CCA4", VA = "0x164CCA4")]
		public static SteamAPICall_t RemoveItemFromFavorites(AppId_t nAppId, PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000BA9")]
		[Address(RVA = "0x164CD30", Offset = "0x164CD30", VA = "0x164CD30")]
		public static SteamAPICall_t SubscribeItem(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000BAA")]
		[Address(RVA = "0x164CDAC", Offset = "0x164CDAC", VA = "0x164CDAC")]
		public static SteamAPICall_t UnsubscribeItem(PublishedFileId_t nPublishedFileID)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000BAB")]
		[Address(RVA = "0x164CE28", Offset = "0x164CE28", VA = "0x164CE28")]
		public static uint GetNumSubscribedItems()
		{
			return default(uint);
		}

		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0x164CE44", Offset = "0x164CE44", VA = "0x164CE44")]
		public static uint GetSubscribedItems(PublishedFileId_t[] pvecPublishedFileID, uint cMaxEntries)
		{
			return default(uint);
		}

		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0x164CE78", Offset = "0x164CE78", VA = "0x164CE78")]
		public static uint GetItemState(PublishedFileId_t nPublishedFileID)
		{
			return default(uint);
		}

		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0x164CEA4", Offset = "0x164CEA4", VA = "0x164CEA4")]
		public static bool GetItemInstallInfo(PublishedFileId_t nPublishedFileID, out ulong punSizeOnDisk, out string pchFolder, uint cchFolderSize, out uint punTimeStamp)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0x164CFAC", Offset = "0x164CFAC", VA = "0x164CFAC")]
		public static bool GetItemDownloadInfo(PublishedFileId_t nPublishedFileID, out ulong punBytesDownloaded, out ulong punBytesTotal)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0x164CFF0", Offset = "0x164CFF0", VA = "0x164CFF0")]
		public static bool DownloadItem(PublishedFileId_t nPublishedFileID, bool bHighPriority)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000203")]
	public static class SteamUnifiedMessages
	{
		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0x164D024", Offset = "0x164D024", VA = "0x164D024")]
		public static ClientUnifiedMessageHandle SendMethod(string pchServiceMethod, byte[] pRequestBuffer, uint unRequestBufferSize, ulong unContext)
		{
			return default(ClientUnifiedMessageHandle);
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0x164D1E8", Offset = "0x164D1E8", VA = "0x164D1E8")]
		public static bool GetMethodResponseInfo(ClientUnifiedMessageHandle hHandle, out uint punResponseSize, out EResult peResult)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB3")]
		[Address(RVA = "0x164D22C", Offset = "0x164D22C", VA = "0x164D22C")]
		public static bool GetMethodResponseData(ClientUnifiedMessageHandle hHandle, byte[] pResponseBuffer, uint unResponseBufferSize, bool bAutoRelease)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0x164D278", Offset = "0x164D278", VA = "0x164D278")]
		public static bool ReleaseMethod(ClientUnifiedMessageHandle hHandle)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0x164D2A4", Offset = "0x164D2A4", VA = "0x164D2A4")]
		public static bool SendNotification(string pchServiceNotification, byte[] pNotificationBuffer, uint unNotificationBufferSize)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000204")]
	public static class SteamUser
	{
		[Token(Token = "0x6000BB6")]
		[Address(RVA = "0x164D420", Offset = "0x164D420", VA = "0x164D420")]
		public static HSteamUser GetHSteamUser()
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x6000BB7")]
		[Address(RVA = "0x164D44C", Offset = "0x164D44C", VA = "0x164D44C")]
		public static bool BLoggedOn()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0x164D468", Offset = "0x164D468", VA = "0x164D468")]
		public static CSteamID GetSteamID()
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0x164D4E0", Offset = "0x164D4E0", VA = "0x164D4E0")]
		public static int InitiateGameConnection(byte[] pAuthBlob, int cbMaxAuthBlob, CSteamID steamIDGameServer, uint unIPServer, ushort usPortServer, bool bSecure)
		{
			return default(int);
		}

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0x164D544", Offset = "0x164D544", VA = "0x164D544")]
		public static void TerminateGameConnection(uint unIPServer, ushort usPortServer)
		{
		}

		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0x164D578", Offset = "0x164D578", VA = "0x164D578")]
		public static void TrackAppUsageEvent(CGameID gameID, int eAppUsageEvent, string pchExtraInfo = "")
		{
		}

		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0x164D6E8", Offset = "0x164D6E8", VA = "0x164D6E8")]
		public static bool GetUserDataFolder(out string pchBuffer, int cubBuffer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0x164D7C4", Offset = "0x164D7C4", VA = "0x164D7C4")]
		public static void StartVoiceRecording()
		{
		}

		[Token(Token = "0x6000BBE")]
		[Address(RVA = "0x164D7E0", Offset = "0x164D7E0", VA = "0x164D7E0")]
		public static void StopVoiceRecording()
		{
		}

		[Token(Token = "0x6000BBF")]
		[Address(RVA = "0x164D7FC", Offset = "0x164D7FC", VA = "0x164D7FC")]
		public static EVoiceResult GetAvailableVoice(out uint pcbCompressed, out uint pcbUncompressed, uint nUncompressedVoiceDesiredSampleRate)
		{
			return default(EVoiceResult);
		}

		[Token(Token = "0x6000BC0")]
		[Address(RVA = "0x164D840", Offset = "0x164D840", VA = "0x164D840")]
		public static EVoiceResult GetVoice(bool bWantCompressed, byte[] pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, bool bWantUncompressed, byte[] pUncompressedDestBuffer, uint cbUncompressedDestBufferSize, out uint nUncompressBytesWritten, uint nUncompressedVoiceDesiredSampleRate)
		{
			return default(EVoiceResult);
		}

		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0x164D8CC", Offset = "0x164D8CC", VA = "0x164D8CC")]
		public static EVoiceResult DecompressVoice(byte[] pCompressed, uint cbCompressed, byte[] pDestBuffer, uint cbDestBufferSize, out uint nBytesWritten, uint nDesiredSampleRate)
		{
			return default(EVoiceResult);
		}

		[Token(Token = "0x6000BC2")]
		[Address(RVA = "0x164D930", Offset = "0x164D930", VA = "0x164D930")]
		public static uint GetVoiceOptimalSampleRate()
		{
			return default(uint);
		}

		[Token(Token = "0x6000BC3")]
		[Address(RVA = "0x164D94C", Offset = "0x164D94C", VA = "0x164D94C")]
		public static HAuthTicket GetAuthSessionTicket(byte[] pTicket, int cbMaxTicket, out uint pcbTicket)
		{
			return default(HAuthTicket);
		}

		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0x164D9EC", Offset = "0x164D9EC", VA = "0x164D9EC")]
		public static EBeginAuthSessionResult BeginAuthSession(byte[] pAuthTicket, int cbAuthTicket, CSteamID steamID)
		{
			return default(EBeginAuthSessionResult);
		}

		[Token(Token = "0x6000BC5")]
		[Address(RVA = "0x164DA30", Offset = "0x164DA30", VA = "0x164DA30")]
		public static void EndAuthSession(CSteamID steamID)
		{
		}

		[Token(Token = "0x6000BC6")]
		[Address(RVA = "0x164DA5C", Offset = "0x164DA5C", VA = "0x164DA5C")]
		public static void CancelAuthTicket(HAuthTicket hAuthTicket)
		{
		}

		[Token(Token = "0x6000BC7")]
		[Address(RVA = "0x164DA88", Offset = "0x164DA88", VA = "0x164DA88")]
		public static EUserHasLicenseForAppResult UserHasLicenseForApp(CSteamID steamID, AppId_t appID)
		{
			return default(EUserHasLicenseForAppResult);
		}

		[Token(Token = "0x6000BC8")]
		[Address(RVA = "0x164DABC", Offset = "0x164DABC", VA = "0x164DABC")]
		public static bool BIsBehindNAT()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BC9")]
		[Address(RVA = "0x164DAD8", Offset = "0x164DAD8", VA = "0x164DAD8")]
		public static void AdvertiseGame(CSteamID steamIDGameServer, uint unIPServer, ushort usPortServer)
		{
		}

		[Token(Token = "0x6000BCA")]
		[Address(RVA = "0x164DB1C", Offset = "0x164DB1C", VA = "0x164DB1C")]
		public static SteamAPICall_t RequestEncryptedAppTicket(byte[] pDataToInclude, int cbDataToInclude)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000BCB")]
		[Address(RVA = "0x164DBA8", Offset = "0x164DBA8", VA = "0x164DBA8")]
		public static bool GetEncryptedAppTicket(byte[] pTicket, int cbMaxTicket, out uint pcbTicket)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BCC")]
		[Address(RVA = "0x164DBEC", Offset = "0x164DBEC", VA = "0x164DBEC")]
		public static int GetGameBadgeLevel(int nSeries, bool bFoil)
		{
			return default(int);
		}

		[Token(Token = "0x6000BCD")]
		[Address(RVA = "0x164DC20", Offset = "0x164DC20", VA = "0x164DC20")]
		public static int GetPlayerSteamLevel()
		{
			return default(int);
		}

		[Token(Token = "0x6000BCE")]
		[Address(RVA = "0x164DC3C", Offset = "0x164DC3C", VA = "0x164DC3C")]
		public static SteamAPICall_t RequestStoreAuthURL(string pchRedirectURL)
		{
			return default(SteamAPICall_t);
		}
	}
	[Token(Token = "0x2000205")]
	public static class SteamUserStats
	{
		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0x164DDD4", Offset = "0x164DDD4", VA = "0x164DDD4")]
		public static bool RequestCurrentStats()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD0")]
		[Address(RVA = "0x164DDF0", Offset = "0x164DDF0", VA = "0x164DDF0")]
		public static bool GetStat(string pchName, out int pData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD1")]
		[Address(RVA = "0x164DF64", Offset = "0x164DF64", VA = "0x164DF64")]
		public static bool GetStat(string pchName, out float pData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0x164E0D8", Offset = "0x164E0D8", VA = "0x164E0D8")]
		public static bool SetStat(string pchName, int nData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD3")]
		[Address(RVA = "0x164E24C", Offset = "0x164E24C", VA = "0x164E24C")]
		public static bool SetStat(string pchName, float fData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD4")]
		[Address(RVA = "0x164E3C0", Offset = "0x164E3C0", VA = "0x164E3C0")]
		public static bool UpdateAvgRateStat(string pchName, float flCountThisSession, double dSessionLength)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD5")]
		[Address(RVA = "0x164E544", Offset = "0x164E544", VA = "0x164E544")]
		public static bool GetAchievement(string pchName, out bool pbAchieved)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD6")]
		[Address(RVA = "0x164E6B8", Offset = "0x164E6B8", VA = "0x164E6B8")]
		public static bool SetAchievement(string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD7")]
		[Address(RVA = "0x164E824", Offset = "0x164E824", VA = "0x164E824")]
		public static bool ClearAchievement(string pchName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD8")]
		[Address(RVA = "0x164E990", Offset = "0x164E990", VA = "0x164E990")]
		public static bool GetAchievementAndUnlockTime(string pchName, out bool pbAchieved, out uint punUnlockTime)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BD9")]
		[Address(RVA = "0x164EB0C", Offset = "0x164EB0C", VA = "0x164EB0C")]
		public static bool StoreStats()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BDA")]
		[Address(RVA = "0x164EB28", Offset = "0x164EB28", VA = "0x164EB28")]
		public static int GetAchievementIcon(string pchName)
		{
			return default(int);
		}

		[Token(Token = "0x6000BDB")]
		[Address(RVA = "0x164EC94", Offset = "0x164EC94", VA = "0x164EC94")]
		public static string GetAchievementDisplayAttribute(string pchName, string pchKey)
		{
			return null;
		}

		[Token(Token = "0x6000BDC")]
		[Address(RVA = "0x164EEDC", Offset = "0x164EEDC", VA = "0x164EEDC")]
		public static bool IndicateAchievementProgress(string pchName, uint nCurProgress, uint nMaxProgress)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BDD")]
		[Address(RVA = "0x164F058", Offset = "0x164F058", VA = "0x164F058")]
		public static uint GetNumAchievements()
		{
			return default(uint);
		}

		[Token(Token = "0x6000BDE")]
		[Address(RVA = "0x164F074", Offset = "0x164F074", VA = "0x164F074")]
		public static string GetAchievementName(uint iAchievement)
		{
			return null;
		}

		[Token(Token = "0x6000BDF")]
		[Address(RVA = "0x164F0A8", Offset = "0x164F0A8", VA = "0x164F0A8")]
		public static SteamAPICall_t RequestUserStats(CSteamID steamIDUser)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000BE0")]
		[Address(RVA = "0x164F124", Offset = "0x164F124", VA = "0x164F124")]
		public static bool GetUserStat(CSteamID steamIDUser, string pchName, out int pData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BE1")]
		[Address(RVA = "0x164F2A0", Offset = "0x164F2A0", VA = "0x164F2A0")]
		public static bool GetUserStat(CSteamID steamIDUser, string pchName, out float pData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BE2")]
		[Address(RVA = "0x164F41C", Offset = "0x164F41C", VA = "0x164F41C")]
		public static bool GetUserAchievement(CSteamID steamIDUser, string pchName, out bool pbAchieved)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BE3")]
		[Address(RVA = "0x164F598", Offset = "0x164F598", VA = "0x164F598")]
		public static bool GetUserAchievementAndUnlockTime(CSteamID steamIDUser, string pchName, out bool pbAchieved, out uint punUnlockTime)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BE4")]
		[Address(RVA = "0x164F71C", Offset = "0x164F71C", VA = "0x164F71C")]
		public static bool ResetAllStats(bool bAchievementsToo)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0x164F748", Offset = "0x164F748", VA = "0x164F748")]
		public static SteamAPICall_t FindOrCreateLeaderboard(string pchLeaderboardName, ELeaderboardSortMethod eLeaderboardSortMethod, ELeaderboardDisplayType eLeaderboardDisplayType)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000BE6")]
		[Address(RVA = "0x164F8F0", Offset = "0x164F8F0", VA = "0x164F8F0")]
		public static SteamAPICall_t FindLeaderboard(string pchLeaderboardName)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000BE7")]
		[Address(RVA = "0x164FA88", Offset = "0x164FA88", VA = "0x164FA88")]
		public static string GetLeaderboardName(SteamLeaderboard_t hSteamLeaderboard)
		{
			return null;
		}

		[Token(Token = "0x6000BE8")]
		[Address(RVA = "0x164FABC", Offset = "0x164FABC", VA = "0x164FABC")]
		public static int GetLeaderboardEntryCount(SteamLeaderboard_t hSteamLeaderboard)
		{
			return default(int);
		}

		[Token(Token = "0x6000BE9")]
		[Address(RVA = "0x164FAE8", Offset = "0x164FAE8", VA = "0x164FAE8")]
		public static ELeaderboardSortMethod GetLeaderboardSortMethod(SteamLeaderboard_t hSteamLeaderboard)
		{
			return default(ELeaderboardSortMethod);
		}

		[Token(Token = "0x6000BEA")]
		[Address(RVA = "0x164FB14", Offset = "0x164FB14", VA = "0x164FB14")]
		public static ELeaderboardDisplayType GetLeaderboardDisplayType(SteamLeaderboard_t hSteamLeaderboard)
		{
			return default(ELeaderboardDisplayType);
		}

		[Token(Token = "0x6000BEB")]
		[Address(RVA = "0x164FB40", Offset = "0x164FB40", VA = "0x164FB40")]
		public static SteamAPICall_t DownloadLeaderboardEntries(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardDataRequest eLeaderboardDataRequest, int nRangeStart, int nRangeEnd)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000BEC")]
		[Address(RVA = "0x164FBE4", Offset = "0x164FBE4", VA = "0x164FBE4")]
		public static SteamAPICall_t DownloadLeaderboardEntriesForUsers(SteamLeaderboard_t hSteamLeaderboard, CSteamID[] prgUsers, int cUsers)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000BED")]
		[Address(RVA = "0x164FC78", Offset = "0x164FC78", VA = "0x164FC78")]
		public static bool GetDownloadedLeaderboardEntry(SteamLeaderboardEntries_t hSteamLeaderboardEntries, int index, out LeaderboardEntry_t pLeaderboardEntry, int[] pDetails, int cDetailsMax)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BEE")]
		[Address(RVA = "0x164FCD4", Offset = "0x164FCD4", VA = "0x164FCD4")]
		public static SteamAPICall_t UploadLeaderboardScore(SteamLeaderboard_t hSteamLeaderboard, ELeaderboardUploadScoreMethod eLeaderboardUploadScoreMethod, int nScore, int[] pScoreDetails, int cScoreDetailsCount)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000BEF")]
		[Address(RVA = "0x164FD80", Offset = "0x164FD80", VA = "0x164FD80")]
		public static SteamAPICall_t AttachLeaderboardUGC(SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000BF0")]
		[Address(RVA = "0x164FE0C", Offset = "0x164FE0C", VA = "0x164FE0C")]
		public static SteamAPICall_t GetNumberOfCurrentPlayers()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000BF1")]
		[Address(RVA = "0x164FE80", Offset = "0x164FE80", VA = "0x164FE80")]
		public static SteamAPICall_t RequestGlobalAchievementPercentages()
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000BF2")]
		[Address(RVA = "0x164FEF4", Offset = "0x164FEF4", VA = "0x164FEF4")]
		public static int GetMostAchievedAchievementInfo(out string pchName, uint unNameBufLen, out float pflPercent, out bool pbAchieved)
		{
			return default(int);
		}

		[Token(Token = "0x6000BF3")]
		[Address(RVA = "0x164FFF0", Offset = "0x164FFF0", VA = "0x164FFF0")]
		public static int GetNextMostAchievedAchievementInfo(int iIteratorPrevious, out string pchName, uint unNameBufLen, out float pflPercent, out bool pbAchieved)
		{
			return default(int);
		}

		[Token(Token = "0x6000BF4")]
		[Address(RVA = "0x1650100", Offset = "0x1650100", VA = "0x1650100")]
		public static bool GetAchievementAchievedPercent(string pchName, out float pflPercent)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BF5")]
		[Address(RVA = "0x1650274", Offset = "0x1650274", VA = "0x1650274")]
		public static SteamAPICall_t RequestGlobalStats(int nHistoryDays)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0x16502F0", Offset = "0x16502F0", VA = "0x16502F0")]
		public static bool GetGlobalStat(string pchStatName, out long pData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BF7")]
		[Address(RVA = "0x1650464", Offset = "0x1650464", VA = "0x1650464")]
		public static bool GetGlobalStat(string pchStatName, out double pData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BF8")]
		[Address(RVA = "0x16505D8", Offset = "0x16505D8", VA = "0x16505D8")]
		public static int GetGlobalStatHistory(string pchStatName, long[] pData, uint cubData)
		{
			return default(int);
		}

		[Token(Token = "0x6000BF9")]
		[Address(RVA = "0x1650754", Offset = "0x1650754", VA = "0x1650754")]
		public static int GetGlobalStatHistory(string pchStatName, double[] pData, uint cubData)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000206")]
	public static class SteamUtils
	{
		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0x16508D0", Offset = "0x16508D0", VA = "0x16508D0")]
		public static uint GetSecondsSinceAppActive()
		{
			return default(uint);
		}

		[Token(Token = "0x6000BFB")]
		[Address(RVA = "0x16508EC", Offset = "0x16508EC", VA = "0x16508EC")]
		public static uint GetSecondsSinceComputerActive()
		{
			return default(uint);
		}

		[Token(Token = "0x6000BFC")]
		[Address(RVA = "0x1650908", Offset = "0x1650908", VA = "0x1650908")]
		public static EUniverse GetConnectedUniverse()
		{
			return default(EUniverse);
		}

		[Token(Token = "0x6000BFD")]
		[Address(RVA = "0x1650924", Offset = "0x1650924", VA = "0x1650924")]
		public static uint GetServerRealTime()
		{
			return default(uint);
		}

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0x1650940", Offset = "0x1650940", VA = "0x1650940")]
		public static string GetIPCountry()
		{
			return null;
		}

		[Token(Token = "0x6000BFF")]
		[Address(RVA = "0x1650964", Offset = "0x1650964", VA = "0x1650964")]
		public static bool GetImageSize(int iImage, out uint pnWidth, out uint pnHeight)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C00")]
		[Address(RVA = "0x16509A8", Offset = "0x16509A8", VA = "0x16509A8")]
		public static bool GetImageRGBA(int iImage, byte[] pubDest, int nDestBufferSize)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C01")]
		[Address(RVA = "0x16509EC", Offset = "0x16509EC", VA = "0x16509EC")]
		public static bool GetCSERIPPort(out uint unIP, out ushort usPort)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C02")]
		[Address(RVA = "0x1650A20", Offset = "0x1650A20", VA = "0x1650A20")]
		public static byte GetCurrentBatteryPower()
		{
			return default(byte);
		}

		[Token(Token = "0x6000C03")]
		[Address(RVA = "0x1650A3C", Offset = "0x1650A3C", VA = "0x1650A3C")]
		public static AppId_t GetAppID()
		{
			return default(AppId_t);
		}

		[Token(Token = "0x6000C04")]
		[Address(RVA = "0x1650ABC", Offset = "0x1650ABC", VA = "0x1650ABC")]
		public static void SetOverlayNotificationPosition(ENotificationPosition eNotificationPosition)
		{
		}

		[Token(Token = "0x6000C05")]
		[Address(RVA = "0x1650AE8", Offset = "0x1650AE8", VA = "0x1650AE8")]
		public static bool IsAPICallCompleted(SteamAPICall_t hSteamAPICall, out bool pbFailed)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C06")]
		[Address(RVA = "0x1650B1C", Offset = "0x1650B1C", VA = "0x1650B1C")]
		public static ESteamAPICallFailure GetAPICallFailureReason(SteamAPICall_t hSteamAPICall)
		{
			return default(ESteamAPICallFailure);
		}

		[Token(Token = "0x6000C07")]
		[Address(RVA = "0x1650B48", Offset = "0x1650B48", VA = "0x1650B48")]
		public static bool GetAPICallResult(SteamAPICall_t hSteamAPICall, IntPtr pCallback, int cubCallback, int iCallbackExpected, out bool pbFailed)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C08")]
		[Address(RVA = "0x1650BA4", Offset = "0x1650BA4", VA = "0x1650BA4")]
		public static void RunFrame()
		{
		}

		[Token(Token = "0x6000C09")]
		[Address(RVA = "0x1650BC0", Offset = "0x1650BC0", VA = "0x1650BC0")]
		public static uint GetIPCCallCount()
		{
			return default(uint);
		}

		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0x1650BDC", Offset = "0x1650BDC", VA = "0x1650BDC")]
		public static void SetWarningMessageHook(SteamAPIWarningMessageHook_t pFunction)
		{
		}

		[Token(Token = "0x6000C0B")]
		[Address(RVA = "0x1650C08", Offset = "0x1650C08", VA = "0x1650C08")]
		public static bool IsOverlayEnabled()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C0C")]
		[Address(RVA = "0x1650C24", Offset = "0x1650C24", VA = "0x1650C24")]
		public static bool BOverlayNeedsPresent()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C0D")]
		[Address(RVA = "0x1650C40", Offset = "0x1650C40", VA = "0x1650C40")]
		public static SteamAPICall_t CheckFileSignature(string szFileName)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0x1650DD8", Offset = "0x1650DD8", VA = "0x1650DD8")]
		public static bool ShowGamepadTextInput(EGamepadTextInputMode eInputMode, EGamepadTextInputLineMode eLineInputMode, string pchDescription, uint unCharMax, string pchExistingText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C0F")]
		[Address(RVA = "0x1651040", Offset = "0x1651040", VA = "0x1651040")]
		public static uint GetEnteredGamepadTextLength()
		{
			return default(uint);
		}

		[Token(Token = "0x6000C10")]
		[Address(RVA = "0x165105C", Offset = "0x165105C", VA = "0x165105C")]
		public static bool GetEnteredGamepadTextInput(out string pchText, uint cchText)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C11")]
		[Address(RVA = "0x1651138", Offset = "0x1651138", VA = "0x1651138")]
		public static string GetSteamUILanguage()
		{
			return null;
		}

		[Token(Token = "0x6000C12")]
		[Address(RVA = "0x165115C", Offset = "0x165115C", VA = "0x165115C")]
		public static bool IsSteamRunningInVR()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C13")]
		[Address(RVA = "0x1651178", Offset = "0x1651178", VA = "0x1651178")]
		public static void SetOverlayNotificationInset(int nHorizontalInset, int nVerticalInset)
		{
		}
	}
	[Token(Token = "0x2000207")]
	public static class SteamVideo
	{
		[Token(Token = "0x6000C14")]
		[Address(RVA = "0x16511AC", Offset = "0x16511AC", VA = "0x16511AC")]
		public static void GetVideoURL(AppId_t unVideoAppID)
		{
		}

		[Token(Token = "0x6000C15")]
		[Address(RVA = "0x16511D8", Offset = "0x16511D8", VA = "0x16511D8")]
		public static bool IsBroadcasting(out int pnNumViewers)
		{
			return default(bool);
		}
	}
	[StructLayout(0)]
	[Token(Token = "0x2000208")]
	public class gameserveritem_t
	{
		[Token(Token = "0x4000800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public servernetadr_t m_NetAdr;

		[Token(Token = "0x4000801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int m_nPing;

		[Token(Token = "0x4000802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool m_bHadSuccessfulResponse;

		[Token(Token = "0x4000803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool m_bDoNotRefresh;

		[Token(Token = "0x4000804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private byte[] m_szGameDir;

		[Token(Token = "0x4000805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private byte[] m_szMap;

		[Token(Token = "0x4000806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private byte[] m_szGameDescription;

		[Token(Token = "0x4000807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public uint m_nAppID;

		[Token(Token = "0x4000808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int m_nPlayers;

		[Token(Token = "0x4000809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int m_nMaxPlayers;

		[Token(Token = "0x400080A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int m_nBotPlayers;

		[Token(Token = "0x400080B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool m_bPassword;

		[Token(Token = "0x400080C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool m_bSecure;

		[Token(Token = "0x400080D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public uint m_ulTimeLastPlayed;

		[Token(Token = "0x400080E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int m_nServerVersion;

		[Token(Token = "0x400080F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private byte[] m_szServerName;

		[Token(Token = "0x4000810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private byte[] m_szGameTags;

		[Token(Token = "0x4000811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public CSteamID m_steamID;

		[Token(Token = "0x6000C16")]
		[Address(RVA = "0x1A7E894", Offset = "0x1A7E894", VA = "0x1A7E894")]
		public string GetGameDir()
		{
			return null;
		}

		[Token(Token = "0x6000C17")]
		[Address(RVA = "0x1A7E91C", Offset = "0x1A7E91C", VA = "0x1A7E91C")]
		public void SetGameDir(string dir)
		{
		}

		[Token(Token = "0x6000C18")]
		[Address(RVA = "0x1A7E9B4", Offset = "0x1A7E9B4", VA = "0x1A7E9B4")]
		public string GetMap()
		{
			return null;
		}

		[Token(Token = "0x6000C19")]
		[Address(RVA = "0x1A7EA3C", Offset = "0x1A7EA3C", VA = "0x1A7EA3C")]
		public void SetMap(string map)
		{
		}

		[Token(Token = "0x6000C1A")]
		[Address(RVA = "0x1A7EAD4", Offset = "0x1A7EAD4", VA = "0x1A7EAD4")]
		public string GetGameDescription()
		{
			return null;
		}

		[Token(Token = "0x6000C1B")]
		[Address(RVA = "0x1A7EB5C", Offset = "0x1A7EB5C", VA = "0x1A7EB5C")]
		public void SetGameDescription(string desc)
		{
		}

		[Token(Token = "0x6000C1C")]
		[Address(RVA = "0x1A7EBF4", Offset = "0x1A7EBF4", VA = "0x1A7EBF4")]
		public string GetServerName()
		{
			return null;
		}

		[Token(Token = "0x6000C1D")]
		[Address(RVA = "0x1A7ECC4", Offset = "0x1A7ECC4", VA = "0x1A7ECC4")]
		public void SetServerName(string name)
		{
		}

		[Token(Token = "0x6000C1E")]
		[Address(RVA = "0x1A7ED5C", Offset = "0x1A7ED5C", VA = "0x1A7ED5C")]
		public string GetGameTags()
		{
			return null;
		}

		[Token(Token = "0x6000C1F")]
		[Address(RVA = "0x1A7EDE4", Offset = "0x1A7EDE4", VA = "0x1A7EDE4")]
		public void SetGameTags(string tags)
		{
		}

		[Token(Token = "0x6000C20")]
		[Address(RVA = "0x1A7EE7C", Offset = "0x1A7EE7C", VA = "0x1A7EE7C")]
		public gameserveritem_t()
		{
		}
	}
	[Token(Token = "0x2000209")]
	public struct servernetadr_t
	{
		[Token(Token = "0x4000812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private ushort m_usConnectionPort;

		[Token(Token = "0x4000813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		private ushort m_usQueryPort;

		[Token(Token = "0x4000814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private uint m_unIP;

		[Token(Token = "0x6000C21")]
		[Address(RVA = "0x1A7EE84", Offset = "0x1A7EE84", VA = "0x1A7EE84")]
		public void Init(uint ip, ushort usQueryPort, ushort usConnectionPort)
		{
		}

		[Token(Token = "0x6000C22")]
		[Address(RVA = "0x1A7EE94", Offset = "0x1A7EE94", VA = "0x1A7EE94")]
		public ushort GetQueryPort()
		{
			return default(ushort);
		}

		[Token(Token = "0x6000C23")]
		[Address(RVA = "0x1A7EE9C", Offset = "0x1A7EE9C", VA = "0x1A7EE9C")]
		public void SetQueryPort(ushort usPort)
		{
		}

		[Token(Token = "0x6000C24")]
		[Address(RVA = "0x1A7EEA4", Offset = "0x1A7EEA4", VA = "0x1A7EEA4")]
		public ushort GetConnectionPort()
		{
			return default(ushort);
		}

		[Token(Token = "0x6000C25")]
		[Address(RVA = "0x1A7EEAC", Offset = "0x1A7EEAC", VA = "0x1A7EEAC")]
		public void SetConnectionPort(ushort usPort)
		{
		}

		[Token(Token = "0x6000C26")]
		[Address(RVA = "0x1A7EEB4", Offset = "0x1A7EEB4", VA = "0x1A7EEB4")]
		public uint GetIP()
		{
			return default(uint);
		}

		[Token(Token = "0x6000C27")]
		[Address(RVA = "0x1A7EEBC", Offset = "0x1A7EEBC", VA = "0x1A7EEBC")]
		public void SetIP(uint unIP)
		{
		}

		[Token(Token = "0x6000C28")]
		[Address(RVA = "0x1A7ECB4", Offset = "0x1A7ECB4", VA = "0x1A7ECB4")]
		public string GetConnectionAddressString()
		{
			return null;
		}

		[Token(Token = "0x6000C29")]
		[Address(RVA = "0x1A7F114", Offset = "0x1A7F114", VA = "0x1A7F114")]
		public string GetQueryAddressString()
		{
			return null;
		}

		[Token(Token = "0x6000C2A")]
		[Address(RVA = "0x1A7EEC4", Offset = "0x1A7EEC4", VA = "0x1A7EEC4")]
		public static string ToString(uint unIP, ushort usPort)
		{
			return null;
		}

		[Token(Token = "0x6000C2B")]
		[Address(RVA = "0x1A7F124", Offset = "0x1A7F124", VA = "0x1A7F124")]
		public static bool operator <(servernetadr_t x, servernetadr_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C2C")]
		[Address(RVA = "0x1A7F158", Offset = "0x1A7F158", VA = "0x1A7F158")]
		public static bool operator >(servernetadr_t x, servernetadr_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C2D")]
		[Address(RVA = "0x1A7F18C", Offset = "0x1A7F18C", VA = "0x1A7F18C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C2E")]
		[Address(RVA = "0x1A7F264", Offset = "0x1A7F264", VA = "0x1A7F264", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C2F")]
		[Address(RVA = "0x1A7F230", Offset = "0x1A7F230", VA = "0x1A7F230")]
		public static bool operator ==(servernetadr_t x, servernetadr_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C30")]
		[Address(RVA = "0x1A7F2BC", Offset = "0x1A7F2BC", VA = "0x1A7F2BC")]
		public static bool operator !=(servernetadr_t x, servernetadr_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C31")]
		[Address(RVA = "0x1A7F2F0", Offset = "0x1A7F2F0", VA = "0x1A7F2F0")]
		public bool Equals(servernetadr_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C32")]
		[Address(RVA = "0x1A7F324", Offset = "0x1A7F324", VA = "0x1A7F324")]
		public int CompareTo(servernetadr_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200020A")]
	public struct HSteamPipe : IEquatable<HSteamPipe>, IComparable<HSteamPipe>
	{
		[Token(Token = "0x4000815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_HSteamPipe;

		[Token(Token = "0x6000C33")]
		[Address(RVA = "0x28A56B0", Offset = "0x28A56B0", VA = "0x28A56B0")]
		public HSteamPipe(int value)
		{
		}

		[Token(Token = "0x6000C34")]
		[Address(RVA = "0x28A56B8", Offset = "0x28A56B8", VA = "0x28A56B8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C35")]
		[Address(RVA = "0x28A56C0", Offset = "0x28A56C0", VA = "0x28A56C0", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C36")]
		[Address(RVA = "0x28A5750", Offset = "0x28A5750", VA = "0x28A5750", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C37")]
		[Address(RVA = "0x28A5744", Offset = "0x28A5744", VA = "0x28A5744")]
		public static bool operator ==(HSteamPipe x, HSteamPipe y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C38")]
		[Address(RVA = "0x28A5758", Offset = "0x28A5758", VA = "0x28A5758")]
		public static bool operator !=(HSteamPipe x, HSteamPipe y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C39")]
		[Address(RVA = "0x28A5764", Offset = "0x28A5764", VA = "0x28A5764")]
		public static explicit operator HSteamPipe(int value)
		{
			return default(HSteamPipe);
		}

		[Token(Token = "0x6000C3A")]
		[Address(RVA = "0x28A576C", Offset = "0x28A576C", VA = "0x28A576C")]
		public static explicit operator int(HSteamPipe that)
		{
			return default(int);
		}

		[Token(Token = "0x6000C3B")]
		[Address(RVA = "0x28A5770", Offset = "0x28A5770", VA = "0x28A5770", Slot = "4")]
		public bool Equals(HSteamPipe other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C3C")]
		[Address(RVA = "0x28A5780", Offset = "0x28A5780", VA = "0x28A5780", Slot = "5")]
		public int CompareTo(HSteamPipe other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200020B")]
	public struct HSteamUser : IEquatable<HSteamUser>, IComparable<HSteamUser>
	{
		[Token(Token = "0x4000816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_HSteamUser;

		[Token(Token = "0x6000C3D")]
		[Address(RVA = "0x28A5788", Offset = "0x28A5788", VA = "0x28A5788")]
		public HSteamUser(int value)
		{
		}

		[Token(Token = "0x6000C3E")]
		[Address(RVA = "0x28A5790", Offset = "0x28A5790", VA = "0x28A5790", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C3F")]
		[Address(RVA = "0x28A5798", Offset = "0x28A5798", VA = "0x28A5798", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C40")]
		[Address(RVA = "0x28A5828", Offset = "0x28A5828", VA = "0x28A5828", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C41")]
		[Address(RVA = "0x28A581C", Offset = "0x28A581C", VA = "0x28A581C")]
		public static bool operator ==(HSteamUser x, HSteamUser y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C42")]
		[Address(RVA = "0x28A5830", Offset = "0x28A5830", VA = "0x28A5830")]
		public static bool operator !=(HSteamUser x, HSteamUser y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C43")]
		[Address(RVA = "0x28A583C", Offset = "0x28A583C", VA = "0x28A583C")]
		public static explicit operator HSteamUser(int value)
		{
			return default(HSteamUser);
		}

		[Token(Token = "0x6000C44")]
		[Address(RVA = "0x28A5844", Offset = "0x28A5844", VA = "0x28A5844")]
		public static explicit operator int(HSteamUser that)
		{
			return default(int);
		}

		[Token(Token = "0x6000C45")]
		[Address(RVA = "0x28A5848", Offset = "0x28A5848", VA = "0x28A5848", Slot = "4")]
		public bool Equals(HSteamUser other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C46")]
		[Address(RVA = "0x28A5858", Offset = "0x28A5858", VA = "0x28A5858", Slot = "5")]
		public int CompareTo(HSteamUser other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200020C")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xA7D938", Offset = "0xA7D938")]
	public delegate void SteamAPIWarningMessageHook_t(int nSeverity, StringBuilder pchDebugText);
	[Token(Token = "0x200020D")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xA7D94C", Offset = "0xA7D94C")]
	public delegate void SteamAPI_CheckCallbackRegistered_t(int iCallbackNum);
	[Token(Token = "0x200020E")]
	[AttributeAttribute(Name = "UnmanagedFunctionPointerAttribute", RVA = "0xA7D960", Offset = "0xA7D960")]
	public delegate void SteamAPI_PostAPIResultInProcess_t(SteamAPICall_t callHandle, IntPtr pUnknown, uint unCallbackSize, int iCallbackNum);
	[Token(Token = "0x200020F")]
	public struct CGameID : IEquatable<CGameID>, IComparable<CGameID>
	{
		[Token(Token = "0x2000379")]
		public enum EGameIDType
		{
			[Token(Token = "0x4000F44")]
			k_EGameIDTypeApp,
			[Token(Token = "0x4000F45")]
			k_EGameIDTypeGameMod,
			[Token(Token = "0x4000F46")]
			k_EGameIDTypeShortcut,
			[Token(Token = "0x4000F47")]
			k_EGameIDTypeP2P
		}

		[Token(Token = "0x4000817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_GameID;

		[Token(Token = "0x6000C53")]
		[Address(RVA = "0x23210A0", Offset = "0x23210A0", VA = "0x23210A0")]
		public CGameID(ulong GameID)
		{
		}

		[Token(Token = "0x6000C54")]
		[Address(RVA = "0x23210A8", Offset = "0x23210A8", VA = "0x23210A8")]
		public CGameID(AppId_t nAppID)
		{
		}

		[Token(Token = "0x6000C55")]
		[Address(RVA = "0x2321128", Offset = "0x2321128", VA = "0x2321128")]
		public CGameID(AppId_t nAppID, uint nModID)
		{
		}

		[Token(Token = "0x6000C56")]
		[Address(RVA = "0x2321178", Offset = "0x2321178", VA = "0x2321178")]
		public bool IsSteamApp()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C57")]
		[Address(RVA = "0x2321190", Offset = "0x2321190", VA = "0x2321190")]
		public bool IsMod()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C58")]
		[Address(RVA = "0x23211A8", Offset = "0x23211A8", VA = "0x23211A8")]
		public bool IsShortcut()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C59")]
		[Address(RVA = "0x23211C0", Offset = "0x23211C0", VA = "0x23211C0")]
		public bool IsP2PFile()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C5A")]
		[Address(RVA = "0x23211D8", Offset = "0x23211D8", VA = "0x23211D8")]
		public AppId_t AppID()
		{
			return default(AppId_t);
		}

		[Token(Token = "0x6000C5B")]
		[Address(RVA = "0x2321188", Offset = "0x2321188", VA = "0x2321188")]
		public EGameIDType Type()
		{
			return default(EGameIDType);
		}

		[Token(Token = "0x6000C5C")]
		[Address(RVA = "0x23211E4", Offset = "0x23211E4", VA = "0x23211E4")]
		public uint ModID()
		{
			return default(uint);
		}

		[Token(Token = "0x6000C5D")]
		[Address(RVA = "0x23211EC", Offset = "0x23211EC", VA = "0x23211EC")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C5E")]
		[Address(RVA = "0x2321324", Offset = "0x2321324", VA = "0x2321324")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000C5F")]
		[Address(RVA = "0x232132C", Offset = "0x232132C", VA = "0x232132C")]
		public void Set(ulong GameID)
		{
		}

		[Token(Token = "0x6000C60")]
		[Address(RVA = "0x23210B4", Offset = "0x23210B4", VA = "0x23210B4")]
		private void SetAppID(AppId_t other)
		{
		}

		[Token(Token = "0x6000C61")]
		[Address(RVA = "0x2321168", Offset = "0x2321168", VA = "0x2321168")]
		private void SetType(EGameIDType other)
		{
		}

		[Token(Token = "0x6000C62")]
		[Address(RVA = "0x2321170", Offset = "0x2321170", VA = "0x2321170")]
		private void SetModID(uint other)
		{
		}

		[Token(Token = "0x6000C63")]
		[Address(RVA = "0x2321334", Offset = "0x2321334", VA = "0x2321334", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C64")]
		[Address(RVA = "0x232133C", Offset = "0x232133C", VA = "0x232133C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C65")]
		[Address(RVA = "0x23213CC", Offset = "0x23213CC", VA = "0x23213CC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C66")]
		[Address(RVA = "0x23213C0", Offset = "0x23213C0", VA = "0x23213C0")]
		public static bool operator ==(CGameID x, CGameID y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C67")]
		[Address(RVA = "0x23213D4", Offset = "0x23213D4", VA = "0x23213D4")]
		public static bool operator !=(CGameID x, CGameID y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C68")]
		[Address(RVA = "0x23213E0", Offset = "0x23213E0", VA = "0x23213E0")]
		public static explicit operator CGameID(ulong value)
		{
			return default(CGameID);
		}

		[Token(Token = "0x6000C69")]
		[Address(RVA = "0x23213E4", Offset = "0x23213E4", VA = "0x23213E4")]
		public static explicit operator ulong(CGameID that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000C6A")]
		[Address(RVA = "0x23213E8", Offset = "0x23213E8", VA = "0x23213E8", Slot = "4")]
		public bool Equals(CGameID other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0x23213F8", Offset = "0x23213F8", VA = "0x23213F8", Slot = "5")]
		public int CompareTo(CGameID other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000210")]
	public struct CSteamID : IEquatable<CSteamID>, IComparable<CSteamID>
	{
		[Token(Token = "0x4000818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly CSteamID Nil;

		[Token(Token = "0x4000819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly CSteamID OutofDateGS;

		[Token(Token = "0x400081A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly CSteamID LanModeGS;

		[Token(Token = "0x400081B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly CSteamID NotInitYetGS;

		[Token(Token = "0x400081C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly CSteamID NonSteamGS;

		[Token(Token = "0x400081D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamID;

		[Token(Token = "0x6000C6C")]
		[Address(RVA = "0x2321400", Offset = "0x2321400", VA = "0x2321400")]
		public CSteamID(AccountID_t unAccountID, EUniverse eUniverse, EAccountType eAccountType)
		{
		}

		[Token(Token = "0x6000C6D")]
		[Address(RVA = "0x2321464", Offset = "0x2321464", VA = "0x2321464")]
		public CSteamID(AccountID_t unAccountID, uint unAccountInstance, EUniverse eUniverse, EAccountType eAccountType)
		{
		}

		[Token(Token = "0x6000C6E")]
		[Address(RVA = "0x23214A4", Offset = "0x23214A4", VA = "0x23214A4")]
		public CSteamID(ulong ulSteamID)
		{
		}

		[Token(Token = "0x6000C6F")]
		[Address(RVA = "0x232142C", Offset = "0x232142C", VA = "0x232142C")]
		public void Set(AccountID_t unAccountID, EUniverse eUniverse, EAccountType eAccountType)
		{
		}

		[Token(Token = "0x6000C70")]
		[Address(RVA = "0x2321484", Offset = "0x2321484", VA = "0x2321484")]
		public void InstancedSet(AccountID_t unAccountID, uint unInstance, EUniverse eUniverse, EAccountType eAccountType)
		{
		}

		[Token(Token = "0x6000C71")]
		[Address(RVA = "0x23214E4", Offset = "0x23214E4", VA = "0x23214E4")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000C72")]
		[Address(RVA = "0x23214EC", Offset = "0x23214EC", VA = "0x23214EC")]
		public void CreateBlankAnonLogon(EUniverse eUniverse)
		{
		}

		[Token(Token = "0x6000C73")]
		[Address(RVA = "0x23214FC", Offset = "0x23214FC", VA = "0x23214FC")]
		public void CreateBlankAnonUserLogon(EUniverse eUniverse)
		{
		}

		[Token(Token = "0x6000C74")]
		[Address(RVA = "0x232150C", Offset = "0x232150C", VA = "0x232150C")]
		public bool BBlankAnonAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C75")]
		[Address(RVA = "0x2321570", Offset = "0x2321570", VA = "0x2321570")]
		public bool BGameServerAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C76")]
		[Address(RVA = "0x2321594", Offset = "0x2321594", VA = "0x2321594")]
		public bool BPersistentGameServerAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C77")]
		[Address(RVA = "0x23215AC", Offset = "0x23215AC", VA = "0x23215AC")]
		public bool BAnonGameServerAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C78")]
		[Address(RVA = "0x23215C4", Offset = "0x23215C4", VA = "0x23215C4")]
		public bool BContentServerAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C79")]
		[Address(RVA = "0x23215DC", Offset = "0x23215DC", VA = "0x23215DC")]
		public bool BClanAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0x23215F4", Offset = "0x23215F4", VA = "0x23215F4")]
		public bool BChatAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C7B")]
		[Address(RVA = "0x232160C", Offset = "0x232160C", VA = "0x232160C")]
		public bool IsLobby()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C7C")]
		[Address(RVA = "0x2321628", Offset = "0x2321628", VA = "0x2321628")]
		public bool BIndividualAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C7D")]
		[Address(RVA = "0x2321544", Offset = "0x2321544", VA = "0x2321544")]
		public bool BAnonAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C7E")]
		[Address(RVA = "0x2321640", Offset = "0x2321640", VA = "0x2321640")]
		public bool BAnonUserAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C7F")]
		[Address(RVA = "0x2321658", Offset = "0x2321658", VA = "0x2321658")]
		public bool BConsoleUserAccount()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C80")]
		[Address(RVA = "0x23214AC", Offset = "0x23214AC", VA = "0x23214AC")]
		public void SetAccountID(AccountID_t other)
		{
		}

		[Token(Token = "0x6000C81")]
		[Address(RVA = "0x23214D0", Offset = "0x23214D0", VA = "0x23214D0")]
		public void SetAccountInstance(uint other)
		{
		}

		[Token(Token = "0x6000C82")]
		[Address(RVA = "0x23214BC", Offset = "0x23214BC", VA = "0x23214BC")]
		public void SetEAccountType(EAccountType other)
		{
		}

		[Token(Token = "0x6000C83")]
		[Address(RVA = "0x23214B4", Offset = "0x23214B4", VA = "0x23214B4")]
		public void SetEUniverse(EUniverse other)
		{
		}

		[Token(Token = "0x6000C84")]
		[Address(RVA = "0x2321670", Offset = "0x2321670", VA = "0x2321670")]
		public void ClearIndividualInstance()
		{
		}

		[Token(Token = "0x6000C85")]
		[Address(RVA = "0x2321690", Offset = "0x2321690", VA = "0x2321690")]
		public bool HasNoIndividualInstance()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C86")]
		[Address(RVA = "0x232153C", Offset = "0x232153C", VA = "0x232153C")]
		public AccountID_t GetAccountID()
		{
			return default(AccountID_t);
		}

		[Token(Token = "0x6000C87")]
		[Address(RVA = "0x2321564", Offset = "0x2321564", VA = "0x2321564")]
		public uint GetUnAccountInstance()
		{
			return default(uint);
		}

		[Token(Token = "0x6000C88")]
		[Address(RVA = "0x2321588", Offset = "0x2321588", VA = "0x2321588")]
		public EAccountType GetEAccountType()
		{
			return default(EAccountType);
		}

		[Token(Token = "0x6000C89")]
		[Address(RVA = "0x23216B4", Offset = "0x23216B4", VA = "0x23216B4")]
		public EUniverse GetEUniverse()
		{
			return default(EUniverse);
		}

		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0x23216BC", Offset = "0x23216BC", VA = "0x23216BC")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C8B")]
		[Address(RVA = "0x232173C", Offset = "0x232173C", VA = "0x232173C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0x2321744", Offset = "0x2321744", VA = "0x2321744", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0x232180C", Offset = "0x232180C", VA = "0x232180C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0x2321800", Offset = "0x2321800", VA = "0x2321800")]
		public static bool operator ==(CSteamID x, CSteamID y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C8F")]
		[Address(RVA = "0x2321814", Offset = "0x2321814", VA = "0x2321814")]
		public static bool operator !=(CSteamID x, CSteamID y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0x2321884", Offset = "0x2321884", VA = "0x2321884")]
		public static explicit operator CSteamID(ulong value)
		{
			return default(CSteamID);
		}

		[Token(Token = "0x6000C91")]
		[Address(RVA = "0x2321888", Offset = "0x2321888", VA = "0x2321888")]
		public static explicit operator ulong(CSteamID that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000C92")]
		[Address(RVA = "0x232188C", Offset = "0x232188C", VA = "0x232188C", Slot = "4")]
		public bool Equals(CSteamID other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C93")]
		[Address(RVA = "0x232189C", Offset = "0x232189C", VA = "0x232189C", Slot = "5")]
		public int CompareTo(CSteamID other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000211")]
	public struct HAuthTicket : IEquatable<HAuthTicket>, IComparable<HAuthTicket>
	{
		[Token(Token = "0x400081E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HAuthTicket Invalid;

		[Token(Token = "0x400081F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_HAuthTicket;

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0x28A4F98", Offset = "0x28A4F98", VA = "0x28A4F98")]
		public HAuthTicket(uint value)
		{
		}

		[Token(Token = "0x6000C96")]
		[Address(RVA = "0x28A4FA0", Offset = "0x28A4FA0", VA = "0x28A4FA0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000C97")]
		[Address(RVA = "0x28A4FA8", Offset = "0x28A4FA8", VA = "0x28A4FA8", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C98")]
		[Address(RVA = "0x28A5070", Offset = "0x28A5070", VA = "0x28A5070", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000C99")]
		[Address(RVA = "0x28A5064", Offset = "0x28A5064", VA = "0x28A5064")]
		public static bool operator ==(HAuthTicket x, HAuthTicket y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C9A")]
		[Address(RVA = "0x28A5078", Offset = "0x28A5078", VA = "0x28A5078")]
		public static bool operator !=(HAuthTicket x, HAuthTicket y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C9B")]
		[Address(RVA = "0x28A50E8", Offset = "0x28A50E8", VA = "0x28A50E8")]
		public static explicit operator HAuthTicket(uint value)
		{
			return default(HAuthTicket);
		}

		[Token(Token = "0x6000C9C")]
		[Address(RVA = "0x28A50F0", Offset = "0x28A50F0", VA = "0x28A50F0")]
		public static explicit operator uint(HAuthTicket that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000C9D")]
		[Address(RVA = "0x28A50F4", Offset = "0x28A50F4", VA = "0x28A50F4", Slot = "4")]
		public bool Equals(HAuthTicket other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C9E")]
		[Address(RVA = "0x28A5104", Offset = "0x28A5104", VA = "0x28A5104", Slot = "5")]
		public int CompareTo(HAuthTicket other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000212")]
	public struct FriendsGroupID_t : IEquatable<FriendsGroupID_t>, IComparable<FriendsGroupID_t>
	{
		[Token(Token = "0x4000820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly FriendsGroupID_t Invalid;

		[Token(Token = "0x4000821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public short m_FriendsGroupID;

		[Token(Token = "0x6000CA0")]
		[Address(RVA = "0x276B0F4", Offset = "0x276B0F4", VA = "0x276B0F4")]
		public FriendsGroupID_t(short value)
		{
		}

		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0x276B0FC", Offset = "0x276B0FC", VA = "0x276B0FC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000CA2")]
		[Address(RVA = "0x276B104", Offset = "0x276B104", VA = "0x276B104", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA3")]
		[Address(RVA = "0x276B1D0", Offset = "0x276B1D0", VA = "0x276B1D0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000CA4")]
		[Address(RVA = "0x276B1C0", Offset = "0x276B1C0", VA = "0x276B1C0")]
		public static bool operator ==(FriendsGroupID_t x, FriendsGroupID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA5")]
		[Address(RVA = "0x276B1D8", Offset = "0x276B1D8", VA = "0x276B1D8")]
		public static bool operator !=(FriendsGroupID_t x, FriendsGroupID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA6")]
		[Address(RVA = "0x276B24C", Offset = "0x276B24C", VA = "0x276B24C")]
		public static explicit operator FriendsGroupID_t(short value)
		{
			return default(FriendsGroupID_t);
		}

		[Token(Token = "0x6000CA7")]
		[Address(RVA = "0x276B254", Offset = "0x276B254", VA = "0x276B254")]
		public static explicit operator short(FriendsGroupID_t that)
		{
			return default(short);
		}

		[Token(Token = "0x6000CA8")]
		[Address(RVA = "0x276B258", Offset = "0x276B258", VA = "0x276B258", Slot = "4")]
		public bool Equals(FriendsGroupID_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CA9")]
		[Address(RVA = "0x276B268", Offset = "0x276B268", VA = "0x276B268", Slot = "5")]
		public int CompareTo(FriendsGroupID_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000213")]
	public struct HHTMLBrowser : IEquatable<HHTMLBrowser>, IComparable<HHTMLBrowser>
	{
		[Token(Token = "0x4000822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HHTMLBrowser Invalid;

		[Token(Token = "0x4000823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_HHTMLBrowser;

		[Token(Token = "0x6000CAB")]
		[Address(RVA = "0x28A5158", Offset = "0x28A5158", VA = "0x28A5158")]
		public HHTMLBrowser(uint value)
		{
		}

		[Token(Token = "0x6000CAC")]
		[Address(RVA = "0x28A5160", Offset = "0x28A5160", VA = "0x28A5160", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000CAD")]
		[Address(RVA = "0x28A5168", Offset = "0x28A5168", VA = "0x28A5168", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CAE")]
		[Address(RVA = "0x28A5230", Offset = "0x28A5230", VA = "0x28A5230", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000CAF")]
		[Address(RVA = "0x28A5224", Offset = "0x28A5224", VA = "0x28A5224")]
		public static bool operator ==(HHTMLBrowser x, HHTMLBrowser y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CB0")]
		[Address(RVA = "0x28A5238", Offset = "0x28A5238", VA = "0x28A5238")]
		public static bool operator !=(HHTMLBrowser x, HHTMLBrowser y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CB1")]
		[Address(RVA = "0x28A52A8", Offset = "0x28A52A8", VA = "0x28A52A8")]
		public static explicit operator HHTMLBrowser(uint value)
		{
			return default(HHTMLBrowser);
		}

		[Token(Token = "0x6000CB2")]
		[Address(RVA = "0x28A52B0", Offset = "0x28A52B0", VA = "0x28A52B0")]
		public static explicit operator uint(HHTMLBrowser that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000CB3")]
		[Address(RVA = "0x28A52B4", Offset = "0x28A52B4", VA = "0x28A52B4", Slot = "4")]
		public bool Equals(HHTMLBrowser other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CB4")]
		[Address(RVA = "0x28A52C4", Offset = "0x28A52C4", VA = "0x28A52C4", Slot = "5")]
		public int CompareTo(HHTMLBrowser other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000214")]
	public struct HTTPCookieContainerHandle : IEquatable<HTTPCookieContainerHandle>, IComparable<HTTPCookieContainerHandle>
	{
		[Token(Token = "0x4000824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HTTPCookieContainerHandle Invalid;

		[Token(Token = "0x4000825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_HTTPCookieContainerHandle;

		[Token(Token = "0x6000CB6")]
		[Address(RVA = "0x28A5860", Offset = "0x28A5860", VA = "0x28A5860")]
		public HTTPCookieContainerHandle(uint value)
		{
		}

		[Token(Token = "0x6000CB7")]
		[Address(RVA = "0x28A5868", Offset = "0x28A5868", VA = "0x28A5868", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000CB8")]
		[Address(RVA = "0x28A5870", Offset = "0x28A5870", VA = "0x28A5870", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CB9")]
		[Address(RVA = "0x28A5938", Offset = "0x28A5938", VA = "0x28A5938", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000CBA")]
		[Address(RVA = "0x28A592C", Offset = "0x28A592C", VA = "0x28A592C")]
		public static bool operator ==(HTTPCookieContainerHandle x, HTTPCookieContainerHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CBB")]
		[Address(RVA = "0x28A5940", Offset = "0x28A5940", VA = "0x28A5940")]
		public static bool operator !=(HTTPCookieContainerHandle x, HTTPCookieContainerHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CBC")]
		[Address(RVA = "0x28A59B0", Offset = "0x28A59B0", VA = "0x28A59B0")]
		public static explicit operator HTTPCookieContainerHandle(uint value)
		{
			return default(HTTPCookieContainerHandle);
		}

		[Token(Token = "0x6000CBD")]
		[Address(RVA = "0x28A59B8", Offset = "0x28A59B8", VA = "0x28A59B8")]
		public static explicit operator uint(HTTPCookieContainerHandle that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000CBE")]
		[Address(RVA = "0x28A59BC", Offset = "0x28A59BC", VA = "0x28A59BC", Slot = "4")]
		public bool Equals(HTTPCookieContainerHandle other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CBF")]
		[Address(RVA = "0x28A59CC", Offset = "0x28A59CC", VA = "0x28A59CC", Slot = "5")]
		public int CompareTo(HTTPCookieContainerHandle other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000215")]
	public struct HTTPRequestHandle : IEquatable<HTTPRequestHandle>, IComparable<HTTPRequestHandle>
	{
		[Token(Token = "0x4000826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HTTPRequestHandle Invalid;

		[Token(Token = "0x4000827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_HTTPRequestHandle;

		[Token(Token = "0x6000CC1")]
		[Address(RVA = "0x28A5A20", Offset = "0x28A5A20", VA = "0x28A5A20")]
		public HTTPRequestHandle(uint value)
		{
		}

		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0x28A5A28", Offset = "0x28A5A28", VA = "0x28A5A28", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0x28A5A30", Offset = "0x28A5A30", VA = "0x28A5A30", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0x28A5AF8", Offset = "0x28A5AF8", VA = "0x28A5AF8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0x28A5AEC", Offset = "0x28A5AEC", VA = "0x28A5AEC")]
		public static bool operator ==(HTTPRequestHandle x, HTTPRequestHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0x28A5B00", Offset = "0x28A5B00", VA = "0x28A5B00")]
		public static bool operator !=(HTTPRequestHandle x, HTTPRequestHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0x28A5B70", Offset = "0x28A5B70", VA = "0x28A5B70")]
		public static explicit operator HTTPRequestHandle(uint value)
		{
			return default(HTTPRequestHandle);
		}

		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0x28A5B78", Offset = "0x28A5B78", VA = "0x28A5B78")]
		public static explicit operator uint(HTTPRequestHandle that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000CC9")]
		[Address(RVA = "0x28A5B7C", Offset = "0x28A5B7C", VA = "0x28A5B7C", Slot = "4")]
		public bool Equals(HTTPRequestHandle other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CCA")]
		[Address(RVA = "0x28A5B8C", Offset = "0x28A5B8C", VA = "0x28A5B8C", Slot = "5")]
		public int CompareTo(HTTPRequestHandle other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000216")]
	public struct SteamInventoryResult_t : IEquatable<SteamInventoryResult_t>, IComparable<SteamInventoryResult_t>
	{
		[Token(Token = "0x4000828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly SteamInventoryResult_t Invalid;

		[Token(Token = "0x4000829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_SteamInventoryResult;

		[Token(Token = "0x6000CCC")]
		[Address(RVA = "0x164362C", Offset = "0x164362C", VA = "0x164362C")]
		public SteamInventoryResult_t(int value)
		{
		}

		[Token(Token = "0x6000CCD")]
		[Address(RVA = "0x1643634", Offset = "0x1643634", VA = "0x1643634", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000CCE")]
		[Address(RVA = "0x164363C", Offset = "0x164363C", VA = "0x164363C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CCF")]
		[Address(RVA = "0x1643704", Offset = "0x1643704", VA = "0x1643704", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0x16436F8", Offset = "0x16436F8", VA = "0x16436F8")]
		public static bool operator ==(SteamInventoryResult_t x, SteamInventoryResult_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0x164370C", Offset = "0x164370C", VA = "0x164370C")]
		public static bool operator !=(SteamInventoryResult_t x, SteamInventoryResult_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0x164377C", Offset = "0x164377C", VA = "0x164377C")]
		public static explicit operator SteamInventoryResult_t(int value)
		{
			return default(SteamInventoryResult_t);
		}

		[Token(Token = "0x6000CD3")]
		[Address(RVA = "0x1643784", Offset = "0x1643784", VA = "0x1643784")]
		public static explicit operator int(SteamInventoryResult_t that)
		{
			return default(int);
		}

		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0x1643788", Offset = "0x1643788", VA = "0x1643788", Slot = "4")]
		public bool Equals(SteamInventoryResult_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0x1643798", Offset = "0x1643798", VA = "0x1643798", Slot = "5")]
		public int CompareTo(SteamInventoryResult_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000217")]
	public struct SteamItemDef_t : IEquatable<SteamItemDef_t>, IComparable<SteamItemDef_t>
	{
		[Token(Token = "0x400082A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_SteamItemDef;

		[Token(Token = "0x6000CD7")]
		[Address(RVA = "0x16437F0", Offset = "0x16437F0", VA = "0x16437F0")]
		public SteamItemDef_t(int value)
		{
		}

		[Token(Token = "0x6000CD8")]
		[Address(RVA = "0x16437F8", Offset = "0x16437F8", VA = "0x16437F8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000CD9")]
		[Address(RVA = "0x1643800", Offset = "0x1643800", VA = "0x1643800", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0x1643890", Offset = "0x1643890", VA = "0x1643890", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0x1643884", Offset = "0x1643884", VA = "0x1643884")]
		public static bool operator ==(SteamItemDef_t x, SteamItemDef_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CDC")]
		[Address(RVA = "0x1643898", Offset = "0x1643898", VA = "0x1643898")]
		public static bool operator !=(SteamItemDef_t x, SteamItemDef_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0x16438A4", Offset = "0x16438A4", VA = "0x16438A4")]
		public static explicit operator SteamItemDef_t(int value)
		{
			return default(SteamItemDef_t);
		}

		[Token(Token = "0x6000CDE")]
		[Address(RVA = "0x16438AC", Offset = "0x16438AC", VA = "0x16438AC")]
		public static explicit operator int(SteamItemDef_t that)
		{
			return default(int);
		}

		[Token(Token = "0x6000CDF")]
		[Address(RVA = "0x16438B0", Offset = "0x16438B0", VA = "0x16438B0", Slot = "4")]
		public bool Equals(SteamItemDef_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CE0")]
		[Address(RVA = "0x16438C0", Offset = "0x16438C0", VA = "0x16438C0", Slot = "5")]
		public int CompareTo(SteamItemDef_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000218")]
	public struct SteamItemInstanceID_t : IEquatable<SteamItemInstanceID_t>, IComparable<SteamItemInstanceID_t>
	{
		[Token(Token = "0x400082B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly SteamItemInstanceID_t Invalid;

		[Token(Token = "0x400082C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamItemInstanceID;

		[Token(Token = "0x6000CE1")]
		[Address(RVA = "0x16438C8", Offset = "0x16438C8", VA = "0x16438C8")]
		public SteamItemInstanceID_t(ulong value)
		{
		}

		[Token(Token = "0x6000CE2")]
		[Address(RVA = "0x16438D0", Offset = "0x16438D0", VA = "0x16438D0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0x16438D8", Offset = "0x16438D8", VA = "0x16438D8", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CE4")]
		[Address(RVA = "0x16439A0", Offset = "0x16439A0", VA = "0x16439A0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000CE5")]
		[Address(RVA = "0x1643994", Offset = "0x1643994", VA = "0x1643994")]
		public static bool operator ==(SteamItemInstanceID_t x, SteamItemInstanceID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CE6")]
		[Address(RVA = "0x16439A8", Offset = "0x16439A8", VA = "0x16439A8")]
		public static bool operator !=(SteamItemInstanceID_t x, SteamItemInstanceID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CE7")]
		[Address(RVA = "0x1643A18", Offset = "0x1643A18", VA = "0x1643A18")]
		public static explicit operator SteamItemInstanceID_t(ulong value)
		{
			return default(SteamItemInstanceID_t);
		}

		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0x1643A1C", Offset = "0x1643A1C", VA = "0x1643A1C")]
		public static explicit operator ulong(SteamItemInstanceID_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000CE9")]
		[Address(RVA = "0x1643A20", Offset = "0x1643A20", VA = "0x1643A20", Slot = "4")]
		public bool Equals(SteamItemInstanceID_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CEA")]
		[Address(RVA = "0x1643A30", Offset = "0x1643A30", VA = "0x1643A30", Slot = "5")]
		public int CompareTo(SteamItemInstanceID_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000219")]
	public struct HServerListRequest : IEquatable<HServerListRequest>
	{
		[Token(Token = "0x400082D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HServerListRequest Invalid;

		[Token(Token = "0x400082E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public IntPtr m_HServerListRequest;

		[Token(Token = "0x6000CEC")]
		[Address(RVA = "0x28A5318", Offset = "0x28A5318", VA = "0x28A5318")]
		public HServerListRequest(IntPtr value)
		{
		}

		[Token(Token = "0x6000CED")]
		[Address(RVA = "0x28A5320", Offset = "0x28A5320", VA = "0x28A5320", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000CEE")]
		[Address(RVA = "0x28A5328", Offset = "0x28A5328", VA = "0x28A5328", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CEF")]
		[Address(RVA = "0x28A53F8", Offset = "0x28A53F8", VA = "0x28A53F8", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000CF0")]
		[Address(RVA = "0x28A53F0", Offset = "0x28A53F0", VA = "0x28A53F0")]
		public static bool operator ==(HServerListRequest x, HServerListRequest y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CF1")]
		[Address(RVA = "0x28A5400", Offset = "0x28A5400", VA = "0x28A5400")]
		public static bool operator !=(HServerListRequest x, HServerListRequest y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0x28A5480", Offset = "0x28A5480", VA = "0x28A5480")]
		public static explicit operator HServerListRequest(IntPtr value)
		{
			return default(HServerListRequest);
		}

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0x28A5484", Offset = "0x28A5484", VA = "0x28A5484")]
		public static explicit operator IntPtr(HServerListRequest that)
		{
			return default(IntPtr);
		}

		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0x28A5488", Offset = "0x28A5488", VA = "0x28A5488", Slot = "4")]
		public bool Equals(HServerListRequest other)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200021A")]
	public struct HServerQuery : IEquatable<HServerQuery>, IComparable<HServerQuery>
	{
		[Token(Token = "0x400082F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly HServerQuery Invalid;

		[Token(Token = "0x4000830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int m_HServerQuery;

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0x28A54EC", Offset = "0x28A54EC", VA = "0x28A54EC")]
		public HServerQuery(int value)
		{
		}

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0x28A54F4", Offset = "0x28A54F4", VA = "0x28A54F4", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0x28A54FC", Offset = "0x28A54FC", VA = "0x28A54FC", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0x28A55C4", Offset = "0x28A55C4", VA = "0x28A55C4", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000CFA")]
		[Address(RVA = "0x28A55B8", Offset = "0x28A55B8", VA = "0x28A55B8")]
		public static bool operator ==(HServerQuery x, HServerQuery y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0x28A55CC", Offset = "0x28A55CC", VA = "0x28A55CC")]
		public static bool operator !=(HServerQuery x, HServerQuery y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CFC")]
		[Address(RVA = "0x28A563C", Offset = "0x28A563C", VA = "0x28A563C")]
		public static explicit operator HServerQuery(int value)
		{
			return default(HServerQuery);
		}

		[Token(Token = "0x6000CFD")]
		[Address(RVA = "0x28A5644", Offset = "0x28A5644", VA = "0x28A5644")]
		public static explicit operator int(HServerQuery that)
		{
			return default(int);
		}

		[Token(Token = "0x6000CFE")]
		[Address(RVA = "0x28A5648", Offset = "0x28A5648", VA = "0x28A5648", Slot = "4")]
		public bool Equals(HServerQuery other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CFF")]
		[Address(RVA = "0x28A5658", Offset = "0x28A5658", VA = "0x28A5658", Slot = "5")]
		public int CompareTo(HServerQuery other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200021B")]
	public struct SNetListenSocket_t : IEquatable<SNetListenSocket_t>, IComparable<SNetListenSocket_t>
	{
		[Token(Token = "0x4000831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_SNetListenSocket;

		[Token(Token = "0x6000D01")]
		[Address(RVA = "0x10C3D20", Offset = "0x10C3D20", VA = "0x10C3D20")]
		public SNetListenSocket_t(uint value)
		{
		}

		[Token(Token = "0x6000D02")]
		[Address(RVA = "0x10C3D28", Offset = "0x10C3D28", VA = "0x10C3D28", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000D03")]
		[Address(RVA = "0x10C3D30", Offset = "0x10C3D30", VA = "0x10C3D30", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D04")]
		[Address(RVA = "0x10C3DC0", Offset = "0x10C3DC0", VA = "0x10C3DC0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000D05")]
		[Address(RVA = "0x10C3DB4", Offset = "0x10C3DB4", VA = "0x10C3DB4")]
		public static bool operator ==(SNetListenSocket_t x, SNetListenSocket_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D06")]
		[Address(RVA = "0x10C3DC8", Offset = "0x10C3DC8", VA = "0x10C3DC8")]
		public static bool operator !=(SNetListenSocket_t x, SNetListenSocket_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D07")]
		[Address(RVA = "0x10C3DD4", Offset = "0x10C3DD4", VA = "0x10C3DD4")]
		public static explicit operator SNetListenSocket_t(uint value)
		{
			return default(SNetListenSocket_t);
		}

		[Token(Token = "0x6000D08")]
		[Address(RVA = "0x10C3DDC", Offset = "0x10C3DDC", VA = "0x10C3DDC")]
		public static explicit operator uint(SNetListenSocket_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000D09")]
		[Address(RVA = "0x10C3DE0", Offset = "0x10C3DE0", VA = "0x10C3DE0", Slot = "4")]
		public bool Equals(SNetListenSocket_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D0A")]
		[Address(RVA = "0x10C3DF0", Offset = "0x10C3DF0", VA = "0x10C3DF0", Slot = "5")]
		public int CompareTo(SNetListenSocket_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200021C")]
	public struct SNetSocket_t : IEquatable<SNetSocket_t>, IComparable<SNetSocket_t>
	{
		[Token(Token = "0x4000832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_SNetSocket;

		[Token(Token = "0x6000D0B")]
		[Address(RVA = "0x10C3DF8", Offset = "0x10C3DF8", VA = "0x10C3DF8")]
		public SNetSocket_t(uint value)
		{
		}

		[Token(Token = "0x6000D0C")]
		[Address(RVA = "0x10C3E00", Offset = "0x10C3E00", VA = "0x10C3E00", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000D0D")]
		[Address(RVA = "0x10C3E08", Offset = "0x10C3E08", VA = "0x10C3E08", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D0E")]
		[Address(RVA = "0x10C3E98", Offset = "0x10C3E98", VA = "0x10C3E98", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000D0F")]
		[Address(RVA = "0x10C3E8C", Offset = "0x10C3E8C", VA = "0x10C3E8C")]
		public static bool operator ==(SNetSocket_t x, SNetSocket_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D10")]
		[Address(RVA = "0x10C3EA0", Offset = "0x10C3EA0", VA = "0x10C3EA0")]
		public static bool operator !=(SNetSocket_t x, SNetSocket_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D11")]
		[Address(RVA = "0x10C3EAC", Offset = "0x10C3EAC", VA = "0x10C3EAC")]
		public static explicit operator SNetSocket_t(uint value)
		{
			return default(SNetSocket_t);
		}

		[Token(Token = "0x6000D12")]
		[Address(RVA = "0x10C3EB4", Offset = "0x10C3EB4", VA = "0x10C3EB4")]
		public static explicit operator uint(SNetSocket_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000D13")]
		[Address(RVA = "0x10C3EB8", Offset = "0x10C3EB8", VA = "0x10C3EB8", Slot = "4")]
		public bool Equals(SNetSocket_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D14")]
		[Address(RVA = "0x10C3EC8", Offset = "0x10C3EC8", VA = "0x10C3EC8", Slot = "5")]
		public int CompareTo(SNetSocket_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200021D")]
	public struct PublishedFileId_t : IEquatable<PublishedFileId_t>, IComparable<PublishedFileId_t>
	{
		[Token(Token = "0x4000833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly PublishedFileId_t Invalid;

		[Token(Token = "0x4000834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_PublishedFileId;

		[Token(Token = "0x6000D15")]
		[Address(RVA = "0x10BCAF4", Offset = "0x10BCAF4", VA = "0x10BCAF4")]
		public PublishedFileId_t(ulong value)
		{
		}

		[Token(Token = "0x6000D16")]
		[Address(RVA = "0x10BCAFC", Offset = "0x10BCAFC", VA = "0x10BCAFC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000D17")]
		[Address(RVA = "0x10BCB04", Offset = "0x10BCB04", VA = "0x10BCB04", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D18")]
		[Address(RVA = "0x10BCBCC", Offset = "0x10BCBCC", VA = "0x10BCBCC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000D19")]
		[Address(RVA = "0x10BCBC0", Offset = "0x10BCBC0", VA = "0x10BCBC0")]
		public static bool operator ==(PublishedFileId_t x, PublishedFileId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0x10BCBD4", Offset = "0x10BCBD4", VA = "0x10BCBD4")]
		public static bool operator !=(PublishedFileId_t x, PublishedFileId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D1B")]
		[Address(RVA = "0x10BCC44", Offset = "0x10BCC44", VA = "0x10BCC44")]
		public static explicit operator PublishedFileId_t(ulong value)
		{
			return default(PublishedFileId_t);
		}

		[Token(Token = "0x6000D1C")]
		[Address(RVA = "0x10BCC48", Offset = "0x10BCC48", VA = "0x10BCC48")]
		public static explicit operator ulong(PublishedFileId_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000D1D")]
		[Address(RVA = "0x10BCC4C", Offset = "0x10BCC4C", VA = "0x10BCC4C", Slot = "4")]
		public bool Equals(PublishedFileId_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D1E")]
		[Address(RVA = "0x10BCC5C", Offset = "0x10BCC5C", VA = "0x10BCC5C", Slot = "5")]
		public int CompareTo(PublishedFileId_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200021E")]
	public struct PublishedFileUpdateHandle_t : IEquatable<PublishedFileUpdateHandle_t>, IComparable<PublishedFileUpdateHandle_t>
	{
		[Token(Token = "0x4000835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly PublishedFileUpdateHandle_t Invalid;

		[Token(Token = "0x4000836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_PublishedFileUpdateHandle;

		[Token(Token = "0x6000D20")]
		[Address(RVA = "0x10BCCB0", Offset = "0x10BCCB0", VA = "0x10BCCB0")]
		public PublishedFileUpdateHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000D21")]
		[Address(RVA = "0x10BCCB8", Offset = "0x10BCCB8", VA = "0x10BCCB8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000D22")]
		[Address(RVA = "0x10BCCC0", Offset = "0x10BCCC0", VA = "0x10BCCC0", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D23")]
		[Address(RVA = "0x10BCD88", Offset = "0x10BCD88", VA = "0x10BCD88", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000D24")]
		[Address(RVA = "0x10BCD7C", Offset = "0x10BCD7C", VA = "0x10BCD7C")]
		public static bool operator ==(PublishedFileUpdateHandle_t x, PublishedFileUpdateHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D25")]
		[Address(RVA = "0x10BCD90", Offset = "0x10BCD90", VA = "0x10BCD90")]
		public static bool operator !=(PublishedFileUpdateHandle_t x, PublishedFileUpdateHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D26")]
		[Address(RVA = "0x10BCE00", Offset = "0x10BCE00", VA = "0x10BCE00")]
		public static explicit operator PublishedFileUpdateHandle_t(ulong value)
		{
			return default(PublishedFileUpdateHandle_t);
		}

		[Token(Token = "0x6000D27")]
		[Address(RVA = "0x10BCE04", Offset = "0x10BCE04", VA = "0x10BCE04")]
		public static explicit operator ulong(PublishedFileUpdateHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000D28")]
		[Address(RVA = "0x10BCE08", Offset = "0x10BCE08", VA = "0x10BCE08", Slot = "4")]
		public bool Equals(PublishedFileUpdateHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D29")]
		[Address(RVA = "0x10BCE18", Offset = "0x10BCE18", VA = "0x10BCE18", Slot = "5")]
		public int CompareTo(PublishedFileUpdateHandle_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200021F")]
	public struct UGCFileWriteStreamHandle_t : IEquatable<UGCFileWriteStreamHandle_t>, IComparable<UGCFileWriteStreamHandle_t>
	{
		[Token(Token = "0x4000837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly UGCFileWriteStreamHandle_t Invalid;

		[Token(Token = "0x4000838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_UGCFileWriteStreamHandle;

		[Token(Token = "0x6000D2B")]
		[Address(RVA = "0x1A6BFA8", Offset = "0x1A6BFA8", VA = "0x1A6BFA8")]
		public UGCFileWriteStreamHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000D2C")]
		[Address(RVA = "0x1A6BFB0", Offset = "0x1A6BFB0", VA = "0x1A6BFB0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000D2D")]
		[Address(RVA = "0x1A6BFB8", Offset = "0x1A6BFB8", VA = "0x1A6BFB8", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D2E")]
		[Address(RVA = "0x1A6C080", Offset = "0x1A6C080", VA = "0x1A6C080", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000D2F")]
		[Address(RVA = "0x1A6C074", Offset = "0x1A6C074", VA = "0x1A6C074")]
		public static bool operator ==(UGCFileWriteStreamHandle_t x, UGCFileWriteStreamHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D30")]
		[Address(RVA = "0x1A6C088", Offset = "0x1A6C088", VA = "0x1A6C088")]
		public static bool operator !=(UGCFileWriteStreamHandle_t x, UGCFileWriteStreamHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D31")]
		[Address(RVA = "0x1A6C0F8", Offset = "0x1A6C0F8", VA = "0x1A6C0F8")]
		public static explicit operator UGCFileWriteStreamHandle_t(ulong value)
		{
			return default(UGCFileWriteStreamHandle_t);
		}

		[Token(Token = "0x6000D32")]
		[Address(RVA = "0x1A6C0FC", Offset = "0x1A6C0FC", VA = "0x1A6C0FC")]
		public static explicit operator ulong(UGCFileWriteStreamHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000D33")]
		[Address(RVA = "0x1A6C100", Offset = "0x1A6C100", VA = "0x1A6C100", Slot = "4")]
		public bool Equals(UGCFileWriteStreamHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D34")]
		[Address(RVA = "0x1A6C110", Offset = "0x1A6C110", VA = "0x1A6C110", Slot = "5")]
		public int CompareTo(UGCFileWriteStreamHandle_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000220")]
	public struct UGCHandle_t : IEquatable<UGCHandle_t>, IComparable<UGCHandle_t>
	{
		[Token(Token = "0x4000839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly UGCHandle_t Invalid;

		[Token(Token = "0x400083A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_UGCHandle;

		[Token(Token = "0x6000D36")]
		[Address(RVA = "0x1A6C168", Offset = "0x1A6C168", VA = "0x1A6C168")]
		public UGCHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000D37")]
		[Address(RVA = "0x1A6C170", Offset = "0x1A6C170", VA = "0x1A6C170", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000D38")]
		[Address(RVA = "0x1A6C178", Offset = "0x1A6C178", VA = "0x1A6C178", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D39")]
		[Address(RVA = "0x1A6C240", Offset = "0x1A6C240", VA = "0x1A6C240", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000D3A")]
		[Address(RVA = "0x1A6C234", Offset = "0x1A6C234", VA = "0x1A6C234")]
		public static bool operator ==(UGCHandle_t x, UGCHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0x1A6C248", Offset = "0x1A6C248", VA = "0x1A6C248")]
		public static bool operator !=(UGCHandle_t x, UGCHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0x1A6C2B8", Offset = "0x1A6C2B8", VA = "0x1A6C2B8")]
		public static explicit operator UGCHandle_t(ulong value)
		{
			return default(UGCHandle_t);
		}

		[Token(Token = "0x6000D3D")]
		[Address(RVA = "0x1A6C2BC", Offset = "0x1A6C2BC", VA = "0x1A6C2BC")]
		public static explicit operator ulong(UGCHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000D3E")]
		[Address(RVA = "0x1A6C2C0", Offset = "0x1A6C2C0", VA = "0x1A6C2C0", Slot = "4")]
		public bool Equals(UGCHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D3F")]
		[Address(RVA = "0x1A6C2D0", Offset = "0x1A6C2D0", VA = "0x1A6C2D0", Slot = "5")]
		public int CompareTo(UGCHandle_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000221")]
	public struct ScreenshotHandle : IEquatable<ScreenshotHandle>, IComparable<ScreenshotHandle>
	{
		[Token(Token = "0x400083B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ScreenshotHandle Invalid;

		[Token(Token = "0x400083C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_ScreenshotHandle;

		[Token(Token = "0x6000D41")]
		[Address(RVA = "0x162CCE8", Offset = "0x162CCE8", VA = "0x162CCE8")]
		public ScreenshotHandle(uint value)
		{
		}

		[Token(Token = "0x6000D42")]
		[Address(RVA = "0x162CCF0", Offset = "0x162CCF0", VA = "0x162CCF0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000D43")]
		[Address(RVA = "0x162CCF8", Offset = "0x162CCF8", VA = "0x162CCF8", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D44")]
		[Address(RVA = "0x162CDC0", Offset = "0x162CDC0", VA = "0x162CDC0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000D45")]
		[Address(RVA = "0x162CDB4", Offset = "0x162CDB4", VA = "0x162CDB4")]
		public static bool operator ==(ScreenshotHandle x, ScreenshotHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D46")]
		[Address(RVA = "0x162CDC8", Offset = "0x162CDC8", VA = "0x162CDC8")]
		public static bool operator !=(ScreenshotHandle x, ScreenshotHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D47")]
		[Address(RVA = "0x162CE38", Offset = "0x162CE38", VA = "0x162CE38")]
		public static explicit operator ScreenshotHandle(uint value)
		{
			return default(ScreenshotHandle);
		}

		[Token(Token = "0x6000D48")]
		[Address(RVA = "0x162CE40", Offset = "0x162CE40", VA = "0x162CE40")]
		public static explicit operator uint(ScreenshotHandle that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000D49")]
		[Address(RVA = "0x162CE44", Offset = "0x162CE44", VA = "0x162CE44", Slot = "4")]
		public bool Equals(ScreenshotHandle other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D4A")]
		[Address(RVA = "0x162CE54", Offset = "0x162CE54", VA = "0x162CE54", Slot = "5")]
		public int CompareTo(ScreenshotHandle other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000222")]
	public struct AccountID_t : IEquatable<AccountID_t>, IComparable<AccountID_t>
	{
		[Token(Token = "0x400083D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_AccountID;

		[Token(Token = "0x6000D4C")]
		[Address(RVA = "0x230E77C", Offset = "0x230E77C", VA = "0x230E77C")]
		public AccountID_t(uint value)
		{
		}

		[Token(Token = "0x6000D4D")]
		[Address(RVA = "0x230E784", Offset = "0x230E784", VA = "0x230E784", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000D4E")]
		[Address(RVA = "0x230E78C", Offset = "0x230E78C", VA = "0x230E78C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D4F")]
		[Address(RVA = "0x230E81C", Offset = "0x230E81C", VA = "0x230E81C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000D50")]
		[Address(RVA = "0x230E810", Offset = "0x230E810", VA = "0x230E810")]
		public static bool operator ==(AccountID_t x, AccountID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D51")]
		[Address(RVA = "0x230E824", Offset = "0x230E824", VA = "0x230E824")]
		public static bool operator !=(AccountID_t x, AccountID_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D52")]
		[Address(RVA = "0x230E830", Offset = "0x230E830", VA = "0x230E830")]
		public static explicit operator AccountID_t(uint value)
		{
			return default(AccountID_t);
		}

		[Token(Token = "0x6000D53")]
		[Address(RVA = "0x230E838", Offset = "0x230E838", VA = "0x230E838")]
		public static explicit operator uint(AccountID_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000D54")]
		[Address(RVA = "0x230E83C", Offset = "0x230E83C", VA = "0x230E83C", Slot = "4")]
		public bool Equals(AccountID_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D55")]
		[Address(RVA = "0x230E84C", Offset = "0x230E84C", VA = "0x230E84C", Slot = "5")]
		public int CompareTo(AccountID_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000223")]
	public struct AppId_t : IEquatable<AppId_t>, IComparable<AppId_t>
	{
		[Token(Token = "0x400083E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly AppId_t Invalid;

		[Token(Token = "0x400083F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_AppId;

		[Token(Token = "0x6000D56")]
		[Address(RVA = "0x231287C", Offset = "0x231287C", VA = "0x231287C")]
		public AppId_t(uint value)
		{
		}

		[Token(Token = "0x6000D57")]
		[Address(RVA = "0x2312884", Offset = "0x2312884", VA = "0x2312884", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000D58")]
		[Address(RVA = "0x231288C", Offset = "0x231288C", VA = "0x231288C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D59")]
		[Address(RVA = "0x2312954", Offset = "0x2312954", VA = "0x2312954", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000D5A")]
		[Address(RVA = "0x2312948", Offset = "0x2312948", VA = "0x2312948")]
		public static bool operator ==(AppId_t x, AppId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D5B")]
		[Address(RVA = "0x231295C", Offset = "0x231295C", VA = "0x231295C")]
		public static bool operator !=(AppId_t x, AppId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D5C")]
		[Address(RVA = "0x23129CC", Offset = "0x23129CC", VA = "0x23129CC")]
		public static explicit operator AppId_t(uint value)
		{
			return default(AppId_t);
		}

		[Token(Token = "0x6000D5D")]
		[Address(RVA = "0x23129D4", Offset = "0x23129D4", VA = "0x23129D4")]
		public static explicit operator uint(AppId_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000D5E")]
		[Address(RVA = "0x23129D8", Offset = "0x23129D8", VA = "0x23129D8", Slot = "4")]
		public bool Equals(AppId_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D5F")]
		[Address(RVA = "0x23129E8", Offset = "0x23129E8", VA = "0x23129E8", Slot = "5")]
		public int CompareTo(AppId_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000224")]
	public struct DepotId_t : IEquatable<DepotId_t>, IComparable<DepotId_t>
	{
		[Token(Token = "0x4000840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly DepotId_t Invalid;

		[Token(Token = "0x4000841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public uint m_DepotId;

		[Token(Token = "0x6000D61")]
		[Address(RVA = "0x16A62E8", Offset = "0x16A62E8", VA = "0x16A62E8")]
		public DepotId_t(uint value)
		{
		}

		[Token(Token = "0x6000D62")]
		[Address(RVA = "0x16A62F0", Offset = "0x16A62F0", VA = "0x16A62F0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000D63")]
		[Address(RVA = "0x16A62F8", Offset = "0x16A62F8", VA = "0x16A62F8", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D64")]
		[Address(RVA = "0x16A63C0", Offset = "0x16A63C0", VA = "0x16A63C0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000D65")]
		[Address(RVA = "0x16A63B4", Offset = "0x16A63B4", VA = "0x16A63B4")]
		public static bool operator ==(DepotId_t x, DepotId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D66")]
		[Address(RVA = "0x16A63C8", Offset = "0x16A63C8", VA = "0x16A63C8")]
		public static bool operator !=(DepotId_t x, DepotId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D67")]
		[Address(RVA = "0x16A6438", Offset = "0x16A6438", VA = "0x16A6438")]
		public static explicit operator DepotId_t(uint value)
		{
			return default(DepotId_t);
		}

		[Token(Token = "0x6000D68")]
		[Address(RVA = "0x16A6440", Offset = "0x16A6440", VA = "0x16A6440")]
		public static explicit operator uint(DepotId_t that)
		{
			return default(uint);
		}

		[Token(Token = "0x6000D69")]
		[Address(RVA = "0x16A6444", Offset = "0x16A6444", VA = "0x16A6444", Slot = "4")]
		public bool Equals(DepotId_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D6A")]
		[Address(RVA = "0x16A6454", Offset = "0x16A6454", VA = "0x16A6454", Slot = "5")]
		public int CompareTo(DepotId_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000225")]
	public struct ManifestId_t : IEquatable<ManifestId_t>, IComparable<ManifestId_t>
	{
		[Token(Token = "0x4000842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ManifestId_t Invalid;

		[Token(Token = "0x4000843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ManifestId;

		[Token(Token = "0x6000D6C")]
		[Address(RVA = "0x22F44C0", Offset = "0x22F44C0", VA = "0x22F44C0")]
		public ManifestId_t(ulong value)
		{
		}

		[Token(Token = "0x6000D6D")]
		[Address(RVA = "0x22F44C8", Offset = "0x22F44C8", VA = "0x22F44C8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000D6E")]
		[Address(RVA = "0x22F44D0", Offset = "0x22F44D0", VA = "0x22F44D0", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D6F")]
		[Address(RVA = "0x22F4598", Offset = "0x22F4598", VA = "0x22F4598", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0x22F458C", Offset = "0x22F458C", VA = "0x22F458C")]
		public static bool operator ==(ManifestId_t x, ManifestId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D71")]
		[Address(RVA = "0x22F45A0", Offset = "0x22F45A0", VA = "0x22F45A0")]
		public static bool operator !=(ManifestId_t x, ManifestId_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D72")]
		[Address(RVA = "0x22F4610", Offset = "0x22F4610", VA = "0x22F4610")]
		public static explicit operator ManifestId_t(ulong value)
		{
			return default(ManifestId_t);
		}

		[Token(Token = "0x6000D73")]
		[Address(RVA = "0x22F4614", Offset = "0x22F4614", VA = "0x22F4614")]
		public static explicit operator ulong(ManifestId_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000D74")]
		[Address(RVA = "0x22F4618", Offset = "0x22F4618", VA = "0x22F4618", Slot = "4")]
		public bool Equals(ManifestId_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D75")]
		[Address(RVA = "0x22F4628", Offset = "0x22F4628", VA = "0x22F4628", Slot = "5")]
		public int CompareTo(ManifestId_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000226")]
	public struct SteamAPICall_t : IEquatable<SteamAPICall_t>, IComparable<SteamAPICall_t>
	{
		[Token(Token = "0x4000844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly SteamAPICall_t Invalid;

		[Token(Token = "0x4000845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamAPICall;

		[Token(Token = "0x6000D77")]
		[Address(RVA = "0x1632F44", Offset = "0x1632F44", VA = "0x1632F44")]
		public SteamAPICall_t(ulong value)
		{
		}

		[Token(Token = "0x6000D78")]
		[Address(RVA = "0x1632F4C", Offset = "0x1632F4C", VA = "0x1632F4C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000D79")]
		[Address(RVA = "0x1632F54", Offset = "0x1632F54", VA = "0x1632F54", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D7A")]
		[Address(RVA = "0x163301C", Offset = "0x163301C", VA = "0x163301C", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000D7B")]
		[Address(RVA = "0x1633010", Offset = "0x1633010", VA = "0x1633010")]
		public static bool operator ==(SteamAPICall_t x, SteamAPICall_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D7C")]
		[Address(RVA = "0x1633024", Offset = "0x1633024", VA = "0x1633024")]
		public static bool operator !=(SteamAPICall_t x, SteamAPICall_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D7D")]
		[Address(RVA = "0x1633094", Offset = "0x1633094", VA = "0x1633094")]
		public static explicit operator SteamAPICall_t(ulong value)
		{
			return default(SteamAPICall_t);
		}

		[Token(Token = "0x6000D7E")]
		[Address(RVA = "0x1633098", Offset = "0x1633098", VA = "0x1633098")]
		public static explicit operator ulong(SteamAPICall_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000D7F")]
		[Address(RVA = "0x163309C", Offset = "0x163309C", VA = "0x163309C", Slot = "4")]
		public bool Equals(SteamAPICall_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D80")]
		[Address(RVA = "0x16330AC", Offset = "0x16330AC", VA = "0x16330AC", Slot = "5")]
		public int CompareTo(SteamAPICall_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000227")]
	public struct UGCQueryHandle_t : IEquatable<UGCQueryHandle_t>, IComparable<UGCQueryHandle_t>
	{
		[Token(Token = "0x4000846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly UGCQueryHandle_t Invalid;

		[Token(Token = "0x4000847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_UGCQueryHandle;

		[Token(Token = "0x6000D82")]
		[Address(RVA = "0x1A6C328", Offset = "0x1A6C328", VA = "0x1A6C328")]
		public UGCQueryHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000D83")]
		[Address(RVA = "0x1A6C330", Offset = "0x1A6C330", VA = "0x1A6C330", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000D84")]
		[Address(RVA = "0x1A6C338", Offset = "0x1A6C338", VA = "0x1A6C338", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D85")]
		[Address(RVA = "0x1A6C400", Offset = "0x1A6C400", VA = "0x1A6C400", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000D86")]
		[Address(RVA = "0x1A6C3F4", Offset = "0x1A6C3F4", VA = "0x1A6C3F4")]
		public static bool operator ==(UGCQueryHandle_t x, UGCQueryHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D87")]
		[Address(RVA = "0x1A6C408", Offset = "0x1A6C408", VA = "0x1A6C408")]
		public static bool operator !=(UGCQueryHandle_t x, UGCQueryHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0x1A6C478", Offset = "0x1A6C478", VA = "0x1A6C478")]
		public static explicit operator UGCQueryHandle_t(ulong value)
		{
			return default(UGCQueryHandle_t);
		}

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0x1A6C47C", Offset = "0x1A6C47C", VA = "0x1A6C47C")]
		public static explicit operator ulong(UGCQueryHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0x1A6C480", Offset = "0x1A6C480", VA = "0x1A6C480", Slot = "4")]
		public bool Equals(UGCQueryHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0x1A6C490", Offset = "0x1A6C490", VA = "0x1A6C490", Slot = "5")]
		public int CompareTo(UGCQueryHandle_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000228")]
	public struct UGCUpdateHandle_t : IEquatable<UGCUpdateHandle_t>, IComparable<UGCUpdateHandle_t>
	{
		[Token(Token = "0x4000848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly UGCUpdateHandle_t Invalid;

		[Token(Token = "0x4000849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_UGCUpdateHandle;

		[Token(Token = "0x6000D8D")]
		[Address(RVA = "0x1A6C4E8", Offset = "0x1A6C4E8", VA = "0x1A6C4E8")]
		public UGCUpdateHandle_t(ulong value)
		{
		}

		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0x1A6C4F0", Offset = "0x1A6C4F0", VA = "0x1A6C4F0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000D8F")]
		[Address(RVA = "0x1A6C4F8", Offset = "0x1A6C4F8", VA = "0x1A6C4F8", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D90")]
		[Address(RVA = "0x1A6C5C0", Offset = "0x1A6C5C0", VA = "0x1A6C5C0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0x1A6C5B4", Offset = "0x1A6C5B4", VA = "0x1A6C5B4")]
		public static bool operator ==(UGCUpdateHandle_t x, UGCUpdateHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D92")]
		[Address(RVA = "0x1A6C5C8", Offset = "0x1A6C5C8", VA = "0x1A6C5C8")]
		public static bool operator !=(UGCUpdateHandle_t x, UGCUpdateHandle_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D93")]
		[Address(RVA = "0x1A6C638", Offset = "0x1A6C638", VA = "0x1A6C638")]
		public static explicit operator UGCUpdateHandle_t(ulong value)
		{
			return default(UGCUpdateHandle_t);
		}

		[Token(Token = "0x6000D94")]
		[Address(RVA = "0x1A6C63C", Offset = "0x1A6C63C", VA = "0x1A6C63C")]
		public static explicit operator ulong(UGCUpdateHandle_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000D95")]
		[Address(RVA = "0x1A6C640", Offset = "0x1A6C640", VA = "0x1A6C640", Slot = "4")]
		public bool Equals(UGCUpdateHandle_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D96")]
		[Address(RVA = "0x1A6C650", Offset = "0x1A6C650", VA = "0x1A6C650", Slot = "5")]
		public int CompareTo(UGCUpdateHandle_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000229")]
	public struct ClientUnifiedMessageHandle : IEquatable<ClientUnifiedMessageHandle>, IComparable<ClientUnifiedMessageHandle>
	{
		[Token(Token = "0x400084A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly ClientUnifiedMessageHandle Invalid;

		[Token(Token = "0x400084B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_ClientUnifiedMessageHandle;

		[Token(Token = "0x6000D98")]
		[Address(RVA = "0x1697F70", Offset = "0x1697F70", VA = "0x1697F70")]
		public ClientUnifiedMessageHandle(ulong value)
		{
		}

		[Token(Token = "0x6000D99")]
		[Address(RVA = "0x1697F78", Offset = "0x1697F78", VA = "0x1697F78", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000D9A")]
		[Address(RVA = "0x1697F80", Offset = "0x1697F80", VA = "0x1697F80", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D9B")]
		[Address(RVA = "0x1698048", Offset = "0x1698048", VA = "0x1698048", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000D9C")]
		[Address(RVA = "0x169803C", Offset = "0x169803C", VA = "0x169803C")]
		public static bool operator ==(ClientUnifiedMessageHandle x, ClientUnifiedMessageHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D9D")]
		[Address(RVA = "0x1698050", Offset = "0x1698050", VA = "0x1698050")]
		public static bool operator !=(ClientUnifiedMessageHandle x, ClientUnifiedMessageHandle y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D9E")]
		[Address(RVA = "0x16980C0", Offset = "0x16980C0", VA = "0x16980C0")]
		public static explicit operator ClientUnifiedMessageHandle(ulong value)
		{
			return default(ClientUnifiedMessageHandle);
		}

		[Token(Token = "0x6000D9F")]
		[Address(RVA = "0x16980C4", Offset = "0x16980C4", VA = "0x16980C4")]
		public static explicit operator ulong(ClientUnifiedMessageHandle that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000DA0")]
		[Address(RVA = "0x16980C8", Offset = "0x16980C8", VA = "0x16980C8", Slot = "4")]
		public bool Equals(ClientUnifiedMessageHandle other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DA1")]
		[Address(RVA = "0x16980D8", Offset = "0x16980D8", VA = "0x16980D8", Slot = "5")]
		public int CompareTo(ClientUnifiedMessageHandle other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200022A")]
	public struct SteamLeaderboardEntries_t : IEquatable<SteamLeaderboardEntries_t>, IComparable<SteamLeaderboardEntries_t>
	{
		[Token(Token = "0x400084C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamLeaderboardEntries;

		[Token(Token = "0x6000DA3")]
		[Address(RVA = "0x1643A88", Offset = "0x1643A88", VA = "0x1643A88")]
		public SteamLeaderboardEntries_t(ulong value)
		{
		}

		[Token(Token = "0x6000DA4")]
		[Address(RVA = "0x1643A90", Offset = "0x1643A90", VA = "0x1643A90", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000DA5")]
		[Address(RVA = "0x1643A98", Offset = "0x1643A98", VA = "0x1643A98", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DA6")]
		[Address(RVA = "0x1643B28", Offset = "0x1643B28", VA = "0x1643B28", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000DA7")]
		[Address(RVA = "0x1643B1C", Offset = "0x1643B1C", VA = "0x1643B1C")]
		public static bool operator ==(SteamLeaderboardEntries_t x, SteamLeaderboardEntries_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DA8")]
		[Address(RVA = "0x1643B30", Offset = "0x1643B30", VA = "0x1643B30")]
		public static bool operator !=(SteamLeaderboardEntries_t x, SteamLeaderboardEntries_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DA9")]
		[Address(RVA = "0x1643B3C", Offset = "0x1643B3C", VA = "0x1643B3C")]
		public static explicit operator SteamLeaderboardEntries_t(ulong value)
		{
			return default(SteamLeaderboardEntries_t);
		}

		[Token(Token = "0x6000DAA")]
		[Address(RVA = "0x1643B40", Offset = "0x1643B40", VA = "0x1643B40")]
		public static explicit operator ulong(SteamLeaderboardEntries_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000DAB")]
		[Address(RVA = "0x1643B44", Offset = "0x1643B44", VA = "0x1643B44", Slot = "4")]
		public bool Equals(SteamLeaderboardEntries_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DAC")]
		[Address(RVA = "0x1643B54", Offset = "0x1643B54", VA = "0x1643B54", Slot = "5")]
		public int CompareTo(SteamLeaderboardEntries_t other)
		{
			return default(int);
		}
	}
	[Token(Token = "0x200022B")]
	public struct SteamLeaderboard_t : IEquatable<SteamLeaderboard_t>, IComparable<SteamLeaderboard_t>
	{
		[Token(Token = "0x400084D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public ulong m_SteamLeaderboard;

		[Token(Token = "0x6000DAD")]
		[Address(RVA = "0x1643B5C", Offset = "0x1643B5C", VA = "0x1643B5C")]
		public SteamLeaderboard_t(ulong value)
		{
		}

		[Token(Token = "0x6000DAE")]
		[Address(RVA = "0x1643B64", Offset = "0x1643B64", VA = "0x1643B64", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x6000DAF")]
		[Address(RVA = "0x1643B6C", Offset = "0x1643B6C", VA = "0x1643B6C", Slot = "0")]
		public override bool Equals(object other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DB0")]
		[Address(RVA = "0x1643BFC", Offset = "0x1643BFC", VA = "0x1643BFC", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x6000DB1")]
		[Address(RVA = "0x1643BF0", Offset = "0x1643BF0", VA = "0x1643BF0")]
		public static bool operator ==(SteamLeaderboard_t x, SteamLeaderboard_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DB2")]
		[Address(RVA = "0x1643C04", Offset = "0x1643C04", VA = "0x1643C04")]
		public static bool operator !=(SteamLeaderboard_t x, SteamLeaderboard_t y)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DB3")]
		[Address(RVA = "0x1643C10", Offset = "0x1643C10", VA = "0x1643C10")]
		public static explicit operator SteamLeaderboard_t(ulong value)
		{
			return default(SteamLeaderboard_t);
		}

		[Token(Token = "0x6000DB4")]
		[Address(RVA = "0x1643C14", Offset = "0x1643C14", VA = "0x1643C14")]
		public static explicit operator ulong(SteamLeaderboard_t that)
		{
			return default(ulong);
		}

		[Token(Token = "0x6000DB5")]
		[Address(RVA = "0x1643C18", Offset = "0x1643C18", VA = "0x1643C18", Slot = "4")]
		public bool Equals(SteamLeaderboard_t other)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DB6")]
		[Address(RVA = "0x1643C28", Offset = "0x1643C28", VA = "0x1643C28", Slot = "5")]
		public int CompareTo(SteamLeaderboard_t other)
		{
			return default(int);
		}
	}
}
namespace Sirenix.OdinInspector.Demos
{
	[Token(Token = "0x200022C")]
	public class Bar : Foo
	{
		[Token(Token = "0x400084E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject D;

		[Token(Token = "0x400084F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject E;

		[Token(Token = "0x4000850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject F;

		[Token(Token = "0x6000DB7")]
		[Address(RVA = "0x2317774", Offset = "0x2317774", VA = "0x2317774")]
		public Bar()
		{
		}
	}
	[Token(Token = "0x200022D")]
	public class Foo : MonoBehaviour
	{
		[Token(Token = "0x4000851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int G;

		[Token(Token = "0x4000852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int H;

		[Token(Token = "0x4000853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int I;

		[Token(Token = "0x6000DB8")]
		[Address(RVA = "0x276B0CC", Offset = "0x276B0CC", VA = "0x276B0CC")]
		public Foo()
		{
		}
	}
}
namespace CustomList
{
	[Token(Token = "0x200022E")]
	public class ReorderableAttribute : PropertyAttribute
	{
		[Token(Token = "0x4000854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool add;

		[Token(Token = "0x4000855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		public bool remove;

		[Token(Token = "0x4000856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
		public bool draggable;

		[Token(Token = "0x4000857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17")]
		public bool singleLine;

		[Token(Token = "0x4000858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool paginate;

		[Token(Token = "0x4000859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool sortable;

		[Token(Token = "0x400085A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool labels;

		[Token(Token = "0x400085B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int pageSize;

		[Token(Token = "0x400085C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string elementNameProperty;

		[Token(Token = "0x400085D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string elementNameOverride;

		[Token(Token = "0x400085E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string elementIconPath;

		[Token(Token = "0x400085F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Type surrogateType;

		[Token(Token = "0x4000860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string surrogateProperty;

		[Token(Token = "0x6000DB9")]
		[Address(RVA = "0x10C1348", Offset = "0x10C1348", VA = "0x10C1348")]
		public ReorderableAttribute()
		{
		}

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0x10C1364", Offset = "0x10C1364", VA = "0x10C1364")]
		public ReorderableAttribute(string elementNameProperty)
		{
		}

		[Token(Token = "0x6000DBB")]
		[Address(RVA = "0x10C1424", Offset = "0x10C1424", VA = "0x10C1424")]
		public ReorderableAttribute(string elementNameProperty, string elementIconPath)
		{
		}

		[Token(Token = "0x6000DBC")]
		[Address(RVA = "0x10C1440", Offset = "0x10C1440", VA = "0x10C1440")]
		public ReorderableAttribute(string elementNameProperty, string elementNameOverride, string elementIconPath)
		{
		}

		[Token(Token = "0x6000DBD")]
		[Address(RVA = "0x10C145C", Offset = "0x10C145C", VA = "0x10C145C")]
		public ReorderableAttribute(bool add, bool remove, bool draggable, [Optional] string elementNameProperty, [Optional] string elementIconPath)
		{
		}

		[Token(Token = "0x6000DBE")]
		[Address(RVA = "0x10C1380", Offset = "0x10C1380", VA = "0x10C1380")]
		public ReorderableAttribute(bool add, bool remove, bool draggable, [Optional] string elementNameProperty, [Optional] string elementNameOverride, [Optional] string elementIconPath)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200022F")]
	[AttributeAttribute(Name = "DefaultMemberAttribute", RVA = "0xA7D974", Offset = "0xA7D974")]
	public abstract class ReorderableArray<T> : ICloneable, IList<T>, ICollection<T>, IEnumerable<T>, IEnumerable
	{
		[Token(Token = "0x4000861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private List<T> array;

		[Token(Token = "0x170000B7")]
		public T Item
		{
			[Token(Token = "0x6000DC1")]
			get
			{
				return (T)null;
			}
			[Token(Token = "0x6000DC2")]
			set
			{
			}
		}

		[Token(Token = "0x170000B8")]
		public int Length
		{
			[Token(Token = "0x6000DC3")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000B9")]
		public bool IsReadOnly
		{
			[Token(Token = "0x6000DC4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000BA")]
		public int Count
		{
			[Token(Token = "0x6000DC5")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000DBF")]
		public ReorderableArray()
		{
		}

		[Token(Token = "0x6000DC0")]
		public ReorderableArray(int length)
		{
		}

		[Token(Token = "0x6000DC6")]
		public object Clone()
		{
			return null;
		}

		[Token(Token = "0x6000DC7")]
		public void CopyFrom(IEnumerable<T> value)
		{
		}

		[Token(Token = "0x6000DC8")]
		public bool Contains(T value)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DC9")]
		public int IndexOf(T value)
		{
			return default(int);
		}

		[Token(Token = "0x6000DCA")]
		public void Insert(int index, T item)
		{
		}

		[Token(Token = "0x6000DCB")]
		public void RemoveAt(int index)
		{
		}

		[Token(Token = "0x6000DCC")]
		public void Add(T item)
		{
		}

		[Token(Token = "0x6000DCD")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000DCE")]
		public void CopyTo(T[] array, int arrayIndex)
		{
		}

		[Token(Token = "0x6000DCF")]
		public bool Remove(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DD0")]
		public T[] ToArray()
		{
			return null;
		}

		[Token(Token = "0x6000DD1")]
		public IEnumerator<T> GetEnumerator()
		{
			return null;
		}

		[Token(Token = "0x6000DD2")]
		private IEnumerator System.Collections.IEnumerable.GetEnumerator()
		{
			return null;
		}
	}
}
namespace AnimPreview
{
	[Token(Token = "0x2000230")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xA7D9AC", Offset = "0xA7D9AC")]
	[ExecuteAlways]
	public class AnimPreview : MonoBehaviour
	{
		[Token(Token = "0x6000DD3")]
		[Address(RVA = "0x2311388", Offset = "0x2311388", VA = "0x2311388")]
		public AnimPreview()
		{
		}
	}
}
namespace RootMotion
{
	[Token(Token = "0x2000231")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xA7D9F8", Offset = "0xA7D9F8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xA7D9F8", Offset = "0xA7D9F8")]
	public abstract class Baker : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200037A")]
		public enum Mode
		{
			[Token(Token = "0x4000F49")]
			AnimationClips,
			[Token(Token = "0x4000F4A")]
			AnimationStates,
			[Token(Token = "0x4000F4B")]
			PlayableDirector,
			[Token(Token = "0x4000F4C")]
			Realtime
		}

		[Token(Token = "0x200037B")]
		public delegate void BakerDelegate(AnimationClip clip, float time);

		[Serializable]
		[Token(Token = "0x200037C")]
		public class ClipSettings
		{
			[Serializable]
			[Token(Token = "0x2000436")]
			public enum BasedUponRotation
			{
				[Token(Token = "0x40012A0")]
				Original,
				[Token(Token = "0x40012A1")]
				BodyOrientation
			}

			[Serializable]
			[Token(Token = "0x2000437")]
			public enum BasedUponY
			{
				[Token(Token = "0x40012A3")]
				Original,
				[Token(Token = "0x40012A4")]
				CenterOfMass,
				[Token(Token = "0x40012A5")]
				Feet
			}

			[Serializable]
			[Token(Token = "0x2000438")]
			public enum BasedUponXZ
			{
				[Token(Token = "0x40012A7")]
				Original,
				[Token(Token = "0x40012A8")]
				CenterOfMass
			}

			[Token(Token = "0x4000F4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool loopTime;

			[Token(Token = "0x4000F4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			public bool loopBlend;

			[Token(Token = "0x4000F4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float cycleOffset;

			[Token(Token = "0x4000F50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool loopBlendOrientation;

			[Token(Token = "0x4000F51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public BasedUponRotation basedUponRotation;

			[Token(Token = "0x4000F52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float orientationOffsetY;

			[Token(Token = "0x4000F53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public bool loopBlendPositionY;

			[Token(Token = "0x4000F54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public BasedUponY basedUponY;

			[Token(Token = "0x4000F55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float level;

			[Token(Token = "0x4000F56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool loopBlendPositionXZ;

			[Token(Token = "0x4000F57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public BasedUponXZ basedUponXZ;

			[Token(Token = "0x4000F58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool mirror;

			[Token(Token = "0x6001665")]
			[Address(RVA = "0x1A80754", Offset = "0x1A80754", VA = "0x1A80754")]
			public ClipSettings()
			{
			}
		}

		[Token(Token = "0x4000862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7F494", Offset = "0xA7F494")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA7F494", Offset = "0xA7F494")]
		public int frameRate;

		[Token(Token = "0x4000863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7F4EC", Offset = "0xA7F4EC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA7F4EC", Offset = "0xA7F4EC")]
		public float keyReductionError;

		[Token(Token = "0x4000864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7F544", Offset = "0xA7F544")]
		public Mode mode;

		[Token(Token = "0x4000865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7F57C", Offset = "0xA7F57C")]
		public AnimationClip[] animationClips;

		[Token(Token = "0x4000866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7F5B4", Offset = "0xA7F5B4")]
		public string[] animationStates;

		[Token(Token = "0x4000867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7F5EC", Offset = "0xA7F5EC")]
		public string saveToFolder;

		[Token(Token = "0x4000868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7F624", Offset = "0xA7F624")]
		public string appendName;

		[Token(Token = "0x4000869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7F65C", Offset = "0xA7F65C")]
		public string saveName;

		[Token(Token = "0x400086A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F694", Offset = "0xA7F694")]
		private bool <isBaking>k__BackingField;

		[Token(Token = "0x400086B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F6A4", Offset = "0xA7F6A4")]
		private float <bakingProgress>k__BackingField;

		[Token(Token = "0x400086C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public Animator animator;

		[Token(Token = "0x400086D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public PlayableDirector director;

		[Token(Token = "0x400086E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public BakerDelegate OnStartClip;

		[Token(Token = "0x400086F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public BakerDelegate OnUpdateClip;

		[Token(Token = "0x4000870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7F6D4", Offset = "0xA7F6D4")]
		public bool inheritClipSettings;

		[Token(Token = "0x4000871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7F70C", Offset = "0xA7F70C")]
		public ClipSettings clipSettings;

		[Token(Token = "0x4000872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7F744", Offset = "0xA7F744")]
		private float <clipLength>k__BackingField;

		[Token(Token = "0x4000873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		protected bool addLoopFrame;

		[Token(Token = "0x170000BB")]
		public bool isBaking
		{
			[Token(Token = "0x6000DD8")]
			[Address(RVA = "0x2314544", Offset = "0x2314544", VA = "0x2314544")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A52C", Offset = "0xA8A52C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DD9")]
			[Address(RVA = "0x231454C", Offset = "0x231454C", VA = "0x231454C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A53C", Offset = "0xA8A53C")]
			private set
			{
			}
		}

		[Token(Token = "0x170000BC")]
		public float bakingProgress
		{
			[Token(Token = "0x6000DDA")]
			[Address(RVA = "0x2314558", Offset = "0x2314558", VA = "0x2314558")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A54C", Offset = "0xA8A54C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DDB")]
			[Address(RVA = "0x2314560", Offset = "0x2314560", VA = "0x2314560")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A55C", Offset = "0xA8A55C")]
			private set
			{
			}
		}

		[Token(Token = "0x170000BD")]
		protected float clipLength
		{
			[Token(Token = "0x6000DE1")]
			[Address(RVA = "0x2314568", Offset = "0x2314568", VA = "0x2314568")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A56C", Offset = "0xA8A56C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DE2")]
			[Address(RVA = "0x2314570", Offset = "0x2314570", VA = "0x2314570")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A57C", Offset = "0xA8A57C")]
			private set
			{
			}
		}

		[Token(Token = "0x6000DD4")]
		[Address(RVA = "0x2314424", Offset = "0x2314424", VA = "0x2314424")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8A44C", Offset = "0xA8A44C")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000DD5")]
		[Address(RVA = "0x231446C", Offset = "0x231446C", VA = "0x231446C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8A484", Offset = "0xA8A484")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000DD6")]
		[Address(RVA = "0x23144B4", Offset = "0x23144B4", VA = "0x23144B4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8A4BC", Offset = "0xA8A4BC")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000DD7")]
		[Address(RVA = "0x23144FC", Offset = "0x23144FC", VA = "0x23144FC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8A4F4", Offset = "0xA8A4F4")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000DDC")]
		protected abstract Transform GetCharacterRoot();

		[Token(Token = "0x6000DDD")]
		protected abstract void OnStartBaking();

		[Token(Token = "0x6000DDE")]
		protected abstract void OnSetLoopFrame(float time);

		[Token(Token = "0x6000DDF")]
		protected abstract void OnSetCurves(ref AnimationClip clip);

		[Token(Token = "0x6000DE0")]
		protected abstract void OnSetKeyframes(float time, bool lastFrame);

		[Token(Token = "0x6000DE3")]
		[Address(RVA = "0x2314578", Offset = "0x2314578", VA = "0x2314578")]
		public void BakeClip()
		{
		}

		[Token(Token = "0x6000DE4")]
		[Address(RVA = "0x231457C", Offset = "0x231457C", VA = "0x231457C")]
		public void StartBaking()
		{
		}

		[Token(Token = "0x6000DE5")]
		[Address(RVA = "0x2314580", Offset = "0x2314580", VA = "0x2314580")]
		public void StopBaking()
		{
		}

		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0x2314584", Offset = "0x2314584", VA = "0x2314584")]
		protected Baker()
		{
		}
	}
	[Token(Token = "0x2000232")]
	public class GenericBaker : Baker
	{
		[Token(Token = "0x4000874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7F754", Offset = "0xA7F754")]
		public bool markAsLegacy;

		[Token(Token = "0x4000875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7F78C", Offset = "0xA7F78C")]
		public Transform root;

		[Token(Token = "0x4000876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7F7C4", Offset = "0xA7F7C4")]
		public Transform rootNode;

		[Token(Token = "0x4000877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7F7FC", Offset = "0xA7F7FC")]
		public Transform[] ignoreList;

		[Token(Token = "0x4000878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7F834", Offset = "0xA7F834")]
		public Transform[] bakePositionList;

		[Token(Token = "0x4000879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private BakerTransform[] children;

		[Token(Token = "0x400087A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private BakerTransform rootChild;

		[Token(Token = "0x400087B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int rootChildIndex;

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0x276C1C8", Offset = "0x276C1C8", VA = "0x276C1C8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0x276C5CC", Offset = "0x276C5CC", VA = "0x276C5CC", Slot = "4")]
		protected override Transform GetCharacterRoot()
		{
			return null;
		}

		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0x276C5D4", Offset = "0x276C5D4", VA = "0x276C5D4", Slot = "5")]
		protected override void OnStartBaking()
		{
		}

		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0x276C6E4", Offset = "0x276C6E4", VA = "0x276C6E4", Slot = "6")]
		protected override void OnSetLoopFrame(float time)
		{
		}

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0x276C760", Offset = "0x276C760", VA = "0x276C760", Slot = "7")]
		protected override void OnSetCurves(ref AnimationClip clip)
		{
		}

		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0x276C7DC", Offset = "0x276C7DC", VA = "0x276C7DC", Slot = "8")]
		protected override void OnSetKeyframes(float time, bool lastFrame)
		{
		}

		[Token(Token = "0x6000DED")]
		[Address(RVA = "0x276C424", Offset = "0x276C424", VA = "0x276C424")]
		private bool IsIgnored(Transform t)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0x276C4F8", Offset = "0x276C4F8", VA = "0x276C4F8")]
		private bool BakePosition(Transform t)
		{
			return default(bool);
		}

		[Token(Token = "0x6000DEF")]
		[Address(RVA = "0x276C858", Offset = "0x276C858", VA = "0x276C858")]
		public GenericBaker()
		{
		}
	}
	[Token(Token = "0x2000233")]
	public class TQ
	{
		[Token(Token = "0x400087C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 t;

		[Token(Token = "0x400087D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion q;

		[Token(Token = "0x6000DF0")]
		[Address(RVA = "0x1651FF0", Offset = "0x1651FF0", VA = "0x1651FF0")]
		public TQ()
		{
		}

		[Token(Token = "0x6000DF1")]
		[Address(RVA = "0x1651FF8", Offset = "0x1651FF8", VA = "0x1651FF8")]
		public TQ(Vector3 translation, Quaternion rotation)
		{
		}
	}
	[Token(Token = "0x2000234")]
	public class AvatarUtility
	{
		[Token(Token = "0x6000DF2")]
		[Address(RVA = "0x2312D60", Offset = "0x2312D60", VA = "0x2312D60")]
		public static Quaternion GetPostRotation(Avatar avatar, AvatarIKGoal avatarIKGoal)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0x2312FC8", Offset = "0x2312FC8", VA = "0x2312FC8")]
		public static TQ GetIKGoalTQ(Avatar avatar, float humanScale, AvatarIKGoal avatarIKGoal, TQ bodyPositionRotation, TQ boneTQ)
		{
			return null;
		}

		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0x231358C", Offset = "0x231358C", VA = "0x231358C")]
		public static TQ WorldSpaceIKGoalToBone(TQ goalTQ, Avatar avatar, AvatarIKGoal avatarIKGoal)
		{
			return null;
		}

		[Token(Token = "0x6000DF5")]
		[Address(RVA = "0x2313A38", Offset = "0x2313A38", VA = "0x2313A38")]
		public static TQ GetWorldSpaceIKGoal(BakerHumanoidQT ikQT, BakerHumanoidQT rootQT, float time, float humanScale)
		{
			return null;
		}

		[Token(Token = "0x6000DF6")]
		[Address(RVA = "0x2312FA8", Offset = "0x2312FA8", VA = "0x2312FA8")]
		public static HumanBodyBones HumanIDFromAvatarIKGoal(AvatarIKGoal avatarIKGoal)
		{
			return default(HumanBodyBones);
		}

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0x2313BCC", Offset = "0x2313BCC", VA = "0x2313BCC")]
		public AvatarUtility()
		{
		}
	}
	[Token(Token = "0x2000235")]
	public static class BakerUtilities
	{
		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0x2315A74", Offset = "0x2315A74", VA = "0x2315A74")]
		public static void ReduceKeyframes(AnimationCurve curve, float maxError)
		{
		}

		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0x23173A4", Offset = "0x23173A4", VA = "0x23173A4")]
		public static Keyframe[] GetReducedKeyframes(AnimationCurve curve, float maxError)
		{
			return null;
		}

		[Token(Token = "0x6000DFA")]
		[Address(RVA = "0x23154C4", Offset = "0x23154C4", VA = "0x23154C4")]
		public static void SetLoopFrame(float time, AnimationCurve curve)
		{
		}

		[Token(Token = "0x6000DFB")]
		[Address(RVA = "0x2315ABC", Offset = "0x2315ABC", VA = "0x2315ABC")]
		public static void SetTangentMode(AnimationCurve curve)
		{
		}

		[Token(Token = "0x6000DFC")]
		[Address(RVA = "0x2314FF4", Offset = "0x2314FF4", VA = "0x2314FF4")]
		public static Quaternion EnsureQuaternionContinuity(Quaternion lastQ, Quaternion q)
		{
			return default(Quaternion);
		}
	}
	[Serializable]
	[Token(Token = "0x2000236")]
	public class BakerHumanoidQT
	{
		[Token(Token = "0x400087E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Transform transform;

		[Token(Token = "0x400087F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string Qx;

		[Token(Token = "0x4000880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string Qy;

		[Token(Token = "0x4000881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string Qz;

		[Token(Token = "0x4000882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string Qw;

		[Token(Token = "0x4000883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string Tx;

		[Token(Token = "0x4000884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private string Ty;

		[Token(Token = "0x4000885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private string Tz;

		[Token(Token = "0x4000886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve rotX;

		[Token(Token = "0x4000887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AnimationCurve rotY;

		[Token(Token = "0x4000888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AnimationCurve rotZ;

		[Token(Token = "0x4000889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AnimationCurve rotW;

		[Token(Token = "0x400088A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public AnimationCurve posX;

		[Token(Token = "0x400088B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public AnimationCurve posY;

		[Token(Token = "0x400088C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public AnimationCurve posZ;

		[Token(Token = "0x400088D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private AvatarIKGoal goal;

		[Token(Token = "0x400088E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Quaternion lastQ;

		[Token(Token = "0x400088F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private bool lastQSet;

		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0x2314698", Offset = "0x2314698", VA = "0x2314698")]
		public BakerHumanoidQT(string name)
		{
		}

		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0x23149AC", Offset = "0x23149AC", VA = "0x23149AC")]
		public BakerHumanoidQT(Transform transform, AvatarIKGoal goal, string name)
		{
		}

		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0x2314B88", Offset = "0x2314B88", VA = "0x2314B88")]
		public Quaternion EvaluateRotation(float time)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0x2314C44", Offset = "0x2314C44", VA = "0x2314C44")]
		public Vector3 EvaluatePosition(float time)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0x2313AFC", Offset = "0x2313AFC", VA = "0x2313AFC")]
		public TQ Evaluate(float time)
		{
			return null;
		}

		[Token(Token = "0x6000E02")]
		[Address(RVA = "0x2314CC4", Offset = "0x2314CC4", VA = "0x2314CC4")]
		public void GetCurvesFromClip(AnimationClip clip, Animator animator)
		{
		}

		[Token(Token = "0x6000E03")]
		[Address(RVA = "0x2314850", Offset = "0x2314850", VA = "0x2314850")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000E04")]
		[Address(RVA = "0x2314CC8", Offset = "0x2314CC8", VA = "0x2314CC8")]
		public void SetIKKeyframes(float time, Avatar avatar, Transform root, float humanScale, Vector3 bodyPosition, Quaternion bodyRotation)
		{
		}

		[Token(Token = "0x6000E05")]
		[Address(RVA = "0x2315258", Offset = "0x2315258", VA = "0x2315258")]
		public void SetKeyframes(float time, Vector3 pos, Quaternion rot)
		{
		}

		[Token(Token = "0x6000E06")]
		[Address(RVA = "0x2315354", Offset = "0x2315354", VA = "0x2315354")]
		public void MoveLastKeyframes(float time)
		{
		}

		[Token(Token = "0x6000E07")]
		[Address(RVA = "0x2315450", Offset = "0x2315450", VA = "0x2315450")]
		public void SetLoopFrame(float time)
		{
		}

		[Token(Token = "0x6000E08")]
		[Address(RVA = "0x23156BC", Offset = "0x23156BC", VA = "0x23156BC")]
		public void SetRootLoopFrame(float time)
		{
		}

		[Token(Token = "0x6000E09")]
		[Address(RVA = "0x23153C8", Offset = "0x23153C8", VA = "0x23153C8")]
		private void MoveLastKeyframe(float time, AnimationCurve curve)
		{
		}

		[Token(Token = "0x6000E0A")]
		[Address(RVA = "0x23156C0", Offset = "0x23156C0", VA = "0x23156C0")]
		public void MultiplyLength(AnimationCurve curve, float mlp)
		{
		}

		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0x2315774", Offset = "0x2315774", VA = "0x2315774")]
		public void SetCurves(ref AnimationClip clip, float maxError, float lengthMlp)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000237")]
	public class BakerMuscle
	{
		[Token(Token = "0x4000890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AnimationCurve curve;

		[Token(Token = "0x4000891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int muscleIndex;

		[Token(Token = "0x4000892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string propertyName;

		[Token(Token = "0x6000E0C")]
		[Address(RVA = "0x2315AC0", Offset = "0x2315AC0", VA = "0x2315AC0")]
		public BakerMuscle(int muscleIndex)
		{
		}

		[Token(Token = "0x6000E0D")]
		[Address(RVA = "0x2315B3C", Offset = "0x2315B3C", VA = "0x2315B3C")]
		private string MuscleNameToPropertyName(string n)
		{
			return null;
		}

		[Token(Token = "0x6000E0E")]
		[Address(RVA = "0x23165D8", Offset = "0x23165D8", VA = "0x23165D8")]
		public void MultiplyLength(AnimationCurve curve, float mlp)
		{
		}

		[Token(Token = "0x6000E0F")]
		[Address(RVA = "0x231668C", Offset = "0x231668C", VA = "0x231668C")]
		public void SetCurves(ref AnimationClip clip, float maxError, float lengthMlp)
		{
		}

		[Token(Token = "0x6000E10")]
		[Address(RVA = "0x2316574", Offset = "0x2316574", VA = "0x2316574")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000E11")]
		[Address(RVA = "0x2316784", Offset = "0x2316784", VA = "0x2316784")]
		public void SetKeyframe(float time, float[] muscles)
		{
		}

		[Token(Token = "0x6000E12")]
		[Address(RVA = "0x23167CC", Offset = "0x23167CC", VA = "0x23167CC")]
		public void SetLoopFrame(float time)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000238")]
	public class BakerTransform
	{
		[Token(Token = "0x4000893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x4000894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AnimationCurve posX;

		[Token(Token = "0x4000895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve posY;

		[Token(Token = "0x4000896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve posZ;

		[Token(Token = "0x4000897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve rotX;

		[Token(Token = "0x4000898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve rotY;

		[Token(Token = "0x4000899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationCurve rotZ;

		[Token(Token = "0x400089A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AnimationCurve rotW;

		[Token(Token = "0x400089B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string relativePath;

		[Token(Token = "0x400089C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool recordPosition;

		[Token(Token = "0x400089D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 relativePosition;

		[Token(Token = "0x400089E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool isRootNode;

		[Token(Token = "0x400089F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Quaternion relativeRotation;

		[Token(Token = "0x6000E13")]
		[Address(RVA = "0x23167D4", Offset = "0x23167D4", VA = "0x23167D4")]
		public BakerTransform(Transform transform, Transform root, bool recordPosition, bool isRootNode)
		{
		}

		[Token(Token = "0x6000E14")]
		[Address(RVA = "0x23169C4", Offset = "0x23169C4", VA = "0x23169C4")]
		public void SetRelativeSpace(Vector3 position, Quaternion rotation)
		{
		}

		[Token(Token = "0x6000E15")]
		[Address(RVA = "0x23169D8", Offset = "0x23169D8", VA = "0x23169D8")]
		public void SetCurves(ref AnimationClip clip)
		{
		}

		[Token(Token = "0x6000E16")]
		[Address(RVA = "0x2316CC4", Offset = "0x2316CC4", VA = "0x2316CC4")]
		private void AddRootMotionCurves(ref AnimationClip clip)
		{
		}

		[Token(Token = "0x6000E17")]
		[Address(RVA = "0x2316880", Offset = "0x2316880", VA = "0x2316880")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000E18")]
		[Address(RVA = "0x2316F78", Offset = "0x2316F78", VA = "0x2316F78")]
		public void ReduceKeyframes(float maxError)
		{
		}

		[Token(Token = "0x6000E19")]
		[Address(RVA = "0x2316FEC", Offset = "0x2316FEC", VA = "0x2316FEC")]
		public void SetKeyframes(float time)
		{
		}

		[Token(Token = "0x6000E1A")]
		[Address(RVA = "0x23171A0", Offset = "0x23171A0", VA = "0x23171A0")]
		public void AddLoopFrame(float time)
		{
		}
	}
	[Token(Token = "0x2000239")]
	public class HumanoidBaker : Baker
	{
		[Token(Token = "0x40008A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7F86C", Offset = "0xA7F86C")]
		public bool bakeHandIK;

		[Token(Token = "0x40008A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7F8A4", Offset = "0xA7F8A4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA7F8A4", Offset = "0xA7F8A4")]
		public float IKKeyReductionError;

		[Token(Token = "0x40008A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7F8FC", Offset = "0xA7F8FC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA7F8FC", Offset = "0xA7F8FC")]
		public int muscleFrameRateDiv;

		[Token(Token = "0x40008A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private BakerMuscle[] bakerMuscles;

		[Token(Token = "0x40008A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private BakerHumanoidQT rootQT;

		[Token(Token = "0x40008A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private BakerHumanoidQT leftFootQT;

		[Token(Token = "0x40008A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private BakerHumanoidQT rightFootQT;

		[Token(Token = "0x40008A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private BakerHumanoidQT leftHandQT;

		[Token(Token = "0x40008A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private BakerHumanoidQT rightHandQT;

		[Token(Token = "0x40008A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float[] muscles;

		[Token(Token = "0x40008AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private HumanPose pose;

		[Token(Token = "0x40008AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private HumanPoseHandler handler;

		[Token(Token = "0x40008AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Vector3 bodyPosition;

		[Token(Token = "0x40008AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private Quaternion bodyRotation;

		[Token(Token = "0x40008AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private int mN;

		[Token(Token = "0x40008AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Quaternion lastBodyRotation;

		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0x28AD234", Offset = "0x28AD234", VA = "0x28AD234")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E1C")]
		[Address(RVA = "0x28AD7C8", Offset = "0x28AD7C8", VA = "0x28AD7C8", Slot = "4")]
		protected override Transform GetCharacterRoot()
		{
			return null;
		}

		[Token(Token = "0x6000E1D")]
		[Address(RVA = "0x28AD7E4", Offset = "0x28AD7E4", VA = "0x28AD7E4", Slot = "5")]
		protected override void OnStartBaking()
		{
		}

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0x28AD8C0", Offset = "0x28AD8C0", VA = "0x28AD8C0", Slot = "6")]
		protected override void OnSetLoopFrame(float time)
		{
		}

		[Token(Token = "0x6000E1F")]
		[Address(RVA = "0x28AD99C", Offset = "0x28AD99C", VA = "0x28AD99C", Slot = "7")]
		protected override void OnSetCurves(ref AnimationClip clip)
		{
		}

		[Token(Token = "0x6000E20")]
		[Address(RVA = "0x28ADB6C", Offset = "0x28ADB6C", VA = "0x28ADB6C", Slot = "8")]
		protected override void OnSetKeyframes(float time, bool lastFrame)
		{
		}

		[Token(Token = "0x6000E21")]
		[Address(RVA = "0x28ADEB4", Offset = "0x28ADEB4", VA = "0x28ADEB4")]
		private void UpdateHumanPose()
		{
		}

		[Token(Token = "0x6000E22")]
		[Address(RVA = "0x28ADFA0", Offset = "0x28ADFA0", VA = "0x28ADFA0")]
		public HumanoidBaker()
		{
		}
	}
	[Token(Token = "0x200023A")]
	public class CameraController : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200037D")]
		public enum UpdateMode
		{
			[Token(Token = "0x4000F5A")]
			Update,
			[Token(Token = "0x4000F5B")]
			FixedUpdate,
			[Token(Token = "0x4000F5C")]
			LateUpdate,
			[Token(Token = "0x4000F5D")]
			FixedLateUpdate
		}

		[Token(Token = "0x40008B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x40008B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform rotationSpace;

		[Token(Token = "0x40008B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UpdateMode updateMode;

		[Token(Token = "0x40008B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool lockCursor;

		[Token(Token = "0x40008B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xA7F950", Offset = "0xA7F950")]
		public bool smoothFollow;

		[Token(Token = "0x40008B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 offset;

		[Token(Token = "0x40008B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float followSpeed;

		[Token(Token = "0x40008B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xA7F988", Offset = "0xA7F988")]
		public float rotationSensitivity;

		[Token(Token = "0x40008B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float yMinLimit;

		[Token(Token = "0x40008B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float yMaxLimit;

		[Token(Token = "0x40008BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool rotateAlways;

		[Token(Token = "0x40008BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		public bool rotateOnLeftButton;

		[Token(Token = "0x40008BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
		public bool rotateOnRightButton;

		[Token(Token = "0x40008BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F")]
		public bool rotateOnMiddleButton;

		[Token(Token = "0x40008BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xA7F9C0", Offset = "0xA7F9C0")]
		public float distance;

		[Token(Token = "0x40008BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float minDistance;

		[Token(Token = "0x40008C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float maxDistance;

		[Token(Token = "0x40008C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float zoomSpeed;

		[Token(Token = "0x40008C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float zoomSensitivity;

		[Token(Token = "0x40008C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xA7F9F8", Offset = "0xA7F9F8")]
		public LayerMask blockingLayers;

		[Token(Token = "0x40008C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float blockingRadius;

		[Token(Token = "0x40008C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float blockingSmoothTime;

		[Token(Token = "0x40008C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float blockingOriginOffset;

		[Token(Token = "0x40008C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA7FA30", Offset = "0xA7FA30")]
		public float blockedOffset;

		[Token(Token = "0x40008C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7FA48", Offset = "0xA7FA48")]
		private float <x>k__BackingField;

		[Token(Token = "0x40008C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7FA58", Offset = "0xA7FA58")]
		private float <y>k__BackingField;

		[Token(Token = "0x40008CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7FA68", Offset = "0xA7FA68")]
		private float <distanceTarget>k__BackingField;

		[Token(Token = "0x40008CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 targetDistance;

		[Token(Token = "0x40008CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 position;

		[Token(Token = "0x40008CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Quaternion rotation;

		[Token(Token = "0x40008CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Vector3 smoothPosition;

		[Token(Token = "0x40008CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Camera cam;

		[Token(Token = "0x40008D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool fixedFrame;

		[Token(Token = "0x40008D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private float fixedDeltaTime;

		[Token(Token = "0x40008D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Quaternion r;

		[Token(Token = "0x40008D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Vector3 lastUp;

		[Token(Token = "0x40008D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float blockedDistance;

		[Token(Token = "0x40008D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float blockedDistanceV;

		[Token(Token = "0x170000BE")]
		public float x
		{
			[Token(Token = "0x6000E23")]
			[Address(RVA = "0x2321DBC", Offset = "0x2321DBC", VA = "0x2321DBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A58C", Offset = "0xA8A58C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E24")]
			[Address(RVA = "0x2321DC4", Offset = "0x2321DC4", VA = "0x2321DC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A59C", Offset = "0xA8A59C")]
			private set
			{
			}
		}

		[Token(Token = "0x170000BF")]
		public float y
		{
			[Token(Token = "0x6000E25")]
			[Address(RVA = "0x2321DCC", Offset = "0x2321DCC", VA = "0x2321DCC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A5AC", Offset = "0xA8A5AC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E26")]
			[Address(RVA = "0x2321DD4", Offset = "0x2321DD4", VA = "0x2321DD4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A5BC", Offset = "0xA8A5BC")]
			private set
			{
			}
		}

		[Token(Token = "0x170000C0")]
		public float distanceTarget
		{
			[Token(Token = "0x6000E27")]
			[Address(RVA = "0x2321DDC", Offset = "0x2321DDC", VA = "0x2321DDC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A5CC", Offset = "0xA8A5CC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000E28")]
			[Address(RVA = "0x2321DE4", Offset = "0x2321DE4", VA = "0x2321DE4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A5DC", Offset = "0xA8A5DC")]
			private set
			{
			}
		}

		[Token(Token = "0x170000C1")]
		private float zoomAdd
		{
			[Token(Token = "0x6000E32")]
			[Address(RVA = "0x23226CC", Offset = "0x23226CC", VA = "0x23226CC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000E29")]
		[Address(RVA = "0x2321DEC", Offset = "0x2321DEC", VA = "0x2321DEC")]
		public void SetAngles(Quaternion rotation)
		{
		}

		[Token(Token = "0x6000E2A")]
		[Address(RVA = "0x2321E28", Offset = "0x2321E28", VA = "0x2321E28")]
		public void SetAngles(float yaw, float pitch)
		{
		}

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0x2321E30", Offset = "0x2321E30", VA = "0x2321E30", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0x2321F40", Offset = "0x2321F40", VA = "0x2321F40", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0x2321F9C", Offset = "0x2321F9C", VA = "0x2321F9C", Slot = "6")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0x2322004", Offset = "0x2322004", VA = "0x2322004", Slot = "7")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0x2322068", Offset = "0x2322068", VA = "0x2322068")]
		public void UpdateInput()
		{
		}

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0x2321F74", Offset = "0x2321F74", VA = "0x2321F74")]
		public void UpdateTransform()
		{
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0x23221E8", Offset = "0x23221E8", VA = "0x23221E8")]
		public void UpdateTransform(float deltaTime)
		{
		}

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0x232269C", Offset = "0x232269C", VA = "0x232269C")]
		private float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6000E34")]
		[Address(RVA = "0x232273C", Offset = "0x232273C", VA = "0x232273C")]
		public CameraController()
		{
		}
	}
	[Token(Token = "0x200023B")]
	public class CameraControllerFPS : MonoBehaviour
	{
		[Token(Token = "0x40008D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rotationSensitivity;

		[Token(Token = "0x40008D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float yMinLimit;

		[Token(Token = "0x40008D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float yMaxLimit;

		[Token(Token = "0x40008D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float x;

		[Token(Token = "0x40008DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float y;

		[Token(Token = "0x6000E35")]
		[Address(RVA = "0x23227E8", Offset = "0x23227E8", VA = "0x23227E8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E36")]
		[Address(RVA = "0x2322820", Offset = "0x2322820", VA = "0x2322820")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0x23229C8", Offset = "0x23229C8", VA = "0x23229C8")]
		private float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0x23229F8", Offset = "0x23229F8", VA = "0x23229F8")]
		public CameraControllerFPS()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200023C")]
	public enum Axis
	{
		[Token(Token = "0x40008DC")]
		X,
		[Token(Token = "0x40008DD")]
		Y,
		[Token(Token = "0x40008DE")]
		Z
	}
	[Token(Token = "0x200023D")]
	public class AxisTools
	{
		[Token(Token = "0x6000E39")]
		[Address(RVA = "0x2313BD4", Offset = "0x2313BD4", VA = "0x2313BD4")]
		public static Vector3 ToVector3(Axis axis)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E3A")]
		[Address(RVA = "0x2313BF8", Offset = "0x2313BF8", VA = "0x2313BF8")]
		public static Axis ToAxis(Vector3 v)
		{
			return default(Axis);
		}

		[Token(Token = "0x6000E3B")]
		[Address(RVA = "0x2313C30", Offset = "0x2313C30", VA = "0x2313C30")]
		public static Axis GetAxisToPoint(Transform t, Vector3 worldPosition)
		{
			return default(Axis);
		}

		[Token(Token = "0x6000E3C")]
		[Address(RVA = "0x2313D20", Offset = "0x2313D20", VA = "0x2313D20")]
		public static Axis GetAxisToDirection(Transform t, Vector3 direction)
		{
			return default(Axis);
		}

		[Token(Token = "0x6000E3D")]
		[Address(RVA = "0x2313CC8", Offset = "0x2313CC8", VA = "0x2313CC8")]
		public static Vector3 GetAxisVectorToPoint(Transform t, Vector3 worldPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E3E")]
		[Address(RVA = "0x2313DB8", Offset = "0x2313DB8", VA = "0x2313DB8")]
		public static Vector3 GetAxisVectorToDirection(Transform t, Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E3F")]
		[Address(RVA = "0x2313E00", Offset = "0x2313E00", VA = "0x2313E00")]
		public static Vector3 GetAxisVectorToDirection(Quaternion r, Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E40")]
		[Address(RVA = "0x2313FAC", Offset = "0x2313FAC", VA = "0x2313FAC")]
		public AxisTools()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200023E")]
	public class BipedLimbOrientations
	{
		[Serializable]
		[Token(Token = "0x200037E")]
		public class LimbOrientation
		{
			[Token(Token = "0x4000F5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 upperBoneForwardAxis;

			[Token(Token = "0x4000F5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 lowerBoneForwardAxis;

			[Token(Token = "0x4000F60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 lastBoneLeftAxis;

			[Token(Token = "0x6001666")]
			[Address(RVA = "0x1A8075C", Offset = "0x1A8075C", VA = "0x1A8075C")]
			public LimbOrientation(Vector3 upperBoneForwardAxis, Vector3 lowerBoneForwardAxis, Vector3 lastBoneLeftAxis)
			{
			}
		}

		[Token(Token = "0x40008DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LimbOrientation leftArm;

		[Token(Token = "0x40008E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LimbOrientation rightArm;

		[Token(Token = "0x40008E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LimbOrientation leftLeg;

		[Token(Token = "0x40008E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LimbOrientation rightLeg;

		[Token(Token = "0x170000C2")]
		public static BipedLimbOrientations UMA
		{
			[Token(Token = "0x6000E42")]
			[Address(RVA = "0x2318FC4", Offset = "0x2318FC4", VA = "0x2318FC4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C3")]
		public static BipedLimbOrientations MaxBiped
		{
			[Token(Token = "0x6000E43")]
			[Address(RVA = "0x2319234", Offset = "0x2319234", VA = "0x2319234")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E41")]
		[Address(RVA = "0x2318F44", Offset = "0x2318F44", VA = "0x2318F44")]
		public BipedLimbOrientations(LimbOrientation leftArm, LimbOrientation rightArm, LimbOrientation leftLeg, LimbOrientation rightLeg)
		{
		}
	}
	[Token(Token = "0x200023F")]
	public static class BipedNaming
	{
		[Serializable]
		[Token(Token = "0x200037F")]
		public enum BoneType
		{
			[Token(Token = "0x4000F62")]
			Unassigned,
			[Token(Token = "0x4000F63")]
			Spine,
			[Token(Token = "0x4000F64")]
			Head,
			[Token(Token = "0x4000F65")]
			Arm,
			[Token(Token = "0x4000F66")]
			Leg,
			[Token(Token = "0x4000F67")]
			Tail,
			[Token(Token = "0x4000F68")]
			Eye
		}

		[Serializable]
		[Token(Token = "0x2000380")]
		public enum BoneSide
		{
			[Token(Token = "0x4000F6A")]
			Center,
			[Token(Token = "0x4000F6B")]
			Left,
			[Token(Token = "0x4000F6C")]
			Right
		}

		[Token(Token = "0x40008E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string[] typeLeft;

		[Token(Token = "0x40008E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string[] typeRight;

		[Token(Token = "0x40008E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string[] typeSpine;

		[Token(Token = "0x40008E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static string[] typeHead;

		[Token(Token = "0x40008E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static string[] typeArm;

		[Token(Token = "0x40008E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static string[] typeLeg;

		[Token(Token = "0x40008E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static string[] typeTail;

		[Token(Token = "0x40008EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static string[] typeEye;

		[Token(Token = "0x40008EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static string[] typeExclude;

		[Token(Token = "0x40008EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static string[] typeExcludeSpine;

		[Token(Token = "0x40008ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static string[] typeExcludeHead;

		[Token(Token = "0x40008EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static string[] typeExcludeArm;

		[Token(Token = "0x40008EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static string[] typeExcludeLeg;

		[Token(Token = "0x40008F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static string[] typeExcludeTail;

		[Token(Token = "0x40008F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static string[] typeExcludeEye;

		[Token(Token = "0x40008F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static string[] pelvis;

		[Token(Token = "0x40008F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static string[] hand;

		[Token(Token = "0x40008F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static string[] foot;

		[Token(Token = "0x6000E44")]
		[Address(RVA = "0x23194A4", Offset = "0x23194A4", VA = "0x23194A4")]
		public static Transform[] GetBonesOfType(BoneType boneType, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x6000E45")]
		[Address(RVA = "0x23197C8", Offset = "0x23197C8", VA = "0x23197C8")]
		public static Transform[] GetBonesOfSide(BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x6000E46")]
		[Address(RVA = "0x2319A3C", Offset = "0x2319A3C", VA = "0x2319A3C")]
		public static Transform[] GetBonesOfTypeAndSide(BoneType boneType, BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x6000E47")]
		[Address(RVA = "0x2319ABC", Offset = "0x2319ABC", VA = "0x2319ABC")]
		public static Transform GetFirstBoneOfTypeAndSide(BoneType boneType, BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x6000E48")]
		[Address(RVA = "0x2319B64", Offset = "0x2319B64", VA = "0x2319B64")]
		public static Transform GetNamingMatch(Transform[] transforms, params string[][] namings)
		{
			return null;
		}

		[Token(Token = "0x6000E49")]
		[Address(RVA = "0x231967C", Offset = "0x231967C", VA = "0x231967C")]
		public static BoneType GetBoneType(string boneName)
		{
			return default(BoneType);
		}

		[Token(Token = "0x6000E4A")]
		[Address(RVA = "0x23199A0", Offset = "0x23199A0", VA = "0x23199A0")]
		public static BoneSide GetBoneSide(string boneName)
		{
			return default(BoneSide);
		}

		[Token(Token = "0x6000E4B")]
		[Address(RVA = "0x231A394", Offset = "0x231A394", VA = "0x231A394")]
		public static Transform GetBone(Transform[] transforms, BoneType boneType, BoneSide boneSide = BoneSide.Center, params string[][] namings)
		{
			return null;
		}

		[Token(Token = "0x6000E4C")]
		[Address(RVA = "0x231A19C", Offset = "0x231A19C", VA = "0x231A19C")]
		private static bool isLeft(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E4D")]
		[Address(RVA = "0x231A298", Offset = "0x231A298", VA = "0x231A298")]
		private static bool isRight(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E4E")]
		[Address(RVA = "0x2319D7C", Offset = "0x2319D7C", VA = "0x2319D7C")]
		private static bool isSpine(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E4F")]
		[Address(RVA = "0x2319E2C", Offset = "0x2319E2C", VA = "0x2319E2C")]
		private static bool isHead(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E50")]
		[Address(RVA = "0x2319EDC", Offset = "0x2319EDC", VA = "0x2319EDC")]
		private static bool isArm(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E51")]
		[Address(RVA = "0x2319F8C", Offset = "0x2319F8C", VA = "0x2319F8C")]
		private static bool isLeg(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E52")]
		[Address(RVA = "0x231A03C", Offset = "0x231A03C", VA = "0x231A03C")]
		private static bool isTail(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E53")]
		[Address(RVA = "0x231A0EC", Offset = "0x231A0EC", VA = "0x231A0EC")]
		private static bool isEye(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E54")]
		[Address(RVA = "0x231A59C", Offset = "0x231A59C", VA = "0x231A59C")]
		private static bool isTypeExclude(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E55")]
		[Address(RVA = "0x2319C94", Offset = "0x2319C94", VA = "0x2319C94")]
		private static bool matchesNaming(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E56")]
		[Address(RVA = "0x231A50C", Offset = "0x231A50C", VA = "0x231A50C")]
		private static bool excludesNaming(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E57")]
		[Address(RVA = "0x231A608", Offset = "0x231A608", VA = "0x231A608")]
		private static bool matchesLastLetter(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E58")]
		[Address(RVA = "0x231A6DC", Offset = "0x231A6DC", VA = "0x231A6DC")]
		private static bool LastLetterIs(string boneName, string letter)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E59")]
		[Address(RVA = "0x231A494", Offset = "0x231A494", VA = "0x231A494")]
		private static string firstLetter(string boneName)
		{
			return null;
		}

		[Token(Token = "0x6000E5A")]
		[Address(RVA = "0x231A420", Offset = "0x231A420", VA = "0x231A420")]
		private static string lastLetter(string boneName)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000240")]
	public class BipedReferences
	{
		[Token(Token = "0x2000381")]
		public struct AutoDetectParams
		{
			[Token(Token = "0x4000F6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool legsParentInSpine;

			[Token(Token = "0x4000F6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
			public bool includeEyes;

			[Token(Token = "0x17000184")]
			public static AutoDetectParams Default
			{
				[Token(Token = "0x6001668")]
				[Address(RVA = "0x1A807E8", Offset = "0x1A807E8", VA = "0x1A807E8")]
				get
				{
					return default(AutoDetectParams);
				}
			}

			[Token(Token = "0x6001667")]
			[Address(RVA = "0x1A807D4", Offset = "0x1A807D4", VA = "0x1A807D4")]
			public AutoDetectParams(bool legsParentInSpine, bool includeEyes)
			{
			}
		}

		[Token(Token = "0x40008F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform root;

		[Token(Token = "0x40008F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform pelvis;

		[Token(Token = "0x40008F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform leftThigh;

		[Token(Token = "0x40008F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftCalf;

		[Token(Token = "0x40008F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform leftFoot;

		[Token(Token = "0x40008FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform rightThigh;

		[Token(Token = "0x40008FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform rightCalf;

		[Token(Token = "0x40008FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform rightFoot;

		[Token(Token = "0x40008FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform leftUpperArm;

		[Token(Token = "0x40008FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform leftForearm;

		[Token(Token = "0x40008FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform leftHand;

		[Token(Token = "0x4000900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform rightUpperArm;

		[Token(Token = "0x4000901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform rightForearm;

		[Token(Token = "0x4000902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform rightHand;

		[Token(Token = "0x4000903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform head;

		[Token(Token = "0x4000904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform[] spine;

		[Token(Token = "0x4000905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Transform[] eyes;

		[Token(Token = "0x170000C4")]
		public virtual bool isFilled
		{
			[Token(Token = "0x6000E5C")]
			[Address(RVA = "0x231CF44", Offset = "0x231CF44", VA = "0x231CF44", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C5")]
		public bool isEmpty
		{
			[Token(Token = "0x6000E5D")]
			[Address(RVA = "0x231D32C", Offset = "0x231D32C", VA = "0x231D32C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000E5E")]
		[Address(RVA = "0x231D33C", Offset = "0x231D33C", VA = "0x231D33C", Slot = "5")]
		public virtual bool IsEmpty(bool includeRoot)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E5F")]
		[Address(RVA = "0x231D764", Offset = "0x231D764", VA = "0x231D764", Slot = "6")]
		public virtual bool Contains(Transform t, bool ignoreRoot = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E60")]
		[Address(RVA = "0x231DB98", Offset = "0x231DB98", VA = "0x231DB98")]
		public static bool AutoDetectReferences(ref BipedReferences references, Transform root, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E61")]
		[Address(RVA = "0x231E268", Offset = "0x231E268", VA = "0x231E268")]
		public static void DetectReferencesByNaming(ref BipedReferences references, Transform root, AutoDetectParams autoDetectParams)
		{
		}

		[Token(Token = "0x6000E62")]
		[Address(RVA = "0x231DDC4", Offset = "0x231DDC4", VA = "0x231DDC4")]
		public static void AssignHumanoidReferences(ref BipedReferences references, Animator animator, AutoDetectParams autoDetectParams)
		{
		}

		[Token(Token = "0x6000E63")]
		[Address(RVA = "0x2318218", Offset = "0x2318218", VA = "0x2318218")]
		public static bool SetupError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E64")]
		[Address(RVA = "0x231EAEC", Offset = "0x231EAEC", VA = "0x231EAEC")]
		public static bool SetupWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E65")]
		[Address(RVA = "0x231F0A8", Offset = "0x231F0A8", VA = "0x231F0A8")]
		private static bool IsNeckBone(Transform bone, Transform leftUpperArm)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E66")]
		[Address(RVA = "0x231EE88", Offset = "0x231EE88", VA = "0x231EE88")]
		private static bool AddBoneToEyes(Transform bone, ref BipedReferences references, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E67")]
		[Address(RVA = "0x231ED04", Offset = "0x231ED04", VA = "0x231ED04")]
		private static bool AddBoneToSpine(Transform bone, ref BipedReferences references, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E68")]
		[Address(RVA = "0x231EB8C", Offset = "0x231EB8C", VA = "0x231EB8C")]
		private static void DetectLimb(BipedNaming.BoneType boneType, BipedNaming.BoneSide boneSide, ref Transform firstBone, ref Transform secondBone, ref Transform lastBone, Transform[] transforms)
		{
		}

		[Token(Token = "0x6000E69")]
		[Address(RVA = "0x231EF94", Offset = "0x231EF94", VA = "0x231EF94")]
		private static void AddBoneToHierarchy(ref Transform[] bones, Transform transform)
		{
		}

		[Token(Token = "0x6000E6A")]
		[Address(RVA = "0x231F1A0", Offset = "0x231F1A0", VA = "0x231F1A0")]
		private static bool LimbError(Transform bone1, Transform bone2, Transform bone3, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E6B")]
		[Address(RVA = "0x231FD88", Offset = "0x231FD88", VA = "0x231FD88")]
		private static bool LimbWarning(Transform bone1, Transform bone2, Transform bone3, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E6C")]
		[Address(RVA = "0x231F7F8", Offset = "0x231F7F8", VA = "0x231F7F8")]
		private static bool SpineError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E6D")]
		[Address(RVA = "0x2320084", Offset = "0x2320084", VA = "0x2320084")]
		private static bool SpineWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E6E")]
		[Address(RVA = "0x231FB70", Offset = "0x231FB70", VA = "0x231FB70")]
		private static bool EyesError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E6F")]
		[Address(RVA = "0x232008C", Offset = "0x232008C", VA = "0x232008C")]
		private static bool EyesWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E70")]
		[Address(RVA = "0x2320094", Offset = "0x2320094", VA = "0x2320094")]
		private static bool RootHeightWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E71")]
		[Address(RVA = "0x2320268", Offset = "0x2320268", VA = "0x2320268")]
		private static bool FacingAxisWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E72")]
		[Address(RVA = "0x2320430", Offset = "0x2320430", VA = "0x2320430")]
		private static float GetVerticalOffset(Vector3 p1, Vector3 p2, Quaternion rotation)
		{
			return default(float);
		}

		[Token(Token = "0x6000E73")]
		[Address(RVA = "0x2318698", Offset = "0x2318698", VA = "0x2318698")]
		public BipedReferences()
		{
		}
	}
	[Token(Token = "0x2000241")]
	public class Comments : MonoBehaviour
	{
		[Token(Token = "0x4000906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Multiline]
		public string text;

		[Token(Token = "0x6000E74")]
		[Address(RVA = "0x1698D24", Offset = "0x1698D24", VA = "0x1698D24")]
		public Comments()
		{
		}
	}
	[Token(Token = "0x2000242")]
	public class DemoGUIMessage : MonoBehaviour
	{
		[Token(Token = "0x4000907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string text;

		[Token(Token = "0x4000908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color color;

		[Token(Token = "0x6000E75")]
		[Address(RVA = "0x16A616C", Offset = "0x16A616C", VA = "0x16A616C")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000E76")]
		[Address(RVA = "0x16A62B4", Offset = "0x16A62B4", VA = "0x16A62B4")]
		public DemoGUIMessage()
		{
		}
	}
	[Token(Token = "0x2000243")]
	public class Hierarchy
	{
		[Token(Token = "0x6000E77")]
		[Address(RVA = "0x28AB0F0", Offset = "0x28AB0F0", VA = "0x28AB0F0")]
		public static bool HierarchyIsValid(Transform[] bones)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E78")]
		[Address(RVA = "0x28AB2DC", Offset = "0x28AB2DC", VA = "0x28AB2DC")]
		public static UnityEngine.Object ContainsDuplicate(UnityEngine.Object[] objects)
		{
			return null;
		}

		[Token(Token = "0x6000E79")]
		[Address(RVA = "0x28AB188", Offset = "0x28AB188", VA = "0x28AB188")]
		public static bool IsAncestor(Transform transform, Transform ancestor)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E7A")]
		[Address(RVA = "0x28AB3FC", Offset = "0x28AB3FC", VA = "0x28AB3FC")]
		public static bool ContainsChild(Transform transform, Transform child)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E7B")]
		[Address(RVA = "0x28AB528", Offset = "0x28AB528", VA = "0x28AB528")]
		public static void AddAncestors(Transform transform, Transform blocker, ref Transform[] array)
		{
		}

		[Token(Token = "0x6000E7C")]
		[Address(RVA = "0x28AB77C", Offset = "0x28AB77C", VA = "0x28AB77C")]
		public static Transform GetAncestor(Transform transform, int minChildCount)
		{
			return null;
		}

		[Token(Token = "0x6000E7D")]
		[Address(RVA = "0x28AB884", Offset = "0x28AB884", VA = "0x28AB884")]
		public static Transform GetFirstCommonAncestor(Transform t1, Transform t2)
		{
			return null;
		}

		[Token(Token = "0x6000E7E")]
		[Address(RVA = "0x28AB9F8", Offset = "0x28AB9F8", VA = "0x28AB9F8")]
		public static Transform GetFirstCommonAncestor(Transform[] transforms)
		{
			return null;
		}

		[Token(Token = "0x6000E7F")]
		[Address(RVA = "0x28ABDD4", Offset = "0x28ABDD4", VA = "0x28ABDD4")]
		public static Transform GetFirstCommonAncestorRecursive(Transform transform, Transform[] transforms)
		{
			return null;
		}

		[Token(Token = "0x6000E80")]
		[Address(RVA = "0x28ABB98", Offset = "0x28ABB98", VA = "0x28ABB98")]
		public static bool IsCommonAncestor(Transform transform, Transform[] transforms)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E81")]
		[Address(RVA = "0x28ABF88", Offset = "0x28ABF88", VA = "0x28ABF88")]
		public Hierarchy()
		{
		}
	}
	[Token(Token = "0x2000244")]
	public class InspectorComment : PropertyAttribute
	{
		[Token(Token = "0x4000909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string name;

		[Token(Token = "0x400090A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string color;

		[Token(Token = "0x6000E82")]
		[Address(RVA = "0x22E7270", Offset = "0x22E7270", VA = "0x22E7270")]
		public InspectorComment(string name)
		{
		}

		[Token(Token = "0x6000E83")]
		[Address(RVA = "0x22E72FC", Offset = "0x22E72FC", VA = "0x22E72FC")]
		public InspectorComment(string name, string color)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000245")]
	public enum InterpolationMode
	{
		[Token(Token = "0x400090C")]
		None,
		[Token(Token = "0x400090D")]
		InOutCubic,
		[Token(Token = "0x400090E")]
		InOutQuintic,
		[Token(Token = "0x400090F")]
		InOutSine,
		[Token(Token = "0x4000910")]
		InQuintic,
		[Token(Token = "0x4000911")]
		InQuartic,
		[Token(Token = "0x4000912")]
		InCubic,
		[Token(Token = "0x4000913")]
		InQuadratic,
		[Token(Token = "0x4000914")]
		InElastic,
		[Token(Token = "0x4000915")]
		InElasticSmall,
		[Token(Token = "0x4000916")]
		InElasticBig,
		[Token(Token = "0x4000917")]
		InSine,
		[Token(Token = "0x4000918")]
		InBack,
		[Token(Token = "0x4000919")]
		OutQuintic,
		[Token(Token = "0x400091A")]
		OutQuartic,
		[Token(Token = "0x400091B")]
		OutCubic,
		[Token(Token = "0x400091C")]
		OutInCubic,
		[Token(Token = "0x400091D")]
		OutInQuartic,
		[Token(Token = "0x400091E")]
		OutElastic,
		[Token(Token = "0x400091F")]
		OutElasticSmall,
		[Token(Token = "0x4000920")]
		OutElasticBig,
		[Token(Token = "0x4000921")]
		OutSine,
		[Token(Token = "0x4000922")]
		OutBack,
		[Token(Token = "0x4000923")]
		OutBackCubic,
		[Token(Token = "0x4000924")]
		OutBackQuartic,
		[Token(Token = "0x4000925")]
		BackInCubic,
		[Token(Token = "0x4000926")]
		BackInQuartic
	}
	[Token(Token = "0x2000246")]
	public class Interp
	{
		[Token(Token = "0x6000E84")]
		[Address(RVA = "0x22EADBC", Offset = "0x22EADBC", VA = "0x22EADBC")]
		public static float Float(float t, InterpolationMode mode)
		{
			return default(float);
		}

		[Token(Token = "0x6000E85")]
		[Address(RVA = "0x22F0BB0", Offset = "0x22F0BB0", VA = "0x22F0BB0")]
		public static Vector3 V3(Vector3 v1, Vector3 v2, float t, InterpolationMode mode)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000E86")]
		[Address(RVA = "0x22F0C24", Offset = "0x22F0C24", VA = "0x22F0C24")]
		public static float LerpValue(float value, float target, float increaseSpeed, float decreaseSpeed)
		{
			return default(float);
		}

		[Token(Token = "0x6000E87")]
		[Address(RVA = "0x22F0618", Offset = "0x22F0618", VA = "0x22F0618")]
		private static float None(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000E88")]
		[Address(RVA = "0x22F0624", Offset = "0x22F0624", VA = "0x22F0624")]
		private static float InOutCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000E89")]
		[Address(RVA = "0x22F0648", Offset = "0x22F0648", VA = "0x22F0648")]
		private static float InOutQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000E8A")]
		[Address(RVA = "0x22F0684", Offset = "0x22F0684", VA = "0x22F0684")]
		private static float InQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000E8B")]
		[Address(RVA = "0x22F069C", Offset = "0x22F069C", VA = "0x22F069C")]
		private static float InQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000E8C")]
		[Address(RVA = "0x22F06B0", Offset = "0x22F06B0", VA = "0x22F06B0")]
		private static float InCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000E8D")]
		[Address(RVA = "0x22F06C4", Offset = "0x22F06C4", VA = "0x22F06C4")]
		private static float InQuadratic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000E8E")]
		[Address(RVA = "0x22F06D4", Offset = "0x22F06D4", VA = "0x22F06D4")]
		private static float OutQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000E8F")]
		[Address(RVA = "0x22F071C", Offset = "0x22F071C", VA = "0x22F071C")]
		private static float OutQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000E90")]
		[Address(RVA = "0x22F0754", Offset = "0x22F0754", VA = "0x22F0754")]
		private static float OutCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000E91")]
		[Address(RVA = "0x22F077C", Offset = "0x22F077C", VA = "0x22F077C")]
		private static float OutInCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000E92")]
		[Address(RVA = "0x22F0CB0", Offset = "0x22F0CB0", VA = "0x22F0CB0")]
		private static float OutInQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000E93")]
		[Address(RVA = "0x22F07B0", Offset = "0x22F07B0", VA = "0x22F07B0")]
		private static float BackInCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000E94")]
		[Address(RVA = "0x22F07D8", Offset = "0x22F07D8", VA = "0x22F07D8")]
		private static float BackInQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000E95")]
		[Address(RVA = "0x22F0808", Offset = "0x22F0808", VA = "0x22F0808")]
		private static float OutBackCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000E96")]
		[Address(RVA = "0x22F083C", Offset = "0x22F083C", VA = "0x22F083C")]
		private static float OutBackQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000E97")]
		[Address(RVA = "0x22F0880", Offset = "0x22F0880", VA = "0x22F0880")]
		private static float OutElasticSmall(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000E98")]
		[Address(RVA = "0x22F08E4", Offset = "0x22F08E4", VA = "0x22F08E4")]
		private static float OutElasticBig(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000E99")]
		[Address(RVA = "0x22F0948", Offset = "0x22F0948", VA = "0x22F0948")]
		private static float InElasticSmall(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000E9A")]
		[Address(RVA = "0x22F099C", Offset = "0x22F099C", VA = "0x22F099C")]
		private static float InElasticBig(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0x22F09F0", Offset = "0x22F09F0", VA = "0x22F09F0")]
		private static float InSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0x22F0A2C", Offset = "0x22F0A2C", VA = "0x22F0A2C")]
		private static float OutSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0x22F0A64", Offset = "0x22F0A64", VA = "0x22F0A64")]
		private static float InOutSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000E9E")]
		[Address(RVA = "0x22F0CE4", Offset = "0x22F0CE4", VA = "0x22F0CE4")]
		private static float InElastic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000E9F")]
		[Address(RVA = "0x22F0AAC", Offset = "0x22F0AAC", VA = "0x22F0AAC")]
		private static float OutElastic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000EA0")]
		[Address(RVA = "0x22F0B40", Offset = "0x22F0B40", VA = "0x22F0B40")]
		private static float InBack(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000EA1")]
		[Address(RVA = "0x22F0B70", Offset = "0x22F0B70", VA = "0x22F0B70")]
		private static float OutBack(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000EA2")]
		[Address(RVA = "0x22F0D78", Offset = "0x22F0D78", VA = "0x22F0D78")]
		public Interp()
		{
		}
	}
	[Token(Token = "0x2000247")]
	public static class LayerMaskExtensions
	{
		[Token(Token = "0x6000EA3")]
		[Address(RVA = "0x22F21CC", Offset = "0x22F21CC", VA = "0x22F21CC")]
		public static bool Contains(LayerMask mask, int layer)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EA4")]
		[Address(RVA = "0x22F2224", Offset = "0x22F2224", VA = "0x22F2224")]
		public static LayerMask Create(params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000EA5")]
		[Address(RVA = "0x22F22F0", Offset = "0x22F22F0", VA = "0x22F22F0")]
		public static LayerMask Create(params int[] layerNumbers)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000EA6")]
		[Address(RVA = "0x22F223C", Offset = "0x22F223C", VA = "0x22F223C")]
		public static LayerMask NamesToMask(params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000EA7")]
		[Address(RVA = "0x22F2308", Offset = "0x22F2308", VA = "0x22F2308")]
		public static LayerMask LayerNumbersToMask(params int[] layerNumbers)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000EA8")]
		[Address(RVA = "0x22F23AC", Offset = "0x22F23AC", VA = "0x22F23AC")]
		public static LayerMask Inverse(this LayerMask original)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000EA9")]
		[Address(RVA = "0x22F23D8", Offset = "0x22F23D8", VA = "0x22F23D8")]
		public static LayerMask AddToMask(this LayerMask original, params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0x22F2428", Offset = "0x22F2428", VA = "0x22F2428")]
		public static LayerMask RemoveFromMask(this LayerMask original, params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000EAB")]
		[Address(RVA = "0x22F2494", Offset = "0x22F2494", VA = "0x22F2494")]
		public static string[] MaskToNames(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x6000EAC")]
		[Address(RVA = "0x22F25A8", Offset = "0x22F25A8", VA = "0x22F25A8")]
		public static int[] MaskToNumbers(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x6000EAD")]
		[Address(RVA = "0x22F26A0", Offset = "0x22F26A0", VA = "0x22F26A0")]
		public static string MaskToString(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x6000EAE")]
		[Address(RVA = "0x22F26FC", Offset = "0x22F26FC", VA = "0x22F26FC")]
		public static string MaskToString(this LayerMask original, string delimiter)
		{
			return null;
		}
	}
	[Token(Token = "0x2000248")]
	public abstract class LazySingleton<T> : MonoBehaviour where T : LazySingleton<T>
	{
		[Token(Token = "0x4000927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T sInstance;

		[Token(Token = "0x170000C6")]
		public static bool hasInstance
		{
			[Token(Token = "0x6000EAF")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C7")]
		public static T instance
		{
			[Token(Token = "0x6000EB0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EB1")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000EB2")]
		protected LazySingleton()
		{
		}
	}
	[Token(Token = "0x2000249")]
	public enum ShowIfMode
	{
		[Token(Token = "0x4000929")]
		Disabled,
		[Token(Token = "0x400092A")]
		Hidden
	}
	[Token(Token = "0x200024A")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xA7DA68", Offset = "0xA7DA68")]
	public class ShowIfAttribute : PropertyAttribute
	{
		[Token(Token = "0x400092B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7FA88", Offset = "0xA7FA88")]
		private string <propName>k__BackingField;

		[Token(Token = "0x400092C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7FA98", Offset = "0xA7FA98")]
		private object <propValue>k__BackingField;

		[Token(Token = "0x400092D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7FAA8", Offset = "0xA7FAA8")]
		private object <otherPropValue>k__BackingField;

		[Token(Token = "0x400092E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7FAB8", Offset = "0xA7FAB8")]
		private bool <indent>k__BackingField;

		[Token(Token = "0x400092F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7FAC8", Offset = "0xA7FAC8")]
		private ShowIfMode <mode>k__BackingField;

		[Token(Token = "0x170000C8")]
		public string propName
		{
			[Token(Token = "0x6000EB4")]
			[Address(RVA = "0x1631178", Offset = "0x1631178", VA = "0x1631178")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A65C", Offset = "0xA8A65C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EB5")]
			[Address(RVA = "0x1631180", Offset = "0x1631180", VA = "0x1631180")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A66C", Offset = "0xA8A66C")]
			protected set
			{
			}
		}

		[Token(Token = "0x170000C9")]
		public object propValue
		{
			[Token(Token = "0x6000EB6")]
			[Address(RVA = "0x1631188", Offset = "0x1631188", VA = "0x1631188")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A67C", Offset = "0xA8A67C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EB7")]
			[Address(RVA = "0x1631190", Offset = "0x1631190", VA = "0x1631190")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A68C", Offset = "0xA8A68C")]
			protected set
			{
			}
		}

		[Token(Token = "0x170000CA")]
		public object otherPropValue
		{
			[Token(Token = "0x6000EB8")]
			[Address(RVA = "0x1631198", Offset = "0x1631198", VA = "0x1631198")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A69C", Offset = "0xA8A69C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000EB9")]
			[Address(RVA = "0x16311A0", Offset = "0x16311A0", VA = "0x16311A0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A6AC", Offset = "0xA8A6AC")]
			protected set
			{
			}
		}

		[Token(Token = "0x170000CB")]
		public bool indent
		{
			[Token(Token = "0x6000EBA")]
			[Address(RVA = "0x16311A8", Offset = "0x16311A8", VA = "0x16311A8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A6BC", Offset = "0xA8A6BC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000EBB")]
			[Address(RVA = "0x16311B0", Offset = "0x16311B0", VA = "0x16311B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A6CC", Offset = "0xA8A6CC")]
			private set
			{
			}
		}

		[Token(Token = "0x170000CC")]
		public ShowIfMode mode
		{
			[Token(Token = "0x6000EBC")]
			[Address(RVA = "0x16311BC", Offset = "0x16311BC", VA = "0x16311BC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A6DC", Offset = "0xA8A6DC")]
			get
			{
				return default(ShowIfMode);
			}
			[Token(Token = "0x6000EBD")]
			[Address(RVA = "0x16311C4", Offset = "0x16311C4", VA = "0x16311C4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A6EC", Offset = "0xA8A6EC")]
			protected set
			{
			}
		}

		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0x16311CC", Offset = "0x16311CC", VA = "0x16311CC")]
		public ShowIfAttribute(string propertyName, [Optional] object propertyValue, [Optional] object otherPropertyValue, bool indent = false, ShowIfMode mode = ShowIfMode.Hidden)
		{
		}
	}
	[Token(Token = "0x200024B")]
	[AttributeAttribute(Name = "AttributeUsageAttribute", RVA = "0xA7DAA0", Offset = "0xA7DAA0")]
	public class ShowRangeIfAttribute : ShowIfAttribute
	{
		[Token(Token = "0x4000930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7FAD8", Offset = "0xA7FAD8")]
		private float <min>k__BackingField;

		[Token(Token = "0x4000931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7FAE8", Offset = "0xA7FAE8")]
		private float <max>k__BackingField;

		[Token(Token = "0x170000CD")]
		public float min
		{
			[Token(Token = "0x6000EBF")]
			[Address(RVA = "0x16313E4", Offset = "0x16313E4", VA = "0x16313E4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A6FC", Offset = "0xA8A6FC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EC0")]
			[Address(RVA = "0x16313EC", Offset = "0x16313EC", VA = "0x16313EC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A70C", Offset = "0xA8A70C")]
			private set
			{
			}
		}

		[Token(Token = "0x170000CE")]
		public float max
		{
			[Token(Token = "0x6000EC1")]
			[Address(RVA = "0x16313F4", Offset = "0x16313F4", VA = "0x16313F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A71C", Offset = "0xA8A71C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000EC2")]
			[Address(RVA = "0x16313FC", Offset = "0x16313FC", VA = "0x16313FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A72C", Offset = "0xA8A72C")]
			private set
			{
			}
		}

		[Token(Token = "0x6000EC3")]
		[Address(RVA = "0x1631404", Offset = "0x1631404", VA = "0x1631404")]
		public ShowRangeIfAttribute(float min, float max, string propertyName, [Optional] object propertyValue, [Optional] object otherPropertyValue, bool indent = false, ShowIfMode mode = ShowIfMode.Hidden)
		{
		}
	}
	[Token(Token = "0x200024C")]
	public class ShowLargeHeaderIf : ShowIfAttribute
	{
		[Token(Token = "0x4000932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string name;

		[Token(Token = "0x4000933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string color;

		[Token(Token = "0x6000EC4")]
		[Address(RVA = "0x1631250", Offset = "0x1631250", VA = "0x1631250")]
		public ShowLargeHeaderIf(string name, string propertyName, [Optional] object propertyValue, [Optional] object otherPropertyValue, bool indent = false, ShowIfMode mode = ShowIfMode.Hidden)
		{
		}

		[Token(Token = "0x6000EC5")]
		[Address(RVA = "0x1631318", Offset = "0x1631318", VA = "0x1631318")]
		public ShowLargeHeaderIf(string name, string color, string propertyName, [Optional] object propertyValue, [Optional] object otherPropertyValue, bool indent = false, ShowIfMode mode = ShowIfMode.Hidden)
		{
		}
	}
	[Token(Token = "0x200024D")]
	public class LargeHeader : PropertyAttribute
	{
		[Token(Token = "0x4000934")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string name;

		[Token(Token = "0x4000935")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string color;

		[Token(Token = "0x6000EC6")]
		[Address(RVA = "0x22F20B0", Offset = "0x22F20B0", VA = "0x22F20B0")]
		public LargeHeader(string name)
		{
		}

		[Token(Token = "0x6000EC7")]
		[Address(RVA = "0x22F213C", Offset = "0x22F213C", VA = "0x22F213C")]
		public LargeHeader(string name, string color)
		{
		}
	}
	[Token(Token = "0x200024E")]
	public static class QuaTools
	{
		[Token(Token = "0x6000EC8")]
		[Address(RVA = "0x10BCE70", Offset = "0x10BCE70", VA = "0x10BCE70")]
		public static float GetYaw(Quaternion space, Vector3 forward)
		{
			return default(float);
		}

		[Token(Token = "0x6000EC9")]
		[Address(RVA = "0x10BCECC", Offset = "0x10BCECC", VA = "0x10BCECC")]
		public static float GetPitch(Quaternion space, Vector3 forward)
		{
			return default(float);
		}

		[Token(Token = "0x6000ECA")]
		[Address(RVA = "0x10BCF5C", Offset = "0x10BCF5C", VA = "0x10BCF5C")]
		public static float GetBank(Quaternion space, Vector3 forward, Vector3 up)
		{
			return default(float);
		}

		[Token(Token = "0x6000ECB")]
		[Address(RVA = "0x10BD0BC", Offset = "0x10BD0BC", VA = "0x10BD0BC")]
		public static float GetYaw(Quaternion space, Quaternion rotation)
		{
			return default(float);
		}

		[Token(Token = "0x6000ECC")]
		[Address(RVA = "0x10BD178", Offset = "0x10BD178", VA = "0x10BD178")]
		public static float GetPitch(Quaternion space, Quaternion rotation)
		{
			return default(float);
		}

		[Token(Token = "0x6000ECD")]
		[Address(RVA = "0x10BD234", Offset = "0x10BD234", VA = "0x10BD234")]
		public static float GetBank(Quaternion space, Quaternion rotation)
		{
			return default(float);
		}

		[Token(Token = "0x6000ECE")]
		[Address(RVA = "0x10BD3E0", Offset = "0x10BD3E0", VA = "0x10BD3E0")]
		public static Quaternion Lerp(Quaternion fromRotation, Quaternion toRotation, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000ECF")]
		[Address(RVA = "0x10BD430", Offset = "0x10BD430", VA = "0x10BD430")]
		public static Quaternion Slerp(Quaternion fromRotation, Quaternion toRotation, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000ED0")]
		[Address(RVA = "0x10BD480", Offset = "0x10BD480", VA = "0x10BD480")]
		public static Quaternion LinearBlend(Quaternion q, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000ED1")]
		[Address(RVA = "0x10BD528", Offset = "0x10BD528", VA = "0x10BD528")]
		public static Quaternion SphericalBlend(Quaternion q, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000ED2")]
		[Address(RVA = "0x10BD5D0", Offset = "0x10BD5D0", VA = "0x10BD5D0")]
		public static Quaternion FromToAroundAxis(Vector3 fromDirection, Vector3 toDirection, Vector3 axis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000ED3")]
		[Address(RVA = "0x10BD6B0", Offset = "0x10BD6B0", VA = "0x10BD6B0")]
		public static Quaternion RotationToLocalSpace(Quaternion space, Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000ED4")]
		[Address(RVA = "0x10BD704", Offset = "0x10BD704", VA = "0x10BD704")]
		public static Quaternion FromToRotation(Quaternion from, Quaternion to)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000ED5")]
		[Address(RVA = "0x10BB7F0", Offset = "0x10BB7F0", VA = "0x10BB7F0")]
		public static Vector3 GetAxis(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000ED6")]
		[Address(RVA = "0x10BD7D8", Offset = "0x10BD7D8", VA = "0x10BD7D8")]
		public static Quaternion ClampRotation(Quaternion rotation, float clampWeight, int clampSmoothing)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000ED7")]
		[Address(RVA = "0x10BD968", Offset = "0x10BD968", VA = "0x10BD968")]
		public static float ClampAngle(float angle, float clampWeight, int clampSmoothing)
		{
			return default(float);
		}

		[Token(Token = "0x6000ED8")]
		[Address(RVA = "0x10BDA5C", Offset = "0x10BDA5C", VA = "0x10BDA5C")]
		public static Quaternion MatchRotation(Quaternion targetRotation, Vector3 targetAxis1, Vector3 targetAxis2, Vector3 axis1, Vector3 axis2)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000ED9")]
		[Address(RVA = "0x10BDB68", Offset = "0x10BDB68", VA = "0x10BDB68")]
		public static Vector3 ToBiPolar(Vector3 euler)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000EDA")]
		[Address(RVA = "0x10BDC54", Offset = "0x10BDC54", VA = "0x10BDC54")]
		public static float ToBiPolar(float angle)
		{
			return default(float);
		}

		[Token(Token = "0x6000EDB")]
		[Address(RVA = "0x10BDCB0", Offset = "0x10BDCB0", VA = "0x10BDCB0")]
		public static Quaternion MirrorYZ(Quaternion r, Quaternion space)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000EDC")]
		[Address(RVA = "0x10BDDEC", Offset = "0x10BDDEC", VA = "0x10BDDEC")]
		public static Quaternion MirrorYZ(Quaternion r)
		{
			return default(Quaternion);
		}
	}
	[Token(Token = "0x200024F")]
	public abstract class Singleton<T> : MonoBehaviour where T : Singleton<T>
	{
		[Token(Token = "0x4000936")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T sInstance;

		[Token(Token = "0x170000CF")]
		public static T instance
		{
			[Token(Token = "0x6000EDD")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EDE")]
		public static void Clear()
		{
		}

		[Token(Token = "0x6000EDF")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000EE0")]
		protected Singleton()
		{
		}
	}
	[Token(Token = "0x2000250")]
	public class SolverManager : MonoBehaviour
	{
		[Token(Token = "0x4000937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7FAF8", Offset = "0xA7FAF8")]
		public bool fixTransforms;

		[Token(Token = "0x4000938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x4000939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Animation legacy;

		[Token(Token = "0x400093A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool updateFrame;

		[Token(Token = "0x400093B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool componentInitiated;

		[Token(Token = "0x400093C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool skipSolverUpdate;

		[Token(Token = "0x170000D0")]
		private bool animatePhysics
		{
			[Token(Token = "0x6000EE8")]
			[Address(RVA = "0x16324A8", Offset = "0x16324A8", VA = "0x16324A8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000D1")]
		private bool isAnimated
		{
			[Token(Token = "0x6000EEC")]
			[Address(RVA = "0x16327F4", Offset = "0x16327F4", VA = "0x16327F4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000EE2")]
		[Address(RVA = "0x1632368", Offset = "0x1632368", VA = "0x1632368")]
		public void Disable()
		{
		}

		[Token(Token = "0x6000EE3")]
		[Address(RVA = "0x1632408", Offset = "0x1632408", VA = "0x1632408", Slot = "4")]
		protected virtual void InitiateSolver()
		{
		}

		[Token(Token = "0x6000EE4")]
		[Address(RVA = "0x163240C", Offset = "0x163240C", VA = "0x163240C", Slot = "5")]
		protected virtual void UpdateSolver()
		{
		}

		[Token(Token = "0x6000EE5")]
		[Address(RVA = "0x1632410", Offset = "0x1632410", VA = "0x1632410", Slot = "6")]
		protected virtual void FixTransforms()
		{
		}

		[Token(Token = "0x6000EE6")]
		[Address(RVA = "0x1632414", Offset = "0x1632414", VA = "0x1632414")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000EE7")]
		[Address(RVA = "0x16324A4", Offset = "0x16324A4", VA = "0x16324A4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EE9")]
		[Address(RVA = "0x163244C", Offset = "0x163244C", VA = "0x163244C")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0x16327A8", Offset = "0x16327A8", VA = "0x16327A8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EEB")]
		[Address(RVA = "0x1632594", Offset = "0x1632594", VA = "0x1632594")]
		private void FindAnimatorRecursive(Transform t, bool findInChildren)
		{
		}

		[Token(Token = "0x6000EED")]
		[Address(RVA = "0x16328AC", Offset = "0x16328AC", VA = "0x16328AC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000EEE")]
		[Address(RVA = "0x1632908", Offset = "0x1632908", VA = "0x1632908")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000EEF")]
		[Address(RVA = "0x1632964", Offset = "0x1632964", VA = "0x1632964")]
		public void UpdateSolverExternal()
		{
		}

		[Token(Token = "0x6000EF0")]
		[Address(RVA = "0x16329AC", Offset = "0x16329AC", VA = "0x16329AC")]
		public SolverManager()
		{
		}
	}
	[Token(Token = "0x2000251")]
	public class TriggerEventBroadcaster : MonoBehaviour
	{
		[Token(Token = "0x400093D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject target;

		[Token(Token = "0x6000EF1")]
		[Address(RVA = "0x1A673D4", Offset = "0x1A673D4", VA = "0x1A673D4")]
		private void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x6000EF2")]
		[Address(RVA = "0x1A67494", Offset = "0x1A67494", VA = "0x1A67494")]
		private void OnTriggerStay(Collider collider)
		{
		}

		[Token(Token = "0x6000EF3")]
		[Address(RVA = "0x1A67554", Offset = "0x1A67554", VA = "0x1A67554")]
		private void OnTriggerExit(Collider collider)
		{
		}

		[Token(Token = "0x6000EF4")]
		[Address(RVA = "0x1A67614", Offset = "0x1A67614", VA = "0x1A67614")]
		public TriggerEventBroadcaster()
		{
		}
	}
	[Token(Token = "0x2000252")]
	public static class V2Tools
	{
		[Token(Token = "0x6000EF5")]
		[Address(RVA = "0x1A6CFB8", Offset = "0x1A6CFB8", VA = "0x1A6CFB8")]
		public static Vector2 XZ(Vector3 v)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000EF6")]
		[Address(RVA = "0x1A6CFC0", Offset = "0x1A6CFC0", VA = "0x1A6CFC0")]
		public static float DeltaAngle(Vector2 dir1, Vector2 dir2)
		{
			return default(float);
		}

		[Token(Token = "0x6000EF7")]
		[Address(RVA = "0x1A6D010", Offset = "0x1A6D010", VA = "0x1A6D010")]
		public static float DeltaAngleXZ(Vector3 dir1, Vector3 dir2)
		{
			return default(float);
		}

		[Token(Token = "0x6000EF8")]
		[Address(RVA = "0x1A6D064", Offset = "0x1A6D064", VA = "0x1A6D064")]
		public static bool LineCircleIntersect(Vector2 p1, Vector2 p2, Vector2 c, float r)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EF9")]
		[Address(RVA = "0x1A6D13C", Offset = "0x1A6D13C", VA = "0x1A6D13C")]
		public static bool RayCircleIntersect(Vector2 p1, Vector2 dir, Vector2 c, float r)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000253")]
	public static class V3Tools
	{
		[Token(Token = "0x6000EFA")]
		[Address(RVA = "0x1A6D1D0", Offset = "0x1A6D1D0", VA = "0x1A6D1D0")]
		public static float GetYaw(Vector3 forward)
		{
			return default(float);
		}

		[Token(Token = "0x6000EFB")]
		[Address(RVA = "0x1A6D1F4", Offset = "0x1A6D1F4", VA = "0x1A6D1F4")]
		public static float GetPitch(Vector3 forward)
		{
			return default(float);
		}

		[Token(Token = "0x6000EFC")]
		[Address(RVA = "0x1A6D23C", Offset = "0x1A6D23C", VA = "0x1A6D23C")]
		public static float GetBank(Vector3 forward, Vector3 up)
		{
			return default(float);
		}

		[Token(Token = "0x6000EFD")]
		[Address(RVA = "0x1A6D2C8", Offset = "0x1A6D2C8", VA = "0x1A6D2C8")]
		public static float GetYaw(Vector3 spaceForward, Vector3 spaceUp, Vector3 forward)
		{
			return default(float);
		}

		[Token(Token = "0x6000EFE")]
		[Address(RVA = "0x1A6D328", Offset = "0x1A6D328", VA = "0x1A6D328")]
		public static float GetPitch(Vector3 spaceForward, Vector3 spaceUp, Vector3 forward)
		{
			return default(float);
		}

		[Token(Token = "0x6000EFF")]
		[Address(RVA = "0x1A6D388", Offset = "0x1A6D388", VA = "0x1A6D388")]
		public static float GetBank(Vector3 spaceForward, Vector3 spaceUp, Vector3 forward, Vector3 up)
		{
			return default(float);
		}

		[Token(Token = "0x6000F00")]
		[Address(RVA = "0x1A6D4A4", Offset = "0x1A6D4A4", VA = "0x1A6D4A4")]
		public static Vector3 Lerp(Vector3 fromVector, Vector3 toVector, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F01")]
		[Address(RVA = "0x1A6D544", Offset = "0x1A6D544", VA = "0x1A6D544")]
		public static Vector3 Slerp(Vector3 fromVector, Vector3 toVector, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F02")]
		[Address(RVA = "0x1A6D580", Offset = "0x1A6D580", VA = "0x1A6D580")]
		public static Vector3 ExtractVertical(Vector3 v, Vector3 verticalAxis, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F03")]
		[Address(RVA = "0x1A6D650", Offset = "0x1A6D650", VA = "0x1A6D650")]
		public static Vector3 ExtractHorizontal(Vector3 v, Vector3 normal, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F04")]
		[Address(RVA = "0x1A6D748", Offset = "0x1A6D748", VA = "0x1A6D748")]
		public static Vector3 Flatten(Vector3 v, Vector3 normal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F05")]
		[Address(RVA = "0x1A6D7F0", Offset = "0x1A6D7F0", VA = "0x1A6D7F0")]
		public static Vector3 ClampDirection(Vector3 direction, Vector3 normalDirection, float clampWeight, int clampSmoothing)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F06")]
		[Address(RVA = "0x1A6D94C", Offset = "0x1A6D94C", VA = "0x1A6D94C")]
		public static Vector3 ClampDirection(Vector3 direction, Vector3 normalDirection, float clampWeight, int clampSmoothing, out bool changed)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F07")]
		[Address(RVA = "0x1A6DAC8", Offset = "0x1A6DAC8", VA = "0x1A6DAC8")]
		public static Vector3 ClampDirection(Vector3 direction, Vector3 normalDirection, float clampWeight, int clampSmoothing, out float clampValue)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F08")]
		[Address(RVA = "0x1A6DC4C", Offset = "0x1A6DC4C", VA = "0x1A6DC4C")]
		public static Vector3 LineToPlane(Vector3 origin, Vector3 direction, Vector3 planeNormal, Vector3 planePoint)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F09")]
		[Address(RVA = "0x1A6DD08", Offset = "0x1A6DD08", VA = "0x1A6DD08")]
		public static Vector3 PointToPlane(Vector3 point, Vector3 planePosition, Vector3 planeNormal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0x1A6DE08", Offset = "0x1A6DE08", VA = "0x1A6DE08")]
		public static Vector3 TransformPointUnscaled(Transform t, Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F0B")]
		[Address(RVA = "0x1A6DE90", Offset = "0x1A6DE90", VA = "0x1A6DE90")]
		public static Vector3 InverseTransformPointUnscaled(Transform t, Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0x1A6DF2C", Offset = "0x1A6DF2C", VA = "0x1A6DF2C")]
		public static Vector3 InverseTransformPoint(Vector3 tPos, Quaternion tRot, Vector3 tScale, Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F0D")]
		[Address(RVA = "0x1A6DFD0", Offset = "0x1A6DFD0", VA = "0x1A6DFD0")]
		public static Vector3 TransformPoint(Vector3 tPos, Quaternion tRot, Vector3 tScale, Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0x1A6DFC0", Offset = "0x1A6DFC0", VA = "0x1A6DFC0")]
		public static Vector3 Div(Vector3 v1, Vector3 v2)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000254")]
	public static class Warning
	{
		[Token(Token = "0x2000382")]
		public delegate void Logger(string message);

		[Token(Token = "0x400093E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool logged;

		[Token(Token = "0x6000F0F")]
		[Address(RVA = "0x1A74140", Offset = "0x1A74140", VA = "0x1A74140")]
		public static void Log(string message, Logger logger, bool logInEditMode = false)
		{
		}

		[Token(Token = "0x6000F10")]
		[Address(RVA = "0x1A741D8", Offset = "0x1A741D8", VA = "0x1A741D8")]
		public static void Log(string message, Transform context, bool logInEditMode = false)
		{
		}
	}
}
namespace RootMotion.FinalIK
{
	[Token(Token = "0x2000255")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xA7DAD8", Offset = "0xA7DAD8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xA7DAD8", Offset = "0xA7DAD8")]
	public class BipedIK : SolverManager
	{
		[Token(Token = "0x400093F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BipedReferences references;

		[Token(Token = "0x4000940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public BipedIKSolvers solvers;

		[Token(Token = "0x6000F11")]
		[Address(RVA = "0x23178B8", Offset = "0x23178B8", VA = "0x23178B8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8A73C", Offset = "0xA8A73C")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000F12")]
		[Address(RVA = "0x2317900", Offset = "0x2317900", VA = "0x2317900")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8A774", Offset = "0xA8A774")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000F13")]
		[Address(RVA = "0x2317948", Offset = "0x2317948", VA = "0x2317948")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8A7AC", Offset = "0xA8A7AC")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000F14")]
		[Address(RVA = "0x2317990", Offset = "0x2317990", VA = "0x2317990")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8A7E4", Offset = "0xA8A7E4")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000F15")]
		[Address(RVA = "0x23179D8", Offset = "0x23179D8", VA = "0x23179D8")]
		public float GetIKPositionWeight(AvatarIKGoal goal)
		{
			return default(float);
		}

		[Token(Token = "0x6000F16")]
		[Address(RVA = "0x2317A74", Offset = "0x2317A74", VA = "0x2317A74")]
		public float GetIKRotationWeight(AvatarIKGoal goal)
		{
			return default(float);
		}

		[Token(Token = "0x6000F17")]
		[Address(RVA = "0x2317A94", Offset = "0x2317A94", VA = "0x2317A94")]
		public void SetIKPositionWeight(AvatarIKGoal goal, float weight)
		{
		}

		[Token(Token = "0x6000F18")]
		[Address(RVA = "0x2317AC4", Offset = "0x2317AC4", VA = "0x2317AC4")]
		public void SetIKRotationWeight(AvatarIKGoal goal, float weight)
		{
		}

		[Token(Token = "0x6000F19")]
		[Address(RVA = "0x2317AF4", Offset = "0x2317AF4", VA = "0x2317AF4")]
		public void SetIKPosition(AvatarIKGoal goal, Vector3 IKPosition)
		{
		}

		[Token(Token = "0x6000F1A")]
		[Address(RVA = "0x2317B34", Offset = "0x2317B34", VA = "0x2317B34")]
		public void SetIKRotation(AvatarIKGoal goal, Quaternion IKRotation)
		{
		}

		[Token(Token = "0x6000F1B")]
		[Address(RVA = "0x2317B78", Offset = "0x2317B78", VA = "0x2317B78")]
		public Vector3 GetIKPosition(AvatarIKGoal goal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F1C")]
		[Address(RVA = "0x2317B9C", Offset = "0x2317B9C", VA = "0x2317B9C")]
		public Quaternion GetIKRotation(AvatarIKGoal goal)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000F1D")]
		[Address(RVA = "0x2317BC0", Offset = "0x2317BC0", VA = "0x2317BC0")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight, float clampWeightHead, float clampWeightEyes)
		{
		}

		[Token(Token = "0x6000F1E")]
		[Address(RVA = "0x2317BE8", Offset = "0x2317BE8", VA = "0x2317BE8")]
		public void SetLookAtPosition(Vector3 lookAtPosition)
		{
		}

		[Token(Token = "0x6000F1F")]
		[Address(RVA = "0x2317C14", Offset = "0x2317C14", VA = "0x2317C14")]
		public void SetSpinePosition(Vector3 spinePosition)
		{
		}

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0x2317C40", Offset = "0x2317C40", VA = "0x2317C40")]
		public void SetSpineWeight(float weight)
		{
		}

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0x23179F8", Offset = "0x23179F8", VA = "0x23179F8")]
		public IKSolverLimb GetGoalIK(AvatarIKGoal goal)
		{
			return null;
		}

		[Token(Token = "0x6000F22")]
		[Address(RVA = "0x2317C68", Offset = "0x2317C68", VA = "0x2317C68")]
		public void InitiateBipedIK()
		{
		}

		[Token(Token = "0x6000F23")]
		[Address(RVA = "0x2317C74", Offset = "0x2317C74", VA = "0x2317C74")]
		public void UpdateBipedIK()
		{
		}

		[Token(Token = "0x6000F24")]
		[Address(RVA = "0x2317C80", Offset = "0x2317C80", VA = "0x2317C80")]
		public void SetToDefaults()
		{
		}

		[Token(Token = "0x6000F25")]
		[Address(RVA = "0x2317FA4", Offset = "0x2317FA4", VA = "0x2317FA4", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x6000F26")]
		[Address(RVA = "0x231804C", Offset = "0x231804C", VA = "0x231804C", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6000F27")]
		[Address(RVA = "0x2318438", Offset = "0x2318438", VA = "0x2318438", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6000F28")]
		[Address(RVA = "0x23185C4", Offset = "0x23185C4", VA = "0x23185C4")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x6000F29")]
		[Address(RVA = "0x23185F8", Offset = "0x23185F8", VA = "0x23185F8")]
		public BipedIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000256")]
	public class BipedIKSolvers
	{
		[Token(Token = "0x4000941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IKSolverLimb leftFoot;

		[Token(Token = "0x4000942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IKSolverLimb rightFoot;

		[Token(Token = "0x4000943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IKSolverLimb leftHand;

		[Token(Token = "0x4000944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IKSolverLimb rightHand;

		[Token(Token = "0x4000945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IKSolverFABRIK spine;

		[Token(Token = "0x4000946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLookAt lookAt;

		[Token(Token = "0x4000947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IKSolverAim aim;

		[Token(Token = "0x4000948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Constraints pelvis;

		[Token(Token = "0x4000949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IKSolverLimb[] _limbs;

		[Token(Token = "0x400094A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private IKSolver[] _ikSolvers;

		[Token(Token = "0x170000D2")]
		public IKSolverLimb[] limbs
		{
			[Token(Token = "0x6000F2A")]
			[Address(RVA = "0x2317E20", Offset = "0x2317E20", VA = "0x2317E20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000D3")]
		public IKSolver[] ikSolvers
		{
			[Token(Token = "0x6000F2B")]
			[Address(RVA = "0x23188F0", Offset = "0x23188F0", VA = "0x23188F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F2C")]
		[Address(RVA = "0x2318314", Offset = "0x2318314", VA = "0x2318314")]
		public void AssignReferences(BipedReferences references)
		{
		}

		[Token(Token = "0x6000F2D")]
		[Address(RVA = "0x231871C", Offset = "0x231871C", VA = "0x231871C")]
		public BipedIKSolvers()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000257")]
	public abstract class Constraint
	{
		[Token(Token = "0x400094B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x400094C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float weight;

		[Token(Token = "0x170000D4")]
		public bool isValid
		{
			[Token(Token = "0x6000F2E")]
			[Address(RVA = "0x1698EB8", Offset = "0x1698EB8", VA = "0x1698EB8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000F2F")]
		public abstract void UpdateConstraint();

		[Token(Token = "0x6000F30")]
		[Address(RVA = "0x1698F24", Offset = "0x1698F24", VA = "0x1698F24")]
		protected Constraint()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000258")]
	public class ConstraintPosition : Constraint
	{
		[Token(Token = "0x400094D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 position;

		[Token(Token = "0x6000F31")]
		[Address(RVA = "0x1698F2C", Offset = "0x1698F2C", VA = "0x1698F2C", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x6000F32")]
		[Address(RVA = "0x1698FEC", Offset = "0x1698FEC", VA = "0x1698FEC")]
		public ConstraintPosition()
		{
		}

		[Token(Token = "0x6000F33")]
		[Address(RVA = "0x1698FF4", Offset = "0x1698FF4", VA = "0x1698FF4")]
		public ConstraintPosition(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000259")]
	public class ConstraintPositionOffset : Constraint
	{
		[Token(Token = "0x400094E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 offset;

		[Token(Token = "0x400094F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 defaultLocalPosition;

		[Token(Token = "0x4000950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 lastLocalPosition;

		[Token(Token = "0x4000951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool initiated;

		[Token(Token = "0x170000D5")]
		private bool positionChanged
		{
			[Token(Token = "0x6000F37")]
			[Address(RVA = "0x1699130", Offset = "0x1699130", VA = "0x1699130")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000F34")]
		[Address(RVA = "0x1699028", Offset = "0x1699028", VA = "0x1699028", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x6000F35")]
		[Address(RVA = "0x169916C", Offset = "0x169916C", VA = "0x169916C")]
		public ConstraintPositionOffset()
		{
		}

		[Token(Token = "0x6000F36")]
		[Address(RVA = "0x1699174", Offset = "0x1699174", VA = "0x1699174")]
		public ConstraintPositionOffset(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200025A")]
	public class ConstraintRotation : Constraint
	{
		[Token(Token = "0x4000952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion rotation;

		[Token(Token = "0x6000F38")]
		[Address(RVA = "0x16991A8", Offset = "0x16991A8", VA = "0x16991A8", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x6000F39")]
		[Address(RVA = "0x1699228", Offset = "0x1699228", VA = "0x1699228")]
		public ConstraintRotation()
		{
		}

		[Token(Token = "0x6000F3A")]
		[Address(RVA = "0x1699230", Offset = "0x1699230", VA = "0x1699230")]
		public ConstraintRotation(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200025B")]
	public class ConstraintRotationOffset : Constraint
	{
		[Token(Token = "0x4000953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion offset;

		[Token(Token = "0x4000954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion defaultRotation;

		[Token(Token = "0x4000955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion defaultLocalRotation;

		[Token(Token = "0x4000956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion lastLocalRotation;

		[Token(Token = "0x4000957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Quaternion defaultTargetLocalRotation;

		[Token(Token = "0x4000958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool initiated;

		[Token(Token = "0x170000D6")]
		private bool rotationChanged
		{
			[Token(Token = "0x6000F3E")]
			[Address(RVA = "0x169936C", Offset = "0x169936C", VA = "0x169936C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000F3B")]
		[Address(RVA = "0x1699264", Offset = "0x1699264", VA = "0x1699264", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x6000F3C")]
		[Address(RVA = "0x16993A8", Offset = "0x16993A8", VA = "0x16993A8")]
		public ConstraintRotationOffset()
		{
		}

		[Token(Token = "0x6000F3D")]
		[Address(RVA = "0x16993B0", Offset = "0x16993B0", VA = "0x16993B0")]
		public ConstraintRotationOffset(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200025C")]
	public class Constraints
	{
		[Token(Token = "0x4000959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x400095A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x400095B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 positionOffset;

		[Token(Token = "0x400095C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 position;

		[Token(Token = "0x400095D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA7FB30", Offset = "0xA7FB30")]
		public float positionWeight;

		[Token(Token = "0x400095E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 rotationOffset;

		[Token(Token = "0x400095F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 rotation;

		[Token(Token = "0x4000960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA7FB48", Offset = "0xA7FB48")]
		public float rotationWeight;

		[Token(Token = "0x6000F3F")]
		[Address(RVA = "0x16993E4", Offset = "0x16993E4", VA = "0x16993E4")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F40")]
		[Address(RVA = "0x1699450", Offset = "0x1699450", VA = "0x1699450")]
		public void Initiate(Transform transform)
		{
		}

		[Token(Token = "0x6000F41")]
		[Address(RVA = "0x16994A8", Offset = "0x16994A8", VA = "0x16994A8")]
		public void Update()
		{
		}

		[Token(Token = "0x6000F42")]
		[Address(RVA = "0x1699758", Offset = "0x1699758", VA = "0x1699758")]
		public Constraints()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200025D")]
	public class Finger
	{
		[Serializable]
		[Token(Token = "0x2000383")]
		public enum DOF
		{
			[Token(Token = "0x4000F70")]
			One,
			[Token(Token = "0x4000F71")]
			Three
		}

		[Token(Token = "0x4000961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7FB60", Offset = "0xA7FB60")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA7FB60", Offset = "0xA7FB60")]
		public float weight;

		[Token(Token = "0x4000962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7FBB4", Offset = "0xA7FBB4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA7FBB4", Offset = "0xA7FBB4")]
		public float rotationWeight;

		[Token(Token = "0x4000963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7FC08", Offset = "0xA7FC08")]
		public DOF rotationDOF;

		[Token(Token = "0x4000964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7FC40", Offset = "0xA7FC40")]
		public bool fixBone1Twist;

		[Token(Token = "0x4000965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7FC78", Offset = "0xA7FC78")]
		public Transform bone1;

		[Token(Token = "0x4000966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7FCB0", Offset = "0xA7FCB0")]
		public Transform bone2;

		[Token(Token = "0x4000967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7FCE8", Offset = "0xA7FCE8")]
		public Transform bone3;

		[Token(Token = "0x4000968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7FD20", Offset = "0xA7FD20")]
		public Transform tip;

		[Token(Token = "0x4000969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7FD58", Offset = "0xA7FD58")]
		public Transform target;

		[Token(Token = "0x400096A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7FD90", Offset = "0xA7FD90")]
		private bool <initiated>k__BackingField;

		[Token(Token = "0x400096B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IKSolverLimb solver;

		[Token(Token = "0x400096C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion bone3RelativeToTarget;

		[Token(Token = "0x400096D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 bone3DefaultLocalPosition;

		[Token(Token = "0x400096E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Quaternion bone3DefaultLocalRotation;

		[Token(Token = "0x400096F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 bone1Axis;

		[Token(Token = "0x4000970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 tipAxis;

		[Token(Token = "0x4000971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Vector3 bone1TwistAxis;

		[Token(Token = "0x4000972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 defaultBendNormal;

		[Token(Token = "0x170000D7")]
		public bool initiated
		{
			[Token(Token = "0x6000F43")]
			[Address(RVA = "0x27696E0", Offset = "0x27696E0", VA = "0x27696E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A81C", Offset = "0xA8A81C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F44")]
			[Address(RVA = "0x27696E8", Offset = "0x27696E8", VA = "0x27696E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A82C", Offset = "0xA8A82C")]
			private set
			{
			}
		}

		[Token(Token = "0x170000D8")]
		public Vector3 IKPosition
		{
			[Token(Token = "0x6000F45")]
			[Address(RVA = "0x27696F4", Offset = "0x27696F4", VA = "0x27696F4")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000F46")]
			[Address(RVA = "0x2769714", Offset = "0x2769714", VA = "0x2769714")]
			set
			{
			}
		}

		[Token(Token = "0x170000D9")]
		public Quaternion IKRotation
		{
			[Token(Token = "0x6000F47")]
			[Address(RVA = "0x2769734", Offset = "0x2769734", VA = "0x2769734")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x6000F48")]
			[Address(RVA = "0x2769754", Offset = "0x2769754", VA = "0x2769754")]
			set
			{
			}
		}

		[Token(Token = "0x6000F49")]
		[Address(RVA = "0x2769774", Offset = "0x2769774", VA = "0x2769774")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F4A")]
		[Address(RVA = "0x2769888", Offset = "0x2769888", VA = "0x2769888")]
		public void Initiate(Transform hand, int index)
		{
		}

		[Token(Token = "0x6000F4B")]
		[Address(RVA = "0x2769E18", Offset = "0x2769E18", VA = "0x2769E18")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x6000F4C")]
		[Address(RVA = "0x2769EF0", Offset = "0x2769EF0", VA = "0x2769EF0")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000F4D")]
		[Address(RVA = "0x2769FB4", Offset = "0x2769FB4", VA = "0x2769FB4")]
		public void Update(float masterWeight)
		{
		}

		[Token(Token = "0x6000F4E")]
		[Address(RVA = "0x276A43C", Offset = "0x276A43C", VA = "0x276A43C")]
		public Finger()
		{
		}
	}
	[Token(Token = "0x200025E")]
	public class FingerRig : SolverManager
	{
		[Token(Token = "0x4000973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7FDA0", Offset = "0xA7FDA0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA7FDA0", Offset = "0xA7FDA0")]
		public float weight;

		[Token(Token = "0x4000974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Finger[] fingers;

		[Token(Token = "0x4000975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7FDF4", Offset = "0xA7FDF4")]
		private bool <initiated>k__BackingField;

		[Token(Token = "0x170000DA")]
		public bool initiated
		{
			[Token(Token = "0x6000F4F")]
			[Address(RVA = "0x276A44C", Offset = "0x276A44C", VA = "0x276A44C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A83C", Offset = "0xA8A83C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F50")]
			[Address(RVA = "0x276A454", Offset = "0x276A454", VA = "0x276A454")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A84C", Offset = "0xA8A84C")]
			private set
			{
			}
		}

		[Token(Token = "0x6000F51")]
		[Address(RVA = "0x276A460", Offset = "0x276A460", VA = "0x276A460")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F52")]
		[Address(RVA = "0x276A4E8", Offset = "0x276A4E8", VA = "0x276A4E8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8A85C", Offset = "0xA8A85C")]
		public void AutoDetect()
		{
		}

		[Token(Token = "0x6000F53")]
		[Address(RVA = "0x276A874", Offset = "0x276A874", VA = "0x276A874")]
		public void AddFinger(Transform bone1, Transform bone2, Transform bone3, Transform tip, [Optional] Transform target)
		{
		}

		[Token(Token = "0x6000F54")]
		[Address(RVA = "0x276AA38", Offset = "0x276AA38", VA = "0x276AA38")]
		public void RemoveFinger(int index)
		{
		}

		[Token(Token = "0x6000F55")]
		[Address(RVA = "0x276A770", Offset = "0x276A770", VA = "0x276A770")]
		private void AddChildrenRecursive(Transform parent, ref Transform[] array)
		{
		}

		[Token(Token = "0x6000F56")]
		[Address(RVA = "0x276ABC4", Offset = "0x276ABC4", VA = "0x276ABC4", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6000F57")]
		[Address(RVA = "0x276AC84", Offset = "0x276AC84", VA = "0x276AC84")]
		public void UpdateFingerSolvers()
		{
		}

		[Token(Token = "0x6000F58")]
		[Address(RVA = "0x276ACFC", Offset = "0x276ACFC", VA = "0x276ACFC")]
		public void FixFingerTransforms()
		{
		}

		[Token(Token = "0x6000F59")]
		[Address(RVA = "0x276AD70", Offset = "0x276AD70", VA = "0x276AD70")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000F5A")]
		[Address(RVA = "0x276ADD8", Offset = "0x276ADD8", VA = "0x276ADD8", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6000F5B")]
		[Address(RVA = "0x276ADDC", Offset = "0x276ADDC", VA = "0x276ADDC", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x6000F5C")]
		[Address(RVA = "0x276ADF0", Offset = "0x276ADF0", VA = "0x276ADF0")]
		public FingerRig()
		{
		}
	}
	[Token(Token = "0x200025F")]
	public abstract class Grounder : MonoBehaviour
	{
		[Token(Token = "0x2000384")]
		public delegate void GrounderDelegate();

		[Token(Token = "0x4000976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7FE04", Offset = "0xA7FE04")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA7FE04", Offset = "0xA7FE04")]
		public float weight;

		[Token(Token = "0x4000977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7FE58", Offset = "0xA7FE58")]
		public Grounding solver;

		[Token(Token = "0x4000978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GrounderDelegate OnPreGrounder;

		[Token(Token = "0x4000979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GrounderDelegate OnPostGrounder;

		[Token(Token = "0x400097A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GrounderDelegate OnPostIK;

		[Token(Token = "0x400097B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7FE90", Offset = "0xA7FE90")]
		private bool <initiated>k__BackingField;

		[Token(Token = "0x170000DB")]
		public bool initiated
		{
			[Token(Token = "0x6000F5E")]
			[Address(RVA = "0x276DCB4", Offset = "0x276DCB4", VA = "0x276DCB4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A894", Offset = "0xA8A894")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000F5F")]
			[Address(RVA = "0x276DCBC", Offset = "0x276DCBC", VA = "0x276DCBC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8A8A4", Offset = "0xA8A8A4")]
			protected set
			{
			}
		}

		[Token(Token = "0x6000F5D")]
		public abstract void ResetPosition();

		[Token(Token = "0x6000F60")]
		[Address(RVA = "0x276DCC8", Offset = "0x276DCC8", VA = "0x276DCC8")]
		protected Vector3 GetSpineOffsetTarget()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F61")]
		[Address(RVA = "0x276DE74", Offset = "0x276DE74", VA = "0x276DE74")]
		protected void LogWarning(string message)
		{
		}

		[Token(Token = "0x6000F62")]
		[Address(RVA = "0x276DD74", Offset = "0x276DD74", VA = "0x276DD74")]
		private Vector3 GetLegSpineBendVector(Grounding.Leg leg)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F63")]
		[Address(RVA = "0x276DEA8", Offset = "0x276DEA8", VA = "0x276DEA8")]
		private Vector3 GetLegSpineTangent(Grounding.Leg leg)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F64")]
		protected abstract void OpenUserManual();

		[Token(Token = "0x6000F65")]
		protected abstract void OpenScriptReference();

		[Token(Token = "0x6000F66")]
		[Address(RVA = "0x276DFE4", Offset = "0x276DFE4", VA = "0x276DFE4")]
		protected Grounder()
		{
		}
	}
	[Token(Token = "0x2000260")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xA7DB38", Offset = "0xA7DB38")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xA7DB38", Offset = "0xA7DB38")]
	public class GrounderBipedIK : Grounder
	{
		[Token(Token = "0x400097C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7FEA0", Offset = "0xA7FEA0")]
		public BipedIK ik;

		[Token(Token = "0x400097D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7FED8", Offset = "0xA7FED8")]
		public float spineBend;

		[Token(Token = "0x400097E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7FF10", Offset = "0xA7FF10")]
		public float spineSpeed;

		[Token(Token = "0x400097F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform[] feet;

		[Token(Token = "0x4000980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Quaternion[] footRotations;

		[Token(Token = "0x4000981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x4000982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x4000983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 spineOffset;

		[Token(Token = "0x4000984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float lastWeight;

		[Token(Token = "0x6000F67")]
		[Address(RVA = "0x276E05C", Offset = "0x276E05C", VA = "0x276E05C", Slot = "5")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8A8B4", Offset = "0xA8A8B4")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000F68")]
		[Address(RVA = "0x276E0A4", Offset = "0x276E0A4", VA = "0x276E0A4", Slot = "6")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8A8EC", Offset = "0xA8A8EC")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000F69")]
		[Address(RVA = "0x276E0EC", Offset = "0x276E0EC", VA = "0x276E0EC", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6000F6A")]
		[Address(RVA = "0x276E12C", Offset = "0x276E12C", VA = "0x276E12C")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F6B")]
		[Address(RVA = "0x276E1D8", Offset = "0x276E1D8", VA = "0x276E1D8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F6C")]
		[Address(RVA = "0x276E238", Offset = "0x276E238", VA = "0x276E238")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6000F6D")]
		[Address(RVA = "0x276E558", Offset = "0x276E558", VA = "0x276E558")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000F6E")]
		[Address(RVA = "0x276E5AC", Offset = "0x276E5AC", VA = "0x276E5AC")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x6000F6F")]
		[Address(RVA = "0x276E9C8", Offset = "0x276E9C8", VA = "0x276E9C8")]
		private void SetLegIK(IKSolverLimb limb, int index)
		{
		}

		[Token(Token = "0x6000F70")]
		[Address(RVA = "0x276EA9C", Offset = "0x276EA9C", VA = "0x276EA9C")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x6000F71")]
		[Address(RVA = "0x276EBFC", Offset = "0x276EBFC", VA = "0x276EBFC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F72")]
		[Address(RVA = "0x276EDC0", Offset = "0x276EDC0", VA = "0x276EDC0")]
		public GrounderBipedIK()
		{
		}
	}
	[Token(Token = "0x2000261")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xA7DB98", Offset = "0xA7DB98")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xA7DB98", Offset = "0xA7DB98")]
	public class GrounderFBBIK : Grounder
	{
		[Serializable]
		[Token(Token = "0x2000385")]
		public class SpineEffector
		{
			[Token(Token = "0x4000F72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA84410", Offset = "0xA84410")]
			public FullBodyBipedEffector effectorType;

			[Token(Token = "0x4000F73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA84448", Offset = "0xA84448")]
			public float horizontalWeight;

			[Token(Token = "0x4000F74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA84480", Offset = "0xA84480")]
			public float verticalWeight;

			[Token(Token = "0x6001671")]
			[Address(RVA = "0x1E3385C", Offset = "0x1E3385C", VA = "0x1E3385C")]
			public SpineEffector()
			{
			}

			[Token(Token = "0x6001672")]
			[Address(RVA = "0x1E3386C", Offset = "0x1E3386C", VA = "0x1E3386C")]
			public SpineEffector(FullBodyBipedEffector effectorType, float horizontalWeight, float verticalWeight)
			{
			}
		}

		[Token(Token = "0x4000985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7FF48", Offset = "0xA7FF48")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7FF80", Offset = "0xA7FF80")]
		public float spineBend;

		[Token(Token = "0x4000987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7FFB8", Offset = "0xA7FFB8")]
		public float spineSpeed;

		[Token(Token = "0x4000988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public SpineEffector[] spine;

		[Token(Token = "0x4000989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform[] feet;

		[Token(Token = "0x400098A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 spineOffset;

		[Token(Token = "0x400098B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private bool firstSolve;

		[Token(Token = "0x6000F73")]
		[Address(RVA = "0x276F210", Offset = "0x276F210", VA = "0x276F210")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8A924", Offset = "0xA8A924")]
		private void OpenTutorial()
		{
		}

		[Token(Token = "0x6000F74")]
		[Address(RVA = "0x276F258", Offset = "0x276F258", VA = "0x276F258", Slot = "5")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8A95C", Offset = "0xA8A95C")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000F75")]
		[Address(RVA = "0x276F2A0", Offset = "0x276F2A0", VA = "0x276F2A0", Slot = "6")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8A994", Offset = "0xA8A994")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000F76")]
		[Address(RVA = "0x276F2E8", Offset = "0x276F2E8", VA = "0x276F2E8", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6000F77")]
		[Address(RVA = "0x276F328", Offset = "0x276F328", VA = "0x276F328")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F78")]
		[Address(RVA = "0x276F3BC", Offset = "0x276F3BC", VA = "0x276F3BC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F79")]
		[Address(RVA = "0x276F6F4", Offset = "0x276F6F4", VA = "0x276F6F4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F7A")]
		[Address(RVA = "0x276F700", Offset = "0x276F700", VA = "0x276F700")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000F7B")]
		[Address(RVA = "0x276F424", Offset = "0x276F424", VA = "0x276F424")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6000F7C")]
		[Address(RVA = "0x276F70C", Offset = "0x276F70C", VA = "0x276F70C")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x6000F7D")]
		[Address(RVA = "0x276FA2C", Offset = "0x276FA2C", VA = "0x276FA2C")]
		private void SetLegIK(IKEffector effector, Grounding.Leg leg)
		{
		}

		[Token(Token = "0x6000F7E")]
		[Address(RVA = "0x276FB3C", Offset = "0x276FB3C", VA = "0x276FB3C")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000F7F")]
		[Address(RVA = "0x276FCB8", Offset = "0x276FCB8", VA = "0x276FCB8")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x6000F80")]
		[Address(RVA = "0x276FCCC", Offset = "0x276FCCC", VA = "0x276FCCC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F81")]
		[Address(RVA = "0x276FE80", Offset = "0x276FE80", VA = "0x276FE80")]
		public GrounderFBBIK()
		{
		}
	}
	[Token(Token = "0x2000262")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xA7DBF8", Offset = "0xA7DBF8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xA7DBF8", Offset = "0xA7DBF8")]
	public class GrounderIK : Grounder
	{
		[Token(Token = "0x400098C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public IK[] legs;

		[Token(Token = "0x400098D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA7FFF0", Offset = "0xA7FFF0")]
		public Transform pelvis;

		[Token(Token = "0x400098E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80028", Offset = "0xA80028")]
		public Transform characterRoot;

		[Token(Token = "0x400098F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80060", Offset = "0xA80060")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA80060", Offset = "0xA80060")]
		public float rootRotationWeight;

		[Token(Token = "0x4000990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA800B4", Offset = "0xA800B4")]
		public float rootRotationSpeed;

		[Token(Token = "0x4000991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA800EC", Offset = "0xA800EC")]
		public float maxRootRotationAngle;

		[Token(Token = "0x4000992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform[] feet;

		[Token(Token = "0x4000993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Quaternion[] footRotations;

		[Token(Token = "0x4000994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x4000995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x4000996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int solvedFeet;

		[Token(Token = "0x4000997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private bool solved;

		[Token(Token = "0x4000998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float lastWeight;

		[Token(Token = "0x4000999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Rigidbody characterRootRigidbody;

		[Token(Token = "0x6000F82")]
		[Address(RVA = "0x276FF20", Offset = "0x276FF20", VA = "0x276FF20", Slot = "5")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8A9CC", Offset = "0xA8A9CC")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000F83")]
		[Address(RVA = "0x276FF68", Offset = "0x276FF68", VA = "0x276FF68", Slot = "6")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8AA04", Offset = "0xA8AA04")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000F84")]
		[Address(RVA = "0x276FFB0", Offset = "0x276FFB0", VA = "0x276FFB0", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6000F85")]
		[Address(RVA = "0x27701B0", Offset = "0x27701B0", VA = "0x27701B0")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F86")]
		[Address(RVA = "0x27703E4", Offset = "0x27703E4", VA = "0x27703E4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000F87")]
		[Address(RVA = "0x27704E0", Offset = "0x27704E0", VA = "0x27704E0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F88")]
		[Address(RVA = "0x2770934", Offset = "0x2770934", VA = "0x2770934")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6000F89")]
		[Address(RVA = "0x2770D9C", Offset = "0x2770D9C", VA = "0x2770D9C")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x6000F8A")]
		[Address(RVA = "0x2770F2C", Offset = "0x2770F2C", VA = "0x2770F2C")]
		private void SetLegIK(int index)
		{
		}

		[Token(Token = "0x6000F8B")]
		[Address(RVA = "0x2771230", Offset = "0x2771230", VA = "0x2771230")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x6000F8C")]
		[Address(RVA = "0x277139C", Offset = "0x277139C", VA = "0x277139C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F8D")]
		[Address(RVA = "0x27715A8", Offset = "0x27715A8", VA = "0x27715A8")]
		public GrounderIK()
		{
		}
	}
	[Token(Token = "0x2000263")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xA7DC58", Offset = "0xA7DC58")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xA7DC58", Offset = "0xA7DC58")]
	public class GrounderQuadruped : Grounder
	{
		[Token(Token = "0x2000386")]
		public struct Foot
		{
			[Token(Token = "0x4000F75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IKSolver solver;

			[Token(Token = "0x4000F76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Transform transform;

			[Token(Token = "0x4000F77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Quaternion rotation;

			[Token(Token = "0x4000F78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Grounding.Leg leg;

			[Token(Token = "0x6001673")]
			[Address(RVA = "0x1E338B4", Offset = "0x1E338B4", VA = "0x1E338B4")]
			public Foot(IKSolver solver, Transform transform)
			{
			}
		}

		[Token(Token = "0x400099A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80124", Offset = "0xA80124")]
		public Grounding forelegSolver;

		[Token(Token = "0x400099B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8015C", Offset = "0xA8015C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA8015C", Offset = "0xA8015C")]
		public float rootRotationWeight;

		[Token(Token = "0x400099C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA801B0", Offset = "0xA801B0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA801B0", Offset = "0xA801B0")]
		public float minRootRotation;

		[Token(Token = "0x400099D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80208", Offset = "0xA80208")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA80208", Offset = "0xA80208")]
		public float maxRootRotation;

		[Token(Token = "0x400099E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80260", Offset = "0xA80260")]
		public float rootRotationSpeed;

		[Token(Token = "0x400099F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80298", Offset = "0xA80298")]
		public float maxLegOffset;

		[Token(Token = "0x40009A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA802D0", Offset = "0xA802D0")]
		public float maxForeLegOffset;

		[Token(Token = "0x40009A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80308", Offset = "0xA80308")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA80308", Offset = "0xA80308")]
		public float maintainHeadRotationWeight;

		[Token(Token = "0x40009A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8035C", Offset = "0xA8035C")]
		public Transform characterRoot;

		[Token(Token = "0x40009A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80394", Offset = "0xA80394")]
		public Transform pelvis;

		[Token(Token = "0x40009A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA803CC", Offset = "0xA803CC")]
		public Transform lastSpineBone;

		[Token(Token = "0x40009A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80404", Offset = "0xA80404")]
		public Transform head;

		[Token(Token = "0x40009A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public IK[] legs;

		[Token(Token = "0x40009A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public IK[] forelegs;

		[Token(Token = "0x40009A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[HideInInspector]
		public Vector3 gravity;

		[Token(Token = "0x40009A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Foot[] feet;

		[Token(Token = "0x40009AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x40009AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Quaternion animatedPelvisLocalRotation;

		[Token(Token = "0x40009AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Quaternion animatedHeadLocalRotation;

		[Token(Token = "0x40009AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x40009AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Quaternion solvedPelvisLocalRotation;

		[Token(Token = "0x40009AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Quaternion solvedHeadLocalRotation;

		[Token(Token = "0x40009B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private int solvedFeet;

		[Token(Token = "0x40009B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private bool solved;

		[Token(Token = "0x40009B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private float angle;

		[Token(Token = "0x40009B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Transform forefeetRoot;

		[Token(Token = "0x40009B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Quaternion headRotation;

		[Token(Token = "0x40009B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private float lastWeight;

		[Token(Token = "0x40009B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Rigidbody characterRootRigidbody;

		[Token(Token = "0x6000F8E")]
		[Address(RVA = "0x2771648", Offset = "0x2771648", VA = "0x2771648", Slot = "5")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8AA3C", Offset = "0xA8AA3C")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000F8F")]
		[Address(RVA = "0x2771690", Offset = "0x2771690", VA = "0x2771690", Slot = "6")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8AA74", Offset = "0xA8AA74")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000F90")]
		[Address(RVA = "0x27716D8", Offset = "0x27716D8", VA = "0x27716D8", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6000F91")]
		[Address(RVA = "0x2771868", Offset = "0x2771868", VA = "0x2771868")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F92")]
		[Address(RVA = "0x2771994", Offset = "0x2771994", VA = "0x2771994")]
		private bool IsReadyToInitiateLegs(IK[] ikComponents)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F93")]
		[Address(RVA = "0x2771B98", Offset = "0x2771B98", VA = "0x2771B98")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000F94")]
		[Address(RVA = "0x2771C00", Offset = "0x2771C00", VA = "0x2771C00")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F95")]
		[Address(RVA = "0x2771C64", Offset = "0x2771C64", VA = "0x2771C64")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6000F96")]
		[Address(RVA = "0x2771FCC", Offset = "0x2771FCC", VA = "0x2771FCC")]
		private Transform[] InitiateFeet(IK[] ikComponents, ref Foot[] f, int indexOffset)
		{
			return null;
		}

		[Token(Token = "0x6000F97")]
		[Address(RVA = "0x2772364", Offset = "0x2772364", VA = "0x2772364")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000F98")]
		[Address(RVA = "0x277245C", Offset = "0x277245C", VA = "0x277245C")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x6000F99")]
		[Address(RVA = "0x2772828", Offset = "0x2772828", VA = "0x2772828")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x6000F9A")]
		[Address(RVA = "0x2772E50", Offset = "0x2772E50", VA = "0x2772E50")]
		private void UpdateForefeetRoot()
		{
		}

		[Token(Token = "0x6000F9B")]
		[Address(RVA = "0x2773020", Offset = "0x2773020", VA = "0x2773020")]
		private void SetFootIK(Foot foot, float maxOffset)
		{
		}

		[Token(Token = "0x6000F9C")]
		[Address(RVA = "0x27730FC", Offset = "0x27730FC", VA = "0x27730FC")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x6000F9D")]
		[Address(RVA = "0x2773368", Offset = "0x2773368", VA = "0x2773368")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000F9E")]
		[Address(RVA = "0x27733A0", Offset = "0x27733A0", VA = "0x27733A0")]
		private void DestroyLegs(IK[] ikComponents)
		{
		}

		[Token(Token = "0x6000F9F")]
		[Address(RVA = "0x27735A4", Offset = "0x27735A4", VA = "0x27735A4")]
		public GrounderQuadruped()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000264")]
	public class Grounding
	{
		[Serializable]
		[Token(Token = "0x2000387")]
		public enum Quality
		{
			[Token(Token = "0x4000F7A")]
			Fastest,
			[Token(Token = "0x4000F7B")]
			Simple,
			[Token(Token = "0x4000F7C")]
			Best
		}

		[Token(Token = "0x2000388")]
		public delegate bool OnRaycastDelegate(Vector3 origin, Vector3 direction, out RaycastHit hitInfo, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction);

		[Token(Token = "0x2000389")]
		public delegate bool OnCapsuleCastDelegate(Vector3 point1, Vector3 point2, float radius, Vector3 direction, out RaycastHit hitInfo, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction);

		[Token(Token = "0x200038A")]
		public delegate bool OnSphereCastDelegate(Vector3 origin, float radius, Vector3 direction, out RaycastHit hitInfo, float maxDistance, int layerMask, QueryTriggerInteraction queryTriggerInteraction);

		[Token(Token = "0x200038B")]
		public class Leg
		{
			[Token(Token = "0x4000F7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA844B8", Offset = "0xA844B8")]
			private bool <isGrounded>k__BackingField;

			[Token(Token = "0x4000F7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA844C8", Offset = "0xA844C8")]
			private Vector3 <IKPosition>k__BackingField;

			[Token(Token = "0x4000F7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Quaternion rotationOffset;

			[Token(Token = "0x4000F80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA844D8", Offset = "0xA844D8")]
			private bool <initiated>k__BackingField;

			[Token(Token = "0x4000F81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA844E8", Offset = "0xA844E8")]
			private float <heightFromGround>k__BackingField;

			[Token(Token = "0x4000F82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA844F8", Offset = "0xA844F8")]
			private Vector3 <velocity>k__BackingField;

			[Token(Token = "0x4000F83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA84508", Offset = "0xA84508")]
			private Transform <transform>k__BackingField;

			[Token(Token = "0x4000F84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA84518", Offset = "0xA84518")]
			private float <IKOffset>k__BackingField;

			[Token(Token = "0x4000F85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public bool invertFootCenter;

			[Token(Token = "0x4000F86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA84528", Offset = "0xA84528")]
			private RaycastHit <heelHit>k__BackingField;

			[Token(Token = "0x4000F87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA84538", Offset = "0xA84538")]
			private RaycastHit <capsuleHit>k__BackingField;

			[Token(Token = "0x4000F88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private Grounding grounding;

			[Token(Token = "0x4000F89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			private float lastTime;

			[Token(Token = "0x4000F8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			private float deltaTime;

			[Token(Token = "0x4000F8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			private Vector3 lastPosition;

			[Token(Token = "0x4000F8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			private Quaternion toHitNormal;

			[Token(Token = "0x4000F8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
			private Quaternion r;

			[Token(Token = "0x4000F8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
			private Vector3 up;

			[Token(Token = "0x4000F8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			private bool doOverrideFootPosition;

			[Token(Token = "0x4000F90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
			private Vector3 overrideFootPosition;

			[Token(Token = "0x4000F91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			private Vector3 transformPosition;

			[Token(Token = "0x17000185")]
			public bool isGrounded
			{
				[Token(Token = "0x6001680")]
				[Address(RVA = "0x1E33918", Offset = "0x1E33918", VA = "0x1E33918")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D37C", Offset = "0xA8D37C")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001681")]
				[Address(RVA = "0x1E33920", Offset = "0x1E33920", VA = "0x1E33920")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D38C", Offset = "0xA8D38C")]
				private set
				{
				}
			}

			[Token(Token = "0x17000186")]
			public Vector3 IKPosition
			{
				[Token(Token = "0x6001682")]
				[Address(RVA = "0x1E3392C", Offset = "0x1E3392C", VA = "0x1E3392C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D39C", Offset = "0xA8D39C")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001683")]
				[Address(RVA = "0x1E33938", Offset = "0x1E33938", VA = "0x1E33938")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D3AC", Offset = "0xA8D3AC")]
				private set
				{
				}
			}

			[Token(Token = "0x17000187")]
			public bool initiated
			{
				[Token(Token = "0x6001684")]
				[Address(RVA = "0x1E33944", Offset = "0x1E33944", VA = "0x1E33944")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D3BC", Offset = "0xA8D3BC")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001685")]
				[Address(RVA = "0x1E3394C", Offset = "0x1E3394C", VA = "0x1E3394C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D3CC", Offset = "0xA8D3CC")]
				private set
				{
				}
			}

			[Token(Token = "0x17000188")]
			public float heightFromGround
			{
				[Token(Token = "0x6001686")]
				[Address(RVA = "0x1E33958", Offset = "0x1E33958", VA = "0x1E33958")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D3DC", Offset = "0xA8D3DC")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001687")]
				[Address(RVA = "0x1E33960", Offset = "0x1E33960", VA = "0x1E33960")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D3EC", Offset = "0xA8D3EC")]
				private set
				{
				}
			}

			[Token(Token = "0x17000189")]
			public Vector3 velocity
			{
				[Token(Token = "0x6001688")]
				[Address(RVA = "0x1E33968", Offset = "0x1E33968", VA = "0x1E33968")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D3FC", Offset = "0xA8D3FC")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001689")]
				[Address(RVA = "0x1E33974", Offset = "0x1E33974", VA = "0x1E33974")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D40C", Offset = "0xA8D40C")]
				private set
				{
				}
			}

			[Token(Token = "0x1700018A")]
			public Transform transform
			{
				[Token(Token = "0x600168A")]
				[Address(RVA = "0x1E33980", Offset = "0x1E33980", VA = "0x1E33980")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D41C", Offset = "0xA8D41C")]
				get
				{
					return null;
				}
				[Token(Token = "0x600168B")]
				[Address(RVA = "0x1E33988", Offset = "0x1E33988", VA = "0x1E33988")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D42C", Offset = "0xA8D42C")]
				private set
				{
				}
			}

			[Token(Token = "0x1700018B")]
			public float IKOffset
			{
				[Token(Token = "0x600168C")]
				[Address(RVA = "0x1E33990", Offset = "0x1E33990", VA = "0x1E33990")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D43C", Offset = "0xA8D43C")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x600168D")]
				[Address(RVA = "0x1E33998", Offset = "0x1E33998", VA = "0x1E33998")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D44C", Offset = "0xA8D44C")]
				private set
				{
				}
			}

			[Token(Token = "0x1700018C")]
			public RaycastHit heelHit
			{
				[Token(Token = "0x600168E")]
				[Address(RVA = "0x1E339A0", Offset = "0x1E339A0", VA = "0x1E339A0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D45C", Offset = "0xA8D45C")]
				get
				{
					return default(RaycastHit);
				}
				[Token(Token = "0x600168F")]
				[Address(RVA = "0x1E339B8", Offset = "0x1E339B8", VA = "0x1E339B8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D46C", Offset = "0xA8D46C")]
				private set
				{
				}
			}

			[Token(Token = "0x1700018D")]
			public RaycastHit capsuleHit
			{
				[Token(Token = "0x6001690")]
				[Address(RVA = "0x1E339D8", Offset = "0x1E339D8", VA = "0x1E339D8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D47C", Offset = "0xA8D47C")]
				get
				{
					return default(RaycastHit);
				}
				[Token(Token = "0x6001691")]
				[Address(RVA = "0x1E339F0", Offset = "0x1E339F0", VA = "0x1E339F0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D48C", Offset = "0xA8D48C")]
				private set
				{
				}
			}

			[Token(Token = "0x1700018E")]
			public RaycastHit GetHitPoint
			{
				[Token(Token = "0x6001692")]
				[Address(RVA = "0x1E33A10", Offset = "0x1E33A10", VA = "0x1E33A10")]
				get
				{
					return default(RaycastHit);
				}
			}

			[Token(Token = "0x1700018F")]
			public float stepHeightFromGround
			{
				[Token(Token = "0x6001698")]
				[Address(RVA = "0x1E34BC4", Offset = "0x1E34BC4", VA = "0x1E34BC4")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000190")]
			private float rootYOffset
			{
				[Token(Token = "0x60016A1")]
				[Address(RVA = "0x1E3542C", Offset = "0x1E3542C", VA = "0x1E3542C")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x6001693")]
			[Address(RVA = "0x1E33A58", Offset = "0x1E33A58", VA = "0x1E33A58")]
			public void SetFootPosition(Vector3 position)
			{
			}

			[Token(Token = "0x6001694")]
			[Address(RVA = "0x1E33A6C", Offset = "0x1E33A6C", VA = "0x1E33A6C")]
			public void Initiate(Grounding grounding, Transform transform)
			{
			}

			[Token(Token = "0x6001695")]
			[Address(RVA = "0x1E33AFC", Offset = "0x1E33AFC", VA = "0x1E33AFC")]
			public void OnEnable()
			{
			}

			[Token(Token = "0x6001696")]
			[Address(RVA = "0x1E33B48", Offset = "0x1E33B48", VA = "0x1E33B48")]
			public void Reset()
			{
			}

			[Token(Token = "0x6001697")]
			[Address(RVA = "0x1E33BB8", Offset = "0x1E33BB8", VA = "0x1E33BB8")]
			public void Process()
			{
			}

			[Token(Token = "0x6001699")]
			[Address(RVA = "0x1E34850", Offset = "0x1E34850", VA = "0x1E34850")]
			private RaycastHit GetCapsuleHit(Vector3 offsetFromHeel)
			{
				return default(RaycastHit);
			}

			[Token(Token = "0x600169A")]
			[Address(RVA = "0x1E34404", Offset = "0x1E34404", VA = "0x1E34404")]
			private RaycastHit GetRaycastHit(Vector3 offsetFromHeel)
			{
				return default(RaycastHit);
			}

			[Token(Token = "0x600169B")]
			[Address(RVA = "0x1E3535C", Offset = "0x1E3535C", VA = "0x1E3535C")]
			private Vector3 RotateNormal(Vector3 normal)
			{
				return default(Vector3);
			}

			[Token(Token = "0x600169C")]
			[Address(RVA = "0x1E3468C", Offset = "0x1E3468C", VA = "0x1E3468C")]
			private void SetFootToPoint(Vector3 normal, Vector3 point)
			{
			}

			[Token(Token = "0x600169D")]
			[Address(RVA = "0x1E34718", Offset = "0x1E34718", VA = "0x1E34718")]
			private void SetFootToPlane(Vector3 planeNormal, Vector3 planePoint, Vector3 heelHitPoint)
			{
			}

			[Token(Token = "0x600169E")]
			[Address(RVA = "0x1E353CC", Offset = "0x1E353CC", VA = "0x1E353CC")]
			private float GetHeightFromGround(Vector3 hitPoint)
			{
				return default(float);
			}

			[Token(Token = "0x600169F")]
			[Address(RVA = "0x1E34BEC", Offset = "0x1E34BEC", VA = "0x1E34BEC")]
			private void RotateFoot()
			{
			}

			[Token(Token = "0x60016A0")]
			[Address(RVA = "0x1E354C0", Offset = "0x1E354C0", VA = "0x1E354C0")]
			private Quaternion GetRotationOffsetTarget()
			{
				return default(Quaternion);
			}

			[Token(Token = "0x60016A2")]
			[Address(RVA = "0x1E3554C", Offset = "0x1E3554C", VA = "0x1E3554C")]
			public Leg()
			{
			}
		}

		[Token(Token = "0x200038C")]
		public class Pelvis
		{
			[Token(Token = "0x4000F92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA84548", Offset = "0xA84548")]
			private Vector3 <IKOffset>k__BackingField;

			[Token(Token = "0x4000F93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA84558", Offset = "0xA84558")]
			private float <heightOffset>k__BackingField;

			[Token(Token = "0x4000F94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Grounding grounding;

			[Token(Token = "0x4000F95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 lastRootPosition;

			[Token(Token = "0x4000F96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float damperF;

			[Token(Token = "0x4000F97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private bool initiated;

			[Token(Token = "0x4000F98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float lastTime;

			[Token(Token = "0x17000191")]
			public Vector3 IKOffset
			{
				[Token(Token = "0x60016A3")]
				[Address(RVA = "0x1E35E38", Offset = "0x1E35E38", VA = "0x1E35E38")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D49C", Offset = "0xA8D49C")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x60016A4")]
				[Address(RVA = "0x1E35E44", Offset = "0x1E35E44", VA = "0x1E35E44")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D4AC", Offset = "0xA8D4AC")]
				private set
				{
				}
			}

			[Token(Token = "0x17000192")]
			public float heightOffset
			{
				[Token(Token = "0x60016A5")]
				[Address(RVA = "0x1E35E50", Offset = "0x1E35E50", VA = "0x1E35E50")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D4BC", Offset = "0xA8D4BC")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60016A6")]
				[Address(RVA = "0x1E35E58", Offset = "0x1E35E58", VA = "0x1E35E58")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D4CC", Offset = "0xA8D4CC")]
				private set
				{
				}
			}

			[Token(Token = "0x60016A7")]
			[Address(RVA = "0x1E35E60", Offset = "0x1E35E60", VA = "0x1E35E60")]
			public void Initiate(Grounding grounding)
			{
			}

			[Token(Token = "0x60016A8")]
			[Address(RVA = "0x1E35EF0", Offset = "0x1E35EF0", VA = "0x1E35EF0")]
			public void Reset()
			{
			}

			[Token(Token = "0x60016A9")]
			[Address(RVA = "0x1E35E90", Offset = "0x1E35E90", VA = "0x1E35E90")]
			public void OnEnable()
			{
			}

			[Token(Token = "0x60016AA")]
			[Address(RVA = "0x1E35F5C", Offset = "0x1E35F5C", VA = "0x1E35F5C")]
			public void Process(float lowestOffset, float highestOffset, bool isGrounded)
			{
			}

			[Token(Token = "0x60016AB")]
			[Address(RVA = "0x1E360FC", Offset = "0x1E360FC", VA = "0x1E360FC")]
			public Pelvis()
			{
			}
		}

		[Token(Token = "0x40009B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8044C", Offset = "0xA8044C")]
		public LayerMask layers;

		[Token(Token = "0x40009B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80484", Offset = "0xA80484")]
		public float maxStep;

		[Token(Token = "0x40009B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA804BC", Offset = "0xA804BC")]
		public float heightOffset;

		[Token(Token = "0x40009BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA804F4", Offset = "0xA804F4")]
		public float footSpeed;

		[Token(Token = "0x40009BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8052C", Offset = "0xA8052C")]
		public float footRadius;

		[Token(Token = "0x40009BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80564", Offset = "0xA80564")]
		[HideInInspector]
		public float footCenterOffset;

		[Token(Token = "0x40009BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA805B0", Offset = "0xA805B0")]
		public float prediction;

		[Token(Token = "0x40009BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA805E8", Offset = "0xA805E8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA805E8", Offset = "0xA805E8")]
		public float footRotationWeight;

		[Token(Token = "0x40009BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8063C", Offset = "0xA8063C")]
		public float footRotationSpeed;

		[Token(Token = "0x40009C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80674", Offset = "0xA80674")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA80674", Offset = "0xA80674")]
		public float maxFootRotationAngle;

		[Token(Token = "0x40009C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA806CC", Offset = "0xA806CC")]
		public bool rotateSolver;

		[Token(Token = "0x40009C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80704", Offset = "0xA80704")]
		public float pelvisSpeed;

		[Token(Token = "0x40009C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8073C", Offset = "0xA8073C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA8073C", Offset = "0xA8073C")]
		public float pelvisDamper;

		[Token(Token = "0x40009C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80790", Offset = "0xA80790")]
		public float lowerPelvisWeight;

		[Token(Token = "0x40009C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA807C8", Offset = "0xA807C8")]
		public float liftPelvisWeight;

		[Token(Token = "0x40009C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80800", Offset = "0xA80800")]
		public float rootSphereCastRadius;

		[Token(Token = "0x40009C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80838", Offset = "0xA80838")]
		public bool overstepFallsDown;

		[Token(Token = "0x40009C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80870", Offset = "0xA80870")]
		public Quality quality;

		[Token(Token = "0x40009C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA808A8", Offset = "0xA808A8")]
		private Leg[] <legs>k__BackingField;

		[Token(Token = "0x40009CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA808B8", Offset = "0xA808B8")]
		private Pelvis <pelvis>k__BackingField;

		[Token(Token = "0x40009CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA808C8", Offset = "0xA808C8")]
		private bool <isGrounded>k__BackingField;

		[Token(Token = "0x40009CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA808D8", Offset = "0xA808D8")]
		private Transform <root>k__BackingField;

		[Token(Token = "0x40009CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA808E8", Offset = "0xA808E8")]
		private RaycastHit <rootHit>k__BackingField;

		[Token(Token = "0x40009CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public OnRaycastDelegate Raycast;

		[Token(Token = "0x40009CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public OnCapsuleCastDelegate CapsuleCast;

		[Token(Token = "0x40009D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public OnSphereCastDelegate SphereCast;

		[Token(Token = "0x40009D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool initiated;

		[Token(Token = "0x170000DC")]
		public Leg[] legs
		{
			[Token(Token = "0x6000FA0")]
			[Address(RVA = "0x28A3C14", Offset = "0x28A3C14", VA = "0x28A3C14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8AAAC", Offset = "0xA8AAAC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FA1")]
			[Address(RVA = "0x28A3C1C", Offset = "0x28A3C1C", VA = "0x28A3C1C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8AABC", Offset = "0xA8AABC")]
			private set
			{
			}
		}

		[Token(Token = "0x170000DD")]
		public Pelvis pelvis
		{
			[Token(Token = "0x6000FA2")]
			[Address(RVA = "0x28A3C24", Offset = "0x28A3C24", VA = "0x28A3C24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8AACC", Offset = "0xA8AACC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FA3")]
			[Address(RVA = "0x28A3C2C", Offset = "0x28A3C2C", VA = "0x28A3C2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8AADC", Offset = "0xA8AADC")]
			private set
			{
			}
		}

		[Token(Token = "0x170000DE")]
		public bool isGrounded
		{
			[Token(Token = "0x6000FA4")]
			[Address(RVA = "0x28A3C34", Offset = "0x28A3C34", VA = "0x28A3C34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8AAEC", Offset = "0xA8AAEC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FA5")]
			[Address(RVA = "0x28A3C3C", Offset = "0x28A3C3C", VA = "0x28A3C3C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8AAFC", Offset = "0xA8AAFC")]
			private set
			{
			}
		}

		[Token(Token = "0x170000DF")]
		public Transform root
		{
			[Token(Token = "0x6000FA6")]
			[Address(RVA = "0x28A3C48", Offset = "0x28A3C48", VA = "0x28A3C48")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8AB0C", Offset = "0xA8AB0C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FA7")]
			[Address(RVA = "0x28A3C50", Offset = "0x28A3C50", VA = "0x28A3C50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8AB1C", Offset = "0xA8AB1C")]
			private set
			{
			}
		}

		[Token(Token = "0x170000E0")]
		public RaycastHit rootHit
		{
			[Token(Token = "0x6000FA8")]
			[Address(RVA = "0x28A3C58", Offset = "0x28A3C58", VA = "0x28A3C58")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8AB2C", Offset = "0xA8AB2C")]
			get
			{
				return default(RaycastHit);
			}
			[Token(Token = "0x6000FA9")]
			[Address(RVA = "0x28A3C70", Offset = "0x28A3C70", VA = "0x28A3C70")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8AB3C", Offset = "0xA8AB3C")]
			private set
			{
			}
		}

		[Token(Token = "0x170000E1")]
		public bool rootGrounded
		{
			[Token(Token = "0x6000FAA")]
			[Address(RVA = "0x28A3C90", Offset = "0x28A3C90", VA = "0x28A3C90")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E2")]
		public Vector3 up
		{
			[Token(Token = "0x6000FB2")]
			[Address(RVA = "0x28A3F48", Offset = "0x28A3F48", VA = "0x28A3F48")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000E3")]
		private bool useRootRotation
		{
			[Token(Token = "0x6000FB5")]
			[Address(RVA = "0x28A47E4", Offset = "0x28A47E4", VA = "0x28A47E4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000FAB")]
		[Address(RVA = "0x28A3CE4", Offset = "0x28A3CE4", VA = "0x28A3CE4")]
		public RaycastHit GetRootHit(float maxDistanceMlp = 10f)
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x6000FAC")]
		[Address(RVA = "0x28A3F8C", Offset = "0x28A3F8C", VA = "0x28A3F8C")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FAD")]
		[Address(RVA = "0x28A40A0", Offset = "0x28A40A0", VA = "0x28A40A0")]
		public void Initiate(Transform root, Transform[] feet)
		{
		}

		[Token(Token = "0x6000FAE")]
		[Address(RVA = "0x28A4370", Offset = "0x28A4370", VA = "0x28A4370")]
		public void Update()
		{
		}

		[Token(Token = "0x6000FAF")]
		[Address(RVA = "0x28A45F8", Offset = "0x28A45F8", VA = "0x28A45F8")]
		public Vector3 GetLegsPlaneNormal()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FB0")]
		[Address(RVA = "0x28A4758", Offset = "0x28A4758", VA = "0x28A4758")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000FB1")]
		[Address(RVA = "0x28A45E0", Offset = "0x28A45E0", VA = "0x28A45E0")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x6000FB3")]
		[Address(RVA = "0x28A4864", Offset = "0x28A4864", VA = "0x28A4864")]
		public float GetVerticalOffset(Vector3 p1, Vector3 p2)
		{
			return default(float);
		}

		[Token(Token = "0x6000FB4")]
		[Address(RVA = "0x28A48F4", Offset = "0x28A48F4", VA = "0x28A48F4")]
		public Vector3 Flatten(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FB6")]
		[Address(RVA = "0x28A49B0", Offset = "0x28A49B0", VA = "0x28A49B0")]
		public Vector3 GetFootCenterOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FB7")]
		[Address(RVA = "0x28A4A2C", Offset = "0x28A4A2C", VA = "0x28A4A2C")]
		public Grounding()
		{
		}
	}
	[Token(Token = "0x2000265")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xA7DCB8", Offset = "0xA7DCB8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xA7DCB8", Offset = "0xA7DCB8")]
	public class AimIK : IK
	{
		[Token(Token = "0x40009D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverAim solver;

		[Token(Token = "0x6000FB8")]
		[Address(RVA = "0x230F524", Offset = "0x230F524", VA = "0x230F524", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8AB4C", Offset = "0xA8AB4C")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000FB9")]
		[Address(RVA = "0x230F56C", Offset = "0x230F56C", VA = "0x230F56C", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8AB84", Offset = "0xA8AB84")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000FBA")]
		[Address(RVA = "0x230F5B4", Offset = "0x230F5B4", VA = "0x230F5B4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8ABBC", Offset = "0xA8ABBC")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x6000FBB")]
		[Address(RVA = "0x230F5FC", Offset = "0x230F5FC", VA = "0x230F5FC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8ABF4", Offset = "0xA8ABF4")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000FBC")]
		[Address(RVA = "0x230F644", Offset = "0x230F644", VA = "0x230F644")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8AC2C", Offset = "0xA8AC2C")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000FBD")]
		[Address(RVA = "0x230F68C", Offset = "0x230F68C", VA = "0x230F68C", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000FBE")]
		[Address(RVA = "0x230F694", Offset = "0x230F694", VA = "0x230F694")]
		public AimIK()
		{
		}
	}
	[Token(Token = "0x2000266")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xA7DD18", Offset = "0xA7DD18")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xA7DD18", Offset = "0xA7DD18")]
	public class ArmIK : IK
	{
		[Token(Token = "0x40009D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverArm solver;

		[Token(Token = "0x6000FBF")]
		[Address(RVA = "0x2312A80", Offset = "0x2312A80", VA = "0x2312A80", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8AC64", Offset = "0xA8AC64")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000FC0")]
		[Address(RVA = "0x2312AC8", Offset = "0x2312AC8", VA = "0x2312AC8", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8AC9C", Offset = "0xA8AC9C")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000FC1")]
		[Address(RVA = "0x2312B10", Offset = "0x2312B10", VA = "0x2312B10")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8ACD4", Offset = "0xA8ACD4")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000FC2")]
		[Address(RVA = "0x2312B58", Offset = "0x2312B58", VA = "0x2312B58")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8AD0C", Offset = "0xA8AD0C")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000FC3")]
		[Address(RVA = "0x2312BA0", Offset = "0x2312BA0", VA = "0x2312BA0", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000FC4")]
		[Address(RVA = "0x2312BA8", Offset = "0x2312BA8", VA = "0x2312BA8")]
		public ArmIK()
		{
		}
	}
	[Token(Token = "0x2000267")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xA7DD78", Offset = "0xA7DD78")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xA7DD78", Offset = "0xA7DD78")]
	public class CCDIK : IK
	{
		[Token(Token = "0x40009D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverCCD solver;

		[Token(Token = "0x6000FC5")]
		[Address(RVA = "0x2320EF8", Offset = "0x2320EF8", VA = "0x2320EF8", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8AD44", Offset = "0xA8AD44")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000FC6")]
		[Address(RVA = "0x2320F40", Offset = "0x2320F40", VA = "0x2320F40", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8AD7C", Offset = "0xA8AD7C")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000FC7")]
		[Address(RVA = "0x2320F88", Offset = "0x2320F88", VA = "0x2320F88")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8ADB4", Offset = "0xA8ADB4")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000FC8")]
		[Address(RVA = "0x2320FD0", Offset = "0x2320FD0", VA = "0x2320FD0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8ADEC", Offset = "0xA8ADEC")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000FC9")]
		[Address(RVA = "0x2321018", Offset = "0x2321018", VA = "0x2321018", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000FCA")]
		[Address(RVA = "0x2321020", Offset = "0x2321020", VA = "0x2321020")]
		public CCDIK()
		{
		}
	}
	[Token(Token = "0x2000268")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xA7DDD8", Offset = "0xA7DDD8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xA7DDD8", Offset = "0xA7DDD8")]
	public class FABRIK : IK
	{
		[Token(Token = "0x40009D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverFABRIK solver;

		[Token(Token = "0x6000FCB")]
		[Address(RVA = "0x2761AE8", Offset = "0x2761AE8", VA = "0x2761AE8", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8AE24", Offset = "0xA8AE24")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000FCC")]
		[Address(RVA = "0x2761B30", Offset = "0x2761B30", VA = "0x2761B30", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8AE5C", Offset = "0xA8AE5C")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000FCD")]
		[Address(RVA = "0x2761B78", Offset = "0x2761B78", VA = "0x2761B78")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8AE94", Offset = "0xA8AE94")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000FCE")]
		[Address(RVA = "0x2761BC0", Offset = "0x2761BC0", VA = "0x2761BC0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8AECC", Offset = "0xA8AECC")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000FCF")]
		[Address(RVA = "0x2761C08", Offset = "0x2761C08", VA = "0x2761C08", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000FD0")]
		[Address(RVA = "0x2761C10", Offset = "0x2761C10", VA = "0x2761C10")]
		public FABRIK()
		{
		}
	}
	[Token(Token = "0x2000269")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xA7DE38", Offset = "0xA7DE38")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xA7DE38", Offset = "0xA7DE38")]
	public class FABRIKRoot : IK
	{
		[Token(Token = "0x40009D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverFABRIKRoot solver;

		[Token(Token = "0x6000FD1")]
		[Address(RVA = "0x2762158", Offset = "0x2762158", VA = "0x2762158", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8AF04", Offset = "0xA8AF04")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000FD2")]
		[Address(RVA = "0x27621A0", Offset = "0x27621A0", VA = "0x27621A0", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8AF3C", Offset = "0xA8AF3C")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0x27621E8", Offset = "0x27621E8", VA = "0x27621E8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8AF74", Offset = "0xA8AF74")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000FD4")]
		[Address(RVA = "0x2762230", Offset = "0x2762230", VA = "0x2762230")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8AFAC", Offset = "0xA8AFAC")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000FD5")]
		[Address(RVA = "0x2762278", Offset = "0x2762278", VA = "0x2762278", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000FD6")]
		[Address(RVA = "0x2762280", Offset = "0x2762280", VA = "0x2762280")]
		public FABRIKRoot()
		{
		}
	}
	[Token(Token = "0x200026A")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xA7DE98", Offset = "0xA7DE98")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xA7DE98", Offset = "0xA7DE98")]
	public class FullBodyBipedIK : IK
	{
		[Token(Token = "0x40009D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BipedReferences references;

		[Token(Token = "0x40009D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IKSolverFullBodyBiped solver;

		[Token(Token = "0x6000FD7")]
		[Address(RVA = "0x276B2C0", Offset = "0x276B2C0", VA = "0x276B2C0", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8AFE4", Offset = "0xA8AFE4")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000FD8")]
		[Address(RVA = "0x276B308", Offset = "0x276B308", VA = "0x276B308", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B01C", Offset = "0xA8B01C")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000FD9")]
		[Address(RVA = "0x276B350", Offset = "0x276B350", VA = "0x276B350")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B054", Offset = "0xA8B054")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x6000FDA")]
		[Address(RVA = "0x276B398", Offset = "0x276B398", VA = "0x276B398")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B08C", Offset = "0xA8B08C")]
		private void OpenInspectorTutorial()
		{
		}

		[Token(Token = "0x6000FDB")]
		[Address(RVA = "0x276B3E0", Offset = "0x276B3E0", VA = "0x276B3E0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B0C4", Offset = "0xA8B0C4")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000FDC")]
		[Address(RVA = "0x276B428", Offset = "0x276B428", VA = "0x276B428")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B0FC", Offset = "0xA8B0FC")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000FDD")]
		[Address(RVA = "0x276B470", Offset = "0x276B470", VA = "0x276B470")]
		public void SetReferences(BipedReferences references, Transform rootNode)
		{
		}

		[Token(Token = "0x6000FDE")]
		[Address(RVA = "0x276B4B4", Offset = "0x276B4B4", VA = "0x276B4B4", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000FDF")]
		[Address(RVA = "0x276B4BC", Offset = "0x276B4BC", VA = "0x276B4BC")]
		public bool ReferencesError(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FE0")]
		[Address(RVA = "0x276B6A4", Offset = "0x276B6A4", VA = "0x276B6A4")]
		public bool ReferencesWarning(ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FE1")]
		[Address(RVA = "0x276B944", Offset = "0x276B944", VA = "0x276B944")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B134", Offset = "0xA8B134")]
		private void Reinitiate()
		{
		}

		[Token(Token = "0x6000FE2")]
		[Address(RVA = "0x276B964", Offset = "0x276B964", VA = "0x276B964")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B16C", Offset = "0xA8B16C")]
		private void AutoDetectReferences()
		{
		}

		[Token(Token = "0x6000FE3")]
		[Address(RVA = "0x276BA54", Offset = "0x276BA54", VA = "0x276BA54")]
		public FullBodyBipedIK()
		{
		}
	}
	[Token(Token = "0x200026B")]
	public abstract class IK : SolverManager
	{
		[Token(Token = "0x6000FE4")]
		public abstract IKSolver GetIKSolver();

		[Token(Token = "0x6000FE5")]
		[Address(RVA = "0x28AE09C", Offset = "0x28AE09C", VA = "0x28AE09C", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6000FE6")]
		[Address(RVA = "0x28AE190", Offset = "0x28AE190", VA = "0x28AE190", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6000FE7")]
		[Address(RVA = "0x28AE388", Offset = "0x28AE388", VA = "0x28AE388", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x6000FE8")]
		protected abstract void OpenUserManual();

		[Token(Token = "0x6000FE9")]
		protected abstract void OpenScriptReference();

		[Token(Token = "0x6000FEA")]
		[Address(RVA = "0x28AE3E8", Offset = "0x28AE3E8", VA = "0x28AE3E8")]
		protected IK()
		{
		}
	}
	[Token(Token = "0x200026C")]
	public class IKExecutionOrder : MonoBehaviour
	{
		[Token(Token = "0x40009D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA808F8", Offset = "0xA808F8")]
		public IK[] IKComponents;

		[Token(Token = "0x40009DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80930", Offset = "0xA80930")]
		public Animator animator;

		[Token(Token = "0x40009DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool fixedFrame;

		[Token(Token = "0x170000E4")]
		private bool animatePhysics
		{
			[Token(Token = "0x6000FEB")]
			[Address(RVA = "0x28B0A1C", Offset = "0x28B0A1C", VA = "0x28B0A1C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000FEC")]
		[Address(RVA = "0x28B0AB4", Offset = "0x28B0AB4", VA = "0x28B0AB4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FED")]
		[Address(RVA = "0x28B0B24", Offset = "0x28B0B24", VA = "0x28B0B24")]
		private void Update()
		{
		}

		[Token(Token = "0x6000FEE")]
		[Address(RVA = "0x28B0BE0", Offset = "0x28B0BE0", VA = "0x28B0BE0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000FEF")]
		[Address(RVA = "0x28B0C1C", Offset = "0x28B0C1C", VA = "0x28B0C1C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000FF0")]
		[Address(RVA = "0x28B0B58", Offset = "0x28B0B58", VA = "0x28B0B58")]
		private void FixTransforms()
		{
		}

		[Token(Token = "0x6000FF1")]
		[Address(RVA = "0x28B0CA8", Offset = "0x28B0CA8", VA = "0x28B0CA8")]
		public IKExecutionOrder()
		{
		}
	}
	[Token(Token = "0x200026D")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xA7DEF8", Offset = "0xA7DEF8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xA7DEF8", Offset = "0xA7DEF8")]
	public class LegIK : IK
	{
		[Token(Token = "0x40009DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLeg solver;

		[Token(Token = "0x6000FF2")]
		[Address(RVA = "0x22F272C", Offset = "0x22F272C", VA = "0x22F272C", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B1A4", Offset = "0xA8B1A4")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000FF3")]
		[Address(RVA = "0x22F2774", Offset = "0x22F2774", VA = "0x22F2774", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B1DC", Offset = "0xA8B1DC")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000FF4")]
		[Address(RVA = "0x22F27BC", Offset = "0x22F27BC", VA = "0x22F27BC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B214", Offset = "0xA8B214")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000FF5")]
		[Address(RVA = "0x22F2804", Offset = "0x22F2804", VA = "0x22F2804")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B24C", Offset = "0xA8B24C")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000FF6")]
		[Address(RVA = "0x22F284C", Offset = "0x22F284C", VA = "0x22F284C", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000FF7")]
		[Address(RVA = "0x22F2854", Offset = "0x22F2854", VA = "0x22F2854")]
		public LegIK()
		{
		}
	}
	[Token(Token = "0x200026E")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xA7DF58", Offset = "0xA7DF58")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xA7DF58", Offset = "0xA7DF58")]
	public class LimbIK : IK
	{
		[Token(Token = "0x40009DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLimb solver;

		[Token(Token = "0x6000FF8")]
		[Address(RVA = "0x22F30B4", Offset = "0x22F30B4", VA = "0x22F30B4", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B284", Offset = "0xA8B284")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000FF9")]
		[Address(RVA = "0x22F30FC", Offset = "0x22F30FC", VA = "0x22F30FC", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B2BC", Offset = "0xA8B2BC")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000FFA")]
		[Address(RVA = "0x22F3144", Offset = "0x22F3144", VA = "0x22F3144")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B2F4", Offset = "0xA8B2F4")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000FFB")]
		[Address(RVA = "0x22F318C", Offset = "0x22F318C", VA = "0x22F318C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B32C", Offset = "0xA8B32C")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000FFC")]
		[Address(RVA = "0x22F31D4", Offset = "0x22F31D4", VA = "0x22F31D4", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000FFD")]
		[Address(RVA = "0x22F31DC", Offset = "0x22F31DC", VA = "0x22F31DC")]
		public LimbIK()
		{
		}
	}
	[Token(Token = "0x200026F")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xA7DFB8", Offset = "0xA7DFB8")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xA7DFB8", Offset = "0xA7DFB8")]
	public class LookAtIK : IK
	{
		[Token(Token = "0x40009DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLookAt solver;

		[Token(Token = "0x6000FFE")]
		[Address(RVA = "0x22F3FA4", Offset = "0x22F3FA4", VA = "0x22F3FA4", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B364", Offset = "0xA8B364")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000FFF")]
		[Address(RVA = "0x22F3FEC", Offset = "0x22F3FEC", VA = "0x22F3FEC", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B39C", Offset = "0xA8B39C")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6001000")]
		[Address(RVA = "0x22F4034", Offset = "0x22F4034", VA = "0x22F4034")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B3D4", Offset = "0xA8B3D4")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6001001")]
		[Address(RVA = "0x22F407C", Offset = "0x22F407C", VA = "0x22F407C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B40C", Offset = "0xA8B40C")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6001002")]
		[Address(RVA = "0x22F40C4", Offset = "0x22F40C4", VA = "0x22F40C4", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6001003")]
		[Address(RVA = "0x22F40CC", Offset = "0x22F40CC", VA = "0x22F40CC")]
		public LookAtIK()
		{
		}
	}
	[Token(Token = "0x2000270")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xA7E018", Offset = "0xA7E018")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xA7E018", Offset = "0xA7E018")]
	public class TrigonometricIK : IK
	{
		[Token(Token = "0x40009DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverTrigonometric solver;

		[Token(Token = "0x6001004")]
		[Address(RVA = "0x1A6761C", Offset = "0x1A6761C", VA = "0x1A6761C", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B444", Offset = "0xA8B444")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6001005")]
		[Address(RVA = "0x1A67664", Offset = "0x1A67664", VA = "0x1A67664", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B47C", Offset = "0xA8B47C")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6001006")]
		[Address(RVA = "0x1A676AC", Offset = "0x1A676AC", VA = "0x1A676AC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B4B4", Offset = "0xA8B4B4")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6001007")]
		[Address(RVA = "0x1A676F4", Offset = "0x1A676F4", VA = "0x1A676F4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B4EC", Offset = "0xA8B4EC")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6001008")]
		[Address(RVA = "0x1A6773C", Offset = "0x1A6773C", VA = "0x1A6773C", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6001009")]
		[Address(RVA = "0x1A67744", Offset = "0x1A67744", VA = "0x1A67744")]
		public TrigonometricIK()
		{
		}
	}
	[Token(Token = "0x2000271")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xA7E078", Offset = "0xA7E078")]
	public class VRIK : IK
	{
		[Serializable]
		[Token(Token = "0x200038D")]
		public class References
		{
			[Token(Token = "0x4000F99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform root;

			[Token(Token = "0x4000F9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "LargeHeader", RVA = "0xA84568", Offset = "0xA84568")]
			public Transform pelvis;

			[Token(Token = "0x4000F9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform spine;

			[Token(Token = "0x4000F9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA845A0", Offset = "0xA845A0")]
			public Transform chest;

			[Token(Token = "0x4000F9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA845D8", Offset = "0xA845D8")]
			public Transform neck;

			[Token(Token = "0x4000F9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Transform head;

			[Token(Token = "0x4000F9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[AttributeAttribute(Name = "LargeHeader", RVA = "0xA84610", Offset = "0xA84610")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA84610", Offset = "0xA84610")]
			public Transform leftShoulder;

			[Token(Token = "0x4000FA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA84670", Offset = "0xA84670")]
			public Transform leftUpperArm;

			[Token(Token = "0x4000FA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA846A8", Offset = "0xA846A8")]
			public Transform leftForearm;

			[Token(Token = "0x4000FA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA846E0", Offset = "0xA846E0")]
			public Transform leftHand;

			[Token(Token = "0x4000FA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[AttributeAttribute(Name = "LargeHeader", RVA = "0xA84718", Offset = "0xA84718")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA84718", Offset = "0xA84718")]
			public Transform rightShoulder;

			[Token(Token = "0x4000FA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA84778", Offset = "0xA84778")]
			public Transform rightUpperArm;

			[Token(Token = "0x4000FA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA847B0", Offset = "0xA847B0")]
			public Transform rightForearm;

			[Token(Token = "0x4000FA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA847E8", Offset = "0xA847E8")]
			public Transform rightHand;

			[Token(Token = "0x4000FA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[AttributeAttribute(Name = "LargeHeader", RVA = "0xA84820", Offset = "0xA84820")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA84820", Offset = "0xA84820")]
			public Transform leftThigh;

			[Token(Token = "0x4000FA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA84880", Offset = "0xA84880")]
			public Transform leftCalf;

			[Token(Token = "0x4000FA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA848B8", Offset = "0xA848B8")]
			public Transform leftFoot;

			[Token(Token = "0x4000FAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA848F0", Offset = "0xA848F0")]
			public Transform leftToes;

			[Token(Token = "0x4000FAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[AttributeAttribute(Name = "LargeHeader", RVA = "0xA84928", Offset = "0xA84928")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA84928", Offset = "0xA84928")]
			public Transform rightThigh;

			[Token(Token = "0x4000FAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA84988", Offset = "0xA84988")]
			public Transform rightCalf;

			[Token(Token = "0x4000FAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA849C0", Offset = "0xA849C0")]
			public Transform rightFoot;

			[Token(Token = "0x4000FAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA849F8", Offset = "0xA849F8")]
			public Transform rightToes;

			[Token(Token = "0x17000193")]
			public bool isFilled
			{
				[Token(Token = "0x60016AF")]
				[Address(RVA = "0x1EAEC40", Offset = "0x1EAEC40", VA = "0x1EAEC40")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000194")]
			public bool isEmpty
			{
				[Token(Token = "0x60016B0")]
				[Address(RVA = "0x1EAF220", Offset = "0x1EAF220", VA = "0x1EAF220")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60016AC")]
			[Address(RVA = "0x1EAE4D0", Offset = "0x1EAE4D0", VA = "0x1EAE4D0")]
			public References()
			{
			}

			[Token(Token = "0x60016AD")]
			[Address(RVA = "0x1EAE4D8", Offset = "0x1EAE4D8", VA = "0x1EAE4D8")]
			public References(BipedReferences b)
			{
			}

			[Token(Token = "0x60016AE")]
			[Address(RVA = "0x1EAE6F0", Offset = "0x1EAE6F0", VA = "0x1EAE6F0")]
			public Transform[] GetTransforms()
			{
				return null;
			}

			[Token(Token = "0x60016B1")]
			[Address(RVA = "0x1EAF698", Offset = "0x1EAF698", VA = "0x1EAF698")]
			public static bool AutoDetectReferences(Transform root, out References references)
			{
				return default(bool);
			}
		}

		[Token(Token = "0x40009E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "ContextMenuItemAttribute", RVA = "0xA80968", Offset = "0xA80968")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80968", Offset = "0xA80968")]
		public References references;

		[Token(Token = "0x40009E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA809E4", Offset = "0xA809E4")]
		public IKSolverVR solver;

		[Token(Token = "0x600100A")]
		[Address(RVA = "0x1A6E3B4", Offset = "0x1A6E3B4", VA = "0x1A6E3B4", Slot = "8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B524", Offset = "0xA8B524")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x600100B")]
		[Address(RVA = "0x1A6E3FC", Offset = "0x1A6E3FC", VA = "0x1A6E3FC", Slot = "9")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B55C", Offset = "0xA8B55C")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x600100C")]
		[Address(RVA = "0x1A6E444", Offset = "0x1A6E444", VA = "0x1A6E444")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B594", Offset = "0xA8B594")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x600100D")]
		[Address(RVA = "0x1A6E48C", Offset = "0x1A6E48C", VA = "0x1A6E48C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B5CC", Offset = "0xA8B5CC")]
		public void AutoDetectReferences()
		{
		}

		[Token(Token = "0x600100E")]
		[Address(RVA = "0x1A6E4B8", Offset = "0x1A6E4B8", VA = "0x1A6E4B8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B604", Offset = "0xA8B604")]
		public void GuessHandOrientations()
		{
		}

		[Token(Token = "0x600100F")]
		[Address(RVA = "0x1A6E4E0", Offset = "0x1A6E4E0", VA = "0x1A6E4E0", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6001010")]
		[Address(RVA = "0x1A6E4E8", Offset = "0x1A6E4E8", VA = "0x1A6E4E8", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6001011")]
		[Address(RVA = "0x1A6E568", Offset = "0x1A6E568", VA = "0x1A6E568", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6001012")]
		[Address(RVA = "0x1A6E6D4", Offset = "0x1A6E6D4", VA = "0x1A6E6D4")]
		public VRIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000272")]
	public class FABRIKChain
	{
		[Token(Token = "0x40009E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FABRIK ik;

		[Token(Token = "0x40009E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA80A1C", Offset = "0xA80A1C")]
		public float pull;

		[Token(Token = "0x40009E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA80A34", Offset = "0xA80A34")]
		public float pin;

		[Token(Token = "0x40009E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int[] children;

		[Token(Token = "0x6001013")]
		[Address(RVA = "0x2761C80", Offset = "0x2761C80", VA = "0x2761C80")]
		public bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001014")]
		[Address(RVA = "0x2761D5C", Offset = "0x2761D5C", VA = "0x2761D5C")]
		public void Initiate()
		{
		}

		[Token(Token = "0x6001015")]
		[Address(RVA = "0x2761D7C", Offset = "0x2761D7C", VA = "0x2761D7C")]
		public void Stage1(FABRIKChain[] chain)
		{
		}

		[Token(Token = "0x6001016")]
		[Address(RVA = "0x2761FF0", Offset = "0x2761FF0", VA = "0x2761FF0")]
		public void Stage2(Vector3 rootPosition, FABRIKChain[] chain)
		{
		}

		[Token(Token = "0x6001017")]
		[Address(RVA = "0x2761E50", Offset = "0x2761E50", VA = "0x2761E50")]
		private Vector3 GetCentroid(FABRIKChain[] chain)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001018")]
		[Address(RVA = "0x27620E8", Offset = "0x27620E8", VA = "0x27620E8")]
		public FABRIKChain()
		{
		}
	}
	[Token(Token = "0x2000273")]
	public class FBBIKArmBending : MonoBehaviour
	{
		[Token(Token = "0x40009E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x40009E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 bendDirectionOffsetLeft;

		[Token(Token = "0x40009E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 bendDirectionOffsetRight;

		[Token(Token = "0x40009E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 characterSpaceBendOffsetLeft;

		[Token(Token = "0x40009EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 characterSpaceBendOffsetRight;

		[Token(Token = "0x40009EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion leftHandTargetRotation;

		[Token(Token = "0x40009EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Quaternion rightHandTargetRotation;

		[Token(Token = "0x40009ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool initiated;

		[Token(Token = "0x6001019")]
		[Address(RVA = "0x27622F0", Offset = "0x27622F0", VA = "0x27622F0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600101A")]
		[Address(RVA = "0x2762768", Offset = "0x2762768", VA = "0x2762768")]
		private void OnPostFBBIK()
		{
		}

		[Token(Token = "0x600101B")]
		[Address(RVA = "0x2762924", Offset = "0x2762924", VA = "0x2762924")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600101C")]
		[Address(RVA = "0x2762A54", Offset = "0x2762A54", VA = "0x2762A54")]
		public FBBIKArmBending()
		{
		}
	}
	[Token(Token = "0x2000274")]
	public class FBBIKHeadEffector : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200038E")]
		public class BendBone
		{
			[Token(Token = "0x4000FAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA84A30", Offset = "0xA84A30")]
			public Transform transform;

			[Token(Token = "0x4000FB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA84A68", Offset = "0xA84A68")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA84A68", Offset = "0xA84A68")]
			public float weight;

			[Token(Token = "0x4000FB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private Quaternion defaultLocalRotation;

			[Token(Token = "0x60016B2")]
			[Address(RVA = "0x1E32630", Offset = "0x1E32630", VA = "0x1E32630")]
			public BendBone()
			{
			}

			[Token(Token = "0x60016B3")]
			[Address(RVA = "0x1E3266C", Offset = "0x1E3266C", VA = "0x1E3266C")]
			public BendBone(Transform transform, float weight)
			{
			}

			[Token(Token = "0x60016B4")]
			[Address(RVA = "0x1E326D0", Offset = "0x1E326D0", VA = "0x1E326D0")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x60016B5")]
			[Address(RVA = "0x1E32708", Offset = "0x1E32708", VA = "0x1E32708")]
			public void FixTransforms()
			{
			}
		}

		[Token(Token = "0x40009EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80A4C", Offset = "0xA80A4C")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x40009EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0xA80A84", Offset = "0xA80A84")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80A84", Offset = "0xA80A84")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA80A84", Offset = "0xA80A84")]
		public float positionWeight;

		[Token(Token = "0x40009F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80AFC", Offset = "0xA80AFC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA80AFC", Offset = "0xA80AFC")]
		public float bodyWeight;

		[Token(Token = "0x40009F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80B50", Offset = "0xA80B50")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA80B50", Offset = "0xA80B50")]
		public float thighWeight;

		[Token(Token = "0x40009F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80BA4", Offset = "0xA80BA4")]
		public bool handsPullBody;

		[Token(Token = "0x40009F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0xA80BDC", Offset = "0xA80BDC")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80BDC", Offset = "0xA80BDC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA80BDC", Offset = "0xA80BDC")]
		public float rotationWeight;

		[Token(Token = "0x40009F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80C54", Offset = "0xA80C54")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA80C54", Offset = "0xA80C54")]
		public float bodyClampWeight;

		[Token(Token = "0x40009F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80CA8", Offset = "0xA80CA8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA80CA8", Offset = "0xA80CA8")]
		public float headClampWeight;

		[Token(Token = "0x40009F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80CFC", Offset = "0xA80CFC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA80CFC", Offset = "0xA80CFC")]
		public float bendWeight;

		[Token(Token = "0x40009F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80D50", Offset = "0xA80D50")]
		public BendBone[] bendBones;

		[Token(Token = "0x40009F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0xA80D88", Offset = "0xA80D88")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80D88", Offset = "0xA80D88")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA80D88", Offset = "0xA80D88")]
		public float CCDWeight;

		[Token(Token = "0x40009F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80E00", Offset = "0xA80E00")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA80E00", Offset = "0xA80E00")]
		public float roll;

		[Token(Token = "0x40009FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80E54", Offset = "0xA80E54")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA80E54", Offset = "0xA80E54")]
		public float damper;

		[Token(Token = "0x40009FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80EAC", Offset = "0xA80EAC")]
		public Transform[] CCDBones;

		[Token(Token = "0x40009FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0xA80EE4", Offset = "0xA80EE4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80EE4", Offset = "0xA80EE4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA80EE4", Offset = "0xA80EE4")]
		public float postStretchWeight;

		[Token(Token = "0x40009FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80F5C", Offset = "0xA80F5C")]
		public float maxStretch;

		[Token(Token = "0x40009FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80F94", Offset = "0xA80F94")]
		public float stretchDamper;

		[Token(Token = "0x40009FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA80FCC", Offset = "0xA80FCC")]
		public bool fixHead;

		[Token(Token = "0x4000A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA81004", Offset = "0xA81004")]
		public Transform[] stretchBones;

		[Token(Token = "0x4000A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0xA8103C", Offset = "0xA8103C")]
		public Vector3 chestDirection;

		[Token(Token = "0x4000A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA81074", Offset = "0xA81074")]
		public float chestDirectionWeight;

		[Token(Token = "0x4000A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform[] chestBones;

		[Token(Token = "0x4000A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public IKSolver.UpdateDelegate OnPostHeadEffectorFK;

		[Token(Token = "0x4000A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 offset;

		[Token(Token = "0x4000A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 headToBody;

		[Token(Token = "0x4000A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 shoulderCenterToHead;

		[Token(Token = "0x4000A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Vector3 headToLeftThigh;

		[Token(Token = "0x4000A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Vector3 headToRightThigh;

		[Token(Token = "0x4000A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Vector3 leftShoulderPos;

		[Token(Token = "0x4000A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Vector3 rightShoulderPos;

		[Token(Token = "0x4000A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float shoulderDist;

		[Token(Token = "0x4000A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float leftShoulderDist;

		[Token(Token = "0x4000A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private float rightShoulderDist;

		[Token(Token = "0x4000A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Quaternion chestRotation;

		[Token(Token = "0x4000A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Quaternion headRotationRelativeToRoot;

		[Token(Token = "0x4000A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Quaternion[] ccdDefaultLocalRotations;

		[Token(Token = "0x4000A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Vector3 headLocalPosition;

		[Token(Token = "0x4000A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private Quaternion headLocalRotation;

		[Token(Token = "0x4000A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Vector3[] stretchLocalPositions;

		[Token(Token = "0x4000A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Quaternion[] stretchLocalRotations;

		[Token(Token = "0x4000A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Vector3[] chestLocalPositions;

		[Token(Token = "0x4000A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private Quaternion[] chestLocalRotations;

		[Token(Token = "0x4000A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private int bendBonesCount;

		[Token(Token = "0x4000A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private int ccdBonesCount;

		[Token(Token = "0x4000A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private int stretchBonesCount;

		[Token(Token = "0x4000A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private int chestBonesCount;

		[Token(Token = "0x600101D")]
		[Address(RVA = "0x2762A5C", Offset = "0x2762A5C", VA = "0x2762A5C")]
		private void Start()
		{
		}

		[Token(Token = "0x600101E")]
		[Address(RVA = "0x2762DE4", Offset = "0x2762DE4", VA = "0x2762DE4")]
		private void OnStoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600101F")]
		[Address(RVA = "0x27632C0", Offset = "0x27632C0", VA = "0x27632C0")]
		private void OnFixTransforms()
		{
		}

		[Token(Token = "0x6001020")]
		[Address(RVA = "0x276368C", Offset = "0x276368C", VA = "0x276368C")]
		private void OnPreRead()
		{
		}

		[Token(Token = "0x6001021")]
		[Address(RVA = "0x2763E18", Offset = "0x2763E18", VA = "0x2763E18")]
		private void SpineBend()
		{
		}

		[Token(Token = "0x6001022")]
		[Address(RVA = "0x27640F8", Offset = "0x27640F8", VA = "0x27640F8")]
		private void CCDPass()
		{
		}

		[Token(Token = "0x6001023")]
		[Address(RVA = "0x27643FC", Offset = "0x27643FC", VA = "0x27643FC")]
		private void Iterate(int iteration)
		{
		}

		[Token(Token = "0x6001024")]
		[Address(RVA = "0x2764BD0", Offset = "0x2764BD0", VA = "0x2764BD0")]
		private void OnPostUpdate()
		{
		}

		[Token(Token = "0x6001025")]
		[Address(RVA = "0x2763BFC", Offset = "0x2763BFC", VA = "0x2763BFC")]
		private void ChestDirection()
		{
		}

		[Token(Token = "0x6001026")]
		[Address(RVA = "0x2764D98", Offset = "0x2764D98", VA = "0x2764D98")]
		private void PostStretching()
		{
		}

		[Token(Token = "0x6001027")]
		[Address(RVA = "0x2764AE8", Offset = "0x2764AE8", VA = "0x2764AE8")]
		private void LerpSolverPosition(IKEffector effector, Vector3 position, float weight, Vector3 offset)
		{
		}

		[Token(Token = "0x6001028")]
		[Address(RVA = "0x2764A1C", Offset = "0x2764A1C", VA = "0x2764A1C")]
		private void Solve(ref Vector3 pos1, ref Vector3 pos2, float nominalDistance)
		{
		}

		[Token(Token = "0x6001029")]
		[Address(RVA = "0x276501C", Offset = "0x276501C", VA = "0x276501C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600102A")]
		[Address(RVA = "0x2765350", Offset = "0x2765350", VA = "0x2765350")]
		public FBBIKHeadEffector()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000275")]
	public class FBIKChain
	{
		[Serializable]
		[Token(Token = "0x200038F")]
		public class ChildConstraint
		{
			[Token(Token = "0x4000FB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float pushElasticity;

			[Token(Token = "0x4000FB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float pullElasticity;

			[Token(Token = "0x4000FB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private Transform bone1;

			[Token(Token = "0x4000FB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			private Transform bone2;

			[Token(Token = "0x4000FB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA84ADC", Offset = "0xA84ADC")]
			private float <nominalDistance>k__BackingField;

			[Token(Token = "0x4000FB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA84AEC", Offset = "0xA84AEC")]
			private bool <isRigid>k__BackingField;

			[Token(Token = "0x4000FB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float crossFade;

			[Token(Token = "0x4000FB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float inverseCrossFade;

			[Token(Token = "0x4000FBA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int chain1Index;

			[Token(Token = "0x4000FBB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int chain2Index;

			[Token(Token = "0x17000195")]
			public float nominalDistance
			{
				[Token(Token = "0x60016B6")]
				[Address(RVA = "0x1E327C4", Offset = "0x1E327C4", VA = "0x1E327C4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D4DC", Offset = "0xA8D4DC")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60016B7")]
				[Address(RVA = "0x1E327CC", Offset = "0x1E327CC", VA = "0x1E327CC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D4EC", Offset = "0xA8D4EC")]
				private set
				{
				}
			}

			[Token(Token = "0x17000196")]
			public bool isRigid
			{
				[Token(Token = "0x60016B8")]
				[Address(RVA = "0x1E327D4", Offset = "0x1E327D4", VA = "0x1E327D4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D4FC", Offset = "0xA8D4FC")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x60016B9")]
				[Address(RVA = "0x1E327DC", Offset = "0x1E327DC", VA = "0x1E327DC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D50C", Offset = "0xA8D50C")]
				private set
				{
				}
			}

			[Token(Token = "0x60016BA")]
			[Address(RVA = "0x1E327E8", Offset = "0x1E327E8", VA = "0x1E327E8")]
			public ChildConstraint(Transform bone1, Transform bone2, float pushElasticity = 0f, float pullElasticity = 0f)
			{
			}

			[Token(Token = "0x60016BB")]
			[Address(RVA = "0x1E32850", Offset = "0x1E32850", VA = "0x1E32850")]
			public void Initiate(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x60016BC")]
			[Address(RVA = "0x1E328A8", Offset = "0x1E328A8", VA = "0x1E328A8")]
			public void OnPreSolve(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x60016BD")]
			[Address(RVA = "0x1E32A4C", Offset = "0x1E32A4C", VA = "0x1E32A4C")]
			public void Solve(IKSolverFullBody solver)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000390")]
		public enum Smoothing
		{
			[Token(Token = "0x4000FBD")]
			None,
			[Token(Token = "0x4000FBE")]
			Exponential,
			[Token(Token = "0x4000FBF")]
			Cubic
		}

		[Token(Token = "0x4000A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA8108C", Offset = "0xA8108C")]
		public float pin;

		[Token(Token = "0x4000A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA810A4", Offset = "0xA810A4")]
		public float pull;

		[Token(Token = "0x4000A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA810BC", Offset = "0xA810BC")]
		public float push;

		[Token(Token = "0x4000A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA810D4", Offset = "0xA810D4")]
		public float pushParent;

		[Token(Token = "0x4000A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA810EC", Offset = "0xA810EC")]
		public float reach;

		[Token(Token = "0x4000A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Smoothing reachSmoothing;

		[Token(Token = "0x4000A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Smoothing pushSmoothing;

		[Token(Token = "0x4000A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IKSolver.Node[] nodes;

		[Token(Token = "0x4000A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int[] children;

		[Token(Token = "0x4000A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ChildConstraint[] childConstraints;

		[Token(Token = "0x4000A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public IKConstraintBend bendConstraint;

		[Token(Token = "0x4000A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float rootLength;

		[Token(Token = "0x4000A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool initiated;

		[Token(Token = "0x4000A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float length;

		[Token(Token = "0x4000A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float distance;

		[Token(Token = "0x4000A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private IKSolver.Point p;

		[Token(Token = "0x4000A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float reachForce;

		[Token(Token = "0x4000A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float pullParentSum;

		[Token(Token = "0x4000A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float[] crossFades;

		[Token(Token = "0x4000A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float sqrMag1;

		[Token(Token = "0x4000A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float sqrMag2;

		[Token(Token = "0x4000A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float sqrMagDif;

		[Token(Token = "0x4000A32")]
		private const float maxLimbLength = 0.99999f;

		[Token(Token = "0x600102B")]
		[Address(RVA = "0x2765AAC", Offset = "0x2765AAC", VA = "0x2765AAC")]
		public FBIKChain()
		{
		}

		[Token(Token = "0x600102C")]
		[Address(RVA = "0x2765BC8", Offset = "0x2765BC8", VA = "0x2765BC8")]
		public FBIKChain(float pin, float pull, params Transform[] nodeTransforms)
		{
		}

		[Token(Token = "0x600102D")]
		[Address(RVA = "0x2765D38", Offset = "0x2765D38", VA = "0x2765D38")]
		public void SetNodes(params Transform[] boneTransforms)
		{
		}

		[Token(Token = "0x600102E")]
		[Address(RVA = "0x2765E74", Offset = "0x2765E74", VA = "0x2765E74")]
		public int GetNodeIndex(Transform boneTransform)
		{
			return default(int);
		}

		[Token(Token = "0x600102F")]
		[Address(RVA = "0x2765F4C", Offset = "0x2765F4C", VA = "0x2765F4C")]
		public bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001030")]
		[Address(RVA = "0x2766070", Offset = "0x2766070", VA = "0x2766070")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001031")]
		[Address(RVA = "0x2766740", Offset = "0x2766740", VA = "0x2766740")]
		public void ReadPose(IKSolverFullBody solver, bool fullBody)
		{
		}

		[Token(Token = "0x6001032")]
		[Address(RVA = "0x276620C", Offset = "0x276620C", VA = "0x276620C")]
		private void CalculateBoneLengths(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001033")]
		[Address(RVA = "0x2766B30", Offset = "0x2766B30", VA = "0x2766B30")]
		public void Reach(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001034")]
		[Address(RVA = "0x2766D90", Offset = "0x2766D90", VA = "0x2766D90")]
		public Vector3 Push(IKSolverFullBody solver)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001035")]
		[Address(RVA = "0x2766FFC", Offset = "0x2766FFC", VA = "0x2766FFC")]
		public void SolveTrigonometric(IKSolverFullBody solver, bool calculateBendDirection = false)
		{
		}

		[Token(Token = "0x6001036")]
		[Address(RVA = "0x27673A0", Offset = "0x27673A0", VA = "0x27673A0")]
		public void Stage1(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001037")]
		[Address(RVA = "0x2767834", Offset = "0x2767834", VA = "0x2767834")]
		public void Stage2(IKSolverFullBody solver, Vector3 position)
		{
		}

		[Token(Token = "0x6001038")]
		[Address(RVA = "0x2767A58", Offset = "0x2767A58", VA = "0x2767A58")]
		public void SolveConstraintSystems(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001039")]
		[Address(RVA = "0x27677C4", Offset = "0x27677C4", VA = "0x27677C4")]
		private Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600103A")]
		[Address(RVA = "0x276722C", Offset = "0x276722C", VA = "0x276722C")]
		protected Vector3 GetDirToBendPoint(Vector3 direction, Vector3 bendDirection, float directionMagnitude)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600103B")]
		[Address(RVA = "0x2767748", Offset = "0x2767748", VA = "0x2767748")]
		private void SolveChildConstraints(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600103C")]
		[Address(RVA = "0x2767B40", Offset = "0x2767B40", VA = "0x2767B40")]
		private void SolveLinearConstraint(IKSolver.Node node1, IKSolver.Node node2, float crossFade, float distance)
		{
		}

		[Token(Token = "0x600103D")]
		[Address(RVA = "0x2767668", Offset = "0x2767668", VA = "0x2767668")]
		public void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x600103E")]
		[Address(RVA = "0x2767940", Offset = "0x2767940", VA = "0x2767940")]
		private void BackwardReach(Vector3 position)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000276")]
	public class IKConstraintBend
	{
		[Token(Token = "0x4000A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone1;

		[Token(Token = "0x4000A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform bone2;

		[Token(Token = "0x4000A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform bone3;

		[Token(Token = "0x4000A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform bendGoal;

		[Token(Token = "0x4000A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 direction;

		[Token(Token = "0x4000A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Quaternion rotationOffset;

		[Token(Token = "0x4000A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA81104", Offset = "0xA81104")]
		public float weight;

		[Token(Token = "0x4000A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3 defaultLocalDirection;

		[Token(Token = "0x4000A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Vector3 defaultChildDirection;

		[NonSerialized]
		[Token(Token = "0x4000A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float clampF;

		[Token(Token = "0x4000A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int chainIndex1;

		[Token(Token = "0x4000A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int nodeIndex1;

		[Token(Token = "0x4000A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int chainIndex2;

		[Token(Token = "0x4000A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int nodeIndex2;

		[Token(Token = "0x4000A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int chainIndex3;

		[Token(Token = "0x4000A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int nodeIndex3;

		[Token(Token = "0x4000A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8111C", Offset = "0xA8111C")]
		private bool <initiated>k__BackingField;

		[Token(Token = "0x4000A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
		private bool limbOrientationsSet;

		[Token(Token = "0x170000E5")]
		public bool initiated
		{
			[Token(Token = "0x6001040")]
			[Address(RVA = "0x28AE5D8", Offset = "0x28AE5D8", VA = "0x28AE5D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8B63C", Offset = "0xA8B63C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001041")]
			[Address(RVA = "0x28AE5E0", Offset = "0x28AE5E0", VA = "0x28AE5E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8B64C", Offset = "0xA8B64C")]
			private set
			{
			}
		}

		[Token(Token = "0x600103F")]
		[Address(RVA = "0x28AE3F0", Offset = "0x28AE3F0", VA = "0x28AE3F0")]
		public bool IsValid(IKSolverFullBody solver, Warning.Logger logger)
		{
			return default(bool);
		}

		[Token(Token = "0x6001042")]
		[Address(RVA = "0x28AE5EC", Offset = "0x28AE5EC", VA = "0x28AE5EC")]
		public IKConstraintBend()
		{
		}

		[Token(Token = "0x6001043")]
		[Address(RVA = "0x28AE62C", Offset = "0x28AE62C", VA = "0x28AE62C")]
		public IKConstraintBend(Transform bone1, Transform bone2, Transform bone3)
		{
		}

		[Token(Token = "0x6001044")]
		[Address(RVA = "0x28AE694", Offset = "0x28AE694", VA = "0x28AE694")]
		public void SetBones(Transform bone1, Transform bone2, Transform bone3)
		{
		}

		[Token(Token = "0x6001045")]
		[Address(RVA = "0x28AE6E4", Offset = "0x28AE6E4", VA = "0x28AE6E4")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001046")]
		[Address(RVA = "0x28AE9F8", Offset = "0x28AE9F8", VA = "0x28AE9F8")]
		public void SetLimbOrientation(Vector3 upper, Vector3 lower, Vector3 last)
		{
		}

		[Token(Token = "0x6001047")]
		[Address(RVA = "0x28AEBE8", Offset = "0x28AEBE8", VA = "0x28AEBE8")]
		public void LimitBend(float solverWeight, float positionWeight)
		{
		}

		[Token(Token = "0x6001048")]
		[Address(RVA = "0x28AEF34", Offset = "0x28AEF34", VA = "0x28AEF34")]
		public Vector3 GetDir(IKSolverFullBody solver)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001049")]
		[Address(RVA = "0x28AE8A8", Offset = "0x28AE8A8", VA = "0x28AE8A8")]
		private Vector3 OrthoToLimb(IKSolverFullBody solver, Vector3 tangent)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600104A")]
		[Address(RVA = "0x28AE950", Offset = "0x28AE950", VA = "0x28AE950")]
		private Vector3 OrthoToBone1(IKSolverFullBody solver, Vector3 tangent)
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x2000277")]
	public class IKEffector
	{
		[Token(Token = "0x4000A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone;

		[Token(Token = "0x4000A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4000A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA8112C", Offset = "0xA8112C")]
		public float positionWeight;

		[Token(Token = "0x4000A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA81144", Offset = "0xA81144")]
		public float rotationWeight;

		[Token(Token = "0x4000A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 position;

		[Token(Token = "0x4000A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Quaternion rotation;

		[Token(Token = "0x4000A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 positionOffset;

		[Token(Token = "0x4000A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8115C", Offset = "0xA8115C")]
		private bool <isEndEffector>k__BackingField;

		[Token(Token = "0x4000A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool effectChildNodes;

		[Token(Token = "0x4000A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA8116C", Offset = "0xA8116C")]
		public float maintainRelativePositionWeight;

		[Token(Token = "0x4000A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform[] childBones;

		[Token(Token = "0x4000A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform planeBone1;

		[Token(Token = "0x4000A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform planeBone2;

		[Token(Token = "0x4000A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform planeBone3;

		[Token(Token = "0x4000A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Quaternion planeRotationOffset;

		[Token(Token = "0x4000A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float posW;

		[Token(Token = "0x4000A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float rotW;

		[Token(Token = "0x4000A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3[] localPositions;

		[Token(Token = "0x4000A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool usePlaneNodes;

		[Token(Token = "0x4000A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Quaternion animatedPlaneRotation;

		[Token(Token = "0x4000A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Vector3 animatedPosition;

		[Token(Token = "0x4000A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool firstUpdate;

		[Token(Token = "0x4000A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int chainIndex;

		[Token(Token = "0x4000A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int nodeIndex;

		[Token(Token = "0x4000A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private int plane1ChainIndex;

		[Token(Token = "0x4000A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private int plane1NodeIndex;

		[Token(Token = "0x4000A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private int plane2ChainIndex;

		[Token(Token = "0x4000A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private int plane2NodeIndex;

		[Token(Token = "0x4000A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private int plane3ChainIndex;

		[Token(Token = "0x4000A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private int plane3NodeIndex;

		[Token(Token = "0x4000A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private int[] childChainIndexes;

		[Token(Token = "0x4000A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private int[] childNodeIndexes;

		[Token(Token = "0x170000E6")]
		public bool isEndEffector
		{
			[Token(Token = "0x600104C")]
			[Address(RVA = "0x28AF3D0", Offset = "0x28AF3D0", VA = "0x28AF3D0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8B65C", Offset = "0xA8B65C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600104D")]
			[Address(RVA = "0x28AF3D8", Offset = "0x28AF3D8", VA = "0x28AF3D8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8B66C", Offset = "0xA8B66C")]
			private set
			{
			}
		}

		[Token(Token = "0x600104B")]
		[Address(RVA = "0x28AF368", Offset = "0x28AF368", VA = "0x28AF368")]
		public IKSolver.Node GetNode(IKSolverFullBody solver)
		{
			return null;
		}

		[Token(Token = "0x600104E")]
		[Address(RVA = "0x28AF3E4", Offset = "0x28AF3E4", VA = "0x28AF3E4")]
		public void PinToBone(float positionWeight, float rotationWeight)
		{
		}

		[Token(Token = "0x600104F")]
		[Address(RVA = "0x28AF474", Offset = "0x28AF474", VA = "0x28AF474")]
		public IKEffector()
		{
		}

		[Token(Token = "0x6001050")]
		[Address(RVA = "0x28AF5B8", Offset = "0x28AF5B8", VA = "0x28AF5B8")]
		public IKEffector(Transform bone, Transform[] childBones)
		{
		}

		[Token(Token = "0x6001051")]
		[Address(RVA = "0x28AF738", Offset = "0x28AF738", VA = "0x28AF738")]
		public bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001052")]
		[Address(RVA = "0x28AFA60", Offset = "0x28AFA60", VA = "0x28AFA60")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001053")]
		[Address(RVA = "0x28AFD2C", Offset = "0x28AFD2C", VA = "0x28AFD2C")]
		public void ResetOffset(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001054")]
		[Address(RVA = "0x28AFE00", Offset = "0x28AFE00", VA = "0x28AFE00")]
		public void SetToTarget()
		{
		}

		[Token(Token = "0x6001055")]
		[Address(RVA = "0x28AFEA8", Offset = "0x28AFEA8", VA = "0x28AFEA8")]
		public void OnPreSolve(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001056")]
		[Address(RVA = "0x28B03E4", Offset = "0x28B03E4", VA = "0x28B03E4")]
		public void OnPostWrite()
		{
		}

		[Token(Token = "0x6001057")]
		[Address(RVA = "0x28B0410", Offset = "0x28B0410", VA = "0x28B0410")]
		private Quaternion GetPlaneRotation(IKSolverFullBody solver)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001058")]
		[Address(RVA = "0x28B0570", Offset = "0x28B0570", VA = "0x28B0570")]
		public void Update(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001059")]
		[Address(RVA = "0x28B07FC", Offset = "0x28B07FC", VA = "0x28B07FC")]
		private Vector3 GetPosition(IKSolverFullBody solver, out Quaternion planeRotationOffset)
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x2000278")]
	public class IKMapping
	{
		[Serializable]
		[Token(Token = "0x2000391")]
		public class BoneMap
		{
			[Token(Token = "0x4000FC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x4000FC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int chainIndex;

			[Token(Token = "0x4000FC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int nodeIndex;

			[Token(Token = "0x4000FC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 defaultLocalPosition;

			[Token(Token = "0x4000FC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Quaternion defaultLocalRotation;

			[Token(Token = "0x4000FC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector3 localSwingAxis;

			[Token(Token = "0x4000FC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Vector3 localTwistAxis;

			[Token(Token = "0x4000FC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public Vector3 planePosition;

			[Token(Token = "0x4000FC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 ikPosition;

			[Token(Token = "0x4000FC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public Quaternion defaultLocalTargetRotation;

			[Token(Token = "0x4000FCA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			private Quaternion maintainRotation;

			[Token(Token = "0x4000FCB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			public float length;

			[Token(Token = "0x4000FCC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public Quaternion animatedRotation;

			[Token(Token = "0x4000FCD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private Transform planeBone1;

			[Token(Token = "0x4000FCE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			private Transform planeBone2;

			[Token(Token = "0x4000FCF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private Transform planeBone3;

			[Token(Token = "0x4000FD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			private int plane1ChainIndex;

			[Token(Token = "0x4000FD1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			private int plane1NodeIndex;

			[Token(Token = "0x4000FD2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			private int plane2ChainIndex;

			[Token(Token = "0x4000FD3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
			private int plane2NodeIndex;

			[Token(Token = "0x4000FD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			private int plane3ChainIndex;

			[Token(Token = "0x4000FD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			private int plane3NodeIndex;

			[Token(Token = "0x17000197")]
			public Vector3 swingDirection
			{
				[Token(Token = "0x60016BF")]
				[Address(RVA = "0x1E3762C", Offset = "0x1E3762C", VA = "0x1E3762C")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x17000198")]
			public bool isNodeBone
			{
				[Token(Token = "0x60016C2")]
				[Address(RVA = "0x1E37708", Offset = "0x1E37708", VA = "0x1E37708")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000199")]
			private Quaternion lastAnimatedTargetRotation
			{
				[Token(Token = "0x60016D6")]
				[Address(RVA = "0x1E37AD8", Offset = "0x1E37AD8", VA = "0x1E37AD8")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x60016BE")]
			[Address(RVA = "0x1E375DC", Offset = "0x1E375DC", VA = "0x1E375DC")]
			public void Initiate(Transform transform, IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x60016C0")]
			[Address(RVA = "0x1E37668", Offset = "0x1E37668", VA = "0x1E37668")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x60016C1")]
			[Address(RVA = "0x1E376B8", Offset = "0x1E376B8", VA = "0x1E376B8")]
			public void FixTransform(bool position)
			{
			}

			[Token(Token = "0x60016C3")]
			[Address(RVA = "0x1E37718", Offset = "0x1E37718", VA = "0x1E37718")]
			public void SetLength(BoneMap nextBone)
			{
			}

			[Token(Token = "0x60016C4")]
			[Address(RVA = "0x1E377A0", Offset = "0x1E377A0", VA = "0x1E377A0")]
			public void SetLocalSwingAxis(BoneMap swingTarget)
			{
			}

			[Token(Token = "0x60016C5")]
			[Address(RVA = "0x1E377A8", Offset = "0x1E377A8", VA = "0x1E377A8")]
			public void SetLocalSwingAxis(BoneMap bone1, BoneMap bone2)
			{
			}

			[Token(Token = "0x60016C6")]
			[Address(RVA = "0x1E37880", Offset = "0x1E37880", VA = "0x1E37880")]
			public void SetLocalTwistAxis(Vector3 twistDirection, Vector3 normalDirection)
			{
			}

			[Token(Token = "0x60016C7")]
			[Address(RVA = "0x1E378F8", Offset = "0x1E378F8", VA = "0x1E378F8")]
			public void SetPlane(IKSolverFullBody solver, Transform planeBone1, Transform planeBone2, Transform planeBone3)
			{
			}

			[Token(Token = "0x60016C8")]
			[Address(RVA = "0x1E379BC", Offset = "0x1E379BC", VA = "0x1E379BC")]
			public void UpdatePlane(bool rotation, bool position)
			{
			}

			[Token(Token = "0x60016C9")]
			[Address(RVA = "0x1E37C18", Offset = "0x1E37C18", VA = "0x1E37C18")]
			public void SetIKPosition()
			{
			}

			[Token(Token = "0x60016CA")]
			[Address(RVA = "0x1E37C50", Offset = "0x1E37C50", VA = "0x1E37C50")]
			public void MaintainRotation()
			{
			}

			[Token(Token = "0x60016CB")]
			[Address(RVA = "0x1E37C88", Offset = "0x1E37C88", VA = "0x1E37C88")]
			public void SetToIKPosition()
			{
			}

			[Token(Token = "0x60016CC")]
			[Address(RVA = "0x1E37CB0", Offset = "0x1E37CB0", VA = "0x1E37CB0")]
			public void FixToNode(IKSolverFullBody solver, float weight, [Optional] IKSolver.Node fixNode)
			{
			}

			[Token(Token = "0x60016CD")]
			[Address(RVA = "0x1E37D9C", Offset = "0x1E37D9C", VA = "0x1E37D9C")]
			public Vector3 GetPlanePosition(IKSolverFullBody solver)
			{
				return default(Vector3);
			}

			[Token(Token = "0x60016CE")]
			[Address(RVA = "0x1E37F28", Offset = "0x1E37F28", VA = "0x1E37F28")]
			public void PositionToPlane(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x60016CF")]
			[Address(RVA = "0x1E37F58", Offset = "0x1E37F58", VA = "0x1E37F58")]
			public void RotateToPlane(IKSolverFullBody solver, float weight)
			{
			}

			[Token(Token = "0x60016D0")]
			[Address(RVA = "0x1E38020", Offset = "0x1E38020", VA = "0x1E38020")]
			public void Swing(Vector3 swingTarget, float weight)
			{
			}

			[Token(Token = "0x60016D1")]
			[Address(RVA = "0x1E38090", Offset = "0x1E38090", VA = "0x1E38090")]
			public void Swing(Vector3 pos1, Vector3 pos2, float weight)
			{
			}

			[Token(Token = "0x60016D2")]
			[Address(RVA = "0x1E381E0", Offset = "0x1E381E0", VA = "0x1E381E0")]
			public void Twist(Vector3 twistDirection, Vector3 normalDirection, float weight)
			{
			}

			[Token(Token = "0x60016D3")]
			[Address(RVA = "0x1E38330", Offset = "0x1E38330", VA = "0x1E38330")]
			public void RotateToMaintain(float weight)
			{
			}

			[Token(Token = "0x60016D4")]
			[Address(RVA = "0x1E383B0", Offset = "0x1E383B0", VA = "0x1E383B0")]
			public void RotateToEffector(IKSolverFullBody solver, float weight)
			{
			}

			[Token(Token = "0x60016D5")]
			[Address(RVA = "0x1E37E18", Offset = "0x1E37E18", VA = "0x1E37E18")]
			private Quaternion GetTargetRotation(IKSolverFullBody solver)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x60016D7")]
			[Address(RVA = "0x1E384E8", Offset = "0x1E384E8", VA = "0x1E384E8")]
			public BoneMap()
			{
			}
		}

		[Token(Token = "0x600105A")]
		[Address(RVA = "0x28B0CB0", Offset = "0x28B0CB0", VA = "0x28B0CB0", Slot = "4")]
		public virtual bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600105B")]
		[Address(RVA = "0x28B0CB8", Offset = "0x28B0CB8", VA = "0x28B0CB8", Slot = "5")]
		public virtual void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600105C")]
		[Address(RVA = "0x28B0CBC", Offset = "0x28B0CBC", VA = "0x28B0CBC")]
		protected bool BoneIsValid(Transform bone, IKSolver solver, ref string message, [Optional] Warning.Logger logger)
		{
			return default(bool);
		}

		[Token(Token = "0x600105D")]
		[Address(RVA = "0x28B0E0C", Offset = "0x28B0E0C", VA = "0x28B0E0C")]
		protected Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600105E")]
		[Address(RVA = "0x28B0E7C", Offset = "0x28B0E7C", VA = "0x28B0E7C")]
		public IKMapping()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000279")]
	public class IKMappingBone : IKMapping
	{
		[Token(Token = "0x4000A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone;

		[Token(Token = "0x4000A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA81184", Offset = "0xA81184")]
		public float maintainRotationWeight;

		[Token(Token = "0x4000A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private BoneMap boneMap;

		[Token(Token = "0x600105F")]
		[Address(RVA = "0x28B0E84", Offset = "0x28B0E84", VA = "0x28B0E84", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001060")]
		[Address(RVA = "0x28B0F38", Offset = "0x28B0F38", VA = "0x28B0F38")]
		public IKMappingBone()
		{
		}

		[Token(Token = "0x6001061")]
		[Address(RVA = "0x28B0FB0", Offset = "0x28B0FB0", VA = "0x28B0FB0")]
		public IKMappingBone(Transform bone)
		{
		}

		[Token(Token = "0x6001062")]
		[Address(RVA = "0x28B1044", Offset = "0x28B1044", VA = "0x28B1044")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6001063")]
		[Address(RVA = "0x28B1060", Offset = "0x28B1060", VA = "0x28B1060")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x6001064")]
		[Address(RVA = "0x28B1080", Offset = "0x28B1080", VA = "0x28B1080", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001065")]
		[Address(RVA = "0x28B1118", Offset = "0x28B1118", VA = "0x28B1118")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x6001066")]
		[Address(RVA = "0x28B1134", Offset = "0x28B1134", VA = "0x28B1134")]
		public void WritePose(float solverWeight)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200027A")]
	public class IKMappingLimb : IKMapping
	{
		[Serializable]
		[Token(Token = "0x2000392")]
		public enum BoneMapType
		{
			[Token(Token = "0x4000FD7")]
			Parent,
			[Token(Token = "0x4000FD8")]
			Bone1,
			[Token(Token = "0x4000FD9")]
			Bone2,
			[Token(Token = "0x4000FDA")]
			Bone3
		}

		[Token(Token = "0x4000A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform parentBone;

		[Token(Token = "0x4000A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform bone1;

		[Token(Token = "0x4000A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform bone2;

		[Token(Token = "0x4000A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform bone3;

		[Token(Token = "0x4000A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA8119C", Offset = "0xA8119C")]
		public float maintainRotationWeight;

		[Token(Token = "0x4000A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA811B4", Offset = "0xA811B4")]
		public float weight;

		[NonSerialized]
		[Token(Token = "0x4000A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool updatePlaneRotations;

		[Token(Token = "0x4000A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private BoneMap boneMapParent;

		[Token(Token = "0x4000A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private BoneMap boneMap1;

		[Token(Token = "0x4000A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BoneMap boneMap2;

		[Token(Token = "0x4000A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private BoneMap boneMap3;

		[Token(Token = "0x6001067")]
		[Address(RVA = "0x28B115C", Offset = "0x28B115C", VA = "0x28B115C", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001068")]
		[Address(RVA = "0x28B11E0", Offset = "0x28B11E0", VA = "0x28B11E0")]
		public BoneMap GetBoneMap(BoneMapType boneMap)
		{
			return null;
		}

		[Token(Token = "0x6001069")]
		[Address(RVA = "0x28B12BC", Offset = "0x28B12BC", VA = "0x28B12BC")]
		public void SetLimbOrientation(Vector3 upper, Vector3 lower)
		{
		}

		[Token(Token = "0x600106A")]
		[Address(RVA = "0x28B14E0", Offset = "0x28B14E0", VA = "0x28B14E0")]
		public IKMappingLimb()
		{
		}

		[Token(Token = "0x600106B")]
		[Address(RVA = "0x28B15D4", Offset = "0x28B15D4", VA = "0x28B15D4")]
		public IKMappingLimb(Transform bone1, Transform bone2, Transform bone3, [Optional] Transform parentBone)
		{
		}

		[Token(Token = "0x600106C")]
		[Address(RVA = "0x28B1700", Offset = "0x28B1700", VA = "0x28B1700")]
		public void SetBones(Transform bone1, Transform bone2, Transform bone3, [Optional] Transform parentBone)
		{
		}

		[Token(Token = "0x600106D")]
		[Address(RVA = "0x28B1764", Offset = "0x28B1764", VA = "0x28B1764")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600106E")]
		[Address(RVA = "0x28B1818", Offset = "0x28B1818", VA = "0x28B1818")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x600106F")]
		[Address(RVA = "0x28B18DC", Offset = "0x28B18DC", VA = "0x28B18DC", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001070")]
		[Address(RVA = "0x28B1B74", Offset = "0x28B1B74", VA = "0x28B1B74")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x6001071")]
		[Address(RVA = "0x28B1BE8", Offset = "0x28B1BE8", VA = "0x28B1BE8")]
		public void WritePose(IKSolverFullBody solver, bool fullBody)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200027B")]
	public class IKMappingSpine : IKMapping
	{
		[Token(Token = "0x4000A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform[] spineBones;

		[Token(Token = "0x4000A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform leftUpperArmBone;

		[Token(Token = "0x4000A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform rightUpperArmBone;

		[Token(Token = "0x4000A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftThighBone;

		[Token(Token = "0x4000A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform rightThighBone;

		[Token(Token = "0x4000A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA811CC", Offset = "0xA811CC")]
		public int iterations;

		[Token(Token = "0x4000A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA811E4", Offset = "0xA811E4")]
		public float twistWeight;

		[Token(Token = "0x4000A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int rootNodeIndex;

		[Token(Token = "0x4000A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private BoneMap[] spine;

		[Token(Token = "0x4000A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BoneMap leftUpperArm;

		[Token(Token = "0x4000A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private BoneMap rightUpperArm;

		[Token(Token = "0x4000A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private BoneMap leftThigh;

		[Token(Token = "0x4000A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private BoneMap rightThigh;

		[Token(Token = "0x4000A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool useFABRIK;

		[Token(Token = "0x6001072")]
		[Address(RVA = "0x28B1D68", Offset = "0x28B1D68", VA = "0x28B1D68", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001073")]
		[Address(RVA = "0x28B20D4", Offset = "0x28B20D4", VA = "0x28B20D4")]
		public IKMappingSpine()
		{
		}

		[Token(Token = "0x6001074")]
		[Address(RVA = "0x28B21F4", Offset = "0x28B21F4", VA = "0x28B21F4")]
		public IKMappingSpine(Transform[] spineBones, Transform leftUpperArmBone, Transform rightUpperArmBone, Transform leftThighBone, Transform rightThighBone)
		{
		}

		[Token(Token = "0x6001075")]
		[Address(RVA = "0x28B2354", Offset = "0x28B2354", VA = "0x28B2354")]
		public void SetBones(Transform[] spineBones, Transform leftUpperArmBone, Transform rightUpperArmBone, Transform leftThighBone, Transform rightThighBone)
		{
		}

		[Token(Token = "0x6001076")]
		[Address(RVA = "0x28B23D4", Offset = "0x28B23D4", VA = "0x28B23D4")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6001077")]
		[Address(RVA = "0x28B2440", Offset = "0x28B2440", VA = "0x28B2440")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x6001078")]
		[Address(RVA = "0x28B24C4", Offset = "0x28B24C4", VA = "0x28B24C4", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6001079")]
		[Address(RVA = "0x28B2B08", Offset = "0x28B2B08", VA = "0x28B2B08")]
		private bool UseFABRIK()
		{
			return default(bool);
		}

		[Token(Token = "0x600107A")]
		[Address(RVA = "0x28B2B40", Offset = "0x28B2B40", VA = "0x28B2B40")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x600107B")]
		[Address(RVA = "0x28B2DC4", Offset = "0x28B2DC4", VA = "0x28B2DC4")]
		public void WritePose(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600107C")]
		[Address(RVA = "0x28B30CC", Offset = "0x28B30CC", VA = "0x28B30CC")]
		public void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x600107D")]
		[Address(RVA = "0x28B31B8", Offset = "0x28B31B8", VA = "0x28B31B8")]
		private void BackwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x600107E")]
		[Address(RVA = "0x28B3280", Offset = "0x28B3280", VA = "0x28B3280")]
		private void MapToSolverPositions(IKSolverFullBody solver)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200027C")]
	public abstract class IKSolver
	{
		[Serializable]
		[Token(Token = "0x2000393")]
		public class Point
		{
			[Token(Token = "0x4000FDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x4000FDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA84AFC", Offset = "0xA84AFC")]
			public float weight;

			[Token(Token = "0x4000FDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 solverPosition;

			[Token(Token = "0x4000FDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Quaternion solverRotation;

			[Token(Token = "0x4000FDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Vector3 defaultLocalPosition;

			[Token(Token = "0x4000FE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public Quaternion defaultLocalRotation;

			[Token(Token = "0x60016D8")]
			[Address(RVA = "0x1E39034", Offset = "0x1E39034", VA = "0x1E39034")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x60016D9")]
			[Address(RVA = "0x1E39084", Offset = "0x1E39084", VA = "0x1E39084")]
			public void FixTransform()
			{
			}

			[Token(Token = "0x60016DA")]
			[Address(RVA = "0x1E39124", Offset = "0x1E39124", VA = "0x1E39124")]
			public void UpdateSolverPosition()
			{
			}

			[Token(Token = "0x60016DB")]
			[Address(RVA = "0x1E3915C", Offset = "0x1E3915C", VA = "0x1E3915C")]
			public void UpdateSolverLocalPosition()
			{
			}

			[Token(Token = "0x60016DC")]
			[Address(RVA = "0x1E39194", Offset = "0x1E39194", VA = "0x1E39194")]
			public void UpdateSolverState()
			{
			}

			[Token(Token = "0x60016DD")]
			[Address(RVA = "0x1E391E4", Offset = "0x1E391E4", VA = "0x1E391E4")]
			public void UpdateSolverLocalState()
			{
			}

			[Token(Token = "0x60016DE")]
			[Address(RVA = "0x1E38BE8", Offset = "0x1E38BE8", VA = "0x1E38BE8")]
			public Point()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000394")]
		public class Bone : Point
		{
			[Token(Token = "0x4000FE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public float length;

			[Token(Token = "0x4000FE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float sqrMag;

			[Token(Token = "0x4000FE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Vector3 axis;

			[Token(Token = "0x4000FE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private RotationLimit _rotationLimit;

			[Token(Token = "0x4000FE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private bool isLimited;

			[Token(Token = "0x1700019A")]
			public RotationLimit rotationLimit
			{
				[Token(Token = "0x60016DF")]
				[Address(RVA = "0x1E38504", Offset = "0x1E38504", VA = "0x1E38504")]
				get
				{
					return null;
				}
				[Token(Token = "0x60016E0")]
				[Address(RVA = "0x1E38608", Offset = "0x1E38608", VA = "0x1E38608")]
				set
				{
				}
			}

			[Token(Token = "0x60016E1")]
			[Address(RVA = "0x1E38698", Offset = "0x1E38698", VA = "0x1E38698")]
			public void Swing(Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x60016E2")]
			[Address(RVA = "0x1E38848", Offset = "0x1E38848", VA = "0x1E38848")]
			public static void SolverSwing(Bone[] bones, int index, Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x60016E3")]
			[Address(RVA = "0x1E38A1C", Offset = "0x1E38A1C", VA = "0x1E38A1C")]
			public void Swing2D(Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x60016E4")]
			[Address(RVA = "0x1E38B7C", Offset = "0x1E38B7C", VA = "0x1E38B7C")]
			public void SetToSolverPosition()
			{
			}

			[Token(Token = "0x60016E5")]
			[Address(RVA = "0x1E38BA4", Offset = "0x1E38BA4", VA = "0x1E38BA4")]
			public Bone()
			{
			}

			[Token(Token = "0x60016E6")]
			[Address(RVA = "0x1E38C24", Offset = "0x1E38C24", VA = "0x1E38C24")]
			public Bone(Transform transform)
			{
			}

			[Token(Token = "0x60016E7")]
			[Address(RVA = "0x1E38C7C", Offset = "0x1E38C7C", VA = "0x1E38C7C")]
			public Bone(Transform transform, float weight)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000395")]
		public class Node : Point
		{
			[Token(Token = "0x4000FE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public float length;

			[Token(Token = "0x4000FE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float effectorPositionWeight;

			[Token(Token = "0x4000FE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public float effectorRotationWeight;

			[Token(Token = "0x4000FE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 offset;

			[Token(Token = "0x60016E8")]
			[Address(RVA = "0x1E38FBC", Offset = "0x1E38FBC", VA = "0x1E38FBC")]
			public Node()
			{
			}

			[Token(Token = "0x60016E9")]
			[Address(RVA = "0x1E38FC0", Offset = "0x1E38FC0", VA = "0x1E38FC0")]
			public Node(Transform transform)
			{
			}

			[Token(Token = "0x60016EA")]
			[Address(RVA = "0x1E38FF0", Offset = "0x1E38FF0", VA = "0x1E38FF0")]
			public Node(Transform transform, float weight)
			{
			}
		}

		[Token(Token = "0x2000396")]
		public delegate void UpdateDelegate();

		[Token(Token = "0x2000397")]
		public delegate void IterationDelegate(int i);

		[Token(Token = "0x4000A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public bool executedInEditor;

		[Token(Token = "0x4000A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[HideInInspector]
		public Vector3 IKPosition;

		[Token(Token = "0x4000A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8121C", Offset = "0xA8121C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA8121C", Offset = "0xA8121C")]
		public float IKPositionWeight;

		[Token(Token = "0x4000A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA81270", Offset = "0xA81270")]
		private bool <initiated>k__BackingField;

		[Token(Token = "0x4000A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UpdateDelegate OnPreInitiate;

		[Token(Token = "0x4000A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UpdateDelegate OnPostInitiate;

		[Token(Token = "0x4000A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UpdateDelegate OnPreUpdate;

		[Token(Token = "0x4000A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UpdateDelegate OnPostUpdate;

		[Token(Token = "0x4000A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected bool firstInitiation;

		[Token(Token = "0x4000A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[HideInInspector]
		protected Transform root;

		[Token(Token = "0x170000E7")]
		public bool initiated
		{
			[Token(Token = "0x6001088")]
			[Address(RVA = "0x28B35B8", Offset = "0x28B35B8", VA = "0x28B35B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8B67C", Offset = "0xA8B67C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001089")]
			[Address(RVA = "0x28B35C0", Offset = "0x28B35C0", VA = "0x28B35C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8B68C", Offset = "0xA8B68C")]
			private set
			{
			}
		}

		[Token(Token = "0x600107F")]
		[Address(RVA = "0x28B34E8", Offset = "0x28B34E8", VA = "0x28B34E8")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6001080")]
		public abstract bool IsValid(ref string message);

		[Token(Token = "0x6001081")]
		[Address(RVA = "0x28AE200", Offset = "0x28AE200", VA = "0x28AE200")]
		public void Initiate(Transform root)
		{
		}

		[Token(Token = "0x6001082")]
		[Address(RVA = "0x28AE120", Offset = "0x28AE120", VA = "0x28AE120")]
		public void Update()
		{
		}

		[Token(Token = "0x6001083")]
		[Address(RVA = "0x28B3560", Offset = "0x28B3560", VA = "0x28B3560", Slot = "5")]
		public virtual Vector3 GetIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001084")]
		[Address(RVA = "0x28B356C", Offset = "0x28B356C", VA = "0x28B356C")]
		public void SetIKPosition(Vector3 position)
		{
		}

		[Token(Token = "0x6001085")]
		[Address(RVA = "0x28B3578", Offset = "0x28B3578", VA = "0x28B3578")]
		public float GetIKPositionWeight()
		{
			return default(float);
		}

		[Token(Token = "0x6001086")]
		[Address(RVA = "0x28B3580", Offset = "0x28B3580", VA = "0x28B3580")]
		public void SetIKPositionWeight(float weight)
		{
		}

		[Token(Token = "0x6001087")]
		[Address(RVA = "0x28B35B0", Offset = "0x28B35B0", VA = "0x28B35B0")]
		public Transform GetRoot()
		{
			return null;
		}

		[Token(Token = "0x600108A")]
		public abstract Point[] GetPoints();

		[Token(Token = "0x600108B")]
		public abstract Point GetPoint(Transform transform);

		[Token(Token = "0x600108C")]
		public abstract void FixTransforms();

		[Token(Token = "0x600108D")]
		public abstract void StoreDefaultLocalState();

		[Token(Token = "0x600108E")]
		protected abstract void OnInitiate();

		[Token(Token = "0x600108F")]
		protected abstract void OnUpdate();

		[Token(Token = "0x6001090")]
		[Address(RVA = "0x28B35CC", Offset = "0x28B35CC", VA = "0x28B35CC")]
		protected void LogWarning(string message)
		{
		}

		[Token(Token = "0x6001091")]
		[Address(RVA = "0x28B35E4", Offset = "0x28B35E4", VA = "0x28B35E4")]
		public static Transform ContainsDuplicateBone(Bone[] bones)
		{
			return null;
		}

		[Token(Token = "0x6001092")]
		[Address(RVA = "0x28B371C", Offset = "0x28B371C", VA = "0x28B371C")]
		public static bool HierarchyIsValid(Bone[] bones)
		{
			return default(bool);
		}

		[Token(Token = "0x6001093")]
		[Address(RVA = "0x28B37C4", Offset = "0x28B37C4", VA = "0x28B37C4")]
		protected static float PreSolveBones(ref Bone[] bones)
		{
			return default(float);
		}

		[Token(Token = "0x6001094")]
		[Address(RVA = "0x28B3A4C", Offset = "0x28B3A4C", VA = "0x28B3A4C")]
		protected IKSolver()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200027D")]
	public class IKSolverAim : IKSolverHeuristic
	{
		[Token(Token = "0x4000A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform transform;

		[Token(Token = "0x4000A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Vector3 axis;

		[Token(Token = "0x4000A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public Vector3 poleAxis;

		[Token(Token = "0x4000A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Vector3 polePosition;

		[Token(Token = "0x4000A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA812B8", Offset = "0xA812B8")]
		public float poleWeight;

		[Token(Token = "0x4000A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Transform poleTarget;

		[Token(Token = "0x4000A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA812D0", Offset = "0xA812D0")]
		public float clampWeight;

		[Token(Token = "0x4000A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA812E8", Offset = "0xA812E8")]
		public int clampSmoothing;

		[Token(Token = "0x4000A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x4000A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float step;

		[Token(Token = "0x4000A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Vector3 clampedIKPosition;

		[Token(Token = "0x4000A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private RotationLimit transformLimit;

		[Token(Token = "0x4000A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Transform lastTransform;

		[Token(Token = "0x170000E8")]
		public Vector3 transformAxis
		{
			[Token(Token = "0x6001096")]
			[Address(RVA = "0x28B3AE0", Offset = "0x28B3AE0", VA = "0x28B3AE0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000E9")]
		public Vector3 transformPoleAxis
		{
			[Token(Token = "0x6001097")]
			[Address(RVA = "0x28B3B1C", Offset = "0x28B3B1C", VA = "0x28B3B1C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000EA")]
		protected override int minBones
		{
			[Token(Token = "0x600109A")]
			[Address(RVA = "0x28B45CC", Offset = "0x28B45CC", VA = "0x28B45CC", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000EB")]
		protected override Vector3 localDirection
		{
			[Token(Token = "0x600109E")]
			[Address(RVA = "0x28B49B0", Offset = "0x28B49B0", VA = "0x28B49B0", Slot = "15")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6001095")]
		[Address(RVA = "0x28B3A64", Offset = "0x28B3A64", VA = "0x28B3A64")]
		public float GetAngle()
		{
			return default(float);
		}

		[Token(Token = "0x6001098")]
		[Address(RVA = "0x28B3B58", Offset = "0x28B3B58", VA = "0x28B3B58", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6001099")]
		[Address(RVA = "0x28B3D78", Offset = "0x28B3D78", VA = "0x28B3D78", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x600109B")]
		[Address(RVA = "0x28B4518", Offset = "0x28B4518", VA = "0x28B4518")]
		private void Solve()
		{
		}

		[Token(Token = "0x600109C")]
		[Address(RVA = "0x28B42A8", Offset = "0x28B42A8", VA = "0x28B42A8")]
		private Vector3 GetClampedIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600109D")]
		[Address(RVA = "0x28B45D4", Offset = "0x28B45D4", VA = "0x28B45D4")]
		private void RotateToTarget(Vector3 targetPosition, Bone bone, float weight)
		{
		}

		[Token(Token = "0x600109F")]
		[Address(RVA = "0x28B4A24", Offset = "0x28B4A24", VA = "0x28B4A24")]
		public IKSolverAim()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200027E")]
	public class IKSolverArm : IKSolver
	{
		[Token(Token = "0x4000A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA81300", Offset = "0xA81300")]
		public float IKRotationWeight;

		[Token(Token = "0x4000A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Quaternion IKRotation;

		[Token(Token = "0x4000A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Point chest;

		[Token(Token = "0x4000A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Point shoulder;

		[Token(Token = "0x4000A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Point upperArm;

		[Token(Token = "0x4000A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Point forearm;

		[Token(Token = "0x4000A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Point hand;

		[Token(Token = "0x4000A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool isLeft;

		[Token(Token = "0x4000AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public IKSolverVR.Arm arm;

		[Token(Token = "0x4000AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3[] positions;

		[Token(Token = "0x4000AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Quaternion[] rotations;

		[Token(Token = "0x60010A0")]
		[Address(RVA = "0x2BB7DFC", Offset = "0x2BB7DFC", VA = "0x2BB7DFC", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A1")]
		[Address(RVA = "0x2BB81E4", Offset = "0x2BB81E4", VA = "0x2BB81E4")]
		public bool SetChain(Transform chest, Transform shoulder, Transform upperArm, Transform forearm, Transform hand, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x60010A2")]
		[Address(RVA = "0x2BB829C", Offset = "0x2BB829C", VA = "0x2BB829C", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x60010A3")]
		[Address(RVA = "0x2BB8430", Offset = "0x2BB8430", VA = "0x2BB8430", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60010A4")]
		[Address(RVA = "0x2BB85C4", Offset = "0x2BB85C4", VA = "0x2BB85C4", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60010A5")]
		[Address(RVA = "0x2BB8620", Offset = "0x2BB8620", VA = "0x2BB8620", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x60010A6")]
		[Address(RVA = "0x2BB8690", Offset = "0x2BB8690", VA = "0x2BB8690", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60010A7")]
		[Address(RVA = "0x2BB8A00", Offset = "0x2BB8A00", VA = "0x2BB8A00", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60010A8")]
		[Address(RVA = "0x2BB8A2C", Offset = "0x2BB8A2C", VA = "0x2BB8A2C")]
		private void Solve()
		{
		}

		[Token(Token = "0x60010A9")]
		[Address(RVA = "0x2BB86F4", Offset = "0x2BB86F4", VA = "0x2BB86F4")]
		private void Read()
		{
		}

		[Token(Token = "0x60010AA")]
		[Address(RVA = "0x2BB8AA0", Offset = "0x2BB8AA0", VA = "0x2BB8AA0")]
		private void Write()
		{
		}

		[Token(Token = "0x60010AB")]
		[Address(RVA = "0x2BB8C2C", Offset = "0x2BB8C2C", VA = "0x2BB8C2C")]
		public IKSolverArm()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200027F")]
	public class IKSolverCCD : IKSolverHeuristic
	{
		[Token(Token = "0x4000AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x60010AC")]
		[Address(RVA = "0x2BB8DE4", Offset = "0x2BB8DE4", VA = "0x2BB8DE4")]
		public void FadeOutBoneWeights()
		{
		}

		[Token(Token = "0x60010AD")]
		[Address(RVA = "0x2BB8E94", Offset = "0x2BB8E94", VA = "0x2BB8E94", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60010AE")]
		[Address(RVA = "0x2BB938C", Offset = "0x2BB938C", VA = "0x2BB938C", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60010AF")]
		[Address(RVA = "0x2BB9984", Offset = "0x2BB9984", VA = "0x2BB9984")]
		protected void Solve(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x60010B0")]
		[Address(RVA = "0x2BB9F60", Offset = "0x2BB9F60", VA = "0x2BB9F60")]
		public IKSolverCCD()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000280")]
	public class IKSolverFABRIK : IKSolverHeuristic
	{
		[Token(Token = "0x4000AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x4000AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool[] limitedBones;

		[Token(Token = "0x4000AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3[] solverLocalPositions;

		[Token(Token = "0x170000EC")]
		protected override bool boneLengthCanBeZero
		{
			[Token(Token = "0x60010B6")]
			[Address(RVA = "0x2BBAF20", Offset = "0x2BBAF20", VA = "0x2BBAF20", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60010B1")]
		[Address(RVA = "0x2BB9FDC", Offset = "0x2BB9FDC", VA = "0x2BB9FDC")]
		public void SolveForward(Vector3 position)
		{
		}

		[Token(Token = "0x60010B2")]
		[Address(RVA = "0x2BBA59C", Offset = "0x2BBA59C", VA = "0x2BBA59C")]
		public void SolveBackward(Vector3 position)
		{
		}

		[Token(Token = "0x60010B3")]
		[Address(RVA = "0x2BBA6D8", Offset = "0x2BBA6D8", VA = "0x2BBA6D8", Slot = "5")]
		public override Vector3 GetIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010B4")]
		[Address(RVA = "0x2BBA76C", Offset = "0x2BBA76C", VA = "0x2BBA76C", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60010B5")]
		[Address(RVA = "0x2BBAC60", Offset = "0x2BBAC60", VA = "0x2BBAC60", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60010B7")]
		[Address(RVA = "0x2BBAF28", Offset = "0x2BBAF28", VA = "0x2BBAF28")]
		private Vector3 SolveJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010B8")]
		[Address(RVA = "0x2BBA0B4", Offset = "0x2BBA0B4", VA = "0x2BBA0B4")]
		private void OnPreSolve()
		{
		}

		[Token(Token = "0x60010B9")]
		[Address(RVA = "0x2BBA684", Offset = "0x2BBA684", VA = "0x2BBA684")]
		private void OnPostSolve()
		{
		}

		[Token(Token = "0x60010BA")]
		[Address(RVA = "0x2BBAEC4", Offset = "0x2BBAEC4", VA = "0x2BBAEC4")]
		private void Solve(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x60010BB")]
		[Address(RVA = "0x2BBA410", Offset = "0x2BBA410", VA = "0x2BBA410")]
		private void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x60010BC")]
		[Address(RVA = "0x2BBB578", Offset = "0x2BBB578", VA = "0x2BBB578")]
		private void SolverMove(int index, Vector3 offset)
		{
		}

		[Token(Token = "0x60010BD")]
		[Address(RVA = "0x2BBB5EC", Offset = "0x2BBB5EC", VA = "0x2BBB5EC")]
		private void SolverRotate(int index, Quaternion rotation, bool recursive)
		{
		}

		[Token(Token = "0x60010BE")]
		[Address(RVA = "0x2BBB6B4", Offset = "0x2BBB6B4", VA = "0x2BBB6B4")]
		private void SolverRotateChildren(int index, Quaternion rotation)
		{
		}

		[Token(Token = "0x60010BF")]
		[Address(RVA = "0x2BBB764", Offset = "0x2BBB764", VA = "0x2BBB764")]
		private void SolverMoveChildrenAroundPoint(int index, Quaternion rotation)
		{
		}

		[Token(Token = "0x60010C0")]
		[Address(RVA = "0x2BBAA10", Offset = "0x2BBAA10", VA = "0x2BBAA10")]
		private Quaternion GetParentSolverRotation(int index)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60010C1")]
		[Address(RVA = "0x2BBAB38", Offset = "0x2BBAB38", VA = "0x2BBAB38")]
		private Vector3 GetParentSolverPosition(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010C2")]
		[Address(RVA = "0x2BBB868", Offset = "0x2BBB868", VA = "0x2BBB868")]
		private Quaternion GetLimitedRotation(int index, Quaternion q, out bool changed)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60010C3")]
		[Address(RVA = "0x2BBB148", Offset = "0x2BBB148", VA = "0x2BBB148")]
		private void LimitForward(int rotateBone, int limitBone)
		{
		}

		[Token(Token = "0x60010C4")]
		[Address(RVA = "0x2BBA674", Offset = "0x2BBA674", VA = "0x2BBA674")]
		private void BackwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x60010C5")]
		[Address(RVA = "0x2BBBDF8", Offset = "0x2BBBDF8", VA = "0x2BBBDF8")]
		private void BackwardReachUnlimited(Vector3 position)
		{
		}

		[Token(Token = "0x60010C6")]
		[Address(RVA = "0x2BBB9AC", Offset = "0x2BBB9AC", VA = "0x2BBB9AC")]
		private void BackwardReachLimited(Vector3 position)
		{
		}

		[Token(Token = "0x60010C7")]
		[Address(RVA = "0x2BBAFA4", Offset = "0x2BBAFA4", VA = "0x2BBAFA4")]
		private void MapToSolverPositions()
		{
		}

		[Token(Token = "0x60010C8")]
		[Address(RVA = "0x2BBB084", Offset = "0x2BBB084", VA = "0x2BBB084")]
		private void MapToSolverPositionsLimited()
		{
		}

		[Token(Token = "0x60010C9")]
		[Address(RVA = "0x2BBBEC4", Offset = "0x2BBBEC4", VA = "0x2BBBEC4")]
		public IKSolverFABRIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000281")]
	public class IKSolverFABRIKRoot : IKSolver
	{
		[Token(Token = "0x4000AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int iterations;

		[Token(Token = "0x4000AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA81318", Offset = "0xA81318")]
		public float rootPin;

		[Token(Token = "0x4000AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FABRIKChain[] chains;

		[Token(Token = "0x4000AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool zeroWeightApplied;

		[Token(Token = "0x4000AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool[] isRoot;

		[Token(Token = "0x4000AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 rootDefaultPosition;

		[Token(Token = "0x60010CA")]
		[Address(RVA = "0x2BBBF58", Offset = "0x2BBBF58", VA = "0x2BBBF58", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60010CB")]
		[Address(RVA = "0x2BBC5E4", Offset = "0x2BBC5E4", VA = "0x2BBC5E4", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60010CC")]
		[Address(RVA = "0x2BBC67C", Offset = "0x2BBC67C", VA = "0x2BBC67C", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x60010CD")]
		[Address(RVA = "0x2BBC71C", Offset = "0x2BBC71C", VA = "0x2BBC71C", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60010CE")]
		[Address(RVA = "0x2BBC828", Offset = "0x2BBC828", VA = "0x2BBC828")]
		private bool IsRoot(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x60010CF")]
		[Address(RVA = "0x2BBC8C4", Offset = "0x2BBC8C4", VA = "0x2BBC8C4", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60010D0")]
		[Address(RVA = "0x2BBCCF4", Offset = "0x2BBCCF4", VA = "0x2BBCCF4", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x60010D1")]
		[Address(RVA = "0x2BBCF04", Offset = "0x2BBCF04", VA = "0x2BBCF04", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60010D2")]
		[Address(RVA = "0x2BBCDA0", Offset = "0x2BBCDA0", VA = "0x2BBCDA0")]
		private void AddPointsToArray(ref Point[] array, FABRIKChain chain)
		{
		}

		[Token(Token = "0x60010D3")]
		[Address(RVA = "0x2BBCAB0", Offset = "0x2BBCAB0", VA = "0x2BBCAB0")]
		private Vector3 GetCentroid()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60010D4")]
		[Address(RVA = "0x2BBCF9C", Offset = "0x2BBCF9C", VA = "0x2BBCF9C")]
		public IKSolverFABRIKRoot()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000282")]
	public class IKSolverFullBody : IKSolver
	{
		[Token(Token = "0x4000AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA81330", Offset = "0xA81330")]
		public int iterations;

		[Token(Token = "0x4000AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FBIKChain[] chain;

		[Token(Token = "0x4000AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public IKEffector[] effectors;

		[Token(Token = "0x4000AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public IKMappingSpine spineMapping;

		[Token(Token = "0x4000AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public IKMappingBone[] boneMappings;

		[Token(Token = "0x4000AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public IKMappingLimb[] limbMappings;

		[Token(Token = "0x4000AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool FABRIKPass;

		[Token(Token = "0x4000AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public UpdateDelegate OnPreRead;

		[Token(Token = "0x4000AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public UpdateDelegate OnPreSolve;

		[Token(Token = "0x4000AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x4000AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public IterationDelegate OnPostIteration;

		[Token(Token = "0x4000AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public UpdateDelegate OnPreBend;

		[Token(Token = "0x4000AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public UpdateDelegate OnPostSolve;

		[Token(Token = "0x4000ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public UpdateDelegate OnStoreDefaultLocalState;

		[Token(Token = "0x4000ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public UpdateDelegate OnFixTransforms;

		[Token(Token = "0x60010D5")]
		[Address(RVA = "0x2BBD00C", Offset = "0x2BBD00C", VA = "0x2BBD00C")]
		public IKEffector GetEffector(Transform t)
		{
			return null;
		}

		[Token(Token = "0x60010D6")]
		[Address(RVA = "0x2BBD0FC", Offset = "0x2BBD0FC", VA = "0x2BBD0FC")]
		public FBIKChain GetChain(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60010D7")]
		[Address(RVA = "0x2BBD158", Offset = "0x2BBD158", VA = "0x2BBD158")]
		public int GetChainIndex(Transform transform)
		{
			return default(int);
		}

		[Token(Token = "0x60010D8")]
		[Address(RVA = "0x2BBD288", Offset = "0x2BBD288", VA = "0x2BBD288")]
		public Node GetNode(int chainIndex, int nodeIndex)
		{
			return null;
		}

		[Token(Token = "0x60010D9")]
		[Address(RVA = "0x2BBD2E4", Offset = "0x2BBD2E4", VA = "0x2BBD2E4")]
		public void GetChainAndNodeIndexes(Transform transform, out int chainIndex, out int nodeIndex)
		{
		}

		[Token(Token = "0x60010DA")]
		[Address(RVA = "0x2BBD364", Offset = "0x2BBD364", VA = "0x2BBD364", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x60010DB")]
		[Address(RVA = "0x2BBD510", Offset = "0x2BBD510", VA = "0x2BBD510", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x60010DC")]
		[Address(RVA = "0x2BBD680", Offset = "0x2BBD680", VA = "0x2BBD680", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60010DD")]
		[Address(RVA = "0x2BBD890", Offset = "0x2BBD890", VA = "0x2BBD890", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60010DE")]
		[Address(RVA = "0x2BBD968", Offset = "0x2BBD968", VA = "0x2BBD968", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x60010DF")]
		[Address(RVA = "0x2BBDA54", Offset = "0x2BBDA54", VA = "0x2BBDA54", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60010E0")]
		[Address(RVA = "0x2BBDBC8", Offset = "0x2BBDBC8", VA = "0x2BBDBC8", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60010E1")]
		[Address(RVA = "0x2BBDD20", Offset = "0x2BBDD20", VA = "0x2BBDD20", Slot = "12")]
		protected virtual void ReadPose()
		{
		}

		[Token(Token = "0x60010E2")]
		[Address(RVA = "0x2BBDF6C", Offset = "0x2BBDF6C", VA = "0x2BBDF6C", Slot = "13")]
		protected virtual void Solve()
		{
		}

		[Token(Token = "0x60010E3")]
		[Address(RVA = "0x2BBE248", Offset = "0x2BBE248", VA = "0x2BBE248", Slot = "14")]
		protected virtual void ApplyBendConstraints()
		{
		}

		[Token(Token = "0x60010E4")]
		[Address(RVA = "0x2BBE28C", Offset = "0x2BBE28C", VA = "0x2BBE28C", Slot = "15")]
		protected virtual void WritePose()
		{
		}

		[Token(Token = "0x60010E5")]
		[Address(RVA = "0x2BBE37C", Offset = "0x2BBE37C", VA = "0x2BBE37C")]
		public IKSolverFullBody()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000283")]
	public enum FullBodyBipedEffector
	{
		[Token(Token = "0x4000ABD")]
		Body,
		[Token(Token = "0x4000ABE")]
		LeftShoulder,
		[Token(Token = "0x4000ABF")]
		RightShoulder,
		[Token(Token = "0x4000AC0")]
		LeftThigh,
		[Token(Token = "0x4000AC1")]
		RightThigh,
		[Token(Token = "0x4000AC2")]
		LeftHand,
		[Token(Token = "0x4000AC3")]
		RightHand,
		[Token(Token = "0x4000AC4")]
		LeftFoot,
		[Token(Token = "0x4000AC5")]
		RightFoot
	}
	[Serializable]
	[Token(Token = "0x2000284")]
	public enum FullBodyBipedChain
	{
		[Token(Token = "0x4000AC7")]
		LeftArm,
		[Token(Token = "0x4000AC8")]
		RightArm,
		[Token(Token = "0x4000AC9")]
		LeftLeg,
		[Token(Token = "0x4000ACA")]
		RightLeg
	}
	[Serializable]
	[Token(Token = "0x2000285")]
	public class IKSolverFullBodyBiped : IKSolverFullBody
	{
		[Token(Token = "0x4000ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Transform rootNode;

		[Token(Token = "0x4000ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA81348", Offset = "0xA81348")]
		public float spineStiffness;

		[Token(Token = "0x4000ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA81360", Offset = "0xA81360")]
		public float pullBodyVertical;

		[Token(Token = "0x4000ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA81378", Offset = "0xA81378")]
		public float pullBodyHorizontal;

		[Token(Token = "0x4000ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA81390", Offset = "0xA81390")]
		private Vector3 <pullBodyOffset>k__BackingField;

		[Token(Token = "0x4000AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Vector3 offset;

		[Token(Token = "0x170000ED")]
		public IKEffector bodyEffector
		{
			[Token(Token = "0x60010E6")]
			[Address(RVA = "0x2BBE4BC", Offset = "0x2BBE4BC", VA = "0x2BBE4BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EE")]
		public IKEffector leftShoulderEffector
		{
			[Token(Token = "0x60010E7")]
			[Address(RVA = "0x2BBE604", Offset = "0x2BBE604", VA = "0x2BBE604")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EF")]
		public IKEffector rightShoulderEffector
		{
			[Token(Token = "0x60010E8")]
			[Address(RVA = "0x2BBE60C", Offset = "0x2BBE60C", VA = "0x2BBE60C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F0")]
		public IKEffector leftThighEffector
		{
			[Token(Token = "0x60010E9")]
			[Address(RVA = "0x2BBE614", Offset = "0x2BBE614", VA = "0x2BBE614")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F1")]
		public IKEffector rightThighEffector
		{
			[Token(Token = "0x60010EA")]
			[Address(RVA = "0x2BBE61C", Offset = "0x2BBE61C", VA = "0x2BBE61C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F2")]
		public IKEffector leftHandEffector
		{
			[Token(Token = "0x60010EB")]
			[Address(RVA = "0x2BBE624", Offset = "0x2BBE624", VA = "0x2BBE624")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F3")]
		public IKEffector rightHandEffector
		{
			[Token(Token = "0x60010EC")]
			[Address(RVA = "0x2BBE62C", Offset = "0x2BBE62C", VA = "0x2BBE62C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F4")]
		public IKEffector leftFootEffector
		{
			[Token(Token = "0x60010ED")]
			[Address(RVA = "0x2BBE634", Offset = "0x2BBE634", VA = "0x2BBE634")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F5")]
		public IKEffector rightFootEffector
		{
			[Token(Token = "0x60010EE")]
			[Address(RVA = "0x2BBE63C", Offset = "0x2BBE63C", VA = "0x2BBE63C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F6")]
		public FBIKChain leftArmChain
		{
			[Token(Token = "0x60010EF")]
			[Address(RVA = "0x2BBE644", Offset = "0x2BBE644", VA = "0x2BBE644")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F7")]
		public FBIKChain rightArmChain
		{
			[Token(Token = "0x60010F0")]
			[Address(RVA = "0x2BBE67C", Offset = "0x2BBE67C", VA = "0x2BBE67C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F8")]
		public FBIKChain leftLegChain
		{
			[Token(Token = "0x60010F1")]
			[Address(RVA = "0x2BBE6B4", Offset = "0x2BBE6B4", VA = "0x2BBE6B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F9")]
		public FBIKChain rightLegChain
		{
			[Token(Token = "0x60010F2")]
			[Address(RVA = "0x2BBE6EC", Offset = "0x2BBE6EC", VA = "0x2BBE6EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FA")]
		public IKMappingLimb leftArmMapping
		{
			[Token(Token = "0x60010F3")]
			[Address(RVA = "0x2BBE724", Offset = "0x2BBE724", VA = "0x2BBE724")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FB")]
		public IKMappingLimb rightArmMapping
		{
			[Token(Token = "0x60010F4")]
			[Address(RVA = "0x2BBE758", Offset = "0x2BBE758", VA = "0x2BBE758")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FC")]
		public IKMappingLimb leftLegMapping
		{
			[Token(Token = "0x60010F5")]
			[Address(RVA = "0x2BBE790", Offset = "0x2BBE790", VA = "0x2BBE790")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FD")]
		public IKMappingLimb rightLegMapping
		{
			[Token(Token = "0x60010F6")]
			[Address(RVA = "0x2BBE7C8", Offset = "0x2BBE7C8", VA = "0x2BBE7C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FE")]
		public IKMappingBone headMapping
		{
			[Token(Token = "0x60010F7")]
			[Address(RVA = "0x2BBE800", Offset = "0x2BBE800", VA = "0x2BBE800")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FF")]
		public Vector3 pullBodyOffset
		{
			[Token(Token = "0x6001107")]
			[Address(RVA = "0x2BC0990", Offset = "0x2BC0990", VA = "0x2BC0990")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8B69C", Offset = "0xA8B69C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001108")]
			[Address(RVA = "0x2BC099C", Offset = "0x2BC099C", VA = "0x2BC099C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8B6AC", Offset = "0xA8B6AC")]
			private set
			{
			}
		}

		[Token(Token = "0x60010F8")]
		[Address(RVA = "0x2BBE834", Offset = "0x2BBE834", VA = "0x2BBE834")]
		public void SetChainWeights(FullBodyBipedChain c, float pull, float reach = 0f)
		{
		}

		[Token(Token = "0x60010F9")]
		[Address(RVA = "0x2BBE940", Offset = "0x2BBE940", VA = "0x2BBE940")]
		public void SetEffectorWeights(FullBodyBipedEffector effector, float positionWeight, float rotationWeight)
		{
		}

		[Token(Token = "0x60010FA")]
		[Address(RVA = "0x2BBE888", Offset = "0x2BBE888", VA = "0x2BBE888")]
		public FBIKChain GetChain(FullBodyBipedChain c)
		{
			return null;
		}

		[Token(Token = "0x60010FB")]
		[Address(RVA = "0x2BBE9CC", Offset = "0x2BBE9CC", VA = "0x2BBE9CC")]
		public FBIKChain GetChain(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x60010FC")]
		[Address(RVA = "0x2BBE4C4", Offset = "0x2BBE4C4", VA = "0x2BBE4C4")]
		public IKEffector GetEffector(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x60010FD")]
		[Address(RVA = "0x2BBEA9C", Offset = "0x2BBEA9C", VA = "0x2BBEA9C")]
		public IKEffector GetEndEffector(FullBodyBipedChain c)
		{
			return null;
		}

		[Token(Token = "0x60010FE")]
		[Address(RVA = "0x2BBEB54", Offset = "0x2BBEB54", VA = "0x2BBEB54")]
		public IKMappingLimb GetLimbMapping(FullBodyBipedChain chain)
		{
			return null;
		}

		[Token(Token = "0x60010FF")]
		[Address(RVA = "0x2BBEC08", Offset = "0x2BBEC08", VA = "0x2BBEC08")]
		public IKMappingLimb GetLimbMapping(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x6001100")]
		[Address(RVA = "0x2BBECBC", Offset = "0x2BBECBC", VA = "0x2BBECBC")]
		public IKMappingSpine GetSpineMapping()
		{
			return null;
		}

		[Token(Token = "0x6001101")]
		[Address(RVA = "0x2BBECC4", Offset = "0x2BBECC4", VA = "0x2BBECC4")]
		public IKMappingBone GetHeadMapping()
		{
			return null;
		}

		[Token(Token = "0x6001102")]
		[Address(RVA = "0x2BBECF8", Offset = "0x2BBECF8", VA = "0x2BBECF8")]
		public IKConstraintBend GetBendConstraint(FullBodyBipedChain limb)
		{
			return null;
		}

		[Token(Token = "0x6001103")]
		[Address(RVA = "0x2BBEDC0", Offset = "0x2BBEDC0", VA = "0x2BBEDC0", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001104")]
		[Address(RVA = "0x2BBEF68", Offset = "0x2BBEF68", VA = "0x2BBEF68")]
		public void SetToReferences(BipedReferences references, [Optional] Transform rootNode)
		{
		}

		[Token(Token = "0x6001105")]
		[Address(RVA = "0x2BC040C", Offset = "0x2BC040C", VA = "0x2BC040C")]
		public static Transform DetectRootNodeBone(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x6001106")]
		[Address(RVA = "0x2BC0820", Offset = "0x2BC0820", VA = "0x2BC0820")]
		public void SetLimbOrientations(BipedLimbOrientations o)
		{
		}

		[Token(Token = "0x6001109")]
		[Address(RVA = "0x2BC0880", Offset = "0x2BC0880", VA = "0x2BC0880")]
		private void SetLimbOrientation(FullBodyBipedChain chain, BipedLimbOrientations.LimbOrientation limbOrientation)
		{
		}

		[Token(Token = "0x600110A")]
		[Address(RVA = "0x2BC06A8", Offset = "0x2BC06A8", VA = "0x2BC06A8")]
		private static Transform GetLeftClavicle(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x600110B")]
		[Address(RVA = "0x2BC0764", Offset = "0x2BC0764", VA = "0x2BC0764")]
		private static Transform GetRightClavicle(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x600110C")]
		[Address(RVA = "0x2BC09A8", Offset = "0x2BC09A8", VA = "0x2BC09A8")]
		private static bool Contains(Transform[] array, Transform transform)
		{
			return default(bool);
		}

		[Token(Token = "0x600110D")]
		[Address(RVA = "0x2BC0A80", Offset = "0x2BC0A80", VA = "0x2BC0A80", Slot = "12")]
		protected override void ReadPose()
		{
		}

		[Token(Token = "0x600110E")]
		[Address(RVA = "0x2BC0B7C", Offset = "0x2BC0B7C", VA = "0x2BC0B7C")]
		private void PullBody()
		{
		}

		[Token(Token = "0x600110F")]
		[Address(RVA = "0x2BC0CA4", Offset = "0x2BC0CA4", VA = "0x2BC0CA4")]
		private Vector3 GetBodyOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001110")]
		[Address(RVA = "0x2BC0DE8", Offset = "0x2BC0DE8", VA = "0x2BC0DE8")]
		private Vector3 GetHandBodyPull(IKEffector effector, FBIKChain arm, Vector3 offset)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001111")]
		[Address(RVA = "0x2BC0F18", Offset = "0x2BC0F18", VA = "0x2BC0F18", Slot = "14")]
		protected override void ApplyBendConstraints()
		{
		}

		[Token(Token = "0x6001112")]
		[Address(RVA = "0x2BC1158", Offset = "0x2BC1158", VA = "0x2BC1158", Slot = "15")]
		protected override void WritePose()
		{
		}

		[Token(Token = "0x6001113")]
		[Address(RVA = "0x2BC11DC", Offset = "0x2BC11DC", VA = "0x2BC11DC")]
		public IKSolverFullBodyBiped()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000286")]
	public class IKSolverHeuristic : IKSolver
	{
		[Token(Token = "0x4000AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x4000AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float tolerance;

		[Token(Token = "0x4000AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int maxIterations;

		[Token(Token = "0x4000AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool useRotationLimits;

		[Token(Token = "0x4000AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool XY;

		[Token(Token = "0x4000AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Bone[] bones;

		[Token(Token = "0x4000AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Vector3 lastLocalDirection;

		[Token(Token = "0x4000AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected float chainLength;

		[Token(Token = "0x17000100")]
		protected virtual int minBones
		{
			[Token(Token = "0x600111B")]
			[Address(RVA = "0x2BC1A9C", Offset = "0x2BC1A9C", VA = "0x2BC1A9C", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000101")]
		protected virtual bool boneLengthCanBeZero
		{
			[Token(Token = "0x600111C")]
			[Address(RVA = "0x2BC1AA4", Offset = "0x2BC1AA4", VA = "0x2BC1AA4", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000102")]
		protected virtual bool allowCommonParent
		{
			[Token(Token = "0x600111D")]
			[Address(RVA = "0x2BC1AAC", Offset = "0x2BC1AAC", VA = "0x2BC1AAC", Slot = "14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000103")]
		protected virtual Vector3 localDirection
		{
			[Token(Token = "0x6001121")]
			[Address(RVA = "0x2BC1ABC", Offset = "0x2BC1ABC", VA = "0x2BC1ABC", Slot = "15")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000104")]
		protected float positionOffset
		{
			[Token(Token = "0x6001122")]
			[Address(RVA = "0x2BB9930", Offset = "0x2BB9930", VA = "0x2BB9930")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001114")]
		[Address(RVA = "0x2BC11E8", Offset = "0x2BC11E8", VA = "0x2BC11E8")]
		public bool SetChain(Transform[] hierarchy, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x6001115")]
		[Address(RVA = "0x2BC13A4", Offset = "0x2BC13A4", VA = "0x2BC13A4")]
		public void AddBone(Transform bone)
		{
		}

		[Token(Token = "0x6001116")]
		[Address(RVA = "0x2BC1504", Offset = "0x2BC1504", VA = "0x2BC1504", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6001117")]
		[Address(RVA = "0x2BC1570", Offset = "0x2BC1570", VA = "0x2BC1570", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6001118")]
		[Address(RVA = "0x2BC15F0", Offset = "0x2BC15F0", VA = "0x2BC15F0", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001119")]
		[Address(RVA = "0x2BC19A4", Offset = "0x2BC19A4", VA = "0x2BC19A4", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x600111A")]
		[Address(RVA = "0x2BC19AC", Offset = "0x2BC19AC", VA = "0x2BC19AC", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x600111E")]
		[Address(RVA = "0x2BC1AB4", Offset = "0x2BC1AB4", VA = "0x2BC1AB4", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x600111F")]
		[Address(RVA = "0x2BC1AB8", Offset = "0x2BC1AB8", VA = "0x2BC1AB8", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6001120")]
		[Address(RVA = "0x2BB8F14", Offset = "0x2BB8F14", VA = "0x2BB8F14")]
		protected void InitiateBones()
		{
		}

		[Token(Token = "0x6001123")]
		[Address(RVA = "0x2BB9618", Offset = "0x2BB9618", VA = "0x2BB9618")]
		protected Vector3 GetSingularityOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001124")]
		[Address(RVA = "0x2BC1B84", Offset = "0x2BC1B84", VA = "0x2BC1B84")]
		private bool SingularityDetected()
		{
			return default(bool);
		}

		[Token(Token = "0x6001125")]
		[Address(RVA = "0x2BB9F64", Offset = "0x2BB9F64", VA = "0x2BB9F64")]
		public IKSolverHeuristic()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000287")]
	public class IKSolverLeg : IKSolver
	{
		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA813A0", Offset = "0xA813A0")]
		public float IKRotationWeight;

		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Quaternion IKRotation;

		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Point pelvis;

		[Token(Token = "0x4000ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Point thigh;

		[Token(Token = "0x4000ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Point calf;

		[Token(Token = "0x4000ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Point foot;

		[Token(Token = "0x4000ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Point toe;

		[Token(Token = "0x4000AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public IKSolverVR.Leg leg;

		[Token(Token = "0x4000AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Vector3 heelOffset;

		[Token(Token = "0x4000AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3[] positions;

		[Token(Token = "0x4000AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Quaternion[] rotations;

		[Token(Token = "0x6001126")]
		[Address(RVA = "0x2BC1D78", Offset = "0x2BC1D78", VA = "0x2BC1D78", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001127")]
		[Address(RVA = "0x2BC2160", Offset = "0x2BC2160", VA = "0x2BC2160")]
		public bool SetChain(Transform pelvis, Transform thigh, Transform calf, Transform foot, Transform toe, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x6001128")]
		[Address(RVA = "0x2BC2218", Offset = "0x2BC2218", VA = "0x2BC2218", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6001129")]
		[Address(RVA = "0x2BC23AC", Offset = "0x2BC23AC", VA = "0x2BC23AC", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x600112A")]
		[Address(RVA = "0x2BC2540", Offset = "0x2BC2540", VA = "0x2BC2540", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600112B")]
		[Address(RVA = "0x2BC259C", Offset = "0x2BC259C", VA = "0x2BC259C", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x600112C")]
		[Address(RVA = "0x2BC260C", Offset = "0x2BC260C", VA = "0x2BC260C", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x600112D")]
		[Address(RVA = "0x2BC297C", Offset = "0x2BC297C", VA = "0x2BC297C", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x600112E")]
		[Address(RVA = "0x2BC29A8", Offset = "0x2BC29A8", VA = "0x2BC29A8")]
		private void Solve()
		{
		}

		[Token(Token = "0x600112F")]
		[Address(RVA = "0x2BC2670", Offset = "0x2BC2670", VA = "0x2BC2670")]
		private void Read()
		{
		}

		[Token(Token = "0x6001130")]
		[Address(RVA = "0x2BC2A44", Offset = "0x2BC2A44", VA = "0x2BC2A44")]
		private void Write()
		{
		}

		[Token(Token = "0x6001131")]
		[Address(RVA = "0x2BC2BD0", Offset = "0x2BC2BD0", VA = "0x2BC2BD0")]
		public IKSolverLeg()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000288")]
	public class IKSolverLimb : IKSolverTrigonometric
	{
		[Serializable]
		[Token(Token = "0x2000398")]
		public enum BendModifier
		{
			[Token(Token = "0x4000FEB")]
			Animation,
			[Token(Token = "0x4000FEC")]
			Target,
			[Token(Token = "0x4000FED")]
			Parent,
			[Token(Token = "0x4000FEE")]
			Arm,
			[Token(Token = "0x4000FEF")]
			Goal
		}

		[Serializable]
		[Token(Token = "0x2000399")]
		public struct AxisDirection
		{
			[Token(Token = "0x4000FF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 direction;

			[Token(Token = "0x4000FF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 axis;

			[Token(Token = "0x4000FF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float dot;

			[Token(Token = "0x60016F3")]
			[Address(RVA = "0x1E3948C", Offset = "0x1E3948C", VA = "0x1E3948C")]
			public AxisDirection(Vector3 direction, Vector3 axis)
			{
			}
		}

		[Token(Token = "0x4000AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public AvatarIKGoal goal;

		[Token(Token = "0x4000AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public BendModifier bendModifier;

		[Token(Token = "0x4000AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA813B8", Offset = "0xA813B8")]
		public float maintainRotationWeight;

		[Token(Token = "0x4000AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA813D0", Offset = "0xA813D0")]
		public float bendModifierWeight;

		[Token(Token = "0x4000AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Transform bendGoal;

		[Token(Token = "0x4000AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool maintainBendFor1Frame;

		[Token(Token = "0x4000AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		private bool maintainRotationFor1Frame;

		[Token(Token = "0x4000AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Quaternion defaultRootRotation;

		[Token(Token = "0x4000AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Quaternion parentDefaultRotation;

		[Token(Token = "0x4000AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Quaternion bone3RotationBeforeSolve;

		[Token(Token = "0x4000AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private Quaternion maintainRotation;

		[Token(Token = "0x4000AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private Quaternion bone3DefaultRotation;

		[Token(Token = "0x4000AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private Vector3 _bendNormal;

		[Token(Token = "0x4000AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Vector3 animationNormal;

		[Token(Token = "0x4000AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private AxisDirection[] axisDirectionsLeft;

		[Token(Token = "0x4000AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private AxisDirection[] axisDirectionsRight;

		[Token(Token = "0x17000105")]
		private AxisDirection[] axisDirections
		{
			[Token(Token = "0x6001139")]
			[Address(RVA = "0x2BC3F00", Offset = "0x2BC3F00", VA = "0x2BC3F00")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001132")]
		[Address(RVA = "0x2BC2D88", Offset = "0x2BC2D88", VA = "0x2BC2D88")]
		public void MaintainRotation()
		{
		}

		[Token(Token = "0x6001133")]
		[Address(RVA = "0x2BC2DD8", Offset = "0x2BC2DD8", VA = "0x2BC2DD8")]
		public void MaintainBend()
		{
		}

		[Token(Token = "0x6001134")]
		[Address(RVA = "0x2BC2E24", Offset = "0x2BC2E24", VA = "0x2BC2E24", Slot = "12")]
		protected override void OnInitiateVirtual()
		{
		}

		[Token(Token = "0x6001135")]
		[Address(RVA = "0x2BC32F8", Offset = "0x2BC32F8", VA = "0x2BC32F8", Slot = "13")]
		protected override void OnUpdateVirtual()
		{
		}

		[Token(Token = "0x6001136")]
		[Address(RVA = "0x2BC3C40", Offset = "0x2BC3C40", VA = "0x2BC3C40", Slot = "14")]
		protected override void OnPostSolveVirtual()
		{
		}

		[Token(Token = "0x6001137")]
		[Address(RVA = "0x2BC3CEC", Offset = "0x2BC3CEC", VA = "0x2BC3CEC")]
		public IKSolverLimb()
		{
		}

		[Token(Token = "0x6001138")]
		[Address(RVA = "0x2BC3E64", Offset = "0x2BC3E64", VA = "0x2BC3E64")]
		public IKSolverLimb(AvatarIKGoal goal)
		{
		}

		[Token(Token = "0x600113A")]
		[Address(RVA = "0x2BC3120", Offset = "0x2BC3120", VA = "0x2BC3120")]
		private void StoreAxisDirections(ref AxisDirection[] axisDirections)
		{
		}

		[Token(Token = "0x600113B")]
		[Address(RVA = "0x2BC33DC", Offset = "0x2BC33DC", VA = "0x2BC33DC")]
		private Vector3 GetModifiedBendNormal()
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x2000289")]
	public class IKSolverLookAt : IKSolver
	{
		[Serializable]
		[Token(Token = "0x200039A")]
		public class LookAtBone : Bone
		{
			[Token(Token = "0x4000FF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			public Vector3 baseForwardOffsetEuler;

			[Token(Token = "0x1700019B")]
			public Vector3 forward
			{
				[Token(Token = "0x60016F8")]
				[Address(RVA = "0x1E39720", Offset = "0x1E39720", VA = "0x1E39720")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x60016F4")]
			[Address(RVA = "0x1E394EC", Offset = "0x1E394EC", VA = "0x1E394EC")]
			public LookAtBone()
			{
			}

			[Token(Token = "0x60016F5")]
			[Address(RVA = "0x1E394F0", Offset = "0x1E394F0", VA = "0x1E394F0")]
			public LookAtBone(Transform transform)
			{
			}

			[Token(Token = "0x60016F6")]
			[Address(RVA = "0x1E39520", Offset = "0x1E39520", VA = "0x1E39520")]
			public void Initiate(Transform root)
			{
			}

			[Token(Token = "0x60016F7")]
			[Address(RVA = "0x1E39618", Offset = "0x1E39618", VA = "0x1E39618")]
			public void LookAt(Vector3 direction, float weight)
			{
			}
		}

		[Token(Token = "0x4000AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x4000AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public LookAtBone[] spine;

		[Token(Token = "0x4000AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public LookAtBone head;

		[Token(Token = "0x4000AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public LookAtBone[] eyes;

		[Token(Token = "0x4000AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA813E8", Offset = "0xA813E8")]
		public float bodyWeight;

		[Token(Token = "0x4000AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA81400", Offset = "0xA81400")]
		public float headWeight;

		[Token(Token = "0x4000AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA81418", Offset = "0xA81418")]
		public float eyesWeight;

		[Token(Token = "0x4000AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA81430", Offset = "0xA81430")]
		public float clampWeight;

		[Token(Token = "0x4000AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA81448", Offset = "0xA81448")]
		public float clampWeightHead;

		[Token(Token = "0x4000AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA81460", Offset = "0xA81460")]
		public float clampWeightEyes;

		[Token(Token = "0x4000AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA81478", Offset = "0xA81478")]
		public int clampSmoothing;

		[Token(Token = "0x4000AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public AnimationCurve spineWeightCurve;

		[Token(Token = "0x4000B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Vector3 spineTargetOffset;

		[Token(Token = "0x4000B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected Vector3[] spineForwards;

		[Token(Token = "0x4000B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected Vector3[] headForwards;

		[Token(Token = "0x4000B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected Vector3[] eyeForward;

		[Token(Token = "0x4000B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool isDirty;

		[Token(Token = "0x17000106")]
		protected bool spineIsValid
		{
			[Token(Token = "0x600114B")]
			[Address(RVA = "0x2BC46BC", Offset = "0x2BC46BC", VA = "0x2BC46BC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000107")]
		protected bool spineIsEmpty
		{
			[Token(Token = "0x600114C")]
			[Address(RVA = "0x2BC488C", Offset = "0x2BC488C", VA = "0x2BC488C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000108")]
		protected bool headIsValid
		{
			[Token(Token = "0x600114E")]
			[Address(RVA = "0x2BC479C", Offset = "0x2BC479C", VA = "0x2BC479C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000109")]
		protected bool headIsEmpty
		{
			[Token(Token = "0x600114F")]
			[Address(RVA = "0x2BC48B0", Offset = "0x2BC48B0", VA = "0x2BC48B0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700010A")]
		protected bool eyesIsValid
		{
			[Token(Token = "0x6001151")]
			[Address(RVA = "0x2BC47AC", Offset = "0x2BC47AC", VA = "0x2BC47AC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700010B")]
		protected bool eyesIsEmpty
		{
			[Token(Token = "0x6001152")]
			[Address(RVA = "0x2BC4928", Offset = "0x2BC4928", VA = "0x2BC4928")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600113C")]
		[Address(RVA = "0x2BC3F1C", Offset = "0x2BC3F1C", VA = "0x2BC3F1C")]
		public void SetLookAtWeight(float weight)
		{
		}

		[Token(Token = "0x600113D")]
		[Address(RVA = "0x2BC3F4C", Offset = "0x2BC3F4C", VA = "0x2BC3F4C")]
		public void SetLookAtWeight(float weight, float bodyWeight)
		{
		}

		[Token(Token = "0x600113E")]
		[Address(RVA = "0x2BC3FA4", Offset = "0x2BC3FA4", VA = "0x2BC3FA4")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight)
		{
		}

		[Token(Token = "0x600113F")]
		[Address(RVA = "0x2BC4020", Offset = "0x2BC4020", VA = "0x2BC4020")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight)
		{
		}

		[Token(Token = "0x6001140")]
		[Address(RVA = "0x2BC40B8", Offset = "0x2BC40B8", VA = "0x2BC40B8")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight)
		{
		}

		[Token(Token = "0x6001141")]
		[Address(RVA = "0x2BC4178", Offset = "0x2BC4178", VA = "0x2BC4178")]
		public void SetLookAtWeight(float weight, float bodyWeight = 0f, float headWeight = 1f, float eyesWeight = 0.5f, float clampWeight = 0.5f, float clampWeightHead = 0.5f, float clampWeightEyes = 0.3f)
		{
		}

		[Token(Token = "0x6001142")]
		[Address(RVA = "0x2BC4274", Offset = "0x2BC4274", VA = "0x2BC4274", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6001143")]
		[Address(RVA = "0x2BC43A0", Offset = "0x2BC43A0", VA = "0x2BC43A0")]
		public void SetDirty()
		{
		}

		[Token(Token = "0x6001144")]
		[Address(RVA = "0x2BC43AC", Offset = "0x2BC43AC", VA = "0x2BC43AC", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6001145")]
		[Address(RVA = "0x2BC44F0", Offset = "0x2BC44F0", VA = "0x2BC44F0", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001146")]
		[Address(RVA = "0x2BC494C", Offset = "0x2BC494C", VA = "0x2BC494C", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6001147")]
		[Address(RVA = "0x2BC4BBC", Offset = "0x2BC4BBC", VA = "0x2BC4BBC", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6001148")]
		[Address(RVA = "0x2BC4D58", Offset = "0x2BC4D58", VA = "0x2BC4D58")]
		public bool SetChain(Transform[] spine, Transform head, Transform[] eyes, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x6001149")]
		[Address(RVA = "0x2BC4FBC", Offset = "0x2BC4FBC", VA = "0x2BC4FBC", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x600114A")]
		[Address(RVA = "0x2BC52D0", Offset = "0x2BC52D0", VA = "0x2BC52D0", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x600114D")]
		[Address(RVA = "0x2BC53A0", Offset = "0x2BC53A0", VA = "0x2BC53A0")]
		protected void SolveSpine()
		{
		}

		[Token(Token = "0x6001150")]
		[Address(RVA = "0x2BC5540", Offset = "0x2BC5540", VA = "0x2BC5540")]
		protected void SolveHead()
		{
		}

		[Token(Token = "0x6001153")]
		[Address(RVA = "0x2BC5764", Offset = "0x2BC5764", VA = "0x2BC5764")]
		protected void SolveEyes()
		{
		}

		[Token(Token = "0x6001154")]
		[Address(RVA = "0x2BC5B18", Offset = "0x2BC5B18", VA = "0x2BC5B18")]
		protected Vector3[] GetForwards(ref Vector3[] forwards, Vector3 baseForward, Vector3 targetForward, int bones, float clamp)
		{
			return null;
		}

		[Token(Token = "0x6001155")]
		[Address(RVA = "0x2BC4E10", Offset = "0x2BC4E10", VA = "0x2BC4E10")]
		protected void SetBones(Transform[] array, ref LookAtBone[] bones)
		{
		}

		[Token(Token = "0x6001156")]
		[Address(RVA = "0x2BC5D88", Offset = "0x2BC5D88", VA = "0x2BC5D88")]
		public IKSolverLookAt()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200028A")]
	public class IKSolverTrigonometric : IKSolver
	{
		[Serializable]
		[Token(Token = "0x200039B")]
		public class TrigonometricBone : Bone
		{
			[Token(Token = "0x4000FF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			private Quaternion targetToLocalSpace;

			[Token(Token = "0x4000FF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			private Vector3 defaultLocalBendNormal;

			[Token(Token = "0x60016F9")]
			[Address(RVA = "0x1E3975C", Offset = "0x1E3975C", VA = "0x1E3975C")]
			public void Initiate(Vector3 childPosition, Vector3 bendNormal)
			{
			}

			[Token(Token = "0x60016FA")]
			[Address(RVA = "0x1E39858", Offset = "0x1E39858", VA = "0x1E39858")]
			public Quaternion GetRotation(Vector3 direction, Vector3 bendNormal)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x60016FB")]
			[Address(RVA = "0x1E39888", Offset = "0x1E39888", VA = "0x1E39888")]
			public Vector3 GetBendNormalFromCurrentRotation()
			{
				return default(Vector3);
			}

			[Token(Token = "0x60016FC")]
			[Address(RVA = "0x1E398C4", Offset = "0x1E398C4", VA = "0x1E398C4")]
			public TrigonometricBone()
			{
			}
		}

		[Token(Token = "0x4000B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x4000B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA81490", Offset = "0xA81490")]
		public float IKRotationWeight;

		[Token(Token = "0x4000B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Quaternion IKRotation;

		[Token(Token = "0x4000B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Vector3 bendNormal;

		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public TrigonometricBone bone1;

		[Token(Token = "0x4000B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public TrigonometricBone bone2;

		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public TrigonometricBone bone3;

		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected Vector3 weightIKPosition;

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected bool directHierarchy;

		[Token(Token = "0x6001157")]
		[Address(RVA = "0x2BC5FEC", Offset = "0x2BC5FEC", VA = "0x2BC5FEC")]
		public void SetBendGoalPosition(Vector3 goalPosition, float weight)
		{
		}

		[Token(Token = "0x6001158")]
		[Address(RVA = "0x2BC6148", Offset = "0x2BC6148", VA = "0x2BC6148")]
		public void SetBendPlaneToCurrent()
		{
		}

		[Token(Token = "0x6001159")]
		[Address(RVA = "0x2BC628C", Offset = "0x2BC628C", VA = "0x2BC628C")]
		public void SetIKRotation(Quaternion rotation)
		{
		}

		[Token(Token = "0x600115A")]
		[Address(RVA = "0x2BC6298", Offset = "0x2BC6298", VA = "0x2BC6298")]
		public void SetIKRotationWeight(float weight)
		{
		}

		[Token(Token = "0x600115B")]
		[Address(RVA = "0x2BC62C8", Offset = "0x2BC62C8", VA = "0x2BC62C8")]
		public Quaternion GetIKRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600115C")]
		[Address(RVA = "0x2BC62D4", Offset = "0x2BC62D4", VA = "0x2BC62D4")]
		public float GetIKRotationWeight()
		{
			return default(float);
		}

		[Token(Token = "0x600115D")]
		[Address(RVA = "0x2BC62DC", Offset = "0x2BC62DC", VA = "0x2BC62DC", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x600115E")]
		[Address(RVA = "0x2BC6400", Offset = "0x2BC6400", VA = "0x2BC6400", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x600115F")]
		[Address(RVA = "0x2BC651C", Offset = "0x2BC651C", VA = "0x2BC651C", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6001160")]
		[Address(RVA = "0x2BC6568", Offset = "0x2BC6568", VA = "0x2BC6568", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6001161")]
		[Address(RVA = "0x2BC65C8", Offset = "0x2BC65C8", VA = "0x2BC65C8", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6001162")]
		[Address(RVA = "0x2BC69C0", Offset = "0x2BC69C0", VA = "0x2BC69C0")]
		public bool SetChain(Transform bone1, Transform bone2, Transform bone3, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x6001163")]
		[Address(RVA = "0x2BC6A40", Offset = "0x2BC6A40", VA = "0x2BC6A40")]
		public static void Solve(Transform bone1, Transform bone2, Transform bone3, Vector3 targetPosition, Vector3 bendNormal, float weight)
		{
		}

		[Token(Token = "0x6001164")]
		[Address(RVA = "0x2BC6DFC", Offset = "0x2BC6DFC", VA = "0x2BC6DFC")]
		private static Vector3 GetDirectionToBendPoint(Vector3 direction, float directionMag, Vector3 bendDirection, float sqrMag1, float sqrMag2)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001165")]
		[Address(RVA = "0x2BC6F64", Offset = "0x2BC6F64", VA = "0x2BC6F64", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6001166")]
		[Address(RVA = "0x2BC70CC", Offset = "0x2BC70CC", VA = "0x2BC70CC")]
		private bool IsDirectHierarchy()
		{
			return default(bool);
		}

		[Token(Token = "0x6001167")]
		[Address(RVA = "0x2BC7040", Offset = "0x2BC7040", VA = "0x2BC7040")]
		public void InitiateBones()
		{
		}

		[Token(Token = "0x6001168")]
		[Address(RVA = "0x2BC71D0", Offset = "0x2BC71D0", VA = "0x2BC71D0", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6001169")]
		[Address(RVA = "0x2BC79A4", Offset = "0x2BC79A4", VA = "0x2BC79A4", Slot = "12")]
		protected virtual void OnInitiateVirtual()
		{
		}

		[Token(Token = "0x600116A")]
		[Address(RVA = "0x2BC79A8", Offset = "0x2BC79A8", VA = "0x2BC79A8", Slot = "13")]
		protected virtual void OnUpdateVirtual()
		{
		}

		[Token(Token = "0x600116B")]
		[Address(RVA = "0x2BC79AC", Offset = "0x2BC79AC", VA = "0x2BC79AC", Slot = "14")]
		protected virtual void OnPostSolveVirtual()
		{
		}

		[Token(Token = "0x600116C")]
		[Address(RVA = "0x2BC77BC", Offset = "0x2BC77BC", VA = "0x2BC77BC")]
		protected Vector3 GetBendDirection(Vector3 IKPosition, Vector3 bendNormal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600116D")]
		[Address(RVA = "0x2BC3D74", Offset = "0x2BC3D74", VA = "0x2BC3D74")]
		public IKSolverTrigonometric()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200028B")]
	public class IKSolverVR : IKSolver
	{
		[Serializable]
		[Token(Token = "0x200039C")]
		public class Arm : BodyPart
		{
			[Serializable]
			[Token(Token = "0x2000439")]
			public enum ShoulderRotationMode
			{
				[Token(Token = "0x40012AA")]
				YawPitch,
				[Token(Token = "0x40012AB")]
				FromTo
			}

			[Token(Token = "0x4000FF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "LargeHeader", RVA = "0xA84B14", Offset = "0xA84B14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA84B14", Offset = "0xA84B14")]
			public Transform target;

			[Token(Token = "0x4000FF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA84B74", Offset = "0xA84B74")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA84B74", Offset = "0xA84B74")]
			public float positionWeight;

			[Token(Token = "0x4000FF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA84BC8", Offset = "0xA84BC8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA84BC8", Offset = "0xA84BC8")]
			public float rotationWeight;

			[Token(Token = "0x4000FF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "LargeHeader", RVA = "0xA84C1C", Offset = "0xA84C1C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA84C1C", Offset = "0xA84C1C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA84C1C", Offset = "0xA84C1C")]
			public float shoulderRotationWeight;

			[Token(Token = "0x4000FFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA84C94", Offset = "0xA84C94")]
			[AttributeAttribute(Name = "ShowIfAttribute", RVA = "0xA84C94", Offset = "0xA84C94")]
			public ShoulderRotationMode shoulderRotationMode;

			[Token(Token = "0x4000FFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA84D68", Offset = "0xA84D68")]
			[AttributeAttribute(Name = "ShowRangeIfAttribute", RVA = "0xA84D68", Offset = "0xA84D68")]
			public float shoulderTwistWeight;

			[Token(Token = "0x4000FFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA84E44", Offset = "0xA84E44")]
			[AttributeAttribute(Name = "ShowIfAttribute", RVA = "0xA84E44", Offset = "0xA84E44")]
			public float shoulderYawOffset;

			[Token(Token = "0x4000FFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA84F18", Offset = "0xA84F18")]
			[AttributeAttribute(Name = "ShowIfAttribute", RVA = "0xA84F18", Offset = "0xA84F18")]
			public float shoulderPitchOffset;

			[Token(Token = "0x4000FFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[AttributeAttribute(Name = "LargeHeader", RVA = "0xA84FEC", Offset = "0xA84FEC")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA84FEC", Offset = "0xA84FEC")]
			public Transform bendGoal;

			[Token(Token = "0x4000FFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8504C", Offset = "0xA8504C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA8504C", Offset = "0xA8504C")]
			public float bendGoalWeight;

			[Token(Token = "0x4001000")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA850A0", Offset = "0xA850A0")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA850A0", Offset = "0xA850A0")]
			public float swivelOffset;

			[Token(Token = "0x4001001")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA850FC", Offset = "0xA850FC")]
			public Vector3 wristToPalmAxis;

			[Token(Token = "0x4001002")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA85134", Offset = "0xA85134")]
			public Vector3 palmToThumbAxis;

			[Token(Token = "0x4001003")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[AttributeAttribute(Name = "LargeHeader", RVA = "0xA8516C", Offset = "0xA8516C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8516C", Offset = "0xA8516C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA8516C", Offset = "0xA8516C")]
			public float armLengthMlp;

			[Token(Token = "0x4001004")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA851E8", Offset = "0xA851E8")]
			public AnimationCurve stretchCurve;

			[NonSerialized]
			[Token(Token = "0x4001005")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			[HideInInspector]
			public Vector3 IKPosition;

			[NonSerialized]
			[Token(Token = "0x4001006")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
			[HideInInspector]
			public Quaternion IKRotation;

			[NonSerialized]
			[Token(Token = "0x4001007")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
			[HideInInspector]
			public Vector3 bendDirection;

			[NonSerialized]
			[Token(Token = "0x4001008")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			[HideInInspector]
			public Vector3 handPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4001009")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
			[HideInInspector]
			public Vector3 prevHandPositionOffset;

			[NonSerialized]
			[Token(Token = "0x400100A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			[HideInInspector]
			public Quaternion handRotationOffset;

			[NonSerialized]
			[Token(Token = "0x400100B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			[HideInInspector]
			public Quaternion prevHandRotationOffset;

			[Token(Token = "0x400100C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA85290", Offset = "0xA85290")]
			private Vector3 <position>k__BackingField;

			[Token(Token = "0x400100D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA852A0", Offset = "0xA852A0")]
			private Quaternion <rotation>k__BackingField;

			[Token(Token = "0x400100E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
			private bool hasShoulder;

			[Token(Token = "0x400100F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
			private Vector3 chestForwardAxis;

			[Token(Token = "0x4001010")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
			private Vector3 chestUpAxis;

			[Token(Token = "0x4001011")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
			private Quaternion chestRotation;

			[Token(Token = "0x4001012")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
			private Vector3 chestForward;

			[Token(Token = "0x4001013")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
			private Vector3 chestUp;

			[Token(Token = "0x4001014")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
			private Quaternion forearmRelToUpperArm;

			[Token(Token = "0x4001015")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
			private Vector3 upperArmBendAxis;

			[Token(Token = "0x1700019C")]
			public Vector3 position
			{
				[Token(Token = "0x60016FD")]
				[Address(RVA = "0x1E398C8", Offset = "0x1E398C8", VA = "0x1E398C8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D51C", Offset = "0xA8D51C")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x60016FE")]
				[Address(RVA = "0x1E398D8", Offset = "0x1E398D8", VA = "0x1E398D8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D52C", Offset = "0xA8D52C")]
				private set
				{
				}
			}

			[Token(Token = "0x1700019D")]
			public Quaternion rotation
			{
				[Token(Token = "0x60016FF")]
				[Address(RVA = "0x1E398E8", Offset = "0x1E398E8", VA = "0x1E398E8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D53C", Offset = "0xA8D53C")]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6001700")]
				[Address(RVA = "0x1E398FC", Offset = "0x1E398FC", VA = "0x1E398FC")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D54C", Offset = "0xA8D54C")]
				private set
				{
				}
			}

			[Token(Token = "0x1700019E")]
			private VirtualBone shoulder
			{
				[Token(Token = "0x6001701")]
				[Address(RVA = "0x1E39910", Offset = "0x1E39910", VA = "0x1E39910")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700019F")]
			private VirtualBone upperArm
			{
				[Token(Token = "0x6001702")]
				[Address(RVA = "0x1E39944", Offset = "0x1E39944", VA = "0x1E39944")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001A0")]
			private VirtualBone forearm
			{
				[Token(Token = "0x6001703")]
				[Address(RVA = "0x1E39984", Offset = "0x1E39984", VA = "0x1E39984")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001A1")]
			private VirtualBone hand
			{
				[Token(Token = "0x6001704")]
				[Address(RVA = "0x1E399D0", Offset = "0x1E399D0", VA = "0x1E399D0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001705")]
			[Address(RVA = "0x1E39A1C", Offset = "0x1E39A1C", VA = "0x1E39A1C", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6001706")]
			[Address(RVA = "0x1E3A334", Offset = "0x1E3A334", VA = "0x1E3A334", Slot = "5")]
			public override void PreSolve(float scale)
			{
			}

			[Token(Token = "0x6001707")]
			[Address(RVA = "0x1E3A4FC", Offset = "0x1E3A4FC", VA = "0x1E3A4FC", Slot = "7")]
			public override void ApplyOffsets(float scale)
			{
			}

			[Token(Token = "0x6001708")]
			[Address(RVA = "0x1E3A520", Offset = "0x1E3A520", VA = "0x1E3A520")]
			private void Stretching()
			{
			}

			[Token(Token = "0x6001709")]
			[Address(RVA = "0x1E3A7C4", Offset = "0x1E3A7C4", VA = "0x1E3A7C4")]
			public void Solve(bool isLeft)
			{
			}

			[Token(Token = "0x600170A")]
			[Address(RVA = "0x1E3BD74", Offset = "0x1E3BD74", VA = "0x1E3BD74", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x600170B")]
			[Address(RVA = "0x1E3BDC8", Offset = "0x1E3BDC8", VA = "0x1E3BDC8", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x600170C")]
			[Address(RVA = "0x1E3B7A0", Offset = "0x1E3B7A0", VA = "0x1E3B7A0")]
			private float DamperValue(float value, float min, float max, float weight = 1f)
			{
				return default(float);
			}

			[Token(Token = "0x600170D")]
			[Address(RVA = "0x1E3B81C", Offset = "0x1E3B81C", VA = "0x1E3B81C")]
			private Vector3 GetBendNormal(Vector3 dir)
			{
				return default(Vector3);
			}

			[Token(Token = "0x600170E")]
			[Address(RVA = "0x1E3BFE8", Offset = "0x1E3BFE8", VA = "0x1E3BFE8")]
			private void Visualize(VirtualBone bone1, VirtualBone bone2, VirtualBone bone3, Color color)
			{
			}

			[Token(Token = "0x600170F")]
			[Address(RVA = "0x1E3C10C", Offset = "0x1E3C10C", VA = "0x1E3C10C")]
			public Arm()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200039D")]
		public abstract class BodyPart
		{
			[Token(Token = "0x4001016")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA852B0", Offset = "0xA852B0")]
			private float <sqrMag>k__BackingField;

			[Token(Token = "0x4001017")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA852C0", Offset = "0xA852C0")]
			private float <mag>k__BackingField;

			[Token(Token = "0x4001018")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			public VirtualBone[] bones;

			[Token(Token = "0x4001019")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			protected bool initiated;

			[Token(Token = "0x400101A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			protected Vector3 rootPosition;

			[Token(Token = "0x400101B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			protected Quaternion rootRotation;

			[Token(Token = "0x400101C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			protected int index;

			[Token(Token = "0x400101D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			protected int LOD;

			[Token(Token = "0x170001A2")]
			public float sqrMag
			{
				[Token(Token = "0x6001715")]
				[Address(RVA = "0x1E3C290", Offset = "0x1E3C290", VA = "0x1E3C290")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D55C", Offset = "0xA8D55C")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001716")]
				[Address(RVA = "0x1E3C298", Offset = "0x1E3C298", VA = "0x1E3C298")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D56C", Offset = "0xA8D56C")]
				private set
				{
				}
			}

			[Token(Token = "0x170001A3")]
			public float mag
			{
				[Token(Token = "0x6001717")]
				[Address(RVA = "0x1E3C2A0", Offset = "0x1E3C2A0", VA = "0x1E3C2A0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D57C", Offset = "0xA8D57C")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001718")]
				[Address(RVA = "0x1E3C2A8", Offset = "0x1E3C2A8", VA = "0x1E3C2A8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D58C", Offset = "0xA8D58C")]
				private set
				{
				}
			}

			[Token(Token = "0x6001710")]
			protected abstract void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index);

			[Token(Token = "0x6001711")]
			public abstract void PreSolve(float scale);

			[Token(Token = "0x6001712")]
			public abstract void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations);

			[Token(Token = "0x6001713")]
			public abstract void ApplyOffsets(float scale);

			[Token(Token = "0x6001714")]
			public abstract void ResetOffsets();

			[Token(Token = "0x6001719")]
			[Address(RVA = "0x1E3C2B0", Offset = "0x1E3C2B0", VA = "0x1E3C2B0")]
			public void SetLOD(int LOD)
			{
			}

			[Token(Token = "0x600171A")]
			[Address(RVA = "0x1E3C2B8", Offset = "0x1E3C2B8", VA = "0x1E3C2B8")]
			public void Read(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x600171B")]
			[Address(RVA = "0x1E3C38C", Offset = "0x1E3C38C", VA = "0x1E3C38C")]
			public void MovePosition(Vector3 position)
			{
			}

			[Token(Token = "0x600171C")]
			[Address(RVA = "0x1E3C420", Offset = "0x1E3C420", VA = "0x1E3C420")]
			public void MoveRotation(Quaternion rotation)
			{
			}

			[Token(Token = "0x600171D")]
			[Address(RVA = "0x1E3C4CC", Offset = "0x1E3C4CC", VA = "0x1E3C4CC")]
			public void Translate(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x600171E")]
			[Address(RVA = "0x1E3C520", Offset = "0x1E3C520", VA = "0x1E3C520")]
			public void TranslateRoot(Vector3 newRootPos, Quaternion newRootRot)
			{
			}

			[Token(Token = "0x600171F")]
			[Address(RVA = "0x1E3BC30", Offset = "0x1E3BC30", VA = "0x1E3BC30")]
			public void RotateTo(VirtualBone bone, Quaternion rotation, float weight = 1f)
			{
			}

			[Token(Token = "0x6001720")]
			[Address(RVA = "0x1E3C65C", Offset = "0x1E3C65C", VA = "0x1E3C65C")]
			public void Visualize(Color color)
			{
			}

			[Token(Token = "0x6001721")]
			[Address(RVA = "0x1E3C79C", Offset = "0x1E3C79C", VA = "0x1E3C79C")]
			public void Visualize()
			{
			}

			[Token(Token = "0x6001722")]
			[Address(RVA = "0x1E3C210", Offset = "0x1E3C210", VA = "0x1E3C210")]
			protected BodyPart()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200039E")]
		public class Footstep
		{
			[Token(Token = "0x400101E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float stepSpeed;

			[Token(Token = "0x400101F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 characterSpaceOffset;

			[Token(Token = "0x4001020")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 position;

			[Token(Token = "0x4001021")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Quaternion rotation;

			[Token(Token = "0x4001022")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Quaternion stepToRootRot;

			[Token(Token = "0x4001023")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public bool isSupportLeg;

			[Token(Token = "0x4001024")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
			public bool relaxFlag;

			[Token(Token = "0x4001025")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA852E0", Offset = "0xA852E0")]
			private float <stepProgress>k__BackingField;

			[Token(Token = "0x4001026")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public Vector3 stepFrom;

			[Token(Token = "0x4001027")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 stepTo;

			[Token(Token = "0x4001028")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public Quaternion stepFromRot;

			[Token(Token = "0x4001029")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			public Quaternion stepToRot;

			[Token(Token = "0x400102A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			private Quaternion footRelativeToRoot;

			[Token(Token = "0x400102B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			private float supportLegW;

			[Token(Token = "0x400102C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private float supportLegWV;

			[Token(Token = "0x170001A4")]
			public bool isStepping
			{
				[Token(Token = "0x6001723")]
				[Address(RVA = "0x1E3C7C4", Offset = "0x1E3C7C4", VA = "0x1E3C7C4")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170001A5")]
			public float stepProgress
			{
				[Token(Token = "0x6001724")]
				[Address(RVA = "0x1E3C7D8", Offset = "0x1E3C7D8", VA = "0x1E3C7D8")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D59C", Offset = "0xA8D59C")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6001725")]
				[Address(RVA = "0x1E3C7E0", Offset = "0x1E3C7E0", VA = "0x1E3C7E0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D5AC", Offset = "0xA8D5AC")]
				private set
				{
				}
			}

			[Token(Token = "0x6001726")]
			[Address(RVA = "0x1E3C7E8", Offset = "0x1E3C7E8", VA = "0x1E3C7E8")]
			public Footstep(Quaternion rootRotation, Vector3 footPosition, Quaternion footRotation, Vector3 characterSpaceOffset)
			{
			}

			[Token(Token = "0x6001727")]
			[Address(RVA = "0x1E3C920", Offset = "0x1E3C920", VA = "0x1E3C920")]
			public void Reset(Quaternion rootRotation, Vector3 footPosition, Quaternion footRotation)
			{
			}

			[Token(Token = "0x6001728")]
			[Address(RVA = "0x1E3C968", Offset = "0x1E3C968", VA = "0x1E3C968")]
			public void StepTo(Vector3 p, Quaternion rootRotation, float stepThreshold)
			{
			}

			[Token(Token = "0x6001729")]
			[Address(RVA = "0x1E3CB34", Offset = "0x1E3CB34", VA = "0x1E3CB34")]
			public void UpdateStepping(Vector3 p, Quaternion rootRotation, float speed, float deltaTime)
			{
			}

			[Token(Token = "0x600172A")]
			[Address(RVA = "0x1E3CC7C", Offset = "0x1E3CC7C", VA = "0x1E3CC7C")]
			public void UpdateStanding(Quaternion rootRotation, float minAngle, float speed, float deltaTime)
			{
			}

			[Token(Token = "0x600172B")]
			[Address(RVA = "0x1E3CDD0", Offset = "0x1E3CDD0", VA = "0x1E3CDD0")]
			public void Update(InterpolationMode interpolation, UnityEvent onStep, float deltaTime)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200039F")]
		public class Leg : BodyPart
		{
			[Token(Token = "0x400102D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "LargeHeader", RVA = "0xA852F0", Offset = "0xA852F0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA852F0", Offset = "0xA852F0")]
			public Transform target;

			[Token(Token = "0x400102E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA85350", Offset = "0xA85350")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA85350", Offset = "0xA85350")]
			public float positionWeight;

			[Token(Token = "0x400102F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA853A4", Offset = "0xA853A4")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA853A4", Offset = "0xA853A4")]
			public float rotationWeight;

			[Token(Token = "0x4001030")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "LargeHeader", RVA = "0xA853F8", Offset = "0xA853F8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA853F8", Offset = "0xA853F8")]
			public Transform bendGoal;

			[Token(Token = "0x4001031")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA85458", Offset = "0xA85458")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA85458", Offset = "0xA85458")]
			public float bendGoalWeight;

			[Token(Token = "0x4001032")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA854AC", Offset = "0xA854AC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA854AC", Offset = "0xA854AC")]
			public float swivelOffset;

			[Token(Token = "0x4001033")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA85508", Offset = "0xA85508")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA85508", Offset = "0xA85508")]
			public float bendToTargetWeight;

			[Token(Token = "0x4001034")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[AttributeAttribute(Name = "LargeHeader", RVA = "0xA8555C", Offset = "0xA8555C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8555C", Offset = "0xA8555C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA8555C", Offset = "0xA8555C")]
			public float legLengthMlp;

			[Token(Token = "0x4001035")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA855D8", Offset = "0xA855D8")]
			public AnimationCurve stretchCurve;

			[NonSerialized]
			[Token(Token = "0x4001036")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[HideInInspector]
			public Vector3 IKPosition;

			[NonSerialized]
			[Token(Token = "0x4001037")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			[HideInInspector]
			public Quaternion IKRotation;

			[NonSerialized]
			[Token(Token = "0x4001038")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			[HideInInspector]
			public Vector3 footPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4001039")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[HideInInspector]
			public Vector3 heelPositionOffset;

			[NonSerialized]
			[Token(Token = "0x400103A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			[HideInInspector]
			public Quaternion footRotationOffset;

			[NonSerialized]
			[Token(Token = "0x400103B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			[HideInInspector]
			public float currentMag;

			[Token(Token = "0x400103C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			[HideInInspector]
			public bool useAnimatedBendNormal;

			[Token(Token = "0x400103D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA85680", Offset = "0xA85680")]
			private Vector3 <position>k__BackingField;

			[Token(Token = "0x400103E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA85690", Offset = "0xA85690")]
			private Quaternion <rotation>k__BackingField;

			[Token(Token = "0x400103F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA856A0", Offset = "0xA856A0")]
			private bool <hasToes>k__BackingField;

			[Token(Token = "0x4001040")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA856B0", Offset = "0xA856B0")]
			private Vector3 <thighRelativeToPelvis>k__BackingField;

			[Token(Token = "0x4001041")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			private Vector3 footPosition;

			[Token(Token = "0x4001042")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
			private Quaternion footRotation;

			[Token(Token = "0x4001043")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
			private Vector3 bendNormal;

			[Token(Token = "0x4001044")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
			private Quaternion calfRelToThigh;

			[Token(Token = "0x4001045")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
			private Quaternion thighRelToFoot;

			[Token(Token = "0x4001046")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA856C0", Offset = "0xA856C0")]
			private Vector3 <bendNormalRelToPelvis>k__BackingField;

			[Token(Token = "0x4001047")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA856D0", Offset = "0xA856D0")]
			private Vector3 <bendNormalRelToTarget>k__BackingField;

			[Token(Token = "0x170001A6")]
			public Vector3 position
			{
				[Token(Token = "0x600172C")]
				[Address(RVA = "0x1E3CF08", Offset = "0x1E3CF08", VA = "0x1E3CF08")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D5BC", Offset = "0xA8D5BC")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x600172D")]
				[Address(RVA = "0x1E3CF14", Offset = "0x1E3CF14", VA = "0x1E3CF14")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D5CC", Offset = "0xA8D5CC")]
				private set
				{
				}
			}

			[Token(Token = "0x170001A7")]
			public Quaternion rotation
			{
				[Token(Token = "0x600172E")]
				[Address(RVA = "0x1E3CF20", Offset = "0x1E3CF20", VA = "0x1E3CF20")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D5DC", Offset = "0xA8D5DC")]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x600172F")]
				[Address(RVA = "0x1E3CF2C", Offset = "0x1E3CF2C", VA = "0x1E3CF2C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D5EC", Offset = "0xA8D5EC")]
				private set
				{
				}
			}

			[Token(Token = "0x170001A8")]
			public bool hasToes
			{
				[Token(Token = "0x6001730")]
				[Address(RVA = "0x1E3CF38", Offset = "0x1E3CF38", VA = "0x1E3CF38")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D5FC", Offset = "0xA8D5FC")]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6001731")]
				[Address(RVA = "0x1E3CF40", Offset = "0x1E3CF40", VA = "0x1E3CF40")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D60C", Offset = "0xA8D60C")]
				private set
				{
				}
			}

			[Token(Token = "0x170001A9")]
			public VirtualBone thigh
			{
				[Token(Token = "0x6001732")]
				[Address(RVA = "0x1E3CF4C", Offset = "0x1E3CF4C", VA = "0x1E3CF4C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001AA")]
			private VirtualBone calf
			{
				[Token(Token = "0x6001733")]
				[Address(RVA = "0x1E3CF80", Offset = "0x1E3CF80", VA = "0x1E3CF80")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001AB")]
			private VirtualBone foot
			{
				[Token(Token = "0x6001734")]
				[Address(RVA = "0x1E3CFB8", Offset = "0x1E3CFB8", VA = "0x1E3CFB8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001AC")]
			private VirtualBone toes
			{
				[Token(Token = "0x6001735")]
				[Address(RVA = "0x1E3CFF0", Offset = "0x1E3CFF0", VA = "0x1E3CFF0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001AD")]
			public VirtualBone lastBone
			{
				[Token(Token = "0x6001736")]
				[Address(RVA = "0x1E3D028", Offset = "0x1E3D028", VA = "0x1E3D028")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001AE")]
			public Vector3 thighRelativeToPelvis
			{
				[Token(Token = "0x6001737")]
				[Address(RVA = "0x1E3D068", Offset = "0x1E3D068", VA = "0x1E3D068")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D61C", Offset = "0xA8D61C")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001738")]
				[Address(RVA = "0x1E3D074", Offset = "0x1E3D074", VA = "0x1E3D074")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D62C", Offset = "0xA8D62C")]
				private set
				{
				}
			}

			[Token(Token = "0x170001AF")]
			public Vector3 bendNormalRelToPelvis
			{
				[Token(Token = "0x6001739")]
				[Address(RVA = "0x1E3D080", Offset = "0x1E3D080", VA = "0x1E3D080")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D63C", Offset = "0xA8D63C")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x600173A")]
				[Address(RVA = "0x1E3D090", Offset = "0x1E3D090", VA = "0x1E3D090")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D64C", Offset = "0xA8D64C")]
				set
				{
				}
			}

			[Token(Token = "0x170001B0")]
			public Vector3 bendNormalRelToTarget
			{
				[Token(Token = "0x600173B")]
				[Address(RVA = "0x1E3D0A0", Offset = "0x1E3D0A0", VA = "0x1E3D0A0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D65C", Offset = "0xA8D65C")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x600173C")]
				[Address(RVA = "0x1E3D0B0", Offset = "0x1E3D0B0", VA = "0x1E3D0B0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D66C", Offset = "0xA8D66C")]
				set
				{
				}
			}

			[Token(Token = "0x600173D")]
			[Address(RVA = "0x1E3D0C0", Offset = "0x1E3D0C0", VA = "0x1E3D0C0", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x600173E")]
			[Address(RVA = "0x1E3D738", Offset = "0x1E3D738", VA = "0x1E3D738", Slot = "5")]
			public override void PreSolve(float scale)
			{
			}

			[Token(Token = "0x600173F")]
			[Address(RVA = "0x1E3DD0C", Offset = "0x1E3DD0C", VA = "0x1E3DD0C", Slot = "7")]
			public override void ApplyOffsets(float scale)
			{
			}

			[Token(Token = "0x6001740")]
			[Address(RVA = "0x1E3DCBC", Offset = "0x1E3DCBC", VA = "0x1E3DCBC")]
			private void ApplyPositionOffset(Vector3 offset, float weight)
			{
			}

			[Token(Token = "0x6001741")]
			[Address(RVA = "0x1E3DB4C", Offset = "0x1E3DB4C", VA = "0x1E3DB4C")]
			private void ApplyRotationOffset(Quaternion offset, float weight)
			{
			}

			[Token(Token = "0x6001742")]
			[Address(RVA = "0x1E3E0F4", Offset = "0x1E3E0F4", VA = "0x1E3E0F4")]
			public void Solve(bool stretch)
			{
			}

			[Token(Token = "0x6001743")]
			[Address(RVA = "0x1E3E570", Offset = "0x1E3E570", VA = "0x1E3E570")]
			private void FixTwistRotations()
			{
			}

			[Token(Token = "0x6001744")]
			[Address(RVA = "0x1E3E298", Offset = "0x1E3E298", VA = "0x1E3E298")]
			private void Stretching()
			{
			}

			[Token(Token = "0x6001745")]
			[Address(RVA = "0x1E3E868", Offset = "0x1E3E868", VA = "0x1E3E868", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x6001746")]
			[Address(RVA = "0x1E3EA84", Offset = "0x1E3EA84", VA = "0x1E3EA84", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x6001747")]
			[Address(RVA = "0x1E3EAD0", Offset = "0x1E3EAD0", VA = "0x1E3EAD0")]
			public Leg()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003A0")]
		public class Locomotion
		{
			[Serializable]
			[Token(Token = "0x200043A")]
			public enum Mode
			{
				[Token(Token = "0x40012AD")]
				Procedural,
				[Token(Token = "0x40012AE")]
				Animated
			}

			[Token(Token = "0x4001048")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA856E0", Offset = "0xA856E0")]
			public Mode mode;

			[Token(Token = "0x4001049")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA85718", Offset = "0xA85718")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA85718", Offset = "0xA85718")]
			public float weight;

			[Token(Token = "0x400104A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8576C", Offset = "0xA8576C")]
			[AttributeAttribute(Name = "ShowIfAttribute", RVA = "0xA8576C", Offset = "0xA8576C")]
			public float moveThreshold;

			[Token(Token = "0x400104B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "ShowLargeHeaderIf", RVA = "0xA8582C", Offset = "0xA8582C")]
			[SerializeField]
			private byte animationHeader;

			[Token(Token = "0x400104C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA858F4", Offset = "0xA858F4")]
			[AttributeAttribute(Name = "ShowRangeIfAttribute", RVA = "0xA858F4", Offset = "0xA858F4")]
			public float minAnimationSpeed;

			[Token(Token = "0x400104D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA859C0", Offset = "0xA859C0")]
			[AttributeAttribute(Name = "ShowRangeIfAttribute", RVA = "0xA859C0", Offset = "0xA859C0")]
			public float maxAnimationSpeed;

			[Token(Token = "0x400104E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA85A88", Offset = "0xA85A88")]
			[AttributeAttribute(Name = "ShowRangeIfAttribute", RVA = "0xA85A88", Offset = "0xA85A88")]
			public float animationSmoothTime;

			[Token(Token = "0x400104F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "ShowLargeHeaderIf", RVA = "0xA85B58", Offset = "0xA85B58")]
			[SerializeField]
			private byte rootPositionHeader;

			[Token(Token = "0x4001050")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA85C20", Offset = "0xA85C20")]
			[AttributeAttribute(Name = "ShowIfAttribute", RVA = "0xA85C20", Offset = "0xA85C20")]
			public Vector2 standOffset;

			[Token(Token = "0x4001051")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA85CE0", Offset = "0xA85CE0")]
			[AttributeAttribute(Name = "ShowRangeIfAttribute", RVA = "0xA85CE0", Offset = "0xA85CE0")]
			public float rootLerpSpeedWhileMoving;

			[Token(Token = "0x4001052")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA85DAC", Offset = "0xA85DAC")]
			[AttributeAttribute(Name = "ShowRangeIfAttribute", RVA = "0xA85DAC", Offset = "0xA85DAC")]
			public float rootLerpSpeedWhileStopping;

			[Token(Token = "0x4001053")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA85E78", Offset = "0xA85E78")]
			[AttributeAttribute(Name = "ShowRangeIfAttribute", RVA = "0xA85E78", Offset = "0xA85E78")]
			public float rootLerpSpeedWhileTurning;

			[Token(Token = "0x4001054")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA85F44", Offset = "0xA85F44")]
			[AttributeAttribute(Name = "ShowIfAttribute", RVA = "0xA85F44", Offset = "0xA85F44")]
			public float maxRootOffset;

			[Token(Token = "0x4001055")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "ShowLargeHeaderIf", RVA = "0xA86004", Offset = "0xA86004")]
			[SerializeField]
			private byte rootRotationHeader;

			[Token(Token = "0x4001056")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA860CC", Offset = "0xA860CC")]
			[AttributeAttribute(Name = "ShowRangeIfAttribute", RVA = "0xA860CC", Offset = "0xA860CC")]
			public float maxRootAngleMoving;

			[Token(Token = "0x4001057")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA86198", Offset = "0xA86198")]
			[AttributeAttribute(Name = "ShowRangeIfAttribute", RVA = "0xA86198", Offset = "0xA86198")]
			public float maxRootAngleStanding;

			[Token(Token = "0x4001058")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[HideInInspector]
			[SerializeField]
			public float stepLengthMlp;

			[Token(Token = "0x4001059")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Animator animator;

			[Token(Token = "0x400105A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Vector3 velocityLocal;

			[Token(Token = "0x400105B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			private Vector3 velocityLocalV;

			[Token(Token = "0x400105C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			private Vector3 lastCorrection;

			[Token(Token = "0x400105D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			private Vector3 lastHeadTargetPos;

			[Token(Token = "0x400105E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			private Vector3 lastSpeedRootPos;

			[Token(Token = "0x400105F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			private Vector3 lastEndRootPos;

			[Token(Token = "0x4001060")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			private float rootLerpSpeed;

			[Token(Token = "0x4001061")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			private float rootVelocityV;

			[Token(Token = "0x4001062")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private float animSpeed;

			[Token(Token = "0x4001063")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
			private float animSpeedV;

			[Token(Token = "0x4001064")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			private float stopMoveTimer;

			[Token(Token = "0x4001065")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			private float turn;

			[Token(Token = "0x4001066")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			private float maxRootAngleV;

			[Token(Token = "0x4001067")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
			private float currentAnimationSmoothTime;

			[Token(Token = "0x4001068")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			private bool isMoving;

			[Token(Token = "0x4001069")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
			private bool firstFrame;

			[Token(Token = "0x400106A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static int VRIK_Horizontal;

			[Token(Token = "0x400106B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			private static int VRIK_Vertical;

			[Token(Token = "0x400106C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private static int VRIK_IsMoving;

			[Token(Token = "0x400106D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			private static int VRIK_Speed;

			[Token(Token = "0x400106E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private static int VRIK_Turn;

			[Token(Token = "0x400106F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private static bool isHashed;

			[Token(Token = "0x4001070")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			private float lastVelLocalMag;

			[Token(Token = "0x4001071")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8629C", Offset = "0xA8629C")]
			[AttributeAttribute(Name = "ShowIfAttribute", RVA = "0xA8629C", Offset = "0xA8629C")]
			public float footDistance;

			[Token(Token = "0x4001072")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA86358", Offset = "0xA86358")]
			[AttributeAttribute(Name = "ShowIfAttribute", RVA = "0xA86358", Offset = "0xA86358")]
			public float stepThreshold;

			[Token(Token = "0x4001073")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA86414", Offset = "0xA86414")]
			[AttributeAttribute(Name = "ShowIfAttribute", RVA = "0xA86414", Offset = "0xA86414")]
			public float angleThreshold;

			[Token(Token = "0x4001074")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA864D0", Offset = "0xA864D0")]
			[AttributeAttribute(Name = "ShowIfAttribute", RVA = "0xA864D0", Offset = "0xA864D0")]
			public float comAngleMlp;

			[Token(Token = "0x4001075")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8658C", Offset = "0xA8658C")]
			[AttributeAttribute(Name = "ShowIfAttribute", RVA = "0xA8658C", Offset = "0xA8658C")]
			public float maxVelocity;

			[Token(Token = "0x4001076")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA86648", Offset = "0xA86648")]
			[AttributeAttribute(Name = "ShowIfAttribute", RVA = "0xA86648", Offset = "0xA86648")]
			public float velocityFactor;

			[Token(Token = "0x4001077")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA86704", Offset = "0xA86704")]
			[AttributeAttribute(Name = "ShowRangeIfAttribute", RVA = "0xA86704", Offset = "0xA86704")]
			public float maxLegStretch;

			[Token(Token = "0x4001078")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA867CC", Offset = "0xA867CC")]
			[AttributeAttribute(Name = "ShowIfAttribute", RVA = "0xA867CC", Offset = "0xA867CC")]
			public float rootSpeed;

			[Token(Token = "0x4001079")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA86888", Offset = "0xA86888")]
			[AttributeAttribute(Name = "ShowIfAttribute", RVA = "0xA86888", Offset = "0xA86888")]
			public float stepSpeed;

			[Token(Token = "0x400107A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA86944", Offset = "0xA86944")]
			[AttributeAttribute(Name = "ShowIfAttribute", RVA = "0xA86944", Offset = "0xA86944")]
			public AnimationCurve stepHeight;

			[Token(Token = "0x400107B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA86A00", Offset = "0xA86A00")]
			[AttributeAttribute(Name = "ShowIfAttribute", RVA = "0xA86A00", Offset = "0xA86A00")]
			public float maxBodyYOffset;

			[Token(Token = "0x400107C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA86ABC", Offset = "0xA86ABC")]
			[AttributeAttribute(Name = "ShowIfAttribute", RVA = "0xA86ABC", Offset = "0xA86ABC")]
			public AnimationCurve heelHeight;

			[Token(Token = "0x400107D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA86B78", Offset = "0xA86B78")]
			[AttributeAttribute(Name = "ShowRangeIfAttribute", RVA = "0xA86B78", Offset = "0xA86B78")]
			public float relaxLegTwistMinAngle;

			[Token(Token = "0x400107E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA86C40", Offset = "0xA86C40")]
			[AttributeAttribute(Name = "ShowIfAttribute", RVA = "0xA86C40", Offset = "0xA86C40")]
			public float relaxLegTwistSpeed;

			[Token(Token = "0x400107F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA86CFC", Offset = "0xA86CFC")]
			[AttributeAttribute(Name = "ShowIfAttribute", RVA = "0xA86CFC", Offset = "0xA86CFC")]
			public InterpolationMode stepInterpolation;

			[Token(Token = "0x4001080")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA86DB8", Offset = "0xA86DB8")]
			[AttributeAttribute(Name = "ShowIfAttribute", RVA = "0xA86DB8", Offset = "0xA86DB8")]
			public Vector3 offset;

			[Token(Token = "0x4001081")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
			[HideInInspector]
			public bool blockingEnabled;

			[Token(Token = "0x4001082")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
			[HideInInspector]
			public LayerMask blockingLayers;

			[Token(Token = "0x4001083")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
			[HideInInspector]
			public float raycastRadius;

			[Token(Token = "0x4001084")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
			[HideInInspector]
			public float raycastHeight;

			[Token(Token = "0x4001085")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
			[HideInInspector]
			[SerializeField]
			public UnityEvent onLeftFootstep;

			[Token(Token = "0x4001086")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
			[HideInInspector]
			[SerializeField]
			public UnityEvent onRightFootstep;

			[Token(Token = "0x4001087")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA86F24", Offset = "0xA86F24")]
			private Vector3 <centerOfMass>k__BackingField;

			[Token(Token = "0x4001088")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
			private Footstep[] footsteps;

			[Token(Token = "0x4001089")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
			private Vector3 lastComPosition;

			[Token(Token = "0x400108A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
			private Vector3 comVelocity;

			[Token(Token = "0x400108B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
			private int leftFootIndex;

			[Token(Token = "0x400108C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
			private int rightFootIndex;

			[Token(Token = "0x170001B1")]
			public Vector3 centerOfMass
			{
				[Token(Token = "0x6001753")]
				[Address(RVA = "0x1E40488", Offset = "0x1E40488", VA = "0x1E40488")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D67C", Offset = "0xA8D67C")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6001754")]
				[Address(RVA = "0x1E40498", Offset = "0x1E40498", VA = "0x1E40498")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D68C", Offset = "0xA8D68C")]
				private set
				{
				}
			}

			[Token(Token = "0x170001B2")]
			public Vector3 leftFootstepPosition
			{
				[Token(Token = "0x600175B")]
				[Address(RVA = "0x1E41860", Offset = "0x1E41860", VA = "0x1E41860")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170001B3")]
			public Vector3 rightFootstepPosition
			{
				[Token(Token = "0x600175C")]
				[Address(RVA = "0x1E418A0", Offset = "0x1E418A0", VA = "0x1E418A0")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170001B4")]
			public Quaternion leftFootstepRotation
			{
				[Token(Token = "0x600175D")]
				[Address(RVA = "0x1E418E4", Offset = "0x1E418E4", VA = "0x1E418E4")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x170001B5")]
			public Quaternion rightFootstepRotation
			{
				[Token(Token = "0x600175E")]
				[Address(RVA = "0x1E41924", Offset = "0x1E41924", VA = "0x1E41924")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x6001748")]
			[Address(RVA = "0x1E3EBAC", Offset = "0x1E3EBAC", VA = "0x1E3EBAC")]
			public void Initiate(Animator animator, Vector3[] positions, Quaternion[] rotations, bool hasToes, float scale)
			{
			}

			[Token(Token = "0x6001749")]
			[Address(RVA = "0x1E3EFC8", Offset = "0x1E3EFC8", VA = "0x1E3EFC8")]
			public void Reset(Vector3[] positions, Quaternion[] rotations)
			{
			}

			[Token(Token = "0x600174A")]
			[Address(RVA = "0x1E3F418", Offset = "0x1E3F418", VA = "0x1E3F418")]
			public void Relax()
			{
			}

			[Token(Token = "0x600174B")]
			[Address(RVA = "0x1E3F480", Offset = "0x1E3F480", VA = "0x1E3F480")]
			public void AddDeltaRotation(Quaternion delta, Vector3 pivot)
			{
			}

			[Token(Token = "0x600174C")]
			[Address(RVA = "0x1E3F860", Offset = "0x1E3F860", VA = "0x1E3F860")]
			public void AddDeltaPosition(Vector3 delta)
			{
			}

			[Token(Token = "0x600174D")]
			[Address(RVA = "0x1E3EED8", Offset = "0x1E3EED8", VA = "0x1E3EED8")]
			public void Initiate_Animated(Animator animator, Vector3[] positions)
			{
			}

			[Token(Token = "0x600174E")]
			[Address(RVA = "0x1E3F9C0", Offset = "0x1E3F9C0", VA = "0x1E3F9C0")]
			private void ResetParams(Vector3[] positions)
			{
			}

			[Token(Token = "0x600174F")]
			[Address(RVA = "0x1E3F1CC", Offset = "0x1E3F1CC", VA = "0x1E3F1CC")]
			public void Reset_Animated(Vector3[] positions)
			{
			}

			[Token(Token = "0x6001750")]
			[Address(RVA = "0x1E3F74C", Offset = "0x1E3F74C", VA = "0x1E3F74C")]
			private void AddDeltaRotation_Animated(Quaternion delta, Vector3 pivot)
			{
			}

			[Token(Token = "0x6001751")]
			[Address(RVA = "0x1E3F970", Offset = "0x1E3F970", VA = "0x1E3F970")]
			private void AddDeltaPosition_Animated(Vector3 delta)
			{
			}

			[Token(Token = "0x6001752")]
			[Address(RVA = "0x1E3FA50", Offset = "0x1E3FA50", VA = "0x1E3FA50")]
			public void Solve_Animated(IKSolverVR solver, float scale, float deltaTime)
			{
			}

			[Token(Token = "0x6001755")]
			[Address(RVA = "0x1E3EBF8", Offset = "0x1E3EBF8", VA = "0x1E3EBF8")]
			private void Initiate_Procedural(Vector3[] positions, Quaternion[] rotations, bool hasToes, float scale)
			{
			}

			[Token(Token = "0x6001756")]
			[Address(RVA = "0x1E3EFF4", Offset = "0x1E3EFF4", VA = "0x1E3EFF4")]
			private void Reset_Procedural(Vector3[] positions, Quaternion[] rotations)
			{
			}

			[Token(Token = "0x6001757")]
			[Address(RVA = "0x1E3F41C", Offset = "0x1E3F41C", VA = "0x1E3F41C")]
			private void Relax_Procedural()
			{
			}

			[Token(Token = "0x6001758")]
			[Address(RVA = "0x1E3F4FC", Offset = "0x1E3F4FC", VA = "0x1E3F4FC")]
			private void AddDeltaRotation_Procedural(Quaternion delta, Vector3 pivot)
			{
			}

			[Token(Token = "0x6001759")]
			[Address(RVA = "0x1E3F8AC", Offset = "0x1E3F8AC", VA = "0x1E3F8AC")]
			private void AddDeltaPosition_Procedural(Vector3 delta)
			{
			}

			[Token(Token = "0x600175A")]
			[Address(RVA = "0x1E404A8", Offset = "0x1E404A8", VA = "0x1E404A8")]
			public void Solve_Procedural(VirtualBone rootBone, Spine spine, Leg leftLeg, Leg rightLeg, Arm leftArm, Arm rightArm, int supportLegIndex, out Vector3 leftFootPosition, out Vector3 rightFootPosition, out Quaternion leftFootRotation, out Quaternion rightFootRotation, out float leftFootOffset, out float rightFootOffset, out float leftHeelOffset, out float rightHeelOffset, float scale, float deltaTime)
			{
			}

			[Token(Token = "0x600175F")]
			[Address(RVA = "0x1E415D4", Offset = "0x1E415D4", VA = "0x1E415D4")]
			private bool StepBlocked(Vector3 fromPosition, Vector3 toPosition, Vector3 rootPosition)
			{
				return default(bool);
			}

			[Token(Token = "0x6001760")]
			[Address(RVA = "0x1E41710", Offset = "0x1E41710", VA = "0x1E41710")]
			private bool CanStep()
			{
				return default(bool);
			}

			[Token(Token = "0x6001761")]
			[Address(RVA = "0x1E41794", Offset = "0x1E41794", VA = "0x1E41794")]
			private static bool GetLineSphereCollision(Vector3 lineStart, Vector3 lineEnd, Vector3 sphereCenter, float sphereRadius)
			{
				return default(bool);
			}

			[Token(Token = "0x6001762")]
			[Address(RVA = "0x1E41968", Offset = "0x1E41968", VA = "0x1E41968")]
			public Locomotion()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003A1")]
		public class Spine : BodyPart
		{
			[Token(Token = "0x400108D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "LargeHeader", RVA = "0xA86F34", Offset = "0xA86F34")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA86F34", Offset = "0xA86F34")]
			public Transform headTarget;

			[Token(Token = "0x400108E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA86F94", Offset = "0xA86F94")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA86F94", Offset = "0xA86F94")]
			public float positionWeight;

			[Token(Token = "0x400108F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA86FE8", Offset = "0xA86FE8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA86FE8", Offset = "0xA86FE8")]
			public float rotationWeight;

			[Token(Token = "0x4001090")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8703C", Offset = "0xA8703C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA8703C", Offset = "0xA8703C")]
			public float headClampWeight;

			[Token(Token = "0x4001091")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA87090", Offset = "0xA87090")]
			public float minHeadHeight;

			[Token(Token = "0x4001092")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA870C8", Offset = "0xA870C8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA870C8", Offset = "0xA870C8")]
			public float useAnimatedHeadHeightWeight;

			[Token(Token = "0x4001093")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8711C", Offset = "0xA8711C")]
			[AttributeAttribute(Name = "ShowIfAttribute", RVA = "0xA8711C", Offset = "0xA8711C")]
			public float useAnimatedHeadHeightRange;

			[Token(Token = "0x4001094")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA871F0", Offset = "0xA871F0")]
			[AttributeAttribute(Name = "ShowIfAttribute", RVA = "0xA871F0", Offset = "0xA871F0")]
			public float animatedHeadHeightBlend;

			[Token(Token = "0x4001095")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[AttributeAttribute(Name = "LargeHeader", RVA = "0xA872C4", Offset = "0xA872C4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA872C4", Offset = "0xA872C4")]
			public Transform pelvisTarget;

			[Token(Token = "0x4001096")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA87324", Offset = "0xA87324")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA87324", Offset = "0xA87324")]
			public float pelvisPositionWeight;

			[Token(Token = "0x4001097")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA87378", Offset = "0xA87378")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA87378", Offset = "0xA87378")]
			public float pelvisRotationWeight;

			[Token(Token = "0x4001098")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA873CC", Offset = "0xA873CC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA873CC", Offset = "0xA873CC")]
			public float maintainPelvisPosition;

			[Token(Token = "0x4001099")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			[AttributeAttribute(Name = "LargeHeader", RVA = "0xA87420", Offset = "0xA87420")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA87420", Offset = "0xA87420")]
			public Transform chestGoal;

			[Token(Token = "0x400109A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA87480", Offset = "0xA87480")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA87480", Offset = "0xA87480")]
			public float chestGoalWeight;

			[Token(Token = "0x400109B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA874D4", Offset = "0xA874D4")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA874D4", Offset = "0xA874D4")]
			public float chestClampWeight;

			[Token(Token = "0x400109C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA87528", Offset = "0xA87528")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA87528", Offset = "0xA87528")]
			public float rotateChestByHands;

			[Token(Token = "0x400109D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			[AttributeAttribute(Name = "LargeHeader", RVA = "0xA8757C", Offset = "0xA8757C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8757C", Offset = "0xA8757C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA8757C", Offset = "0xA8757C")]
			public float bodyPosStiffness;

			[Token(Token = "0x400109E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA875F4", Offset = "0xA875F4")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA875F4", Offset = "0xA875F4")]
			public float bodyRotStiffness;

			[Token(Token = "0x400109F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA87648", Offset = "0xA87648")]
			[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xA87648", Offset = "0xA87648")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA87648", Offset = "0xA87648")]
			public float neckStiffness;

			[Token(Token = "0x40010A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA876C0", Offset = "0xA876C0")]
			public float moveBodyBackWhenCrouching;

			[Token(Token = "0x40010A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			[AttributeAttribute(Name = "LargeHeader", RVA = "0xA876F8", Offset = "0xA876F8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA876F8", Offset = "0xA876F8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA876F8", Offset = "0xA876F8")]
			public float maxRootAngle;

			[Token(Token = "0x40010A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA87774", Offset = "0xA87774")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA87774", Offset = "0xA87774")]
			public float rootHeadingOffset;

			[NonSerialized]
			[Token(Token = "0x40010A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
			[HideInInspector]
			public Vector3 IKPositionHead;

			[NonSerialized]
			[Token(Token = "0x40010A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			[HideInInspector]
			public Quaternion IKRotationHead;

			[NonSerialized]
			[Token(Token = "0x40010A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			[HideInInspector]
			public Vector3 IKPositionPelvis;

			[NonSerialized]
			[Token(Token = "0x40010A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
			[HideInInspector]
			public Quaternion IKRotationPelvis;

			[NonSerialized]
			[Token(Token = "0x40010A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
			[HideInInspector]
			public Vector3 goalPositionChest;

			[NonSerialized]
			[Token(Token = "0x40010A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			[HideInInspector]
			public Vector3 pelvisPositionOffset;

			[NonSerialized]
			[Token(Token = "0x40010A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
			[HideInInspector]
			public Vector3 chestPositionOffset;

			[NonSerialized]
			[Token(Token = "0x40010AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
			[HideInInspector]
			public Vector3 headPositionOffset;

			[NonSerialized]
			[Token(Token = "0x40010AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
			[HideInInspector]
			public Quaternion pelvisRotationOffset;

			[NonSerialized]
			[Token(Token = "0x40010AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
			[HideInInspector]
			public Quaternion chestRotationOffset;

			[NonSerialized]
			[Token(Token = "0x40010AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
			[HideInInspector]
			public Quaternion headRotationOffset;

			[NonSerialized]
			[Token(Token = "0x40010AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
			[HideInInspector]
			public Vector3 faceDirection;

			[NonSerialized]
			[Token(Token = "0x40010AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
			[HideInInspector]
			internal Vector3 headPosition;

			[Token(Token = "0x40010B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA878A0", Offset = "0xA878A0")]
			private Quaternion <anchorRotation>k__BackingField;

			[Token(Token = "0x40010B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA878B0", Offset = "0xA878B0")]
			private Quaternion <anchorRelativeToHead>k__BackingField;

			[Token(Token = "0x40010B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
			private Quaternion headRotation;

			[Token(Token = "0x40010B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
			private Quaternion pelvisRotation;

			[Token(Token = "0x40010B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
			private Quaternion anchorRelativeToPelvis;

			[Token(Token = "0x40010B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
			private Quaternion pelvisRelativeRotation;

			[Token(Token = "0x40010B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
			private Quaternion chestRelativeRotation;

			[Token(Token = "0x40010B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
			private Vector3 headDeltaPosition;

			[Token(Token = "0x40010B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
			private Quaternion pelvisDeltaRotation;

			[Token(Token = "0x40010B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
			private Quaternion chestTargetRotation;

			[Token(Token = "0x40010BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
			private int pelvisIndex;

			[Token(Token = "0x40010BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
			private int spineIndex;

			[Token(Token = "0x40010BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
			private int chestIndex;

			[Token(Token = "0x40010BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
			private int neckIndex;

			[Token(Token = "0x40010BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
			private int headIndex;

			[Token(Token = "0x40010BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
			private float length;

			[Token(Token = "0x40010C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
			private bool hasChest;

			[Token(Token = "0x40010C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x219")]
			private bool hasNeck;

			[Token(Token = "0x40010C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x21A")]
			private bool hasLegs;

			[Token(Token = "0x40010C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
			private float headHeight;

			[Token(Token = "0x40010C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
			private float sizeMlp;

			[Token(Token = "0x40010C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
			private Vector3 chestForward;

			[Token(Token = "0x170001B6")]
			internal VirtualBone pelvis
			{
				[Token(Token = "0x6001763")]
				[Address(RVA = "0x1E9C9DC", Offset = "0x1E9C9DC", VA = "0x1E9C9DC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001B7")]
			internal VirtualBone firstSpineBone
			{
				[Token(Token = "0x6001764")]
				[Address(RVA = "0x1E9CA1C", Offset = "0x1E9CA1C", VA = "0x1E9CA1C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001B8")]
			internal VirtualBone chest
			{
				[Token(Token = "0x6001765")]
				[Address(RVA = "0x1E9CA5C", Offset = "0x1E9CA5C", VA = "0x1E9CA5C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001B9")]
			internal VirtualBone head
			{
				[Token(Token = "0x6001766")]
				[Address(RVA = "0x1E9CAB0", Offset = "0x1E9CAB0", VA = "0x1E9CAB0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001BA")]
			private VirtualBone neck
			{
				[Token(Token = "0x6001767")]
				[Address(RVA = "0x1E9CAF0", Offset = "0x1E9CAF0", VA = "0x1E9CAF0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001BB")]
			internal Quaternion anchorRotation
			{
				[Token(Token = "0x6001768")]
				[Address(RVA = "0x1E9CB30", Offset = "0x1E9CB30", VA = "0x1E9CB30")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D69C", Offset = "0xA8D69C")]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6001769")]
				[Address(RVA = "0x1E9CB44", Offset = "0x1E9CB44", VA = "0x1E9CB44")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D6AC", Offset = "0xA8D6AC")]
				private set
				{
				}
			}

			[Token(Token = "0x170001BC")]
			internal Quaternion anchorRelativeToHead
			{
				[Token(Token = "0x600176A")]
				[Address(RVA = "0x1E9CB58", Offset = "0x1E9CB58", VA = "0x1E9CB58")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D6BC", Offset = "0xA8D6BC")]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x600176B")]
				[Address(RVA = "0x1E9CB6C", Offset = "0x1E9CB6C", VA = "0x1E9CB6C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D6CC", Offset = "0xA8D6CC")]
				private set
				{
				}
			}

			[Token(Token = "0x600176C")]
			[Address(RVA = "0x1E9CB80", Offset = "0x1E9CB80", VA = "0x1E9CB80", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, int rootIndex, int index)
			{
			}

			[Token(Token = "0x600176D")]
			[Address(RVA = "0x1E9D668", Offset = "0x1E9D668", VA = "0x1E9D668", Slot = "5")]
			public override void PreSolve(float scale)
			{
			}

			[Token(Token = "0x600176E")]
			[Address(RVA = "0x1E9DA3C", Offset = "0x1E9DA3C", VA = "0x1E9DA3C", Slot = "7")]
			public override void ApplyOffsets(float scale)
			{
			}

			[Token(Token = "0x600176F")]
			[Address(RVA = "0x1E9DE88", Offset = "0x1E9DE88", VA = "0x1E9DE88")]
			private void CalculateChestTargetRotation(VirtualBone rootBone, Arm[] arms)
			{
			}

			[Token(Token = "0x6001770")]
			[Address(RVA = "0x1E9E2E4", Offset = "0x1E9E2E4", VA = "0x1E9E2E4")]
			public void Solve(Animator animator, VirtualBone rootBone, Leg[] legs, Arm[] arms, float scale)
			{
			}

			[Token(Token = "0x6001771")]
			[Address(RVA = "0x1E9EB48", Offset = "0x1E9EB48", VA = "0x1E9EB48")]
			private void FABRIKPass(Vector3 animatedPelvisPos, Vector3 rootUp, float weight)
			{
			}

			[Token(Token = "0x6001772")]
			[Address(RVA = "0x1E9F1D0", Offset = "0x1E9F1D0", VA = "0x1E9F1D0")]
			private void SolvePelvis()
			{
			}

			[Token(Token = "0x6001773")]
			[Address(RVA = "0x1E9FB58", Offset = "0x1E9FB58", VA = "0x1E9FB58", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x6001774")]
			[Address(RVA = "0x1E9FD34", Offset = "0x1E9FD34", VA = "0x1E9FD34", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x6001775")]
			[Address(RVA = "0x1E9E040", Offset = "0x1E9E040", VA = "0x1E9E040")]
			private void AdjustChestByHands(ref Quaternion chestTargetRotation, Arm[] arms)
			{
			}

			[Token(Token = "0x6001776")]
			[Address(RVA = "0x1E9EF1C", Offset = "0x1E9EF1C", VA = "0x1E9EF1C")]
			public void InverseTranslateToHead(Leg[] legs, bool limited, bool useCurrentLegMag, Vector3 offset, float w)
			{
			}

			[Token(Token = "0x6001777")]
			[Address(RVA = "0x1E9E7EC", Offset = "0x1E9E7EC", VA = "0x1E9E7EC")]
			private void TranslatePelvis(Leg[] legs, Vector3 deltaPosition, Quaternion deltaRotation, float scale)
			{
			}

			[Token(Token = "0x6001778")]
			[Address(RVA = "0x1E9FDD0", Offset = "0x1E9FDD0", VA = "0x1E9FDD0")]
			private Vector3 LimitPelvisPosition(Leg[] legs, Vector3 pelvisPosition, bool useCurrentLegMag, int it = 2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001779")]
			[Address(RVA = "0x1E9EFFC", Offset = "0x1E9EFFC", VA = "0x1E9EFFC")]
			private void Bend(VirtualBone[] bones, int firstIndex, int lastIndex, Quaternion targetRotation, float clampWeight, bool uniformWeight, float w)
			{
			}

			[Token(Token = "0x600177A")]
			[Address(RVA = "0x1E9ECC8", Offset = "0x1E9ECC8", VA = "0x1E9ECC8")]
			private void Bend(VirtualBone[] bones, int firstIndex, int lastIndex, Quaternion targetRotation, Quaternion rotationOffset, float clampWeight, bool uniformWeight, float w)
			{
			}

			[Token(Token = "0x600177B")]
			[Address(RVA = "0x1EA0104", Offset = "0x1EA0104", VA = "0x1EA0104")]
			public Spine()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003A2")]
		public enum PositionOffset
		{
			[Token(Token = "0x40010C7")]
			Pelvis,
			[Token(Token = "0x40010C8")]
			Chest,
			[Token(Token = "0x40010C9")]
			Head,
			[Token(Token = "0x40010CA")]
			LeftHand,
			[Token(Token = "0x40010CB")]
			RightHand,
			[Token(Token = "0x40010CC")]
			LeftFoot,
			[Token(Token = "0x40010CD")]
			RightFoot,
			[Token(Token = "0x40010CE")]
			LeftHeel,
			[Token(Token = "0x40010CF")]
			RightHeel
		}

		[Serializable]
		[Token(Token = "0x20003A3")]
		public enum RotationOffset
		{
			[Token(Token = "0x40010D1")]
			Pelvis,
			[Token(Token = "0x40010D2")]
			Chest,
			[Token(Token = "0x40010D3")]
			Head
		}

		[Serializable]
		[Token(Token = "0x20003A4")]
		public class VirtualBone
		{
			[Token(Token = "0x40010D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 readPosition;

			[Token(Token = "0x40010D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Quaternion readRotation;

			[Token(Token = "0x40010D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 solverPosition;

			[Token(Token = "0x40010D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Quaternion solverRotation;

			[Token(Token = "0x40010D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public float length;

			[Token(Token = "0x40010D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public float sqrMag;

			[Token(Token = "0x40010DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Vector3 axis;

			[Token(Token = "0x600177C")]
			[Address(RVA = "0x1E9D5CC", Offset = "0x1E9D5CC", VA = "0x1E9D5CC")]
			public VirtualBone(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x600177D")]
			[Address(RVA = "0x1E9D648", Offset = "0x1E9D648", VA = "0x1E9D648")]
			public void Read(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x600177E")]
			[Address(RVA = "0x1EA029C", Offset = "0x1EA029C", VA = "0x1EA029C")]
			public static void SwingRotation(VirtualBone[] bones, int index, Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x600177F")]
			[Address(RVA = "0x1EA0420", Offset = "0x1EA0420", VA = "0x1EA0420")]
			public static float PreSolve(ref VirtualBone[] bones)
			{
				return default(float);
			}

			[Token(Token = "0x6001780")]
			[Address(RVA = "0x1E9FFDC", Offset = "0x1E9FFDC", VA = "0x1E9FFDC")]
			public static void RotateAroundPoint(VirtualBone[] bones, int index, Vector3 point, Quaternion rotation)
			{
			}

			[Token(Token = "0x6001781")]
			[Address(RVA = "0x1EA0610", Offset = "0x1EA0610", VA = "0x1EA0610")]
			public static void RotateBy(VirtualBone[] bones, int index, Quaternion rotation)
			{
			}

			[Token(Token = "0x6001782")]
			[Address(RVA = "0x1EA0770", Offset = "0x1EA0770", VA = "0x1EA0770")]
			public static void RotateBy(VirtualBone[] bones, Quaternion rotation)
			{
			}

			[Token(Token = "0x6001783")]
			[Address(RVA = "0x1EA08AC", Offset = "0x1EA08AC", VA = "0x1EA08AC")]
			public static void RotateTo(VirtualBone[] bones, int index, Quaternion rotation)
			{
			}

			[Token(Token = "0x6001784")]
			[Address(RVA = "0x1E9F754", Offset = "0x1E9F754", VA = "0x1E9F754")]
			public static void SolveTrigonometric(VirtualBone[] bones, int first, int second, int third, Vector3 targetPosition, Vector3 bendNormal, float weight)
			{
			}

			[Token(Token = "0x6001785")]
			[Address(RVA = "0x1EA0964", Offset = "0x1EA0964", VA = "0x1EA0964")]
			private static Vector3 GetDirectionToBendPoint(Vector3 direction, float directionMag, Vector3 bendDirection, float sqrMag1, float sqrMag2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001786")]
			[Address(RVA = "0x1E9F3C4", Offset = "0x1E9F3C4", VA = "0x1E9F3C4")]
			public static void SolveFABRIK(VirtualBone[] bones, Vector3 startPosition, Vector3 targetPosition, float weight, float minNormalizedTargetDistance, int iterations, float length, Vector3 startOffset)
			{
			}

			[Token(Token = "0x6001787")]
			[Address(RVA = "0x1EA0ACC", Offset = "0x1EA0ACC", VA = "0x1EA0ACC")]
			private static Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001788")]
			[Address(RVA = "0x1EA0B3C", Offset = "0x1EA0B3C", VA = "0x1EA0B3C")]
			public static void SolveCCD(VirtualBone[] bones, Vector3 targetPosition, float weight, int iterations)
			{
			}
		}

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA814A8", Offset = "0xA814A8")]
		private Animator <animator>k__BackingField;

		[Token(Token = "0x4000B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform[] solverTransforms;

		[Token(Token = "0x4000B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool hasChest;

		[Token(Token = "0x4000B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool hasNeck;

		[Token(Token = "0x4000B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		private bool hasShoulders;

		[Token(Token = "0x4000B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
		private bool hasToes;

		[Token(Token = "0x4000B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool hasLegs;

		[Token(Token = "0x4000B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		private bool hasArms;

		[Token(Token = "0x4000B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3[] readPositions;

		[Token(Token = "0x4000B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Quaternion[] readRotations;

		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3[] solvedPositions;

		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Quaternion[] solvedRotations;

		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Quaternion[] defaultLocalRotations;

		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3[] defaultLocalPositions;

		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 rootV;

		[Token(Token = "0x4000B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Vector3 rootVelocity;

		[Token(Token = "0x4000B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 bodyOffset;

		[Token(Token = "0x4000B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private int supportLegIndex;

		[Token(Token = "0x4000B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private int lastLOD;

		[Token(Token = "0x4000B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float lastLocomotionWeight;

		[Token(Token = "0x4000B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA814B8", Offset = "0xA814B8")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA814B8", Offset = "0xA814B8")]
		public int LOD;

		[Token(Token = "0x4000B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8150C", Offset = "0xA8150C")]
		public float scale;

		[Token(Token = "0x4000B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA81544", Offset = "0xA81544")]
		public bool plantFeet;

		[Token(Token = "0x4000B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8157C", Offset = "0xA8157C")]
		private VirtualBone <rootBone>k__BackingField;

		[Token(Token = "0x4000B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8158C", Offset = "0xA8158C")]
		public Spine spine;

		[Token(Token = "0x4000B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA815C4", Offset = "0xA815C4")]
		public Arm leftArm;

		[Token(Token = "0x4000B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA815FC", Offset = "0xA815FC")]
		public Arm rightArm;

		[Token(Token = "0x4000B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA81634", Offset = "0xA81634")]
		public Leg leftLeg;

		[Token(Token = "0x4000B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8166C", Offset = "0xA8166C")]
		public Leg rightLeg;

		[Token(Token = "0x4000B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA816A4", Offset = "0xA816A4")]
		public Locomotion locomotion;

		[Token(Token = "0x4000B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Leg[] legs;

		[Token(Token = "0x4000B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Arm[] arms;

		[Token(Token = "0x4000B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Vector3 headPosition;

		[Token(Token = "0x4000B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private Vector3 headDeltaPosition;

		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Vector3 raycastOriginPelvis;

		[Token(Token = "0x4000B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private Vector3 lastOffset;

		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private Vector3 debugPos1;

		[Token(Token = "0x4000B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private Vector3 debugPos2;

		[Token(Token = "0x4000B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private Vector3 debugPos3;

		[Token(Token = "0x4000B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		private Vector3 debugPos4;

		[Token(Token = "0x1700010C")]
		public Animator animator
		{
			[Token(Token = "0x600116E")]
			[Address(RVA = "0x2BC79B0", Offset = "0x2BC79B0", VA = "0x2BC79B0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8B6BC", Offset = "0xA8B6BC")]
			get
			{
				return null;
			}
			[Token(Token = "0x600116F")]
			[Address(RVA = "0x2BC79B8", Offset = "0x2BC79B8", VA = "0x2BC79B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8B6CC", Offset = "0xA8B6CC")]
			private set
			{
			}
		}

		[Token(Token = "0x1700010D")]
		[HideInInspector]
		public VirtualBone rootBone
		{
			[Token(Token = "0x6001187")]
			[Address(RVA = "0x2BCB400", Offset = "0x2BCB400", VA = "0x2BCB400")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8B6DC", Offset = "0xA8B6DC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001188")]
			[Address(RVA = "0x2BCB408", Offset = "0x2BCB408", VA = "0x2BCB408")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8B6EC", Offset = "0xA8B6EC")]
			private set
			{
			}
		}

		[Token(Token = "0x6001170")]
		[Address(RVA = "0x2BC79C0", Offset = "0x2BC79C0", VA = "0x2BC79C0")]
		public void SetToReferences(VRIK.References references)
		{
		}

		[Token(Token = "0x6001171")]
		[Address(RVA = "0x2BC7EE0", Offset = "0x2BC7EE0", VA = "0x2BC7EE0")]
		public void GuessHandOrientations(VRIK.References references, bool onlyIfZero)
		{
		}

		[Token(Token = "0x6001172")]
		[Address(RVA = "0x2BC7D6C", Offset = "0x2BC7D6C", VA = "0x2BC7D6C")]
		public void DefaultAnimationCurves()
		{
		}

		[Token(Token = "0x6001173")]
		[Address(RVA = "0x2BC8244", Offset = "0x2BC8244", VA = "0x2BC8244")]
		public void AddPositionOffset(PositionOffset positionOffset, Vector3 value)
		{
		}

		[Token(Token = "0x6001174")]
		[Address(RVA = "0x2BC838C", Offset = "0x2BC838C", VA = "0x2BC838C")]
		public void AddRotationOffset(RotationOffset rotationOffset, Vector3 value)
		{
		}

		[Token(Token = "0x6001175")]
		[Address(RVA = "0x2BC83BC", Offset = "0x2BC83BC", VA = "0x2BC83BC")]
		public void AddRotationOffset(RotationOffset rotationOffset, Quaternion value)
		{
		}

		[Token(Token = "0x6001176")]
		[Address(RVA = "0x2BC846C", Offset = "0x2BC846C", VA = "0x2BC846C")]
		public void AddPlatformMotion(Vector3 deltaPosition, Quaternion deltaRotation, Vector3 platformPivot)
		{
		}

		[Token(Token = "0x6001177")]
		[Address(RVA = "0x2BC8554", Offset = "0x2BC8554", VA = "0x2BC8554")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001178")]
		[Address(RVA = "0x2BC8D34", Offset = "0x2BC8D34", VA = "0x2BC8D34", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6001179")]
		[Address(RVA = "0x2BC8EA4", Offset = "0x2BC8EA4", VA = "0x2BC8EA4", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x600117A")]
		[Address(RVA = "0x2BC90A8", Offset = "0x2BC90A8", VA = "0x2BC90A8", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x600117B")]
		[Address(RVA = "0x2BC9124", Offset = "0x2BC9124", VA = "0x2BC9124", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x600117C")]
		[Address(RVA = "0x2BC91A0", Offset = "0x2BC91A0", VA = "0x2BC91A0", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600117D")]
		[Address(RVA = "0x2BC9384", Offset = "0x2BC9384", VA = "0x2BC9384")]
		private Vector3 GetNormal(Transform[] transforms)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600117E")]
		[Address(RVA = "0x2BC8124", Offset = "0x2BC8124", VA = "0x2BC8124")]
		private static Keyframe[] GetSineKeyframes(float mag)
		{
			return null;
		}

		[Token(Token = "0x600117F")]
		[Address(RVA = "0x2BC8650", Offset = "0x2BC8650", VA = "0x2BC8650")]
		private void UpdateSolverTransforms()
		{
		}

		[Token(Token = "0x6001180")]
		[Address(RVA = "0x2BC9544", Offset = "0x2BC9544", VA = "0x2BC9544", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6001181")]
		[Address(RVA = "0x2BC9594", Offset = "0x2BC9594", VA = "0x2BC9594", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6001182")]
		[Address(RVA = "0x2BCAB1C", Offset = "0x2BCAB1C", VA = "0x2BCAB1C")]
		private void WriteTransforms()
		{
		}

		[Token(Token = "0x6001183")]
		[Address(RVA = "0x2BC87B4", Offset = "0x2BC87B4", VA = "0x2BC87B4")]
		private void Read(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, bool hasLegs, bool hasArms)
		{
		}

		[Token(Token = "0x6001184")]
		[Address(RVA = "0x2BC9918", Offset = "0x2BC9918", VA = "0x2BC9918")]
		private void Solve()
		{
		}

		[Token(Token = "0x6001185")]
		[Address(RVA = "0x2BCAECC", Offset = "0x2BCAECC", VA = "0x2BCAECC")]
		private Vector3 GetPosition(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001186")]
		[Address(RVA = "0x2BCAF14", Offset = "0x2BCAF14", VA = "0x2BCAF14")]
		private Quaternion GetRotation(int index)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001189")]
		[Address(RVA = "0x2BCA9C4", Offset = "0x2BCA9C4", VA = "0x2BCA9C4")]
		private void Write()
		{
		}

		[Token(Token = "0x600118A")]
		[Address(RVA = "0x2BCAF58", Offset = "0x2BCAF58", VA = "0x2BCAF58")]
		private Vector3 GetPelvisOffset(float deltaTime)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600118B")]
		[Address(RVA = "0x2BCB410", Offset = "0x2BCB410", VA = "0x2BCB410")]
		public IKSolverVR()
		{
		}
	}
	[Token(Token = "0x200028C")]
	public class TwistRelaxer : MonoBehaviour
	{
		[Token(Token = "0x4000B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IK ik;

		[Token(Token = "0x4000B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA816DC", Offset = "0xA816DC")]
		public TwistSolver[] twistSolvers;

		[Token(Token = "0x600118C")]
		[Address(RVA = "0x1A67838", Offset = "0x1A67838", VA = "0x1A67838")]
		public void Start()
		{
		}

		[Token(Token = "0x600118D")]
		[Address(RVA = "0x1A67FDC", Offset = "0x1A67FDC", VA = "0x1A67FDC")]
		private void Update()
		{
		}

		[Token(Token = "0x600118E")]
		[Address(RVA = "0x1A68170", Offset = "0x1A68170", VA = "0x1A68170")]
		private void OnPostUpdate()
		{
		}

		[Token(Token = "0x600118F")]
		[Address(RVA = "0x1A68600", Offset = "0x1A68600", VA = "0x1A68600")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001190")]
		[Address(RVA = "0x1A686C4", Offset = "0x1A686C4", VA = "0x1A686C4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001191")]
		[Address(RVA = "0x1A68800", Offset = "0x1A68800", VA = "0x1A68800")]
		public TwistRelaxer()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200028D")]
	public class TwistSolver
	{
		[Token(Token = "0x4000B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA81714", Offset = "0xA81714")]
		public Transform transform;

		[Token(Token = "0x4000B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8174C", Offset = "0xA8174C")]
		public Transform parent;

		[Token(Token = "0x4000B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA81784", Offset = "0xA81784")]
		public Transform[] children;

		[Token(Token = "0x4000B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA817BC", Offset = "0xA817BC")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA817BC", Offset = "0xA817BC")]
		public float weight;

		[Token(Token = "0x4000B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA81810", Offset = "0xA81810")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA81810", Offset = "0xA81810")]
		public float parentChildCrossfade;

		[Token(Token = "0x4000B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA81864", Offset = "0xA81864")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA81864", Offset = "0xA81864")]
		public float twistAngleOffset;

		[Token(Token = "0x4000B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 twistAxis;

		[Token(Token = "0x4000B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 axis;

		[Token(Token = "0x4000B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 axisRelativeToParentDefault;

		[Token(Token = "0x4000B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 axisRelativeToChildDefault;

		[Token(Token = "0x4000B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Quaternion[] childRotations;

		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool inititated;

		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Quaternion defaultLocalRotation;

		[Token(Token = "0x4000B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Quaternion[] defaultChildLocalRotations;

		[Token(Token = "0x6001192")]
		[Address(RVA = "0x1A68868", Offset = "0x1A68868", VA = "0x1A68868")]
		public TwistSolver()
		{
		}

		[Token(Token = "0x6001193")]
		[Address(RVA = "0x1A67A38", Offset = "0x1A67A38", VA = "0x1A67A38")]
		public void Initiate()
		{
		}

		[Token(Token = "0x6001194")]
		[Address(RVA = "0x1A680B0", Offset = "0x1A680B0", VA = "0x1A680B0")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x6001195")]
		[Address(RVA = "0x1A68234", Offset = "0x1A68234", VA = "0x1A68234")]
		public void Relax()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200028E")]
	public class InteractionEffector
	{
		[Token(Token = "0x4000B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA818C0", Offset = "0xA818C0")]
		private FullBodyBipedEffector <effectorType>k__BackingField;

		[Token(Token = "0x4000B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA818D0", Offset = "0xA818D0")]
		private bool <isPaused>k__BackingField;

		[Token(Token = "0x4000B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA818E0", Offset = "0xA818E0")]
		private InteractionObject <interactionObject>k__BackingField;

		[Token(Token = "0x4000B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Poser poser;

		[Token(Token = "0x4000B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private IKEffector effector;

		[Token(Token = "0x4000B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float timer;

		[Token(Token = "0x4000B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float length;

		[Token(Token = "0x4000B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float weight;

		[Token(Token = "0x4000B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float fadeInSpeed;

		[Token(Token = "0x4000B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float defaultPositionWeight;

		[Token(Token = "0x4000B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float defaultRotationWeight;

		[Token(Token = "0x4000B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float defaultPull;

		[Token(Token = "0x4000B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float defaultReach;

		[Token(Token = "0x4000B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float defaultPush;

		[Token(Token = "0x4000B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float defaultPushParent;

		[Token(Token = "0x4000B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float defaultBendGoalWeight;

		[Token(Token = "0x4000B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float resetTimer;

		[Token(Token = "0x4000B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool positionWeightUsed;

		[Token(Token = "0x4000B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool rotationWeightUsed;

		[Token(Token = "0x4000B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		private bool pullUsed;

		[Token(Token = "0x4000B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		private bool reachUsed;

		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool pushUsed;

		[Token(Token = "0x4000B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		private bool pushParentUsed;

		[Token(Token = "0x4000B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
		private bool bendGoalWeightUsed;

		[Token(Token = "0x4000B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x67")]
		private bool pickedUp;

		[Token(Token = "0x4000B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool defaults;

		[Token(Token = "0x4000B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool pickUpOnPostFBBIK;

		[Token(Token = "0x4000B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 pickUpPosition;

		[Token(Token = "0x4000B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 pausePositionRelative;

		[Token(Token = "0x4000B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Quaternion pickUpRotation;

		[Token(Token = "0x4000B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Quaternion pauseRotationRelative;

		[Token(Token = "0x4000B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private InteractionTarget interactionTarget;

		[Token(Token = "0x4000B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Transform target;

		[Token(Token = "0x4000B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private List<bool> triggered;

		[Token(Token = "0x4000B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private InteractionSystem interactionSystem;

		[Token(Token = "0x4000B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool started;

		[Token(Token = "0x1700010E")]
		public FullBodyBipedEffector effectorType
		{
			[Token(Token = "0x6001196")]
			[Address(RVA = "0x22E7F08", Offset = "0x22E7F08", VA = "0x22E7F08")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8B6FC", Offset = "0xA8B6FC")]
			get
			{
				return default(FullBodyBipedEffector);
			}
			[Token(Token = "0x6001197")]
			[Address(RVA = "0x22E7F10", Offset = "0x22E7F10", VA = "0x22E7F10")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8B70C", Offset = "0xA8B70C")]
			private set
			{
			}
		}

		[Token(Token = "0x1700010F")]
		public bool isPaused
		{
			[Token(Token = "0x6001198")]
			[Address(RVA = "0x22E7F18", Offset = "0x22E7F18", VA = "0x22E7F18")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8B71C", Offset = "0xA8B71C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001199")]
			[Address(RVA = "0x22E7F20", Offset = "0x22E7F20", VA = "0x22E7F20")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8B72C", Offset = "0xA8B72C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000110")]
		public InteractionObject interactionObject
		{
			[Token(Token = "0x600119A")]
			[Address(RVA = "0x22E7F2C", Offset = "0x22E7F2C", VA = "0x22E7F2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8B73C", Offset = "0xA8B73C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600119B")]
			[Address(RVA = "0x22E7F34", Offset = "0x22E7F34", VA = "0x22E7F34")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8B74C", Offset = "0xA8B74C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000111")]
		public bool inInteraction
		{
			[Token(Token = "0x600119C")]
			[Address(RVA = "0x22E7F3C", Offset = "0x22E7F3C", VA = "0x22E7F3C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000112")]
		public float progress
		{
			[Token(Token = "0x60011A6")]
			[Address(RVA = "0x22EA638", Offset = "0x22EA638", VA = "0x22EA638")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x600119D")]
		[Address(RVA = "0x22E7FA8", Offset = "0x22E7FA8", VA = "0x22E7FA8")]
		public InteractionEffector(FullBodyBipedEffector effectorType)
		{
		}

		[Token(Token = "0x600119E")]
		[Address(RVA = "0x22E8040", Offset = "0x22E8040", VA = "0x22E8040")]
		public void Initiate(InteractionSystem interactionSystem)
		{
		}

		[Token(Token = "0x600119F")]
		[Address(RVA = "0x22E8100", Offset = "0x22E8100", VA = "0x22E8100")]
		private void StoreDefaults()
		{
		}

		[Token(Token = "0x60011A0")]
		[Address(RVA = "0x22E8278", Offset = "0x22E8278", VA = "0x22E8278")]
		public bool ResetToDefaults(float speed, float deltaTime)
		{
			return default(bool);
		}

		[Token(Token = "0x60011A1")]
		[Address(RVA = "0x22E85D4", Offset = "0x22E85D4", VA = "0x22E85D4")]
		public bool Pause()
		{
			return default(bool);
		}

		[Token(Token = "0x60011A2")]
		[Address(RVA = "0x22E8690", Offset = "0x22E8690", VA = "0x22E8690")]
		public bool Resume()
		{
			return default(bool);
		}

		[Token(Token = "0x60011A3")]
		[Address(RVA = "0x22E86E8", Offset = "0x22E86E8", VA = "0x22E86E8")]
		public bool Start(InteractionObject interactionObject, string tag, float fadeInTime, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x60011A4")]
		[Address(RVA = "0x22E895C", Offset = "0x22E895C", VA = "0x22E895C")]
		public bool Start(InteractionObject interactionObject, InteractionTarget interactionTarget, float fadeInTime, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x60011A5")]
		[Address(RVA = "0x22E9360", Offset = "0x22E9360", VA = "0x22E9360")]
		public void Update(Transform root, float speed, float deltaTime)
		{
		}

		[Token(Token = "0x60011A7")]
		[Address(RVA = "0x22E9E30", Offset = "0x22E9E30", VA = "0x22E9E30")]
		private void TriggerUntriggeredEvents(bool checkTime, out bool pickUp, out bool pause)
		{
		}

		[Token(Token = "0x60011A8")]
		[Address(RVA = "0x22EA074", Offset = "0x22EA074", VA = "0x22EA074")]
		private void PickUp(Transform root)
		{
		}

		[Token(Token = "0x60011A9")]
		[Address(RVA = "0x22EA514", Offset = "0x22EA514", VA = "0x22EA514")]
		public bool Stop()
		{
			return default(bool);
		}

		[Token(Token = "0x60011AA")]
		[Address(RVA = "0x22EA798", Offset = "0x22EA798", VA = "0x22EA798")]
		public void OnPostFBBIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200028F")]
	public class InteractionLookAt
	{
		[Token(Token = "0x4000B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA818F0", Offset = "0xA818F0")]
		public LookAtIK ik;

		[Token(Token = "0x4000B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA81928", Offset = "0xA81928")]
		public float lerpSpeed;

		[Token(Token = "0x4000B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA81960", Offset = "0xA81960")]
		public float weightSpeed;

		[Token(Token = "0x4000B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public bool isPaused;

		[Token(Token = "0x4000B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform lookAtTarget;

		[Token(Token = "0x4000B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float stopLookTime;

		[Token(Token = "0x4000B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float weight;

		[Token(Token = "0x4000B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool firstFBBIKSolve;

		[Token(Token = "0x60011AB")]
		[Address(RVA = "0x22EA9BC", Offset = "0x22EA9BC", VA = "0x22EA9BC")]
		public void Look(Transform target, float time)
		{
		}

		[Token(Token = "0x60011AC")]
		[Address(RVA = "0x22EAAE4", Offset = "0x22EAAE4", VA = "0x22EAAE4")]
		public void OnFixTransforms()
		{
		}

		[Token(Token = "0x60011AD")]
		[Address(RVA = "0x22EAB88", Offset = "0x22EAB88", VA = "0x22EAB88")]
		public void Update()
		{
		}

		[Token(Token = "0x60011AE")]
		[Address(RVA = "0x22EB1D0", Offset = "0x22EB1D0", VA = "0x22EB1D0")]
		public void SolveSpine()
		{
		}

		[Token(Token = "0x60011AF")]
		[Address(RVA = "0x22EB2C4", Offset = "0x22EB2C4", VA = "0x22EB2C4")]
		public void SolveHead()
		{
		}

		[Token(Token = "0x60011B0")]
		[Address(RVA = "0x22EB38C", Offset = "0x22EB38C", VA = "0x22EB38C")]
		public InteractionLookAt()
		{
		}
	}
	[Token(Token = "0x2000290")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xA7E0B0", Offset = "0xA7E0B0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xA7E0B0", Offset = "0xA7E0B0")]
	public class InteractionObject : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003A5")]
		public class InteractionEvent
		{
			[Token(Token = "0x40010DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA878C0", Offset = "0xA878C0")]
			public float time;

			[Token(Token = "0x40010DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA878F8", Offset = "0xA878F8")]
			public bool pause;

			[Token(Token = "0x40010DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA87930", Offset = "0xA87930")]
			public bool pickUp;

			[Token(Token = "0x40010DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA87968", Offset = "0xA87968")]
			public AnimatorEvent[] animations;

			[Token(Token = "0x40010DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA879A0", Offset = "0xA879A0")]
			public Message[] messages;

			[Token(Token = "0x40010E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA879D8", Offset = "0xA879D8")]
			public UnityEvent unityEvent;

			[Token(Token = "0x6001789")]
			[Address(RVA = "0x1EA5680", Offset = "0x1EA5680", VA = "0x1EA5680")]
			public void Activate(Transform t)
			{
			}

			[Token(Token = "0x600178A")]
			[Address(RVA = "0x1EA5854", Offset = "0x1EA5854", VA = "0x1EA5854")]
			public InteractionEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003A6")]
		public class Message
		{
			[Token(Token = "0x40010E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA87A10", Offset = "0xA87A10")]
			public string function;

			[Token(Token = "0x40010E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA87A48", Offset = "0xA87A48")]
			public GameObject recipient;

			[Token(Token = "0x40010E3")]
			private const string empty = "";

			[Token(Token = "0x600178B")]
			[Address(RVA = "0x1EA5750", Offset = "0x1EA5750", VA = "0x1EA5750")]
			public void Send(Transform t)
			{
			}

			[Token(Token = "0x600178C")]
			[Address(RVA = "0x1EA585C", Offset = "0x1EA585C", VA = "0x1EA585C")]
			public Message()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003A7")]
		public class AnimatorEvent
		{
			[Token(Token = "0x40010E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA87A80", Offset = "0xA87A80")]
			public Animator animator;

			[Token(Token = "0x40010E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA87AB8", Offset = "0xA87AB8")]
			public Animation animation;

			[Token(Token = "0x40010E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA87AF0", Offset = "0xA87AF0")]
			public string animationState;

			[Token(Token = "0x40010E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA87B28", Offset = "0xA87B28")]
			public float crossfadeTime;

			[Token(Token = "0x40010E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA87B60", Offset = "0xA87B60")]
			public int layer;

			[Token(Token = "0x40010E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA87B98", Offset = "0xA87B98")]
			public bool resetNormalizedTime;

			[Token(Token = "0x40010EA")]
			private const string empty = "";

			[Token(Token = "0x600178D")]
			[Address(RVA = "0x1EA53EC", Offset = "0x1EA53EC", VA = "0x1EA53EC")]
			public void Activate(bool pickUp)
			{
			}

			[Token(Token = "0x600178E")]
			[Address(RVA = "0x1EA54DC", Offset = "0x1EA54DC", VA = "0x1EA54DC")]
			private void Activate(Animator animator)
			{
			}

			[Token(Token = "0x600178F")]
			[Address(RVA = "0x1EA5590", Offset = "0x1EA5590", VA = "0x1EA5590")]
			private void Activate(Animation animation)
			{
			}

			[Token(Token = "0x6001790")]
			[Address(RVA = "0x1EA566C", Offset = "0x1EA566C", VA = "0x1EA566C")]
			public AnimatorEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003A8")]
		public class WeightCurve
		{
			[Serializable]
			[Token(Token = "0x200043B")]
			public enum Type
			{
				[Token(Token = "0x40012B0")]
				PositionWeight,
				[Token(Token = "0x40012B1")]
				RotationWeight,
				[Token(Token = "0x40012B2")]
				PositionOffsetX,
				[Token(Token = "0x40012B3")]
				PositionOffsetY,
				[Token(Token = "0x40012B4")]
				PositionOffsetZ,
				[Token(Token = "0x40012B5")]
				Pull,
				[Token(Token = "0x40012B6")]
				Reach,
				[Token(Token = "0x40012B7")]
				RotateBoneWeight,
				[Token(Token = "0x40012B8")]
				Push,
				[Token(Token = "0x40012B9")]
				PushParent,
				[Token(Token = "0x40012BA")]
				PoserWeight,
				[Token(Token = "0x40012BB")]
				BendGoalWeight
			}

			[Token(Token = "0x40010EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA87BD0", Offset = "0xA87BD0")]
			public Type type;

			[Token(Token = "0x40010EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA87C08", Offset = "0xA87C08")]
			public AnimationCurve curve;

			[Token(Token = "0x6001791")]
			[Address(RVA = "0x1EA58A0", Offset = "0x1EA58A0", VA = "0x1EA58A0")]
			public float GetValue(float timer)
			{
				return default(float);
			}

			[Token(Token = "0x6001792")]
			[Address(RVA = "0x1EA58CC", Offset = "0x1EA58CC", VA = "0x1EA58CC")]
			public WeightCurve()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003A9")]
		public class Multiplier
		{
			[Token(Token = "0x40010ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA87C40", Offset = "0xA87C40")]
			public WeightCurve.Type curve;

			[Token(Token = "0x40010EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA87C78", Offset = "0xA87C78")]
			public float multiplier;

			[Token(Token = "0x40010EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA87CB0", Offset = "0xA87CB0")]
			public WeightCurve.Type result;

			[Token(Token = "0x6001793")]
			[Address(RVA = "0x1EA5864", Offset = "0x1EA5864", VA = "0x1EA5864")]
			public float GetValue(WeightCurve weightCurve, float timer)
			{
				return default(float);
			}

			[Token(Token = "0x6001794")]
			[Address(RVA = "0x1EA58BC", Offset = "0x1EA58BC", VA = "0x1EA58BC")]
			public Multiplier()
			{
			}
		}

		[Token(Token = "0x4000B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA819A8", Offset = "0xA819A8")]
		public Transform otherLookAtTarget;

		[Token(Token = "0x4000B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA819E0", Offset = "0xA819E0")]
		public Transform otherTargetsRoot;

		[Token(Token = "0x4000B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA81A18", Offset = "0xA81A18")]
		public Transform positionOffsetSpace;

		[Token(Token = "0x4000B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public WeightCurve[] weightCurves;

		[Token(Token = "0x4000B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Multiplier[] multipliers;

		[Token(Token = "0x4000B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public InteractionEvent[] events;

		[Token(Token = "0x4000B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA81A50", Offset = "0xA81A50")]
		private float <length>k__BackingField;

		[Token(Token = "0x4000B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA81A60", Offset = "0xA81A60")]
		private InteractionSystem <lastUsedInteractionSystem>k__BackingField;

		[Token(Token = "0x4000B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private InteractionTarget[] targets;

		[Token(Token = "0x17000113")]
		public float length
		{
			[Token(Token = "0x60011B9")]
			[Address(RVA = "0x22EB5E0", Offset = "0x22EB5E0", VA = "0x22EB5E0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8B91C", Offset = "0xA8B91C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60011BA")]
			[Address(RVA = "0x22EB5E8", Offset = "0x22EB5E8", VA = "0x22EB5E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8B92C", Offset = "0xA8B92C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000114")]
		public InteractionSystem lastUsedInteractionSystem
		{
			[Token(Token = "0x60011BB")]
			[Address(RVA = "0x22EB5F0", Offset = "0x22EB5F0", VA = "0x22EB5F0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8B93C", Offset = "0xA8B93C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011BC")]
			[Address(RVA = "0x22EB5F8", Offset = "0x22EB5F8", VA = "0x22EB5F8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8B94C", Offset = "0xA8B94C")]
			private set
			{
			}
		}

		[Token(Token = "0x17000115")]
		public Transform lookAtTarget
		{
			[Token(Token = "0x60011BE")]
			[Address(RVA = "0x22EB7C8", Offset = "0x22EB7C8", VA = "0x22EB7C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000116")]
		public Transform targetsRoot
		{
			[Token(Token = "0x60011C6")]
			[Address(RVA = "0x22EA674", Offset = "0x22EA674", VA = "0x22EA674")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011B1")]
		[Address(RVA = "0x22EB3A0", Offset = "0x22EB3A0", VA = "0x22EB3A0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B75C", Offset = "0xA8B75C")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60011B2")]
		[Address(RVA = "0x22EB3E8", Offset = "0x22EB3E8", VA = "0x22EB3E8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B794", Offset = "0xA8B794")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60011B3")]
		[Address(RVA = "0x22EB430", Offset = "0x22EB430", VA = "0x22EB430")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B7CC", Offset = "0xA8B7CC")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x60011B4")]
		[Address(RVA = "0x22EB478", Offset = "0x22EB478", VA = "0x22EB478")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B804", Offset = "0xA8B804")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x60011B5")]
		[Address(RVA = "0x22EB4C0", Offset = "0x22EB4C0", VA = "0x22EB4C0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B83C", Offset = "0xA8B83C")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x60011B6")]
		[Address(RVA = "0x22EB508", Offset = "0x22EB508", VA = "0x22EB508")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B874", Offset = "0xA8B874")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x60011B7")]
		[Address(RVA = "0x22EB550", Offset = "0x22EB550", VA = "0x22EB550")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B8AC", Offset = "0xA8B8AC")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60011B8")]
		[Address(RVA = "0x22EB598", Offset = "0x22EB598", VA = "0x22EB598")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B8E4", Offset = "0xA8B8E4")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60011BD")]
		[Address(RVA = "0x22EB600", Offset = "0x22EB600", VA = "0x22EB600")]
		public void Initiate()
		{
		}

		[Token(Token = "0x60011BF")]
		[Address(RVA = "0x22EB854", Offset = "0x22EB854", VA = "0x22EB854")]
		public InteractionTarget GetTarget(FullBodyBipedEffector effectorType, InteractionSystem interactionSystem)
		{
			return null;
		}

		[Token(Token = "0x60011C0")]
		[Address(RVA = "0x22E8D80", Offset = "0x22E8D80", VA = "0x22E8D80")]
		public bool CurveUsed(WeightCurve.Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x60011C1")]
		[Address(RVA = "0x22EB9C0", Offset = "0x22EB9C0", VA = "0x22EB9C0")]
		public InteractionTarget[] GetTargets()
		{
			return null;
		}

		[Token(Token = "0x60011C2")]
		[Address(RVA = "0x22E8818", Offset = "0x22E8818", VA = "0x22E8818")]
		public Transform GetTarget(FullBodyBipedEffector effectorType, string tag)
		{
			return null;
		}

		[Token(Token = "0x60011C3")]
		[Address(RVA = "0x22E8D78", Offset = "0x22E8D78", VA = "0x22E8D78")]
		public void OnStartInteraction(InteractionSystem interactionSystem)
		{
		}

		[Token(Token = "0x60011C4")]
		[Address(RVA = "0x22E99D4", Offset = "0x22E99D4", VA = "0x22E99D4")]
		public void Apply(IKSolverFullBodyBiped solver, FullBodyBipedEffector effector, InteractionTarget target, float timer, float weight)
		{
		}

		[Token(Token = "0x60011C5")]
		[Address(RVA = "0x22EA2F4", Offset = "0x22EA2F4", VA = "0x22EA2F4")]
		public float GetValue(WeightCurve.Type weightCurveType, InteractionTarget target, float timer)
		{
			return default(float);
		}

		[Token(Token = "0x60011C7")]
		[Address(RVA = "0x22EBF70", Offset = "0x22EBF70", VA = "0x22EBF70")]
		private void Start()
		{
		}

		[Token(Token = "0x60011C8")]
		[Address(RVA = "0x22EBAA8", Offset = "0x22EBAA8", VA = "0x22EBAA8")]
		private void Apply(IKSolverFullBodyBiped solver, FullBodyBipedEffector effector, WeightCurve.Type type, float value, float weight)
		{
		}

		[Token(Token = "0x60011C9")]
		[Address(RVA = "0x22EB9C8", Offset = "0x22EB9C8", VA = "0x22EB9C8")]
		private Transform GetTarget(FullBodyBipedEffector effectorType)
		{
			return null;
		}

		[Token(Token = "0x60011CA")]
		[Address(RVA = "0x22EBF08", Offset = "0x22EBF08", VA = "0x22EBF08")]
		private int GetWeightCurveIndex(WeightCurve.Type weightCurveType)
		{
			return default(int);
		}

		[Token(Token = "0x60011CB")]
		[Address(RVA = "0x22EBF74", Offset = "0x22EBF74", VA = "0x22EBF74")]
		private int GetMultiplierIndex(WeightCurve.Type weightCurveType)
		{
			return default(int);
		}

		[Token(Token = "0x60011CC")]
		[Address(RVA = "0x22EBFDC", Offset = "0x22EBFDC", VA = "0x22EBFDC")]
		public InteractionObject()
		{
		}
	}
	[Token(Token = "0x2000291")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xA7E110", Offset = "0xA7E110")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xA7E110", Offset = "0xA7E110")]
	public class InteractionSystem : MonoBehaviour
	{
		[Token(Token = "0x20003AA")]
		public delegate void InteractionDelegate(FullBodyBipedEffector effectorType, InteractionObject interactionObject);

		[Token(Token = "0x20003AB")]
		public delegate void InteractionEventDelegate(FullBodyBipedEffector effectorType, InteractionObject interactionObject, InteractionObject.InteractionEvent interactionEvent);

		[Token(Token = "0x4000B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA81A70", Offset = "0xA81A70")]
		public string targetTag;

		[Token(Token = "0x4000B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA81AA8", Offset = "0xA81AA8")]
		public float fadeInTime;

		[Token(Token = "0x4000B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA81AE0", Offset = "0xA81AE0")]
		public float speed;

		[Token(Token = "0x4000B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA81B18", Offset = "0xA81B18")]
		public float resetToDefaultsSpeed;

		[Token(Token = "0x4000B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xA81B50", Offset = "0xA81B50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA81B50", Offset = "0xA81B50")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xA81B50", Offset = "0xA81B50")]
		public Collider characterCollider;

		[Token(Token = "0x4000B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA81BD4", Offset = "0xA81BD4")]
		[AttributeAttribute(Name = "FormerlySerializedAsAttribute", RVA = "0xA81BD4", Offset = "0xA81BD4")]
		public Transform FPSCamera;

		[Token(Token = "0x4000B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA81C34", Offset = "0xA81C34")]
		public LayerMask camRaycastLayers;

		[Token(Token = "0x4000B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA81C6C", Offset = "0xA81C6C")]
		public float camRaycastDistance;

		[Token(Token = "0x4000B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA81CA4", Offset = "0xA81CA4")]
		private List<InteractionTrigger> <triggersInRange>k__BackingField;

		[Token(Token = "0x4000B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<InteractionTrigger> inContact;

		[Token(Token = "0x4000B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<int> bestRangeIndexes;

		[Token(Token = "0x4000B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public InteractionDelegate OnInteractionStart;

		[Token(Token = "0x4000B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public InteractionDelegate OnInteractionPause;

		[Token(Token = "0x4000B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public InteractionDelegate OnInteractionPickUp;

		[Token(Token = "0x4000B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public InteractionDelegate OnInteractionResume;

		[Token(Token = "0x4000B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public InteractionDelegate OnInteractionStop;

		[Token(Token = "0x4000B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public InteractionEventDelegate OnInteractionEvent;

		[Token(Token = "0x4000B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public RaycastHit raycastHit;

		[Token(Token = "0x4000B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0xA81CB4", Offset = "0xA81CB4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA81CB4", Offset = "0xA81CB4")]
		[SerializeField]
		private FullBodyBipedIK fullBody;

		[Token(Token = "0x4000B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA81D14", Offset = "0xA81D14")]
		public InteractionLookAt lookAt;

		[Token(Token = "0x4000B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private InteractionEffector[] interactionEffectors;

		[Token(Token = "0x4000B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA81D4C", Offset = "0xA81D4C")]
		private bool <initiated>k__BackingField;

		[Token(Token = "0x4000B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Collider lastCollider;

		[Token(Token = "0x4000B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Collider c;

		[Token(Token = "0x4000B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float lastTime;

		[Token(Token = "0x17000117")]
		public bool inInteraction
		{
			[Token(Token = "0x60011D5")]
			[Address(RVA = "0x22E7DE0", Offset = "0x22E7DE0", VA = "0x22E7DE0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000118")]
		public FullBodyBipedIK ik
		{
			[Token(Token = "0x60011F0")]
			[Address(RVA = "0x22EDE54", Offset = "0x22EDE54", VA = "0x22EDE54")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011F1")]
			[Address(RVA = "0x22EDE5C", Offset = "0x22EDE5C", VA = "0x22EDE5C")]
			set
			{
			}
		}

		[Token(Token = "0x17000119")]
		public List<InteractionTrigger> triggersInRange
		{
			[Token(Token = "0x60011F2")]
			[Address(RVA = "0x22EDE64", Offset = "0x22EDE64", VA = "0x22EDE64")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8BB1C", Offset = "0xA8BB1C")]
			get
			{
				return null;
			}
			[Token(Token = "0x60011F3")]
			[Address(RVA = "0x22EDE6C", Offset = "0x22EDE6C", VA = "0x22EDE6C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8BB2C", Offset = "0xA8BB2C")]
			private set
			{
			}
		}

		[Token(Token = "0x1700011A")]
		public bool initiated
		{
			[Token(Token = "0x60011F4")]
			[Address(RVA = "0x22EDE74", Offset = "0x22EDE74", VA = "0x22EDE74")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8BB3C", Offset = "0xA8BB3C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60011F5")]
			[Address(RVA = "0x22EDE7C", Offset = "0x22EDE7C", VA = "0x22EDE7C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8BB4C", Offset = "0xA8BB4C")]
			private set
			{
			}
		}

		[Token(Token = "0x60011CD")]
		[Address(RVA = "0x22EC044", Offset = "0x22EC044", VA = "0x22EC044")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B95C", Offset = "0xA8B95C")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60011CE")]
		[Address(RVA = "0x22EC08C", Offset = "0x22EC08C", VA = "0x22EC08C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B994", Offset = "0xA8B994")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60011CF")]
		[Address(RVA = "0x22EC0D4", Offset = "0x22EC0D4", VA = "0x22EC0D4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8B9CC", Offset = "0xA8B9CC")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x60011D0")]
		[Address(RVA = "0x22EC11C", Offset = "0x22EC11C", VA = "0x22EC11C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8BA04", Offset = "0xA8BA04")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x60011D1")]
		[Address(RVA = "0x22EC164", Offset = "0x22EC164", VA = "0x22EC164")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8BA3C", Offset = "0xA8BA3C")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x60011D2")]
		[Address(RVA = "0x22EC1AC", Offset = "0x22EC1AC", VA = "0x22EC1AC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8BA74", Offset = "0xA8BA74")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x60011D3")]
		[Address(RVA = "0x22EC1F4", Offset = "0x22EC1F4", VA = "0x22EC1F4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8BAAC", Offset = "0xA8BAAC")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60011D4")]
		[Address(RVA = "0x22EC23C", Offset = "0x22EC23C", VA = "0x22EC23C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8BAE4", Offset = "0xA8BAE4")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60011D6")]
		[Address(RVA = "0x22EC37C", Offset = "0x22EC37C", VA = "0x22EC37C")]
		public bool IsInInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x60011D7")]
		[Address(RVA = "0x22EC448", Offset = "0x22EC448", VA = "0x22EC448")]
		public bool IsPaused(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x60011D8")]
		[Address(RVA = "0x22EC514", Offset = "0x22EC514", VA = "0x22EC514")]
		public bool IsPaused()
		{
			return default(bool);
		}

		[Token(Token = "0x60011D9")]
		[Address(RVA = "0x22EC5C0", Offset = "0x22EC5C0", VA = "0x22EC5C0")]
		public bool IsInSync()
		{
			return default(bool);
		}

		[Token(Token = "0x60011DA")]
		[Address(RVA = "0x22E74C0", Offset = "0x22E74C0", VA = "0x22E74C0")]
		public bool StartInteraction(FullBodyBipedEffector effectorType, InteractionObject interactionObject, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x60011DB")]
		[Address(RVA = "0x22EC6B8", Offset = "0x22EC6B8", VA = "0x22EC6B8")]
		public bool StartInteraction(FullBodyBipedEffector effectorType, InteractionObject interactionObject, InteractionTarget target, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x60011DC")]
		[Address(RVA = "0x22EC7D4", Offset = "0x22EC7D4", VA = "0x22EC7D4")]
		public bool PauseInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x60011DD")]
		[Address(RVA = "0x22EC864", Offset = "0x22EC864", VA = "0x22EC864")]
		public bool ResumeInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x60011DE")]
		[Address(RVA = "0x22EC8F4", Offset = "0x22EC8F4", VA = "0x22EC8F4")]
		public bool StopInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x60011DF")]
		[Address(RVA = "0x22EC984", Offset = "0x22EC984", VA = "0x22EC984")]
		public void PauseAll()
		{
		}

		[Token(Token = "0x60011E0")]
		[Address(RVA = "0x22E7E8C", Offset = "0x22E7E8C", VA = "0x22E7E8C")]
		public void ResumeAll()
		{
		}

		[Token(Token = "0x60011E1")]
		[Address(RVA = "0x22EC9F8", Offset = "0x22EC9F8", VA = "0x22EC9F8")]
		public void StopAll()
		{
		}

		[Token(Token = "0x60011E2")]
		[Address(RVA = "0x22ECA60", Offset = "0x22ECA60", VA = "0x22ECA60")]
		public InteractionObject GetInteractionObject(FullBodyBipedEffector effectorType)
		{
			return null;
		}

		[Token(Token = "0x60011E3")]
		[Address(RVA = "0x22ECAEC", Offset = "0x22ECAEC", VA = "0x22ECAEC")]
		public float GetProgress(FullBodyBipedEffector effectorType)
		{
			return default(float);
		}

		[Token(Token = "0x60011E4")]
		[Address(RVA = "0x22ECBA0", Offset = "0x22ECBA0", VA = "0x22ECBA0")]
		public float GetMinActiveProgress()
		{
			return default(float);
		}

		[Token(Token = "0x60011E5")]
		[Address(RVA = "0x22ECC84", Offset = "0x22ECC84", VA = "0x22ECC84")]
		public bool TriggerInteraction(int index, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x60011E6")]
		[Address(RVA = "0x22ECF5C", Offset = "0x22ECF5C", VA = "0x22ECF5C")]
		public bool TriggerInteraction(int index, bool interrupt, out InteractionObject interactionObject)
		{
			return default(bool);
		}

		[Token(Token = "0x60011E7")]
		[Address(RVA = "0x22ED154", Offset = "0x22ED154", VA = "0x22ED154")]
		public bool TriggerInteraction(int index, bool interrupt, out InteractionTarget interactionTarget)
		{
			return default(bool);
		}

		[Token(Token = "0x60011E8")]
		[Address(RVA = "0x22ED3F8", Offset = "0x22ED3F8", VA = "0x22ED3F8")]
		public InteractionTrigger.Range GetClosestInteractionRange()
		{
			return null;
		}

		[Token(Token = "0x60011E9")]
		[Address(RVA = "0x22ED6D0", Offset = "0x22ED6D0", VA = "0x22ED6D0")]
		public InteractionObject GetClosestInteractionObjectInRange()
		{
			return null;
		}

		[Token(Token = "0x60011EA")]
		[Address(RVA = "0x22ED714", Offset = "0x22ED714", VA = "0x22ED714")]
		public InteractionTarget GetClosestInteractionTargetInRange()
		{
			return null;
		}

		[Token(Token = "0x60011EB")]
		[Address(RVA = "0x22ED78C", Offset = "0x22ED78C", VA = "0x22ED78C")]
		public InteractionObject[] GetClosestInteractionObjectsInRange()
		{
			return null;
		}

		[Token(Token = "0x60011EC")]
		[Address(RVA = "0x22ED8C0", Offset = "0x22ED8C0", VA = "0x22ED8C0")]
		public InteractionTarget[] GetClosestInteractionTargetsInRange()
		{
			return null;
		}

		[Token(Token = "0x60011ED")]
		[Address(RVA = "0x22EDA64", Offset = "0x22EDA64", VA = "0x22EDA64")]
		public bool TriggerEffectorsReady(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x60011EE")]
		[Address(RVA = "0x22EDD08", Offset = "0x22EDD08", VA = "0x22EDD08")]
		public InteractionTrigger.Range GetTriggerRange(int index)
		{
			return null;
		}

		[Token(Token = "0x60011EF")]
		[Address(RVA = "0x22ED50C", Offset = "0x22ED50C", VA = "0x22ED50C")]
		public int GetClosestTriggerIndex()
		{
			return default(int);
		}

		[Token(Token = "0x60011F6")]
		[Address(RVA = "0x22EDE88", Offset = "0x22EDE88", VA = "0x22EDE88")]
		public void Start()
		{
		}

		[Token(Token = "0x60011F7")]
		[Address(RVA = "0x22EE6B0", Offset = "0x22EE6B0", VA = "0x22EE6B0")]
		private void InteractionPause(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x60011F8")]
		[Address(RVA = "0x22EE6D0", Offset = "0x22EE6D0", VA = "0x22EE6D0")]
		private void InteractionResume(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x60011F9")]
		[Address(RVA = "0x22EE6EC", Offset = "0x22EE6EC", VA = "0x22EE6EC")]
		private void InteractionStop(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x60011FA")]
		[Address(RVA = "0x22EE708", Offset = "0x22EE708", VA = "0x22EE708")]
		private void LookAtInteraction(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x60011FB")]
		[Address(RVA = "0x22EE768", Offset = "0x22EE768", VA = "0x22EE768")]
		public void OnTriggerEnter(Collider c)
		{
		}

		[Token(Token = "0x60011FC")]
		[Address(RVA = "0x22EE8A4", Offset = "0x22EE8A4", VA = "0x22EE8A4")]
		public void OnTriggerExit(Collider c)
		{
		}

		[Token(Token = "0x60011FD")]
		[Address(RVA = "0x22EE9B4", Offset = "0x22EE9B4", VA = "0x22EE9B4")]
		private bool ContactIsInRange(int index, out int bestRangeIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x60011FE")]
		[Address(RVA = "0x22EED58", Offset = "0x22EED58", VA = "0x22EED58")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60011FF")]
		[Address(RVA = "0x22EEE84", Offset = "0x22EEE84", VA = "0x22EEE84")]
		public void Update()
		{
		}

		[Token(Token = "0x6001200")]
		[Address(RVA = "0x22EF0E0", Offset = "0x22EF0E0", VA = "0x22EF0E0")]
		private void Raycasting()
		{
		}

		[Token(Token = "0x6001201")]
		[Address(RVA = "0x22EE3FC", Offset = "0x22EE3FC", VA = "0x22EE3FC")]
		private void UpdateTriggerEventBroadcasting()
		{
		}

		[Token(Token = "0x6001202")]
		[Address(RVA = "0x22EF21C", Offset = "0x22EF21C", VA = "0x22EF21C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001203")]
		[Address(RVA = "0x22EF244", Offset = "0x22EF244", VA = "0x22EF244")]
		private void UpdateEffectors()
		{
		}

		[Token(Token = "0x6001204")]
		[Address(RVA = "0x22EF39C", Offset = "0x22EF39C", VA = "0x22EF39C")]
		private void OnPreFBBIK()
		{
		}

		[Token(Token = "0x6001205")]
		[Address(RVA = "0x22EF430", Offset = "0x22EF430", VA = "0x22EF430")]
		private void OnPostFBBIK()
		{
		}

		[Token(Token = "0x6001206")]
		[Address(RVA = "0x22EF504", Offset = "0x22EF504", VA = "0x22EF504")]
		private void OnFixTransforms()
		{
		}

		[Token(Token = "0x6001207")]
		[Address(RVA = "0x22EF51C", Offset = "0x22EF51C", VA = "0x22EF51C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001208")]
		[Address(RVA = "0x22EC284", Offset = "0x22EC284", VA = "0x22EC284")]
		private bool IsValid(bool log)
		{
			return default(bool);
		}

		[Token(Token = "0x6001209")]
		[Address(RVA = "0x22ECE2C", Offset = "0x22ECE2C", VA = "0x22ECE2C")]
		private bool TriggerIndexIsValid(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x600120A")]
		[Address(RVA = "0x22EF918", Offset = "0x22EF918", VA = "0x22EF918")]
		public InteractionSystem()
		{
		}
	}
	[Token(Token = "0x2000292")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xA7E170", Offset = "0xA7E170")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xA7E170", Offset = "0xA7E170")]
	public class InteractionTarget : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003AC")]
		public enum RotationMode
		{
			[Token(Token = "0x40010F1")]
			TwoDOF,
			[Token(Token = "0x40010F2")]
			ThreeDOF
		}

		[Serializable]
		[Token(Token = "0x20003AD")]
		public class Multiplier
		{
			[Token(Token = "0x40010F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA87CE8", Offset = "0xA87CE8")]
			public InteractionObject.WeightCurve.Type curve;

			[Token(Token = "0x40010F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA87D20", Offset = "0xA87D20")]
			public float multiplier;

			[Token(Token = "0x600179D")]
			[Address(RVA = "0x1EA5F40", Offset = "0x1EA5F40", VA = "0x1EA5F40")]
			public Multiplier()
			{
			}
		}

		[Token(Token = "0x4000B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA81D5C", Offset = "0xA81D5C")]
		public FullBodyBipedEffector effectorType;

		[Token(Token = "0x4000B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA81D94", Offset = "0xA81D94")]
		public Multiplier[] multipliers;

		[Token(Token = "0x4000B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA81DCC", Offset = "0xA81DCC")]
		public float interactionSpeedMlp;

		[Token(Token = "0x4000B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA81E04", Offset = "0xA81E04")]
		public Transform pivot;

		[Token(Token = "0x4000B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA81E3C", Offset = "0xA81E3C")]
		public RotationMode rotationMode;

		[Token(Token = "0x4000B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA81E74", Offset = "0xA81E74")]
		public Vector3 twistAxis;

		[Token(Token = "0x4000B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA81EAC", Offset = "0xA81EAC")]
		public float twistWeight;

		[Token(Token = "0x4000B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA81EE4", Offset = "0xA81EE4")]
		public float swingWeight;

		[Token(Token = "0x4000B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA81F1C", Offset = "0xA81F1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA81F1C", Offset = "0xA81F1C")]
		public float threeDOFWeight;

		[Token(Token = "0x4000B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA81F70", Offset = "0xA81F70")]
		public bool rotateOnce;

		[Token(Token = "0x4000B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion defaultLocalRotation;

		[Token(Token = "0x4000B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform lastPivot;

		[Token(Token = "0x600120B")]
		[Address(RVA = "0x22F0100", Offset = "0x22F0100", VA = "0x22F0100")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8BB5C", Offset = "0xA8BB5C")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x600120C")]
		[Address(RVA = "0x22F0148", Offset = "0x22F0148", VA = "0x22F0148")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8BB94", Offset = "0xA8BB94")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x600120D")]
		[Address(RVA = "0x22F0190", Offset = "0x22F0190", VA = "0x22F0190")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8BBCC", Offset = "0xA8BBCC")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x600120E")]
		[Address(RVA = "0x22F01D8", Offset = "0x22F01D8", VA = "0x22F01D8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8BC04", Offset = "0xA8BC04")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x600120F")]
		[Address(RVA = "0x22F0220", Offset = "0x22F0220", VA = "0x22F0220")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8BC3C", Offset = "0xA8BC3C")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x6001210")]
		[Address(RVA = "0x22F0268", Offset = "0x22F0268", VA = "0x22F0268")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8BC74", Offset = "0xA8BC74")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x6001211")]
		[Address(RVA = "0x22F02B0", Offset = "0x22F02B0", VA = "0x22F02B0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8BCAC", Offset = "0xA8BCAC")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6001212")]
		[Address(RVA = "0x22F02F8", Offset = "0x22F02F8", VA = "0x22F02F8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8BCE4", Offset = "0xA8BCE4")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6001213")]
		[Address(RVA = "0x22EBA38", Offset = "0x22EBA38", VA = "0x22EBA38")]
		public float GetValue(InteractionObject.WeightCurve.Type curveType)
		{
			return default(float);
		}

		[Token(Token = "0x6001214")]
		[Address(RVA = "0x22EA700", Offset = "0x22EA700", VA = "0x22EA700")]
		public void ResetRotation()
		{
		}

		[Token(Token = "0x6001215")]
		[Address(RVA = "0x22E8E34", Offset = "0x22E8E34", VA = "0x22E8E34")]
		public void RotateTo(Transform bone)
		{
		}

		[Token(Token = "0x6001216")]
		[Address(RVA = "0x22F0340", Offset = "0x22F0340", VA = "0x22F0340")]
		public InteractionTarget()
		{
		}
	}
	[Token(Token = "0x2000293")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xA7E1D0", Offset = "0xA7E1D0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xA7E1D0", Offset = "0xA7E1D0")]
	public class InteractionTrigger : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003AE")]
		public class CharacterPosition
		{
			[Token(Token = "0x40010F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA87D58", Offset = "0xA87D58")]
			public bool use;

			[Token(Token = "0x40010F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA87D90", Offset = "0xA87D90")]
			public Vector2 offset;

			[Token(Token = "0x40010F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA87DC8", Offset = "0xA87DC8")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA87DC8", Offset = "0xA87DC8")]
			public float angleOffset;

			[Token(Token = "0x40010F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA87E24", Offset = "0xA87E24")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA87E24", Offset = "0xA87E24")]
			public float maxAngle;

			[Token(Token = "0x40010F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA87E7C", Offset = "0xA87E7C")]
			public float radius;

			[Token(Token = "0x40010FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA87EB4", Offset = "0xA87EB4")]
			public bool orbit;

			[Token(Token = "0x40010FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA87EEC", Offset = "0xA87EEC")]
			public bool fixYAxis;

			[Token(Token = "0x170001BD")]
			public Vector3 offset3D
			{
				[Token(Token = "0x600179E")]
				[Address(RVA = "0x1EA62B0", Offset = "0x1EA62B0", VA = "0x1EA62B0")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170001BE")]
			public Vector3 direction3D
			{
				[Token(Token = "0x600179F")]
				[Address(RVA = "0x1EA62BC", Offset = "0x1EA62BC", VA = "0x1EA62BC")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x60017A0")]
			[Address(RVA = "0x1EA6344", Offset = "0x1EA6344", VA = "0x1EA6344")]
			public bool IsInRange(Transform character, Transform trigger, out float error)
			{
				return default(bool);
			}

			[Token(Token = "0x60017A1")]
			[Address(RVA = "0x1EA6788", Offset = "0x1EA6788", VA = "0x1EA6788")]
			public CharacterPosition()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003AF")]
		public class CameraPosition
		{
			[Token(Token = "0x40010FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA87F24", Offset = "0xA87F24")]
			public Collider lookAtTarget;

			[Token(Token = "0x40010FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA87F5C", Offset = "0xA87F5C")]
			public Vector3 direction;

			[Token(Token = "0x40010FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA87F94", Offset = "0xA87F94")]
			public float maxDistance;

			[Token(Token = "0x40010FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA87FCC", Offset = "0xA87FCC")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA87FCC", Offset = "0xA87FCC")]
			public float maxAngle;

			[Token(Token = "0x4001100")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88024", Offset = "0xA88024")]
			public bool fixYAxis;

			[Token(Token = "0x60017A2")]
			[Address(RVA = "0x1EA5F48", Offset = "0x1EA5F48", VA = "0x1EA5F48")]
			public Quaternion GetRotation()
			{
				return default(Quaternion);
			}

			[Token(Token = "0x60017A3")]
			[Address(RVA = "0x1EA603C", Offset = "0x1EA603C", VA = "0x1EA603C")]
			public bool IsInRange(Transform raycastFrom, RaycastHit hit, Transform trigger, out float error)
			{
				return default(bool);
			}

			[Token(Token = "0x60017A4")]
			[Address(RVA = "0x1EA6264", Offset = "0x1EA6264", VA = "0x1EA6264")]
			public CameraPosition()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003B0")]
		public class Range
		{
			[Serializable]
			[Token(Token = "0x200043C")]
			public class Interaction
			{
				[Token(Token = "0x40012BC")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA891DC", Offset = "0xA891DC")]
				public InteractionObject interactionObject;

				[Token(Token = "0x40012BD")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA89214", Offset = "0xA89214")]
				public FullBodyBipedEffector[] effectors;

				[Token(Token = "0x600193E")]
				[Address(RVA = "0x1EB3428", Offset = "0x1EB3428", VA = "0x1EB3428")]
				public Interaction()
				{
				}
			}

			[Token(Token = "0x4001101")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[HideInInspector]
			public string name;

			[Token(Token = "0x4001102")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			public bool show;

			[Token(Token = "0x4001103")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8807C", Offset = "0xA8807C")]
			public CharacterPosition characterPosition;

			[Token(Token = "0x4001104")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA880B4", Offset = "0xA880B4")]
			public CameraPosition cameraPosition;

			[Token(Token = "0x4001105")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA880EC", Offset = "0xA880EC")]
			public Interaction[] interactions;

			[Token(Token = "0x60017A5")]
			[Address(RVA = "0x1EA679C", Offset = "0x1EA679C", VA = "0x1EA679C")]
			public bool IsInRange(Transform character, Transform raycastFrom, RaycastHit raycastHit, Transform trigger, out float maxError)
			{
				return default(bool);
			}

			[Token(Token = "0x60017A6")]
			[Address(RVA = "0x1EA6850", Offset = "0x1EA6850", VA = "0x1EA6850")]
			public Range()
			{
			}
		}

		[Token(Token = "0x4000BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA81FA8", Offset = "0xA81FA8")]
		public Range[] ranges;

		[Token(Token = "0x6001217")]
		[Address(RVA = "0x22F038C", Offset = "0x22F038C", VA = "0x22F038C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8BD1C", Offset = "0xA8BD1C")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6001218")]
		[Address(RVA = "0x22F03D4", Offset = "0x22F03D4", VA = "0x22F03D4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8BD54", Offset = "0xA8BD54")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6001219")]
		[Address(RVA = "0x22F041C", Offset = "0x22F041C", VA = "0x22F041C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8BD8C", Offset = "0xA8BD8C")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x600121A")]
		[Address(RVA = "0x22F0464", Offset = "0x22F0464", VA = "0x22F0464")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8BDC4", Offset = "0xA8BDC4")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600121B")]
		[Address(RVA = "0x22F04AC", Offset = "0x22F04AC", VA = "0x22F04AC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8BDFC", Offset = "0xA8BDFC")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600121C")]
		[Address(RVA = "0x22EEB84", Offset = "0x22EEB84", VA = "0x22EEB84")]
		public int GetBestRangeIndex(Transform character, Transform raycastFrom, RaycastHit raycastHit)
		{
			return default(int);
		}

		[Token(Token = "0x600121D")]
		[Address(RVA = "0x22F04F4", Offset = "0x22F04F4", VA = "0x22F04F4")]
		public InteractionTrigger()
		{
		}
	}
	[Token(Token = "0x2000294")]
	public class GenericPoser : Poser
	{
		[Serializable]
		[Token(Token = "0x20003B1")]
		public class Map
		{
			[Token(Token = "0x4001106")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform bone;

			[Token(Token = "0x4001107")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform target;

			[Token(Token = "0x4001108")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Vector3 defaultLocalPosition;

			[Token(Token = "0x4001109")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private Quaternion defaultLocalRotation;

			[Token(Token = "0x60017A7")]
			[Address(RVA = "0x1E333E0", Offset = "0x1E333E0", VA = "0x1E333E0")]
			public Map(Transform bone, Transform target)
			{
			}

			[Token(Token = "0x60017A8")]
			[Address(RVA = "0x1E33438", Offset = "0x1E33438", VA = "0x1E33438")]
			public void StoreDefaultState()
			{
			}

			[Token(Token = "0x60017A9")]
			[Address(RVA = "0x1E33488", Offset = "0x1E33488", VA = "0x1E33488")]
			public void FixTransform()
			{
			}

			[Token(Token = "0x60017AA")]
			[Address(RVA = "0x1E334D4", Offset = "0x1E334D4", VA = "0x1E334D4")]
			public void Update(float localRotationWeight, float localPositionWeight)
			{
			}
		}

		[Token(Token = "0x4000BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Map[] maps;

		[Token(Token = "0x600121E")]
		[Address(RVA = "0x276D7A4", Offset = "0x276D7A4", VA = "0x276D7A4", Slot = "7")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8BE34", Offset = "0xA8BE34")]
		public override void AutoMapping()
		{
		}

		[Token(Token = "0x600121F")]
		[Address(RVA = "0x276DB34", Offset = "0x276DB34", VA = "0x276DB34", Slot = "8")]
		protected override void InitiatePoser()
		{
		}

		[Token(Token = "0x6001220")]
		[Address(RVA = "0x276DB38", Offset = "0x276DB38", VA = "0x276DB38", Slot = "9")]
		protected override void UpdatePoser()
		{
		}

		[Token(Token = "0x6001221")]
		[Address(RVA = "0x276DC40", Offset = "0x276DC40", VA = "0x276DC40", Slot = "10")]
		protected override void FixPoserTransforms()
		{
		}

		[Token(Token = "0x6001222")]
		[Address(RVA = "0x276DAC8", Offset = "0x276DAC8", VA = "0x276DAC8")]
		private void StoreDefaultState()
		{
		}

		[Token(Token = "0x6001223")]
		[Address(RVA = "0x276DA28", Offset = "0x276DA28", VA = "0x276DA28")]
		private Transform GetTargetNamed(string tName, Transform[] array)
		{
			return null;
		}

		[Token(Token = "0x6001224")]
		[Address(RVA = "0x276DCAC", Offset = "0x276DCAC", VA = "0x276DCAC")]
		public GenericPoser()
		{
		}
	}
	[Token(Token = "0x2000295")]
	public class HandPoser : Poser
	{
		[Token(Token = "0x4000BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Transform[] children;

		[Token(Token = "0x4000BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform _poseRoot;

		[Token(Token = "0x4000BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform[] poseChildren;

		[Token(Token = "0x4000BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3[] defaultLocalPositions;

		[Token(Token = "0x4000BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion[] defaultLocalRotations;

		[Token(Token = "0x6001225")]
		[Address(RVA = "0x28A5BE0", Offset = "0x28A5BE0", VA = "0x28A5BE0", Slot = "7")]
		public override void AutoMapping()
		{
		}

		[Token(Token = "0x6001226")]
		[Address(RVA = "0x28A5CBC", Offset = "0x28A5CBC", VA = "0x28A5CBC", Slot = "8")]
		protected override void InitiatePoser()
		{
		}

		[Token(Token = "0x6001227")]
		[Address(RVA = "0x28A5EA4", Offset = "0x28A5EA4", VA = "0x28A5EA4", Slot = "10")]
		protected override void FixPoserTransforms()
		{
		}

		[Token(Token = "0x6001228")]
		[Address(RVA = "0x28A5FA0", Offset = "0x28A5FA0", VA = "0x28A5FA0", Slot = "9")]
		protected override void UpdatePoser()
		{
		}

		[Token(Token = "0x6001229")]
		[Address(RVA = "0x28A5D20", Offset = "0x28A5D20", VA = "0x28A5D20")]
		protected void StoreDefaultState()
		{
		}

		[Token(Token = "0x600122A")]
		[Address(RVA = "0x28A6300", Offset = "0x28A6300", VA = "0x28A6300")]
		public HandPoser()
		{
		}
	}
	[Token(Token = "0x2000296")]
	public abstract class Poser : SolverManager
	{
		[Token(Token = "0x4000BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform poseRoot;

		[Token(Token = "0x4000BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA81FE0", Offset = "0xA81FE0")]
		public float weight;

		[Token(Token = "0x4000BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA81FF8", Offset = "0xA81FF8")]
		public float localRotationWeight;

		[Token(Token = "0x4000BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA82010", Offset = "0xA82010")]
		public float localPositionWeight;

		[Token(Token = "0x4000BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool initiated;

		[Token(Token = "0x600122B")]
		public abstract void AutoMapping();

		[Token(Token = "0x600122C")]
		[Address(RVA = "0x10BBF14", Offset = "0x10BBF14", VA = "0x10BBF14")]
		public void UpdateManual()
		{
		}

		[Token(Token = "0x600122D")]
		protected abstract void InitiatePoser();

		[Token(Token = "0x600122E")]
		protected abstract void UpdatePoser();

		[Token(Token = "0x600122F")]
		protected abstract void FixPoserTransforms();

		[Token(Token = "0x6001230")]
		[Address(RVA = "0x10BBF20", Offset = "0x10BBF20", VA = "0x10BBF20", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6001231")]
		[Address(RVA = "0x10BBF74", Offset = "0x10BBF74", VA = "0x10BBF74", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6001232")]
		[Address(RVA = "0x10BBFB0", Offset = "0x10BBFB0", VA = "0x10BBFB0", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x6001233")]
		[Address(RVA = "0x10BBFC8", Offset = "0x10BBFC8", VA = "0x10BBFC8")]
		protected Poser()
		{
		}
	}
	[Token(Token = "0x2000297")]
	public class RagdollUtility : MonoBehaviour
	{
		[Token(Token = "0x20003B2")]
		public class Rigidbone
		{
			[Token(Token = "0x400110A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody r;

			[Token(Token = "0x400110B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform t;

			[Token(Token = "0x400110C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Collider collider;

			[Token(Token = "0x400110D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Joint joint;

			[Token(Token = "0x400110E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Rigidbody c;

			[Token(Token = "0x400110F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool updateAnchor;

			[Token(Token = "0x4001110")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector3 deltaPosition;

			[Token(Token = "0x4001111")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Quaternion deltaRotation;

			[Token(Token = "0x4001112")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float deltaTime;

			[Token(Token = "0x4001113")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Vector3 lastPosition;

			[Token(Token = "0x4001114")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Quaternion lastRotation;

			[Token(Token = "0x60017AB")]
			[Address(RVA = "0x1EAA574", Offset = "0x1EAA574", VA = "0x1EAA574")]
			public Rigidbone(Rigidbody r)
			{
			}

			[Token(Token = "0x60017AC")]
			[Address(RVA = "0x1EAA738", Offset = "0x1EAA738", VA = "0x1EAA738")]
			public void RecordVelocity()
			{
			}

			[Token(Token = "0x60017AD")]
			[Address(RVA = "0x1EAA818", Offset = "0x1EAA818", VA = "0x1EAA818")]
			public void WakeUp(float velocityWeight, float angularVelocityWeight)
			{
			}
		}

		[Token(Token = "0x20003B3")]
		public class Child
		{
			[Token(Token = "0x4001115")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform t;

			[Token(Token = "0x4001116")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 localPosition;

			[Token(Token = "0x4001117")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Quaternion localRotation;

			[Token(Token = "0x60017AE")]
			[Address(RVA = "0x1EAA36C", Offset = "0x1EAA36C", VA = "0x1EAA36C")]
			public Child(Transform transform)
			{
			}

			[Token(Token = "0x60017AF")]
			[Address(RVA = "0x1EAA3E4", Offset = "0x1EAA3E4", VA = "0x1EAA3E4")]
			public void FixTransform(float weight)
			{
			}

			[Token(Token = "0x60017B0")]
			[Address(RVA = "0x1EAA524", Offset = "0x1EAA524", VA = "0x1EAA524")]
			public void StoreLocalState()
			{
			}
		}

		[Token(Token = "0x20003B4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E98C", Offset = "0xA7E98C")]
		private sealed class <DisableRagdollSmooth>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001118")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001119")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400111A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RagdollUtility <>4__this;

			[Token(Token = "0x170001BF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60017B4")]
				[Address(RVA = "0x1EAA31C", Offset = "0x1EAA31C", VA = "0x1EAA31C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001C0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60017B6")]
				[Address(RVA = "0x1EAA364", Offset = "0x1EAA364", VA = "0x1EAA364", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60017B1")]
			[Address(RVA = "0x1EAA0E0", Offset = "0x1EAA0E0", VA = "0x1EAA0E0")]
			[DebuggerHidden]
			public <DisableRagdollSmooth>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x60017B2")]
			[Address(RVA = "0x1EAA10C", Offset = "0x1EAA10C", VA = "0x1EAA10C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60017B3")]
			[Address(RVA = "0x1EAA110", Offset = "0x1EAA110", VA = "0x1EAA110", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60017B5")]
			[Address(RVA = "0x1EAA324", Offset = "0x1EAA324", VA = "0x1EAA324", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82028", Offset = "0xA82028")]
		public IK ik;

		[Token(Token = "0x4000BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82060", Offset = "0xA82060")]
		public float ragdollToAnimationTime;

		[Token(Token = "0x4000BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82098", Offset = "0xA82098")]
		public bool applyIkOnRagdoll;

		[Token(Token = "0x4000BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA820D0", Offset = "0xA820D0")]
		public float applyVelocity;

		[Token(Token = "0x4000BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82108", Offset = "0xA82108")]
		public float applyAngularVelocity;

		[Token(Token = "0x4000BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Animator animator;

		[Token(Token = "0x4000BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbone[] rigidbones;

		[Token(Token = "0x4000BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Child[] children;

		[Token(Token = "0x4000BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool enableRagdollFlag;

		[Token(Token = "0x4000BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private AnimatorUpdateMode animatorUpdateMode;

		[Token(Token = "0x4000BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IK[] allIKComponents;

		[Token(Token = "0x4000BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool[] fixTransforms;

		[Token(Token = "0x4000BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float ragdollWeight;

		[Token(Token = "0x4000BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float ragdollWeightV;

		[Token(Token = "0x4000BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool fixedFrame;

		[Token(Token = "0x4000BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool[] disabledIKComponents;

		[Token(Token = "0x1700011B")]
		private bool isRagdoll
		{
			[Token(Token = "0x600123F")]
			[Address(RVA = "0x10BDEE8", Offset = "0x10BDEE8", VA = "0x10BDEE8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700011C")]
		private bool ikUsed
		{
			[Token(Token = "0x6001241")]
			[Address(RVA = "0x10BE91C", Offset = "0x10BE91C", VA = "0x10BE91C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001234")]
		[Address(RVA = "0x10BDEB0", Offset = "0x10BDEB0", VA = "0x10BDEB0")]
		public void EnableRagdoll()
		{
		}

		[Token(Token = "0x6001235")]
		[Address(RVA = "0x10BDF60", Offset = "0x10BDF60", VA = "0x10BDF60")]
		public void DisableRagdoll()
		{
		}

		[Token(Token = "0x6001236")]
		[Address(RVA = "0x10BE09C", Offset = "0x10BE09C", VA = "0x10BE09C")]
		public void Start()
		{
		}

		[Token(Token = "0x6001237")]
		[Address(RVA = "0x10BE024", Offset = "0x10BE024", VA = "0x10BE024")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xA8BE6C", Offset = "0xA8BE6C")]
		private IEnumerator DisableRagdollSmooth()
		{
			return null;
		}

		[Token(Token = "0x6001238")]
		[Address(RVA = "0x10BE558", Offset = "0x10BE558", VA = "0x10BE558")]
		private void Update()
		{
		}

		[Token(Token = "0x6001239")]
		[Address(RVA = "0x10BE7A4", Offset = "0x10BE7A4", VA = "0x10BE7A4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600123A")]
		[Address(RVA = "0x10BE860", Offset = "0x10BE860", VA = "0x10BE860")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600123B")]
		[Address(RVA = "0x10BEA9C", Offset = "0x10BEA9C", VA = "0x10BEA9C")]
		private void AfterLastIK()
		{
		}

		[Token(Token = "0x600123C")]
		[Address(RVA = "0x10BE8E0", Offset = "0x10BE8E0", VA = "0x10BE8E0")]
		private void AfterAnimation()
		{
		}

		[Token(Token = "0x600123D")]
		[Address(RVA = "0x10BEA58", Offset = "0x10BEA58", VA = "0x10BEA58")]
		private void OnFinalPose()
		{
		}

		[Token(Token = "0x600123E")]
		[Address(RVA = "0x10BEB3C", Offset = "0x10BEB3C", VA = "0x10BEB3C")]
		private void RagdollEnabler()
		{
		}

		[Token(Token = "0x6001240")]
		[Address(RVA = "0x10BEAD0", Offset = "0x10BEAD0", VA = "0x10BEAD0")]
		private void RecordVelocities()
		{
		}

		[Token(Token = "0x6001242")]
		[Address(RVA = "0x10BDFB8", Offset = "0x10BDFB8", VA = "0x10BDFB8")]
		private void StoreLocalState()
		{
		}

		[Token(Token = "0x6001243")]
		[Address(RVA = "0x10BE7E4", Offset = "0x10BE7E4", VA = "0x10BE7E4")]
		private void FixTransforms(float weight)
		{
		}

		[Token(Token = "0x6001244")]
		[Address(RVA = "0x10BED68", Offset = "0x10BED68", VA = "0x10BED68")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001245")]
		[Address(RVA = "0x10BEEA4", Offset = "0x10BEEA4", VA = "0x10BEEA4")]
		public RagdollUtility()
		{
		}
	}
	[Token(Token = "0x2000298")]
	public abstract class RotationLimit : MonoBehaviour
	{
		[Token(Token = "0x4000BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 axis;

		[Token(Token = "0x4000BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[HideInInspector]
		public Quaternion defaultLocalRotation;

		[Token(Token = "0x4000BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA82150", Offset = "0xA82150")]
		private bool <defaultLocalRotationOverride>k__BackingField;

		[Token(Token = "0x4000BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool initiated;

		[Token(Token = "0x4000BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		private bool applicationQuit;

		[Token(Token = "0x4000BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
		private bool defaultLocalRotationSet;

		[Token(Token = "0x1700011D")]
		public Vector3 secondaryAxis
		{
			[Token(Token = "0x600124B")]
			[Address(RVA = "0x10C1938", Offset = "0x10C1938", VA = "0x10C1938")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700011E")]
		public Vector3 crossAxis
		{
			[Token(Token = "0x600124C")]
			[Address(RVA = "0x10C1944", Offset = "0x10C1944", VA = "0x10C1944")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700011F")]
		public bool defaultLocalRotationOverride
		{
			[Token(Token = "0x600124D")]
			[Address(RVA = "0x10C1960", Offset = "0x10C1960", VA = "0x10C1960")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8BECC", Offset = "0xA8BECC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600124E")]
			[Address(RVA = "0x10C1968", Offset = "0x10C1968", VA = "0x10C1968")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8BEDC", Offset = "0xA8BEDC")]
			private set
			{
			}
		}

		[Token(Token = "0x6001246")]
		[Address(RVA = "0x10C1638", Offset = "0x10C1638", VA = "0x10C1638")]
		public void SetDefaultLocalRotation()
		{
		}

		[Token(Token = "0x6001247")]
		[Address(RVA = "0x10C1680", Offset = "0x10C1680", VA = "0x10C1680")]
		public void SetDefaultLocalRotation(Quaternion localRotation)
		{
		}

		[Token(Token = "0x6001248")]
		[Address(RVA = "0x10C1698", Offset = "0x10C1698", VA = "0x10C1698")]
		public Quaternion GetLimitedLocalRotation(Quaternion localRotation, out bool changed)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001249")]
		[Address(RVA = "0x10C1890", Offset = "0x10C1890", VA = "0x10C1890")]
		public bool Apply()
		{
			return default(bool);
		}

		[Token(Token = "0x600124A")]
		[Address(RVA = "0x10C1900", Offset = "0x10C1900", VA = "0x10C1900")]
		public void Disable()
		{
		}

		[Token(Token = "0x600124F")]
		protected abstract Quaternion LimitRotation(Quaternion rotation);

		[Token(Token = "0x6001250")]
		[Address(RVA = "0x10C17B8", Offset = "0x10C17B8", VA = "0x10C17B8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001251")]
		[Address(RVA = "0x10C1974", Offset = "0x10C1974", VA = "0x10C1974")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001252")]
		[Address(RVA = "0x10C1978", Offset = "0x10C1978", VA = "0x10C1978")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x6001253")]
		[Address(RVA = "0x10C19AC", Offset = "0x10C19AC", VA = "0x10C19AC")]
		protected static Quaternion Limit1DOF(Quaternion rotation, Vector3 axis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001254")]
		[Address(RVA = "0x10C1A28", Offset = "0x10C1A28", VA = "0x10C1A28")]
		protected static Quaternion LimitTwist(Quaternion rotation, Vector3 axis, Vector3 orthoAxis, float twistLimit)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001255")]
		[Address(RVA = "0x10C1BBC", Offset = "0x10C1BBC", VA = "0x10C1BBC")]
		protected static float GetOrthogonalAngle(Vector3 v1, Vector3 v2, Vector3 normal)
		{
			return default(float);
		}

		[Token(Token = "0x6001256")]
		[Address(RVA = "0x10C1C2C", Offset = "0x10C1C2C", VA = "0x10C1C2C")]
		protected RotationLimit()
		{
		}
	}
	[Token(Token = "0x2000299")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xA7E230", Offset = "0xA7E230")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xA7E230", Offset = "0xA7E230")]
	public class RotationLimitAngle : RotationLimit
	{
		[Token(Token = "0x4000BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA82160", Offset = "0xA82160")]
		public float limit;

		[Token(Token = "0x4000BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA8217C", Offset = "0xA8217C")]
		public float twistLimit;

		[Token(Token = "0x6001257")]
		[Address(RVA = "0x10C1C60", Offset = "0x10C1C60", VA = "0x10C1C60")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8BEEC", Offset = "0xA8BEEC")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6001258")]
		[Address(RVA = "0x10C1CA8", Offset = "0x10C1CA8", VA = "0x10C1CA8")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8BF24", Offset = "0xA8BF24")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6001259")]
		[Address(RVA = "0x10C1CF0", Offset = "0x10C1CF0", VA = "0x10C1CF0")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8BF5C", Offset = "0xA8BF5C")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x600125A")]
		[Address(RVA = "0x10C1D38", Offset = "0x10C1D38", VA = "0x10C1D38")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8BF94", Offset = "0xA8BF94")]
		private void ASThread()
		{
		}

		[Token(Token = "0x600125B")]
		[Address(RVA = "0x10C1D80", Offset = "0x10C1D80", VA = "0x10C1D80", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600125C")]
		[Address(RVA = "0x10C1DC4", Offset = "0x10C1DC4", VA = "0x10C1DC4")]
		private Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600125D")]
		[Address(RVA = "0x10C1F84", Offset = "0x10C1F84", VA = "0x10C1F84")]
		public RotationLimitAngle()
		{
		}
	}
	[Token(Token = "0x200029A")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xA7E290", Offset = "0xA7E290")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xA7E290", Offset = "0xA7E290")]
	public class RotationLimitHinge : RotationLimit
	{
		[Token(Token = "0x4000BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool useLimits;

		[Token(Token = "0x4000BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float min;

		[Token(Token = "0x4000BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float max;

		[Token(Token = "0x4000BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[HideInInspector]
		public float zeroAxisDisplayOffset;

		[Token(Token = "0x4000BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float lastAngle;

		[Token(Token = "0x600125E")]
		[Address(RVA = "0x10C1FC4", Offset = "0x10C1FC4", VA = "0x10C1FC4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8BFCC", Offset = "0xA8BFCC")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x600125F")]
		[Address(RVA = "0x10C200C", Offset = "0x10C200C", VA = "0x10C200C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8C004", Offset = "0xA8C004")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6001260")]
		[Address(RVA = "0x10C2054", Offset = "0x10C2054", VA = "0x10C2054")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8C03C", Offset = "0xA8C03C")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6001261")]
		[Address(RVA = "0x10C209C", Offset = "0x10C209C", VA = "0x10C209C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8C074", Offset = "0xA8C074")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6001262")]
		[Address(RVA = "0x10C20E4", Offset = "0x10C20E4", VA = "0x10C20E4", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001263")]
		[Address(RVA = "0x10C20E8", Offset = "0x10C20E8", VA = "0x10C20E8")]
		private Quaternion LimitHinge(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001264")]
		[Address(RVA = "0x10C226C", Offset = "0x10C226C", VA = "0x10C226C")]
		public RotationLimitHinge()
		{
		}
	}
	[Token(Token = "0x200029B")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xA7E2F0", Offset = "0xA7E2F0")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xA7E2F0", Offset = "0xA7E2F0")]
	public class RotationLimitPolygonal : RotationLimit
	{
		[Serializable]
		[Token(Token = "0x20003B5")]
		public class ReachCone
		{
			[Token(Token = "0x400111B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3[] tetrahedron;

			[Token(Token = "0x400111C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float volume;

			[Token(Token = "0x400111D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 S;

			[Token(Token = "0x400111E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 B;

			[Token(Token = "0x170001C1")]
			public Vector3 o
			{
				[Token(Token = "0x60017B7")]
				[Address(RVA = "0x1EAB4E4", Offset = "0x1EAB4E4", VA = "0x1EAB4E4")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170001C2")]
			public Vector3 a
			{
				[Token(Token = "0x60017B8")]
				[Address(RVA = "0x1EAB51C", Offset = "0x1EAB51C", VA = "0x1EAB51C")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170001C3")]
			public Vector3 b
			{
				[Token(Token = "0x60017B9")]
				[Address(RVA = "0x1EAB558", Offset = "0x1EAB558", VA = "0x1EAB558")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170001C4")]
			public Vector3 c
			{
				[Token(Token = "0x60017BA")]
				[Address(RVA = "0x1EAB594", Offset = "0x1EAB594", VA = "0x1EAB594")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170001C5")]
			public bool isValid
			{
				[Token(Token = "0x60017BC")]
				[Address(RVA = "0x1EAB720", Offset = "0x1EAB720", VA = "0x1EAB720")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x60017BB")]
			[Address(RVA = "0x1EAB5D0", Offset = "0x1EAB5D0", VA = "0x1EAB5D0")]
			public ReachCone(Vector3 _o, Vector3 _a, Vector3 _b, Vector3 _c)
			{
			}

			[Token(Token = "0x60017BD")]
			[Address(RVA = "0x1EAB730", Offset = "0x1EAB730", VA = "0x1EAB730")]
			public void Calculate()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003B6")]
		public class LimitPoint
		{
			[Token(Token = "0x400111F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 point;

			[Token(Token = "0x4001120")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float tangentWeight;

			[Token(Token = "0x60017BE")]
			[Address(RVA = "0x1EAB4A8", Offset = "0x1EAB4A8", VA = "0x1EAB4A8")]
			public LimitPoint()
			{
			}
		}

		[Token(Token = "0x4000BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA821A8", Offset = "0xA821A8")]
		public float twistLimit;

		[Token(Token = "0x4000BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA821C4", Offset = "0xA821C4")]
		public int smoothIterations;

		[Token(Token = "0x4000BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public LimitPoint[] points;

		[Token(Token = "0x4000BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public Vector3[] P;

		[Token(Token = "0x4000BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		public ReachCone[] reachCones;

		[Token(Token = "0x6001265")]
		[Address(RVA = "0x10C22B4", Offset = "0x10C22B4", VA = "0x10C22B4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8C0AC", Offset = "0xA8C0AC")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6001266")]
		[Address(RVA = "0x10C22FC", Offset = "0x10C22FC", VA = "0x10C22FC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8C0E4", Offset = "0xA8C0E4")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6001267")]
		[Address(RVA = "0x10C2344", Offset = "0x10C2344", VA = "0x10C2344")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8C11C", Offset = "0xA8C11C")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6001268")]
		[Address(RVA = "0x10C238C", Offset = "0x10C238C", VA = "0x10C238C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8C154", Offset = "0xA8C154")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6001269")]
		[Address(RVA = "0x10C23D4", Offset = "0x10C23D4", VA = "0x10C23D4")]
		public void SetLimitPoints(LimitPoint[] points)
		{
		}

		[Token(Token = "0x600126A")]
		[Address(RVA = "0x10C28D0", Offset = "0x10C28D0", VA = "0x10C28D0", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600126B")]
		[Address(RVA = "0x10C2964", Offset = "0x10C2964", VA = "0x10C2964")]
		private void Start()
		{
		}

		[Token(Token = "0x600126C")]
		[Address(RVA = "0x10C2ED8", Offset = "0x10C2ED8", VA = "0x10C2ED8")]
		public void ResetToDefault()
		{
		}

		[Token(Token = "0x600126D")]
		[Address(RVA = "0x10C247C", Offset = "0x10C247C", VA = "0x10C247C")]
		public void BuildReachCones()
		{
		}

		[Token(Token = "0x600126E")]
		[Address(RVA = "0x10C3284", Offset = "0x10C3284", VA = "0x10C3284")]
		private Vector3[] SmoothPoints()
		{
			return null;
		}

		[Token(Token = "0x600126F")]
		[Address(RVA = "0x10C3690", Offset = "0x10C3690", VA = "0x10C3690")]
		private float GetScalar(int k)
		{
			return default(float);
		}

		[Token(Token = "0x6001270")]
		[Address(RVA = "0x10C36D4", Offset = "0x10C36D4", VA = "0x10C36D4")]
		private Vector3 PointToTangentPlane(Vector3 p, float r)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001271")]
		[Address(RVA = "0x10C3734", Offset = "0x10C3734", VA = "0x10C3734")]
		private Vector3 TangentPointToSphere(Vector3 q, float r)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001272")]
		[Address(RVA = "0x10C2C68", Offset = "0x10C2C68", VA = "0x10C2C68")]
		private Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001273")]
		[Address(RVA = "0x10C37A0", Offset = "0x10C37A0", VA = "0x10C37A0")]
		private int GetReachCone(Vector3 L)
		{
			return default(int);
		}

		[Token(Token = "0x6001274")]
		[Address(RVA = "0x10C387C", Offset = "0x10C387C", VA = "0x10C387C")]
		public RotationLimitPolygonal()
		{
		}
	}
	[Token(Token = "0x200029C")]
	[AttributeAttribute(Name = "HelpURLAttribute", RVA = "0xA7E350", Offset = "0xA7E350")]
	[AttributeAttribute(Name = "AddComponentMenu", RVA = "0xA7E350", Offset = "0xA7E350")]
	public class RotationLimitSpline : RotationLimit
	{
		[Token(Token = "0x4000BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA8220C", Offset = "0xA8220C")]
		public float twistLimit;

		[Token(Token = "0x4000BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public AnimationCurve spline;

		[Token(Token = "0x6001275")]
		[Address(RVA = "0x10C38FC", Offset = "0x10C38FC", VA = "0x10C38FC")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8C18C", Offset = "0xA8C18C")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6001276")]
		[Address(RVA = "0x10C3944", Offset = "0x10C3944", VA = "0x10C3944")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8C1C4", Offset = "0xA8C1C4")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6001277")]
		[Address(RVA = "0x10C398C", Offset = "0x10C398C", VA = "0x10C398C")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8C1FC", Offset = "0xA8C1FC")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6001278")]
		[Address(RVA = "0x10C39D4", Offset = "0x10C39D4", VA = "0x10C39D4")]
		[AttributeAttribute(Name = "ContextMenu", RVA = "0xA8C234", Offset = "0xA8C234")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6001279")]
		[Address(RVA = "0x10C3A1C", Offset = "0x10C3A1C", VA = "0x10C3A1C")]
		public void SetSpline(Keyframe[] keyframes)
		{
		}

		[Token(Token = "0x600127A")]
		[Address(RVA = "0x10C3A38", Offset = "0x10C3A38", VA = "0x10C3A38", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600127B")]
		[Address(RVA = "0x10C3A7C", Offset = "0x10C3A7C", VA = "0x10C3A7C")]
		public Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600127C")]
		[Address(RVA = "0x10C3CA0", Offset = "0x10C3CA0", VA = "0x10C3CA0")]
		public RotationLimitSpline()
		{
		}
	}
	[Token(Token = "0x200029D")]
	public class AimController : MonoBehaviour
	{
		[Token(Token = "0x20003B7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E99C", Offset = "0xA7E99C")]
		private sealed class <TurnToTarget>d__37 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001121")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001122")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001123")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AimController <>4__this;

			[Token(Token = "0x170001C6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60017C2")]
				[Address(RVA = "0x1A7F488", Offset = "0x1A7F488", VA = "0x1A7F488", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001C7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60017C4")]
				[Address(RVA = "0x1A7F4D0", Offset = "0x1A7F4D0", VA = "0x1A7F4D0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60017BF")]
			[Address(RVA = "0x1A7F38C", Offset = "0x1A7F38C", VA = "0x1A7F38C")]
			[DebuggerHidden]
			public <TurnToTarget>d__37(int <>1__state)
			{
			}

			[Token(Token = "0x60017C0")]
			[Address(RVA = "0x1A7F3B8", Offset = "0x1A7F3B8", VA = "0x1A7F3B8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60017C1")]
			[Address(RVA = "0x1A7F3BC", Offset = "0x1A7F3BC", VA = "0x1A7F3BC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60017C3")]
			[Address(RVA = "0x1A7F490", Offset = "0x1A7F490", VA = "0x1A7F490", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82238", Offset = "0xA82238")]
		public AimIK ik;

		[Token(Token = "0x4000BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82270", Offset = "0xA82270")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA82270", Offset = "0xA82270")]
		public float weight;

		[Token(Token = "0x4000BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xA822C4", Offset = "0xA822C4")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA822C4", Offset = "0xA822C4")]
		public Transform target;

		[Token(Token = "0x4000BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82324", Offset = "0xA82324")]
		public float targetSwitchSmoothTime;

		[Token(Token = "0x4000BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8235C", Offset = "0xA8235C")]
		public float weightSmoothTime;

		[Token(Token = "0x4000BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xA82394", Offset = "0xA82394")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82394", Offset = "0xA82394")]
		public bool smoothTurnTowardsTarget;

		[Token(Token = "0x4000BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA823F4", Offset = "0xA823F4")]
		public float maxRadiansDelta;

		[Token(Token = "0x4000BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8242C", Offset = "0xA8242C")]
		public float maxMagnitudeDelta;

		[Token(Token = "0x4000BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82464", Offset = "0xA82464")]
		public float slerpSpeed;

		[Token(Token = "0x4000BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8249C", Offset = "0xA8249C")]
		public float smoothDampTime;

		[Token(Token = "0x4000BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA824D4", Offset = "0xA824D4")]
		public Vector3 pivotOffsetFromRoot;

		[Token(Token = "0x4000BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8250C", Offset = "0xA8250C")]
		public float minDistance;

		[Token(Token = "0x4000BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82544", Offset = "0xA82544")]
		public Vector3 offset;

		[Token(Token = "0x4000BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xA8257C", Offset = "0xA8257C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8257C", Offset = "0xA8257C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA8257C", Offset = "0xA8257C")]
		public float maxRootAngle;

		[Token(Token = "0x4000BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA825F8", Offset = "0xA825F8")]
		public bool turnToTarget;

		[Token(Token = "0x4000BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82630", Offset = "0xA82630")]
		public float turnToTargetTime;

		[Token(Token = "0x4000BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xA82668", Offset = "0xA82668")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82668", Offset = "0xA82668")]
		public bool useAnimatedAimDirection;

		[Token(Token = "0x4000BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA826C8", Offset = "0xA826C8")]
		public Vector3 animatedAimDirection;

		[Token(Token = "0x4000BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Transform lastTarget;

		[Token(Token = "0x4000BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float switchWeight;

		[Token(Token = "0x4000BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float switchWeightV;

		[Token(Token = "0x4000BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float weightV;

		[Token(Token = "0x4000BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 dir;

		[Token(Token = "0x4000BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private bool lastSmoothTowardsTarget;

		[Token(Token = "0x4000BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB5")]
		private bool turningToTarget;

		[Token(Token = "0x4000BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float turnToTargetMlp;

		[Token(Token = "0x4000BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private float turnToTargetMlpV;

		[Token(Token = "0x4000BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float yawV;

		[Token(Token = "0x4000BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private float pitchV;

		[Token(Token = "0x4000BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float dirMagV;

		[Token(Token = "0x17000120")]
		private Vector3 pivot
		{
			[Token(Token = "0x600127F")]
			[Address(RVA = "0x230E96C", Offset = "0x230E96C", VA = "0x230E96C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x600127D")]
		[Address(RVA = "0x230E8E0", Offset = "0x230E8E0", VA = "0x230E8E0")]
		private void Start()
		{
		}

		[Token(Token = "0x600127E")]
		[Address(RVA = "0x230E9FC", Offset = "0x230E9FC", VA = "0x230E9FC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001280")]
		[Address(RVA = "0x230F0E0", Offset = "0x230F0E0", VA = "0x230F0E0")]
		private void ApplyMinDistance()
		{
		}

		[Token(Token = "0x6001281")]
		[Address(RVA = "0x230F1CC", Offset = "0x230F1CC", VA = "0x230F1CC")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x6001282")]
		[Address(RVA = "0x230F41C", Offset = "0x230F41C", VA = "0x230F41C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xA8C26C", Offset = "0xA8C26C")]
		private IEnumerator TurnToTarget()
		{
			return null;
		}

		[Token(Token = "0x6001283")]
		[Address(RVA = "0x230F494", Offset = "0x230F494", VA = "0x230F494")]
		public AimController()
		{
		}
	}
	[Token(Token = "0x200029E")]
	public class AimPoser : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003B8")]
		public class Pose
		{
			[Token(Token = "0x4001124")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool visualize;

			[Token(Token = "0x4001125")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string name;

			[Token(Token = "0x4001126")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 direction;

			[Token(Token = "0x4001127")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float yaw;

			[Token(Token = "0x4001128")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float pitch;

			[Token(Token = "0x4001129")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float angleBuffer;

			[Token(Token = "0x60017C5")]
			[Address(RVA = "0x1A7F4D8", Offset = "0x1A7F4D8", VA = "0x1A7F4D8")]
			public bool IsInDirection(Vector3 d)
			{
				return default(bool);
			}

			[Token(Token = "0x60017C6")]
			[Address(RVA = "0x1A7F664", Offset = "0x1A7F664", VA = "0x1A7F664")]
			public void SetAngleBuffer(float value)
			{
			}

			[Token(Token = "0x60017C7")]
			[Address(RVA = "0x1A7F66C", Offset = "0x1A7F66C", VA = "0x1A7F66C")]
			public Pose()
			{
			}
		}

		[Token(Token = "0x4000BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float angleBuffer;

		[Token(Token = "0x4000BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Pose[] poses;

		[Token(Token = "0x6001284")]
		[Address(RVA = "0x230F704", Offset = "0x230F704", VA = "0x230F704")]
		public Pose GetPose(Vector3 localDirection)
		{
			return null;
		}

		[Token(Token = "0x6001285")]
		[Address(RVA = "0x230F7E4", Offset = "0x230F7E4", VA = "0x230F7E4")]
		public void SetPoseActive(Pose pose)
		{
		}

		[Token(Token = "0x6001286")]
		[Address(RVA = "0x230F850", Offset = "0x230F850", VA = "0x230F850")]
		public AimPoser()
		{
		}
	}
	[Token(Token = "0x200029F")]
	public class Amplifier : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20003B9")]
		public class Body
		{
			[Serializable]
			[Token(Token = "0x200043D")]
			public class EffectorLink
			{
				[Token(Token = "0x40012BE")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8924C", Offset = "0xA8924C")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x40012BF")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA89284", Offset = "0xA89284")]
				public float weight;

				[Token(Token = "0x600193F")]
				[Address(RVA = "0x1EB2D30", Offset = "0x1EB2D30", VA = "0x1EB2D30")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x400112A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88124", Offset = "0xA88124")]
			public Transform transform;

			[Token(Token = "0x400112B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8815C", Offset = "0xA8815C")]
			public Transform relativeTo;

			[Token(Token = "0x400112C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88194", Offset = "0xA88194")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x400112D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA881CC", Offset = "0xA881CC")]
			public float verticalWeight;

			[Token(Token = "0x400112E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88204", Offset = "0xA88204")]
			public float horizontalWeight;

			[Token(Token = "0x400112F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8823C", Offset = "0xA8823C")]
			public float speed;

			[Token(Token = "0x4001130")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Vector3 lastRelativePos;

			[Token(Token = "0x4001131")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Vector3 smoothDelta;

			[Token(Token = "0x4001132")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private bool firstUpdate;

			[Token(Token = "0x60017C8")]
			[Address(RVA = "0x1A7FB94", Offset = "0x1A7FB94", VA = "0x1A7FB94")]
			public void Update(IKSolverFullBodyBiped solver, float w, float deltaTime)
			{
			}

			[Token(Token = "0x60017C9")]
			[Address(RVA = "0x1A7FEB8", Offset = "0x1A7FEB8", VA = "0x1A7FEB8")]
			private static Vector3 Multiply(Vector3 v1, Vector3 v2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x60017CA")]
			[Address(RVA = "0x1A7FEC8", Offset = "0x1A7FEC8", VA = "0x1A7FEC8")]
			public Body()
			{
			}
		}

		[Token(Token = "0x4000BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82700", Offset = "0xA82700")]
		public Body[] bodies;

		[Token(Token = "0x6001287")]
		[Address(RVA = "0x230FD2C", Offset = "0x230FD2C", VA = "0x230FD2C", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6001288")]
		[Address(RVA = "0x230FE78", Offset = "0x230FE78", VA = "0x230FE78")]
		public Amplifier()
		{
		}
	}
	[Token(Token = "0x20002A0")]
	public class BodyTilt : OffsetModifier
	{
		[Token(Token = "0x4000BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82738", Offset = "0xA82738")]
		public float tiltSpeed;

		[Token(Token = "0x4000BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82770", Offset = "0xA82770")]
		public float tiltSensitivity;

		[Token(Token = "0x4000BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA827A8", Offset = "0xA827A8")]
		public OffsetPose poseLeft;

		[Token(Token = "0x4000BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA827E0", Offset = "0xA827E0")]
		public OffsetPose poseRight;

		[Token(Token = "0x4000BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float tiltAngle;

		[Token(Token = "0x4000BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 lastForward;

		[Token(Token = "0x6001289")]
		[Address(RVA = "0x232068C", Offset = "0x232068C", VA = "0x232068C", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600128A")]
		[Address(RVA = "0x23206D4", Offset = "0x23206D4", VA = "0x23206D4", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x600128B")]
		[Address(RVA = "0x232088C", Offset = "0x232088C", VA = "0x232088C")]
		public BodyTilt()
		{
		}
	}
	[Token(Token = "0x20002A1")]
	public class CCDBendGoal : MonoBehaviour
	{
		[Token(Token = "0x4000BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CCDIK ik;

		[Token(Token = "0x4000BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA82818", Offset = "0xA82818")]
		public float weight;

		[Token(Token = "0x600128C")]
		[Address(RVA = "0x2320AB8", Offset = "0x2320AB8", VA = "0x2320AB8")]
		private void Start()
		{
		}

		[Token(Token = "0x600128D")]
		[Address(RVA = "0x2320B90", Offset = "0x2320B90", VA = "0x2320B90")]
		private void BeforeIK()
		{
		}

		[Token(Token = "0x600128E")]
		[Address(RVA = "0x2320DB8", Offset = "0x2320DB8", VA = "0x2320DB8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600128F")]
		[Address(RVA = "0x2320EE8", Offset = "0x2320EE8", VA = "0x2320EE8")]
		public CCDBendGoal()
		{
		}
	}
	[Token(Token = "0x20002A2")]
	[ExecuteInEditMode]
	public class EditorIK : MonoBehaviour
	{
		[Token(Token = "0x4000BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82830", Offset = "0xA82830")]
		public Animator animator;

		[Token(Token = "0x4000BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82868", Offset = "0xA82868")]
		public EditorIKPose defaultPose;

		[Token(Token = "0x4000BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public Transform[] bones;

		[Token(Token = "0x4000BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA828B0", Offset = "0xA828B0")]
		private IK <ik>k__BackingField;

		[Token(Token = "0x17000121")]
		public IK ik
		{
			[Token(Token = "0x6001290")]
			[Address(RVA = "0x16AABAC", Offset = "0x16AABAC", VA = "0x16AABAC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8C2CC", Offset = "0xA8C2CC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001291")]
			[Address(RVA = "0x16AABB4", Offset = "0x16AABB4", VA = "0x16AABB4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8C2DC", Offset = "0xA8C2DC")]
			private set
			{
			}
		}

		[Token(Token = "0x6001292")]
		[Address(RVA = "0x16AABBC", Offset = "0x16AABBC", VA = "0x16AABBC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001293")]
		[Address(RVA = "0x16AAD78", Offset = "0x16AAD78", VA = "0x16AAD78")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001294")]
		[Address(RVA = "0x16AB004", Offset = "0x16AB004", VA = "0x16AB004")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001295")]
		[Address(RVA = "0x16AB15C", Offset = "0x16AB15C", VA = "0x16AB15C")]
		public void StoreDefaultPose()
		{
		}

		[Token(Token = "0x6001296")]
		[Address(RVA = "0x16AB34C", Offset = "0x16AB34C", VA = "0x16AB34C")]
		public bool Initiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6001297")]
		[Address(RVA = "0x16AB584", Offset = "0x16AB584", VA = "0x16AB584")]
		public void Update()
		{
		}

		[Token(Token = "0x6001298")]
		[Address(RVA = "0x16AB830", Offset = "0x16AB830", VA = "0x16AB830")]
		public EditorIK()
		{
		}
	}
	[Token(Token = "0x20002A3")]
	[AttributeAttribute(Name = "CreateAssetMenuAttribute", RVA = "0xA7E3C0", Offset = "0xA7E3C0")]
	public class EditorIKPose : ScriptableObject
	{
		[Token(Token = "0x4000BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3[] localPositions;

		[Token(Token = "0x4000BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Quaternion[] localRotations;

		[Token(Token = "0x17000122")]
		public bool poseStored
		{
			[Token(Token = "0x6001299")]
			[Address(RVA = "0x16AAE70", Offset = "0x16AAE70", VA = "0x16AAE70")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600129A")]
		[Address(RVA = "0x16AB1DC", Offset = "0x16AB1DC", VA = "0x16AB1DC")]
		public void Store(Transform[] T)
		{
		}

		[Token(Token = "0x600129B")]
		[Address(RVA = "0x16AAE94", Offset = "0x16AAE94", VA = "0x16AAE94")]
		public bool Restore(Transform[] T)
		{
			return default(bool);
		}

		[Token(Token = "0x600129C")]
		[Address(RVA = "0x16AB898", Offset = "0x16AB898", VA = "0x16AB898")]
		public EditorIKPose()
		{
		}
	}
	[Token(Token = "0x20002A4")]
	public class HitReaction : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20003BA")]
		public abstract class HitPoint
		{
			[Token(Token = "0x4001133")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88274", Offset = "0xA88274")]
			public string name;

			[Token(Token = "0x4001134")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA882AC", Offset = "0xA882AC")]
			public Collider collider;

			[Token(Token = "0x4001135")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA882E4", Offset = "0xA882E4")]
			[SerializeField]
			private float crossFadeTime;

			[Token(Token = "0x4001136")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA88330", Offset = "0xA88330")]
			private float <crossFader>k__BackingField;

			[Token(Token = "0x4001137")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA88340", Offset = "0xA88340")]
			private float <timer>k__BackingField;

			[Token(Token = "0x4001138")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA88350", Offset = "0xA88350")]
			private Vector3 <force>k__BackingField;

			[Token(Token = "0x4001139")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float length;

			[Token(Token = "0x400113A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float crossFadeSpeed;

			[Token(Token = "0x400113B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float lastTime;

			[Token(Token = "0x170001C8")]
			public bool inProgress
			{
				[Token(Token = "0x60017CB")]
				[Address(RVA = "0x1E36170", Offset = "0x1E36170", VA = "0x1E36170")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170001C9")]
			protected float crossFader
			{
				[Token(Token = "0x60017CC")]
				[Address(RVA = "0x1E36184", Offset = "0x1E36184", VA = "0x1E36184")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D77C", Offset = "0xA8D77C")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60017CD")]
				[Address(RVA = "0x1E3618C", Offset = "0x1E3618C", VA = "0x1E3618C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D78C", Offset = "0xA8D78C")]
				private set
				{
				}
			}

			[Token(Token = "0x170001CA")]
			protected float timer
			{
				[Token(Token = "0x60017CE")]
				[Address(RVA = "0x1E36194", Offset = "0x1E36194", VA = "0x1E36194")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D79C", Offset = "0xA8D79C")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60017CF")]
				[Address(RVA = "0x1E3619C", Offset = "0x1E3619C", VA = "0x1E3619C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D7AC", Offset = "0xA8D7AC")]
				private set
				{
				}
			}

			[Token(Token = "0x170001CB")]
			protected Vector3 force
			{
				[Token(Token = "0x60017D0")]
				[Address(RVA = "0x1E361A4", Offset = "0x1E361A4", VA = "0x1E361A4")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D7BC", Offset = "0xA8D7BC")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x60017D1")]
				[Address(RVA = "0x1E361B0", Offset = "0x1E361B0", VA = "0x1E361B0")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D7CC", Offset = "0xA8D7CC")]
				private set
				{
				}
			}

			[Token(Token = "0x60017D2")]
			[Address(RVA = "0x1E361BC", Offset = "0x1E361BC", VA = "0x1E361BC", Slot = "4")]
			public virtual void Hit(Vector3 force, Vector3 point)
			{
			}

			[Token(Token = "0x60017D3")]
			[Address(RVA = "0x1E362D4", Offset = "0x1E362D4", VA = "0x1E362D4")]
			public void Apply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x60017D4")]
			protected abstract float GetLength();

			[Token(Token = "0x60017D5")]
			protected abstract void CrossFadeStart();

			[Token(Token = "0x60017D6")]
			protected abstract void OnApply(IKSolverFullBodyBiped solver, float weight);

			[Token(Token = "0x60017D7")]
			[Address(RVA = "0x1E363A8", Offset = "0x1E363A8", VA = "0x1E363A8")]
			protected HitPoint()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003BB")]
		public class HitPointEffector : HitPoint
		{
			[Serializable]
			[Token(Token = "0x200043E")]
			public class EffectorLink
			{
				[Token(Token = "0x40012C0")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA892BC", Offset = "0xA892BC")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x40012C1")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA892F4", Offset = "0xA892F4")]
				public float weight;

				[Token(Token = "0x40012C2")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Vector3 lastValue;

				[Token(Token = "0x40012C3")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
				private Vector3 current;

				[Token(Token = "0x6001940")]
				[Address(RVA = "0x1EB317C", Offset = "0x1EB317C", VA = "0x1EB317C")]
				public void Apply(IKSolverFullBodyBiped solver, Vector3 offset, float crossFader)
				{
				}

				[Token(Token = "0x6001941")]
				[Address(RVA = "0x1EB322C", Offset = "0x1EB322C", VA = "0x1EB322C")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6001942")]
				[Address(RVA = "0x1EB3240", Offset = "0x1EB3240", VA = "0x1EB3240")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x400113C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88360", Offset = "0xA88360")]
			public AnimationCurve offsetInForceDirection;

			[Token(Token = "0x400113D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88398", Offset = "0xA88398")]
			public AnimationCurve offsetInUpDirection;

			[Token(Token = "0x400113E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA883D0", Offset = "0xA883D0")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x60017D8")]
			[Address(RVA = "0x1E36744", Offset = "0x1E36744", VA = "0x1E36744", Slot = "5")]
			protected override float GetLength()
			{
				return default(float);
			}

			[Token(Token = "0x60017D9")]
			[Address(RVA = "0x1E36874", Offset = "0x1E36874", VA = "0x1E36874", Slot = "6")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x60017DA")]
			[Address(RVA = "0x1E368E0", Offset = "0x1E368E0", VA = "0x1E368E0", Slot = "7")]
			protected override void OnApply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x60017DB")]
			[Address(RVA = "0x1E36A48", Offset = "0x1E36A48", VA = "0x1E36A48")]
			public HitPointEffector()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003BC")]
		public class HitPointBone : HitPoint
		{
			[Serializable]
			[Token(Token = "0x200043F")]
			public class BoneLink
			{
				[Token(Token = "0x40012C4")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8932C", Offset = "0xA8932C")]
				public Transform bone;

				[Token(Token = "0x40012C5")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA89364", Offset = "0xA89364")]
				[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA89364", Offset = "0xA89364")]
				public float weight;

				[Token(Token = "0x40012C6")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
				private Quaternion lastValue;

				[Token(Token = "0x40012C7")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
				private Quaternion current;

				[Token(Token = "0x6001943")]
				[Address(RVA = "0x1EB3014", Offset = "0x1EB3014", VA = "0x1EB3014")]
				public void Apply(IKSolverFullBodyBiped solver, Quaternion offset, float crossFader)
				{
				}

				[Token(Token = "0x6001944")]
				[Address(RVA = "0x1EB312C", Offset = "0x1EB312C", VA = "0x1EB312C")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6001945")]
				[Address(RVA = "0x1EB3138", Offset = "0x1EB3138", VA = "0x1EB3138")]
				public BoneLink()
				{
				}
			}

			[Token(Token = "0x400113F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88408", Offset = "0xA88408")]
			public AnimationCurve aroundCenterOfMass;

			[Token(Token = "0x4001140")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88440", Offset = "0xA88440")]
			public BoneLink[] boneLinks;

			[Token(Token = "0x4001141")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Rigidbody rigidbody;

			[Token(Token = "0x4001142")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Vector3 comAxis;

			[Token(Token = "0x60017DC")]
			[Address(RVA = "0x1E363BC", Offset = "0x1E363BC", VA = "0x1E363BC", Slot = "4")]
			public override void Hit(Vector3 force, Vector3 point)
			{
			}

			[Token(Token = "0x60017DD")]
			[Address(RVA = "0x1E36540", Offset = "0x1E36540", VA = "0x1E36540", Slot = "5")]
			protected override float GetLength()
			{
				return default(float);
			}

			[Token(Token = "0x60017DE")]
			[Address(RVA = "0x1E365E4", Offset = "0x1E365E4", VA = "0x1E365E4", Slot = "6")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x60017DF")]
			[Address(RVA = "0x1E36650", Offset = "0x1E36650", VA = "0x1E36650", Slot = "7")]
			protected override void OnApply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x60017E0")]
			[Address(RVA = "0x1E36730", Offset = "0x1E36730", VA = "0x1E36730")]
			public HitPointBone()
			{
			}
		}

		[Token(Token = "0x4000C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA828C0", Offset = "0xA828C0")]
		public HitPointEffector[] effectorHitPoints;

		[Token(Token = "0x4000C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA828F8", Offset = "0xA828F8")]
		public HitPointBone[] boneHitPoints;

		[Token(Token = "0x17000123")]
		public bool inProgress
		{
			[Token(Token = "0x600129D")]
			[Address(RVA = "0x28ABF90", Offset = "0x28ABF90", VA = "0x28ABF90")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600129E")]
		[Address(RVA = "0x28AC060", Offset = "0x28AC060", VA = "0x28AC060", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x600129F")]
		[Address(RVA = "0x28AC13C", Offset = "0x28AC13C", VA = "0x28AC13C")]
		public void Hit(Collider collider, Vector3 force, Vector3 point)
		{
		}

		[Token(Token = "0x60012A0")]
		[Address(RVA = "0x28AC3A0", Offset = "0x28AC3A0", VA = "0x28AC3A0")]
		public HitReaction()
		{
		}
	}
	[Token(Token = "0x20002A5")]
	public class HitReactionVRIK : OffsetModifierVRIK
	{
		[Serializable]
		[Token(Token = "0x20003BD")]
		public abstract class Offset
		{
			[Token(Token = "0x4001143")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88478", Offset = "0xA88478")]
			public string name;

			[Token(Token = "0x4001144")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA884B0", Offset = "0xA884B0")]
			public Collider collider;

			[Token(Token = "0x4001145")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA884E8", Offset = "0xA884E8")]
			[SerializeField]
			private float crossFadeTime;

			[Token(Token = "0x4001146")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA88534", Offset = "0xA88534")]
			private float <crossFader>k__BackingField;

			[Token(Token = "0x4001147")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA88544", Offset = "0xA88544")]
			private float <timer>k__BackingField;

			[Token(Token = "0x4001148")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA88554", Offset = "0xA88554")]
			private Vector3 <force>k__BackingField;

			[Token(Token = "0x4001149")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float length;

			[Token(Token = "0x400114A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float crossFadeSpeed;

			[Token(Token = "0x400114B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float lastTime;

			[Token(Token = "0x170001CC")]
			protected float crossFader
			{
				[Token(Token = "0x60017E1")]
				[Address(RVA = "0x1E36A5C", Offset = "0x1E36A5C", VA = "0x1E36A5C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D7DC", Offset = "0xA8D7DC")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60017E2")]
				[Address(RVA = "0x1E36A64", Offset = "0x1E36A64", VA = "0x1E36A64")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D7EC", Offset = "0xA8D7EC")]
				private set
				{
				}
			}

			[Token(Token = "0x170001CD")]
			protected float timer
			{
				[Token(Token = "0x60017E3")]
				[Address(RVA = "0x1E36A6C", Offset = "0x1E36A6C", VA = "0x1E36A6C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D7FC", Offset = "0xA8D7FC")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60017E4")]
				[Address(RVA = "0x1E36A74", Offset = "0x1E36A74", VA = "0x1E36A74")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D80C", Offset = "0xA8D80C")]
				private set
				{
				}
			}

			[Token(Token = "0x170001CE")]
			protected Vector3 force
			{
				[Token(Token = "0x60017E5")]
				[Address(RVA = "0x1E36A7C", Offset = "0x1E36A7C", VA = "0x1E36A7C")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D81C", Offset = "0xA8D81C")]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x60017E6")]
				[Address(RVA = "0x1E36A88", Offset = "0x1E36A88", VA = "0x1E36A88")]
				[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8D82C", Offset = "0xA8D82C")]
				private set
				{
				}
			}

			[Token(Token = "0x60017E7")]
			[Address(RVA = "0x1E36A94", Offset = "0x1E36A94", VA = "0x1E36A94", Slot = "4")]
			public virtual void Hit(Vector3 force, AnimationCurve[] curves, Vector3 point)
			{
			}

			[Token(Token = "0x60017E8")]
			[Address(RVA = "0x1E36BC0", Offset = "0x1E36BC0", VA = "0x1E36BC0")]
			public void Apply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x60017E9")]
			protected abstract float GetLength(AnimationCurve[] curves);

			[Token(Token = "0x60017EA")]
			protected abstract void CrossFadeStart();

			[Token(Token = "0x60017EB")]
			protected abstract void OnApply(VRIK ik, AnimationCurve[] curves, float weight);

			[Token(Token = "0x60017EC")]
			[Address(RVA = "0x1E36CA8", Offset = "0x1E36CA8", VA = "0x1E36CA8")]
			protected Offset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003BE")]
		public class PositionOffset : Offset
		{
			[Serializable]
			[Token(Token = "0x2000440")]
			public class PositionOffsetLink
			{
				[Token(Token = "0x40012C8")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA893B8", Offset = "0xA893B8")]
				public IKSolverVR.PositionOffset positionOffset;

				[Token(Token = "0x40012C9")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA893F0", Offset = "0xA893F0")]
				public float weight;

				[Token(Token = "0x40012CA")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Vector3 lastValue;

				[Token(Token = "0x40012CB")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
				private Vector3 current;

				[Token(Token = "0x6001946")]
				[Address(RVA = "0x1EB3248", Offset = "0x1EB3248", VA = "0x1EB3248")]
				public void Apply(VRIK ik, Vector3 offset, float crossFader)
				{
				}

				[Token(Token = "0x6001947")]
				[Address(RVA = "0x1EB32D8", Offset = "0x1EB32D8", VA = "0x1EB32D8")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6001948")]
				[Address(RVA = "0x1EB32EC", Offset = "0x1EB32EC", VA = "0x1EB32EC")]
				public PositionOffsetLink()
				{
				}
			}

			[Token(Token = "0x400114C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88564", Offset = "0xA88564")]
			public int forceDirCurveIndex;

			[Token(Token = "0x400114D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8859C", Offset = "0xA8859C")]
			public int upDirCurveIndex;

			[Token(Token = "0x400114E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA885D4", Offset = "0xA885D4")]
			public PositionOffsetLink[] offsetLinks;

			[Token(Token = "0x60017ED")]
			[Address(RVA = "0x1E36CBC", Offset = "0x1E36CBC", VA = "0x1E36CBC", Slot = "5")]
			protected override float GetLength(AnimationCurve[] curves)
			{
				return default(float);
			}

			[Token(Token = "0x60017EE")]
			[Address(RVA = "0x1E36E6C", Offset = "0x1E36E6C", VA = "0x1E36E6C", Slot = "6")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x60017EF")]
			[Address(RVA = "0x1E36ED8", Offset = "0x1E36ED8", VA = "0x1E36ED8", Slot = "7")]
			protected override void OnApply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x60017F0")]
			[Address(RVA = "0x1E37078", Offset = "0x1E37078", VA = "0x1E37078")]
			public PositionOffset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003BF")]
		public class RotationOffset : Offset
		{
			[Serializable]
			[Token(Token = "0x2000441")]
			public class RotationOffsetLink
			{
				[Token(Token = "0x40012CC")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA89428", Offset = "0xA89428")]
				public IKSolverVR.RotationOffset rotationOffset;

				[Token(Token = "0x40012CD")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA89460", Offset = "0xA89460")]
				[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA89460", Offset = "0xA89460")]
				public float weight;

				[Token(Token = "0x40012CE")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Quaternion lastValue;

				[Token(Token = "0x40012CF")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				private Quaternion current;

				[Token(Token = "0x6001949")]
				[Address(RVA = "0x1EB32F4", Offset = "0x1EB32F4", VA = "0x1EB32F4")]
				public void Apply(VRIK ik, Quaternion offset, float crossFader)
				{
				}

				[Token(Token = "0x600194A")]
				[Address(RVA = "0x1EB33D0", Offset = "0x1EB33D0", VA = "0x1EB33D0")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x600194B")]
				[Address(RVA = "0x1EB33DC", Offset = "0x1EB33DC", VA = "0x1EB33DC")]
				public RotationOffsetLink()
				{
				}
			}

			[Token(Token = "0x400114F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8860C", Offset = "0xA8860C")]
			public int curveIndex;

			[Token(Token = "0x4001150")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88644", Offset = "0xA88644")]
			public RotationOffsetLink[] offsetLinks;

			[Token(Token = "0x4001151")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private Rigidbody rigidbody;

			[Token(Token = "0x4001152")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Vector3 comAxis;

			[Token(Token = "0x60017F1")]
			[Address(RVA = "0x1E37094", Offset = "0x1E37094", VA = "0x1E37094", Slot = "4")]
			public override void Hit(Vector3 force, AnimationCurve[] curves, Vector3 point)
			{
			}

			[Token(Token = "0x60017F2")]
			[Address(RVA = "0x1E37220", Offset = "0x1E37220", VA = "0x1E37220", Slot = "5")]
			protected override float GetLength(AnimationCurve[] curves)
			{
				return default(float);
			}

			[Token(Token = "0x60017F3")]
			[Address(RVA = "0x1E37304", Offset = "0x1E37304", VA = "0x1E37304", Slot = "6")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x60017F4")]
			[Address(RVA = "0x1E37370", Offset = "0x1E37370", VA = "0x1E37370", Slot = "7")]
			protected override void OnApply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x60017F5")]
			[Address(RVA = "0x1E375C8", Offset = "0x1E375C8", VA = "0x1E375C8")]
			public RotationOffset()
			{
			}
		}

		[Token(Token = "0x4000C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve[] offsetCurves;

		[Token(Token = "0x4000C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82930", Offset = "0xA82930")]
		public PositionOffset[] positionOffsets;

		[Token(Token = "0x4000C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82968", Offset = "0xA82968")]
		public RotationOffset[] rotationOffsets;

		[Token(Token = "0x60012A1")]
		[Address(RVA = "0x28AC700", Offset = "0x28AC700", VA = "0x28AC700", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x60012A2")]
		[Address(RVA = "0x28AC7D4", Offset = "0x28AC7D4", VA = "0x28AC7D4")]
		public void Hit(Collider collider, Vector3 force, Vector3 point)
		{
		}

		[Token(Token = "0x60012A3")]
		[Address(RVA = "0x28ACA40", Offset = "0x28ACA40", VA = "0x28ACA40")]
		public HitReactionVRIK()
		{
		}
	}
	[Token(Token = "0x20002A6")]
	public class Inertia : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20003C0")]
		public class Body
		{
			[Serializable]
			[Token(Token = "0x2000442")]
			public class EffectorLink
			{
				[Token(Token = "0x40012D0")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA894B4", Offset = "0xA894B4")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x40012D1")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA894EC", Offset = "0xA894EC")]
				public float weight;

				[Token(Token = "0x600194C")]
				[Address(RVA = "0x1EB3420", Offset = "0x1EB3420", VA = "0x1EB3420")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4001153")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8867C", Offset = "0xA8867C")]
			public Transform transform;

			[Token(Token = "0x4001154")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA886B4", Offset = "0xA886B4")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x4001155")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA886EC", Offset = "0xA886EC")]
			public float speed;

			[Token(Token = "0x4001156")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88724", Offset = "0xA88724")]
			public float acceleration;

			[Token(Token = "0x4001157")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8875C", Offset = "0xA8875C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA8875C", Offset = "0xA8875C")]
			public float matchVelocity;

			[Token(Token = "0x4001158")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA887B0", Offset = "0xA887B0")]
			public float gravity;

			[Token(Token = "0x4001159")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 delta;

			[Token(Token = "0x400115A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 lazyPoint;

			[Token(Token = "0x400115B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Vector3 direction;

			[Token(Token = "0x400115C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private Vector3 lastPosition;

			[Token(Token = "0x400115D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private bool firstUpdate;

			[Token(Token = "0x60017F6")]
			[Address(RVA = "0x1EA505C", Offset = "0x1EA505C", VA = "0x1EA505C")]
			public void Reset()
			{
			}

			[Token(Token = "0x60017F7")]
			[Address(RVA = "0x1EA5114", Offset = "0x1EA5114", VA = "0x1EA5114")]
			public void Update(IKSolverFullBodyBiped solver, float weight, float deltaTime)
			{
			}

			[Token(Token = "0x60017F8")]
			[Address(RVA = "0x1EA53D0", Offset = "0x1EA53D0", VA = "0x1EA53D0")]
			public Body()
			{
			}
		}

		[Token(Token = "0x4000C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA829A0", Offset = "0xA829A0")]
		public Body[] bodies;

		[Token(Token = "0x4000C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA829D8", Offset = "0xA829D8")]
		public OffsetLimits[] limits;

		[Token(Token = "0x60012A4")]
		[Address(RVA = "0x22E70A0", Offset = "0x22E70A0", VA = "0x22E70A0")]
		public void ResetBodies()
		{
		}

		[Token(Token = "0x60012A5")]
		[Address(RVA = "0x22E711C", Offset = "0x22E711C", VA = "0x22E711C", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x60012A6")]
		[Address(RVA = "0x22E71DC", Offset = "0x22E71DC", VA = "0x22E71DC")]
		public Inertia()
		{
		}
	}
	[Token(Token = "0x20002A7")]
	public class LookAtController : MonoBehaviour
	{
		[Token(Token = "0x4000C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LookAtIK ik;

		[Token(Token = "0x4000C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xA82A10", Offset = "0xA82A10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82A10", Offset = "0xA82A10")]
		public Transform target;

		[Token(Token = "0x4000C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA82A70", Offset = "0xA82A70")]
		public float weight;

		[Token(Token = "0x4000C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 offset;

		[Token(Token = "0x4000C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82A88", Offset = "0xA82A88")]
		public float targetSwitchSmoothTime;

		[Token(Token = "0x4000C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82AC0", Offset = "0xA82AC0")]
		public float weightSmoothTime;

		[Token(Token = "0x4000C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xA82AF8", Offset = "0xA82AF8")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82AF8", Offset = "0xA82AF8")]
		public bool smoothTurnTowardsTarget;

		[Token(Token = "0x4000C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82B58", Offset = "0xA82B58")]
		public float maxRadiansDelta;

		[Token(Token = "0x4000C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82B90", Offset = "0xA82B90")]
		public float maxMagnitudeDelta;

		[Token(Token = "0x4000C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82BC8", Offset = "0xA82BC8")]
		public float slerpSpeed;

		[Token(Token = "0x4000C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82C00", Offset = "0xA82C00")]
		public Vector3 pivotOffsetFromRoot;

		[Token(Token = "0x4000C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82C38", Offset = "0xA82C38")]
		public float minDistance;

		[Token(Token = "0x4000C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xA82C70", Offset = "0xA82C70")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82C70", Offset = "0xA82C70")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA82C70", Offset = "0xA82C70")]
		public float maxRootAngle;

		[Token(Token = "0x4000C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform lastTarget;

		[Token(Token = "0x4000C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float switchWeight;

		[Token(Token = "0x4000C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float switchWeightV;

		[Token(Token = "0x4000C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float weightV;

		[Token(Token = "0x4000C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 dir;

		[Token(Token = "0x4000C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool lastSmoothTowardsTarget;

		[Token(Token = "0x17000124")]
		private Vector3 pivot
		{
			[Token(Token = "0x60012A9")]
			[Address(RVA = "0x22F367C", Offset = "0x22F367C", VA = "0x22F367C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x60012A7")]
		[Address(RVA = "0x22F3608", Offset = "0x22F3608", VA = "0x22F3608")]
		private void Start()
		{
		}

		[Token(Token = "0x60012A8")]
		[Address(RVA = "0x22F370C", Offset = "0x22F370C", VA = "0x22F370C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60012AA")]
		[Address(RVA = "0x22F3C50", Offset = "0x22F3C50", VA = "0x22F3C50")]
		private void ApplyMinDistance()
		{
		}

		[Token(Token = "0x60012AB")]
		[Address(RVA = "0x22F3D3C", Offset = "0x22F3D3C", VA = "0x22F3D3C")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x60012AC")]
		[Address(RVA = "0x22F3F34", Offset = "0x22F3F34", VA = "0x22F3F34")]
		public LookAtController()
		{
		}
	}
	[Token(Token = "0x20002A8")]
	public abstract class OffsetModifier : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003C1")]
		public class OffsetLimits
		{
			[Token(Token = "0x400115E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA887E8", Offset = "0xA887E8")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x400115F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88820", Offset = "0xA88820")]
			public float spring;

			[Token(Token = "0x4001160")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88858", Offset = "0xA88858")]
			public bool x;

			[Token(Token = "0x4001161")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88890", Offset = "0xA88890")]
			public bool y;

			[Token(Token = "0x4001162")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA888C8", Offset = "0xA888C8")]
			public bool z;

			[Token(Token = "0x4001163")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88900", Offset = "0xA88900")]
			public float minX;

			[Token(Token = "0x4001164")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88938", Offset = "0xA88938")]
			public float maxX;

			[Token(Token = "0x4001165")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88970", Offset = "0xA88970")]
			public float minY;

			[Token(Token = "0x4001166")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA889A8", Offset = "0xA889A8")]
			public float maxY;

			[Token(Token = "0x4001167")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA889E0", Offset = "0xA889E0")]
			public float minZ;

			[Token(Token = "0x4001168")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88A18", Offset = "0xA88A18")]
			public float maxZ;

			[Token(Token = "0x60017F9")]
			[Address(RVA = "0x1EA9190", Offset = "0x1EA9190", VA = "0x1EA9190")]
			public void Apply(IKEffector e, Quaternion rootRotation)
			{
			}

			[Token(Token = "0x60017FA")]
			[Address(RVA = "0x1EA92E8", Offset = "0x1EA92E8", VA = "0x1EA92E8")]
			private float SpringAxis(float value, float min, float max)
			{
				return default(float);
			}

			[Token(Token = "0x60017FB")]
			[Address(RVA = "0x1EA9360", Offset = "0x1EA9360", VA = "0x1EA9360")]
			private float Spring(float value, float limit, bool negative)
			{
				return default(float);
			}

			[Token(Token = "0x60017FC")]
			[Address(RVA = "0x1EA93B8", Offset = "0x1EA93B8", VA = "0x1EA93B8")]
			public OffsetLimits()
			{
			}
		}

		[Token(Token = "0x20003C2")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E9AC", Offset = "0xA7E9AC")]
		private sealed class <Initiate>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001169")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400116A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400116B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OffsetModifier <>4__this;

			[Token(Token = "0x170001CF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001800")]
				[Address(RVA = "0x1EA9140", Offset = "0x1EA9140", VA = "0x1EA9140", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001802")]
				[Address(RVA = "0x1EA9188", Offset = "0x1EA9188", VA = "0x1EA9188", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60017FD")]
			[Address(RVA = "0x1EA8FA0", Offset = "0x1EA8FA0", VA = "0x1EA8FA0")]
			[DebuggerHidden]
			public <Initiate>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x60017FE")]
			[Address(RVA = "0x1EA8FCC", Offset = "0x1EA8FCC", VA = "0x1EA8FCC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60017FF")]
			[Address(RVA = "0x1EA8FD0", Offset = "0x1EA8FD0", VA = "0x1EA8FD0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001801")]
			[Address(RVA = "0x1EA9148", Offset = "0x1EA9148", VA = "0x1EA9148", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82CEC", Offset = "0xA82CEC")]
		public float weight;

		[Token(Token = "0x4000C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82D24", Offset = "0xA82D24")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected float lastTime;

		[Token(Token = "0x17000125")]
		protected float deltaTime
		{
			[Token(Token = "0x60012AD")]
			[Address(RVA = "0x10B5C10", Offset = "0x10B5C10", VA = "0x10B5C10")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60012AE")]
		protected abstract void OnModifyOffset();

		[Token(Token = "0x60012AF")]
		[Address(RVA = "0x10B590C", Offset = "0x10B590C", VA = "0x10B590C", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60012B0")]
		[Address(RVA = "0x10B5C3C", Offset = "0x10B5C3C", VA = "0x10B5C3C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xA8C2EC", Offset = "0xA8C2EC")]
		private IEnumerator Initiate()
		{
			return null;
		}

		[Token(Token = "0x60012B1")]
		[Address(RVA = "0x10B5CB4", Offset = "0x10B5CB4", VA = "0x10B5CB4")]
		private void ModifyOffset()
		{
		}

		[Token(Token = "0x60012B2")]
		[Address(RVA = "0x10B5D90", Offset = "0x10B5D90", VA = "0x10B5D90")]
		protected void ApplyLimits(OffsetLimits[] limits)
		{
		}

		[Token(Token = "0x60012B3")]
		[Address(RVA = "0x10B5E50", Offset = "0x10B5E50", VA = "0x10B5E50", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x60012B4")]
		[Address(RVA = "0x10B5C00", Offset = "0x10B5C00", VA = "0x10B5C00")]
		protected OffsetModifier()
		{
		}
	}
	[Token(Token = "0x20002A9")]
	public abstract class OffsetModifierVRIK : MonoBehaviour
	{
		[Token(Token = "0x20003C3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E9BC", Offset = "0xA7E9BC")]
		private sealed class <Initiate>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400116C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400116D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400116E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OffsetModifierVRIK <>4__this;

			[Token(Token = "0x170001D1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001806")]
				[Address(RVA = "0x1EA9560", Offset = "0x1EA9560", VA = "0x1EA9560", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001808")]
				[Address(RVA = "0x1EA95A8", Offset = "0x1EA95A8", VA = "0x1EA95A8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001803")]
			[Address(RVA = "0x1EA93C0", Offset = "0x1EA93C0", VA = "0x1EA93C0")]
			[DebuggerHidden]
			public <Initiate>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6001804")]
			[Address(RVA = "0x1EA93EC", Offset = "0x1EA93EC", VA = "0x1EA93EC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001805")]
			[Address(RVA = "0x1EA93F0", Offset = "0x1EA93F0", VA = "0x1EA93F0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001807")]
			[Address(RVA = "0x1EA9568", Offset = "0x1EA9568", VA = "0x1EA9568", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82D5C", Offset = "0xA82D5C")]
		public float weight;

		[Token(Token = "0x4000C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82D94", Offset = "0xA82D94")]
		public VRIK ik;

		[Token(Token = "0x4000C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float lastTime;

		[Token(Token = "0x17000126")]
		protected float deltaTime
		{
			[Token(Token = "0x60012B5")]
			[Address(RVA = "0x10B5F80", Offset = "0x10B5F80", VA = "0x10B5F80")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60012B6")]
		protected abstract void OnModifyOffset();

		[Token(Token = "0x60012B7")]
		[Address(RVA = "0x10B5FAC", Offset = "0x10B5FAC", VA = "0x10B5FAC", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60012B8")]
		[Address(RVA = "0x10B5FD8", Offset = "0x10B5FD8", VA = "0x10B5FD8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xA8C34C", Offset = "0xA8C34C")]
		private IEnumerator Initiate()
		{
			return null;
		}

		[Token(Token = "0x60012B9")]
		[Address(RVA = "0x10B6050", Offset = "0x10B6050", VA = "0x10B6050")]
		private void ModifyOffset()
		{
		}

		[Token(Token = "0x60012BA")]
		[Address(RVA = "0x10B612C", Offset = "0x10B612C", VA = "0x10B612C", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x60012BB")]
		[Address(RVA = "0x10B625C", Offset = "0x10B625C", VA = "0x10B625C")]
		protected OffsetModifierVRIK()
		{
		}
	}
	[Token(Token = "0x20002AA")]
	public class OffsetPose : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003C4")]
		public class EffectorLink
		{
			[Token(Token = "0x400116F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x4001170")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 offset;

			[Token(Token = "0x4001171")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 pin;

			[Token(Token = "0x4001172")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 pinWeight;

			[Token(Token = "0x6001809")]
			[Address(RVA = "0x1EA95B0", Offset = "0x1EA95B0", VA = "0x1EA95B0")]
			public void Apply(IKSolverFullBodyBiped solver, float weight, Quaternion rotation)
			{
			}

			[Token(Token = "0x600180A")]
			[Address(RVA = "0x1EA97CC", Offset = "0x1EA97CC", VA = "0x1EA97CC")]
			public EffectorLink()
			{
			}
		}

		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EffectorLink[] effectorLinks;

		[Token(Token = "0x60012BC")]
		[Address(RVA = "0x10B626C", Offset = "0x10B626C", VA = "0x10B626C")]
		public void Apply(IKSolverFullBodyBiped solver, float weight)
		{
		}

		[Token(Token = "0x60012BD")]
		[Address(RVA = "0x10B6330", Offset = "0x10B6330", VA = "0x10B6330")]
		public void Apply(IKSolverFullBodyBiped solver, float weight, Quaternion rotation)
		{
		}

		[Token(Token = "0x60012BE")]
		[Address(RVA = "0x10B63EC", Offset = "0x10B63EC", VA = "0x10B63EC")]
		public OffsetPose()
		{
		}
	}
	[Token(Token = "0x20002AB")]
	public class PenetrationAvoidance : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20003C5")]
		public class Avoider
		{
			[Serializable]
			[Token(Token = "0x2000443")]
			public class EffectorLink
			{
				[Token(Token = "0x40012D2")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA89524", Offset = "0xA89524")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x40012D3")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8955C", Offset = "0xA8955C")]
				public float weight;

				[Token(Token = "0x600194D")]
				[Address(RVA = "0x1EB3430", Offset = "0x1EB3430", VA = "0x1EB3430")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4001173")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88A50", Offset = "0xA88A50")]
			public Transform[] raycastFrom;

			[Token(Token = "0x4001174")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88A88", Offset = "0xA88A88")]
			public Transform raycastTo;

			[Token(Token = "0x4001175")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88AC0", Offset = "0xA88AC0")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA88AC0", Offset = "0xA88AC0")]
			public float raycastRadius;

			[Token(Token = "0x4001176")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88B14", Offset = "0xA88B14")]
			public EffectorLink[] effectors;

			[Token(Token = "0x4001177")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88B4C", Offset = "0xA88B4C")]
			public float smoothTimeIn;

			[Token(Token = "0x4001178")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88B84", Offset = "0xA88B84")]
			public float smoothTimeOut;

			[Token(Token = "0x4001179")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88BBC", Offset = "0xA88BBC")]
			public LayerMask layers;

			[Token(Token = "0x400117A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 offset;

			[Token(Token = "0x400117B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Vector3 offsetTarget;

			[Token(Token = "0x400117C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private Vector3 offsetV;

			[Token(Token = "0x600180B")]
			[Address(RVA = "0x1EA99E0", Offset = "0x1EA99E0", VA = "0x1EA99E0")]
			public void Solve(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x600180C")]
			[Address(RVA = "0x1EA9B24", Offset = "0x1EA9B24", VA = "0x1EA9B24")]
			private Vector3 GetOffsetTarget(IKSolverFullBodyBiped solver)
			{
				return default(Vector3);
			}

			[Token(Token = "0x600180D")]
			[Address(RVA = "0x1EA9C1C", Offset = "0x1EA9C1C", VA = "0x1EA9C1C")]
			private Vector3 Raycast(Vector3 from, Vector3 to)
			{
				return default(Vector3);
			}

			[Token(Token = "0x600180E")]
			[Address(RVA = "0x1EA9DEC", Offset = "0x1EA9DEC", VA = "0x1EA9DEC")]
			public Avoider()
			{
			}
		}

		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82DCC", Offset = "0xA82DCC")]
		public Avoider[] avoiders;

		[Token(Token = "0x60012BF")]
		[Address(RVA = "0x10BA660", Offset = "0x10BA660", VA = "0x10BA660", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x60012C0")]
		[Address(RVA = "0x10BA6E8", Offset = "0x10BA6E8", VA = "0x10BA6E8")]
		public PenetrationAvoidance()
		{
		}
	}
	[Token(Token = "0x20002AC")]
	public class Recoil : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20003C6")]
		public class RecoilOffset
		{
			[Serializable]
			[Token(Token = "0x2000444")]
			public class EffectorLink
			{
				[Token(Token = "0x40012D4")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA89594", Offset = "0xA89594")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x40012D5")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA895CC", Offset = "0xA895CC")]
				public float weight;

				[Token(Token = "0x600194E")]
				[Address(RVA = "0x1EB3438", Offset = "0x1EB3438", VA = "0x1EB3438")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x400117D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88BF4", Offset = "0xA88BF4")]
			public Vector3 offset;

			[Token(Token = "0x400117E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88C2C", Offset = "0xA88C2C")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA88C2C", Offset = "0xA88C2C")]
			public float additivity;

			[Token(Token = "0x400117F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88C80", Offset = "0xA88C80")]
			public float maxAdditiveOffsetMag;

			[Token(Token = "0x4001180")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88CB8", Offset = "0xA88CB8")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x4001181")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 additiveOffset;

			[Token(Token = "0x4001182")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 lastOffset;

			[Token(Token = "0x600180F")]
			[Address(RVA = "0x1EAAD54", Offset = "0x1EAAD54", VA = "0x1EAAD54")]
			public void Start()
			{
			}

			[Token(Token = "0x6001810")]
			[Address(RVA = "0x1EAADA4", Offset = "0x1EAADA4", VA = "0x1EAADA4")]
			public void Apply(IKSolverFullBodyBiped solver, Quaternion rotation, float masterWeight, float length, float timeLeft)
			{
			}

			[Token(Token = "0x6001811")]
			[Address(RVA = "0x1EAAF68", Offset = "0x1EAAF68", VA = "0x1EAAF68")]
			public RecoilOffset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003C7")]
		public enum Handedness
		{
			[Token(Token = "0x4001184")]
			Right,
			[Token(Token = "0x4001185")]
			Left
		}

		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82E04", Offset = "0xA82E04")]
		public AimIK aimIK;

		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82E3C", Offset = "0xA82E3C")]
		public AimIK headIK;

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82E74", Offset = "0xA82E74")]
		public bool aimIKSolvedLast;

		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82EAC", Offset = "0xA82EAC")]
		public Handedness handedness;

		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82EE4", Offset = "0xA82EE4")]
		public bool twoHanded;

		[Token(Token = "0x4000C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82F1C", Offset = "0xA82F1C")]
		public AnimationCurve recoilWeight;

		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82F54", Offset = "0xA82F54")]
		public float magnitudeRandom;

		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82F8C", Offset = "0xA82F8C")]
		public Vector3 rotationRandom;

		[Token(Token = "0x4000C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82FC4", Offset = "0xA82FC4")]
		public Vector3 handRotationOffset;

		[Token(Token = "0x4000C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA82FFC", Offset = "0xA82FFC")]
		public float blendTime;

		[Token(Token = "0x4000C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0xA83034", Offset = "0xA83034")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA83034", Offset = "0xA83034")]
		public RecoilOffset[] offsets;

		[Token(Token = "0x4000C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideInInspector]
		public Quaternion rotationOffset;

		[Token(Token = "0x4000C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float magnitudeMlp;

		[Token(Token = "0x4000C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float endTime;

		[Token(Token = "0x4000C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Quaternion handRotation;

		[Token(Token = "0x4000C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Quaternion secondaryHandRelativeRotation;

		[Token(Token = "0x4000C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Quaternion randomRotation;

		[Token(Token = "0x4000C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float length;

		[Token(Token = "0x4000C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private bool initiated;

		[Token(Token = "0x4000C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float blendWeight;

		[Token(Token = "0x4000C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float w;

		[Token(Token = "0x4000C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Quaternion primaryHandRotation;

		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private bool handRotationsSet;

		[Token(Token = "0x4000C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private Vector3 aimIKAxis;

		[Token(Token = "0x17000127")]
		public bool isFinished
		{
			[Token(Token = "0x60012C1")]
			[Address(RVA = "0x10BF85C", Offset = "0x10BF85C", VA = "0x10BF85C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000128")]
		private IKEffector primaryHandEffector
		{
			[Token(Token = "0x60012C7")]
			[Address(RVA = "0x10C033C", Offset = "0x10C033C", VA = "0x10C033C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000129")]
		private IKEffector secondaryHandEffector
		{
			[Token(Token = "0x60012C8")]
			[Address(RVA = "0x10C037C", Offset = "0x10C037C", VA = "0x10C037C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012A")]
		private Transform primaryHand
		{
			[Token(Token = "0x60012C9")]
			[Address(RVA = "0x10C02FC", Offset = "0x10C02FC", VA = "0x10C02FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012B")]
		private Transform secondaryHand
		{
			[Token(Token = "0x60012CA")]
			[Address(RVA = "0x10C031C", Offset = "0x10C031C", VA = "0x10C031C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60012C2")]
		[Address(RVA = "0x10BF88C", Offset = "0x10BF88C", VA = "0x10BF88C")]
		public void SetHandRotations(Quaternion leftHandRotation, Quaternion rightHandRotation)
		{
		}

		[Token(Token = "0x60012C3")]
		[Address(RVA = "0x10BF8B8", Offset = "0x10BF8B8", VA = "0x10BF8B8")]
		public void Fire(float magnitude)
		{
		}

		[Token(Token = "0x60012C4")]
		[Address(RVA = "0x10BFA00", Offset = "0x10BFA00", VA = "0x10BFA00", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x60012C5")]
		[Address(RVA = "0x10C03BC", Offset = "0x10C03BC", VA = "0x10C03BC")]
		private void AfterFBBIK()
		{
		}

		[Token(Token = "0x60012C6")]
		[Address(RVA = "0x10C04E8", Offset = "0x10C04E8", VA = "0x10C04E8")]
		private void AfterAimIK()
		{
		}

		[Token(Token = "0x60012CB")]
		[Address(RVA = "0x10C05B0", Offset = "0x10C05B0", VA = "0x10C05B0", Slot = "6")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x60012CC")]
		[Address(RVA = "0x10C079C", Offset = "0x10C079C", VA = "0x10C079C")]
		public Recoil()
		{
		}
	}
	[Token(Token = "0x20002AD")]
	public class ShoulderRotator : MonoBehaviour
	{
		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA83094", Offset = "0xA83094")]
		public float weight;

		[Token(Token = "0x4000C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA830CC", Offset = "0xA830CC")]
		public float offset;

		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool skip;

		[Token(Token = "0x60012CD")]
		[Address(RVA = "0x1630AB8", Offset = "0x1630AB8", VA = "0x1630AB8")]
		private void Start()
		{
		}

		[Token(Token = "0x60012CE")]
		[Address(RVA = "0x1630BC0", Offset = "0x1630BC0", VA = "0x1630BC0")]
		private void RotateShoulders()
		{
		}

		[Token(Token = "0x60012CF")]
		[Address(RVA = "0x1630CA8", Offset = "0x1630CA8", VA = "0x1630CA8")]
		private void RotateShoulder(FullBodyBipedChain chain, float weight, float offset)
		{
		}

		[Token(Token = "0x60012D0")]
		[Address(RVA = "0x1630FFC", Offset = "0x1630FFC", VA = "0x1630FFC")]
		private IKMapping.BoneMap GetParentBoneMap(FullBodyBipedChain chain)
		{
			return null;
		}

		[Token(Token = "0x60012D1")]
		[Address(RVA = "0x1631034", Offset = "0x1631034", VA = "0x1631034")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60012D2")]
		[Address(RVA = "0x1631164", Offset = "0x1631164", VA = "0x1631164")]
		public ShoulderRotator()
		{
		}
	}
	[Token(Token = "0x20002AE")]
	public static class VRIKCalibrator
	{
		[Serializable]
		[Token(Token = "0x20003C8")]
		public class Settings
		{
			[Token(Token = "0x4001186")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88CF0", Offset = "0xA88CF0")]
			public float scaleMlp;

			[Token(Token = "0x4001187")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88D28", Offset = "0xA88D28")]
			public Vector3 headTrackerForward;

			[Token(Token = "0x4001188")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88D60", Offset = "0xA88D60")]
			public Vector3 headTrackerUp;

			[Token(Token = "0x4001189")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88D98", Offset = "0xA88D98")]
			public Vector3 handTrackerForward;

			[Token(Token = "0x400118A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88DD0", Offset = "0xA88DD0")]
			public Vector3 handTrackerUp;

			[Token(Token = "0x400118B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88E08", Offset = "0xA88E08")]
			public Vector3 footTrackerForward;

			[Token(Token = "0x400118C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88E40", Offset = "0xA88E40")]
			public Vector3 footTrackerUp;

			[Token(Token = "0x400118D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[AttributeAttribute(Name = "SpaceAttribute", RVA = "0xA88E78", Offset = "0xA88E78")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88E78", Offset = "0xA88E78")]
			public Vector3 headOffset;

			[Token(Token = "0x400118E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88EC8", Offset = "0xA88EC8")]
			public Vector3 handOffset;

			[Token(Token = "0x400118F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88F00", Offset = "0xA88F00")]
			public float footForwardOffset;

			[Token(Token = "0x4001190")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88F38", Offset = "0xA88F38")]
			public float footInwardOffset;

			[Token(Token = "0x4001191")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA88F70", Offset = "0xA88F70")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA88F70", Offset = "0xA88F70")]
			public float footHeadingOffset;

			[Token(Token = "0x4001192")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA88FCC", Offset = "0xA88FCC")]
			public float pelvisPositionWeight;

			[Token(Token = "0x4001193")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA88FE4", Offset = "0xA88FE4")]
			public float pelvisRotationWeight;

			[Token(Token = "0x6001812")]
			[Address(RVA = "0x1EAFB4C", Offset = "0x1EAFB4C", VA = "0x1EAFB4C")]
			public Settings()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003C9")]
		public class CalibrationData
		{
			[Serializable]
			[Token(Token = "0x2000445")]
			public class Target
			{
				[Token(Token = "0x40012D6")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public bool used;

				[Token(Token = "0x40012D7")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				public Vector3 localPosition;

				[Token(Token = "0x40012D8")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				public Quaternion localRotation;

				[Token(Token = "0x600194F")]
				[Address(RVA = "0x1EB3528", Offset = "0x1EB3528", VA = "0x1EB3528")]
				public Target(Transform t)
				{
				}

				[Token(Token = "0x6001950")]
				[Address(RVA = "0x1EB35E8", Offset = "0x1EB35E8", VA = "0x1EB35E8")]
				public void SetTo(Transform t)
				{
				}
			}

			[Token(Token = "0x4001194")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float scale;

			[Token(Token = "0x4001195")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Target head;

			[Token(Token = "0x4001196")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Target leftHand;

			[Token(Token = "0x4001197")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Target rightHand;

			[Token(Token = "0x4001198")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Target pelvis;

			[Token(Token = "0x4001199")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Target leftFoot;

			[Token(Token = "0x400119A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Target rightFoot;

			[Token(Token = "0x400119B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Target leftLegGoal;

			[Token(Token = "0x400119C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Target rightLegGoal;

			[Token(Token = "0x400119D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Vector3 pelvisTargetRight;

			[Token(Token = "0x400119E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			public float pelvisPositionWeight;

			[Token(Token = "0x400119F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public float pelvisRotationWeight;

			[Token(Token = "0x6001813")]
			[Address(RVA = "0x1EAFB44", Offset = "0x1EAFB44", VA = "0x1EAFB44")]
			public CalibrationData()
			{
			}
		}

		[Token(Token = "0x60012D3")]
		[Address(RVA = "0x1A70690", Offset = "0x1A70690", VA = "0x1A70690")]
		public static void RecalibrateScale(VRIK ik, CalibrationData data, Settings settings)
		{
		}

		[Token(Token = "0x60012D4")]
		[Address(RVA = "0x1A70718", Offset = "0x1A70718", VA = "0x1A70718")]
		public static void RecalibrateScale(VRIK ik, CalibrationData data, float scaleMlp)
		{
		}

		[Token(Token = "0x60012D5")]
		[Address(RVA = "0x1A70850", Offset = "0x1A70850", VA = "0x1A70850")]
		private static void CalibrateScale(VRIK ik, Settings settings)
		{
		}

		[Token(Token = "0x60012D6")]
		[Address(RVA = "0x1A70764", Offset = "0x1A70764", VA = "0x1A70764")]
		private static void CalibrateScale(VRIK ik, float scaleMlp = 1f)
		{
		}

		[Token(Token = "0x60012D7")]
		[Address(RVA = "0x1A6E8FC", Offset = "0x1A6E8FC", VA = "0x1A6E8FC")]
		public static CalibrationData Calibrate(VRIK ik, Settings settings, Transform headTracker, [Optional] Transform bodyTracker, [Optional] Transform leftHandTracker, [Optional] Transform rightHandTracker, [Optional] Transform leftFootTracker, [Optional] Transform rightFootTracker)
		{
			return null;
		}

		[Token(Token = "0x60012D8")]
		[Address(RVA = "0x1A70868", Offset = "0x1A70868", VA = "0x1A70868")]
		private static void CalibrateLeg(Settings settings, Transform tracker, IKSolverVR.Leg leg, Transform lastBone, Vector3 rootForward, bool isLeft)
		{
		}

		[Token(Token = "0x60012D9")]
		[Address(RVA = "0x1A6FB88", Offset = "0x1A6FB88", VA = "0x1A6FB88")]
		public static void Calibrate(VRIK ik, CalibrationData data, Transform headTracker, [Optional] Transform bodyTracker, [Optional] Transform leftHandTracker, [Optional] Transform rightHandTracker, [Optional] Transform leftFootTracker, [Optional] Transform rightFootTracker)
		{
		}

		[Token(Token = "0x60012DA")]
		[Address(RVA = "0x1A710AC", Offset = "0x1A710AC", VA = "0x1A710AC")]
		private static void CalibrateLeg(CalibrationData data, Transform tracker, IKSolverVR.Leg leg, Transform lastBone, Vector3 rootForward, bool isLeft)
		{
		}

		[Token(Token = "0x60012DB")]
		[Address(RVA = "0x1A7151C", Offset = "0x1A7151C", VA = "0x1A7151C")]
		public static CalibrationData Calibrate(VRIK ik, Transform centerEyeAnchor, Transform leftHandAnchor, Transform rightHandAnchor, Vector3 centerEyePositionOffset, Vector3 centerEyeRotationOffset, Vector3 handPositionOffset, Vector3 handRotationOffset, float scaleMlp = 1f)
		{
			return null;
		}

		[Token(Token = "0x60012DC")]
		[Address(RVA = "0x1A71754", Offset = "0x1A71754", VA = "0x1A71754")]
		public static void CalibrateHead(VRIK ik, Transform centerEyeAnchor, Vector3 anchorPositionOffset, Vector3 anchorRotationOffset)
		{
		}

		[Token(Token = "0x60012DD")]
		[Address(RVA = "0x1A71DE4", Offset = "0x1A71DE4", VA = "0x1A71DE4")]
		public static void CalibrateBody(VRIK ik, Transform pelvisTracker, Vector3 trackerPositionOffset, Vector3 trackerRotationOffset)
		{
		}

		[Token(Token = "0x60012DE")]
		[Address(RVA = "0x1A71BB0", Offset = "0x1A71BB0", VA = "0x1A71BB0")]
		public static void CalibrateHands(VRIK ik, Transform leftHandAnchor, Transform rightHandAnchor, Vector3 anchorPositionOffset, Vector3 anchorRotationOffset)
		{
		}

		[Token(Token = "0x60012DF")]
		[Address(RVA = "0x1A72060", Offset = "0x1A72060", VA = "0x1A72060")]
		private static void CalibrateHand(VRIK ik, Transform anchor, Vector3 positionOffset, Vector3 rotationOffset, bool isLeft)
		{
		}

		[Token(Token = "0x60012E0")]
		[Address(RVA = "0x1A723B0", Offset = "0x1A723B0", VA = "0x1A723B0")]
		public static Vector3 GuessWristToPalmAxis(Transform hand, Transform forearm)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60012E1")]
		[Address(RVA = "0x1A724A0", Offset = "0x1A724A0", VA = "0x1A724A0")]
		public static Vector3 GuessPalmToThumbAxis(Transform hand, Transform forearm)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x20002AF")]
	public class VRIKLODController : MonoBehaviour
	{
		[Token(Token = "0x4000C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Renderer LODRenderer;

		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float LODDistance;

		[Token(Token = "0x4000C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool allowCulled;

		[Token(Token = "0x4000C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private VRIK ik;

		[Token(Token = "0x60012E2")]
		[Address(RVA = "0x1A727BC", Offset = "0x1A727BC", VA = "0x1A727BC")]
		private void Start()
		{
		}

		[Token(Token = "0x60012E3")]
		[Address(RVA = "0x1A72818", Offset = "0x1A72818", VA = "0x1A72818")]
		private void Update()
		{
		}

		[Token(Token = "0x60012E4")]
		[Address(RVA = "0x1A7284C", Offset = "0x1A7284C", VA = "0x1A7284C")]
		private int GetLODLevel()
		{
			return default(int);
		}

		[Token(Token = "0x60012E5")]
		[Address(RVA = "0x1A72988", Offset = "0x1A72988", VA = "0x1A72988")]
		public VRIKLODController()
		{
		}
	}
	[Token(Token = "0x20002B0")]
	public class VRIKRootController : MonoBehaviour
	{
		[Token(Token = "0x4000C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA83104", Offset = "0xA83104")]
		private Vector3 <pelvisTargetRight>k__BackingField;

		[Token(Token = "0x4000C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform pelvisTarget;

		[Token(Token = "0x4000C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform leftFootTarget;

		[Token(Token = "0x4000C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform rightFootTarget;

		[Token(Token = "0x4000C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private VRIK ik;

		[Token(Token = "0x1700012C")]
		public Vector3 pelvisTargetRight
		{
			[Token(Token = "0x60012E6")]
			[Address(RVA = "0x1A73090", Offset = "0x1A73090", VA = "0x1A73090")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8C3AC", Offset = "0xA8C3AC")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60012E7")]
			[Address(RVA = "0x1A7309C", Offset = "0x1A7309C", VA = "0x1A7309C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8C3BC", Offset = "0xA8C3BC")]
			private set
			{
			}
		}

		[Token(Token = "0x60012E8")]
		[Address(RVA = "0x1A730A8", Offset = "0x1A730A8", VA = "0x1A730A8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60012E9")]
		[Address(RVA = "0x1A70E7C", Offset = "0x1A70E7C", VA = "0x1A70E7C")]
		public void Calibrate()
		{
		}

		[Token(Token = "0x60012EA")]
		[Address(RVA = "0x1A71360", Offset = "0x1A71360", VA = "0x1A71360")]
		public void Calibrate(VRIKCalibrator.CalibrationData data)
		{
		}

		[Token(Token = "0x60012EB")]
		[Address(RVA = "0x1A731B8", Offset = "0x1A731B8", VA = "0x1A731B8")]
		private void OnPreUpdate()
		{
		}

		[Token(Token = "0x60012EC")]
		[Address(RVA = "0x1A735D4", Offset = "0x1A735D4", VA = "0x1A735D4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60012ED")]
		[Address(RVA = "0x1A73704", Offset = "0x1A73704", VA = "0x1A73704")]
		public VRIKRootController()
		{
		}
	}
}
namespace RootMotion.Demos
{
	[Token(Token = "0x20002B1")]
	public class FKOffset : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003CA")]
		public class Offset
		{
			[Token(Token = "0x40011A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[HideInInspector]
			public string name;

			[Token(Token = "0x40011A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public HumanBodyBones bone;

			[Token(Token = "0x40011A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 rotationOffset;

			[Token(Token = "0x40011A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Transform t;

			[Token(Token = "0x6001814")]
			[Address(RVA = "0x1E32C64", Offset = "0x1E32C64", VA = "0x1E32C64")]
			public void Apply(Animator animator)
			{
			}

			[Token(Token = "0x6001815")]
			[Address(RVA = "0x1E32DD8", Offset = "0x1E32DD8", VA = "0x1E32DD8")]
			public Offset()
			{
			}
		}

		[Token(Token = "0x4000C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Offset[] offsets;

		[Token(Token = "0x4000C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x60012EE")]
		[Address(RVA = "0x27682A4", Offset = "0x27682A4", VA = "0x27682A4")]
		private void Start()
		{
		}

		[Token(Token = "0x60012EF")]
		[Address(RVA = "0x2768300", Offset = "0x2768300", VA = "0x2768300")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60012F0")]
		[Address(RVA = "0x276837C", Offset = "0x276837C", VA = "0x276837C")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60012F1")]
		[Address(RVA = "0x2768460", Offset = "0x2768460", VA = "0x2768460")]
		public FKOffset()
		{
		}
	}
	[Token(Token = "0x20002B2")]
	public class AimBoxing : MonoBehaviour
	{
		[Token(Token = "0x4000C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK aimIK;

		[Token(Token = "0x4000C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform pin;

		[Token(Token = "0x60012F2")]
		[Address(RVA = "0x230E854", Offset = "0x230E854", VA = "0x230E854")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60012F3")]
		[Address(RVA = "0x230E8D8", Offset = "0x230E8D8", VA = "0x230E8D8")]
		public AimBoxing()
		{
		}
	}
	[Token(Token = "0x20002B3")]
	public class AimSwing : MonoBehaviour
	{
		[Token(Token = "0x4000C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK ik;

		[Token(Token = "0x4000C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA83114", Offset = "0xA83114")]
		public Vector3 animatedAimDirection;

		[Token(Token = "0x60012F4")]
		[Address(RVA = "0x230F8C0", Offset = "0x230F8C0", VA = "0x230F8C0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60012F5")]
		[Address(RVA = "0x230F938", Offset = "0x230F938", VA = "0x230F938")]
		public AimSwing()
		{
		}
	}
	[Token(Token = "0x20002B4")]
	public class SecondHandOnGun : MonoBehaviour
	{
		[Token(Token = "0x4000C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK aim;

		[Token(Token = "0x4000C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LimbIK leftArmIK;

		[Token(Token = "0x4000C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftHand;

		[Token(Token = "0x4000C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform rightHand;

		[Token(Token = "0x4000C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GrounderFBBIK grounder;

		[Token(Token = "0x4000C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 leftHandPositionOffset;

		[Token(Token = "0x4000C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Vector3 leftHandRotationOffset;

		[Token(Token = "0x4000C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 leftHandPosRelToRight;

		[Token(Token = "0x4000C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Quaternion leftHandRotRelToRight;

		[Token(Token = "0x60012F6")]
		[Address(RVA = "0x162CEA8", Offset = "0x162CEA8", VA = "0x162CEA8")]
		private void Start()
		{
		}

		[Token(Token = "0x60012F7")]
		[Address(RVA = "0x162CF6C", Offset = "0x162CF6C", VA = "0x162CF6C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60012F8")]
		[Address(RVA = "0x162D198", Offset = "0x162D198", VA = "0x162D198")]
		public SecondHandOnGun()
		{
		}
	}
	[Token(Token = "0x20002B5")]
	public class SimpleAimingSystem : MonoBehaviour
	{
		[Token(Token = "0x4000C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8314C", Offset = "0xA8314C")]
		public AimPoser aimPoser;

		[Token(Token = "0x4000C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA83184", Offset = "0xA83184")]
		public AimIK aim;

		[Token(Token = "0x4000C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA831BC", Offset = "0xA831BC")]
		public LookAtIK lookAt;

		[Token(Token = "0x4000C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA831F4", Offset = "0xA831F4")]
		public Animator animator;

		[Token(Token = "0x4000C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8322C", Offset = "0xA8322C")]
		public float crossfadeTime;

		[Token(Token = "0x4000C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA83264", Offset = "0xA83264")]
		public float minAimDistance;

		[Token(Token = "0x4000C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AimPoser.Pose aimPose;

		[Token(Token = "0x4000C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AimPoser.Pose lastPose;

		[Token(Token = "0x60012F9")]
		[Address(RVA = "0x163143C", Offset = "0x163143C", VA = "0x163143C")]
		private void Start()
		{
		}

		[Token(Token = "0x60012FA")]
		[Address(RVA = "0x1631480", Offset = "0x1631480", VA = "0x1631480")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60012FB")]
		[Address(RVA = "0x1631538", Offset = "0x1631538", VA = "0x1631538")]
		private void Pose()
		{
		}

		[Token(Token = "0x60012FC")]
		[Address(RVA = "0x16316C0", Offset = "0x16316C0", VA = "0x16316C0")]
		private void LimitAimTarget()
		{
		}

		[Token(Token = "0x60012FD")]
		[Address(RVA = "0x16317EC", Offset = "0x16317EC", VA = "0x16317EC")]
		private void DirectCrossFade(string state, float target)
		{
		}

		[Token(Token = "0x60012FE")]
		[Address(RVA = "0x1631868", Offset = "0x1631868", VA = "0x1631868")]
		public SimpleAimingSystem()
		{
		}
	}
	[Token(Token = "0x20002B6")]
	public class TerrainOffset : MonoBehaviour
	{
		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK aimIK;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 raycastOffset;

		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask raycastLayers;

		[Token(Token = "0x4000C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float min;

		[Token(Token = "0x4000C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float max;

		[Token(Token = "0x4000C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float lerpSpeed;

		[Token(Token = "0x4000C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private RaycastHit hit;

		[Token(Token = "0x4000C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 offset;

		[Token(Token = "0x60012FF")]
		[Address(RVA = "0x1652DEC", Offset = "0x1652DEC", VA = "0x1652DEC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001300")]
		[Address(RVA = "0x1652F5C", Offset = "0x1652F5C", VA = "0x1652F5C")]
		private Vector3 GetGroundHeightOffset(Vector3 worldPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001301")]
		[Address(RVA = "0x16530F0", Offset = "0x16530F0", VA = "0x16530F0")]
		public TerrainOffset()
		{
		}
	}
	[Token(Token = "0x20002B7")]
	public class BipedIKvsAnimatorIK : MonoBehaviour
	{
		[Token(Token = "0x4000C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0xA8329C", Offset = "0xA8329C")]
		public Animator animator;

		[Token(Token = "0x4000C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BipedIK bipedIK;

		[Token(Token = "0x4000C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0xA832D4", Offset = "0xA832D4")]
		public Transform lookAtTargetBiped;

		[Token(Token = "0x4000C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform lookAtTargetAnimator;

		[Token(Token = "0x4000C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA8330C", Offset = "0xA8330C")]
		public float lookAtWeight;

		[Token(Token = "0x4000C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA83324", Offset = "0xA83324")]
		public float lookAtBodyWeight;

		[Token(Token = "0x4000C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA8333C", Offset = "0xA8333C")]
		public float lookAtHeadWeight;

		[Token(Token = "0x4000C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA83354", Offset = "0xA83354")]
		public float lookAtEyesWeight;

		[Token(Token = "0x4000C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA8336C", Offset = "0xA8336C")]
		public float lookAtClampWeight;

		[Token(Token = "0x4000C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA83384", Offset = "0xA83384")]
		public float lookAtClampWeightHead;

		[Token(Token = "0x4000C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA8339C", Offset = "0xA8339C")]
		public float lookAtClampWeightEyes;

		[Token(Token = "0x4000C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0xA833B4", Offset = "0xA833B4")]
		public Transform footTargetBiped;

		[Token(Token = "0x4000C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform footTargetAnimator;

		[Token(Token = "0x4000C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA833EC", Offset = "0xA833EC")]
		public float footPositionWeight;

		[Token(Token = "0x4000C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA83404", Offset = "0xA83404")]
		public float footRotationWeight;

		[Token(Token = "0x4000C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "LargeHeader", RVA = "0xA8341C", Offset = "0xA8341C")]
		public Transform handTargetBiped;

		[Token(Token = "0x4000C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform handTargetAnimator;

		[Token(Token = "0x4000C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA83454", Offset = "0xA83454")]
		public float handPositionWeight;

		[Token(Token = "0x4000C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA8346C", Offset = "0xA8346C")]
		public float handRotationWeight;

		[Token(Token = "0x6001302")]
		[Address(RVA = "0x2318B1C", Offset = "0x2318B1C", VA = "0x2318B1C")]
		private void OnAnimatorIK(int layer)
		{
		}

		[Token(Token = "0x6001303")]
		[Address(RVA = "0x2318F24", Offset = "0x2318F24", VA = "0x2318F24")]
		public BipedIKvsAnimatorIK()
		{
		}
	}
	[Token(Token = "0x20002B8")]
	public class MechSpider : MonoBehaviour
	{
		[Token(Token = "0x4000C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LayerMask raycastLayers;

		[Token(Token = "0x4000C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float scale;

		[Token(Token = "0x4000C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform body;

		[Token(Token = "0x4000C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MechSpiderLeg[] legs;

		[Token(Token = "0x4000C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float legRotationWeight;

		[Token(Token = "0x4000C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float rootPositionSpeed;

		[Token(Token = "0x4000C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float rootRotationSpeed;

		[Token(Token = "0x4000C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float breatheSpeed;

		[Token(Token = "0x4000C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float breatheMagnitude;

		[Token(Token = "0x4000C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float height;

		[Token(Token = "0x4000C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float minHeight;

		[Token(Token = "0x4000C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float raycastHeight;

		[Token(Token = "0x4000C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float raycastDistance;

		[Token(Token = "0x4000C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA83484", Offset = "0xA83484")]
		private Vector3 <velocity>k__BackingField;

		[Token(Token = "0x4000C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 defaultBodyLocalPosition;

		[Token(Token = "0x4000C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float sine;

		[Token(Token = "0x4000C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private RaycastHit rootHit;

		[Token(Token = "0x1700012D")]
		public Vector3 velocity
		{
			[Token(Token = "0x6001304")]
			[Address(RVA = "0x22F5304", Offset = "0x22F5304", VA = "0x22F5304")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8C3CC", Offset = "0xA8C3CC")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001305")]
			[Address(RVA = "0x22F5310", Offset = "0x22F5310", VA = "0x22F5310")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8C3DC", Offset = "0xA8C3DC")]
			private set
			{
			}
		}

		[Token(Token = "0x6001306")]
		[Address(RVA = "0x22F531C", Offset = "0x22F531C", VA = "0x22F531C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001307")]
		[Address(RVA = "0x22F5358", Offset = "0x22F5358", VA = "0x22F5358")]
		private void Update()
		{
		}

		[Token(Token = "0x6001308")]
		[Address(RVA = "0x22F5BCC", Offset = "0x22F5BCC", VA = "0x22F5BCC")]
		private Vector3 GetLegCentroid()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001309")]
		[Address(RVA = "0x22F597C", Offset = "0x22F597C", VA = "0x22F597C")]
		private Vector3 GetLegsPlaneNormal()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600130A")]
		[Address(RVA = "0x22F5CC8", Offset = "0x22F5CC8", VA = "0x22F5CC8")]
		public MechSpider()
		{
		}
	}
	[Token(Token = "0x20002B9")]
	public class MechSpiderController : MonoBehaviour
	{
		[Token(Token = "0x4000C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MechSpider mechSpider;

		[Token(Token = "0x4000C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform cameraTransform;

		[Token(Token = "0x4000C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float speed;

		[Token(Token = "0x4000C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float turnSpeed;

		[Token(Token = "0x1700012E")]
		public Vector3 inputVector
		{
			[Token(Token = "0x600130B")]
			[Address(RVA = "0x22F5CF4", Offset = "0x22F5CF4", VA = "0x22F5CF4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x600130C")]
		[Address(RVA = "0x22F5D78", Offset = "0x22F5D78", VA = "0x22F5D78")]
		private void Update()
		{
		}

		[Token(Token = "0x600130D")]
		[Address(RVA = "0x22F5F9C", Offset = "0x22F5F9C", VA = "0x22F5F9C")]
		public MechSpiderController()
		{
		}
	}
	[Token(Token = "0x20002BA")]
	public class MechSpiderLeg : MonoBehaviour
	{
		[Token(Token = "0x20003CB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E9CC", Offset = "0xA7E9CC")]
		private sealed class <Step>d__33 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40011A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MechSpiderLeg <>4__this;

			[Token(Token = "0x40011A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 stepStartPosition;

			[Token(Token = "0x40011A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Vector3 targetPosition;

			[Token(Token = "0x170001D3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001819")]
				[Address(RVA = "0x1EA83B0", Offset = "0x1EA83B0", VA = "0x1EA83B0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600181B")]
				[Address(RVA = "0x1EA83F8", Offset = "0x1EA83F8", VA = "0x1EA83F8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001816")]
			[Address(RVA = "0x1EA80B4", Offset = "0x1EA80B4", VA = "0x1EA80B4")]
			[DebuggerHidden]
			public <Step>d__33(int <>1__state)
			{
			}

			[Token(Token = "0x6001817")]
			[Address(RVA = "0x1EA80E0", Offset = "0x1EA80E0", VA = "0x1EA80E0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001818")]
			[Address(RVA = "0x1EA80E4", Offset = "0x1EA80E4", VA = "0x1EA80E4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600181A")]
			[Address(RVA = "0x1EA83B8", Offset = "0x1EA83B8", VA = "0x1EA83B8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MechSpider mechSpider;

		[Token(Token = "0x4000C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MechSpiderLeg unSync;

		[Token(Token = "0x4000C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 offset;

		[Token(Token = "0x4000C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float minDelay;

		[Token(Token = "0x4000C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float maxOffset;

		[Token(Token = "0x4000C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float stepSpeed;

		[Token(Token = "0x4000C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float footHeight;

		[Token(Token = "0x4000C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float velocityPrediction;

		[Token(Token = "0x4000C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float raycastFocus;

		[Token(Token = "0x4000C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve yOffset;

		[Token(Token = "0x4000C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform foot;

		[Token(Token = "0x4000C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 footUpAxis;

		[Token(Token = "0x4000C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float footRotationSpeed;

		[Token(Token = "0x4000C9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public ParticleSystem sand;

		[Token(Token = "0x4000C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private IK ik;

		[Token(Token = "0x4000C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float stepProgress;

		[Token(Token = "0x4000CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float lastStepTime;

		[Token(Token = "0x4000CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 defaultPosition;

		[Token(Token = "0x4000CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private RaycastHit hit;

		[Token(Token = "0x4000CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Quaternion lastFootLocalRotation;

		[Token(Token = "0x4000CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Vector3 smoothHitNormal;

		[Token(Token = "0x4000CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private Vector3 lastStepPosition;

		[Token(Token = "0x1700012F")]
		public bool isStepping
		{
			[Token(Token = "0x600130E")]
			[Address(RVA = "0x22F5FB0", Offset = "0x22F5FB0", VA = "0x22F5FB0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000130")]
		public Vector3 position
		{
			[Token(Token = "0x600130F")]
			[Address(RVA = "0x22F5C94", Offset = "0x22F5C94", VA = "0x22F5C94")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001310")]
			[Address(RVA = "0x22F5FC4", Offset = "0x22F5FC4", VA = "0x22F5FC4")]
			set
			{
			}
		}

		[Token(Token = "0x6001311")]
		[Address(RVA = "0x22F6014", Offset = "0x22F6014", VA = "0x22F6014")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001312")]
		[Address(RVA = "0x22F6240", Offset = "0x22F6240", VA = "0x22F6240")]
		private void AfterIK()
		{
		}

		[Token(Token = "0x6001313")]
		[Address(RVA = "0x22F63DC", Offset = "0x22F63DC", VA = "0x22F63DC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001314")]
		[Address(RVA = "0x22F6610", Offset = "0x22F6610", VA = "0x22F6610")]
		private Vector3 GetStepTarget(out bool stepFound, float focus, float distance)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001315")]
		[Address(RVA = "0x22F6884", Offset = "0x22F6884", VA = "0x22F6884")]
		private void UpdatePosition(float distance)
		{
		}

		[Token(Token = "0x6001316")]
		[Address(RVA = "0x22F69FC", Offset = "0x22F69FC", VA = "0x22F69FC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001317")]
		[Address(RVA = "0x22F655C", Offset = "0x22F655C", VA = "0x22F655C")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xA8C3EC", Offset = "0xA8C3EC")]
		private IEnumerator Step(Vector3 stepStartPosition, Vector3 targetPosition)
		{
			return null;
		}

		[Token(Token = "0x6001318")]
		[Address(RVA = "0x22F6BF8", Offset = "0x22F6BF8", VA = "0x22F6BF8")]
		public MechSpiderLeg()
		{
		}
	}
	[Token(Token = "0x20002BB")]
	public class MechSpiderParticles : MonoBehaviour
	{
		[Token(Token = "0x4000CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MechSpiderController mechSpiderController;

		[Token(Token = "0x4000CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ParticleSystem particles;

		[Token(Token = "0x6001319")]
		[Address(RVA = "0x22F6C5C", Offset = "0x22F6C5C", VA = "0x22F6C5C")]
		private void Start()
		{
		}

		[Token(Token = "0x600131A")]
		[Address(RVA = "0x22F6D2C", Offset = "0x22F6D2C", VA = "0x22F6D2C")]
		private void Update()
		{
		}

		[Token(Token = "0x600131B")]
		[Address(RVA = "0x22F6F80", Offset = "0x22F6F80", VA = "0x22F6F80")]
		public MechSpiderParticles()
		{
		}
	}
	[Token(Token = "0x20002BC")]
	public class AnimationWarping : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20003CC")]
		public struct Warp
		{
			[Token(Token = "0x40011A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8900C", Offset = "0xA8900C")]
			public int animationLayer;

			[Token(Token = "0x40011AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA89044", Offset = "0xA89044")]
			public string animationState;

			[Token(Token = "0x40011AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8907C", Offset = "0xA8907C")]
			public AnimationCurve weightCurve;

			[Token(Token = "0x40011AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA890B4", Offset = "0xA890B4")]
			public Transform warpFrom;

			[Token(Token = "0x40011AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA890EC", Offset = "0xA890EC")]
			public Transform warpTo;

			[Token(Token = "0x40011AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA89124", Offset = "0xA89124")]
			public FullBodyBipedEffector effector;
		}

		[Serializable]
		[Token(Token = "0x20003CD")]
		public enum EffectorMode
		{
			[Token(Token = "0x40011B0")]
			PositionOffset,
			[Token(Token = "0x40011B1")]
			Position
		}

		[Token(Token = "0x4000CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA83494", Offset = "0xA83494")]
		public Animator animator;

		[Token(Token = "0x4000CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA834CC", Offset = "0xA834CC")]
		public EffectorMode effectorMode;

		[Token(Token = "0x4000CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "SpaceAttribute", RVA = "0xA83504", Offset = "0xA83504")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA83504", Offset = "0xA83504")]
		public Warp[] warps;

		[Token(Token = "0x4000CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private EffectorMode lastMode;

		[Token(Token = "0x600131C")]
		[Address(RVA = "0x2311390", Offset = "0x2311390", VA = "0x2311390", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600131D")]
		[Address(RVA = "0x23113BC", Offset = "0x23113BC", VA = "0x23113BC")]
		public float GetWarpWeight(int warpIndex)
		{
			return default(float);
		}

		[Token(Token = "0x600131E")]
		[Address(RVA = "0x23115E4", Offset = "0x23115E4", VA = "0x23115E4", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x600131F")]
		[Address(RVA = "0x23118A8", Offset = "0x23118A8", VA = "0x23118A8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001320")]
		[Address(RVA = "0x2311948", Offset = "0x2311948", VA = "0x2311948")]
		public AnimationWarping()
		{
		}
	}
	[Token(Token = "0x20002BD")]
	public class AnimatorController3rdPerson : MonoBehaviour
	{
		[Token(Token = "0x4000CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rotateSpeed;

		[Token(Token = "0x4000CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float blendSpeed;

		[Token(Token = "0x4000CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float maxAngle;

		[Token(Token = "0x4000CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float moveSpeed;

		[Token(Token = "0x4000CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float rootMotionWeight;

		[Token(Token = "0x4000CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Animator animator;

		[Token(Token = "0x4000CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Vector3 moveBlend;

		[Token(Token = "0x4000CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected Vector3 moveInput;

		[Token(Token = "0x4000CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Vector3 velocity;

		[Token(Token = "0x6001321")]
		[Address(RVA = "0x2311950", Offset = "0x2311950", VA = "0x2311950", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6001322")]
		[Address(RVA = "0x23119AC", Offset = "0x23119AC", VA = "0x23119AC")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x6001323")]
		[Address(RVA = "0x2311B48", Offset = "0x2311B48", VA = "0x2311B48", Slot = "5")]
		public virtual void Move(Vector3 moveInput, bool isMoving, Vector3 faceDirection, Vector3 aimTarget)
		{
		}

		[Token(Token = "0x6001324")]
		[Address(RVA = "0x2311D50", Offset = "0x2311D50", VA = "0x2311D50")]
		public AnimatorController3rdPerson()
		{
		}
	}
	[Token(Token = "0x20002BE")]
	public class AnimatorController3rdPersonIK : AnimatorController3rdPerson
	{
		[Token(Token = "0x4000CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA83554", Offset = "0xA83554")]
		public float headLookWeight;

		[Token(Token = "0x4000CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 gunHoldOffset;

		[Token(Token = "0x4000CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Vector3 leftHandOffset;

		[Token(Token = "0x4000CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Recoil recoil;

		[Token(Token = "0x4000CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private AimIK aim;

		[Token(Token = "0x4000CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x4000CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 headLookAxis;

		[Token(Token = "0x4000CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Vector3 leftHandPosRelToRightHand;

		[Token(Token = "0x4000CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Quaternion leftHandRotRelToRightHand;

		[Token(Token = "0x4000CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 aimTarget;

		[Token(Token = "0x4000CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Quaternion rightHandRotation;

		[Token(Token = "0x6001325")]
		[Address(RVA = "0x2311D64", Offset = "0x2311D64", VA = "0x2311D64", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001326")]
		[Address(RVA = "0x2311F30", Offset = "0x2311F30", VA = "0x2311F30", Slot = "5")]
		public override void Move(Vector3 moveInput, bool isMoving, Vector3 faceDirection, Vector3 aimTarget)
		{
		}

		[Token(Token = "0x6001327")]
		[Address(RVA = "0x2311FAC", Offset = "0x2311FAC", VA = "0x2311FAC")]
		private void Read()
		{
		}

		[Token(Token = "0x6001328")]
		[Address(RVA = "0x23120A0", Offset = "0x23120A0", VA = "0x23120A0")]
		private void AimIK()
		{
		}

		[Token(Token = "0x6001329")]
		[Address(RVA = "0x23120E8", Offset = "0x23120E8", VA = "0x23120E8")]
		private void FBBIK()
		{
		}

		[Token(Token = "0x600132A")]
		[Address(RVA = "0x23124D4", Offset = "0x23124D4", VA = "0x23124D4")]
		private void OnPreRead()
		{
		}

		[Token(Token = "0x600132B")]
		[Address(RVA = "0x231235C", Offset = "0x231235C", VA = "0x231235C")]
		private void HeadLookAt(Vector3 lookAtTarget)
		{
		}

		[Token(Token = "0x600132C")]
		[Address(RVA = "0x2312730", Offset = "0x2312730", VA = "0x2312730")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600132D")]
		[Address(RVA = "0x2312860", Offset = "0x2312860", VA = "0x2312860")]
		public AnimatorController3rdPersonIK()
		{
		}
	}
	[Token(Token = "0x20002BF")]
	public class CharacterAnimationThirdPersonIK : CharacterAnimationThirdPerson
	{
		[Token(Token = "0x4000CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x600132E")]
		[Address(RVA = "0x16951DC", Offset = "0x16951DC", VA = "0x16951DC", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600132F")]
		[Address(RVA = "0x1695244", Offset = "0x1695244", VA = "0x1695244", Slot = "7")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x6001330")]
		[Address(RVA = "0x1695478", Offset = "0x1695478", VA = "0x1695478")]
		private void RotateEffector(IKEffector effector, Quaternion rotation, float mlp)
		{
		}

		[Token(Token = "0x6001331")]
		[Address(RVA = "0x169556C", Offset = "0x169556C", VA = "0x169556C")]
		public CharacterAnimationThirdPersonIK()
		{
		}
	}
	[Token(Token = "0x20002C0")]
	public class CharacterController3rdPerson : MonoBehaviour
	{
		[Token(Token = "0x4000CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public CameraController cam;

		[Token(Token = "0x4000CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AnimatorController3rdPerson animatorController;

		[Token(Token = "0x17000131")]
		private static Vector3 inputVector
		{
			[Token(Token = "0x6001334")]
			[Address(RVA = "0x1695FA8", Offset = "0x1695FA8", VA = "0x1695FA8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000132")]
		private static Vector3 inputVectorRaw
		{
			[Token(Token = "0x6001335")]
			[Address(RVA = "0x169602C", Offset = "0x169602C", VA = "0x169602C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6001332")]
		[Address(RVA = "0x1695DAC", Offset = "0x1695DAC", VA = "0x1695DAC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001333")]
		[Address(RVA = "0x1695E20", Offset = "0x1695E20", VA = "0x1695E20")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001336")]
		[Address(RVA = "0x16960B0", Offset = "0x16960B0", VA = "0x16960B0")]
		public CharacterController3rdPerson()
		{
		}
	}
	[Token(Token = "0x20002C1")]
	public class EffectorOffset : OffsetModifier
	{
		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA8356C", Offset = "0xA8356C")]
		public float handsMaintainRelativePositionWeight;

		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 bodyOffset;

		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 leftShoulderOffset;

		[Token(Token = "0x4000CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 rightShoulderOffset;

		[Token(Token = "0x4000CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Vector3 leftThighOffset;

		[Token(Token = "0x4000CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 rightThighOffset;

		[Token(Token = "0x4000CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Vector3 leftHandOffset;

		[Token(Token = "0x4000CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Vector3 rightHandOffset;

		[Token(Token = "0x4000CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Vector3 leftFootOffset;

		[Token(Token = "0x4000CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Vector3 rightFootOffset;

		[Token(Token = "0x6001337")]
		[Address(RVA = "0x16AB930", Offset = "0x16AB930", VA = "0x16AB930", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6001338")]
		[Address(RVA = "0x16ABD90", Offset = "0x16ABD90", VA = "0x16ABD90")]
		public EffectorOffset()
		{
		}
	}
	[Token(Token = "0x20002C2")]
	public class ExplosionDemo : MonoBehaviour
	{
		[Token(Token = "0x4000CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SimpleLocomotion character;

		[Token(Token = "0x4000CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float forceMlp;

		[Token(Token = "0x4000CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float upForce;

		[Token(Token = "0x4000CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float weightFalloffSpeed;

		[Token(Token = "0x4000CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve weightFalloff;

		[Token(Token = "0x4000CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve explosionForceByDistance;

		[Token(Token = "0x4000CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationCurve scale;

		[Token(Token = "0x4000CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float weight;

		[Token(Token = "0x4000CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 defaultScale;

		[Token(Token = "0x4000CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody r;

		[Token(Token = "0x4000CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x6001339")]
		[Address(RVA = "0x27614F4", Offset = "0x27614F4", VA = "0x27614F4")]
		private void Start()
		{
		}

		[Token(Token = "0x600133A")]
		[Address(RVA = "0x27615B0", Offset = "0x27615B0", VA = "0x27615B0")]
		private void Update()
		{
		}

		[Token(Token = "0x600133B")]
		[Address(RVA = "0x2761934", Offset = "0x2761934", VA = "0x2761934")]
		private void SetEffectorWeights(float w)
		{
		}

		[Token(Token = "0x600133C")]
		[Address(RVA = "0x27619E0", Offset = "0x27619E0", VA = "0x27619E0")]
		public ExplosionDemo()
		{
		}
	}
	[Token(Token = "0x20002C3")]
	public class FBBIKSettings : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003CE")]
		public class Limb
		{
			[Token(Token = "0x40011B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FBIKChain.Smoothing reachSmoothing;

			[Token(Token = "0x40011B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float maintainRelativePositionWeight;

			[Token(Token = "0x40011B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float mappingWeight;

			[Token(Token = "0x600181C")]
			[Address(RVA = "0x1E32730", Offset = "0x1E32730", VA = "0x1E32730")]
			public void Apply(FullBodyBipedChain chain, IKSolverFullBodyBiped solver)
			{
			}

			[Token(Token = "0x600181D")]
			[Address(RVA = "0x1E327B4", Offset = "0x1E327B4", VA = "0x1E327B4")]
			public Limb()
			{
			}
		}

		[Token(Token = "0x4000CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool disableAfterStart;

		[Token(Token = "0x4000CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Limb leftArm;

		[Token(Token = "0x4000CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Limb rightArm;

		[Token(Token = "0x4000CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Limb leftLeg;

		[Token(Token = "0x4000CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Limb rightLeg;

		[Token(Token = "0x4000CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float rootPin;

		[Token(Token = "0x4000CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool bodyEffectChildNodes;

		[Token(Token = "0x600133D")]
		[Address(RVA = "0x2765538", Offset = "0x2765538", VA = "0x2765538")]
		public void UpdateSettings()
		{
		}

		[Token(Token = "0x600133E")]
		[Address(RVA = "0x2765690", Offset = "0x2765690", VA = "0x2765690")]
		private void Start()
		{
		}

		[Token(Token = "0x600133F")]
		[Address(RVA = "0x2765734", Offset = "0x2765734", VA = "0x2765734")]
		private void Update()
		{
		}

		[Token(Token = "0x6001340")]
		[Address(RVA = "0x2765738", Offset = "0x2765738", VA = "0x2765738")]
		public FBBIKSettings()
		{
		}
	}
	[Token(Token = "0x20002C4")]
	public class FBIKBendGoal : MonoBehaviour
	{
		[Token(Token = "0x4000CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FullBodyBipedChain chain;

		[Token(Token = "0x4000CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float weight;

		[Token(Token = "0x6001341")]
		[Address(RVA = "0x2765748", Offset = "0x2765748", VA = "0x2765748")]
		private void Start()
		{
		}

		[Token(Token = "0x6001342")]
		[Address(RVA = "0x27657BC", Offset = "0x27657BC", VA = "0x27657BC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001343")]
		[Address(RVA = "0x276589C", Offset = "0x276589C", VA = "0x276589C")]
		public FBIKBendGoal()
		{
		}
	}
	[Token(Token = "0x20002C5")]
	public class FBIKBoxing : MonoBehaviour
	{
		[Token(Token = "0x4000CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA83584", Offset = "0xA83584")]
		public Transform target;

		[Token(Token = "0x4000CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA835BC", Offset = "0xA835BC")]
		public Transform pin;

		[Token(Token = "0x4000CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA835F4", Offset = "0xA835F4")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8362C", Offset = "0xA8362C")]
		public AimIK aim;

		[Token(Token = "0x4000CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA83664", Offset = "0xA83664")]
		public float weight;

		[Token(Token = "0x4000CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8369C", Offset = "0xA8369C")]
		public FullBodyBipedEffector effector;

		[Token(Token = "0x4000CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA836D4", Offset = "0xA836D4")]
		public AnimationCurve aimWeight;

		[Token(Token = "0x4000CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Animator animator;

		[Token(Token = "0x6001344")]
		[Address(RVA = "0x27658A4", Offset = "0x27658A4", VA = "0x27658A4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001345")]
		[Address(RVA = "0x2765900", Offset = "0x2765900", VA = "0x2765900")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001346")]
		[Address(RVA = "0x2765AA4", Offset = "0x2765AA4", VA = "0x2765AA4")]
		public FBIKBoxing()
		{
		}
	}
	[Token(Token = "0x20002C6")]
	public class FBIKHandsOnProp : MonoBehaviour
	{
		[Token(Token = "0x4000CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool leftHanded;

		[Token(Token = "0x6001347")]
		[Address(RVA = "0x2767C2C", Offset = "0x2767C2C", VA = "0x2767C2C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001348")]
		[Address(RVA = "0x2767D04", Offset = "0x2767D04", VA = "0x2767D04")]
		private void OnPreRead()
		{
		}

		[Token(Token = "0x6001349")]
		[Address(RVA = "0x2767D94", Offset = "0x2767D94", VA = "0x2767D94")]
		private void HandsOnProp(IKEffector mainHand, IKEffector otherHand)
		{
		}

		[Token(Token = "0x600134A")]
		[Address(RVA = "0x276816C", Offset = "0x276816C", VA = "0x276816C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600134B")]
		[Address(RVA = "0x276829C", Offset = "0x276829C", VA = "0x276829C")]
		public FBIKHandsOnProp()
		{
		}
	}
	[Token(Token = "0x20002C7")]
	public class FPSAiming : MonoBehaviour
	{
		[Token(Token = "0x4000CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA8370C", Offset = "0xA8370C")]
		public float aimWeight;

		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA83724", Offset = "0xA83724")]
		public float sightWeight;

		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA8373C", Offset = "0xA8373C")]
		public float maxAngle;

		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 aimOffset;

		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool animatePhysics;

		[Token(Token = "0x4000CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform gun;

		[Token(Token = "0x4000CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform gunTarget;

		[Token(Token = "0x4000CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AimIK gunAim;

		[Token(Token = "0x4000CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AimIK headAim;

		[Token(Token = "0x4000CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public CameraControllerFPS cam;

		[Token(Token = "0x4000CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Recoil recoil;

		[Token(Token = "0x4000CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA83758", Offset = "0xA83758")]
		public float cameraRecoilWeight;

		[Token(Token = "0x4000CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 gunTargetDefaultLocalPosition;

		[Token(Token = "0x4000CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 gunTargetDefaultLocalRotation;

		[Token(Token = "0x4000CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 camDefaultLocalPosition;

		[Token(Token = "0x4000CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 camRelativeToGunTarget;

		[Token(Token = "0x4000CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool updateFrame;

		[Token(Token = "0x600134C")]
		[Address(RVA = "0x2768468", Offset = "0x2768468", VA = "0x2768468")]
		private void Start()
		{
		}

		[Token(Token = "0x600134D")]
		[Address(RVA = "0x276862C", Offset = "0x276862C", VA = "0x276862C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600134E")]
		[Address(RVA = "0x2768638", Offset = "0x2768638", VA = "0x2768638")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600134F")]
		[Address(RVA = "0x27688B8", Offset = "0x27688B8", VA = "0x27688B8")]
		private void Aiming()
		{
		}

		[Token(Token = "0x6001350")]
		[Address(RVA = "0x2768B8C", Offset = "0x2768B8C", VA = "0x2768B8C")]
		private void LookDownTheSight()
		{
		}

		[Token(Token = "0x6001351")]
		[Address(RVA = "0x2768700", Offset = "0x2768700", VA = "0x2768700")]
		private void RotateCharacter()
		{
		}

		[Token(Token = "0x6001352")]
		[Address(RVA = "0x2769480", Offset = "0x2769480", VA = "0x2769480")]
		public FPSAiming()
		{
		}
	}
	[Token(Token = "0x20002C8")]
	public class FPSCharacter : MonoBehaviour
	{
		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA83770", Offset = "0xA83770")]
		public float walkSpeed;

		[Token(Token = "0x4000D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float sVel;

		[Token(Token = "0x4000D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x4000D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private FPSAiming FPSAiming;

		[Token(Token = "0x6001353")]
		[Address(RVA = "0x27694A0", Offset = "0x27694A0", VA = "0x27694A0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001354")]
		[Address(RVA = "0x276952C", Offset = "0x276952C", VA = "0x276952C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001355")]
		[Address(RVA = "0x2769618", Offset = "0x2769618", VA = "0x2769618")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6001356")]
		[Address(RVA = "0x27696D0", Offset = "0x27696D0", VA = "0x27696D0")]
		public FPSCharacter()
		{
		}
	}
	[Token(Token = "0x20002C9")]
	public class HitReactionTrigger : MonoBehaviour
	{
		[Token(Token = "0x4000D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HitReaction hitReaction;

		[Token(Token = "0x4000D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float hitForce;

		[Token(Token = "0x4000D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string colliderName;

		[Token(Token = "0x6001357")]
		[Address(RVA = "0x28AC3A8", Offset = "0x28AC3A8", VA = "0x28AC3A8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001358")]
		[Address(RVA = "0x28AC50C", Offset = "0x28AC50C", VA = "0x28AC50C")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6001359")]
		[Address(RVA = "0x28AC6F0", Offset = "0x28AC6F0", VA = "0x28AC6F0")]
		public HitReactionTrigger()
		{
		}
	}
	[Token(Token = "0x20002CA")]
	public class HoldingHands : MonoBehaviour
	{
		[Token(Token = "0x4000D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK rightHandChar;

		[Token(Token = "0x4000D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FullBodyBipedIK leftHandChar;

		[Token(Token = "0x4000D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform rightHandTarget;

		[Token(Token = "0x4000D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform leftHandTarget;

		[Token(Token = "0x4000D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float crossFade;

		[Token(Token = "0x4000D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float speed;

		[Token(Token = "0x4000D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Quaternion rightHandRotation;

		[Token(Token = "0x4000D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion leftHandRotation;

		[Token(Token = "0x600135A")]
		[Address(RVA = "0x28ACDA0", Offset = "0x28ACDA0", VA = "0x28ACDA0")]
		private void Start()
		{
		}

		[Token(Token = "0x600135B")]
		[Address(RVA = "0x28ACEE8", Offset = "0x28ACEE8", VA = "0x28ACEE8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600135C")]
		[Address(RVA = "0x28AD224", Offset = "0x28AD224", VA = "0x28AD224")]
		public HoldingHands()
		{
		}
	}
	[Token(Token = "0x20002CB")]
	public class InteractionC2CDemo : MonoBehaviour
	{
		[Token(Token = "0x4000D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionSystem character1;

		[Token(Token = "0x4000D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractionSystem character2;

		[Token(Token = "0x4000D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractionObject handShake;

		[Token(Token = "0x600135D")]
		[Address(RVA = "0x22E738C", Offset = "0x22E738C", VA = "0x22E738C")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600135E")]
		[Address(RVA = "0x22E75D8", Offset = "0x22E75D8", VA = "0x22E75D8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600135F")]
		[Address(RVA = "0x22E76E4", Offset = "0x22E76E4", VA = "0x22E76E4")]
		public InteractionC2CDemo()
		{
		}
	}
	[Token(Token = "0x20002CC")]
	public class InteractionDemo : MonoBehaviour
	{
		[Token(Token = "0x4000D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x4000D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool interrupt;

		[Token(Token = "0x4000D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractionObject ball;

		[Token(Token = "0x4000D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public InteractionObject benchMain;

		[Token(Token = "0x4000D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public InteractionObject benchHands;

		[Token(Token = "0x4000D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public InteractionObject button;

		[Token(Token = "0x4000D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public InteractionObject cigarette;

		[Token(Token = "0x4000D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public InteractionObject door;

		[Token(Token = "0x4000D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool isSitting;

		[Token(Token = "0x6001360")]
		[Address(RVA = "0x22E76EC", Offset = "0x22E76EC", VA = "0x22E76EC")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6001361")]
		[Address(RVA = "0x22E7F00", Offset = "0x22E7F00", VA = "0x22E7F00")]
		public InteractionDemo()
		{
		}
	}
	[Token(Token = "0x20002CD")]
	public class InteractionSystemTestGUI : MonoBehaviour
	{
		[Token(Token = "0x4000D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA83788", Offset = "0xA83788")]
		public InteractionObject interactionObject;

		[Token(Token = "0x4000D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA837C0", Offset = "0xA837C0")]
		public FullBodyBipedEffector[] effectors;

		[Token(Token = "0x4000D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private InteractionSystem interactionSystem;

		[Token(Token = "0x6001362")]
		[Address(RVA = "0x22EFD64", Offset = "0x22EFD64", VA = "0x22EFD64")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001363")]
		[Address(RVA = "0x22EFDC0", Offset = "0x22EFDC0", VA = "0x22EFDC0")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6001364")]
		[Address(RVA = "0x22F00F8", Offset = "0x22F00F8", VA = "0x22F00F8")]
		public InteractionSystemTestGUI()
		{
		}
	}
	[Token(Token = "0x20002CE")]
	public class KissingRig : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003CF")]
		public class Partner
		{
			[Token(Token = "0x40011B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FullBodyBipedIK ik;

			[Token(Token = "0x40011B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform mouth;

			[Token(Token = "0x40011B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform mouthTarget;

			[Token(Token = "0x40011B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Transform touchTargetLeftHand;

			[Token(Token = "0x40011B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Transform touchTargetRightHand;

			[Token(Token = "0x40011BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float bodyWeightHorizontal;

			[Token(Token = "0x40011BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float bodyWeightVertical;

			[Token(Token = "0x40011BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public float neckRotationWeight;

			[Token(Token = "0x40011BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public float headTiltAngle;

			[Token(Token = "0x40011BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Vector3 headTiltAxis;

			[Token(Token = "0x40011BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private Quaternion neckRotation;

			[Token(Token = "0x170001D5")]
			private Transform neck
			{
				[Token(Token = "0x6001820")]
				[Address(RVA = "0x1EA7878", Offset = "0x1EA7878", VA = "0x1EA7878")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600181E")]
			[Address(RVA = "0x1EA712C", Offset = "0x1EA712C", VA = "0x1EA712C")]
			public void Initiate()
			{
			}

			[Token(Token = "0x600181F")]
			[Address(RVA = "0x1EA714C", Offset = "0x1EA714C", VA = "0x1EA714C")]
			public void Update(float weight)
			{
			}

			[Token(Token = "0x6001821")]
			[Address(RVA = "0x1EA76E4", Offset = "0x1EA76E4", VA = "0x1EA76E4")]
			private void InverseTransformEffector(FullBodyBipedEffector effector, Transform target, Vector3 targetPosition, float weight)
			{
			}

			[Token(Token = "0x6001822")]
			[Address(RVA = "0x1EA78D0", Offset = "0x1EA78D0", VA = "0x1EA78D0")]
			public Partner()
			{
			}
		}

		[Token(Token = "0x4000D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Partner partner1;

		[Token(Token = "0x4000D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Partner partner2;

		[Token(Token = "0x4000D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float weight;

		[Token(Token = "0x4000D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int iterations;

		[Token(Token = "0x6001365")]
		[Address(RVA = "0x22F195C", Offset = "0x22F195C", VA = "0x22F195C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001366")]
		[Address(RVA = "0x22F1998", Offset = "0x22F1998", VA = "0x22F1998")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001367")]
		[Address(RVA = "0x22F1A00", Offset = "0x22F1A00", VA = "0x22F1A00")]
		public KissingRig()
		{
		}
	}
	[Token(Token = "0x20002CF")]
	public class MotionAbsorb : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20003D0")]
		public enum Mode
		{
			[Token(Token = "0x40011C1")]
			Position,
			[Token(Token = "0x40011C2")]
			PositionOffset
		}

		[Serializable]
		[Token(Token = "0x20003D1")]
		public class Absorber
		{
			[Token(Token = "0x40011C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8915C", Offset = "0xA8915C")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x40011C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA89194", Offset = "0xA89194")]
			public float weight;

			[Token(Token = "0x40011C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Vector3 position;

			[Token(Token = "0x40011C6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private Quaternion rotation;

			[Token(Token = "0x40011C7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private IKEffector e;

			[Token(Token = "0x6001823")]
			[Address(RVA = "0x1EA8AFC", Offset = "0x1EA8AFC", VA = "0x1EA8AFC")]
			public void SetToBone(IKSolverFullBodyBiped solver, Mode mode)
			{
			}

			[Token(Token = "0x6001824")]
			[Address(RVA = "0x1EA8BE4", Offset = "0x1EA8BE4", VA = "0x1EA8BE4")]
			public void UpdateEffectorWeights(float w)
			{
			}

			[Token(Token = "0x6001825")]
			[Address(RVA = "0x1EA8C20", Offset = "0x1EA8C20", VA = "0x1EA8C20")]
			public void SetPosition(float w)
			{
			}

			[Token(Token = "0x6001826")]
			[Address(RVA = "0x1EA8CB8", Offset = "0x1EA8CB8", VA = "0x1EA8CB8")]
			public void SetRotation(float w)
			{
			}

			[Token(Token = "0x6001827")]
			[Address(RVA = "0x1EA8D2C", Offset = "0x1EA8D2C", VA = "0x1EA8D2C")]
			public Absorber()
			{
			}
		}

		[Token(Token = "0x4000D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA837F8", Offset = "0xA837F8")]
		public Mode mode;

		[Token(Token = "0x4000D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA83830", Offset = "0xA83830")]
		public Absorber[] absorbers;

		[Token(Token = "0x4000D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA83868", Offset = "0xA83868")]
		public AnimationCurve falloff;

		[Token(Token = "0x4000D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA838A0", Offset = "0xA838A0")]
		public float falloffSpeed;

		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float timer;

		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float w;

		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Mode initialMode;

		[Token(Token = "0x6001368")]
		[Address(RVA = "0x22F8550", Offset = "0x22F8550", VA = "0x22F8550", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001369")]
		[Address(RVA = "0x22F8640", Offset = "0x22F8640", VA = "0x22F8640")]
		private void OnCollisionEnter(Collision c)
		{
		}

		[Token(Token = "0x600136A")]
		[Address(RVA = "0x22F86D0", Offset = "0x22F86D0", VA = "0x22F86D0", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x600136B")]
		[Address(RVA = "0x22F87E4", Offset = "0x22F87E4", VA = "0x22F87E4")]
		private void AfterIK()
		{
		}

		[Token(Token = "0x600136C")]
		[Address(RVA = "0x22F8870", Offset = "0x22F8870", VA = "0x22F8870", Slot = "6")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x600136D")]
		[Address(RVA = "0x22F89AC", Offset = "0x22F89AC", VA = "0x22F89AC")]
		public MotionAbsorb()
		{
		}
	}
	[Token(Token = "0x20002D0")]
	public class MotionAbsorbCharacter : MonoBehaviour
	{
		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Animator animator;

		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MotionAbsorb motionAbsorb;

		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform cube;

		[Token(Token = "0x4000D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float cubeRandomPosition;

		[Token(Token = "0x4000D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve motionAbsorbWeight;

		[Token(Token = "0x4000D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 cubeDefaultPosition;

		[Token(Token = "0x4000D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private AnimatorStateInfo info;

		[Token(Token = "0x4000D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody cubeRigidbody;

		[Token(Token = "0x600136E")]
		[Address(RVA = "0x1091634", Offset = "0x1091634", VA = "0x1091634")]
		private void Start()
		{
		}

		[Token(Token = "0x600136F")]
		[Address(RVA = "0x10916B0", Offset = "0x10916B0", VA = "0x10916B0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001370")]
		[Address(RVA = "0x1091774", Offset = "0x1091774", VA = "0x1091774")]
		private void SwingStart()
		{
		}

		[Token(Token = "0x6001371")]
		[Address(RVA = "0x1091834", Offset = "0x1091834", VA = "0x1091834")]
		public MotionAbsorbCharacter()
		{
		}
	}
	[Token(Token = "0x20002D1")]
	public class OffsetEffector : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20003D2")]
		public class EffectorLink
		{
			[Token(Token = "0x40011C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FullBodyBipedEffector effectorType;

			[Token(Token = "0x40011C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float weightMultiplier;

			[Token(Token = "0x40011CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			public Vector3 localPosition;

			[Token(Token = "0x6001828")]
			[Address(RVA = "0x1EA8F90", Offset = "0x1EA8F90", VA = "0x1EA8F90")]
			public EffectorLink()
			{
			}
		}

		[Token(Token = "0x4000D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA838D8", Offset = "0xA838D8")]
		public Transform anchor;

		[Token(Token = "0x4000D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public EffectorLink[] effectorLinks;

		[Token(Token = "0x4000D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 posRelToAnchor;

		[Token(Token = "0x4000D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion rotRelToAnchor;

		[Token(Token = "0x6001372")]
		[Address(RVA = "0x10B56EC", Offset = "0x10B56EC", VA = "0x10B56EC", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6001373")]
		[Address(RVA = "0x10B5938", Offset = "0x10B5938", VA = "0x10B5938", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6001374")]
		[Address(RVA = "0x10B5AC4", Offset = "0x10B5AC4", VA = "0x10B5AC4")]
		public void Anchor()
		{
		}

		[Token(Token = "0x6001375")]
		[Address(RVA = "0x10B5BC4", Offset = "0x10B5BC4", VA = "0x10B5BC4")]
		public OffsetEffector()
		{
		}
	}
	[Token(Token = "0x20002D2")]
	public class PendulumExample : MonoBehaviour
	{
		[Token(Token = "0x4000D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA83910", Offset = "0xA83910")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA83910", Offset = "0xA83910")]
		public float weight;

		[Token(Token = "0x4000D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA83964", Offset = "0xA83964")]
		public float hangingDistanceMlp;

		[Token(Token = "0x4000D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA8399C", Offset = "0xA8399C")]
		[HideInInspector]
		public Vector3 rootTargetPosition;

		[Token(Token = "0x4000D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA839E8", Offset = "0xA839E8")]
		[HideInInspector]
		public Quaternion rootTargetRotation;

		[Token(Token = "0x4000D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform target;

		[Token(Token = "0x4000D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform leftHandTarget;

		[Token(Token = "0x4000D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform rightHandTarget;

		[Token(Token = "0x4000D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform leftFootTarget;

		[Token(Token = "0x4000D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform rightFootTarget;

		[Token(Token = "0x4000D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform pelvisTarget;

		[Token(Token = "0x4000D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform bodyTarget;

		[Token(Token = "0x4000D3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform headTarget;

		[Token(Token = "0x4000D40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Vector3 pelvisDownAxis;

		[Token(Token = "0x4000D41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x4000D42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Quaternion rootRelativeToPelvis;

		[Token(Token = "0x4000D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 pelvisToRoot;

		[Token(Token = "0x4000D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float lastWeight;

		[Token(Token = "0x6001376")]
		[Address(RVA = "0x10B9D08", Offset = "0x10B9D08", VA = "0x10B9D08")]
		private void Start()
		{
		}

		[Token(Token = "0x6001377")]
		[Address(RVA = "0x10B9FD8", Offset = "0x10B9FD8", VA = "0x10B9FD8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001378")]
		[Address(RVA = "0x10BA620", Offset = "0x10BA620", VA = "0x10BA620")]
		public PendulumExample()
		{
		}
	}
	[Token(Token = "0x20002D3")]
	public abstract class PickUp2Handed : MonoBehaviour
	{
		[Token(Token = "0x4000D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int GUIspace;

		[Token(Token = "0x4000D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x4000D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractionObject obj;

		[Token(Token = "0x4000D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform pivot;

		[Token(Token = "0x4000D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform holdPoint;

		[Token(Token = "0x4000D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float pickUpTime;

		[Token(Token = "0x4000D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float holdWeight;

		[Token(Token = "0x4000D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float holdWeightVel;

		[Token(Token = "0x4000D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 pickUpPosition;

		[Token(Token = "0x4000D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion pickUpRotation;

		[Token(Token = "0x17000133")]
		private bool holding
		{
			[Token(Token = "0x6001380")]
			[Address(RVA = "0x10BAC10", Offset = "0x10BAC10", VA = "0x10BAC10")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000134")]
		private bool holdingLeft
		{
			[Token(Token = "0x6001381")]
			[Address(RVA = "0x10BACFC", Offset = "0x10BACFC", VA = "0x10BACFC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000135")]
		private bool holdingRight
		{
			[Token(Token = "0x6001382")]
			[Address(RVA = "0x10BAC48", Offset = "0x10BAC48", VA = "0x10BAC48")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001379")]
		[Address(RVA = "0x10BA6F8", Offset = "0x10BA6F8", VA = "0x10BA6F8")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600137A")]
		protected abstract void RotatePivot();

		[Token(Token = "0x600137B")]
		[Address(RVA = "0x10BADB0", Offset = "0x10BADB0", VA = "0x10BADB0")]
		private void Start()
		{
		}

		[Token(Token = "0x600137C")]
		[Address(RVA = "0x10BAF68", Offset = "0x10BAF68", VA = "0x10BAF68")]
		private void OnPause(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x600137D")]
		[Address(RVA = "0x10BB0EC", Offset = "0x10BB0EC", VA = "0x10BB0EC")]
		private void OnStart(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x600137E")]
		[Address(RVA = "0x10BB1C8", Offset = "0x10BB1C8", VA = "0x10BB1C8")]
		private void OnDrop(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x600137F")]
		[Address(RVA = "0x10BB308", Offset = "0x10BB308", VA = "0x10BB308")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001383")]
		[Address(RVA = "0x10BB478", Offset = "0x10BB478", VA = "0x10BB478")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001384")]
		[Address(RVA = "0x10BB688", Offset = "0x10BB688", VA = "0x10BB688")]
		protected PickUp2Handed()
		{
		}
	}
	[Token(Token = "0x20002D4")]
	public class PickUpBox : PickUp2Handed
	{
		[Token(Token = "0x6001385")]
		[Address(RVA = "0x10BB69C", Offset = "0x10BB69C", VA = "0x10BB69C", Slot = "4")]
		protected override void RotatePivot()
		{
		}

		[Token(Token = "0x6001386")]
		[Address(RVA = "0x10BB900", Offset = "0x10BB900", VA = "0x10BB900")]
		public PickUpBox()
		{
		}
	}
	[Token(Token = "0x20002D5")]
	public class PickUpSphere : PickUp2Handed
	{
		[Token(Token = "0x6001387")]
		[Address(RVA = "0x10BB914", Offset = "0x10BB914", VA = "0x10BB914", Slot = "4")]
		protected override void RotatePivot()
		{
		}

		[Token(Token = "0x6001388")]
		[Address(RVA = "0x10BBA48", Offset = "0x10BBA48", VA = "0x10BBA48")]
		public PickUpSphere()
		{
		}
	}
	[Token(Token = "0x20002D6")]
	public class RagdollUtilityDemo : MonoBehaviour
	{
		[Token(Token = "0x4000D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RagdollUtility ragdollUtility;

		[Token(Token = "0x4000D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform root;

		[Token(Token = "0x4000D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Rigidbody pelvis;

		[Token(Token = "0x6001389")]
		[Address(RVA = "0x10BEFCC", Offset = "0x10BEFCC", VA = "0x10BEFCC")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600138A")]
		[Address(RVA = "0x10BF0AC", Offset = "0x10BF0AC", VA = "0x10BF0AC")]
		private void Update()
		{
		}

		[Token(Token = "0x600138B")]
		[Address(RVA = "0x10BF1C0", Offset = "0x10BF1C0", VA = "0x10BF1C0")]
		public RagdollUtilityDemo()
		{
		}
	}
	[Token(Token = "0x20002D7")]
	public class RecoilTest : MonoBehaviour
	{
		[Token(Token = "0x4000D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float magnitude;

		[Token(Token = "0x4000D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Recoil recoil;

		[Token(Token = "0x600138C")]
		[Address(RVA = "0x10C080C", Offset = "0x10C080C", VA = "0x10C080C")]
		private void Start()
		{
		}

		[Token(Token = "0x600138D")]
		[Address(RVA = "0x10C0868", Offset = "0x10C0868", VA = "0x10C0868")]
		private void Update()
		{
		}

		[Token(Token = "0x600138E")]
		[Address(RVA = "0x10C08C0", Offset = "0x10C08C0", VA = "0x10C08C0")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600138F")]
		[Address(RVA = "0x10C09A0", Offset = "0x10C09A0", VA = "0x10C09A0")]
		public RecoilTest()
		{
		}
	}
	[Token(Token = "0x20002D8")]
	public class ResetInteractionObject : MonoBehaviour
	{
		[Token(Token = "0x20003D3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E9DC", Offset = "0xA7E9DC")]
		private sealed class <ResetObject>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40011CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float resetTime;

			[Token(Token = "0x40011CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ResetInteractionObject <>4__this;

			[Token(Token = "0x170001D6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600182C")]
				[Address(RVA = "0x1EAB458", Offset = "0x1EAB458", VA = "0x1EAB458", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600182E")]
				[Address(RVA = "0x1EAB4A0", Offset = "0x1EAB4A0", VA = "0x1EAB4A0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001829")]
			[Address(RVA = "0x1EAB264", Offset = "0x1EAB264", VA = "0x1EAB264")]
			[DebuggerHidden]
			public <ResetObject>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x600182A")]
			[Address(RVA = "0x1EAB290", Offset = "0x1EAB290", VA = "0x1EAB290", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600182B")]
			[Address(RVA = "0x1EAB294", Offset = "0x1EAB294", VA = "0x1EAB294", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600182D")]
			[Address(RVA = "0x1EAB460", Offset = "0x1EAB460", VA = "0x1EAB460", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float resetDelay;

		[Token(Token = "0x4000D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Vector3 defaultPosition;

		[Token(Token = "0x4000D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Quaternion defaultRotation;

		[Token(Token = "0x4000D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform defaultParent;

		[Token(Token = "0x4000D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rigidbody r;

		[Token(Token = "0x6001390")]
		[Address(RVA = "0x10C1474", Offset = "0x10C1474", VA = "0x10C1474")]
		private void Start()
		{
		}

		[Token(Token = "0x6001391")]
		[Address(RVA = "0x10C153C", Offset = "0x10C153C", VA = "0x10C153C")]
		private void OnPickUp(Transform t)
		{
		}

		[Token(Token = "0x6001392")]
		[Address(RVA = "0x10C15A0", Offset = "0x10C15A0", VA = "0x10C15A0")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xA8C44C", Offset = "0xA8C44C")]
		private IEnumerator ResetObject(float resetTime)
		{
			return null;
		}

		[Token(Token = "0x6001393")]
		[Address(RVA = "0x10C1628", Offset = "0x10C1628", VA = "0x10C1628")]
		public ResetInteractionObject()
		{
		}
	}
	[Token(Token = "0x20002D9")]
	public class SoccerDemo : MonoBehaviour
	{
		[Token(Token = "0x20003D4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E9EC", Offset = "0xA7E9EC")]
		private sealed class <ResetDelayed>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40011D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SoccerDemo <>4__this;

			[Token(Token = "0x170001D8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001832")]
				[Address(RVA = "0x1EAD190", Offset = "0x1EAD190", VA = "0x1EAD190", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001D9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001834")]
				[Address(RVA = "0x1EAD1D8", Offset = "0x1EAD1D8", VA = "0x1EAD1D8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600182F")]
			[Address(RVA = "0x1EAD020", Offset = "0x1EAD020", VA = "0x1EAD020")]
			[DebuggerHidden]
			public <ResetDelayed>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6001830")]
			[Address(RVA = "0x1EAD04C", Offset = "0x1EAD04C", VA = "0x1EAD04C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001831")]
			[Address(RVA = "0x1EAD050", Offset = "0x1EAD050", VA = "0x1EAD050", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001833")]
			[Address(RVA = "0x1EAD198", Offset = "0x1EAD198", VA = "0x1EAD198", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Animator animator;

		[Token(Token = "0x4000D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 defaultPosition;

		[Token(Token = "0x4000D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion defaultRotation;

		[Token(Token = "0x6001394")]
		[Address(RVA = "0x1632230", Offset = "0x1632230", VA = "0x1632230")]
		private void Start()
		{
		}

		[Token(Token = "0x6001395")]
		[Address(RVA = "0x16322E8", Offset = "0x16322E8", VA = "0x16322E8")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xA8C4AC", Offset = "0xA8C4AC")]
		private IEnumerator ResetDelayed()
		{
			return null;
		}

		[Token(Token = "0x6001396")]
		[Address(RVA = "0x1632360", Offset = "0x1632360", VA = "0x1632360")]
		public SoccerDemo()
		{
		}
	}
	[Token(Token = "0x20002DA")]
	public class TouchWalls : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003D5")]
		public class EffectorLink
		{
			[Token(Token = "0x40011D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool enabled;

			[Token(Token = "0x40011D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public FullBodyBipedEffector effectorType;

			[Token(Token = "0x40011D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public InteractionObject interactionObject;

			[Token(Token = "0x40011D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform spherecastFrom;

			[Token(Token = "0x40011D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float spherecastRadius;

			[Token(Token = "0x40011D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float minDistance;

			[Token(Token = "0x40011D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float distanceMlp;

			[Token(Token = "0x40011D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public LayerMask touchLayers;

			[Token(Token = "0x40011DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float lerpSpeed;

			[Token(Token = "0x40011DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float minSwitchTime;

			[Token(Token = "0x40011DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public float releaseDistance;

			[Token(Token = "0x40011DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public bool sliding;

			[Token(Token = "0x40011DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Vector3 raycastDirectionLocal;

			[Token(Token = "0x40011DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private float raycastDistance;

			[Token(Token = "0x40011E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private bool inTouch;

			[Token(Token = "0x40011E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			private RaycastHit hit;

			[Token(Token = "0x40011E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			private Vector3 targetPosition;

			[Token(Token = "0x40011E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			private Quaternion targetRotation;

			[Token(Token = "0x40011E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			private bool initiated;

			[Token(Token = "0x40011E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			private float nextSwitchTime;

			[Token(Token = "0x40011E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			private float speedF;

			[Token(Token = "0x6001835")]
			[Address(RVA = "0x1EAD37C", Offset = "0x1EAD37C", VA = "0x1EAD37C")]
			public void Initiate(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x6001836")]
			[Address(RVA = "0x1EAD688", Offset = "0x1EAD688", VA = "0x1EAD688")]
			private bool FindWalls(Vector3 direction)
			{
				return default(bool);
			}

			[Token(Token = "0x6001837")]
			[Address(RVA = "0x1EAD774", Offset = "0x1EAD774", VA = "0x1EAD774")]
			public void Update(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x6001838")]
			[Address(RVA = "0x1EADC08", Offset = "0x1EADC08", VA = "0x1EADC08")]
			private void StopTouch(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x6001839")]
			[Address(RVA = "0x1EADCFC", Offset = "0x1EADCFC", VA = "0x1EADCFC")]
			private void OnInteractionStart(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
			{
			}

			[Token(Token = "0x600183A")]
			[Address(RVA = "0x1EADD94", Offset = "0x1EADD94", VA = "0x1EADD94")]
			private void OnInteractionResume(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
			{
			}

			[Token(Token = "0x600183B")]
			[Address(RVA = "0x1EADE28", Offset = "0x1EADE28", VA = "0x1EADE28")]
			private void OnInteractionStop(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
			{
			}

			[Token(Token = "0x600183C")]
			[Address(RVA = "0x1EADEBC", Offset = "0x1EADEBC", VA = "0x1EADEBC")]
			public void Destroy(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x600183D")]
			[Address(RVA = "0x1EAE0AC", Offset = "0x1EAE0AC", VA = "0x1EAE0AC")]
			public EffectorLink()
			{
			}
		}

		[Token(Token = "0x4000D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x4000D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EffectorLink[] effectorLinks;

		[Token(Token = "0x6001397")]
		[Address(RVA = "0x1A67114", Offset = "0x1A67114", VA = "0x1A67114")]
		private void Start()
		{
		}

		[Token(Token = "0x6001398")]
		[Address(RVA = "0x1A67190", Offset = "0x1A67190", VA = "0x1A67190")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001399")]
		[Address(RVA = "0x1A67200", Offset = "0x1A67200", VA = "0x1A67200")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600139A")]
		[Address(RVA = "0x1A672C8", Offset = "0x1A672C8", VA = "0x1A672C8")]
		public TouchWalls()
		{
		}
	}
	[Token(Token = "0x20002DB")]
	public class TransferMotion : MonoBehaviour
	{
		[Token(Token = "0x4000D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA83A34", Offset = "0xA83A34")]
		public Transform to;

		[Token(Token = "0x4000D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA83A6C", Offset = "0xA83A6C")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA83A6C", Offset = "0xA83A6C")]
		public float transferMotion;

		[Token(Token = "0x4000D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 lastPosition;

		[Token(Token = "0x600139B")]
		[Address(RVA = "0x1A672D0", Offset = "0x1A672D0", VA = "0x1A672D0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600139C")]
		[Address(RVA = "0x1A6730C", Offset = "0x1A6730C", VA = "0x1A6730C")]
		private void Update()
		{
		}

		[Token(Token = "0x600139D")]
		[Address(RVA = "0x1A673C0", Offset = "0x1A673C0", VA = "0x1A673C0")]
		public TransferMotion()
		{
		}
	}
	[Token(Token = "0x20002DC")]
	public class TwoHandedProp : MonoBehaviour
	{
		[Token(Token = "0x4000D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA83AC0", Offset = "0xA83AC0")]
		public float weight;

		[Token(Token = "0x4000D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA83AD8", Offset = "0xA83AD8")]
		public Transform leftHandTarget;

		[Token(Token = "0x4000D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA83B10", Offset = "0xA83B10")]
		public Poser leftHandPoser;

		[Token(Token = "0x4000D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA83B48", Offset = "0xA83B48")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA83B48", Offset = "0xA83B48")]
		public float leftHandWeight;

		[Token(Token = "0x4000D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x4000D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 targetPosRelativeToRight;

		[Token(Token = "0x4000D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion targetRotRelativeToRight;

		[Token(Token = "0x600139E")]
		[Address(RVA = "0x1A6891C", Offset = "0x1A6891C", VA = "0x1A6891C")]
		private void Start()
		{
		}

		[Token(Token = "0x600139F")]
		[Address(RVA = "0x1A68AEC", Offset = "0x1A68AEC", VA = "0x1A68AEC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60013A0")]
		[Address(RVA = "0x1A68D38", Offset = "0x1A68D38", VA = "0x1A68D38")]
		private void AfterFBBIK()
		{
		}

		[Token(Token = "0x60013A1")]
		[Address(RVA = "0x1A68EDC", Offset = "0x1A68EDC", VA = "0x1A68EDC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60013A2")]
		[Address(RVA = "0x1A6900C", Offset = "0x1A6900C", VA = "0x1A6900C")]
		public TwoHandedProp()
		{
		}
	}
	[Token(Token = "0x20002DD")]
	public class UserControlInteractions : UserControlThirdPerson
	{
		[Token(Token = "0x4000D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public CharacterThirdPerson character;

		[Token(Token = "0x4000D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x4000D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool disableInputInInteraction;

		[Token(Token = "0x4000D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float enableInputAtProgress;

		[Token(Token = "0x60013A3")]
		[Address(RVA = "0x1A6C99C", Offset = "0x1A6C99C", VA = "0x1A6C99C", Slot = "5")]
		protected override void Update()
		{
		}

		[Token(Token = "0x60013A4")]
		[Address(RVA = "0x1A6CD28", Offset = "0x1A6CD28", VA = "0x1A6CD28")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60013A5")]
		[Address(RVA = "0x1A6CF94", Offset = "0x1A6CF94", VA = "0x1A6CF94")]
		public UserControlInteractions()
		{
		}
	}
	[Token(Token = "0x20002DE")]
	public class GrounderDemo : MonoBehaviour
	{
		[Token(Token = "0x4000D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] characters;

		[Token(Token = "0x60013A6")]
		[Address(RVA = "0x276EE60", Offset = "0x276EE60", VA = "0x276EE60")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60013A7")]
		[Address(RVA = "0x276F188", Offset = "0x276F188", VA = "0x276F188")]
		public void Activate(int index)
		{
		}

		[Token(Token = "0x60013A8")]
		[Address(RVA = "0x276F208", Offset = "0x276F208", VA = "0x276F208")]
		public GrounderDemo()
		{
		}
	}
	[Token(Token = "0x20002DF")]
	public class PlatformRotator : MonoBehaviour
	{
		[Token(Token = "0x20003D6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7E9FC", Offset = "0xA7E9FC")]
		private sealed class <SwitchRotation>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40011E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlatformRotator <>4__this;

			[Token(Token = "0x170001DA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001841")]
				[Address(RVA = "0x1EA9F4C", Offset = "0x1EA9F4C", VA = "0x1EA9F4C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001DB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001843")]
				[Address(RVA = "0x1EA9F94", Offset = "0x1EA9F94", VA = "0x1EA9F94", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600183E")]
			[Address(RVA = "0x1EA9E00", Offset = "0x1EA9E00", VA = "0x1EA9E00")]
			[DebuggerHidden]
			public <SwitchRotation>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x600183F")]
			[Address(RVA = "0x1EA9E2C", Offset = "0x1EA9E2C", VA = "0x1EA9E2C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001840")]
			[Address(RVA = "0x1EA9E30", Offset = "0x1EA9E30", VA = "0x1EA9E30", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001842")]
			[Address(RVA = "0x1EA9F54", Offset = "0x1EA9F54", VA = "0x1EA9F54", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxAngle;

		[Token(Token = "0x4000D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float switchRotationTime;

		[Token(Token = "0x4000D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float random;

		[Token(Token = "0x4000D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float rotationSpeed;

		[Token(Token = "0x4000D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 movePosition;

		[Token(Token = "0x4000D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float moveSpeed;

		[Token(Token = "0x4000D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int characterLayer;

		[Token(Token = "0x4000D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion defaultRotation;

		[Token(Token = "0x4000D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion targetRotation;

		[Token(Token = "0x4000D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 targetPosition;

		[Token(Token = "0x4000D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 velocity;

		[Token(Token = "0x4000D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody r;

		[Token(Token = "0x60013A9")]
		[Address(RVA = "0x10BBA5C", Offset = "0x10BBA5C", VA = "0x10BBA5C")]
		private void Start()
		{
		}

		[Token(Token = "0x60013AA")]
		[Address(RVA = "0x10BBBA0", Offset = "0x10BBBA0", VA = "0x10BBBA0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60013AB")]
		[Address(RVA = "0x10BBB28", Offset = "0x10BBB28", VA = "0x10BBB28")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xA8C50C", Offset = "0xA8C50C")]
		private IEnumerator SwitchRotation()
		{
			return null;
		}

		[Token(Token = "0x60013AC")]
		[Address(RVA = "0x10BBD24", Offset = "0x10BBD24", VA = "0x10BBD24")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60013AD")]
		[Address(RVA = "0x10BBE10", Offset = "0x10BBE10", VA = "0x10BBE10")]
		private void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x60013AE")]
		[Address(RVA = "0x10BBEF8", Offset = "0x10BBEF8", VA = "0x10BBEF8")]
		public PlatformRotator()
		{
		}
	}
	[Token(Token = "0x20002E0")]
	public class BendGoal : MonoBehaviour
	{
		[Token(Token = "0x4000D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LimbIK limbIK;

		[Token(Token = "0x4000D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA83B9C", Offset = "0xA83B9C")]
		public float weight;

		[Token(Token = "0x60013AF")]
		[Address(RVA = "0x231777C", Offset = "0x231777C", VA = "0x231777C")]
		private void Start()
		{
		}

		[Token(Token = "0x60013B0")]
		[Address(RVA = "0x23177F0", Offset = "0x23177F0", VA = "0x23177F0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60013B1")]
		[Address(RVA = "0x23178A8", Offset = "0x23178A8", VA = "0x23178A8")]
		public BendGoal()
		{
		}
	}
	[Token(Token = "0x20002E1")]
	public class Turret : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003D7")]
		public class Part
		{
			[Token(Token = "0x40011EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x40011EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private RotationLimit rotationLimit;

			[Token(Token = "0x6001844")]
			[Address(RVA = "0x1EAE0E8", Offset = "0x1EAE0E8", VA = "0x1EAE0E8")]
			public void AimAt(Transform target)
			{
			}

			[Token(Token = "0x6001845")]
			[Address(RVA = "0x1EAE228", Offset = "0x1EAE228", VA = "0x1EAE228")]
			public Part()
			{
			}
		}

		[Token(Token = "0x4000D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4000D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Part[] parts;

		[Token(Token = "0x60013B2")]
		[Address(RVA = "0x1A677B4", Offset = "0x1A677B4", VA = "0x1A677B4")]
		private void Update()
		{
		}

		[Token(Token = "0x60013B3")]
		[Address(RVA = "0x1A67830", Offset = "0x1A67830", VA = "0x1A67830")]
		public Turret()
		{
		}
	}
	[Token(Token = "0x20002E2")]
	public class HitReactionVRIKTrigger : MonoBehaviour
	{
		[Token(Token = "0x4000D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HitReactionVRIK hitReaction;

		[Token(Token = "0x4000D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float hitForce;

		[Token(Token = "0x4000D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string colliderName;

		[Token(Token = "0x60013B4")]
		[Address(RVA = "0x28ACA48", Offset = "0x28ACA48", VA = "0x28ACA48")]
		private void Update()
		{
		}

		[Token(Token = "0x60013B5")]
		[Address(RVA = "0x28ACBAC", Offset = "0x28ACBAC", VA = "0x28ACBAC")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60013B6")]
		[Address(RVA = "0x28ACD90", Offset = "0x28ACD90", VA = "0x28ACD90")]
		public HitReactionVRIKTrigger()
		{
		}
	}
	[Token(Token = "0x20002E3")]
	public class VRController : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003D8")]
		public enum InputMode
		{
			[Token(Token = "0x40011ED")]
			Input,
			[Token(Token = "0x40011EE")]
			WASDOnly
		}

		[Token(Token = "0x4000D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InputMode inputMode;

		[Token(Token = "0x4000D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VRIK ik;

		[Token(Token = "0x4000D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform centerEyeAnchor;

		[Token(Token = "0x4000D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float walkSpeed;

		[Token(Token = "0x4000D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float runSpeed;

		[Token(Token = "0x4000D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float walkForwardSpeedMlp;

		[Token(Token = "0x4000D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float runForwardSpeedMlp;

		[Token(Token = "0x4000D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 smoothInput;

		[Token(Token = "0x4000D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 smoothInputV;

		[Token(Token = "0x60013B7")]
		[Address(RVA = "0x1A6E050", Offset = "0x1A6E050", VA = "0x1A6E050")]
		private void Update()
		{
		}

		[Token(Token = "0x60013B8")]
		[Address(RVA = "0x1A6E1E0", Offset = "0x1A6E1E0", VA = "0x1A6E1E0")]
		private Vector3 GetInput()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60013B9")]
		[Address(RVA = "0x1A6E3A0", Offset = "0x1A6E3A0", VA = "0x1A6E3A0")]
		public VRController()
		{
		}
	}
	[Token(Token = "0x20002E4")]
	public class VRIKCalibrationController : MonoBehaviour
	{
		[Token(Token = "0x4000D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA83BB4", Offset = "0xA83BB4")]
		public VRIK ik;

		[Token(Token = "0x4000D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA83BEC", Offset = "0xA83BEC")]
		public VRIKCalibrator.Settings settings;

		[Token(Token = "0x4000D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA83C24", Offset = "0xA83C24")]
		public Transform headTracker;

		[Token(Token = "0x4000D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA83C5C", Offset = "0xA83C5C")]
		public Transform bodyTracker;

		[Token(Token = "0x4000D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA83C94", Offset = "0xA83C94")]
		public Transform leftHandTracker;

		[Token(Token = "0x4000D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA83CCC", Offset = "0xA83CCC")]
		public Transform rightHandTracker;

		[Token(Token = "0x4000D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA83D04", Offset = "0xA83D04")]
		public Transform leftFootTracker;

		[Token(Token = "0x4000D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA83D3C", Offset = "0xA83D3C")]
		public Transform rightFootTracker;

		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xA83D74", Offset = "0xA83D74")]
		public VRIKCalibrator.CalibrationData data;

		[Token(Token = "0x60013BA")]
		[Address(RVA = "0x1A6E77C", Offset = "0x1A6E77C", VA = "0x1A6E77C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60013BB")]
		[Address(RVA = "0x1A706A8", Offset = "0x1A706A8", VA = "0x1A706A8")]
		public VRIKCalibrationController()
		{
		}
	}
	[Token(Token = "0x20002E5")]
	public class VRIKPlatform : MonoBehaviour
	{
		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRIK ik;

		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion lastRotation;

		[Token(Token = "0x60013BC")]
		[Address(RVA = "0x1A729A0", Offset = "0x1A729A0", VA = "0x1A729A0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60013BD")]
		[Address(RVA = "0x1A729FC", Offset = "0x1A729FC", VA = "0x1A729FC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60013BE")]
		[Address(RVA = "0x1A72B84", Offset = "0x1A72B84", VA = "0x1A72B84")]
		public VRIKPlatform()
		{
		}
	}
	[Token(Token = "0x20002E6")]
	public class VRIKPlatformController : MonoBehaviour
	{
		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRIK ik;

		[Token(Token = "0x4000D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform trackingSpace;

		[Token(Token = "0x4000D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform platform;

		[Token(Token = "0x4000D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool moveToPlatform;

		[Token(Token = "0x4000D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform lastPlatform;

		[Token(Token = "0x4000D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion lastRotation;

		[Token(Token = "0x60013BF")]
		[Address(RVA = "0x1A72BB8", Offset = "0x1A72BB8", VA = "0x1A72BB8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60013C0")]
		[Address(RVA = "0x1A73054", Offset = "0x1A73054", VA = "0x1A73054")]
		public VRIKPlatformController()
		{
		}
	}
	[Token(Token = "0x20002E7")]
	public abstract class CharacterAnimationBase : MonoBehaviour
	{
		[Token(Token = "0x4000D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool smoothFollow;

		[Token(Token = "0x4000D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float smoothFollowSpeed;

		[Token(Token = "0x4000D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected bool animatePhysics;

		[Token(Token = "0x4000D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 localPosition;

		[Token(Token = "0x4000DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion localRotation;

		[Token(Token = "0x4000DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion lastRotation;

		[Token(Token = "0x17000136")]
		public virtual bool animationGrounded
		{
			[Token(Token = "0x60013C2")]
			[Address(RVA = "0x2323524", Offset = "0x2323524", VA = "0x2323524", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60013C1")]
		[Address(RVA = "0x2323500", Offset = "0x2323500", VA = "0x2323500", Slot = "4")]
		public virtual Vector3 GetPivotPoint()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60013C3")]
		[Address(RVA = "0x232352C", Offset = "0x232352C", VA = "0x232352C")]
		public float GetAngleFromForward(Vector3 worldDirection)
		{
			return default(float);
		}

		[Token(Token = "0x60013C4")]
		[Address(RVA = "0x2323590", Offset = "0x2323590", VA = "0x2323590", Slot = "6")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60013C5")]
		[Address(RVA = "0x2323728", Offset = "0x2323728", VA = "0x2323728", Slot = "7")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x60013C6")]
		[Address(RVA = "0x232394C", Offset = "0x232394C", VA = "0x232394C", Slot = "8")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x60013C7")]
		[Address(RVA = "0x2323738", Offset = "0x2323738", VA = "0x2323738")]
		private void SmoothFollow()
		{
		}

		[Token(Token = "0x60013C8")]
		[Address(RVA = "0x232395C", Offset = "0x232395C", VA = "0x232395C")]
		protected CharacterAnimationBase()
		{
		}
	}
	[Token(Token = "0x20002E8")]
	public class CharacterAnimationSimple : CharacterAnimationBase
	{
		[Token(Token = "0x4000DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public CharacterThirdPerson characterController;

		[Token(Token = "0x4000DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float pivotOffset;

		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public AnimationCurve moveSpeed;

		[Token(Token = "0x4000DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Animator animator;

		[Token(Token = "0x60013C9")]
		[Address(RVA = "0x2323974", Offset = "0x2323974", VA = "0x2323974", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60013CA")]
		[Address(RVA = "0x23239D8", Offset = "0x23239D8", VA = "0x23239D8", Slot = "4")]
		public override Vector3 GetPivotPoint()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60013CB")]
		[Address(RVA = "0x2323A74", Offset = "0x2323A74", VA = "0x2323A74")]
		private void Update()
		{
		}

		[Token(Token = "0x60013CC")]
		[Address(RVA = "0x2323B8C", Offset = "0x2323B8C", VA = "0x2323B8C")]
		public CharacterAnimationSimple()
		{
		}
	}
	[Token(Token = "0x20002E9")]
	public class CharacterAnimationThirdPerson : CharacterAnimationBase
	{
		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public CharacterThirdPerson characterController;

		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float turnSensitivity;

		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		private float turnSpeed;

		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private float runCycleLegOffset;

		[Token(Token = "0x4000DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[AttributeAttribute(Name = "RangeAttribute", RVA = "0xA83DDC", Offset = "0xA83DDC")]
		[SerializeField]
		private float animSpeedMultiplier;

		[Token(Token = "0x4000DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Animator animator;

		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 lastForward;

		[Token(Token = "0x4000DAE")]
		private const string groundedDirectional = "Grounded Directional";

		[Token(Token = "0x4000DAF")]
		private const string groundedStrafe = "Grounded Strafe";

		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float deltaAngle;

		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float jumpLeg;

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool lastJump;

		[Token(Token = "0x17000137")]
		public override bool animationGrounded
		{
			[Token(Token = "0x60013CF")]
			[Address(RVA = "0x2323C4C", Offset = "0x2323C4C", VA = "0x2323C4C", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60013CD")]
		[Address(RVA = "0x2323BA4", Offset = "0x2323BA4", VA = "0x2323BA4", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60013CE")]
		[Address(RVA = "0x2323C30", Offset = "0x2323C30", VA = "0x2323C30", Slot = "4")]
		public override Vector3 GetPivotPoint()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60013D0")]
		[Address(RVA = "0x2323D44", Offset = "0x2323D44", VA = "0x2323D44", Slot = "9")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60013D1")]
		[Address(RVA = "0x2324128", Offset = "0x2324128", VA = "0x2324128")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x60013D2")]
		[Address(RVA = "0x2324304", Offset = "0x2324304", VA = "0x2324304")]
		public CharacterAnimationThirdPerson()
		{
		}
	}
	[Token(Token = "0x20002EA")]
	public abstract class CharacterBase : MonoBehaviour
	{
		[Token(Token = "0x4000DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xA83E20", Offset = "0xA83E20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA83E20", Offset = "0xA83E20")]
		public Transform gravityTarget;

		[Token(Token = "0x4000DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA83E80", Offset = "0xA83E80")]
		public float gravityMultiplier;

		[Token(Token = "0x4000DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float airborneThreshold;

		[Token(Token = "0x4000DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float slopeStartAngle;

		[Token(Token = "0x4000DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float slopeEndAngle;

		[Token(Token = "0x4000DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float spherecastRadius;

		[Token(Token = "0x4000DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public LayerMask groundLayers;

		[Token(Token = "0x4000DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PhysicMaterial zeroFrictionMaterial;

		[Token(Token = "0x4000DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private PhysicMaterial highFrictionMaterial;

		[Token(Token = "0x4000DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Rigidbody r;

		[Token(Token = "0x4000DBD")]
		protected const float half = 0.5f;

		[Token(Token = "0x4000DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected float originalHeight;

		[Token(Token = "0x4000DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		protected Vector3 originalCenter;

		[Token(Token = "0x4000DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected CapsuleCollider capsule;

		[Token(Token = "0x60013D3")]
		public abstract void Move(Vector3 deltaPosition, Quaternion deltaRotation);

		[Token(Token = "0x60013D4")]
		[Address(RVA = "0x1695574", Offset = "0x1695574", VA = "0x1695574")]
		protected Vector3 GetGravity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60013D5")]
		[Address(RVA = "0x16956A4", Offset = "0x16956A4", VA = "0x16956A4", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60013D6")]
		[Address(RVA = "0x169588C", Offset = "0x169588C", VA = "0x169588C", Slot = "6")]
		protected virtual RaycastHit GetSpherecastHit()
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x60013D7")]
		[Address(RVA = "0x1695A3C", Offset = "0x1695A3C", VA = "0x1695A3C")]
		public float GetAngleFromForward(Vector3 worldDirection)
		{
			return default(float);
		}

		[Token(Token = "0x60013D8")]
		[Address(RVA = "0x1695AA0", Offset = "0x1695AA0", VA = "0x1695AA0")]
		protected void RigidbodyRotateAround(Vector3 point, Vector3 axis, float angle)
		{
		}

		[Token(Token = "0x60013D9")]
		[Address(RVA = "0x1695BC0", Offset = "0x1695BC0", VA = "0x1695BC0")]
		protected void ScaleCapsule(float mlp)
		{
		}

		[Token(Token = "0x60013DA")]
		[Address(RVA = "0x1695CE4", Offset = "0x1695CE4", VA = "0x1695CE4")]
		protected void HighFriction()
		{
		}

		[Token(Token = "0x60013DB")]
		[Address(RVA = "0x1695D08", Offset = "0x1695D08", VA = "0x1695D08")]
		protected void ZeroFriction()
		{
		}

		[Token(Token = "0x60013DC")]
		[Address(RVA = "0x1695D2C", Offset = "0x1695D2C", VA = "0x1695D2C")]
		protected float GetSlopeDamper(Vector3 velocity, Vector3 groundNormal)
		{
			return default(float);
		}

		[Token(Token = "0x60013DD")]
		[Address(RVA = "0x1695D8C", Offset = "0x1695D8C", VA = "0x1695D8C")]
		protected CharacterBase()
		{
		}
	}
	[Token(Token = "0x20002EB")]
	public class CharacterThirdPerson : CharacterBase
	{
		[Serializable]
		[Token(Token = "0x20003D9")]
		public enum MoveMode
		{
			[Token(Token = "0x40011F0")]
			Directional,
			[Token(Token = "0x40011F1")]
			Strafe
		}

		[Token(Token = "0x20003DA")]
		public struct AnimState
		{
			[Token(Token = "0x40011F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 moveDirection;

			[Token(Token = "0x40011F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public bool jump;

			[Token(Token = "0x40011F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
			public bool crouch;

			[Token(Token = "0x40011F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
			public bool onGround;

			[Token(Token = "0x40011F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF")]
			public bool isStrafing;

			[Token(Token = "0x40011F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float yVelocity;

			[Token(Token = "0x40011F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public bool doubleJump;
		}

		[Token(Token = "0x20003DB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EA0C", Offset = "0xA7EA0C")]
		private sealed class <JumpSmooth>d__79 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40011FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CharacterThirdPerson <>4__this;

			[Token(Token = "0x40011FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 jumpVelocity;

			[Token(Token = "0x40011FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private int <steps>5__2;

			[Token(Token = "0x40011FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <stepsToTake>5__3;

			[Token(Token = "0x170001DC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001849")]
				[Address(RVA = "0x1A812A0", Offset = "0x1A812A0", VA = "0x1A812A0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001DD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600184B")]
				[Address(RVA = "0x1A812E8", Offset = "0x1A812E8", VA = "0x1A812E8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001846")]
			[Address(RVA = "0x1A81170", Offset = "0x1A81170", VA = "0x1A81170")]
			[DebuggerHidden]
			public <JumpSmooth>d__79(int <>1__state)
			{
			}

			[Token(Token = "0x6001847")]
			[Address(RVA = "0x1A8119C", Offset = "0x1A8119C", VA = "0x1A8119C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001848")]
			[Address(RVA = "0x1A811A0", Offset = "0x1A811A0", VA = "0x1A811A0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600184A")]
			[Address(RVA = "0x1A812A8", Offset = "0x1A812A8", VA = "0x1A812A8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xA83EB8", Offset = "0xA83EB8")]
		public CharacterAnimationBase characterAnimation;

		[Token(Token = "0x4000DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UserControlThirdPerson userControl;

		[Token(Token = "0x4000DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public CameraController cam;

		[Token(Token = "0x4000DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xA83EF0", Offset = "0xA83EF0")]
		public MoveMode moveMode;

		[Token(Token = "0x4000DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public bool smoothPhysics;

		[Token(Token = "0x4000DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float smoothAccelerationTime;

		[Token(Token = "0x4000DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float linearAccelerationSpeed;

		[Token(Token = "0x4000DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float platformFriction;

		[Token(Token = "0x4000DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float groundStickyEffect;

		[Token(Token = "0x4000DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float maxVerticalVelocityOnGround;

		[Token(Token = "0x4000DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float velocityToGroundTangentWeight;

		[Token(Token = "0x4000DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xA83F28", Offset = "0xA83F28")]
		public bool lookInCameraDirection;

		[Token(Token = "0x4000DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float turnSpeed;

		[Token(Token = "0x4000DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float stationaryTurnSpeedMlp;

		[Token(Token = "0x4000DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xA83F60", Offset = "0xA83F60")]
		public bool smoothJump;

		[Token(Token = "0x4000DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float airSpeed;

		[Token(Token = "0x4000DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float airControl;

		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float jumpPower;

		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float jumpRepeatDelayTime;

		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool doubleJumpEnabled;

		[Token(Token = "0x4000DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float doubleJumpPowerMlp;

		[Token(Token = "0x4000DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xA83F98", Offset = "0xA83F98")]
		public LayerMask wallRunLayers;

		[Token(Token = "0x4000DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float wallRunMaxLength;

		[Token(Token = "0x4000DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public float wallRunMinMoveMag;

		[Token(Token = "0x4000DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public float wallRunMinVelocityY;

		[Token(Token = "0x4000DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public float wallRunRotationSpeed;

		[Token(Token = "0x4000DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public float wallRunMaxRotationAngle;

		[Token(Token = "0x4000DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public float wallRunWeightSpeed;

		[Token(Token = "0x4000DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[AttributeAttribute(Name = "HeaderAttribute", RVA = "0xA83FD0", Offset = "0xA83FD0")]
		public float crouchCapsuleScaleMlp;

		[Token(Token = "0x4000DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA84008", Offset = "0xA84008")]
		private bool <fullRootMotion>k__BackingField;

		[Token(Token = "0x4000DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA84018", Offset = "0xA84018")]
		private bool <onGround>k__BackingField;

		[Token(Token = "0x4000DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public AnimState animState;

		[Token(Token = "0x4000DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		protected Vector3 moveDirection;

		[Token(Token = "0x4000DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Animator animator;

		[Token(Token = "0x4000DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Vector3 normal;

		[Token(Token = "0x4000DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private Vector3 platformVelocity;

		[Token(Token = "0x4000DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Vector3 platformAngularVelocity;

		[Token(Token = "0x4000DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private RaycastHit hit;

		[Token(Token = "0x4000DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private float jumpLeg;

		[Token(Token = "0x4000DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private float jumpEndTime;

		[Token(Token = "0x4000DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private float forwardMlp;

		[Token(Token = "0x4000DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private float groundDistance;

		[Token(Token = "0x4000DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private float lastAirTime;

		[Token(Token = "0x4000DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		private float stickyForce;

		[Token(Token = "0x4000DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private Vector3 wallNormal;

		[Token(Token = "0x4000DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		private Vector3 moveDirectionVelocity;

		[Token(Token = "0x4000DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private float wallRunWeight;

		[Token(Token = "0x4000DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		private float lastWallRunWeight;

		[Token(Token = "0x4000DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private float fixedDeltaTime;

		[Token(Token = "0x4000DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		private Vector3 fixedDeltaPosition;

		[Token(Token = "0x4000DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private Quaternion fixedDeltaRotation;

		[Token(Token = "0x4000DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private bool fixedFrame;

		[Token(Token = "0x4000DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		private float wallRunEndTime;

		[Token(Token = "0x4000DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private Vector3 gravity;

		[Token(Token = "0x4000DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		private Vector3 verticalVelocity;

		[Token(Token = "0x4000DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private float velocityY;

		[Token(Token = "0x4000DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		private bool doubleJumped;

		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E5")]
		private bool jumpReleased;

		[Token(Token = "0x17000138")]
		public bool fullRootMotion
		{
			[Token(Token = "0x60013DE")]
			[Address(RVA = "0x16960B8", Offset = "0x16960B8", VA = "0x16960B8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8C56C", Offset = "0xA8C56C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60013DF")]
			[Address(RVA = "0x16960C0", Offset = "0x16960C0", VA = "0x16960C0")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8C57C", Offset = "0xA8C57C")]
			set
			{
			}
		}

		[Token(Token = "0x17000139")]
		public bool onGround
		{
			[Token(Token = "0x60013E0")]
			[Address(RVA = "0x16960CC", Offset = "0x16960CC", VA = "0x16960CC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8C58C", Offset = "0xA8C58C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60013E1")]
			[Address(RVA = "0x16960D4", Offset = "0x16960D4", VA = "0x16960D4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8C59C", Offset = "0xA8C59C")]
			private set
			{
			}
		}

		[Token(Token = "0x60013E2")]
		[Address(RVA = "0x16960E0", Offset = "0x16960E0", VA = "0x16960E0", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60013E3")]
		[Address(RVA = "0x1696248", Offset = "0x1696248", VA = "0x1696248")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x60013E4")]
		[Address(RVA = "0x16962D8", Offset = "0x16962D8", VA = "0x16962D8", Slot = "4")]
		public override void Move(Vector3 deltaPosition, Quaternion deltaRotation)
		{
		}

		[Token(Token = "0x60013E5")]
		[Address(RVA = "0x16963A0", Offset = "0x16963A0", VA = "0x16963A0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60013E6")]
		[Address(RVA = "0x1696FEC", Offset = "0x1696FEC", VA = "0x1696FEC", Slot = "7")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60013E7")]
		[Address(RVA = "0x1697244", Offset = "0x1697244", VA = "0x1697244", Slot = "8")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x60013E8")]
		[Address(RVA = "0x16968B4", Offset = "0x16968B4", VA = "0x16968B4")]
		private void MoveFixed(Vector3 deltaPosition)
		{
		}

		[Token(Token = "0x60013E9")]
		[Address(RVA = "0x1697328", Offset = "0x1697328", VA = "0x1697328")]
		private void WallRun()
		{
		}

		[Token(Token = "0x60013EA")]
		[Address(RVA = "0x16977D0", Offset = "0x16977D0", VA = "0x16977D0")]
		private bool CanWallRun()
		{
			return default(bool);
		}

		[Token(Token = "0x60013EB")]
		[Address(RVA = "0x1697074", Offset = "0x1697074", VA = "0x1697074")]
		private Vector3 GetMoveDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60013EC")]
		[Address(RVA = "0x1697878", Offset = "0x1697878", VA = "0x1697878", Slot = "9")]
		protected virtual void Rotate()
		{
		}

		[Token(Token = "0x60013ED")]
		[Address(RVA = "0x1697BB4", Offset = "0x1697BB4", VA = "0x1697BB4")]
		private Vector3 GetForwardDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60013EE")]
		[Address(RVA = "0x1697CA4", Offset = "0x1697CA4", VA = "0x1697CA4", Slot = "10")]
		protected virtual bool Jump()
		{
			return default(bool);
		}

		[Token(Token = "0x60013EF")]
		[Address(RVA = "0x1697E04", Offset = "0x1697E04", VA = "0x1697E04")]
		[AttributeAttribute(Name = "IteratorStateMachineAttribute", RVA = "0xA8C5AC", Offset = "0xA8C5AC")]
		private IEnumerator JumpSmooth(Vector3 jumpVelocity)
		{
			return null;
		}

		[Token(Token = "0x60013F0")]
		[Address(RVA = "0x1696C38", Offset = "0x1696C38", VA = "0x1696C38")]
		private void GroundCheck()
		{
		}

		[Token(Token = "0x60013F1")]
		[Address(RVA = "0x1697EA0", Offset = "0x1697EA0", VA = "0x1697EA0")]
		public CharacterThirdPerson()
		{
		}
	}
	[Token(Token = "0x20002EC")]
	public class SimpleLocomotion : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003DC")]
		public enum RotationMode
		{
			[Token(Token = "0x4001200")]
			Smooth,
			[Token(Token = "0x4001201")]
			Linear
		}

		[Token(Token = "0x4000DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA84028", Offset = "0xA84028")]
		public CameraController cameraController;

		[Token(Token = "0x4000DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA84060", Offset = "0xA84060")]
		public float accelerationTime;

		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA84098", Offset = "0xA84098")]
		public float turnTime;

		[Token(Token = "0x4000DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA840D0", Offset = "0xA840D0")]
		public bool walkByDefault;

		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA84108", Offset = "0xA84108")]
		public RotationMode rotationMode;

		[Token(Token = "0x4000E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA84140", Offset = "0xA84140")]
		public float moveSpeed;

		[Token(Token = "0x4000E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA84178", Offset = "0xA84178")]
		private bool <isGrounded>k__BackingField;

		[Token(Token = "0x4000E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Animator animator;

		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float speed;

		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float angleVel;

		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float speedVel;

		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 linearTargetDirection;

		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private CharacterController characterController;

		[Token(Token = "0x1700013A")]
		public bool isGrounded
		{
			[Token(Token = "0x60013F2")]
			[Address(RVA = "0x1631A3C", Offset = "0x1631A3C", VA = "0x1631A3C")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8C60C", Offset = "0xA8C60C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60013F3")]
			[Address(RVA = "0x1631A44", Offset = "0x1631A44", VA = "0x1631A44")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8C61C", Offset = "0xA8C61C")]
			private set
			{
			}
		}

		[Token(Token = "0x60013F4")]
		[Address(RVA = "0x1631A50", Offset = "0x1631A50", VA = "0x1631A50")]
		private void Start()
		{
		}

		[Token(Token = "0x60013F5")]
		[Address(RVA = "0x1631AF4", Offset = "0x1631AF4", VA = "0x1631AF4")]
		private void Update()
		{
		}

		[Token(Token = "0x60013F6")]
		[Address(RVA = "0x1631FB4", Offset = "0x1631FB4", VA = "0x1631FB4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60013F7")]
		[Address(RVA = "0x1631B48", Offset = "0x1631B48", VA = "0x1631B48")]
		private void Rotate()
		{
		}

		[Token(Token = "0x60013F8")]
		[Address(RVA = "0x1631DC8", Offset = "0x1631DC8", VA = "0x1631DC8")]
		private void Move()
		{
		}

		[Token(Token = "0x60013F9")]
		[Address(RVA = "0x1631FF0", Offset = "0x1631FF0", VA = "0x1631FF0")]
		private Vector3 GetInputVector()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60013FA")]
		[Address(RVA = "0x163208C", Offset = "0x163208C", VA = "0x163208C")]
		private Vector3 GetInputVectorRaw()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60013FB")]
		[Address(RVA = "0x1632110", Offset = "0x1632110", VA = "0x1632110")]
		public SimpleLocomotion()
		{
		}
	}
	[Token(Token = "0x20002ED")]
	public class UserControlAI : UserControlThirdPerson
	{
		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform moveTarget;

		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float stoppingDistance;

		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float stoppingThreshold;

		[Token(Token = "0x4000E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Navigator navigator;

		[Token(Token = "0x60013FC")]
		[Address(RVA = "0x1A6C700", Offset = "0x1A6C700", VA = "0x1A6C700", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60013FD")]
		[Address(RVA = "0x1A6C784", Offset = "0x1A6C784", VA = "0x1A6C784", Slot = "5")]
		protected override void Update()
		{
		}

		[Token(Token = "0x60013FE")]
		[Address(RVA = "0x1A6C948", Offset = "0x1A6C948", VA = "0x1A6C948")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x60013FF")]
		[Address(RVA = "0x1A6C970", Offset = "0x1A6C970", VA = "0x1A6C970")]
		public UserControlAI()
		{
		}
	}
	[Token(Token = "0x20002EE")]
	public class UserControlThirdPerson : MonoBehaviour
	{
		[Token(Token = "0x20003DD")]
		public struct State
		{
			[Token(Token = "0x4001202")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 move;

			[Token(Token = "0x4001203")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 lookPos;

			[Token(Token = "0x4001204")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool crouch;

			[Token(Token = "0x4001205")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
			public bool jump;

			[Token(Token = "0x4001206")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int actionIndex;
		}

		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool walkByDefault;

		[Token(Token = "0x4000E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool canCrouch;

		[Token(Token = "0x4000E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool canJump;

		[Token(Token = "0x4000E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public State state;

		[Token(Token = "0x4000E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Transform cam;

		[Token(Token = "0x6001400")]
		[Address(RVA = "0x1A6C744", Offset = "0x1A6C744", VA = "0x1A6C744", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6001401")]
		[Address(RVA = "0x1A6CA8C", Offset = "0x1A6CA8C", VA = "0x1A6CA8C", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001402")]
		[Address(RVA = "0x1A6C98C", Offset = "0x1A6C98C", VA = "0x1A6C98C")]
		public UserControlThirdPerson()
		{
		}
	}
	[Token(Token = "0x20002EF")]
	public class ApplicationQuit : MonoBehaviour
	{
		[Token(Token = "0x6001403")]
		[Address(RVA = "0x2312A3C", Offset = "0x2312A3C", VA = "0x2312A3C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001404")]
		[Address(RVA = "0x2312A78", Offset = "0x2312A78", VA = "0x2312A78")]
		public ApplicationQuit()
		{
		}
	}
	[Token(Token = "0x20002F0")]
	public class SlowMo : MonoBehaviour
	{
		[Token(Token = "0x4000E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public KeyCode[] keyCodes;

		[Token(Token = "0x4000E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool mouse0;

		[Token(Token = "0x4000E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool mouse1;

		[Token(Token = "0x4000E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float slowMoTimeScale;

		[Token(Token = "0x6001405")]
		[Address(RVA = "0x1632138", Offset = "0x1632138", VA = "0x1632138")]
		private void Update()
		{
		}

		[Token(Token = "0x6001406")]
		[Address(RVA = "0x163216C", Offset = "0x163216C", VA = "0x163216C")]
		private bool IsSlowMotion()
		{
			return default(bool);
		}

		[Token(Token = "0x6001407")]
		[Address(RVA = "0x163221C", Offset = "0x163221C", VA = "0x163221C")]
		public SlowMo()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002F1")]
	public class Navigator
	{
		[Token(Token = "0x20003DE")]
		public enum State
		{
			[Token(Token = "0x4001208")]
			Idle,
			[Token(Token = "0x4001209")]
			Seeking,
			[Token(Token = "0x400120A")]
			OnPath
		}

		[Token(Token = "0x4000E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA84188", Offset = "0xA84188")]
		public bool activeTargetSeeking;

		[Token(Token = "0x4000E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA841C0", Offset = "0xA841C0")]
		public float cornerRadius;

		[Token(Token = "0x4000E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA841F8", Offset = "0xA841F8")]
		public float recalculateOnPathDistance;

		[Token(Token = "0x4000E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA84230", Offset = "0xA84230")]
		public float maxSampleDistance;

		[Token(Token = "0x4000E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[AttributeAttribute(Name = "TooltipAttribute", RVA = "0xA84268", Offset = "0xA84268")]
		public float nextPathInterval;

		[Token(Token = "0x4000E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA842A0", Offset = "0xA842A0")]
		private Vector3 <normalizedDeltaPosition>k__BackingField;

		[Token(Token = "0x4000E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA842B0", Offset = "0xA842B0")]
		private State <state>k__BackingField;

		[Token(Token = "0x4000E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform transform;

		[Token(Token = "0x4000E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int cornerIndex;

		[Token(Token = "0x4000E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3[] corners;

		[Token(Token = "0x4000E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private NavMeshPath path;

		[Token(Token = "0x4000E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 lastTargetPosition;

		[Token(Token = "0x4000E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool initiated;

		[Token(Token = "0x4000E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float nextPathTime;

		[Token(Token = "0x1700013B")]
		public Vector3 normalizedDeltaPosition
		{
			[Token(Token = "0x6001408")]
			[Address(RVA = "0x10B29DC", Offset = "0x10B29DC", VA = "0x10B29DC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8C62C", Offset = "0xA8C62C")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001409")]
			[Address(RVA = "0x10B29E8", Offset = "0x10B29E8", VA = "0x10B29E8")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8C63C", Offset = "0xA8C63C")]
			private set
			{
			}
		}

		[Token(Token = "0x1700013C")]
		public State state
		{
			[Token(Token = "0x600140A")]
			[Address(RVA = "0x10B29F4", Offset = "0x10B29F4", VA = "0x10B29F4")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8C64C", Offset = "0xA8C64C")]
			get
			{
				return default(State);
			}
			[Token(Token = "0x600140B")]
			[Address(RVA = "0x10B29FC", Offset = "0x10B29FC", VA = "0x10B29FC")]
			[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA8C65C", Offset = "0xA8C65C")]
			private set
			{
			}
		}

		[Token(Token = "0x600140C")]
		[Address(RVA = "0x10B2A04", Offset = "0x10B2A04", VA = "0x10B2A04")]
		public void Initiate(Transform transform)
		{
		}

		[Token(Token = "0x600140D")]
		[Address(RVA = "0x10B2AD8", Offset = "0x10B2AD8", VA = "0x10B2AD8")]
		public void Update(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x600140E")]
		[Address(RVA = "0x10B2ED8", Offset = "0x10B2ED8", VA = "0x10B2ED8")]
		private void CalculatePath(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x600140F")]
		[Address(RVA = "0x10B2F54", Offset = "0x10B2F54", VA = "0x10B2F54")]
		private bool Find(Vector3 targetPosition)
		{
			return default(bool);
		}

		[Token(Token = "0x6001410")]
		[Address(RVA = "0x10B2E94", Offset = "0x10B2E94", VA = "0x10B2E94")]
		private void Stop()
		{
		}

		[Token(Token = "0x6001411")]
		[Address(RVA = "0x10B2EC4", Offset = "0x10B2EC4", VA = "0x10B2EC4")]
		private float HorDistance(Vector3 p1, Vector3 p2)
		{
			return default(float);
		}

		[Token(Token = "0x6001412")]
		[Address(RVA = "0x10B30A0", Offset = "0x10B30A0", VA = "0x10B30A0")]
		public void Visualize()
		{
		}

		[Token(Token = "0x6001413")]
		[Address(RVA = "0x10B3250", Offset = "0x10B3250", VA = "0x10B3250")]
		public Navigator()
		{
		}
	}
}
namespace PrettyHierarchy
{
	[Token(Token = "0x20002F2")]
	public interface IPrettyComponent
	{
		[Token(Token = "0x1700013D")]
		bool UseDefaultBackgroundColor
		{
			[Token(Token = "0x6001414")]
			get;
		}

		[Token(Token = "0x1700013E")]
		Color32 BackgroundColor
		{
			[Token(Token = "0x6001415")]
			get;
		}

		[Token(Token = "0x1700013F")]
		bool UseDefaultTextColor
		{
			[Token(Token = "0x6001416")]
			get;
		}

		[Token(Token = "0x17000140")]
		Color32 TextColor
		{
			[Token(Token = "0x6001417")]
			get;
		}

		[Token(Token = "0x17000141")]
		Font Font
		{
			[Token(Token = "0x6001418")]
			get;
		}

		[Token(Token = "0x17000142")]
		int FontSize
		{
			[Token(Token = "0x6001419")]
			get;
		}

		[Token(Token = "0x17000143")]
		FontStyle FontStyle
		{
			[Token(Token = "0x600141A")]
			get;
		}

		[Token(Token = "0x17000144")]
		TextAnchor Alignment
		{
			[Token(Token = "0x600141B")]
			get;
		}

		[Token(Token = "0x17000145")]
		bool TextDropShadow
		{
			[Token(Token = "0x600141C")]
			get;
		}

		[Token(Token = "0x17000146")]
		string name
		{
			[Token(Token = "0x600141D")]
			get;
		}

		[Token(Token = "0x17000147")]
		GameObject gameObject
		{
			[Token(Token = "0x600141E")]
			get;
		}
	}
	[Token(Token = "0x20002F3")]
	[DisallowMultipleComponent]
	public class PrettyObject : MonoBehaviour, IPrettyComponent
	{
		[Token(Token = "0x4000E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool useDefaultBackgroundColor;

		[Token(Token = "0x4000E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private Color32 backgroundColor;

		[Token(Token = "0x4000E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool useDefaultTextColor;

		[Token(Token = "0x4000E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private Color32 textColor;

		[Token(Token = "0x4000E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Font font;

		[Token(Token = "0x4000E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private int fontSize;

		[Token(Token = "0x4000E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private FontStyle fontStyle;

		[Token(Token = "0x4000E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private TextAnchor alignment;

		[Token(Token = "0x4000E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private bool textDropShadow;

		[Token(Token = "0x17000148")]
		public bool UseDefaultBackgroundColor
		{
			[Token(Token = "0x600141F")]
			[Address(RVA = "0x10BC3BC", Offset = "0x10BC3BC", VA = "0x10BC3BC", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000149")]
		public Color32 BackgroundColor
		{
			[Token(Token = "0x6001420")]
			[Address(RVA = "0x10BC3C4", Offset = "0x10BC3C4", VA = "0x10BC3C4", Slot = "5")]
			get
			{
				return default(Color32);
			}
		}

		[Token(Token = "0x1700014A")]
		public bool UseDefaultTextColor
		{
			[Token(Token = "0x6001421")]
			[Address(RVA = "0x10BC400", Offset = "0x10BC400", VA = "0x10BC400", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700014B")]
		public Color32 TextColor
		{
			[Token(Token = "0x6001422")]
			[Address(RVA = "0x10BC408", Offset = "0x10BC408", VA = "0x10BC408", Slot = "7")]
			get
			{
				return default(Color32);
			}
		}

		[Token(Token = "0x1700014C")]
		public Font Font
		{
			[Token(Token = "0x6001423")]
			[Address(RVA = "0x10BC410", Offset = "0x10BC410", VA = "0x10BC410", Slot = "8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014D")]
		public int FontSize
		{
			[Token(Token = "0x6001424")]
			[Address(RVA = "0x10BC418", Offset = "0x10BC418", VA = "0x10BC418", Slot = "9")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700014E")]
		public FontStyle FontStyle
		{
			[Token(Token = "0x6001425")]
			[Address(RVA = "0x10BC420", Offset = "0x10BC420", VA = "0x10BC420", Slot = "10")]
			get
			{
				return default(FontStyle);
			}
		}

		[Token(Token = "0x1700014F")]
		public TextAnchor Alignment
		{
			[Token(Token = "0x6001426")]
			[Address(RVA = "0x10BC428", Offset = "0x10BC428", VA = "0x10BC428", Slot = "11")]
			get
			{
				return default(TextAnchor);
			}
		}

		[Token(Token = "0x17000150")]
		public bool TextDropShadow
		{
			[Token(Token = "0x6001427")]
			[Address(RVA = "0x10BC430", Offset = "0x10BC430", VA = "0x10BC430", Slot = "12")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001428")]
		[Address(RVA = "0x10BC438", Offset = "0x10BC438", VA = "0x10BC438")]
		public PrettyObject()
		{
		}

		[SpecialName]
		[Token(Token = "0x6001429")]
		[Address(RVA = "0x10BC4C0", Offset = "0x10BC4C0", VA = "0x10BC4C0", Slot = "13")]
		private string PrettyHierarchy.IPrettyComponent.get_name()
		{
			return null;
		}

		[SpecialName]
		[Token(Token = "0x600142A")]
		[Address(RVA = "0x10BC4C8", Offset = "0x10BC4C8", VA = "0x10BC4C8", Slot = "14")]
		private GameObject PrettyHierarchy.IPrettyComponent.get_gameObject()
		{
			return null;
		}
	}
}
namespace DG.Tweening
{
	[Token(Token = "0x20002F4")]
	public static class DOTweenModuleAudio
	{
		[Token(Token = "0x20003DF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EA1C", Offset = "0xA7EA1C")]
		private sealed class <>c__DisplayClass0_0
		{
			[Token(Token = "0x400120B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AudioSource target;

			[Token(Token = "0x600184C")]
			[Address(RVA = "0x1A81B40", Offset = "0x1A81B40", VA = "0x1A81B40")]
			public <>c__DisplayClass0_0()
			{
			}

			[Token(Token = "0x600184D")]
			[Address(RVA = "0x1A81B48", Offset = "0x1A81B48", VA = "0x1A81B48")]
			internal float <DOFade>b__0()
			{
				return default(float);
			}

			[Token(Token = "0x600184E")]
			[Address(RVA = "0x1A81B64", Offset = "0x1A81B64", VA = "0x1A81B64")]
			internal void <DOFade>b__1(float x)
			{
			}
		}

		[Token(Token = "0x20003E0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EA2C", Offset = "0xA7EA2C")]
		private sealed class <>c__DisplayClass1_0
		{
			[Token(Token = "0x400120C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AudioSource target;

			[Token(Token = "0x600184F")]
			[Address(RVA = "0x1A81B80", Offset = "0x1A81B80", VA = "0x1A81B80")]
			public <>c__DisplayClass1_0()
			{
			}

			[Token(Token = "0x6001850")]
			[Address(RVA = "0x1A81B88", Offset = "0x1A81B88", VA = "0x1A81B88")]
			internal float <DOPitch>b__0()
			{
				return default(float);
			}

			[Token(Token = "0x6001851")]
			[Address(RVA = "0x1A81BA4", Offset = "0x1A81BA4", VA = "0x1A81BA4")]
			internal void <DOPitch>b__1(float x)
			{
			}
		}

		[Token(Token = "0x20003E1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EA3C", Offset = "0xA7EA3C")]
		private sealed class <>c__DisplayClass2_0
		{
			[Token(Token = "0x400120D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public AudioMixer target;

			[Token(Token = "0x400120E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string floatName;

			[Token(Token = "0x6001852")]
			[Address(RVA = "0x1E2DB58", Offset = "0x1E2DB58", VA = "0x1E2DB58")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x6001853")]
			[Address(RVA = "0x1E2DB60", Offset = "0x1E2DB60", VA = "0x1E2DB60")]
			internal float <DOSetFloat>b__0()
			{
				return default(float);
			}

			[Token(Token = "0x6001854")]
			[Address(RVA = "0x1E2DBA0", Offset = "0x1E2DBA0", VA = "0x1E2DBA0")]
			internal void <DOSetFloat>b__1(float x)
			{
			}
		}

		[Token(Token = "0x600142B")]
		[Address(RVA = "0x169AF14", Offset = "0x169AF14", VA = "0x169AF14")]
		public static TweenerCore<float, float, FloatOptions> DOFade(this AudioSource target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x600142C")]
		[Address(RVA = "0x169B0E4", Offset = "0x169B0E4", VA = "0x169B0E4")]
		public static TweenerCore<float, float, FloatOptions> DOPitch(this AudioSource target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x600142D")]
		[Address(RVA = "0x169B28C", Offset = "0x169B28C", VA = "0x169B28C")]
		public static TweenerCore<float, float, FloatOptions> DOSetFloat(this AudioMixer target, string floatName, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x600142E")]
		[Address(RVA = "0x169B448", Offset = "0x169B448", VA = "0x169B448")]
		public static int DOComplete(this AudioMixer target, bool withCallbacks = false)
		{
			return default(int);
		}

		[Token(Token = "0x600142F")]
		[Address(RVA = "0x169B4BC", Offset = "0x169B4BC", VA = "0x169B4BC")]
		public static int DOKill(this AudioMixer target, bool complete = false)
		{
			return default(int);
		}

		[Token(Token = "0x6001430")]
		[Address(RVA = "0x169B530", Offset = "0x169B530", VA = "0x169B530")]
		public static int DOFlip(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6001431")]
		[Address(RVA = "0x169B594", Offset = "0x169B594", VA = "0x169B594")]
		public static int DOGoto(this AudioMixer target, float to, bool andPlay = false)
		{
			return default(int);
		}

		[Token(Token = "0x6001432")]
		[Address(RVA = "0x169B618", Offset = "0x169B618", VA = "0x169B618")]
		public static int DOPause(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6001433")]
		[Address(RVA = "0x169B67C", Offset = "0x169B67C", VA = "0x169B67C")]
		public static int DOPlay(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6001434")]
		[Address(RVA = "0x169B6E0", Offset = "0x169B6E0", VA = "0x169B6E0")]
		public static int DOPlayBackwards(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6001435")]
		[Address(RVA = "0x169B744", Offset = "0x169B744", VA = "0x169B744")]
		public static int DOPlayForward(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6001436")]
		[Address(RVA = "0x169B7A8", Offset = "0x169B7A8", VA = "0x169B7A8")]
		public static int DORestart(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6001437")]
		[Address(RVA = "0x169B814", Offset = "0x169B814", VA = "0x169B814")]
		public static int DORewind(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6001438")]
		[Address(RVA = "0x169B87C", Offset = "0x169B87C", VA = "0x169B87C")]
		public static int DOSmoothRewind(this AudioMixer target)
		{
			return default(int);
		}

		[Token(Token = "0x6001439")]
		[Address(RVA = "0x169B8E0", Offset = "0x169B8E0", VA = "0x169B8E0")]
		public static int DOTogglePause(this AudioMixer target)
		{
			return default(int);
		}
	}
	[Token(Token = "0x20002F5")]
	public static class DOTweenModulePhysics
	{
		[Token(Token = "0x20003E2")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EA4C", Offset = "0xA7EA4C")]
		private sealed class <>c__DisplayClass0_0
		{
			[Token(Token = "0x400120F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody target;

			[Token(Token = "0x6001855")]
			[Address(RVA = "0x1E2DBC4", Offset = "0x1E2DBC4", VA = "0x1E2DBC4")]
			public <>c__DisplayClass0_0()
			{
			}

			[Token(Token = "0x6001856")]
			[Address(RVA = "0x1E2DBCC", Offset = "0x1E2DBCC", VA = "0x1E2DBCC")]
			internal Vector3 <DOMove>b__0()
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x20003E3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EA5C", Offset = "0xA7EA5C")]
		private sealed class <>c__DisplayClass1_0
		{
			[Token(Token = "0x4001210")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody target;

			[Token(Token = "0x6001857")]
			[Address(RVA = "0x1E2DD0C", Offset = "0x1E2DD0C", VA = "0x1E2DD0C")]
			public <>c__DisplayClass1_0()
			{
			}

			[Token(Token = "0x6001858")]
			[Address(RVA = "0x1E2DD14", Offset = "0x1E2DD14", VA = "0x1E2DD14")]
			internal Vector3 <DOMoveX>b__0()
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x20003E4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EA6C", Offset = "0xA7EA6C")]
		private sealed class <>c__DisplayClass2_0
		{
			[Token(Token = "0x4001211")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody target;

			[Token(Token = "0x6001859")]
			[Address(RVA = "0x1E2DD30", Offset = "0x1E2DD30", VA = "0x1E2DD30")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x600185A")]
			[Address(RVA = "0x1E2DD38", Offset = "0x1E2DD38", VA = "0x1E2DD38")]
			internal Vector3 <DOMoveY>b__0()
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x20003E5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EA7C", Offset = "0xA7EA7C")]
		private sealed class <>c__DisplayClass3_0
		{
			[Token(Token = "0x4001212")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody target;

			[Token(Token = "0x600185B")]
			[Address(RVA = "0x1E2DD54", Offset = "0x1E2DD54", VA = "0x1E2DD54")]
			public <>c__DisplayClass3_0()
			{
			}

			[Token(Token = "0x600185C")]
			[Address(RVA = "0x1E2DD5C", Offset = "0x1E2DD5C", VA = "0x1E2DD5C")]
			internal Vector3 <DOMoveZ>b__0()
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x20003E6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EA8C", Offset = "0xA7EA8C")]
		private sealed class <>c__DisplayClass4_0
		{
			[Token(Token = "0x4001213")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody target;

			[Token(Token = "0x600185D")]
			[Address(RVA = "0x1E2DD78", Offset = "0x1E2DD78", VA = "0x1E2DD78")]
			public <>c__DisplayClass4_0()
			{
			}

			[Token(Token = "0x600185E")]
			[Address(RVA = "0x1E2DD80", Offset = "0x1E2DD80", VA = "0x1E2DD80")]
			internal Quaternion <DORotate>b__0()
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x20003E7")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EA9C", Offset = "0xA7EA9C")]
		private sealed class <>c__DisplayClass5_0
		{
			[Token(Token = "0x4001214")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody target;

			[Token(Token = "0x600185F")]
			[Address(RVA = "0x1E2DD9C", Offset = "0x1E2DD9C", VA = "0x1E2DD9C")]
			public <>c__DisplayClass5_0()
			{
			}

			[Token(Token = "0x6001860")]
			[Address(RVA = "0x1E2DDA4", Offset = "0x1E2DDA4", VA = "0x1E2DDA4")]
			internal Quaternion <DOLookAt>b__0()
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x20003E8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EAAC", Offset = "0xA7EAAC")]
		private sealed class <>c__DisplayClass6_0
		{
			[Token(Token = "0x4001215")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody target;

			[Token(Token = "0x4001216")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float startPosY;

			[Token(Token = "0x4001217")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public bool offsetYSet;

			[Token(Token = "0x4001218")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float offsetY;

			[Token(Token = "0x4001219")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Sequence s;

			[Token(Token = "0x400121A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Vector3 endValue;

			[Token(Token = "0x400121B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Tween yTween;

			[Token(Token = "0x6001861")]
			[Address(RVA = "0x1E2DDC0", Offset = "0x1E2DDC0", VA = "0x1E2DDC0")]
			public <>c__DisplayClass6_0()
			{
			}

			[Token(Token = "0x6001862")]
			[Address(RVA = "0x1E2DDC8", Offset = "0x1E2DDC8", VA = "0x1E2DDC8")]
			internal Vector3 <DOJump>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001863")]
			[Address(RVA = "0x1E2DDE4", Offset = "0x1E2DDE4", VA = "0x1E2DDE4")]
			internal void <DOJump>b__1()
			{
			}

			[Token(Token = "0x6001864")]
			[Address(RVA = "0x1E2DE18", Offset = "0x1E2DE18", VA = "0x1E2DE18")]
			internal Vector3 <DOJump>b__2()
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001865")]
			[Address(RVA = "0x1E2DE34", Offset = "0x1E2DE34", VA = "0x1E2DE34")]
			internal Vector3 <DOJump>b__3()
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001866")]
			[Address(RVA = "0x1E2DE50", Offset = "0x1E2DE50", VA = "0x1E2DE50")]
			internal void <DOJump>b__4()
			{
			}
		}

		[Token(Token = "0x20003E9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EABC", Offset = "0xA7EABC")]
		private sealed class <>c__DisplayClass7_0
		{
			[Token(Token = "0x400121C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody target;

			[Token(Token = "0x6001867")]
			[Address(RVA = "0x1E2DF10", Offset = "0x1E2DF10", VA = "0x1E2DF10")]
			public <>c__DisplayClass7_0()
			{
			}

			[Token(Token = "0x6001868")]
			[Address(RVA = "0x1E2DF18", Offset = "0x1E2DF18", VA = "0x1E2DF18")]
			internal Vector3 <DOPath>b__0()
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x20003EA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EACC", Offset = "0xA7EACC")]
		private sealed class <>c__DisplayClass8_0
		{
			[Token(Token = "0x400121D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform trans;

			[Token(Token = "0x400121E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Rigidbody target;

			[Token(Token = "0x6001869")]
			[Address(RVA = "0x1E2DF34", Offset = "0x1E2DF34", VA = "0x1E2DF34")]
			public <>c__DisplayClass8_0()
			{
			}

			[Token(Token = "0x600186A")]
			[Address(RVA = "0x1E2DF3C", Offset = "0x1E2DF3C", VA = "0x1E2DF3C")]
			internal Vector3 <DOLocalPath>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x600186B")]
			[Address(RVA = "0x1E2DF58", Offset = "0x1E2DF58", VA = "0x1E2DF58")]
			internal void <DOLocalPath>b__1(Vector3 x)
			{
			}
		}

		[Token(Token = "0x20003EB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EADC", Offset = "0xA7EADC")]
		private sealed class <>c__DisplayClass9_0
		{
			[Token(Token = "0x400121F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody target;

			[Token(Token = "0x600186C")]
			[Address(RVA = "0x1E2E058", Offset = "0x1E2E058", VA = "0x1E2E058")]
			public <>c__DisplayClass9_0()
			{
			}

			[Token(Token = "0x600186D")]
			[Address(RVA = "0x1E2E060", Offset = "0x1E2E060", VA = "0x1E2E060")]
			internal Vector3 <DOPath>b__0()
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x20003EC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EAEC", Offset = "0xA7EAEC")]
		private sealed class <>c__DisplayClass10_0
		{
			[Token(Token = "0x4001220")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform trans;

			[Token(Token = "0x4001221")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Rigidbody target;

			[Token(Token = "0x600186E")]
			[Address(RVA = "0x1E2DBE8", Offset = "0x1E2DBE8", VA = "0x1E2DBE8")]
			public <>c__DisplayClass10_0()
			{
			}

			[Token(Token = "0x600186F")]
			[Address(RVA = "0x1E2DBF0", Offset = "0x1E2DBF0", VA = "0x1E2DBF0")]
			internal Vector3 <DOLocalPath>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001870")]
			[Address(RVA = "0x1E2DC0C", Offset = "0x1E2DC0C", VA = "0x1E2DC0C")]
			internal void <DOLocalPath>b__1(Vector3 x)
			{
			}
		}

		[Token(Token = "0x600143A")]
		[Address(RVA = "0x169B944", Offset = "0x169B944", VA = "0x169B944")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOMove(this Rigidbody target, Vector3 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600143B")]
		[Address(RVA = "0x169BB20", Offset = "0x169BB20", VA = "0x169BB20")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOMoveX(this Rigidbody target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600143C")]
		[Address(RVA = "0x169BCF0", Offset = "0x169BCF0", VA = "0x169BCF0")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOMoveY(this Rigidbody target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600143D")]
		[Address(RVA = "0x169BEC0", Offset = "0x169BEC0", VA = "0x169BEC0")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOMoveZ(this Rigidbody target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600143E")]
		[Address(RVA = "0x169C090", Offset = "0x169C090", VA = "0x169C090")]
		public static TweenerCore<Quaternion, Vector3, QuaternionOptions> DORotate(this Rigidbody target, Vector3 endValue, float duration, RotateMode mode = RotateMode.Fast)
		{
			return null;
		}

		[Token(Token = "0x600143F")]
		[Address(RVA = "0x169C268", Offset = "0x169C268", VA = "0x169C268")]
		public static TweenerCore<Quaternion, Vector3, QuaternionOptions> DOLookAt(this Rigidbody target, Vector3 towards, float duration, AxisConstraint axisConstraint = AxisConstraint.None, [Optional] Vector3? up)
		{
			return null;
		}

		[Token(Token = "0x6001440")]
		[Address(RVA = "0x169C4BC", Offset = "0x169C4BC", VA = "0x169C4BC")]
		public static Sequence DOJump(this Rigidbody target, Vector3 endValue, float jumpPower, int numJumps, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001441")]
		[Address(RVA = "0x169C9F0", Offset = "0x169C9F0", VA = "0x169C9F0")]
		public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOPath(this Rigidbody target, Vector3[] path, float duration, PathType pathType = PathType.Linear, PathMode pathMode = PathMode.Full3D, int resolution = 10, [Optional] Color? gizmoColor)
		{
			return null;
		}

		[Token(Token = "0x6001442")]
		[Address(RVA = "0x169CC6C", Offset = "0x169CC6C", VA = "0x169CC6C")]
		public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOLocalPath(this Rigidbody target, Vector3[] path, float duration, PathType pathType = PathType.Linear, PathMode pathMode = PathMode.Full3D, int resolution = 10, [Optional] Color? gizmoColor)
		{
			return null;
		}

		[Token(Token = "0x6001443")]
		[Address(RVA = "0x169CF08", Offset = "0x169CF08", VA = "0x169CF08")]
		internal static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOPath(this Rigidbody target, DG.Tweening.Plugins.Core.PathCore.Path path, float duration, PathMode pathMode = PathMode.Full3D)
		{
			return null;
		}

		[Token(Token = "0x6001444")]
		[Address(RVA = "0x169D0F8", Offset = "0x169D0F8", VA = "0x169D0F8")]
		internal static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOLocalPath(this Rigidbody target, DG.Tweening.Plugins.Core.PathCore.Path path, float duration, PathMode pathMode = PathMode.Full3D)
		{
			return null;
		}
	}
	[Token(Token = "0x20002F6")]
	public static class DOTweenModulePhysics2D
	{
		[Token(Token = "0x20003ED")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EAFC", Offset = "0xA7EAFC")]
		private sealed class <>c__DisplayClass0_0
		{
			[Token(Token = "0x4001222")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody2D target;

			[Token(Token = "0x6001871")]
			[Address(RVA = "0x1E2E07C", Offset = "0x1E2E07C", VA = "0x1E2E07C")]
			public <>c__DisplayClass0_0()
			{
			}

			[Token(Token = "0x6001872")]
			[Address(RVA = "0x1E2E084", Offset = "0x1E2E084", VA = "0x1E2E084")]
			internal Vector2 <DOMove>b__0()
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x20003EE")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EB0C", Offset = "0xA7EB0C")]
		private sealed class <>c__DisplayClass1_0
		{
			[Token(Token = "0x4001223")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody2D target;

			[Token(Token = "0x6001873")]
			[Address(RVA = "0x1E2E0A0", Offset = "0x1E2E0A0", VA = "0x1E2E0A0")]
			public <>c__DisplayClass1_0()
			{
			}

			[Token(Token = "0x6001874")]
			[Address(RVA = "0x1E2E0A8", Offset = "0x1E2E0A8", VA = "0x1E2E0A8")]
			internal Vector2 <DOMoveX>b__0()
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x20003EF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EB1C", Offset = "0xA7EB1C")]
		private sealed class <>c__DisplayClass2_0
		{
			[Token(Token = "0x4001224")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody2D target;

			[Token(Token = "0x6001875")]
			[Address(RVA = "0x1E2E0C4", Offset = "0x1E2E0C4", VA = "0x1E2E0C4")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x6001876")]
			[Address(RVA = "0x1E2E0CC", Offset = "0x1E2E0CC", VA = "0x1E2E0CC")]
			internal Vector2 <DOMoveY>b__0()
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x20003F0")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EB2C", Offset = "0xA7EB2C")]
		private sealed class <>c__DisplayClass3_0
		{
			[Token(Token = "0x4001225")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody2D target;

			[Token(Token = "0x6001877")]
			[Address(RVA = "0x1E2E0E8", Offset = "0x1E2E0E8", VA = "0x1E2E0E8")]
			public <>c__DisplayClass3_0()
			{
			}

			[Token(Token = "0x6001878")]
			[Address(RVA = "0x1E2E0F0", Offset = "0x1E2E0F0", VA = "0x1E2E0F0")]
			internal float <DORotate>b__0()
			{
				return default(float);
			}
		}

		[Token(Token = "0x20003F1")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EB3C", Offset = "0xA7EB3C")]
		private sealed class <>c__DisplayClass4_0
		{
			[Token(Token = "0x4001226")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody2D target;

			[Token(Token = "0x4001227")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float startPosY;

			[Token(Token = "0x4001228")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public bool offsetYSet;

			[Token(Token = "0x4001229")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float offsetY;

			[Token(Token = "0x400122A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Sequence s;

			[Token(Token = "0x400122B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Vector2 endValue;

			[Token(Token = "0x400122C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Tween yTween;

			[Token(Token = "0x6001879")]
			[Address(RVA = "0x1E2E10C", Offset = "0x1E2E10C", VA = "0x1E2E10C")]
			public <>c__DisplayClass4_0()
			{
			}

			[Token(Token = "0x600187A")]
			[Address(RVA = "0x1E2E114", Offset = "0x1E2E114", VA = "0x1E2E114")]
			internal Vector2 <DOJump>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x600187B")]
			[Address(RVA = "0x1E2E130", Offset = "0x1E2E130", VA = "0x1E2E130")]
			internal void <DOJump>b__1(Vector2 x)
			{
			}

			[Token(Token = "0x600187C")]
			[Address(RVA = "0x1E2E14C", Offset = "0x1E2E14C", VA = "0x1E2E14C")]
			internal void <DOJump>b__2()
			{
			}

			[Token(Token = "0x600187D")]
			[Address(RVA = "0x1E2E180", Offset = "0x1E2E180", VA = "0x1E2E180")]
			internal Vector2 <DOJump>b__3()
			{
				return default(Vector2);
			}

			[Token(Token = "0x600187E")]
			[Address(RVA = "0x1E2E19C", Offset = "0x1E2E19C", VA = "0x1E2E19C")]
			internal void <DOJump>b__4(Vector2 x)
			{
			}

			[Token(Token = "0x600187F")]
			[Address(RVA = "0x1E2E1B8", Offset = "0x1E2E1B8", VA = "0x1E2E1B8")]
			internal void <DOJump>b__5()
			{
			}
		}

		[Token(Token = "0x20003F2")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EB4C", Offset = "0xA7EB4C")]
		private sealed class <>c__DisplayClass5_0
		{
			[Token(Token = "0x400122D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody2D target;

			[Token(Token = "0x6001880")]
			[Address(RVA = "0x1E2E270", Offset = "0x1E2E270", VA = "0x1E2E270")]
			public <>c__DisplayClass5_0()
			{
			}

			[Token(Token = "0x6001881")]
			[Address(RVA = "0x1E2E278", Offset = "0x1E2E278", VA = "0x1E2E278")]
			internal Vector3 <DOPath>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001882")]
			[Address(RVA = "0x1E2E2A0", Offset = "0x1E2E2A0", VA = "0x1E2E2A0")]
			internal void <DOPath>b__1(Vector3 x)
			{
			}
		}

		[Token(Token = "0x20003F3")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EB5C", Offset = "0xA7EB5C")]
		private sealed class <>c__DisplayClass6_0
		{
			[Token(Token = "0x400122E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform trans;

			[Token(Token = "0x400122F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Rigidbody2D target;

			[Token(Token = "0x6001883")]
			[Address(RVA = "0x1E2E2BC", Offset = "0x1E2E2BC", VA = "0x1E2E2BC")]
			public <>c__DisplayClass6_0()
			{
			}

			[Token(Token = "0x6001884")]
			[Address(RVA = "0x1E2E2C4", Offset = "0x1E2E2C4", VA = "0x1E2E2C4")]
			internal Vector3 <DOLocalPath>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x6001885")]
			[Address(RVA = "0x1E2E2E0", Offset = "0x1E2E2E0", VA = "0x1E2E2E0")]
			internal void <DOLocalPath>b__1(Vector3 x)
			{
			}
		}

		[Token(Token = "0x6001445")]
		[Address(RVA = "0x169D308", Offset = "0x169D308", VA = "0x169D308")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOMove(this Rigidbody2D target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001446")]
		[Address(RVA = "0x169D4DC", Offset = "0x169D4DC", VA = "0x169D4DC")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOMoveX(this Rigidbody2D target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001447")]
		[Address(RVA = "0x169D6A8", Offset = "0x169D6A8", VA = "0x169D6A8")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOMoveY(this Rigidbody2D target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001448")]
		[Address(RVA = "0x169D874", Offset = "0x169D874", VA = "0x169D874")]
		public static TweenerCore<float, float, FloatOptions> DORotate(this Rigidbody2D target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001449")]
		[Address(RVA = "0x169DA20", Offset = "0x169DA20", VA = "0x169DA20")]
		public static Sequence DOJump(this Rigidbody2D target, Vector2 endValue, float jumpPower, int numJumps, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600144A")]
		[Address(RVA = "0x169DE7C", Offset = "0x169DE7C", VA = "0x169DE7C")]
		public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOPath(this Rigidbody2D target, Vector2[] path, float duration, PathType pathType = PathType.Linear, PathMode pathMode = PathMode.Full3D, int resolution = 10, [Optional] Color? gizmoColor)
		{
			return null;
		}

		[Token(Token = "0x600144B")]
		[Address(RVA = "0x169E17C", Offset = "0x169E17C", VA = "0x169E17C")]
		public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> DOLocalPath(this Rigidbody2D target, Vector2[] path, float duration, PathType pathType = PathType.Linear, PathMode pathMode = PathMode.Full3D, int resolution = 10, [Optional] Color? gizmoColor)
		{
			return null;
		}
	}
	[Token(Token = "0x20002F7")]
	public static class DOTweenModuleSprite
	{
		[Token(Token = "0x20003F4")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EB6C", Offset = "0xA7EB6C")]
		private sealed class <>c__DisplayClass0_0
		{
			[Token(Token = "0x4001230")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SpriteRenderer target;

			[Token(Token = "0x6001886")]
			[Address(RVA = "0x1E2E3D8", Offset = "0x1E2E3D8", VA = "0x1E2E3D8")]
			public <>c__DisplayClass0_0()
			{
			}

			[Token(Token = "0x6001887")]
			[Address(RVA = "0x1E2E3E0", Offset = "0x1E2E3E0", VA = "0x1E2E3E0")]
			internal Color <DOColor>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x6001888")]
			[Address(RVA = "0x1E2E3FC", Offset = "0x1E2E3FC", VA = "0x1E2E3FC")]
			internal void <DOColor>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x20003F5")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EB7C", Offset = "0xA7EB7C")]
		private sealed class <>c__DisplayClass1_0
		{
			[Token(Token = "0x4001231")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public SpriteRenderer target;

			[Token(Token = "0x6001889")]
			[Address(RVA = "0x1E2E418", Offset = "0x1E2E418", VA = "0x1E2E418")]
			public <>c__DisplayClass1_0()
			{
			}

			[Token(Token = "0x600188A")]
			[Address(RVA = "0x1E2E420", Offset = "0x1E2E420", VA = "0x1E2E420")]
			internal Color <DOFade>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x600188B")]
			[Address(RVA = "0x1E2E43C", Offset = "0x1E2E43C", VA = "0x1E2E43C")]
			internal void <DOFade>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x20003F6")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EB8C", Offset = "0xA7EB8C")]
		private sealed class <>c__DisplayClass3_0
		{
			[Token(Token = "0x4001232")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Color to;

			[Token(Token = "0x4001233")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SpriteRenderer target;

			[Token(Token = "0x600188C")]
			[Address(RVA = "0x1E2E458", Offset = "0x1E2E458", VA = "0x1E2E458")]
			public <>c__DisplayClass3_0()
			{
			}

			[Token(Token = "0x600188D")]
			[Address(RVA = "0x1E2E460", Offset = "0x1E2E460", VA = "0x1E2E460")]
			internal Color <DOBlendableColor>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x600188E")]
			[Address(RVA = "0x1E2E46C", Offset = "0x1E2E46C", VA = "0x1E2E46C")]
			internal void <DOBlendableColor>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x600144C")]
		[Address(RVA = "0x169E4A0", Offset = "0x169E4A0", VA = "0x169E4A0")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this SpriteRenderer target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x600144D")]
		[Address(RVA = "0x169E670", Offset = "0x169E670", VA = "0x169E670")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this SpriteRenderer target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x600144E")]
		[Address(RVA = "0x169E818", Offset = "0x169E818", VA = "0x169E818")]
		public static Sequence DOGradientColor(this SpriteRenderer target, Gradient gradient, float duration)
		{
			return null;
		}

		[Token(Token = "0x600144F")]
		[Address(RVA = "0x169EA04", Offset = "0x169EA04", VA = "0x169EA04")]
		public static Tweener DOBlendableColor(this SpriteRenderer target, Color endValue, float duration)
		{
			return null;
		}
	}
	[Token(Token = "0x20002F8")]
	public static class DOTweenModuleUI
	{
		[Token(Token = "0x20003F7")]
		public static class Utils
		{
			[Token(Token = "0x600188F")]
			[Address(RVA = "0x1E2F500", Offset = "0x1E2F500", VA = "0x1E2F500")]
			public static Vector2 SwitchToRectTransform(RectTransform from, RectTransform to)
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x20003F8")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EB9C", Offset = "0xA7EB9C")]
		private sealed class <>c__DisplayClass0_0
		{
			[Token(Token = "0x4001234")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public CanvasGroup target;

			[Token(Token = "0x6001890")]
			[Address(RVA = "0x1E2E518", Offset = "0x1E2E518", VA = "0x1E2E518")]
			public <>c__DisplayClass0_0()
			{
			}

			[Token(Token = "0x6001891")]
			[Address(RVA = "0x1E2E520", Offset = "0x1E2E520", VA = "0x1E2E520")]
			internal float <DOFade>b__0()
			{
				return default(float);
			}

			[Token(Token = "0x6001892")]
			[Address(RVA = "0x1E2E53C", Offset = "0x1E2E53C", VA = "0x1E2E53C")]
			internal void <DOFade>b__1(float x)
			{
			}
		}

		[Token(Token = "0x20003F9")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EBAC", Offset = "0xA7EBAC")]
		private sealed class <>c__DisplayClass1_0
		{
			[Token(Token = "0x4001235")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Graphic target;

			[Token(Token = "0x6001893")]
			[Address(RVA = "0x1E2E7E0", Offset = "0x1E2E7E0", VA = "0x1E2E7E0")]
			public <>c__DisplayClass1_0()
			{
			}

			[Token(Token = "0x6001894")]
			[Address(RVA = "0x1E2E7E8", Offset = "0x1E2E7E8", VA = "0x1E2E7E8")]
			internal Color <DOColor>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x6001895")]
			[Address(RVA = "0x1E2E80C", Offset = "0x1E2E80C", VA = "0x1E2E80C")]
			internal void <DOColor>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x20003FA")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EBBC", Offset = "0xA7EBBC")]
		private sealed class <>c__DisplayClass2_0
		{
			[Token(Token = "0x4001236")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Graphic target;

			[Token(Token = "0x6001896")]
			[Address(RVA = "0x1E2EBF4", Offset = "0x1E2EBF4", VA = "0x1E2EBF4")]
			public <>c__DisplayClass2_0()
			{
			}

			[Token(Token = "0x6001897")]
			[Address(RVA = "0x1E2EBFC", Offset = "0x1E2EBFC", VA = "0x1E2EBFC")]
			internal Color <DOFade>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x6001898")]
			[Address(RVA = "0x1E2EC20", Offset = "0x1E2EC20", VA = "0x1E2EC20")]
			internal void <DOFade>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x20003FB")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EBCC", Offset = "0xA7EBCC")]
		private sealed class <>c__DisplayClass3_0
		{
			[Token(Token = "0x4001237")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Image target;

			[Token(Token = "0x6001899")]
			[Address(RVA = "0x1E2F0F8", Offset = "0x1E2F0F8", VA = "0x1E2F0F8")]
			public <>c__DisplayClass3_0()
			{
			}

			[Token(Token = "0x600189A")]
			[Address(RVA = "0x1E2F100", Offset = "0x1E2F100", VA = "0x1E2F100")]
			internal Color <DOColor>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x600189B")]
			[Address(RVA = "0x1E2F124", Offset = "0x1E2F124", VA = "0x1E2F124")]
			internal void <DOColor>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x20003FC")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EBDC", Offset = "0xA7EBDC")]
		private sealed class <>c__DisplayClass4_0
		{
			[Token(Token = "0x4001238")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Image target;

			[Token(Token = "0x600189C")]
			[Address(RVA = "0x1E2F218", Offset = "0x1E2F218", VA = "0x1E2F218")]
			public <>c__DisplayClass4_0()
			{
			}

			[Token(Token = "0x600189D")]
			[Address(RVA = "0x1E2F220", Offset = "0x1E2F220", VA = "0x1E2F220")]
			internal Color <DOFade>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x600189E")]
			[Address(RVA = "0x1E2F244", Offset = "0x1E2F244", VA = "0x1E2F244")]
			internal void <DOFade>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x20003FD")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EBEC", Offset = "0xA7EBEC")]
		private sealed class <>c__DisplayClass5_0
		{
			[Token(Token = "0x4001239")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Image target;

			[Token(Token = "0x600189F")]
			[Address(RVA = "0x1E2F268", Offset = "0x1E2F268", VA = "0x1E2F268")]
			public <>c__DisplayClass5_0()
			{
			}

			[Token(Token = "0x60018A0")]
			[Address(RVA = "0x1E2F270", Offset = "0x1E2F270", VA = "0x1E2F270")]
			internal float <DOFillAmount>b__0()
			{
				return default(float);
			}

			[Token(Token = "0x60018A1")]
			[Address(RVA = "0x1E2F28C", Offset = "0x1E2F28C", VA = "0x1E2F28C")]
			internal void <DOFillAmount>b__1(float x)
			{
			}
		}

		[Token(Token = "0x20003FE")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EBFC", Offset = "0xA7EBFC")]
		private sealed class <>c__DisplayClass7_0
		{
			[Token(Token = "0x400123A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public LayoutElement target;

			[Token(Token = "0x60018A2")]
			[Address(RVA = "0x1E2F2A8", Offset = "0x1E2F2A8", VA = "0x1E2F2A8")]
			public <>c__DisplayClass7_0()
			{
			}

			[Token(Token = "0x60018A3")]
			[Address(RVA = "0x1E2F2B0", Offset = "0x1E2F2B0", VA = "0x1E2F2B0")]
			internal Vector2 <DOFlexibleSize>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x60018A4")]
			[Address(RVA = "0x1E2F314", Offset = "0x1E2F314", VA = "0x1E2F314")]
			internal void <DOFlexibleSize>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x20003FF")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EC0C", Offset = "0xA7EC0C")]
		private sealed class <>c__DisplayClass8_0
		{
			[Token(Token = "0x400123B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public LayoutElement target;

			[Token(Token = "0x60018A5")]
			[Address(RVA = "0x1E2F370", Offset = "0x1E2F370", VA = "0x1E2F370")]
			public <>c__DisplayClass8_0()
			{
			}

			[Token(Token = "0x60018A6")]
			[Address(RVA = "0x1E2F378", Offset = "0x1E2F378", VA = "0x1E2F378")]
			internal Vector2 <DOMinSize>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x60018A7")]
			[Address(RVA = "0x1E2F3DC", Offset = "0x1E2F3DC", VA = "0x1E2F3DC")]
			internal void <DOMinSize>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x2000400")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EC1C", Offset = "0xA7EC1C")]
		private sealed class <>c__DisplayClass9_0
		{
			[Token(Token = "0x400123C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public LayoutElement target;

			[Token(Token = "0x60018A8")]
			[Address(RVA = "0x1E2F438", Offset = "0x1E2F438", VA = "0x1E2F438")]
			public <>c__DisplayClass9_0()
			{
			}

			[Token(Token = "0x60018A9")]
			[Address(RVA = "0x1E2F440", Offset = "0x1E2F440", VA = "0x1E2F440")]
			internal Vector2 <DOPreferredSize>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x60018AA")]
			[Address(RVA = "0x1E2F4A4", Offset = "0x1E2F4A4", VA = "0x1E2F4A4")]
			internal void <DOPreferredSize>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x2000401")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EC2C", Offset = "0xA7EC2C")]
		private sealed class <>c__DisplayClass10_0
		{
			[Token(Token = "0x400123D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Outline target;

			[Token(Token = "0x60018AB")]
			[Address(RVA = "0x1E2E558", Offset = "0x1E2E558", VA = "0x1E2E558")]
			public <>c__DisplayClass10_0()
			{
			}

			[Token(Token = "0x60018AC")]
			[Address(RVA = "0x1E2E560", Offset = "0x1E2E560", VA = "0x1E2E560")]
			internal Color <DOColor>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x60018AD")]
			[Address(RVA = "0x1E2E580", Offset = "0x1E2E580", VA = "0x1E2E580")]
			internal void <DOColor>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x2000402")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EC3C", Offset = "0xA7EC3C")]
		private sealed class <>c__DisplayClass11_0
		{
			[Token(Token = "0x400123E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Outline target;

			[Token(Token = "0x60018AE")]
			[Address(RVA = "0x1E2E59C", Offset = "0x1E2E59C", VA = "0x1E2E59C")]
			public <>c__DisplayClass11_0()
			{
			}

			[Token(Token = "0x60018AF")]
			[Address(RVA = "0x1E2E5A4", Offset = "0x1E2E5A4", VA = "0x1E2E5A4")]
			internal Color <DOFade>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x60018B0")]
			[Address(RVA = "0x1E2E5C4", Offset = "0x1E2E5C4", VA = "0x1E2E5C4")]
			internal void <DOFade>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x2000403")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EC4C", Offset = "0xA7EC4C")]
		private sealed class <>c__DisplayClass12_0
		{
			[Token(Token = "0x400123F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Outline target;

			[Token(Token = "0x60018B1")]
			[Address(RVA = "0x1E2E5E0", Offset = "0x1E2E5E0", VA = "0x1E2E5E0")]
			public <>c__DisplayClass12_0()
			{
			}

			[Token(Token = "0x60018B2")]
			[Address(RVA = "0x1E2E5E8", Offset = "0x1E2E5E8", VA = "0x1E2E5E8")]
			internal Vector2 <DOScale>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x60018B3")]
			[Address(RVA = "0x1E2E604", Offset = "0x1E2E604", VA = "0x1E2E604")]
			internal void <DOScale>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x2000404")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EC5C", Offset = "0xA7EC5C")]
		private sealed class <>c__DisplayClass13_0
		{
			[Token(Token = "0x4001240")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RectTransform target;

			[Token(Token = "0x60018B4")]
			[Address(RVA = "0x1E2E620", Offset = "0x1E2E620", VA = "0x1E2E620")]
			public <>c__DisplayClass13_0()
			{
			}

			[Token(Token = "0x60018B5")]
			[Address(RVA = "0x1E2E628", Offset = "0x1E2E628", VA = "0x1E2E628")]
			internal Vector2 <DOAnchorPos>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x60018B6")]
			[Address(RVA = "0x1E2E644", Offset = "0x1E2E644", VA = "0x1E2E644")]
			internal void <DOAnchorPos>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x2000405")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EC6C", Offset = "0xA7EC6C")]
		private sealed class <>c__DisplayClass14_0
		{
			[Token(Token = "0x4001241")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RectTransform target;

			[Token(Token = "0x60018B7")]
			[Address(RVA = "0x1E2E660", Offset = "0x1E2E660", VA = "0x1E2E660")]
			public <>c__DisplayClass14_0()
			{
			}

			[Token(Token = "0x60018B8")]
			[Address(RVA = "0x1E2E668", Offset = "0x1E2E668", VA = "0x1E2E668")]
			internal Vector2 <DOAnchorPosX>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x60018B9")]
			[Address(RVA = "0x1E2E684", Offset = "0x1E2E684", VA = "0x1E2E684")]
			internal void <DOAnchorPosX>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x2000406")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EC7C", Offset = "0xA7EC7C")]
		private sealed class <>c__DisplayClass15_0
		{
			[Token(Token = "0x4001242")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RectTransform target;

			[Token(Token = "0x60018BA")]
			[Address(RVA = "0x1E2E6A0", Offset = "0x1E2E6A0", VA = "0x1E2E6A0")]
			public <>c__DisplayClass15_0()
			{
			}

			[Token(Token = "0x60018BB")]
			[Address(RVA = "0x1E2E6A8", Offset = "0x1E2E6A8", VA = "0x1E2E6A8")]
			internal Vector2 <DOAnchorPosY>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x60018BC")]
			[Address(RVA = "0x1E2E6C4", Offset = "0x1E2E6C4", VA = "0x1E2E6C4")]
			internal void <DOAnchorPosY>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x2000407")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EC8C", Offset = "0xA7EC8C")]
		private sealed class <>c__DisplayClass16_0
		{
			[Token(Token = "0x4001243")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RectTransform target;

			[Token(Token = "0x60018BD")]
			[Address(RVA = "0x1E2E6E0", Offset = "0x1E2E6E0", VA = "0x1E2E6E0")]
			public <>c__DisplayClass16_0()
			{
			}

			[Token(Token = "0x60018BE")]
			[Address(RVA = "0x1E2E6E8", Offset = "0x1E2E6E8", VA = "0x1E2E6E8")]
			internal Vector3 <DOAnchorPos3D>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x60018BF")]
			[Address(RVA = "0x1E2E704", Offset = "0x1E2E704", VA = "0x1E2E704")]
			internal void <DOAnchorPos3D>b__1(Vector3 x)
			{
			}
		}

		[Token(Token = "0x2000408")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EC9C", Offset = "0xA7EC9C")]
		private sealed class <>c__DisplayClass17_0
		{
			[Token(Token = "0x4001244")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RectTransform target;

			[Token(Token = "0x60018C0")]
			[Address(RVA = "0x1E2E720", Offset = "0x1E2E720", VA = "0x1E2E720")]
			public <>c__DisplayClass17_0()
			{
			}

			[Token(Token = "0x60018C1")]
			[Address(RVA = "0x1E2E728", Offset = "0x1E2E728", VA = "0x1E2E728")]
			internal Vector3 <DOAnchorPos3DX>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x60018C2")]
			[Address(RVA = "0x1E2E744", Offset = "0x1E2E744", VA = "0x1E2E744")]
			internal void <DOAnchorPos3DX>b__1(Vector3 x)
			{
			}
		}

		[Token(Token = "0x2000409")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7ECAC", Offset = "0xA7ECAC")]
		private sealed class <>c__DisplayClass18_0
		{
			[Token(Token = "0x4001245")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RectTransform target;

			[Token(Token = "0x60018C3")]
			[Address(RVA = "0x1E2E760", Offset = "0x1E2E760", VA = "0x1E2E760")]
			public <>c__DisplayClass18_0()
			{
			}

			[Token(Token = "0x60018C4")]
			[Address(RVA = "0x1E2E768", Offset = "0x1E2E768", VA = "0x1E2E768")]
			internal Vector3 <DOAnchorPos3DY>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x60018C5")]
			[Address(RVA = "0x1E2E784", Offset = "0x1E2E784", VA = "0x1E2E784")]
			internal void <DOAnchorPos3DY>b__1(Vector3 x)
			{
			}
		}

		[Token(Token = "0x200040A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7ECBC", Offset = "0xA7ECBC")]
		private sealed class <>c__DisplayClass19_0
		{
			[Token(Token = "0x4001246")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RectTransform target;

			[Token(Token = "0x60018C6")]
			[Address(RVA = "0x1E2E7A0", Offset = "0x1E2E7A0", VA = "0x1E2E7A0")]
			public <>c__DisplayClass19_0()
			{
			}

			[Token(Token = "0x60018C7")]
			[Address(RVA = "0x1E2E7A8", Offset = "0x1E2E7A8", VA = "0x1E2E7A8")]
			internal Vector3 <DOAnchorPos3DZ>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x60018C8")]
			[Address(RVA = "0x1E2E7C4", Offset = "0x1E2E7C4", VA = "0x1E2E7C4")]
			internal void <DOAnchorPos3DZ>b__1(Vector3 x)
			{
			}
		}

		[Token(Token = "0x200040B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7ECCC", Offset = "0xA7ECCC")]
		private sealed class <>c__DisplayClass20_0
		{
			[Token(Token = "0x4001247")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RectTransform target;

			[Token(Token = "0x60018C9")]
			[Address(RVA = "0x1E2E830", Offset = "0x1E2E830", VA = "0x1E2E830")]
			public <>c__DisplayClass20_0()
			{
			}

			[Token(Token = "0x60018CA")]
			[Address(RVA = "0x1E2E838", Offset = "0x1E2E838", VA = "0x1E2E838")]
			internal Vector2 <DOAnchorMax>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x60018CB")]
			[Address(RVA = "0x1E2E854", Offset = "0x1E2E854", VA = "0x1E2E854")]
			internal void <DOAnchorMax>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x200040C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7ECDC", Offset = "0xA7ECDC")]
		private sealed class <>c__DisplayClass21_0
		{
			[Token(Token = "0x4001248")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RectTransform target;

			[Token(Token = "0x60018CC")]
			[Address(RVA = "0x1E2E870", Offset = "0x1E2E870", VA = "0x1E2E870")]
			public <>c__DisplayClass21_0()
			{
			}

			[Token(Token = "0x60018CD")]
			[Address(RVA = "0x1E2E878", Offset = "0x1E2E878", VA = "0x1E2E878")]
			internal Vector2 <DOAnchorMin>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x60018CE")]
			[Address(RVA = "0x1E2E894", Offset = "0x1E2E894", VA = "0x1E2E894")]
			internal void <DOAnchorMin>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x200040D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7ECEC", Offset = "0xA7ECEC")]
		private sealed class <>c__DisplayClass22_0
		{
			[Token(Token = "0x4001249")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RectTransform target;

			[Token(Token = "0x60018CF")]
			[Address(RVA = "0x1E2E8B0", Offset = "0x1E2E8B0", VA = "0x1E2E8B0")]
			public <>c__DisplayClass22_0()
			{
			}

			[Token(Token = "0x60018D0")]
			[Address(RVA = "0x1E2E8B8", Offset = "0x1E2E8B8", VA = "0x1E2E8B8")]
			internal Vector2 <DOPivot>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x60018D1")]
			[Address(RVA = "0x1E2E8D4", Offset = "0x1E2E8D4", VA = "0x1E2E8D4")]
			internal void <DOPivot>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x200040E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7ECFC", Offset = "0xA7ECFC")]
		private sealed class <>c__DisplayClass23_0
		{
			[Token(Token = "0x400124A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RectTransform target;

			[Token(Token = "0x60018D2")]
			[Address(RVA = "0x1E2E8F0", Offset = "0x1E2E8F0", VA = "0x1E2E8F0")]
			public <>c__DisplayClass23_0()
			{
			}

			[Token(Token = "0x60018D3")]
			[Address(RVA = "0x1E2E8F8", Offset = "0x1E2E8F8", VA = "0x1E2E8F8")]
			internal Vector2 <DOPivotX>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x60018D4")]
			[Address(RVA = "0x1E2E914", Offset = "0x1E2E914", VA = "0x1E2E914")]
			internal void <DOPivotX>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x200040F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7ED0C", Offset = "0xA7ED0C")]
		private sealed class <>c__DisplayClass24_0
		{
			[Token(Token = "0x400124B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RectTransform target;

			[Token(Token = "0x60018D5")]
			[Address(RVA = "0x1E2E930", Offset = "0x1E2E930", VA = "0x1E2E930")]
			public <>c__DisplayClass24_0()
			{
			}

			[Token(Token = "0x60018D6")]
			[Address(RVA = "0x1E2E938", Offset = "0x1E2E938", VA = "0x1E2E938")]
			internal Vector2 <DOPivotY>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x60018D7")]
			[Address(RVA = "0x1E2E954", Offset = "0x1E2E954", VA = "0x1E2E954")]
			internal void <DOPivotY>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x2000410")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7ED1C", Offset = "0xA7ED1C")]
		private sealed class <>c__DisplayClass25_0
		{
			[Token(Token = "0x400124C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RectTransform target;

			[Token(Token = "0x60018D8")]
			[Address(RVA = "0x1E2E970", Offset = "0x1E2E970", VA = "0x1E2E970")]
			public <>c__DisplayClass25_0()
			{
			}

			[Token(Token = "0x60018D9")]
			[Address(RVA = "0x1E2E978", Offset = "0x1E2E978", VA = "0x1E2E978")]
			internal Vector2 <DOSizeDelta>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x60018DA")]
			[Address(RVA = "0x1E2E994", Offset = "0x1E2E994", VA = "0x1E2E994")]
			internal void <DOSizeDelta>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x2000411")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7ED2C", Offset = "0xA7ED2C")]
		private sealed class <>c__DisplayClass26_0
		{
			[Token(Token = "0x400124D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RectTransform target;

			[Token(Token = "0x60018DB")]
			[Address(RVA = "0x1E2E9B0", Offset = "0x1E2E9B0", VA = "0x1E2E9B0")]
			public <>c__DisplayClass26_0()
			{
			}

			[Token(Token = "0x60018DC")]
			[Address(RVA = "0x1E2E9B8", Offset = "0x1E2E9B8", VA = "0x1E2E9B8")]
			internal Vector3 <DOPunchAnchorPos>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x60018DD")]
			[Address(RVA = "0x1E2E9E0", Offset = "0x1E2E9E0", VA = "0x1E2E9E0")]
			internal void <DOPunchAnchorPos>b__1(Vector3 x)
			{
			}
		}

		[Token(Token = "0x2000412")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7ED3C", Offset = "0xA7ED3C")]
		private sealed class <>c__DisplayClass27_0
		{
			[Token(Token = "0x400124E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RectTransform target;

			[Token(Token = "0x60018DE")]
			[Address(RVA = "0x1E2E9FC", Offset = "0x1E2E9FC", VA = "0x1E2E9FC")]
			public <>c__DisplayClass27_0()
			{
			}

			[Token(Token = "0x60018DF")]
			[Address(RVA = "0x1E2EA04", Offset = "0x1E2EA04", VA = "0x1E2EA04")]
			internal Vector3 <DOShakeAnchorPos>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x60018E0")]
			[Address(RVA = "0x1E2EA2C", Offset = "0x1E2EA2C", VA = "0x1E2EA2C")]
			internal void <DOShakeAnchorPos>b__1(Vector3 x)
			{
			}
		}

		[Token(Token = "0x2000413")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7ED4C", Offset = "0xA7ED4C")]
		private sealed class <>c__DisplayClass28_0
		{
			[Token(Token = "0x400124F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RectTransform target;

			[Token(Token = "0x60018E1")]
			[Address(RVA = "0x1E2EA48", Offset = "0x1E2EA48", VA = "0x1E2EA48")]
			public <>c__DisplayClass28_0()
			{
			}

			[Token(Token = "0x60018E2")]
			[Address(RVA = "0x1E2EA50", Offset = "0x1E2EA50", VA = "0x1E2EA50")]
			internal Vector3 <DOShakeAnchorPos>b__0()
			{
				return default(Vector3);
			}

			[Token(Token = "0x60018E3")]
			[Address(RVA = "0x1E2EA78", Offset = "0x1E2EA78", VA = "0x1E2EA78")]
			internal void <DOShakeAnchorPos>b__1(Vector3 x)
			{
			}
		}

		[Token(Token = "0x2000414")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7ED5C", Offset = "0xA7ED5C")]
		private sealed class <>c__DisplayClass29_0
		{
			[Token(Token = "0x4001250")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public RectTransform target;

			[Token(Token = "0x4001251")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float startPosY;

			[Token(Token = "0x4001252")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public bool offsetYSet;

			[Token(Token = "0x4001253")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float offsetY;

			[Token(Token = "0x4001254")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Sequence s;

			[Token(Token = "0x4001255")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Vector2 endValue;

			[Token(Token = "0x60018E4")]
			[Address(RVA = "0x1E2EA94", Offset = "0x1E2EA94", VA = "0x1E2EA94")]
			public <>c__DisplayClass29_0()
			{
			}

			[Token(Token = "0x60018E5")]
			[Address(RVA = "0x1E2EA9C", Offset = "0x1E2EA9C", VA = "0x1E2EA9C")]
			internal Vector2 <DOJumpAnchorPos>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x60018E6")]
			[Address(RVA = "0x1E2EAB8", Offset = "0x1E2EAB8", VA = "0x1E2EAB8")]
			internal void <DOJumpAnchorPos>b__1(Vector2 x)
			{
			}

			[Token(Token = "0x60018E7")]
			[Address(RVA = "0x1E2EAD4", Offset = "0x1E2EAD4", VA = "0x1E2EAD4")]
			internal void <DOJumpAnchorPos>b__2()
			{
			}

			[Token(Token = "0x60018E8")]
			[Address(RVA = "0x1E2EB08", Offset = "0x1E2EB08", VA = "0x1E2EB08")]
			internal Vector2 <DOJumpAnchorPos>b__3()
			{
				return default(Vector2);
			}

			[Token(Token = "0x60018E9")]
			[Address(RVA = "0x1E2EB24", Offset = "0x1E2EB24", VA = "0x1E2EB24")]
			internal void <DOJumpAnchorPos>b__4(Vector2 x)
			{
			}

			[Token(Token = "0x60018EA")]
			[Address(RVA = "0x1E2EB40", Offset = "0x1E2EB40", VA = "0x1E2EB40")]
			internal void <DOJumpAnchorPos>b__5()
			{
			}
		}

		[Token(Token = "0x2000415")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7ED6C", Offset = "0xA7ED6C")]
		private sealed class <>c__DisplayClass30_0
		{
			[Token(Token = "0x4001256")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ScrollRect target;

			[Token(Token = "0x60018EB")]
			[Address(RVA = "0x1E2EC44", Offset = "0x1E2EC44", VA = "0x1E2EC44")]
			public <>c__DisplayClass30_0()
			{
			}

			[Token(Token = "0x60018EC")]
			[Address(RVA = "0x1E2EC4C", Offset = "0x1E2EC4C", VA = "0x1E2EC4C")]
			internal Vector2 <DONormalizedPos>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x60018ED")]
			[Address(RVA = "0x1E2ECA0", Offset = "0x1E2ECA0", VA = "0x1E2ECA0")]
			internal void <DONormalizedPos>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x2000416")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7ED7C", Offset = "0xA7ED7C")]
		private sealed class <>c__DisplayClass31_0
		{
			[Token(Token = "0x4001257")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ScrollRect target;

			[Token(Token = "0x60018EE")]
			[Address(RVA = "0x1E2ECEC", Offset = "0x1E2ECEC", VA = "0x1E2ECEC")]
			public <>c__DisplayClass31_0()
			{
			}

			[Token(Token = "0x60018EF")]
			[Address(RVA = "0x1E2ECF4", Offset = "0x1E2ECF4", VA = "0x1E2ECF4")]
			internal float <DOHorizontalNormalizedPos>b__0()
			{
				return default(float);
			}

			[Token(Token = "0x60018F0")]
			[Address(RVA = "0x1E2ED10", Offset = "0x1E2ED10", VA = "0x1E2ED10")]
			internal void <DOHorizontalNormalizedPos>b__1(float x)
			{
			}
		}

		[Token(Token = "0x2000417")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7ED8C", Offset = "0xA7ED8C")]
		private sealed class <>c__DisplayClass32_0
		{
			[Token(Token = "0x4001258")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public ScrollRect target;

			[Token(Token = "0x60018F1")]
			[Address(RVA = "0x1E2ED2C", Offset = "0x1E2ED2C", VA = "0x1E2ED2C")]
			public <>c__DisplayClass32_0()
			{
			}

			[Token(Token = "0x60018F2")]
			[Address(RVA = "0x1E2ED34", Offset = "0x1E2ED34", VA = "0x1E2ED34")]
			internal float <DOVerticalNormalizedPos>b__0()
			{
				return default(float);
			}

			[Token(Token = "0x60018F3")]
			[Address(RVA = "0x1E2ED50", Offset = "0x1E2ED50", VA = "0x1E2ED50")]
			internal void <DOVerticalNormalizedPos>b__1(float x)
			{
			}
		}

		[Token(Token = "0x2000418")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7ED9C", Offset = "0xA7ED9C")]
		private sealed class <>c__DisplayClass33_0
		{
			[Token(Token = "0x4001259")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Slider target;

			[Token(Token = "0x60018F4")]
			[Address(RVA = "0x1E2ED6C", Offset = "0x1E2ED6C", VA = "0x1E2ED6C")]
			public <>c__DisplayClass33_0()
			{
			}

			[Token(Token = "0x60018F5")]
			[Address(RVA = "0x1E2ED74", Offset = "0x1E2ED74", VA = "0x1E2ED74")]
			internal float <DOValue>b__0()
			{
				return default(float);
			}

			[Token(Token = "0x60018F6")]
			[Address(RVA = "0x1E2ED98", Offset = "0x1E2ED98", VA = "0x1E2ED98")]
			internal void <DOValue>b__1(float x)
			{
			}
		}

		[Token(Token = "0x2000419")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EDAC", Offset = "0xA7EDAC")]
		private sealed class <>c__DisplayClass34_0
		{
			[Token(Token = "0x400125A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Text target;

			[Token(Token = "0x60018F7")]
			[Address(RVA = "0x1E2EDBC", Offset = "0x1E2EDBC", VA = "0x1E2EDBC")]
			public <>c__DisplayClass34_0()
			{
			}

			[Token(Token = "0x60018F8")]
			[Address(RVA = "0x1E2EDC4", Offset = "0x1E2EDC4", VA = "0x1E2EDC4")]
			internal Color <DOColor>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x60018F9")]
			[Address(RVA = "0x1E2EDE8", Offset = "0x1E2EDE8", VA = "0x1E2EDE8")]
			internal void <DOColor>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x200041A")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EDBC", Offset = "0xA7EDBC")]
		private sealed class <>c__DisplayClass35_0
		{
			[Token(Token = "0x400125B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int v;

			[Token(Token = "0x400125C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Text target;

			[Token(Token = "0x400125D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool addThousandsSeparator;

			[Token(Token = "0x400125E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public CultureInfo cInfo;

			[Token(Token = "0x60018FA")]
			[Address(RVA = "0x1E2EE0C", Offset = "0x1E2EE0C", VA = "0x1E2EE0C")]
			public <>c__DisplayClass35_0()
			{
			}

			[Token(Token = "0x60018FB")]
			[Address(RVA = "0x1E2EE14", Offset = "0x1E2EE14", VA = "0x1E2EE14")]
			internal int <DOCounter>b__0()
			{
				return default(int);
			}

			[Token(Token = "0x60018FC")]
			[Address(RVA = "0x1E2EE1C", Offset = "0x1E2EE1C", VA = "0x1E2EE1C")]
			internal void <DOCounter>b__1(int x)
			{
			}
		}

		[Token(Token = "0x200041B")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EDCC", Offset = "0xA7EDCC")]
		private sealed class <>c__DisplayClass36_0
		{
			[Token(Token = "0x400125F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Text target;

			[Token(Token = "0x60018FD")]
			[Address(RVA = "0x1E2EEB8", Offset = "0x1E2EEB8", VA = "0x1E2EEB8")]
			public <>c__DisplayClass36_0()
			{
			}

			[Token(Token = "0x60018FE")]
			[Address(RVA = "0x1E2EEC0", Offset = "0x1E2EEC0", VA = "0x1E2EEC0")]
			internal Color <DOFade>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x60018FF")]
			[Address(RVA = "0x1E2EEE4", Offset = "0x1E2EEE4", VA = "0x1E2EEE4")]
			internal void <DOFade>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x200041C")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EDDC", Offset = "0xA7EDDC")]
		private sealed class <>c__DisplayClass37_0
		{
			[Token(Token = "0x4001260")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Text target;

			[Token(Token = "0x6001900")]
			[Address(RVA = "0x1E2EF08", Offset = "0x1E2EF08", VA = "0x1E2EF08")]
			public <>c__DisplayClass37_0()
			{
			}

			[Token(Token = "0x6001901")]
			[Address(RVA = "0x1E2EF10", Offset = "0x1E2EF10", VA = "0x1E2EF10")]
			internal string <DOText>b__0()
			{
				return null;
			}

			[Token(Token = "0x6001902")]
			[Address(RVA = "0x1E2EF34", Offset = "0x1E2EF34", VA = "0x1E2EF34")]
			internal void <DOText>b__1(string x)
			{
			}
		}

		[Token(Token = "0x200041D")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EDEC", Offset = "0xA7EDEC")]
		private sealed class <>c__DisplayClass38_0
		{
			[Token(Token = "0x4001261")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Color to;

			[Token(Token = "0x4001262")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Graphic target;

			[Token(Token = "0x6001903")]
			[Address(RVA = "0x1E2EF58", Offset = "0x1E2EF58", VA = "0x1E2EF58")]
			public <>c__DisplayClass38_0()
			{
			}

			[Token(Token = "0x6001904")]
			[Address(RVA = "0x1E2EF60", Offset = "0x1E2EF60", VA = "0x1E2EF60")]
			internal Color <DOBlendableColor>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x6001905")]
			[Address(RVA = "0x1E2EF6C", Offset = "0x1E2EF6C", VA = "0x1E2EF6C")]
			internal void <DOBlendableColor>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x200041E")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EDFC", Offset = "0xA7EDFC")]
		private sealed class <>c__DisplayClass39_0
		{
			[Token(Token = "0x4001263")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Color to;

			[Token(Token = "0x4001264")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Image target;

			[Token(Token = "0x6001906")]
			[Address(RVA = "0x1E2F028", Offset = "0x1E2F028", VA = "0x1E2F028")]
			public <>c__DisplayClass39_0()
			{
			}

			[Token(Token = "0x6001907")]
			[Address(RVA = "0x1E2F030", Offset = "0x1E2F030", VA = "0x1E2F030")]
			internal Color <DOBlendableColor>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x6001908")]
			[Address(RVA = "0x1E2F03C", Offset = "0x1E2F03C", VA = "0x1E2F03C")]
			internal void <DOBlendableColor>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x200041F")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EE0C", Offset = "0xA7EE0C")]
		private sealed class <>c__DisplayClass40_0
		{
			[Token(Token = "0x4001265")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Color to;

			[Token(Token = "0x4001266")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Text target;

			[Token(Token = "0x6001909")]
			[Address(RVA = "0x1E2F148", Offset = "0x1E2F148", VA = "0x1E2F148")]
			public <>c__DisplayClass40_0()
			{
			}

			[Token(Token = "0x600190A")]
			[Address(RVA = "0x1E2F150", Offset = "0x1E2F150", VA = "0x1E2F150")]
			internal Color <DOBlendableColor>b__0()
			{
				return default(Color);
			}

			[Token(Token = "0x600190B")]
			[Address(RVA = "0x1E2F15C", Offset = "0x1E2F15C", VA = "0x1E2F15C")]
			internal void <DOBlendableColor>b__1(Color x)
			{
			}
		}

		[Token(Token = "0x6001450")]
		[Address(RVA = "0x169EC60", Offset = "0x169EC60", VA = "0x169EC60")]
		public static TweenerCore<float, float, FloatOptions> DOFade(this CanvasGroup target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001451")]
		[Address(RVA = "0x169EE08", Offset = "0x169EE08", VA = "0x169EE08")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this Graphic target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001452")]
		[Address(RVA = "0x169EFD8", Offset = "0x169EFD8", VA = "0x169EFD8")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this Graphic target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001453")]
		[Address(RVA = "0x169F180", Offset = "0x169F180", VA = "0x169F180")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this Image target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001454")]
		[Address(RVA = "0x169F350", Offset = "0x169F350", VA = "0x169F350")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this Image target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001455")]
		[Address(RVA = "0x169F4F8", Offset = "0x169F4F8", VA = "0x169F4F8")]
		public static TweenerCore<float, float, FloatOptions> DOFillAmount(this Image target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001456")]
		[Address(RVA = "0x169F6C4", Offset = "0x169F6C4", VA = "0x169F6C4")]
		public static Sequence DOGradientColor(this Image target, Gradient gradient, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001457")]
		[Address(RVA = "0x169F8B8", Offset = "0x169F8B8", VA = "0x169F8B8")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOFlexibleSize(this LayoutElement target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001458")]
		[Address(RVA = "0x169FA88", Offset = "0x169FA88", VA = "0x169FA88")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOMinSize(this LayoutElement target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001459")]
		[Address(RVA = "0x169FC58", Offset = "0x169FC58", VA = "0x169FC58")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOPreferredSize(this LayoutElement target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600145A")]
		[Address(RVA = "0x169FE28", Offset = "0x169FE28", VA = "0x169FE28")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this Outline target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x600145B")]
		[Address(RVA = "0x169FFF8", Offset = "0x169FFF8", VA = "0x169FFF8")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this Outline target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x600145C")]
		[Address(RVA = "0x16A01A0", Offset = "0x16A01A0", VA = "0x16A01A0")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOScale(this Outline target, Vector2 endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x600145D")]
		[Address(RVA = "0x16A0358", Offset = "0x16A0358", VA = "0x16A0358")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorPos(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600145E")]
		[Address(RVA = "0x16A0528", Offset = "0x16A0528", VA = "0x16A0528")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorPosX(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600145F")]
		[Address(RVA = "0x16A06F0", Offset = "0x16A06F0", VA = "0x16A06F0")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorPosY(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001460")]
		[Address(RVA = "0x16A08B8", Offset = "0x16A08B8", VA = "0x16A08B8")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3D(this RectTransform target, Vector3 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001461")]
		[Address(RVA = "0x16A0A90", Offset = "0x16A0A90", VA = "0x16A0A90")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3DX(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001462")]
		[Address(RVA = "0x16A0C5C", Offset = "0x16A0C5C", VA = "0x16A0C5C")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3DY(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001463")]
		[Address(RVA = "0x16A0E28", Offset = "0x16A0E28", VA = "0x16A0E28")]
		public static TweenerCore<Vector3, Vector3, VectorOptions> DOAnchorPos3DZ(this RectTransform target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001464")]
		[Address(RVA = "0x16A0FF4", Offset = "0x16A0FF4", VA = "0x16A0FF4")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorMax(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001465")]
		[Address(RVA = "0x16A11C4", Offset = "0x16A11C4", VA = "0x16A11C4")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOAnchorMin(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001466")]
		[Address(RVA = "0x16A1394", Offset = "0x16A1394", VA = "0x16A1394")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOPivot(this RectTransform target, Vector2 endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001467")]
		[Address(RVA = "0x16A154C", Offset = "0x16A154C", VA = "0x16A154C")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOPivotX(this RectTransform target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001468")]
		[Address(RVA = "0x16A1708", Offset = "0x16A1708", VA = "0x16A1708")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOPivotY(this RectTransform target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001469")]
		[Address(RVA = "0x16A18C4", Offset = "0x16A18C4", VA = "0x16A18C4")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOSizeDelta(this RectTransform target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600146A")]
		[Address(RVA = "0x16A1A94", Offset = "0x16A1A94", VA = "0x16A1A94")]
		public static Tweener DOPunchAnchorPos(this RectTransform target, Vector2 punch, float duration, int vibrato = 10, float elasticity = 1f, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600146B")]
		[Address(RVA = "0x16A1C6C", Offset = "0x16A1C6C", VA = "0x16A1C6C")]
		public static Tweener DOShakeAnchorPos(this RectTransform target, float duration, float strength = 100f, int vibrato = 10, float randomness = 90f, bool snapping = false, bool fadeOut = true)
		{
			return null;
		}

		[Token(Token = "0x600146C")]
		[Address(RVA = "0x16A1E6C", Offset = "0x16A1E6C", VA = "0x16A1E6C")]
		public static Tweener DOShakeAnchorPos(this RectTransform target, float duration, Vector2 strength, int vibrato = 10, float randomness = 90f, bool snapping = false, bool fadeOut = true)
		{
			return null;
		}

		[Token(Token = "0x600146D")]
		[Address(RVA = "0x16A2074", Offset = "0x16A2074", VA = "0x16A2074")]
		public static Sequence DOJumpAnchorPos(this RectTransform target, Vector2 endValue, float jumpPower, int numJumps, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600146E")]
		[Address(RVA = "0x16A24C8", Offset = "0x16A24C8", VA = "0x16A24C8")]
		public static Tweener DONormalizedPos(this ScrollRect target, Vector2 endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x600146F")]
		[Address(RVA = "0x16A268C", Offset = "0x16A268C", VA = "0x16A268C")]
		public static Tweener DOHorizontalNormalizedPos(this ScrollRect target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001470")]
		[Address(RVA = "0x16A2840", Offset = "0x16A2840", VA = "0x16A2840")]
		public static Tweener DOVerticalNormalizedPos(this ScrollRect target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001471")]
		[Address(RVA = "0x16A29F4", Offset = "0x16A29F4", VA = "0x16A29F4")]
		public static TweenerCore<float, float, FloatOptions> DOValue(this Slider target, float endValue, float duration, bool snapping = false)
		{
			return null;
		}

		[Token(Token = "0x6001472")]
		[Address(RVA = "0x16A2BB4", Offset = "0x16A2BB4", VA = "0x16A2BB4")]
		public static TweenerCore<Color, Color, ColorOptions> DOColor(this Text target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001473")]
		[Address(RVA = "0x16A2D84", Offset = "0x16A2D84", VA = "0x16A2D84")]
		public static TweenerCore<int, int, NoOptions> DOCounter(this Text target, int fromValue, int endValue, float duration, bool addThousandsSeparator = true, [Optional] CultureInfo culture)
		{
			return null;
		}

		[Token(Token = "0x6001474")]
		[Address(RVA = "0x16A2FAC", Offset = "0x16A2FAC", VA = "0x16A2FAC")]
		public static TweenerCore<Color, Color, ColorOptions> DOFade(this Text target, float endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001475")]
		[Address(RVA = "0x16A3154", Offset = "0x16A3154", VA = "0x16A3154")]
		public static TweenerCore<string, string, StringOptions> DOText(this Text target, string endValue, float duration, bool richTextEnabled = true, ScrambleMode scrambleMode = ScrambleMode.None, [Optional] string scrambleChars)
		{
			return null;
		}

		[Token(Token = "0x6001476")]
		[Address(RVA = "0x16A33A8", Offset = "0x16A33A8", VA = "0x16A33A8")]
		public static Tweener DOBlendableColor(this Graphic target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001477")]
		[Address(RVA = "0x16A360C", Offset = "0x16A360C", VA = "0x16A360C")]
		public static Tweener DOBlendableColor(this Image target, Color endValue, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001478")]
		[Address(RVA = "0x16A3870", Offset = "0x16A3870", VA = "0x16A3870")]
		public static Tweener DOBlendableColor(this Text target, Color endValue, float duration)
		{
			return null;
		}
	}
	[Token(Token = "0x20002F9")]
	public static class DOTweenModuleUnityVersion
	{
		[Token(Token = "0x2000420")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EE1C", Offset = "0xA7EE1C")]
		private sealed class <>c__DisplayClass8_0
		{
			[Token(Token = "0x4001267")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Material target;

			[Token(Token = "0x4001268")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int propertyID;

			[Token(Token = "0x600190C")]
			[Address(RVA = "0x1E2F744", Offset = "0x1E2F744", VA = "0x1E2F744")]
			public <>c__DisplayClass8_0()
			{
			}

			[Token(Token = "0x600190D")]
			[Address(RVA = "0x1E2F74C", Offset = "0x1E2F74C", VA = "0x1E2F74C")]
			internal Vector2 <DOOffset>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x600190E")]
			[Address(RVA = "0x1E2F770", Offset = "0x1E2F770", VA = "0x1E2F770")]
			internal void <DOOffset>b__1(Vector2 x)
			{
			}
		}

		[Token(Token = "0x2000421")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EE2C", Offset = "0xA7EE2C")]
		private sealed class <>c__DisplayClass9_0
		{
			[Token(Token = "0x4001269")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Material target;

			[Token(Token = "0x400126A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int propertyID;

			[Token(Token = "0x600190F")]
			[Address(RVA = "0x1E2F794", Offset = "0x1E2F794", VA = "0x1E2F794")]
			public <>c__DisplayClass9_0()
			{
			}

			[Token(Token = "0x6001910")]
			[Address(RVA = "0x1E2F79C", Offset = "0x1E2F79C", VA = "0x1E2F79C")]
			internal Vector2 <DOTiling>b__0()
			{
				return default(Vector2);
			}

			[Token(Token = "0x6001911")]
			[Address(RVA = "0x1E2F7C0", Offset = "0x1E2F7C0", VA = "0x1E2F7C0")]
			internal void <DOTiling>b__1(Vector2 x)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x2000422")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EE3C", Offset = "0xA7EE3C")]
		private struct <AsyncWaitForCompletion>d__10 : IAsyncStateMachine
		{
			[Token(Token = "0x400126B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x400126C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x400126D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x400126E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x6001912")]
			[Address(RVA = "0x1E2F7E4", Offset = "0x1E2F7E4", VA = "0x1E2F7E4", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001913")]
			[Address(RVA = "0x1E2FA28", Offset = "0x1E2FA28", VA = "0x1E2FA28", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x2000423")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EE4C", Offset = "0xA7EE4C")]
		private struct <AsyncWaitForRewind>d__11 : IAsyncStateMachine
		{
			[Token(Token = "0x400126F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001270")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4001271")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x4001272")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x6001914")]
			[Address(RVA = "0x1E30138", Offset = "0x1E30138", VA = "0x1E30138", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001915")]
			[Address(RVA = "0x1E303A0", Offset = "0x1E303A0", VA = "0x1E303A0", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x2000424")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EE5C", Offset = "0xA7EE5C")]
		private struct <AsyncWaitForKill>d__12 : IAsyncStateMachine
		{
			[Token(Token = "0x4001273")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001274")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4001275")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x4001276")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x6001916")]
			[Address(RVA = "0x1E2FC8C", Offset = "0x1E2FC8C", VA = "0x1E2FC8C", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001917")]
			[Address(RVA = "0x1E2FEBC", Offset = "0x1E2FEBC", VA = "0x1E2FEBC", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x2000425")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EE6C", Offset = "0xA7EE6C")]
		private struct <AsyncWaitForElapsedLoops>d__13 : IAsyncStateMachine
		{
			[Token(Token = "0x4001277")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001278")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4001279")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x400127A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int elapsedLoops;

			[Token(Token = "0x400127B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x6001918")]
			[Address(RVA = "0x1E2FA34", Offset = "0x1E2FA34", VA = "0x1E2FA34", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x6001919")]
			[Address(RVA = "0x1E2FC80", Offset = "0x1E2FC80", VA = "0x1E2FC80", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x2000426")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EE7C", Offset = "0xA7EE7C")]
		private struct <AsyncWaitForPosition>d__14 : IAsyncStateMachine
		{
			[Token(Token = "0x400127C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x400127D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x400127E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x400127F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float position;

			[Token(Token = "0x4001280")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x600191A")]
			[Address(RVA = "0x1E2FEC8", Offset = "0x1E2FEC8", VA = "0x1E2FEC8", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x600191B")]
			[Address(RVA = "0x1E3012C", Offset = "0x1E3012C", VA = "0x1E3012C", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[StructLayout(3)]
		[Token(Token = "0x2000427")]
		[AttributeAttribute(Name = "CompilerGeneratedAttribute", RVA = "0xA7EE8C", Offset = "0xA7EE8C")]
		private struct <AsyncWaitForStart>d__15 : IAsyncStateMachine
		{
			[Token(Token = "0x4001281")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int <>1__state;

			[Token(Token = "0x4001282")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public AsyncTaskMethodBuilder <>t__builder;

			[Token(Token = "0x4001283")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Tween t;

			[Token(Token = "0x4001284")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private YieldAwaitable.YieldAwaiter <>u__1;

			[Token(Token = "0x600191C")]
			[Address(RVA = "0x1E303AC", Offset = "0x1E303AC", VA = "0x1E303AC", Slot = "4")]
			private void MoveNext()
			{
			}

			[Token(Token = "0x600191D")]
			[Address(RVA = "0x1E305E4", Offset = "0x1E305E4", VA = "0x1E305E4", Slot = "5")]
			[DebuggerHidden]
			private void SetStateMachine(IAsyncStateMachine stateMachine)
			{
			}
		}

		[Token(Token = "0x6001479")]
		[Address(RVA = "0x16A3AD4", Offset = "0x16A3AD4", VA = "0x16A3AD4")]
		public static Sequence DOGradientColor(this Material target, Gradient gradient, float duration)
		{
			return null;
		}

		[Token(Token = "0x600147A")]
		[Address(RVA = "0x16A3CC4", Offset = "0x16A3CC4", VA = "0x16A3CC4")]
		public static Sequence DOGradientColor(this Material target, Gradient gradient, string property, float duration)
		{
			return null;
		}

		[Token(Token = "0x600147B")]
		[Address(RVA = "0x16A3EC8", Offset = "0x16A3EC8", VA = "0x16A3EC8")]
		public static CustomYieldInstruction WaitForCompletion(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x600147C")]
		[Address(RVA = "0x16A3F88", Offset = "0x16A3F88", VA = "0x16A3F88")]
		public static CustomYieldInstruction WaitForRewind(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x600147D")]
		[Address(RVA = "0x16A4048", Offset = "0x16A4048", VA = "0x16A4048")]
		public static CustomYieldInstruction WaitForKill(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x600147E")]
		[Address(RVA = "0x16A4108", Offset = "0x16A4108", VA = "0x16A4108")]
		public static CustomYieldInstruction WaitForElapsedLoops(this Tween t, int elapsedLoops, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x600147F")]
		[Address(RVA = "0x16A41D8", Offset = "0x16A41D8", VA = "0x16A41D8")]
		public static CustomYieldInstruction WaitForPosition(this Tween t, float position, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x6001480")]
		[Address(RVA = "0x16A42A8", Offset = "0x16A42A8", VA = "0x16A42A8")]
		public static CustomYieldInstruction WaitForStart(this Tween t, bool returnCustomYieldInstruction)
		{
			return null;
		}

		[Token(Token = "0x6001481")]
		[Address(RVA = "0x16A4368", Offset = "0x16A4368", VA = "0x16A4368")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOOffset(this Material target, Vector2 endValue, int propertyID, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001482")]
		[Address(RVA = "0x16A4590", Offset = "0x16A4590", VA = "0x16A4590")]
		public static TweenerCore<Vector2, Vector2, VectorOptions> DOTiling(this Material target, Vector2 endValue, int propertyID, float duration)
		{
			return null;
		}

		[Token(Token = "0x6001483")]
		[Address(RVA = "0x16A47B8", Offset = "0x16A47B8", VA = "0x16A47B8")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0xA8CBEC", Offset = "0xA8CBEC")]
		public static Task AsyncWaitForCompletion(this Tween t)
		{
			return null;
		}

		[Token(Token = "0x6001484")]
		[Address(RVA = "0x16A48D4", Offset = "0x16A48D4", VA = "0x16A48D4")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0xA8CC5C", Offset = "0xA8CC5C")]
		public static Task AsyncWaitForRewind(this Tween t)
		{
			return null;
		}

		[Token(Token = "0x6001485")]
		[Address(RVA = "0x16A49F0", Offset = "0x16A49F0", VA = "0x16A49F0")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0xA8CCCC", Offset = "0xA8CCCC")]
		public static Task AsyncWaitForKill(this Tween t)
		{
			return null;
		}

		[Token(Token = "0x6001486")]
		[Address(RVA = "0x16A4B0C", Offset = "0x16A4B0C", VA = "0x16A4B0C")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0xA8CD3C", Offset = "0xA8CD3C")]
		public static Task AsyncWaitForElapsedLoops(this Tween t, int elapsedLoops)
		{
			return null;
		}

		[Token(Token = "0x6001487")]
		[Address(RVA = "0x16A4C38", Offset = "0x16A4C38", VA = "0x16A4C38")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0xA8CDAC", Offset = "0xA8CDAC")]
		public static Task AsyncWaitForPosition(this Tween t, float position)
		{
			return null;
		}

		[Token(Token = "0x6001488")]
		[Address(RVA = "0x16A4D64", Offset = "0x16A4D64", VA = "0x16A4D64")]
		[AttributeAttribute(Name = "AsyncStateMachineAttribute", RVA = "0xA8CE1C", Offset = "0xA8CE1C")]
		public static Task AsyncWaitForStart(this Tween t)
		{
			return null;
		}
	}
	[Token(Token = "0x20002FA")]
	public static class DOTweenCYInstruction
	{
		[Token(Token = "0x2000428")]
		public class WaitForCompletion : CustomYieldInstruction
		{
			[Token(Token = "0x4001285")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x170001DE")]
			public override bool keepWaiting
			{
				[Token(Token = "0x600191E")]
				[Address(RVA = "0x1A81848", Offset = "0x1A81848", VA = "0x1A81848", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x600191F")]
			[Address(RVA = "0x1A8187C", Offset = "0x1A8187C", VA = "0x1A8187C")]
			public WaitForCompletion(Tween tween)
			{
			}
		}

		[Token(Token = "0x2000429")]
		public class WaitForRewind : CustomYieldInstruction
		{
			[Token(Token = "0x4001286")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x170001DF")]
			public override bool keepWaiting
			{
				[Token(Token = "0x6001920")]
				[Address(RVA = "0x1A81A40", Offset = "0x1A81A40", VA = "0x1A81A40", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001921")]
			[Address(RVA = "0x1A81AA4", Offset = "0x1A81AA4", VA = "0x1A81AA4")]
			public WaitForRewind(Tween tween)
			{
			}
		}

		[Token(Token = "0x200042A")]
		public class WaitForKill : CustomYieldInstruction
		{
			[Token(Token = "0x4001287")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x170001E0")]
			public override bool keepWaiting
			{
				[Token(Token = "0x6001922")]
				[Address(RVA = "0x1A81944", Offset = "0x1A81944", VA = "0x1A81944", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001923")]
			[Address(RVA = "0x1A81960", Offset = "0x1A81960", VA = "0x1A81960")]
			public WaitForKill(Tween tween)
			{
			}
		}

		[Token(Token = "0x200042B")]
		public class WaitForElapsedLoops : CustomYieldInstruction
		{
			[Token(Token = "0x4001288")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x4001289")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly int elapsedLoops;

			[Token(Token = "0x170001E1")]
			public override bool keepWaiting
			{
				[Token(Token = "0x6001924")]
				[Address(RVA = "0x1A818B0", Offset = "0x1A818B0", VA = "0x1A818B0", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001925")]
			[Address(RVA = "0x1A818FC", Offset = "0x1A818FC", VA = "0x1A818FC")]
			public WaitForElapsedLoops(Tween tween, int elapsedLoops)
			{
			}
		}

		[Token(Token = "0x200042C")]
		public class WaitForPosition : CustomYieldInstruction
		{
			[Token(Token = "0x400128A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x400128B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private readonly float position;

			[Token(Token = "0x170001E2")]
			public override bool keepWaiting
			{
				[Token(Token = "0x6001926")]
				[Address(RVA = "0x1A81994", Offset = "0x1A81994", VA = "0x1A81994", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001927")]
			[Address(RVA = "0x1A819F8", Offset = "0x1A819F8", VA = "0x1A819F8")]
			public WaitForPosition(Tween tween, float position)
			{
			}
		}

		[Token(Token = "0x200042D")]
		public class WaitForStart : CustomYieldInstruction
		{
			[Token(Token = "0x400128C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private readonly Tween t;

			[Token(Token = "0x170001E3")]
			public override bool keepWaiting
			{
				[Token(Token = "0x6001928")]
				[Address(RVA = "0x1A81AD8", Offset = "0x1A81AD8", VA = "0x1A81AD8", Slot = "7")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6001929")]
			[Address(RVA = "0x1A81B0C", Offset = "0x1A81B0C", VA = "0x1A81B0C")]
			public WaitForStart(Tween tween)
			{
			}
		}
	}
	[Token(Token = "0x20002FB")]
	public static class DOTweenModuleUtils
	{
		[Token(Token = "0x200042E")]
		public static class Physics
		{
			[Token(Token = "0x600192A")]
			[Address(RVA = "0x1E305F0", Offset = "0x1E305F0", VA = "0x1E305F0")]
			public static void SetOrientationOnPath(PathOptions options, Tween t, Quaternion newRot, Transform trans)
			{
			}

			[Token(Token = "0x600192B")]
			[Address(RVA = "0x1E306F4", Offset = "0x1E306F4", VA = "0x1E306F4")]
			public static bool HasRigidbody2D(Component target)
			{
				return default(bool);
			}

			[Token(Token = "0x600192C")]
			[Address(RVA = "0x1E3078C", Offset = "0x1E3078C", VA = "0x1E3078C")]
			[Preserve]
			public static bool HasRigidbody(Component target)
			{
				return default(bool);
			}

			[Token(Token = "0x600192D")]
			[Address(RVA = "0x1E30824", Offset = "0x1E30824", VA = "0x1E30824")]
			[Preserve]
			public static TweenerCore<Vector3, DG.Tweening.Plugins.Core.PathCore.Path, PathOptions> CreateDOTweenPathTween(MonoBehaviour target, bool tweenRigidbody, bool isLocal, DG.Tweening.Plugins.Core.PathCore.Path path, float duration, PathMode pathMode)
			{
				return null;
			}
		}

		[Token(Token = "0x4000E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool _initialized;

		[Token(Token = "0x6001489")]
		[Address(RVA = "0x16A4E80", Offset = "0x16A4E80", VA = "0x16A4E80")]
		[Preserve]
		public static void Init()
		{
		}

		[Token(Token = "0x600148A")]
		[Address(RVA = "0x16A4F44", Offset = "0x16A4F44", VA = "0x16A4F44")]
		[Preserve]
		private static void Preserver()
		{
		}
	}
}
