using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading;
using Il2CppDummyDll;
using RootMotion.FinalIK;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.Rendering;
using UnityEngine.Serialization;
using UnityEngine.UI;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
[AddComponentMenu("GUI/Click Event Manager")]
public class ClickEventManager : MonoBehaviour
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool drawDebugRays;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ClickEventManager ms_rInstance;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool m_bTouchScreen;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	private bool m_bInputWasPreviouslyPressed;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Collider m_rFirstPressedCollider;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Collider m_rPreviousHoveredCollider;

	[Token(Token = "0x6000001")]
	[Address(RVA = "0xAC63FC", Offset = "0xAC63FC", VA = "0xAC63FC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0xAC650C", Offset = "0xAC650C", VA = "0xAC650C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000003")]
	[Address(RVA = "0xAC65E0", Offset = "0xAC65E0", VA = "0xAC65E0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000004")]
	[Address(RVA = "0xAC6BB4", Offset = "0xAC6BB4", VA = "0xAC6BB4")]
	private void DrawDebugRay(Ray a_oRayToDraw, Color a_oRayColor)
	{
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0xAC6CB8", Offset = "0xAC6CB8", VA = "0xAC6CB8")]
	public ClickEventManager()
	{
	}
}
[Token(Token = "0x2000003")]
public class Bullet : MonoBehaviour
{
	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float startTime;

	[Token(Token = "0x6000006")]
	[Address(RVA = "0xAC6CC0", Offset = "0xAC6CC0", VA = "0xAC6CC0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000007")]
	[Address(RVA = "0xAC6CDC", Offset = "0xAC6CDC", VA = "0xAC6CDC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0xAC6DB0", Offset = "0xAC6DB0", VA = "0xAC6DB0")]
	public Bullet()
	{
	}
}
[Token(Token = "0x2000004")]
public class ETPlayer : MonoBehaviour
{
	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject bullet;

	[Token(Token = "0x4000009")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform model;

	[Token(Token = "0x400000A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform gun;

	[Token(Token = "0x6000009")]
	[Address(RVA = "0xAC6DB8", Offset = "0xAC6DB8", VA = "0xAC6DB8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0xAC7458", Offset = "0xAC7458", VA = "0xAC7458")]
	private void Fire()
	{
	}

	[Token(Token = "0x600000B")]
	[Address(RVA = "0xAC7550", Offset = "0xAC7550", VA = "0xAC7550")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600000C")]
	[Address(RVA = "0xAC7894", Offset = "0xAC7894", VA = "0xAC7894")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0xAC79A4", Offset = "0xAC79A4", VA = "0xAC79A4")]
	private void Start()
	{
	}

	[Token(Token = "0x600000E")]
	[Address(RVA = "0xAC7A68", Offset = "0xAC7A68", VA = "0xAC7A68")]
	private void On_JoystickMove(MovingJoystick move)
	{
	}

	[Token(Token = "0x600000F")]
	[Address(RVA = "0xAC7C1C", Offset = "0xAC7C1C", VA = "0xAC7C1C")]
	private void On_JoystickMoveEnd(MovingJoystick move)
	{
	}

	[Token(Token = "0x6000010")]
	[Address(RVA = "0xAC7C90", Offset = "0xAC7C90", VA = "0xAC7C90")]
	private void On_ButtonUp(string buttonName)
	{
	}

	[Token(Token = "0x6000011")]
	[Address(RVA = "0xAC7D0C", Offset = "0xAC7D0C", VA = "0xAC7D0C")]
	public ETPlayer()
	{
	}
}
[Token(Token = "0x2000005")]
public class ManualControl : MonoBehaviour
{
	[Token(Token = "0x400000B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EasyJoystick Joystick;

	[Token(Token = "0x6000012")]
	[Address(RVA = "0xAC7D14", Offset = "0xAC7D14", VA = "0xAC7D14")]
	private void Update()
	{
	}

	[Token(Token = "0x6000013")]
	[Address(RVA = "0xAC7F1C", Offset = "0xAC7F1C", VA = "0xAC7F1C")]
	public ManualControl()
	{
	}
}
[Token(Token = "0x2000006")]
public class JoystickEvent : MonoBehaviour
{
	[Token(Token = "0x6000014")]
	[Address(RVA = "0xAC7F24", Offset = "0xAC7F24", VA = "0xAC7F24")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000015")]
	[Address(RVA = "0xAC7FE8", Offset = "0xAC7FE8", VA = "0xAC7FE8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000016")]
	[Address(RVA = "0xAC80AC", Offset = "0xAC80AC", VA = "0xAC80AC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000017")]
	[Address(RVA = "0xAC8170", Offset = "0xAC8170", VA = "0xAC8170")]
	private void On_JoystickMoveEnd(MovingJoystick move)
	{
	}

	[Token(Token = "0x6000018")]
	[Address(RVA = "0xAC821C", Offset = "0xAC821C", VA = "0xAC821C")]
	private void On_JoystickMove(MovingJoystick move)
	{
	}

	[Token(Token = "0x6000019")]
	[Address(RVA = "0xAC831C", Offset = "0xAC831C", VA = "0xAC831C")]
	public JoystickEvent()
	{
	}
}
[Token(Token = "0x2000007")]
public class GUIFirstDirect : MonoBehaviour
{
	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool showProperties;

	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private EasyJoystick joystick;

	[Token(Token = "0x600001A")]
	[Address(RVA = "0xAC8324", Offset = "0xAC8324", VA = "0xAC8324")]
	private void Start()
	{
	}

	[Token(Token = "0x600001B")]
	[Address(RVA = "0xAC83A0", Offset = "0xAC83A0", VA = "0xAC83A0")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600001C")]
	[Address(RVA = "0xAC89CC", Offset = "0xAC89CC", VA = "0xAC89CC")]
	public GUIFirstDirect()
	{
	}
}
[Token(Token = "0x2000008")]
public class ExitButton : MonoBehaviour
{
	[Token(Token = "0x600001D")]
	[Address(RVA = "0xAC89DC", Offset = "0xAC89DC", VA = "0xAC89DC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600001E")]
	[Address(RVA = "0xAC8A54", Offset = "0xAC8A54", VA = "0xAC8A54")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600001F")]
	[Address(RVA = "0xAC8ACC", Offset = "0xAC8ACC", VA = "0xAC8ACC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000020")]
	[Address(RVA = "0xAC8B44", Offset = "0xAC8B44", VA = "0xAC8B44")]
	private void On_ButtonUp(string buttonName)
	{
	}

	[Token(Token = "0x6000021")]
	[Address(RVA = "0xAC8B88", Offset = "0xAC8B88", VA = "0xAC8B88")]
	public ExitButton()
	{
	}
}
[Token(Token = "0x2000009")]
public class Monster : MonoBehaviour
{
	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject enemy;

	[Token(Token = "0x6000022")]
	[Address(RVA = "0xAC8B90", Offset = "0xAC8B90", VA = "0xAC8B90")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000023")]
	[Address(RVA = "0xAC8CC8", Offset = "0xAC8CC8", VA = "0xAC8CC8")]
	private void On_TouchStart(Gesture gesture)
	{
	}

	[Token(Token = "0x6000024")]
	[Address(RVA = "0xAC8D78", Offset = "0xAC8D78", VA = "0xAC8D78")]
	private void CreateMonster()
	{
	}

	[Token(Token = "0x6000025")]
	[Address(RVA = "0xAC8F20", Offset = "0xAC8F20", VA = "0xAC8F20")]
	public Monster()
	{
	}
}
[Token(Token = "0x200000A")]
public class FreeCam : MonoBehaviour
{
	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private float rotationX;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float rotationY;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Camera cam;

	[Token(Token = "0x6000026")]
	[Address(RVA = "0xAC8F28", Offset = "0xAC8F28", VA = "0xAC8F28")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000027")]
	[Address(RVA = "0xAC916C", Offset = "0xAC916C", VA = "0xAC916C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000028")]
	[Address(RVA = "0xAC923C", Offset = "0xAC923C", VA = "0xAC923C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000029")]
	[Address(RVA = "0xAC9170", Offset = "0xAC9170", VA = "0xAC9170")]
	private void UnsubscribeEvent()
	{
	}

	[Token(Token = "0x600002A")]
	[Address(RVA = "0xAC93B8", Offset = "0xAC93B8", VA = "0xAC93B8")]
	private void Start()
	{
	}

	[Token(Token = "0x600002B")]
	[Address(RVA = "0xAC93DC", Offset = "0xAC93DC", VA = "0xAC93DC")]
	private void On_TouchDown(Gesture gesture)
	{
	}

	[Token(Token = "0x600002C")]
	[Address(RVA = "0xAC9498", Offset = "0xAC9498", VA = "0xAC9498")]
	private void On_Swipe(Gesture gesture)
	{
	}

	[Token(Token = "0x600002D")]
	[Address(RVA = "0xAC963C", Offset = "0xAC963C", VA = "0xAC963C")]
	public FreeCam()
	{
	}
}
[Token(Token = "0x200000B")]
public class GuiCam : MonoBehaviour
{
	[Token(Token = "0x600002E")]
	[Address(RVA = "0xAC9644", Offset = "0xAC9644", VA = "0xAC9644")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600002F")]
	[Address(RVA = "0xAC9988", Offset = "0xAC9988", VA = "0xAC9988")]
	public GuiCam()
	{
	}
}
[Token(Token = "0x200000C")]
public class GuiPhoto : MonoBehaviour
{
	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool bTwist;

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	private bool bPinch;

	[Token(Token = "0x6000030")]
	[Address(RVA = "0xAC9990", Offset = "0xAC9990", VA = "0xAC9990")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000031")]
	[Address(RVA = "0xAC9D74", Offset = "0xAC9D74", VA = "0xAC9D74")]
	public GuiPhoto()
	{
	}
}
[Token(Token = "0x200000D")]
public class Photo : MonoBehaviour
{
	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 deltaPosition;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector3 rotation;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool newPivot;

	[Token(Token = "0x6000032")]
	[Address(RVA = "0xAC9D84", Offset = "0xAC9D84", VA = "0xAC9D84")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000033")]
	[Address(RVA = "0xACA610", Offset = "0xACA610", VA = "0xACA610")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000034")]
	[Address(RVA = "0xACA8C0", Offset = "0xACA8C0", VA = "0xACA8C0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0xACA614", Offset = "0xACA614", VA = "0xACA614")]
	private void UnsubscribeEvent()
	{
	}

	[Token(Token = "0x6000036")]
	[Address(RVA = "0xACAEA4", Offset = "0xACAEA4", VA = "0xACAEA4")]
	private void On_Cancel2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0xACAECC", Offset = "0xACAECC", VA = "0xACAECC")]
	private void On_DragStart(Gesture gesture)
	{
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0xACAF4C", Offset = "0xACAF4C", VA = "0xACAF4C")]
	private void On_Drag(Gesture gesture)
	{
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0xACB010", Offset = "0xACB010", VA = "0xACB010")]
	private void On_TouchStart2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x600003A")]
	[Address(RVA = "0xACB084", Offset = "0xACB084", VA = "0xACB084")]
	private void On_TouchDown2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x600003B")]
	[Address(RVA = "0xACB0F4", Offset = "0xACB0F4", VA = "0xACB0F4")]
	private void On_PinchIn(Gesture gesture)
	{
	}

	[Token(Token = "0x600003C")]
	[Address(RVA = "0xACB1AC", Offset = "0xACB1AC", VA = "0xACB1AC")]
	private void On_PinchOut(Gesture gesture)
	{
	}

	[Token(Token = "0x600003D")]
	[Address(RVA = "0xACB25C", Offset = "0xACB25C", VA = "0xACB25C")]
	private void On_Twist(Gesture gesture)
	{
	}

	[Token(Token = "0x600003E")]
	[Address(RVA = "0xACB290", Offset = "0xACB290", VA = "0xACB290")]
	public Photo()
	{
	}
}
[Token(Token = "0x200000E")]
public class GuiLayer : MonoBehaviour
{
	[Token(Token = "0x600003F")]
	[Address(RVA = "0xACB298", Offset = "0xACB298", VA = "0xACB298")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000040")]
	[Address(RVA = "0xACB4B0", Offset = "0xACB4B0", VA = "0xACB4B0")]
	public GuiLayer()
	{
	}
}
[Token(Token = "0x200000F")]
public class TouchLayer : MonoBehaviour
{
	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private TextMesh textMesh;

	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Rect rect1;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Rect rect2;

	[Token(Token = "0x6000041")]
	[Address(RVA = "0xACB4B8", Offset = "0xACB4B8", VA = "0xACB4B8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000042")]
	[Address(RVA = "0xACB534", Offset = "0xACB534", VA = "0xACB534")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000043")]
	[Address(RVA = "0xACB66C", Offset = "0xACB66C", VA = "0xACB66C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0xACB6E8", Offset = "0xACB6E8", VA = "0xACB6E8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000045")]
	[Address(RVA = "0xACB91C", Offset = "0xACB91C", VA = "0xACB91C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0xACB9C4", Offset = "0xACB9C4", VA = "0xACB9C4")]
	public void On_TouchStart(Gesture gesture)
	{
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0xACBBF8", Offset = "0xACBBF8", VA = "0xACBBF8")]
	public TouchLayer()
	{
	}
}
[Token(Token = "0x2000010")]
public class GuiMultiFinger : MonoBehaviour
{
	[Token(Token = "0x6000048")]
	[Address(RVA = "0xACBC8C", Offset = "0xACBC8C", VA = "0xACBC8C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000049")]
	[Address(RVA = "0xACC090", Offset = "0xACC090", VA = "0xACC090")]
	public GuiMultiFinger()
	{
	}
}
[Token(Token = "0x2000011")]
public class ObjectTouch : MonoBehaviour
{
	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Camera cam;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 deltaPosition;

	[Token(Token = "0x600004A")]
	[Address(RVA = "0xACC098", Offset = "0xACC098", VA = "0xACC098")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600004B")]
	[Address(RVA = "0xACC578", Offset = "0xACC578", VA = "0xACC578")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0xACC828", Offset = "0xACC828", VA = "0xACC828")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600004D")]
	[Address(RVA = "0xACC57C", Offset = "0xACC57C", VA = "0xACC57C")]
	private void UnsubscribeEvent()
	{
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0xACCA60", Offset = "0xACCA60", VA = "0xACCA60")]
	private void Start()
	{
	}

	[Token(Token = "0x600004F")]
	[Address(RVA = "0xACCA84", Offset = "0xACCA84", VA = "0xACCA84")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0xACCBF8", Offset = "0xACCBF8", VA = "0xACCBF8")]
	private void On_TouchStart(Gesture gesture)
	{
	}

	[Token(Token = "0x6000051")]
	[Address(RVA = "0xACCCB8", Offset = "0xACCCB8", VA = "0xACCCB8")]
	private void On_SimpleTap(Gesture gesture)
	{
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0xACD364", Offset = "0xACD364", VA = "0xACD364")]
	private void On_LongTap(Gesture gesture)
	{
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0xACD798", Offset = "0xACD798", VA = "0xACD798")]
	private void On_DragStart(Gesture gesture)
	{
	}

	[Token(Token = "0x6000054")]
	[Address(RVA = "0xACD8C8", Offset = "0xACD8C8", VA = "0xACD8C8")]
	private void On_Drag(Gesture gesture)
	{
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0xACD9DC", Offset = "0xACD9DC", VA = "0xACD9DC")]
	private void On_DragEnd(Gesture gesture)
	{
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0xACDAC0", Offset = "0xACDAC0", VA = "0xACDAC0")]
	private void On_PinchIn(Gesture gesture)
	{
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0xACDBCC", Offset = "0xACDBCC", VA = "0xACDBCC")]
	private void On_PinchOut(Gesture gesture)
	{
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0xACDCD8", Offset = "0xACDCD8", VA = "0xACDCD8")]
	public ObjectTouch()
	{
	}
}
[Token(Token = "0x2000012")]
public class ScreenTouch : MonoBehaviour
{
	[Token(Token = "0x6000059")]
	[Address(RVA = "0xACDCE0", Offset = "0xACDCE0", VA = "0xACDCE0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0xACDD5C", Offset = "0xACDD5C", VA = "0xACDD5C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0xACDDDC", Offset = "0xACDDDC", VA = "0xACDDDC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600005C")]
	[Address(RVA = "0xACDD60", Offset = "0xACDD60", VA = "0xACDD60")]
	private void UnsubscribeEvent()
	{
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0xACDDE0", Offset = "0xACDDE0", VA = "0xACDDE0")]
	private void On_TouchStart(Gesture gesture)
	{
	}

	[Token(Token = "0x600005E")]
	[Address(RVA = "0xACE2E8", Offset = "0xACE2E8", VA = "0xACE2E8")]
	public ScreenTouch()
	{
	}
}
[Token(Token = "0x2000013")]
public class SlowRotate : MonoBehaviour
{
	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float rotateSpeed;

	[Token(Token = "0x600005F")]
	[Address(RVA = "0xACE2F0", Offset = "0xACE2F0", VA = "0xACE2F0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000060")]
	[Address(RVA = "0xACE31C", Offset = "0xACE31C", VA = "0xACE31C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000061")]
	[Address(RVA = "0xACE36C", Offset = "0xACE36C", VA = "0xACE36C")]
	public SlowRotate()
	{
	}
}
[Serializable]
[Token(Token = "0x2000014")]
public class bord : MonoBehaviour
{
	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int type;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Camera cam;

	[Token(Token = "0x6000062")]
	[Address(RVA = "0xACE374", Offset = "0xACE374", VA = "0xACE374", Slot = "4")]
	public virtual void Start()
	{
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0xACE488", Offset = "0xACE488", VA = "0xACE488")]
	public bord()
	{
	}
}
[Token(Token = "0x2000015")]
public class DoubleTap : MonoBehaviour
{
	[Token(Token = "0x6000064")]
	[Address(RVA = "0xACE490", Offset = "0xACE490", VA = "0xACE490")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0xACE5C8", Offset = "0xACE5C8", VA = "0xACE5C8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000066")]
	[Address(RVA = "0xACE648", Offset = "0xACE648", VA = "0xACE648")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0xACE5CC", Offset = "0xACE5CC", VA = "0xACE5CC")]
	private void UnsubscribeEvent()
	{
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0xACE708", Offset = "0xACE708", VA = "0xACE708")]
	private void On_DoubleTap(Gesture gesture)
	{
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0xACE848", Offset = "0xACE848", VA = "0xACE848")]
	public DoubleTap()
	{
	}
}
[Token(Token = "0x2000016")]
public class Drag : MonoBehaviour
{
	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private TextMesh textMesh;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 deltaPosition;

	[Token(Token = "0x600006A")]
	[Address(RVA = "0xACE850", Offset = "0xACE850", VA = "0xACE850")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600006B")]
	[Address(RVA = "0xACE96C", Offset = "0xACE96C", VA = "0xACE96C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600006C")]
	[Address(RVA = "0xACEA8C", Offset = "0xACEA8C", VA = "0xACEA8C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0xACE970", Offset = "0xACE970", VA = "0xACE970")]
	private void UnsubscribeEvent()
	{
	}

	[Token(Token = "0x600006E")]
	[Address(RVA = "0xACEA90", Offset = "0xACEA90", VA = "0xACEA90")]
	private void Start()
	{
	}

	[Token(Token = "0x600006F")]
	[Address(RVA = "0xACEB74", Offset = "0xACEB74", VA = "0xACEB74")]
	private void On_DragStart(Gesture gesture)
	{
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0xACECF8", Offset = "0xACECF8", VA = "0xACECF8")]
	private void On_Drag(Gesture gesture)
	{
	}

	[Token(Token = "0x6000071")]
	[Address(RVA = "0xACEE9C", Offset = "0xACEE9C", VA = "0xACEE9C")]
	private void On_DragEnd(Gesture gesture)
	{
	}

	[Token(Token = "0x6000072")]
	[Address(RVA = "0xACEFD0", Offset = "0xACEFD0", VA = "0xACEFD0")]
	public Drag()
	{
	}
}
[Token(Token = "0x2000017")]
public class GuiOneFinger : MonoBehaviour
{
	[Token(Token = "0x6000073")]
	[Address(RVA = "0xACEFD8", Offset = "0xACEFD8", VA = "0xACEFD8")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0xACF1F0", Offset = "0xACF1F0", VA = "0xACF1F0")]
	public GuiOneFinger()
	{
	}
}
[Token(Token = "0x2000018")]
public class LongTap : MonoBehaviour
{
	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private TextMesh textMesh;

	[Token(Token = "0x6000075")]
	[Address(RVA = "0xACF1F8", Offset = "0xACF1F8", VA = "0xACF1F8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000076")]
	[Address(RVA = "0xACF48C", Offset = "0xACF48C", VA = "0xACF48C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000077")]
	[Address(RVA = "0xACF5AC", Offset = "0xACF5AC", VA = "0xACF5AC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000078")]
	[Address(RVA = "0xACF490", Offset = "0xACF490", VA = "0xACF490")]
	private void UnsubscribeEvent()
	{
	}

	[Token(Token = "0x6000079")]
	[Address(RVA = "0xACF728", Offset = "0xACF728", VA = "0xACF728")]
	private void Start()
	{
	}

	[Token(Token = "0x600007A")]
	[Address(RVA = "0xACF80C", Offset = "0xACF80C", VA = "0xACF80C")]
	private void On_LongTapStart(Gesture gesture)
	{
	}

	[Token(Token = "0x600007B")]
	[Address(RVA = "0xACF94C", Offset = "0xACF94C", VA = "0xACF94C")]
	private void On_LongTap(Gesture gesture)
	{
	}

	[Token(Token = "0x600007C")]
	[Address(RVA = "0xACFA24", Offset = "0xACFA24", VA = "0xACFA24")]
	private void On_LongTapEnd(Gesture gesture)
	{
	}

	[Token(Token = "0x600007D")]
	[Address(RVA = "0xACFB30", Offset = "0xACFB30", VA = "0xACFB30")]
	public LongTap()
	{
	}
}
[Token(Token = "0x2000019")]
public class Swipe : MonoBehaviour
{
	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private TextMesh textMesh;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject trail;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Vector2 swipexy;

	[Token(Token = "0x600007E")]
	[Address(RVA = "0xACFB38", Offset = "0xACFB38", VA = "0xACFB38")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0xACFDCC", Offset = "0xACFDCC", VA = "0xACFDCC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000080")]
	[Address(RVA = "0xACFEEC", Offset = "0xACFEEC", VA = "0xACFEEC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0xACFDD0", Offset = "0xACFDD0", VA = "0xACFDD0")]
	private void UnsubscribeEvent()
	{
	}

	[Token(Token = "0x6000082")]
	[Address(RVA = "0xAD0068", Offset = "0xAD0068", VA = "0xAD0068")]
	private void Start()
	{
	}

	[Token(Token = "0x6000083")]
	[Address(RVA = "0xAD006C", Offset = "0xAD006C", VA = "0xAD006C")]
	private void On_SwipeStart(Gesture gesture)
	{
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0xAD022C", Offset = "0xAD022C", VA = "0xAD022C")]
	private void On_Swipe(Gesture gesture)
	{
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0xAD0314", Offset = "0xAD0314", VA = "0xAD0314")]
	private void On_SwipeEnd(Gesture gesture)
	{
	}

	[Token(Token = "0x6000086")]
	[Address(RVA = "0xAD0470", Offset = "0xAD0470", VA = "0xAD0470")]
	public Swipe()
	{
	}
}
[Token(Token = "0x200001A")]
public class Tap : MonoBehaviour
{
	[Token(Token = "0x6000087")]
	[Address(RVA = "0xAD0478", Offset = "0xAD0478", VA = "0xAD0478")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000088")]
	[Address(RVA = "0xAD04F4", Offset = "0xAD04F4", VA = "0xAD04F4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0xAD0574", Offset = "0xAD0574", VA = "0xAD0574")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600008A")]
	[Address(RVA = "0xAD04F8", Offset = "0xAD04F8", VA = "0xAD04F8")]
	private void UnsubscribeEvent()
	{
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0xAD0578", Offset = "0xAD0578", VA = "0xAD0578")]
	private void On_SimpleTap(Gesture gesture)
	{
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0xAD06B8", Offset = "0xAD06B8", VA = "0xAD06B8")]
	public Tap()
	{
	}
}
[Token(Token = "0x200001B")]
public class TouchStart : MonoBehaviour
{
	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private TextMesh textMesh;

	[Token(Token = "0x600008D")]
	[Address(RVA = "0xAD06C0", Offset = "0xAD06C0", VA = "0xAD06C0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0xAD0898", Offset = "0xAD0898", VA = "0xAD0898")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0xAD09B8", Offset = "0xAD09B8", VA = "0xAD09B8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000090")]
	[Address(RVA = "0xAD089C", Offset = "0xAD089C", VA = "0xAD089C")]
	private void UnsubscribeEvent()
	{
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0xAD0A78", Offset = "0xAD0A78", VA = "0xAD0A78")]
	private void Start()
	{
	}

	[Token(Token = "0x6000092")]
	[Address(RVA = "0xAD0B64", Offset = "0xAD0B64", VA = "0xAD0B64")]
	public void On_TouchStart(Gesture gesture)
	{
	}

	[Token(Token = "0x6000093")]
	[Address(RVA = "0xAD0CA4", Offset = "0xAD0CA4", VA = "0xAD0CA4")]
	public void On_TouchDown(Gesture gesture)
	{
	}

	[Token(Token = "0x6000094")]
	[Address(RVA = "0xAD0DA4", Offset = "0xAD0DA4", VA = "0xAD0DA4")]
	public void On_TouchUp(Gesture gesture)
	{
	}

	[Token(Token = "0x6000095")]
	[Address(RVA = "0xAD0EB0", Offset = "0xAD0EB0", VA = "0xAD0EB0")]
	public TouchStart()
	{
	}
}
[Token(Token = "0x200001C")]
public class GuiStartMenu : MonoBehaviour
{
	[Token(Token = "0x6000096")]
	[Address(RVA = "0xAD0EB8", Offset = "0xAD0EB8", VA = "0xAD0EB8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000097")]
	[Address(RVA = "0xAD0F34", Offset = "0xAD0F34", VA = "0xAD0F34")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0xAD1058", Offset = "0xAD1058", VA = "0xAD1058")]
	private void On_SimpleTap(Gesture gesture)
	{
	}

	[Token(Token = "0x6000099")]
	[Address(RVA = "0xAD1378", Offset = "0xAD1378", VA = "0xAD1378")]
	public GuiStartMenu()
	{
	}
}
[Token(Token = "0x200001D")]
public class GuiTwoFinger : MonoBehaviour
{
	[Token(Token = "0x600009A")]
	[Address(RVA = "0xAD1380", Offset = "0xAD1380", VA = "0xAD1380")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0xAD15F8", Offset = "0xAD15F8", VA = "0xAD15F8")]
	public GuiTwoFinger()
	{
	}
}
[Token(Token = "0x200001E")]
public class Pinch : MonoBehaviour
{
	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private TextMesh textMesh;

	[Token(Token = "0x600009C")]
	[Address(RVA = "0xAD1600", Offset = "0xAD1600", VA = "0xAD1600")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600009D")]
	[Address(RVA = "0xAD1878", Offset = "0xAD1878", VA = "0xAD1878")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0xAD1A38", Offset = "0xAD1A38", VA = "0xAD1A38")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0xAD187C", Offset = "0xAD187C", VA = "0xAD187C")]
	private void UnsubscribeEvent()
	{
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0xAD1AF8", Offset = "0xAD1AF8", VA = "0xAD1AF8")]
	private void Start()
	{
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0xAD1BDC", Offset = "0xAD1BDC", VA = "0xAD1BDC")]
	private void On_TouchStart2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0xAD1C7C", Offset = "0xAD1C7C", VA = "0xAD1C7C")]
	private void On_PinchIn(Gesture gesture)
	{
	}

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0xAD1DE4", Offset = "0xAD1DE4", VA = "0xAD1DE4")]
	private void On_PinchOut(Gesture gesture)
	{
	}

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0xAD1F4C", Offset = "0xAD1F4C", VA = "0xAD1F4C")]
	private void On_PinchEnd(Gesture gesture)
	{
	}

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0xAD2034", Offset = "0xAD2034", VA = "0xAD2034")]
	private void On_Cancel2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0xAD2038", Offset = "0xAD2038", VA = "0xAD2038")]
	public Pinch()
	{
	}
}
[Token(Token = "0x200001F")]
public class Twist : MonoBehaviour
{
	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private TextMesh textMesh;

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0xAD2040", Offset = "0xAD2040", VA = "0xAD2040")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0xAD2268", Offset = "0xAD2268", VA = "0xAD2268")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0xAD23D8", Offset = "0xAD23D8", VA = "0xAD23D8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60000AA")]
	[Address(RVA = "0xAD226C", Offset = "0xAD226C", VA = "0xAD226C")]
	private void UnsubscribeEvent()
	{
	}

	[Token(Token = "0x60000AB")]
	[Address(RVA = "0xAD2498", Offset = "0xAD2498", VA = "0xAD2498")]
	private void Start()
	{
	}

	[Token(Token = "0x60000AC")]
	[Address(RVA = "0xAD257C", Offset = "0xAD257C", VA = "0xAD257C")]
	private void On_TouchStart2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x60000AD")]
	[Address(RVA = "0xAD261C", Offset = "0xAD261C", VA = "0xAD261C")]
	private void On_Twist(Gesture gesture)
	{
	}

	[Token(Token = "0x60000AE")]
	[Address(RVA = "0xAD272C", Offset = "0xAD272C", VA = "0xAD272C")]
	private void On_TwistEnd(Gesture gesture)
	{
	}

	[Token(Token = "0x60000AF")]
	[Address(RVA = "0xAD2850", Offset = "0xAD2850", VA = "0xAD2850")]
	private void On_Cancel2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x60000B0")]
	[Address(RVA = "0xAD290C", Offset = "0xAD290C", VA = "0xAD290C")]
	public Twist()
	{
	}
}
[Token(Token = "0x2000020")]
public class TwoDoubleTap : MonoBehaviour
{
	[Token(Token = "0x60000B1")]
	[Address(RVA = "0xAD2914", Offset = "0xAD2914", VA = "0xAD2914")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000B2")]
	[Address(RVA = "0xAD2A4C", Offset = "0xAD2A4C", VA = "0xAD2A4C")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000B3")]
	[Address(RVA = "0xAD2ACC", Offset = "0xAD2ACC", VA = "0xAD2ACC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60000B4")]
	[Address(RVA = "0xAD2A50", Offset = "0xAD2A50", VA = "0xAD2A50")]
	private void UnsubscribeEvent()
	{
	}

	[Token(Token = "0x60000B5")]
	[Address(RVA = "0xAD2B8C", Offset = "0xAD2B8C", VA = "0xAD2B8C")]
	private void On_DoubleTap2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x60000B6")]
	[Address(RVA = "0xAD2CCC", Offset = "0xAD2CCC", VA = "0xAD2CCC")]
	public TwoDoubleTap()
	{
	}
}
[Token(Token = "0x2000021")]
public class TwoDrag : MonoBehaviour
{
	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private TextMesh textMesh;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 deltaPosition;

	[Token(Token = "0x60000B7")]
	[Address(RVA = "0xAD2CD4", Offset = "0xAD2CD4", VA = "0xAD2CD4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000B8")]
	[Address(RVA = "0xAD3074", Offset = "0xAD3074", VA = "0xAD3074")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000B9")]
	[Address(RVA = "0xAD31E4", Offset = "0xAD31E4", VA = "0xAD31E4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60000BA")]
	[Address(RVA = "0xAD3078", Offset = "0xAD3078", VA = "0xAD3078")]
	private void UnsubscribeEvent()
	{
	}

	[Token(Token = "0x60000BB")]
	[Address(RVA = "0xAD341C", Offset = "0xAD341C", VA = "0xAD341C")]
	private void Start()
	{
	}

	[Token(Token = "0x60000BC")]
	[Address(RVA = "0xAD3500", Offset = "0xAD3500", VA = "0xAD3500")]
	private void On_DragStart2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x60000BD")]
	[Address(RVA = "0xAD3684", Offset = "0xAD3684", VA = "0xAD3684")]
	private void On_Drag2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x60000BE")]
	[Address(RVA = "0xAD3828", Offset = "0xAD3828", VA = "0xAD3828")]
	private void On_DragEnd2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x60000BF")]
	[Address(RVA = "0xAD3958", Offset = "0xAD3958", VA = "0xAD3958")]
	private void On_Cancel2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x60000C0")]
	[Address(RVA = "0xAD3A24", Offset = "0xAD3A24", VA = "0xAD3A24")]
	public TwoDrag()
	{
	}
}
[Token(Token = "0x2000022")]
public class TwoLongTap : MonoBehaviour
{
	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private TextMesh textMesh;

	[Token(Token = "0x60000C1")]
	[Address(RVA = "0xAD3A2C", Offset = "0xAD3A2C", VA = "0xAD3A2C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000C2")]
	[Address(RVA = "0xAD3DCC", Offset = "0xAD3DCC", VA = "0xAD3DCC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000C3")]
	[Address(RVA = "0xAD3F3C", Offset = "0xAD3F3C", VA = "0xAD3F3C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0xAD3DD0", Offset = "0xAD3DD0", VA = "0xAD3DD0")]
	private void UnsubscribeEvent()
	{
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0xAD4174", Offset = "0xAD4174", VA = "0xAD4174")]
	private void Start()
	{
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0xAD4258", Offset = "0xAD4258", VA = "0xAD4258")]
	private void On_LongTapStart2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0xAD4398", Offset = "0xAD4398", VA = "0xAD4398")]
	private void On_LongTap2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x60000C8")]
	[Address(RVA = "0xAD4470", Offset = "0xAD4470", VA = "0xAD4470")]
	private void On_LongTapEnd2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x60000C9")]
	[Address(RVA = "0xAD457C", Offset = "0xAD457C", VA = "0xAD457C")]
	private void On_Cancel2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0xAD4624", Offset = "0xAD4624", VA = "0xAD4624")]
	public TwoLongTap()
	{
	}
}
[Token(Token = "0x2000023")]
public class TwoSwipe : MonoBehaviour
{
	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private TextMesh textMesh;

	[Token(Token = "0x400002C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject trail;

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0xAD462C", Offset = "0xAD462C", VA = "0xAD462C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0xAD49CC", Offset = "0xAD49CC", VA = "0xAD49CC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0xAD4B3C", Offset = "0xAD4B3C", VA = "0xAD4B3C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0xAD49D0", Offset = "0xAD49D0", VA = "0xAD49D0")]
	private void UnsubscribeEvent()
	{
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0xAD4D74", Offset = "0xAD4D74", VA = "0xAD4D74")]
	private void Start()
	{
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0xAD4E48", Offset = "0xAD4E48", VA = "0xAD4E48")]
	private void On_SwipeStart2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0xAD5010", Offset = "0xAD5010", VA = "0xAD5010")]
	private void On_Swipe2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0xAD50F8", Offset = "0xAD50F8", VA = "0xAD50F8")]
	private void On_SwipeEnd2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0xAD54E0", Offset = "0xAD54E0", VA = "0xAD54E0")]
	private void On_Cancel2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0xAD5580", Offset = "0xAD5580", VA = "0xAD5580")]
	public TwoSwipe()
	{
	}
}
[Token(Token = "0x2000024")]
public class TwoTap : MonoBehaviour
{
	[Token(Token = "0x60000D5")]
	[Address(RVA = "0xAD5588", Offset = "0xAD5588", VA = "0xAD5588")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0xAD56C0", Offset = "0xAD56C0", VA = "0xAD56C0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0xAD5740", Offset = "0xAD5740", VA = "0xAD5740")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0xAD56C4", Offset = "0xAD56C4", VA = "0xAD56C4")]
	private void UnsubscribeEvent()
	{
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0xAD5800", Offset = "0xAD5800", VA = "0xAD5800")]
	private void On_SimpleTap2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0xAD5940", Offset = "0xAD5940", VA = "0xAD5940")]
	public TwoTap()
	{
	}
}
[Token(Token = "0x2000025")]
public class TwoTouchStart : MonoBehaviour
{
	[Token(Token = "0x400002D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private TextMesh textMesh;

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0xAD5948", Offset = "0xAD5948", VA = "0xAD5948")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0xAD5B70", Offset = "0xAD5B70", VA = "0xAD5B70")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0xAD5CE0", Offset = "0xAD5CE0", VA = "0xAD5CE0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0xAD5B74", Offset = "0xAD5B74", VA = "0xAD5B74")]
	private void UnsubscribeEvent()
	{
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0xAD5DA0", Offset = "0xAD5DA0", VA = "0xAD5DA0")]
	private void Start()
	{
	}

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0xAD5E84", Offset = "0xAD5E84", VA = "0xAD5E84")]
	private void On_TouchStart2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0xAD5FC4", Offset = "0xAD5FC4", VA = "0xAD5FC4")]
	private void On_TouchDown2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0xAD60C4", Offset = "0xAD60C4", VA = "0xAD60C4")]
	private void On_TouchUp2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0xAD61D0", Offset = "0xAD61D0", VA = "0xAD61D0")]
	private void On_Cancel2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0xAD62DC", Offset = "0xAD62DC", VA = "0xAD62DC")]
	public TwoTouchStart()
	{
	}
}
[Token(Token = "0x2000026")]
[ExecuteInEditMode]
public class EasyButton : MonoBehaviour
{
	[Token(Token = "0x2000027")]
	public delegate void ButtonUpHandler(string buttonName);

	[Token(Token = "0x2000028")]
	public delegate void ButtonPressHandler(string buttonName);

	[Token(Token = "0x2000029")]
	public delegate void ButtonDownHandler(string buttonName);

	[Token(Token = "0x200002A")]
	public enum ButtonAnchor
	{
		[Token(Token = "0x4000053")]
		UpperLeft,
		[Token(Token = "0x4000054")]
		UpperCenter,
		[Token(Token = "0x4000055")]
		UpperRight,
		[Token(Token = "0x4000056")]
		MiddleLeft,
		[Token(Token = "0x4000057")]
		MiddleCenter,
		[Token(Token = "0x4000058")]
		MiddleRight,
		[Token(Token = "0x4000059")]
		LowerLeft,
		[Token(Token = "0x400005A")]
		LowerCenter,
		[Token(Token = "0x400005B")]
		LowerRight
	}

	[Token(Token = "0x200002B")]
	public enum Broadcast
	{
		[Token(Token = "0x400005D")]
		SendMessage,
		[Token(Token = "0x400005E")]
		SendMessageUpwards,
		[Token(Token = "0x400005F")]
		BroadcastMessage
	}

	[Token(Token = "0x200002C")]
	public enum ButtonState
	{
		[Token(Token = "0x4000061")]
		Down,
		[Token(Token = "0x4000062")]
		Press,
		[Token(Token = "0x4000063")]
		Up,
		[Token(Token = "0x4000064")]
		None
	}

	[Token(Token = "0x200002D")]
	public enum InteractionType
	{
		[Token(Token = "0x4000066")]
		Event,
		[Token(Token = "0x4000067")]
		Include
	}

	[Token(Token = "0x200002E")]
	private enum MessageName
	{
		[Token(Token = "0x4000069")]
		On_ButtonDown,
		[Token(Token = "0x400006A")]
		On_ButtonPress,
		[Token(Token = "0x400006B")]
		On_ButtonUp
	}

	[Token(Token = "0x4000031")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool enable;

	[Token(Token = "0x4000032")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool isActivated;

	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool showDebugArea;

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool selected;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool isUseGuiLayout;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public ButtonState buttonState;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private ButtonAnchor anchor;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private Vector2 offset;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private Vector2 scale;

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool isSwipeIn;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool isSwipeOut;

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public InteractionType interaction;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool useBroadcast;

	[Token(Token = "0x400003E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject receiverGameObject;

	[Token(Token = "0x400003F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Broadcast messageMode;

	[Token(Token = "0x4000040")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool useSpecificalMethod;

	[Token(Token = "0x4000041")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public string downMethodName;

	[Token(Token = "0x4000042")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string pressMethodName;

	[Token(Token = "0x4000043")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public string upMethodName;

	[Token(Token = "0x4000044")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public int guiDepth;

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Texture2D normalTexture;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Color buttonNormalColor;

	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private Texture2D activeTexture;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Color buttonActiveColor;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public bool showInspectorProperties;

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA9")]
	public bool showInspectorPosition;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAA")]
	public bool showInspectorEvent;

	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAB")]
	public bool showInspectorTexture;

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public Rect buttonRect;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private int buttonFingerIndex;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Texture2D currentTexture;

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Color currentColor;

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private int frame;

	[Token(Token = "0x17000001")]
	public ButtonAnchor Anchor
	{
		[Token(Token = "0x60000EB")]
		[Address(RVA = "0xAD65CC", Offset = "0xAD65CC", VA = "0xAD65CC")]
		get
		{
			return default(ButtonAnchor);
		}
		[Token(Token = "0x60000EC")]
		[Address(RVA = "0xAD65D4", Offset = "0xAD65D4", VA = "0xAD65D4")]
		set
		{
		}
	}

	[Token(Token = "0x17000002")]
	public Vector2 Offset
	{
		[Token(Token = "0x60000ED")]
		[Address(RVA = "0xAD68CC", Offset = "0xAD68CC", VA = "0xAD68CC")]
		get
		{
			return default(Vector2);
		}
		[Token(Token = "0x60000EE")]
		[Address(RVA = "0xAD68D4", Offset = "0xAD68D4", VA = "0xAD68D4")]
		set
		{
		}
	}

	[Token(Token = "0x17000003")]
	public Vector2 Scale
	{
		[Token(Token = "0x60000EF")]
		[Address(RVA = "0xAD68E0", Offset = "0xAD68E0", VA = "0xAD68E0")]
		get
		{
			return default(Vector2);
		}
		[Token(Token = "0x60000F0")]
		[Address(RVA = "0xAD68E8", Offset = "0xAD68E8", VA = "0xAD68E8")]
		set
		{
		}
	}

	[Token(Token = "0x17000004")]
	public Texture2D NormalTexture
	{
		[Token(Token = "0x60000F1")]
		[Address(RVA = "0xAD68F4", Offset = "0xAD68F4", VA = "0xAD68F4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000F2")]
		[Address(RVA = "0xAD68FC", Offset = "0xAD68FC", VA = "0xAD68FC")]
		set
		{
		}
	}

	[Token(Token = "0x17000005")]
	public Texture2D ActiveTexture
	{
		[Token(Token = "0x60000F3")]
		[Address(RVA = "0xAD69AC", Offset = "0xAD69AC", VA = "0xAD69AC")]
		get
		{
			return null;
		}
		[Token(Token = "0x60000F4")]
		[Address(RVA = "0xAD69B4", Offset = "0xAD69B4", VA = "0xAD69B4")]
		set
		{
		}
	}

	[Token(Token = "0x14000001")]
	public static event ButtonDownHandler On_ButtonDown
	{
		[Token(Token = "0x60000E5")]
		[Address(RVA = "0xAD62E4", Offset = "0xAD62E4", VA = "0xAD62E4")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60000E6")]
		[Address(RVA = "0xAD639C", Offset = "0xAD639C", VA = "0xAD639C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000002")]
	public static event ButtonPressHandler On_ButtonPress
	{
		[Token(Token = "0x60000E7")]
		[Address(RVA = "0xAD6454", Offset = "0xAD6454", VA = "0xAD6454")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60000E8")]
		[Address(RVA = "0xAD6510", Offset = "0xAD6510", VA = "0xAD6510")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000003")]
	public static event ButtonUpHandler On_ButtonUp
	{
		[Token(Token = "0x60000E9")]
		[Address(RVA = "0xAC739C", Offset = "0xAC739C", VA = "0xAC739C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60000EA")]
		[Address(RVA = "0xAC77D8", Offset = "0xAC77D8", VA = "0xAC77D8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0xAD69BC", Offset = "0xAD69BC", VA = "0xAD69BC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0xAD6AD8", Offset = "0xAD6AD8", VA = "0xAD6AD8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000F7")]
	[Address(RVA = "0xAD6CA0", Offset = "0xAD6CA0", VA = "0xAD6CA0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0xAD6E68", Offset = "0xAD6E68", VA = "0xAD6E68")]
	private void Start()
	{
	}

	[Token(Token = "0x60000F9")]
	[Address(RVA = "0xAD6EEC", Offset = "0xAD6EEC", VA = "0xAD6EEC")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60000FA")]
	[Address(RVA = "0xAD7350", Offset = "0xAD7350", VA = "0xAD7350")]
	private void Update()
	{
	}

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0xAD7454", Offset = "0xAD7454", VA = "0xAD7454")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60000FC")]
	[Address(RVA = "0xAD65DC", Offset = "0xAD65DC", VA = "0xAD65DC")]
	private void ComputeButtonAnchor(ButtonAnchor anchor)
	{
	}

	[Token(Token = "0x60000FD")]
	[Address(RVA = "0xAD7458", Offset = "0xAD7458", VA = "0xAD7458")]
	private void RaiseEvent(MessageName msg)
	{
	}

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0xAD7788", Offset = "0xAD7788", VA = "0xAD7788")]
	private void On_TouchStart(Gesture gesture)
	{
	}

	[Token(Token = "0x60000FF")]
	[Address(RVA = "0xAD7888", Offset = "0xAD7888", VA = "0xAD7888")]
	private void On_TouchDown(Gesture gesture)
	{
	}

	[Token(Token = "0x6000100")]
	[Address(RVA = "0xAD7A24", Offset = "0xAD7A24", VA = "0xAD7A24")]
	private void On_TouchUp(Gesture gesture)
	{
	}

	[Token(Token = "0x6000101")]
	[Address(RVA = "0xAD7B2C", Offset = "0xAD7B2C", VA = "0xAD7B2C")]
	public EasyButton()
	{
	}
}
[Token(Token = "0x200002F")]
[ExecuteInEditMode]
public class EasyJoystick : MonoBehaviour
{
	[Token(Token = "0x2000030")]
	public delegate void JoystickMoveStartHandler(MovingJoystick move);

	[Token(Token = "0x2000031")]
	public delegate void JoystickMoveHandler(MovingJoystick move);

	[Token(Token = "0x2000032")]
	public delegate void JoystickMoveEndHandler(MovingJoystick move);

	[Token(Token = "0x2000033")]
	public delegate void JoystickTouchStartHandler(MovingJoystick move);

	[Token(Token = "0x2000034")]
	public delegate void JoystickTapHandler(MovingJoystick move);

	[Token(Token = "0x2000035")]
	public delegate void JoystickDoubleTapHandler(MovingJoystick move);

	[Token(Token = "0x2000036")]
	public delegate void JoystickTouchUpHandler(MovingJoystick move);

	[Token(Token = "0x2000037")]
	public enum JoystickAnchor
	{
		[Token(Token = "0x40000C1")]
		None,
		[Token(Token = "0x40000C2")]
		UpperLeft,
		[Token(Token = "0x40000C3")]
		UpperCenter,
		[Token(Token = "0x40000C4")]
		UpperRight,
		[Token(Token = "0x40000C5")]
		MiddleLeft,
		[Token(Token = "0x40000C6")]
		MiddleCenter,
		[Token(Token = "0x40000C7")]
		MiddleRight,
		[Token(Token = "0x40000C8")]
		LowerLeft,
		[Token(Token = "0x40000C9")]
		LowerCenter,
		[Token(Token = "0x40000CA")]
		LowerRight
	}

	[Token(Token = "0x2000038")]
	public enum PropertiesInfluenced
	{
		[Token(Token = "0x40000CC")]
		Rotate,
		[Token(Token = "0x40000CD")]
		RotateLocal,
		[Token(Token = "0x40000CE")]
		Translate,
		[Token(Token = "0x40000CF")]
		TranslateLocal,
		[Token(Token = "0x40000D0")]
		Scale
	}

	[Token(Token = "0x2000039")]
	public enum AxisInfluenced
	{
		[Token(Token = "0x40000D2")]
		X,
		[Token(Token = "0x40000D3")]
		Y,
		[Token(Token = "0x40000D4")]
		Z,
		[Token(Token = "0x40000D5")]
		XYZ
	}

	[Token(Token = "0x200003A")]
	public enum DynamicArea
	{
		[Token(Token = "0x40000D7")]
		FullScreen,
		[Token(Token = "0x40000D8")]
		Left,
		[Token(Token = "0x40000D9")]
		Right,
		[Token(Token = "0x40000DA")]
		Top,
		[Token(Token = "0x40000DB")]
		Bottom,
		[Token(Token = "0x40000DC")]
		TopLeft,
		[Token(Token = "0x40000DD")]
		TopRight,
		[Token(Token = "0x40000DE")]
		BottomLeft,
		[Token(Token = "0x40000DF")]
		BottomRight
	}

	[Token(Token = "0x200003B")]
	public enum InteractionType
	{
		[Token(Token = "0x40000E1")]
		Direct,
		[Token(Token = "0x40000E2")]
		Include,
		[Token(Token = "0x40000E3")]
		EventNotification,
		[Token(Token = "0x40000E4")]
		DirectAndEvent
	}

	[Token(Token = "0x200003C")]
	public enum Broadcast
	{
		[Token(Token = "0x40000E6")]
		SendMessage,
		[Token(Token = "0x40000E7")]
		SendMessageUpwards,
		[Token(Token = "0x40000E8")]
		BroadcastMessage
	}

	[Token(Token = "0x200003D")]
	private enum MessageName
	{
		[Token(Token = "0x40000EA")]
		On_JoystickMoveStart,
		[Token(Token = "0x40000EB")]
		On_JoystickTouchStart,
		[Token(Token = "0x40000EC")]
		On_JoystickTouchUp,
		[Token(Token = "0x40000ED")]
		On_JoystickMove,
		[Token(Token = "0x40000EE")]
		On_JoystickMoveEnd,
		[Token(Token = "0x40000EF")]
		On_JoystickTap,
		[Token(Token = "0x40000F0")]
		On_JoystickDoubleTap
	}

	[Token(Token = "0x4000073")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector2 joystickAxis;

	[Token(Token = "0x4000074")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector2 joystickTouch;

	[Token(Token = "0x4000075")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector2 joystickValue;

	[Token(Token = "0x4000076")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool enable;

	[Token(Token = "0x4000077")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	public bool visible;

	[Token(Token = "0x4000078")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
	public bool isActivated;

	[Token(Token = "0x4000079")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
	public bool showDebugRadius;

	[Token(Token = "0x400007A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool selected;

	[Token(Token = "0x400007B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool useFixedUpdate;

	[Token(Token = "0x400007C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
	public bool isUseGuiLayout;

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
	[SerializeField]
	private bool dynamicJoystick;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public DynamicArea area;

	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private JoystickAnchor joyAnchor;

	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Vector2 joystickPositionOffset;

	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private float zoneRadius;

	[Token(Token = "0x4000082")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[SerializeField]
	private float touchSize;

	[Token(Token = "0x4000083")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float deadZone;

	[Token(Token = "0x4000084")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	[SerializeField]
	private bool restrictArea;

	[Token(Token = "0x4000085")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	public bool resetFingerExit;

	[Token(Token = "0x4000086")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private InteractionType interaction;

	[Token(Token = "0x4000087")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public bool useBroadcast;

	[Token(Token = "0x4000088")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Broadcast messageMode;

	[Token(Token = "0x4000089")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject receiverGameObject;

	[Token(Token = "0x400008A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Vector2 speed;

	[Token(Token = "0x400008B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public bool enableXaxis;

	[Token(Token = "0x400008C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private Transform xAxisTransform;

	[Token(Token = "0x400008D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public CharacterController xAxisCharacterController;

	[Token(Token = "0x400008E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float xAxisGravity;

	[Token(Token = "0x400008F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	[SerializeField]
	private PropertiesInfluenced xTI;

	[Token(Token = "0x4000090")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public AxisInfluenced xAI;

	[Token(Token = "0x4000091")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public bool inverseXAxis;

	[Token(Token = "0x4000092")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
	public bool enableXClamp;

	[Token(Token = "0x4000093")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public float clampXMax;

	[Token(Token = "0x4000094")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public float clampXMin;

	[Token(Token = "0x4000095")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public bool enableXAutoStab;

	[Token(Token = "0x4000096")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	[SerializeField]
	private float thresholdX;

	[Token(Token = "0x4000097")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	private float stabSpeedX;

	[Token(Token = "0x4000098")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	public bool enableYaxis;

	[Token(Token = "0x4000099")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private Transform yAxisTransform;

	[Token(Token = "0x400009A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public CharacterController yAxisCharacterController;

	[Token(Token = "0x400009B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public float yAxisGravity;

	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	[SerializeField]
	private PropertiesInfluenced yTI;

	[Token(Token = "0x400009D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public AxisInfluenced yAI;

	[Token(Token = "0x400009E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public bool inverseYAxis;

	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD5")]
	public bool enableYClamp;

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public float clampYMax;

	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	public float clampYMin;

	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public bool enableYAutoStab;

	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	[SerializeField]
	private float thresholdY;

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[SerializeField]
	private float stabSpeedY;

	[Token(Token = "0x40000A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	public bool enableSmoothing;

	[Token(Token = "0x40000A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	[SerializeField]
	public Vector2 smoothing;

	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public bool enableInertia;

	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	[SerializeField]
	public Vector2 inertia;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	public int guiDepth;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public bool showZone;

	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x109")]
	public bool showTouch;

	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10A")]
	public bool showDeadZone;

	[Token(Token = "0x40000AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public Texture areaTexture;

	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public Color areaColor;

	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public Texture touchTexture;

	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public Color touchColor;

	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public Texture deadTexture;

	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public bool showProperties;

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x149")]
	public bool showInteraction;

	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14A")]
	public bool showAppearance;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14B")]
	public bool showPosition;

	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
	private Vector2 joystickCenter;

	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	private Rect areaRect;

	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
	private Rect deadRect;

	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
	private Vector2 anchorPosition;

	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
	private bool virtualJoystick;

	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private int joystickIndex;

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
	private float touchSizeCoef;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private bool sendEnd;

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	private float startXLocalAngle;

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private float startYLocalAngle;

	[Token(Token = "0x17000006")]
	public Vector2 JoystickAxis
	{
		[Token(Token = "0x600011C")]
		[Address(RVA = "0xAD85C0", Offset = "0xAD85C0", VA = "0xAD85C0")]
		get
		{
			return default(Vector2);
		}
	}

	[Token(Token = "0x17000007")]
	public Vector2 JoystickTouch
	{
		[Token(Token = "0x600011D")]
		[Address(RVA = "0xAD85C8", Offset = "0xAD85C8", VA = "0xAD85C8")]
		get
		{
			return default(Vector2);
		}
		[Token(Token = "0x600011E")]
		[Address(RVA = "0xAD85DC", Offset = "0xAD85DC", VA = "0xAD85DC")]
		set
		{
		}
	}

	[Token(Token = "0x17000008")]
	public Vector2 JoystickValue
	{
		[Token(Token = "0x600011F")]
		[Address(RVA = "0xAD8610", Offset = "0xAD8610", VA = "0xAD8610")]
		get
		{
			return default(Vector2);
		}
	}

	[Token(Token = "0x17000009")]
	public bool DynamicJoystick
	{
		[Token(Token = "0x6000120")]
		[Address(RVA = "0xAD8618", Offset = "0xAD8618", VA = "0xAD8618")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000121")]
		[Address(RVA = "0xAD8620", Offset = "0xAD8620", VA = "0xAD8620")]
		set
		{
		}
	}

	[Token(Token = "0x1700000A")]
	public JoystickAnchor JoyAnchor
	{
		[Token(Token = "0x6000122")]
		[Address(RVA = "0xAD8654", Offset = "0xAD8654", VA = "0xAD8654")]
		get
		{
			return default(JoystickAnchor);
		}
		[Token(Token = "0x6000123")]
		[Address(RVA = "0xAD865C", Offset = "0xAD865C", VA = "0xAD865C")]
		set
		{
		}
	}

	[Token(Token = "0x1700000B")]
	public Vector2 JoystickPositionOffset
	{
		[Token(Token = "0x6000124")]
		[Address(RVA = "0xAD89B0", Offset = "0xAD89B0", VA = "0xAD89B0")]
		get
		{
			return default(Vector2);
		}
		[Token(Token = "0x6000125")]
		[Address(RVA = "0xAD89B8", Offset = "0xAD89B8", VA = "0xAD89B8")]
		set
		{
		}
	}

	[Token(Token = "0x1700000C")]
	public float ZoneRadius
	{
		[Token(Token = "0x6000126")]
		[Address(RVA = "0xAD89D0", Offset = "0xAD89D0", VA = "0xAD89D0")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000127")]
		[Address(RVA = "0xAD89D8", Offset = "0xAD89D8", VA = "0xAD89D8")]
		set
		{
		}
	}

	[Token(Token = "0x1700000D")]
	public float TouchSize
	{
		[Token(Token = "0x6000128")]
		[Address(RVA = "0xAD89E4", Offset = "0xAD89E4", VA = "0xAD89E4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000129")]
		[Address(RVA = "0xAD89EC", Offset = "0xAD89EC", VA = "0xAD89EC")]
		set
		{
		}
	}

	[Token(Token = "0x1700000E")]
	public bool RestrictArea
	{
		[Token(Token = "0x600012A")]
		[Address(RVA = "0xAD8A18", Offset = "0xAD8A18", VA = "0xAD8A18")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600012B")]
		[Address(RVA = "0xAD8A20", Offset = "0xAD8A20", VA = "0xAD8A20")]
		set
		{
		}
	}

	[Token(Token = "0x1700000F")]
	public InteractionType Interaction
	{
		[Token(Token = "0x600012C")]
		[Address(RVA = "0xAD8A44", Offset = "0xAD8A44", VA = "0xAD8A44")]
		get
		{
			return default(InteractionType);
		}
		[Token(Token = "0x600012D")]
		[Address(RVA = "0xAD8A4C", Offset = "0xAD8A4C", VA = "0xAD8A4C")]
		set
		{
		}
	}

	[Token(Token = "0x17000010")]
	public Transform XAxisTransform
	{
		[Token(Token = "0x600012E")]
		[Address(RVA = "0xAD8A60", Offset = "0xAD8A60", VA = "0xAD8A60")]
		get
		{
			return null;
		}
		[Token(Token = "0x600012F")]
		[Address(RVA = "0xAD8A68", Offset = "0xAD8A68", VA = "0xAD8A68")]
		set
		{
		}
	}

	[Token(Token = "0x17000011")]
	public PropertiesInfluenced XTI
	{
		[Token(Token = "0x6000130")]
		[Address(RVA = "0xAD8B48", Offset = "0xAD8B48", VA = "0xAD8B48")]
		get
		{
			return default(PropertiesInfluenced);
		}
		[Token(Token = "0x6000131")]
		[Address(RVA = "0xAD8B50", Offset = "0xAD8B50", VA = "0xAD8B50")]
		set
		{
		}
	}

	[Token(Token = "0x17000012")]
	public float ThresholdX
	{
		[Token(Token = "0x6000132")]
		[Address(RVA = "0xAD8B68", Offset = "0xAD8B68", VA = "0xAD8B68")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000133")]
		[Address(RVA = "0xAD8B70", Offset = "0xAD8B70", VA = "0xAD8B70")]
		set
		{
		}
	}

	[Token(Token = "0x17000013")]
	public float StabSpeedX
	{
		[Token(Token = "0x6000134")]
		[Address(RVA = "0xAD8B84", Offset = "0xAD8B84", VA = "0xAD8B84")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000135")]
		[Address(RVA = "0xAD8B8C", Offset = "0xAD8B8C", VA = "0xAD8B8C")]
		set
		{
		}
	}

	[Token(Token = "0x17000014")]
	public Transform YAxisTransform
	{
		[Token(Token = "0x6000136")]
		[Address(RVA = "0xAD8BA0", Offset = "0xAD8BA0", VA = "0xAD8BA0")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000137")]
		[Address(RVA = "0xAD8BA8", Offset = "0xAD8BA8", VA = "0xAD8BA8")]
		set
		{
		}
	}

	[Token(Token = "0x17000015")]
	public PropertiesInfluenced YTI
	{
		[Token(Token = "0x6000138")]
		[Address(RVA = "0xAD8C88", Offset = "0xAD8C88", VA = "0xAD8C88")]
		get
		{
			return default(PropertiesInfluenced);
		}
		[Token(Token = "0x6000139")]
		[Address(RVA = "0xAD8C90", Offset = "0xAD8C90", VA = "0xAD8C90")]
		set
		{
		}
	}

	[Token(Token = "0x17000016")]
	public float ThresholdY
	{
		[Token(Token = "0x600013A")]
		[Address(RVA = "0xAD8CA8", Offset = "0xAD8CA8", VA = "0xAD8CA8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600013B")]
		[Address(RVA = "0xAD8CB0", Offset = "0xAD8CB0", VA = "0xAD8CB0")]
		set
		{
		}
	}

	[Token(Token = "0x17000017")]
	public float StabSpeedY
	{
		[Token(Token = "0x600013C")]
		[Address(RVA = "0xAD8CC4", Offset = "0xAD8CC4", VA = "0xAD8CC4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600013D")]
		[Address(RVA = "0xAD8CCC", Offset = "0xAD8CCC", VA = "0xAD8CCC")]
		set
		{
		}
	}

	[Token(Token = "0x17000018")]
	public Vector2 Smoothing
	{
		[Token(Token = "0x600013E")]
		[Address(RVA = "0xAD8CE0", Offset = "0xAD8CE0", VA = "0xAD8CE0")]
		get
		{
			return default(Vector2);
		}
		[Token(Token = "0x600013F")]
		[Address(RVA = "0xAD8CE8", Offset = "0xAD8CE8", VA = "0xAD8CE8")]
		set
		{
		}
	}

	[Token(Token = "0x17000019")]
	public Vector2 Inertia
	{
		[Token(Token = "0x6000140")]
		[Address(RVA = "0xAD8D08", Offset = "0xAD8D08", VA = "0xAD8D08")]
		get
		{
			return default(Vector2);
		}
		[Token(Token = "0x6000141")]
		[Address(RVA = "0xAD8D10", Offset = "0xAD8D10", VA = "0xAD8D10")]
		set
		{
		}
	}

	[Token(Token = "0x14000004")]
	public static event JoystickMoveStartHandler On_JoystickMoveStart
	{
		[Token(Token = "0x600010E")]
		[Address(RVA = "0xAD7E70", Offset = "0xAD7E70", VA = "0xAD7E70")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600010F")]
		[Address(RVA = "0xAD7F28", Offset = "0xAD7F28", VA = "0xAD7F28")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000005")]
	public static event JoystickMoveHandler On_JoystickMove
	{
		[Token(Token = "0x6000110")]
		[Address(RVA = "0xAC7004", Offset = "0xAC7004", VA = "0xAC7004")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000111")]
		[Address(RVA = "0xAC7660", Offset = "0xAC7660", VA = "0xAC7660")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000006")]
	public static event JoystickMoveEndHandler On_JoystickMoveEnd
	{
		[Token(Token = "0x6000112")]
		[Address(RVA = "0xAC71FC", Offset = "0xAC71FC", VA = "0xAC71FC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000113")]
		[Address(RVA = "0xAC771C", Offset = "0xAC771C", VA = "0xAC771C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000007")]
	public static event JoystickTouchStartHandler On_JoystickTouchStart
	{
		[Token(Token = "0x6000114")]
		[Address(RVA = "0xAD7FE0", Offset = "0xAD7FE0", VA = "0xAD7FE0")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000115")]
		[Address(RVA = "0xAD809C", Offset = "0xAD809C", VA = "0xAD809C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000008")]
	public static event JoystickTapHandler On_JoystickTap
	{
		[Token(Token = "0x6000116")]
		[Address(RVA = "0xAD8158", Offset = "0xAD8158", VA = "0xAD8158")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000117")]
		[Address(RVA = "0xAD8214", Offset = "0xAD8214", VA = "0xAD8214")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000009")]
	public static event JoystickDoubleTapHandler On_JoystickDoubleTap
	{
		[Token(Token = "0x6000118")]
		[Address(RVA = "0xAD82D0", Offset = "0xAD82D0", VA = "0xAD82D0")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000119")]
		[Address(RVA = "0xAD838C", Offset = "0xAD838C", VA = "0xAD838C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000A")]
	public static event JoystickTouchUpHandler On_JoystickTouchUp
	{
		[Token(Token = "0x600011A")]
		[Address(RVA = "0xAD8448", Offset = "0xAD8448", VA = "0xAD8448")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600011B")]
		[Address(RVA = "0xAD8504", Offset = "0xAD8504", VA = "0xAD8504")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000142")]
	[Address(RVA = "0xAD8D38", Offset = "0xAD8D38", VA = "0xAD8D38")]
	private void OnLevelWasLoaded()
	{
	}

	[Token(Token = "0x6000143")]
	[Address(RVA = "0xAD8D44", Offset = "0xAD8D44", VA = "0xAD8D44")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0xAD8F00", Offset = "0xAD8F00", VA = "0xAD8F00")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000145")]
	[Address(RVA = "0xAD9170", Offset = "0xAD9170", VA = "0xAD9170")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000146")]
	[Address(RVA = "0xAD93E0", Offset = "0xAD93E0", VA = "0xAD93E0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0xAD960C", Offset = "0xAD960C", VA = "0xAD960C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0xAD9998", Offset = "0xAD9998", VA = "0xAD9998")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0xAD9624", Offset = "0xAD9624", VA = "0xAD9624")]
	private void UpdateJoystick()
	{
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0xADA42C", Offset = "0xADA42C", VA = "0xADA42C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600014B")]
	[Address(RVA = "0xADABD4", Offset = "0xADABD4", VA = "0xADABD4")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0xAD9D9C", Offset = "0xAD9D9C", VA = "0xAD9D9C")]
	private void CreateEvent(MessageName message)
	{
	}

	[Token(Token = "0x600014D")]
	[Address(RVA = "0xADA314", Offset = "0xADA314", VA = "0xADA314")]
	private void UpdateDirect()
	{
	}

	[Token(Token = "0x600014E")]
	[Address(RVA = "0xADA10C", Offset = "0xADA10C", VA = "0xADA10C")]
	private void UpdateGravity()
	{
	}

	[Token(Token = "0x600014F")]
	[Address(RVA = "0xADABD8", Offset = "0xADABD8", VA = "0xADABD8")]
	private Vector3 GetInfluencedAxis(AxisInfluenced axisInfluenced)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000150")]
	[Address(RVA = "0xADAD2C", Offset = "0xADAD2C", VA = "0xADAD2C")]
	private void DoActionDirect(Transform axisTransform, PropertiesInfluenced inlfuencedProperty, Vector3 axis, float sensibility, CharacterController charact)
	{
	}

	[Token(Token = "0x6000151")]
	[Address(RVA = "0xADB050", Offset = "0xADB050", VA = "0xADB050")]
	private void DoAngleLimitation(Transform axisTransform, AxisInfluenced axisInfluenced, float clampMin, float clampMax, float startAngle)
	{
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0xAD99B0", Offset = "0xAD99B0", VA = "0xAD99B0")]
	private void DoAutoStabilisation(Transform axisTransform, AxisInfluenced axisInfluenced, float threshold, float speed, float startAngle)
	{
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0xAD94A8", Offset = "0xAD94A8", VA = "0xAD94A8")]
	private float GetStartAutoStabAngle(Transform axisTransform, AxisInfluenced axisInfluenced)
	{
		return default(float);
	}

	[Token(Token = "0x6000154")]
	[Address(RVA = "0xAD9CF4", Offset = "0xAD9CF4", VA = "0xAD9CF4")]
	private float ComputeDeadZone()
	{
		return default(float);
	}

	[Token(Token = "0x6000155")]
	[Address(RVA = "0xAD8664", Offset = "0xAD8664", VA = "0xAD8664")]
	private void ComputeJoystickAnchor(JoystickAnchor anchor)
	{
	}

	[Token(Token = "0x6000156")]
	[Address(RVA = "0xADB23C", Offset = "0xADB23C", VA = "0xADB23C")]
	private void On_TouchStart(Gesture gesture)
	{
	}

	[Token(Token = "0x6000157")]
	[Address(RVA = "0xADB4EC", Offset = "0xADB4EC", VA = "0xADB4EC")]
	private void On_SimpleTap(Gesture gesture)
	{
	}

	[Token(Token = "0x6000158")]
	[Address(RVA = "0xADB53C", Offset = "0xADB53C", VA = "0xADB53C")]
	private void On_DoubleTap(Gesture gesture)
	{
	}

	[Token(Token = "0x6000159")]
	[Address(RVA = "0xADB58C", Offset = "0xADB58C", VA = "0xADB58C")]
	private void On_TouchDown(Gesture gesture)
	{
	}

	[Token(Token = "0x600015A")]
	[Address(RVA = "0xADB820", Offset = "0xADB820", VA = "0xADB820")]
	private void On_TouchUp(Gesture gesture)
	{
	}

	[Token(Token = "0x600015B")]
	[Address(RVA = "0xAC7E04", Offset = "0xAC7E04", VA = "0xAC7E04")]
	public void On_Manual(Vector2 movement)
	{
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0xADB86C", Offset = "0xADB86C", VA = "0xADB86C")]
	public EasyJoystick()
	{
	}
}
[Token(Token = "0x200003E")]
public class EasyTouch : MonoBehaviour
{
	[Token(Token = "0x200003F")]
	public delegate void TouchCancelHandler(Gesture gesture);

	[Token(Token = "0x2000040")]
	public delegate void Cancel2FingersHandler(Gesture gesture);

	[Token(Token = "0x2000041")]
	public delegate void TouchStartHandler(Gesture gesture);

	[Token(Token = "0x2000042")]
	public delegate void TouchDownHandler(Gesture gesture);

	[Token(Token = "0x2000043")]
	public delegate void TouchUpHandler(Gesture gesture);

	[Token(Token = "0x2000044")]
	public delegate void SimpleTapHandler(Gesture gesture);

	[Token(Token = "0x2000045")]
	public delegate void DoubleTapHandler(Gesture gesture);

	[Token(Token = "0x2000046")]
	public delegate void LongTapStartHandler(Gesture gesture);

	[Token(Token = "0x2000047")]
	public delegate void LongTapHandler(Gesture gesture);

	[Token(Token = "0x2000048")]
	public delegate void LongTapEndHandler(Gesture gesture);

	[Token(Token = "0x2000049")]
	public delegate void DragStartHandler(Gesture gesture);

	[Token(Token = "0x200004A")]
	public delegate void DragHandler(Gesture gesture);

	[Token(Token = "0x200004B")]
	public delegate void DragEndHandler(Gesture gesture);

	[Token(Token = "0x200004C")]
	public delegate void SwipeStartHandler(Gesture gesture);

	[Token(Token = "0x200004D")]
	public delegate void SwipeHandler(Gesture gesture);

	[Token(Token = "0x200004E")]
	public delegate void SwipeEndHandler(Gesture gesture);

	[Token(Token = "0x200004F")]
	public delegate void TouchStart2FingersHandler(Gesture gesture);

	[Token(Token = "0x2000050")]
	public delegate void TouchDown2FingersHandler(Gesture gesture);

	[Token(Token = "0x2000051")]
	public delegate void TouchUp2FingersHandler(Gesture gesture);

	[Token(Token = "0x2000052")]
	public delegate void SimpleTap2FingersHandler(Gesture gesture);

	[Token(Token = "0x2000053")]
	public delegate void DoubleTap2FingersHandler(Gesture gesture);

	[Token(Token = "0x2000054")]
	public delegate void LongTapStart2FingersHandler(Gesture gesture);

	[Token(Token = "0x2000055")]
	public delegate void LongTap2FingersHandler(Gesture gesture);

	[Token(Token = "0x2000056")]
	public delegate void LongTapEnd2FingersHandler(Gesture gesture);

	[Token(Token = "0x2000057")]
	public delegate void TwistHandler(Gesture gesture);

	[Token(Token = "0x2000058")]
	public delegate void TwistEndHandler(Gesture gesture);

	[Token(Token = "0x2000059")]
	public delegate void PinchInHandler(Gesture gesture);

	[Token(Token = "0x200005A")]
	public delegate void PinchOutHandler(Gesture gesture);

	[Token(Token = "0x200005B")]
	public delegate void PinchEndHandler(Gesture gesture);

	[Token(Token = "0x200005C")]
	public delegate void DragStart2FingersHandler(Gesture gesture);

	[Token(Token = "0x200005D")]
	public delegate void Drag2FingersHandler(Gesture gesture);

	[Token(Token = "0x200005E")]
	public delegate void DragEnd2FingersHandler(Gesture gesture);

	[Token(Token = "0x200005F")]
	public delegate void SwipeStart2FingersHandler(Gesture gesture);

	[Token(Token = "0x2000060")]
	public delegate void Swipe2FingersHandler(Gesture gesture);

	[Token(Token = "0x2000061")]
	public delegate void SwipeEnd2FingersHandler(Gesture gesture);

	[Token(Token = "0x2000062")]
	public delegate void EasyTouchIsReadyHandler();

	[Token(Token = "0x2000063")]
	public enum GestureType
	{
		[Token(Token = "0x4000148")]
		Tap,
		[Token(Token = "0x4000149")]
		Drag,
		[Token(Token = "0x400014A")]
		Swipe,
		[Token(Token = "0x400014B")]
		None,
		[Token(Token = "0x400014C")]
		LongTap,
		[Token(Token = "0x400014D")]
		Pinch,
		[Token(Token = "0x400014E")]
		Twist,
		[Token(Token = "0x400014F")]
		Cancel,
		[Token(Token = "0x4000150")]
		Acquisition
	}

	[Token(Token = "0x2000064")]
	public enum SwipeType
	{
		[Token(Token = "0x4000152")]
		None,
		[Token(Token = "0x4000153")]
		Left,
		[Token(Token = "0x4000154")]
		Right,
		[Token(Token = "0x4000155")]
		Up,
		[Token(Token = "0x4000156")]
		Down,
		[Token(Token = "0x4000157")]
		Other
	}

	[Token(Token = "0x2000065")]
	private enum EventName
	{
		[Token(Token = "0x4000159")]
		None,
		[Token(Token = "0x400015A")]
		On_Cancel,
		[Token(Token = "0x400015B")]
		On_Cancel2Fingers,
		[Token(Token = "0x400015C")]
		On_TouchStart,
		[Token(Token = "0x400015D")]
		On_TouchDown,
		[Token(Token = "0x400015E")]
		On_TouchUp,
		[Token(Token = "0x400015F")]
		On_SimpleTap,
		[Token(Token = "0x4000160")]
		On_DoubleTap,
		[Token(Token = "0x4000161")]
		On_LongTapStart,
		[Token(Token = "0x4000162")]
		On_LongTap,
		[Token(Token = "0x4000163")]
		On_LongTapEnd,
		[Token(Token = "0x4000164")]
		On_DragStart,
		[Token(Token = "0x4000165")]
		On_Drag,
		[Token(Token = "0x4000166")]
		On_DragEnd,
		[Token(Token = "0x4000167")]
		On_SwipeStart,
		[Token(Token = "0x4000168")]
		On_Swipe,
		[Token(Token = "0x4000169")]
		On_SwipeEnd,
		[Token(Token = "0x400016A")]
		On_TouchStart2Fingers,
		[Token(Token = "0x400016B")]
		On_TouchDown2Fingers,
		[Token(Token = "0x400016C")]
		On_TouchUp2Fingers,
		[Token(Token = "0x400016D")]
		On_SimpleTap2Fingers,
		[Token(Token = "0x400016E")]
		On_DoubleTap2Fingers,
		[Token(Token = "0x400016F")]
		On_LongTapStart2Fingers,
		[Token(Token = "0x4000170")]
		On_LongTap2Fingers,
		[Token(Token = "0x4000171")]
		On_LongTapEnd2Fingers,
		[Token(Token = "0x4000172")]
		On_Twist,
		[Token(Token = "0x4000173")]
		On_TwistEnd,
		[Token(Token = "0x4000174")]
		On_PinchIn,
		[Token(Token = "0x4000175")]
		On_PinchOut,
		[Token(Token = "0x4000176")]
		On_PinchEnd,
		[Token(Token = "0x4000177")]
		On_DragStart2Fingers,
		[Token(Token = "0x4000178")]
		On_Drag2Fingers,
		[Token(Token = "0x4000179")]
		On_DragEnd2Fingers,
		[Token(Token = "0x400017A")]
		On_SwipeStart2Fingers,
		[Token(Token = "0x400017B")]
		On_Swipe2Fingers,
		[Token(Token = "0x400017C")]
		On_SwipeEnd2Fingers,
		[Token(Token = "0x400017D")]
		On_EasyTouchIsReady
	}

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public static EasyTouch instance;

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool enable;

	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool enableRemote;

	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool useBroadcastMessage;

	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject receiverObject;

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool isExtension;

	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool enable2FingersGesture;

	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	public bool enableTwist;

	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
	public bool enablePinch;

	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public List<ECamera> touchCameras;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool autoSelect;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public LayerMask pickableLayers;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool enable2D;

	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public LayerMask pickableLayers2D;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float StationnaryTolerance;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float longTapTime;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float swipeTolerance;

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float minPinchLength;

	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float minTwistAngle;

	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public bool enabledNGuiMode;

	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public LayerMask nGUILayers;

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public List<Camera> nGUICameras;

	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool isStartHoverNGUI;

	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public List<Rect> reservedAreas;

	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public List<Rect> reservedVirtualAreas;

	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public List<Rect> reservedGuiAreas;

	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public bool enableReservedArea;

	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public KeyCode twistKey;

	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public KeyCode swipeKey;

	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public bool showGeneral;

	[Token(Token = "0x4000133")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
	public bool showSelect;

	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9E")]
	public bool showGesture;

	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9F")]
	public bool showTwoFinger;

	[Token(Token = "0x4000136")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public bool showSecondFinger;

	[Token(Token = "0x4000137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private EasyTouchInput input;

	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private GestureType complexCurrentGesture;

	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private GestureType oldGesture;

	[Token(Token = "0x400013A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float startTimeAction;

	[Token(Token = "0x400013B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Finger[] fingers;

	[Token(Token = "0x400013C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private GameObject pickObject2Finger;

	[Token(Token = "0x400013D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private GameObject oldPickObject2Finger;

	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public Texture secondFingerTexture;

	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Vector2 startPosition2Finger;

	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private int twoFinger0;

	[Token(Token = "0x4000141")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private int twoFinger1;

	[Token(Token = "0x4000142")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private Vector2 oldStartPosition2Finger;

	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private float oldFingerDistance;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
	private bool twoFingerDragStart;

	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xFD")]
	private bool twoFingerSwipeStart;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private int oldTouchCount;

	[Token(Token = "0x1400000B")]
	public static event TouchCancelHandler On_Cancel
	{
		[Token(Token = "0x6000179")]
		[Address(RVA = "0xADC14C", Offset = "0xADC14C", VA = "0xADC14C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600017A")]
		[Address(RVA = "0xADC204", Offset = "0xADC204", VA = "0xADC204")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000C")]
	public static event Cancel2FingersHandler On_Cancel2Fingers
	{
		[Token(Token = "0x600017B")]
		[Address(RVA = "0xACA554", Offset = "0xACA554", VA = "0xACA554")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600017C")]
		[Address(RVA = "0xACADE8", Offset = "0xACADE8", VA = "0xACADE8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000D")]
	public static event TouchStartHandler On_TouchStart
	{
		[Token(Token = "0x600017D")]
		[Address(RVA = "0xAC8C0C", Offset = "0xAC8C0C", VA = "0xAC8C0C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600017E")]
		[Address(RVA = "0xACB5B0", Offset = "0xACB5B0", VA = "0xACB5B0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000E")]
	public static event TouchDownHandler On_TouchDown
	{
		[Token(Token = "0x600017F")]
		[Address(RVA = "0xAC8FF4", Offset = "0xAC8FF4", VA = "0xAC8FF4")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000180")]
		[Address(RVA = "0xAC9240", Offset = "0xAC9240", VA = "0xAC9240")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000F")]
	public static event TouchUpHandler On_TouchUp
	{
		[Token(Token = "0x6000181")]
		[Address(RVA = "0xAD07DC", Offset = "0xAD07DC", VA = "0xAD07DC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000182")]
		[Address(RVA = "0xAD09BC", Offset = "0xAD09BC", VA = "0xAD09BC")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000010")]
	public static event SimpleTapHandler On_SimpleTap
	{
		[Token(Token = "0x6000183")]
		[Address(RVA = "0xACC344", Offset = "0xACC344", VA = "0xACC344")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000184")]
		[Address(RVA = "0xACC82C", Offset = "0xACC82C", VA = "0xACC82C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000011")]
	public static event DoubleTapHandler On_DoubleTap
	{
		[Token(Token = "0x6000185")]
		[Address(RVA = "0xACE50C", Offset = "0xACE50C", VA = "0xACE50C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000186")]
		[Address(RVA = "0xACE64C", Offset = "0xACE64C", VA = "0xACE64C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000012")]
	public static event LongTapStartHandler On_LongTapStart
	{
		[Token(Token = "0x6000187")]
		[Address(RVA = "0xACF314", Offset = "0xACF314", VA = "0xACF314")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000188")]
		[Address(RVA = "0xACF5B0", Offset = "0xACF5B0", VA = "0xACF5B0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000013")]
	public static event LongTapHandler On_LongTap
	{
		[Token(Token = "0x6000189")]
		[Address(RVA = "0xACC400", Offset = "0xACC400", VA = "0xACC400")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600018A")]
		[Address(RVA = "0xACC8E8", Offset = "0xACC8E8", VA = "0xACC8E8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000014")]
	public static event LongTapEndHandler On_LongTapEnd
	{
		[Token(Token = "0x600018B")]
		[Address(RVA = "0xACF3D0", Offset = "0xACF3D0", VA = "0xACF3D0")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600018C")]
		[Address(RVA = "0xACF66C", Offset = "0xACF66C", VA = "0xACF66C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000015")]
	public static event DragStartHandler On_DragStart
	{
		[Token(Token = "0x600018D")]
		[Address(RVA = "0xACA030", Offset = "0xACA030", VA = "0xACA030")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600018E")]
		[Address(RVA = "0xACA8C4", Offset = "0xACA8C4", VA = "0xACA8C4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000016")]
	public static event DragHandler On_Drag
	{
		[Token(Token = "0x600018F")]
		[Address(RVA = "0xACA0EC", Offset = "0xACA0EC", VA = "0xACA0EC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000190")]
		[Address(RVA = "0xACA980", Offset = "0xACA980", VA = "0xACA980")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000017")]
	public static event DragEndHandler On_DragEnd
	{
		[Token(Token = "0x6000191")]
		[Address(RVA = "0xACC4BC", Offset = "0xACC4BC", VA = "0xACC4BC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000192")]
		[Address(RVA = "0xACC9A4", Offset = "0xACC9A4", VA = "0xACC9A4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000018")]
	public static event SwipeStartHandler On_SwipeStart
	{
		[Token(Token = "0x6000193")]
		[Address(RVA = "0xACFC54", Offset = "0xACFC54", VA = "0xACFC54")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000194")]
		[Address(RVA = "0xACFEF0", Offset = "0xACFEF0", VA = "0xACFEF0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000019")]
	public static event SwipeHandler On_Swipe
	{
		[Token(Token = "0x6000195")]
		[Address(RVA = "0xAC90B0", Offset = "0xAC90B0", VA = "0xAC90B0")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000196")]
		[Address(RVA = "0xAC92FC", Offset = "0xAC92FC", VA = "0xAC92FC")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400001A")]
	public static event SwipeEndHandler On_SwipeEnd
	{
		[Token(Token = "0x6000197")]
		[Address(RVA = "0xACFD10", Offset = "0xACFD10", VA = "0xACFD10")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000198")]
		[Address(RVA = "0xACFFAC", Offset = "0xACFFAC", VA = "0xACFFAC")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400001B")]
	public static event TouchStart2FingersHandler On_TouchStart2Fingers
	{
		[Token(Token = "0x6000199")]
		[Address(RVA = "0xACA1A8", Offset = "0xACA1A8", VA = "0xACA1A8")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600019A")]
		[Address(RVA = "0xACAA3C", Offset = "0xACAA3C", VA = "0xACAA3C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400001C")]
	public static event TouchDown2FingersHandler On_TouchDown2Fingers
	{
		[Token(Token = "0x600019B")]
		[Address(RVA = "0xACA264", Offset = "0xACA264", VA = "0xACA264")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600019C")]
		[Address(RVA = "0xACAAF8", Offset = "0xACAAF8", VA = "0xACAAF8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400001D")]
	public static event TouchUp2FingersHandler On_TouchUp2Fingers
	{
		[Token(Token = "0x600019D")]
		[Address(RVA = "0xAD5AB4", Offset = "0xAD5AB4", VA = "0xAD5AB4")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600019E")]
		[Address(RVA = "0xAD5CE4", Offset = "0xAD5CE4", VA = "0xAD5CE4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400001E")]
	public static event SimpleTap2FingersHandler On_SimpleTap2Fingers
	{
		[Token(Token = "0x600019F")]
		[Address(RVA = "0xAD5604", Offset = "0xAD5604", VA = "0xAD5604")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001A0")]
		[Address(RVA = "0xAD5744", Offset = "0xAD5744", VA = "0xAD5744")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400001F")]
	public static event DoubleTap2FingersHandler On_DoubleTap2Fingers
	{
		[Token(Token = "0x60001A1")]
		[Address(RVA = "0xAD2990", Offset = "0xAD2990", VA = "0xAD2990")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001A2")]
		[Address(RVA = "0xAD2AD0", Offset = "0xAD2AD0", VA = "0xAD2AD0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000020")]
	public static event LongTapStart2FingersHandler On_LongTapStart2Fingers
	{
		[Token(Token = "0x60001A3")]
		[Address(RVA = "0xAD3B98", Offset = "0xAD3B98", VA = "0xAD3B98")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001A4")]
		[Address(RVA = "0xAD3F40", Offset = "0xAD3F40", VA = "0xAD3F40")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000021")]
	public static event LongTap2FingersHandler On_LongTap2Fingers
	{
		[Token(Token = "0x60001A5")]
		[Address(RVA = "0xAD3C54", Offset = "0xAD3C54", VA = "0xAD3C54")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001A6")]
		[Address(RVA = "0xAD3FFC", Offset = "0xAD3FFC", VA = "0xAD3FFC")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000022")]
	public static event LongTapEnd2FingersHandler On_LongTapEnd2Fingers
	{
		[Token(Token = "0x60001A7")]
		[Address(RVA = "0xAD3D10", Offset = "0xAD3D10", VA = "0xAD3D10")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001A8")]
		[Address(RVA = "0xAD40B8", Offset = "0xAD40B8", VA = "0xAD40B8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000023")]
	public static event TwistHandler On_Twist
	{
		[Token(Token = "0x60001A9")]
		[Address(RVA = "0xACA498", Offset = "0xACA498", VA = "0xACA498")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001AA")]
		[Address(RVA = "0xACAD2C", Offset = "0xACAD2C", VA = "0xACAD2C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000024")]
	public static event TwistEndHandler On_TwistEnd
	{
		[Token(Token = "0x60001AB")]
		[Address(RVA = "0xAD21AC", Offset = "0xAD21AC", VA = "0xAD21AC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001AC")]
		[Address(RVA = "0xAD23DC", Offset = "0xAD23DC", VA = "0xAD23DC")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000025")]
	public static event PinchInHandler On_PinchIn
	{
		[Token(Token = "0x60001AD")]
		[Address(RVA = "0xACA320", Offset = "0xACA320", VA = "0xACA320")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001AE")]
		[Address(RVA = "0xACABB4", Offset = "0xACABB4", VA = "0xACABB4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000026")]
	public static event PinchOutHandler On_PinchOut
	{
		[Token(Token = "0x60001AF")]
		[Address(RVA = "0xACA3DC", Offset = "0xACA3DC", VA = "0xACA3DC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001B0")]
		[Address(RVA = "0xACAC70", Offset = "0xACAC70", VA = "0xACAC70")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000027")]
	public static event PinchEndHandler On_PinchEnd
	{
		[Token(Token = "0x60001B1")]
		[Address(RVA = "0xAD17BC", Offset = "0xAD17BC", VA = "0xAD17BC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001B2")]
		[Address(RVA = "0xAD1A3C", Offset = "0xAD1A3C", VA = "0xAD1A3C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000028")]
	public static event DragStart2FingersHandler On_DragStart2Fingers
	{
		[Token(Token = "0x60001B3")]
		[Address(RVA = "0xAD2E40", Offset = "0xAD2E40", VA = "0xAD2E40")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001B4")]
		[Address(RVA = "0xAD31E8", Offset = "0xAD31E8", VA = "0xAD31E8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000029")]
	public static event Drag2FingersHandler On_Drag2Fingers
	{
		[Token(Token = "0x60001B5")]
		[Address(RVA = "0xAD2EFC", Offset = "0xAD2EFC", VA = "0xAD2EFC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001B6")]
		[Address(RVA = "0xAD32A4", Offset = "0xAD32A4", VA = "0xAD32A4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400002A")]
	public static event DragEnd2FingersHandler On_DragEnd2Fingers
	{
		[Token(Token = "0x60001B7")]
		[Address(RVA = "0xAD2FB8", Offset = "0xAD2FB8", VA = "0xAD2FB8")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001B8")]
		[Address(RVA = "0xAD3360", Offset = "0xAD3360", VA = "0xAD3360")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400002B")]
	public static event SwipeStart2FingersHandler On_SwipeStart2Fingers
	{
		[Token(Token = "0x60001B9")]
		[Address(RVA = "0xAD4798", Offset = "0xAD4798", VA = "0xAD4798")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001BA")]
		[Address(RVA = "0xAD4B40", Offset = "0xAD4B40", VA = "0xAD4B40")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400002C")]
	public static event Swipe2FingersHandler On_Swipe2Fingers
	{
		[Token(Token = "0x60001BB")]
		[Address(RVA = "0xAD4854", Offset = "0xAD4854", VA = "0xAD4854")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001BC")]
		[Address(RVA = "0xAD4BFC", Offset = "0xAD4BFC", VA = "0xAD4BFC")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400002D")]
	public static event SwipeEnd2FingersHandler On_SwipeEnd2Fingers
	{
		[Token(Token = "0x60001BD")]
		[Address(RVA = "0xAD4910", Offset = "0xAD4910", VA = "0xAD4910")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001BE")]
		[Address(RVA = "0xAD4CB8", Offset = "0xAD4CB8", VA = "0xAD4CB8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400002E")]
	public static event EasyTouchIsReadyHandler On_EasyTouchIsReady
	{
		[Token(Token = "0x60001BF")]
		[Address(RVA = "0xADC2BC", Offset = "0xADC2BC", VA = "0xADC2BC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001C0")]
		[Address(RVA = "0xADC378", Offset = "0xADC378", VA = "0xADC378")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60001C1")]
	[Address(RVA = "0xADC434", Offset = "0xADC434", VA = "0xADC434")]
	public EasyTouch()
	{
	}

	[Token(Token = "0x60001C2")]
	[Address(RVA = "0xADC688", Offset = "0xADC688", VA = "0xADC688")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60001C3")]
	[Address(RVA = "0xADC7AC", Offset = "0xADC7AC", VA = "0xADC7AC")]
	private void Start()
	{
	}

	[Token(Token = "0x60001C4")]
	[Address(RVA = "0xADC6BC", Offset = "0xADC6BC", VA = "0xADC6BC")]
	private void InitEasyTouch()
	{
	}

	[Token(Token = "0x60001C5")]
	[Address(RVA = "0xADCA74", Offset = "0xADCA74", VA = "0xADCA74")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0xADCA78", Offset = "0xADCA78", VA = "0xADCA78")]
	private void Update()
	{
	}

	[Token(Token = "0x60001C7")]
	[Address(RVA = "0xADCF50", Offset = "0xADCF50", VA = "0xADCF50")]
	private void UpdateTouches(bool realTouch, int touchCount)
	{
	}

	[Token(Token = "0x60001C8")]
	[Address(RVA = "0xADEE2C", Offset = "0xADEE2C", VA = "0xADEE2C")]
	private void ResetTouches()
	{
	}

	[Token(Token = "0x60001C9")]
	[Address(RVA = "0xADE420", Offset = "0xADE420", VA = "0xADE420")]
	private void OneFinger(int fingerIndex)
	{
	}

	[Token(Token = "0x60001CA")]
	[Address(RVA = "0xADF2D4", Offset = "0xADF2D4", VA = "0xADF2D4")]
	private void CreateGesture(int touchIndex, EventName message, Finger finger, float actionTime, SwipeType swipe, float swipeLength, Vector2 swipeVector)
	{
	}

	[Token(Token = "0x60001CB")]
	[Address(RVA = "0xADFB78", Offset = "0xADFB78", VA = "0xADFB78")]
	private void SendGesture(EventName message, Gesture gesture)
	{
	}

	[Token(Token = "0x60001CC")]
	[Address(RVA = "0xADD390", Offset = "0xADD390", VA = "0xADD390")]
	private void TwoFinger()
	{
	}

	[Token(Token = "0x60001CD")]
	[Address(RVA = "0xAE0064", Offset = "0xAE0064", VA = "0xAE0064")]
	private int GetTwoFinger(int index)
	{
		return default(int);
	}

	[Token(Token = "0x60001CE")]
	[Address(RVA = "0xAE00D8", Offset = "0xAE00D8", VA = "0xAE00D8")]
	private void CreateStateEnd2Fingers(GestureType gesture, Vector2 startPosition, Vector2 position, Vector2 deltaPosition, float time, bool realEnd, float fingerDistance)
	{
	}

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0xADCC58", Offset = "0xADCC58", VA = "0xADCC58")]
	private void CreateGesture2Finger(EventName message, Vector2 startPosition, Vector2 position, Vector2 deltaPosition, float actionTime, SwipeType swipe, float swipeLength, Vector2 swipeVector, float twist, float pinch, float twoDistance)
	{
	}

	[Token(Token = "0x60001D0")]
	[Address(RVA = "0xAE0534", Offset = "0xAE0534", VA = "0xAE0534")]
	private void SendGesture2Finger(EventName message, Gesture gesture)
	{
	}

	[Token(Token = "0x60001D1")]
	[Address(RVA = "0xADC988", Offset = "0xADC988", VA = "0xADC988")]
	private void RaiseReadyEvent()
	{
	}

	[Token(Token = "0x60001D2")]
	[Address(RVA = "0xADFD2C", Offset = "0xADFD2C", VA = "0xADFD2C")]
	private void RaiseEvent(EventName evnt, Gesture gesture)
	{
	}

	[Token(Token = "0x60001D3")]
	[Address(RVA = "0xADEE88", Offset = "0xADEE88", VA = "0xADEE88")]
	private bool GetPickeGameObject(ref Finger finger, bool twoFinger = false)
	{
		return default(bool);
	}

	[Token(Token = "0x60001D4")]
	[Address(RVA = "0xADF4B8", Offset = "0xADF4B8", VA = "0xADF4B8")]
	private SwipeType GetSwipe(Vector2 start, Vector2 end)
	{
		return default(SwipeType);
	}

	[Token(Token = "0x60001D5")]
	[Address(RVA = "0xADF480", Offset = "0xADF480", VA = "0xADF480")]
	private bool FingerInTolerance(Finger finger)
	{
		return default(bool);
	}

	[Token(Token = "0x60001D6")]
	[Address(RVA = "0xAE06E4", Offset = "0xAE06E4", VA = "0xAE06E4")]
	private float DeltaAngle(Vector2 start, Vector2 end)
	{
		return default(float);
	}

	[Token(Token = "0x60001D7")]
	[Address(RVA = "0xAE04A4", Offset = "0xAE04A4", VA = "0xAE04A4")]
	private float TwistAngle()
	{
		return default(float);
	}

	[Token(Token = "0x60001D8")]
	[Address(RVA = "0xADF66C", Offset = "0xADF66C", VA = "0xADF66C")]
	private bool IsTouchHoverNGui(int touchIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x60001D9")]
	[Address(RVA = "0xADF7B0", Offset = "0xADF7B0", VA = "0xADF7B0")]
	private bool IsTouchReservedArea(int touchIndex)
	{
		return default(bool);
	}

	[Token(Token = "0x60001DA")]
	[Address(RVA = "0xAE0700", Offset = "0xAE0700", VA = "0xAE0700")]
	private Finger GetFinger(int finderId)
	{
		return null;
	}

	[Token(Token = "0x60001DB")]
	[Address(RVA = "0xAE0760", Offset = "0xAE0760", VA = "0xAE0760")]
	public static void SetEnabled(bool enable)
	{
	}

	[Token(Token = "0x60001DC")]
	[Address(RVA = "0xAE07CC", Offset = "0xAE07CC", VA = "0xAE07CC")]
	public static bool GetEnabled()
	{
		return default(bool);
	}

	[Token(Token = "0x60001DD")]
	[Address(RVA = "0xAD73A4", Offset = "0xAD73A4", VA = "0xAD73A4")]
	public static int GetTouchCount()
	{
		return default(int);
	}

	[Token(Token = "0x60001DE")]
	[Address(RVA = "0xAE0820", Offset = "0xAE0820", VA = "0xAE0820")]
	public static void SetCamera(Camera cam, bool guiCam = false)
	{
	}

	[Token(Token = "0x60001DF")]
	[Address(RVA = "0xAE0934", Offset = "0xAE0934", VA = "0xAE0934")]
	public static Camera GetCamera(int index = 0)
	{
		return null;
	}

	[Token(Token = "0x60001E0")]
	[Address(RVA = "0xAE09D8", Offset = "0xAE09D8", VA = "0xAE09D8")]
	public static void SetEnable2FingersGesture(bool enable)
	{
	}

	[Token(Token = "0x60001E1")]
	[Address(RVA = "0xAE0A34", Offset = "0xAE0A34", VA = "0xAE0A34")]
	public static bool GetEnable2FingersGesture()
	{
		return default(bool);
	}

	[Token(Token = "0x60001E2")]
	[Address(RVA = "0xAC9CBC", Offset = "0xAC9CBC", VA = "0xAC9CBC")]
	public static void SetEnableTwist(bool enable)
	{
	}

	[Token(Token = "0x60001E3")]
	[Address(RVA = "0xAE0A88", Offset = "0xAE0A88", VA = "0xAE0A88")]
	public static bool GetEnableTwist()
	{
		return default(bool);
	}

	[Token(Token = "0x60001E4")]
	[Address(RVA = "0xAC9D18", Offset = "0xAC9D18", VA = "0xAC9D18")]
	public static void SetEnablePinch(bool enable)
	{
	}

	[Token(Token = "0x60001E5")]
	[Address(RVA = "0xAE0ADC", Offset = "0xAE0ADC", VA = "0xAE0ADC")]
	public static bool GetEnablePinch()
	{
		return default(bool);
	}

	[Token(Token = "0x60001E6")]
	[Address(RVA = "0xAE0B30", Offset = "0xAE0B30", VA = "0xAE0B30")]
	public static void SetEnableAutoSelect(bool enable)
	{
	}

	[Token(Token = "0x60001E7")]
	[Address(RVA = "0xAE0B8C", Offset = "0xAE0B8C", VA = "0xAE0B8C")]
	public static bool GetEnableAutoSelect()
	{
		return default(bool);
	}

	[Token(Token = "0x60001E8")]
	[Address(RVA = "0xAE0BE0", Offset = "0xAE0BE0", VA = "0xAE0BE0")]
	public static void SetOtherReceiverObject(GameObject receiver)
	{
	}

	[Token(Token = "0x60001E9")]
	[Address(RVA = "0xAE0C3C", Offset = "0xAE0C3C", VA = "0xAE0C3C")]
	public static GameObject GetOtherReceiverObject()
	{
		return null;
	}

	[Token(Token = "0x60001EA")]
	[Address(RVA = "0xAE0C90", Offset = "0xAE0C90", VA = "0xAE0C90")]
	public static void SetStationnaryTolerance(float tolerance)
	{
	}

	[Token(Token = "0x60001EB")]
	[Address(RVA = "0xAE0CF0", Offset = "0xAE0CF0", VA = "0xAE0CF0")]
	public static float GetStationnaryTolerance()
	{
		return default(float);
	}

	[Token(Token = "0x60001EC")]
	[Address(RVA = "0xAE0D44", Offset = "0xAE0D44", VA = "0xAE0D44")]
	public static void SetlongTapTime(float time)
	{
	}

	[Token(Token = "0x60001ED")]
	[Address(RVA = "0xAE0DA4", Offset = "0xAE0DA4", VA = "0xAE0DA4")]
	public static float GetlongTapTime()
	{
		return default(float);
	}

	[Token(Token = "0x60001EE")]
	[Address(RVA = "0xAE0DF8", Offset = "0xAE0DF8", VA = "0xAE0DF8")]
	public static void SetSwipeTolerance(float tolerance)
	{
	}

	[Token(Token = "0x60001EF")]
	[Address(RVA = "0xAE0E58", Offset = "0xAE0E58", VA = "0xAE0E58")]
	public static float GetSwipeTolerance()
	{
		return default(float);
	}

	[Token(Token = "0x60001F0")]
	[Address(RVA = "0xAE0EAC", Offset = "0xAE0EAC", VA = "0xAE0EAC")]
	public static void SetMinPinchLength(float length)
	{
	}

	[Token(Token = "0x60001F1")]
	[Address(RVA = "0xAE0F0C", Offset = "0xAE0F0C", VA = "0xAE0F0C")]
	public static float GetMinPinchLength()
	{
		return default(float);
	}

	[Token(Token = "0x60001F2")]
	[Address(RVA = "0xAE0F60", Offset = "0xAE0F60", VA = "0xAE0F60")]
	public static void SetMinTwistAngle(float angle)
	{
	}

	[Token(Token = "0x60001F3")]
	[Address(RVA = "0xAE0FC0", Offset = "0xAE0FC0", VA = "0xAE0FC0")]
	public static float GetMinTwistAngle()
	{
		return default(float);
	}

	[Token(Token = "0x60001F4")]
	[Address(RVA = "0xAE1014", Offset = "0xAE1014", VA = "0xAE1014")]
	public static GameObject GetCurrentPickedObject(int fingerIndex)
	{
		return null;
	}

	[Token(Token = "0x60001F5")]
	[Address(RVA = "0xAE10B4", Offset = "0xAE10B4", VA = "0xAE10B4")]
	public static bool IsRectUnderTouch(Rect rect, bool guiRect = false)
	{
		return default(bool);
	}

	[Token(Token = "0x60001F6")]
	[Address(RVA = "0xAE1230", Offset = "0xAE1230", VA = "0xAE1230")]
	public static Vector2 GetFingerPosition(int fingerIndex)
	{
		return default(Vector2);
	}

	[Token(Token = "0x60001F7")]
	[Address(RVA = "0xAE12FC", Offset = "0xAE12FC", VA = "0xAE12FC")]
	public static bool GetIsReservedArea()
	{
		return default(bool);
	}

	[Token(Token = "0x60001F8")]
	[Address(RVA = "0xAE13A0", Offset = "0xAE13A0", VA = "0xAE13A0")]
	public static void SetIsReservedArea(bool enable)
	{
	}

	[Token(Token = "0x60001F9")]
	[Address(RVA = "0xAE13FC", Offset = "0xAE13FC", VA = "0xAE13FC")]
	public static void AddReservedArea(Rect rec)
	{
	}

	[Token(Token = "0x60001FA")]
	[Address(RVA = "0xACB7E0", Offset = "0xACB7E0", VA = "0xACB7E0")]
	public static void AddReservedGuiArea(Rect rec)
	{
	}

	[Token(Token = "0x60001FB")]
	[Address(RVA = "0xAE1538", Offset = "0xAE1538", VA = "0xAE1538")]
	public static void RemoveReservedArea(Rect rec)
	{
	}

	[Token(Token = "0x60001FC")]
	[Address(RVA = "0xAE162C", Offset = "0xAE162C", VA = "0xAE162C")]
	public static void RemoveReservedGuiArea(Rect rec)
	{
	}

	[Token(Token = "0x60001FD")]
	[Address(RVA = "0xAE1720", Offset = "0xAE1720", VA = "0xAE1720")]
	public static void ResetTouch(int fingerIndex)
	{
	}

	[Token(Token = "0x60001FE")]
	[Address(RVA = "0xAE17D0", Offset = "0xAE17D0", VA = "0xAE17D0")]
	public static void SetPickableLayer(LayerMask mask)
	{
	}

	[Token(Token = "0x60001FF")]
	[Address(RVA = "0xAE1870", Offset = "0xAE1870", VA = "0xAE1870")]
	public static LayerMask GetPickableLayer()
	{
		return default(LayerMask);
	}
}
[Token(Token = "0x2000067")]
public class EasyTouchInput
{
	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private Vector2[] oldMousePosition;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int[] tapCount;

	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float[] startActionTime;

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float[] deltaTime;

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float[] tapeTime;

	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool bComplex;

	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector2 deltaFingerPosition;

	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector2 oldFinger2Position;

	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector2 complexCenter;

	[Token(Token = "0x6000293")]
	[Address(RVA = "0xAE4EB4", Offset = "0xAE4EB4", VA = "0xAE4EB4")]
	public int TouchCount()
	{
		return default(int);
	}

	[Token(Token = "0x6000294")]
	[Address(RVA = "0xAE4EE4", Offset = "0xAE4EE4", VA = "0xAE4EE4")]
	private int getTouchCount(bool realTouch)
	{
		return default(int);
	}

	[Token(Token = "0x6000295")]
	[Address(RVA = "0xAE504C", Offset = "0xAE504C", VA = "0xAE504C")]
	public Finger GetMouseTouch(int fingerIndex, Finger myFinger)
	{
		return null;
	}

	[Token(Token = "0x6000296")]
	[Address(RVA = "0xAE55B8", Offset = "0xAE55B8", VA = "0xAE55B8")]
	public Vector2 GetSecondFingerPosition()
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000297")]
	[Address(RVA = "0xAE5598", Offset = "0xAE5598", VA = "0xAE5598")]
	private Vector2 GetPointerPosition(int index)
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000298")]
	[Address(RVA = "0xAE578C", Offset = "0xAE578C", VA = "0xAE578C")]
	private Vector2 GetPinchTwist2Finger()
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000299")]
	[Address(RVA = "0xAE5714", Offset = "0xAE5714", VA = "0xAE5714")]
	private Vector2 GetComplex2finger()
	{
		return default(Vector2);
	}

	[Token(Token = "0x600029A")]
	[Address(RVA = "0xAE58B0", Offset = "0xAE58B0", VA = "0xAE58B0")]
	public EasyTouchInput()
	{
	}
}
[Serializable]
[Token(Token = "0x2000068")]
public class ECamera
{
	[Token(Token = "0x4000189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Camera camera;

	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool guiCamera;

	[Token(Token = "0x600029B")]
	[Address(RVA = "0xAE59B4", Offset = "0xAE59B4", VA = "0xAE59B4")]
	public ECamera(Camera cam, bool gui)
	{
	}
}
[Token(Token = "0x2000069")]
public class Finger
{
	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int fingerIndex;

	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int touchCount;

	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector2 startPosition;

	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector2 complexStartPosition;

	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector2 position;

	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector2 deltaPosition;

	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector2 oldPosition;

	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int tapCount;

	[Token(Token = "0x4000193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float deltaTime;

	[Token(Token = "0x4000194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TouchPhase phase;

	[Token(Token = "0x4000195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public EasyTouch.GestureType gesture;

	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject pickedObject;

	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Camera pickedCamera;

	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool isGuiCamera;

	[Token(Token = "0x600029C")]
	[Address(RVA = "0xAE5590", Offset = "0xAE5590", VA = "0xAE5590")]
	public Finger()
	{
	}
}
[Token(Token = "0x200006A")]
public class Gesture
{
	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int fingerIndex;

	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int touchCount;

	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector2 startPosition;

	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector2 position;

	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector2 deltaPosition;

	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float actionTime;

	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float deltaTime;

	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public EasyTouch.SwipeType swipe;

	[Token(Token = "0x40001A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float swipeLength;

	[Token(Token = "0x40001A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector2 swipeVector;

	[Token(Token = "0x40001A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float deltaPinch;

	[Token(Token = "0x40001A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float twistAngle;

	[Token(Token = "0x40001A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float twoFingerDistance;

	[Token(Token = "0x40001A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject pickObject;

	[Token(Token = "0x40001A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Camera pickCamera;

	[Token(Token = "0x40001A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool isGuiCamera;

	[Token(Token = "0x40001A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject otherReceiver;

	[Token(Token = "0x40001AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public bool isHoverReservedArea;

	[Token(Token = "0x600029D")]
	[Address(RVA = "0xAE59F0", Offset = "0xAE59F0", VA = "0xAE59F0")]
	public Vector3 GetTouchToWordlPoint(float z, bool worldZ = false)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600029E")]
	[Address(RVA = "0xAE5A7C", Offset = "0xAE5A7C", VA = "0xAE5A7C")]
	public float GetSwipeOrDragAngle()
	{
		return default(float);
	}

	[Token(Token = "0x600029F")]
	[Address(RVA = "0xAE5BD0", Offset = "0xAE5BD0", VA = "0xAE5BD0")]
	public bool IsInRect(Rect rect, bool guiRect = false)
	{
		return default(bool);
	}

	[Token(Token = "0x60002A0")]
	[Address(RVA = "0xAE5C9C", Offset = "0xAE5C9C", VA = "0xAE5C9C")]
	public Vector2 NormalizedPosition()
	{
		return default(Vector2);
	}

	[Token(Token = "0x60002A1")]
	[Address(RVA = "0xAE5D00", Offset = "0xAE5D00", VA = "0xAE5D00")]
	public Gesture()
	{
	}
}
[Token(Token = "0x200006B")]
public class MovingJoystick
{
	[Token(Token = "0x40001AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string joystickName;

	[Token(Token = "0x40001AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector2 joystickAxis;

	[Token(Token = "0x40001AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector2 joystickValue;

	[Token(Token = "0x40001AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int fingerIndex;

	[Token(Token = "0x40001AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public EasyJoystick joystick;

	[Token(Token = "0x60002A2")]
	[Address(RVA = "0xAE5D08", Offset = "0xAE5D08", VA = "0xAE5D08")]
	public float Axis2Angle(bool inDegree = true)
	{
		return default(float);
	}

	[Token(Token = "0x60002A3")]
	[Address(RVA = "0xAE5D34", Offset = "0xAE5D34", VA = "0xAE5D34")]
	public MovingJoystick()
	{
	}
}
[Token(Token = "0x200006C")]
public class C_EasyButtonTemplate : MonoBehaviour
{
	[Token(Token = "0x60002A4")]
	[Address(RVA = "0xAE5D3C", Offset = "0xAE5D3C", VA = "0xAE5D3C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002A5")]
	[Address(RVA = "0xAE5E64", Offset = "0xAE5E64", VA = "0xAE5E64")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60002A6")]
	[Address(RVA = "0xAE5F8C", Offset = "0xAE5F8C", VA = "0xAE5F8C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60002A7")]
	[Address(RVA = "0xAE60B4", Offset = "0xAE60B4", VA = "0xAE60B4")]
	private void On_ButtonDown(string buttonName)
	{
	}

	[Token(Token = "0x60002A8")]
	[Address(RVA = "0xAE60B8", Offset = "0xAE60B8", VA = "0xAE60B8")]
	private void On_ButtonPress(string buttonName)
	{
	}

	[Token(Token = "0x60002A9")]
	[Address(RVA = "0xAE60BC", Offset = "0xAE60BC", VA = "0xAE60BC")]
	private void On_ButtonUp(string buttonName)
	{
	}

	[Token(Token = "0x60002AA")]
	[Address(RVA = "0xAE60C0", Offset = "0xAE60C0", VA = "0xAE60C0")]
	public C_EasyButtonTemplate()
	{
	}
}
[Token(Token = "0x200006D")]
public class C_EasyJoystickTemplate : MonoBehaviour
{
	[Token(Token = "0x60002AB")]
	[Address(RVA = "0xAE60C8", Offset = "0xAE60C8", VA = "0xAE60C8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002AC")]
	[Address(RVA = "0xAE6340", Offset = "0xAE6340", VA = "0xAE6340")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60002AD")]
	[Address(RVA = "0xAE65B8", Offset = "0xAE65B8", VA = "0xAE65B8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60002AE")]
	[Address(RVA = "0xAE6830", Offset = "0xAE6830", VA = "0xAE6830")]
	private void On_JoystickDoubleTap(MovingJoystick move)
	{
	}

	[Token(Token = "0x60002AF")]
	[Address(RVA = "0xAE6834", Offset = "0xAE6834", VA = "0xAE6834")]
	private void On_JoystickTap(MovingJoystick move)
	{
	}

	[Token(Token = "0x60002B0")]
	[Address(RVA = "0xAE6838", Offset = "0xAE6838", VA = "0xAE6838")]
	private void On_JoystickTouchUp(MovingJoystick move)
	{
	}

	[Token(Token = "0x60002B1")]
	[Address(RVA = "0xAE683C", Offset = "0xAE683C", VA = "0xAE683C")]
	private void On_JoystickMoveEnd(MovingJoystick move)
	{
	}

	[Token(Token = "0x60002B2")]
	[Address(RVA = "0xAE6840", Offset = "0xAE6840", VA = "0xAE6840")]
	private void On_JoystickMove(MovingJoystick move)
	{
	}

	[Token(Token = "0x60002B3")]
	[Address(RVA = "0xAE6844", Offset = "0xAE6844", VA = "0xAE6844")]
	private void On_JoystickMoveStart(MovingJoystick move)
	{
	}

	[Token(Token = "0x60002B4")]
	[Address(RVA = "0xAE6848", Offset = "0xAE6848", VA = "0xAE6848")]
	private void On_JoystickTouchStart(MovingJoystick move)
	{
	}

	[Token(Token = "0x60002B5")]
	[Address(RVA = "0xAE684C", Offset = "0xAE684C", VA = "0xAE684C")]
	public C_EasyJoystickTemplate()
	{
	}
}
[Token(Token = "0x200006E")]
public class C_EasyTouchTemplate : MonoBehaviour
{
	[Token(Token = "0x60002B6")]
	[Address(RVA = "0xAE6854", Offset = "0xAE6854", VA = "0xAE6854")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60002B7")]
	[Address(RVA = "0xAE7320", Offset = "0xAE7320", VA = "0xAE7320")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60002B8")]
	[Address(RVA = "0xAE7DEC", Offset = "0xAE7DEC", VA = "0xAE7DEC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60002B9")]
	[Address(RVA = "0xAE88B8", Offset = "0xAE88B8", VA = "0xAE88B8")]
	private void On_Cancel(Gesture gesture)
	{
	}

	[Token(Token = "0x60002BA")]
	[Address(RVA = "0xAE88BC", Offset = "0xAE88BC", VA = "0xAE88BC")]
	private void On_TouchStart(Gesture gesture)
	{
	}

	[Token(Token = "0x60002BB")]
	[Address(RVA = "0xAE88C0", Offset = "0xAE88C0", VA = "0xAE88C0")]
	private void On_TouchDown(Gesture gesture)
	{
	}

	[Token(Token = "0x60002BC")]
	[Address(RVA = "0xAE88C4", Offset = "0xAE88C4", VA = "0xAE88C4")]
	private void On_TouchUp(Gesture gesture)
	{
	}

	[Token(Token = "0x60002BD")]
	[Address(RVA = "0xAE88C8", Offset = "0xAE88C8", VA = "0xAE88C8")]
	private void On_SimpleTap(Gesture gesture)
	{
	}

	[Token(Token = "0x60002BE")]
	[Address(RVA = "0xAE88CC", Offset = "0xAE88CC", VA = "0xAE88CC")]
	private void On_DoubleTap(Gesture gesture)
	{
	}

	[Token(Token = "0x60002BF")]
	[Address(RVA = "0xAE88D0", Offset = "0xAE88D0", VA = "0xAE88D0")]
	private void On_LongTapStart(Gesture gesture)
	{
	}

	[Token(Token = "0x60002C0")]
	[Address(RVA = "0xAE88D4", Offset = "0xAE88D4", VA = "0xAE88D4")]
	private void On_LongTap(Gesture gesture)
	{
	}

	[Token(Token = "0x60002C1")]
	[Address(RVA = "0xAE88D8", Offset = "0xAE88D8", VA = "0xAE88D8")]
	private void On_LongTapEnd(Gesture gesture)
	{
	}

	[Token(Token = "0x60002C2")]
	[Address(RVA = "0xAE88DC", Offset = "0xAE88DC", VA = "0xAE88DC")]
	private void On_DragStart(Gesture gesture)
	{
	}

	[Token(Token = "0x60002C3")]
	[Address(RVA = "0xAE88E0", Offset = "0xAE88E0", VA = "0xAE88E0")]
	private void On_Drag(Gesture gesture)
	{
	}

	[Token(Token = "0x60002C4")]
	[Address(RVA = "0xAE88E4", Offset = "0xAE88E4", VA = "0xAE88E4")]
	private void On_DragEnd(Gesture gesture)
	{
	}

	[Token(Token = "0x60002C5")]
	[Address(RVA = "0xAE88E8", Offset = "0xAE88E8", VA = "0xAE88E8")]
	private void On_SwipeStart(Gesture gesture)
	{
	}

	[Token(Token = "0x60002C6")]
	[Address(RVA = "0xAE88EC", Offset = "0xAE88EC", VA = "0xAE88EC")]
	private void On_Swipe(Gesture gesture)
	{
	}

	[Token(Token = "0x60002C7")]
	[Address(RVA = "0xAE88F0", Offset = "0xAE88F0", VA = "0xAE88F0")]
	private void On_SwipeEnd(Gesture gesture)
	{
	}

	[Token(Token = "0x60002C8")]
	[Address(RVA = "0xAE88F4", Offset = "0xAE88F4", VA = "0xAE88F4")]
	private void On_TouchStart2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x60002C9")]
	[Address(RVA = "0xAE88F8", Offset = "0xAE88F8", VA = "0xAE88F8")]
	private void On_TouchDown2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x60002CA")]
	[Address(RVA = "0xAE88FC", Offset = "0xAE88FC", VA = "0xAE88FC")]
	private void On_TouchUp2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x60002CB")]
	[Address(RVA = "0xAE8900", Offset = "0xAE8900", VA = "0xAE8900")]
	private void On_SimpleTap2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x60002CC")]
	[Address(RVA = "0xAE8904", Offset = "0xAE8904", VA = "0xAE8904")]
	private void On_DoubleTap2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x60002CD")]
	[Address(RVA = "0xAE8908", Offset = "0xAE8908", VA = "0xAE8908")]
	private void On_LongTapStart2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x60002CE")]
	[Address(RVA = "0xAE890C", Offset = "0xAE890C", VA = "0xAE890C")]
	private void On_LongTap2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x60002CF")]
	[Address(RVA = "0xAE8910", Offset = "0xAE8910", VA = "0xAE8910")]
	private void On_LongTapEnd2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x60002D0")]
	[Address(RVA = "0xAE8914", Offset = "0xAE8914", VA = "0xAE8914")]
	private void On_Twist(Gesture gesture)
	{
	}

	[Token(Token = "0x60002D1")]
	[Address(RVA = "0xAE8918", Offset = "0xAE8918", VA = "0xAE8918")]
	private void On_TwistEnd(Gesture gesture)
	{
	}

	[Token(Token = "0x60002D2")]
	[Address(RVA = "0xAE891C", Offset = "0xAE891C", VA = "0xAE891C")]
	private void On_PinchIn(Gesture gesture)
	{
	}

	[Token(Token = "0x60002D3")]
	[Address(RVA = "0xAE8920", Offset = "0xAE8920", VA = "0xAE8920")]
	private void On_PinchOut(Gesture gesture)
	{
	}

	[Token(Token = "0x60002D4")]
	[Address(RVA = "0xAE8924", Offset = "0xAE8924", VA = "0xAE8924")]
	private void On_PinchEnd(Gesture gesture)
	{
	}

	[Token(Token = "0x60002D5")]
	[Address(RVA = "0xAE8928", Offset = "0xAE8928", VA = "0xAE8928")]
	private void On_DragStart2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x60002D6")]
	[Address(RVA = "0xAE892C", Offset = "0xAE892C", VA = "0xAE892C")]
	private void On_Drag2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x60002D7")]
	[Address(RVA = "0xAE8930", Offset = "0xAE8930", VA = "0xAE8930")]
	private void On_DragEnd2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x60002D8")]
	[Address(RVA = "0xAE8934", Offset = "0xAE8934", VA = "0xAE8934")]
	private void On_SwipeStart2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x60002D9")]
	[Address(RVA = "0xAE8938", Offset = "0xAE8938", VA = "0xAE8938")]
	private void On_Swipe2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x60002DA")]
	[Address(RVA = "0xAE893C", Offset = "0xAE893C", VA = "0xAE893C")]
	private void On_SwipeEnd2Fingers(Gesture gesture)
	{
	}

	[Token(Token = "0x60002DB")]
	[Address(RVA = "0xAE8940", Offset = "0xAE8940", VA = "0xAE8940")]
	public C_EasyTouchTemplate()
	{
	}
}
[Serializable]
[Token(Token = "0x200006F")]
public class J_EasyButtonTemplate : MonoBehaviour
{
	[Token(Token = "0x60002DC")]
	[Address(RVA = "0xAE8948", Offset = "0xAE8948", VA = "0xAE8948")]
	public J_EasyButtonTemplate()
	{
	}
}
[Serializable]
[Token(Token = "0x2000070")]
public class J_EasyJoystickTemplate : MonoBehaviour
{
	[Token(Token = "0x60002DD")]
	[Address(RVA = "0xAE8950", Offset = "0xAE8950", VA = "0xAE8950")]
	public J_EasyJoystickTemplate()
	{
	}
}
[Serializable]
[Token(Token = "0x2000071")]
public class J_EasyTouchTemplate : MonoBehaviour
{
	[Token(Token = "0x60002DE")]
	[Address(RVA = "0xAE8958", Offset = "0xAE8958", VA = "0xAE8958")]
	public J_EasyTouchTemplate()
	{
	}
}
[Token(Token = "0x2000072")]
public class EnergyBar : MonoBehaviour
{
	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int valueCurrent;

	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int valueMin;

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int valueMax;

	[Token(Token = "0x40001B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int valuer;

	[Token(Token = "0x1700001A")]
	public float ValueF
	{
		[Token(Token = "0x60002DF")]
		[Address(RVA = "0xAE8960", Offset = "0xAE8960", VA = "0xAE8960")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60002E0")]
		[Address(RVA = "0xAE8994", Offset = "0xAE8994", VA = "0xAE8994")]
		set
		{
		}
	}

	[Token(Token = "0x60002E1")]
	[Address(RVA = "0xAE8A8C", Offset = "0xAE8A8C", VA = "0xAE8A8C")]
	private void Start()
	{
	}

	[Token(Token = "0x60002E2")]
	[Address(RVA = "0xAE8A90", Offset = "0xAE8A90", VA = "0xAE8A90")]
	protected void Update()
	{
	}

	[Token(Token = "0x60002E3")]
	[Address(RVA = "0xAE8AF4", Offset = "0xAE8AF4", VA = "0xAE8AF4")]
	public void SetValueCurrent(int valueCurrent)
	{
	}

	[Token(Token = "0x60002E4")]
	[Address(RVA = "0xAE8AFC", Offset = "0xAE8AFC", VA = "0xAE8AFC")]
	public void SetValueMin(int valueMin)
	{
	}

	[Token(Token = "0x60002E5")]
	[Address(RVA = "0xAE8B04", Offset = "0xAE8B04", VA = "0xAE8B04")]
	public void SetValueMax(int valueMax)
	{
	}

	[Token(Token = "0x60002E6")]
	[Address(RVA = "0xAE8B0C", Offset = "0xAE8B0C", VA = "0xAE8B0C")]
	public void SetValueF(float valueF)
	{
	}

	[Token(Token = "0x60002E7")]
	[Address(RVA = "0xAE8B10", Offset = "0xAE8B10", VA = "0xAE8B10")]
	public EnergyBar()
	{
	}
}
[Token(Token = "0x2000073")]
public class EnergyBarBase : MonoBehaviour
{
	[Token(Token = "0x2000074")]
	public enum Pivot
	{
		[Token(Token = "0x40001BA")]
		TopLeft,
		[Token(Token = "0x40001BB")]
		Top,
		[Token(Token = "0x40001BC")]
		TopRight,
		[Token(Token = "0x40001BD")]
		Right,
		[Token(Token = "0x40001BE")]
		BottomRight,
		[Token(Token = "0x40001BF")]
		Bottom,
		[Token(Token = "0x40001C0")]
		BottomLeft,
		[Token(Token = "0x40001C1")]
		Left,
		[Token(Token = "0x40001C2")]
		Center
	}

	[Token(Token = "0x2000075")]
	public class Assertion : Exception
	{
		[Token(Token = "0x60002ED")]
		[Address(RVA = "0xAE8FC0", Offset = "0xAE8FC0", VA = "0xAE8FC0")]
		public Assertion()
		{
		}

		[Token(Token = "0x60002EE")]
		[Address(RVA = "0xAE8BFC", Offset = "0xAE8BFC", VA = "0xAE8BFC")]
		public Assertion(string message)
		{
		}
	}

	[Token(Token = "0x40001B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Pivot pivot;

	[Token(Token = "0x40001B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int guiDepth;

	[Token(Token = "0x40001B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public Vector2 positionOffset;

	[Token(Token = "0x40001B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public int storedScreenWidth;

	[Token(Token = "0x40001B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[HideInInspector]
	public int storedScreenHeight;

	[Token(Token = "0x60002E8")]
	[Address(RVA = "0xAE8B28", Offset = "0xAE8B28", VA = "0xAE8B28")]
	protected void OnGUI()
	{
	}

	[Token(Token = "0x60002E9")]
	[Address(RVA = "0xAE8BAC", Offset = "0xAE8BAC", VA = "0xAE8BAC")]
	public void Assert(bool condition, string message)
	{
	}

	[Token(Token = "0x60002EA")]
	[Address(RVA = "0xAE8C64", Offset = "0xAE8C64", VA = "0xAE8C64")]
	protected Vector2 Round(Vector2 v)
	{
		return default(Vector2);
	}

	[Token(Token = "0x60002EB")]
	[Address(RVA = "0xAE8D84", Offset = "0xAE8D84", VA = "0xAE8D84")]
	protected Vector2 RealPosition(Vector2 pos, Vector2 bounds)
	{
		return default(Vector2);
	}

	[Token(Token = "0x60002EC")]
	[Address(RVA = "0xAE8F58", Offset = "0xAE8F58", VA = "0xAE8F58")]
	public EnergyBarBase()
	{
	}
}
[Token(Token = "0x2000076")]
[RequireComponent(typeof(EnergyBar))]
[ExecuteInEditMode]
public class EnergyBarRenderer : EnergyBarBase
{
	[Token(Token = "0x2000077")]
	public enum GrowDirection
	{
		[Token(Token = "0x40001EE")]
		LeftToRight,
		[Token(Token = "0x40001EF")]
		RightToLeft,
		[Token(Token = "0x40001F0")]
		BottomToTop,
		[Token(Token = "0x40001F1")]
		TopToBottom,
		[Token(Token = "0x40001F2")]
		RadialCW,
		[Token(Token = "0x40001F3")]
		RadialCCW
	}

	[Token(Token = "0x2000078")]
	public enum ColorType
	{
		[Token(Token = "0x40001F5")]
		Solid,
		[Token(Token = "0x40001F6")]
		Gradient
	}

	[Token(Token = "0x2000079")]
	public class BadTextureException : Exception
	{
		[Token(Token = "0x6000309")]
		[Address(RVA = "0xAEB0EC", Offset = "0xAEB0EC", VA = "0xAEB0EC")]
		public BadTextureException()
		{
		}

		[Token(Token = "0x600030A")]
		[Address(RVA = "0xAE9630", Offset = "0xAE9630", VA = "0xAE9630")]
		public BadTextureException(string message)
		{
		}
	}

	[Token(Token = "0x40001C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static readonly Color Transparent;

	[Token(Token = "0x40001C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector2 screenPosition;

	[Token(Token = "0x40001C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool screenPositionNormalized;

	[Token(Token = "0x40001C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Vector2 size;

	[Token(Token = "0x40001C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool sizeNormalized;

	[Token(Token = "0x40001C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
	public bool screenPositionCalculateSize;

	[Token(Token = "0x40001C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector2 sizeReal;

	[Token(Token = "0x40001CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector2 screenPositionReal;

	[Token(Token = "0x40001CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Texture2D textureBackground;

	[Token(Token = "0x40001CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Color textureBackgroundColor;

	[Token(Token = "0x40001CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Texture2D textureBar;

	[Token(Token = "0x40001CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Texture2D _textureBar;

	[Token(Token = "0x40001CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public ColorType textureBarColorType;

	[Token(Token = "0x40001D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public Color textureBarColor;

	[Token(Token = "0x40001D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Gradient textureBarGradient;

	[Token(Token = "0x40001D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Texture2D textureForeground;

	[Token(Token = "0x40001D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Color textureForegroundColor;

	[Token(Token = "0x40001D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public GrowDirection growDirection;

	[Token(Token = "0x40001D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private Rect textureBarVisibleBounds;

	[Token(Token = "0x40001D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private Rect textureBarVisibleBoundsOrig;

	[Token(Token = "0x40001D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private float actualDisplayValue;

	[Token(Token = "0x40001D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public bool labelEnabled;

	[Token(Token = "0x40001D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public GUISkin labelSkin;

	[Token(Token = "0x40001DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public Vector2 labelPosition;

	[Token(Token = "0x40001DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public string labelFormat;

	[Token(Token = "0x40001DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public Color labelColor;

	[Token(Token = "0x40001DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public bool labelOutlineEnabled;

	[Token(Token = "0x40001DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
	public Color labelOutlineColor;

	[Token(Token = "0x40001DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	public bool effectSmoothChange;

	[Token(Token = "0x40001E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public float effectSmoothChangeSpeed;

	[Token(Token = "0x40001E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	public bool effectBurn;

	[Token(Token = "0x40001E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public Texture2D effectBurnTextureBar;

	[Token(Token = "0x40001E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public Color effectBurnTextureBarColor;

	[Token(Token = "0x40001E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	private float burnDisplayValue;

	[Token(Token = "0x40001E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
	public bool effectBlink;

	[Token(Token = "0x40001E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public float effectBlinkValue;

	[Token(Token = "0x40001E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
	public float effectBlinkRatePerSecond;

	[Token(Token = "0x40001E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public Color effectBlinkColor;

	[Token(Token = "0x40001E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	private float effectBlinkAccum;

	[Token(Token = "0x40001EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
	private bool effectBlinkVisible;

	[Token(Token = "0x40001EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private EnergyBar energyBar;

	[Token(Token = "0x40001EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private Material radialMaterial;

	[Token(Token = "0x1700001B")]
	private Vector2 ScreenPositionPixels
	{
		[Token(Token = "0x60002EF")]
		[Address(RVA = "0xAE9018", Offset = "0xAE9018", VA = "0xAE9018")]
		get
		{
			return default(Vector2);
		}
	}

	[Token(Token = "0x1700001C")]
	private Vector2 SizePixels
	{
		[Token(Token = "0x60002F0")]
		[Address(RVA = "0xAE906C", Offset = "0xAE906C", VA = "0xAE906C")]
		get
		{
			return default(Vector2);
		}
		[Token(Token = "0x60002F1")]
		[Address(RVA = "0xAE90C4", Offset = "0xAE90C4", VA = "0xAE90C4")]
		set
		{
		}
	}

	[Token(Token = "0x60002F2")]
	[Address(RVA = "0xAE911C", Offset = "0xAE911C", VA = "0xAE911C")]
	private void Start()
	{
	}

	[Token(Token = "0x60002F3")]
	[Address(RVA = "0xAE92BC", Offset = "0xAE92BC", VA = "0xAE92BC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60002F4")]
	[Address(RVA = "0xAE91DC", Offset = "0xAE91DC", VA = "0xAE91DC")]
	private void CreateMaterial()
	{
	}

	[Token(Token = "0x60002F5")]
	[Address(RVA = "0xAE92C0", Offset = "0xAE92C0", VA = "0xAE92C0")]
	private void DestroyMaterial()
	{
	}

	[Token(Token = "0x60002F6")]
	[Address(RVA = "0xAE9380", Offset = "0xAE9380", VA = "0xAE9380")]
	private Rect FindBounds(Texture2D texture)
	{
		return default(Rect);
	}

	[Token(Token = "0x60002F7")]
	[Address(RVA = "0xAE95C4", Offset = "0xAE95C4", VA = "0xAE95C4")]
	private void Expand(int x, int y, ref int left, ref int top, ref int right, ref int bottom)
	{
	}

	[Token(Token = "0x60002F8")]
	[Address(RVA = "0xAE9698", Offset = "0xAE9698", VA = "0xAE9698")]
	private void Update()
	{
	}

	[Token(Token = "0x60002F9")]
	[Address(RVA = "0xAE9BC8", Offset = "0xAE9BC8", VA = "0xAE9BC8")]
	public static bool Blink(float val, float blinkVal, float rate, ref float accum)
	{
		return default(bool);
	}

	[Token(Token = "0x60002FA")]
	[Address(RVA = "0xAE9A08", Offset = "0xAE9A08", VA = "0xAE9A08")]
	private bool IsValid()
	{
		return default(bool);
	}

	[Token(Token = "0x60002FB")]
	[Address(RVA = "0xAE9A68", Offset = "0xAE9A68", VA = "0xAE9A68")]
	private void FixRatio()
	{
	}

	[Token(Token = "0x60002FC")]
	[Address(RVA = "0xAE9B54", Offset = "0xAE9B54", VA = "0xAE9B54")]
	public static void SmoothDisplayValue(ref float displayValue, float target, float speed)
	{
	}

	[Token(Token = "0x60002FD")]
	[Address(RVA = "0xAE9C5C", Offset = "0xAE9C5C", VA = "0xAE9C5C")]
	public new void OnGUI()
	{
	}

	[Token(Token = "0x60002FE")]
	[Address(RVA = "0xAEA3FC", Offset = "0xAEA3FC", VA = "0xAEA3FC")]
	private Color GetTextureBarColor()
	{
		return default(Color);
	}

	[Token(Token = "0x60002FF")]
	[Address(RVA = "0xAE9F4C", Offset = "0xAE9F4C", VA = "0xAE9F4C")]
	private Color GetTextureBurnColor()
	{
		return default(Color);
	}

	[Token(Token = "0x6000300")]
	[Address(RVA = "0xAE9FE4", Offset = "0xAE9FE4", VA = "0xAE9FE4")]
	private void DrawBar(float value, Color color, Texture2D texture)
	{
	}

	[Token(Token = "0x6000301")]
	[Address(RVA = "0xAEA714", Offset = "0xAEA714", VA = "0xAEA714")]
	private Rect BoundsForEnergyBar(float value)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000302")]
	[Address(RVA = "0xAEA8CC", Offset = "0xAEA8CC", VA = "0xAEA8CC")]
	private Rect TexCoordsForEnergyBar(Rect energyBounds)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000303")]
	[Address(RVA = "0xAEAA18", Offset = "0xAEAA18", VA = "0xAEAA18")]
	private Rect toAbsolute(Rect rect)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000304")]
	[Address(RVA = "0xAEA50C", Offset = "0xAEA50C", VA = "0xAEA50C")]
	private void LabelDraw()
	{
	}

	[Token(Token = "0x6000305")]
	[Address(RVA = "0xAEAABC", Offset = "0xAEAABC", VA = "0xAEAABC")]
	private string LabelFormatResolve(string format)
	{
		return null;
	}

	[Token(Token = "0x6000306")]
	[Address(RVA = "0xAEAD64", Offset = "0xAEAD64", VA = "0xAEAD64")]
	private void LabelWithOutline(Rect rect, string text, GUIStyle style, Color color, float size)
	{
	}

	[Token(Token = "0x6000307")]
	[Address(RVA = "0xAEAFB4", Offset = "0xAEAFB4", VA = "0xAEAFB4")]
	public EnergyBarRenderer()
	{
	}
}
[Token(Token = "0x200007A")]
[RequireComponent(typeof(EnergyBar))]
[ExecuteInEditMode]
public class EnergyBarRepeatRenderer : EnergyBarBase
{
	[Token(Token = "0x200007B")]
	public enum Effect
	{
		[Token(Token = "0x4000205")]
		None,
		[Token(Token = "0x4000206")]
		GrowIn,
		[Token(Token = "0x4000207")]
		FadeOut,
		[Token(Token = "0x4000208")]
		Cut
	}

	[Token(Token = "0x200007C")]
	public enum CutDirection
	{
		[Token(Token = "0x400020A")]
		LeftToRight,
		[Token(Token = "0x400020B")]
		TopToBottom,
		[Token(Token = "0x400020C")]
		RightToLeft,
		[Token(Token = "0x400020D")]
		BottomToTop
	}

	[Token(Token = "0x40001F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Texture2D icon;

	[Token(Token = "0x40001F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Texture2D iconSlot;

	[Token(Token = "0x40001F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool iconSizeCalculate;

	[Token(Token = "0x40001FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public Vector2 iconSize;

	[Token(Token = "0x40001FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool iconSizeNormalized;

	[Token(Token = "0x40001FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Vector2 startPosition;

	[Token(Token = "0x40001FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool startPositionNormalized;

	[Token(Token = "0x40001FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public int repeatCount;

	[Token(Token = "0x40001FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Vector2 positionDelta;

	[Token(Token = "0x4000200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool positionDeltaNormalized;

	[Token(Token = "0x4000201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public Effect effect;

	[Token(Token = "0x4000202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public CutDirection cutDirection;

	[Token(Token = "0x4000203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private EnergyBar energyBar;

	[Token(Token = "0x1700001D")]
	private Vector2 IconSizePixels
	{
		[Token(Token = "0x600030B")]
		[Address(RVA = "0xAEB144", Offset = "0xAEB144", VA = "0xAEB144")]
		get
		{
			return default(Vector2);
		}
		[Token(Token = "0x600030C")]
		[Address(RVA = "0xAEB19C", Offset = "0xAEB19C", VA = "0xAEB19C")]
		set
		{
		}
	}

	[Token(Token = "0x1700001E")]
	private Vector2 StartPositionPixels
	{
		[Token(Token = "0x600030D")]
		[Address(RVA = "0xAEB1F4", Offset = "0xAEB1F4", VA = "0xAEB1F4")]
		get
		{
			return default(Vector2);
		}
	}

	[Token(Token = "0x1700001F")]
	private Vector2 PositionDeltaPixels
	{
		[Token(Token = "0x600030E")]
		[Address(RVA = "0xAEB248", Offset = "0xAEB248", VA = "0xAEB248")]
		get
		{
			return default(Vector2);
		}
	}

	[Token(Token = "0x600030F")]
	[Address(RVA = "0xAEB29C", Offset = "0xAEB29C", VA = "0xAEB29C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000310")]
	[Address(RVA = "0xAEB354", Offset = "0xAEB354", VA = "0xAEB354")]
	private void Update()
	{
	}

	[Token(Token = "0x6000311")]
	[Address(RVA = "0xAEB42C", Offset = "0xAEB42C", VA = "0xAEB42C")]
	private void FixValues()
	{
	}

	[Token(Token = "0x6000312")]
	[Address(RVA = "0xAEB44C", Offset = "0xAEB44C", VA = "0xAEB44C")]
	private new void OnGUI()
	{
	}

	[Token(Token = "0x6000313")]
	[Address(RVA = "0xAEB95C", Offset = "0xAEB95C", VA = "0xAEB95C")]
	private Rect CutTexture(Rect r, float v, CutDirection cutDirection, out Rect texCoords)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000314")]
	[Address(RVA = "0xAEB864", Offset = "0xAEB864", VA = "0xAEB864")]
	private bool IsValid()
	{
		return default(bool);
	}

	[Token(Token = "0x6000315")]
	[Address(RVA = "0xAEB8C4", Offset = "0xAEB8C4", VA = "0xAEB8C4")]
	private Rect Resize(Rect rect, float factor)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000316")]
	[Address(RVA = "0xAEBC20", Offset = "0xAEBC20", VA = "0xAEBC20")]
	public EnergyBarRepeatRenderer()
	{
	}
}
[Token(Token = "0x200007D")]
[RequireComponent(typeof(EnergyBar))]
[ExecuteInEditMode]
public class EnergyBarSequenceRenderer : EnergyBarBase
{
	[Token(Token = "0x200007E")]
	public enum Method
	{
		[Token(Token = "0x400021C")]
		Grid,
		[Token(Token = "0x400021D")]
		Sequence
	}

	[Token(Token = "0x400020E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector2 position;

	[Token(Token = "0x400020F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool positionNormalized;

	[Token(Token = "0x4000210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool sizeCalculate;

	[Token(Token = "0x4000211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Vector2 size;

	[Token(Token = "0x4000212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool sizeNormalized;

	[Token(Token = "0x4000213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Method method;

	[Token(Token = "0x4000214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Texture2D gridTexture;

	[Token(Token = "0x4000215")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public int gridWidth;

	[Token(Token = "0x4000216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public int gridHeight;

	[Token(Token = "0x4000217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool frameCountManual;

	[Token(Token = "0x4000218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public int frameCount;

	[Token(Token = "0x4000219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Texture2D[] sequence;

	[Token(Token = "0x400021A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private EnergyBar energyBar;

	[Token(Token = "0x17000020")]
	private Vector2 PositionPixels
	{
		[Token(Token = "0x6000317")]
		[Address(RVA = "0xAEBC50", Offset = "0xAEBC50", VA = "0xAEBC50")]
		get
		{
			return default(Vector2);
		}
	}

	[Token(Token = "0x17000021")]
	private Vector2 SizePixels
	{
		[Token(Token = "0x6000318")]
		[Address(RVA = "0xAEBCA4", Offset = "0xAEBCA4", VA = "0xAEBCA4")]
		get
		{
			return default(Vector2);
		}
		[Token(Token = "0x6000319")]
		[Address(RVA = "0xAEBCFC", Offset = "0xAEBCFC", VA = "0xAEBCFC")]
		set
		{
		}
	}

	[Token(Token = "0x600031A")]
	[Address(RVA = "0xAEBD54", Offset = "0xAEBD54", VA = "0xAEBD54")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600031B")]
	[Address(RVA = "0xAEBDAC", Offset = "0xAEBDAC", VA = "0xAEBDAC")]
	private void Update()
	{
	}

	[Token(Token = "0x600031C")]
	[Address(RVA = "0xAEBE1C", Offset = "0xAEBE1C", VA = "0xAEBE1C")]
	private new void OnGUI()
	{
	}

	[Token(Token = "0x600031D")]
	[Address(RVA = "0xAEBDEC", Offset = "0xAEBDEC", VA = "0xAEBDEC")]
	private void FixValues()
	{
	}

	[Token(Token = "0x600031E")]
	[Address(RVA = "0xAEBF74", Offset = "0xAEBF74", VA = "0xAEBF74")]
	public bool IsValid()
	{
		return default(bool);
	}

	[Token(Token = "0x600031F")]
	[Address(RVA = "0xAEC0D4", Offset = "0xAEC0D4", VA = "0xAEC0D4")]
	private Vector2 CalculateSize()
	{
		return default(Vector2);
	}

	[Token(Token = "0x6000320")]
	[Address(RVA = "0xAEC2E4", Offset = "0xAEC2E4", VA = "0xAEC2E4")]
	public Texture2D GetTexture(out Rect texCoords)
	{
		return null;
	}

	[Token(Token = "0x6000321")]
	[Address(RVA = "0xAEC3C8", Offset = "0xAEC3C8", VA = "0xAEC3C8")]
	private Texture2D GetTextureGrid(out Rect texCoords)
	{
		return null;
	}

	[Token(Token = "0x6000322")]
	[Address(RVA = "0xAEC44C", Offset = "0xAEC44C", VA = "0xAEC44C")]
	private Texture2D GetTextureSequence(out Rect texCoords)
	{
		return null;
	}

	[Token(Token = "0x6000323")]
	[Address(RVA = "0xAEC4D0", Offset = "0xAEC4D0", VA = "0xAEC4D0")]
	private int Index(int size)
	{
		return default(int);
	}

	[Token(Token = "0x6000324")]
	[Address(RVA = "0xAEC54C", Offset = "0xAEC54C", VA = "0xAEC54C")]
	public EnergyBarSequenceRenderer()
	{
	}
}
[Token(Token = "0x200007F")]
public class gkInterpolate
{
	[Token(Token = "0x2000080")]
	public delegate float EaseFunction(float start, float distance, float elapsedTime, float duration);

	[Token(Token = "0x2000081")]
	public delegate Vector3 TransformToPositionFunction(Transform t);

	[Token(Token = "0x2000082")]
	public delegate Vector3 PositionToPositionFunction(Vector3 v3);

	[Token(Token = "0x2000083")]
	public enum EaseType
	{
		[Token(Token = "0x400021F")]
		Linear,
		[Token(Token = "0x4000220")]
		EaseInQuad,
		[Token(Token = "0x4000221")]
		EaseOutQuad,
		[Token(Token = "0x4000222")]
		EaseInOutQuad,
		[Token(Token = "0x4000223")]
		EaseInCubic,
		[Token(Token = "0x4000224")]
		EaseOutCubic,
		[Token(Token = "0x4000225")]
		EaseInOutCubic,
		[Token(Token = "0x4000226")]
		EaseInQuart,
		[Token(Token = "0x4000227")]
		EaseOutQuart,
		[Token(Token = "0x4000228")]
		EaseInOutQuart,
		[Token(Token = "0x4000229")]
		EaseInQuint,
		[Token(Token = "0x400022A")]
		EaseOutQuint,
		[Token(Token = "0x400022B")]
		EaseInOutQuint,
		[Token(Token = "0x400022C")]
		EaseInSine,
		[Token(Token = "0x400022D")]
		EaseOutSine,
		[Token(Token = "0x400022E")]
		EaseInOutSine,
		[Token(Token = "0x400022F")]
		EaseInExpo,
		[Token(Token = "0x4000230")]
		EaseOutExpo,
		[Token(Token = "0x4000231")]
		EaseInOutExpo,
		[Token(Token = "0x4000232")]
		EaseInCirc,
		[Token(Token = "0x4000233")]
		EaseOutCirc,
		[Token(Token = "0x4000234")]
		EaseInOutCirc
	}

	[Token(Token = "0x2000084")]
	[CompilerGenerated]
	private sealed class <NewEase>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 end;

		[Token(Token = "0x4000238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 start;

		[Token(Token = "0x4000239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public EaseFunction ease;

		[Token(Token = "0x400023A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IEnumerator driver;

		[Token(Token = "0x400023B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float total;

		[Token(Token = "0x400023C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 <distance>5__2;

		[Token(Token = "0x17000022")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000360")]
			[Address(RVA = "0xAEE3E4", Offset = "0xAEE3E4", VA = "0xAEE3E4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000023")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000362")]
			[Address(RVA = "0xAEE42C", Offset = "0xAEE42C", VA = "0xAEE42C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600035D")]
		[Address(RVA = "0xAEC828", Offset = "0xAEC828", VA = "0xAEC828")]
		[DebuggerHidden]
		public <NewEase>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x600035E")]
		[Address(RVA = "0xAEE1A0", Offset = "0xAEE1A0", VA = "0xAEE1A0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600035F")]
		[Address(RVA = "0xAEE1A4", Offset = "0xAEE1A4", VA = "0xAEE1A4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000361")]
		[Address(RVA = "0xAEE3EC", Offset = "0xAEE3EC", VA = "0xAEE3EC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000085")]
	[CompilerGenerated]
	private sealed class <NewBezier>d__13 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400023D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400023E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400023F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform[] nodes;

		[Token(Token = "0x4000240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TransformToPositionFunction toVector3;

		[Token(Token = "0x4000241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public EaseFunction ease;

		[Token(Token = "0x4000242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IEnumerator steps;

		[Token(Token = "0x4000243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float maxStep;

		[Token(Token = "0x4000244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3[] <points>5__2;

		[Token(Token = "0x17000024")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000366")]
			[Address(RVA = "0xAEE6F0", Offset = "0xAEE6F0", VA = "0xAEE6F0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000025")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000368")]
			[Address(RVA = "0xAEE738", Offset = "0xAEE738", VA = "0xAEE738", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000363")]
		[Address(RVA = "0xAED3F0", Offset = "0xAED3F0", VA = "0xAED3F0")]
		[DebuggerHidden]
		public <NewBezier>d__13(int <>1__state)
		{
		}

		[Token(Token = "0x6000364")]
		[Address(RVA = "0xAEE434", Offset = "0xAEE434", VA = "0xAEE434", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000365")]
		[Address(RVA = "0xAEE438", Offset = "0xAEE438", VA = "0xAEE438", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000367")]
		[Address(RVA = "0xAEE6F8", Offset = "0xAEE6F8", VA = "0xAEE6F8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000086")]
	[CompilerGenerated]
	private sealed class <NewBezier>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3[] nodes;

		[Token(Token = "0x4000248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PositionToPositionFunction toVector3;

		[Token(Token = "0x4000249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public EaseFunction ease;

		[Token(Token = "0x400024A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IEnumerator steps;

		[Token(Token = "0x400024B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float maxStep;

		[Token(Token = "0x400024C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3[] <points>5__2;

		[Token(Token = "0x17000026")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600036C")]
			[Address(RVA = "0xAEEA00", Offset = "0xAEEA00", VA = "0xAEEA00", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000027")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600036E")]
			[Address(RVA = "0xAEEA48", Offset = "0xAEEA48", VA = "0xAEEA48", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000369")]
		[Address(RVA = "0xAED418", Offset = "0xAED418", VA = "0xAED418")]
		[DebuggerHidden]
		public <NewBezier>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x600036A")]
		[Address(RVA = "0xAEE740", Offset = "0xAEE740", VA = "0xAEE740", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600036B")]
		[Address(RVA = "0xAEE744", Offset = "0xAEE744", VA = "0xAEE744", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600036D")]
		[Address(RVA = "0xAEEA08", Offset = "0xAEEA08", VA = "0xAEEA08", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000087")]
	[CompilerGenerated]
	private sealed class <NewCatmullRom>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400024D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400024E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400024F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform[] nodes;

		[Token(Token = "0x4000250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TransformToPositionFunction toVector3;

		[Token(Token = "0x4000251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool loop;

		[Token(Token = "0x4000252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int slices;

		[Token(Token = "0x4000253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int <last>5__2;

		[Token(Token = "0x4000254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int <current>5__3;

		[Token(Token = "0x4000255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int <previous>5__4;

		[Token(Token = "0x4000256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int <start>5__5;

		[Token(Token = "0x4000257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int <end>5__6;

		[Token(Token = "0x4000258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int <next>5__7;

		[Token(Token = "0x4000259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int <stepCount>5__8;

		[Token(Token = "0x400025A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int <step>5__9;

		[Token(Token = "0x17000028")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000372")]
			[Address(RVA = "0xAEED8C", Offset = "0xAEED8C", VA = "0xAEED8C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000029")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000374")]
			[Address(RVA = "0xAEEDD4", Offset = "0xAEEDD4", VA = "0xAEEDD4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600036F")]
		[Address(RVA = "0xAED830", Offset = "0xAED830", VA = "0xAED830")]
		[DebuggerHidden]
		public <NewCatmullRom>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x6000370")]
		[Address(RVA = "0xAEEA50", Offset = "0xAEEA50", VA = "0xAEEA50", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000371")]
		[Address(RVA = "0xAEEA54", Offset = "0xAEEA54", VA = "0xAEEA54", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000373")]
		[Address(RVA = "0xAEED94", Offset = "0xAEED94", VA = "0xAEED94", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000088")]
	[CompilerGenerated]
	private sealed class <NewCatmullRom>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400025B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400025C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400025D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3[] nodes;

		[Token(Token = "0x400025E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PositionToPositionFunction toVector3;

		[Token(Token = "0x400025F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool loop;

		[Token(Token = "0x4000260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int slices;

		[Token(Token = "0x4000261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int <last>5__2;

		[Token(Token = "0x4000262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int <current>5__3;

		[Token(Token = "0x4000263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int <previous>5__4;

		[Token(Token = "0x4000264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int <start>5__5;

		[Token(Token = "0x4000265")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int <end>5__6;

		[Token(Token = "0x4000266")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int <next>5__7;

		[Token(Token = "0x4000267")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int <stepCount>5__8;

		[Token(Token = "0x4000268")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int <step>5__9;

		[Token(Token = "0x1700002A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000378")]
			[Address(RVA = "0xAEF13C", Offset = "0xAEF13C", VA = "0xAEF13C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600037A")]
			[Address(RVA = "0xAEF184", Offset = "0xAEF184", VA = "0xAEF184", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000375")]
		[Address(RVA = "0xAED858", Offset = "0xAED858", VA = "0xAED858")]
		[DebuggerHidden]
		public <NewCatmullRom>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x6000376")]
		[Address(RVA = "0xAEEDDC", Offset = "0xAEEDDC", VA = "0xAEEDDC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000377")]
		[Address(RVA = "0xAEEDE0", Offset = "0xAEEDE0", VA = "0xAEEDE0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000379")]
		[Address(RVA = "0xAEF144", Offset = "0xAEF144", VA = "0xAEF144", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000089")]
	[CompilerGenerated]
	private sealed class <NewTimer>d__21 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000269")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400026A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400026B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float duration;

		[Token(Token = "0x400026C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float <elapsedTime>5__2;

		[Token(Token = "0x1700002C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600037E")]
			[Address(RVA = "0xAEF2B4", Offset = "0xAEF2B4", VA = "0xAEF2B4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000380")]
			[Address(RVA = "0xAEF2FC", Offset = "0xAEF2FC", VA = "0xAEF2FC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600037B")]
		[Address(RVA = "0xAED940", Offset = "0xAED940", VA = "0xAED940")]
		[DebuggerHidden]
		public <NewTimer>d__21(int <>1__state)
		{
		}

		[Token(Token = "0x600037C")]
		[Address(RVA = "0xAEF18C", Offset = "0xAEF18C", VA = "0xAEF18C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600037D")]
		[Address(RVA = "0xAEF190", Offset = "0xAEF190", VA = "0xAEF190", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600037F")]
		[Address(RVA = "0xAEF2BC", Offset = "0xAEF2BC", VA = "0xAEF2BC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200008A")]
	[CompilerGenerated]
	private sealed class <NewCounter>d__22 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400026D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400026E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400026F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int start;

		[Token(Token = "0x4000270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int step;

		[Token(Token = "0x4000271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int end;

		[Token(Token = "0x4000272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int <i>5__2;

		[Token(Token = "0x1700002E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000384")]
			[Address(RVA = "0xAEF3BC", Offset = "0xAEF3BC", VA = "0xAEF3BC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700002F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000386")]
			[Address(RVA = "0xAEF404", Offset = "0xAEF404", VA = "0xAEF404", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000381")]
		[Address(RVA = "0xAED968", Offset = "0xAED968", VA = "0xAED968")]
		[DebuggerHidden]
		public <NewCounter>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x6000382")]
		[Address(RVA = "0xAEF304", Offset = "0xAEF304", VA = "0xAEF304", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000383")]
		[Address(RVA = "0xAEF308", Offset = "0xAEF308", VA = "0xAEF308", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000385")]
		[Address(RVA = "0xAEF3C4", Offset = "0xAEF3C4", VA = "0xAEF3C4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x6000325")]
	[Address(RVA = "0xAEC568", Offset = "0xAEC568", VA = "0xAEC568")]
	public static IEnumerator NewEase(EaseFunction ease, Vector3 start, Vector3 end, float duration)
	{
		return null;
	}

	[Token(Token = "0x6000326")]
	[Address(RVA = "0xAEC72C", Offset = "0xAEC72C", VA = "0xAEC72C")]
	public static IEnumerator NewEase(EaseFunction ease, Vector3 start, Vector3 end, int slices)
	{
		return null;
	}

	[Token(Token = "0x6000327")]
	[Address(RVA = "0xAEC650", Offset = "0xAEC650", VA = "0xAEC650")]
	[IteratorStateMachine(typeof(<NewEase>d__6))]
	public static IEnumerator NewEase(EaseFunction ease, Vector3 start, Vector3 end, float total, IEnumerator driver)
	{
		return null;
	}

	[Token(Token = "0x6000328")]
	[Address(RVA = "0xAEC850", Offset = "0xAEC850", VA = "0xAEC850")]
	public static Vector3 Ease(EaseFunction ease, Vector3 start, Vector3 distance, float elapsedTime, float duration)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000329")]
	[Address(RVA = "0xAEC910", Offset = "0xAEC910", VA = "0xAEC910")]
	public static EaseFunction Ease(EaseType type)
	{
		return null;
	}

	[Token(Token = "0x600032A")]
	[Address(RVA = "0xAECD78", Offset = "0xAECD78", VA = "0xAECD78")]
	public static IEnumerator NewBezier(EaseFunction ease, Transform[] nodes, float duration)
	{
		return null;
	}

	[Token(Token = "0x600032B")]
	[Address(RVA = "0xAED034", Offset = "0xAED034", VA = "0xAED034")]
	public static IEnumerator NewBezier(EaseFunction ease, Transform[] nodes, int slices)
	{
		return null;
	}

	[Token(Token = "0x600032C")]
	[Address(RVA = "0xAED0E8", Offset = "0xAED0E8", VA = "0xAED0E8")]
	public static IEnumerator NewBezier(EaseFunction ease, Vector3[] points, float duration)
	{
		return null;
	}

	[Token(Token = "0x600032D")]
	[Address(RVA = "0xAED33C", Offset = "0xAED33C", VA = "0xAED33C")]
	public static IEnumerator NewBezier(EaseFunction ease, Vector3[] points, int slices)
	{
		return null;
	}

	[Token(Token = "0x600032E")]
	[Address(RVA = "0xAECF64", Offset = "0xAECF64", VA = "0xAECF64")]
	[IteratorStateMachine(typeof(<NewBezier>d__13))]
	public static IEnumerator NewBezier(EaseFunction ease, Transform[] nodes, TransformToPositionFunction toVector3, float maxStep, IEnumerator steps)
	{
		return null;
	}

	[Token(Token = "0x600032F")]
	[Address(RVA = "0xAED26C", Offset = "0xAED26C", VA = "0xAED26C")]
	[IteratorStateMachine(typeof(<NewBezier>d__14))]
	public static IEnumerator NewBezier(EaseFunction ease, Vector3[] nodes, PositionToPositionFunction toVector3, float maxStep, IEnumerator steps)
	{
		return null;
	}

	[Token(Token = "0x6000330")]
	[Address(RVA = "0xAED440", Offset = "0xAED440", VA = "0xAED440")]
	public static Vector3 Bezier(EaseFunction ease, Vector3[] points, float elapsedTime, float duration)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000331")]
	[Address(RVA = "0xAED5B0", Offset = "0xAED5B0", VA = "0xAED5B0")]
	public static IEnumerator NewCatmullRom(Transform[] nodes, int slices, bool loop)
	{
		return null;
	}

	[Token(Token = "0x6000332")]
	[Address(RVA = "0xAED6F0", Offset = "0xAED6F0", VA = "0xAED6F0")]
	public static IEnumerator NewCatmullRom(Vector3[] points, int slices, bool loop)
	{
		return null;
	}

	[Token(Token = "0x6000333")]
	[Address(RVA = "0xAED644", Offset = "0xAED644", VA = "0xAED644")]
	[IteratorStateMachine(typeof(<NewCatmullRom>d__18))]
	public static IEnumerator NewCatmullRom(Transform[] nodes, TransformToPositionFunction toVector3, int slices, bool loop)
	{
		return null;
	}

	[Token(Token = "0x6000334")]
	[Address(RVA = "0xAED784", Offset = "0xAED784", VA = "0xAED784")]
	[IteratorStateMachine(typeof(<NewCatmullRom>d__19))]
	public static IEnumerator NewCatmullRom(Vector3[] nodes, PositionToPositionFunction toVector3, int slices, bool loop)
	{
		return null;
	}

	[Token(Token = "0x6000335")]
	[Address(RVA = "0xAED880", Offset = "0xAED880", VA = "0xAED880")]
	public static Vector3 CatmullRom(Vector3 previous, Vector3 start, Vector3 end, Vector3 next, float elapsedTime, float duration)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000336")]
	[Address(RVA = "0xAEC5E0", Offset = "0xAEC5E0", VA = "0xAEC5E0")]
	[IteratorStateMachine(typeof(<NewTimer>d__21))]
	public static IEnumerator NewTimer(float duration)
	{
		return null;
	}

	[Token(Token = "0x6000337")]
	[Address(RVA = "0xAEC7AC", Offset = "0xAEC7AC", VA = "0xAEC7AC")]
	[IteratorStateMachine(typeof(<NewCounter>d__22))]
	public static IEnumerator NewCounter(int start, int end, int step)
	{
		return null;
	}

	[Token(Token = "0x6000338")]
	[Address(RVA = "0xAED990", Offset = "0xAED990", VA = "0xAED990")]
	public static Vector3 Identity(Vector3 v)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000339")]
	[Address(RVA = "0xAED994", Offset = "0xAED994", VA = "0xAED994")]
	public static Vector3 TransformDotPosition(Transform t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600033A")]
	[Address(RVA = "0xAED9A8", Offset = "0xAED9A8", VA = "0xAED9A8")]
	public static float Linear(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x600033B")]
	[Address(RVA = "0xAED9C0", Offset = "0xAED9C0", VA = "0xAED9C0")]
	public static float EaseInQuad(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x600033C")]
	[Address(RVA = "0xAED9E0", Offset = "0xAED9E0", VA = "0xAED9E0")]
	public static float EaseOutQuad(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x600033D")]
	[Address(RVA = "0xAEDA08", Offset = "0xAEDA08", VA = "0xAEDA08")]
	public static float EaseInOutQuad(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x600033E")]
	[Address(RVA = "0xAEDA6C", Offset = "0xAEDA6C", VA = "0xAEDA6C")]
	public static float EaseInCubic(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x600033F")]
	[Address(RVA = "0xAEDA90", Offset = "0xAEDA90", VA = "0xAEDA90")]
	public static float EaseOutCubic(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000340")]
	[Address(RVA = "0xAEDAC4", Offset = "0xAEDAC4", VA = "0xAEDAC4")]
	public static float EaseInOutCubic(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000341")]
	[Address(RVA = "0xAEDB24", Offset = "0xAEDB24", VA = "0xAEDB24")]
	public static float EaseInQuart(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000342")]
	[Address(RVA = "0xAEDB4C", Offset = "0xAEDB4C", VA = "0xAEDB4C")]
	public static float EaseOutQuart(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000343")]
	[Address(RVA = "0xAEDB80", Offset = "0xAEDB80", VA = "0xAEDB80")]
	public static float EaseInOutQuart(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000344")]
	[Address(RVA = "0xAEDBEC", Offset = "0xAEDBEC", VA = "0xAEDBEC")]
	public static float EaseInQuint(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000345")]
	[Address(RVA = "0xAEDC18", Offset = "0xAEDC18", VA = "0xAEDC18")]
	public static float EaseOutQuint(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000346")]
	[Address(RVA = "0xAEDC54", Offset = "0xAEDC54", VA = "0xAEDC54")]
	public static float EaseInOutQuint(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000347")]
	[Address(RVA = "0xAEDCC4", Offset = "0xAEDCC4", VA = "0xAEDCC4")]
	public static float EaseInSine(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000348")]
	[Address(RVA = "0xAEDD08", Offset = "0xAEDD08", VA = "0xAEDD08")]
	public static float EaseOutSine(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000349")]
	[Address(RVA = "0xAEDD48", Offset = "0xAEDD48", VA = "0xAEDD48")]
	public static float EaseInOutSine(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x600034A")]
	[Address(RVA = "0xAEDD98", Offset = "0xAEDD98", VA = "0xAEDD98")]
	public static float EaseInExpo(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x600034B")]
	[Address(RVA = "0xAEDDDC", Offset = "0xAEDDDC", VA = "0xAEDDDC")]
	public static float EaseOutExpo(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x600034C")]
	[Address(RVA = "0xAEDE20", Offset = "0xAEDE20", VA = "0xAEDE20")]
	public static float EaseInOutExpo(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x600034D")]
	[Address(RVA = "0xAEDEA8", Offset = "0xAEDEA8", VA = "0xAEDEA8")]
	public static float EaseInCirc(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x600034E")]
	[Address(RVA = "0xAEDED8", Offset = "0xAEDED8", VA = "0xAEDED8")]
	public static float EaseOutCirc(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x600034F")]
	[Address(RVA = "0xAEDF0C", Offset = "0xAEDF0C", VA = "0xAEDF0C")]
	public static float EaseInOutCirc(float start, float distance, float elapsedTime, float duration)
	{
		return default(float);
	}

	[Token(Token = "0x6000350")]
	[Address(RVA = "0xAEDF70", Offset = "0xAEDF70", VA = "0xAEDF70")]
	public gkInterpolate()
	{
	}
}
[Token(Token = "0x200008B")]
public interface IClickEventListener
{
	[Token(Token = "0x6000387")]
	void OnClickEvent();

	[Token(Token = "0x6000388")]
	void OnHoverEvent(bool a_bIsHovered);
}
[Token(Token = "0x200008C")]
public class IABAndroid
{
	[Token(Token = "0x4000273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static AndroidJavaObject _plugin;

	[Token(Token = "0x6000389")]
	[Address(RVA = "0xAEF40C", Offset = "0xAEF40C", VA = "0xAEF40C")]
	static IABAndroid()
	{
	}

	[Token(Token = "0x600038A")]
	[Address(RVA = "0xAEF66C", Offset = "0xAEF66C", VA = "0xAEF66C")]
	public static void init(string publicKey)
	{
	}

	[Token(Token = "0x600038B")]
	[Address(RVA = "0xAEF778", Offset = "0xAEF778", VA = "0xAEF778")]
	public static void startCheckBillingAvailableRequest()
	{
	}

	[Token(Token = "0x600038C")]
	[Address(RVA = "0xAEF86C", Offset = "0xAEF86C", VA = "0xAEF86C")]
	public static void restoreTransactions()
	{
	}

	[Token(Token = "0x600038D")]
	[Address(RVA = "0xAEF960", Offset = "0xAEF960", VA = "0xAEF960")]
	public static void purchaseProduct(string productId)
	{
	}

	[Token(Token = "0x600038E")]
	[Address(RVA = "0xAEFA6C", Offset = "0xAEFA6C", VA = "0xAEFA6C")]
	public static void testPurchaseProduct()
	{
	}

	[Token(Token = "0x600038F")]
	[Address(RVA = "0xAEFAD0", Offset = "0xAEFAD0", VA = "0xAEFAD0")]
	public static void testRefundedProduct()
	{
	}

	[Token(Token = "0x6000390")]
	[Address(RVA = "0xAEFB34", Offset = "0xAEFB34", VA = "0xAEFB34")]
	public static void stopBillingService()
	{
	}

	[Token(Token = "0x6000391")]
	[Address(RVA = "0xAEFC28", Offset = "0xAEFC28", VA = "0xAEFC28")]
	public IABAndroid()
	{
	}
}
[Token(Token = "0x200008D")]
public class IABAndroidEventListener : MonoBehaviour
{
	[Token(Token = "0x6000392")]
	[Address(RVA = "0xAEFC30", Offset = "0xAEFC30", VA = "0xAEFC30")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000393")]
	[Address(RVA = "0xAF04FC", Offset = "0xAF04FC", VA = "0xAF04FC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000394")]
	[Address(RVA = "0xAF0DC8", Offset = "0xAF0DC8", VA = "0xAF0DC8")]
	private void billingSupportedEvent(bool isSupported)
	{
	}

	[Token(Token = "0x6000395")]
	[Address(RVA = "0xAF0E6C", Offset = "0xAF0E6C", VA = "0xAF0E6C")]
	private void purchaseSignatureVerifiedEvent(string signedData, string signature)
	{
	}

	[Token(Token = "0x6000396")]
	[Address(RVA = "0xAF0F20", Offset = "0xAF0F20", VA = "0xAF0F20")]
	private void purchaseSucceededEvent(string productId)
	{
	}

	[Token(Token = "0x6000397")]
	[Address(RVA = "0xAF12B4", Offset = "0xAF12B4", VA = "0xAF12B4")]
	private void purchaseCancelledEvent(string productId)
	{
	}

	[Token(Token = "0x6000398")]
	[Address(RVA = "0xAF1340", Offset = "0xAF1340", VA = "0xAF1340")]
	private void purchaseRefundedEvent(string productId)
	{
	}

	[Token(Token = "0x6000399")]
	[Address(RVA = "0xAF13CC", Offset = "0xAF13CC", VA = "0xAF13CC")]
	private void purchaseFailedEvent(string productId)
	{
	}

	[Token(Token = "0x600039A")]
	[Address(RVA = "0xAF1458", Offset = "0xAF1458", VA = "0xAF1458")]
	private void transactionsRestoredEvent()
	{
	}

	[Token(Token = "0x600039B")]
	[Address(RVA = "0xAF14C0", Offset = "0xAF14C0", VA = "0xAF14C0")]
	private void transactionRestoreFailedEvent(string error)
	{
	}

	[Token(Token = "0x600039C")]
	[Address(RVA = "0xAF154C", Offset = "0xAF154C", VA = "0xAF154C")]
	public IABAndroidEventListener()
	{
	}
}
[Token(Token = "0x200008E")]
public class IABAndroidManager : MonoBehaviour
{
	[Token(Token = "0x1400002F")]
	public static event Action<bool> billingSupportedEvent
	{
		[Token(Token = "0x600039D")]
		[Address(RVA = "0xAEFE94", Offset = "0xAEFE94", VA = "0xAEFE94")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600039E")]
		[Address(RVA = "0xAF0760", Offset = "0xAF0760", VA = "0xAF0760")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000030")]
	public static event Action<string> purchaseSucceededEvent
	{
		[Token(Token = "0x600039F")]
		[Address(RVA = "0xAF0030", Offset = "0xAF0030", VA = "0xAF0030")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60003A0")]
		[Address(RVA = "0xAF08FC", Offset = "0xAF08FC", VA = "0xAF08FC")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000031")]
	public static event Action<string, string> purchaseSignatureVerifiedEvent
	{
		[Token(Token = "0x60003A1")]
		[Address(RVA = "0xAEFF60", Offset = "0xAEFF60", VA = "0xAEFF60")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60003A2")]
		[Address(RVA = "0xAF082C", Offset = "0xAF082C", VA = "0xAF082C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000032")]
	public static event Action<string> purchaseCancelledEvent
	{
		[Token(Token = "0x60003A3")]
		[Address(RVA = "0xAF0100", Offset = "0xAF0100", VA = "0xAF0100")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60003A4")]
		[Address(RVA = "0xAF09CC", Offset = "0xAF09CC", VA = "0xAF09CC")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000033")]
	public static event Action<string> purchaseRefundedEvent
	{
		[Token(Token = "0x60003A5")]
		[Address(RVA = "0xAF01D0", Offset = "0xAF01D0", VA = "0xAF01D0")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60003A6")]
		[Address(RVA = "0xAF0A9C", Offset = "0xAF0A9C", VA = "0xAF0A9C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000034")]
	public static event Action<string> purchaseFailedEvent
	{
		[Token(Token = "0x60003A7")]
		[Address(RVA = "0xAF02A0", Offset = "0xAF02A0", VA = "0xAF02A0")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60003A8")]
		[Address(RVA = "0xAF0B6C", Offset = "0xAF0B6C", VA = "0xAF0B6C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000035")]
	public static event Action transactionsRestoredEvent
	{
		[Token(Token = "0x60003A9")]
		[Address(RVA = "0xAF0370", Offset = "0xAF0370", VA = "0xAF0370")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60003AA")]
		[Address(RVA = "0xAF0C3C", Offset = "0xAF0C3C", VA = "0xAF0C3C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000036")]
	public static event Action<string> transactionRestoreFailedEvent
	{
		[Token(Token = "0x60003AB")]
		[Address(RVA = "0xAF042C", Offset = "0xAF042C", VA = "0xAF042C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60003AC")]
		[Address(RVA = "0xAF0CF8", Offset = "0xAF0CF8", VA = "0xAF0CF8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60003AD")]
	[Address(RVA = "0xAF1554", Offset = "0xAF1554", VA = "0xAF1554")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003AE")]
	[Address(RVA = "0xAF15F0", Offset = "0xAF15F0", VA = "0xAF15F0")]
	public void billingSupported(string isSupported)
	{
	}

	[Token(Token = "0x60003AF")]
	[Address(RVA = "0xAF1684", Offset = "0xAF1684", VA = "0xAF1684")]
	public void purchaseSignatureVerified(string data)
	{
	}

	[Token(Token = "0x60003B0")]
	[Address(RVA = "0xAF17C8", Offset = "0xAF17C8", VA = "0xAF17C8")]
	public void purchaseSucceeded(string productId)
	{
	}

	[Token(Token = "0x60003B1")]
	[Address(RVA = "0xAF1834", Offset = "0xAF1834", VA = "0xAF1834")]
	public void purchaseCancelled(string productId)
	{
	}

	[Token(Token = "0x60003B2")]
	[Address(RVA = "0xAF18A0", Offset = "0xAF18A0", VA = "0xAF18A0")]
	public void purchaseRefunded(string productId)
	{
	}

	[Token(Token = "0x60003B3")]
	[Address(RVA = "0xAF190C", Offset = "0xAF190C", VA = "0xAF190C")]
	public void purchaseFailed(string productId)
	{
	}

	[Token(Token = "0x60003B4")]
	[Address(RVA = "0xAF1978", Offset = "0xAF1978", VA = "0xAF1978")]
	public void transactionsRestored(string empty)
	{
	}

	[Token(Token = "0x60003B5")]
	[Address(RVA = "0xAF19DC", Offset = "0xAF19DC", VA = "0xAF19DC")]
	public void transactionRestoreFailed(string error)
	{
	}

	[Token(Token = "0x60003B6")]
	[Address(RVA = "0xAF1A48", Offset = "0xAF1A48", VA = "0xAF1A48")]
	public IABAndroidManager()
	{
	}
}
[Token(Token = "0x200008F")]
public class IABUIManager : MonoBehaviour
{
	[Token(Token = "0x60003B7")]
	[Address(RVA = "0xAF1A50", Offset = "0xAF1A50", VA = "0xAF1A50")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60003B8")]
	[Address(RVA = "0xAF1E90", Offset = "0xAF1E90", VA = "0xAF1E90")]
	public IABUIManager()
	{
	}
}
[Token(Token = "0x2000090")]
public class Instaplayervrmulti : MonoBehaviour
{
	[Token(Token = "0x400027C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material[] elementbody;

	[Token(Token = "0x400027D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material[] elementpelle;

	[Token(Token = "0x400027E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Material[] elementracchetta;

	[Token(Token = "0x400027F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int heads;

	[Token(Token = "0x4000280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public int outfit;

	[Token(Token = "0x4000281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int racket;

	[Token(Token = "0x4000282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform controllersx;

	[Token(Token = "0x4000283")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform controllerdx;

	[Token(Token = "0x4000284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform controllertracker;

	[Token(Token = "0x4000285")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform trackermocksx;

	[Token(Token = "0x4000286")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform trackermockdx;

	[Token(Token = "0x4000287")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject body1;

	[Token(Token = "0x4000288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public GameObject pelle1;

	[Token(Token = "0x4000289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public GameObject capmedio1;

	[Token(Token = "0x400028A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject occhi1;

	[Token(Token = "0x400028B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public GameObject fascia1;

	[Token(Token = "0x400028C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public GameObject faccia1;

	[Token(Token = "0x400028D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public GameObject polsini1;

	[Token(Token = "0x400028E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public GameObject testa11;

	[Token(Token = "0x400028F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public GameObject testa21;

	[Token(Token = "0x4000290")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public GameObject testa31;

	[Token(Token = "0x4000291")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public GameObject testa41;

	[Token(Token = "0x4000292")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public GameObject testa51;

	[Token(Token = "0x4000293")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public GameObject testa61;

	[Token(Token = "0x4000294")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public GameObject testa71;

	[Token(Token = "0x4000295")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public GameObject testa81;

	[Token(Token = "0x4000296")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public GameObject testa91;

	[Token(Token = "0x4000297")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public GameObject testa101;

	[Token(Token = "0x4000298")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public GameObject racchetta;

	[Token(Token = "0x4000299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public GameObject racchettasx;

	[Token(Token = "0x400029A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public GameObject racchettadx;

	[Token(Token = "0x400029B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public GameObject femshirt1;

	[Token(Token = "0x400029C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public GameObject femskirt1;

	[Token(Token = "0x400029D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public GameObject femboots1;

	[Token(Token = "0x400029E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public GameObject femskin1;

	[Token(Token = "0x400029F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public GameObject femhair1o1;

	[Token(Token = "0x40002A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public GameObject femhair2o1;

	[Token(Token = "0x40002A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public GameObject femhair3o1;

	[Token(Token = "0x40002A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public GameObject femhair4o1;

	[Token(Token = "0x40002A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public GameObject femhair5o1;

	[Token(Token = "0x40002A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public GameObject femhair6o1;

	[Token(Token = "0x40002A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public GameObject femhair7o1;

	[Token(Token = "0x40002A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public GameObject femhair8o1;

	[Token(Token = "0x40002A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public GameObject femhair9o1;

	[Token(Token = "0x40002A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public GameObject femhair10o1;

	[Token(Token = "0x40002A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public GameObject femhair11o1;

	[Token(Token = "0x40002AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public GameObject femhead1o1;

	[Token(Token = "0x40002AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public GameObject femhead2o1;

	[Token(Token = "0x40002AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	public GameObject femhead3o1;

	[Token(Token = "0x40002AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	public GameObject femhead4o1;

	[Token(Token = "0x40002AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	public GameObject femhead5o1;

	[Token(Token = "0x40002AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	public GameObject femhead6o1;

	[Token(Token = "0x40002B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	public GameObject femhead7o1;

	[Token(Token = "0x40002B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	public GameObject femhead8o1;

	[Token(Token = "0x40002B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	public GameObject femhead9o1;

	[Token(Token = "0x40002B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	public GameObject femhead10o1;

	[Token(Token = "0x40002B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	public GameObject femhead11o1;

	[Token(Token = "0x60003B9")]
	[Address(RVA = "0xAF1E98", Offset = "0xAF1E98", VA = "0xAF1E98")]
	public void ChangeOutfit()
	{
	}

	[Token(Token = "0x60003BA")]
	[Address(RVA = "0xAF3C90", Offset = "0xAF3C90", VA = "0xAF3C90")]
	public void ChangeOutfitOpponent()
	{
	}

	[Token(Token = "0x60003BB")]
	[Address(RVA = "0xAF58C4", Offset = "0xAF58C4", VA = "0xAF58C4")]
	public Instaplayervrmulti()
	{
	}
}
[Token(Token = "0x2000091")]
public class MiniJSON
{
	[Token(Token = "0x40002B5")]
	public const int TOKEN_NONE = 0;

	[Token(Token = "0x40002B6")]
	public const int TOKEN_CURLY_OPEN = 1;

	[Token(Token = "0x40002B7")]
	public const int TOKEN_CURLY_CLOSE = 2;

	[Token(Token = "0x40002B8")]
	public const int TOKEN_SQUARED_OPEN = 3;

	[Token(Token = "0x40002B9")]
	public const int TOKEN_SQUARED_CLOSE = 4;

	[Token(Token = "0x40002BA")]
	public const int TOKEN_COLON = 5;

	[Token(Token = "0x40002BB")]
	public const int TOKEN_COMMA = 6;

	[Token(Token = "0x40002BC")]
	public const int TOKEN_STRING = 7;

	[Token(Token = "0x40002BD")]
	public const int TOKEN_NUMBER = 8;

	[Token(Token = "0x40002BE")]
	public const int TOKEN_TRUE = 9;

	[Token(Token = "0x40002BF")]
	public const int TOKEN_FALSE = 10;

	[Token(Token = "0x40002C0")]
	public const int TOKEN_NULL = 11;

	[Token(Token = "0x40002C1")]
	private const int BUILDER_CAPACITY = 2000;

	[Token(Token = "0x40002C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static MiniJSON instance;

	[Token(Token = "0x40002C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	protected int lastErrorIndex;

	[Token(Token = "0x40002C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected string lastDecode;

	[Token(Token = "0x60003BC")]
	[Address(RVA = "0xB17310", Offset = "0xB17310", VA = "0xB17310")]
	public static object JsonDecode(string json)
	{
		return null;
	}

	[Token(Token = "0x60003BD")]
	[Address(RVA = "0xB17604", Offset = "0xB17604", VA = "0xB17604")]
	public static string JsonEncode(object json)
	{
		return null;
	}

	[Token(Token = "0x60003BE")]
	[Address(RVA = "0xB179DC", Offset = "0xB179DC", VA = "0xB179DC")]
	public static bool LastDecodeSuccessful()
	{
		return default(bool);
	}

	[Token(Token = "0x60003BF")]
	[Address(RVA = "0xB17A48", Offset = "0xB17A48", VA = "0xB17A48")]
	public static int GetLastErrorIndex()
	{
		return default(int);
	}

	[Token(Token = "0x60003C0")]
	[Address(RVA = "0xB17AAC", Offset = "0xB17AAC", VA = "0xB17AAC")]
	public static string GetLastErrorSnippet()
	{
		return null;
	}

	[Token(Token = "0x60003C1")]
	[Address(RVA = "0xB17BF4", Offset = "0xB17BF4", VA = "0xB17BF4")]
	protected Hashtable ParseObject(char[] json, ref int index)
	{
		return null;
	}

	[Token(Token = "0x60003C2")]
	[Address(RVA = "0xB1832C", Offset = "0xB1832C", VA = "0xB1832C")]
	protected ArrayList ParseArray(char[] json, ref int index)
	{
		return null;
	}

	[Token(Token = "0x60003C3")]
	[Address(RVA = "0xB1742C", Offset = "0xB1742C", VA = "0xB1742C")]
	protected object ParseValue(char[] json, ref int index, ref bool success)
	{
		return null;
	}

	[Token(Token = "0x60003C4")]
	[Address(RVA = "0xB17FC4", Offset = "0xB17FC4", VA = "0xB17FC4")]
	protected string ParseString(char[] json, ref int index)
	{
		return null;
	}

	[Token(Token = "0x60003C5")]
	[Address(RVA = "0xB18450", Offset = "0xB18450", VA = "0xB18450")]
	protected double ParseNumber(char[] json, ref int index)
	{
		return default(double);
	}

	[Token(Token = "0x60003C6")]
	[Address(RVA = "0xB185B0", Offset = "0xB185B0", VA = "0xB185B0")]
	protected int GetLastIndexOfNumber(char[] json, int index)
	{
		return default(int);
	}

	[Token(Token = "0x60003C7")]
	[Address(RVA = "0xB18510", Offset = "0xB18510", VA = "0xB18510")]
	protected void EatWhitespace(char[] json, ref int index)
	{
	}

	[Token(Token = "0x60003C8")]
	[Address(RVA = "0xB17FAC", Offset = "0xB17FAC", VA = "0xB17FAC")]
	protected int LookAhead(char[] json, int index)
	{
		return default(int);
	}

	[Token(Token = "0x60003C9")]
	[Address(RVA = "0xB17D4C", Offset = "0xB17D4C", VA = "0xB17D4C")]
	protected int NextToken(char[] json, ref int index)
	{
		return default(int);
	}

	[Token(Token = "0x60003CA")]
	[Address(RVA = "0xB18658", Offset = "0xB18658", VA = "0xB18658")]
	protected bool SerializeObjectOrArray(object objectOrArray, StringBuilder builder)
	{
		return default(bool);
	}

	[Token(Token = "0x60003CB")]
	[Address(RVA = "0xB1874C", Offset = "0xB1874C", VA = "0xB1874C")]
	protected bool SerializeObject(Hashtable anObject, StringBuilder builder)
	{
		return default(bool);
	}

	[Token(Token = "0x60003CC")]
	[Address(RVA = "0xB189E4", Offset = "0xB189E4", VA = "0xB189E4")]
	protected bool SerializeArray(ArrayList anArray, StringBuilder builder)
	{
		return default(bool);
	}

	[Token(Token = "0x60003CD")]
	[Address(RVA = "0xB176C4", Offset = "0xB176C4", VA = "0xB176C4")]
	protected bool SerializeValue(object value, StringBuilder builder)
	{
		return default(bool);
	}

	[Token(Token = "0x60003CE")]
	[Address(RVA = "0xB18B28", Offset = "0xB18B28", VA = "0xB18B28")]
	protected void SerializeString(string aString, StringBuilder builder)
	{
	}

	[Token(Token = "0x60003CF")]
	[Address(RVA = "0xB18DB8", Offset = "0xB18DB8", VA = "0xB18DB8")]
	protected void SerializeNumber(double number, StringBuilder builder)
	{
	}

	[Token(Token = "0x60003D0")]
	[Address(RVA = "0xB18E34", Offset = "0xB18E34", VA = "0xB18E34")]
	public MiniJSON()
	{
	}
}
[Token(Token = "0x2000092")]
public abstract class MonoSingleton<T> : MonoBehaviour where T : MonoSingleton<T>
{
	[Token(Token = "0x40002C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static T m_Instance;

	[Token(Token = "0x17000030")]
	public static T instance
	{
		[Token(Token = "0x60003D2")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60003D3")]
	private void Awake()
	{
	}

	[Token(Token = "0x60003D4")]
	public virtual void Init()
	{
	}

	[Token(Token = "0x60003D5")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x60003D6")]
	protected MonoSingleton()
	{
	}
}
[Token(Token = "0x2000093")]
public static class ComponentExtensions
{
	[Token(Token = "0x60003D7")]
	[Address(RVA = "0xB18F00", Offset = "0xB18F00", VA = "0xB18F00")]
	public static RectTransform rectTransform(this Component cp)
	{
		return null;
	}

	[Token(Token = "0x60003D8")]
	[Address(RVA = "0xB18F68", Offset = "0xB18F68", VA = "0xB18F68")]
	public static float Remap(this float value, float from1, float to1, float from2, float to2)
	{
		return default(float);
	}
}
[Serializable]
[Token(Token = "0x2000094")]
public class Controllercheck2 : MonoBehaviour
{
	[Token(Token = "0x40002C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject htcpad;

	[Token(Token = "0x40002C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject oculuspad;

	[Token(Token = "0x40002C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int device;

	[Token(Token = "0x60003D9")]
	[Address(RVA = "0xB18F84", Offset = "0xB18F84", VA = "0xB18F84", Slot = "4")]
	public virtual void Start()
	{
	}

	[Token(Token = "0x60003DA")]
	[Address(RVA = "0xB19068", Offset = "0xB19068", VA = "0xB19068")]
	public Controllercheck2()
	{
	}
}
[Serializable]
[Token(Token = "0x2000095")]
public class ETCArea : MonoBehaviour
{
	[Token(Token = "0x2000096")]
	public enum AreaPreset
	{
		[Token(Token = "0x40002CB")]
		Choose,
		[Token(Token = "0x40002CC")]
		TopLeft,
		[Token(Token = "0x40002CD")]
		TopRight,
		[Token(Token = "0x40002CE")]
		BottomLeft,
		[Token(Token = "0x40002CF")]
		BottomRight
	}

	[Token(Token = "0x40002C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool show;

	[Token(Token = "0x60003DB")]
	[Address(RVA = "0xB19070", Offset = "0xB19070", VA = "0xB19070")]
	public ETCArea()
	{
	}

	[Token(Token = "0x60003DC")]
	[Address(RVA = "0xB19090", Offset = "0xB19090", VA = "0xB19090")]
	public void Awake()
	{
	}

	[Token(Token = "0x60003DD")]
	[Address(RVA = "0xB190EC", Offset = "0xB190EC", VA = "0xB190EC")]
	public void ApplyPreset(AreaPreset preset)
	{
	}
}
[Serializable]
[Token(Token = "0x2000097")]
public class ETCAxis
{
	[Token(Token = "0x2000098")]
	public enum DirectAction
	{
		[Token(Token = "0x40002F1")]
		Rotate,
		[Token(Token = "0x40002F2")]
		RotateLocal,
		[Token(Token = "0x40002F3")]
		Translate,
		[Token(Token = "0x40002F4")]
		TranslateLocal,
		[Token(Token = "0x40002F5")]
		Scale,
		[Token(Token = "0x40002F6")]
		Force,
		[Token(Token = "0x40002F7")]
		RelativeForce,
		[Token(Token = "0x40002F8")]
		Torque,
		[Token(Token = "0x40002F9")]
		RelativeTorque
	}

	[Token(Token = "0x2000099")]
	public enum AxisInfluenced
	{
		[Token(Token = "0x40002FB")]
		X,
		[Token(Token = "0x40002FC")]
		Y,
		[Token(Token = "0x40002FD")]
		Z
	}

	[Token(Token = "0x200009A")]
	public enum AxisRange
	{
		[Token(Token = "0x40002FF")]
		Classical,
		[Token(Token = "0x4000300")]
		Positif
	}

	[Token(Token = "0x200009B")]
	public enum AxisState
	{
		[Token(Token = "0x4000302")]
		None,
		[Token(Token = "0x4000303")]
		Down,
		[Token(Token = "0x4000304")]
		Press,
		[Token(Token = "0x4000305")]
		Up,
		[Token(Token = "0x4000306")]
		DownUp,
		[Token(Token = "0x4000307")]
		DownDown,
		[Token(Token = "0x4000308")]
		DownLeft,
		[Token(Token = "0x4000309")]
		DownRight,
		[Token(Token = "0x400030A")]
		PressUp,
		[Token(Token = "0x400030B")]
		PressDown,
		[Token(Token = "0x400030C")]
		PressLeft,
		[Token(Token = "0x400030D")]
		PressRight
	}

	[Token(Token = "0x200009C")]
	public enum ActionOn
	{
		[Token(Token = "0x400030F")]
		Down,
		[Token(Token = "0x4000310")]
		Press
	}

	[Token(Token = "0x40002D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public string name;

	[Token(Token = "0x40002D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool enable;

	[Token(Token = "0x40002D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public AxisRange range;

	[Token(Token = "0x40002D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool invertedAxis;

	[Token(Token = "0x40002D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float speed;

	[Token(Token = "0x40002D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float deadValue;

	[Token(Token = "0x40002D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool isEnertia;

	[Token(Token = "0x40002D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float inertia;

	[Token(Token = "0x40002D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float inertiaThreshold;

	[Token(Token = "0x40002D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool isAutoStab;

	[Token(Token = "0x40002DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float autoStabThreshold;

	[Token(Token = "0x40002DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float autoStabSpeed;

	[Token(Token = "0x40002DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float startAngle;

	[Token(Token = "0x40002DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool isClampRotation;

	[Token(Token = "0x40002DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float maxAngle;

	[Token(Token = "0x40002DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float minAngle;

	[Token(Token = "0x40002E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool isValueOverTime;

	[Token(Token = "0x40002E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float overTimeStep;

	[Token(Token = "0x40002E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float maxOverTimeValue;

	[Token(Token = "0x40002E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float axisValue;

	[Token(Token = "0x40002E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float axisSpeedValue;

	[Token(Token = "0x40002E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float axisThreshold;

	[Token(Token = "0x40002E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public AxisState axisState;

	[Token(Token = "0x40002E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private Transform _directTransform;

	[Token(Token = "0x40002E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public DirectAction directAction;

	[Token(Token = "0x40002E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public AxisInfluenced axisInfluenced;

	[Token(Token = "0x40002EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public ActionOn actionOn;

	[Token(Token = "0x40002EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public CharacterController directCharacterController;

	[Token(Token = "0x40002EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Rigidbody directRigidBody;

	[Token(Token = "0x40002ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public float gravity;

	[Token(Token = "0x40002EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public KeyCode positivekey;

	[Token(Token = "0x40002EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public KeyCode negativeKey;

	[Token(Token = "0x17000031")]
	public Transform directTransform
	{
		[Token(Token = "0x60003DE")]
		[Address(RVA = "0xB19794", Offset = "0xB19794", VA = "0xB19794")]
		get
		{
			return null;
		}
		[Token(Token = "0x60003DF")]
		[Address(RVA = "0xB1979C", Offset = "0xB1979C", VA = "0xB1979C")]
		set
		{
		}
	}

	[Token(Token = "0x60003E0")]
	[Address(RVA = "0xB198A0", Offset = "0xB198A0", VA = "0xB198A0")]
	public ETCAxis(string axisName)
	{
	}

	[Token(Token = "0x60003E1")]
	[Address(RVA = "0xB19940", Offset = "0xB19940", VA = "0xB19940")]
	public void InitAxis()
	{
	}

	[Token(Token = "0x60003E2")]
	[Address(RVA = "0xB19AB8", Offset = "0xB19AB8", VA = "0xB19AB8")]
	public void UpdateAxis(float realValue, bool isOnDrag, ETCBase.ControlType type, bool deltaTime = true)
	{
	}

	[Token(Token = "0x60003E3")]
	[Address(RVA = "0xB19F58", Offset = "0xB19F58", VA = "0xB19F58")]
	public void UpdateButton()
	{
	}

	[Token(Token = "0x60003E4")]
	[Address(RVA = "0xB1A48C", Offset = "0xB1A48C", VA = "0xB1A48C")]
	public void ResetAxis()
	{
	}

	[Token(Token = "0x60003E5")]
	[Address(RVA = "0xB1A028", Offset = "0xB1A028", VA = "0xB1A028")]
	public void DoDirectAction()
	{
	}

	[Token(Token = "0x60003E6")]
	[Address(RVA = "0xB1A6DC", Offset = "0xB1A6DC", VA = "0xB1A6DC")]
	public void DoGravity()
	{
	}

	[Token(Token = "0x60003E7")]
	[Address(RVA = "0xB19E78", Offset = "0xB19E78", VA = "0xB19E78")]
	private void ComputAxisValue(float realValue, ETCBase.ControlType type, bool isOnDrag, bool deltaTime)
	{
	}

	[Token(Token = "0x60003E8")]
	[Address(RVA = "0xB1A4B0", Offset = "0xB1A4B0", VA = "0xB1A4B0")]
	private Vector3 GetInfluencedAxis()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60003E9")]
	[Address(RVA = "0xB19958", Offset = "0xB19958", VA = "0xB19958")]
	private float GetAngle()
	{
		return default(float);
	}

	[Token(Token = "0x60003EA")]
	[Address(RVA = "0xB19B9C", Offset = "0xB19B9C", VA = "0xB19B9C")]
	private void DoAutoStabilisation()
	{
	}

	[Token(Token = "0x60003EB")]
	[Address(RVA = "0xB1A5C4", Offset = "0xB1A5C4", VA = "0xB1A5C4")]
	private void DoAngleLimitation()
	{
	}
}
[Serializable]
[Token(Token = "0x200009D")]
public abstract class ETCBase : MonoBehaviour
{
	[Token(Token = "0x200009E")]
	public enum ControlType
	{
		[Token(Token = "0x400032E")]
		Joystick,
		[Token(Token = "0x400032F")]
		TouchPad,
		[Token(Token = "0x4000330")]
		DPad,
		[Token(Token = "0x4000331")]
		Button
	}

	[Token(Token = "0x200009F")]
	public enum RectAnchor
	{
		[Token(Token = "0x4000333")]
		UserDefined,
		[Token(Token = "0x4000334")]
		BottomLeft,
		[Token(Token = "0x4000335")]
		BottomCenter,
		[Token(Token = "0x4000336")]
		BottonRight,
		[Token(Token = "0x4000337")]
		CenterLeft,
		[Token(Token = "0x4000338")]
		Center,
		[Token(Token = "0x4000339")]
		CenterRight,
		[Token(Token = "0x400033A")]
		TopLeft,
		[Token(Token = "0x400033B")]
		TopCenter,
		[Token(Token = "0x400033C")]
		TopRight
	}

	[Token(Token = "0x20000A0")]
	public enum DPadAxis
	{
		[Token(Token = "0x400033E")]
		Two_Axis,
		[Token(Token = "0x400033F")]
		Four_Axis
	}

	[Token(Token = "0x20000A1")]
	[CompilerGenerated]
	private sealed class <UpdateVirtualControl>d__49 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ETCBase <>4__this;

		[Token(Token = "0x17000036")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000404")]
			[Address(RVA = "0xB1BEE0", Offset = "0xB1BEE0", VA = "0xB1BEE0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000037")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000406")]
			[Address(RVA = "0xB1BF28", Offset = "0xB1BF28", VA = "0xB1BF28", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000401")]
		[Address(RVA = "0xB1BBD8", Offset = "0xB1BBD8", VA = "0xB1BBD8")]
		[DebuggerHidden]
		public <UpdateVirtualControl>d__49(int <>1__state)
		{
		}

		[Token(Token = "0x6000402")]
		[Address(RVA = "0xB1BE2C", Offset = "0xB1BE2C", VA = "0xB1BE2C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000403")]
		[Address(RVA = "0xB1BE30", Offset = "0xB1BE30", VA = "0xB1BE30", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000405")]
		[Address(RVA = "0xB1BEE8", Offset = "0xB1BEE8", VA = "0xB1BEE8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000311")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected RectTransform cachedRectTransform;

	[Token(Token = "0x4000312")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected Canvas cachedRootCanvas;

	[Token(Token = "0x4000313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	protected RectAnchor _anchor;

	[Token(Token = "0x4000314")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	protected Vector2 _anchorOffet;

	[Token(Token = "0x4000315")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	protected bool _visible;

	[Token(Token = "0x4000316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	[SerializeField]
	protected bool _activated;

	[Token(Token = "0x4000317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int pointId;

	[Token(Token = "0x4000318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool enableKeySimulation;

	[Token(Token = "0x4000319")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	public bool allowSimulationStandalone;

	[Token(Token = "0x400031A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public DPadAxis dPadAxisCount;

	[Token(Token = "0x400031B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool useFixedUpdate;

	[Token(Token = "0x400031C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<RaycastResult> uiRaycastResultCache;

	[Token(Token = "0x400031D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private PointerEventData uiPointerEventData;

	[Token(Token = "0x400031E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private EventSystem uiEventSystem;

	[Token(Token = "0x400031F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool isOnDrag;

	[Token(Token = "0x4000320")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	public bool isSwipeIn;

	[Token(Token = "0x4000321")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
	public bool isSwipeOut;

	[Token(Token = "0x4000322")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
	public bool showPSInspector;

	[Token(Token = "0x4000323")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public bool showSpriteInspector;

	[Token(Token = "0x4000324")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
	public bool showEventInspector;

	[Token(Token = "0x4000325")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
	public bool showBehaviourInspector;

	[Token(Token = "0x4000326")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x67")]
	public bool showAxesInspector;

	[Token(Token = "0x4000327")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool showTouchEventInspector;

	[Token(Token = "0x4000328")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	public bool showDownEventInspector;

	[Token(Token = "0x4000329")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
	public bool showPressEventInspector;

	[Token(Token = "0x400032A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
	public bool isUnregisterAtDisable;

	[Token(Token = "0x400032B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool visibleAtStart;

	[Token(Token = "0x400032C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
	private bool activatedAtStart;

	[Token(Token = "0x17000032")]
	public RectAnchor anchor
	{
		[Token(Token = "0x60003EC")]
		[Address(RVA = "0xB1A7E8", Offset = "0xB1A7E8", VA = "0xB1A7E8")]
		get
		{
			return default(RectAnchor);
		}
		[Token(Token = "0x60003ED")]
		[Address(RVA = "0xB1A7F0", Offset = "0xB1A7F0", VA = "0xB1A7F0")]
		set
		{
		}
	}

	[Token(Token = "0x17000033")]
	public Vector2 anchorOffet
	{
		[Token(Token = "0x60003EE")]
		[Address(RVA = "0xB1ACDC", Offset = "0xB1ACDC", VA = "0xB1ACDC")]
		get
		{
			return default(Vector2);
		}
		[Token(Token = "0x60003EF")]
		[Address(RVA = "0xB1ACE4", Offset = "0xB1ACE4", VA = "0xB1ACE4")]
		set
		{
		}
	}

	[Token(Token = "0x17000034")]
	public bool visible
	{
		[Token(Token = "0x60003F0")]
		[Address(RVA = "0xB1AD18", Offset = "0xB1AD18", VA = "0xB1AD18")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60003F1")]
		[Address(RVA = "0xB1AD20", Offset = "0xB1AD20", VA = "0xB1AD20")]
		set
		{
		}
	}

	[Token(Token = "0x17000035")]
	public bool activated
	{
		[Token(Token = "0x60003F2")]
		[Address(RVA = "0xB1AD44", Offset = "0xB1AD44", VA = "0xB1AD44")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60003F3")]
		[Address(RVA = "0xB1AD4C", Offset = "0xB1AD4C", VA = "0xB1AD4C")]
		set
		{
		}
	}

	[Token(Token = "0x60003F4")]
	[Address(RVA = "0xB1AD70", Offset = "0xB1AD70", VA = "0xB1AD70", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x60003F5")]
	[Address(RVA = "0xB1B4E0", Offset = "0xB1B4E0", VA = "0xB1B4E0", Slot = "5")]
	public virtual void OnEnable()
	{
	}

	[Token(Token = "0x60003F6")]
	[Address(RVA = "0xB1B558", Offset = "0xB1B558", VA = "0xB1B558")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60003F7")]
	[Address(RVA = "0xB1B9FC", Offset = "0xB1B9FC", VA = "0xB1B9FC")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60003F8")]
	[Address(RVA = "0xB1BAA4", Offset = "0xB1BAA4", VA = "0xB1BAA4", Slot = "6")]
	public virtual void Update()
	{
	}

	[Token(Token = "0x60003F9")]
	[Address(RVA = "0xB1BB04", Offset = "0xB1BB04", VA = "0xB1BB04", Slot = "7")]
	public virtual void FixedUpdate()
	{
	}

	[Token(Token = "0x60003FA")]
	[Address(RVA = "0xB1BB64", Offset = "0xB1BB64", VA = "0xB1BB64")]
	[IteratorStateMachine(typeof(<UpdateVirtualControl>d__49))]
	private IEnumerator UpdateVirtualControl()
	{
		return null;
	}

	[Token(Token = "0x60003FB")]
	[Address(RVA = "0xB1BC00", Offset = "0xB1BC00", VA = "0xB1BC00", Slot = "8")]
	protected virtual void UpdateControlState()
	{
	}

	[Token(Token = "0x60003FC")]
	[Address(RVA = "0xB1BC04", Offset = "0xB1BC04", VA = "0xB1BC04", Slot = "9")]
	protected virtual void SetVisible()
	{
	}

	[Token(Token = "0x60003FD")]
	[Address(RVA = "0xB1BC08", Offset = "0xB1BC08", VA = "0xB1BC08", Slot = "10")]
	protected virtual void SetActivated()
	{
	}

	[Token(Token = "0x60003FE")]
	[Address(RVA = "0xB1A808", Offset = "0xB1A808", VA = "0xB1A808")]
	public void SetAnchorPosition()
	{
	}

	[Token(Token = "0x60003FF")]
	[Address(RVA = "0xB1BC0C", Offset = "0xB1BC0C", VA = "0xB1BC0C")]
	protected GameObject GetFirstUIElement(Vector2 position)
	{
		return null;
	}

	[Token(Token = "0x6000400")]
	[Address(RVA = "0xB1BD94", Offset = "0xB1BD94", VA = "0xB1BD94")]
	protected ETCBase()
	{
	}
}
[Serializable]
[Token(Token = "0x20000A2")]
public class ETCButton : ETCBase, IPointerEnterHandler, IEventSystemHandler, IPointerDownHandler, IPointerUpHandler, IPointerExitHandler
{
	[Serializable]
	[Token(Token = "0x20000A3")]
	public class OnDownHandler : UnityEvent
	{
		[Token(Token = "0x6000413")]
		[Address(RVA = "0xB1C6C0", Offset = "0xB1C6C0", VA = "0xB1C6C0")]
		public OnDownHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000A4")]
	public class OnPressedHandler : UnityEvent
	{
		[Token(Token = "0x6000414")]
		[Address(RVA = "0xB1C6C8", Offset = "0xB1C6C8", VA = "0xB1C6C8")]
		public OnPressedHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000A5")]
	public class OnPressedValueandler : UnityEvent<float>
	{
		[Token(Token = "0x6000415")]
		[Address(RVA = "0xB1C6D0", Offset = "0xB1C6D0", VA = "0xB1C6D0")]
		public OnPressedValueandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000A6")]
	public class OnUPHandler : UnityEvent
	{
		[Token(Token = "0x6000416")]
		[Address(RVA = "0xB1C718", Offset = "0xB1C718", VA = "0xB1C718")]
		public OnUPHandler()
		{
		}
	}

	[Token(Token = "0x4000343")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	public OnDownHandler onDown;

	[Token(Token = "0x4000344")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	public OnPressedHandler onPressed;

	[Token(Token = "0x4000345")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	public OnPressedValueandler onPressedValue;

	[Token(Token = "0x4000346")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	public OnUPHandler onUp;

	[Token(Token = "0x4000347")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public ETCAxis axis;

	[Token(Token = "0x4000348")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Sprite normalSprite;

	[Token(Token = "0x4000349")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Color normalColor;

	[Token(Token = "0x400034A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Sprite pressedSprite;

	[Token(Token = "0x400034B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Color pressedColor;

	[Token(Token = "0x400034C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Image cachedImage;

	[Token(Token = "0x400034D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private bool isOnPress;

	[Token(Token = "0x400034E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private GameObject previousDargObject;

	[Token(Token = "0x400034F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private bool isOnTouch;

	[Token(Token = "0x6000407")]
	[Address(RVA = "0xB1BF30", Offset = "0xB1BF30", VA = "0xB1BF30")]
	public ETCButton()
	{
	}

	[Token(Token = "0x6000408")]
	[Address(RVA = "0xB1BFE4", Offset = "0xB1BFE4", VA = "0xB1BFE4", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000409")]
	[Address(RVA = "0xB1C044", Offset = "0xB1C044", VA = "0xB1C044")]
	private void Start()
	{
	}

	[Token(Token = "0x600040A")]
	[Address(RVA = "0xB1C04C", Offset = "0xB1C04C", VA = "0xB1C04C", Slot = "8")]
	protected override void UpdateControlState()
	{
	}

	[Token(Token = "0x600040B")]
	[Address(RVA = "0xB1C1A4", Offset = "0xB1C1A4", VA = "0xB1C1A4", Slot = "11")]
	public void OnPointerEnter(PointerEventData eventData)
	{
	}

	[Token(Token = "0x600040C")]
	[Address(RVA = "0xB1C31C", Offset = "0xB1C31C", VA = "0xB1C31C", Slot = "12")]
	public void OnPointerDown(PointerEventData eventData)
	{
	}

	[Token(Token = "0x600040D")]
	[Address(RVA = "0xB1C484", Offset = "0xB1C484", VA = "0xB1C484", Slot = "13")]
	public void OnPointerUp(PointerEventData eventData)
	{
	}

	[Token(Token = "0x600040E")]
	[Address(RVA = "0xB1C5E4", Offset = "0xB1C5E4", VA = "0xB1C5E4", Slot = "14")]
	public void OnPointerExit(PointerEventData eventData)
	{
	}

	[Token(Token = "0x600040F")]
	[Address(RVA = "0xB1C050", Offset = "0xB1C050", VA = "0xB1C050")]
	private void UpdateButton()
	{
	}

	[Token(Token = "0x6000410")]
	[Address(RVA = "0xB1C62C", Offset = "0xB1C62C", VA = "0xB1C62C", Slot = "9")]
	protected override void SetVisible()
	{
	}

	[Token(Token = "0x6000411")]
	[Address(RVA = "0xB1C3A0", Offset = "0xB1C3A0", VA = "0xB1C3A0")]
	private void ApllyState()
	{
	}

	[Token(Token = "0x6000412")]
	[Address(RVA = "0xB1C688", Offset = "0xB1C688", VA = "0xB1C688", Slot = "10")]
	protected override void SetActivated()
	{
	}
}
[Token(Token = "0x20000A7")]
public class ETCDPad : ETCBase, IDragHandler, IEventSystemHandler, IPointerDownHandler, IPointerUpHandler
{
	[Serializable]
	[Token(Token = "0x20000A8")]
	public class OnMoveStartHandler : UnityEvent
	{
		[Token(Token = "0x6000421")]
		[Address(RVA = "0xB1D2D8", Offset = "0xB1D2D8", VA = "0xB1D2D8")]
		public OnMoveStartHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000A9")]
	public class OnMoveHandler : UnityEvent<Vector2>
	{
		[Token(Token = "0x6000422")]
		[Address(RVA = "0xB1D2E0", Offset = "0xB1D2E0", VA = "0xB1D2E0")]
		public OnMoveHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000AA")]
	public class OnMoveSpeedHandler : UnityEvent<Vector2>
	{
		[Token(Token = "0x6000423")]
		[Address(RVA = "0xB1D328", Offset = "0xB1D328", VA = "0xB1D328")]
		public OnMoveSpeedHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000AB")]
	public class OnMoveEndHandler : UnityEvent
	{
		[Token(Token = "0x6000424")]
		[Address(RVA = "0xB1D370", Offset = "0xB1D370", VA = "0xB1D370")]
		public OnMoveEndHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000AC")]
	public class OnTouchStartHandler : UnityEvent
	{
		[Token(Token = "0x6000425")]
		[Address(RVA = "0xB1D378", Offset = "0xB1D378", VA = "0xB1D378")]
		public OnTouchStartHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000AD")]
	public class OnTouchUPHandler : UnityEvent
	{
		[Token(Token = "0x6000426")]
		[Address(RVA = "0xB1D380", Offset = "0xB1D380", VA = "0xB1D380")]
		public OnTouchUPHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000AE")]
	public class OnDownUpHandler : UnityEvent
	{
		[Token(Token = "0x6000427")]
		[Address(RVA = "0xB1D388", Offset = "0xB1D388", VA = "0xB1D388")]
		public OnDownUpHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000AF")]
	public class OnDownDownHandler : UnityEvent
	{
		[Token(Token = "0x6000428")]
		[Address(RVA = "0xB1D390", Offset = "0xB1D390", VA = "0xB1D390")]
		public OnDownDownHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000B0")]
	public class OnDownLeftHandler : UnityEvent
	{
		[Token(Token = "0x6000429")]
		[Address(RVA = "0xB1D398", Offset = "0xB1D398", VA = "0xB1D398")]
		public OnDownLeftHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000B1")]
	public class OnDownRightHandler : UnityEvent
	{
		[Token(Token = "0x600042A")]
		[Address(RVA = "0xB1D3A0", Offset = "0xB1D3A0", VA = "0xB1D3A0")]
		public OnDownRightHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000B2")]
	public class OnPressUpHandler : UnityEvent
	{
		[Token(Token = "0x600042B")]
		[Address(RVA = "0xB1D3A8", Offset = "0xB1D3A8", VA = "0xB1D3A8")]
		public OnPressUpHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000B3")]
	public class OnPressDownHandler : UnityEvent
	{
		[Token(Token = "0x600042C")]
		[Address(RVA = "0xB1D3B0", Offset = "0xB1D3B0", VA = "0xB1D3B0")]
		public OnPressDownHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000B4")]
	public class OnPressLeftHandler : UnityEvent
	{
		[Token(Token = "0x600042D")]
		[Address(RVA = "0xB1D3B8", Offset = "0xB1D3B8", VA = "0xB1D3B8")]
		public OnPressLeftHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000B5")]
	public class OnPressRightHandler : UnityEvent
	{
		[Token(Token = "0x600042E")]
		[Address(RVA = "0xB1D3C0", Offset = "0xB1D3C0", VA = "0xB1D3C0")]
		public OnPressRightHandler()
		{
		}
	}

	[Token(Token = "0x4000350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	public OnMoveStartHandler onMoveStart;

	[Token(Token = "0x4000351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	public OnMoveHandler onMove;

	[Token(Token = "0x4000352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	public OnMoveSpeedHandler onMoveSpeed;

	[Token(Token = "0x4000353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	public OnMoveEndHandler onMoveEnd;

	[Token(Token = "0x4000354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	public OnTouchStartHandler onTouchStart;

	[Token(Token = "0x4000355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	public OnTouchUPHandler onTouchUp;

	[Token(Token = "0x4000356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	public OnDownUpHandler OnDownUp;

	[Token(Token = "0x4000357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	public OnDownDownHandler OnDownDown;

	[Token(Token = "0x4000358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	public OnDownLeftHandler OnDownLeft;

	[Token(Token = "0x4000359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	public OnDownRightHandler OnDownRight;

	[Token(Token = "0x400035A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	public OnDownUpHandler OnPressUp;

	[Token(Token = "0x400035B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	public OnDownDownHandler OnPressDown;

	[Token(Token = "0x400035C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	public OnDownLeftHandler OnPressLeft;

	[Token(Token = "0x400035D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[SerializeField]
	public OnDownRightHandler OnPressRight;

	[Token(Token = "0x400035E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public ETCAxis axisX;

	[Token(Token = "0x400035F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public ETCAxis axisY;

	[Token(Token = "0x4000360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public Sprite normalSprite;

	[Token(Token = "0x4000361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public Color normalColor;

	[Token(Token = "0x4000362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public Sprite pressedSprite;

	[Token(Token = "0x4000363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public Color pressedColor;

	[Token(Token = "0x4000364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private Vector2 tmpAxis;

	[Token(Token = "0x4000365")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private Vector2 OldTmpAxis;

	[Token(Token = "0x4000366")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	private bool isOnTouch;

	[Token(Token = "0x4000367")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private Image cachedImage;

	[Token(Token = "0x6000417")]
	[Address(RVA = "0xB1C720", Offset = "0xB1C720", VA = "0xB1C720")]
	public ETCDPad()
	{
	}

	[Token(Token = "0x6000418")]
	[Address(RVA = "0xB1C868", Offset = "0xB1C868", VA = "0xB1C868")]
	private void Start()
	{
	}

	[Token(Token = "0x6000419")]
	[Address(RVA = "0xB1C8F0", Offset = "0xB1C8F0", VA = "0xB1C8F0", Slot = "8")]
	protected override void UpdateControlState()
	{
	}

	[Token(Token = "0x600041A")]
	[Address(RVA = "0xB1CDD0", Offset = "0xB1CDD0", VA = "0xB1CDD0", Slot = "12")]
	public void OnPointerDown(PointerEventData eventData)
	{
	}

	[Token(Token = "0x600041B")]
	[Address(RVA = "0xB1D07C", Offset = "0xB1D07C", VA = "0xB1D07C", Slot = "11")]
	public void OnDrag(PointerEventData eventData)
	{
	}

	[Token(Token = "0x600041C")]
	[Address(RVA = "0xB1D0F0", Offset = "0xB1D0F0", VA = "0xB1D0F0", Slot = "13")]
	public void OnPointerUp(PointerEventData eventData)
	{
	}

	[Token(Token = "0x600041D")]
	[Address(RVA = "0xB1C8F4", Offset = "0xB1C8F4", VA = "0xB1C8F4")]
	private void UpdateDPad()
	{
	}

	[Token(Token = "0x600041E")]
	[Address(RVA = "0xB1D1D0", Offset = "0xB1D1D0", VA = "0xB1D1D0", Slot = "9")]
	protected override void SetVisible()
	{
	}

	[Token(Token = "0x600041F")]
	[Address(RVA = "0xB1D22C", Offset = "0xB1D22C", VA = "0xB1D22C", Slot = "10")]
	protected override void SetActivated()
	{
	}

	[Token(Token = "0x6000420")]
	[Address(RVA = "0xB1CE58", Offset = "0xB1CE58", VA = "0xB1CE58")]
	private void GetTouchDirection(Vector2 position, Camera cam)
	{
	}
}
[Token(Token = "0x20000B6")]
public class ETCInput : MonoBehaviour
{
	[Token(Token = "0x4000368")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static ETCInput _instance;

	[Token(Token = "0x4000369")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Dictionary<string, ETCAxis> axes;

	[Token(Token = "0x400036A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Dictionary<string, ETCBase> controls;

	[Token(Token = "0x400036B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static ETCBase control;

	[Token(Token = "0x400036C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static ETCAxis axis;

	[Token(Token = "0x17000038")]
	public static ETCInput instance
	{
		[Token(Token = "0x600042F")]
		[Address(RVA = "0xB1AE80", Offset = "0xB1AE80", VA = "0xB1AE80")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000430")]
	[Address(RVA = "0xB1B0A4", Offset = "0xB1B0A4", VA = "0xB1B0A4")]
	public void RegisterControl(ETCBase ctrl)
	{
	}

	[Token(Token = "0x6000431")]
	[Address(RVA = "0xB1B644", Offset = "0xB1B644", VA = "0xB1B644")]
	public void UnRegisterControl(ETCBase ctrl)
	{
	}

	[Token(Token = "0x6000432")]
	[Address(RVA = "0xB1D574", Offset = "0xB1D574", VA = "0xB1D574")]
	public void Create()
	{
	}

	[Token(Token = "0x6000433")]
	[Address(RVA = "0xB1D578", Offset = "0xB1D578", VA = "0xB1D578")]
	public static void SetControlVisible(string ctrlName, bool value)
	{
	}

	[Token(Token = "0x6000434")]
	[Address(RVA = "0xB1D6B4", Offset = "0xB1D6B4", VA = "0xB1D6B4")]
	public static bool GetControlVisible(string ctrlName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000435")]
	[Address(RVA = "0xB1D7D0", Offset = "0xB1D7D0", VA = "0xB1D7D0")]
	public static void SetControlActivated(string ctrlName, bool value)
	{
	}

	[Token(Token = "0x6000436")]
	[Address(RVA = "0xB1D90C", Offset = "0xB1D90C", VA = "0xB1D90C")]
	public static bool GetControlActivated(string ctrlName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000437")]
	[Address(RVA = "0xB1DA28", Offset = "0xB1DA28", VA = "0xB1DA28")]
	public static void SetControlSwipeIn(string ctrlName, bool value)
	{
	}

	[Token(Token = "0x6000438")]
	[Address(RVA = "0xB1DB44", Offset = "0xB1DB44", VA = "0xB1DB44")]
	public static bool GetControlSwipeIn(string ctrlName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000439")]
	[Address(RVA = "0xB1DC60", Offset = "0xB1DC60", VA = "0xB1DC60")]
	public static void SetControlSwipeOut(string ctrlName, bool value)
	{
	}

	[Token(Token = "0x600043A")]
	[Address(RVA = "0xB1DD7C", Offset = "0xB1DD7C", VA = "0xB1DD7C")]
	public static bool GetControlSwipeOut(string ctrlName, bool value)
	{
		return default(bool);
	}

	[Token(Token = "0x600043B")]
	[Address(RVA = "0xB1DE98", Offset = "0xB1DE98", VA = "0xB1DE98")]
	public static void SetDPadAxesCount(string ctrlName, ETCBase.DPadAxis value)
	{
	}

	[Token(Token = "0x600043C")]
	[Address(RVA = "0xB1DFB0", Offset = "0xB1DFB0", VA = "0xB1DFB0")]
	public static ETCBase.DPadAxis GetDPadAxesCount(string ctrlName)
	{
		return default(ETCBase.DPadAxis);
	}

	[Token(Token = "0x600043D")]
	[Address(RVA = "0xB1E0C4", Offset = "0xB1E0C4", VA = "0xB1E0C4")]
	public static void ResetAxis(string axisName)
	{
	}

	[Token(Token = "0x600043E")]
	[Address(RVA = "0xB1E1D8", Offset = "0xB1E1D8", VA = "0xB1E1D8")]
	public static void SetAxisEnabled(string axisName, bool value)
	{
	}

	[Token(Token = "0x600043F")]
	[Address(RVA = "0xB1E2F4", Offset = "0xB1E2F4", VA = "0xB1E2F4")]
	public static bool GetAxisEnabled(string axisName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000440")]
	[Address(RVA = "0xB1E410", Offset = "0xB1E410", VA = "0xB1E410")]
	public static void SetAxisInverted(string axisName, bool value)
	{
	}

	[Token(Token = "0x6000441")]
	[Address(RVA = "0xB1E52C", Offset = "0xB1E52C", VA = "0xB1E52C")]
	public static bool GetAxisInverted(string axisName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000442")]
	[Address(RVA = "0xB1E648", Offset = "0xB1E648", VA = "0xB1E648")]
	public static void SetAxisDeadValue(string axisName, float value)
	{
	}

	[Token(Token = "0x6000443")]
	[Address(RVA = "0xB1E76C", Offset = "0xB1E76C", VA = "0xB1E76C")]
	public static float GetAxisDeadValue(string axisName)
	{
		return default(float);
	}

	[Token(Token = "0x6000444")]
	[Address(RVA = "0xB1E880", Offset = "0xB1E880", VA = "0xB1E880")]
	public static void SetAxisSensitivity(string axisName, float value)
	{
	}

	[Token(Token = "0x6000445")]
	[Address(RVA = "0xB1E9A4", Offset = "0xB1E9A4", VA = "0xB1E9A4")]
	public static float GetAxisSensitivity(string axisName)
	{
		return default(float);
	}

	[Token(Token = "0x6000446")]
	[Address(RVA = "0xB1EAB8", Offset = "0xB1EAB8", VA = "0xB1EAB8")]
	public static void SetAxisThreshold(string axisName, float value)
	{
	}

	[Token(Token = "0x6000447")]
	[Address(RVA = "0xB1EBDC", Offset = "0xB1EBDC", VA = "0xB1EBDC")]
	public static float GetAxisThreshold(string axisName)
	{
		return default(float);
	}

	[Token(Token = "0x6000448")]
	[Address(RVA = "0xB1ECF0", Offset = "0xB1ECF0", VA = "0xB1ECF0")]
	public static void SetAxisInertia(string axisName, bool value)
	{
	}

	[Token(Token = "0x6000449")]
	[Address(RVA = "0xB1EE0C", Offset = "0xB1EE0C", VA = "0xB1EE0C")]
	public static bool GetAxisInertia(string axisName)
	{
		return default(bool);
	}

	[Token(Token = "0x600044A")]
	[Address(RVA = "0xB1EF28", Offset = "0xB1EF28", VA = "0xB1EF28")]
	public static void SetAxisInertiaSpeed(string axisName, float value)
	{
	}

	[Token(Token = "0x600044B")]
	[Address(RVA = "0xB1F04C", Offset = "0xB1F04C", VA = "0xB1F04C")]
	public static float GetAxisInertiaSpeed(string axisName)
	{
		return default(float);
	}

	[Token(Token = "0x600044C")]
	[Address(RVA = "0xB1F160", Offset = "0xB1F160", VA = "0xB1F160")]
	public static void SetAxisInertiaThreshold(string axisName, float value)
	{
	}

	[Token(Token = "0x600044D")]
	[Address(RVA = "0xB1F284", Offset = "0xB1F284", VA = "0xB1F284")]
	public static float GetAxisInertiaThreshold(string axisName)
	{
		return default(float);
	}

	[Token(Token = "0x600044E")]
	[Address(RVA = "0xB1F398", Offset = "0xB1F398", VA = "0xB1F398")]
	public static void SetAxisAutoStabilization(string axisName, bool value)
	{
	}

	[Token(Token = "0x600044F")]
	[Address(RVA = "0xB1F4B4", Offset = "0xB1F4B4", VA = "0xB1F4B4")]
	public static bool GetAxisAutoStabilization(string axisName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000450")]
	[Address(RVA = "0xB1F5D0", Offset = "0xB1F5D0", VA = "0xB1F5D0")]
	public static void SetAxisAutoStabilizationSpeed(string axisName, float value)
	{
	}

	[Token(Token = "0x6000451")]
	[Address(RVA = "0xB1F6F4", Offset = "0xB1F6F4", VA = "0xB1F6F4")]
	public static float GetAxisAutoStabilizationSpeed(string axisName)
	{
		return default(float);
	}

	[Token(Token = "0x6000452")]
	[Address(RVA = "0xB1F808", Offset = "0xB1F808", VA = "0xB1F808")]
	public static void SetAxisAutoStabilizationThreshold(string axisName, float value)
	{
	}

	[Token(Token = "0x6000453")]
	[Address(RVA = "0xB1F92C", Offset = "0xB1F92C", VA = "0xB1F92C")]
	public static float GetAxisAutoStabilizationThreshold(string axisName)
	{
		return default(float);
	}

	[Token(Token = "0x6000454")]
	[Address(RVA = "0xB1FA40", Offset = "0xB1FA40", VA = "0xB1FA40")]
	public static void SetAxisClampRotation(string axisName, bool value)
	{
	}

	[Token(Token = "0x6000455")]
	[Address(RVA = "0xB1FB5C", Offset = "0xB1FB5C", VA = "0xB1FB5C")]
	public static bool GetAxisClampRotation(string axisName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000456")]
	[Address(RVA = "0xB1FC78", Offset = "0xB1FC78", VA = "0xB1FC78")]
	public static void SetAxisClampRotationValue(string axisName, float min, float max)
	{
	}

	[Token(Token = "0x6000457")]
	[Address(RVA = "0xB1FDA0", Offset = "0xB1FDA0", VA = "0xB1FDA0")]
	public static void SetAxisClampRotationMinValue(string axisName, float value)
	{
	}

	[Token(Token = "0x6000458")]
	[Address(RVA = "0xB1FEC4", Offset = "0xB1FEC4", VA = "0xB1FEC4")]
	public static void SetAxisClampRotationMaxValue(string axisName, float value)
	{
	}

	[Token(Token = "0x6000459")]
	[Address(RVA = "0xB1FFE8", Offset = "0xB1FFE8", VA = "0xB1FFE8")]
	public static float GetAxisClampRotationMinValue(string axisName)
	{
		return default(float);
	}

	[Token(Token = "0x600045A")]
	[Address(RVA = "0xB200FC", Offset = "0xB200FC", VA = "0xB200FC")]
	public static float GetAxisClampRotationMaxValue(string axisName)
	{
		return default(float);
	}

	[Token(Token = "0x600045B")]
	[Address(RVA = "0xB20210", Offset = "0xB20210", VA = "0xB20210")]
	public static void SetAxisDirecTransform(string axisName, Transform value)
	{
	}

	[Token(Token = "0x600045C")]
	[Address(RVA = "0xB20328", Offset = "0xB20328", VA = "0xB20328")]
	public static Transform GetAxisDirectTransform(string axisName)
	{
		return null;
	}

	[Token(Token = "0x600045D")]
	[Address(RVA = "0xB2043C", Offset = "0xB2043C", VA = "0xB2043C")]
	public static void SetAxisDirectAction(string axisName, ETCAxis.DirectAction value)
	{
	}

	[Token(Token = "0x600045E")]
	[Address(RVA = "0xB20554", Offset = "0xB20554", VA = "0xB20554")]
	public static ETCAxis.DirectAction GetAxisDirectAction(string axisName)
	{
		return default(ETCAxis.DirectAction);
	}

	[Token(Token = "0x600045F")]
	[Address(RVA = "0xB20668", Offset = "0xB20668", VA = "0xB20668")]
	public static void SetAxisAffectedAxis(string axisName, ETCAxis.AxisInfluenced value)
	{
	}

	[Token(Token = "0x6000460")]
	[Address(RVA = "0xB20780", Offset = "0xB20780", VA = "0xB20780")]
	public static ETCAxis.AxisInfluenced GetAxisAffectedAxis(string axisName)
	{
		return default(ETCAxis.AxisInfluenced);
	}

	[Token(Token = "0x6000461")]
	[Address(RVA = "0xB20894", Offset = "0xB20894", VA = "0xB20894")]
	public static void SetAxisOverTime(string axisName, bool value)
	{
	}

	[Token(Token = "0x6000462")]
	[Address(RVA = "0xB209B0", Offset = "0xB209B0", VA = "0xB209B0")]
	public static bool GetAxisOverTime(string axisName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000463")]
	[Address(RVA = "0xB20ACC", Offset = "0xB20ACC", VA = "0xB20ACC")]
	public static void SetAxisOverTimeStep(string axisName, float value)
	{
	}

	[Token(Token = "0x6000464")]
	[Address(RVA = "0xB20BF0", Offset = "0xB20BF0", VA = "0xB20BF0")]
	public static float GetAxisOverTimeStep(string axisName)
	{
		return default(float);
	}

	[Token(Token = "0x6000465")]
	[Address(RVA = "0xB20D04", Offset = "0xB20D04", VA = "0xB20D04")]
	public static void SetAxisOverTimeMaxValue(string axisName, float value)
	{
	}

	[Token(Token = "0x6000466")]
	[Address(RVA = "0xB20E28", Offset = "0xB20E28", VA = "0xB20E28")]
	public static float GetAxisOverTimeMaxValue(string axisName)
	{
		return default(float);
	}

	[Token(Token = "0x6000467")]
	[Address(RVA = "0xB20F3C", Offset = "0xB20F3C", VA = "0xB20F3C")]
	public static float GetAxis(string axisName)
	{
		return default(float);
	}

	[Token(Token = "0x6000468")]
	[Address(RVA = "0xB21050", Offset = "0xB21050", VA = "0xB21050")]
	public static float GetAxisSpeed(string axisName)
	{
		return default(float);
	}

	[Token(Token = "0x6000469")]
	[Address(RVA = "0xB2114C", Offset = "0xB2114C", VA = "0xB2114C")]
	public static bool GetAxisDownUp(string axisName)
	{
		return default(bool);
	}

	[Token(Token = "0x600046A")]
	[Address(RVA = "0xB21250", Offset = "0xB21250", VA = "0xB21250")]
	public static bool GetAxisDownDown(string axisName)
	{
		return default(bool);
	}

	[Token(Token = "0x600046B")]
	[Address(RVA = "0xB21354", Offset = "0xB21354", VA = "0xB21354")]
	public static bool GetAxisDownRight(string axisName)
	{
		return default(bool);
	}

	[Token(Token = "0x600046C")]
	[Address(RVA = "0xB21458", Offset = "0xB21458", VA = "0xB21458")]
	public static bool GetAxisDownLeft(string axisName)
	{
		return default(bool);
	}

	[Token(Token = "0x600046D")]
	[Address(RVA = "0xB2155C", Offset = "0xB2155C", VA = "0xB2155C")]
	public static bool GetAxisPressedUp(string axisName)
	{
		return default(bool);
	}

	[Token(Token = "0x600046E")]
	[Address(RVA = "0xB21660", Offset = "0xB21660", VA = "0xB21660")]
	public static bool GetAxisPressedDown(string axisName)
	{
		return default(bool);
	}

	[Token(Token = "0x600046F")]
	[Address(RVA = "0xB21764", Offset = "0xB21764", VA = "0xB21764")]
	public static bool GetAxisPressedRight(string axisName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000470")]
	[Address(RVA = "0xB21868", Offset = "0xB21868", VA = "0xB21868")]
	public static bool GetAxisPressedLeft(string axisName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000471")]
	[Address(RVA = "0xB2196C", Offset = "0xB2196C", VA = "0xB2196C")]
	public static bool GetButtonDown(string buttonName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000472")]
	[Address(RVA = "0xB21A70", Offset = "0xB21A70", VA = "0xB21A70")]
	public static bool GetButton(string buttonName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000473")]
	[Address(RVA = "0xB21B84", Offset = "0xB21B84", VA = "0xB21B84")]
	public static bool GetButtonUp(string buttonName)
	{
		return default(bool);
	}

	[Token(Token = "0x6000474")]
	[Address(RVA = "0xB21C88", Offset = "0xB21C88", VA = "0xB21C88")]
	public static float GetButtonValue(string buttonName)
	{
		return default(float);
	}

	[Token(Token = "0x6000475")]
	[Address(RVA = "0xB1D3C8", Offset = "0xB1D3C8", VA = "0xB1D3C8")]
	private void RegisterAxis(ETCAxis axis)
	{
	}

	[Token(Token = "0x6000476")]
	[Address(RVA = "0xB1D4D8", Offset = "0xB1D4D8", VA = "0xB1D4D8")]
	private void UnRegisterAxis(ETCAxis axis)
	{
	}

	[Token(Token = "0x6000477")]
	[Address(RVA = "0xB21D84", Offset = "0xB21D84", VA = "0xB21D84")]
	public ETCInput()
	{
	}
}
[Serializable]
[Token(Token = "0x20000B7")]
public class ETCJoystick : ETCBase, IPointerEnterHandler, IEventSystemHandler, IDragHandler, IBeginDragHandler, IPointerDownHandler, IPointerUpHandler
{
	[Serializable]
	[Token(Token = "0x20000B8")]
	public class OnMoveStartHandler : UnityEvent
	{
		[Token(Token = "0x600048E")]
		[Address(RVA = "0xB233C0", Offset = "0xB233C0", VA = "0xB233C0")]
		public OnMoveStartHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000B9")]
	public class OnMoveSpeedHandler : UnityEvent<Vector2>
	{
		[Token(Token = "0x600048F")]
		[Address(RVA = "0xB233C8", Offset = "0xB233C8", VA = "0xB233C8")]
		public OnMoveSpeedHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000BA")]
	public class OnMoveHandler : UnityEvent<Vector2>
	{
		[Token(Token = "0x6000490")]
		[Address(RVA = "0xB23410", Offset = "0xB23410", VA = "0xB23410")]
		public OnMoveHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000BB")]
	public class OnMoveEndHandler : UnityEvent
	{
		[Token(Token = "0x6000491")]
		[Address(RVA = "0xB23458", Offset = "0xB23458", VA = "0xB23458")]
		public OnMoveEndHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000BC")]
	public class OnTouchStartHandler : UnityEvent
	{
		[Token(Token = "0x6000492")]
		[Address(RVA = "0xB23460", Offset = "0xB23460", VA = "0xB23460")]
		public OnTouchStartHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000BD")]
	public class OnTouchUpHandler : UnityEvent
	{
		[Token(Token = "0x6000493")]
		[Address(RVA = "0xB23468", Offset = "0xB23468", VA = "0xB23468")]
		public OnTouchUpHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000BE")]
	public class OnDownUpHandler : UnityEvent
	{
		[Token(Token = "0x6000494")]
		[Address(RVA = "0xB23470", Offset = "0xB23470", VA = "0xB23470")]
		public OnDownUpHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000BF")]
	public class OnDownDownHandler : UnityEvent
	{
		[Token(Token = "0x6000495")]
		[Address(RVA = "0xB23478", Offset = "0xB23478", VA = "0xB23478")]
		public OnDownDownHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000C0")]
	public class OnDownLeftHandler : UnityEvent
	{
		[Token(Token = "0x6000496")]
		[Address(RVA = "0xB23480", Offset = "0xB23480", VA = "0xB23480")]
		public OnDownLeftHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000C1")]
	public class OnDownRightHandler : UnityEvent
	{
		[Token(Token = "0x6000497")]
		[Address(RVA = "0xB23488", Offset = "0xB23488", VA = "0xB23488")]
		public OnDownRightHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000C2")]
	public class OnPressUpHandler : UnityEvent
	{
		[Token(Token = "0x6000498")]
		[Address(RVA = "0xB23490", Offset = "0xB23490", VA = "0xB23490")]
		public OnPressUpHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000C3")]
	public class OnPressDownHandler : UnityEvent
	{
		[Token(Token = "0x6000499")]
		[Address(RVA = "0xB23498", Offset = "0xB23498", VA = "0xB23498")]
		public OnPressDownHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000C4")]
	public class OnPressLeftHandler : UnityEvent
	{
		[Token(Token = "0x600049A")]
		[Address(RVA = "0xB234A0", Offset = "0xB234A0", VA = "0xB234A0")]
		public OnPressLeftHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000C5")]
	public class OnPressRightHandler : UnityEvent
	{
		[Token(Token = "0x600049B")]
		[Address(RVA = "0xB234A8", Offset = "0xB234A8", VA = "0xB234A8")]
		public OnPressRightHandler()
		{
		}
	}

	[Token(Token = "0x20000C6")]
	public enum JoystickArea
	{
		[Token(Token = "0x400038D")]
		UserDefined,
		[Token(Token = "0x400038E")]
		FullScreen,
		[Token(Token = "0x400038F")]
		Left,
		[Token(Token = "0x4000390")]
		Right,
		[Token(Token = "0x4000391")]
		Top,
		[Token(Token = "0x4000392")]
		Bottom,
		[Token(Token = "0x4000393")]
		TopLeft,
		[Token(Token = "0x4000394")]
		TopRight,
		[Token(Token = "0x4000395")]
		BottomLeft,
		[Token(Token = "0x4000396")]
		BottomRight
	}

	[Token(Token = "0x20000C7")]
	public enum JoystickType
	{
		[Token(Token = "0x4000398")]
		Dynamic,
		[Token(Token = "0x4000399")]
		Static
	}

	[Token(Token = "0x20000C8")]
	public enum RadiusBase
	{
		[Token(Token = "0x400039B")]
		Width,
		[Token(Token = "0x400039C")]
		Height
	}

	[Token(Token = "0x400036D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	public OnMoveStartHandler onMoveStart;

	[Token(Token = "0x400036E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	public OnMoveHandler onMove;

	[Token(Token = "0x400036F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	public OnMoveSpeedHandler onMoveSpeed;

	[Token(Token = "0x4000370")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	public OnMoveEndHandler onMoveEnd;

	[Token(Token = "0x4000371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	public OnTouchStartHandler onTouchStart;

	[Token(Token = "0x4000372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	public OnTouchUpHandler onTouchUp;

	[Token(Token = "0x4000373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	public OnDownUpHandler OnDownUp;

	[Token(Token = "0x4000374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	public OnDownDownHandler OnDownDown;

	[Token(Token = "0x4000375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	public OnDownLeftHandler OnDownLeft;

	[Token(Token = "0x4000376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	public OnDownRightHandler OnDownRight;

	[Token(Token = "0x4000377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	public OnDownUpHandler OnPressUp;

	[Token(Token = "0x4000378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	public OnDownDownHandler OnPressDown;

	[Token(Token = "0x4000379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	public OnDownLeftHandler OnPressLeft;

	[Token(Token = "0x400037A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[SerializeField]
	public OnDownRightHandler OnPressRight;

	[Token(Token = "0x400037B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public JoystickType joystickType;

	[Token(Token = "0x400037C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	public bool allowJoystickOverTouchPad;

	[Token(Token = "0x400037D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public RadiusBase radiusBase;

	[Token(Token = "0x400037E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public ETCAxis axisX;

	[Token(Token = "0x400037F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public ETCAxis axisY;

	[Token(Token = "0x4000380")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public RectTransform thumb;

	[Token(Token = "0x4000381")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public JoystickArea joystickArea;

	[Token(Token = "0x4000382")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public RectTransform userArea;

	[Token(Token = "0x4000383")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private Vector2 thumbPosition;

	[Token(Token = "0x4000384")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	private bool isDynamicActif;

	[Token(Token = "0x4000385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
	private Vector2 tmpAxis;

	[Token(Token = "0x4000386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
	private Vector2 OldTmpAxis;

	[Token(Token = "0x4000387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
	private bool isOnTouch;

	[Token(Token = "0x4000388")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x135")]
	[SerializeField]
	private bool isNoReturnThumb;

	[Token(Token = "0x4000389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private Vector2 noReturnPosition;

	[Token(Token = "0x400038A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	private Vector2 noReturnOffset;

	[Token(Token = "0x400038B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	[SerializeField]
	private bool isNoOffsetThumb;

	[Token(Token = "0x17000039")]
	public bool IsNoReturnThumb
	{
		[Token(Token = "0x6000478")]
		[Address(RVA = "0xB21E5C", Offset = "0xB21E5C", VA = "0xB21E5C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000479")]
		[Address(RVA = "0xB21E64", Offset = "0xB21E64", VA = "0xB21E64")]
		set
		{
		}
	}

	[Token(Token = "0x1700003A")]
	public bool IsNoOffsetThumb
	{
		[Token(Token = "0x600047A")]
		[Address(RVA = "0xB21E70", Offset = "0xB21E70", VA = "0xB21E70")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600047B")]
		[Address(RVA = "0xB21E78", Offset = "0xB21E78", VA = "0xB21E78")]
		set
		{
		}
	}

	[Token(Token = "0x600047C")]
	[Address(RVA = "0xB21E84", Offset = "0xB21E84", VA = "0xB21E84")]
	public ETCJoystick()
	{
	}

	[Token(Token = "0x600047D")]
	[Address(RVA = "0xB21FB8", Offset = "0xB21FB8", VA = "0xB21FB8", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x600047E")]
	[Address(RVA = "0xB22044", Offset = "0xB22044", VA = "0xB22044")]
	private void Start()
	{
	}

	[Token(Token = "0x600047F")]
	[Address(RVA = "0xB2211C", Offset = "0xB2211C", VA = "0xB2211C", Slot = "6")]
	public override void Update()
	{
	}

	[Token(Token = "0x6000480")]
	[Address(RVA = "0xB22464", Offset = "0xB22464", VA = "0xB22464", Slot = "8")]
	protected override void UpdateControlState()
	{
	}

	[Token(Token = "0x6000481")]
	[Address(RVA = "0xB22A50", Offset = "0xB22A50", VA = "0xB22A50", Slot = "11")]
	public void OnPointerEnter(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000482")]
	[Address(RVA = "0xB22B3C", Offset = "0xB22B3C", VA = "0xB22B3C", Slot = "14")]
	public void OnPointerDown(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000483")]
	[Address(RVA = "0xB22EBC", Offset = "0xB22EBC", VA = "0xB22EBC", Slot = "13")]
	public void OnBeginDrag(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000484")]
	[Address(RVA = "0xB22B94", Offset = "0xB22B94", VA = "0xB22B94", Slot = "12")]
	public void OnDrag(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000485")]
	[Address(RVA = "0xB22B0C", Offset = "0xB22B0C", VA = "0xB22B0C", Slot = "15")]
	public void OnPointerUp(PointerEventData eventData)
	{
	}

	[Token(Token = "0x6000486")]
	[Address(RVA = "0xB22F18", Offset = "0xB22F18", VA = "0xB22F18")]
	private void OnUp(bool real = true)
	{
	}

	[Token(Token = "0x6000487")]
	[Address(RVA = "0xB22468", Offset = "0xB22468", VA = "0xB22468")]
	private void UpdateJoystick()
	{
	}

	[Token(Token = "0x6000488")]
	[Address(RVA = "0xB22324", Offset = "0xB22324", VA = "0xB22324")]
	private bool isTouchOverJoystickArea(ref Vector2 localPosition, ref Vector2 screenPosition)
	{
		return default(bool);
	}

	[Token(Token = "0x6000489")]
	[Address(RVA = "0xB230B8", Offset = "0xB230B8", VA = "0xB230B8")]
	private bool isScreenPointOverArea(Vector2 screenPosition, ref Vector2 localPosition)
	{
		return default(bool);
	}

	[Token(Token = "0x600048A")]
	[Address(RVA = "0xB230B0", Offset = "0xB230B0", VA = "0xB230B0")]
	private int GetTouchCount()
	{
		return default(int);
	}

	[Token(Token = "0x600048B")]
	[Address(RVA = "0xB22EC0", Offset = "0xB22EC0", VA = "0xB22EC0")]
	private float GetRadius()
	{
		return default(float);
	}

	[Token(Token = "0x600048C")]
	[Address(RVA = "0xB23298", Offset = "0xB23298", VA = "0xB23298", Slot = "10")]
	protected override void SetActivated()
	{
	}

	[Token(Token = "0x600048D")]
	[Address(RVA = "0xB23314", Offset = "0xB23314", VA = "0xB23314", Slot = "9")]
	protected override void SetVisible()
	{
	}
}
[Token(Token = "0x20000C9")]
public class ETCSingleton<T> : MonoBehaviour where T : ETCSingleton<T>
{
	[Token(Token = "0x400039D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static T m_Instance;

	[Token(Token = "0x400039E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static bool onClose;

	[Token(Token = "0x1700003B")]
	public static T instance
	{
		[Token(Token = "0x600049C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600049D")]
	private void Awake()
	{
	}

	[Token(Token = "0x600049E")]
	public virtual void Init()
	{
	}

	[Token(Token = "0x600049F")]
	private void OnApplicationQuit()
	{
	}

	[Token(Token = "0x60004A0")]
	public ETCSingleton()
	{
	}
}
[Serializable]
[Token(Token = "0x20000CA")]
public class ETCTouchPad : ETCBase, IBeginDragHandler, IEventSystemHandler, IDragHandler, IPointerEnterHandler, IPointerDownHandler, IPointerUpHandler, IPointerExitHandler
{
	[Serializable]
	[Token(Token = "0x20000CB")]
	public class OnMoveStartHandler : UnityEvent
	{
		[Token(Token = "0x60004AF")]
		[Address(RVA = "0xB24250", Offset = "0xB24250", VA = "0xB24250")]
		public OnMoveStartHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000CC")]
	public class OnMoveHandler : UnityEvent<Vector2>
	{
		[Token(Token = "0x60004B0")]
		[Address(RVA = "0xB24258", Offset = "0xB24258", VA = "0xB24258")]
		public OnMoveHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000CD")]
	public class OnMoveSpeedHandler : UnityEvent<Vector2>
	{
		[Token(Token = "0x60004B1")]
		[Address(RVA = "0xB242A0", Offset = "0xB242A0", VA = "0xB242A0")]
		public OnMoveSpeedHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000CE")]
	public class OnMoveEndHandler : UnityEvent
	{
		[Token(Token = "0x60004B2")]
		[Address(RVA = "0xB242E8", Offset = "0xB242E8", VA = "0xB242E8")]
		public OnMoveEndHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000CF")]
	public class OnTouchStartHandler : UnityEvent
	{
		[Token(Token = "0x60004B3")]
		[Address(RVA = "0xB242F0", Offset = "0xB242F0", VA = "0xB242F0")]
		public OnTouchStartHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000D0")]
	public class OnTouchUPHandler : UnityEvent
	{
		[Token(Token = "0x60004B4")]
		[Address(RVA = "0xB242F8", Offset = "0xB242F8", VA = "0xB242F8")]
		public OnTouchUPHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000D1")]
	public class OnDownUpHandler : UnityEvent
	{
		[Token(Token = "0x60004B5")]
		[Address(RVA = "0xB24300", Offset = "0xB24300", VA = "0xB24300")]
		public OnDownUpHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000D2")]
	public class OnDownDownHandler : UnityEvent
	{
		[Token(Token = "0x60004B6")]
		[Address(RVA = "0xB24308", Offset = "0xB24308", VA = "0xB24308")]
		public OnDownDownHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000D3")]
	public class OnDownLeftHandler : UnityEvent
	{
		[Token(Token = "0x60004B7")]
		[Address(RVA = "0xB24310", Offset = "0xB24310", VA = "0xB24310")]
		public OnDownLeftHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000D4")]
	public class OnDownRightHandler : UnityEvent
	{
		[Token(Token = "0x60004B8")]
		[Address(RVA = "0xB24318", Offset = "0xB24318", VA = "0xB24318")]
		public OnDownRightHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000D5")]
	public class OnPressUpHandler : UnityEvent
	{
		[Token(Token = "0x60004B9")]
		[Address(RVA = "0xB24320", Offset = "0xB24320", VA = "0xB24320")]
		public OnPressUpHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000D6")]
	public class OnPressDownHandler : UnityEvent
	{
		[Token(Token = "0x60004BA")]
		[Address(RVA = "0xB24328", Offset = "0xB24328", VA = "0xB24328")]
		public OnPressDownHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000D7")]
	public class OnPressLeftHandler : UnityEvent
	{
		[Token(Token = "0x60004BB")]
		[Address(RVA = "0xB24330", Offset = "0xB24330", VA = "0xB24330")]
		public OnPressLeftHandler()
		{
		}
	}

	[Serializable]
	[Token(Token = "0x20000D8")]
	public class OnPressRightHandler : UnityEvent
	{
		[Token(Token = "0x60004BC")]
		[Address(RVA = "0xB24338", Offset = "0xB24338", VA = "0xB24338")]
		public OnPressRightHandler()
		{
		}
	}

	[Token(Token = "0x400039F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	public OnMoveStartHandler onMoveStart;

	[Token(Token = "0x40003A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	public OnMoveHandler onMove;

	[Token(Token = "0x40003A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	public OnMoveSpeedHandler onMoveSpeed;

	[Token(Token = "0x40003A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	public OnMoveEndHandler onMoveEnd;

	[Token(Token = "0x40003A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	public OnTouchStartHandler onTouchStart;

	[Token(Token = "0x40003A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	public OnTouchUPHandler onTouchUp;

	[Token(Token = "0x40003A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	public OnDownUpHandler OnDownUp;

	[Token(Token = "0x40003A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[SerializeField]
	public OnDownDownHandler OnDownDown;

	[Token(Token = "0x40003A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	public OnDownLeftHandler OnDownLeft;

	[Token(Token = "0x40003A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	public OnDownRightHandler OnDownRight;

	[Token(Token = "0x40003A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[SerializeField]
	public OnDownUpHandler OnPressUp;

	[Token(Token = "0x40003AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	[SerializeField]
	public OnDownDownHandler OnPressDown;

	[Token(Token = "0x40003AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	[SerializeField]
	public OnDownLeftHandler OnPressLeft;

	[Token(Token = "0x40003AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	[SerializeField]
	public OnDownRightHandler OnPressRight;

	[Token(Token = "0x40003AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public ETCAxis axisX;

	[Token(Token = "0x40003AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public ETCAxis axisY;

	[Token(Token = "0x40003AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public bool isDPI;

	[Token(Token = "0x40003B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private Image cachedImage;

	[Token(Token = "0x40003B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private Vector2 tmpAxis;

	[Token(Token = "0x40003B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private Vector2 OldTmpAxis;

	[Token(Token = "0x40003B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private GameObject previousDargObject;

	[Token(Token = "0x40003B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private bool isOut;

	[Token(Token = "0x40003B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x119")]
	private bool isOnTouch;

	[Token(Token = "0x40003B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11A")]
	private bool cachedVisible;

	[Token(Token = "0x60004A1")]
	[Address(RVA = "0xB234B0", Offset = "0xB234B0", VA = "0xB234B0")]
	public ETCTouchPad()
	{
	}

	[Token(Token = "0x60004A2")]
	[Address(RVA = "0xB2362C", Offset = "0xB2362C", VA = "0xB2362C", Slot = "4")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x60004A3")]
	[Address(RVA = "0xB23694", Offset = "0xB23694", VA = "0xB23694", Slot = "5")]
	public override void OnEnable()
	{
	}

	[Token(Token = "0x60004A4")]
	[Address(RVA = "0xB236E0", Offset = "0xB236E0", VA = "0xB236E0")]
	private void Start()
	{
	}

	[Token(Token = "0x60004A5")]
	[Address(RVA = "0xB23768", Offset = "0xB23768", VA = "0xB23768", Slot = "8")]
	protected override void UpdateControlState()
	{
	}

	[Token(Token = "0x60004A6")]
	[Address(RVA = "0xB23BEC", Offset = "0xB23BEC", VA = "0xB23BEC", Slot = "13")]
	public void OnPointerEnter(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60004A7")]
	[Address(RVA = "0xB23E0C", Offset = "0xB23E0C", VA = "0xB23E0C", Slot = "11")]
	public void OnBeginDrag(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60004A8")]
	[Address(RVA = "0xB23E44", Offset = "0xB23E44", VA = "0xB23E44", Slot = "12")]
	public void OnDrag(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60004A9")]
	[Address(RVA = "0xB23DA8", Offset = "0xB23DA8", VA = "0xB23DA8", Slot = "14")]
	public void OnPointerDown(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60004AA")]
	[Address(RVA = "0xB23F1C", Offset = "0xB23F1C", VA = "0xB23F1C", Slot = "15")]
	public void OnPointerUp(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60004AB")]
	[Address(RVA = "0xB240F0", Offset = "0xB240F0", VA = "0xB240F0", Slot = "16")]
	public void OnPointerExit(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60004AC")]
	[Address(RVA = "0xB2376C", Offset = "0xB2376C", VA = "0xB2376C")]
	private void UpdateTouchPad()
	{
	}

	[Token(Token = "0x60004AD")]
	[Address(RVA = "0xB2412C", Offset = "0xB2412C", VA = "0xB2412C", Slot = "9")]
	protected override void SetVisible()
	{
	}

	[Token(Token = "0x60004AE")]
	[Address(RVA = "0xB241A4", Offset = "0xB241A4", VA = "0xB241A4", Slot = "10")]
	protected override void SetActivated()
	{
	}
}
[Token(Token = "0x20000D9")]
public class ExamplePlayer : MonoBehaviour
{
	[Token(Token = "0x40003B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string togglePhysicsKey;

	[Token(Token = "0x60004BD")]
	[Address(RVA = "0xB24340", Offset = "0xB24340", VA = "0xB24340")]
	private void Update()
	{
	}

	[Token(Token = "0x60004BE")]
	[Address(RVA = "0xB24638", Offset = "0xB24638", VA = "0xB24638")]
	private void Start()
	{
	}

	[Token(Token = "0x60004BF")]
	[Address(RVA = "0xB24684", Offset = "0xB24684", VA = "0xB24684")]
	public ExamplePlayer()
	{
	}
}
[Token(Token = "0x20000DA")]
public class ExampleUI : MonoBehaviour
{
	[Token(Token = "0x40003B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static Slider strength;

	[Token(Token = "0x40003B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Slider st;

	[Token(Token = "0x40003BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text strengthValue;

	[Token(Token = "0x60004C0")]
	[Address(RVA = "0xB2468C", Offset = "0xB2468C", VA = "0xB2468C")]
	private void Start()
	{
	}

	[Token(Token = "0x60004C1")]
	[Address(RVA = "0xB246F0", Offset = "0xB246F0", VA = "0xB246F0")]
	private void Update()
	{
	}

	[Token(Token = "0x60004C2")]
	[Address(RVA = "0xB24864", Offset = "0xB24864", VA = "0xB24864")]
	public ExampleUI()
	{
	}
}
[Token(Token = "0x20000DB")]
public class GhostPreview : MonoBehaviour
{
	[Token(Token = "0x40003BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static List<GhostPreview> instances;

	[Token(Token = "0x40003BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private MeshRenderer rend;

	[Token(Token = "0x60004C3")]
	[Address(RVA = "0xB2486C", Offset = "0xB2486C", VA = "0xB2486C")]
	public void Init(float alpha, MeshRenderer meshy, Mesh m, Transform trans)
	{
	}

	[Token(Token = "0x60004C4")]
	[Address(RVA = "0xB24A9C", Offset = "0xB24A9C", VA = "0xB24A9C")]
	public static void RemoveAllGhosts()
	{
	}

	[Token(Token = "0x60004C5")]
	[Address(RVA = "0xB24D1C", Offset = "0xB24D1C", VA = "0xB24D1C")]
	public GhostPreview()
	{
	}
}
[Token(Token = "0x20000DC")]
public class PhysicsPreview : MonoBehaviour
{
	[Token(Token = "0x40003BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int iterations;

	[Token(Token = "0x40003BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static int Iterations;

	[Token(Token = "0x40003BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static PhysicsPreview instance;

	[Token(Token = "0x40003C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static GameObject ball;

	[Token(Token = "0x60004C6")]
	[Address(RVA = "0xB24D24", Offset = "0xB24D24", VA = "0xB24D24")]
	private void Awake()
	{
	}

	[Token(Token = "0x60004C7")]
	[Address(RVA = "0xB2444C", Offset = "0xB2444C", VA = "0xB2444C")]
	public static void Preview()
	{
	}

	[Token(Token = "0x60004C8")]
	[Address(RVA = "0xB243B0", Offset = "0xB243B0", VA = "0xB243B0")]
	public static void RemoveGhosts()
	{
	}

	[Token(Token = "0x60004C9")]
	[Address(RVA = "0xB251E8", Offset = "0xB251E8", VA = "0xB251E8")]
	public PhysicsPreview()
	{
	}
}
[Token(Token = "0x20000DD")]
public class PreviewedObject : MonoBehaviour
{
	[Token(Token = "0x40003C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static List<PreviewedObject> instances;

	[Token(Token = "0x40003C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject ghostObject;

	[Token(Token = "0x40003C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool drawGhosts;

	[Token(Token = "0x40003C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 startSpeed;

	[Token(Token = "0x40003C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3 zeroPosition;

	[Token(Token = "0x40003C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 zeroSpeed;

	[Token(Token = "0x40003C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 zeroAngularSpeed;

	[Token(Token = "0x40003C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private Quaternion zeroRot;

	[Token(Token = "0x40003C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Rigidbody RB;

	[Token(Token = "0x60004CB")]
	[Address(RVA = "0xB25240", Offset = "0xB25240", VA = "0xB25240")]
	private void Start()
	{
	}

	[Token(Token = "0x60004CC")]
	[Address(RVA = "0xB24D8C", Offset = "0xB24D8C", VA = "0xB24D8C")]
	public static void SetAllGhostPositions(int i)
	{
	}

	[Token(Token = "0x60004CD")]
	[Address(RVA = "0xB2502C", Offset = "0xB2502C", VA = "0xB2502C")]
	public static void ResetZeroPositions()
	{
	}

	[Token(Token = "0x60004CE")]
	[Address(RVA = "0xB256C4", Offset = "0xB256C4", VA = "0xB256C4")]
	public void ResetZero()
	{
	}

	[Token(Token = "0x60004CF")]
	[Address(RVA = "0xB25408", Offset = "0xB25408", VA = "0xB25408")]
	public void SetGhost(int i)
	{
	}

	[Token(Token = "0x60004D0")]
	[Address(RVA = "0xB25740", Offset = "0xB25740", VA = "0xB25740")]
	public PreviewedObject()
	{
	}
}
[Serializable]
[Token(Token = "0x20000DE")]
public class Torretta : MonoBehaviour
{
	[Token(Token = "0x20000DF")]
	[CompilerGenerated]
	private sealed class <Tiro>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Torretta <>4__this;

		[Token(Token = "0x1700003C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60004DA")]
			[Address(RVA = "0xB25E78", Offset = "0xB25E78", VA = "0xB25E78", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60004DC")]
			[Address(RVA = "0xB25EC0", Offset = "0xB25EC0", VA = "0xB25EC0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004D7")]
		[Address(RVA = "0xB258F8", Offset = "0xB258F8", VA = "0xB258F8")]
		[DebuggerHidden]
		public <Tiro>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x60004D8")]
		[Address(RVA = "0xB25B00", Offset = "0xB25B00", VA = "0xB25B00", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60004D9")]
		[Address(RVA = "0xB25B04", Offset = "0xB25B04", VA = "0xB25B04", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60004DB")]
		[Address(RVA = "0xB25E80", Offset = "0xB25E80", VA = "0xB25E80", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool lancia;

	[Token(Token = "0x40003CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject ball;

	[Token(Token = "0x40003CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform spawnTarget;

	[Token(Token = "0x40003CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform obiettivotiro;

	[Token(Token = "0x40003CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float horizontalOffset;

	[Token(Token = "0x40003CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float lob;

	[Token(Token = "0x40003D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Vector3 startingVelocity;

	[Token(Token = "0x60004D2")]
	[Address(RVA = "0xB257E0", Offset = "0xB257E0", VA = "0xB257E0", Slot = "4")]
	public virtual void Start()
	{
	}

	[Token(Token = "0x60004D3")]
	[Address(RVA = "0xB25808", Offset = "0xB25808", VA = "0xB25808", Slot = "5")]
	public virtual void Update()
	{
	}

	[Token(Token = "0x60004D4")]
	[Address(RVA = "0xB25884", Offset = "0xB25884", VA = "0xB25884", Slot = "6")]
	[IteratorStateMachine(typeof(<Tiro>d__9))]
	public virtual IEnumerator Tiro()
	{
		return null;
	}

	[Token(Token = "0x60004D5")]
	[Address(RVA = "0xB25920", Offset = "0xB25920", VA = "0xB25920", Slot = "7")]
	public virtual Vector3 GetTrajectoryVelocitytiro(object startingPosition, object targetPosition, object lob, object gravity)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60004D6")]
	[Address(RVA = "0xB25AE0", Offset = "0xB25AE0", VA = "0xB25AE0")]
	public Torretta()
	{
	}
}
[Token(Token = "0x20000E0")]
public class UIEffectColor : UIEffectTemplate
{
	[Token(Token = "0x40003D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Color m_oColorIn;

	[Token(Token = "0x40003D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Color m_oColorOut;

	[Token(Token = "0x40003D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Color m_oDistanceBetweenColors;

	[Token(Token = "0x40003D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Material m_rCachedMaterial;

	[Token(Token = "0x40003D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private string m_rColorName;

	[Token(Token = "0x1700003E")]
	public Color colorIn
	{
		[Token(Token = "0x60004DD")]
		[Address(RVA = "0xB25EC8", Offset = "0xB25EC8", VA = "0xB25EC8")]
		get
		{
			return default(Color);
		}
		[Token(Token = "0x60004DE")]
		[Address(RVA = "0xB25ED4", Offset = "0xB25ED4", VA = "0xB25ED4")]
		set
		{
		}
	}

	[Token(Token = "0x1700003F")]
	public Color colorOut
	{
		[Token(Token = "0x60004DF")]
		[Address(RVA = "0xB25EF8", Offset = "0xB25EF8", VA = "0xB25EF8")]
		get
		{
			return default(Color);
		}
		[Token(Token = "0x60004E0")]
		[Address(RVA = "0xB25F04", Offset = "0xB25F04", VA = "0xB25F04")]
		set
		{
		}
	}

	[Token(Token = "0x17000040")]
	public Color currentColor
	{
		[Token(Token = "0x60004E1")]
		[Address(RVA = "0xB25F28", Offset = "0xB25F28", VA = "0xB25F28")]
		get
		{
			return default(Color);
		}
	}

	[Token(Token = "0x17000041")]
	public string colorName
	{
		[Token(Token = "0x60004E3")]
		[Address(RVA = "0xB26000", Offset = "0xB26000", VA = "0xB26000")]
		get
		{
			return null;
		}
		[Token(Token = "0x60004E2")]
		[Address(RVA = "0xB25FF8", Offset = "0xB25FF8", VA = "0xB25FF8")]
		set
		{
		}
	}

	[Token(Token = "0x60004E4")]
	[Address(RVA = "0xB26008", Offset = "0xB26008", VA = "0xB26008", Slot = "8")]
	protected override void InternalInit()
	{
	}

	[Token(Token = "0x60004E5")]
	[Address(RVA = "0xB2611C", Offset = "0xB2611C", VA = "0xB2611C", Slot = "15")]
	protected override void EffectUpdate()
	{
	}

	[Token(Token = "0x60004E6")]
	[Address(RVA = "0xB261FC", Offset = "0xB261FC", VA = "0xB261FC")]
	public UIEffectColor()
	{
	}
}
[Token(Token = "0x20000E1")]
public abstract class UIEffectTemplate : MonoBehaviour
{
	[Token(Token = "0x20000E2")]
	public delegate void EffectEndedDelegate(bool a_bEffectPlayedForward);

	[Token(Token = "0x40003D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	protected EffectEndedDelegate m_dEffectEndedDelegate;

	[Token(Token = "0x40003DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	protected float m_fSpeed;

	[Token(Token = "0x40003DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	protected float m_fTimer;

	[Token(Token = "0x40003DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected float m_fDuration;

	[Token(Token = "0x40003DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	protected bool m_bIsPlaying;

	[Token(Token = "0x40003DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	protected gkInterpolate.EaseType m_eEasingType;

	[Token(Token = "0x40003DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected gkInterpolate.EaseFunction m_dEasingFunction;

	[Token(Token = "0x17000042")]
	public virtual float time
	{
		[Token(Token = "0x60004E7")]
		[Address(RVA = "0xB2620C", Offset = "0xB2620C", VA = "0xB2620C", Slot = "4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60004E8")]
		[Address(RVA = "0xB26214", Offset = "0xB26214", VA = "0xB26214", Slot = "5")]
		set
		{
		}
	}

	[Token(Token = "0x17000043")]
	public virtual float duration
	{
		[Token(Token = "0x60004E9")]
		[Address(RVA = "0xB26240", Offset = "0xB26240", VA = "0xB26240", Slot = "6")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60004EA")]
		[Address(RVA = "0xB26248", Offset = "0xB26248", VA = "0xB26248", Slot = "7")]
		set
		{
		}
	}

	[Token(Token = "0x17000044")]
	public bool isPlaying
	{
		[Token(Token = "0x60004EB")]
		[Address(RVA = "0xB26268", Offset = "0xB26268", VA = "0xB26268")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000045")]
	public gkInterpolate.EaseType easing
	{
		[Token(Token = "0x60004EC")]
		[Address(RVA = "0xB26270", Offset = "0xB26270", VA = "0xB26270")]
		get
		{
			return default(gkInterpolate.EaseType);
		}
		[Token(Token = "0x60004ED")]
		[Address(RVA = "0xB26278", Offset = "0xB26278", VA = "0xB26278")]
		set
		{
		}
	}

	[Token(Token = "0x17000046")]
	public bool isPlayingForward
	{
		[Token(Token = "0x60004EE")]
		[Address(RVA = "0xB262A4", Offset = "0xB262A4", VA = "0xB262A4")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000047")]
	public EffectEndedDelegate effectEndedDelegate
	{
		[Token(Token = "0x60004EF")]
		[Address(RVA = "0xB262B4", Offset = "0xB262B4", VA = "0xB262B4")]
		get
		{
			return null;
		}
		[Token(Token = "0x60004F0")]
		[Address(RVA = "0xB262BC", Offset = "0xB262BC", VA = "0xB262BC")]
		set
		{
		}
	}

	[Token(Token = "0x60004F1")]
	[Address(RVA = "0xB262C4", Offset = "0xB262C4", VA = "0xB262C4")]
	public void Init()
	{
	}

	[Token(Token = "0x60004F2")]
	[Address(RVA = "0xB260D0", Offset = "0xB260D0", VA = "0xB260D0", Slot = "8")]
	protected virtual void InternalInit()
	{
	}

	[Token(Token = "0x60004F3")]
	[Address(RVA = "0xB262F0", Offset = "0xB262F0", VA = "0xB262F0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60004F4")]
	[Address(RVA = "0xB26330", Offset = "0xB26330", VA = "0xB26330", Slot = "9")]
	public virtual void Pause()
	{
	}

	[Token(Token = "0x60004F5")]
	[Address(RVA = "0xB26338", Offset = "0xB26338", VA = "0xB26338", Slot = "10")]
	public virtual void Play()
	{
	}

	[Token(Token = "0x60004F6")]
	[Address(RVA = "0xB2634C", Offset = "0xB2634C", VA = "0xB2634C", Slot = "11")]
	public virtual void Restart()
	{
	}

	[Token(Token = "0x60004F7")]
	[Address(RVA = "0xB26374", Offset = "0xB26374", VA = "0xB26374", Slot = "12")]
	public virtual void ResetAndStop()
	{
	}

	[Token(Token = "0x60004F8")]
	[Address(RVA = "0xB263A0", Offset = "0xB263A0", VA = "0xB263A0", Slot = "13")]
	public virtual void PlayBackwards()
	{
	}

	[Token(Token = "0x60004F9")]
	[Address(RVA = "0xB263B4", Offset = "0xB263B4", VA = "0xB263B4", Slot = "14")]
	protected virtual void TimerUpdate()
	{
	}

	[Token(Token = "0x60004FA")]
	protected abstract void EffectUpdate();

	[Token(Token = "0x60004FB")]
	[Address(RVA = "0xB26204", Offset = "0xB26204", VA = "0xB26204")]
	protected UIEffectTemplate()
	{
	}
}
[Token(Token = "0x20000E3")]
public class UIEffectTransformRelativeCoords : UIEffectTemplate
{
	[Token(Token = "0x40003E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	protected Transform m_rCachedTransform;

	[Token(Token = "0x40003E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	protected Vector3 m_f3SavedPosition;

	[Token(Token = "0x40003E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	protected Vector3 m_f3SavedRotation;

	[Token(Token = "0x40003E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	protected Vector3 m_f3SavedScale;

	[Token(Token = "0x40003E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	protected Vector3 m_f3FinalPositionOffset;

	[Token(Token = "0x40003E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected Vector3 m_f3FinalRotationOffset;

	[Token(Token = "0x40003E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	protected Vector3 m_f3FinalScaleOffset;

	[Token(Token = "0x40003E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	protected Vector3 m_f3PreviousPositionOffset;

	[Token(Token = "0x40003E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	protected Vector3 m_f3PreviousRotationOffset;

	[Token(Token = "0x40003E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	protected Vector3 m_f3PreviousScaleOffset;

	[Token(Token = "0x17000048")]
	public Vector3 startPosition
	{
		[Token(Token = "0x6000500")]
		[Address(RVA = "0xB265C8", Offset = "0xB265C8", VA = "0xB265C8")]
		set
		{
		}
	}

	[Token(Token = "0x17000049")]
	public Quaternion startRotation
	{
		[Token(Token = "0x6000501")]
		[Address(RVA = "0xB265D4", Offset = "0xB265D4", VA = "0xB265D4")]
		set
		{
		}
	}

	[Token(Token = "0x1700004A")]
	public Vector3 finalPositionOffset
	{
		[Token(Token = "0x6000502")]
		[Address(RVA = "0xB26610", Offset = "0xB26610", VA = "0xB26610")]
		set
		{
		}
	}

	[Token(Token = "0x1700004B")]
	public Quaternion finalRotationOffset
	{
		[Token(Token = "0x6000503")]
		[Address(RVA = "0xB26678", Offset = "0xB26678", VA = "0xB26678")]
		set
		{
		}
	}

	[Token(Token = "0x1700004C")]
	public Vector3 finalEulerAnglesOffset
	{
		[Token(Token = "0x6000504")]
		[Address(RVA = "0xB26718", Offset = "0xB26718", VA = "0xB26718")]
		set
		{
		}
	}

	[Token(Token = "0x1700004D")]
	public Vector3 finalScaleOffset
	{
		[Token(Token = "0x6000505")]
		[Address(RVA = "0xB26780", Offset = "0xB26780", VA = "0xB26780")]
		set
		{
		}
	}

	[Token(Token = "0x6000506")]
	[Address(RVA = "0xB267E8", Offset = "0xB267E8", VA = "0xB267E8", Slot = "8")]
	protected override void InternalInit()
	{
	}

	[Token(Token = "0x6000507")]
	[Address(RVA = "0xB268E4", Offset = "0xB268E4", VA = "0xB268E4", Slot = "15")]
	protected override void EffectUpdate()
	{
	}

	[Token(Token = "0x6000508")]
	[Address(RVA = "0xB26A1C", Offset = "0xB26A1C", VA = "0xB26A1C")]
	public UIEffectTransformRelativeCoords()
	{
	}
}
[Token(Token = "0x20000E4")]
public class VirtualScreen : MonoSingleton<VirtualScreen>
{
	[Token(Token = "0x20000E5")]
	public delegate void On_ScreenResizeHandler();

	[Token(Token = "0x20000E6")]
	public enum ScreenResolution
	{
		[Token(Token = "0x40003F6")]
		IPhoneTall,
		[Token(Token = "0x40003F7")]
		IPhoneWide,
		[Token(Token = "0x40003F8")]
		IPhone4GTall,
		[Token(Token = "0x40003F9")]
		IPhone4GWide,
		[Token(Token = "0x40003FA")]
		IPadTall,
		[Token(Token = "0x40003FB")]
		IPadWide
	}

	[Token(Token = "0x40003EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float virtualWidth;

	[Token(Token = "0x40003EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float virtualHeight;

	[Token(Token = "0x40003ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static float width;

	[Token(Token = "0x40003EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static float height;

	[Token(Token = "0x40003EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static float xRatio;

	[Token(Token = "0x40003F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public static float yRatio;

	[Token(Token = "0x40003F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float realWidth;

	[Token(Token = "0x40003F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float realHeight;

	[Token(Token = "0x40003F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float oldRealWidth;

	[Token(Token = "0x40003F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float oldRealHeight;

	[Token(Token = "0x14000037")]
	public static event On_ScreenResizeHandler On_ScreenResize
	{
		[Token(Token = "0x6000509")]
		[Address(RVA = "0xB27A24", Offset = "0xB27A24", VA = "0xB27A24")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600050A")]
		[Address(RVA = "0xB27AFC", Offset = "0xB27AFC", VA = "0xB27AFC")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x600050B")]
	[Address(RVA = "0xB27BD4", Offset = "0xB27BD4", VA = "0xB27BD4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600050C")]
	[Address(RVA = "0xB27DB4", Offset = "0xB27DB4", VA = "0xB27DB4")]
	private void Update()
	{
	}

	[Token(Token = "0x600050D")]
	[Address(RVA = "0xB27C10", Offset = "0xB27C10", VA = "0xB27C10")]
	public void ComputeScreen()
	{
	}

	[Token(Token = "0x600050E")]
	[Address(RVA = "0xB27E90", Offset = "0xB27E90", VA = "0xB27E90")]
	public static void ComputeVirtualScreen()
	{
	}

	[Token(Token = "0x600050F")]
	[Address(RVA = "0xB27EDC", Offset = "0xB27EDC", VA = "0xB27EDC")]
	public static void SetGuiScaleMatrix()
	{
	}

	[Token(Token = "0x6000510")]
	[Address(RVA = "0xB27FAC", Offset = "0xB27FAC", VA = "0xB27FAC")]
	public static Rect GetRealRect(Rect rect)
	{
		return default(Rect);
	}

	[Token(Token = "0x6000511")]
	[Address(RVA = "0xB280B8", Offset = "0xB280B8", VA = "0xB280B8")]
	public VirtualScreen()
	{
	}
}
[Serializable]
[Token(Token = "0x20000E7")]
public class CharacterMotorMovement
{
	[Token(Token = "0x40003FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float maxForwardSpeed;

	[Token(Token = "0x40003FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float maxSidewaysSpeed;

	[Token(Token = "0x40003FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float maxBackwardsSpeed;

	[Token(Token = "0x40003FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve slopeSpeedMultiplier;

	[Token(Token = "0x4000400")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float maxGroundAcceleration;

	[Token(Token = "0x4000401")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float maxAirAcceleration;

	[Token(Token = "0x4000402")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float gravity;

	[Token(Token = "0x4000403")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float maxFallSpeed;

	[NonSerialized]
	[Token(Token = "0x4000404")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public CollisionFlags collisionFlags;

	[NonSerialized]
	[Token(Token = "0x4000405")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Vector3 velocity;

	[NonSerialized]
	[Token(Token = "0x4000406")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector3 frameVelocity;

	[NonSerialized]
	[Token(Token = "0x4000407")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public Vector3 hitPoint;

	[NonSerialized]
	[Token(Token = "0x4000408")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Vector3 lastHitPoint;

	[Token(Token = "0x6000517")]
	[Address(RVA = "0xB28268", Offset = "0xB28268", VA = "0xB28268")]
	public CharacterMotorMovement()
	{
	}
}
[Token(Token = "0x20000E8")]
public enum MovementTransferOnJump
{
	[Token(Token = "0x400040A")]
	None,
	[Token(Token = "0x400040B")]
	InitTransfer,
	[Token(Token = "0x400040C")]
	PermaTransfer,
	[Token(Token = "0x400040D")]
	PermaLocked
}
[Serializable]
[Token(Token = "0x20000E9")]
public class CharacterMotorJumping
{
	[Token(Token = "0x400040E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool enabled;

	[Token(Token = "0x400040F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float baseHeight;

	[Token(Token = "0x4000410")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float extraHeight;

	[Token(Token = "0x4000411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float perpAmount;

	[Token(Token = "0x4000412")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float steepPerpAmount;

	[NonSerialized]
	[Token(Token = "0x4000413")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool jumping;

	[NonSerialized]
	[Token(Token = "0x4000414")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	public bool holdingJumpButton;

	[NonSerialized]
	[Token(Token = "0x4000415")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float lastStartTime;

	[NonSerialized]
	[Token(Token = "0x4000416")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float lastButtonDownTime;

	[NonSerialized]
	[Token(Token = "0x4000417")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 jumpDir;

	[Token(Token = "0x6000518")]
	[Address(RVA = "0xB28488", Offset = "0xB28488", VA = "0xB28488")]
	public CharacterMotorJumping()
	{
	}
}
[Serializable]
[Token(Token = "0x20000EA")]
public class CharacterMotorMovingPlatform
{
	[Token(Token = "0x4000418")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool enabled;

	[Token(Token = "0x4000419")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public MovementTransferOnJump movementTransfer;

	[NonSerialized]
	[Token(Token = "0x400041A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform hitPlatform;

	[NonSerialized]
	[Token(Token = "0x400041B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform activePlatform;

	[NonSerialized]
	[Token(Token = "0x400041C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 activeLocalPoint;

	[NonSerialized]
	[Token(Token = "0x400041D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public Vector3 activeGlobalPoint;

	[NonSerialized]
	[Token(Token = "0x400041E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Quaternion activeLocalRotation;

	[NonSerialized]
	[Token(Token = "0x400041F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Quaternion activeGlobalRotation;

	[NonSerialized]
	[Token(Token = "0x4000420")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Matrix4x4 lastMatrix;

	[NonSerialized]
	[Token(Token = "0x4000421")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Vector3 platformVelocity;

	[NonSerialized]
	[Token(Token = "0x4000422")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public bool newPlatform;

	[Token(Token = "0x6000519")]
	[Address(RVA = "0xB28508", Offset = "0xB28508", VA = "0xB28508")]
	public CharacterMotorMovingPlatform()
	{
	}
}
[Serializable]
[Token(Token = "0x20000EB")]
public class CharacterMotorSliding
{
	[Token(Token = "0x4000423")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool enabled;

	[Token(Token = "0x4000424")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public float slidingSpeed;

	[Token(Token = "0x4000425")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float sidewaysControl;

	[Token(Token = "0x4000426")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float speedControl;

	[Token(Token = "0x600051A")]
	[Address(RVA = "0xB28530", Offset = "0xB28530", VA = "0xB28530")]
	public CharacterMotorSliding()
	{
	}
}
[Serializable]
[Token(Token = "0x20000EC")]
[AddComponentMenu("Character/Character Motor")]
[RequireComponent(typeof(CharacterController))]
public class CharacterMotor : MonoBehaviour
{
	[Token(Token = "0x20000ED")]
	[CompilerGenerated]
	private sealed class <SubtractNewPlatformVelocity>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CharacterMotor <>4__this;

		[Token(Token = "0x4000437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform <platform>5__2;

		[Token(Token = "0x1700004E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000536")]
			[Address(RVA = "0xB2A8EC", Offset = "0xB2A8EC", VA = "0xB2A8EC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000538")]
			[Address(RVA = "0xB2A934", Offset = "0xB2A934", VA = "0xB2A934", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000533")]
		[Address(RVA = "0xB2A0D8", Offset = "0xB2A0D8", VA = "0xB2A0D8")]
		[DebuggerHidden]
		public <SubtractNewPlatformVelocity>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x6000534")]
		[Address(RVA = "0xB2A6C0", Offset = "0xB2A6C0", VA = "0xB2A6C0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000535")]
		[Address(RVA = "0xB2A6C4", Offset = "0xB2A6C4", VA = "0xB2A6C4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000537")]
		[Address(RVA = "0xB2A8F4", Offset = "0xB2A8F4", VA = "0xB2A8F4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000427")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool canControl;

	[Token(Token = "0x4000428")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool useFixedUpdate;

	[NonSerialized]
	[Token(Token = "0x4000429")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 inputMoveDirection;

	[NonSerialized]
	[Token(Token = "0x400042A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool inputJump;

	[Token(Token = "0x400042B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public CharacterMotorMovement movement;

	[Token(Token = "0x400042C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public CharacterMotorJumping jumping;

	[Token(Token = "0x400042D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public CharacterMotorMovingPlatform movingPlatform;

	[Token(Token = "0x400042E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public CharacterMotorSliding sliding;

	[NonSerialized]
	[Token(Token = "0x400042F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool grounded;

	[NonSerialized]
	[Token(Token = "0x4000430")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public Vector3 groundNormal;

	[Token(Token = "0x4000431")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3 lastGroundNormal;

	[Token(Token = "0x4000432")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Transform tr;

	[Token(Token = "0x4000433")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private CharacterController controller;

	[Token(Token = "0x600051B")]
	[Address(RVA = "0xB28568", Offset = "0xB28568", VA = "0xB28568", Slot = "4")]
	public virtual void Awake()
	{
	}

	[Token(Token = "0x600051C")]
	[Address(RVA = "0xB28694", Offset = "0xB28694", VA = "0xB28694")]
	private void UpdateFunction()
	{
	}

	[Token(Token = "0x600051D")]
	[Address(RVA = "0xB299C0", Offset = "0xB299C0", VA = "0xB299C0", Slot = "5")]
	public virtual void FixedUpdate()
	{
	}

	[Token(Token = "0x600051E")]
	[Address(RVA = "0xB29BA0", Offset = "0xB29BA0", VA = "0xB29BA0", Slot = "6")]
	public virtual void Update()
	{
	}

	[Token(Token = "0x600051F")]
	[Address(RVA = "0xB290BC", Offset = "0xB290BC", VA = "0xB290BC")]
	private Vector3 ApplyInputVelocityChange(Vector3 velocity)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000520")]
	[Address(RVA = "0xB294EC", Offset = "0xB294EC", VA = "0xB294EC")]
	private Vector3 ApplyGravityAndJumping(Vector3 velocity)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000521")]
	[Address(RVA = "0xB29EF8", Offset = "0xB29EF8", VA = "0xB29EF8", Slot = "7")]
	public virtual void OnControllerColliderHit(ControllerColliderHit hit)
	{
	}

	[Token(Token = "0x6000522")]
	[Address(RVA = "0xB2994C", Offset = "0xB2994C", VA = "0xB2994C")]
	[IteratorStateMachine(typeof(<SubtractNewPlatformVelocity>d__20))]
	private IEnumerator SubtractNewPlatformVelocity()
	{
		return null;
	}

	[Token(Token = "0x6000523")]
	[Address(RVA = "0xB2989C", Offset = "0xB2989C", VA = "0xB2989C")]
	private bool MoveWithPlatform()
	{
		return default(bool);
	}

	[Token(Token = "0x6000524")]
	[Address(RVA = "0xB29BB0", Offset = "0xB29BB0", VA = "0xB29BB0")]
	private Vector3 GetDesiredHorizontalVelocity()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000525")]
	[Address(RVA = "0xB29D20", Offset = "0xB29D20", VA = "0xB29D20")]
	private Vector3 AdjustGroundVelocityToNormal(Vector3 hVelocity, Vector3 groundNormal)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000526")]
	[Address(RVA = "0xB29934", Offset = "0xB29934", VA = "0xB29934")]
	private bool IsGroundedTest()
	{
		return default(bool);
	}

	[Token(Token = "0x6000527")]
	[Address(RVA = "0xB2A100", Offset = "0xB2A100", VA = "0xB2A100", Slot = "8")]
	public virtual float GetMaxAcceleration(bool grounded)
	{
		return default(float);
	}

	[Token(Token = "0x6000528")]
	[Address(RVA = "0xB2A12C", Offset = "0xB2A12C", VA = "0xB2A12C", Slot = "9")]
	public virtual float CalculateJumpVerticalSpeed(float targetJumpHeight)
	{
		return default(float);
	}

	[Token(Token = "0x6000529")]
	[Address(RVA = "0xB2A154", Offset = "0xB2A154", VA = "0xB2A154", Slot = "10")]
	public virtual bool IsJumping()
	{
		return default(bool);
	}

	[Token(Token = "0x600052A")]
	[Address(RVA = "0xB2A170", Offset = "0xB2A170", VA = "0xB2A170", Slot = "11")]
	public virtual bool IsSliding()
	{
		return default(bool);
	}

	[Token(Token = "0x600052B")]
	[Address(RVA = "0xB2A1B0", Offset = "0xB2A1B0", VA = "0xB2A1B0", Slot = "12")]
	public virtual bool IsTouchingCeiling()
	{
		return default(bool);
	}

	[Token(Token = "0x600052C")]
	[Address(RVA = "0xB2A1D0", Offset = "0xB2A1D0", VA = "0xB2A1D0", Slot = "13")]
	public virtual bool IsGrounded()
	{
		return default(bool);
	}

	[Token(Token = "0x600052D")]
	[Address(RVA = "0xB2A1D8", Offset = "0xB2A1D8", VA = "0xB2A1D8", Slot = "14")]
	public virtual bool TooSteep()
	{
		return default(bool);
	}

	[Token(Token = "0x600052E")]
	[Address(RVA = "0xB2A220", Offset = "0xB2A220", VA = "0xB2A220", Slot = "15")]
	public virtual Vector3 GetDirection()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600052F")]
	[Address(RVA = "0xB2A22C", Offset = "0xB2A22C", VA = "0xB2A22C", Slot = "16")]
	public virtual void SetControllable(bool controllable)
	{
	}

	[Token(Token = "0x6000530")]
	[Address(RVA = "0xB2A238", Offset = "0xB2A238", VA = "0xB2A238", Slot = "17")]
	public virtual float MaxSpeedInDirection(Vector3 desiredMovementDirection)
	{
		return default(float);
	}

	[Token(Token = "0x6000531")]
	[Address(RVA = "0xB2A400", Offset = "0xB2A400", VA = "0xB2A400", Slot = "18")]
	public virtual void SetVelocity(Vector3 velocity)
	{
	}

	[Token(Token = "0x6000532")]
	[Address(RVA = "0xB2A4C8", Offset = "0xB2A4C8", VA = "0xB2A4C8")]
	public CharacterMotor()
	{
	}
}
[Serializable]
[Token(Token = "0x20000EE")]
[RequireComponent(typeof(CharacterMotor))]
[AddComponentMenu("Character/FPS Input Controller")]
public class FPSInputController : MonoBehaviour
{
	[Token(Token = "0x4000438")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private CharacterMotor motor;

	[Token(Token = "0x6000539")]
	[Address(RVA = "0xB2A93C", Offset = "0xB2A93C", VA = "0xB2A93C", Slot = "4")]
	public virtual void Awake()
	{
	}

	[Token(Token = "0x600053A")]
	[Address(RVA = "0xB2AA48", Offset = "0xB2AA48", VA = "0xB2AA48", Slot = "5")]
	public virtual void Update()
	{
	}

	[Token(Token = "0x600053B")]
	[Address(RVA = "0xB2AC24", Offset = "0xB2AC24", VA = "0xB2AC24")]
	public FPSInputController()
	{
	}
}
[Token(Token = "0x20000EF")]
[AddComponentMenu("Camera-Control/Mouse Look")]
public class MouseLook : MonoBehaviour
{
	[Token(Token = "0x20000F0")]
	public enum RotationAxes
	{
		[Token(Token = "0x4000442")]
		MouseXAndY,
		[Token(Token = "0x4000443")]
		MouseX,
		[Token(Token = "0x4000444")]
		MouseY
	}

	[Token(Token = "0x4000439")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RotationAxes axes;

	[Token(Token = "0x400043A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float sensitivityX;

	[Token(Token = "0x400043B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float sensitivityY;

	[Token(Token = "0x400043C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float minimumX;

	[Token(Token = "0x400043D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float maximumX;

	[Token(Token = "0x400043E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float minimumY;

	[Token(Token = "0x400043F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float maximumY;

	[Token(Token = "0x4000440")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float rotationY;

	[Token(Token = "0x600053C")]
	[Address(RVA = "0xB2AC2C", Offset = "0xB2AC2C", VA = "0xB2AC2C")]
	private void Update()
	{
	}

	[Token(Token = "0x600053D")]
	[Address(RVA = "0xB2ADF8", Offset = "0xB2ADF8", VA = "0xB2ADF8")]
	private void Start()
	{
	}

	[Token(Token = "0x600053E")]
	[Address(RVA = "0xB2AEB4", Offset = "0xB2AEB4", VA = "0xB2AEB4")]
	public MouseLook()
	{
	}
}
[Serializable]
[Token(Token = "0x20000F1")]
[RequireComponent(typeof(CharacterMotor))]
[AddComponentMenu("Character/Platform Input Controller")]
public class PlatformInputController : MonoBehaviour
{
	[Token(Token = "0x4000445")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool autoRotate;

	[Token(Token = "0x4000446")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float maxRotationSpeed;

	[Token(Token = "0x4000447")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private CharacterMotor motor;

	[Token(Token = "0x600053F")]
	[Address(RVA = "0xB2AED4", Offset = "0xB2AED4", VA = "0xB2AED4", Slot = "4")]
	public virtual void Awake()
	{
	}

	[Token(Token = "0x6000540")]
	[Address(RVA = "0xB2AFE0", Offset = "0xB2AFE0", VA = "0xB2AFE0", Slot = "5")]
	public virtual void Update()
	{
	}

	[Token(Token = "0x6000541")]
	[Address(RVA = "0xB2B3C4", Offset = "0xB2B3C4", VA = "0xB2B3C4", Slot = "6")]
	public virtual Vector3 ProjectOntoPlane(Vector3 v, Vector3 normal)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000542")]
	[Address(RVA = "0xB2B4C4", Offset = "0xB2B4C4", VA = "0xB2B4C4", Slot = "7")]
	public virtual Vector3 ConstantSlerp(Vector3 from, Vector3 to, float angle)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000543")]
	[Address(RVA = "0xB2B60C", Offset = "0xB2B60C", VA = "0xB2B60C")]
	public PlatformInputController()
	{
	}
}
[Serializable]
[Token(Token = "0x20000F2")]
public class ThirdPersonCamera : MonoBehaviour
{
	[Token(Token = "0x4000448")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform cameraTransform;

	[Token(Token = "0x4000449")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform _target;

	[Token(Token = "0x400044A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float distance;

	[Token(Token = "0x400044B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float height;

	[Token(Token = "0x400044C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float angularSmoothLag;

	[Token(Token = "0x400044D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float angularMaxSpeed;

	[Token(Token = "0x400044E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float heightSmoothLag;

	[Token(Token = "0x400044F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float snapSmoothLag;

	[Token(Token = "0x4000450")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float snapMaxSpeed;

	[Token(Token = "0x4000451")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float clampHeadPositionScreenSpace;

	[Token(Token = "0x4000452")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float lockCameraTimeout;

	[Token(Token = "0x4000453")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Vector3 headOffset;

	[Token(Token = "0x4000454")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3 centerOffset;

	[Token(Token = "0x4000455")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float heightVelocity;

	[Token(Token = "0x4000456")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float angleVelocity;

	[Token(Token = "0x4000457")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool snap;

	[Token(Token = "0x4000458")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private ThirdPersonController controller;

	[Token(Token = "0x4000459")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float targetHeight;

	[Token(Token = "0x6000544")]
	[Address(RVA = "0xB2B634", Offset = "0xB2B634", VA = "0xB2B634", Slot = "4")]
	public virtual void Awake()
	{
	}

	[Token(Token = "0x6000545")]
	[Address(RVA = "0xB2BA18", Offset = "0xB2BA18", VA = "0xB2BA18", Slot = "5")]
	public virtual void DebugDrawStuff()
	{
	}

	[Token(Token = "0x6000546")]
	[Address(RVA = "0xB2BAE0", Offset = "0xB2BAE0", VA = "0xB2BAE0", Slot = "6")]
	public virtual float AngleDistance(float a, float b)
	{
		return default(float);
	}

	[Token(Token = "0x6000547")]
	[Address(RVA = "0xB2BB2C", Offset = "0xB2BB2C", VA = "0xB2BB2C", Slot = "7")]
	public virtual void Apply(Transform dummyTarget, Vector3 dummyCenter)
	{
	}

	[Token(Token = "0x6000548")]
	[Address(RVA = "0xB2C024", Offset = "0xB2C024", VA = "0xB2C024", Slot = "8")]
	public virtual void LateUpdate()
	{
	}

	[Token(Token = "0x6000549")]
	[Address(RVA = "0xB2C090", Offset = "0xB2C090", VA = "0xB2C090", Slot = "9")]
	public virtual void Cut(Transform dummyTarget, Vector3 dummyCenter)
	{
	}

	[Token(Token = "0x600054A")]
	[Address(RVA = "0xB2C140", Offset = "0xB2C140", VA = "0xB2C140", Slot = "10")]
	public virtual void SetUpRotation(Vector3 centerPos, Vector3 headPos)
	{
	}

	[Token(Token = "0x600054B")]
	[Address(RVA = "0xB2C594", Offset = "0xB2C594", VA = "0xB2C594", Slot = "11")]
	public virtual Vector3 GetCenterOffset()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600054C")]
	[Address(RVA = "0xB2C5A0", Offset = "0xB2C5A0", VA = "0xB2C5A0")]
	public ThirdPersonCamera()
	{
	}
}
[Token(Token = "0x20000F3")]
public enum CharacterState
{
	[Token(Token = "0x400045B")]
	Idle,
	[Token(Token = "0x400045C")]
	Walking,
	[Token(Token = "0x400045D")]
	Trotting,
	[Token(Token = "0x400045E")]
	Running,
	[Token(Token = "0x400045F")]
	Jumping
}
[Serializable]
[Token(Token = "0x20000F4")]
[RequireComponent(typeof(CharacterController))]
public class ThirdPersonController : MonoBehaviour
{
	[Token(Token = "0x4000460")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationClip idleAnimation;

	[Token(Token = "0x4000461")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationClip walkAnimation;

	[Token(Token = "0x4000462")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationClip runAnimation;

	[Token(Token = "0x4000463")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public AnimationClip jumpPoseAnimation;

	[Token(Token = "0x4000464")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float walkMaxAnimationSpeed;

	[Token(Token = "0x4000465")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float trotMaxAnimationSpeed;

	[Token(Token = "0x4000466")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float runMaxAnimationSpeed;

	[Token(Token = "0x4000467")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float jumpAnimationSpeed;

	[Token(Token = "0x4000468")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float landAnimationSpeed;

	[Token(Token = "0x4000469")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Animation _animation;

	[Token(Token = "0x400046A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private CharacterState _characterState;

	[Token(Token = "0x400046B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float walkSpeed;

	[Token(Token = "0x400046C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float trotSpeed;

	[Token(Token = "0x400046D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float runSpeed;

	[Token(Token = "0x400046E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float inAirControlAcceleration;

	[Token(Token = "0x400046F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float jumpHeight;

	[Token(Token = "0x4000470")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float gravity;

	[Token(Token = "0x4000471")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float speedSmoothing;

	[Token(Token = "0x4000472")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float rotateSpeed;

	[Token(Token = "0x4000473")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float trotAfterSeconds;

	[Token(Token = "0x4000474")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public bool canJump;

	[Token(Token = "0x4000475")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float jumpRepeatTime;

	[Token(Token = "0x4000476")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float jumpTimeout;

	[Token(Token = "0x4000477")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private float groundedTimeout;

	[Token(Token = "0x4000478")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float lockCameraTimer;

	[Token(Token = "0x4000479")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private Vector3 moveDirection;

	[Token(Token = "0x400047A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float verticalSpeed;

	[Token(Token = "0x400047B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private float moveSpeed;

	[Token(Token = "0x400047C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private CollisionFlags collisionFlags;

	[Token(Token = "0x400047D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private bool jumping;

	[Token(Token = "0x400047E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
	private bool jumpingReachedApex;

	[Token(Token = "0x400047F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAE")]
	private bool movingBack;

	[Token(Token = "0x4000480")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAF")]
	private bool isMoving;

	[Token(Token = "0x4000481")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float walkTimeStart;

	[Token(Token = "0x4000482")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private float lastJumpButtonTime;

	[Token(Token = "0x4000483")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float lastJumpTime;

	[Token(Token = "0x4000484")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private float lastJumpStartHeight;

	[Token(Token = "0x4000485")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private Vector3 inAirVelocity;

	[Token(Token = "0x4000486")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	private float lastGroundedTime;

	[Token(Token = "0x4000487")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private bool isControllable;

	[Token(Token = "0x600054D")]
	[Address(RVA = "0xB2C644", Offset = "0xB2C644", VA = "0xB2C644", Slot = "4")]
	public virtual void Awake()
	{
	}

	[Token(Token = "0x600054E")]
	[Address(RVA = "0xB2C9B0", Offset = "0xB2C9B0", VA = "0xB2C9B0", Slot = "5")]
	public virtual void UpdateSmoothedMovementDirection()
	{
	}

	[Token(Token = "0x600054F")]
	[Address(RVA = "0xB2D034", Offset = "0xB2D034", VA = "0xB2D034", Slot = "6")]
	public virtual void ApplyJumping()
	{
	}

	[Token(Token = "0x6000550")]
	[Address(RVA = "0xB2D10C", Offset = "0xB2D10C", VA = "0xB2D10C", Slot = "7")]
	public virtual void ApplyGravity()
	{
	}

	[Token(Token = "0x6000551")]
	[Address(RVA = "0xB2D1EC", Offset = "0xB2D1EC", VA = "0xB2D1EC", Slot = "8")]
	public virtual float CalculateJumpVerticalSpeed(float targetJumpHeight)
	{
		return default(float);
	}

	[Token(Token = "0x6000552")]
	[Address(RVA = "0xB2D200", Offset = "0xB2D200", VA = "0xB2D200", Slot = "9")]
	public virtual void DidJump()
	{
	}

	[Token(Token = "0x6000553")]
	[Address(RVA = "0xB2D254", Offset = "0xB2D254", VA = "0xB2D254", Slot = "10")]
	public virtual void Update()
	{
	}

	[Token(Token = "0x6000554")]
	[Address(RVA = "0xB2D8C0", Offset = "0xB2D8C0", VA = "0xB2D8C0", Slot = "11")]
	public virtual void OnControllerColliderHit(ControllerColliderHit hit)
	{
	}

	[Token(Token = "0x6000555")]
	[Address(RVA = "0xB2D8D8", Offset = "0xB2D8D8", VA = "0xB2D8D8", Slot = "12")]
	public virtual float GetSpeed()
	{
		return default(float);
	}

	[Token(Token = "0x6000556")]
	[Address(RVA = "0xB2D8E0", Offset = "0xB2D8E0", VA = "0xB2D8E0", Slot = "13")]
	public virtual bool IsJumping()
	{
		return default(bool);
	}

	[Token(Token = "0x6000557")]
	[Address(RVA = "0xB2D8E8", Offset = "0xB2D8E8", VA = "0xB2D8E8", Slot = "14")]
	public virtual bool IsGrounded()
	{
		return default(bool);
	}

	[Token(Token = "0x6000558")]
	[Address(RVA = "0xB2D8F4", Offset = "0xB2D8F4", VA = "0xB2D8F4", Slot = "15")]
	public virtual Vector3 GetDirection()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000559")]
	[Address(RVA = "0xB2D900", Offset = "0xB2D900", VA = "0xB2D900", Slot = "16")]
	public virtual bool IsMovingBackwards()
	{
		return default(bool);
	}

	[Token(Token = "0x600055A")]
	[Address(RVA = "0xB2D908", Offset = "0xB2D908", VA = "0xB2D908", Slot = "17")]
	public virtual float GetLockCameraTimer()
	{
		return default(float);
	}

	[Token(Token = "0x600055B")]
	[Address(RVA = "0xB2D910", Offset = "0xB2D910", VA = "0xB2D910", Slot = "18")]
	public virtual bool IsMoving()
	{
		return default(bool);
	}

	[Token(Token = "0x600055C")]
	[Address(RVA = "0xB2D998", Offset = "0xB2D998", VA = "0xB2D998", Slot = "19")]
	public virtual bool HasJumpReachedApex()
	{
		return default(bool);
	}

	[Token(Token = "0x600055D")]
	[Address(RVA = "0xB2D9A0", Offset = "0xB2D9A0", VA = "0xB2D9A0", Slot = "20")]
	public virtual bool IsGroundedWithTimeout()
	{
		return default(bool);
	}

	[Token(Token = "0x600055E")]
	[Address(RVA = "0xB2D9D0", Offset = "0xB2D9D0", VA = "0xB2D9D0", Slot = "21")]
	public virtual void Reset()
	{
	}

	[Token(Token = "0x600055F")]
	[Address(RVA = "0xB2DA2C", Offset = "0xB2DA2C", VA = "0xB2DA2C")]
	public ThirdPersonController()
	{
	}
}
[Serializable]
[Token(Token = "0x20000F5")]
[AddComponentMenu("Camera-Control/Smooth Look At")]
public class SmoothLookAt : MonoBehaviour
{
	[Token(Token = "0x4000488")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x4000489")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float damping;

	[Token(Token = "0x400048A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool smooth;

	[Token(Token = "0x6000560")]
	[Address(RVA = "0xB2DB00", Offset = "0xB2DB00", VA = "0xB2DB00", Slot = "4")]
	public virtual void LateUpdate()
	{
	}

	[Token(Token = "0x6000561")]
	[Address(RVA = "0xB2DCC8", Offset = "0xB2DCC8", VA = "0xB2DCC8", Slot = "5")]
	public virtual void Start()
	{
	}

	[Token(Token = "0x6000562")]
	[Address(RVA = "0xB2DD84", Offset = "0xB2DD84", VA = "0xB2DD84")]
	public SmoothLookAt()
	{
	}
}
namespace FSG.MeshAnimator
{
	[Token(Token = "0x20000F6")]
	[ExecuteInEditMode]
	public class AttachObjectToFace : MonoBehaviour
	{
		[Token(Token = "0x400048B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MeshAnimator meshAnimator;

		[Token(Token = "0x400048C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int faceIndex;

		[Token(Token = "0x400048D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 offset;

		[Token(Token = "0x400048E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 rotationOffset;

		[Token(Token = "0x400048F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool drawFaceDebugInfo;

		[Token(Token = "0x4000490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Color debugColor;

		[Token(Token = "0x4000491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform mTransform;

		[Token(Token = "0x4000492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform mMeshAnimatorTransform;

		[Token(Token = "0x4000493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int[] triangles;

		[Token(Token = "0x4000494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3[] vertices;

		[Token(Token = "0x6000563")]
		[Address(RVA = "0xB2DDAC", Offset = "0xB2DDAC", VA = "0xB2DDAC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000564")]
		[Address(RVA = "0xB2DEE8", Offset = "0xB2DEE8", VA = "0xB2DEE8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000565")]
		[Address(RVA = "0xB2E8FC", Offset = "0xB2E8FC", VA = "0xB2E8FC")]
		public AttachObjectToFace()
		{
		}
	}
	[Token(Token = "0x20000F7")]
	public class MecanimMeshAnimatorController : MonoBehaviour
	{
		[Token(Token = "0x4000495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Animator animator;

		[Token(Token = "0x4000496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MeshAnimator meshAnimator;

		[Token(Token = "0x4000497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool crossFade;

		[Token(Token = "0x4000498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Dictionary<int, string> animHashes;

		[Token(Token = "0x4000499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string cAnim;

		[Token(Token = "0x6000566")]
		[Address(RVA = "0xB2E910", Offset = "0xB2E910", VA = "0xB2E910", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000567")]
		[Address(RVA = "0xB2EABC", Offset = "0xB2EABC", VA = "0xB2EABC", Slot = "5")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6000568")]
		[Address(RVA = "0xB2ECAC", Offset = "0xB2ECAC", VA = "0xB2ECAC")]
		public MecanimMeshAnimatorController()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000F8")]
	public class MeshAnimation : ScriptableObject
	{
		[Token(Token = "0x20000F9")]
		public enum RootMotionMode
		{
			[Token(Token = "0x40004B2")]
			None,
			[Token(Token = "0x40004B3")]
			Baked,
			[Token(Token = "0x40004B4")]
			AppliedToTransform
		}

		[Token(Token = "0x20000FA")]
		private sealed class VertexEntry
		{
			[Token(Token = "0x40004B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int _reserved;

			[Token(Token = "0x40004B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int[] TriangleIndex;

			[Token(Token = "0x40004B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int[] VertexIndex;

			[Token(Token = "0x40004B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int _count;

			[Token(Token = "0x17000051")]
			public int Count
			{
				[Token(Token = "0x6000578")]
				[Address(RVA = "0xB3187C", Offset = "0xB3187C", VA = "0xB3187C")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x6000579")]
			[Address(RVA = "0xB31884", Offset = "0xB31884", VA = "0xB31884")]
			public VertexEntry()
			{
			}

			[Token(Token = "0x600057A")]
			[Address(RVA = "0xB314A4", Offset = "0xB314A4", VA = "0xB314A4")]
			public void Add(int vertIndex, int triIndex)
			{
			}

			[Token(Token = "0x600057B")]
			[Address(RVA = "0xB31408", Offset = "0xB31408", VA = "0xB31408")]
			public void PopulateArrays()
			{
			}

			[Token(Token = "0x600057C")]
			[Address(RVA = "0xB3157C", Offset = "0xB3157C", VA = "0xB3157C")]
			public void Clear()
			{
			}
		}

		[Token(Token = "0x400049A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static Dictionary<Mesh, Dictionary<MeshAnimation, Mesh[]>> generatedFrames;

		[Token(Token = "0x400049B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string animationName;

		[Token(Token = "0x400049C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool preGenerateFrames;

		[Token(Token = "0x400049D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float playbackSpeed;

		[Token(Token = "0x400049E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int smoothNormalsAngle;

		[Token(Token = "0x400049F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool instantNormalCalculation;

		[Token(Token = "0x40004A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool recalculateNormalsOnRotation;

		[Token(Token = "0x40004A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public WrapMode wrapMode;

		[Token(Token = "0x40004A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[HideInInspector]
		public RootMotionMode rootMotionMode;

		[Token(Token = "0x40004A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public DeltaCompressedFrameData compressedFrameData;

		[Token(Token = "0x40004A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public string[] exposedTransforms;

		[Token(Token = "0x40004A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public MeshAnimationEvent[] events;

		[Token(Token = "0x40004A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float length;

		[Token(Token = "0x40004A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[HideInInspector]
		public int frameSkip;

		[NonSerialized]
		[Token(Token = "0x40004A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Mesh[] frames;

		[NonSerialized]
		[Token(Token = "0x40004A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int totalFrames;

		[NonSerialized]
		[Token(Token = "0x40004AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool[] generatedMeshes;

		[NonSerialized]
		[Token(Token = "0x40004AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool completelyGenerated;

		[NonSerialized]
		[Token(Token = "0x40004AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private MeshFrameData[] decompressedFrameData;

		[NonSerialized]
		[Token(Token = "0x40004AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Quaternion lastRotation;

		[Token(Token = "0x40004AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Queue<Action> mainThreadActions;

		[Token(Token = "0x40004AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Dictionary<Mesh, KeyValuePair<int[], Vector3[]>> meshInfoCache;

		[Token(Token = "0x40004B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static IEqualityComparer<Vector3> VectorComparer;

		[Token(Token = "0x17000050")]
		[HideInInspector]
		public MeshFrameData[] frameData
		{
			[Token(Token = "0x6000569")]
			[Address(RVA = "0xB2ED60", Offset = "0xB2ED60", VA = "0xB2ED60")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600056A")]
		[Address(RVA = "0xB2F260", Offset = "0xB2F260", VA = "0xB2F260")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600056B")]
		[Address(RVA = "0xB2F310", Offset = "0xB2F310", VA = "0xB2F310")]
		public void GenerateFrames(Mesh baseMesh)
		{
		}

		[Token(Token = "0x600056C")]
		[Address(RVA = "0xB2F9F8", Offset = "0xB2F9F8", VA = "0xB2F9F8")]
		public void GenerateFrameIfNeeded(Mesh baseMesh, int frame)
		{
		}

		[Token(Token = "0x600056D")]
		[Address(RVA = "0xB2E608", Offset = "0xB2E608", VA = "0xB2E608")]
		public Vector3[] GetFrame(int frame)
		{
			return null;
		}

		[Token(Token = "0x600056E")]
		[Address(RVA = "0xB2FE8C", Offset = "0xB2FE8C", VA = "0xB2FE8C")]
		public MeshFrameData GetNearestFrame(int frame)
		{
			return null;
		}

		[Token(Token = "0x600056F")]
		[Address(RVA = "0xB30004", Offset = "0xB30004", VA = "0xB30004")]
		public void DisplayFrame(MeshFilter meshFilter, int frame, int previousFrame)
		{
		}

		[Token(Token = "0x6000570")]
		[Address(RVA = "0xB30EB8", Offset = "0xB30EB8", VA = "0xB30EB8")]
		public void FireEvents(GameObject eventReciever, int frame)
		{
		}

		[Token(Token = "0x6000571")]
		[Address(RVA = "0xB31038", Offset = "0xB31038", VA = "0xB31038")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000572")]
		[Address(RVA = "0xB2FE1C", Offset = "0xB2FE1C", VA = "0xB2FE1C")]
		private void CheckFullGeneration(int newFrame)
		{
		}

		[Token(Token = "0x6000573")]
		[Address(RVA = "0xB2F5DC", Offset = "0xB2F5DC", VA = "0xB2F5DC")]
		private Mesh GenerateFrame(Mesh baseMesh, int frame)
		{
			return null;
		}

		[Token(Token = "0x6000574")]
		[Address(RVA = "0xB31174", Offset = "0xB31174", VA = "0xB31174")]
		private void RecalculateNormals(Mesh mesh, float angle)
		{
		}

		[Token(Token = "0x6000575")]
		[Address(RVA = "0xB3010C", Offset = "0xB3010C", VA = "0xB3010C")]
		private void RecalculateNormals(Mesh mesh, float angle, int[] triangles, Vector3[] vertices, bool instant = false)
		{
		}

		[Token(Token = "0x6000576")]
		[Address(RVA = "0xB31630", Offset = "0xB31630", VA = "0xB31630")]
		public MeshAnimation()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20000FE")]
	public class MeshAnimationEvent
	{
		[Token(Token = "0x20000FF")]
		public enum Mode : byte
		{
			[Token(Token = "0x40004C8")]
			Data,
			[Token(Token = "0x40004C9")]
			String,
			[Token(Token = "0x40004CA")]
			Float
		}

		[Token(Token = "0x40004C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string methodName;

		[Token(Token = "0x40004C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int frame;

		[Token(Token = "0x40004C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Mode eventType;

		[Token(Token = "0x40004C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string stringValue;

		[Token(Token = "0x40004C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float floatValue;

		[Token(Token = "0x40004C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.Object data;

		[Token(Token = "0x6000585")]
		[Address(RVA = "0xB30F34", Offset = "0xB30F34", VA = "0xB30F34")]
		public void FireEvent(GameObject eventReciever)
		{
		}

		[Token(Token = "0x6000586")]
		[Address(RVA = "0xB31A88", Offset = "0xB31A88", VA = "0xB31A88")]
		public MeshAnimationEvent()
		{
		}
	}
	[Token(Token = "0x2000100")]
	[AddComponentMenu("Miscellaneous/Mesh Animator")]
	[RequireComponent(typeof(MeshFilter))]
	public class MeshAnimator : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000101")]
		public class MeshAnimatorLODLevel
		{
			[Token(Token = "0x40004F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int fps;

			[Token(Token = "0x40004F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float distance;

			[Token(Token = "0x60005A7")]
			[Address(RVA = "0xB34FDC", Offset = "0xB34FDC", VA = "0xB34FDC")]
			public MeshAnimatorLODLevel()
			{
			}
		}

		[Token(Token = "0x2000102")]
		private struct CurrentCrossFade
		{
			[Token(Token = "0x40004F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public MeshFrameData fromFrame;

			[Token(Token = "0x40004F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public MeshFrameData toFrame;

			[Token(Token = "0x40004F7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int framesNeeded;

			[Token(Token = "0x40004F8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int currentFrame;

			[Token(Token = "0x40004F9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int generatedFrame;

			[Token(Token = "0x40004FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public bool isFading;

			[Token(Token = "0x40004FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float endTime;

			[Token(Token = "0x40004FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public CrossFadeFrameData frame;

			[Token(Token = "0x60005A8")]
			[Address(RVA = "0xB3266C", Offset = "0xB3266C", VA = "0xB3266C")]
			public void Reset()
			{
			}

			[Token(Token = "0x60005A9")]
			[Address(RVA = "0xB333A4", Offset = "0xB333A4", VA = "0xB333A4")]
			public void PopulateFrame(int length)
			{
			}

			[Token(Token = "0x60005AA")]
			[Address(RVA = "0xB344F0", Offset = "0xB344F0", VA = "0xB344F0")]
			public void ReturnFrame()
			{
			}
		}

		[Token(Token = "0x2000103")]
		private class CrossFadeFrameData
		{
			[Token(Token = "0x40004FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3[] positions;

			[Token(Token = "0x40004FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3[] normals;

			[Token(Token = "0x40004FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Bounds bounds;

			[Token(Token = "0x60005AB")]
			[Address(RVA = "0xB34FE4", Offset = "0xB34FE4", VA = "0xB34FE4")]
			public CrossFadeFrameData()
			{
			}
		}

		[Token(Token = "0x40004CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Mesh baseMesh;

		[Token(Token = "0x40004CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MeshAnimation defaultAnimation;

		[Token(Token = "0x40004CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MeshAnimation[] animations;

		[Token(Token = "0x40004CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float speed;

		[Token(Token = "0x40004CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool updateWhenOffscreen;

		[Token(Token = "0x40004D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool playAutomatically;

		[Token(Token = "0x40004D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		public bool resetOnEnable;

		[Token(Token = "0x40004D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject eventReciever;

		[Token(Token = "0x40004D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int FPS;

		[Token(Token = "0x40004D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool skipLastLoopFrame;

		[Token(Token = "0x40004D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		public bool recalculateCrossfadeNormals;

		[Token(Token = "0x40004D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public MeshFilter meshFilter;

		[Token(Token = "0x40004D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Action<string> OnAnimationFinished;

		[Token(Token = "0x40004D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Action OnFrameUpdated;

		[Token(Token = "0x40004D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Action<bool> OnVisibilityChanged;

		[Token(Token = "0x40004DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int currentFrame;

		[Token(Token = "0x40004DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform LODCamera;

		[Token(Token = "0x40004DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public MeshAnimatorLODLevel[] LODLevels;

		[Token(Token = "0x40004DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideInInspector]
		public float nextTick;

		[Token(Token = "0x40004DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Dictionary<string, int> animIndexes;

		[Token(Token = "0x40004DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int currentAnimIndex;

		[Token(Token = "0x40004E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool isVisible;

		[Token(Token = "0x40004E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float lastFrameTime;

		[Token(Token = "0x40004E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private bool pingPong;

		[Token(Token = "0x40004E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
		private bool isPaused;

		[Token(Token = "0x40004E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float currentAnimTime;

		[Token(Token = "0x40004E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Mesh crossFadeMesh;

		[Token(Token = "0x40004E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Queue<string> queuedAnims;

		[Token(Token = "0x40004E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private CurrentCrossFade currentCrossFade;

		[Token(Token = "0x40004E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private int currentLodLevel;

		[Token(Token = "0x40004E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Transform mTransform;

		[Token(Token = "0x40004EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Dictionary<string, Transform> childMap;

		[Token(Token = "0x40004EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private bool initialized;

		[Token(Token = "0x40004EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private int previousEventFrame;

		[Token(Token = "0x40004ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<Thread> cfThreads;

		[Token(Token = "0x40004EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static bool shutDownThreads;

		[Token(Token = "0x40004EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Queue<MeshAnimator> crossfadeAnimators;

		[Token(Token = "0x40004F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static AutoResetEvent crossfadeWaitHandle;

		[Token(Token = "0x40004F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static Dictionary<Mesh, int> mMeshCount;

		[Token(Token = "0x40004F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static Dictionary<Mesh, Stack<Mesh>> crossFadePool;

		[Token(Token = "0x17000052")]
		public MeshAnimation currentAnimation
		{
			[Token(Token = "0x6000587")]
			[Address(RVA = "0xB2E5B8", Offset = "0xB2E5B8", VA = "0xB2E5B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000588")]
		[Address(RVA = "0xB31A90", Offset = "0xB31A90", VA = "0xB31A90")]
		private void Start()
		{
		}

		[Token(Token = "0x6000589")]
		[Address(RVA = "0xB32274", Offset = "0xB32274", VA = "0xB32274")]
		private void OnBecameVisible()
		{
		}

		[Token(Token = "0x600058A")]
		[Address(RVA = "0xB3229C", Offset = "0xB3229C", VA = "0xB3229C")]
		private void OnBecameInvisible()
		{
		}

		[Token(Token = "0x600058B")]
		[Address(RVA = "0xB322C0", Offset = "0xB322C0", VA = "0xB322C0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600058C")]
		[Address(RVA = "0xB32554", Offset = "0xB32554", VA = "0xB32554")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600058D")]
		[Address(RVA = "0xB326B0", Offset = "0xB326B0", VA = "0xB326B0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600058E")]
		[Address(RVA = "0xB32E70", Offset = "0xB32E70", VA = "0xB32E70")]
		private void FireAnimationEvents(MeshAnimation cAnim, float totalSpeed, bool finished)
		{
		}

		[Token(Token = "0x600058F")]
		[Address(RVA = "0xB32FDC", Offset = "0xB32FDC", VA = "0xB32FDC")]
		private Mesh GetCrossfadeFromPool()
		{
			return null;
		}

		[Token(Token = "0x6000590")]
		[Address(RVA = "0xB32C98", Offset = "0xB32C98", VA = "0xB32C98")]
		private void ReturnCrossfadeToPool()
		{
		}

		[MethodImpl(32)]
		[Token(Token = "0x6000591")]
		[Address(RVA = "0xB33158", Offset = "0xB33158", VA = "0xB33158")]
		private void GenerateCrossfadeFrame()
		{
		}

		[Token(Token = "0x6000592")]
		[Address(RVA = "0xB334E0", Offset = "0xB334E0", VA = "0xB334E0")]
		private static void EnqueueAnimatorForCrossfade(MeshAnimator animator)
		{
		}

		[Token(Token = "0x6000593")]
		[Address(RVA = "0xB3364C", Offset = "0xB3364C", VA = "0xB3364C")]
		private static MeshAnimator DequeueAnimatorForCrossfade()
		{
			return null;
		}

		[Token(Token = "0x6000594")]
		[Address(RVA = "0xB337DC", Offset = "0xB337DC", VA = "0xB337DC")]
		private static Matrix4x4 MatrixLerp(Matrix4x4 from, Matrix4x4 to, float time)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6000595")]
		[Address(RVA = "0xB33894", Offset = "0xB33894", VA = "0xB33894")]
		private static void GenerateThreadedCrossfade()
		{
		}

		[Token(Token = "0x6000596")]
		[Address(RVA = "0xB33A18", Offset = "0xB33A18", VA = "0xB33A18")]
		public void UpdateTick(float time)
		{
		}

		[Token(Token = "0x6000597")]
		[Address(RVA = "0xB34684", Offset = "0xB34684", VA = "0xB34684")]
		public void Crossfade(int index)
		{
		}

		[Token(Token = "0x6000598")]
		[Address(RVA = "0xB2EC20", Offset = "0xB2EC20", VA = "0xB2EC20")]
		public void Crossfade(string anim)
		{
		}

		[Token(Token = "0x6000599")]
		[Address(RVA = "0xB34690", Offset = "0xB34690", VA = "0xB34690")]
		public void Crossfade(int index, float speed)
		{
		}

		[Token(Token = "0x600059A")]
		[Address(RVA = "0xB347F8", Offset = "0xB347F8", VA = "0xB347F8")]
		public void Crossfade(string anim, float speed)
		{
		}

		[Token(Token = "0x600059B")]
		[Address(RVA = "0xB3491C", Offset = "0xB3491C", VA = "0xB3491C")]
		public void Play()
		{
		}

		[Token(Token = "0x600059C")]
		[Address(RVA = "0xB2EC2C", Offset = "0xB2EC2C", VA = "0xB2EC2C")]
		public void Play(string anim)
		{
		}

		[Token(Token = "0x600059D")]
		[Address(RVA = "0xB34880", Offset = "0xB34880", VA = "0xB34880")]
		public void Play(int index)
		{
		}

		[Token(Token = "0x600059E")]
		[Address(RVA = "0xB34924", Offset = "0xB34924", VA = "0xB34924")]
		public void PlayRandom(params string[] anim)
		{
		}

		[Token(Token = "0x600059F")]
		[Address(RVA = "0xB349F0", Offset = "0xB349F0", VA = "0xB349F0")]
		public void PlayQueued(string anim)
		{
		}

		[Token(Token = "0x60005A0")]
		[Address(RVA = "0xB34AA0", Offset = "0xB34AA0", VA = "0xB34AA0")]
		public void Pause()
		{
		}

		[Token(Token = "0x60005A1")]
		[Address(RVA = "0xB34AAC", Offset = "0xB34AAC", VA = "0xB34AAC")]
		public void RestartAnim()
		{
		}

		[Token(Token = "0x60005A2")]
		[Address(RVA = "0xB34AB4", Offset = "0xB34AB4", VA = "0xB34AB4")]
		public void SetTime(float time, bool instantUpdate = false)
		{
		}

		[Token(Token = "0x60005A3")]
		[Address(RVA = "0xB34B88", Offset = "0xB34B88", VA = "0xB34B88")]
		public void SetTimeNormalized(float time, bool instantUpdate = false)
		{
		}

		[Token(Token = "0x60005A4")]
		[Address(RVA = "0xB34C60", Offset = "0xB34C60", VA = "0xB34C60")]
		public MeshAnimation GetClip(string clipname)
		{
			return null;
		}

		[Token(Token = "0x60005A5")]
		[Address(RVA = "0xB34D10", Offset = "0xB34D10", VA = "0xB34D10")]
		public MeshAnimator()
		{
		}
	}
	[Token(Token = "0x2000104")]
	public class MeshAnimatorManager : MonoBehaviour
	{
		[Token(Token = "0x4000500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static MeshAnimatorManager mInstance;

		[Token(Token = "0x4000501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static List<MeshAnimator> mAnimators;

		[Token(Token = "0x17000053")]
		public static int AnimatorCount
		{
			[Token(Token = "0x60005AC")]
			[Address(RVA = "0xB321AC", Offset = "0xB321AC", VA = "0xB321AC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000054")]
		public static MeshAnimatorManager Instance
		{
			[Token(Token = "0x60005AD")]
			[Address(RVA = "0xB34FEC", Offset = "0xB34FEC", VA = "0xB34FEC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005AE")]
		[Address(RVA = "0xB32420", Offset = "0xB32420", VA = "0xB32420")]
		public static void AddAnimator(MeshAnimator animator)
		{
		}

		[Token(Token = "0x60005AF")]
		[Address(RVA = "0xB325EC", Offset = "0xB325EC", VA = "0xB325EC")]
		public static void RemoveAnimator(MeshAnimator animator)
		{
		}

		[Token(Token = "0x60005B0")]
		[Address(RVA = "0xB351B4", Offset = "0xB351B4", VA = "0xB351B4")]
		private void Update()
		{
		}

		[Token(Token = "0x60005B1")]
		[Address(RVA = "0xB352B4", Offset = "0xB352B4", VA = "0xB352B4")]
		public MeshAnimatorManager()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000105")]
	public class MeshFrameData
	{
		[NonSerialized]
		[Token(Token = "0x4000502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Vector3[] decompressed;

		[NonSerialized]
		[Token(Token = "0x4000503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Matrix4x4[] exposedTransforms;

		[NonSerialized]
		[Token(Token = "0x4000504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 rootMotionPosition;

		[NonSerialized]
		[Token(Token = "0x4000505")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Quaternion rootMotionRotation;

		[Token(Token = "0x17000055")]
		public Vector3[] verts
		{
			[Token(Token = "0x60005B3")]
			[Address(RVA = "0xB3536C", Offset = "0xB3536C", VA = "0xB3536C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60005B4")]
		[Address(RVA = "0xB35374", Offset = "0xB35374", VA = "0xB35374")]
		public void SetVerts(Vector3[] v)
		{
		}

		[Token(Token = "0x60005B5")]
		[Address(RVA = "0xB3537C", Offset = "0xB3537C", VA = "0xB3537C", Slot = "0")]
		public override bool Equals(object obj)
		{
			return default(bool);
		}

		[Token(Token = "0x60005B6")]
		[Address(RVA = "0xB354A0", Offset = "0xB354A0", VA = "0xB354A0", Slot = "2")]
		public override int GetHashCode()
		{
			return default(int);
		}

		[Token(Token = "0x60005B7")]
		[Address(RVA = "0xB354A8", Offset = "0xB354A8", VA = "0xB354A8")]
		public MeshFrameData()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000106")]
	public class DeltaCompressedFrameData
	{
		[Token(Token = "0x4000506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float compressionAccuracy;

		[Token(Token = "0x4000507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float accuracy;

		[Token(Token = "0x4000508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int sizeOffset;

		[Token(Token = "0x4000509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int vertLength;

		[Token(Token = "0x400050A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int exposedLength;

		[Token(Token = "0x400050B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public short[] positionsUShort;

		[Token(Token = "0x400050C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public int[] positions;

		[Token(Token = "0x400050D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public int[] frameIndexes;

		[Token(Token = "0x400050E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public Matrix4x4[] exposedTransforms;

		[Token(Token = "0x400050F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public Vector3[] rootMotionPositions;

		[Token(Token = "0x4000510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public Quaternion[] rootMotionRotations;

		[Token(Token = "0x60005B8")]
		[Address(RVA = "0xB2EE0C", Offset = "0xB2EE0C", VA = "0xB2EE0C")]
		public static implicit operator MeshFrameData[](DeltaCompressedFrameData s)
		{
			return null;
		}

		[Token(Token = "0x60005B9")]
		[Address(RVA = "0xB354B0", Offset = "0xB354B0", VA = "0xB354B0")]
		public static implicit operator DeltaCompressedFrameData(MeshFrameData[] frames)
		{
			return null;
		}

		[Token(Token = "0x60005BA")]
		[Address(RVA = "0xB35E2C", Offset = "0xB35E2C", VA = "0xB35E2C")]
		public DeltaCompressedFrameData()
		{
		}
	}
	[Token(Token = "0x2000107")]
	public static class AllocatedArray<T>
	{
		[Token(Token = "0x4000511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T defaultValue;

		[Token(Token = "0x4000512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<int, Stack<T[]>> allocatedArrays;

		[Token(Token = "0x60005BC")]
		private static T[] AllocateArray(int size)
		{
			return null;
		}

		[Token(Token = "0x60005BD")]
		public static T[] Get(int size)
		{
			return null;
		}

		[Token(Token = "0x60005BE")]
		public static void Return(T[] array, bool resetValues = true)
		{
		}
	}
	[Token(Token = "0x2000108")]
	public static class Comparers
	{
		[Serializable]
		[Token(Token = "0x2000109")]
		public class StringComparer : IEqualityComparer<string>
		{
			[Token(Token = "0x60005C2")]
			[Address(RVA = "0xB36038", Offset = "0xB36038", VA = "0xB36038", Slot = "4")]
			private bool System.Collections.Generic.IEqualityComparer<System.String>.Equals(string x, string y)
			{
				return default(bool);
			}

			[Token(Token = "0x60005C3")]
			[Address(RVA = "0xB36048", Offset = "0xB36048", VA = "0xB36048", Slot = "5")]
			private int System.Collections.Generic.IEqualityComparer<System.String>.GetHashCode(string obj)
			{
				return default(int);
			}

			[Token(Token = "0x60005C4")]
			[Address(RVA = "0xB36010", Offset = "0xB36010", VA = "0xB36010")]
			public StringComparer()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200010A")]
		public class FloatComparer : IEqualityComparer<float>
		{
			[Token(Token = "0x60005C5")]
			[Address(RVA = "0xB36068", Offset = "0xB36068", VA = "0xB36068", Slot = "4")]
			private bool System.Collections.Generic.IEqualityComparer<System.Single>.Equals(float x, float y)
			{
				return default(bool);
			}

			[Token(Token = "0x60005C6")]
			[Address(RVA = "0xB36074", Offset = "0xB36074", VA = "0xB36074", Slot = "5")]
			private int System.Collections.Generic.IEqualityComparer<System.Single>.GetHashCode(float obj)
			{
				return default(int);
			}

			[Token(Token = "0x60005C7")]
			[Address(RVA = "0xB36018", Offset = "0xB36018", VA = "0xB36018")]
			public FloatComparer()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200010B")]
		public class IntComparer : IEqualityComparer<int>
		{
			[Token(Token = "0x60005C8")]
			[Address(RVA = "0xB36090", Offset = "0xB36090", VA = "0xB36090", Slot = "4")]
			private bool System.Collections.Generic.IEqualityComparer<System.Int32>.Equals(int x, int y)
			{
				return default(bool);
			}

			[Token(Token = "0x60005C9")]
			[Address(RVA = "0xB3609C", Offset = "0xB3609C", VA = "0xB3609C", Slot = "5")]
			private int System.Collections.Generic.IEqualityComparer<System.Int32>.GetHashCode(int obj)
			{
				return default(int);
			}

			[Token(Token = "0x60005CA")]
			[Address(RVA = "0xB36020", Offset = "0xB36020", VA = "0xB36020")]
			public IntComparer()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200010C")]
		public class ByteComparer : IEqualityComparer<byte>
		{
			[Token(Token = "0x60005CB")]
			[Address(RVA = "0xB360B8", Offset = "0xB360B8", VA = "0xB360B8", Slot = "4")]
			private bool System.Collections.Generic.IEqualityComparer<System.Byte>.Equals(byte x, byte y)
			{
				return default(bool);
			}

			[Token(Token = "0x60005CC")]
			[Address(RVA = "0xB360C8", Offset = "0xB360C8", VA = "0xB360C8", Slot = "5")]
			private int System.Collections.Generic.IEqualityComparer<System.Byte>.GetHashCode(byte obj)
			{
				return default(int);
			}

			[Token(Token = "0x60005CD")]
			[Address(RVA = "0xB36028", Offset = "0xB36028", VA = "0xB36028")]
			public ByteComparer()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200010D")]
		public class BoolComparer : IEqualityComparer<bool>
		{
			[Token(Token = "0x60005CE")]
			[Address(RVA = "0xB360E4", Offset = "0xB360E4", VA = "0xB360E4", Slot = "4")]
			private bool System.Collections.Generic.IEqualityComparer<System.Boolean>.Equals(bool x, bool y)
			{
				return default(bool);
			}

			[Token(Token = "0x60005CF")]
			[Address(RVA = "0xB360F0", Offset = "0xB360F0", VA = "0xB360F0", Slot = "5")]
			private int System.Collections.Generic.IEqualityComparer<System.Boolean>.GetHashCode(bool obj)
			{
				return default(int);
			}

			[Token(Token = "0x60005D0")]
			[Address(RVA = "0xB36030", Offset = "0xB36030", VA = "0xB36030")]
			public BoolComparer()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200010E")]
		private class FuncEqualityComparer<T> : EqualityComparer<T>
		{
			[Token(Token = "0x4000518")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Func<T, T, bool> equals;

			[Token(Token = "0x4000519")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private readonly Func<T, int> hash;

			[Token(Token = "0x60005D1")]
			public FuncEqualityComparer(Func<T, T, bool> equals, Func<T, int> hash)
			{
			}

			[Token(Token = "0x60005D2")]
			public override bool Equals(T a, T b)
			{
				return default(bool);
			}

			[Token(Token = "0x60005D3")]
			public override int GetHashCode(T obj)
			{
				return default(int);
			}
		}

		[Token(Token = "0x4000513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly StringComparer String;

		[Token(Token = "0x4000514")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly FloatComparer Float;

		[Token(Token = "0x4000515")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly IntComparer Int;

		[Token(Token = "0x4000516")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly ByteComparer Byte;

		[Token(Token = "0x4000517")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly BoolComparer Bool;

		[Token(Token = "0x60005C0")]
		public static IEqualityComparer<T> Create<T>(Func<T, T, bool> equals, [Optional] Func<T, int> hash)
		{
			return null;
		}
	}
	[Token(Token = "0x2000110")]
	public static class GenericObjectPool<T>
	{
		[Token(Token = "0x400051C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Stack<T> pool;

		[Token(Token = "0x17000056")]
		public static int Count
		{
			[Token(Token = "0x60005D7")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60005D8")]
		public static void InitPool(int count)
		{
		}

		[Token(Token = "0x60005D9")]
		public static T Get()
		{
			return (T)null;
		}

		[Token(Token = "0x60005DA")]
		public static void Return(T obj)
		{
		}
	}
	[Token(Token = "0x2000111")]
	public static class MatrixUtils
	{
		[Token(Token = "0x60005DC")]
		[Address(RVA = "0xB345E4", Offset = "0xB345E4", VA = "0xB345E4")]
		public static void FromMatrix4x4(Transform transform, Matrix4x4 matrix)
		{
		}

		[Token(Token = "0x60005DD")]
		[Address(RVA = "0xB3611C", Offset = "0xB3611C", VA = "0xB3611C")]
		public static Quaternion GetRotation(Matrix4x4 matrix)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60005DE")]
		[Address(RVA = "0xB36110", Offset = "0xB36110", VA = "0xB36110")]
		public static Vector3 GetPosition(Matrix4x4 matrix)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60005DF")]
		[Address(RVA = "0xB36240", Offset = "0xB36240", VA = "0xB36240")]
		public static Vector3 GetScale(Matrix4x4 m)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x2000112")]
	public class PooledDictionary<T, T2> : Dictionary<T, T2>
	{
		[Token(Token = "0x400051D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Stack<PooledDictionary<T, T2>> stack;

		[Token(Token = "0x400051E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static uint checkedOut;

		[Token(Token = "0x400051F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static uint returned;

		[Token(Token = "0x17000057")]
		public bool recycleable
		{
			[Token(Token = "0x60005E0")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60005E1")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60005E2")]
		public static void Init(int initialPoolSize = 10)
		{
		}

		[Token(Token = "0x60005E3")]
		public static PooledDictionary<T, T2> Get(int capacity, [Optional] IEqualityComparer<T> comparer)
		{
			return null;
		}

		[Token(Token = "0x60005E4")]
		public static PooledDictionary<T, T2> Get()
		{
			return null;
		}

		[Token(Token = "0x60005E5")]
		public static PooledDictionary<T, T2> Get(IEqualityComparer<T> comparer)
		{
			return null;
		}

		[Token(Token = "0x60005E6")]
		public PooledDictionary()
		{
		}

		[Token(Token = "0x60005E7")]
		public PooledDictionary(int capacity)
		{
		}

		[Token(Token = "0x60005E8")]
		public PooledDictionary(int capacity, IEqualityComparer<T> comparer)
		{
		}

		[Token(Token = "0x60005E9")]
		public void ReturnToPool(bool force = false)
		{
		}
	}
}
namespace RootMotion
{
	[Token(Token = "0x2000113")]
	public class CameraController : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000114")]
		public enum UpdateMode
		{
			[Token(Token = "0x4000547")]
			Update,
			[Token(Token = "0x4000548")]
			FixedUpdate,
			[Token(Token = "0x4000549")]
			LateUpdate,
			[Token(Token = "0x400054A")]
			FixedLateUpdate
		}

		[Token(Token = "0x4000521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4000522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform rotationSpace;

		[Token(Token = "0x4000523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UpdateMode updateMode;

		[Token(Token = "0x4000524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool lockCursor;

		[Token(Token = "0x4000525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		[Header("Position")]
		public bool smoothFollow;

		[Token(Token = "0x4000526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 offset;

		[Token(Token = "0x4000527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float followSpeed;

		[Token(Token = "0x4000528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Rotation")]
		public float rotationSensitivity;

		[Token(Token = "0x4000529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float yMinLimit;

		[Token(Token = "0x400052A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float yMaxLimit;

		[Token(Token = "0x400052B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool rotateAlways;

		[Token(Token = "0x400052C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		public bool rotateOnLeftButton;

		[Token(Token = "0x400052D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
		public bool rotateOnRightButton;

		[Token(Token = "0x400052E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F")]
		public bool rotateOnMiddleButton;

		[Token(Token = "0x400052F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Distance")]
		public float distance;

		[Token(Token = "0x4000530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float minDistance;

		[Token(Token = "0x4000531")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float maxDistance;

		[Token(Token = "0x4000532")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float zoomSpeed;

		[Token(Token = "0x4000533")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float zoomSensitivity;

		[Token(Token = "0x4000534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Header("Blocking")]
		public LayerMask blockingLayers;

		[Token(Token = "0x4000535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float blockingRadius;

		[Token(Token = "0x4000536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float blockingSmoothTime;

		[Token(Token = "0x4000537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Range(0f, 1f)]
		public float blockedOffset;

		[Token(Token = "0x400053B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 targetDistance;

		[Token(Token = "0x400053C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 position;

		[Token(Token = "0x400053D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Quaternion rotation;

		[Token(Token = "0x400053E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 smoothPosition;

		[Token(Token = "0x400053F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Camera cam;

		[Token(Token = "0x4000540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool fixedFrame;

		[Token(Token = "0x4000541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private float fixedDeltaTime;

		[Token(Token = "0x4000542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Quaternion r;

		[Token(Token = "0x4000543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Vector3 lastUp;

		[Token(Token = "0x4000544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float blockedDistance;

		[Token(Token = "0x4000545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float blockedDistanceV;

		[Token(Token = "0x17000058")]
		public float x
		{
			[Token(Token = "0x60005EB")]
			[Address(RVA = "0xB363D4", Offset = "0xB363D4", VA = "0xB363D4")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60005EC")]
			[Address(RVA = "0xB363DC", Offset = "0xB363DC", VA = "0xB363DC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000059")]
		public float y
		{
			[Token(Token = "0x60005ED")]
			[Address(RVA = "0xB363E4", Offset = "0xB363E4", VA = "0xB363E4")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60005EE")]
			[Address(RVA = "0xB363EC", Offset = "0xB363EC", VA = "0xB363EC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700005A")]
		public float distanceTarget
		{
			[Token(Token = "0x60005EF")]
			[Address(RVA = "0xB363F4", Offset = "0xB363F4", VA = "0xB363F4")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60005F0")]
			[Address(RVA = "0xB363FC", Offset = "0xB363FC", VA = "0xB363FC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700005B")]
		private float zoomAdd
		{
			[Token(Token = "0x60005F8")]
			[Address(RVA = "0xB36DDC", Offset = "0xB36DDC", VA = "0xB36DDC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60005F1")]
		[Address(RVA = "0xB36404", Offset = "0xB36404", VA = "0xB36404", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60005F2")]
		[Address(RVA = "0xB3653C", Offset = "0xB3653C", VA = "0xB3653C", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60005F3")]
		[Address(RVA = "0xB36584", Offset = "0xB36584", VA = "0xB36584", Slot = "6")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x60005F4")]
		[Address(RVA = "0xB365DC", Offset = "0xB365DC", VA = "0xB365DC", Slot = "7")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x60005F5")]
		[Address(RVA = "0xB36634", Offset = "0xB36634", VA = "0xB36634")]
		public void UpdateInput()
		{
		}

		[Token(Token = "0x60005F6")]
		[Address(RVA = "0xB36568", Offset = "0xB36568", VA = "0xB36568")]
		public void UpdateTransform()
		{
		}

		[Token(Token = "0x60005F7")]
		[Address(RVA = "0xB367C0", Offset = "0xB367C0", VA = "0xB367C0")]
		public void UpdateTransform(float deltaTime)
		{
		}

		[Token(Token = "0x60005F9")]
		[Address(RVA = "0xB36DA0", Offset = "0xB36DA0", VA = "0xB36DA0")]
		private float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x60005FA")]
		[Address(RVA = "0xB36E48", Offset = "0xB36E48", VA = "0xB36E48")]
		public CameraController()
		{
		}
	}
	[Token(Token = "0x2000115")]
	public class CameraControllerFPS : MonoBehaviour
	{
		[Token(Token = "0x400054B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rotationSensitivity;

		[Token(Token = "0x400054C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float yMinLimit;

		[Token(Token = "0x400054D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float yMaxLimit;

		[Token(Token = "0x400054E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float x;

		[Token(Token = "0x400054F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float y;

		[Token(Token = "0x60005FB")]
		[Address(RVA = "0xB36F08", Offset = "0xB36F08", VA = "0xB36F08")]
		private void Awake()
		{
		}

		[Token(Token = "0x60005FC")]
		[Address(RVA = "0xB36F34", Offset = "0xB36F34", VA = "0xB36F34")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x60005FD")]
		[Address(RVA = "0xB37158", Offset = "0xB37158", VA = "0xB37158")]
		private float ClampAngle(float angle, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x60005FE")]
		[Address(RVA = "0xB37194", Offset = "0xB37194", VA = "0xB37194")]
		public CameraControllerFPS()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000116")]
	public enum Axis
	{
		[Token(Token = "0x4000551")]
		X,
		[Token(Token = "0x4000552")]
		Y,
		[Token(Token = "0x4000553")]
		Z
	}
	[Token(Token = "0x2000117")]
	public class AxisTools
	{
		[Token(Token = "0x60005FF")]
		[Address(RVA = "0xB371B0", Offset = "0xB371B0", VA = "0xB371B0")]
		public static Vector3 ToVector3(Axis axis)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000600")]
		[Address(RVA = "0xB37290", Offset = "0xB37290", VA = "0xB37290")]
		public static Axis ToAxis(Vector3 v)
		{
			return default(Axis);
		}

		[Token(Token = "0x6000601")]
		[Address(RVA = "0xB372C8", Offset = "0xB372C8", VA = "0xB372C8")]
		public static Axis GetAxisToPoint(Transform t, Vector3 worldPosition)
		{
			return default(Axis);
		}

		[Token(Token = "0x6000602")]
		[Address(RVA = "0xB37410", Offset = "0xB37410", VA = "0xB37410")]
		public static Axis GetAxisToDirection(Transform t, Vector3 direction)
		{
			return default(Axis);
		}

		[Token(Token = "0x6000603")]
		[Address(RVA = "0xB373C4", Offset = "0xB373C4", VA = "0xB373C4")]
		public static Vector3 GetAxisVectorToPoint(Transform t, Vector3 worldPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000604")]
		[Address(RVA = "0xB3750C", Offset = "0xB3750C", VA = "0xB3750C")]
		public static Vector3 GetAxisVectorToDirection(Transform t, Vector3 direction)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000605")]
		[Address(RVA = "0xB37934", Offset = "0xB37934", VA = "0xB37934")]
		public AxisTools()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000118")]
	public class BipedLimbOrientations
	{
		[Serializable]
		[Token(Token = "0x2000119")]
		public class LimbOrientation
		{
			[Token(Token = "0x4000558")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 upperBoneForwardAxis;

			[Token(Token = "0x4000559")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 lowerBoneForwardAxis;

			[Token(Token = "0x400055A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 lastBoneLeftAxis;

			[Token(Token = "0x6000609")]
			[Address(RVA = "0xB37C68", Offset = "0xB37C68", VA = "0xB37C68")]
			public LimbOrientation(Vector3 upperBoneForwardAxis, Vector3 lowerBoneForwardAxis, Vector3 lastBoneLeftAxis)
			{
			}
		}

		[Token(Token = "0x4000554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LimbOrientation leftArm;

		[Token(Token = "0x4000555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LimbOrientation rightArm;

		[Token(Token = "0x4000556")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LimbOrientation leftLeg;

		[Token(Token = "0x4000557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LimbOrientation rightLeg;

		[Token(Token = "0x1700005C")]
		public static BipedLimbOrientations UMA
		{
			[Token(Token = "0x6000607")]
			[Address(RVA = "0xB379B0", Offset = "0xB379B0", VA = "0xB379B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005D")]
		public static BipedLimbOrientations MaxBiped
		{
			[Token(Token = "0x6000608")]
			[Address(RVA = "0xB37CDC", Offset = "0xB37CDC", VA = "0xB37CDC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000606")]
		[Address(RVA = "0xB3793C", Offset = "0xB3793C", VA = "0xB3793C")]
		public BipedLimbOrientations(LimbOrientation leftArm, LimbOrientation rightArm, LimbOrientation leftLeg, LimbOrientation rightLeg)
		{
		}
	}
	[Token(Token = "0x200011A")]
	public static class BipedNaming
	{
		[Serializable]
		[Token(Token = "0x200011B")]
		public enum BoneType
		{
			[Token(Token = "0x400056E")]
			Unassigned,
			[Token(Token = "0x400056F")]
			Spine,
			[Token(Token = "0x4000570")]
			Head,
			[Token(Token = "0x4000571")]
			Arm,
			[Token(Token = "0x4000572")]
			Leg,
			[Token(Token = "0x4000573")]
			Tail,
			[Token(Token = "0x4000574")]
			Eye
		}

		[Serializable]
		[Token(Token = "0x200011C")]
		public enum BoneSide
		{
			[Token(Token = "0x4000576")]
			Center,
			[Token(Token = "0x4000577")]
			Left,
			[Token(Token = "0x4000578")]
			Right
		}

		[Token(Token = "0x400055B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static string[] typeLeft;

		[Token(Token = "0x400055C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static string[] typeRight;

		[Token(Token = "0x400055D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static string[] typeSpine;

		[Token(Token = "0x400055E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static string[] typeHead;

		[Token(Token = "0x400055F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static string[] typeArm;

		[Token(Token = "0x4000560")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static string[] typeLeg;

		[Token(Token = "0x4000561")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static string[] typeTail;

		[Token(Token = "0x4000562")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static string[] typeEye;

		[Token(Token = "0x4000563")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static string[] typeExclude;

		[Token(Token = "0x4000564")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static string[] typeExcludeSpine;

		[Token(Token = "0x4000565")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static string[] typeExcludeHead;

		[Token(Token = "0x4000566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static string[] typeExcludeArm;

		[Token(Token = "0x4000567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static string[] typeExcludeLeg;

		[Token(Token = "0x4000568")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static string[] typeExcludeTail;

		[Token(Token = "0x4000569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static string[] typeExcludeEye;

		[Token(Token = "0x400056A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static string[] pelvis;

		[Token(Token = "0x400056B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static string[] hand;

		[Token(Token = "0x400056C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public static string[] foot;

		[Token(Token = "0x600060A")]
		[Address(RVA = "0xB37F94", Offset = "0xB37F94", VA = "0xB37F94")]
		public static Transform[] GetBonesOfType(BoneType boneType, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x600060B")]
		[Address(RVA = "0xB38260", Offset = "0xB38260", VA = "0xB38260")]
		public static Transform[] GetBonesOfSide(BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x600060C")]
		[Address(RVA = "0xB3849C", Offset = "0xB3849C", VA = "0xB3849C")]
		public static Transform[] GetBonesOfTypeAndSide(BoneType boneType, BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x600060D")]
		[Address(RVA = "0xB38510", Offset = "0xB38510", VA = "0xB38510")]
		public static Transform GetFirstBoneOfTypeAndSide(BoneType boneType, BoneSide boneSide, Transform[] bones)
		{
			return null;
		}

		[Token(Token = "0x600060E")]
		[Address(RVA = "0xB385A4", Offset = "0xB385A4", VA = "0xB385A4")]
		public static Transform GetNamingMatch(Transform[] transforms, params string[][] namings)
		{
			return null;
		}

		[Token(Token = "0x600060F")]
		[Address(RVA = "0xB38148", Offset = "0xB38148", VA = "0xB38148")]
		public static BoneType GetBoneType(string boneName)
		{
			return default(BoneType);
		}

		[Token(Token = "0x6000610")]
		[Address(RVA = "0xB38414", Offset = "0xB38414", VA = "0xB38414")]
		public static BoneSide GetBoneSide(string boneName)
		{
			return default(BoneSide);
		}

		[Token(Token = "0x6000611")]
		[Address(RVA = "0xB38CDC", Offset = "0xB38CDC", VA = "0xB38CDC")]
		public static Transform GetBone(Transform[] transforms, BoneType boneType, BoneSide boneSide = BoneSide.Center, params string[][] namings)
		{
			return null;
		}

		[Token(Token = "0x6000612")]
		[Address(RVA = "0xB38B34", Offset = "0xB38B34", VA = "0xB38B34")]
		private static bool isLeft(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000613")]
		[Address(RVA = "0xB38C08", Offset = "0xB38C08", VA = "0xB38C08")]
		private static bool isRight(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000614")]
		[Address(RVA = "0xB3878C", Offset = "0xB3878C", VA = "0xB3878C")]
		private static bool isSpine(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000615")]
		[Address(RVA = "0xB38828", Offset = "0xB38828", VA = "0xB38828")]
		private static bool isHead(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000616")]
		[Address(RVA = "0xB388C4", Offset = "0xB388C4", VA = "0xB388C4")]
		private static bool isArm(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000617")]
		[Address(RVA = "0xB38960", Offset = "0xB38960", VA = "0xB38960")]
		private static bool isLeg(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000618")]
		[Address(RVA = "0xB389FC", Offset = "0xB389FC", VA = "0xB389FC")]
		private static bool isTail(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x6000619")]
		[Address(RVA = "0xB38A98", Offset = "0xB38A98", VA = "0xB38A98")]
		private static bool isEye(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x600061A")]
		[Address(RVA = "0xB38EC4", Offset = "0xB38EC4", VA = "0xB38EC4")]
		private static bool isTypeExclude(string boneName)
		{
			return default(bool);
		}

		[Token(Token = "0x600061B")]
		[Address(RVA = "0xB386B8", Offset = "0xB386B8", VA = "0xB386B8")]
		private static bool matchesNaming(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x600061C")]
		[Address(RVA = "0xB38E40", Offset = "0xB38E40", VA = "0xB38E40")]
		private static bool excludesNaming(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x600061D")]
		[Address(RVA = "0xB38F24", Offset = "0xB38F24", VA = "0xB38F24")]
		private static bool matchesLastLetter(string boneName, string[] namingConvention)
		{
			return default(bool);
		}

		[Token(Token = "0x600061E")]
		[Address(RVA = "0xB38FE4", Offset = "0xB38FE4", VA = "0xB38FE4")]
		private static bool LastLetterIs(string boneName, string letter)
		{
			return default(bool);
		}

		[Token(Token = "0x600061F")]
		[Address(RVA = "0xB38DCC", Offset = "0xB38DCC", VA = "0xB38DCC")]
		private static string firstLetter(string boneName)
		{
			return null;
		}

		[Token(Token = "0x6000620")]
		[Address(RVA = "0xB38D5C", Offset = "0xB38D5C", VA = "0xB38D5C")]
		private static string lastLetter(string boneName)
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x200011D")]
	public class BipedReferences
	{
		[Token(Token = "0x200011E")]
		public struct AutoDetectParams
		{
			[Token(Token = "0x400058A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool legsParentInSpine;

			[Token(Token = "0x400058B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
			public bool includeEyes;

			[Token(Token = "0x17000060")]
			public static AutoDetectParams Default
			{
				[Token(Token = "0x600063B")]
				[Address(RVA = "0xB402BC", Offset = "0xB402BC", VA = "0xB402BC")]
				get
				{
					return default(AutoDetectParams);
				}
			}

			[Token(Token = "0x600063A")]
			[Address(RVA = "0xB402A8", Offset = "0xB402A8", VA = "0xB402A8")]
			public AutoDetectParams(bool legsParentInSpine, bool includeEyes)
			{
			}
		}

		[Token(Token = "0x4000579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform root;

		[Token(Token = "0x400057A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform pelvis;

		[Token(Token = "0x400057B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform leftThigh;

		[Token(Token = "0x400057C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftCalf;

		[Token(Token = "0x400057D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform leftFoot;

		[Token(Token = "0x400057E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform rightThigh;

		[Token(Token = "0x400057F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform rightCalf;

		[Token(Token = "0x4000580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform rightFoot;

		[Token(Token = "0x4000581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform leftUpperArm;

		[Token(Token = "0x4000582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform leftForearm;

		[Token(Token = "0x4000583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform leftHand;

		[Token(Token = "0x4000584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform rightUpperArm;

		[Token(Token = "0x4000585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform rightForearm;

		[Token(Token = "0x4000586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform rightHand;

		[Token(Token = "0x4000587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Transform head;

		[Token(Token = "0x4000588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform[] spine;

		[Token(Token = "0x4000589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Transform[] eyes;

		[Token(Token = "0x1700005E")]
		public virtual bool isFilled
		{
			[Token(Token = "0x6000622")]
			[Address(RVA = "0xB3BDD4", Offset = "0xB3BDD4", VA = "0xB3BDD4", Slot = "4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700005F")]
		public bool isEmpty
		{
			[Token(Token = "0x6000623")]
			[Address(RVA = "0xB3C130", Offset = "0xB3C130", VA = "0xB3C130")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000624")]
		[Address(RVA = "0xB3C140", Offset = "0xB3C140", VA = "0xB3C140", Slot = "5")]
		public virtual bool IsEmpty(bool includeRoot)
		{
			return default(bool);
		}

		[Token(Token = "0x6000625")]
		[Address(RVA = "0xB3C4CC", Offset = "0xB3C4CC", VA = "0xB3C4CC", Slot = "6")]
		public virtual bool Contains(Transform t, bool ignoreRoot = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000626")]
		[Address(RVA = "0xB3C85C", Offset = "0xB3C85C", VA = "0xB3C85C")]
		public static bool AutoDetectReferences(ref BipedReferences references, Transform root, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x6000627")]
		[Address(RVA = "0xB3CF88", Offset = "0xB3CF88", VA = "0xB3CF88")]
		public static void DetectReferencesByNaming(ref BipedReferences references, Transform root, AutoDetectParams autoDetectParams)
		{
		}

		[Token(Token = "0x6000628")]
		[Address(RVA = "0xB3CAF8", Offset = "0xB3CAF8", VA = "0xB3CAF8")]
		public static void AssignHumanoidReferences(ref BipedReferences references, Animator animator, AutoDetectParams autoDetectParams)
		{
		}

		[Token(Token = "0x6000629")]
		[Address(RVA = "0xB3D768", Offset = "0xB3D768", VA = "0xB3D768")]
		public static bool SetupError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x600062A")]
		[Address(RVA = "0xB3D854", Offset = "0xB3D854", VA = "0xB3D854")]
		public static bool SetupWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x600062B")]
		[Address(RVA = "0xB3DDA0", Offset = "0xB3DDA0", VA = "0xB3DDA0")]
		private static bool IsNeckBone(Transform bone, Transform leftUpperArm)
		{
			return default(bool);
		}

		[Token(Token = "0x600062C")]
		[Address(RVA = "0xB3DBA8", Offset = "0xB3DBA8", VA = "0xB3DBA8")]
		private static bool AddBoneToEyes(Transform bone, ref BipedReferences references, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x600062D")]
		[Address(RVA = "0xB3DA54", Offset = "0xB3DA54", VA = "0xB3DA54")]
		private static bool AddBoneToSpine(Transform bone, ref BipedReferences references, AutoDetectParams autoDetectParams)
		{
			return default(bool);
		}

		[Token(Token = "0x600062E")]
		[Address(RVA = "0xB3D8F0", Offset = "0xB3D8F0", VA = "0xB3D8F0")]
		private static void DetectLimb(BipedNaming.BoneType boneType, BipedNaming.BoneSide boneSide, ref Transform firstBone, ref Transform secondBone, ref Transform lastBone, Transform[] transforms)
		{
		}

		[Token(Token = "0x600062F")]
		[Address(RVA = "0xB3DCA0", Offset = "0xB3DCA0", VA = "0xB3DCA0")]
		private static void AddBoneToHierarchy(ref Transform[] bones, Transform transform)
		{
		}

		[Token(Token = "0x6000630")]
		[Address(RVA = "0xB3DE84", Offset = "0xB3DE84", VA = "0xB3DE84")]
		private static bool LimbError(Transform bone1, Transform bone2, Transform bone3, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000631")]
		[Address(RVA = "0xB3EA40", Offset = "0xB3EA40", VA = "0xB3EA40")]
		private static bool LimbWarning(Transform bone1, Transform bone2, Transform bone3, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000632")]
		[Address(RVA = "0xB3E4DC", Offset = "0xB3E4DC", VA = "0xB3E4DC")]
		private static bool SpineError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000633")]
		[Address(RVA = "0xB3ED8C", Offset = "0xB3ED8C", VA = "0xB3ED8C")]
		private static bool SpineWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000634")]
		[Address(RVA = "0xB3E844", Offset = "0xB3E844", VA = "0xB3E844")]
		private static bool EyesError(BipedReferences references, ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000635")]
		[Address(RVA = "0xB3ED94", Offset = "0xB3ED94", VA = "0xB3ED94")]
		private static bool EyesWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000636")]
		[Address(RVA = "0xB3ED9C", Offset = "0xB3ED9C", VA = "0xB3ED9C")]
		private static bool RootHeightWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000637")]
		[Address(RVA = "0xB3EF5C", Offset = "0xB3EF5C", VA = "0xB3EF5C")]
		private static bool FacingAxisWarning(BipedReferences references, ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000638")]
		[Address(RVA = "0xB3F240", Offset = "0xB3F240", VA = "0xB3F240")]
		private static float GetVerticalOffset(Vector3 p1, Vector3 p2, Quaternion rotation)
		{
			return default(float);
		}

		[Token(Token = "0x6000639")]
		[Address(RVA = "0xB3CA78", Offset = "0xB3CA78", VA = "0xB3CA78")]
		public BipedReferences()
		{
		}
	}
	[Token(Token = "0x200011F")]
	public class Comments : MonoBehaviour
	{
		[Token(Token = "0x400058C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Multiline]
		public string text;

		[Token(Token = "0x600063C")]
		[Address(RVA = "0xB402C4", Offset = "0xB402C4", VA = "0xB402C4")]
		public Comments()
		{
		}
	}
	[Token(Token = "0x2000120")]
	public class DemoGUIMessage : MonoBehaviour
	{
		[Token(Token = "0x400058D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string text;

		[Token(Token = "0x400058E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color color;

		[Token(Token = "0x600063D")]
		[Address(RVA = "0xB402CC", Offset = "0xB402CC", VA = "0xB402CC")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600063E")]
		[Address(RVA = "0xB403C4", Offset = "0xB403C4", VA = "0xB403C4")]
		public DemoGUIMessage()
		{
		}
	}
	[Token(Token = "0x2000121")]
	public class Hierarchy
	{
		[Token(Token = "0x600063F")]
		[Address(RVA = "0xB403D4", Offset = "0xB403D4", VA = "0xB403D4")]
		public static bool HierarchyIsValid(Transform[] bones)
		{
			return default(bool);
		}

		[Token(Token = "0x6000640")]
		[Address(RVA = "0xB40588", Offset = "0xB40588", VA = "0xB40588")]
		public static UnityEngine.Object ContainsDuplicate(UnityEngine.Object[] objects)
		{
			return null;
		}

		[Token(Token = "0x6000641")]
		[Address(RVA = "0xB40458", Offset = "0xB40458", VA = "0xB40458")]
		public static bool IsAncestor(Transform transform, Transform ancestor)
		{
			return default(bool);
		}

		[Token(Token = "0x6000642")]
		[Address(RVA = "0xB40694", Offset = "0xB40694", VA = "0xB40694")]
		public static bool ContainsChild(Transform transform, Transform child)
		{
			return default(bool);
		}

		[Token(Token = "0x6000643")]
		[Address(RVA = "0xB407A4", Offset = "0xB407A4", VA = "0xB407A4")]
		public static void AddAncestors(Transform transform, Transform blocker, ref Transform[] array)
		{
		}

		[Token(Token = "0x6000644")]
		[Address(RVA = "0xB409EC", Offset = "0xB409EC", VA = "0xB409EC")]
		public static Transform GetAncestor(Transform transform, int minChildCount)
		{
			return null;
		}

		[Token(Token = "0x6000645")]
		[Address(RVA = "0xB40AE0", Offset = "0xB40AE0", VA = "0xB40AE0")]
		public static Transform GetFirstCommonAncestor(Transform t1, Transform t2)
		{
			return null;
		}

		[Token(Token = "0x6000646")]
		[Address(RVA = "0xB40C30", Offset = "0xB40C30", VA = "0xB40C30")]
		public static Transform GetFirstCommonAncestor(Transform[] transforms)
		{
			return null;
		}

		[Token(Token = "0x6000647")]
		[Address(RVA = "0xB40F9C", Offset = "0xB40F9C", VA = "0xB40F9C")]
		public static Transform GetFirstCommonAncestorRecursive(Transform transform, Transform[] transforms)
		{
			return null;
		}

		[Token(Token = "0x6000648")]
		[Address(RVA = "0xB40D94", Offset = "0xB40D94", VA = "0xB40D94")]
		public static bool IsCommonAncestor(Transform transform, Transform[] transforms)
		{
			return default(bool);
		}

		[Token(Token = "0x6000649")]
		[Address(RVA = "0xB41124", Offset = "0xB41124", VA = "0xB41124")]
		public Hierarchy()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000122")]
	public enum InterpolationMode
	{
		[Token(Token = "0x4000590")]
		None,
		[Token(Token = "0x4000591")]
		InOutCubic,
		[Token(Token = "0x4000592")]
		InOutQuintic,
		[Token(Token = "0x4000593")]
		InOutSine,
		[Token(Token = "0x4000594")]
		InQuintic,
		[Token(Token = "0x4000595")]
		InQuartic,
		[Token(Token = "0x4000596")]
		InCubic,
		[Token(Token = "0x4000597")]
		InQuadratic,
		[Token(Token = "0x4000598")]
		InElastic,
		[Token(Token = "0x4000599")]
		InElasticSmall,
		[Token(Token = "0x400059A")]
		InElasticBig,
		[Token(Token = "0x400059B")]
		InSine,
		[Token(Token = "0x400059C")]
		InBack,
		[Token(Token = "0x400059D")]
		OutQuintic,
		[Token(Token = "0x400059E")]
		OutQuartic,
		[Token(Token = "0x400059F")]
		OutCubic,
		[Token(Token = "0x40005A0")]
		OutInCubic,
		[Token(Token = "0x40005A1")]
		OutInQuartic,
		[Token(Token = "0x40005A2")]
		OutElastic,
		[Token(Token = "0x40005A3")]
		OutElasticSmall,
		[Token(Token = "0x40005A4")]
		OutElasticBig,
		[Token(Token = "0x40005A5")]
		OutSine,
		[Token(Token = "0x40005A6")]
		OutBack,
		[Token(Token = "0x40005A7")]
		OutBackCubic,
		[Token(Token = "0x40005A8")]
		OutBackQuartic,
		[Token(Token = "0x40005A9")]
		BackInCubic,
		[Token(Token = "0x40005AA")]
		BackInQuartic
	}
	[Token(Token = "0x2000123")]
	public class Interp
	{
		[Token(Token = "0x600064A")]
		[Address(RVA = "0xB4112C", Offset = "0xB4112C", VA = "0xB4112C")]
		public static float Float(float t, InterpolationMode mode)
		{
			return default(float);
		}

		[Token(Token = "0x600064B")]
		[Address(RVA = "0xB41AB4", Offset = "0xB41AB4", VA = "0xB41AB4")]
		public static Vector3 V3(Vector3 v1, Vector3 v2, float t, InterpolationMode mode)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600064C")]
		[Address(RVA = "0xB41B24", Offset = "0xB41B24", VA = "0xB41B24")]
		public static float LerpValue(float value, float target, float increaseSpeed, float decreaseSpeed)
		{
			return default(float);
		}

		[Token(Token = "0x600064D")]
		[Address(RVA = "0xB4152C", Offset = "0xB4152C", VA = "0xB4152C")]
		private static float None(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600064E")]
		[Address(RVA = "0xB41538", Offset = "0xB41538", VA = "0xB41538")]
		private static float InOutCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600064F")]
		[Address(RVA = "0xB4155C", Offset = "0xB4155C", VA = "0xB4155C")]
		private static float InOutQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000650")]
		[Address(RVA = "0xB41598", Offset = "0xB41598", VA = "0xB41598")]
		private static float InQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000651")]
		[Address(RVA = "0xB415B0", Offset = "0xB415B0", VA = "0xB415B0")]
		private static float InQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000652")]
		[Address(RVA = "0xB415C4", Offset = "0xB415C4", VA = "0xB415C4")]
		private static float InCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000653")]
		[Address(RVA = "0xB415D8", Offset = "0xB415D8", VA = "0xB415D8")]
		private static float InQuadratic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000654")]
		[Address(RVA = "0xB415E8", Offset = "0xB415E8", VA = "0xB415E8")]
		private static float OutQuintic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000655")]
		[Address(RVA = "0xB41630", Offset = "0xB41630", VA = "0xB41630")]
		private static float OutQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000656")]
		[Address(RVA = "0xB41668", Offset = "0xB41668", VA = "0xB41668")]
		private static float OutCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000657")]
		[Address(RVA = "0xB41690", Offset = "0xB41690", VA = "0xB41690")]
		private static float OutInCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000658")]
		[Address(RVA = "0xB41B94", Offset = "0xB41B94", VA = "0xB41B94")]
		private static float OutInQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000659")]
		[Address(RVA = "0xB416C4", Offset = "0xB416C4", VA = "0xB416C4")]
		private static float BackInCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600065A")]
		[Address(RVA = "0xB416EC", Offset = "0xB416EC", VA = "0xB416EC")]
		private static float BackInQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600065B")]
		[Address(RVA = "0xB4171C", Offset = "0xB4171C", VA = "0xB4171C")]
		private static float OutBackCubic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600065C")]
		[Address(RVA = "0xB41750", Offset = "0xB41750", VA = "0xB41750")]
		private static float OutBackQuartic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600065D")]
		[Address(RVA = "0xB41794", Offset = "0xB41794", VA = "0xB41794")]
		private static float OutElasticSmall(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600065E")]
		[Address(RVA = "0xB417F8", Offset = "0xB417F8", VA = "0xB417F8")]
		private static float OutElasticBig(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x600065F")]
		[Address(RVA = "0xB4185C", Offset = "0xB4185C", VA = "0xB4185C")]
		private static float InElasticSmall(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000660")]
		[Address(RVA = "0xB418B0", Offset = "0xB418B0", VA = "0xB418B0")]
		private static float InElasticBig(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000661")]
		[Address(RVA = "0xB41904", Offset = "0xB41904", VA = "0xB41904")]
		private static float InSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000662")]
		[Address(RVA = "0xB4193C", Offset = "0xB4193C", VA = "0xB4193C")]
		private static float OutSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000663")]
		[Address(RVA = "0xB41970", Offset = "0xB41970", VA = "0xB41970")]
		private static float InOutSine(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000664")]
		[Address(RVA = "0xB41BC8", Offset = "0xB41BC8", VA = "0xB41BC8")]
		private static float InElastic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000665")]
		[Address(RVA = "0xB419B4", Offset = "0xB419B4", VA = "0xB419B4")]
		private static float OutElastic(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000666")]
		[Address(RVA = "0xB41A44", Offset = "0xB41A44", VA = "0xB41A44")]
		private static float InBack(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000667")]
		[Address(RVA = "0xB41A74", Offset = "0xB41A74", VA = "0xB41A74")]
		private static float OutBack(float t, float b, float c)
		{
			return default(float);
		}

		[Token(Token = "0x6000668")]
		[Address(RVA = "0xB41C58", Offset = "0xB41C58", VA = "0xB41C58")]
		public Interp()
		{
		}
	}
	[Token(Token = "0x2000124")]
	public class LargeHeader : PropertyAttribute
	{
		[Token(Token = "0x40005AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x40005AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string color;

		[Token(Token = "0x6000669")]
		[Address(RVA = "0xB41C60", Offset = "0xB41C60", VA = "0xB41C60")]
		public LargeHeader(string name)
		{
		}

		[Token(Token = "0x600066A")]
		[Address(RVA = "0xB41CE8", Offset = "0xB41CE8", VA = "0xB41CE8")]
		public LargeHeader(string name, string color)
		{
		}
	}
	[Token(Token = "0x2000125")]
	public static class LayerMaskExtensions
	{
		[Token(Token = "0x600066B")]
		[Address(RVA = "0xB41D74", Offset = "0xB41D74", VA = "0xB41D74")]
		public static bool Contains(LayerMask mask, int layer)
		{
			return default(bool);
		}

		[Token(Token = "0x600066C")]
		[Address(RVA = "0xB41DC0", Offset = "0xB41DC0", VA = "0xB41DC0")]
		public static LayerMask Create(params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x600066D")]
		[Address(RVA = "0xB41E7C", Offset = "0xB41E7C", VA = "0xB41E7C")]
		public static LayerMask Create(params int[] layerNumbers)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x600066E")]
		[Address(RVA = "0xB41DD4", Offset = "0xB41DD4", VA = "0xB41DD4")]
		public static LayerMask NamesToMask(params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x600066F")]
		[Address(RVA = "0xB41E90", Offset = "0xB41E90", VA = "0xB41E90")]
		public static LayerMask LayerNumbersToMask(params int[] layerNumbers)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000670")]
		[Address(RVA = "0xB41F20", Offset = "0xB41F20", VA = "0xB41F20")]
		public static LayerMask Inverse(this LayerMask original)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000671")]
		[Address(RVA = "0xB41F48", Offset = "0xB41F48", VA = "0xB41F48")]
		public static LayerMask AddToMask(this LayerMask original, params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000672")]
		[Address(RVA = "0xB41F94", Offset = "0xB41F94", VA = "0xB41F94")]
		public static LayerMask RemoveFromMask(this LayerMask original, params string[] layerNames)
		{
			return default(LayerMask);
		}

		[Token(Token = "0x6000673")]
		[Address(RVA = "0xB41FFC", Offset = "0xB41FFC", VA = "0xB41FFC")]
		public static string[] MaskToNames(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x6000674")]
		[Address(RVA = "0xB42158", Offset = "0xB42158", VA = "0xB42158")]
		public static int[] MaskToNumbers(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x6000675")]
		[Address(RVA = "0xB42290", Offset = "0xB42290", VA = "0xB42290")]
		public static string MaskToString(this LayerMask original)
		{
			return null;
		}

		[Token(Token = "0x6000676")]
		[Address(RVA = "0xB422E8", Offset = "0xB422E8", VA = "0xB422E8")]
		public static string MaskToString(this LayerMask original, string delimiter)
		{
			return null;
		}
	}
	[Token(Token = "0x2000126")]
	public static class QuaTools
	{
		[Token(Token = "0x6000677")]
		[Address(RVA = "0xB4230C", Offset = "0xB4230C", VA = "0xB4230C")]
		public static Quaternion Lerp(Quaternion fromRotation, Quaternion toRotation, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000678")]
		[Address(RVA = "0xB42358", Offset = "0xB42358", VA = "0xB42358")]
		public static Quaternion Slerp(Quaternion fromRotation, Quaternion toRotation, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000679")]
		[Address(RVA = "0xB423A4", Offset = "0xB423A4", VA = "0xB423A4")]
		public static Quaternion LinearBlend(Quaternion q, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600067A")]
		[Address(RVA = "0xB424A8", Offset = "0xB424A8", VA = "0xB424A8")]
		public static Quaternion SphericalBlend(Quaternion q, float weight)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600067B")]
		[Address(RVA = "0xB425AC", Offset = "0xB425AC", VA = "0xB425AC")]
		public static Quaternion FromToAroundAxis(Vector3 fromDirection, Vector3 toDirection, Vector3 axis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600067C")]
		[Address(RVA = "0xB426C0", Offset = "0xB426C0", VA = "0xB426C0")]
		public static Quaternion RotationToLocalSpace(Quaternion space, Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600067D")]
		[Address(RVA = "0xB42768", Offset = "0xB42768", VA = "0xB42768")]
		public static Quaternion FromToRotation(Quaternion from, Quaternion to)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600067E")]
		[Address(RVA = "0xB42874", Offset = "0xB42874", VA = "0xB42874")]
		public static Vector3 GetAxis(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600067F")]
		[Address(RVA = "0xB429DC", Offset = "0xB429DC", VA = "0xB429DC")]
		public static Quaternion ClampRotation(Quaternion rotation, float clampWeight, int clampSmoothing)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000680")]
		[Address(RVA = "0xB42BC0", Offset = "0xB42BC0", VA = "0xB42BC0")]
		public static float ClampAngle(float angle, float clampWeight, int clampSmoothing)
		{
			return default(float);
		}

		[Token(Token = "0x6000681")]
		[Address(RVA = "0xB42C90", Offset = "0xB42C90", VA = "0xB42C90")]
		public static Quaternion MatchRotation(Quaternion targetRotation, Vector3 targetforwardAxis, Vector3 targetUpAxis, Vector3 forwardAxis, Vector3 upAxis)
		{
			return default(Quaternion);
		}
	}
	[Token(Token = "0x2000127")]
	public abstract class Singleton<T> : MonoBehaviour where T : Singleton<T>
	{
		[Token(Token = "0x40005AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T sInstance;

		[Token(Token = "0x17000061")]
		public static T instance
		{
			[Token(Token = "0x6000682")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000683")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000684")]
		protected Singleton()
		{
		}
	}
	[Token(Token = "0x2000128")]
	public class SolverManager : MonoBehaviour
	{
		[Token(Token = "0x40005AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If true, will fix all the Transforms used by the solver to their initial state in each Update. This prevents potential problems with unanimated bones and animator culling with a small cost of performance. Not recommended for CCD and FABRIK solvers.")]
		public bool fixTransforms;

		[Token(Token = "0x40005AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x40005B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Animation legacy;

		[Token(Token = "0x40005B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool updateFrame;

		[Token(Token = "0x40005B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool componentInitiated;

		[Token(Token = "0x40005B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		private bool skipSolverUpdate;

		[Token(Token = "0x17000062")]
		private bool animatePhysics
		{
			[Token(Token = "0x600068B")]
			[Address(RVA = "0xB42F30", Offset = "0xB42F30", VA = "0xB42F30")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000063")]
		private bool isAnimated
		{
			[Token(Token = "0x600068F")]
			[Address(RVA = "0xB4322C", Offset = "0xB4322C", VA = "0xB4322C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000685")]
		[Address(RVA = "0xB42E14", Offset = "0xB42E14", VA = "0xB42E14")]
		public void Disable()
		{
		}

		[Token(Token = "0x6000686")]
		[Address(RVA = "0xB42EA8", Offset = "0xB42EA8", VA = "0xB42EA8", Slot = "4")]
		protected virtual void InitiateSolver()
		{
		}

		[Token(Token = "0x6000687")]
		[Address(RVA = "0xB42EAC", Offset = "0xB42EAC", VA = "0xB42EAC", Slot = "5")]
		protected virtual void UpdateSolver()
		{
		}

		[Token(Token = "0x6000688")]
		[Address(RVA = "0xB42EB0", Offset = "0xB42EB0", VA = "0xB42EB0", Slot = "6")]
		protected virtual void FixTransforms()
		{
		}

		[Token(Token = "0x6000689")]
		[Address(RVA = "0xB42EB4", Offset = "0xB42EB4", VA = "0xB42EB4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600068A")]
		[Address(RVA = "0xB42F2C", Offset = "0xB42F2C", VA = "0xB42F2C")]
		private void Start()
		{
		}

		[Token(Token = "0x600068C")]
		[Address(RVA = "0xB42EDC", Offset = "0xB42EDC", VA = "0xB42EDC")]
		private void Initiate()
		{
		}

		[Token(Token = "0x600068D")]
		[Address(RVA = "0xB431F0", Offset = "0xB431F0", VA = "0xB431F0")]
		private void Update()
		{
		}

		[Token(Token = "0x600068E")]
		[Address(RVA = "0xB42FFC", Offset = "0xB42FFC", VA = "0xB42FFC")]
		private void FindAnimatorRecursive(Transform t, bool findInChildren)
		{
		}

		[Token(Token = "0x6000690")]
		[Address(RVA = "0xB432C4", Offset = "0xB432C4", VA = "0xB432C4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000691")]
		[Address(RVA = "0xB43310", Offset = "0xB43310", VA = "0xB43310")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000692")]
		[Address(RVA = "0xB4335C", Offset = "0xB4335C", VA = "0xB4335C")]
		public void UpdateSolverExternal()
		{
		}

		[Token(Token = "0x6000693")]
		[Address(RVA = "0xB43394", Offset = "0xB43394", VA = "0xB43394")]
		public SolverManager()
		{
		}
	}
	[Token(Token = "0x2000129")]
	public class TriggerEventBroadcaster : MonoBehaviour
	{
		[Token(Token = "0x40005B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject target;

		[Token(Token = "0x6000694")]
		[Address(RVA = "0xB433A4", Offset = "0xB433A4", VA = "0xB433A4")]
		private void OnTriggerEnter(Collider collider)
		{
		}

		[Token(Token = "0x6000695")]
		[Address(RVA = "0xB43458", Offset = "0xB43458", VA = "0xB43458")]
		private void OnTriggerStay(Collider collider)
		{
		}

		[Token(Token = "0x6000696")]
		[Address(RVA = "0xB4350C", Offset = "0xB4350C", VA = "0xB4350C")]
		private void OnTriggerExit(Collider collider)
		{
		}

		[Token(Token = "0x6000697")]
		[Address(RVA = "0xB435C0", Offset = "0xB435C0", VA = "0xB435C0")]
		public TriggerEventBroadcaster()
		{
		}
	}
	[Token(Token = "0x200012A")]
	public static class V3Tools
	{
		[Token(Token = "0x6000698")]
		[Address(RVA = "0xB435C8", Offset = "0xB435C8", VA = "0xB435C8")]
		public static Vector3 Lerp(Vector3 fromVector, Vector3 toVector, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000699")]
		[Address(RVA = "0xB43624", Offset = "0xB43624", VA = "0xB43624")]
		public static Vector3 Slerp(Vector3 fromVector, Vector3 toVector, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600069A")]
		[Address(RVA = "0xB4365C", Offset = "0xB4365C", VA = "0xB4365C")]
		public static Vector3 ExtractVertical(Vector3 v, Vector3 verticalAxis, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600069B")]
		[Address(RVA = "0xB437AC", Offset = "0xB437AC", VA = "0xB437AC")]
		public static Vector3 ExtractHorizontal(Vector3 v, Vector3 normal, float weight)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600069C")]
		[Address(RVA = "0xB43928", Offset = "0xB43928", VA = "0xB43928")]
		public static Vector3 ClampDirection(Vector3 direction, Vector3 normalDirection, float clampWeight, int clampSmoothing, out bool changed)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600069D")]
		[Address(RVA = "0xB43B78", Offset = "0xB43B78", VA = "0xB43B78")]
		public static Vector3 ClampDirection(Vector3 direction, Vector3 normalDirection, float clampWeight, int clampSmoothing, out float clampValue)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600069E")]
		[Address(RVA = "0xB43DD0", Offset = "0xB43DD0", VA = "0xB43DD0")]
		public static Vector3 LineToPlane(Vector3 origin, Vector3 direction, Vector3 planeNormal, Vector3 planePoint)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600069F")]
		[Address(RVA = "0xB43F7C", Offset = "0xB43F7C", VA = "0xB43F7C")]
		public static Vector3 PointToPlane(Vector3 point, Vector3 planePosition, Vector3 planeNormal)
		{
			return default(Vector3);
		}
	}
	[Token(Token = "0x200012B")]
	public static class Warning
	{
		[Token(Token = "0x200012C")]
		public delegate void Logger(string message);

		[Token(Token = "0x40005B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool logged;

		[Token(Token = "0x60006A0")]
		[Address(RVA = "0xB44174", Offset = "0xB44174", VA = "0xB44174")]
		public static void Log(string message, Logger logger, bool logInEditMode = false)
		{
		}

		[Token(Token = "0x60006A1")]
		[Address(RVA = "0xB4420C", Offset = "0xB4420C", VA = "0xB4420C")]
		public static void Log(string message, Transform context, bool logInEditMode = false)
		{
		}
	}
}
namespace RootMotion.Demos
{
	[Token(Token = "0x200012D")]
	public class AimBoxing : MonoBehaviour
	{
		[Token(Token = "0x40005B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK aimIK;

		[Token(Token = "0x40005B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform pin;

		[Token(Token = "0x60006A6")]
		[Address(RVA = "0xB443E4", Offset = "0xB443E4", VA = "0xB443E4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60006A7")]
		[Address(RVA = "0xB44464", Offset = "0xB44464", VA = "0xB44464")]
		public AimBoxing()
		{
		}
	}
	[Token(Token = "0x200012E")]
	public class AimSwing : MonoBehaviour
	{
		[Token(Token = "0x40005B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK ik;

		[Token(Token = "0x40005B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The direction of the animated weapon swing in character space. Tweak this value to adjust the aiming.")]
		public Vector3 animatedSwingDirection;

		[Token(Token = "0x60006A8")]
		[Address(RVA = "0xB4446C", Offset = "0xB4446C", VA = "0xB4446C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60006A9")]
		[Address(RVA = "0xB444D8", Offset = "0xB444D8", VA = "0xB444D8")]
		public AimSwing()
		{
		}
	}
	[Token(Token = "0x200012F")]
	public class SimpleAimingSystem : MonoBehaviour
	{
		[Token(Token = "0x40005BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("AimPoser is a tool that returns an animation name based on direction.")]
		public AimPoser aimPoser;

		[Token(Token = "0x40005BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Reference to the AimIK component.")]
		public AimIK aim;

		[Token(Token = "0x40005BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Reference to the LookAt component (only used for the head in this instance).")]
		public LookAtIK lookAt;

		[Token(Token = "0x40005BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Reference to the Animator component.")]
		public Animator animator;

		[Token(Token = "0x40005BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Time of cross-fading from pose to pose.")]
		public float crossfadeTime;

		[Token(Token = "0x40005BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Will keep the aim target at a distance.")]
		public float minAimDistance;

		[Token(Token = "0x40005C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AimPoser.Pose aimPose;

		[Token(Token = "0x40005C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AimPoser.Pose lastPose;

		[Token(Token = "0x60006AA")]
		[Address(RVA = "0xB44538", Offset = "0xB44538", VA = "0xB44538")]
		private void Start()
		{
		}

		[Token(Token = "0x60006AB")]
		[Address(RVA = "0xB44570", Offset = "0xB44570", VA = "0xB44570")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60006AC")]
		[Address(RVA = "0xB446BC", Offset = "0xB446BC", VA = "0xB446BC")]
		private void Pose()
		{
		}

		[Token(Token = "0x60006AD")]
		[Address(RVA = "0xB44848", Offset = "0xB44848", VA = "0xB44848")]
		private void LimitAimTarget()
		{
		}

		[Token(Token = "0x60006AE")]
		[Address(RVA = "0xB44A2C", Offset = "0xB44A2C", VA = "0xB44A2C")]
		private void DirectCrossFade(string state, float target)
		{
		}

		[Token(Token = "0x60006AF")]
		[Address(RVA = "0xB44ABC", Offset = "0xB44ABC", VA = "0xB44ABC")]
		public SimpleAimingSystem()
		{
		}
	}
	[Token(Token = "0x2000130")]
	public class TerrainOffset : MonoBehaviour
	{
		[Token(Token = "0x40005C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AimIK aimIK;

		[Token(Token = "0x40005C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 raycastOffset;

		[Token(Token = "0x40005C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask raycastLayers;

		[Token(Token = "0x40005C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float min;

		[Token(Token = "0x40005C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float max;

		[Token(Token = "0x40005C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float lerpSpeed;

		[Token(Token = "0x40005C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private RaycastHit hit;

		[Token(Token = "0x40005C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 offset;

		[Token(Token = "0x60006B0")]
		[Address(RVA = "0xB44AD0", Offset = "0xB44AD0", VA = "0xB44AD0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60006B1")]
		[Address(RVA = "0xB44C3C", Offset = "0xB44C3C", VA = "0xB44C3C")]
		private Vector3 GetGroundHeightOffset(Vector3 worldPosition)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006B2")]
		[Address(RVA = "0xB44E38", Offset = "0xB44E38", VA = "0xB44E38")]
		public TerrainOffset()
		{
		}
	}
	[Token(Token = "0x2000131")]
	public class BipedIKvsAnimatorIK : MonoBehaviour
	{
		[Token(Token = "0x40005CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[LargeHeader("References")]
		public Animator animator;

		[Token(Token = "0x40005CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BipedIK bipedIK;

		[Token(Token = "0x40005CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[LargeHeader("Look At")]
		public Transform lookAtTargetBiped;

		[Token(Token = "0x40005CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform lookAtTargetAnimator;

		[Token(Token = "0x40005CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 1f)]
		public float lookAtWeight;

		[Token(Token = "0x40005CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 1f)]
		public float lookAtBodyWeight;

		[Token(Token = "0x40005D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(0f, 1f)]
		public float lookAtHeadWeight;

		[Token(Token = "0x40005D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Range(0f, 1f)]
		public float lookAtEyesWeight;

		[Token(Token = "0x40005D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 1f)]
		public float lookAtClampWeight;

		[Token(Token = "0x40005D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Range(0f, 1f)]
		public float lookAtClampWeightHead;

		[Token(Token = "0x40005D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Range(0f, 1f)]
		public float lookAtClampWeightEyes;

		[Token(Token = "0x40005D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[LargeHeader("Foot")]
		public Transform footTargetBiped;

		[Token(Token = "0x40005D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform footTargetAnimator;

		[Token(Token = "0x40005D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Range(0f, 1f)]
		public float footPositionWeight;

		[Token(Token = "0x40005D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Range(0f, 1f)]
		public float footRotationWeight;

		[Token(Token = "0x40005D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[LargeHeader("Hand")]
		public Transform handTargetBiped;

		[Token(Token = "0x40005DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform handTargetAnimator;

		[Token(Token = "0x40005DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Range(0f, 1f)]
		public float handPositionWeight;

		[Token(Token = "0x40005DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Range(0f, 1f)]
		public float handRotationWeight;

		[Token(Token = "0x60006B3")]
		[Address(RVA = "0xB44E68", Offset = "0xB44E68", VA = "0xB44E68")]
		private void OnAnimatorIK(int layer)
		{
		}

		[Token(Token = "0x60006B4")]
		[Address(RVA = "0xB45294", Offset = "0xB45294", VA = "0xB45294")]
		public BipedIKvsAnimatorIK()
		{
		}
	}
	[Token(Token = "0x2000132")]
	public class MechSpider : MonoBehaviour
	{
		[Token(Token = "0x40005DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LayerMask raycastLayers;

		[Token(Token = "0x40005DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float scale;

		[Token(Token = "0x40005DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform body;

		[Token(Token = "0x40005E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MechSpiderLeg[] legs;

		[Token(Token = "0x40005E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float legRotationWeight;

		[Token(Token = "0x40005E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float rootPositionSpeed;

		[Token(Token = "0x40005E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float rootRotationSpeed;

		[Token(Token = "0x40005E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float breatheSpeed;

		[Token(Token = "0x40005E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float breatheMagnitude;

		[Token(Token = "0x40005E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float height;

		[Token(Token = "0x40005E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float minHeight;

		[Token(Token = "0x40005E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float raycastHeight;

		[Token(Token = "0x40005E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float raycastDistance;

		[Token(Token = "0x40005EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 lastPosition;

		[Token(Token = "0x40005EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 defaultBodyLocalPosition;

		[Token(Token = "0x40005EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float sine;

		[Token(Token = "0x40005ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private RaycastHit rootHit;

		[Token(Token = "0x60006B5")]
		[Address(RVA = "0xB452B4", Offset = "0xB452B4", VA = "0xB452B4")]
		private void Update()
		{
		}

		[Token(Token = "0x60006B6")]
		[Address(RVA = "0xB45BD0", Offset = "0xB45BD0", VA = "0xB45BD0")]
		private Vector3 GetLegCentroid()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006B7")]
		[Address(RVA = "0xB4594C", Offset = "0xB4594C", VA = "0xB4594C")]
		private Vector3 GetLegsPlaneNormal()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006B8")]
		[Address(RVA = "0xB45CE0", Offset = "0xB45CE0", VA = "0xB45CE0")]
		public MechSpider()
		{
		}
	}
	[Token(Token = "0x2000133")]
	public class MechSpiderController : MonoBehaviour
	{
		[Token(Token = "0x40005EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MechSpider mechSpider;

		[Token(Token = "0x40005EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform cameraTransform;

		[Token(Token = "0x40005F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float speed;

		[Token(Token = "0x40005F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float turnSpeed;

		[Token(Token = "0x17000064")]
		public Vector3 inputVector
		{
			[Token(Token = "0x60006B9")]
			[Address(RVA = "0xB45D0C", Offset = "0xB45D0C", VA = "0xB45D0C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x60006BA")]
		[Address(RVA = "0xB45D8C", Offset = "0xB45D8C", VA = "0xB45D8C")]
		private void Update()
		{
		}

		[Token(Token = "0x60006BB")]
		[Address(RVA = "0xB460D0", Offset = "0xB460D0", VA = "0xB460D0")]
		public MechSpiderController()
		{
		}
	}
	[Token(Token = "0x2000134")]
	public class MechSpiderLeg : MonoBehaviour
	{
		[Token(Token = "0x2000135")]
		[CompilerGenerated]
		private sealed class <Step>d__24 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000602")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000603")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000604")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MechSpiderLeg <>4__this;

			[Token(Token = "0x4000605")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 stepStartPosition;

			[Token(Token = "0x4000606")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Vector3 targetPosition;

			[Token(Token = "0x17000067")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60006C7")]
				[Address(RVA = "0xB46AEC", Offset = "0xB46AEC", VA = "0xB46AEC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000068")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60006C9")]
				[Address(RVA = "0xB46B34", Offset = "0xB46B34", VA = "0xB46B34", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60006C4")]
			[Address(RVA = "0xB46804", Offset = "0xB46804", VA = "0xB46804")]
			[DebuggerHidden]
			public <Step>d__24(int <>1__state)
			{
			}

			[Token(Token = "0x60006C5")]
			[Address(RVA = "0xB4685C", Offset = "0xB4685C", VA = "0xB4685C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60006C6")]
			[Address(RVA = "0xB46860", Offset = "0xB46860", VA = "0xB46860", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60006C8")]
			[Address(RVA = "0xB46AF4", Offset = "0xB46AF4", VA = "0xB46AF4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40005F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MechSpider mechSpider;

		[Token(Token = "0x40005F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MechSpiderLeg unSync;

		[Token(Token = "0x40005F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 offset;

		[Token(Token = "0x40005F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float minDelay;

		[Token(Token = "0x40005F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float maxOffset;

		[Token(Token = "0x40005F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float stepSpeed;

		[Token(Token = "0x40005F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float footHeight;

		[Token(Token = "0x40005F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float velocityPrediction;

		[Token(Token = "0x40005FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float raycastFocus;

		[Token(Token = "0x40005FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve yOffset;

		[Token(Token = "0x40005FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public ParticleSystem sand;

		[Token(Token = "0x40005FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private IK ik;

		[Token(Token = "0x40005FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float stepProgress;

		[Token(Token = "0x40005FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float lastStepTime;

		[Token(Token = "0x4000600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3 defaultPosition;

		[Token(Token = "0x4000601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private RaycastHit hit;

		[Token(Token = "0x17000065")]
		public bool isStepping
		{
			[Token(Token = "0x60006BC")]
			[Address(RVA = "0xB460E4", Offset = "0xB460E4", VA = "0xB460E4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000066")]
		public Vector3 position
		{
			[Token(Token = "0x60006BD")]
			[Address(RVA = "0xB45CB0", Offset = "0xB45CB0", VA = "0xB45CB0")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60006BE")]
			[Address(RVA = "0xB460F8", Offset = "0xB460F8", VA = "0xB460F8")]
			set
			{
			}
		}

		[Token(Token = "0x60006BF")]
		[Address(RVA = "0xB46144", Offset = "0xB46144", VA = "0xB46144")]
		private void Start()
		{
		}

		[Token(Token = "0x60006C0")]
		[Address(RVA = "0xB46298", Offset = "0xB46298", VA = "0xB46298")]
		private Vector3 GetStepTarget(out bool stepFound, float focus, float distance)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60006C1")]
		[Address(RVA = "0xB46538", Offset = "0xB46538", VA = "0xB46538")]
		private void Update()
		{
		}

		[Token(Token = "0x60006C2")]
		[Address(RVA = "0xB46754", Offset = "0xB46754", VA = "0xB46754")]
		[IteratorStateMachine(typeof(<Step>d__24))]
		private IEnumerator Step(Vector3 stepStartPosition, Vector3 targetPosition)
		{
			return null;
		}

		[Token(Token = "0x60006C3")]
		[Address(RVA = "0xB4682C", Offset = "0xB4682C", VA = "0xB4682C")]
		public MechSpiderLeg()
		{
		}
	}
	[Token(Token = "0x2000136")]
	public class MechSpiderParticles : MonoBehaviour
	{
		[Token(Token = "0x4000607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MechSpiderController mechSpiderController;

		[Token(Token = "0x4000608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ParticleSystem particles;

		[Token(Token = "0x60006CA")]
		[Address(RVA = "0xB46B3C", Offset = "0xB46B3C", VA = "0xB46B3C")]
		private void Start()
		{
		}

		[Token(Token = "0x60006CB")]
		[Address(RVA = "0xB46C18", Offset = "0xB46C18", VA = "0xB46C18")]
		private void Update()
		{
		}

		[Token(Token = "0x60006CC")]
		[Address(RVA = "0xB46E8C", Offset = "0xB46E8C", VA = "0xB46E8C")]
		public MechSpiderParticles()
		{
		}
	}
	[Token(Token = "0x2000137")]
	public class AnimationWarping : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x2000138")]
		public struct Warp
		{
			[Token(Token = "0x400060D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Layer of the 'Animation State' in the Animator.")]
			public int animationLayer;

			[Token(Token = "0x400060E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Name of the state in the Animator to warp.")]
			public string animationState;

			[Token(Token = "0x400060F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Warping weight by normalized time of the animation state.")]
			public AnimationCurve weightCurve;

			[Token(Token = "0x4000610")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Animated point to warp from. This should be in character space so keep this Transform parented to the root of the character.")]
			public Transform warpFrom;

			[Token(Token = "0x4000611")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("World space point to warp to.")]
			public Transform warpTo;

			[Token(Token = "0x4000612")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Which FBBIK effector to use?")]
			public FullBodyBipedEffector effector;
		}

		[Serializable]
		[Token(Token = "0x2000139")]
		public enum EffectorMode
		{
			[Token(Token = "0x4000614")]
			PositionOffset,
			[Token(Token = "0x4000615")]
			Position
		}

		[Token(Token = "0x4000609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Reference to the Animator component to use")]
		public Animator animator;

		[Token(Token = "0x400060A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Using effector.positionOffset or effector.position with effector.positionWeight? The former will enable you to use effector.position for other things, the latter will weigh in the effectors, hence using Reach and Pull in the process.")]
		public EffectorMode effectorMode;

		[Token(Token = "0x400060B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The array of warps, can have multiple simultaneous warps.")]
		[Space(10f)]
		public Warp[] warps;

		[Token(Token = "0x400060C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private EffectorMode lastMode;

		[Token(Token = "0x60006CD")]
		[Address(RVA = "0xB46E94", Offset = "0xB46E94", VA = "0xB46E94", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60006CE")]
		[Address(RVA = "0xB46EB4", Offset = "0xB46EB4", VA = "0xB46EB4")]
		public float GetWarpWeight(int warpIndex)
		{
			return default(float);
		}

		[Token(Token = "0x60006CF")]
		[Address(RVA = "0xB470CC", Offset = "0xB470CC", VA = "0xB470CC", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x60006D0")]
		[Address(RVA = "0xB47384", Offset = "0xB47384", VA = "0xB47384")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60006D1")]
		[Address(RVA = "0xB47418", Offset = "0xB47418", VA = "0xB47418")]
		public AnimationWarping()
		{
		}
	}
	[Token(Token = "0x200013A")]
	[RequireComponent(typeof(Animator))]
	public class AnimatorController3rdPerson : MonoBehaviour
	{
		[Token(Token = "0x4000616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rotateSpeed;

		[Token(Token = "0x4000617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float blendSpeed;

		[Token(Token = "0x4000618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float maxAngle;

		[Token(Token = "0x4000619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float moveSpeed;

		[Token(Token = "0x400061A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float rootMotionWeight;

		[Token(Token = "0x400061B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Animator animator;

		[Token(Token = "0x400061C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Vector3 moveBlend;

		[Token(Token = "0x400061D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected Vector3 moveInput;

		[Token(Token = "0x400061E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Vector3 velocity;

		[Token(Token = "0x60006D2")]
		[Address(RVA = "0xB47420", Offset = "0xB47420", VA = "0xB47420", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60006D3")]
		[Address(RVA = "0xB47478", Offset = "0xB47478", VA = "0xB47478")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x60006D4")]
		[Address(RVA = "0xB47680", Offset = "0xB47680", VA = "0xB47680", Slot = "5")]
		public virtual void Move(Vector3 moveInput, bool isMoving, Vector3 faceDirection, Vector3 aimTarget)
		{
		}

		[Token(Token = "0x60006D5")]
		[Address(RVA = "0xB478A8", Offset = "0xB478A8", VA = "0xB478A8")]
		public AnimatorController3rdPerson()
		{
		}
	}
	[Token(Token = "0x200013B")]
	[RequireComponent(typeof(FullBodyBipedIK))]
	[RequireComponent(typeof(AimIK))]
	public class AnimatorController3rdPersonIK : AnimatorController3rdPerson
	{
		[Token(Token = "0x400061F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Range(0f, 1f)]
		public float headLookWeight;

		[Token(Token = "0x4000620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 gunHoldOffset;

		[Token(Token = "0x4000621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Vector3 leftHandOffset;

		[Token(Token = "0x4000622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Recoil recoil;

		[Token(Token = "0x4000623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private AimIK aim;

		[Token(Token = "0x4000624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x4000625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 headLookAxis;

		[Token(Token = "0x4000626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Vector3 leftHandPosRelToRightHand;

		[Token(Token = "0x4000627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Quaternion leftHandRotRelToRightHand;

		[Token(Token = "0x4000628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 aimTarget;

		[Token(Token = "0x4000629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Quaternion rightHandRotation;

		[Token(Token = "0x60006D6")]
		[Address(RVA = "0xB478BC", Offset = "0xB478BC", VA = "0xB478BC", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60006D7")]
		[Address(RVA = "0xB47A90", Offset = "0xB47A90", VA = "0xB47A90", Slot = "5")]
		public override void Move(Vector3 moveInput, bool isMoving, Vector3 faceDirection, Vector3 aimTarget)
		{
		}

		[Token(Token = "0x60006D8")]
		[Address(RVA = "0xB47AF8", Offset = "0xB47AF8", VA = "0xB47AF8")]
		private void Read()
		{
		}

		[Token(Token = "0x60006D9")]
		[Address(RVA = "0xB47C30", Offset = "0xB47C30", VA = "0xB47C30")]
		private void AimIK()
		{
		}

		[Token(Token = "0x60006DA")]
		[Address(RVA = "0xB47C8C", Offset = "0xB47C8C", VA = "0xB47C8C")]
		private void FBBIK()
		{
		}

		[Token(Token = "0x60006DB")]
		[Address(RVA = "0xB482D4", Offset = "0xB482D4", VA = "0xB482D4")]
		private void OnPreRead()
		{
		}

		[Token(Token = "0x60006DC")]
		[Address(RVA = "0xB480E8", Offset = "0xB480E8", VA = "0xB480E8")]
		private void HeadLookAt(Vector3 lookAtTarget)
		{
		}

		[Token(Token = "0x60006DD")]
		[Address(RVA = "0xB48578", Offset = "0xB48578", VA = "0xB48578")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60006DE")]
		[Address(RVA = "0xB486A4", Offset = "0xB486A4", VA = "0xB486A4")]
		public AnimatorController3rdPersonIK()
		{
		}
	}
	[Token(Token = "0x200013C")]
	[RequireComponent(typeof(FullBodyBipedIK))]
	public class CharacterAnimationThirdPersonIK : CharacterAnimationThirdPerson
	{
		[Token(Token = "0x400062A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x60006DF")]
		[Address(RVA = "0xB486C0", Offset = "0xB486C0", VA = "0xB486C0", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60006E0")]
		[Address(RVA = "0xB48724", Offset = "0xB48724", VA = "0xB48724", Slot = "7")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x60006E1")]
		[Address(RVA = "0xB48A60", Offset = "0xB48A60", VA = "0xB48A60")]
		private void RotateEffector(IKEffector effector, Quaternion rotation, float mlp)
		{
		}

		[Token(Token = "0x60006E2")]
		[Address(RVA = "0xB48B50", Offset = "0xB48B50", VA = "0xB48B50")]
		public CharacterAnimationThirdPersonIK()
		{
		}
	}
	[Token(Token = "0x200013D")]
	[RequireComponent(typeof(AnimatorController3rdPerson))]
	public class CharacterController3rdPerson : MonoBehaviour
	{
		[Token(Token = "0x400062B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private CameraController cam;

		[Token(Token = "0x400062C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AnimatorController3rdPerson animatorController;

		[Token(Token = "0x17000069")]
		private static Vector3 inputVector
		{
			[Token(Token = "0x60006E5")]
			[Address(RVA = "0xB48DB8", Offset = "0xB48DB8", VA = "0xB48DB8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700006A")]
		private static Vector3 inputVectorRaw
		{
			[Token(Token = "0x60006E6")]
			[Address(RVA = "0xB48E38", Offset = "0xB48E38", VA = "0xB48E38")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x60006E3")]
		[Address(RVA = "0xB48B58", Offset = "0xB48B58", VA = "0xB48B58")]
		private void Start()
		{
		}

		[Token(Token = "0x60006E4")]
		[Address(RVA = "0xB48BC8", Offset = "0xB48BC8", VA = "0xB48BC8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60006E7")]
		[Address(RVA = "0xB48EB8", Offset = "0xB48EB8", VA = "0xB48EB8")]
		public CharacterController3rdPerson()
		{
		}
	}
	[Token(Token = "0x200013E")]
	public class EffectorOffset : OffsetModifier
	{
		[Token(Token = "0x400062D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0f, 1f)]
		public float handsMaintainRelativePositionWeight;

		[Token(Token = "0x400062E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 bodyOffset;

		[Token(Token = "0x400062F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 leftShoulderOffset;

		[Token(Token = "0x4000630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 rightShoulderOffset;

		[Token(Token = "0x4000631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Vector3 leftThighOffset;

		[Token(Token = "0x4000632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 rightThighOffset;

		[Token(Token = "0x4000633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Vector3 leftHandOffset;

		[Token(Token = "0x4000634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Vector3 rightHandOffset;

		[Token(Token = "0x4000635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Vector3 leftFootOffset;

		[Token(Token = "0x4000636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Vector3 rightFootOffset;

		[Token(Token = "0x60006E8")]
		[Address(RVA = "0xB48EC0", Offset = "0xB48EC0", VA = "0xB48EC0", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x60006E9")]
		[Address(RVA = "0xB4931C", Offset = "0xB4931C", VA = "0xB4931C")]
		public EffectorOffset()
		{
		}
	}
	[Token(Token = "0x200013F")]
	public class ExplosionDemo : MonoBehaviour
	{
		[Token(Token = "0x4000637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SimpleLocomotion character;

		[Token(Token = "0x4000638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float forceMlp;

		[Token(Token = "0x4000639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float upForce;

		[Token(Token = "0x400063A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float weightFalloffSpeed;

		[Token(Token = "0x400063B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve weightFalloff;

		[Token(Token = "0x400063C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve explosionForceByDistance;

		[Token(Token = "0x400063D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationCurve scale;

		[Token(Token = "0x400063E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float weight;

		[Token(Token = "0x400063F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 defaultScale;

		[Token(Token = "0x4000640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody r;

		[Token(Token = "0x4000641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x60006EA")]
		[Address(RVA = "0xB49324", Offset = "0xB49324", VA = "0xB49324")]
		private void Start()
		{
		}

		[Token(Token = "0x60006EB")]
		[Address(RVA = "0xB493DC", Offset = "0xB493DC", VA = "0xB493DC")]
		private void Update()
		{
		}

		[Token(Token = "0x60006EC")]
		[Address(RVA = "0xB49838", Offset = "0xB49838", VA = "0xB49838")]
		private void SetEffectorWeights(float w)
		{
		}

		[Token(Token = "0x60006ED")]
		[Address(RVA = "0xB498D8", Offset = "0xB498D8", VA = "0xB498D8")]
		public ExplosionDemo()
		{
		}
	}
	[Token(Token = "0x2000140")]
	public class FBBIKSettings : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000141")]
		public class Limb
		{
			[Token(Token = "0x400064A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FBIKChain.Smoothing reachSmoothing;

			[Token(Token = "0x400064B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float maintainRelativePositionWeight;

			[Token(Token = "0x400064C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float mappingWeight;

			[Token(Token = "0x60006F2")]
			[Address(RVA = "0xB49A6C", Offset = "0xB49A6C", VA = "0xB49A6C")]
			public void Apply(FullBodyBipedChain chain, IKSolverFullBodyBiped solver)
			{
			}

			[Token(Token = "0x60006F3")]
			[Address(RVA = "0xB49B90", Offset = "0xB49B90", VA = "0xB49B90")]
			public Limb()
			{
			}
		}

		[Token(Token = "0x4000642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool disableAfterStart;

		[Token(Token = "0x4000644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Limb leftArm;

		[Token(Token = "0x4000645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Limb rightArm;

		[Token(Token = "0x4000646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Limb leftLeg;

		[Token(Token = "0x4000647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Limb rightLeg;

		[Token(Token = "0x4000648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float rootPin;

		[Token(Token = "0x4000649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool bodyEffectChildNodes;

		[Token(Token = "0x60006EE")]
		[Address(RVA = "0xB49948", Offset = "0xB49948", VA = "0xB49948")]
		public void UpdateSettings()
		{
		}

		[Token(Token = "0x60006EF")]
		[Address(RVA = "0xB49AE4", Offset = "0xB49AE4", VA = "0xB49AE4")]
		private void Start()
		{
		}

		[Token(Token = "0x60006F0")]
		[Address(RVA = "0xB49B7C", Offset = "0xB49B7C", VA = "0xB49B7C")]
		private void Update()
		{
		}

		[Token(Token = "0x60006F1")]
		[Address(RVA = "0xB49B80", Offset = "0xB49B80", VA = "0xB49B80")]
		public FBBIKSettings()
		{
		}
	}
	[Token(Token = "0x2000142")]
	public class FBIKBendGoal : MonoBehaviour
	{
		[Token(Token = "0x400064D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x400064E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FullBodyBipedChain chain;

		[Token(Token = "0x400064F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float weight;

		[Token(Token = "0x60006F4")]
		[Address(RVA = "0xB49BA0", Offset = "0xB49BA0", VA = "0xB49BA0")]
		private void Start()
		{
		}

		[Token(Token = "0x60006F5")]
		[Address(RVA = "0xB49C08", Offset = "0xB49C08", VA = "0xB49C08")]
		private void Update()
		{
		}

		[Token(Token = "0x60006F6")]
		[Address(RVA = "0xB49CDC", Offset = "0xB49CDC", VA = "0xB49CDC")]
		public FBIKBendGoal()
		{
		}
	}
	[Token(Token = "0x2000143")]
	public class FBIKBoxing : MonoBehaviour
	{
		[Token(Token = "0x4000650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The target we want to hit")]
		public Transform target;

		[Token(Token = "0x4000651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The pin Transform is used to reference the exact hit point in the animation (used by AimIK to aim the upper body to follow the target).In Legacy and Generic modes you can just create and position a reference point in your animating software and include it in the FBX. Then in Unity if you added a GameObject with the exact same name under the character's root, it would be animated to the required position.In Humanoid mode however, Mecanim loses track of any Transform that does not belong to the avatar, so in this case the pin point has to be manually set inside the Unity Editor.")]
		public Transform pin;

		[Token(Token = "0x4000652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The Full Body Biped IK component")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The Aim IK component. Aim IK is ust used for following the target slightly with the body.")]
		public AimIK aim;

		[Token(Token = "0x4000654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The master weight")]
		public float weight;

		[Token(Token = "0x4000655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The effector type of the punching hand")]
		public FullBodyBipedEffector effector;

		[Token(Token = "0x4000656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Weight of aiming the body to follow the target")]
		public AnimationCurve aimWeight;

		[Token(Token = "0x4000657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Animator animator;

		[Token(Token = "0x60006F7")]
		[Address(RVA = "0xB49CE4", Offset = "0xB49CE4", VA = "0xB49CE4")]
		private void Start()
		{
		}

		[Token(Token = "0x60006F8")]
		[Address(RVA = "0xB49D3C", Offset = "0xB49D3C", VA = "0xB49D3C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60006F9")]
		[Address(RVA = "0xB49ED4", Offset = "0xB49ED4", VA = "0xB49ED4")]
		public FBIKBoxing()
		{
		}
	}
	[Token(Token = "0x2000144")]
	public class FBIKHandsOnProp : MonoBehaviour
	{
		[Token(Token = "0x4000658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool leftHanded;

		[Token(Token = "0x60006FA")]
		[Address(RVA = "0xB49EDC", Offset = "0xB49EDC", VA = "0xB49EDC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60006FB")]
		[Address(RVA = "0xB49FBC", Offset = "0xB49FBC", VA = "0xB49FBC")]
		private void OnPreRead()
		{
		}

		[Token(Token = "0x60006FC")]
		[Address(RVA = "0xB4A03C", Offset = "0xB4A03C", VA = "0xB4A03C")]
		private void HandsOnProp(IKEffector mainHand, IKEffector otherHand)
		{
		}

		[Token(Token = "0x60006FD")]
		[Address(RVA = "0xB4A484", Offset = "0xB4A484", VA = "0xB4A484")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60006FE")]
		[Address(RVA = "0xB4A5B0", Offset = "0xB4A5B0", VA = "0xB4A5B0")]
		public FBIKHandsOnProp()
		{
		}
	}
	[Token(Token = "0x2000145")]
	public class FPSAiming : MonoBehaviour
	{
		[Token(Token = "0x400065A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float aimWeight;

		[Token(Token = "0x400065B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1f)]
		public float sightWeight;

		[Token(Token = "0x400065C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 180f)]
		public float maxAngle;

		[Token(Token = "0x400065D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private bool animatePhysics;

		[Token(Token = "0x400065E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform gun;

		[Token(Token = "0x400065F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Transform gunTarget;

		[Token(Token = "0x4000660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private FullBodyBipedIK ik;

		[Token(Token = "0x4000661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private AimIK gunAim;

		[Token(Token = "0x4000662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private CameraControllerFPS cam;

		[Token(Token = "0x4000663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Recoil recoil;

		[Token(Token = "0x4000664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Range(0f, 1f)]
		[SerializeField]
		private float cameraRecoilWeight;

		[Token(Token = "0x4000665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 gunTargetDefaultLocalPosition;

		[Token(Token = "0x4000666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Quaternion gunTargetDefaultLocalRotation;

		[Token(Token = "0x4000667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 camDefaultLocalPosition;

		[Token(Token = "0x4000668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 camRelativeToGunTarget;

		[Token(Token = "0x4000669")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool updateFrame;

		[Token(Token = "0x60006FF")]
		[Address(RVA = "0xB4A5B8", Offset = "0xB4A5B8", VA = "0xB4A5B8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000700")]
		[Address(RVA = "0xB4A718", Offset = "0xB4A718", VA = "0xB4A718")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000701")]
		[Address(RVA = "0xB4A724", Offset = "0xB4A724", VA = "0xB4A724")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000702")]
		[Address(RVA = "0xB4A9E4", Offset = "0xB4A9E4", VA = "0xB4A9E4")]
		private void Aiming()
		{
		}

		[Token(Token = "0x6000703")]
		[Address(RVA = "0xB4AB34", Offset = "0xB4AB34", VA = "0xB4AB34")]
		private void LookDownTheSight()
		{
		}

		[Token(Token = "0x6000704")]
		[Address(RVA = "0xB4A7E8", Offset = "0xB4A7E8", VA = "0xB4A7E8")]
		private void RotateCharacter()
		{
		}

		[Token(Token = "0x6000705")]
		[Address(RVA = "0xB4B7B8", Offset = "0xB4B7B8", VA = "0xB4B7B8")]
		public FPSAiming()
		{
		}
	}
	[Token(Token = "0x2000146")]
	[RequireComponent(typeof(Animator))]
	[RequireComponent(typeof(FPSAiming))]
	public class FPSCharacter : MonoBehaviour
	{
		[Token(Token = "0x400066A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float walkSpeed;

		[Token(Token = "0x400066B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float sVel;

		[Token(Token = "0x400066C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Animator animator;

		[Token(Token = "0x400066D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private FPSAiming FPSAiming;

		[Token(Token = "0x6000706")]
		[Address(RVA = "0xB4B7D8", Offset = "0xB4B7D8", VA = "0xB4B7D8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000707")]
		[Address(RVA = "0xB4B868", Offset = "0xB4B868", VA = "0xB4B868")]
		private void Update()
		{
		}

		[Token(Token = "0x6000708")]
		[Address(RVA = "0xB4B964", Offset = "0xB4B964", VA = "0xB4B964")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000709")]
		[Address(RVA = "0xB4BA10", Offset = "0xB4BA10", VA = "0xB4BA10")]
		public FPSCharacter()
		{
		}
	}
	[Token(Token = "0x2000147")]
	public class HitReactionTrigger : MonoBehaviour
	{
		[Token(Token = "0x400066E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private HitReaction hitReaction;

		[Token(Token = "0x400066F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float hitForce;

		[Token(Token = "0x4000670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string colliderName;

		[Token(Token = "0x600070A")]
		[Address(RVA = "0xB4BA20", Offset = "0xB4BA20", VA = "0xB4BA20")]
		private void Update()
		{
		}

		[Token(Token = "0x600070B")]
		[Address(RVA = "0xB4BB70", Offset = "0xB4BB70", VA = "0xB4BB70")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600070C")]
		[Address(RVA = "0xB4BCD4", Offset = "0xB4BCD4", VA = "0xB4BCD4")]
		public HitReactionTrigger()
		{
		}
	}
	[Token(Token = "0x2000148")]
	public class HoldingHands : MonoBehaviour
	{
		[Token(Token = "0x4000671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK rightHandChar;

		[Token(Token = "0x4000672")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FullBodyBipedIK leftHandChar;

		[Token(Token = "0x4000673")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform rightHandTarget;

		[Token(Token = "0x4000674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform leftHandTarget;

		[Token(Token = "0x4000675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float crossFade;

		[Token(Token = "0x4000676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float speed;

		[Token(Token = "0x4000677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Quaternion rightHandRotation;

		[Token(Token = "0x4000678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion leftHandRotation;

		[Token(Token = "0x600070D")]
		[Address(RVA = "0xB4BCE4", Offset = "0xB4BCE4", VA = "0xB4BCE4")]
		private void Start()
		{
		}

		[Token(Token = "0x600070E")]
		[Address(RVA = "0xB4BEB0", Offset = "0xB4BEB0", VA = "0xB4BEB0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600070F")]
		[Address(RVA = "0xB4C2C0", Offset = "0xB4C2C0", VA = "0xB4C2C0")]
		public HoldingHands()
		{
		}
	}
	[Token(Token = "0x2000149")]
	public class InteractionC2CDemo : MonoBehaviour
	{
		[Token(Token = "0x4000679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionSystem character1;

		[Token(Token = "0x400067A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractionSystem character2;

		[Token(Token = "0x400067B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractionObject handShake;

		[Token(Token = "0x6000710")]
		[Address(RVA = "0xB4C2D0", Offset = "0xB4C2D0", VA = "0xB4C2D0")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000711")]
		[Address(RVA = "0xB4C3B8", Offset = "0xB4C3B8", VA = "0xB4C3B8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000712")]
		[Address(RVA = "0xB4C4A4", Offset = "0xB4C4A4", VA = "0xB4C4A4")]
		public InteractionC2CDemo()
		{
		}
	}
	[Token(Token = "0x200014A")]
	public class InteractionDemo : MonoBehaviour
	{
		[Token(Token = "0x400067C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x400067D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool interrupt;

		[Token(Token = "0x400067E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractionObject ball;

		[Token(Token = "0x400067F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public InteractionObject benchMain;

		[Token(Token = "0x4000680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public InteractionObject benchHands;

		[Token(Token = "0x4000681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public InteractionObject button;

		[Token(Token = "0x4000682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public InteractionObject cigarette;

		[Token(Token = "0x4000683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public InteractionObject door;

		[Token(Token = "0x4000684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool isSitting;

		[Token(Token = "0x6000713")]
		[Address(RVA = "0xB4C4AC", Offset = "0xB4C4AC", VA = "0xB4C4AC")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000714")]
		[Address(RVA = "0xB4C9AC", Offset = "0xB4C9AC", VA = "0xB4C9AC")]
		public InteractionDemo()
		{
		}
	}
	[Token(Token = "0x200014B")]
	[RequireComponent(typeof(InteractionSystem))]
	public class InteractionSystemTestGUI : MonoBehaviour
	{
		[Token(Token = "0x4000685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Tooltip("The object to interact to")]
		private InteractionObject interactionObject;

		[Token(Token = "0x4000686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The effectors to interact with")]
		[SerializeField]
		private FullBodyBipedEffector[] effectors;

		[Token(Token = "0x4000687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private InteractionSystem interactionSystem;

		[Token(Token = "0x6000715")]
		[Address(RVA = "0xB4C9B4", Offset = "0xB4C9B4", VA = "0xB4C9B4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000716")]
		[Address(RVA = "0xB4CA0C", Offset = "0xB4CA0C", VA = "0xB4CA0C")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000717")]
		[Address(RVA = "0xB4CCB8", Offset = "0xB4CCB8", VA = "0xB4CCB8")]
		public InteractionSystemTestGUI()
		{
		}
	}
	[Token(Token = "0x200014C")]
	public class KissingRig : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200014D")]
		public class Partner
		{
			[Token(Token = "0x400068C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FullBodyBipedIK ik;

			[Token(Token = "0x400068D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform mouth;

			[Token(Token = "0x400068E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform mouthTarget;

			[Token(Token = "0x400068F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Transform touchTargetLeftHand;

			[Token(Token = "0x4000690")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Transform touchTargetRightHand;

			[Token(Token = "0x4000691")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float bodyWeightHorizontal;

			[Token(Token = "0x4000692")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float bodyWeightVertical;

			[Token(Token = "0x4000693")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public float neckRotationWeight;

			[Token(Token = "0x4000694")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public float headTiltAngle;

			[Token(Token = "0x4000695")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Vector3 headTiltAxis;

			[Token(Token = "0x4000696")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private Quaternion neckRotation;

			[Token(Token = "0x1700006B")]
			private Transform neck
			{
				[Token(Token = "0x600071D")]
				[Address(RVA = "0xB4D4C4", Offset = "0xB4D4C4", VA = "0xB4D4C4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600071B")]
			[Address(RVA = "0xB4CCE8", Offset = "0xB4CCE8", VA = "0xB4CCE8")]
			public void Initiate()
			{
			}

			[Token(Token = "0x600071C")]
			[Address(RVA = "0xB4CD64", Offset = "0xB4CD64", VA = "0xB4CD64")]
			public void Update(float weight)
			{
			}

			[Token(Token = "0x600071E")]
			[Address(RVA = "0xB4D35C", Offset = "0xB4D35C", VA = "0xB4D35C")]
			private void InverseTransformEffector(FullBodyBipedEffector effector, Transform target, Vector3 targetPosition, float weight)
			{
			}

			[Token(Token = "0x600071F")]
			[Address(RVA = "0xB4D510", Offset = "0xB4D510", VA = "0xB4D510")]
			public Partner()
			{
			}
		}

		[Token(Token = "0x4000688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Partner partner1;

		[Token(Token = "0x4000689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Partner partner2;

		[Token(Token = "0x400068A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float weight;

		[Token(Token = "0x400068B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int iterations;

		[Token(Token = "0x6000718")]
		[Address(RVA = "0xB4CCC0", Offset = "0xB4CCC0", VA = "0xB4CCC0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000719")]
		[Address(RVA = "0xB4CD08", Offset = "0xB4CD08", VA = "0xB4CD08")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600071A")]
		[Address(RVA = "0xB4D34C", Offset = "0xB4D34C", VA = "0xB4D34C")]
		public KissingRig()
		{
		}
	}
	[Token(Token = "0x200014E")]
	public class MotionAbsorb : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x200014F")]
		public enum Mode
		{
			[Token(Token = "0x400069F")]
			Position,
			[Token(Token = "0x40006A0")]
			PositionOffset
		}

		[Serializable]
		[Token(Token = "0x2000150")]
		public class Absorber
		{
			[Token(Token = "0x40006A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The type of effector (hand, foot, shoulder...) - this is just an enum")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x40006A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("How much should motion be absorbed on this effector")]
			public float weight;

			[Token(Token = "0x40006A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Vector3 position;

			[Token(Token = "0x40006A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private Quaternion rotation;

			[Token(Token = "0x40006A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private IKEffector e;

			[Token(Token = "0x6000726")]
			[Address(RVA = "0xB4D69C", Offset = "0xB4D69C", VA = "0xB4D69C")]
			public void SetToBone(IKSolverFullBodyBiped solver, Mode mode)
			{
			}

			[Token(Token = "0x6000727")]
			[Address(RVA = "0xB4D884", Offset = "0xB4D884", VA = "0xB4D884")]
			public void UpdateEffectorWeights(float w)
			{
			}

			[Token(Token = "0x6000728")]
			[Address(RVA = "0xB4D8A8", Offset = "0xB4D8A8", VA = "0xB4D8A8")]
			public void SetPosition(float w)
			{
			}

			[Token(Token = "0x6000729")]
			[Address(RVA = "0xB4D9B8", Offset = "0xB4D9B8", VA = "0xB4D9B8")]
			public void SetRotation(float w)
			{
			}

			[Token(Token = "0x600072A")]
			[Address(RVA = "0xB4DB70", Offset = "0xB4DB70", VA = "0xB4DB70")]
			public Absorber()
			{
			}
		}

		[Token(Token = "0x4000697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Use either effector position, position weight, rotation, rotationWeight or positionOffset and rotating the bone directly.")]
		public Mode mode;

		[Token(Token = "0x4000698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Array containing the absorbers")]
		public Absorber[] absorbers;

		[Token(Token = "0x4000699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Weight falloff curve (how fast will the effect reduce after impact)")]
		public AnimationCurve falloff;

		[Token(Token = "0x400069A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("How fast will the impact fade away. (if 1, effect lasts for 1 second)")]
		public float falloffSpeed;

		[Token(Token = "0x400069B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float timer;

		[Token(Token = "0x400069C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float w;

		[Token(Token = "0x400069D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Mode initialMode;

		[Token(Token = "0x6000720")]
		[Address(RVA = "0xB4D524", Offset = "0xB4D524", VA = "0xB4D524", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000721")]
		[Address(RVA = "0xB4D61C", Offset = "0xB4D61C", VA = "0xB4D61C")]
		private void OnCollisionEnter(Collision c)
		{
		}

		[Token(Token = "0x6000722")]
		[Address(RVA = "0xB4D778", Offset = "0xB4D778", VA = "0xB4D778", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000723")]
		[Address(RVA = "0xB4D93C", Offset = "0xB4D93C", VA = "0xB4D93C")]
		private void AfterIK()
		{
		}

		[Token(Token = "0x6000724")]
		[Address(RVA = "0xB4DA28", Offset = "0xB4DA28", VA = "0xB4DA28", Slot = "6")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6000725")]
		[Address(RVA = "0xB4DB60", Offset = "0xB4DB60", VA = "0xB4DB60")]
		public MotionAbsorb()
		{
		}
	}
	[Token(Token = "0x2000151")]
	public class MotionAbsorbCharacter : MonoBehaviour
	{
		[Token(Token = "0x40006A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Animator animator;

		[Token(Token = "0x40006A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MotionAbsorb motionAbsorb;

		[Token(Token = "0x40006A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform cube;

		[Token(Token = "0x40006A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float cubeRandomPosition;

		[Token(Token = "0x40006AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve motionAbsorbWeight;

		[Token(Token = "0x40006AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 cubeDefaultPosition;

		[Token(Token = "0x40006AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private AnimatorStateInfo info;

		[Token(Token = "0x40006AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody cubeRigidbody;

		[Token(Token = "0x600072B")]
		[Address(RVA = "0xB4DBD0", Offset = "0xB4DBD0", VA = "0xB4DBD0")]
		private void Start()
		{
		}

		[Token(Token = "0x600072C")]
		[Address(RVA = "0xB4DC48", Offset = "0xB4DC48", VA = "0xB4DC48")]
		private void Update()
		{
		}

		[Token(Token = "0x600072D")]
		[Address(RVA = "0xB4DD18", Offset = "0xB4DD18", VA = "0xB4DD18")]
		private void SwingStart()
		{
		}

		[Token(Token = "0x600072E")]
		[Address(RVA = "0xB4DE60", Offset = "0xB4DE60", VA = "0xB4DE60")]
		public MotionAbsorbCharacter()
		{
		}
	}
	[Token(Token = "0x2000152")]
	public class OffsetEffector : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x2000153")]
		public class EffectorLink
		{
			[Token(Token = "0x40006AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FullBodyBipedEffector effectorType;

			[Token(Token = "0x40006B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float weightMultiplier;

			[Token(Token = "0x40006B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			public Vector3 localPosition;

			[Token(Token = "0x6000732")]
			[Address(RVA = "0xB4E0E0", Offset = "0xB4E0E0", VA = "0xB4E0E0")]
			public EffectorLink()
			{
			}
		}

		[Token(Token = "0x40006AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public EffectorLink[] effectorLinks;

		[Token(Token = "0x600072F")]
		[Address(RVA = "0xB4DE74", Offset = "0xB4DE74", VA = "0xB4DE74", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000730")]
		[Address(RVA = "0xB4DF60", Offset = "0xB4DF60", VA = "0xB4DF60", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000731")]
		[Address(RVA = "0xB4E0D8", Offset = "0xB4E0D8", VA = "0xB4E0D8")]
		public OffsetEffector()
		{
		}
	}
	[Token(Token = "0x2000154")]
	[RequireComponent(typeof(FullBodyBipedIK))]
	public class PendulumExample : MonoBehaviour
	{
		[Token(Token = "0x40006B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		[Tooltip("The master weight of this script.")]
		public float weight;

		[Token(Token = "0x40006B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Multiplier for the distance of the root to the target.")]
		public float hangingDistanceMlp;

		[Token(Token = "0x40006B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		[Tooltip("Where does the root of the character land when weight is blended out?")]
		public Vector3 rootTargetPosition;

		[Token(Token = "0x40006B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("How is the root of the character rotated when weight is blended out?")]
		[HideInInspector]
		public Quaternion rootTargetRotation;

		[Token(Token = "0x40006B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Transform target;

		[Token(Token = "0x40006B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Transform leftHandTarget;

		[Token(Token = "0x40006B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Transform rightHandTarget;

		[Token(Token = "0x40006B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Transform leftFootTarget;

		[Token(Token = "0x40006BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Transform rightFootTarget;

		[Token(Token = "0x40006BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private Transform pelvisTarget;

		[Token(Token = "0x40006BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Transform bodyTarget;

		[Token(Token = "0x40006BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private Transform headTarget;

		[Token(Token = "0x40006BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private Vector3 pelvisDownAxis;

		[Token(Token = "0x40006BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x40006C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Quaternion rootRelativeToPelvis;

		[Token(Token = "0x40006C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 pelvisToRoot;

		[Token(Token = "0x40006C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float lastWeight;

		[Token(Token = "0x6000733")]
		[Address(RVA = "0xB4E0F0", Offset = "0xB4E0F0", VA = "0xB4E0F0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000734")]
		[Address(RVA = "0xB4E404", Offset = "0xB4E404", VA = "0xB4E404")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000735")]
		[Address(RVA = "0xB4EC00", Offset = "0xB4EC00", VA = "0xB4EC00")]
		public PendulumExample()
		{
		}
	}
	[Token(Token = "0x2000155")]
	public abstract class PickUp2Handed : MonoBehaviour
	{
		[Token(Token = "0x40006C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private int GUIspace;

		[Token(Token = "0x40006C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x40006C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InteractionObject obj;

		[Token(Token = "0x40006C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform pivot;

		[Token(Token = "0x40006C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform holdPoint;

		[Token(Token = "0x40006C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float pickUpTime;

		[Token(Token = "0x40006C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float holdWeight;

		[Token(Token = "0x40006CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float holdWeightVel;

		[Token(Token = "0x40006CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 pickUpPosition;

		[Token(Token = "0x40006CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion pickUpRotation;

		[Token(Token = "0x1700006C")]
		private bool holding
		{
			[Token(Token = "0x600073D")]
			[Address(RVA = "0xB4EE80", Offset = "0xB4EE80", VA = "0xB4EE80")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000736")]
		[Address(RVA = "0xB4EC6C", Offset = "0xB4EC6C", VA = "0xB4EC6C")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000737")]
		protected abstract void RotatePivot();

		[Token(Token = "0x6000738")]
		[Address(RVA = "0xB4EEA0", Offset = "0xB4EEA0", VA = "0xB4EEA0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000739")]
		[Address(RVA = "0xB4F090", Offset = "0xB4F090", VA = "0xB4F090")]
		private void OnPause(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x600073A")]
		[Address(RVA = "0xB4F200", Offset = "0xB4F200", VA = "0xB4F200")]
		private void OnStart(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x600073B")]
		[Address(RVA = "0xB4F2D0", Offset = "0xB4F2D0", VA = "0xB4F2D0")]
		private void OnDrop(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x600073C")]
		[Address(RVA = "0xB4F3F0", Offset = "0xB4F3F0", VA = "0xB4F3F0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600073E")]
		[Address(RVA = "0xB4F564", Offset = "0xB4F564", VA = "0xB4F564")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600073F")]
		[Address(RVA = "0xB4F7A0", Offset = "0xB4F7A0", VA = "0xB4F7A0")]
		protected PickUp2Handed()
		{
		}
	}
	[Token(Token = "0x2000156")]
	public class PickUpBox : PickUp2Handed
	{
		[Token(Token = "0x6000740")]
		[Address(RVA = "0xB4F7B4", Offset = "0xB4F7B4", VA = "0xB4F7B4", Slot = "4")]
		protected override void RotatePivot()
		{
		}

		[Token(Token = "0x6000741")]
		[Address(RVA = "0xB4F98C", Offset = "0xB4F98C", VA = "0xB4F98C")]
		public PickUpBox()
		{
		}
	}
	[Token(Token = "0x2000157")]
	public class PickUpSphere : PickUp2Handed
	{
		[Token(Token = "0x6000742")]
		[Address(RVA = "0xB4F9A0", Offset = "0xB4F9A0", VA = "0xB4F9A0", Slot = "4")]
		protected override void RotatePivot()
		{
		}

		[Token(Token = "0x6000743")]
		[Address(RVA = "0xB4FAB4", Offset = "0xB4FAB4", VA = "0xB4FAB4")]
		public PickUpSphere()
		{
		}
	}
	[Token(Token = "0x2000158")]
	public class RagdollUtilityDemo : MonoBehaviour
	{
		[Token(Token = "0x40006CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RagdollUtility ragdollUtility;

		[Token(Token = "0x40006CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform root;

		[Token(Token = "0x40006CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Rigidbody pelvis;

		[Token(Token = "0x6000744")]
		[Address(RVA = "0xB4FAC8", Offset = "0xB4FAC8", VA = "0xB4FAC8")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000745")]
		[Address(RVA = "0xB4FB60", Offset = "0xB4FB60", VA = "0xB4FB60")]
		private void Update()
		{
		}

		[Token(Token = "0x6000746")]
		[Address(RVA = "0xB4FC78", Offset = "0xB4FC78", VA = "0xB4FC78")]
		public RagdollUtilityDemo()
		{
		}
	}
	[Token(Token = "0x2000159")]
	[RequireComponent(typeof(Recoil))]
	public class RecoilTest : MonoBehaviour
	{
		[Token(Token = "0x40006D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float magnitude;

		[Token(Token = "0x40006D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Recoil recoil;

		[Token(Token = "0x6000747")]
		[Address(RVA = "0xB4FC80", Offset = "0xB4FC80", VA = "0xB4FC80")]
		private void Start()
		{
		}

		[Token(Token = "0x6000748")]
		[Address(RVA = "0xB4FCD8", Offset = "0xB4FCD8", VA = "0xB4FCD8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000749")]
		[Address(RVA = "0xB4FD24", Offset = "0xB4FD24", VA = "0xB4FD24")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600074A")]
		[Address(RVA = "0xB4FDBC", Offset = "0xB4FDBC", VA = "0xB4FDBC")]
		public RecoilTest()
		{
		}
	}
	[Token(Token = "0x200015A")]
	public class ResetInteractionObject : MonoBehaviour
	{
		[Token(Token = "0x200015B")]
		[CompilerGenerated]
		private sealed class <ResetObject>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40006D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40006D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40006D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float resetTime;

			[Token(Token = "0x40006DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ResetInteractionObject <>4__this;

			[Token(Token = "0x1700006D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000752")]
				[Address(RVA = "0xB50134", Offset = "0xB50134", VA = "0xB50134", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700006E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000754")]
				[Address(RVA = "0xB5017C", Offset = "0xB5017C", VA = "0xB5017C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600074F")]
			[Address(RVA = "0xB4FF50", Offset = "0xB4FF50", VA = "0xB4FF50")]
			[DebuggerHidden]
			public <ResetObject>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6000750")]
			[Address(RVA = "0xB4FF88", Offset = "0xB4FF88", VA = "0xB4FF88", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000751")]
			[Address(RVA = "0xB4FF8C", Offset = "0xB4FF8C", VA = "0xB4FF8C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000753")]
			[Address(RVA = "0xB5013C", Offset = "0xB5013C", VA = "0xB5013C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40006D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float resetDelay;

		[Token(Token = "0x40006D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Vector3 defaultPosition;

		[Token(Token = "0x40006D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Quaternion defaultRotation;

		[Token(Token = "0x40006D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform defaultParent;

		[Token(Token = "0x40006D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Rigidbody r;

		[Token(Token = "0x600074B")]
		[Address(RVA = "0xB4FDCC", Offset = "0xB4FDCC", VA = "0xB4FDCC")]
		private void Start()
		{
		}

		[Token(Token = "0x600074C")]
		[Address(RVA = "0xB4FE90", Offset = "0xB4FE90", VA = "0xB4FE90")]
		private void OnPickUp(Transform t)
		{
		}

		[Token(Token = "0x600074D")]
		[Address(RVA = "0xB4FECC", Offset = "0xB4FECC", VA = "0xB4FECC")]
		[IteratorStateMachine(typeof(<ResetObject>d__7))]
		private IEnumerator ResetObject(float resetTime)
		{
			return null;
		}

		[Token(Token = "0x600074E")]
		[Address(RVA = "0xB4FF78", Offset = "0xB4FF78", VA = "0xB4FF78")]
		public ResetInteractionObject()
		{
		}
	}
	[Token(Token = "0x200015C")]
	[RequireComponent(typeof(Animator))]
	public class SoccerDemo : MonoBehaviour
	{
		[Token(Token = "0x200015D")]
		[CompilerGenerated]
		private sealed class <ResetDelayed>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40006DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40006DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40006E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SoccerDemo <>4__this;

			[Token(Token = "0x1700006F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600075B")]
				[Address(RVA = "0xB50420", Offset = "0xB50420", VA = "0xB50420", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000070")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600075D")]
				[Address(RVA = "0xB50468", Offset = "0xB50468", VA = "0xB50468", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000758")]
			[Address(RVA = "0xB502AC", Offset = "0xB502AC", VA = "0xB502AC")]
			[DebuggerHidden]
			public <ResetDelayed>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x6000759")]
			[Address(RVA = "0xB502DC", Offset = "0xB502DC", VA = "0xB502DC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600075A")]
			[Address(RVA = "0xB502E0", Offset = "0xB502E0", VA = "0xB502E0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600075C")]
			[Address(RVA = "0xB50428", Offset = "0xB50428", VA = "0xB50428", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40006DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Animator animator;

		[Token(Token = "0x40006DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 defaultPosition;

		[Token(Token = "0x40006DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion defaultRotation;

		[Token(Token = "0x6000755")]
		[Address(RVA = "0xB50184", Offset = "0xB50184", VA = "0xB50184")]
		private void Start()
		{
		}

		[Token(Token = "0x6000756")]
		[Address(RVA = "0xB50238", Offset = "0xB50238", VA = "0xB50238")]
		[IteratorStateMachine(typeof(<ResetDelayed>d__4))]
		private IEnumerator ResetDelayed()
		{
			return null;
		}

		[Token(Token = "0x6000757")]
		[Address(RVA = "0xB502D4", Offset = "0xB502D4", VA = "0xB502D4")]
		public SoccerDemo()
		{
		}
	}
	[Token(Token = "0x200015E")]
	public class TouchWalls : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200015F")]
		public class EffectorLink
		{
			[Token(Token = "0x40006E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool enabled;

			[Token(Token = "0x40006E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public FullBodyBipedEffector effectorType;

			[Token(Token = "0x40006E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public InteractionObject interactionObject;

			[Token(Token = "0x40006E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform spherecastFrom;

			[Token(Token = "0x40006E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float spherecastRadius;

			[Token(Token = "0x40006E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float minDistance;

			[Token(Token = "0x40006E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public LayerMask touchLayers;

			[Token(Token = "0x40006EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float lerpSpeed;

			[Token(Token = "0x40006EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public float minSwitchTime;

			[Token(Token = "0x40006EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public float releaseDistance;

			[Token(Token = "0x40006ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public bool sliding;

			[Token(Token = "0x40006EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private Vector3 raycastDirectionLocal;

			[Token(Token = "0x40006EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private float raycastDistance;

			[Token(Token = "0x40006F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private bool inTouch;

			[Token(Token = "0x40006F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private RaycastHit hit;

			[Token(Token = "0x40006F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			private Vector3 targetPosition;

			[Token(Token = "0x40006F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			private Quaternion targetRotation;

			[Token(Token = "0x40006F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private bool initiated;

			[Token(Token = "0x40006F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			private float nextSwitchTime;

			[Token(Token = "0x40006F6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			private float speedF;

			[Token(Token = "0x6000762")]
			[Address(RVA = "0xB504D4", Offset = "0xB504D4", VA = "0xB504D4")]
			public void Initiate(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x6000763")]
			[Address(RVA = "0xB510A8", Offset = "0xB510A8", VA = "0xB510A8")]
			private bool FindWalls(Vector3 direction)
			{
				return default(bool);
			}

			[Token(Token = "0x6000764")]
			[Address(RVA = "0xB508DC", Offset = "0xB508DC", VA = "0xB508DC")]
			public void Update(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x6000765")]
			[Address(RVA = "0xB51184", Offset = "0xB51184", VA = "0xB51184")]
			private void StopTouch(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x6000766")]
			[Address(RVA = "0xB51268", Offset = "0xB51268", VA = "0xB51268")]
			private void OnInteractionStart(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
			{
			}

			[Token(Token = "0x6000767")]
			[Address(RVA = "0xB512F4", Offset = "0xB512F4", VA = "0xB512F4")]
			private void OnInteractionResume(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
			{
			}

			[Token(Token = "0x6000768")]
			[Address(RVA = "0xB5137C", Offset = "0xB5137C", VA = "0xB5137C")]
			private void OnInteractionStop(FullBodyBipedEffector effectorType, InteractionObject interactionObject)
			{
			}

			[Token(Token = "0x6000769")]
			[Address(RVA = "0xB50E94", Offset = "0xB50E94", VA = "0xB50E94")]
			public void Destroy(InteractionSystem interactionSystem)
			{
			}

			[Token(Token = "0x600076A")]
			[Address(RVA = "0xB51404", Offset = "0xB51404", VA = "0xB51404")]
			public EffectorLink()
			{
			}
		}

		[Token(Token = "0x40006E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractionSystem interactionSystem;

		[Token(Token = "0x40006E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EffectorLink[] effectorLinks;

		[Token(Token = "0x600075E")]
		[Address(RVA = "0xB50470", Offset = "0xB50470", VA = "0xB50470")]
		private void Start()
		{
		}

		[Token(Token = "0x600075F")]
		[Address(RVA = "0xB5087C", Offset = "0xB5087C", VA = "0xB5087C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000760")]
		[Address(RVA = "0xB50DE4", Offset = "0xB50DE4", VA = "0xB50DE4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000761")]
		[Address(RVA = "0xB510A0", Offset = "0xB510A0", VA = "0xB510A0")]
		public TouchWalls()
		{
		}
	}
	[Token(Token = "0x2000160")]
	public class TransferMotion : MonoBehaviour
	{
		[Token(Token = "0x40006F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Transform to transfer motion to.")]
		public Transform to;

		[Token(Token = "0x40006F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The amount of motion to transfer.")]
		[Range(0f, 1f)]
		public float transferMotion;

		[Token(Token = "0x40006F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 lastPosition;

		[Token(Token = "0x600076B")]
		[Address(RVA = "0xB51438", Offset = "0xB51438", VA = "0xB51438")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600076C")]
		[Address(RVA = "0xB51468", Offset = "0xB51468", VA = "0xB51468")]
		private void Update()
		{
		}

		[Token(Token = "0x600076D")]
		[Address(RVA = "0xB51518", Offset = "0xB51518", VA = "0xB51518")]
		public TransferMotion()
		{
		}
	}
	[Token(Token = "0x2000161")]
	public class TwoHandedProp : MonoBehaviour
	{
		[Token(Token = "0x40006FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The left hand target parented to the right hand.")]
		public Transform leftHandTarget;

		[Token(Token = "0x40006FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x40006FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 targetPosRelativeToRight;

		[Token(Token = "0x40006FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Quaternion targetRotRelativeToRight;

		[Token(Token = "0x600076E")]
		[Address(RVA = "0xB5152C", Offset = "0xB5152C", VA = "0xB5152C")]
		private void Start()
		{
		}

		[Token(Token = "0x600076F")]
		[Address(RVA = "0xB51744", Offset = "0xB51744", VA = "0xB51744")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000770")]
		[Address(RVA = "0xB519E0", Offset = "0xB519E0", VA = "0xB519E0")]
		private void AfterFBBIK()
		{
		}

		[Token(Token = "0x6000771")]
		[Address(RVA = "0xB51AA8", Offset = "0xB51AA8", VA = "0xB51AA8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000772")]
		[Address(RVA = "0xB51BD4", Offset = "0xB51BD4", VA = "0xB51BD4")]
		public TwoHandedProp()
		{
		}
	}
	[Token(Token = "0x2000162")]
	public class UserControlInteractions : UserControlThirdPerson
	{
		[Token(Token = "0x40006FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private CharacterThirdPerson character;

		[Token(Token = "0x40006FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private InteractionSystem interactionSystem;

		[Token(Token = "0x4000700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private bool disableInputInInteraction;

		[Token(Token = "0x4000701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float enableInputAtProgress;

		[Token(Token = "0x6000773")]
		[Address(RVA = "0xB51BDC", Offset = "0xB51BDC", VA = "0xB51BDC", Slot = "4")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000774")]
		[Address(RVA = "0xB51CF4", Offset = "0xB51CF4", VA = "0xB51CF4")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000775")]
		[Address(RVA = "0xB51EBC", Offset = "0xB51EBC", VA = "0xB51EBC")]
		public UserControlInteractions()
		{
		}
	}
	[Token(Token = "0x2000163")]
	public class GrounderDemo : MonoBehaviour
	{
		[Token(Token = "0x4000702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] characters;

		[Token(Token = "0x6000776")]
		[Address(RVA = "0xB51ED8", Offset = "0xB51ED8", VA = "0xB51ED8")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000777")]
		[Address(RVA = "0xB520E0", Offset = "0xB520E0", VA = "0xB520E0")]
		public void Activate(int index)
		{
		}

		[Token(Token = "0x6000778")]
		[Address(RVA = "0xB5214C", Offset = "0xB5214C", VA = "0xB5214C")]
		public GrounderDemo()
		{
		}
	}
	[Token(Token = "0x2000164")]
	public class PlatformRotator : MonoBehaviour
	{
		[Token(Token = "0x2000165")]
		[CompilerGenerated]
		private sealed class <SwitchRotation>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400070F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000710")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000711")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlatformRotator <>4__this;

			[Token(Token = "0x17000071")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000782")]
				[Address(RVA = "0xB528BC", Offset = "0xB528BC", VA = "0xB528BC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000072")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000784")]
				[Address(RVA = "0xB52904", Offset = "0xB52904", VA = "0xB52904", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600077F")]
			[Address(RVA = "0xB52544", Offset = "0xB52544", VA = "0xB52544")]
			[DebuggerHidden]
			public <SwitchRotation>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6000780")]
			[Address(RVA = "0xB52734", Offset = "0xB52734", VA = "0xB52734", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000781")]
			[Address(RVA = "0xB52738", Offset = "0xB52738", VA = "0xB52738", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000783")]
			[Address(RVA = "0xB528C4", Offset = "0xB528C4", VA = "0xB528C4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxAngle;

		[Token(Token = "0x4000704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float switchRotationTime;

		[Token(Token = "0x4000705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float random;

		[Token(Token = "0x4000706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float rotationSpeed;

		[Token(Token = "0x4000707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 movePosition;

		[Token(Token = "0x4000708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float moveSpeed;

		[Token(Token = "0x4000709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int characterLayer;

		[Token(Token = "0x400070A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion defaultRotation;

		[Token(Token = "0x400070B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion targetRotation;

		[Token(Token = "0x400070C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 targetPosition;

		[Token(Token = "0x400070D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 velocity;

		[Token(Token = "0x400070E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody r;

		[Token(Token = "0x6000779")]
		[Address(RVA = "0xB52154", Offset = "0xB52154", VA = "0xB52154")]
		private void Start()
		{
		}

		[Token(Token = "0x600077A")]
		[Address(RVA = "0xB52290", Offset = "0xB52290", VA = "0xB52290")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600077B")]
		[Address(RVA = "0xB5221C", Offset = "0xB5221C", VA = "0xB5221C")]
		[IteratorStateMachine(typeof(<SwitchRotation>d__14))]
		private IEnumerator SwitchRotation()
		{
			return null;
		}

		[Token(Token = "0x600077C")]
		[Address(RVA = "0xB5256C", Offset = "0xB5256C", VA = "0xB5256C")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x600077D")]
		[Address(RVA = "0xB52644", Offset = "0xB52644", VA = "0xB52644")]
		private void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x600077E")]
		[Address(RVA = "0xB52718", Offset = "0xB52718", VA = "0xB52718")]
		public PlatformRotator()
		{
		}
	}
	[Token(Token = "0x2000166")]
	public class BendGoal : MonoBehaviour
	{
		[Token(Token = "0x4000712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LimbIK limbIK;

		[Token(Token = "0x4000713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x6000785")]
		[Address(RVA = "0xB5290C", Offset = "0xB5290C", VA = "0xB5290C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000786")]
		[Address(RVA = "0xB52974", Offset = "0xB52974", VA = "0xB52974")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000787")]
		[Address(RVA = "0xB52A20", Offset = "0xB52A20", VA = "0xB52A20")]
		public BendGoal()
		{
		}
	}
	[Token(Token = "0x2000167")]
	public class Turret : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000168")]
		public class Part
		{
			[Token(Token = "0x4000716")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x4000717")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private RotationLimit rotationLimit;

			[Token(Token = "0x600078A")]
			[Address(RVA = "0xB52A94", Offset = "0xB52A94", VA = "0xB52A94")]
			public void AimAt(Transform target)
			{
			}

			[Token(Token = "0x600078B")]
			[Address(RVA = "0xB52BD0", Offset = "0xB52BD0", VA = "0xB52BD0")]
			public Part()
			{
			}
		}

		[Token(Token = "0x4000714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x4000715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Part[] parts;

		[Token(Token = "0x6000788")]
		[Address(RVA = "0xB52A30", Offset = "0xB52A30", VA = "0xB52A30")]
		private void Update()
		{
		}

		[Token(Token = "0x6000789")]
		[Address(RVA = "0xB52BC8", Offset = "0xB52BC8", VA = "0xB52BC8")]
		public Turret()
		{
		}
	}
	[Token(Token = "0x2000169")]
	public class HitReactionVRIKTrigger : MonoBehaviour
	{
		[Token(Token = "0x4000718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private HitReactionVRIK hitReaction;

		[Token(Token = "0x4000719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float hitForce;

		[Token(Token = "0x400071A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string colliderName;

		[Token(Token = "0x600078C")]
		[Address(RVA = "0xB52BD8", Offset = "0xB52BD8", VA = "0xB52BD8")]
		private void Update()
		{
		}

		[Token(Token = "0x600078D")]
		[Address(RVA = "0xB52D28", Offset = "0xB52D28", VA = "0xB52D28")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x600078E")]
		[Address(RVA = "0xB52E8C", Offset = "0xB52E8C", VA = "0xB52E8C")]
		public HitReactionVRIKTrigger()
		{
		}
	}
	[Token(Token = "0x200016A")]
	public class VRIKCalibrationController : MonoBehaviour
	{
		[Token(Token = "0x400071B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Reference to the VRIK component on the avatar.")]
		public VRIK ik;

		[Token(Token = "0x400071C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The settings for VRIK calibration.")]
		public VRIKCalibrator.Settings settings;

		[Token(Token = "0x400071D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The HMD.")]
		public Transform headTracker;

		[Token(Token = "0x400071E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("(Optional) A tracker placed anywhere on the body of the player, preferrably close to the pelvis, on the belt area.")]
		public Transform bodyTracker;

		[Token(Token = "0x400071F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("(Optional) A tracker or hand controller device placed anywhere on or in the player's left hand.")]
		public Transform leftHandTracker;

		[Token(Token = "0x4000720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("(Optional) A tracker or hand controller device placed anywhere on or in the player's right hand.")]
		public Transform rightHandTracker;

		[Token(Token = "0x4000721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("(Optional) A tracker placed anywhere on the ankle or toes of the player's left leg.")]
		public Transform leftFootTracker;

		[Token(Token = "0x4000722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("(Optional) A tracker placed anywhere on the ankle or toes of the player's right leg.")]
		public Transform rightFootTracker;

		[Token(Token = "0x600078F")]
		[Address(RVA = "0xB52E9C", Offset = "0xB52E9C", VA = "0xB52E9C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000790")]
		[Address(RVA = "0xB52EC8", Offset = "0xB52EC8", VA = "0xB52EC8")]
		[ContextMenu("Calibrate")]
		private void Calibrate()
		{
		}

		[Token(Token = "0x6000791")]
		[Address(RVA = "0xB52EF8", Offset = "0xB52EF8", VA = "0xB52EF8")]
		public VRIKCalibrationController()
		{
		}
	}
	[Token(Token = "0x200016B")]
	public class VRIKPlatform : MonoBehaviour
	{
		[Token(Token = "0x4000723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRIK ik;

		[Token(Token = "0x4000724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion lastRotation;

		[Token(Token = "0x6000792")]
		[Address(RVA = "0xB52F00", Offset = "0xB52F00", VA = "0xB52F00")]
		private void Start()
		{
		}

		[Token(Token = "0x6000793")]
		[Address(RVA = "0xB52F50", Offset = "0xB52F50", VA = "0xB52F50")]
		private void Update()
		{
		}

		[Token(Token = "0x6000794")]
		[Address(RVA = "0xB53128", Offset = "0xB53128", VA = "0xB53128")]
		public VRIKPlatform()
		{
		}
	}
	[Token(Token = "0x200016C")]
	public abstract class CharacterAnimationBase : MonoBehaviour
	{
		[Token(Token = "0x4000726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool smoothFollow;

		[Token(Token = "0x4000727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float smoothFollowSpeed;

		[Token(Token = "0x4000728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected bool animatePhysics;

		[Token(Token = "0x4000729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 lastPosition;

		[Token(Token = "0x400072A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 localPosition;

		[Token(Token = "0x400072B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion localRotation;

		[Token(Token = "0x400072C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion lastRotation;

		[Token(Token = "0x17000073")]
		public virtual bool animationGrounded
		{
			[Token(Token = "0x6000796")]
			[Address(RVA = "0xB531A0", Offset = "0xB531A0", VA = "0xB531A0", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000795")]
		[Address(RVA = "0xB53180", Offset = "0xB53180", VA = "0xB53180", Slot = "4")]
		public virtual Vector3 GetPivotPoint()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000797")]
		[Address(RVA = "0xB531A8", Offset = "0xB531A8", VA = "0xB531A8")]
		public float GetAngleFromForward(Vector3 worldDirection)
		{
			return default(float);
		}

		[Token(Token = "0x6000798")]
		[Address(RVA = "0xB53208", Offset = "0xB53208", VA = "0xB53208", Slot = "6")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000799")]
		[Address(RVA = "0xB53474", Offset = "0xB53474", VA = "0xB53474", Slot = "7")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x600079A")]
		[Address(RVA = "0xB536B8", Offset = "0xB536B8", VA = "0xB536B8", Slot = "8")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x600079B")]
		[Address(RVA = "0xB53484", Offset = "0xB53484", VA = "0xB53484")]
		private void SmoothFollow()
		{
		}

		[Token(Token = "0x600079C")]
		[Address(RVA = "0xB536C8", Offset = "0xB536C8", VA = "0xB536C8")]
		protected CharacterAnimationBase()
		{
		}
	}
	[Token(Token = "0x200016D")]
	[RequireComponent(typeof(Animator))]
	public class CharacterAnimationSimple : CharacterAnimationBase
	{
		[Token(Token = "0x400072D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private CharacterThirdPerson characterController;

		[Token(Token = "0x400072E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float pivotOffset;

		[Token(Token = "0x400072F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private AnimationCurve moveSpeed;

		[Token(Token = "0x4000730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Animator animator;

		[Token(Token = "0x600079D")]
		[Address(RVA = "0xB536E0", Offset = "0xB536E0", VA = "0xB536E0", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x600079E")]
		[Address(RVA = "0xB53740", Offset = "0xB53740", VA = "0xB53740", Slot = "4")]
		public override Vector3 GetPivotPoint()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600079F")]
		[Address(RVA = "0xB537D0", Offset = "0xB537D0", VA = "0xB537D0")]
		private void Update()
		{
		}

		[Token(Token = "0x60007A0")]
		[Address(RVA = "0xB538F4", Offset = "0xB538F4", VA = "0xB538F4")]
		public CharacterAnimationSimple()
		{
		}
	}
	[Token(Token = "0x200016E")]
	[RequireComponent(typeof(Animator))]
	public class CharacterAnimationThirdPerson : CharacterAnimationBase
	{
		[Token(Token = "0x4000731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public CharacterThirdPerson characterController;

		[Token(Token = "0x4000732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float turnSensitivity;

		[Token(Token = "0x4000733")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		private float turnSpeed;

		[Token(Token = "0x4000734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private float runCycleLegOffset;

		[Token(Token = "0x4000735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Range(0.1f, 3f)]
		[SerializeField]
		private float animSpeedMultiplier;

		[Token(Token = "0x4000736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Animator animator;

		[Token(Token = "0x4000737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 lastForward;

		[Token(Token = "0x4000738")]
		private const string groundedDirectional = "Grounded Directional";

		[Token(Token = "0x4000739")]
		private const string groundedStrafe = "Grounded Strafe";

		[Token(Token = "0x400073A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float deltaAngle;

		[Token(Token = "0x17000074")]
		public override bool animationGrounded
		{
			[Token(Token = "0x60007A3")]
			[Address(RVA = "0xB539B0", Offset = "0xB539B0", VA = "0xB539B0", Slot = "5")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60007A1")]
		[Address(RVA = "0xB5390C", Offset = "0xB5390C", VA = "0xB5390C", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60007A2")]
		[Address(RVA = "0xB53994", Offset = "0xB53994", VA = "0xB53994", Slot = "4")]
		public override Vector3 GetPivotPoint()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007A4")]
		[Address(RVA = "0xB53AA4", Offset = "0xB53AA4", VA = "0xB53AA4", Slot = "9")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60007A5")]
		[Address(RVA = "0xB53E38", Offset = "0xB53E38", VA = "0xB53E38")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x60007A6")]
		[Address(RVA = "0xB53F60", Offset = "0xB53F60", VA = "0xB53F60")]
		public CharacterAnimationThirdPerson()
		{
		}
	}
	[Token(Token = "0x200016F")]
	[RequireComponent(typeof(CapsuleCollider))]
	[RequireComponent(typeof(Rigidbody))]
	public abstract class CharacterBase : MonoBehaviour
	{
		[Token(Token = "0x400073B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Base Parameters")]
		[Tooltip("If specified, will use the direction from the character to this Transform as the gravity vector instead of Physics.gravity. Physics.gravity.magnitude will be used as the magnitude of the gravity vector.")]
		public Transform gravityTarget;

		[Token(Token = "0x400073C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Multiplies gravity applied to the character even if 'Individual Gravity' is unchecked.")]
		[SerializeField]
		protected float gravityMultiplier;

		[Token(Token = "0x400073D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		protected float airborneThreshold;

		[Token(Token = "0x400073E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private float slopeStartAngle;

		[Token(Token = "0x400073F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		private float slopeEndAngle;

		[Token(Token = "0x4000740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private float spherecastRadius;

		[Token(Token = "0x4000741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private LayerMask groundLayers;

		[Token(Token = "0x4000742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PhysicMaterial zeroFrictionMaterial;

		[Token(Token = "0x4000743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private PhysicMaterial highFrictionMaterial;

		[Token(Token = "0x4000744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected Rigidbody r;

		[Token(Token = "0x4000745")]
		protected const float half = 0.5f;

		[Token(Token = "0x4000746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected float originalHeight;

		[Token(Token = "0x4000747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		protected Vector3 originalCenter;

		[Token(Token = "0x4000748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected CapsuleCollider capsule;

		[Token(Token = "0x60007A7")]
		public abstract void Move(Vector3 deltaPosition, Quaternion deltaRotation);

		[Token(Token = "0x60007A8")]
		[Address(RVA = "0xB53F84", Offset = "0xB53F84", VA = "0xB53F84")]
		protected Vector3 GetGravity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007A9")]
		[Address(RVA = "0xB54170", Offset = "0xB54170", VA = "0xB54170", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x60007AA")]
		[Address(RVA = "0xB5439C", Offset = "0xB5439C", VA = "0xB5439C", Slot = "6")]
		protected virtual RaycastHit GetSpherecastHit()
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x60007AB")]
		[Address(RVA = "0xB5453C", Offset = "0xB5453C", VA = "0xB5453C")]
		public float GetAngleFromForward(Vector3 worldDirection)
		{
			return default(float);
		}

		[Token(Token = "0x60007AC")]
		[Address(RVA = "0xB5459C", Offset = "0xB5459C", VA = "0xB5459C")]
		protected void RigidbodyRotateAround(Vector3 point, Vector3 axis, float angle)
		{
		}

		[Token(Token = "0x60007AD")]
		[Address(RVA = "0xB54700", Offset = "0xB54700", VA = "0xB54700")]
		protected void ScaleCapsule(float mlp)
		{
		}

		[Token(Token = "0x60007AE")]
		[Address(RVA = "0xB54904", Offset = "0xB54904", VA = "0xB54904")]
		protected void HighFriction()
		{
		}

		[Token(Token = "0x60007AF")]
		[Address(RVA = "0xB54928", Offset = "0xB54928", VA = "0xB54928")]
		protected void ZeroFriction()
		{
		}

		[Token(Token = "0x60007B0")]
		[Address(RVA = "0xB5494C", Offset = "0xB5494C", VA = "0xB5494C")]
		protected float GetSlopeDamper(Vector3 velocity, Vector3 groundNormal)
		{
			return default(float);
		}

		[Token(Token = "0x60007B1")]
		[Address(RVA = "0xB54A98", Offset = "0xB54A98", VA = "0xB54A98")]
		protected CharacterBase()
		{
		}
	}
	[Token(Token = "0x2000170")]
	public class CharacterThirdPerson : CharacterBase
	{
		[Serializable]
		[Token(Token = "0x2000171")]
		public enum MoveMode
		{
			[Token(Token = "0x400077D")]
			Directional,
			[Token(Token = "0x400077E")]
			Strafe
		}

		[Token(Token = "0x2000172")]
		public struct AnimState
		{
			[Token(Token = "0x400077F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 moveDirection;

			[Token(Token = "0x4000780")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public bool jump;

			[Token(Token = "0x4000781")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD")]
			public bool crouch;

			[Token(Token = "0x4000782")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE")]
			public bool onGround;

			[Token(Token = "0x4000783")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF")]
			public bool isStrafing;

			[Token(Token = "0x4000784")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float yVelocity;
		}

		[Token(Token = "0x4000749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("References")]
		public CharacterAnimationBase characterAnimation;

		[Token(Token = "0x400074A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UserControlThirdPerson userControl;

		[Token(Token = "0x400074B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public CameraController cam;

		[Token(Token = "0x400074C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Header("Movement")]
		public MoveMode moveMode;

		[Token(Token = "0x400074D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public bool smoothPhysics;

		[Token(Token = "0x400074E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float smoothAccelerationTime;

		[Token(Token = "0x400074F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float linearAccelerationSpeed;

		[Token(Token = "0x4000750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float platformFriction;

		[Token(Token = "0x4000751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float groundStickyEffect;

		[Token(Token = "0x4000752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float maxVerticalVelocityOnGround;

		[Token(Token = "0x4000753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float velocityToGroundTangentWeight;

		[Token(Token = "0x4000754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Header("Rotation")]
		public bool lookInCameraDirection;

		[Token(Token = "0x4000755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float turnSpeed;

		[Token(Token = "0x4000756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float stationaryTurnSpeedMlp;

		[Token(Token = "0x4000757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[Header("Jumping and Falling")]
		public float airSpeed;

		[Token(Token = "0x4000758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float airControl;

		[Token(Token = "0x4000759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float jumpPower;

		[Token(Token = "0x400075A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float jumpRepeatDelayTime;

		[Token(Token = "0x400075B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[Header("Wall Running")]
		[SerializeField]
		private LayerMask wallRunLayers;

		[Token(Token = "0x400075C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public float wallRunMaxLength;

		[Token(Token = "0x400075D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float wallRunMinMoveMag;

		[Token(Token = "0x400075E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float wallRunMinVelocityY;

		[Token(Token = "0x400075F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float wallRunRotationSpeed;

		[Token(Token = "0x4000760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public float wallRunMaxRotationAngle;

		[Token(Token = "0x4000761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public float wallRunWeightSpeed;

		[Token(Token = "0x4000762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Header("Crouching")]
		public float crouchCapsuleScaleMlp;

		[Token(Token = "0x4000764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public AnimState animState;

		[Token(Token = "0x4000765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		protected Vector3 moveDirection;

		[Token(Token = "0x4000766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Animator animator;

		[Token(Token = "0x4000767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Vector3 normal;

		[Token(Token = "0x4000768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private Vector3 platformVelocity;

		[Token(Token = "0x4000769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Vector3 platformAngularVelocity;

		[Token(Token = "0x400076A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private RaycastHit hit;

		[Token(Token = "0x400076B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private float jumpLeg;

		[Token(Token = "0x400076C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		private float jumpEndTime;

		[Token(Token = "0x400076D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private float forwardMlp;

		[Token(Token = "0x400076E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private float groundDistance;

		[Token(Token = "0x400076F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private float lastAirTime;

		[Token(Token = "0x4000770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private float stickyForce;

		[Token(Token = "0x4000771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private Vector3 wallNormal;

		[Token(Token = "0x4000772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		private Vector3 moveDirectionVelocity;

		[Token(Token = "0x4000773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private float wallRunWeight;

		[Token(Token = "0x4000774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		private float lastWallRunWeight;

		[Token(Token = "0x4000775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private Vector3 fixedDeltaPosition;

		[Token(Token = "0x4000776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		private Quaternion fixedDeltaRotation;

		[Token(Token = "0x4000777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		private bool fixedFrame;

		[Token(Token = "0x4000778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private float wallRunEndTime;

		[Token(Token = "0x4000779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		private Vector3 gravity;

		[Token(Token = "0x400077A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private Vector3 verticalVelocity;

		[Token(Token = "0x400077B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		private float velocityY;

		[Token(Token = "0x17000075")]
		public bool onGround
		{
			[Token(Token = "0x60007B2")]
			[Address(RVA = "0xB54AB8", Offset = "0xB54AB8", VA = "0xB54AB8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60007B3")]
			[Address(RVA = "0xB54AC0", Offset = "0xB54AC0", VA = "0xB54AC0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60007B4")]
		[Address(RVA = "0xB54ACC", Offset = "0xB54ACC", VA = "0xB54ACC", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60007B5")]
		[Address(RVA = "0xB54CBC", Offset = "0xB54CBC", VA = "0xB54CBC")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x60007B6")]
		[Address(RVA = "0xB54D40", Offset = "0xB54D40", VA = "0xB54D40", Slot = "4")]
		public override void Move(Vector3 deltaPosition, Quaternion deltaRotation)
		{
		}

		[Token(Token = "0x60007B7")]
		[Address(RVA = "0xB54DF0", Offset = "0xB54DF0", VA = "0xB54DF0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60007B8")]
		[Address(RVA = "0xB55DA0", Offset = "0xB55DA0", VA = "0xB55DA0", Slot = "7")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60007B9")]
		[Address(RVA = "0xB56214", Offset = "0xB56214", VA = "0xB56214", Slot = "8")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x60007BA")]
		[Address(RVA = "0xB553C8", Offset = "0xB553C8", VA = "0xB553C8")]
		private void MoveFixed(Vector3 deltaPosition)
		{
		}

		[Token(Token = "0x60007BB")]
		[Address(RVA = "0xB562EC", Offset = "0xB562EC", VA = "0xB562EC")]
		private void WallRun()
		{
		}

		[Token(Token = "0x60007BC")]
		[Address(RVA = "0xB56978", Offset = "0xB56978", VA = "0xB56978")]
		private bool CanWallRun()
		{
			return default(bool);
		}

		[Token(Token = "0x60007BD")]
		[Address(RVA = "0xB55E2C", Offset = "0xB55E2C", VA = "0xB55E2C")]
		private Vector3 GetMoveDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007BE")]
		[Address(RVA = "0xB56A68", Offset = "0xB56A68", VA = "0xB56A68", Slot = "9")]
		protected virtual void Rotate()
		{
		}

		[Token(Token = "0x60007BF")]
		[Address(RVA = "0xB56EE8", Offset = "0xB56EE8", VA = "0xB56EE8")]
		private Vector3 GetForwardDirection()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007C0")]
		[Address(RVA = "0xB57010", Offset = "0xB57010", VA = "0xB57010", Slot = "10")]
		protected virtual bool Jump()
		{
			return default(bool);
		}

		[Token(Token = "0x60007C1")]
		[Address(RVA = "0xB55840", Offset = "0xB55840", VA = "0xB55840")]
		private void GroundCheck()
		{
		}

		[Token(Token = "0x60007C2")]
		[Address(RVA = "0xB57140", Offset = "0xB57140", VA = "0xB57140")]
		public CharacterThirdPerson()
		{
		}
	}
	[Token(Token = "0x2000173")]
	[RequireComponent(typeof(Animator))]
	public class SimpleLocomotion : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000174")]
		public enum RotationMode
		{
			[Token(Token = "0x4000793")]
			Smooth,
			[Token(Token = "0x4000794")]
			Linear
		}

		[Token(Token = "0x4000785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The component that updates the camera.")]
		[SerializeField]
		private CameraController cameraController;

		[Token(Token = "0x4000786")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Tooltip("Acceleration of movement.")]
		private float accelerationTime;

		[Token(Token = "0x4000787")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Turning speed.")]
		[SerializeField]
		private float turnTime;

		[Token(Token = "0x4000788")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[Tooltip("If true, will run on left shift, if not will walk on left shift.")]
		private bool walkByDefault;

		[Token(Token = "0x4000789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		[Tooltip("Smooth or linear rotation.")]
		private RotationMode rotationMode;

		[Token(Token = "0x400078A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[Tooltip("Procedural motion speed (if not using root motion).")]
		private float moveSpeed;

		[Token(Token = "0x400078C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Animator animator;

		[Token(Token = "0x400078D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float speed;

		[Token(Token = "0x400078E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float angleVel;

		[Token(Token = "0x400078F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float speedVel;

		[Token(Token = "0x4000790")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 linearTargetDirection;

		[Token(Token = "0x4000791")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private CharacterController characterController;

		[Token(Token = "0x17000076")]
		public bool isGrounded
		{
			[Token(Token = "0x60007C3")]
			[Address(RVA = "0xB57240", Offset = "0xB57240", VA = "0xB57240")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60007C4")]
			[Address(RVA = "0xB57248", Offset = "0xB57248", VA = "0xB57248")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60007C5")]
		[Address(RVA = "0xB57254", Offset = "0xB57254", VA = "0xB57254")]
		private void Start()
		{
		}

		[Token(Token = "0x60007C6")]
		[Address(RVA = "0xB572FC", Offset = "0xB572FC", VA = "0xB572FC")]
		private void Update()
		{
		}

		[Token(Token = "0x60007C7")]
		[Address(RVA = "0xB57914", Offset = "0xB57914", VA = "0xB57914")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60007C8")]
		[Address(RVA = "0xB57344", Offset = "0xB57344", VA = "0xB57344")]
		private void Rotate()
		{
		}

		[Token(Token = "0x60007C9")]
		[Address(RVA = "0xB576AC", Offset = "0xB576AC", VA = "0xB576AC")]
		private void Move()
		{
		}

		[Token(Token = "0x60007CA")]
		[Address(RVA = "0xB57944", Offset = "0xB57944", VA = "0xB57944")]
		private Vector3 GetInputVector()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007CB")]
		[Address(RVA = "0xB579DC", Offset = "0xB579DC", VA = "0xB579DC")]
		private Vector3 GetInputVectorRaw()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007CC")]
		[Address(RVA = "0xB57A5C", Offset = "0xB57A5C", VA = "0xB57A5C")]
		public SimpleLocomotion()
		{
		}
	}
	[Token(Token = "0x2000175")]
	public class UserControlAI : UserControlThirdPerson
	{
		[Token(Token = "0x4000795")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform moveTarget;

		[Token(Token = "0x4000796")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float stoppingDistance;

		[Token(Token = "0x4000797")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float stoppingThreshold;

		[Token(Token = "0x60007CD")]
		[Address(RVA = "0xB57A84", Offset = "0xB57A84", VA = "0xB57A84", Slot = "4")]
		protected override void Update()
		{
		}

		[Token(Token = "0x60007CE")]
		[Address(RVA = "0xB57C40", Offset = "0xB57C40", VA = "0xB57C40")]
		public UserControlAI()
		{
		}
	}
	[Token(Token = "0x2000176")]
	public class UserControlThirdPerson : MonoBehaviour
	{
		[Token(Token = "0x2000177")]
		public struct State
		{
			[Token(Token = "0x400079D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 move;

			[Token(Token = "0x400079E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 lookPos;

			[Token(Token = "0x400079F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool crouch;

			[Token(Token = "0x40007A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
			public bool jump;

			[Token(Token = "0x40007A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int actionIndex;
		}

		[Token(Token = "0x4000798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool walkByDefault;

		[Token(Token = "0x4000799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool canCrouch;

		[Token(Token = "0x400079A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool canJump;

		[Token(Token = "0x400079B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public State state;

		[Token(Token = "0x400079C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected Transform cam;

		[Token(Token = "0x60007CF")]
		[Address(RVA = "0xB57C6C", Offset = "0xB57C6C", VA = "0xB57C6C")]
		private void Start()
		{
		}

		[Token(Token = "0x60007D0")]
		[Address(RVA = "0xB57CA0", Offset = "0xB57CA0", VA = "0xB57CA0", Slot = "4")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60007D1")]
		[Address(RVA = "0xB57C5C", Offset = "0xB57C5C", VA = "0xB57C5C")]
		public UserControlThirdPerson()
		{
		}
	}
	[Token(Token = "0x2000178")]
	public class ApplicationQuit : MonoBehaviour
	{
		[Token(Token = "0x60007D2")]
		[Address(RVA = "0xB57FE4", Offset = "0xB57FE4", VA = "0xB57FE4")]
		private void Update()
		{
		}

		[Token(Token = "0x60007D3")]
		[Address(RVA = "0xB5801C", Offset = "0xB5801C", VA = "0xB5801C")]
		public ApplicationQuit()
		{
		}
	}
	[Token(Token = "0x2000179")]
	public class SlowMo : MonoBehaviour
	{
		[Token(Token = "0x40007A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private KeyCode[] keyCodes;

		[Token(Token = "0x40007A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool mouse0;

		[Token(Token = "0x40007A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[SerializeField]
		private bool mouse1;

		[Token(Token = "0x40007A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float slowMoTimeScale;

		[Token(Token = "0x60007D4")]
		[Address(RVA = "0xB58024", Offset = "0xB58024", VA = "0xB58024")]
		private void Update()
		{
		}

		[Token(Token = "0x60007D5")]
		[Address(RVA = "0xB5804C", Offset = "0xB5804C", VA = "0xB5804C")]
		private bool IsSlowMotion()
		{
			return default(bool);
		}

		[Token(Token = "0x60007D6")]
		[Address(RVA = "0xB580F0", Offset = "0xB580F0", VA = "0xB580F0")]
		public SlowMo()
		{
		}
	}
}
namespace RootMotion.FinalIK
{
	[Token(Token = "0x200017A")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Biped IK")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page2.html")]
	public class BipedIK : SolverManager
	{
		[Token(Token = "0x40007A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BipedReferences references;

		[Token(Token = "0x40007A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public BipedIKSolvers solvers;

		[Token(Token = "0x60007D7")]
		[Address(RVA = "0xB58104", Offset = "0xB58104", VA = "0xB58104")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x60007D8")]
		[Address(RVA = "0xB58148", Offset = "0xB58148", VA = "0xB58148")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x60007D9")]
		[Address(RVA = "0xB5818C", Offset = "0xB5818C", VA = "0xB5818C")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60007DA")]
		[Address(RVA = "0xB581D0", Offset = "0xB581D0", VA = "0xB581D0")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60007DB")]
		[Address(RVA = "0xB58214", Offset = "0xB58214", VA = "0xB58214")]
		public float GetIKPositionWeight(AvatarIKGoal goal)
		{
			return default(float);
		}

		[Token(Token = "0x60007DC")]
		[Address(RVA = "0xB582AC", Offset = "0xB582AC", VA = "0xB582AC")]
		public float GetIKRotationWeight(AvatarIKGoal goal)
		{
			return default(float);
		}

		[Token(Token = "0x60007DD")]
		[Address(RVA = "0xB582C8", Offset = "0xB582C8", VA = "0xB582C8")]
		public void SetIKPositionWeight(AvatarIKGoal goal, float weight)
		{
		}

		[Token(Token = "0x60007DE")]
		[Address(RVA = "0xB582F4", Offset = "0xB582F4", VA = "0xB582F4")]
		public void SetIKRotationWeight(AvatarIKGoal goal, float weight)
		{
		}

		[Token(Token = "0x60007DF")]
		[Address(RVA = "0xB58320", Offset = "0xB58320", VA = "0xB58320")]
		public void SetIKPosition(AvatarIKGoal goal, Vector3 IKPosition)
		{
		}

		[Token(Token = "0x60007E0")]
		[Address(RVA = "0xB5835C", Offset = "0xB5835C", VA = "0xB5835C")]
		public void SetIKRotation(AvatarIKGoal goal, Quaternion IKRotation)
		{
		}

		[Token(Token = "0x60007E1")]
		[Address(RVA = "0xB5839C", Offset = "0xB5839C", VA = "0xB5839C")]
		public Vector3 GetIKPosition(AvatarIKGoal goal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60007E2")]
		[Address(RVA = "0xB583BC", Offset = "0xB583BC", VA = "0xB583BC")]
		public Quaternion GetIKRotation(AvatarIKGoal goal)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60007E3")]
		[Address(RVA = "0xB583DC", Offset = "0xB583DC", VA = "0xB583DC")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight, float clampWeightHead, float clampWeightEyes)
		{
		}

		[Token(Token = "0x60007E4")]
		[Address(RVA = "0xB58400", Offset = "0xB58400", VA = "0xB58400")]
		public void SetLookAtPosition(Vector3 lookAtPosition)
		{
		}

		[Token(Token = "0x60007E5")]
		[Address(RVA = "0xB58428", Offset = "0xB58428", VA = "0xB58428")]
		public void SetSpinePosition(Vector3 spinePosition)
		{
		}

		[Token(Token = "0x60007E6")]
		[Address(RVA = "0xB58450", Offset = "0xB58450", VA = "0xB58450")]
		public void SetSpineWeight(float weight)
		{
		}

		[Token(Token = "0x60007E7")]
		[Address(RVA = "0xB58230", Offset = "0xB58230", VA = "0xB58230")]
		public IKSolverLimb GetGoalIK(AvatarIKGoal goal)
		{
			return null;
		}

		[Token(Token = "0x60007E8")]
		[Address(RVA = "0xB58474", Offset = "0xB58474", VA = "0xB58474")]
		public void InitiateBipedIK()
		{
		}

		[Token(Token = "0x60007E9")]
		[Address(RVA = "0xB58480", Offset = "0xB58480", VA = "0xB58480")]
		public void UpdateBipedIK()
		{
		}

		[Token(Token = "0x60007EA")]
		[Address(RVA = "0xB5848C", Offset = "0xB5848C", VA = "0xB5848C")]
		public void SetToDefaults()
		{
		}

		[Token(Token = "0x60007EB")]
		[Address(RVA = "0xB58740", Offset = "0xB58740", VA = "0xB58740", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x60007EC")]
		[Address(RVA = "0xB587DC", Offset = "0xB587DC", VA = "0xB587DC", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x60007ED")]
		[Address(RVA = "0xB58B08", Offset = "0xB58B08", VA = "0xB58B08", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x60007EE")]
		[Address(RVA = "0xB58F74", Offset = "0xB58F74", VA = "0xB58F74")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x60007EF")]
		[Address(RVA = "0xB58F9C", Offset = "0xB58F9C", VA = "0xB58F9C")]
		public BipedIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200017B")]
	public class BipedIKSolvers
	{
		[Token(Token = "0x40007A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IKSolverLimb leftFoot;

		[Token(Token = "0x40007A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IKSolverLimb rightFoot;

		[Token(Token = "0x40007AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IKSolverLimb leftHand;

		[Token(Token = "0x40007AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IKSolverLimb rightHand;

		[Token(Token = "0x40007AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IKSolverFABRIK spine;

		[Token(Token = "0x40007AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLookAt lookAt;

		[Token(Token = "0x40007AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IKSolverAim aim;

		[Token(Token = "0x40007AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Constraints pelvis;

		[Token(Token = "0x40007B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IKSolverLimb[] _limbs;

		[Token(Token = "0x40007B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private IKSolver[] _ikSolvers;

		[Token(Token = "0x17000077")]
		public IKSolverLimb[] limbs
		{
			[Token(Token = "0x60007F0")]
			[Address(RVA = "0xB585C8", Offset = "0xB585C8", VA = "0xB585C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000078")]
		public IKSolver[] ikSolvers
		{
			[Token(Token = "0x60007F1")]
			[Address(RVA = "0xB59234", Offset = "0xB59234", VA = "0xB59234")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007F2")]
		[Address(RVA = "0xB58994", Offset = "0xB58994", VA = "0xB58994")]
		public void AssignReferences(BipedReferences references)
		{
		}

		[Token(Token = "0x60007F3")]
		[Address(RVA = "0xB59048", Offset = "0xB59048", VA = "0xB59048")]
		public BipedIKSolvers()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200017C")]
	public abstract class Constraint
	{
		[Token(Token = "0x40007B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x40007B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float weight;

		[Token(Token = "0x17000079")]
		public bool isValid
		{
			[Token(Token = "0x60007F4")]
			[Address(RVA = "0xB5945C", Offset = "0xB5945C", VA = "0xB5945C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60007F5")]
		public abstract void UpdateConstraint();

		[Token(Token = "0x60007F6")]
		[Address(RVA = "0xB594BC", Offset = "0xB594BC", VA = "0xB594BC")]
		protected Constraint()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200017D")]
	public class ConstraintPosition : Constraint
	{
		[Token(Token = "0x40007B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 position;

		[Token(Token = "0x60007F7")]
		[Address(RVA = "0xB594C4", Offset = "0xB594C4", VA = "0xB594C4", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x60007F8")]
		[Address(RVA = "0xB5955C", Offset = "0xB5955C", VA = "0xB5955C")]
		public ConstraintPosition()
		{
		}

		[Token(Token = "0x60007F9")]
		[Address(RVA = "0xB59564", Offset = "0xB59564", VA = "0xB59564")]
		public ConstraintPosition(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200017E")]
	public class ConstraintPositionOffset : Constraint
	{
		[Token(Token = "0x40007B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 offset;

		[Token(Token = "0x40007B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 defaultLocalPosition;

		[Token(Token = "0x40007B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 lastLocalPosition;

		[Token(Token = "0x40007B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool initiated;

		[Token(Token = "0x1700007A")]
		private bool positionChanged
		{
			[Token(Token = "0x60007FD")]
			[Address(RVA = "0xB59698", Offset = "0xB59698", VA = "0xB59698")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60007FA")]
		[Address(RVA = "0xB59594", Offset = "0xB59594", VA = "0xB59594", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x60007FB")]
		[Address(RVA = "0xB596F4", Offset = "0xB596F4", VA = "0xB596F4")]
		public ConstraintPositionOffset()
		{
		}

		[Token(Token = "0x60007FC")]
		[Address(RVA = "0xB596FC", Offset = "0xB596FC", VA = "0xB596FC")]
		public ConstraintPositionOffset(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200017F")]
	public class ConstraintRotation : Constraint
	{
		[Token(Token = "0x40007B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion rotation;

		[Token(Token = "0x60007FE")]
		[Address(RVA = "0xB5972C", Offset = "0xB5972C", VA = "0xB5972C", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x60007FF")]
		[Address(RVA = "0xB597A8", Offset = "0xB597A8", VA = "0xB597A8")]
		public ConstraintRotation()
		{
		}

		[Token(Token = "0x6000800")]
		[Address(RVA = "0xB597B0", Offset = "0xB597B0", VA = "0xB597B0")]
		public ConstraintRotation(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000180")]
	public class ConstraintRotationOffset : Constraint
	{
		[Token(Token = "0x40007BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion offset;

		[Token(Token = "0x40007BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion defaultRotation;

		[Token(Token = "0x40007BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion defaultLocalRotation;

		[Token(Token = "0x40007BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Quaternion lastLocalRotation;

		[Token(Token = "0x40007BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Quaternion defaultTargetLocalRotation;

		[Token(Token = "0x40007BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool initiated;

		[Token(Token = "0x1700007B")]
		private bool rotationChanged
		{
			[Token(Token = "0x6000804")]
			[Address(RVA = "0xB598E4", Offset = "0xB598E4", VA = "0xB598E4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000801")]
		[Address(RVA = "0xB597E0", Offset = "0xB597E0", VA = "0xB597E0", Slot = "4")]
		public override void UpdateConstraint()
		{
		}

		[Token(Token = "0x6000802")]
		[Address(RVA = "0xB5993C", Offset = "0xB5993C", VA = "0xB5993C")]
		public ConstraintRotationOffset()
		{
		}

		[Token(Token = "0x6000803")]
		[Address(RVA = "0xB59944", Offset = "0xB59944", VA = "0xB59944")]
		public ConstraintRotationOffset(Transform transform)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000181")]
	public class Constraints
	{
		[Token(Token = "0x40007C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform transform;

		[Token(Token = "0x40007C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x40007C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 positionOffset;

		[Token(Token = "0x40007C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 position;

		[Token(Token = "0x40007C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 1f)]
		public float positionWeight;

		[Token(Token = "0x40007C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 rotationOffset;

		[Token(Token = "0x40007C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 rotation;

		[Token(Token = "0x40007C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Range(0f, 1f)]
		public float rotationWeight;

		[Token(Token = "0x6000805")]
		[Address(RVA = "0xB59974", Offset = "0xB59974", VA = "0xB59974")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x6000806")]
		[Address(RVA = "0xB58AB4", Offset = "0xB58AB4", VA = "0xB58AB4")]
		public void Initiate(Transform transform)
		{
		}

		[Token(Token = "0x6000807")]
		[Address(RVA = "0xB58C7C", Offset = "0xB58C7C", VA = "0xB58C7C")]
		public void Update()
		{
		}

		[Token(Token = "0x6000808")]
		[Address(RVA = "0xB59454", Offset = "0xB59454", VA = "0xB59454")]
		public Constraints()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000182")]
	public class Finger
	{
		[Serializable]
		[Token(Token = "0x2000183")]
		public enum DOF
		{
			[Token(Token = "0x40007D8")]
			One,
			[Token(Token = "0x40007D9")]
			Three
		}

		[Token(Token = "0x40007C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Range(0f, 1f)]
		[Tooltip("Master Weight for the finger.")]
		public float weight;

		[Token(Token = "0x40007C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Tooltip("The weight of rotating the finger tip and bending the finger to the target.")]
		[Range(0f, 1f)]
		public float rotationWeight;

		[Token(Token = "0x40007CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Rotational degrees of freedom. When set to 'One' the fingers will be able to be rotated only around a single axis. When 3, all 3 axes are free to rotate around.")]
		public DOF rotationDOF;

		[Token(Token = "0x40007CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The first bone of the finger.")]
		public Transform bone1;

		[Token(Token = "0x40007CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The second bone of the finger.")]
		public Transform bone2;

		[Token(Token = "0x40007CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The (optional) third bone of the finger. This can be ignored for thumbs.")]
		public Transform bone3;

		[Token(Token = "0x40007CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The fingertip object. If your character doesn't have tip bones, you can create an empty GameObject and parent it to the last bone in the finger. Place it to the tip of the finger.")]
		public Transform tip;

		[Token(Token = "0x40007CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The IK target (optional, can use IKPosition and IKRotation directly).")]
		public Transform target;

		[Token(Token = "0x40007D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IKSolverLimb solver;

		[Token(Token = "0x40007D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion bone3RelativeToTarget;

		[Token(Token = "0x40007D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 bone3DefaultLocalPosition;

		[Token(Token = "0x40007D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Quaternion bone3DefaultLocalRotation;

		[Token(Token = "0x40007D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 bone1Axis;

		[Token(Token = "0x40007D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 tipAxis;

		[Token(Token = "0x1700007C")]
		public bool initiated
		{
			[Token(Token = "0x6000809")]
			[Address(RVA = "0xB599D4", Offset = "0xB599D4", VA = "0xB599D4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600080A")]
			[Address(RVA = "0xB599DC", Offset = "0xB599DC", VA = "0xB599DC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700007D")]
		public Vector3 IKPosition
		{
			[Token(Token = "0x600080B")]
			[Address(RVA = "0xB599E8", Offset = "0xB599E8", VA = "0xB599E8")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600080C")]
			[Address(RVA = "0xB59A08", Offset = "0xB59A08", VA = "0xB59A08")]
			set
			{
			}
		}

		[Token(Token = "0x1700007E")]
		public Quaternion IKRotation
		{
			[Token(Token = "0x600080D")]
			[Address(RVA = "0xB59A28", Offset = "0xB59A28", VA = "0xB59A28")]
			get
			{
				return default(Quaternion);
			}
			[Token(Token = "0x600080E")]
			[Address(RVA = "0xB59A48", Offset = "0xB59A48", VA = "0xB59A48")]
			set
			{
			}
		}

		[Token(Token = "0x600080F")]
		[Address(RVA = "0xB59A68", Offset = "0xB59A68", VA = "0xB59A68")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000810")]
		[Address(RVA = "0xB59B60", Offset = "0xB59B60", VA = "0xB59B60")]
		public void Initiate(Transform hand, int index)
		{
		}

		[Token(Token = "0x6000811")]
		[Address(RVA = "0xB59F18", Offset = "0xB59F18", VA = "0xB59F18")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x6000812")]
		[Address(RVA = "0xB59FD8", Offset = "0xB59FD8", VA = "0xB59FD8")]
		public void Update(float masterWeight)
		{
		}

		[Token(Token = "0x6000813")]
		[Address(RVA = "0xB5A384", Offset = "0xB5A384", VA = "0xB5A384")]
		public Finger()
		{
		}
	}
	[Token(Token = "0x2000184")]
	public class FingerRig : SolverManager
	{
		[Token(Token = "0x40007DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("The master weight for all fingers.")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x40007DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Finger[] fingers;

		[Token(Token = "0x1700007F")]
		public bool initiated
		{
			[Token(Token = "0x6000814")]
			[Address(RVA = "0xB5A394", Offset = "0xB5A394", VA = "0xB5A394")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000815")]
			[Address(RVA = "0xB5A39C", Offset = "0xB5A39C", VA = "0xB5A39C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000816")]
		[Address(RVA = "0xB5A3A8", Offset = "0xB5A3A8", VA = "0xB5A3A8")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000817")]
		[Address(RVA = "0xB5A41C", Offset = "0xB5A41C", VA = "0xB5A41C")]
		[ContextMenu("Auto-detect")]
		public void AutoDetect()
		{
		}

		[Token(Token = "0x6000818")]
		[Address(RVA = "0xB5A794", Offset = "0xB5A794", VA = "0xB5A794")]
		public void AddFinger(Transform bone1, Transform bone2, Transform bone3, Transform tip, [Optional] Transform target)
		{
		}

		[Token(Token = "0x6000819")]
		[Address(RVA = "0xB5A94C", Offset = "0xB5A94C", VA = "0xB5A94C")]
		public void RemoveFinger(int index)
		{
		}

		[Token(Token = "0x600081A")]
		[Address(RVA = "0xB5A6A4", Offset = "0xB5A6A4", VA = "0xB5A6A4")]
		private void AddChildrenRecursive(Transform parent, ref Transform[] array)
		{
		}

		[Token(Token = "0x600081B")]
		[Address(RVA = "0xB5AACC", Offset = "0xB5AACC", VA = "0xB5AACC", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x600081C")]
		[Address(RVA = "0xB5AB74", Offset = "0xB5AB74", VA = "0xB5AB74")]
		public void UpdateFingerSolvers()
		{
		}

		[Token(Token = "0x600081D")]
		[Address(RVA = "0xB5ABE4", Offset = "0xB5ABE4", VA = "0xB5ABE4")]
		public void FixFingerTransforms()
		{
		}

		[Token(Token = "0x600081E")]
		[Address(RVA = "0xB5AC40", Offset = "0xB5AC40", VA = "0xB5AC40", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x600081F")]
		[Address(RVA = "0xB5AC44", Offset = "0xB5AC44", VA = "0xB5AC44", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x6000820")]
		[Address(RVA = "0xB5AC48", Offset = "0xB5AC48", VA = "0xB5AC48")]
		public FingerRig()
		{
		}
	}
	[Token(Token = "0x2000185")]
	public abstract class Grounder : MonoBehaviour
	{
		[Token(Token = "0x2000186")]
		public delegate void GrounderDelegate();

		[Token(Token = "0x40007DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The master weight. Use this to fade in/out the grounding effect.")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x40007DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The Grounding solver. Not to confuse with IK solvers.")]
		public Grounding solver;

		[Token(Token = "0x40007DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GrounderDelegate OnPreGrounder;

		[Token(Token = "0x40007E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GrounderDelegate OnPostGrounder;

		[Token(Token = "0x40007E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected bool initiated;

		[Token(Token = "0x6000821")]
		public abstract void ResetPosition();

		[Token(Token = "0x6000822")]
		[Address(RVA = "0xB5ACB4", Offset = "0xB5ACB4", VA = "0xB5ACB4")]
		protected Vector3 GetSpineOffsetTarget()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000823")]
		[Address(RVA = "0xB5AF64", Offset = "0xB5AF64", VA = "0xB5AF64")]
		protected void LogWarning(string message)
		{
		}

		[Token(Token = "0x6000824")]
		[Address(RVA = "0xB5AD78", Offset = "0xB5AD78", VA = "0xB5AD78")]
		private Vector3 GetLegSpineBendVector(Grounding.Leg leg)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000825")]
		[Address(RVA = "0xB5AF8C", Offset = "0xB5AF8C", VA = "0xB5AF8C")]
		private Vector3 GetLegSpineTangent(Grounding.Leg leg)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000826")]
		protected abstract void OpenUserManual();

		[Token(Token = "0x6000827")]
		protected abstract void OpenScriptReference();

		[Token(Token = "0x6000828")]
		[Address(RVA = "0xB5B100", Offset = "0xB5B100", VA = "0xB5B100")]
		protected Grounder()
		{
		}
	}
	[Token(Token = "0x2000187")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page11.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder Biped")]
	public class GrounderBipedIK : Grounder
	{
		[Token(Token = "0x40007E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The BipedIK componet.")]
		public BipedIK ik;

		[Token(Token = "0x40007E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The amount of spine bending towards upward slopes.")]
		public float spineBend;

		[Token(Token = "0x40007E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The interpolation speed of spine bending.")]
		public float spineSpeed;

		[Token(Token = "0x40007E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform[] feet;

		[Token(Token = "0x40007E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion[] footRotations;

		[Token(Token = "0x40007E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x40007E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x40007E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 spineOffset;

		[Token(Token = "0x40007EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float lastWeight;

		[Token(Token = "0x600082D")]
		[Address(RVA = "0xB5B30C", Offset = "0xB5B30C", VA = "0xB5B30C", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x600082E")]
		[Address(RVA = "0xB5B350", Offset = "0xB5B350", VA = "0xB5B350", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x600082F")]
		[Address(RVA = "0xB5B394", Offset = "0xB5B394", VA = "0xB5B394", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6000830")]
		[Address(RVA = "0xB5B474", Offset = "0xB5B474", VA = "0xB5B474")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000831")]
		[Address(RVA = "0xB5B514", Offset = "0xB5B514", VA = "0xB5B514")]
		private void Update()
		{
		}

		[Token(Token = "0x6000832")]
		[Address(RVA = "0xB5B568", Offset = "0xB5B568", VA = "0xB5B568")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6000833")]
		[Address(RVA = "0xB5BB88", Offset = "0xB5BB88", VA = "0xB5BB88")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000834")]
		[Address(RVA = "0xB5BBC8", Offset = "0xB5BBC8", VA = "0xB5BBC8")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x6000835")]
		[Address(RVA = "0xB5C214", Offset = "0xB5C214", VA = "0xB5C214")]
		private void SetLegIK(IKSolverLimb limb, int index)
		{
		}

		[Token(Token = "0x6000836")]
		[Address(RVA = "0xB5C33C", Offset = "0xB5C33C", VA = "0xB5C33C")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x6000837")]
		[Address(RVA = "0xB5C50C", Offset = "0xB5C50C", VA = "0xB5C50C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000838")]
		[Address(RVA = "0xB5C6E4", Offset = "0xB5C6E4", VA = "0xB5C6E4")]
		public GrounderBipedIK()
		{
		}
	}
	[Token(Token = "0x2000188")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder Full Body Biped")]
	[HelpURL("https://www.youtube.com/watch?v=9MiZiaJorws&index=6&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	public class GrounderFBBIK : Grounder
	{
		[Serializable]
		[Token(Token = "0x2000189")]
		public class SpineEffector
		{
			[Token(Token = "0x40007F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The type of the effector.")]
			public FullBodyBipedEffector effectorType;

			[Token(Token = "0x40007F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("The weight of horizontal bend offset towards the slope.")]
			public float horizontalWeight;

			[Token(Token = "0x40007F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The vertical bend offset weight.")]
			public float verticalWeight;

			[Token(Token = "0x6000847")]
			[Address(RVA = "0xB5D434", Offset = "0xB5D434", VA = "0xB5D434")]
			public SpineEffector()
			{
			}

			[Token(Token = "0x6000848")]
			[Address(RVA = "0xB5D444", Offset = "0xB5D444", VA = "0xB5D444")]
			public SpineEffector(FullBodyBipedEffector effectorType, float horizontalWeight, float verticalWeight)
			{
			}
		}

		[Token(Token = "0x40007EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Reference to the FBBIK componet.")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x40007EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The amount of spine bending towards upward slopes.")]
		public float spineBend;

		[Token(Token = "0x40007ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The interpolation speed of spine bending.")]
		public float spineSpeed;

		[Token(Token = "0x40007EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public SpineEffector[] spine;

		[Token(Token = "0x40007EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform[] feet;

		[Token(Token = "0x40007F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 spineOffset;

		[Token(Token = "0x40007F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool firstSolve;

		[Token(Token = "0x6000839")]
		[Address(RVA = "0xB5C788", Offset = "0xB5C788", VA = "0xB5C788")]
		[ContextMenu("TUTORIAL VIDEO")]
		private void OpenTutorial()
		{
		}

		[Token(Token = "0x600083A")]
		[Address(RVA = "0xB5C7CC", Offset = "0xB5C7CC", VA = "0xB5C7CC", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x600083B")]
		[Address(RVA = "0xB5C810", Offset = "0xB5C810", VA = "0xB5C810", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x600083C")]
		[Address(RVA = "0xB5C854", Offset = "0xB5C854", VA = "0xB5C854", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x600083D")]
		[Address(RVA = "0xB5C8BC", Offset = "0xB5C8BC", VA = "0xB5C8BC")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x600083E")]
		[Address(RVA = "0xB5C944", Offset = "0xB5C944", VA = "0xB5C944")]
		private void Update()
		{
		}

		[Token(Token = "0x600083F")]
		[Address(RVA = "0xB5CBF0", Offset = "0xB5CBF0", VA = "0xB5CBF0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000840")]
		[Address(RVA = "0xB5CBFC", Offset = "0xB5CBFC", VA = "0xB5CBFC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000841")]
		[Address(RVA = "0xB5C9A0", Offset = "0xB5C9A0", VA = "0xB5C9A0")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6000842")]
		[Address(RVA = "0xB5CC08", Offset = "0xB5CC08", VA = "0xB5CC08")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x6000843")]
		[Address(RVA = "0xB5CF78", Offset = "0xB5CF78", VA = "0xB5CF78")]
		private void SetLegIK(IKEffector effector, Grounding.Leg leg)
		{
		}

		[Token(Token = "0x6000844")]
		[Address(RVA = "0xB5D0FC", Offset = "0xB5D0FC", VA = "0xB5D0FC")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000845")]
		[Address(RVA = "0xB5D25C", Offset = "0xB5D25C", VA = "0xB5D25C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000846")]
		[Address(RVA = "0xB5D390", Offset = "0xB5D390", VA = "0xB5D390")]
		public GrounderFBBIK()
		{
		}
	}
	[Token(Token = "0x200018A")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder IK")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page11.html")]
	public class GrounderIK : Grounder
	{
		[Token(Token = "0x40007F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IK[] legs;

		[Token(Token = "0x40007F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The pelvis transform. Common ancestor of all the legs.")]
		public Transform pelvis;

		[Token(Token = "0x40007F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The root Transform of the character, with the rigidbody and the collider.")]
		public Transform characterRoot;

		[Token(Token = "0x40007F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The weight of rotating the character root to the ground normal (range: 0 - 1).")]
		[Range(0f, 1f)]
		public float rootRotationWeight;

		[Token(Token = "0x40007F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("The speed of rotating the character root to the ground normal (range: 0 - inf).")]
		public float rootRotationSpeed;

		[Token(Token = "0x40007FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The maximum angle of root rotation (range: 0 - 90).")]
		public float maxRootRotationAngle;

		[Token(Token = "0x40007FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform[] feet;

		[Token(Token = "0x40007FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion[] footRotations;

		[Token(Token = "0x40007FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x40007FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x40007FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int solvedFeet;

		[Token(Token = "0x4000800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool solved;

		[Token(Token = "0x4000801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float lastWeight;

		[Token(Token = "0x6000849")]
		[Address(RVA = "0xB5D488", Offset = "0xB5D488", VA = "0xB5D488", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x600084A")]
		[Address(RVA = "0xB5D4CC", Offset = "0xB5D4CC", VA = "0xB5D4CC", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x600084B")]
		[Address(RVA = "0xB5D510", Offset = "0xB5D510", VA = "0xB5D510", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x600084C")]
		[Address(RVA = "0xB5D528", Offset = "0xB5D528", VA = "0xB5D528")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x600084D")]
		[Address(RVA = "0xB5D748", Offset = "0xB5D748", VA = "0xB5D748")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600084E")]
		[Address(RVA = "0xB5D828", Offset = "0xB5D828", VA = "0xB5D828")]
		private void Update()
		{
		}

		[Token(Token = "0x600084F")]
		[Address(RVA = "0xB5DE50", Offset = "0xB5DE50", VA = "0xB5DE50")]
		private void Initiate()
		{
		}

		[Token(Token = "0x6000850")]
		[Address(RVA = "0xB5E2D4", Offset = "0xB5E2D4", VA = "0xB5E2D4")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x6000851")]
		[Address(RVA = "0xB5E480", Offset = "0xB5E480", VA = "0xB5E480")]
		private void SetLegIK(int index)
		{
		}

		[Token(Token = "0x6000852")]
		[Address(RVA = "0xB5E808", Offset = "0xB5E808", VA = "0xB5E808")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x6000853")]
		[Address(RVA = "0xB5E9DC", Offset = "0xB5E9DC", VA = "0xB5E9DC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000854")]
		[Address(RVA = "0xB5EC04", Offset = "0xB5EC04", VA = "0xB5EC04")]
		public GrounderIK()
		{
		}
	}
	[Token(Token = "0x200018B")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page11.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder Quadruped")]
	public class GrounderQuadruped : Grounder
	{
		[Token(Token = "0x200018C")]
		public struct Foot
		{
			[Token(Token = "0x400081E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public IKSolver solver;

			[Token(Token = "0x400081F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Transform transform;

			[Token(Token = "0x4000820")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Quaternion rotation;

			[Token(Token = "0x4000821")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Grounding.Leg leg;

			[Token(Token = "0x6000867")]
			[Address(RVA = "0xB5F7C4", Offset = "0xB5F7C4", VA = "0xB5F7C4")]
			public Foot(IKSolver solver, Transform transform)
			{
			}
		}

		[Token(Token = "0x4000802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The Grounding solver for the forelegs.")]
		public Grounding forelegSolver;

		[Token(Token = "0x4000803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The weight of rotating the character root to the ground angle (range: 0 - 1).")]
		[Range(0f, 1f)]
		public float rootRotationWeight;

		[Token(Token = "0x4000804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The maximum angle of rotating the quadruped downwards (going downhill, range: -90 - 0).")]
		[Range(-90f, 0f)]
		public float minRootRotation;

		[Token(Token = "0x4000805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The maximum angle of rotating the quadruped upwards (going uphill, range: 0 - 90).")]
		[Range(0f, 90f)]
		public float maxRootRotation;

		[Token(Token = "0x4000806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("The speed of interpolating the character root rotation (range: 0 - inf).")]
		public float rootRotationSpeed;

		[Token(Token = "0x4000807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The maximum IK offset for the legs (range: 0 - inf).")]
		public float maxLegOffset;

		[Token(Token = "0x4000808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("The maximum IK offset for the forelegs (range: 0 - inf).")]
		public float maxForeLegOffset;

		[Token(Token = "0x4000809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The weight of maintaining the head's rotation as it was before solving the Grounding (range: 0 - 1).")]
		[Range(0f, 1f)]
		public float maintainHeadRotationWeight;

		[Token(Token = "0x400080A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The root Transform of the character, with the rigidbody and the collider.")]
		public Transform characterRoot;

		[Token(Token = "0x400080B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The pelvis transform. Common ancestor of both legs and the spine.")]
		public Transform pelvis;

		[Token(Token = "0x400080C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("The last bone in the spine that is the common parent for both forelegs.")]
		public Transform lastSpineBone;

		[Token(Token = "0x400080D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The head (optional, if you intend to maintain it's rotation).")]
		public Transform head;

		[Token(Token = "0x400080E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IK[] legs;

		[Token(Token = "0x400080F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public IK[] forelegs;

		[Token(Token = "0x4000810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[HideInInspector]
		public Vector3 gravity;

		[Token(Token = "0x4000811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Foot[] feet;

		[Token(Token = "0x4000812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 animatedPelvisLocalPosition;

		[Token(Token = "0x4000813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Quaternion animatedPelvisLocalRotation;

		[Token(Token = "0x4000814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private Quaternion animatedHeadLocalRotation;

		[Token(Token = "0x4000815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private Vector3 solvedPelvisLocalPosition;

		[Token(Token = "0x4000816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Quaternion solvedPelvisLocalRotation;

		[Token(Token = "0x4000817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Quaternion solvedHeadLocalRotation;

		[Token(Token = "0x4000818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private int solvedFeet;

		[Token(Token = "0x4000819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private bool solved;

		[Token(Token = "0x400081A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private float angle;

		[Token(Token = "0x400081B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Transform forefeetRoot;

		[Token(Token = "0x400081C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Quaternion headRotation;

		[Token(Token = "0x400081D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private float lastWeight;

		[Token(Token = "0x6000855")]
		[Address(RVA = "0xB5ECA8", Offset = "0xB5ECA8", VA = "0xB5ECA8", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000856")]
		[Address(RVA = "0xB5ECEC", Offset = "0xB5ECEC", VA = "0xB5ECEC", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000857")]
		[Address(RVA = "0xB5ED30", Offset = "0xB5ED30", VA = "0xB5ED30", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x6000858")]
		[Address(RVA = "0xB5ED58", Offset = "0xB5ED58", VA = "0xB5ED58")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x6000859")]
		[Address(RVA = "0xB5EE5C", Offset = "0xB5EE5C", VA = "0xB5EE5C")]
		private bool IsReadyToInitiateLegs(IK[] ikComponents)
		{
			return default(bool);
		}

		[Token(Token = "0x600085A")]
		[Address(RVA = "0xB5F054", Offset = "0xB5F054", VA = "0xB5F054")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600085B")]
		[Address(RVA = "0xB5F0B8", Offset = "0xB5F0B8", VA = "0xB5F0B8")]
		private void Update()
		{
		}

		[Token(Token = "0x600085C")]
		[Address(RVA = "0xB5F110", Offset = "0xB5F110", VA = "0xB5F110")]
		private void Initiate()
		{
		}

		[Token(Token = "0x600085D")]
		[Address(RVA = "0xB5F428", Offset = "0xB5F428", VA = "0xB5F428")]
		private Transform[] InitiateFeet(IK[] ikComponents, ref Foot[] f, int indexOffset)
		{
			return null;
		}

		[Token(Token = "0x600085E")]
		[Address(RVA = "0xB5F824", Offset = "0xB5F824", VA = "0xB5F824")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600085F")]
		[Address(RVA = "0xB5F8B4", Offset = "0xB5F8B4", VA = "0xB5F8B4")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x6000860")]
		[Address(RVA = "0xB5FBB4", Offset = "0xB5FBB4", VA = "0xB5FBB4")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x6000861")]
		[Address(RVA = "0xB60274", Offset = "0xB60274", VA = "0xB60274")]
		private void UpdateForefeetRoot()
		{
		}

		[Token(Token = "0x6000862")]
		[Address(RVA = "0xB6052C", Offset = "0xB6052C", VA = "0xB6052C")]
		private void SetFootIK(Foot foot, float maxOffset)
		{
		}

		[Token(Token = "0x6000863")]
		[Address(RVA = "0xB60660", Offset = "0xB60660", VA = "0xB60660")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x6000864")]
		[Address(RVA = "0xB60928", Offset = "0xB60928", VA = "0xB60928")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000865")]
		[Address(RVA = "0xB60958", Offset = "0xB60958", VA = "0xB60958")]
		private void DestroyLegs(IK[] ikComponents)
		{
		}

		[Token(Token = "0x6000866")]
		[Address(RVA = "0xB60B78", Offset = "0xB60B78", VA = "0xB60B78")]
		public GrounderQuadruped()
		{
		}
	}
	[Token(Token = "0x200018D")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Grounder/Grounder VRIK")]
	public class GrounderVRIK : Grounder
	{
		[Token(Token = "0x4000822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Reference to the VRIK componet.")]
		public VRIK ik;

		[Token(Token = "0x4000823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform[] feet;

		[Token(Token = "0x6000868")]
		[Address(RVA = "0xB60CBC", Offset = "0xB60CBC", VA = "0xB60CBC")]
		[ContextMenu("TUTORIAL VIDEO")]
		private void OpenTutorial()
		{
		}

		[Token(Token = "0x6000869")]
		[Address(RVA = "0xB60CC0", Offset = "0xB60CC0", VA = "0xB60CC0", Slot = "5")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x600086A")]
		[Address(RVA = "0xB60CC4", Offset = "0xB60CC4", VA = "0xB60CC4", Slot = "6")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x600086B")]
		[Address(RVA = "0xB60CC8", Offset = "0xB60CC8", VA = "0xB60CC8", Slot = "4")]
		public override void ResetPosition()
		{
		}

		[Token(Token = "0x600086C")]
		[Address(RVA = "0xB60CE0", Offset = "0xB60CE0", VA = "0xB60CE0")]
		private bool IsReadyToInitiate()
		{
			return default(bool);
		}

		[Token(Token = "0x600086D")]
		[Address(RVA = "0xB60D68", Offset = "0xB60D68", VA = "0xB60D68")]
		private void Update()
		{
		}

		[Token(Token = "0x600086E")]
		[Address(RVA = "0xB60DBC", Offset = "0xB60DBC", VA = "0xB60DBC")]
		private void Initiate()
		{
		}

		[Token(Token = "0x600086F")]
		[Address(RVA = "0xB61040", Offset = "0xB61040", VA = "0xB61040")]
		private void OnSolverUpdate()
		{
		}

		[Token(Token = "0x6000870")]
		[Address(RVA = "0xB61234", Offset = "0xB61234", VA = "0xB61234")]
		private void SetLegIK(IKSolverVR.PositionOffset positionOffset, Transform bone, Grounding.Leg leg)
		{
		}

		[Token(Token = "0x6000871")]
		[Address(RVA = "0xB612B8", Offset = "0xB612B8", VA = "0xB612B8")]
		private void OnPostSolverUpdate()
		{
		}

		[Token(Token = "0x6000872")]
		[Address(RVA = "0xB61554", Offset = "0xB61554", VA = "0xB61554")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000873")]
		[Address(RVA = "0xB616B4", Offset = "0xB616B4", VA = "0xB616B4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000874")]
		[Address(RVA = "0xB6187C", Offset = "0xB6187C", VA = "0xB6187C")]
		public GrounderVRIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200018E")]
	public class Grounding
	{
		[Serializable]
		[Token(Token = "0x200018F")]
		public enum Quality
		{
			[Token(Token = "0x400083C")]
			Fastest,
			[Token(Token = "0x400083D")]
			Simple,
			[Token(Token = "0x400083E")]
			Best
		}

		[Token(Token = "0x2000190")]
		public class Leg
		{
			[Token(Token = "0x4000841")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Quaternion rotationOffset;

			[Token(Token = "0x4000847")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public bool invertFootCenter;

			[Token(Token = "0x4000848")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Grounding grounding;

			[Token(Token = "0x4000849")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private float lastTime;

			[Token(Token = "0x400084A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			private float deltaTime;

			[Token(Token = "0x400084B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private Vector3 lastPosition;

			[Token(Token = "0x400084C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			private Quaternion toHitNormal;

			[Token(Token = "0x400084D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			private Quaternion r;

			[Token(Token = "0x400084E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			private RaycastHit heelHit;

			[Token(Token = "0x400084F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			private Vector3 up;

			[Token(Token = "0x17000088")]
			public bool isGrounded
			{
				[Token(Token = "0x600088D")]
				[Address(RVA = "0xB62BEC", Offset = "0xB62BEC", VA = "0xB62BEC")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x600088E")]
				[Address(RVA = "0xB62BF4", Offset = "0xB62BF4", VA = "0xB62BF4")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000089")]
			public Vector3 IKPosition
			{
				[Token(Token = "0x600088F")]
				[Address(RVA = "0xB62C00", Offset = "0xB62C00", VA = "0xB62C00")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000890")]
				[Address(RVA = "0xB62C0C", Offset = "0xB62C0C", VA = "0xB62C0C")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700008A")]
			public bool initiated
			{
				[Token(Token = "0x6000891")]
				[Address(RVA = "0xB62C18", Offset = "0xB62C18", VA = "0xB62C18")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000892")]
				[Address(RVA = "0xB62C20", Offset = "0xB62C20", VA = "0xB62C20")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700008B")]
			public float heightFromGround
			{
				[Token(Token = "0x6000893")]
				[Address(RVA = "0xB62C2C", Offset = "0xB62C2C", VA = "0xB62C2C")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000894")]
				[Address(RVA = "0xB62C34", Offset = "0xB62C34", VA = "0xB62C34")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700008C")]
			public Vector3 velocity
			{
				[Token(Token = "0x6000895")]
				[Address(RVA = "0xB62C3C", Offset = "0xB62C3C", VA = "0xB62C3C")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000896")]
				[Address(RVA = "0xB62C48", Offset = "0xB62C48", VA = "0xB62C48")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700008D")]
			public Transform transform
			{
				[Token(Token = "0x6000897")]
				[Address(RVA = "0xB62C54", Offset = "0xB62C54", VA = "0xB62C54")]
				[CompilerGenerated]
				get
				{
					return null;
				}
				[Token(Token = "0x6000898")]
				[Address(RVA = "0xB62C5C", Offset = "0xB62C5C", VA = "0xB62C5C")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700008E")]
			public float IKOffset
			{
				[Token(Token = "0x6000899")]
				[Address(RVA = "0xB62C64", Offset = "0xB62C64", VA = "0xB62C64")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x600089A")]
				[Address(RVA = "0xB62C6C", Offset = "0xB62C6C", VA = "0xB62C6C")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x1700008F")]
			public float stepHeightFromGround
			{
				[Token(Token = "0x600089F")]
				[Address(RVA = "0xB63230", Offset = "0xB63230", VA = "0xB63230")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000090")]
			private float rootYOffset
			{
				[Token(Token = "0x60008A8")]
				[Address(RVA = "0xB633A4", Offset = "0xB633A4", VA = "0xB633A4")]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x600089B")]
			[Address(RVA = "0xB61DA0", Offset = "0xB61DA0", VA = "0xB61DA0")]
			public void Initiate(Grounding grounding, Transform transform)
			{
			}

			[Token(Token = "0x600089C")]
			[Address(RVA = "0xB62C74", Offset = "0xB62C74", VA = "0xB62C74")]
			public void OnEnable()
			{
			}

			[Token(Token = "0x600089D")]
			[Address(RVA = "0xB6285C", Offset = "0xB6285C", VA = "0xB6285C")]
			public void Reset()
			{
			}

			[Token(Token = "0x600089E")]
			[Address(RVA = "0xB61EB4", Offset = "0xB61EB4", VA = "0xB61EB4")]
			public void Process()
			{
			}

			[Token(Token = "0x60008A0")]
			[Address(RVA = "0xB62FB0", Offset = "0xB62FB0", VA = "0xB62FB0")]
			private RaycastHit GetCapsuleHit(Vector3 offsetFromHeel)
			{
				return default(RaycastHit);
			}

			[Token(Token = "0x60008A1")]
			[Address(RVA = "0xB62CB4", Offset = "0xB62CB4", VA = "0xB62CB4")]
			private RaycastHit GetRaycastHit(Vector3 offsetFromHeel)
			{
				return default(RaycastHit);
			}

			[Token(Token = "0x60008A2")]
			[Address(RVA = "0xB632C4", Offset = "0xB632C4", VA = "0xB632C4")]
			private Vector3 RotateNormal(Vector3 normal)
			{
				return default(Vector3);
			}

			[Token(Token = "0x60008A3")]
			[Address(RVA = "0xB62E14", Offset = "0xB62E14", VA = "0xB62E14")]
			private void SetFootToPoint(Vector3 normal, Vector3 point)
			{
			}

			[Token(Token = "0x60008A4")]
			[Address(RVA = "0xB62E94", Offset = "0xB62E94", VA = "0xB62E94")]
			private void SetFootToPlane(Vector3 planeNormal, Vector3 planePoint, Vector3 heelHitPoint)
			{
			}

			[Token(Token = "0x60008A5")]
			[Address(RVA = "0xB63330", Offset = "0xB63330", VA = "0xB63330")]
			private float GetHeightFromGround(Vector3 hitPoint)
			{
				return default(float);
			}

			[Token(Token = "0x60008A6")]
			[Address(RVA = "0xB63264", Offset = "0xB63264", VA = "0xB63264")]
			private void RotateFoot()
			{
			}

			[Token(Token = "0x60008A7")]
			[Address(RVA = "0xB63448", Offset = "0xB63448", VA = "0xB63448")]
			private Quaternion GetRotationOffsetTarget()
			{
				return default(Quaternion);
			}

			[Token(Token = "0x60008A9")]
			[Address(RVA = "0xB61D00", Offset = "0xB61D00", VA = "0xB61D00")]
			public Leg()
			{
			}
		}

		[Token(Token = "0x2000191")]
		public class Pelvis
		{
			[Token(Token = "0x4000852")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Grounding grounding;

			[Token(Token = "0x4000853")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 lastRootPosition;

			[Token(Token = "0x4000854")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float damperF;

			[Token(Token = "0x4000855")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private bool initiated;

			[Token(Token = "0x4000856")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float lastTime;

			[Token(Token = "0x17000091")]
			public Vector3 IKOffset
			{
				[Token(Token = "0x60008AA")]
				[Address(RVA = "0xB635F8", Offset = "0xB635F8", VA = "0xB635F8")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x60008AB")]
				[Address(RVA = "0xB63604", Offset = "0xB63604", VA = "0xB63604")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000092")]
			public float heightOffset
			{
				[Token(Token = "0x60008AC")]
				[Address(RVA = "0xB63610", Offset = "0xB63610", VA = "0xB63610")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x60008AD")]
				[Address(RVA = "0xB63618", Offset = "0xB63618", VA = "0xB63618")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x60008AE")]
			[Address(RVA = "0xB61E78", Offset = "0xB61E78", VA = "0xB61E78")]
			public void Initiate(Grounding grounding)
			{
			}

			[Token(Token = "0x60008AF")]
			[Address(RVA = "0xB627C8", Offset = "0xB627C8", VA = "0xB627C8")]
			public void Reset()
			{
			}

			[Token(Token = "0x60008B0")]
			[Address(RVA = "0xB63620", Offset = "0xB63620", VA = "0xB63620")]
			public void OnEnable()
			{
			}

			[Token(Token = "0x60008B1")]
			[Address(RVA = "0xB625DC", Offset = "0xB625DC", VA = "0xB625DC")]
			public void Process(float lowestOffset, float highestOffset, bool isGrounded)
			{
			}

			[Token(Token = "0x60008B2")]
			[Address(RVA = "0xB61D98", Offset = "0xB61D98", VA = "0xB61D98")]
			public Pelvis()
			{
			}
		}

		[Token(Token = "0x4000824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("Layers to ground the character to. Make sure to exclude the layer of the character controller.")]
		public LayerMask layers;

		[Token(Token = "0x4000825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Tooltip("Max step height. Maximum vertical distance of Grounding from the root of the character.")]
		public float maxStep;

		[Token(Token = "0x4000826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The height offset of the root.")]
		public float heightOffset;

		[Token(Token = "0x4000827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The speed of moving the feet up/down.")]
		public float footSpeed;

		[Token(Token = "0x4000828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("CapsuleCast radius. Should match approximately with the size of the feet.")]
		public float footRadius;

		[Token(Token = "0x4000829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Offset of the foot center along character forward axis.")]
		[HideInInspector]
		public float footCenterOffset;

		[Token(Token = "0x400082A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Amount of velocity based prediction of the foot positions.")]
		public float prediction;

		[Token(Token = "0x400082B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Weight of rotating the feet to the ground normal offset.")]
		[Range(0f, 1f)]
		public float footRotationWeight;

		[Token(Token = "0x400082C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Speed of slerping the feet to their grounded rotations.")]
		public float footRotationSpeed;

		[Token(Token = "0x400082D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 90f)]
		[Tooltip("Max Foot Rotation Angle. Max angular offset from the foot's rotation.")]
		public float maxFootRotationAngle;

		[Token(Token = "0x400082E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("If true, solver will rotate with the character root so the character can be grounded for example to spherical planets. For performance reasons leave this off unless needed.")]
		public bool rotateSolver;

		[Token(Token = "0x400082F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The speed of moving the character up/down.")]
		public float pelvisSpeed;

		[Token(Token = "0x4000830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Used for smoothing out vertical pelvis movement (range 0 - 1).")]
		[Range(0f, 1f)]
		public float pelvisDamper;

		[Token(Token = "0x4000831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("The weight of lowering the pelvis to the lowest foot.")]
		public float lowerPelvisWeight;

		[Token(Token = "0x4000832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The weight of lifting the pelvis to the highest foot. This is useful when you don't want the feet to go too high relative to the body when crouching.")]
		public float liftPelvisWeight;

		[Token(Token = "0x4000833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The radius of the spherecast from the root that determines whether the character root is grounded.")]
		public float rootSphereCastRadius;

		[Token(Token = "0x4000834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The raycasting quality. Fastest is a single raycast per foot, Simple is three raycasts, Best is one raycast and a capsule cast per foot.")]
		public Quality quality;

		[Token(Token = "0x400083A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool initiated;

		[Token(Token = "0x17000080")]
		public Leg[] legs
		{
			[Token(Token = "0x6000875")]
			[Address(RVA = "0xB618DC", Offset = "0xB618DC", VA = "0xB618DC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000876")]
			[Address(RVA = "0xB618E4", Offset = "0xB618E4", VA = "0xB618E4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000081")]
		public Pelvis pelvis
		{
			[Token(Token = "0x6000877")]
			[Address(RVA = "0xB618EC", Offset = "0xB618EC", VA = "0xB618EC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000878")]
			[Address(RVA = "0xB618F4", Offset = "0xB618F4", VA = "0xB618F4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000082")]
		public bool isGrounded
		{
			[Token(Token = "0x6000879")]
			[Address(RVA = "0xB618FC", Offset = "0xB618FC", VA = "0xB618FC")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600087A")]
			[Address(RVA = "0xB61904", Offset = "0xB61904", VA = "0xB61904")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000083")]
		public Transform root
		{
			[Token(Token = "0x600087B")]
			[Address(RVA = "0xB61910", Offset = "0xB61910", VA = "0xB61910")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600087C")]
			[Address(RVA = "0xB61918", Offset = "0xB61918", VA = "0xB61918")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000084")]
		public RaycastHit rootHit
		{
			[Token(Token = "0x600087D")]
			[Address(RVA = "0xB61920", Offset = "0xB61920", VA = "0xB61920")]
			[CompilerGenerated]
			get
			{
				return default(RaycastHit);
			}
			[Token(Token = "0x600087E")]
			[Address(RVA = "0xB61938", Offset = "0xB61938", VA = "0xB61938")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000085")]
		public bool rootGrounded
		{
			[Token(Token = "0x600087F")]
			[Address(RVA = "0xB61958", Offset = "0xB61958", VA = "0xB61958")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000086")]
		public Vector3 up
		{
			[Token(Token = "0x6000887")]
			[Address(RVA = "0xB5C2D4", Offset = "0xB5C2D4", VA = "0xB5C2D4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000087")]
		private bool useRootRotation
		{
			[Token(Token = "0x600088A")]
			[Address(RVA = "0xB628F0", Offset = "0xB628F0", VA = "0xB628F0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000880")]
		[Address(RVA = "0xB619A0", Offset = "0xB619A0", VA = "0xB619A0")]
		public RaycastHit GetRootHit(float maxDistanceMlp = 10f)
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x6000881")]
		[Address(RVA = "0xB61BF8", Offset = "0xB61BF8", VA = "0xB61BF8")]
		public bool IsValid(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000882")]
		[Address(RVA = "0xB5B8C4", Offset = "0xB5B8C4", VA = "0xB5B8C4")]
		public void Initiate(Transform root, Transform[] feet)
		{
		}

		[Token(Token = "0x6000883")]
		[Address(RVA = "0xB5C020", Offset = "0xB5C020", VA = "0xB5C020")]
		public void Update()
		{
		}

		[Token(Token = "0x6000884")]
		[Address(RVA = "0xB5DCD8", Offset = "0xB5DCD8", VA = "0xB5DCD8")]
		public Vector3 GetLegsPlaneNormal()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000885")]
		[Address(RVA = "0xB5B3FC", Offset = "0xB5B3FC", VA = "0xB5B3FC")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000886")]
		[Address(RVA = "0xB61E9C", Offset = "0xB61E9C", VA = "0xB61E9C")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x6000888")]
		[Address(RVA = "0xB629A4", Offset = "0xB629A4", VA = "0xB629A4")]
		public float GetVerticalOffset(Vector3 p1, Vector3 p2)
		{
			return default(float);
		}

		[Token(Token = "0x6000889")]
		[Address(RVA = "0xB62A28", Offset = "0xB62A28", VA = "0xB62A28")]
		public Vector3 Flatten(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600088B")]
		[Address(RVA = "0xB62B7C", Offset = "0xB62B7C", VA = "0xB62B7C")]
		public Vector3 GetFootCenterOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600088C")]
		[Address(RVA = "0xB5B1B8", Offset = "0xB5B1B8", VA = "0xB5B1B8")]
		public Grounding()
		{
		}
	}
	[Token(Token = "0x2000192")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Aim IK")]
	[HelpURL("https://www.youtube.com/watch?v=wT8fViZpLmQ&index=3&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	public class AimIK : IK
	{
		[Token(Token = "0x4000857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverAim solver;

		[Token(Token = "0x60008B3")]
		[Address(RVA = "0xB63674", Offset = "0xB63674", VA = "0xB63674", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60008B4")]
		[Address(RVA = "0xB636B8", Offset = "0xB636B8", VA = "0xB636B8", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60008B5")]
		[Address(RVA = "0xB636FC", Offset = "0xB636FC", VA = "0xB636FC")]
		[ContextMenu("TUTORIAL VIDEO")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x60008B6")]
		[Address(RVA = "0xB63740", Offset = "0xB63740", VA = "0xB63740")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60008B7")]
		[Address(RVA = "0xB63784", Offset = "0xB63784", VA = "0xB63784")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60008B8")]
		[Address(RVA = "0xB637C8", Offset = "0xB637C8", VA = "0xB637C8", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60008B9")]
		[Address(RVA = "0xB637D0", Offset = "0xB637D0", VA = "0xB637D0")]
		public AimIK()
		{
		}
	}
	[Token(Token = "0x2000193")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/CCD IK")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page3.html")]
	public class CCDIK : IK
	{
		[Token(Token = "0x4000858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverCCD solver;

		[Token(Token = "0x60008BA")]
		[Address(RVA = "0xB638EC", Offset = "0xB638EC", VA = "0xB638EC", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60008BB")]
		[Address(RVA = "0xB63930", Offset = "0xB63930", VA = "0xB63930", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60008BC")]
		[Address(RVA = "0xB63974", Offset = "0xB63974", VA = "0xB63974")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60008BD")]
		[Address(RVA = "0xB639B8", Offset = "0xB639B8", VA = "0xB639B8")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60008BE")]
		[Address(RVA = "0xB639FC", Offset = "0xB639FC", VA = "0xB639FC", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60008BF")]
		[Address(RVA = "0xB63A04", Offset = "0xB63A04", VA = "0xB63A04")]
		public CCDIK()
		{
		}
	}
	[Token(Token = "0x2000194")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/FABRIK")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page4.html")]
	public class FABRIK : IK
	{
		[Token(Token = "0x4000859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverFABRIK solver;

		[Token(Token = "0x60008C0")]
		[Address(RVA = "0xB63A78", Offset = "0xB63A78", VA = "0xB63A78", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60008C1")]
		[Address(RVA = "0xB63ABC", Offset = "0xB63ABC", VA = "0xB63ABC", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60008C2")]
		[Address(RVA = "0xB63B00", Offset = "0xB63B00", VA = "0xB63B00")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60008C3")]
		[Address(RVA = "0xB63B44", Offset = "0xB63B44", VA = "0xB63B44")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60008C4")]
		[Address(RVA = "0xB63B88", Offset = "0xB63B88", VA = "0xB63B88", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60008C5")]
		[Address(RVA = "0xB63B90", Offset = "0xB63B90", VA = "0xB63B90")]
		public FABRIK()
		{
		}
	}
	[Token(Token = "0x2000195")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/FABRIK Root")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page5.html")]
	public class FABRIKRoot : IK
	{
		[Token(Token = "0x400085A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverFABRIKRoot solver;

		[Token(Token = "0x60008C6")]
		[Address(RVA = "0xB63C04", Offset = "0xB63C04", VA = "0xB63C04", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60008C7")]
		[Address(RVA = "0xB63C48", Offset = "0xB63C48", VA = "0xB63C48", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60008C8")]
		[Address(RVA = "0xB63C8C", Offset = "0xB63C8C", VA = "0xB63C8C")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60008C9")]
		[Address(RVA = "0xB63CD0", Offset = "0xB63CD0", VA = "0xB63CD0")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60008CA")]
		[Address(RVA = "0xB63D14", Offset = "0xB63D14", VA = "0xB63D14", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60008CB")]
		[Address(RVA = "0xB63D1C", Offset = "0xB63D1C", VA = "0xB63D1C")]
		public FABRIKRoot()
		{
		}
	}
	[Token(Token = "0x2000196")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Full Body Biped IK")]
	[HelpURL("https://www.youtube.com/watch?v=7__IafZGwvI&index=1&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	public class FullBodyBipedIK : IK
	{
		[Token(Token = "0x400085B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BipedReferences references;

		[Token(Token = "0x400085C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public IKSolverFullBodyBiped solver;

		[Token(Token = "0x60008CC")]
		[Address(RVA = "0xB63D90", Offset = "0xB63D90", VA = "0xB63D90", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60008CD")]
		[Address(RVA = "0xB63DD4", Offset = "0xB63DD4", VA = "0xB63DD4", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60008CE")]
		[Address(RVA = "0xB63E18", Offset = "0xB63E18", VA = "0xB63E18")]
		[ContextMenu("TUTORIAL VIDEO (SETUP)")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x60008CF")]
		[Address(RVA = "0xB63E5C", Offset = "0xB63E5C", VA = "0xB63E5C")]
		[ContextMenu("TUTORIAL VIDEO (INSPECTOR)")]
		private void OpenInspectorTutorial()
		{
		}

		[Token(Token = "0x60008D0")]
		[Address(RVA = "0xB63EA0", Offset = "0xB63EA0", VA = "0xB63EA0")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60008D1")]
		[Address(RVA = "0xB63EE4", Offset = "0xB63EE4", VA = "0xB63EE4")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60008D2")]
		[Address(RVA = "0xB63F28", Offset = "0xB63F28", VA = "0xB63F28")]
		public void SetReferences(BipedReferences references, Transform rootNode)
		{
		}

		[Token(Token = "0x60008D3")]
		[Address(RVA = "0xB63F68", Offset = "0xB63F68", VA = "0xB63F68", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60008D4")]
		[Address(RVA = "0xB63F70", Offset = "0xB63F70", VA = "0xB63F70")]
		public bool ReferencesError(ref string errorMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60008D5")]
		[Address(RVA = "0xB64140", Offset = "0xB64140", VA = "0xB64140")]
		public bool ReferencesWarning(ref string warningMessage)
		{
			return default(bool);
		}

		[Token(Token = "0x60008D6")]
		[Address(RVA = "0xB645FC", Offset = "0xB645FC", VA = "0xB645FC")]
		[ContextMenu("Reinitiate")]
		private void Reinitiate()
		{
		}

		[Token(Token = "0x60008D7")]
		[Address(RVA = "0xB6461C", Offset = "0xB6461C", VA = "0xB6461C")]
		[ContextMenu("Auto-detect References")]
		private void AutoDetectReferences()
		{
		}

		[Token(Token = "0x60008D8")]
		[Address(RVA = "0xB6470C", Offset = "0xB6470C", VA = "0xB6470C")]
		public FullBodyBipedIK()
		{
		}
	}
	[Token(Token = "0x2000197")]
	public abstract class IK : SolverManager
	{
		[Token(Token = "0x60008D9")]
		public abstract IKSolver GetIKSolver();

		[Token(Token = "0x60008DA")]
		[Address(RVA = "0xB647BC", Offset = "0xB647BC", VA = "0xB647BC", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x60008DB")]
		[Address(RVA = "0xB648A0", Offset = "0xB648A0", VA = "0xB648A0", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x60008DC")]
		[Address(RVA = "0xB64A88", Offset = "0xB64A88", VA = "0xB64A88", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x60008DD")]
		protected abstract void OpenUserManual();

		[Token(Token = "0x60008DE")]
		protected abstract void OpenScriptReference();

		[Token(Token = "0x60008DF")]
		[Address(RVA = "0xB638E4", Offset = "0xB638E4", VA = "0xB638E4")]
		protected IK()
		{
		}
	}
	[Token(Token = "0x2000198")]
	public class IKExecutionOrder : MonoBehaviour
	{
		[Token(Token = "0x400085D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The IK components, assign in the order in which you wish to update them.")]
		public IK[] IKComponents;

		[Token(Token = "0x400085E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Optional. Assign it if you are using 'Animate Physics' as the Update Mode.")]
		public Animator animator;

		[Token(Token = "0x400085F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool fixedFrame;

		[Token(Token = "0x17000093")]
		private bool animatePhysics
		{
			[Token(Token = "0x60008E0")]
			[Address(RVA = "0xB64AD8", Offset = "0xB64AD8", VA = "0xB64AD8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60008E1")]
		[Address(RVA = "0xB64B64", Offset = "0xB64B64", VA = "0xB64B64")]
		private void Start()
		{
		}

		[Token(Token = "0x60008E2")]
		[Address(RVA = "0xB64BC8", Offset = "0xB64BC8", VA = "0xB64BC8")]
		private void Update()
		{
		}

		[Token(Token = "0x60008E3")]
		[Address(RVA = "0xB64C68", Offset = "0xB64C68", VA = "0xB64C68")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60008E4")]
		[Address(RVA = "0xB64C94", Offset = "0xB64C94", VA = "0xB64C94")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60008E5")]
		[Address(RVA = "0xB64BEC", Offset = "0xB64BEC", VA = "0xB64BEC")]
		private void FixTransforms()
		{
		}

		[Token(Token = "0x60008E6")]
		[Address(RVA = "0xB64D14", Offset = "0xB64D14", VA = "0xB64D14")]
		public IKExecutionOrder()
		{
		}
	}
	[Token(Token = "0x2000199")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Leg IK")]
	public class LegIK : IK
	{
		[Token(Token = "0x4000860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLeg solver;

		[Token(Token = "0x60008E7")]
		[Address(RVA = "0xB64D1C", Offset = "0xB64D1C", VA = "0xB64D1C", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60008E8")]
		[Address(RVA = "0xB64D84", Offset = "0xB64D84", VA = "0xB64D84", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60008E9")]
		[Address(RVA = "0xB64DEC", Offset = "0xB64DEC", VA = "0xB64DEC")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60008EA")]
		[Address(RVA = "0xB64E30", Offset = "0xB64E30", VA = "0xB64E30")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60008EB")]
		[Address(RVA = "0xB64E74", Offset = "0xB64E74", VA = "0xB64E74", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60008EC")]
		[Address(RVA = "0xB64E7C", Offset = "0xB64E7C", VA = "0xB64E7C")]
		public LegIK()
		{
		}
	}
	[Token(Token = "0x200019A")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Limb IK")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page7.html")]
	public class LimbIK : IK
	{
		[Token(Token = "0x4000861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLimb solver;

		[Token(Token = "0x60008ED")]
		[Address(RVA = "0xB64EF0", Offset = "0xB64EF0", VA = "0xB64EF0", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60008EE")]
		[Address(RVA = "0xB64F34", Offset = "0xB64F34", VA = "0xB64F34", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60008EF")]
		[Address(RVA = "0xB64F78", Offset = "0xB64F78", VA = "0xB64F78")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60008F0")]
		[Address(RVA = "0xB64FBC", Offset = "0xB64FBC", VA = "0xB64FBC")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60008F1")]
		[Address(RVA = "0xB65000", Offset = "0xB65000", VA = "0xB65000", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60008F2")]
		[Address(RVA = "0xB65008", Offset = "0xB65008", VA = "0xB65008")]
		public LimbIK()
		{
		}
	}
	[Token(Token = "0x200019B")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Look At IK")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page8.html")]
	public class LookAtIK : IK
	{
		[Token(Token = "0x4000862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverLookAt solver;

		[Token(Token = "0x60008F3")]
		[Address(RVA = "0xB6507C", Offset = "0xB6507C", VA = "0xB6507C", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60008F4")]
		[Address(RVA = "0xB650C0", Offset = "0xB650C0", VA = "0xB650C0", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60008F5")]
		[Address(RVA = "0xB65104", Offset = "0xB65104", VA = "0xB65104")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60008F6")]
		[Address(RVA = "0xB65148", Offset = "0xB65148", VA = "0xB65148")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60008F7")]
		[Address(RVA = "0xB6518C", Offset = "0xB6518C", VA = "0xB6518C", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60008F8")]
		[Address(RVA = "0xB65194", Offset = "0xB65194", VA = "0xB65194")]
		public LookAtIK()
		{
		}
	}
	[Token(Token = "0x200019C")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/Trigonometric IK")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page9.html")]
	public class TrigonometricIK : IK
	{
		[Token(Token = "0x4000863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IKSolverTrigonometric solver;

		[Token(Token = "0x60008F9")]
		[Address(RVA = "0xB65208", Offset = "0xB65208", VA = "0xB65208", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x60008FA")]
		[Address(RVA = "0xB6524C", Offset = "0xB6524C", VA = "0xB6524C", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x60008FB")]
		[Address(RVA = "0xB65290", Offset = "0xB65290", VA = "0xB65290")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x60008FC")]
		[Address(RVA = "0xB652D4", Offset = "0xB652D4", VA = "0xB652D4")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x60008FD")]
		[Address(RVA = "0xB65318", Offset = "0xB65318", VA = "0xB65318", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x60008FE")]
		[Address(RVA = "0xB65320", Offset = "0xB65320", VA = "0xB65320")]
		public TrigonometricIK()
		{
		}
	}
	[Token(Token = "0x200019D")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/IK/VR IK")]
	public class VRIK : IK
	{
		[Serializable]
		[Token(Token = "0x200019E")]
		public class References
		{
			[Token(Token = "0x4000866")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform root;

			[Token(Token = "0x4000867")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform pelvis;

			[Token(Token = "0x4000868")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform spine;

			[Token(Token = "0x4000869")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Transform chest;

			[Token(Token = "0x400086A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Transform neck;

			[Token(Token = "0x400086B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Transform head;

			[Token(Token = "0x400086C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Transform leftShoulder;

			[Token(Token = "0x400086D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Transform leftUpperArm;

			[Token(Token = "0x400086E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Transform leftForearm;

			[Token(Token = "0x400086F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public Transform leftHand;

			[Token(Token = "0x4000870")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Transform rightShoulder;

			[Token(Token = "0x4000871")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Transform rightUpperArm;

			[Token(Token = "0x4000872")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public Transform rightForearm;

			[Token(Token = "0x4000873")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public Transform rightHand;

			[Token(Token = "0x4000874")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public Transform leftThigh;

			[Token(Token = "0x4000875")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			public Transform leftCalf;

			[Token(Token = "0x4000876")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public Transform leftFoot;

			[Token(Token = "0x4000877")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			public Transform leftToes;

			[Token(Token = "0x4000878")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			public Transform rightThigh;

			[Token(Token = "0x4000879")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			public Transform rightCalf;

			[Token(Token = "0x400087A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			public Transform rightFoot;

			[Token(Token = "0x400087B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			public Transform rightToes;

			[Token(Token = "0x17000094")]
			public bool isFilled
			{
				[Token(Token = "0x6000908")]
				[Address(RVA = "0xB65DB8", Offset = "0xB65DB8", VA = "0xB65DB8")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000095")]
			public bool isEmpty
			{
				[Token(Token = "0x6000909")]
				[Address(RVA = "0xB659FC", Offset = "0xB659FC", VA = "0xB659FC")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000907")]
			[Address(RVA = "0xB6613C", Offset = "0xB6613C", VA = "0xB6613C")]
			public Transform[] GetTransforms()
			{
				return null;
			}

			[Token(Token = "0x600090A")]
			[Address(RVA = "0xB654C4", Offset = "0xB654C4", VA = "0xB654C4")]
			public static bool AutoDetectReferences(Transform root, out References references)
			{
				return default(bool);
			}

			[Token(Token = "0x600090B")]
			[Address(RVA = "0xB66134", Offset = "0xB66134", VA = "0xB66134")]
			public References()
			{
			}
		}

		[Token(Token = "0x4000864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[ContextMenuItem("Auto-detect References", "AutoDetectReferences")]
		[Tooltip("Bone mapping. Right-click on the component header and select 'Auto-detect References' of fill in manually if not a Humanoid character.")]
		public References references;

		[Token(Token = "0x4000865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The VRIK solver.")]
		public IKSolverVR solver;

		[Token(Token = "0x60008FF")]
		[Address(RVA = "0xB65394", Offset = "0xB65394", VA = "0xB65394", Slot = "8")]
		[ContextMenu("User Manual")]
		protected override void OpenUserManual()
		{
		}

		[Token(Token = "0x6000900")]
		[Address(RVA = "0xB653FC", Offset = "0xB653FC", VA = "0xB653FC", Slot = "9")]
		[ContextMenu("Scrpt Reference")]
		protected override void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000901")]
		[Address(RVA = "0xB65464", Offset = "0xB65464", VA = "0xB65464")]
		[ContextMenu("TUTORIAL VIDEO (STEAMVR SETUP)")]
		private void OpenSetupTutorial()
		{
		}

		[Token(Token = "0x6000902")]
		[Address(RVA = "0xB654A8", Offset = "0xB654A8", VA = "0xB654A8")]
		[ContextMenu("Auto-detect References")]
		public void AutoDetectReferences()
		{
		}

		[Token(Token = "0x6000903")]
		[Address(RVA = "0xB65960", Offset = "0xB65960", VA = "0xB65960")]
		[ContextMenu("Guess Hand Orientations")]
		public void GuessHandOrientations()
		{
		}

		[Token(Token = "0x6000904")]
		[Address(RVA = "0xB65988", Offset = "0xB65988", VA = "0xB65988", Slot = "7")]
		public override IKSolver GetIKSolver()
		{
			return null;
		}

		[Token(Token = "0x6000905")]
		[Address(RVA = "0xB65990", Offset = "0xB65990", VA = "0xB65990", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6000906")]
		[Address(RVA = "0xB66084", Offset = "0xB66084", VA = "0xB66084")]
		public VRIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200019F")]
	public class FABRIKChain
	{
		[Token(Token = "0x400087C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FABRIK ik;

		[Token(Token = "0x400087D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float pull;

		[Token(Token = "0x400087E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1f)]
		public float pin;

		[Token(Token = "0x400087F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int[] children;

		[Token(Token = "0x600090C")]
		[Address(RVA = "0xB66680", Offset = "0xB66680", VA = "0xB66680")]
		public bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600090D")]
		[Address(RVA = "0xB66750", Offset = "0xB66750", VA = "0xB66750")]
		public void Initiate()
		{
		}

		[Token(Token = "0x600090E")]
		[Address(RVA = "0xB66770", Offset = "0xB66770", VA = "0xB66770")]
		public void Stage1(FABRIKChain[] chain)
		{
		}

		[Token(Token = "0x600090F")]
		[Address(RVA = "0xB669C4", Offset = "0xB669C4", VA = "0xB669C4")]
		public void Stage2(Vector3 rootPosition, FABRIKChain[] chain)
		{
		}

		[Token(Token = "0x6000910")]
		[Address(RVA = "0xB66830", Offset = "0xB66830", VA = "0xB66830")]
		private Vector3 GetCentroid(FABRIKChain[] chain)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000911")]
		[Address(RVA = "0xB66AA8", Offset = "0xB66AA8", VA = "0xB66AA8")]
		public FABRIKChain()
		{
		}
	}
	[Token(Token = "0x20001A0")]
	public class FBBIKArmBending : MonoBehaviour
	{
		[Token(Token = "0x4000880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 bendDirectionOffsetLeft;

		[Token(Token = "0x4000882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 bendDirectionOffsetRight;

		[Token(Token = "0x4000883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 characterSpaceBendOffsetLeft;

		[Token(Token = "0x4000884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 characterSpaceBendOffsetRight;

		[Token(Token = "0x4000885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion leftHandTargetRotation;

		[Token(Token = "0x4000886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Quaternion rightHandTargetRotation;

		[Token(Token = "0x4000887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool initiated;

		[Token(Token = "0x6000912")]
		[Address(RVA = "0xB66B14", Offset = "0xB66B14", VA = "0xB66B14")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000913")]
		[Address(RVA = "0xB6708C", Offset = "0xB6708C", VA = "0xB6708C")]
		private void OnPostFBBIK()
		{
		}

		[Token(Token = "0x6000914")]
		[Address(RVA = "0xB67220", Offset = "0xB67220", VA = "0xB67220")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000915")]
		[Address(RVA = "0xB67348", Offset = "0xB67348", VA = "0xB67348")]
		public FBBIKArmBending()
		{
		}
	}
	[Token(Token = "0x20001A1")]
	public class FBBIKHeadEffector : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20001A2")]
		public class BendBone
		{
			[Token(Token = "0x40008B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Assign spine and/or neck bones.")]
			public Transform transform;

			[Token(Token = "0x40008B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Range(0f, 1f)]
			[Tooltip("The weight of rotating this bone.")]
			public float weight;

			[Token(Token = "0x40008B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private Quaternion defaultLocalRotation;

			[Token(Token = "0x6000924")]
			[Address(RVA = "0xB6A6AC", Offset = "0xB6A6AC", VA = "0xB6A6AC")]
			public BendBone()
			{
			}

			[Token(Token = "0x6000925")]
			[Address(RVA = "0xB6A70C", Offset = "0xB6A70C", VA = "0xB6A70C")]
			public BendBone(Transform transform, float weight)
			{
			}

			[Token(Token = "0x6000926")]
			[Address(RVA = "0xB67D00", Offset = "0xB67D00", VA = "0xB67D00")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x6000927")]
			[Address(RVA = "0xB680D0", Offset = "0xB680D0", VA = "0xB680D0")]
			public void FixTransforms()
			{
			}
		}

		[Token(Token = "0x4000888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Reference to the FBBIK component.")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Master weight for positioning the head.")]
		[Range(0f, 1f)]
		[LargeHeader("Position")]
		public float positionWeight;

		[Token(Token = "0x400088A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("The weight of moving the body along with the head")]
		[Range(0f, 1f)]
		public float bodyWeight;

		[Token(Token = "0x400088B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The weight of moving the thighs along with the head")]
		[Range(0f, 1f)]
		public float thighWeight;

		[Token(Token = "0x400088C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("If false, hands will not pull the head away if they are too far. Disabling this will improve performance significantly.")]
		public bool handsPullBody;

		[Token(Token = "0x400088D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[LargeHeader("Rotation")]
		[Tooltip("The weight of rotating the head bone after solving")]
		[Range(0f, 1f)]
		public float rotationWeight;

		[Token(Token = "0x400088E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Clamping the rotation of the body")]
		[Range(0f, 1f)]
		public float bodyClampWeight;

		[Token(Token = "0x400088F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Clamping the rotation of the head")]
		[Range(0f, 1f)]
		public float headClampWeight;

		[Token(Token = "0x4000890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The master weight of bending/twisting the spine to the rotation of the head effector. This is similar to CCD, but uses the rotation of the head effector not the position.")]
		[Range(0f, 1f)]
		public float bendWeight;

		[Token(Token = "0x4000891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The bones to use for bending.")]
		public BendBone[] bendBones;

		[Token(Token = "0x4000892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[LargeHeader("CCD")]
		[Tooltip("Optional. The master weight of the CCD (Cyclic Coordinate Descent) IK effect that bends the spine towards the head effector before FBBIK solves.")]
		[Range(0f, 1f)]
		public float CCDWeight;

		[Token(Token = "0x4000893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The weight of rolling the bones in towards the target")]
		[Range(0f, 1f)]
		public float roll;

		[Token(Token = "0x4000894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Range(0f, 1000f)]
		[Tooltip("Smoothing the CCD effect.")]
		public float damper;

		[Token(Token = "0x4000895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Bones to use for the CCD pass. Assign spine and/or neck bones.")]
		public Transform[] CCDBones;

		[Token(Token = "0x4000896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[LargeHeader("Stretching")]
		[Tooltip("Stretching the spine/neck to help reach the target. This is useful for making sure the head stays locked relative to the VR headset. NB! Stretching is done after FBBIK has solved so if you have the hand effectors pinned and spine bones included in the 'Stretch Bones', the hands might become offset from their target positions.")]
		[Range(0f, 1f)]
		public float postStretchWeight;

		[Token(Token = "0x4000897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("Stretch magnitude limit.")]
		public float maxStretch;

		[Token(Token = "0x4000898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("If > 0, dampers the stretching effect.")]
		public float stretchDamper;

		[Token(Token = "0x4000899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("If true, will fix head position to this Transform no matter what. Good for making sure the head will not budge away from the VR headset")]
		public bool fixHead;

		[Token(Token = "0x400089A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Bones to use for stretching. The more bones you add, the less noticable the effect.")]
		public Transform[] stretchBones;

		[Token(Token = "0x400089B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[LargeHeader("Chest Direction")]
		public Vector3 chestDirection;

		[Token(Token = "0x400089C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Range(0f, 1f)]
		public float chestDirectionWeight;

		[Token(Token = "0x400089D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform[] chestBones;

		[Token(Token = "0x400089E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public IKSolver.UpdateDelegate OnPostHeadEffectorFK;

		[Token(Token = "0x400089F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 offset;

		[Token(Token = "0x40008A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 headToBody;

		[Token(Token = "0x40008A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 shoulderCenterToHead;

		[Token(Token = "0x40008A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Vector3 headToLeftThigh;

		[Token(Token = "0x40008A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Vector3 headToRightThigh;

		[Token(Token = "0x40008A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Vector3 leftShoulderPos;

		[Token(Token = "0x40008A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Vector3 rightShoulderPos;

		[Token(Token = "0x40008A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float shoulderDist;

		[Token(Token = "0x40008A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float leftShoulderDist;

		[Token(Token = "0x40008A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private float rightShoulderDist;

		[Token(Token = "0x40008A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Quaternion chestRotation;

		[Token(Token = "0x40008AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Quaternion headRotationRelativeToRoot;

		[Token(Token = "0x40008AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Quaternion[] ccdDefaultLocalRotations;

		[Token(Token = "0x40008AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Vector3 headLocalPosition;

		[Token(Token = "0x40008AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		private Quaternion headLocalRotation;

		[Token(Token = "0x40008AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Vector3[] stretchLocalPositions;

		[Token(Token = "0x40008AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Quaternion[] stretchLocalRotations;

		[Token(Token = "0x40008B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Vector3[] chestLocalPositions;

		[Token(Token = "0x40008B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private Quaternion[] chestLocalRotations;

		[Token(Token = "0x40008B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private int bendBonesCount;

		[Token(Token = "0x40008B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private int ccdBonesCount;

		[Token(Token = "0x40008B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private int stretchBonesCount;

		[Token(Token = "0x40008B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private int chestBonesCount;

		[Token(Token = "0x6000916")]
		[Address(RVA = "0xB67350", Offset = "0xB67350", VA = "0xB67350")]
		private void Start()
		{
		}

		[Token(Token = "0x6000917")]
		[Address(RVA = "0xB67850", Offset = "0xB67850", VA = "0xB67850")]
		private void OnStoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000918")]
		[Address(RVA = "0xB67D2C", Offset = "0xB67D2C", VA = "0xB67D2C")]
		private void OnFixTransforms()
		{
		}

		[Token(Token = "0x6000919")]
		[Address(RVA = "0xB680F8", Offset = "0xB680F8", VA = "0xB680F8")]
		private void OnPreRead()
		{
		}

		[Token(Token = "0x600091A")]
		[Address(RVA = "0xB689F4", Offset = "0xB689F4", VA = "0xB689F4")]
		private void SpineBend()
		{
		}

		[Token(Token = "0x600091B")]
		[Address(RVA = "0xB68DEC", Offset = "0xB68DEC", VA = "0xB68DEC")]
		private void CCDPass()
		{
		}

		[Token(Token = "0x600091C")]
		[Address(RVA = "0xB691FC", Offset = "0xB691FC", VA = "0xB691FC")]
		private void Iterate(int iteration)
		{
		}

		[Token(Token = "0x600091D")]
		[Address(RVA = "0xB69B74", Offset = "0xB69B74", VA = "0xB69B74")]
		private void OnPostUpdate()
		{
		}

		[Token(Token = "0x600091E")]
		[Address(RVA = "0xB68738", Offset = "0xB68738", VA = "0xB68738")]
		private void ChestDirection()
		{
		}

		[Token(Token = "0x600091F")]
		[Address(RVA = "0xB69DB0", Offset = "0xB69DB0", VA = "0xB69DB0")]
		private void PostStretching()
		{
		}

		[Token(Token = "0x6000920")]
		[Address(RVA = "0xB69A94", Offset = "0xB69A94", VA = "0xB69A94")]
		private void LerpSolverPosition(IKEffector effector, Vector3 position, float weight, Vector3 offset)
		{
		}

		[Token(Token = "0x6000921")]
		[Address(RVA = "0xB69994", Offset = "0xB69994", VA = "0xB69994")]
		private void Solve(ref Vector3 pos1, ref Vector3 pos2, float nominalDistance)
		{
		}

		[Token(Token = "0x6000922")]
		[Address(RVA = "0xB6A110", Offset = "0xB6A110", VA = "0xB6A110")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000923")]
		[Address(RVA = "0xB6A498", Offset = "0xB6A498", VA = "0xB6A498")]
		public FBBIKHeadEffector()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001A3")]
	public class FBIKChain
	{
		[Serializable]
		[Token(Token = "0x20001A4")]
		public class ChildConstraint
		{
			[Token(Token = "0x40008D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float pushElasticity;

			[Token(Token = "0x40008D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float pullElasticity;

			[Token(Token = "0x40008D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			private Transform bone1;

			[Token(Token = "0x40008D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			private Transform bone2;

			[Token(Token = "0x40008D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float crossFade;

			[Token(Token = "0x40008D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float inverseCrossFade;

			[Token(Token = "0x40008D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int chain1Index;

			[Token(Token = "0x40008D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int chain2Index;

			[Token(Token = "0x17000096")]
			public float nominalDistance
			{
				[Token(Token = "0x600093C")]
				[Address(RVA = "0xB6D840", Offset = "0xB6D840", VA = "0xB6D840")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x600093D")]
				[Address(RVA = "0xB6D848", Offset = "0xB6D848", VA = "0xB6D848")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000097")]
			public bool isRigid
			{
				[Token(Token = "0x600093E")]
				[Address(RVA = "0xB6D850", Offset = "0xB6D850", VA = "0xB6D850")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x600093F")]
				[Address(RVA = "0xB6D858", Offset = "0xB6D858", VA = "0xB6D858")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6000940")]
			[Address(RVA = "0xB6D864", Offset = "0xB6D864", VA = "0xB6D864")]
			public ChildConstraint(Transform bone1, Transform bone2, float pushElasticity = 0f, float pullElasticity = 0f)
			{
			}

			[Token(Token = "0x6000941")]
			[Address(RVA = "0xB6B51C", Offset = "0xB6B51C", VA = "0xB6B51C")]
			public void Initiate(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x6000942")]
			[Address(RVA = "0xB6BBF8", Offset = "0xB6BBF8", VA = "0xB6BBF8")]
			public void OnPreSolve(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x6000943")]
			[Address(RVA = "0xB6D604", Offset = "0xB6D604", VA = "0xB6D604")]
			public void Solve(IKSolverFullBody solver)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001A5")]
		public enum Smoothing
		{
			[Token(Token = "0x40008DB")]
			None,
			[Token(Token = "0x40008DC")]
			Exponential,
			[Token(Token = "0x40008DD")]
			Cubic
		}

		[Token(Token = "0x40008B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Range(0f, 1f)]
		public float pin;

		[Token(Token = "0x40008BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		[Range(0f, 1f)]
		public float pull;

		[Token(Token = "0x40008BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float push;

		[Token(Token = "0x40008BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(-1f, 1f)]
		public float pushParent;

		[Token(Token = "0x40008BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float reach;

		[Token(Token = "0x40008BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Smoothing reachSmoothing;

		[Token(Token = "0x40008BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Smoothing pushSmoothing;

		[Token(Token = "0x40008C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IKSolver.Node[] nodes;

		[Token(Token = "0x40008C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int[] children;

		[Token(Token = "0x40008C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ChildConstraint[] childConstraints;

		[Token(Token = "0x40008C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public IKConstraintBend bendConstraint;

		[Token(Token = "0x40008C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float rootLength;

		[Token(Token = "0x40008C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool initiated;

		[Token(Token = "0x40008C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float length;

		[Token(Token = "0x40008C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float distance;

		[Token(Token = "0x40008C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private IKSolver.Point p;

		[Token(Token = "0x40008C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float reachForce;

		[Token(Token = "0x40008CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float pullParentSum;

		[Token(Token = "0x40008CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float[] crossFades;

		[Token(Token = "0x40008CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float sqrMag1;

		[Token(Token = "0x40008CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float sqrMag2;

		[Token(Token = "0x40008CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float sqrMagDif;

		[Token(Token = "0x40008CF")]
		private const float maxLimbLength = 0.99999f;

		[Token(Token = "0x6000928")]
		[Address(RVA = "0xB6A794", Offset = "0xB6A794", VA = "0xB6A794")]
		public FBIKChain()
		{
		}

		[Token(Token = "0x6000929")]
		[Address(RVA = "0xB6A92C", Offset = "0xB6A92C", VA = "0xB6A92C")]
		public FBIKChain(float pin, float pull, params Transform[] nodeTransforms)
		{
		}

		[Token(Token = "0x600092A")]
		[Address(RVA = "0xB6AA9C", Offset = "0xB6AA9C", VA = "0xB6AA9C")]
		public void SetNodes(params Transform[] boneTransforms)
		{
		}

		[Token(Token = "0x600092B")]
		[Address(RVA = "0xB6AC00", Offset = "0xB6AC00", VA = "0xB6AC00")]
		public int GetNodeIndex(Transform boneTransform)
		{
			return default(int);
		}

		[Token(Token = "0x600092C")]
		[Address(RVA = "0xB6ACBC", Offset = "0xB6ACBC", VA = "0xB6ACBC")]
		public bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600092D")]
		[Address(RVA = "0xB6ADD8", Offset = "0xB6ADD8", VA = "0xB6ADD8")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600092E")]
		[Address(RVA = "0xB6B814", Offset = "0xB6B814", VA = "0xB6B814")]
		public void ReadPose(IKSolverFullBody solver, bool fullBody)
		{
		}

		[Token(Token = "0x600092F")]
		[Address(RVA = "0xB6AF54", Offset = "0xB6AF54", VA = "0xB6AF54")]
		private void CalculateBoneLengths(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000930")]
		[Address(RVA = "0xB6BDDC", Offset = "0xB6BDDC", VA = "0xB6BDDC")]
		public void Reach(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000931")]
		[Address(RVA = "0xB6C070", Offset = "0xB6C070", VA = "0xB6C070")]
		public Vector3 Push(IKSolverFullBody solver)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000932")]
		[Address(RVA = "0xB6C340", Offset = "0xB6C340", VA = "0xB6C340")]
		public void SolveTrigonometric(IKSolverFullBody solver, bool calculateBendDirection = false)
		{
		}

		[Token(Token = "0x6000933")]
		[Address(RVA = "0xB6CD08", Offset = "0xB6CD08", VA = "0xB6CD08")]
		public void Stage1(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000934")]
		[Address(RVA = "0xB6D200", Offset = "0xB6D200", VA = "0xB6D200")]
		public void Stage2(IKSolverFullBody solver, Vector3 position)
		{
		}

		[Token(Token = "0x6000935")]
		[Address(RVA = "0xB6D400", Offset = "0xB6D400", VA = "0xB6D400")]
		public void SolveConstraintSystems(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000936")]
		[Address(RVA = "0xB6D0EC", Offset = "0xB6D0EC", VA = "0xB6D0EC")]
		private Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000937")]
		[Address(RVA = "0xB6CBA8", Offset = "0xB6CBA8", VA = "0xB6CBA8")]
		protected Vector3 GetDirToBendPoint(Vector3 direction, Vector3 bendDirection, float directionMagnitude)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000938")]
		[Address(RVA = "0xB6D088", Offset = "0xB6D088", VA = "0xB6D088")]
		private void SolveChildConstraints(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000939")]
		[Address(RVA = "0xB6D4DC", Offset = "0xB6D4DC", VA = "0xB6D4DC")]
		private void SolveLinearConstraint(IKSolver.Node node1, IKSolver.Node node2, float crossFade, float distance)
		{
		}

		[Token(Token = "0x600093A")]
		[Address(RVA = "0xB6CFB4", Offset = "0xB6CFB4", VA = "0xB6CFB4")]
		public void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x600093B")]
		[Address(RVA = "0xB6D304", Offset = "0xB6D304", VA = "0xB6D304")]
		private void BackwardReach(Vector3 position)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001A6")]
	public class IKConstraintBend
	{
		[Token(Token = "0x40008DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone1;

		[Token(Token = "0x40008DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform bone2;

		[Token(Token = "0x40008E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform bone3;

		[Token(Token = "0x40008E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform bendGoal;

		[Token(Token = "0x40008E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 direction;

		[Token(Token = "0x40008E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Quaternion rotationOffset;

		[Token(Token = "0x40008E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x40008E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3 defaultLocalDirection;

		[Token(Token = "0x40008E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Vector3 defaultChildDirection;

		[NonSerialized]
		[Token(Token = "0x40008E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float clampF;

		[Token(Token = "0x40008E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int chainIndex1;

		[Token(Token = "0x40008E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int nodeIndex1;

		[Token(Token = "0x40008EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int chainIndex2;

		[Token(Token = "0x40008EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int nodeIndex2;

		[Token(Token = "0x40008EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int chainIndex3;

		[Token(Token = "0x40008ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int nodeIndex3;

		[Token(Token = "0x17000098")]
		public bool initiated
		{
			[Token(Token = "0x6000945")]
			[Address(RVA = "0xB6DA98", Offset = "0xB6DA98", VA = "0xB6DA98")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000946")]
			[Address(RVA = "0xB6DAA0", Offset = "0xB6DAA0", VA = "0xB6DAA0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000944")]
		[Address(RVA = "0xB6D8C0", Offset = "0xB6D8C0", VA = "0xB6D8C0")]
		public bool IsValid(IKSolverFullBody solver, Warning.Logger logger)
		{
			return default(bool);
		}

		[Token(Token = "0x6000947")]
		[Address(RVA = "0xB6A8C0", Offset = "0xB6A8C0", VA = "0xB6A8C0")]
		public IKConstraintBend()
		{
		}

		[Token(Token = "0x6000948")]
		[Address(RVA = "0xB6DAAC", Offset = "0xB6DAAC", VA = "0xB6DAAC")]
		public IKConstraintBend(Transform bone1, Transform bone2, Transform bone3)
		{
		}

		[Token(Token = "0x6000949")]
		[Address(RVA = "0xB6B570", Offset = "0xB6B570", VA = "0xB6B570")]
		public void SetBones(Transform bone1, Transform bone2, Transform bone3)
		{
		}

		[Token(Token = "0x600094A")]
		[Address(RVA = "0xB6B5B4", Offset = "0xB6B5B4", VA = "0xB6B5B4")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600094B")]
		[Address(RVA = "0xB6DC88", Offset = "0xB6DC88", VA = "0xB6DC88")]
		public void SetLimbOrientation(Vector3 upper, Vector3 lower, Vector3 last)
		{
		}

		[Token(Token = "0x600094C")]
		[Address(RVA = "0xB6DFD4", Offset = "0xB6DFD4", VA = "0xB6DFD4")]
		public void LimitBend(float solverWeight, float positionWeight)
		{
		}

		[Token(Token = "0x600094D")]
		[Address(RVA = "0xB6C578", Offset = "0xB6C578", VA = "0xB6C578")]
		public Vector3 GetDir(IKSolverFullBody solver)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600094E")]
		[Address(RVA = "0xB6DB40", Offset = "0xB6DB40", VA = "0xB6DB40")]
		private Vector3 OrthoToLimb(IKSolverFullBody solver, Vector3 tangent)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600094F")]
		[Address(RVA = "0xB6DBE4", Offset = "0xB6DBE4", VA = "0xB6DBE4")]
		private Vector3 OrthoToBone1(IKSolverFullBody solver, Vector3 tangent)
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x20001A7")]
	public class IKEffector
	{
		[Token(Token = "0x40008EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone;

		[Token(Token = "0x40008F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x40008F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float positionWeight;

		[Token(Token = "0x40008F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 1f)]
		public float rotationWeight;

		[Token(Token = "0x40008F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 position;

		[Token(Token = "0x40008F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Quaternion rotation;

		[Token(Token = "0x40008F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 positionOffset;

		[Token(Token = "0x40008F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool effectChildNodes;

		[Token(Token = "0x40008F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Range(0f, 1f)]
		public float maintainRelativePositionWeight;

		[Token(Token = "0x40008F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform[] childBones;

		[Token(Token = "0x40008FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform planeBone1;

		[Token(Token = "0x40008FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform planeBone2;

		[Token(Token = "0x40008FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform planeBone3;

		[Token(Token = "0x40008FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Quaternion planeRotationOffset;

		[Token(Token = "0x40008FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float posW;

		[Token(Token = "0x40008FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float rotW;

		[Token(Token = "0x4000900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3[] localPositions;

		[Token(Token = "0x4000901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool usePlaneNodes;

		[Token(Token = "0x4000902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Quaternion animatedPlaneRotation;

		[Token(Token = "0x4000903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Vector3 animatedPosition;

		[Token(Token = "0x4000904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool firstUpdate;

		[Token(Token = "0x4000905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int chainIndex;

		[Token(Token = "0x4000906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private int nodeIndex;

		[Token(Token = "0x4000907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private int plane1ChainIndex;

		[Token(Token = "0x4000908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private int plane1NodeIndex;

		[Token(Token = "0x4000909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private int plane2ChainIndex;

		[Token(Token = "0x400090A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private int plane2NodeIndex;

		[Token(Token = "0x400090B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private int plane3ChainIndex;

		[Token(Token = "0x400090C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private int plane3NodeIndex;

		[Token(Token = "0x400090D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private int[] childChainIndexes;

		[Token(Token = "0x400090E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private int[] childNodeIndexes;

		[Token(Token = "0x17000099")]
		public bool isEndEffector
		{
			[Token(Token = "0x6000951")]
			[Address(RVA = "0xB6E39C", Offset = "0xB6E39C", VA = "0xB6E39C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000952")]
			[Address(RVA = "0xB6E3A4", Offset = "0xB6E3A4", VA = "0xB6E3A4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000950")]
		[Address(RVA = "0xB6A0B4", Offset = "0xB6A0B4", VA = "0xB6A0B4")]
		public IKSolver.Node GetNode(IKSolverFullBody solver)
		{
			return null;
		}

		[Token(Token = "0x6000953")]
		[Address(RVA = "0xB6E3B0", Offset = "0xB6E3B0", VA = "0xB6E3B0")]
		public void PinToBone(float positionWeight, float rotationWeight)
		{
		}

		[Token(Token = "0x6000954")]
		[Address(RVA = "0xB6E434", Offset = "0xB6E434", VA = "0xB6E434")]
		public IKEffector()
		{
		}

		[Token(Token = "0x6000955")]
		[Address(RVA = "0xB6E604", Offset = "0xB6E604", VA = "0xB6E604")]
		public IKEffector(Transform bone, Transform[] childBones)
		{
		}

		[Token(Token = "0x6000956")]
		[Address(RVA = "0xB6E810", Offset = "0xB6E810", VA = "0xB6E810")]
		public bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000957")]
		[Address(RVA = "0xB6EB18", Offset = "0xB6EB18", VA = "0xB6EB18")]
		public void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000958")]
		[Address(RVA = "0xB6EDF0", Offset = "0xB6EDF0", VA = "0xB6EDF0")]
		public void ResetOffset(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000959")]
		[Address(RVA = "0xB6EF10", Offset = "0xB6EF10", VA = "0xB6EF10")]
		public void SetToTarget()
		{
		}

		[Token(Token = "0x600095A")]
		[Address(RVA = "0xB6EFAC", Offset = "0xB6EFAC", VA = "0xB6EFAC")]
		public void OnPreSolve(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600095B")]
		[Address(RVA = "0xB6F660", Offset = "0xB6F660", VA = "0xB6F660")]
		public void OnPostWrite()
		{
		}

		[Token(Token = "0x600095C")]
		[Address(RVA = "0xB6F6B8", Offset = "0xB6F6B8", VA = "0xB6F6B8")]
		private Quaternion GetPlaneRotation(IKSolverFullBody solver)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x600095D")]
		[Address(RVA = "0xB6F88C", Offset = "0xB6F88C", VA = "0xB6F88C")]
		public void Update(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600095E")]
		[Address(RVA = "0xB6FAE8", Offset = "0xB6FAE8", VA = "0xB6FAE8")]
		private Vector3 GetPosition(IKSolverFullBody solver, out Quaternion planeRotationOffset)
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x20001A8")]
	public class IKMapping
	{
		[Serializable]
		[Token(Token = "0x20001A9")]
		public class BoneMap
		{
			[Token(Token = "0x400090F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x4000910")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int chainIndex;

			[Token(Token = "0x4000911")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public int nodeIndex;

			[Token(Token = "0x4000912")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 defaultLocalPosition;

			[Token(Token = "0x4000913")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Quaternion defaultLocalRotation;

			[Token(Token = "0x4000914")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector3 localSwingAxis;

			[Token(Token = "0x4000915")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Vector3 localTwistAxis;

			[Token(Token = "0x4000916")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public Vector3 planePosition;

			[Token(Token = "0x4000917")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 ikPosition;

			[Token(Token = "0x4000918")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public Quaternion defaultLocalTargetRotation;

			[Token(Token = "0x4000919")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			private Quaternion maintainRotation;

			[Token(Token = "0x400091A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			public float length;

			[Token(Token = "0x400091B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public Quaternion animatedRotation;

			[Token(Token = "0x400091C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private Transform planeBone1;

			[Token(Token = "0x400091D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			private Transform planeBone2;

			[Token(Token = "0x400091E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private Transform planeBone3;

			[Token(Token = "0x400091F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			private int plane1ChainIndex;

			[Token(Token = "0x4000920")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
			private int plane1NodeIndex;

			[Token(Token = "0x4000921")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			private int plane2ChainIndex;

			[Token(Token = "0x4000922")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
			private int plane2NodeIndex;

			[Token(Token = "0x4000923")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			private int plane3ChainIndex;

			[Token(Token = "0x4000924")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
			private int plane3NodeIndex;

			[Token(Token = "0x1700009A")]
			public Vector3 swingDirection
			{
				[Token(Token = "0x6000965")]
				[Address(RVA = "0xB70058", Offset = "0xB70058", VA = "0xB70058")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x1700009B")]
			public bool isNodeBone
			{
				[Token(Token = "0x6000968")]
				[Address(RVA = "0xB70110", Offset = "0xB70110", VA = "0xB70110")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x1700009C")]
			private Quaternion lastAnimatedTargetRotation
			{
				[Token(Token = "0x600097C")]
				[Address(RVA = "0xB704FC", Offset = "0xB704FC", VA = "0xB704FC")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x6000964")]
			[Address(RVA = "0xB70014", Offset = "0xB70014", VA = "0xB70014")]
			public void Initiate(Transform transform, IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x6000966")]
			[Address(RVA = "0xB70088", Offset = "0xB70088", VA = "0xB70088")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x6000967")]
			[Address(RVA = "0xB700CC", Offset = "0xB700CC", VA = "0xB700CC")]
			public void FixTransform(bool position)
			{
			}

			[Token(Token = "0x6000969")]
			[Address(RVA = "0xB70120", Offset = "0xB70120", VA = "0xB70120")]
			public void SetLength(BoneMap nextBone)
			{
			}

			[Token(Token = "0x600096A")]
			[Address(RVA = "0xB701F4", Offset = "0xB701F4", VA = "0xB701F4")]
			public void SetLocalSwingAxis(BoneMap swingTarget)
			{
			}

			[Token(Token = "0x600096B")]
			[Address(RVA = "0xB701FC", Offset = "0xB701FC", VA = "0xB701FC")]
			public void SetLocalSwingAxis(BoneMap bone1, BoneMap bone2)
			{
			}

			[Token(Token = "0x600096C")]
			[Address(RVA = "0xB702C8", Offset = "0xB702C8", VA = "0xB702C8")]
			public void SetLocalTwistAxis(Vector3 twistDirection, Vector3 normalDirection)
			{
			}

			[Token(Token = "0x600096D")]
			[Address(RVA = "0xB70334", Offset = "0xB70334", VA = "0xB70334")]
			public void SetPlane(IKSolverFullBody solver, Transform planeBone1, Transform planeBone2, Transform planeBone3)
			{
			}

			[Token(Token = "0x600096E")]
			[Address(RVA = "0xB703EC", Offset = "0xB703EC", VA = "0xB703EC")]
			public void UpdatePlane(bool rotation, bool position)
			{
			}

			[Token(Token = "0x600096F")]
			[Address(RVA = "0xB70664", Offset = "0xB70664", VA = "0xB70664")]
			public void SetIKPosition()
			{
			}

			[Token(Token = "0x6000970")]
			[Address(RVA = "0xB70690", Offset = "0xB70690", VA = "0xB70690")]
			public void MaintainRotation()
			{
			}

			[Token(Token = "0x6000971")]
			[Address(RVA = "0xB706BC", Offset = "0xB706BC", VA = "0xB706BC")]
			public void SetToIKPosition()
			{
			}

			[Token(Token = "0x6000972")]
			[Address(RVA = "0xB706E4", Offset = "0xB706E4", VA = "0xB706E4")]
			public void FixToNode(IKSolverFullBody solver, float weight, [Optional] IKSolver.Node fixNode)
			{
			}

			[Token(Token = "0x6000973")]
			[Address(RVA = "0xB707A8", Offset = "0xB707A8", VA = "0xB707A8")]
			public Vector3 GetPlanePosition(IKSolverFullBody solver)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000974")]
			[Address(RVA = "0xB7093C", Offset = "0xB7093C", VA = "0xB7093C")]
			public void PositionToPlane(IKSolverFullBody solver)
			{
			}

			[Token(Token = "0x6000975")]
			[Address(RVA = "0xB70960", Offset = "0xB70960", VA = "0xB70960")]
			public void RotateToPlane(IKSolverFullBody solver, float weight)
			{
			}

			[Token(Token = "0x6000976")]
			[Address(RVA = "0xB70A80", Offset = "0xB70A80", VA = "0xB70A80")]
			public void Swing(Vector3 swingTarget, float weight)
			{
			}

			[Token(Token = "0x6000977")]
			[Address(RVA = "0xB70AE4", Offset = "0xB70AE4", VA = "0xB70AE4")]
			public void Swing(Vector3 pos1, Vector3 pos2, float weight)
			{
			}

			[Token(Token = "0x6000978")]
			[Address(RVA = "0xB70C64", Offset = "0xB70C64", VA = "0xB70C64")]
			public void Twist(Vector3 twistDirection, Vector3 normalDirection, float weight)
			{
			}

			[Token(Token = "0x6000979")]
			[Address(RVA = "0xB70DE4", Offset = "0xB70DE4", VA = "0xB70DE4")]
			public void RotateToMaintain(float weight)
			{
			}

			[Token(Token = "0x600097A")]
			[Address(RVA = "0xB70E60", Offset = "0xB70E60", VA = "0xB70E60")]
			public void RotateToEffector(IKSolverFullBody solver, float weight)
			{
			}

			[Token(Token = "0x600097B")]
			[Address(RVA = "0xB70820", Offset = "0xB70820", VA = "0xB70820")]
			private Quaternion GetTargetRotation(IKSolverFullBody solver)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x600097D")]
			[Address(RVA = "0xB70F88", Offset = "0xB70F88", VA = "0xB70F88")]
			public BoneMap()
			{
			}
		}

		[Token(Token = "0x600095F")]
		[Address(RVA = "0xB6FDA4", Offset = "0xB6FDA4", VA = "0xB6FDA4", Slot = "4")]
		public virtual bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000960")]
		[Address(RVA = "0xB6FDAC", Offset = "0xB6FDAC", VA = "0xB6FDAC", Slot = "5")]
		public virtual void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000961")]
		[Address(RVA = "0xB6FDB0", Offset = "0xB6FDB0", VA = "0xB6FDB0")]
		protected bool BoneIsValid(Transform bone, IKSolver solver, ref string message, [Optional] Warning.Logger logger)
		{
			return default(bool);
		}

		[Token(Token = "0x6000962")]
		[Address(RVA = "0xB6FEF8", Offset = "0xB6FEF8", VA = "0xB6FEF8")]
		protected Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000963")]
		[Address(RVA = "0xB7000C", Offset = "0xB7000C", VA = "0xB7000C")]
		public IKMapping()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001AA")]
	public class IKMappingBone : IKMapping
	{
		[Token(Token = "0x4000925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform bone;

		[Token(Token = "0x4000926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float maintainRotationWeight;

		[Token(Token = "0x4000927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private BoneMap boneMap;

		[Token(Token = "0x600097E")]
		[Address(RVA = "0xB70FA4", Offset = "0xB70FA4", VA = "0xB70FA4", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x600097F")]
		[Address(RVA = "0xB7104C", Offset = "0xB7104C", VA = "0xB7104C")]
		public IKMappingBone()
		{
		}

		[Token(Token = "0x6000980")]
		[Address(RVA = "0xB710DC", Offset = "0xB710DC", VA = "0xB710DC")]
		public IKMappingBone(Transform bone)
		{
		}

		[Token(Token = "0x6000981")]
		[Address(RVA = "0xB71188", Offset = "0xB71188", VA = "0xB71188")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000982")]
		[Address(RVA = "0xB711A0", Offset = "0xB711A0", VA = "0xB711A0")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x6000983")]
		[Address(RVA = "0xB711BC", Offset = "0xB711BC", VA = "0xB711BC", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000984")]
		[Address(RVA = "0xB71264", Offset = "0xB71264", VA = "0xB71264")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x6000985")]
		[Address(RVA = "0xB7127C", Offset = "0xB7127C", VA = "0xB7127C")]
		public void WritePose(float solverWeight)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001AB")]
	public class IKMappingLimb : IKMapping
	{
		[Serializable]
		[Token(Token = "0x20001AC")]
		public enum BoneMapType
		{
			[Token(Token = "0x4000933")]
			Parent,
			[Token(Token = "0x4000934")]
			Bone1,
			[Token(Token = "0x4000935")]
			Bone2,
			[Token(Token = "0x4000936")]
			Bone3
		}

		[Token(Token = "0x4000928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform parentBone;

		[Token(Token = "0x4000929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform bone1;

		[Token(Token = "0x400092A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform bone2;

		[Token(Token = "0x400092B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform bone3;

		[Token(Token = "0x400092C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 1f)]
		public float maintainRotationWeight;

		[Token(Token = "0x400092D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x400092E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private BoneMap boneMapParent;

		[Token(Token = "0x400092F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private BoneMap boneMap1;

		[Token(Token = "0x4000930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private BoneMap boneMap2;

		[Token(Token = "0x4000931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BoneMap boneMap3;

		[Token(Token = "0x6000986")]
		[Address(RVA = "0xB712A0", Offset = "0xB712A0", VA = "0xB712A0", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000987")]
		[Address(RVA = "0xB71314", Offset = "0xB71314", VA = "0xB71314")]
		public BoneMap GetBoneMap(BoneMapType boneMap)
		{
			return null;
		}

		[Token(Token = "0x6000988")]
		[Address(RVA = "0xB713DC", Offset = "0xB713DC", VA = "0xB713DC")]
		public void SetLimbOrientation(Vector3 upper, Vector3 lower)
		{
		}

		[Token(Token = "0x6000989")]
		[Address(RVA = "0xB71694", Offset = "0xB71694", VA = "0xB71694")]
		public IKMappingLimb()
		{
		}

		[Token(Token = "0x600098A")]
		[Address(RVA = "0xB717D8", Offset = "0xB717D8", VA = "0xB717D8")]
		public IKMappingLimb(Transform bone1, Transform bone2, Transform bone3, [Optional] Transform parentBone)
		{
		}

		[Token(Token = "0x600098B")]
		[Address(RVA = "0xB71954", Offset = "0xB71954", VA = "0xB71954")]
		public void SetBones(Transform bone1, Transform bone2, Transform bone3, [Optional] Transform parentBone)
		{
		}

		[Token(Token = "0x600098C")]
		[Address(RVA = "0xB719B4", Offset = "0xB719B4", VA = "0xB719B4")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x600098D")]
		[Address(RVA = "0xB71A4C", Offset = "0xB71A4C", VA = "0xB71A4C")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x600098E")]
		[Address(RVA = "0xB71AF4", Offset = "0xB71AF4", VA = "0xB71AF4", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600098F")]
		[Address(RVA = "0xB71DA8", Offset = "0xB71DA8", VA = "0xB71DA8")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x6000990")]
		[Address(RVA = "0xB71E08", Offset = "0xB71E08", VA = "0xB71E08")]
		public void WritePose(IKSolverFullBody solver, bool fullBody)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001AD")]
	public class IKMappingSpine : IKMapping
	{
		[Token(Token = "0x4000937")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform[] spineBones;

		[Token(Token = "0x4000938")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform leftUpperArmBone;

		[Token(Token = "0x4000939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform rightUpperArmBone;

		[Token(Token = "0x400093A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftThighBone;

		[Token(Token = "0x400093B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform rightThighBone;

		[Token(Token = "0x400093C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(1f, 3f)]
		public int iterations;

		[Token(Token = "0x400093D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 1f)]
		public float twistWeight;

		[Token(Token = "0x400093E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int rootNodeIndex;

		[Token(Token = "0x400093F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private BoneMap[] spine;

		[Token(Token = "0x4000940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private BoneMap leftUpperArm;

		[Token(Token = "0x4000941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private BoneMap rightUpperArm;

		[Token(Token = "0x4000942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private BoneMap leftThigh;

		[Token(Token = "0x4000943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private BoneMap rightThigh;

		[Token(Token = "0x4000944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool useFABRIK;

		[Token(Token = "0x6000991")]
		[Address(RVA = "0xB71F50", Offset = "0xB71F50", VA = "0xB71F50", Slot = "4")]
		public override bool IsValid(IKSolver solver, ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000992")]
		[Address(RVA = "0xB7227C", Offset = "0xB7227C", VA = "0xB7227C")]
		public IKMappingSpine()
		{
		}

		[Token(Token = "0x6000993")]
		[Address(RVA = "0xB723F4", Offset = "0xB723F4", VA = "0xB723F4")]
		public IKMappingSpine(Transform[] spineBones, Transform leftUpperArmBone, Transform rightUpperArmBone, Transform leftThighBone, Transform rightThighBone)
		{
		}

		[Token(Token = "0x6000994")]
		[Address(RVA = "0xB725AC", Offset = "0xB725AC", VA = "0xB725AC")]
		public void SetBones(Transform[] spineBones, Transform leftUpperArmBone, Transform rightUpperArmBone, Transform leftThighBone, Transform rightThighBone)
		{
		}

		[Token(Token = "0x6000995")]
		[Address(RVA = "0xB72620", Offset = "0xB72620", VA = "0xB72620")]
		public void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000996")]
		[Address(RVA = "0xB7267C", Offset = "0xB7267C", VA = "0xB7267C")]
		public void FixTransforms()
		{
		}

		[Token(Token = "0x6000997")]
		[Address(RVA = "0xB726F4", Offset = "0xB726F4", VA = "0xB726F4", Slot = "5")]
		public override void Initiate(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x6000998")]
		[Address(RVA = "0xB72D6C", Offset = "0xB72D6C", VA = "0xB72D6C")]
		private bool UseFABRIK()
		{
			return default(bool);
		}

		[Token(Token = "0x6000999")]
		[Address(RVA = "0xB72DA4", Offset = "0xB72DA4", VA = "0xB72DA4")]
		public void ReadPose()
		{
		}

		[Token(Token = "0x600099A")]
		[Address(RVA = "0xB73008", Offset = "0xB73008", VA = "0xB73008")]
		public void WritePose(IKSolverFullBody solver)
		{
		}

		[Token(Token = "0x600099B")]
		[Address(RVA = "0xB73330", Offset = "0xB73330", VA = "0xB73330")]
		public void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x600099C")]
		[Address(RVA = "0xB73410", Offset = "0xB73410", VA = "0xB73410")]
		private void BackwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x600099D")]
		[Address(RVA = "0xB734C4", Offset = "0xB734C4", VA = "0xB734C4")]
		private void MapToSolverPositions(IKSolverFullBody solver)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001AE")]
	public abstract class IKSolver
	{
		[Serializable]
		[Token(Token = "0x20001AF")]
		public class Point
		{
			[Token(Token = "0x400094E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform transform;

			[Token(Token = "0x400094F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Range(0f, 1f)]
			public float weight;

			[Token(Token = "0x4000950")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 solverPosition;

			[Token(Token = "0x4000951")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Quaternion solverRotation;

			[Token(Token = "0x4000952")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Vector3 defaultLocalPosition;

			[Token(Token = "0x4000953")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public Quaternion defaultLocalRotation;

			[Token(Token = "0x60009B4")]
			[Address(RVA = "0xB73BB4", Offset = "0xB73BB4", VA = "0xB73BB4")]
			public void StoreDefaultLocalState()
			{
			}

			[Token(Token = "0x60009B5")]
			[Address(RVA = "0xB73BF8", Offset = "0xB73BF8", VA = "0xB73BF8")]
			public void FixTransform()
			{
			}

			[Token(Token = "0x60009B6")]
			[Address(RVA = "0xB73CD8", Offset = "0xB73CD8", VA = "0xB73CD8")]
			public void UpdateSolverPosition()
			{
			}

			[Token(Token = "0x60009B7")]
			[Address(RVA = "0xB73D04", Offset = "0xB73D04", VA = "0xB73D04")]
			public void UpdateSolverLocalPosition()
			{
			}

			[Token(Token = "0x60009B8")]
			[Address(RVA = "0xB73D30", Offset = "0xB73D30", VA = "0xB73D30")]
			public void UpdateSolverState()
			{
			}

			[Token(Token = "0x60009B9")]
			[Address(RVA = "0xB73D74", Offset = "0xB73D74", VA = "0xB73D74")]
			public void UpdateSolverLocalState()
			{
			}

			[Token(Token = "0x60009BA")]
			[Address(RVA = "0xB73DB8", Offset = "0xB73DB8", VA = "0xB73DB8")]
			public Point()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001B0")]
		public class Bone : Point
		{
			[Token(Token = "0x4000954")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public float length;

			[Token(Token = "0x4000955")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float sqrMag;

			[Token(Token = "0x4000956")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Vector3 axis;

			[Token(Token = "0x4000957")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private RotationLimit _rotationLimit;

			[Token(Token = "0x4000958")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private bool isLimited;

			[Token(Token = "0x1700009E")]
			public RotationLimit rotationLimit
			{
				[Token(Token = "0x60009BB")]
				[Address(RVA = "0xB73E18", Offset = "0xB73E18", VA = "0xB73E18")]
				get
				{
					return null;
				}
				[Token(Token = "0x60009BC")]
				[Address(RVA = "0xB73F08", Offset = "0xB73F08", VA = "0xB73F08")]
				set
				{
				}
			}

			[Token(Token = "0x60009BD")]
			[Address(RVA = "0xB73F8C", Offset = "0xB73F8C", VA = "0xB73F8C")]
			public void Swing(Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x60009BE")]
			[Address(RVA = "0xB741F8", Offset = "0xB741F8", VA = "0xB741F8")]
			public static void SolverSwing(Bone[] bones, int index, Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x60009BF")]
			[Address(RVA = "0xB744B4", Offset = "0xB744B4", VA = "0xB744B4")]
			public void Swing2D(Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x60009C0")]
			[Address(RVA = "0xB746A8", Offset = "0xB746A8", VA = "0xB746A8")]
			public void SetToSolverPosition()
			{
			}

			[Token(Token = "0x60009C1")]
			[Address(RVA = "0xB746D0", Offset = "0xB746D0", VA = "0xB746D0")]
			public Bone()
			{
			}

			[Token(Token = "0x60009C2")]
			[Address(RVA = "0xB7473C", Offset = "0xB7473C", VA = "0xB7473C")]
			public Bone(Transform transform)
			{
			}

			[Token(Token = "0x60009C3")]
			[Address(RVA = "0xB747BC", Offset = "0xB747BC", VA = "0xB747BC")]
			public Bone(Transform transform, float weight)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001B1")]
		public class Node : Point
		{
			[Token(Token = "0x4000959")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public float length;

			[Token(Token = "0x400095A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float effectorPositionWeight;

			[Token(Token = "0x400095B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public float effectorRotationWeight;

			[Token(Token = "0x400095C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 offset;

			[Token(Token = "0x60009C4")]
			[Address(RVA = "0xB74850", Offset = "0xB74850", VA = "0xB74850")]
			public Node()
			{
			}

			[Token(Token = "0x60009C5")]
			[Address(RVA = "0xB6ABD4", Offset = "0xB6ABD4", VA = "0xB6ABD4")]
			public Node(Transform transform)
			{
			}

			[Token(Token = "0x60009C6")]
			[Address(RVA = "0xB74854", Offset = "0xB74854", VA = "0xB74854")]
			public Node(Transform transform, float weight)
			{
			}
		}

		[Token(Token = "0x20001B2")]
		public delegate void UpdateDelegate();

		[Token(Token = "0x20001B3")]
		public delegate void IterationDelegate(int i);

		[Token(Token = "0x4000945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[HideInInspector]
		public Vector3 IKPosition;

		[Token(Token = "0x4000946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The positional or the master weight of the solver.")]
		[Range(0f, 1f)]
		public float IKPositionWeight;

		[Token(Token = "0x4000948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UpdateDelegate OnPreInitiate;

		[Token(Token = "0x4000949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UpdateDelegate OnPostInitiate;

		[Token(Token = "0x400094A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UpdateDelegate OnPreUpdate;

		[Token(Token = "0x400094B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UpdateDelegate OnPostUpdate;

		[Token(Token = "0x400094C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected bool firstInitiation;

		[Token(Token = "0x400094D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[HideInInspector]
		protected Transform root;

		[Token(Token = "0x1700009D")]
		public bool initiated
		{
			[Token(Token = "0x60009A7")]
			[Address(RVA = "0xB737C0", Offset = "0xB737C0", VA = "0xB737C0")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60009A8")]
			[Address(RVA = "0xB737C8", Offset = "0xB737C8", VA = "0xB737C8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600099E")]
		[Address(RVA = "0xB73708", Offset = "0xB73708", VA = "0xB73708")]
		public bool IsValid()
		{
			return default(bool);
		}

		[Token(Token = "0x600099F")]
		public abstract bool IsValid(ref string message);

		[Token(Token = "0x60009A0")]
		[Address(RVA = "0xB6490C", Offset = "0xB6490C", VA = "0xB6490C")]
		public void Initiate(Transform root)
		{
		}

		[Token(Token = "0x60009A1")]
		[Address(RVA = "0xB64830", Offset = "0xB64830", VA = "0xB64830")]
		public void Update()
		{
		}

		[Token(Token = "0x60009A2")]
		[Address(RVA = "0xB7377C", Offset = "0xB7377C", VA = "0xB7377C", Slot = "5")]
		public virtual Vector3 GetIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009A3")]
		[Address(RVA = "0xB73788", Offset = "0xB73788", VA = "0xB73788")]
		public void SetIKPosition(Vector3 position)
		{
		}

		[Token(Token = "0x60009A4")]
		[Address(RVA = "0xB73794", Offset = "0xB73794", VA = "0xB73794")]
		public float GetIKPositionWeight()
		{
			return default(float);
		}

		[Token(Token = "0x60009A5")]
		[Address(RVA = "0xB7379C", Offset = "0xB7379C", VA = "0xB7379C")]
		public void SetIKPositionWeight(float weight)
		{
		}

		[Token(Token = "0x60009A6")]
		[Address(RVA = "0xB737B8", Offset = "0xB737B8", VA = "0xB737B8")]
		public Transform GetRoot()
		{
			return null;
		}

		[Token(Token = "0x60009A9")]
		public abstract Point[] GetPoints();

		[Token(Token = "0x60009AA")]
		public abstract Point GetPoint(Transform transform);

		[Token(Token = "0x60009AB")]
		public abstract void FixTransforms();

		[Token(Token = "0x60009AC")]
		public abstract void StoreDefaultLocalState();

		[Token(Token = "0x60009AD")]
		protected abstract void OnInitiate();

		[Token(Token = "0x60009AE")]
		protected abstract void OnUpdate();

		[Token(Token = "0x60009AF")]
		[Address(RVA = "0xB737D4", Offset = "0xB737D4", VA = "0xB737D4")]
		protected void LogWarning(string message)
		{
		}

		[Token(Token = "0x60009B0")]
		[Address(RVA = "0xB737EC", Offset = "0xB737EC", VA = "0xB737EC")]
		public static Transform ContainsDuplicateBone(Bone[] bones)
		{
			return null;
		}

		[Token(Token = "0x60009B1")]
		[Address(RVA = "0xB73910", Offset = "0xB73910", VA = "0xB73910")]
		public static bool HierarchyIsValid(Bone[] bones)
		{
			return default(bool);
		}

		[Token(Token = "0x60009B2")]
		[Address(RVA = "0xB739A8", Offset = "0xB739A8", VA = "0xB739A8")]
		protected static float PreSolveBones(ref Bone[] bones)
		{
			return default(float);
		}

		[Token(Token = "0x60009B3")]
		[Address(RVA = "0xB73B9C", Offset = "0xB73B9C", VA = "0xB73B9C")]
		protected IKSolver()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001B4")]
	public class IKSolverAim : IKSolverHeuristic
	{
		[Token(Token = "0x400095D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform transform;

		[Token(Token = "0x400095E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Vector3 axis;

		[Token(Token = "0x400095F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public Vector3 poleAxis;

		[Token(Token = "0x4000960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Vector3 polePosition;

		[Token(Token = "0x4000961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Range(0f, 1f)]
		public float poleWeight;

		[Token(Token = "0x4000962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Transform poleTarget;

		[Token(Token = "0x4000963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Range(0f, 1f)]
		public float clampWeight;

		[Token(Token = "0x4000964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Range(0f, 2f)]
		public int clampSmoothing;

		[Token(Token = "0x4000965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x4000966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float step;

		[Token(Token = "0x4000967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Vector3 clampedIKPosition;

		[Token(Token = "0x4000968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private RotationLimit transformLimit;

		[Token(Token = "0x4000969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Transform lastTransform;

		[Token(Token = "0x1700009F")]
		public Vector3 transformAxis
		{
			[Token(Token = "0x60009D0")]
			[Address(RVA = "0xB74AB0", Offset = "0xB74AB0", VA = "0xB74AB0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000A0")]
		public Vector3 transformPoleAxis
		{
			[Token(Token = "0x60009D1")]
			[Address(RVA = "0xB74AE0", Offset = "0xB74AE0", VA = "0xB74AE0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000A1")]
		protected override int minBones
		{
			[Token(Token = "0x60009D4")]
			[Address(RVA = "0xB75730", Offset = "0xB75730", VA = "0xB75730", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000A2")]
		protected override Vector3 localDirection
		{
			[Token(Token = "0x60009D8")]
			[Address(RVA = "0xB75C70", Offset = "0xB75C70", VA = "0xB75C70", Slot = "15")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x60009CF")]
		[Address(RVA = "0xB74978", Offset = "0xB74978", VA = "0xB74978")]
		public float GetAngle()
		{
			return default(float);
		}

		[Token(Token = "0x60009D2")]
		[Address(RVA = "0xB74B10", Offset = "0xB74B10", VA = "0xB74B10", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60009D3")]
		[Address(RVA = "0xB74D9C", Offset = "0xB74D9C", VA = "0xB74D9C", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60009D5")]
		[Address(RVA = "0xB75688", Offset = "0xB75688", VA = "0xB75688")]
		private void Solve()
		{
		}

		[Token(Token = "0x60009D6")]
		[Address(RVA = "0xB75324", Offset = "0xB75324", VA = "0xB75324")]
		private Vector3 GetClampedIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0xB75738", Offset = "0xB75738", VA = "0xB75738")]
		private void RotateToTarget(Vector3 targetPosition, Bone bone, float weight)
		{
		}

		[Token(Token = "0x60009D9")]
		[Address(RVA = "0xB63840", Offset = "0xB63840", VA = "0xB63840")]
		public IKSolverAim()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001B5")]
	public class IKSolverCCD : IKSolverHeuristic
	{
		[Token(Token = "0x400096A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x60009DA")]
		[Address(RVA = "0xB75CD0", Offset = "0xB75CD0", VA = "0xB75CD0")]
		public void FadeOutBoneWeights()
		{
		}

		[Token(Token = "0x60009DB")]
		[Address(RVA = "0xB75D40", Offset = "0xB75D40", VA = "0xB75D40", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60009DC")]
		[Address(RVA = "0xB76240", Offset = "0xB76240", VA = "0xB76240", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60009DD")]
		[Address(RVA = "0xB76920", Offset = "0xB76920", VA = "0xB76920")]
		private void Solve(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x60009DE")]
		[Address(RVA = "0xB76FC0", Offset = "0xB76FC0", VA = "0xB76FC0")]
		public IKSolverCCD()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001B6")]
	public class IKSolverFABRIK : IKSolverHeuristic
	{
		[Token(Token = "0x400096B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x400096C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool[] limitedBones;

		[Token(Token = "0x400096D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3[] solverLocalPositions;

		[Token(Token = "0x170000A3")]
		protected override bool boneLengthCanBeZero
		{
			[Token(Token = "0x60009E4")]
			[Address(RVA = "0xB78014", Offset = "0xB78014", VA = "0xB78014", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60009DF")]
		[Address(RVA = "0xB77038", Offset = "0xB77038", VA = "0xB77038")]
		public void SolveForward(Vector3 position)
		{
		}

		[Token(Token = "0x60009E0")]
		[Address(RVA = "0xB77614", Offset = "0xB77614", VA = "0xB77614")]
		public void SolveBackward(Vector3 position)
		{
		}

		[Token(Token = "0x60009E1")]
		[Address(RVA = "0xB77740", Offset = "0xB77740", VA = "0xB77740", Slot = "5")]
		public override Vector3 GetIKPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009E2")]
		[Address(RVA = "0xB777C8", Offset = "0xB777C8", VA = "0xB777C8", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60009E3")]
		[Address(RVA = "0xB77CDC", Offset = "0xB77CDC", VA = "0xB77CDC", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60009E5")]
		[Address(RVA = "0xB7801C", Offset = "0xB7801C", VA = "0xB7801C")]
		private Vector3 SolveJoint(Vector3 pos1, Vector3 pos2, float length)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009E6")]
		[Address(RVA = "0xB7710C", Offset = "0xB7710C", VA = "0xB7710C")]
		private void OnPreSolve()
		{
		}

		[Token(Token = "0x60009E7")]
		[Address(RVA = "0xB776F8", Offset = "0xB776F8", VA = "0xB776F8")]
		private void OnPostSolve()
		{
		}

		[Token(Token = "0x60009E8")]
		[Address(RVA = "0xB77FCC", Offset = "0xB77FCC", VA = "0xB77FCC")]
		private void Solve(Vector3 targetPosition)
		{
		}

		[Token(Token = "0x60009E9")]
		[Address(RVA = "0xB774A8", Offset = "0xB774A8", VA = "0xB774A8")]
		private void ForwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x60009EA")]
		[Address(RVA = "0xB786D0", Offset = "0xB786D0", VA = "0xB786D0")]
		private void SolverMove(int index, Vector3 offset)
		{
		}

		[Token(Token = "0x60009EB")]
		[Address(RVA = "0xB78738", Offset = "0xB78738", VA = "0xB78738")]
		private void SolverRotate(int index, Quaternion rotation, bool recursive)
		{
		}

		[Token(Token = "0x60009EC")]
		[Address(RVA = "0xB78808", Offset = "0xB78808", VA = "0xB78808")]
		private void SolverRotateChildren(int index, Quaternion rotation)
		{
		}

		[Token(Token = "0x60009ED")]
		[Address(RVA = "0xB788D0", Offset = "0xB788D0", VA = "0xB788D0")]
		private void SolverMoveChildrenAroundPoint(int index, Quaternion rotation)
		{
		}

		[Token(Token = "0x60009EE")]
		[Address(RVA = "0xB77A54", Offset = "0xB77A54", VA = "0xB77A54")]
		private Quaternion GetParentSolverRotation(int index)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0xB77B98", Offset = "0xB77B98", VA = "0xB77B98")]
		private Vector3 GetParentSolverPosition(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009F0")]
		[Address(RVA = "0xB789C0", Offset = "0xB789C0", VA = "0xB789C0")]
		private Quaternion GetLimitedRotation(int index, Quaternion q, out bool changed)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60009F1")]
		[Address(RVA = "0xB782BC", Offset = "0xB782BC", VA = "0xB782BC")]
		private void LimitForward(int rotateBone, int limitBone)
		{
		}

		[Token(Token = "0x60009F2")]
		[Address(RVA = "0xB776E8", Offset = "0xB776E8", VA = "0xB776E8")]
		private void BackwardReach(Vector3 position)
		{
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0xB79038", Offset = "0xB79038", VA = "0xB79038")]
		private void BackwardReachUnlimited(Vector3 position)
		{
		}

		[Token(Token = "0x60009F4")]
		[Address(RVA = "0xB78B84", Offset = "0xB78B84", VA = "0xB78B84")]
		private void BackwardReachLimited(Vector3 position)
		{
		}

		[Token(Token = "0x60009F5")]
		[Address(RVA = "0xB78138", Offset = "0xB78138", VA = "0xB78138")]
		private void MapToSolverPositions()
		{
		}

		[Token(Token = "0x60009F6")]
		[Address(RVA = "0xB7820C", Offset = "0xB7820C", VA = "0xB7820C")]
		private void MapToSolverPositionsLimited()
		{
		}

		[Token(Token = "0x60009F7")]
		[Address(RVA = "0xB790F0", Offset = "0xB790F0", VA = "0xB790F0")]
		public IKSolverFABRIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001B7")]
	public class IKSolverFABRIKRoot : IKSolver
	{
		[Token(Token = "0x400096E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int iterations;

		[Token(Token = "0x400096F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Range(0f, 1f)]
		public float rootPin;

		[Token(Token = "0x4000970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FABRIKChain[] chains;

		[Token(Token = "0x4000971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool zeroWeightApplied;

		[Token(Token = "0x4000972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool[] isRoot;

		[Token(Token = "0x4000973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 rootDefaultPosition;

		[Token(Token = "0x60009F8")]
		[Address(RVA = "0xB79188", Offset = "0xB79188", VA = "0xB79188", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x60009F9")]
		[Address(RVA = "0xB7984C", Offset = "0xB7984C", VA = "0xB7984C", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x60009FA")]
		[Address(RVA = "0xB798D8", Offset = "0xB798D8", VA = "0xB798D8", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x60009FB")]
		[Address(RVA = "0xB7996C", Offset = "0xB7996C", VA = "0xB7996C", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x60009FC")]
		[Address(RVA = "0xB79A64", Offset = "0xB79A64", VA = "0xB79A64")]
		private bool IsRoot(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x60009FD")]
		[Address(RVA = "0xB79AF4", Offset = "0xB79AF4", VA = "0xB79AF4", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x60009FE")]
		[Address(RVA = "0xB79EF4", Offset = "0xB79EF4", VA = "0xB79EF4", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x60009FF")]
		[Address(RVA = "0xB7A0EC", Offset = "0xB7A0EC", VA = "0xB7A0EC", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000A00")]
		[Address(RVA = "0xB79F94", Offset = "0xB79F94", VA = "0xB79F94")]
		private void AddPointsToArray(ref Point[] array, FABRIKChain chain)
		{
		}

		[Token(Token = "0x6000A01")]
		[Address(RVA = "0xB79CCC", Offset = "0xB79CCC", VA = "0xB79CCC")]
		private Vector3 GetCentroid()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A02")]
		[Address(RVA = "0xB7A170", Offset = "0xB7A170", VA = "0xB7A170")]
		public IKSolverFABRIKRoot()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001B8")]
	public class IKSolverFullBody : IKSolver
	{
		[Token(Token = "0x4000974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Range(0f, 10f)]
		public int iterations;

		[Token(Token = "0x4000975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FBIKChain[] chain;

		[Token(Token = "0x4000976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public IKEffector[] effectors;

		[Token(Token = "0x4000977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public IKMappingSpine spineMapping;

		[Token(Token = "0x4000978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public IKMappingBone[] boneMappings;

		[Token(Token = "0x4000979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public IKMappingLimb[] limbMappings;

		[Token(Token = "0x400097A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool FABRIKPass;

		[Token(Token = "0x400097B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public UpdateDelegate OnPreRead;

		[Token(Token = "0x400097C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public UpdateDelegate OnPreSolve;

		[Token(Token = "0x400097D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public IterationDelegate OnPreIteration;

		[Token(Token = "0x400097E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public IterationDelegate OnPostIteration;

		[Token(Token = "0x400097F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public UpdateDelegate OnPreBend;

		[Token(Token = "0x4000980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public UpdateDelegate OnPostSolve;

		[Token(Token = "0x4000981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public UpdateDelegate OnStoreDefaultLocalState;

		[Token(Token = "0x4000982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public UpdateDelegate OnFixTransforms;

		[Token(Token = "0x6000A03")]
		[Address(RVA = "0xB7A1DC", Offset = "0xB7A1DC", VA = "0xB7A1DC")]
		public IKEffector GetEffector(Transform t)
		{
			return null;
		}

		[Token(Token = "0x6000A04")]
		[Address(RVA = "0xB7A2B8", Offset = "0xB7A2B8", VA = "0xB7A2B8")]
		public FBIKChain GetChain(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0xB7A300", Offset = "0xB7A300", VA = "0xB7A300")]
		public int GetChainIndex(Transform transform)
		{
			return default(int);
		}

		[Token(Token = "0x6000A06")]
		[Address(RVA = "0xB7A414", Offset = "0xB7A414", VA = "0xB7A414")]
		public Node GetNode(int chainIndex, int nodeIndex)
		{
			return null;
		}

		[Token(Token = "0x6000A07")]
		[Address(RVA = "0xB7A464", Offset = "0xB7A464", VA = "0xB7A464")]
		public void GetChainAndNodeIndexes(Transform transform, out int chainIndex, out int nodeIndex)
		{
		}

		[Token(Token = "0x6000A08")]
		[Address(RVA = "0xB7A4D8", Offset = "0xB7A4D8", VA = "0xB7A4D8", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0xB7A660", Offset = "0xB7A660", VA = "0xB7A660", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000A0A")]
		[Address(RVA = "0xB7A7BC", Offset = "0xB7A7BC", VA = "0xB7A7BC", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0xB7A9C0", Offset = "0xB7A9C0", VA = "0xB7A9C0", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0xB7AA94", Offset = "0xB7AA94", VA = "0xB7AA94", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0xB7AB7C", Offset = "0xB7AB7C", VA = "0xB7AB7C", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0xB7ACDC", Offset = "0xB7ACDC", VA = "0xB7ACDC", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0xB7AE78", Offset = "0xB7AE78", VA = "0xB7AE78", Slot = "12")]
		protected virtual void ReadPose()
		{
		}

		[Token(Token = "0x6000A10")]
		[Address(RVA = "0xB7B0B0", Offset = "0xB7B0B0", VA = "0xB7B0B0", Slot = "13")]
		protected virtual void Solve()
		{
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0xB7B390", Offset = "0xB7B390", VA = "0xB7B390", Slot = "14")]
		protected virtual void ApplyBendConstraints()
		{
		}

		[Token(Token = "0x6000A12")]
		[Address(RVA = "0xB7B3C8", Offset = "0xB7B3C8", VA = "0xB7B3C8", Slot = "15")]
		protected virtual void WritePose()
		{
		}

		[Token(Token = "0x6000A13")]
		[Address(RVA = "0xB7B4AC", Offset = "0xB7B4AC", VA = "0xB7B4AC")]
		public IKSolverFullBody()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001B9")]
	public enum FullBodyBipedEffector
	{
		[Token(Token = "0x4000984")]
		Body,
		[Token(Token = "0x4000985")]
		LeftShoulder,
		[Token(Token = "0x4000986")]
		RightShoulder,
		[Token(Token = "0x4000987")]
		LeftThigh,
		[Token(Token = "0x4000988")]
		RightThigh,
		[Token(Token = "0x4000989")]
		LeftHand,
		[Token(Token = "0x400098A")]
		RightHand,
		[Token(Token = "0x400098B")]
		LeftFoot,
		[Token(Token = "0x400098C")]
		RightFoot
	}
	[Serializable]
	[Token(Token = "0x20001BA")]
	public enum FullBodyBipedChain
	{
		[Token(Token = "0x400098E")]
		LeftArm,
		[Token(Token = "0x400098F")]
		RightArm,
		[Token(Token = "0x4000990")]
		LeftLeg,
		[Token(Token = "0x4000991")]
		RightLeg
	}
	[Serializable]
	[Token(Token = "0x20001BB")]
	public class IKSolverFullBodyBiped : IKSolverFullBody
	{
		[Token(Token = "0x4000992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Transform rootNode;

		[Token(Token = "0x4000993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Range(0f, 1f)]
		public float spineStiffness;

		[Token(Token = "0x4000994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[Range(-1f, 1f)]
		public float pullBodyVertical;

		[Token(Token = "0x4000995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Range(-1f, 1f)]
		public float pullBodyHorizontal;

		[Token(Token = "0x4000997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Vector3 offset;

		[Token(Token = "0x170000A4")]
		public IKEffector bodyEffector
		{
			[Token(Token = "0x6000A14")]
			[Address(RVA = "0xB7B5F8", Offset = "0xB7B5F8", VA = "0xB7B5F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A5")]
		public IKEffector leftShoulderEffector
		{
			[Token(Token = "0x6000A15")]
			[Address(RVA = "0xB7B738", Offset = "0xB7B738", VA = "0xB7B738")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A6")]
		public IKEffector rightShoulderEffector
		{
			[Token(Token = "0x6000A16")]
			[Address(RVA = "0xB7B740", Offset = "0xB7B740", VA = "0xB7B740")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A7")]
		public IKEffector leftThighEffector
		{
			[Token(Token = "0x6000A17")]
			[Address(RVA = "0xB7B748", Offset = "0xB7B748", VA = "0xB7B748")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A8")]
		public IKEffector rightThighEffector
		{
			[Token(Token = "0x6000A18")]
			[Address(RVA = "0xB7B750", Offset = "0xB7B750", VA = "0xB7B750")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A9")]
		public IKEffector leftHandEffector
		{
			[Token(Token = "0x6000A19")]
			[Address(RVA = "0xB7B758", Offset = "0xB7B758", VA = "0xB7B758")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AA")]
		public IKEffector rightHandEffector
		{
			[Token(Token = "0x6000A1A")]
			[Address(RVA = "0xB7B760", Offset = "0xB7B760", VA = "0xB7B760")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AB")]
		public IKEffector leftFootEffector
		{
			[Token(Token = "0x6000A1B")]
			[Address(RVA = "0xB7B768", Offset = "0xB7B768", VA = "0xB7B768")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AC")]
		public IKEffector rightFootEffector
		{
			[Token(Token = "0x6000A1C")]
			[Address(RVA = "0xB7B770", Offset = "0xB7B770", VA = "0xB7B770")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AD")]
		public FBIKChain leftArmChain
		{
			[Token(Token = "0x6000A1D")]
			[Address(RVA = "0xB7B778", Offset = "0xB7B778", VA = "0xB7B778")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AE")]
		public FBIKChain rightArmChain
		{
			[Token(Token = "0x6000A1E")]
			[Address(RVA = "0xB7B7A4", Offset = "0xB7B7A4", VA = "0xB7B7A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000AF")]
		public FBIKChain leftLegChain
		{
			[Token(Token = "0x6000A1F")]
			[Address(RVA = "0xB7B7D0", Offset = "0xB7B7D0", VA = "0xB7B7D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B0")]
		public FBIKChain rightLegChain
		{
			[Token(Token = "0x6000A20")]
			[Address(RVA = "0xB7B7FC", Offset = "0xB7B7FC", VA = "0xB7B7FC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B1")]
		public IKMappingLimb leftArmMapping
		{
			[Token(Token = "0x6000A21")]
			[Address(RVA = "0xB7B828", Offset = "0xB7B828", VA = "0xB7B828")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B2")]
		public IKMappingLimb rightArmMapping
		{
			[Token(Token = "0x6000A22")]
			[Address(RVA = "0xB7B850", Offset = "0xB7B850", VA = "0xB7B850")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B3")]
		public IKMappingLimb leftLegMapping
		{
			[Token(Token = "0x6000A23")]
			[Address(RVA = "0xB7B87C", Offset = "0xB7B87C", VA = "0xB7B87C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B4")]
		public IKMappingLimb rightLegMapping
		{
			[Token(Token = "0x6000A24")]
			[Address(RVA = "0xB7B8A8", Offset = "0xB7B8A8", VA = "0xB7B8A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B5")]
		public IKMappingBone headMapping
		{
			[Token(Token = "0x6000A25")]
			[Address(RVA = "0xB7B8D4", Offset = "0xB7B8D4", VA = "0xB7B8D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000B6")]
		public Vector3 pullBodyOffset
		{
			[Token(Token = "0x6000A35")]
			[Address(RVA = "0xB7DB10", Offset = "0xB7DB10", VA = "0xB7DB10")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000A36")]
			[Address(RVA = "0xB7DB1C", Offset = "0xB7DB1C", VA = "0xB7DB1C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000A26")]
		[Address(RVA = "0xB7B8FC", Offset = "0xB7B8FC", VA = "0xB7B8FC")]
		public void SetChainWeights(FullBodyBipedChain c, float pull, float reach = 0f)
		{
		}

		[Token(Token = "0x6000A27")]
		[Address(RVA = "0xB7B9FC", Offset = "0xB7B9FC", VA = "0xB7B9FC")]
		public void SetEffectorWeights(FullBodyBipedEffector effector, float positionWeight, float rotationWeight)
		{
		}

		[Token(Token = "0x6000A28")]
		[Address(RVA = "0xB7B94C", Offset = "0xB7B94C", VA = "0xB7B94C")]
		public FBIKChain GetChain(FullBodyBipedChain c)
		{
			return null;
		}

		[Token(Token = "0x6000A29")]
		[Address(RVA = "0xB7BA74", Offset = "0xB7BA74", VA = "0xB7BA74")]
		public FBIKChain GetChain(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x6000A2A")]
		[Address(RVA = "0xB7B600", Offset = "0xB7B600", VA = "0xB7B600")]
		public IKEffector GetEffector(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0xB7BB3C", Offset = "0xB7BB3C", VA = "0xB7BB3C")]
		public IKEffector GetEndEffector(FullBodyBipedChain c)
		{
			return null;
		}

		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0xB7BBEC", Offset = "0xB7BBEC", VA = "0xB7BBEC")]
		public IKMappingLimb GetLimbMapping(FullBodyBipedChain chain)
		{
			return null;
		}

		[Token(Token = "0x6000A2D")]
		[Address(RVA = "0xB7BC98", Offset = "0xB7BC98", VA = "0xB7BC98")]
		public IKMappingLimb GetLimbMapping(FullBodyBipedEffector effector)
		{
			return null;
		}

		[Token(Token = "0x6000A2E")]
		[Address(RVA = "0xB7BD44", Offset = "0xB7BD44", VA = "0xB7BD44")]
		public IKMappingSpine GetSpineMapping()
		{
			return null;
		}

		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0xB7BD4C", Offset = "0xB7BD4C", VA = "0xB7BD4C")]
		public IKMappingBone GetHeadMapping()
		{
			return null;
		}

		[Token(Token = "0x6000A30")]
		[Address(RVA = "0xB7BD74", Offset = "0xB7BD74", VA = "0xB7BD74")]
		public IKConstraintBend GetBendConstraint(FullBodyBipedChain limb)
		{
			return null;
		}

		[Token(Token = "0x6000A31")]
		[Address(RVA = "0xB7BE34", Offset = "0xB7BE34", VA = "0xB7BE34", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A32")]
		[Address(RVA = "0xB7BFC8", Offset = "0xB7BFC8", VA = "0xB7BFC8")]
		public void SetToReferences(BipedReferences references, [Optional] Transform rootNode)
		{
		}

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0xB7D408", Offset = "0xB7D408", VA = "0xB7D408")]
		public static Transform DetectRootNodeBone(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x6000A34")]
		[Address(RVA = "0xB7D9B8", Offset = "0xB7D9B8", VA = "0xB7D9B8")]
		public void SetLimbOrientations(BipedLimbOrientations o)
		{
		}

		[Token(Token = "0x6000A37")]
		[Address(RVA = "0xB7DA14", Offset = "0xB7DA14", VA = "0xB7DA14")]
		private void SetLimbOrientation(FullBodyBipedChain chain, BipedLimbOrientations.LimbOrientation limbOrientation)
		{
		}

		[Token(Token = "0x6000A38")]
		[Address(RVA = "0xB7D858", Offset = "0xB7D858", VA = "0xB7D858")]
		private static Transform GetLeftClavicle(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x6000A39")]
		[Address(RVA = "0xB7D908", Offset = "0xB7D908", VA = "0xB7D908")]
		private static Transform GetRightClavicle(BipedReferences references)
		{
			return null;
		}

		[Token(Token = "0x6000A3A")]
		[Address(RVA = "0xB7DB28", Offset = "0xB7DB28", VA = "0xB7DB28")]
		private static bool Contains(Transform[] array, Transform transform)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A3B")]
		[Address(RVA = "0xB7DBEC", Offset = "0xB7DBEC", VA = "0xB7DBEC", Slot = "12")]
		protected override void ReadPose()
		{
		}

		[Token(Token = "0x6000A3C")]
		[Address(RVA = "0xB7DCBC", Offset = "0xB7DCBC", VA = "0xB7DCBC")]
		private void PullBody()
		{
		}

		[Token(Token = "0x6000A3D")]
		[Address(RVA = "0xB7DDD8", Offset = "0xB7DDD8", VA = "0xB7DDD8")]
		private Vector3 GetBodyOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A3E")]
		[Address(RVA = "0xB7DF68", Offset = "0xB7DF68", VA = "0xB7DF68")]
		private Vector3 GetHandBodyPull(IKEffector effector, FBIKChain arm, Vector3 offset)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0xB7E0E0", Offset = "0xB7E0E0", VA = "0xB7E0E0", Slot = "14")]
		protected override void ApplyBendConstraints()
		{
		}

		[Token(Token = "0x6000A40")]
		[Address(RVA = "0xB7E340", Offset = "0xB7E340", VA = "0xB7E340", Slot = "15")]
		protected override void WritePose()
		{
		}

		[Token(Token = "0x6000A41")]
		[Address(RVA = "0xB7E3B8", Offset = "0xB7E3B8", VA = "0xB7E3B8")]
		public IKSolverFullBodyBiped()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001BC")]
	public class IKSolverHeuristic : IKSolver
	{
		[Token(Token = "0x4000998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x4000999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float tolerance;

		[Token(Token = "0x400099A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int maxIterations;

		[Token(Token = "0x400099B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool useRotationLimits;

		[Token(Token = "0x400099C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool XY;

		[Token(Token = "0x400099D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Bone[] bones;

		[Token(Token = "0x400099E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Vector3 lastLocalDirection;

		[Token(Token = "0x400099F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected float chainLength;

		[Token(Token = "0x170000B7")]
		protected virtual int minBones
		{
			[Token(Token = "0x6000A49")]
			[Address(RVA = "0xB7EC58", Offset = "0xB7EC58", VA = "0xB7EC58", Slot = "12")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170000B8")]
		protected virtual bool boneLengthCanBeZero
		{
			[Token(Token = "0x6000A4A")]
			[Address(RVA = "0xB7EC60", Offset = "0xB7EC60", VA = "0xB7EC60", Slot = "13")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B9")]
		protected virtual bool allowCommonParent
		{
			[Token(Token = "0x6000A4B")]
			[Address(RVA = "0xB7EC68", Offset = "0xB7EC68", VA = "0xB7EC68", Slot = "14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000BA")]
		protected virtual Vector3 localDirection
		{
			[Token(Token = "0x6000A4F")]
			[Address(RVA = "0xB7EC78", Offset = "0xB7EC78", VA = "0xB7EC78", Slot = "15")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000BB")]
		protected float positionOffset
		{
			[Token(Token = "0x6000A50")]
			[Address(RVA = "0xB768D8", Offset = "0xB768D8", VA = "0xB768D8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000A42")]
		[Address(RVA = "0xB7E3C4", Offset = "0xB7E3C4", VA = "0xB7E3C4")]
		public bool SetChain(Transform[] hierarchy, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A43")]
		[Address(RVA = "0xB7E574", Offset = "0xB7E574", VA = "0xB7E574")]
		public void AddBone(Transform bone)
		{
		}

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0xB7E6C0", Offset = "0xB7E6C0", VA = "0xB7E6C0", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000A45")]
		[Address(RVA = "0xB7E720", Offset = "0xB7E720", VA = "0xB7E720", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6000A46")]
		[Address(RVA = "0xB7E794", Offset = "0xB7E794", VA = "0xB7E794", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A47")]
		[Address(RVA = "0xB7EB74", Offset = "0xB7EB74", VA = "0xB7EB74", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0xB7EB7C", Offset = "0xB7EB7C", VA = "0xB7EB7C", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0xB7EC70", Offset = "0xB7EC70", VA = "0xB7EC70", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0xB7EC74", Offset = "0xB7EC74", VA = "0xB7EC74", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0xB75DAC", Offset = "0xB75DAC", VA = "0xB75DAC")]
		protected void InitiateBones()
		{
		}

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0xB76520", Offset = "0xB76520", VA = "0xB76520")]
		protected Vector3 GetSingularityOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0xB7ED34", Offset = "0xB7ED34", VA = "0xB7ED34")]
		private bool SingularityDetected()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0xB76FC4", Offset = "0xB76FC4", VA = "0xB76FC4")]
		public IKSolverHeuristic()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001BD")]
	public class IKSolverLeg : IKSolver
	{
		[Token(Token = "0x40009A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Range(0f, 1f)]
		public float IKRotationWeight;

		[Token(Token = "0x40009A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Quaternion IKRotation;

		[Token(Token = "0x40009A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Point pelvis;

		[Token(Token = "0x40009A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Point thigh;

		[Token(Token = "0x40009A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Point calf;

		[Token(Token = "0x40009A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Point foot;

		[Token(Token = "0x40009A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Point toe;

		[Token(Token = "0x40009A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public IKSolverVR.Leg leg;

		[Token(Token = "0x40009A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Vector3 heelOffset;

		[Token(Token = "0x40009A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3[] positions;

		[Token(Token = "0x40009AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Quaternion[] rotations;

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0xB7EFC8", Offset = "0xB7EFC8", VA = "0xB7EFC8", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0xB7F36C", Offset = "0xB7F36C", VA = "0xB7F36C")]
		public bool SetChain(Transform pelvis, Transform thigh, Transform calf, Transform foot, Transform toe, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0xB7F420", Offset = "0xB7F420", VA = "0xB7F420", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000A57")]
		[Address(RVA = "0xB7F5A0", Offset = "0xB7F5A0", VA = "0xB7F5A0", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000A58")]
		[Address(RVA = "0xB7F700", Offset = "0xB7F700", VA = "0xB7F700", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0xB7F750", Offset = "0xB7F750", VA = "0xB7F750", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0xB7F7B0", Offset = "0xB7F7B0", VA = "0xB7F7B0", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0xB7FB08", Offset = "0xB7FB08", VA = "0xB7FB08", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000A5C")]
		[Address(RVA = "0xB7FB28", Offset = "0xB7FB28", VA = "0xB7FB28")]
		private void Solve()
		{
		}

		[Token(Token = "0x6000A5D")]
		[Address(RVA = "0xB7F808", Offset = "0xB7F808", VA = "0xB7F808")]
		private void Read()
		{
		}

		[Token(Token = "0x6000A5E")]
		[Address(RVA = "0xB7FBAC", Offset = "0xB7FBAC", VA = "0xB7FBAC")]
		private void Write()
		{
		}

		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0xB7FCB8", Offset = "0xB7FCB8", VA = "0xB7FCB8")]
		public IKSolverLeg()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001BE")]
	public class IKSolverLimb : IKSolverTrigonometric
	{
		[Serializable]
		[Token(Token = "0x20001BF")]
		public enum BendModifier
		{
			[Token(Token = "0x40009BC")]
			Animation,
			[Token(Token = "0x40009BD")]
			Target,
			[Token(Token = "0x40009BE")]
			Parent,
			[Token(Token = "0x40009BF")]
			Arm,
			[Token(Token = "0x40009C0")]
			Goal
		}

		[Serializable]
		[Token(Token = "0x20001C0")]
		public struct AxisDirection
		{
			[Token(Token = "0x40009C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3 direction;

			[Token(Token = "0x40009C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public Vector3 axis;

			[Token(Token = "0x40009C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float dot;

			[Token(Token = "0x6000A6A")]
			[Address(RVA = "0xB812F0", Offset = "0xB812F0", VA = "0xB812F0")]
			public AxisDirection(Vector3 direction, Vector3 axis)
			{
			}
		}

		[Token(Token = "0x40009AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public AvatarIKGoal goal;

		[Token(Token = "0x40009AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public BendModifier bendModifier;

		[Token(Token = "0x40009AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Range(0f, 1f)]
		public float maintainRotationWeight;

		[Token(Token = "0x40009AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Range(0f, 1f)]
		public float bendModifierWeight;

		[Token(Token = "0x40009AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Transform bendGoal;

		[Token(Token = "0x40009B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool maintainBendFor1Frame;

		[Token(Token = "0x40009B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC1")]
		private bool maintainRotationFor1Frame;

		[Token(Token = "0x40009B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private Quaternion defaultRootRotation;

		[Token(Token = "0x40009B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Quaternion parentDefaultRotation;

		[Token(Token = "0x40009B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Quaternion bone3RotationBeforeSolve;

		[Token(Token = "0x40009B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private Quaternion maintainRotation;

		[Token(Token = "0x40009B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private Quaternion bone3DefaultRotation;

		[Token(Token = "0x40009B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private Vector3 _bendNormal;

		[Token(Token = "0x40009B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Vector3 animationNormal;

		[Token(Token = "0x40009B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private AxisDirection[] axisDirectionsLeft;

		[Token(Token = "0x40009BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private AxisDirection[] axisDirectionsRight;

		[Token(Token = "0x170000BC")]
		private AxisDirection[] axisDirections
		{
			[Token(Token = "0x6000A67")]
			[Address(RVA = "0xB812D4", Offset = "0xB812D4", VA = "0xB812D4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0xB7FEB0", Offset = "0xB7FEB0", VA = "0xB7FEB0")]
		public void MaintainRotation()
		{
		}

		[Token(Token = "0x6000A61")]
		[Address(RVA = "0xB7FEF4", Offset = "0xB7FEF4", VA = "0xB7FEF4")]
		public void MaintainBend()
		{
		}

		[Token(Token = "0x6000A62")]
		[Address(RVA = "0xB7FF60", Offset = "0xB7FF60", VA = "0xB7FF60", Slot = "12")]
		protected override void OnInitiateVirtual()
		{
		}

		[Token(Token = "0x6000A63")]
		[Address(RVA = "0xB804A8", Offset = "0xB804A8", VA = "0xB804A8", Slot = "13")]
		protected override void OnUpdateVirtual()
		{
		}

		[Token(Token = "0x6000A64")]
		[Address(RVA = "0xB80FC4", Offset = "0xB80FC4", VA = "0xB80FC4", Slot = "14")]
		protected override void OnPostSolveVirtual()
		{
		}

		[Token(Token = "0x6000A65")]
		[Address(RVA = "0xB8106C", Offset = "0xB8106C", VA = "0xB8106C")]
		public IKSolverLimb()
		{
		}

		[Token(Token = "0x6000A66")]
		[Address(RVA = "0xB8123C", Offset = "0xB8123C", VA = "0xB8123C")]
		public IKSolverLimb(AvatarIKGoal goal)
		{
		}

		[Token(Token = "0x6000A68")]
		[Address(RVA = "0xB802BC", Offset = "0xB802BC", VA = "0xB802BC")]
		private void StoreAxisDirections(ref AxisDirection[] axisDirections)
		{
		}

		[Token(Token = "0x6000A69")]
		[Address(RVA = "0xB80564", Offset = "0xB80564", VA = "0xB80564")]
		private Vector3 GetModifiedBendNormal()
		{
			return default(Vector3);
		}
	}
	[Serializable]
	[Token(Token = "0x20001C1")]
	public class IKSolverLookAt : IKSolver
	{
		[Serializable]
		[Token(Token = "0x20001C2")]
		public class LookAtBone : Bone
		{
			[Token(Token = "0x170000C3")]
			public Vector3 forward
			{
				[Token(Token = "0x6000A89")]
				[Address(RVA = "0xB82F3C", Offset = "0xB82F3C", VA = "0xB82F3C")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x6000A85")]
			[Address(RVA = "0xB835EC", Offset = "0xB835EC", VA = "0xB835EC")]
			public LookAtBone()
			{
			}

			[Token(Token = "0x6000A86")]
			[Address(RVA = "0xB822A0", Offset = "0xB822A0", VA = "0xB822A0")]
			public LookAtBone(Transform transform)
			{
			}

			[Token(Token = "0x6000A87")]
			[Address(RVA = "0xB82594", Offset = "0xB82594", VA = "0xB82594")]
			public void Initiate(Transform root)
			{
			}

			[Token(Token = "0x6000A88")]
			[Address(RVA = "0xB83284", Offset = "0xB83284", VA = "0xB83284")]
			public void LookAt(Vector3 direction, float weight)
			{
			}
		}

		[Token(Token = "0x40009C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x40009C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public LookAtBone[] spine;

		[Token(Token = "0x40009C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public LookAtBone head;

		[Token(Token = "0x40009C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public LookAtBone[] eyes;

		[Token(Token = "0x40009C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Range(0f, 1f)]
		public float bodyWeight;

		[Token(Token = "0x40009C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Range(0f, 1f)]
		public float headWeight;

		[Token(Token = "0x40009CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Range(0f, 1f)]
		public float eyesWeight;

		[Token(Token = "0x40009CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Range(0f, 1f)]
		public float clampWeight;

		[Token(Token = "0x40009CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Range(0f, 1f)]
		public float clampWeightHead;

		[Token(Token = "0x40009CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Range(0f, 1f)]
		public float clampWeightEyes;

		[Token(Token = "0x40009CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Range(0f, 2f)]
		public int clampSmoothing;

		[Token(Token = "0x40009CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public AnimationCurve spineWeightCurve;

		[Token(Token = "0x40009D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Vector3 spineTargetOffset;

		[Token(Token = "0x40009D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3[] spineForwards;

		[Token(Token = "0x40009D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3[] headForwards;

		[Token(Token = "0x40009D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Vector3[] eyeForward;

		[Token(Token = "0x170000BD")]
		private bool spineIsValid
		{
			[Token(Token = "0x6000A79")]
			[Address(RVA = "0xB81A24", Offset = "0xB81A24", VA = "0xB81A24")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000BE")]
		private bool spineIsEmpty
		{
			[Token(Token = "0x6000A7A")]
			[Address(RVA = "0xB81BCC", Offset = "0xB81BCC", VA = "0xB81BCC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000BF")]
		private bool headIsValid
		{
			[Token(Token = "0x6000A7C")]
			[Address(RVA = "0xB81AF0", Offset = "0xB81AF0", VA = "0xB81AF0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C0")]
		private bool headIsEmpty
		{
			[Token(Token = "0x6000A7D")]
			[Address(RVA = "0xB81BF0", Offset = "0xB81BF0", VA = "0xB81BF0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C1")]
		private bool eyesIsValid
		{
			[Token(Token = "0x6000A7F")]
			[Address(RVA = "0xB81B00", Offset = "0xB81B00", VA = "0xB81B00")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000C2")]
		private bool eyesIsEmpty
		{
			[Token(Token = "0x6000A80")]
			[Address(RVA = "0xB81C5C", Offset = "0xB81C5C", VA = "0xB81C5C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000A6B")]
		[Address(RVA = "0xB8148C", Offset = "0xB8148C", VA = "0xB8148C")]
		public void SetLookAtWeight(float weight)
		{
		}

		[Token(Token = "0x6000A6C")]
		[Address(RVA = "0xB814A8", Offset = "0xB814A8", VA = "0xB814A8")]
		public void SetLookAtWeight(float weight, float bodyWeight)
		{
		}

		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0xB814D4", Offset = "0xB814D4", VA = "0xB814D4")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight)
		{
		}

		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0xB8150C", Offset = "0xB8150C", VA = "0xB8150C")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight)
		{
		}

		[Token(Token = "0x6000A6F")]
		[Address(RVA = "0xB81554", Offset = "0xB81554", VA = "0xB81554")]
		public void SetLookAtWeight(float weight, float bodyWeight, float headWeight, float eyesWeight, float clampWeight)
		{
		}

		[Token(Token = "0x6000A70")]
		[Address(RVA = "0xB815AC", Offset = "0xB815AC", VA = "0xB815AC")]
		public void SetLookAtWeight(float weight, float bodyWeight = 0f, float headWeight = 1f, float eyesWeight = 0.5f, float clampWeight = 0.5f, float clampWeightHead = 0.5f, float clampWeightEyes = 0.3f)
		{
		}

		[Token(Token = "0x6000A71")]
		[Address(RVA = "0xB8161C", Offset = "0xB8161C", VA = "0xB8161C", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000A72")]
		[Address(RVA = "0xB81734", Offset = "0xB81734", VA = "0xB81734", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6000A73")]
		[Address(RVA = "0xB81860", Offset = "0xB81860", VA = "0xB81860", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A74")]
		[Address(RVA = "0xB81C80", Offset = "0xB81C80", VA = "0xB81C80", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000A75")]
		[Address(RVA = "0xB81ED4", Offset = "0xB81ED4", VA = "0xB81ED4", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0xB82034", Offset = "0xB82034", VA = "0xB82034")]
		public bool SetChain(Transform[] spine, Transform head, Transform[] eyes, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A77")]
		[Address(RVA = "0xB822D0", Offset = "0xB822D0", VA = "0xB822D0", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000A78")]
		[Address(RVA = "0xB82680", Offset = "0xB82680", VA = "0xB82680", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0xB82744", Offset = "0xB82744", VA = "0xB82744")]
		private void SolveSpine()
		{
		}

		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0xB82960", Offset = "0xB82960", VA = "0xB82960")]
		private void SolveHead()
		{
		}

		[Token(Token = "0x6000A81")]
		[Address(RVA = "0xB82CA8", Offset = "0xB82CA8", VA = "0xB82CA8")]
		private void SolveEyes()
		{
		}

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0xB82F6C", Offset = "0xB82F6C", VA = "0xB82F6C")]
		private Vector3[] GetForwards(ref Vector3[] forwards, Vector3 baseForward, Vector3 targetForward, int bones, float clamp)
		{
			return null;
		}

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0xB820FC", Offset = "0xB820FC", VA = "0xB820FC")]
		private void SetBones(Transform[] array, ref LookAtBone[] bones)
		{
		}

		[Token(Token = "0x6000A84")]
		[Address(RVA = "0xB8338C", Offset = "0xB8338C", VA = "0xB8338C")]
		public IKSolverLookAt()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001C3")]
	public class IKSolverTrigonometric : IKSolver
	{
		[Serializable]
		[Token(Token = "0x20001C4")]
		public class TrigonometricBone : Bone
		{
			[Token(Token = "0x40009DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			private Quaternion targetToLocalSpace;

			[Token(Token = "0x40009DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			private Vector3 defaultLocalBendNormal;

			[Token(Token = "0x6000AA1")]
			[Address(RVA = "0xB84914", Offset = "0xB84914", VA = "0xB84914")]
			public void Initiate(Vector3 childPosition, Vector3 bendNormal)
			{
			}

			[Token(Token = "0x6000AA2")]
			[Address(RVA = "0xB851B0", Offset = "0xB851B0", VA = "0xB851B0")]
			public Quaternion GetRotation(Vector3 direction, Vector3 bendNormal)
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6000AA3")]
			[Address(RVA = "0xB7FF30", Offset = "0xB7FF30", VA = "0xB7FF30")]
			public Vector3 GetBendNormalFromCurrentRotation()
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000AA4")]
			[Address(RVA = "0xB8524C", Offset = "0xB8524C", VA = "0xB8524C")]
			public TrigonometricBone()
			{
			}
		}

		[Token(Token = "0x40009D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform target;

		[Token(Token = "0x40009D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Range(0f, 1f)]
		public float IKRotationWeight;

		[Token(Token = "0x40009D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Quaternion IKRotation;

		[Token(Token = "0x40009D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Vector3 bendNormal;

		[Token(Token = "0x40009D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public TrigonometricBone bone1;

		[Token(Token = "0x40009D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public TrigonometricBone bone2;

		[Token(Token = "0x40009DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public TrigonometricBone bone3;

		[Token(Token = "0x40009DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected Vector3 weightIKPosition;

		[Token(Token = "0x40009DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected bool directHierarchy;

		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0xB835F4", Offset = "0xB835F4", VA = "0xB835F4")]
		public void SetBendGoalPosition(Vector3 goalPosition, float weight)
		{
		}

		[Token(Token = "0x6000A8B")]
		[Address(RVA = "0xB83788", Offset = "0xB83788", VA = "0xB83788")]
		public void SetBendPlaneToCurrent()
		{
		}

		[Token(Token = "0x6000A8C")]
		[Address(RVA = "0xB83908", Offset = "0xB83908", VA = "0xB83908")]
		public void SetIKRotation(Quaternion rotation)
		{
		}

		[Token(Token = "0x6000A8D")]
		[Address(RVA = "0xB83914", Offset = "0xB83914", VA = "0xB83914")]
		public void SetIKRotationWeight(float weight)
		{
		}

		[Token(Token = "0x6000A8E")]
		[Address(RVA = "0xB83930", Offset = "0xB83930", VA = "0xB83930")]
		public Quaternion GetIKRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000A8F")]
		[Address(RVA = "0xB8393C", Offset = "0xB8393C", VA = "0xB8393C")]
		public float GetIKRotationWeight()
		{
			return default(float);
		}

		[Token(Token = "0x6000A90")]
		[Address(RVA = "0xB83944", Offset = "0xB83944", VA = "0xB83944", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000A91")]
		[Address(RVA = "0xB83A54", Offset = "0xB83A54", VA = "0xB83A54", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000A92")]
		[Address(RVA = "0xB83B4C", Offset = "0xB83B4C", VA = "0xB83B4C", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000A93")]
		[Address(RVA = "0xB83B8C", Offset = "0xB83B8C", VA = "0xB83B8C", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6000A94")]
		[Address(RVA = "0xB83BDC", Offset = "0xB83BDC", VA = "0xB83BDC", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A95")]
		[Address(RVA = "0xB83FB0", Offset = "0xB83FB0", VA = "0xB83FB0")]
		public bool SetChain(Transform bone1, Transform bone2, Transform bone3, Transform root)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A96")]
		[Address(RVA = "0xB8402C", Offset = "0xB8402C", VA = "0xB8402C")]
		public static void Solve(Transform bone1, Transform bone2, Transform bone3, Vector3 targetPosition, Vector3 bendNormal, float weight)
		{
		}

		[Token(Token = "0x6000A97")]
		[Address(RVA = "0xB84520", Offset = "0xB84520", VA = "0xB84520")]
		private static Vector3 GetDirectionToBendPoint(Vector3 direction, float directionMag, Vector3 bendDirection, float sqrMag1, float sqrMag2)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A98")]
		[Address(RVA = "0xB84678", Offset = "0xB84678", VA = "0xB84678", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000A99")]
		[Address(RVA = "0xB84824", Offset = "0xB84824", VA = "0xB84824")]
		private bool IsDirectHierarchy()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0xB847A4", Offset = "0xB847A4", VA = "0xB847A4")]
		private void InitiateBones()
		{
		}

		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0xB84A04", Offset = "0xB84A04", VA = "0xB84A04", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0xB85240", Offset = "0xB85240", VA = "0xB85240", Slot = "12")]
		protected virtual void OnInitiateVirtual()
		{
		}

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0xB85244", Offset = "0xB85244", VA = "0xB85244", Slot = "13")]
		protected virtual void OnUpdateVirtual()
		{
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0xB85248", Offset = "0xB85248", VA = "0xB85248", Slot = "14")]
		protected virtual void OnPostSolveVirtual()
		{
		}

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0xB84FFC", Offset = "0xB84FFC", VA = "0xB84FFC")]
		protected Vector3 GetBendDirection(Vector3 IKPosition, Vector3 bendNormal)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0xB810F0", Offset = "0xB810F0", VA = "0xB810F0")]
		public IKSolverTrigonometric()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001C5")]
	public class IKSolverVR : IKSolver
	{
		[Serializable]
		[Token(Token = "0x20001C6")]
		public class Arm : BodyPart
		{
			[Serializable]
			[Token(Token = "0x20001C7")]
			public enum ShoulderRotationMode
			{
				[Token(Token = "0x4000A1C")]
				YawPitch,
				[Token(Token = "0x4000A1D")]
				FromTo
			}

			[Token(Token = "0x4000A00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Tooltip("The hand target")]
			public Transform target;

			[Token(Token = "0x4000A01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("The elbow will be bent towards this Transform if 'Bend Goal Weight' > 0.")]
			public Transform bendGoal;

			[Token(Token = "0x4000A02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("Positional weight of the hand target.")]
			[Range(0f, 1f)]
			public float positionWeight;

			[Token(Token = "0x4000A03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[Tooltip("Rotational weight of the hand target")]
			[Range(0f, 1f)]
			public float rotationWeight;

			[Token(Token = "0x4000A04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[Tooltip("Different techniques for shoulder bone rotation.")]
			public ShoulderRotationMode shoulderRotationMode;

			[Token(Token = "0x4000A05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[Tooltip("The weight of shoulder rotation")]
			[Range(0f, 1f)]
			public float shoulderRotationWeight;

			[Token(Token = "0x4000A06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[Tooltip("If greater than 0, will bend the elbow towards the 'Bend Goal' Transform.")]
			[Range(0f, 1f)]
			public float bendGoalWeight;

			[Token(Token = "0x4000A07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[Range(-180f, 180f)]
			[Tooltip("Angular offset of the elbow bending direction.")]
			public float swivelOffset;

			[Token(Token = "0x4000A08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[Tooltip("Local axis of the hand bone that points from the wrist towards the palm. Used for defining hand bone orientation.")]
			public Vector3 wristToPalmAxis;

			[Token(Token = "0x4000A09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			[Tooltip("Local axis of the hand bone that points from the palm towards the thumb. Used for defining hand bone orientation.")]
			public Vector3 palmToThumbAxis;

			[Token(Token = "0x4000A0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			[Tooltip("Use this to make the arm shorter/longer.")]
			[Range(0.01f, 2f)]
			public float armLengthMlp;

			[Token(Token = "0x4000A0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[Tooltip("Evaluates stretching of the arm by target distance relative to arm length. Value at time 1 represents stretching amount at the point where distance to the target is equal to arm length. Value at time 2 represents stretching amount at the point where distance to the target is double the arm length. Value represents the amount of stretching. Linear stretching would be achieved with a linear curve going up by 45 degrees. Increase the range of stretching by moving the last key up and right at the same amount. Smoothing in the curve can help reduce elbow snapping (start stretching the arm slightly before target distance reaches arm length).")]
			public AnimationCurve stretchCurve;

			[NonSerialized]
			[Token(Token = "0x4000A0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[HideInInspector]
			public Vector3 IKPosition;

			[NonSerialized]
			[Token(Token = "0x4000A0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			[HideInInspector]
			public Quaternion IKRotation;

			[NonSerialized]
			[Token(Token = "0x4000A0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
			[HideInInspector]
			public Vector3 bendDirection;

			[NonSerialized]
			[Token(Token = "0x4000A0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			[HideInInspector]
			public Vector3 handPositionOffset;

			[Token(Token = "0x4000A12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			private bool hasShoulder;

			[Token(Token = "0x4000A13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
			private Vector3 chestForwardAxis;

			[Token(Token = "0x4000A14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			private Vector3 chestUpAxis;

			[Token(Token = "0x4000A15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
			private Quaternion chestRotation;

			[Token(Token = "0x4000A16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
			private Vector3 chestForward;

			[Token(Token = "0x4000A17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
			private Vector3 chestUp;

			[Token(Token = "0x4000A18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
			private Quaternion forearmRelToUpperArm;

			[Token(Token = "0x4000A19")]
			private const float yawOffsetAngle = 45f;

			[Token(Token = "0x4000A1A")]
			private const float pitchOffsetAngle = -30f;

			[Token(Token = "0x170000C5")]
			public Vector3 position
			{
				[Token(Token = "0x6000AC3")]
				[Address(RVA = "0xB88F54", Offset = "0xB88F54", VA = "0xB88F54")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000AC4")]
				[Address(RVA = "0xB88F60", Offset = "0xB88F60", VA = "0xB88F60")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000C6")]
			public Quaternion rotation
			{
				[Token(Token = "0x6000AC5")]
				[Address(RVA = "0xB88F6C", Offset = "0xB88F6C", VA = "0xB88F6C")]
				[CompilerGenerated]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6000AC6")]
				[Address(RVA = "0xB88F78", Offset = "0xB88F78", VA = "0xB88F78")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000C7")]
			private VirtualBone shoulder
			{
				[Token(Token = "0x6000AC7")]
				[Address(RVA = "0xB88F84", Offset = "0xB88F84", VA = "0xB88F84")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000C8")]
			private VirtualBone upperArm
			{
				[Token(Token = "0x6000AC8")]
				[Address(RVA = "0xB88FAC", Offset = "0xB88FAC", VA = "0xB88FAC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000C9")]
			private VirtualBone forearm
			{
				[Token(Token = "0x6000AC9")]
				[Address(RVA = "0xB88FD8", Offset = "0xB88FD8", VA = "0xB88FD8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000CA")]
			private VirtualBone hand
			{
				[Token(Token = "0x6000ACA")]
				[Address(RVA = "0xB89004", Offset = "0xB89004", VA = "0xB89004")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000ACB")]
			[Address(RVA = "0xB89030", Offset = "0xB89030", VA = "0xB89030", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6000ACC")]
			[Address(RVA = "0xB89840", Offset = "0xB89840", VA = "0xB89840", Slot = "5")]
			public override void PreSolve()
			{
			}

			[Token(Token = "0x6000ACD")]
			[Address(RVA = "0xB89AEC", Offset = "0xB89AEC", VA = "0xB89AEC", Slot = "7")]
			public override void ApplyOffsets()
			{
			}

			[Token(Token = "0x6000ACE")]
			[Address(RVA = "0xB89B10", Offset = "0xB89B10", VA = "0xB89B10")]
			private void Stretching()
			{
			}

			[Token(Token = "0x6000ACF")]
			[Address(RVA = "0xB89E60", Offset = "0xB89E60", VA = "0xB89E60")]
			public void Solve(bool isLeft)
			{
			}

			[Token(Token = "0x6000AD0")]
			[Address(RVA = "0xB8BE30", Offset = "0xB8BE30", VA = "0xB8BE30", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x6000AD1")]
			[Address(RVA = "0xB8BE88", Offset = "0xB8BE88", VA = "0xB8BE88", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x6000AD2")]
			[Address(RVA = "0xB8B1E4", Offset = "0xB8B1E4", VA = "0xB8B1E4")]
			private float DamperValue(float value, float min, float max, float weight = 1f)
			{
				return default(float);
			}

			[Token(Token = "0x6000AD3")]
			[Address(RVA = "0xB8B3EC", Offset = "0xB8B3EC", VA = "0xB8B3EC")]
			private Vector3 GetBendNormal(Vector3 dir)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000AD4")]
			[Address(RVA = "0xB8C094", Offset = "0xB8C094", VA = "0xB8C094")]
			private void Visualize(VirtualBone bone1, VirtualBone bone2, VirtualBone bone3, Color color)
			{
			}

			[Token(Token = "0x6000AD5")]
			[Address(RVA = "0xB8C1AC", Offset = "0xB8C1AC", VA = "0xB8C1AC")]
			public Arm()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001C8")]
		public abstract class BodyPart
		{
			[Token(Token = "0x4000A20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			public VirtualBone[] bones;

			[Token(Token = "0x4000A21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			protected bool initiated;

			[Token(Token = "0x4000A22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			protected Vector3 rootPosition;

			[Token(Token = "0x4000A23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			protected Quaternion rootRotation;

			[Token(Token = "0x4000A24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			protected int index;

			[Token(Token = "0x170000CB")]
			public float sqrMag
			{
				[Token(Token = "0x6000ADB")]
				[Address(RVA = "0xB8C394", Offset = "0xB8C394", VA = "0xB8C394")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000ADC")]
				[Address(RVA = "0xB8C39C", Offset = "0xB8C39C", VA = "0xB8C39C")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000CC")]
			public float mag
			{
				[Token(Token = "0x6000ADD")]
				[Address(RVA = "0xB8C3A4", Offset = "0xB8C3A4", VA = "0xB8C3A4")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000ADE")]
				[Address(RVA = "0xB8C3AC", Offset = "0xB8C3AC", VA = "0xB8C3AC")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6000AD6")]
			protected abstract void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, int rootIndex, int index);

			[Token(Token = "0x6000AD7")]
			public abstract void PreSolve();

			[Token(Token = "0x6000AD8")]
			public abstract void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations);

			[Token(Token = "0x6000AD9")]
			public abstract void ApplyOffsets();

			[Token(Token = "0x6000ADA")]
			public abstract void ResetOffsets();

			[Token(Token = "0x6000ADF")]
			[Address(RVA = "0xB8C3B4", Offset = "0xB8C3B4", VA = "0xB8C3B4")]
			public void Read(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6000AE0")]
			[Address(RVA = "0xB8C5C4", Offset = "0xB8C5C4", VA = "0xB8C5C4")]
			public void MovePosition(Vector3 position)
			{
			}

			[Token(Token = "0x6000AE1")]
			[Address(RVA = "0xB8C64C", Offset = "0xB8C64C", VA = "0xB8C64C")]
			public void MoveRotation(Quaternion rotation)
			{
			}

			[Token(Token = "0x6000AE2")]
			[Address(RVA = "0xB8C850", Offset = "0xB8C850", VA = "0xB8C850")]
			public void Translate(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000AE3")]
			[Address(RVA = "0xB8C898", Offset = "0xB8C898", VA = "0xB8C898")]
			public void TranslateRoot(Vector3 newRootPos, Quaternion newRootRot)
			{
			}

			[Token(Token = "0x6000AE4")]
			[Address(RVA = "0xB8BCCC", Offset = "0xB8BCCC", VA = "0xB8BCCC")]
			public void RotateTo(VirtualBone bone, Quaternion rotation, float weight = 1f)
			{
			}

			[Token(Token = "0x6000AE5")]
			[Address(RVA = "0xB8C9BC", Offset = "0xB8C9BC", VA = "0xB8C9BC")]
			public void Visualize(Color color)
			{
			}

			[Token(Token = "0x6000AE6")]
			[Address(RVA = "0xB8CAE0", Offset = "0xB8CAE0", VA = "0xB8CAE0")]
			public void Visualize()
			{
			}

			[Token(Token = "0x6000AE7")]
			[Address(RVA = "0xB8C2F0", Offset = "0xB8C2F0", VA = "0xB8C2F0")]
			protected BodyPart()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001C9")]
		public class Footstep
		{
			[Token(Token = "0x4000A25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float stepSpeed;

			[Token(Token = "0x4000A26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 characterSpaceOffset;

			[Token(Token = "0x4000A27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 position;

			[Token(Token = "0x4000A28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Quaternion rotation;

			[Token(Token = "0x4000A29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Quaternion stepToRootRot;

			[Token(Token = "0x4000A2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public bool isSupportLeg;

			[Token(Token = "0x4000A2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			public Vector3 stepFrom;

			[Token(Token = "0x4000A2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public Vector3 stepTo;

			[Token(Token = "0x4000A2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public Quaternion stepFromRot;

			[Token(Token = "0x4000A2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			public Quaternion stepToRot;

			[Token(Token = "0x4000A30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			private Quaternion footRelativeToRoot;

			[Token(Token = "0x4000A31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			private float supportLegW;

			[Token(Token = "0x4000A32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			private float supportLegWV;

			[Token(Token = "0x170000CD")]
			public bool isStepping
			{
				[Token(Token = "0x6000AE8")]
				[Address(RVA = "0xB8CAF4", Offset = "0xB8CAF4", VA = "0xB8CAF4")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170000CE")]
			public float stepProgress
			{
				[Token(Token = "0x6000AE9")]
				[Address(RVA = "0xB8CB08", Offset = "0xB8CB08", VA = "0xB8CB08")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000AEA")]
				[Address(RVA = "0xB8CB10", Offset = "0xB8CB10", VA = "0xB8CB10")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6000AEB")]
			[Address(RVA = "0xB8CB18", Offset = "0xB8CB18", VA = "0xB8CB18")]
			public Footstep(Quaternion rootRotation, Vector3 footPosition, Quaternion footRotation, Vector3 characterSpaceOffset)
			{
			}

			[Token(Token = "0x6000AEC")]
			[Address(RVA = "0xB8CC18", Offset = "0xB8CC18", VA = "0xB8CC18")]
			public void Reset(Quaternion rootRotation, Vector3 footPosition, Quaternion footRotation)
			{
			}

			[Token(Token = "0x6000AED")]
			[Address(RVA = "0xB8CCF4", Offset = "0xB8CCF4", VA = "0xB8CCF4")]
			public void StepTo(Vector3 p, Quaternion rootRotation)
			{
			}

			[Token(Token = "0x6000AEE")]
			[Address(RVA = "0xB8CDA4", Offset = "0xB8CDA4", VA = "0xB8CDA4")]
			public void UpdateStepping(Vector3 p, Quaternion rootRotation, float speed)
			{
			}

			[Token(Token = "0x6000AEF")]
			[Address(RVA = "0xB8CFAC", Offset = "0xB8CFAC", VA = "0xB8CFAC")]
			public void UpdateStanding(Quaternion rootRotation, float minAngle, float speed)
			{
			}

			[Token(Token = "0x6000AF0")]
			[Address(RVA = "0xB8D190", Offset = "0xB8D190", VA = "0xB8D190")]
			public void Update(InterpolationMode interpolation, UnityEvent onStep)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001CA")]
		public class Leg : BodyPart
		{
			[Token(Token = "0x4000A33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Tooltip("The toe/foot target.")]
			public Transform target;

			[Token(Token = "0x4000A34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("The knee will be bent towards this Transform if 'Bend Goal Weight' > 0.")]
			public Transform bendGoal;

			[Token(Token = "0x4000A35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Range(0f, 1f)]
			[Tooltip("Positional weight of the toe/foot target.")]
			public float positionWeight;

			[Token(Token = "0x4000A36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[Range(0f, 1f)]
			[Tooltip("Rotational weight of the toe/foot target.")]
			public float rotationWeight;

			[Token(Token = "0x4000A37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[Range(0f, 1f)]
			[Tooltip("If greater than 0, will bend the knee towards the 'Bend Goal' Transform.")]
			public float bendGoalWeight;

			[Token(Token = "0x4000A38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[Range(-180f, 180f)]
			[Tooltip("Angular offset of the knee bending direction.")]
			public float swivelOffset;

			[NonSerialized]
			[Token(Token = "0x4000A39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[HideInInspector]
			public Vector3 IKPosition;

			[NonSerialized]
			[Token(Token = "0x4000A3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			[HideInInspector]
			public Quaternion IKRotation;

			[NonSerialized]
			[Token(Token = "0x4000A3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			[HideInInspector]
			public Vector3 footPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4000A3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[HideInInspector]
			public Vector3 heelPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4000A3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			[HideInInspector]
			public Quaternion footRotationOffset;

			[NonSerialized]
			[Token(Token = "0x4000A3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
			[HideInInspector]
			public float currentMag;

			[Token(Token = "0x4000A43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
			private Vector3 footPosition;

			[Token(Token = "0x4000A44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			private Quaternion footRotation;

			[Token(Token = "0x4000A45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			private Vector3 bendNormal;

			[Token(Token = "0x4000A46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
			private Quaternion calfRelToThigh;

			[Token(Token = "0x170000CF")]
			public Vector3 position
			{
				[Token(Token = "0x6000AF1")]
				[Address(RVA = "0xB8D304", Offset = "0xB8D304", VA = "0xB8D304")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000AF2")]
				[Address(RVA = "0xB8D310", Offset = "0xB8D310", VA = "0xB8D310")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000D0")]
			public Quaternion rotation
			{
				[Token(Token = "0x6000AF3")]
				[Address(RVA = "0xB8D31C", Offset = "0xB8D31C", VA = "0xB8D31C")]
				[CompilerGenerated]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6000AF4")]
				[Address(RVA = "0xB8D328", Offset = "0xB8D328", VA = "0xB8D328")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000D1")]
			public bool hasToes
			{
				[Token(Token = "0x6000AF5")]
				[Address(RVA = "0xB8D334", Offset = "0xB8D334", VA = "0xB8D334")]
				[CompilerGenerated]
				get
				{
					return default(bool);
				}
				[Token(Token = "0x6000AF6")]
				[Address(RVA = "0xB8D33C", Offset = "0xB8D33C", VA = "0xB8D33C")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000D2")]
			public VirtualBone thigh
			{
				[Token(Token = "0x6000AF7")]
				[Address(RVA = "0xB8D348", Offset = "0xB8D348", VA = "0xB8D348")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D3")]
			private VirtualBone calf
			{
				[Token(Token = "0x6000AF8")]
				[Address(RVA = "0xB8D370", Offset = "0xB8D370", VA = "0xB8D370")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D4")]
			private VirtualBone foot
			{
				[Token(Token = "0x6000AF9")]
				[Address(RVA = "0xB8D39C", Offset = "0xB8D39C", VA = "0xB8D39C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D5")]
			private VirtualBone toes
			{
				[Token(Token = "0x6000AFA")]
				[Address(RVA = "0xB8D3C8", Offset = "0xB8D3C8", VA = "0xB8D3C8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D6")]
			public VirtualBone lastBone
			{
				[Token(Token = "0x6000AFB")]
				[Address(RVA = "0xB8D3F4", Offset = "0xB8D3F4", VA = "0xB8D3F4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D7")]
			public Vector3 thighRelativeToPelvis
			{
				[Token(Token = "0x6000AFC")]
				[Address(RVA = "0xB8D428", Offset = "0xB8D428", VA = "0xB8D428")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000AFD")]
				[Address(RVA = "0xB8D434", Offset = "0xB8D434", VA = "0xB8D434")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6000AFE")]
			[Address(RVA = "0xB8D440", Offset = "0xB8D440", VA = "0xB8D440", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6000AFF")]
			[Address(RVA = "0xB8D900", Offset = "0xB8D900", VA = "0xB8D900", Slot = "5")]
			public override void PreSolve()
			{
			}

			[Token(Token = "0x6000B00")]
			[Address(RVA = "0xB8DED4", Offset = "0xB8DED4", VA = "0xB8DED4", Slot = "7")]
			public override void ApplyOffsets()
			{
			}

			[Token(Token = "0x6000B01")]
			[Address(RVA = "0xB8DE84", Offset = "0xB8DE84", VA = "0xB8DE84")]
			private void ApplyPositionOffset(Vector3 offset, float weight)
			{
			}

			[Token(Token = "0x6000B02")]
			[Address(RVA = "0xB8DC48", Offset = "0xB8DC48", VA = "0xB8DC48")]
			private void ApplyRotationOffset(Quaternion offset, float weight)
			{
			}

			[Token(Token = "0x6000B03")]
			[Address(RVA = "0xB8E3A0", Offset = "0xB8E3A0", VA = "0xB8E3A0")]
			public void Solve()
			{
			}

			[Token(Token = "0x6000B04")]
			[Address(RVA = "0xB8E6A0", Offset = "0xB8E6A0", VA = "0xB8E6A0", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x6000B05")]
			[Address(RVA = "0xB8E79C", Offset = "0xB8E79C", VA = "0xB8E79C", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x6000B06")]
			[Address(RVA = "0xB8E87C", Offset = "0xB8E87C", VA = "0xB8E87C")]
			public Leg()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001CB")]
		public class Locomotion
		{
			[Token(Token = "0x4000A47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Range(0f, 1f)]
			[Tooltip("Used for blending in/out of procedural locomotion.")]
			public float weight;

			[Token(Token = "0x4000A48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Tries to maintain this distance between the legs.")]
			public float footDistance;

			[Token(Token = "0x4000A49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Makes a step only if step target position is at least this far from the current footstep or the foot does not reach the current footstep anymore or footstep angle is past the 'Angle Threshold'.")]
			public float stepThreshold;

			[Token(Token = "0x4000A4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Tooltip("Makes a step only if step target position is at least 'Step Threshold' far from the current footstep or the foot does not reach the current footstep anymore or footstep angle is past this value.")]
			public float angleThreshold;

			[Token(Token = "0x4000A4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Multiplies angle of the center of mass - center of pressure vector. Larger value makes the character step sooner if losing balance.")]
			public float comAngleMlp;

			[Token(Token = "0x4000A4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("Maximum magnitude of head/hand target velocity used in prediction.")]
			public float maxVelocity;

			[Token(Token = "0x4000A4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("The amount of head/hand target velocity prediction.")]
			public float velocityFactor;

			[Token(Token = "0x4000A4E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Range(0.9f, 1f)]
			[Tooltip("How much can a leg be extended before it is forced to step to another position? 1 means fully stretched.")]
			public float maxLegStretch;

			[Token(Token = "0x4000A4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("The speed of lerping the root of the character towards the horizontal mid-point of the footsteps.")]
			public float rootSpeed;

			[Token(Token = "0x4000A50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[Tooltip("The speed of steps.")]
			public float stepSpeed;

			[Token(Token = "0x4000A51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[Tooltip("The height of the foot by normalized step progress (0 - 1).")]
			public AnimationCurve stepHeight;

			[Token(Token = "0x4000A52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[Tooltip("The height offset of the heel by normalized step progress (0 - 1).")]
			public AnimationCurve heelHeight;

			[Token(Token = "0x4000A53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Range(0f, 180f)]
			[Tooltip("Rotates the foot while the leg is not stepping to relax the twist rotation of the leg if ideal rotation is past this angle.")]
			public float relaxLegTwistMinAngle;

			[Token(Token = "0x4000A54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			[Tooltip("The speed of rotating the foot while the leg is not stepping to relax the twist rotation of the leg.")]
			public float relaxLegTwistSpeed;

			[Token(Token = "0x4000A55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("Interpolation mode of the step.")]
			public InterpolationMode stepInterpolation;

			[Token(Token = "0x4000A56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[Tooltip("Offset for the approximated center of mass.")]
			public Vector3 offset;

			[Token(Token = "0x4000A57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[HideInInspector]
			public bool blockingEnabled;

			[Token(Token = "0x4000A58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[HideInInspector]
			public LayerMask blockingLayers;

			[Token(Token = "0x4000A59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[HideInInspector]
			public float raycastRadius;

			[Token(Token = "0x4000A5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			[HideInInspector]
			public float raycastHeight;

			[Token(Token = "0x4000A5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[Tooltip("Called when the left foot has finished a step.")]
			public UnityEvent onLeftFootstep;

			[Token(Token = "0x4000A5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[Tooltip("Called when the right foot has finished a step")]
			public UnityEvent onRightFootstep;

			[Token(Token = "0x4000A5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			private Footstep[] footsteps;

			[Token(Token = "0x4000A5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			private Vector3 lastComPosition;

			[Token(Token = "0x4000A60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			private Vector3 comVelocity;

			[Token(Token = "0x4000A61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			private int leftFootIndex;

			[Token(Token = "0x4000A62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
			private int rightFootIndex;

			[Token(Token = "0x170000D8")]
			public Vector3 centerOfMass
			{
				[Token(Token = "0x6000B07")]
				[Address(RVA = "0xB8E8F8", Offset = "0xB8E8F8", VA = "0xB8E8F8")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000B08")]
				[Address(RVA = "0xB8E904", Offset = "0xB8E904", VA = "0xB8E904")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x170000D9")]
			public Vector3 leftFootstepPosition
			{
				[Token(Token = "0x6000B0E")]
				[Address(RVA = "0xB909D8", Offset = "0xB909D8", VA = "0xB909D8")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000DA")]
			public Vector3 rightFootstepPosition
			{
				[Token(Token = "0x6000B0F")]
				[Address(RVA = "0xB90A0C", Offset = "0xB90A0C", VA = "0xB90A0C")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000DB")]
			public Quaternion leftFootstepRotation
			{
				[Token(Token = "0x6000B10")]
				[Address(RVA = "0xB90A44", Offset = "0xB90A44", VA = "0xB90A44")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x170000DC")]
			public Quaternion rightFootstepRotation
			{
				[Token(Token = "0x6000B11")]
				[Address(RVA = "0xB90A78", Offset = "0xB90A78", VA = "0xB90A78")]
				get
				{
					return default(Quaternion);
				}
			}

			[Token(Token = "0x6000B09")]
			[Address(RVA = "0xB8E910", Offset = "0xB8E910", VA = "0xB8E910")]
			public void Initiate(Vector3[] positions, Quaternion[] rotations, bool hasToes)
			{
			}

			[Token(Token = "0x6000B0A")]
			[Address(RVA = "0xB8EC24", Offset = "0xB8EC24", VA = "0xB8EC24")]
			public void Reset(Vector3[] positions, Quaternion[] rotations)
			{
			}

			[Token(Token = "0x6000B0B")]
			[Address(RVA = "0xB8EE08", Offset = "0xB8EE08", VA = "0xB8EE08")]
			public void AddDeltaRotation(Quaternion delta, Vector3 pivot)
			{
			}

			[Token(Token = "0x6000B0C")]
			[Address(RVA = "0xB8F1D0", Offset = "0xB8F1D0", VA = "0xB8F1D0")]
			public void AddDeltaPosition(Vector3 delta)
			{
			}

			[Token(Token = "0x6000B0D")]
			[Address(RVA = "0xB8F288", Offset = "0xB8F288", VA = "0xB8F288")]
			public void Solve(VirtualBone rootBone, Spine spine, Leg leftLeg, Leg rightLeg, Arm leftArm, Arm rightArm, int supportLegIndex, out Vector3 leftFootPosition, out Vector3 rightFootPosition, out Quaternion leftFootRotation, out Quaternion rightFootRotation, out float leftFootOffset, out float rightFootOffset, out float leftHeelOffset, out float rightHeelOffset)
			{
			}

			[Token(Token = "0x6000B12")]
			[Address(RVA = "0xB90608", Offset = "0xB90608", VA = "0xB90608")]
			private bool StepBlocked(Vector3 fromPosition, Vector3 toPosition, Vector3 rootPosition)
			{
				return default(bool);
			}

			[Token(Token = "0x6000B13")]
			[Address(RVA = "0xB907BC", Offset = "0xB907BC", VA = "0xB907BC")]
			private bool CanStep()
			{
				return default(bool);
			}

			[Token(Token = "0x6000B14")]
			[Address(RVA = "0xB90828", Offset = "0xB90828", VA = "0xB90828")]
			private static bool GetLineSphereCollision(Vector3 lineStart, Vector3 lineEnd, Vector3 sphereCenter, float sphereRadius)
			{
				return default(bool);
			}

			[Token(Token = "0x6000B15")]
			[Address(RVA = "0xB90AB0", Offset = "0xB90AB0", VA = "0xB90AB0")]
			public Locomotion()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001CC")]
		public class Spine : BodyPart
		{
			[Token(Token = "0x4000A63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			[Tooltip("The head target.")]
			public Transform headTarget;

			[Token(Token = "0x4000A64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("The pelvis target, useful with seated rigs.")]
			public Transform pelvisTarget;

			[Token(Token = "0x4000A65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Range(0f, 1f)]
			[Tooltip("Positional weight of the head target.")]
			public float positionWeight;

			[Token(Token = "0x4000A66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			[Range(0f, 1f)]
			[Tooltip("Rotational weight of the head target.")]
			public float rotationWeight;

			[Token(Token = "0x4000A67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[Range(0f, 1f)]
			[Tooltip("Positional weight of the pelvis target.")]
			public float pelvisPositionWeight;

			[Token(Token = "0x4000A68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[Range(0f, 1f)]
			[Tooltip("Rotational weight of the pelvis target.")]
			public float pelvisRotationWeight;

			[Token(Token = "0x4000A69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			[Tooltip("If 'Chest Goal Weight' is greater than 0, the chest will be turned towards this Transform.")]
			public Transform chestGoal;

			[Token(Token = "0x4000A6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[Range(0f, 1f)]
			[Tooltip("Rotational weight of the chest target.")]
			public float chestGoalWeight;

			[Token(Token = "0x4000A6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			[Tooltip("Minimum height of the head from the root of the character.")]
			public float minHeadHeight;

			[Token(Token = "0x4000A6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			[Tooltip("Determines how much the body will follow the position of the head.")]
			[Range(0f, 1f)]
			public float bodyPosStiffness;

			[Token(Token = "0x4000A6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			[Tooltip("Determines how much the body will follow the rotation of the head.")]
			[Range(0f, 1f)]
			public float bodyRotStiffness;

			[Token(Token = "0x4000A6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			[FormerlySerializedAs("chestRotationWeight")]
			[Range(0f, 1f)]
			[Tooltip("Determines how much the chest will rotate to the rotation of the head.")]
			public float neckStiffness;

			[Token(Token = "0x4000A6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			[Tooltip("The amount of rotation applied to the chest based on hand positions.")]
			[Range(0f, 1f)]
			public float rotateChestByHands;

			[Token(Token = "0x4000A70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			[Tooltip("Clamps chest rotation.")]
			[Range(0f, 1f)]
			public float chestClampWeight;

			[Token(Token = "0x4000A71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			[Range(0f, 1f)]
			[Tooltip("Clamps head rotation.")]
			public float headClampWeight;

			[Token(Token = "0x4000A72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[Tooltip("Moves the body horizontally along -character.forward axis by that value when the player is crouching.")]
			public float moveBodyBackWhenCrouching;

			[Token(Token = "0x4000A73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
			[Tooltip("How much will the pelvis maintain it's animated position?")]
			[Range(0f, 1f)]
			public float maintainPelvisPosition;

			[Token(Token = "0x4000A74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			[Tooltip("Will automatically rotate the root of the character if the head target has turned past this angle.")]
			[Range(0f, 180f)]
			public float maxRootAngle;

			[NonSerialized]
			[Token(Token = "0x4000A75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
			[HideInInspector]
			public Vector3 IKPositionHead;

			[NonSerialized]
			[Token(Token = "0x4000A76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			[HideInInspector]
			public Quaternion IKRotationHead;

			[NonSerialized]
			[Token(Token = "0x4000A77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			[HideInInspector]
			public Vector3 IKPositionPelvis;

			[NonSerialized]
			[Token(Token = "0x4000A78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
			[HideInInspector]
			public Quaternion IKRotationPelvis;

			[NonSerialized]
			[Token(Token = "0x4000A79")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
			[HideInInspector]
			public Vector3 goalPositionChest;

			[NonSerialized]
			[Token(Token = "0x4000A7A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			[HideInInspector]
			public Vector3 pelvisPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4000A7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
			[HideInInspector]
			public Vector3 chestPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4000A7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			[HideInInspector]
			public Vector3 headPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4000A7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
			[HideInInspector]
			public Quaternion pelvisRotationOffset;

			[NonSerialized]
			[Token(Token = "0x4000A7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
			[HideInInspector]
			public Quaternion chestRotationOffset;

			[NonSerialized]
			[Token(Token = "0x4000A7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
			[HideInInspector]
			public Quaternion headRotationOffset;

			[NonSerialized]
			[Token(Token = "0x4000A80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
			[HideInInspector]
			public Vector3 faceDirection;

			[NonSerialized]
			[Token(Token = "0x4000A81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
			[HideInInspector]
			public Vector3 locomotionHeadPositionOffset;

			[NonSerialized]
			[Token(Token = "0x4000A82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
			[HideInInspector]
			public Vector3 headPosition;

			[Token(Token = "0x4000A84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
			private Quaternion headRotation;

			[Token(Token = "0x4000A85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
			private Quaternion anchorRelativeToHead;

			[Token(Token = "0x4000A86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
			private Quaternion pelvisRelativeRotation;

			[Token(Token = "0x4000A87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
			private Quaternion chestRelativeRotation;

			[Token(Token = "0x4000A88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
			private Vector3 headDeltaPosition;

			[Token(Token = "0x4000A89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
			private Quaternion pelvisDeltaRotation;

			[Token(Token = "0x4000A8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
			private Quaternion chestTargetRotation;

			[Token(Token = "0x4000A8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
			private int pelvisIndex;

			[Token(Token = "0x4000A8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
			private int spineIndex;

			[Token(Token = "0x4000A8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
			private int chestIndex;

			[Token(Token = "0x4000A8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
			private int neckIndex;

			[Token(Token = "0x4000A8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
			private int headIndex;

			[Token(Token = "0x4000A90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
			private float length;

			[Token(Token = "0x4000A91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
			private bool hasChest;

			[Token(Token = "0x4000A92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1ED")]
			private bool hasNeck;

			[Token(Token = "0x4000A93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
			private float headHeight;

			[Token(Token = "0x4000A94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
			private float sizeMlp;

			[Token(Token = "0x4000A95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
			private Vector3 chestForward;

			[Token(Token = "0x170000DD")]
			public VirtualBone pelvis
			{
				[Token(Token = "0x6000B16")]
				[Address(RVA = "0xB905A0", Offset = "0xB905A0", VA = "0xB905A0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000DE")]
			public VirtualBone firstSpineBone
			{
				[Token(Token = "0x6000B17")]
				[Address(RVA = "0xB90BC0", Offset = "0xB90BC0", VA = "0xB90BC0")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000DF")]
			public VirtualBone chest
			{
				[Token(Token = "0x6000B18")]
				[Address(RVA = "0xB90BF4", Offset = "0xB90BF4", VA = "0xB90BF4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000E0")]
			private VirtualBone neck
			{
				[Token(Token = "0x6000B19")]
				[Address(RVA = "0xB90C3C", Offset = "0xB90C3C", VA = "0xB90C3C")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000E1")]
			public VirtualBone head
			{
				[Token(Token = "0x6000B1A")]
				[Address(RVA = "0xB905D4", Offset = "0xB905D4", VA = "0xB905D4")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000E2")]
			public Quaternion anchorRotation
			{
				[Token(Token = "0x6000B1B")]
				[Address(RVA = "0xB90C70", Offset = "0xB90C70", VA = "0xB90C70")]
				[CompilerGenerated]
				get
				{
					return default(Quaternion);
				}
				[Token(Token = "0x6000B1C")]
				[Address(RVA = "0xB90C84", Offset = "0xB90C84", VA = "0xB90C84")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6000B1D")]
			[Address(RVA = "0xB90C98", Offset = "0xB90C98", VA = "0xB90C98", Slot = "4")]
			protected override void OnRead(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes, int rootIndex, int index)
			{
			}

			[Token(Token = "0x6000B1E")]
			[Address(RVA = "0xB918BC", Offset = "0xB918BC", VA = "0xB918BC", Slot = "5")]
			public override void PreSolve()
			{
			}

			[Token(Token = "0x6000B1F")]
			[Address(RVA = "0xB91A68", Offset = "0xB91A68", VA = "0xB91A68", Slot = "7")]
			public override void ApplyOffsets()
			{
			}

			[Token(Token = "0x6000B20")]
			[Address(RVA = "0xB92068", Offset = "0xB92068", VA = "0xB92068")]
			private void CalculateChestTargetRotation(VirtualBone rootBone, Arm[] arms)
			{
			}

			[Token(Token = "0x6000B21")]
			[Address(RVA = "0xB9269C", Offset = "0xB9269C", VA = "0xB9269C")]
			public void Solve(VirtualBone rootBone, Leg[] legs, Arm[] arms)
			{
			}

			[Token(Token = "0x6000B22")]
			[Address(RVA = "0xB92F5C", Offset = "0xB92F5C", VA = "0xB92F5C")]
			private void FABRIKPass(Vector3 animatedPelvisPos, Vector3 rootUp)
			{
			}

			[Token(Token = "0x6000B23")]
			[Address(RVA = "0xB93654", Offset = "0xB93654", VA = "0xB93654")]
			private void SolvePelvis()
			{
			}

			[Token(Token = "0x6000B24")]
			[Address(RVA = "0xB93C58", Offset = "0xB93C58", VA = "0xB93C58", Slot = "6")]
			public override void Write(ref Vector3[] solvedPositions, ref Quaternion[] solvedRotations)
			{
			}

			[Token(Token = "0x6000B25")]
			[Address(RVA = "0xB93E28", Offset = "0xB93E28", VA = "0xB93E28", Slot = "8")]
			public override void ResetOffsets()
			{
			}

			[Token(Token = "0x6000B26")]
			[Address(RVA = "0xB922AC", Offset = "0xB922AC", VA = "0xB922AC")]
			private void AdjustChestByHands(ref Quaternion chestTargetRotation, Arm[] arms)
			{
			}

			[Token(Token = "0x6000B27")]
			[Address(RVA = "0xB93368", Offset = "0xB93368", VA = "0xB93368")]
			public void InverseTranslateToHead(Leg[] legs, bool limited, bool useCurrentLegMag, Vector3 offset, float w)
			{
			}

			[Token(Token = "0x6000B28")]
			[Address(RVA = "0xB92B64", Offset = "0xB92B64", VA = "0xB92B64")]
			private void TranslatePelvis(Leg[] legs, Vector3 deltaPosition, Quaternion deltaRotation)
			{
			}

			[Token(Token = "0x6000B29")]
			[Address(RVA = "0xB93EF8", Offset = "0xB93EF8", VA = "0xB93EF8")]
			private Vector3 LimitPelvisPosition(Leg[] legs, Vector3 pelvisPosition, bool useCurrentLegMag, int it = 2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000B2A")]
			[Address(RVA = "0xB93458", Offset = "0xB93458", VA = "0xB93458")]
			private void Bend(VirtualBone[] bones, int firstIndex, int lastIndex, Quaternion targetRotation, float clampWeight, bool uniformWeight, float w)
			{
			}

			[Token(Token = "0x6000B2B")]
			[Address(RVA = "0xB93150", Offset = "0xB93150", VA = "0xB93150")]
			private void Bend(VirtualBone[] bones, int firstIndex, int lastIndex, Quaternion targetRotation, Quaternion rotationOffset, float clampWeight, bool uniformWeight, float w)
			{
			}

			[Token(Token = "0x6000B2C")]
			[Address(RVA = "0xB94198", Offset = "0xB94198", VA = "0xB94198")]
			public Spine()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001CD")]
		public enum PositionOffset
		{
			[Token(Token = "0x4000A97")]
			Pelvis,
			[Token(Token = "0x4000A98")]
			Chest,
			[Token(Token = "0x4000A99")]
			Head,
			[Token(Token = "0x4000A9A")]
			LeftHand,
			[Token(Token = "0x4000A9B")]
			RightHand,
			[Token(Token = "0x4000A9C")]
			LeftFoot,
			[Token(Token = "0x4000A9D")]
			RightFoot,
			[Token(Token = "0x4000A9E")]
			LeftHeel,
			[Token(Token = "0x4000A9F")]
			RightHeel
		}

		[Serializable]
		[Token(Token = "0x20001CE")]
		public enum RotationOffset
		{
			[Token(Token = "0x4000AA1")]
			Pelvis,
			[Token(Token = "0x4000AA2")]
			Chest,
			[Token(Token = "0x4000AA3")]
			Head
		}

		[Serializable]
		[Token(Token = "0x20001CF")]
		public class VirtualBone
		{
			[Token(Token = "0x4000AA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 readPosition;

			[Token(Token = "0x4000AA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Quaternion readRotation;

			[Token(Token = "0x4000AA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 solverPosition;

			[Token(Token = "0x4000AA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Quaternion solverRotation;

			[Token(Token = "0x4000AA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public float length;

			[Token(Token = "0x4000AA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public float sqrMag;

			[Token(Token = "0x4000AAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Vector3 axis;

			[Token(Token = "0x6000B2D")]
			[Address(RVA = "0xB897B0", Offset = "0xB897B0", VA = "0xB897B0")]
			public VirtualBone(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000B2E")]
			[Address(RVA = "0xB89820", Offset = "0xB89820", VA = "0xB89820")]
			public void Read(Vector3 position, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000B2F")]
			[Address(RVA = "0xB942A4", Offset = "0xB942A4", VA = "0xB942A4")]
			public static void SwingRotation(VirtualBone[] bones, int index, Vector3 swingTarget, float weight = 1f)
			{
			}

			[Token(Token = "0x6000B30")]
			[Address(RVA = "0xB8C464", Offset = "0xB8C464", VA = "0xB8C464")]
			public static float PreSolve(ref VirtualBone[] bones)
			{
				return default(float);
			}

			[Token(Token = "0x6000B31")]
			[Address(RVA = "0xB8C6E0", Offset = "0xB8C6E0", VA = "0xB8C6E0")]
			public static void RotateAroundPoint(VirtualBone[] bones, int index, Vector3 point, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000B32")]
			[Address(RVA = "0xB944A4", Offset = "0xB944A4", VA = "0xB944A4")]
			public static void RotateBy(VirtualBone[] bones, int index, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000B33")]
			[Address(RVA = "0xB8B264", Offset = "0xB8B264", VA = "0xB8B264")]
			public static void RotateBy(VirtualBone[] bones, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000B34")]
			[Address(RVA = "0xB9464C", Offset = "0xB9464C", VA = "0xB9464C")]
			public static void RotateTo(VirtualBone[] bones, int index, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000B35")]
			[Address(RVA = "0xB8B8E8", Offset = "0xB8B8E8", VA = "0xB8B8E8")]
			public static void SolveTrigonometric(VirtualBone[] bones, int first, int second, int third, Vector3 targetPosition, Vector3 bendNormal, float weight)
			{
			}

			[Token(Token = "0x6000B36")]
			[Address(RVA = "0xB946F0", Offset = "0xB946F0", VA = "0xB946F0")]
			private static Vector3 GetDirectionToBendPoint(Vector3 direction, float directionMag, Vector3 bendDirection, float sqrMag1, float sqrMag2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000B37")]
			[Address(RVA = "0xB938FC", Offset = "0xB938FC", VA = "0xB938FC")]
			public static void SolveFABRIK(VirtualBone[] bones, Vector3 startPosition, Vector3 targetPosition, float weight, float minNormalizedTargetDistance, int iterations, float length, Vector3 startOffset)
			{
			}

			[Token(Token = "0x6000B38")]
			[Address(RVA = "0xB94848", Offset = "0xB94848", VA = "0xB94848")]
			private static Vector3 SolveFABRIKJoint(Vector3 pos1, Vector3 pos2, float length)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000B39")]
			[Address(RVA = "0xB9495C", Offset = "0xB9495C", VA = "0xB9495C")]
			public static void SolveCCD(VirtualBone[] bones, Vector3 targetPosition, float weight, int iterations)
			{
			}
		}

		[Token(Token = "0x40009DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform[] solverTransforms;

		[Token(Token = "0x40009E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool hasChest;

		[Token(Token = "0x40009E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool hasNeck;

		[Token(Token = "0x40009E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		private bool hasShoulders;

		[Token(Token = "0x40009E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		private bool hasToes;

		[Token(Token = "0x40009E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3[] readPositions;

		[Token(Token = "0x40009E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion[] readRotations;

		[Token(Token = "0x40009E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3[] solvedPositions;

		[Token(Token = "0x40009E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Quaternion[] solvedRotations;

		[Token(Token = "0x40009E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Quaternion[] defaultLocalRotations;

		[Token(Token = "0x40009E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3[] defaultLocalPositions;

		[Token(Token = "0x40009EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 rootV;

		[Token(Token = "0x40009EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 rootVelocity;

		[Token(Token = "0x40009EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 bodyOffset;

		[Token(Token = "0x40009ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int supportLegIndex;

		[Token(Token = "0x40009EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("If true, will keep the toes planted even if head target is out of reach.")]
		public bool plantFeet;

		[Token(Token = "0x40009F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("The spine solver.")]
		public Spine spine;

		[Token(Token = "0x40009F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("The left arm solver.")]
		public Arm leftArm;

		[Token(Token = "0x40009F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("The right arm solver.")]
		public Arm rightArm;

		[Token(Token = "0x40009F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("The left leg solver.")]
		public Leg leftLeg;

		[Token(Token = "0x40009F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("The right leg solver.")]
		public Leg rightLeg;

		[Token(Token = "0x40009F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Tooltip("The procedural locomotion solver.")]
		public Locomotion locomotion;

		[Token(Token = "0x40009F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Leg[] legs;

		[Token(Token = "0x40009F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Arm[] arms;

		[Token(Token = "0x40009F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Vector3 headPosition;

		[Token(Token = "0x40009F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private Vector3 headDeltaPosition;

		[Token(Token = "0x40009FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Vector3 raycastOriginPelvis;

		[Token(Token = "0x40009FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private Vector3 lastOffset;

		[Token(Token = "0x40009FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Vector3 debugPos1;

		[Token(Token = "0x40009FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private Vector3 debugPos2;

		[Token(Token = "0x40009FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private Vector3 debugPos3;

		[Token(Token = "0x40009FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private Vector3 debugPos4;

		[Token(Token = "0x170000C4")]
		[HideInInspector]
		public VirtualBone rootBone
		{
			[Token(Token = "0x6000ABE")]
			[Address(RVA = "0xB88C50", Offset = "0xB88C50", VA = "0xB88C50")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000ABF")]
			[Address(RVA = "0xB88C58", Offset = "0xB88C58", VA = "0xB88C58")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000AA5")]
		[Address(RVA = "0xB85254", Offset = "0xB85254", VA = "0xB85254")]
		public void SetToReferences(VRIK.References references)
		{
		}

		[Token(Token = "0x6000AA6")]
		[Address(RVA = "0xB85680", Offset = "0xB85680", VA = "0xB85680")]
		public void GuessHandOrientations(VRIK.References references, bool onlyIfZero)
		{
		}

		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0xB85514", Offset = "0xB85514", VA = "0xB85514")]
		public void DefaultAnimationCurves()
		{
		}

		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0xB85EA8", Offset = "0xB85EA8", VA = "0xB85EA8")]
		public void AddPositionOffset(PositionOffset positionOffset, Vector3 value)
		{
		}

		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0xB85FEC", Offset = "0xB85FEC", VA = "0xB85FEC")]
		public void AddRotationOffset(RotationOffset rotationOffset, Vector3 value)
		{
		}

		[Token(Token = "0x6000AAA")]
		[Address(RVA = "0xB8602C", Offset = "0xB8602C", VA = "0xB8602C")]
		public void AddRotationOffset(RotationOffset rotationOffset, Quaternion value)
		{
		}

		[Token(Token = "0x6000AAB")]
		[Address(RVA = "0xB86150", Offset = "0xB86150", VA = "0xB86150")]
		public void AddPlatformMotion(Vector3 deltaPosition, Quaternion deltaRotation, Vector3 platformPivot)
		{
		}

		[Token(Token = "0x6000AAC")]
		[Address(RVA = "0xB8622C", Offset = "0xB8622C", VA = "0xB8622C")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000AAD")]
		[Address(RVA = "0xB869C0", Offset = "0xB869C0", VA = "0xB869C0", Slot = "9")]
		public override void StoreDefaultLocalState()
		{
		}

		[Token(Token = "0x6000AAE")]
		[Address(RVA = "0xB86B14", Offset = "0xB86B14", VA = "0xB86B14", Slot = "8")]
		public override void FixTransforms()
		{
		}

		[Token(Token = "0x6000AAF")]
		[Address(RVA = "0xB86C8C", Offset = "0xB86C8C", VA = "0xB86C8C", Slot = "6")]
		public override Point[] GetPoints()
		{
			return null;
		}

		[Token(Token = "0x6000AB0")]
		[Address(RVA = "0xB86CFC", Offset = "0xB86CFC", VA = "0xB86CFC", Slot = "7")]
		public override Point GetPoint(Transform transform)
		{
			return null;
		}

		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0xB86D6C", Offset = "0xB86D6C", VA = "0xB86D6C", Slot = "4")]
		public override bool IsValid(ref string message)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0xB86F74", Offset = "0xB86F74", VA = "0xB86F74")]
		private Vector3 GetNormal(Transform[] transforms)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0xB85968", Offset = "0xB85968", VA = "0xB85968")]
		private Vector3 GuessWristToPalmAxis(Transform hand, Transform forearm)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AB4")]
		[Address(RVA = "0xB85A4C", Offset = "0xB85A4C", VA = "0xB85A4C")]
		private Vector3 GuessPalmToThumbAxis(Transform hand, Transform forearm)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AB5")]
		[Address(RVA = "0xB85D94", Offset = "0xB85D94", VA = "0xB85D94")]
		private static Keyframe[] GetSineKeyframes(float mag)
		{
			return null;
		}

		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0xB8632C", Offset = "0xB8632C", VA = "0xB8632C")]
		private void UpdateSolverTransforms()
		{
		}

		[Token(Token = "0x6000AB7")]
		[Address(RVA = "0xB871E4", Offset = "0xB871E4", VA = "0xB871E4", Slot = "10")]
		protected override void OnInitiate()
		{
		}

		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0xB87210", Offset = "0xB87210", VA = "0xB87210", Slot = "11")]
		protected override void OnUpdate()
		{
		}

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0xB8832C", Offset = "0xB8832C", VA = "0xB8832C")]
		private void WriteTransforms()
		{
		}

		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0xB8647C", Offset = "0xB8647C", VA = "0xB8647C")]
		private void Read(Vector3[] positions, Quaternion[] rotations, bool hasChest, bool hasNeck, bool hasShoulders, bool hasToes)
		{
		}

		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0xB87268", Offset = "0xB87268", VA = "0xB87268")]
		private void Solve()
		{
		}

		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0xB884F0", Offset = "0xB884F0", VA = "0xB884F0")]
		private Vector3 GetPosition(int index)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000ABD")]
		[Address(RVA = "0xB8852C", Offset = "0xB8852C", VA = "0xB8852C")]
		private Quaternion GetRotation(int index)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000AC0")]
		[Address(RVA = "0xB881F8", Offset = "0xB881F8", VA = "0xB881F8")]
		private void Write()
		{
		}

		[Token(Token = "0x6000AC1")]
		[Address(RVA = "0xB88564", Offset = "0xB88564", VA = "0xB88564")]
		private Vector3 GetPelvisOffset()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AC2")]
		[Address(RVA = "0xB88C60", Offset = "0xB88C60", VA = "0xB88C60")]
		public IKSolverVR()
		{
		}
	}
	[Token(Token = "0x20001D0")]
	public class TwistRelaxer : MonoBehaviour
	{
		[Token(Token = "0x4000AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IK ik;

		[Token(Token = "0x4000AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		[Tooltip("The weight of relaxing the twist of this Transform")]
		public float weight;

		[Token(Token = "0x4000AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 1f)]
		[Tooltip("If 0.5, this Transform will be twisted half way from parent to child. If 1, the twist angle will be locked to the child and will rotate with along with it.")]
		public float parentChildCrossfade;

		[Token(Token = "0x4000AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(-180f, 180f)]
		[Tooltip("Rotation offset around the twist axis.")]
		public float twistAngleOffset;

		[Token(Token = "0x4000AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 twistAxis;

		[Token(Token = "0x4000AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 axis;

		[Token(Token = "0x4000AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 axisRelativeToParentDefault;

		[Token(Token = "0x4000AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 axisRelativeToChildDefault;

		[Token(Token = "0x4000AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform parent;

		[Token(Token = "0x4000AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform child;

		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0xB94B10", Offset = "0xB94B10", VA = "0xB94B10")]
		public void Relax()
		{
		}

		[Token(Token = "0x6000B3B")]
		[Address(RVA = "0xB94F54", Offset = "0xB94F54", VA = "0xB94F54")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B3C")]
		[Address(RVA = "0xB952EC", Offset = "0xB952EC", VA = "0xB952EC")]
		private void OnPostUpdate()
		{
		}

		[Token(Token = "0x6000B3D")]
		[Address(RVA = "0xB95364", Offset = "0xB95364", VA = "0xB95364")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000B3E")]
		[Address(RVA = "0xB953DC", Offset = "0xB953DC", VA = "0xB953DC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0xB95514", Offset = "0xB95514", VA = "0xB95514")]
		public TwistRelaxer()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D1")]
	public class InteractionEffector
	{
		[Token(Token = "0x4000AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Poser poser;

		[Token(Token = "0x4000AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private IKEffector effector;

		[Token(Token = "0x4000ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float timer;

		[Token(Token = "0x4000ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float length;

		[Token(Token = "0x4000ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float weight;

		[Token(Token = "0x4000ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float fadeInSpeed;

		[Token(Token = "0x4000ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float defaultPositionWeight;

		[Token(Token = "0x4000ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float defaultRotationWeight;

		[Token(Token = "0x4000AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float defaultPull;

		[Token(Token = "0x4000AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float defaultReach;

		[Token(Token = "0x4000AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float defaultPush;

		[Token(Token = "0x4000AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float defaultPushParent;

		[Token(Token = "0x4000AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float resetTimer;

		[Token(Token = "0x4000AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private bool positionWeightUsed;

		[Token(Token = "0x4000AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
		private bool rotationWeightUsed;

		[Token(Token = "0x4000AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
		private bool pullUsed;

		[Token(Token = "0x4000AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5F")]
		private bool reachUsed;

		[Token(Token = "0x4000AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool pushUsed;

		[Token(Token = "0x4000ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool pushParentUsed;

		[Token(Token = "0x4000ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		private bool pickedUp;

		[Token(Token = "0x4000ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		private bool defaults;

		[Token(Token = "0x4000ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private bool pickUpOnPostFBBIK;

		[Token(Token = "0x4000ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 pickUpPosition;

		[Token(Token = "0x4000ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 pausePositionRelative;

		[Token(Token = "0x4000AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Quaternion pickUpRotation;

		[Token(Token = "0x4000AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Quaternion pauseRotationRelative;

		[Token(Token = "0x4000AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private InteractionTarget interactionTarget;

		[Token(Token = "0x4000AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Transform target;

		[Token(Token = "0x4000AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private List<bool> triggered;

		[Token(Token = "0x4000AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private InteractionSystem interactionSystem;

		[Token(Token = "0x4000AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool started;

		[Token(Token = "0x170000E3")]
		public FullBodyBipedEffector effectorType
		{
			[Token(Token = "0x6000B40")]
			[Address(RVA = "0xB955B4", Offset = "0xB955B4", VA = "0xB955B4")]
			[CompilerGenerated]
			get
			{
				return default(FullBodyBipedEffector);
			}
			[Token(Token = "0x6000B41")]
			[Address(RVA = "0xB955BC", Offset = "0xB955BC", VA = "0xB955BC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000E4")]
		public bool isPaused
		{
			[Token(Token = "0x6000B42")]
			[Address(RVA = "0xB955C4", Offset = "0xB955C4", VA = "0xB955C4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B43")]
			[Address(RVA = "0xB955CC", Offset = "0xB955CC", VA = "0xB955CC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000E5")]
		public InteractionObject interactionObject
		{
			[Token(Token = "0x6000B44")]
			[Address(RVA = "0xB955D8", Offset = "0xB955D8", VA = "0xB955D8")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B45")]
			[Address(RVA = "0xB955E0", Offset = "0xB955E0", VA = "0xB955E0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000E6")]
		public bool inInteraction
		{
			[Token(Token = "0x6000B46")]
			[Address(RVA = "0xB955E8", Offset = "0xB955E8", VA = "0xB955E8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000E7")]
		public float progress
		{
			[Token(Token = "0x6000B4F")]
			[Address(RVA = "0xB976AC", Offset = "0xB976AC", VA = "0xB976AC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000B47")]
		[Address(RVA = "0xB95648", Offset = "0xB95648", VA = "0xB95648")]
		public InteractionEffector(FullBodyBipedEffector effectorType)
		{
		}

		[Token(Token = "0x6000B48")]
		[Address(RVA = "0xB956E4", Offset = "0xB956E4", VA = "0xB956E4")]
		public void Initiate(InteractionSystem interactionSystem)
		{
		}

		[Token(Token = "0x6000B49")]
		[Address(RVA = "0xB957A4", Offset = "0xB957A4", VA = "0xB957A4")]
		private void StoreDefaults()
		{
		}

		[Token(Token = "0x6000B4A")]
		[Address(RVA = "0xB958D8", Offset = "0xB958D8", VA = "0xB958D8")]
		public bool ResetToDefaults(float speed)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B4B")]
		[Address(RVA = "0xB95C1C", Offset = "0xB95C1C", VA = "0xB95C1C")]
		public bool Pause()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B4C")]
		[Address(RVA = "0xB95D3C", Offset = "0xB95D3C", VA = "0xB95D3C")]
		public bool Resume()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B4D")]
		[Address(RVA = "0xB95D90", Offset = "0xB95D90", VA = "0xB95D90")]
		public bool Start(InteractionObject interactionObject, string tag, float fadeInTime, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0xB96434", Offset = "0xB96434", VA = "0xB96434")]
		public void Update(Transform root, float speed)
		{
		}

		[Token(Token = "0x6000B50")]
		[Address(RVA = "0xB96EF4", Offset = "0xB96EF4", VA = "0xB96EF4")]
		private void TriggerUntriggeredEvents(bool checkTime, out bool pickUp, out bool pause)
		{
		}

		[Token(Token = "0x6000B51")]
		[Address(RVA = "0xB97114", Offset = "0xB97114", VA = "0xB97114")]
		private void PickUp(Transform root)
		{
		}

		[Token(Token = "0x6000B52")]
		[Address(RVA = "0xB97544", Offset = "0xB97544", VA = "0xB97544")]
		public bool Stop()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B53")]
		[Address(RVA = "0xB97820", Offset = "0xB97820", VA = "0xB97820")]
		public void OnPostFBBIK()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D2")]
	public class InteractionLookAt
	{
		[Token(Token = "0x4000AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Tooltip("(Optional) reference to the LookAtIK component that will be used to make the character look at the objects that it is interacting with.")]
		public LookAtIK ik;

		[Token(Token = "0x4000AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Interpolation speed of the LookAtIK target.")]
		public float lerpSpeed;

		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Interpolation speed of the LookAtIK weight.")]
		public float weightSpeed;

		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public bool isPaused;

		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform lookAtTarget;

		[Token(Token = "0x4000ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float stopLookTime;

		[Token(Token = "0x4000ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float weight;

		[Token(Token = "0x4000ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool firstFBBIKSolve;

		[Token(Token = "0x6000B54")]
		[Address(RVA = "0xB97A5C", Offset = "0xB97A5C", VA = "0xB97A5C")]
		public void Look(Transform target, float time)
		{
		}

		[Token(Token = "0x6000B55")]
		[Address(RVA = "0xB97B78", Offset = "0xB97B78", VA = "0xB97B78")]
		public void OnFixTransforms()
		{
		}

		[Token(Token = "0x6000B56")]
		[Address(RVA = "0xB97C10", Offset = "0xB97C10", VA = "0xB97C10")]
		public void Update()
		{
		}

		[Token(Token = "0x6000B57")]
		[Address(RVA = "0xB97E18", Offset = "0xB97E18", VA = "0xB97E18")]
		public void SolveSpine()
		{
		}

		[Token(Token = "0x6000B58")]
		[Address(RVA = "0xB97EC0", Offset = "0xB97EC0", VA = "0xB97EC0")]
		public void SolveHead()
		{
		}

		[Token(Token = "0x6000B59")]
		[Address(RVA = "0xB97F6C", Offset = "0xB97F6C", VA = "0xB97F6C")]
		public InteractionLookAt()
		{
		}
	}
	[Token(Token = "0x20001D3")]
	[HelpURL("https://www.youtube.com/watch?v=r5jiZnsDH3M")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Interaction System/Interaction Object")]
	public class InteractionObject : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20001D4")]
		public class InteractionEvent
		{
			[Token(Token = "0x4000AE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The time of the event since interaction start.")]
			public float time;

			[Token(Token = "0x4000AE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("If true, the interaction will be paused on this event. The interaction can be resumed by InteractionSystem.ResumeInteraction() or InteractionSystem.ResumeAll;")]
			public bool pause;

			[Token(Token = "0x4000AEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
			[Tooltip("If true, the object will be parented to the effector bone on this event. Note that picking up like this can be done by only a single effector at a time. If you wish to pick up an object with both hands, see the Interaction PickUp2Handed demo scene.")]
			public bool pickUp;

			[Token(Token = "0x4000AEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The animations called on this event.")]
			public AnimatorEvent[] animations;

			[Token(Token = "0x4000AEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The messages sent on this event using GameObject.SendMessage().")]
			public Message[] messages;

			[Token(Token = "0x4000AED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("The UnityEvent to invoke on this event.")]
			public UnityEvent unityEvent;

			[Token(Token = "0x6000B76")]
			[Address(RVA = "0xB976DC", Offset = "0xB976DC", VA = "0xB976DC")]
			public void Activate(Transform t)
			{
			}

			[Token(Token = "0x6000B77")]
			[Address(RVA = "0xB98E3C", Offset = "0xB98E3C", VA = "0xB98E3C")]
			public InteractionEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001D5")]
		public class Message
		{
			[Token(Token = "0x4000AEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The name of the function called.")]
			public string function;

			[Token(Token = "0x4000AEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The recipient game object.")]
			public GameObject recipient;

			[Token(Token = "0x4000AF0")]
			private const string empty = "";

			[Token(Token = "0x6000B78")]
			[Address(RVA = "0xB98D44", Offset = "0xB98D44", VA = "0xB98D44")]
			public void Send(Transform t)
			{
			}

			[Token(Token = "0x6000B79")]
			[Address(RVA = "0xB98E44", Offset = "0xB98E44", VA = "0xB98E44")]
			public Message()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001D6")]
		public class AnimatorEvent
		{
			[Token(Token = "0x4000AF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The Animator component that will receive the AnimatorEvents.")]
			public Animator animator;

			[Token(Token = "0x4000AF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The Animation component that will receive the AnimatorEvents (Legacy).")]
			public Animation animation;

			[Token(Token = "0x4000AF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The name of the animation state.")]
			public string animationState;

			[Token(Token = "0x4000AF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("The crossfading time.")]
			public float crossfadeTime;

			[Token(Token = "0x4000AF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("The layer of the animation state (if using Legacy, the animation state will be forced to this layer).")]
			public int layer;

			[Token(Token = "0x4000AF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("Should the animation always start from 0 normalized time?")]
			public bool resetNormalizedTime;

			[Token(Token = "0x4000AF7")]
			private const string empty = "";

			[Token(Token = "0x6000B7A")]
			[Address(RVA = "0xB98C68", Offset = "0xB98C68", VA = "0xB98C68")]
			public void Activate(bool pickUp)
			{
			}

			[Token(Token = "0x6000B7B")]
			[Address(RVA = "0xB98E4C", Offset = "0xB98E4C", VA = "0xB98E4C")]
			private void Activate(Animator animator)
			{
			}

			[Token(Token = "0x6000B7C")]
			[Address(RVA = "0xB98EFC", Offset = "0xB98EFC", VA = "0xB98EFC")]
			private void Activate(Animation animation)
			{
			}

			[Token(Token = "0x6000B7D")]
			[Address(RVA = "0xB98FD4", Offset = "0xB98FD4", VA = "0xB98FD4")]
			public AnimatorEvent()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001D7")]
		public class WeightCurve
		{
			[Serializable]
			[Token(Token = "0x20001D8")]
			public enum Type
			{
				[Token(Token = "0x4000AFB")]
				PositionWeight,
				[Token(Token = "0x4000AFC")]
				RotationWeight,
				[Token(Token = "0x4000AFD")]
				PositionOffsetX,
				[Token(Token = "0x4000AFE")]
				PositionOffsetY,
				[Token(Token = "0x4000AFF")]
				PositionOffsetZ,
				[Token(Token = "0x4000B00")]
				Pull,
				[Token(Token = "0x4000B01")]
				Reach,
				[Token(Token = "0x4000B02")]
				RotateBoneWeight,
				[Token(Token = "0x4000B03")]
				Push,
				[Token(Token = "0x4000B04")]
				PushParent,
				[Token(Token = "0x4000B05")]
				PoserWeight
			}

			[Token(Token = "0x4000AF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The type of the curve (InteractionObject.WeightCurve.Type).")]
			public Type type;

			[Token(Token = "0x4000AF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The weight curve.")]
			public AnimationCurve curve;

			[Token(Token = "0x6000B7E")]
			[Address(RVA = "0xB98554", Offset = "0xB98554", VA = "0xB98554")]
			public float GetValue(float timer)
			{
				return default(float);
			}

			[Token(Token = "0x6000B7F")]
			[Address(RVA = "0xB98FE8", Offset = "0xB98FE8", VA = "0xB98FE8")]
			public WeightCurve()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001D9")]
		public class Multiplier
		{
			[Token(Token = "0x4000B06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The curve type to multiply.")]
			public WeightCurve.Type curve;

			[Token(Token = "0x4000B07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("The multiplier of the curve's value.")]
			public float multiplier;

			[Token(Token = "0x4000B08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The resulting value will be applied to this channel.")]
			public WeightCurve.Type result;

			[Token(Token = "0x6000B80")]
			[Address(RVA = "0xB98AEC", Offset = "0xB98AEC", VA = "0xB98AEC")]
			public float GetValue(WeightCurve weightCurve, float timer)
			{
				return default(float);
			}

			[Token(Token = "0x6000B81")]
			[Address(RVA = "0xB98FF0", Offset = "0xB98FF0", VA = "0xB98FF0")]
			public Multiplier()
			{
			}
		}

		[Token(Token = "0x4000ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If the Interaction System has a 'Look At' LookAtIK component assigned, will use it to make the character look at the specified Transform. If unassigned, will look at this GameObject.")]
		public Transform otherLookAtTarget;

		[Token(Token = "0x4000AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The root Transform of the InteractionTargets. If null, will use this GameObject. GetComponentsInChildren<InteractionTarget>() will be used at initiation to find all InteractionTargets associated with this InteractionObject.")]
		public Transform otherTargetsRoot;

		[Token(Token = "0x4000AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If assigned, all PositionOffset channels will be applied in the rotation space of this Transform. If not, they will be in the rotation space of the character.")]
		public Transform positionOffsetSpace;

		[Token(Token = "0x4000AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public WeightCurve[] weightCurves;

		[Token(Token = "0x4000AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Multiplier[] multipliers;

		[Token(Token = "0x4000AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public InteractionEvent[] events;

		[Token(Token = "0x4000AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private InteractionTarget[] targets;

		[Token(Token = "0x170000E8")]
		public float length
		{
			[Token(Token = "0x6000B60")]
			[Address(RVA = "0xB98118", Offset = "0xB98118", VA = "0xB98118")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B61")]
			[Address(RVA = "0xB98120", Offset = "0xB98120", VA = "0xB98120")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000E9")]
		public InteractionSystem lastUsedInteractionSystem
		{
			[Token(Token = "0x6000B62")]
			[Address(RVA = "0xB98128", Offset = "0xB98128", VA = "0xB98128")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B63")]
			[Address(RVA = "0xB98130", Offset = "0xB98130", VA = "0xB98130")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000EA")]
		public Transform lookAtTarget
		{
			[Token(Token = "0x6000B65")]
			[Address(RVA = "0xB982F0", Offset = "0xB982F0", VA = "0xB982F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EB")]
		public Transform targetsRoot
		{
			[Token(Token = "0x6000B6D")]
			[Address(RVA = "0xB977A0", Offset = "0xB977A0", VA = "0xB977A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000B5A")]
		[Address(RVA = "0xB97F80", Offset = "0xB97F80", VA = "0xB97F80")]
		[ContextMenu("TUTORIAL VIDEO (PART 1: BASICS)")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x6000B5B")]
		[Address(RVA = "0xB97FC4", Offset = "0xB97FC4", VA = "0xB97FC4")]
		[ContextMenu("TUTORIAL VIDEO (PART 2: PICKING UP...)")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x6000B5C")]
		[Address(RVA = "0xB98008", Offset = "0xB98008", VA = "0xB98008")]
		[ContextMenu("TUTORIAL VIDEO (PART 3: ANIMATION)")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x6000B5D")]
		[Address(RVA = "0xB9804C", Offset = "0xB9804C", VA = "0xB9804C")]
		[ContextMenu("TUTORIAL VIDEO (PART 4: TRIGGERS)")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0xB98090", Offset = "0xB98090", VA = "0xB98090")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0xB980D4", Offset = "0xB980D4", VA = "0xB980D4")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000B64")]
		[Address(RVA = "0xB98138", Offset = "0xB98138", VA = "0xB98138")]
		public void Initiate()
		{
		}

		[Token(Token = "0x6000B66")]
		[Address(RVA = "0xB98370", Offset = "0xB98370", VA = "0xB98370")]
		public InteractionTarget GetTarget(FullBodyBipedEffector effectorType, InteractionSystem interactionSystem)
		{
			return null;
		}

		[Token(Token = "0x6000B67")]
		[Address(RVA = "0xB963A0", Offset = "0xB963A0", VA = "0xB963A0")]
		public bool CurveUsed(WeightCurve.Type type)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B68")]
		[Address(RVA = "0xB984E8", Offset = "0xB984E8", VA = "0xB984E8")]
		public InteractionTarget[] GetTargets()
		{
			return null;
		}

		[Token(Token = "0x6000B69")]
		[Address(RVA = "0xB9625C", Offset = "0xB9625C", VA = "0xB9625C")]
		public Transform GetTarget(FullBodyBipedEffector effectorType, string tag)
		{
			return null;
		}

		[Token(Token = "0x6000B6A")]
		[Address(RVA = "0xB96398", Offset = "0xB96398", VA = "0xB96398")]
		public void OnStartInteraction(InteractionSystem interactionSystem)
		{
		}

		[Token(Token = "0x6000B6B")]
		[Address(RVA = "0xB96AE4", Offset = "0xB96AE4", VA = "0xB96AE4")]
		public void Apply(IKSolverFullBodyBiped solver, FullBodyBipedEffector effector, InteractionTarget target, float timer, float weight)
		{
		}

		[Token(Token = "0x6000B6C")]
		[Address(RVA = "0xB97330", Offset = "0xB97330", VA = "0xB97330")]
		public float GetValue(WeightCurve.Type weightCurveType, InteractionTarget target, float timer)
		{
			return default(float);
		}

		[Token(Token = "0x6000B6E")]
		[Address(RVA = "0xB98B1C", Offset = "0xB98B1C", VA = "0xB98B1C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B6F")]
		[Address(RVA = "0xB98570", Offset = "0xB98570", VA = "0xB98570")]
		private void Apply(IKSolverFullBodyBiped solver, FullBodyBipedEffector effector, WeightCurve.Type type, float value, float weight)
		{
		}

		[Token(Token = "0x6000B70")]
		[Address(RVA = "0xB984F0", Offset = "0xB984F0", VA = "0xB984F0")]
		private Transform GetTarget(FullBodyBipedEffector effectorType)
		{
			return null;
		}

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0xB98A90", Offset = "0xB98A90", VA = "0xB98A90")]
		private int GetWeightCurveIndex(WeightCurve.Type weightCurveType)
		{
			return default(int);
		}

		[Token(Token = "0x6000B72")]
		[Address(RVA = "0xB98B20", Offset = "0xB98B20", VA = "0xB98B20")]
		private int GetMultiplierIndex(WeightCurve.Type weightCurveType)
		{
			return default(int);
		}

		[Token(Token = "0x6000B73")]
		[Address(RVA = "0xB98B7C", Offset = "0xB98B7C", VA = "0xB98B7C")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000B74")]
		[Address(RVA = "0xB98BC0", Offset = "0xB98BC0", VA = "0xB98BC0")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000B75")]
		[Address(RVA = "0xB98C04", Offset = "0xB98C04", VA = "0xB98C04")]
		public InteractionObject()
		{
		}
	}
	[Token(Token = "0x20001DA")]
	[HelpURL("https://www.youtube.com/watch?v=r5jiZnsDH3M")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Interaction System/Interaction System")]
	public class InteractionSystem : MonoBehaviour
	{
		[Token(Token = "0x20001DB")]
		public delegate void InteractionDelegate(FullBodyBipedEffector effectorType, InteractionObject interactionObject);

		[Token(Token = "0x20001DC")]
		public delegate void InteractionEventDelegate(FullBodyBipedEffector effectorType, InteractionObject interactionObject, InteractionObject.InteractionEvent interactionEvent);

		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If not empty, only the targets with the specified tag will be used by this Interaction System.")]
		public string targetTag;

		[Token(Token = "0x4000B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The fade in time of the interaction.")]
		public float fadeInTime;

		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("The master speed for all interactions.")]
		public float speed;

		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If > 0, lerps all the FBBIK channels used by the Interaction System back to their default or initial values when not in interaction.")]
		public float resetToDefaultsSpeed;

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[FormerlySerializedAs("collider")]
		[Tooltip("The collider that registers OnTriggerEnter and OnTriggerExit events with InteractionTriggers.")]
		[Header("Triggering")]
		public Collider characterCollider;

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[FormerlySerializedAs("camera")]
		[Tooltip("Will be used by Interaction Triggers that need the camera's position. Assign the first person view character camera.")]
		public Transform FPSCamera;

		[Token(Token = "0x4000B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The layers that will be raycasted from the camera (along camera.forward). All InteractionTrigger look at target colliders should be included.")]
		public LayerMask camRaycastLayers;

		[Token(Token = "0x4000B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Max distance of raycasting from the camera.")]
		public float camRaycastDistance;

		[Token(Token = "0x4000B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<InteractionTrigger> inContact;

		[Token(Token = "0x4000B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<int> bestRangeIndexes;

		[Token(Token = "0x4000B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public InteractionDelegate OnInteractionStart;

		[Token(Token = "0x4000B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public InteractionDelegate OnInteractionPause;

		[Token(Token = "0x4000B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public InteractionDelegate OnInteractionPickUp;

		[Token(Token = "0x4000B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public InteractionDelegate OnInteractionResume;

		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public InteractionDelegate OnInteractionStop;

		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public InteractionEventDelegate OnInteractionEvent;

		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public RaycastHit raycastHit;

		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Space(10f)]
		[Tooltip("Reference to the FBBIK component.")]
		[SerializeField]
		private FullBodyBipedIK fullBody;

		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Handles looking at the interactions.")]
		public InteractionLookAt lookAt;

		[Token(Token = "0x4000B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private InteractionEffector[] interactionEffectors;

		[Token(Token = "0x4000B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool initiated;

		[Token(Token = "0x4000B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Collider lastCollider;

		[Token(Token = "0x4000B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Collider c;

		[Token(Token = "0x170000EC")]
		public bool inInteraction
		{
			[Token(Token = "0x6000B88")]
			[Address(RVA = "0xB99198", Offset = "0xB99198", VA = "0xB99198")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000ED")]
		public FullBodyBipedIK ik
		{
			[Token(Token = "0x6000BA2")]
			[Address(RVA = "0xB9AC40", Offset = "0xB9AC40", VA = "0xB9AC40")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BA3")]
			[Address(RVA = "0xB9AC48", Offset = "0xB9AC48", VA = "0xB9AC48")]
			set
			{
			}
		}

		[Token(Token = "0x170000EE")]
		public List<InteractionTrigger> triggersInRange
		{
			[Token(Token = "0x6000BA4")]
			[Address(RVA = "0xB9AC50", Offset = "0xB9AC50", VA = "0xB9AC50")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BA5")]
			[Address(RVA = "0xB9AC58", Offset = "0xB9AC58", VA = "0xB9AC58")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0xB99000", Offset = "0xB99000", VA = "0xB99000")]
		[ContextMenu("TUTORIAL VIDEO (PART 1: BASICS)")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x6000B83")]
		[Address(RVA = "0xB99044", Offset = "0xB99044", VA = "0xB99044")]
		[ContextMenu("TUTORIAL VIDEO (PART 2: PICKING UP...)")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x6000B84")]
		[Address(RVA = "0xB99088", Offset = "0xB99088", VA = "0xB99088")]
		[ContextMenu("TUTORIAL VIDEO (PART 3: ANIMATION)")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x6000B85")]
		[Address(RVA = "0xB990CC", Offset = "0xB990CC", VA = "0xB990CC")]
		[ContextMenu("TUTORIAL VIDEO (PART 4: TRIGGERS)")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0xB99110", Offset = "0xB99110", VA = "0xB99110")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000B87")]
		[Address(RVA = "0xB99154", Offset = "0xB99154", VA = "0xB99154")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000B89")]
		[Address(RVA = "0xB99310", Offset = "0xB99310", VA = "0xB99310")]
		public bool IsInInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0xB993C8", Offset = "0xB993C8", VA = "0xB993C8")]
		public bool IsPaused(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8B")]
		[Address(RVA = "0xB99480", Offset = "0xB99480", VA = "0xB99480")]
		public bool IsPaused()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8C")]
		[Address(RVA = "0xB99518", Offset = "0xB99518", VA = "0xB99518")]
		public bool IsInSync()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8D")]
		[Address(RVA = "0xB995FC", Offset = "0xB995FC", VA = "0xB995FC")]
		public bool StartInteraction(FullBodyBipedEffector effectorType, InteractionObject interactionObject, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8E")]
		[Address(RVA = "0xB996F4", Offset = "0xB996F4", VA = "0xB996F4")]
		public bool PauseInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B8F")]
		[Address(RVA = "0xB99778", Offset = "0xB99778", VA = "0xB99778")]
		public bool ResumeInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B90")]
		[Address(RVA = "0xB997FC", Offset = "0xB997FC", VA = "0xB997FC")]
		public bool StopInteraction(FullBodyBipedEffector effectorType)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B91")]
		[Address(RVA = "0xB99880", Offset = "0xB99880", VA = "0xB99880")]
		public void PauseAll()
		{
		}

		[Token(Token = "0x6000B92")]
		[Address(RVA = "0xB998E8", Offset = "0xB998E8", VA = "0xB998E8")]
		public void ResumeAll()
		{
		}

		[Token(Token = "0x6000B93")]
		[Address(RVA = "0xB99950", Offset = "0xB99950", VA = "0xB99950")]
		public void StopAll()
		{
		}

		[Token(Token = "0x6000B94")]
		[Address(RVA = "0xB999AC", Offset = "0xB999AC", VA = "0xB999AC")]
		public InteractionObject GetInteractionObject(FullBodyBipedEffector effectorType)
		{
			return null;
		}

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0xB99A2C", Offset = "0xB99A2C", VA = "0xB99A2C")]
		public float GetProgress(FullBodyBipedEffector effectorType)
		{
			return default(float);
		}

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0xB99AD4", Offset = "0xB99AD4", VA = "0xB99AD4")]
		public float GetMinActiveProgress()
		{
			return default(float);
		}

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0xB99BA4", Offset = "0xB99BA4", VA = "0xB99BA4")]
		public bool TriggerInteraction(int index, bool interrupt)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B98")]
		[Address(RVA = "0xB99E34", Offset = "0xB99E34", VA = "0xB99E34")]
		public bool TriggerInteraction(int index, bool interrupt, out InteractionObject interactionObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B99")]
		[Address(RVA = "0xB9A008", Offset = "0xB9A008", VA = "0xB9A008")]
		public bool TriggerInteraction(int index, bool interrupt, out InteractionTarget interactionTarget)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0xB9A278", Offset = "0xB9A278", VA = "0xB9A278")]
		public InteractionTrigger.Range GetClosestInteractionRange()
		{
			return null;
		}

		[Token(Token = "0x6000B9B")]
		[Address(RVA = "0xB9A504", Offset = "0xB9A504", VA = "0xB9A504")]
		public InteractionObject GetClosestInteractionObjectInRange()
		{
			return null;
		}

		[Token(Token = "0x6000B9C")]
		[Address(RVA = "0xB9A53C", Offset = "0xB9A53C", VA = "0xB9A53C")]
		public InteractionTarget GetClosestInteractionTargetInRange()
		{
			return null;
		}

		[Token(Token = "0x6000B9D")]
		[Address(RVA = "0xB9A59C", Offset = "0xB9A59C", VA = "0xB9A59C")]
		public InteractionObject[] GetClosestInteractionObjectsInRange()
		{
			return null;
		}

		[Token(Token = "0x6000B9E")]
		[Address(RVA = "0xB9A6C8", Offset = "0xB9A6C8", VA = "0xB9A6C8")]
		public InteractionTarget[] GetClosestInteractionTargetsInRange()
		{
			return null;
		}

		[Token(Token = "0x6000B9F")]
		[Address(RVA = "0xB9A8AC", Offset = "0xB9A8AC", VA = "0xB9A8AC")]
		public bool TriggerEffectorsReady(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BA0")]
		[Address(RVA = "0xB9AB20", Offset = "0xB9AB20", VA = "0xB9AB20")]
		public InteractionTrigger.Range GetTriggerRange(int index)
		{
			return null;
		}

		[Token(Token = "0x6000BA1")]
		[Address(RVA = "0xB9A360", Offset = "0xB9A360", VA = "0xB9A360")]
		public int GetClosestTriggerIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0xB9AC60", Offset = "0xB9AC60", VA = "0xB9AC60", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0xB9B4C0", Offset = "0xB9B4C0", VA = "0xB9B4C0")]
		private void InteractionPause(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0xB9B4E0", Offset = "0xB9B4E0", VA = "0xB9B4E0")]
		private void InteractionResume(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000BA9")]
		[Address(RVA = "0xB9B4FC", Offset = "0xB9B4FC", VA = "0xB9B4FC")]
		private void InteractionStop(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000BAA")]
		[Address(RVA = "0xB9B518", Offset = "0xB9B518", VA = "0xB9B518")]
		private void LookAtInteraction(FullBodyBipedEffector effector, InteractionObject interactionObject)
		{
		}

		[Token(Token = "0x6000BAB")]
		[Address(RVA = "0xB9B56C", Offset = "0xB9B56C", VA = "0xB9B56C")]
		public void OnTriggerEnter(Collider c)
		{
		}

		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0xB9B6F0", Offset = "0xB9B6F0", VA = "0xB9B6F0")]
		public void OnTriggerExit(Collider c)
		{
		}

		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0xB9B7EC", Offset = "0xB9B7EC", VA = "0xB9B7EC")]
		private bool ContactIsInRange(int index, out int bestRangeIndex)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0xB9B998", Offset = "0xB9B998", VA = "0xB9B998")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0xB9BAB0", Offset = "0xB9BAB0", VA = "0xB9BAB0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0xB9BD98", Offset = "0xB9BD98", VA = "0xB9BD98")]
		private void Raycasting()
		{
		}

		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0xB9B260", Offset = "0xB9B260", VA = "0xB9B260")]
		private void UpdateTriggerEventBroadcasting()
		{
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0xB9BEC8", Offset = "0xB9BEC8", VA = "0xB9BEC8")]
		private void UpdateEffectors()
		{
		}

		[Token(Token = "0x6000BB3")]
		[Address(RVA = "0xB9BFD4", Offset = "0xB9BFD4", VA = "0xB9BFD4")]
		private void OnPreFBBIK()
		{
		}

		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0xB9C080", Offset = "0xB9C080", VA = "0xB9C080")]
		private void OnPostFBBIK()
		{
		}

		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0xB9C164", Offset = "0xB9C164", VA = "0xB9C164")]
		private void OnFixTransforms()
		{
		}

		[Token(Token = "0x6000BB6")]
		[Address(RVA = "0xB9C17C", Offset = "0xB9C17C", VA = "0xB9C17C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000BB7")]
		[Address(RVA = "0xB99230", Offset = "0xB99230", VA = "0xB99230")]
		private bool IsValid(bool log)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0xB99D20", Offset = "0xB99D20", VA = "0xB99D20")]
		private bool TriggerIndexIsValid(int index)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0xB9C604", Offset = "0xB9C604", VA = "0xB9C604")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0xB9C648", Offset = "0xB9C648", VA = "0xB9C648")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0xB9C68C", Offset = "0xB9C68C", VA = "0xB9C68C")]
		public InteractionSystem()
		{
		}
	}
	[Token(Token = "0x20001DD")]
	[HelpURL("https://www.youtube.com/watch?v=r5jiZnsDH3M")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Interaction System/Interaction Target")]
	public class InteractionTarget : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20001DE")]
		public class Multiplier
		{
			[Token(Token = "0x4000B2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The curve type (InteractionObject.WeightCurve.Type).")]
			public InteractionObject.WeightCurve.Type curve;

			[Token(Token = "0x4000B2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Multiplier of the curve's value.")]
			public float multiplier;

			[Token(Token = "0x6000BD0")]
			[Address(RVA = "0xB9D614", Offset = "0xB9D614", VA = "0xB9D614")]
			public Multiplier()
			{
			}
		}

		[Token(Token = "0x4000B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The type of the FBBIK effector.")]
		public FullBodyBipedEffector effectorType;

		[Token(Token = "0x4000B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("InteractionObject weight curve multipliers for this effector target.")]
		public Multiplier[] multipliers;

		[Token(Token = "0x4000B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The interaction speed multiplier for this effector. This can be used to make interactions faster/slower for specific effectors.")]
		public float interactionSpeedMlp;

		[Token(Token = "0x4000B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The pivot to twist/swing this interaction target about. For symmetric objects that can be interacted with from a certain angular range.")]
		public Transform pivot;

		[Token(Token = "0x4000B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The axis of twisting the interaction target (blue line).")]
		public Vector3 twistAxis;

		[Token(Token = "0x4000B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("The weight of twisting the interaction target towards the effector bone in the start of the interaction.")]
		public float twistWeight;

		[Token(Token = "0x4000B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The weight of swinging the interaction target towards the effector bone in the start of the interaction. Swing is defined as a 3-DOF rotation around any axis, while twist is only around the twist axis.")]
		public float swingWeight;

		[Token(Token = "0x4000B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("If true, will twist/swing around the pivot only once at the start of the interaction. If false, will continue rotating throuout the whole interaction.")]
		public bool rotateOnce;

		[Token(Token = "0x4000B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion defaultLocalRotation;

		[Token(Token = "0x4000B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform lastPivot;

		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0xB9CDE8", Offset = "0xB9CDE8", VA = "0xB9CDE8")]
		[ContextMenu("TUTORIAL VIDEO (PART 1: BASICS)")]
		private void OpenTutorial1()
		{
		}

		[Token(Token = "0x6000BC5")]
		[Address(RVA = "0xB9CE2C", Offset = "0xB9CE2C", VA = "0xB9CE2C")]
		[ContextMenu("TUTORIAL VIDEO (PART 2: PICKING UP...)")]
		private void OpenTutorial2()
		{
		}

		[Token(Token = "0x6000BC6")]
		[Address(RVA = "0xB9CE70", Offset = "0xB9CE70", VA = "0xB9CE70")]
		[ContextMenu("TUTORIAL VIDEO (PART 3: ANIMATION)")]
		private void OpenTutorial3()
		{
		}

		[Token(Token = "0x6000BC7")]
		[Address(RVA = "0xB9CEB4", Offset = "0xB9CEB4", VA = "0xB9CEB4")]
		[ContextMenu("TUTORIAL VIDEO (PART 4: TRIGGERS)")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x6000BC8")]
		[Address(RVA = "0xB9CEF8", Offset = "0xB9CEF8", VA = "0xB9CEF8")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000BC9")]
		[Address(RVA = "0xB9CF3C", Offset = "0xB9CF3C", VA = "0xB9CF3C")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000BCA")]
		[Address(RVA = "0xB9CF80", Offset = "0xB9CF80", VA = "0xB9CF80")]
		public float GetValue(InteractionObject.WeightCurve.Type curveType)
		{
			return default(float);
		}

		[Token(Token = "0x6000BCB")]
		[Address(RVA = "0xB9CFE4", Offset = "0xB9CFE4", VA = "0xB9CFE4")]
		public void ResetRotation()
		{
		}

		[Token(Token = "0x6000BCC")]
		[Address(RVA = "0xB9D070", Offset = "0xB9D070", VA = "0xB9D070")]
		public void RotateTo(Vector3 position)
		{
		}

		[Token(Token = "0x6000BCD")]
		[Address(RVA = "0xB9D51C", Offset = "0xB9D51C", VA = "0xB9D51C")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000BCE")]
		[Address(RVA = "0xB9D560", Offset = "0xB9D560", VA = "0xB9D560")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0xB9D5A4", Offset = "0xB9D5A4", VA = "0xB9D5A4")]
		public InteractionTarget()
		{
		}
	}
	[Token(Token = "0x20001DF")]
	[HelpURL("https://www.youtube.com/watch?v=-TDZpNjt2mk&index=15&list=PLVxSIA1OaTOu8Nos3CalXbJ2DrKnntMv6")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Interaction System/Interaction Trigger")]
	public class InteractionTrigger : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20001E0")]
		public class CharacterPosition
		{
			[Token(Token = "0x4000B2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("If false, will not care where the character stands, as long as it is in contact with the trigger collider.")]
			public bool use;

			[Token(Token = "0x4000B2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("The offset of the character's position relative to the trigger in XZ plane. Y position of the character is unlimited as long as it is contact with the collider.")]
			public Vector2 offset;

			[Token(Token = "0x4000B30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Tooltip("Angle offset from the default forward direction.")]
			[Range(-180f, 180f)]
			public float angleOffset;

			[Token(Token = "0x4000B31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Max angular offset of the character's forward from the direction of this trigger.")]
			[Range(0f, 180f)]
			public float maxAngle;

			[Token(Token = "0x4000B32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("Max offset of the character's position from this range's center.")]
			public float radius;

			[Token(Token = "0x4000B33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("If true, will rotate the trigger around it's Y axis relative to the position of the character, so the object can be interacted with from all sides.")]
			public bool orbit;

			[Token(Token = "0x4000B34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
			[Tooltip("Fixes the Y axis of the trigger to Vector3.up. This makes the trigger symmetrical relative to the object. For example a gun will be able to be picked up from the same direction relative to the barrel no matter which side the gun is resting on.")]
			public bool fixYAxis;

			[Token(Token = "0x170000EF")]
			public Vector3 offset3D
			{
				[Token(Token = "0x6000BD7")]
				[Address(RVA = "0xB9D9B4", Offset = "0xB9D9B4", VA = "0xB9D9B4")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000F0")]
			public Vector3 direction3D
			{
				[Token(Token = "0x6000BD8")]
				[Address(RVA = "0xB9D9C0", Offset = "0xB9D9C0", VA = "0xB9D9C0")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x6000BD9")]
			[Address(RVA = "0xB9DA80", Offset = "0xB9DA80", VA = "0xB9DA80")]
			public bool IsInRange(Transform character, Transform trigger, out float error)
			{
				return default(bool);
			}

			[Token(Token = "0x6000BDA")]
			[Address(RVA = "0xB9E1E4", Offset = "0xB9E1E4", VA = "0xB9E1E4")]
			public CharacterPosition()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001E1")]
		public class CameraPosition
		{
			[Token(Token = "0x4000B35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("What the camera should be looking at to trigger the interaction?")]
			public Collider lookAtTarget;

			[Token(Token = "0x4000B36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The direction from the lookAtTarget towards the camera (in lookAtTarget's space).")]
			public Vector3 direction;

			[Token(Token = "0x4000B37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("Max distance from the lookAtTarget to the camera.")]
			public float maxDistance;

			[Token(Token = "0x4000B38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Range(0f, 180f)]
			[Tooltip("Max angle between the direction and the direction towards the camera.")]
			public float maxAngle;

			[Token(Token = "0x4000B39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("Fixes the Y axis of the trigger to Vector3.up. This makes the trigger symmetrical relative to the object.")]
			public bool fixYAxis;

			[Token(Token = "0x6000BDB")]
			[Address(RVA = "0xB9E1F8", Offset = "0xB9E1F8", VA = "0xB9E1F8")]
			public Quaternion GetRotation()
			{
				return default(Quaternion);
			}

			[Token(Token = "0x6000BDC")]
			[Address(RVA = "0xB9E370", Offset = "0xB9E370", VA = "0xB9E370")]
			public bool IsInRange(Transform raycastFrom, RaycastHit hit, Transform trigger, out float error)
			{
				return default(bool);
			}

			[Token(Token = "0x6000BDD")]
			[Address(RVA = "0xB9E678", Offset = "0xB9E678", VA = "0xB9E678")]
			public CameraPosition()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001E2")]
		public class Range
		{
			[Serializable]
			[Token(Token = "0x20001E3")]
			public class Interaction
			{
				[Token(Token = "0x4000B3F")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("The InteractionObject to interact with.")]
				public InteractionObject interactionObject;

				[Token(Token = "0x4000B40")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				[Tooltip("The effectors to interact with.")]
				public FullBodyBipedEffector[] effectors;

				[Token(Token = "0x6000BE0")]
				[Address(RVA = "0xB9E6FC", Offset = "0xB9E6FC", VA = "0xB9E6FC")]
				public Interaction()
				{
				}
			}

			[Token(Token = "0x4000B3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[HideInInspector]
			[SerializeField]
			public string name;

			[Token(Token = "0x4000B3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[HideInInspector]
			[SerializeField]
			public bool show;

			[Token(Token = "0x4000B3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The range for the character's position and rotation.")]
			public CharacterPosition characterPosition;

			[Token(Token = "0x4000B3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("The range for the character camera's position and rotation.")]
			public CameraPosition cameraPosition;

			[Token(Token = "0x4000B3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("Definitions of the interactions associated with this range.")]
			public Interaction[] interactions;

			[Token(Token = "0x6000BDE")]
			[Address(RVA = "0xB9D8A0", Offset = "0xB9D8A0", VA = "0xB9D8A0")]
			public bool IsInRange(Transform character, Transform raycastFrom, RaycastHit raycastHit, Transform trigger, out float maxError)
			{
				return default(bool);
			}

			[Token(Token = "0x6000BDF")]
			[Address(RVA = "0xB9E6EC", Offset = "0xB9E6EC", VA = "0xB9E6EC")]
			public Range()
			{
			}
		}

		[Token(Token = "0x4000B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The valid ranges of the character's and/or it's camera's position for triggering interaction when the character is in contact with the collider of this trigger.")]
		public Range[] ranges;

		[Token(Token = "0x6000BD1")]
		[Address(RVA = "0xB9D61C", Offset = "0xB9D61C", VA = "0xB9D61C")]
		[ContextMenu("TUTORIAL VIDEO")]
		private void OpenTutorial4()
		{
		}

		[Token(Token = "0x6000BD2")]
		[Address(RVA = "0xB9D660", Offset = "0xB9D660", VA = "0xB9D660")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000BD3")]
		[Address(RVA = "0xB9D6A4", Offset = "0xB9D6A4", VA = "0xB9D6A4")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000BD4")]
		[Address(RVA = "0xB9D6E8", Offset = "0xB9D6E8", VA = "0xB9D6E8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BD5")]
		[Address(RVA = "0xB9D6EC", Offset = "0xB9D6EC", VA = "0xB9D6EC")]
		public int GetBestRangeIndex(Transform character, Transform raycastFrom, RaycastHit raycastHit)
		{
			return default(int);
		}

		[Token(Token = "0x6000BD6")]
		[Address(RVA = "0xB9D950", Offset = "0xB9D950", VA = "0xB9D950")]
		public InteractionTrigger()
		{
		}
	}
	[Token(Token = "0x20001E4")]
	public class GenericPoser : Poser
	{
		[Serializable]
		[Token(Token = "0x20001E5")]
		public class Map
		{
			[Token(Token = "0x4000B42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform bone;

			[Token(Token = "0x4000B43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform target;

			[Token(Token = "0x4000B44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Vector3 defaultLocalPosition;

			[Token(Token = "0x4000B45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private Quaternion defaultLocalRotation;

			[Token(Token = "0x6000BE8")]
			[Address(RVA = "0xB9E9FC", Offset = "0xB9E9FC", VA = "0xB9E9FC")]
			public Map(Transform bone, Transform target)
			{
			}

			[Token(Token = "0x6000BE9")]
			[Address(RVA = "0xB9ED54", Offset = "0xB9ED54", VA = "0xB9ED54")]
			public void StoreDefaultState()
			{
			}

			[Token(Token = "0x6000BEA")]
			[Address(RVA = "0xB9ED14", Offset = "0xB9ED14", VA = "0xB9ED14")]
			public void FixTransform()
			{
			}

			[Token(Token = "0x6000BEB")]
			[Address(RVA = "0xB9EB98", Offset = "0xB9EB98", VA = "0xB9EB98")]
			public void Update(float localRotationWeight, float localPositionWeight)
			{
			}
		}

		[Token(Token = "0x4000B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Map[] maps;

		[Token(Token = "0x6000BE1")]
		[Address(RVA = "0xB9E704", Offset = "0xB9E704", VA = "0xB9E704", Slot = "7")]
		[ContextMenu("Auto-Mapping")]
		public override void AutoMapping()
		{
		}

		[Token(Token = "0x6000BE2")]
		[Address(RVA = "0xB9EAA4", Offset = "0xB9EAA4", VA = "0xB9EAA4", Slot = "8")]
		protected override void InitiatePoser()
		{
		}

		[Token(Token = "0x6000BE3")]
		[Address(RVA = "0xB9EAA8", Offset = "0xB9EAA8", VA = "0xB9EAA8", Slot = "9")]
		protected override void UpdatePoser()
		{
		}

		[Token(Token = "0x6000BE4")]
		[Address(RVA = "0xB9ECB8", Offset = "0xB9ECB8", VA = "0xB9ECB8", Slot = "10")]
		protected override void FixPoserTransforms()
		{
		}

		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0xB9EA48", Offset = "0xB9EA48", VA = "0xB9EA48")]
		private void StoreDefaultState()
		{
		}

		[Token(Token = "0x6000BE6")]
		[Address(RVA = "0xB9E968", Offset = "0xB9E968", VA = "0xB9E968")]
		private Transform GetTargetNamed(string tName, Transform[] array)
		{
			return null;
		}

		[Token(Token = "0x6000BE7")]
		[Address(RVA = "0xB9ED98", Offset = "0xB9ED98", VA = "0xB9ED98")]
		public GenericPoser()
		{
		}
	}
	[Token(Token = "0x20001E6")]
	public class HandPoser : Poser
	{
		[Token(Token = "0x4000B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform _poseRoot;

		[Token(Token = "0x4000B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform[] children;

		[Token(Token = "0x4000B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform[] poseChildren;

		[Token(Token = "0x4000B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3[] defaultLocalPositions;

		[Token(Token = "0x4000B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Quaternion[] defaultLocalRotations;

		[Token(Token = "0x6000BEC")]
		[Address(RVA = "0xB9EDB8", Offset = "0xB9EDB8", VA = "0xB9EDB8", Slot = "7")]
		public override void AutoMapping()
		{
		}

		[Token(Token = "0x6000BED")]
		[Address(RVA = "0xB9EE88", Offset = "0xB9EE88", VA = "0xB9EE88", Slot = "8")]
		protected override void InitiatePoser()
		{
		}

		[Token(Token = "0x6000BEE")]
		[Address(RVA = "0xB9F060", Offset = "0xB9F060", VA = "0xB9F060", Slot = "10")]
		protected override void FixPoserTransforms()
		{
		}

		[Token(Token = "0x6000BEF")]
		[Address(RVA = "0xB9F148", Offset = "0xB9F148", VA = "0xB9F148", Slot = "9")]
		protected override void UpdatePoser()
		{
		}

		[Token(Token = "0x6000BF0")]
		[Address(RVA = "0xB9EEE8", Offset = "0xB9EEE8", VA = "0xB9EEE8")]
		private void StoreDefaultState()
		{
		}

		[Token(Token = "0x6000BF1")]
		[Address(RVA = "0xB9F478", Offset = "0xB9F478", VA = "0xB9F478")]
		public HandPoser()
		{
		}
	}
	[Token(Token = "0x20001E7")]
	public abstract class Poser : SolverManager
	{
		[Token(Token = "0x4000B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform poseRoot;

		[Token(Token = "0x4000B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x4000B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Range(0f, 1f)]
		public float localRotationWeight;

		[Token(Token = "0x4000B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 1f)]
		public float localPositionWeight;

		[Token(Token = "0x4000B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool initiated;

		[Token(Token = "0x6000BF2")]
		public abstract void AutoMapping();

		[Token(Token = "0x6000BF3")]
		protected abstract void InitiatePoser();

		[Token(Token = "0x6000BF4")]
		protected abstract void UpdatePoser();

		[Token(Token = "0x6000BF5")]
		protected abstract void FixPoserTransforms();

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0xB9F488", Offset = "0xB9F488", VA = "0xB9F488", Slot = "5")]
		protected override void UpdateSolver()
		{
		}

		[Token(Token = "0x6000BF7")]
		[Address(RVA = "0xB9F4CC", Offset = "0xB9F4CC", VA = "0xB9F4CC", Slot = "4")]
		protected override void InitiateSolver()
		{
		}

		[Token(Token = "0x6000BF8")]
		[Address(RVA = "0xB9F4F8", Offset = "0xB9F4F8", VA = "0xB9F4F8", Slot = "6")]
		protected override void FixTransforms()
		{
		}

		[Token(Token = "0x6000BF9")]
		[Address(RVA = "0xB9EDA8", Offset = "0xB9EDA8", VA = "0xB9EDA8")]
		protected Poser()
		{
		}
	}
	[Token(Token = "0x20001E8")]
	[RequireComponent(typeof(Animator))]
	public class RagdollUtility : MonoBehaviour
	{
		[Token(Token = "0x20001E9")]
		public class Rigidbone
		{
			[Token(Token = "0x4000B60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Rigidbody r;

			[Token(Token = "0x4000B61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform t;

			[Token(Token = "0x4000B62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Collider collider;

			[Token(Token = "0x4000B63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Joint joint;

			[Token(Token = "0x4000B64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Rigidbody c;

			[Token(Token = "0x4000B65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool updateAnchor;

			[Token(Token = "0x4000B66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector3 deltaPosition;

			[Token(Token = "0x4000B67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Quaternion deltaRotation;

			[Token(Token = "0x4000B68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public float deltaTime;

			[Token(Token = "0x4000B69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Vector3 lastPosition;

			[Token(Token = "0x4000B6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public Quaternion lastRotation;

			[Token(Token = "0x6000C0C")]
			[Address(RVA = "0xB9FB68", Offset = "0xB9FB68", VA = "0xB9FB68")]
			public Rigidbone(Rigidbody r)
			{
			}

			[Token(Token = "0x6000C0D")]
			[Address(RVA = "0xBA0714", Offset = "0xBA0714", VA = "0xBA0714")]
			public void RecordVelocity()
			{
			}

			[Token(Token = "0x6000C0E")]
			[Address(RVA = "0xBA04D4", Offset = "0xBA04D4", VA = "0xBA04D4")]
			public void WakeUp(float velocityWeight, float angularVelocityWeight)
			{
			}
		}

		[Token(Token = "0x20001EA")]
		public class Child
		{
			[Token(Token = "0x4000B6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform t;

			[Token(Token = "0x4000B6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3 localPosition;

			[Token(Token = "0x4000B6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Quaternion localRotation;

			[Token(Token = "0x6000C0F")]
			[Address(RVA = "0xB9FD10", Offset = "0xB9FD10", VA = "0xB9FD10")]
			public Child(Transform transform)
			{
			}

			[Token(Token = "0x6000C10")]
			[Address(RVA = "0xBA082C", Offset = "0xBA082C", VA = "0xBA082C")]
			public void FixTransform(float weight)
			{
			}

			[Token(Token = "0x6000C11")]
			[Address(RVA = "0xBA07E8", Offset = "0xBA07E8", VA = "0xBA07E8")]
			public void StoreLocalState()
			{
			}
		}

		[Token(Token = "0x20001EB")]
		[CompilerGenerated]
		private sealed class <DisableRagdollSmooth>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RagdollUtility <>4__this;

			[Token(Token = "0x170000F3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C15")]
				[Address(RVA = "0xBA0D98", Offset = "0xBA0D98", VA = "0xBA0D98", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000F4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C17")]
				[Address(RVA = "0xBA0DE0", Offset = "0xBA0DE0", VA = "0xBA0DE0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C12")]
			[Address(RVA = "0xB9FD7C", Offset = "0xB9FD7C", VA = "0xB9FD7C")]
			[DebuggerHidden]
			public <DisableRagdollSmooth>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x6000C13")]
			[Address(RVA = "0xBA0BA8", Offset = "0xBA0BA8", VA = "0xBA0BA8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000C14")]
			[Address(RVA = "0xBA0BAC", Offset = "0xBA0BAC", VA = "0xBA0BAC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C16")]
			[Address(RVA = "0xBA0DA0", Offset = "0xBA0DA0", VA = "0xBA0DA0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If you have multiple IK components, then this should be the one that solves last each frame.")]
		public IK ik;

		[Token(Token = "0x4000B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("How long does it take to blend from ragdoll to animation?")]
		public float ragdollToAnimationTime;

		[Token(Token = "0x4000B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("If true, IK can be used on top of physical ragdoll simulation.")]
		public bool applyIkOnRagdoll;

		[Token(Token = "0x4000B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("How much velocity transfer from animation to ragdoll?")]
		public float applyVelocity;

		[Token(Token = "0x4000B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("How much angular velocity to transfer from animation to ragdoll?")]
		public float applyAngularVelocity;

		[Token(Token = "0x4000B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Animator animator;

		[Token(Token = "0x4000B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbone[] rigidbones;

		[Token(Token = "0x4000B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Child[] children;

		[Token(Token = "0x4000B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool enableRagdollFlag;

		[Token(Token = "0x4000B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private AnimatorUpdateMode animatorUpdateMode;

		[Token(Token = "0x4000B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IK[] allIKComponents;

		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool[] fixTransforms;

		[Token(Token = "0x4000B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float ragdollWeight;

		[Token(Token = "0x4000B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float ragdollWeightV;

		[Token(Token = "0x4000B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool fixedFrame;

		[Token(Token = "0x4000B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool[] disabledIKComponents;

		[Token(Token = "0x170000F1")]
		private bool isRagdoll
		{
			[Token(Token = "0x6000C05")]
			[Address(RVA = "0xB9F53C", Offset = "0xB9F53C", VA = "0xB9F53C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000F2")]
		private bool ikUsed
		{
			[Token(Token = "0x6000C07")]
			[Address(RVA = "0xBA0108", Offset = "0xBA0108", VA = "0xBA0108")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0xB9F510", Offset = "0xB9F510", VA = "0xB9F510")]
		public void EnableRagdoll()
		{
		}

		[Token(Token = "0x6000BFB")]
		[Address(RVA = "0xB9F5A0", Offset = "0xB9F5A0", VA = "0xB9F5A0")]
		public void DisableRagdoll()
		{
		}

		[Token(Token = "0x6000BFC")]
		[Address(RVA = "0xB9F6B8", Offset = "0xB9F6B8", VA = "0xB9F6B8")]
		public void Start()
		{
		}

		[Token(Token = "0x6000BFD")]
		[Address(RVA = "0xB9F644", Offset = "0xB9F644", VA = "0xB9F644")]
		[IteratorStateMachine(typeof(<DisableRagdollSmooth>d__21))]
		private IEnumerator DisableRagdollSmooth()
		{
			return null;
		}

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0xB9FDA4", Offset = "0xB9FDA4", VA = "0xB9FDA4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BFF")]
		[Address(RVA = "0xB9FFCC", Offset = "0xB9FFCC", VA = "0xB9FFCC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000C00")]
		[Address(RVA = "0xBA006C", Offset = "0xBA006C", VA = "0xBA006C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000C01")]
		[Address(RVA = "0xBA025C", Offset = "0xBA025C", VA = "0xBA025C")]
		private void AfterLastIK()
		{
		}

		[Token(Token = "0x6000C02")]
		[Address(RVA = "0xBA00DC", Offset = "0xBA00DC", VA = "0xBA00DC")]
		private void AfterAnimation()
		{
		}

		[Token(Token = "0x6000C03")]
		[Address(RVA = "0xBA0228", Offset = "0xBA0228", VA = "0xBA0228")]
		private void OnFinalPose()
		{
		}

		[Token(Token = "0x6000C04")]
		[Address(RVA = "0xBA02DC", Offset = "0xBA02DC", VA = "0xBA02DC")]
		private void RagdollEnabler()
		{
		}

		[Token(Token = "0x6000C06")]
		[Address(RVA = "0xBA0280", Offset = "0xBA0280", VA = "0xBA0280")]
		private void RecordVelocities()
		{
		}

		[Token(Token = "0x6000C08")]
		[Address(RVA = "0xB9F5E8", Offset = "0xB9F5E8", VA = "0xB9F5E8")]
		private void StoreLocalState()
		{
		}

		[Token(Token = "0x6000C09")]
		[Address(RVA = "0xBA0000", Offset = "0xBA0000", VA = "0xBA0000")]
		private void FixTransforms(float weight)
		{
		}

		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0xBA093C", Offset = "0xBA093C", VA = "0xBA093C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000C0B")]
		[Address(RVA = "0xBA0A74", Offset = "0xBA0A74", VA = "0xBA0A74")]
		public RagdollUtility()
		{
		}
	}
	[Token(Token = "0x20001EC")]
	public abstract class RotationLimit : MonoBehaviour
	{
		[Token(Token = "0x4000B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 axis;

		[Token(Token = "0x4000B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[HideInInspector]
		public Quaternion defaultLocalRotation;

		[Token(Token = "0x4000B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool initiated;

		[Token(Token = "0x4000B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool applicationQuit;

		[Token(Token = "0x4000B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		private bool defaultLocalRotationSet;

		[Token(Token = "0x170000F5")]
		public Vector3 secondaryAxis
		{
			[Token(Token = "0x6000C1C")]
			[Address(RVA = "0xBA1164", Offset = "0xBA1164", VA = "0xBA1164")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000F6")]
		public Vector3 crossAxis
		{
			[Token(Token = "0x6000C1D")]
			[Address(RVA = "0xBA1170", Offset = "0xBA1170", VA = "0xBA1170")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000C18")]
		[Address(RVA = "0xBA0DE8", Offset = "0xBA0DE8", VA = "0xBA0DE8")]
		public void SetDefaultLocalRotation()
		{
		}

		[Token(Token = "0x6000C19")]
		[Address(RVA = "0xBA0E20", Offset = "0xBA0E20", VA = "0xBA0E20")]
		public Quaternion GetLimitedLocalRotation(Quaternion localRotation, out bool changed)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000C1A")]
		[Address(RVA = "0xBA10D4", Offset = "0xBA10D4", VA = "0xBA10D4")]
		public bool Apply()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C1B")]
		[Address(RVA = "0xBA1138", Offset = "0xBA1138", VA = "0xBA1138")]
		public void Disable()
		{
		}

		[Token(Token = "0x6000C1E")]
		protected abstract Quaternion LimitRotation(Quaternion rotation);

		[Token(Token = "0x6000C1F")]
		[Address(RVA = "0xBA0FD8", Offset = "0xBA0FD8", VA = "0xBA0FD8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000C20")]
		[Address(RVA = "0xBA11A0", Offset = "0xBA11A0", VA = "0xBA11A0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000C21")]
		[Address(RVA = "0xBA11A4", Offset = "0xBA11A4", VA = "0xBA11A4")]
		public void LogWarning(string message)
		{
		}

		[Token(Token = "0x6000C22")]
		[Address(RVA = "0xBA11CC", Offset = "0xBA11CC", VA = "0xBA11CC")]
		protected static Quaternion Limit1DOF(Quaternion rotation, Vector3 axis)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000C23")]
		[Address(RVA = "0xBA12A0", Offset = "0xBA12A0", VA = "0xBA12A0")]
		protected static Quaternion LimitTwist(Quaternion rotation, Vector3 axis, Vector3 orthoAxis, float twistLimit)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000C24")]
		[Address(RVA = "0xBA14F8", Offset = "0xBA14F8", VA = "0xBA14F8")]
		protected static float GetOrthogonalAngle(Vector3 v1, Vector3 v2, Vector3 normal)
		{
			return default(float);
		}

		[Token(Token = "0x6000C25")]
		[Address(RVA = "0xBA164C", Offset = "0xBA164C", VA = "0xBA164C")]
		protected RotationLimit()
		{
		}
	}
	[Token(Token = "0x20001ED")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Rotation Limits/Rotation Limit Angle")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page12.html")]
	public class RotationLimitAngle : RotationLimit
	{
		[Token(Token = "0x4000B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 180f)]
		public float limit;

		[Token(Token = "0x4000B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 180f)]
		public float twistLimit;

		[Token(Token = "0x6000C26")]
		[Address(RVA = "0xBA16AC", Offset = "0xBA16AC", VA = "0xBA16AC")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000C27")]
		[Address(RVA = "0xBA16F0", Offset = "0xBA16F0", VA = "0xBA16F0")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000C28")]
		[Address(RVA = "0xBA1734", Offset = "0xBA1734", VA = "0xBA1734")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000C29")]
		[Address(RVA = "0xBA1778", Offset = "0xBA1778", VA = "0xBA1778")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000C2A")]
		[Address(RVA = "0xBA17BC", Offset = "0xBA17BC", VA = "0xBA17BC", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000C2B")]
		[Address(RVA = "0xBA17F4", Offset = "0xBA17F4", VA = "0xBA17F4")]
		private Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000C2C")]
		[Address(RVA = "0xBA1B18", Offset = "0xBA1B18", VA = "0xBA1B18")]
		public RotationLimitAngle()
		{
		}
	}
	[Token(Token = "0x20001EE")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Rotation Limits/Rotation Limit Hinge")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page12.html")]
	public class RotationLimitHinge : RotationLimit
	{
		[Token(Token = "0x4000B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
		public bool useLimits;

		[Token(Token = "0x4000B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float min;

		[Token(Token = "0x4000B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float max;

		[Token(Token = "0x4000B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public float zeroAxisDisplayOffset;

		[Token(Token = "0x4000B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Quaternion lastRotation;

		[Token(Token = "0x4000B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float lastAngle;

		[Token(Token = "0x6000C2D")]
		[Address(RVA = "0xBA1B28", Offset = "0xBA1B28", VA = "0xBA1B28")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000C2E")]
		[Address(RVA = "0xBA1B6C", Offset = "0xBA1B6C", VA = "0xBA1B6C")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000C2F")]
		[Address(RVA = "0xBA1BB0", Offset = "0xBA1BB0", VA = "0xBA1BB0")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000C30")]
		[Address(RVA = "0xBA1BF4", Offset = "0xBA1BF4", VA = "0xBA1BF4")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000C31")]
		[Address(RVA = "0xBA1C38", Offset = "0xBA1C38", VA = "0xBA1C38", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000C32")]
		[Address(RVA = "0xBA1C54", Offset = "0xBA1C54", VA = "0xBA1C54")]
		private Quaternion LimitHinge(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000C33")]
		[Address(RVA = "0xBA1E9C", Offset = "0xBA1E9C", VA = "0xBA1E9C")]
		public RotationLimitHinge()
		{
		}
	}
	[Token(Token = "0x20001EF")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Rotation Limits/Rotation Limit Polygonal")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page12.html")]
	public class RotationLimitPolygonal : RotationLimit
	{
		[Serializable]
		[Token(Token = "0x20001F0")]
		public class ReachCone
		{
			[Token(Token = "0x4000B83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3[] tetrahedron;

			[Token(Token = "0x4000B84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float volume;

			[Token(Token = "0x4000B85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 S;

			[Token(Token = "0x4000B86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 B;

			[Token(Token = "0x170000F7")]
			public Vector3 o
			{
				[Token(Token = "0x6000C44")]
				[Address(RVA = "0xBA3D94", Offset = "0xBA3D94", VA = "0xBA3D94")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000F8")]
			public Vector3 a
			{
				[Token(Token = "0x6000C45")]
				[Address(RVA = "0xBA3DC0", Offset = "0xBA3DC0", VA = "0xBA3DC0")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000F9")]
			public Vector3 b
			{
				[Token(Token = "0x6000C46")]
				[Address(RVA = "0xBA3DF0", Offset = "0xBA3DF0", VA = "0xBA3DF0")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000FA")]
			public Vector3 c
			{
				[Token(Token = "0x6000C47")]
				[Address(RVA = "0xBA3E20", Offset = "0xBA3E20", VA = "0xBA3E20")]
				get
				{
					return default(Vector3);
				}
			}

			[Token(Token = "0x170000FB")]
			public bool isValid
			{
				[Token(Token = "0x6000C49")]
				[Address(RVA = "0xBA32BC", Offset = "0xBA32BC", VA = "0xBA32BC")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x6000C48")]
			[Address(RVA = "0xBA3760", Offset = "0xBA3760", VA = "0xBA3760")]
			public ReachCone(Vector3 _o, Vector3 _a, Vector3 _b, Vector3 _c)
			{
			}

			[Token(Token = "0x6000C4A")]
			[Address(RVA = "0xBA38D8", Offset = "0xBA38D8", VA = "0xBA38D8")]
			public void Calculate()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001F1")]
		public class LimitPoint
		{
			[Token(Token = "0x4000B87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 point;

			[Token(Token = "0x4000B88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public float tangentWeight;

			[Token(Token = "0x6000C4B")]
			[Address(RVA = "0xBA32CC", Offset = "0xBA32CC", VA = "0xBA32CC")]
			public LimitPoint()
			{
			}
		}

		[Token(Token = "0x4000B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 180f)]
		public float twistLimit;

		[Token(Token = "0x4000B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 3f)]
		public int smoothIterations;

		[Token(Token = "0x4000B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		[SerializeField]
		public LimitPoint[] points;

		[Token(Token = "0x4000B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[HideInInspector]
		public Vector3[] P;

		[Token(Token = "0x4000B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		[SerializeField]
		public ReachCone[] reachCones;

		[Token(Token = "0x6000C34")]
		[Address(RVA = "0xBA1F00", Offset = "0xBA1F00", VA = "0xBA1F00")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000C35")]
		[Address(RVA = "0xBA1F44", Offset = "0xBA1F44", VA = "0xBA1F44")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000C36")]
		[Address(RVA = "0xBA1F88", Offset = "0xBA1F88", VA = "0xBA1F88")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000C37")]
		[Address(RVA = "0xBA1FCC", Offset = "0xBA1FCC", VA = "0xBA1FCC")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000C38")]
		[Address(RVA = "0xBA2010", Offset = "0xBA2010", VA = "0xBA2010")]
		public void SetLimitPoints(LimitPoint[] points)
		{
		}

		[Token(Token = "0x6000C39")]
		[Address(RVA = "0xBA26F4", Offset = "0xBA26F4", VA = "0xBA26F4", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000C3A")]
		[Address(RVA = "0xBA277C", Offset = "0xBA277C", VA = "0xBA277C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C3B")]
		[Address(RVA = "0xBA2DC8", Offset = "0xBA2DC8", VA = "0xBA2DC8")]
		public void ResetToDefault()
		{
		}

		[Token(Token = "0x6000C3C")]
		[Address(RVA = "0xBA20A8", Offset = "0xBA20A8", VA = "0xBA20A8")]
		public void BuildReachCones()
		{
		}

		[Token(Token = "0x6000C3D")]
		[Address(RVA = "0xBA3330", Offset = "0xBA3330", VA = "0xBA3330")]
		private Vector3[] SmoothPoints()
		{
			return null;
		}

		[Token(Token = "0x6000C3E")]
		[Address(RVA = "0xBA3B4C", Offset = "0xBA3B4C", VA = "0xBA3B4C")]
		private float GetScalar(int k)
		{
			return default(float);
		}

		[Token(Token = "0x6000C3F")]
		[Address(RVA = "0xBA3B94", Offset = "0xBA3B94", VA = "0xBA3B94")]
		private Vector3 PointToTangentPlane(Vector3 p, float r)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000C40")]
		[Address(RVA = "0xBA3BF4", Offset = "0xBA3BF4", VA = "0xBA3BF4")]
		private Vector3 TangentPointToSphere(Vector3 q, float r)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000C41")]
		[Address(RVA = "0xBA2B24", Offset = "0xBA2B24", VA = "0xBA2B24")]
		private Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000C42")]
		[Address(RVA = "0xBA3C60", Offset = "0xBA3C60", VA = "0xBA3C60")]
		private int GetReachCone(Vector3 L)
		{
			return default(int);
		}

		[Token(Token = "0x6000C43")]
		[Address(RVA = "0xBA3D2C", Offset = "0xBA3D2C", VA = "0xBA3D2C")]
		public RotationLimitPolygonal()
		{
		}
	}
	[Token(Token = "0x20001F2")]
	[HelpURL("http://www.root-motion.com/finalikdox/html/page12.html")]
	[AddComponentMenu("Scripts/RootMotion.FinalIK/Rotation Limits/Rotation Limit Spline")]
	public class RotationLimitSpline : RotationLimit
	{
		[Token(Token = "0x4000B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 180f)]
		public float twistLimit;

		[Token(Token = "0x4000B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		public AnimationCurve spline;

		[Token(Token = "0x6000C4C")]
		[Address(RVA = "0xBA3E50", Offset = "0xBA3E50", VA = "0xBA3E50")]
		[ContextMenu("User Manual")]
		private void OpenUserManual()
		{
		}

		[Token(Token = "0x6000C4D")]
		[Address(RVA = "0xBA3E94", Offset = "0xBA3E94", VA = "0xBA3E94")]
		[ContextMenu("Scrpt Reference")]
		private void OpenScriptReference()
		{
		}

		[Token(Token = "0x6000C4E")]
		[Address(RVA = "0xBA3ED8", Offset = "0xBA3ED8", VA = "0xBA3ED8")]
		[ContextMenu("Support Group")]
		private void SupportGroup()
		{
		}

		[Token(Token = "0x6000C4F")]
		[Address(RVA = "0xBA3F1C", Offset = "0xBA3F1C", VA = "0xBA3F1C")]
		[ContextMenu("Asset Store Thread")]
		private void ASThread()
		{
		}

		[Token(Token = "0x6000C50")]
		[Address(RVA = "0xBA3F60", Offset = "0xBA3F60", VA = "0xBA3F60")]
		public void SetSpline(Keyframe[] keyframes)
		{
		}

		[Token(Token = "0x6000C51")]
		[Address(RVA = "0xBA3F7C", Offset = "0xBA3F7C", VA = "0xBA3F7C", Slot = "4")]
		protected override Quaternion LimitRotation(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000C52")]
		[Address(RVA = "0xBA3FB4", Offset = "0xBA3FB4", VA = "0xBA3FB4")]
		public Quaternion LimitSwing(Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000C53")]
		[Address(RVA = "0xBA4360", Offset = "0xBA4360", VA = "0xBA4360")]
		public RotationLimitSpline()
		{
		}
	}
	[Token(Token = "0x20001F3")]
	public class AimController : MonoBehaviour
	{
		[Token(Token = "0x4000B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Reference to the AimIK component.")]
		public AimIK ik;

		[Token(Token = "0x4000B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		[Tooltip("Master weight of the IK solver.")]
		public float weight;

		[Token(Token = "0x4000B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The target to aim at. Do not use the Target transform that is assigned to AimIK. Set to null if you wish to stop aiming.")]
		[Header("Target Smoothing")]
		public Transform target;

		[Token(Token = "0x4000B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The time it takes to switch targets.")]
		public float targetSwitchSmoothTime;

		[Token(Token = "0x4000B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("The time it takes to blend in/out of AimIK weight.")]
		public float weightSmoothTime;

		[Token(Token = "0x4000B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Turning Towards The Target")]
		[Tooltip("Enables smooth turning towards the target according to the parameters under this header.")]
		public bool smoothTurnTowardsTarget;

		[Token(Token = "0x4000B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Speed of turning towards the target using Vector3.RotateTowards.")]
		public float maxRadiansDelta;

		[Token(Token = "0x4000B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Speed of moving towards the target using Vector3.RotateTowards.")]
		public float maxMagnitudeDelta;

		[Token(Token = "0x4000B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Speed of slerping towards the target.")]
		public float slerpSpeed;

		[Token(Token = "0x4000B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The position of the pivot that the aim target is rotated around relative to the root of the character.")]
		public Vector3 pivotOffsetFromRoot;

		[Token(Token = "0x4000B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("Minimum distance of aiming from the first bone. Keeps the solver from failing if the target is too close.")]
		public float minDistance;

		[Token(Token = "0x4000B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Offset applied to the target in world space. Convenient for scripting aiming inaccuracy.")]
		public Vector3 offset;

		[Token(Token = "0x4000B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Range(0f, 180f)]
		[Tooltip("Character root will be rotate around the Y axis to keep root forward within this angle from the aiming direction.")]
		[Header("RootRotation")]
		public float maxRootAngle;

		[Token(Token = "0x4000B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("If true, AimIK will consider whatever the current direction of the weapon to be the forward aiming direction and work additively on top of that. This enables you to use recoil and reloading animations seamlessly with AimIK. Adjust the Vector3 value below if the weapon is not aiming perfectly forward in the aiming animation clip.")]
		[Header("Mode")]
		public bool useAnimatedAimDirection;

		[Token(Token = "0x4000B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("The direction of the animated weapon aiming in character space. Tweak this value to adjust the aiming. 'Use Animated Aim Direction' must be enabled for this property to work.")]
		public Vector3 animatedAimDirection;

		[Token(Token = "0x4000B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform lastTarget;

		[Token(Token = "0x4000B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float switchWeight;

		[Token(Token = "0x4000B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float switchWeightV;

		[Token(Token = "0x4000B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float weightV;

		[Token(Token = "0x4000B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 lastPosition;

		[Token(Token = "0x4000B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 dir;

		[Token(Token = "0x4000BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool lastSmoothTowardsTarget;

		[Token(Token = "0x170000FC")]
		private Vector3 pivot
		{
			[Token(Token = "0x6000C56")]
			[Address(RVA = "0xBA43EC", Offset = "0xBA43EC", VA = "0xBA43EC")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000C54")]
		[Address(RVA = "0xBA436C", Offset = "0xBA436C", VA = "0xBA436C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C55")]
		[Address(RVA = "0xBA4470", Offset = "0xBA4470", VA = "0xBA4470")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000C57")]
		[Address(RVA = "0xBA498C", Offset = "0xBA498C", VA = "0xBA498C")]
		private void ApplyMinDistance()
		{
		}

		[Token(Token = "0x6000C58")]
		[Address(RVA = "0xBA4B10", Offset = "0xBA4B10", VA = "0xBA4B10")]
		private void RootRotation()
		{
		}

		[Token(Token = "0x6000C59")]
		[Address(RVA = "0xBA4D5C", Offset = "0xBA4D5C", VA = "0xBA4D5C")]
		public AimController()
		{
		}
	}
	[Token(Token = "0x20001F4")]
	public class AimPoser : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20001F5")]
		public class Pose
		{
			[Token(Token = "0x4000BA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool visualize;

			[Token(Token = "0x4000BA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string name;

			[Token(Token = "0x4000BA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 direction;

			[Token(Token = "0x4000BA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float yaw;

			[Token(Token = "0x4000BA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float pitch;

			[Token(Token = "0x4000BA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float angleBuffer;

			[Token(Token = "0x6000C5D")]
			[Address(RVA = "0xBA4EFC", Offset = "0xBA4EFC", VA = "0xBA4EFC")]
			public bool IsInDirection(Vector3 d)
			{
				return default(bool);
			}

			[Token(Token = "0x6000C5E")]
			[Address(RVA = "0xBA5478", Offset = "0xBA5478", VA = "0xBA5478")]
			public void SetAngleBuffer(float value)
			{
			}

			[Token(Token = "0x6000C5F")]
			[Address(RVA = "0xBA5480", Offset = "0xBA5480", VA = "0xBA5480")]
			public Pose()
			{
			}
		}

		[Token(Token = "0x4000BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float angleBuffer;

		[Token(Token = "0x4000BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Pose[] poses;

		[Token(Token = "0x6000C5A")]
		[Address(RVA = "0xBA4E2C", Offset = "0xBA4E2C", VA = "0xBA4E2C")]
		public Pose GetPose(Vector3 localDirection)
		{
			return null;
		}

		[Token(Token = "0x6000C5B")]
		[Address(RVA = "0xBA53AC", Offset = "0xBA53AC", VA = "0xBA53AC")]
		public void SetPoseActive(Pose pose)
		{
		}

		[Token(Token = "0x6000C5C")]
		[Address(RVA = "0xBA540C", Offset = "0xBA540C", VA = "0xBA540C")]
		public AimPoser()
		{
		}
	}
	[Token(Token = "0x20001F6")]
	public class Amplifier : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20001F7")]
		public class Body
		{
			[Serializable]
			[Token(Token = "0x20001F8")]
			public class EffectorLink
			{
				[Token(Token = "0x4000BB3")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Type of the FBBIK effector to use")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4000BB4")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("Weight of using this effector")]
				public float weight;

				[Token(Token = "0x6000C65")]
				[Address(RVA = "0xBA5944", Offset = "0xBA5944", VA = "0xBA5944")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4000BAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The Transform that's motion we are reading.")]
			public Transform transform;

			[Token(Token = "0x4000BAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Amplify the 'transform's' position relative to this Transform.")]
			public Transform relativeTo;

			[Token(Token = "0x4000BAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Linking the body to effectors. One Body can be used to offset more than one effector.")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x4000BAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Amplification magnitude along the up axis of the character.")]
			public float verticalWeight;

			[Token(Token = "0x4000BAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("Amplification magnitude along the horizontal axes of the character.")]
			public float horizontalWeight;

			[Token(Token = "0x4000BAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("Speed of the amplifier. 0 means instant.")]
			public float speed;

			[Token(Token = "0x4000BB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Vector3 lastRelativePos;

			[Token(Token = "0x4000BB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Vector3 smoothDelta;

			[Token(Token = "0x4000BB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private bool firstUpdate;

			[Token(Token = "0x6000C62")]
			[Address(RVA = "0xBA55EC", Offset = "0xBA55EC", VA = "0xBA55EC")]
			public void Update(IKSolverFullBodyBiped solver, float w, float deltaTime)
			{
			}

			[Token(Token = "0x6000C63")]
			[Address(RVA = "0xBA591C", Offset = "0xBA591C", VA = "0xBA591C")]
			private static Vector3 Multiply(Vector3 v1, Vector3 v2)
			{
				return default(Vector3);
			}

			[Token(Token = "0x6000C64")]
			[Address(RVA = "0xBA592C", Offset = "0xBA592C", VA = "0xBA592C")]
			public Body()
			{
			}
		}

		[Token(Token = "0x4000BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The amplified bodies.")]
		public Body[] bodies;

		[Token(Token = "0x6000C60")]
		[Address(RVA = "0xBA549C", Offset = "0xBA549C", VA = "0xBA549C", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000C61")]
		[Address(RVA = "0xBA58FC", Offset = "0xBA58FC", VA = "0xBA58FC")]
		public Amplifier()
		{
		}
	}
	[Token(Token = "0x20001F9")]
	public class BodyTilt : OffsetModifier
	{
		[Token(Token = "0x4000BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Speed of tilting")]
		public float tiltSpeed;

		[Token(Token = "0x4000BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Sensitivity of tilting")]
		public float tiltSensitivity;

		[Token(Token = "0x4000BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The OffsetPose components")]
		public OffsetPose poseLeft;

		[Token(Token = "0x4000BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The OffsetPose components")]
		public OffsetPose poseRight;

		[Token(Token = "0x4000BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float tiltAngle;

		[Token(Token = "0x4000BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 lastForward;

		[Token(Token = "0x6000C66")]
		[Address(RVA = "0xBA594C", Offset = "0xBA594C", VA = "0xBA594C", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000C67")]
		[Address(RVA = "0xBA59B4", Offset = "0xBA59B4", VA = "0xBA59B4", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000C68")]
		[Address(RVA = "0xBA5C54", Offset = "0xBA5C54", VA = "0xBA5C54")]
		public BodyTilt()
		{
		}
	}
	[Token(Token = "0x20001FA")]
	public class HitReaction : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x20001FB")]
		public abstract class HitPoint
		{
			[Token(Token = "0x4000BBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Just for visual clarity, not used at all")]
			public string name;

			[Token(Token = "0x4000BBE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Linking this hit point to a collider")]
			public Collider collider;

			[Token(Token = "0x4000BBF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			[Tooltip("Only used if this hit point gets hit when already processing another hit")]
			private float crossFadeTime;

			[Token(Token = "0x4000BC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float length;

			[Token(Token = "0x4000BC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float crossFadeSpeed;

			[Token(Token = "0x4000BC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float lastTime;

			[Token(Token = "0x170000FE")]
			public bool inProgress
			{
				[Token(Token = "0x6000C6D")]
				[Address(RVA = "0xBA5D0C", Offset = "0xBA5D0C", VA = "0xBA5D0C")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x170000FF")]
			protected float crossFader
			{
				[Token(Token = "0x6000C6E")]
				[Address(RVA = "0xBA620C", Offset = "0xBA620C", VA = "0xBA620C")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000C6F")]
				[Address(RVA = "0xBA6214", Offset = "0xBA6214", VA = "0xBA6214")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000100")]
			protected float timer
			{
				[Token(Token = "0x6000C70")]
				[Address(RVA = "0xBA621C", Offset = "0xBA621C", VA = "0xBA621C")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000C71")]
				[Address(RVA = "0xBA6224", Offset = "0xBA6224", VA = "0xBA6224")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000101")]
			protected Vector3 force
			{
				[Token(Token = "0x6000C72")]
				[Address(RVA = "0xBA622C", Offset = "0xBA622C", VA = "0xBA622C")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000C73")]
				[Address(RVA = "0xBA6238", Offset = "0xBA6238", VA = "0xBA6238")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000102")]
			protected Vector3 point
			{
				[Token(Token = "0x6000C74")]
				[Address(RVA = "0xBA6244", Offset = "0xBA6244", VA = "0xBA6244")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000C75")]
				[Address(RVA = "0xBA6250", Offset = "0xBA6250", VA = "0xBA6250")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6000C76")]
			[Address(RVA = "0xBA60D4", Offset = "0xBA60D4", VA = "0xBA60D4")]
			public void Hit(Vector3 force, Vector3 point)
			{
			}

			[Token(Token = "0x6000C77")]
			[Address(RVA = "0xBA5DE0", Offset = "0xBA5DE0", VA = "0xBA5DE0")]
			public void Apply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x6000C78")]
			protected abstract float GetLength();

			[Token(Token = "0x6000C79")]
			protected abstract void CrossFadeStart();

			[Token(Token = "0x6000C7A")]
			protected abstract void OnApply(IKSolverFullBodyBiped solver, float weight);

			[Token(Token = "0x6000C7B")]
			[Address(RVA = "0xBA625C", Offset = "0xBA625C", VA = "0xBA625C")]
			protected HitPoint()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001FC")]
		public class HitPointEffector : HitPoint
		{
			[Serializable]
			[Token(Token = "0x20001FD")]
			public class EffectorLink
			{
				[Token(Token = "0x4000BCA")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("The FBBIK effector type")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4000BCB")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("The weight of this effector (could also be negative)")]
				public float weight;

				[Token(Token = "0x4000BCC")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Vector3 lastValue;

				[Token(Token = "0x4000BCD")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
				private Vector3 current;

				[Token(Token = "0x6000C80")]
				[Address(RVA = "0xBA6590", Offset = "0xBA6590", VA = "0xBA6590")]
				public void Apply(IKSolverFullBodyBiped solver, Vector3 offset, float crossFader)
				{
				}

				[Token(Token = "0x6000C81")]
				[Address(RVA = "0xBA63EC", Offset = "0xBA63EC", VA = "0xBA63EC")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6000C82")]
				[Address(RVA = "0xBA6640", Offset = "0xBA6640", VA = "0xBA6640")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4000BC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("Offset magnitude in the direction of the hit force")]
			public AnimationCurve offsetInForceDirection;

			[Token(Token = "0x4000BC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("Offset magnitude in the direction of character.up")]
			public AnimationCurve offsetInUpDirection;

			[Token(Token = "0x4000BC9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[Tooltip("Linking this offset to the FBBIK effectors")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x6000C7C")]
			[Address(RVA = "0xBA6270", Offset = "0xBA6270", VA = "0xBA6270", Slot = "4")]
			protected override float GetLength()
			{
				return default(float);
			}

			[Token(Token = "0x6000C7D")]
			[Address(RVA = "0xBA638C", Offset = "0xBA638C", VA = "0xBA638C", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x6000C7E")]
			[Address(RVA = "0xBA6400", Offset = "0xBA6400", VA = "0xBA6400", Slot = "6")]
			protected override void OnApply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x6000C7F")]
			[Address(RVA = "0xBA662C", Offset = "0xBA662C", VA = "0xBA662C")]
			public HitPointEffector()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001FE")]
		public class HitPointBone : HitPoint
		{
			[Serializable]
			[Token(Token = "0x20001FF")]
			public class BoneLink
			{
				[Token(Token = "0x4000BD1")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Reference to the bone that this hit point rotates")]
				public Transform bone;

				[Token(Token = "0x4000BD2")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				[Tooltip("Weight of rotating the bone")]
				[Range(0f, 1f)]
				public float weight;

				[Token(Token = "0x4000BD3")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
				private Quaternion lastValue;

				[Token(Token = "0x4000BD4")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
				private Quaternion current;

				[Token(Token = "0x6000C87")]
				[Address(RVA = "0xBA6910", Offset = "0xBA6910", VA = "0xBA6910")]
				public void Apply(IKSolverFullBodyBiped solver, Quaternion offset, float crossFader)
				{
				}

				[Token(Token = "0x6000C88")]
				[Address(RVA = "0xBA672C", Offset = "0xBA672C", VA = "0xBA672C")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6000C89")]
				[Address(RVA = "0xBA6AB0", Offset = "0xBA6AB0", VA = "0xBA6AB0")]
				public BoneLink()
				{
				}
			}

			[Token(Token = "0x4000BCE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("The angle to rotate the bone around it's rigidbody's world center of mass")]
			public AnimationCurve aroundCenterOfMass;

			[Token(Token = "0x4000BCF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("Linking this hit point to bone(s)")]
			public BoneLink[] boneLinks;

			[Token(Token = "0x4000BD0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Rigidbody rigidbody;

			[Token(Token = "0x6000C83")]
			[Address(RVA = "0xBA6648", Offset = "0xBA6648", VA = "0xBA6648", Slot = "4")]
			protected override float GetLength()
			{
				return default(float);
			}

			[Token(Token = "0x6000C84")]
			[Address(RVA = "0xBA66D4", Offset = "0xBA66D4", VA = "0xBA66D4", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x6000C85")]
			[Address(RVA = "0xBA6738", Offset = "0xBA6738", VA = "0xBA6738", Slot = "6")]
			protected override void OnApply(IKSolverFullBodyBiped solver, float weight)
			{
			}

			[Token(Token = "0x6000C86")]
			[Address(RVA = "0xBA6A9C", Offset = "0xBA6A9C", VA = "0xBA6A9C")]
			public HitPointBone()
			{
			}
		}

		[Token(Token = "0x4000BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Hit points for the FBBIK effectors")]
		public HitPointEffector[] effectorHitPoints;

		[Token(Token = "0x4000BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip(" Hit points for bones without an effector, such as the head")]
		public HitPointBone[] boneHitPoints;

		[Token(Token = "0x170000FD")]
		public bool inProgress
		{
			[Token(Token = "0x6000C69")]
			[Address(RVA = "0xBA5C70", Offset = "0xBA5C70", VA = "0xBA5C70")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000C6A")]
		[Address(RVA = "0xBA5D20", Offset = "0xBA5D20", VA = "0xBA5D20", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000C6B")]
		[Address(RVA = "0xBA5EB8", Offset = "0xBA5EB8", VA = "0xBA5EB8")]
		public void Hit(Collider collider, Vector3 force, Vector3 point)
		{
		}

		[Token(Token = "0x6000C6C")]
		[Address(RVA = "0xBA61FC", Offset = "0xBA61FC", VA = "0xBA61FC")]
		public HitReaction()
		{
		}
	}
	[Token(Token = "0x2000200")]
	public class HitReactionVRIK : OffsetModifierVRIK
	{
		[Serializable]
		[Token(Token = "0x2000201")]
		public abstract class Offset
		{
			[Token(Token = "0x4000BD8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Just for visual clarity, not used at all")]
			public string name;

			[Token(Token = "0x4000BD9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Linking this hit point to a collider")]
			public Collider collider;

			[Token(Token = "0x4000BDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[SerializeField]
			[Tooltip("Only used if this hit point gets hit when already processing another hit")]
			private float crossFadeTime;

			[Token(Token = "0x4000BDF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private float length;

			[Token(Token = "0x4000BE0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private float crossFadeSpeed;

			[Token(Token = "0x4000BE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private float lastTime;

			[Token(Token = "0x17000103")]
			protected float crossFader
			{
				[Token(Token = "0x6000C8D")]
				[Address(RVA = "0xBA7020", Offset = "0xBA7020", VA = "0xBA7020")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000C8E")]
				[Address(RVA = "0xBA7028", Offset = "0xBA7028", VA = "0xBA7028")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000104")]
			protected float timer
			{
				[Token(Token = "0x6000C8F")]
				[Address(RVA = "0xBA7030", Offset = "0xBA7030", VA = "0xBA7030")]
				[CompilerGenerated]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000C90")]
				[Address(RVA = "0xBA7038", Offset = "0xBA7038", VA = "0xBA7038")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000105")]
			protected Vector3 force
			{
				[Token(Token = "0x6000C91")]
				[Address(RVA = "0xBA7040", Offset = "0xBA7040", VA = "0xBA7040")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000C92")]
				[Address(RVA = "0xBA704C", Offset = "0xBA704C", VA = "0xBA704C")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x17000106")]
			protected Vector3 point
			{
				[Token(Token = "0x6000C93")]
				[Address(RVA = "0xBA7058", Offset = "0xBA7058", VA = "0xBA7058")]
				[CompilerGenerated]
				get
				{
					return default(Vector3);
				}
				[Token(Token = "0x6000C94")]
				[Address(RVA = "0xBA7064", Offset = "0xBA7064", VA = "0xBA7064")]
				[CompilerGenerated]
				private set
				{
				}
			}

			[Token(Token = "0x6000C95")]
			[Address(RVA = "0xBA6ED0", Offset = "0xBA6ED0", VA = "0xBA6ED0")]
			public void Hit(Vector3 force, AnimationCurve[] curves, Vector3 point)
			{
			}

			[Token(Token = "0x6000C96")]
			[Address(RVA = "0xBA6BCC", Offset = "0xBA6BCC", VA = "0xBA6BCC")]
			public void Apply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x6000C97")]
			protected abstract float GetLength(AnimationCurve[] curves);

			[Token(Token = "0x6000C98")]
			protected abstract void CrossFadeStart();

			[Token(Token = "0x6000C99")]
			protected abstract void OnApply(VRIK ik, AnimationCurve[] curves, float weight);

			[Token(Token = "0x6000C9A")]
			[Address(RVA = "0xBA7070", Offset = "0xBA7070", VA = "0xBA7070")]
			protected Offset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000202")]
		public class PositionOffset : Offset
		{
			[Serializable]
			[Token(Token = "0x2000203")]
			public class PositionOffsetLink
			{
				[Token(Token = "0x4000BE5")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("The FBBIK effector type")]
				public IKSolverVR.PositionOffset positionOffset;

				[Token(Token = "0x4000BE6")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("The weight of this effector (could also be negative)")]
				public float weight;

				[Token(Token = "0x4000BE7")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Vector3 lastValue;

				[Token(Token = "0x4000BE8")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
				private Vector3 current;

				[Token(Token = "0x6000C9F")]
				[Address(RVA = "0xBA7454", Offset = "0xBA7454", VA = "0xBA7454")]
				public void Apply(VRIK ik, Vector3 offset, float crossFader)
				{
				}

				[Token(Token = "0x6000CA0")]
				[Address(RVA = "0xBA7278", Offset = "0xBA7278", VA = "0xBA7278")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6000CA1")]
				[Address(RVA = "0xBA74E8", Offset = "0xBA74E8", VA = "0xBA74E8")]
				public PositionOffsetLink()
				{
				}
			}

			[Token(Token = "0x4000BE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("Offset magnitude in the direction of the hit force")]
			public int forceDirCurveIndex;

			[Token(Token = "0x4000BE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			[Tooltip("Offset magnitude in the direction of character.up")]
			public int upDirCurveIndex;

			[Token(Token = "0x4000BE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("Linking this offset to the VRIK position offsets")]
			public PositionOffsetLink[] offsetLinks;

			[Token(Token = "0x6000C9B")]
			[Address(RVA = "0xBA7084", Offset = "0xBA7084", VA = "0xBA7084", Slot = "4")]
			protected override float GetLength(AnimationCurve[] curves)
			{
				return default(float);
			}

			[Token(Token = "0x6000C9C")]
			[Address(RVA = "0xBA7218", Offset = "0xBA7218", VA = "0xBA7218", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x6000C9D")]
			[Address(RVA = "0xBA728C", Offset = "0xBA728C", VA = "0xBA728C", Slot = "6")]
			protected override void OnApply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x6000C9E")]
			[Address(RVA = "0xBA74CC", Offset = "0xBA74CC", VA = "0xBA74CC")]
			public PositionOffset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000204")]
		public class RotationOffset : Offset
		{
			[Serializable]
			[Token(Token = "0x2000205")]
			public class RotationOffsetLink
			{
				[Token(Token = "0x4000BEC")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Reference to the bone that this hit point rotates")]
				public IKSolverVR.RotationOffset rotationOffset;

				[Token(Token = "0x4000BED")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("Weight of rotating the bone")]
				[Range(0f, 1f)]
				public float weight;

				[Token(Token = "0x4000BEE")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private Quaternion lastValue;

				[Token(Token = "0x4000BEF")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
				private Quaternion current;

				[Token(Token = "0x6000CA6")]
				[Address(RVA = "0xBA78BC", Offset = "0xBA78BC", VA = "0xBA78BC")]
				public void Apply(VRIK ik, Quaternion offset, float crossFader)
				{
				}

				[Token(Token = "0x6000CA7")]
				[Address(RVA = "0xBA7620", Offset = "0xBA7620", VA = "0xBA7620")]
				public void CrossFadeStart()
				{
				}

				[Token(Token = "0x6000CA8")]
				[Address(RVA = "0xBA79D8", Offset = "0xBA79D8", VA = "0xBA79D8")]
				public RotationOffsetLink()
				{
				}
			}

			[Token(Token = "0x4000BE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			[Tooltip("The angle to rotate the bone around it's rigidbody's world center of mass")]
			public int curveIndex;

			[Token(Token = "0x4000BEA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("Linking this hit point to bone(s)")]
			public RotationOffsetLink[] offsetLinks;

			[Token(Token = "0x4000BEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Rigidbody rigidbody;

			[Token(Token = "0x6000CA2")]
			[Address(RVA = "0xBA74F0", Offset = "0xBA74F0", VA = "0xBA74F0", Slot = "4")]
			protected override float GetLength(AnimationCurve[] curves)
			{
				return default(float);
			}

			[Token(Token = "0x6000CA3")]
			[Address(RVA = "0xBA75C8", Offset = "0xBA75C8", VA = "0xBA75C8", Slot = "5")]
			protected override void CrossFadeStart()
			{
			}

			[Token(Token = "0x6000CA4")]
			[Address(RVA = "0xBA762C", Offset = "0xBA762C", VA = "0xBA762C", Slot = "6")]
			protected override void OnApply(VRIK ik, AnimationCurve[] curves, float weight)
			{
			}

			[Token(Token = "0x6000CA5")]
			[Address(RVA = "0xBA79C4", Offset = "0xBA79C4", VA = "0xBA79C4")]
			public RotationOffset()
			{
			}
		}

		[Token(Token = "0x4000BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve[] offsetCurves;

		[Token(Token = "0x4000BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Hit points for the FBBIK effectors")]
		public PositionOffset[] positionOffsets;

		[Token(Token = "0x4000BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip(" Hit points for bones without an effector, such as the head")]
		public RotationOffset[] rotationOffsets;

		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0xBA6B14", Offset = "0xBA6B14", VA = "0xBA6B14", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000C8B")]
		[Address(RVA = "0xBA6CAC", Offset = "0xBA6CAC", VA = "0xBA6CAC")]
		public void Hit(Collider collider, Vector3 force, Vector3 point)
		{
		}

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0xBA7000", Offset = "0xBA7000", VA = "0xBA7000")]
		public HitReactionVRIK()
		{
		}
	}
	[Token(Token = "0x2000206")]
	public class Inertia : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x2000207")]
		public class Body
		{
			[Serializable]
			[Token(Token = "0x2000208")]
			public class EffectorLink
			{
				[Token(Token = "0x4000BFD")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Type of the FBBIK effector to use")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4000BFE")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("Weight of using this effector")]
				public float weight;

				[Token(Token = "0x6000CAF")]
				[Address(RVA = "0xBA7FA0", Offset = "0xBA7FA0", VA = "0xBA7FA0")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4000BF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The Transform to follow, can be any bone of the character")]
			public Transform transform;

			[Token(Token = "0x4000BF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Linking the body to effectors. One Body can be used to offset more than one effector")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x4000BF4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The speed to follow the Transform")]
			public float speed;

			[Token(Token = "0x4000BF5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("The acceleration, smaller values means lazyer following")]
			public float acceleration;

			[Token(Token = "0x4000BF6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Matching target velocity")]
			[Range(0f, 1f)]
			public float matchVelocity;

			[Token(Token = "0x4000BF7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("gravity applied to the Body")]
			public float gravity;

			[Token(Token = "0x4000BF8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 delta;

			[Token(Token = "0x4000BF9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 lazyPoint;

			[Token(Token = "0x4000BFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Vector3 direction;

			[Token(Token = "0x4000BFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private Vector3 lastPosition;

			[Token(Token = "0x4000BFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private bool firstUpdate;

			[Token(Token = "0x6000CAC")]
			[Address(RVA = "0xBA7AA8", Offset = "0xBA7AA8", VA = "0xBA7AA8")]
			public void Reset()
			{
			}

			[Token(Token = "0x6000CAD")]
			[Address(RVA = "0xBA7C28", Offset = "0xBA7C28", VA = "0xBA7C28")]
			public void Update(IKSolverFullBodyBiped solver, float weight, float deltaTime)
			{
			}

			[Token(Token = "0x6000CAE")]
			[Address(RVA = "0xBA7F84", Offset = "0xBA7F84", VA = "0xBA7F84")]
			public Body()
			{
			}
		}

		[Token(Token = "0x4000BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The array of Bodies")]
		public Body[] bodies;

		[Token(Token = "0x4000BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The array of OffsetLimits")]
		public OffsetLimits[] limits;

		[Token(Token = "0x6000CA9")]
		[Address(RVA = "0xBA7A3C", Offset = "0xBA7A3C", VA = "0xBA7A3C")]
		public void ResetBodies()
		{
		}

		[Token(Token = "0x6000CAA")]
		[Address(RVA = "0xBA7B84", Offset = "0xBA7B84", VA = "0xBA7B84", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000CAB")]
		[Address(RVA = "0xBA7F74", Offset = "0xBA7F74", VA = "0xBA7F74")]
		public Inertia()
		{
		}
	}
	[Token(Token = "0x2000209")]
	public abstract class OffsetModifier : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200020A")]
		public class OffsetLimits
		{
			[Token(Token = "0x4000C02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("The effector type (this is just an enum)")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x4000C03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Spring force, if zero then this is a hard limit, if not, offset can exceed the limit.")]
			public float spring;

			[Token(Token = "0x4000C04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Which axes to limit the offset on?")]
			public bool x;

			[Token(Token = "0x4000C05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
			[Tooltip("Which axes to limit the offset on?")]
			public bool y;

			[Token(Token = "0x4000C06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
			[Tooltip("Which axes to limit the offset on?")]
			public bool z;

			[Token(Token = "0x4000C07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Tooltip("The limits")]
			public float minX;

			[Token(Token = "0x4000C08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("The limits")]
			public float maxX;

			[Token(Token = "0x4000C09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("The limits")]
			public float minY;

			[Token(Token = "0x4000C0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("The limits")]
			public float maxY;

			[Token(Token = "0x4000C0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("The limits")]
			public float minZ;

			[Token(Token = "0x4000C0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Tooltip("The limits")]
			public float maxZ;

			[Token(Token = "0x6000CB8")]
			[Address(RVA = "0xBA8118", Offset = "0xBA8118", VA = "0xBA8118")]
			public void Apply(IKEffector e, Quaternion rootRotation)
			{
			}

			[Token(Token = "0x6000CB9")]
			[Address(RVA = "0xBA83A8", Offset = "0xBA83A8", VA = "0xBA83A8")]
			private float SpringAxis(float value, float min, float max)
			{
				return default(float);
			}

			[Token(Token = "0x6000CBA")]
			[Address(RVA = "0xBA8418", Offset = "0xBA8418", VA = "0xBA8418")]
			private float Spring(float value, float limit, bool negative)
			{
				return default(float);
			}

			[Token(Token = "0x6000CBB")]
			[Address(RVA = "0xBA8460", Offset = "0xBA8460", VA = "0xBA8460")]
			public OffsetLimits()
			{
			}
		}

		[Token(Token = "0x200020B")]
		[CompilerGenerated]
		private sealed class <Initiate>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000C0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000C0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000C0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OffsetModifier <>4__this;

			[Token(Token = "0x17000108")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000CBF")]
				[Address(RVA = "0xBA85DC", Offset = "0xBA85DC", VA = "0xBA85DC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000109")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000CC1")]
				[Address(RVA = "0xBA8624", Offset = "0xBA8624", VA = "0xBA8624", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000CBC")]
			[Address(RVA = "0xBA801C", Offset = "0xBA801C", VA = "0xBA801C")]
			[DebuggerHidden]
			public <Initiate>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6000CBD")]
			[Address(RVA = "0xBA8468", Offset = "0xBA8468", VA = "0xBA8468", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000CBE")]
			[Address(RVA = "0xBA846C", Offset = "0xBA846C", VA = "0xBA846C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000CC0")]
			[Address(RVA = "0xBA85E4", Offset = "0xBA85E4", VA = "0xBA85E4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The master weight")]
		public float weight;

		[Token(Token = "0x4000C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Reference to the FBBIK component")]
		public FullBodyBipedIK ik;

		[Token(Token = "0x4000C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected float lastTime;

		[Token(Token = "0x17000107")]
		protected float deltaTime
		{
			[Token(Token = "0x6000CB0")]
			[Address(RVA = "0xBA55CC", Offset = "0xBA55CC", VA = "0xBA55CC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000CB1")]
		protected abstract void OnModifyOffset();

		[Token(Token = "0x6000CB2")]
		[Address(RVA = "0xBA5994", Offset = "0xBA5994", VA = "0xBA5994", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000CB3")]
		[Address(RVA = "0xBA7FA8", Offset = "0xBA7FA8", VA = "0xBA7FA8")]
		[IteratorStateMachine(typeof(<Initiate>d__8))]
		private IEnumerator Initiate()
		{
			return null;
		}

		[Token(Token = "0x6000CB4")]
		[Address(RVA = "0xBA8044", Offset = "0xBA8044", VA = "0xBA8044")]
		private void ModifyOffset()
		{
		}

		[Token(Token = "0x6000CB5")]
		[Address(RVA = "0xBA7ECC", Offset = "0xBA7ECC", VA = "0xBA7ECC")]
		protected void ApplyLimits(OffsetLimits[] limits)
		{
		}

		[Token(Token = "0x6000CB6")]
		[Address(RVA = "0xBA827C", Offset = "0xBA827C", VA = "0xBA827C", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000CB7")]
		[Address(RVA = "0xBA590C", Offset = "0xBA590C", VA = "0xBA590C")]
		protected OffsetModifier()
		{
		}
	}
	[Token(Token = "0x200020C")]
	public abstract class OffsetModifierVRIK : MonoBehaviour
	{
		[Token(Token = "0x200020D")]
		[CompilerGenerated]
		private sealed class <Initiate>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000C13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000C14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000C15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OffsetModifierVRIK <>4__this;

			[Token(Token = "0x1700010B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000CCC")]
				[Address(RVA = "0xBA8A7C", Offset = "0xBA8A7C", VA = "0xBA8A7C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700010C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000CCE")]
				[Address(RVA = "0xBA8AC4", Offset = "0xBA8AC4", VA = "0xBA8AC4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000CC9")]
			[Address(RVA = "0xBA86E0", Offset = "0xBA86E0", VA = "0xBA86E0")]
			[DebuggerHidden]
			public <Initiate>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6000CCA")]
			[Address(RVA = "0xBA8908", Offset = "0xBA8908", VA = "0xBA8908", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000CCB")]
			[Address(RVA = "0xBA890C", Offset = "0xBA890C", VA = "0xBA890C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000CCD")]
			[Address(RVA = "0xBA8A84", Offset = "0xBA8A84", VA = "0xBA8A84", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The master weight")]
		public float weight;

		[Token(Token = "0x4000C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Reference to the VRIK component")]
		public VRIK ik;

		[Token(Token = "0x4000C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float lastTime;

		[Token(Token = "0x1700010A")]
		protected float deltaTime
		{
			[Token(Token = "0x6000CC2")]
			[Address(RVA = "0xBA862C", Offset = "0xBA862C", VA = "0xBA862C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000CC3")]
		protected abstract void OnModifyOffset();

		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0xBA864C", Offset = "0xBA864C", VA = "0xBA864C", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0xBA866C", Offset = "0xBA866C", VA = "0xBA866C")]
		[IteratorStateMachine(typeof(<Initiate>d__7))]
		private IEnumerator Initiate()
		{
			return null;
		}

		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0xBA8708", Offset = "0xBA8708", VA = "0xBA8708")]
		private void ModifyOffset()
		{
		}

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0xBA87DC", Offset = "0xBA87DC", VA = "0xBA87DC", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0xBA7010", Offset = "0xBA7010", VA = "0xBA7010")]
		protected OffsetModifierVRIK()
		{
		}
	}
	[Token(Token = "0x200020E")]
	public class OffsetPose : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x200020F")]
		public class EffectorLink
		{
			[Token(Token = "0x4000C17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FullBodyBipedEffector effector;

			[Token(Token = "0x4000C18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 offset;

			[Token(Token = "0x4000C19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector3 pin;

			[Token(Token = "0x4000C1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 pinWeight;

			[Token(Token = "0x6000CD2")]
			[Address(RVA = "0xBA8ACC", Offset = "0xBA8ACC", VA = "0xBA8ACC")]
			public void Apply(IKSolverFullBodyBiped solver, float weight, Quaternion rotation)
			{
			}

			[Token(Token = "0x6000CD3")]
			[Address(RVA = "0xBA8E24", Offset = "0xBA8E24", VA = "0xBA8E24")]
			public EffectorLink()
			{
			}
		}

		[Token(Token = "0x4000C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EffectorLink[] effectorLinks;

		[Token(Token = "0x6000CCF")]
		[Address(RVA = "0xBA5BA0", Offset = "0xBA5BA0", VA = "0xBA5BA0")]
		public void Apply(IKSolverFullBodyBiped solver, float weight)
		{
		}

		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0xBA8D1C", Offset = "0xBA8D1C", VA = "0xBA8D1C")]
		public void Apply(IKSolverFullBodyBiped solver, float weight, Quaternion rotation)
		{
		}

		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0xBA8DC0", Offset = "0xBA8DC0", VA = "0xBA8DC0")]
		public OffsetPose()
		{
		}
	}
	[Token(Token = "0x2000210")]
	public class Recoil : OffsetModifier
	{
		[Serializable]
		[Token(Token = "0x2000211")]
		public class RecoilOffset
		{
			[Serializable]
			[Token(Token = "0x2000212")]
			public class EffectorLink
			{
				[Token(Token = "0x4000C38")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				[Tooltip("Type of the FBBIK effector to use")]
				public FullBodyBipedEffector effector;

				[Token(Token = "0x4000C39")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
				[Tooltip("Weight of using this effector")]
				public float weight;

				[Token(Token = "0x6000CE3")]
				[Address(RVA = "0xBAA1D0", Offset = "0xBAA1D0", VA = "0xBAA1D0")]
				public EffectorLink()
				{
				}
			}

			[Token(Token = "0x4000C32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Offset vector for the associated effector when doing recoil.")]
			public Vector3 offset;

			[Token(Token = "0x4000C33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Tooltip("When firing before the last recoil has faded, how much of the current recoil offset will be maintained?")]
			[Range(0f, 1f)]
			public float additivity;

			[Token(Token = "0x4000C34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Max additive recoil for automatic fire.")]
			public float maxAdditiveOffsetMag;

			[Token(Token = "0x4000C35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Linking this recoil offset to FBBIK effectors.")]
			public EffectorLink[] effectorLinks;

			[Token(Token = "0x4000C36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 additiveOffset;

			[Token(Token = "0x4000C37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private Vector3 lastOffset;

			[Token(Token = "0x6000CE0")]
			[Address(RVA = "0xBA8FC8", Offset = "0xBA8FC8", VA = "0xBA8FC8")]
			public void Start()
			{
			}

			[Token(Token = "0x6000CE1")]
			[Address(RVA = "0xBA9B48", Offset = "0xBA9B48", VA = "0xBA9B48")]
			public void Apply(IKSolverFullBodyBiped solver, Quaternion rotation, float masterWeight, float length, float timeLeft)
			{
			}

			[Token(Token = "0x6000CE2")]
			[Address(RVA = "0xBAA1BC", Offset = "0xBAA1BC", VA = "0xBAA1BC")]
			public RecoilOffset()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000213")]
		public enum Handedness
		{
			[Token(Token = "0x4000C3B")]
			Right,
			[Token(Token = "0x4000C3C")]
			Left
		}

		[Token(Token = "0x4000C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Reference to the AimIK component. Optional, only used to getting the aiming direction.")]
		public AimIK aimIK;

		[Token(Token = "0x4000C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Set this true if you are using IKExecutionOrder.cs or a custom script to force AimIK solve after FBBIK.")]
		public bool aimIKSolvedLast;

		[Token(Token = "0x4000C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Which hand is holding the weapon?")]
		public Handedness handedness;

		[Token(Token = "0x4000C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Check for 2-handed weapons.")]
		public bool twoHanded;

		[Token(Token = "0x4000C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Weight curve for the recoil offsets. Recoil procedure is as long as this curve.")]
		public AnimationCurve recoilWeight;

		[Token(Token = "0x4000C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("How much is the magnitude randomized each time Recoil is called?")]
		public float magnitudeRandom;

		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("How much is the rotation randomized each time Recoil is called?")]
		public Vector3 rotationRandom;

		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Rotating the primary hand bone for the recoil (in local space).")]
		public Vector3 handRotationOffset;

		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("Time of blending in another recoil when doing automatic fire.")]
		public float blendTime;

		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Space(10f)]
		[Tooltip("FBBIK effector position offsets for the recoil (in aiming direction space).")]
		public RecoilOffset[] offsets;

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public Quaternion rotationOffset;

		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float magnitudeMlp;

		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float endTime;

		[Token(Token = "0x4000C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Quaternion handRotation;

		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Quaternion secondaryHandRelativeRotation;

		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Quaternion randomRotation;

		[Token(Token = "0x4000C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float length;

		[Token(Token = "0x4000C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private bool initiated;

		[Token(Token = "0x4000C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float blendWeight;

		[Token(Token = "0x4000C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float w;

		[Token(Token = "0x4000C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Quaternion primaryHandRotation;

		[Token(Token = "0x4000C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool handRotationsSet;

		[Token(Token = "0x4000C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Vector3 aimIKAxis;

		[Token(Token = "0x1700010D")]
		public bool isFinished
		{
			[Token(Token = "0x6000CD4")]
			[Address(RVA = "0xBA8E2C", Offset = "0xBA8E2C", VA = "0xBA8E2C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700010E")]
		private IKEffector primaryHandEffector
		{
			[Token(Token = "0x6000CDA")]
			[Address(RVA = "0xBA9D4C", Offset = "0xBA9D4C", VA = "0xBA9D4C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700010F")]
		private IKEffector secondaryHandEffector
		{
			[Token(Token = "0x6000CDB")]
			[Address(RVA = "0xBA9D88", Offset = "0xBA9D88", VA = "0xBA9D88")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000110")]
		private Transform primaryHand
		{
			[Token(Token = "0x6000CDC")]
			[Address(RVA = "0xBA9D14", Offset = "0xBA9D14", VA = "0xBA9D14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000111")]
		private Transform secondaryHand
		{
			[Token(Token = "0x6000CDD")]
			[Address(RVA = "0xBA9D30", Offset = "0xBA9D30", VA = "0xBA9D30")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0xBA8E50", Offset = "0xBA8E50", VA = "0xBA8E50")]
		public void SetHandRotations(Quaternion leftHandRotation, Quaternion rightHandRotation)
		{
		}

		[Token(Token = "0x6000CD6")]
		[Address(RVA = "0xBA8E7C", Offset = "0xBA8E7C", VA = "0xBA8E7C")]
		public void Fire(float magnitude)
		{
		}

		[Token(Token = "0x6000CD7")]
		[Address(RVA = "0xBA909C", Offset = "0xBA909C", VA = "0xBA909C", Slot = "4")]
		protected override void OnModifyOffset()
		{
		}

		[Token(Token = "0x6000CD8")]
		[Address(RVA = "0xBA9DC4", Offset = "0xBA9DC4", VA = "0xBA9DC4")]
		private void AfterFBBIK()
		{
		}

		[Token(Token = "0x6000CD9")]
		[Address(RVA = "0xBA9EDC", Offset = "0xBA9EDC", VA = "0xBA9EDC")]
		private void AfterAimIK()
		{
		}

		[Token(Token = "0x6000CDE")]
		[Address(RVA = "0xBA9F2C", Offset = "0xBA9F2C", VA = "0xBA9F2C", Slot = "6")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6000CDF")]
		[Address(RVA = "0xBAA130", Offset = "0xBAA130", VA = "0xBAA130")]
		public Recoil()
		{
		}
	}
	[Token(Token = "0x2000214")]
	public class ShoulderRotator : MonoBehaviour
	{
		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Weight of shoulder rotation")]
		public float weight;

		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The greater the offset, the sooner the shoulder will start rotating")]
		public float offset;

		[Token(Token = "0x4000C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FullBodyBipedIK ik;

		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool skip;

		[Token(Token = "0x6000CE4")]
		[Address(RVA = "0xBAA1D8", Offset = "0xBAA1D8", VA = "0xBAA1D8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CE5")]
		[Address(RVA = "0xBAA2EC", Offset = "0xBAA2EC", VA = "0xBAA2EC")]
		private void RotateShoulders()
		{
		}

		[Token(Token = "0x6000CE6")]
		[Address(RVA = "0xBAA3C8", Offset = "0xBAA3C8", VA = "0xBAA3C8")]
		private void RotateShoulder(FullBodyBipedChain chain, float weight, float offset)
		{
		}

		[Token(Token = "0x6000CE7")]
		[Address(RVA = "0xBAA7CC", Offset = "0xBAA7CC", VA = "0xBAA7CC")]
		private IKMapping.BoneMap GetParentBoneMap(FullBodyBipedChain chain)
		{
			return null;
		}

		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0xBAA800", Offset = "0xBAA800", VA = "0xBAA800")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000CE9")]
		[Address(RVA = "0xBAA92C", Offset = "0xBAA92C", VA = "0xBAA92C")]
		public ShoulderRotator()
		{
		}
	}
	[Token(Token = "0x2000215")]
	public static class VRIKCalibrator
	{
		[Serializable]
		[Token(Token = "0x2000216")]
		public class Settings
		{
			[Token(Token = "0x4000C41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Local axis of the HMD facing forward.")]
			public Vector3 headTrackerForward;

			[Token(Token = "0x4000C42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Tooltip("Local axis of the HMD facing up.")]
			public Vector3 headTrackerUp;

			[Token(Token = "0x4000C43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Local axis of the body tracker towards the player's forward direction.")]
			public Vector3 bodyTrackerForward;

			[Token(Token = "0x4000C44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			[Tooltip("Local axis of the body tracker towards the up direction.")]
			public Vector3 bodyTrackerUp;

			[Token(Token = "0x4000C45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			[Tooltip("Local axis of the hand trackers pointing from the wrist towards the palm.")]
			public Vector3 handTrackerForward;

			[Token(Token = "0x4000C46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			[Tooltip("Local axis of the hand trackers pointing in the direction of the surface normal of the back of the hand.")]
			public Vector3 handTrackerUp;

			[Token(Token = "0x4000C47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			[Tooltip("Local axis of the foot trackers towards the player's forward direction.")]
			public Vector3 footTrackerForward;

			[Token(Token = "0x4000C48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			[Tooltip("Local axis of the foot tracker towards the up direction.")]
			public Vector3 footTrackerUp;

			[Token(Token = "0x4000C49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[Space(10f)]
			[Tooltip("Offset of the head bone from the HMD in (headTrackerForward, headTrackerUp) space relative to the head tracker.")]
			public Vector3 headOffset;

			[Token(Token = "0x4000C4A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			[Tooltip("Offset of the hand bones from the hand trackers in (handTrackerForward, handTrackerUp) space relative to the hand trackers.")]
			public Vector3 handOffset;

			[Token(Token = "0x4000C4B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			[Tooltip("Forward offset of the foot bones from the foot trackers.")]
			public float footForwardOffset;

			[Token(Token = "0x4000C4C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
			[Tooltip("Inward offset of the foot bones from the foot trackers.")]
			public float footInwardOffset;

			[Token(Token = "0x4000C4D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[Tooltip("Used for adjusting foot heading relative to the foot trackers.")]
			[Range(-180f, 180f)]
			public float footHeadingOffset;

			[Token(Token = "0x6000CEC")]
			[Address(RVA = "0xBAC164", Offset = "0xBAC164", VA = "0xBAC164")]
			public Settings()
			{
			}
		}

		[Token(Token = "0x6000CEA")]
		[Address(RVA = "0xBAA940", Offset = "0xBAA940", VA = "0xBAA940")]
		public static void Calibrate(VRIK ik, Settings settings, Transform headTracker, [Optional] Transform bodyTracker, [Optional] Transform leftHandTracker, [Optional] Transform rightHandTracker, [Optional] Transform leftFootTracker, [Optional] Transform rightFootTracker)
		{
		}

		[Token(Token = "0x6000CEB")]
		[Address(RVA = "0xBAB994", Offset = "0xBAB994", VA = "0xBAB994")]
		private static void CalibrateLeg(Settings settings, Transform tracker, IKSolverVR.Leg leg, Transform lastBone, Vector3 rootForward, bool isLeft)
		{
		}
	}
	[Token(Token = "0x2000217")]
	public class VRIKRootController : MonoBehaviour
	{
		[Token(Token = "0x4000C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform pelvisTarget;

		[Token(Token = "0x4000C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform leftFootTarget;

		[Token(Token = "0x4000C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform rightFootTarget;

		[Token(Token = "0x4000C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 pelvisTargetRight;

		[Token(Token = "0x4000C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private VRIK ik;

		[Token(Token = "0x6000CED")]
		[Address(RVA = "0xBAC358", Offset = "0xBAC358", VA = "0xBAC358")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000CEE")]
		[Address(RVA = "0xBAC074", Offset = "0xBAC074", VA = "0xBAC074")]
		public void Calibrate()
		{
		}

		[Token(Token = "0x6000CEF")]
		[Address(RVA = "0xBAC46C", Offset = "0xBAC46C", VA = "0xBAC46C")]
		private void OnPreUpdate()
		{
		}

		[Token(Token = "0x6000CF0")]
		[Address(RVA = "0xBAC754", Offset = "0xBAC754", VA = "0xBAC754")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000CF1")]
		[Address(RVA = "0xBAC880", Offset = "0xBAC880", VA = "0xBAC880")]
		public VRIKRootController()
		{
		}
	}
}
namespace UnityStandardAssets.CinematicEffects
{
	[Token(Token = "0x2000218")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	[AddComponentMenu("Image Effects/Cinematic/Anti-aliasing")]
	[ImageEffectAllowedInSceneView]
	public class AntiAliasing : MonoBehaviour
	{
		[Token(Token = "0x2000219")]
		public enum Method
		{
			[Token(Token = "0x4000C58")]
			Smaa,
			[Token(Token = "0x4000C59")]
			Fxaa
		}

		[Token(Token = "0x4000C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private SMAA m_SMAA;

		[Token(Token = "0x4000C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private FXAA m_FXAA;

		[Token(Token = "0x4000C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		[HideInInspector]
		private int m_Method;

		[Token(Token = "0x4000C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Camera m_Camera;

		[Token(Token = "0x17000112")]
		public int method
		{
			[Token(Token = "0x6000CF2")]
			[Address(RVA = "0xBAC888", Offset = "0xBAC888", VA = "0xBAC888")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000CF3")]
			[Address(RVA = "0xBAC890", Offset = "0xBAC890", VA = "0xBAC890")]
			set
			{
			}
		}

		[Token(Token = "0x17000113")]
		public IAntiAliasing current
		{
			[Token(Token = "0x6000CF4")]
			[Address(RVA = "0xBAC8A4", Offset = "0xBAC8A4", VA = "0xBAC8A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000114")]
		public Camera cameraComponent
		{
			[Token(Token = "0x6000CF5")]
			[Address(RVA = "0xBAC8C0", Offset = "0xBAC8C0", VA = "0xBAC8C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0xBAC968", Offset = "0xBAC968", VA = "0xBAC968")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0xBACBC0", Offset = "0xBACBC0", VA = "0xBACBC0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0xBACC80", Offset = "0xBACC80", VA = "0xBACC80")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0xBACE30", Offset = "0xBACE30", VA = "0xBACE30")]
		private void OnPreCull()
		{
		}

		[Token(Token = "0x6000CFA")]
		[Address(RVA = "0xBACEF8", Offset = "0xBACEF8", VA = "0xBACEF8")]
		private void OnPostRender()
		{
		}

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0xBACFC0", Offset = "0xBACFC0", VA = "0xBACFC0")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000CFC")]
		[Address(RVA = "0xBAD0A0", Offset = "0xBAD0A0", VA = "0xBAD0A0")]
		public AntiAliasing()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200021A")]
	public class FXAA : IAntiAliasing
	{
		[Serializable]
		[Token(Token = "0x200021B")]
		public struct QualitySettings
		{
			[Token(Token = "0x4000C61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("The amount of desired sub-pixel aliasing removal. Effects the sharpeness of the output.")]
			[Range(0f, 1f)]
			public float subpixelAliasingRemovalAmount;

			[Token(Token = "0x4000C62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("The minimum amount of local contrast required to qualify a region as containing an edge.")]
			[Range(0.063f, 0.333f)]
			public float edgeDetectionThreshold;

			[Token(Token = "0x4000C63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Local contrast adaptation value to disallow the algorithm from executing on the darker regions.")]
			[Range(0f, 0.0833f)]
			public float minimumRequiredLuminance;
		}

		[Serializable]
		[Token(Token = "0x200021C")]
		public struct ConsoleSettings
		{
			[Token(Token = "0x4000C64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("The amount of spread applied to the sampling coordinates while sampling for subpixel information.")]
			[Range(0.33f, 0.5f)]
			public float subpixelSpreadAmount;

			[Token(Token = "0x4000C65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("This value dictates how sharp the edges in the image are kept; a higher value implies sharper edges.")]
			[Range(2f, 8f)]
			public float edgeSharpnessAmount;

			[Token(Token = "0x4000C66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("The minimum amount of local contrast required to qualify a region as containing an edge.")]
			[Range(0.125f, 0.25f)]
			public float edgeDetectionThreshold;

			[Token(Token = "0x4000C67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Range(0.04f, 0.06f)]
			[Tooltip("Local contrast adaptation value to disallow the algorithm from executing on the darker regions.")]
			public float minimumRequiredLuminance;
		}

		[Serializable]
		[Token(Token = "0x200021D")]
		public struct Preset
		{
			[Token(Token = "0x200021E")]
			[AttributeUsage(AttributeTargets.Field)]
			public class LayoutAttribute : PropertyAttribute
			{
				[Token(Token = "0x6000D0F")]
				[Address(RVA = "0xBADA80", Offset = "0xBADA80", VA = "0xBADA80")]
				public LayoutAttribute()
				{
				}
			}

			[Token(Token = "0x4000C68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Layout]
			public QualitySettings qualitySettings;

			[Token(Token = "0x4000C69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Layout]
			public ConsoleSettings consoleSettings;

			[Token(Token = "0x4000C6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static readonly Preset s_ExtremePerformance;

			[Token(Token = "0x4000C6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private static readonly Preset s_Performance;

			[Token(Token = "0x4000C6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private static readonly Preset s_Default;

			[Token(Token = "0x4000C6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private static readonly Preset s_Quality;

			[Token(Token = "0x4000C6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			private static readonly Preset s_ExtremeQuality;

			[Token(Token = "0x17000118")]
			public static Preset extremePerformancePreset
			{
				[Token(Token = "0x6000D09")]
				[Address(RVA = "0xBAD784", Offset = "0xBAD784", VA = "0xBAD784")]
				get
				{
					return default(Preset);
				}
			}

			[Token(Token = "0x17000119")]
			public static Preset performancePreset
			{
				[Token(Token = "0x6000D0A")]
				[Address(RVA = "0xBAD7EC", Offset = "0xBAD7EC", VA = "0xBAD7EC")]
				get
				{
					return default(Preset);
				}
			}

			[Token(Token = "0x1700011A")]
			public static Preset defaultPreset
			{
				[Token(Token = "0x6000D0B")]
				[Address(RVA = "0xBAD854", Offset = "0xBAD854", VA = "0xBAD854")]
				get
				{
					return default(Preset);
				}
			}

			[Token(Token = "0x1700011B")]
			public static Preset qualityPreset
			{
				[Token(Token = "0x6000D0C")]
				[Address(RVA = "0xBAD8BC", Offset = "0xBAD8BC", VA = "0xBAD8BC")]
				get
				{
					return default(Preset);
				}
			}

			[Token(Token = "0x1700011C")]
			public static Preset extremeQualityPreset
			{
				[Token(Token = "0x6000D0D")]
				[Address(RVA = "0xBAD924", Offset = "0xBAD924", VA = "0xBAD924")]
				get
				{
					return default(Preset);
				}
			}
		}

		[Token(Token = "0x4000C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Shader m_Shader;

		[Token(Token = "0x4000C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Material m_Material;

		[Token(Token = "0x4000C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[HideInInspector]
		public Preset preset;

		[Token(Token = "0x4000C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Preset[] availablePresets;

		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int m_QualitySettings;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int m_ConsoleSettings;

		[Token(Token = "0x17000115")]
		private Shader shader
		{
			[Token(Token = "0x6000CFD")]
			[Address(RVA = "0xBAD2B0", Offset = "0xBAD2B0", VA = "0xBAD2B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000116")]
		public Material material
		{
			[Token(Token = "0x6000CFE")]
			[Address(RVA = "0xBAD34C", Offset = "0xBAD34C", VA = "0xBAD34C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000117")]
		public bool validSourceFormat
		{
			[Token(Token = "0x6000CFF")]
			[Address(RVA = "0xBAD3E4", Offset = "0xBAD3E4", VA = "0xBAD3E4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000D00")]
			[Address(RVA = "0xBAD3EC", Offset = "0xBAD3EC", VA = "0xBAD3EC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000D01")]
		[Address(RVA = "0xBACB44", Offset = "0xBACB44", VA = "0xBACB44", Slot = "4")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000D02")]
		[Address(RVA = "0xBACC38", Offset = "0xBACC38", VA = "0xBACC38", Slot = "5")]
		public void OnEnable(AntiAliasing owner)
		{
		}

		[Token(Token = "0x6000D03")]
		[Address(RVA = "0xBACDA0", Offset = "0xBACDA0", VA = "0xBACDA0", Slot = "6")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6000D04")]
		[Address(RVA = "0xBAD3F8", Offset = "0xBAD3F8", VA = "0xBAD3F8", Slot = "7")]
		public void OnPreCull(Camera camera)
		{
		}

		[Token(Token = "0x6000D05")]
		[Address(RVA = "0xBAD3FC", Offset = "0xBAD3FC", VA = "0xBAD3FC", Slot = "8")]
		public void OnPostRender(Camera camera)
		{
		}

		[Token(Token = "0x6000D06")]
		[Address(RVA = "0xBAD400", Offset = "0xBAD400", VA = "0xBAD400", Slot = "9")]
		public void OnRenderImage(Camera camera, RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000D07")]
		[Address(RVA = "0xBAD208", Offset = "0xBAD208", VA = "0xBAD208")]
		public FXAA()
		{
		}
	}
	[Token(Token = "0x200021F")]
	public interface IAntiAliasing
	{
		[Token(Token = "0x6000D10")]
		void Awake();

		[Token(Token = "0x6000D11")]
		void OnEnable(AntiAliasing owner);

		[Token(Token = "0x6000D12")]
		void OnDisable();

		[Token(Token = "0x6000D13")]
		void OnPreCull(Camera camera);

		[Token(Token = "0x6000D14")]
		void OnPostRender(Camera camera);

		[Token(Token = "0x6000D15")]
		void OnRenderImage(Camera camera, RenderTexture source, RenderTexture destination);
	}
	[Serializable]
	[Token(Token = "0x2000220")]
	public class SMAA : IAntiAliasing
	{
		[Token(Token = "0x2000221")]
		[AttributeUsage(AttributeTargets.Field)]
		public class SettingsGroup : Attribute
		{
			[Token(Token = "0x6000D22")]
			[Address(RVA = "0xBAE828", Offset = "0xBAE828", VA = "0xBAE828")]
			public SettingsGroup()
			{
			}
		}

		[Token(Token = "0x2000222")]
		[AttributeUsage(AttributeTargets.Field)]
		public class TopLevelSettings : Attribute
		{
			[Token(Token = "0x6000D23")]
			[Address(RVA = "0xBAE830", Offset = "0xBAE830", VA = "0xBAE830")]
			public TopLevelSettings()
			{
			}
		}

		[Token(Token = "0x2000223")]
		[AttributeUsage(AttributeTargets.Field)]
		public class ExperimentalGroup : Attribute
		{
			[Token(Token = "0x6000D24")]
			[Address(RVA = "0xBAE838", Offset = "0xBAE838", VA = "0xBAE838")]
			public ExperimentalGroup()
			{
			}
		}

		[Token(Token = "0x2000224")]
		public enum DebugPass
		{
			[Token(Token = "0x4000C86")]
			Off,
			[Token(Token = "0x4000C87")]
			Edges,
			[Token(Token = "0x4000C88")]
			Weights,
			[Token(Token = "0x4000C89")]
			Accumulation
		}

		[Token(Token = "0x2000225")]
		public enum QualityPreset
		{
			[Token(Token = "0x4000C8B")]
			Low,
			[Token(Token = "0x4000C8C")]
			Medium,
			[Token(Token = "0x4000C8D")]
			High,
			[Token(Token = "0x4000C8E")]
			Ultra,
			[Token(Token = "0x4000C8F")]
			Custom
		}

		[Token(Token = "0x2000226")]
		public enum EdgeDetectionMethod
		{
			[Token(Token = "0x4000C91")]
			Luma = 1,
			[Token(Token = "0x4000C92")]
			Color,
			[Token(Token = "0x4000C93")]
			Depth
		}

		[Serializable]
		[Token(Token = "0x2000227")]
		public struct GlobalSettings
		{
			[Token(Token = "0x4000C94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Use this to fine tune your settings when working in Custom quality mode. \"Accumulation\" only works when \"Temporal Filtering\" is enabled.")]
			public DebugPass debugPass;

			[Token(Token = "0x4000C95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("Low: 60% of the quality.\nMedium: 80% of the quality.\nHigh: 95% of the quality.\nUltra: 99% of the quality (overkill).")]
			public QualityPreset quality;

			[Token(Token = "0x4000C96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("You've three edge detection methods to choose from: luma, color or depth.\nThey represent different quality/performance and anti-aliasing/sharpness tradeoffs, so our recommendation is for you to choose the one that best suits your particular scenario:\n\n- Depth edge detection is usually the fastest but it may miss some edges.\n- Luma edge detection is usually more expensive than depth edge detection, but catches visible edges that depth edge detection can miss.\n- Color edge detection is usually the most expensive one but catches chroma-only edges.")]
			public EdgeDetectionMethod edgeDetectionMethod;

			[Token(Token = "0x17000121")]
			public static GlobalSettings defaultSettings
			{
				[Token(Token = "0x6000D25")]
				[Address(RVA = "0xBAE7FC", Offset = "0xBAE7FC", VA = "0xBAE7FC")]
				get
				{
					return default(GlobalSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x2000228")]
		public struct QualitySettings
		{
			[Token(Token = "0x4000C97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Enables/Disables diagonal processing.")]
			public bool diagonalDetection;

			[Token(Token = "0x4000C98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
			[Tooltip("Enables/Disables corner detection. Leave this on to avoid blurry corners.")]
			public bool cornerDetection;

			[Token(Token = "0x4000C99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Range(0f, 0.5f)]
			[Tooltip("Specifies the threshold or sensitivity to edges. Lowering this value you will be able to detect more edges at the expense of performance.\n0.1 is a reasonable value, and allows to catch most visible edges. 0.05 is a rather overkill value, that allows to catch 'em all.")]
			public float threshold;

			[Token(Token = "0x4000C9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Specifies the threshold for depth edge detection. Lowering this value you will be able to detect more edges at the expense of performance.")]
			[Min(0.0001f)]
			public float depthThreshold;

			[Token(Token = "0x4000C9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Range(0f, 112f)]
			[Tooltip("Specifies the maximum steps performed in the horizontal/vertical pattern searches, at each side of the pixel.\nIn number of pixels, it's actually the double. So the maximum line length perfectly handled by, for example 16, is 64 (by perfectly, we meant that longer lines won't look as good, but still antialiased).")]
			public int maxSearchSteps;

			[Token(Token = "0x4000C9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Range(0f, 20f)]
			[Tooltip("Specifies the maximum steps performed in the diagonal pattern searches, at each side of the pixel. In this case we jump one pixel at time, instead of two.\nOn high-end machines it is cheap (between a 0.8x and 0.9x slower for 16 steps), but it can have a significant impact on older machines.")]
			public int maxDiagonalSearchSteps;

			[Token(Token = "0x4000C9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Range(0f, 100f)]
			[Tooltip("Specifies how much sharp corners will be rounded.")]
			public int cornerRounding;

			[Token(Token = "0x4000C9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Min(0f)]
			[Tooltip("If there is an neighbor edge that has a local contrast factor times bigger contrast than current edge, current edge will be discarded.\nThis allows to eliminate spurious crossing edges, and is based on the fact that, if there is too much contrast in a direction, that will hide perceptually contrast in the other neighbors.")]
			public float localContrastAdaptationFactor;

			[Token(Token = "0x4000C9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static QualitySettings[] presetQualitySettings;
		}

		[Serializable]
		[Token(Token = "0x2000229")]
		public struct TemporalSettings
		{
			[Token(Token = "0x4000CA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Temporal filtering makes it possible for the SMAA algorithm to benefit from minute subpixel information available that has been accumulated over many frames.")]
			public bool enabled;

			[Token(Token = "0x4000CA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Range(0.5f, 10f)]
			[Tooltip("The size of the fuzz-displacement (jitter) in pixels applied to the camera's perspective projection matrix.\nUsed for 2x temporal anti-aliasing.")]
			public float fuzzSize;

			[Token(Token = "0x17000122")]
			public static TemporalSettings defaultSettings
			{
				[Token(Token = "0x6000D28")]
				[Address(RVA = "0xBAE820", Offset = "0xBAE820", VA = "0xBAE820")]
				get
				{
					return default(TemporalSettings);
				}
			}

			[Token(Token = "0x6000D27")]
			[Address(RVA = "0xBAE960", Offset = "0xBAE960", VA = "0xBAE960")]
			public bool UseTemporal()
			{
				return default(bool);
			}
		}

		[Serializable]
		[Token(Token = "0x200022A")]
		public struct PredicationSettings
		{
			[Token(Token = "0x4000CA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Predicated thresholding allows to better preserve texture details and to improve performance, by decreasing the number of detected edges using an additional buffer (the detph buffer).\nIt locally decreases the luma or color threshold if an edge is found in an additional buffer (so the global threshold can be higher).")]
			public bool enabled;

			[Token(Token = "0x4000CA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Min(0.0001f)]
			[Tooltip("Threshold to be used in the additional predication buffer.")]
			public float threshold;

			[Token(Token = "0x4000CA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("How much to scale the global threshold used for luma or color edge detection when using predication.")]
			[Range(1f, 5f)]
			public float scale;

			[Token(Token = "0x4000CA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Range(0f, 1f)]
			[Tooltip("How much to locally decrease the threshold.")]
			public float strength;

			[Token(Token = "0x17000123")]
			public static PredicationSettings defaultSettings
			{
				[Token(Token = "0x6000D29")]
				[Address(RVA = "0xBAE808", Offset = "0xBAE808", VA = "0xBAE808")]
				get
				{
					return default(PredicationSettings);
				}
			}
		}

		[Token(Token = "0x4000C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[TopLevelSettings]
		public GlobalSettings settings;

		[Token(Token = "0x4000C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SettingsGroup]
		public QualitySettings quality;

		[Token(Token = "0x4000C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SettingsGroup]
		public PredicationSettings predication;

		[Token(Token = "0x4000C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SettingsGroup]
		[ExperimentalGroup]
		public TemporalSettings temporal;

		[Token(Token = "0x4000C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Matrix4x4 m_ProjectionMatrix;

		[Token(Token = "0x4000C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Matrix4x4 m_PreviousViewProjectionMatrix;

		[Token(Token = "0x4000C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float m_FlipFlop;

		[Token(Token = "0x4000C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private RenderTexture m_Accumulation;

		[Token(Token = "0x4000C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Shader m_Shader;

		[Token(Token = "0x4000C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Texture2D m_AreaTexture;

		[Token(Token = "0x4000C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Texture2D m_SearchTexture;

		[Token(Token = "0x4000C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Material m_Material;

		[Token(Token = "0x4000C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private int m_AreaTex;

		[Token(Token = "0x4000C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private int m_SearchTex;

		[Token(Token = "0x4000C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private int m_Metrics;

		[Token(Token = "0x4000C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private int m_Params1;

		[Token(Token = "0x4000C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private int m_Params2;

		[Token(Token = "0x4000C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private int m_Params3;

		[Token(Token = "0x4000C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private int m_ReprojectionMatrix;

		[Token(Token = "0x4000C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private int m_SubsampleIndices;

		[Token(Token = "0x4000C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private int m_BlendTex;

		[Token(Token = "0x4000C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private int m_AccumulationTex;

		[Token(Token = "0x1700011D")]
		public Shader shader
		{
			[Token(Token = "0x6000D16")]
			[Address(RVA = "0xBADA88", Offset = "0xBADA88", VA = "0xBADA88")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011E")]
		private Texture2D areaTexture
		{
			[Token(Token = "0x6000D17")]
			[Address(RVA = "0xBADB24", Offset = "0xBADB24", VA = "0xBADB24")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011F")]
		private Texture2D searchTexture
		{
			[Token(Token = "0x6000D18")]
			[Address(RVA = "0xBADBD4", Offset = "0xBADBD4", VA = "0xBADBD4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000120")]
		private Material material
		{
			[Token(Token = "0x6000D19")]
			[Address(RVA = "0xBADC84", Offset = "0xBADC84", VA = "0xBADC84")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0xBAC990", Offset = "0xBAC990", VA = "0xBAC990", Slot = "4")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000D1B")]
		[Address(RVA = "0xBACBF0", Offset = "0xBACBF0", VA = "0xBACBF0", Slot = "5")]
		public void OnEnable(AntiAliasing owner)
		{
		}

		[Token(Token = "0x6000D1C")]
		[Address(RVA = "0xBACCA8", Offset = "0xBACCA8", VA = "0xBACCA8", Slot = "6")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6000D1D")]
		[Address(RVA = "0xBADD1C", Offset = "0xBADD1C", VA = "0xBADD1C", Slot = "7")]
		public void OnPreCull(Camera camera)
		{
		}

		[Token(Token = "0x6000D1E")]
		[Address(RVA = "0xBADEB4", Offset = "0xBADEB4", VA = "0xBADEB4", Slot = "8")]
		public void OnPostRender(Camera camera)
		{
		}

		[Token(Token = "0x6000D1F")]
		[Address(RVA = "0xBADEE0", Offset = "0xBADEE0", VA = "0xBADEE0", Slot = "9")]
		public void OnRenderImage(Camera camera, RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000D20")]
		[Address(RVA = "0xBAE7E4", Offset = "0xBAE7E4", VA = "0xBAE7E4")]
		private RenderTexture TempRT(int width, int height, RenderTextureFormat format)
		{
			return null;
		}

		[Token(Token = "0x6000D21")]
		[Address(RVA = "0xBAD148", Offset = "0xBAD148", VA = "0xBAD148")]
		public SMAA()
		{
		}
	}
	[Token(Token = "0x200022B")]
	[ExecuteInEditMode]
	[ImageEffectAllowedInSceneView]
	[RequireComponent(typeof(Camera))]
	[AddComponentMenu("Image Effects/Cinematic/Ambient Occlusion")]
	public class AmbientOcclusion : MonoBehaviour
	{
		[Token(Token = "0x200022C")]
		private class PropertyObserver
		{
			[Token(Token = "0x4000CB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private bool _downsampling;

			[Token(Token = "0x4000CB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private OcclusionSource _occlusionSource;

			[Token(Token = "0x4000CB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private bool _ambientOnly;

			[Token(Token = "0x4000CB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
			private bool _debug;

			[Token(Token = "0x4000CB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private int _pixelWidth;

			[Token(Token = "0x4000CB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int _pixelHeight;

			[Token(Token = "0x6000D43")]
			[Address(RVA = "0xAF58CC", Offset = "0xAF58CC", VA = "0xAF58CC")]
			public bool CheckNeedsReset(Settings setting, Camera camera)
			{
				return default(bool);
			}

			[Token(Token = "0x6000D44")]
			[Address(RVA = "0xAF596C", Offset = "0xAF596C", VA = "0xAF596C")]
			public void Update(Settings setting, Camera camera)
			{
			}

			[Token(Token = "0x6000D45")]
			[Address(RVA = "0xAF59D4", Offset = "0xAF59D4", VA = "0xAF59D4")]
			public PropertyObserver()
			{
			}
		}

		[Token(Token = "0x200022D")]
		public enum SampleCount
		{
			[Token(Token = "0x4000CB8")]
			Lowest,
			[Token(Token = "0x4000CB9")]
			Low,
			[Token(Token = "0x4000CBA")]
			Medium,
			[Token(Token = "0x4000CBB")]
			High,
			[Token(Token = "0x4000CBC")]
			Custom
		}

		[Token(Token = "0x200022E")]
		public enum OcclusionSource
		{
			[Token(Token = "0x4000CBE")]
			DepthTexture,
			[Token(Token = "0x4000CBF")]
			DepthNormalsTexture,
			[Token(Token = "0x4000CC0")]
			GBuffer
		}

		[Serializable]
		[Token(Token = "0x200022F")]
		public class Settings
		{
			[Token(Token = "0x4000CC1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			[Range(0f, 4f)]
			[Tooltip("Degree of darkness produced by the effect.")]
			public float intensity;

			[Token(Token = "0x4000CC2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Radius of sample points, which affects extent of darkened areas.")]
			[SerializeField]
			public float radius;

			[Token(Token = "0x4000CC3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[SerializeField]
			[Tooltip("Number of sample points, which affects quality and performance.")]
			public SampleCount sampleCount;

			[Token(Token = "0x4000CC4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Tooltip("Determines the sample count when SampleCount.Custom is used.")]
			[SerializeField]
			public int sampleCountValue;

			[Token(Token = "0x4000CC5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Halves the resolution of the effect to increase performance.")]
			[SerializeField]
			public bool downsampling;

			[Token(Token = "0x4000CC6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
			[Tooltip("If checked, the effect only affects ambient lighting.")]
			[SerializeField]
			public bool ambientOnly;

			[Token(Token = "0x4000CC7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[SerializeField]
			[Tooltip("Source buffer on which the occlusion estimator is based.")]
			public OcclusionSource occlusionSource;

			[Token(Token = "0x4000CC8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Displays occlusion for debug purpose.")]
			[SerializeField]
			public bool debug;

			[Token(Token = "0x17000133")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6000D46")]
				[Address(RVA = "0xAF59DC", Offset = "0xAF59DC", VA = "0xAF59DC")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D47")]
			[Address(RVA = "0xAF5A58", Offset = "0xAF5A58", VA = "0xAF5A58")]
			public Settings()
			{
			}
		}

		[Token(Token = "0x4000CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Settings settings;

		[Token(Token = "0x4000CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Shader _aoShader;

		[Token(Token = "0x4000CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material _aoMaterial;

		[Token(Token = "0x4000CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CommandBuffer _aoCommands;

		[Token(Token = "0x4000CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private PropertyObserver _propertyObserver;

		[Token(Token = "0x4000CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Mesh _quadMesh;

		[Token(Token = "0x4000CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int _OcclusionTexture;

		[Token(Token = "0x4000CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int _Intensity;

		[Token(Token = "0x4000CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int _Radius;

		[Token(Token = "0x4000CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int _Downsample;

		[Token(Token = "0x4000CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int _SampleCount;

		[Token(Token = "0x17000124")]
		public bool isAmbientOnlySupported
		{
			[Token(Token = "0x6000D2A")]
			[Address(RVA = "0xBAE968", Offset = "0xBAE968", VA = "0xBAE968")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000125")]
		public bool isGBufferAvailable
		{
			[Token(Token = "0x6000D2B")]
			[Address(RVA = "0xBAEA34", Offset = "0xBAEA34", VA = "0xBAEA34")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000126")]
		private float intensity
		{
			[Token(Token = "0x6000D2C")]
			[Address(RVA = "0xBAEA5C", Offset = "0xBAEA5C", VA = "0xBAEA5C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000127")]
		private float radius
		{
			[Token(Token = "0x6000D2D")]
			[Address(RVA = "0xBAEA78", Offset = "0xBAEA78", VA = "0xBAEA78")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000128")]
		private SampleCount sampleCount
		{
			[Token(Token = "0x6000D2E")]
			[Address(RVA = "0xBAEAA0", Offset = "0xBAEAA0", VA = "0xBAEAA0")]
			get
			{
				return default(SampleCount);
			}
		}

		[Token(Token = "0x17000129")]
		private int sampleCountValue
		{
			[Token(Token = "0x6000D2F")]
			[Address(RVA = "0xBAEABC", Offset = "0xBAEABC", VA = "0xBAEABC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700012A")]
		private OcclusionSource occlusionSource
		{
			[Token(Token = "0x6000D30")]
			[Address(RVA = "0xBAE9F0", Offset = "0xBAE9F0", VA = "0xBAE9F0")]
			get
			{
				return default(OcclusionSource);
			}
		}

		[Token(Token = "0x1700012B")]
		private bool downsampling
		{
			[Token(Token = "0x6000D31")]
			[Address(RVA = "0xBAEB08", Offset = "0xBAEB08", VA = "0xBAEB08")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700012C")]
		private bool ambientOnly
		{
			[Token(Token = "0x6000D32")]
			[Address(RVA = "0xBAEB24", Offset = "0xBAEB24", VA = "0xBAEB24")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700012D")]
		private Shader aoShader
		{
			[Token(Token = "0x6000D33")]
			[Address(RVA = "0xBAEB58", Offset = "0xBAEB58", VA = "0xBAEB58")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012E")]
		private Material aoMaterial
		{
			[Token(Token = "0x6000D34")]
			[Address(RVA = "0xBAEBF4", Offset = "0xBAEBF4", VA = "0xBAEBF4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012F")]
		private CommandBuffer aoCommands
		{
			[Token(Token = "0x6000D35")]
			[Address(RVA = "0xBAEC8C", Offset = "0xBAEC8C", VA = "0xBAEC8C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000130")]
		private Camera targetCamera
		{
			[Token(Token = "0x6000D36")]
			[Address(RVA = "0xBAE9A8", Offset = "0xBAE9A8", VA = "0xBAE9A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000131")]
		private PropertyObserver propertyObserver
		{
			[Token(Token = "0x6000D37")]
			[Address(RVA = "0xBAED2C", Offset = "0xBAED2C", VA = "0xBAED2C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000132")]
		private Mesh quadMesh
		{
			[Token(Token = "0x6000D38")]
			[Address(RVA = "0xBAED34", Offset = "0xBAED34", VA = "0xBAED34")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D39")]
		[Address(RVA = "0xBAED3C", Offset = "0xBAED3C", VA = "0xBAED3C")]
		private void BuildAOCommands()
		{
		}

		[Token(Token = "0x6000D3A")]
		[Address(RVA = "0xBAF1A8", Offset = "0xBAF1A8", VA = "0xBAF1A8")]
		private void ExecuteAOPass(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0xBAF3E4", Offset = "0xBAF3E4", VA = "0xBAF3E4")]
		private void UpdateMaterialProperties()
		{
		}

		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0xBAF498", Offset = "0xBAF498", VA = "0xBAF498")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D3D")]
		[Address(RVA = "0xBAF588", Offset = "0xBAF588", VA = "0xBAF588")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000D3E")]
		[Address(RVA = "0xBAF684", Offset = "0xBAF684", VA = "0xBAF684")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000D3F")]
		[Address(RVA = "0xBAF6BC", Offset = "0xBAF6BC", VA = "0xBAF6BC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000D40")]
		[Address(RVA = "0xBAF738", Offset = "0xBAF738", VA = "0xBAF738")]
		private void OnPreRender()
		{
		}

		[Token(Token = "0x6000D41")]
		[Address(RVA = "0xBAF7F8", Offset = "0xBAF7F8", VA = "0xBAF7F8")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000D42")]
		[Address(RVA = "0xBAF894", Offset = "0xBAF894", VA = "0xBAF894")]
		public AmbientOcclusion()
		{
		}
	}
	[Token(Token = "0x2000230")]
	[ExecuteInEditMode]
	[AddComponentMenu("Image Effects/Cinematic/Bloom")]
	[ImageEffectAllowedInSceneView]
	[RequireComponent(typeof(Camera))]
	public class Bloom : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000231")]
		public struct Settings
		{
			[Token(Token = "0x4000CD7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[SerializeField]
			[Tooltip("Filters out pixels under this level of brightness.")]
			public float threshold;

			[Token(Token = "0x4000CD8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Range(0f, 1f)]
			[Tooltip("Makes transition between under/over-threshold gradual.")]
			[SerializeField]
			public float softKnee;

			[Token(Token = "0x4000CD9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[SerializeField]
			[Tooltip("Changes extent of veiling effects in a screen resolution-independent fashion.")]
			[Range(1f, 7f)]
			public float radius;

			[Token(Token = "0x4000CDA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Tooltip("Blend factor of the result image.")]
			[SerializeField]
			public float intensity;

			[Token(Token = "0x4000CDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Controls filter quality and buffer resolution.")]
			[SerializeField]
			public bool highQuality;

			[Token(Token = "0x4000CDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			[SerializeField]
			[Tooltip("Reduces flashing noise with an additional filter.")]
			public bool antiFlicker;

			[Token(Token = "0x4000CDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Dirtiness texture to add smudges or dust to the lens.")]
			public Texture dirtTexture;

			[Token(Token = "0x4000CDE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Min(0f)]
			[Tooltip("Amount of lens dirtiness.")]
			public float dirtIntensity;

			[Token(Token = "0x17000136")]
			public float thresholdGamma
			{
				[Token(Token = "0x6000D50")]
				[Address(RVA = "0xAF69E8", Offset = "0xAF69E8", VA = "0xAF69E8")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000D4F")]
				[Address(RVA = "0xAF69E0", Offset = "0xAF69E0", VA = "0xAF69E0")]
				set
				{
				}
			}

			[Token(Token = "0x17000137")]
			public float thresholdLinear
			{
				[Token(Token = "0x6000D52")]
				[Address(RVA = "0xAF6888", Offset = "0xAF6888", VA = "0xAF6888")]
				get
				{
					return default(float);
				}
				[Token(Token = "0x6000D51")]
				[Address(RVA = "0xAF69F8", Offset = "0xAF69F8", VA = "0xAF69F8")]
				set
				{
				}
			}

			[Token(Token = "0x17000138")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6000D53")]
				[Address(RVA = "0xAF6984", Offset = "0xAF6984", VA = "0xAF6984")]
				get
				{
					return default(Settings);
				}
			}
		}

		[Token(Token = "0x4000CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Settings settings;

		[Token(Token = "0x4000CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[HideInInspector]
		private Shader m_Shader;

		[Token(Token = "0x4000CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material m_Material;

		[Token(Token = "0x4000CCC")]
		private const int kMaxIterations = 16;

		[Token(Token = "0x4000CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private RenderTexture[] m_blurBuffer1;

		[Token(Token = "0x4000CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private RenderTexture[] m_blurBuffer2;

		[Token(Token = "0x4000CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int m_Threshold;

		[Token(Token = "0x4000CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private int m_Curve;

		[Token(Token = "0x4000CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int m_PrefilterOffs;

		[Token(Token = "0x4000CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int m_SampleScale;

		[Token(Token = "0x4000CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int m_Intensity;

		[Token(Token = "0x4000CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int m_DirtTex;

		[Token(Token = "0x4000CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int m_DirtIntensity;

		[Token(Token = "0x4000CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int m_BaseTex;

		[Token(Token = "0x17000134")]
		public Shader shader
		{
			[Token(Token = "0x6000D48")]
			[Address(RVA = "0xAF5A60", Offset = "0xAF5A60", VA = "0xAF5A60")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000135")]
		public Material material
		{
			[Token(Token = "0x6000D49")]
			[Address(RVA = "0xAF5AFC", Offset = "0xAF5AFC", VA = "0xAF5AFC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D4A")]
		[Address(RVA = "0xAF5C58", Offset = "0xAF5C58", VA = "0xAF5C58")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D4B")]
		[Address(RVA = "0xAF5DC4", Offset = "0xAF5DC4", VA = "0xAF5DC4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000D4C")]
		[Address(RVA = "0xAF606C", Offset = "0xAF606C", VA = "0xAF606C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000D4D")]
		[Address(RVA = "0xAF6100", Offset = "0xAF6100", VA = "0xAF6100")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000D4E")]
		[Address(RVA = "0xAF689C", Offset = "0xAF689C", VA = "0xAF689C")]
		public Bloom()
		{
		}
	}
	[Token(Token = "0x2000232")]
	public static class ImageEffectHelper
	{
		[Token(Token = "0x17000139")]
		public static bool supportsDX11
		{
			[Token(Token = "0x6000D56")]
			[Address(RVA = "0xAF6A14", Offset = "0xAF6A14", VA = "0xAF6A14")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000D54")]
		[Address(RVA = "0xAF5E00", Offset = "0xAF5E00", VA = "0xAF5E00")]
		public static bool IsSupported(Shader s, bool needDepth, bool needHdr, MonoBehaviour effect)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D55")]
		[Address(RVA = "0xAF5B90", Offset = "0xAF5B90", VA = "0xAF5B90")]
		public static Material CheckShaderAndCreateMaterial(Shader s)
		{
			return null;
		}
	}
	[Token(Token = "0x2000233")]
	public sealed class MinAttribute : PropertyAttribute
	{
		[Token(Token = "0x4000CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly float min;

		[Token(Token = "0x6000D57")]
		[Address(RVA = "0xAF6A40", Offset = "0xAF6A40", VA = "0xAF6A40")]
		public MinAttribute(float min)
		{
		}
	}
	[Token(Token = "0x2000234")]
	public class RenderTextureUtility
	{
		[Token(Token = "0x4000CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<RenderTexture> m_TemporaryRTs;

		[Token(Token = "0x6000D58")]
		[Address(RVA = "0xAF6A68", Offset = "0xAF6A68", VA = "0xAF6A68")]
		public RenderTexture GetTemporaryRenderTexture(int width, int height, int depthBuffer = 0, RenderTextureFormat format = RenderTextureFormat.ARGBHalf, FilterMode filterMode = FilterMode.Bilinear)
		{
			return null;
		}

		[Token(Token = "0x6000D59")]
		[Address(RVA = "0xAF6B9C", Offset = "0xAF6B9C", VA = "0xAF6B9C")]
		public void ReleaseTemporaryRenderTexture(RenderTexture rt)
		{
		}

		[Token(Token = "0x6000D5A")]
		[Address(RVA = "0xAF6D38", Offset = "0xAF6D38", VA = "0xAF6D38")]
		public void ReleaseAllTemporaryRenderTextures()
		{
		}

		[Token(Token = "0x6000D5B")]
		[Address(RVA = "0xAF6DF8", Offset = "0xAF6DF8", VA = "0xAF6DF8")]
		public RenderTextureUtility()
		{
		}
	}
	[Token(Token = "0x2000235")]
	[ExecuteInEditMode]
	[AddComponentMenu("Image Effects/Cinematic/Depth Of Field")]
	[RequireComponent(typeof(Camera))]
	public class DepthOfField : MonoBehaviour
	{
		[Token(Token = "0x2000236")]
		private enum Passes
		{
			[Token(Token = "0x4000D03")]
			BlurAlphaWeighted,
			[Token(Token = "0x4000D04")]
			BoxBlur,
			[Token(Token = "0x4000D05")]
			DilateFgCocFromColor,
			[Token(Token = "0x4000D06")]
			DilateFgCoc,
			[Token(Token = "0x4000D07")]
			CaptureCocExplicit,
			[Token(Token = "0x4000D08")]
			VisualizeCocExplicit,
			[Token(Token = "0x4000D09")]
			CocPrefilter,
			[Token(Token = "0x4000D0A")]
			CircleBlur,
			[Token(Token = "0x4000D0B")]
			CircleBlurWithDilatedFg,
			[Token(Token = "0x4000D0C")]
			CircleBlurLowQuality,
			[Token(Token = "0x4000D0D")]
			CircleBlowLowQualityWithDilatedFg,
			[Token(Token = "0x4000D0E")]
			MergeExplicit,
			[Token(Token = "0x4000D0F")]
			ShapeLowQuality,
			[Token(Token = "0x4000D10")]
			ShapeLowQualityDilateFg,
			[Token(Token = "0x4000D11")]
			ShapeLowQualityMerge,
			[Token(Token = "0x4000D12")]
			ShapeLowQualityMergeDilateFg,
			[Token(Token = "0x4000D13")]
			ShapeMediumQuality,
			[Token(Token = "0x4000D14")]
			ShapeMediumQualityDilateFg,
			[Token(Token = "0x4000D15")]
			ShapeMediumQualityMerge,
			[Token(Token = "0x4000D16")]
			ShapeMediumQualityMergeDilateFg,
			[Token(Token = "0x4000D17")]
			ShapeHighQuality,
			[Token(Token = "0x4000D18")]
			ShapeHighQualityDilateFg,
			[Token(Token = "0x4000D19")]
			ShapeHighQualityMerge,
			[Token(Token = "0x4000D1A")]
			ShapeHighQualityMergeDilateFg
		}

		[Token(Token = "0x2000237")]
		private enum MedianPasses
		{
			[Token(Token = "0x4000D1C")]
			Median3,
			[Token(Token = "0x4000D1D")]
			Median3X3
		}

		[Token(Token = "0x2000238")]
		private enum BokehTexturesPasses
		{
			[Token(Token = "0x4000D1F")]
			Apply,
			[Token(Token = "0x4000D20")]
			Collect
		}

		[Token(Token = "0x2000239")]
		public enum TweakMode
		{
			[Token(Token = "0x4000D22")]
			Range,
			[Token(Token = "0x4000D23")]
			Explicit
		}

		[Token(Token = "0x200023A")]
		public enum ApertureShape
		{
			[Token(Token = "0x4000D25")]
			Circular,
			[Token(Token = "0x4000D26")]
			Hexagonal,
			[Token(Token = "0x4000D27")]
			Octogonal
		}

		[Token(Token = "0x200023B")]
		public enum QualityPreset
		{
			[Token(Token = "0x4000D29")]
			Low,
			[Token(Token = "0x4000D2A")]
			Medium,
			[Token(Token = "0x4000D2B")]
			High
		}

		[Token(Token = "0x200023C")]
		public enum FilterQuality
		{
			[Token(Token = "0x4000D2D")]
			None,
			[Token(Token = "0x4000D2E")]
			Normal,
			[Token(Token = "0x4000D2F")]
			High
		}

		[Serializable]
		[Token(Token = "0x200023D")]
		public struct GlobalSettings
		{
			[Token(Token = "0x4000D30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Allows to view where the blur will be applied. Yellow for near blur, blue for far blur.")]
			public bool visualizeFocus;

			[Token(Token = "0x4000D31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("Setup mode. Use \"Advanced\" if you need more control on blur settings and/or want to use a bokeh texture. \"Explicit\" is the same as \"Advanced\" but makes use of \"Near Plane\" and \"Far Plane\" values instead of \"F-Stop\".")]
			public TweakMode tweakMode;

			[Token(Token = "0x4000D32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Quality presets. Use \"Custom\" for more advanced settings.")]
			public QualityPreset filteringQuality;

			[Token(Token = "0x4000D33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Tooltip("\"Circular\" is the fastest, followed by \"Hexagonal\" and \"Octogonal\".")]
			public ApertureShape apertureShape;

			[Token(Token = "0x4000D34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Rotates the aperture when working with \"Hexagonal\" and \"Ortogonal\".")]
			[Range(0f, 179f)]
			public float apertureOrientation;

			[Token(Token = "0x17000143")]
			public static GlobalSettings defaultSettings
			{
				[Token(Token = "0x6000D74")]
				[Address(RVA = "0xAF92D0", Offset = "0xAF92D0", VA = "0xAF92D0")]
				get
				{
					return default(GlobalSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x200023E")]
		public struct QualitySettings
		{
			[Token(Token = "0x4000D35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Enable this to get smooth bokeh.")]
			public bool prefilterBlur;

			[Token(Token = "0x4000D36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("Applies a median filter for even smoother bokeh.")]
			public FilterQuality medianFilter;

			[Token(Token = "0x4000D37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Dilates near blur over in focus area.")]
			public bool dilateNearBlur;

			[Token(Token = "0x4000D38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static QualitySettings[] presetQualitySettings;
		}

		[Serializable]
		[Token(Token = "0x200023F")]
		public struct FocusSettings
		{
			[Token(Token = "0x4000D39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Auto-focus on a selected transform.")]
			public Transform transform;

			[Token(Token = "0x4000D3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Min(0f)]
			[Tooltip("Focus distance (in world units).")]
			public float focusPlane;

			[Token(Token = "0x4000D3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Tooltip("Focus range (in world units). The focus plane is located in the center of the range.")]
			[Min(0.1f)]
			public float range;

			[Token(Token = "0x4000D3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Min(0f)]
			[Tooltip("Near focus distance (in world units).")]
			public float nearPlane;

			[Token(Token = "0x4000D3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Near blur falloff (in world units).")]
			[Min(0f)]
			public float nearFalloff;

			[Token(Token = "0x4000D3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Far focus distance (in world units).")]
			[Min(0f)]
			public float farPlane;

			[Token(Token = "0x4000D3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Min(0f)]
			[Tooltip("Far blur falloff (in world units).")]
			public float farFalloff;

			[Token(Token = "0x4000D40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Range(0f, 40f)]
			[Tooltip("Maximum blur radius for the near plane.")]
			public float nearBlurRadius;

			[Token(Token = "0x4000D41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("Maximum blur radius for the far plane.")]
			[Range(0f, 40f)]
			public float farBlurRadius;

			[Token(Token = "0x17000144")]
			public static FocusSettings defaultSettings
			{
				[Token(Token = "0x6000D76")]
				[Address(RVA = "0xAF92E8", Offset = "0xAF92E8", VA = "0xAF92E8")]
				get
				{
					return default(FocusSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x2000240")]
		public struct BokehTextureSettings
		{
			[Token(Token = "0x4000D42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Adding a texture to this field will enable the use of \"Bokeh Textures\". Use with care. This feature is only available on Shader Model 5 compatible-hardware and performance scale with the amount of bokeh.")]
			public Texture2D texture;

			[Token(Token = "0x4000D43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Maximum size of bokeh textures on screen.")]
			[Range(0.01f, 10f)]
			public float scale;

			[Token(Token = "0x4000D44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Tooltip("Bokeh brightness.")]
			[Range(0.01f, 100f)]
			public float intensity;

			[Token(Token = "0x4000D45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Controls the amount of bokeh textures. Lower values mean more bokeh splats.")]
			[Range(0.01f, 5f)]
			public float threshold;

			[Token(Token = "0x4000D46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Controls the spawn conditions. Lower values mean more visible bokeh.")]
			[Range(0.01f, 1f)]
			public float spawnHeuristic;

			[Token(Token = "0x17000145")]
			public static BokehTextureSettings defaultSettings
			{
				[Token(Token = "0x6000D77")]
				[Address(RVA = "0xAF9340", Offset = "0xAF9340", VA = "0xAF9340")]
				get
				{
					return default(BokehTextureSettings);
				}
			}
		}

		[Token(Token = "0x4000CE1")]
		private const float kMaxBlur = 40f;

		[Token(Token = "0x4000CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GlobalSettings settings;

		[Token(Token = "0x4000CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public FocusSettings focus;

		[Token(Token = "0x4000CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public BokehTextureSettings bokehTexture;

		[Token(Token = "0x4000CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Shader m_FilmicDepthOfFieldShader;

		[Token(Token = "0x4000CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private Shader m_MedianFilterShader;

		[Token(Token = "0x4000CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private Shader m_TextureBokehShader;

		[Token(Token = "0x4000CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private RenderTextureUtility m_RTU;

		[Token(Token = "0x4000CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Material m_FilmicDepthOfFieldMaterial;

		[Token(Token = "0x4000CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Material m_MedianFilterMaterial;

		[Token(Token = "0x4000CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Material m_TextureBokehMaterial;

		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private ComputeBuffer m_ComputeBufferDrawArgs;

		[Token(Token = "0x4000CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private ComputeBuffer m_ComputeBufferPoints;

		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private QualitySettings m_CurrentQualitySettings;

		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private float m_LastApertureOrientation;

		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Vector4 m_OctogonalBokehDirection1;

		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Vector4 m_OctogonalBokehDirection2;

		[Token(Token = "0x4000CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Vector4 m_OctogonalBokehDirection3;

		[Token(Token = "0x4000CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Vector4 m_OctogonalBokehDirection4;

		[Token(Token = "0x4000CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Vector4 m_HexagonalBokehDirection1;

		[Token(Token = "0x4000CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Vector4 m_HexagonalBokehDirection2;

		[Token(Token = "0x4000CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Vector4 m_HexagonalBokehDirection3;

		[Token(Token = "0x4000CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private int m_BlurParams;

		[Token(Token = "0x4000CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private int m_BlurCoe;

		[Token(Token = "0x4000CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private int m_Offsets;

		[Token(Token = "0x4000CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		private int m_BlurredColor;

		[Token(Token = "0x4000CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private int m_SpawnHeuristic;

		[Token(Token = "0x4000CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private int m_BokehParams;

		[Token(Token = "0x4000CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private int m_Convolved_TexelSize;

		[Token(Token = "0x4000CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		private int m_SecondTex;

		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private int m_ThirdTex;

		[Token(Token = "0x4000D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		private int m_MainTex;

		[Token(Token = "0x4000D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private int m_Screen;

		[Token(Token = "0x1700013A")]
		public Shader filmicDepthOfFieldShader
		{
			[Token(Token = "0x6000D5C")]
			[Address(RVA = "0xAF6E80", Offset = "0xAF6E80", VA = "0xAF6E80")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013B")]
		public Shader medianFilterShader
		{
			[Token(Token = "0x6000D5D")]
			[Address(RVA = "0xAF6F1C", Offset = "0xAF6F1C", VA = "0xAF6F1C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013C")]
		public Shader textureBokehShader
		{
			[Token(Token = "0x6000D5E")]
			[Address(RVA = "0xAF6FB8", Offset = "0xAF6FB8", VA = "0xAF6FB8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013D")]
		public Material filmicDepthOfFieldMaterial
		{
			[Token(Token = "0x6000D5F")]
			[Address(RVA = "0xAF7054", Offset = "0xAF7054", VA = "0xAF7054")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013E")]
		public Material medianFilterMaterial
		{
			[Token(Token = "0x6000D60")]
			[Address(RVA = "0xAF70E8", Offset = "0xAF70E8", VA = "0xAF70E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013F")]
		public Material textureBokehMaterial
		{
			[Token(Token = "0x6000D61")]
			[Address(RVA = "0xAF717C", Offset = "0xAF717C", VA = "0xAF717C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000140")]
		public ComputeBuffer computeBufferDrawArgs
		{
			[Token(Token = "0x6000D62")]
			[Address(RVA = "0xAF7210", Offset = "0xAF7210", VA = "0xAF7210")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000141")]
		public ComputeBuffer computeBufferPoints
		{
			[Token(Token = "0x6000D63")]
			[Address(RVA = "0xAF72E8", Offset = "0xAF72E8", VA = "0xAF72E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000142")]
		private bool shouldPerformBokeh
		{
			[Token(Token = "0x6000D6F")]
			[Address(RVA = "0xAF8974", Offset = "0xAF8974", VA = "0xAF8974")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000D64")]
		[Address(RVA = "0xAF7370", Offset = "0xAF7370", VA = "0xAF7370")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D65")]
		[Address(RVA = "0xAF7548", Offset = "0xAF7548", VA = "0xAF7548")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000D66")]
		[Address(RVA = "0xAF7824", Offset = "0xAF7824", VA = "0xAF7824")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000D67")]
		[Address(RVA = "0xAF79F4", Offset = "0xAF79F4", VA = "0xAF79F4")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000D68")]
		[Address(RVA = "0xAF7E0C", Offset = "0xAF7E0C", VA = "0xAF7E0C")]
		private void DoDepthOfField(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000D69")]
		[Address(RVA = "0xAF8BC0", Offset = "0xAF8BC0", VA = "0xAF8BC0")]
		private void DoHexagonalBlur(RenderTexture blurredFgCoc, ref RenderTexture src, ref RenderTexture dst, float maxRadius)
		{
		}

		[Token(Token = "0x6000D6A")]
		[Address(RVA = "0xAF8E28", Offset = "0xAF8E28", VA = "0xAF8E28")]
		private void DoOctogonalBlur(RenderTexture blurredFgCoc, ref RenderTexture src, ref RenderTexture dst, float maxRadius)
		{
		}

		[Token(Token = "0x6000D6B")]
		[Address(RVA = "0xAF8A6C", Offset = "0xAF8A6C", VA = "0xAF8A6C")]
		private void DoCircularBlur(RenderTexture blurredFgCoc, ref RenderTexture src, ref RenderTexture dst, float maxRadius)
		{
		}

		[Token(Token = "0x6000D6C")]
		[Address(RVA = "0xAF7BB0", Offset = "0xAF7BB0", VA = "0xAF7BB0")]
		private void ComputeCocParameters(out Vector4 blurParams, out Vector4 blurCoe)
		{
		}

		[Token(Token = "0x6000D6D")]
		[Address(RVA = "0xAF799C", Offset = "0xAF799C", VA = "0xAF799C")]
		private void ReleaseComputeResources()
		{
		}

		[Token(Token = "0x6000D6E")]
		[Address(RVA = "0xAF7648", Offset = "0xAF7648", VA = "0xAF7648")]
		private void ComputeBlurDirections(bool force)
		{
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0xAF9184", Offset = "0xAF9184", VA = "0xAF9184")]
		private static void Rotate2D(ref Vector4 direction, float cosinus, float sinus)
		{
		}

		[Token(Token = "0x6000D71")]
		[Address(RVA = "0xAF8A30", Offset = "0xAF8A30", VA = "0xAF8A30")]
		private static void SwapRenderTexture(ref RenderTexture src, ref RenderTexture dst)
		{
		}

		[Token(Token = "0x6000D72")]
		[Address(RVA = "0xAF909C", Offset = "0xAF909C", VA = "0xAF909C")]
		private static void GetDirectionalBlurPassesFromRadius(RenderTexture blurredFgCoc, float maxRadius, out int blurPass, out int blurAndMergePass)
		{
		}

		[Token(Token = "0x6000D73")]
		[Address(RVA = "0xAF91A8", Offset = "0xAF91A8", VA = "0xAF91A8")]
		public DepthOfField()
		{
		}
	}
	[Token(Token = "0x2000241")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	[AddComponentMenu("Image Effects/Cinematic/Lens Aberrations")]
	public class LensAberrations : MonoBehaviour
	{
		[Token(Token = "0x2000242")]
		[AttributeUsage(AttributeTargets.Field)]
		public class SettingsGroup : Attribute
		{
			[Token(Token = "0x6000D7F")]
			[Address(RVA = "0xAFA0D8", Offset = "0xAFA0D8", VA = "0xAFA0D8")]
			public SettingsGroup()
			{
			}
		}

		[Token(Token = "0x2000243")]
		[AttributeUsage(AttributeTargets.Field)]
		public class AdvancedSetting : Attribute
		{
			[Token(Token = "0x6000D80")]
			[Address(RVA = "0xAFA0E0", Offset = "0xAFA0E0", VA = "0xAFA0E0")]
			public AdvancedSetting()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000244")]
		public struct DistortionSettings
		{
			[Token(Token = "0x4000D57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool enabled;

			[Token(Token = "0x4000D58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("Distortion amount.")]
			[Range(-100f, 100f)]
			public float amount;

			[Token(Token = "0x4000D59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Distortion center point (X axis).")]
			[Range(-1f, 1f)]
			public float centerX;

			[Token(Token = "0x4000D5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Tooltip("Distortion center point (Y axis).")]
			[Range(-1f, 1f)]
			public float centerY;

			[Token(Token = "0x4000D5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Amount multiplier on X axis. Set it to 0 to disable distortion on this axis.")]
			[Range(0f, 1f)]
			public float amountX;

			[Token(Token = "0x4000D5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Range(0f, 1f)]
			[Tooltip("Amount multiplier on Y axis. Set it to 0 to disable distortion on this axis.")]
			public float amountY;

			[Token(Token = "0x4000D5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Global screen scaling.")]
			[Range(0.01f, 5f)]
			public float scale;

			[Token(Token = "0x17000148")]
			public static DistortionSettings defaultSettings
			{
				[Token(Token = "0x6000D81")]
				[Address(RVA = "0xAFA084", Offset = "0xAFA084", VA = "0xAFA084")]
				get
				{
					return default(DistortionSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x2000245")]
		public struct VignetteSettings
		{
			[Token(Token = "0x4000D5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool enabled;

			[Token(Token = "0x4000D5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("Vignette color. Use the alpha channel for transparency.")]
			[ColorUsage(false)]
			public Color color;

			[Token(Token = "0x4000D60")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Sets the vignette center point (screen center is [0.5,0.5]).")]
			public Vector2 center;

			[Token(Token = "0x4000D61")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Tooltip("Amount of vignetting on screen.")]
			[Range(0f, 3f)]
			public float intensity;

			[Token(Token = "0x4000D62")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Tooltip("Smoothness of the vignette borders.")]
			[Range(0.01f, 3f)]
			public float smoothness;

			[Token(Token = "0x4000D63")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Tooltip("Lower values will make a square-ish vignette.")]
			[AdvancedSetting]
			[Range(0f, 1f)]
			public float roundness;

			[Token(Token = "0x4000D64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Tooltip("Blurs the corners of the screen. Leave this at 0 to disable it.")]
			[Range(0f, 1f)]
			public float blur;

			[Token(Token = "0x4000D65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Tooltip("Desaturate the corners of the screen. Leave this to 0 to disable it.")]
			[Range(0f, 1f)]
			public float desaturate;

			[Token(Token = "0x17000149")]
			public static VignetteSettings defaultSettings
			{
				[Token(Token = "0x6000D82")]
				[Address(RVA = "0xAFA09C", Offset = "0xAFA09C", VA = "0xAFA09C")]
				get
				{
					return default(VignetteSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x2000246")]
		public struct ChromaticAberrationSettings
		{
			[Token(Token = "0x4000D66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool enabled;

			[Token(Token = "0x4000D67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("Channels to apply chromatic aberration to.")]
			[ColorUsage(false)]
			public Color color;

			[Token(Token = "0x4000D68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Amount of tangential distortion.")]
			[Range(-50f, 50f)]
			public float amount;

			[Token(Token = "0x1700014A")]
			public static ChromaticAberrationSettings defaultSettings
			{
				[Token(Token = "0x6000D83")]
				[Address(RVA = "0xAFA0C4", Offset = "0xAFA0C4", VA = "0xAFA0C4")]
				get
				{
					return default(ChromaticAberrationSettings);
				}
			}
		}

		[Token(Token = "0x2000247")]
		private enum Pass
		{
			[Token(Token = "0x4000D6A")]
			BlurPrePass,
			[Token(Token = "0x4000D6B")]
			Chroma,
			[Token(Token = "0x4000D6C")]
			Distort,
			[Token(Token = "0x4000D6D")]
			Vignette,
			[Token(Token = "0x4000D6E")]
			ChromaDistort,
			[Token(Token = "0x4000D6F")]
			ChromaVignette,
			[Token(Token = "0x4000D70")]
			DistortVignette,
			[Token(Token = "0x4000D71")]
			ChromaDistortVignette
		}

		[Token(Token = "0x4000D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SettingsGroup]
		public DistortionSettings distortion;

		[Token(Token = "0x4000D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SettingsGroup]
		public VignetteSettings vignette;

		[Token(Token = "0x4000D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[SettingsGroup]
		public ChromaticAberrationSettings chromaticAberration;

		[Token(Token = "0x4000D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private Shader m_Shader;

		[Token(Token = "0x4000D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Material m_Material;

		[Token(Token = "0x4000D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private RenderTextureUtility m_RTU;

		[Token(Token = "0x4000D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int m_DistCenterScale;

		[Token(Token = "0x4000D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private int m_DistAmount;

		[Token(Token = "0x4000D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private int m_ChromaticAberration;

		[Token(Token = "0x4000D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private int m_VignetteColor;

		[Token(Token = "0x4000D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int m_BlurPass;

		[Token(Token = "0x4000D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private int m_BlurTex;

		[Token(Token = "0x4000D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private int m_VignetteBlur;

		[Token(Token = "0x4000D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private int m_VignetteDesat;

		[Token(Token = "0x4000D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private int m_VignetteCenter;

		[Token(Token = "0x4000D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private int m_VignetteSettings;

		[Token(Token = "0x17000146")]
		public Shader shader
		{
			[Token(Token = "0x6000D78")]
			[Address(RVA = "0xAF9448", Offset = "0xAF9448", VA = "0xAF9448")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000147")]
		public Material material
		{
			[Token(Token = "0x6000D79")]
			[Address(RVA = "0xAF94E4", Offset = "0xAF94E4", VA = "0xAF94E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D7A")]
		[Address(RVA = "0xAF9578", Offset = "0xAF9578", VA = "0xAF9578")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D7B")]
		[Address(RVA = "0xAF972C", Offset = "0xAF972C", VA = "0xAF972C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000D7C")]
		[Address(RVA = "0xAF97BC", Offset = "0xAF97BC", VA = "0xAF97BC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000D7D")]
		[Address(RVA = "0xAF986C", Offset = "0xAF986C", VA = "0xAF986C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000D7E")]
		[Address(RVA = "0xAFA034", Offset = "0xAFA034", VA = "0xAFA034")]
		public LensAberrations()
		{
		}
	}
	[Token(Token = "0x2000248")]
	[ImageEffectAllowedInSceneView]
	[AddComponentMenu("Image Effects/Cinematic/Screen Space Reflections")]
	[RequireComponent(typeof(Camera))]
	[ExecuteInEditMode]
	public class ScreenSpaceReflection : MonoBehaviour
	{
		[Token(Token = "0x2000249")]
		public enum SSRResolution
		{
			[Token(Token = "0x4000DA0")]
			High = 0,
			[Token(Token = "0x4000DA1")]
			Low = 2
		}

		[Token(Token = "0x200024A")]
		public enum SSRReflectionBlendType
		{
			[Token(Token = "0x4000DA3")]
			PhysicallyBased,
			[Token(Token = "0x4000DA4")]
			Additive
		}

		[Serializable]
		[Token(Token = "0x200024B")]
		public struct SSRSettings
		{
			[Token(Token = "0x200024C")]
			[AttributeUsage(AttributeTargets.Field)]
			public class LayoutAttribute : PropertyAttribute
			{
				[Token(Token = "0x6000D8E")]
				[Address(RVA = "0xAFC160", Offset = "0xAFC160", VA = "0xAFC160")]
				public LayoutAttribute()
				{
				}
			}

			[Token(Token = "0x4000DA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Layout]
			public ReflectionSettings reflectionSettings;

			[Token(Token = "0x4000DA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Layout]
			public IntensitySettings intensitySettings;

			[Token(Token = "0x4000DA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			[Layout]
			public ScreenEdgeMask screenEdgeMask;

			[Token(Token = "0x4000DA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private static readonly SSRSettings s_Default;

			[Token(Token = "0x1700014E")]
			public static SSRSettings defaultSettings
			{
				[Token(Token = "0x6000D8C")]
				[Address(RVA = "0xAFC060", Offset = "0xAFC060", VA = "0xAFC060")]
				get
				{
					return default(SSRSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x200024D")]
		public struct IntensitySettings
		{
			[Token(Token = "0x4000DA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Nonphysical multiplier for the SSR reflections. 1.0 is physically based.")]
			[Range(0f, 2f)]
			public float reflectionMultiplier;

			[Token(Token = "0x4000DAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("How far away from the maxDistance to begin fading SSR.")]
			[Range(0f, 1000f)]
			public float fadeDistance;

			[Token(Token = "0x4000DAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Amplify Fresnel fade out. Increase if floor reflections look good close to the surface and bad farther 'under' the floor.")]
			[Range(0f, 1f)]
			public float fresnelFade;

			[Token(Token = "0x4000DAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Tooltip("Higher values correspond to a faster Fresnel fade as the reflection changes from the grazing angle.")]
			[Range(0.1f, 10f)]
			public float fresnelFadePower;
		}

		[Serializable]
		[Token(Token = "0x200024E")]
		public struct ReflectionSettings
		{
			[Token(Token = "0x4000DAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("How the reflections are blended into the render.")]
			public SSRReflectionBlendType blendType;

			[Token(Token = "0x4000DAE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("Half resolution SSRR is much faster, but less accurate.")]
			public SSRResolution reflectionQuality;

			[Token(Token = "0x4000DAF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Range(0.1f, 300f)]
			[Tooltip("Maximum reflection distance in world units.")]
			public float maxDistance;

			[Token(Token = "0x4000DB0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Range(16f, 1024f)]
			[Tooltip("Max raytracing length.")]
			public int iterationCount;

			[Token(Token = "0x4000DB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Log base 2 of ray tracing coarse step size. Higher traces farther, lower gives better quality silhouettes.")]
			[Range(1f, 16f)]
			public int stepSize;

			[Token(Token = "0x4000DB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Range(0.01f, 10f)]
			[Tooltip("Typical thickness of columns, walls, furniture, and other objects that reflection rays might pass behind.")]
			public float widthModifier;

			[Token(Token = "0x4000DB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Range(0.1f, 8f)]
			[Tooltip("Blurriness of reflections.")]
			public float reflectionBlur;

			[Token(Token = "0x4000DB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Tooltip("Enable for a performance gain in scenes where most glossy objects are horizontal, like floors, water, and tables. Leave on for scenes with glossy vertical objects.")]
			public bool reflectBackfaces;
		}

		[Serializable]
		[Token(Token = "0x200024F")]
		public struct ScreenEdgeMask
		{
			[Token(Token = "0x4000DB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Range(0f, 1f)]
			[Tooltip("Higher = fade out SSRR near the edge of the screen so that reflections don't pop under camera motion.")]
			public float intensity;
		}

		[Token(Token = "0x2000250")]
		private enum PassIndex
		{
			[Token(Token = "0x4000DB7")]
			RayTraceStep,
			[Token(Token = "0x4000DB8")]
			CompositeFinal,
			[Token(Token = "0x4000DB9")]
			Blur,
			[Token(Token = "0x4000DBA")]
			CompositeSSR,
			[Token(Token = "0x4000DBB")]
			MinMipGeneration,
			[Token(Token = "0x4000DBC")]
			HitPointToReflections,
			[Token(Token = "0x4000DBD")]
			BilateralKeyPack,
			[Token(Token = "0x4000DBE")]
			BlitDepthAsCSZ,
			[Token(Token = "0x4000DBF")]
			PoissonBlur
		}

		[Token(Token = "0x4000D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public SSRSettings settings;

		[Token(Token = "0x4000D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Enable to limit the effect a few bright pixels can have on rougher surfaces")]
		private bool highlightSuppression;

		[Token(Token = "0x4000D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		[Tooltip("Enable to allow rays to pass behind objects. This can lead to more screen-space reflections, but the reflections are more likely to be wrong.")]
		private bool traceBehindObjects;

		[Token(Token = "0x4000D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
		[Tooltip("Enable to force more surfaces to use reflection probes if you see streaks on the sides of objects or bad reflections of their backs.")]
		private bool treatBackfaceHitAsMiss;

		[Token(Token = "0x4000D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4F")]
		[Tooltip("Drastically improves reflection reconstruction quality at the expense of some performance.")]
		private bool bilateralUpsample;

		[Token(Token = "0x4000D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Shader m_Shader;

		[Token(Token = "0x4000D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material m_Material;

		[Token(Token = "0x4000D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Camera m_Camera;

		[Token(Token = "0x4000D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private CommandBuffer m_CommandBuffer;

		[Token(Token = "0x4000D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int kNormalAndRoughnessTexture;

		[Token(Token = "0x4000D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static int kHitPointTexture;

		[Token(Token = "0x4000D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int[] kReflectionTextures;

		[Token(Token = "0x4000D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static int kFilteredReflections;

		[Token(Token = "0x4000D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static int kBlurTexture;

		[Token(Token = "0x4000D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static int kFinalReflectionTexture;

		[Token(Token = "0x4000D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private static int kTempTexture;

		[Token(Token = "0x4000D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static int kRayStepSize;

		[Token(Token = "0x4000D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private static int kAdditiveReflection;

		[Token(Token = "0x4000D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static int kBilateralUpsampling;

		[Token(Token = "0x4000D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private static int kTreatBackfaceHitAsMiss;

		[Token(Token = "0x4000D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static int kAllowBackwardsRays;

		[Token(Token = "0x4000D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private static int kTraceBehindObjects;

		[Token(Token = "0x4000D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static int kMaxSteps;

		[Token(Token = "0x4000D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private static int kFullResolutionFiltering;

		[Token(Token = "0x4000D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private static int kHalfResolution;

		[Token(Token = "0x4000D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private static int kHighlightSuppression;

		[Token(Token = "0x4000D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static int kPixelsPerMeterAtOneMeter;

		[Token(Token = "0x4000D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private static int kScreenEdgeFading;

		[Token(Token = "0x4000D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static int kReflectionBlur;

		[Token(Token = "0x4000D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private static int kMaxRayTraceDistance;

		[Token(Token = "0x4000D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private static int kFadeDistance;

		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private static int kLayerThickness;

		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private static int kSSRMultiplier;

		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private static int kFresnelFade;

		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private static int kFresnelFadePower;

		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private static int kReflectionBufferSize;

		[Token(Token = "0x4000D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private static int kScreenSize;

		[Token(Token = "0x4000D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private static int kInvScreenSize;

		[Token(Token = "0x4000D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private static int kProjInfo;

		[Token(Token = "0x4000D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private static int kCameraClipInfo;

		[Token(Token = "0x4000D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private static int kProjectToPixelMatrix;

		[Token(Token = "0x4000D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private static int kWorldToCameraMatrix;

		[Token(Token = "0x4000D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private static int kCameraToWorldMatrix;

		[Token(Token = "0x4000D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private static int kAxis;

		[Token(Token = "0x4000D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private static int kCurrentMipLevel;

		[Token(Token = "0x1700014B")]
		public Shader shader
		{
			[Token(Token = "0x6000D84")]
			[Address(RVA = "0xAFA0E8", Offset = "0xAFA0E8", VA = "0xAFA0E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014C")]
		public Material material
		{
			[Token(Token = "0x6000D85")]
			[Address(RVA = "0xAFA184", Offset = "0xAFA184", VA = "0xAFA184")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014D")]
		public Camera camera_
		{
			[Token(Token = "0x6000D86")]
			[Address(RVA = "0xAFA218", Offset = "0xAFA218", VA = "0xAFA218")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D87")]
		[Address(RVA = "0xAFA2C0", Offset = "0xAFA2C0", VA = "0xAFA2C0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0xAFAA94", Offset = "0xAFAA94", VA = "0xAFAA94")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0xAFAAF8", Offset = "0xAFAAF8", VA = "0xAFAAF8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0xAFAC14", Offset = "0xAFAC14", VA = "0xAFAC14")]
		public void OnPreRender()
		{
		}

		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0xAFBFA8", Offset = "0xAFBFA8", VA = "0xAFBFA8")]
		public ScreenSpaceReflection()
		{
		}
	}
	[Token(Token = "0x2000251")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	[AddComponentMenu("Image Effects/Cinematic/Tonemapping and Color Grading")]
	[ImageEffectAllowedInSceneView]
	public class TonemappingColorGrading : MonoBehaviour
	{
		[Token(Token = "0x2000252")]
		[AttributeUsage(AttributeTargets.Field)]
		public class SettingsGroup : Attribute
		{
			[Token(Token = "0x6000DB6")]
			[Address(RVA = "0xAFEB24", Offset = "0xAFEB24", VA = "0xAFEB24")]
			public SettingsGroup()
			{
			}
		}

		[Token(Token = "0x2000253")]
		public class IndentedGroup : PropertyAttribute
		{
			[Token(Token = "0x6000DB7")]
			[Address(RVA = "0xAFEB2C", Offset = "0xAFEB2C", VA = "0xAFEB2C")]
			public IndentedGroup()
			{
			}
		}

		[Token(Token = "0x2000254")]
		public class ChannelMixer : PropertyAttribute
		{
			[Token(Token = "0x6000DB8")]
			[Address(RVA = "0xAFEB34", Offset = "0xAFEB34", VA = "0xAFEB34")]
			public ChannelMixer()
			{
			}
		}

		[Token(Token = "0x2000255")]
		public class ColorWheelGroup : PropertyAttribute
		{
			[Token(Token = "0x4000DEB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int minSizePerWheel;

			[Token(Token = "0x4000DEC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int maxSizePerWheel;

			[Token(Token = "0x6000DB9")]
			[Address(RVA = "0xAFEB3C", Offset = "0xAFEB3C", VA = "0xAFEB3C")]
			public ColorWheelGroup()
			{
			}

			[Token(Token = "0x6000DBA")]
			[Address(RVA = "0xAFEB50", Offset = "0xAFEB50", VA = "0xAFEB50")]
			public ColorWheelGroup(int minSizePerWheel, int maxSizePerWheel)
			{
			}
		}

		[Token(Token = "0x2000256")]
		public class Curve : PropertyAttribute
		{
			[Token(Token = "0x4000DED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Color color;

			[Token(Token = "0x6000DBB")]
			[Address(RVA = "0xAFEB88", Offset = "0xAFEB88", VA = "0xAFEB88")]
			public Curve()
			{
			}

			[Token(Token = "0x6000DBC")]
			[Address(RVA = "0xAFEB98", Offset = "0xAFEB98", VA = "0xAFEB98")]
			public Curve(float r, float g, float b, float a)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000257")]
		public struct EyeAdaptationSettings
		{
			[Token(Token = "0x4000DEE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool enabled;

			[Token(Token = "0x4000DEF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Min(0f)]
			[Tooltip("Midpoint Adjustment.")]
			public float middleGrey;

			[Token(Token = "0x4000DF0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("The lowest possible exposure value; adjust this value to modify the brightest areas of your level.")]
			public float min;

			[Token(Token = "0x4000DF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Tooltip("The highest possible exposure value; adjust this value to modify the darkest areas of your level.")]
			public float max;

			[Token(Token = "0x4000DF2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Speed of linear adaptation. Higher is faster.")]
			[Min(0f)]
			public float speed;

			[Token(Token = "0x4000DF3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Tooltip("Displays a luminosity helper in the GameView.")]
			public bool showDebug;

			[Token(Token = "0x1700015D")]
			public static EyeAdaptationSettings defaultSettings
			{
				[Token(Token = "0x6000DBD")]
				[Address(RVA = "0xAFE990", Offset = "0xAFE990", VA = "0xAFE990")]
				get
				{
					return default(EyeAdaptationSettings);
				}
			}
		}

		[Token(Token = "0x2000258")]
		public enum Tonemapper
		{
			[Token(Token = "0x4000DF5")]
			ACES,
			[Token(Token = "0x4000DF6")]
			Curve,
			[Token(Token = "0x4000DF7")]
			Hable,
			[Token(Token = "0x4000DF8")]
			HejlDawson,
			[Token(Token = "0x4000DF9")]
			Photographic,
			[Token(Token = "0x4000DFA")]
			Reinhard,
			[Token(Token = "0x4000DFB")]
			Neutral
		}

		[Serializable]
		[Token(Token = "0x2000259")]
		public struct TonemappingSettings
		{
			[Token(Token = "0x4000DFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool enabled;

			[Token(Token = "0x4000DFD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("Tonemapping technique to use. ACES is the recommended one.")]
			public Tonemapper tonemapper;

			[Token(Token = "0x4000DFE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Min(0f)]
			[Tooltip("Adjusts the overall exposure of the scene.")]
			public float exposure;

			[Token(Token = "0x4000DFF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Tooltip("Custom tonemapping curve.")]
			public AnimationCurve curve;

			[Token(Token = "0x4000E00")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Range(-0.1f, 0.1f)]
			public float neutralBlackIn;

			[Token(Token = "0x4000E01")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Range(1f, 20f)]
			public float neutralWhiteIn;

			[Token(Token = "0x4000E02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Range(-0.09f, 0.1f)]
			public float neutralBlackOut;

			[Token(Token = "0x4000E03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			[Range(1f, 19f)]
			public float neutralWhiteOut;

			[Token(Token = "0x4000E04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			[Range(0.1f, 20f)]
			public float neutralWhiteLevel;

			[Token(Token = "0x4000E05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Range(1f, 10f)]
			public float neutralWhiteClip;

			[Token(Token = "0x1700015E")]
			public static TonemappingSettings defaultSettings
			{
				[Token(Token = "0x6000DBE")]
				[Address(RVA = "0xAFE9B0", Offset = "0xAFE9B0", VA = "0xAFE9B0")]
				get
				{
					return default(TonemappingSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x200025A")]
		public struct LUTSettings
		{
			[Token(Token = "0x4000E06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool enabled;

			[Token(Token = "0x4000E07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Custom lookup texture (strip format, e.g. 256x16).")]
			public Texture texture;

			[Token(Token = "0x4000E08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Range(0f, 1f)]
			[Tooltip("Blending factor.")]
			public float contribution;

			[Token(Token = "0x1700015F")]
			public static LUTSettings defaultSettings
			{
				[Token(Token = "0x6000DBF")]
				[Address(RVA = "0xAFEADC", Offset = "0xAFEADC", VA = "0xAFEADC")]
				get
				{
					return default(LUTSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x200025B")]
		public struct ColorWheelsSettings
		{
			[Token(Token = "0x4000E09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[ColorUsage(false)]
			public Color shadows;

			[Token(Token = "0x4000E0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[ColorUsage(false)]
			public Color midtones;

			[Token(Token = "0x4000E0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[ColorUsage(false)]
			public Color highlights;

			[Token(Token = "0x17000160")]
			public static ColorWheelsSettings defaultSettings
			{
				[Token(Token = "0x6000DC0")]
				[Address(RVA = "0xAFED18", Offset = "0xAFED18", VA = "0xAFED18")]
				get
				{
					return default(ColorWheelsSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x200025C")]
		public struct BasicsSettings
		{
			[Token(Token = "0x4000E0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Range(-2f, 2f)]
			[Tooltip("Sets the white balance to a custom color temperature.")]
			public float temperatureShift;

			[Token(Token = "0x4000E0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Range(-2f, 2f)]
			[Tooltip("Sets the white balance to compensate for a green or magenta tint.")]
			public float tint;

			[Token(Token = "0x4000E0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Space]
			[Range(-0.5f, 0.5f)]
			[Tooltip("Shift the hue of all colors.")]
			public float hue;

			[Token(Token = "0x4000E0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			[Range(0f, 2f)]
			[Tooltip("Pushes the intensity of all colors.")]
			public float saturation;

			[Token(Token = "0x4000E10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Range(-1f, 1f)]
			[Tooltip("Adjusts the saturation so that clipping is minimized as colors approach full saturation.")]
			public float vibrance;

			[Token(Token = "0x4000E11")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[Range(0f, 10f)]
			[Tooltip("Brightens or darkens all colors.")]
			public float value;

			[Token(Token = "0x4000E12")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("Expands or shrinks the overall range of tonal values.")]
			[Range(0f, 2f)]
			[Space]
			public float contrast;

			[Token(Token = "0x4000E13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Range(0.01f, 5f)]
			[Tooltip("Contrast gain curve. Controls the steepness of the curve.")]
			public float gain;

			[Token(Token = "0x4000E14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Range(0.01f, 5f)]
			[Tooltip("Applies a pow function to the source.")]
			public float gamma;

			[Token(Token = "0x17000161")]
			public static BasicsSettings defaultSettings
			{
				[Token(Token = "0x6000DC1")]
				[Address(RVA = "0xAFED28", Offset = "0xAFED28", VA = "0xAFED28")]
				get
				{
					return default(BasicsSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x200025D")]
		public struct ChannelMixerSettings
		{
			[Token(Token = "0x4000E15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int currentChannel;

			[Token(Token = "0x4000E16")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Vector3[] channels;

			[Token(Token = "0x17000162")]
			public static ChannelMixerSettings defaultSettings
			{
				[Token(Token = "0x6000DC2")]
				[Address(RVA = "0xAFED48", Offset = "0xAFED48", VA = "0xAFED48")]
				get
				{
					return default(ChannelMixerSettings);
				}
			}
		}

		[Serializable]
		[Token(Token = "0x200025E")]
		public struct CurvesSettings
		{
			[Token(Token = "0x4000E17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Curve]
			public AnimationCurve master;

			[Token(Token = "0x4000E18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Curve(1f, 0f, 0f, 1f)]
			public AnimationCurve red;

			[Token(Token = "0x4000E19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Curve(0f, 1f, 0f, 1f)]
			public AnimationCurve green;

			[Token(Token = "0x4000E1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Curve(0f, 1f, 1f, 1f)]
			public AnimationCurve blue;

			[Token(Token = "0x17000163")]
			public static CurvesSettings defaultSettings
			{
				[Token(Token = "0x6000DC3")]
				[Address(RVA = "0xAFEE04", Offset = "0xAFEE04", VA = "0xAFEE04")]
				get
				{
					return default(CurvesSettings);
				}
			}

			[Token(Token = "0x17000164")]
			public static AnimationCurve defaultCurve
			{
				[Token(Token = "0x6000DC4")]
				[Address(RVA = "0xAFEBE0", Offset = "0xAFEBE0", VA = "0xAFEBE0")]
				get
				{
					return null;
				}
			}
		}

		[Token(Token = "0x200025F")]
		public enum ColorGradingPrecision
		{
			[Token(Token = "0x4000E1C")]
			Normal = 0x10,
			[Token(Token = "0x4000E1D")]
			High = 0x20
		}

		[Serializable]
		[Token(Token = "0x2000260")]
		public struct ColorGradingSettings
		{
			[Token(Token = "0x4000E1E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool enabled;

			[Token(Token = "0x4000E1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("Internal LUT precision. \"Normal\" is 256x16, \"High\" is 1024x32. Prefer \"Normal\" on mobile devices.")]
			public ColorGradingPrecision precision;

			[Token(Token = "0x4000E20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[ColorWheelGroup]
			[Space]
			public ColorWheelsSettings colorWheels;

			[Token(Token = "0x4000E21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			[Space]
			[IndentedGroup]
			public BasicsSettings basics;

			[Token(Token = "0x4000E22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			[ChannelMixer]
			[Space]
			public ChannelMixerSettings channelMixer;

			[Token(Token = "0x4000E23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			[IndentedGroup]
			[Space]
			public CurvesSettings curves;

			[Token(Token = "0x4000E24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			[Space]
			[Tooltip("Use dithering to try and minimize color banding in dark areas.")]
			public bool useDithering;

			[Token(Token = "0x4000E25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
			[Tooltip("Displays the generated LUT in the top left corner of the GameView.")]
			public bool showDebug;

			[Token(Token = "0x17000165")]
			public static ColorGradingSettings defaultSettings
			{
				[Token(Token = "0x6000DC5")]
				[Address(RVA = "0xAFEA30", Offset = "0xAFEA30", VA = "0xAFEA30")]
				get
				{
					return default(ColorGradingSettings);
				}
			}

			[Token(Token = "0x6000DC6")]
			[Address(RVA = "0xAFEE8C", Offset = "0xAFEE8C", VA = "0xAFEE8C")]
			internal void Reset()
			{
			}
		}

		[Token(Token = "0x2000261")]
		private enum Pass
		{
			[Token(Token = "0x4000E27")]
			LutGen,
			[Token(Token = "0x4000E28")]
			AdaptationLog,
			[Token(Token = "0x4000E29")]
			AdaptationExpBlend,
			[Token(Token = "0x4000E2A")]
			AdaptationExp,
			[Token(Token = "0x4000E2B")]
			TonemappingOff,
			[Token(Token = "0x4000E2C")]
			TonemappingACES,
			[Token(Token = "0x4000E2D")]
			TonemappingCurve,
			[Token(Token = "0x4000E2E")]
			TonemappingHable,
			[Token(Token = "0x4000E2F")]
			TonemappingHejlDawson,
			[Token(Token = "0x4000E30")]
			TonemappingPhotographic,
			[Token(Token = "0x4000E31")]
			TonemappingReinhard,
			[Token(Token = "0x4000E32")]
			TonemappingNeutral,
			[Token(Token = "0x4000E33")]
			AdaptationDebug
		}

		[Token(Token = "0x4000DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[SettingsGroup]
		private EyeAdaptationSettings m_EyeAdaptation;

		[Token(Token = "0x4000DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[SettingsGroup]
		private TonemappingSettings m_Tonemapping;

		[Token(Token = "0x4000DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SettingsGroup]
		[SerializeField]
		private ColorGradingSettings m_ColorGrading;

		[Token(Token = "0x4000DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SettingsGroup]
		[SerializeField]
		private LUTSettings m_Lut;

		[Token(Token = "0x4000DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Texture2D m_IdentityLut;

		[Token(Token = "0x4000DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private RenderTexture m_InternalLut;

		[Token(Token = "0x4000DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Texture2D m_CurveTexture;

		[Token(Token = "0x4000DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Texture2D m_TonemapperCurve;

		[Token(Token = "0x4000DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private float m_TonemapperCurveRange;

		[Token(Token = "0x4000DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		private Shader m_Shader;

		[Token(Token = "0x4000DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Material m_Material;

		[Token(Token = "0x4000DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14A")]
		private bool m_Dirty;

		[Token(Token = "0x4000DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14B")]
		private bool m_TonemapperDirty;

		[Token(Token = "0x4000DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private RenderTexture m_SmallAdaptiveRt;

		[Token(Token = "0x4000DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private RenderTextureFormat m_AdaptiveRtFormat;

		[Token(Token = "0x4000DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		private int m_AdaptationSpeed;

		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private int m_MiddleGrey;

		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private int m_AdaptationMin;

		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private int m_AdaptationMax;

		[Token(Token = "0x4000DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private int m_LumTex;

		[Token(Token = "0x4000DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private int m_ToneCurveRange;

		[Token(Token = "0x4000DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private int m_ToneCurve;

		[Token(Token = "0x4000DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private int m_Exposure;

		[Token(Token = "0x4000DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		private int m_NeutralTonemapperParams1;

		[Token(Token = "0x4000DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private int m_NeutralTonemapperParams2;

		[Token(Token = "0x4000DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		private int m_WhiteBalance;

		[Token(Token = "0x4000DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private int m_Lift;

		[Token(Token = "0x4000DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		private int m_Gamma;

		[Token(Token = "0x4000DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private int m_Gain;

		[Token(Token = "0x4000DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		private int m_ContrastGainGamma;

		[Token(Token = "0x4000DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private int m_Vibrance;

		[Token(Token = "0x4000DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
		private int m_HSV;

		[Token(Token = "0x4000DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private int m_ChannelMixerRed;

		[Token(Token = "0x4000DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		private int m_ChannelMixerGreen;

		[Token(Token = "0x4000DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private int m_ChannelMixerBlue;

		[Token(Token = "0x4000DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		private int m_CurveTex;

		[Token(Token = "0x4000DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private int m_InternalLutTex;

		[Token(Token = "0x4000DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		private int m_InternalLutParams;

		[Token(Token = "0x4000DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private int m_UserLutTex;

		[Token(Token = "0x4000DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		private int m_UserLutParams;

		[Token(Token = "0x4000DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private RenderTexture[] m_AdaptRts;

		[Token(Token = "0x1700014F")]
		public EyeAdaptationSettings eyeAdaptation
		{
			[Token(Token = "0x6000D8F")]
			[Address(RVA = "0xAFC168", Offset = "0xAFC168", VA = "0xAFC168")]
			get
			{
				return default(EyeAdaptationSettings);
			}
			[Token(Token = "0x6000D90")]
			[Address(RVA = "0xAFC17C", Offset = "0xAFC17C", VA = "0xAFC17C")]
			set
			{
			}
		}

		[Token(Token = "0x17000150")]
		public TonemappingSettings tonemapping
		{
			[Token(Token = "0x6000D91")]
			[Address(RVA = "0xAFC190", Offset = "0xAFC190", VA = "0xAFC190")]
			get
			{
				return default(TonemappingSettings);
			}
			[Token(Token = "0x6000D92")]
			[Address(RVA = "0xAFC1A4", Offset = "0xAFC1A4", VA = "0xAFC1A4")]
			set
			{
			}
		}

		[Token(Token = "0x17000151")]
		public ColorGradingSettings colorGrading
		{
			[Token(Token = "0x6000D93")]
			[Address(RVA = "0xAFC1E4", Offset = "0xAFC1E4", VA = "0xAFC1E4")]
			get
			{
				return default(ColorGradingSettings);
			}
			[Token(Token = "0x6000D94")]
			[Address(RVA = "0xAFC1F4", Offset = "0xAFC1F4", VA = "0xAFC1F4")]
			set
			{
			}
		}

		[Token(Token = "0x17000152")]
		public LUTSettings lut
		{
			[Token(Token = "0x6000D95")]
			[Address(RVA = "0xAFC230", Offset = "0xAFC230", VA = "0xAFC230")]
			get
			{
				return default(LUTSettings);
			}
			[Token(Token = "0x6000D96")]
			[Address(RVA = "0xAFC248", Offset = "0xAFC248", VA = "0xAFC248")]
			set
			{
			}
		}

		[Token(Token = "0x17000153")]
		private Texture2D identityLut
		{
			[Token(Token = "0x6000D97")]
			[Address(RVA = "0xAFC26C", Offset = "0xAFC26C", VA = "0xAFC26C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000154")]
		private RenderTexture internalLutRt
		{
			[Token(Token = "0x6000D98")]
			[Address(RVA = "0xAFC504", Offset = "0xAFC504", VA = "0xAFC504")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000155")]
		private Texture2D curveTexture
		{
			[Token(Token = "0x6000D99")]
			[Address(RVA = "0xAFC678", Offset = "0xAFC678", VA = "0xAFC678")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000156")]
		private Texture2D tonemapperCurve
		{
			[Token(Token = "0x6000D9A")]
			[Address(RVA = "0xAFC7A0", Offset = "0xAFC7A0", VA = "0xAFC7A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000157")]
		public Shader shader
		{
			[Token(Token = "0x6000D9B")]
			[Address(RVA = "0xAFC900", Offset = "0xAFC900", VA = "0xAFC900")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000158")]
		public Material material
		{
			[Token(Token = "0x6000D9C")]
			[Address(RVA = "0xAFC9A0", Offset = "0xAFC9A0", VA = "0xAFC9A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000159")]
		public bool isGammaColorSpace
		{
			[Token(Token = "0x6000D9D")]
			[Address(RVA = "0xAFCA2C", Offset = "0xAFCA2C", VA = "0xAFCA2C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700015A")]
		public int lutSize
		{
			[Token(Token = "0x6000D9E")]
			[Address(RVA = "0xAFC340", Offset = "0xAFC340", VA = "0xAFC340")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700015B")]
		public bool validRenderTextureFormat
		{
			[Token(Token = "0x6000D9F")]
			[Address(RVA = "0xAFCA48", Offset = "0xAFCA48", VA = "0xAFCA48")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DA0")]
			[Address(RVA = "0xAFCA50", Offset = "0xAFCA50", VA = "0xAFCA50")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700015C")]
		public bool validUserLutSize
		{
			[Token(Token = "0x6000DA1")]
			[Address(RVA = "0xAFCA5C", Offset = "0xAFCA5C", VA = "0xAFCA5C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000DA2")]
			[Address(RVA = "0xAFCA64", Offset = "0xAFCA64", VA = "0xAFCA64")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000DA3")]
		[Address(RVA = "0xAFC224", Offset = "0xAFC224", VA = "0xAFC224")]
		public void SetDirty()
		{
		}

		[Token(Token = "0x6000DA4")]
		[Address(RVA = "0xAFC1D8", Offset = "0xAFC1D8", VA = "0xAFC1D8")]
		public void SetTonemapperDirty()
		{
		}

		[Token(Token = "0x6000DA5")]
		[Address(RVA = "0xAFCA70", Offset = "0xAFCA70", VA = "0xAFCA70")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000DA6")]
		[Address(RVA = "0xAFCE40", Offset = "0xAFCE40", VA = "0xAFCE40")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000DA7")]
		[Address(RVA = "0xAFCE84", Offset = "0xAFCE84", VA = "0xAFCE84")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000DA8")]
		[Address(RVA = "0xAFD10C", Offset = "0xAFD10C", VA = "0xAFD10C")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6000DA9")]
		[Address(RVA = "0xAFC348", Offset = "0xAFC348", VA = "0xAFC348")]
		private static Texture2D GenerateIdentityLut(int dim)
		{
			return null;
		}

		[Token(Token = "0x6000DAA")]
		[Address(RVA = "0xAFD118", Offset = "0xAFD118", VA = "0xAFD118")]
		private float StandardIlluminantY(float x)
		{
			return default(float);
		}

		[Token(Token = "0x6000DAB")]
		[Address(RVA = "0xAFD144", Offset = "0xAFD144", VA = "0xAFD144")]
		private Vector3 CIExyToLMS(float x, float y)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DAC")]
		[Address(RVA = "0xAFD1D4", Offset = "0xAFD1D4", VA = "0xAFD1D4")]
		private Vector3 GetWhiteBalance()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DAD")]
		[Address(RVA = "0xAFD2CC", Offset = "0xAFD2CC", VA = "0xAFD2CC")]
		private static Color NormalizeColor(Color c)
		{
			return default(Color);
		}

		[Token(Token = "0x6000DAE")]
		[Address(RVA = "0xAFD38C", Offset = "0xAFD38C", VA = "0xAFD38C")]
		private void GenerateLiftGammaGain(out Color lift, out Color gamma, out Color gain)
		{
		}

		[Token(Token = "0x6000DAF")]
		[Address(RVA = "0xAFD548", Offset = "0xAFD548", VA = "0xAFD548")]
		private void GenCurveTexture()
		{
		}

		[Token(Token = "0x6000DB0")]
		[Address(RVA = "0xAFD6F0", Offset = "0xAFD6F0", VA = "0xAFD6F0")]
		private bool CheckUserLut()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DB1")]
		[Address(RVA = "0xAFD768", Offset = "0xAFD768", VA = "0xAFD768")]
		private bool CheckSmallAdaptiveRt()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DB2")]
		[Address(RVA = "0xAFD86C", Offset = "0xAFD86C", VA = "0xAFD86C")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000DB3")]
		[Address(RVA = "0xAFDA38", Offset = "0xAFDA38", VA = "0xAFDA38")]
		[ImageEffectTransformsToLDR]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000DB4")]
		[Address(RVA = "0xAFE770", Offset = "0xAFE770", VA = "0xAFE770")]
		public Texture2D BakeLUT()
		{
			return null;
		}

		[Token(Token = "0x6000DB5")]
		[Address(RVA = "0xAFE8AC", Offset = "0xAFE8AC", VA = "0xAFE8AC")]
		public TonemappingColorGrading()
		{
		}
	}
	[Token(Token = "0x2000262")]
	[RequireComponent(typeof(Camera))]
	[AddComponentMenu("Image Effects/Cinematic/Motion Blur")]
	public class MotionBlur : MonoBehaviour
	{
		[Token(Token = "0x2000263")]
		private class FrameBlendingFilter
		{
			[Token(Token = "0x2000264")]
			private struct Frame
			{
				[Token(Token = "0x4000E4A")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
				public RenderTexture lumaTexture;

				[Token(Token = "0x4000E4B")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
				public RenderTexture chromaTexture;

				[Token(Token = "0x4000E4C")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				public float time;

				[Token(Token = "0x4000E4D")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				private RenderBuffer[] _mrt;

				[Token(Token = "0x6000DD6")]
				[Address(RVA = "0xB005AC", Offset = "0xB005AC", VA = "0xB005AC")]
				public float CalculateWeight(float strength, float currentTime)
				{
					return default(float);
				}

				[Token(Token = "0x6000DD7")]
				[Address(RVA = "0xB00170", Offset = "0xB00170", VA = "0xB00170")]
				public void Release()
				{
				}

				[Token(Token = "0x6000DD8")]
				[Address(RVA = "0xB00240", Offset = "0xB00240", VA = "0xB00240")]
				public void MakeRecord(RenderTexture source, Material material)
				{
				}

				[Token(Token = "0x6000DD9")]
				[Address(RVA = "0xB00458", Offset = "0xB00458", VA = "0xB00458")]
				public void MakeRecordRaw(RenderTexture source, RenderTextureFormat format)
				{
				}
			}

			[Token(Token = "0x4000E39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private bool _useCompression;

			[Token(Token = "0x4000E3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private RenderTextureFormat _rawTextureFormat;

			[Token(Token = "0x4000E3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Material _material;

			[Token(Token = "0x4000E3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private Frame[] _frameList;

			[Token(Token = "0x4000E3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int _lastFrameCount;

			[Token(Token = "0x4000E3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int _History1LumaTex;

			[Token(Token = "0x4000E3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int _History2LumaTex;

			[Token(Token = "0x4000E40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private int _History3LumaTex;

			[Token(Token = "0x4000E41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int _History4LumaTex;

			[Token(Token = "0x4000E42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int _History1ChromaTex;

			[Token(Token = "0x4000E43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int _History2ChromaTex;

			[Token(Token = "0x4000E44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			private int _History3ChromaTex;

			[Token(Token = "0x4000E45")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private int _History4ChromaTex;

			[Token(Token = "0x4000E46")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			private int _History1Weight;

			[Token(Token = "0x4000E47")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private int _History2Weight;

			[Token(Token = "0x4000E48")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
			private int _History3Weight;

			[Token(Token = "0x4000E49")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private int _History4Weight;

			[Token(Token = "0x6000DCE")]
			[Address(RVA = "0xAFF080", Offset = "0xAFF080", VA = "0xAFF080")]
			public FrameBlendingFilter()
			{
			}

			[Token(Token = "0x6000DCF")]
			[Address(RVA = "0xAFF274", Offset = "0xAFF274", VA = "0xAFF274")]
			public void Release()
			{
			}

			[Token(Token = "0x6000DD0")]
			[Address(RVA = "0xAFFD30", Offset = "0xAFFD30", VA = "0xAFFD30")]
			public void PushFrame(RenderTexture source)
			{
			}

			[Token(Token = "0x6000DD1")]
			[Address(RVA = "0xAFF9B4", Offset = "0xAFF9B4", VA = "0xAFF9B4")]
			public void BlendFrames(float strength, RenderTexture source, RenderTexture destination)
			{
			}

			[Token(Token = "0x6000DD2")]
			[Address(RVA = "0xAFFE64", Offset = "0xAFFE64", VA = "0xAFFE64")]
			private static bool CheckSupportCompression()
			{
				return default(bool);
			}

			[Token(Token = "0x6000DD3")]
			[Address(RVA = "0xAFFEA8", Offset = "0xAFFEA8", VA = "0xAFFEA8")]
			private static RenderTextureFormat GetPreferredRenderTextureFormat()
			{
				return default(RenderTextureFormat);
			}

			[Token(Token = "0x6000DD4")]
			[Address(RVA = "0xB00548", Offset = "0xB00548", VA = "0xB00548")]
			private Frame GetFrameRelative(int offset)
			{
				return default(Frame);
			}

			[Token(Token = "0x6000DD5")]
			[Address(RVA = "0xAFFF74", Offset = "0xAFFF74", VA = "0xAFFF74")]
			private void FetchUniformLocations()
			{
			}
		}

		[Token(Token = "0x2000265")]
		private class ReconstructionFilter
		{
			[Token(Token = "0x4000E4E")]
			private const float kMaxBlurRadius = 5f;

			[Token(Token = "0x4000E4F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private Material _material;

			[Token(Token = "0x4000E50")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private bool _unroll;

			[Token(Token = "0x4000E51")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			private RenderTextureFormat _vectorRTFormat;

			[Token(Token = "0x4000E52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private RenderTextureFormat _packedRTFormat;

			[Token(Token = "0x4000E53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private int _VelocityScale;

			[Token(Token = "0x4000E54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int _MaxBlurRadius;

			[Token(Token = "0x4000E55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int _TileMaxOffs;

			[Token(Token = "0x4000E56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int _TileMaxLoop;

			[Token(Token = "0x4000E57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private int _LoopCount;

			[Token(Token = "0x4000E58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int _NeighborMaxTex;

			[Token(Token = "0x4000E59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int _VelocityTex;

			[Token(Token = "0x6000DDA")]
			[Address(RVA = "0xAFEF68", Offset = "0xAFEF68", VA = "0xAFEF68")]
			public ReconstructionFilter()
			{
			}

			[Token(Token = "0x6000DDB")]
			[Address(RVA = "0xAFF1E0", Offset = "0xAFF1E0", VA = "0xAFF1E0")]
			public void Release()
			{
			}

			[Token(Token = "0x6000DDC")]
			[Address(RVA = "0xAFF5A0", Offset = "0xAFF5A0", VA = "0xAFF5A0")]
			public void ProcessImage(float shutterAngle, int sampleCount, RenderTexture source, RenderTexture destination)
			{
			}

			[Token(Token = "0x6000DDD")]
			[Address(RVA = "0xB005F4", Offset = "0xB005F4", VA = "0xB005F4")]
			private bool CheckTextureFormatSupport()
			{
				return default(bool);
			}

			[Token(Token = "0x6000DDE")]
			[Address(RVA = "0xB00774", Offset = "0xB00774", VA = "0xB00774")]
			private RenderTexture GetTemporaryRT(Texture source, int divider, RenderTextureFormat format)
			{
				return null;
			}

			[Token(Token = "0x6000DDF")]
			[Address(RVA = "0xB007F8", Offset = "0xB007F8", VA = "0xB007F8")]
			private void ReleaseTemporaryRT(RenderTexture rt)
			{
			}

			[Token(Token = "0x6000DE0")]
			[Address(RVA = "0xB00634", Offset = "0xB00634", VA = "0xB00634")]
			private void FetchUniformLocations()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000266")]
		public class Settings
		{
			[Token(Token = "0x4000E5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[SerializeField]
			[Range(0f, 360f)]
			[Tooltip("The angle of rotary shutter. Larger values give longer exposure.")]
			public float shutterAngle;

			[Token(Token = "0x4000E5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			[SerializeField]
			[Tooltip("The amount of sample points, which affects quality and performance.")]
			public int sampleCount;

			[Token(Token = "0x4000E5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			[Tooltip("The strength of multiple frame blending")]
			[Range(0f, 1f)]
			[SerializeField]
			public float frameBlending;

			[Token(Token = "0x17000167")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6000DE1")]
				[Address(RVA = "0xAFFDF8", Offset = "0xAFFDF8", VA = "0xAFFDF8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000DE2")]
			[Address(RVA = "0xB00804", Offset = "0xB00804", VA = "0xB00804")]
			public Settings()
			{
			}
		}

		[Token(Token = "0x4000E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Settings _settings;

		[Token(Token = "0x4000E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Shader _reconstructionShader;

		[Token(Token = "0x4000E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Shader _frameBlendingShader;

		[Token(Token = "0x4000E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ReconstructionFilter _reconstructionFilter;

		[Token(Token = "0x4000E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private FrameBlendingFilter _frameBlendingFilter;

		[Token(Token = "0x17000166")]
		public Settings settings
		{
			[Token(Token = "0x6000DC7")]
			[Address(RVA = "0xAFEEBC", Offset = "0xAFEEBC", VA = "0xAFEEBC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000DC8")]
			[Address(RVA = "0xAFEEC4", Offset = "0xAFEEC4", VA = "0xAFEEC4")]
			set
			{
			}
		}

		[Token(Token = "0x6000DC9")]
		[Address(RVA = "0xAFEECC", Offset = "0xAFEECC", VA = "0xAFEECC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000DCA")]
		[Address(RVA = "0xAFF18C", Offset = "0xAFF18C", VA = "0xAFF18C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000DCB")]
		[Address(RVA = "0xAFF360", Offset = "0xAFF360", VA = "0xAFF360")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DCC")]
		[Address(RVA = "0xAFF3F0", Offset = "0xAFF3F0", VA = "0xAFF3F0")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000DCD")]
		[Address(RVA = "0xAFFDCC", Offset = "0xAFFDCC", VA = "0xAFFDCC")]
		public MotionBlur()
		{
		}
	}
	[Token(Token = "0x2000267")]
	[RequireComponent(typeof(Camera))]
	[ExecuteInEditMode]
	[ImageEffectAllowedInSceneView]
	[AddComponentMenu("Image Effects/Cinematic/Temporal Anti-aliasing")]
	public class TemporalAntiAliasing : MonoBehaviour
	{
		[Token(Token = "0x2000268")]
		public enum Sequence
		{
			[Token(Token = "0x4000E64")]
			Halton
		}

		[Serializable]
		[Token(Token = "0x2000269")]
		public struct JitterSettings
		{
			[Token(Token = "0x4000E65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("The sequence used to generate the points used as jitter offsets.")]
			public Sequence sequence;

			[Token(Token = "0x4000E66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("The diameter (in texels) inside which jitter samples are spread. Smaller values result in crisper but more aliased output, while larger values result in more stable but blurrier output.")]
			[Range(0.1f, 3f)]
			public float spread;

			[Token(Token = "0x4000E67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Number of temporal samples. A larger value results in a smoother image but takes longer to converge; whereas a smaller value converges fast but allows for less subpixel information.")]
			[Range(4f, 64f)]
			public int sampleCount;
		}

		[Serializable]
		[Token(Token = "0x200026A")]
		public struct SharpenFilterSettings
		{
			[Token(Token = "0x4000E68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Range(0f, 3f)]
			[Tooltip("Controls the amount of sharpening applied to the color buffer.")]
			public float amount;
		}

		[Serializable]
		[Token(Token = "0x200026B")]
		public struct BlendSettings
		{
			[Token(Token = "0x4000E69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("The blend coefficient for a stationary fragment. Controls the percentage of history sample blended into the final color.")]
			[Range(0f, 0.99f)]
			public float stationary;

			[Token(Token = "0x4000E6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			[Tooltip("The blend coefficient for a fragment with significant motion. Controls the percentage of history sample blended into the final color.")]
			[Range(0f, 0.99f)]
			public float moving;

			[Token(Token = "0x4000E6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[Tooltip("Amount of motion amplification in percentage. A higher value will make the final blend more sensitive to smaller motion, but might result in more aliased output; while a smaller value might desensitivize the algorithm resulting in a blurry output.")]
			[Range(30f, 100f)]
			public float motionAmplification;
		}

		[Serializable]
		[Token(Token = "0x200026C")]
		public struct DebugSettings
		{
			[Token(Token = "0x4000E6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[Tooltip("Forces the game view to update automatically while not in play mode.")]
			public bool forceRepaint;
		}

		[Serializable]
		[Token(Token = "0x200026D")]
		public class Settings
		{
			[Token(Token = "0x200026E")]
			[AttributeUsage(AttributeTargets.Field)]
			public class LayoutAttribute : PropertyAttribute
			{
				[Token(Token = "0x6000DF3")]
				[Address(RVA = "0xB01A54", Offset = "0xB01A54", VA = "0xB01A54")]
				public LayoutAttribute()
				{
				}
			}

			[Token(Token = "0x4000E6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			[Layout]
			public JitterSettings jitterSettings;

			[Token(Token = "0x4000E6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[Layout]
			public SharpenFilterSettings sharpenFilterSettings;

			[Token(Token = "0x4000E6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			[Layout]
			public BlendSettings blendSettings;

			[Token(Token = "0x4000E70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			[Layout]
			public DebugSettings debugSettings;

			[Token(Token = "0x1700016B")]
			public static Settings defaultSettings
			{
				[Token(Token = "0x6000DF1")]
				[Address(RVA = "0xB019C8", Offset = "0xB019C8", VA = "0xB019C8")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000DF2")]
			[Address(RVA = "0xB01A4C", Offset = "0xB01A4C", VA = "0xB01A4C")]
			public Settings()
			{
			}
		}

		[Token(Token = "0x4000E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Settings settings;

		[Token(Token = "0x4000E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Shader m_Shader;

		[Token(Token = "0x4000E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material m_Material;

		[Token(Token = "0x4000E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Camera m_Camera;

		[Token(Token = "0x4000E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RenderTexture m_History;

		[Token(Token = "0x4000E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int m_SampleIndex;

		[Token(Token = "0x17000168")]
		public Shader shader
		{
			[Token(Token = "0x6000DE3")]
			[Address(RVA = "0xB0080C", Offset = "0xB0080C", VA = "0xB0080C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000169")]
		public Material material
		{
			[Token(Token = "0x6000DE4")]
			[Address(RVA = "0xB008A8", Offset = "0xB008A8", VA = "0xB008A8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016A")]
		public Camera camera_
		{
			[Token(Token = "0x6000DE5")]
			[Address(RVA = "0xB009D0", Offset = "0xB009D0", VA = "0xB009D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0xB00A78", Offset = "0xB00A78", VA = "0xB00A78")]
		private void RenderFullScreenQuad(int pass)
		{
		}

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0xB00B7C", Offset = "0xB00B7C", VA = "0xB00B7C")]
		private float GetHaltonValue(int index, int radix)
		{
			return default(float);
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0xB00BC0", Offset = "0xB00BC0", VA = "0xB00BC0")]
		private Vector2 GenerateRandomOffset()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0xB00C70", Offset = "0xB00C70", VA = "0xB00C70")]
		private Matrix4x4 GetPerspectiveProjectionMatrix(Vector2 offset)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0xB01058", Offset = "0xB01058", VA = "0xB01058")]
		private Matrix4x4 GetOrthographicProjectionMatrix(Vector2 offset)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0xB01198", Offset = "0xB01198", VA = "0xB01198")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0xB011D4", Offset = "0xB011D4", VA = "0xB011D4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000DED")]
		[Address(RVA = "0xB01294", Offset = "0xB01294", VA = "0xB01294")]
		private void OnPreCull()
		{
		}

		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0xB0146C", Offset = "0xB0146C", VA = "0xB0146C")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000DEF")]
		[Address(RVA = "0xB01980", Offset = "0xB01980", VA = "0xB01980")]
		public void OnPostRender()
		{
		}

		[Token(Token = "0x6000DF0")]
		[Address(RVA = "0xB0199C", Offset = "0xB0199C", VA = "0xB0199C")]
		public TemporalAntiAliasing()
		{
		}
	}
}
namespace UnityStandardAssets.ImageEffects
{
	[Token(Token = "0x200026F")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	[AddComponentMenu("Image Effects/Camera/Depth of Field (Lens Blur, Scatter, DX11)")]
	public class DepthOfField : PostEffectsBase
	{
		[Token(Token = "0x2000270")]
		public enum BlurType
		{
			[Token(Token = "0x4000E8A")]
			DiscBlur,
			[Token(Token = "0x4000E8B")]
			DX11
		}

		[Token(Token = "0x2000271")]
		public enum BlurSampleCount
		{
			[Token(Token = "0x4000E8D")]
			Low,
			[Token(Token = "0x4000E8E")]
			Medium,
			[Token(Token = "0x4000E8F")]
			High
		}

		[Token(Token = "0x4000E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool visualizeFocus;

		[Token(Token = "0x4000E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float focalLength;

		[Token(Token = "0x4000E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float focalSize;

		[Token(Token = "0x4000E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float aperture;

		[Token(Token = "0x4000E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform focalTransform;

		[Token(Token = "0x4000E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float maxBlurSize;

		[Token(Token = "0x4000E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool highResolution;

		[Token(Token = "0x4000E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public BlurType blurType;

		[Token(Token = "0x4000E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public BlurSampleCount blurSampleCount;

		[Token(Token = "0x4000E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool nearBlur;

		[Token(Token = "0x4000E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float foregroundOverlap;

		[Token(Token = "0x4000E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader dofHdrShader;

		[Token(Token = "0x4000E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material dofHdrMaterial;

		[Token(Token = "0x4000E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader dx11BokehShader;

		[Token(Token = "0x4000E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material dx11bokehMaterial;

		[Token(Token = "0x4000E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float dx11BokehThreshold;

		[Token(Token = "0x4000E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float dx11SpawnHeuristic;

		[Token(Token = "0x4000E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Texture2D dx11BokehTexture;

		[Token(Token = "0x4000E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float dx11BokehScale;

		[Token(Token = "0x4000E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float dx11BokehIntensity;

		[Token(Token = "0x4000E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float focalDistance01;

		[Token(Token = "0x4000E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private ComputeBuffer cbDrawArgs;

		[Token(Token = "0x4000E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private ComputeBuffer cbPoints;

		[Token(Token = "0x4000E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float internalBlurWidth;

		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0xB01A5C", Offset = "0xB01A5C", VA = "0xB01A5C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DF5")]
		[Address(RVA = "0xB01C5C", Offset = "0xB01C5C", VA = "0xB01C5C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000DF6")]
		[Address(RVA = "0xB01CC8", Offset = "0xB01CC8", VA = "0xB01CC8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0xB01DC0", Offset = "0xB01DC0", VA = "0xB01DC0")]
		private void ReleaseComputeResources()
		{
		}

		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0xB01B14", Offset = "0xB01B14", VA = "0xB01B14")]
		private void CreateComputeResources()
		{
		}

		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0xB01E18", Offset = "0xB01E18", VA = "0xB01E18")]
		private float FocalDistance01(float worldDist)
		{
			return default(float);
		}

		[Token(Token = "0x6000DFA")]
		[Address(RVA = "0xB01F64", Offset = "0xB01F64", VA = "0xB01F64")]
		private void WriteCoc(RenderTexture fromTo, bool fgDilate)
		{
		}

		[Token(Token = "0x6000DFB")]
		[Address(RVA = "0xB02234", Offset = "0xB02234", VA = "0xB02234")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000DFC")]
		[Address(RVA = "0xB03558", Offset = "0xB03558", VA = "0xB03558")]
		public DepthOfField()
		{
		}
	}
	[Token(Token = "0x2000272")]
	public enum AAMode
	{
		[Token(Token = "0x4000E91")]
		FXAA2,
		[Token(Token = "0x4000E92")]
		FXAA3Console,
		[Token(Token = "0x4000E93")]
		FXAA1PresetA,
		[Token(Token = "0x4000E94")]
		FXAA1PresetB,
		[Token(Token = "0x4000E95")]
		NFAA,
		[Token(Token = "0x4000E96")]
		SSAA,
		[Token(Token = "0x4000E97")]
		DLAA
	}
	[Token(Token = "0x2000273")]
	[ExecuteInEditMode]
	[AddComponentMenu("Image Effects/Other/Antialiasing")]
	[RequireComponent(typeof(Camera))]
	public class Antialiasing : PostEffectsBase
	{
		[Token(Token = "0x4000E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AAMode mode;

		[Token(Token = "0x4000E99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool showGeneratedNormals;

		[Token(Token = "0x4000E9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float offsetScale;

		[Token(Token = "0x4000E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float blurRadius;

		[Token(Token = "0x4000E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float edgeThresholdMin;

		[Token(Token = "0x4000E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float edgeThreshold;

		[Token(Token = "0x4000E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float edgeSharpness;

		[Token(Token = "0x4000E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool dlaaSharp;

		[Token(Token = "0x4000EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader ssaaShader;

		[Token(Token = "0x4000EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material ssaa;

		[Token(Token = "0x4000EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader dlaaShader;

		[Token(Token = "0x4000EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material dlaa;

		[Token(Token = "0x4000EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Shader nfaaShader;

		[Token(Token = "0x4000EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material nfaa;

		[Token(Token = "0x4000EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Shader shaderFXAAPreset2;

		[Token(Token = "0x4000EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material materialFXAAPreset2;

		[Token(Token = "0x4000EA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Shader shaderFXAAPreset3;

		[Token(Token = "0x4000EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Material materialFXAAPreset3;

		[Token(Token = "0x4000EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Shader shaderFXAAII;

		[Token(Token = "0x4000EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Material materialFXAAII;

		[Token(Token = "0x4000EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Shader shaderFXAAIII;

		[Token(Token = "0x4000EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Material materialFXAAIII;

		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0xB045B0", Offset = "0xB045B0", VA = "0xB045B0")]
		public Material CurrentAAMaterial()
		{
			return null;
		}

		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0xB04618", Offset = "0xB04618", VA = "0xB04618", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0xB04B2C", Offset = "0xB04B2C", VA = "0xB04B2C")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0xB04FF0", Offset = "0xB04FF0", VA = "0xB04FF0")]
		public Antialiasing()
		{
		}
	}
	[Token(Token = "0x2000274")]
	[ExecuteInEditMode]
	[AddComponentMenu("Image Effects/Bloom and Glow/Bloom")]
	[RequireComponent(typeof(Camera))]
	public class Bloom : PostEffectsBase
	{
		[Token(Token = "0x2000275")]
		public enum LensFlareStyle
		{
			[Token(Token = "0x4000ECD")]
			Ghosting,
			[Token(Token = "0x4000ECE")]
			Anamorphic,
			[Token(Token = "0x4000ECF")]
			Combined
		}

		[Token(Token = "0x2000276")]
		public enum TweakMode
		{
			[Token(Token = "0x4000ED1")]
			Basic,
			[Token(Token = "0x4000ED2")]
			Complex
		}

		[Token(Token = "0x2000277")]
		public enum HDRBloomMode
		{
			[Token(Token = "0x4000ED4")]
			Auto,
			[Token(Token = "0x4000ED5")]
			On,
			[Token(Token = "0x4000ED6")]
			Off
		}

		[Token(Token = "0x2000278")]
		public enum BloomScreenBlendMode
		{
			[Token(Token = "0x4000ED8")]
			Screen,
			[Token(Token = "0x4000ED9")]
			Add
		}

		[Token(Token = "0x2000279")]
		public enum BloomQuality
		{
			[Token(Token = "0x4000EDB")]
			Cheap,
			[Token(Token = "0x4000EDC")]
			High
		}

		[Token(Token = "0x4000EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TweakMode tweakMode;

		[Token(Token = "0x4000EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BloomScreenBlendMode screenBlendMode;

		[Token(Token = "0x4000EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public HDRBloomMode hdr;

		[Token(Token = "0x4000EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool doHdr;

		[Token(Token = "0x4000EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float sepBlurSpread;

		[Token(Token = "0x4000EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BloomQuality quality;

		[Token(Token = "0x4000EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float bloomIntensity;

		[Token(Token = "0x4000EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float bloomThreshold;

		[Token(Token = "0x4000EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Color bloomThresholdColor;

		[Token(Token = "0x4000EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int bloomBlurIterations;

		[Token(Token = "0x4000EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int hollywoodFlareBlurIterations;

		[Token(Token = "0x4000EB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float flareRotation;

		[Token(Token = "0x4000EBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public LensFlareStyle lensflareMode;

		[Token(Token = "0x4000EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float hollyStretchWidth;

		[Token(Token = "0x4000EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float lensflareIntensity;

		[Token(Token = "0x4000EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float lensflareThreshold;

		[Token(Token = "0x4000EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float lensFlareSaturation;

		[Token(Token = "0x4000EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Color flareColorA;

		[Token(Token = "0x4000EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public Color flareColorB;

		[Token(Token = "0x4000EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public Color flareColorC;

		[Token(Token = "0x4000EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public Color flareColorD;

		[Token(Token = "0x4000EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Texture2D lensFlareVignetteMask;

		[Token(Token = "0x4000EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Shader lensFlareShader;

		[Token(Token = "0x4000EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Material lensFlareMaterial;

		[Token(Token = "0x4000EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Shader screenBlendShader;

		[Token(Token = "0x4000EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Material screenBlend;

		[Token(Token = "0x4000EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Shader blurAndFlaresShader;

		[Token(Token = "0x4000EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Material blurAndFlaresMaterial;

		[Token(Token = "0x4000ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Shader brightPassFilterShader;

		[Token(Token = "0x4000ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Material brightPassFilterMaterial;

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0xB05030", Offset = "0xB05030", VA = "0xB05030", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E02")]
		[Address(RVA = "0xB05510", Offset = "0xB05510", VA = "0xB05510")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E03")]
		[Address(RVA = "0xB06680", Offset = "0xB06680", VA = "0xB06680")]
		private void AddTo(float intensity_, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6000E04")]
		[Address(RVA = "0xB064E8", Offset = "0xB064E8", VA = "0xB064E8")]
		private void BlendFlares(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6000E05")]
		[Address(RVA = "0xB0623C", Offset = "0xB0623C", VA = "0xB0623C")]
		private void BrightFilter(float thresh, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6000E06")]
		[Address(RVA = "0xB06168", Offset = "0xB06168", VA = "0xB06168")]
		private void BrightFilter(Color threshColor, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6000E07")]
		[Address(RVA = "0xB062FC", Offset = "0xB062FC", VA = "0xB062FC")]
		private void Vignette(float amount, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6000E08")]
		[Address(RVA = "0xB06744", Offset = "0xB06744", VA = "0xB06744")]
		public Bloom()
		{
		}
	}
	[Token(Token = "0x200027A")]
	public enum LensflareStyle34
	{
		[Token(Token = "0x4000EDE")]
		Ghosting,
		[Token(Token = "0x4000EDF")]
		Anamorphic,
		[Token(Token = "0x4000EE0")]
		Combined
	}
	[Token(Token = "0x200027B")]
	public enum TweakMode34
	{
		[Token(Token = "0x4000EE2")]
		Basic,
		[Token(Token = "0x4000EE3")]
		Complex
	}
	[Token(Token = "0x200027C")]
	public enum HDRBloomMode
	{
		[Token(Token = "0x4000EE5")]
		Auto,
		[Token(Token = "0x4000EE6")]
		On,
		[Token(Token = "0x4000EE7")]
		Off
	}
	[Token(Token = "0x200027D")]
	public enum BloomScreenBlendMode
	{
		[Token(Token = "0x4000EE9")]
		Screen,
		[Token(Token = "0x4000EEA")]
		Add
	}
	[Token(Token = "0x200027E")]
	[RequireComponent(typeof(Camera))]
	[AddComponentMenu("Image Effects/Bloom and Glow/BloomAndFlares (3.5, Deprecated)")]
	[ExecuteInEditMode]
	public class BloomAndFlares : PostEffectsBase
	{
		[Token(Token = "0x4000EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TweakMode34 tweakMode;

		[Token(Token = "0x4000EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BloomScreenBlendMode screenBlendMode;

		[Token(Token = "0x4000EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public HDRBloomMode hdr;

		[Token(Token = "0x4000EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool doHdr;

		[Token(Token = "0x4000EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float sepBlurSpread;

		[Token(Token = "0x4000EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float useSrcAlphaAsMask;

		[Token(Token = "0x4000EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float bloomIntensity;

		[Token(Token = "0x4000EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float bloomThreshold;

		[Token(Token = "0x4000EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int bloomBlurIterations;

		[Token(Token = "0x4000EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool lensflares;

		[Token(Token = "0x4000EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int hollywoodFlareBlurIterations;

		[Token(Token = "0x4000EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public LensflareStyle34 lensflareMode;

		[Token(Token = "0x4000EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float hollyStretchWidth;

		[Token(Token = "0x4000EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float lensflareIntensity;

		[Token(Token = "0x4000EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float lensflareThreshold;

		[Token(Token = "0x4000EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Color flareColorA;

		[Token(Token = "0x4000EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Color flareColorB;

		[Token(Token = "0x4000EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Color flareColorC;

		[Token(Token = "0x4000EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Color flareColorD;

		[Token(Token = "0x4000EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Texture2D lensFlareVignetteMask;

		[Token(Token = "0x4000EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Shader lensFlareShader;

		[Token(Token = "0x4000F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Material lensFlareMaterial;

		[Token(Token = "0x4000F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Shader vignetteShader;

		[Token(Token = "0x4000F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Material vignetteMaterial;

		[Token(Token = "0x4000F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Shader separableBlurShader;

		[Token(Token = "0x4000F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Material separableBlurMaterial;

		[Token(Token = "0x4000F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Shader addBrightStuffOneOneShader;

		[Token(Token = "0x4000F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Material addBrightStuffBlendOneOneMaterial;

		[Token(Token = "0x4000F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Shader screenBlendShader;

		[Token(Token = "0x4000F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Material screenBlend;

		[Token(Token = "0x4000F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Shader hollywoodFlaresShader;

		[Token(Token = "0x4000F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Material hollywoodFlaresMaterial;

		[Token(Token = "0x4000F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Shader brightPassFilterShader;

		[Token(Token = "0x4000F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Material brightPassFilterMaterial;

		[Token(Token = "0x6000E09")]
		[Address(RVA = "0xB067D4", Offset = "0xB067D4", VA = "0xB067D4", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E0A")]
		[Address(RVA = "0xB06910", Offset = "0xB06910", VA = "0xB06910")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0xB076D0", Offset = "0xB076D0", VA = "0xB076D0")]
		private void AddTo(float intensity_, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6000E0C")]
		[Address(RVA = "0xB07548", Offset = "0xB07548", VA = "0xB07548")]
		private void BlendFlares(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6000E0D")]
		[Address(RVA = "0xB072F0", Offset = "0xB072F0", VA = "0xB072F0")]
		private void BrightFilter(float thresh, float useAlphaAsMask, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6000E0E")]
		[Address(RVA = "0xB073F8", Offset = "0xB073F8", VA = "0xB073F8")]
		private void Vignette(float amount, RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6000E0F")]
		[Address(RVA = "0xB07780", Offset = "0xB07780", VA = "0xB07780")]
		public BloomAndFlares()
		{
		}
	}
	[Token(Token = "0x200027F")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	[AddComponentMenu("Image Effects/Bloom and Glow/Bloom (Optimized)")]
	public class BloomOptimized : PostEffectsBase
	{
		[Token(Token = "0x2000280")]
		public enum Resolution
		{
			[Token(Token = "0x4000F16")]
			Low,
			[Token(Token = "0x4000F17")]
			High
		}

		[Token(Token = "0x2000281")]
		public enum BlurType
		{
			[Token(Token = "0x4000F19")]
			Standard,
			[Token(Token = "0x4000F1A")]
			Sgx
		}

		[Token(Token = "0x4000F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1.5f)]
		public float threshold;

		[Token(Token = "0x4000F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 2.5f)]
		public float intensity;

		[Token(Token = "0x4000F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0.25f, 5.5f)]
		public float blurSize;

		[Token(Token = "0x4000F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Resolution resolution;

		[Token(Token = "0x4000F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(1f, 4f)]
		public int blurIterations;

		[Token(Token = "0x4000F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BlurType blurType;

		[Token(Token = "0x4000F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader fastBloomShader;

		[Token(Token = "0x4000F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material fastBloomMaterial;

		[Token(Token = "0x6000E10")]
		[Address(RVA = "0xB077FC", Offset = "0xB077FC", VA = "0xB077FC", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E11")]
		[Address(RVA = "0xB07864", Offset = "0xB07864", VA = "0xB07864")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000E12")]
		[Address(RVA = "0xB078F0", Offset = "0xB078F0", VA = "0xB078F0")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E13")]
		[Address(RVA = "0xB07C60", Offset = "0xB07C60", VA = "0xB07C60")]
		public BloomOptimized()
		{
		}
	}
	[Token(Token = "0x2000282")]
	[ExecuteInEditMode]
	[AddComponentMenu("Image Effects/Blur/Blur")]
	public class Blur : MonoBehaviour
	{
		[Token(Token = "0x4000F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int iterations;

		[Token(Token = "0x4000F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float blurSpread;

		[Token(Token = "0x4000F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Shader blurShader;

		[Token(Token = "0x4000F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Material m_Material;

		[Token(Token = "0x1700016C")]
		protected Material material
		{
			[Token(Token = "0x6000E14")]
			[Address(RVA = "0xB07C8C", Offset = "0xB07C8C", VA = "0xB07C8C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E15")]
		[Address(RVA = "0xB07D94", Offset = "0xB07D94", VA = "0xB07D94")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x6000E16")]
		[Address(RVA = "0xB07E40", Offset = "0xB07E40", VA = "0xB07E40")]
		protected void Start()
		{
		}

		[Token(Token = "0x6000E17")]
		[Address(RVA = "0xB07EF0", Offset = "0xB07EF0", VA = "0xB07EF0")]
		public void FourTapCone(RenderTexture source, RenderTexture dest, int iteration)
		{
		}

		[Token(Token = "0x6000E18")]
		[Address(RVA = "0xB08000", Offset = "0xB08000", VA = "0xB08000")]
		private void DownSample4x(RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x6000E19")]
		[Address(RVA = "0xB080FC", Offset = "0xB080FC", VA = "0xB080FC")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E1A")]
		[Address(RVA = "0xB08258", Offset = "0xB08258", VA = "0xB08258")]
		public Blur()
		{
		}
	}
	[Token(Token = "0x2000283")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	[AddComponentMenu("Image Effects/Blur/Blur (Optimized)")]
	public class BlurOptimized : PostEffectsBase
	{
		[Token(Token = "0x2000284")]
		public enum BlurType
		{
			[Token(Token = "0x4000F26")]
			StandardGauss,
			[Token(Token = "0x4000F27")]
			SgxGauss
		}

		[Token(Token = "0x4000F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 2f)]
		public int downsample;

		[Token(Token = "0x4000F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 10f)]
		public float blurSize;

		[Token(Token = "0x4000F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(1f, 4f)]
		public int blurIterations;

		[Token(Token = "0x4000F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BlurType blurType;

		[Token(Token = "0x4000F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader blurShader;

		[Token(Token = "0x4000F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material blurMaterial;

		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0xB08270", Offset = "0xB08270", VA = "0xB08270", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E1C")]
		[Address(RVA = "0xB082D8", Offset = "0xB082D8", VA = "0xB082D8")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6000E1D")]
		[Address(RVA = "0xB08364", Offset = "0xB08364", VA = "0xB08364")]
		public void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0xB0868C", Offset = "0xB0868C", VA = "0xB0868C")]
		public BlurOptimized()
		{
		}
	}
	[Token(Token = "0x2000285")]
	[AddComponentMenu("Image Effects/Camera/Camera Motion Blur")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	public class CameraMotionBlur : PostEffectsBase
	{
		[Token(Token = "0x2000286")]
		public enum MotionBlurFilter
		{
			[Token(Token = "0x4000F47")]
			CameraMotion,
			[Token(Token = "0x4000F48")]
			LocalBlur,
			[Token(Token = "0x4000F49")]
			Reconstruction,
			[Token(Token = "0x4000F4A")]
			ReconstructionDX11,
			[Token(Token = "0x4000F4B")]
			ReconstructionDisc
		}

		[Token(Token = "0x4000F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float MAX_RADIUS;

		[Token(Token = "0x4000F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public MotionBlurFilter filterType;

		[Token(Token = "0x4000F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool preview;

		[Token(Token = "0x4000F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 previewScale;

		[Token(Token = "0x4000F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float movementScale;

		[Token(Token = "0x4000F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float rotationScale;

		[Token(Token = "0x4000F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float maxVelocity;

		[Token(Token = "0x4000F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float minVelocity;

		[Token(Token = "0x4000F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float velocityScale;

		[Token(Token = "0x4000F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float softZDistance;

		[Token(Token = "0x4000F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int velocityDownsample;

		[Token(Token = "0x4000F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public LayerMask excludeLayers;

		[Token(Token = "0x4000F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GameObject tmpCam;

		[Token(Token = "0x4000F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader shader;

		[Token(Token = "0x4000F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Shader dx11MotionBlurShader;

		[Token(Token = "0x4000F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader replacementClear;

		[Token(Token = "0x4000F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material motionBlurMaterial;

		[Token(Token = "0x4000F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material dx11MotionBlurMaterial;

		[Token(Token = "0x4000F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Texture2D noiseTexture;

		[Token(Token = "0x4000F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float jitter;

		[Token(Token = "0x4000F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public bool showVelocity;

		[Token(Token = "0x4000F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float showVelocityScale;

		[Token(Token = "0x4000F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Matrix4x4 currentViewProjMat;

		[Token(Token = "0x4000F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private Matrix4x4 prevViewProjMat;

		[Token(Token = "0x4000F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private int prevFrameCount;

		[Token(Token = "0x4000F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private bool wasActive;

		[Token(Token = "0x4000F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private Vector3 prevFrameForward;

		[Token(Token = "0x4000F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Vector3 prevFrameUp;

		[Token(Token = "0x4000F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		private Vector3 prevFramePos;

		[Token(Token = "0x4000F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Camera _camera;

		[Token(Token = "0x6000E1F")]
		[Address(RVA = "0xB086B4", Offset = "0xB086B4", VA = "0xB086B4")]
		private void CalculateViewProjection()
		{
		}

		[Token(Token = "0x6000E20")]
		[Address(RVA = "0xB087B8", Offset = "0xB087B8", VA = "0xB087B8")]
		private new void Start()
		{
		}

		[Token(Token = "0x6000E21")]
		[Address(RVA = "0xB0893C", Offset = "0xB0893C", VA = "0xB0893C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E22")]
		[Address(RVA = "0xB089FC", Offset = "0xB089FC", VA = "0xB089FC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000E23")]
		[Address(RVA = "0xB08B60", Offset = "0xB08B60", VA = "0xB08B60", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E24")]
		[Address(RVA = "0xB08C5C", Offset = "0xB08C5C", VA = "0xB08C5C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E25")]
		[Address(RVA = "0xB0889C", Offset = "0xB0889C", VA = "0xB0889C")]
		private void Remember()
		{
		}

		[Token(Token = "0x6000E26")]
		[Address(RVA = "0xB0A40C", Offset = "0xB0A40C", VA = "0xB0A40C")]
		private Camera GetTmpCam()
		{
			return null;
		}

		[Token(Token = "0x6000E27")]
		[Address(RVA = "0xB0A388", Offset = "0xB0A388", VA = "0xB0A388")]
		private void StartFrame()
		{
		}

		[Token(Token = "0x6000E28")]
		[Address(RVA = "0xB0A3FC", Offset = "0xB0A3FC", VA = "0xB0A3FC")]
		private static int divRoundUp(int x, int d)
		{
			return default(int);
		}

		[Token(Token = "0x6000E29")]
		[Address(RVA = "0xB0A7A0", Offset = "0xB0A7A0", VA = "0xB0A7A0")]
		public CameraMotionBlur()
		{
		}
	}
	[Token(Token = "0x2000287")]
	[AddComponentMenu("Image Effects/Color Adjustments/Color Correction (Curves, Saturation)")]
	[ExecuteInEditMode]
	public class ColorCorrectionCurves : PostEffectsBase
	{
		[Token(Token = "0x2000288")]
		public enum ColorCorrectionMode
		{
			[Token(Token = "0x4000F65")]
			Simple,
			[Token(Token = "0x4000F66")]
			Advanced
		}

		[Token(Token = "0x4000F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AnimationCurve redChannel;

		[Token(Token = "0x4000F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve greenChannel;

		[Token(Token = "0x4000F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimationCurve blueChannel;

		[Token(Token = "0x4000F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool useDepthCorrection;

		[Token(Token = "0x4000F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationCurve zCurve;

		[Token(Token = "0x4000F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AnimationCurve depthRedChannel;

		[Token(Token = "0x4000F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve depthGreenChannel;

		[Token(Token = "0x4000F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AnimationCurve depthBlueChannel;

		[Token(Token = "0x4000F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material ccMaterial;

		[Token(Token = "0x4000F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material ccDepthMaterial;

		[Token(Token = "0x4000F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material selectiveCcMaterial;

		[Token(Token = "0x4000F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Texture2D rgbChannelTex;

		[Token(Token = "0x4000F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Texture2D rgbDepthChannelTex;

		[Token(Token = "0x4000F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Texture2D zCurveTex;

		[Token(Token = "0x4000F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float saturation;

		[Token(Token = "0x4000F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public bool selectiveCc;

		[Token(Token = "0x4000F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Color selectiveFromColor;

		[Token(Token = "0x4000F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Color selectiveToColor;

		[Token(Token = "0x4000F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public ColorCorrectionMode mode;

		[Token(Token = "0x4000F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public bool updateTextures;

		[Token(Token = "0x4000F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Shader colorCorrectionCurvesShader;

		[Token(Token = "0x4000F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Shader simpleColorCorrectionCurvesShader;

		[Token(Token = "0x4000F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Shader colorCorrectionSelectiveShader;

		[Token(Token = "0x4000F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool updateTexturesOnStartup;

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0xB0A94C", Offset = "0xB0A94C", VA = "0xB0A94C")]
		private new void Start()
		{
		}

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0xB0A97C", Offset = "0xB0A97C", VA = "0xB0A97C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0xB0A980", Offset = "0xB0A980", VA = "0xB0A980", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0xB0AC30", Offset = "0xB0AC30", VA = "0xB0AC30")]
		public void UpdateParameters()
		{
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0xB0AF24", Offset = "0xB0AF24", VA = "0xB0AF24")]
		private void UpdateTextures()
		{
		}

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0xB0AF28", Offset = "0xB0AF28", VA = "0xB0AF28")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0xB0B234", Offset = "0xB0B234", VA = "0xB0B234")]
		public ColorCorrectionCurves()
		{
		}
	}
	[Token(Token = "0x2000289")]
	[ExecuteInEditMode]
	[AddComponentMenu("Image Effects/Color Adjustments/Color Correction (3D Lookup Texture)")]
	public class ColorCorrectionLookup : PostEffectsBase
	{
		[Token(Token = "0x4000F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Shader shader;

		[Token(Token = "0x4000F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material material;

		[Token(Token = "0x4000F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Texture3D converted3DLut;

		[Token(Token = "0x4000F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string basedOnTempTex;

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0xB0B8CC", Offset = "0xB0B8CC", VA = "0xB0B8CC", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0xB0B930", Offset = "0xB0B930", VA = "0xB0B930")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000E34")]
		[Address(RVA = "0xB0B9CC", Offset = "0xB0B9CC", VA = "0xB0B9CC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000E35")]
		[Address(RVA = "0xB0BA5C", Offset = "0xB0BA5C", VA = "0xB0BA5C")]
		public void SetIdentityLut()
		{
		}

		[Token(Token = "0x6000E36")]
		[Address(RVA = "0xB0BC58", Offset = "0xB0BC58", VA = "0xB0BC58")]
		public bool ValidDimensions(Texture2D tex2d)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0xB0BD58", Offset = "0xB0BD58", VA = "0xB0BD58")]
		public void Convert(Texture2D temp2DTex, string path)
		{
		}

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0xB0C0A0", Offset = "0xB0C0A0", VA = "0xB0C0A0")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E39")]
		[Address(RVA = "0xB0C294", Offset = "0xB0C294", VA = "0xB0C294")]
		public ColorCorrectionLookup()
		{
		}
	}
	[Token(Token = "0x200028A")]
	[ExecuteInEditMode]
	[AddComponentMenu("Image Effects/Color Adjustments/Color Correction (Ramp)")]
	public class ColorCorrectionRamp : ImageEffectBase
	{
		[Token(Token = "0x4000F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Texture textureRamp;

		[Token(Token = "0x6000E3A")]
		[Address(RVA = "0xB0C2F8", Offset = "0xB0C2F8", VA = "0xB0C2F8")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E3B")]
		[Address(RVA = "0xB0C480", Offset = "0xB0C480", VA = "0xB0C480")]
		public ColorCorrectionRamp()
		{
		}
	}
	[Token(Token = "0x200028B")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	[AddComponentMenu("Image Effects/Color Adjustments/Contrast Enhance (Unsharp Mask)")]
	internal class ContrastEnhance : PostEffectsBase
	{
		[Token(Token = "0x4000F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float intensity;

		[Token(Token = "0x4000F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float threshold;

		[Token(Token = "0x4000F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material separableBlurMaterial;

		[Token(Token = "0x4000F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material contrastCompositeMaterial;

		[Token(Token = "0x4000F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float blurSpread;

		[Token(Token = "0x4000F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader separableBlurShader;

		[Token(Token = "0x4000F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader contrastCompositeShader;

		[Token(Token = "0x6000E3C")]
		[Address(RVA = "0xB0C490", Offset = "0xB0C490", VA = "0xB0C490", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E3D")]
		[Address(RVA = "0xB0C51C", Offset = "0xB0C51C", VA = "0xB0C51C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E3E")]
		[Address(RVA = "0xB0C848", Offset = "0xB0C848", VA = "0xB0C848")]
		public ContrastEnhance()
		{
		}
	}
	[Token(Token = "0x200028C")]
	[ExecuteInEditMode]
	[AddComponentMenu("Image Effects/Color Adjustments/Contrast Stretch")]
	public class ContrastStretch : MonoBehaviour
	{
		[Token(Token = "0x4000F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float adaptationSpeed;

		[Token(Token = "0x4000F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float limitMinimum;

		[Token(Token = "0x4000F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float limitMaximum;

		[Token(Token = "0x4000F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private RenderTexture[] adaptRenderTex;

		[Token(Token = "0x4000F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int curAdaptIndex;

		[Token(Token = "0x4000F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader shaderLum;

		[Token(Token = "0x4000F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material m_materialLum;

		[Token(Token = "0x4000F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader shaderReduce;

		[Token(Token = "0x4000F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material m_materialReduce;

		[Token(Token = "0x4000F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Shader shaderAdapt;

		[Token(Token = "0x4000F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material m_materialAdapt;

		[Token(Token = "0x4000F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader shaderApply;

		[Token(Token = "0x4000F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material m_materialApply;

		[Token(Token = "0x1700016D")]
		protected Material materialLum
		{
			[Token(Token = "0x6000E3F")]
			[Address(RVA = "0xB0C86C", Offset = "0xB0C86C", VA = "0xB0C86C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016E")]
		protected Material materialReduce
		{
			[Token(Token = "0x6000E40")]
			[Address(RVA = "0xB0C940", Offset = "0xB0C940", VA = "0xB0C940")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016F")]
		protected Material materialAdapt
		{
			[Token(Token = "0x6000E41")]
			[Address(RVA = "0xB0CA14", Offset = "0xB0CA14", VA = "0xB0CA14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000170")]
		protected Material materialApply
		{
			[Token(Token = "0x6000E42")]
			[Address(RVA = "0xB0CAE8", Offset = "0xB0CAE8", VA = "0xB0CAE8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E43")]
		[Address(RVA = "0xB0CBBC", Offset = "0xB0CBBC", VA = "0xB0CBBC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E44")]
		[Address(RVA = "0xB0CC40", Offset = "0xB0CC40", VA = "0xB0CC40")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E45")]
		[Address(RVA = "0xB0CD8C", Offset = "0xB0CD8C", VA = "0xB0CD8C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000E46")]
		[Address(RVA = "0xB0CF68", Offset = "0xB0CF68", VA = "0xB0CF68")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E47")]
		[Address(RVA = "0xB0D1A8", Offset = "0xB0D1A8", VA = "0xB0D1A8")]
		private void CalculateAdaptation(Texture curTexture)
		{
		}

		[Token(Token = "0x6000E48")]
		[Address(RVA = "0xB0D360", Offset = "0xB0D360", VA = "0xB0D360")]
		public ContrastStretch()
		{
		}
	}
	[Token(Token = "0x200028D")]
	[AddComponentMenu("Image Effects/Edge Detection/Crease Shading")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	internal class CreaseShading : PostEffectsBase
	{
		[Token(Token = "0x4000F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float intensity;

		[Token(Token = "0x4000F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int softness;

		[Token(Token = "0x4000F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float spread;

		[Token(Token = "0x4000F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader blurShader;

		[Token(Token = "0x4000F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material blurMaterial;

		[Token(Token = "0x4000F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader depthFetchShader;

		[Token(Token = "0x4000F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material depthFetchMaterial;

		[Token(Token = "0x4000F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader creaseApplyShader;

		[Token(Token = "0x4000F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material creaseApplyMaterial;

		[Token(Token = "0x6000E49")]
		[Address(RVA = "0xB0D3DC", Offset = "0xB0D3DC", VA = "0xB0D3DC", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E4A")]
		[Address(RVA = "0xB0D48C", Offset = "0xB0D48C", VA = "0xB0D48C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E4B")]
		[Address(RVA = "0xB0D804", Offset = "0xB0D804", VA = "0xB0D804")]
		public CreaseShading()
		{
		}
	}
	[Token(Token = "0x200028E")]
	[ExecuteInEditMode]
	[AddComponentMenu("Image Effects/Camera/Depth of Field (deprecated)")]
	[RequireComponent(typeof(Camera))]
	public class DepthOfFieldDeprecated : PostEffectsBase
	{
		[Token(Token = "0x200028F")]
		public enum Dof34QualitySetting
		{
			[Token(Token = "0x4000FB5")]
			OnlyBackground = 1,
			[Token(Token = "0x4000FB6")]
			BackgroundAndForeground
		}

		[Token(Token = "0x2000290")]
		public enum DofResolution
		{
			[Token(Token = "0x4000FB8")]
			High = 2,
			[Token(Token = "0x4000FB9")]
			Medium,
			[Token(Token = "0x4000FBA")]
			Low
		}

		[Token(Token = "0x2000291")]
		public enum DofBlurriness
		{
			[Token(Token = "0x4000FBC")]
			Low = 1,
			[Token(Token = "0x4000FBD")]
			High = 2,
			[Token(Token = "0x4000FBE")]
			VeryHigh = 4
		}

		[Token(Token = "0x2000292")]
		public enum BokehDestination
		{
			[Token(Token = "0x4000FC0")]
			Background = 1,
			[Token(Token = "0x4000FC1")]
			Foreground,
			[Token(Token = "0x4000FC2")]
			BackgroundAndForeground
		}

		[Token(Token = "0x4000F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int SMOOTH_DOWNSAMPLE_PASS;

		[Token(Token = "0x4000F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static float BOKEH_EXTRA_BLUR;

		[Token(Token = "0x4000F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Dof34QualitySetting quality;

		[Token(Token = "0x4000F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DofResolution resolution;

		[Token(Token = "0x4000F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool simpleTweakMode;

		[Token(Token = "0x4000F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float focalPoint;

		[Token(Token = "0x4000F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float smoothness;

		[Token(Token = "0x4000F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float focalZDistance;

		[Token(Token = "0x4000F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float focalZStartCurve;

		[Token(Token = "0x4000F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float focalZEndCurve;

		[Token(Token = "0x4000F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float focalStartCurve;

		[Token(Token = "0x4000F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float focalEndCurve;

		[Token(Token = "0x4000F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float focalDistance01;

		[Token(Token = "0x4000F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform objectFocus;

		[Token(Token = "0x4000F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float focalSize;

		[Token(Token = "0x4000F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public DofBlurriness bluriness;

		[Token(Token = "0x4000F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float maxBlurSpread;

		[Token(Token = "0x4000F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float foregroundBlurExtrude;

		[Token(Token = "0x4000F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Shader dofBlurShader;

		[Token(Token = "0x4000F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material dofBlurMaterial;

		[Token(Token = "0x4000F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Shader dofShader;

		[Token(Token = "0x4000F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material dofMaterial;

		[Token(Token = "0x4000F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool visualize;

		[Token(Token = "0x4000FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public BokehDestination bokehDestination;

		[Token(Token = "0x4000FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float widthOverHeight;

		[Token(Token = "0x4000FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float oneOverBaseSize;

		[Token(Token = "0x4000FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool bokeh;

		[Token(Token = "0x4000FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		public bool bokehSupport;

		[Token(Token = "0x4000FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Shader bokehShader;

		[Token(Token = "0x4000FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Texture2D bokehTexture;

		[Token(Token = "0x4000FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float bokehScale;

		[Token(Token = "0x4000FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float bokehIntensity;

		[Token(Token = "0x4000FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float bokehThresholdContrast;

		[Token(Token = "0x4000FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float bokehThresholdLuminance;

		[Token(Token = "0x4000FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public int bokehDownsample;

		[Token(Token = "0x4000FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Material bokehMaterial;

		[Token(Token = "0x4000FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Camera _camera;

		[Token(Token = "0x4000FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private RenderTexture foregroundTexture;

		[Token(Token = "0x4000FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private RenderTexture mediumRezWorkTexture;

		[Token(Token = "0x4000FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private RenderTexture finalDefocus;

		[Token(Token = "0x4000FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private RenderTexture lowRezWorkTexture;

		[Token(Token = "0x4000FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private RenderTexture bokehSource;

		[Token(Token = "0x4000FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private RenderTexture bokehSource2;

		[Token(Token = "0x6000E4C")]
		[Address(RVA = "0xB0D82C", Offset = "0xB0D82C", VA = "0xB0D82C")]
		private void CreateMaterials()
		{
		}

		[Token(Token = "0x6000E4D")]
		[Address(RVA = "0xB0D92C", Offset = "0xB0D92C", VA = "0xB0D92C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E4E")]
		[Address(RVA = "0xB0DA54", Offset = "0xB0DA54", VA = "0xB0DA54")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000E4F")]
		[Address(RVA = "0xB0DA5C", Offset = "0xB0DA5C", VA = "0xB0DA5C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E50")]
		[Address(RVA = "0xB0DADC", Offset = "0xB0DADC", VA = "0xB0DADC")]
		private float FocalDistance01(float worldDist)
		{
			return default(float);
		}

		[Token(Token = "0x6000E51")]
		[Address(RVA = "0xB0DBC8", Offset = "0xB0DBC8", VA = "0xB0DBC8")]
		private int GetDividerBasedOnQuality()
		{
			return default(int);
		}

		[Token(Token = "0x6000E52")]
		[Address(RVA = "0xB0DBEC", Offset = "0xB0DBEC", VA = "0xB0DBEC")]
		private int GetLowResolutionDividerBasedOnQuality(int baseDivider)
		{
			return default(int);
		}

		[Token(Token = "0x6000E53")]
		[Address(RVA = "0xB0DC10", Offset = "0xB0DC10", VA = "0xB0DC10")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E54")]
		[Address(RVA = "0xB0E97C", Offset = "0xB0E97C", VA = "0xB0E97C")]
		private void Blur(RenderTexture from, RenderTexture to, DofBlurriness iterations, int blurPass, float spread)
		{
		}

		[Token(Token = "0x6000E55")]
		[Address(RVA = "0xB0EF30", Offset = "0xB0EF30", VA = "0xB0EF30")]
		private void BlurFg(RenderTexture from, RenderTexture to, DofBlurriness iterations, int blurPass, float spread)
		{
		}

		[Token(Token = "0x6000E56")]
		[Address(RVA = "0xB0F2A4", Offset = "0xB0F2A4", VA = "0xB0F2A4")]
		private void BlurHex(RenderTexture from, RenderTexture to, int blurPass, float spread, RenderTexture tmp)
		{
		}

		[Token(Token = "0x6000E57")]
		[Address(RVA = "0xB0E854", Offset = "0xB0E854", VA = "0xB0E854")]
		private void Downsample(RenderTexture from, RenderTexture to)
		{
		}

		[Token(Token = "0x6000E58")]
		[Address(RVA = "0xB0EB5C", Offset = "0xB0EB5C", VA = "0xB0EB5C")]
		private void AddBokeh(RenderTexture bokehInfo, RenderTexture tempTex, RenderTexture finalTarget)
		{
		}

		[Token(Token = "0x6000E59")]
		[Address(RVA = "0xB0F13C", Offset = "0xB0F13C", VA = "0xB0F13C")]
		private void ReleaseTextures()
		{
		}

		[Token(Token = "0x6000E5A")]
		[Address(RVA = "0xB0E4A4", Offset = "0xB0E4A4", VA = "0xB0E4A4")]
		private void AllocateTextures(bool blurForeground, RenderTexture source, int divider, int lowTexDivider)
		{
		}

		[Token(Token = "0x6000E5B")]
		[Address(RVA = "0xB0F444", Offset = "0xB0F444", VA = "0xB0F444")]
		public DepthOfFieldDeprecated()
		{
		}
	}
	[Token(Token = "0x2000293")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	[AddComponentMenu("Image Effects/Edge Detection/Edge Detection")]
	public class EdgeDetection : PostEffectsBase
	{
		[Token(Token = "0x2000294")]
		public enum EdgeDetectMode
		{
			[Token(Token = "0x4000FCF")]
			TriangleDepthNormals,
			[Token(Token = "0x4000FD0")]
			RobertsCrossDepthNormals,
			[Token(Token = "0x4000FD1")]
			SobelDepth,
			[Token(Token = "0x4000FD2")]
			SobelDepthThin,
			[Token(Token = "0x4000FD3")]
			TriangleLuminance
		}

		[Token(Token = "0x4000FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public EdgeDetectMode mode;

		[Token(Token = "0x4000FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float sensitivityDepth;

		[Token(Token = "0x4000FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float sensitivityNormals;

		[Token(Token = "0x4000FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float lumThreshold;

		[Token(Token = "0x4000FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float edgeExp;

		[Token(Token = "0x4000FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float sampleDist;

		[Token(Token = "0x4000FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float edgesOnly;

		[Token(Token = "0x4000FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color edgesOnlyBgColor;

		[Token(Token = "0x4000FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader edgeDetectShader;

		[Token(Token = "0x4000FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Material edgeDetectMaterial;

		[Token(Token = "0x4000FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private EdgeDetectMode oldMode;

		[Token(Token = "0x6000E5D")]
		[Address(RVA = "0xB0F514", Offset = "0xB0F514", VA = "0xB0F514", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E5E")]
		[Address(RVA = "0xB0F64C", Offset = "0xB0F64C", VA = "0xB0F64C")]
		private new void Start()
		{
		}

		[Token(Token = "0x6000E5F")]
		[Address(RVA = "0xB0F59C", Offset = "0xB0F59C", VA = "0xB0F59C")]
		private void SetCameraFlag()
		{
		}

		[Token(Token = "0x6000E60")]
		[Address(RVA = "0xB0F658", Offset = "0xB0F658", VA = "0xB0F658")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E61")]
		[Address(RVA = "0xB0F65C", Offset = "0xB0F65C", VA = "0xB0F65C")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E62")]
		[Address(RVA = "0xB0F830", Offset = "0xB0F830", VA = "0xB0F830")]
		public EdgeDetection()
		{
		}
	}
	[Token(Token = "0x2000295")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	[AddComponentMenu("Image Effects/Displacement/Fisheye")]
	public class Fisheye : PostEffectsBase
	{
		[Token(Token = "0x4000FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float strengthX;

		[Token(Token = "0x4000FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float strengthY;

		[Token(Token = "0x4000FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader fishEyeShader;

		[Token(Token = "0x4000FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material fisheyeMaterial;

		[Token(Token = "0x6000E63")]
		[Address(RVA = "0xB0F86C", Offset = "0xB0F86C", VA = "0xB0F86C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E64")]
		[Address(RVA = "0xB0F8D4", Offset = "0xB0F8D4", VA = "0xB0F8D4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E65")]
		[Address(RVA = "0xB0FA08", Offset = "0xB0FA08", VA = "0xB0FA08")]
		public Fisheye()
		{
		}
	}
	[Token(Token = "0x2000296")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	[AddComponentMenu("Image Effects/Rendering/Global Fog")]
	internal class GlobalFog : PostEffectsBase
	{
		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		[Tooltip("Apply distance-based fog?")]
		public bool distanceFog;

		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Distance fog is based on radial distance from camera when checked")]
		public bool useRadialDistance;

		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		[Tooltip("Apply height-based fog?")]
		public bool heightFog;

		[Token(Token = "0x4000FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Fog top Y coordinate")]
		public float height;

		[Token(Token = "0x4000FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0.001f, 10f)]
		public float heightDensity;

		[Token(Token = "0x4000FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Push fog away from the camera by this amount")]
		public float startDistance;

		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader fogShader;

		[Token(Token = "0x4000FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material fogMaterial;

		[Token(Token = "0x6000E66")]
		[Address(RVA = "0xB0FA2C", Offset = "0xB0FA2C", VA = "0xB0FA2C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E67")]
		[Address(RVA = "0xB0FA94", Offset = "0xB0FA94", VA = "0xB0FA94")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E68")]
		[Address(RVA = "0xB103BC", Offset = "0xB103BC", VA = "0xB103BC")]
		private static void CustomGraphicsBlit(RenderTexture source, RenderTexture dest, Material fxMaterial, int passNr)
		{
		}

		[Token(Token = "0x6000E69")]
		[Address(RVA = "0xB1051C", Offset = "0xB1051C", VA = "0xB1051C")]
		public GlobalFog()
		{
		}
	}
	[Token(Token = "0x2000297")]
	[ExecuteInEditMode]
	[AddComponentMenu("Image Effects/Color Adjustments/Grayscale")]
	public class Grayscale : ImageEffectBase
	{
		[Token(Token = "0x4000FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Texture textureRamp;

		[Token(Token = "0x4000FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float rampOffset;

		[Token(Token = "0x6000E6A")]
		[Address(RVA = "0xB10544", Offset = "0xB10544", VA = "0xB10544")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E6B")]
		[Address(RVA = "0xB10628", Offset = "0xB10628", VA = "0xB10628")]
		public Grayscale()
		{
		}
	}
	[Token(Token = "0x2000298")]
	[RequireComponent(typeof(Camera))]
	[AddComponentMenu("")]
	public class ImageEffectBase : MonoBehaviour
	{
		[Token(Token = "0x4000FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Shader shader;

		[Token(Token = "0x4000FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material m_Material;

		[Token(Token = "0x17000171")]
		protected Material material
		{
			[Token(Token = "0x6000E6D")]
			[Address(RVA = "0xB0C3AC", Offset = "0xB0C3AC", VA = "0xB0C3AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E6C")]
		[Address(RVA = "0xB10630", Offset = "0xB10630", VA = "0xB10630", Slot = "4")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000E6E")]
		[Address(RVA = "0xB106D0", Offset = "0xB106D0", VA = "0xB106D0", Slot = "5")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000E6F")]
		[Address(RVA = "0xB0C488", Offset = "0xB0C488", VA = "0xB0C488")]
		public ImageEffectBase()
		{
		}
	}
	[Token(Token = "0x2000299")]
	[AddComponentMenu("")]
	public class ImageEffects
	{
		[Token(Token = "0x6000E70")]
		[Address(RVA = "0xB1075C", Offset = "0xB1075C", VA = "0xB1075C")]
		public static void RenderDistortion(Material material, RenderTexture source, RenderTexture destination, float angle, Vector2 center, Vector2 radius)
		{
		}

		[Token(Token = "0x6000E71")]
		[Address(RVA = "0xB109CC", Offset = "0xB109CC", VA = "0xB109CC")]
		[Obsolete("Use Graphics.Blit(source,dest) instead")]
		public static void Blit(RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x6000E72")]
		[Address(RVA = "0xB10A34", Offset = "0xB10A34", VA = "0xB10A34")]
		[Obsolete("Use Graphics.Blit(source, destination, material) instead")]
		public static void BlitWithMaterial(Material material, RenderTexture source, RenderTexture dest)
		{
		}

		[Token(Token = "0x6000E73")]
		[Address(RVA = "0xB10AA4", Offset = "0xB10AA4", VA = "0xB10AA4")]
		public ImageEffects()
		{
		}
	}
	[Token(Token = "0x200029A")]
	[AddComponentMenu("Image Effects/Blur/Motion Blur (Color Accumulation)")]
	[RequireComponent(typeof(Camera))]
	[ExecuteInEditMode]
	public class MotionBlur : ImageEffectBase
	{
		[Token(Token = "0x4000FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float blurAmount;

		[Token(Token = "0x4000FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool extraBlur;

		[Token(Token = "0x4000FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private RenderTexture accumTexture;

		[Token(Token = "0x6000E74")]
		[Address(RVA = "0xB10AAC", Offset = "0xB10AAC", VA = "0xB10AAC", Slot = "4")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000E75")]
		[Address(RVA = "0xB10AE0", Offset = "0xB10AE0", VA = "0xB10AE0", Slot = "5")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x6000E76")]
		[Address(RVA = "0xB10B44", Offset = "0xB10B44", VA = "0xB10B44")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E77")]
		[Address(RVA = "0xB10EAC", Offset = "0xB10EAC", VA = "0xB10EAC")]
		public MotionBlur()
		{
		}
	}
	[Token(Token = "0x200029B")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	[AddComponentMenu("Image Effects/Noise/Noise And Grain (Filmic)")]
	public class NoiseAndGrain : PostEffectsBase
	{
		[Token(Token = "0x4000FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float intensityMultiplier;

		[Token(Token = "0x4000FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float generalIntensity;

		[Token(Token = "0x4000FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float blackIntensity;

		[Token(Token = "0x4000FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float whiteIntensity;

		[Token(Token = "0x4000FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float midGrey;

		[Token(Token = "0x4000FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool dx11Grain;

		[Token(Token = "0x4000FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float softness;

		[Token(Token = "0x4000FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool monochrome;

		[Token(Token = "0x4000FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 intensities;

		[Token(Token = "0x4000FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 tiling;

		[Token(Token = "0x4000FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float monochromeTiling;

		[Token(Token = "0x4000FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FilterMode filterMode;

		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Texture2D noiseTexture;

		[Token(Token = "0x4000FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader noiseShader;

		[Token(Token = "0x4000FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material noiseMaterial;

		[Token(Token = "0x4000FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Shader dx11NoiseShader;

		[Token(Token = "0x4000FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Material dx11NoiseMaterial;

		[Token(Token = "0x4000FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float TILE_AMOUNT;

		[Token(Token = "0x6000E78")]
		[Address(RVA = "0xB10EC0", Offset = "0xB10EC0", VA = "0xB10EC0", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E79")]
		[Address(RVA = "0xB10F5C", Offset = "0xB10F5C", VA = "0xB10F5C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E7A")]
		[Address(RVA = "0xB1175C", Offset = "0xB1175C", VA = "0xB1175C")]
		private static void DrawNoiseQuadGrid(RenderTexture source, RenderTexture dest, Material fxMaterial, Texture2D noise, int passNr)
		{
		}

		[Token(Token = "0x6000E7B")]
		[Address(RVA = "0xB11A9C", Offset = "0xB11A9C", VA = "0xB11A9C")]
		public NoiseAndGrain()
		{
		}
	}
	[Token(Token = "0x200029C")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	[AddComponentMenu("Image Effects/Noise/Noise and Scratches")]
	public class NoiseAndScratches : MonoBehaviour
	{
		[Token(Token = "0x4000FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool monochrome;

		[Token(Token = "0x4000FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool rgbFallback;

		[Token(Token = "0x4000FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float grainIntensityMin;

		[Token(Token = "0x4000FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float grainIntensityMax;

		[Token(Token = "0x4000FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float grainSize;

		[Token(Token = "0x4000FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float scratchIntensityMin;

		[Token(Token = "0x4000FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float scratchIntensityMax;

		[Token(Token = "0x4001000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float scratchFPS;

		[Token(Token = "0x4001001")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float scratchJitter;

		[Token(Token = "0x4001002")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Texture grainTexture;

		[Token(Token = "0x4001003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Texture scratchTexture;

		[Token(Token = "0x4001004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader shaderRGB;

		[Token(Token = "0x4001005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader shaderYUV;

		[Token(Token = "0x4001006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material m_MaterialRGB;

		[Token(Token = "0x4001007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material m_MaterialYUV;

		[Token(Token = "0x4001008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float scratchTimeLeft;

		[Token(Token = "0x4001009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float scratchX;

		[Token(Token = "0x400100A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float scratchY;

		[Token(Token = "0x17000172")]
		protected Material material
		{
			[Token(Token = "0x6000E7E")]
			[Address(RVA = "0xB11C64", Offset = "0xB11C64", VA = "0xB11C64")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E7D")]
		[Address(RVA = "0xB11B38", Offset = "0xB11B38", VA = "0xB11B38")]
		protected void Start()
		{
		}

		[Token(Token = "0x6000E7F")]
		[Address(RVA = "0xB11DCC", Offset = "0xB11DCC", VA = "0xB11DCC")]
		protected void OnDisable()
		{
		}

		[Token(Token = "0x6000E80")]
		[Address(RVA = "0xB11E9C", Offset = "0xB11E9C", VA = "0xB11E9C")]
		private void SanitizeParameters()
		{
		}

		[Token(Token = "0x6000E81")]
		[Address(RVA = "0xB11F40", Offset = "0xB11F40", VA = "0xB11F40")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E82")]
		[Address(RVA = "0xB12268", Offset = "0xB12268", VA = "0xB12268")]
		public NoiseAndScratches()
		{
		}
	}
	[Token(Token = "0x200029D")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	public class PostEffectsBase : MonoBehaviour
	{
		[Token(Token = "0x400100B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected bool supportHDRTextures;

		[Token(Token = "0x400100C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		protected bool supportDX11;

		[Token(Token = "0x400100D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		protected bool isSupported;

		[Token(Token = "0x6000E83")]
		[Address(RVA = "0xB05104", Offset = "0xB05104", VA = "0xB05104")]
		protected Material CheckShaderAndCreateMaterial(Shader s, Material m2Create)
		{
			return null;
		}

		[Token(Token = "0x6000E84")]
		[Address(RVA = "0xB04870", Offset = "0xB04870", VA = "0xB04870")]
		protected Material CreateMaterial(Shader s, Material m2Create)
		{
			return null;
		}

		[Token(Token = "0x6000E85")]
		[Address(RVA = "0xB1229C", Offset = "0xB1229C", VA = "0xB1229C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E86")]
		[Address(RVA = "0xB122A8", Offset = "0xB122A8", VA = "0xB122A8")]
		protected bool CheckSupport()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E87")]
		[Address(RVA = "0xB122B0", Offset = "0xB122B0", VA = "0xB122B0", Slot = "4")]
		public virtual bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E88")]
		[Address(RVA = "0xB0A970", Offset = "0xB0A970", VA = "0xB0A970")]
		protected void Start()
		{
		}

		[Token(Token = "0x6000E89")]
		[Address(RVA = "0xB0476C", Offset = "0xB0476C", VA = "0xB0476C")]
		protected bool CheckSupport(bool needDepth)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E8A")]
		[Address(RVA = "0xB08C04", Offset = "0xB08C04", VA = "0xB08C04")]
		protected bool CheckSupport(bool needDepth, bool needHdr)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E8B")]
		[Address(RVA = "0xB12370", Offset = "0xB12370", VA = "0xB12370")]
		public bool Dx11Support()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E8C")]
		[Address(RVA = "0xB04A74", Offset = "0xB04A74", VA = "0xB04A74")]
		protected void ReportAutoDisable()
		{
		}

		[Token(Token = "0x6000E8D")]
		[Address(RVA = "0xB12378", Offset = "0xB12378", VA = "0xB12378")]
		private bool CheckShader(Shader s)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E8E")]
		[Address(RVA = "0xB04A54", Offset = "0xB04A54", VA = "0xB04A54")]
		protected void NotSupported()
		{
		}

		[Token(Token = "0x6000E8F")]
		[Address(RVA = "0xB125FC", Offset = "0xB125FC", VA = "0xB125FC")]
		protected void DrawBorder(RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x6000E90")]
		[Address(RVA = "0xB0501C", Offset = "0xB0501C", VA = "0xB0501C")]
		public PostEffectsBase()
		{
		}
	}
	[Token(Token = "0x200029E")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	internal class PostEffectsHelper : MonoBehaviour
	{
		[Token(Token = "0x6000E91")]
		[Address(RVA = "0xB12974", Offset = "0xB12974", VA = "0xB12974")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E92")]
		[Address(RVA = "0xB129DC", Offset = "0xB129DC", VA = "0xB129DC")]
		private static void DrawLowLevelPlaneAlignedWithCamera(float dist, RenderTexture source, RenderTexture dest, Material material, Camera cameraForProjectionMatrix)
		{
		}

		[Token(Token = "0x6000E93")]
		[Address(RVA = "0xB12C28", Offset = "0xB12C28", VA = "0xB12C28")]
		private static void DrawBorder(RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x6000E94")]
		[Address(RVA = "0xB12F9C", Offset = "0xB12F9C", VA = "0xB12F9C")]
		private static void DrawLowLevelQuad(float x1, float x2, float y1, float y2, RenderTexture source, RenderTexture dest, Material material)
		{
		}

		[Token(Token = "0x6000E95")]
		[Address(RVA = "0xB13140", Offset = "0xB13140", VA = "0xB13140")]
		public PostEffectsHelper()
		{
		}
	}
	[Token(Token = "0x200029F")]
	internal class Quads
	{
		[Token(Token = "0x400100E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Mesh[] meshes;

		[Token(Token = "0x400100F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int currentQuads;

		[Token(Token = "0x6000E96")]
		[Address(RVA = "0xB13148", Offset = "0xB13148", VA = "0xB13148")]
		private static bool HasMeshes()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E97")]
		[Address(RVA = "0xB13218", Offset = "0xB13218", VA = "0xB13218")]
		public static void Cleanup()
		{
		}

		[Token(Token = "0x6000E98")]
		[Address(RVA = "0xB1337C", Offset = "0xB1337C", VA = "0xB1337C")]
		public static Mesh[] GetMeshes(int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x6000E99")]
		[Address(RVA = "0xB135B4", Offset = "0xB135B4", VA = "0xB135B4")]
		private static Mesh GetMesh(int triCount, int triOffset, int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x6000E9A")]
		[Address(RVA = "0xB13938", Offset = "0xB13938", VA = "0xB13938")]
		public Quads()
		{
		}
	}
	[Token(Token = "0x20002A0")]
	[AddComponentMenu("Image Effects/Other/Screen Overlay")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	public class ScreenOverlay : PostEffectsBase
	{
		[Token(Token = "0x20002A1")]
		public enum OverlayBlendMode
		{
			[Token(Token = "0x4001016")]
			Additive,
			[Token(Token = "0x4001017")]
			ScreenBlend,
			[Token(Token = "0x4001018")]
			Multiply,
			[Token(Token = "0x4001019")]
			Overlay,
			[Token(Token = "0x400101A")]
			AlphaBlend
		}

		[Token(Token = "0x4001010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public OverlayBlendMode blendMode;

		[Token(Token = "0x4001011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float intensity;

		[Token(Token = "0x4001012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Texture2D texture;

		[Token(Token = "0x4001013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader overlayShader;

		[Token(Token = "0x4001014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material overlayMaterial;

		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0xB13940", Offset = "0xB13940", VA = "0xB13940", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0xB139B4", Offset = "0xB139B4", VA = "0xB139B4")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0xB13B04", Offset = "0xB13B04", VA = "0xB13B04")]
		public ScreenOverlay()
		{
		}
	}
	[Token(Token = "0x20002A2")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	[AddComponentMenu("Image Effects/Rendering/Screen Space Ambient Obscurance")]
	internal class ScreenSpaceAmbientObscurance : PostEffectsBase
	{
		[Token(Token = "0x400101B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 3f)]
		public float intensity;

		[Token(Token = "0x400101C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0.1f, 3f)]
		public float radius;

		[Token(Token = "0x400101D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 3f)]
		public int blurIterations;

		[Token(Token = "0x400101E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 5f)]
		public float blurFilterDistance;

		[Token(Token = "0x400101F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0f, 1f)]
		public int downsample;

		[Token(Token = "0x4001020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Texture2D rand;

		[Token(Token = "0x4001021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader aoShader;

		[Token(Token = "0x4001022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material aoMaterial;

		[Token(Token = "0x6000E9E")]
		[Address(RVA = "0xB13B18", Offset = "0xB13B18", VA = "0xB13B18", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E9F")]
		[Address(RVA = "0xB13B8C", Offset = "0xB13B8C", VA = "0xB13B8C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000EA0")]
		[Address(RVA = "0xB13C1C", Offset = "0xB13C1C", VA = "0xB13C1C")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000EA1")]
		[Address(RVA = "0xB141CC", Offset = "0xB141CC", VA = "0xB141CC")]
		public ScreenSpaceAmbientObscurance()
		{
		}
	}
	[Token(Token = "0x20002A3")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	[AddComponentMenu("Image Effects/Rendering/Screen Space Ambient Occlusion")]
	public class ScreenSpaceAmbientOcclusion : MonoBehaviour
	{
		[Token(Token = "0x20002A4")]
		public enum SSAOSamples
		{
			[Token(Token = "0x400102F")]
			Low,
			[Token(Token = "0x4001030")]
			Medium,
			[Token(Token = "0x4001031")]
			High
		}

		[Token(Token = "0x4001023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float m_Radius;

		[Token(Token = "0x4001024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public SSAOSamples m_SampleCount;

		[Token(Token = "0x4001025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float m_OcclusionIntensity;

		[Token(Token = "0x4001026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int m_Blur;

		[Token(Token = "0x4001027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int m_Downsampling;

		[Token(Token = "0x4001028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float m_OcclusionAttenuation;

		[Token(Token = "0x4001029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float m_MinZ;

		[Token(Token = "0x400102A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Shader m_SSAOShader;

		[Token(Token = "0x400102B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material m_SSAOMaterial;

		[Token(Token = "0x400102C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Texture2D m_RandomTexture;

		[Token(Token = "0x400102D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool m_Supported;

		[Token(Token = "0x6000EA2")]
		[Address(RVA = "0xB141EC", Offset = "0xB141EC", VA = "0xB141EC")]
		private static Material CreateMaterial(Shader shader)
		{
			return null;
		}

		[Token(Token = "0x6000EA3")]
		[Address(RVA = "0xB14298", Offset = "0xB14298", VA = "0xB14298")]
		private static void DestroyMaterial(Material mat)
		{
		}

		[Token(Token = "0x6000EA4")]
		[Address(RVA = "0xB1431C", Offset = "0xB1431C", VA = "0xB1431C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000EA5")]
		[Address(RVA = "0xB14324", Offset = "0xB14324", VA = "0xB14324")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EA6")]
		[Address(RVA = "0xB144C4", Offset = "0xB144C4", VA = "0xB144C4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000EA7")]
		[Address(RVA = "0xB143EC", Offset = "0xB143EC", VA = "0xB143EC")]
		private void CreateMaterials()
		{
		}

		[Token(Token = "0x6000EA8")]
		[Address(RVA = "0xB14530", Offset = "0xB14530", VA = "0xB14530")]
		[ImageEffectOpaque]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000EA9")]
		[Address(RVA = "0xB14B04", Offset = "0xB14B04", VA = "0xB14B04")]
		public ScreenSpaceAmbientOcclusion()
		{
		}
	}
	[Token(Token = "0x20002A5")]
	[ExecuteInEditMode]
	[AddComponentMenu("Image Effects/Color Adjustments/Sepia Tone")]
	public class SepiaTone : ImageEffectBase
	{
		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0xB14B38", Offset = "0xB14B38", VA = "0xB14B38")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000EAB")]
		[Address(RVA = "0xB14BBC", Offset = "0xB14BBC", VA = "0xB14BBC")]
		public SepiaTone()
		{
		}
	}
	[Token(Token = "0x20002A6")]
	[RequireComponent(typeof(Camera))]
	[ExecuteInEditMode]
	[AddComponentMenu("Image Effects/Rendering/Sun Shafts")]
	public class SunShafts : PostEffectsBase
	{
		[Token(Token = "0x20002A7")]
		public enum SunShaftsResolution
		{
			[Token(Token = "0x4001041")]
			Low,
			[Token(Token = "0x4001042")]
			Normal,
			[Token(Token = "0x4001043")]
			High
		}

		[Token(Token = "0x20002A8")]
		public enum ShaftsScreenBlendMode
		{
			[Token(Token = "0x4001045")]
			Screen,
			[Token(Token = "0x4001046")]
			Add
		}

		[Token(Token = "0x4001032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public SunShaftsResolution resolution;

		[Token(Token = "0x4001033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ShaftsScreenBlendMode screenBlendMode;

		[Token(Token = "0x4001034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform sunTransform;

		[Token(Token = "0x4001035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int radialBlurIterations;

		[Token(Token = "0x4001036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Color sunColor;

		[Token(Token = "0x4001037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Color sunThreshold;

		[Token(Token = "0x4001038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float sunShaftBlurRadius;

		[Token(Token = "0x4001039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float sunShaftIntensity;

		[Token(Token = "0x400103A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float maxRadius;

		[Token(Token = "0x400103B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool useDepthTexture;

		[Token(Token = "0x400103C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Shader sunShaftsShader;

		[Token(Token = "0x400103D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material sunShaftsMaterial;

		[Token(Token = "0x400103E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Shader simpleClearShader;

		[Token(Token = "0x400103F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Material simpleClearMaterial;

		[Token(Token = "0x6000EAC")]
		[Address(RVA = "0xB14BC4", Offset = "0xB14BC4", VA = "0xB14BC4", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EAD")]
		[Address(RVA = "0xB14C60", Offset = "0xB14C60", VA = "0xB14C60")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000EAE")]
		[Address(RVA = "0xB15324", Offset = "0xB15324", VA = "0xB15324")]
		public SunShafts()
		{
		}
	}
	[Token(Token = "0x20002A9")]
	[RequireComponent(typeof(Camera))]
	[AddComponentMenu("Image Effects/Camera/Tilt Shift (Lens Blur)")]
	internal class TiltShift : PostEffectsBase
	{
		[Token(Token = "0x20002AA")]
		public enum TiltShiftMode
		{
			[Token(Token = "0x400104F")]
			TiltShiftMode,
			[Token(Token = "0x4001050")]
			IrisMode
		}

		[Token(Token = "0x20002AB")]
		public enum TiltShiftQuality
		{
			[Token(Token = "0x4001052")]
			Preview,
			[Token(Token = "0x4001053")]
			Normal,
			[Token(Token = "0x4001054")]
			High
		}

		[Token(Token = "0x4001047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TiltShiftMode mode;

		[Token(Token = "0x4001048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TiltShiftQuality quality;

		[Token(Token = "0x4001049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 15f)]
		public float blurArea;

		[Token(Token = "0x400104A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 25f)]
		public float maxBlurSize;

		[Token(Token = "0x400104B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0f, 1f)]
		public int downsample;

		[Token(Token = "0x400104C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Shader tiltShiftShader;

		[Token(Token = "0x400104D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Material tiltShiftMaterial;

		[Token(Token = "0x6000EAF")]
		[Address(RVA = "0xB1536C", Offset = "0xB1536C", VA = "0xB1536C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EB0")]
		[Address(RVA = "0xB153E0", Offset = "0xB153E0", VA = "0xB153E0")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000EB1")]
		[Address(RVA = "0xB15670", Offset = "0xB15670", VA = "0xB15670")]
		public TiltShift()
		{
		}
	}
	[Token(Token = "0x20002AC")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	[AddComponentMenu("Image Effects/Color Adjustments/Tonemapping")]
	public class Tonemapping : PostEffectsBase
	{
		[Token(Token = "0x20002AD")]
		public enum TonemapperType
		{
			[Token(Token = "0x4001063")]
			SimpleReinhard,
			[Token(Token = "0x4001064")]
			UserCurve,
			[Token(Token = "0x4001065")]
			Hable,
			[Token(Token = "0x4001066")]
			Photographic,
			[Token(Token = "0x4001067")]
			OptimizedHejiDawson,
			[Token(Token = "0x4001068")]
			AdaptiveReinhard,
			[Token(Token = "0x4001069")]
			AdaptiveReinhardAutoWhite
		}

		[Token(Token = "0x20002AE")]
		public enum AdaptiveTexSize
		{
			[Token(Token = "0x400106B")]
			Square16 = 0x10,
			[Token(Token = "0x400106C")]
			Square32 = 0x20,
			[Token(Token = "0x400106D")]
			Square64 = 0x40,
			[Token(Token = "0x400106E")]
			Square128 = 0x80,
			[Token(Token = "0x400106F")]
			Square256 = 0x100,
			[Token(Token = "0x4001070")]
			Square512 = 0x200,
			[Token(Token = "0x4001071")]
			Square1024 = 0x400
		}

		[Token(Token = "0x4001055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public TonemapperType type;

		[Token(Token = "0x4001056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AdaptiveTexSize adaptiveTextureSize;

		[Token(Token = "0x4001057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimationCurve remapCurve;

		[Token(Token = "0x4001058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Texture2D curveTex;

		[Token(Token = "0x4001059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float exposureAdjustment;

		[Token(Token = "0x400105A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float middleGrey;

		[Token(Token = "0x400105B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float white;

		[Token(Token = "0x400105C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float adaptionSpeed;

		[Token(Token = "0x400105D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader tonemapper;

		[Token(Token = "0x400105E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool validRenderTextureFormat;

		[Token(Token = "0x400105F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material tonemapMaterial;

		[Token(Token = "0x4001060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private RenderTexture rt;

		[Token(Token = "0x4001061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private RenderTextureFormat rtFormat;

		[Token(Token = "0x6000EB2")]
		[Address(RVA = "0xB1568C", Offset = "0xB1568C", VA = "0xB1568C", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EB3")]
		[Address(RVA = "0xB157FC", Offset = "0xB157FC", VA = "0xB157FC")]
		public float UpdateCurve()
		{
			return default(float);
		}

		[Token(Token = "0x6000EB4")]
		[Address(RVA = "0xB15A7C", Offset = "0xB15A7C", VA = "0xB15A7C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000EB5")]
		[Address(RVA = "0xB15BD4", Offset = "0xB15BD4", VA = "0xB15BD4")]
		private bool CreateInternalRenderTexture()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EB6")]
		[Address(RVA = "0xB15CD4", Offset = "0xB15CD4", VA = "0xB15CD4")]
		[ImageEffectTransformsToLDR]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000EB7")]
		[Address(RVA = "0xB16474", Offset = "0xB16474", VA = "0xB16474")]
		public Tonemapping()
		{
		}
	}
	[Token(Token = "0x20002AF")]
	internal class Triangles
	{
		[Token(Token = "0x4001072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Mesh[] meshes;

		[Token(Token = "0x4001073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int currentTris;

		[Token(Token = "0x6000EB8")]
		[Address(RVA = "0xB164A4", Offset = "0xB164A4", VA = "0xB164A4")]
		private static bool HasMeshes()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EB9")]
		[Address(RVA = "0xB16578", Offset = "0xB16578", VA = "0xB16578")]
		private static void Cleanup()
		{
		}

		[Token(Token = "0x6000EBA")]
		[Address(RVA = "0xB166DC", Offset = "0xB166DC", VA = "0xB166DC")]
		private static Mesh[] GetMeshes(int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x6000EBB")]
		[Address(RVA = "0xB16914", Offset = "0xB16914", VA = "0xB16914")]
		private static Mesh GetMesh(int triCount, int triOffset, int totalWidth, int totalHeight)
		{
			return null;
		}

		[Token(Token = "0x6000EBC")]
		[Address(RVA = "0xB16C08", Offset = "0xB16C08", VA = "0xB16C08")]
		public Triangles()
		{
		}
	}
	[Token(Token = "0x20002B0")]
	[ExecuteInEditMode]
	[AddComponentMenu("Image Effects/Displacement/Twirl")]
	public class Twirl : ImageEffectBase
	{
		[Token(Token = "0x4001074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 radius;

		[Token(Token = "0x4001075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float angle;

		[Token(Token = "0x4001076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector2 center;

		[Token(Token = "0x6000EBD")]
		[Address(RVA = "0xB16C10", Offset = "0xB16C10", VA = "0xB16C10")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0xB16C50", Offset = "0xB16C50", VA = "0xB16C50")]
		public Twirl()
		{
		}
	}
	[Token(Token = "0x20002B1")]
	[AddComponentMenu("Image Effects/Camera/Vignette and Chromatic Aberration")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	public class VignetteAndChromaticAberration : PostEffectsBase
	{
		[Token(Token = "0x20002B2")]
		public enum AberrationMode
		{
			[Token(Token = "0x4001086")]
			Simple,
			[Token(Token = "0x4001087")]
			Advanced
		}

		[Token(Token = "0x4001077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AberrationMode mode;

		[Token(Token = "0x4001078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float intensity;

		[Token(Token = "0x4001079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float chromaticAberration;

		[Token(Token = "0x400107A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float axialAberration;

		[Token(Token = "0x400107B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float blur;

		[Token(Token = "0x400107C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float blurSpread;

		[Token(Token = "0x400107D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float luminanceDependency;

		[Token(Token = "0x400107E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float blurDistance;

		[Token(Token = "0x400107F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Shader vignetteShader;

		[Token(Token = "0x4001080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Shader separableBlurShader;

		[Token(Token = "0x4001081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Shader chromAberrationShader;

		[Token(Token = "0x4001082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material m_VignetteMaterial;

		[Token(Token = "0x4001083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material m_SeparableBlurMaterial;

		[Token(Token = "0x4001084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material m_ChromAberrationMaterial;

		[Token(Token = "0x6000EBF")]
		[Address(RVA = "0xB16C78", Offset = "0xB16C78", VA = "0xB16C78", Slot = "4")]
		public override bool CheckResources()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC0")]
		[Address(RVA = "0xB16D3C", Offset = "0xB16D3C", VA = "0xB16D3C")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0xB17278", Offset = "0xB17278", VA = "0xB17278")]
		public VignetteAndChromaticAberration()
		{
		}
	}
	[Token(Token = "0x20002B3")]
	[AddComponentMenu("Image Effects/Displacement/Vortex")]
	[ExecuteInEditMode]
	public class Vortex : ImageEffectBase
	{
		[Token(Token = "0x4001088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 radius;

		[Token(Token = "0x4001089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float angle;

		[Token(Token = "0x400108A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector2 center;

		[Token(Token = "0x6000EC2")]
		[Address(RVA = "0xB172A8", Offset = "0xB172A8", VA = "0xB172A8")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000EC3")]
		[Address(RVA = "0xB172E8", Offset = "0xB172E8", VA = "0xB172E8")]
		public Vortex()
		{
		}
	}
}
