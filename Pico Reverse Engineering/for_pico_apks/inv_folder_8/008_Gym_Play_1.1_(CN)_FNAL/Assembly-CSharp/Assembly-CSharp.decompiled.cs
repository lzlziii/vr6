using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Text;
using BNG;
using ExitGames.Client.Photon;
using Il2CppDummyDll;
using Photon.Pun;
using Photon.Realtime;
using Pico.Platform;
using Pico.Platform.Models;
using Rook;
using RootMotion.Demos;
using RootMotion.FinalIK;
using TMPro;
using Unity.XR.PXR;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Animations;
using UnityEngine.Audio;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.InputSystem;
using UnityEngine.Networking;
using UnityEngine.Rendering;
using UnityEngine.SceneManagement;
using UnityEngine.Serialization;
using UnityEngine.UI;
using UnityEngine.Video;
using UnityEngine.XR;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
public class Amplitude
{
	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly string UnityLibraryName;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static readonly string UnityLibraryVersion;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static Dictionary<string, Amplitude> instances;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static readonly object instanceLock;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static readonly string androidPluginName;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private AndroidJavaClass pluginClass;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool logging;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private string instanceName;

	[Token(Token = "0x17000001")]
	public static Amplitude Instance
	{
		[Token(Token = "0x6000003")]
		[Address(RVA = "0xD59C28", Offset = "0xD59C28", VA = "0xD59C28")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000001")]
	[Address(RVA = "0xD597E4", Offset = "0xD597E4", VA = "0xD597E4")]
	public static Amplitude getInstance()
	{
		return null;
	}

	[Token(Token = "0x6000002")]
	[Address(RVA = "0xD59834", Offset = "0xD59834", VA = "0xD59834")]
	public static Amplitude getInstance(string instanceName)
	{
		return null;
	}

	[Token(Token = "0x6000004")]
	[Address(RVA = "0xD59AD8", Offset = "0xD59AD8", VA = "0xD59AD8")]
	public Amplitude(string instanceName)
	{
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0xD59F24", Offset = "0xD59F24", VA = "0xD59F24")]
	protected void Log(string message)
	{
	}

	[Token(Token = "0x6000006")]
	protected void Log<T>(string message, string property, IEnumerable<T> array)
	{
	}

	[Token(Token = "0x6000007")]
	[Address(RVA = "0xD59F94", Offset = "0xD59F94", VA = "0xD59F94")]
	public void init(string apiKey)
	{
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0xD5A69C", Offset = "0xD5A69C", VA = "0xD5A69C")]
	public void init(string apiKey, string userId)
	{
	}

	[Token(Token = "0x6000009")]
	[Address(RVA = "0xD5ADF4", Offset = "0xD5ADF4", VA = "0xD5ADF4")]
	public void setTrackingOptions(IDictionary<string, bool> trackingOptions)
	{
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0xD5AF64", Offset = "0xD5AF64", VA = "0xD5AF64")]
	public void logEvent(string evt)
	{
	}

	[Token(Token = "0x600000B")]
	[Address(RVA = "0xD5B0BC", Offset = "0xD5B0BC", VA = "0xD5B0BC")]
	public void logEvent(string evt, IDictionary<string, object> properties)
	{
	}

	[Token(Token = "0x600000C")]
	[Address(RVA = "0xD5B2A8", Offset = "0xD5B2A8", VA = "0xD5B2A8")]
	public void logEvent(string evt, IDictionary<string, object> properties, bool outOfSession)
	{
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0xD5B510", Offset = "0xD5B510", VA = "0xD5B510")]
	public void setOffline(bool offline)
	{
	}

	[Token(Token = "0x600000E")]
	[Address(RVA = "0xD5B6A0", Offset = "0xD5B6A0", VA = "0xD5B6A0")]
	public void setUserId(string userId)
	{
	}

	[Token(Token = "0x600000F")]
	[Address(RVA = "0xD5B7F8", Offset = "0xD5B7F8", VA = "0xD5B7F8")]
	public void setUserProperties(IDictionary<string, object> properties)
	{
	}

	[Token(Token = "0x6000010")]
	[Address(RVA = "0xD5B9A8", Offset = "0xD5B9A8", VA = "0xD5B9A8")]
	public void setGroup(string groupType, string groupName)
	{
	}

	[Token(Token = "0x6000011")]
	[Address(RVA = "0xD5BB88", Offset = "0xD5BB88", VA = "0xD5BB88")]
	public void setGroup(string groupType, string[] groupName)
	{
	}

	[Token(Token = "0x6000012")]
	[Address(RVA = "0xD5BD68", Offset = "0xD5BD68", VA = "0xD5BD68")]
	public void setOptOut(bool enabled)
	{
	}

	[Token(Token = "0x6000013")]
	[Address(RVA = "0xD5BEF8", Offset = "0xD5BEF8", VA = "0xD5BEF8")]
	public void setMinTimeBetweenSessionsMillis(long minTimeBetweenSessionsMillis)
	{
	}

	[Token(Token = "0x6000014")]
	[Address(RVA = "0xD5C088", Offset = "0xD5C088", VA = "0xD5C088")]
	public void setEventUploadPeriodSeconds(int eventUploadPeriodSeconds)
	{
	}

	[Token(Token = "0x6000015")]
	[Address(RVA = "0xD5C220", Offset = "0xD5C220", VA = "0xD5C220")]
	public void setDeviceId(string deviceId)
	{
	}

	[Token(Token = "0x6000016")]
	[Address(RVA = "0xD5C378", Offset = "0xD5C378", VA = "0xD5C378")]
	public void enableCoppaControl()
	{
	}

	[Token(Token = "0x6000017")]
	[Address(RVA = "0xD5C47C", Offset = "0xD5C47C", VA = "0xD5C47C")]
	public void disableCoppaControl()
	{
	}

	[Token(Token = "0x6000018")]
	[Address(RVA = "0xD5C5E0", Offset = "0xD5C5E0", VA = "0xD5C5E0")]
	public void setServerUrl(string serverUrl)
	{
	}

	[Token(Token = "0x6000019")]
	[Address(RVA = "0xD5C788", Offset = "0xD5C788", VA = "0xD5C788")]
	public void setUseDynamicConfig(bool useDynamicConfig)
	{
	}

	[Token(Token = "0x600001A")]
	[Address(RVA = "0xD5C958", Offset = "0xD5C958", VA = "0xD5C958")]
	public void setServerZone(AmplitudeServerZone serverZone, bool updateServerUrl = true)
	{
	}

	[Token(Token = "0x600001B")]
	[Address(RVA = "0xD5CB94", Offset = "0xD5CB94", VA = "0xD5CB94")]
	[Obsolete("Please call setUserProperties instead", false)]
	public void setGlobalUserProperties(IDictionary<string, object> properties)
	{
	}

	[Token(Token = "0x600001C")]
	[Address(RVA = "0xD5CB98", Offset = "0xD5CB98", VA = "0xD5CB98")]
	public void logRevenue(double amount)
	{
	}

	[Token(Token = "0x600001D")]
	[Address(RVA = "0xD5CD30", Offset = "0xD5CD30", VA = "0xD5CD30")]
	public void logRevenue(string productId, int quantity, double price)
	{
	}

	[Token(Token = "0x600001E")]
	[Address(RVA = "0xD5CF84", Offset = "0xD5CF84", VA = "0xD5CF84")]
	public void logRevenue(string productId, int quantity, double price, string receipt, string receiptSignature)
	{
	}

	[Token(Token = "0x600001F")]
	[Address(RVA = "0xD5D250", Offset = "0xD5D250", VA = "0xD5D250")]
	public void logRevenue(string productId, int quantity, double price, string receipt, string receiptSignature, string revenueType, IDictionary<string, object> eventProperties)
	{
	}

	[Token(Token = "0x6000020")]
	[Address(RVA = "0xD5D700", Offset = "0xD5D700", VA = "0xD5D700")]
	public string getDeviceId()
	{
		return null;
	}

	[Token(Token = "0x6000021")]
	[Address(RVA = "0xD5D7FC", Offset = "0xD5D7FC", VA = "0xD5D7FC")]
	public void regenerateDeviceId()
	{
	}

	[Token(Token = "0x6000022")]
	[Address(RVA = "0xD5D8E0", Offset = "0xD5D8E0", VA = "0xD5D8E0")]
	public void useAdvertisingIdForDeviceId()
	{
	}

	[Token(Token = "0x6000023")]
	[Address(RVA = "0xD5D9C4", Offset = "0xD5D9C4", VA = "0xD5D9C4")]
	public void useAppSetIdForDeviceId()
	{
	}

	[Token(Token = "0x6000024")]
	[Address(RVA = "0xD5DAA8", Offset = "0xD5DAA8", VA = "0xD5DAA8")]
	public void trackSessionEvents(bool enabled)
	{
	}

	[Token(Token = "0x6000025")]
	[Address(RVA = "0xD5DC38", Offset = "0xD5DC38", VA = "0xD5DC38")]
	public long getSessionId()
	{
		return default(long);
	}

	[Token(Token = "0x6000026")]
	[Address(RVA = "0xD5DD34", Offset = "0xD5DD34", VA = "0xD5DD34")]
	public void uploadEvents()
	{
	}

	[Token(Token = "0x6000027")]
	[Address(RVA = "0xD5DE18", Offset = "0xD5DE18", VA = "0xD5DE18")]
	public void clearUserProperties()
	{
	}

	[Token(Token = "0x6000028")]
	[Address(RVA = "0xD5DF7C", Offset = "0xD5DF7C", VA = "0xD5DF7C")]
	public void unsetUserProperty(string property)
	{
	}

	[Token(Token = "0x6000029")]
	[Address(RVA = "0xD5E0D4", Offset = "0xD5E0D4", VA = "0xD5E0D4")]
	public void setOnceUserProperty(string property, bool value)
	{
	}

	[Token(Token = "0x600002A")]
	[Address(RVA = "0xD5E2A0", Offset = "0xD5E2A0", VA = "0xD5E2A0")]
	public void setOnceUserProperty(string property, double value)
	{
	}

	[Token(Token = "0x600002B")]
	[Address(RVA = "0xD5E46C", Offset = "0xD5E46C", VA = "0xD5E46C")]
	public void setOnceUserProperty(string property, float value)
	{
	}

	[Token(Token = "0x600002C")]
	[Address(RVA = "0xD5E638", Offset = "0xD5E638", VA = "0xD5E638")]
	public void setOnceUserProperty(string property, int value)
	{
	}

	[Token(Token = "0x600002D")]
	[Address(RVA = "0xD5E804", Offset = "0xD5E804", VA = "0xD5E804")]
	public void setOnceUserProperty(string property, long value)
	{
	}

	[Token(Token = "0x600002E")]
	[Address(RVA = "0xD5E9D0", Offset = "0xD5E9D0", VA = "0xD5E9D0")]
	public void setOnceUserProperty(string property, string value)
	{
	}

	[Token(Token = "0x600002F")]
	[Address(RVA = "0xD5EB64", Offset = "0xD5EB64", VA = "0xD5EB64")]
	public void setOnceUserProperty(string property, IDictionary<string, object> values)
	{
	}

	[Token(Token = "0x6000030")]
	public void setOnceUserProperty<T>(string property, IList<T> values)
	{
	}

	[Token(Token = "0x6000031")]
	[Address(RVA = "0xD5ED10", Offset = "0xD5ED10", VA = "0xD5ED10")]
	public void setOnceUserProperty(string property, bool[] array)
	{
	}

	[Token(Token = "0x6000032")]
	[Address(RVA = "0xD5EEBC", Offset = "0xD5EEBC", VA = "0xD5EEBC")]
	public void setOnceUserProperty(string property, double[] array)
	{
	}

	[Token(Token = "0x6000033")]
	[Address(RVA = "0xD5F068", Offset = "0xD5F068", VA = "0xD5F068")]
	public void setOnceUserProperty(string property, float[] array)
	{
	}

	[Token(Token = "0x6000034")]
	[Address(RVA = "0xD5F214", Offset = "0xD5F214", VA = "0xD5F214")]
	public void setOnceUserProperty(string property, int[] array)
	{
	}

	[Token(Token = "0x6000035")]
	[Address(RVA = "0xD5F3C0", Offset = "0xD5F3C0", VA = "0xD5F3C0")]
	public void setOnceUserProperty(string property, long[] array)
	{
	}

	[Token(Token = "0x6000036")]
	[Address(RVA = "0xD5F56C", Offset = "0xD5F56C", VA = "0xD5F56C")]
	public void setOnceUserProperty(string property, string[] array)
	{
	}

	[Token(Token = "0x6000037")]
	[Address(RVA = "0xD5F718", Offset = "0xD5F718", VA = "0xD5F718")]
	public void setUserProperty(string property, bool value)
	{
	}

	[Token(Token = "0x6000038")]
	[Address(RVA = "0xD5F8E4", Offset = "0xD5F8E4", VA = "0xD5F8E4")]
	public void setUserProperty(string property, double value)
	{
	}

	[Token(Token = "0x6000039")]
	[Address(RVA = "0xD5FAB0", Offset = "0xD5FAB0", VA = "0xD5FAB0")]
	public void setUserProperty(string property, float value)
	{
	}

	[Token(Token = "0x600003A")]
	[Address(RVA = "0xD5FC7C", Offset = "0xD5FC7C", VA = "0xD5FC7C")]
	public void setUserProperty(string property, int value)
	{
	}

	[Token(Token = "0x600003B")]
	[Address(RVA = "0xD5FE48", Offset = "0xD5FE48", VA = "0xD5FE48")]
	public void setUserProperty(string property, long value)
	{
	}

	[Token(Token = "0x600003C")]
	[Address(RVA = "0xD60014", Offset = "0xD60014", VA = "0xD60014")]
	public void setUserProperty(string property, string value)
	{
	}

	[Token(Token = "0x600003D")]
	[Address(RVA = "0xD601A8", Offset = "0xD601A8", VA = "0xD601A8")]
	public void setUserProperty(string property, IDictionary<string, object> values)
	{
	}

	[Token(Token = "0x600003E")]
	public void setUserProperty<T>(string property, IList<T> values)
	{
	}

	[Token(Token = "0x600003F")]
	[Address(RVA = "0xD60354", Offset = "0xD60354", VA = "0xD60354")]
	public void setUserProperty(string property, bool[] array)
	{
	}

	[Token(Token = "0x6000040")]
	[Address(RVA = "0xD60500", Offset = "0xD60500", VA = "0xD60500")]
	public void setUserProperty(string property, double[] array)
	{
	}

	[Token(Token = "0x6000041")]
	[Address(RVA = "0xD606AC", Offset = "0xD606AC", VA = "0xD606AC")]
	public void setUserProperty(string property, float[] array)
	{
	}

	[Token(Token = "0x6000042")]
	[Address(RVA = "0xD60858", Offset = "0xD60858", VA = "0xD60858")]
	public void setUserProperty(string property, int[] array)
	{
	}

	[Token(Token = "0x6000043")]
	[Address(RVA = "0xD60A04", Offset = "0xD60A04", VA = "0xD60A04")]
	public void setUserProperty(string property, long[] array)
	{
	}

	[Token(Token = "0x6000044")]
	[Address(RVA = "0xD60BB0", Offset = "0xD60BB0", VA = "0xD60BB0")]
	public void setUserProperty(string property, string[] array)
	{
	}

	[Token(Token = "0x6000045")]
	[Address(RVA = "0xD60D5C", Offset = "0xD60D5C", VA = "0xD60D5C")]
	public void addUserProperty(string property, double value)
	{
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0xD60F28", Offset = "0xD60F28", VA = "0xD60F28")]
	public void addUserProperty(string property, float value)
	{
	}

	[Token(Token = "0x6000047")]
	[Address(RVA = "0xD610F4", Offset = "0xD610F4", VA = "0xD610F4")]
	public void addUserProperty(string property, int value)
	{
	}

	[Token(Token = "0x6000048")]
	[Address(RVA = "0xD612C0", Offset = "0xD612C0", VA = "0xD612C0")]
	public void addUserProperty(string property, long value)
	{
	}

	[Token(Token = "0x6000049")]
	[Address(RVA = "0xD6148C", Offset = "0xD6148C", VA = "0xD6148C")]
	public void addUserProperty(string property, string value)
	{
	}

	[Token(Token = "0x600004A")]
	[Address(RVA = "0xD61620", Offset = "0xD61620", VA = "0xD61620")]
	public void addUserProperty(string property, IDictionary<string, object> values)
	{
	}

	[Token(Token = "0x600004B")]
	[Address(RVA = "0xD617CC", Offset = "0xD617CC", VA = "0xD617CC")]
	public void appendUserProperty(string property, bool value)
	{
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0xD61998", Offset = "0xD61998", VA = "0xD61998")]
	public void appendUserProperty(string property, double value)
	{
	}

	[Token(Token = "0x600004D")]
	[Address(RVA = "0xD61B64", Offset = "0xD61B64", VA = "0xD61B64")]
	public void appendUserProperty(string property, float value)
	{
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0xD61D30", Offset = "0xD61D30", VA = "0xD61D30")]
	public void appendUserProperty(string property, int value)
	{
	}

	[Token(Token = "0x600004F")]
	[Address(RVA = "0xD61EFC", Offset = "0xD61EFC", VA = "0xD61EFC")]
	public void appendUserProperty(string property, long value)
	{
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0xD620C8", Offset = "0xD620C8", VA = "0xD620C8")]
	public void appendUserProperty(string property, string value)
	{
	}

	[Token(Token = "0x6000051")]
	[Address(RVA = "0xD6225C", Offset = "0xD6225C", VA = "0xD6225C")]
	public void appendUserProperty(string property, IDictionary<string, object> values)
	{
	}

	[Token(Token = "0x6000052")]
	public void appendUserProperty<T>(string property, IList<T> values)
	{
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0xD62408", Offset = "0xD62408", VA = "0xD62408")]
	public void appendUserProperty(string property, bool[] array)
	{
	}

	[Token(Token = "0x6000054")]
	[Address(RVA = "0xD625B4", Offset = "0xD625B4", VA = "0xD625B4")]
	public void appendUserProperty(string property, double[] array)
	{
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0xD62760", Offset = "0xD62760", VA = "0xD62760")]
	public void appendUserProperty(string property, float[] array)
	{
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0xD6290C", Offset = "0xD6290C", VA = "0xD6290C")]
	public void appendUserProperty(string property, int[] array)
	{
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0xD62AB8", Offset = "0xD62AB8", VA = "0xD62AB8")]
	public void appendUserProperty(string property, long[] array)
	{
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0xD62C64", Offset = "0xD62C64", VA = "0xD62C64")]
	public void appendUserProperty(string property, string[] array)
	{
	}

	[Token(Token = "0x6000059")]
	[Address(RVA = "0xD62E10", Offset = "0xD62E10", VA = "0xD62E10")]
	public void prependUserProperty(string property, bool value)
	{
	}

	[Token(Token = "0x600005A")]
	[Address(RVA = "0xD62FDC", Offset = "0xD62FDC", VA = "0xD62FDC")]
	public void prependUserProperty(string property, double value)
	{
	}

	[Token(Token = "0x600005B")]
	[Address(RVA = "0xD631A8", Offset = "0xD631A8", VA = "0xD631A8")]
	public void prependUserProperty(string property, float value)
	{
	}

	[Token(Token = "0x600005C")]
	[Address(RVA = "0xD63374", Offset = "0xD63374", VA = "0xD63374")]
	public void prependUserProperty(string property, int value)
	{
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0xD63540", Offset = "0xD63540", VA = "0xD63540")]
	public void prependUserProperty(string property, long value)
	{
	}

	[Token(Token = "0x600005E")]
	[Address(RVA = "0xD6370C", Offset = "0xD6370C", VA = "0xD6370C")]
	public void prependUserProperty(string property, string value)
	{
	}

	[Token(Token = "0x600005F")]
	[Address(RVA = "0xD638A0", Offset = "0xD638A0", VA = "0xD638A0")]
	public void prependUserProperty(string property, IDictionary<string, object> values)
	{
	}

	[Token(Token = "0x6000060")]
	public void prependUserProperty<T>(string property, IList<T> values)
	{
	}

	[Token(Token = "0x6000061")]
	[Address(RVA = "0xD63A4C", Offset = "0xD63A4C", VA = "0xD63A4C")]
	public void prependUserProperty(string property, bool[] array)
	{
	}

	[Token(Token = "0x6000062")]
	[Address(RVA = "0xD63BF8", Offset = "0xD63BF8", VA = "0xD63BF8")]
	public void prependUserProperty(string property, double[] array)
	{
	}

	[Token(Token = "0x6000063")]
	[Address(RVA = "0xD63DA4", Offset = "0xD63DA4", VA = "0xD63DA4")]
	public void prependUserProperty(string property, float[] array)
	{
	}

	[Token(Token = "0x6000064")]
	[Address(RVA = "0xD63F50", Offset = "0xD63F50", VA = "0xD63F50")]
	public void prependUserProperty(string property, int[] array)
	{
	}

	[Token(Token = "0x6000065")]
	[Address(RVA = "0xD640FC", Offset = "0xD640FC", VA = "0xD640FC")]
	public void prependUserProperty(string property, long[] array)
	{
	}

	[Token(Token = "0x6000066")]
	[Address(RVA = "0xD642A8", Offset = "0xD642A8", VA = "0xD642A8")]
	public void prependUserProperty(string property, string[] array)
	{
	}

	[Token(Token = "0x6000067")]
	[Address(RVA = "0xD64454", Offset = "0xD64454", VA = "0xD64454")]
	public void preInsertUserProperty(string property, bool value)
	{
	}

	[Token(Token = "0x6000068")]
	[Address(RVA = "0xD64620", Offset = "0xD64620", VA = "0xD64620")]
	public void preInsertUserProperty(string property, double value)
	{
	}

	[Token(Token = "0x6000069")]
	[Address(RVA = "0xD647EC", Offset = "0xD647EC", VA = "0xD647EC")]
	public void preInsertUserProperty(string property, float value)
	{
	}

	[Token(Token = "0x600006A")]
	[Address(RVA = "0xD649B8", Offset = "0xD649B8", VA = "0xD649B8")]
	public void preInsertUserProperty(string property, int value)
	{
	}

	[Token(Token = "0x600006B")]
	[Address(RVA = "0xD64B84", Offset = "0xD64B84", VA = "0xD64B84")]
	public void preInsertUserProperty(string property, long value)
	{
	}

	[Token(Token = "0x600006C")]
	[Address(RVA = "0xD64D50", Offset = "0xD64D50", VA = "0xD64D50")]
	public void preInsertUserProperty(string property, string value)
	{
	}

	[Token(Token = "0x600006D")]
	[Address(RVA = "0xD64EE4", Offset = "0xD64EE4", VA = "0xD64EE4")]
	public void preInsertUserProperty(string property, IDictionary<string, object> values)
	{
	}

	[Token(Token = "0x600006E")]
	public void preInsertUserProperty<T>(string property, IList<T> values)
	{
	}

	[Token(Token = "0x600006F")]
	[Address(RVA = "0xD65090", Offset = "0xD65090", VA = "0xD65090")]
	public void preInsertUserProperty(string property, bool[] array)
	{
	}

	[Token(Token = "0x6000070")]
	[Address(RVA = "0xD6523C", Offset = "0xD6523C", VA = "0xD6523C")]
	public void preInsertUserProperty(string property, double[] array)
	{
	}

	[Token(Token = "0x6000071")]
	[Address(RVA = "0xD653E8", Offset = "0xD653E8", VA = "0xD653E8")]
	public void preInsertUserProperty(string property, float[] array)
	{
	}

	[Token(Token = "0x6000072")]
	[Address(RVA = "0xD65594", Offset = "0xD65594", VA = "0xD65594")]
	public void preInsertUserProperty(string property, int[] array)
	{
	}

	[Token(Token = "0x6000073")]
	[Address(RVA = "0xD65740", Offset = "0xD65740", VA = "0xD65740")]
	public void preInsertUserProperty(string property, long[] array)
	{
	}

	[Token(Token = "0x6000074")]
	[Address(RVA = "0xD658EC", Offset = "0xD658EC", VA = "0xD658EC")]
	public void preInsertUserProperty(string property, string[] array)
	{
	}

	[Token(Token = "0x6000075")]
	[Address(RVA = "0xD65A98", Offset = "0xD65A98", VA = "0xD65A98")]
	public void postInsertUserProperty(string property, bool value)
	{
	}

	[Token(Token = "0x6000076")]
	[Address(RVA = "0xD65C64", Offset = "0xD65C64", VA = "0xD65C64")]
	public void postInsertUserProperty(string property, double value)
	{
	}

	[Token(Token = "0x6000077")]
	[Address(RVA = "0xD65E30", Offset = "0xD65E30", VA = "0xD65E30")]
	public void postInsertUserProperty(string property, float value)
	{
	}

	[Token(Token = "0x6000078")]
	[Address(RVA = "0xD65FFC", Offset = "0xD65FFC", VA = "0xD65FFC")]
	public void postInsertUserProperty(string property, int value)
	{
	}

	[Token(Token = "0x6000079")]
	[Address(RVA = "0xD661C8", Offset = "0xD661C8", VA = "0xD661C8")]
	public void postInsertUserProperty(string property, long value)
	{
	}

	[Token(Token = "0x600007A")]
	[Address(RVA = "0xD66394", Offset = "0xD66394", VA = "0xD66394")]
	public void postInsertUserProperty(string property, string value)
	{
	}

	[Token(Token = "0x600007B")]
	[Address(RVA = "0xD66528", Offset = "0xD66528", VA = "0xD66528")]
	public void postInsertUserProperty(string property, IDictionary<string, object> values)
	{
	}

	[Token(Token = "0x600007C")]
	public void postInsertUserProperty<T>(string property, IList<T> values)
	{
	}

	[Token(Token = "0x600007D")]
	[Address(RVA = "0xD666D4", Offset = "0xD666D4", VA = "0xD666D4")]
	public void postInsertUserProperty(string property, bool[] array)
	{
	}

	[Token(Token = "0x600007E")]
	[Address(RVA = "0xD66880", Offset = "0xD66880", VA = "0xD66880")]
	public void postInsertUserProperty(string property, double[] array)
	{
	}

	[Token(Token = "0x600007F")]
	[Address(RVA = "0xD66A2C", Offset = "0xD66A2C", VA = "0xD66A2C")]
	public void postInsertUserProperty(string property, float[] array)
	{
	}

	[Token(Token = "0x6000080")]
	[Address(RVA = "0xD66BD8", Offset = "0xD66BD8", VA = "0xD66BD8")]
	public void postInsertUserProperty(string property, int[] array)
	{
	}

	[Token(Token = "0x6000081")]
	[Address(RVA = "0xD66D84", Offset = "0xD66D84", VA = "0xD66D84")]
	public void postInsertUserProperty(string property, long[] array)
	{
	}

	[Token(Token = "0x6000082")]
	[Address(RVA = "0xD66F30", Offset = "0xD66F30", VA = "0xD66F30")]
	public void postInsertUserProperty(string property, string[] array)
	{
	}

	[Token(Token = "0x6000083")]
	[Address(RVA = "0xD670DC", Offset = "0xD670DC", VA = "0xD670DC")]
	public void removeUserProperty(string property, bool value)
	{
	}

	[Token(Token = "0x6000084")]
	[Address(RVA = "0xD672A8", Offset = "0xD672A8", VA = "0xD672A8")]
	public void removeUserProperty(string property, double value)
	{
	}

	[Token(Token = "0x6000085")]
	[Address(RVA = "0xD67474", Offset = "0xD67474", VA = "0xD67474")]
	public void removeUserProperty(string property, float value)
	{
	}

	[Token(Token = "0x6000086")]
	[Address(RVA = "0xD67640", Offset = "0xD67640", VA = "0xD67640")]
	public void removeUserProperty(string property, int value)
	{
	}

	[Token(Token = "0x6000087")]
	[Address(RVA = "0xD6780C", Offset = "0xD6780C", VA = "0xD6780C")]
	public void removeUserProperty(string property, long value)
	{
	}

	[Token(Token = "0x6000088")]
	[Address(RVA = "0xD679D8", Offset = "0xD679D8", VA = "0xD679D8")]
	public void removeUserProperty(string property, string value)
	{
	}

	[Token(Token = "0x6000089")]
	[Address(RVA = "0xD67B6C", Offset = "0xD67B6C", VA = "0xD67B6C")]
	public void removeUserProperty(string property, IDictionary<string, object> values)
	{
	}

	[Token(Token = "0x600008A")]
	public void removeUserProperty<T>(string property, IList<T> values)
	{
	}

	[Token(Token = "0x600008B")]
	[Address(RVA = "0xD67D18", Offset = "0xD67D18", VA = "0xD67D18")]
	public void removeUserProperty(string property, bool[] array)
	{
	}

	[Token(Token = "0x600008C")]
	[Address(RVA = "0xD67EC4", Offset = "0xD67EC4", VA = "0xD67EC4")]
	public void removeUserProperty(string property, double[] array)
	{
	}

	[Token(Token = "0x600008D")]
	[Address(RVA = "0xD68070", Offset = "0xD68070", VA = "0xD68070")]
	public void removeUserProperty(string property, float[] array)
	{
	}

	[Token(Token = "0x600008E")]
	[Address(RVA = "0xD6821C", Offset = "0xD6821C", VA = "0xD6821C")]
	public void removeUserProperty(string property, int[] array)
	{
	}

	[Token(Token = "0x600008F")]
	[Address(RVA = "0xD683C8", Offset = "0xD683C8", VA = "0xD683C8")]
	public void removeUserProperty(string property, long[] array)
	{
	}

	[Token(Token = "0x6000090")]
	[Address(RVA = "0xD68574", Offset = "0xD68574", VA = "0xD68574")]
	public void removeUserProperty(string property, string[] array)
	{
	}

	[Token(Token = "0x6000091")]
	[Address(RVA = "0xD59C74", Offset = "0xD59C74", VA = "0xD59C74")]
	private void setLibraryName(string libraryName)
	{
	}

	[Token(Token = "0x6000092")]
	[Address(RVA = "0xD59DCC", Offset = "0xD59DCC", VA = "0xD59DCC")]
	private void setLibraryVersion(string libraryVersion)
	{
	}

	[Token(Token = "0x6000093")]
	[Address(RVA = "0xD68720", Offset = "0xD68720", VA = "0xD68720")]
	public void startSession()
	{
	}

	[Token(Token = "0x6000094")]
	[Address(RVA = "0xD68724", Offset = "0xD68724", VA = "0xD68724")]
	public void endSession()
	{
	}
}
[Token(Token = "0x2000003")]
public enum AmplitudeServerZone
{
	[Token(Token = "0x400000A")]
	US,
	[Token(Token = "0x400000B")]
	EU
}
[Token(Token = "0x2000004")]
public class FixNonUniformScale : MonoBehaviour
{
	[Token(Token = "0x400000C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool running;

	[Token(Token = "0x6000096")]
	[Address(RVA = "0xD68830", Offset = "0xD68830", VA = "0xD68830")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000097")]
	[Address(RVA = "0xD688AC", Offset = "0xD688AC", VA = "0xD688AC")]
	public void MakeUniform()
	{
	}

	[Token(Token = "0x6000098")]
	[Address(RVA = "0xD68D34", Offset = "0xD68D34", VA = "0xD68D34")]
	public FixNonUniformScale()
	{
	}
}
[Token(Token = "0x2000005")]
public class DebugUIBuilder : MonoBehaviour
{
	[Token(Token = "0x2000006")]
	public delegate void OnClick();

	[Token(Token = "0x2000007")]
	public delegate void OnToggleValueChange(Toggle t);

	[Token(Token = "0x2000008")]
	public delegate void OnSlider(float f);

	[Token(Token = "0x2000009")]
	public delegate bool ActiveUpdate();

	[Token(Token = "0x400000D")]
	public const int DEBUG_PANE_CENTER = 0;

	[Token(Token = "0x400000E")]
	public const int DEBUG_PANE_RIGHT = 1;

	[Token(Token = "0x400000F")]
	public const int DEBUG_PANE_LEFT = 2;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private RectTransform buttonPrefab;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private RectTransform[] additionalButtonPrefab;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private RectTransform labelPrefab;

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private RectTransform sliderPrefab;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private RectTransform dividerPrefab;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private RectTransform togglePrefab;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private RectTransform radioPrefab;

	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private RectTransform textPrefab;

	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private GameObject uiHelpersToInstantiate;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private Transform[] targetContentPanels;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private bool[] reEnable;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private List<GameObject> toEnable;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private List<GameObject> toDisable;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static DebugUIBuilder instance;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float elementSpacing;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float marginH;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float marginV;

	[Token(Token = "0x4000021")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Vector2[] insertPositions;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private List<RectTransform>[] insertedElements;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private Vector3 menuOffset;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private OVRCameraRig rig;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Dictionary<string, ToggleGroup> radioGroups;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private LaserPointer lp;

	[Token(Token = "0x4000027")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private LineRenderer lr;

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public LaserPointer.LaserBeamBehavior laserBeamBehavior;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public bool isHorizontal;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD5")]
	public bool usePanelCentricRelayout;

	[Token(Token = "0x6000099")]
	[Address(RVA = "0xD68D3C", Offset = "0xD68D3C", VA = "0xD68D3C")]
	public void Awake()
	{
	}

	[Token(Token = "0x600009A")]
	[Address(RVA = "0xD692A8", Offset = "0xD692A8", VA = "0xD692A8")]
	public void Show()
	{
	}

	[Token(Token = "0x600009B")]
	[Address(RVA = "0xD69624", Offset = "0xD69624", VA = "0xD69624")]
	public void Hide()
	{
	}

	[Token(Token = "0x600009C")]
	[Address(RVA = "0xD697A0", Offset = "0xD697A0", VA = "0xD697A0")]
	private void StackedRelayout()
	{
	}

	[Token(Token = "0x600009D")]
	[Address(RVA = "0xD699B8", Offset = "0xD699B8", VA = "0xD699B8")]
	private void PanelCentricRelayout()
	{
	}

	[Token(Token = "0x600009E")]
	[Address(RVA = "0xD69614", Offset = "0xD69614", VA = "0xD69614")]
	private void Relayout()
	{
	}

	[Token(Token = "0x600009F")]
	[Address(RVA = "0xD69CAC", Offset = "0xD69CAC", VA = "0xD69CAC")]
	private void AddRect(RectTransform r, int targetCanvas)
	{
	}

	[Token(Token = "0x60000A0")]
	[Address(RVA = "0xD6A028", Offset = "0xD6A028", VA = "0xD6A028")]
	public RectTransform AddButton(string label, [Optional] OnClick handler, int buttonIndex = -1, int targetCanvas = 0, bool highResolutionText = false)
	{
		return null;
	}

	[Token(Token = "0x60000A1")]
	[Address(RVA = "0xD6A3D8", Offset = "0xD6A3D8", VA = "0xD6A3D8")]
	public RectTransform AddLabel(string label, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60000A2")]
	[Address(RVA = "0xD6A4D0", Offset = "0xD6A4D0", VA = "0xD6A4D0")]
	public RectTransform AddSlider(string label, float min, float max, OnSlider onValueChanged, bool wholeNumbersOnly = false, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60000A3")]
	[Address(RVA = "0xD6A6A0", Offset = "0xD6A6A0", VA = "0xD6A6A0")]
	public RectTransform AddDivider(int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60000A4")]
	[Address(RVA = "0xD6A738", Offset = "0xD6A738", VA = "0xD6A738")]
	public RectTransform AddToggle(string label, OnToggleValueChange onValueChanged, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60000A5")]
	[Address(RVA = "0xD6A914", Offset = "0xD6A914", VA = "0xD6A914")]
	public RectTransform AddToggle(string label, OnToggleValueChange onValueChanged, bool defaultValue, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60000A6")]
	[Address(RVA = "0xD6AB10", Offset = "0xD6AB10", VA = "0xD6AB10")]
	public RectTransform AddRadio(string label, string group, OnToggleValueChange handler, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60000A7")]
	[Address(RVA = "0xD6AE08", Offset = "0xD6AE08", VA = "0xD6AE08")]
	public RectTransform AddTextField(string label, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x60000A8")]
	[Address(RVA = "0xD6AEF8", Offset = "0xD6AEF8", VA = "0xD6AEF8")]
	public void ToggleLaserPointer(bool isOn)
	{
	}

	[Token(Token = "0x60000A9")]
	[Address(RVA = "0xD6AF8C", Offset = "0xD6AF8C", VA = "0xD6AF8C")]
	public DebugUIBuilder()
	{
	}
}
[Token(Token = "0x200000F")]
public class HandedInputSelector : MonoBehaviour
{
	[Token(Token = "0x4000033")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRCameraRig m_CameraRig;

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private OVRInputModule m_InputModule;

	[Token(Token = "0x60000C4")]
	[Address(RVA = "0xD6B60C", Offset = "0xD6B60C", VA = "0xD6B60C")]
	private void Start()
	{
	}

	[Token(Token = "0x60000C5")]
	[Address(RVA = "0xD6B6B0", Offset = "0xD6B6B0", VA = "0xD6B6B0")]
	private void Update()
	{
	}

	[Token(Token = "0x60000C6")]
	[Address(RVA = "0xD6B74C", Offset = "0xD6B74C", VA = "0xD6B74C")]
	private void SetActiveController(OVRInput.Controller c)
	{
	}

	[Token(Token = "0x60000C7")]
	[Address(RVA = "0xD6B784", Offset = "0xD6B784", VA = "0xD6B784")]
	public HandedInputSelector()
	{
	}
}
[Token(Token = "0x2000010")]
public class LaserPointer : OVRCursor
{
	[Token(Token = "0x2000011")]
	public enum LaserBeamBehavior
	{
		[Token(Token = "0x400003F")]
		On,
		[Token(Token = "0x4000040")]
		Off,
		[Token(Token = "0x4000041")]
		OnWhenHitTarget
	}

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject cursorVisual;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float maxLength;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private LaserBeamBehavior _laserBeamBehavior;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool m_restoreOnInputAcquired;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 _startPoint;

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 _forward;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Vector3 _endPoint;

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool _hitTarget;

	[Token(Token = "0x400003D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private LineRenderer lineRenderer;

	[Token(Token = "0x17000002")]
	public LaserBeamBehavior laserBeamBehavior
	{
		[Token(Token = "0x60000C9")]
		[Address(RVA = "0xD6B78C", Offset = "0xD6B78C", VA = "0xD6B78C")]
		get
		{
			return default(LaserBeamBehavior);
		}
		[Token(Token = "0x60000C8")]
		[Address(RVA = "0xD69268", Offset = "0xD69268", VA = "0xD69268")]
		set
		{
		}
	}

	[Token(Token = "0x60000CA")]
	[Address(RVA = "0xD6B794", Offset = "0xD6B794", VA = "0xD6B794")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000CB")]
	[Address(RVA = "0xD6B7EC", Offset = "0xD6B7EC", VA = "0xD6B7EC")]
	private void Start()
	{
	}

	[Token(Token = "0x60000CC")]
	[Address(RVA = "0xD6B924", Offset = "0xD6B924", VA = "0xD6B924", Slot = "5")]
	public override void SetCursorStartDest(Vector3 start, Vector3 dest, Vector3 normal)
	{
	}

	[Token(Token = "0x60000CD")]
	[Address(RVA = "0xD6B940", Offset = "0xD6B940", VA = "0xD6B940", Slot = "4")]
	public override void SetCursorRay(Transform t)
	{
	}

	[Token(Token = "0x60000CE")]
	[Address(RVA = "0xD6B990", Offset = "0xD6B990", VA = "0xD6B990")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60000CF")]
	[Address(RVA = "0xD6BB30", Offset = "0xD6BB30", VA = "0xD6BB30")]
	private void UpdateLaserBeam(Vector3 start, Vector3 end)
	{
	}

	[Token(Token = "0x60000D0")]
	[Address(RVA = "0xD6BC40", Offset = "0xD6BC40", VA = "0xD6BC40")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000D1")]
	[Address(RVA = "0xD6BCC4", Offset = "0xD6BCC4", VA = "0xD6BCC4")]
	public void OnInputFocusLost()
	{
	}

	[Token(Token = "0x60000D2")]
	[Address(RVA = "0xD6BD84", Offset = "0xD6BD84", VA = "0xD6BD84")]
	public void OnInputFocusAcquired()
	{
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0xD6BE2C", Offset = "0xD6BE2C", VA = "0xD6BE2C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0xD6BF18", Offset = "0xD6BF18", VA = "0xD6BF18")]
	public LaserPointer()
	{
	}
}
[Token(Token = "0x2000012")]
public class CharacterCameraConstraint : MonoBehaviour
{
	[Token(Token = "0x4000042")]
	private const float FADE_RAY_LENGTH = 0.25f;

	[Token(Token = "0x4000043")]
	private const float FADE_OVERLAP_MAXIMUM = 0.1f;

	[Token(Token = "0x4000044")]
	private const float FADE_AMOUNT_MAXIMUM = 1f;

	[Token(Token = "0x4000045")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("This should be a reference to the OVRCameraRig that is usually a child of the PlayerController.")]
	public OVRCameraRig CameraRig;

	[Token(Token = "0x4000046")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("Collision layers to be used for the purposes of fading out the screen when the HMD is inside world geometry and adjusting the capsule height.")]
	public LayerMask CollideLayers;

	[Token(Token = "0x4000047")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("Offset is added to camera's real world height, effectively treating it as though the player was taller/standing higher.")]
	public float HeightOffset;

	[Token(Token = "0x4000048")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("Minimum height that the character capsule can shrink to.  To disable, set to capsule's height.")]
	public float MinimumHeight;

	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("Maximum height that the character capsule can grow to.  To disable, set to capsule's height.")]
	public float MaximumHeight;

	[Token(Token = "0x400004A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private CapsuleCollider _character;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private SimpleCapsuleWithStickMovement _simplePlayerController;

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0xD6BF28", Offset = "0xD6BF28", VA = "0xD6BF28")]
	private CharacterCameraConstraint()
	{
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0xD6BF30", Offset = "0xD6BF30", VA = "0xD6BF30")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0xD6BFC0", Offset = "0xD6BFC0", VA = "0xD6BFC0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0xD6C0E4", Offset = "0xD6C0E4", VA = "0xD6C0E4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0xD6C208", Offset = "0xD6C208", VA = "0xD6C208")]
	private void CameraUpdate()
	{
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0xD6C528", Offset = "0xD6C528", VA = "0xD6C528")]
	private bool CheckCameraOverlapped()
	{
		return default(bool);
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0xD6C788", Offset = "0xD6C788", VA = "0xD6C788")]
	private bool CheckCameraNearClipping(out float result)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000013")]
public class LocomotionController : MonoBehaviour
{
	[Token(Token = "0x400004C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRCameraRig CameraRig;

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public CapsuleCollider CharacterController;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public SimpleCapsuleWithStickMovement PlayerController;

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0xD6CEE0", Offset = "0xD6CEE0", VA = "0xD6CEE0")]
	private void Start()
	{
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0xD6CF8C", Offset = "0xD6CF8C", VA = "0xD6CF8C")]
	public LocomotionController()
	{
	}
}
[Token(Token = "0x2000014")]
public class LocomotionTeleport : MonoBehaviour
{
	[Token(Token = "0x2000015")]
	public enum States
	{
		[Token(Token = "0x4000072")]
		Ready,
		[Token(Token = "0x4000073")]
		Aim,
		[Token(Token = "0x4000074")]
		CancelAim,
		[Token(Token = "0x4000075")]
		PreTeleport,
		[Token(Token = "0x4000076")]
		CancelTeleport,
		[Token(Token = "0x4000077")]
		Teleporting,
		[Token(Token = "0x4000078")]
		PostTeleport
	}

	[Token(Token = "0x2000016")]
	public enum TeleportIntentions
	{
		[Token(Token = "0x400007A")]
		None,
		[Token(Token = "0x400007B")]
		Aim,
		[Token(Token = "0x400007C")]
		PreTeleport,
		[Token(Token = "0x400007D")]
		Teleport
	}

	[Token(Token = "0x2000017")]
	public enum AimCollisionTypes
	{
		[Token(Token = "0x400007F")]
		Point,
		[Token(Token = "0x4000080")]
		Sphere,
		[Token(Token = "0x4000081")]
		Capsule
	}

	[Token(Token = "0x2000018")]
	public class AimData
	{
		[Token(Token = "0x4000082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public RaycastHit TargetHitInfo;

		[Token(Token = "0x4000083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool TargetValid;

		[Token(Token = "0x4000084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3? Destination;

		[Token(Token = "0x4000085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float Radius;

		[Token(Token = "0x17000006")]
		public List<Vector3> Points
		{
			[Token(Token = "0x6000113")]
			[Address(RVA = "0xD6ECCC", Offset = "0xD6ECCC", VA = "0xD6ECCC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000114")]
			[Address(RVA = "0xD6ECD4", Offset = "0xD6ECD4", VA = "0xD6ECD4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000112")]
		[Address(RVA = "0xD6EC44", Offset = "0xD6EC44", VA = "0xD6EC44")]
		public AimData()
		{
		}

		[Token(Token = "0x6000115")]
		[Address(RVA = "0xD6ECDC", Offset = "0xD6ECDC", VA = "0xD6ECDC")]
		public void Reset()
		{
		}
	}

	[Token(Token = "0x2000019")]
	[CompilerGenerated]
	private sealed class <ReadyStateCoroutine>d__52 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000007")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000119")]
			[Address(RVA = "0xD6EE44", Offset = "0xD6EE44", VA = "0xD6EE44", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000008")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600011B")]
			[Address(RVA = "0xD6EE8C", Offset = "0xD6EE8C", VA = "0xD6EE8C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000116")]
		[Address(RVA = "0xD6D998", Offset = "0xD6D998", VA = "0xD6D998")]
		[DebuggerHidden]
		public <ReadyStateCoroutine>d__52(int <>1__state)
		{
		}

		[Token(Token = "0x6000117")]
		[Address(RVA = "0xD6ED34", Offset = "0xD6ED34", VA = "0xD6ED34", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000118")]
		[Address(RVA = "0xD6ED38", Offset = "0xD6ED38", VA = "0xD6ED38", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600011A")]
		[Address(RVA = "0xD6EE4C", Offset = "0xD6EE4C", VA = "0xD6EE4C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200001A")]
	[CompilerGenerated]
	private sealed class <AimStateCoroutine>d__64 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400008A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400008B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400008C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000009")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600011F")]
			[Address(RVA = "0xD6EFF0", Offset = "0xD6EFF0", VA = "0xD6EFF0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000121")]
			[Address(RVA = "0xD6F038", Offset = "0xD6F038", VA = "0xD6F038", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600011C")]
		[Address(RVA = "0xD6DE20", Offset = "0xD6DE20", VA = "0xD6DE20")]
		[DebuggerHidden]
		public <AimStateCoroutine>d__64(int <>1__state)
		{
		}

		[Token(Token = "0x600011D")]
		[Address(RVA = "0xD6EE94", Offset = "0xD6EE94", VA = "0xD6EE94", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600011E")]
		[Address(RVA = "0xD6EE98", Offset = "0xD6EE98", VA = "0xD6EE98", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000120")]
		[Address(RVA = "0xD6EFF8", Offset = "0xD6EFF8", VA = "0xD6EFF8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200001B")]
	[CompilerGenerated]
	private sealed class <CancelAimStateCoroutine>d__68 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400008D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400008E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400008F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x1700000B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000125")]
			[Address(RVA = "0xD6F0F0", Offset = "0xD6F0F0", VA = "0xD6F0F0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000127")]
			[Address(RVA = "0xD6F138", Offset = "0xD6F138", VA = "0xD6F138", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000122")]
		[Address(RVA = "0xD6DFF4", Offset = "0xD6DFF4", VA = "0xD6DFF4")]
		[DebuggerHidden]
		public <CancelAimStateCoroutine>d__68(int <>1__state)
		{
		}

		[Token(Token = "0x6000123")]
		[Address(RVA = "0xD6F040", Offset = "0xD6F040", VA = "0xD6F040", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000124")]
		[Address(RVA = "0xD6F044", Offset = "0xD6F044", VA = "0xD6F044", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000126")]
		[Address(RVA = "0xD6F0F8", Offset = "0xD6F0F8", VA = "0xD6F0F8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200001C")]
	[CompilerGenerated]
	private sealed class <PreTeleportStateCoroutine>d__72 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x1700000D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600012B")]
			[Address(RVA = "0xD6F228", Offset = "0xD6F228", VA = "0xD6F228", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700000E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600012D")]
			[Address(RVA = "0xD6F270", Offset = "0xD6F270", VA = "0xD6F270", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000128")]
		[Address(RVA = "0xD6E1C8", Offset = "0xD6E1C8", VA = "0xD6E1C8")]
		[DebuggerHidden]
		public <PreTeleportStateCoroutine>d__72(int <>1__state)
		{
		}

		[Token(Token = "0x6000129")]
		[Address(RVA = "0xD6F140", Offset = "0xD6F140", VA = "0xD6F140", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600012A")]
		[Address(RVA = "0xD6F144", Offset = "0xD6F144", VA = "0xD6F144", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600012C")]
		[Address(RVA = "0xD6F230", Offset = "0xD6F230", VA = "0xD6F230", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200001D")]
	[CompilerGenerated]
	private sealed class <CancelTeleportStateCoroutine>d__76 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x1700000F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000131")]
			[Address(RVA = "0xD6F328", Offset = "0xD6F328", VA = "0xD6F328", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000010")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000133")]
			[Address(RVA = "0xD6F370", Offset = "0xD6F370", VA = "0xD6F370", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600012E")]
		[Address(RVA = "0xD6E39C", Offset = "0xD6E39C", VA = "0xD6E39C")]
		[DebuggerHidden]
		public <CancelTeleportStateCoroutine>d__76(int <>1__state)
		{
		}

		[Token(Token = "0x600012F")]
		[Address(RVA = "0xD6F278", Offset = "0xD6F278", VA = "0xD6F278", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000130")]
		[Address(RVA = "0xD6F27C", Offset = "0xD6F27C", VA = "0xD6F27C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000132")]
		[Address(RVA = "0xD6F330", Offset = "0xD6F330", VA = "0xD6F330", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200001E")]
	[CompilerGenerated]
	private sealed class <TeleportingStateCoroutine>d__80 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000011")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000137")]
			[Address(RVA = "0xD6F45C", Offset = "0xD6F45C", VA = "0xD6F45C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000012")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000139")]
			[Address(RVA = "0xD6F4A4", Offset = "0xD6F4A4", VA = "0xD6F4A4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000134")]
		[Address(RVA = "0xD6E570", Offset = "0xD6E570", VA = "0xD6E570")]
		[DebuggerHidden]
		public <TeleportingStateCoroutine>d__80(int <>1__state)
		{
		}

		[Token(Token = "0x6000135")]
		[Address(RVA = "0xD6F378", Offset = "0xD6F378", VA = "0xD6F378", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000136")]
		[Address(RVA = "0xD6F37C", Offset = "0xD6F37C", VA = "0xD6F37C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000138")]
		[Address(RVA = "0xD6F464", Offset = "0xD6F464", VA = "0xD6F464", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200001F")]
	[CompilerGenerated]
	private sealed class <PostTeleportStateCoroutine>d__84 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400009A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400009B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LocomotionTeleport <>4__this;

		[Token(Token = "0x17000013")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600013D")]
			[Address(RVA = "0xD6F5AC", Offset = "0xD6F5AC", VA = "0xD6F5AC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000014")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600013F")]
			[Address(RVA = "0xD6F5F4", Offset = "0xD6F5F4", VA = "0xD6F5F4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600013A")]
		[Address(RVA = "0xD6E744", Offset = "0xD6E744", VA = "0xD6E744")]
		[DebuggerHidden]
		public <PostTeleportStateCoroutine>d__84(int <>1__state)
		{
		}

		[Token(Token = "0x600013B")]
		[Address(RVA = "0xD6F4AC", Offset = "0xD6F4AC", VA = "0xD6F4AC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600013C")]
		[Address(RVA = "0xD6F4B0", Offset = "0xD6F4B0", VA = "0xD6F4B0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600013E")]
		[Address(RVA = "0xD6F5B4", Offset = "0xD6F5B4", VA = "0xD6F5B4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Allow linear movement prior to the teleport system being activated.")]
	public bool EnableMovementDuringReady;

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	[Tooltip("Allow linear movement while the teleport system is in the process of aiming for a teleport target.")]
	public bool EnableMovementDuringAim;

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	[Tooltip("Allow linear movement while the teleport system is in the process of configuring the landing orientation.")]
	public bool EnableMovementDuringPreTeleport;

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	[Tooltip("Allow linear movement after the teleport has occurred but before the system has returned to the ready state.")]
	public bool EnableMovementDuringPostTeleport;

	[Token(Token = "0x4000053")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Tooltip("Allow rotation prior to the teleport system being activated.")]
	public bool EnableRotationDuringReady;

	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	[Tooltip("Allow rotation while the teleport system is in the process of aiming for a teleport target.")]
	public bool EnableRotationDuringAim;

	[Token(Token = "0x4000055")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	[Tooltip("Allow rotation while the teleport system is in the process of configuring the landing orientation.")]
	public bool EnableRotationDuringPreTeleport;

	[Token(Token = "0x4000056")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
	[Tooltip("Allow rotation after the teleport has occurred but before the system has returned to the ready state.")]
	public bool EnableRotationDuringPostTeleport;

	[NonSerialized]
	[Token(Token = "0x4000058")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public TeleportAimHandler AimHandler;

	[Token(Token = "0x4000059")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("This prefab will be instantiated as needed and updated to match the current aim target.")]
	public TeleportDestination TeleportDestinationPrefab;

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("TeleportDestinationPrefab will be instantiated into this layer.")]
	public int TeleportDestinationLayer;

	[NonSerialized]
	[Token(Token = "0x400005C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TeleportInputHandler InputHandler;

	[NonSerialized]
	[Token(Token = "0x400005D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public TeleportIntentions CurrentIntention;

	[NonSerialized]
	[Token(Token = "0x400005E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool IsPreTeleportRequested;

	[NonSerialized]
	[Token(Token = "0x400005F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	public bool IsTransitioning;

	[NonSerialized]
	[Token(Token = "0x4000060")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
	public bool IsPostTeleportRequested;

	[Token(Token = "0x4000061")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private TeleportDestination _teleportDestination;

	[Token(Token = "0x4000063")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Tooltip("When aiming at possible destinations, the aim collision type determines which shape to use for collision tests.")]
	public AimCollisionTypes AimCollisionType;

	[Token(Token = "0x4000064")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[Tooltip("Use the character collision radius/height/skinwidth for sphere/capsule collision tests.")]
	public bool UseCharacterCollisionData;

	[Token(Token = "0x4000065")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Tooltip("Radius of the sphere or capsule used for collision testing when aiming to possible teleport destinations. Ignored if UseCharacterCollisionData is true.")]
	public float AimCollisionRadius;

	[Token(Token = "0x4000066")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	[Tooltip("Height of the capsule used for collision testing when aiming to possible teleport destinations. Ignored if UseCharacterCollisionData is true.")]
	public float AimCollisionHeight;

	[Token(Token = "0x17000003")]
	public States CurrentState
	{
		[Token(Token = "0x60000E0")]
		[Address(RVA = "0xD6CFDC", Offset = "0xD6CFDC", VA = "0xD6CFDC")]
		[CompilerGenerated]
		get
		{
			return default(States);
		}
		[Token(Token = "0x60000E1")]
		[Address(RVA = "0xD6CFE4", Offset = "0xD6CFE4", VA = "0xD6CFE4")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000004")]
	public Quaternion DestinationRotation
	{
		[Token(Token = "0x60000E5")]
		[Address(RVA = "0xD6D1B4", Offset = "0xD6D1B4", VA = "0xD6D1B4")]
		get
		{
			return default(Quaternion);
		}
	}

	[Token(Token = "0x17000005")]
	public LocomotionController LocomotionController
	{
		[Token(Token = "0x60000E6")]
		[Address(RVA = "0xD6D1D8", Offset = "0xD6D1D8", VA = "0xD6D1D8")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60000E7")]
		[Address(RVA = "0xD6D1E0", Offset = "0xD6D1E0", VA = "0xD6D1E0")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x14000001")]
	public event Action<bool, Vector3?, Quaternion?, Quaternion?> UpdateTeleportDestination
	{
		[Token(Token = "0x60000E2")]
		[Address(RVA = "0xD6CFEC", Offset = "0xD6CFEC", VA = "0xD6CFEC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60000E3")]
		[Address(RVA = "0xD6D09C", Offset = "0xD6D09C", VA = "0xD6D09C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000002")]
	public event Action EnterStateReady
	{
		[Token(Token = "0x60000F1")]
		[Address(RVA = "0xD6D860", Offset = "0xD6D860", VA = "0xD6D860")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60000F2")]
		[Address(RVA = "0xD6D8FC", Offset = "0xD6D8FC", VA = "0xD6D8FC")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000003")]
	public event Action EnterStateAim
	{
		[Token(Token = "0x60000F4")]
		[Address(RVA = "0xD6D9C0", Offset = "0xD6D9C0", VA = "0xD6D9C0")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60000F5")]
		[Address(RVA = "0xD6DA5C", Offset = "0xD6DA5C", VA = "0xD6DA5C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000004")]
	public event Action<AimData> UpdateAimData
	{
		[Token(Token = "0x60000F6")]
		[Address(RVA = "0xD6DAF8", Offset = "0xD6DAF8", VA = "0xD6DAF8")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60000F7")]
		[Address(RVA = "0xD6DBA8", Offset = "0xD6DBA8", VA = "0xD6DBA8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000005")]
	public event Action ExitStateAim
	{
		[Token(Token = "0x60000F9")]
		[Address(RVA = "0xD6DC74", Offset = "0xD6DC74", VA = "0xD6DC74")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60000FA")]
		[Address(RVA = "0xD6DD10", Offset = "0xD6DD10", VA = "0xD6DD10")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000006")]
	public event Action EnterStateCancelAim
	{
		[Token(Token = "0x60000FC")]
		[Address(RVA = "0xD6DE48", Offset = "0xD6DE48", VA = "0xD6DE48")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60000FD")]
		[Address(RVA = "0xD6DEE4", Offset = "0xD6DEE4", VA = "0xD6DEE4")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000007")]
	public event Action EnterStatePreTeleport
	{
		[Token(Token = "0x60000FF")]
		[Address(RVA = "0xD6E01C", Offset = "0xD6E01C", VA = "0xD6E01C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000100")]
		[Address(RVA = "0xD6E0B8", Offset = "0xD6E0B8", VA = "0xD6E0B8")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000008")]
	public event Action EnterStateCancelTeleport
	{
		[Token(Token = "0x6000102")]
		[Address(RVA = "0xD6E1F0", Offset = "0xD6E1F0", VA = "0xD6E1F0")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000103")]
		[Address(RVA = "0xD6E28C", Offset = "0xD6E28C", VA = "0xD6E28C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x14000009")]
	public event Action EnterStateTeleporting
	{
		[Token(Token = "0x6000105")]
		[Address(RVA = "0xD6E3C4", Offset = "0xD6E3C4", VA = "0xD6E3C4")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000106")]
		[Address(RVA = "0xD6E460", Offset = "0xD6E460", VA = "0xD6E460")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000A")]
	public event Action EnterStatePostTeleport
	{
		[Token(Token = "0x6000108")]
		[Address(RVA = "0xD6E598", Offset = "0xD6E598", VA = "0xD6E598")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000109")]
		[Address(RVA = "0xD6E634", Offset = "0xD6E634", VA = "0xD6E634")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000B")]
	public event Action<Transform, Vector3, Quaternion> Teleported
	{
		[Token(Token = "0x600010B")]
		[Address(RVA = "0xD6E76C", Offset = "0xD6E76C", VA = "0xD6E76C")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x600010C")]
		[Address(RVA = "0xD6E81C", Offset = "0xD6E81C", VA = "0xD6E81C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0xD6CF94", Offset = "0xD6CF94", VA = "0xD6CF94")]
	public void EnableMovement(bool ready, bool aim, bool pre, bool post)
	{
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0xD6CFB8", Offset = "0xD6CFB8", VA = "0xD6CFB8")]
	public void EnableRotation(bool ready, bool aim, bool pre, bool post)
	{
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0xD6D14C", Offset = "0xD6D14C", VA = "0xD6D14C")]
	public void OnUpdateTeleportDestination(bool isValidDestination, Vector3? position, Quaternion? rotation, Quaternion? landingRotation)
	{
	}

	[Token(Token = "0x60000E8")]
	[Address(RVA = "0xD6D1E8", Offset = "0xD6D1E8", VA = "0xD6D1E8")]
	public bool AimCollisionTest(Vector3 start, Vector3 end, LayerMask aimCollisionLayerMask, out RaycastHit hitInfo)
	{
		return default(bool);
	}

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0xD6D4B0", Offset = "0xD6D4B0", VA = "0xD6D4B0")]
	[Conditional("DEBUG_TELEPORT_STATES")]
	protected void LogState(string msg)
	{
	}

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0xD6D558", Offset = "0xD6D558", VA = "0xD6D558")]
	protected void CreateNewTeleportDestination()
	{
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0xD6D644", Offset = "0xD6D644", VA = "0xD6D644")]
	private void DeactivateDestination()
	{
	}

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0xD6D680", Offset = "0xD6D680", VA = "0xD6D680")]
	public void RecycleTeleportDestination(TeleportDestination oldDestination)
	{
	}

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0xD6D730", Offset = "0xD6D730", VA = "0xD6D730")]
	private void EnableMotion(bool enableLinear, bool enableRotation)
	{
	}

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0xD6D760", Offset = "0xD6D760", VA = "0xD6D760")]
	private void Awake()
	{
	}

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0xD6D7C0", Offset = "0xD6D7C0", VA = "0xD6D7C0", Slot = "4")]
	public virtual void OnEnable()
	{
	}

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0xD6D858", Offset = "0xD6D858", VA = "0xD6D858", Slot = "5")]
	public virtual void OnDisable()
	{
	}

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0xD6D7E4", Offset = "0xD6D7E4", VA = "0xD6D7E4")]
	[IteratorStateMachine(typeof(<ReadyStateCoroutine>d__52))]
	protected IEnumerator ReadyStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60000F8")]
	[Address(RVA = "0xD6DC58", Offset = "0xD6DC58", VA = "0xD6DC58")]
	public void OnUpdateAimData(AimData aimData)
	{
	}

	[Token(Token = "0x60000FB")]
	[Address(RVA = "0xD6DDAC", Offset = "0xD6DDAC", VA = "0xD6DDAC")]
	[IteratorStateMachine(typeof(<AimStateCoroutine>d__64))]
	protected IEnumerator AimStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60000FE")]
	[Address(RVA = "0xD6DF80", Offset = "0xD6DF80", VA = "0xD6DF80")]
	[IteratorStateMachine(typeof(<CancelAimStateCoroutine>d__68))]
	protected IEnumerator CancelAimStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000101")]
	[Address(RVA = "0xD6E154", Offset = "0xD6E154", VA = "0xD6E154")]
	[IteratorStateMachine(typeof(<PreTeleportStateCoroutine>d__72))]
	protected IEnumerator PreTeleportStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000104")]
	[Address(RVA = "0xD6E328", Offset = "0xD6E328", VA = "0xD6E328")]
	[IteratorStateMachine(typeof(<CancelTeleportStateCoroutine>d__76))]
	protected IEnumerator CancelTeleportStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0xD6E4FC", Offset = "0xD6E4FC", VA = "0xD6E4FC")]
	[IteratorStateMachine(typeof(<TeleportingStateCoroutine>d__80))]
	protected IEnumerator TeleportingStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0xD6E6D0", Offset = "0xD6E6D0", VA = "0xD6E6D0")]
	[IteratorStateMachine(typeof(<PostTeleportStateCoroutine>d__84))]
	protected IEnumerator PostTeleportStateCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600010D")]
	[Address(RVA = "0xD6E8CC", Offset = "0xD6E8CC", VA = "0xD6E8CC")]
	public void DoTeleport()
	{
	}

	[Token(Token = "0x600010E")]
	[Address(RVA = "0xD6E9E0", Offset = "0xD6E9E0", VA = "0xD6E9E0")]
	public Vector3 GetCharacterPosition()
	{
		return default(Vector3);
	}

	[Token(Token = "0x600010F")]
	[Address(RVA = "0xD6EA10", Offset = "0xD6EA10", VA = "0xD6EA10")]
	public Quaternion GetHeadRotationY()
	{
		return default(Quaternion);
	}

	[Token(Token = "0x6000110")]
	[Address(RVA = "0xD6EB4C", Offset = "0xD6EB4C", VA = "0xD6EB4C")]
	public void DoWarp(Vector3 startPos, float positionPercent)
	{
	}

	[Token(Token = "0x6000111")]
	[Address(RVA = "0xD6EC34", Offset = "0xD6EC34", VA = "0xD6EC34")]
	public LocomotionTeleport()
	{
	}
}
[Token(Token = "0x2000020")]
public class SimpleCapsuleWithStickMovement : MonoBehaviour
{
	[Token(Token = "0x400009C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool EnableLinearMovement;

	[Token(Token = "0x400009D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool EnableRotation;

	[Token(Token = "0x400009E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool HMDRotatesPlayer;

	[Token(Token = "0x400009F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
	public bool RotationEitherThumbstick;

	[Token(Token = "0x40000A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float RotationAngle;

	[Token(Token = "0x40000A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Speed;

	[Token(Token = "0x40000A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRCameraRig CameraRig;

	[Token(Token = "0x40000A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool ReadyToSnapTurn;

	[Token(Token = "0x40000A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Rigidbody _rigidbody;

	[Token(Token = "0x1400000C")]
	public event Action CameraUpdated
	{
		[Token(Token = "0x6000140")]
		[Address(RVA = "0xD6C048", Offset = "0xD6C048", VA = "0xD6C048")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000141")]
		[Address(RVA = "0xD6C16C", Offset = "0xD6C16C", VA = "0xD6C16C")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x1400000D")]
	public event Action PreCharacterMove
	{
		[Token(Token = "0x6000142")]
		[Address(RVA = "0xD6F5FC", Offset = "0xD6F5FC", VA = "0xD6F5FC")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000143")]
		[Address(RVA = "0xD6F698", Offset = "0xD6F698", VA = "0xD6F698")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0xD6F734", Offset = "0xD6F734", VA = "0xD6F734")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000145")]
	[Address(RVA = "0xD6F814", Offset = "0xD6F814", VA = "0xD6F814")]
	private void Start()
	{
	}

	[Token(Token = "0x6000146")]
	[Address(RVA = "0xD6F818", Offset = "0xD6F818", VA = "0xD6F818")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0xD6F88C", Offset = "0xD6F88C", VA = "0xD6F88C")]
	private void RotatePlayerToHMD()
	{
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0xD6F9B0", Offset = "0xD6F9B0", VA = "0xD6F9B0")]
	private void StickMovement()
	{
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0xD6FC28", Offset = "0xD6FC28", VA = "0xD6FC28")]
	private void SnapTurn()
	{
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0xD6FE48", Offset = "0xD6FE48", VA = "0xD6FE48")]
	public SimpleCapsuleWithStickMovement()
	{
	}
}
[Token(Token = "0x2000021")]
public abstract class TeleportAimHandler : TeleportSupport
{
	[Token(Token = "0x600014B")]
	[Address(RVA = "0xD6FE68", Offset = "0xD6FE68", VA = "0xD6FE68", Slot = "4")]
	protected override void OnEnable()
	{
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0xD6FEF8", Offset = "0xD6FEF8", VA = "0xD6FEF8", Slot = "5")]
	protected override void OnDisable()
	{
	}

	[Token(Token = "0x600014D")]
	public abstract void GetPoints(List<Vector3> points);

	[Token(Token = "0x600014E")]
	[Address(RVA = "0xD6FFC8", Offset = "0xD6FFC8", VA = "0xD6FFC8")]
	protected TeleportAimHandler()
	{
	}
}
[Token(Token = "0x2000022")]
public class TeleportAimHandlerLaser : TeleportAimHandler
{
	[Token(Token = "0x40000A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("Maximum range for aiming.")]
	public float Range;

	[Token(Token = "0x600014F")]
	[Address(RVA = "0xD6FFD8", Offset = "0xD6FFD8", VA = "0xD6FFD8", Slot = "8")]
	public override void GetPoints(List<Vector3> points)
	{
	}

	[Token(Token = "0x6000150")]
	[Address(RVA = "0xD70168", Offset = "0xD70168", VA = "0xD70168")]
	public TeleportAimHandlerLaser()
	{
	}
}
[Token(Token = "0x2000023")]
public class TeleportAimHandlerParabolic : TeleportAimHandler
{
	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("Maximum range for aiming.")]
	public float Range;

	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The MinimumElevation is relative to the AimPosition.")]
	public float MinimumElevation;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("The Gravity is used in conjunction with AimVelocity and the aim direction to simulate a projectile.")]
	public float Gravity;

	[Token(Token = "0x40000AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Range(0.001f, 50f)]
	[Tooltip("The AimVelocity is the initial speed of the faked projectile.")]
	public float AimVelocity;

	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Tooltip("The AimStep is the how much to subdivide the iteration.")]
	[Range(0.001f, 1f)]
	public float AimStep;

	[Token(Token = "0x6000151")]
	[Address(RVA = "0xD70178", Offset = "0xD70178", VA = "0xD70178", Slot = "8")]
	public override void GetPoints(List<Vector3> points)
	{
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0xD7034C", Offset = "0xD7034C", VA = "0xD7034C")]
	public TeleportAimHandlerParabolic()
	{
	}
}
[Token(Token = "0x2000024")]
public class TeleportAimVisualLaser : TeleportSupport
{
	[Token(Token = "0x40000AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("This prefab will be instantiated when the aim visual is awakened, and will be set active when the user is aiming, and deactivated when they are done aiming.")]
	public LineRenderer LaserPrefab;

	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _enterAimStateAction;

	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly Action _exitAimStateAction;

	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private readonly Action<LocomotionTeleport.AimData> _updateAimDataAction;

	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private LineRenderer _lineRenderer;

	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3[] _linePoints;

	[Token(Token = "0x6000153")]
	[Address(RVA = "0xD70360", Offset = "0xD70360", VA = "0xD70360")]
	public TeleportAimVisualLaser()
	{
	}

	[Token(Token = "0x6000154")]
	[Address(RVA = "0xD7048C", Offset = "0xD7048C", VA = "0xD7048C")]
	private void EnterAimState()
	{
	}

	[Token(Token = "0x6000155")]
	[Address(RVA = "0xD704B8", Offset = "0xD704B8", VA = "0xD704B8")]
	private void ExitAimState()
	{
	}

	[Token(Token = "0x6000156")]
	[Address(RVA = "0xD704E4", Offset = "0xD704E4", VA = "0xD704E4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000157")]
	[Address(RVA = "0xD70588", Offset = "0xD70588", VA = "0xD70588", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x6000158")]
	[Address(RVA = "0xD705DC", Offset = "0xD705DC", VA = "0xD705DC", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x6000159")]
	[Address(RVA = "0xD7062C", Offset = "0xD7062C", VA = "0xD7062C")]
	private void UpdateAimData(LocomotionTeleport.AimData obj)
	{
	}
}
[Token(Token = "0x2000025")]
public class TeleportDestination : MonoBehaviour
{
	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("If the target handler provides a target position, this transform will be moved to that position and it's game object enabled. A target position being provided does not mean the position is valid, only that the aim handler found something to test as a destination.")]
	public Transform PositionIndicator;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("This transform will be rotated to match the rotation of the aiming target. Simple teleport destinations should assign this to the object containing this component. More complex teleport destinations might assign this to a sub-object that is used to indicate the landing orientation independently from the rest of the destination indicator, such as when world space effects are required. This will typically be a child of the PositionIndicator.")]
	public Transform OrientationIndicator;

	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("After the player teleports, the character controller will have it's rotation set to this value. It is different from the OrientationIndicator transform.rotation in order to support both head-relative and forward-facing teleport modes (See TeleportOrientationHandlerThumbstick.cs).")]
	public Quaternion LandingRotation;

	[NonSerialized]
	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public LocomotionTeleport LocomotionTeleport;

	[NonSerialized]
	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public LocomotionTeleport.States TeleportState;

	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private readonly Action<bool, Vector3?, Quaternion?, Quaternion?> _updateTeleportDestinationAction;

	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool _eventsActive;

	[Token(Token = "0x17000015")]
	public bool IsValidDestination
	{
		[Token(Token = "0x600015A")]
		[Address(RVA = "0xD70728", Offset = "0xD70728", VA = "0xD70728")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600015B")]
		[Address(RVA = "0xD70730", Offset = "0xD70730", VA = "0xD70730")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1400000E")]
	public event Action<TeleportDestination> Deactivated
	{
		[Token(Token = "0x6000160")]
		[Address(RVA = "0xD708B8", Offset = "0xD708B8", VA = "0xD708B8")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x6000161")]
		[Address(RVA = "0xD70968", Offset = "0xD70968", VA = "0xD70968")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0xD7073C", Offset = "0xD7073C", VA = "0xD7073C")]
	private TeleportDestination()
	{
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0xD707C0", Offset = "0xD707C0", VA = "0xD707C0")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0xD70884", Offset = "0xD70884", VA = "0xD70884")]
	private void TryDisableEventHandlers()
	{
	}

	[Token(Token = "0x600015F")]
	[Address(RVA = "0xD708B4", Offset = "0xD708B4", VA = "0xD708B4")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x6000162")]
	[Address(RVA = "0xD6D65C", Offset = "0xD6D65C", VA = "0xD6D65C")]
	public void OnDeactivated()
	{
	}

	[Token(Token = "0x6000163")]
	[Address(RVA = "0xD70A18", Offset = "0xD70A18", VA = "0xD70A18")]
	public void Recycle()
	{
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0xD70A34", Offset = "0xD70A34", VA = "0xD70A34", Slot = "4")]
	public virtual void UpdateTeleportDestination(bool isValidDestination, Vector3? position, Quaternion? rotation, Quaternion? landingRotation)
	{
	}
}
[Token(Token = "0x2000026")]
public abstract class TeleportInputHandler : TeleportSupport
{
	[Token(Token = "0x2000027")]
	[CompilerGenerated]
	private sealed class <TeleportReadyCoroutine>d__5 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportInputHandler <>4__this;

		[Token(Token = "0x17000016")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000171")]
			[Address(RVA = "0xD70FFC", Offset = "0xD70FFC", VA = "0xD70FFC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000017")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000173")]
			[Address(RVA = "0xD71044", Offset = "0xD71044", VA = "0xD71044", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600016E")]
		[Address(RVA = "0xD70E68", Offset = "0xD70E68", VA = "0xD70E68")]
		[DebuggerHidden]
		public <TeleportReadyCoroutine>d__5(int <>1__state)
		{
		}

		[Token(Token = "0x600016F")]
		[Address(RVA = "0xD70F6C", Offset = "0xD70F6C", VA = "0xD70F6C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000170")]
		[Address(RVA = "0xD70F70", Offset = "0xD70F70", VA = "0xD70F70", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000172")]
		[Address(RVA = "0xD71004", Offset = "0xD71004", VA = "0xD71004", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000028")]
	[CompilerGenerated]
	private sealed class <TeleportAimCoroutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportInputHandler <>4__this;

		[Token(Token = "0x17000018")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000177")]
			[Address(RVA = "0xD710E8", Offset = "0xD710E8", VA = "0xD710E8", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000019")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000179")]
			[Address(RVA = "0xD71130", Offset = "0xD71130", VA = "0xD71130", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000174")]
		[Address(RVA = "0xD70F04", Offset = "0xD70F04", VA = "0xD70F04")]
		[DebuggerHidden]
		public <TeleportAimCoroutine>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000175")]
		[Address(RVA = "0xD7104C", Offset = "0xD7104C", VA = "0xD7104C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000176")]
		[Address(RVA = "0xD71050", Offset = "0xD71050", VA = "0xD71050", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000178")]
		[Address(RVA = "0xD710F0", Offset = "0xD710F0", VA = "0xD710F0", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly Action _startReadyAction;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _startAimAction;

	[Token(Token = "0x6000165")]
	[Address(RVA = "0xD70C28", Offset = "0xD70C28", VA = "0xD70C28")]
	protected TeleportInputHandler()
	{
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0xD70CFC", Offset = "0xD70CFC", VA = "0xD70CFC", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0xD70D48", Offset = "0xD70D48", VA = "0xD70D48", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0xD70DF4", Offset = "0xD70DF4", VA = "0xD70DF4")]
	[IteratorStateMachine(typeof(<TeleportReadyCoroutine>d__5))]
	private IEnumerator TeleportReadyCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000169")]
	[Address(RVA = "0xD70E90", Offset = "0xD70E90", VA = "0xD70E90")]
	[IteratorStateMachine(typeof(<TeleportAimCoroutine>d__6))]
	private IEnumerator TeleportAimCoroutine()
	{
		return null;
	}

	[Token(Token = "0x600016A")]
	public abstract LocomotionTeleport.TeleportIntentions GetIntention();

	[Token(Token = "0x600016B")]
	public abstract void GetAimData(out Ray aimRay);
}
[Token(Token = "0x2000029")]
public class TeleportInputHandlerHMD : TeleportInputHandler
{
	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("The button used to begin aiming for a teleport.")]
	public OVRInput.RawButton AimButton;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("The button used to trigger the teleport after aiming. It can be the same button as the AimButton, however you cannot abort a teleport if it is.")]
	public OVRInput.RawButton TeleportButton;

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("When true, the system will not use the PreTeleport intention which will allow a teleport to occur on a button downpress. When false, the button downpress will trigger the PreTeleport intention and the Teleport intention when the button is released.")]
	public bool FastTeleport;

	[Token(Token = "0x1700001A")]
	public Transform Pointer
	{
		[Token(Token = "0x600017A")]
		[Address(RVA = "0xD71138", Offset = "0xD71138", VA = "0xD71138")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600017B")]
		[Address(RVA = "0xD71140", Offset = "0xD71140", VA = "0xD71140")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x600017C")]
	[Address(RVA = "0xD71148", Offset = "0xD71148", VA = "0xD71148", Slot = "8")]
	public override LocomotionTeleport.TeleportIntentions GetIntention()
	{
		return default(LocomotionTeleport.TeleportIntentions);
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0xD71274", Offset = "0xD71274", VA = "0xD71274", Slot = "9")]
	public override void GetAimData(out Ray aimRay)
	{
	}

	[Token(Token = "0x600017E")]
	[Address(RVA = "0xD71328", Offset = "0xD71328", VA = "0xD71328")]
	public TeleportInputHandlerHMD()
	{
	}
}
[Token(Token = "0x200002A")]
public class TeleportInputHandlerTouch : TeleportInputHandlerHMD
{
	[Token(Token = "0x200002B")]
	public enum InputModes
	{
		[Token(Token = "0x40000D2")]
		CapacitiveButtonForAimAndTeleport,
		[Token(Token = "0x40000D3")]
		SeparateButtonsForAimAndTeleport,
		[Token(Token = "0x40000D4")]
		ThumbstickTeleport,
		[Token(Token = "0x40000D5")]
		ThumbstickTeleportForwardBackOnly
	}

	[Token(Token = "0x200002C")]
	public enum AimCapTouchButtons
	{
		[Token(Token = "0x40000D7")]
		A,
		[Token(Token = "0x40000D8")]
		B,
		[Token(Token = "0x40000D9")]
		LeftTrigger,
		[Token(Token = "0x40000DA")]
		LeftThumbstick,
		[Token(Token = "0x40000DB")]
		RightTrigger,
		[Token(Token = "0x40000DC")]
		RightThumbstick,
		[Token(Token = "0x40000DD")]
		X,
		[Token(Token = "0x40000DE")]
		Y
	}

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform LeftHand;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform RightHand;

	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Tooltip("CapacitiveButtonForAimAndTeleport=Activate aiming via cap touch detection, press the same button to teleport.\nSeparateButtonsForAimAndTeleport=Use one button to begin aiming, and another to trigger the teleport.\nThumbstickTeleport=Push a thumbstick to begin aiming, release to teleport.")]
	public InputModes InputMode;

	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private readonly OVRInput.RawButton[] _rawButtons;

	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private readonly OVRInput.RawTouch[] _rawTouch;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[Tooltip("Select the controller to be used for aiming. Supports LTouch, RTouch, or Touch for either.")]
	public OVRInput.Controller AimingController;

	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private OVRInput.Controller InitiatingController;

	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[Tooltip("Select the button to use for triggering aim and teleport when InputMode==CapacitiveButtonForAimAndTeleport")]
	public AimCapTouchButtons CapacitiveAimAndTeleportButton;

	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[Tooltip("The thumbstick magnitude required to trigger aiming and teleports when InputMode==InputModes.ThumbstickTeleport")]
	public float ThumbstickTeleportThreshold;

	[Token(Token = "0x600017F")]
	[Address(RVA = "0xD7132C", Offset = "0xD7132C", VA = "0xD7132C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000180")]
	[Address(RVA = "0xD71330", Offset = "0xD71330", VA = "0xD71330", Slot = "8")]
	public override LocomotionTeleport.TeleportIntentions GetIntention()
	{
		return default(LocomotionTeleport.TeleportIntentions);
	}

	[Token(Token = "0x6000181")]
	[Address(RVA = "0xD71764", Offset = "0xD71764", VA = "0xD71764", Slot = "9")]
	public override void GetAimData(out Ray aimRay)
	{
	}

	[Token(Token = "0x6000182")]
	[Address(RVA = "0xD71820", Offset = "0xD71820", VA = "0xD71820")]
	public TeleportInputHandlerTouch()
	{
	}
}
[Token(Token = "0x200002D")]
public abstract class TeleportOrientationHandler : TeleportSupport
{
	[Token(Token = "0x200002E")]
	public enum OrientationModes
	{
		[Token(Token = "0x40000E3")]
		HeadRelative,
		[Token(Token = "0x40000E4")]
		ForwardFacing
	}

	[Token(Token = "0x200002F")]
	[CompilerGenerated]
	private sealed class <UpdateOrientationCoroutine>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40000E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40000E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportOrientationHandler <>4__this;

		[Token(Token = "0x1700001B")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600018F")]
			[Address(RVA = "0xD71CD0", Offset = "0xD71CD0", VA = "0xD71CD0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001C")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000191")]
			[Address(RVA = "0xD71D18", Offset = "0xD71D18", VA = "0xD71D18", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600018C")]
		[Address(RVA = "0xD71AE0", Offset = "0xD71AE0", VA = "0xD71AE0")]
		[DebuggerHidden]
		public <UpdateOrientationCoroutine>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x600018D")]
		[Address(RVA = "0xD71C20", Offset = "0xD71C20", VA = "0xD71C20", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600018E")]
		[Address(RVA = "0xD71C24", Offset = "0xD71C24", VA = "0xD71C24", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000190")]
		[Address(RVA = "0xD71CD8", Offset = "0xD71CD8", VA = "0xD71CD8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private readonly Action _updateOrientationAction;

	[Token(Token = "0x40000E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action<LocomotionTeleport.AimData> _updateAimDataAction;

	[Token(Token = "0x40000E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	protected LocomotionTeleport.AimData AimData;

	[Token(Token = "0x6000183")]
	[Address(RVA = "0xD71910", Offset = "0xD71910", VA = "0xD71910")]
	protected TeleportOrientationHandler()
	{
	}

	[Token(Token = "0x6000184")]
	[Address(RVA = "0xD719F8", Offset = "0xD719F8", VA = "0xD719F8")]
	private void UpdateAimData(LocomotionTeleport.AimData aimData)
	{
	}

	[Token(Token = "0x6000185")]
	[Address(RVA = "0xD71A00", Offset = "0xD71A00", VA = "0xD71A00", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x6000186")]
	[Address(RVA = "0xD71A38", Offset = "0xD71A38", VA = "0xD71A38", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0xD71A6C", Offset = "0xD71A6C", VA = "0xD71A6C")]
	[IteratorStateMachine(typeof(<UpdateOrientationCoroutine>d__7))]
	private IEnumerator UpdateOrientationCoroutine()
	{
		return null;
	}

	[Token(Token = "0x6000188")]
	protected abstract void InitializeTeleportDestination();

	[Token(Token = "0x6000189")]
	protected abstract void UpdateTeleportDestination();

	[Token(Token = "0x600018A")]
	[Address(RVA = "0xD71B08", Offset = "0xD71B08", VA = "0xD71B08")]
	protected Quaternion GetLandingOrientation(OrientationModes mode, Quaternion rotation)
	{
		return default(Quaternion);
	}
}
[Token(Token = "0x2000030")]
public class TeleportOrientationHandler360 : TeleportOrientationHandler
{
	[Token(Token = "0x6000192")]
	[Address(RVA = "0xD71D20", Offset = "0xD71D20", VA = "0xD71D20", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0xD71D24", Offset = "0xD71D24", VA = "0xD71D24", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Token(Token = "0x6000194")]
	[Address(RVA = "0xD71DCC", Offset = "0xD71DCC", VA = "0xD71DCC")]
	public TeleportOrientationHandler360()
	{
	}
}
[Token(Token = "0x2000031")]
public class TeleportOrientationHandlerHMD : TeleportOrientationHandler
{
	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("HeadRelative=Character will orient to match the arrow. ForwardFacing=When user orients to match the arrow, they will be facing the sensors.")]
	public OrientationModes OrientationMode;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("Should the destination orientation be updated during the aim state in addition to the PreTeleport state?")]
	public bool UpdateOrientationDuringAim;

	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("How far from the destination must the HMD be pointing before using it for orientation")]
	public float AimDistanceThreshold;

	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	[Tooltip("How far from the destination must the HMD be pointing before rejecting the teleport")]
	public float AimDistanceMaxRange;

	[Token(Token = "0x40000EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Quaternion _initialRotation;

	[Token(Token = "0x6000195")]
	[Address(RVA = "0xD71DD0", Offset = "0xD71DD0", VA = "0xD71DD0", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Token(Token = "0x6000196")]
	[Address(RVA = "0xD71E20", Offset = "0xD71E20", VA = "0xD71E20", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Token(Token = "0x6000197")]
	[Address(RVA = "0xD722E4", Offset = "0xD722E4", VA = "0xD722E4")]
	public TeleportOrientationHandlerHMD()
	{
	}
}
[Token(Token = "0x2000032")]
public class TeleportOrientationHandlerThumbstick : TeleportOrientationHandler
{
	[Token(Token = "0x40000ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("HeadRelative=Character will orient to match the arrow. ForwardFacing=When user orients to match the arrow, they will be facing the sensors.")]
	public OrientationModes OrientationMode;

	[Token(Token = "0x40000EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("Which thumbstick is to be used for adjusting the teleport orientation. Supports LTouch, RTouch, or Touch for either.")]
	public OVRInput.Controller Thumbstick;

	[Token(Token = "0x40000EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Tooltip("The orientation will only change if the thumbstick magnitude is above this value. This will usually be larger than the TeleportInputHandlerTouch.ThumbstickTeleportThreshold.")]
	public float RotateStickThreshold;

	[Token(Token = "0x40000F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Quaternion _initialRotation;

	[Token(Token = "0x40000F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Quaternion _currentRotation;

	[Token(Token = "0x40000F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector2 _lastValidDirection;

	[Token(Token = "0x6000198")]
	[Address(RVA = "0xD722E8", Offset = "0xD722E8", VA = "0xD722E8", Slot = "8")]
	protected override void InitializeTeleportDestination()
	{
	}

	[Token(Token = "0x6000199")]
	[Address(RVA = "0xD7231C", Offset = "0xD7231C", VA = "0xD7231C", Slot = "9")]
	protected override void UpdateTeleportDestination()
	{
	}

	[Token(Token = "0x600019A")]
	[Address(RVA = "0xD72818", Offset = "0xD72818", VA = "0xD72818")]
	public TeleportOrientationHandlerThumbstick()
	{
	}
}
[Token(Token = "0x2000033")]
public class TeleportPoint : MonoBehaviour
{
	[Token(Token = "0x40000F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float dimmingSpeed;

	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float fullIntensity;

	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float lowIntensity;

	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform destTransform;

	[Token(Token = "0x40000F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float lastLookAtTime;

	[Token(Token = "0x600019B")]
	[Address(RVA = "0xD72828", Offset = "0xD72828", VA = "0xD72828")]
	private void Start()
	{
	}

	[Token(Token = "0x600019C")]
	[Address(RVA = "0xD7282C", Offset = "0xD7282C", VA = "0xD7282C")]
	public Transform GetDestTransform()
	{
		return null;
	}

	[Token(Token = "0x600019D")]
	[Address(RVA = "0xD72834", Offset = "0xD72834", VA = "0xD72834")]
	private void Update()
	{
	}

	[Token(Token = "0x600019E")]
	[Address(RVA = "0xD72920", Offset = "0xD72920", VA = "0xD72920")]
	public void OnLookAt()
	{
	}

	[Token(Token = "0x600019F")]
	[Address(RVA = "0xD7293C", Offset = "0xD7293C", VA = "0xD7293C")]
	public TeleportPoint()
	{
	}
}
[Token(Token = "0x2000034")]
public abstract class TeleportSupport : MonoBehaviour
{
	[Token(Token = "0x40000F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool _eventsActive;

	[Token(Token = "0x1700001D")]
	protected LocomotionTeleport LocomotionTeleport
	{
		[Token(Token = "0x60001A0")]
		[Address(RVA = "0xD72954", Offset = "0xD72954", VA = "0xD72954")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60001A1")]
		[Address(RVA = "0xD7295C", Offset = "0xD7295C", VA = "0xD7295C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60001A2")]
	[Address(RVA = "0xD6FE90", Offset = "0xD6FE90", VA = "0xD6FE90", Slot = "4")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x60001A3")]
	[Address(RVA = "0xD6FFA0", Offset = "0xD6FFA0", VA = "0xD6FFA0", Slot = "5")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x60001A4")]
	[Address(RVA = "0xD72964", Offset = "0xD72964", VA = "0xD72964")]
	[Conditional("DEBUG_TELEPORT_EVENT_HANDLERS")]
	private void LogEventHandler(string msg)
	{
	}

	[Token(Token = "0x60001A5")]
	[Address(RVA = "0xD705D0", Offset = "0xD705D0", VA = "0xD705D0", Slot = "6")]
	protected virtual void AddEventHandlers()
	{
	}

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0xD70624", Offset = "0xD70624", VA = "0xD70624", Slot = "7")]
	protected virtual void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x60001A7")]
	[Address(RVA = "0xD6FFD0", Offset = "0xD6FFD0", VA = "0xD6FFD0")]
	protected TeleportSupport()
	{
	}
}
[Token(Token = "0x2000035")]
public abstract class TeleportTargetHandler : TeleportSupport
{
	[Token(Token = "0x2000036")]
	[CompilerGenerated]
	private sealed class <TargetAimCoroutine>d__7 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40000FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTargetHandler <>4__this;

		[Token(Token = "0x1700001E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001B3")]
			[Address(RVA = "0xD73054", Offset = "0xD73054", VA = "0xD73054", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700001F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001B5")]
			[Address(RVA = "0xD7309C", Offset = "0xD7309C", VA = "0xD7309C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001B0")]
		[Address(RVA = "0xD72C0C", Offset = "0xD72C0C", VA = "0xD72C0C")]
		[DebuggerHidden]
		public <TargetAimCoroutine>d__7(int <>1__state)
		{
		}

		[Token(Token = "0x60001B1")]
		[Address(RVA = "0xD72D88", Offset = "0xD72D88", VA = "0xD72D88", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001B2")]
		[Address(RVA = "0xD72D8C", Offset = "0xD72D8C", VA = "0xD72D8C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001B4")]
		[Address(RVA = "0xD7305C", Offset = "0xD7305C", VA = "0xD7305C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40000FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("This bitmask controls which game object layers will be included in the targeting collision tests.")]
	public LayerMask AimCollisionLayerMask;

	[Token(Token = "0x40000FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	protected readonly LocomotionTeleport.AimData AimData;

	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private readonly Action _startAimAction;

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private readonly List<Vector3> _aimPoints;

	[Token(Token = "0x40000FE")]
	private const float ERROR_MARGIN = 0.1f;

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0xD72A34", Offset = "0xD72A34", VA = "0xD72A34")]
	protected TeleportTargetHandler()
	{
	}

	[Token(Token = "0x60001A9")]
	[Address(RVA = "0xD72B4C", Offset = "0xD72B4C", VA = "0xD72B4C", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0xD72B74", Offset = "0xD72B74", VA = "0xD72B74", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0xD72B98", Offset = "0xD72B98", VA = "0xD72B98")]
	[IteratorStateMachine(typeof(<TargetAimCoroutine>d__7))]
	private IEnumerator TargetAimCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0xD72C34", Offset = "0xD72C34", VA = "0xD72C34", Slot = "8")]
	protected virtual void ResetAimData()
	{
	}

	[Token(Token = "0x60001AD")]
	protected abstract bool ConsiderTeleport(Vector3 start, ref Vector3 end);

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0xD72C4C", Offset = "0xD72C4C", VA = "0xD72C4C", Slot = "10")]
	public virtual Vector3? ConsiderDestination(Vector3 location)
	{
		return null;
	}
}
[Token(Token = "0x2000037")]
public class TeleportTargetHandlerNavMesh : TeleportTargetHandler
{
	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int NavMeshAreaMask;

	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private NavMeshPath _path;

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0xD730A4", Offset = "0xD730A4", VA = "0xD730A4")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0xD7310C", Offset = "0xD7310C", VA = "0xD7310C", Slot = "9")]
	protected override bool ConsiderTeleport(Vector3 start, ref Vector3 end)
	{
		return default(bool);
	}

	[Token(Token = "0x60001B8")]
	[Address(RVA = "0xD73274", Offset = "0xD73274", VA = "0xD73274", Slot = "10")]
	public override Vector3? ConsiderDestination(Vector3 location)
	{
		return null;
	}

	[Token(Token = "0x60001B9")]
	[Address(RVA = "0xD73360", Offset = "0xD73360", VA = "0xD73360")]
	[Conditional("SHOW_PATH_RESULT")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60001BA")]
	[Address(RVA = "0xD73364", Offset = "0xD73364", VA = "0xD73364")]
	public TeleportTargetHandlerNavMesh()
	{
	}
}
[Token(Token = "0x2000038")]
public class TeleportTargetHandlerNode : TeleportTargetHandler
{
	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Tooltip("When checking line of sight to the destination, add this value to the vertical offset for targeting collision checks.")]
	public float LOSOffset;

	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[Tooltip("Teleport logic will only work with TeleportPoint components that exist in the layers specified by this mask.")]
	public LayerMask TeleportLayerMask;

	[Token(Token = "0x60001BB")]
	[Address(RVA = "0xD73370", Offset = "0xD73370", VA = "0xD73370", Slot = "9")]
	protected override bool ConsiderTeleport(Vector3 start, ref Vector3 end)
	{
		return default(bool);
	}

	[Token(Token = "0x60001BC")]
	[Address(RVA = "0xD73568", Offset = "0xD73568", VA = "0xD73568")]
	public TeleportTargetHandlerNode()
	{
	}
}
[Token(Token = "0x2000039")]
public class TeleportTargetHandlerPhysical : TeleportTargetHandler
{
	[Token(Token = "0x60001BD")]
	[Address(RVA = "0xD73574", Offset = "0xD73574", VA = "0xD73574", Slot = "9")]
	protected override bool ConsiderTeleport(Vector3 start, ref Vector3 end)
	{
		return default(bool);
	}

	[Token(Token = "0x60001BE")]
	[Address(RVA = "0xD736DC", Offset = "0xD736DC", VA = "0xD736DC")]
	public TeleportTargetHandlerPhysical()
	{
	}
}
[Token(Token = "0x200003A")]
public abstract class TeleportTransition : TeleportSupport
{
	[Token(Token = "0x60001BF")]
	[Address(RVA = "0xD736E0", Offset = "0xD736E0", VA = "0xD736E0", Slot = "6")]
	protected override void AddEventHandlers()
	{
	}

	[Token(Token = "0x60001C0")]
	[Address(RVA = "0xD73764", Offset = "0xD73764", VA = "0xD73764", Slot = "7")]
	protected override void RemoveEventHandlers()
	{
	}

	[Token(Token = "0x60001C1")]
	protected abstract void LocomotionTeleportOnEnterStateTeleporting();

	[Token(Token = "0x60001C2")]
	[Address(RVA = "0xD737E4", Offset = "0xD737E4", VA = "0xD737E4")]
	protected TeleportTransition()
	{
	}
}
[Token(Token = "0x200003B")]
public class TeleportTransitionBlink : TeleportTransition
{
	[Token(Token = "0x200003C")]
	[CompilerGenerated]
	private sealed class <BlinkCoroutine>d__4 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400010A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400010B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTransitionBlink <>4__this;

		[Token(Token = "0x400010C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <elapsedTime>5__2;

		[Token(Token = "0x400010D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <teleportTime>5__3;

		[Token(Token = "0x400010E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool <teleported>5__4;

		[Token(Token = "0x17000020")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001C9")]
			[Address(RVA = "0xD73B48", Offset = "0xD73B48", VA = "0xD73B48", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000021")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001CB")]
			[Address(RVA = "0xD73B90", Offset = "0xD73B90", VA = "0xD73B90", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001C6")]
		[Address(RVA = "0xD73880", Offset = "0xD73880", VA = "0xD73880")]
		[DebuggerHidden]
		public <BlinkCoroutine>d__4(int <>1__state)
		{
		}

		[Token(Token = "0x60001C7")]
		[Address(RVA = "0xD73A44", Offset = "0xD73A44", VA = "0xD73A44", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001C8")]
		[Address(RVA = "0xD73A48", Offset = "0xD73A48", VA = "0xD73A48", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001CA")]
		[Address(RVA = "0xD73B50", Offset = "0xD73B50", VA = "0xD73B50", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("How long the transition takes. Usually this is greater than Teleport Delay.")]
	[Range(0.01f, 2f)]
	public float TransitionDuration;

	[Token(Token = "0x4000107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("At what percentage of the elapsed transition time does the teleport occur?")]
	[Range(0f, 1f)]
	public float TeleportDelay;

	[Token(Token = "0x4000108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Fade to black over the duration of the transition")]
	public AnimationCurve FadeLevels;

	[Token(Token = "0x60001C3")]
	[Address(RVA = "0xD737EC", Offset = "0xD737EC", VA = "0xD737EC", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Token(Token = "0x60001C4")]
	[Address(RVA = "0xD7380C", Offset = "0xD7380C", VA = "0xD7380C")]
	[IteratorStateMachine(typeof(<BlinkCoroutine>d__4))]
	protected IEnumerator BlinkCoroutine()
	{
		return null;
	}

	[Token(Token = "0x60001C5")]
	[Address(RVA = "0xD738A8", Offset = "0xD738A8", VA = "0xD738A8")]
	public TeleportTransitionBlink()
	{
	}
}
[Token(Token = "0x200003D")]
public class TeleportTransitionInstant : TeleportTransition
{
	[Token(Token = "0x60001CC")]
	[Address(RVA = "0xD73B98", Offset = "0xD73B98", VA = "0xD73B98", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Token(Token = "0x60001CD")]
	[Address(RVA = "0xD73BB0", Offset = "0xD73BB0", VA = "0xD73BB0")]
	public TeleportTransitionInstant()
	{
	}
}
[Token(Token = "0x200003E")]
public class TeleportTransitionWarp : TeleportTransition
{
	[Token(Token = "0x200003F")]
	[CompilerGenerated]
	private sealed class <DoWarp>d__3 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TeleportTransitionWarp <>4__this;

		[Token(Token = "0x4000114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 <startPosition>5__2;

		[Token(Token = "0x4000115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <elapsedTime>5__3;

		[Token(Token = "0x17000022")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60001D4")]
			[Address(RVA = "0xD73DD4", Offset = "0xD73DD4", VA = "0xD73DD4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000023")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60001D6")]
			[Address(RVA = "0xD73E1C", Offset = "0xD73E1C", VA = "0xD73E1C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60001D1")]
		[Address(RVA = "0xD73C4C", Offset = "0xD73C4C", VA = "0xD73C4C")]
		[DebuggerHidden]
		public <DoWarp>d__3(int <>1__state)
		{
		}

		[Token(Token = "0x60001D2")]
		[Address(RVA = "0xD73CBC", Offset = "0xD73CBC", VA = "0xD73CBC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60001D3")]
		[Address(RVA = "0xD73CC0", Offset = "0xD73CC0", VA = "0xD73CC0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60001D5")]
		[Address(RVA = "0xD73DDC", Offset = "0xD73DDC", VA = "0xD73DDC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400010F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Tooltip("How much time the warp transition takes to complete.")]
	[Range(0.01f, 1f)]
	public float TransitionDuration;

	[Token(Token = "0x4000110")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public AnimationCurve PositionLerp;

	[Token(Token = "0x60001CE")]
	[Address(RVA = "0xD73BB8", Offset = "0xD73BB8", VA = "0xD73BB8", Slot = "8")]
	protected override void LocomotionTeleportOnEnterStateTeleporting()
	{
	}

	[Token(Token = "0x60001CF")]
	[Address(RVA = "0xD73BD8", Offset = "0xD73BD8", VA = "0xD73BD8")]
	[IteratorStateMachine(typeof(<DoWarp>d__3))]
	private IEnumerator DoWarp()
	{
		return null;
	}

	[Token(Token = "0x60001D0")]
	[Address(RVA = "0xD73C74", Offset = "0xD73C74", VA = "0xD73C74")]
	public TeleportTransitionWarp()
	{
	}
}
[Token(Token = "0x2000040")]
public static class NativeVideoPlayer
{
	[Token(Token = "0x2000041")]
	public enum PlabackState
	{
		[Token(Token = "0x400012E")]
		Idle = 1,
		[Token(Token = "0x400012F")]
		Preparing,
		[Token(Token = "0x4000130")]
		Buffering,
		[Token(Token = "0x4000131")]
		Ready,
		[Token(Token = "0x4000132")]
		Ended
	}

	[Token(Token = "0x2000042")]
	public enum StereoMode
	{
		[Token(Token = "0x4000134")]
		Unknown = -1,
		[Token(Token = "0x4000135")]
		Mono,
		[Token(Token = "0x4000136")]
		TopBottom,
		[Token(Token = "0x4000137")]
		LeftRight,
		[Token(Token = "0x4000138")]
		Mesh
	}

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static IntPtr? _Activity;

	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static IntPtr? _VideoPlayerClass;

	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static readonly jvalue[] EmptyParams;

	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static IntPtr getIsPlayingMethodId;

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static IntPtr getCurrentPlaybackStateMethodId;

	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static IntPtr getDurationMethodId;

	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static IntPtr getStereoModeMethodId;

	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static IntPtr getWidthMethodId;

	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static IntPtr getHeightMethodId;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private static IntPtr getPlaybackPositionMethodId;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static IntPtr setPlaybackPositionMethodId;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private static jvalue[] setPlaybackPositionParams;

	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private static IntPtr playVideoMethodId;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private static jvalue[] playVideoParams;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private static IntPtr stopMethodId;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private static IntPtr resumeMethodId;

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private static IntPtr pauseMethodId;

	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private static IntPtr setPlaybackSpeedMethodId;

	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private static jvalue[] setPlaybackSpeedParams;

	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private static IntPtr setLoopingMethodId;

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private static jvalue[] setLoopingParams;

	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private static IntPtr setListenerRotationQuaternionMethodId;

	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private static jvalue[] setListenerRotationQuaternionParams;

	[Token(Token = "0x17000024")]
	private static IntPtr VideoPlayerClass
	{
		[Token(Token = "0x60001D7")]
		[Address(RVA = "0xD73E24", Offset = "0xD73E24", VA = "0xD73E24")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x17000025")]
	private static IntPtr Activity
	{
		[Token(Token = "0x60001D8")]
		[Address(RVA = "0xD74114", Offset = "0xD74114", VA = "0xD74114")]
		get
		{
			return default(IntPtr);
		}
	}

	[Token(Token = "0x17000026")]
	public static bool IsAvailable
	{
		[Token(Token = "0x60001D9")]
		[Address(RVA = "0xD74394", Offset = "0xD74394", VA = "0xD74394")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000027")]
	public static bool IsPlaying
	{
		[Token(Token = "0x60001DA")]
		[Address(RVA = "0xD74408", Offset = "0xD74408", VA = "0xD74408")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x17000028")]
	public static PlabackState CurrentPlaybackState
	{
		[Token(Token = "0x60001DB")]
		[Address(RVA = "0xD7450C", Offset = "0xD7450C", VA = "0xD7450C")]
		get
		{
			return default(PlabackState);
		}
	}

	[Token(Token = "0x17000029")]
	public static long Duration
	{
		[Token(Token = "0x60001DC")]
		[Address(RVA = "0xD74614", Offset = "0xD74614", VA = "0xD74614")]
		get
		{
			return default(long);
		}
	}

	[Token(Token = "0x1700002A")]
	public static StereoMode VideoStereoMode
	{
		[Token(Token = "0x60001DD")]
		[Address(RVA = "0xD7471C", Offset = "0xD7471C", VA = "0xD7471C")]
		get
		{
			return default(StereoMode);
		}
	}

	[Token(Token = "0x1700002B")]
	public static int VideoWidth
	{
		[Token(Token = "0x60001DE")]
		[Address(RVA = "0xD74824", Offset = "0xD74824", VA = "0xD74824")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700002C")]
	public static int VideoHeight
	{
		[Token(Token = "0x60001DF")]
		[Address(RVA = "0xD7492C", Offset = "0xD7492C", VA = "0xD7492C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700002D")]
	public static long PlaybackPosition
	{
		[Token(Token = "0x60001E0")]
		[Address(RVA = "0xD74A34", Offset = "0xD74A34", VA = "0xD74A34")]
		get
		{
			return default(long);
		}
		[Token(Token = "0x60001E1")]
		[Address(RVA = "0xD74B3C", Offset = "0xD74B3C", VA = "0xD74B3C")]
		set
		{
		}
	}

	[Token(Token = "0x60001E2")]
	[Address(RVA = "0xD74CA4", Offset = "0xD74CA4", VA = "0xD74CA4")]
	public static void PlayVideo(string path, string drmLicenseUrl, IntPtr surfaceObj)
	{
	}

	[Token(Token = "0x60001E3")]
	[Address(RVA = "0xD74EBC", Offset = "0xD74EBC", VA = "0xD74EBC")]
	public static void Stop()
	{
	}

	[Token(Token = "0x60001E4")]
	[Address(RVA = "0xD74FC4", Offset = "0xD74FC4", VA = "0xD74FC4")]
	public static void Play()
	{
	}

	[Token(Token = "0x60001E5")]
	[Address(RVA = "0xD750CC", Offset = "0xD750CC", VA = "0xD750CC")]
	public static void Pause()
	{
	}

	[Token(Token = "0x60001E6")]
	[Address(RVA = "0xD751D4", Offset = "0xD751D4", VA = "0xD751D4")]
	public static void SetPlaybackSpeed(float speed)
	{
	}

	[Token(Token = "0x60001E7")]
	[Address(RVA = "0xD75344", Offset = "0xD75344", VA = "0xD75344")]
	public static void SetLooping(bool looping)
	{
	}

	[Token(Token = "0x60001E8")]
	[Address(RVA = "0xD754B0", Offset = "0xD754B0", VA = "0xD754B0")]
	public static void SetListenerRotation(Quaternion rotation)
	{
	}
}
[Token(Token = "0x2000043")]
public class ButtonDownListener : MonoBehaviour, IPointerDownHandler, IEventSystemHandler
{
	[Token(Token = "0x1400000F")]
	public event Action onButtonDown
	{
		[Token(Token = "0x60001EA")]
		[Address(RVA = "0xD75704", Offset = "0xD75704", VA = "0xD75704")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60001EB")]
		[Address(RVA = "0xD757A0", Offset = "0xD757A0", VA = "0xD757A0")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60001EC")]
	[Address(RVA = "0xD7583C", Offset = "0xD7583C", VA = "0xD7583C", Slot = "4")]
	public void OnPointerDown(PointerEventData eventData)
	{
	}

	[Token(Token = "0x60001ED")]
	[Address(RVA = "0xD75858", Offset = "0xD75858", VA = "0xD75858")]
	public ButtonDownListener()
	{
	}
}
[Token(Token = "0x2000044")]
public class MediaPlayerImage : Image
{
	[Token(Token = "0x2000045")]
	public enum ButtonType
	{
		[Token(Token = "0x400013C")]
		Play,
		[Token(Token = "0x400013D")]
		Pause,
		[Token(Token = "0x400013E")]
		FastForward,
		[Token(Token = "0x400013F")]
		Rewind,
		[Token(Token = "0x4000140")]
		SkipForward,
		[Token(Token = "0x4000141")]
		SkipBack,
		[Token(Token = "0x4000142")]
		Stop
	}

	[Token(Token = "0x400013A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	[SerializeField]
	private ButtonType m_ButtonType;

	[Token(Token = "0x1700002E")]
	public ButtonType buttonType
	{
		[Token(Token = "0x60001EE")]
		[Address(RVA = "0xD75860", Offset = "0xD75860", VA = "0xD75860")]
		get
		{
			return default(ButtonType);
		}
		[Token(Token = "0x60001EF")]
		[Address(RVA = "0xD75868", Offset = "0xD75868", VA = "0xD75868")]
		set
		{
		}
	}

	[Token(Token = "0x60001F0")]
	[Address(RVA = "0xD7588C", Offset = "0xD7588C", VA = "0xD7588C", Slot = "44")]
	protected override void OnPopulateMesh(VertexHelper toFill)
	{
	}

	[Token(Token = "0x60001F1")]
	[Address(RVA = "0xD766E0", Offset = "0xD766E0", VA = "0xD766E0")]
	public MediaPlayerImage()
	{
	}
}
[Token(Token = "0x2000046")]
public class MoviePlayerSample : MonoBehaviour
{
	[Token(Token = "0x2000047")]
	public enum VideoShape
	{
		[Token(Token = "0x4000157")]
		_360,
		[Token(Token = "0x4000158")]
		_180,
		[Token(Token = "0x4000159")]
		Quad
	}

	[Token(Token = "0x2000048")]
	public enum VideoStereo
	{
		[Token(Token = "0x400015B")]
		Mono,
		[Token(Token = "0x400015C")]
		TopBottom,
		[Token(Token = "0x400015D")]
		LeftRight,
		[Token(Token = "0x400015E")]
		BottomTop
	}

	[Token(Token = "0x2000049")]
	[CompilerGenerated]
	private sealed class <Start>d__33 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400015F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MoviePlayerSample <>4__this;

		[Token(Token = "0x17000032")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000208")]
			[Address(RVA = "0xD77C3C", Offset = "0xD77C3C", VA = "0xD77C3C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000033")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600020A")]
			[Address(RVA = "0xD77C84", Offset = "0xD77C84", VA = "0xD77C84", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000205")]
		[Address(RVA = "0xD76DD4", Offset = "0xD76DD4", VA = "0xD76DD4")]
		[DebuggerHidden]
		public <Start>d__33(int <>1__state)
		{
		}

		[Token(Token = "0x6000206")]
		[Address(RVA = "0xD77A90", Offset = "0xD77A90", VA = "0xD77A90", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000207")]
		[Address(RVA = "0xD77A94", Offset = "0xD77A94", VA = "0xD77A94", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000209")]
		[Address(RVA = "0xD77C44", Offset = "0xD77C44", VA = "0xD77C44", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000143")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool videoPausedBeforeAppPause;

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private VideoPlayer videoPlayer;

	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVROverlay overlay;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Renderer mediaRenderer;

	[Token(Token = "0x400014A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private RenderTexture copyTexture;

	[Token(Token = "0x400014B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Material externalTex2DMaterial;

	[Token(Token = "0x400014C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string MovieName;

	[Token(Token = "0x400014D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public string DrmLicenseUrl;

	[Token(Token = "0x400014E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool LoopVideo;

	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public VideoShape Shape;

	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public VideoStereo Stereo;

	[Token(Token = "0x4000151")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool AutoDetectStereoLayout;

	[Token(Token = "0x4000152")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
	public bool DisplayMono;

	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private VideoShape _LastShape;

	[Token(Token = "0x4000154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private VideoStereo _LastStereo;

	[Token(Token = "0x4000155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool _LastDisplayMono;

	[Token(Token = "0x1700002F")]
	public bool IsPlaying
	{
		[Token(Token = "0x60001F2")]
		[Address(RVA = "0xD76738", Offset = "0xD76738", VA = "0xD76738")]
		[CompilerGenerated]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60001F3")]
		[Address(RVA = "0xD76740", Offset = "0xD76740", VA = "0xD76740")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000030")]
	public long Duration
	{
		[Token(Token = "0x60001F4")]
		[Address(RVA = "0xD7674C", Offset = "0xD7674C", VA = "0xD7674C")]
		[CompilerGenerated]
		get
		{
			return default(long);
		}
		[Token(Token = "0x60001F5")]
		[Address(RVA = "0xD76754", Offset = "0xD76754", VA = "0xD76754")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x17000031")]
	public long PlaybackPosition
	{
		[Token(Token = "0x60001F6")]
		[Address(RVA = "0xD7675C", Offset = "0xD7675C", VA = "0xD7675C")]
		[CompilerGenerated]
		get
		{
			return default(long);
		}
		[Token(Token = "0x60001F7")]
		[Address(RVA = "0xD76764", Offset = "0xD76764", VA = "0xD76764")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x60001F8")]
	[Address(RVA = "0xD7676C", Offset = "0xD7676C", VA = "0xD7676C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60001F9")]
	[Address(RVA = "0xD769F4", Offset = "0xD769F4", VA = "0xD769F4")]
	private bool IsLocalVideo(string movieName)
	{
		return default(bool);
	}

	[Token(Token = "0x60001FA")]
	[Address(RVA = "0xD76A54", Offset = "0xD76A54", VA = "0xD76A54")]
	private void UpdateShapeAndStereo()
	{
	}

	[Token(Token = "0x60001FB")]
	[Address(RVA = "0xD76D60", Offset = "0xD76D60", VA = "0xD76D60")]
	[IteratorStateMachine(typeof(<Start>d__33))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x60001FC")]
	[Address(RVA = "0xD76DFC", Offset = "0xD76DFC", VA = "0xD76DFC")]
	public void Play(string moviePath, string drmLicencesUrl)
	{
	}

	[Token(Token = "0x60001FD")]
	[Address(RVA = "0xD770D4", Offset = "0xD770D4", VA = "0xD770D4")]
	public void Play()
	{
	}

	[Token(Token = "0x60001FE")]
	[Address(RVA = "0xD7715C", Offset = "0xD7715C", VA = "0xD7715C")]
	public void Pause()
	{
	}

	[Token(Token = "0x60001FF")]
	[Address(RVA = "0xD771E0", Offset = "0xD771E0", VA = "0xD771E0")]
	public void SeekTo(long position)
	{
	}

	[Token(Token = "0x6000200")]
	[Address(RVA = "0xD772D0", Offset = "0xD772D0", VA = "0xD772D0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000201")]
	[Address(RVA = "0xD7787C", Offset = "0xD7787C", VA = "0xD7787C")]
	public void SetPlaybackSpeed(float speed)
	{
	}

	[Token(Token = "0x6000202")]
	[Address(RVA = "0xD7791C", Offset = "0xD7791C", VA = "0xD7791C")]
	public void Stop()
	{
	}

	[Token(Token = "0x6000203")]
	[Address(RVA = "0xD779A0", Offset = "0xD779A0", VA = "0xD779A0")]
	private void OnApplicationPause(bool appWasPaused)
	{
	}

	[Token(Token = "0x6000204")]
	[Address(RVA = "0xD77A80", Offset = "0xD77A80", VA = "0xD77A80")]
	public MoviePlayerSample()
	{
	}
}
[Token(Token = "0x200004B")]
public class MoviePlayerSampleControls : MonoBehaviour
{
	[Token(Token = "0x200004C")]
	private enum PlaybackState
	{
		[Token(Token = "0x400017B")]
		Playing,
		[Token(Token = "0x400017C")]
		Paused,
		[Token(Token = "0x400017D")]
		Rewinding,
		[Token(Token = "0x400017E")]
		FastForwarding
	}

	[Token(Token = "0x4000165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MoviePlayerSample Player;

	[Token(Token = "0x4000166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVRInputModule InputModule;

	[Token(Token = "0x4000167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRGazePointer GazePointer;

	[Token(Token = "0x4000168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject LeftHand;

	[Token(Token = "0x4000169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject RightHand;

	[Token(Token = "0x400016A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Canvas Canvas;

	[Token(Token = "0x400016B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ButtonDownListener PlayPause;

	[Token(Token = "0x400016C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public MediaPlayerImage PlayPauseImage;

	[Token(Token = "0x400016D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public UnityEngine.UI.Slider ProgressBar;

	[Token(Token = "0x400016E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public ButtonDownListener FastForward;

	[Token(Token = "0x400016F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public MediaPlayerImage FastForwardImage;

	[Token(Token = "0x4000170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public ButtonDownListener Rewind;

	[Token(Token = "0x4000171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public MediaPlayerImage RewindImage;

	[Token(Token = "0x4000172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float TimeoutTime;

	[Token(Token = "0x4000173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private bool _isVisible;

	[Token(Token = "0x4000174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float _lastButtonTime;

	[Token(Token = "0x4000175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private bool _didSeek;

	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private long _seekPreviousPosition;

	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private long _rewindStartPosition;

	[Token(Token = "0x4000178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private float _rewindStartTime;

	[Token(Token = "0x4000179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private PlaybackState _state;

	[Token(Token = "0x600020D")]
	[Address(RVA = "0xD77D68", Offset = "0xD77D68", VA = "0xD77D68")]
	private void Start()
	{
	}

	[Token(Token = "0x600020E")]
	[Address(RVA = "0xD78094", Offset = "0xD78094", VA = "0xD78094")]
	private void OnPlayPauseClicked()
	{
	}

	[Token(Token = "0x600020F")]
	[Address(RVA = "0xD78264", Offset = "0xD78264", VA = "0xD78264")]
	private void OnFastForwardClicked()
	{
	}

	[Token(Token = "0x6000210")]
	[Address(RVA = "0xD78388", Offset = "0xD78388", VA = "0xD78388")]
	private void OnRewindClicked()
	{
	}

	[Token(Token = "0x6000211")]
	[Address(RVA = "0xD78484", Offset = "0xD78484", VA = "0xD78484")]
	private void OnSeekBarMoved(float value)
	{
	}

	[Token(Token = "0x6000212")]
	[Address(RVA = "0xD7835C", Offset = "0xD7835C", VA = "0xD7835C")]
	private void Seek(long pos)
	{
	}

	[Token(Token = "0x6000213")]
	[Address(RVA = "0xD784E4", Offset = "0xD784E4", VA = "0xD784E4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000214")]
	[Address(RVA = "0xD77F94", Offset = "0xD77F94", VA = "0xD77F94")]
	private void SetVisible(bool visible)
	{
	}

	[Token(Token = "0x6000215")]
	[Address(RVA = "0xD78814", Offset = "0xD78814", VA = "0xD78814")]
	public MoviePlayerSampleControls()
	{
	}
}
[Token(Token = "0x200004D")]
public static class VectorUtil
{
	[Token(Token = "0x6000216")]
	[Address(RVA = "0xD77804", Offset = "0xD77804", VA = "0xD77804")]
	public static Vector4 ToVector(this Rect rect)
	{
		return default(Vector4);
	}
}
[Token(Token = "0x200004E")]
public class AppDeeplinkUI : MonoBehaviour
{
	[Token(Token = "0x400017F")]
	private const ulong UNITY_COMPANION_APP_ID = 3535750239844224uL;

	[Token(Token = "0x4000180")]
	private const ulong UNREAL_COMPANION_APP_ID = 4055411724486843uL;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private RectTransform deeplinkAppId;

	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private RectTransform deeplinkMessage;

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RectTransform uiLaunchType;

	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private RectTransform uiLaunchSource;

	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private RectTransform uiDeepLinkMessage;

	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool inMenu;

	[Token(Token = "0x6000217")]
	[Address(RVA = "0xD78824", Offset = "0xD78824", VA = "0xD78824")]
	private void Start()
	{
	}

	[Token(Token = "0x6000218")]
	[Address(RVA = "0xD78E78", Offset = "0xD78E78", VA = "0xD78E78")]
	private void Update()
	{
	}

	[Token(Token = "0x6000219")]
	[Address(RVA = "0xD790D4", Offset = "0xD790D4", VA = "0xD790D4")]
	private void LaunchUnrealDeeplinkSample()
	{
	}

	[Token(Token = "0x600021A")]
	[Address(RVA = "0xD79238", Offset = "0xD79238", VA = "0xD79238")]
	private void LaunchSelf()
	{
	}

	[Token(Token = "0x600021B")]
	[Address(RVA = "0xD793A0", Offset = "0xD793A0", VA = "0xD793A0")]
	private void LaunchOtherApp()
	{
	}

	[Token(Token = "0x600021C")]
	[Address(RVA = "0xD79524", Offset = "0xD79524", VA = "0xD79524")]
	public AppDeeplinkUI()
	{
	}
}
[Token(Token = "0x200004F")]
public class CustomDebugUI : MonoBehaviour
{
	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private RectTransform textPrefab;

	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static CustomDebugUI instance;

	[Token(Token = "0x4000189")]
	private const BindingFlags privateFlags = BindingFlags.Instance | BindingFlags.NonPublic;

	[Token(Token = "0x600021D")]
	[Address(RVA = "0xD79534", Offset = "0xD79534", VA = "0xD79534")]
	private void Awake()
	{
	}

	[Token(Token = "0x600021E")]
	[Address(RVA = "0xD7958C", Offset = "0xD7958C", VA = "0xD7958C")]
	private void Start()
	{
	}

	[Token(Token = "0x600021F")]
	[Address(RVA = "0xD79590", Offset = "0xD79590", VA = "0xD79590")]
	private void Update()
	{
	}

	[Token(Token = "0x6000220")]
	[Address(RVA = "0xD78C20", Offset = "0xD78C20", VA = "0xD78C20")]
	public RectTransform AddTextField(string label, int targetCanvas = 0)
	{
		return null;
	}

	[Token(Token = "0x6000221")]
	[Address(RVA = "0xD79594", Offset = "0xD79594", VA = "0xD79594")]
	public void RemoveFromCanvas(RectTransform element, int targetCanvas = 0)
	{
	}

	[Token(Token = "0x6000222")]
	[Address(RVA = "0xD797B0", Offset = "0xD797B0", VA = "0xD797B0")]
	public CustomDebugUI()
	{
	}
}
[Token(Token = "0x2000050")]
public class DebugUISample : MonoBehaviour
{
	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool inMenu;

	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Text sliderText;

	[Token(Token = "0x6000223")]
	[Address(RVA = "0xD797B8", Offset = "0xD797B8", VA = "0xD797B8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000224")]
	[Address(RVA = "0xD79D18", Offset = "0xD79D18", VA = "0xD79D18")]
	public void TogglePressed(Toggle t)
	{
	}

	[Token(Token = "0x6000225")]
	[Address(RVA = "0xD79DC4", Offset = "0xD79DC4", VA = "0xD79DC4")]
	public void RadioPressed(string radioLabel, string group, Toggle t)
	{
	}

	[Token(Token = "0x6000226")]
	[Address(RVA = "0xD7A054", Offset = "0xD7A054", VA = "0xD7A054")]
	public void SliderPressed(float f)
	{
	}

	[Token(Token = "0x6000227")]
	[Address(RVA = "0xD7A128", Offset = "0xD7A128", VA = "0xD7A128")]
	private void Update()
	{
	}

	[Token(Token = "0x6000228")]
	[Address(RVA = "0xD7A200", Offset = "0xD7A200", VA = "0xD7A200")]
	private void LogButtonPressed()
	{
	}

	[Token(Token = "0x6000229")]
	[Address(RVA = "0xD7A268", Offset = "0xD7A268", VA = "0xD7A268")]
	public DebugUISample()
	{
	}
}
[Token(Token = "0x2000051")]
public class AnalyticsUI : MonoBehaviour
{
	[Token(Token = "0x600022E")]
	[Address(RVA = "0xD7A410", Offset = "0xD7A410", VA = "0xD7A410")]
	public AnalyticsUI()
	{
	}
}
[Token(Token = "0x2000052")]
public class SampleUI : MonoBehaviour
{
	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private RectTransform collectionButton;

	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private RectTransform inputText;

	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RectTransform valueText;

	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool inMenu;

	[Token(Token = "0x600022F")]
	[Address(RVA = "0xD7A418", Offset = "0xD7A418", VA = "0xD7A418")]
	private void Start()
	{
	}

	[Token(Token = "0x6000230")]
	[Address(RVA = "0xD7A4B0", Offset = "0xD7A4B0", VA = "0xD7A4B0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000231")]
	[Address(RVA = "0xD7A588", Offset = "0xD7A588", VA = "0xD7A588")]
	private string GetText()
	{
		return null;
	}

	[Token(Token = "0x6000232")]
	[Address(RVA = "0xD7A5E4", Offset = "0xD7A5E4", VA = "0xD7A5E4")]
	public SampleUI()
	{
	}
}
[Token(Token = "0x2000053")]
public class StartCrashlytics : MonoBehaviour
{
	[Token(Token = "0x6000233")]
	[Address(RVA = "0xD7A5EC", Offset = "0xD7A5EC", VA = "0xD7A5EC")]
	public StartCrashlytics()
	{
	}
}
[Token(Token = "0x2000054")]
public class HandsActiveChecker : MonoBehaviour
{
	[Token(Token = "0x2000055")]
	[CompilerGenerated]
	private sealed class <GetCenterEye>d__6 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandsActiveChecker <>4__this;

		[Token(Token = "0x17000034")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600023B")]
			[Address(RVA = "0xD7A9FC", Offset = "0xD7A9FC", VA = "0xD7A9FC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000035")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600023D")]
			[Address(RVA = "0xD7AA44", Offset = "0xD7AA44", VA = "0xD7AA44", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000238")]
		[Address(RVA = "0xD7A898", Offset = "0xD7A898", VA = "0xD7A898")]
		[DebuggerHidden]
		public <GetCenterEye>d__6(int <>1__state)
		{
		}

		[Token(Token = "0x6000239")]
		[Address(RVA = "0xD7A8C8", Offset = "0xD7A8C8", VA = "0xD7A8C8", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600023A")]
		[Address(RVA = "0xD7A8CC", Offset = "0xD7A8CC", VA = "0xD7A8CC", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600023C")]
		[Address(RVA = "0xD7AA04", Offset = "0xD7AA04", VA = "0xD7AA04", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject _notificationPrefab;

	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject _notification;

	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVRCameraRig _cameraRig;

	[Token(Token = "0x4000193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform _centerEye;

	[Token(Token = "0x6000234")]
	[Address(RVA = "0xD7A5F4", Offset = "0xD7A5F4", VA = "0xD7A5F4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000235")]
	[Address(RVA = "0xD7A700", Offset = "0xD7A700", VA = "0xD7A700")]
	private void Update()
	{
	}

	[Token(Token = "0x6000236")]
	[Address(RVA = "0xD7A68C", Offset = "0xD7A68C", VA = "0xD7A68C")]
	[IteratorStateMachine(typeof(<GetCenterEye>d__6))]
	private IEnumerator GetCenterEye()
	{
		return null;
	}

	[Token(Token = "0x6000237")]
	[Address(RVA = "0xD7A8C0", Offset = "0xD7A8C0", VA = "0xD7A8C0")]
	public HandsActiveChecker()
	{
	}
}
[Token(Token = "0x2000056")]
[ExecuteInEditMode]
public class CharacterCapsule : MonoBehaviour
{
	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private CharacterController _character;

	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private MeshFilter _meshFilter;

	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float _height;

	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float _radius;

	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Range(4f, 32f)]
	public int SubdivisionsU;

	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Range(4f, 32f)]
	public int SubdivisionsV;

	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int _subdivisionU;

	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int _subdivisionV;

	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3[] _vertices;

	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int[] _triangles;

	[Token(Token = "0x600023E")]
	[Address(RVA = "0xD7AA4C", Offset = "0xD7AA4C", VA = "0xD7AA4C")]
	private void Update()
	{
	}

	[Token(Token = "0x600023F")]
	[Address(RVA = "0xD7C3F4", Offset = "0xD7C3F4", VA = "0xD7C3F4")]
	public CharacterCapsule()
	{
	}
}
[Token(Token = "0x2000057")]
public class LocomotionSampleSupport : MonoBehaviour
{
	[Token(Token = "0x40001A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private LocomotionController lc;

	[Token(Token = "0x40001A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool inMenu;

	[Token(Token = "0x17000036")]
	private LocomotionTeleport TeleportController
	{
		[Token(Token = "0x6000240")]
		[Address(RVA = "0xD7C3FC", Offset = "0xD7C3FC", VA = "0xD7C3FC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000241")]
	[Address(RVA = "0xD7C44C", Offset = "0xD7C44C", VA = "0xD7C44C")]
	public void Start()
	{
	}

	[Token(Token = "0x6000242")]
	[Address(RVA = "0xD7C884", Offset = "0xD7C884", VA = "0xD7C884")]
	public void Update()
	{
	}

	[Token(Token = "0x6000243")]
	[Address(RVA = "0xD7C95C", Offset = "0xD7C95C", VA = "0xD7C95C")]
	[Conditional("DEBUG_LOCOMOTION_PANEL")]
	private static void Log(string msg)
	{
	}

	[Token(Token = "0x6000244")]
	public static TActivate ActivateCategory<TCategory, TActivate>(GameObject target) where TCategory : MonoBehaviour where TActivate : MonoBehaviour
	{
		return null;
	}

	[Token(Token = "0x6000245")]
	protected void ActivateHandlers<TInput, TAim, TTarget, TOrientation, TTransition>() where TInput : TeleportInputHandler where TAim : TeleportAimHandler where TTarget : TeleportTargetHandler where TOrientation : TeleportOrientationHandler where TTransition : TeleportTransition
	{
	}

	[Token(Token = "0x6000246")]
	protected void ActivateInput<TActivate>() where TActivate : TeleportInputHandler
	{
	}

	[Token(Token = "0x6000247")]
	protected void ActivateAim<TActivate>() where TActivate : TeleportAimHandler
	{
	}

	[Token(Token = "0x6000248")]
	protected void ActivateTarget<TActivate>() where TActivate : TeleportTargetHandler
	{
	}

	[Token(Token = "0x6000249")]
	protected void ActivateOrientation<TActivate>() where TActivate : TeleportOrientationHandler
	{
	}

	[Token(Token = "0x600024A")]
	protected void ActivateTransition<TActivate>() where TActivate : TeleportTransition
	{
	}

	[Token(Token = "0x600024B")]
	protected TActivate ActivateCategory<TCategory, TActivate>() where TCategory : MonoBehaviour where TActivate : MonoBehaviour
	{
		return null;
	}

	[Token(Token = "0x600024C")]
	[Address(RVA = "0xD7C9B4", Offset = "0xD7C9B4", VA = "0xD7C9B4")]
	protected void UpdateToggle(Toggle toggle, bool enabled)
	{
	}

	[Token(Token = "0x600024D")]
	[Address(RVA = "0xD7C9F4", Offset = "0xD7C9F4", VA = "0xD7C9F4")]
	private void SetupNonCap()
	{
	}

	[Token(Token = "0x600024E")]
	[Address(RVA = "0xD7CA60", Offset = "0xD7CA60", VA = "0xD7CA60")]
	private void SetupTeleportDefaults()
	{
	}

	[Token(Token = "0x600024F")]
	[Address(RVA = "0xD7CBAC", Offset = "0xD7CBAC", VA = "0xD7CBAC")]
	protected GameObject AddInstance(GameObject template, string label)
	{
		return null;
	}

	[Token(Token = "0x6000250")]
	[Address(RVA = "0xD7CC7C", Offset = "0xD7CC7C", VA = "0xD7CC7C")]
	private void SetupNodeTeleport()
	{
	}

	[Token(Token = "0x6000251")]
	[Address(RVA = "0xD7C760", Offset = "0xD7C760", VA = "0xD7C760")]
	private void SetupTwoStickTeleport()
	{
	}

	[Token(Token = "0x6000252")]
	[Address(RVA = "0xD7CD4C", Offset = "0xD7CD4C", VA = "0xD7CD4C")]
	private void SetupWalkOnly()
	{
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0xD7CD98", Offset = "0xD7CD98", VA = "0xD7CD98")]
	private void SetupLeftStrafeRightTeleport()
	{
	}

	[Token(Token = "0x6000254")]
	[Address(RVA = "0xD7CEA8", Offset = "0xD7CEA8", VA = "0xD7CEA8")]
	public LocomotionSampleSupport()
	{
	}
}
[Token(Token = "0x2000058")]
[RequireComponent(typeof(Canvas))]
public class OVROverlayCanvas : MonoBehaviour
{
	[Token(Token = "0x2000059")]
	public enum DrawMode
	{
		[Token(Token = "0x40001B8")]
		Opaque,
		[Token(Token = "0x40001B9")]
		OpaqueWithClip,
		[Token(Token = "0x40001BA")]
		TransparentDefaultAlpha,
		[Token(Token = "0x40001BB")]
		TransparentCorrectAlpha
	}

	[Token(Token = "0x40001A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	[SerializeField]
	private Shader _transparentShader;

	[Token(Token = "0x40001A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	[SerializeField]
	private Shader _opaqueShader;

	[Token(Token = "0x40001A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RectTransform _rectTransform;

	[Token(Token = "0x40001A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Canvas _canvas;

	[Token(Token = "0x40001A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Camera _camera;

	[Token(Token = "0x40001A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private OVROverlay _overlay;

	[Token(Token = "0x40001A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private RenderTexture _renderTexture;

	[Token(Token = "0x40001AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private MeshRenderer _meshRenderer;

	[Token(Token = "0x40001AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Mesh _quad;

	[Token(Token = "0x40001AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Material _defaultMat;

	[Token(Token = "0x40001AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public int MaxTextureSize;

	[Token(Token = "0x40001AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public int MinTextureSize;

	[Token(Token = "0x40001AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float PixelsPerUnit;

	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public int DrawRate;

	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public int DrawFrameOffset;

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool Expensive;

	[Token(Token = "0x40001B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public int Layer;

	[Token(Token = "0x40001B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public DrawMode Opacity;

	[Token(Token = "0x40001B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private bool ScaleViewport;

	[Token(Token = "0x40001B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static readonly Plane[] _FrustumPlanes;

	[Token(Token = "0x17000037")]
	public bool overlayEnabled
	{
		[Token(Token = "0x600025B")]
		[Address(RVA = "0xD7E4EC", Offset = "0xD7E4EC", VA = "0xD7E4EC")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600025C")]
		[Address(RVA = "0xD7E570", Offset = "0xD7E570", VA = "0xD7E570")]
		set
		{
		}
	}

	[Token(Token = "0x6000255")]
	[Address(RVA = "0xD7CEB0", Offset = "0xD7CEB0", VA = "0xD7CEB0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000256")]
	[Address(RVA = "0xD7DB74", Offset = "0xD7DB74", VA = "0xD7DB74")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000257")]
	[Address(RVA = "0xD7DBE8", Offset = "0xD7DBE8", VA = "0xD7DBE8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000258")]
	[Address(RVA = "0xD7DCB8", Offset = "0xD7DCB8", VA = "0xD7DCB8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000259")]
	[Address(RVA = "0xD7DD88", Offset = "0xD7DD88", VA = "0xD7DD88", Slot = "4")]
	protected virtual bool ShouldRender()
	{
		return default(bool);
	}

	[Token(Token = "0x600025A")]
	[Address(RVA = "0xD7DF8C", Offset = "0xD7DF8C", VA = "0xD7DF8C")]
	private void Update()
	{
	}

	[Token(Token = "0x600025D")]
	[Address(RVA = "0xD7E62C", Offset = "0xD7E62C", VA = "0xD7E62C")]
	public OVROverlayCanvas()
	{
	}
}
[Token(Token = "0x200005A")]
public class AugmentedObject : MonoBehaviour
{
	[Token(Token = "0x40001BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRInput.Controller controllerHand;

	[Token(Token = "0x40001BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform shadow;

	[Token(Token = "0x40001BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool groundShadow;

	[Token(Token = "0x600025F")]
	[Address(RVA = "0xD7E6E8", Offset = "0xD7E6E8", VA = "0xD7E6E8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000260")]
	[Address(RVA = "0xD7EA88", Offset = "0xD7EA88", VA = "0xD7EA88")]
	private void Update()
	{
	}

	[Token(Token = "0x6000261")]
	[Address(RVA = "0xD7EC1C", Offset = "0xD7EC1C", VA = "0xD7EC1C")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x6000262")]
	[Address(RVA = "0xD7EC24", Offset = "0xD7EC24", VA = "0xD7EC24")]
	public void Release()
	{
	}

	[Token(Token = "0x6000263")]
	[Address(RVA = "0xD7EC0C", Offset = "0xD7EC0C", VA = "0xD7EC0C")]
	private void ToggleShadowType()
	{
	}

	[Token(Token = "0x6000264")]
	[Address(RVA = "0xD7EC2C", Offset = "0xD7EC2C", VA = "0xD7EC2C")]
	public AugmentedObject()
	{
	}
}
[Token(Token = "0x200005B")]
public class BrushController : MonoBehaviour
{
	[Token(Token = "0x200005C")]
	[CompilerGenerated]
	private sealed class <FadeCameraClearColor>d__8 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float fadeTime;

		[Token(Token = "0x40001C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Color newColor;

		[Token(Token = "0x40001C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <timer>5__2;

		[Token(Token = "0x40001C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Color <currentColor>5__3;

		[Token(Token = "0x17000038")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600026F")]
			[Address(RVA = "0xD7F374", Offset = "0xD7F374", VA = "0xD7F374", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000039")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000271")]
			[Address(RVA = "0xD7F3BC", Offset = "0xD7F3BC", VA = "0xD7F3BC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600026C")]
		[Address(RVA = "0xD7F218", Offset = "0xD7F218", VA = "0xD7F218")]
		[DebuggerHidden]
		public <FadeCameraClearColor>d__8(int <>1__state)
		{
		}

		[Token(Token = "0x600026D")]
		[Address(RVA = "0xD7F270", Offset = "0xD7F270", VA = "0xD7F270", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600026E")]
		[Address(RVA = "0xD7F274", Offset = "0xD7F274", VA = "0xD7F274", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000270")]
		[Address(RVA = "0xD7F37C", Offset = "0xD7F37C", VA = "0xD7F37C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x200005D")]
	[CompilerGenerated]
	private sealed class <FadeSphere>d__9 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BrushController <>4__this;

		[Token(Token = "0x40001CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x40001CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Color newColor;

		[Token(Token = "0x40001CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool disableOnFinish;

		[Token(Token = "0x40001CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <timer>5__2;

		[Token(Token = "0x40001D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Color <currentColor>5__3;

		[Token(Token = "0x1700003A")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000275")]
			[Address(RVA = "0xD7F540", Offset = "0xD7F540", VA = "0xD7F540", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003B")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000277")]
			[Address(RVA = "0xD7F588", Offset = "0xD7F588", VA = "0xD7F588", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000272")]
		[Address(RVA = "0xD7F240", Offset = "0xD7F240", VA = "0xD7F240")]
		[DebuggerHidden]
		public <FadeSphere>d__9(int <>1__state)
		{
		}

		[Token(Token = "0x6000273")]
		[Address(RVA = "0xD7F3C4", Offset = "0xD7F3C4", VA = "0xD7F3C4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000274")]
		[Address(RVA = "0xD7F3C8", Offset = "0xD7F3C8", VA = "0xD7F3C8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000276")]
		[Address(RVA = "0xD7F548", Offset = "0xD7F548", VA = "0xD7F548", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40001BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public PassthroughBrush brush;

	[Token(Token = "0x40001C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshRenderer backgroundSphere;

	[Token(Token = "0x40001C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IEnumerator grabRoutine;

	[Token(Token = "0x40001C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private IEnumerator releaseRoutine;

	[Token(Token = "0x6000265")]
	[Address(RVA = "0xD7EC34", Offset = "0xD7EC34", VA = "0xD7EC34")]
	private void Start()
	{
	}

	[Token(Token = "0x6000266")]
	[Address(RVA = "0xD7EF14", Offset = "0xD7EF14", VA = "0xD7EF14")]
	private void Update()
	{
	}

	[Token(Token = "0x6000267")]
	[Address(RVA = "0xD7EF64", Offset = "0xD7EF64", VA = "0xD7EF64")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x6000268")]
	[Address(RVA = "0xD7F0DC", Offset = "0xD7F0DC", VA = "0xD7F0DC")]
	public void Release()
	{
	}

	[Token(Token = "0x6000269")]
	[Address(RVA = "0xD7F180", Offset = "0xD7F180", VA = "0xD7F180")]
	[IteratorStateMachine(typeof(<FadeCameraClearColor>d__8))]
	private IEnumerator FadeCameraClearColor(Color newColor, float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x600026A")]
	[Address(RVA = "0xD7F01C", Offset = "0xD7F01C", VA = "0xD7F01C")]
	[IteratorStateMachine(typeof(<FadeSphere>d__9))]
	private IEnumerator FadeSphere(Color newColor, float fadeTime, bool disableOnFinish = false)
	{
		return null;
	}

	[Token(Token = "0x600026B")]
	[Address(RVA = "0xD7F268", Offset = "0xD7F268", VA = "0xD7F268")]
	public BrushController()
	{
	}
}
[Token(Token = "0x200005E")]
public class EnableUnpremultipliedAlpha : MonoBehaviour
{
	[Token(Token = "0x6000278")]
	[Address(RVA = "0xD7F590", Offset = "0xD7F590", VA = "0xD7F590")]
	private void Start()
	{
	}

	[Token(Token = "0x6000279")]
	[Address(RVA = "0xD7F5E4", Offset = "0xD7F5E4", VA = "0xD7F5E4")]
	public EnableUnpremultipliedAlpha()
	{
	}
}
[Token(Token = "0x200005F")]
public class Flashlight : MonoBehaviour
{
	[Token(Token = "0x40001D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject lightVolume;

	[Token(Token = "0x40001D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Light spotlight;

	[Token(Token = "0x40001D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject bulbGlow;

	[Token(Token = "0x600027A")]
	[Address(RVA = "0xD7F5EC", Offset = "0xD7F5EC", VA = "0xD7F5EC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600027B")]
	[Address(RVA = "0xD7F7C0", Offset = "0xD7F7C0", VA = "0xD7F7C0")]
	public void ToggleFlashlight()
	{
	}

	[Token(Token = "0x600027C")]
	[Address(RVA = "0xD7F850", Offset = "0xD7F850", VA = "0xD7F850")]
	public void EnableFlashlight(bool doEnable)
	{
	}

	[Token(Token = "0x600027D")]
	[Address(RVA = "0xD7F8AC", Offset = "0xD7F8AC", VA = "0xD7F8AC")]
	public Flashlight()
	{
	}
}
[Token(Token = "0x2000060")]
public class FlashlightController : MonoBehaviour
{
	[Token(Token = "0x2000061")]
	[CompilerGenerated]
	private sealed class <FadeLighting>d__17 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40001DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40001DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40001E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FlashlightController <>4__this;

		[Token(Token = "0x40001E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x40001E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Color newColor;

		[Token(Token = "0x40001E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float sceneLightIntensity;

		[Token(Token = "0x40001E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float <timer>5__2;

		[Token(Token = "0x40001E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Color <currentColor>5__3;

		[Token(Token = "0x40001E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float <currentLight>5__4;

		[Token(Token = "0x1700003C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600028A")]
			[Address(RVA = "0xD80A84", Offset = "0xD80A84", VA = "0xD80A84", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600028C")]
			[Address(RVA = "0xD80ACC", Offset = "0xD80ACC", VA = "0xD80ACC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000287")]
		[Address(RVA = "0xD807EC", Offset = "0xD807EC", VA = "0xD807EC")]
		[DebuggerHidden]
		public <FadeLighting>d__17(int <>1__state)
		{
		}

		[Token(Token = "0x6000288")]
		[Address(RVA = "0xD808B4", Offset = "0xD808B4", VA = "0xD808B4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000289")]
		[Address(RVA = "0xD808B8", Offset = "0xD808B8", VA = "0xD808B8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600028B")]
		[Address(RVA = "0xD80A8C", Offset = "0xD80A8C", VA = "0xD80A8C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40001D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Light sceneLight;

	[Token(Token = "0x40001D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform flashlightRoot;

	[Token(Token = "0x40001D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 localPosition;

	[Token(Token = "0x40001D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Quaternion localRotation;

	[Token(Token = "0x40001D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public TextMesh infoText;

	[Token(Token = "0x40001D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GrabObject externalController;

	[Token(Token = "0x40001DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private OVRSkeleton[] skeletons;

	[Token(Token = "0x40001DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private OVRHand[] hands;

	[Token(Token = "0x40001DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int handIndex;

	[Token(Token = "0x40001DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool pinching;

	[Token(Token = "0x600027E")]
	[Address(RVA = "0xD7F8B4", Offset = "0xD7F8B4", VA = "0xD7F8B4")]
	private void Start()
	{
	}

	[Token(Token = "0x600027F")]
	[Address(RVA = "0xD7FB9C", Offset = "0xD7FB9C", VA = "0xD7FB9C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000280")]
	[Address(RVA = "0xD7FE88", Offset = "0xD7FE88", VA = "0xD7FE88")]
	private void FindHands()
	{
	}

	[Token(Token = "0x6000281")]
	[Address(RVA = "0xD801B0", Offset = "0xD801B0", VA = "0xD801B0")]
	private void AlignWithHand(OVRHand hand, OVRSkeleton skeleton)
	{
	}

	[Token(Token = "0x6000282")]
	[Address(RVA = "0xD80488", Offset = "0xD80488", VA = "0xD80488")]
	private void AlignWithController(OVRInput.Controller controller)
	{
	}

	[Token(Token = "0x6000283")]
	[Address(RVA = "0xD80570", Offset = "0xD80570", VA = "0xD80570")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x6000284")]
	[Address(RVA = "0xD80708", Offset = "0xD80708", VA = "0xD80708")]
	public void Release()
	{
	}

	[Token(Token = "0x6000285")]
	[Address(RVA = "0xD80658", Offset = "0xD80658", VA = "0xD80658")]
	[IteratorStateMachine(typeof(<FadeLighting>d__17))]
	private IEnumerator FadeLighting(Color newColor, float sceneLightIntensity, float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x6000286")]
	[Address(RVA = "0xD80814", Offset = "0xD80814", VA = "0xD80814")]
	public FlashlightController()
	{
	}
}
[Token(Token = "0x2000062")]
public class GrabObject : MonoBehaviour
{
	[Token(Token = "0x2000063")]
	public enum ManipulationType
	{
		[Token(Token = "0x40001F0")]
		Default,
		[Token(Token = "0x40001F1")]
		ForcedHand,
		[Token(Token = "0x40001F2")]
		DollyHand,
		[Token(Token = "0x40001F3")]
		DollyAttached,
		[Token(Token = "0x40001F4")]
		HorizontalScaled,
		[Token(Token = "0x40001F5")]
		VerticalScaled,
		[Token(Token = "0x40001F6")]
		Menu
	}

	[Token(Token = "0x2000064")]
	public delegate void GrabbedObject(OVRInput.Controller grabHand);

	[Token(Token = "0x2000065")]
	public delegate void ReleasedObject();

	[Token(Token = "0x2000066")]
	public delegate void SetCursorPosition(Vector3 cursorPosition);

	[Token(Token = "0x40001E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[TextArea]
	public string ObjectName;

	[Token(Token = "0x40001E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[TextArea]
	public string ObjectInstructions;

	[Token(Token = "0x40001E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ManipulationType objectManipulationType;

	[Token(Token = "0x40001EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool showLaserWhileGrabbed;

	[Token(Token = "0x40001EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public Quaternion grabbedRotation;

	[Token(Token = "0x40001EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GrabbedObject GrabbedObjectDelegate;

	[Token(Token = "0x40001ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public ReleasedObject ReleasedObjectDelegate;

	[Token(Token = "0x40001EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public SetCursorPosition CursorPositionDelegate;

	[Token(Token = "0x600028D")]
	[Address(RVA = "0xD80AD4", Offset = "0xD80AD4", VA = "0xD80AD4")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x600028E")]
	[Address(RVA = "0xD80B34", Offset = "0xD80B34", VA = "0xD80B34")]
	public void Release()
	{
	}

	[Token(Token = "0x600028F")]
	[Address(RVA = "0xD80B50", Offset = "0xD80B50", VA = "0xD80B50")]
	public void CursorPos(Vector3 cursorPos)
	{
	}

	[Token(Token = "0x6000290")]
	[Address(RVA = "0xD80B6C", Offset = "0xD80B6C", VA = "0xD80B6C")]
	public GrabObject()
	{
	}
}
[Token(Token = "0x2000067")]
public class HandMeshMask : MonoBehaviour
{
	[Token(Token = "0x40001F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRSkeleton referenceHand;

	[Token(Token = "0x40001F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material maskMaterial;

	[Token(Token = "0x40001F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("The segments around the tip of a finger")]
	public int radialDivisions;

	[Token(Token = "0x40001FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Tooltip("The fade range (finger width is 2x this)")]
	public float borderSize;

	[Token(Token = "0x40001FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Along the fingers, each knuckle scales down by this amount.  Default is zero for uniform width along entire finger.")]
	public float fingerTaper;

	[Token(Token = "0x40001FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Tooltip("Shorten the last bone of each finger; need this to account for bone structure (end bone is at finger tip instead of center). Default is 1.")]
	public float fingerTipLength;

	[Token(Token = "0x40001FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Tooltip("Move the base of the 4 main fingers towards the tips, to avoid a visible mesh crack between finger webbing. Default is 0.")]
	public float webOffset;

	[Token(Token = "0x40001FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float handScale;

	[Token(Token = "0x40001FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject maskMeshObject;

	[Token(Token = "0x4000200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Mesh maskMesh;

	[Token(Token = "0x4000201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3[] handVertices;

	[Token(Token = "0x4000202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector2[] handUVs;

	[Token(Token = "0x4000203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Color32[] handColors;

	[Token(Token = "0x4000204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int[] handTriangles;

	[Token(Token = "0x4000205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int vertCounter;

	[Token(Token = "0x4000206")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private int triCounter;

	[Token(Token = "0x600029D")]
	[Address(RVA = "0xD80E24", Offset = "0xD80E24", VA = "0xD80E24")]
	private void Awake()
	{
	}

	[Token(Token = "0x600029E")]
	[Address(RVA = "0xD81084", Offset = "0xD81084", VA = "0xD81084")]
	private void Update()
	{
	}

	[Token(Token = "0x600029F")]
	[Address(RVA = "0xD8124C", Offset = "0xD8124C", VA = "0xD8124C")]
	private void CreateHandMesh()
	{
	}

	[Token(Token = "0x60002A0")]
	[Address(RVA = "0xD818A0", Offset = "0xD818A0", VA = "0xD818A0")]
	private void AddKnuckleMesh(int knuckleVerts, float point1scale, float point2scale, Vector3 point1, Vector3 point2)
	{
	}

	[Token(Token = "0x60002A1")]
	[Address(RVA = "0xD81E38", Offset = "0xD81E38", VA = "0xD81E38")]
	private void AddPalmMesh(int knuckleVerts)
	{
	}

	[Token(Token = "0x60002A2")]
	[Address(RVA = "0xD84140", Offset = "0xD84140", VA = "0xD84140")]
	private void AddVertex(Vector3 position, Vector2 uv, Color color)
	{
	}

	[Token(Token = "0x60002A3")]
	[Address(RVA = "0xD844B4", Offset = "0xD844B4", VA = "0xD844B4")]
	public HandMeshMask()
	{
	}
}
[Token(Token = "0x2000068")]
public class HandMeshUI : MonoBehaviour
{
	[Token(Token = "0x4000207")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SphereCollider[] knobs;

	[Token(Token = "0x4000208")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TextMesh[] readouts;

	[Token(Token = "0x4000209")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int rightHeldKnob;

	[Token(Token = "0x400020A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private int leftHeldKnob;

	[Token(Token = "0x400020B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public OVRSkeleton leftHand;

	[Token(Token = "0x400020C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public OVRSkeleton rightHand;

	[Token(Token = "0x400020D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public HandMeshMask leftMask;

	[Token(Token = "0x400020E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public HandMeshMask rightMask;

	[Token(Token = "0x60002A4")]
	[Address(RVA = "0xD844D8", Offset = "0xD844D8", VA = "0xD844D8")]
	private void Start()
	{
	}

	[Token(Token = "0x60002A5")]
	[Address(RVA = "0xD84840", Offset = "0xD84840", VA = "0xD84840")]
	private void Update()
	{
	}

	[Token(Token = "0x60002A6")]
	[Address(RVA = "0xD84574", Offset = "0xD84574", VA = "0xD84574")]
	private void SetSliderValue(int sliderID, float value, bool isNormalized)
	{
	}

	[Token(Token = "0x60002A7")]
	[Address(RVA = "0xD84CA8", Offset = "0xD84CA8", VA = "0xD84CA8")]
	private void CheckForHands()
	{
	}

	[Token(Token = "0x60002A8")]
	[Address(RVA = "0xD85218", Offset = "0xD85218", VA = "0xD85218")]
	public HandMeshUI()
	{
	}
}
[Token(Token = "0x2000069")]
public class ObjectManipulator : MonoBehaviour
{
	[Token(Token = "0x200006A")]
	[CompilerGenerated]
	private sealed class <StartDemo>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ObjectManipulator <>4__this;

		[Token(Token = "0x4000225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <timer>5__2;

		[Token(Token = "0x4000226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <fadeTime>5__3;

		[Token(Token = "0x1700003E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002B8")]
			[Address(RVA = "0xDA12AC", Offset = "0xDA12AC", VA = "0xDA12AC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700003F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002BA")]
			[Address(RVA = "0xDA12F4", Offset = "0xDA12F4", VA = "0xDA12F4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002B5")]
		[Address(RVA = "0xDA0FAC", Offset = "0xDA0FAC", VA = "0xDA0FAC")]
		[DebuggerHidden]
		public <StartDemo>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x60002B6")]
		[Address(RVA = "0xDA0FD4", Offset = "0xDA0FD4", VA = "0xDA0FD4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002B7")]
		[Address(RVA = "0xDA0FD8", Offset = "0xDA0FD8", VA = "0xDA0FD8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002B9")]
		[Address(RVA = "0xDA12B4", Offset = "0xDA12B4", VA = "0xDA12B4", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400020F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRInput.Controller controller;

	[Token(Token = "0x4000210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private GameObject hoverObject;

	[Token(Token = "0x4000211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject grabObject;

	[Token(Token = "0x4000212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float grabTime;

	[Token(Token = "0x4000213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private Vector3 localGrabOffset;

	[Token(Token = "0x4000214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Quaternion localGrabRotation;

	[Token(Token = "0x4000215")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 camGrabPosition;

	[Token(Token = "0x4000216")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private Quaternion camGrabRotation;

	[Token(Token = "0x4000217")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Vector3 handGrabPosition;

	[Token(Token = "0x4000218")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Quaternion handGrabRotation;

	[Token(Token = "0x4000219")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Vector3 cursorPosition;

	[Token(Token = "0x400021A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float rotationOffset;

	[Token(Token = "0x400021B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public LineRenderer laser;

	[Token(Token = "0x400021C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Transform objectInfo;

	[Token(Token = "0x400021D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public TextMesh objectNameLabel;

	[Token(Token = "0x400021E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public TextMesh objectInstructionsLabel;

	[Token(Token = "0x400021F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Image objectInfoBG;

	[Token(Token = "0x4000220")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public GameObject demoObjects;

	[Token(Token = "0x4000221")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public OVRPassthroughLayer passthrough;

	[Token(Token = "0x60002A9")]
	[Address(RVA = "0xD85228", Offset = "0xD85228", VA = "0xD85228")]
	private void Start()
	{
	}

	[Token(Token = "0x60002AA")]
	[Address(RVA = "0xD85424", Offset = "0xD85424", VA = "0xD85424")]
	private void Update()
	{
	}

	[Token(Token = "0x60002AB")]
	[Address(RVA = "0xD86360", Offset = "0xD86360", VA = "0xD86360")]
	private void GrabHoverObject(GameObject grbObj, Vector3 controllerPos, Quaternion controllerRot)
	{
	}

	[Token(Token = "0x60002AC")]
	[Address(RVA = "0xD870F4", Offset = "0xD870F4", VA = "0xD870F4")]
	private void ReleaseObject()
	{
	}

	[Token(Token = "0x60002AD")]
	[Address(RVA = "0xD853B0", Offset = "0xD853B0", VA = "0xD853B0")]
	[IteratorStateMachine(typeof(<StartDemo>d__23))]
	private IEnumerator StartDemo()
	{
		return null;
	}

	[Token(Token = "0x60002AE")]
	[Address(RVA = "0xD85674", Offset = "0xD85674", VA = "0xD85674")]
	private void FindHoverObject(Vector3 controllerPos, Quaternion controllerRot)
	{
	}

	[Token(Token = "0x60002AF")]
	[Address(RVA = "0xD86654", Offset = "0xD86654", VA = "0xD86654")]
	private void ManipulateObject(GameObject obj, Vector3 controllerPos, Quaternion controllerRot)
	{
	}

	[Token(Token = "0x60002B0")]
	[Address(RVA = "0xD87400", Offset = "0xD87400", VA = "0xD87400")]
	private void ClampGrabOffset(ref Vector3 localOffset, float thumbY)
	{
	}

	[Token(Token = "0x60002B1")]
	[Address(RVA = "0xD874B4", Offset = "0xD874B4", VA = "0xD874B4")]
	private Vector3 ClampScale(Vector3 localScale, Vector2 thumb)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60002B2")]
	[Address(RVA = "0xD874E4", Offset = "0xD874E4", VA = "0xD874E4")]
	private void CheckForDominantHand()
	{
	}

	[Token(Token = "0x60002B3")]
	[Address(RVA = "0xD872E4", Offset = "0xD872E4", VA = "0xD872E4")]
	private void AssignInstructions(GrabObject targetObject)
	{
	}

	[Token(Token = "0x60002B4")]
	[Address(RVA = "0xD875D4", Offset = "0xD875D4", VA = "0xD875D4")]
	public ObjectManipulator()
	{
	}
}
[Token(Token = "0x200006B")]
public class OverlayPassthrough : MonoBehaviour
{
	[Token(Token = "0x4000227")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x60002BB")]
	[Address(RVA = "0xDA12FC", Offset = "0xDA12FC", VA = "0xDA12FC")]
	private void Start()
	{
	}

	[Token(Token = "0x60002BC")]
	[Address(RVA = "0xDA1468", Offset = "0xDA1468", VA = "0xDA1468")]
	private void Update()
	{
	}

	[Token(Token = "0x60002BD")]
	[Address(RVA = "0xDA151C", Offset = "0xDA151C", VA = "0xDA151C")]
	public OverlayPassthrough()
	{
	}
}
[Token(Token = "0x200006C")]
public class PassthroughBrush : MonoBehaviour
{
	[Token(Token = "0x200006D")]
	public enum BrushState
	{
		[Token(Token = "0x4000233")]
		Idle,
		[Token(Token = "0x4000234")]
		Inking
	}

	[Token(Token = "0x4000228")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRInput.Controller controllerHand;

	[Token(Token = "0x4000229")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject lineSegmentPrefab;

	[Token(Token = "0x400022A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject lineContainer;

	[Token(Token = "0x400022B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool forceActive;

	[Token(Token = "0x400022C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private LineRenderer currentLineSegment;

	[Token(Token = "0x400022D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private List<Vector3> inkPositions;

	[Token(Token = "0x400022E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float minInkDist;

	[Token(Token = "0x400022F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float strokeWidth;

	[Token(Token = "0x4000230")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float strokeLength;

	[Token(Token = "0x4000231")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private BrushState brushStatus;

	[Token(Token = "0x60002BE")]
	[Address(RVA = "0xDA1524", Offset = "0xDA1524", VA = "0xDA1524")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60002BF")]
	[Address(RVA = "0xDA152C", Offset = "0xDA152C", VA = "0xDA152C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60002C0")]
	[Address(RVA = "0xDA17DC", Offset = "0xDA17DC", VA = "0xDA17DC")]
	private void StartLine(Vector3 inkPos)
	{
	}

	[Token(Token = "0x60002C1")]
	[Address(RVA = "0xDA1A10", Offset = "0xDA1A10", VA = "0xDA1A10")]
	private void UpdateLine(Vector3 inkPos)
	{
	}

	[Token(Token = "0x60002C2")]
	[Address(RVA = "0xDA1C50", Offset = "0xDA1C50", VA = "0xDA1C50")]
	public void ClearLines()
	{
	}

	[Token(Token = "0x60002C3")]
	[Address(RVA = "0xDA16F4", Offset = "0xDA16F4", VA = "0xDA16F4")]
	public void UndoInkLine()
	{
	}

	[Token(Token = "0x60002C4")]
	[Address(RVA = "0xDA1D20", Offset = "0xDA1D20", VA = "0xDA1D20")]
	public PassthroughBrush()
	{
	}
}
[Token(Token = "0x200006E")]
public class PassthroughController : MonoBehaviour
{
	[Token(Token = "0x4000235")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x60002C5")]
	[Address(RVA = "0xDA1DBC", Offset = "0xDA1DBC", VA = "0xDA1DBC")]
	private void Start()
	{
	}

	[Token(Token = "0x60002C6")]
	[Address(RVA = "0xDA1F28", Offset = "0xDA1F28", VA = "0xDA1F28")]
	private void Update()
	{
	}

	[Token(Token = "0x60002C7")]
	[Address(RVA = "0xDA2114", Offset = "0xDA2114", VA = "0xDA2114")]
	public PassthroughController()
	{
	}
}
[Token(Token = "0x200006F")]
public class PassthroughProjectionSurface : MonoBehaviour
{
	[Token(Token = "0x4000236")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x4000237")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshFilter projectionObject;

	[Token(Token = "0x4000238")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private MeshRenderer quadOutline;

	[Token(Token = "0x60002C8")]
	[Address(RVA = "0xDA211C", Offset = "0xDA211C", VA = "0xDA211C")]
	private void Start()
	{
	}

	[Token(Token = "0x60002C9")]
	[Address(RVA = "0xDA2304", Offset = "0xDA2304", VA = "0xDA2304")]
	private void Update()
	{
	}

	[Token(Token = "0x60002CA")]
	[Address(RVA = "0xDA24A4", Offset = "0xDA24A4", VA = "0xDA24A4")]
	public PassthroughProjectionSurface()
	{
	}
}
[Token(Token = "0x2000070")]
public class PassthroughStyler : MonoBehaviour
{
	[Token(Token = "0x2000071")]
	[CompilerGenerated]
	private sealed class <FadeToCurrentStyle>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PassthroughStyler <>4__this;

		[Token(Token = "0x400024A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x400024B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <timer>5__2;

		[Token(Token = "0x400024C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <brightness>5__3;

		[Token(Token = "0x400024D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <contrast>5__4;

		[Token(Token = "0x400024E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Color <edgeCol>5__5;

		[Token(Token = "0x17000040")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002DC")]
			[Address(RVA = "0xDA3108", Offset = "0xDA3108", VA = "0xDA3108", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000041")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002DE")]
			[Address(RVA = "0xDA3150", Offset = "0xDA3150", VA = "0xDA3150", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002D9")]
		[Address(RVA = "0xDA2E70", Offset = "0xDA2E70", VA = "0xDA2E70")]
		[DebuggerHidden]
		public <FadeToCurrentStyle>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x60002DA")]
		[Address(RVA = "0xDA2FB4", Offset = "0xDA2FB4", VA = "0xDA2FB4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002DB")]
		[Address(RVA = "0xDA2FB8", Offset = "0xDA2FB8", VA = "0xDA2FB8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002DD")]
		[Address(RVA = "0xDA3110", Offset = "0xDA3110", VA = "0xDA3110", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x2000072")]
	[CompilerGenerated]
	private sealed class <FadeToDefaultPassthrough>d__19 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400024F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PassthroughStyler <>4__this;

		[Token(Token = "0x4000252")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeTime;

		[Token(Token = "0x4000253")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float <timer>5__2;

		[Token(Token = "0x4000254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float <brightness>5__3;

		[Token(Token = "0x4000255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float <contrast>5__4;

		[Token(Token = "0x4000256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Color <edgeCol>5__5;

		[Token(Token = "0x17000042")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002E2")]
			[Address(RVA = "0xDA32C4", Offset = "0xDA32C4", VA = "0xDA32C4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000043")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002E4")]
			[Address(RVA = "0xDA330C", Offset = "0xDA330C", VA = "0xDA330C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002DF")]
		[Address(RVA = "0xDA2E98", Offset = "0xDA2E98", VA = "0xDA2E98")]
		[DebuggerHidden]
		public <FadeToDefaultPassthrough>d__19(int <>1__state)
		{
		}

		[Token(Token = "0x60002E0")]
		[Address(RVA = "0xDA3158", Offset = "0xDA3158", VA = "0xDA3158", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002E1")]
		[Address(RVA = "0xDA315C", Offset = "0xDA315C", VA = "0xDA315C", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002E3")]
		[Address(RVA = "0xDA32CC", Offset = "0xDA32CC", VA = "0xDA32CC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000239")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRInput.Controller controllerHand;

	[Token(Token = "0x400023A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x400023B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IEnumerator fadeIn;

	[Token(Token = "0x400023C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private IEnumerator fadeOut;

	[Token(Token = "0x400023D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public RectTransform[] menuOptions;

	[Token(Token = "0x400023E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public RectTransform colorWheel;

	[Token(Token = "0x400023F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Texture2D colorTexture;

	[Token(Token = "0x4000240")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector3 cursorPosition;

	[Token(Token = "0x4000241")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool settingColor;

	[Token(Token = "0x4000242")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Color savedColor;

	[Token(Token = "0x4000243")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float savedBrightness;

	[Token(Token = "0x4000244")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float savedContrast;

	[Token(Token = "0x4000245")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public CanvasGroup mainCanvas;

	[Token(Token = "0x4000246")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public GameObject[] compactObjects;

	[Token(Token = "0x60002CB")]
	[Address(RVA = "0xDA24AC", Offset = "0xDA24AC", VA = "0xDA24AC")]
	private void Start()
	{
	}

	[Token(Token = "0x60002CC")]
	[Address(RVA = "0xDA27F4", Offset = "0xDA27F4", VA = "0xDA27F4")]
	private void Update()
	{
	}

	[Token(Token = "0x60002CD")]
	[Address(RVA = "0xDA2B94", Offset = "0xDA2B94", VA = "0xDA2B94")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x60002CE")]
	[Address(RVA = "0xDA2D08", Offset = "0xDA2D08", VA = "0xDA2D08")]
	public void Release()
	{
	}

	[Token(Token = "0x60002CF")]
	[Address(RVA = "0xDA2C84", Offset = "0xDA2C84", VA = "0xDA2C84")]
	[IteratorStateMachine(typeof(<FadeToCurrentStyle>d__18))]
	private IEnumerator FadeToCurrentStyle(float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x60002D0")]
	[Address(RVA = "0xDA2DEC", Offset = "0xDA2DEC", VA = "0xDA2DEC")]
	[IteratorStateMachine(typeof(<FadeToDefaultPassthrough>d__19))]
	private IEnumerator FadeToDefaultPassthrough(float fadeTime)
	{
		return null;
	}

	[Token(Token = "0x60002D1")]
	[Address(RVA = "0xDA2EC0", Offset = "0xDA2EC0", VA = "0xDA2EC0")]
	public void OnBrightnessChanged(float newValue)
	{
	}

	[Token(Token = "0x60002D2")]
	[Address(RVA = "0xDA2EE0", Offset = "0xDA2EE0", VA = "0xDA2EE0")]
	public void OnContrastChanged(float newValue)
	{
	}

	[Token(Token = "0x60002D3")]
	[Address(RVA = "0xDA2F00", Offset = "0xDA2F00", VA = "0xDA2F00")]
	public void OnAlphaChanged(float newValue)
	{
	}

	[Token(Token = "0x60002D4")]
	[Address(RVA = "0xDA278C", Offset = "0xDA278C", VA = "0xDA278C")]
	private void ShowFullMenu(bool doShow)
	{
	}

	[Token(Token = "0x60002D5")]
	[Address(RVA = "0xDA2F34", Offset = "0xDA2F34", VA = "0xDA2F34")]
	public void Cursor(Vector3 cP)
	{
	}

	[Token(Token = "0x60002D6")]
	[Address(RVA = "0xDA2F40", Offset = "0xDA2F40", VA = "0xDA2F40")]
	public void DoColorDrag(bool doDrag)
	{
	}

	[Token(Token = "0x60002D7")]
	[Address(RVA = "0xDA280C", Offset = "0xDA280C", VA = "0xDA280C")]
	public void GetColorFromWheel()
	{
	}

	[Token(Token = "0x60002D8")]
	[Address(RVA = "0xDA2F4C", Offset = "0xDA2F4C", VA = "0xDA2F4C")]
	public PassthroughStyler()
	{
	}
}
[Token(Token = "0x2000073")]
public class PassthroughSurface : MonoBehaviour
{
	[Token(Token = "0x4000257")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x4000258")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshFilter projectionObject;

	[Token(Token = "0x60002E5")]
	[Address(RVA = "0xDA3314", Offset = "0xDA3314", VA = "0xDA3314")]
	private void Start()
	{
	}

	[Token(Token = "0x60002E6")]
	[Address(RVA = "0xDA33C8", Offset = "0xDA33C8", VA = "0xDA33C8")]
	public PassthroughSurface()
	{
	}
}
[Token(Token = "0x2000074")]
public class SceneSampler : MonoBehaviour
{
	[Token(Token = "0x4000259")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private int currentSceneIndex;

	[Token(Token = "0x400025A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject displayText;

	[Token(Token = "0x60002E7")]
	[Address(RVA = "0xDA33D0", Offset = "0xDA33D0", VA = "0xDA33D0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60002E8")]
	[Address(RVA = "0xDA343C", Offset = "0xDA343C", VA = "0xDA343C")]
	private void Update()
	{
	}

	[Token(Token = "0x60002E9")]
	[Address(RVA = "0xDA3730", Offset = "0xDA3730", VA = "0xDA3730")]
	public SceneSampler()
	{
	}
}
[Token(Token = "0x2000075")]
public class SelectivePassthroughExperience : MonoBehaviour
{
	[Token(Token = "0x400025B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject leftMaskObject;

	[Token(Token = "0x400025C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject rightMaskObject;

	[Token(Token = "0x60002EA")]
	[Address(RVA = "0xDA3738", Offset = "0xDA3738", VA = "0xDA3738")]
	private void Update()
	{
	}

	[Token(Token = "0x60002EB")]
	[Address(RVA = "0xDA3B8C", Offset = "0xDA3B8C", VA = "0xDA3B8C")]
	public SelectivePassthroughExperience()
	{
	}
}
[Token(Token = "0x2000076")]
public class SPPquad : MonoBehaviour
{
	[Token(Token = "0x400025D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OVRPassthroughLayer passthroughLayer;

	[Token(Token = "0x400025E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public MeshFilter projectionObject;

	[Token(Token = "0x400025F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVRInput.Controller controllerHand;

	[Token(Token = "0x60002EC")]
	[Address(RVA = "0xDA3B94", Offset = "0xDA3B94", VA = "0xDA3B94")]
	private void Start()
	{
	}

	[Token(Token = "0x60002ED")]
	[Address(RVA = "0xDA3DFC", Offset = "0xDA3DFC", VA = "0xDA3DFC")]
	public void Grab(OVRInput.Controller grabHand)
	{
	}

	[Token(Token = "0x60002EE")]
	[Address(RVA = "0xDA3E48", Offset = "0xDA3E48", VA = "0xDA3E48")]
	public void Release()
	{
	}

	[Token(Token = "0x60002EF")]
	[Address(RVA = "0xDA3E88", Offset = "0xDA3E88", VA = "0xDA3E88")]
	public SPPquad()
	{
	}
}
[Token(Token = "0x2000077")]
public class BouncingBallLogic : MonoBehaviour
{
	[Token(Token = "0x2000078")]
	[CompilerGenerated]
	private sealed class <PlayPopCallback>d__18 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400026C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400026D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400026E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float clipLength;

		[Token(Token = "0x400026F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BouncingBallLogic <>4__this;

		[Token(Token = "0x17000044")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60002FB")]
			[Address(RVA = "0xDA45A4", Offset = "0xDA45A4", VA = "0xDA45A4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000045")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60002FD")]
			[Address(RVA = "0xDA45EC", Offset = "0xDA45EC", VA = "0xDA45EC", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60002F8")]
		[Address(RVA = "0xDA446C", Offset = "0xDA446C", VA = "0xDA446C")]
		[DebuggerHidden]
		public <PlayPopCallback>d__18(int <>1__state)
		{
		}

		[Token(Token = "0x60002F9")]
		[Address(RVA = "0xDA44AC", Offset = "0xDA44AC", VA = "0xDA44AC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60002FA")]
		[Address(RVA = "0xDA44B0", Offset = "0xDA44B0", VA = "0xDA44B0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60002FC")]
		[Address(RVA = "0xDA45AC", Offset = "0xDA45AC", VA = "0xDA45AC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000260")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float TTL;

	[Token(Token = "0x4000261")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private AudioClip pop;

	[Token(Token = "0x4000262")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private AudioClip bounce;

	[Token(Token = "0x4000263")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private AudioClip loadball;

	[Token(Token = "0x4000264")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Material visibleMat;

	[Token(Token = "0x4000265")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private Material hiddenMat;

	[Token(Token = "0x4000266")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private AudioSource audioSource;

	[Token(Token = "0x4000267")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform centerEyeCamera;

	[Token(Token = "0x4000268")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool isVisible;

	[Token(Token = "0x4000269")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float timer;

	[Token(Token = "0x400026A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool isReleased;

	[Token(Token = "0x400026B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	private bool isReadyForDestroy;

	[Token(Token = "0x60002F0")]
	[Address(RVA = "0xDA3E90", Offset = "0xDA3E90", VA = "0xDA3E90")]
	private void OnCollisionEnter()
	{
	}

	[Token(Token = "0x60002F1")]
	[Address(RVA = "0xDA3EB4", Offset = "0xDA3EB4", VA = "0xDA3EB4")]
	private void Start()
	{
	}

	[Token(Token = "0x60002F2")]
	[Address(RVA = "0xDA3FBC", Offset = "0xDA3FBC", VA = "0xDA3FBC")]
	private void Update()
	{
	}

	[Token(Token = "0x60002F3")]
	[Address(RVA = "0xDA4060", Offset = "0xDA4060", VA = "0xDA4060")]
	private void UpdateVisibility()
	{
	}

	[Token(Token = "0x60002F4")]
	[Address(RVA = "0xDA42B4", Offset = "0xDA42B4", VA = "0xDA42B4")]
	private void SetVisible(bool setVisible)
	{
	}

	[Token(Token = "0x60002F5")]
	[Address(RVA = "0xDA4358", Offset = "0xDA4358", VA = "0xDA4358")]
	public void Release(Vector3 pos, Vector3 vel, Vector3 angVel)
	{
	}

	[Token(Token = "0x60002F6")]
	[Address(RVA = "0xDA4230", Offset = "0xDA4230", VA = "0xDA4230")]
	[IteratorStateMachine(typeof(<PlayPopCallback>d__18))]
	private IEnumerator PlayPopCallback(float clipLength)
	{
		return null;
	}

	[Token(Token = "0x60002F7")]
	[Address(RVA = "0xDA4494", Offset = "0xDA4494", VA = "0xDA4494")]
	public BouncingBallLogic()
	{
	}
}
[Token(Token = "0x2000079")]
public class BouncingBallMgr : MonoBehaviour
{
	[Token(Token = "0x4000270")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform trackingspace;

	[Token(Token = "0x4000271")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private GameObject rightControllerPivot;

	[Token(Token = "0x4000272")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private OVRInput.RawButton actionBtn;

	[Token(Token = "0x4000273")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private GameObject ball;

	[Token(Token = "0x4000274")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject currentBall;

	[Token(Token = "0x4000275")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool ballGrabbed;

	[Token(Token = "0x60002FE")]
	[Address(RVA = "0xDA45F4", Offset = "0xDA45F4", VA = "0xDA45F4")]
	private void Update()
	{
	}

	[Token(Token = "0x60002FF")]
	[Address(RVA = "0xDA4904", Offset = "0xDA4904", VA = "0xDA4904")]
	public BouncingBallMgr()
	{
	}
}
[Token(Token = "0x200007A")]
[DefaultExecutionOrder(30)]
[RequireComponent(typeof(OVRSceneAnchor))]
public class FurnitureSpawner : MonoBehaviour
{
	[Token(Token = "0x4000276")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Add a point at ceiling.")]
	public GameObject RoomLightPrefab;

	[Token(Token = "0x4000277")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public List<Spawnable> SpawnablePrefabs;

	[Token(Token = "0x4000278")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private OVRSceneAnchor _sceneAnchor;

	[Token(Token = "0x4000279")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private OVRSemanticClassification _classification;

	[Token(Token = "0x400027A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static GameObject _roomLightRef;

	[Token(Token = "0x400027B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int _frameCounter;

	[Token(Token = "0x6000300")]
	[Address(RVA = "0xDA490C", Offset = "0xDA490C", VA = "0xDA490C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000301")]
	[Address(RVA = "0xDA4B24", Offset = "0xDA4B24", VA = "0xDA4B24")]
	private void SpawnSpawnable()
	{
	}

	[Token(Token = "0x6000302")]
	[Address(RVA = "0xDA4F94", Offset = "0xDA4F94", VA = "0xDA4F94")]
	private bool FindValidSpawnable(out Spawnable currentSpawnable)
	{
		return default(bool);
	}

	[Token(Token = "0x6000303")]
	[Address(RVA = "0xDA49AC", Offset = "0xDA49AC", VA = "0xDA49AC")]
	private void AddRoomLight()
	{
	}

	[Token(Token = "0x6000304")]
	[Address(RVA = "0xDA51B4", Offset = "0xDA51B4", VA = "0xDA51B4")]
	private void GetVolumeFromTopPlane(Transform plane, Vector2 dimensions, float height, out Vector3 position, out Quaternion rotation, out Vector3 localScale)
	{
	}

	[Token(Token = "0x6000305")]
	[Address(RVA = "0xDA56A0", Offset = "0xDA56A0", VA = "0xDA56A0")]
	public FurnitureSpawner()
	{
	}
}
[Token(Token = "0x200007B")]
public class MyCustomSceneModelLoader : OVRSceneModelLoader
{
	[Token(Token = "0x200007C")]
	[CompilerGenerated]
	private sealed class <DelayedLoad>d__0 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400027C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400027D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400027E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MyCustomSceneModelLoader <>4__this;

		[Token(Token = "0x17000046")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600030D")]
			[Address(RVA = "0xDA58D4", Offset = "0xDA58D4", VA = "0xDA58D4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000047")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600030F")]
			[Address(RVA = "0xDA591C", Offset = "0xDA591C", VA = "0xDA591C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600030A")]
		[Address(RVA = "0xDA571C", Offset = "0xDA571C", VA = "0xDA571C")]
		[DebuggerHidden]
		public <DelayedLoad>d__0(int <>1__state)
		{
		}

		[Token(Token = "0x600030B")]
		[Address(RVA = "0xDA57D4", Offset = "0xDA57D4", VA = "0xDA57D4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600030C")]
		[Address(RVA = "0xDA57D8", Offset = "0xDA57D8", VA = "0xDA57D8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600030E")]
		[Address(RVA = "0xDA58DC", Offset = "0xDA58DC", VA = "0xDA58DC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x6000306")]
	[Address(RVA = "0xDA56A8", Offset = "0xDA56A8", VA = "0xDA56A8")]
	[IteratorStateMachine(typeof(<DelayedLoad>d__0))]
	private IEnumerator DelayedLoad()
	{
		return null;
	}

	[Token(Token = "0x6000307")]
	[Address(RVA = "0xDA5744", Offset = "0xDA5744", VA = "0xDA5744", Slot = "4")]
	protected override void OnStart()
	{
	}

	[Token(Token = "0x6000308")]
	[Address(RVA = "0xDA5764", Offset = "0xDA5764", VA = "0xDA5764", Slot = "6")]
	protected override void OnNoSceneModelToLoad()
	{
	}

	[Token(Token = "0x6000309")]
	[Address(RVA = "0xDA57CC", Offset = "0xDA57CC", VA = "0xDA57CC")]
	public MyCustomSceneModelLoader()
	{
	}
}
[Token(Token = "0x200007D")]
[RequireComponent(typeof(OVRManager))]
public class PassthroughPlayInEditor : MonoBehaviour
{
	[Token(Token = "0x6000310")]
	[Address(RVA = "0xDA5924", Offset = "0xDA5924", VA = "0xDA5924")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000311")]
	[Address(RVA = "0xDA5928", Offset = "0xDA5928", VA = "0xDA5928")]
	public PassthroughPlayInEditor()
	{
	}
}
[Token(Token = "0x200007E")]
public class RequestCaptureFlow : MonoBehaviour
{
	[Token(Token = "0x400027F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRInput.Button RequestCaptureBtn;

	[Token(Token = "0x4000280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private OVRSceneManager _sceneManager;

	[Token(Token = "0x6000312")]
	[Address(RVA = "0xDA5930", Offset = "0xDA5930", VA = "0xDA5930")]
	private void Start()
	{
	}

	[Token(Token = "0x6000313")]
	[Address(RVA = "0xDA59A8", Offset = "0xDA59A8", VA = "0xDA59A8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000314")]
	[Address(RVA = "0xDA5A2C", Offset = "0xDA5A2C", VA = "0xDA5A2C")]
	public RequestCaptureFlow()
	{
	}
}
[Token(Token = "0x200007F")]
[ExecuteInEditMode]
public class SimpleResizable : MonoBehaviour
{
	[Token(Token = "0x2000080")]
	public enum Method
	{
		[Token(Token = "0x4000290")]
		Adapt,
		[Token(Token = "0x4000291")]
		AdaptWithAsymmetricalPadding,
		[Token(Token = "0x4000292")]
		Scale,
		[Token(Token = "0x4000293")]
		None
	}

	[Token(Token = "0x4000281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Space(15f)]
	public Method ScalingX;

	[Token(Token = "0x4000282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(0f, 0.5f)]
	public float PaddingX;

	[Token(Token = "0x4000283")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Range(-0.5f, 0f)]
	public float PaddingXMax;

	[Token(Token = "0x4000284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Space(15f)]
	public Method ScalingY;

	[Token(Token = "0x4000285")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Range(0f, 0.5f)]
	public float PaddingY;

	[Token(Token = "0x4000286")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Range(-0.5f, 0f)]
	public float PaddingYMax;

	[Token(Token = "0x4000287")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Space(15f)]
	public Method ScalingZ;

	[Token(Token = "0x4000288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[Range(0f, 0.5f)]
	public float PaddingZ;

	[Token(Token = "0x4000289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Range(-0.5f, 0f)]
	public float PaddingZMax;

	[Token(Token = "0x400028D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Bounds _bounds;

	[Token(Token = "0x400028E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Transform _pivotTransform;

	[Token(Token = "0x17000048")]
	public Vector3 PivotPosition
	{
		[Token(Token = "0x6000315")]
		[Address(RVA = "0xDA5A3C", Offset = "0xDA5A3C", VA = "0xDA5A3C")]
		get
		{
			return default(Vector3);
		}
	}

	[Token(Token = "0x17000049")]
	public Vector3 NewSize
	{
		[Token(Token = "0x6000316")]
		[Address(RVA = "0xDA5A58", Offset = "0xDA5A58", VA = "0xDA5A58")]
		[CompilerGenerated]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000317")]
		[Address(RVA = "0xDA5A64", Offset = "0xDA5A64", VA = "0xDA5A64")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700004A")]
	public Vector3 DefaultSize
	{
		[Token(Token = "0x6000318")]
		[Address(RVA = "0xDA5A70", Offset = "0xDA5A70", VA = "0xDA5A70")]
		[CompilerGenerated]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000319")]
		[Address(RVA = "0xDA5A7C", Offset = "0xDA5A7C", VA = "0xDA5A7C")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x1700004B")]
	public Mesh Mesh
	{
		[Token(Token = "0x600031A")]
		[Address(RVA = "0xDA5A88", Offset = "0xDA5A88", VA = "0xDA5A88")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600031B")]
		[Address(RVA = "0xDA5A90", Offset = "0xDA5A90", VA = "0xDA5A90")]
		[CompilerGenerated]
		private set
		{
		}
	}

	[Token(Token = "0x600031C")]
	[Address(RVA = "0xDA5A98", Offset = "0xDA5A98", VA = "0xDA5A98")]
	private void Awake()
	{
	}

	[Token(Token = "0x600031D")]
	[Address(RVA = "0xDA5BD4", Offset = "0xDA5BD4", VA = "0xDA5BD4")]
	public SimpleResizable()
	{
	}
}
[Token(Token = "0x2000081")]
public class SimpleResizer
{
	[Token(Token = "0x600031E")]
	[Address(RVA = "0xDA530C", Offset = "0xDA530C", VA = "0xDA530C")]
	public void CreateResizedObject(Vector3 newSize, GameObject parent, SimpleResizable sourcePrefab)
	{
	}

	[Token(Token = "0x600031F")]
	[Address(RVA = "0xDA5BDC", Offset = "0xDA5BDC", VA = "0xDA5BDC")]
	private Mesh ProcessVertices(SimpleResizable resizable, Vector3 newSize)
	{
		return null;
	}

	[Token(Token = "0x6000320")]
	[Address(RVA = "0xDA5E60", Offset = "0xDA5E60", VA = "0xDA5E60")]
	private float CalculateNewVertexPosition(SimpleResizable.Method resizeMethod, float currentPosition, float currentSize, float newSize, float padding, float paddingMax, float pivot)
	{
		return default(float);
	}

	[Token(Token = "0x6000321")]
	[Address(RVA = "0xDA5304", Offset = "0xDA5304", VA = "0xDA5304")]
	public SimpleResizer()
	{
	}
}
[Serializable]
[Token(Token = "0x2000082")]
public class Spawnable : ISerializationCallbackReceiver
{
	[Token(Token = "0x4000294")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public SimpleResizable ResizablePrefab;

	[Token(Token = "0x4000295")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string ClassificationLabel;

	[Token(Token = "0x4000296")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private int _editorClassificationIndex;

	[Token(Token = "0x6000322")]
	[Address(RVA = "0xDA5F08", Offset = "0xDA5F08", VA = "0xDA5F08", Slot = "4")]
	public void OnBeforeSerialize()
	{
	}

	[Token(Token = "0x6000323")]
	[Address(RVA = "0xDA5F0C", Offset = "0xDA5F0C", VA = "0xDA5F0C", Slot = "5")]
	public void OnAfterDeserialize()
	{
	}

	[Token(Token = "0x6000324")]
	[Address(RVA = "0xDA6374", Offset = "0xDA6374", VA = "0xDA6374")]
	public Spawnable()
	{
	}
}
[Token(Token = "0x2000083")]
[RequireComponent(typeof(OVRSceneAnchor))]
public class VolumeAndPlaneSwitcher : MonoBehaviour
{
	[Token(Token = "0x2000084")]
	public enum GeometryType
	{
		[Token(Token = "0x400029B")]
		Plane,
		[Token(Token = "0x400029C")]
		Volume
	}

	[Serializable]
	[Token(Token = "0x2000085")]
	public struct LabelGeometryPair
	{
		[Token(Token = "0x400029D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string label;

		[Token(Token = "0x400029E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public GeometryType desiredGeometryType;
	}

	[Token(Token = "0x4000297")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVRSceneAnchor planePrefab;

	[Token(Token = "0x4000298")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVRSceneAnchor volumePrefab;

	[Token(Token = "0x4000299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public List<LabelGeometryPair> desiredSwitches;

	[Token(Token = "0x6000326")]
	[Address(RVA = "0xDA63CC", Offset = "0xDA63CC", VA = "0xDA63CC")]
	private void ReplaceAnchor(OVRSceneAnchor prefab, Vector3 position, Quaternion rotation, Vector3 localScale)
	{
	}

	[Token(Token = "0x6000327")]
	[Address(RVA = "0xDA67F8", Offset = "0xDA67F8", VA = "0xDA67F8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000328")]
	[Address(RVA = "0xDA7130", Offset = "0xDA7130", VA = "0xDA7130")]
	private void GetVolumeFromTopPlane(Transform plane, Vector2 dimensions, float height, out Vector3 position, out Quaternion rotation, out Vector3 localScale)
	{
	}

	[Token(Token = "0x6000329")]
	[Address(RVA = "0xDA7008", Offset = "0xDA7008", VA = "0xDA7008")]
	private void GetTopPlaneFromVolume(Transform volume, Vector3 dimensions, out Vector3 position, out Quaternion rotation, out Vector3 localScale)
	{
	}

	[Token(Token = "0x600032A")]
	[Address(RVA = "0xDA71B0", Offset = "0xDA71B0", VA = "0xDA71B0")]
	public VolumeAndPlaneSwitcher()
	{
	}
}
[Token(Token = "0x2000086")]
[RequireComponent(typeof(OVRSpatialAnchor))]
public class Anchor : MonoBehaviour
{
	[Token(Token = "0x2000087")]
	[CompilerGenerated]
	private sealed class <Start>d__20 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40002B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40002B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40002B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Anchor <>4__this;

		[Token(Token = "0x1700004D")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600033E")]
			[Address(RVA = "0xDA7F78", Offset = "0xDA7F78", VA = "0xDA7F78", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700004E")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000340")]
			[Address(RVA = "0xDA7FC0", Offset = "0xDA7FC0", VA = "0xDA7FC0", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600033B")]
		[Address(RVA = "0xDA73AC", Offset = "0xDA73AC", VA = "0xDA73AC")]
		[DebuggerHidden]
		public <Start>d__20(int <>1__state)
		{
		}

		[Token(Token = "0x600033C")]
		[Address(RVA = "0xDA7DFC", Offset = "0xDA7DFC", VA = "0xDA7DFC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600033D")]
		[Address(RVA = "0xDA7E00", Offset = "0xDA7E00", VA = "0xDA7E00", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600033F")]
		[Address(RVA = "0xDA7F80", Offset = "0xDA7F80", VA = "0xDA7F80", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400029F")]
	public const string NumUuidsPlayerPref = "numUuids";

	[Token(Token = "0x40002A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[FormerlySerializedAs("canvas_")]
	private Canvas _canvas;

	[Token(Token = "0x40002A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[FormerlySerializedAs("pivot_")]
	private Transform _pivot;

	[Token(Token = "0x40002A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	[FormerlySerializedAs("anchorMenu_")]
	private GameObject _anchorMenu;

	[Token(Token = "0x40002A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool _isSelected;

	[Token(Token = "0x40002A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool _isHovered;

	[Token(Token = "0x40002A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	[FormerlySerializedAs("anchorName_")]
	private TextMeshProUGUI _anchorName;

	[Token(Token = "0x40002A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[FormerlySerializedAs("saveIcon_")]
	private GameObject _saveIcon;

	[Token(Token = "0x40002A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[FormerlySerializedAs("labelImage_")]
	[SerializeField]
	private Image _labelImage;

	[Token(Token = "0x40002A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	[FormerlySerializedAs("labelBaseColor_")]
	private Color _labelBaseColor;

	[Token(Token = "0x40002A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[FormerlySerializedAs("labelHighlightColor_")]
	[SerializeField]
	private Color _labelHighlightColor;

	[Token(Token = "0x40002AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	[FormerlySerializedAs("labelSelectedColor_")]
	private Color _labelSelectedColor;

	[Token(Token = "0x40002AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	[FormerlySerializedAs("uiManager_")]
	private AnchorUIManager _uiManager;

	[Token(Token = "0x40002AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	[FormerlySerializedAs("renderers_")]
	private MeshRenderer[] _renderers;

	[Token(Token = "0x40002AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private int _menuIndex;

	[Token(Token = "0x40002AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[FormerlySerializedAs("buttonList_")]
	[SerializeField]
	private List<UnityEngine.UI.Button> _buttonList;

	[Token(Token = "0x40002AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private UnityEngine.UI.Button _selectedButton;

	[Token(Token = "0x40002B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private OVRSpatialAnchor _spatialAnchor;

	[Token(Token = "0x40002B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private GameObject _icon;

	[Token(Token = "0x1700004C")]
	public bool ShowSaveIcon
	{
		[Token(Token = "0x6000331")]
		[Address(RVA = "0xDA7858", Offset = "0xDA7858", VA = "0xDA7858")]
		set
		{
		}
	}

	[Token(Token = "0x600032B")]
	[Address(RVA = "0xDA71B8", Offset = "0xDA71B8", VA = "0xDA71B8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600032C")]
	[Address(RVA = "0xDA7338", Offset = "0xDA7338", VA = "0xDA7338")]
	[IteratorStateMachine(typeof(<Start>d__20))]
	private IEnumerator Start()
	{
		return null;
	}

	[Token(Token = "0x600032D")]
	[Address(RVA = "0xDA73D4", Offset = "0xDA73D4", VA = "0xDA73D4")]
	private void Update()
	{
	}

	[Token(Token = "0x600032E")]
	[Address(RVA = "0xDA764C", Offset = "0xDA764C", VA = "0xDA764C")]
	public void OnSaveLocalButtonPressed()
	{
	}

	[Token(Token = "0x600032F")]
	[Address(RVA = "0xDA771C", Offset = "0xDA771C", VA = "0xDA771C")]
	public void OnHideButtonPressed()
	{
	}

	[Token(Token = "0x6000330")]
	[Address(RVA = "0xDA7788", Offset = "0xDA7788", VA = "0xDA7788")]
	public void OnEraseButtonPressed()
	{
	}

	[Token(Token = "0x6000332")]
	[Address(RVA = "0xDA7878", Offset = "0xDA7878", VA = "0xDA7878")]
	public void OnHoverStart()
	{
	}

	[Token(Token = "0x6000333")]
	[Address(RVA = "0xDA7994", Offset = "0xDA7994", VA = "0xDA7994")]
	public void OnHoverEnd()
	{
	}

	[Token(Token = "0x6000334")]
	[Address(RVA = "0xDA7A9C", Offset = "0xDA7A9C", VA = "0xDA7A9C")]
	public void OnSelect()
	{
	}

	[Token(Token = "0x6000335")]
	[Address(RVA = "0xDA7424", Offset = "0xDA7424", VA = "0xDA7424")]
	private void BillboardPanel(Transform panel)
	{
	}

	[Token(Token = "0x6000336")]
	[Address(RVA = "0xDA7558", Offset = "0xDA7558", VA = "0xDA7558")]
	private void HandleMenuNavigation()
	{
	}

	[Token(Token = "0x6000337")]
	[Address(RVA = "0xDA7B6C", Offset = "0xDA7B6C", VA = "0xDA7B6C")]
	private void NavigateToIndexInMenu(bool moveNext)
	{
	}

	[Token(Token = "0x6000338")]
	[Address(RVA = "0xDA7CA4", Offset = "0xDA7CA4", VA = "0xDA7CA4")]
	public Anchor()
	{
	}
}
[Token(Token = "0x2000088")]
[RequireComponent(typeof(SpatialAnchorLoader))]
public class AnchorUIManager : MonoBehaviour
{
	[Token(Token = "0x2000089")]
	public enum AnchorMode
	{
		[Token(Token = "0x40002C8")]
		Create,
		[Token(Token = "0x40002C9")]
		Select
	}

	[Token(Token = "0x200008A")]
	private delegate void PrimaryPressDelegate();

	[Token(Token = "0x40002B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static AnchorUIManager Instance;

	[Token(Token = "0x40002B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[FormerlySerializedAs("createModeButton_")]
	private GameObject _createModeButton;

	[Token(Token = "0x40002B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[FormerlySerializedAs("selectModeButton_")]
	private GameObject _selectModeButton;

	[Token(Token = "0x40002B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[FormerlySerializedAs("trackedDevice_")]
	[SerializeField]
	private Transform _trackedDevice;

	[Token(Token = "0x40002B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform _raycastOrigin;

	[Token(Token = "0x40002BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool _drawRaycast;

	[Token(Token = "0x40002BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	[FormerlySerializedAs("lineRenderer_")]
	private LineRenderer _lineRenderer;

	[Token(Token = "0x40002BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Anchor _hoveredAnchor;

	[Token(Token = "0x40002BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Anchor _selectedAnchor;

	[Token(Token = "0x40002BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private AnchorMode _mode;

	[Token(Token = "0x40002BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	[FormerlySerializedAs("buttonList_")]
	private List<UnityEngine.UI.Button> _buttonList;

	[Token(Token = "0x40002C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int _menuIndex;

	[Token(Token = "0x40002C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private UnityEngine.UI.Button _selectedButton;

	[Token(Token = "0x40002C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private Anchor _anchorPrefab;

	[Token(Token = "0x40002C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	[FormerlySerializedAs("placementPreview_")]
	private GameObject _placementPreview;

	[Token(Token = "0x40002C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[FormerlySerializedAs("anchorPlacementTransform_")]
	[SerializeField]
	private Transform _anchorPlacementTransform;

	[Token(Token = "0x40002C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private PrimaryPressDelegate _primaryPressDelegate;

	[Token(Token = "0x40002C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private bool _isFocused;

	[Token(Token = "0x1700004F")]
	public Anchor AnchorPrefab
	{
		[Token(Token = "0x6000341")]
		[Address(RVA = "0xDA7FC8", Offset = "0xDA7FC8", VA = "0xDA7FC8")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000342")]
	[Address(RVA = "0xDA7FD0", Offset = "0xDA7FD0", VA = "0xDA7FD0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000343")]
	[Address(RVA = "0xDA809C", Offset = "0xDA809C", VA = "0xDA809C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000344")]
	[Address(RVA = "0xDA81EC", Offset = "0xDA81EC", VA = "0xDA81EC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000345")]
	[Address(RVA = "0xDA865C", Offset = "0xDA865C", VA = "0xDA865C")]
	public void OnCreateModeButtonPressed()
	{
	}

	[Token(Token = "0x6000346")]
	[Address(RVA = "0xDA86C8", Offset = "0xDA86C8", VA = "0xDA86C8")]
	public void OnLoadAnchorsButtonPressed()
	{
	}

	[Token(Token = "0x6000347")]
	[Address(RVA = "0xDA8184", Offset = "0xDA8184", VA = "0xDA8184")]
	private void ToggleCreateMode()
	{
	}

	[Token(Token = "0x6000348")]
	[Address(RVA = "0xDA8948", Offset = "0xDA8948", VA = "0xDA8948")]
	private void StartPlacementMode()
	{
	}

	[Token(Token = "0x6000349")]
	[Address(RVA = "0xDA89D0", Offset = "0xDA89D0", VA = "0xDA89D0")]
	private void EndPlacementMode()
	{
	}

	[Token(Token = "0x600034A")]
	[Address(RVA = "0xDA89F0", Offset = "0xDA89F0", VA = "0xDA89F0")]
	private void StartSelectMode()
	{
	}

	[Token(Token = "0x600034B")]
	[Address(RVA = "0xDA8928", Offset = "0xDA8928", VA = "0xDA8928")]
	private void EndSelectMode()
	{
	}

	[Token(Token = "0x600034C")]
	[Address(RVA = "0xDA8568", Offset = "0xDA8568", VA = "0xDA8568")]
	private void HandleMenuNavigation()
	{
	}

	[Token(Token = "0x600034D")]
	[Address(RVA = "0xDA8BF0", Offset = "0xDA8BF0", VA = "0xDA8BF0")]
	private void NavigateToIndexInMenu(bool moveNext)
	{
	}

	[Token(Token = "0x600034E")]
	[Address(RVA = "0xDA8A78", Offset = "0xDA8A78", VA = "0xDA8A78")]
	private void ShowAnchorPreview()
	{
	}

	[Token(Token = "0x600034F")]
	[Address(RVA = "0xDA8B64", Offset = "0xDA8B64", VA = "0xDA8B64")]
	private void HideAnchorPreview()
	{
	}

	[Token(Token = "0x6000350")]
	[Address(RVA = "0xDA8CF0", Offset = "0xDA8CF0", VA = "0xDA8CF0")]
	private void PlaceAnchor()
	{
	}

	[Token(Token = "0x6000351")]
	[Address(RVA = "0xDA8B84", Offset = "0xDA8B84", VA = "0xDA8B84")]
	private void ShowRaycastLine()
	{
	}

	[Token(Token = "0x6000352")]
	[Address(RVA = "0xDA8BBC", Offset = "0xDA8BBC", VA = "0xDA8BBC")]
	private void HideRaycastLine()
	{
	}

	[Token(Token = "0x6000353")]
	[Address(RVA = "0xDA82EC", Offset = "0xDA82EC", VA = "0xDA82EC")]
	private void ControllerRaycast()
	{
	}

	[Token(Token = "0x6000354")]
	[Address(RVA = "0xDA8DDC", Offset = "0xDA8DDC", VA = "0xDA8DDC")]
	private void HoverAnchor(Anchor anchor)
	{
	}

	[Token(Token = "0x6000355")]
	[Address(RVA = "0xDA8E04", Offset = "0xDA8E04", VA = "0xDA8E04")]
	private void UnhoverAnchor()
	{
	}

	[Token(Token = "0x6000356")]
	[Address(RVA = "0xDA8E94", Offset = "0xDA8E94", VA = "0xDA8E94")]
	private void SelectAnchor()
	{
	}

	[Token(Token = "0x6000357")]
	[Address(RVA = "0xDA8FDC", Offset = "0xDA8FDC", VA = "0xDA8FDC")]
	public AnchorUIManager()
	{
	}
}
[Token(Token = "0x200008B")]
public class SpatialAnchorLoader : MonoBehaviour
{
	[Token(Token = "0x40002CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private OVRSpatialAnchor _anchorPrefab;

	[Token(Token = "0x40002CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Action<OVRSpatialAnchor.UnboundAnchor, bool> _onLoadAnchor;

	[Token(Token = "0x600035C")]
	[Address(RVA = "0xDA871C", Offset = "0xDA871C", VA = "0xDA871C")]
	public void LoadAnchorsByUuid()
	{
	}

	[Token(Token = "0x600035D")]
	[Address(RVA = "0xDA9198", Offset = "0xDA9198", VA = "0xDA9198")]
	private void Awake()
	{
	}

	[Token(Token = "0x600035E")]
	[Address(RVA = "0xDA90B8", Offset = "0xDA90B8", VA = "0xDA90B8")]
	private void Load(OVRSpatialAnchor.LoadOptions options)
	{
	}

	[Token(Token = "0x600035F")]
	[Address(RVA = "0xDA921C", Offset = "0xDA921C", VA = "0xDA921C")]
	private void OnLocalized(OVRSpatialAnchor.UnboundAnchor unboundAnchor, bool success)
	{
	}

	[Token(Token = "0x6000360")]
	[Address(RVA = "0xDA902C", Offset = "0xDA902C", VA = "0xDA902C")]
	private static void Log(string message)
	{
	}

	[Token(Token = "0x6000361")]
	[Address(RVA = "0xDA93CC", Offset = "0xDA93CC", VA = "0xDA93CC")]
	public SpatialAnchorLoader()
	{
	}
}
[Token(Token = "0x200008C")]
public class StartMenu : MonoBehaviour
{
	[Token(Token = "0x40002CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public OVROverlay overlay;

	[Token(Token = "0x40002CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public OVROverlay text;

	[Token(Token = "0x40002CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public OVRCameraRig vrRig;

	[Token(Token = "0x6000363")]
	[Address(RVA = "0xDA9504", Offset = "0xDA9504", VA = "0xDA9504")]
	private void Start()
	{
	}

	[Token(Token = "0x6000364")]
	[Address(RVA = "0xDA9718", Offset = "0xDA9718", VA = "0xDA9718")]
	private void LoadScene(int idx)
	{
	}

	[Token(Token = "0x6000365")]
	[Address(RVA = "0xDA981C", Offset = "0xDA981C", VA = "0xDA981C")]
	public StartMenu()
	{
	}
}
[Token(Token = "0x200008E")]
public class LocalizedHaptics : MonoBehaviour
{
	[Token(Token = "0x40002D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Header("Settings")]
	private OVRInput.Handedness m_handedness;

	[Token(Token = "0x40002D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private OVRInput.Controller m_controller;

	[Token(Token = "0x6000368")]
	[Address(RVA = "0xDA9840", Offset = "0xDA9840", VA = "0xDA9840")]
	private void Start()
	{
	}

	[Token(Token = "0x6000369")]
	[Address(RVA = "0xDA9868", Offset = "0xDA9868", VA = "0xDA9868")]
	private void Update()
	{
	}

	[Token(Token = "0x600036A")]
	[Address(RVA = "0xDA99A4", Offset = "0xDA99A4", VA = "0xDA99A4")]
	public LocalizedHaptics()
	{
	}
}
[Token(Token = "0x200008F")]
public class SceneSettings : MonoBehaviour
{
	[Token(Token = "0x40002D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Header("Time")]
	private float m_fixedTimeStep;

	[Token(Token = "0x40002D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Header("Physics")]
	[SerializeField]
	private float m_gravityScalar;

	[Token(Token = "0x40002D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private float m_defaultContactOffset;

	[Token(Token = "0x600036B")]
	[Address(RVA = "0xDA99B4", Offset = "0xDA99B4", VA = "0xDA99B4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600036C")]
	[Address(RVA = "0xDA9A4C", Offset = "0xDA9A4C", VA = "0xDA9A4C")]
	private void Start()
	{
	}

	[Token(Token = "0x600036D")]
	[Address(RVA = "0xDA9A54", Offset = "0xDA9A54", VA = "0xDA9A54")]
	private static void CollidersSetContactOffset(float contactOffset)
	{
	}

	[Token(Token = "0x600036E")]
	[Address(RVA = "0xDA9B18", Offset = "0xDA9B18", VA = "0xDA9B18")]
	public SceneSettings()
	{
	}
}
[Token(Token = "0x2000090")]
public class StylusTip : MonoBehaviour
{
	[Token(Token = "0x40002D6")]
	private const int MaxBreadCrumbs = 60;

	[Token(Token = "0x40002D7")]
	private const float BreadCrumbMinSize = 0.005f;

	[Token(Token = "0x40002D8")]
	private const float BreadCrumbMaxSize = 0.02f;

	[Token(Token = "0x40002D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("External")]
	[SerializeField]
	private Transform m_trackingSpace;

	[Token(Token = "0x40002DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Settings")]
	[SerializeField]
	private OVRInput.Handedness m_handedness;

	[Token(Token = "0x40002DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private GameObject m_breadCrumbPf;

	[Token(Token = "0x40002DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject m_breadCrumbContainer;

	[Token(Token = "0x40002DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private GameObject[] m_breadCrumbs;

	[Token(Token = "0x40002DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int m_breadCrumbIndexPrev;

	[Token(Token = "0x40002DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int m_breadCrumbIndexCurr;

	[Token(Token = "0x40002E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private OVRInput.Controller m_controller;

	[Token(Token = "0x600036F")]
	[Address(RVA = "0xDA9B38", Offset = "0xDA9B38", VA = "0xDA9B38")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000370")]
	[Address(RVA = "0xDA9DB8", Offset = "0xDA9DB8", VA = "0xDA9DB8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000371")]
	[Address(RVA = "0xDAA1E8", Offset = "0xDAA1E8", VA = "0xDAA1E8")]
	private static Pose GetT_Device_StylusTip(OVRInput.Controller controller)
	{
		return default(Pose);
	}

	[Token(Token = "0x6000372")]
	[Address(RVA = "0xDAA314", Offset = "0xDAA314", VA = "0xDAA314")]
	public StylusTip()
	{
	}
}
[Token(Token = "0x2000091")]
public class UiAxis1dInspector : MonoBehaviour
{
	[Token(Token = "0x40002E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Settings")]
	[SerializeField]
	private float m_minExtent;

	[Token(Token = "0x40002E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float m_maxExtent;

	[Token(Token = "0x40002E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("Components")]
	[SerializeField]
	private TextMeshProUGUI m_nameLabel;

	[Token(Token = "0x40002E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TextMeshProUGUI m_valueLabel;

	[Token(Token = "0x40002E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private UnityEngine.UI.Slider m_slider;

	[Token(Token = "0x6000373")]
	[Address(RVA = "0xDAA32C", Offset = "0xDAA32C", VA = "0xDAA32C")]
	public void SetExtents(float minExtent, float maxExtent)
	{
	}

	[Token(Token = "0x6000374")]
	[Address(RVA = "0xDAA334", Offset = "0xDAA334", VA = "0xDAA334")]
	public void SetName(string name)
	{
	}

	[Token(Token = "0x6000375")]
	[Address(RVA = "0xDAA358", Offset = "0xDAA358", VA = "0xDAA358")]
	public void SetValue(float value)
	{
	}

	[Token(Token = "0x6000376")]
	[Address(RVA = "0xDAA45C", Offset = "0xDAA45C", VA = "0xDAA45C")]
	public UiAxis1dInspector()
	{
	}
}
[Token(Token = "0x2000092")]
public class UiAxis2dInspector : MonoBehaviour
{
	[Token(Token = "0x40002E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Settings")]
	[SerializeField]
	private Vector2 m_xExtent;

	[Token(Token = "0x40002E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Vector2 m_yExtent;

	[Token(Token = "0x40002E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Components")]
	[SerializeField]
	private TextMeshProUGUI m_nameLabel;

	[Token(Token = "0x40002E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private TextMeshProUGUI m_valueLabel;

	[Token(Token = "0x40002EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Image m_handle;

	[Token(Token = "0x6000377")]
	[Address(RVA = "0xDAA46C", Offset = "0xDAA46C", VA = "0xDAA46C")]
	public void SetExtents(Vector2 xExtent, Vector2 yExtent)
	{
	}

	[Token(Token = "0x6000378")]
	[Address(RVA = "0xDAA478", Offset = "0xDAA478", VA = "0xDAA478")]
	public void SetName(string name)
	{
	}

	[Token(Token = "0x6000379")]
	[Address(RVA = "0xDAA49C", Offset = "0xDAA49C", VA = "0xDAA49C")]
	public void SetValue(bool isTouching, Vector2 value)
	{
	}

	[Token(Token = "0x600037A")]
	[Address(RVA = "0xDAA864", Offset = "0xDAA864", VA = "0xDAA864")]
	public UiAxis2dInspector()
	{
	}
}
[Token(Token = "0x2000093")]
public class UiBoolInspector : MonoBehaviour
{
	[Token(Token = "0x40002EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Header("Components")]
	private TextMeshProUGUI m_nameLabel;

	[Token(Token = "0x40002EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private Toggle m_toggle;

	[Token(Token = "0x600037B")]
	[Address(RVA = "0xDAA878", Offset = "0xDAA878", VA = "0xDAA878")]
	public void SetName(string name)
	{
	}

	[Token(Token = "0x600037C")]
	[Address(RVA = "0xDAA89C", Offset = "0xDAA89C", VA = "0xDAA89C")]
	public void SetValue(bool value)
	{
	}

	[Token(Token = "0x600037D")]
	[Address(RVA = "0xDAA8BC", Offset = "0xDAA8BC", VA = "0xDAA8BC")]
	public UiBoolInspector()
	{
	}
}
[Token(Token = "0x2000094")]
public class UiDeviceInspector : MonoBehaviour
{
	[Token(Token = "0x40002ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Settings")]
	[SerializeField]
	private OVRInput.Handedness m_handedness;

	[Token(Token = "0x40002EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Header("Left Column Components")]
	private TextMeshProUGUI m_title;

	[Token(Token = "0x40002EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private TextMeshProUGUI m_status;

	[Token(Token = "0x40002F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private UiBoolInspector m_thumbRestTouch;

	[Token(Token = "0x40002F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private UiAxis1dInspector m_thumbRestForce;

	[Token(Token = "0x40002F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private UiAxis1dInspector m_indexTrigger;

	[Token(Token = "0x40002F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[SerializeField]
	private UiAxis1dInspector m_gripTrigger;

	[Token(Token = "0x40002F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	[SerializeField]
	private UiAxis1dInspector m_stylusTipForce;

	[Token(Token = "0x40002F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[SerializeField]
	private UiAxis1dInspector m_indexCurl1d;

	[Token(Token = "0x40002F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private UiAxis1dInspector m_indexSlider1d;

	[Token(Token = "0x40002F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Header("Right Column Components")]
	[SerializeField]
	private UiBoolInspector m_ax;

	[Token(Token = "0x40002F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[SerializeField]
	private UiBoolInspector m_axTouch;

	[Token(Token = "0x40002F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	private UiBoolInspector m_by;

	[Token(Token = "0x40002FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	private UiBoolInspector m_byTouch;

	[Token(Token = "0x40002FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[SerializeField]
	private UiBoolInspector m_indexTouch;

	[Token(Token = "0x40002FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private UiAxis2dInspector m_thumbstick;

	[Token(Token = "0x40002FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private OVRInput.Controller m_controller;

	[Token(Token = "0x600037E")]
	[Address(RVA = "0xDAA8C4", Offset = "0xDAA8C4", VA = "0xDAA8C4")]
	private void Start()
	{
	}

	[Token(Token = "0x600037F")]
	[Address(RVA = "0xDAA8EC", Offset = "0xDAA8EC", VA = "0xDAA8EC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000380")]
	[Address(RVA = "0xDAAE74", Offset = "0xDAAE74", VA = "0xDAAE74")]
	private static string ToDeviceModel()
	{
		return null;
	}

	[Token(Token = "0x6000381")]
	[Address(RVA = "0xDAAEB4", Offset = "0xDAAEB4", VA = "0xDAAEB4")]
	private static string ToHandednessString(OVRInput.Handedness handedness)
	{
		return null;
	}

	[Token(Token = "0x6000382")]
	[Address(RVA = "0xDAAF38", Offset = "0xDAAF38", VA = "0xDAAF38")]
	public UiDeviceInspector()
	{
	}
}
[Token(Token = "0x2000095")]
public class UiSceneMenu : MonoBehaviour
{
	[Token(Token = "0x40002FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Settings")]
	[SerializeField]
	private VerticalLayoutGroup m_layoutGroup;

	[Token(Token = "0x40002FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMeshProUGUI m_labelPf;

	[Token(Token = "0x4000300")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Vector2 s_lastThumbstickL;

	[Token(Token = "0x4000301")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Vector2 s_lastThumbstickR;

	[Token(Token = "0x4000302")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Scene m_activeScene;

	[Token(Token = "0x6000383")]
	[Address(RVA = "0xDAAF48", Offset = "0xDAAF48", VA = "0xDAAF48")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000384")]
	[Address(RVA = "0xDAB214", Offset = "0xDAB214", VA = "0xDAB214")]
	private void Update()
	{
	}

	[Token(Token = "0x6000385")]
	[Address(RVA = "0xDAB32C", Offset = "0xDAB32C", VA = "0xDAB32C")]
	private bool InputPrevScene()
	{
		return default(bool);
	}

	[Token(Token = "0x6000386")]
	[Address(RVA = "0xDAB3C8", Offset = "0xDAB3C8", VA = "0xDAB3C8")]
	private bool InputNextScene()
	{
		return default(bool);
	}

	[Token(Token = "0x6000387")]
	[Address(RVA = "0xDAB40C", Offset = "0xDAB40C", VA = "0xDAB40C")]
	private bool KeyboardPrevScene()
	{
		return default(bool);
	}

	[Token(Token = "0x6000388")]
	[Address(RVA = "0xDAB4A8", Offset = "0xDAB4A8", VA = "0xDAB4A8")]
	private bool KeyboardNextScene()
	{
		return default(bool);
	}

	[Token(Token = "0x6000389")]
	[Address(RVA = "0xDAB418", Offset = "0xDAB418", VA = "0xDAB418")]
	private bool ThumbstickPrevScene(OVRInput.Controller controller)
	{
		return default(bool);
	}

	[Token(Token = "0x600038A")]
	[Address(RVA = "0xDAB4B4", Offset = "0xDAB4B4", VA = "0xDAB4B4")]
	private bool ThumbstickNextScene(OVRInput.Controller controller)
	{
		return default(bool);
	}

	[Token(Token = "0x600038B")]
	[Address(RVA = "0xDAB544", Offset = "0xDAB544", VA = "0xDAB544")]
	private Vector2 GetLastThumbstickValue(OVRInput.Controller controller)
	{
		return default(Vector2);
	}

	[Token(Token = "0x600038C")]
	[Address(RVA = "0xDAB370", Offset = "0xDAB370", VA = "0xDAB370")]
	private void ChangeScene(int nextScene)
	{
	}

	[Token(Token = "0x600038D")]
	[Address(RVA = "0xDAAFEC", Offset = "0xDAAFEC", VA = "0xDAAFEC")]
	private void CreateLabel(int sceneIndex, string scenePath)
	{
	}

	[Token(Token = "0x600038E")]
	[Address(RVA = "0xDAB5AC", Offset = "0xDAB5AC", VA = "0xDAB5AC")]
	public UiSceneMenu()
	{
	}
}
[Token(Token = "0x2000096")]
public class UiVectorInspector : MonoBehaviour
{
	[Token(Token = "0x4000303")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	[Header("Components")]
	private TextMeshProUGUI m_nameLabel;

	[Token(Token = "0x4000304")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private TextMeshProUGUI m_valueLabel;

	[Token(Token = "0x600038F")]
	[Address(RVA = "0xDAB5B4", Offset = "0xDAB5B4", VA = "0xDAB5B4")]
	public void SetName(string name)
	{
	}

	[Token(Token = "0x6000390")]
	[Address(RVA = "0xDAB5D8", Offset = "0xDAB5D8", VA = "0xDAB5D8")]
	public void SetValue(bool value)
	{
	}

	[Token(Token = "0x6000391")]
	[Address(RVA = "0xDAB688", Offset = "0xDAB688", VA = "0xDAB688")]
	public UiVectorInspector()
	{
	}
}
[Token(Token = "0x2000097")]
public class RemoteVFXControl : MonoBehaviour
{
	[Token(Token = "0x2000098")]
	[CompilerGenerated]
	private sealed class <StopVFX>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RemoteVFXControl <>4__this;

		[Token(Token = "0x17000050")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000398")]
			[Address(RVA = "0xDAB8B0", Offset = "0xDAB8B0", VA = "0xDAB8B0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000051")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600039A")]
			[Address(RVA = "0xDAB8F8", Offset = "0xDAB8F8", VA = "0xDAB8F8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000395")]
		[Address(RVA = "0xDAB724", Offset = "0xDAB724", VA = "0xDAB724")]
		[DebuggerHidden]
		public <StopVFX>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x6000396")]
		[Address(RVA = "0xDAB75C", Offset = "0xDAB75C", VA = "0xDAB75C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000397")]
		[Address(RVA = "0xDAB760", Offset = "0xDAB760", VA = "0xDAB760", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000399")]
		[Address(RVA = "0xDAB8B8", Offset = "0xDAB8B8", VA = "0xDAB8B8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000305")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private float showTime;

	[Token(Token = "0x6000392")]
	[Address(RVA = "0xDAB690", Offset = "0xDAB690", VA = "0xDAB690")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000393")]
	[Address(RVA = "0xDAB6B0", Offset = "0xDAB6B0", VA = "0xDAB6B0")]
	[IteratorStateMachine(typeof(<StopVFX>d__2))]
	private IEnumerator StopVFX()
	{
		return null;
	}

	[Token(Token = "0x6000394")]
	[Address(RVA = "0xDAB74C", Offset = "0xDAB74C", VA = "0xDAB74C")]
	public RemoteVFXControl()
	{
	}
}
[Token(Token = "0x2000099")]
public class CheckBallOutBounds : MonoBehaviour
{
	[Token(Token = "0x4000309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private Transform initPoint;

	[Token(Token = "0x600039B")]
	[Address(RVA = "0xDAB900", Offset = "0xDAB900", VA = "0xDAB900")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600039C")]
	[Address(RVA = "0xDAB984", Offset = "0xDAB984", VA = "0xDAB984")]
	private void InitBall(Collider collider)
	{
	}

	[Token(Token = "0x600039D")]
	[Address(RVA = "0xDABB7C", Offset = "0xDABB7C", VA = "0xDABB7C")]
	public CheckBallOutBounds()
	{
	}
}
[Token(Token = "0x200009A")]
public class IgnorePlayerCollier : MonoBehaviour
{
	[Token(Token = "0x400030A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private BallManager _ballManager;

	[Token(Token = "0x600039E")]
	[Address(RVA = "0xDABB84", Offset = "0xDABB84", VA = "0xDABB84")]
	private void Start()
	{
	}

	[Token(Token = "0x600039F")]
	[Address(RVA = "0xDABBDC", Offset = "0xDABBDC", VA = "0xDABBDC")]
	private void Update()
	{
	}

	[Token(Token = "0x60003A0")]
	[Address(RVA = "0xDABBE0", Offset = "0xDABBE0", VA = "0xDABBE0")]
	public IgnorePlayerCollier()
	{
	}
}
[Token(Token = "0x200009B")]
public class ThreeScore : MonoBehaviour
{
	[Token(Token = "0x400030B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private string targetTag;

	[Token(Token = "0x400030C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool _inLine;

	[Token(Token = "0x400030D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private InGameSet _inGameSet;

	[Token(Token = "0x60003A1")]
	[Address(RVA = "0xDABBE8", Offset = "0xDABBE8", VA = "0xDABBE8")]
	private void Start()
	{
	}

	[Token(Token = "0x60003A2")]
	[Address(RVA = "0xDABCC4", Offset = "0xDABCC4", VA = "0xDABCC4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60003A3")]
	[Address(RVA = "0xDABDA0", Offset = "0xDABDA0", VA = "0xDABDA0")]
	private void SetIsInline()
	{
	}

	[Token(Token = "0x60003A4")]
	[Address(RVA = "0xDABDC0", Offset = "0xDABDC0", VA = "0xDABDC0")]
	public bool IsInLine()
	{
		return default(bool);
	}

	[Token(Token = "0x60003A5")]
	[Address(RVA = "0xDABDC8", Offset = "0xDABDC8", VA = "0xDABDC8")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x60003A6")]
	[Address(RVA = "0xDABECC", Offset = "0xDABECC", VA = "0xDABECC")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x60003A7")]
	[Address(RVA = "0xDABFCC", Offset = "0xDABFCC", VA = "0xDABFCC")]
	public ThreeScore()
	{
	}
}
[Token(Token = "0x200009C")]
public static class FindChild
{
	[Token(Token = "0x60003A8")]
	[Address(RVA = "0xDABFD4", Offset = "0xDABFD4", VA = "0xDABFD4")]
	public static GameObject FindChildObjByName(GameObject topParentObj, string gameObjectName)
	{
		return null;
	}
}
[Token(Token = "0x200009D")]
public class InGameMgr : MonoBehaviour
{
	[Token(Token = "0x400030E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static InGameMgr _instance;

	[Token(Token = "0x400030F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform _ballNet;

	[Token(Token = "0x17000052")]
	public static InGameMgr instance
	{
		[Token(Token = "0x60003A9")]
		[Address(RVA = "0xDAC110", Offset = "0xDAC110", VA = "0xDAC110")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000053")]
	public Transform BallNet
	{
		[Token(Token = "0x60003AA")]
		[Address(RVA = "0xDAC244", Offset = "0xDAC244", VA = "0xDAC244")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60003AB")]
	[Address(RVA = "0xDAC2F4", Offset = "0xDAC2F4", VA = "0xDAC2F4")]
	public InGameMgr()
	{
	}
}
[Token(Token = "0x200009E")]
public class PlayerItem : MonoBehaviour
{
	[Token(Token = "0x4000310")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int playerID;

	[Token(Token = "0x4000311")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool isReady;

	[Token(Token = "0x4000312")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private UnityEngine.UI.Button _readyBtn;

	[Token(Token = "0x60003AC")]
	[Address(RVA = "0xDAC2FC", Offset = "0xDAC2FC", VA = "0xDAC2FC")]
	private void Start()
	{
	}

	[Token(Token = "0x60003AD")]
	[Address(RVA = "0xDAC4F8", Offset = "0xDAC4F8", VA = "0xDAC4F8")]
	private void OnReadyBtn()
	{
	}

	[Token(Token = "0x60003AE")]
	[Address(RVA = "0xDAC440", Offset = "0xDAC440", VA = "0xDAC440")]
	public void ChangeReady(bool _isready)
	{
	}

	[Token(Token = "0x60003AF")]
	[Address(RVA = "0xDAC624", Offset = "0xDAC624", VA = "0xDAC624")]
	public PlayerItem()
	{
	}
}
[Token(Token = "0x200009F")]
public class ControllerByMine : MonoBehaviourPunCallbacks, IPunObservable, IPunOwnershipCallbacks
{
	[Token(Token = "0x4000313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private InGameSet inGameSet;

	[Token(Token = "0x4000314")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private PhotonView pv;

	[Token(Token = "0x4000315")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AudioListener _audioListener;

	[Token(Token = "0x4000316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("篮球：")]
	private Transform ballTr;

	[Token(Token = "0x4000317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 _currentBallPos;

	[Token(Token = "0x4000318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private Quaternion _currentBallRot;

	[Token(Token = "0x4000319")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[SerializeField]
	private InputActionReference pauseMenu;

	[Token(Token = "0x400031A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Tooltip("本地玩家PlayerController：")]
	[SerializeField]
	[Header("本地玩家位置信息")]
	private PlayerController PlayerController;

	[Token(Token = "0x400031B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Tooltip("本地玩家头部：")]
	[SerializeField]
	private Transform PlayerHeadTransform;

	[Token(Token = "0x400031C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[SerializeField]
	[Tooltip("本地玩家左手：")]
	private Transform PlayerLeftHandTransform;

	[Token(Token = "0x400031D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[SerializeField]
	[Tooltip("本地玩家右手：")]
	private Transform PlayerRightHandTransform;

	[Token(Token = "0x400031E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	[Header("远程人体VRIK：")]
	[SerializeField]
	private VRIK RemotePlayerVRIK;

	[Token(Token = "0x400031F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private VRIK.References RemotePlayerVRIKOriginReferences;

	[Token(Token = "0x4000320")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[SerializeField]
	[Header("远程人体动画：")]
	private Animator RemotePlayerBodyAnimator;

	[Token(Token = "0x4000321")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	[SerializeField]
	[Header("远程人体：")]
	private Transform RemotePlayerBodyTransform;

	[Token(Token = "0x4000322")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	[Header("远程头部：")]
	[SerializeField]
	private Transform RemoteHeadTransform;

	[Token(Token = "0x4000323")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	[SerializeField]
	[Header("远程双手：")]
	private Transform RemoteLeftHandTransform;

	[Token(Token = "0x4000324")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	[SerializeField]
	private Transform RemoteRightHandTransform;

	[Token(Token = "0x4000325")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	[Header("远程IK校准: ")]
	[SerializeField]
	public VRIKCalibrationBasic RemotePlayerCalibrationBasic;

	[Token(Token = "0x4000326")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Vector3 _syncHeadStartPosition;

	[Token(Token = "0x4000327")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private Vector3 _syncHeadEndPosition;

	[Token(Token = "0x4000328")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Quaternion _syncHeadStartRotation;

	[Token(Token = "0x4000329")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private Quaternion _syncHeadEndRotation;

	[Token(Token = "0x400032A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	private Vector3 _syncLHandStartPosition;

	[Token(Token = "0x400032B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
	private Vector3 _syncLHandEndPosition;

	[Token(Token = "0x400032C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private Quaternion _syncLHandStartRotation;

	[Token(Token = "0x400032D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	private Quaternion _syncLHandEndRotation;

	[Token(Token = "0x400032E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	private Vector3 _syncRHandStartPosition;

	[Token(Token = "0x400032F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
	private Vector3 _syncRHandEndPosition;

	[Token(Token = "0x4000330")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	private Quaternion _syncRHandStartRotation;

	[Token(Token = "0x4000331")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	private Quaternion _syncRHandEndRotation;

	[Token(Token = "0x4000332")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	private bool _syncPlayerControllerStartIsGrounded;

	[Token(Token = "0x4000333")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x171")]
	private bool _syncPlayerControllerEndIsGrounded;

	[Token(Token = "0x4000334")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x172")]
	private bool RemotePlayerIsGrounded;

	[Token(Token = "0x4000335")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x173")]
	private bool _hadSyncGrounded;

	[Token(Token = "0x4000336")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
	private float _syncPlayerControllerCameraStartHeight;

	[Token(Token = "0x4000337")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	private float _syncPlayerControllerCameraEndHeight;

	[Token(Token = "0x4000338")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
	private float RemotePlayerCameraHeight;

	[Token(Token = "0x4000339")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	private float adjustRemotePlayerCameraHeight;

	[Token(Token = "0x400033A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
	private float pendingAdjustRemotePlayerCameraHeight;

	[Token(Token = "0x400033B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	private bool hasPendingAdjustRemotePlayerCameraHeight;

	[Token(Token = "0x400033C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x189")]
	private bool hasAdjustedRemotePlayerCameraHeight;

	[Token(Token = "0x400033D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18A")]
	private bool hasCalibrateHeight;

	[Token(Token = "0x400033E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
	private float RemoteInitialPositionY;

	[Token(Token = "0x400033F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
	private bool _syncPlayerStartCalibrateHeightFinish;

	[Token(Token = "0x4000340")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x191")]
	private bool _syncPlayerEndCalibrateHeightFinish;

	[Token(Token = "0x4000341")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x192")]
	private bool RemotePlayerCalibrateHeightFinish;

	[Token(Token = "0x4000342")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x193")]
	private bool disabledObjects;

	[Token(Token = "0x4000343")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
	private float _lastSynchronizationTime;

	[Token(Token = "0x4000344")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
	private float _syncDelay;

	[Token(Token = "0x4000345")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19C")]
	private float _syncTime;

	[Token(Token = "0x4000346")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
	[Tooltip("Local Player's Left Grabber. Used to determine which objects are nearby")]
	public Grabber LeftGrabber;

	[Token(Token = "0x4000347")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
	private GrabbablesInTrigger gitLeft;

	[Token(Token = "0x4000348")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
	[Tooltip("Local Player's Right Grabber. Used to determine which objects are nearby")]
	public Grabber RightGrabber;

	[Token(Token = "0x4000349")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
	private GrabbablesInTrigger gitRight;

	[Token(Token = "0x400034A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
	protected double lastRequestTime;

	[Token(Token = "0x400034B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
	protected float requestInterval;

	[Token(Token = "0x400034C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
	private Dictionary<int, double> requestedGrabbables;

	[Token(Token = "0x400034D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
	private Dictionary<int, double> transformedGrabbables;

	[Token(Token = "0x400034E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
	private Dictionary<int, double> requestTransformedGrabbables;

	[Token(Token = "0x400034F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
	private bool _hasJumpedAnimation;

	[Token(Token = "0x4000350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
	private Canvas _pauseCanvas;

	[Token(Token = "0x4000351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
	private Transform _pausePanel;

	[Token(Token = "0x4000352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
	[SerializeField]
	private Transform pausePos;

	[Token(Token = "0x4000353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
	[SerializeField]
	private Transform pauseParent;

	[Token(Token = "0x4000354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
	public bool gettingBallFromOtherUserHand;

	[Token(Token = "0x4000355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
	public Rook.HandType gettingBallFromOtherUserHandType;

	[Token(Token = "0x60003B0")]
	[Address(RVA = "0xDAC62C", Offset = "0xDAC62C", VA = "0xDAC62C")]
	private void Start()
	{
	}

	[Token(Token = "0x60003B1")]
	[Address(RVA = "0xDAC8D8", Offset = "0xDAC8D8", VA = "0xDAC8D8")]
	private void Update()
	{
	}

	[Token(Token = "0x60003B2")]
	[Address(RVA = "0xDAD384", Offset = "0xDAD384", VA = "0xDAD384")]
	private bool NeedAdjustRemoteHeight()
	{
		return default(bool);
	}

	[Token(Token = "0x60003B3")]
	[Address(RVA = "0xDAD40C", Offset = "0xDAD40C", VA = "0xDAD40C")]
	private void adjustRemotePlayerHeight()
	{
	}

	[Token(Token = "0x60003B4")]
	[Address(RVA = "0xDAD57C", Offset = "0xDAD57C", VA = "0xDAD57C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60003B5")]
	[Address(RVA = "0xDAD638", Offset = "0xDAD638", VA = "0xDAD638", Slot = "54")]
	public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
	{
	}

	[Token(Token = "0x60003B6")]
	[Address(RVA = "0xDADC10", Offset = "0xDADC10", VA = "0xDADC10")]
	private void OpenClosePause(InputAction.CallbackContext obj)
	{
	}

	[Token(Token = "0x60003B7")]
	[Address(RVA = "0xDAD3C0", Offset = "0xDAD3C0", VA = "0xDAD3C0")]
	private void toggleObjects(bool enableObjects)
	{
	}

	[Token(Token = "0x60003B8")]
	[Address(RVA = "0xDADE1C", Offset = "0xDADE1C", VA = "0xDADE1C")]
	public void AssignPlayerObjects()
	{
	}

	[Token(Token = "0x60003B9")]
	[Address(RVA = "0xDADF58", Offset = "0xDADF58", VA = "0xDADF58")]
	private Transform getChildTransformByName(Transform search, string name)
	{
		return null;
	}

	[Token(Token = "0x60003BA")]
	[Address(RVA = "0xDAD228", Offset = "0xDAD228", VA = "0xDAD228")]
	private void updateAllRemotePositionRotation()
	{
	}

	[Token(Token = "0x60003BB")]
	[Address(RVA = "0xDAE01C", Offset = "0xDAE01C", VA = "0xDAE01C")]
	private void updateRemotePositionRotation(Transform moveTransform, Vector3 startPosition, Vector3 endPosition, Quaternion syncStartRotation, Quaternion syncEndRotation, float syncValue)
	{
	}

	[Token(Token = "0x60003BC")]
	[Address(RVA = "0xDAC724", Offset = "0xDAC724", VA = "0xDAC724")]
	private void InitGrabber()
	{
	}

	[Token(Token = "0x60003BD")]
	[Address(RVA = "0xDACF10", Offset = "0xDACF10", VA = "0xDACF10")]
	private void checkGrabbablesTransfer()
	{
	}

	[Token(Token = "0x60003BE")]
	[Address(RVA = "0xDAE1CC", Offset = "0xDAE1CC", VA = "0xDAE1CC")]
	private void requestOwnerShipForNearbyGrabbables(GrabbablesInTrigger grabbables, Rook.HandType handType)
	{
	}

	[Token(Token = "0x60003BF")]
	[Address(RVA = "0xDAE740", Offset = "0xDAE740", VA = "0xDAE740", Slot = "58")]
	public virtual bool RecentlyRequested(PhotonView view)
	{
		return default(bool);
	}

	[Token(Token = "0x60003C0")]
	[Address(RVA = "0xDAE81C", Offset = "0xDAE81C", VA = "0xDAE81C", Slot = "59")]
	public virtual bool RecentlyTransformed(PhotonView view)
	{
		return default(bool);
	}

	[Token(Token = "0x60003C1")]
	[Address(RVA = "0xDAE8F8", Offset = "0xDAE8F8", VA = "0xDAE8F8", Slot = "60")]
	public virtual void RequestNearbyGrabbableOwnership(PhotonView view, bool fromOtherUserHand, Rook.HandType handType)
	{
	}

	[Token(Token = "0x60003C2")]
	[Address(RVA = "0xDAEAA0", Offset = "0xDAEAA0", VA = "0xDAEAA0", Slot = "61")]
	public virtual void RequestRemoteGrabbableOwnership(PhotonView view)
	{
	}

	[Token(Token = "0x60003C3")]
	[Address(RVA = "0xDAEBF4", Offset = "0xDAEBF4", VA = "0xDAEBF4")]
	public void RecordTransformOnHandBallOwnership(PhotonView view)
	{
	}

	[Token(Token = "0x60003C4")]
	[Address(RVA = "0xDAECF8", Offset = "0xDAECF8", VA = "0xDAECF8", Slot = "55")]
	public void OnOwnershipRequest(PhotonView targetView, Player requestingPlayer)
	{
	}

	[Token(Token = "0x60003C5")]
	[Address(RVA = "0xDAEF98", Offset = "0xDAEF98", VA = "0xDAEF98", Slot = "56")]
	public void OnOwnershipTransfered(PhotonView targetView, Player requestingPlayer)
	{
	}

	[Token(Token = "0x60003C6")]
	[Address(RVA = "0xDAF304", Offset = "0xDAF304", VA = "0xDAF304", Slot = "57")]
	public void OnOwnershipTransferFailed(PhotonView targetView, Player requestingPlayer)
	{
	}

	[Token(Token = "0x60003C7")]
	[Address(RVA = "0xDAF558", Offset = "0xDAF558", VA = "0xDAF558")]
	public ControllerByMine()
	{
	}
}
[Token(Token = "0x20000A0")]
[CreateAssetMenu(fileName = "New GameSet", menuName = "ScriptableObject/Game/DontShowInGameSet")]
public class InGameSet : ScriptableObject
{
	[Token(Token = "0x4000356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("需要加载的场景序列：")]
	public int SceneIndexNumber;

	[Token(Token = "0x4000357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Header("远程手在蓝框上")]
	public bool RemoteHandInRing;

	[Token(Token = "0x4000358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	[Header("手在蓝框上")]
	public bool HandInRing;

	[Token(Token = "0x4000359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Header("手势：")]
	public List<HandPose> handPosesList;

	[Token(Token = "0x400035A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Header("Tag:")]
	public string BasketBallTag;

	[Token(Token = "0x400035B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Header("声音：")]
	public List<AudioClip> audioClips;

	[Token(Token = "0x400035C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Action<Transform> AimAction;

	[Token(Token = "0x400035D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Action<Transform> ChangeCurrenBallAction;

	[Token(Token = "0x400035E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private string _memoryUUID;

	[Token(Token = "0x400035F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public bool inRightHand;

	[Token(Token = "0x4000360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	public bool inLeftHand;

	[Token(Token = "0x4000361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Action<Rook.HandType> ArrivalHandAction;

	[Token(Token = "0x4000362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Action InitAimAction;

	[Token(Token = "0x4000363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Action InitHandAction;

	[Token(Token = "0x4000364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Action<Transform, Rook.HandType> DownAction;

	[Token(Token = "0x4000365")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Action<Transform, Rook.HandType> ChangeHandAction;

	[Token(Token = "0x4000366")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public bool notBroadcast;

	[Token(Token = "0x4000367")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Action<Transform> ReadyPitchBallAction;

	[Token(Token = "0x4000368")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Action<bool> ReadyPitchHandAction;

	[Token(Token = "0x4000369")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Action<Vector3> PitchAction;

	[Token(Token = "0x400036A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Action PlayShootSoundAction;

	[Token(Token = "0x400036B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Action<BasketBall> SlamDunkBallRecordScoreAction;

	[Token(Token = "0x400036C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public Action<BasketBall> ShotBallRecordScoreAction;

	[Token(Token = "0x400036D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public Action<Transform, Transform> SlamDunkHandPoserAction;

	[Token(Token = "0x400036E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Action<Vector3> SlamDunkBallAction;

	[Token(Token = "0x400036F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Action<Transform, Rook.HandType> CharacterAction;

	[Token(Token = "0x4000370")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Action OutSlamDunkBallAction;

	[Token(Token = "0x4000371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public Action OutSlamDunkBallAnimationAction;

	[Token(Token = "0x4000372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public float dirY;

	[Token(Token = "0x4000373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public Action InSlamDunkAnimationAction;

	[Token(Token = "0x4000374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public Action<BasketBall> FarBallInAction;

	[Token(Token = "0x4000375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public bool firstTrigger;

	[Token(Token = "0x4000376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF9")]
	public bool secondTrigger;

	[Token(Token = "0x4000377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public Action Line01NextCarAction;

	[Token(Token = "0x4000378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public Action Line02NextCarAction;

	[Token(Token = "0x4000379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public Action NextPeopleAction;

	[Token(Token = "0x400037A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	[Header("Pico Neo3设备")]
	public GameObject neo3LeftControllerObj;

	[Token(Token = "0x400037B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public GameObject neo3RightControllerObj;

	[Token(Token = "0x400037C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	[Header("Pico 4设备")]
	public GameObject pico4LeftControllerObj;

	[Token(Token = "0x400037D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public GameObject pico4RightControllerObj;

	[Token(Token = "0x400037E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public Action SetControllerAction;

	[Token(Token = "0x400037F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public Action<int> ChangeMatAction;

	[Token(Token = "0x4000380")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public Action DefaultMatAction;

	[Token(Token = "0x4000381")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	[Header("当前球在哪一个玩家手中：")]
	public int basketballOwnerPlayerID;

	[Token(Token = "0x4000382")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public Action EnableGravityAction;

	[Token(Token = "0x4000383")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public Action InitParametersAction;

	[Token(Token = "0x4000384")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public Dictionary<int, int> PlayerScoreDic;

	[Token(Token = "0x4000385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
	public Action<int, int> UpdateScoreAction;

	[Token(Token = "0x4000386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
	public bool ballIsInline;

	[Token(Token = "0x4000387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
	public Action SetBallIsInline;

	[Token(Token = "0x4000388")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
	public bool belongAI;

	[Token(Token = "0x4000389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x189")]
	private bool _belongPlayer;

	[Token(Token = "0x17000054")]
	public bool belongPlayer
	{
		[Token(Token = "0x60003EC")]
		[Address(RVA = "0xDAFF0C", Offset = "0xDAFF0C", VA = "0xDAFF0C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x60003ED")]
		[Address(RVA = "0xDAFF14", Offset = "0xDAFF14", VA = "0xDAFF14")]
		set
		{
		}
	}

	[Token(Token = "0x60003C8")]
	[Address(RVA = "0xDAF744", Offset = "0xDAF744", VA = "0xDAF744")]
	public string GetMemoryUUID()
	{
		return null;
	}

	[Token(Token = "0x60003C9")]
	[Address(RVA = "0xDAF74C", Offset = "0xDAF74C", VA = "0xDAF74C")]
	public void SetAimParent(Transform parentTransform)
	{
	}

	[Token(Token = "0x60003CA")]
	[Address(RVA = "0xDAF7C4", Offset = "0xDAF7C4", VA = "0xDAF7C4")]
	public void ArrivalHand(Rook.HandType whichHand)
	{
	}

	[Token(Token = "0x60003CB")]
	[Address(RVA = "0xDAF824", Offset = "0xDAF824", VA = "0xDAF824")]
	public void Down2Floor(Transform targetPos, Rook.HandType whichHand)
	{
	}

	[Token(Token = "0x60003CC")]
	[Address(RVA = "0xDAF840", Offset = "0xDAF840", VA = "0xDAF840")]
	public void ChangeHand(Transform _targetHand, Rook.HandType whichHand)
	{
	}

	[Token(Token = "0x60003CD")]
	[Address(RVA = "0xDAF85C", Offset = "0xDAF85C", VA = "0xDAF85C")]
	public void ReadyHand(bool whichHand)
	{
	}

	[Token(Token = "0x60003CE")]
	[Address(RVA = "0xDAF87C", Offset = "0xDAF87C", VA = "0xDAF87C")]
	public void ReadyBall(Transform ballPos)
	{
	}

	[Token(Token = "0x60003CF")]
	[Address(RVA = "0xDAF8A0", Offset = "0xDAF8A0", VA = "0xDAF8A0")]
	public void PitchBall(Vector3 speed)
	{
	}

	[Token(Token = "0x60003D0")]
	[Address(RVA = "0xDAF8BC", Offset = "0xDAF8BC", VA = "0xDAF8BC")]
	public void PlayShootSound()
	{
	}

	[Token(Token = "0x60003D1")]
	[Address(RVA = "0xDAF8D8", Offset = "0xDAF8D8", VA = "0xDAF8D8")]
	public void OutHand()
	{
	}

	[Token(Token = "0x60003D2")]
	[Address(RVA = "0xDAF8FC", Offset = "0xDAF8FC", VA = "0xDAF8FC")]
	public void DestroyBall()
	{
	}

	[Token(Token = "0x60003D3")]
	[Address(RVA = "0xDAF948", Offset = "0xDAF948", VA = "0xDAF948")]
	public void InitCharacter()
	{
	}

	[Token(Token = "0x60003D4")]
	[Address(RVA = "0xDAFA24", Offset = "0xDAFA24", VA = "0xDAFA24")]
	private void LocalOutSlamDunkBall()
	{
	}

	[Token(Token = "0x60003D5")]
	[Address(RVA = "0xDAFA68", Offset = "0xDAFA68", VA = "0xDAFA68")]
	public void RemoteOutSlamDunkBall()
	{
	}

	[Token(Token = "0x60003D6")]
	[Address(RVA = "0xDAFA84", Offset = "0xDAFA84", VA = "0xDAFA84")]
	public void HandOnRing(Transform leftPoint, Transform rightPoint, Vector3 ballPos, Transform characterPos, Rook.HandType dunkHoldRingHandType)
	{
	}

	[Token(Token = "0x60003D7")]
	[Address(RVA = "0xDAFB18", Offset = "0xDAFB18", VA = "0xDAFB18")]
	public void FarBallIn(BasketBall basketBall)
	{
	}

	[Token(Token = "0x60003D8")]
	[Address(RVA = "0xDAFB34", Offset = "0xDAFB34", VA = "0xDAFB34")]
	public void InSlamDunkBallAnimation()
	{
	}

	[Token(Token = "0x60003D9")]
	[Address(RVA = "0xDAFB50", Offset = "0xDAFB50", VA = "0xDAFB50")]
	public void ShotBallRecordScore(BasketBall basketBall)
	{
	}

	[Token(Token = "0x60003DA")]
	[Address(RVA = "0xDAFB6C", Offset = "0xDAFB6C", VA = "0xDAFB6C")]
	public void SlamDumBallRecordScore(BasketBall basketBall)
	{
	}

	[Token(Token = "0x60003DB")]
	[Address(RVA = "0xDAFB88", Offset = "0xDAFB88", VA = "0xDAFB88")]
	public void Line01CallNextCar()
	{
	}

	[Token(Token = "0x60003DC")]
	[Address(RVA = "0xDAFBA4", Offset = "0xDAFBA4", VA = "0xDAFBA4")]
	public void Line02CallNextCar()
	{
	}

	[Token(Token = "0x60003DD")]
	[Address(RVA = "0xDAFBC0", Offset = "0xDAFBC0", VA = "0xDAFBC0")]
	public void CallNextPeople()
	{
	}

	[Token(Token = "0x60003DE")]
	[Address(RVA = "0xDAFBDC", Offset = "0xDAFBDC", VA = "0xDAFBDC")]
	public void DefaultMat()
	{
	}

	[Token(Token = "0x60003DF")]
	[Address(RVA = "0xDAFBF8", Offset = "0xDAFBF8", VA = "0xDAFBF8")]
	public void SetController()
	{
	}

	[Token(Token = "0x60003E0")]
	[Address(RVA = "0xDAFC14", Offset = "0xDAFC14", VA = "0xDAFC14")]
	public void ChangeMat(int highlightPart)
	{
	}

	[Token(Token = "0x60003E1")]
	[Address(RVA = "0xDAFC30", Offset = "0xDAFC30", VA = "0xDAFC30")]
	public void EnableGravity()
	{
	}

	[Token(Token = "0x60003E2")]
	[Address(RVA = "0xDAFC4C", Offset = "0xDAFC4C", VA = "0xDAFC4C")]
	public void InitParameters()
	{
	}

	[Token(Token = "0x60003E3")]
	[Address(RVA = "0xDAFC68", Offset = "0xDAFC68", VA = "0xDAFC68")]
	public void UpdateScore(int playerID, int addScore)
	{
	}

	[Token(Token = "0x60003E4")]
	[Address(RVA = "0xDAFCB4", Offset = "0xDAFCB4", VA = "0xDAFCB4")]
	public void UpdateScoreNoSideEffect(int playerID, int addScore)
	{
	}

	[Token(Token = "0x60003E5")]
	[Address(RVA = "0xDAFDAC", Offset = "0xDAFDAC", VA = "0xDAFDAC")]
	public void ResetScoreNoSideEffect(int playerID, int score)
	{
	}

	[Token(Token = "0x60003E6")]
	[Address(RVA = "0xDAFD2C", Offset = "0xDAFD2C", VA = "0xDAFD2C")]
	public int GetScore(int playerID)
	{
		return default(int);
	}

	[Token(Token = "0x60003E7")]
	[Address(RVA = "0xDAFE14", Offset = "0xDAFE14", VA = "0xDAFE14")]
	public void UpdateLocalUserScore(int score)
	{
	}

	[Token(Token = "0x60003E8")]
	[Address(RVA = "0xDAFEA8", Offset = "0xDAFEA8", VA = "0xDAFEA8")]
	public void ResetLocalUserScoreNoSideEffect(int score)
	{
	}

	[Token(Token = "0x60003E9")]
	[Address(RVA = "0xDAFED4", Offset = "0xDAFED4", VA = "0xDAFED4")]
	public int GetLocalPlayerScore()
	{
		return default(int);
	}

	[Token(Token = "0x60003EA")]
	[Address(RVA = "0xDAFE40", Offset = "0xDAFE40", VA = "0xDAFE40")]
	public static int GetLocalPlayerId()
	{
		return default(int);
	}

	[Token(Token = "0x60003EB")]
	[Address(RVA = "0xDAFEF0", Offset = "0xDAFEF0", VA = "0xDAFEF0")]
	public void CheckPlayerIsInline()
	{
	}

	[Token(Token = "0x60003EE")]
	[Address(RVA = "0xDAFF20", Offset = "0xDAFF20", VA = "0xDAFF20")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60003EF")]
	[Address(RVA = "0xDAFF2C", Offset = "0xDAFF2C", VA = "0xDAFF2C")]
	public void BackToMainScene()
	{
	}

	[Token(Token = "0x60003F0")]
	[Address(RVA = "0xDAFFF8", Offset = "0xDAFFF8", VA = "0xDAFFF8")]
	public InGameSet()
	{
	}
}
[Token(Token = "0x20000A1")]
public class UserDefinedRoom
{
	[Token(Token = "0x400038A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool isUserDefinedRoom;

	[Token(Token = "0x400038B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string roomName;

	[Token(Token = "0x60003F1")]
	[Address(RVA = "0xDB00E8", Offset = "0xDB00E8", VA = "0xDB00E8")]
	public void RestSettings()
	{
	}

	[Token(Token = "0x60003F2")]
	[Address(RVA = "0xDB013C", Offset = "0xDB013C", VA = "0xDB013C")]
	public UserDefinedRoom()
	{
	}
}
[Token(Token = "0x20000A2")]
public class GetCollisionPoint : MonoBehaviour
{
	[Token(Token = "0x400038C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private GameObject boomVFX;

	[Token(Token = "0x400038D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private ParticleSystem[] boomEffects;

	[Token(Token = "0x60003F3")]
	[Address(RVA = "0xDB0144", Offset = "0xDB0144", VA = "0xDB0144")]
	private void OnCollisionEnter(Collision other)
	{
	}

	[Token(Token = "0x60003F4")]
	[Address(RVA = "0xDB02D8", Offset = "0xDB02D8", VA = "0xDB02D8")]
	public GetCollisionPoint()
	{
	}
}
[Token(Token = "0x20000A3")]
public class TestJump : MonoBehaviour
{
	[Token(Token = "0x60003F5")]
	[Address(RVA = "0xDB02E0", Offset = "0xDB02E0", VA = "0xDB02E0")]
	public TestJump()
	{
	}
}
[Token(Token = "0x20000A4")]
public class TestVRIFInPico : MonoBehaviour
{
	[Token(Token = "0x400038E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public TextMeshProUGUI _Text;

	[Token(Token = "0x60003F6")]
	[Address(RVA = "0xDB02E8", Offset = "0xDB02E8", VA = "0xDB02E8")]
	private void Start()
	{
	}

	[Token(Token = "0x60003F7")]
	[Address(RVA = "0xDB02EC", Offset = "0xDB02EC", VA = "0xDB02EC")]
	private void Update()
	{
	}

	[Token(Token = "0x60003F8")]
	[Address(RVA = "0xDB05E8", Offset = "0xDB05E8", VA = "0xDB05E8")]
	public TestVRIFInPico()
	{
	}
}
namespace RookStein
{
	[Token(Token = "0x20000A5")]
	public class ControlMove : MonoBehaviour
	{
		[Token(Token = "0x400038F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private SmoothMove smoothMove;

		[Token(Token = "0x4000390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private BallControl ballControl;

		[Token(Token = "0x60003F9")]
		[Address(RVA = "0xDB05F0", Offset = "0xDB05F0", VA = "0xDB05F0")]
		private void Start()
		{
		}

		[Token(Token = "0x60003FA")]
		[Address(RVA = "0xDB06A4", Offset = "0xDB06A4", VA = "0xDB06A4")]
		private void Update()
		{
		}

		[Token(Token = "0x60003FB")]
		[Address(RVA = "0xDB06E8", Offset = "0xDB06E8", VA = "0xDB06E8")]
		public ControlMove()
		{
		}
	}
}
namespace GymPlay.Parabola
{
	[Token(Token = "0x20000A6")]
	[RequireComponent(typeof(LineRenderer))]
	public class ProjectileLine : MonoBehaviour
	{
		[Token(Token = "0x4000391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int iterations;

		[Token(Token = "0x4000392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float checkRadius;

		[Token(Token = "0x4000393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LayerMask checkLayer;

		[Token(Token = "0x4000394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int binaryCount;

		[Token(Token = "0x4000395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LineRenderer lineRenderer;

		[Token(Token = "0x4000396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private MeshCollider meshCollider;

		[Token(Token = "0x4000397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Transform testPoint;

		[Token(Token = "0x4000398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 velocity;

		[Token(Token = "0x60003FC")]
		[Address(RVA = "0xDB06F0", Offset = "0xDB06F0", VA = "0xDB06F0")]
		private void Awake()
		{
		}

		[Token(Token = "0x60003FD")]
		[Address(RVA = "0xDB0780", Offset = "0xDB0780", VA = "0xDB0780")]
		private void Start()
		{
		}

		[Token(Token = "0x60003FE")]
		[Address(RVA = "0xDB0784", Offset = "0xDB0784", VA = "0xDB0784")]
		private void Update()
		{
		}

		[Token(Token = "0x60003FF")]
		[Address(RVA = "0xDB0AEC", Offset = "0xDB0AEC", VA = "0xDB0AEC")]
		public void DrawLine(float angle, float speed, float distance, Vector3 direction, Transform local)
		{
		}

		[Token(Token = "0x6000400")]
		[Address(RVA = "0xDB09E0", Offset = "0xDB09E0", VA = "0xDB09E0")]
		public void DrawLine02(float angle, Vector3 direction, Transform local)
		{
		}

		[Token(Token = "0x6000401")]
		[Address(RVA = "0xDB1020", Offset = "0xDB1020", VA = "0xDB1020")]
		public bool ShowLine(float speed, float distance, float gravity, float angle, Vector3 direction, Transform local, bool inRange)
		{
			return default(bool);
		}

		[Token(Token = "0x6000402")]
		[Address(RVA = "0xDB12C4", Offset = "0xDB12C4", VA = "0xDB12C4")]
		public BestResult GetBestResult(float distance, float yOffset, float gravity, Vector3 direction, Transform local, float minAngle, float maxAngle)
		{
			return null;
		}

		[Token(Token = "0x6000403")]
		[Address(RVA = "0xDB1580", Offset = "0xDB1580", VA = "0xDB1580")]
		public ProjectileLine()
		{
		}
	}
	[Token(Token = "0x20000A7")]
	public class BestResult
	{
		[Token(Token = "0x4000399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float BestAngle;

		[Token(Token = "0x400039A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float BestSpeed;

		[Token(Token = "0x6000404")]
		[Address(RVA = "0xDB1554", Offset = "0xDB1554", VA = "0xDB1554")]
		public BestResult(float bestAngle, float bestSpeed)
		{
		}
	}
	[Token(Token = "0x20000A8")]
	public class ProjectileMath
	{
		[Token(Token = "0x6000405")]
		[Address(RVA = "0xDB1594", Offset = "0xDB1594", VA = "0xDB1594")]
		public static bool LaunchAngle(float speed, float distance, float yOffset, float gravity, out float angle0, out float angle1)
		{
			return default(bool);
		}

		[Token(Token = "0x6000406")]
		[Address(RVA = "0xDB14F0", Offset = "0xDB14F0", VA = "0xDB14F0")]
		public static float LaunchSpeed(float distance, float yOffset, float gravity, float angle)
		{
			return default(float);
		}

		[Token(Token = "0x6000407")]
		[Address(RVA = "0xDB1714", Offset = "0xDB1714", VA = "0xDB1714")]
		public static float TimeOfFlight(float speed, float angle, float yOffset, float gravity)
		{
			return default(float);
		}

		[Token(Token = "0x6000408")]
		[Address(RVA = "0xDB0C0C", Offset = "0xDB0C0C", VA = "0xDB0C0C")]
		public static OldPath ProjectilePath(int iterations, float speed, float distance, float gravity, float angle, Vector3 direction, Transform local)
		{
			return null;
		}

		[Token(Token = "0x6000409")]
		[Address(RVA = "0xDB17A8", Offset = "0xDB17A8", VA = "0xDB17A8")]
		public static bool IsHitAtPath(OldPath oldPath, float distance, float iterations, float radius, LayerMask layerMask)
		{
			return default(bool);
		}

		[Token(Token = "0x600040A")]
		[Address(RVA = "0xDB18D4", Offset = "0xDB18D4", VA = "0xDB18D4")]
		public static bool IsHitAtPathUseTransform(OldPath oldPath, float iterations, float radius, Transform expandArea)
		{
			return default(bool);
		}

		[Token(Token = "0x600040B")]
		[Address(RVA = "0xDB1974", Offset = "0xDB1974", VA = "0xDB1974")]
		public static bool IsInside(Vector3 point, Transform expandArea, float radius)
		{
			return default(bool);
		}

		[Token(Token = "0x600040C")]
		[Address(RVA = "0xDB1188", Offset = "0xDB1188", VA = "0xDB1188")]
		public static bool IsObstacleAtPath(OldPath oldPath, float distance, float iterations, float radius, LayerMask layerMask)
		{
			return default(bool);
		}

		[Token(Token = "0x600040D")]
		[Address(RVA = "0xDB1A6C", Offset = "0xDB1A6C", VA = "0xDB1A6C")]
		public ProjectileMath()
		{
		}
	}
	[Token(Token = "0x20000A9")]
	public class OldPath
	{
		[Token(Token = "0x400039B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3[] points;

		[Token(Token = "0x400039C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3[] slopes;

		[Token(Token = "0x600040E")]
		[Address(RVA = "0xDB1764", Offset = "0xDB1764", VA = "0xDB1764")]
		public OldPath(Vector3[] points, Vector3[] slopes)
		{
		}
	}
}
namespace Language
{
	[Token(Token = "0x20000AA")]
	public class CVSParser : MonoBehaviour
	{
		[Token(Token = "0x400039D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<string> _languageList;

		[Token(Token = "0x400039E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Dictionary<string, List<string>> _languageDic;

		[Token(Token = "0x600040F")]
		[Address(RVA = "0xDB1A74", Offset = "0xDB1A74", VA = "0xDB1A74")]
		public static List<string> GetAvailableLanguages()
		{
			return null;
		}

		[Token(Token = "0x6000410")]
		[Address(RVA = "0xDB1C70", Offset = "0xDB1C70", VA = "0xDB1C70")]
		public static string GetTextFromID(string id, int languageIndex)
		{
			return null;
		}

		[Token(Token = "0x6000411")]
		[Address(RVA = "0xDB1F34", Offset = "0xDB1F34", VA = "0xDB1F34")]
		public CVSParser()
		{
		}
	}
	[Token(Token = "0x20000AB")]
	public class LanguageDropDown : MonoBehaviour
	{
		[Token(Token = "0x400039F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private InGameSetUISO inGameSet;

		[Token(Token = "0x40003A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameSet gameSet;

		[Token(Token = "0x40003A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TMP_Dropdown dropDown;

		[Token(Token = "0x40003A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextMeshProUGUI label;

		[Token(Token = "0x6000413")]
		[Address(RVA = "0xDB2028", Offset = "0xDB2028", VA = "0xDB2028")]
		private void Start()
		{
		}

		[Token(Token = "0x6000414")]
		[Address(RVA = "0xDB20C4", Offset = "0xDB20C4", VA = "0xDB20C4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000415")]
		[Address(RVA = "0xDB20EC", Offset = "0xDB20EC", VA = "0xDB20EC")]
		public void LanguageChanged()
		{
		}

		[Token(Token = "0x6000416")]
		[Address(RVA = "0xDB202C", Offset = "0xDB202C", VA = "0xDB202C")]
		private void PopulateDropdown()
		{
		}

		[Token(Token = "0x6000417")]
		[Address(RVA = "0xDB2354", Offset = "0xDB2354", VA = "0xDB2354")]
		public LanguageDropDown()
		{
		}
	}
	[Token(Token = "0x20000AC")]
	public class LocalizationText : MonoBehaviour
	{
		[Token(Token = "0x40003A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string key;

		[Token(Token = "0x40003A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private InGameSetUISO inGameSet;

		[Token(Token = "0x40003A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameSet gameSet;

		[Token(Token = "0x6000418")]
		[Address(RVA = "0xDB235C", Offset = "0xDB235C", VA = "0xDB235C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000419")]
		[Address(RVA = "0xDB2378", Offset = "0xDB2378", VA = "0xDB2378")]
		private void ChangeLanguage(int index)
		{
		}

		[Token(Token = "0x600041A")]
		[Address(RVA = "0xDB242C", Offset = "0xDB242C", VA = "0xDB242C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600041B")]
		[Address(RVA = "0xDB2514", Offset = "0xDB2514", VA = "0xDB2514")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600041C")]
		[Address(RVA = "0xDB25FC", Offset = "0xDB25FC", VA = "0xDB25FC")]
		public LocalizationText()
		{
		}
	}
}
namespace Rook
{
	[Token(Token = "0x20000AD")]
	public class AIBall : MonoBehaviour
	{
		[Token(Token = "0x40003A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private ChangeAIActionSO changeAIAction;

		[Token(Token = "0x40003A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private InGameSet inGameSet;

		[Token(Token = "0x40003A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform ballManagerTr;

		[Token(Token = "0x40003A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private BallManager ballManager;

		[Token(Token = "0x40003AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 startPos;

		[Token(Token = "0x40003AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 startPivotPos;

		[Token(Token = "0x40003AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform endPivot;

		[Token(Token = "0x40003AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform endPos;

		[Token(Token = "0x40003AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Range(0f, 1f)]
		public float t;

		[Token(Token = "0x40003AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[SerializeField]
		private float _ballSpeed;

		[Token(Token = "0x40003B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool startDrawLine;

		[Token(Token = "0x40003B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private int _segmentNumbers;

		[Token(Token = "0x40003B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float _pointPos;

		[Token(Token = "0x40003B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 _previousPoint;

		[Token(Token = "0x40003B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Rigidbody _rigidbody;

		[Token(Token = "0x40003B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Collider _ballCollider;

		[Token(Token = "0x40003B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public bool resetBall;

		[Token(Token = "0x40003B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private Transform ballAnchor;

		[Token(Token = "0x40003B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private float handIntensity;

		[Token(Token = "0x40003B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private TextMeshProUGUI debugText;

		[Token(Token = "0x40003BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private BallControl _ballControl;

		[Token(Token = "0x600041D")]
		[Address(RVA = "0xDB2604", Offset = "0xDB2604", VA = "0xDB2604")]
		private void Start()
		{
		}

		[Token(Token = "0x600041E")]
		[Address(RVA = "0xDB26F4", Offset = "0xDB26F4", VA = "0xDB26F4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600041F")]
		[Address(RVA = "0xDB2744", Offset = "0xDB2744", VA = "0xDB2744")]
		private void Update()
		{
		}

		[Token(Token = "0x6000420")]
		[Address(RVA = "0xDB2AC4", Offset = "0xDB2AC4", VA = "0xDB2AC4")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000421")]
		[Address(RVA = "0xDB2CE0", Offset = "0xDB2CE0", VA = "0xDB2CE0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000422")]
		[Address(RVA = "0xDB2D00", Offset = "0xDB2D00", VA = "0xDB2D00")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000423")]
		[Address(RVA = "0xDB2A14", Offset = "0xDB2A14", VA = "0xDB2A14")]
		private static Vector3 GetFirstDerivative(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000424")]
		[Address(RVA = "0xDB293C", Offset = "0xDB293C", VA = "0xDB293C")]
		private Vector3 LerpGetPoint(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000425")]
		[Address(RVA = "0xDB2E38", Offset = "0xDB2E38", VA = "0xDB2E38")]
		public AIBall()
		{
		}
	}
	[Token(Token = "0x20000AE")]
	public enum AIState
	{
		[Token(Token = "0x40003BC")]
		Idle,
		[Token(Token = "0x40003BD")]
		Shield,
		[Token(Token = "0x40003BE")]
		BlockIdle,
		[Token(Token = "0x40003BF")]
		PlayBall,
		[Token(Token = "0x40003C0")]
		Pitch,
		[Token(Token = "0x40003C1")]
		Run,
		[Token(Token = "0x40003C2")]
		TakeBall,
		[Token(Token = "0x40003C3")]
		RunWithBall,
		[Token(Token = "0x40003C4")]
		PositionDunk
	}
	[Token(Token = "0x20000AF")]
	public class AIBehaviour : MonoBehaviour
	{
		[Token(Token = "0x40003C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private ChangeAIActionSO changeAIAction;

		[Token(Token = "0x40003C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private InGameSet inGameSet;

		[Token(Token = "0x40003C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform ball;

		[Token(Token = "0x40003C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Transform netTransform;

		[Token(Token = "0x40003C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform _player;

		[Token(Token = "0x40003CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 _playerFaceNetDir;

		[Token(Token = "0x40003CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float _aIPosY;

		[Token(Token = "0x40003CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Animator _animator;

		[Token(Token = "0x40003CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private float distance;

		[Token(Token = "0x40003CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[SerializeField]
		private float aiSpeed;

		[Token(Token = "0x40003CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 _targetPos;

		[Token(Token = "0x40003D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 _playerPos;

		[Token(Token = "0x40003D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float _playerHeight;

		[Token(Token = "0x40003D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int ToTargetPoint;

		[Token(Token = "0x40003D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly int StartBlock;

		[Token(Token = "0x40003D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int AITakeBall;

		[Token(Token = "0x40003D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static readonly int OutRange;

		[Token(Token = "0x40003D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly int MoveInRange;

		[Token(Token = "0x40003D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static readonly int TakeBall;

		[Token(Token = "0x40003D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly int ToLeft;

		[Token(Token = "0x40003D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private static readonly int ToRight;

		[Token(Token = "0x40003DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly int Pitch;

		[Token(Token = "0x40003DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private static readonly int MoveWithBall;

		[Token(Token = "0x40003DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[SerializeField]
		private float blockRange;

		[Token(Token = "0x40003DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public AIState aIState;

		[Token(Token = "0x40003DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float _distanceZ;

		[Token(Token = "0x40003DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float _distanceX;

		[Token(Token = "0x40003E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[SerializeField]
		private float playerDistance;

		[Token(Token = "0x40003E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int randomPitchMethode;

		[Token(Token = "0x40003E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private int randomPointIndex;

		[Token(Token = "0x40003E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool _isPitch;

		[Token(Token = "0x40003E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		private bool _isDunk;

		[Token(Token = "0x40003E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private Transform dunkPoint;

		[Token(Token = "0x40003E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private TextMeshProUGUI debugText;

		[Token(Token = "0x40003E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private TextMeshProUGUI debugText02;

		[Token(Token = "0x40003E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private TextMeshProUGUI debugText03;

		[Token(Token = "0x40003E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private Transform[] aiTargetPoints;

		[Token(Token = "0x40003EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static readonly int PositionDunk;

		[Token(Token = "0x6000426")]
		[Address(RVA = "0xDB2E40", Offset = "0xDB2E40", VA = "0xDB2E40")]
		private void Start()
		{
		}

		[Token(Token = "0x6000427")]
		[Address(RVA = "0xDB327C", Offset = "0xDB327C", VA = "0xDB327C")]
		private void ToIdleAction()
		{
		}

		[Token(Token = "0x6000428")]
		[Address(RVA = "0xDB3310", Offset = "0xDB3310", VA = "0xDB3310")]
		private void ToBlockAction()
		{
		}

		[Token(Token = "0x6000429")]
		[Address(RVA = "0xDB33A4", Offset = "0xDB33A4", VA = "0xDB33A4")]
		private void PitchResetHandle()
		{
		}

		[Token(Token = "0x600042A")]
		[Address(RVA = "0xDB3414", Offset = "0xDB3414", VA = "0xDB3414")]
		private void DunkResetHandle()
		{
		}

		[Token(Token = "0x600042B")]
		[Address(RVA = "0xDB34A4", Offset = "0xDB34A4", VA = "0xDB34A4")]
		private void Update()
		{
		}

		[Token(Token = "0x600042C")]
		[Address(RVA = "0xDB34A8", Offset = "0xDB34A8", VA = "0xDB34A8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600042D")]
		[Address(RVA = "0xDB4140", Offset = "0xDB4140", VA = "0xDB4140")]
		private void PitchBall()
		{
		}

		[Token(Token = "0x600042E")]
		[Address(RVA = "0xDB3CF4", Offset = "0xDB3CF4", VA = "0xDB3CF4")]
		private void BlockMove()
		{
		}

		[Token(Token = "0x600042F")]
		[Address(RVA = "0xDB3ABC", Offset = "0xDB3ABC", VA = "0xDB3ABC")]
		private void BlockPlayer()
		{
		}

		[Token(Token = "0x6000430")]
		[Address(RVA = "0xDB4064", Offset = "0xDB4064", VA = "0xDB4064")]
		private void GetBall()
		{
		}

		[Token(Token = "0x6000431")]
		[Address(RVA = "0xDB4D58", Offset = "0xDB4D58", VA = "0xDB4D58")]
		private void CloseBool()
		{
		}

		[Token(Token = "0x6000432")]
		[Address(RVA = "0xDB4DEC", Offset = "0xDB4DEC", VA = "0xDB4DEC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000433")]
		[Address(RVA = "0xDB3208", Offset = "0xDB3208", VA = "0xDB3208")]
		private void ChangeAIFaceDirection(Vector3 targetPos)
		{
		}

		[Token(Token = "0x6000434")]
		[Address(RVA = "0xDB4530", Offset = "0xDB4530", VA = "0xDB4530")]
		private void RunWithBall(Vector3 targetPos, float speed, Vector3 nextFacePoint)
		{
		}

		[Token(Token = "0x6000435")]
		[Address(RVA = "0xDB47E8", Offset = "0xDB47E8", VA = "0xDB47E8")]
		private void BlockMoveTo(Vector3 targetPos, float speed)
		{
		}

		[Token(Token = "0x6000436")]
		[Address(RVA = "0xDB4A3C", Offset = "0xDB4A3C", VA = "0xDB4A3C")]
		public void MoveTo(Vector3 targetPos, float speed)
		{
		}

		[Token(Token = "0x6000437")]
		[Address(RVA = "0xDB5068", Offset = "0xDB5068", VA = "0xDB5068")]
		public void ChangeAIState(int stateIndex)
		{
		}

		[Token(Token = "0x6000438")]
		[Address(RVA = "0xDB5104", Offset = "0xDB5104", VA = "0xDB5104")]
		public AIBehaviour()
		{
		}
	}
	[Token(Token = "0x20000B0")]
	[CreateAssetMenu(fileName = "New AIAction", menuName = "ScriptableObject/Game/AIAction")]
	public class ChangeAIActionSO : ScriptableObject
	{
		[Token(Token = "0x40003EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Action ToIdleAction;

		[Token(Token = "0x40003EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action CloseBoolAction;

		[Token(Token = "0x40003ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action DunkAction;

		[Token(Token = "0x40003EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action PitchResetAction;

		[Token(Token = "0x600043A")]
		[Address(RVA = "0xDB534C", Offset = "0xDB534C", VA = "0xDB534C")]
		public void BackIdle()
		{
		}

		[Token(Token = "0x600043B")]
		[Address(RVA = "0xDB5368", Offset = "0xDB5368", VA = "0xDB5368")]
		public void CloseBool()
		{
		}

		[Token(Token = "0x600043C")]
		[Address(RVA = "0xDB5384", Offset = "0xDB5384", VA = "0xDB5384")]
		public void DunkReset()
		{
		}

		[Token(Token = "0x600043D")]
		[Address(RVA = "0xDB53A0", Offset = "0xDB53A0", VA = "0xDB53A0")]
		public void PitchReset()
		{
		}

		[Token(Token = "0x600043E")]
		[Address(RVA = "0xDB53BC", Offset = "0xDB53BC", VA = "0xDB53BC")]
		public ChangeAIActionSO()
		{
		}
	}
	[Token(Token = "0x20000B1")]
	public class ControlBallShowHide : MonoBehaviour
	{
		[Token(Token = "0x40003EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private InGameSet inGameSet;

		[Token(Token = "0x40003F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private ChangeAIActionSO changeAIAction;

		[Token(Token = "0x40003F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject ballObj;

		[Token(Token = "0x40003F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Transform startPivotTr;

		[Token(Token = "0x40003F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Transform ballPivotTr;

		[Token(Token = "0x40003F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AIBall _aiBall;

		[Token(Token = "0x600043F")]
		[Address(RVA = "0xDB53C4", Offset = "0xDB53C4", VA = "0xDB53C4")]
		public void HideBall()
		{
		}

		[Token(Token = "0x6000440")]
		[Address(RVA = "0xDB54C8", Offset = "0xDB54C8", VA = "0xDB54C8")]
		public void ShowBall()
		{
		}

		[Token(Token = "0x6000441")]
		[Address(RVA = "0xDB55BC", Offset = "0xDB55BC", VA = "0xDB55BC")]
		public void PlayBall()
		{
		}

		[Token(Token = "0x6000442")]
		[Address(RVA = "0xDB55C0", Offset = "0xDB55C0", VA = "0xDB55C0")]
		public void PitchBall()
		{
		}

		[Token(Token = "0x6000443")]
		[Address(RVA = "0xDB56E8", Offset = "0xDB56E8", VA = "0xDB56E8")]
		public void ResetBall()
		{
		}

		[Token(Token = "0x6000444")]
		[Address(RVA = "0xDB58E0", Offset = "0xDB58E0", VA = "0xDB58E0")]
		public void BackBall()
		{
		}

		[Token(Token = "0x6000445")]
		[Address(RVA = "0xDB58E4", Offset = "0xDB58E4", VA = "0xDB58E4")]
		public void AITakeBall()
		{
		}

		[Token(Token = "0x6000446")]
		[Address(RVA = "0xDB5904", Offset = "0xDB5904", VA = "0xDB5904")]
		public void LoseBall()
		{
		}

		[Token(Token = "0x6000447")]
		[Address(RVA = "0xDB59AC", Offset = "0xDB59AC", VA = "0xDB59AC")]
		public void PitchReset()
		{
		}

		[Token(Token = "0x6000448")]
		[Address(RVA = "0xDB59E0", Offset = "0xDB59E0", VA = "0xDB59E0")]
		public void DunkReset()
		{
		}

		[Token(Token = "0x6000449")]
		[Address(RVA = "0xDB5A14", Offset = "0xDB5A14", VA = "0xDB5A14")]
		public ControlBallShowHide()
		{
		}
	}
	[Token(Token = "0x20000B2")]
	public class AimPos : MonoBehaviour
	{
		[Token(Token = "0x40003F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public InGameSet inGameSet;

		[Token(Token = "0x40003F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform _ballTransform;

		[Token(Token = "0x40003F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private string leftHandModelTag;

		[Token(Token = "0x40003F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private string rightHandModelTag;

		[Token(Token = "0x40003F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform _leftHandModel;

		[Token(Token = "0x40003FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform _rightHandModel;

		[Token(Token = "0x40003FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform _leftModelMesh;

		[Token(Token = "0x40003FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform _rightModelMesh;

		[Token(Token = "0x40003FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private BNG.HandPoser _leftHandPoser;

		[Token(Token = "0x40003FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private BNG.HandPoser _rightHandPoser;

		[Token(Token = "0x40003FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private Transform centerAnchor;

		[Token(Token = "0x4000400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3 _centerVertical;

		[Token(Token = "0x4000401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform _rightHandController;

		[Token(Token = "0x4000402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Transform _leftHandController;

		[Token(Token = "0x4000403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 _rightVerticalPoint;

		[Token(Token = "0x4000404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Vector3 _leftVerticalPoint;

		[Token(Token = "0x4000405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 _rightControllerDir;

		[Token(Token = "0x4000406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private Vector3 _leftControllerDir;

		[Token(Token = "0x4000407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private ConstraintSource _posConstraintSource;

		[Token(Token = "0x4000408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private PositionConstraint _positionConstraint;

		[Token(Token = "0x4000409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Transform _rightUpAimPoint;

		[Token(Token = "0x400040A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Transform _leftUpAimPoint;

		[Token(Token = "0x400040B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		[Tooltip("右手上左手的定位点，在右手模型下")]
		private Transform leftAimInRight;

		[Token(Token = "0x400040C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		[Tooltip("左手上右手的定位点，在左手模型下")]
		private Transform rightAimInLeft;

		[Token(Token = "0x400040D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private BallControl _ballControl;

		[Token(Token = "0x400040E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private Transform rightHandBackPos;

		[Token(Token = "0x400040F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private Transform leftHandBackPos;

		[Token(Token = "0x4000410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Transform _rightBackChild;

		[Token(Token = "0x4000411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Transform _leftBackChild;

		[Token(Token = "0x4000412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private bool _startFollow;

		[Token(Token = "0x4000413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Transform _followLeft;

		[Token(Token = "0x4000414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Transform _followRight;

		[Token(Token = "0x600044A")]
		[Address(RVA = "0xDB5A1C", Offset = "0xDB5A1C", VA = "0xDB5A1C")]
		private void Start()
		{
		}

		[Token(Token = "0x600044B")]
		[Address(RVA = "0xDB6064", Offset = "0xDB6064", VA = "0xDB6064")]
		private void Update()
		{
		}

		[Token(Token = "0x600044C")]
		[Address(RVA = "0xDB66B4", Offset = "0xDB66B4", VA = "0xDB66B4")]
		private void ChangeAim(Transform parentTransform)
		{
		}

		[Token(Token = "0x600044D")]
		[Address(RVA = "0xDB679C", Offset = "0xDB679C", VA = "0xDB679C")]
		private void SetAimPosConstrain(Transform posConstrainParent)
		{
		}

		[Token(Token = "0x600044E")]
		[Address(RVA = "0xDB6848", Offset = "0xDB6848", VA = "0xDB6848")]
		private void ArrivalHandHandle(HandType whichHand)
		{
		}

		[Token(Token = "0x600044F")]
		[Address(RVA = "0xDB6884", Offset = "0xDB6884", VA = "0xDB6884")]
		private void InitHandHandle()
		{
		}

		[Token(Token = "0x6000450")]
		[Address(RVA = "0xDB6FB4", Offset = "0xDB6FB4", VA = "0xDB6FB4")]
		private void InitAimHandle()
		{
		}

		[Token(Token = "0x6000451")]
		[Address(RVA = "0xDB7040", Offset = "0xDB7040", VA = "0xDB7040")]
		private void ReadyPitchHand(bool whichHand)
		{
		}

		[Token(Token = "0x6000452")]
		[Address(RVA = "0xDB7264", Offset = "0xDB7264", VA = "0xDB7264")]
		private void SlamDunkHandHandle(Transform leftPoint, Transform rightPoint)
		{
		}

		[Token(Token = "0x6000453")]
		[Address(RVA = "0xDB744C", Offset = "0xDB744C", VA = "0xDB744C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000454")]
		[Address(RVA = "0xDB7870", Offset = "0xDB7870", VA = "0xDB7870")]
		public void SetupReference(AimPosXRRigPlayerReference reference)
		{
		}

		[Token(Token = "0x6000455")]
		[Address(RVA = "0xDB78FC", Offset = "0xDB78FC", VA = "0xDB78FC")]
		public AimPos()
		{
		}
	}
	[Token(Token = "0x20000B3")]
	public class BallControl : BaseBallControl
	{
		[Token(Token = "0x4000415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private Transform _newBallPos;

		[Token(Token = "0x17000055")]
		private Transform _rightTargetPoint
		{
			[Token(Token = "0x6000466")]
			[Address(RVA = "0xDB8B90", Offset = "0xDB8B90", VA = "0xDB8B90")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000056")]
		private Transform _leftTargetPoint
		{
			[Token(Token = "0x6000467")]
			[Address(RVA = "0xDB8BAC", Offset = "0xDB8BAC", VA = "0xDB8BAC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000456")]
		[Address(RVA = "0xDB7980", Offset = "0xDB7980", VA = "0xDB7980")]
		private void Start()
		{
		}

		[Token(Token = "0x6000457")]
		[Address(RVA = "0xDB7F1C", Offset = "0xDB7F1C", VA = "0xDB7F1C")]
		private void InitBallMesh()
		{
		}

		[Token(Token = "0x6000458")]
		[Address(RVA = "0xDB7F54", Offset = "0xDB7F54", VA = "0xDB7F54")]
		private void Update()
		{
		}

		[Token(Token = "0x6000459")]
		[Address(RVA = "0xDB8320", Offset = "0xDB8320", VA = "0xDB8320")]
		private void InSlamDunkBallHandle(Vector3 ballPos)
		{
		}

		[Token(Token = "0x600045A")]
		[Address(RVA = "0xDB854C", Offset = "0xDB854C", VA = "0xDB854C")]
		private void OutSlamDunkBallHandle()
		{
		}

		[Token(Token = "0x600045B")]
		[Address(RVA = "0xDB8550", Offset = "0xDB8550", VA = "0xDB8550")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600045C")]
		[Address(RVA = "0xDB896C", Offset = "0xDB896C", VA = "0xDB896C")]
		private void TwoHandWithBall(Transform ballPos)
		{
		}

		[Token(Token = "0x600045D")]
		[Address(RVA = "0xDB89F0", Offset = "0xDB89F0", VA = "0xDB89F0")]
		public void BackHand(HandType whichHand)
		{
		}

		[Token(Token = "0x600045E")]
		[Address(RVA = "0xDB8AA8", Offset = "0xDB8AA8", VA = "0xDB8AA8", Slot = "4")]
		public override void disableCollider()
		{
		}

		[Token(Token = "0x600045F")]
		[Address(RVA = "0xDB8AC8", Offset = "0xDB8AC8", VA = "0xDB8AC8", Slot = "5")]
		public override GameMode gameMode()
		{
			return default(GameMode);
		}

		[Token(Token = "0x6000460")]
		[Address(RVA = "0xDB8AF4", Offset = "0xDB8AF4", VA = "0xDB8AF4", Slot = "7")]
		public override void InitParameters()
		{
		}

		[Token(Token = "0x6000461")]
		[Address(RVA = "0xDB8B24", Offset = "0xDB8B24", VA = "0xDB8B24", Slot = "12")]
		public override void UpdateHand2FloorHandState(HandType fromHandType)
		{
		}

		[Token(Token = "0x6000462")]
		[Address(RVA = "0xDB8B44", Offset = "0xDB8B44", VA = "0xDB8B44", Slot = "8")]
		public override void readLeftRightHandPosition()
		{
		}

		[Token(Token = "0x6000463")]
		[Address(RVA = "0xDB8BC8", Offset = "0xDB8BC8", VA = "0xDB8BC8", Slot = "9")]
		public override void Born2Hand()
		{
		}

		[Token(Token = "0x6000464")]
		[Address(RVA = "0xDB8FF8", Offset = "0xDB8FF8", VA = "0xDB8FF8", Slot = "10")]
		public override void WithHand()
		{
		}

		[Token(Token = "0x6000465")]
		[Address(RVA = "0xDB90A4", Offset = "0xDB90A4", VA = "0xDB90A4", Slot = "11")]
		public override void TwoHand()
		{
		}

		[Token(Token = "0x6000468")]
		[Address(RVA = "0xDB9144", Offset = "0xDB9144", VA = "0xDB9144")]
		public BallControl()
		{
		}
	}
	[Token(Token = "0x20000B4")]
	public class BallIn2Trigger : MonoBehaviour
	{
		[Token(Token = "0x20000B5")]
		[CompilerGenerated]
		private sealed class <WaiPlayer>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400041C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400041D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400041E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BallIn2Trigger <>4__this;

			[Token(Token = "0x17000057")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000471")]
				[Address(RVA = "0xDB9FFC", Offset = "0xDB9FFC", VA = "0xDB9FFC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000058")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000473")]
				[Address(RVA = "0xDBA044", Offset = "0xDBA044", VA = "0xDBA044", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600046E")]
			[Address(RVA = "0xDB9ED0", Offset = "0xDB9ED0", VA = "0xDB9ED0")]
			[DebuggerHidden]
			public <WaiPlayer>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x600046F")]
			[Address(RVA = "0xDB9F00", Offset = "0xDB9F00", VA = "0xDB9F00", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000470")]
			[Address(RVA = "0xDB9F04", Offset = "0xDB9F04", VA = "0xDB9F04", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000472")]
			[Address(RVA = "0xDBA004", Offset = "0xDBA004", VA = "0xDBA004", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string ballTag;

		[Token(Token = "0x4000417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private InGameSet inGameSet;

		[Token(Token = "0x4000418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PlayerController playerController;

		[Token(Token = "0x4000419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 _ballPos;

		[Token(Token = "0x400041A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 _ballVelPos;

		[Token(Token = "0x400041B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 _netNormal;

		[Token(Token = "0x6000469")]
		[Address(RVA = "0xDB9274", Offset = "0xDB9274", VA = "0xDB9274")]
		private void Start()
		{
		}

		[Token(Token = "0x600046A")]
		[Address(RVA = "0xDB9324", Offset = "0xDB9324", VA = "0xDB9324")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600046B")]
		[Address(RVA = "0xDB9E48", Offset = "0xDB9E48", VA = "0xDB9E48")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x600046C")]
		[Address(RVA = "0xDB92B0", Offset = "0xDB92B0", VA = "0xDB92B0")]
		[IteratorStateMachine(typeof(<WaiPlayer>d__9))]
		private IEnumerator WaiPlayer()
		{
			return null;
		}

		[Token(Token = "0x600046D")]
		[Address(RVA = "0xDB9EF8", Offset = "0xDB9EF8", VA = "0xDB9EF8")]
		public BallIn2Trigger()
		{
		}
	}
	[Token(Token = "0x20000B6")]
	public class BallInTrigger : MonoBehaviour
	{
		[Token(Token = "0x400041F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string ballTag;

		[Token(Token = "0x4000420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private InGameSet inGameSet;

		[Token(Token = "0x4000421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 _ballPos;

		[Token(Token = "0x4000422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 _ballVelPos;

		[Token(Token = "0x4000423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 _netNormal;

		[Token(Token = "0x4000424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool _wasFromLowerHalfPart;

		[Token(Token = "0x6000474")]
		[Address(RVA = "0xDBA04C", Offset = "0xDBA04C", VA = "0xDBA04C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000475")]
		[Address(RVA = "0xDBA06C", Offset = "0xDBA06C", VA = "0xDBA06C")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000476")]
		[Address(RVA = "0xDBABE4", Offset = "0xDBABE4", VA = "0xDBABE4")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000477")]
		[Address(RVA = "0xDBB2E0", Offset = "0xDBB2E0", VA = "0xDBB2E0")]
		public BallInTrigger()
		{
		}
	}
	[Token(Token = "0x20000B7")]
	public class BallManager : BaseBallManager
	{
		[Token(Token = "0x20000B8")]
		[CompilerGenerated]
		private sealed class <Start>d__31 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400044E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400044F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000450")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BallManager <>4__this;

			[Token(Token = "0x17000059")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600048C")]
				[Address(RVA = "0xDBE9FC", Offset = "0xDBE9FC", VA = "0xDBE9FC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700005A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600048E")]
				[Address(RVA = "0xDBEA44", Offset = "0xDBEA44", VA = "0xDBEA44", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000489")]
			[Address(RVA = "0xDBB35C", Offset = "0xDBB35C", VA = "0xDBB35C")]
			[DebuggerHidden]
			public <Start>d__31(int <>1__state)
			{
			}

			[Token(Token = "0x600048A")]
			[Address(RVA = "0xDBE894", Offset = "0xDBE894", VA = "0xDBE894", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600048B")]
			[Address(RVA = "0xDBE898", Offset = "0xDBE898", VA = "0xDBE898", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600048D")]
			[Address(RVA = "0xDBEA04", Offset = "0xDBEA04", VA = "0xDBEA04", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameSet gameSet;

		[Token(Token = "0x4000426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public InGameSet inGameSet;

		[Token(Token = "0x4000427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[Header("右手柄：")]
		private Transform rightControl;

		[Token(Token = "0x4000428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		[Header("左手柄：")]
		private Transform leftControl;

		[Token(Token = "0x4000429")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[Header("右手球的停靠点：")]
		private Transform rightHandPoint;

		[Token(Token = "0x400042A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[Header("左手球的停靠点：")]
		private Transform leftHandPoint;

		[Token(Token = "0x400042B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[Header("右手垂直降落点：")]
		private Transform rightHandVerticalPoint;

		[Token(Token = "0x400042C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		[Header("左手垂直降落点：")]
		private Transform leftHandVerticalPoint;

		[Token(Token = "0x400042D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		[Header("右手返回的停靠点：")]
		private Transform newRightPos;

		[Token(Token = "0x400042E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("左手返回的停靠点：")]
		[SerializeField]
		private Transform newLeftPos;

		[Token(Token = "0x400042F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		[Header("检查灌篮时球有无在右手上")]
		private CheckBallInHand checkBallInHandRight;

		[Token(Token = "0x4000430")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		[Header("检查灌篮时球有无在左手上")]
		public CheckBallInHand checkBallInHandLeft;

		[Token(Token = "0x4000431")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private RotateVector _rotateVector;

		[Token(Token = "0x4000432")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Header("是否允许生成篮球：")]
		public bool allowSpawn;

		[Token(Token = "0x4000433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		[Header("是否允许拍球")]
		public bool allowPlayBall;

		[Token(Token = "0x4000434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Header("篮球预制体名称")]
		public string ballPrefabName;

		[Token(Token = "0x4000435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Header("篮球生成的位置：")]
		[SerializeField]
		private Transform ballBorn;

		[Token(Token = "0x4000436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 _ballBornPosition;

		[Token(Token = "0x4000437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private BasketBall _currentBasketBall;

		[Token(Token = "0x4000438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private VelocityTracker _rightVelocityTracker;

		[Token(Token = "0x4000439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private VelocityTracker _leftVelocityTracker;

		[Token(Token = "0x400043A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Vector3 _rightAngularSpeed;

		[Token(Token = "0x400043B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private Vector3 _leftAngularSpeed;

		[Token(Token = "0x400043C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Vector3 _handDir;

		[Token(Token = "0x400043D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private float _dotValue;

		[Token(Token = "0x400043E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private float _rightAngleWithDown;

		[Token(Token = "0x400043F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private float _leftAngleWithDown;

		[Token(Token = "0x4000440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private float _magRightSpeed;

		[Token(Token = "0x4000441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private float _magLeftSpeed;

		[Token(Token = "0x4000442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private PlayerController playerController;

		[Token(Token = "0x4000443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		private Transform middlePoint;

		[Token(Token = "0x4000444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private bool _recordPlayerSpawnBallOnce;

		[Token(Token = "0x4000445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private Transform _pausePanel;

		[Token(Token = "0x4000446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		private Transform pausePos;

		[Token(Token = "0x4000447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		private Transform pauseParent;

		[Token(Token = "0x4000448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Vector3 _playerPullBackFirstPosRight;

		[Token(Token = "0x4000449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private Vector3 _playerPullBackFirstPosLeft;

		[Token(Token = "0x400044A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private float _backTimerRight;

		[Token(Token = "0x400044B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		private float _backTimerLeft;

		[Token(Token = "0x400044C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private Vector3 _rightControlDirection;

		[Token(Token = "0x400044D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private Vector3 _leftControlDirection;

		[Token(Token = "0x6000478")]
		[Address(RVA = "0xDBB2E8", Offset = "0xDBB2E8", VA = "0xDBB2E8")]
		[IteratorStateMachine(typeof(<Start>d__31))]
		private IEnumerator Start()
		{
			return null;
		}

		[Token(Token = "0x6000479")]
		[Address(RVA = "0xDBB384", Offset = "0xDBB384", VA = "0xDBB384")]
		private bool TrackBallState()
		{
			return default(bool);
		}

		[Token(Token = "0x600047A")]
		[Address(RVA = "0xDBB80C", Offset = "0xDBB80C", VA = "0xDBB80C")]
		private void InitRotateVector()
		{
		}

		[Token(Token = "0x600047B")]
		[Address(RVA = "0xDBB8F8", Offset = "0xDBB8F8", VA = "0xDBB8F8")]
		private void Update()
		{
		}

		[Token(Token = "0x600047C")]
		[Address(RVA = "0xDBDB3C", Offset = "0xDBDB3C", VA = "0xDBDB3C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600047D")]
		[Address(RVA = "0xDBDB5C", Offset = "0xDBDB5C", VA = "0xDBDB5C")]
		private void OpenClosePause(InputAction.CallbackContext obj)
		{
		}

		[Token(Token = "0x600047E")]
		[Address(RVA = "0xDBD77C", Offset = "0xDBD77C", VA = "0xDBD77C")]
		private void InstantiateBall()
		{
		}

		[Token(Token = "0x600047F")]
		[Address(RVA = "0xDBDD68", Offset = "0xDBDD68", VA = "0xDBDD68")]
		private void DestroyBasketBall()
		{
		}

		[Token(Token = "0x6000480")]
		[Address(RVA = "0xDBE088", Offset = "0xDBE088", VA = "0xDBE088")]
		private void InitRightDirection(float rotationAngle, Vector3 rightControlSpeed)
		{
		}

		[Token(Token = "0x6000481")]
		[Address(RVA = "0xDBE124", Offset = "0xDBE124", VA = "0xDBE124")]
		private void InitLeftDirection(float rotationAngle, Vector3 leftContrlSpeed)
		{
		}

		[Token(Token = "0x6000482")]
		[Address(RVA = "0xDBBBCC", Offset = "0xDBBBCC", VA = "0xDBBBCC")]
		private void SpeedAndDirection()
		{
		}

		[Token(Token = "0x6000483")]
		[Address(RVA = "0xDBE68C", Offset = "0xDBE68C", VA = "0xDBE68C", Slot = "4")]
		protected override Vector3 getRightControllerSpeed()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000484")]
		[Address(RVA = "0xDBE6AC", Offset = "0xDBE6AC", VA = "0xDBE6AC", Slot = "5")]
		protected override Vector3 getLeftControllerSpeed()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000485")]
		[Address(RVA = "0xDBE6CC", Offset = "0xDBE6CC", VA = "0xDBE6CC")]
		public void SetupReference(BallManagerXRRigPlayerReference reference)
		{
		}

		[Token(Token = "0x6000486")]
		[Address(RVA = "0xDBE7B8", Offset = "0xDBE7B8", VA = "0xDBE7B8")]
		public void SetupFloorPointManagerReference(PointManager pointManager)
		{
		}

		[Token(Token = "0x6000487")]
		[Address(RVA = "0xDBE804", Offset = "0xDBE804", VA = "0xDBE804")]
		public void UpdateCurrentBasketBall(BasketBall basketBall)
		{
		}

		[Token(Token = "0x6000488")]
		[Address(RVA = "0xDBE80C", Offset = "0xDBE80C", VA = "0xDBE80C")]
		public BallManager()
		{
		}
	}
	[Token(Token = "0x20000B9")]
	public class AimPosXRRigPlayerReference : MonoBehaviour
	{
		[Token(Token = "0x4000451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public string leftHandModelTag;

		[Token(Token = "0x4000452")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public string rightHandModelTag;

		[Token(Token = "0x4000453")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public Transform centerAnchor;

		[Token(Token = "0x4000454")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("右手上左手的定位点，在右手模型下")]
		[SerializeField]
		public Transform leftAimInRight;

		[Token(Token = "0x4000455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[Tooltip("左手上右手的定位点，在左手模型下")]
		public Transform rightAimInLeft;

		[Token(Token = "0x4000456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		public Transform rightHandBackPos;

		[Token(Token = "0x4000457")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		public Transform leftHandBackPos;

		[Token(Token = "0x600048F")]
		[Address(RVA = "0xDBEA4C", Offset = "0xDBEA4C", VA = "0xDBEA4C")]
		public AimPosXRRigPlayerReference()
		{
		}
	}
	[Token(Token = "0x20000BA")]
	public class BallControlReference
	{
		[Token(Token = "0x4000458")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform middlePoint;

		[Token(Token = "0x4000459")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlayerController playerController;

		[Token(Token = "0x400045A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform rightHandBallPos;

		[Token(Token = "0x400045B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform leftHandBallPos;

		[Token(Token = "0x6000490")]
		[Address(RVA = "0xDBDFC4", Offset = "0xDBDFC4", VA = "0xDBDFC4")]
		public BallControlReference(Transform middlePoint, PlayerController playerController, Transform rightHandBallPos, Transform leftHandBallPos)
		{
		}
	}
	[Token(Token = "0x20000BB")]
	public class BallManagerXRRigPlayerReference : MonoBehaviour
	{
		[Token(Token = "0x400045C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Header("右手柄：")]
		public Transform rightControl;

		[Token(Token = "0x400045D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Header("左手柄：")]
		public Transform leftControl;

		[Token(Token = "0x400045E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("右手球的停靠点：")]
		[SerializeField]
		public Transform rightHandPoint;

		[Token(Token = "0x400045F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[Header("左手球的停靠点：")]
		public Transform leftHandPoint;

		[Token(Token = "0x4000460")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[Header("右手返回的停靠点：")]
		public Transform newRightPos;

		[Token(Token = "0x4000461")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[Header("左手返回的停靠点：")]
		public Transform newLeftPos;

		[Token(Token = "0x4000462")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("检查右手有无球")]
		[SerializeField]
		public CheckBallInHand checkBallInHandRight;

		[Token(Token = "0x4000463")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("检查左手有无球")]
		[SerializeField]
		public CheckBallInHand checkBallInHandLeft;

		[Token(Token = "0x4000464")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("篮球预制体名称")]
		public string ballPrefabName;

		[Token(Token = "0x4000465")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[Header("篮球生成的位置：")]
		public Transform ballBorn;

		[Token(Token = "0x4000466")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		public PlayerController playerController;

		[Token(Token = "0x4000467")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		public InputActionReference pauseMenu;

		[Token(Token = "0x4000468")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		public Transform pausePos;

		[Token(Token = "0x4000469")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		public Transform pauseParent;

		[Token(Token = "0x6000491")]
		[Address(RVA = "0xDBEAD0", Offset = "0xDBEAD0", VA = "0xDBEAD0")]
		public BallManagerXRRigPlayerReference()
		{
		}
	}
	[Token(Token = "0x20000BC")]
	public class BallNetworkGrabbable : Grabbable, IPunObservable
	{
		[Token(Token = "0x400046A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		[Header("篮球字段脚本")]
		[SerializeField]
		public BasketBall basketBall;

		[Token(Token = "0x400046B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		[Header("篮球更换皮肤脚本")]
		[SerializeField]
		public ChangeBallTexture changeBallTexture;

		[Token(Token = "0x400046C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		private BallNetworkGrabbableDependencyReference _dependency;

		[Token(Token = "0x400046D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly string GameScene;

		[Token(Token = "0x400046E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		private BallState _syncBallState;

		[Token(Token = "0x400046F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x274")]
		private BallState _ballState;

		[Token(Token = "0x4000470")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		private bool _syncBallLightingActive;

		[Token(Token = "0x4000471")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x279")]
		private bool _ballLightingActive;

		[Token(Token = "0x4000472")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		private PhotonView photonView;

		[Token(Token = "0x4000473")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		private Rigidbody rigidbody;

		[Token(Token = "0x4000474")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		private Vector3 _syncStartPosition;

		[Token(Token = "0x4000475")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29C")]
		private Vector3 _syncEndPosition;

		[Token(Token = "0x4000476")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		private Quaternion _syncStartRotation;

		[Token(Token = "0x4000477")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		private Quaternion _syncEndRotation;

		[Token(Token = "0x4000478")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		private bool _syncBeingHeld;

		[Token(Token = "0x4000479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2CC")]
		private float _lastSynchronizationTime;

		[Token(Token = "0x400047A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		private float _syncDelay;

		[Token(Token = "0x400047B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D4")]
		private float _syncTime;

		[Token(Token = "0x400047C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
		private BallTexture _ballTexture;

		[Token(Token = "0x400047D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2DC")]
		private BallTexture _syncBallTexture;

		[Token(Token = "0x400047E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		private bool _hasSendOnce;

		[Token(Token = "0x400047F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E1")]
		private bool _syncHasSendOnce;

		[Token(Token = "0x4000480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E2")]
		protected bool requestingOwnerShip;

		[Token(Token = "0x6000492")]
		[Address(RVA = "0xDBEB28", Offset = "0xDBEB28", VA = "0xDBEB28", Slot = "20")]
		public override void GrabItem(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x6000493")]
		[Address(RVA = "0xDBEBCC", Offset = "0xDBEBCC", VA = "0xDBEBCC", Slot = "25")]
		public override void GrabRemoteItem(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x6000494")]
		[Address(RVA = "0xDBEC24", Offset = "0xDBEC24", VA = "0xDBEC24")]
		public void SetupBallToLocalUser(HandType ballToHandType)
		{
		}

		[Token(Token = "0x6000495")]
		[Address(RVA = "0xDBEC0C", Offset = "0xDBEC0C", VA = "0xDBEC0C")]
		private void ballResetFlyingGrab(Grabber grabberBy)
		{
		}

		[Token(Token = "0x6000496")]
		[Address(RVA = "0xDBEF6C", Offset = "0xDBEF6C", VA = "0xDBEF6C", Slot = "27")]
		public override void DropItem(Grabber droppedBy, bool resetVelocity, bool resetParent)
		{
		}

		[Token(Token = "0x6000497")]
		[Address(RVA = "0xDBF230", Offset = "0xDBF230", VA = "0xDBF230")]
		public void SetupReference(BallNetworkGrabbableDependencyReference dependencyReference)
		{
		}

		[Token(Token = "0x6000498")]
		[Address(RVA = "0xDBF240", Offset = "0xDBF240", VA = "0xDBF240")]
		private void Start()
		{
		}

		[Token(Token = "0x6000499")]
		[Address(RVA = "0xDBF2D8", Offset = "0xDBF2D8", VA = "0xDBF2D8")]
		private void CheckType()
		{
		}

		[Token(Token = "0x600049A")]
		[Address(RVA = "0xDBF37C", Offset = "0xDBF37C", VA = "0xDBF37C", Slot = "4")]
		public override void Update()
		{
		}

		[Token(Token = "0x600049B")]
		[Address(RVA = "0xDBEDE0", Offset = "0xDBEDE0", VA = "0xDBEDE0")]
		protected void ResetSyncPosition()
		{
		}

		[Token(Token = "0x600049C")]
		[Address(RVA = "0xDBFDA8", Offset = "0xDBFDA8", VA = "0xDBFDA8", Slot = "51")]
		public virtual void CheckForNullOwner()
		{
		}

		[Token(Token = "0x600049D")]
		[Address(RVA = "0xDBFE74", Offset = "0xDBFE74", VA = "0xDBFE74", Slot = "8")]
		public override bool IsGrabbable()
		{
			return default(bool);
		}

		[Token(Token = "0x600049E")]
		[Address(RVA = "0xDBFF44", Offset = "0xDBFF44", VA = "0xDBFF44", Slot = "50")]
		public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x600049F")]
		[Address(RVA = "0xDC090C", Offset = "0xDC090C", VA = "0xDC090C")]
		public bool IsMine()
		{
			return default(bool);
		}

		[Token(Token = "0x60004A0")]
		[Address(RVA = "0xDC0988", Offset = "0xDC0988", VA = "0xDC0988")]
		public Player GetOwnerPlayer()
		{
			return null;
		}

		[Token(Token = "0x60004A1")]
		[Address(RVA = "0xDC0A08", Offset = "0xDC0A08", VA = "0xDC0A08")]
		public bool IsCanTransformOwnershipToOtherState()
		{
			return default(bool);
		}

		[Token(Token = "0x60004A2")]
		[Address(RVA = "0xDC0B08", Offset = "0xDC0B08", VA = "0xDC0B08")]
		public bool IsCanTransformOwnershipFromOtherUserHand()
		{
			return default(bool);
		}

		[Token(Token = "0x60004A3")]
		[Address(RVA = "0xDC0B10", Offset = "0xDC0B10", VA = "0xDC0B10")]
		public bool IsCanTransformOwnershipFromIdleBasketBall()
		{
			return default(bool);
		}

		[Token(Token = "0x60004A4")]
		[Address(RVA = "0xDB9E38", Offset = "0xDB9E38", VA = "0xDB9E38")]
		public bool IsSyncedDunkState()
		{
			return default(bool);
		}

		[Token(Token = "0x60004A5")]
		[Address(RVA = "0xDC0BF0", Offset = "0xDC0BF0", VA = "0xDC0BF0")]
		public BallNetworkGrabbable()
		{
		}
	}
	[Token(Token = "0x20000BD")]
	public class BallNetworkGrabbableDependencyReference
	{
		[Token(Token = "0x4000481")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public BallManager BallManager;

		[Token(Token = "0x60004A7")]
		[Address(RVA = "0xDC0D18", Offset = "0xDC0D18", VA = "0xDC0D18")]
		public BallNetworkGrabbableDependencyReference(BallManager ballManager)
		{
		}
	}
	[Token(Token = "0x20000BE")]
	public enum BallState
	{
		[Token(Token = "0x4000483")]
		DefaultState,
		[Token(Token = "0x4000484")]
		BornState,
		[Token(Token = "0x4000485")]
		HandState,
		[Token(Token = "0x4000486")]
		TwoHandState,
		[Token(Token = "0x4000487")]
		ToFloorState,
		[Token(Token = "0x4000488")]
		ChangeHandState,
		[Token(Token = "0x4000489")]
		ShotState,
		[Token(Token = "0x400048A")]
		SlamDunkState
	}
	[Token(Token = "0x20000BF")]
	public class BaseBallControl : MonoBehaviour
	{
		[Token(Token = "0x400048B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Collider _collider;

		[Token(Token = "0x400048C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public GameSet gameSet;

		[Token(Token = "0x400048D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public InGameSet inGameSet;

		[Token(Token = "0x400048E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		public PhotonView photonView;

		[Token(Token = "0x400048F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		public bool BallDestroyOnFloor;

		[Token(Token = "0x4000490")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public BallState ballState;

		[Token(Token = "0x4000491")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		public Rigidbody _rigidbody;

		[Token(Token = "0x4000492")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform _rightTargetPos;

		[Token(Token = "0x4000493")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform _leftTargetPos;

		[Token(Token = "0x4000494")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("拍球是的相关属性：")]
		[Header("拍球时篮球下落速度")]
		[Tooltip("X为地上拍球速度，Y为空中拍球速度")]
		[SerializeField]
		public Vector2 downSpeedV2;

		[Token(Token = "0x4000495")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool _arrivalBack;

		[Token(Token = "0x4000496")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		public bool _arrivalFloor;

		[Token(Token = "0x4000497")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform _downTargetPosition;

		[Token(Token = "0x4000498")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float _downSpeed;

		[Token(Token = "0x4000499")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public bool forceNormalMode;

		[Token(Token = "0x400049A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("双手之间传球的相关属性：")]
		public Transform _changeHandTargetPos;

		[Token(Token = "0x400049B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		public float moveSpeed;

		[Token(Token = "0x400049C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Header("从出生点到手掌的移动速度：")]
		[SerializeField]
		public float arrivalTime;

		[Token(Token = "0x400049D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		[Tooltip("球从生成点到右手的自转速度")]
		[Header("自转速度")]
		public float bornRot;

		[Token(Token = "0x400049E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Transform _ballMesh;

		[Token(Token = "0x400049F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Header("速度值判定：")]
		[SerializeField]
		public float ballSpeed;

		[Token(Token = "0x40004A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		public Transform _lightTransform;

		[Token(Token = "0x40004A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		[Header("地板的Tag:")]
		public string floorTag;

		[Token(Token = "0x40004A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public AudioSource _audioSource;

		[Token(Token = "0x40004A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		public Transform rightNetTransform;

		[Token(Token = "0x40004A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Vector3 _rightNetPos;

		[Token(Token = "0x40004A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		public GameObject expandAreaRight;

		[Token(Token = "0x40004A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public GameObject expandAreaRightBigger;

		[Token(Token = "0x40004A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Vector3 _pitchSpeed;

		[Token(Token = "0x40004A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public Vector3 _normalSpeed;

		[Token(Token = "0x40004A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private float _pitchIntensity;

		[Token(Token = "0x40004AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private float _pitchAngle;

		[Token(Token = "0x40004AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private bool _isCanReachRight;

		[Token(Token = "0x40004AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		public HandType _fromWhichHand;

		[Token(Token = "0x40004AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public Transform _fromHandPos;

		[Token(Token = "0x40004AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		protected BasketBallBornOption BornOption;

		[Token(Token = "0x40004AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		protected bool hasRecordScore;

		[Token(Token = "0x40004B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private float _distance2Net;

		[Token(Token = "0x40004B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private float _heightOffset2Net;

		[Token(Token = "0x40004B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		private Vector3 _tempBallPos;

		[Token(Token = "0x40004B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private Vector3 _changedPitchDir;

		[Token(Token = "0x40004B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private float _ballPitchSpeed;

		[Token(Token = "0x40004B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private bool _targetInRange;

		[Token(Token = "0x40004B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		private float _minAngle;

		[Token(Token = "0x40004B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private float _maxAngle;

		[Token(Token = "0x40004B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private Vector3 _firstPlace;

		[Token(Token = "0x40004B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private float _acceleration;

		[Token(Token = "0x40004BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		private float _distance;

		[Token(Token = "0x40004BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private bool _playerIsMove;

		[Token(Token = "0x40004BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private float _dis;

		[Token(Token = "0x40004BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		protected BallControlReference _ballControlDependency;

		[Token(Token = "0x1700005B")]
		private Transform middlePoint
		{
			[Token(Token = "0x60004CA")]
			[Address(RVA = "0xDC3EF4", Offset = "0xDC3EF4", VA = "0xDC3EF4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005C")]
		protected PlayerController _playerController
		{
			[Token(Token = "0x60004CB")]
			[Address(RVA = "0xDC0DF4", Offset = "0xDC0DF4", VA = "0xDC0DF4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60004A8")]
		[Address(RVA = "0xDC0D48", Offset = "0xDC0D48", VA = "0xDC0D48")]
		public bool getHasRecordScore()
		{
			return default(bool);
		}

		[Token(Token = "0x60004A9")]
		[Address(RVA = "0xDC0D50", Offset = "0xDC0D50", VA = "0xDC0D50")]
		public void UpdateHasRecordScore(bool hasRecordScore)
		{
		}

		[Token(Token = "0x60004AA")]
		[Address(RVA = "0xDC0D5C", Offset = "0xDC0D5C", VA = "0xDC0D5C")]
		public void GetDownPoint(Transform targetPos, HandType whichHand)
		{
		}

		[Token(Token = "0x60004AB")]
		[Address(RVA = "0xDC0E10", Offset = "0xDC0E10", VA = "0xDC0E10")]
		public void PitchActionHandle(Vector3 speed)
		{
		}

		[Token(Token = "0x60004AC")]
		[Address(RVA = "0xDC0E6C", Offset = "0xDC0E6C", VA = "0xDC0E6C")]
		private void EasyMode()
		{
		}

		[Token(Token = "0x60004AD")]
		[Address(RVA = "0xDC1508", Offset = "0xDC1508", VA = "0xDC1508")]
		private void HardMode()
		{
		}

		[Token(Token = "0x60004AE")]
		[Address(RVA = "0xDC1180", Offset = "0xDC1180", VA = "0xDC1180")]
		private void NormalMode()
		{
		}

		[Token(Token = "0x60004AF")]
		[Address(RVA = "0xDC1C08", Offset = "0xDC1C08", VA = "0xDC1C08")]
		public void ProjectileBall(Vector3 netPos)
		{
		}

		[Token(Token = "0x60004B0")]
		[Address(RVA = "0xDC2320", Offset = "0xDC2320", VA = "0xDC2320")]
		public void PlayAudio()
		{
		}

		[Token(Token = "0x60004B1")]
		[Address(RVA = "0xDC233C", Offset = "0xDC233C", VA = "0xDC233C")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60004B2")]
		[Address(RVA = "0xDC2600", Offset = "0xDC2600", VA = "0xDC2600")]
		private void DestroyBall()
		{
		}

		[Token(Token = "0x60004B3")]
		[Address(RVA = "0xDC2704", Offset = "0xDC2704", VA = "0xDC2704")]
		public void Hand2Floor()
		{
		}

		[Token(Token = "0x60004B4")]
		[Address(RVA = "0xDC3404", Offset = "0xDC3404", VA = "0xDC3404")]
		public void ChangeHand()
		{
		}

		[Token(Token = "0x60004B5")]
		[Address(RVA = "0xDC3F10", Offset = "0xDC3F10", VA = "0xDC3F10")]
		public void GetDirection(Transform handPos, HandType whichHand)
		{
		}

		[Token(Token = "0x60004B6")]
		[Address(RVA = "0xDB81C8", Offset = "0xDB81C8", VA = "0xDB81C8")]
		protected void updateLightState()
		{
		}

		[Token(Token = "0x60004B7")]
		[Address(RVA = "0xDBFD80", Offset = "0xDBFD80", VA = "0xDBFD80")]
		public bool LocalLightingActive()
		{
			return default(bool);
		}

		[Token(Token = "0x60004B8")]
		[Address(RVA = "0xDBFD50", Offset = "0xDBFD50", VA = "0xDBFD50")]
		public void SyncRemoteLightingActive(bool active)
		{
		}

		[Token(Token = "0x60004B9")]
		[Address(RVA = "0xDB82C8", Offset = "0xDB82C8", VA = "0xDB82C8")]
		protected void updateBallState()
		{
		}

		[Token(Token = "0x60004BA")]
		[Address(RVA = "0xDBE064", Offset = "0xDBE064", VA = "0xDBE064")]
		public void UpdateStateToBornState(BasketBallBornOption bornOption)
		{
		}

		[Token(Token = "0x60004BB")]
		[Address(RVA = "0xDBE2B4", Offset = "0xDBE2B4", VA = "0xDBE2B4")]
		public void UpdateStateToShotState()
		{
		}

		[Token(Token = "0x60004BC")]
		[Address(RVA = "0xDB83C4", Offset = "0xDB83C4", VA = "0xDB83C4")]
		public void UpdateBallState(BallState ballState)
		{
		}

		[Token(Token = "0x60004BD")]
		[Address(RVA = "0xDC0B18", Offset = "0xDC0B18", VA = "0xDC0B18")]
		public static bool IsCanTransformOwnershipFromIdleBasketBall(BallState ballState)
		{
			return default(bool);
		}

		[Token(Token = "0x60004BE")]
		[Address(RVA = "0xDC0A38", Offset = "0xDC0A38", VA = "0xDC0A38")]
		public static bool IsCanTransformOwnershipToOtherState(BallState ballState)
		{
			return default(bool);
		}

		[Token(Token = "0x60004BF")]
		[Address(RVA = "0xDBFCAC", Offset = "0xDBFCAC", VA = "0xDBFCAC")]
		public static bool IsCanTransformOwnershipFromOtherUserHand(BallState ballState)
		{
			return default(bool);
		}

		[Token(Token = "0x60004C0")]
		[Address(RVA = "0xDC3F1C", Offset = "0xDC3F1C", VA = "0xDC3F1C", Slot = "4")]
		public virtual void disableCollider()
		{
		}

		[Token(Token = "0x60004C1")]
		[Address(RVA = "0xDC1BC0", Offset = "0xDC1BC0", VA = "0xDC1BC0")]
		public void SetBallRigiAndDisableCollider()
		{
		}

		[Token(Token = "0x60004C2")]
		[Address(RVA = "0xDC3F20", Offset = "0xDC3F20", VA = "0xDC3F20", Slot = "5")]
		public virtual GameMode gameMode()
		{
			return default(GameMode);
		}

		[Token(Token = "0x60004C3")]
		[Address(RVA = "0xDC3F28", Offset = "0xDC3F28", VA = "0xDC3F28", Slot = "6")]
		public virtual void retrieveBallOwnerPlayerController()
		{
		}

		[Token(Token = "0x60004C4")]
		[Address(RVA = "0xDB8B1C", Offset = "0xDB8B1C", VA = "0xDB8B1C", Slot = "7")]
		public virtual void InitParameters()
		{
		}

		[Token(Token = "0x60004C5")]
		[Address(RVA = "0xDC3F2C", Offset = "0xDC3F2C", VA = "0xDC3F2C", Slot = "8")]
		public virtual void readLeftRightHandPosition()
		{
		}

		[Token(Token = "0x60004C6")]
		[Address(RVA = "0xDC3F30", Offset = "0xDC3F30", VA = "0xDC3F30", Slot = "9")]
		public virtual void Born2Hand()
		{
		}

		[Token(Token = "0x60004C7")]
		[Address(RVA = "0xDC3F34", Offset = "0xDC3F34", VA = "0xDC3F34", Slot = "10")]
		public virtual void WithHand()
		{
		}

		[Token(Token = "0x60004C8")]
		[Address(RVA = "0xDC3F38", Offset = "0xDC3F38", VA = "0xDC3F38", Slot = "11")]
		public virtual void TwoHand()
		{
		}

		[Token(Token = "0x60004C9")]
		[Address(RVA = "0xDB8B40", Offset = "0xDB8B40", VA = "0xDB8B40", Slot = "12")]
		public virtual void UpdateHand2FloorHandState(HandType fromHandType)
		{
		}

		[Token(Token = "0x60004CC")]
		[Address(RVA = "0xDC3F3C", Offset = "0xDC3F3C", VA = "0xDC3F3C", Slot = "13")]
		public virtual void SetupReference(BallControlReference reference)
		{
		}

		[Token(Token = "0x60004CD")]
		[Address(RVA = "0xDB80C4", Offset = "0xDB80C4", VA = "0xDB80C4")]
		public bool IsMineView()
		{
			return default(bool);
		}

		[Token(Token = "0x60004CE")]
		[Address(RVA = "0xDB9148", Offset = "0xDB9148", VA = "0xDB9148")]
		public BaseBallControl()
		{
		}
	}
	[Token(Token = "0x20000C0")]
	public class BaseBallManager : MonoBehaviour
	{
		[Token(Token = "0x40004BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 _rightControlSpeed;

		[Token(Token = "0x40004BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 _leftControlSpeed;

		[Token(Token = "0x60004CF")]
		[Address(RVA = "0xDC3F4C", Offset = "0xDC3F4C", VA = "0xDC3F4C", Slot = "4")]
		protected virtual Vector3 getRightControllerSpeed()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004D0")]
		[Address(RVA = "0xDC3F90", Offset = "0xDC3F90", VA = "0xDC3F90", Slot = "5")]
		protected virtual Vector3 getLeftControllerSpeed()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60004D1")]
		[Address(RVA = "0xDC3FD4", Offset = "0xDC3FD4", VA = "0xDC3FD4", Slot = "6")]
		protected virtual void InitPlayerController()
		{
		}

		[Token(Token = "0x60004D2")]
		[Address(RVA = "0xDBE88C", Offset = "0xDBE88C", VA = "0xDBE88C")]
		public BaseBallManager()
		{
		}
	}
	[Token(Token = "0x20000C1")]
	public class BasketBall : MonoBehaviour
	{
		[Token(Token = "0x40004C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("篮球物体的父物体")]
		[SerializeField]
		public Transform ballParent;

		[Token(Token = "0x40004C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("篮球物体")]
		[SerializeField]
		public Transform ball;

		[Token(Token = "0x40004C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("球运动的控制脚本")]
		[SerializeField]
		public BallControl ballControl;

		[Token(Token = "0x40004C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[Header("篮球对象")]
		public GameObject ballObject;

		[Token(Token = "0x40004C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("篮球更改皮肤脚本")]
		public ChangeBallTexture changeBallTexture;

		[Token(Token = "0x40004C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[Header("篮球网络同步脚本")]
		public BallNetworkGrabbable ballNetworkGrabbable;

		[Token(Token = "0x40004C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Grabbale 光圈辅助")]
		[SerializeField]
		public GrabableRingParticleHelper grabableRingParticleHelper;

		[Token(Token = "0x60004D3")]
		[Address(RVA = "0xDB9BF4", Offset = "0xDB9BF4", VA = "0xDB9BF4")]
		public bool IsMine()
		{
			return default(bool);
		}

		[Token(Token = "0x60004D4")]
		[Address(RVA = "0xDC3FD8", Offset = "0xDC3FD8", VA = "0xDC3FD8")]
		public Player GetOwnerPlayer()
		{
			return null;
		}

		[Token(Token = "0x60004D5")]
		[Address(RVA = "0xDB9B04", Offset = "0xDB9B04", VA = "0xDB9B04")]
		public static BasketBall GetBasketBall(Collider collider)
		{
			return null;
		}

		[Token(Token = "0x60004D6")]
		[Address(RVA = "0xDBDEFC", Offset = "0xDBDEFC", VA = "0xDBDEFC")]
		public void DisableGrabbableRingHelper()
		{
		}

		[Token(Token = "0x60004D7")]
		[Address(RVA = "0xDC3FF0", Offset = "0xDC3FF0", VA = "0xDC3FF0")]
		public BasketBall()
		{
		}
	}
	[Token(Token = "0x20000C2")]
	public enum BasketBallBornMoveType
	{
		[Token(Token = "0x40004C8")]
		Lerp,
		[Token(Token = "0x40004C9")]
		MoveTowards
	}
	[Token(Token = "0x20000C3")]
	public class BasketBallBornOption
	{
		[Token(Token = "0x40004CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public HandType BallToHandType;

		[Token(Token = "0x40004CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public BasketBallBornMoveType MoveType;

		[Token(Token = "0x60004D8")]
		[Address(RVA = "0xDBE038", Offset = "0xDBE038", VA = "0xDBE038")]
		public BasketBallBornOption(HandType ballToHandType, BasketBallBornMoveType moveType)
		{
		}
	}
	[Token(Token = "0x20000C4")]
	public class DunkBallRingReference
	{
		[Token(Token = "0x40004CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Header("玩家控制器")]
		[SerializeField]
		public PlayerController PlayerController;

		[Token(Token = "0x60004D9")]
		[Address(RVA = "0xDC3FF8", Offset = "0xDC3FF8", VA = "0xDC3FF8")]
		public DunkBallRingReference(PlayerController playerController)
		{
		}
	}
	[Token(Token = "0x20000C5")]
	public class FloorPointManagerXRRigPlayerReference : MonoBehaviour
	{
		[Token(Token = "0x40004CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Transform rightHand;

		[Token(Token = "0x40004CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public Transform leftHand;

		[Token(Token = "0x60004DA")]
		[Address(RVA = "0xDC4028", Offset = "0xDC4028", VA = "0xDC4028")]
		public FloorPointManagerXRRigPlayerReference()
		{
		}
	}
	[Token(Token = "0x20000C6")]
	public enum HandType
	{
		[Token(Token = "0x40004D0")]
		Left,
		[Token(Token = "0x40004D1")]
		Right
	}
	[Token(Token = "0x20000C7")]
	public class LocalScoreManager : MonoBehaviour
	{
		[Token(Token = "0x40004D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public InGameSet inGameSet;

		[Token(Token = "0x40004D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public PracticeScore score;

		[Token(Token = "0x40004D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int syncLocalPlayerScore;

		[Token(Token = "0x40004D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private PlayerController _playerController;

		[Token(Token = "0x60004DB")]
		[Address(RVA = "0xDC4030", Offset = "0xDC4030", VA = "0xDC4030")]
		private void Start()
		{
		}

		[Token(Token = "0x60004DC")]
		[Address(RVA = "0xDC42CC", Offset = "0xDC42CC", VA = "0xDC42CC")]
		private void Update()
		{
		}

		[Token(Token = "0x60004DD")]
		[Address(RVA = "0xDC43C0", Offset = "0xDC43C0", VA = "0xDC43C0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60004DE")]
		[Address(RVA = "0xDC4548", Offset = "0xDC4548", VA = "0xDC4548")]
		private void ShotBallRecordScoreHandle(BasketBall basketBall)
		{
		}

		[Token(Token = "0x60004DF")]
		[Address(RVA = "0xDC478C", Offset = "0xDC478C", VA = "0xDC478C")]
		private void SlamDunkBallRecordScoreHandle(BasketBall basketBall)
		{
		}

		[Token(Token = "0x60004E0")]
		[Address(RVA = "0xDC454C", Offset = "0xDC454C", VA = "0xDC454C")]
		private void RecordScoreHandle(BasketBall basketBall)
		{
		}

		[Token(Token = "0x60004E1")]
		[Address(RVA = "0xDC4790", Offset = "0xDC4790", VA = "0xDC4790")]
		public LocalScoreManager()
		{
		}
	}
	[Token(Token = "0x20000C8")]
	public class NetStandReference : MonoBehaviour
	{
		[Token(Token = "0x40004D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public InGameSet inGameSet;

		[Token(Token = "0x40004D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public Transform rightPlate;

		[Token(Token = "0x40004D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public Transform rightStab;

		[Token(Token = "0x40004D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		public Transform rightTrigger;

		[Token(Token = "0x40004DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		public Transform rightBasketballHoop;

		[Token(Token = "0x40004DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("灌篮触发脚本")]
		[SerializeField]
		public BallRing ballRing;

		[Token(Token = "0x60004E2")]
		[Address(RVA = "0xDC4798", Offset = "0xDC4798", VA = "0xDC4798")]
		public NetStandReference()
		{
		}
	}
	[Token(Token = "0x20000C9")]
	public class NetworkScoreManager : MonoBehaviour
	{
		[Token(Token = "0x40004DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public InGameSet inGameSet;

		[Token(Token = "0x40004DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public Score score;

		[Token(Token = "0x40004DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int syncLocalPlayerScore;

		[Token(Token = "0x40004DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int syncRemotePlayerScore;

		[Token(Token = "0x40004E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private PlayerController _playerController;

		[Token(Token = "0x60004E3")]
		[Address(RVA = "0xDC47A0", Offset = "0xDC47A0", VA = "0xDC47A0")]
		private void Start()
		{
		}

		[Token(Token = "0x60004E4")]
		[Address(RVA = "0xDC4A10", Offset = "0xDC4A10", VA = "0xDC4A10")]
		private void InitPlayerController()
		{
		}

		[Token(Token = "0x60004E5")]
		[Address(RVA = "0xDC4BB4", Offset = "0xDC4BB4", VA = "0xDC4BB4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60004E6")]
		[Address(RVA = "0xDC4D3C", Offset = "0xDC4D3C", VA = "0xDC4D3C")]
		private void Update()
		{
		}

		[Token(Token = "0x60004E7")]
		[Address(RVA = "0xDC4FA4", Offset = "0xDC4FA4", VA = "0xDC4FA4")]
		private int GetLocalPlayerScore()
		{
			return default(int);
		}

		[Token(Token = "0x60004E8")]
		[Address(RVA = "0xDC5024", Offset = "0xDC5024", VA = "0xDC5024")]
		private int GetRemotePlayerScore()
		{
			return default(int);
		}

		[Token(Token = "0x60004E9")]
		[Address(RVA = "0xDC50C8", Offset = "0xDC50C8", VA = "0xDC50C8")]
		private void ShotBallRecordScoreHandle(BasketBall basketBall)
		{
		}

		[Token(Token = "0x60004EA")]
		[Address(RVA = "0xDC53E8", Offset = "0xDC53E8", VA = "0xDC53E8")]
		private void SlamDunkRecordScoreHandle(BasketBall basketBall)
		{
		}

		[Token(Token = "0x60004EB")]
		[Address(RVA = "0xDC50CC", Offset = "0xDC50CC", VA = "0xDC50CC")]
		private void RecordScoreHandle(BasketBall basketBall)
		{
		}

		[Token(Token = "0x60004EC")]
		[Address(RVA = "0xDC53EC", Offset = "0xDC53EC", VA = "0xDC53EC")]
		public NetworkScoreManager()
		{
		}
	}
	[Token(Token = "0x20000CA")]
	public class PausePanelManagerReference : MonoBehaviour
	{
		[Token(Token = "0x40004E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("生成点")]
		[SerializeField]
		public Transform pauseTransform;

		[Token(Token = "0x40004E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("玩家位置")]
		public Transform playerTransform;

		[Token(Token = "0x40004E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("玩家控制器")]
		public PlayerController playerController;

		[Token(Token = "0x40004E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("玩家的位移控制")]
		public SmoothMove smoothMove;

		[Token(Token = "0x60004ED")]
		[Address(RVA = "0xDC53F4", Offset = "0xDC53F4", VA = "0xDC53F4")]
		public PausePanelManagerReference()
		{
		}
	}
	[Token(Token = "0x20000CB")]
	public static class CalculateParabola
	{
		[Token(Token = "0x20000CC")]
		public class Path
		{
			[Token(Token = "0x40004F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3[] points;

			[Token(Token = "0x40004F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3[] slopes;

			[Token(Token = "0x60004F7")]
			[Address(RVA = "0xDC55A8", Offset = "0xDC55A8", VA = "0xDC55A8")]
			public Path(Vector3[] points, Vector3[] slopes)
			{
			}
		}

		[Token(Token = "0x40004E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly float Gravity;

		[Token(Token = "0x40004E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static float _projectileSpeed;

		[Token(Token = "0x40004E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static float _projectileDistance;

		[Token(Token = "0x40004E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static float _iterationSize;

		[Token(Token = "0x40004E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static List<Vector3> _pointList;

		[Token(Token = "0x40004EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static List<Vector3> _slopeList;

		[Token(Token = "0x40004EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static Vector3[] _points;

		[Token(Token = "0x40004EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static Vector3[] _slopes;

		[Token(Token = "0x40004ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static float _vxz;

		[Token(Token = "0x40004EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private static float _vy;

		[Token(Token = "0x40004EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static Vector3 _v;

		[Token(Token = "0x40004F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private static float _xz;

		[Token(Token = "0x40004F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static float _t;

		[Token(Token = "0x40004F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private static float _y;

		[Token(Token = "0x40004F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static Vector3 _newPoint;

		[Token(Token = "0x60004EE")]
		[Address(RVA = "0xDC53FC", Offset = "0xDC53FC", VA = "0xDC53FC")]
		public static float CalculateDistance(float speed, float throwRadianValue)
		{
			return default(float);
		}

		[Token(Token = "0x60004EF")]
		[Address(RVA = "0xDC549C", Offset = "0xDC549C", VA = "0xDC549C")]
		public static float CalculateFlyingTime(float speed, float throwRadianValue)
		{
			return default(float);
		}

		[Token(Token = "0x60004F0")]
		[Address(RVA = "0xDC551C", Offset = "0xDC551C", VA = "0xDC551C")]
		public static float CalculateMaxHeight(float speed, float throwRadianValue)
		{
			return default(float);
		}

		[Token(Token = "0x60004F1")]
		[Address(RVA = "0xDC1550", Offset = "0xDC1550", VA = "0xDC1550")]
		public static Path ProjectilePath(int iterations, float radianValue, Vector3 velocity, Transform startTransform)
		{
			return null;
		}

		[Token(Token = "0x60004F2")]
		[Address(RVA = "0xDC1ACC", Offset = "0xDC1ACC", VA = "0xDC1ACC")]
		public static bool IsHitAtPathUseTransform(Path path, float radius, Transform expandArea)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F3")]
		[Address(RVA = "0xDC55EC", Offset = "0xDC55EC", VA = "0xDC55EC")]
		private static bool IsInside(Vector3 point, Transform expandArea, float radius)
		{
			return default(bool);
		}

		[Token(Token = "0x60004F4")]
		[Address(RVA = "0xDC22BC", Offset = "0xDC22BC", VA = "0xDC22BC")]
		public static float LaunchSpeed(float distance, float yOffset, float gravity, float throwAngle)
		{
			return default(float);
		}

		[Token(Token = "0x60004F5")]
		[Address(RVA = "0xDC213C", Offset = "0xDC213C", VA = "0xDC213C")]
		public static bool LaunchAngle(float speed, float distance, float yOffset, float gravity, out float angle0, out float angle1)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20000CD")]
	public class ChangeBallTexture : MonoBehaviour
	{
		[Token(Token = "0x40004F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Header("篮球材质贴图")]
		private Texture[] textures;

		[Token(Token = "0x40004F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("自定义篮球材质")]
		[SerializeField]
		private Material material;

		[Token(Token = "0x40004F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int BaseColorTex;

		[Token(Token = "0x40004F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Dictionary<string, Texture> textureMap;

		[Token(Token = "0x60004F8")]
		[Address(RVA = "0xDC5798", Offset = "0xDC5798", VA = "0xDC5798")]
		private void Start()
		{
		}

		[Token(Token = "0x60004F9")]
		[Address(RVA = "0xDC579C", Offset = "0xDC579C", VA = "0xDC579C")]
		private void InitTextureMap()
		{
		}

		[Token(Token = "0x60004FA")]
		[Address(RVA = "0xDC588C", Offset = "0xDC588C", VA = "0xDC588C")]
		private void AddInMap(string textureString, int index)
		{
		}

		[Token(Token = "0x60004FB")]
		[Address(RVA = "0xDBDE30", Offset = "0xDBDE30", VA = "0xDBDE30")]
		public void ChangeSKinRandom()
		{
		}

		[Token(Token = "0x60004FC")]
		[Address(RVA = "0xDC06B8", Offset = "0xDC06B8", VA = "0xDC06B8")]
		public int GetRandomIndex()
		{
			return default(int);
		}

		[Token(Token = "0x60004FD")]
		[Address(RVA = "0xDC5968", Offset = "0xDC5968", VA = "0xDC5968")]
		public void ChangeSkinToDefaultSkin()
		{
		}

		[Token(Token = "0x60004FE")]
		[Address(RVA = "0xDC0808", Offset = "0xDC0808", VA = "0xDC0808")]
		public void SetBallTexture(Texture newBallTexture)
		{
		}

		[Token(Token = "0x60004FF")]
		[Address(RVA = "0xDC5BB8", Offset = "0xDC5BB8", VA = "0xDC5BB8")]
		public BallTexture GetBallTextureEnum()
		{
			return default(BallTexture);
		}

		[Token(Token = "0x6000500")]
		[Address(RVA = "0xDC5C80", Offset = "0xDC5C80", VA = "0xDC5C80")]
		public ChangeBallTexture()
		{
		}
	}
	[Token(Token = "0x20000CE")]
	public enum BallTexture
	{
		[Token(Token = "0x40004FB")]
		RedAndBlack,
		[Token(Token = "0x40004FC")]
		RedPurpleWhiteBlack,
		[Token(Token = "0x40004FD")]
		RedPurpleWhiteAndBlackWithLetters,
		[Token(Token = "0x40004FE")]
		IndigoGreenBlack
	}
	[Token(Token = "0x20000CF")]
	public class BallTextureIdentify
	{
		[Token(Token = "0x6000502")]
		[Address(RVA = "0xDC5808", Offset = "0xDC5808", VA = "0xDC5808")]
		public static string GetIdentify(BallTexture ballTexture)
		{
			return null;
		}

		[Token(Token = "0x6000503")]
		[Address(RVA = "0xDC0750", Offset = "0xDC0750", VA = "0xDC0750")]
		public static Texture GetTexture(BallTexture ballTexture, Dictionary<string, Texture> textureMap)
		{
			return null;
		}

		[Token(Token = "0x6000504")]
		[Address(RVA = "0xDC5A50", Offset = "0xDC5A50", VA = "0xDC5A50")]
		public static Texture GetFirstTextureInMap(Dictionary<string, Texture> textureMap)
		{
			return null;
		}

		[Token(Token = "0x6000505")]
		[Address(RVA = "0xDC5D70", Offset = "0xDC5D70", VA = "0xDC5D70")]
		public BallTextureIdentify()
		{
		}
	}
	[Token(Token = "0x20000D0")]
	public class CheckBallInHand : MonoBehaviour
	{
		[Token(Token = "0x40004FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BasketBall ball;

		[Token(Token = "0x6000506")]
		[Address(RVA = "0xDC5D78", Offset = "0xDC5D78", VA = "0xDC5D78")]
		public CheckBallInHand()
		{
		}
	}
	[Token(Token = "0x20000D1")]
	public class Debounce
	{
		[Token(Token = "0x20000D2")]
		[CompilerGenerated]
		private sealed class <DebounceCorountine>d__4 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000502")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000503")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000504")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float time;

			[Token(Token = "0x4000505")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Debounce <>4__this;

			[Token(Token = "0x1700005D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600050E")]
				[Address(RVA = "0xDC5FA0", Offset = "0xDC5FA0", VA = "0xDC5FA0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700005E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000510")]
				[Address(RVA = "0xDC5FE8", Offset = "0xDC5FE8", VA = "0xDC5FE8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600050B")]
			[Address(RVA = "0xDC5EA0", Offset = "0xDC5EA0", VA = "0xDC5EA0")]
			[DebuggerHidden]
			public <DebounceCorountine>d__4(int <>1__state)
			{
			}

			[Token(Token = "0x600050C")]
			[Address(RVA = "0xDC5ED0", Offset = "0xDC5ED0", VA = "0xDC5ED0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600050D")]
			[Address(RVA = "0xDC5ED4", Offset = "0xDC5ED4", VA = "0xDC5ED4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600050F")]
			[Address(RVA = "0xDC5FA8", Offset = "0xDC5FA8", VA = "0xDC5FA8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Action _callback;

		[Token(Token = "0x4000501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Coroutine _corountine;

		[Token(Token = "0x6000507")]
		[Address(RVA = "0xDC5D80", Offset = "0xDC5D80", VA = "0xDC5D80")]
		public void Run(Action callback, float interval, MonoBehaviour mono)
		{
		}

		[Token(Token = "0x6000508")]
		[Address(RVA = "0xDC5DEC", Offset = "0xDC5DEC", VA = "0xDC5DEC")]
		public void ResetTime(MonoBehaviour mono)
		{
		}

		[Token(Token = "0x6000509")]
		[Address(RVA = "0xDC5E1C", Offset = "0xDC5E1C", VA = "0xDC5E1C")]
		[IteratorStateMachine(typeof(<DebounceCorountine>d__4))]
		private IEnumerator DebounceCorountine(float time)
		{
			return null;
		}

		[Token(Token = "0x600050A")]
		[Address(RVA = "0xDC5EC8", Offset = "0xDC5EC8", VA = "0xDC5EC8")]
		public Debounce()
		{
		}
	}
	[Token(Token = "0x20000D3")]
	public class GameReconnectManager : MonoBehaviour, IConnectionCallbacks
	{
		[Token(Token = "0x4000506")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public InGameSet InGameSet;

		[Token(Token = "0x1700005F")]
		private LoadBalancingClient loadBalancingClient
		{
			[Token(Token = "0x6000511")]
			[Address(RVA = "0xDC5FF0", Offset = "0xDC5FF0", VA = "0xDC5FF0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000512")]
		[Address(RVA = "0xDC6048", Offset = "0xDC6048", VA = "0xDC6048")]
		public GameReconnectManager()
		{
		}

		[Token(Token = "0x6000513")]
		[Address(RVA = "0xDC60BC", Offset = "0xDC60BC", VA = "0xDC60BC", Slot = "1")]
		~GameReconnectManager()
		{
		}

		[Token(Token = "0x6000514")]
		[Address(RVA = "0xDC61A4", Offset = "0xDC61A4", VA = "0xDC61A4", Slot = "6")]
		private void Photon.Realtime.IConnectionCallbacks.OnDisconnected(DisconnectCause cause)
		{
		}

		[Token(Token = "0x6000515")]
		[Address(RVA = "0xDC62B8", Offset = "0xDC62B8", VA = "0xDC62B8")]
		private bool CanRecoverFromDisconnect(DisconnectCause cause)
		{
			return default(bool);
		}

		[Token(Token = "0x6000516")]
		[Address(RVA = "0xDC62C8", Offset = "0xDC62C8", VA = "0xDC62C8")]
		private void Recover()
		{
		}

		[Token(Token = "0x6000517")]
		[Address(RVA = "0xDC63C8", Offset = "0xDC63C8", VA = "0xDC63C8")]
		private void BackToMainSceneIfNeeded()
		{
		}

		[Token(Token = "0x6000518")]
		[Address(RVA = "0xDC63F4", Offset = "0xDC63F4", VA = "0xDC63F4", Slot = "4")]
		private void Photon.Realtime.IConnectionCallbacks.OnConnected()
		{
		}

		[Token(Token = "0x6000519")]
		[Address(RVA = "0xDC63F8", Offset = "0xDC63F8", VA = "0xDC63F8", Slot = "5")]
		private void Photon.Realtime.IConnectionCallbacks.OnConnectedToMaster()
		{
		}

		[Token(Token = "0x600051A")]
		[Address(RVA = "0xDC63FC", Offset = "0xDC63FC", VA = "0xDC63FC", Slot = "7")]
		private void Photon.Realtime.IConnectionCallbacks.OnRegionListReceived(RegionHandler regionHandler)
		{
		}

		[Token(Token = "0x600051B")]
		[Address(RVA = "0xDC6400", Offset = "0xDC6400", VA = "0xDC6400")]
		public void OnCustomAuthenticationResponse(Dictionary<string, object> data)
		{
		}

		[Token(Token = "0x600051C")]
		[Address(RVA = "0xDC6404", Offset = "0xDC6404", VA = "0xDC6404", Slot = "8")]
		private void Photon.Realtime.IConnectionCallbacks.OnCustomAuthenticationResponse(Dictionary<string, object> data)
		{
		}

		[Token(Token = "0x600051D")]
		[Address(RVA = "0xDC6408", Offset = "0xDC6408", VA = "0xDC6408", Slot = "9")]
		private void Photon.Realtime.IConnectionCallbacks.OnCustomAuthenticationFailed(string debugMessage)
		{
		}
	}
	[Token(Token = "0x20000D4")]
	public class GrabableRingParticleHelper : GrabbableEvents
	{
		[Token(Token = "0x4000507")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool RingOnValidPickup;

		[Token(Token = "0x600051E")]
		[Address(RVA = "0xDC640C", Offset = "0xDC640C", VA = "0xDC640C")]
		private void Start()
		{
		}

		[Token(Token = "0x600051F")]
		[Address(RVA = "0xDC6678", Offset = "0xDC6678", VA = "0xDC6678")]
		public GrabableRingParticleHelper()
		{
		}
	}
	[Token(Token = "0x20000D5")]
	public class NetAnimationEvent : MonoBehaviour
	{
		[Token(Token = "0x4000508")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private BallRing ballRing;

		[Token(Token = "0x6000520")]
		[Address(RVA = "0xDC6688", Offset = "0xDC6688", VA = "0xDC6688")]
		public void SetActiveWhenNetBack()
		{
		}

		[Token(Token = "0x6000521")]
		[Address(RVA = "0xDC6708", Offset = "0xDC6708", VA = "0xDC6708")]
		public void SetTriggerWhenNetBack()
		{
		}

		[Token(Token = "0x6000522")]
		[Address(RVA = "0xDC6778", Offset = "0xDC6778", VA = "0xDC6778")]
		public NetAnimationEvent()
		{
		}
	}
	[Token(Token = "0x20000D6")]
	public class NetworkNetStand : MonoBehaviour, IPunObservable
	{
		[Token(Token = "0x4000509")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private PhotonView _photonView;

		[Token(Token = "0x400050A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool _syncIsSlamDunkStartState;

		[Token(Token = "0x400050B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private bool _syncIsSlamDunkEndState;

		[Token(Token = "0x400050C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		private bool _isSlamDunkState;

		[Token(Token = "0x400050D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		private bool _syncPlayerWasDunk;

		[Token(Token = "0x400050E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private NetStandReference _netStandReference;

		[Token(Token = "0x6000523")]
		[Address(RVA = "0xDC6780", Offset = "0xDC6780", VA = "0xDC6780")]
		private void Start()
		{
		}

		[Token(Token = "0x6000524")]
		[Address(RVA = "0xDC67D8", Offset = "0xDC67D8", VA = "0xDC67D8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000525")]
		[Address(RVA = "0xDC69A0", Offset = "0xDC69A0", VA = "0xDC69A0", Slot = "4")]
		public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x6000526")]
		[Address(RVA = "0xDC6B98", Offset = "0xDC6B98", VA = "0xDC6B98")]
		public void SetupReference(NetStandReference reference)
		{
		}

		[Token(Token = "0x6000527")]
		[Address(RVA = "0xDC6BA0", Offset = "0xDC6BA0", VA = "0xDC6BA0")]
		public NetworkNetStand()
		{
		}
	}
	[Token(Token = "0x20000D7")]
	public class PlayerJumpShot : MonoBehaviour
	{
		[Token(Token = "0x400050F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BallControl _ballControl;

		[Token(Token = "0x4000510")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Collider _threeScoreCollider;

		[Token(Token = "0x4000511")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PlayerController _playerController;

		[Token(Token = "0x4000512")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly string threePointTag;

		[Token(Token = "0x4000513")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool _playerStartJump;

		[Token(Token = "0x6000528")]
		[Address(RVA = "0xDC6BA8", Offset = "0xDC6BA8", VA = "0xDC6BA8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000529")]
		[Address(RVA = "0xDC6D98", Offset = "0xDC6D98", VA = "0xDC6D98")]
		private void InitPlayerController()
		{
		}

		[Token(Token = "0x600052A")]
		[Address(RVA = "0xDC701C", Offset = "0xDC701C", VA = "0xDC701C")]
		private void Update()
		{
		}

		[Token(Token = "0x600052B")]
		[Address(RVA = "0xDC71F8", Offset = "0xDC71F8", VA = "0xDC71F8")]
		public PlayerJumpShot()
		{
		}
	}
	[Token(Token = "0x20000D8")]
	public enum PlayerShotBallState
	{
		[Token(Token = "0x4000515")]
		Normal,
		[Token(Token = "0x4000516")]
		JumpInLine,
		[Token(Token = "0x4000517")]
		JumpOutLine
	}
	[Token(Token = "0x20000D9")]
	public class PointManager : MonoBehaviour
	{
		[Token(Token = "0x4000518")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Transform rightVerticalPoint;

		[Token(Token = "0x4000519")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public Transform leftVerticalPoint;

		[Token(Token = "0x400051A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public Transform middlePoint;

		[Token(Token = "0x400051B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Transform rightHand;

		[Token(Token = "0x400051C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Transform leftHand;

		[Token(Token = "0x400051D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[Tooltip("太低的话篮球会穿模，太高的话篮球接触不到地面,需要根据篮球的大小具体调整")]
		[Header("篮球落地点的高度")]
		private float pointHeight;

		[Token(Token = "0x600052D")]
		[Address(RVA = "0xDC726C", Offset = "0xDC726C", VA = "0xDC726C")]
		private void Update()
		{
		}

		[Token(Token = "0x600052E")]
		[Address(RVA = "0xDC7398", Offset = "0xDC7398", VA = "0xDC7398")]
		public void SetupReference(FloorPointManagerXRRigPlayerReference reference)
		{
		}

		[Token(Token = "0x600052F")]
		[Address(RVA = "0xDC73D4", Offset = "0xDC73D4", VA = "0xDC73D4")]
		public PointManager()
		{
		}
	}
	[Token(Token = "0x20000DA")]
	public class RingParticleHelper : MonoBehaviour
	{
		[Token(Token = "0x400051E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Grabbable Object to Observe")]
		public Grabbable grabbable;

		[Token(Token = "0x400051F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Don't show grab rings if left and right controllers / grabbers are  holding something")]
		public bool HideIfHandsAreFull;

		[Token(Token = "0x4000520")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Grabber leftGrabber;

		[Token(Token = "0x4000521")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Grabber rightGrabber;

		[Token(Token = "0x4000522")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Grabber closestGrabber;

		[Token(Token = "0x4000523")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool handsFull;

		[Token(Token = "0x4000524")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform mainCam;

		[Token(Token = "0x4000525")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float _initalOpacity;

		[Token(Token = "0x4000526")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float _currentOpacity;

		[Token(Token = "0x4000527")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public GameObject ringParticle;

		[Token(Token = "0x4000528")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public GameObject ringSelectedParticle;

		[Token(Token = "0x4000529")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public GameObject ringSecondarySelectedParticle;

		[Token(Token = "0x400052A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private BallControl _ballControl;

		[Token(Token = "0x6000530")]
		[Address(RVA = "0xDC73E8", Offset = "0xDC73E8", VA = "0xDC73E8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000531")]
		[Address(RVA = "0xDC7564", Offset = "0xDC7564", VA = "0xDC7564")]
		private void InitParticle()
		{
		}

		[Token(Token = "0x6000532")]
		[Address(RVA = "0xDC76D8", Offset = "0xDC76D8", VA = "0xDC76D8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000533")]
		[Address(RVA = "0xDC7CCC", Offset = "0xDC7CCC", VA = "0xDC7CCC", Slot = "4")]
		public virtual void AssignCamera()
		{
		}

		[Token(Token = "0x6000534")]
		[Address(RVA = "0xDC7DC0", Offset = "0xDC7DC0", VA = "0xDC7DC0", Slot = "5")]
		public virtual void AssignGrabbers()
		{
		}

		[Token(Token = "0x6000535")]
		[Address(RVA = "0xDC7BE4", Offset = "0xDC7BE4", VA = "0xDC7BE4")]
		private GameObject GetSeletedParticle()
		{
			return null;
		}

		[Token(Token = "0x6000536")]
		[Address(RVA = "0xDC7618", Offset = "0xDC7618", VA = "0xDC7618")]
		private bool ParticlesNotNull()
		{
			return default(bool);
		}

		[Token(Token = "0x6000537")]
		[Address(RVA = "0xDC7B98", Offset = "0xDC7B98", VA = "0xDC7B98")]
		private void CloseAllLightEff()
		{
		}

		[Token(Token = "0x6000538")]
		[Address(RVA = "0xDC7F10", Offset = "0xDC7F10", VA = "0xDC7F10")]
		public RingParticleHelper()
		{
		}
	}
	[Token(Token = "0x20000DB")]
	public class RotateVector : MonoBehaviour
	{
		[Token(Token = "0x400052B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float startY;

		[Token(Token = "0x400052C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float rotationAngle;

		[Token(Token = "0x400052D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float currentY;

		[Token(Token = "0x6000539")]
		[Address(RVA = "0xDC7F20", Offset = "0xDC7F20", VA = "0xDC7F20")]
		private void Start()
		{
		}

		[Token(Token = "0x600053A")]
		[Address(RVA = "0xDC7F68", Offset = "0xDC7F68", VA = "0xDC7F68")]
		private void Update()
		{
		}

		[Token(Token = "0x600053B")]
		[Address(RVA = "0xDC7FD4", Offset = "0xDC7FD4", VA = "0xDC7FD4")]
		public RotateVector()
		{
		}
	}
	[Token(Token = "0x20000DC")]
	public class RtcManager : MonoBehaviour
	{
		[Token(Token = "0x400052E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public InGameSet InGameSet;

		[Token(Token = "0x400052F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool _rtcInitializeSuccess;

		[Token(Token = "0x4000530")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string roomId;

		[Token(Token = "0x600053C")]
		[Address(RVA = "0xDC7FDC", Offset = "0xDC7FDC", VA = "0xDC7FDC")]
		private void Start()
		{
		}

		[Token(Token = "0x600053D")]
		[Address(RVA = "0xDC83F8", Offset = "0xDC83F8", VA = "0xDC83F8")]
		private void SetupCallbacks()
		{
		}

		[Token(Token = "0x600053E")]
		[Address(RVA = "0xDC7FFC", Offset = "0xDC7FFC", VA = "0xDC7FFC")]
		private void InitRtc()
		{
		}

		[Token(Token = "0x600053F")]
		[Address(RVA = "0xDC893C", Offset = "0xDC893C", VA = "0xDC893C")]
		private string GetRoomId()
		{
			return null;
		}

		[Token(Token = "0x6000540")]
		[Address(RVA = "0xDC8170", Offset = "0xDC8170", VA = "0xDC8170")]
		private void JoinRoom()
		{
		}

		[Token(Token = "0x6000541")]
		[Address(RVA = "0xDC89A4", Offset = "0xDC89A4", VA = "0xDC89A4")]
		private void OnJoinRoom(Message<RtcJoinRoomResult> msg)
		{
		}

		[Token(Token = "0x6000542")]
		[Address(RVA = "0xDC8C68", Offset = "0xDC8C68", VA = "0xDC8C68")]
		private void OnLeaveRoom(Message<RtcLeaveRoomResult> msg)
		{
		}

		[Token(Token = "0x6000543")]
		[Address(RVA = "0xDC8DA4", Offset = "0xDC8DA4", VA = "0xDC8DA4")]
		private void OnUserLeaveRoom(Message<RtcUserLeaveInfo> msg)
		{
		}

		[Token(Token = "0x6000544")]
		[Address(RVA = "0xDC8E80", Offset = "0xDC8E80", VA = "0xDC8E80")]
		private void OnUserJoinRoom(Message<RtcUserJoinInfo> msg)
		{
		}

		[Token(Token = "0x6000545")]
		[Address(RVA = "0xDC905C", Offset = "0xDC905C", VA = "0xDC905C")]
		private void OnRoomStats(Message<RtcRoomStats> msg)
		{
		}

		[Token(Token = "0x6000546")]
		[Address(RVA = "0xDC9154", Offset = "0xDC9154", VA = "0xDC9154")]
		private void OnWarn(Message<int> message)
		{
		}

		[Token(Token = "0x6000547")]
		[Address(RVA = "0xDC9210", Offset = "0xDC9210", VA = "0xDC9210")]
		private void OnError(Message<int> message)
		{
		}

		[Token(Token = "0x6000548")]
		[Address(RVA = "0xDC92CC", Offset = "0xDC92CC", VA = "0xDC92CC")]
		private void OnRoomWarn(Message<RtcRoomWarn> message)
		{
		}

		[Token(Token = "0x6000549")]
		[Address(RVA = "0xDC93A0", Offset = "0xDC93A0", VA = "0xDC93A0")]
		private void OnRoomError(Message<RtcRoomError> message)
		{
		}

		[Token(Token = "0x600054A")]
		[Address(RVA = "0xDC9474", Offset = "0xDC9474", VA = "0xDC9474")]
		private void OnConnectionStateChange(Message<RtcConnectionState> message)
		{
		}

		[Token(Token = "0x600054B")]
		[Address(RVA = "0xDC8B08", Offset = "0xDC8B08", VA = "0xDC8B08")]
		private void PublishRoom()
		{
		}

		[Token(Token = "0x600054C")]
		[Address(RVA = "0xDC9530", Offset = "0xDC9530", VA = "0xDC9530")]
		private void OnUserPublishStream(Message<RtcUserPublishInfo> message)
		{
		}

		[Token(Token = "0x600054D")]
		[Address(RVA = "0xDC960C", Offset = "0xDC960C", VA = "0xDC960C")]
		private void OnUserUnPublishStream(Message<RtcUserUnPublishInfo> message)
		{
		}

		[Token(Token = "0x600054E")]
		[Address(RVA = "0xDC9810", Offset = "0xDC9810", VA = "0xDC9810")]
		private void OnUserStartAudioCapture(Message<string> message)
		{
		}

		[Token(Token = "0x600054F")]
		[Address(RVA = "0xDC989C", Offset = "0xDC989C", VA = "0xDC989C")]
		private void OnUserStopAudioCapture(Message<string> message)
		{
		}

		[Token(Token = "0x6000550")]
		[Address(RVA = "0xDC9928", Offset = "0xDC9928", VA = "0xDC9928")]
		private void OnLocalAudioPropertiesReport(Message<RtcLocalAudioPropertiesReport> message)
		{
		}

		[Token(Token = "0x6000551")]
		[Address(RVA = "0xDC9AB0", Offset = "0xDC9AB0", VA = "0xDC9AB0")]
		private void OnRemoteAudioPropertiesReport(Message<RtcRemoteAudioPropertiesReport> message)
		{
		}

		[Token(Token = "0x6000552")]
		[Address(RVA = "0xDC8BD8", Offset = "0xDC8BD8", VA = "0xDC8BD8")]
		private void StartAudioCapture()
		{
		}

		[Token(Token = "0x6000553")]
		[Address(RVA = "0xDC9CD8", Offset = "0xDC9CD8", VA = "0xDC9CD8")]
		private void LeaveRoom()
		{
		}

		[Token(Token = "0x6000554")]
		[Address(RVA = "0xDC9E38", Offset = "0xDC9E38", VA = "0xDC9E38")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000555")]
		[Address(RVA = "0xDC9E3C", Offset = "0xDC9E3C", VA = "0xDC9E3C")]
		public RtcManager()
		{
		}
	}
	[Token(Token = "0x20000DE")]
	public class Tracker
	{
		[Token(Token = "0x20000DF")]
		public class Event
		{
			[Token(Token = "0x4000538")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static string ClickGuideTrain;

			[Token(Token = "0x4000539")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public static string ClickGuideQuickJoin;

			[Token(Token = "0x400053A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public static string ClickGuideTutorial;

			[Token(Token = "0x400053B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public static string ClickGuideQuit;

			[Token(Token = "0x400053C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public static string ClickGuideSetting;

			[Token(Token = "0x400053D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public static string ClickSettingLevel;

			[Token(Token = "0x400053E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public static string ClickSettingClose;

			[Token(Token = "0x400053F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public static string ClickSettingBottomClose;

			[Token(Token = "0x4000540")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public static string ClickSettingRestart;

			[Token(Token = "0x4000541")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public static string ClickSettingQuit;

			[Token(Token = "0x4000542")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public static string ClickSettingVolume;

			[Token(Token = "0x4000543")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public static string ClickSettingSpeed;

			[Token(Token = "0x4000544")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public static string ClickSettingLanguage;

			[Token(Token = "0x4000545")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public static string EventConnectMasterSuccess;

			[Token(Token = "0x4000546")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public static string EventConnectMasterFail;

			[Token(Token = "0x4000547")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public static string EventMatchSuccess;

			[Token(Token = "0x4000548")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public static string EventJoinRoomSuccess;

			[Token(Token = "0x4000549")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			public static string EventJoinRoomFail;

			[Token(Token = "0x400054A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public static string EventCreateRoomSuccess;

			[Token(Token = "0x400054B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			public static string EventCreateRoomFail;

			[Token(Token = "0x400054C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			public static string EventTrainShootSuccess;

			[Token(Token = "0x400054D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			public static string EventGameShootSuccess;

			[Token(Token = "0x400054E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			public static string EventTutorialTaskShootSuccess;

			[Token(Token = "0x400054F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			public static string EventUnKnowShootSuccess;

			[Token(Token = "0x4000550")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			public static string ClickTrainDribble;

			[Token(Token = "0x4000551")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			public static string ClickTrainPreShoot;

			[Token(Token = "0x4000552")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			public static string ClickTrainCrossDribble;

			[Token(Token = "0x4000553")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			public static string ClickTrainShoot;

			[Token(Token = "0x4000554")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			public static string ClickTrainDunk;

			[Token(Token = "0x4000555")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			public static string ClickTrainJump;

			[Token(Token = "0x4000556")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			public static string ClickTrainGenerate;

			[Token(Token = "0x4000557")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			public static string ClickGameDribble;

			[Token(Token = "0x4000558")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
			public static string ClickGameShoot;

			[Token(Token = "0x4000559")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			public static string ClickGamePreShoot;

			[Token(Token = "0x400055A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
			public static string ClickGameCrossDribble;

			[Token(Token = "0x400055B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
			public static string ClickGameDunk;

			[Token(Token = "0x400055C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
			public static string ClickGameJump;

			[Token(Token = "0x400055D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
			public static string ClickGameSnatch;

			[Token(Token = "0x400055E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
			public static string ClickTutorialTaskDribble;

			[Token(Token = "0x400055F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
			public static string ClickTutorialTaskCrossDribble;

			[Token(Token = "0x4000560")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
			public static string ClickTutorialTaskShoot;

			[Token(Token = "0x4000561")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
			public static string ClickTutorialTaskDunk;

			[Token(Token = "0x4000562")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
			public static string ClickTutorialTaskJump;

			[Token(Token = "0x4000563")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
			public static string ClickTutorialTaskGenerate;

			[Token(Token = "0x4000564")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
			public static string ClickTutorialTaskWalk;

			[Token(Token = "0x4000565")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
			public static string ClickTutorialTaskRun;

			[Token(Token = "0x4000566")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
			public static string ClickUnKnowDribble;

			[Token(Token = "0x4000567")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
			public static string ClickUnKnowPreShoot;

			[Token(Token = "0x4000568")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
			public static string ClickUnKnowShoot;

			[Token(Token = "0x4000569")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
			public static string ClickUnKnowCrossDribble;

			[Token(Token = "0x400056A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
			public static string ClickUnKnowDunk;

			[Token(Token = "0x400056B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
			public static string ClickUnKnowJump;

			[Token(Token = "0x400056C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
			public static string ClickUnKnowGenerate;

			[Token(Token = "0x400056D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
			public static string ClickUnKnowSnatch;

			[Token(Token = "0x6000564")]
			[Address(RVA = "0xDCB408", Offset = "0xDCB408", VA = "0xDCB408")]
			public Event()
			{
			}
		}

		[Token(Token = "0x4000535")]
		private const string GameScene = "Game";

		[Token(Token = "0x4000536")]
		private const string TrainScene = "PracticeScene";

		[Token(Token = "0x4000537")]
		private const string TutorialScene = "TutorialScene";

		[Token(Token = "0x6000558")]
		[Address(RVA = "0xDC9FEC", Offset = "0xDC9FEC", VA = "0xDC9FEC")]
		public static void LogEvent(string evt, IDictionary<string, object> properties)
		{
		}

		[Token(Token = "0x6000559")]
		[Address(RVA = "0xDCA064", Offset = "0xDCA064", VA = "0xDCA064")]
		public static void LogEvent(string evt)
		{
		}

		[Token(Token = "0x600055A")]
		[Address(RVA = "0xDBE548", Offset = "0xDBE548", VA = "0xDBE548")]
		public static void Dribble(Scene scene)
		{
		}

		[Token(Token = "0x600055B")]
		[Address(RVA = "0xDBE1C0", Offset = "0xDBE1C0", VA = "0xDBE1C0")]
		public static void PreShoot(Scene scene)
		{
		}

		[Token(Token = "0x600055C")]
		[Address(RVA = "0xDBE2C0", Offset = "0xDBE2C0", VA = "0xDBE2C0")]
		public static void Shot(Scene scene)
		{
		}

		[Token(Token = "0x600055D")]
		[Address(RVA = "0xDCA0CC", Offset = "0xDCA0CC", VA = "0xDCA0CC")]
		public static void Dunk(Scene scene)
		{
		}

		[Token(Token = "0x600055E")]
		[Address(RVA = "0xDB9C0C", Offset = "0xDB9C0C", VA = "0xDB9C0C")]
		public static void ShootSuccess(Scene scene, ShotState shotState)
		{
		}

		[Token(Token = "0x600055F")]
		[Address(RVA = "0xDBE404", Offset = "0xDBE404", VA = "0xDBE404")]
		public static void CrossDribble(Scene scene)
		{
		}

		[Token(Token = "0x6000560")]
		[Address(RVA = "0xDCA210", Offset = "0xDCA210", VA = "0xDCA210")]
		public static void Jump(Scene scene)
		{
		}

		[Token(Token = "0x6000561")]
		[Address(RVA = "0xDBDA48", Offset = "0xDBDA48", VA = "0xDBDA48")]
		public static void GenerateBall(Scene scene)
		{
		}

		[Token(Token = "0x6000562")]
		[Address(RVA = "0xDCA354", Offset = "0xDCA354", VA = "0xDCA354")]
		public static void SnatchBall(Scene scene)
		{
		}

		[Token(Token = "0x6000563")]
		[Address(RVA = "0xDCA400", Offset = "0xDCA400", VA = "0xDCA400")]
		public Tracker()
		{
		}
	}
	[Token(Token = "0x20000E0")]
	public enum ShotState
	{
		[Token(Token = "0x400056F")]
		Dunk,
		[Token(Token = "0x4000570")]
		Shoot
	}
	[Token(Token = "0x20000E1")]
	public class CarManager : MonoBehaviour
	{
		[Token(Token = "0x4000571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private InGameSet inGameSet;

		[Token(Token = "0x4000572")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private List<GameObject> line01Cars;

		[Token(Token = "0x4000573")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private List<GameObject> line02Cars;

		[Token(Token = "0x4000574")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 _line01StartAngle;

		[Token(Token = "0x4000575")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform _line01Start;

		[Token(Token = "0x4000576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform _line01Target;

		[Token(Token = "0x4000577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 _line02StartAngle;

		[Token(Token = "0x4000578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform _line02Start;

		[Token(Token = "0x4000579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform _line02Target;

		[Token(Token = "0x400057A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3 _line01StartPos;

		[Token(Token = "0x400057B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector3 _line01TargetPos;

		[Token(Token = "0x400057C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 _line02StartPos;

		[Token(Token = "0x400057D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Vector3 _line02TargetPos;

		[Token(Token = "0x400057E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float _line01Height;

		[Token(Token = "0x400057F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private float _line02Height;

		[Token(Token = "0x4000580")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Transform _carsParent;

		[Token(Token = "0x4000581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private int _carIndex;

		[Token(Token = "0x6000566")]
		[Address(RVA = "0xDCBD3C", Offset = "0xDCBD3C", VA = "0xDCBD3C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000567")]
		[Address(RVA = "0xDCC87C", Offset = "0xDCC87C", VA = "0xDCC87C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000568")]
		[Address(RVA = "0xDCCA48", Offset = "0xDCCA48", VA = "0xDCCA48")]
		private void Line01NextCarHandle()
		{
		}

		[Token(Token = "0x6000569")]
		[Address(RVA = "0xDCCBD4", Offset = "0xDCCBD4", VA = "0xDCCBD4")]
		private void Line02NextCarHandle()
		{
		}

		[Token(Token = "0x600056A")]
		[Address(RVA = "0xDCCD60", Offset = "0xDCCD60", VA = "0xDCCD60")]
		public CarManager()
		{
		}
	}
	[Token(Token = "0x20000E2")]
	public class CarProperty : MonoBehaviour
	{
		[Token(Token = "0x20000E3")]
		[CompilerGenerated]
		private sealed class <CallNextCar>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400058D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400058E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400058F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CarProperty <>4__this;

			[Token(Token = "0x17000060")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000573")]
				[Address(RVA = "0xDCD894", Offset = "0xDCD894", VA = "0xDCD894", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000061")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000575")]
				[Address(RVA = "0xDCD8DC", Offset = "0xDCD8DC", VA = "0xDCD8DC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000570")]
			[Address(RVA = "0xDCD76C", Offset = "0xDCD76C", VA = "0xDCD76C")]
			[DebuggerHidden]
			public <CallNextCar>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6000571")]
			[Address(RVA = "0xDCD7A8", Offset = "0xDCD7A8", VA = "0xDCD7A8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000572")]
			[Address(RVA = "0xDCD7AC", Offset = "0xDCD7AC", VA = "0xDCD7AC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000574")]
			[Address(RVA = "0xDCD89C", Offset = "0xDCD89C", VA = "0xDCD89C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private InGameSet inGameSet;

		[Token(Token = "0x4000583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private int lineIndex;

		[Token(Token = "0x4000584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float _carHeight;

		[Token(Token = "0x4000585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int _childCount;

		[Token(Token = "0x4000586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private List<Transform> wheels;

		[Token(Token = "0x4000587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private float carSpeed;

		[Token(Token = "0x4000588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 start;

		[Token(Token = "0x4000589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 end;

		[Token(Token = "0x400058A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int _callTime;

		[Token(Token = "0x400058B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform _carManager;

		[Token(Token = "0x400058C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool startMove;

		[Token(Token = "0x600056B")]
		[Address(RVA = "0xDCCD68", Offset = "0xDCCD68", VA = "0xDCCD68")]
		private void Start()
		{
		}

		[Token(Token = "0x600056C")]
		[Address(RVA = "0xDCCEE4", Offset = "0xDCCEE4", VA = "0xDCCEE4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600056D")]
		[Address(RVA = "0xDCCF90", Offset = "0xDCCF90", VA = "0xDCCF90")]
		private void Update()
		{
		}

		[Token(Token = "0x600056E")]
		[Address(RVA = "0xDCCF1C", Offset = "0xDCCF1C", VA = "0xDCCF1C")]
		[IteratorStateMachine(typeof(<CallNextCar>d__14))]
		private IEnumerator CallNextCar()
		{
			return null;
		}

		[Token(Token = "0x600056F")]
		[Address(RVA = "0xDCD794", Offset = "0xDCD794", VA = "0xDCD794")]
		public CarProperty()
		{
		}
	}
	[Token(Token = "0x20000E4")]
	public class ObjectPool
	{
		[Token(Token = "0x4000590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<int, List<GameObject>> _multiObjects;

		[Token(Token = "0x4000591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Dictionary<int, List<GameObject>> _multiObjects02;

		[Token(Token = "0x4000592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Dictionary<int, List<GameObject>> _peopleObjects;

		[Token(Token = "0x4000593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static ObjectPool _singleton;

		[Token(Token = "0x6000576")]
		[Address(RVA = "0xDCC198", Offset = "0xDCC198", VA = "0xDCC198")]
		public static ObjectPool GetInstance()
		{
			return null;
		}

		[Token(Token = "0x6000577")]
		[Address(RVA = "0xDCC9F4", Offset = "0xDCC9F4", VA = "0xDCC9F4")]
		public void InitPool()
		{
		}

		[Token(Token = "0x6000578")]
		[Address(RVA = "0xDCD8E4", Offset = "0xDCD8E4", VA = "0xDCD8E4")]
		public ObjectPool()
		{
		}

		[Token(Token = "0x6000579")]
		[Address(RVA = "0xDCC224", Offset = "0xDCC224", VA = "0xDCC224")]
		public GameObject SpawnMultiObjects(GameObject gameObject, Vector3 startPos, Vector3 endPos, Vector3 angles, Transform parent)
		{
			return null;
		}

		[Token(Token = "0x600057A")]
		[Address(RVA = "0xDCC550", Offset = "0xDCC550", VA = "0xDCC550")]
		public GameObject SpawnMultiObjects02(GameObject gameObject, Vector3 startPos, Vector3 endPos, Vector3 angles, Transform parent)
		{
			return null;
		}

		[Token(Token = "0x600057B")]
		[Address(RVA = "0xDCD9C4", Offset = "0xDCD9C4", VA = "0xDCD9C4")]
		public GameObject SpawnWalkPeople(GameObject gameObject, Vector3 startPos, Vector3 endPos, Vector3 angles, Transform parent)
		{
			return null;
		}

		[Token(Token = "0x600057C")]
		[Address(RVA = "0xDCDCF0", Offset = "0xDCDCF0", VA = "0xDCDCF0")]
		public void HidePeople(GameObject gameObject, Vector3 startPos)
		{
		}

		[Token(Token = "0x600057D")]
		[Address(RVA = "0xDCD384", Offset = "0xDCD384", VA = "0xDCD384")]
		public void HideObjects(GameObject gameObject, Vector3 startPos)
		{
		}

		[Token(Token = "0x600057E")]
		[Address(RVA = "0xDCD578", Offset = "0xDCD578", VA = "0xDCD578")]
		public void HideObjects02(GameObject gameObject, Vector3 startPos)
		{
		}
	}
	[Token(Token = "0x20000E5")]
	public class ControllerHighlight : MonoBehaviour
	{
		[Token(Token = "0x4000594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private InGameSet inGameSet;

		[Token(Token = "0x4000595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private ControllerManager cm;

		[Token(Token = "0x4000596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Material highlightMat;

		[Token(Token = "0x4000597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Material neo3IdleMat;

		[Token(Token = "0x4000598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private MeshRenderer _neo3LeftGripMat;

		[Token(Token = "0x4000599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private MeshRenderer _neo3RightGripMat;

		[Token(Token = "0x400059A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private MeshRenderer _neo3LeftTrgMat;

		[Token(Token = "0x400059B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private MeshRenderer _neo3RightTrgMat;

		[Token(Token = "0x400059C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private MeshRenderer _neo3LeftAxisMat;

		[Token(Token = "0x400059D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private MeshRenderer _neo3RightAxisMat;

		[Token(Token = "0x400059E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private MeshRenderer _neo3LeftXMat;

		[Token(Token = "0x400059F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private MeshRenderer _neo3LeftYMat;

		[Token(Token = "0x40005A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private MeshRenderer _neo3LeftPauseMat;

		[Token(Token = "0x40005A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private MeshRenderer _neo3RightAMat;

		[Token(Token = "0x40005A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private MeshRenderer _neo3RightBMat;

		[Token(Token = "0x40005A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private Material pico4IdleMat;

		[Token(Token = "0x40005A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private MeshRenderer _pico4LeftGripMat;

		[Token(Token = "0x40005A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private MeshRenderer _pico4RightGripMat;

		[Token(Token = "0x40005A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private MeshRenderer _pico4LeftTrgMat;

		[Token(Token = "0x40005A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private MeshRenderer _pico4RightTrgMat;

		[Token(Token = "0x40005A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private MeshRenderer _pico4LeftAxisMat;

		[Token(Token = "0x40005A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private MeshRenderer _pico4RightAxisMat;

		[Token(Token = "0x40005AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private MeshRenderer _pico4LeftXMat;

		[Token(Token = "0x40005AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private MeshRenderer _pico4LeftYMat;

		[Token(Token = "0x40005AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private MeshRenderer _pico4LeftPauseMat;

		[Token(Token = "0x40005AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private MeshRenderer _pico4RightAMat;

		[Token(Token = "0x40005AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private MeshRenderer _pico4RightBMat;

		[Token(Token = "0x600057F")]
		[Address(RVA = "0xDCDEE4", Offset = "0xDCDEE4", VA = "0xDCDEE4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000580")]
		[Address(RVA = "0xDCE108", Offset = "0xDCE108", VA = "0xDCE108")]
		private void Update()
		{
		}

		[Token(Token = "0x6000581")]
		[Address(RVA = "0xDCE1B8", Offset = "0xDCE1B8", VA = "0xDCE1B8")]
		private void SetControllerMat()
		{
		}

		[Token(Token = "0x6000582")]
		[Address(RVA = "0xDCE538", Offset = "0xDCE538", VA = "0xDCE538")]
		private void DefaultMat()
		{
		}

		[Token(Token = "0x6000583")]
		[Address(RVA = "0xDCE6E8", Offset = "0xDCE6E8", VA = "0xDCE6E8")]
		private void ChangeMat(int highlight)
		{
		}

		[Token(Token = "0x6000584")]
		[Address(RVA = "0xDCE8F0", Offset = "0xDCE8F0", VA = "0xDCE8F0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000585")]
		[Address(RVA = "0xDCEB14", Offset = "0xDCEB14", VA = "0xDCEB14")]
		public ControllerHighlight()
		{
		}
	}
	[Token(Token = "0x20000E6")]
	public class InBallManager : MonoBehaviour
	{
		[Token(Token = "0x40005AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private InGameSet inGameSet;

		[Token(Token = "0x40005B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform rightPlate;

		[Token(Token = "0x40005B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform rightStab;

		[Token(Token = "0x40005B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Transform rightTrigger;

		[Token(Token = "0x40005B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform rightBasketballHoop;

		[Token(Token = "0x40005B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform _remoteNet;

		[Token(Token = "0x40005B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform _dunkNet;

		[Token(Token = "0x40005B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GameObject _remoteVFX;

		[Token(Token = "0x40005B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GameObject _dunkVFX;

		[Token(Token = "0x40005B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ParticleSystem _dunkPS;

		[Token(Token = "0x40005B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private ParticleSystem _remotePS01;

		[Token(Token = "0x40005BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private ParticleSystem _remotePS02;

		[Token(Token = "0x40005BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Animator _rightNetAnimator;

		[Token(Token = "0x40005BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Animator _remoteNetAnimator;

		[Token(Token = "0x40005BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Animator _dunkNetAnimator;

		[Token(Token = "0x40005BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int InBall;

		[Token(Token = "0x40005BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly int DirectBallOut;

		[Token(Token = "0x40005C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int DunkBallIn;

		[Token(Token = "0x40005C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static readonly int DunkBallOut;

		[Token(Token = "0x40005C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Animator _rightPlateAnimator;

		[Token(Token = "0x40005C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Animator _rightStabAnimator;

		[Token(Token = "0x40005C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Animator _rightTriggerAnimator;

		[Token(Token = "0x40005C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private AudioSource _shootSound;

		[Token(Token = "0x40005C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool _whichNet;

		[Token(Token = "0x6000586")]
		[Address(RVA = "0xDCEB1C", Offset = "0xDCEB1C", VA = "0xDCEB1C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000587")]
		[Address(RVA = "0xDCF090", Offset = "0xDCF090", VA = "0xDCF090")]
		private void InitShootSoundAudioSource()
		{
		}

		[Token(Token = "0x6000588")]
		[Address(RVA = "0xDCF180", Offset = "0xDCF180", VA = "0xDCF180")]
		private void PlayShootSound()
		{
		}

		[Token(Token = "0x6000589")]
		[Address(RVA = "0xDCF204", Offset = "0xDCF204", VA = "0xDCF204")]
		private void DelayPlayShootSound()
		{
		}

		[Token(Token = "0x600058A")]
		[Address(RVA = "0xDCF258", Offset = "0xDCF258", VA = "0xDCF258")]
		private void BallInAnimationHandle(BasketBall basketBall)
		{
		}

		[Token(Token = "0x600058B")]
		[Address(RVA = "0xDCF328", Offset = "0xDCF328", VA = "0xDCF328")]
		private void InSlamDunkNetStandAnimationHandle()
		{
		}

		[Token(Token = "0x600058C")]
		[Address(RVA = "0xDCF440", Offset = "0xDCF440", VA = "0xDCF440")]
		private void OutSlamDunkNetStandAnimationHandle()
		{
		}

		[Token(Token = "0x600058D")]
		[Address(RVA = "0xDCF548", Offset = "0xDCF548", VA = "0xDCF548")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600058E")]
		[Address(RVA = "0xDCF7EC", Offset = "0xDCF7EC", VA = "0xDCF7EC")]
		public void SetupReference(NetStandReference reference)
		{
		}

		[Token(Token = "0x600058F")]
		[Address(RVA = "0xDCF858", Offset = "0xDCF858", VA = "0xDCF858")]
		public InBallManager()
		{
		}
	}
	[Token(Token = "0x20000E7")]
	public class BallRing : MonoBehaviour
	{
		[Token(Token = "0x40005C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private InGameSet inGameSet;

		[Token(Token = "0x40005C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform _leftPoint;

		[Token(Token = "0x40005C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform _rightPoint;

		[Token(Token = "0x40005CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 _ballPos;

		[Token(Token = "0x40005CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float _dir;

		[Token(Token = "0x40005CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform _characterPos;

		[Token(Token = "0x40005CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private PlayerController playerController;

		[Token(Token = "0x40005CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("远方投篮的时候的右边网：")]
		[FormerlySerializedAs("rightNet")]
		[SerializeField]
		private Transform firstNet;

		[Token(Token = "0x40005CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("灌篮的时候的右边网：")]
		[FormerlySerializedAs("rightNetShape01")]
		[SerializeField]
		private Transform netShape;

		[Token(Token = "0x40005D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool _wasDunk;

		[Token(Token = "0x40005D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float _timer;

		[Token(Token = "0x40005D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private DunkBallRingReference _dependency;

		[Token(Token = "0x6000591")]
		[Address(RVA = "0xDCF95C", Offset = "0xDCF95C", VA = "0xDCF95C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000592")]
		[Address(RVA = "0xDCFA1C", Offset = "0xDCFA1C", VA = "0xDCFA1C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000593")]
		[Address(RVA = "0xDCFA7C", Offset = "0xDCFA7C", VA = "0xDCFA7C")]
		private void EnterDunkNetSetup()
		{
		}

		[Token(Token = "0x6000594")]
		[Address(RVA = "0xDCFACC", Offset = "0xDCFACC", VA = "0xDCFACC")]
		public void ExitDunkNetSetup()
		{
		}

		[Token(Token = "0x6000595")]
		[Address(RVA = "0xDCFB1C", Offset = "0xDCFB1C", VA = "0xDCFB1C")]
		public void RemoteEnterSlamDunk()
		{
		}

		[Token(Token = "0x6000596")]
		[Address(RVA = "0xDCFBAC", Offset = "0xDCFBAC", VA = "0xDCFBAC")]
		public void RemoteExitSlamDunk()
		{
		}

		[Token(Token = "0x6000597")]
		[Address(RVA = "0xDCFC30", Offset = "0xDCFC30", VA = "0xDCFC30")]
		public bool IsSlamDunkState()
		{
			return default(bool);
		}

		[Token(Token = "0x6000598")]
		[Address(RVA = "0xDCFC4C", Offset = "0xDCFC4C", VA = "0xDCFC4C")]
		public bool WasDunk()
		{
			return default(bool);
		}

		[Token(Token = "0x6000599")]
		[Address(RVA = "0xDCFC54", Offset = "0xDCFC54", VA = "0xDCFC54")]
		public void ResetWasDunkState()
		{
		}

		[Token(Token = "0x600059A")]
		[Address(RVA = "0xDCFC5C", Offset = "0xDCFC5C", VA = "0xDCFC5C")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600059B")]
		[Address(RVA = "0xDD029C", Offset = "0xDD029C", VA = "0xDD029C")]
		public void SetupReference(DunkBallRingReference reference)
		{
		}

		[Token(Token = "0x600059C")]
		[Address(RVA = "0xDD01A0", Offset = "0xDD01A0", VA = "0xDD01A0")]
		private BasketBall BallInHand(Collider collider)
		{
			return null;
		}

		[Token(Token = "0x600059D")]
		[Address(RVA = "0xDD02D4", Offset = "0xDD02D4", VA = "0xDD02D4")]
		public BallRing()
		{
		}
	}
	[Token(Token = "0x20000E8")]
	public class LoadNextScene : MonoBehaviour
	{
		[Token(Token = "0x20000E9")]
		[CompilerGenerated]
		private sealed class <AsyncLoading>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40005D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40005D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40005D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LoadNextScene <>4__this;

			[Token(Token = "0x40005DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int index;

			[Token(Token = "0x17000062")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60005A4")]
				[Address(RVA = "0xDD0740", Offset = "0xDD0740", VA = "0xDD0740", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000063")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60005A6")]
				[Address(RVA = "0xDD0788", Offset = "0xDD0788", VA = "0xDD0788", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60005A1")]
			[Address(RVA = "0xDD0448", Offset = "0xDD0448", VA = "0xDD0448")]
			[DebuggerHidden]
			public <AsyncLoading>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x60005A2")]
			[Address(RVA = "0xDD0480", Offset = "0xDD0480", VA = "0xDD0480", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60005A3")]
			[Address(RVA = "0xDD0484", Offset = "0xDD0484", VA = "0xDD0484", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60005A5")]
			[Address(RVA = "0xDD0748", Offset = "0xDD0748", VA = "0xDD0748", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40005D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private InGameSet inGameSet;

		[Token(Token = "0x40005D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int _sceneIndex;

		[Token(Token = "0x40005D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AsyncOperation _async;

		[Token(Token = "0x40005D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("固定等待时间：")]
		[SerializeField]
		private float waitTime;

		[Token(Token = "0x600059E")]
		[Address(RVA = "0xDD02DC", Offset = "0xDD02DC", VA = "0xDD02DC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600059F")]
		[Address(RVA = "0xDD03C4", Offset = "0xDD03C4", VA = "0xDD03C4")]
		[IteratorStateMachine(typeof(<AsyncLoading>d__5))]
		private IEnumerator AsyncLoading(int index)
		{
			return null;
		}

		[Token(Token = "0x60005A0")]
		[Address(RVA = "0xDD0470", Offset = "0xDD0470", VA = "0xDD0470")]
		public LoadNextScene()
		{
		}
	}
	[Token(Token = "0x20000EA")]
	public class ManagerHandAndController : MonoBehaviour
	{
		[Token(Token = "0x20000EB")]
		[CompilerGenerated]
		private sealed class <EndJump>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40005E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40005E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40005EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ManagerHandAndController <>4__this;

			[Token(Token = "0x17000064")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60005B0")]
				[Address(RVA = "0xDD0E90", Offset = "0xDD0E90", VA = "0xDD0E90", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000065")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60005B2")]
				[Address(RVA = "0xDD0ED8", Offset = "0xDD0ED8", VA = "0xDD0ED8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60005AD")]
			[Address(RVA = "0xDD0B94", Offset = "0xDD0B94", VA = "0xDD0B94")]
			[DebuggerHidden]
			public <EndJump>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x60005AE")]
			[Address(RVA = "0xDD0DBC", Offset = "0xDD0DBC", VA = "0xDD0DBC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60005AF")]
			[Address(RVA = "0xDD0DC0", Offset = "0xDD0DC0", VA = "0xDD0DC0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60005B1")]
			[Address(RVA = "0xDD0E98", Offset = "0xDD0E98", VA = "0xDD0E98", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40005DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private HandPose[] twoStateHandPoses;

		[Token(Token = "0x40005DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform handModel;

		[Token(Token = "0x40005DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private BNG.HandPoser _handPoser;

		[Token(Token = "0x40005DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Animator _controllerAnimator;

		[Token(Token = "0x40005DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int PressGrip;

		[Token(Token = "0x40005E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly int PressTrigger;

		[Token(Token = "0x40005E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly int Jump;

		[Token(Token = "0x40005E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static readonly int Run;

		[Token(Token = "0x40005E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly int Play;

		[Token(Token = "0x40005E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static readonly int TwoHand;

		[Token(Token = "0x40005E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly int Dunk;

		[Token(Token = "0x40005E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Renderer _ballRenderer;

		[Token(Token = "0x40005E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private static readonly int OutlineColor;

		[Token(Token = "0x60005A7")]
		[Address(RVA = "0xDD0790", Offset = "0xDD0790", VA = "0xDD0790")]
		private void Start()
		{
		}

		[Token(Token = "0x60005A8")]
		[Address(RVA = "0xDD088C", Offset = "0xDD088C", VA = "0xDD088C")]
		private void Update()
		{
		}

		[Token(Token = "0x60005A9")]
		[Address(RVA = "0xDD0B20", Offset = "0xDD0B20", VA = "0xDD0B20")]
		[IteratorStateMachine(typeof(<EndJump>d__15))]
		private IEnumerator EndJump()
		{
			return null;
		}

		[Token(Token = "0x60005AA")]
		[Address(RVA = "0xDD0BBC", Offset = "0xDD0BBC", VA = "0xDD0BBC")]
		public void SetHandPose(int index)
		{
		}

		[Token(Token = "0x60005AB")]
		[Address(RVA = "0xDD0BF8", Offset = "0xDD0BF8", VA = "0xDD0BF8")]
		public ManagerHandAndController()
		{
		}
	}
	[Token(Token = "0x20000EC")]
	public class ControlBGM : MonoBehaviour
	{
		[Token(Token = "0x40005EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AudioClip[] audioClips;

		[Token(Token = "0x40005EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AudioSource _audioSource;

		[Token(Token = "0x40005ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int _randomIndex;

		[Token(Token = "0x40005EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameSet gameSet;

		[Token(Token = "0x60005B3")]
		[Address(RVA = "0xDD0EE0", Offset = "0xDD0EE0", VA = "0xDD0EE0")]
		private void Start()
		{
		}

		[Token(Token = "0x60005B4")]
		[Address(RVA = "0xDD0F94", Offset = "0xDD0F94", VA = "0xDD0F94")]
		private void PlayNextMusic()
		{
		}

		[Token(Token = "0x60005B5")]
		[Address(RVA = "0xDD0FFC", Offset = "0xDD0FFC", VA = "0xDD0FFC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60005B6")]
		[Address(RVA = "0xDD1004", Offset = "0xDD1004", VA = "0xDD1004")]
		public ControlBGM()
		{
		}
	}
	[Token(Token = "0x20000ED")]
	public class WalkManager : MonoBehaviour
	{
		[Token(Token = "0x40005EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private InGameSet inGameSet;

		[Token(Token = "0x40005F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private List<GameObject> walkPeoples;

		[Token(Token = "0x40005F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform walkPeopleParent;

		[Token(Token = "0x40005F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 _line01StartAngle;

		[Token(Token = "0x40005F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform _line01Start;

		[Token(Token = "0x40005F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform _line01Target;

		[Token(Token = "0x40005F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int _walkPeopleIndex;

		[Token(Token = "0x60005B7")]
		[Address(RVA = "0xDD100C", Offset = "0xDD100C", VA = "0xDD100C")]
		private void Start()
		{
		}

		[Token(Token = "0x60005B8")]
		[Address(RVA = "0xDD1234", Offset = "0xDD1234", VA = "0xDD1234")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60005B9")]
		[Address(RVA = "0xDD131C", Offset = "0xDD131C", VA = "0xDD131C")]
		private void NextPeopleHandle()
		{
		}

		[Token(Token = "0x60005BA")]
		[Address(RVA = "0xDD1418", Offset = "0xDD1418", VA = "0xDD1418")]
		public WalkManager()
		{
		}
	}
	[Token(Token = "0x20000EE")]
	public class WalkPeople : MonoBehaviour
	{
		[Token(Token = "0x20000EF")]
		[CompilerGenerated]
		private sealed class <CallNextCar>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40005FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40005FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40005FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WalkPeople <>4__this;

			[Token(Token = "0x17000066")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60005C2")]
				[Address(RVA = "0xDD17D8", Offset = "0xDD17D8", VA = "0xDD17D8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000067")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60005C4")]
				[Address(RVA = "0xDD1820", Offset = "0xDD1820", VA = "0xDD1820", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60005BF")]
			[Address(RVA = "0xDD16E4", Offset = "0xDD16E4", VA = "0xDD16E4")]
			[DebuggerHidden]
			public <CallNextCar>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x60005C0")]
			[Address(RVA = "0xDD1714", Offset = "0xDD1714", VA = "0xDD1714", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60005C1")]
			[Address(RVA = "0xDD1718", Offset = "0xDD1718", VA = "0xDD1718", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60005C3")]
			[Address(RVA = "0xDD17E0", Offset = "0xDD17E0", VA = "0xDD17E0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40005F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private InGameSet inGameSet;

		[Token(Token = "0x40005F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool startMove;

		[Token(Token = "0x40005F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 start;

		[Token(Token = "0x40005F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 end;

		[Token(Token = "0x40005FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private float walkSpeed;

		[Token(Token = "0x40005FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int _callTime;

		[Token(Token = "0x60005BB")]
		[Address(RVA = "0xDD1420", Offset = "0xDD1420", VA = "0xDD1420")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60005BC")]
		[Address(RVA = "0xDD14CC", Offset = "0xDD14CC", VA = "0xDD14CC")]
		private void Update()
		{
		}

		[Token(Token = "0x60005BD")]
		[Address(RVA = "0xDD1458", Offset = "0xDD1458", VA = "0xDD1458")]
		[IteratorStateMachine(typeof(<CallNextCar>d__8))]
		private IEnumerator CallNextCar()
		{
			return null;
		}

		[Token(Token = "0x60005BE")]
		[Address(RVA = "0xDD170C", Offset = "0xDD170C", VA = "0xDD170C")]
		public WalkPeople()
		{
		}
	}
	[Token(Token = "0x20000F0")]
	public class CalibratePlayerHeight : MonoBehaviour
	{
		[Token(Token = "0x20000F1")]
		[CompilerGenerated]
		private sealed class <setupInitialOffset>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000604")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000605")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000606")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CalibratePlayerHeight <>4__this;

			[Token(Token = "0x17000068")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60005D1")]
				[Address(RVA = "0xDD1DB0", Offset = "0xDD1DB0", VA = "0xDD1DB0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000069")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60005D3")]
				[Address(RVA = "0xDD1DF8", Offset = "0xDD1DF8", VA = "0xDD1DF8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60005CE")]
			[Address(RVA = "0xDD1C98", Offset = "0xDD1C98", VA = "0xDD1C98")]
			[DebuggerHidden]
			public <setupInitialOffset>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x60005CF")]
			[Address(RVA = "0xDD1CE4", Offset = "0xDD1CE4", VA = "0xDD1CE4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60005D0")]
			[Address(RVA = "0xDD1CE8", Offset = "0xDD1CE8", VA = "0xDD1CE8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60005D2")]
			[Address(RVA = "0xDD1DB8", Offset = "0xDD1DB8", VA = "0xDD1DB8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40005FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Desired height of the player in meters. The player's presence in vr will be adjusted based on their physical height. 1.65 meters = 5.41 feet")]
		public float DesiredPlayerHeight;

		[Token(Token = "0x4000600")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Adjust the CharacterControllerYOffset property of this playerController. If not specified one will be found using GetComponentInChildren()")]
		public PlayerController PlayerController;

		[Token(Token = "0x4000601")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If true, the player's virtual height will be adjusted to match DesiredPlayerHeight on Start()")]
		[Header("Startup")]
		public bool CalibrateOnStart;

		[Token(Token = "0x4000602")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("If specified, pressing this button / action will activate the calibration")]
		[Header("Input :")]
		public InputAction CalibrateHeightAction;

		[Token(Token = "0x4000603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _initialOffset;

		[Token(Token = "0x60005C5")]
		[Address(RVA = "0xDD1828", Offset = "0xDD1828", VA = "0xDD1828")]
		private void Start()
		{
		}

		[Token(Token = "0x60005C6")]
		[Address(RVA = "0xDD19D4", Offset = "0xDD19D4", VA = "0xDD19D4")]
		public void CalibrateHeight()
		{
		}

		[Token(Token = "0x60005C7")]
		[Address(RVA = "0xDD19DC", Offset = "0xDD19DC", VA = "0xDD19DC")]
		public void CalibrateHeight(float calibrateHeight)
		{
		}

		[Token(Token = "0x60005C8")]
		[Address(RVA = "0xDD1C00", Offset = "0xDD1C00", VA = "0xDD1C00")]
		public void ResetPlayerHeight()
		{
		}

		[Token(Token = "0x60005C9")]
		[Address(RVA = "0xDD1B84", Offset = "0xDD1B84", VA = "0xDD1B84")]
		public float GetCurrentPlayerHeight()
		{
			return default(float);
		}

		[Token(Token = "0x60005CA")]
		[Address(RVA = "0xDD1C20", Offset = "0xDD1C20", VA = "0xDD1C20", Slot = "4")]
		public virtual void SetInitialOffset()
		{
		}

		[Token(Token = "0x60005CB")]
		[Address(RVA = "0xDD1960", Offset = "0xDD1960", VA = "0xDD1960")]
		[IteratorStateMachine(typeof(<setupInitialOffset>d__11))]
		private IEnumerator setupInitialOffset()
		{
			return null;
		}

		[Token(Token = "0x60005CC")]
		[Address(RVA = "0xDD1CC0", Offset = "0xDD1CC0", VA = "0xDD1CC0")]
		public CalibratePlayerHeight()
		{
		}
	}
	[Token(Token = "0x20000F2")]
	public class CalibratePlayerHeightFixed : MonoBehaviour
	{
		[Token(Token = "0x20000F3")]
		[CompilerGenerated]
		private sealed class <setupInitialOffset>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400060C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400060D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400060E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CalibratePlayerHeightFixed <>4__this;

			[Token(Token = "0x1700006A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60005E0")]
				[Address(RVA = "0xDD2304", Offset = "0xDD2304", VA = "0xDD2304", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700006B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60005E2")]
				[Address(RVA = "0xDD234C", Offset = "0xDD234C", VA = "0xDD234C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60005DD")]
			[Address(RVA = "0xDD21EC", Offset = "0xDD21EC", VA = "0xDD21EC")]
			[DebuggerHidden]
			public <setupInitialOffset>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x60005DE")]
			[Address(RVA = "0xDD2238", Offset = "0xDD2238", VA = "0xDD2238", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60005DF")]
			[Address(RVA = "0xDD223C", Offset = "0xDD223C", VA = "0xDD223C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60005E1")]
			[Address(RVA = "0xDD230C", Offset = "0xDD230C", VA = "0xDD230C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Desired height of the player in meters. The player's presence in vr will be adjusted based on their physical height. 1.65 meters = 5.41 feet")]
		public float DesiredPlayerHeight;

		[Token(Token = "0x4000608")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Adjust the CharacterControllerYOffset property of this playerController. If not specified one will be found using GetComponentInChildren()")]
		public PlayerController PlayerController;

		[Token(Token = "0x4000609")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Startup")]
		[Tooltip("If true, the player's virtual height will be adjusted to match DesiredPlayerHeight on Start()")]
		public bool CalibrateOnStart;

		[Token(Token = "0x400060A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Input :")]
		[Tooltip("If specified, pressing this button / action will activate the calibration")]
		public InputAction CalibrateHeightAction;

		[Token(Token = "0x400060B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _initialOffset;

		[Token(Token = "0x60005D4")]
		[Address(RVA = "0xDD1E00", Offset = "0xDD1E00", VA = "0xDD1E00")]
		private void Start()
		{
		}

		[Token(Token = "0x60005D5")]
		[Address(RVA = "0xDD1FAC", Offset = "0xDD1FAC", VA = "0xDD1FAC")]
		public void CalibrateHeight()
		{
		}

		[Token(Token = "0x60005D6")]
		[Address(RVA = "0xDD1FB4", Offset = "0xDD1FB4", VA = "0xDD1FB4")]
		public void CalibrateHeight(float calibrateHeight)
		{
		}

		[Token(Token = "0x60005D7")]
		[Address(RVA = "0xDD2154", Offset = "0xDD2154", VA = "0xDD2154")]
		public void ResetPlayerHeight()
		{
		}

		[Token(Token = "0x60005D8")]
		[Address(RVA = "0xDD20D8", Offset = "0xDD20D8", VA = "0xDD20D8")]
		public float GetCurrentPlayerHeight()
		{
			return default(float);
		}

		[Token(Token = "0x60005D9")]
		[Address(RVA = "0xDD2174", Offset = "0xDD2174", VA = "0xDD2174", Slot = "4")]
		public virtual void SetInitialOffset()
		{
		}

		[Token(Token = "0x60005DA")]
		[Address(RVA = "0xDD1F38", Offset = "0xDD1F38", VA = "0xDD1F38")]
		[IteratorStateMachine(typeof(<setupInitialOffset>d__11))]
		private IEnumerator setupInitialOffset()
		{
			return null;
		}

		[Token(Token = "0x60005DB")]
		[Address(RVA = "0xDD2214", Offset = "0xDD2214", VA = "0xDD2214")]
		public CalibratePlayerHeightFixed()
		{
		}
	}
	[Token(Token = "0x20000F4")]
	[RequireComponent(typeof(CharacterController))]
	public class GravityController : MonoBehaviour
	{
		[Token(Token = "0x400060F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private InGameSet inGameSet;

		[Token(Token = "0x4000610")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool gravityEnabled;

		[Token(Token = "0x4000611")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private Vector3 gravity;

		[Token(Token = "0x4000612")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CharacterController _characterController;

		[Token(Token = "0x4000613")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SmoothMove _smoothMove;

		[Token(Token = "0x4000614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float _movementY;

		[Token(Token = "0x60005E3")]
		[Address(RVA = "0xDD2354", Offset = "0xDD2354", VA = "0xDD2354")]
		private void Start()
		{
		}

		[Token(Token = "0x60005E4")]
		[Address(RVA = "0xDD24A0", Offset = "0xDD24A0", VA = "0xDD24A0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60005E5")]
		[Address(RVA = "0xDD2684", Offset = "0xDD2684", VA = "0xDD2684")]
		private void NoGravity(Transform characterPos, HandType dunkHoldRingHandType)
		{
		}

		[Token(Token = "0x60005E6")]
		[Address(RVA = "0xDD2724", Offset = "0xDD2724", VA = "0xDD2724")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60005E7")]
		[Address(RVA = "0xDD280C", Offset = "0xDD280C", VA = "0xDD280C")]
		public GravityController()
		{
		}
	}
	[Token(Token = "0x20000F5")]
	public class PlayerController : MonoBehaviour
	{
		[Token(Token = "0x4000615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private InGameSet inGameSet;

		[Token(Token = "0x4000616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CharacterController _characterController;

		[Token(Token = "0x4000617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool moveCharacterWithCamera;

		[Token(Token = "0x4000618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[Header("玩家的身体跟随头显旋转")]
		public bool rotateCharacterWithCamera;

		[Token(Token = "0x4000619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform trackingSpace;

		[Token(Token = "0x400061A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform cameraRig;

		[Token(Token = "0x400061B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform centerEyeAnchor;

		[Token(Token = "0x400061C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("是否需要根据头显的位置更改玩家的高度")]
		public bool resizeCharacterHeightWithCamera;

		[Token(Token = "0x400061D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Header("玩家高度设置（由于VR中坐着和站着是不同的高度，所以需要变更玩家高度） : ")]
		[Tooltip("玩家最小的高度（米）")]
		public float minimumCapsuleHeight;

		[Token(Token = "0x400061E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("玩家最大高度（米）")]
		public float maximumCapsuleHeight;

		[Token(Token = "0x400061F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("用于更新CameraRig的位置")]
		[Header("CharacterController的Y轴偏移值 : ")]
		public float characterControllerYOffset;

		[Token(Token = "0x4000620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Calibrate Height完成")]
		public bool calibratePlayerHeightFinish;

		[Token(Token = "0x4000621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[HideInInspector]
		public float cameraHeight;

		[Token(Token = "0x4000622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Misc : ")]
		[Tooltip("为True的时候，如果没有头盔链接，则相机与玩家的高度差就是elevateCameraHeight，可以防止摄像机掉落以及可以通过键盘控制摄像机.")]
		public bool elevateCameraIfNoHmdPresent;

		[Token(Token = "0x4000623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float elevateCameraHeight;

		[Token(Token = "0x4000624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("回归初始位置按键")]
		public InputActionReference backInitPos;

		[Token(Token = "0x4000625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private SmoothMove _smoothMove;

		[Token(Token = "0x4000626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public float lastPlayerMoveTime;

		[Token(Token = "0x4000627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private GravityController _gravityController;

		[Token(Token = "0x4000628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Header("地面检测: ")]
		public LayerMask groundedLayers;

		[Token(Token = "0x4000629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("玩家距离地面的距离. 0 = 在地面上, 1 = 1米.")]
		public float distanceFromGround;

		[Token(Token = "0x400062A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Header("距离地面多远就可以判定为在地上")]
		public float isGroundMaxHeight;

		[Token(Token = "0x400062B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private RaycastHit _groundHit;

		[Token(Token = "0x400062C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private readonly float _minElevation;

		[Token(Token = "0x400062D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private readonly float _maxElevation;

		[Token(Token = "0x400062E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Vector3 _initialPosition;

		[Token(Token = "0x400062F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private Transform followTransform;

		[Token(Token = "0x4000630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool HasEverHMDActive;

		[Token(Token = "0x4000631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
		private bool _recordPlayerDunkOnce;

		[Token(Token = "0x4000632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public PlayerShotBallState playerShotBallState;

		[Token(Token = "0x4000633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Vector3 _dunkCharacterDir;

		[Token(Token = "0x4000634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private bool _dunkAutoInitCharacter;

		[Token(Token = "0x4000635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private HandType _dunkHoldRingHandType;

		[Token(Token = "0x60005E8")]
		[Address(RVA = "0xDD283C", Offset = "0xDD283C", VA = "0xDD283C")]
		private void Start()
		{
		}

		[Token(Token = "0x60005E9")]
		[Address(RVA = "0xDD2A84", Offset = "0xDD2A84", VA = "0xDD2A84")]
		private void Update()
		{
		}

		[Token(Token = "0x60005EA")]
		[Address(RVA = "0xDD344C", Offset = "0xDD344C", VA = "0xDD344C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60005EB")]
		[Address(RVA = "0xDD3464", Offset = "0xDD3464", VA = "0xDD3464")]
		private void UpdateDistanceFromGround()
		{
		}

		[Token(Token = "0x60005EC")]
		[Address(RVA = "0xDD36EC", Offset = "0xDD36EC", VA = "0xDD36EC")]
		private void CheckPlayerElevationRespawn()
		{
		}

		[Token(Token = "0x60005ED")]
		[Address(RVA = "0xDD37E8", Offset = "0xDD37E8", VA = "0xDD37E8")]
		private void BackInitPos(InputAction.CallbackContext callbackContext)
		{
		}

		[Token(Token = "0x60005EE")]
		[Address(RVA = "0xDD3384", Offset = "0xDD3384", VA = "0xDD3384")]
		private void CharacterBack()
		{
		}

		[Token(Token = "0x60005EF")]
		[Address(RVA = "0xDD37EC", Offset = "0xDD37EC", VA = "0xDD37EC")]
		private void CharacterDir(Transform characterPos, HandType dunkHoldRingHandType)
		{
		}

		[Token(Token = "0x60005F0")]
		[Address(RVA = "0xDD2D20", Offset = "0xDD2D20", VA = "0xDD2D20")]
		private void UpdateCharacterHeight()
		{
		}

		[Token(Token = "0x60005F1")]
		[Address(RVA = "0xDD2E34", Offset = "0xDD2E34", VA = "0xDD2E34")]
		private void UpdateCameraRigPosition()
		{
		}

		[Token(Token = "0x60005F2")]
		[Address(RVA = "0xDD2F8C", Offset = "0xDD2F8C", VA = "0xDD2F8C")]
		private void UpdateCameraHeight()
		{
		}

		[Token(Token = "0x60005F3")]
		[Address(RVA = "0xDD3008", Offset = "0xDD3008", VA = "0xDD3008")]
		private void CheckCharacterCollisionMove()
		{
		}

		[Token(Token = "0x60005F4")]
		[Address(RVA = "0xDD31F4", Offset = "0xDD31F4", VA = "0xDD31F4")]
		private void RotateTrackingSpaceToCamera()
		{
		}

		[Token(Token = "0x60005F5")]
		[Address(RVA = "0xDD3830", Offset = "0xDD3830", VA = "0xDD3830")]
		public bool IsGrounded()
		{
			return default(bool);
		}

		[Token(Token = "0x60005F6")]
		[Address(RVA = "0xDD38C4", Offset = "0xDD38C4", VA = "0xDD38C4")]
		public bool IsGroundedDistanceCheck()
		{
			return default(bool);
		}

		[Token(Token = "0x60005F7")]
		[Address(RVA = "0xDD38D4", Offset = "0xDD38D4", VA = "0xDD38D4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60005F8")]
		[Address(RVA = "0xDD39BC", Offset = "0xDD39BC", VA = "0xDD39BC")]
		public void CloseCollisionWith(Collider collider)
		{
		}

		[Token(Token = "0x60005F9")]
		[Address(RVA = "0xDD39CC", Offset = "0xDD39CC", VA = "0xDD39CC")]
		public PlayerController()
		{
		}
	}
	[Token(Token = "0x20000F6")]
	public class ScaledCharacterYOffset : MonoBehaviour
	{
		[Token(Token = "0x60005FA")]
		[Address(RVA = "0xDD3A18", Offset = "0xDD3A18", VA = "0xDD3A18")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60005FB")]
		[Address(RVA = "0xDD3ABC", Offset = "0xDD3ABC", VA = "0xDD3ABC")]
		public ScaledCharacterYOffset()
		{
		}
	}
	[Token(Token = "0x20000F7")]
	[RequireComponent(typeof(CharacterController))]
	public class SmoothMove : MonoBehaviour
	{
		[Token(Token = "0x4000636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private InGameSet inGameSet;

		[Token(Token = "0x4000637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private InGameSetUISO inGameSetUI;

		[Token(Token = "0x4000638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameSet gameSet;

		[Token(Token = "0x4000639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float _movementSpeed;

		[Token(Token = "0x400063A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Header("Input : ")]
		[Tooltip("设置成false时不会对输入有反应，在暂停和主菜单时使用")]
		public bool allowInput;

		[Token(Token = "0x400063B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		[Tooltip("如果不想平滑移动的时候设置成false")]
		public bool updateMovement;

		[Token(Token = "0x400063C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("左摇杆输入方向")]
		public List<InputAxis> inputAxis;

		[Token(Token = "0x400063D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("是否允许冲刺：")]
		public bool allowSprint;

		[Token(Token = "0x400063E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Header("冲刺 : ")]
		public float sprintSpeed;

		[Token(Token = "0x400063F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("冲刺按键绑定:")]
		public InputActionReference leftSprintAction;

		[Token(Token = "0x4000640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public InputActionReference rightSprintAction;

		[Token(Token = "0x4000641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Strafe : ")]
		public float StrafeSpeed;

		[Token(Token = "0x4000642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float StrafeSprintSpeed;

		[Token(Token = "0x4000643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("是否允许跳跃：")]
		public bool allowJump;

		[Token(Token = "0x4000644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Header("跳跃 : ")]
		[Tooltip("跳跃期间受到的力")]
		public float jumpForce;

		[Token(Token = "0x4000645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("跳跃按键绑定")]
		public InputActionReference leftJumpAction;

		[Token(Token = "0x4000646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public InputActionReference rightJumpAction;

		[Token(Token = "0x4000647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("在空中时的设定 : ")]
		[Tooltip("如果是True，代表即使在空中也会对左摇杆的行为有反应（空中可以横移）")]
		public bool airControl;

		[Token(Token = "0x4000648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("玩家在空中的移动速度，例如，0.5f的数值代表CharacterController的MovementSpeed的一半速度运动")]
		public float airControlSpeed;

		[Token(Token = "0x4000649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private PlayerController _playerController;

		[Token(Token = "0x400064A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool _playerInitialized;

		[Token(Token = "0x400064B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private CharacterController _characterController;

		[Token(Token = "0x400064C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float _movementX;

		[Token(Token = "0x400064D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float _movementY;

		[Token(Token = "0x400064E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float _movementZ;

		[Token(Token = "0x400064F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private float _verticalSpeed;

		[Token(Token = "0x4000650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 _additionalMovement;

		[Token(Token = "0x4000651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private Vector2 _primaryAxis;

		[Token(Token = "0x4000652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private PhotonView pv;

		[Token(Token = "0x4000653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private TextMeshProUGUI debugText;

		[Token(Token = "0x4000654")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Vector3 moveDirection;

		[Token(Token = "0x4000655")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private bool _recordPlayerJumpOnce;

		[Token(Token = "0x60005FC")]
		[Address(RVA = "0xDD3AC4", Offset = "0xDD3AC4", VA = "0xDD3AC4")]
		private void Start()
		{
		}

		[Token(Token = "0x60005FD")]
		[Address(RVA = "0xDD3CD0", Offset = "0xDD3CD0", VA = "0xDD3CD0")]
		private void Update()
		{
		}

		[Token(Token = "0x60005FE")]
		[Address(RVA = "0xDD4050", Offset = "0xDD4050", VA = "0xDD4050")]
		private void ChangePlayerSpeed(float speed)
		{
		}

		[Token(Token = "0x60005FF")]
		[Address(RVA = "0xDD3D00", Offset = "0xDD3D00", VA = "0xDD3D00")]
		private void CheckControllerReferences()
		{
		}

		[Token(Token = "0x6000600")]
		[Address(RVA = "0xDD4058", Offset = "0xDD4058", VA = "0xDD4058")]
		private void SetupCharacterController()
		{
		}

		[Token(Token = "0x6000601")]
		[Address(RVA = "0xDD3D80", Offset = "0xDD3D80", VA = "0xDD3D80")]
		private void UpdateInputs()
		{
		}

		[Token(Token = "0x6000602")]
		[Address(RVA = "0xDD4174", Offset = "0xDD4174", VA = "0xDD4174")]
		private Vector2 GetMovementAxis()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000603")]
		[Address(RVA = "0xDD43BC", Offset = "0xDD43BC", VA = "0xDD43BC")]
		private bool IsGrounded()
		{
			return default(bool);
		}

		[Token(Token = "0x6000604")]
		[Address(RVA = "0xDD43D4", Offset = "0xDD43D4", VA = "0xDD43D4")]
		private bool CheckJump()
		{
			return default(bool);
		}

		[Token(Token = "0x6000605")]
		[Address(RVA = "0xDD44C0", Offset = "0xDD44C0", VA = "0xDD44C0")]
		private bool CheckSprint()
		{
			return default(bool);
		}

		[Token(Token = "0x6000606")]
		[Address(RVA = "0xDD3E38", Offset = "0xDD3E38", VA = "0xDD3E38")]
		private void MoveCharacter()
		{
		}

		[Token(Token = "0x6000607")]
		[Address(RVA = "0xDD25B0", Offset = "0xDD25B0", VA = "0xDD25B0")]
		public void MoveCharacter(Vector3 motion)
		{
		}

		[Token(Token = "0x6000608")]
		[Address(RVA = "0xDD4564", Offset = "0xDD4564", VA = "0xDD4564")]
		private void NoUpdateMovement(Transform characterPos, HandType dunkHoldRingHandType)
		{
		}

		[Token(Token = "0x6000609")]
		[Address(RVA = "0xDD456C", Offset = "0xDD456C", VA = "0xDD456C")]
		public SmoothMove()
		{
		}
	}
	[Token(Token = "0x20000F8")]
	public class StartManManager : MonoBehaviour
	{
		[Token(Token = "0x4000656")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private InGameSet inGameSet;

		[Token(Token = "0x4000657")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameSet gameSet;

		[Token(Token = "0x4000658")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform[] characterModel;

		[Token(Token = "0x600060A")]
		[Address(RVA = "0xDD46A0", Offset = "0xDD46A0", VA = "0xDD46A0")]
		private void Start()
		{
		}

		[Token(Token = "0x600060B")]
		[Address(RVA = "0xDD46A4", Offset = "0xDD46A4", VA = "0xDD46A4")]
		public StartManManager()
		{
		}
	}
	[Token(Token = "0x20000F9")]
	public class QuickJoinScr : MonoBehaviourPunCallbacks, IConnectionCallbacks
	{
		[Token(Token = "0x4000659")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameSet gameSet;

		[Token(Token = "0x400065A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private InGameSetUISO inGameSetUI;

		[Token(Token = "0x400065B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private UnityEngine.UI.Button sureBtn;

		[Token(Token = "0x400065C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform bgTr;

		[Token(Token = "0x400065D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform modelBtnParent;

		[Token(Token = "0x400065E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Transform> modelTrs;

		[Token(Token = "0x400065F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<UnityEngine.UI.Button> modelBtns;

		[Token(Token = "0x4000660")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform tempModelTr;

		[Token(Token = "0x4000661")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private UnityEngine.UI.Button _joinBtn;

		[Token(Token = "0x4000662")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform _searchTr;

		[Token(Token = "0x4000663")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private TextMeshProUGUI _tipText;

		[Token(Token = "0x4000664")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int _usedLanguage;

		[Token(Token = "0x4000665")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private bool Tries2Connect2Master;

		[Token(Token = "0x4000666")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
		private bool Tries2Connect2Room;

		[Token(Token = "0x4000667")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string roomName;

		[Token(Token = "0x4000668")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Photon.Realtime.RoomOptions room;

		[Token(Token = "0x600060C")]
		[Address(RVA = "0xDD46AC", Offset = "0xDD46AC", VA = "0xDD46AC")]
		private void Start()
		{
		}

		[Token(Token = "0x600060D")]
		[Address(RVA = "0xDD4D48", Offset = "0xDD4D48", VA = "0xDD4D48")]
		private void StartSearch()
		{
		}

		[Token(Token = "0x600060E")]
		[Address(RVA = "0xDD4E58", Offset = "0xDD4E58", VA = "0xDD4E58")]
		private void ChangeBtnColor(string btnName)
		{
		}

		[Token(Token = "0x600060F")]
		[Address(RVA = "0xDD4F98", Offset = "0xDD4F98", VA = "0xDD4F98")]
		private void CloseTip()
		{
		}

		[Token(Token = "0x6000610")]
		[Address(RVA = "0xDD4DFC", Offset = "0xDD4DFC", VA = "0xDD4DFC")]
		private void ClickConnect2Master()
		{
		}

		[Token(Token = "0x6000611")]
		[Address(RVA = "0xDD5010", Offset = "0xDD5010", VA = "0xDD5010", Slot = "45")]
		public override void OnConnectedToMaster()
		{
		}

		[Token(Token = "0x6000612")]
		[Address(RVA = "0xDD5108", Offset = "0xDD5108", VA = "0xDD5108", Slot = "38")]
		public override void OnDisconnected(DisconnectCause cause)
		{
		}

		[Token(Token = "0x6000613")]
		[Address(RVA = "0xDD51FC", Offset = "0xDD51FC", VA = "0xDD51FC", Slot = "41")]
		public override void OnJoinedRoom()
		{
		}

		[Token(Token = "0x6000614")]
		[Address(RVA = "0xDD52E8", Offset = "0xDD52E8", VA = "0xDD52E8", Slot = "44")]
		public override void OnJoinRandomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x6000615")]
		[Address(RVA = "0xDD5494", Offset = "0xDD5494", VA = "0xDD5494", Slot = "33")]
		public override void OnCreateRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x6000616")]
		[Address(RVA = "0xDD5560", Offset = "0xDD5560", VA = "0xDD5560")]
		public QuickJoinScr()
		{
		}
	}
	[Token(Token = "0x20000FB")]
	public class SaveWithJson
	{
		[Token(Token = "0x400066B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static SaveWithJson _instance;

		[Token(Token = "0x1700006C")]
		public static SaveWithJson Instance
		{
			[Token(Token = "0x6000619")]
			[Address(RVA = "0xDD559C", Offset = "0xDD559C", VA = "0xDD559C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600061A")]
		public string SaveToJson<T>(T t, string unityAssetSubPath)
		{
			return null;
		}

		[Token(Token = "0x600061B")]
		[Address(RVA = "0xDD5634", Offset = "0xDD5634", VA = "0xDD5634")]
		public void SaveToFile(string content, string unityAssetSubPath)
		{
		}

		[Token(Token = "0x600061C")]
		public T LoadFromJson<T>(string unityAssetSubPath)
		{
			return (T)null;
		}

		[Token(Token = "0x600061D")]
		public void LoadFromJson<T>(string unityAssetSubPath, T t)
		{
		}

		[Token(Token = "0x600061E")]
		[Address(RVA = "0xDD5800", Offset = "0xDD5800", VA = "0xDD5800")]
		public string LoadFromFile(string unityAssetSubPath)
		{
			return null;
		}

		[Token(Token = "0x600061F")]
		[Address(RVA = "0xDD562C", Offset = "0xDD562C", VA = "0xDD562C")]
		public SaveWithJson()
		{
		}
	}
	[Token(Token = "0x20000FC")]
	[CreateAssetMenu(fileName = "New Set", menuName = "ScriptableObject/Game/PlayerSet")]
	public class GameSet : ScriptableObject
	{
		[Token(Token = "0x400066C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameMode gameModeSet;

		[Token(Token = "0x400066D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool isMute;

		[Token(Token = "0x400066E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float volumeSliderValue;

		[Token(Token = "0x400066F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int usedLanguageIndex;

		[Token(Token = "0x4000670")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float moveSpeed;

		[Token(Token = "0x4000671")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int modelIndex;

		[Token(Token = "0x4000672")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("开始场景的模型，而不是多人游戏的模型")]
		public bool isAwake;

		[Token(Token = "0x6000620")]
		[Address(RVA = "0xDD5828", Offset = "0xDD5828", VA = "0xDD5828")]
		public GameSet()
		{
		}
	}
	[Token(Token = "0x20000FD")]
	public enum GameMode
	{
		[Token(Token = "0x4000674")]
		Easy,
		[Token(Token = "0x4000675")]
		Normal,
		[Token(Token = "0x4000676")]
		Hard
	}
	[Token(Token = "0x20000FE")]
	[CreateAssetMenu(fileName = "New InGameSetUI", menuName = "ScriptableObject/Game/In Game Set UI")]
	public class InGameSetUISO : ScriptableObject
	{
		[Token(Token = "0x4000677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string startSceneName;

		[Token(Token = "0x4000678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string practiceSceneName;

		[Token(Token = "0x4000679")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string tutorialSceneName;

		[Token(Token = "0x400067A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string startCanvasName;

		[Token(Token = "0x400067B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string practiceBtnName;

		[Token(Token = "0x400067C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string setBtnName;

		[Token(Token = "0x400067D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string tutorialBtnName;

		[Token(Token = "0x400067E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string endGameBtnName;

		[Token(Token = "0x400067F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string aIBtnName;

		[Token(Token = "0x4000680")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string versionTextName;

		[Token(Token = "0x4000681")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string gameSetPath;

		[Token(Token = "0x4000682")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string engVersionPath;

		[Token(Token = "0x4000683")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public string chVersionPath;

		[Token(Token = "0x4000684")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Header("远程英文内容地址：")]
		public string remoteVersionContent;

		[Token(Token = "0x4000685")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Header("远程中文内容地址：")]
		public string remoteChineseContent;

		[Token(Token = "0x4000686")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Action<int> ChangeLanguage;

		[Token(Token = "0x4000687")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Action<float> ChangeSpeedAction;

		[Token(Token = "0x4000688")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Action CloseSetPanelAction;

		[Token(Token = "0x4000689")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public bool OnlyRightShow;

		[Token(Token = "0x400068A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA9")]
		public bool OnlyMiddleShow;

		[Token(Token = "0x400068B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Action<int> ShowMaskPanelAction;

		[Token(Token = "0x400068C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Action CloseMaskPanelAction;

		[Token(Token = "0x400068D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Action CloseOtherAction;

		[Token(Token = "0x400068E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Action OpenLobbyAction;

		[Token(Token = "0x6000621")]
		[Address(RVA = "0xDD5840", Offset = "0xDD5840", VA = "0xDD5840")]
		public void StartChange(int languageIndex)
		{
		}

		[Token(Token = "0x6000622")]
		[Address(RVA = "0xDD585C", Offset = "0xDD585C", VA = "0xDD585C")]
		public void ChangeSpeed(float speed)
		{
		}

		[Token(Token = "0x6000623")]
		[Address(RVA = "0xDD5878", Offset = "0xDD5878", VA = "0xDD5878")]
		public void CloseSetPanel()
		{
		}

		[Token(Token = "0x6000624")]
		[Address(RVA = "0xDD5894", Offset = "0xDD5894", VA = "0xDD5894")]
		public void ShowMaskPanel(int textIndex)
		{
		}

		[Token(Token = "0x6000625")]
		[Address(RVA = "0xDD58B0", Offset = "0xDD58B0", VA = "0xDD58B0")]
		public void CloseMaskPanel()
		{
		}

		[Token(Token = "0x6000626")]
		[Address(RVA = "0xDD58CC", Offset = "0xDD58CC", VA = "0xDD58CC")]
		public void CloseOther()
		{
		}

		[Token(Token = "0x6000627")]
		[Address(RVA = "0xDD58E8", Offset = "0xDD58E8", VA = "0xDD58E8")]
		public void OpenLobby()
		{
		}

		[Token(Token = "0x6000628")]
		[Address(RVA = "0xDD5904", Offset = "0xDD5904", VA = "0xDD5904")]
		public InGameSetUISO()
		{
		}
	}
	[Token(Token = "0x20000FF")]
	public class TabButton : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerClickHandler, IPointerExitHandler
	{
		[Token(Token = "0x400068F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TabGroup tabGroup;

		[Token(Token = "0x4000690")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public Image backGround;

		[Token(Token = "0x4000691")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int index;

		[Token(Token = "0x6000629")]
		[Address(RVA = "0xDD590C", Offset = "0xDD590C", VA = "0xDD590C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600062A")]
		[Address(RVA = "0xDD5AA0", Offset = "0xDD5AA0", VA = "0xDD5AA0", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600062B")]
		[Address(RVA = "0xDD5B94", Offset = "0xDD5B94", VA = "0xDD5B94", Slot = "5")]
		public void OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600062C")]
		[Address(RVA = "0xDD5D60", Offset = "0xDD5D60", VA = "0xDD5D60", Slot = "6")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x600062D")]
		[Address(RVA = "0xDD5D7C", Offset = "0xDD5D7C", VA = "0xDD5D7C")]
		public TabButton()
		{
		}
	}
	[Token(Token = "0x2000100")]
	public class TabGroup : MonoBehaviour
	{
		[Token(Token = "0x4000692")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameSet gameSet;

		[Token(Token = "0x4000693")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private InGameSetUISO inGameSetUI;

		[Token(Token = "0x4000694")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<TabButton> tabButtons;

		[Token(Token = "0x4000695")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color tabIdleColor;

		[Token(Token = "0x4000696")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Color tabHoverColor;

		[Token(Token = "0x4000697")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Color tabActiveColor;

		[Token(Token = "0x4000698")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public TabButton selectedTab;

		[Token(Token = "0x4000699")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int _indexButton;

		[Token(Token = "0x400069A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform _selectedBtn;

		[Token(Token = "0x600062E")]
		[Address(RVA = "0xDD5D84", Offset = "0xDD5D84", VA = "0xDD5D84")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600062F")]
		[Address(RVA = "0xDD5998", Offset = "0xDD5998", VA = "0xDD5998")]
		public void Subscribe(TabButton button)
		{
		}

		[Token(Token = "0x6000630")]
		[Address(RVA = "0xDD5ABC", Offset = "0xDD5ABC", VA = "0xDD5ABC")]
		public void OnTabEnter(TabButton button)
		{
		}

		[Token(Token = "0x6000631")]
		[Address(RVA = "0xDD5D78", Offset = "0xDD5D78", VA = "0xDD5D78")]
		public void OnTabExit(TabButton button)
		{
		}

		[Token(Token = "0x6000632")]
		[Address(RVA = "0xDD5BB0", Offset = "0xDD5BB0", VA = "0xDD5BB0")]
		public void OnTabSelected(TabButton button)
		{
		}

		[Token(Token = "0x6000633")]
		[Address(RVA = "0xDD5E68", Offset = "0xDD5E68", VA = "0xDD5E68")]
		public void ResetTab()
		{
		}

		[Token(Token = "0x6000634")]
		[Address(RVA = "0xDD6058", Offset = "0xDD6058", VA = "0xDD6058")]
		public TabGroup()
		{
		}
	}
	[Token(Token = "0x2000101")]
	public class ControllerManager : MonoBehaviour
	{
		[Token(Token = "0x400069B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TutorialSO tutorial;

		[Token(Token = "0x400069C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameSet gameSet;

		[Token(Token = "0x400069D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private InGameSet inGameSet;

		[Token(Token = "0x400069E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[Header("提示：")]
		private TextMeshProUGUI tip;

		[Token(Token = "0x400069F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Transform backGround;

		[Token(Token = "0x40006A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float _leftAxisValue;

		[Token(Token = "0x40006A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool startMove;

		[Token(Token = "0x40006A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		public bool sprintMove;

		[Token(Token = "0x40006A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject leftController;

		[Token(Token = "0x40006A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject rightController;

		[Token(Token = "0x40006A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		[Header("移动：")]
		private SmoothMove smoothMove;

		[Token(Token = "0x40006A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[Header("旋转：")]
		private PlayerRotation playerRot;

		[Token(Token = "0x40006A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("篮球：")]
		[SerializeField]
		private BallManager ballManager;

		[Token(Token = "0x40006A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("键位绑定：")]
		public InputActionReference leftAxis;

		[Token(Token = "0x40006A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public InputActionReference leftSprint;

		[Token(Token = "0x40006AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public InputActionReference rightSprint;

		[Token(Token = "0x40006AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public InputActionReference leftJump;

		[Token(Token = "0x40006AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public InputActionReference rightJump;

		[Token(Token = "0x40006AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public InputActionReference rightSpawn;

		[Token(Token = "0x40006AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public InputActionReference rightShot;

		[Token(Token = "0x40006AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public InputActionReference leftShot;

		[Token(Token = "0x40006B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private Transform questArea;

		[Token(Token = "0x40006B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool _quest04;

		[Token(Token = "0x40006B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
		private bool _quest05;

		[Token(Token = "0x40006B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBA")]
		private bool _quest06;

		[Token(Token = "0x40006B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBB")]
		private bool _quest07;

		[Token(Token = "0x40006B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private PXR_Input.ControllerDevice _device;

		[Token(Token = "0x40006B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private Transform leftControllerPos;

		[Token(Token = "0x40006B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private Transform rightControllerPos;

		[Token(Token = "0x40006B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private Transform movieCanvas;

		[Token(Token = "0x40006B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private VideoClip[] handMovies;

		[Token(Token = "0x40006BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private VideoClip[] manMovies;

		[Token(Token = "0x40006BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		private VideoPlayer handMovieVP;

		[Token(Token = "0x40006BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		private VideoPlayer manMovieVP;

		[Token(Token = "0x40006BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		private Transform handLoading;

		[Token(Token = "0x40006BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private Transform manLoading;

		[Token(Token = "0x6000635")]
		[Address(RVA = "0xDD6060", Offset = "0xDD6060", VA = "0xDD6060")]
		private void Start()
		{
		}

		[Token(Token = "0x6000636")]
		[Address(RVA = "0xDD6C68", Offset = "0xDD6C68", VA = "0xDD6C68")]
		private void HandMoviePrepareHandMovieHandler(VideoPlayer source)
		{
		}

		[Token(Token = "0x6000637")]
		[Address(RVA = "0xDD6CA8", Offset = "0xDD6CA8", VA = "0xDD6CA8")]
		private void ManMoviePrepareHandMovieHandler(VideoPlayer source)
		{
		}

		[Token(Token = "0x6000638")]
		[Address(RVA = "0xDD6CE8", Offset = "0xDD6CE8", VA = "0xDD6CE8")]
		private void LeftAxisPerform(InputAction.CallbackContext callbackContext)
		{
		}

		[Token(Token = "0x6000639")]
		[Address(RVA = "0xDD6D78", Offset = "0xDD6D78", VA = "0xDD6D78")]
		private void LeftAxisCancel(InputAction.CallbackContext callbackContext)
		{
		}

		[Token(Token = "0x600063A")]
		[Address(RVA = "0xDD6E0C", Offset = "0xDD6E0C", VA = "0xDD6E0C")]
		private void SprintStart()
		{
		}

		[Token(Token = "0x600063B")]
		[Address(RVA = "0xDD6E5C", Offset = "0xDD6E5C", VA = "0xDD6E5C")]
		private void SprintEnd()
		{
		}

		[Token(Token = "0x600063C")]
		[Address(RVA = "0xDD6F04", Offset = "0xDD6F04", VA = "0xDD6F04")]
		private void LeftSprintPerformed(InputAction.CallbackContext callbackContext)
		{
		}

		[Token(Token = "0x600063D")]
		[Address(RVA = "0xDD6F88", Offset = "0xDD6F88", VA = "0xDD6F88")]
		private void LeftSprintCanceled(InputAction.CallbackContext callbackContext)
		{
		}

		[Token(Token = "0x600063E")]
		[Address(RVA = "0xDD6F8C", Offset = "0xDD6F8C", VA = "0xDD6F8C")]
		private void RightSprintPerformed(InputAction.CallbackContext callbackContext)
		{
		}

		[Token(Token = "0x600063F")]
		[Address(RVA = "0xDD7010", Offset = "0xDD7010", VA = "0xDD7010")]
		private void RightSprintCanceled(InputAction.CallbackContext callbackContext)
		{
		}

		[Token(Token = "0x6000640")]
		[Address(RVA = "0xDD7014", Offset = "0xDD7014", VA = "0xDD7014")]
		private void JumpStartController()
		{
		}

		[Token(Token = "0x6000641")]
		[Address(RVA = "0xDD70C8", Offset = "0xDD70C8", VA = "0xDD70C8")]
		private void LeftJumpStarted(InputAction.CallbackContext callbackContext)
		{
		}

		[Token(Token = "0x6000642")]
		[Address(RVA = "0xDD70CC", Offset = "0xDD70CC", VA = "0xDD70CC")]
		private void RightJumpStarted(InputAction.CallbackContext callbackContext)
		{
		}

		[Token(Token = "0x6000643")]
		[Address(RVA = "0xDD70D0", Offset = "0xDD70D0", VA = "0xDD70D0")]
		private void SpawnPerformed(InputAction.CallbackContext obj)
		{
		}

		[Token(Token = "0x6000644")]
		[Address(RVA = "0xDD7134", Offset = "0xDD7134", VA = "0xDD7134")]
		public void StartShot()
		{
		}

		[Token(Token = "0x6000645")]
		[Address(RVA = "0xDD73C4", Offset = "0xDD73C4", VA = "0xDD73C4")]
		private void HideController()
		{
		}

		[Token(Token = "0x6000646")]
		[Address(RVA = "0xDD7318", Offset = "0xDD7318", VA = "0xDD7318")]
		private void ShowController()
		{
		}

		[Token(Token = "0x6000647")]
		[Address(RVA = "0xDD7454", Offset = "0xDD7454", VA = "0xDD7454")]
		private void LeftShotBallPerformed(InputAction.CallbackContext obj)
		{
		}

		[Token(Token = "0x6000648")]
		[Address(RVA = "0xDD7458", Offset = "0xDD7458", VA = "0xDD7458")]
		private void RightShotBallPerformed(InputAction.CallbackContext obj)
		{
		}

		[Token(Token = "0x6000649")]
		[Address(RVA = "0xDD745C", Offset = "0xDD745C", VA = "0xDD745C")]
		private void RightCanceled(InputAction.CallbackContext obj)
		{
		}

		[Token(Token = "0x600064A")]
		[Address(RVA = "0xDD751C", Offset = "0xDD751C", VA = "0xDD751C")]
		private void LeftCanceled(InputAction.CallbackContext obj)
		{
		}

		[Token(Token = "0x600064B")]
		[Address(RVA = "0xDD75DC", Offset = "0xDD75DC", VA = "0xDD75DC")]
		private void IsBallIn()
		{
		}

		[Token(Token = "0x600064C")]
		[Address(RVA = "0xDD7638", Offset = "0xDD7638", VA = "0xDD7638")]
		private void FirstMove()
		{
		}

		[Token(Token = "0x600064D")]
		[Address(RVA = "0xDD7740", Offset = "0xDD7740", VA = "0xDD7740")]
		private void MoveArrival()
		{
		}

		[Token(Token = "0x600064E")]
		[Address(RVA = "0xDD7818", Offset = "0xDD7818", VA = "0xDD7818")]
		private void SprintMove()
		{
		}

		[Token(Token = "0x600064F")]
		[Address(RVA = "0xDD7904", Offset = "0xDD7904", VA = "0xDD7904")]
		private void SprintArrival()
		{
		}

		[Token(Token = "0x6000650")]
		[Address(RVA = "0xDD7A04", Offset = "0xDD7A04", VA = "0xDD7A04")]
		private void JumpQuest()
		{
		}

		[Token(Token = "0x6000651")]
		[Address(RVA = "0xDD7AF4", Offset = "0xDD7AF4", VA = "0xDD7AF4")]
		private void SpawnBall()
		{
		}

		[Token(Token = "0x6000652")]
		[Address(RVA = "0xDD7C44", Offset = "0xDD7C44", VA = "0xDD7C44")]
		private void ArrivalHand(HandType handType)
		{
		}

		[Token(Token = "0x6000653")]
		[Address(RVA = "0xDD7F60", Offset = "0xDD7F60", VA = "0xDD7F60")]
		private void BallDown(Transform targetPos, HandType whichHand)
		{
		}

		[Token(Token = "0x6000654")]
		[Address(RVA = "0xDD7F9C", Offset = "0xDD7F9C", VA = "0xDD7F9C")]
		private void RemoteBallIn(BasketBall basketBall)
		{
		}

		[Token(Token = "0x6000655")]
		[Address(RVA = "0xDD801C", Offset = "0xDD801C", VA = "0xDD801C")]
		private void DunkBalIn()
		{
		}

		[Token(Token = "0x6000656")]
		[Address(RVA = "0xDD6D24", Offset = "0xDD6D24", VA = "0xDD6D24")]
		private void HideTip()
		{
		}

		[Token(Token = "0x6000657")]
		[Address(RVA = "0xDD6B18", Offset = "0xDD6B18", VA = "0xDD6B18")]
		private void ChangeMovie(int movieIndex)
		{
		}

		[Token(Token = "0x6000658")]
		[Address(RVA = "0xDD810C", Offset = "0xDD810C", VA = "0xDD810C")]
		private void PrePareWait()
		{
		}

		[Token(Token = "0x6000659")]
		[Address(RVA = "0xDD80E0", Offset = "0xDD80E0", VA = "0xDD80E0")]
		private void CloseAllMovie()
		{
		}

		[Token(Token = "0x600065A")]
		[Address(RVA = "0xDD813C", Offset = "0xDD813C", VA = "0xDD813C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600065B")]
		[Address(RVA = "0xDD8AE0", Offset = "0xDD8AE0", VA = "0xDD8AE0")]
		public ControllerManager()
		{
		}
	}
	[Token(Token = "0x2000102")]
	public class FinishQuest : MonoBehaviour
	{
		[Token(Token = "0x40006BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TutorialSO tutorial;

		[Token(Token = "0x40006C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ControllerManager cm;

		[Token(Token = "0x40006C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private string _playerTag;

		[Token(Token = "0x600065C")]
		[Address(RVA = "0xDD8AE8", Offset = "0xDD8AE8", VA = "0xDD8AE8")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600065D")]
		[Address(RVA = "0xDD8BB4", Offset = "0xDD8BB4", VA = "0xDD8BB4")]
		public FinishQuest()
		{
		}
	}
	[Token(Token = "0x2000103")]
	public class FollowPlayer : MonoBehaviour
	{
		[Token(Token = "0x40006C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform player;

		[Token(Token = "0x40006C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 _playerPos;

		[Token(Token = "0x40006C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 _canvasPos;

		[Token(Token = "0x40006C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _playerPosZ;

		[Token(Token = "0x40006C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private float distance;

		[Token(Token = "0x600065E")]
		[Address(RVA = "0xDD8C0C", Offset = "0xDD8C0C", VA = "0xDD8C0C")]
		private void Update()
		{
		}

		[Token(Token = "0x600065F")]
		[Address(RVA = "0xDD8CDC", Offset = "0xDD8CDC", VA = "0xDD8CDC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000660")]
		[Address(RVA = "0xDD8D98", Offset = "0xDD8D98", VA = "0xDD8D98")]
		public FollowPlayer()
		{
		}
	}
	[Token(Token = "0x2000104")]
	public class LineManager : MonoBehaviour
	{
		[Token(Token = "0x40006C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private InGameSet inGameSet;

		[Token(Token = "0x40006C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private TutorialSO tutorial;

		[Token(Token = "0x40006C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private LineRenderer _lineRenderer;

		[Token(Token = "0x40006CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Transform _ball;

		[Token(Token = "0x40006CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private float ballSpeed;

		[Token(Token = "0x40006CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float _height;

		[Token(Token = "0x40006CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Transform rightBallPos;

		[Token(Token = "0x40006CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Vector3 rightVerticalPos;

		[Token(Token = "0x40006CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Transform leftBallPos;

		[Token(Token = "0x40006D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Transform middlePos;

		[Token(Token = "0x40006D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Vector3 _startPos;

		[Token(Token = "0x40006D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 _endPos;

		[Token(Token = "0x40006D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool startDraw01;

		[Token(Token = "0x40006D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		public bool startDraw02;

		[Token(Token = "0x40006D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
		private bool _firstLeft;

		[Token(Token = "0x40006D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x83")]
		private bool _backRight;

		[Token(Token = "0x40006D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private ControllerManager controllerManager;

		[Token(Token = "0x6000661")]
		[Address(RVA = "0xDD8DA0", Offset = "0xDD8DA0", VA = "0xDD8DA0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000662")]
		[Address(RVA = "0xDD8FF4", Offset = "0xDD8FF4", VA = "0xDD8FF4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000663")]
		[Address(RVA = "0xDD9390", Offset = "0xDD9390", VA = "0xDD9390")]
		private void DrawLine01()
		{
		}

		[Token(Token = "0x6000664")]
		[Address(RVA = "0xDD939C", Offset = "0xDD939C", VA = "0xDD939C")]
		private void DrawLine02(HandType fromHand)
		{
		}

		[Token(Token = "0x6000665")]
		[Address(RVA = "0xDD9300", Offset = "0xDD9300", VA = "0xDD9300")]
		private void StopDraw()
		{
		}

		[Token(Token = "0x6000666")]
		[Address(RVA = "0xDD93DC", Offset = "0xDD93DC", VA = "0xDD93DC")]
		public LineManager()
		{
		}
	}
	[Token(Token = "0x2000105")]
	public class MovieManager : MonoBehaviour
	{
		[Token(Token = "0x40006D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform[] movies;

		[Token(Token = "0x6000667")]
		[Address(RVA = "0xDD93E4", Offset = "0xDD93E4", VA = "0xDD93E4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000668")]
		[Address(RVA = "0xDD9464", Offset = "0xDD9464", VA = "0xDD9464")]
		private void Update()
		{
		}

		[Token(Token = "0x6000669")]
		[Address(RVA = "0xDD93EC", Offset = "0xDD93EC", VA = "0xDD93EC")]
		public void ChangeMovie(int movieIndex)
		{
		}

		[Token(Token = "0x600066A")]
		[Address(RVA = "0xDD9468", Offset = "0xDD9468", VA = "0xDD9468")]
		public MovieManager()
		{
		}
	}
	[Token(Token = "0x2000106")]
	[CreateAssetMenu(fileName = "New Tutorial Scene Data", menuName = "ScriptableObject/Game/TutorialData")]
	public class TutorialSO : ScriptableObject
	{
		[Token(Token = "0x40006D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 startPosition;

		[Token(Token = "0x40006DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action FinishQuest01Action;

		[Token(Token = "0x40006DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action FinishQuest02Action;

		[Token(Token = "0x40006DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string blankContent;

		[Token(Token = "0x40006DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string moveTipEng;

		[Token(Token = "0x40006DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string moveTipCh;

		[Token(Token = "0x40006DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string sprintMoveTipEng;

		[Token(Token = "0x40006E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string sprintMoveTipCh;

		[Token(Token = "0x40006E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public string jumpTipEng;

		[Token(Token = "0x40006E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public string jumpTipCh;

		[Token(Token = "0x40006E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public string spawnTipEng;

		[Token(Token = "0x40006E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public string spawnTipCh;

		[Token(Token = "0x40006E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public string playBallTipEng;

		[Token(Token = "0x40006E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public string playBallTipCh;

		[Token(Token = "0x40006E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public string changHandTipEng;

		[Token(Token = "0x40006E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public string changHandTipCh;

		[Token(Token = "0x40006E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public string shotBallTipEng;

		[Token(Token = "0x40006EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public string shotBallTipCh;

		[Token(Token = "0x40006EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public string respawnBallEng;

		[Token(Token = "0x40006EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public string respawnBallCh;

		[Token(Token = "0x40006ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public string dunkTipEng;

		[Token(Token = "0x40006EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public string dunkTipCh;

		[Token(Token = "0x40006EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public string endTipEng;

		[Token(Token = "0x40006F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public string endTipCh;

		[Token(Token = "0x40006F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Action DrawLine01Action;

		[Token(Token = "0x40006F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Action<HandType> DrawLine02Action;

		[Token(Token = "0x40006F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public Action StopDrawAction;

		[Token(Token = "0x600066B")]
		[Address(RVA = "0xDD8B7C", Offset = "0xDD8B7C", VA = "0xDD8B7C")]
		public void FinishQuest01()
		{
		}

		[Token(Token = "0x600066C")]
		[Address(RVA = "0xDD8B98", Offset = "0xDD8B98", VA = "0xDD8B98")]
		public void FinishQuest02()
		{
		}

		[Token(Token = "0x600066D")]
		[Address(RVA = "0xDD7F28", Offset = "0xDD7F28", VA = "0xDD7F28")]
		public void StartDrawLine01()
		{
		}

		[Token(Token = "0x600066E")]
		[Address(RVA = "0xDD7F44", Offset = "0xDD7F44", VA = "0xDD7F44")]
		public void StartDrawLine02(HandType fromHand)
		{
		}

		[Token(Token = "0x600066F")]
		[Address(RVA = "0xDD7438", Offset = "0xDD7438", VA = "0xDD7438")]
		public void StopDrawLine()
		{
		}

		[Token(Token = "0x6000670")]
		[Address(RVA = "0xDD9470", Offset = "0xDD9470", VA = "0xDD9470")]
		public TutorialSO()
		{
		}
	}
	[Token(Token = "0x2000107")]
	public class UIPointerEvent : PointerEvents
	{
		[Token(Token = "0x40006F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool _scaleThisUI;

		[Token(Token = "0x40006F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		[SerializeField]
		private bool _scaleByCode;

		[Token(Token = "0x40006F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private Vector3 scaledUI;

		[Token(Token = "0x40006F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private float toleranceFloat;

		[Token(Token = "0x40006F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[SerializeField]
		private float scaleTime;

		[Token(Token = "0x40006F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 _initial;

		[Token(Token = "0x40006FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float _initialScale;

		[Token(Token = "0x40006FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float _targetScale;

		[Token(Token = "0x40006FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Animator _animator;

		[Token(Token = "0x40006FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int StartScale;

		[Token(Token = "0x40006FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly int EndScale;

		[Token(Token = "0x6000671")]
		[Address(RVA = "0xDD97B8", Offset = "0xDD97B8", VA = "0xDD97B8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000672")]
		[Address(RVA = "0xDD9848", Offset = "0xDD9848", VA = "0xDD9848", Slot = "10")]
		public override void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000673")]
		[Address(RVA = "0xDD98E8", Offset = "0xDD98E8", VA = "0xDD98E8", Slot = "11")]
		public override void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000674")]
		[Address(RVA = "0xDD9980", Offset = "0xDD9980", VA = "0xDD9980")]
		private void Update()
		{
		}

		[Token(Token = "0x6000675")]
		[Address(RVA = "0xDD98DC", Offset = "0xDD98DC", VA = "0xDD98DC")]
		private void ScaleUI()
		{
		}

		[Token(Token = "0x6000676")]
		[Address(RVA = "0xDD9978", Offset = "0xDD9978", VA = "0xDD9978")]
		private void BackUI()
		{
		}

		[Token(Token = "0x6000677")]
		[Address(RVA = "0xDD9990", Offset = "0xDD9990", VA = "0xDD9990")]
		private void ScaleUIByCode()
		{
		}

		[Token(Token = "0x6000678")]
		[Address(RVA = "0xDD9B74", Offset = "0xDD9B74", VA = "0xDD9B74")]
		public UIPointerEvent()
		{
		}
	}
	[Token(Token = "0x2000108")]
	public class PausePanel : MonoBehaviourPunCallbacks
	{
		[Token(Token = "0x40006FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private InGameSet inGameSet;

		[Token(Token = "0x4000700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private BNG.Button resumeButton;

		[Token(Token = "0x4000701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private BNG.Button backMainButton;

		[Token(Token = "0x4000702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private BNG.Button quitButton;

		[Token(Token = "0x4000703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private UnityEngine.UI.Button resumeBtn;

		[Token(Token = "0x4000704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private UnityEngine.UI.Button backMainBtn;

		[Token(Token = "0x4000705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private UnityEngine.UI.Button quitBtn;

		[Token(Token = "0x4000706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool _addListener;

		[Token(Token = "0x4000707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool quitGameLeave;

		[Token(Token = "0x4000708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		private bool backMainLeave;

		[Token(Token = "0x600067A")]
		[Address(RVA = "0xDD9C20", Offset = "0xDD9C20", VA = "0xDD9C20")]
		private new void OnEnable()
		{
		}

		[Token(Token = "0x600067B")]
		[Address(RVA = "0xDD9ED0", Offset = "0xDD9ED0", VA = "0xDD9ED0")]
		private void ClosePanel()
		{
		}

		[Token(Token = "0x600067C")]
		[Address(RVA = "0xDD9F00", Offset = "0xDD9F00", VA = "0xDD9F00")]
		private void QuitGame()
		{
		}

		[Token(Token = "0x600067D")]
		[Address(RVA = "0xDDA060", Offset = "0xDDA060", VA = "0xDDA060")]
		private void BackMain()
		{
		}

		[Token(Token = "0x600067E")]
		[Address(RVA = "0xDDA1F4", Offset = "0xDDA1F4", VA = "0xDDA1F4", Slot = "31")]
		public override void OnLeftRoom()
		{
		}

		[Token(Token = "0x600067F")]
		[Address(RVA = "0xDDA2F0", Offset = "0xDDA2F0", VA = "0xDDA2F0")]
		public PausePanel()
		{
		}
	}
	[Token(Token = "0x2000109")]
	public class PausePanelManager : MonoBehaviour
	{
		[Token(Token = "0x4000709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private InputActionAsset inputActionAsset;

		[Token(Token = "0x400070A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("键位")]
		[SerializeField]
		private InputActionReference pauseMenu;

		[Token(Token = "0x400070B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("3D面板倾斜角度")]
		[SerializeField]
		private float rotateAngle;

		[Token(Token = "0x400070C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[Header("玩家的外部引用")]
		private PausePanelManagerReference reference;

		[Token(Token = "0x400070D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform _pausePanel;

		[Token(Token = "0x400070E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float distance;

		[Token(Token = "0x400070F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 _newPos;

		[Token(Token = "0x4000710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[Header("面板高度")]
		private float height;

		[Token(Token = "0x4000711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GameObject _setPanelObj;

		[Token(Token = "0x1700006D")]
		private SmoothMove smoothMove
		{
			[Token(Token = "0x6000686")]
			[Address(RVA = "0xDDA568", Offset = "0xDDA568", VA = "0xDDA568")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006E")]
		private PlayerController playerController
		{
			[Token(Token = "0x6000687")]
			[Address(RVA = "0xDDA584", Offset = "0xDDA584", VA = "0xDDA584")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700006F")]
		private Transform pausePos
		{
			[Token(Token = "0x6000688")]
			[Address(RVA = "0xDDA5A0", Offset = "0xDDA5A0", VA = "0xDDA5A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000070")]
		private Transform player
		{
			[Token(Token = "0x6000689")]
			[Address(RVA = "0xDDA5BC", Offset = "0xDDA5BC", VA = "0xDDA5BC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600068A")]
		[Address(RVA = "0xDDA5D8", Offset = "0xDDA5D8", VA = "0xDDA5D8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600068B")]
		[Address(RVA = "0xDDA678", Offset = "0xDDA678", VA = "0xDDA678")]
		private void Update()
		{
		}

		[Token(Token = "0x600068C")]
		[Address(RVA = "0xDDAA1C", Offset = "0xDDAA1C", VA = "0xDDAA1C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600068D")]
		[Address(RVA = "0xDDAAC0", Offset = "0xDDAAC0", VA = "0xDDAAC0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600068E")]
		[Address(RVA = "0xDDAB60", Offset = "0xDDAB60", VA = "0xDDAB60")]
		private void OpenClosePause(InputAction.CallbackContext obj)
		{
		}

		[Token(Token = "0x600068F")]
		[Address(RVA = "0xDDAF3C", Offset = "0xDDAF3C", VA = "0xDDAF3C")]
		public void SetupReference(PausePanelManagerReference reference)
		{
		}

		[Token(Token = "0x6000690")]
		[Address(RVA = "0xDDAF44", Offset = "0xDDAF44", VA = "0xDDAF44")]
		public PausePanelManager()
		{
		}
	}
	[Token(Token = "0x200010A")]
	public class UIAnimationEvent : MonoBehaviour
	{
		[Token(Token = "0x4000712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private UIManager uIManager;

		[Token(Token = "0x6000691")]
		[Address(RVA = "0xDDAF60", Offset = "0xDDAF60", VA = "0xDDAF60")]
		private void HideObj()
		{
		}

		[Token(Token = "0x6000692")]
		[Address(RVA = "0xDDAF90", Offset = "0xDDAF90", VA = "0xDDAF90")]
		public void StartConnect()
		{
		}

		[Token(Token = "0x6000693")]
		[Address(RVA = "0xDDB078", Offset = "0xDDB078", VA = "0xDDB078")]
		public void ShowNetServer()
		{
		}

		[Token(Token = "0x6000694")]
		[Address(RVA = "0xDDB1B4", Offset = "0xDDB1B4", VA = "0xDDB1B4")]
		public void ShowMenu()
		{
		}

		[Token(Token = "0x6000695")]
		[Address(RVA = "0xDDB1F8", Offset = "0xDDB1F8", VA = "0xDDB1F8")]
		public void WakeButton()
		{
		}

		[Token(Token = "0x6000696")]
		[Address(RVA = "0xDDB2A4", Offset = "0xDDB2A4", VA = "0xDDB2A4")]
		public void ToGame()
		{
		}

		[Token(Token = "0x6000697")]
		[Address(RVA = "0xDDB3E0", Offset = "0xDDB3E0", VA = "0xDDB3E0")]
		public UIAnimationEvent()
		{
		}
	}
	[Token(Token = "0x200010B")]
	public class CreatRoomUIManager : MonoBehaviour
	{
		[Token(Token = "0x4000713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private UnityEngine.UI.Button[] numberBtns;

		[Token(Token = "0x4000714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private TMP_InputField roomNumber;

		[Token(Token = "0x4000715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private UnityEngine.UI.Button deleteBtn;

		[Token(Token = "0x4000716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private UnityEngine.UI.Button confirmBtn;

		[Token(Token = "0x4000717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private UnityEngine.UI.Button createRoomBackBtn;

		[Token(Token = "0x4000718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Transform menuPanel;

		[Token(Token = "0x4000719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private UIManager uIManager;

		[Token(Token = "0x400071A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Animator _animator;

		[Token(Token = "0x400071B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int _createOut;

		[Token(Token = "0x400071C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static int _createOutBack;

		[Token(Token = "0x6000698")]
		[Address(RVA = "0xDDB3E8", Offset = "0xDDB3E8", VA = "0xDDB3E8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000699")]
		[Address(RVA = "0xDDB658", Offset = "0xDDB658", VA = "0xDDB658")]
		private void ChangeIFText(int btnIndex)
		{
		}

		[Token(Token = "0x600069A")]
		[Address(RVA = "0xDDB6E0", Offset = "0xDDB6E0", VA = "0xDDB6E0")]
		private void DeleteRoomNumber()
		{
		}

		[Token(Token = "0x600069B")]
		[Address(RVA = "0xDDB72C", Offset = "0xDDB72C", VA = "0xDDB72C")]
		private void OutAnimator()
		{
		}

		[Token(Token = "0x600069C")]
		[Address(RVA = "0xDDB850", Offset = "0xDDB850", VA = "0xDDB850")]
		private void CloseCreatRoomPanel()
		{
		}

		[Token(Token = "0x600069D")]
		[Address(RVA = "0xDDB7FC", Offset = "0xDDB7FC", VA = "0xDDB7FC")]
		public void ResetContent()
		{
		}

		[Token(Token = "0x600069E")]
		[Address(RVA = "0xDDB6BC", Offset = "0xDDB6BC", VA = "0xDDB6BC")]
		public int GetRoomNumberLength()
		{
			return default(int);
		}

		[Token(Token = "0x600069F")]
		[Address(RVA = "0xDDB8E8", Offset = "0xDDB8E8", VA = "0xDDB8E8")]
		public string GetRoomNumber()
		{
			return null;
		}

		[Token(Token = "0x60006A0")]
		[Address(RVA = "0xDDB904", Offset = "0xDDB904", VA = "0xDDB904")]
		public void Connect2Master()
		{
		}

		[Token(Token = "0x60006A1")]
		[Address(RVA = "0xDDBA0C", Offset = "0xDDBA0C", VA = "0xDDBA0C")]
		public CreatRoomUIManager()
		{
		}
	}
	[Token(Token = "0x200010D")]
	public class PausePanelScr : MonoBehaviour
	{
		[Token(Token = "0x400071F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameSet gameSet;

		[Token(Token = "0x4000720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private InGameSetUISO inGameSetUI;

		[Token(Token = "0x4000721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private InGameSet inGameSet;

		[Token(Token = "0x4000722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private UnityEngine.UI.Button back2MainBtn;

		[Token(Token = "0x4000723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private UnityEngine.UI.Button setBtn;

		[Token(Token = "0x4000724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private UnityEngine.UI.Button closeBtn;

		[Token(Token = "0x4000725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private UnityEngine.UI.Button quitBtn;

		[Token(Token = "0x4000726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private GameObject setPanelObj;

		[Token(Token = "0x60006A6")]
		[Address(RVA = "0xDDBAD4", Offset = "0xDDBAD4", VA = "0xDDBAD4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60006A7")]
		[Address(RVA = "0xDDBC6C", Offset = "0xDDBC6C", VA = "0xDDBC6C")]
		private void OpenSetPanel()
		{
		}

		[Token(Token = "0x60006A8")]
		[Address(RVA = "0xDDBC8C", Offset = "0xDDBC8C", VA = "0xDDBC8C")]
		private void LoadStartScene()
		{
		}

		[Token(Token = "0x60006A9")]
		[Address(RVA = "0xDDBD08", Offset = "0xDDBD08", VA = "0xDDBD08")]
		private void ClosePausePanel()
		{
		}

		[Token(Token = "0x60006AA")]
		[Address(RVA = "0xDDBD2C", Offset = "0xDDBD2C", VA = "0xDDBD2C")]
		private void QuitGame()
		{
		}

		[Token(Token = "0x60006AB")]
		[Address(RVA = "0xDDBD34", Offset = "0xDDBD34", VA = "0xDDBD34")]
		public PausePanelScr()
		{
		}
	}
	[Token(Token = "0x200010E")]
	public class PracticeScore : MonoBehaviour
	{
		[Token(Token = "0x4000727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform scoreTransform;

		[Token(Token = "0x4000728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Sprite[] numberSprites;

		[Token(Token = "0x4000729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Image _firstNumberImg;

		[Token(Token = "0x400072A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Image _secondNumberImg;

		[Token(Token = "0x60006AC")]
		[Address(RVA = "0xDDBD3C", Offset = "0xDDBD3C", VA = "0xDDBD3C")]
		private void Start()
		{
		}

		[Token(Token = "0x60006AD")]
		[Address(RVA = "0xDDBDE0", Offset = "0xDDBDE0", VA = "0xDDBDE0")]
		public void ChangeScore(int number)
		{
		}

		[Token(Token = "0x60006AE")]
		[Address(RVA = "0xDDBE9C", Offset = "0xDDBE9C", VA = "0xDDBE9C")]
		public PracticeScore()
		{
		}
	}
	[Token(Token = "0x200010F")]
	public class ReloadCanvas : MonoBehaviour
	{
		[Token(Token = "0x2000110")]
		[CompilerGenerated]
		private sealed class <LoadLoadScene>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000730")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000731")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000732")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ReloadCanvas <>4__this;

			[Token(Token = "0x4000733")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string sceneName;

			[Token(Token = "0x17000072")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60006B9")]
				[Address(RVA = "0xDDC2B8", Offset = "0xDDC2B8", VA = "0xDDC2B8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000073")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60006BB")]
				[Address(RVA = "0xDDC300", Offset = "0xDDC300", VA = "0xDDC300", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60006B6")]
			[Address(RVA = "0xDDBFE0", Offset = "0xDDBFE0", VA = "0xDDBFE0")]
			[DebuggerHidden]
			public <LoadLoadScene>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x60006B7")]
			[Address(RVA = "0xDDC174", Offset = "0xDDC174", VA = "0xDDC174", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60006B8")]
			[Address(RVA = "0xDDC178", Offset = "0xDDC178", VA = "0xDDC178", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60006BA")]
			[Address(RVA = "0xDDC2C0", Offset = "0xDDC2C0", VA = "0xDDC2C0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400072B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Animator panelAnimator;

		[Token(Token = "0x400072C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private string targetSceneName;

		[Token(Token = "0x400072D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AsyncOperation _asyncOperation;

		[Token(Token = "0x400072E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly int Fadein;

		[Token(Token = "0x400072F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static readonly int Fadeout;

		[Token(Token = "0x17000071")]
		public string TargetSceneName
		{
			[Token(Token = "0x60006B0")]
			[Address(RVA = "0xDDBF10", Offset = "0xDDBF10", VA = "0xDDBF10")]
			set
			{
			}
		}

		[Token(Token = "0x60006AF")]
		[Address(RVA = "0xDDBEA4", Offset = "0xDDBEA4", VA = "0xDDBEA4")]
		private void Start()
		{
		}

		[Token(Token = "0x60006B1")]
		[Address(RVA = "0xDDBF50", Offset = "0xDDBF50", VA = "0xDDBF50")]
		[IteratorStateMachine(typeof(<LoadLoadScene>d__8))]
		private IEnumerator LoadLoadScene(string sceneName)
		{
			return null;
		}

		[Token(Token = "0x60006B2")]
		[Address(RVA = "0xDDC008", Offset = "0xDDC008", VA = "0xDDC008")]
		private void FadeOut()
		{
		}

		[Token(Token = "0x60006B3")]
		[Address(RVA = "0xDDC078", Offset = "0xDDC078", VA = "0xDDC078")]
		private void DestroyObj()
		{
		}

		[Token(Token = "0x60006B4")]
		[Address(RVA = "0xDDC0D0", Offset = "0xDDC0D0", VA = "0xDDC0D0")]
		public ReloadCanvas()
		{
		}
	}
	[Token(Token = "0x2000111")]
	public class Score : MonoBehaviour
	{
		[Token(Token = "0x4000734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform leftScoreTransform;

		[Token(Token = "0x4000735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform rightScoreTransform;

		[Token(Token = "0x4000736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Sprite[] numberSprites;

		[Token(Token = "0x4000737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Image _leftFirstNumberImg;

		[Token(Token = "0x4000738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Image _leftSecondNumberImg;

		[Token(Token = "0x4000739")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Image _rightFirstNumberImg;

		[Token(Token = "0x400073A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Image _rightSecondNumberImg;

		[Token(Token = "0x60006BC")]
		[Address(RVA = "0xDDC308", Offset = "0xDDC308", VA = "0xDDC308")]
		private void Start()
		{
		}

		[Token(Token = "0x60006BD")]
		[Address(RVA = "0xDDC414", Offset = "0xDDC414", VA = "0xDDC414")]
		public void LeftChangeScore(int number)
		{
		}

		[Token(Token = "0x60006BE")]
		[Address(RVA = "0xDDC4D0", Offset = "0xDDC4D0", VA = "0xDDC4D0")]
		public void RightChangeScore(int number)
		{
		}

		[Token(Token = "0x60006BF")]
		[Address(RVA = "0xDDC58C", Offset = "0xDDC58C", VA = "0xDDC58C")]
		public Score()
		{
		}
	}
	[Token(Token = "0x2000112")]
	public class SetPanelScr : MonoBehaviour
	{
		[Token(Token = "0x400073B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameSet gameSet;

		[Token(Token = "0x400073C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private InGameSetUISO inGameSetUI;

		[Token(Token = "0x400073D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private AudioMixer audioMixer;

		[Token(Token = "0x400073E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private UnityEngine.UI.Button closeBtn;

		[Token(Token = "0x400073F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private UnityEngine.UI.Slider volumeSlider;

		[Token(Token = "0x4000740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private TextMeshProUGUI volumeText;

		[Token(Token = "0x4000741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Toggle muteTgl;

		[Token(Token = "0x4000742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private UnityEngine.UI.Slider speedSlider;

		[Token(Token = "0x4000743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private TextMeshProUGUI speedValueText;

		[Token(Token = "0x4000744")]
		private const string MasterVolume = "MasterEnvVolume";

		[Token(Token = "0x4000745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Debounce _volumeDebounce;

		[Token(Token = "0x4000746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Debounce _speedDebounce;

		[Token(Token = "0x60006C0")]
		[Address(RVA = "0xDDC594", Offset = "0xDDC594", VA = "0xDDC594")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60006C1")]
		[Address(RVA = "0xDDC95C", Offset = "0xDDC95C", VA = "0xDDC95C")]
		private void ChangePlayerSpeed(float speed)
		{
		}

		[Token(Token = "0x60006C2")]
		[Address(RVA = "0xDDCAA0", Offset = "0xDDCAA0", VA = "0xDDCAA0")]
		private void SaveSpeed()
		{
		}

		[Token(Token = "0x60006C3")]
		[Address(RVA = "0xDDCBFC", Offset = "0xDDCBFC", VA = "0xDDCBFC")]
		private void ClickToCloseSetPanel(int index)
		{
		}

		[Token(Token = "0x60006C4")]
		[Address(RVA = "0xDDCC64", Offset = "0xDDCC64", VA = "0xDDCC64")]
		private void CloseSetPanel()
		{
		}

		[Token(Token = "0x60006C5")]
		[Address(RVA = "0xDDCCB0", Offset = "0xDDCCB0", VA = "0xDDCCB0")]
		private void VolumeChanged(float volumeValue)
		{
		}

		[Token(Token = "0x60006C6")]
		[Address(RVA = "0xDDCE04", Offset = "0xDDCE04", VA = "0xDDCE04")]
		private void SaveVolume()
		{
		}

		[Token(Token = "0x60006C7")]
		[Address(RVA = "0xDDC854", Offset = "0xDDC854", VA = "0xDDC854")]
		private void MuteVolume(bool isMute)
		{
		}

		[Token(Token = "0x60006C8")]
		[Address(RVA = "0xDDCF60", Offset = "0xDDCF60", VA = "0xDDCF60")]
		public SetPanelScr()
		{
		}
	}
	[Token(Token = "0x2000113")]
	public class UIManager : MonoBehaviourPunCallbacks, IInRoomCallbacks
	{
		[Token(Token = "0x4000747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameSet gameSet;

		[Token(Token = "0x4000748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private InGameSet inGameSet;

		[Token(Token = "0x4000749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private InGameSetUISO inGameSetUI;

		[Token(Token = "0x400074A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform _startCanvas;

		[Token(Token = "0x400074B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform _setPanel;

		[Token(Token = "0x400074C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("设置面板位置：")]
		[SerializeField]
		private Transform setPos;

		[Token(Token = "0x400074D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Animator _menuAnimator;

		[Token(Token = "0x400074E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int menuOut;

		[Token(Token = "0x400074F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Animator _connectAnimator;

		[Token(Token = "0x4000750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static int connectEnd;

		[Token(Token = "0x4000751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Animator _netServerAnimator;

		[Token(Token = "0x4000752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static int netServerEnd;

		[Token(Token = "0x4000753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Animator _lagAnimator;

		[Token(Token = "0x4000754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		private static int lagEnd;

		[Token(Token = "0x4000755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("3D UI")]
		[SerializeField]
		private BNG.Button setButton;

		[Token(Token = "0x4000756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private BNG.Button quitButton;

		[Token(Token = "0x4000757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private BNG.Button practiceButton;

		[Token(Token = "0x4000758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private BNG.Button quickJoinButton;

		[Token(Token = "0x4000759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private BNG.Button tutButton;

		[Token(Token = "0x400075A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private BNG.Button backButton;

		[Token(Token = "0x400075B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private BNG.Button quitPanelQuitButton;

		[Token(Token = "0x400075C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private BNG.Button quitPanelBackButton;

		[Token(Token = "0x400075D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Header("面板")]
		[SerializeField]
		private Transform menuPanel;

		[Token(Token = "0x400075E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private Transform netServerPanel;

		[Token(Token = "0x400075F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private Transform lagPanel;

		[Token(Token = "0x4000760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private Transform connectPanel;

		[Token(Token = "0x4000761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private TextMeshProUGUI lagText;

		[Token(Token = "0x4000762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private TextMeshProUGUI connectErrorText;

		[Token(Token = "0x4000763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private Transform connectBackBtn;

		[Token(Token = "0x4000764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		private Transform quitPanel;

		[Token(Token = "0x4000765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		private Transform createRoomPanel;

		[Token(Token = "0x4000766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private bool _isConnect;

		[Token(Token = "0x4000767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		[Header("射线UI_Button")]
		private UnityEngine.UI.Button practiceBtn;

		[Token(Token = "0x4000768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		private UnityEngine.UI.Button creatRoomBtn;

		[Token(Token = "0x4000769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private UnityEngine.UI.Button quickJoinBtn;

		[Token(Token = "0x400076A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		private UnityEngine.UI.Button tutBtn;

		[Token(Token = "0x400076B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		private UnityEngine.UI.Button netServerBackBtn;

		[Token(Token = "0x400076C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		private UnityEngine.UI.Button connectBtn;

		[Token(Token = "0x400076D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[Header("载入动画的图片")]
		[SerializeField]
		private Transform loadImage;

		[Token(Token = "0x400076E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		private Transform playerLoadImg;

		[Token(Token = "0x400076F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[SerializeField]
		private Image anotherPlayerImg;

		[Token(Token = "0x4000770")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[Header("两个用户名：")]
		[SerializeField]
		private TextMeshProUGUI leftUserName;

		[Token(Token = "0x4000771")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[SerializeField]
		private TextMeshProUGUI anotherPlayerName;

		[Token(Token = "0x4000772")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[SerializeField]
		private TextMeshProUGUI[] titleTxtArray;

		[Token(Token = "0x4000773")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[SerializeField]
		private Transform startGame;

		[Token(Token = "0x4000774")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[SerializeField]
		private UnityEngine.UI.Button quitPanelQuitBtn;

		[Token(Token = "0x4000775")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[SerializeField]
		private UnityEngine.UI.Button quitPanelBackBtn;

		[Token(Token = "0x4000776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		[SerializeField]
		private UnityEngine.UI.Button quitBtn;

		[Token(Token = "0x4000777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[SerializeField]
		private UnityEngine.UI.Button setBtn;

		[Token(Token = "0x4000778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private int _usedLanguage;

		[Token(Token = "0x4000779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		private bool _singlePlayerEnter;

		[Token(Token = "0x400077A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18D")]
		private bool _usePhotonServerV4;

		[Token(Token = "0x400077B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private string _localUserDisplayName;

		[Token(Token = "0x400077C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public UserDefinedRoom userDefinedRoom;

		[Token(Token = "0x60006CA")]
		[Address(RVA = "0xDDD000", Offset = "0xDDD000", VA = "0xDDD000")]
		private void Awake()
		{
		}

		[Token(Token = "0x60006CB")]
		[Address(RVA = "0xDDD208", Offset = "0xDDD208", VA = "0xDDD208")]
		private int GetPlayerCount()
		{
			return default(int);
		}

		[Token(Token = "0x60006CC")]
		[Address(RVA = "0xDDD268", Offset = "0xDDD268", VA = "0xDDD268")]
		private void Start()
		{
		}

		[Token(Token = "0x60006CD")]
		[Address(RVA = "0xDDDCCC", Offset = "0xDDDCCC", VA = "0xDDDCCC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60006CE")]
		[Address(RVA = "0xDDDDD4", Offset = "0xDDDDD4", VA = "0xDDDDD4")]
		private void SetGame()
		{
		}

		[Token(Token = "0x60006CF")]
		[Address(RVA = "0xDDDF70", Offset = "0xDDDF70", VA = "0xDDDF70")]
		private void Back2Main()
		{
		}

		[Token(Token = "0x60006D0")]
		[Address(RVA = "0xDDE078", Offset = "0xDDE078", VA = "0xDDE078")]
		private void EndGame()
		{
		}

		[Token(Token = "0x60006D1")]
		[Address(RVA = "0xDDE0E0", Offset = "0xDDE0E0", VA = "0xDDE0E0")]
		private void ShowQuitPanel()
		{
		}

		[Token(Token = "0x60006D2")]
		[Address(RVA = "0xDDE13C", Offset = "0xDDE13C", VA = "0xDDE13C")]
		private void CloseSetPanel()
		{
		}

		[Token(Token = "0x60006D3")]
		[Address(RVA = "0xDDE168", Offset = "0xDDE168", VA = "0xDDE168")]
		private void LoadNexScene(int index)
		{
		}

		[Token(Token = "0x60006D4")]
		[Address(RVA = "0xDDB91C", Offset = "0xDDB91C", VA = "0xDDB91C")]
		public void Connect2Master()
		{
		}

		[Token(Token = "0x60006D5")]
		[Address(RVA = "0xDDE2B0", Offset = "0xDDE2B0", VA = "0xDDE2B0")]
		private void ShowCreateRoom()
		{
		}

		[Token(Token = "0x60006D6")]
		[Address(RVA = "0xDDE2E4", Offset = "0xDDE2E4", VA = "0xDDE2E4")]
		private void CloseMenuPanel()
		{
		}

		[Token(Token = "0x60006D7")]
		[Address(RVA = "0xDDE284", Offset = "0xDDE284", VA = "0xDDE284")]
		private void ShowConnectPanel()
		{
		}

		[Token(Token = "0x60006D8")]
		[Address(RVA = "0xDDE1E8", Offset = "0xDDE1E8", VA = "0xDDE1E8")]
		private void ShowConnectLoading()
		{
		}

		[Token(Token = "0x60006D9")]
		[Address(RVA = "0xDDE354", Offset = "0xDDE354", VA = "0xDDE354")]
		private void ShowConnectError(string errorMsg)
		{
		}

		[Token(Token = "0x60006DA")]
		[Address(RVA = "0xDDE3BC", Offset = "0xDDE3BC", VA = "0xDDE3BC", Slot = "45")]
		public override void OnConnectedToMaster()
		{
		}

		[Token(Token = "0x60006DB")]
		[Address(RVA = "0xDDE518", Offset = "0xDDE518", VA = "0xDDE518")]
		public void JoinOrCreateDefinedRoom()
		{
		}

		[Token(Token = "0x60006DC")]
		[Address(RVA = "0xDDE670", Offset = "0xDDE670", VA = "0xDDE670", Slot = "38")]
		public override void OnDisconnected(DisconnectCause cause)
		{
		}

		[Token(Token = "0x60006DD")]
		[Address(RVA = "0xDDE8A0", Offset = "0xDDE8A0", VA = "0xDDE8A0", Slot = "41")]
		public override void OnJoinedRoom()
		{
		}

		[Token(Token = "0x60006DE")]
		[Address(RVA = "0xDDED18", Offset = "0xDDED18", VA = "0xDDED18", Slot = "34")]
		public override void OnJoinRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x60006DF")]
		[Address(RVA = "0xDDEDB0", Offset = "0xDDEDB0", VA = "0xDDEDB0", Slot = "44")]
		public override void OnJoinRandomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x60006E0")]
		[Address(RVA = "0xDDF03C", Offset = "0xDDF03C", VA = "0xDDF03C", Slot = "33")]
		public override void OnCreateRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x60006E1")]
		[Address(RVA = "0xDDF1EC", Offset = "0xDDF1EC", VA = "0xDDF1EC", Slot = "42")]
		public override void OnPlayerEnteredRoom(Player newPlayer)
		{
		}

		[Token(Token = "0x60006E2")]
		[Address(RVA = "0xDDF2F0", Offset = "0xDDF2F0", VA = "0xDDF2F0", Slot = "43")]
		public override void OnPlayerLeftRoom(Player otherPlayer)
		{
		}

		[Token(Token = "0x60006E3")]
		[Address(RVA = "0xDDAFA8", Offset = "0xDDAFA8", VA = "0xDDAFA8")]
		public void StartConnectInvoke()
		{
		}

		[Token(Token = "0x60006E4")]
		[Address(RVA = "0xDDB090", Offset = "0xDDB090", VA = "0xDDB090")]
		public void ShowNetServerInvoke()
		{
		}

		[Token(Token = "0x60006E5")]
		[Address(RVA = "0xDDEA58", Offset = "0xDDEA58", VA = "0xDDEA58")]
		private void ShowHidePlayerUI()
		{
		}

		[Token(Token = "0x60006E6")]
		[Address(RVA = "0xDDB1CC", Offset = "0xDDB1CC", VA = "0xDDB1CC")]
		public void ShowMenu()
		{
		}

		[Token(Token = "0x60006E7")]
		[Address(RVA = "0xDDE898", Offset = "0xDDE898", VA = "0xDDE898")]
		public void ErrorMessage(string errorMsg)
		{
		}

		[Token(Token = "0x60006E8")]
		[Address(RVA = "0xDDB210", Offset = "0xDDB210", VA = "0xDDB210")]
		public void WakeButton()
		{
		}

		[Token(Token = "0x60006E9")]
		[Address(RVA = "0xDDECEC", Offset = "0xDDECEC", VA = "0xDDECEC")]
		private void StartLoadMultiPlayerGame()
		{
		}

		[Token(Token = "0x60006EA")]
		[Address(RVA = "0xDDF3E0", Offset = "0xDDF3E0", VA = "0xDDF3E0")]
		private void ExitLoadMultiPlayerGame()
		{
		}

		[Token(Token = "0x60006EB")]
		[Address(RVA = "0xDDB2BC", Offset = "0xDDB2BC", VA = "0xDDB2BC")]
		public void ToGame()
		{
		}

		[Token(Token = "0x60006EC")]
		[Address(RVA = "0xDDE620", Offset = "0xDDE620", VA = "0xDDE620")]
		private void PunJoinRandomRoom()
		{
		}

		[Token(Token = "0x60006ED")]
		[Address(RVA = "0xDDF52C", Offset = "0xDDF52C", VA = "0xDDF52C")]
		private void PunJoinOrCreateRoom()
		{
		}

		[Token(Token = "0x60006EE")]
		[Address(RVA = "0xDDEF80", Offset = "0xDDEF80", VA = "0xDDEF80")]
		private void PunCreateRoom()
		{
		}

		[Token(Token = "0x60006EF")]
		[Address(RVA = "0xDDF5BC", Offset = "0xDDF5BC", VA = "0xDDF5BC")]
		private string CreateRoomName()
		{
			return null;
		}

		[Token(Token = "0x60006F0")]
		[Address(RVA = "0xDDF66C", Offset = "0xDDF66C", VA = "0xDDF66C")]
		private Photon.Realtime.RoomOptions CreateRoomOptions()
		{
			return null;
		}

		[Token(Token = "0x60006F1")]
		[Address(RVA = "0xDDDA50", Offset = "0xDDDA50", VA = "0xDDDA50")]
		private void InitPicoCoreService()
		{
		}

		[Token(Token = "0x60006F2")]
		[Address(RVA = "0xDDDB78", Offset = "0xDDDB78", VA = "0xDDDB78")]
		private void GetUserInfo()
		{
		}

		[Token(Token = "0x60006F3")]
		[Address(RVA = "0xDDF6D8", Offset = "0xDDF6D8", VA = "0xDDF6D8")]
		private void SetPunNickName(string name)
		{
		}

		[Token(Token = "0x60006F4")]
		[Address(RVA = "0xDDF40C", Offset = "0xDDF40C", VA = "0xDDF40C")]
		private string GetLocalPlayerName()
		{
			return null;
		}

		[Token(Token = "0x60006F5")]
		[Address(RVA = "0xDDF468", Offset = "0xDDF468", VA = "0xDDF468")]
		private string GetRemotePlayerName()
		{
			return null;
		}

		[Token(Token = "0x60006F6")]
		[Address(RVA = "0xDDF6D0", Offset = "0xDDF6D0", VA = "0xDDF6D0")]
		private bool HasPicoPlatformFeature()
		{
			return default(bool);
		}

		[Token(Token = "0x60006F7")]
		[Address(RVA = "0xDDF79C", Offset = "0xDDF79C", VA = "0xDDF79C")]
		public UIManager()
		{
		}
	}
	[Token(Token = "0x2000114")]
	public class WallIgnoreBall : MonoBehaviour
	{
		[Token(Token = "0x400077D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Collider _wallCollider;

		[Token(Token = "0x400077E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private InGameSet inGameSet;

		[Token(Token = "0x400077F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Collider _currentBallCollider;

		[Token(Token = "0x6000706")]
		[Address(RVA = "0xDE0FB8", Offset = "0xDE0FB8", VA = "0xDE0FB8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000707")]
		[Address(RVA = "0xDE10D4", Offset = "0xDE10D4", VA = "0xDE10D4")]
		private void IgnoreCurrentBall(Transform currentBall)
		{
		}

		[Token(Token = "0x6000708")]
		[Address(RVA = "0xDE114C", Offset = "0xDE114C", VA = "0xDE114C")]
		public WallIgnoreBall()
		{
		}
	}
	[Token(Token = "0x2000115")]
	public class GetServerVersion : MonoBehaviour
	{
		[Token(Token = "0x2000116")]
		[CompilerGenerated]
		private sealed class <GetData>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000785")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000786")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000787")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int languageIndex;

			[Token(Token = "0x4000788")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public GetServerVersion <>4__this;

			[Token(Token = "0x17000074")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000711")]
				[Address(RVA = "0xDE1794", Offset = "0xDE1794", VA = "0xDE1794", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000075")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000713")]
				[Address(RVA = "0xDE17DC", Offset = "0xDE17DC", VA = "0xDE17DC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600070E")]
			[Address(RVA = "0xDE13C8", Offset = "0xDE13C8", VA = "0xDE13C8")]
			[DebuggerHidden]
			public <GetData>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x600070F")]
			[Address(RVA = "0xDE14E0", Offset = "0xDE14E0", VA = "0xDE14E0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000710")]
			[Address(RVA = "0xDE14E4", Offset = "0xDE14E4", VA = "0xDE14E4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000712")]
			[Address(RVA = "0xDE179C", Offset = "0xDE179C", VA = "0xDE179C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private InGameSetUISO inGameSetUI;

		[Token(Token = "0x4000781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameSet gameSet;

		[Token(Token = "0x4000782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private TextMeshProUGUI versionText;

		[Token(Token = "0x4000783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string _loadString;

		[Token(Token = "0x4000784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private UnityWebRequest request;

		[Token(Token = "0x6000709")]
		[Address(RVA = "0xDE1154", Offset = "0xDE1154", VA = "0xDE1154")]
		private void Start()
		{
		}

		[Token(Token = "0x600070A")]
		[Address(RVA = "0xDE1344", Offset = "0xDE1344", VA = "0xDE1344")]
		[IteratorStateMachine(typeof(<GetData>d__6))]
		private IEnumerator GetData(int languageIndex)
		{
			return null;
		}

		[Token(Token = "0x600070B")]
		[Address(RVA = "0xDE1250", Offset = "0xDE1250", VA = "0xDE1250")]
		private void ChangeVersionLanguage(int languageIndex)
		{
		}

		[Token(Token = "0x600070C")]
		[Address(RVA = "0xDE13F0", Offset = "0xDE13F0", VA = "0xDE13F0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600070D")]
		[Address(RVA = "0xDE14D8", Offset = "0xDE14D8", VA = "0xDE14D8")]
		public GetServerVersion()
		{
		}
	}
	[Token(Token = "0x2000117")]
	public class XRSetting : MonoBehaviour
	{
		[Token(Token = "0x4000789")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private PXR_Input.ControllerDevice _device;

		[Token(Token = "0x400078A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("项目所使用的渲染管线资产：")]
		public RenderPipelineAsset usedRendererPipelineAsset;

		[Token(Token = "0x6000714")]
		[Address(RVA = "0xDE17E4", Offset = "0xDE17E4", VA = "0xDE17E4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000715")]
		[Address(RVA = "0xDE1898", Offset = "0xDE1898", VA = "0xDE1898")]
		public XRSetting()
		{
		}
	}
	[Token(Token = "0x2000118")]
	public enum RightControllerState
	{
		[Token(Token = "0x400078C")]
		RightDefaultState,
		[Token(Token = "0x400078D")]
		UpState,
		[Token(Token = "0x400078E")]
		UpLeftState,
		[Token(Token = "0x400078F")]
		UpRightState,
		[Token(Token = "0x4000790")]
		LeftState,
		[Token(Token = "0x4000791")]
		RightState
	}
	[Token(Token = "0x2000119")]
	public enum LeftControllerState
	{
		[Token(Token = "0x4000793")]
		UpState,
		[Token(Token = "0x4000794")]
		UpLeftState,
		[Token(Token = "0x4000795")]
		UpRightState,
		[Token(Token = "0x4000796")]
		LeftState,
		[Token(Token = "0x4000797")]
		RightState
	}
	[Token(Token = "0x200011A")]
	public class GetController : MonoBehaviour
	{
		[Token(Token = "0x4000798")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float _rightDir;

		[Token(Token = "0x4000799")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float _upDir;

		[Token(Token = "0x400079A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float _absDir;

		[Token(Token = "0x400079B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public LeftControllerState leftControllerState;

		[Token(Token = "0x400079C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public RightControllerState rightControllerState;

		[Token(Token = "0x400079D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private TextMeshProUGUI debugText01;

		[Token(Token = "0x400079E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private TextMeshProUGUI debugText02;

		[Token(Token = "0x400079F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private TextMeshProUGUI debugText03;

		[Token(Token = "0x6000716")]
		[Address(RVA = "0xDE18A0", Offset = "0xDE18A0", VA = "0xDE18A0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000717")]
		[Address(RVA = "0xDE18A8", Offset = "0xDE18A8", VA = "0xDE18A8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000718")]
		[Address(RVA = "0xDE18AC", Offset = "0xDE18AC", VA = "0xDE18AC")]
		private void ControllerState()
		{
		}

		[Token(Token = "0x6000719")]
		[Address(RVA = "0xDE1A34", Offset = "0xDE1A34", VA = "0xDE1A34")]
		public GetController()
		{
		}
	}
	[Token(Token = "0x200011B")]
	public class Test : MonoBehaviour
	{
		[Token(Token = "0x200011C")]
		[CompilerGenerated]
		private sealed class <FindPlayerCamera>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40007A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40007A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40007A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Test <>4__this;

			[Token(Token = "0x17000076")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000722")]
				[Address(RVA = "0xDE1DE0", Offset = "0xDE1DE0", VA = "0xDE1DE0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000077")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000724")]
				[Address(RVA = "0xDE1E28", Offset = "0xDE1E28", VA = "0xDE1E28", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600071F")]
			[Address(RVA = "0xDE1C60", Offset = "0xDE1C60", VA = "0xDE1C60")]
			[DebuggerHidden]
			public <FindPlayerCamera>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6000720")]
			[Address(RVA = "0xDE1C90", Offset = "0xDE1C90", VA = "0xDE1C90", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000721")]
			[Address(RVA = "0xDE1C94", Offset = "0xDE1C94", VA = "0xDE1C94", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000723")]
			[Address(RVA = "0xDE1DE8", Offset = "0xDE1DE8", VA = "0xDE1DE8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40007A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private List<Transform> cameraArray;

		[Token(Token = "0x40007A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int _cameraLength;

		[Token(Token = "0x40007A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int _cameraIndex;

		[Token(Token = "0x600071A")]
		[Address(RVA = "0xDE1A3C", Offset = "0xDE1A3C", VA = "0xDE1A3C")]
		private void Start()
		{
		}

		[Token(Token = "0x600071B")]
		[Address(RVA = "0xDE1B14", Offset = "0xDE1B14", VA = "0xDE1B14")]
		private void Update()
		{
		}

		[Token(Token = "0x600071C")]
		[Address(RVA = "0xDE1AA0", Offset = "0xDE1AA0", VA = "0xDE1AA0")]
		[IteratorStateMachine(typeof(<FindPlayerCamera>d__5))]
		private IEnumerator FindPlayerCamera()
		{
			return null;
		}

		[Token(Token = "0x600071D")]
		[Address(RVA = "0xDE1BD8", Offset = "0xDE1BD8", VA = "0xDE1BD8")]
		private void ChangeCamera(int cameraIndex)
		{
		}

		[Token(Token = "0x600071E")]
		[Address(RVA = "0xDE1C88", Offset = "0xDE1C88", VA = "0xDE1C88")]
		public Test()
		{
		}
	}
	[Token(Token = "0x200011D")]
	public class TestBall : MonoBehaviour
	{
		[Token(Token = "0x40007A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("键位")]
		[SerializeField]
		private InputActionReference pauseMenu;

		[Token(Token = "0x40007A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("3D面板倾斜角度")]
		[SerializeField]
		private float rotateAngle;

		[Token(Token = "0x40007A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("生成点")]
		[SerializeField]
		private Transform pausePos;

		[Token(Token = "0x40007A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Transform player;

		[Token(Token = "0x40007AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform _pausePanel;

		[Token(Token = "0x40007AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private float distance;

		[Token(Token = "0x40007AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 _newPos;

		[Token(Token = "0x6000725")]
		[Address(RVA = "0xDE1E30", Offset = "0xDE1E30", VA = "0xDE1E30")]
		private void Start()
		{
		}

		[Token(Token = "0x6000726")]
		[Address(RVA = "0xDE1ED0", Offset = "0xDE1ED0", VA = "0xDE1ED0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000727")]
		[Address(RVA = "0xDE2108", Offset = "0xDE2108", VA = "0xDE2108")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000728")]
		[Address(RVA = "0xDE2200", Offset = "0xDE2200", VA = "0xDE2200")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000729")]
		[Address(RVA = "0xDE22A0", Offset = "0xDE22A0", VA = "0xDE22A0")]
		private void OpenClosePause(InputAction.CallbackContext obj)
		{
		}

		[Token(Token = "0x600072A")]
		[Address(RVA = "0xDE24A8", Offset = "0xDE24A8", VA = "0xDE24A8")]
		public TestBall()
		{
		}
	}
	[Token(Token = "0x200011E")]
	public class TestChangePSColor : MonoBehaviour
	{
		[Token(Token = "0x40007AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ParticleSystem _particleSystem;

		[Token(Token = "0x600072B")]
		[Address(RVA = "0xDE24B8", Offset = "0xDE24B8", VA = "0xDE24B8")]
		private void Start()
		{
		}

		[Token(Token = "0x600072C")]
		[Address(RVA = "0xDE2524", Offset = "0xDE2524", VA = "0xDE2524")]
		public TestChangePSColor()
		{
		}
	}
	[Token(Token = "0x200011F")]
	public class TestShoe : MonoBehaviour
	{
		[Token(Token = "0x40007AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Animator _animator;

		[Token(Token = "0x40007AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int _move;

		[Token(Token = "0x40007B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static int _backMove;

		[Token(Token = "0x40007B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector2 _leftAxisValue;

		[Token(Token = "0x600072D")]
		[Address(RVA = "0xDE252C", Offset = "0xDE252C", VA = "0xDE252C")]
		private void Start()
		{
		}

		[Token(Token = "0x600072E")]
		[Address(RVA = "0xDE2584", Offset = "0xDE2584", VA = "0xDE2584")]
		private void Update()
		{
		}

		[Token(Token = "0x600072F")]
		[Address(RVA = "0xDE2714", Offset = "0xDE2714", VA = "0xDE2714")]
		public TestShoe()
		{
		}
	}
}
namespace Rook.MultiPlayer
{
	[Token(Token = "0x2000120")]
	public class MultiScore : MonoBehaviour
	{
		[Token(Token = "0x6000731")]
		[Address(RVA = "0xDE27B8", Offset = "0xDE27B8", VA = "0xDE27B8")]
		public MultiScore()
		{
		}
	}
	[Token(Token = "0x2000121")]
	public class SecondTrigger : MonoBehaviour
	{
		[Token(Token = "0x40007B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string ballTag;

		[Token(Token = "0x40007B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private InGameSet inGameSet;

		[Token(Token = "0x40007B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float _ballStartHeight;

		[Token(Token = "0x40007B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float _ballEndHeight;

		[Token(Token = "0x6000732")]
		[Address(RVA = "0xDE27C0", Offset = "0xDE27C0", VA = "0xDE27C0")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000733")]
		[Address(RVA = "0xDE2824", Offset = "0xDE2824", VA = "0xDE2824")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000734")]
		[Address(RVA = "0xDE2890", Offset = "0xDE2890", VA = "0xDE2890")]
		public SecondTrigger()
		{
		}
	}
	[Token(Token = "0x2000122")]
	public class ChoseIndex : MonoBehaviour
	{
		[Token(Token = "0x40007B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private InGameSet inGameSet;

		[Token(Token = "0x40007B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameSet gameSet;

		[Token(Token = "0x40007B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private UnityEngine.UI.Button oneBtn;

		[Token(Token = "0x40007B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private UnityEngine.UI.Button twoBtn;

		[Token(Token = "0x40007BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Transform[] characterModel;

		[Token(Token = "0x6000735")]
		[Address(RVA = "0xDE28E8", Offset = "0xDE28E8", VA = "0xDE28E8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000736")]
		[Address(RVA = "0xDE29D8", Offset = "0xDE29D8", VA = "0xDE29D8")]
		public ChoseIndex()
		{
		}
	}
}
namespace Rook.ConnectUI
{
	[Token(Token = "0x2000123")]
	public class ConnectManager : MonoBehaviour, IConnectionCallbacks
	{
		[Token(Token = "0x40007BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private InGameSetUISO inGameSetUI;

		[Token(Token = "0x40007BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameSet gameSet;

		[Token(Token = "0x40007BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityEngine.UI.Button _connectLobbyBtn;

		[Token(Token = "0x40007BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform _lobbyPanel;

		[Token(Token = "0x40007BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Transform maskPanel;

		[Token(Token = "0x40007C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform _roomPanel;

		[Token(Token = "0x40007C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform tempMaskTextTr;

		[Token(Token = "0x6000739")]
		[Address(RVA = "0xDE2AD0", Offset = "0xDE2AD0", VA = "0xDE2AD0")]
		private void Start()
		{
		}

		[Token(Token = "0x600073A")]
		[Address(RVA = "0xDE2E24", Offset = "0xDE2E24", VA = "0xDE2E24")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600073B")]
		[Address(RVA = "0xDE2E84", Offset = "0xDE2E84", VA = "0xDE2E84")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600073C")]
		[Address(RVA = "0xDE2EDC", Offset = "0xDE2EDC", VA = "0xDE2EDC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600073D")]
		[Address(RVA = "0xDE30F4", Offset = "0xDE30F4", VA = "0xDE30F4")]
		private void OnStartBtn()
		{
		}

		[Token(Token = "0x600073E")]
		[Address(RVA = "0xDE3168", Offset = "0xDE3168", VA = "0xDE3168")]
		private void ShowMaskPanel(int textIndex)
		{
		}

		[Token(Token = "0x600073F")]
		[Address(RVA = "0xDE3250", Offset = "0xDE3250", VA = "0xDE3250")]
		private void CloseMaskPanel()
		{
		}

		[Token(Token = "0x6000740")]
		[Address(RVA = "0xDE327C", Offset = "0xDE327C", VA = "0xDE327C")]
		private void CloseOther()
		{
		}

		[Token(Token = "0x6000741")]
		[Address(RVA = "0xDE32CC", Offset = "0xDE32CC", VA = "0xDE32CC")]
		private void OpenLobby()
		{
		}

		[Token(Token = "0x6000742")]
		[Address(RVA = "0xDE32F8", Offset = "0xDE32F8", VA = "0xDE32F8", Slot = "4")]
		public void OnConnected()
		{
		}

		[Token(Token = "0x6000743")]
		[Address(RVA = "0xDE32FC", Offset = "0xDE32FC", VA = "0xDE32FC", Slot = "5")]
		public void OnConnectedToMaster()
		{
		}

		[Token(Token = "0x6000744")]
		[Address(RVA = "0xDE3348", Offset = "0xDE3348", VA = "0xDE3348", Slot = "6")]
		public void OnDisconnected(DisconnectCause cause)
		{
		}

		[Token(Token = "0x6000745")]
		[Address(RVA = "0xDE351C", Offset = "0xDE351C", VA = "0xDE351C", Slot = "7")]
		public void OnRegionListReceived(RegionHandler regionHandler)
		{
		}

		[Token(Token = "0x6000746")]
		[Address(RVA = "0xDE3520", Offset = "0xDE3520", VA = "0xDE3520", Slot = "8")]
		public void OnCustomAuthenticationResponse(Dictionary<string, object> data)
		{
		}

		[Token(Token = "0x6000747")]
		[Address(RVA = "0xDE3524", Offset = "0xDE3524", VA = "0xDE3524", Slot = "9")]
		public void OnCustomAuthenticationFailed(string debugMessage)
		{
		}

		[Token(Token = "0x6000748")]
		[Address(RVA = "0xDE3528", Offset = "0xDE3528", VA = "0xDE3528")]
		public ConnectManager()
		{
		}
	}
	[Token(Token = "0x2000124")]
	public class CreatRoom : MonoBehaviourPunCallbacks
	{
		[Token(Token = "0x40007C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private InGameSetUISO inGameSetUI;

		[Token(Token = "0x40007C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityEngine.UI.Button _closeBtn;

		[Token(Token = "0x40007C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UnityEngine.UI.Button _createRoomBtn;

		[Token(Token = "0x40007C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TMP_InputField _roomNameIF;

		[Token(Token = "0x40007C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Photon.Realtime.RoomOptions room;

		[Token(Token = "0x6000749")]
		[Address(RVA = "0xDE3530", Offset = "0xDE3530", VA = "0xDE3530")]
		private void Start()
		{
		}

		[Token(Token = "0x600074A")]
		[Address(RVA = "0xDE36F8", Offset = "0xDE36F8", VA = "0xDE36F8")]
		private void OnCloseCreatRoomPanel()
		{
		}

		[Token(Token = "0x600074B")]
		[Address(RVA = "0xDE371C", Offset = "0xDE371C", VA = "0xDE371C")]
		private void OnCreateRoom()
		{
		}

		[Token(Token = "0x600074C")]
		[Address(RVA = "0xDE385C", Offset = "0xDE385C", VA = "0xDE385C", Slot = "35")]
		public override void OnCreatedRoom()
		{
		}

		[Token(Token = "0x600074D")]
		[Address(RVA = "0xDE38B8", Offset = "0xDE38B8", VA = "0xDE38B8")]
		public CreatRoom()
		{
		}
	}
	[Token(Token = "0x2000125")]
	public class SpawnManager : MonoBehaviour
	{
		[Token(Token = "0x40007C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string localPlayerName;

		[Token(Token = "0x40007C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private string remotePlayerName;

		[Token(Token = "0x40007C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private string ballManagerPrefabName;

		[Token(Token = "0x40007CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private string aimPosPrefabName;

		[Token(Token = "0x40007CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private string floorPointManagerPrefabName;

		[Token(Token = "0x40007CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private string remoteNetStandPrefabName;

		[Token(Token = "0x40007CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private string pausePanelManagerPrefabName;

		[Token(Token = "0x40007CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private GameObject basketBall;

		[Token(Token = "0x40007CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameSet gameSet;

		[Token(Token = "0x40007D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private InGameSet inGameSet;

		[Token(Token = "0x40007D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private Transform pos;

		[Token(Token = "0x40007D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private GameObject ball;

		[Token(Token = "0x40007D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private GameObject netStand;

		[Token(Token = "0x40007D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private GameObject localPlayerObject;

		[Token(Token = "0x40007D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private GameObject ballManagerObject;

		[Token(Token = "0x40007D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private GameObject aimPosObject;

		[Token(Token = "0x40007D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private GameObject floorPointMangerObject;

		[Token(Token = "0x40007D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private GameObject networkNetStandObject;

		[Token(Token = "0x40007D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Transform _playerBornTransform;

		[Token(Token = "0x600074E")]
		[Address(RVA = "0xDE38C0", Offset = "0xDE38C0", VA = "0xDE38C0")]
		private void Start()
		{
		}

		[Token(Token = "0x600074F")]
		[Address(RVA = "0xDE4310", Offset = "0xDE4310", VA = "0xDE4310")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000750")]
		[Address(RVA = "0xDE4314", Offset = "0xDE4314", VA = "0xDE4314")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000751")]
		[Address(RVA = "0xDE4318", Offset = "0xDE4318", VA = "0xDE4318")]
		public SpawnManager()
		{
		}
	}
	[Token(Token = "0x2000126")]
	public class LobbyUI : MonoBehaviourPunCallbacks
	{
		[Token(Token = "0x40007DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private InGameSetUISO inGameSetUI;

		[Token(Token = "0x40007DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameSet gameSet;

		[Token(Token = "0x40007DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UnityEngine.UI.Button _closetBtn;

		[Token(Token = "0x40007DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TextMeshProUGUI _regionText;

		[Token(Token = "0x40007DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private TextMeshProUGUI _regionChText;

		[Token(Token = "0x40007DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UnityEngine.UI.Button _refreshBtn;

		[Token(Token = "0x40007E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private UnityEngine.UI.Button _createRoomBtn;

		[Token(Token = "0x40007E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Transform createRoomPanel;

		[Token(Token = "0x40007E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[Header("房间的父物体：")]
		private Transform rooms;

		[Token(Token = "0x40007E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private GameObject roomPrefab;

		[Token(Token = "0x40007E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Transform roomPanel;

		[Token(Token = "0x40007E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private TypedLobby _lobbyType;

		[Token(Token = "0x40007E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string roomName;

		[Token(Token = "0x6000752")]
		[Address(RVA = "0xDE4460", Offset = "0xDE4460", VA = "0xDE4460")]
		private void Start()
		{
		}

		[Token(Token = "0x6000753")]
		[Address(RVA = "0xDE4744", Offset = "0xDE4744", VA = "0xDE4744")]
		private void OnCloseLobbyPanel()
		{
		}

		[Token(Token = "0x6000754")]
		[Address(RVA = "0xDE47B8", Offset = "0xDE47B8", VA = "0xDE47B8")]
		private void OnRefreshRoomList()
		{
		}

		[Token(Token = "0x6000755")]
		[Address(RVA = "0xDE4844", Offset = "0xDE4844", VA = "0xDE4844")]
		private void OnCreateRoom()
		{
		}

		[Token(Token = "0x6000756")]
		[Address(RVA = "0xDE4870", Offset = "0xDE4870", VA = "0xDE4870", Slot = "36")]
		public override void OnJoinedLobby()
		{
		}

		[Token(Token = "0x6000757")]
		[Address(RVA = "0xDE49F0", Offset = "0xDE49F0", VA = "0xDE49F0", Slot = "40")]
		public override void OnRoomListUpdate(List<RoomInfo> roomList)
		{
		}

		[Token(Token = "0x6000758")]
		[Address(RVA = "0xDE4C18", Offset = "0xDE4C18", VA = "0xDE4C18")]
		private void ClearAllRoom()
		{
		}

		[Token(Token = "0x6000759")]
		[Address(RVA = "0xDE4CBC", Offset = "0xDE4CBC", VA = "0xDE4CBC")]
		public LobbyUI()
		{
		}
	}
	[Token(Token = "0x2000127")]
	public class RoomUI : MonoBehaviour, IInRoomCallbacks
	{
		[Token(Token = "0x40007E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private InGameSetUISO inGameSetUI;

		[Token(Token = "0x40007E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private UnityEngine.UI.Button _closeBtn;

		[Token(Token = "0x40007E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UnityEngine.UI.Button _startBtn;

		[Token(Token = "0x40007EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject playerPrefab;

		[Token(Token = "0x40007EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Player[] serverPlayerList;

		[Token(Token = "0x40007EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Transform _playerContain;

		[Token(Token = "0x40007ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<PlayerItem> _playerList;

		[Token(Token = "0x40007EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool isAllReady;

		[Token(Token = "0x40007EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private object val;

		[Token(Token = "0x600075B")]
		[Address(RVA = "0xDE4D3C", Offset = "0xDE4D3C", VA = "0xDE4D3C")]
		private void Start()
		{
		}

		[Token(Token = "0x600075C")]
		[Address(RVA = "0xDE51A0", Offset = "0xDE51A0", VA = "0xDE51A0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600075D")]
		[Address(RVA = "0xDE51F8", Offset = "0xDE51F8", VA = "0xDE51F8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600075E")]
		[Address(RVA = "0xDE4FD8", Offset = "0xDE4FD8", VA = "0xDE4FD8")]
		private void CreatePlayerList(Player p)
		{
		}

		[Token(Token = "0x600075F")]
		[Address(RVA = "0xDE5250", Offset = "0xDE5250", VA = "0xDE5250")]
		private void DeletePlayerList(Player p)
		{
		}

		[Token(Token = "0x6000760")]
		[Address(RVA = "0xDE53EC", Offset = "0xDE53EC", VA = "0xDE53EC")]
		private void StartGame()
		{
		}

		[Token(Token = "0x6000761")]
		[Address(RVA = "0xDE5454", Offset = "0xDE5454", VA = "0xDE5454")]
		private void CloseRoom()
		{
		}

		[Token(Token = "0x6000762")]
		[Address(RVA = "0xDE5490", Offset = "0xDE5490", VA = "0xDE5490", Slot = "4")]
		public void OnPlayerEnteredRoom(Player newPlayer)
		{
		}

		[Token(Token = "0x6000763")]
		[Address(RVA = "0xDE54B8", Offset = "0xDE54B8", VA = "0xDE54B8", Slot = "5")]
		public void OnPlayerLeftRoom(Player otherPlayer)
		{
		}

		[Token(Token = "0x6000764")]
		[Address(RVA = "0xDE54E0", Offset = "0xDE54E0", VA = "0xDE54E0", Slot = "6")]
		public void OnRoomPropertiesUpdate(ExitGames.Client.Photon.Hashtable propertiesThatChanged)
		{
		}

		[Token(Token = "0x6000765")]
		[Address(RVA = "0xDE54E4", Offset = "0xDE54E4", VA = "0xDE54E4", Slot = "7")]
		public void OnPlayerPropertiesUpdate(Player targetPlayer, ExitGames.Client.Photon.Hashtable changedProps)
		{
		}

		[Token(Token = "0x6000766")]
		[Address(RVA = "0xDE575C", Offset = "0xDE575C", VA = "0xDE575C", Slot = "8")]
		public void OnMasterClientSwitched(Player newMasterClient)
		{
		}

		[Token(Token = "0x6000767")]
		[Address(RVA = "0xDE5760", Offset = "0xDE5760", VA = "0xDE5760")]
		public RoomUI()
		{
		}
	}
}
namespace Photon.Realtime.Demo
{
	[Token(Token = "0x200012A")]
	public class ConnectAndJoinRandomLb : MonoBehaviour, IConnectionCallbacks, IMatchmakingCallbacks, ILobbyCallbacks
	{
		[Token(Token = "0x40007F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AppSettings appSettings;

		[Token(Token = "0x40007F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LoadBalancingClient lbc;

		[Token(Token = "0x40007F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ConnectionHandler ch;

		[Token(Token = "0x40007F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Text StateUiText;

		[Token(Token = "0x600076C")]
		[Address(RVA = "0xDE57C0", Offset = "0xDE57C0", VA = "0xDE57C0")]
		public void Start()
		{
		}

		[Token(Token = "0x600076D")]
		[Address(RVA = "0xDE594C", Offset = "0xDE594C", VA = "0xDE594C")]
		public void Update()
		{
		}

		[Token(Token = "0x600076E")]
		[Address(RVA = "0xDE5A80", Offset = "0xDE5A80", VA = "0xDE5A80", Slot = "4")]
		public void OnConnected()
		{
		}

		[Token(Token = "0x600076F")]
		[Address(RVA = "0xDE5A84", Offset = "0xDE5A84", VA = "0xDE5A84", Slot = "5")]
		public void OnConnectedToMaster()
		{
		}

		[Token(Token = "0x6000770")]
		[Address(RVA = "0xDE5B08", Offset = "0xDE5B08", VA = "0xDE5B08", Slot = "6")]
		public void OnDisconnected(DisconnectCause cause)
		{
		}

		[Token(Token = "0x6000771")]
		[Address(RVA = "0xDE5BF4", Offset = "0xDE5BF4", VA = "0xDE5BF4", Slot = "8")]
		public void OnCustomAuthenticationResponse(Dictionary<string, object> data)
		{
		}

		[Token(Token = "0x6000772")]
		[Address(RVA = "0xDE5BF8", Offset = "0xDE5BF8", VA = "0xDE5BF8", Slot = "9")]
		public void OnCustomAuthenticationFailed(string debugMessage)
		{
		}

		[Token(Token = "0x6000773")]
		[Address(RVA = "0xDE5BFC", Offset = "0xDE5BFC", VA = "0xDE5BFC", Slot = "7")]
		public void OnRegionListReceived(RegionHandler regionHandler)
		{
		}

		[Token(Token = "0x6000774")]
		[Address(RVA = "0xDE5CD8", Offset = "0xDE5CD8", VA = "0xDE5CD8", Slot = "19")]
		public void OnRoomListUpdate(List<RoomInfo> roomList)
		{
		}

		[Token(Token = "0x6000775")]
		[Address(RVA = "0xDE5CDC", Offset = "0xDE5CDC", VA = "0xDE5CDC", Slot = "20")]
		public void OnLobbyStatisticsUpdate(List<TypedLobbyInfo> lobbyStatistics)
		{
		}

		[Token(Token = "0x6000776")]
		[Address(RVA = "0xDE5CE0", Offset = "0xDE5CE0", VA = "0xDE5CE0", Slot = "17")]
		public void OnJoinedLobby()
		{
		}

		[Token(Token = "0x6000777")]
		[Address(RVA = "0xDE5CE4", Offset = "0xDE5CE4", VA = "0xDE5CE4", Slot = "18")]
		public void OnLeftLobby()
		{
		}

		[Token(Token = "0x6000778")]
		[Address(RVA = "0xDE5CE8", Offset = "0xDE5CE8", VA = "0xDE5CE8", Slot = "10")]
		public void OnFriendListUpdate(List<FriendInfo> friendList)
		{
		}

		[Token(Token = "0x6000779")]
		[Address(RVA = "0xDE5CEC", Offset = "0xDE5CEC", VA = "0xDE5CEC", Slot = "11")]
		public void OnCreatedRoom()
		{
		}

		[Token(Token = "0x600077A")]
		[Address(RVA = "0xDE5CF0", Offset = "0xDE5CF0", VA = "0xDE5CF0", Slot = "12")]
		public void OnCreateRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x600077B")]
		[Address(RVA = "0xDE5CF4", Offset = "0xDE5CF4", VA = "0xDE5CF4", Slot = "13")]
		public void OnJoinedRoom()
		{
		}

		[Token(Token = "0x600077C")]
		[Address(RVA = "0xDE5D5C", Offset = "0xDE5D5C", VA = "0xDE5D5C", Slot = "14")]
		public void OnJoinRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x600077D")]
		[Address(RVA = "0xDE5D60", Offset = "0xDE5D60", VA = "0xDE5D60", Slot = "15")]
		public void OnJoinRandomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x600077E")]
		[Address(RVA = "0xDE5E14", Offset = "0xDE5E14", VA = "0xDE5E14", Slot = "16")]
		public void OnLeftRoom()
		{
		}

		[Token(Token = "0x600077F")]
		[Address(RVA = "0xDE5E18", Offset = "0xDE5E18", VA = "0xDE5E18")]
		private void OnRegionPingCompleted(RegionHandler regionHandler)
		{
		}

		[Token(Token = "0x6000780")]
		[Address(RVA = "0xDE5F3C", Offset = "0xDE5F3C", VA = "0xDE5F3C")]
		public ConnectAndJoinRandomLb()
		{
		}
	}
}
namespace Photon.Chat.Demo
{
	[Token(Token = "0x200012B")]
	public static class AppSettingsExtensions
	{
		[Token(Token = "0x6000781")]
		[Address(RVA = "0xDE5FB0", Offset = "0xDE5FB0", VA = "0xDE5FB0")]
		public static ChatAppSettings GetChatSettings(this AppSettings appSettings)
		{
			return null;
		}
	}
	[Token(Token = "0x200012C")]
	public class ChannelSelector : MonoBehaviour, IPointerClickHandler, IEventSystemHandler
	{
		[Token(Token = "0x40007F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string Channel;

		[Token(Token = "0x6000782")]
		[Address(RVA = "0xDE60B0", Offset = "0xDE60B0", VA = "0xDE60B0")]
		public void SetChannel(string channel)
		{
		}

		[Token(Token = "0x6000783")]
		[Address(RVA = "0xDE6134", Offset = "0xDE6134", VA = "0xDE6134", Slot = "4")]
		public void OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000784")]
		[Address(RVA = "0xDE6450", Offset = "0xDE6450", VA = "0xDE6450")]
		public ChannelSelector()
		{
		}
	}
	[Token(Token = "0x200012D")]
	[ExecuteInEditMode]
	public class ChatAppIdCheckerUI : MonoBehaviour
	{
		[Token(Token = "0x40007F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text Description;

		[Token(Token = "0x40007F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool WizardOpenedOnce;

		[Token(Token = "0x6000785")]
		[Address(RVA = "0xDE6458", Offset = "0xDE6458", VA = "0xDE6458")]
		public void Update()
		{
		}

		[Token(Token = "0x6000786")]
		[Address(RVA = "0xDE652C", Offset = "0xDE652C", VA = "0xDE652C")]
		public ChatAppIdCheckerUI()
		{
		}
	}
	[Token(Token = "0x200012E")]
	public class ChatGui : MonoBehaviour, IChatClientListener
	{
		[Token(Token = "0x40007F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string[] ChannelsToJoinOnConnect;

		[Token(Token = "0x40007FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string[] FriendsList;

		[Token(Token = "0x40007FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int HistoryLengthToFetch;

		[Token(Token = "0x40007FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private string selectedChannelName;

		[Token(Token = "0x40007FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public ChatClient chatClient;

		[Token(Token = "0x40007FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected internal ChatAppSettings chatAppSettings;

		[Token(Token = "0x4000800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject missingAppIdErrorPanel;

		[Token(Token = "0x4000801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject ConnectingLabel;

		[Token(Token = "0x4000802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public RectTransform ChatPanel;

		[Token(Token = "0x4000803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject UserIdFormPanel;

		[Token(Token = "0x4000804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public InputField InputFieldChat;

		[Token(Token = "0x4000805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Text CurrentChannelText;

		[Token(Token = "0x4000806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Toggle ChannelToggleToInstantiate;

		[Token(Token = "0x4000807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public GameObject FriendListUiItemtoInstantiate;

		[Token(Token = "0x4000808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private readonly Dictionary<string, Toggle> channelToggles;

		[Token(Token = "0x4000809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private readonly Dictionary<string, FriendItem> friendListItemLUT;

		[Token(Token = "0x400080A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public bool ShowState;

		[Token(Token = "0x400080B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public GameObject Title;

		[Token(Token = "0x400080C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Text StateText;

		[Token(Token = "0x400080D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Text UserIdText;

		[Token(Token = "0x400080E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static string HelpText;

		[Token(Token = "0x400080F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public int TestLength;

		[Token(Token = "0x4000810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private byte[] testBytes;

		[Token(Token = "0x17000078")]
		public string UserName
		{
			[Token(Token = "0x6000787")]
			[Address(RVA = "0xDE6534", Offset = "0xDE6534", VA = "0xDE6534")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000788")]
			[Address(RVA = "0xDE653C", Offset = "0xDE653C", VA = "0xDE653C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000789")]
		[Address(RVA = "0xDE6544", Offset = "0xDE6544", VA = "0xDE6544")]
		public void Start()
		{
		}

		[Token(Token = "0x600078A")]
		[Address(RVA = "0xDE6808", Offset = "0xDE6808", VA = "0xDE6808")]
		public void Connect()
		{
		}

		[Token(Token = "0x600078B")]
		[Address(RVA = "0xDE699C", Offset = "0xDE699C", VA = "0xDE699C")]
		public void OnDestroy()
		{
		}

		[Token(Token = "0x600078C")]
		[Address(RVA = "0xDE69B4", Offset = "0xDE69B4", VA = "0xDE69B4")]
		public void OnApplicationQuit()
		{
		}

		[Token(Token = "0x600078D")]
		[Address(RVA = "0xDE69CC", Offset = "0xDE69CC", VA = "0xDE69CC")]
		public void Update()
		{
		}

		[Token(Token = "0x600078E")]
		[Address(RVA = "0xDE6A9C", Offset = "0xDE6A9C", VA = "0xDE6A9C")]
		public void OnEnterSend()
		{
		}

		[Token(Token = "0x600078F")]
		[Address(RVA = "0xDE7598", Offset = "0xDE7598", VA = "0xDE7598")]
		public void OnClickSend()
		{
		}

		[Token(Token = "0x6000790")]
		[Address(RVA = "0xDE6B30", Offset = "0xDE6B30", VA = "0xDE6B30")]
		private void SendChatMessage(string inputLine)
		{
		}

		[Token(Token = "0x6000791")]
		[Address(RVA = "0xDE7648", Offset = "0xDE7648", VA = "0xDE7648")]
		public void PostHelpToCurrentChannel()
		{
		}

		[Token(Token = "0x6000792")]
		[Address(RVA = "0xDE76EC", Offset = "0xDE76EC", VA = "0xDE76EC", Slot = "4")]
		public void DebugReturn(DebugLevel level, string message)
		{
		}

		[Token(Token = "0x6000793")]
		[Address(RVA = "0xDE7794", Offset = "0xDE7794", VA = "0xDE7794", Slot = "6")]
		public void OnConnected()
		{
		}

		[Token(Token = "0x6000794")]
		[Address(RVA = "0xDE7AD0", Offset = "0xDE7AD0", VA = "0xDE7AD0", Slot = "5")]
		public void OnDisconnected()
		{
		}

		[Token(Token = "0x6000795")]
		[Address(RVA = "0xDE7B54", Offset = "0xDE7B54", VA = "0xDE7B54", Slot = "7")]
		public void OnChatStateChange(ChatState state)
		{
		}

		[Token(Token = "0x6000796")]
		[Address(RVA = "0xDE7BE8", Offset = "0xDE7BE8", VA = "0xDE7BE8", Slot = "10")]
		public void OnSubscribed(string[] channels, bool[] results)
		{
		}

		[Token(Token = "0x6000797")]
		[Address(RVA = "0xDE7F38", Offset = "0xDE7F38", VA = "0xDE7F38")]
		public void OnSubscribed(string channel, string[] users, Dictionary<object, object> properties)
		{
		}

		[Token(Token = "0x6000798")]
		[Address(RVA = "0xDE7D7C", Offset = "0xDE7D7C", VA = "0xDE7D7C")]
		private void InstantiateChannelButton(string channelName)
		{
		}

		[Token(Token = "0x6000799")]
		[Address(RVA = "0xDE7978", Offset = "0xDE7978", VA = "0xDE7978")]
		private void InstantiateFriendButton(string friendId)
		{
		}

		[Token(Token = "0x600079A")]
		[Address(RVA = "0xDE8120", Offset = "0xDE8120", VA = "0xDE8120", Slot = "11")]
		public void OnUnsubscribed(string[] channels)
		{
		}

		[Token(Token = "0x600079B")]
		[Address(RVA = "0xDE8564", Offset = "0xDE8564", VA = "0xDE8564", Slot = "8")]
		public void OnGetMessages(string channelName, string[] senders, object[] messages)
		{
		}

		[Token(Token = "0x600079C")]
		[Address(RVA = "0xDE85A4", Offset = "0xDE85A4", VA = "0xDE85A4", Slot = "9")]
		public void OnPrivateMessage(string sender, object message, string channelName)
		{
		}

		[Token(Token = "0x600079D")]
		[Address(RVA = "0xDE86B8", Offset = "0xDE86B8", VA = "0xDE86B8", Slot = "12")]
		public void OnStatusUpdate(string user, int status, bool gotMessage, object message)
		{
		}

		[Token(Token = "0x600079E")]
		[Address(RVA = "0xDE89F8", Offset = "0xDE89F8", VA = "0xDE89F8", Slot = "13")]
		public void OnUserSubscribed(string channel, string user)
		{
		}

		[Token(Token = "0x600079F")]
		[Address(RVA = "0xDE8B14", Offset = "0xDE8B14", VA = "0xDE8B14", Slot = "14")]
		public void OnUserUnsubscribed(string channel, string user)
		{
		}

		[Token(Token = "0x60007A0")]
		[Address(RVA = "0xDE8C30", Offset = "0xDE8C30", VA = "0xDE8C30")]
		public void OnChannelPropertiesChanged(string channel, string userId, Dictionary<object, object> properties)
		{
		}

		[Token(Token = "0x60007A1")]
		[Address(RVA = "0xDE8DB8", Offset = "0xDE8DB8", VA = "0xDE8DB8")]
		public void OnUserPropertiesChanged(string channel, string targetUserId, string senderUserId, Dictionary<object, object> properties)
		{
		}

		[Token(Token = "0x60007A2")]
		[Address(RVA = "0xDE8F80", Offset = "0xDE8F80", VA = "0xDE8F80")]
		public void OnErrorInfo(string channel, string error, object data)
		{
		}

		[Token(Token = "0x60007A3")]
		[Address(RVA = "0xDE90D4", Offset = "0xDE90D4", VA = "0xDE90D4")]
		public void AddMessageToSelectedChannel(string msg)
		{
		}

		[Token(Token = "0x60007A4")]
		[Address(RVA = "0xDE61AC", Offset = "0xDE61AC", VA = "0xDE61AC")]
		public void ShowChannel(string channelName)
		{
		}

		[Token(Token = "0x60007A5")]
		[Address(RVA = "0xDE91C0", Offset = "0xDE91C0", VA = "0xDE91C0")]
		public void OpenDashboard()
		{
		}

		[Token(Token = "0x60007A6")]
		[Address(RVA = "0xDE9204", Offset = "0xDE9204", VA = "0xDE9204")]
		public ChatGui()
		{
		}
	}
	[Token(Token = "0x200012F")]
	public class FriendItem : MonoBehaviour
	{
		[Token(Token = "0x4000811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text NameLabel;

		[Token(Token = "0x4000812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text StatusLabel;

		[Token(Token = "0x4000813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text Health;

		[Token(Token = "0x17000079")]
		[HideInInspector]
		public string FriendId
		{
			[Token(Token = "0x60007A9")]
			[Address(RVA = "0xDE9388", Offset = "0xDE9388", VA = "0xDE9388")]
			get
			{
				return null;
			}
			[Token(Token = "0x60007A8")]
			[Address(RVA = "0xDE80FC", Offset = "0xDE80FC", VA = "0xDE80FC")]
			set
			{
			}
		}

		[Token(Token = "0x60007AA")]
		[Address(RVA = "0xDE93AC", Offset = "0xDE93AC", VA = "0xDE93AC")]
		public void Awake()
		{
		}

		[Token(Token = "0x60007AB")]
		[Address(RVA = "0xDE8878", Offset = "0xDE8878", VA = "0xDE8878")]
		public void OnFriendStatusUpdate(int status, bool gotMessage, object message)
		{
		}

		[Token(Token = "0x60007AC")]
		[Address(RVA = "0xDE9410", Offset = "0xDE9410", VA = "0xDE9410")]
		public FriendItem()
		{
		}
	}
	[Token(Token = "0x2000130")]
	public class IgnoreUiRaycastWhenInactive : MonoBehaviour, ICanvasRaycastFilter
	{
		[Token(Token = "0x60007AD")]
		[Address(RVA = "0xDE9418", Offset = "0xDE9418", VA = "0xDE9418", Slot = "4")]
		public bool IsRaycastLocationValid(Vector2 screenPoint, Camera eventCamera)
		{
			return default(bool);
		}

		[Token(Token = "0x60007AE")]
		[Address(RVA = "0xDE9438", Offset = "0xDE9438", VA = "0xDE9438")]
		public IgnoreUiRaycastWhenInactive()
		{
		}
	}
	[Token(Token = "0x2000131")]
	[RequireComponent(typeof(ChatGui))]
	public class NamePickGui : MonoBehaviour
	{
		[Token(Token = "0x4000814")]
		private const string UserNamePlayerPref = "NamePickUserName";

		[Token(Token = "0x4000815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ChatGui chatNewComponent;

		[Token(Token = "0x4000816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InputField idInput;

		[Token(Token = "0x60007AF")]
		[Address(RVA = "0xDE9440", Offset = "0xDE9440", VA = "0xDE9440")]
		public void Start()
		{
		}

		[Token(Token = "0x60007B0")]
		[Address(RVA = "0xDE950C", Offset = "0xDE950C", VA = "0xDE950C")]
		public void EndEditOnEnter()
		{
		}

		[Token(Token = "0x60007B1")]
		[Address(RVA = "0xDE9548", Offset = "0xDE9548", VA = "0xDE9548")]
		public void StartChat()
		{
		}

		[Token(Token = "0x60007B2")]
		[Address(RVA = "0xDE962C", Offset = "0xDE962C", VA = "0xDE962C")]
		public NamePickGui()
		{
		}
	}
}
namespace Photon.Chat.UtilityScripts
{
	[Token(Token = "0x2000132")]
	public class EventSystemSpawner : MonoBehaviour
	{
		[Token(Token = "0x60007B3")]
		[Address(RVA = "0xDE9634", Offset = "0xDE9634", VA = "0xDE9634")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60007B4")]
		[Address(RVA = "0xDE973C", Offset = "0xDE973C", VA = "0xDE973C")]
		public EventSystemSpawner()
		{
		}
	}
	[Token(Token = "0x2000133")]
	public class OnStartDelete : MonoBehaviour
	{
		[Token(Token = "0x60007B5")]
		[Address(RVA = "0xDE9744", Offset = "0xDE9744", VA = "0xDE9744")]
		private void Start()
		{
		}

		[Token(Token = "0x60007B6")]
		[Address(RVA = "0xDE97B0", Offset = "0xDE97B0", VA = "0xDE97B0")]
		public OnStartDelete()
		{
		}
	}
	[Token(Token = "0x2000134")]
	[RequireComponent(typeof(Text))]
	public class TextButtonTransition : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
	{
		[Token(Token = "0x4000817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Text _text;

		[Token(Token = "0x4000818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Selectable Selectable;

		[Token(Token = "0x4000819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color NormalColor;

		[Token(Token = "0x400081A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color HoverColor;

		[Token(Token = "0x60007B7")]
		[Address(RVA = "0xDE97B8", Offset = "0xDE97B8", VA = "0xDE97B8")]
		public void Awake()
		{
		}

		[Token(Token = "0x60007B8")]
		[Address(RVA = "0xDE9810", Offset = "0xDE9810", VA = "0xDE9810")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x60007B9")]
		[Address(RVA = "0xDE9840", Offset = "0xDE9840", VA = "0xDE9840")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x60007BA")]
		[Address(RVA = "0xDE9870", Offset = "0xDE9870", VA = "0xDE9870", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60007BB")]
		[Address(RVA = "0xDE9920", Offset = "0xDE9920", VA = "0xDE9920", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60007BC")]
		[Address(RVA = "0xDE99D0", Offset = "0xDE99D0", VA = "0xDE99D0")]
		public TextButtonTransition()
		{
		}
	}
	[Token(Token = "0x2000135")]
	[RequireComponent(typeof(Text))]
	public class TextToggleIsOnTransition : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
	{
		[Token(Token = "0x400081B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Toggle toggle;

		[Token(Token = "0x400081C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Text _text;

		[Token(Token = "0x400081D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color NormalOnColor;

		[Token(Token = "0x400081E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color NormalOffColor;

		[Token(Token = "0x400081F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Color HoverOnColor;

		[Token(Token = "0x4000820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Color HoverOffColor;

		[Token(Token = "0x4000821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool isHover;

		[Token(Token = "0x60007BD")]
		[Address(RVA = "0xDE99EC", Offset = "0xDE99EC", VA = "0xDE99EC")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x60007BE")]
		[Address(RVA = "0xDE9B40", Offset = "0xDE9B40", VA = "0xDE9B40")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x60007BF")]
		[Address(RVA = "0xDE9ADC", Offset = "0xDE9ADC", VA = "0xDE9ADC")]
		public void OnValueChanged(bool isOn)
		{
		}

		[Token(Token = "0x60007C0")]
		[Address(RVA = "0xDE9BE8", Offset = "0xDE9BE8", VA = "0xDE9BE8", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60007C1")]
		[Address(RVA = "0xDE9C5C", Offset = "0xDE9C5C", VA = "0xDE9C5C", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x60007C2")]
		[Address(RVA = "0xDE9CCC", Offset = "0xDE9CCC", VA = "0xDE9CCC")]
		public TextToggleIsOnTransition()
		{
		}
	}
}
namespace OculusSampleFramework
{
	[Token(Token = "0x2000136")]
	public class ColorGrabbable : OVRGrabbable
	{
		[Token(Token = "0x4000822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Color COLOR_GRAB;

		[Token(Token = "0x4000823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly Color COLOR_HIGHLIGHT;

		[Token(Token = "0x4000824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Color m_color;

		[Token(Token = "0x4000825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private MeshRenderer[] m_meshRenderers;

		[Token(Token = "0x4000826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool m_highlight;

		[Token(Token = "0x1700007A")]
		public bool Highlight
		{
			[Token(Token = "0x60007C3")]
			[Address(RVA = "0xDE9CF0", Offset = "0xDE9CF0", VA = "0xDE9CF0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60007C4")]
			[Address(RVA = "0xDE9CF8", Offset = "0xDE9CF8", VA = "0xDE9CF8")]
			set
			{
			}
		}

		[Token(Token = "0x60007C5")]
		[Address(RVA = "0xDE9D04", Offset = "0xDE9D04", VA = "0xDE9D04")]
		protected void UpdateColor()
		{
		}

		[Token(Token = "0x60007C6")]
		[Address(RVA = "0xDE9EA4", Offset = "0xDE9EA4", VA = "0xDE9EA4", Slot = "4")]
		public override void GrabBegin(OVRGrabber hand, Collider grabPoint)
		{
		}

		[Token(Token = "0x60007C7")]
		[Address(RVA = "0xDE9EC0", Offset = "0xDE9EC0", VA = "0xDE9EC0", Slot = "5")]
		public override void GrabEnd(Vector3 linearVelocity, Vector3 angularVelocity)
		{
		}

		[Token(Token = "0x60007C8")]
		[Address(RVA = "0xDE9EDC", Offset = "0xDE9EDC", VA = "0xDE9EDC")]
		private void Awake()
		{
		}

		[Token(Token = "0x60007C9")]
		[Address(RVA = "0xDE9DB0", Offset = "0xDE9DB0", VA = "0xDE9DB0")]
		private void SetColor(Color color)
		{
		}

		[Token(Token = "0x60007CA")]
		[Address(RVA = "0xDEA190", Offset = "0xDEA190", VA = "0xDEA190")]
		public ColorGrabbable()
		{
		}
	}
	[Token(Token = "0x2000137")]
	public class DistanceGrabbable : OVRGrabbable
	{
		[Token(Token = "0x4000827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string m_materialColorField;

		[Token(Token = "0x4000828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GrabbableCrosshair m_crosshair;

		[Token(Token = "0x4000829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GrabManager m_crosshairManager;

		[Token(Token = "0x400082A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Renderer m_renderer;

		[Token(Token = "0x400082B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private MaterialPropertyBlock m_mpb;

		[Token(Token = "0x400082C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool m_inRange;

		[Token(Token = "0x400082D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool m_targeted;

		[Token(Token = "0x1700007B")]
		public bool InRange
		{
			[Token(Token = "0x60007CC")]
			[Address(RVA = "0xDEA208", Offset = "0xDEA208", VA = "0xDEA208")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60007CD")]
			[Address(RVA = "0xDEA210", Offset = "0xDEA210", VA = "0xDEA210")]
			set
			{
			}
		}

		[Token(Token = "0x1700007C")]
		public bool Targeted
		{
			[Token(Token = "0x60007CE")]
			[Address(RVA = "0xDEA37C", Offset = "0xDEA37C", VA = "0xDEA37C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60007CF")]
			[Address(RVA = "0xDEA384", Offset = "0xDEA384", VA = "0xDEA384")]
			set
			{
			}
		}

		[Token(Token = "0x60007D0")]
		[Address(RVA = "0xDEA390", Offset = "0xDEA390", VA = "0xDEA390", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60007D1")]
		[Address(RVA = "0xDEA21C", Offset = "0xDEA21C", VA = "0xDEA21C")]
		private void RefreshCrosshair()
		{
		}

		[Token(Token = "0x60007D2")]
		[Address(RVA = "0xDEA580", Offset = "0xDEA580", VA = "0xDEA580")]
		public DistanceGrabbable()
		{
		}
	}
	[Token(Token = "0x2000138")]
	[RequireComponent(typeof(Rigidbody))]
	public class DistanceGrabber : OVRGrabber
	{
		[Token(Token = "0x400082E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[SerializeField]
		private float m_spherecastRadius;

		[Token(Token = "0x400082F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private float m_noSnapThreshhold;

		[Token(Token = "0x4000830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		private bool m_useSpherecast;

		[Token(Token = "0x4000831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
		[SerializeField]
		public bool m_preventGrabThroughWalls;

		[Token(Token = "0x4000832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private float m_objectPullVelocity;

		[Token(Token = "0x4000833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float m_objectPullMaxRotationRate;

		[Token(Token = "0x4000834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private bool m_movingObjectToHand;

		[Token(Token = "0x4000835")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[SerializeField]
		private float m_maxGrabDistance;

		[Token(Token = "0x4000836")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private int m_grabObjectsInLayer;

		[Token(Token = "0x4000837")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[SerializeField]
		private int m_obstructionLayer;

		[Token(Token = "0x4000838")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private DistanceGrabber m_otherHand;

		[Token(Token = "0x4000839")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected DistanceGrabbable m_target;

		[Token(Token = "0x400083A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected Collider m_targetCollider;

		[Token(Token = "0x1700007D")]
		public bool UseSpherecast
		{
			[Token(Token = "0x60007D3")]
			[Address(RVA = "0xDEA588", Offset = "0xDEA588", VA = "0xDEA588")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60007D4")]
			[Address(RVA = "0xDEA590", Offset = "0xDEA590", VA = "0xDEA590")]
			set
			{
			}
		}

		[Token(Token = "0x60007D5")]
		[Address(RVA = "0xDEA5AC", Offset = "0xDEA5AC", VA = "0xDEA5AC", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x60007D6")]
		[Address(RVA = "0xDEA7B8", Offset = "0xDEA7B8", VA = "0xDEA7B8", Slot = "6")]
		public override void Update()
		{
		}

		[Token(Token = "0x60007D7")]
		[Address(RVA = "0xDEB0A4", Offset = "0xDEB0A4", VA = "0xDEB0A4", Slot = "7")]
		protected override void GrabBegin()
		{
		}

		[Token(Token = "0x60007D8")]
		[Address(RVA = "0xDEB60C", Offset = "0xDEB60C", VA = "0xDEB60C", Slot = "8")]
		protected override void MoveGrabbedObject(Vector3 pos, Quaternion rot, bool forceTeleport = false)
		{
		}

		[Token(Token = "0x60007D9")]
		[Address(RVA = "0xDEBA1C", Offset = "0xDEBA1C", VA = "0xDEBA1C")]
		private static DistanceGrabbable HitInfoToGrabbable(RaycastHit hitInfo)
		{
			return null;
		}

		[Token(Token = "0x60007DA")]
		[Address(RVA = "0xDEA9E0", Offset = "0xDEA9E0", VA = "0xDEA9E0")]
		protected bool FindTarget(out DistanceGrabbable dgOut, out Collider collOut)
		{
			return default(bool);
		}

		[Token(Token = "0x60007DB")]
		[Address(RVA = "0xDEBB08", Offset = "0xDEBB08", VA = "0xDEBB08")]
		protected bool FindTargetWithSpherecast(out DistanceGrabbable dgOut, out Collider collOut)
		{
			return default(bool);
		}

		[Token(Token = "0x60007DC")]
		[Address(RVA = "0xDEBF08", Offset = "0xDEBF08", VA = "0xDEBF08", Slot = "9")]
		protected override void GrabVolumeEnable(bool enabled)
		{
		}

		[Token(Token = "0x60007DD")]
		[Address(RVA = "0xDEBF20", Offset = "0xDEBF20", VA = "0xDEBF20", Slot = "10")]
		protected override void OffhandGrabbed(OVRGrabbable grabbable)
		{
		}

		[Token(Token = "0x60007DE")]
		[Address(RVA = "0xDEBF28", Offset = "0xDEBF28", VA = "0xDEBF28")]
		public DistanceGrabber()
		{
		}
	}
	[Token(Token = "0x2000139")]
	public class GrabbableCrosshair : MonoBehaviour
	{
		[Token(Token = "0x200013A")]
		public enum CrosshairState
		{
			[Token(Token = "0x4000840")]
			Disabled,
			[Token(Token = "0x4000841")]
			Enabled,
			[Token(Token = "0x4000842")]
			Targeted
		}

		[Token(Token = "0x400083B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CrosshairState m_state;

		[Token(Token = "0x400083C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Transform m_centerEyeAnchor;

		[Token(Token = "0x400083D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject m_targetedCrosshair;

		[Token(Token = "0x400083E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private GameObject m_enabledCrosshair;

		[Token(Token = "0x60007DF")]
		[Address(RVA = "0xDEBF48", Offset = "0xDEBF48", VA = "0xDEBF48")]
		private void Start()
		{
		}

		[Token(Token = "0x60007E0")]
		[Address(RVA = "0xDEA4F4", Offset = "0xDEA4F4", VA = "0xDEA4F4")]
		public void SetState(CrosshairState cs)
		{
		}

		[Token(Token = "0x60007E1")]
		[Address(RVA = "0xDEBFB0", Offset = "0xDEBFB0", VA = "0xDEBFB0")]
		private void Update()
		{
		}

		[Token(Token = "0x60007E2")]
		[Address(RVA = "0xDEBFE8", Offset = "0xDEBFE8", VA = "0xDEBFE8")]
		public GrabbableCrosshair()
		{
		}
	}
	[Token(Token = "0x200013B")]
	public class GrabManager : MonoBehaviour
	{
		[Token(Token = "0x4000843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Collider m_grabVolume;

		[Token(Token = "0x4000844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color OutlineColorInRange;

		[Token(Token = "0x4000845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color OutlineColorHighlighted;

		[Token(Token = "0x4000846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Color OutlineColorOutOfRange;

		[Token(Token = "0x60007E3")]
		[Address(RVA = "0xDEBFF0", Offset = "0xDEBFF0", VA = "0xDEBFF0")]
		private void OnTriggerEnter(Collider otherCollider)
		{
		}

		[Token(Token = "0x60007E4")]
		[Address(RVA = "0xDEC09C", Offset = "0xDEC09C", VA = "0xDEC09C")]
		private void OnTriggerExit(Collider otherCollider)
		{
		}

		[Token(Token = "0x60007E5")]
		[Address(RVA = "0xDEC144", Offset = "0xDEC144", VA = "0xDEC144")]
		public GrabManager()
		{
		}
	}
	[Token(Token = "0x200013C")]
	public class PauseOnInputLoss : MonoBehaviour
	{
		[Token(Token = "0x60007E6")]
		[Address(RVA = "0xDEC14C", Offset = "0xDEC14C", VA = "0xDEC14C")]
		private void Start()
		{
		}

		[Token(Token = "0x60007E7")]
		[Address(RVA = "0xDEC238", Offset = "0xDEC238", VA = "0xDEC238")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x60007E8")]
		[Address(RVA = "0xDEC244", Offset = "0xDEC244", VA = "0xDEC244")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x60007E9")]
		[Address(RVA = "0xDEC250", Offset = "0xDEC250", VA = "0xDEC250")]
		public PauseOnInputLoss()
		{
		}
	}
	[Token(Token = "0x200013D")]
	public class BoneCapsuleTriggerLogic : MonoBehaviour
	{
		[Token(Token = "0x4000847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractableToolTags ToolTags;

		[Token(Token = "0x4000848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HashSet<ColliderZone> CollidersTouchingUs;

		[Token(Token = "0x4000849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<ColliderZone> _elementsToCleanUp;

		[Token(Token = "0x60007EA")]
		[Address(RVA = "0xDEC258", Offset = "0xDEC258", VA = "0xDEC258")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60007EB")]
		[Address(RVA = "0xDEC2A8", Offset = "0xDEC2A8", VA = "0xDEC2A8")]
		private void Update()
		{
		}

		[Token(Token = "0x60007EC")]
		[Address(RVA = "0xDEC680", Offset = "0xDEC680", VA = "0xDEC680")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60007ED")]
		[Address(RVA = "0xDEC76C", Offset = "0xDEC76C", VA = "0xDEC76C")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60007EE")]
		[Address(RVA = "0xDEC2AC", Offset = "0xDEC2AC", VA = "0xDEC2AC")]
		private void CleanUpDeadColliders()
		{
		}

		[Token(Token = "0x60007EF")]
		[Address(RVA = "0xDEC858", Offset = "0xDEC858", VA = "0xDEC858")]
		public BoneCapsuleTriggerLogic()
		{
		}
	}
	[Token(Token = "0x200013E")]
	public class ButtonController : Interactable
	{
		[Token(Token = "0x200013F")]
		public enum ContactTest
		{
			[Token(Token = "0x4000859")]
			PerpenTest,
			[Token(Token = "0x400085A")]
			BackwardsPress
		}

		[Token(Token = "0x400084A")]
		private const float ENTRY_DOT_THRESHOLD = 0.8f;

		[Token(Token = "0x400084B")]
		private const float PERP_DOT_THRESHOLD = 0.5f;

		[Token(Token = "0x400084C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private GameObject _proximityZone;

		[Token(Token = "0x400084D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject _contactZone;

		[Token(Token = "0x400084E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private GameObject _actionZone;

		[Token(Token = "0x400084F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private ContactTest[] _contactTests;

		[Token(Token = "0x4000850")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private Transform _buttonPlaneCenter;

		[Token(Token = "0x4000851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private bool _makeSureToolIsOnPositiveSide;

		[Token(Token = "0x4000852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[SerializeField]
		private Vector3 _localButtonDirection;

		[Token(Token = "0x4000853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private InteractableToolTags[] _allValidToolsTags;

		[Token(Token = "0x4000854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int _toolTagsMask;

		[Token(Token = "0x4000855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[SerializeField]
		private bool _allowMultipleNearFieldInteraction;

		[Token(Token = "0x4000857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Dictionary<InteractableTool, InteractableState> _toolToState;

		[Token(Token = "0x1700007E")]
		public override int ValidToolTagsMask
		{
			[Token(Token = "0x60007F0")]
			[Address(RVA = "0xDEC930", Offset = "0xDEC930", VA = "0xDEC930", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700007F")]
		public Vector3 LocalButtonDirection
		{
			[Token(Token = "0x60007F1")]
			[Address(RVA = "0xDEC938", Offset = "0xDEC938", VA = "0xDEC938")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000080")]
		public InteractableState CurrentButtonState
		{
			[Token(Token = "0x60007F2")]
			[Address(RVA = "0xDEC944", Offset = "0xDEC944", VA = "0xDEC944")]
			[CompilerGenerated]
			get
			{
				return default(InteractableState);
			}
			[Token(Token = "0x60007F3")]
			[Address(RVA = "0xDEC94C", Offset = "0xDEC94C", VA = "0xDEC94C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x60007F4")]
		[Address(RVA = "0xDEC954", Offset = "0xDEC954", VA = "0xDEC954", Slot = "9")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x60007F5")]
		[Address(RVA = "0xDECAA4", Offset = "0xDECAA4", VA = "0xDECAA4")]
		private void FireInteractionEventsOnDepth(InteractableCollisionDepth oldDepth, InteractableTool collidingTool, InteractionType interactionType)
		{
		}

		[Token(Token = "0x60007F6")]
		[Address(RVA = "0xDECCAC", Offset = "0xDECCAC", VA = "0xDECCAC", Slot = "8")]
		public override void UpdateCollisionDepth(InteractableTool interactableTool, InteractableCollisionDepth oldCollisionDepth, InteractableCollisionDepth newCollisionDepth)
		{
		}

		[Token(Token = "0x60007F7")]
		[Address(RVA = "0xDED270", Offset = "0xDED270", VA = "0xDED270")]
		private InteractableState GetUpcomingStateNearField(InteractableState oldState, InteractableCollisionDepth newCollisionDepth, bool toolIsInActionZone, bool toolIsInContactZone, bool toolIsInProximity, bool validContact, bool onPositiveSideOfInteractable)
		{
			return default(InteractableState);
		}

		[Token(Token = "0x60007F8")]
		[Address(RVA = "0xDED3D8", Offset = "0xDED3D8", VA = "0xDED3D8")]
		public void ForceResetButton()
		{
		}

		[Token(Token = "0x60007F9")]
		[Address(RVA = "0xDED194", Offset = "0xDED194", VA = "0xDED194")]
		private bool IsValidContact(InteractableTool collidingTool, Vector3 buttonDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x60007FA")]
		[Address(RVA = "0xDED4E4", Offset = "0xDED4E4", VA = "0xDED4E4")]
		private bool PassEntryTest(InteractableTool collidingTool, Vector3 buttonDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x60007FB")]
		[Address(RVA = "0xDED5F0", Offset = "0xDED5F0", VA = "0xDED5F0")]
		private bool PassPerpTest(InteractableTool collidingTool, Vector3 buttonDirection)
		{
			return default(bool);
		}

		[Token(Token = "0x60007FC")]
		[Address(RVA = "0xDED678", Offset = "0xDED678", VA = "0xDED678")]
		public ButtonController()
		{
		}
	}
	[Token(Token = "0x2000140")]
	public class ButtonTriggerZone : MonoBehaviour, ColliderZone
	{
		[Token(Token = "0x400085B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _parentInteractableObj;

		[Token(Token = "0x17000081")]
		public Collider Collider
		{
			[Token(Token = "0x60007FD")]
			[Address(RVA = "0xDED79C", Offset = "0xDED79C", VA = "0xDED79C", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60007FE")]
			[Address(RVA = "0xDED7A4", Offset = "0xDED7A4", VA = "0xDED7A4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000082")]
		public Interactable ParentInteractable
		{
			[Token(Token = "0x60007FF")]
			[Address(RVA = "0xDED7AC", Offset = "0xDED7AC", VA = "0xDED7AC", Slot = "5")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000800")]
			[Address(RVA = "0xDED7B4", Offset = "0xDED7B4", VA = "0xDED7B4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000083")]
		public InteractableCollisionDepth CollisionDepth
		{
			[Token(Token = "0x6000801")]
			[Address(RVA = "0xDED7BC", Offset = "0xDED7BC", VA = "0xDED7BC", Slot = "6")]
			get
			{
				return default(InteractableCollisionDepth);
			}
		}

		[Token(Token = "0x6000802")]
		[Address(RVA = "0xDED80C", Offset = "0xDED80C", VA = "0xDED80C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000803")]
		[Address(RVA = "0xDED8A0", Offset = "0xDED8A0", VA = "0xDED8A0")]
		public ButtonTriggerZone()
		{
		}
	}
	[Token(Token = "0x2000141")]
	public interface ColliderZone
	{
		[Token(Token = "0x17000084")]
		Collider Collider
		{
			[Token(Token = "0x6000804")]
			get;
		}

		[Token(Token = "0x17000085")]
		Interactable ParentInteractable
		{
			[Token(Token = "0x6000805")]
			get;
		}

		[Token(Token = "0x17000086")]
		InteractableCollisionDepth CollisionDepth
		{
			[Token(Token = "0x6000806")]
			get;
		}
	}
	[Token(Token = "0x2000142")]
	public class ColliderZoneArgs : EventArgs
	{
		[Token(Token = "0x400085E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly ColliderZone Collider;

		[Token(Token = "0x400085F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly float FrameTime;

		[Token(Token = "0x4000860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly InteractableTool CollidingTool;

		[Token(Token = "0x4000861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly InteractionType InteractionT;

		[Token(Token = "0x6000807")]
		[Address(RVA = "0xDECC00", Offset = "0xDECC00", VA = "0xDECC00")]
		public ColliderZoneArgs(ColliderZone collider, float frameTime, InteractableTool collidingTool, InteractionType interactionType)
		{
		}
	}
	[Token(Token = "0x2000143")]
	public enum InteractionType
	{
		[Token(Token = "0x4000863")]
		Enter,
		[Token(Token = "0x4000864")]
		Stay,
		[Token(Token = "0x4000865")]
		Exit
	}
	[Token(Token = "0x2000144")]
	public class HandsManager : MonoBehaviour
	{
		[Token(Token = "0x2000145")]
		public enum HandsVisualMode
		{
			[Token(Token = "0x4000877")]
			Mesh,
			[Token(Token = "0x4000878")]
			Skeleton,
			[Token(Token = "0x4000879")]
			Both
		}

		[Token(Token = "0x2000146")]
		[CompilerGenerated]
		private sealed class <FindSkeletonVisualGameObjects>d__52 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400087A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400087B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400087C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandsManager <>4__this;

			[Token(Token = "0x17000092")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000829")]
				[Address(RVA = "0xDEED00", Offset = "0xDEED00", VA = "0xDEED00", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000093")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600082B")]
				[Address(RVA = "0xDEED48", Offset = "0xDEED48", VA = "0xDEED48", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000826")]
			[Address(RVA = "0xDEE2F8", Offset = "0xDEE2F8", VA = "0xDEE2F8")]
			[DebuggerHidden]
			public <FindSkeletonVisualGameObjects>d__52(int <>1__state)
			{
			}

			[Token(Token = "0x6000827")]
			[Address(RVA = "0xDEEAE0", Offset = "0xDEEAE0", VA = "0xDEEAE0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000828")]
			[Address(RVA = "0xDEEAE4", Offset = "0xDEEAE4", VA = "0xDEEAE4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600082A")]
			[Address(RVA = "0xDEED08", Offset = "0xDEED08", VA = "0xDEED08", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000866")]
		private const string SKELETON_VISUALIZER_NAME = "SkeletonRenderer";

		[Token(Token = "0x4000867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _leftHand;

		[Token(Token = "0x4000868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private GameObject _rightHand;

		[Token(Token = "0x4000869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public HandsVisualMode VisualMode;

		[Token(Token = "0x400086A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private OVRHand[] _hand;

		[Token(Token = "0x400086B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private OVRSkeleton[] _handSkeleton;

		[Token(Token = "0x400086C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private OVRSkeletonRenderer[] _handSkeletonRenderer;

		[Token(Token = "0x400086D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private OVRMesh[] _handMesh;

		[Token(Token = "0x400086E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private OVRMeshRenderer[] _handMeshRenderer;

		[Token(Token = "0x400086F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private SkinnedMeshRenderer _leftMeshRenderer;

		[Token(Token = "0x4000870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private SkinnedMeshRenderer _rightMeshRenderer;

		[Token(Token = "0x4000871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject _leftSkeletonVisual;

		[Token(Token = "0x4000872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject _rightSkeletonVisual;

		[Token(Token = "0x4000873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float _currentHandAlpha;

		[Token(Token = "0x4000874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int HandAlphaId;

		[Token(Token = "0x17000087")]
		public OVRHand RightHand
		{
			[Token(Token = "0x6000808")]
			[Address(RVA = "0xDED8A8", Offset = "0xDED8A8", VA = "0xDED8A8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000809")]
			[Address(RVA = "0xDED8D4", Offset = "0xDED8D4", VA = "0xDED8D4")]
			private set
			{
			}
		}

		[Token(Token = "0x17000088")]
		public OVRSkeleton RightHandSkeleton
		{
			[Token(Token = "0x600080A")]
			[Address(RVA = "0xDED938", Offset = "0xDED938", VA = "0xDED938")]
			get
			{
				return null;
			}
			[Token(Token = "0x600080B")]
			[Address(RVA = "0xDED964", Offset = "0xDED964", VA = "0xDED964")]
			private set
			{
			}
		}

		[Token(Token = "0x17000089")]
		public OVRSkeletonRenderer RightHandSkeletonRenderer
		{
			[Token(Token = "0x600080C")]
			[Address(RVA = "0xDED9C8", Offset = "0xDED9C8", VA = "0xDED9C8")]
			get
			{
				return null;
			}
			[Token(Token = "0x600080D")]
			[Address(RVA = "0xDED9F4", Offset = "0xDED9F4", VA = "0xDED9F4")]
			private set
			{
			}
		}

		[Token(Token = "0x1700008A")]
		public OVRMesh RightHandMesh
		{
			[Token(Token = "0x600080E")]
			[Address(RVA = "0xDEDA58", Offset = "0xDEDA58", VA = "0xDEDA58")]
			get
			{
				return null;
			}
			[Token(Token = "0x600080F")]
			[Address(RVA = "0xDEDA84", Offset = "0xDEDA84", VA = "0xDEDA84")]
			private set
			{
			}
		}

		[Token(Token = "0x1700008B")]
		public OVRMeshRenderer RightHandMeshRenderer
		{
			[Token(Token = "0x6000810")]
			[Address(RVA = "0xDEDAE8", Offset = "0xDEDAE8", VA = "0xDEDAE8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000811")]
			[Address(RVA = "0xDEDB14", Offset = "0xDEDB14", VA = "0xDEDB14")]
			private set
			{
			}
		}

		[Token(Token = "0x1700008C")]
		public OVRHand LeftHand
		{
			[Token(Token = "0x6000812")]
			[Address(RVA = "0xDEDB78", Offset = "0xDEDB78", VA = "0xDEDB78")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000813")]
			[Address(RVA = "0xDEDBA0", Offset = "0xDEDBA0", VA = "0xDEDBA0")]
			private set
			{
			}
		}

		[Token(Token = "0x1700008D")]
		public OVRSkeleton LeftHandSkeleton
		{
			[Token(Token = "0x6000814")]
			[Address(RVA = "0xDEDC00", Offset = "0xDEDC00", VA = "0xDEDC00")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000815")]
			[Address(RVA = "0xDEDC28", Offset = "0xDEDC28", VA = "0xDEDC28")]
			private set
			{
			}
		}

		[Token(Token = "0x1700008E")]
		public OVRSkeletonRenderer LeftHandSkeletonRenderer
		{
			[Token(Token = "0x6000816")]
			[Address(RVA = "0xDEDC88", Offset = "0xDEDC88", VA = "0xDEDC88")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000817")]
			[Address(RVA = "0xDEDCB0", Offset = "0xDEDCB0", VA = "0xDEDCB0")]
			private set
			{
			}
		}

		[Token(Token = "0x1700008F")]
		public OVRMesh LeftHandMesh
		{
			[Token(Token = "0x6000818")]
			[Address(RVA = "0xDEDD10", Offset = "0xDEDD10", VA = "0xDEDD10")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000819")]
			[Address(RVA = "0xDEDD38", Offset = "0xDEDD38", VA = "0xDEDD38")]
			private set
			{
			}
		}

		[Token(Token = "0x17000090")]
		public OVRMeshRenderer LeftHandMeshRenderer
		{
			[Token(Token = "0x600081A")]
			[Address(RVA = "0xDEDD98", Offset = "0xDEDD98", VA = "0xDEDD98")]
			get
			{
				return null;
			}
			[Token(Token = "0x600081B")]
			[Address(RVA = "0xDEDDC0", Offset = "0xDEDDC0", VA = "0xDEDDC0")]
			private set
			{
			}
		}

		[Token(Token = "0x17000091")]
		public static HandsManager Instance
		{
			[Token(Token = "0x600081C")]
			[Address(RVA = "0xDEDE20", Offset = "0xDEDE20", VA = "0xDEDE20")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600081D")]
			[Address(RVA = "0xDEDE68", Offset = "0xDEDE68", VA = "0xDEDE68")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600081E")]
		[Address(RVA = "0xDEDEC0", Offset = "0xDEDEC0", VA = "0xDEDEC0")]
		private void Awake()
		{
		}

		[Token(Token = "0x600081F")]
		[Address(RVA = "0xDEE27C", Offset = "0xDEE27C", VA = "0xDEE27C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000820")]
		[Address(RVA = "0xDEE208", Offset = "0xDEE208", VA = "0xDEE208")]
		[IteratorStateMachine(typeof(<FindSkeletonVisualGameObjects>d__52))]
		private IEnumerator FindSkeletonVisualGameObjects()
		{
			return null;
		}

		[Token(Token = "0x6000821")]
		[Address(RVA = "0xDEE320", Offset = "0xDEE320", VA = "0xDEE320")]
		public void SwitchVisualization()
		{
		}

		[Token(Token = "0x6000822")]
		[Address(RVA = "0xDEE3E4", Offset = "0xDEE3E4", VA = "0xDEE3E4")]
		private void SetToCurrentVisualMode()
		{
		}

		[Token(Token = "0x6000823")]
		[Address(RVA = "0xDEE5B4", Offset = "0xDEE5B4", VA = "0xDEE5B4")]
		public static List<OVRBoneCapsule> GetCapsulesPerBone(OVRSkeleton skeleton, OVRSkeleton.BoneId boneId)
		{
			return null;
		}

		[Token(Token = "0x6000824")]
		[Address(RVA = "0xDEE818", Offset = "0xDEE818", VA = "0xDEE818")]
		public bool IsInitialized()
		{
			return default(bool);
		}

		[Token(Token = "0x6000825")]
		[Address(RVA = "0xDEE978", Offset = "0xDEE978", VA = "0xDEE978")]
		public HandsManager()
		{
		}
	}
	[Token(Token = "0x2000147")]
	public abstract class Interactable : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000148")]
		public class InteractableStateArgsEvent : UnityEvent<InteractableStateArgs>
		{
			[Token(Token = "0x600083D")]
			[Address(RVA = "0xDEF398", Offset = "0xDEF398", VA = "0xDEF398")]
			public InteractableStateArgsEvent()
			{
			}
		}

		[Token(Token = "0x400087D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected ColliderZone _proximityZoneCollider;

		[Token(Token = "0x400087E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected ColliderZone _contactZoneCollider;

		[Token(Token = "0x400087F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected ColliderZone _actionZoneCollider;

		[Token(Token = "0x4000883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public InteractableStateArgsEvent InteractableStateChanged;

		[Token(Token = "0x17000094")]
		public ColliderZone ProximityCollider
		{
			[Token(Token = "0x600082C")]
			[Address(RVA = "0xDEED50", Offset = "0xDEED50", VA = "0xDEED50")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000095")]
		public ColliderZone ContactCollider
		{
			[Token(Token = "0x600082D")]
			[Address(RVA = "0xDEED58", Offset = "0xDEED58", VA = "0xDEED58")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000096")]
		public ColliderZone ActionCollider
		{
			[Token(Token = "0x600082E")]
			[Address(RVA = "0xDEED60", Offset = "0xDEED60", VA = "0xDEED60")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000097")]
		public virtual int ValidToolTagsMask
		{
			[Token(Token = "0x600082F")]
			[Address(RVA = "0xDEED68", Offset = "0xDEED68", VA = "0xDEED68", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x14000010")]
		public event Action<ColliderZoneArgs> ProximityZoneEvent
		{
			[Token(Token = "0x6000830")]
			[Address(RVA = "0xDEED70", Offset = "0xDEED70", VA = "0xDEED70")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000831")]
			[Address(RVA = "0xDEEE20", Offset = "0xDEEE20", VA = "0xDEEE20")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000011")]
		public event Action<ColliderZoneArgs> ContactZoneEvent
		{
			[Token(Token = "0x6000833")]
			[Address(RVA = "0xDEEEEC", Offset = "0xDEEEEC", VA = "0xDEEEEC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000834")]
			[Address(RVA = "0xDEEF9C", Offset = "0xDEEF9C", VA = "0xDEEF9C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000012")]
		public event Action<ColliderZoneArgs> ActionZoneEvent
		{
			[Token(Token = "0x6000836")]
			[Address(RVA = "0xDEF068", Offset = "0xDEF068", VA = "0xDEF068")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000837")]
			[Address(RVA = "0xDEF118", Offset = "0xDEF118", VA = "0xDEF118")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000832")]
		[Address(RVA = "0xDEEED0", Offset = "0xDEEED0", VA = "0xDEEED0", Slot = "5")]
		protected virtual void OnProximityZoneEvent(ColliderZoneArgs args)
		{
		}

		[Token(Token = "0x6000835")]
		[Address(RVA = "0xDEF04C", Offset = "0xDEF04C", VA = "0xDEF04C", Slot = "6")]
		protected virtual void OnContactZoneEvent(ColliderZoneArgs args)
		{
		}

		[Token(Token = "0x6000838")]
		[Address(RVA = "0xDEF1C8", Offset = "0xDEF1C8", VA = "0xDEF1C8", Slot = "7")]
		protected virtual void OnActionZoneEvent(ColliderZoneArgs args)
		{
		}

		[Token(Token = "0x6000839")]
		public abstract void UpdateCollisionDepth(InteractableTool interactableTool, InteractableCollisionDepth oldCollisionDepth, InteractableCollisionDepth newCollisionDepth);

		[Token(Token = "0x600083A")]
		[Address(RVA = "0xDECA50", Offset = "0xDECA50", VA = "0xDECA50", Slot = "9")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x600083B")]
		[Address(RVA = "0xDEF294", Offset = "0xDEF294", VA = "0xDEF294", Slot = "10")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x600083C")]
		[Address(RVA = "0xDED794", Offset = "0xDED794", VA = "0xDED794")]
		protected Interactable()
		{
		}
	}
	[Token(Token = "0x2000149")]
	public enum InteractableCollisionDepth
	{
		[Token(Token = "0x4000885")]
		None,
		[Token(Token = "0x4000886")]
		Proximity,
		[Token(Token = "0x4000887")]
		Contact,
		[Token(Token = "0x4000888")]
		Action
	}
	[Token(Token = "0x200014A")]
	public enum InteractableState
	{
		[Token(Token = "0x400088A")]
		Default,
		[Token(Token = "0x400088B")]
		ProximityState,
		[Token(Token = "0x400088C")]
		ContactState,
		[Token(Token = "0x400088D")]
		ActionState
	}
	[Token(Token = "0x200014B")]
	public class InteractableStateArgs : EventArgs
	{
		[Token(Token = "0x400088E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public readonly Interactable Interactable;

		[Token(Token = "0x400088F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public readonly InteractableTool Tool;

		[Token(Token = "0x4000890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public readonly InteractableState OldInteractableState;

		[Token(Token = "0x4000891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public readonly InteractableState NewInteractableState;

		[Token(Token = "0x4000892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public readonly ColliderZoneArgs ColliderArgs;

		[Token(Token = "0x600083E")]
		[Address(RVA = "0xDED320", Offset = "0xDED320", VA = "0xDED320")]
		public InteractableStateArgs(Interactable interactable, InteractableTool tool, InteractableState newInteractableState, InteractableState oldState, ColliderZoneArgs colliderArgs)
		{
		}
	}
	[Token(Token = "0x200014C")]
	public class InteractableRegistry : MonoBehaviour
	{
		[Token(Token = "0x4000893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static HashSet<Interactable> _interactables;

		[Token(Token = "0x17000098")]
		public static HashSet<Interactable> Interactables
		{
			[Token(Token = "0x600083F")]
			[Address(RVA = "0xDEF3E0", Offset = "0xDEF3E0", VA = "0xDEF3E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000840")]
		[Address(RVA = "0xDEF1E4", Offset = "0xDEF1E4", VA = "0xDEF1E4")]
		public static void RegisterInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6000841")]
		[Address(RVA = "0xDEF2E8", Offset = "0xDEF2E8", VA = "0xDEF2E8")]
		public static void UnregisterInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6000842")]
		[Address(RVA = "0xDEF438", Offset = "0xDEF438", VA = "0xDEF438")]
		public InteractableRegistry()
		{
		}
	}
	[Token(Token = "0x200014D")]
	public class InteractableToolsCreator : MonoBehaviour
	{
		[Token(Token = "0x200014E")]
		[CompilerGenerated]
		private sealed class <AttachToolsToHands>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000896")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000897")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000898")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform[] toolObjects;

			[Token(Token = "0x4000899")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool isRightHand;

			[Token(Token = "0x400089A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public InteractableToolsCreator <>4__this;

			[Token(Token = "0x400089B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private HandsManager <handsManagerObj>5__2;

			[Token(Token = "0x400089C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private HashSet<Transform>.Enumerator <>7__wrap2;

			[Token(Token = "0x400089D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private Transform <toolObject>5__4;

			[Token(Token = "0x400089E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private OVRSkeleton <handSkeletonToAttachTo>5__5;

			[Token(Token = "0x17000099")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600084C")]
				[Address(RVA = "0xDEFBF8", Offset = "0xDEFBF8", VA = "0xDEFBF8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700009A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600084E")]
				[Address(RVA = "0xDEFC40", Offset = "0xDEFC40", VA = "0xDEFC40", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000848")]
			[Address(RVA = "0xDEF5E0", Offset = "0xDEF5E0", VA = "0xDEF5E0")]
			[DebuggerHidden]
			public <AttachToolsToHands>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x6000849")]
			[Address(RVA = "0xDEF71C", Offset = "0xDEF71C", VA = "0xDEF71C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600084A")]
			[Address(RVA = "0xDEF738", Offset = "0xDEF738", VA = "0xDEF738", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600084B")]
			[Address(RVA = "0xDEFBA8", Offset = "0xDEFBA8", VA = "0xDEFBA8")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x600084D")]
			[Address(RVA = "0xDEFC00", Offset = "0xDEFC00", VA = "0xDEFC00", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform[] LeftHandTools;

		[Token(Token = "0x4000895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform[] RightHandTools;

		[Token(Token = "0x6000844")]
		[Address(RVA = "0xDEF4D8", Offset = "0xDEF4D8", VA = "0xDEF4D8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000845")]
		[Address(RVA = "0xDEF544", Offset = "0xDEF544", VA = "0xDEF544")]
		[IteratorStateMachine(typeof(<AttachToolsToHands>d__3))]
		private IEnumerator AttachToolsToHands(Transform[] toolObjects, bool isRightHand)
		{
			return null;
		}

		[Token(Token = "0x6000846")]
		[Address(RVA = "0xDEF608", Offset = "0xDEF608", VA = "0xDEF608")]
		private void AttachToolToHandTransform(Transform tool, bool isRightHanded)
		{
		}

		[Token(Token = "0x6000847")]
		[Address(RVA = "0xDEF714", Offset = "0xDEF714", VA = "0xDEF714")]
		public InteractableToolsCreator()
		{
		}
	}
	[Token(Token = "0x200014F")]
	public class InteractableToolsInputRouter : MonoBehaviour
	{
		[Token(Token = "0x400089F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static InteractableToolsInputRouter _instance;

		[Token(Token = "0x40008A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool _leftPinch;

		[Token(Token = "0x40008A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool _rightPinch;

		[Token(Token = "0x40008A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private HashSet<InteractableTool> _leftHandNearTools;

		[Token(Token = "0x40008A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private HashSet<InteractableTool> _leftHandFarTools;

		[Token(Token = "0x40008A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private HashSet<InteractableTool> _rightHandNearTools;

		[Token(Token = "0x40008A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private HashSet<InteractableTool> _rightHandFarTools;

		[Token(Token = "0x1700009B")]
		public static InteractableToolsInputRouter Instance
		{
			[Token(Token = "0x600084F")]
			[Address(RVA = "0xDEFC48", Offset = "0xDEFC48", VA = "0xDEFC48")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000850")]
		[Address(RVA = "0xDEFDA4", Offset = "0xDEFDA4", VA = "0xDEFDA4")]
		public void RegisterInteractableTool(InteractableTool interactableTool)
		{
		}

		[Token(Token = "0x6000851")]
		[Address(RVA = "0xDEFE40", Offset = "0xDEFE40", VA = "0xDEFE40")]
		public void UnregisterInteractableTool(InteractableTool interactableTool)
		{
		}

		[Token(Token = "0x6000852")]
		[Address(RVA = "0xDEFEDC", Offset = "0xDEFEDC", VA = "0xDEFEDC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000853")]
		[Address(RVA = "0xDF0178", Offset = "0xDF0178", VA = "0xDF0178")]
		private bool UpdateToolsAndEnableState(HashSet<InteractableTool> tools, bool toolsAreEnabledThisFrame)
		{
			return default(bool);
		}

		[Token(Token = "0x6000854")]
		[Address(RVA = "0xDF01B4", Offset = "0xDF01B4", VA = "0xDF01B4")]
		private bool UpdateTools(HashSet<InteractableTool> tools, bool resetCollisionData = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000855")]
		[Address(RVA = "0xDF048C", Offset = "0xDF048C", VA = "0xDF048C")]
		private void ToggleToolsEnableState(HashSet<InteractableTool> tools, bool enableState)
		{
		}

		[Token(Token = "0x6000856")]
		[Address(RVA = "0xDF0694", Offset = "0xDF0694", VA = "0xDF0694")]
		public InteractableToolsInputRouter()
		{
		}
	}
	[Token(Token = "0x2000150")]
	public class FingerTipPokeTool : InteractableTool
	{
		[Token(Token = "0x2000151")]
		[CompilerGenerated]
		private sealed class <AttachTriggerLogic>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40008B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40008B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40008B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FingerTipPokeTool <>4__this;

			[Token(Token = "0x170000A0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000868")]
				[Address(RVA = "0xDF1864", Offset = "0xDF1864", VA = "0xDF1864", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000A1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600086A")]
				[Address(RVA = "0xDF18AC", Offset = "0xDF18AC", VA = "0xDF18AC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000865")]
			[Address(RVA = "0xDF0930", Offset = "0xDF0930", VA = "0xDF0930")]
			[DebuggerHidden]
			public <AttachTriggerLogic>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x6000866")]
			[Address(RVA = "0xDF13D4", Offset = "0xDF13D4", VA = "0xDF13D4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000867")]
			[Address(RVA = "0xDF13D8", Offset = "0xDF13D8", VA = "0xDF13D8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000869")]
			[Address(RVA = "0xDF186C", Offset = "0xDF186C", VA = "0xDF186C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40008A6")]
		private const int NUM_VELOCITY_FRAMES = 10;

		[Token(Token = "0x40008A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private FingerTipPokeToolView _fingerTipPokeToolView;

		[Token(Token = "0x40008A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private OVRPlugin.HandFinger _fingerToFollow;

		[Token(Token = "0x40008A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3[] _velocityFrames;

		[Token(Token = "0x40008AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int _currVelocityFrame;

		[Token(Token = "0x40008AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private bool _sampledMaxFramesAlready;

		[Token(Token = "0x40008AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 _position;

		[Token(Token = "0x40008AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private BoneCapsuleTriggerLogic[] _boneCapsuleTriggerLogic;

		[Token(Token = "0x40008AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float _lastScale;

		[Token(Token = "0x40008AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private bool _isInitialized;

		[Token(Token = "0x40008B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private OVRBoneCapsule _capsuleToTrack;

		[Token(Token = "0x1700009C")]
		public override InteractableToolTags ToolTags
		{
			[Token(Token = "0x6000857")]
			[Address(RVA = "0xDF079C", Offset = "0xDF079C", VA = "0xDF079C", Slot = "4")]
			get
			{
				return default(InteractableToolTags);
			}
		}

		[Token(Token = "0x1700009D")]
		public override ToolInputState ToolInputState
		{
			[Token(Token = "0x6000858")]
			[Address(RVA = "0xDF07A4", Offset = "0xDF07A4", VA = "0xDF07A4", Slot = "5")]
			get
			{
				return default(ToolInputState);
			}
		}

		[Token(Token = "0x1700009E")]
		public override bool IsFarFieldTool
		{
			[Token(Token = "0x6000859")]
			[Address(RVA = "0xDF07AC", Offset = "0xDF07AC", VA = "0xDF07AC", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700009F")]
		public override bool EnableState
		{
			[Token(Token = "0x600085A")]
			[Address(RVA = "0xDF07B4", Offset = "0xDF07B4", VA = "0xDF07B4", Slot = "10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600085B")]
			[Address(RVA = "0xDF07DC", Offset = "0xDF07DC", VA = "0xDF07DC", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x600085C")]
		[Address(RVA = "0xDF080C", Offset = "0xDF080C", VA = "0xDF080C", Slot = "12")]
		public override void Initialize()
		{
		}

		[Token(Token = "0x600085D")]
		[Address(RVA = "0xDF08BC", Offset = "0xDF08BC", VA = "0xDF08BC")]
		[IteratorStateMachine(typeof(<AttachTriggerLogic>d__21))]
		private IEnumerator AttachTriggerLogic()
		{
			return null;
		}

		[Token(Token = "0x600085E")]
		[Address(RVA = "0xDF0958", Offset = "0xDF0958", VA = "0xDF0958")]
		private void Update()
		{
		}

		[Token(Token = "0x600085F")]
		[Address(RVA = "0xDF0BD8", Offset = "0xDF0BD8", VA = "0xDF0BD8")]
		private void UpdateAverageVelocity()
		{
		}

		[Token(Token = "0x6000860")]
		[Address(RVA = "0xDF0D94", Offset = "0xDF0D94", VA = "0xDF0D94")]
		private void CheckAndUpdateScale()
		{
		}

		[Token(Token = "0x6000861")]
		[Address(RVA = "0xDF0E7C", Offset = "0xDF0E7C", VA = "0xDF0E7C", Slot = "7")]
		public override List<InteractableCollisionInfo> GetNextIntersectingObjects()
		{
			return null;
		}

		[Token(Token = "0x6000862")]
		[Address(RVA = "0xDF1210", Offset = "0xDF1210", VA = "0xDF1210", Slot = "8")]
		public override void FocusOnInteractable(Interactable focusedInteractable, ColliderZone colliderZone)
		{
		}

		[Token(Token = "0x6000863")]
		[Address(RVA = "0xDF1214", Offset = "0xDF1214", VA = "0xDF1214", Slot = "9")]
		public override void DeFocus()
		{
		}

		[Token(Token = "0x6000864")]
		[Address(RVA = "0xDF1218", Offset = "0xDF1218", VA = "0xDF1218")]
		public FingerTipPokeTool()
		{
		}
	}
	[Token(Token = "0x2000152")]
	public class FingerTipPokeToolView : MonoBehaviour, InteractableToolView
	{
		[Token(Token = "0x40008B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer _sphereMeshRenderer;

		[Token(Token = "0x170000A2")]
		public InteractableTool InteractableTool
		{
			[Token(Token = "0x600086B")]
			[Address(RVA = "0xDF18B4", Offset = "0xDF18B4", VA = "0xDF18B4", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600086C")]
			[Address(RVA = "0xDF18BC", Offset = "0xDF18BC", VA = "0xDF18BC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000A3")]
		public bool EnableState
		{
			[Token(Token = "0x600086D")]
			[Address(RVA = "0xDF18C4", Offset = "0xDF18C4", VA = "0xDF18C4", Slot = "6")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600086E")]
			[Address(RVA = "0xDF18E0", Offset = "0xDF18E0", VA = "0xDF18E0", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x170000A4")]
		public bool ToolActivateState
		{
			[Token(Token = "0x600086F")]
			[Address(RVA = "0xDF1900", Offset = "0xDF1900", VA = "0xDF1900", Slot = "8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000870")]
			[Address(RVA = "0xDF1908", Offset = "0xDF1908", VA = "0xDF1908", Slot = "9")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000A5")]
		public float SphereRadius
		{
			[Token(Token = "0x6000871")]
			[Address(RVA = "0xDF1914", Offset = "0xDF1914", VA = "0xDF1914")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000872")]
			[Address(RVA = "0xDF191C", Offset = "0xDF191C", VA = "0xDF191C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000873")]
		[Address(RVA = "0xDF1924", Offset = "0xDF1924", VA = "0xDF1924")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000874")]
		[Address(RVA = "0xDF1960", Offset = "0xDF1960", VA = "0xDF1960", Slot = "5")]
		public void SetFocusedInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x6000875")]
		[Address(RVA = "0xDF1964", Offset = "0xDF1964", VA = "0xDF1964")]
		public FingerTipPokeToolView()
		{
		}
	}
	[Token(Token = "0x2000153")]
	[Flags]
	public enum InteractableToolTags
	{
		[Token(Token = "0x40008B9")]
		None = 0,
		[Token(Token = "0x40008BA")]
		Ray = 1,
		[Token(Token = "0x40008BB")]
		Poke = 4,
		[Token(Token = "0x40008BC")]
		All = -1
	}
	[Token(Token = "0x2000154")]
	public enum ToolInputState
	{
		[Token(Token = "0x40008BE")]
		Inactive,
		[Token(Token = "0x40008BF")]
		PrimaryInputDown,
		[Token(Token = "0x40008C0")]
		PrimaryInputDownStay,
		[Token(Token = "0x40008C1")]
		PrimaryInputUp
	}
	[Token(Token = "0x2000155")]
	public class InteractableCollisionInfo
	{
		[Token(Token = "0x40008C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public ColliderZone InteractableCollider;

		[Token(Token = "0x40008C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InteractableCollisionDepth CollisionDepth;

		[Token(Token = "0x40008C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public InteractableTool CollidingTool;

		[Token(Token = "0x6000876")]
		[Address(RVA = "0xDF11BC", Offset = "0xDF11BC", VA = "0xDF11BC")]
		public InteractableCollisionInfo(ColliderZone collider, InteractableCollisionDepth collisionDepth, InteractableTool collidingTool)
		{
		}
	}
	[Token(Token = "0x2000156")]
	public abstract class InteractableTool : MonoBehaviour
	{
		[Token(Token = "0x40008C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected List<InteractableCollisionInfo> _currentIntersectingObjects;

		[Token(Token = "0x40008C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Interactable> _addedInteractables;

		[Token(Token = "0x40008CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Interactable> _removedInteractables;

		[Token(Token = "0x40008CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<Interactable> _remainingInteractables;

		[Token(Token = "0x40008CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<Interactable, InteractableCollisionInfo> _currInteractableToCollisionInfos;

		[Token(Token = "0x40008CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<Interactable, InteractableCollisionInfo> _prevInteractableToCollisionInfos;

		[Token(Token = "0x170000A6")]
		public Transform ToolTransform
		{
			[Token(Token = "0x6000877")]
			[Address(RVA = "0xDED670", Offset = "0xDED670", VA = "0xDED670")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000A7")]
		public bool IsRightHandedTool
		{
			[Token(Token = "0x6000878")]
			[Address(RVA = "0xDF196C", Offset = "0xDF196C", VA = "0xDF196C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000879")]
			[Address(RVA = "0xDF1974", Offset = "0xDF1974", VA = "0xDF1974")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000A8")]
		public abstract InteractableToolTags ToolTags
		{
			[Token(Token = "0x600087A")]
			get;
		}

		[Token(Token = "0x170000A9")]
		public abstract ToolInputState ToolInputState
		{
			[Token(Token = "0x600087B")]
			get;
		}

		[Token(Token = "0x170000AA")]
		public abstract bool IsFarFieldTool
		{
			[Token(Token = "0x600087C")]
			get;
		}

		[Token(Token = "0x170000AB")]
		public Vector3 Velocity
		{
			[Token(Token = "0x600087D")]
			[Address(RVA = "0xDF1980", Offset = "0xDF1980", VA = "0xDF1980")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600087E")]
			[Address(RVA = "0xDF198C", Offset = "0xDF198C", VA = "0xDF198C")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170000AC")]
		public Vector3 InteractionPosition
		{
			[Token(Token = "0x600087F")]
			[Address(RVA = "0xDF1998", Offset = "0xDF1998", VA = "0xDF1998")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000880")]
			[Address(RVA = "0xDF19A4", Offset = "0xDF19A4", VA = "0xDF19A4")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170000AD")]
		public abstract bool EnableState
		{
			[Token(Token = "0x6000885")]
			get;
			[Token(Token = "0x6000886")]
			set;
		}

		[Token(Token = "0x6000881")]
		[Address(RVA = "0xDF19B0", Offset = "0xDF19B0", VA = "0xDF19B0")]
		public List<InteractableCollisionInfo> GetCurrentIntersectingObjects()
		{
			return null;
		}

		[Token(Token = "0x6000882")]
		public abstract List<InteractableCollisionInfo> GetNextIntersectingObjects();

		[Token(Token = "0x6000883")]
		public abstract void FocusOnInteractable(Interactable focusedInteractable, ColliderZone colliderZone);

		[Token(Token = "0x6000884")]
		public abstract void DeFocus();

		[Token(Token = "0x6000887")]
		public abstract void Initialize();

		[Token(Token = "0x6000888")]
		[Address(RVA = "0xDF05FC", Offset = "0xDF05FC", VA = "0xDF05FC")]
		public KeyValuePair<Interactable, InteractableCollisionInfo> GetFirstCurrentCollisionInfo()
		{
			return default(KeyValuePair<Interactable, InteractableCollisionInfo>);
		}

		[Token(Token = "0x6000889")]
		[Address(RVA = "0xDF0644", Offset = "0xDF0644", VA = "0xDF0644")]
		public void ClearAllCurrentCollisionInfos()
		{
		}

		[Token(Token = "0x600088A")]
		[Address(RVA = "0xDF19B8", Offset = "0xDF19B8", VA = "0xDF19B8", Slot = "13")]
		public virtual void UpdateCurrentCollisionsBasedOnDepth()
		{
		}

		[Token(Token = "0x600088B")]
		[Address(RVA = "0xDF1C80", Offset = "0xDF1C80", VA = "0xDF1C80", Slot = "14")]
		public virtual void UpdateLatestCollisionData()
		{
		}

		[Token(Token = "0x600088C")]
		[Address(RVA = "0xDF122C", Offset = "0xDF122C", VA = "0xDF122C")]
		protected InteractableTool()
		{
		}
	}
	[Token(Token = "0x2000157")]
	public interface InteractableToolView
	{
		[Token(Token = "0x170000AE")]
		InteractableTool InteractableTool
		{
			[Token(Token = "0x600088D")]
			get;
		}

		[Token(Token = "0x170000AF")]
		bool EnableState
		{
			[Token(Token = "0x600088F")]
			get;
			[Token(Token = "0x6000890")]
			set;
		}

		[Token(Token = "0x170000B0")]
		bool ToolActivateState
		{
			[Token(Token = "0x6000891")]
			get;
			[Token(Token = "0x6000892")]
			set;
		}

		[Token(Token = "0x600088E")]
		void SetFocusedInteractable(Interactable interactable);
	}
	[Token(Token = "0x2000158")]
	public class PinchStateModule
	{
		[Token(Token = "0x2000159")]
		private enum PinchState
		{
			[Token(Token = "0x40008D2")]
			None,
			[Token(Token = "0x40008D3")]
			PinchDown,
			[Token(Token = "0x40008D4")]
			PinchStay,
			[Token(Token = "0x40008D5")]
			PinchUp
		}

		[Token(Token = "0x40008CE")]
		private const float PINCH_STRENGTH_THRESHOLD = 1f;

		[Token(Token = "0x40008CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private PinchState _currPinchState;

		[Token(Token = "0x40008D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Interactable _firstFocusedInteractable;

		[Token(Token = "0x170000B1")]
		public bool PinchUpAndDownOnFocusedObject
		{
			[Token(Token = "0x6000893")]
			[Address(RVA = "0xDF251C", Offset = "0xDF251C", VA = "0xDF251C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B2")]
		public bool PinchSteadyOnFocusedObject
		{
			[Token(Token = "0x6000894")]
			[Address(RVA = "0xDF2598", Offset = "0xDF2598", VA = "0xDF2598")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B3")]
		public bool PinchDownOnFocusedObject
		{
			[Token(Token = "0x6000895")]
			[Address(RVA = "0xDF2614", Offset = "0xDF2614", VA = "0xDF2614")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000896")]
		[Address(RVA = "0xDF2690", Offset = "0xDF2690", VA = "0xDF2690")]
		public PinchStateModule()
		{
		}

		[Token(Token = "0x6000897")]
		[Address(RVA = "0xDF26B8", Offset = "0xDF26B8", VA = "0xDF26B8")]
		public void UpdateState(OVRHand hand, Interactable currFocusedInteractable)
		{
		}
	}
	[Token(Token = "0x200015A")]
	public class RayTool : InteractableTool
	{
		[Token(Token = "0x40008D6")]
		private const float MINIMUM_RAY_CAST_DISTANCE = 0.8f;

		[Token(Token = "0x40008D7")]
		private const float COLLIDER_RADIUS = 0.01f;

		[Token(Token = "0x40008D8")]
		private const int NUM_MAX_PRIMARY_HITS = 10;

		[Token(Token = "0x40008D9")]
		private const int NUM_MAX_SECONDARY_HITS = 25;

		[Token(Token = "0x40008DA")]
		private const int NUM_COLLIDERS_TO_TEST = 20;

		[Token(Token = "0x40008DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private RayToolView _rayToolView;

		[Token(Token = "0x40008DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Range(0f, 45f)]
		[SerializeField]
		private float _coneAngleDegrees;

		[Token(Token = "0x40008DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[SerializeField]
		private float _farFieldMaxDistance;

		[Token(Token = "0x40008DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PinchStateModule _pinchStateModule;

		[Token(Token = "0x40008DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Interactable _focusedInteractable;

		[Token(Token = "0x40008E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Collider[] _collidersOverlapped;

		[Token(Token = "0x40008E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Interactable _currInteractableCastedAgainst;

		[Token(Token = "0x40008E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float _coneAngleReleaseDegrees;

		[Token(Token = "0x40008E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private RaycastHit[] _primaryHits;

		[Token(Token = "0x40008E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Collider[] _secondaryOverlapResults;

		[Token(Token = "0x40008E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool _initialized;

		[Token(Token = "0x170000B4")]
		public override InteractableToolTags ToolTags
		{
			[Token(Token = "0x6000898")]
			[Address(RVA = "0xDF2830", Offset = "0xDF2830", VA = "0xDF2830", Slot = "4")]
			get
			{
				return default(InteractableToolTags);
			}
		}

		[Token(Token = "0x170000B5")]
		public override ToolInputState ToolInputState
		{
			[Token(Token = "0x6000899")]
			[Address(RVA = "0xDF2838", Offset = "0xDF2838", VA = "0xDF2838", Slot = "5")]
			get
			{
				return default(ToolInputState);
			}
		}

		[Token(Token = "0x170000B6")]
		public override bool IsFarFieldTool
		{
			[Token(Token = "0x600089A")]
			[Address(RVA = "0xDF2894", Offset = "0xDF2894", VA = "0xDF2894", Slot = "6")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000B7")]
		public override bool EnableState
		{
			[Token(Token = "0x600089B")]
			[Address(RVA = "0xDF289C", Offset = "0xDF289C", VA = "0xDF289C", Slot = "10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600089C")]
			[Address(RVA = "0xDF28DC", Offset = "0xDF28DC", VA = "0xDF28DC", Slot = "11")]
			set
			{
			}
		}

		[Token(Token = "0x600089D")]
		[Address(RVA = "0xDF294C", Offset = "0xDF294C", VA = "0xDF294C", Slot = "12")]
		public override void Initialize()
		{
		}

		[Token(Token = "0x600089E")]
		[Address(RVA = "0xDF29A0", Offset = "0xDF29A0", VA = "0xDF29A0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600089F")]
		[Address(RVA = "0xDF2A2C", Offset = "0xDF2A2C", VA = "0xDF2A2C")]
		private void Update()
		{
		}

		[Token(Token = "0x60008A0")]
		[Address(RVA = "0xDF2CD0", Offset = "0xDF2CD0", VA = "0xDF2CD0")]
		private Vector3 GetRayCastOrigin()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008A1")]
		[Address(RVA = "0xDF2D4C", Offset = "0xDF2D4C", VA = "0xDF2D4C", Slot = "7")]
		public override List<InteractableCollisionInfo> GetNextIntersectingObjects()
		{
			return null;
		}

		[Token(Token = "0x60008A2")]
		[Address(RVA = "0xDF3140", Offset = "0xDF3140", VA = "0xDF3140")]
		private bool HasRayReleasedInteractable(Interactable focusedInteractable)
		{
			return default(bool);
		}

		[Token(Token = "0x60008A3")]
		[Address(RVA = "0xDF32DC", Offset = "0xDF32DC", VA = "0xDF32DC")]
		private Interactable FindTargetInteractable()
		{
			return null;
		}

		[Token(Token = "0x60008A4")]
		[Address(RVA = "0xDF33F4", Offset = "0xDF33F4", VA = "0xDF33F4")]
		private Interactable FindPrimaryRaycastHit(Vector3 rayOrigin, Vector3 rayDirection)
		{
			return null;
		}

		[Token(Token = "0x60008A5")]
		[Address(RVA = "0xDF3718", Offset = "0xDF3718", VA = "0xDF3718")]
		private Interactable FindInteractableViaConeTest(Vector3 rayOrigin, Vector3 rayDirection)
		{
			return null;
		}

		[Token(Token = "0x60008A6")]
		[Address(RVA = "0xDF3A94", Offset = "0xDF3A94", VA = "0xDF3A94", Slot = "8")]
		public override void FocusOnInteractable(Interactable focusedInteractable, ColliderZone colliderZone)
		{
		}

		[Token(Token = "0x60008A7")]
		[Address(RVA = "0xDF3B6C", Offset = "0xDF3B6C", VA = "0xDF3B6C", Slot = "9")]
		public override void DeFocus()
		{
		}

		[Token(Token = "0x60008A8")]
		[Address(RVA = "0xDF3B9C", Offset = "0xDF3B9C", VA = "0xDF3B9C")]
		public RayTool()
		{
		}
	}
	[Token(Token = "0x200015B")]
	public class RayToolView : MonoBehaviour, InteractableToolView
	{
		[Token(Token = "0x40008E6")]
		private const int NUM_RAY_LINE_POSITIONS = 25;

		[Token(Token = "0x40008E7")]
		private const float DEFAULT_RAY_CAST_DISTANCE = 3f;

		[Token(Token = "0x40008E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Transform _targetTransform;

		[Token(Token = "0x40008E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private LineRenderer _lineRenderer;

		[Token(Token = "0x40008EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _toolActivateState;

		[Token(Token = "0x40008EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform _focusedTransform;

		[Token(Token = "0x40008EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3[] linePositions;

		[Token(Token = "0x40008ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Gradient _oldColorGradient;

		[Token(Token = "0x40008EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Gradient _highLightColorGradient;

		[Token(Token = "0x170000B8")]
		public bool EnableState
		{
			[Token(Token = "0x60008A9")]
			[Address(RVA = "0xDF28C0", Offset = "0xDF28C0", VA = "0xDF28C0", Slot = "6")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60008AA")]
			[Address(RVA = "0xDF28F8", Offset = "0xDF28F8", VA = "0xDF28F8", Slot = "7")]
			set
			{
			}
		}

		[Token(Token = "0x170000B9")]
		public bool ToolActivateState
		{
			[Token(Token = "0x60008AB")]
			[Address(RVA = "0xDF3CB0", Offset = "0xDF3CB0", VA = "0xDF3CB0", Slot = "8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60008AC")]
			[Address(RVA = "0xDF2C94", Offset = "0xDF2C94", VA = "0xDF2C94", Slot = "9")]
			set
			{
			}
		}

		[Token(Token = "0x170000BA")]
		public InteractableTool InteractableTool
		{
			[Token(Token = "0x60008AE")]
			[Address(RVA = "0xDF3ED8", Offset = "0xDF3ED8", VA = "0xDF3ED8", Slot = "4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60008AF")]
			[Address(RVA = "0xDF3EE0", Offset = "0xDF3EE0", VA = "0xDF3EE0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x60008AD")]
		[Address(RVA = "0xDF3CB8", Offset = "0xDF3CB8", VA = "0xDF3CB8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008B0")]
		[Address(RVA = "0xDF3ACC", Offset = "0xDF3ACC", VA = "0xDF3ACC", Slot = "5")]
		public void SetFocusedInteractable(Interactable interactable)
		{
		}

		[Token(Token = "0x60008B1")]
		[Address(RVA = "0xDF3EE8", Offset = "0xDF3EE8", VA = "0xDF3EE8")]
		private void Update()
		{
		}

		[Token(Token = "0x60008B2")]
		[Address(RVA = "0xDF4194", Offset = "0xDF4194", VA = "0xDF4194")]
		public static Vector3 GetPointOnBezierCurve(Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3, float t)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008B3")]
		[Address(RVA = "0xDF423C", Offset = "0xDF423C", VA = "0xDF423C")]
		public RayToolView()
		{
		}
	}
	[Token(Token = "0x200015C")]
	public class DistanceGrabberSample : MonoBehaviour
	{
		[Token(Token = "0x40008F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool useSpherecast;

		[Token(Token = "0x40008F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool allowGrabThroughWalls;

		[Token(Token = "0x40008F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private DistanceGrabber[] m_grabbers;

		[Token(Token = "0x170000BB")]
		public bool UseSpherecast
		{
			[Token(Token = "0x60008B4")]
			[Address(RVA = "0xDF42A0", Offset = "0xDF42A0", VA = "0xDF42A0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60008B5")]
			[Address(RVA = "0xDF42A8", Offset = "0xDF42A8", VA = "0xDF42A8")]
			set
			{
			}
		}

		[Token(Token = "0x170000BC")]
		public bool AllowGrabThroughWalls
		{
			[Token(Token = "0x60008B6")]
			[Address(RVA = "0xDF4324", Offset = "0xDF4324", VA = "0xDF4324")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60008B7")]
			[Address(RVA = "0xDF432C", Offset = "0xDF432C", VA = "0xDF432C")]
			set
			{
			}
		}

		[Token(Token = "0x60008B8")]
		[Address(RVA = "0xDF4388", Offset = "0xDF4388", VA = "0xDF4388")]
		private void Start()
		{
		}

		[Token(Token = "0x60008B9")]
		[Address(RVA = "0xDF4628", Offset = "0xDF4628", VA = "0xDF4628")]
		public void ToggleSphereCasting(Toggle t)
		{
		}

		[Token(Token = "0x60008BA")]
		[Address(RVA = "0xDF4638", Offset = "0xDF4638", VA = "0xDF4638")]
		public void ToggleGrabThroughWalls(Toggle t)
		{
		}

		[Token(Token = "0x60008BB")]
		[Address(RVA = "0xDF4648", Offset = "0xDF4648", VA = "0xDF4648")]
		public DistanceGrabberSample()
		{
		}
	}
	[Token(Token = "0x200015D")]
	public class ControllerBoxController : MonoBehaviour
	{
		[Token(Token = "0x40008F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private TrainLocomotive _locomotive;

		[Token(Token = "0x40008F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private CowController _cowController;

		[Token(Token = "0x60008BC")]
		[Address(RVA = "0xDF4650", Offset = "0xDF4650", VA = "0xDF4650")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008BD")]
		[Address(RVA = "0xDF4654", Offset = "0xDF4654", VA = "0xDF4654")]
		public void StartStopStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x60008BE")]
		[Address(RVA = "0xDF4688", Offset = "0xDF4688", VA = "0xDF4688")]
		public void DecreaseSpeedStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x60008BF")]
		[Address(RVA = "0xDF46BC", Offset = "0xDF46BC", VA = "0xDF46BC")]
		public void IncreaseSpeedStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x60008C0")]
		[Address(RVA = "0xDF46F0", Offset = "0xDF46F0", VA = "0xDF46F0")]
		public void SmokeButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x60008C1")]
		[Address(RVA = "0xDF4724", Offset = "0xDF4724", VA = "0xDF4724")]
		public void WhistleButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x60008C2")]
		[Address(RVA = "0xDF4758", Offset = "0xDF4758", VA = "0xDF4758")]
		public void ReverseButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x60008C3")]
		[Address(RVA = "0xDF478C", Offset = "0xDF478C", VA = "0xDF478C")]
		public void SwitchVisualization(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x60008C4")]
		[Address(RVA = "0xDF47EC", Offset = "0xDF47EC", VA = "0xDF47EC")]
		public void GoMoo(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x60008C5")]
		[Address(RVA = "0xDF484C", Offset = "0xDF484C", VA = "0xDF484C")]
		public ControllerBoxController()
		{
		}
	}
	[Token(Token = "0x200015E")]
	public class CowController : MonoBehaviour
	{
		[Token(Token = "0x40008F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Animation _cowAnimation;

		[Token(Token = "0x40008F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioSource _mooCowAudioSource;

		[Token(Token = "0x60008C6")]
		[Address(RVA = "0xDF4854", Offset = "0xDF4854", VA = "0xDF4854")]
		private void Start()
		{
		}

		[Token(Token = "0x60008C7")]
		[Address(RVA = "0xDF4858", Offset = "0xDF4858", VA = "0xDF4858")]
		public void PlayMooSound()
		{
		}

		[Token(Token = "0x60008C8")]
		[Address(RVA = "0xDF481C", Offset = "0xDF481C", VA = "0xDF481C")]
		public void GoMooCowGo()
		{
		}

		[Token(Token = "0x60008C9")]
		[Address(RVA = "0xDF488C", Offset = "0xDF488C", VA = "0xDF488C")]
		public CowController()
		{
		}
	}
	[Token(Token = "0x200015F")]
	public class PanelHMDFollower : MonoBehaviour
	{
		[Token(Token = "0x2000160")]
		[CompilerGenerated]
		private sealed class <LerpToHMD>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000901")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000902")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000903")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PanelHMDFollower <>4__this;

			[Token(Token = "0x4000904")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Vector3 <newPanelPosition>5__2;

			[Token(Token = "0x4000905")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <startTime>5__3;

			[Token(Token = "0x4000906")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <endTime>5__4;

			[Token(Token = "0x170000BD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60008D2")]
				[Address(RVA = "0xDF4F0C", Offset = "0xDF4F0C", VA = "0xDF4F0C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000BE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60008D4")]
				[Address(RVA = "0xDF4F54", Offset = "0xDF4F54", VA = "0xDF4F54", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60008CF")]
			[Address(RVA = "0xDF4C84", Offset = "0xDF4C84", VA = "0xDF4C84")]
			[DebuggerHidden]
			public <LerpToHMD>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x60008D0")]
			[Address(RVA = "0xDF4D4C", Offset = "0xDF4D4C", VA = "0xDF4D4C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60008D1")]
			[Address(RVA = "0xDF4D50", Offset = "0xDF4D50", VA = "0xDF4D50", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60008D3")]
			[Address(RVA = "0xDF4F14", Offset = "0xDF4F14", VA = "0xDF4F14", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40008F7")]
		private const float TOTAL_DURATION = 3f;

		[Token(Token = "0x40008F8")]
		private const float HMD_MOVEMENT_THRESHOLD = 0.3f;

		[Token(Token = "0x40008F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _maxDistance;

		[Token(Token = "0x40008FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float _minDistance;

		[Token(Token = "0x40008FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _minZDistance;

		[Token(Token = "0x40008FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private OVRCameraRig _cameraRig;

		[Token(Token = "0x40008FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 _panelInitialPosition;

		[Token(Token = "0x40008FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Coroutine _coroutine;

		[Token(Token = "0x40008FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 _prevPos;

		[Token(Token = "0x4000900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 _lastMovedToPos;

		[Token(Token = "0x60008CA")]
		[Address(RVA = "0xDF4894", Offset = "0xDF4894", VA = "0xDF4894")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008CB")]
		[Address(RVA = "0xDF4934", Offset = "0xDF4934", VA = "0xDF4934")]
		private void Update()
		{
		}

		[Token(Token = "0x60008CC")]
		[Address(RVA = "0xDF4C44", Offset = "0xDF4C44", VA = "0xDF4C44")]
		private Vector3 CalculateIdealAnchorPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60008CD")]
		[Address(RVA = "0xDF4BD0", Offset = "0xDF4BD0", VA = "0xDF4BD0")]
		[IteratorStateMachine(typeof(<LerpToHMD>d__13))]
		private IEnumerator LerpToHMD()
		{
			return null;
		}

		[Token(Token = "0x60008CE")]
		[Address(RVA = "0xDF4CAC", Offset = "0xDF4CAC", VA = "0xDF4CAC")]
		public PanelHMDFollower()
		{
		}
	}
	[Token(Token = "0x2000161")]
	public class SelectionCylinder : MonoBehaviour
	{
		[Token(Token = "0x2000162")]
		public enum SelectionState
		{
			[Token(Token = "0x400090E")]
			Off,
			[Token(Token = "0x400090F")]
			Selected,
			[Token(Token = "0x4000910")]
			Highlighted
		}

		[Token(Token = "0x4000907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer _selectionMeshRenderer;

		[Token(Token = "0x4000908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int _colorId;

		[Token(Token = "0x4000909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material[] _selectionMaterials;

		[Token(Token = "0x400090A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Color[] _defaultSelectionColors;

		[Token(Token = "0x400090B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Color[] _highlightColors;

		[Token(Token = "0x400090C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SelectionState _currSelectionState;

		[Token(Token = "0x170000BF")]
		public SelectionState CurrSelectionState
		{
			[Token(Token = "0x60008D5")]
			[Address(RVA = "0xDF4F5C", Offset = "0xDF4F5C", VA = "0xDF4F5C")]
			get
			{
				return default(SelectionState);
			}
			[Token(Token = "0x60008D6")]
			[Address(RVA = "0xDF4F64", Offset = "0xDF4F64", VA = "0xDF4F64")]
			set
			{
			}
		}

		[Token(Token = "0x60008D7")]
		[Address(RVA = "0xDF50B8", Offset = "0xDF50B8", VA = "0xDF50B8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008D8")]
		[Address(RVA = "0xDF527C", Offset = "0xDF527C", VA = "0xDF527C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60008D9")]
		[Address(RVA = "0xDF4FD8", Offset = "0xDF4FD8", VA = "0xDF4FD8")]
		private void AffectSelectionColor(Color[] newColors)
		{
		}

		[Token(Token = "0x60008DA")]
		[Address(RVA = "0xDF5344", Offset = "0xDF5344", VA = "0xDF5344")]
		public SelectionCylinder()
		{
		}
	}
	[Token(Token = "0x2000163")]
	public class TrackSegment : MonoBehaviour
	{
		[Token(Token = "0x2000164")]
		public enum SegmentType
		{
			[Token(Token = "0x400091F")]
			Straight,
			[Token(Token = "0x4000920")]
			LeftTurn,
			[Token(Token = "0x4000921")]
			RightTurn,
			[Token(Token = "0x4000922")]
			Switch
		}

		[Token(Token = "0x4000911")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private SegmentType _segmentType;

		[Token(Token = "0x4000912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private MeshFilter _straight;

		[Token(Token = "0x4000913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MeshFilter _leftTurn;

		[Token(Token = "0x4000914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private MeshFilter _rightTurn;

		[Token(Token = "0x4000915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _gridSize;

		[Token(Token = "0x4000916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int _subDivCount;

		[Token(Token = "0x4000917")]
		private const float _originalGridSize = 0.8f;

		[Token(Token = "0x4000918")]
		private const float _trackWidth = 0.15f;

		[Token(Token = "0x4000919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject _mesh;

		[Token(Token = "0x400091B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Pose _p1;

		[Token(Token = "0x400091C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Pose _p2;

		[Token(Token = "0x400091D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Pose _endPose;

		[Token(Token = "0x170000C0")]
		public float StartDistance
		{
			[Token(Token = "0x60008DC")]
			[Address(RVA = "0xDF53B4", Offset = "0xDF53B4", VA = "0xDF53B4")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60008DD")]
			[Address(RVA = "0xDF53BC", Offset = "0xDF53BC", VA = "0xDF53BC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170000C1")]
		public float GridSize
		{
			[Token(Token = "0x60008DE")]
			[Address(RVA = "0xDF53C4", Offset = "0xDF53C4", VA = "0xDF53C4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60008DF")]
			[Address(RVA = "0xDF53CC", Offset = "0xDF53CC", VA = "0xDF53CC")]
			private set
			{
			}
		}

		[Token(Token = "0x170000C2")]
		public int SubDivCount
		{
			[Token(Token = "0x60008E0")]
			[Address(RVA = "0xDF53D4", Offset = "0xDF53D4", VA = "0xDF53D4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60008E1")]
			[Address(RVA = "0xDF53DC", Offset = "0xDF53DC", VA = "0xDF53DC")]
			set
			{
			}
		}

		[Token(Token = "0x170000C3")]
		public SegmentType Type
		{
			[Token(Token = "0x60008E2")]
			[Address(RVA = "0xDF53E4", Offset = "0xDF53E4", VA = "0xDF53E4")]
			get
			{
				return default(SegmentType);
			}
		}

		[Token(Token = "0x170000C4")]
		public Pose EndPose
		{
			[Token(Token = "0x60008E3")]
			[Address(RVA = "0xDF53EC", Offset = "0xDF53EC", VA = "0xDF53EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000C5")]
		public float Radius
		{
			[Token(Token = "0x60008E4")]
			[Address(RVA = "0xDF57C0", Offset = "0xDF57C0", VA = "0xDF57C0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170000C6")]
		public float SegmentLength
		{
			[Token(Token = "0x60008E6")]
			[Address(RVA = "0xDF5448", Offset = "0xDF5448", VA = "0xDF5448")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60008E5")]
		[Address(RVA = "0xDF57D0", Offset = "0xDF57D0", VA = "0xDF57D0")]
		public float setGridSize(float size)
		{
			return default(float);
		}

		[Token(Token = "0x60008E7")]
		[Address(RVA = "0xDF57E8", Offset = "0xDF57E8", VA = "0xDF57E8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008E8")]
		[Address(RVA = "0xDF5488", Offset = "0xDF5488", VA = "0xDF5488")]
		public void UpdatePose(float distanceIntoSegment, Pose pose)
		{
		}

		[Token(Token = "0x60008E9")]
		[Address(RVA = "0xDF57EC", Offset = "0xDF57EC", VA = "0xDF57EC")]
		private void Update()
		{
		}

		[Token(Token = "0x60008EA")]
		[Address(RVA = "0xDF57F0", Offset = "0xDF57F0", VA = "0xDF57F0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60008EB")]
		[Address(RVA = "0xDF584C", Offset = "0xDF584C", VA = "0xDF584C")]
		private void DrawDebugLines()
		{
		}

		[Token(Token = "0x60008EC")]
		[Address(RVA = "0xDF6180", Offset = "0xDF6180", VA = "0xDF6180")]
		public void RegenerateTrackAndMesh()
		{
		}

		[Token(Token = "0x60008ED")]
		[Address(RVA = "0xDF6404", Offset = "0xDF6404", VA = "0xDF6404")]
		public TrackSegment()
		{
		}
	}
	[Token(Token = "0x2000165")]
	public class TrainButtonVisualController : MonoBehaviour
	{
		[Token(Token = "0x2000166")]
		[CompilerGenerated]
		private sealed class <ResetPosition>d__26 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000934")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000935")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000936")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TrainButtonVisualController <>4__this;

			[Token(Token = "0x4000937")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <startTime>5__2;

			[Token(Token = "0x4000938")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <endTime>5__3;

			[Token(Token = "0x170000C7")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60008FC")]
				[Address(RVA = "0xDF6E9C", Offset = "0xDF6E9C", VA = "0xDF6E9C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000C8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60008FE")]
				[Address(RVA = "0xDF6EE4", Offset = "0xDF6EE4", VA = "0xDF6EE4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60008F9")]
			[Address(RVA = "0xDF6CF8", Offset = "0xDF6CF8", VA = "0xDF6CF8")]
			[DebuggerHidden]
			public <ResetPosition>d__26(int <>1__state)
			{
			}

			[Token(Token = "0x60008FA")]
			[Address(RVA = "0xDF6D20", Offset = "0xDF6D20", VA = "0xDF6D20", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60008FB")]
			[Address(RVA = "0xDF6D24", Offset = "0xDF6D24", VA = "0xDF6D24", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60008FD")]
			[Address(RVA = "0xDF6EA4", Offset = "0xDF6EA4", VA = "0xDF6EA4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000923")]
		private const float LERP_TO_OLD_POS_DURATION = 1f;

		[Token(Token = "0x4000924")]
		private const float LOCAL_SIZE_HALVED = 0.5f;

		[Token(Token = "0x4000925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private MeshRenderer _meshRenderer;

		[Token(Token = "0x4000926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private MeshRenderer _glowRenderer;

		[Token(Token = "0x4000927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private ButtonController _buttonController;

		[Token(Token = "0x4000928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Color _buttonContactColor;

		[Token(Token = "0x4000929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Color _buttonActionColor;

		[Token(Token = "0x400092A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x400092B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private AudioClip _actionSoundEffect;

		[Token(Token = "0x400092C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Transform _buttonContactTransform;

		[Token(Token = "0x400092D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private float _contactMaxDisplacementDistance;

		[Token(Token = "0x400092E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material _buttonMaterial;

		[Token(Token = "0x400092F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Color _buttonDefaultColor;

		[Token(Token = "0x4000930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _materialColorId;

		[Token(Token = "0x4000931")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private bool _buttonInContactOrActionStates;

		[Token(Token = "0x4000932")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Coroutine _lerpToOldPositionCr;

		[Token(Token = "0x4000933")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 _oldPosition;

		[Token(Token = "0x60008EE")]
		[Address(RVA = "0xDF64D8", Offset = "0xDF64D8", VA = "0xDF64D8")]
		private void Awake()
		{
		}

		[Token(Token = "0x60008EF")]
		[Address(RVA = "0xDF6590", Offset = "0xDF6590", VA = "0xDF6590")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60008F0")]
		[Address(RVA = "0xDF6620", Offset = "0xDF6620", VA = "0xDF6620")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60008F1")]
		[Address(RVA = "0xDF6768", Offset = "0xDF6768", VA = "0xDF6768")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60008F2")]
		[Address(RVA = "0xDF68F4", Offset = "0xDF68F4", VA = "0xDF68F4")]
		private void ActionOrInContactZoneStayEvent(ColliderZoneArgs collisionArgs)
		{
		}

		[Token(Token = "0x60008F3")]
		[Address(RVA = "0xDF6A04", Offset = "0xDF6A04", VA = "0xDF6A04")]
		private void InteractableStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x60008F4")]
		[Address(RVA = "0xDF6C08", Offset = "0xDF6C08", VA = "0xDF6C08")]
		private void PlaySound(AudioClip clip)
		{
		}

		[Token(Token = "0x60008F5")]
		[Address(RVA = "0xDF6B14", Offset = "0xDF6B14", VA = "0xDF6B14")]
		private void StopResetLerping()
		{
		}

		[Token(Token = "0x60008F6")]
		[Address(RVA = "0xDF6B28", Offset = "0xDF6B28", VA = "0xDF6B28")]
		private void LerpToOldPosition()
		{
		}

		[Token(Token = "0x60008F7")]
		[Address(RVA = "0xDF6C5C", Offset = "0xDF6C5C", VA = "0xDF6C5C")]
		[IteratorStateMachine(typeof(<ResetPosition>d__26))]
		private IEnumerator ResetPosition()
		{
			return null;
		}

		[Token(Token = "0x60008F8")]
		[Address(RVA = "0xDF6CD0", Offset = "0xDF6CD0", VA = "0xDF6CD0")]
		public TrainButtonVisualController()
		{
		}
	}
	[Token(Token = "0x2000167")]
	public class TrainCar : TrainCarBase
	{
		[Token(Token = "0x4000939")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private TrainCarBase _parentLocomotive;

		[Token(Token = "0x400093A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		protected float _distanceBehindParent;

		[Token(Token = "0x170000C9")]
		public float DistanceBehindParentScaled
		{
			[Token(Token = "0x60008FF")]
			[Address(RVA = "0xDF6EEC", Offset = "0xDF6EEC", VA = "0xDF6EEC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000900")]
		[Address(RVA = "0xDF6EFC", Offset = "0xDF6EFC", VA = "0xDF6EFC", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000901")]
		[Address(RVA = "0xDF6F04", Offset = "0xDF6F04", VA = "0xDF6F04", Slot = "5")]
		public override void UpdatePosition()
		{
		}

		[Token(Token = "0x6000902")]
		[Address(RVA = "0xDF7234", Offset = "0xDF7234", VA = "0xDF7234")]
		public TrainCar()
		{
		}
	}
	[Token(Token = "0x2000168")]
	public abstract class TrainCarBase : MonoBehaviour
	{
		[Token(Token = "0x400093B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Vector3 OFFSET;

		[Token(Token = "0x400093C")]
		private const float WHEEL_RADIUS = 0.027f;

		[Token(Token = "0x400093D")]
		private const float TWO_PI = (float)Math.PI * 2f;

		[Token(Token = "0x400093E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected Transform _frontWheels;

		[Token(Token = "0x400093F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected Transform _rearWheels;

		[Token(Token = "0x4000940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		protected TrainTrack _trainTrack;

		[Token(Token = "0x4000941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected Transform[] _individualWheels;

		[Token(Token = "0x4000943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected float scale;

		[Token(Token = "0x4000944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Pose _frontPose;

		[Token(Token = "0x4000945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Pose _rearPose;

		[Token(Token = "0x170000CA")]
		public float Distance
		{
			[Token(Token = "0x6000903")]
			[Address(RVA = "0xDF7330", Offset = "0xDF7330", VA = "0xDF7330")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000904")]
			[Address(RVA = "0xDF7338", Offset = "0xDF7338", VA = "0xDF7338")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170000CB")]
		public float Scale
		{
			[Token(Token = "0x6000905")]
			[Address(RVA = "0xDF7340", Offset = "0xDF7340", VA = "0xDF7340")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000906")]
			[Address(RVA = "0xDF7348", Offset = "0xDF7348", VA = "0xDF7348")]
			set
			{
			}
		}

		[Token(Token = "0x6000907")]
		[Address(RVA = "0xDF6F00", Offset = "0xDF6F00", VA = "0xDF6F00", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000908")]
		[Address(RVA = "0xDF7350", Offset = "0xDF7350", VA = "0xDF7350")]
		public void UpdatePose(float distance, TrainCarBase train, Pose pose)
		{
		}

		[Token(Token = "0x6000909")]
		[Address(RVA = "0xDF6F40", Offset = "0xDF6F40", VA = "0xDF6F40")]
		protected void UpdateCarPosition()
		{
		}

		[Token(Token = "0x600090A")]
		[Address(RVA = "0xDF7150", Offset = "0xDF7150", VA = "0xDF7150")]
		protected void RotateCarWheels()
		{
		}

		[Token(Token = "0x600090B")]
		public abstract void UpdatePosition();

		[Token(Token = "0x600090C")]
		[Address(RVA = "0xDF7294", Offset = "0xDF7294", VA = "0xDF7294")]
		protected TrainCarBase()
		{
		}
	}
	[Token(Token = "0x2000169")]
	public class TrainCrossingController : MonoBehaviour
	{
		[Token(Token = "0x200016A")]
		[CompilerGenerated]
		private sealed class <AnimateCrossing>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000950")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000951")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000952")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TrainCrossingController <>4__this;

			[Token(Token = "0x4000953")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float animationLength;

			[Token(Token = "0x4000954")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <animationEndTime>5__2;

			[Token(Token = "0x4000955")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <lightBlinkDuration>5__3;

			[Token(Token = "0x4000956")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <lightBlinkStartTime>5__4;

			[Token(Token = "0x4000957")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <lightBlinkEndTime>5__5;

			[Token(Token = "0x4000958")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private Material <lightToBlinkOn>5__6;

			[Token(Token = "0x4000959")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Material <lightToBlinkOff>5__7;

			[Token(Token = "0x400095A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private Color <onColor>5__8;

			[Token(Token = "0x400095B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Color <offColor>5__9;

			[Token(Token = "0x170000CC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600091A")]
				[Address(RVA = "0xDF7CC0", Offset = "0xDF7CC0", VA = "0xDF7CC0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000CD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600091C")]
				[Address(RVA = "0xDF7D08", Offset = "0xDF7D08", VA = "0xDF7D08", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000917")]
			[Address(RVA = "0xDF7934", Offset = "0xDF7934", VA = "0xDF7934")]
			[DebuggerHidden]
			public <AnimateCrossing>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6000918")]
			[Address(RVA = "0xDF7AA8", Offset = "0xDF7AA8", VA = "0xDF7AA8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000919")]
			[Address(RVA = "0xDF7AAC", Offset = "0xDF7AAC", VA = "0xDF7AAC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600091B")]
			[Address(RVA = "0xDF7CC8", Offset = "0xDF7CC8", VA = "0xDF7CC8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x4000947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioClip[] _crossingSounds;

		[Token(Token = "0x4000948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private MeshRenderer _lightSide1Renderer;

		[Token(Token = "0x4000949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private MeshRenderer _lightSide2Renderer;

		[Token(Token = "0x400094A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private SelectionCylinder _selectionCylinder;

		[Token(Token = "0x400094B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material _lightsSide1Mat;

		[Token(Token = "0x400094C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Material _lightsSide2Mat;

		[Token(Token = "0x400094D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int _colorId;

		[Token(Token = "0x400094E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Coroutine _xingAnimationCr;

		[Token(Token = "0x400094F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private InteractableTool _toolInteractingWithMe;

		[Token(Token = "0x600090E")]
		[Address(RVA = "0xDF755C", Offset = "0xDF755C", VA = "0xDF755C")]
		private void Awake()
		{
		}

		[Token(Token = "0x600090F")]
		[Address(RVA = "0xDF75B8", Offset = "0xDF75B8", VA = "0xDF75B8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000910")]
		[Address(RVA = "0xDF7690", Offset = "0xDF7690", VA = "0xDF7690")]
		public void CrossingButtonStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000911")]
		[Address(RVA = "0xDF77E4", Offset = "0xDF77E4", VA = "0xDF77E4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000912")]
		[Address(RVA = "0xDF76EC", Offset = "0xDF76EC", VA = "0xDF76EC")]
		private void ActivateTrainCrossing()
		{
		}

		[Token(Token = "0x6000913")]
		[Address(RVA = "0xDF78B0", Offset = "0xDF78B0", VA = "0xDF78B0")]
		[IteratorStateMachine(typeof(<AnimateCrossing>d__15))]
		private IEnumerator AnimateCrossing(float animationLength)
		{
			return null;
		}

		[Token(Token = "0x6000914")]
		[Address(RVA = "0xDF795C", Offset = "0xDF795C", VA = "0xDF795C")]
		private void AffectMaterials(Material[] materials, Color newColor)
		{
		}

		[Token(Token = "0x6000915")]
		[Address(RVA = "0xDF79F4", Offset = "0xDF79F4", VA = "0xDF79F4")]
		private void ToggleLightObjects(bool enableState)
		{
		}

		[Token(Token = "0x6000916")]
		[Address(RVA = "0xDF7A50", Offset = "0xDF7A50", VA = "0xDF7A50")]
		public TrainCrossingController()
		{
		}
	}
	[Token(Token = "0x200016B")]
	public class TrainLocomotive : TrainCarBase
	{
		[Token(Token = "0x200016C")]
		private enum EngineSoundState
		{
			[Token(Token = "0x400097A")]
			Start,
			[Token(Token = "0x400097B")]
			AccelerateOrSetProperSpeed,
			[Token(Token = "0x400097C")]
			Stop
		}

		[Token(Token = "0x200016D")]
		[CompilerGenerated]
		private sealed class <StartStopTrain>d__34 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400097D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400097E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400097F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool startTrain;

			[Token(Token = "0x4000980")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public TrainLocomotive <>4__this;

			[Token(Token = "0x4000981")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <endSpeed>5__2;

			[Token(Token = "0x4000982")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <timePeriodForSpeedChange>5__3;

			[Token(Token = "0x4000983")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <startTime>5__4;

			[Token(Token = "0x4000984")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <endTime>5__5;

			[Token(Token = "0x4000985")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <startSpeed>5__6;

			[Token(Token = "0x170000CE")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600092F")]
				[Address(RVA = "0xDF87F4", Offset = "0xDF87F4", VA = "0xDF87F4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000CF")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000931")]
				[Address(RVA = "0xDF883C", Offset = "0xDF883C", VA = "0xDF883C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600092C")]
			[Address(RVA = "0xDF800C", Offset = "0xDF800C", VA = "0xDF800C")]
			[DebuggerHidden]
			public <StartStopTrain>d__34(int <>1__state)
			{
			}

			[Token(Token = "0x600092D")]
			[Address(RVA = "0xDF85CC", Offset = "0xDF85CC", VA = "0xDF85CC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600092E")]
			[Address(RVA = "0xDF85D0", Offset = "0xDF85D0", VA = "0xDF85D0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000930")]
			[Address(RVA = "0xDF87FC", Offset = "0xDF87FC", VA = "0xDF87FC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400095C")]
		private const float MIN_SPEED = 0.2f;

		[Token(Token = "0x400095D")]
		private const float MAX_SPEED = 2.7f;

		[Token(Token = "0x400095E")]
		private const float SMOKE_SPEED_MULTIPLIER = 8f;

		[Token(Token = "0x400095F")]
		private const int MAX_PARTICLES_MULTIPLIER = 3;

		[Token(Token = "0x4000960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		[Range(0.2f, 2.7f)]
		protected float _initialSpeed;

		[Token(Token = "0x4000961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private GameObject _startStopButton;

		[Token(Token = "0x4000962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private GameObject _decreaseSpeedButton;

		[Token(Token = "0x4000963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private GameObject _increaseSpeedButton;

		[Token(Token = "0x4000964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private GameObject _smokeButton;

		[Token(Token = "0x4000965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private GameObject _whistleButton;

		[Token(Token = "0x4000966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private GameObject _reverseButton;

		[Token(Token = "0x4000967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private AudioSource _whistleAudioSource;

		[Token(Token = "0x4000968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private AudioClip _whistleSound;

		[Token(Token = "0x4000969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private AudioSource _engineAudioSource;

		[Token(Token = "0x400096A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private AudioClip[] _accelerationSounds;

		[Token(Token = "0x400096B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private AudioClip[] _decelerationSounds;

		[Token(Token = "0x400096C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		private AudioClip _startUpSound;

		[Token(Token = "0x400096D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private AudioSource _smokeStackAudioSource;

		[Token(Token = "0x400096E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private AudioClip _smokeSound;

		[Token(Token = "0x400096F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private ParticleSystem _smoke1;

		[Token(Token = "0x4000970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private ParticleSystem _smoke2;

		[Token(Token = "0x4000971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private TrainCarBase[] _childCars;

		[Token(Token = "0x4000972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool _isMoving;

		[Token(Token = "0x4000973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
		private bool _reverse;

		[Token(Token = "0x4000974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float _currentSpeed;

		[Token(Token = "0x4000975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float _speedDiv;

		[Token(Token = "0x4000976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		private float _standardRateOverTimeMultiplier;

		[Token(Token = "0x4000977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private int _standardMaxParticles;

		[Token(Token = "0x4000978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Coroutine _startStopTrainCr;

		[Token(Token = "0x600091D")]
		[Address(RVA = "0xDF7D10", Offset = "0xDF7D10", VA = "0xDF7D10")]
		private void Start()
		{
		}

		[Token(Token = "0x600091E")]
		[Address(RVA = "0xDF7E6C", Offset = "0xDF7E6C", VA = "0xDF7E6C")]
		private void Update()
		{
		}

		[Token(Token = "0x600091F")]
		[Address(RVA = "0xDF7E78", Offset = "0xDF7E78", VA = "0xDF7E78", Slot = "5")]
		public override void UpdatePosition()
		{
		}

		[Token(Token = "0x6000920")]
		[Address(RVA = "0xDF7FB0", Offset = "0xDF7FB0", VA = "0xDF7FB0")]
		public void StartStopStateChanged()
		{
		}

		[Token(Token = "0x6000921")]
		[Address(RVA = "0xDF7DE4", Offset = "0xDF7DE4", VA = "0xDF7DE4")]
		[IteratorStateMachine(typeof(<StartStopTrain>d__34))]
		private IEnumerator StartStopTrain(bool startTrain)
		{
			return null;
		}

		[Token(Token = "0x6000922")]
		[Address(RVA = "0xDF8034", Offset = "0xDF8034", VA = "0xDF8034")]
		private float PlayEngineSound(EngineSoundState engineSoundState)
		{
			return default(float);
		}

		[Token(Token = "0x6000923")]
		[Address(RVA = "0xDF7F50", Offset = "0xDF7F50", VA = "0xDF7F50")]
		private void UpdateDistance()
		{
		}

		[Token(Token = "0x6000924")]
		[Address(RVA = "0xDF8248", Offset = "0xDF8248", VA = "0xDF8248")]
		public void DecreaseSpeedStateChanged()
		{
		}

		[Token(Token = "0x6000925")]
		[Address(RVA = "0xDF839C", Offset = "0xDF839C", VA = "0xDF839C")]
		public void IncreaseSpeedStateChanged()
		{
		}

		[Token(Token = "0x6000926")]
		[Address(RVA = "0xDF82A8", Offset = "0xDF82A8", VA = "0xDF82A8")]
		private void UpdateSmokeEmissionBasedOnSpeed()
		{
		}

		[Token(Token = "0x6000927")]
		[Address(RVA = "0xDF83FC", Offset = "0xDF83FC", VA = "0xDF83FC")]
		private float GetCurrentSmokeEmission()
		{
			return default(float);
		}

		[Token(Token = "0x6000928")]
		[Address(RVA = "0xDF8438", Offset = "0xDF8438", VA = "0xDF8438")]
		public void SmokeButtonStateChanged()
		{
		}

		[Token(Token = "0x6000929")]
		[Address(RVA = "0xDF84B4", Offset = "0xDF84B4", VA = "0xDF84B4")]
		public void WhistleButtonStateChanged()
		{
		}

		[Token(Token = "0x600092A")]
		[Address(RVA = "0xDF8560", Offset = "0xDF8560", VA = "0xDF8560")]
		public void ReverseButtonStateChanged()
		{
		}

		[Token(Token = "0x600092B")]
		[Address(RVA = "0xDF8570", Offset = "0xDF8570", VA = "0xDF8570")]
		public TrainLocomotive()
		{
		}
	}
	[Token(Token = "0x200016E")]
	public class TrainTrack : MonoBehaviour
	{
		[Token(Token = "0x4000986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private float _gridSize;

		[Token(Token = "0x4000987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private int _subDivCount;

		[Token(Token = "0x4000988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Transform _segmentParent;

		[Token(Token = "0x4000989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Transform _trainParent;

		[Token(Token = "0x400098A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private bool _regnerateTrackMeshOnAwake;

		[Token(Token = "0x400098B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float _trainLength;

		[Token(Token = "0x400098C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TrackSegment[] _trackSegments;

		[Token(Token = "0x170000D0")]
		public float TrackLength
		{
			[Token(Token = "0x6000932")]
			[Address(RVA = "0xDF8844", Offset = "0xDF8844", VA = "0xDF8844")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000933")]
			[Address(RVA = "0xDF884C", Offset = "0xDF884C", VA = "0xDF884C")]
			private set
			{
			}
		}

		[Token(Token = "0x6000934")]
		[Address(RVA = "0xDF8854", Offset = "0xDF8854", VA = "0xDF8854")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000935")]
		[Address(RVA = "0xDF73BC", Offset = "0xDF73BC", VA = "0xDF73BC")]
		public TrackSegment GetSegment(float distance)
		{
			return null;
		}

		[Token(Token = "0x6000936")]
		[Address(RVA = "0xDF8858", Offset = "0xDF8858", VA = "0xDF8858")]
		public void Regenerate()
		{
		}

		[Token(Token = "0x6000937")]
		[Address(RVA = "0xDF8A24", Offset = "0xDF8A24", VA = "0xDF8A24")]
		private void SetScale(float ratio)
		{
		}

		[Token(Token = "0x6000938")]
		[Address(RVA = "0xDF8B04", Offset = "0xDF8B04", VA = "0xDF8B04")]
		public TrainTrack()
		{
		}
	}
	[Token(Token = "0x200016F")]
	public class Pose
	{
		[Token(Token = "0x400098D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 Position;

		[Token(Token = "0x400098E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion Rotation;

		[Token(Token = "0x6000939")]
		[Address(RVA = "0xDF7470", Offset = "0xDF7470", VA = "0xDF7470")]
		public Pose()
		{
		}

		[Token(Token = "0x600093A")]
		[Address(RVA = "0xDF8B20", Offset = "0xDF8B20", VA = "0xDF8B20")]
		public Pose(Vector3 position, Quaternion rotation)
		{
		}
	}
	[Token(Token = "0x2000170")]
	public class WindmillBladesController : MonoBehaviour
	{
		[Token(Token = "0x2000171")]
		[CompilerGenerated]
		private sealed class <LerpToSpeed>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400099A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400099B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400099C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WindmillBladesController <>4__this;

			[Token(Token = "0x400099D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float goalSpeed;

			[Token(Token = "0x400099E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <totalTime>5__2;

			[Token(Token = "0x400099F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <startSpeed>5__3;

			[Token(Token = "0x170000D2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000947")]
				[Address(RVA = "0xDF9114", Offset = "0xDF9114", VA = "0xDF9114", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000949")]
				[Address(RVA = "0xDF915C", Offset = "0xDF915C", VA = "0xDF915C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000944")]
			[Address(RVA = "0xDF8DFC", Offset = "0xDF8DFC", VA = "0xDF8DFC")]
			[DebuggerHidden]
			public <LerpToSpeed>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x6000945")]
			[Address(RVA = "0xDF8F70", Offset = "0xDF8F70", VA = "0xDF8F70", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000946")]
			[Address(RVA = "0xDF8F74", Offset = "0xDF8F74", VA = "0xDF8F74", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000948")]
			[Address(RVA = "0xDF911C", Offset = "0xDF911C", VA = "0xDF911C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000172")]
		[CompilerGenerated]
		private sealed class <PlaySoundDelayed>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40009A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40009A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40009A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WindmillBladesController <>4__this;

			[Token(Token = "0x40009A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AudioClip initial;

			[Token(Token = "0x40009A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float timeDelayAfterInitial;

			[Token(Token = "0x40009A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public AudioClip clip;

			[Token(Token = "0x170000D4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600094D")]
				[Address(RVA = "0xDF9238", Offset = "0xDF9238", VA = "0xDF9238", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600094F")]
				[Address(RVA = "0xDF9280", Offset = "0xDF9280", VA = "0xDF9280", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600094A")]
			[Address(RVA = "0xDF8ED8", Offset = "0xDF8ED8", VA = "0xDF8ED8")]
			[DebuggerHidden]
			public <PlaySoundDelayed>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x600094B")]
			[Address(RVA = "0xDF9164", Offset = "0xDF9164", VA = "0xDF9164", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600094C")]
			[Address(RVA = "0xDF9168", Offset = "0xDF9168", VA = "0xDF9168", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600094E")]
			[Address(RVA = "0xDF9240", Offset = "0xDF9240", VA = "0xDF9240", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400098F")]
		private const float MAX_TIME = 1f;

		[Token(Token = "0x4000990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private AudioSource _audioSource;

		[Token(Token = "0x4000991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AudioClip _windMillRotationSound;

		[Token(Token = "0x4000992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private AudioClip _windMillStartSound;

		[Token(Token = "0x4000993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private AudioClip _windMillStopSound;

		[Token(Token = "0x4000995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float _currentSpeed;

		[Token(Token = "0x4000996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Coroutine _lerpSpeedCoroutine;

		[Token(Token = "0x4000997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Coroutine _audioChangeCr;

		[Token(Token = "0x4000998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Quaternion _originalRotation;

		[Token(Token = "0x4000999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float _rotAngle;

		[Token(Token = "0x170000D1")]
		public bool IsMoving
		{
			[Token(Token = "0x600093B")]
			[Address(RVA = "0xDF8B84", Offset = "0xDF8B84", VA = "0xDF8B84")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600093C")]
			[Address(RVA = "0xDF8B8C", Offset = "0xDF8B8C", VA = "0xDF8B8C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600093D")]
		[Address(RVA = "0xDF8B98", Offset = "0xDF8B98", VA = "0xDF8B98")]
		private void Start()
		{
		}

		[Token(Token = "0x600093E")]
		[Address(RVA = "0xDF8BC8", Offset = "0xDF8BC8", VA = "0xDF8BC8")]
		private void Update()
		{
		}

		[Token(Token = "0x600093F")]
		[Address(RVA = "0xDF8D08", Offset = "0xDF8D08", VA = "0xDF8D08")]
		public void SetMoveState(bool newMoveState, float goalSpeed)
		{
		}

		[Token(Token = "0x6000940")]
		[Address(RVA = "0xDF8D78", Offset = "0xDF8D78", VA = "0xDF8D78")]
		[IteratorStateMachine(typeof(<LerpToSpeed>d__17))]
		private IEnumerator LerpToSpeed(float goalSpeed)
		{
			return null;
		}

		[Token(Token = "0x6000941")]
		[Address(RVA = "0xDF8E24", Offset = "0xDF8E24", VA = "0xDF8E24")]
		[IteratorStateMachine(typeof(<PlaySoundDelayed>d__18))]
		private IEnumerator PlaySoundDelayed(AudioClip initial, AudioClip clip, float timeDelayAfterInitial)
		{
			return null;
		}

		[Token(Token = "0x6000942")]
		[Address(RVA = "0xDF8F00", Offset = "0xDF8F00", VA = "0xDF8F00")]
		private void PlaySound(AudioClip clip, bool loop = false)
		{
		}

		[Token(Token = "0x6000943")]
		[Address(RVA = "0xDF8F68", Offset = "0xDF8F68", VA = "0xDF8F68")]
		public WindmillBladesController()
		{
		}
	}
	[Token(Token = "0x2000173")]
	public class WindmillController : MonoBehaviour
	{
		[Token(Token = "0x40009A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private GameObject _startStopButton;

		[Token(Token = "0x40009A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float _maxSpeed;

		[Token(Token = "0x40009A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private SelectionCylinder _selectionCylinder;

		[Token(Token = "0x40009A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private WindmillBladesController _bladesRotation;

		[Token(Token = "0x40009AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private InteractableTool _toolInteractingWithMe;

		[Token(Token = "0x6000950")]
		[Address(RVA = "0xDF9288", Offset = "0xDF9288", VA = "0xDF9288")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000951")]
		[Address(RVA = "0xDF92FC", Offset = "0xDF92FC", VA = "0xDF92FC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000952")]
		[Address(RVA = "0xDF93C4", Offset = "0xDF93C4", VA = "0xDF93C4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000953")]
		[Address(RVA = "0xDF94D4", Offset = "0xDF94D4", VA = "0xDF94D4")]
		private void StartStopStateChanged(InteractableStateArgs obj)
		{
		}

		[Token(Token = "0x6000954")]
		[Address(RVA = "0xDF9550", Offset = "0xDF9550", VA = "0xDF9550")]
		private void Update()
		{
		}

		[Token(Token = "0x6000955")]
		[Address(RVA = "0xDF961C", Offset = "0xDF961C", VA = "0xDF961C")]
		public WindmillController()
		{
		}
	}
	[Token(Token = "0x2000174")]
	public enum EUiDisplayType
	{
		[Token(Token = "0x40009AC")]
		EUDT_WorldGeoQuad,
		[Token(Token = "0x40009AD")]
		EUDT_OverlayQuad,
		[Token(Token = "0x40009AE")]
		EUDT_None,
		[Token(Token = "0x40009AF")]
		EUDT_MaxDislayTypes
	}
	[Token(Token = "0x2000175")]
	public class OVROverlaySample : MonoBehaviour
	{
		[Token(Token = "0x2000176")]
		[CompilerGenerated]
		private sealed class <WaitforOVROverlay>d__30 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40009C8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40009C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40009CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public OVROverlaySample <>4__this;

			[Token(Token = "0x170000D6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000969")]
				[Address(RVA = "0xDFACAC", Offset = "0xDFACAC", VA = "0xDFACAC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000D7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600096B")]
				[Address(RVA = "0xDFACF4", Offset = "0xDFACF4", VA = "0xDFACF4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000966")]
			[Address(RVA = "0xDFA33C", Offset = "0xDFA33C", VA = "0xDFA33C")]
			[DebuggerHidden]
			public <WaitforOVROverlay>d__30(int <>1__state)
			{
			}

			[Token(Token = "0x6000967")]
			[Address(RVA = "0xDFAAB0", Offset = "0xDFAAB0", VA = "0xDFAAB0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000968")]
			[Address(RVA = "0xDFAAB4", Offset = "0xDFAAB4", VA = "0xDFAAB4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600096A")]
			[Address(RVA = "0xDFACB4", Offset = "0xDFACB4", VA = "0xDFACB4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40009B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool inMenu;

		[Token(Token = "0x40009B1")]
		private const string ovrOverlayID = "OVROverlayID";

		[Token(Token = "0x40009B2")]
		private const string applicationID = "ApplicationID";

		[Token(Token = "0x40009B3")]
		private const string noneID = "NoneID";

		[Token(Token = "0x40009B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Toggle applicationRadioButton;

		[Token(Token = "0x40009B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Toggle noneRadioButton;

		[Token(Token = "0x40009B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("App vs Compositor Comparison Settings")]
		public GameObject mainCamera;

		[Token(Token = "0x40009B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject uiCamera;

		[Token(Token = "0x40009B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject uiGeoParent;

		[Token(Token = "0x40009B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject worldspaceGeoParent;

		[Token(Token = "0x40009BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public OVROverlay cameraRenderOverlay;

		[Token(Token = "0x40009BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public OVROverlay renderingLabelOverlay;

		[Token(Token = "0x40009BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Texture applicationLabelTexture;

		[Token(Token = "0x40009BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Texture compositorLabelTexture;

		[Token(Token = "0x40009BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Level Loading Sim Settings")]
		public GameObject prefabForLevelLoadSim;

		[Token(Token = "0x40009BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public OVROverlay cubemapOverlay;

		[Token(Token = "0x40009C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public OVROverlay loadingTextQuadOverlay;

		[Token(Token = "0x40009C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float distanceFromCamToLoadText;

		[Token(Token = "0x40009C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float cubeSpawnRadius;

		[Token(Token = "0x40009C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float heightBetweenItems;

		[Token(Token = "0x40009C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public int numObjectsPerLevel;

		[Token(Token = "0x40009C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public int numLevels;

		[Token(Token = "0x40009C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public int numLoopsTrigger;

		[Token(Token = "0x40009C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<GameObject> spawnedCubes;

		[Token(Token = "0x6000956")]
		[Address(RVA = "0xDF962C", Offset = "0xDF962C", VA = "0xDF962C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000957")]
		[Address(RVA = "0xDF9E6C", Offset = "0xDF9E6C", VA = "0xDF9E6C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000958")]
		[Address(RVA = "0xDF9F94", Offset = "0xDF9F94", VA = "0xDF9F94")]
		private void ActivateWorldGeo()
		{
		}

		[Token(Token = "0x6000959")]
		[Address(RVA = "0xDFA0C4", Offset = "0xDFA0C4", VA = "0xDFA0C4")]
		private void ActivateOVROverlay()
		{
		}

		[Token(Token = "0x600095A")]
		[Address(RVA = "0xDFA1F4", Offset = "0xDFA1F4", VA = "0xDFA1F4")]
		private void ActivateNone()
		{
		}

		[Token(Token = "0x600095B")]
		[Address(RVA = "0xDF9F74", Offset = "0xDF9F74", VA = "0xDF9F74")]
		private void TriggerLoad()
		{
		}

		[Token(Token = "0x600095C")]
		[Address(RVA = "0xDFA2C8", Offset = "0xDFA2C8", VA = "0xDFA2C8")]
		[IteratorStateMachine(typeof(<WaitforOVROverlay>d__30))]
		private IEnumerator WaitforOVROverlay()
		{
			return null;
		}

		[Token(Token = "0x600095D")]
		[Address(RVA = "0xDFA364", Offset = "0xDFA364", VA = "0xDFA364")]
		private void TriggerUnload()
		{
		}

		[Token(Token = "0x600095E")]
		[Address(RVA = "0xDF9A9C", Offset = "0xDF9A9C", VA = "0xDF9A9C")]
		private void CameraAndRenderTargetSetup()
		{
		}

		[Token(Token = "0x600095F")]
		[Address(RVA = "0xDFA4AC", Offset = "0xDFA4AC", VA = "0xDFA4AC")]
		private void SimulateLevelLoad()
		{
		}

		[Token(Token = "0x6000960")]
		[Address(RVA = "0xDFA38C", Offset = "0xDFA38C", VA = "0xDFA38C")]
		private void ClearObjects()
		{
		}

		[Token(Token = "0x6000961")]
		[Address(RVA = "0xDFA834", Offset = "0xDFA834", VA = "0xDFA834")]
		public void RadioPressed(string radioLabel, string group, Toggle t)
		{
		}

		[Token(Token = "0x6000962")]
		[Address(RVA = "0xDFA920", Offset = "0xDFA920", VA = "0xDFA920")]
		public OVROverlaySample()
		{
		}
	}
}
namespace OVRTouchSample
{
	[Token(Token = "0x2000177")]
	[RequireComponent(typeof(OVRGrabber))]
	public class Hand : MonoBehaviour
	{
		[Token(Token = "0x40009CB")]
		public const string ANIM_LAYER_NAME_POINT = "Point Layer";

		[Token(Token = "0x40009CC")]
		public const string ANIM_LAYER_NAME_THUMB = "Thumb Layer";

		[Token(Token = "0x40009CD")]
		public const string ANIM_PARAM_NAME_FLEX = "Flex";

		[Token(Token = "0x40009CE")]
		public const string ANIM_PARAM_NAME_POSE = "Pose";

		[Token(Token = "0x40009CF")]
		public const float THRESH_COLLISION_FLEX = 0.9f;

		[Token(Token = "0x40009D0")]
		public const float INPUT_RATE_CHANGE = 20f;

		[Token(Token = "0x40009D1")]
		public const float COLLIDER_SCALE_MIN = 0.01f;

		[Token(Token = "0x40009D2")]
		public const float COLLIDER_SCALE_MAX = 1f;

		[Token(Token = "0x40009D3")]
		public const float COLLIDER_SCALE_PER_SECOND = 1f;

		[Token(Token = "0x40009D4")]
		public const float TRIGGER_DEBOUNCE_TIME = 0.05f;

		[Token(Token = "0x40009D5")]
		public const float THUMB_DEBOUNCE_TIME = 0.15f;

		[Token(Token = "0x40009D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private OVRInput.Controller m_controller;

		[Token(Token = "0x40009D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Animator m_animator;

		[Token(Token = "0x40009D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private HandPose m_defaultGrabPose;

		[Token(Token = "0x40009D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Collider[] m_colliders;

		[Token(Token = "0x40009DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool m_collisionEnabled;

		[Token(Token = "0x40009DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private OVRGrabber m_grabber;

		[Token(Token = "0x40009DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private List<Renderer> m_showAfterInputFocusAcquired;

		[Token(Token = "0x40009DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int m_animLayerIndexThumb;

		[Token(Token = "0x40009DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private int m_animLayerIndexPoint;

		[Token(Token = "0x40009DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private int m_animParamIndexFlex;

		[Token(Token = "0x40009E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int m_animParamIndexPose;

		[Token(Token = "0x40009E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool m_isPointing;

		[Token(Token = "0x40009E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool m_isGivingThumbsUp;

		[Token(Token = "0x40009E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float m_pointBlend;

		[Token(Token = "0x40009E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float m_thumbsUpBlend;

		[Token(Token = "0x40009E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool m_restoreOnInputAcquired;

		[Token(Token = "0x40009E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float m_collisionScaleCurrent;

		[Token(Token = "0x600096C")]
		[Address(RVA = "0xDFACFC", Offset = "0xDFACFC", VA = "0xDFACFC")]
		private void Awake()
		{
		}

		[Token(Token = "0x600096D")]
		[Address(RVA = "0xDFAD54", Offset = "0xDFAD54", VA = "0xDFAD54")]
		private void Start()
		{
		}

		[Token(Token = "0x600096E")]
		[Address(RVA = "0xDFB1A4", Offset = "0xDFB1A4", VA = "0xDFB1A4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600096F")]
		[Address(RVA = "0xDFB290", Offset = "0xDFB290", VA = "0xDFB290")]
		private void Update()
		{
		}

		[Token(Token = "0x6000970")]
		[Address(RVA = "0xDFB3F4", Offset = "0xDFB3F4", VA = "0xDFB3F4")]
		private void UpdateCapTouchStates()
		{
		}

		[Token(Token = "0x6000971")]
		[Address(RVA = "0xDFB6C4", Offset = "0xDFB6C4", VA = "0xDFB6C4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000972")]
		[Address(RVA = "0xDFB7A8", Offset = "0xDFB7A8", VA = "0xDFB7A8")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x6000973")]
		[Address(RVA = "0xDFB958", Offset = "0xDFB958", VA = "0xDFB958")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x6000974")]
		[Address(RVA = "0xDFB480", Offset = "0xDFB480", VA = "0xDFB480")]
		private float InputValueRateChange(bool isDown, float value)
		{
			return default(float);
		}

		[Token(Token = "0x6000975")]
		[Address(RVA = "0xDFB4D4", Offset = "0xDFB4D4", VA = "0xDFB4D4")]
		private void UpdateAnimStates()
		{
		}

		[Token(Token = "0x6000976")]
		[Address(RVA = "0xDFB064", Offset = "0xDFB064", VA = "0xDFB064")]
		private void CollisionEnable(bool enabled)
		{
		}

		[Token(Token = "0x6000977")]
		[Address(RVA = "0xDFBA7C", Offset = "0xDFBA7C", VA = "0xDFBA7C")]
		public Hand()
		{
		}
	}
	[Token(Token = "0x2000179")]
	public enum HandPoseId
	{
		[Token(Token = "0x40009EA")]
		Default,
		[Token(Token = "0x40009EB")]
		Generic,
		[Token(Token = "0x40009EC")]
		PingPongBall,
		[Token(Token = "0x40009ED")]
		Controller
	}
	[Token(Token = "0x200017A")]
	public class HandPose : MonoBehaviour
	{
		[Token(Token = "0x40009EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool m_allowPointing;

		[Token(Token = "0x40009EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[SerializeField]
		private bool m_allowThumbsUp;

		[Token(Token = "0x40009F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private HandPoseId m_poseId;

		[Token(Token = "0x170000D8")]
		public bool AllowPointing
		{
			[Token(Token = "0x600097B")]
			[Address(RVA = "0xDFBB34", Offset = "0xDFBB34", VA = "0xDFBB34")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000D9")]
		public bool AllowThumbsUp
		{
			[Token(Token = "0x600097C")]
			[Address(RVA = "0xDFBB3C", Offset = "0xDFBB3C", VA = "0xDFBB3C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000DA")]
		public HandPoseId PoseId
		{
			[Token(Token = "0x600097D")]
			[Address(RVA = "0xDFBB44", Offset = "0xDFBB44", VA = "0xDFBB44")]
			get
			{
				return default(HandPoseId);
			}
		}

		[Token(Token = "0x600097E")]
		[Address(RVA = "0xDFBB4C", Offset = "0xDFBB4C", VA = "0xDFBB4C")]
		public HandPose()
		{
		}
	}
	[Token(Token = "0x200017B")]
	public class TouchController : MonoBehaviour
	{
		[Token(Token = "0x40009F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private OVRInput.Controller m_controller;

		[Token(Token = "0x40009F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Animator m_animator;

		[Token(Token = "0x40009F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool m_restoreOnInputAcquired;

		[Token(Token = "0x600097F")]
		[Address(RVA = "0xDFBB54", Offset = "0xDFBB54", VA = "0xDFBB54")]
		private void Update()
		{
		}

		[Token(Token = "0x6000980")]
		[Address(RVA = "0xDFBE20", Offset = "0xDFBE20", VA = "0xDFBE20")]
		private void OnInputFocusLost()
		{
		}

		[Token(Token = "0x6000981")]
		[Address(RVA = "0xDFBE70", Offset = "0xDFBE70", VA = "0xDFBE70")]
		private void OnInputFocusAcquired()
		{
		}

		[Token(Token = "0x6000982")]
		[Address(RVA = "0xDFBEA8", Offset = "0xDFBEA8", VA = "0xDFBEA8")]
		public TouchController()
		{
		}
	}
}
namespace BNG
{
	[Token(Token = "0x200017C")]
	public enum HandPoseId
	{
		[Token(Token = "0x40009F5")]
		Default = 0,
		[Token(Token = "0x40009F6")]
		Generic = 1,
		[Token(Token = "0x40009F7")]
		PingPongBall = 2,
		[Token(Token = "0x40009F8")]
		Controller = 3,
		[Token(Token = "0x40009F9")]
		Rock = 4,
		[Token(Token = "0x40009FA")]
		PistolGrip = 50
	}
	[Token(Token = "0x200017D")]
	public class HandPoseDefinitions : MonoBehaviour
	{
		[Token(Token = "0x6000983")]
		[Address(RVA = "0xDFBEB0", Offset = "0xDFBEB0", VA = "0xDFBEB0")]
		public HandPoseDefinitions()
		{
		}
	}
	[Token(Token = "0x200017E")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(HandPoser))]
	public class AutoPoser : MonoBehaviour
	{
		[Token(Token = "0x200017F")]
		[CompilerGenerated]
		private sealed class <updateAutoPoseRoutine>d__33 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A13")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A14")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A15")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AutoPoser <>4__this;

			[Token(Token = "0x170000DD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600099D")]
				[Address(RVA = "0xDFD8B8", Offset = "0xDFD8B8", VA = "0xDFD8B8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000DE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600099F")]
				[Address(RVA = "0xDFD900", Offset = "0xDFD900", VA = "0xDFD900", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600099A")]
			[Address(RVA = "0xDFC66C", Offset = "0xDFC66C", VA = "0xDFC66C")]
			[DebuggerHidden]
			public <updateAutoPoseRoutine>d__33(int <>1__state)
			{
			}

			[Token(Token = "0x600099B")]
			[Address(RVA = "0xDFD7F0", Offset = "0xDFD7F0", VA = "0xDFD7F0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600099C")]
			[Address(RVA = "0xDFD7F4", Offset = "0xDFD7F4", VA = "0xDFD7F4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600099E")]
			[Address(RVA = "0xDFD8C0", Offset = "0xDFD8C0", VA = "0xDFD8C0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40009FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Auto Pose Settings")]
		[Tooltip("(Required) A HandPose in the fully open position. AutoPose will lerp each finger joint between OpenHandPose and ClosedHandPose until contact is made at each finger tip.")]
		public HandPose OpenHandPose;

		[Token(Token = "0x40009FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("(Required) A HandPose in the fully closed position. AutoPose will lerp each finger between OpenHandPose and ClosedHandPose until contact is made at each finger tip.")]
		public HandPose ClosedHandPose;

		[Token(Token = "0x40009FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Finger Tip Collision")]
		[Tooltip("Radius (in meters) of the fingertips to use when checking for collisions during auto-posing. Only used if a FingerTipCollider is not defined. (Default : 0.00875)")]
		[Range(0f, 0.02f)]
		public float FingerTipRadius;

		[Token(Token = "0x40009FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("(Optional) Index Finger Offset - Use this to manually position and scale your finger tip collider")]
		public FingerTipCollider ThumbCollider;

		[Token(Token = "0x40009FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("(Optional) Index Finger Offset - Use this to manually position and scale your finger tip collider")]
		public FingerTipCollider IndexFingerCollider;

		[Token(Token = "0x4000A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("(Optional) Index Finger Offset - Use this to manually position and scale your finger tip collider")]
		public FingerTipCollider MiddleFingerCollider;

		[Token(Token = "0x4000A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("(Optional) Index Finger Offset - Use this to manually position and scale your finger tip collider")]
		public FingerTipCollider RingFingerCollider;

		[Token(Token = "0x4000A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("(Optional) Index Finger Offset - Use this to manually position and scale your finger tip collider")]
		public FingerTipCollider PinkyFingerCollider;

		[Token(Token = "0x4000A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Continuous Update")]
		[Tooltip("If true the hand will auto pose in Update(). Also works in the editor.")]
		public bool UpdateContinuously;

		[Token(Token = "0x4000A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("(Optional) The HandPose to use when UpdateContinuously = true and no collisions have been detected. If not specified, the hand will make a ClosedHandPose shape when no collisions have been found.")]
		public HandPose IdleHandPose;

		[Token(Token = "0x4000A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public LayerMask CollisionLayerMask;

		[Token(Token = "0x4000A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Header("Editor Gizmos")]
		public bool ShowGizmos;

		[Token(Token = "0x4000A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GizmoDisplayType GizmoType;

		[Token(Token = "0x4000A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Color GizmoColor;

		[Token(Token = "0x4000A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public HandPoser InspectedPose;

		[Token(Token = "0x4000A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private HandPoseDefinition currentPose;

		[Token(Token = "0x4000A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private HandPoseDefinition tempPose;

		[Token(Token = "0x4000A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private HandPoseDefinition collisionPose;

		[Token(Token = "0x4000A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private int _count;

		[Token(Token = "0x4000A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private bool _thumbHit;

		[Token(Token = "0x4000A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
		private bool _indexHit;

		[Token(Token = "0x4000A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAE")]
		private bool _middleHit;

		[Token(Token = "0x4000A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAF")]
		private bool _ringHit;

		[Token(Token = "0x4000A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool _pinkyHit;

		[Token(Token = "0x170000DB")]
		public HandPoseDefinition CollisionPose
		{
			[Token(Token = "0x6000984")]
			[Address(RVA = "0xDFBEB8", Offset = "0xDFBEB8", VA = "0xDFBEB8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000DC")]
		public bool CollisionDetected
		{
			[Token(Token = "0x6000985")]
			[Address(RVA = "0xDFBEC0", Offset = "0xDFBEC0", VA = "0xDFBEC0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000986")]
		[Address(RVA = "0xDFBEF8", Offset = "0xDFBEF8", VA = "0xDFBEF8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000987")]
		[Address(RVA = "0xDFBFA8", Offset = "0xDFBFA8", VA = "0xDFBFA8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000988")]
		[Address(RVA = "0xDFC1FC", Offset = "0xDFC1FC", VA = "0xDFC1FC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000989")]
		[Address(RVA = "0xDFC578", Offset = "0xDFC578", VA = "0xDFC578", Slot = "4")]
		public virtual void UpdateAutoPose(bool lerp)
		{
		}

		[Token(Token = "0x600098A")]
		[Address(RVA = "0xDFC5D8", Offset = "0xDFC5D8", VA = "0xDFC5D8", Slot = "5")]
		public virtual void UpdateAutoPoseOnce()
		{
		}

		[Token(Token = "0x600098B")]
		[Address(RVA = "0xDFC5F8", Offset = "0xDFC5F8", VA = "0xDFC5F8")]
		[IteratorStateMachine(typeof(<updateAutoPoseRoutine>d__33))]
		private IEnumerator updateAutoPoseRoutine()
		{
			return null;
		}

		[Token(Token = "0x600098C")]
		[Address(RVA = "0xDFC320", Offset = "0xDFC320", VA = "0xDFC320")]
		public HandPoseDefinition GetAutoPose()
		{
			return null;
		}

		[Token(Token = "0x600098D")]
		[Address(RVA = "0xDFC694", Offset = "0xDFC694", VA = "0xDFC694")]
		public HandPoseDefinition CopyHandDefinition(HandPoseDefinition ToCopy)
		{
			return null;
		}

		[Token(Token = "0x600098E")]
		[Address(RVA = "0xDFCDB0", Offset = "0xDFCDB0", VA = "0xDFCDB0")]
		public FingerJoint GetJointCopy(FingerJoint ToClone)
		{
			return null;
		}

		[Token(Token = "0x600098F")]
		[Address(RVA = "0xDFCC68", Offset = "0xDFCC68", VA = "0xDFCC68")]
		public List<FingerJoint> GetJointsCopy(List<FingerJoint> ToClone)
		{
			return null;
		}

		[Token(Token = "0x6000990")]
		[Address(RVA = "0xDFC7C4", Offset = "0xDFC7C4", VA = "0xDFC7C4")]
		public bool GetThumbHit(HandPoser poser)
		{
			return default(bool);
		}

		[Token(Token = "0x6000991")]
		[Address(RVA = "0xDFC8B0", Offset = "0xDFC8B0", VA = "0xDFC8B0")]
		public bool GetIndexHit(HandPoser poser)
		{
			return default(bool);
		}

		[Token(Token = "0x6000992")]
		[Address(RVA = "0xDFC99C", Offset = "0xDFC99C", VA = "0xDFC99C")]
		public bool GetMiddleHit(HandPoser poser)
		{
			return default(bool);
		}

		[Token(Token = "0x6000993")]
		[Address(RVA = "0xDFCA88", Offset = "0xDFCA88", VA = "0xDFCA88")]
		public bool GetRingHit(HandPoser poser)
		{
			return default(bool);
		}

		[Token(Token = "0x6000994")]
		[Address(RVA = "0xDFCB74", Offset = "0xDFCB74", VA = "0xDFCB74")]
		public bool GetPinkyHit(HandPoser poser)
		{
			return default(bool);
		}

		[Token(Token = "0x6000995")]
		[Address(RVA = "0xDFD090", Offset = "0xDFD090", VA = "0xDFD090", Slot = "6")]
		public virtual bool LoopThroughJoints(List<Transform> fromJoints, List<FingerJoint> toJoints, Vector3 tipPosition, float tipRadius)
		{
			return default(bool);
		}

		[Token(Token = "0x6000996")]
		[Address(RVA = "0xDFD418", Offset = "0xDFD418", VA = "0xDFD418", Slot = "7")]
		public virtual bool IsValidCollision(Collider col)
		{
			return default(bool);
		}

		[Token(Token = "0x6000997")]
		[Address(RVA = "0xDFD4A0", Offset = "0xDFD4A0", VA = "0xDFD4A0")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000998")]
		[Address(RVA = "0xDFD680", Offset = "0xDFD680", VA = "0xDFD680")]
		public void DrawJointGizmo(FingerTipCollider tipCollider, Vector3 defaultPosition, float radius, GizmoDisplayType gizmoType)
		{
		}

		[Token(Token = "0x6000999")]
		[Address(RVA = "0xDFD7AC", Offset = "0xDFD7AC", VA = "0xDFD7AC")]
		public AutoPoser()
		{
		}
	}
	[Token(Token = "0x2000180")]
	public enum GizmoDisplayType
	{
		[Token(Token = "0x4000A17")]
		Wire,
		[Token(Token = "0x4000A18")]
		Solid,
		[Token(Token = "0x4000A19")]
		None
	}
	[Token(Token = "0x2000181")]
	public class BoneMapping : MonoBehaviour
	{
		[Token(Token = "0x4000A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float Weight;

		[Token(Token = "0x4000A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public BoneObject[] Fingers;

		[Token(Token = "0x4000A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Shown for Debug : ")]
		public bool ShowGizmos;

		[Token(Token = "0x60009A0")]
		[Address(RVA = "0xDFD908", Offset = "0xDFD908", VA = "0xDFD908")]
		private void Update()
		{
		}

		[Token(Token = "0x60009A1")]
		[Address(RVA = "0xDFDBB0", Offset = "0xDFDBB0", VA = "0xDFDBB0")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x60009A2")]
		[Address(RVA = "0xDFE00C", Offset = "0xDFE00C", VA = "0xDFE00C")]
		public BoneMapping()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000182")]
	public class BoneObject
	{
		[Token(Token = "0x4000A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform[] targetBones;

		[Token(Token = "0x4000A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform[] destinationBones;

		[Token(Token = "0x60009A3")]
		[Address(RVA = "0xDFE024", Offset = "0xDFE024", VA = "0xDFE024")]
		public BoneObject()
		{
		}
	}
	[Token(Token = "0x2000183")]
	public class EditorHandle : MonoBehaviour
	{
		[Token(Token = "0x4000A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool ShowTransformName;

		[Token(Token = "0x4000A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float Radius;

		[Token(Token = "0x4000A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color BaseColor;

		[Token(Token = "0x60009A4")]
		[Address(RVA = "0xDFE0A4", Offset = "0xDFE0A4", VA = "0xDFE0A4")]
		public EditorHandle()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000184")]
	public class FingerJoint
	{
		[Token(Token = "0x4000A22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		public string TransformName;

		[Token(Token = "0x4000A23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Vector3 LocalPosition;

		[Token(Token = "0x4000A24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		public Quaternion LocalRotation;

		[Token(Token = "0x60009A5")]
		[Address(RVA = "0xDFCE44", Offset = "0xDFCE44", VA = "0xDFCE44")]
		public FingerJoint()
		{
		}
	}
	[Token(Token = "0x2000185")]
	public class FingerTipCollider : MonoBehaviour
	{
		[Token(Token = "0x4000A25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 0.02f)]
		[Tooltip("Radius (in meters) of the fingertip to use when checking for collisions during auto-posing. (Default : 0.00875)")]
		public float Radius;

		[Token(Token = "0x60009A6")]
		[Address(RVA = "0xDFE0C4", Offset = "0xDFE0C4", VA = "0xDFE0C4")]
		public FingerTipCollider()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000186")]
	public class HandPose : ScriptableObject
	{
		[Token(Token = "0x4000A26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Pose Name")]
		public string PoseName;

		[Token(Token = "0x4000A27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Header("Joint Definitions")]
		public HandPoseDefinition Joints;

		[Token(Token = "0x60009A7")]
		[Address(RVA = "0xDFE0D8", Offset = "0xDFE0D8", VA = "0xDFE0D8")]
		public HandPose()
		{
		}
	}
	[Token(Token = "0x2000187")]
	public class HandPoseBlender : MonoBehaviour
	{
		[Token(Token = "0x4000A28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Run in Update")]
		[Tooltip("If true the HandPoser will be updated in Update by reading ThumbValue, IndexValue, and GripValue")]
		public bool UpdatePose;

		[Token(Token = "0x4000A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Blend From / To")]
		[Tooltip("(Required) Blend from this hand pose to the Pose2 hand pose.")]
		public HandPose Pose1;

		[Token(Token = "0x4000A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("(Required) Blend from the Pose1 hand pose to this hand pose.")]
		public HandPose Pose2;

		[Token(Token = "0x4000A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Inputs")]
		[Range(0f, 1f)]
		public float ThumbValue;

		[Token(Token = "0x4000A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 1f)]
		public float IndexValue;

		[Token(Token = "0x4000A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 1f)]
		public float MiddleValue;

		[Token(Token = "0x4000A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 1f)]
		public float RingValue;

		[Token(Token = "0x4000A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(0f, 1f)]
		public float PinkyValue;

		[Token(Token = "0x4000A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Range(0f, 1f)]
		public float GripValue;

		[Token(Token = "0x4000A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float _lastGripValue;

		[Token(Token = "0x4000A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected HandPoser handPoser;

		[Token(Token = "0x60009A8")]
		[Address(RVA = "0xDFE0E0", Offset = "0xDFE0E0", VA = "0xDFE0E0")]
		private void Start()
		{
		}

		[Token(Token = "0x60009A9")]
		[Address(RVA = "0xDFE138", Offset = "0xDFE138", VA = "0xDFE138")]
		private void Update()
		{
		}

		[Token(Token = "0x60009AA")]
		[Address(RVA = "0xDFE150", Offset = "0xDFE150", VA = "0xDFE150", Slot = "4")]
		public virtual void UpdatePoseFromInputs()
		{
		}

		[Token(Token = "0x60009AB")]
		[Address(RVA = "0xDFE15C", Offset = "0xDFE15C", VA = "0xDFE15C")]
		public void UpdateThumb(float amount)
		{
		}

		[Token(Token = "0x60009AC")]
		[Address(RVA = "0xDFE194", Offset = "0xDFE194", VA = "0xDFE194")]
		public void UpdateIndex(float amount)
		{
		}

		[Token(Token = "0x60009AD")]
		[Address(RVA = "0xDFE1CC", Offset = "0xDFE1CC", VA = "0xDFE1CC")]
		public void UpdateMiddle(float amount)
		{
		}

		[Token(Token = "0x60009AE")]
		[Address(RVA = "0xDFE20C", Offset = "0xDFE20C", VA = "0xDFE20C")]
		public void UpdateRing(float amount)
		{
		}

		[Token(Token = "0x60009AF")]
		[Address(RVA = "0xDFE244", Offset = "0xDFE244", VA = "0xDFE244")]
		public void UpdatePinky(float amount)
		{
		}

		[Token(Token = "0x60009B0")]
		[Address(RVA = "0xDFE27C", Offset = "0xDFE27C", VA = "0xDFE27C")]
		public void UpdateGrip(float amount)
		{
		}

		[Token(Token = "0x60009B1")]
		[Address(RVA = "0xDFE2C0", Offset = "0xDFE2C0", VA = "0xDFE2C0", Slot = "5")]
		public virtual void DoIdleBlendPose()
		{
		}

		[Token(Token = "0x60009B2")]
		[Address(RVA = "0xDFE3A0", Offset = "0xDFE3A0", VA = "0xDFE3A0")]
		public HandPoseBlender()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000188")]
	public class HandPoseDefinition
	{
		[Token(Token = "0x4000A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[Header("Wrist")]
		[SerializeField]
		public FingerJoint WristJoint;

		[Token(Token = "0x4000A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Thumb")]
		[SerializeField]
		public List<FingerJoint> ThumbJoints;

		[Token(Token = "0x4000A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Index")]
		[SerializeField]
		public List<FingerJoint> IndexJoints;

		[Token(Token = "0x4000A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Middle")]
		[SerializeField]
		public List<FingerJoint> MiddleJoints;

		[Token(Token = "0x4000A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[Header("Ring")]
		public List<FingerJoint> RingJoints;

		[Token(Token = "0x4000A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Pinky")]
		[SerializeField]
		public List<FingerJoint> PinkyJoints;

		[Token(Token = "0x4000A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		[Header("Other")]
		public List<FingerJoint> OtherJoints;

		[Token(Token = "0x60009B3")]
		[Address(RVA = "0xDFCC60", Offset = "0xDFCC60", VA = "0xDFCC60")]
		public HandPoseDefinition()
		{
		}
	}
	[Token(Token = "0x2000189")]
	[ExecuteInEditMode]
	public class HandPoser : MonoBehaviour
	{
		[Token(Token = "0x4000A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool ShowGizmos;

		[Token(Token = "0x4000A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Path of the directory where handposes should be stored. Tip : Keep these in a 'Resources' directory so you can use Resources.Load().")]
		public string ResourcePath;

		[Token(Token = "0x4000A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string PoseName;

		[Token(Token = "0x4000A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The currently selected hand pose. Change this to automatically update the pose in Update")]
		public HandPose CurrentPose;

		[Token(Token = "0x4000A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Animation Properties")]
		[Tooltip("The speed at which to lerp the bones when changing hand poses")]
		public float AnimationSpeed;

		[Token(Token = "0x4000A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("If true the local rotation of each bone will be updated while changing hand poses. This should generally be true if you are adjusting a hand pose.")]
		public bool UpdateJointRotations;

		[Token(Token = "0x4000A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
		[Tooltip("If true the local position of each bone will be updated while changing hand poses. Typically this will be false as joints only adjust their rotations.")]
		public bool UpdateJointPositions;

		[Token(Token = "0x4000A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E")]
		[Tooltip("If true the local position of the wrist will be updated. Useful if you need to move the entire hand.")]
		public bool UpdateWristPosition;

		[Token(Token = "0x4000A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform WristJoint;

		[Token(Token = "0x4000A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<Transform> ThumbJoints;

		[Token(Token = "0x4000A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<Transform> IndexJoints;

		[Token(Token = "0x4000A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<Transform> MiddleJoints;

		[Token(Token = "0x4000A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<Transform> RingJoints;

		[Token(Token = "0x4000A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<Transform> PinkyJoints;

		[Token(Token = "0x4000A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<Transform> OtherJoints;

		[Token(Token = "0x4000A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private HandPose previousPose;

		[Token(Token = "0x4000A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool doSingleAnimation;

		[Token(Token = "0x4000A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		public bool ContinuousUpdate;

		[Token(Token = "0x4000A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float editorAnimationTime;

		[Token(Token = "0x4000A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float maxEditorAnimationTime;

		[Token(Token = "0x170000DF")]
		public HandPoseDefinition HandPoseJoints
		{
			[Token(Token = "0x60009B4")]
			[Address(RVA = "0xDFE3B0", Offset = "0xDFE3B0", VA = "0xDFE3B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009B5")]
		[Address(RVA = "0xDFE3BC", Offset = "0xDFE3BC", VA = "0xDFE3BC")]
		private void Start()
		{
		}

		[Token(Token = "0x60009B6")]
		[Address(RVA = "0xDFE3DC", Offset = "0xDFE3DC", VA = "0xDFE3DC")]
		private void Update()
		{
		}

		[Token(Token = "0x60009B7")]
		[Address(RVA = "0xDFE418", Offset = "0xDFE418", VA = "0xDFE418")]
		public void CheckForPoseChange()
		{
		}

		[Token(Token = "0x60009B8")]
		[Address(RVA = "0xDFE3CC", Offset = "0xDFE3CC", VA = "0xDFE3CC")]
		public void OnPoseChanged()
		{
		}

		[Token(Token = "0x60009B9")]
		[Address(RVA = "0xDFE56C", Offset = "0xDFE56C", VA = "0xDFE56C")]
		public FingerJoint GetWristJoint()
		{
			return null;
		}

		[Token(Token = "0x60009BA")]
		[Address(RVA = "0xDFE57C", Offset = "0xDFE57C", VA = "0xDFE57C")]
		public List<FingerJoint> GetThumbJoints()
		{
			return null;
		}

		[Token(Token = "0x60009BB")]
		[Address(RVA = "0xDFE58C", Offset = "0xDFE58C", VA = "0xDFE58C")]
		public List<FingerJoint> GetIndexJoints()
		{
			return null;
		}

		[Token(Token = "0x60009BC")]
		[Address(RVA = "0xDFE59C", Offset = "0xDFE59C", VA = "0xDFE59C")]
		public List<FingerJoint> GetMiddleJoints()
		{
			return null;
		}

		[Token(Token = "0x60009BD")]
		[Address(RVA = "0xDFE5AC", Offset = "0xDFE5AC", VA = "0xDFE5AC")]
		public List<FingerJoint> GetRingJoints()
		{
			return null;
		}

		[Token(Token = "0x60009BE")]
		[Address(RVA = "0xDFE5BC", Offset = "0xDFE5BC", VA = "0xDFE5BC")]
		public List<FingerJoint> GetPinkyJoints()
		{
			return null;
		}

		[Token(Token = "0x60009BF")]
		[Address(RVA = "0xDFE5CC", Offset = "0xDFE5CC", VA = "0xDFE5CC")]
		public List<FingerJoint> GetOtherJoints()
		{
			return null;
		}

		[Token(Token = "0x60009C0")]
		[Address(RVA = "0xDFE5DC", Offset = "0xDFE5DC", VA = "0xDFE5DC")]
		public int GetTotalJointsCount()
		{
			return default(int);
		}

		[Token(Token = "0x60009C1")]
		[Address(RVA = "0xDFE6CC", Offset = "0xDFE6CC", VA = "0xDFE6CC")]
		public Transform GetTip(List<Transform> transforms)
		{
			return null;
		}

		[Token(Token = "0x60009C2")]
		[Address(RVA = "0xDFE73C", Offset = "0xDFE73C", VA = "0xDFE73C")]
		public Transform GetThumbTip()
		{
			return null;
		}

		[Token(Token = "0x60009C3")]
		[Address(RVA = "0xDFE744", Offset = "0xDFE744", VA = "0xDFE744")]
		public Transform GetIndexTip()
		{
			return null;
		}

		[Token(Token = "0x60009C4")]
		[Address(RVA = "0xDFE74C", Offset = "0xDFE74C", VA = "0xDFE74C")]
		public Transform GetMiddleTip()
		{
			return null;
		}

		[Token(Token = "0x60009C5")]
		[Address(RVA = "0xDFE754", Offset = "0xDFE754", VA = "0xDFE754")]
		public Transform GetRingTip()
		{
			return null;
		}

		[Token(Token = "0x60009C6")]
		[Address(RVA = "0xDFE75C", Offset = "0xDFE75C", VA = "0xDFE75C")]
		public Transform GetPinkyTip()
		{
			return null;
		}

		[Token(Token = "0x60009C7")]
		[Address(RVA = "0xDFCE4C", Offset = "0xDFCE4C", VA = "0xDFCE4C")]
		public static Vector3 GetFingerTipPositionWithOffset(List<Transform> jointTransforms, float tipRadius)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60009C8")]
		[Address(RVA = "0xDFE764", Offset = "0xDFE764", VA = "0xDFE764", Slot = "4")]
		public virtual List<FingerJoint> GetJointsFromTransforms(List<Transform> jointTransforms)
		{
			return null;
		}

		[Token(Token = "0x60009C9")]
		[Address(RVA = "0xDFE91C", Offset = "0xDFE91C", VA = "0xDFE91C", Slot = "5")]
		public virtual FingerJoint GetJointFromTransform(Transform jointTransform)
		{
			return null;
		}

		[Token(Token = "0x60009CA")]
		[Address(RVA = "0xDFEA00", Offset = "0xDFEA00", VA = "0xDFEA00", Slot = "6")]
		public virtual void UpdateHandPose(HandPose handPose, bool lerp)
		{
		}

		[Token(Token = "0x60009CB")]
		[Address(RVA = "0xDFEA24", Offset = "0xDFEA24", VA = "0xDFEA24", Slot = "7")]
		public virtual void UpdateHandPose(HandPoseDefinition pose, bool lerp)
		{
		}

		[Token(Token = "0x60009CC")]
		[Address(RVA = "0xDFEB14", Offset = "0xDFEB14", VA = "0xDFEB14", Slot = "8")]
		public virtual void UpdateJoint(FingerJoint fromJoint, Transform toTransform, bool doLerp, bool updatePosition, bool updateRotation)
		{
		}

		[Token(Token = "0x60009CD")]
		[Address(RVA = "0xDFEB84", Offset = "0xDFEB84", VA = "0xDFEB84", Slot = "9")]
		public virtual void UpdateJoint(FingerJoint fromJoint, Transform toTransform, float lerpAmount, bool updatePosition, bool updateRotation)
		{
		}

		[Token(Token = "0x60009CE")]
		[Address(RVA = "0xDFED04", Offset = "0xDFED04", VA = "0xDFED04", Slot = "10")]
		public virtual void UpdateJoints(List<FingerJoint> joints, List<Transform> toTransforms, bool doLerp)
		{
		}

		[Token(Token = "0x60009CF")]
		[Address(RVA = "0xDFED5C", Offset = "0xDFED5C", VA = "0xDFED5C", Slot = "11")]
		public virtual void UpdateJoints(List<FingerJoint> joints, List<Transform> toTransforms, float lerpAmount)
		{
		}

		[Token(Token = "0x60009D0")]
		[Address(RVA = "0xDFEF44", Offset = "0xDFEF44", VA = "0xDFEF44", Slot = "12")]
		public virtual HandPoseDefinition GetHandPoseDefinition()
		{
			return null;
		}

		[Token(Token = "0x60009D1")]
		[Address(RVA = "0xDFF0A0", Offset = "0xDFF0A0", VA = "0xDFF0A0", Slot = "13")]
		public virtual void SavePoseAsScriptablObject(string poseName)
		{
		}

		[Token(Token = "0x60009D2")]
		[Address(RVA = "0xDFF108", Offset = "0xDFF108", VA = "0xDFF108", Slot = "14")]
		public virtual void CreateUniquePose(string poseName)
		{
		}

		[Token(Token = "0x60009D3")]
		[Address(RVA = "0xDFF234", Offset = "0xDFF234", VA = "0xDFF234", Slot = "15")]
		public virtual HandPose GetHandPoseScriptableObject()
		{
			return null;
		}

		[Token(Token = "0x60009D4")]
		[Address(RVA = "0xDFF23C", Offset = "0xDFF23C", VA = "0xDFF23C", Slot = "16")]
		public virtual void DoPoseUpdate()
		{
		}

		[Token(Token = "0x60009D5")]
		[Address(RVA = "0xDFF300", Offset = "0xDFF300", VA = "0xDFF300", Slot = "17")]
		public virtual void ResetEditorHandles()
		{
		}

		[Token(Token = "0x60009D6")]
		[Address(RVA = "0xDFF444", Offset = "0xDFF444", VA = "0xDFF444")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0xDFF448", Offset = "0xDFF448", VA = "0xDFF448")]
		public HandPoser()
		{
		}
	}
	[Token(Token = "0x200018A")]
	public class PoseableObject : MonoBehaviour
	{
		[Token(Token = "0x200018B")]
		public enum PoseType
		{
			[Token(Token = "0x4000A53")]
			HandPose,
			[Token(Token = "0x4000A54")]
			AutoPoseOnce,
			[Token(Token = "0x4000A55")]
			AutoPoseContinuous,
			[Token(Token = "0x4000A56")]
			Animator,
			[Token(Token = "0x4000A57")]
			Other,
			[Token(Token = "0x4000A58")]
			None
		}

		[Token(Token = "0x4000A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Pose Type")]
		public PoseType poseType;

		[Token(Token = "0x4000A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Set this HandPose on the Handposer when PoseType is set to 'HandPose'")]
		[Header("Hand Pose Properties")]
		public HandPose EquipHandPose;

		[Token(Token = "0x4000A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Auto Pose Properties")]
		[Tooltip("If PoseType = AutoPoseOnce, AutoPose will be run for this many seconds")]
		public float AutoPoseDuration;

		[Token(Token = "0x4000A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Set animator ID to this value if PoseType is set to 'Animator'")]
		[Header("Animator Properties")]
		public int HandPoseID;

		[Token(Token = "0x60009D8")]
		[Address(RVA = "0xDFF4EC", Offset = "0xDFF4EC", VA = "0xDFF4EC")]
		public PoseableObject()
		{
		}
	}
	[Token(Token = "0x200018C")]
	public class SampleHandController : MonoBehaviour
	{
		[Token(Token = "0x4000A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ControllerHandedness ControllerSide;

		[Token(Token = "0x4000A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PoseableObject HeldObject;

		[Token(Token = "0x4000A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected bool wasHoldingObject;

		[Token(Token = "0x4000A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Animator handAnimator;

		[Token(Token = "0x4000A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private HandPoser handPoser;

		[Token(Token = "0x4000A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AutoPoser autoPoser;

		[Token(Token = "0x4000A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private HandPoseBlender poseBlender;

		[Token(Token = "0x4000A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<UnityEngine.XR.InputDevice> devices;

		[Token(Token = "0x4000A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private UnityEngine.XR.InputDevice controller;

		[Token(Token = "0x60009D9")]
		[Address(RVA = "0xDFF500", Offset = "0xDFF500", VA = "0xDFF500")]
		private void Start()
		{
		}

		[Token(Token = "0x60009DA")]
		[Address(RVA = "0xDFF70C", Offset = "0xDFF70C", VA = "0xDFF70C", Slot = "4")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x60009DB")]
		[Address(RVA = "0xDFF718", Offset = "0xDFF718", VA = "0xDFF718", Slot = "5")]
		public virtual void DoHandControllerUpdate()
		{
		}

		[Token(Token = "0x60009DC")]
		[Address(RVA = "0xDFF774", Offset = "0xDFF774", VA = "0xDFF774", Slot = "6")]
		public virtual void SetCurrentlyHeldObject(GameObject holdObject)
		{
		}

		[Token(Token = "0x60009DD")]
		[Address(RVA = "0xDFF828", Offset = "0xDFF828", VA = "0xDFF828", Slot = "7")]
		public virtual void ClearCurrentlyHeldObject()
		{
		}

		[Token(Token = "0x60009DE")]
		[Address(RVA = "0xDFF8C0", Offset = "0xDFF8C0", VA = "0xDFF8C0", Slot = "8")]
		public virtual void ResetToIdleComponents()
		{
		}

		[Token(Token = "0x60009DF")]
		[Address(RVA = "0xDFF9A4", Offset = "0xDFF9A4", VA = "0xDFF9A4", Slot = "9")]
		public virtual void UpdateFingerInputs()
		{
		}

		[Token(Token = "0x60009E0")]
		[Address(RVA = "0xDFFCB0", Offset = "0xDFFCB0", VA = "0xDFFCB0", Slot = "10")]
		public virtual void DoHeldItemPose()
		{
		}

		[Token(Token = "0x60009E1")]
		[Address(RVA = "0xDFFE24", Offset = "0xDFFE24", VA = "0xDFFE24", Slot = "11")]
		public virtual void DisableContinousAutoPose()
		{
		}

		[Token(Token = "0x60009E2")]
		[Address(RVA = "0xDFFE98", Offset = "0xDFFE98", VA = "0xDFFE98", Slot = "12")]
		public virtual void DoIdlePose()
		{
		}

		[Token(Token = "0x60009E3")]
		[Address(RVA = "0xDFFEB8", Offset = "0xDFFEB8", VA = "0xDFFEB8", Slot = "13")]
		public virtual bool HoldingObject()
		{
			return default(bool);
		}

		[Token(Token = "0x60009E4")]
		[Address(RVA = "0xDFFBD0", Offset = "0xDFFBD0", VA = "0xDFFBD0")]
		private float correctValue(float inputValue)
		{
			return default(float);
		}

		[Token(Token = "0x60009E5")]
		[Address(RVA = "0xDFFF18", Offset = "0xDFFF18", VA = "0xDFFF18", Slot = "14")]
		public virtual void UpdateXRDevices()
		{
		}

		[Token(Token = "0x60009E6")]
		[Address(RVA = "0xDFFB88", Offset = "0xDFFB88", VA = "0xDFFB88")]
		private float getFeatureUsage(UnityEngine.XR.InputDevice device, InputFeatureUsage<float> usage)
		{
			return default(float);
		}

		[Token(Token = "0x60009E7")]
		[Address(RVA = "0xDFFFAC", Offset = "0xDFFFAC", VA = "0xDFFFAC")]
		private bool getFeatureUsage(UnityEngine.XR.InputDevice device, InputFeatureUsage<bool> usage)
		{
			return default(bool);
		}

		[Token(Token = "0x60009E8")]
		[Address(RVA = "0xDFFFE0", Offset = "0xDFFFE0", VA = "0xDFFFE0", Slot = "15")]
		public virtual UnityEngine.XR.InputDevice GetLeftController()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x60009E9")]
		[Address(RVA = "0xE000B0", Offset = "0xE000B0", VA = "0xE000B0", Slot = "16")]
		public virtual UnityEngine.XR.InputDevice GetRightController()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x60009EA")]
		[Address(RVA = "0xE00180", Offset = "0xE00180", VA = "0xE00180", Slot = "17")]
		public virtual bool GetThumbIsNear()
		{
			return default(bool);
		}

		[Token(Token = "0x60009EB")]
		[Address(RVA = "0xE002F4", Offset = "0xE002F4", VA = "0xE002F4", Slot = "18")]
		public virtual bool GetIndexIsNear()
		{
			return default(bool);
		}

		[Token(Token = "0x60009EC")]
		[Address(RVA = "0xE00394", Offset = "0xE00394", VA = "0xE00394")]
		public SampleHandController()
		{
		}
	}
	[Token(Token = "0x200018D")]
	public enum ControllerHandedness
	{
		[Token(Token = "0x4000A63")]
		Left,
		[Token(Token = "0x4000A64")]
		Right,
		[Token(Token = "0x4000A65")]
		None
	}
	[Token(Token = "0x200018E")]
	public class SavePoseBinding : MonoBehaviour
	{
		[Token(Token = "0x4000A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If this InputAction returns true, save the current hand pose using 'handPoser.CreateUniquePose(SaveNamePrefix)'")]
		[Header("Save Input : ")]
		public InputAction SaveInput;

		[Token(Token = "0x4000A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Save name prefix : ")]
		[Tooltip("Prefix of the hand pose file name to use. For example, a prefix of 'HandPose' will save as 'HandPose 1', 'HandPose 2', etc.")]
		public string SaveNamePrefix;

		[Token(Token = "0x4000A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Debug : ")]
		[Tooltip("If true, the SaveInput binding will be shown on the screen gui. Will not show in VR.")]
		public bool ShowKeybindingToolTip;

		[Token(Token = "0x4000A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private HandPoser handPoser;

		[Token(Token = "0x60009EE")]
		[Address(RVA = "0xE0043C", Offset = "0xE0043C", VA = "0xE0043C")]
		private void Start()
		{
		}

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0xE004B0", Offset = "0xE004B0", VA = "0xE004B0")]
		private void Update()
		{
		}

		[Token(Token = "0x60009F0")]
		[Address(RVA = "0xE00574", Offset = "0xE00574", VA = "0xE00574")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x60009F1")]
		[Address(RVA = "0xE0069C", Offset = "0xE0069C", VA = "0xE0069C")]
		public SavePoseBinding()
		{
		}
	}
	[Token(Token = "0x200018F")]
	[ExecuteInEditMode]
	public class SkeletonVisualizer : MonoBehaviour
	{
		[Token(Token = "0x4000A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool ShowGizmos;

		[Token(Token = "0x4000A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1f)]
		public float JointRadius;

		[Token(Token = "0x4000A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 5f)]
		public float BoneThickness;

		[Token(Token = "0x4000A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Color GizmoColor;

		[Token(Token = "0x4000A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool ShowTransformNames;

		[Token(Token = "0x4000A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool isQuiting;

		[Token(Token = "0x60009F2")]
		[Address(RVA = "0xE006FC", Offset = "0xE006FC", VA = "0xE006FC")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0xE00708", Offset = "0xE00708", VA = "0xE00708")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60009F4")]
		[Address(RVA = "0xE0070C", Offset = "0xE0070C", VA = "0xE0070C", Slot = "4")]
		public virtual bool IsTipOfBone(Transform fingerJoint)
		{
			return default(bool);
		}

		[Token(Token = "0x60009F5")]
		[Address(RVA = "0xE007FC", Offset = "0xE007FC", VA = "0xE007FC")]
		public void ResetEditorHandles()
		{
		}

		[Token(Token = "0x60009F6")]
		[Address(RVA = "0xE00940", Offset = "0xE00940", VA = "0xE00940")]
		public SkeletonVisualizer()
		{
		}
	}
	[Token(Token = "0x2000190")]
	public class XRTrackedPoseDriver : MonoBehaviour
	{
		[Token(Token = "0x4000A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TrackableXRDevice Device;

		[Token(Token = "0x4000A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected UnityEngine.XR.InputDevice deviceToTrack;

		[Token(Token = "0x4000A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Vector3 initialLocalPosition;

		[Token(Token = "0x4000A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected Quaternion initialLocalRotation;

		[Token(Token = "0x4000A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		protected Vector3 currentLocalPosition;

		[Token(Token = "0x4000A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Quaternion currentLocalRotation;

		[Token(Token = "0x4000A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static List<UnityEngine.XR.InputDevice> devices;

		[Token(Token = "0x60009F7")]
		[Address(RVA = "0xE00968", Offset = "0xE00968", VA = "0xE00968", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x60009F8")]
		[Address(RVA = "0xE009B8", Offset = "0xE009B8", VA = "0xE009B8", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x60009F9")]
		[Address(RVA = "0xE00A2C", Offset = "0xE00A2C", VA = "0xE00A2C", Slot = "6")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x60009FA")]
		[Address(RVA = "0xE00AA0", Offset = "0xE00AA0", VA = "0xE00AA0", Slot = "7")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60009FB")]
		[Address(RVA = "0xE00AC8", Offset = "0xE00AC8", VA = "0xE00AC8", Slot = "8")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x60009FC")]
		[Address(RVA = "0xE00AD4", Offset = "0xE00AD4", VA = "0xE00AD4", Slot = "9")]
		public virtual void RefreshDeviceStatus()
		{
		}

		[Token(Token = "0x60009FD")]
		[Address(RVA = "0xE00D94", Offset = "0xE00D94", VA = "0xE00D94", Slot = "10")]
		public virtual void UpdateDevice()
		{
		}

		[Token(Token = "0x60009FE")]
		[Address(RVA = "0xE011A4", Offset = "0xE011A4", VA = "0xE011A4", Slot = "11")]
		protected virtual void OnBeforeRender()
		{
		}

		[Token(Token = "0x60009FF")]
		[Address(RVA = "0xE00ECC", Offset = "0xE00ECC", VA = "0xE00ECC")]
		public Vector3 GetHMDLocalPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A00")]
		[Address(RVA = "0xE00B24", Offset = "0xE00B24", VA = "0xE00B24")]
		public UnityEngine.XR.InputDevice GetHMD()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x6000A01")]
		[Address(RVA = "0xE00F58", Offset = "0xE00F58", VA = "0xE00F58")]
		public Quaternion GetHMDLocalRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000A02")]
		[Address(RVA = "0xE00FE0", Offset = "0xE00FE0", VA = "0xE00FE0")]
		public Vector3 GetControllerLocalPosition(ControllerHandedness handSide)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A03")]
		[Address(RVA = "0xE010C8", Offset = "0xE010C8", VA = "0xE010C8")]
		public Quaternion GetControllerLocalRotation(ControllerHandedness handSide)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000A04")]
		[Address(RVA = "0xE00BF4", Offset = "0xE00BF4", VA = "0xE00BF4")]
		public UnityEngine.XR.InputDevice GetLeftController()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0xE00CC4", Offset = "0xE00CC4", VA = "0xE00CC4")]
		public UnityEngine.XR.InputDevice GetRightController()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x6000A06")]
		[Address(RVA = "0xE011B0", Offset = "0xE011B0", VA = "0xE011B0")]
		public XRTrackedPoseDriver()
		{
		}
	}
	[Token(Token = "0x2000191")]
	public enum TrackableXRDevice
	{
		[Token(Token = "0x4000A78")]
		HMD,
		[Token(Token = "0x4000A79")]
		LeftController,
		[Token(Token = "0x4000A7A")]
		RightController
	}
	[Token(Token = "0x2000192")]
	public class BNGIKPlayerScale : MonoBehaviour
	{
		[Token(Token = "0x4000A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VRIK ik;

		[Token(Token = "0x4000A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float scaleMlp;

		[Token(Token = "0x4000A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public ControllerBinding ScalePlayerInput;

		[Token(Token = "0x6000A08")]
		[Address(RVA = "0xE01250", Offset = "0xE01250", VA = "0xE01250")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0xE013C4", Offset = "0xE013C4", VA = "0xE013C4")]
		public BNGIKPlayerScale()
		{
		}
	}
	[Token(Token = "0x2000193")]
	public class FingerMapping : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000194")]
		public enum Mode
		{
			[Token(Token = "0x4000A84")]
			FromToRotation,
			[Token(Token = "0x4000A85")]
			MatchRotation
		}

		[Token(Token = "0x4000A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IK ik;

		[Token(Token = "0x4000A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float weight;

		[Token(Token = "0x4000A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Mode mode;

		[Token(Token = "0x4000A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Finger[] fingers;

		[Token(Token = "0x4000A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Shown for Debug : ")]
		public bool ShowGizmos;

		[Token(Token = "0x6000A0A")]
		[Address(RVA = "0xE013D8", Offset = "0xE013D8", VA = "0xE013D8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0xE01534", Offset = "0xE01534", VA = "0xE01534")]
		private void AfterVRIK()
		{
		}

		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0xE01A48", Offset = "0xE01A48", VA = "0xE01A48")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0xE01D54", Offset = "0xE01D54", VA = "0xE01D54")]
		public FingerMapping()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000195")]
	public class Finger
	{
		[Token(Token = "0x4000A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform[] avatarBones;

		[Token(Token = "0x4000A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform[] targetBones;

		[Token(Token = "0x4000A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 avatarForwardAxis;

		[Token(Token = "0x4000A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 avatarUpAxis;

		[Token(Token = "0x4000A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 targetForwardAxis;

		[Token(Token = "0x4000A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 targetUpAxis;

		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0xE01D6C", Offset = "0xE01D6C", VA = "0xE01D6C")]
		public Finger()
		{
		}
	}
	[Token(Token = "0x2000196")]
	public class IKHandTargetMover : MonoBehaviour
	{
		[Token(Token = "0x4000A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Grabber grabber;

		[Token(Token = "0x4000A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform HandTarget;

		[Token(Token = "0x4000A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 rotationOffset;

		[Token(Token = "0x4000A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 positionOffset;

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0xE01EE0", Offset = "0xE01EE0", VA = "0xE01EE0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A10")]
		[Address(RVA = "0xE021A0", Offset = "0xE021A0", VA = "0xE021A0")]
		public IKHandTargetMover()
		{
		}
	}
	[Token(Token = "0x2000197")]
	public class NetworkedGrabbable : Grabbable, IPunObservable
	{
		[Token(Token = "0x4000A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		public PhotonView view;

		[Token(Token = "0x4000A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		private Rigidbody rb;

		[Token(Token = "0x4000A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		private Vector3 _syncStartPosition;

		[Token(Token = "0x4000A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x274")]
		private Vector3 _syncEndPosition;

		[Token(Token = "0x4000A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		private Quaternion _syncStartRotation;

		[Token(Token = "0x4000A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		private Quaternion _syncEndRotation;

		[Token(Token = "0x4000A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		private bool _syncBeingHeld;

		[Token(Token = "0x4000A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A4")]
		private float _lastSynchronizationTime;

		[Token(Token = "0x4000A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		private float _syncDelay;

		[Token(Token = "0x4000A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2AC")]
		private float _syncTime;

		[Token(Token = "0x4000A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		protected bool requestingOwnerShip;

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0xE02214", Offset = "0xE02214", VA = "0xE02214")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A12")]
		[Address(RVA = "0xE022A4", Offset = "0xE022A4", VA = "0xE022A4", Slot = "4")]
		public override void Update()
		{
		}

		[Token(Token = "0x6000A13")]
		[Address(RVA = "0xE025B8", Offset = "0xE025B8", VA = "0xE025B8", Slot = "51")]
		public virtual void CheckForNullOwner()
		{
		}

		[Token(Token = "0x6000A14")]
		[Address(RVA = "0xE02684", Offset = "0xE02684", VA = "0xE02684", Slot = "8")]
		public override bool IsGrabbable()
		{
			return default(bool);
		}

		[Token(Token = "0x6000A15")]
		[Address(RVA = "0xE02754", Offset = "0xE02754", VA = "0xE02754", Slot = "50")]
		public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x6000A16")]
		[Address(RVA = "0xE029AC", Offset = "0xE029AC", VA = "0xE029AC")]
		public NetworkedGrabbable()
		{
		}
	}
	[Token(Token = "0x2000198")]
	public class NetworkedRaycastWeapon : RaycastWeapon, IPunObservable
	{
		[Token(Token = "0x4000A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private PhotonView photonView;

		[Token(Token = "0x6000A17")]
		[Address(RVA = "0xE02A68", Offset = "0xE02A68", VA = "0xE02A68")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A18")]
		[Address(RVA = "0xE02AC0", Offset = "0xE02AC0", VA = "0xE02AC0", Slot = "30")]
		public override void Shoot()
		{
		}

		[Token(Token = "0x6000A19")]
		[Address(RVA = "0xE02C64", Offset = "0xE02C64", VA = "0xE02C64")]
		[PunRPC]
		private void ShootRPC(bool playEmptySound)
		{
		}

		[Token(Token = "0x6000A1A")]
		[Address(RVA = "0xE02D58", Offset = "0xE02D58", VA = "0xE02D58", Slot = "43")]
		public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x6000A1B")]
		[Address(RVA = "0xE02D7C", Offset = "0xE02D7C", VA = "0xE02D7C")]
		public NetworkedRaycastWeapon()
		{
		}
	}
	[Token(Token = "0x2000199")]
	public class NetworkManager : MonoBehaviourPunCallbacks
	{
		[Token(Token = "0x200019A")]
		[CompilerGenerated]
		private sealed class <doLoadLevelWithFade>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000AA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000AA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000AA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NetworkManager <>4__this;

			[Token(Token = "0x4000AA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public string sceneName;

			[Token(Token = "0x170000E0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000A2C")]
				[Address(RVA = "0xE03C38", Offset = "0xE03C38", VA = "0xE03C38", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000E1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A2E")]
				[Address(RVA = "0xE03C80", Offset = "0xE03C80", VA = "0xE03C80", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A29")]
			[Address(RVA = "0xE039F4", Offset = "0xE039F4", VA = "0xE039F4")]
			[DebuggerHidden]
			public <doLoadLevelWithFade>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x6000A2A")]
			[Address(RVA = "0xE03ACC", Offset = "0xE03ACC", VA = "0xE03ACC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A2B")]
			[Address(RVA = "0xE03AD0", Offset = "0xE03AD0", VA = "0xE03AD0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A2D")]
			[Address(RVA = "0xE03C40", Offset = "0xE03C40", VA = "0xE03C40", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Maximum number of players per room. If the room is full, a new random one will be created. 0 = No Max.")]
		[SerializeField]
		private byte maxPlayersPerRoom;

		[Token(Token = "0x4000A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[Tooltip("If true, the JoinRoomName will try to be Joined On Start. If false, need to call JoinRoom yourself.")]
		public bool JoinRoomOnStart;

		[Token(Token = "0x4000A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		[Tooltip("If true, do not destroy this object when moving to another scene")]
		public bool dontDestroyOnLoad;

		[Token(Token = "0x4000A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string JoinRoomName;

		[Token(Token = "0x4000AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Game Version can be used to separate rooms.")]
		public string GameVersion;

		[Token(Token = "0x4000AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Name of the Player object to spawn. Must be in a /Resources folder.")]
		public string RemotePlayerObjectName;

		[Token(Token = "0x4000AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Optional GUI Text element to output debug information.")]
		public Text DebugText;

		[Token(Token = "0x4000AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ScreenFader sf;

		[Token(Token = "0x6000A1C")]
		[Address(RVA = "0xE02D84", Offset = "0xE02D84", VA = "0xE02D84")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A1D")]
		[Address(RVA = "0xE02EA8", Offset = "0xE02EA8", VA = "0xE02EA8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A1E")]
		[Address(RVA = "0xE0308C", Offset = "0xE0308C", VA = "0xE0308C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A1F")]
		[Address(RVA = "0xE03180", Offset = "0xE03180", VA = "0xE03180", Slot = "34")]
		public override void OnJoinRoomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x6000A20")]
		[Address(RVA = "0xE032A4", Offset = "0xE032A4", VA = "0xE032A4", Slot = "44")]
		public override void OnJoinRandomFailed(short returnCode, string message)
		{
		}

		[Token(Token = "0x6000A21")]
		[Address(RVA = "0xE03330", Offset = "0xE03330", VA = "0xE03330", Slot = "45")]
		public override void OnConnectedToMaster()
		{
		}

		[Token(Token = "0x6000A22")]
		[Address(RVA = "0xE0340C", Offset = "0xE0340C", VA = "0xE0340C", Slot = "42")]
		public override void OnPlayerEnteredRoom(Player newPlayer)
		{
		}

		[Token(Token = "0x6000A23")]
		[Address(RVA = "0xE0352C", Offset = "0xE0352C", VA = "0xE0352C", Slot = "41")]
		public override void OnJoinedRoom()
		{
		}

		[Token(Token = "0x6000A24")]
		[Address(RVA = "0xE03838", Offset = "0xE03838", VA = "0xE03838", Slot = "38")]
		public override void OnDisconnected(DisconnectCause cause)
		{
		}

		[Token(Token = "0x6000A25")]
		[Address(RVA = "0xE03944", Offset = "0xE03944", VA = "0xE03944")]
		public void LoadScene(string sceneName)
		{
		}

		[Token(Token = "0x6000A26")]
		[Address(RVA = "0xE03964", Offset = "0xE03964", VA = "0xE03964")]
		[IteratorStateMachine(typeof(<doLoadLevelWithFade>d__18))]
		private IEnumerator doLoadLevelWithFade(string sceneName)
		{
			return null;
		}

		[Token(Token = "0x6000A27")]
		[Address(RVA = "0xE02F94", Offset = "0xE02F94", VA = "0xE02F94")]
		private void LogText(string message)
		{
		}

		[Token(Token = "0x6000A28")]
		[Address(RVA = "0xE03A1C", Offset = "0xE03A1C", VA = "0xE03A1C")]
		public NetworkManager()
		{
		}
	}
	[Token(Token = "0x200019B")]
	public class NetworkPlayer : MonoBehaviourPunCallbacks, IPunObservable, IPunOwnershipCallbacks
	{
		[Token(Token = "0x4000AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Transform of the local player's head to track. This will be applied to the Remote Player's Head Transform")]
		public Transform PlayerHeadTransform;

		[Token(Token = "0x4000AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform PlayerLeftHandTransform;

		[Token(Token = "0x4000AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform PlayerRightHandTransform;

		[Token(Token = "0x4000AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Transform of the remote player's head. This will be updated during Update")]
		public Transform RemoteHeadTransform;

		[Token(Token = "0x4000AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 _syncHeadStartPosition;

		[Token(Token = "0x4000AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 _syncHeadEndPosition;

		[Token(Token = "0x4000AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion _syncHeadStartRotation;

		[Token(Token = "0x4000AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Quaternion _syncHeadEndRotation;

		[Token(Token = "0x4000AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Transform of the remote player's left hand / controller. This will be updated during Update")]
		public Transform RemoteLeftHandTransform;

		[Token(Token = "0x4000AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 _syncLHandStartPosition;

		[Token(Token = "0x4000AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 _syncLHandEndPosition;

		[Token(Token = "0x4000AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Quaternion _syncLHandStartRotation;

		[Token(Token = "0x4000AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Quaternion _syncLHandEndRotation;

		[Token(Token = "0x4000AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("Transform of the remote player's right hand / controller. This will be updated during Update")]
		public Transform RemoteRightHandTransform;

		[Token(Token = "0x4000AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Vector3 _syncRHandStartPosition;

		[Token(Token = "0x4000AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private Vector3 _syncRHandEndPosition;

		[Token(Token = "0x4000AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Quaternion _syncRHandStartRotation;

		[Token(Token = "0x4000AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Quaternion _syncRHandEndRotation;

		[Token(Token = "0x4000ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public HandController LeftHandController;

		[Token(Token = "0x4000ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public HandController RightHandController;

		[Token(Token = "0x4000ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public Animator RemoteLeftHandAnimator;

		[Token(Token = "0x4000ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public Animator RemoteRightHandAnimator;

		[Token(Token = "0x4000ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[Tooltip("Local Player's Left Grabber. Used to determine which objects are nearby")]
		public Grabber LeftGrabber;

		[Token(Token = "0x4000ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private GrabbablesInTrigger gitLeft;

		[Token(Token = "0x4000AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[Tooltip("Local Player's Right Grabber. Used to determine which objects are nearby")]
		public Grabber RightGrabber;

		[Token(Token = "0x4000AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private GrabbablesInTrigger gitRight;

		[Token(Token = "0x4000AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[Tooltip("How fast to animate the fingers on the remote players hands")]
		public float HandAnimationSpeed;

		[Token(Token = "0x4000AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		private float _syncLeftGripStart;

		[Token(Token = "0x4000AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private float _syncRightGripStart;

		[Token(Token = "0x4000AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		private float _syncLeftPointStart;

		[Token(Token = "0x4000AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private float _syncRightPointStart;

		[Token(Token = "0x4000AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		private float _syncLeftThumbStart;

		[Token(Token = "0x4000AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private float _syncRightThumbStart;

		[Token(Token = "0x4000AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		private float _syncLeftGripEnd;

		[Token(Token = "0x4000ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private float _syncRightGripEnd;

		[Token(Token = "0x4000ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		private float _syncLeftPointEnd;

		[Token(Token = "0x4000ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private float _syncRightPointEnd;

		[Token(Token = "0x4000ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private float _syncLeftThumbEnd;

		[Token(Token = "0x4000ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private float _syncRightThumbEnd;

		[Token(Token = "0x4000ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		private float _lastSynchronizationTime;

		[Token(Token = "0x4000AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private float _syncDelay;

		[Token(Token = "0x4000AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private float _syncTime;

		[Token(Token = "0x4000AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		protected double lastRequestTime;

		[Token(Token = "0x4000AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		protected float requestInterval;

		[Token(Token = "0x4000AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private Dictionary<int, double> requestedGrabbables;

		[Token(Token = "0x4000AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private bool disabledObjects;

		[Token(Token = "0x4000AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x191")]
		private bool _syncLeftHoldingItem;

		[Token(Token = "0x4000AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x192")]
		private bool _syncRightHoldingItem;

		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0xE03C88", Offset = "0xE03C88", VA = "0xE03C88")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A30")]
		[Address(RVA = "0xE03DEC", Offset = "0xE03DEC", VA = "0xE03DEC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A31")]
		[Address(RVA = "0xE036C4", Offset = "0xE036C4", VA = "0xE036C4")]
		public void AssignPlayerObjects()
		{
		}

		[Token(Token = "0x6000A32")]
		[Address(RVA = "0xE045BC", Offset = "0xE045BC", VA = "0xE045BC")]
		private Transform getChildTransformByName(Transform search, string name)
		{
			return null;
		}

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0xE04380", Offset = "0xE04380", VA = "0xE04380")]
		private void toggleObjects(bool enableObjects)
		{
		}

		[Token(Token = "0x6000A34")]
		[Address(RVA = "0xE042F0", Offset = "0xE042F0", VA = "0xE042F0")]
		private void checkGrabbablesTransfer()
		{
		}

		[Token(Token = "0x6000A35")]
		[Address(RVA = "0xE04680", Offset = "0xE04680", VA = "0xE04680")]
		private void requestOwnerShipForNearbyGrabbables(GrabbablesInTrigger grabbables)
		{
		}

		[Token(Token = "0x6000A36")]
		[Address(RVA = "0xE04A08", Offset = "0xE04A08", VA = "0xE04A08", Slot = "58")]
		public virtual bool RecentlyRequested(PhotonView view)
		{
			return default(bool);
		}

		[Token(Token = "0x6000A37")]
		[Address(RVA = "0xE04AE4", Offset = "0xE04AE4", VA = "0xE04AE4", Slot = "59")]
		public virtual void RequestGrabbableOwnership(PhotonView view)
		{
		}

		[Token(Token = "0x6000A38")]
		[Address(RVA = "0xE0440C", Offset = "0xE0440C", VA = "0xE0440C")]
		private void updateRemotePositionRotation(Transform moveTransform, Vector3 startPosition, Vector3 endPosition, Quaternion syncStartRotation, Quaternion syncEndRotation, float syncValue)
		{
		}

		[Token(Token = "0x6000A39")]
		[Address(RVA = "0xE04BDC", Offset = "0xE04BDC", VA = "0xE04BDC", Slot = "54")]
		public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x6000A3A")]
		[Address(RVA = "0xE054B4", Offset = "0xE054B4", VA = "0xE054B4", Slot = "55")]
		public void OnOwnershipRequest(PhotonView targetView, Player requestingPlayer)
		{
		}

		[Token(Token = "0x6000A3B")]
		[Address(RVA = "0xE055E0", Offset = "0xE055E0", VA = "0xE055E0", Slot = "56")]
		public void OnOwnershipTransfered(PhotonView targetView, Player requestingPlayer)
		{
		}

		[Token(Token = "0x6000A3C")]
		[Address(RVA = "0xE055E4", Offset = "0xE055E4", VA = "0xE055E4", Slot = "57")]
		public void OnOwnershipTransferFailed(PhotonView targetView, Player requestingPlayer)
		{
		}

		[Token(Token = "0x6000A3D")]
		[Address(RVA = "0xE055E8", Offset = "0xE055E8", VA = "0xE055E8")]
		public NetworkPlayer()
		{
		}
	}
	[Token(Token = "0x200019C")]
	public class DemoCube : MonoBehaviour
	{
		[Token(Token = "0x4000AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material HighlightMaterial;

		[Token(Token = "0x4000AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material ActiveMaterial;

		[Token(Token = "0x4000ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool active;

		[Token(Token = "0x4000ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool hovering;

		[Token(Token = "0x4000ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material initialMaterial;

		[Token(Token = "0x4000ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private MeshRenderer render;

		[Token(Token = "0x6000A3E")]
		[Address(RVA = "0xE057BC", Offset = "0xE057BC", VA = "0xE057BC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0xE0583C", Offset = "0xE0583C", VA = "0xE0583C")]
		public void SetActive(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000A40")]
		[Address(RVA = "0xE0589C", Offset = "0xE0589C", VA = "0xE0589C")]
		public void SetInactive(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000A41")]
		[Address(RVA = "0xE058A4", Offset = "0xE058A4", VA = "0xE058A4")]
		public void SetHovering(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000A42")]
		[Address(RVA = "0xE058B0", Offset = "0xE058B0", VA = "0xE058B0")]
		public void ResetHovering(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000A43")]
		[Address(RVA = "0xE05848", Offset = "0xE05848", VA = "0xE05848")]
		public void UpdateMaterial()
		{
		}

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0xE058B8", Offset = "0xE058B8", VA = "0xE058B8")]
		public DemoCube()
		{
		}
	}
	[Token(Token = "0x200019D")]
	public class DemoScript : MonoBehaviour
	{
		[Token(Token = "0x4000ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text LabelToUpdate;

		[Token(Token = "0x4000ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ProjectileLauncher DemoLauncher;

		[Token(Token = "0x4000AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int MaxLaunchedObjects;

		[Token(Token = "0x4000AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<GameObject> launchedObjects;

		[Token(Token = "0x4000AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Text JoystickText;

		[Token(Token = "0x4000AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject AmmoObject;

		[Token(Token = "0x4000AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform ItemsHolder;

		[Token(Token = "0x4000AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Dictionary<Grabbable, PosRot> _initalGrabbables;

		[Token(Token = "0x4000AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody cubeRigid;

		[Token(Token = "0x4000AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody cubeRigid1;

		[Token(Token = "0x4000AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Rigidbody cubeRigid2;

		[Token(Token = "0x4000AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody cubeRigid3;

		[Token(Token = "0x4000AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private List<Grabbable> demoClips;

		[Token(Token = "0x4000AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 rotateX;

		[Token(Token = "0x4000AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 rotateY;

		[Token(Token = "0x4000AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 rotateZ;

		[Token(Token = "0x4000AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 rotateXYX;

		[Token(Token = "0x6000A45")]
		[Address(RVA = "0xE058C0", Offset = "0xE058C0", VA = "0xE058C0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A46")]
		[Address(RVA = "0xE05D74", Offset = "0xE05D74", VA = "0xE05D74")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A47")]
		[Address(RVA = "0xE05EB4", Offset = "0xE05EB4", VA = "0xE05EB4")]
		public void UpdateSliderText(float sliderValue)
		{
		}

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0xE06004", Offset = "0xE06004", VA = "0xE06004")]
		public void UpdateJoystickText(float leverX, float leverY)
		{
		}

		[Token(Token = "0x6000A49")]
		[Address(RVA = "0xE06140", Offset = "0xE06140", VA = "0xE06140")]
		public void ResetGrabbables()
		{
		}

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0xE064BC", Offset = "0xE064BC", VA = "0xE064BC")]
		public void GrabAmmo(Grabber grabber)
		{
		}

		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0xE069A4", Offset = "0xE069A4", VA = "0xE069A4")]
		public void ShootLauncher()
		{
		}

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0xE05B48", Offset = "0xE05B48", VA = "0xE05B48")]
		private void initGravityCubes()
		{
		}

		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0xE05D78", Offset = "0xE05D78", VA = "0xE05D78")]
		private void rotateGravityCubes()
		{
		}

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0xE06B80", Offset = "0xE06B80", VA = "0xE06B80")]
		public DemoScript()
		{
		}
	}
	[Token(Token = "0x200019E")]
	public class PosRot
	{
		[Token(Token = "0x4000AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 Position;

		[Token(Token = "0x4000AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion Rotation;

		[Token(Token = "0x6000A4F")]
		[Address(RVA = "0xE05B40", Offset = "0xE05B40", VA = "0xE05B40")]
		public PosRot()
		{
		}
	}
	[Token(Token = "0x200019F")]
	public class CharacterConstraint : MonoBehaviour
	{
		[Token(Token = "0x4000AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BNGPlayerController bngController;

		[Token(Token = "0x4000AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CharacterController character;

		[Token(Token = "0x6000A50")]
		[Address(RVA = "0xE06BAC", Offset = "0xE06BAC", VA = "0xE06BAC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0xE06C44", Offset = "0xE06C44", VA = "0xE06C44")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0xE06C50", Offset = "0xE06C50", VA = "0xE06C50", Slot = "4")]
		public virtual void CheckCharacterCollisionMove()
		{
		}

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0xE06DC0", Offset = "0xE06DC0", VA = "0xE06DC0")]
		public CharacterConstraint()
		{
		}
	}
	[Token(Token = "0x20001A0")]
	public class CharacterIK : MonoBehaviour
	{
		[Token(Token = "0x4000AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform FollowLeftController;

		[Token(Token = "0x4000AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform FollowRightController;

		[Token(Token = "0x4000AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform FollowLeftFoot;

		[Token(Token = "0x4000AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform FollowRightFoot;

		[Token(Token = "0x4000AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform FollowHead;

		[Token(Token = "0x4000AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float FootYPosition;

		[Token(Token = "0x4000AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool IKActive;

		[Token(Token = "0x4000AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		public bool IKFeetActive;

		[Token(Token = "0x4000AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		public bool HideHead;

		[Token(Token = "0x4000AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
		public bool HideLeftArm;

		[Token(Token = "0x4000AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool HideRightArm;

		[Token(Token = "0x4000AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool HideLeftHand;

		[Token(Token = "0x4000AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		public bool HideRightHand;

		[Token(Token = "0x4000B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
		public bool HideLegs;

		[Token(Token = "0x4000B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform HipsJoint;

		[Token(Token = "0x4000B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public CharacterController FollowPlayer;

		[Token(Token = "0x4000B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform headBone;

		[Token(Token = "0x4000B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform leftShoulderJoint;

		[Token(Token = "0x4000B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform rightShoulderJoint;

		[Token(Token = "0x4000B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform leftHandJoint;

		[Token(Token = "0x4000B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform rightHandJoint;

		[Token(Token = "0x4000B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Animator animator;

		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float HipOffset;

		[Token(Token = "0x4000B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public Vector3 hideBoneScale;

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0xE06DC8", Offset = "0xE06DC8", VA = "0xE06DC8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0xE06EEC", Offset = "0xE06EEC", VA = "0xE06EEC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0xE07354", Offset = "0xE07354", VA = "0xE07354")]
		private void OnAnimatorIK()
		{
		}

		[Token(Token = "0x6000A57")]
		[Address(RVA = "0xE0779C", Offset = "0xE0779C", VA = "0xE0779C")]
		public CharacterIK()
		{
		}
	}
	[Token(Token = "0x20001A1")]
	public class CharacterYOffset : MonoBehaviour
	{
		[Token(Token = "0x6000A58")]
		[Address(RVA = "0xE077C8", Offset = "0xE077C8", VA = "0xE077C8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0xE0786C", Offset = "0xE0786C", VA = "0xE0786C")]
		public CharacterYOffset()
		{
		}
	}
	[Token(Token = "0x20001A2")]
	public class Climbable : Grabbable
	{
		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		private PlayerClimbing playerClimbing;

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0xE07874", Offset = "0xE07874", VA = "0xE07874")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0xE07968", Offset = "0xE07968", VA = "0xE07968", Slot = "20")]
		public override void GrabItem(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x6000A5C")]
		[Address(RVA = "0xE07A04", Offset = "0xE07A04", VA = "0xE07A04", Slot = "28")]
		public override void DropItem(Grabber droppedBy)
		{
		}

		[Token(Token = "0x6000A5D")]
		[Address(RVA = "0xE07AC4", Offset = "0xE07AC4", VA = "0xE07AC4")]
		public Climbable()
		{
		}
	}
	[Token(Token = "0x20001A3")]
	public class CollisionSound : MonoBehaviour
	{
		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip CollisionAudio;

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AudioSource audioSource;

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float startTime;

		[Token(Token = "0x4000B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Collider col;

		[Token(Token = "0x4000B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Grabbable grab;

		[Token(Token = "0x4000B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float MinimumVolume;

		[Token(Token = "0x4000B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float MaximumVolume;

		[Token(Token = "0x4000B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool RecentlyPlayedSound;

		[Token(Token = "0x4000B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float lastPlayedSound;

		[Token(Token = "0x4000B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float LastRelativeVelocity;

		[Token(Token = "0x6000A5E")]
		[Address(RVA = "0xE07ACC", Offset = "0xE07ACC", VA = "0xE07ACC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0xE07C2C", Offset = "0xE07C2C", VA = "0xE07C2C")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0xE07FF4", Offset = "0xE07FF4", VA = "0xE07FF4")]
		private void resetLastPlayedSound()
		{
		}

		[Token(Token = "0x6000A61")]
		[Address(RVA = "0xE07FFC", Offset = "0xE07FFC", VA = "0xE07FFC")]
		public CollisionSound()
		{
		}
	}
	[Token(Token = "0x20001A4")]
	public class ConstrainLocalPosition : MonoBehaviour
	{
		[Token(Token = "0x4000B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool ConstrainLocalX;

		[Token(Token = "0x4000B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float LocalXMin;

		[Token(Token = "0x4000B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float LocalXMax;

		[Token(Token = "0x4000B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool ConstrainLocalY;

		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float LocalYMin;

		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float LocalYMax;

		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool ConstrainLocalZ;

		[Token(Token = "0x4000B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float LocalZMin;

		[Token(Token = "0x4000B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float LocalZMax;

		[Token(Token = "0x6000A62")]
		[Address(RVA = "0xE08010", Offset = "0xE08010", VA = "0xE08010")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A63")]
		[Address(RVA = "0xE08014", Offset = "0xE08014", VA = "0xE08014")]
		private void doConstrain()
		{
		}

		[Token(Token = "0x6000A64")]
		[Address(RVA = "0xE08110", Offset = "0xE08110", VA = "0xE08110")]
		public ConstrainLocalPosition()
		{
		}
	}
	[Token(Token = "0x20001A5")]
	public class Damageable : MonoBehaviour
	{
		[Token(Token = "0x20001A6")]
		[CompilerGenerated]
		private sealed class <RespawnRoutine>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float seconds;

			[Token(Token = "0x4000B34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Damageable <>4__this;

			[Token(Token = "0x170000E2")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000A6E")]
				[Address(RVA = "0xE08EB4", Offset = "0xE08EB4", VA = "0xE08EB4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000E3")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000A70")]
				[Address(RVA = "0xE08EFC", Offset = "0xE08EFC", VA = "0xE08EFC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000A6B")]
			[Address(RVA = "0xE08A44", Offset = "0xE08A44", VA = "0xE08A44")]
			[DebuggerHidden]
			public <RespawnRoutine>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x6000A6C")]
			[Address(RVA = "0xE08A94", Offset = "0xE08A94", VA = "0xE08A94", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000A6D")]
			[Address(RVA = "0xE08A98", Offset = "0xE08A98", VA = "0xE08A98", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000A6F")]
			[Address(RVA = "0xE08EBC", Offset = "0xE08EBC", VA = "0xE08EBC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Health;

		[Token(Token = "0x4000B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float _startingHealth;

		[Token(Token = "0x4000B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If specified, this GameObject will be instantiated at this transform's position on death.")]
		public GameObject SpawnOnDeath;

		[Token(Token = "0x4000B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Activate these GameObjects on Death")]
		public List<GameObject> ActivateGameObjectsOnDeath;

		[Token(Token = "0x4000B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Deactivate these GameObjects on Death")]
		public List<GameObject> DeactivateGameObjectsOnDeath;

		[Token(Token = "0x4000B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Deactivate these Colliders on Death")]
		public List<Collider> DeactivateCollidersOnDeath;

		[Token(Token = "0x4000B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Destroy this object on Death? False if need to respawn.")]
		public bool DestroyOnDeath;

		[Token(Token = "0x4000B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		[Tooltip("If this object is a Grabbable it can be dropped on Death")]
		public bool DropOnDeath;

		[Token(Token = "0x4000B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("How long to wait before destroying this objects")]
		public float DestroyDelay;

		[Token(Token = "0x4000B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("If true the object will be reactivated according to RespawnTime")]
		public bool Respawn;

		[Token(Token = "0x4000B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("If Respawn true, this gameObject will reactivate after RespawnTime. In seconds.")]
		public float RespawnTime;

		[Token(Token = "0x4000B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Remove any decals that were parented to this object on death. Useful for clearing unused decals.")]
		public bool RemoveBulletHolesOnDeath;

		[Token(Token = "0x4000B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Events")]
		[Tooltip("Optional Event to be called when receiving damage. Takes damage amount as a float parameter.")]
		public FloatEvent onDamaged;

		[Token(Token = "0x4000B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Optional Event to be called once health is <= 0")]
		public UnityEvent onDestroyed;

		[Token(Token = "0x4000B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Optional Event to be called once the object has been respawned, if Respawn is true and after RespawnTime")]
		public UnityEvent onRespawn;

		[Token(Token = "0x4000B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool destroyed;

		[Token(Token = "0x4000B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody rigid;

		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool initialWasKinematic;

		[Token(Token = "0x6000A65")]
		[Address(RVA = "0xE0812C", Offset = "0xE0812C", VA = "0xE0812C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A66")]
		[Address(RVA = "0xE081F0", Offset = "0xE081F0", VA = "0xE081F0", Slot = "4")]
		public virtual void DealDamage(float damageAmount)
		{
		}

		[Token(Token = "0x6000A67")]
		[Address(RVA = "0xE082A0", Offset = "0xE082A0", VA = "0xE082A0", Slot = "5")]
		public virtual void DealDamage(float damageAmount, [Optional] Vector3? hitPosition, [Optional] Vector3? hitNormal, bool reactToHit = true, [Optional] GameObject sender, [Optional] GameObject receiver)
		{
		}

		[Token(Token = "0x6000A68")]
		[Address(RVA = "0xE0833C", Offset = "0xE0833C", VA = "0xE0833C", Slot = "6")]
		public virtual void DestroyThis()
		{
		}

		[Token(Token = "0x6000A69")]
		[Address(RVA = "0xE089C0", Offset = "0xE089C0", VA = "0xE089C0")]
		[IteratorStateMachine(typeof(<RespawnRoutine>d__22))]
		private IEnumerator RespawnRoutine(float seconds)
		{
			return null;
		}

		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0xE08A6C", Offset = "0xE08A6C", VA = "0xE08A6C")]
		public Damageable()
		{
		}
	}
	[Token(Token = "0x20001A7")]
	public class DamageCollider : MonoBehaviour
	{
		[Token(Token = "0x4000B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Damage;

		[Token(Token = "0x4000B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Rigidbody ColliderRigidbody;

		[Token(Token = "0x4000B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float MinForce;

		[Token(Token = "0x4000B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float LastRelativeVelocity;

		[Token(Token = "0x4000B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float LastDamageForce;

		[Token(Token = "0x4000B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool TakeCollisionDamage;

		[Token(Token = "0x4000B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float CollisionDamage;

		[Token(Token = "0x4000B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Damageable thisDamageable;

		[Token(Token = "0x6000A71")]
		[Address(RVA = "0xE08F04", Offset = "0xE08F04", VA = "0xE08F04")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A72")]
		[Address(RVA = "0xE08FD4", Offset = "0xE08FD4", VA = "0xE08FD4")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000A73")]
		[Address(RVA = "0xE09018", Offset = "0xE09018", VA = "0xE09018", Slot = "4")]
		public virtual void OnCollisionEvent(Collision collision)
		{
		}

		[Token(Token = "0x6000A74")]
		[Address(RVA = "0xE092E8", Offset = "0xE092E8", VA = "0xE092E8")]
		public DamageCollider()
		{
		}
	}
	[Token(Token = "0x20001A8")]
	public class DestroyObjectWithDelay : MonoBehaviour
	{
		[Token(Token = "0x4000B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float DestroySeconds;

		[Token(Token = "0x6000A75")]
		[Address(RVA = "0xE0930C", Offset = "0xE0930C", VA = "0xE0930C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0xE09388", Offset = "0xE09388", VA = "0xE09388")]
		public DestroyObjectWithDelay()
		{
		}
	}
	[Token(Token = "0x20001A9")]
	public class FollowRigidbody : MonoBehaviour
	{
		[Token(Token = "0x4000B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform FollowTransform;

		[Token(Token = "0x4000B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Rigidbody rigid;

		[Token(Token = "0x6000A77")]
		[Address(RVA = "0xE09390", Offset = "0xE09390", VA = "0xE09390")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A78")]
		[Address(RVA = "0xE093E8", Offset = "0xE093E8", VA = "0xE093E8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000A79")]
		[Address(RVA = "0xE09428", Offset = "0xE09428", VA = "0xE09428")]
		public FollowRigidbody()
		{
		}
	}
	[Token(Token = "0x20001AA")]
	public class FollowTransform : MonoBehaviour
	{
		[Token(Token = "0x4000B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform FollowTarget;

		[Token(Token = "0x4000B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool MatchRotation;

		[Token(Token = "0x6000A7A")]
		[Address(RVA = "0xE09430", Offset = "0xE09430", VA = "0xE09430")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0xE09510", Offset = "0xE09510", VA = "0xE09510")]
		public FollowTransform()
		{
		}
	}
	[Token(Token = "0x20001AB")]
	public class GrabAction : GrabbableEvents
	{
		[Token(Token = "0x4000B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GrabberEvent OnGrabEvent;

		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Grabbable g;

		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float lastGrabTime;

		[Token(Token = "0x4000B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float minTimeBetweenGrabs;

		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0xE09520", Offset = "0xE09520", VA = "0xE09520", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6000A7D")]
		[Address(RVA = "0xE09668", Offset = "0xE09668", VA = "0xE09668")]
		public GrabAction()
		{
		}
	}
	[Token(Token = "0x20001AC")]
	public class GrabbableBezierLine : GrabbableEvents
	{
		[Token(Token = "0x4000B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool HighlightOnGrabbable;

		[Token(Token = "0x4000B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool HighlightOnRemoteGrabbable;

		[Token(Token = "0x4000B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public LineRenderer LineToDraw;

		[Token(Token = "0x4000B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int SegmentCount;

		[Token(Token = "0x4000B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float LerpAmount;

		[Token(Token = "0x4000B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float HeightAdjustment;

		[Token(Token = "0x4000B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Grabber lineToGrabber;

		[Token(Token = "0x4000B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Grabber lineRemoteGrabbing;

		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0xE0967C", Offset = "0xE0967C", VA = "0xE0967C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0xE097BC", Offset = "0xE097BC", VA = "0xE097BC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000A80")]
		[Address(RVA = "0xE09C4C", Offset = "0xE09C4C", VA = "0xE09C4C", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6000A81")]
		[Address(RVA = "0xE09C78", Offset = "0xE09C78", VA = "0xE09C78", Slot = "8")]
		public override void OnBecomesClosestGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0xE09D70", Offset = "0xE09D70", VA = "0xE09D70", Slot = "10")]
		public override void OnNoLongerClosestGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0xE09DA8", Offset = "0xE09DA8", VA = "0xE09DA8", Slot = "12")]
		public override void OnBecomesClosestRemoteGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6000A84")]
		[Address(RVA = "0xE09DE4", Offset = "0xE09DE4", VA = "0xE09DE4", Slot = "14")]
		public override void OnNoLongerClosestRemoteGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6000A85")]
		[Address(RVA = "0xE09CB4", Offset = "0xE09CB4", VA = "0xE09CB4")]
		public void HighlightItem(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6000A86")]
		[Address(RVA = "0xE09734", Offset = "0xE09734", VA = "0xE09734")]
		public void UnhighlightItem()
		{
		}

		[Token(Token = "0x6000A87")]
		[Address(RVA = "0xE09AE4", Offset = "0xE09AE4", VA = "0xE09AE4")]
		public void DrawBezierCurve(Vector3 point0, Vector3 point1, Vector3 point2, LineRenderer lineRenderer)
		{
		}

		[Token(Token = "0x6000A88")]
		[Address(RVA = "0xE09E1C", Offset = "0xE09E1C", VA = "0xE09E1C")]
		public GrabbableBezierLine()
		{
		}
	}
	[Token(Token = "0x20001AD")]
	public class GrabbableHaptics : GrabbableEvents
	{
		[Token(Token = "0x4000B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool HapticsOnValidPickup;

		[Token(Token = "0x4000B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool HapticsOnValidRemotePickup;

		[Token(Token = "0x4000B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool HapticsOnCollision;

		[Token(Token = "0x4000B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		public bool HapticsOnGrab;

		[Token(Token = "0x4000B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float VibrateFrequency;

		[Token(Token = "0x4000B53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float VibrateAmplitude;

		[Token(Token = "0x4000B54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float VibrateDuration;

		[Token(Token = "0x4000B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Grabber currentGrabber;

		[Token(Token = "0x6000A89")]
		[Address(RVA = "0xE09E3C", Offset = "0xE09E3C", VA = "0xE09E3C", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0xE09F28", Offset = "0xE09F28", VA = "0xE09F28", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x6000A8B")]
		[Address(RVA = "0xE09F34", Offset = "0xE09F34", VA = "0xE09F34", Slot = "7")]
		public override void OnBecomesClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000A8C")]
		[Address(RVA = "0xE09F44", Offset = "0xE09F44", VA = "0xE09F44", Slot = "11")]
		public override void OnBecomesClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000A8D")]
		[Address(RVA = "0xE09E8C", Offset = "0xE09E8C", VA = "0xE09E8C")]
		private void doHaptics(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000A8E")]
		[Address(RVA = "0xE09F54", Offset = "0xE09F54", VA = "0xE09F54")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000A8F")]
		[Address(RVA = "0xE0A05C", Offset = "0xE0A05C", VA = "0xE0A05C")]
		public GrabbableHaptics()
		{
		}
	}
	[Token(Token = "0x20001AE")]
	public class GrabbableHighlight : GrabbableEvents
	{
		[Token(Token = "0x4000B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool HighlightOnGrabbable;

		[Token(Token = "0x4000B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool HighlightOnRemoteGrabbable;

		[Token(Token = "0x6000A90")]
		[Address(RVA = "0xE0A084", Offset = "0xE0A084", VA = "0xE0A084", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6000A91")]
		[Address(RVA = "0xE0A08C", Offset = "0xE0A08C", VA = "0xE0A08C", Slot = "7")]
		public override void OnBecomesClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000A92")]
		[Address(RVA = "0xE0A094", Offset = "0xE0A094", VA = "0xE0A094", Slot = "9")]
		public override void OnNoLongerClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000A93")]
		[Address(RVA = "0xE0A098", Offset = "0xE0A098", VA = "0xE0A098", Slot = "11")]
		public override void OnBecomesClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000A94")]
		[Address(RVA = "0xE0A09C", Offset = "0xE0A09C", VA = "0xE0A09C", Slot = "13")]
		public override void OnNoLongerClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000A95")]
		[Address(RVA = "0xE0A090", Offset = "0xE0A090", VA = "0xE0A090")]
		public void HighlightItem()
		{
		}

		[Token(Token = "0x6000A96")]
		[Address(RVA = "0xE0A088", Offset = "0xE0A088", VA = "0xE0A088")]
		public void UnhighlightItem()
		{
		}

		[Token(Token = "0x6000A97")]
		[Address(RVA = "0xE0A0A0", Offset = "0xE0A0A0", VA = "0xE0A0A0")]
		public GrabbableHighlight()
		{
		}
	}
	[Token(Token = "0x20001AF")]
	public class GrabbableHighlightMaterial : GrabbableEvents
	{
		[Token(Token = "0x4000B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool HighlightOnGrabbable;

		[Token(Token = "0x4000B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool HighlightOnRemoteGrabbable;

		[Token(Token = "0x4000B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Materials to assign to Renderer when not being highlighted. ")]
		public List<Material> StandardMaterials;

		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Materials to assign to Renderer when being highlighted")]
		public List<Material> HighlightMaterials;

		[Token(Token = "0x4000B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Renderer Renderer;

		[Token(Token = "0x6000A98")]
		[Address(RVA = "0xE0A0B0", Offset = "0xE0A0B0", VA = "0xE0A0B0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A99")]
		[Address(RVA = "0xE0A2B0", Offset = "0xE0A2B0", VA = "0xE0A2B0", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6000A9A")]
		[Address(RVA = "0xE0A364", Offset = "0xE0A364", VA = "0xE0A364", Slot = "7")]
		public override void OnBecomesClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0xE0A424", Offset = "0xE0A424", VA = "0xE0A424", Slot = "9")]
		public override void OnNoLongerClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0xE0A434", Offset = "0xE0A434", VA = "0xE0A434", Slot = "11")]
		public override void OnBecomesClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0xE0A444", Offset = "0xE0A444", VA = "0xE0A444", Slot = "13")]
		public override void OnNoLongerClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0xE0A374", Offset = "0xE0A374", VA = "0xE0A374")]
		public void HighlightItem()
		{
		}

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0xE0A2B4", Offset = "0xE0A2B4", VA = "0xE0A2B4")]
		public void UnhighlightItem()
		{
		}

		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0xE0A454", Offset = "0xE0A454", VA = "0xE0A454")]
		public GrabbableHighlightMaterial()
		{
		}
	}
	[Token(Token = "0x20001B0")]
	public class GrabbableRingHelper : GrabbableEvents
	{
		[Token(Token = "0x4000B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool RingOnValidPickup;

		[Token(Token = "0x4000B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool RingOnValidRemotePickup;

		[Token(Token = "0x4000B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float RingHelperScale;

		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0xE0A464", Offset = "0xE0A464", VA = "0xE0A464")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0xE0A7D8", Offset = "0xE0A7D8", VA = "0xE0A7D8")]
		public GrabbableRingHelper()
		{
		}
	}
	[Token(Token = "0x20001B1")]
	public class GrabPointTrigger : MonoBehaviour
	{
		[Token(Token = "0x20001B2")]
		public enum HandMovement
		{
			[Token(Token = "0x4000B6C")]
			Instant,
			[Token(Token = "0x4000B6D")]
			Lerp,
			[Token(Token = "0x4000B6E")]
			None
		}

		[Token(Token = "0x4000B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("How to move the hand to the nearest grab point. If set to 'None', the hand model will remain at the controller.")]
		[Header("Hand Movement")]
		public HandMovement MoveInStyle;

		[Token(Token = "0x4000B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("How to move the hand back to the grabber")]
		public HandMovement MoveOutStyle;

		[Token(Token = "0x4000B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("How to fast to move the hand if MovementStyle = 'Lerp' or 'Linear'")]
		public float HandSpeed;

		[Token(Token = "0x4000B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("If true the hand model will continue to move towards the closest grab point. If false, the hand will only move towards the closest grab point once upon entering the trigger.")]
		public bool LiveUpdateNearestGrabPoint;

		[Token(Token = "0x4000B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Grabbable Options")]
		[Tooltip("If specified this Grabbable will be grabbed if the user holds down the grab button while this preview is active")]
		public Grabbable GrabObject;

		[Token(Token = "0x4000B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("If specified this Grabbable must be held for this component to work")]
		public Grabbable OtherGrabbableMustBeHeld;

		[Token(Token = "0x4000B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Grab Points to move towards when the grabber is within the Trigger area.")]
		public List<GrabPoint> GrabPoints;

		[Token(Token = "0x4000B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Grabber currentGrabber;

		[Token(Token = "0x4000B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Grabbable dummyGrabbable;

		[Token(Token = "0x4000B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GrabPoint closestPoint;

		[Token(Token = "0x4000B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Grabber grabberInTrigger;

		[Token(Token = "0x6000AA3")]
		[Address(RVA = "0xE0A7F4", Offset = "0xE0A7F4", VA = "0xE0A7F4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AA4")]
		[Address(RVA = "0xE0AB50", Offset = "0xE0AB50", VA = "0xE0AB50")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AA5")]
		[Address(RVA = "0xE0AFFC", Offset = "0xE0AFFC", VA = "0xE0AFFC", Slot = "4")]
		public virtual void UpdateGrabPoint(GrabPoint newPoint)
		{
		}

		[Token(Token = "0x6000AA6")]
		[Address(RVA = "0xE0B19C", Offset = "0xE0B19C", VA = "0xE0B19C")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0xE0B408", Offset = "0xE0B408", VA = "0xE0B408")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0xE0AF9C", Offset = "0xE0AF9C", VA = "0xE0AF9C")]
		private void setGrabber(Grabber theGrabber)
		{
		}

		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0xE0B54C", Offset = "0xE0B54C", VA = "0xE0B54C", Slot = "5")]
		public virtual void ReleaseGrabber()
		{
		}

		[Token(Token = "0x6000AAA")]
		[Address(RVA = "0xE0B62C", Offset = "0xE0B62C", VA = "0xE0B62C")]
		public GrabPointTrigger()
		{
		}
	}
	[Token(Token = "0x20001B3")]
	public class LineToTransform : MonoBehaviour
	{
		[Token(Token = "0x4000B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform ConnectTo;

		[Token(Token = "0x4000B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LineRenderer line;

		[Token(Token = "0x6000AAB")]
		[Address(RVA = "0xE0B644", Offset = "0xE0B644", VA = "0xE0B644")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AAC")]
		[Address(RVA = "0xE0B648", Offset = "0xE0B648", VA = "0xE0B648")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000AAD")]
		[Address(RVA = "0xE0B64C", Offset = "0xE0B64C", VA = "0xE0B64C")]
		public void UpdateLine()
		{
		}

		[Token(Token = "0x6000AAE")]
		[Address(RVA = "0xE0B800", Offset = "0xE0B800", VA = "0xE0B800")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000AAF")]
		[Address(RVA = "0xE0B804", Offset = "0xE0B804", VA = "0xE0B804")]
		public LineToTransform()
		{
		}
	}
	[Token(Token = "0x20001B4")]
	public class LookAtTransform : MonoBehaviour
	{
		[Token(Token = "0x4000B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform LookAt;

		[Token(Token = "0x4000B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool UseLerp;

		[Token(Token = "0x4000B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float Speed;

		[Token(Token = "0x4000B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool UseUpdate;

		[Token(Token = "0x4000B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool UseLateUpdate;

		[Token(Token = "0x6000AB0")]
		[Address(RVA = "0xE0B80C", Offset = "0xE0B80C", VA = "0xE0B80C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0xE0BA0C", Offset = "0xE0BA0C", VA = "0xE0BA0C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0xE0B81C", Offset = "0xE0B81C", VA = "0xE0B81C")]
		private void lookAt()
		{
		}

		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0xE0BA1C", Offset = "0xE0BA1C", VA = "0xE0BA1C")]
		public LookAtTransform()
		{
		}
	}
	[Token(Token = "0x20001B5")]
	public class PlaySoundOnGrab : GrabbableEvents
	{
		[Token(Token = "0x4000B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioClip SoundToPlay;

		[Token(Token = "0x6000AB4")]
		[Address(RVA = "0xE0BA38", Offset = "0xE0BA38", VA = "0xE0BA38", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6000AB5")]
		[Address(RVA = "0xE0BB00", Offset = "0xE0BB00", VA = "0xE0BB00")]
		public PlaySoundOnGrab()
		{
		}
	}
	[Token(Token = "0x20001B6")]
	public class PunctureCollider : MonoBehaviour
	{
		[Token(Token = "0x4000B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Minimum distance (in meters) an object must be attached once punctured. Upon initial puncture the object will be inserted this distance from the puncture point.")]
		[Header("Puncture properties : ")]
		public float FRequiredPenetrationForce;

		[Token(Token = "0x4000B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Minimum distance (in meters) an object must be attached once punctured. Upon initial puncture the object will be inserted this distance from the puncture point.")]
		public float MinPenetration;

		[Token(Token = "0x4000B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Minimum distance the object can be penetrated (in meters).")]
		public float MaxPenetration;

		[Token(Token = "0x4000B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("How far away the object must be from it's entry point to consider breaking the joint. Set to 0 if you do not want to break the joint based on distance.")]
		public float BreakDistance;

		[Token(Token = "0x4000B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("How far away the object must be from it's entry point to consider breaking the joint. Set to 0 if you do not want to break the joint based on distance.")]
		public List<Collider> PunctureColliders;

		[Token(Token = "0x4000B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Shown for Debug : ")]
		[Tooltip("Is the object currently embedded in another object?")]
		public bool HasPunctured;

		[Token(Token = "0x4000B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The object currently embedded in")]
		public GameObject PuncturedObject;

		[Token(Token = "0x4000B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("How far (in meters) our object has been embedded into")]
		public float PunctureValue;

		[Token(Token = "0x4000B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float previousPunctureValue;

		[Token(Token = "0x4000B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Collider col;

		[Token(Token = "0x4000B81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Collider hitCollilder;

		[Token(Token = "0x4000B82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Collider[] ignoreColliders;

		[Token(Token = "0x4000B83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody rigid;

		[Token(Token = "0x4000B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject jointHelper;

		[Token(Token = "0x4000B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody jointHelperRigid;

		[Token(Token = "0x4000B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private ConfigurableJoint jointHelperJoint;

		[Token(Token = "0x4000B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Grabbable thisGrabbable;

		[Token(Token = "0x4000B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private FixedJoint fj;

		[Token(Token = "0x4000B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float yPuncture;

		[Token(Token = "0x4000B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float yPunctureMin;

		[Token(Token = "0x4000B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float yPunctureMax;

		[Token(Token = "0x4000B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float TargetDistance;

		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0xE0BB08", Offset = "0xE0BB08", VA = "0xE0BB08")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AB7")]
		[Address(RVA = "0xE0BBE8", Offset = "0xE0BBE8", VA = "0xE0BBE8")]
		public void FixedUpdate()
		{
		}

		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0xE0BD5C", Offset = "0xE0BD5C", VA = "0xE0BD5C", Slot = "4")]
		public virtual void UpdatePunctureValue()
		{
		}

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0xE0BEF8", Offset = "0xE0BEF8", VA = "0xE0BEF8", Slot = "5")]
		public virtual void MovePunctureUp()
		{
		}

		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0xE0BFA8", Offset = "0xE0BFA8", VA = "0xE0BFA8", Slot = "6")]
		public virtual void MovePunctureDown()
		{
		}

		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0xE0C058", Offset = "0xE0C058", VA = "0xE0C058", Slot = "7")]
		public virtual void CheckBreakDistance()
		{
		}

		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0xE0C2E0", Offset = "0xE0C2E0", VA = "0xE0C2E0", Slot = "8")]
		public virtual void CheckPunctureRelease()
		{
		}

		[Token(Token = "0x6000ABD")]
		[Address(RVA = "0xE0C388", Offset = "0xE0C388", VA = "0xE0C388", Slot = "9")]
		public virtual void AdjustJointMass()
		{
		}

		[Token(Token = "0x6000ABE")]
		[Address(RVA = "0xE0C48C", Offset = "0xE0C48C", VA = "0xE0C48C", Slot = "10")]
		public virtual void ApplyResistanceForce()
		{
		}

		[Token(Token = "0x6000ABF")]
		[Address(RVA = "0xE0C588", Offset = "0xE0C588", VA = "0xE0C588", Slot = "11")]
		public virtual void DoPuncture(Collider colliderHit, Vector3 connectPosition)
		{
		}

		[Token(Token = "0x6000AC0")]
		[Address(RVA = "0xE0C98C", Offset = "0xE0C98C", VA = "0xE0C98C")]
		public void SetPenetration(float penetrationAmount)
		{
		}

		[Token(Token = "0x6000AC1")]
		[Address(RVA = "0xE0C11C", Offset = "0xE0C11C", VA = "0xE0C11C")]
		public void ReleasePuncture()
		{
		}

		[Token(Token = "0x6000AC2")]
		[Address(RVA = "0xE0CA94", Offset = "0xE0CA94", VA = "0xE0CA94", Slot = "12")]
		public virtual bool CanPunctureObject(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x6000AC3")]
		[Address(RVA = "0xE0CB58", Offset = "0xE0CB58", VA = "0xE0CB58")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000AC4")]
		[Address(RVA = "0xE0CD34", Offset = "0xE0CD34", VA = "0xE0CD34")]
		public PunctureCollider()
		{
		}
	}
	[Token(Token = "0x20001B7")]
	public class ReturnToSnapZone : MonoBehaviour
	{
		[Token(Token = "0x4000B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The SnapZone to return to if not being held")]
		public SnapZone ReturnTo;

		[Token(Token = "0x4000B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("How fast to Lerp Towards the SnapZone")]
		public float LerpSpeed;

		[Token(Token = "0x4000B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("How long to wait before starting to Lerp the object back towards the SnapZone. In Seconds.")]
		public float ReturnDelay;

		[Token(Token = "0x4000B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float currentDelay;

		[Token(Token = "0x4000B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Grabbable grab;

		[Token(Token = "0x4000B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody rigid;

		[Token(Token = "0x4000B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool useGravityInitial;

		[Token(Token = "0x4000B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Initiate snap if distance between the Grabbable and SnapZone is <= SnapDistance")]
		public float SnapDistance;

		[Token(Token = "0x6000AC5")]
		[Address(RVA = "0xE0CD48", Offset = "0xE0CD48", VA = "0xE0CD48")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AC6")]
		[Address(RVA = "0xE0CDFC", Offset = "0xE0CDFC", VA = "0xE0CDFC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AC7")]
		[Address(RVA = "0xE0CF20", Offset = "0xE0CF20", VA = "0xE0CF20")]
		private void moveToSnapZone()
		{
		}

		[Token(Token = "0x6000AC8")]
		[Address(RVA = "0xE0D1BC", Offset = "0xE0D1BC", VA = "0xE0D1BC")]
		public ReturnToSnapZone()
		{
		}
	}
	[Token(Token = "0x20001B8")]
	public class RotateTowards : MonoBehaviour
	{
		[Token(Token = "0x4000B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform TargetTransform;

		[Token(Token = "0x6000AC9")]
		[Address(RVA = "0xE0D1DC", Offset = "0xE0D1DC", VA = "0xE0D1DC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000ACA")]
		[Address(RVA = "0xE0D2C4", Offset = "0xE0D2C4", VA = "0xE0D2C4")]
		public RotateTowards()
		{
		}
	}
	[Token(Token = "0x20001B9")]
	public class RotateWithHMD : MonoBehaviour
	{
		[Token(Token = "0x4000B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Transform to rotate along with")]
		public Transform FollowTransform;

		[Token(Token = "0x4000B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The Character Capsule to  rotate along with")]
		public CharacterController Character;

		[Token(Token = "0x4000B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 Offset;

		[Token(Token = "0x4000B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float RotateSpeed;

		[Token(Token = "0x4000B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float MovementSmoothing;

		[Token(Token = "0x4000B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 velocity;

		[Token(Token = "0x4000B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("If true this transform will be parented to the characterController. Set this to true if you want the position and rotation to align with the character controller without delay.")]
		public bool ParentToCharacter;

		[Token(Token = "0x4000B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform originalParent;

		[Token(Token = "0x4000B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform followTransform;

		[Token(Token = "0x4000B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform camTransform;

		[Token(Token = "0x6000ACB")]
		[Address(RVA = "0xE0D2CC", Offset = "0xE0D2CC", VA = "0xE0D2CC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000ACC")]
		[Address(RVA = "0xE0D4D8", Offset = "0xE0D4D8", VA = "0xE0D4D8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000ACD")]
		[Address(RVA = "0xE0D4DC", Offset = "0xE0D4DC", VA = "0xE0D4DC")]
		private void UpdatePosition()
		{
		}

		[Token(Token = "0x6000ACE")]
		[Address(RVA = "0xE0D8E4", Offset = "0xE0D8E4", VA = "0xE0D8E4")]
		public RotateWithHMD()
		{
		}
	}
	[Token(Token = "0x20001BA")]
	public class ScaleBetweenPoints : MonoBehaviour
	{
		[Token(Token = "0x4000BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform Begin;

		[Token(Token = "0x4000BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform End;

		[Token(Token = "0x4000BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool DoUpdate;

		[Token(Token = "0x4000BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool DoLateUpdate;

		[Token(Token = "0x4000BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool LookAtTarget;

		[Token(Token = "0x6000ACF")]
		[Address(RVA = "0xE0D950", Offset = "0xE0D950", VA = "0xE0D950")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AD0")]
		[Address(RVA = "0xE0DB54", Offset = "0xE0DB54", VA = "0xE0DB54")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000AD1")]
		[Address(RVA = "0xE0D960", Offset = "0xE0D960", VA = "0xE0D960")]
		private void doScale()
		{
		}

		[Token(Token = "0x6000AD2")]
		[Address(RVA = "0xE0DB64", Offset = "0xE0DB64", VA = "0xE0DB64")]
		public ScaleBetweenPoints()
		{
		}
	}
	[Token(Token = "0x20001BB")]
	public class ScreenFader : MonoBehaviour
	{
		[Token(Token = "0x20001BC")]
		[CompilerGenerated]
		private sealed class <fadeOutWithDelay>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000BB1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000BB2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000BB3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delaySeconds;

			[Token(Token = "0x4000BB4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ScreenFader <>4__this;

			[Token(Token = "0x170000E4")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000AE2")]
				[Address(RVA = "0xE0E76C", Offset = "0xE0E76C", VA = "0xE0E76C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000E5")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000AE4")]
				[Address(RVA = "0xE0E7B4", Offset = "0xE0E7B4", VA = "0xE0E7B4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000ADF")]
			[Address(RVA = "0xE0E220", Offset = "0xE0E220", VA = "0xE0E220")]
			[DebuggerHidden]
			public <fadeOutWithDelay>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x6000AE0")]
			[Address(RVA = "0xE0E6A8", Offset = "0xE0E6A8", VA = "0xE0E6A8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000AE1")]
			[Address(RVA = "0xE0E6AC", Offset = "0xE0E6AC", VA = "0xE0E6AC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000AE3")]
			[Address(RVA = "0xE0E774", Offset = "0xE0E774", VA = "0xE0E774", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001BD")]
		[CompilerGenerated]
		private sealed class <doFade>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000BB5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000BB6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000BB7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float alphaFrom;

			[Token(Token = "0x4000BB8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ScreenFader <>4__this;

			[Token(Token = "0x4000BB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float alphaTo;

			[Token(Token = "0x4000BBA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <alpha>5__2;

			[Token(Token = "0x170000E6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000AE8")]
				[Address(RVA = "0xE0E968", Offset = "0xE0E968", VA = "0xE0E968", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170000E7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000AEA")]
				[Address(RVA = "0xE0E9B0", Offset = "0xE0E9B0", VA = "0xE0E9B0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000AE5")]
			[Address(RVA = "0xE0E4E0", Offset = "0xE0E4E0", VA = "0xE0E4E0")]
			[DebuggerHidden]
			public <doFade>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x6000AE6")]
			[Address(RVA = "0xE0E7BC", Offset = "0xE0E7BC", VA = "0xE0E7BC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000AE7")]
			[Address(RVA = "0xE0E7C0", Offset = "0xE0E7C0", VA = "0xE0E7C0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000AE9")]
			[Address(RVA = "0xE0E970", Offset = "0xE0E970", VA = "0xE0E970", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Should the screen fade in when a new level is loaded")]
		public bool FadeOnSceneLoaded;

		[Token(Token = "0x4000BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Color of the fade. Alpha will be modified when fading in / out")]
		public Color FadeColor;

		[Token(Token = "0x4000BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("How fast to fade in / out")]
		public float FadeInSpeed;

		[Token(Token = "0x4000BA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float FadeOutSpeed;

		[Token(Token = "0x4000BA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Wait X seconds before fading scene in")]
		public float SceneFadeInDelay;

		[Token(Token = "0x4000BAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject fadeObject;

		[Token(Token = "0x4000BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RectTransform fadeObjectRect;

		[Token(Token = "0x4000BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Canvas fadeCanvas;

		[Token(Token = "0x4000BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CanvasGroup canvasGroup;

		[Token(Token = "0x4000BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Image fadeImage;

		[Token(Token = "0x4000BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private IEnumerator fadeRoutine;

		[Token(Token = "0x4000BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private string faderName;

		[Token(Token = "0x6000AD3")]
		[Address(RVA = "0xE0DB74", Offset = "0xE0DB74", VA = "0xE0DB74")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000AD4")]
		[Address(RVA = "0xE0DB80", Offset = "0xE0DB80", VA = "0xE0DB80", Slot = "4")]
		protected virtual void initialize()
		{
		}

		[Token(Token = "0x6000AD5")]
		[Address(RVA = "0xE0DFAC", Offset = "0xE0DFAC", VA = "0xE0DFAC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000AD6")]
		[Address(RVA = "0xE0E050", Offset = "0xE0E050", VA = "0xE0E050")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000AD7")]
		[Address(RVA = "0xE0E0F4", Offset = "0xE0E0F4", VA = "0xE0E0F4")]
		private void OnSceneLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x6000AD8")]
		[Address(RVA = "0xE0E19C", Offset = "0xE0E19C", VA = "0xE0E19C")]
		[IteratorStateMachine(typeof(<fadeOutWithDelay>d__17))]
		private IEnumerator fadeOutWithDelay(float delaySeconds)
		{
			return null;
		}

		[Token(Token = "0x6000AD9")]
		[Address(RVA = "0xE0E248", Offset = "0xE0E248", VA = "0xE0E248", Slot = "5")]
		public virtual void DoFadeIn()
		{
		}

		[Token(Token = "0x6000ADA")]
		[Address(RVA = "0xE0E39C", Offset = "0xE0E39C", VA = "0xE0E39C", Slot = "6")]
		public virtual void DoFadeOut()
		{
		}

		[Token(Token = "0x6000ADB")]
		[Address(RVA = "0xE0E408", Offset = "0xE0E408", VA = "0xE0E408", Slot = "7")]
		public virtual void SetFadeLevel(float fadeLevel)
		{
		}

		[Token(Token = "0x6000ADC")]
		[Address(RVA = "0xE0E310", Offset = "0xE0E310", VA = "0xE0E310")]
		[IteratorStateMachine(typeof(<doFade>d__21))]
		private IEnumerator doFade(float alphaFrom, float alphaTo)
		{
			return null;
		}

		[Token(Token = "0x6000ADD")]
		[Address(RVA = "0xE0E508", Offset = "0xE0E508", VA = "0xE0E508", Slot = "8")]
		protected virtual void updateImageAlpha(float alphaValue)
		{
		}

		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0xE0E628", Offset = "0xE0E628", VA = "0xE0E628")]
		public ScreenFader()
		{
		}
	}
	[Token(Token = "0x20001BE")]
	public class SnapZoneRingHelper : MonoBehaviour
	{
		[Token(Token = "0x4000BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SnapZone Snap;

		[Token(Token = "0x4000BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color RestingColor;

		[Token(Token = "0x4000BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color ValidSnapColor;

		[Token(Token = "0x4000BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float RestingScale;

		[Token(Token = "0x4000BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float ValidSnapScale;

		[Token(Token = "0x4000BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CanvasScaler ringCanvas;

		[Token(Token = "0x4000BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Text ringText;

		[Token(Token = "0x4000BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GrabbablesInTrigger nearbyGrabbables;

		[Token(Token = "0x4000BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool validSnap;

		[Token(Token = "0x4000BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float ScaleSpeed;

		[Token(Token = "0x6000AEB")]
		[Address(RVA = "0xE0E9B8", Offset = "0xE0E9B8", VA = "0xE0E9B8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AEC")]
		[Address(RVA = "0xE0EA84", Offset = "0xE0EA84", VA = "0xE0EA84")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AED")]
		[Address(RVA = "0xE0EB58", Offset = "0xE0EB58", VA = "0xE0EB58")]
		private bool checkIsValidSnap()
		{
			return default(bool);
		}

		[Token(Token = "0x6000AEE")]
		[Address(RVA = "0xE0EC30", Offset = "0xE0EC30", VA = "0xE0EC30")]
		public SnapZoneRingHelper()
		{
		}
	}
	[Token(Token = "0x20001BF")]
	public class Tooltip : MonoBehaviour
	{
		[Token(Token = "0x4000BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 TipOffset;

		[Token(Token = "0x4000BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool UseWorldYAxis;

		[Token(Token = "0x4000BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float MaxViewDistance;

		[Token(Token = "0x4000BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform childTransform;

		[Token(Token = "0x4000BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform DrawLineTo;

		[Token(Token = "0x4000BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private LineToTransform lineTo;

		[Token(Token = "0x4000BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform lookAt;

		[Token(Token = "0x6000AEF")]
		[Address(RVA = "0xE0EC5C", Offset = "0xE0EC5C", VA = "0xE0EC5C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AF0")]
		[Address(RVA = "0xE0ED98", Offset = "0xE0ED98", VA = "0xE0ED98")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AF1")]
		[Address(RVA = "0xE0EDA4", Offset = "0xE0EDA4", VA = "0xE0EDA4", Slot = "4")]
		public virtual void UpdateTooltipPosition()
		{
		}

		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0xE0F0EC", Offset = "0xE0F0EC", VA = "0xE0F0EC")]
		public Tooltip()
		{
		}
	}
	[Token(Token = "0x20001C0")]
	public class VelocityTracker : MonoBehaviour
	{
		[Token(Token = "0x20001C1")]
		public enum VelocityTrackingType
		{
			[Token(Token = "0x4000BD9")]
			Device,
			[Token(Token = "0x4000BDA")]
			PerFrame
		}

		[Token(Token = "0x4000BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("This setting determines how retrieve the velocity. If 'Device' is selected and ControllerHand is specified, then velocity will be retrieved from the connected physical controller. Otherwise velocity is calculated on a per frame basis.")]
		public VelocityTrackingType trackingType;

		[Token(Token = "0x4000BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If ControllerHand is specified as Left or Right then velocity will attempt to be retrieved from the physical controller. If None, velocity will be calculated per frame.")]
		public ControllerHand controllerHand;

		[Token(Token = "0x4000BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("How many frames to use when averaging retrieving velocity using GetAveragedVelocity / GetAveragedAngularVelocity")]
		public float AverageVelocityCount;

		[Token(Token = "0x4000BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 _velocity;

		[Token(Token = "0x4000BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 _angularVelocity;

		[Token(Token = "0x4000BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 _lastPosition;

		[Token(Token = "0x4000BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Quaternion _lastRotation;

		[Token(Token = "0x4000BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<Vector3> previousVelocities;

		[Token(Token = "0x4000BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<Vector3> previousAngularVelocities;

		[Token(Token = "0x4000BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float angle;

		[Token(Token = "0x4000BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 axis;

		[Token(Token = "0x4000BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public GameObject playSpace;

		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0xE0F114", Offset = "0xE0F114", VA = "0xE0F114")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AF4")]
		[Address(RVA = "0xE0F16C", Offset = "0xE0F16C", VA = "0xE0F16C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000AF5")]
		[Address(RVA = "0xE0F1CC", Offset = "0xE0F1CC", VA = "0xE0F1CC", Slot = "4")]
		public virtual void UpdateVelocities()
		{
		}

		[Token(Token = "0x6000AF6")]
		[Address(RVA = "0xE0F1F4", Offset = "0xE0F1F4", VA = "0xE0F1F4", Slot = "5")]
		public virtual void UpdateVelocity()
		{
		}

		[Token(Token = "0x6000AF7")]
		[Address(RVA = "0xE0F350", Offset = "0xE0F350", VA = "0xE0F350", Slot = "6")]
		public virtual void UpdateAngularVelocity()
		{
		}

		[Token(Token = "0x6000AF8")]
		[Address(RVA = "0xE0F57C", Offset = "0xE0F57C", VA = "0xE0F57C", Slot = "7")]
		public virtual Vector3 GetVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AF9")]
		[Address(RVA = "0xE0F708", Offset = "0xE0F708", VA = "0xE0F708", Slot = "8")]
		public virtual Vector3 GetAveragedVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AFA")]
		[Address(RVA = "0xE0F718", Offset = "0xE0F718", VA = "0xE0F718", Slot = "9")]
		public virtual Vector3 GetAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AFB")]
		[Address(RVA = "0xE0F724", Offset = "0xE0F724", VA = "0xE0F724", Slot = "10")]
		public virtual Vector3 GetAveragedAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AFC")]
		[Address(RVA = "0xE0F734", Offset = "0xE0F734", VA = "0xE0F734", Slot = "11")]
		public virtual Vector3 GetAveragedVector(List<Vector3> vectors)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AFD")]
		[Address(RVA = "0xE0F83C", Offset = "0xE0F83C", VA = "0xE0F83C")]
		public VelocityTracker()
		{
		}
	}
	[Token(Token = "0x20001C2")]
	public class ArmSwingLocomotion : MonoBehaviour
	{
		[Token(Token = "0x4000BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("This is used to move the character. Will be disabled on Start")]
		public CharacterController characterController;

		[Token(Token = "0x4000BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Speed = Hand Controller Speed * SpeedModifier")]
		public float SpeedModifier;

		[Token(Token = "0x4000BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Direction to move player. Will default to this transform if none provided")]
		public Transform ForwardDirection;

		[Token(Token = "0x4000BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Minimum Velocity to allow movement. Increase this to avoid unwanted movement at slow speeds")]
		public float MinInput;

		[Token(Token = "0x4000BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool MustBeHoldingLeftTrigger;

		[Token(Token = "0x4000BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool MustBeHoldingRightTrigger;

		[Token(Token = "0x4000BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
		public bool MustBeHoldingLeftGrip;

		[Token(Token = "0x4000BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
		public bool MustBeHoldingRightGrip;

		[Token(Token = "0x4000BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float leftVelocity;

		[Token(Token = "0x4000BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float rightVelocity;

		[Token(Token = "0x170000E8")]
		public float VelocitySum
		{
			[Token(Token = "0x6000AFE")]
			[Address(RVA = "0xE0F900", Offset = "0xE0F900", VA = "0xE0F900")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0xE0F90C", Offset = "0xE0F90C", VA = "0xE0F90C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B00")]
		[Address(RVA = "0xE0FA04", Offset = "0xE0FA04", VA = "0xE0FA04")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B01")]
		[Address(RVA = "0xE0FBB4", Offset = "0xE0FBB4", VA = "0xE0FBB4", Slot = "4")]
		public virtual void UpdateMovement()
		{
		}

		[Token(Token = "0x6000B02")]
		[Address(RVA = "0xE0FA24", Offset = "0xE0FA24", VA = "0xE0FA24")]
		public void UpdateVelocities()
		{
		}

		[Token(Token = "0x6000B03")]
		[Address(RVA = "0xE0FCC8", Offset = "0xE0FCC8", VA = "0xE0FCC8", Slot = "5")]
		public virtual bool LeftInputReady()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0xE0FD84", Offset = "0xE0FD84", VA = "0xE0FD84", Slot = "6")]
		public virtual bool RightInputReady()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0xE0FE40", Offset = "0xE0FE40", VA = "0xE0FE40")]
		public ArmSwingLocomotion()
		{
		}
	}
	[Token(Token = "0x20001C3")]
	public enum LocomotionType
	{
		[Token(Token = "0x4000BE6")]
		Teleport,
		[Token(Token = "0x4000BE7")]
		SmoothLocomotion,
		[Token(Token = "0x4000BE8")]
		None
	}
	[Token(Token = "0x20001C4")]
	public class BNGPlayerController : MonoBehaviour
	{
		[Token(Token = "0x4000BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If true the CharacterController will move along with the HMD, as long as there are no obstacle's in the way")]
		[Header("Camera Options : ")]
		public bool MoveCharacterWithCamera;

		[Token(Token = "0x4000BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Tooltip("If true the CharacterController will rotate it's Y angle to match the HMD's Y angle")]
		public bool RotateCharacterWithCamera;

		[Token(Token = "0x4000BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[Tooltip("If true the CharacterController will resize to match the calculated player height (distance from floor to camera)")]
		public bool ResizeCharacterHeightWithCamera;

		[Token(Token = "0x4000BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Transform Setup ")]
		[Tooltip("The TrackingSpace represents your tracking space origin.")]
		public Transform TrackingSpace;

		[Token(Token = "0x4000BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The CameraRig is a Transform that is used to offset the main camera. The main camera should be parented to this.")]
		public Transform CameraRig;

		[Token(Token = "0x4000BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The CenterEyeAnchor is typically the Transform that contains your Main Camera")]
		public Transform CenterEyeAnchor;

		[Token(Token = "0x4000BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Ground checks : ")]
		[Tooltip("Raycast against these layers to check if player is grounded")]
		public LayerMask GroundedLayers;

		[Token(Token = "0x4000BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("How far off the ground the player currently is. 0 = Grounded, 1 = 1 Meter in the air.")]
		public float DistanceFromGround;

		[Token(Token = "0x4000BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("DistanceFromGround will subtract this value when determining distance from ground")]
		public float DistanceFromGroundOffset;

		[Token(Token = "0x4000BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Minimum Height our Player's capsule collider can be (in meters)")]
		[Header("Player Capsule Settings : ")]
		public float MinimumCapsuleHeight;

		[Token(Token = "0x4000BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Maximum Height our Player's capsule collider can be (in meters)")]
		public float MaximumCapsuleHeight;

		[Token(Token = "0x4000BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[HideInInspector]
		public float LastTeleportTime;

		[Token(Token = "0x4000BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Offset the height of the CharacterController by this amount")]
		[Header("Player Y Offset : ")]
		public float CharacterControllerYOffset;

		[Token(Token = "0x4000BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[HideInInspector]
		public float CameraHeight;

		[Token(Token = "0x4000BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("If true the Camera will be offset by ElevateCameraHeight if no HMD is active or connected. This prevents the camera from falling to the floor and can allow you to use keyboard controls.")]
		[Header("Misc : ")]
		public bool ElevateCameraIfNoHMDPresent;

		[Token(Token = "0x4000BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("How high (in meters) to elevate the player camera if no HMD is present and ElevateCameraIfNoHMDPresent is true. 1.65 = about 5.4' tall. ")]
		public float ElevateCameraHeight;

		[Token(Token = "0x4000BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Minimum Y position our player is allowed to go. Useful for floating point precision and making sure player didn't fall through the map.")]
		public float MinElevation;

		[Token(Token = "0x4000BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float MaxElevation;

		[Token(Token = "0x4000BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public float LastPlayerMoveTime;

		[Token(Token = "0x4000BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected CharacterController characterController;

		[Token(Token = "0x4000BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Rigidbody playerRigid;

		[Token(Token = "0x4000BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected CapsuleCollider playerCapsule;

		[Token(Token = "0x4000BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x4000C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected PlayerClimbing playerClimbing;

		[Token(Token = "0x4000C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected bool isClimbing;

		[Token(Token = "0x4000C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		protected bool wasClimbing;

		[Token(Token = "0x4000C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public RaycastHit groundHit;

		[Token(Token = "0x4000C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected RaycastHit hit;

		[Token(Token = "0x4000C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected Transform mainCamera;

		[Token(Token = "0x4000C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Vector3 _initialPosition;

		[Token(Token = "0x4000C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public float SphereColliderRadius;

		[Token(Token = "0x4000C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Vector3 moveTest;

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0xE0FE64", Offset = "0xE0FE64", VA = "0xE0FE64")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B07")]
		[Address(RVA = "0xE10078", Offset = "0xE10078", VA = "0xE10078")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0xE10328", Offset = "0xE10328", VA = "0xE10328")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0xE10350", Offset = "0xE10350", VA = "0xE10350", Slot = "4")]
		public virtual void CheckPlayerElevationRespawn()
		{
		}

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0xE10560", Offset = "0xE10560", VA = "0xE10560", Slot = "5")]
		public virtual void UpdateDistanceFromGround()
		{
		}

		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0xE10BC8", Offset = "0xE10BC8", VA = "0xE10BC8", Slot = "6")]
		public virtual void RotateTrackingSpaceToCamera()
		{
		}

		[Token(Token = "0x6000B0C")]
		[Address(RVA = "0xE10D88", Offset = "0xE10D88", VA = "0xE10D88", Slot = "7")]
		public virtual void UpdateCameraRigPosition()
		{
		}

		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0xE10F74", Offset = "0xE10F74", VA = "0xE10F74", Slot = "8")]
		public virtual void UpdateCharacterHeight()
		{
		}

		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0xE11214", Offset = "0xE11214", VA = "0xE11214", Slot = "9")]
		public virtual void UpdateCameraHeight()
		{
		}

		[Token(Token = "0x6000B0F")]
		[Address(RVA = "0xE11290", Offset = "0xE11290", VA = "0xE11290", Slot = "10")]
		public virtual void CheckCharacterCollisionMove()
		{
		}

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0xE1151C", Offset = "0xE1151C", VA = "0xE1151C", Slot = "11")]
		public virtual void CheckRigidbodyCapsuleMove(Vector3 movePosition)
		{
		}

		[Token(Token = "0x6000B11")]
		[Address(RVA = "0xE11688", Offset = "0xE11688", VA = "0xE11688", Slot = "12")]
		public virtual bool IsGrounded()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B12")]
		[Address(RVA = "0xE11724", Offset = "0xE11724", VA = "0xE11724", Slot = "13")]
		public virtual void OnClimbingChange()
		{
		}

		[Token(Token = "0x6000B13")]
		[Address(RVA = "0xE11744", Offset = "0xE11744", VA = "0xE11744")]
		public BNGPlayerController()
		{
		}
	}
	[Token(Token = "0x20001C5")]
	public class Button : MonoBehaviour
	{
		[Token(Token = "0x4000C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Local Y position of the button when it is pushed all the way down. Local Y position will never be less than this.")]
		public float MinLocalY;

		[Token(Token = "0x4000C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The Local Y position of the button when it is not being pushed. Local Y position will never be greater than this.")]
		public float MaxLocalY;

		[Token(Token = "0x4000C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("How far away from MinLocalY / MaxLocalY to be considered a click")]
		public float ClickTolerance;

		[Token(Token = "0x4000C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("If true the button can be pressed by physical object by utiizing a Spring Joint. Set to false if you don't need / want physics interactions, or are using this on a moving platform.")]
		public bool AllowPhysicsForces;

		[Token(Token = "0x4000C0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Grabber> grabbers;

		[Token(Token = "0x4000C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<UITrigger> uiTriggers;

		[Token(Token = "0x4000C0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SpringJoint joint;

		[Token(Token = "0x4000C10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool clickingDown;

		[Token(Token = "0x4000C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AudioClip ButtonClick;

		[Token(Token = "0x4000C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AudioClip ButtonClickUp;

		[Token(Token = "0x4000C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent onButtonDown;

		[Token(Token = "0x4000C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityEvent onButtonUp;

		[Token(Token = "0x4000C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private AudioSource audioSource;

		[Token(Token = "0x4000C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody rigid;

		[Token(Token = "0x4000C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float ButtonSpeed;

		[Token(Token = "0x4000C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float SpringForce;

		[Token(Token = "0x4000C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 buttonDownPosition;

		[Token(Token = "0x4000C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 buttonUpPosition;

		[Token(Token = "0x6000B14")]
		[Address(RVA = "0xE1179C", Offset = "0xE1179C", VA = "0xE1179C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B15")]
		[Address(RVA = "0xE118E8", Offset = "0xE118E8", VA = "0xE118E8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B16")]
		[Address(RVA = "0xE11CDC", Offset = "0xE11CDC", VA = "0xE11CDC", Slot = "4")]
		public virtual Vector3 GetButtonUpPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B17")]
		[Address(RVA = "0xE11D34", Offset = "0xE11D34", VA = "0xE11D34", Slot = "5")]
		public virtual Vector3 GetButtonDownPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B18")]
		[Address(RVA = "0xE11D8C", Offset = "0xE11D8C", VA = "0xE11D8C", Slot = "6")]
		public virtual void OnButtonDown()
		{
		}

		[Token(Token = "0x6000B19")]
		[Address(RVA = "0xE11E54", Offset = "0xE11E54", VA = "0xE11E54", Slot = "7")]
		public virtual void OnButtonUp()
		{
		}

		[Token(Token = "0x6000B1A")]
		[Address(RVA = "0xE11F1C", Offset = "0xE11F1C", VA = "0xE11F1C")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000B1B")]
		[Address(RVA = "0xE12230", Offset = "0xE12230", VA = "0xE12230")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000B1C")]
		[Address(RVA = "0xE123D0", Offset = "0xE123D0", VA = "0xE123D0")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000B1D")]
		[Address(RVA = "0xE1259C", Offset = "0xE1259C", VA = "0xE1259C")]
		public Button()
		{
		}
	}
	[Token(Token = "0x20001C6")]
	public class ControllerModelSelector : MonoBehaviour
	{
		[Token(Token = "0x4000C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int disableIndex;

		[Token(Token = "0x4000C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool isQuitting;

		[Token(Token = "0x6000B1E")]
		[Address(RVA = "0xE126A0", Offset = "0xE126A0", VA = "0xE126A0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000B1F")]
		[Address(RVA = "0xE12744", Offset = "0xE12744", VA = "0xE12744")]
		public void UpdateControllerModel()
		{
		}

		[Token(Token = "0x6000B20")]
		[Address(RVA = "0xE12860", Offset = "0xE12860", VA = "0xE12860")]
		public void EnableChildController(int childIndex)
		{
		}

		[Token(Token = "0x6000B21")]
		[Address(RVA = "0xE128F0", Offset = "0xE128F0", VA = "0xE128F0")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000B22")]
		[Address(RVA = "0xE129A8", Offset = "0xE129A8", VA = "0xE129A8")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000B23")]
		[Address(RVA = "0xE129B4", Offset = "0xE129B4", VA = "0xE129B4")]
		public ControllerModelSelector()
		{
		}
	}
	[Token(Token = "0x20001C7")]
	public class Grabbable : MonoBehaviour
	{
		[Token(Token = "0x4000C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool BeingHeld;

		[Token(Token = "0x4000C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Grabber> validGrabbers;

		[Token(Token = "0x4000C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected List<Grabber> heldByGrabbers;

		[Token(Token = "0x4000C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected bool wasKinematic;

		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		protected bool usedGravity;

		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		protected CollisionDetectionMode initialCollisionMode;

		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected RigidbodyInterpolation initialInterpolationMode;

		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected bool remoteGrabbing;

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Grab Settings")]
		[Tooltip("Configure which button is used to initiate the grab")]
		public GrabButton GrabButton;

		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("'Inherit' will inherit this setting from the Grabber. 'Hold' requires the user to hold the GrabButton down. 'Toggle' will drop / release the Grabbable on button activation.")]
		public HoldType Grabtype;

		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Kinematic Physics locks the object in place on the hand / grabber. Physics Joint and Velocity types allow collisions with the environment.")]
		public GrabPhysics GrabPhysics;

		[Token(Token = "0x4000C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Snap to a location or grab anywhere on the object")]
		public GrabType GrabMechanic;

		[Token(Token = "0x4000C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("How fast to Lerp the object to the hand")]
		public float GrabSpeed;

		[Token(Token = "0x4000C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Header("Remote Grab")]
		[Tooltip("Can the object be picked up from far away. Must be within RemoteGrabber Trigger")]
		public bool RemoteGrabbable;

		[Token(Token = "0x4000C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public RemoteGrabMovement RemoteGrabMechanic;

		[Token(Token = "0x4000C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Max Distance Object can be Remote Grabbed. Not applicable if RemoteGrabbable is false")]
		public float RemoteGrabDistance;

		[Token(Token = "0x4000C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Throwing")]
		[Tooltip("Multiply controller's velocity times this when throwing")]
		public float ThrowForceMultiplier;

		[Token(Token = "0x4000C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("Multiply controller's angular velocity times this when throwing")]
		public float ThrowForceMultiplierAngular;

		[Token(Token = "0x4000C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Drop the item if object's center travels this far from the Grabber's Center (in meters). Set to 0 to disable distance break.")]
		public float BreakDistance;

		[Token(Token = "0x4000C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Header("Hand Options")]
		[Tooltip("Enabling this will hide the Transform specified in the Grabber's HandGraphics property")]
		public bool HideHandGraphics;

		[Token(Token = "0x4000C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		[Tooltip("Parent this object to the hands for instantaneous movement. Object will travel 1:1 with the controller but may have trouble detecting fast moving collisions.")]
		public bool ParentToHands;

		[Token(Token = "0x4000C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6E")]
		[Tooltip("If true, the hand model will be attached to the grabbed object. This separates it from a 1:1 match with the controller, but may look more realistic.")]
		public bool ParentHandModel;

		[Token(Token = "0x4000C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6F")]
		[Tooltip("If true, the hand model will snap to the nearest GrabPoint. Otherwise the hand model will stay with the Grabber.")]
		public bool SnapHandModel;

		[Token(Token = "0x4000C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Misc")]
		[Tooltip("Set to false to disable dropping. If false, will be permanently attached to whatever grabs this.")]
		public bool CanBeDropped;

		[Token(Token = "0x4000C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		[Tooltip("Can this object be snapped to snap zones? Set to false if you never want this to be snappable. Further filtering can be done on the SnapZones")]
		public bool CanBeSnappedToSnapZone;

		[Token(Token = "0x4000C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		[Tooltip("If true, the object will always have kinematic disabled when dropped, even if it was initially kinematic.")]
		public bool ForceDisableKinematicOnDrop;

		[Token(Token = "0x4000C37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x73")]
		[Tooltip("If true, the object will instantly position / rotate to the grabber instead of using velocity / force. This will only happen if no collisions have recently occurred. When using this method, the Grabbable's Rigidbody willbe instantly rotated / moved, taking in to account the interpolation settings. May clip through objects if moving fast enough.")]
		public bool InstantMovement;

		[Token(Token = "0x4000C38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("If true, all child colliders will be considered Grabbable. If false, you will need to add the 'GrabbableChild' component to any child colliders that you wish to also be considered grabbable.")]
		public bool MakeChildCollidersGrabbable;

		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("Default Hand Pose")]
		[Tooltip("A hand controller can read this value to determine how to animate when grabbing this object. 'AnimatorID' = specify an Animator ID to be set on the hand animator after grabbing this object. 'HandPose' = use a HandPose scriptable object. 'AutoPoseOnce' = DO an auto pose one time upon grabbing this object. 'AutoPoseContinuous' = Keep running attempting an autopose while grabbing this item.")]
		public HandPoseType handPoseType;

		[Token(Token = "0x4000C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		protected HandPoseType initialHandPoseType;

		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("If HandPoseType = 'HandPose', this HandPose object will be applied to the hand on pickup")]
		public HandPose SelectedHandPose;

		[Token(Token = "0x4000C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected HandPose initialHandPose;

		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("This HandPose Id will be passed to the Hand Animator when equipped. You can add new hand poses in the HandPoseDefinitions.cs file.")]
		public HandPoseId CustomHandPose;

		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected HandPoseId initialHandPoseId;

		[Token(Token = "0x4000C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Header("Two-Handed Grab Behavior")]
		[Tooltip("What to do if another grabber grabs this while equipped.")]
		public OtherGrabBehavior SecondaryGrabBehavior;

		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Tooltip("How to behave when two hands are grabbing this object. LookAt = Have the primary Grabber 'LookAt' the secondary grabber. For example, holding a rifle in the right controller will have it rotate towards the left controller. AveragePositionRotation = Use a point and rotation in space that is half-way between both grabbers.")]
		public TwoHandedPositionType TwoHandedPosition;

		[Token(Token = "0x4000C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Range(0f, 1f)]
		[Tooltip("How far to lerp between grabber positions. For example, 0.5 = halfway between the primary and secondary grabber. 0 = use the primary grabber's position, 1 = use the secondary grabber's position.")]
		public float TwoHandedPostionLerpAmount;

		[Token(Token = "0x4000C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[Tooltip("How to behave when two hands are grabbing this object. LookAt = Have the primary Grabber 'LookAt' the secondary grabber. For example, holding a rifle in the right controller will have it rotate towards the left controller. AveragePositionRotation = Use a point and rotation in space that is half-way between both grabbers.")]
		public TwoHandedRotationType TwoHandedRotation;

		[Token(Token = "0x4000C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("How far to lerp / slerp between grabber rotation. For example, 0.5 = halfway between the primary and secondary grabber. 0 = use the primary grabber's rotation, 1 = use the secondary grabber's position.")]
		[Range(0f, 1f)]
		public float TwoHandedRotationLerpAmount;

		[Token(Token = "0x4000C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[Tooltip("How to repond if you are holding an object with two hands, and then drop the primary grabber. For example, you may want to drop the object, transfer it to the second hand, or do nothing at all.")]
		public TwoHandedDropMechanic TwoHandedDropBehavior;

		[Token(Token = "0x4000C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Which vector to use when TwoHandedRotation = LookAtSecondary. Ex : Horizontal = A rifle type setup where you want to aim down the sites; Vertical = A melee type setup where the object is vertical")]
		public TwoHandedLookDirection TwoHandedLookVector;

		[Token(Token = "0x4000C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Tooltip("How quickly to Lerp towards the SecondaryGrabbable if TwoHandedGrabBehavior = LookAt")]
		public float SecondHandLookSpeed;

		[Token(Token = "0x4000C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("If specified, this object will be used as a secondary grabbable instead of relying on grab points on this object. If 'TwoHandedGrabBehavior' is specified as LookAt, this is the object the grabber will be rotated towards. If 'TwoHandedGrabBehavior' is specified as AveragePositionRotation, this is the object the grabber use to calculate position.")]
		[Header("Secondary Grabbale Object")]
		public Grabbable SecondaryGrabbable;

		[Token(Token = "0x4000C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("The Grabbable can only be grabbed if this grabbable is being held. Example : If you only want a weapon part to be grabbable if the weapon itself is being held.")]
		[Header("Grab Restrictions")]
		public Grabbable OtherGrabbableMustBeGrabbed;

		[Token(Token = "0x4000C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Header("Physics Joint Settings")]
		[Tooltip("A higher Spring Force will make the Grabbable more rigid")]
		public float CollisionSpring;

		[Token(Token = "0x4000C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[Tooltip("How much Slerp Force to apply to the joint when something is in contact with the grabbable")]
		public float CollisionSlerp;

		[Token(Token = "0x4000C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("How to restrict the Configurable Joint's xMotion when colliding with an object. Position can be free, completely locked, or limited.")]
		public ConfigurableJointMotion CollisionLinearMotionX;

		[Token(Token = "0x4000C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[Tooltip("How to restrict the Configurable Joint's yMotion when colliding with an object. Position can be free, completely locked, or limited.")]
		public ConfigurableJointMotion CollisionLinearMotionY;

		[Token(Token = "0x4000C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Tooltip("How to restrict the Configurable Joint's zMotion when colliding with an object. Position can be free, completely locked, or limited.")]
		public ConfigurableJointMotion CollisionLinearMotionZ;

		[Token(Token = "0x4000C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[Tooltip("Restrict the rotation around the X axes to be Free, completely Locked, or Limited when colliding with an object.")]
		public ConfigurableJointMotion CollisionAngularMotionX;

		[Token(Token = "0x4000C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("Restrict the rotation around the Y axes to be Free, completely Locked, or Limited when colliding with an object.")]
		public ConfigurableJointMotion CollisionAngularMotionY;

		[Token(Token = "0x4000C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[Tooltip("Restrict the rotation around Z axes to be Free, completely Locked, or Limited when colliding with an object.")]
		public ConfigurableJointMotion CollisionAngularMotionZ;

		[Token(Token = "0x4000C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("If true, the object's velocity will be adjusted to match the grabber. This is in addition to any forces added by the configurable joint.")]
		public bool ApplyCorrectiveForce;

		[Token(Token = "0x4000C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[Header("Velocity Grab Settings")]
		public float MoveVelocityForce;

		[Token(Token = "0x4000C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public float MoveAngularVelocityForce;

		[Token(Token = "0x4000C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[HideInInspector]
		public float LastGrabTime;

		[Token(Token = "0x4000C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[HideInInspector]
		public float LastDropTime;

		[Token(Token = "0x4000C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[HideInInspector]
		public bool AddControllerVelocityOnDrop;

		[Token(Token = "0x4000C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private float journeyLength;

		[Token(Token = "0x4000C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Header("Shown for Debug : ")]
		[SerializeField]
		public List<Collider> collisions;

		[Token(Token = "0x4000C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		protected Transform primaryGrabOffset;

		[Token(Token = "0x4000C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		protected Transform secondaryGrabOffset;

		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[HideInInspector]
		public GrabPoint ActiveGrabPoint;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[HideInInspector]
		public Vector3 SecondaryLookOffset;

		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[HideInInspector]
		public Transform SecondaryLookAtTransform;

		[Token(Token = "0x4000C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[HideInInspector]
		public Transform LocalOffsetTransform;

		[Token(Token = "0x4000C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private Transform _grabTransform;

		[Token(Token = "0x4000C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private Transform _grabTransformSecondary;

		[Token(Token = "0x4000C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[Tooltip("If Grab Mechanic is set to Snap, the closest GrabPoint will be used. Add a SnapPoint Component to a GrabPoint to specify custom hand poses and rotation.")]
		[Header("Grab Points")]
		public List<Transform> GrabPoints;

		[Token(Token = "0x4000C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private bool _canBeMoved;

		[Token(Token = "0x4000C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		protected Transform originalParent;

		[Token(Token = "0x4000C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		protected InputBridge input;

		[Token(Token = "0x4000C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		protected ConfigurableJoint connectedJoint;

		[Token(Token = "0x4000C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		protected Vector3 previousPosition;

		[Token(Token = "0x4000C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		protected float lastItemTeleportTime;

		[Token(Token = "0x4000C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		protected bool recentlyTeleported;

		[Token(Token = "0x4000C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A9")]
		[HideInInspector]
		public bool UseCustomInspector;

		[Token(Token = "0x4000C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private BNGPlayerController _player;

		[Token(Token = "0x4000C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		protected Collider col;

		[Token(Token = "0x4000C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		protected Rigidbody rigid;

		[Token(Token = "0x4000C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		protected Grabber flyingTo;

		[Token(Token = "0x4000C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		protected List<GrabbableEvents> events;

		[Token(Token = "0x4000C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		protected bool didParentHands;

		[Token(Token = "0x4000C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D9")]
		private bool initiatedFlick;

		[Token(Token = "0x4000C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		private float flickStartVelocity;

		[Token(Token = "0x4000C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private float FlickSpeed;

		[Token(Token = "0x4000C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		public float lastFlickTime;

		[Token(Token = "0x4000C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public float FlickForce;

		[Token(Token = "0x4000C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		private float angle;

		[Token(Token = "0x4000C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private Vector3 axis;

		[Token(Token = "0x4000C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		private Vector3 angularTarget;

		[Token(Token = "0x4000C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private Vector3 angularMovement;

		[Token(Token = "0x4000C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
		private bool subscribedToEvents;

		[Token(Token = "0x4000C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x215")]
		private bool grabbableIsLocked;

		[Token(Token = "0x4000C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private Transform _priorParent;

		[Token(Token = "0x4000C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private Vector3 _priorLocalOffsetPosition;

		[Token(Token = "0x4000C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22C")]
		private Quaternion _priorLocalOffsetRotation;

		[Token(Token = "0x4000C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private Grabber _priorPrimaryGrabber;

		[Token(Token = "0x4000C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private bool lockPos;

		[Token(Token = "0x4000C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x249")]
		private bool lockRot;

		[Token(Token = "0x4000C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24C")]
		private int lockRequests;

		[Token(Token = "0x4000C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		private bool quitting;

		[Token(Token = "0x170000E9")]
		public bool BeingHeldWithTwoHands
		{
			[Token(Token = "0x6000B24")]
			[Address(RVA = "0xE129BC", Offset = "0xE129BC", VA = "0xE129BC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000EA")]
		public List<Grabber> HeldByGrabbers
		{
			[Token(Token = "0x6000B25")]
			[Address(RVA = "0xE12A78", Offset = "0xE12A78", VA = "0xE12A78")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000EB")]
		public bool RemoteGrabbing
		{
			[Token(Token = "0x6000B26")]
			[Address(RVA = "0xE12A80", Offset = "0xE12A80", VA = "0xE12A80")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000EC")]
		public Vector3 OriginalScale
		{
			[Token(Token = "0x6000B27")]
			[Address(RVA = "0xE12A88", Offset = "0xE12A88", VA = "0xE12A88")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000B28")]
			[Address(RVA = "0xE12A98", Offset = "0xE12A98", VA = "0xE12A98")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000ED")]
		public float lastCollisionSeconds
		{
			[Token(Token = "0x6000B29")]
			[Address(RVA = "0xE12AA8", Offset = "0xE12AA8", VA = "0xE12AA8")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B2A")]
			[Address(RVA = "0xE12AB0", Offset = "0xE12AB0", VA = "0xE12AB0")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170000EE")]
		public float lastNoCollisionSeconds
		{
			[Token(Token = "0x6000B2B")]
			[Address(RVA = "0xE12AB8", Offset = "0xE12AB8", VA = "0xE12AB8")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B2C")]
			[Address(RVA = "0xE12AC0", Offset = "0xE12AC0", VA = "0xE12AC0")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170000EF")]
		public bool RecentlyCollided
		{
			[Token(Token = "0x6000B2D")]
			[Address(RVA = "0xE12AC8", Offset = "0xE12AC8", VA = "0xE12AC8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000F0")]
		public float requestSpringTime
		{
			[Token(Token = "0x6000B2E")]
			[Address(RVA = "0xE12B40", Offset = "0xE12B40", VA = "0xE12B40")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B2F")]
			[Address(RVA = "0xE12B48", Offset = "0xE12B48", VA = "0xE12B48")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170000F1")]
		private Vector3 grabPosition
		{
			[Token(Token = "0x6000B30")]
			[Address(RVA = "0xE12B50", Offset = "0xE12B50", VA = "0xE12B50")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000F2")]
		[HideInInspector]
		public Vector3 GrabPositionOffset
		{
			[Token(Token = "0x6000B31")]
			[Address(RVA = "0xE0A718", Offset = "0xE0A718", VA = "0xE0A718")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000F3")]
		[HideInInspector]
		public Vector3 GrabRotationOffset
		{
			[Token(Token = "0x6000B32")]
			[Address(RVA = "0xE12BD8", Offset = "0xE12BD8", VA = "0xE12BD8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170000F4")]
		public Transform grabTransform
		{
			[Token(Token = "0x6000B33")]
			[Address(RVA = "0xE12C98", Offset = "0xE12C98", VA = "0xE12C98")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F5")]
		public Transform grabTransformSecondary
		{
			[Token(Token = "0x6000B34")]
			[Address(RVA = "0xE12DEC", Offset = "0xE12DEC", VA = "0xE12DEC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F6")]
		public bool CanBeMoved
		{
			[Token(Token = "0x6000B35")]
			[Address(RVA = "0xE12F54", Offset = "0xE12F54", VA = "0xE12F54")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000F7")]
		protected BNGPlayerController player
		{
			[Token(Token = "0x6000B36")]
			[Address(RVA = "0xE12F5C", Offset = "0xE12F5C", VA = "0xE12F5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F8")]
		public Grabber FlyingToGrabber
		{
			[Token(Token = "0x6000B37")]
			[Address(RVA = "0xE12F6C", Offset = "0xE12F6C", VA = "0xE12F6C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000F9")]
		public bool DidParentHands
		{
			[Token(Token = "0x6000B38")]
			[Address(RVA = "0xE12F74", Offset = "0xE12F74", VA = "0xE12F74")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000B39")]
		[Address(RVA = "0xE12F7C", Offset = "0xE12F7C", VA = "0xE12F7C")]
		protected void Awake()
		{
		}

		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0xE135B4", Offset = "0xE135B4", VA = "0xE135B4", Slot = "4")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x6000B3B")]
		[Address(RVA = "0xE14A10", Offset = "0xE14A10", VA = "0xE14A10", Slot = "5")]
		public virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000B3C")]
		[Address(RVA = "0xE14B44", Offset = "0xE14B44", VA = "0xE14B44", Slot = "6")]
		public virtual Vector3 GetGrabberWithGrabPointOffset(Grabber grabber, Transform grabPoint)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B3D")]
		[Address(RVA = "0xE14CB4", Offset = "0xE14CB4", VA = "0xE14CB4", Slot = "7")]
		public virtual Quaternion GetGrabberWithOffsetWorldRotation(Grabber grabber)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000B3E")]
		[Address(RVA = "0xE14388", Offset = "0xE14388", VA = "0xE14388")]
		protected void positionHandGraphics(Grabber g)
		{
		}

		[Token(Token = "0x6000B3F")]
		[Address(RVA = "0xE14D74", Offset = "0xE14D74", VA = "0xE14D74", Slot = "8")]
		public virtual bool IsGrabbable()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B40")]
		[Address(RVA = "0xE14E4C", Offset = "0xE14E4C", VA = "0xE14E4C", Slot = "9")]
		public virtual void UpdateRemoteGrab()
		{
		}

		[Token(Token = "0x6000B41")]
		[Address(RVA = "0xE14E90", Offset = "0xE14E90", VA = "0xE14E90", Slot = "10")]
		public virtual void CheckRemoteGrabLinear()
		{
		}

		[Token(Token = "0x6000B42")]
		[Address(RVA = "0xE15778", Offset = "0xE15778", VA = "0xE15778", Slot = "11")]
		public virtual void CheckRemoteGrabVelocity()
		{
		}

		[Token(Token = "0x6000B43")]
		[Address(RVA = "0xE162D0", Offset = "0xE162D0", VA = "0xE162D0", Slot = "12")]
		public virtual void InitiateFlick()
		{
		}

		[Token(Token = "0x6000B44")]
		[Address(RVA = "0xE16484", Offset = "0xE16484", VA = "0xE16484")]
		public Vector3 GetVelocityToHitTargetByTime(Vector3 startPosition, Vector3 targetPosition, Vector3 gravityBase, float timeToTarget)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B45")]
		[Address(RVA = "0xE16924", Offset = "0xE16924", VA = "0xE16924", Slot = "13")]
		public virtual void CheckRemoteGrabFlick()
		{
		}

		[Token(Token = "0x6000B46")]
		[Address(RVA = "0xE16A64", Offset = "0xE16A64", VA = "0xE16A64", Slot = "14")]
		public virtual void UpdateFixedJoints()
		{
		}

		[Token(Token = "0x6000B47")]
		[Address(RVA = "0xE16DE0", Offset = "0xE16DE0", VA = "0xE16DE0", Slot = "15")]
		public virtual void UpdatePhysicsJoints()
		{
		}

		[Token(Token = "0x6000B48")]
		[Address(RVA = "0xE17230", Offset = "0xE17230", VA = "0xE17230")]
		private void setPositionSpring(float spring, float damper)
		{
		}

		[Token(Token = "0x6000B49")]
		[Address(RVA = "0xE173BC", Offset = "0xE173BC", VA = "0xE173BC")]
		private void setSlerpDrive(float slerp, float damper)
		{
		}

		[Token(Token = "0x6000B4A")]
		[Address(RVA = "0xE17494", Offset = "0xE17494", VA = "0xE17494", Slot = "16")]
		public virtual Vector3 GetGrabberVector3(Grabber grabber, bool isSecondary)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B4B")]
		[Address(RVA = "0xE174E8", Offset = "0xE174E8", VA = "0xE174E8", Slot = "17")]
		public virtual Quaternion GetGrabberQuaternion(Grabber grabber, bool isSecondary)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000B4C")]
		[Address(RVA = "0xE16B20", Offset = "0xE16B20", VA = "0xE16B20")]
		private void moveWithVelocity()
		{
		}

		[Token(Token = "0x6000B4D")]
		[Address(RVA = "0xE176D0", Offset = "0xE176D0", VA = "0xE176D0")]
		private void rotateWithVelocity()
		{
		}

		[Token(Token = "0x6000B4E")]
		[Address(RVA = "0xE17528", Offset = "0xE17528", VA = "0xE17528")]
		public Vector3 GetGrabbersAveragedPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B4F")]
		[Address(RVA = "0xE15BC8", Offset = "0xE15BC8", VA = "0xE15BC8")]
		public Quaternion GetGrabbersAveragedRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000B50")]
		[Address(RVA = "0xE17BB0", Offset = "0xE17BB0", VA = "0xE17BB0", Slot = "18")]
		public virtual void UpdateKinematicPhysics()
		{
		}

		[Token(Token = "0x6000B51")]
		[Address(RVA = "0xE18214", Offset = "0xE18214", VA = "0xE18214", Slot = "19")]
		public virtual void UpdateVelocityPhysics()
		{
		}

		[Token(Token = "0x6000B52")]
		[Address(RVA = "0xE140D0", Offset = "0xE140D0", VA = "0xE140D0")]
		private void checkParentHands(Grabber g)
		{
		}

		[Token(Token = "0x6000B53")]
		[Address(RVA = "0xE134C8", Offset = "0xE134C8", VA = "0xE134C8")]
		private bool canBeMoved()
		{
			return default(bool);
		}

		[Token(Token = "0x6000B54")]
		[Address(RVA = "0xE1447C", Offset = "0xE1447C", VA = "0xE1447C")]
		private void checkSecondaryLook()
		{
		}

		[Token(Token = "0x6000B55")]
		[Address(RVA = "0xE1804C", Offset = "0xE1804C", VA = "0xE1804C")]
		private void rotateGrabber(bool lerp = false)
		{
		}

		[Token(Token = "0x6000B56")]
		[Address(RVA = "0xE1854C", Offset = "0xE1854C", VA = "0xE1854C")]
		public Transform GetGrabPoint()
		{
			return null;
		}

		[Token(Token = "0x6000B57")]
		[Address(RVA = "0xE18554", Offset = "0xE18554", VA = "0xE18554", Slot = "20")]
		public virtual void GrabItem(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x6000B58")]
		[Address(RVA = "0xE19038", Offset = "0xE19038", VA = "0xE19038", Slot = "21")]
		protected virtual void setupConfigJointGrab(Grabber grabbedBy, GrabType grabType)
		{
		}

		[Token(Token = "0x6000B59")]
		[Address(RVA = "0xE19248", Offset = "0xE19248", VA = "0xE19248", Slot = "22")]
		protected virtual void setupFixedJointGrab(Grabber grabbedBy, GrabType grabType)
		{
		}

		[Token(Token = "0x6000B5A")]
		[Address(RVA = "0xE19358", Offset = "0xE19358", VA = "0xE19358", Slot = "23")]
		protected virtual void setupKinematicGrab(Grabber grabbedBy, GrabType grabType)
		{
		}

		[Token(Token = "0x6000B5B")]
		[Address(RVA = "0xE19464", Offset = "0xE19464", VA = "0xE19464", Slot = "24")]
		protected virtual void setupVelocityGrab(Grabber grabbedBy, GrabType grabType)
		{
		}

		[Token(Token = "0x6000B5C")]
		[Address(RVA = "0xE194B0", Offset = "0xE194B0", VA = "0xE194B0", Slot = "25")]
		public virtual void GrabRemoteItem(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x6000B5D")]
		[Address(RVA = "0xE195BC", Offset = "0xE195BC", VA = "0xE195BC", Slot = "26")]
		public virtual void ResetGrabbing()
		{
		}

		[Token(Token = "0x6000B5E")]
		[Address(RVA = "0xE19698", Offset = "0xE19698", VA = "0xE19698", Slot = "27")]
		public virtual void DropItem(Grabber droppedBy, bool resetVelocity, bool resetParent)
		{
		}

		[Token(Token = "0x6000B5F")]
		[Address(RVA = "0xE1845C", Offset = "0xE1845C", VA = "0xE1845C")]
		private void clearLookAtTransform()
		{
		}

		[Token(Token = "0x6000B60")]
		[Address(RVA = "0xE13BBC", Offset = "0xE13BBC", VA = "0xE13BBC")]
		private void callEvents(Grabber g)
		{
		}

		[Token(Token = "0x6000B61")]
		[Address(RVA = "0xE1A18C", Offset = "0xE1A18C", VA = "0xE1A18C", Slot = "28")]
		public virtual void DropItem(Grabber droppedBy)
		{
		}

		[Token(Token = "0x6000B62")]
		[Address(RVA = "0xE1A1A4", Offset = "0xE1A1A4", VA = "0xE1A1A4", Slot = "29")]
		public virtual void DropItem(bool resetVelocity, bool resetParent)
		{
		}

		[Token(Token = "0x6000B63")]
		[Address(RVA = "0xE1A1F4", Offset = "0xE1A1F4", VA = "0xE1A1F4")]
		public void ResetScale()
		{
		}

		[Token(Token = "0x6000B64")]
		[Address(RVA = "0xE19E88", Offset = "0xE19E88", VA = "0xE19E88")]
		public void ResetParent()
		{
		}

		[Token(Token = "0x6000B65")]
		[Address(RVA = "0xE1A224", Offset = "0xE1A224", VA = "0xE1A224")]
		public void UpdateOriginalParent(Transform newOriginalParent)
		{
		}

		[Token(Token = "0x6000B66")]
		[Address(RVA = "0xE1A234", Offset = "0xE1A234", VA = "0xE1A234")]
		public void UpdateOriginalParent()
		{
		}

		[Token(Token = "0x6000B67")]
		[Address(RVA = "0xE1A268", Offset = "0xE1A268", VA = "0xE1A268")]
		public ControllerHand GetControllerHand(Grabber g)
		{
			return default(ControllerHand);
		}

		[Token(Token = "0x6000B68")]
		[Address(RVA = "0xE1A2E0", Offset = "0xE1A2E0", VA = "0xE1A2E0", Slot = "30")]
		public virtual Grabber GetPrimaryGrabber()
		{
			return null;
		}

		[Token(Token = "0x6000B69")]
		[Address(RVA = "0xE1A414", Offset = "0xE1A414", VA = "0xE1A414", Slot = "31")]
		public virtual Grabber GetClosestGrabber()
		{
			return null;
		}

		[Token(Token = "0x6000B6A")]
		[Address(RVA = "0xE1A5C0", Offset = "0xE1A5C0", VA = "0xE1A5C0", Slot = "32")]
		public virtual Transform GetClosestGrabPoint(Grabber grabber)
		{
			return null;
		}

		[Token(Token = "0x6000B6B")]
		[Address(RVA = "0xE1A8F0", Offset = "0xE1A8F0", VA = "0xE1A8F0", Slot = "33")]
		public virtual void Release(Vector3 velocity, Vector3 angularVelocity)
		{
		}

		[Token(Token = "0x6000B6C")]
		[Address(RVA = "0xE1AA30", Offset = "0xE1AA30", VA = "0xE1AA30", Slot = "34")]
		public virtual bool IsValidCollision(Collision collision)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B6D")]
		[Address(RVA = "0xE1AA68", Offset = "0xE1AA68", VA = "0xE1AA68", Slot = "35")]
		public virtual bool IsValidCollision(Collider col)
		{
			return default(bool);
		}

		[Token(Token = "0x6000B6E")]
		[Address(RVA = "0xE1AC00", Offset = "0xE1AC00", VA = "0xE1AC00", Slot = "36")]
		public virtual void parentHandGraphics(Grabber g)
		{
		}

		[Token(Token = "0x6000B6F")]
		[Address(RVA = "0xE19150", Offset = "0xE19150", VA = "0xE19150")]
		private void setupConfigJoint(Grabber g)
		{
		}

		[Token(Token = "0x6000B70")]
		[Address(RVA = "0xE19EB0", Offset = "0xE19EB0", VA = "0xE19EB0")]
		private void removeConfigJoint()
		{
		}

		[Token(Token = "0x6000B71")]
		[Address(RVA = "0xE18EF8", Offset = "0xE18EF8", VA = "0xE18EF8")]
		private void addGrabber(Grabber g)
		{
		}

		[Token(Token = "0x6000B72")]
		[Address(RVA = "0xE19F84", Offset = "0xE19F84", VA = "0xE19F84")]
		public void removeGrabber(Grabber g)
		{
		}

		[Token(Token = "0x6000B73")]
		[Address(RVA = "0xE155CC", Offset = "0xE155CC", VA = "0xE155CC")]
		private void movePosition(Vector3 worldPosition)
		{
		}

		[Token(Token = "0x6000B74")]
		[Address(RVA = "0xE1569C", Offset = "0xE1569C", VA = "0xE1569C")]
		private void moveRotation(Quaternion worldRotation)
		{
		}

		[Token(Token = "0x6000B75")]
		[Address(RVA = "0xE1800C", Offset = "0xE1800C", VA = "0xE1800C")]
		protected Vector3 getRemotePosition(Grabber toGrabber)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000B76")]
		[Address(RVA = "0xE15398", Offset = "0xE15398", VA = "0xE15398")]
		protected Quaternion getRemoteRotation(Grabber grabber)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000B77")]
		[Address(RVA = "0xE13A48", Offset = "0xE13A48", VA = "0xE13A48")]
		private void filterCollisions()
		{
		}

		[Token(Token = "0x6000B78")]
		[Address(RVA = "0xE1ACF4", Offset = "0xE1ACF4", VA = "0xE1ACF4", Slot = "37")]
		public virtual BNGPlayerController GetBNGPlayerController()
		{
			return null;
		}

		[Token(Token = "0x6000B79")]
		[Address(RVA = "0xE1AE30", Offset = "0xE1AE30", VA = "0xE1AE30", Slot = "38")]
		public virtual void RequestSpringTime(float seconds)
		{
		}

		[Token(Token = "0x6000B7A")]
		[Address(RVA = "0xE1AE68", Offset = "0xE1AE68", VA = "0xE1AE68", Slot = "39")]
		public virtual void AddValidGrabber(Grabber grabber)
		{
		}

		[Token(Token = "0x6000B7B")]
		[Address(RVA = "0xE1AFA8", Offset = "0xE1AFA8", VA = "0xE1AFA8", Slot = "40")]
		public virtual void RemoveValidGrabber(Grabber grabber)
		{
		}

		[Token(Token = "0x6000B7C")]
		[Address(RVA = "0xE1B038", Offset = "0xE1B038", VA = "0xE1B038", Slot = "41")]
		public virtual void SubscribeToMoveEvents()
		{
		}

		[Token(Token = "0x6000B7D")]
		[Address(RVA = "0xE1B2C8", Offset = "0xE1B2C8", VA = "0xE1B2C8", Slot = "42")]
		public virtual void UnsubscribeFromMoveEvents()
		{
		}

		[Token(Token = "0x6000B7E")]
		[Address(RVA = "0xE1B544", Offset = "0xE1B544", VA = "0xE1B544", Slot = "43")]
		public virtual void LockGrabbable()
		{
		}

		[Token(Token = "0x6000B7F")]
		[Address(RVA = "0xE1B560", Offset = "0xE1B560", VA = "0xE1B560", Slot = "44")]
		public virtual void LockGrabbableWithRotation()
		{
		}

		[Token(Token = "0x6000B80")]
		[Address(RVA = "0xE1B57C", Offset = "0xE1B57C", VA = "0xE1B57C", Slot = "45")]
		public virtual void RequestLockGrabbable()
		{
		}

		[Token(Token = "0x6000B81")]
		[Address(RVA = "0xE1B740", Offset = "0xE1B740", VA = "0xE1B740", Slot = "46")]
		public virtual void RequestUnlockGrabbable()
		{
		}

		[Token(Token = "0x6000B82")]
		[Address(RVA = "0xE1B770", Offset = "0xE1B770", VA = "0xE1B770", Slot = "47")]
		public virtual void ResetLockResets()
		{
		}

		[Token(Token = "0x6000B83")]
		[Address(RVA = "0xE1B828", Offset = "0xE1B828", VA = "0xE1B828", Slot = "48")]
		public virtual void LockGrabbable(bool lockPosition, bool lockRotation, bool overridePriorLock)
		{
		}

		[Token(Token = "0x6000B84")]
		[Address(RVA = "0xE1BA64", Offset = "0xE1BA64", VA = "0xE1BA64", Slot = "49")]
		public virtual void UnlockGrabbable()
		{
		}

		[Token(Token = "0x6000B85")]
		[Address(RVA = "0xE1BE10", Offset = "0xE1BE10", VA = "0xE1BE10")]
		private void OnCollisionStay(Collision collision)
		{
		}

		[Token(Token = "0x6000B86")]
		[Address(RVA = "0xE1BFD8", Offset = "0xE1BFD8", VA = "0xE1BFD8")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000B87")]
		[Address(RVA = "0xE1C100", Offset = "0xE1C100", VA = "0xE1C100")]
		private void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x6000B88")]
		[Address(RVA = "0xE1C1BC", Offset = "0xE1C1BC", VA = "0xE1C1BC")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000B89")]
		[Address(RVA = "0xE1C1C8", Offset = "0xE1C1C8", VA = "0xE1C1C8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000B8A")]
		[Address(RVA = "0xE1C1F4", Offset = "0xE1C1F4", VA = "0xE1C1F4")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000B8B")]
		[Address(RVA = "0xE1C344", Offset = "0xE1C344", VA = "0xE1C344")]
		public Grabbable()
		{
		}
	}
	[Token(Token = "0x20001C8")]
	public enum GrabType
	{
		[Token(Token = "0x4000C88")]
		Snap,
		[Token(Token = "0x4000C89")]
		Precise
	}
	[Token(Token = "0x20001C9")]
	public enum RemoteGrabMovement
	{
		[Token(Token = "0x4000C8B")]
		Linear,
		[Token(Token = "0x4000C8C")]
		Velocity,
		[Token(Token = "0x4000C8D")]
		Flick
	}
	[Token(Token = "0x20001CA")]
	public enum GrabPhysics
	{
		[Token(Token = "0x4000C8F")]
		None = 2,
		[Token(Token = "0x4000C90")]
		PhysicsJoint = 0,
		[Token(Token = "0x4000C91")]
		FixedJoint = 3,
		[Token(Token = "0x4000C92")]
		Velocity = 4,
		[Token(Token = "0x4000C93")]
		Kinematic = 1
	}
	[Token(Token = "0x20001CB")]
	public enum OtherGrabBehavior
	{
		[Token(Token = "0x4000C95")]
		None,
		[Token(Token = "0x4000C96")]
		SwapHands,
		[Token(Token = "0x4000C97")]
		DualGrab
	}
	[Token(Token = "0x20001CC")]
	public enum TwoHandedPositionType
	{
		[Token(Token = "0x4000C99")]
		Lerp,
		[Token(Token = "0x4000C9A")]
		None
	}
	[Token(Token = "0x20001CD")]
	public enum TwoHandedRotationType
	{
		[Token(Token = "0x4000C9C")]
		Lerp,
		[Token(Token = "0x4000C9D")]
		Slerp,
		[Token(Token = "0x4000C9E")]
		LookAtSecondary,
		[Token(Token = "0x4000C9F")]
		None
	}
	[Token(Token = "0x20001CE")]
	public enum TwoHandedDropMechanic
	{
		[Token(Token = "0x4000CA1")]
		Drop,
		[Token(Token = "0x4000CA2")]
		Transfer,
		[Token(Token = "0x4000CA3")]
		None
	}
	[Token(Token = "0x20001CF")]
	public enum TwoHandedLookDirection
	{
		[Token(Token = "0x4000CA5")]
		Horizontal,
		[Token(Token = "0x4000CA6")]
		Vertical
	}
	[Token(Token = "0x20001D0")]
	public enum HandPoseType
	{
		[Token(Token = "0x4000CA8")]
		AnimatorID,
		[Token(Token = "0x4000CA9")]
		HandPose,
		[Token(Token = "0x4000CAA")]
		AutoPoseOnce,
		[Token(Token = "0x4000CAB")]
		AutoPoseContinuous,
		[Token(Token = "0x4000CAC")]
		None
	}
	[Token(Token = "0x20001D1")]
	public class GrabbableChild : MonoBehaviour
	{
		[Token(Token = "0x4000CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Parent Grabbable Object to be grabbed.")]
		public Grabbable ParentGrabbable;

		[Token(Token = "0x6000B8C")]
		[Address(RVA = "0xE1C3E8", Offset = "0xE1C3E8", VA = "0xE1C3E8")]
		public GrabbableChild()
		{
		}
	}
	[Token(Token = "0x20001D2")]
	[RequireComponent(typeof(Grabbable))]
	public abstract class GrabbableEvents : MonoBehaviour
	{
		[Token(Token = "0x4000CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Grabbable grab;

		[Token(Token = "0x4000CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Grabber thisGrabber;

		[Token(Token = "0x4000CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected InputBridge input;

		[Token(Token = "0x6000B8D")]
		[Address(RVA = "0xE1C3F0", Offset = "0xE1C3F0", VA = "0xE1C3F0", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000B8E")]
		[Address(RVA = "0xE1C650", Offset = "0xE1C650", VA = "0xE1C650", Slot = "5")]
		public virtual void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6000B8F")]
		[Address(RVA = "0xE1C658", Offset = "0xE1C658", VA = "0xE1C658", Slot = "6")]
		public virtual void OnRelease()
		{
		}

		[Token(Token = "0x6000B90")]
		[Address(RVA = "0xE1C65C", Offset = "0xE1C65C", VA = "0xE1C65C", Slot = "7")]
		public virtual void OnBecomesClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000B91")]
		[Address(RVA = "0xE1C660", Offset = "0xE1C660", VA = "0xE1C660", Slot = "8")]
		public virtual void OnBecomesClosestGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6000B92")]
		[Address(RVA = "0xE1C664", Offset = "0xE1C664", VA = "0xE1C664", Slot = "9")]
		public virtual void OnNoLongerClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000B93")]
		[Address(RVA = "0xE1C668", Offset = "0xE1C668", VA = "0xE1C668", Slot = "10")]
		public virtual void OnNoLongerClosestGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6000B94")]
		[Address(RVA = "0xE1C66C", Offset = "0xE1C66C", VA = "0xE1C66C", Slot = "11")]
		public virtual void OnBecomesClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000B95")]
		[Address(RVA = "0xE1C670", Offset = "0xE1C670", VA = "0xE1C670", Slot = "12")]
		public virtual void OnBecomesClosestRemoteGrabbable(Grabber theGrabber)
		{
		}

		[Token(Token = "0x6000B96")]
		[Address(RVA = "0xE1C674", Offset = "0xE1C674", VA = "0xE1C674", Slot = "13")]
		public virtual void OnNoLongerClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000B97")]
		[Address(RVA = "0xE1C678", Offset = "0xE1C678", VA = "0xE1C678", Slot = "14")]
		public virtual void OnNoLongerClosestRemoteGrabbable(Grabber theGrabber)
		{
		}

		[Token(Token = "0x6000B98")]
		[Address(RVA = "0xE1C67C", Offset = "0xE1C67C", VA = "0xE1C67C", Slot = "15")]
		public virtual void OnGrip(float gripValue)
		{
		}

		[Token(Token = "0x6000B99")]
		[Address(RVA = "0xE1C680", Offset = "0xE1C680", VA = "0xE1C680", Slot = "16")]
		public virtual void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6000B9A")]
		[Address(RVA = "0xE1C684", Offset = "0xE1C684", VA = "0xE1C684", Slot = "17")]
		public virtual void OnTriggerDown()
		{
		}

		[Token(Token = "0x6000B9B")]
		[Address(RVA = "0xE1C688", Offset = "0xE1C688", VA = "0xE1C688", Slot = "18")]
		public virtual void OnTriggerUp()
		{
		}

		[Token(Token = "0x6000B9C")]
		[Address(RVA = "0xE1C68C", Offset = "0xE1C68C", VA = "0xE1C68C", Slot = "19")]
		public virtual void OnButton1()
		{
		}

		[Token(Token = "0x6000B9D")]
		[Address(RVA = "0xE1C690", Offset = "0xE1C690", VA = "0xE1C690", Slot = "20")]
		public virtual void OnButton1Down()
		{
		}

		[Token(Token = "0x6000B9E")]
		[Address(RVA = "0xE1C694", Offset = "0xE1C694", VA = "0xE1C694", Slot = "21")]
		public virtual void OnButton1Up()
		{
		}

		[Token(Token = "0x6000B9F")]
		[Address(RVA = "0xE1C698", Offset = "0xE1C698", VA = "0xE1C698", Slot = "22")]
		public virtual void OnButton2()
		{
		}

		[Token(Token = "0x6000BA0")]
		[Address(RVA = "0xE1C69C", Offset = "0xE1C69C", VA = "0xE1C69C", Slot = "23")]
		public virtual void OnButton2Down()
		{
		}

		[Token(Token = "0x6000BA1")]
		[Address(RVA = "0xE1C6A0", Offset = "0xE1C6A0", VA = "0xE1C6A0", Slot = "24")]
		public virtual void OnButton2Up()
		{
		}

		[Token(Token = "0x6000BA2")]
		[Address(RVA = "0xE1C6A4", Offset = "0xE1C6A4", VA = "0xE1C6A4", Slot = "25")]
		public virtual void OnSnapZoneEnter()
		{
		}

		[Token(Token = "0x6000BA3")]
		[Address(RVA = "0xE1C6A8", Offset = "0xE1C6A8", VA = "0xE1C6A8", Slot = "26")]
		public virtual void OnSnapZoneExit()
		{
		}

		[Token(Token = "0x6000BA4")]
		[Address(RVA = "0xE1C6AC", Offset = "0xE1C6AC", VA = "0xE1C6AC")]
		protected GrabbableEvents()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D3")]
	public class FloatEvent : UnityEvent<float>
	{
		[Token(Token = "0x6000BA5")]
		[Address(RVA = "0xE1C6B4", Offset = "0xE1C6B4", VA = "0xE1C6B4")]
		public FloatEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D4")]
	public class FloatFloatEvent : UnityEvent<float, float>
	{
		[Token(Token = "0x6000BA6")]
		[Address(RVA = "0xE1C6FC", Offset = "0xE1C6FC", VA = "0xE1C6FC")]
		public FloatFloatEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D5")]
	public class GrabberEvent : UnityEvent<Grabber>
	{
		[Token(Token = "0x6000BA7")]
		[Address(RVA = "0xE1C744", Offset = "0xE1C744", VA = "0xE1C744")]
		public GrabberEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D6")]
	public class GrabbableEvent : UnityEvent<Grabbable>
	{
		[Token(Token = "0x6000BA8")]
		[Address(RVA = "0xE1C78C", Offset = "0xE1C78C", VA = "0xE1C78C")]
		public GrabbableEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D7")]
	public class RaycastHitEvent : UnityEvent<RaycastHit>
	{
		[Token(Token = "0x6000BA9")]
		[Address(RVA = "0xE1C7D4", Offset = "0xE1C7D4", VA = "0xE1C7D4")]
		public RaycastHitEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D8")]
	public class Vector2Event : UnityEvent<Vector2>
	{
		[Token(Token = "0x6000BAA")]
		[Address(RVA = "0xE1C81C", Offset = "0xE1C81C", VA = "0xE1C81C")]
		public Vector2Event()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001D9")]
	public class Vector3Event : UnityEvent<Vector3>
	{
		[Token(Token = "0x6000BAB")]
		[Address(RVA = "0xE1C864", Offset = "0xE1C864", VA = "0xE1C864")]
		public Vector3Event()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001DA")]
	public class PointerEventDataEvent : UnityEvent<PointerEventData>
	{
		[Token(Token = "0x6000BAC")]
		[Address(RVA = "0xE1C8AC", Offset = "0xE1C8AC", VA = "0xE1C8AC")]
		public PointerEventDataEvent()
		{
		}
	}
	[Token(Token = "0x20001DB")]
	public class GrabbablesInTrigger : MonoBehaviour
	{
		[Token(Token = "0x4000CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dictionary<Collider, Grabbable> NearbyGrabbables;

		[Token(Token = "0x4000CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Dictionary<Collider, Grabbable> ValidGrabbables;

		[Token(Token = "0x4000CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Grabbable ClosestGrabbable;

		[Token(Token = "0x4000CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Dictionary<Collider, Grabbable> ValidRemoteGrabbables;

		[Token(Token = "0x4000CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Grabbable ClosestRemoteGrabbable;

		[Token(Token = "0x4000CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Events")]
		public bool FireGrabbableEvents;

		[Token(Token = "0x4000CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		[Tooltip("If true, Grabbables in the trigger will only be considered valid if no objects are in the way between it and this transform")]
		[Header("Collision Checks")]
		public bool RaycastRemoteGrabbables;

		[Token(Token = "0x4000CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
		[Tooltip(" If true, Remote Grabbables must not have any collisions between the Main Camera and the Remote Grabbable we are trying to reach. This can help prevent grabbing items through walls or around corners.")]
		public bool RemoteGrabbablesMustBeVisible;

		[Token(Token = "0x4000CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("If RaycastRemoteGrabbables is true, use these layers to detect collisions between the grabber and the potential grabbable object. By Default only looking for collisions on the 'Default' layer")]
		public LayerMask RemoteCollisionLayers;

		[Token(Token = "0x4000CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Grabbable _closest;

		[Token(Token = "0x4000CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float _lastDistance;

		[Token(Token = "0x4000CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float _thisDistance;

		[Token(Token = "0x4000CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<Collider, Grabbable> _valids;

		[Token(Token = "0x4000CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<Collider, Grabbable> _filtered;

		[Token(Token = "0x4000CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform _eyeTransform;

		[Token(Token = "0x6000BAD")]
		[Address(RVA = "0xE1C8F4", Offset = "0xE1C8F4", VA = "0xE1C8F4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BAE")]
		[Address(RVA = "0xE1CA44", Offset = "0xE1CA44", VA = "0xE1CA44")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BAF")]
		[Address(RVA = "0xE1CA5C", Offset = "0xE1CA5C", VA = "0xE1CA5C")]
		private void updateClosestGrabbable()
		{
		}

		[Token(Token = "0x6000BB0")]
		[Address(RVA = "0xE1CAE0", Offset = "0xE1CAE0", VA = "0xE1CAE0")]
		private void updateClosestRemoteGrabbables()
		{
		}

		[Token(Token = "0x6000BB1")]
		[Address(RVA = "0xE1CDE4", Offset = "0xE1CDE4", VA = "0xE1CDE4", Slot = "4")]
		public virtual Grabbable GetClosestGrabbable(Dictionary<Collider, Grabbable> grabbables, bool remoteOnly = false, bool raycastCheck = false)
		{
			return null;
		}

		[Token(Token = "0x6000BB2")]
		[Address(RVA = "0xE1D1F0", Offset = "0xE1D1F0", VA = "0xE1D1F0", Slot = "5")]
		public virtual bool CheckObjectBetweenGrabbable(Vector3 startingPosition, Grabbable theGrabbable)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB3")]
		[Address(RVA = "0xE1CB8C", Offset = "0xE1CB8C", VA = "0xE1CB8C")]
		public Dictionary<Collider, Grabbable> GetValidGrabbables(Dictionary<Collider, Grabbable> grabs)
		{
			return null;
		}

		[Token(Token = "0x6000BB4")]
		[Address(RVA = "0xE1D3B8", Offset = "0xE1D3B8", VA = "0xE1D3B8", Slot = "6")]
		protected virtual bool isValidGrabbable(Collider col, Grabbable grab)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BB5")]
		[Address(RVA = "0xE1D620", Offset = "0xE1D620", VA = "0xE1D620", Slot = "7")]
		public virtual Dictionary<Collider, Grabbable> SanitizeGrabbables(Dictionary<Collider, Grabbable> grabs)
		{
			return null;
		}

		[Token(Token = "0x6000BB6")]
		[Address(RVA = "0xE1D99C", Offset = "0xE1D99C", VA = "0xE1D99C", Slot = "8")]
		public virtual void AddNearbyGrabbable(Collider col, Grabbable grabObject)
		{
		}

		[Token(Token = "0x6000BB7")]
		[Address(RVA = "0xE1DAD0", Offset = "0xE1DAD0", VA = "0xE1DAD0", Slot = "9")]
		public virtual void RemoveNearbyGrabbable(Collider col, Grabbable grabObject)
		{
		}

		[Token(Token = "0x6000BB8")]
		[Address(RVA = "0xE1DBA8", Offset = "0xE1DBA8", VA = "0xE1DBA8", Slot = "10")]
		public virtual void RemoveNearbyGrabbable(Grabbable grabObject)
		{
		}

		[Token(Token = "0x6000BB9")]
		[Address(RVA = "0xE1DD98", Offset = "0xE1DD98", VA = "0xE1DD98", Slot = "11")]
		public virtual void AddValidRemoteGrabbable(Collider col, Grabbable grabObject)
		{
		}

		[Token(Token = "0x6000BBA")]
		[Address(RVA = "0xE1E070", Offset = "0xE1E070", VA = "0xE1E070", Slot = "12")]
		public virtual void RemoveValidRemoteGrabbable(Collider col, Grabbable grabObject)
		{
		}

		[Token(Token = "0x6000BBB")]
		[Address(RVA = "0xE1E148", Offset = "0xE1E148", VA = "0xE1E148")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000BBC")]
		[Address(RVA = "0xE1E298", Offset = "0xE1E298", VA = "0xE1E298")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000BBD")]
		[Address(RVA = "0xE1E3C0", Offset = "0xE1E3C0", VA = "0xE1E3C0")]
		public GrabbablesInTrigger()
		{
		}
	}
	[Token(Token = "0x20001DC")]
	public class GrabbableUnityEvents : GrabbableEvents
	{
		[Token(Token = "0x4000CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GrabberEvent onGrab;

		[Token(Token = "0x4000CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEvent onRelease;

		[Token(Token = "0x4000CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEvent onBecomesClosestGrabbable;

		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEvent onNoLongerClosestGrabbable;

		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEvent onBecomesClosestRemoteGrabbable;

		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent onNoLongerClosestRemoteGrabbable;

		[Token(Token = "0x4000CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FloatEvent onGrip;

		[Token(Token = "0x4000CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public FloatEvent onTrigger;

		[Token(Token = "0x4000CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UnityEvent onTriggerDown;

		[Token(Token = "0x4000CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public UnityEvent onTriggerUp;

		[Token(Token = "0x4000CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public UnityEvent onButton1;

		[Token(Token = "0x4000CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public UnityEvent onButton1Down;

		[Token(Token = "0x4000CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public UnityEvent onButton1Up;

		[Token(Token = "0x4000CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public UnityEvent onButton2;

		[Token(Token = "0x4000CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public UnityEvent onButton2Down;

		[Token(Token = "0x4000CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public UnityEvent onButton2Up;

		[Token(Token = "0x4000CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public UnityEvent onSnapZoneEnter;

		[Token(Token = "0x4000CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public UnityEvent onSnapZoneExit;

		[Token(Token = "0x6000BBE")]
		[Address(RVA = "0xE1E3F0", Offset = "0xE1E3F0", VA = "0xE1E3F0", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6000BBF")]
		[Address(RVA = "0xE1E460", Offset = "0xE1E460", VA = "0xE1E460", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x6000BC0")]
		[Address(RVA = "0xE1E474", Offset = "0xE1E474", VA = "0xE1E474", Slot = "7")]
		public override void OnBecomesClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000BC1")]
		[Address(RVA = "0xE1E488", Offset = "0xE1E488", VA = "0xE1E488", Slot = "9")]
		public override void OnNoLongerClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000BC2")]
		[Address(RVA = "0xE1E49C", Offset = "0xE1E49C", VA = "0xE1E49C", Slot = "11")]
		public override void OnBecomesClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000BC3")]
		[Address(RVA = "0xE1E4B0", Offset = "0xE1E4B0", VA = "0xE1E4B0", Slot = "13")]
		public override void OnNoLongerClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6000BC4")]
		[Address(RVA = "0xE1E4C4", Offset = "0xE1E4C4", VA = "0xE1E4C4", Slot = "15")]
		public override void OnGrip(float gripValue)
		{
		}

		[Token(Token = "0x6000BC5")]
		[Address(RVA = "0xE1E530", Offset = "0xE1E530", VA = "0xE1E530", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6000BC6")]
		[Address(RVA = "0xE1E59C", Offset = "0xE1E59C", VA = "0xE1E59C", Slot = "17")]
		public override void OnTriggerDown()
		{
		}

		[Token(Token = "0x6000BC7")]
		[Address(RVA = "0xE1E5B0", Offset = "0xE1E5B0", VA = "0xE1E5B0", Slot = "18")]
		public override void OnTriggerUp()
		{
		}

		[Token(Token = "0x6000BC8")]
		[Address(RVA = "0xE1E5C4", Offset = "0xE1E5C4", VA = "0xE1E5C4", Slot = "19")]
		public override void OnButton1()
		{
		}

		[Token(Token = "0x6000BC9")]
		[Address(RVA = "0xE1E5D8", Offset = "0xE1E5D8", VA = "0xE1E5D8", Slot = "20")]
		public override void OnButton1Down()
		{
		}

		[Token(Token = "0x6000BCA")]
		[Address(RVA = "0xE1E5EC", Offset = "0xE1E5EC", VA = "0xE1E5EC", Slot = "21")]
		public override void OnButton1Up()
		{
		}

		[Token(Token = "0x6000BCB")]
		[Address(RVA = "0xE1E600", Offset = "0xE1E600", VA = "0xE1E600", Slot = "22")]
		public override void OnButton2()
		{
		}

		[Token(Token = "0x6000BCC")]
		[Address(RVA = "0xE1E614", Offset = "0xE1E614", VA = "0xE1E614", Slot = "23")]
		public override void OnButton2Down()
		{
		}

		[Token(Token = "0x6000BCD")]
		[Address(RVA = "0xE1E628", Offset = "0xE1E628", VA = "0xE1E628", Slot = "24")]
		public override void OnButton2Up()
		{
		}

		[Token(Token = "0x6000BCE")]
		[Address(RVA = "0xE1E63C", Offset = "0xE1E63C", VA = "0xE1E63C", Slot = "25")]
		public override void OnSnapZoneEnter()
		{
		}

		[Token(Token = "0x6000BCF")]
		[Address(RVA = "0xE1E650", Offset = "0xE1E650", VA = "0xE1E650", Slot = "26")]
		public override void OnSnapZoneExit()
		{
		}

		[Token(Token = "0x6000BD0")]
		[Address(RVA = "0xE1E664", Offset = "0xE1E664", VA = "0xE1E664")]
		public GrabbableUnityEvents()
		{
		}
	}
	[Token(Token = "0x20001DD")]
	[RequireComponent(typeof(GrabbablesInTrigger))]
	public class Grabber : MonoBehaviour
	{
		[Token(Token = "0x4000CD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Which controller side. None if not attached to a controller.")]
		[Header("Hand Side")]
		public ControllerHand HandSide;

		[Token(Token = "0x4000CD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The default hold type for all Grabbables. A Grabbable can manually override this default.")]
		[Header("Grab Settings")]
		public HoldType DefaultHoldType;

		[Token(Token = "0x4000CD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The default grab button for all Grabbables. A Grabbable can manually override this default.")]
		public GrabButton DefaultGrabButton;

		[Token(Token = "0x4000CD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("(Optional) Input Action used to enact grab action.")]
		public InputActionReference GrabAction;

		[Token(Token = "0x4000CD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Hold / Release")]
		[Range(0f, 1f)]
		[Tooltip("0-1 determine how much to consider a grip. Example : 0.75 is holding the grip down 3/4 of the way.")]
		public float GripAmount;

		[Token(Token = "0x4000CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 1f)]
		[Tooltip("How much grip considered to release an object (0-1). Example : 0.75 is holding the grip down 3/4 of the way")]
		public float ReleaseGripAmount;

		[Token(Token = "0x4000CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("How many seconds to check for grab input while Grip is held down. After grip is held down for this long, grip will need to be repressed in order to pick up an object.")]
		public float GrabCheckSeconds;

		[Token(Token = "0x4000CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float currentGrabTime;

		[Token(Token = "0x4000CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Assign a Grabbable here if you want to auto equip it on Start")]
		[Header("Equip on Start")]
		public Grabbable EquipGrabbableOnStart;

		[Token(Token = "0x4000CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Hand Graphics")]
		[Tooltip("Root transform that holds hands models. We may want to hide these while holding certain objects, or parent this object to the grabbable so they follow the object perfectly.")]
		public Transform HandsGraphics;

		[Token(Token = "0x4000CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform handsGraphicsParent;

		[Token(Token = "0x4000CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 handsGraphicsPosition;

		[Token(Token = "0x4000CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Quaternion handsGraphicsRotation;

		[Token(Token = "0x4000CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("Shown for Debug :")]
		[Tooltip("The Grabbable we are currently holding. Null if not holding anything.")]
		public Grabbable HeldGrabbable;

		[Token(Token = "0x4000CE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Same as holding down grip if set to true. Should not have same value as ForceRelease.")]
		public bool ForceGrab;

		[Token(Token = "0x4000CE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		[Tooltip("Force the release of grip if set to true. Should not have same value as ForceGrab.")]
		public bool ForceRelease;

		[Token(Token = "0x4000CE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Tooltip("Time.time when we last dropped a Grabbable")]
		public float LastDropTime;

		[Token(Token = "0x4000CE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Grabbable previousClosest;

		[Token(Token = "0x4000CE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Grabbable previousClosestRemote;

		[Token(Token = "0x4000CE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private GrabbablesInTrigger grabsInTrigger;

		[Token(Token = "0x4000CE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Grabbable flyingGrabbable;

		[Token(Token = "0x4000CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float flyingTime;

		[Token(Token = "0x4000CEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[HideInInspector]
		public Vector3 PreviousPosition;

		[Token(Token = "0x4000CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[HideInInspector]
		public Transform DummyTransform;

		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Rigidbody rb;

		[Token(Token = "0x4000CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private InputBridge input;

		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private ConfigurableJoint joint;

		[Token(Token = "0x4000CEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[HideInInspector]
		public bool FreshGrip;

		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Header("Grabber Events")]
		[Tooltip("Called immediately before a Grabbable object is officially grabbed")]
		public GrabbableEvent onGrabEvent;

		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("Called immediately after a Grabbable object is grabbed. Use this if you need the Grabbable object to be setup before accessing it")]
		public GrabbableEvent onAfterGrabEvent;

		[Token(Token = "0x4000CF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Tooltip("Called immediately before droppping an item")]
		public GrabbableEvent onReleaseEvent;

		[Token(Token = "0x4000CF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[HideInInspector]
		public VelocityTracker velocityTracker;

		[Token(Token = "0x170000FA")]
		public bool HoldingItem
		{
			[Token(Token = "0x6000BD1")]
			[Address(RVA = "0xE1E66C", Offset = "0xE1E66C", VA = "0xE1E66C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000FB")]
		public bool RemoteGrabbingItem
		{
			[Token(Token = "0x6000BD2")]
			[Address(RVA = "0xE1E6CC", Offset = "0xE1E6CC", VA = "0xE1E6CC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170000FC")]
		public GrabbablesInTrigger GrabsInTrigger
		{
			[Token(Token = "0x6000BD3")]
			[Address(RVA = "0xE1E72C", Offset = "0xE1E72C", VA = "0xE1E72C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FD")]
		public Grabbable RemoteGrabbingGrabbable
		{
			[Token(Token = "0x6000BD4")]
			[Address(RVA = "0xE1E734", Offset = "0xE1E734", VA = "0xE1E734")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170000FE")]
		public Vector3 handsGraphicsGrabberOffset
		{
			[Token(Token = "0x6000BD5")]
			[Address(RVA = "0xE1E73C", Offset = "0xE1E73C", VA = "0xE1E73C")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000BD6")]
			[Address(RVA = "0xE1E748", Offset = "0xE1E748", VA = "0xE1E748")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170000FF")]
		public Vector3 handsGraphicsGrabberOffsetRotation
		{
			[Token(Token = "0x6000BD7")]
			[Address(RVA = "0xE1E754", Offset = "0xE1E754", VA = "0xE1E754")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000BD8")]
			[Address(RVA = "0xE1E760", Offset = "0xE1E760", VA = "0xE1E760")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000BD9")]
		[Address(RVA = "0xE1E76C", Offset = "0xE1E76C", VA = "0xE1E76C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BDA")]
		[Address(RVA = "0xE1EC38", Offset = "0xE1EC38", VA = "0xE1EC38")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BDB")]
		[Address(RVA = "0xE1F3FC", Offset = "0xE1F3FC", VA = "0xE1F3FC", Slot = "4")]
		protected virtual void updateFreshGrabStatus()
		{
		}

		[Token(Token = "0x6000BDC")]
		[Address(RVA = "0xE1EE0C", Offset = "0xE1EE0C", VA = "0xE1EE0C")]
		private void checkGrabbableEvents()
		{
		}

		[Token(Token = "0x6000BDD")]
		[Address(RVA = "0xE1F550", Offset = "0xE1F550", VA = "0xE1F550", Slot = "5")]
		public virtual bool InputCheckGrab()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BDE")]
		[Address(RVA = "0xE1F638", Offset = "0xE1F638", VA = "0xE1F638", Slot = "6")]
		public virtual bool GetInputDownForGrabbable(Grabbable grabObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BDF")]
		[Address(RVA = "0xE1F7B0", Offset = "0xE1F7B0", VA = "0xE1F7B0")]
		private HoldType getHoldType(Grabbable grab)
		{
			return default(HoldType);
		}

		[Token(Token = "0x6000BE0")]
		[Address(RVA = "0xE1F934", Offset = "0xE1F934", VA = "0xE1F934", Slot = "7")]
		public virtual GrabButton GetGrabButton(Grabbable grab)
		{
			return default(GrabButton);
		}

		[Token(Token = "0x6000BE1")]
		[Address(RVA = "0xE1F574", Offset = "0xE1F574", VA = "0xE1F574")]
		private Grabbable getClosestOrRemote()
		{
			return null;
		}

		[Token(Token = "0x6000BE2")]
		[Address(RVA = "0xE1F31C", Offset = "0xE1F31C", VA = "0xE1F31C")]
		private bool inputCheckRelease()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BE3")]
		[Address(RVA = "0xE1F470", Offset = "0xE1F470", VA = "0xE1F470")]
		private float getGrabInput(GrabButton btn)
		{
			return default(float);
		}

		[Token(Token = "0x6000BE4")]
		[Address(RVA = "0xE1F848", Offset = "0xE1F848", VA = "0xE1F848")]
		private bool getToggleInput(GrabButton btn)
		{
			return default(bool);
		}

		[Token(Token = "0x6000BE5")]
		[Address(RVA = "0xE1F9CC", Offset = "0xE1F9CC", VA = "0xE1F9CC", Slot = "8")]
		public virtual bool TryGrab()
		{
			return default(bool);
		}

		[Token(Token = "0x6000BE6")]
		[Address(RVA = "0xE1FB24", Offset = "0xE1FB24", VA = "0xE1FB24", Slot = "9")]
		public virtual void GrabGrabbable(Grabbable item)
		{
		}

		[Token(Token = "0x6000BE7")]
		[Address(RVA = "0xE1FCA8", Offset = "0xE1FCA8", VA = "0xE1FCA8", Slot = "10")]
		public virtual void DidDrop()
		{
		}

		[Token(Token = "0x6000BE8")]
		[Address(RVA = "0xE1FDCC", Offset = "0xE1FDCC", VA = "0xE1FDCC", Slot = "11")]
		public virtual void HideHandGraphics()
		{
		}

		[Token(Token = "0x6000BE9")]
		[Address(RVA = "0xE1FE60", Offset = "0xE1FE60", VA = "0xE1FE60", Slot = "12")]
		public virtual void ResetHandGraphics()
		{
		}

		[Token(Token = "0x6000BEA")]
		[Address(RVA = "0xE1FF5C", Offset = "0xE1FF5C", VA = "0xE1FF5C", Slot = "13")]
		public virtual void TryRelease()
		{
		}

		[Token(Token = "0x6000BEB")]
		[Address(RVA = "0xE1ED68", Offset = "0xE1ED68", VA = "0xE1ED68")]
		public void resetFlyingGrabbable()
		{
		}

		[Token(Token = "0x6000BEC")]
		[Address(RVA = "0xE1FFF0", Offset = "0xE1FFF0", VA = "0xE1FFF0", Slot = "14")]
		public virtual Vector3 GetGrabberAveragedVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BED")]
		[Address(RVA = "0xE20010", Offset = "0xE20010", VA = "0xE20010", Slot = "15")]
		public virtual Vector3 GetGrabberAveragedAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000BEE")]
		[Address(RVA = "0xE20030", Offset = "0xE20030", VA = "0xE20030")]
		public Grabber()
		{
		}
	}
	[Token(Token = "0x20001DE")]
	public class GrabPoint : MonoBehaviour
	{
		[Token(Token = "0x4000CF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Hand Pose")]
		public HandPoseType handPoseType;

		[Token(Token = "0x4000CF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If HandPoseType = 'HandPose', this HandPose object will be applied to the hand when this grab point is in use")]
		public HandPose SelectedHandPose;

		[Token(Token = "0x4000CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If HandPoseType = 'AnimatorID', this id will be set on the hand animator when grabbed. Set to 'Default' to inherit the Grabbable's HandPose. Otherwise this HandPose ID will be used.")]
		public HandPoseId HandPose;

		[Token(Token = "0x4000CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Header("Valid Hands")]
		[Tooltip("Can this Grab Point be used by a left-handed Grabber?")]
		public bool LeftHandIsValid;

		[Token(Token = "0x4000CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		[Tooltip("Can this Grab Point be used by a right-handed Grabber?")]
		public bool RightHandIsValid;

		[Token(Token = "0x4000CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Parent to")]
		[Tooltip("If specified, the Hand Model will be parented here when snapped")]
		public Transform HandPosition;

		[Token(Token = "0x4000CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Angle Restriction")]
		[Range(0f, 360f)]
		[Tooltip("GrabPoint is not considered valid if the angle between the GrabPoint and Grabber is greater than this amount")]
		public float MaxDegreeDifferenceAllowed;

		[Token(Token = "0x4000CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Minimum value Hand Animator will blend to. Example : If IndexBlendMin = 0.4 and Trigger button is not held down, the LayerWeight will be set to 0.4")]
		[Range(0f, 1f)]
		[Header("Finger Blending")]
		public float IndexBlendMin;

		[Token(Token = "0x4000CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Maximum value Hand Animator will blend to. Example : If IndexBlendMax = 0.6 and Trigger button is held all the way down, the LayerWeight will be set to 0.6")]
		[Range(0f, 1f)]
		public float IndexBlendMax;

		[Token(Token = "0x4000CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Minimum value Hand Animator will blend to if thumb control is not being touched.")]
		[Range(0f, 1f)]
		public float ThumbBlendMin;

		[Token(Token = "0x4000CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Maximum value Hand Animator will blend to if thumb control is being touched.")]
		[Range(0f, 1f)]
		public float ThumbBlendMax;

		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 previewModelOffsetLeft;

		[Token(Token = "0x4000D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 previewModelOffsetRight;

		[Token(Token = "0x4000D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Header("Editor")]
		[Tooltip("Show a green arc in the Scene view representing MaxDegreeDifferenceAllowed")]
		public bool ShowAngleGizmo;

		[Token(Token = "0x4000D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		private bool offsetFound;

		[Token(Token = "0x6000BEF")]
		[Address(RVA = "0xE20054", Offset = "0xE20054", VA = "0xE20054")]
		public void UpdatePreviewTransforms()
		{
		}

		[Token(Token = "0x6000BF0")]
		[Address(RVA = "0xE203C8", Offset = "0xE203C8", VA = "0xE203C8")]
		public void UpdateHandPosePreview()
		{
		}

		[Token(Token = "0x6000BF1")]
		[Address(RVA = "0xE2058C", Offset = "0xE2058C", VA = "0xE2058C")]
		public void UpdateAutoPoserPreview()
		{
		}

		[Token(Token = "0x6000BF2")]
		[Address(RVA = "0xE20844", Offset = "0xE20844", VA = "0xE20844")]
		public void UpdateChildAnimators()
		{
		}

		[Token(Token = "0x6000BF3")]
		[Address(RVA = "0xE209CC", Offset = "0xE209CC", VA = "0xE209CC")]
		public GrabPoint()
		{
		}
	}
	[Token(Token = "0x20001DF")]
	public class HandModelSelector : MonoBehaviour
	{
		[Token(Token = "0x4000D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Child index of the hand model to use if nothing stored in playerprefs or LoadHandSelectionFromPrefs set to false")]
		public int DefaultHandsModel;

		[Token(Token = "0x4000D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If true, the selected hand model will be saved and loaded from player prefs")]
		public bool LoadHandSelectionFromPrefs;

		[Token(Token = "0x4000D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Input used to toggle between hands")]
		public ControllerBinding ToggleHandsInput;

		[Token(Token = "0x4000D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("This transform holds all of the hand models. Can be used to enabled / disabled various hand options.")]
		public Transform LeftHandGFXHolder;

		[Token(Token = "0x4000D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("This transform holds all of the hand models. Can be used to enabled / disabled various hand options")]
		public Transform RightHandGFXHolder;

		[Token(Token = "0x4000D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int _selectedHandGFX;

		[Token(Token = "0x4000D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Used for IK Hands / Body option")]
		public CharacterIK IKBody;

		[Token(Token = "0x4000D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UIPointer uiPoint;

		[Token(Token = "0x4000D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private List<Transform> leftHandModels;

		[Token(Token = "0x4000D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform activatedLeftModel;

		[Token(Token = "0x4000D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<Transform> rightHandModels;

		[Token(Token = "0x4000D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform activatedRightModel;

		[Token(Token = "0x6000BF4")]
		[Address(RVA = "0xE20A10", Offset = "0xE20A10", VA = "0xE20A10")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BF5")]
		[Address(RVA = "0xE21228", Offset = "0xE21228", VA = "0xE21228")]
		private void Update()
		{
		}

		[Token(Token = "0x6000BF6")]
		[Address(RVA = "0xE20AAC", Offset = "0xE20AAC", VA = "0xE20AAC")]
		public void CacheHandModels()
		{
		}

		[Token(Token = "0x6000BF7")]
		[Address(RVA = "0xE20CC4", Offset = "0xE20CC4", VA = "0xE20CC4")]
		public void ChangeHandsModel(int childIndex, bool save = false)
		{
		}

		[Token(Token = "0x6000BF8")]
		[Address(RVA = "0xE21260", Offset = "0xE21260", VA = "0xE21260")]
		public HandModelSelector()
		{
		}
	}
	[Token(Token = "0x20001E0")]
	public class HeadCollisionFade : MonoBehaviour
	{
		[Token(Token = "0x4000D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ScreenFader fader;

		[Token(Token = "0x4000D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float FadeDistance;

		[Token(Token = "0x4000D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float FadeOutDistance;

		[Token(Token = "0x4000D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float MinFade;

		[Token(Token = "0x4000D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float MaxFade;

		[Token(Token = "0x4000D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float FadeSpeed;

		[Token(Token = "0x4000D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Only fade the screen if the HMD is registering as Active")]
		public bool CheckOnlyIfHMDActive;

		[Token(Token = "0x4000D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool IgnoreHeldGrabbables;

		[Token(Token = "0x4000D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform DistanceTransform;

		[Token(Token = "0x4000D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int cols;

		[Token(Token = "0x4000D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float currentFade;

		[Token(Token = "0x4000D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float lastFade;

		[Token(Token = "0x4000D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<Collider> collisions;

		[Token(Token = "0x6000BF9")]
		[Address(RVA = "0xE21278", Offset = "0xE21278", VA = "0xE21278")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BFA")]
		[Address(RVA = "0xE21338", Offset = "0xE21338", VA = "0xE21338")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000BFB")]
		[Address(RVA = "0xE215EC", Offset = "0xE215EC", VA = "0xE215EC")]
		private void OnCollisionEnter(Collision col)
		{
		}

		[Token(Token = "0x6000BFC")]
		[Address(RVA = "0xE218FC", Offset = "0xE218FC", VA = "0xE218FC")]
		private void OnCollisionExit(Collision col)
		{
		}

		[Token(Token = "0x6000BFD")]
		[Address(RVA = "0xE21A18", Offset = "0xE21A18", VA = "0xE21A18")]
		public HeadCollisionFade()
		{
		}
	}
	[Token(Token = "0x20001E1")]
	public class HeadCollisionMove : MonoBehaviour
	{
		[Token(Token = "0x20001E2")]
		[CompilerGenerated]
		private sealed class <PushBackPlayer>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HeadCollisionMove <>4__this;

			[Token(Token = "0x17000100")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C06")]
				[Address(RVA = "0xE21CC0", Offset = "0xE21CC0", VA = "0xE21CC0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000101")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C08")]
				[Address(RVA = "0xE21D08", Offset = "0xE21D08", VA = "0xE21D08", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C03")]
			[Address(RVA = "0xE21B74", Offset = "0xE21B74", VA = "0xE21B74")]
			[DebuggerHidden]
			public <PushBackPlayer>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6000C04")]
			[Address(RVA = "0xE21BFC", Offset = "0xE21BFC", VA = "0xE21BFC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000C05")]
			[Address(RVA = "0xE21C00", Offset = "0xE21C00", VA = "0xE21C00", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C07")]
			[Address(RVA = "0xE21CC8", Offset = "0xE21CC8", VA = "0xE21CC8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Enable collision? Set to false if you don't want to enable this")]
		public bool CollisionEnabled;

		[Token(Token = "0x4000D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Tooltip("Only collide against the specified World Tag?")]
		public bool OnlyCollideAgainstWorld;

		[Token(Token = "0x4000D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private string worldTag;

		[Token(Token = "0x4000D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private GameObject cameraRig;

		[Token(Token = "0x4000D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Transform centerEyeAnchor;

		[Token(Token = "0x6000BFE")]
		[Address(RVA = "0xE21A3C", Offset = "0xE21A3C", VA = "0xE21A3C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000BFF")]
		[Address(RVA = "0xE21A40", Offset = "0xE21A40", VA = "0xE21A40")]
		private void OnCollisionStay(Collision collision)
		{
		}

		[Token(Token = "0x6000C00")]
		[Address(RVA = "0xE21B18", Offset = "0xE21B18", VA = "0xE21B18")]
		private void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x6000C01")]
		[Address(RVA = "0xE21AA4", Offset = "0xE21AA4", VA = "0xE21AA4")]
		[IteratorStateMachine(typeof(<PushBackPlayer>d__8))]
		private IEnumerator PushBackPlayer()
		{
			return null;
		}

		[Token(Token = "0x6000C02")]
		[Address(RVA = "0xE21B9C", Offset = "0xE21B9C", VA = "0xE21B9C")]
		public HeadCollisionMove()
		{
		}
	}
	[Token(Token = "0x20001E3")]
	public class HingeHelper : GrabbableEvents
	{
		[Token(Token = "0x4000D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("If True the SnapGraphics tranfsorm will have its local Y rotation snapped to the nearest degrees specified in SnapDegrees")]
		[Header("Snap Options")]
		public bool SnapToDegrees;

		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Snap the Y rotation to the nearest")]
		public float SnapDegrees;

		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The Transform of the object to be rotated if SnapToDegrees is true")]
		public Transform SnapGraphics;

		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Play this sound on snap")]
		public AudioClip SnapSound;

		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Randomize pitch of SnapSound by this amount")]
		public float RandomizePitch;

		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Add haptics amount (0-1) to controller if SnapToDegrees is True. Set this to 0 for no Haptics.")]
		public float SnapHaptics;

		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Text Label (Optional)")]
		public Text LabelToUpdate;

		[Token(Token = "0x4000D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Change Events")]
		public FloatEvent onHingeChange;

		[Token(Token = "0x4000D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FloatEvent onHingeSnapChange;

		[Token(Token = "0x4000D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Rigidbody rigid;

		[Token(Token = "0x4000D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float _lastDegrees;

		[Token(Token = "0x4000D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float _lastSnapDegrees;

		[Token(Token = "0x6000C09")]
		[Address(RVA = "0xE21D10", Offset = "0xE21D10", VA = "0xE21D10")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C0A")]
		[Address(RVA = "0xE21D68", Offset = "0xE21D68", VA = "0xE21D68")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C0B")]
		[Address(RVA = "0xE22004", Offset = "0xE22004", VA = "0xE22004")]
		public void OnSnapChange(float yAngle)
		{
		}

		[Token(Token = "0x6000C0C")]
		[Address(RVA = "0xE223A8", Offset = "0xE223A8", VA = "0xE223A8", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x6000C0D")]
		[Address(RVA = "0xE21F98", Offset = "0xE21F98", VA = "0xE21F98")]
		public void OnHingeChange(float hingeAmount)
		{
		}

		[Token(Token = "0x6000C0E")]
		[Address(RVA = "0xE21F74", Offset = "0xE21F74", VA = "0xE21F74")]
		private float getSmoothedValue(float val)
		{
			return default(float);
		}

		[Token(Token = "0x6000C0F")]
		[Address(RVA = "0xE22454", Offset = "0xE22454", VA = "0xE22454")]
		public HingeHelper()
		{
		}
	}
	[Token(Token = "0x20001E4")]
	public enum ControllerHand
	{
		[Token(Token = "0x4000D31")]
		Left,
		[Token(Token = "0x4000D32")]
		Right,
		[Token(Token = "0x4000D33")]
		None
	}
	[Token(Token = "0x20001E5")]
	public enum ControllerBinding
	{
		[Token(Token = "0x4000D35")]
		None,
		[Token(Token = "0x4000D36")]
		AButton,
		[Token(Token = "0x4000D37")]
		AButtonDown,
		[Token(Token = "0x4000D38")]
		BButton,
		[Token(Token = "0x4000D39")]
		BButtonDown,
		[Token(Token = "0x4000D3A")]
		XButton,
		[Token(Token = "0x4000D3B")]
		XButtonDown,
		[Token(Token = "0x4000D3C")]
		YButton,
		[Token(Token = "0x4000D3D")]
		YButtonDown,
		[Token(Token = "0x4000D3E")]
		LeftTrigger,
		[Token(Token = "0x4000D3F")]
		LeftTriggerDown,
		[Token(Token = "0x4000D40")]
		LeftGrip,
		[Token(Token = "0x4000D41")]
		LeftGripDown,
		[Token(Token = "0x4000D42")]
		LeftThumbstick,
		[Token(Token = "0x4000D43")]
		LeftThumbstickDown,
		[Token(Token = "0x4000D44")]
		RightTrigger,
		[Token(Token = "0x4000D45")]
		RightTriggerDown,
		[Token(Token = "0x4000D46")]
		RightGrip,
		[Token(Token = "0x4000D47")]
		RightGripDown,
		[Token(Token = "0x4000D48")]
		RightThumbstick,
		[Token(Token = "0x4000D49")]
		RightThumbstickDown,
		[Token(Token = "0x4000D4A")]
		StartButton,
		[Token(Token = "0x4000D4B")]
		StartButtonDown,
		[Token(Token = "0x4000D4C")]
		BackButton,
		[Token(Token = "0x4000D4D")]
		BackButtonDown
	}
	[Token(Token = "0x20001E6")]
	public enum GrabbedControllerBinding
	{
		[Token(Token = "0x4000D4F")]
		None,
		[Token(Token = "0x4000D50")]
		Button1,
		[Token(Token = "0x4000D51")]
		Button1Down,
		[Token(Token = "0x4000D52")]
		Button2,
		[Token(Token = "0x4000D53")]
		Button2Down,
		[Token(Token = "0x4000D54")]
		Trigger,
		[Token(Token = "0x4000D55")]
		TriggerDown,
		[Token(Token = "0x4000D56")]
		Grip,
		[Token(Token = "0x4000D57")]
		GripDown
	}
	[Token(Token = "0x20001E7")]
	public enum InputAxis
	{
		[Token(Token = "0x4000D59")]
		None,
		[Token(Token = "0x4000D5A")]
		LeftThumbStickAxis,
		[Token(Token = "0x4000D5B")]
		LeftTouchPadAxis,
		[Token(Token = "0x4000D5C")]
		RightThumbStickAxis,
		[Token(Token = "0x4000D5D")]
		RightTouchPadAxis
	}
	[Token(Token = "0x20001E8")]
	public enum ControllerType
	{
		[Token(Token = "0x4000D5F")]
		None,
		[Token(Token = "0x4000D60")]
		Unknown,
		[Token(Token = "0x4000D61")]
		OculusTouch,
		[Token(Token = "0x4000D62")]
		Wand,
		[Token(Token = "0x4000D63")]
		Knuckles
	}
	[Token(Token = "0x20001E9")]
	public enum HandControl
	{
		[Token(Token = "0x4000D65")]
		LeftGrip,
		[Token(Token = "0x4000D66")]
		RightGrip,
		[Token(Token = "0x4000D67")]
		LeftTrigger,
		[Token(Token = "0x4000D68")]
		RightTrigger,
		[Token(Token = "0x4000D69")]
		None
	}
	[Token(Token = "0x20001EA")]
	public enum GrabButton
	{
		[Token(Token = "0x4000D6B")]
		Grip,
		[Token(Token = "0x4000D6C")]
		Trigger,
		[Token(Token = "0x4000D6D")]
		Inherit
	}
	[Token(Token = "0x20001EB")]
	public enum HoldType
	{
		[Token(Token = "0x4000D6F")]
		HoldDown,
		[Token(Token = "0x4000D70")]
		Toggle,
		[Token(Token = "0x4000D71")]
		Inherit
	}
	[Token(Token = "0x20001EC")]
	public enum XRInputSource
	{
		[Token(Token = "0x4000D73")]
		XRInput,
		[Token(Token = "0x4000D74")]
		OVRInput,
		[Token(Token = "0x4000D75")]
		SteamVR,
		[Token(Token = "0x4000D76")]
		Pico,
		[Token(Token = "0x4000D77")]
		UnityInput,
		[Token(Token = "0x4000D78")]
		WebXR,
		[Token(Token = "0x4000D79")]
		None
	}
	[Token(Token = "0x20001ED")]
	public enum SDKProvider
	{
		[Token(Token = "0x4000D7B")]
		Unknown,
		[Token(Token = "0x4000D7C")]
		OculusSDK,
		[Token(Token = "0x4000D7D")]
		OpenVR
	}
	[Token(Token = "0x20001EE")]
	public class InputBridge : MonoBehaviour
	{
		[Token(Token = "0x20001EF")]
		public delegate void InputsUpdatedAction();

		[Token(Token = "0x20001F0")]
		public delegate void ControllerFoundAction();

		[Token(Token = "0x20001F1")]
		[CompilerGenerated]
		private sealed class <changeOriginModeRoutine>d__178 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000DE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000DE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000DE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InputBridge <>4__this;

			[Token(Token = "0x4000DE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public TrackingOriginModeFlags trackingOrigin;

			[Token(Token = "0x1700010A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C63")]
				[Address(RVA = "0xE2663C", Offset = "0xE2663C", VA = "0xE2663C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700010B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C65")]
				[Address(RVA = "0xE26684", Offset = "0xE26684", VA = "0xE26684", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C60")]
			[Address(RVA = "0xE26078", Offset = "0xE26078", VA = "0xE26078")]
			[DebuggerHidden]
			public <changeOriginModeRoutine>d__178(int <>1__state)
			{
			}

			[Token(Token = "0x6000C61")]
			[Address(RVA = "0xE2640C", Offset = "0xE2640C", VA = "0xE2640C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000C62")]
			[Address(RVA = "0xE26410", Offset = "0xE26410", VA = "0xE26410", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C64")]
			[Address(RVA = "0xE26644", Offset = "0xE26644", VA = "0xE26644", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001F2")]
		[CompilerGenerated]
		private sealed class <Vibrate>d__180 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000DE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000DE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000DE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float duration;

			[Token(Token = "0x1700010C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000C69")]
				[Address(RVA = "0xE2673C", Offset = "0xE2673C", VA = "0xE2673C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700010D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000C6B")]
				[Address(RVA = "0xE26784", Offset = "0xE26784", VA = "0xE26784", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000C66")]
			[Address(RVA = "0xE26110", Offset = "0xE26110", VA = "0xE26110")]
			[DebuggerHidden]
			public <Vibrate>d__180(int <>1__state)
			{
			}

			[Token(Token = "0x6000C67")]
			[Address(RVA = "0xE2668C", Offset = "0xE2668C", VA = "0xE2668C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000C68")]
			[Address(RVA = "0xE26690", Offset = "0xE26690", VA = "0xE26690", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000C6A")]
			[Address(RVA = "0xE26744", Offset = "0xE26744", VA = "0xE26744", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static InputBridge _instance;

		[Token(Token = "0x4000D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Header("Input Settings")]
		public XRInputSource InputSource;

		[Token(Token = "0x4000D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Specify an InputActionSet for when using the Unity Input system. These actions will be enabled on load.")]
		[SerializeField]
		public InputActionAsset actionSet;

		[Token(Token = "0x4000D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Tracking Origin")]
		[SerializeField]
		[Tooltip("Set the TrackingOriginModeFlags on device connect. Should typically be set to 'Floor'")]
		public TrackingOriginModeFlags TrackingOrigin;

		[Token(Token = "0x4000D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Header("Thumbstick Deadzone")]
		[Tooltip("Thumbstick X must be greater than this amount to be considered valid")]
		public float ThumbstickDeadzoneX;

		[Token(Token = "0x4000D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Thumbstick Y must be greater than this amount to be considered valid")]
		public float ThumbstickDeadzoneY;

		[Token(Token = "0x4000D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Header("Grip")]
		public float LeftGrip;

		[Token(Token = "0x4000D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool LeftGripDown;

		[Token(Token = "0x4000D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float RightGrip;

		[Token(Token = "0x4000D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool RightGripDown;

		[Token(Token = "0x4000D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Header("Trigger")]
		public float LeftTrigger;

		[Token(Token = "0x4000D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool LeftTriggerNear;

		[Token(Token = "0x4000D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool LeftTriggerUp;

		[Token(Token = "0x4000D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		public bool LeftTriggerDown;

		[Token(Token = "0x4000D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float RightTrigger;

		[Token(Token = "0x4000D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool RightTriggerUp;

		[Token(Token = "0x4000D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool RightTriggerDown;

		[Token(Token = "0x4000D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		public bool RightTriggerNear;

		[Token(Token = "0x4000D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		public bool LeftThumbNear;

		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool RightThumbNear;

		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		[Header("Thumbstick")]
		public bool LeftThumbstickDown;

		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
		public bool LeftThumbstickUp;

		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x57")]
		public bool RightThumbstickDown;

		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool RightThumbstickUp;

		[Token(Token = "0x4000D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		public bool LeftThumbstick;

		[Token(Token = "0x4000D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		public bool RightThumbstick;

		[Token(Token = "0x4000D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5B")]
		[Header("Buttons")]
		public bool AButton;

		[Token(Token = "0x4000D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Returns true if the A Button was pressed down this frame but not last")]
		public bool AButtonDown;

		[Token(Token = "0x4000D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
		public bool AButtonUp;

		[Token(Token = "0x4000D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
		public bool BButton;

		[Token(Token = "0x4000D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5F")]
		[Tooltip("Returns true if the B Button was pressed down this frame but not last")]
		public bool BButtonDown;

		[Token(Token = "0x4000D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool BButtonUp;

		[Token(Token = "0x4000D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		public bool XButton;

		[Token(Token = "0x4000D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		[Tooltip("Returns true if the X Button was pressed down this frame but not last")]
		public bool XButtonDown;

		[Token(Token = "0x4000DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		public bool XButtonUp;

		[Token(Token = "0x4000DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public bool YButton;

		[Token(Token = "0x4000DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		public bool YButtonDown;

		[Token(Token = "0x4000DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
		public bool YButtonUp;

		[Token(Token = "0x4000DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x67")]
		public bool StartButton;

		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool StartButtonDown;

		[Token(Token = "0x4000DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool BackButton;

		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		public bool BackButtonDown;

		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Header("Axis")]
		public Vector2 LeftThumbstickAxis;

		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Vector2 RightThumbstickAxis;

		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public Vector2 LeftTouchPadAxis;

		[Token(Token = "0x4000DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Vector2 RightTouchPadAxis;

		[Token(Token = "0x4000DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("SteamVR Only - Shows the curl value of the thumb. 0 = Fully extended, 1 = Fully Curled")]
		[Header("Finger Tracking")]
		public float LeftThumbCurl;

		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float LeftIndexCurl;

		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float LeftMiddleCurl;

		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float LeftRingCurl;

		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float LeftPinkyCurl;

		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("SteamVR Only - Shows the curl value of the thumb. 0 = Fully extended, 1 = Fully Curled")]
		public float RightThumbCurl;

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float RightIndexCurl;

		[Token(Token = "0x4000DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float RightMiddleCurl;

		[Token(Token = "0x4000DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float RightRingCurl;

		[Token(Token = "0x4000DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public float RightPinkyCurl;

		[Token(Token = "0x4000DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private float _downThreshold;

		[Token(Token = "0x4000DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool SteamVRSupport;

		[Token(Token = "0x4000DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[Header("HMD / Hardware")]
		public ControllerType ConnectedControllerType;

		[Token(Token = "0x4000DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("Is there an HMD present and in use.")]
		public bool HMDActive;

		[Token(Token = "0x4000DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCD")]
		[Tooltip("Returns true if the controller has both a Touchpad and a Joystick. Currently on the Valve Index has both.")]
		public bool SupportsBothTouchPadAndJoystick;

		[Token(Token = "0x4000DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCE")]
		[Tooltip("Returns true if the controllers support the 'indexTouch' XR input mapping. Currently only Oculus devices on the Oculus SDK support thumb touch. OpenVR is not supported.")]
		public bool SupportsIndexTouch;

		[Token(Token = "0x4000DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCF")]
		[Tooltip("Returns true if the controllers support the 'ThumbTouch' (or near thumbstick) XR input mapping. Currently only Oculus devices on the Oculus SDK support thumb touch. OpenVR is not supported.")]
		public bool SupportsThumbTouch;

		[Token(Token = "0x4000DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static List<UnityEngine.XR.InputDevice> devices;

		[Token(Token = "0x4000DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private InputAction leftGrip;

		[Token(Token = "0x4000DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private InputAction leftTrigger;

		[Token(Token = "0x4000DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private InputAction leftTriggerNear;

		[Token(Token = "0x4000DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private InputAction rightGrip;

		[Token(Token = "0x4000DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private InputAction rightTrigger;

		[Token(Token = "0x4000DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private InputAction rightTriggerNear;

		[Token(Token = "0x4000DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private InputAction leftThumbstick;

		[Token(Token = "0x4000DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private InputAction leftThumbstickDown;

		[Token(Token = "0x4000DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private InputAction leftThumbNear;

		[Token(Token = "0x4000DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private InputAction leftTouchpad;

		[Token(Token = "0x4000DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private InputAction leftTouchpadDown;

		[Token(Token = "0x4000DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private InputAction rightThumbstick;

		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private InputAction rightThumbstickDown;

		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private InputAction rightThumbNear;

		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private InputAction rightTouchpad;

		[Token(Token = "0x4000DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private InputAction rightTouchpadDown;

		[Token(Token = "0x4000DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private InputAction aButton;

		[Token(Token = "0x4000DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private InputAction bButton;

		[Token(Token = "0x4000DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private InputAction xButton;

		[Token(Token = "0x4000DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private InputAction yButton;

		[Token(Token = "0x4000DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private InputAction startButton;

		[Token(Token = "0x4000DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private InputAction backButton;

		[Token(Token = "0x4000DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[HideInInspector]
		public bool ShowInputDebugger;

		[Token(Token = "0x4000DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private UnityEngine.XR.InputDevice primaryLeftController;

		[Token(Token = "0x4000DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private UnityEngine.XR.InputDevice primaryRightController;

		[Token(Token = "0x4000DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		private InputFeatureUsage<Vector2> thumbstickAxis;

		[Token(Token = "0x4000DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		private InputFeatureUsage<Vector2> thumbstickAxisSecondary;

		[Token(Token = "0x4000DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private InputFeatureUsage<bool> thumbstickAxisClick;

		[Token(Token = "0x4000DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private bool setTrackingOrigin;

		[Token(Token = "0x17000102")]
		public static InputBridge Instance
		{
			[Token(Token = "0x6000C10")]
			[Address(RVA = "0xE1C488", Offset = "0xE1C488", VA = "0xE1C488")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000103")]
		public float DownThreshold
		{
			[Token(Token = "0x6000C11")]
			[Address(RVA = "0xE22470", Offset = "0xE22470", VA = "0xE22470")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000104")]
		public SDKProvider LoadedSDK
		{
			[Token(Token = "0x6000C12")]
			[Address(RVA = "0xE22478", Offset = "0xE22478", VA = "0xE22478")]
			[CompilerGenerated]
			get
			{
				return default(SDKProvider);
			}
			[Token(Token = "0x6000C13")]
			[Address(RVA = "0xE22480", Offset = "0xE22480", VA = "0xE22480")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000105")]
		public bool IsOculusDevice
		{
			[Token(Token = "0x6000C14")]
			[Address(RVA = "0xE22488", Offset = "0xE22488", VA = "0xE22488")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C15")]
			[Address(RVA = "0xE22490", Offset = "0xE22490", VA = "0xE22490")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000106")]
		public bool IsOculusQuest
		{
			[Token(Token = "0x6000C16")]
			[Address(RVA = "0xE2249C", Offset = "0xE2249C", VA = "0xE2249C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C17")]
			[Address(RVA = "0xE224A4", Offset = "0xE224A4", VA = "0xE224A4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000107")]
		public bool IsHTCDevice
		{
			[Token(Token = "0x6000C18")]
			[Address(RVA = "0xE224B0", Offset = "0xE224B0", VA = "0xE224B0")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C19")]
			[Address(RVA = "0xE224B8", Offset = "0xE224B8", VA = "0xE224B8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000108")]
		public bool IsPicoDevice
		{
			[Token(Token = "0x6000C1A")]
			[Address(RVA = "0xE224C4", Offset = "0xE224C4", VA = "0xE224C4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C1B")]
			[Address(RVA = "0xE224CC", Offset = "0xE224CC", VA = "0xE224CC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000109")]
		public bool IsValveIndexController
		{
			[Token(Token = "0x6000C1C")]
			[Address(RVA = "0xE224D8", Offset = "0xE224D8", VA = "0xE224D8")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C1D")]
			[Address(RVA = "0xE224E0", Offset = "0xE224E0", VA = "0xE224E0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x14000013")]
		public static event InputsUpdatedAction OnInputsUpdated
		{
			[Token(Token = "0x6000C1E")]
			[Address(RVA = "0xE224EC", Offset = "0xE224EC", VA = "0xE224EC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000C1F")]
			[Address(RVA = "0xE225C8", Offset = "0xE225C8", VA = "0xE225C8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000014")]
		public static event ControllerFoundAction OnControllerFound
		{
			[Token(Token = "0x6000C20")]
			[Address(RVA = "0xE226A4", Offset = "0xE226A4", VA = "0xE226A4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000C21")]
			[Address(RVA = "0xE22780", Offset = "0xE22780", VA = "0xE22780")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000C22")]
		[Address(RVA = "0xE2285C", Offset = "0xE2285C", VA = "0xE2285C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000C23")]
		[Address(RVA = "0xE22BBC", Offset = "0xE22BBC", VA = "0xE22BBC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C24")]
		[Address(RVA = "0xE22BFC", Offset = "0xE22BFC", VA = "0xE22BFC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000C25")]
		[Address(RVA = "0xE22CFC", Offset = "0xE22CFC", VA = "0xE22CFC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000C26")]
		[Address(RVA = "0xE22DEC", Offset = "0xE22DEC", VA = "0xE22DEC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C27")]
		[Address(RVA = "0xE22E18", Offset = "0xE22E18", VA = "0xE22E18", Slot = "4")]
		public virtual void UpdateInputs()
		{
		}

		[Token(Token = "0x6000C28")]
		[Address(RVA = "0xE22F04", Offset = "0xE22F04", VA = "0xE22F04", Slot = "5")]
		public virtual void UpdateSteamInput()
		{
		}

		[Token(Token = "0x6000C29")]
		[Address(RVA = "0xE22F08", Offset = "0xE22F08", VA = "0xE22F08", Slot = "6")]
		public virtual void UpdateXRInput()
		{
		}

		[Token(Token = "0x6000C2A")]
		[Address(RVA = "0xE23C70", Offset = "0xE23C70", VA = "0xE23C70", Slot = "7")]
		public virtual void UpdateUnityInput()
		{
		}

		[Token(Token = "0x6000C2B")]
		[Address(RVA = "0xE240B8", Offset = "0xE240B8", VA = "0xE240B8", Slot = "8")]
		public virtual void CreateUnityInputActions()
		{
		}

		[Token(Token = "0x6000C2C")]
		[Address(RVA = "0xE247C8", Offset = "0xE247C8", VA = "0xE247C8", Slot = "9")]
		public virtual void EnableActions()
		{
		}

		[Token(Token = "0x6000C2D")]
		[Address(RVA = "0xE24BDC", Offset = "0xE24BDC", VA = "0xE24BDC", Slot = "10")]
		public virtual void DisableActions()
		{
		}

		[Token(Token = "0x6000C2E")]
		[Address(RVA = "0xE24730", Offset = "0xE24730", VA = "0xE24730")]
		public InputAction CreateInputAction(string actionName, string binding, bool valueType)
		{
			return null;
		}

		[Token(Token = "0x6000C2F")]
		[Address(RVA = "0xE24FF0", Offset = "0xE24FF0", VA = "0xE24FF0", Slot = "11")]
		public virtual void UpdateOVRInput()
		{
		}

		[Token(Token = "0x6000C30")]
		[Address(RVA = "0xE25064", Offset = "0xE25064", VA = "0xE25064", Slot = "12")]
		public virtual void UpdatePicoInput()
		{
		}

		[Token(Token = "0x6000C31")]
		[Address(RVA = "0xE25068", Offset = "0xE25068", VA = "0xE25068", Slot = "13")]
		public virtual void UpdateDeviceActive()
		{
		}

		[Token(Token = "0x6000C32")]
		[Address(RVA = "0xE23B90", Offset = "0xE23B90", VA = "0xE23B90")]
		private float correctValue(float inputValue)
		{
			return default(float);
		}

		[Token(Token = "0x6000C33")]
		[Address(RVA = "0xE25208", Offset = "0xE25208", VA = "0xE25208")]
		public bool GetControllerBindingValue(ControllerBinding val)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C34")]
		[Address(RVA = "0xE25350", Offset = "0xE25350", VA = "0xE25350")]
		public bool GetGrabbedControllerBinding(GrabbedControllerBinding val, ControllerHand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C35")]
		[Address(RVA = "0xE25468", Offset = "0xE25468", VA = "0xE25468")]
		public Vector2 GetInputAxisValue(InputAxis val)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000C36")]
		[Address(RVA = "0xE23B28", Offset = "0xE23B28", VA = "0xE23B28")]
		private Vector2 ApplyDeadZones(Vector2 pos, float deadZoneX, float deadZoneY)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000C37")]
		[Address(RVA = "0xE25504", Offset = "0xE25504", VA = "0xE25504")]
		private void onDeviceChanged(UnityEngine.XR.InputDevice inputDevice)
		{
		}

		[Token(Token = "0x6000C38")]
		[Address(RVA = "0xE22A10", Offset = "0xE22A10", VA = "0xE22A10")]
		private void setDeviceProperties()
		{
		}

		[Token(Token = "0x6000C39")]
		[Address(RVA = "0xE2552C", Offset = "0xE2552C", VA = "0xE2552C", Slot = "14")]
		public virtual bool GetSupportsXRInput()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C3A")]
		[Address(RVA = "0xE2554C", Offset = "0xE2554C", VA = "0xE2554C", Slot = "15")]
		public virtual bool GetSupportsIndexTouch()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C3B")]
		[Address(RVA = "0xE25554", Offset = "0xE25554", VA = "0xE25554", Slot = "16")]
		public virtual SDKProvider GetLoadedSDK()
		{
			return default(SDKProvider);
		}

		[Token(Token = "0x6000C3C")]
		[Address(RVA = "0xE255FC", Offset = "0xE255FC", VA = "0xE255FC", Slot = "17")]
		public virtual bool GetSupportsThumbTouch()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C3D")]
		[Address(RVA = "0xE25604", Offset = "0xE25604", VA = "0xE25604", Slot = "18")]
		public virtual bool GetIsOculusDevice()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C3E")]
		[Address(RVA = "0xE256C0", Offset = "0xE256C0", VA = "0xE256C0", Slot = "19")]
		public virtual bool GetIsOculusQuest()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C3F")]
		[Address(RVA = "0xE257C8", Offset = "0xE257C8", VA = "0xE257C8", Slot = "20")]
		public virtual bool GetIsHTCDevice()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C40")]
		[Address(RVA = "0xE25858", Offset = "0xE25858", VA = "0xE25858", Slot = "21")]
		public virtual bool GetIsPicoDevice()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C41")]
		[Address(RVA = "0xE25138", Offset = "0xE25138", VA = "0xE25138")]
		public UnityEngine.XR.InputDevice GetHMD()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x6000C42")]
		[Address(RVA = "0xE258CC", Offset = "0xE258CC", VA = "0xE258CC")]
		public string GetHMDName()
		{
			return null;
		}

		[Token(Token = "0x6000C43")]
		[Address(RVA = "0xE258F4", Offset = "0xE258F4", VA = "0xE258F4")]
		public Vector3 GetHMDLocalPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000C44")]
		[Address(RVA = "0xE25980", Offset = "0xE25980", VA = "0xE25980")]
		public Quaternion GetHMDLocalRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000C45")]
		[Address(RVA = "0xE23920", Offset = "0xE23920", VA = "0xE23920")]
		public UnityEngine.XR.InputDevice GetLeftController()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x6000C46")]
		[Address(RVA = "0xE239F0", Offset = "0xE239F0", VA = "0xE239F0")]
		public UnityEngine.XR.InputDevice GetRightController()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x6000C47")]
		[Address(RVA = "0xE25A08", Offset = "0xE25A08", VA = "0xE25A08")]
		public Vector3 GetControllerLocalPosition(ControllerHand handSide)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000C48")]
		[Address(RVA = "0xE25AF0", Offset = "0xE25AF0", VA = "0xE25AF0")]
		public Quaternion GetControllerLocalRotation(ControllerHand handSide)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6000C49")]
		[Address(RVA = "0xE25BCC", Offset = "0xE25BCC", VA = "0xE25BCC", Slot = "22")]
		public virtual ControllerType GetControllerType()
		{
			return default(ControllerType);
		}

		[Token(Token = "0x6000C4A")]
		[Address(RVA = "0xE25C00", Offset = "0xE25C00", VA = "0xE25C00")]
		public Vector3 GetControllerVelocity(ControllerHand hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000C4B")]
		[Address(RVA = "0xE25CDC", Offset = "0xE25CDC", VA = "0xE25CDC")]
		public Vector3 GetControllerAngularVelocity(ControllerHand hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000C4C")]
		[Address(RVA = "0xE25D7C", Offset = "0xE25D7C", VA = "0xE25D7C", Slot = "23")]
		public virtual string GetControllerName()
		{
			return null;
		}

		[Token(Token = "0x6000C4D")]
		[Address(RVA = "0xE25ED4", Offset = "0xE25ED4", VA = "0xE25ED4", Slot = "24")]
		public virtual bool GetIsValveIndexController()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C4E")]
		[Address(RVA = "0xE23B48", Offset = "0xE23B48", VA = "0xE23B48")]
		private float getFeatureUsage(UnityEngine.XR.InputDevice device, InputFeatureUsage<float> usage, bool clamp = true)
		{
			return default(float);
		}

		[Token(Token = "0x6000C4F")]
		[Address(RVA = "0xE23AC0", Offset = "0xE23AC0", VA = "0xE23AC0")]
		private bool getFeatureUsage(UnityEngine.XR.InputDevice device, InputFeatureUsage<bool> usage)
		{
			return default(bool);
		}

		[Token(Token = "0x6000C50")]
		[Address(RVA = "0xE23AF4", Offset = "0xE23AF4", VA = "0xE23AF4")]
		private Vector2 getFeatureUsage(UnityEngine.XR.InputDevice device, InputFeatureUsage<Vector2> usage)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000C51")]
		[Address(RVA = "0xE25CA0", Offset = "0xE25CA0", VA = "0xE25CA0")]
		private Vector3 getFeatureUsage(UnityEngine.XR.InputDevice device, InputFeatureUsage<Vector3> usage)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000C52")]
		[Address(RVA = "0xE25FD4", Offset = "0xE25FD4", VA = "0xE25FD4", Slot = "25")]
		public virtual void SetTrackingOriginMode(TrackingOriginModeFlags trackingOrigin)
		{
		}

		[Token(Token = "0x6000C53")]
		[Address(RVA = "0xE25FF4", Offset = "0xE25FF4", VA = "0xE25FF4")]
		[IteratorStateMachine(typeof(<changeOriginModeRoutine>d__178))]
		private IEnumerator changeOriginModeRoutine(TrackingOriginModeFlags trackingOrigin)
		{
			return null;
		}

		[Token(Token = "0x6000C54")]
		[Address(RVA = "0xE221BC", Offset = "0xE221BC", VA = "0xE221BC")]
		public void VibrateController(float frequency, float amplitude, float duration, ControllerHand hand)
		{
		}

		[Token(Token = "0x6000C55")]
		[Address(RVA = "0xE260A0", Offset = "0xE260A0", VA = "0xE260A0")]
		[IteratorStateMachine(typeof(<Vibrate>d__180))]
		private IEnumerator Vibrate(float frequency, float amplitude, float duration, ControllerHand hand)
		{
			return null;
		}

		[Token(Token = "0x6000C56")]
		[Address(RVA = "0xE26138", Offset = "0xE26138", VA = "0xE26138")]
		public InputBridge()
		{
		}
	}
	[Token(Token = "0x20001F3")]
	public class JoystickControl : MonoBehaviour
	{
		[Token(Token = "0x4000DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Deadzone")]
		[Tooltip("Any values below this threshold will not be passed to events")]
		public float DeadZone;

		[Token(Token = "0x4000DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float MinDegrees;

		[Token(Token = "0x4000DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float MaxDegrees;

		[Token(Token = "0x4000DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float LeverPercentageX;

		[Token(Token = "0x4000DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float LeverPercentageY;

		[Token(Token = "0x4000DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector2 LeverVector;

		[Token(Token = "0x4000DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool UseSmoothLook;

		[Token(Token = "0x4000DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float SmoothLookSpeed;

		[Token(Token = "0x4000DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool KinematicWhileInactive;

		[Token(Token = "0x4000DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public FloatFloatEvent onJoystickChange;

		[Token(Token = "0x4000DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector2Event onJoystickVectorChange;

		[Token(Token = "0x4000DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Grabbable grab;

		[Token(Token = "0x4000DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody rb;

		[Token(Token = "0x4000DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 currentRotation;

		[Token(Token = "0x4000DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float angleX;

		[Token(Token = "0x4000DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float angleY;

		[Token(Token = "0x6000C6C")]
		[Address(RVA = "0xE2678C", Offset = "0xE2678C", VA = "0xE2678C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C6D")]
		[Address(RVA = "0xE2681C", Offset = "0xE2681C", VA = "0xE2681C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C6E")]
		[Address(RVA = "0xE27028", Offset = "0xE27028", VA = "0xE27028")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000C6F")]
		[Address(RVA = "0xE26B44", Offset = "0xE26B44", VA = "0xE26B44")]
		private void doJoystickLook()
		{
		}

		[Token(Token = "0x6000C70")]
		[Address(RVA = "0xE270D4", Offset = "0xE270D4", VA = "0xE270D4", Slot = "4")]
		public virtual void OnJoystickChange(float leverX, float leverY)
		{
		}

		[Token(Token = "0x6000C71")]
		[Address(RVA = "0xE27148", Offset = "0xE27148", VA = "0xE27148", Slot = "5")]
		public virtual void OnJoystickChange(Vector2 joystickVector)
		{
		}

		[Token(Token = "0x6000C72")]
		[Address(RVA = "0xE271BC", Offset = "0xE271BC", VA = "0xE271BC")]
		public JoystickControl()
		{
		}
	}
	[Token(Token = "0x20001F4")]
	public class JoystickVehicleControl : MonoBehaviour
	{
		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Grab Object")]
		public Grabbable JoystickGrabbable;

		[Token(Token = "0x4000DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Movement Speed")]
		[Tooltip("Set to True to Lerp towards the held hand. Set to False for Instant movement")]
		public bool UseSmoothLook;

		[Token(Token = "0x4000DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float SmoothLookSpeed;

		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Hinge X")]
		public Transform HingeXTransform;

		[Token(Token = "0x4000DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float MinXAngle;

		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float MaxXAngle;

		[Token(Token = "0x4000E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Hinge Y")]
		public Transform HingeYTransform;

		[Token(Token = "0x4000E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float MinYAngle;

		[Token(Token = "0x4000E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float MaxYAngle;

		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("How fast to return to center if nothing is holding the Joystick. Set to 0 if you do not wish to Return to Center")]
		[Header("Return To Center")]
		public float ReturnToCenterSpeed;

		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Header("Deadzone")]
		[Tooltip("Any values below this threshold will not be passed to events")]
		public float DeadZone;

		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FloatFloatEvent onJoystickChange;

		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector2Event onJoystickVectorChange;

		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Shown for Debug : ")]
		public float LeverPercentageX;

		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float LeverPercentageY;

		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Vector2 LeverVector;

		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float angleX;

		[Token(Token = "0x4000E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float angleY;

		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Quaternion originalRot;

		[Token(Token = "0x6000C73")]
		[Address(RVA = "0xE271E8", Offset = "0xE271E8", VA = "0xE271E8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C74")]
		[Address(RVA = "0xE277A4", Offset = "0xE277A4", VA = "0xE277A4", Slot = "4")]
		public virtual void CallJoystickEvents()
		{
		}

		[Token(Token = "0x6000C75")]
		[Address(RVA = "0xE278E0", Offset = "0xE278E0", VA = "0xE278E0", Slot = "5")]
		public virtual void OnJoystickChange(float leverX, float leverY)
		{
		}

		[Token(Token = "0x6000C76")]
		[Address(RVA = "0xE27954", Offset = "0xE27954", VA = "0xE27954", Slot = "6")]
		public virtual void OnJoystickChange(Vector2 joystickVector)
		{
		}

		[Token(Token = "0x6000C77")]
		[Address(RVA = "0xE279C8", Offset = "0xE279C8", VA = "0xE279C8")]
		public JoystickVehicleControl()
		{
		}
	}
	[Token(Token = "0x20001F5")]
	public class Lever : MonoBehaviour
	{
		[Token(Token = "0x4000E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Rotation Limits")]
		[Tooltip("Minimum X value in Local Euler Angles")]
		public float MinimumXRotation;

		[Token(Token = "0x4000E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Maximum X value in Local Euler Angles")]
		public float MaximumXRotation;

		[Token(Token = "0x4000E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Initial Rotation")]
		public float InitialXRotation;

		[Token(Token = "0x4000E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Audio")]
		public AudioClip SwitchOnSound;

		[Token(Token = "0x4000E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioClip SwitchOffSound;

		[Token(Token = "0x4000E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Tolerance")]
		[Tooltip("Tolerance before considering a switch flipped On or Off. Ex : 1.25 Tolerance means switch can be 98.25% up and considered switched on, or 1.25% down to be considered switched off.")]
		public float SwitchTolerance;

		[Token(Token = "0x4000E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Header("Smooth Look")]
		[Tooltip("If true the lever will lerp towards the Grabber. If false the lever will instantly point to the grabber")]
		public bool UseSmoothLook;

		[Token(Token = "0x4000E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The speed at which to Lerp towards the Grabber if UseSmoothLook is enabled")]
		public float SmoothLookSpeed;

		[Token(Token = "0x4000E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Header("Moving Platform Support")]
		[Tooltip("If false, the lever's rigidbody will be kinematic when not being held. Disable this if you don't want your lever to interact with physics or if you need moving platform support.")]
		public bool AllowPhysicsForces;

		[Token(Token = "0x4000E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		[Tooltip("If ReturnToCenter true and KinematicWhileInactive true then the lever will smooth look back to center when not being held")]
		[Header("Return to Center (Must be Kinematic)")]
		public bool ReturnToCenter;

		[Token(Token = "0x4000E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("How fast to return to center if not being held")]
		public float ReturnLookSpeed;

		[Token(Token = "0x4000E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Header("Snap Settings")]
		[Tooltip("If true the lever will look directly at the Grabber and not factor in an initial offset")]
		public bool SnapToGrabber;

		[Token(Token = "0x4000E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		[Tooltip("If true, the Lever will be dropped once switched on or off")]
		[Header("Misc")]
		public bool DropLeverOnActivation;

		[Token(Token = "0x4000E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Shown for Debug")]
		[Tooltip("Current position of the lever as expressed as a percentage 1-100")]
		public float LeverPercentage;

		[Token(Token = "0x4000E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("If true will show an angle helper in editor mode (Gizmos must be enabled)")]
		public bool ShowEditorGizmos;

		[Token(Token = "0x4000E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Events")]
		[Tooltip("Called when lever was up, but is now in the down position")]
		public UnityEvent onLeverDown;

		[Token(Token = "0x4000E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Called when lever was down, but is now in the up position")]
		public UnityEvent onLeverUp;

		[Token(Token = "0x4000E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Called if the lever changes position at all")]
		public FloatEvent onLeverChange;

		[Token(Token = "0x4000E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Grabbable grab;

		[Token(Token = "0x4000E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody rb;

		[Token(Token = "0x4000E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private AudioSource audioSource;

		[Token(Token = "0x4000E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool switchedOn;

		[Token(Token = "0x4000E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private ConfigurableJoint configJoint;

		[Token(Token = "0x4000E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private HingeJoint hingedJoint;

		[Token(Token = "0x4000E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 _lastLocalAngle;

		[Token(Token = "0x4000E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Quaternion initialOffset;

		[Token(Token = "0x6000C78")]
		[Address(RVA = "0xE27A44", Offset = "0xE27A44", VA = "0xE27A44")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C79")]
		[Address(RVA = "0xE27C5C", Offset = "0xE27C5C", VA = "0xE27C5C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000C7A")]
		[Address(RVA = "0xE27C8C", Offset = "0xE27C8C", VA = "0xE27C8C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C7B")]
		[Address(RVA = "0xE27ED8", Offset = "0xE27ED8", VA = "0xE27ED8", Slot = "4")]
		public virtual float GetAnglePercentage(float currentAngle)
		{
			return default(float);
		}

		[Token(Token = "0x6000C7C")]
		[Address(RVA = "0xE28078", Offset = "0xE28078", VA = "0xE28078")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000C7D")]
		[Address(RVA = "0xE2807C", Offset = "0xE2807C", VA = "0xE2807C")]
		private void doLeverLook()
		{
		}

		[Token(Token = "0x6000C7E")]
		[Address(RVA = "0xE285F0", Offset = "0xE285F0", VA = "0xE285F0", Slot = "5")]
		public virtual void SetLeverAngle(float angle)
		{
		}

		[Token(Token = "0x6000C7F")]
		[Address(RVA = "0xE2863C", Offset = "0xE2863C", VA = "0xE2863C", Slot = "6")]
		public virtual void OnLeverChange(float percentage)
		{
		}

		[Token(Token = "0x6000C80")]
		[Address(RVA = "0xE286A8", Offset = "0xE286A8", VA = "0xE286A8", Slot = "7")]
		public virtual void OnLeverDown()
		{
		}

		[Token(Token = "0x6000C81")]
		[Address(RVA = "0xE287A4", Offset = "0xE287A4", VA = "0xE287A4", Slot = "8")]
		public virtual void OnLeverUp()
		{
		}

		[Token(Token = "0x6000C82")]
		[Address(RVA = "0xE288A4", Offset = "0xE288A4", VA = "0xE288A4")]
		public Lever()
		{
		}
	}
	[Token(Token = "0x20001F6")]
	public class LocomotionManager : MonoBehaviour
	{
		[Token(Token = "0x4000E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Default locomotion to use if nothing stored in playerprefs. 0 = Teleport. 1 = SmoothLocomotion")]
		[Header("Locomotion Type")]
		public LocomotionType DefaultLocomotion;

		[Token(Token = "0x4000E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private LocomotionType selectedLocomotion;

		[Token(Token = "0x4000E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Save / Loading")]
		[Tooltip("If true, locomotion type will be saved and loaded from player prefs")]
		public bool LoadLocomotionFromPrefs;

		[Token(Token = "0x4000E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Input")]
		public List<ControllerBinding> locomotionToggleInput;

		[Token(Token = "0x4000E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The action used to toggle locomotion type")]
		public InputActionReference LocomotionToggleAction;

		[Token(Token = "0x4000E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private BNGPlayerController player;

		[Token(Token = "0x4000E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private PlayerTeleport teleport;

		[Token(Token = "0x4000E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x4000E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool actionToggle;

		[Token(Token = "0x1700010E")]
		public LocomotionType SelectedLocomotion
		{
			[Token(Token = "0x6000C83")]
			[Address(RVA = "0xE28930", Offset = "0xE28930", VA = "0xE28930")]
			get
			{
				return default(LocomotionType);
			}
		}

		[Token(Token = "0x6000C84")]
		[Address(RVA = "0xE28938", Offset = "0xE28938", VA = "0xE28938")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C85")]
		[Address(RVA = "0xE28A8C", Offset = "0xE28A8C", VA = "0xE28A8C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000C86")]
		[Address(RVA = "0xE28AB8", Offset = "0xE28AB8", VA = "0xE28AB8", Slot = "4")]
		public virtual void CheckControllerToggleInput()
		{
		}

		[Token(Token = "0x6000C87")]
		[Address(RVA = "0xE28BB8", Offset = "0xE28BB8", VA = "0xE28BB8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000C88")]
		[Address(RVA = "0xE28CB8", Offset = "0xE28CB8", VA = "0xE28CB8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000C89")]
		[Address(RVA = "0xE28DB8", Offset = "0xE28DB8", VA = "0xE28DB8")]
		public void OnLocomotionToggle(InputAction.CallbackContext context)
		{
		}

		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0xE28B94", Offset = "0xE28B94", VA = "0xE28B94")]
		public void LocomotionToggle()
		{
		}

		[Token(Token = "0x6000C8B")]
		[Address(RVA = "0xE28DC4", Offset = "0xE28DC4", VA = "0xE28DC4")]
		public void UpdateTeleportStatus()
		{
		}

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0xE28A14", Offset = "0xE28A14", VA = "0xE28A14")]
		public void ChangeLocomotion(LocomotionType locomotionType, bool save)
		{
		}

		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0xE28DF0", Offset = "0xE28DF0", VA = "0xE28DF0")]
		public void ChangeLocomotionType(LocomotionType loc)
		{
		}

		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0xE28F1C", Offset = "0xE28F1C", VA = "0xE28F1C")]
		private void toggleTeleport(bool enabled)
		{
		}

		[Token(Token = "0x6000C8F")]
		[Address(RVA = "0xE28F58", Offset = "0xE28F58", VA = "0xE28F58")]
		private void toggleSmoothLocomotion(bool enabled)
		{
		}

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0xE2900C", Offset = "0xE2900C", VA = "0xE2900C")]
		public void ToggleLocomotionType()
		{
		}

		[Token(Token = "0x6000C91")]
		[Address(RVA = "0xE2901C", Offset = "0xE2901C", VA = "0xE2901C")]
		public LocomotionManager()
		{
		}
	}
	[Token(Token = "0x20001F7")]
	public class PlayerClimbing : MonoBehaviour
	{
		[Token(Token = "0x4000E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Climbing Transforms")]
		public Transform LeftControllerTransform;

		[Token(Token = "0x4000E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform RightControllerTransform;

		[Token(Token = "0x4000E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Capsule Settings")]
		[Tooltip("Set the player's capsule collider height to this amount while climbing. This can allow you to shorten the capsule collider a bit, making it easier to navigate over ledges.")]
		public float ClimbingCapsuleHeight;

		[Token(Token = "0x4000E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Set the player's capsule collider capsule center to this amount while climbing.")]
		public float ClimbingCapsuleCenter;

		[Token(Token = "0x4000E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Haptics")]
		public bool ApplyHapticsOnGrab;

		[Token(Token = "0x4000E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Frequency of haptics to play on grab if 'ApplyHapticsOnGrab' is true")]
		public float VibrateFrequency;

		[Token(Token = "0x4000E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Amplitute of haptics to play on grab if 'ApplyHapticsOnGrab' is true")]
		public float VibrateAmplitude;

		[Token(Token = "0x4000E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Duration of haptics to play on grab if 'ApplyHapticsOnGrab' is true")]
		public float VibrateDuration;

		[Token(Token = "0x4000E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Grabber> climbers;

		[Token(Token = "0x4000E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool wasGrippingClimbable;

		[Token(Token = "0x4000E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CharacterController characterController;

		[Token(Token = "0x4000E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x4000E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private PlayerGravity playerGravity;

		[Token(Token = "0x4000E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Rigidbody playerRigid;

		[Token(Token = "0x4000E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool _checkedRigidPlayer;

		[Token(Token = "0x4000E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool _isRigidPlayer;

		[Token(Token = "0x4000E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x72")]
		[Header("Shown for Debug : ")]
		public bool GrippingClimbable;

		[Token(Token = "0x4000E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private Vector3 moveDirection;

		[Token(Token = "0x4000E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 previousLeftControllerPosition;

		[Token(Token = "0x4000E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 previousRightControllerPosition;

		[Token(Token = "0x4000E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 controllerMoveAmount;

		[Token(Token = "0x1700010F")]
		public bool IsRigidbodyPlayer
		{
			[Token(Token = "0x6000C92")]
			[Address(RVA = "0xE29110", Offset = "0xE29110", VA = "0xE29110")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000C93")]
		[Address(RVA = "0xE291BC", Offset = "0xE291BC", VA = "0xE291BC")]
		public void Start()
		{
		}

		[Token(Token = "0x6000C94")]
		[Address(RVA = "0xE29308", Offset = "0xE29308", VA = "0xE29308")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0xE293DC", Offset = "0xE293DC", VA = "0xE293DC", Slot = "4")]
		public virtual void AddClimber(Climbable climbable, Grabber grab)
		{
		}

		[Token(Token = "0x6000C96")]
		[Address(RVA = "0xE29754", Offset = "0xE29754", VA = "0xE29754", Slot = "5")]
		public virtual void RemoveClimber(Grabber grab)
		{
		}

		[Token(Token = "0x6000C97")]
		[Address(RVA = "0xE29864", Offset = "0xE29864", VA = "0xE29864", Slot = "6")]
		public virtual bool GrippingAtLeastOneClimbable()
		{
			return default(bool);
		}

		[Token(Token = "0x6000C98")]
		[Address(RVA = "0xE299BC", Offset = "0xE299BC", VA = "0xE299BC", Slot = "7")]
		protected virtual void checkClimbing()
		{
		}

		[Token(Token = "0x6000C99")]
		[Address(RVA = "0xE29F40", Offset = "0xE29F40", VA = "0xE29F40")]
		private void DoPhysicalClimbing()
		{
		}

		[Token(Token = "0x6000C9A")]
		[Address(RVA = "0xE29DC0", Offset = "0xE29DC0", VA = "0xE29DC0")]
		private void onGrabbedClimbable()
		{
		}

		[Token(Token = "0x6000C9B")]
		[Address(RVA = "0xE29E7C", Offset = "0xE29E7C", VA = "0xE29E7C")]
		private void onReleasedClimbable()
		{
		}

		[Token(Token = "0x6000C9C")]
		[Address(RVA = "0xE2A2F0", Offset = "0xE2A2F0", VA = "0xE2A2F0")]
		public PlayerClimbing()
		{
		}
	}
	[Token(Token = "0x20001F8")]
	public class PlayerGravity : MonoBehaviour
	{
		[Token(Token = "0x4000E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If true, will apply gravity to the CharacterController component, or RigidBody if no CC is present.")]
		public bool GravityEnabled;

		[Token(Token = "0x4000E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Amount of Gravity to apply to the CharacterController or Rigidbody. Default is 'Physics.gravity'.")]
		public Vector3 Gravity;

		[Token(Token = "0x4000E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CharacterController characterController;

		[Token(Token = "0x4000E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x4000E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody playerRigidbody;

		[Token(Token = "0x4000E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float _movementY;

		[Token(Token = "0x4000E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 _initialGravityModifier;

		[Token(Token = "0x4000E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool _validRigidBody;

		[Token(Token = "0x6000C9D")]
		[Address(RVA = "0xE2A378", Offset = "0xE2A378", VA = "0xE2A378")]
		private void Start()
		{
		}

		[Token(Token = "0x6000C9E")]
		[Address(RVA = "0xE2A498", Offset = "0xE2A498", VA = "0xE2A498")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000C9F")]
		[Address(RVA = "0xE2A610", Offset = "0xE2A610", VA = "0xE2A610")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000CA0")]
		[Address(RVA = "0xE2A278", Offset = "0xE2A278", VA = "0xE2A278")]
		public void ToggleGravity(bool gravityOn)
		{
		}

		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0xE2A740", Offset = "0xE2A740", VA = "0xE2A740")]
		public PlayerGravity()
		{
		}
	}
	[Token(Token = "0x20001F9")]
	public class PlayerMovingPlatformSupport : MonoBehaviour
	{
		[Token(Token = "0x4000E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Ground checks : ")]
		[Tooltip("Raycast against these layers to check if player is on a moving platform")]
		public LayerMask GroundedLayers;

		[Token(Token = "0x4000E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		protected RaycastHit groundHit;

		[Token(Token = "0x4000E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x4000E50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CharacterController characterController;

		[Token(Token = "0x4000E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform _initialCharacterParent;

		[Token(Token = "0x4000E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float DistanceFromGround;

		[Token(Token = "0x4000E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public MovingPlatform CurrentPlatform;

		[Token(Token = "0x4000E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool wasOnPlatform;

		[Token(Token = "0x4000E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool requiresReparent;

		[Token(Token = "0x4000E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject _lastHitObject;

		[Token(Token = "0x6000CA2")]
		[Address(RVA = "0xE2A770", Offset = "0xE2A770", VA = "0xE2A770")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CA3")]
		[Address(RVA = "0xE2A82C", Offset = "0xE2A82C", VA = "0xE2A82C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CA4")]
		[Address(RVA = "0xE2A838", Offset = "0xE2A838", VA = "0xE2A838")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000CA5")]
		[Address(RVA = "0xE2A844", Offset = "0xE2A844", VA = "0xE2A844", Slot = "4")]
		public virtual void CheckMovingPlatform()
		{
		}

		[Token(Token = "0x6000CA6")]
		[Address(RVA = "0xE2ABD8", Offset = "0xE2ABD8", VA = "0xE2ABD8", Slot = "5")]
		public virtual void UpdateCurrentPlatform()
		{
		}

		[Token(Token = "0x6000CA7")]
		[Address(RVA = "0xE2ACDC", Offset = "0xE2ACDC", VA = "0xE2ACDC", Slot = "6")]
		public virtual void UpdateDistanceFromGround()
		{
		}

		[Token(Token = "0x6000CA8")]
		[Address(RVA = "0xE2B0D0", Offset = "0xE2B0D0", VA = "0xE2B0D0")]
		public PlayerMovingPlatformSupport()
		{
		}
	}
	[Token(Token = "0x20001FA")]
	public enum RotationMechanic
	{
		[Token(Token = "0x4000E58")]
		Snap,
		[Token(Token = "0x4000E59")]
		Smooth
	}
	[Token(Token = "0x20001FB")]
	public class PlayerRotation : MonoBehaviour, IPunObservable
	{
		[Token(Token = "0x20001FC")]
		public delegate void OnBeforeRotateAction();

		[Token(Token = "0x20001FD")]
		public delegate void OnAfterRotateAction();

		[Token(Token = "0x4000E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Set to false to skip Update")]
		[Header("Input")]
		public bool AllowInput;

		[Token(Token = "0x4000E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Used to determine whether to turn left / right. This can be an X Axis on the thumbstick, for example. -1 to snap left, 1 to snap right.")]
		public List<InputAxis> inputAxis;

		[Token(Token = "0x4000E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Unity Input Action used to rotate the player")]
		public InputActionReference RotateAction;

		[Token(Token = "0x4000E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Smooth / Snap Turning")]
		[Tooltip("Snap rotation will rotate a fixed amount of degrees on turn. Smooth will linearly rotate the player.")]
		public RotationMechanic RotationType;

		[Token(Token = "0x4000E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("How many degrees to rotate if RotationType is set to 'Snap'")]
		[Header("Snap Turn Settings")]
		public float SnapRotationAmount;

		[Token(Token = "0x4000E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Thumbstick X axis must be >= this amount to be considered an input event")]
		public float SnapInputAmount;

		[Token(Token = "0x4000E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("How fast to rotate the player if RotationType is set to 'Smooth'")]
		[Header("Smooth Turn Settings")]
		public float SmoothTurnSpeed;

		[Token(Token = "0x4000E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Thumbstick X axis must be >= this amount to be considered an input event")]
		public float SmoothTurnMinInput;

		[Token(Token = "0x4000E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float recentSnapTurnTime;

		[Token(Token = "0x4000E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float rotationAmount;

		[Token(Token = "0x4000E64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float xAxis;

		[Token(Token = "0x4000E65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float previousXInput;

		[Token(Token = "0x4000E68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Quaternion _currentRot;

		[Token(Token = "0x14000015")]
		public static event OnBeforeRotateAction OnBeforeRotate
		{
			[Token(Token = "0x6000CA9")]
			[Address(RVA = "0xE2B0D8", Offset = "0xE2B0D8", VA = "0xE2B0D8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000CAA")]
			[Address(RVA = "0xE2B190", Offset = "0xE2B190", VA = "0xE2B190")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000016")]
		public static event OnAfterRotateAction OnAfterRotate
		{
			[Token(Token = "0x6000CAB")]
			[Address(RVA = "0xE2B248", Offset = "0xE2B248", VA = "0xE2B248")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000CAC")]
			[Address(RVA = "0xE2B304", Offset = "0xE2B304", VA = "0xE2B304")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000CAD")]
		[Address(RVA = "0xE2B3C0", Offset = "0xE2B3C0", VA = "0xE2B3C0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CAE")]
		[Address(RVA = "0xE2B3C4", Offset = "0xE2B3C4", VA = "0xE2B3C4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CAF")]
		[Address(RVA = "0xE2B420", Offset = "0xE2B420", VA = "0xE2B420", Slot = "5")]
		public virtual float GetAxisInput()
		{
			return default(float);
		}

		[Token(Token = "0x6000CB0")]
		[Address(RVA = "0xE2B5B0", Offset = "0xE2B5B0", VA = "0xE2B5B0", Slot = "6")]
		public virtual void DoSnapRotation(float xInput)
		{
		}

		[Token(Token = "0x6000CB1")]
		[Address(RVA = "0xE2B78C", Offset = "0xE2B78C", VA = "0xE2B78C", Slot = "7")]
		public virtual bool RecentlySnapTurned()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CB2")]
		[Address(RVA = "0xE2B7BC", Offset = "0xE2B7BC", VA = "0xE2B7BC", Slot = "8")]
		public virtual void DoSmoothRotation(float xInput)
		{
		}

		[Token(Token = "0x6000CB3")]
		[Address(RVA = "0xE2B8B8", Offset = "0xE2B8B8", VA = "0xE2B8B8")]
		private void UpdateTransform()
		{
		}

		[Token(Token = "0x6000CB4")]
		[Address(RVA = "0xE2B984", Offset = "0xE2B984", VA = "0xE2B984", Slot = "4")]
		public void OnPhotonSerializeView(PhotonStream stream, PhotonMessageInfo info)
		{
		}

		[Token(Token = "0x6000CB5")]
		[Address(RVA = "0xE2BA58", Offset = "0xE2BA58", VA = "0xE2BA58")]
		public PlayerRotation()
		{
		}
	}
	[Token(Token = "0x20001FE")]
	public enum TeleportControls
	{
		[Token(Token = "0x4000E6A")]
		ThumbstickRotate,
		[Token(Token = "0x4000E6B")]
		ThumbstickDown,
		[Token(Token = "0x4000E6C")]
		BButton,
		[Token(Token = "0x4000E6D")]
		None
	}
	[Token(Token = "0x20001FF")]
	public class PlayerTeleport : MonoBehaviour
	{
		[Token(Token = "0x2000200")]
		public delegate void OnBeforeTeleportFadeAction();

		[Token(Token = "0x2000201")]
		public delegate void OnBeforeTeleportAction();

		[Token(Token = "0x2000202")]
		public delegate void OnAfterTeleportAction();

		[Token(Token = "0x2000203")]
		[CompilerGenerated]
		private sealed class <doTeleport>d__83 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000EA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000EA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000EA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlayerTeleport <>4__this;

			[Token(Token = "0x4000EA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 playerDestination;

			[Token(Token = "0x4000EA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public bool rotatePlayer;

			[Token(Token = "0x4000EA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Quaternion playerRotation;

			[Token(Token = "0x17000113")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000CEE")]
				[Address(RVA = "0xE2FC2C", Offset = "0xE2FC2C", VA = "0xE2FC2C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000114")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000CF0")]
				[Address(RVA = "0xE2FC74", Offset = "0xE2FC74", VA = "0xE2FC74", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000CEB")]
			[Address(RVA = "0xE2F820", Offset = "0xE2F820", VA = "0xE2F820")]
			[DebuggerHidden]
			public <doTeleport>d__83(int <>1__state)
			{
			}

			[Token(Token = "0x6000CEC")]
			[Address(RVA = "0xE2F848", Offset = "0xE2F848", VA = "0xE2F848", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000CED")]
			[Address(RVA = "0xE2F84C", Offset = "0xE2F84C", VA = "0xE2F84C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000CEF")]
			[Address(RVA = "0xE2FC34", Offset = "0xE2FC34", VA = "0xE2FC34", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Colors")]
		[Tooltip("The LineRenderer to use when showing a teleport preview")]
		public LineRenderer TeleportLine;

		[Token(Token = "0x4000E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If a Valid Teleport destination is found, color of 'TeleportLine' will be updated to this.")]
		public Color ValidTeleport;

		[Token(Token = "0x4000E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("If a Valid Teleport destination is not found, color of 'TeleportLine' will be updated to this.")]
		public Color InvalidTeleport;

		[Token(Token = "0x4000E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Hand Side")]
		[Tooltip("Whether the Teleport should initiate from the left or right controller. This affects input and where the teleport line should begin from.")]
		public ControllerHand HandSide;

		[Token(Token = "0x4000E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Transform Definitions")]
		[Tooltip("Where the Teleport Line should begin if using the left ControllerHand")]
		public Transform TeleportBeginTransform;

		[Token(Token = "0x4000E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Where the Teleport Line should begin if using the right ControllerHand")]
		public Transform TeleportBeginTransformAlt;

		[Token(Token = "0x4000E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Transform indicating where Player should be placed on teleport.")]
		public Transform TeleportDestination;

		[Token(Token = "0x4000E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		[Tooltip("The TeleportDestination if we are hitting one. Null if not.")]
		public TeleportDestination DestinationObject;

		[Token(Token = "0x4000E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("GameObject to move around when initiating a teleport.")]
		public GameObject TeleportMarker;

		[Token(Token = "0x4000E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Transform indicating direction Player will rotate to on teleport.")]
		public Transform DirectionIndicator;

		[Token(Token = "0x4000E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("Teleport Physics")]
		public float MaxRange;

		[Token(Token = "0x4000E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("More segments means a smoother line, at the cost of performance.")]
		public int SegmentCount;

		[Token(Token = "0x4000E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("How much velocity to apply when calculating a parabola. Set to a very high number for a straight line.")]
		public float SimulationVelocity;

		[Token(Token = "0x4000E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Tooltip("Scale of each segment used when calculating parabola")]
		public float SegmentScale;

		[Token(Token = "0x4000E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Header("Layers")]
		[Tooltip("Raycast layers to use when determining collision")]
		public LayerMask CollisionLayers;

		[Token(Token = "0x4000E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("Raycast layers to use when determining if the collided object is a valid teleport. If it is not valid then the line will be red and unable to teleport.")]
		public LayerMask ValidLayers;

		[Token(Token = "0x4000E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Header("Controls")]
		[Tooltip("Method used to initiate a teleport. If these don't fit your needs you can override the KeyDownForTeleport() and KeyUpFromTeleport() methods.")]
		public TeleportControls ControlType;

		[Token(Token = "0x4000E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Unity Input Action used to initiate Teleport")]
		public InputActionReference InitiateTeleportAction;

		[Token(Token = "0x4000E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("If true the user can rotate the teleport marker before initiating a teleport.")]
		public bool AllowTeleportRotation;

		[Token(Token = "0x4000E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		private bool _reachThumbThreshold;

		[Token(Token = "0x4000E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA2")]
		[Tooltip("If true the teleport marker will always be the same rotation as the player")]
		public bool ForceStraightArrow;

		[Token(Token = "0x4000E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[Header("Slope")]
		[Tooltip("Max Angle / Slope the teleport marker can be to be considered a valid teleport.")]
		public float MaxSlope;

		[Token(Token = "0x4000E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Header("Offset")]
		[Tooltip("Offset the player's Y position from TeleportDestination")]
		public float TeleportYOffset;

		[Token(Token = "0x4000E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[Header("Screen Fade")]
		[Tooltip("Use ScreenFader on teleportation if true.")]
		public bool FadeScreenOnTeleport;

		[Token(Token = "0x4000E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("If FadeScreenOnTeleport = true, fade the screen at this speed.")]
		public float TeleportFadeSpeed;

		[Token(Token = "0x4000E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Tooltip("Seconds to wait before initiating teleport. Useful if you want to fade the screen  before teleporting.")]
		public float TeleportDelay;

		[Token(Token = "0x4000E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("Physics Material to apply to the sphere collider when no controls are being issued.")]
		[Header("Physics Material")]
		public PhysicMaterial FrictionMaterial;

		[Token(Token = "0x4000E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private CharacterController controller;

		[Token(Token = "0x4000E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private BNGPlayerController playerController;

		[Token(Token = "0x4000E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Rigidbody playerRigid;

		[Token(Token = "0x4000E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private InputBridge input;

		[Token(Token = "0x4000E8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Transform cameraRig;

		[Token(Token = "0x4000E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private ScreenFader fader;

		[Token(Token = "0x4000E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected bool aimingTeleport;

		[Token(Token = "0x4000E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF1")]
		protected bool validTeleport;

		[Token(Token = "0x4000E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF2")]
		protected bool teleportationEnabled;

		[Token(Token = "0x4000E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private int _invalidFrames;

		[Token(Token = "0x4000E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private float _initialLineWidth;

		[Token(Token = "0x4000E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private bool setVariables;

		[Token(Token = "0x4000E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private Collider _hitObject;

		[Token(Token = "0x4000E99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Vector3 _hitVector;

		[Token(Token = "0x4000E9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		private float _hitAngle;

		[Token(Token = "0x4000E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private RaycastHit hit;

		[Token(Token = "0x4000E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Vector3[] segments;

		[Token(Token = "0x4000E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Vector3 segVelocity;

		[Token(Token = "0x4000E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		private float segTime;

		[Token(Token = "0x4000E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private int segCount;

		[Token(Token = "0x4000EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private bool isDestination;

		[Token(Token = "0x4000EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private Vector2 teleportAxis;

		[Token(Token = "0x17000110")]
		private Transform teleportTransform
		{
			[Token(Token = "0x6000CBE")]
			[Address(RVA = "0xE2BD7C", Offset = "0xE2BD7C", VA = "0xE2BD7C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000111")]
		private Vector2 handedThumbstickAxis
		{
			[Token(Token = "0x6000CBF")]
			[Address(RVA = "0xE2BD98", Offset = "0xE2BD98", VA = "0xE2BD98")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x17000112")]
		public bool AimingTeleport
		{
			[Token(Token = "0x6000CC0")]
			[Address(RVA = "0xE2BDD8", Offset = "0xE2BDD8", VA = "0xE2BDD8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x14000017")]
		public static event OnBeforeTeleportFadeAction OnBeforeTeleportFade
		{
			[Token(Token = "0x6000CC1")]
			[Address(RVA = "0xE2BDE0", Offset = "0xE2BDE0", VA = "0xE2BDE0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000CC2")]
			[Address(RVA = "0xE2BE98", Offset = "0xE2BE98", VA = "0xE2BE98")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000018")]
		public static event OnBeforeTeleportAction OnBeforeTeleport
		{
			[Token(Token = "0x6000CC3")]
			[Address(RVA = "0xE2BF50", Offset = "0xE2BF50", VA = "0xE2BF50")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000CC4")]
			[Address(RVA = "0xE2C00C", Offset = "0xE2C00C", VA = "0xE2C00C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000019")]
		public static event OnAfterTeleportAction OnAfterTeleport
		{
			[Token(Token = "0x6000CC5")]
			[Address(RVA = "0xE2C0C8", Offset = "0xE2C0C8", VA = "0xE2C0C8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000CC6")]
			[Address(RVA = "0xE2C184", Offset = "0xE2C184", VA = "0xE2C184")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0xE2C240", Offset = "0xE2C240", VA = "0xE2C240")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0xE2C5B4", Offset = "0xE2C5B4", VA = "0xE2C5B4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000CC9")]
		[Address(RVA = "0xE2C244", Offset = "0xE2C244", VA = "0xE2C244")]
		private void setupVariables()
		{
		}

		[Token(Token = "0x6000CCA")]
		[Address(RVA = "0xE2C69C", Offset = "0xE2C69C", VA = "0xE2C69C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000CCB")]
		[Address(RVA = "0xE2C728", Offset = "0xE2C728", VA = "0xE2C728")]
		public void DoCheckTeleport()
		{
		}

		[Token(Token = "0x6000CCC")]
		[Address(RVA = "0xE2C82C", Offset = "0xE2C82C", VA = "0xE2C82C")]
		public void TryOrHideTeleport()
		{
		}

		[Token(Token = "0x6000CCD")]
		[Address(RVA = "0xE28FEC", Offset = "0xE28FEC", VA = "0xE28FEC")]
		public void EnableTeleportation()
		{
		}

		[Token(Token = "0x6000CCE")]
		[Address(RVA = "0xE28FF8", Offset = "0xE28FF8", VA = "0xE28FF8")]
		public void DisableTeleportation()
		{
		}

		[Token(Token = "0x6000CCF")]
		[Address(RVA = "0xE2C848", Offset = "0xE2C848", VA = "0xE2C848", Slot = "4")]
		protected virtual void calculateParabola()
		{
		}

		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0xE2D2E4", Offset = "0xE2D2E4", VA = "0xE2D2E4", Slot = "5")]
		protected virtual bool teleportClear()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0xE2D54C", Offset = "0xE2D54C", VA = "0xE2D54C", Slot = "6")]
		protected virtual void hideTeleport()
		{
		}

		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0xE2D5A0", Offset = "0xE2D5A0", VA = "0xE2D5A0", Slot = "7")]
		protected virtual void updateTeleport()
		{
		}

		[Token(Token = "0x6000CD3")]
		[Address(RVA = "0xE2D5F8", Offset = "0xE2D5F8", VA = "0xE2D5F8", Slot = "8")]
		protected virtual void rotateMarker()
		{
		}

		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0xE2D974", Offset = "0xE2D974", VA = "0xE2D974", Slot = "9")]
		protected virtual void tryTeleport()
		{
		}

		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0xE2DC3C", Offset = "0xE2DC3C", VA = "0xE2DC3C", Slot = "10")]
		public virtual void BeforeTeleportFade()
		{
		}

		[Token(Token = "0x6000CD6")]
		[Address(RVA = "0xE2DD04", Offset = "0xE2DD04", VA = "0xE2DD04", Slot = "11")]
		public virtual void BeforeTeleport()
		{
		}

		[Token(Token = "0x6000CD7")]
		[Address(RVA = "0xE2DDCC", Offset = "0xE2DDCC", VA = "0xE2DDCC", Slot = "12")]
		public virtual void AfterTeleport()
		{
		}

		[Token(Token = "0x6000CD8")]
		[Address(RVA = "0xE2DB68", Offset = "0xE2DB68", VA = "0xE2DB68")]
		[IteratorStateMachine(typeof(<doTeleport>d__83))]
		private IEnumerator doTeleport(Vector3 playerDestination, Quaternion playerRotation, bool rotatePlayer)
		{
			return null;
		}

		[Token(Token = "0x6000CD9")]
		[Address(RVA = "0xE2DEC8", Offset = "0xE2DEC8", VA = "0xE2DEC8")]
		public void TeleportPlayer(Vector3 destination, Quaternion rotation)
		{
		}

		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0xE2DEEC", Offset = "0xE2DEEC", VA = "0xE2DEEC")]
		public void TeleportPlayerToTransform(Transform destination)
		{
		}

		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0xE2DF88", Offset = "0xE2DF88", VA = "0xE2DF88", Slot = "13")]
		public virtual bool KeyDownForTeleport()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CDC")]
		[Address(RVA = "0xE2E258", Offset = "0xE2E258", VA = "0xE2E258", Slot = "14")]
		public virtual bool KeyUpFromTeleport()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0xE2E348", Offset = "0xE2E348", VA = "0xE2E348")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000CDE")]
		[Address(RVA = "0xE2E454", Offset = "0xE2E454", VA = "0xE2E454")]
		public PlayerTeleport()
		{
		}
	}
	[Token(Token = "0x2000204")]
	public class PointerEvents : MonoBehaviour, IPointerClickHandler, IEventSystemHandler, IPointerEnterHandler, IPointerExitHandler, IPointerDownHandler, IPointerUpHandler
	{
		[Token(Token = "0x4000EA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Maximum Distance this object can be from the UIPointer to be considered valid and receive events")]
		[Header("Maximium Distance")]
		public float MaxDistance;

		[Token(Token = "0x4000EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Header("Enable Events")]
		[Tooltip("If True then the Unity Events below will be sent. Set to False if you need to disable sending pointer events.")]
		public bool Enabled;

		[Token(Token = "0x4000EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Unity Events : ")]
		public PointerEventDataEvent OnPointerClickEvent;

		[Token(Token = "0x4000EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PointerEventDataEvent OnPointerEnterEvent;

		[Token(Token = "0x4000EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PointerEventDataEvent OnPointerExitEvent;

		[Token(Token = "0x4000EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public PointerEventDataEvent OnPointerDownEvent;

		[Token(Token = "0x4000EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public PointerEventDataEvent OnPointerUpEvent;

		[Token(Token = "0x6000CF1")]
		[Address(RVA = "0xE2FC7C", Offset = "0xE2FC7C", VA = "0xE2FC7C", Slot = "9")]
		public virtual void OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000CF2")]
		[Address(RVA = "0xE2FCF8", Offset = "0xE2FCF8", VA = "0xE2FCF8", Slot = "10")]
		public virtual void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0xE2FD74", Offset = "0xE2FD74", VA = "0xE2FD74", Slot = "11")]
		public virtual void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0xE2FDD4", Offset = "0xE2FDD4", VA = "0xE2FDD4", Slot = "12")]
		public virtual void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0xE2FE50", Offset = "0xE2FE50", VA = "0xE2FE50", Slot = "13")]
		public virtual void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0xE2FEB0", Offset = "0xE2FEB0", VA = "0xE2FEB0", Slot = "14")]
		public virtual bool DistanceExceeded(PointerEventData eventData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0xE2FED0", Offset = "0xE2FED0", VA = "0xE2FED0")]
		public PointerEvents()
		{
		}
	}
	[Token(Token = "0x2000205")]
	public enum RemoteGrabType
	{
		[Token(Token = "0x4000EB0")]
		Trigger,
		[Token(Token = "0x4000EB1")]
		Raycast,
		[Token(Token = "0x4000EB2")]
		Spherecast
	}
	[Token(Token = "0x2000206")]
	public class RemoteGrabber : MonoBehaviour
	{
		[Token(Token = "0x4000EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RemoteGrabType PhysicsCheckType;

		[Token(Token = "0x4000EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If PhysicsCheckType = Trigger and this is true, an additonal raycast check will occur to check for obstacles in the way")]
		public bool TriggerRequiresRaycast;

		[Token(Token = "0x4000EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float RaycastLength;

		[Token(Token = "0x4000EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float SphereCastLength;

		[Token(Token = "0x4000EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float SphereCastRadius;

		[Token(Token = "0x4000EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask RemoteGrabLayers;

		[Token(Token = "0x4000EB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GrabbablesInTrigger ParentGrabber;

		[Token(Token = "0x4000EBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Collider _lastColliderHit;

		[Token(Token = "0x4000EBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool ShowGizmos;

		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0xE2FEE8", Offset = "0xE2FEE8", VA = "0xE2FEE8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0xE30010", Offset = "0xE30010", VA = "0xE30010", Slot = "4")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x6000CFA")]
		[Address(RVA = "0xE30238", Offset = "0xE30238", VA = "0xE30238")]
		private void ObjectHit(Collider colliderHit)
		{
		}

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0xE303B4", Offset = "0xE303B4", VA = "0xE303B4")]
		public void RemovePreviousHitObject()
		{
		}

		[Token(Token = "0x6000CFC")]
		[Address(RVA = "0xE304EC", Offset = "0xE304EC", VA = "0xE304EC")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000CFD")]
		[Address(RVA = "0xE306BC", Offset = "0xE306BC", VA = "0xE306BC")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000CFE")]
		[Address(RVA = "0xE3086C", Offset = "0xE3086C", VA = "0xE3086C")]
		public RemoteGrabber()
		{
		}
	}
	[Token(Token = "0x2000207")]
	public class Slider : MonoBehaviour
	{
		[Token(Token = "0x4000EBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float _slidePercentage;

		[Token(Token = "0x4000EBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FloatEvent onSliderChange;

		[Token(Token = "0x4000EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float lastSliderPercentage;

		[Token(Token = "0x4000EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float slideRangeLow;

		[Token(Token = "0x4000EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float slideRangeHigh;

		[Token(Token = "0x4000EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float slideRange;

		[Token(Token = "0x17000115")]
		public float SlidePercentage
		{
			[Token(Token = "0x6000CFF")]
			[Address(RVA = "0xE308BC", Offset = "0xE308BC", VA = "0xE308BC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000D00")]
		[Address(RVA = "0xE308C4", Offset = "0xE308C4", VA = "0xE308C4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D01")]
		[Address(RVA = "0xE309CC", Offset = "0xE309CC", VA = "0xE309CC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D02")]
		[Address(RVA = "0xE30A4C", Offset = "0xE30A4C", VA = "0xE30A4C", Slot = "4")]
		public virtual void OnSliderChange(float percentage)
		{
		}

		[Token(Token = "0x6000D03")]
		[Address(RVA = "0xE30AB8", Offset = "0xE30AB8", VA = "0xE30AB8")]
		public Slider()
		{
		}
	}
	[Token(Token = "0x2000208")]
	public enum MovementVector
	{
		[Token(Token = "0x4000EC3")]
		HMD,
		[Token(Token = "0x4000EC4")]
		Controller
	}
	[Token(Token = "0x2000209")]
	public class SmoothLocomotion : MonoBehaviour
	{
		[Token(Token = "0x200020A")]
		public delegate void OnBeforeMoveAction();

		[Token(Token = "0x200020B")]
		public delegate void OnAfterMoveAction();

		[Token(Token = "0x4000EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PlayerControllerType ControllerType;

		[Token(Token = "0x4000EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Header("CharacterController Settings : ")]
		public float MovementSpeed;

		[Token(Token = "0x4000EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Rigidbody Settings : ")]
		[Tooltip("How much force to apply to the rigidbody when the player is grounded")]
		public float MovementForce;

		[Token(Token = "0x4000EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Maximium velocity of the player's rigidbody in X, Z. Used to constrain max speed movement.")]
		public float MaxHorizontalVelocity;

		[Token(Token = "0x4000EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Maximium velocity of the player's rigidbody on the Y axis. Used to constrain max vertical movement, such as jumping and falling.")]
		public float MaxVerticalVelocity;

		[Token(Token = "0x4000ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("How far up from the characters feet is considered a step. Anything below this will be considered grounded.")]
		public float StepHeight;

		[Token(Token = "0x4000ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Maximium angle a slope can be to be considered grounded. Negated if contact distance from the player's feet is less than StepHeight.")]
		public float MaxSlopeAngle;

		[Token(Token = "0x4000ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Physics Material to apply to the sphere collider while moving. Use this to dynamically adjust friction and bounciness.")]
		public PhysicMaterial MovementMaterial;

		[Token(Token = "0x4000ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Physics Material to apply to the sphere collider when no controls are being issues. Use this to slow t he player down, or allow them to slide across surfaces.")]
		public PhysicMaterial FrictionMaterial;

		[Token(Token = "0x4000ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("How much drag to apply to the player while moving")]
		public float MovementDrag;

		[Token(Token = "0x4000ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("How much drag to apply to the player while standing still. Used to slow down the player or prevent from sliding down a hill.")]
		public float StaticDrag;

		[Token(Token = "0x4000ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("How much drag to apply to the player when in the air / not grounded.")]
		public float AirDrag;

		[Token(Token = "0x4000ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Forward Direction : ")]
		[Tooltip("(Optional) If specified, this transform's forward direction will determine the movement direction ")]
		public Transform ForwardDirection;

		[Token(Token = "0x4000ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Input : ")]
		[Tooltip("Set to false if you do not want to respond to input commands. (For example, if paused or in a menu)")]
		public bool AllowInput;

		[Token(Token = "0x4000ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		[Tooltip("Set to false if you do not want SmoothLocomotion to update movement at all.")]
		[Header("Input : ")]
		public bool UpdateMovement;

		[Token(Token = "0x4000ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Used to determine which direction to move. Example : Left Thumbstick Axis or Touchpad. ")]
		public List<InputAxis> inputAxis;

		[Token(Token = "0x4000ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Input Action used to affect movement")]
		public InputActionReference MoveAction;

		[Token(Token = "0x4000ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("If true, movement events will only be sent if the Application has focus (Or Play window, if running in the Unity Editor)")]
		public bool RequireAppFocus;

		[Token(Token = "0x4000ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Header("Sprint : ")]
		public float SprintSpeed;

		[Token(Token = "0x4000ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("The key(s) to use to initiate sprint. You can also override the SprintKeyDown() function to determine your sprint criteria.")]
		public List<ControllerBinding> SprintInput;

		[Token(Token = "0x4000ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Unity Input Action used to enable sprinting")]
		public InputActionReference SprintAction;

		[Token(Token = "0x4000EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Header("Strafe : ")]
		public float StrafeSpeed;

		[Token(Token = "0x4000EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float StrafeSprintSpeed;

		[Token(Token = "0x4000EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Amount of 'force' to apply to the player during Jump")]
		[Header("Jump : ")]
		public float JumpForce;

		[Token(Token = "0x4000EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("The key(s) to use to initiate a jump. You can also override the CheckJump() function to determine your jump criteria.")]
		public List<ControllerBinding> JumpInput;

		[Token(Token = "0x4000EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Unity Input Action used to initiate a jump")]
		public InputActionReference JumpAction;

		[Token(Token = "0x4000EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Can the player move when not grounded? Set to true if you want to be able to move the joysticks and have the player respond to input even when not grounded.")]
		[Header("Air Control : ")]
		public bool AirControl;

		[Token(Token = "0x4000EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Tooltip("How fast the player can move in the air if AirControl = true. Example : 0.5 = Player will move at half the speed of MovementSpeed")]
		public float AirControlSpeed;

		[Token(Token = "0x4000EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private BNGPlayerController playerController;

		[Token(Token = "0x4000EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private CharacterController characterController;

		[Token(Token = "0x4000EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Rigidbody playerRigid;

		[Token(Token = "0x4000EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private SphereCollider playerSphere;

		[Token(Token = "0x4000EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private float movementX;

		[Token(Token = "0x4000EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private float movementY;

		[Token(Token = "0x4000EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float movementZ;

		[Token(Token = "0x4000EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float _verticalSpeed;

		[Token(Token = "0x4000EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Vector3 additionalMovement;

		[Token(Token = "0x4000EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private bool playerInitialized;

		[Token(Token = "0x4000EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private float lastJumpTime;

		[Token(Token = "0x4000EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		private float lastMoveTime;

		[Token(Token = "0x4000EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public float Magnitude;

		[Token(Token = "0x4000EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[Header("Shown for Debug : ")]
		public int GroundContacts;

		[Token(Token = "0x4000EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public float SurfaceAngle;

		[Token(Token = "0x4000EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public float SurfaceHeight;

		[Token(Token = "0x1400001A")]
		public static event OnBeforeMoveAction OnBeforeMove
		{
			[Token(Token = "0x6000D04")]
			[Address(RVA = "0xE30ACC", Offset = "0xE30ACC", VA = "0xE30ACC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000D05")]
			[Address(RVA = "0xE30B84", Offset = "0xE30B84", VA = "0xE30B84")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001B")]
		public static event OnAfterMoveAction OnAfterMove
		{
			[Token(Token = "0x6000D06")]
			[Address(RVA = "0xE30C3C", Offset = "0xE30C3C", VA = "0xE30C3C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000D07")]
			[Address(RVA = "0xE30CF8", Offset = "0xE30CF8", VA = "0xE30CF8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000D08")]
		[Address(RVA = "0xE30DB4", Offset = "0xE30DB4", VA = "0xE30DB4", Slot = "4")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x6000D09")]
		[Address(RVA = "0xE30DFC", Offset = "0xE30DFC", VA = "0xE30DFC", Slot = "5")]
		public virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000D0A")]
		[Address(RVA = "0xE30E34", Offset = "0xE30E34", VA = "0xE30E34", Slot = "6")]
		public virtual void CheckControllerReferences()
		{
		}

		[Token(Token = "0x6000D0B")]
		[Address(RVA = "0xE3100C", Offset = "0xE3100C", VA = "0xE3100C", Slot = "7")]
		public virtual void UpdateInputs()
		{
		}

		[Token(Token = "0x6000D0C")]
		[Address(RVA = "0xE31118", Offset = "0xE31118", VA = "0xE31118", Slot = "8")]
		public virtual void DoRigidBodyJump()
		{
		}

		[Token(Token = "0x6000D0D")]
		[Address(RVA = "0xE311AC", Offset = "0xE311AC", VA = "0xE311AC", Slot = "9")]
		public virtual Vector2 GetMovementAxis()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000D0E")]
		[Address(RVA = "0xE315F0", Offset = "0xE315F0", VA = "0xE315F0", Slot = "10")]
		public virtual void MoveCharacter()
		{
		}

		[Token(Token = "0x6000D0F")]
		[Address(RVA = "0xE317F8", Offset = "0xE317F8", VA = "0xE317F8", Slot = "11")]
		public virtual void MoveRigidCharacter(Vector3 moveTo)
		{
		}

		[Token(Token = "0x6000D10")]
		[Address(RVA = "0xE317FC", Offset = "0xE317FC", VA = "0xE317FC", Slot = "12")]
		public virtual void MoveRigidCharacter()
		{
		}

		[Token(Token = "0x6000D11")]
		[Address(RVA = "0xE31CB4", Offset = "0xE31CB4", VA = "0xE31CB4", Slot = "13")]
		public virtual void MoveCharacter(Vector3 motion)
		{
		}

		[Token(Token = "0x6000D12")]
		[Address(RVA = "0xE31F80", Offset = "0xE31F80", VA = "0xE31F80", Slot = "14")]
		public virtual bool CheckJump()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D13")]
		[Address(RVA = "0xE32100", Offset = "0xE32100", VA = "0xE32100", Slot = "15")]
		public virtual bool CheckSprint()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D14")]
		[Address(RVA = "0xE32270", Offset = "0xE32270", VA = "0xE32270", Slot = "16")]
		public virtual bool IsGrounded()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D15")]
		[Address(RVA = "0xE32304", Offset = "0xE32304", VA = "0xE32304", Slot = "17")]
		public virtual void SetupCharacterController()
		{
		}

		[Token(Token = "0x6000D16")]
		[Address(RVA = "0xE324D0", Offset = "0xE324D0", VA = "0xE324D0", Slot = "18")]
		public virtual void SetupRigidbodyPlayer()
		{
		}

		[Token(Token = "0x6000D17")]
		[Address(RVA = "0xE32764", Offset = "0xE32764", VA = "0xE32764", Slot = "19")]
		public virtual void EnableMovement()
		{
		}

		[Token(Token = "0x6000D18")]
		[Address(RVA = "0xE32770", Offset = "0xE32770", VA = "0xE32770", Slot = "20")]
		public virtual void DisableMovement()
		{
		}

		[Token(Token = "0x6000D19")]
		[Address(RVA = "0xE32778", Offset = "0xE32778", VA = "0xE32778")]
		private void OnCollisionStay(Collision collisionInfo)
		{
		}

		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0xE32A90", Offset = "0xE32A90", VA = "0xE32A90")]
		public SmoothLocomotion()
		{
		}
	}
	[Token(Token = "0x200020C")]
	public enum PlayerControllerType
	{
		[Token(Token = "0x4000EF4")]
		CharacterController,
		[Token(Token = "0x4000EF5")]
		Rigidbody
	}
	[Token(Token = "0x200020D")]
	public class SnapZone : MonoBehaviour
	{
		[Token(Token = "0x4000EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The currently held item. Set this in the editor to equip on Start().")]
		[Header("Starting / Held Item")]
		public Grabbable HeldItem;

		[Token(Token = "0x4000EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("TSet this in the editor to equip on Start().")]
		public Grabbable StartingItem;

		[Token(Token = "0x4000EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If false, Item will Move back to inventory space if player drops it.")]
		[Header("Options")]
		public bool CanDropItem;

		[Token(Token = "0x4000EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[Tooltip("If false the snap zone cannot have it's content replaced.")]
		public bool CanSwapItem;

		[Token(Token = "0x4000EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		[Tooltip("If false the snap zone cannot have it's content replaced.")]
		public bool CanRemoveItem;

		[Token(Token = "0x4000EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Multiply Item Scale times this when in snap zone.")]
		public float ScaleItem;

		[Token(Token = "0x4000EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float _scaleTo;

		[Token(Token = "0x4000EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool DisableColliders;

		[Token(Token = "0x4000EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<Collider> disabledColliders;

		[Token(Token = "0x4000EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("If true the item inside the SnapZone will be duplicated, instead of removed, from the SnapZone.")]
		public bool DuplicateItemOnGrab;

		[Token(Token = "0x4000F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Only snap if Grabbable was dropped maximum of X seconds ago")]
		public float MaxDropTime;

		[Token(Token = "0x4000F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public float LastSnapTime;

		[Token(Token = "0x4000F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Filtering")]
		[Tooltip("If not empty, can only snap objects if transform name contains one of these strings")]
		public List<string> OnlyAllowNames;

		[Token(Token = "0x4000F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Do not allow snapping if transform contains one of these names")]
		public List<string> ExcludeTransformNames;

		[Token(Token = "0x4000F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Audio")]
		public AudioClip SoundOnSnap;

		[Token(Token = "0x4000F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AudioClip SoundOnUnsnap;

		[Token(Token = "0x4000F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Events")]
		public GrabbableEvent OnSnapEvent;

		[Token(Token = "0x4000F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public GrabbableEvent OnDetachEvent;

		[Token(Token = "0x4000F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private GrabbablesInTrigger gZone;

		[Token(Token = "0x4000F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Rigidbody heldItemRigid;

		[Token(Token = "0x4000F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool heldItemWasKinematic;

		[Token(Token = "0x4000F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Grabbable trackedItem;

		[Token(Token = "0x4000F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[HideInInspector]
		public Grabbable ClosestGrabbable;

		[Token(Token = "0x4000F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private SnapZoneOffset offset;

		[Token(Token = "0x6000D23")]
		[Address(RVA = "0xE32F60", Offset = "0xE32F60", VA = "0xE32F60")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D24")]
		[Address(RVA = "0xE330DC", Offset = "0xE330DC", VA = "0xE330DC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D25")]
		[Address(RVA = "0xE33480", Offset = "0xE33480", VA = "0xE33480")]
		private Grabbable getClosestGrabbable()
		{
			return null;
		}

		[Token(Token = "0x6000D26")]
		[Address(RVA = "0xE33AD0", Offset = "0xE33AD0", VA = "0xE33AD0", Slot = "4")]
		public virtual void GrabGrabbable(Grabbable grab)
		{
		}

		[Token(Token = "0x6000D27")]
		[Address(RVA = "0xE339C4", Offset = "0xE339C4", VA = "0xE339C4")]
		private void disableGrabbable(Grabbable grab)
		{
		}

		[Token(Token = "0x6000D28")]
		[Address(RVA = "0xE340B4", Offset = "0xE340B4", VA = "0xE340B4", Slot = "5")]
		public virtual void GrabEquipped(Grabber grabber)
		{
		}

		[Token(Token = "0x6000D29")]
		[Address(RVA = "0xE343F8", Offset = "0xE343F8", VA = "0xE343F8", Slot = "6")]
		public virtual bool CanBeRemoved()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D2A")]
		[Address(RVA = "0xE34454", Offset = "0xE34454", VA = "0xE34454", Slot = "7")]
		public virtual void ReleaseAll()
		{
		}

		[Token(Token = "0x6000D2B")]
		[Address(RVA = "0xE34860", Offset = "0xE34860", VA = "0xE34860")]
		public SnapZone()
		{
		}
	}
	[Token(Token = "0x200020E")]
	public class SnapZoneOffset : MonoBehaviour
	{
		[Token(Token = "0x4000F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 LocalPositionOffset;

		[Token(Token = "0x4000F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 LocalRotationOffset;

		[Token(Token = "0x6000D2C")]
		[Address(RVA = "0xE34910", Offset = "0xE34910", VA = "0xE34910")]
		public SnapZoneOffset()
		{
		}
	}
	[Token(Token = "0x200020F")]
	public class SnapZoneScale : MonoBehaviour
	{
		[Token(Token = "0x4000F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Local Scale (x, y and z) of Grabbable when inside the SnapZone")]
		public float Scale;

		[Token(Token = "0x6000D2D")]
		[Address(RVA = "0xE34918", Offset = "0xE34918", VA = "0xE34918")]
		public SnapZoneScale()
		{
		}
	}
	[Token(Token = "0x2000210")]
	public class SteeringWheel : GrabbableEvents
	{
		[Token(Token = "0x4000F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Rotation Limits")]
		[Tooltip("Maximum Z value in Local Euler Angles. Can be < -360. Ex : -450")]
		public float MinAngle;

		[Token(Token = "0x4000F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Maximum Z value in Local Euler Angles. Can be > 360. Ex : 450")]
		public float MaxAngle;

		[Token(Token = "0x4000F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The Transform to rotate on its Z axis.")]
		[Header("Rotation Object")]
		public Transform RotatorObject;

		[Token(Token = "0x4000F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("How fast to move the wheel towards the target angle. 0 = Instant.")]
		[Header("Rotation Speed")]
		public float RotationSpeed;

		[Token(Token = "0x4000F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("IF true both hands will effect the rotation of the steering wheel while grabbed with both hands. Set to false if you only want one hand to control the rotation.")]
		[Header("Two-Handed Option")]
		public bool AllowTwoHanded;

		[Token(Token = "0x4000F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		[Header("Return to Center")]
		public bool ReturnToCenter;

		[Token(Token = "0x4000F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float ReturnToCenterSpeed;

		[Token(Token = "0x4000F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Debug Options")]
		public Text DebugText;

		[Token(Token = "0x4000F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Events")]
		[Tooltip("Called if the SteeringWheel changes angle. Returns the current angle in degrees, clamped between MinAngle / MaxAngle")]
		public FloatEvent onAngleChange;

		[Token(Token = "0x4000F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Called every frame. Returns the current current rotation between -1, 1")]
		public FloatEvent onValueChange;

		[Token(Token = "0x4000F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Editor Option")]
		[Tooltip("If true will show an angle helper in editor mode (Gizmos must be enabled)")]
		public bool ShowEditorGizmos;

		[Token(Token = "0x4000F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		protected Vector3 rotatePosition;

		[Token(Token = "0x4000F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Vector3 previousPrimaryPosition;

		[Token(Token = "0x4000F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected Vector3 previousSecondaryPosition;

		[Token(Token = "0x4000F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected float targetAngle;

		[Token(Token = "0x4000F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected float previousTargetAngle;

		[Token(Token = "0x4000F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected float smoothedAngle;

		[Token(Token = "0x17000116")]
		public float Angle
		{
			[Token(Token = "0x6000D2E")]
			[Address(RVA = "0xE34928", Offset = "0xE34928", VA = "0xE34928")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000117")]
		public float RawAngle
		{
			[Token(Token = "0x6000D2F")]
			[Address(RVA = "0xE34944", Offset = "0xE34944", VA = "0xE34944")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000118")]
		public float ScaleValue
		{
			[Token(Token = "0x6000D30")]
			[Address(RVA = "0xE3494C", Offset = "0xE3494C", VA = "0xE3494C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000119")]
		public float ScaleValueInverted
		{
			[Token(Token = "0x6000D31")]
			[Address(RVA = "0xE34974", Offset = "0xE34974", VA = "0xE34974")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700011A")]
		public float AngleInverted
		{
			[Token(Token = "0x6000D32")]
			[Address(RVA = "0xE349AC", Offset = "0xE349AC", VA = "0xE349AC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700011B")]
		public Grabber PrimaryGrabber
		{
			[Token(Token = "0x6000D33")]
			[Address(RVA = "0xE349CC", Offset = "0xE349CC", VA = "0xE349CC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700011C")]
		public Grabber SecondaryGrabber
		{
			[Token(Token = "0x6000D34")]
			[Address(RVA = "0xE34A74", Offset = "0xE34A74", VA = "0xE34A74")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000D35")]
		[Address(RVA = "0xE34B18", Offset = "0xE34B18", VA = "0xE34B18")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D36")]
		[Address(RVA = "0xE34BD0", Offset = "0xE34BD0", VA = "0xE34BD0", Slot = "27")]
		public virtual void UpdateAngleCalculations()
		{
		}

		[Token(Token = "0x6000D37")]
		[Address(RVA = "0xE34E70", Offset = "0xE34E70", VA = "0xE34E70")]
		public float GetRelativeAngle(Vector3 position1, Vector3 position2)
		{
			return default(float);
		}

		[Token(Token = "0x6000D38")]
		[Address(RVA = "0xE34FAC", Offset = "0xE34FAC", VA = "0xE34FAC", Slot = "28")]
		public virtual void ApplyAngleToSteeringWheel(float angle)
		{
		}

		[Token(Token = "0x6000D39")]
		[Address(RVA = "0xE34FD4", Offset = "0xE34FD4", VA = "0xE34FD4", Slot = "29")]
		public virtual void UpdatePreviewText()
		{
		}

		[Token(Token = "0x6000D3A")]
		[Address(RVA = "0xE35150", Offset = "0xE35150", VA = "0xE35150", Slot = "30")]
		public virtual void CallEvents()
		{
		}

		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0xE351EC", Offset = "0xE351EC", VA = "0xE351EC", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0xE352F4", Offset = "0xE352F4", VA = "0xE352F4", Slot = "31")]
		public virtual void ReturnToCenterAngle()
		{
		}

		[Token(Token = "0x6000D3D")]
		[Address(RVA = "0xE349D0", Offset = "0xE349D0", VA = "0xE349D0")]
		public Grabber GetPrimaryGrabber()
		{
			return null;
		}

		[Token(Token = "0x6000D3E")]
		[Address(RVA = "0xE34A78", Offset = "0xE34A78", VA = "0xE34A78")]
		public Grabber GetSecondaryGrabber()
		{
			return null;
		}

		[Token(Token = "0x6000D3F")]
		[Address(RVA = "0xE353AC", Offset = "0xE353AC", VA = "0xE353AC", Slot = "32")]
		public virtual void UpdatePreviousAngle(float angle)
		{
		}

		[Token(Token = "0x6000D40")]
		[Address(RVA = "0xE353B4", Offset = "0xE353B4", VA = "0xE353B4", Slot = "33")]
		public virtual float GetScaledValue(float value, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6000D41")]
		[Address(RVA = "0xE353D4", Offset = "0xE353D4", VA = "0xE353D4")]
		public SteeringWheel()
		{
		}
	}
	[Token(Token = "0x2000211")]
	public class TrackedDevice : MonoBehaviour
	{
		[Token(Token = "0x4000F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TrackableDevice Device;

		[Token(Token = "0x4000F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected UnityEngine.XR.InputDevice deviceToTrack;

		[Token(Token = "0x4000F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Vector3 initialLocalPosition;

		[Token(Token = "0x4000F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected Quaternion initialLocalRotation;

		[Token(Token = "0x4000F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		protected Vector3 currentLocalPosition;

		[Token(Token = "0x4000F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Quaternion currentLocalRotation;

		[Token(Token = "0x6000D42")]
		[Address(RVA = "0xE353FC", Offset = "0xE353FC", VA = "0xE353FC", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000D43")]
		[Address(RVA = "0xE3544C", Offset = "0xE3544C", VA = "0xE3544C", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000D44")]
		[Address(RVA = "0xE354C0", Offset = "0xE354C0", VA = "0xE354C0", Slot = "6")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000D45")]
		[Address(RVA = "0xE35534", Offset = "0xE35534", VA = "0xE35534", Slot = "7")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000D46")]
		[Address(RVA = "0xE3555C", Offset = "0xE3555C", VA = "0xE3555C", Slot = "8")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6000D47")]
		[Address(RVA = "0xE35568", Offset = "0xE35568", VA = "0xE35568", Slot = "9")]
		public virtual void RefreshDeviceStatus()
		{
		}

		[Token(Token = "0x6000D48")]
		[Address(RVA = "0xE3564C", Offset = "0xE3564C", VA = "0xE3564C", Slot = "10")]
		public virtual void UpdateDevice()
		{
		}

		[Token(Token = "0x6000D49")]
		[Address(RVA = "0xE35844", Offset = "0xE35844", VA = "0xE35844", Slot = "11")]
		protected virtual void OnBeforeRender()
		{
		}

		[Token(Token = "0x6000D4A")]
		[Address(RVA = "0xE35850", Offset = "0xE35850", VA = "0xE35850")]
		public TrackedDevice()
		{
		}
	}
	[Token(Token = "0x2000212")]
	public enum TrackableDevice
	{
		[Token(Token = "0x4000F29")]
		HMD,
		[Token(Token = "0x4000F2A")]
		LeftController,
		[Token(Token = "0x4000F2B")]
		RightController
	}
	[Token(Token = "0x2000213")]
	public class Arrow : MonoBehaviour
	{
		[Token(Token = "0x2000214")]
		[CompilerGenerated]
		private sealed class <QueueDestroy>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Arrow <>4__this;

			[Token(Token = "0x1700011D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D57")]
				[Address(RVA = "0xE36A5C", Offset = "0xE36A5C", VA = "0xE36A5C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700011E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D59")]
				[Address(RVA = "0xE36AA4", Offset = "0xE36AA4", VA = "0xE36AA4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D54")]
			[Address(RVA = "0xE35E24", Offset = "0xE35E24", VA = "0xE35E24")]
			[DebuggerHidden]
			public <QueueDestroy>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6000D55")]
			[Address(RVA = "0xE368E0", Offset = "0xE368E0", VA = "0xE368E0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D56")]
			[Address(RVA = "0xE368E4", Offset = "0xE368E4", VA = "0xE368E4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D58")]
			[Address(RVA = "0xE36A64", Offset = "0xE36A64", VA = "0xE36A64", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000215")]
		[CompilerGenerated]
		private sealed class <ReEnableCollider>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Arrow <>4__this;

			[Token(Token = "0x4000F3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <waitFrames>5__2;

			[Token(Token = "0x4000F3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int <x>5__3;

			[Token(Token = "0x1700011F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D5D")]
				[Address(RVA = "0xE36B8C", Offset = "0xE36B8C", VA = "0xE36B8C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000120")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D5F")]
				[Address(RVA = "0xE36BD4", Offset = "0xE36BD4", VA = "0xE36BD4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D5A")]
			[Address(RVA = "0xE35E4C", Offset = "0xE35E4C", VA = "0xE35E4C")]
			[DebuggerHidden]
			public <ReEnableCollider>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6000D5B")]
			[Address(RVA = "0xE36AAC", Offset = "0xE36AAC", VA = "0xE36AAC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D5C")]
			[Address(RVA = "0xE36AB0", Offset = "0xE36AB0", VA = "0xE36AB0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D5E")]
			[Address(RVA = "0xE36B94", Offset = "0xE36B94", VA = "0xE36B94", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Rigidbody rb;

		[Token(Token = "0x4000F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Grabbable grab;

		[Token(Token = "0x4000F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool Flying;

		[Token(Token = "0x4000F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float ZVel;

		[Token(Token = "0x4000F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Collider ShaftCollider;

		[Token(Token = "0x4000F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AudioSource impactSound;

		[Token(Token = "0x4000F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float flightTime;

		[Token(Token = "0x4000F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float destroyTime;

		[Token(Token = "0x4000F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Coroutine queueDestroy;

		[Token(Token = "0x4000F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Projectile ProjectileObject;

		[Token(Token = "0x4000F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float arrowDamage;

		[Token(Token = "0x6000D4B")]
		[Address(RVA = "0xE35858", Offset = "0xE35858", VA = "0xE35858")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D4C")]
		[Address(RVA = "0xE35A08", Offset = "0xE35A08", VA = "0xE35A08")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000D4D")]
		[Address(RVA = "0xE35C3C", Offset = "0xE35C3C", VA = "0xE35C3C")]
		public void ShootArrow(Vector3 shotForce)
		{
		}

		[Token(Token = "0x6000D4E")]
		[Address(RVA = "0xE35DB0", Offset = "0xE35DB0", VA = "0xE35DB0")]
		[IteratorStateMachine(typeof(<QueueDestroy>d__14))]
		private IEnumerator QueueDestroy()
		{
			return null;
		}

		[Token(Token = "0x6000D4F")]
		[Address(RVA = "0xE35D3C", Offset = "0xE35D3C", VA = "0xE35D3C")]
		[IteratorStateMachine(typeof(<ReEnableCollider>d__15))]
		private IEnumerator ReEnableCollider()
		{
			return null;
		}

		[Token(Token = "0x6000D50")]
		[Address(RVA = "0xE35E74", Offset = "0xE35E74", VA = "0xE35E74")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000D51")]
		[Address(RVA = "0xE36390", Offset = "0xE36390", VA = "0xE36390")]
		private void tryStickArrow(Collision collision)
		{
		}

		[Token(Token = "0x6000D52")]
		[Address(RVA = "0xE367C0", Offset = "0xE367C0", VA = "0xE367C0")]
		private void playSoundInterval(float fromSeconds, float toSeconds)
		{
		}

		[Token(Token = "0x6000D53")]
		[Address(RVA = "0xE368D0", Offset = "0xE368D0", VA = "0xE368D0")]
		public Arrow()
		{
		}
	}
	[Token(Token = "0x2000216")]
	public class ArrowGrabArea : MonoBehaviour
	{
		[Token(Token = "0x4000F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Bow theBow;

		[Token(Token = "0x6000D60")]
		[Address(RVA = "0xE36BDC", Offset = "0xE36BDC", VA = "0xE36BDC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D61")]
		[Address(RVA = "0xE36C50", Offset = "0xE36C50", VA = "0xE36C50")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000D62")]
		[Address(RVA = "0xE36FD8", Offset = "0xE36FD8", VA = "0xE36FD8")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000D63")]
		[Address(RVA = "0xE370F8", Offset = "0xE370F8", VA = "0xE370F8")]
		public ArrowGrabArea()
		{
		}
	}
	[Token(Token = "0x2000217")]
	public class AutoGrabGrabbable : GrabbableEvents
	{
		[Token(Token = "0x6000D64")]
		[Address(RVA = "0xE37100", Offset = "0xE37100", VA = "0xE37100", Slot = "8")]
		public override void OnBecomesClosestGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6000D65")]
		[Address(RVA = "0xE37128", Offset = "0xE37128", VA = "0xE37128")]
		public AutoGrabGrabbable()
		{
		}
	}
	[Token(Token = "0x2000218")]
	public class Bow : GrabbableEvents
	{
		[Token(Token = "0x4000F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Bow Settings")]
		[Tooltip("")]
		public float BowForce;

		[Token(Token = "0x4000F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("If True the BowModel Transform will align itself with the grabber holding the arrow")]
		public bool AlignBowToArrow;

		[Token(Token = "0x4000F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("If AlignBowToArrow is true this transform will align itself with the grabber holding the arrow")]
		public Transform BowModel;

		[Token(Token = "0x4000F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Arrow Settings")]
		[Tooltip("Arrow will rotate around this if bow is held in left hand or ArrowRestLeftHanded is null")]
		public Transform ArrowRest;

		[Token(Token = "0x4000F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool CanGrabArrowFromKnock;

		[Token(Token = "0x4000F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Name of the prefab used to create an arrow. Must be in a /Resources/ directory.")]
		public string ArrowPrefabName;

		[Token(Token = "0x4000F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Arrow will rotate around this if bow is being held in right hand")]
		public Transform ArrowRestLeftHanded;

		[Token(Token = "0x4000F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform ArrowKnock;

		[Token(Token = "0x4000F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Arrow Positioning")]
		public bool IgnoreXPosition;

		[Token(Token = "0x4000F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool IgnoreYPosition;

		[Token(Token = "0x4000F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		public bool AllowNegativeZ;

		[Token(Token = "0x4000F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
		[Header("Arrow Grabbing")]
		public bool CanGrabArrow;

		[Token(Token = "0x4000F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		public Grabber ClosestGrabber;

		[Token(Token = "0x4000F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public Arrow GrabbedArrow;

		[Token(Token = "0x4000F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Grabbable arrowGrabbable;

		[Token(Token = "0x4000F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HideInInspector]
		public Grabber arrowGrabber;

		[Token(Token = "0x4000F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HideInInspector]
		public Vector3 LastValidPosition;

		[Token(Token = "0x4000F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Header("String Settings")]
		public float MaxStringDistance;

		[Token(Token = "0x4000F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float StringDistance;

		[Token(Token = "0x4000F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float _lastDrawPercent;

		[Token(Token = "0x4000F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float _lastDrawHaptic;

		[Token(Token = "0x4000F56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float _lastDrawHapticTime;

		[Token(Token = "0x4000F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private bool playedDrawSound;

		[Token(Token = "0x4000F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 initialKnockPosition;

		[Token(Token = "0x4000F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private bool holdingArrow;

		[Token(Token = "0x4000F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Grabbable bowGrabbable;

		[Token(Token = "0x4000F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Header("Debug Text")]
		public Text PercentageUI;

		[Token(Token = "0x4000F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private List<DrawDefinition> drawDefs;

		[Token(Token = "0x4000F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private AudioSource audioSource;

		[Token(Token = "0x4000F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Vector3 BowUp;

		[Token(Token = "0x4000F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public float AlignBowSpeed;

		[Token(Token = "0x17000121")]
		public float DrawPercent
		{
			[Token(Token = "0x6000D66")]
			[Address(RVA = "0xE37130", Offset = "0xE37130", VA = "0xE37130")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D67")]
			[Address(RVA = "0xE37138", Offset = "0xE37138", VA = "0xE37138")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000D68")]
		[Address(RVA = "0xE37140", Offset = "0xE37140", VA = "0xE37140")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D69")]
		[Address(RVA = "0xE376E8", Offset = "0xE376E8", VA = "0xE376E8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D6A")]
		[Address(RVA = "0xE38020", Offset = "0xE38020", VA = "0xE38020")]
		private Transform getArrowRest()
		{
			return null;
		}

		[Token(Token = "0x6000D6B")]
		[Address(RVA = "0xE37F98", Offset = "0xE37F98", VA = "0xE37F98")]
		private bool canGrabArrowFromKnock()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D6C")]
		[Address(RVA = "0xE38390", Offset = "0xE38390", VA = "0xE38390")]
		private float getGrabArrowInput()
		{
			return default(float);
		}

		[Token(Token = "0x6000D6D")]
		[Address(RVA = "0xE384C4", Offset = "0xE384C4", VA = "0xE384C4")]
		private float getGripInput(ControllerHand handSide)
		{
			return default(float);
		}

		[Token(Token = "0x6000D6E")]
		[Address(RVA = "0xE38484", Offset = "0xE38484", VA = "0xE38484")]
		private float getTriggerInput(ControllerHand handSide)
		{
			return default(float);
		}

		[Token(Token = "0x6000D6F")]
		[Address(RVA = "0xE3810C", Offset = "0xE3810C", VA = "0xE3810C")]
		private void setKnockPosition()
		{
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0xE3833C", Offset = "0xE3833C", VA = "0xE3833C")]
		private void checkDrawSound()
		{
		}

		[Token(Token = "0x6000D71")]
		[Address(RVA = "0xE37AB4", Offset = "0xE37AB4", VA = "0xE37AB4")]
		private void updateDrawDistance()
		{
		}

		[Token(Token = "0x6000D72")]
		[Address(RVA = "0xE37C70", Offset = "0xE37C70", VA = "0xE37C70")]
		private void checkBowHaptics()
		{
		}

		[Token(Token = "0x6000D73")]
		[Address(RVA = "0xE37EE8", Offset = "0xE37EE8", VA = "0xE37EE8")]
		private void resetStringPosition()
		{
		}

		[Token(Token = "0x6000D74")]
		[Address(RVA = "0xE3851C", Offset = "0xE3851C", VA = "0xE3851C", Slot = "27")]
		protected virtual void alignArrow()
		{
		}

		[Token(Token = "0x6000D75")]
		[Address(RVA = "0xE38644", Offset = "0xE38644", VA = "0xE38644", Slot = "28")]
		protected virtual void alignBow()
		{
		}

		[Token(Token = "0x6000D76")]
		[Address(RVA = "0xE389C4", Offset = "0xE389C4", VA = "0xE389C4", Slot = "29")]
		public virtual void ResetBowAlignment()
		{
		}

		[Token(Token = "0x6000D77")]
		[Address(RVA = "0xE36DFC", Offset = "0xE36DFC", VA = "0xE36DFC")]
		public void GrabArrow(Arrow arrow)
		{
		}

		[Token(Token = "0x6000D78")]
		[Address(RVA = "0xE37DCC", Offset = "0xE37DCC", VA = "0xE37DCC")]
		public void ReleaseArrow()
		{
		}

		[Token(Token = "0x6000D79")]
		[Address(RVA = "0xE38AE4", Offset = "0xE38AE4", VA = "0xE38AE4", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x6000D7A")]
		[Address(RVA = "0xE38AA0", Offset = "0xE38AA0", VA = "0xE38AA0")]
		private void resetArrowValues()
		{
		}

		[Token(Token = "0x6000D7B")]
		[Address(RVA = "0xE38B08", Offset = "0xE38B08", VA = "0xE38B08")]
		private void playSoundInterval(float fromSeconds, float toSeconds, float volume)
		{
		}

		[Token(Token = "0x6000D7C")]
		[Address(RVA = "0xE38504", Offset = "0xE38504", VA = "0xE38504")]
		private void playBowDraw()
		{
		}

		[Token(Token = "0x6000D7D")]
		[Address(RVA = "0xE38A84", Offset = "0xE38A84", VA = "0xE38A84")]
		private void playBowRelease()
		{
		}

		[Token(Token = "0x6000D7E")]
		[Address(RVA = "0xE38C3C", Offset = "0xE38C3C", VA = "0xE38C3C")]
		public Bow()
		{
		}
	}
	[Token(Token = "0x2000219")]
	public class DrawDefinition
	{
		[Token(Token = "0x17000122")]
		public float DrawPercentage
		{
			[Token(Token = "0x6000D80")]
			[Address(RVA = "0xE38D34", Offset = "0xE38D34", VA = "0xE38D34")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D81")]
			[Address(RVA = "0xE38D3C", Offset = "0xE38D3C", VA = "0xE38D3C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000123")]
		public float HapticAmplitude
		{
			[Token(Token = "0x6000D82")]
			[Address(RVA = "0xE38D44", Offset = "0xE38D44", VA = "0xE38D44")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D83")]
			[Address(RVA = "0xE38D4C", Offset = "0xE38D4C", VA = "0xE38D4C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000124")]
		public float HapticFrequency
		{
			[Token(Token = "0x6000D84")]
			[Address(RVA = "0xE38D54", Offset = "0xE38D54", VA = "0xE38D54")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000D85")]
			[Address(RVA = "0xE38D5C", Offset = "0xE38D5C", VA = "0xE38D5C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000D86")]
		[Address(RVA = "0xE376E0", Offset = "0xE376E0", VA = "0xE376E0")]
		public DrawDefinition()
		{
		}
	}
	[Token(Token = "0x200021A")]
	public class BowArm : MonoBehaviour
	{
		[Token(Token = "0x4000F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Bow BowItem;

		[Token(Token = "0x4000F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float BowPercentStart;

		[Token(Token = "0x4000F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float RotateDegrees;

		[Token(Token = "0x4000F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float Speed;

		[Token(Token = "0x4000F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion _startRotation;

		[Token(Token = "0x4000F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion _endRotation;

		[Token(Token = "0x4000F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool RotateX;

		[Token(Token = "0x4000F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		public bool RotateZ;

		[Token(Token = "0x6000D87")]
		[Address(RVA = "0xE38D64", Offset = "0xE38D64", VA = "0xE38D64")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0xE38EA0", Offset = "0xE38EA0", VA = "0xE38EA0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0xE39078", Offset = "0xE39078", VA = "0xE39078")]
		public BowArm()
		{
		}
	}
	[Token(Token = "0x200021B")]
	public class BulletHole : MonoBehaviour
	{
		[Token(Token = "0x4000F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform BulletHoleDecal;

		[Token(Token = "0x4000F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float MaxScale;

		[Token(Token = "0x4000F6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float MinScale;

		[Token(Token = "0x4000F6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool RandomYRotation;

		[Token(Token = "0x4000F6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float DestroyTime;

		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0xE3909C", Offset = "0xE3909C", VA = "0xE3909C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D8B")]
		[Address(RVA = "0xE39260", Offset = "0xE39260", VA = "0xE39260")]
		public void TryAttachTo(Collider col)
		{
		}

		[Token(Token = "0x6000D8C")]
		[Address(RVA = "0xE3938C", Offset = "0xE3938C", VA = "0xE3938C")]
		private bool transformIsEqualScale(Transform theTransform)
		{
			return default(bool);
		}

		[Token(Token = "0x6000D8D")]
		[Address(RVA = "0xE393FC", Offset = "0xE393FC", VA = "0xE393FC")]
		private void DestroySelf()
		{
		}

		[Token(Token = "0x6000D8E")]
		[Address(RVA = "0xE39488", Offset = "0xE39488", VA = "0xE39488")]
		public BulletHole()
		{
		}
	}
	[Token(Token = "0x200021C")]
	public class CalibratePlayerHeight : MonoBehaviour
	{
		[Token(Token = "0x200021D")]
		[CompilerGenerated]
		private sealed class <setupInitialOffset>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public CalibratePlayerHeight <>4__this;

			[Token(Token = "0x17000125")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D9B")]
				[Address(RVA = "0xE398C0", Offset = "0xE398C0", VA = "0xE398C0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000126")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D9D")]
				[Address(RVA = "0xE39908", Offset = "0xE39908", VA = "0xE39908", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D98")]
			[Address(RVA = "0xE397A8", Offset = "0xE397A8", VA = "0xE397A8")]
			[DebuggerHidden]
			public <setupInitialOffset>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x6000D99")]
			[Address(RVA = "0xE397F4", Offset = "0xE397F4", VA = "0xE397F4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D9A")]
			[Address(RVA = "0xE397F8", Offset = "0xE397F8", VA = "0xE397F8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D9C")]
			[Address(RVA = "0xE398C8", Offset = "0xE398C8", VA = "0xE398C8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Desired height of the player in meters. The player's presence in vr will be adjusted based on their physical height. 1.65 meters = 5.41 feet")]
		public float DesiredPlayerHeight;

		[Token(Token = "0x4000F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Adjust the CharacterControllerYOffset property of this playerController. If not specified one will be found using GetComponentInChildren()")]
		public BNGPlayerController PlayerController;

		[Token(Token = "0x4000F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Startup")]
		[Tooltip("If true, the player's virtual height will be adjusted to match DesiredPlayerHeight on Start()")]
		public bool CalibrateOnStart;

		[Token(Token = "0x4000F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("If specified, pressing this button / action will activate the calibration")]
		[Header("Input :")]
		public InputAction CalibrateHeightAction;

		[Token(Token = "0x4000F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _initialOffset;

		[Token(Token = "0x6000D8F")]
		[Address(RVA = "0xE394AC", Offset = "0xE394AC", VA = "0xE394AC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D90")]
		[Address(RVA = "0xE39658", Offset = "0xE39658", VA = "0xE39658")]
		public void CalibrateHeight()
		{
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0xE39660", Offset = "0xE39660", VA = "0xE39660")]
		public void CalibrateHeight(float calibrateHeight)
		{
		}

		[Token(Token = "0x6000D92")]
		[Address(RVA = "0xE39710", Offset = "0xE39710", VA = "0xE39710")]
		public void ResetPlayerHeight()
		{
		}

		[Token(Token = "0x6000D93")]
		[Address(RVA = "0xE39694", Offset = "0xE39694", VA = "0xE39694")]
		public float GetCurrentPlayerHeight()
		{
			return default(float);
		}

		[Token(Token = "0x6000D94")]
		[Address(RVA = "0xE39730", Offset = "0xE39730", VA = "0xE39730", Slot = "4")]
		public virtual void SetInitialOffset()
		{
		}

		[Token(Token = "0x6000D95")]
		[Address(RVA = "0xE395E4", Offset = "0xE395E4", VA = "0xE395E4")]
		[IteratorStateMachine(typeof(<setupInitialOffset>d__11))]
		private IEnumerator setupInitialOffset()
		{
			return null;
		}

		[Token(Token = "0x6000D96")]
		[Address(RVA = "0xE397D0", Offset = "0xE397D0", VA = "0xE397D0")]
		public CalibratePlayerHeight()
		{
		}
	}
	[Token(Token = "0x200021E")]
	public class CustomCenterOfMass : MonoBehaviour
	{
		[Token(Token = "0x4000F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Define Center of Mass")]
		[Tooltip("Local coordinates to use as center of mass if 'CenterOfMassTransform' is not specified.")]
		public Vector3 CenterOfMass;

		[Token(Token = "0x4000F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Use this Transform's local position for the center of mass if specified.")]
		public Transform CenterOfMassTransform;

		[Token(Token = "0x4000F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Debug Options")]
		[Tooltip("If true a red sphere will in the editor show where the center of mass will be positioned")]
		public bool ShowGizmo;

		[Token(Token = "0x4000F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody rigid;

		[Token(Token = "0x6000D9E")]
		[Address(RVA = "0xE39910", Offset = "0xE39910", VA = "0xE39910")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D9F")]
		[Address(RVA = "0xE39988", Offset = "0xE39988", VA = "0xE39988", Slot = "4")]
		public virtual void SetCenterOfMass(Vector3 center)
		{
		}

		[Token(Token = "0x6000DA0")]
		[Address(RVA = "0xE39A38", Offset = "0xE39A38", VA = "0xE39A38", Slot = "5")]
		protected virtual Vector3 getThisCenterOfMass()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DA1")]
		[Address(RVA = "0xE39AC0", Offset = "0xE39AC0", VA = "0xE39AC0")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000DA2")]
		[Address(RVA = "0xE39BEC", Offset = "0xE39BEC", VA = "0xE39BEC")]
		public CustomCenterOfMass()
		{
		}
	}
	[Token(Token = "0x200021F")]
	public class DrawerSound : MonoBehaviour
	{
		[Token(Token = "0x4000F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip DrawerOpenSound;

		[Token(Token = "0x4000F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float DrawerOpenValue;

		[Token(Token = "0x4000F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip DrawerCloseSound;

		[Token(Token = "0x4000F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float DrawerCloseValue;

		[Token(Token = "0x4000F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool playedOpenSound;

		[Token(Token = "0x4000F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool playedCloseSound;

		[Token(Token = "0x6000DA3")]
		[Address(RVA = "0xE39C54", Offset = "0xE39C54", VA = "0xE39C54")]
		public void OnDrawerUpdate(float drawerValue)
		{
		}

		[Token(Token = "0x6000DA4")]
		[Address(RVA = "0xE39DE4", Offset = "0xE39DE4", VA = "0xE39DE4")]
		public DrawerSound()
		{
		}
	}
	[Token(Token = "0x2000220")]
	public class Explosive : MonoBehaviour
	{
		[Token(Token = "0x2000221")]
		[CompilerGenerated]
		private sealed class <explosionRoutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Explosive <>4__this;

			[Token(Token = "0x17000127")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000DAD")]
				[Address(RVA = "0xE3A408", Offset = "0xE3A408", VA = "0xE3A408", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000128")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000DAF")]
				[Address(RVA = "0xE3A450", Offset = "0xE3A450", VA = "0xE3A450", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000DAA")]
			[Address(RVA = "0xE39E90", Offset = "0xE39E90", VA = "0xE39E90")]
			[DebuggerHidden]
			public <explosionRoutine>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x6000DAB")]
			[Address(RVA = "0xE3A000", Offset = "0xE3A000", VA = "0xE3A000", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000DAC")]
			[Address(RVA = "0xE3A004", Offset = "0xE3A004", VA = "0xE3A004", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000DAE")]
			[Address(RVA = "0xE3A410", Offset = "0xE3A410", VA = "0xE3A410", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000222")]
		[CompilerGenerated]
		private sealed class <dealDelayedDamaged>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F8C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delayTime;

			[Token(Token = "0x4000F8D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Damageable damageable;

			[Token(Token = "0x4000F8E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Explosive <>4__this;

			[Token(Token = "0x17000129")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000DB3")]
				[Address(RVA = "0xE3A528", Offset = "0xE3A528", VA = "0xE3A528", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700012A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000DB5")]
				[Address(RVA = "0xE3A570", Offset = "0xE3A570", VA = "0xE3A570", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000DB0")]
			[Address(RVA = "0xE39F58", Offset = "0xE39F58", VA = "0xE39F58")]
			[DebuggerHidden]
			public <dealDelayedDamaged>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6000DB1")]
			[Address(RVA = "0xE3A458", Offset = "0xE3A458", VA = "0xE3A458", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000DB2")]
			[Address(RVA = "0xE3A45C", Offset = "0xE3A45C", VA = "0xE3A45C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000DB4")]
			[Address(RVA = "0xE3A530", Offset = "0xE3A530", VA = "0xE3A530", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Explosion Settings : ")]
		[Tooltip("Objects within this radius will have damage and force applied to it")]
		public float ExplosionRadius;

		[Token(Token = "0x4000F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Apply damage to an item if it has a Damageable component attached. ")]
		public float ExplosionDamage;

		[Token(Token = "0x4000F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If an object has a Rigidbody and is within ExplosionRadius, it will have this amount of ExplosionForce added to it")]
		public float ExplosionForce;

		[Token(Token = "0x4000F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Add an UpwardsModifier to AddExplosionForce. Use this to make objects fly more up into the air, instead of just outwardly.")]
		public float ExplosiveUpwardsModifier;

		[Token(Token = "0x4000F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Shown for Debug : ")]
		public bool ShowExplosionRadius;

		[Token(Token = "0x6000DA5")]
		[Address(RVA = "0xE39DFC", Offset = "0xE39DFC", VA = "0xE39DFC", Slot = "4")]
		public virtual void DoExplosion()
		{
		}

		[Token(Token = "0x6000DA6")]
		[Address(RVA = "0xE39E1C", Offset = "0xE39E1C", VA = "0xE39E1C")]
		[IteratorStateMachine(typeof(<explosionRoutine>d__6))]
		private IEnumerator explosionRoutine()
		{
			return null;
		}

		[Token(Token = "0x6000DA7")]
		[Address(RVA = "0xE39EB8", Offset = "0xE39EB8", VA = "0xE39EB8")]
		[IteratorStateMachine(typeof(<dealDelayedDamaged>d__7))]
		private IEnumerator dealDelayedDamaged(Damageable damageable, float delayTime)
		{
			return null;
		}

		[Token(Token = "0x6000DA8")]
		[Address(RVA = "0xE39F80", Offset = "0xE39F80", VA = "0xE39F80")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000DA9")]
		[Address(RVA = "0xE39FE4", Offset = "0xE39FE4", VA = "0xE39FE4")]
		public Explosive()
		{
		}
	}
	[Token(Token = "0x2000223")]
	public static class ExtensionMethods
	{
		[Token(Token = "0x6000DB6")]
		[Address(RVA = "0xE3A578", Offset = "0xE3A578", VA = "0xE3A578")]
		public static bool GetDown(this ControllerBinding binding)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000224")]
	public class Flashlight : GrabbableEvents
	{
		[Token(Token = "0x4000F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Light SpotLight;

		[Token(Token = "0x4000F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform LightSwitch;

		[Token(Token = "0x4000F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 originalSwitchPosition;

		[Token(Token = "0x6000DB7")]
		[Address(RVA = "0xE3A5E0", Offset = "0xE3A5E0", VA = "0xE3A5E0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DB8")]
		[Address(RVA = "0xE3A618", Offset = "0xE3A618", VA = "0xE3A618", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6000DB9")]
		[Address(RVA = "0xE3A680", Offset = "0xE3A680", VA = "0xE3A680", Slot = "18")]
		public override void OnTriggerUp()
		{
		}

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0xE3A6C8", Offset = "0xE3A6C8", VA = "0xE3A6C8")]
		public Flashlight()
		{
		}
	}
	[Token(Token = "0x2000225")]
	public class FPSText : MonoBehaviour
	{
		[Token(Token = "0x4000F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Text text;

		[Token(Token = "0x4000F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float deltaTime;

		[Token(Token = "0x6000DBB")]
		[Address(RVA = "0xE3A6D0", Offset = "0xE3A6D0", VA = "0xE3A6D0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DBC")]
		[Address(RVA = "0xE3A728", Offset = "0xE3A728", VA = "0xE3A728")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DBD")]
		[Address(RVA = "0xE3A810", Offset = "0xE3A810", VA = "0xE3A810")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000DBE")]
		[Address(RVA = "0xE3A8D4", Offset = "0xE3A8D4", VA = "0xE3A8D4")]
		public FPSText()
		{
		}
	}
	[Token(Token = "0x2000226")]
	public class GrappleShot : GrabbableEvents
	{
		[Token(Token = "0x4000F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Range")]
		public float MaxRange;

		[Token(Token = "0x4000F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Header("CharacterController Grapple Settings")]
		[Tooltip("(CharacterController Player Only) How much movement speed to apply to the CharacterController to move towards the grapple")]
		public float GrappleReelForce;

		[Token(Token = "0x4000F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("currentGrappleDistance must be greater than this to reel in")]
		public float MinReelDistance;

		[Token(Token = "0x4000F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("(Rigidbody Player Only) How much force to apply to the player to move towards the grapple")]
		[Header("Rigidbody Grapple Settings")]
		public float GrappleForce;

		[Token(Token = "0x4000F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("(Rigidbody Player Only) Type of ForceMode to use to move the player towards the grapple point. ForceMode. ForceMode.Acceleration will let you preserve momentum and Swing Around. Use lower number for Acceleration (ex : 3). ForceMode.Velocity will immediately alter your player's velocity, resulting in a smooth but linear movement. Use higher numbers (ex : 200).")]
		public ForceMode GrappleForceMode;

		[Token(Token = "0x4000F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Header("Raycast Layers")]
		public LayerMask GrappleLayers;

		[Token(Token = "0x4000F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Component definitions")]
		public Transform MuzzleTransform;

		[Token(Token = "0x4000F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform HitTargetPrefab;

		[Token(Token = "0x4000F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public LineRenderer GrappleLine;

		[Token(Token = "0x4000F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public LineRenderer HelperLine;

		[Token(Token = "0x4000F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AudioClip GrappleShotSound;

		[Token(Token = "0x4000F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool grappling;

		[Token(Token = "0x4000FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool wasGrappling;

		[Token(Token = "0x4000FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private CharacterController characterController;

		[Token(Token = "0x4000FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x4000FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayerGravity playerGravity;

		[Token(Token = "0x4000FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private PlayerClimbing playerClimbing;

		[Token(Token = "0x4000FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Rigidbody playerRigid;

		[Token(Token = "0x4000FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private AudioSource audioSource;

		[Token(Token = "0x4000FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Header("Shown for Debug :")]
		public float currentGrappleDistance;

		[Token(Token = "0x4000FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private bool validTargetFound;

		[Token(Token = "0x4000FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAD")]
		private bool isDynamic;

		[Token(Token = "0x4000FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Rigidbody grappleTargetRigid;

		[Token(Token = "0x4000FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Collider grappleTargetCollider;

		[Token(Token = "0x4000FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Transform grappleTargetParent;

		[Token(Token = "0x4000FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool requireRelease;

		[Token(Token = "0x4000FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
		private bool climbing;

		[Token(Token = "0x4000FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Climbable ClimbHelper;

		[Token(Token = "0x6000DBF")]
		[Address(RVA = "0xE3A8DC", Offset = "0xE3A8DC", VA = "0xE3A8DC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DC0")]
		[Address(RVA = "0xE3AAE0", Offset = "0xE3AAE0", VA = "0xE3AAE0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000DC1")]
		[Address(RVA = "0xE3B218", Offset = "0xE3B218", VA = "0xE3B218", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6000DC2")]
		[Address(RVA = "0xE3B294", Offset = "0xE3B294", VA = "0xE3B294")]
		private void updateGrappleDistance()
		{
		}

		[Token(Token = "0x6000DC3")]
		[Address(RVA = "0xE3BB68", Offset = "0xE3BB68", VA = "0xE3BB68", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6000DC4")]
		[Address(RVA = "0xE3BB70", Offset = "0xE3BB70", VA = "0xE3BB70", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x6000DC5")]
		[Address(RVA = "0xE3B9B4", Offset = "0xE3B9B4", VA = "0xE3B9B4")]
		private void onReleaseGrapple()
		{
		}

		[Token(Token = "0x6000DC6")]
		[Address(RVA = "0xE3AB58", Offset = "0xE3AB58", VA = "0xE3AB58")]
		private void drawGrappleHelper()
		{
		}

		[Token(Token = "0x6000DC7")]
		[Address(RVA = "0xE3B0E0", Offset = "0xE3B0E0", VA = "0xE3B0E0")]
		private void drawGrappleLine()
		{
		}

		[Token(Token = "0x6000DC8")]
		[Address(RVA = "0xE3B168", Offset = "0xE3B168", VA = "0xE3B168")]
		private void hideGrappleLine()
		{
		}

		[Token(Token = "0x6000DC9")]
		[Address(RVA = "0xE3BC20", Offset = "0xE3BC20", VA = "0xE3BC20")]
		private void showGrappleHelper(Vector3 pos, Quaternion rot)
		{
		}

		[Token(Token = "0x6000DCA")]
		[Address(RVA = "0xE3AFCC", Offset = "0xE3AFCC", VA = "0xE3AFCC")]
		private void hideGrappleHelper()
		{
		}

		[Token(Token = "0x6000DCB")]
		[Address(RVA = "0xE3B370", Offset = "0xE3B370", VA = "0xE3B370")]
		private void reelInGrapple(float triggerValue)
		{
		}

		[Token(Token = "0x6000DCC")]
		[Address(RVA = "0xE3B8D0", Offset = "0xE3B8D0", VA = "0xE3B8D0")]
		private void shootGrapple()
		{
		}

		[Token(Token = "0x6000DCD")]
		[Address(RVA = "0xE3BDEC", Offset = "0xE3BDEC", VA = "0xE3BDEC")]
		private void dropGrapple()
		{
		}

		[Token(Token = "0x6000DCE")]
		[Address(RVA = "0xE3BB8C", Offset = "0xE3BB8C", VA = "0xE3BB8C")]
		private void changeGravity(bool gravityOn)
		{
		}

		[Token(Token = "0x6000DCF")]
		[Address(RVA = "0xE3BDF8", Offset = "0xE3BDF8", VA = "0xE3BDF8")]
		public GrappleShot()
		{
		}
	}
	[Token(Token = "0x2000227")]
	public class HandJet : GrabbableEvents
	{
		[Token(Token = "0x4000FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Movement Speed to apply if using a CharacterController, or Force to apply if using a Rigidbody controller.")]
		public float JetForce;

		[Token(Token = "0x4000FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Enabled while jetting")]
		public ParticleSystem JetFX;

		[Token(Token = "0x4000FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("If true the player will float in the air when not jetting. (Works for Rigidbody player only)")]
		public bool DisableGravityWhileHeld;

		[Token(Token = "0x4000FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CharacterController characterController;

		[Token(Token = "0x4000FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x4000FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private PlayerGravity playerGravity;

		[Token(Token = "0x4000FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Rigidbody playerRigid;

		[Token(Token = "0x4000FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private AudioSource audioSource;

		[Token(Token = "0x4000FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3 moveDirection;

		[Token(Token = "0x4000FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector3 addRigidForce;

		[Token(Token = "0x6000DD0")]
		[Address(RVA = "0xE3BE14", Offset = "0xE3BE14", VA = "0xE3BE14")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DD1")]
		[Address(RVA = "0xE3BFE0", Offset = "0xE3BFE0", VA = "0xE3BFE0", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6000DD2")]
		[Address(RVA = "0xE3C3E8", Offset = "0xE3C3E8", VA = "0xE3C3E8")]
		public void FixedUpdate()
		{
		}

		[Token(Token = "0x6000DD3")]
		[Address(RVA = "0xE3C524", Offset = "0xE3C524", VA = "0xE3C524", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6000DD4")]
		[Address(RVA = "0xE3C538", Offset = "0xE3C538", VA = "0xE3C538")]
		public void ChangeGravity(bool gravityOn)
		{
		}

		[Token(Token = "0x6000DD5")]
		[Address(RVA = "0xE3C5CC", Offset = "0xE3C5CC", VA = "0xE3C5CC", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x6000DD6")]
		[Address(RVA = "0xE3C024", Offset = "0xE3C024", VA = "0xE3C024")]
		private void doJet(float triggerValue)
		{
		}

		[Token(Token = "0x6000DD7")]
		[Address(RVA = "0xE3C2E0", Offset = "0xE3C2E0", VA = "0xE3C2E0")]
		private void stopJet()
		{
		}

		[Token(Token = "0x6000DD8")]
		[Address(RVA = "0xE3C5F8", Offset = "0xE3C5F8", VA = "0xE3C5F8", Slot = "18")]
		public override void OnTriggerUp()
		{
		}

		[Token(Token = "0x6000DD9")]
		[Address(RVA = "0xE3C614", Offset = "0xE3C614", VA = "0xE3C614")]
		public HandJet()
		{
		}
	}
	[Token(Token = "0x2000228")]
	public class HandModelSwitcher : MonoBehaviour
	{
		[Token(Token = "0x4000FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int HandModelId;

		[Token(Token = "0x4000FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HandModelSelector hms;

		[Token(Token = "0x6000DDA")]
		[Address(RVA = "0xE3C62C", Offset = "0xE3C62C", VA = "0xE3C62C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DDB")]
		[Address(RVA = "0xE3C744", Offset = "0xE3C744", VA = "0xE3C744")]
		public void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000DDC")]
		[Address(RVA = "0xE3C808", Offset = "0xE3C808", VA = "0xE3C808")]
		public HandModelSwitcher()
		{
		}
	}
	[Token(Token = "0x2000229")]
	public class IKDummy : MonoBehaviour
	{
		[Token(Token = "0x4000FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform ThisEyeBone;

		[Token(Token = "0x4000FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform PlayerTransform;

		[Token(Token = "0x4000FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform HeadFollow;

		[Token(Token = "0x4000FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform RightHandFollow;

		[Token(Token = "0x4000FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform LeftHandFollow;

		[Token(Token = "0x4000FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 HandRotationOffset;

		[Token(Token = "0x4000FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Animator animator;

		[Token(Token = "0x4000FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform headBone;

		[Token(Token = "0x4000FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform leftHandDummy;

		[Token(Token = "0x4000FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform rightHandDummy;

		[Token(Token = "0x4000FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform leftHandOnPlayer;

		[Token(Token = "0x4000FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform rightHandOnPlayer;

		[Token(Token = "0x4000FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform lookatDummy;

		[Token(Token = "0x4000FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 localPos;

		[Token(Token = "0x4000FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Quaternion localRot;

		[Token(Token = "0x4000FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Transform cam;

		[Token(Token = "0x4000FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 leftHandLocalPos;

		[Token(Token = "0x4000FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Vector3 rightHandLocalPos;

		[Token(Token = "0x4000FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Quaternion leftHandLocalRot;

		[Token(Token = "0x4000FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Quaternion rightHandLocalRot;

		[Token(Token = "0x4000FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Vector3 LeftHandsOffset;

		[Token(Token = "0x4000FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public Vector3 RightHandsOffset;

		[Token(Token = "0x6000DDD")]
		[Address(RVA = "0xE3C818", Offset = "0xE3C818", VA = "0xE3C818")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DDE")]
		[Address(RVA = "0xE3CB14", Offset = "0xE3CB14", VA = "0xE3CB14")]
		public Transform SetParentAndLocalPosRot(string transformName, Transform parentToSet)
		{
			return null;
		}

		[Token(Token = "0x6000DDF")]
		[Address(RVA = "0xE3CC2C", Offset = "0xE3CC2C", VA = "0xE3CC2C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000DE0")]
		[Address(RVA = "0xE3CEEC", Offset = "0xE3CEEC", VA = "0xE3CEEC")]
		private void OnAnimatorIK()
		{
		}

		[Token(Token = "0x6000DE1")]
		[Address(RVA = "0xE3D218", Offset = "0xE3D218", VA = "0xE3D218")]
		public IKDummy()
		{
		}
	}
	[Token(Token = "0x200022A")]
	public class LaserPointer : MonoBehaviour
	{
		[Token(Token = "0x4000FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float MaxRange;

		[Token(Token = "0x4000FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public LayerMask ValidLayers;

		[Token(Token = "0x4000FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform LaserEnd;

		[Token(Token = "0x4000FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool Active;

		[Token(Token = "0x4000FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private LineRenderer line;

		[Token(Token = "0x6000DE2")]
		[Address(RVA = "0xE3D2A0", Offset = "0xE3D2A0", VA = "0xE3D2A0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DE3")]
		[Address(RVA = "0xE3D2F8", Offset = "0xE3D2F8", VA = "0xE3D2F8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000DE4")]
		[Address(RVA = "0xE3D61C", Offset = "0xE3D61C", VA = "0xE3D61C")]
		public LaserPointer()
		{
		}
	}
	[Token(Token = "0x200022B")]
	public class LaserSword : GrabbableEvents
	{
		[Token(Token = "0x4000FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Grabbable grabbable;

		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform BladeTransform;

		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform RaycastTransform;

		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public LayerMask LaserCollision;

		[Token(Token = "0x4000FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ParticleSystem CollisionParticle;

		[Token(Token = "0x4000FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool BladeEnabled;

		[Token(Token = "0x4000FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool SaberSwitchOn;

		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float LaserLength;

		[Token(Token = "0x4000FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float LaserActivateSpeed;

		[Token(Token = "0x4000FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AudioSource CollisionAudio;

		[Token(Token = "0x4000FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool Colliding;

		[Token(Token = "0x6000DE5")]
		[Address(RVA = "0xE3D634", Offset = "0xE3D634", VA = "0xE3D634")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DE6")]
		[Address(RVA = "0xE3D6F8", Offset = "0xE3D6F8", VA = "0xE3D6F8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DE7")]
		[Address(RVA = "0xE3DC78", Offset = "0xE3DC78", VA = "0xE3DC78", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6000DE8")]
		[Address(RVA = "0xE3D8E8", Offset = "0xE3D8E8", VA = "0xE3D8E8")]
		private void checkCollision()
		{
		}

		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0xE3DC94", Offset = "0xE3DC94", VA = "0xE3DC94")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0xE3DDBC", Offset = "0xE3DDBC", VA = "0xE3DDBC")]
		public LaserSword()
		{
		}
	}
	[Token(Token = "0x200022C")]
	public class LiquidWobble : MonoBehaviour
	{
		[Token(Token = "0x4000FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Renderer rend;

		[Token(Token = "0x4000FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 lastPos;

		[Token(Token = "0x4000FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 velocity;

		[Token(Token = "0x4000FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 lastRot;

		[Token(Token = "0x4000FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 angularVelocity;

		[Token(Token = "0x4000FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float MaxWobble;

		[Token(Token = "0x4000FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float WobbleSpeed;

		[Token(Token = "0x4000FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float Recovery;

		[Token(Token = "0x4000FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float wobbleAmountX;

		[Token(Token = "0x4000FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float wobbleAmountZ;

		[Token(Token = "0x4000FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float wobbleAmountToAddX;

		[Token(Token = "0x4000FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float wobbleAmountToAddZ;

		[Token(Token = "0x4000FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float pulse;

		[Token(Token = "0x4000FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float time;

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0xE3DDD0", Offset = "0xE3DDD0", VA = "0xE3DDD0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0xE3DE28", Offset = "0xE3DE28", VA = "0xE3DE28")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DED")]
		[Address(RVA = "0xE3E0D8", Offset = "0xE3E0D8", VA = "0xE3E0D8")]
		public LiquidWobble()
		{
		}
	}
	[Token(Token = "0x200022D")]
	public class Marker : GrabbableEvents
	{
		[Token(Token = "0x200022E")]
		[CompilerGenerated]
		private sealed class <WriteRoutine>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001000")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001001")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001002")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Marker <>4__this;

			[Token(Token = "0x1700012B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000DF8")]
				[Address(RVA = "0xE3ECDC", Offset = "0xE3ECDC", VA = "0xE3ECDC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700012C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000DFA")]
				[Address(RVA = "0xE3ED24", Offset = "0xE3ED24", VA = "0xE3ED24", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000DF5")]
			[Address(RVA = "0xE3E214", Offset = "0xE3E214", VA = "0xE3E214")]
			[DebuggerHidden]
			public <WriteRoutine>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x6000DF6")]
			[Address(RVA = "0xE3E9D4", Offset = "0xE3E9D4", VA = "0xE3E9D4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000DF7")]
			[Address(RVA = "0xE3E9D8", Offset = "0xE3E9D8", VA = "0xE3E9D8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000DF9")]
			[Address(RVA = "0xE3ECE4", Offset = "0xE3ECE4", VA = "0xE3ECE4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Material DrawMaterial;

		[Token(Token = "0x4000FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color DrawColor;

		[Token(Token = "0x4000FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float LineWidth;

		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform RaycastStart;

		[Token(Token = "0x4000FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public LayerMask DrawingLayers;

		[Token(Token = "0x4000FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float RaycastLength;

		[Token(Token = "0x4000FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float MinDrawDistance;

		[Token(Token = "0x4000FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float ReuseTolerance;

		[Token(Token = "0x4000FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool IsNewDraw;

		[Token(Token = "0x4000FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 lastDrawPoint;

		[Token(Token = "0x4000FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private LineRenderer LineRenderer;

		[Token(Token = "0x4000FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform root;

		[Token(Token = "0x4000FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Transform lastTransform;

		[Token(Token = "0x4000FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Coroutine drawRoutine;

		[Token(Token = "0x4000FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float lastLineWidth;

		[Token(Token = "0x4000FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private int renderLifeTime;

		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0xE3E0FC", Offset = "0xE3E0FC", VA = "0xE3E0FC", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6000DEF")]
		[Address(RVA = "0xE3E1CC", Offset = "0xE3E1CC", VA = "0xE3E1CC", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x6000DF0")]
		[Address(RVA = "0xE3E158", Offset = "0xE3E158", VA = "0xE3E158")]
		[IteratorStateMachine(typeof(<WriteRoutine>d__18))]
		private IEnumerator WriteRoutine()
		{
			return null;
		}

		[Token(Token = "0x6000DF1")]
		[Address(RVA = "0xE3E23C", Offset = "0xE3E23C", VA = "0xE3E23C")]
		private void InitDraw(Vector3 position, Quaternion rotation, float lineWidth, Color lineColor)
		{
		}

		[Token(Token = "0x6000DF2")]
		[Address(RVA = "0xE3E3B0", Offset = "0xE3E3B0", VA = "0xE3E3B0")]
		private Vector3 DrawPoint(Vector3 lastDrawPoint, Vector3 endPosition, float lineWidth, Color lineColor, Quaternion rotation)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0xE3E8E4", Offset = "0xE3E8E4", VA = "0xE3E8E4")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0xE3E99C", Offset = "0xE3E99C", VA = "0xE3E99C")]
		public Marker()
		{
		}
	}
	[Token(Token = "0x200022F")]
	public class MoveToWaypoint : MonoBehaviour
	{
		[Token(Token = "0x4001003")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool IsActive;

		[Token(Token = "0x4001004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Waypoint Destination;

		[Token(Token = "0x4001005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float MovementSpeed;

		[Token(Token = "0x4001006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool ReachedDestination;

		[Token(Token = "0x4001007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Delay in seconds to way before starting movement towards Destination")]
		public float StartDelay;

		[Token(Token = "0x4001008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool reachedDelay;

		[Token(Token = "0x4001009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float delayedTime;

		[Token(Token = "0x400100A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 previousPosition;

		[Token(Token = "0x400100B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 PositionDifference;

		[Token(Token = "0x400100C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool MoveInUpdate;

		[Token(Token = "0x400100D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		public bool MoveInFixedUpdate;

		[Token(Token = "0x400100E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody rigid;

		[Token(Token = "0x6000DFB")]
		[Address(RVA = "0xE3ED2C", Offset = "0xE3ED2C", VA = "0xE3ED2C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DFC")]
		[Address(RVA = "0xE3ED9C", Offset = "0xE3ED9C", VA = "0xE3ED9C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0xE3F224", Offset = "0xE3F224", VA = "0xE3F224")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0xE3EE54", Offset = "0xE3EE54", VA = "0xE3EE54")]
		private void movePlatform(float timeDelta)
		{
		}

		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0xE3F250", Offset = "0xE3F250", VA = "0xE3F250")]
		private void resetDelayStatus()
		{
		}

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0xE3F25C", Offset = "0xE3F25C", VA = "0xE3F25C")]
		public MoveToWaypoint()
		{
		}
	}
	[Token(Token = "0x2000230")]
	public class MovingPlatform : MonoBehaviour
	{
		[Token(Token = "0x400100F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If set to ParentToPlatform the CharacterController will be parented to any MovingPlatform object below it each frame. If set to PositionDifference the movement will be read from the PositionDifference property of the MoveToWaypoint object below it. ")]
		public MovingPlatformMethod MovementMethod;

		[Token(Token = "0x4001010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[HideInInspector]
		public Vector3 PositionDelta;

		[Token(Token = "0x4001011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public Quaternion RotationDelta;

		[Token(Token = "0x4001012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Vector3 previousPosition;

		[Token(Token = "0x4001013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected Quaternion previousRotation;

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0xE3F27C", Offset = "0xE3F27C", VA = "0xE3F27C")]
		protected void Update()
		{
		}

		[Token(Token = "0x6000E02")]
		[Address(RVA = "0xE3F3C4", Offset = "0xE3F3C4", VA = "0xE3F3C4")]
		public MovingPlatform()
		{
		}
	}
	[Token(Token = "0x2000231")]
	public enum MovingPlatformMethod
	{
		[Token(Token = "0x4001015")]
		ParentToPlatform,
		[Token(Token = "0x4001016")]
		PositionDifference
	}
	[Token(Token = "0x2000232")]
	public class PlayerScaler : MonoBehaviour
	{
		[Token(Token = "0x4001017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Transform> ScaleObjects;

		[Token(Token = "0x4001018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float Scale;

		[Token(Token = "0x4001019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float scaleSpeed;

		[Token(Token = "0x6000E03")]
		[Address(RVA = "0xE3F3CC", Offset = "0xE3F3CC", VA = "0xE3F3CC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E04")]
		[Address(RVA = "0xE3F604", Offset = "0xE3F604", VA = "0xE3F604")]
		public PlayerScaler()
		{
		}
	}
	[Token(Token = "0x2000233")]
	public class ProjectileLauncher : MonoBehaviour
	{
		[Token(Token = "0x400101A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject ProjectileObject;

		[Token(Token = "0x400101B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float ProjectileForce;

		[Token(Token = "0x400101C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip LaunchSound;

		[Token(Token = "0x400101D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ParticleSystem LaunchParticles;

		[Token(Token = "0x400101E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform MuzzleTransform;

		[Token(Token = "0x400101F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float _initialProjectileForce;

		[Token(Token = "0x6000E05")]
		[Address(RVA = "0xE3F618", Offset = "0xE3F618", VA = "0xE3F618")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E06")]
		[Address(RVA = "0xE3F624", Offset = "0xE3F624", VA = "0xE3F624")]
		public GameObject ShootProjectile(float projectileForce)
		{
			return null;
		}

		[Token(Token = "0x6000E07")]
		[Address(RVA = "0xE3F8D0", Offset = "0xE3F8D0", VA = "0xE3F8D0")]
		public void ShootProjectile()
		{
		}

		[Token(Token = "0x6000E08")]
		[Address(RVA = "0xE3F8D8", Offset = "0xE3F8D8", VA = "0xE3F8D8")]
		public void SetForce(float force)
		{
		}

		[Token(Token = "0x6000E09")]
		[Address(RVA = "0xE3F8E0", Offset = "0xE3F8E0", VA = "0xE3F8E0")]
		public float GetInitialProjectileForce()
		{
			return default(float);
		}

		[Token(Token = "0x6000E0A")]
		[Address(RVA = "0xE3F8E8", Offset = "0xE3F8E8", VA = "0xE3F8E8")]
		public ProjectileLauncher()
		{
		}
	}
	[Token(Token = "0x2000234")]
	public class SceneLoader : MonoBehaviour
	{
		[Token(Token = "0x2000235")]
		[CompilerGenerated]
		private sealed class <FadeThenLoadScene>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001025")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001026")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001027")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SceneLoader <>4__this;

			[Token(Token = "0x1700012D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E11")]
				[Address(RVA = "0xE3FC68", Offset = "0xE3FC68", VA = "0xE3FC68", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700012E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E13")]
				[Address(RVA = "0xE3FCB0", Offset = "0xE3FCB0", VA = "0xE3FCB0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E0E")]
			[Address(RVA = "0xE3FA1C", Offset = "0xE3FA1C", VA = "0xE3FA1C")]
			[DebuggerHidden]
			public <FadeThenLoadScene>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x6000E0F")]
			[Address(RVA = "0xE3FAB4", Offset = "0xE3FAB4", VA = "0xE3FAB4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E10")]
			[Address(RVA = "0xE3FAB8", Offset = "0xE3FAB8", VA = "0xE3FAB8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E12")]
			[Address(RVA = "0xE3FC70", Offset = "0xE3FC70", VA = "0xE3FC70", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Unity 'LoadSceneMode' method of loading the scene (In most cases should be 'Single'). ")]
		public LoadSceneMode loadSceneMode;

		[Token(Token = "0x4001021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If true, the ScreenFader component will fade the screen to black before loading a level.")]
		public bool UseSceenFader;

		[Token(Token = "0x4001022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Wait this long in seconds before attempting to load the scene. Useful if you need to fade the screen out before attempting to load the level.")]
		public float ScreenFadeTime;

		[Token(Token = "0x4001023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ScreenFader sf;

		[Token(Token = "0x4001024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string _loadSceneName;

		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0xE3F8F8", Offset = "0xE3F8F8", VA = "0xE3F8F8")]
		public void LoadScene(string SceneName)
		{
		}

		[Token(Token = "0x6000E0C")]
		[Address(RVA = "0xE3F9A8", Offset = "0xE3F9A8", VA = "0xE3F9A8")]
		[IteratorStateMachine(typeof(<FadeThenLoadScene>d__6))]
		public IEnumerator FadeThenLoadScene()
		{
			return null;
		}

		[Token(Token = "0x6000E0D")]
		[Address(RVA = "0xE3FA44", Offset = "0xE3FA44", VA = "0xE3FA44")]
		public SceneLoader()
		{
		}
	}
	[Token(Token = "0x2000236")]
	public class SlidingDoorMover : MonoBehaviour
	{
		[Token(Token = "0x4001028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float DoorSpeed;

		[Token(Token = "0x4001029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float OpenXValue;

		[Token(Token = "0x400102A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float targetXPosition;

		[Token(Token = "0x400102B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float smoothedPosition;

		[Token(Token = "0x6000E14")]
		[Address(RVA = "0xE3FCB8", Offset = "0xE3FCB8", VA = "0xE3FCB8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E15")]
		[Address(RVA = "0xE3FD2C", Offset = "0xE3FD2C", VA = "0xE3FD2C")]
		public void SetTargetPosition(float targetValue)
		{
		}

		[Token(Token = "0x6000E16")]
		[Address(RVA = "0xE3FD3C", Offset = "0xE3FD3C", VA = "0xE3FD3C")]
		public SlidingDoorMover()
		{
		}
	}
	[Token(Token = "0x2000237")]
	public class TimeController : MonoBehaviour
	{
		[Token(Token = "0x2000238")]
		[CompilerGenerated]
		private sealed class <resumeTimeRoutine>d__20 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001039")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400103A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400103B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TimeController <>4__this;

			[Token(Token = "0x17000130")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E22")]
				[Address(RVA = "0xE4030C", Offset = "0xE4030C", VA = "0xE4030C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000131")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E24")]
				[Address(RVA = "0xE40354", Offset = "0xE40354", VA = "0xE40354", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E1F")]
			[Address(RVA = "0xE40158", Offset = "0xE40158", VA = "0xE40158")]
			[DebuggerHidden]
			public <resumeTimeRoutine>d__20(int <>1__state)
			{
			}

			[Token(Token = "0x6000E20")]
			[Address(RVA = "0xE4019C", Offset = "0xE4019C", VA = "0xE4019C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E21")]
			[Address(RVA = "0xE401A0", Offset = "0xE401A0", VA = "0xE401A0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E23")]
			[Address(RVA = "0xE40314", Offset = "0xE40314", VA = "0xE40314", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400102C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Timescale to slow down to if slow down key is pressed")]
		public float SlowTimeScale;

		[Token(Token = "0x400102D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If true, Y Button will always slow time. Useful for debugging. Otherwise call SlowTime / ResumeTime yourself")]
		public bool YKeySlowsTime;

		[Token(Token = "0x400102E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Input Action used to initiate slow time")]
		public InputActionReference SlowTimeAction;

		[Token(Token = "0x400102F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("(Optional) Play this clip when starting to slow time")]
		public AudioClip SlowTimeClip;

		[Token(Token = "0x4001030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("(Optional) Play this clip when ending slow mo")]
		public AudioClip SpeedupTimeClip;

		[Token(Token = "0x4001031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("If true, will set Time.fixedDeltaTime to the device refresh rate")]
		public bool SetFixedDelta;

		[Token(Token = "0x4001032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		[Tooltip("If true, will check for input in Update to slow down time. If false you'll need to call SlowTime() / ResumeTime() manually from script")]
		public bool CheckInput;

		[Token(Token = "0x4001033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		private bool _slowingTime;

		[Token(Token = "0x4001034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B")]
		private bool routineRunning;

		[Token(Token = "0x4001035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float originalFixedDelta;

		[Token(Token = "0x4001036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AudioSource audioSource;

		[Token(Token = "0x4001037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool ForceTimeScale;

		[Token(Token = "0x4001038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IEnumerator resumeRoutine;

		[Token(Token = "0x1700012F")]
		public bool TimeSlowing
		{
			[Token(Token = "0x6000E17")]
			[Address(RVA = "0xE3FD50", Offset = "0xE3FD50", VA = "0xE3FD50")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000E18")]
		[Address(RVA = "0xE3FD58", Offset = "0xE3FD58", VA = "0xE3FD58")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E19")]
		[Address(RVA = "0xE3FDEC", Offset = "0xE3FDEC", VA = "0xE3FDEC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E1A")]
		[Address(RVA = "0xE3FFF0", Offset = "0xE3FFF0", VA = "0xE3FFF0", Slot = "4")]
		public virtual bool SlowTimeInputDown()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0xE3FE34", Offset = "0xE3FE34", VA = "0xE3FE34")]
		public void SlowTime()
		{
		}

		[Token(Token = "0x6000E1C")]
		[Address(RVA = "0xE3FF7C", Offset = "0xE3FF7C", VA = "0xE3FF7C")]
		public void ResumeTime()
		{
		}

		[Token(Token = "0x6000E1D")]
		[Address(RVA = "0xE400E4", Offset = "0xE400E4", VA = "0xE400E4")]
		[IteratorStateMachine(typeof(<resumeTimeRoutine>d__20))]
		private IEnumerator resumeTimeRoutine()
		{
			return null;
		}

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0xE40180", Offset = "0xE40180", VA = "0xE40180")]
		public TimeController()
		{
		}
	}
	[Token(Token = "0x2000239")]
	public class ToggleActiveOnInputAction : MonoBehaviour
	{
		[Token(Token = "0x400103C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InputActionReference InputAction;

		[Token(Token = "0x400103D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject ToggleObject;

		[Token(Token = "0x6000E25")]
		[Address(RVA = "0xE4035C", Offset = "0xE4035C", VA = "0xE4035C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E26")]
		[Address(RVA = "0xE403FC", Offset = "0xE403FC", VA = "0xE403FC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000E27")]
		[Address(RVA = "0xE4049C", Offset = "0xE4049C", VA = "0xE4049C")]
		public void ToggleActive(InputAction.CallbackContext context)
		{
		}

		[Token(Token = "0x6000E28")]
		[Address(RVA = "0xE40534", Offset = "0xE40534", VA = "0xE40534")]
		public ToggleActiveOnInputAction()
		{
		}
	}
	[Token(Token = "0x200023A")]
	public class VehicleController : MonoBehaviour
	{
		[Token(Token = "0x200023B")]
		[CompilerGenerated]
		private sealed class <crankEngine>d__24 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001053")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001054")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001055")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VehicleController <>4__this;

			[Token(Token = "0x17000132")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E41")]
				[Address(RVA = "0xD889F4", Offset = "0xD889F4", VA = "0xD889F4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000133")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E43")]
				[Address(RVA = "0xD88A3C", Offset = "0xD88A3C", VA = "0xD88A3C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E3E")]
			[Address(RVA = "0xD887C0", Offset = "0xD887C0", VA = "0xD887C0")]
			[DebuggerHidden]
			public <crankEngine>d__24(int <>1__state)
			{
			}

			[Token(Token = "0x6000E3F")]
			[Address(RVA = "0xD887E8", Offset = "0xD887E8", VA = "0xD887E8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E40")]
			[Address(RVA = "0xD887EC", Offset = "0xD887EC", VA = "0xD887EC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E42")]
			[Address(RVA = "0xD889FC", Offset = "0xD889FC", VA = "0xD889FC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400103E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Engine Properties")]
		public float MotorTorque;

		[Token(Token = "0x400103F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float MaxSpeed;

		[Token(Token = "0x4001040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float MaxSteeringAngle;

		[Token(Token = "0x4001041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("If true and SteeringGrabbable is being held, the right / left trigger will act as input for acceleration / defceleration.")]
		[Header("Steering Grabbable")]
		public bool CheckTriggerInput;

		[Token(Token = "0x4001042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Grabbable SteeringGrabbable;

		[Token(Token = "0x4001043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Engine Status")]
		[Tooltip("Is the Engine on and ready for input. If false, engine will need to be started first.")]
		public bool EngineOn;

		[Token(Token = "0x4001044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("How long it takes to start the engine")]
		public float CrankTime;

		[Token(Token = "0x4001045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Speedometer")]
		[Tooltip("Output the current speed to this label if specified")]
		public Text SpeedLabel;

		[Token(Token = "0x4001046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Audio Setup")]
		public AudioSource EngineAudio;

		[Token(Token = "0x4001047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Sound to play / loop when EngineOn = true. Pitch will be altered according to speed.")]
		public AudioClip IdleSound;

		[Token(Token = "0x4001048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("If specified this clip will play before the engine is turned on. Clip to play when starting the Engine.")]
		public AudioClip CrankSound;

		[Token(Token = "0x4001049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AudioClip CollisionSound;

		[Token(Token = "0x400104A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public float SteeringAngle;

		[Token(Token = "0x400104B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[HideInInspector]
		public float MotorInput;

		[Token(Token = "0x400104C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public float CurrentSpeed;

		[Token(Token = "0x400104D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Wheel Configuration")]
		public List<WheelObject> Wheels;

		[Token(Token = "0x400104E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 initialPosition;

		[Token(Token = "0x400104F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Rigidbody rb;

		[Token(Token = "0x4001050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool wasHoldingSteering;

		[Token(Token = "0x4001051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		private bool isHoldingSteering;

		[Token(Token = "0x4001052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
		protected bool crankingEngine;

		[Token(Token = "0x6000E29")]
		[Address(RVA = "0xE4053C", Offset = "0xE4053C", VA = "0xE4053C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E2A")]
		[Address(RVA = "0xE405BC", Offset = "0xE405BC", VA = "0xE405BC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0xE40728", Offset = "0xE40728", VA = "0xE40728", Slot = "4")]
		public virtual void CrankEngine()
		{
		}

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0xE40764", Offset = "0xE40764", VA = "0xE40764")]
		[IteratorStateMachine(typeof(<crankEngine>d__24))]
		private IEnumerator crankEngine()
		{
			return null;
		}

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0xE407D8", Offset = "0xE407D8", VA = "0xE407D8", Slot = "5")]
		public virtual void CheckOutOfBounds()
		{
		}

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0xE40834", Offset = "0xE40834", VA = "0xE40834", Slot = "6")]
		public virtual void GetTorqueInputFromTriggers()
		{
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0xE408F0", Offset = "0xE408F0", VA = "0xE408F0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0xE40A88", Offset = "0xE40A88", VA = "0xE40A88", Slot = "7")]
		public virtual void UpdateWheelTorque()
		{
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0xE40B90", Offset = "0xE40B90", VA = "0xE40B90", Slot = "8")]
		public virtual void SetSteeringAngle(float steeringAngle)
		{
		}

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0xE40B98", Offset = "0xE40B98", VA = "0xE40B98", Slot = "9")]
		public virtual void SetSteeringAngleInverted(float steeringAngle)
		{
		}

		[Token(Token = "0x6000E33")]
		[Address(RVA = "0xE40BA4", Offset = "0xE40BA4", VA = "0xE40BA4", Slot = "10")]
		public virtual void SetSteeringAngle(Vector2 steeringAngle)
		{
		}

		[Token(Token = "0x6000E34")]
		[Address(RVA = "0xE40BAC", Offset = "0xE40BAC", VA = "0xE40BAC", Slot = "11")]
		public virtual void SetSteeringAngleInverted(Vector2 steeringAngle)
		{
		}

		[Token(Token = "0x6000E35")]
		[Address(RVA = "0xE40BB8", Offset = "0xE40BB8", VA = "0xE40BB8", Slot = "12")]
		public virtual void SetMotorTorqueInput(float input)
		{
		}

		[Token(Token = "0x6000E36")]
		[Address(RVA = "0xE40BC0", Offset = "0xE40BC0", VA = "0xE40BC0", Slot = "13")]
		public virtual void SetMotorTorqueInputInverted(float input)
		{
		}

		[Token(Token = "0x6000E37")]
		[Address(RVA = "0xE40BCC", Offset = "0xE40BCC", VA = "0xE40BCC", Slot = "14")]
		public virtual void SetMotorTorqueInput(Vector2 input)
		{
		}

		[Token(Token = "0x6000E38")]
		[Address(RVA = "0xE40BD4", Offset = "0xE40BD4", VA = "0xE40BD4", Slot = "15")]
		public virtual void SetMotorTorqueInputInverted(Vector2 input)
		{
		}

		[Token(Token = "0x6000E39")]
		[Address(RVA = "0xE40BE0", Offset = "0xE40BE0", VA = "0xE40BE0", Slot = "16")]
		public virtual void UpdateWheelVisuals(WheelObject wheel)
		{
		}

		[Token(Token = "0x6000E3A")]
		[Address(RVA = "0xE40CC4", Offset = "0xE40CC4", VA = "0xE40CC4", Slot = "17")]
		public virtual void UpdateEngineAudio()
		{
		}

		[Token(Token = "0x6000E3B")]
		[Address(RVA = "0xE40D78", Offset = "0xE40D78", VA = "0xE40D78")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000E3C")]
		[Address(RVA = "0xE409A8", Offset = "0xE409A8", VA = "0xE409A8")]
		private float correctValue(float inputValue)
		{
			return default(float);
		}

		[Token(Token = "0x6000E3D")]
		[Address(RVA = "0xE40E9C", Offset = "0xE40E9C", VA = "0xE40E9C")]
		public VehicleController()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200023C")]
	public class WheelObject
	{
		[Token(Token = "0x4001056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public WheelCollider Wheel;

		[Token(Token = "0x4001057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform WheelVisual;

		[Token(Token = "0x4001058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool ApplyTorque;

		[Token(Token = "0x4001059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool ApplySteering;

		[Token(Token = "0x6000E44")]
		[Address(RVA = "0xD88A44", Offset = "0xD88A44", VA = "0xD88A44")]
		public WheelObject()
		{
		}
	}
	[Token(Token = "0x200023D")]
	public class VREmulator : MonoBehaviour
	{
		[Token(Token = "0x400105A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Enable / Disable : ")]
		[Tooltip("Use Emulator if true and HMDIsActive is false")]
		public bool EmulatorEnabled;

		[Token(Token = "0x400105B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Tooltip("Set to false if you want to use in standalone builds as well as the editor")]
		public bool EditorOnly;

		[Token(Token = "0x400105C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		[Tooltip("If true the game window must have focus for the emulator to be active")]
		public bool RequireGameFocus;

		[Token(Token = "0x400105D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Input : ")]
		[SerializeField]
		[Tooltip("Action set used specifically to mimic or supplement a vr setup")]
		public InputActionAsset EmulatorActionSet;

		[Token(Token = "0x400105E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Will set the PlayerTeleport component's ForceStraightArrow = true while the emulator is active.")]
		[Header("Player Teleportation")]
		public bool ForceStraightTeleportRotation;

		[Token(Token = "0x400105F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[Tooltip("If true, move the player eye offset up / down whenever PlayerUpAction / PlayerDownAction is called.")]
		[Header("Move Player Up / Down")]
		public bool AllowUpDownControls;

		[Token(Token = "0x4001060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Unity Input Action used to move the player up")]
		public InputActionReference PlayerUpAction;

		[Token(Token = "0x4001061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Unity Input Action used to move the player down")]
		public InputActionReference PlayerDownAction;

		[Token(Token = "0x4001062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Minimum height in meters the player can shrink to when using the PlayerDownAction")]
		public float MinPlayerHeight;

		[Token(Token = "0x4001063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Maximum height in meters the player can grow to when using the PlayerUpAction")]
		public float MaxPlayerHeight;

		[Token(Token = "0x4001064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Header("Head Look")]
		[Tooltip("Unity Input Action used to lock the camera in game mode to look around")]
		public InputActionReference LockCameraAction;

		[Token(Token = "0x4001065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Unity Input Action used to lock the camera in game mode to look around")]
		public InputActionReference CameraLookAction;

		[Token(Token = "0x4001066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Multiply the CameraLookAction by this amount")]
		public float CameraLookSensitivityX;

		[Token(Token = "0x4001067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Multiply the CameraLookAction by this amount")]
		public float CameraLookSensitivityY;

		[Token(Token = "0x4001068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Minimum local Eulers degrees the camera can rotate")]
		public float MinimumCameraY;

		[Token(Token = "0x4001069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("Minimum local Eulers degrees the camera can rotate")]
		public float MaximumCameraY;

		[Token(Token = "0x400106A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Controller Emulation")]
		[Tooltip("Unity Input Action used to mimic holding the Left Grip")]
		public InputActionReference LeftGripAction;

		[Token(Token = "0x400106B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Unity Input Action used to mimic holding the Left Trigger")]
		public InputActionReference LeftTriggerAction;

		[Token(Token = "0x400106C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Unity Input Action used to mimic having your thumb near a button")]
		public InputActionReference LeftThumbNearAction;

		[Token(Token = "0x400106D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Unity Input Action used to move mimic holding the Right Grip")]
		public InputActionReference RightGripAction;

		[Token(Token = "0x400106E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Unity Input Action used to move mimic holding the Right Grip")]
		public InputActionReference RightTriggerAction;

		[Token(Token = "0x400106F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Unity Input Action used to mimic having your thumb near a button")]
		public InputActionReference RightThumbNearAction;

		[Token(Token = "0x4001070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float mouseRotationX;

		[Token(Token = "0x4001071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float mouseRotationY;

		[Token(Token = "0x4001072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Transform mainCameraTransform;

		[Token(Token = "0x4001073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Transform leftControllerTranform;

		[Token(Token = "0x4001074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Transform rightControllerTranform;

		[Token(Token = "0x4001075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Transform leftHandAnchor;

		[Token(Token = "0x4001076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Transform rightHandAnchor;

		[Token(Token = "0x4001077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private BNGPlayerController player;

		[Token(Token = "0x4001078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x4001079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private PlayerTeleport playerTeleport;

		[Token(Token = "0x400107A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private bool didFirstActivate;

		[Token(Token = "0x400107B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Grabber grabberLeft;

		[Token(Token = "0x400107C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Grabber grabberRight;

		[Token(Token = "0x400107D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private float _originalPlayerYOffset;

		[Token(Token = "0x400107E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[Header("Shown for Debug : ")]
		public bool HMDIsActive;

		[Token(Token = "0x400107F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Vector3 LeftControllerPosition;

		[Token(Token = "0x4001080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public Vector3 RightControllerPosition;

		[Token(Token = "0x4001081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private bool priorStraightSetting;

		[Token(Token = "0x4001082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private float prevVal;

		[Token(Token = "0x4001083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private bool isQuitting;

		[Token(Token = "0x6000E45")]
		[Address(RVA = "0xD88A4C", Offset = "0xD88A4C", VA = "0xD88A4C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E46")]
		[Address(RVA = "0xD88E68", Offset = "0xD88E68", VA = "0xD88E68")]
		public void OnBeforeRender()
		{
		}

		[Token(Token = "0x6000E47")]
		[Address(RVA = "0xD88EF4", Offset = "0xD88EF4", VA = "0xD88EF4")]
		private void onFirstActivate()
		{
		}

		[Token(Token = "0x6000E48")]
		[Address(RVA = "0xD88F18", Offset = "0xD88F18", VA = "0xD88F18")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E49")]
		[Address(RVA = "0xD894C4", Offset = "0xD894C4", VA = "0xD894C4", Slot = "4")]
		public virtual bool HasRequiredFocus()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E4A")]
		[Address(RVA = "0xD89010", Offset = "0xD89010", VA = "0xD89010")]
		public void CheckHeadControls()
		{
		}

		[Token(Token = "0x6000E4B")]
		[Address(RVA = "0xD894E4", Offset = "0xD894E4", VA = "0xD894E4")]
		public void UpdateInputs()
		{
		}

		[Token(Token = "0x6000E4C")]
		[Address(RVA = "0xD89268", Offset = "0xD89268", VA = "0xD89268")]
		public void CheckPlayerControls()
		{
		}

		[Token(Token = "0x6000E4D")]
		[Address(RVA = "0xD89DDC", Offset = "0xD89DDC", VA = "0xD89DDC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000E4E")]
		[Address(RVA = "0xD89DE0", Offset = "0xD89DE0", VA = "0xD89DE0", Slot = "5")]
		public virtual void UpdateControllerPositions()
		{
		}

		[Token(Token = "0x6000E4F")]
		[Address(RVA = "0xD89B68", Offset = "0xD89B68", VA = "0xD89B68")]
		private void checkGrabbers()
		{
		}

		[Token(Token = "0x6000E50")]
		[Address(RVA = "0xD89EFC", Offset = "0xD89EFC", VA = "0xD89EFC", Slot = "6")]
		public virtual void ResetHands()
		{
		}

		[Token(Token = "0x6000E51")]
		[Address(RVA = "0xD8A068", Offset = "0xD8A068", VA = "0xD8A068", Slot = "7")]
		public virtual void ResetAll()
		{
		}

		[Token(Token = "0x6000E52")]
		[Address(RVA = "0xD8A17C", Offset = "0xD8A17C", VA = "0xD8A17C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E53")]
		[Address(RVA = "0xD8A678", Offset = "0xD8A678", VA = "0xD8A678")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000E54")]
		[Address(RVA = "0xD8AB8C", Offset = "0xD8AB8C", VA = "0xD8AB8C")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000E55")]
		[Address(RVA = "0xD8AB98", Offset = "0xD8AB98", VA = "0xD8AB98")]
		public VREmulator()
		{
		}
	}
	[Token(Token = "0x200023E")]
	public class Waypoint : MonoBehaviour
	{
		[Token(Token = "0x4001084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Waypoint Destination;

		[Token(Token = "0x6000E56")]
		[Address(RVA = "0xD8ABF0", Offset = "0xD8ABF0", VA = "0xD8ABF0")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000E57")]
		[Address(RVA = "0xD8AD48", Offset = "0xD8AD48", VA = "0xD8AD48")]
		public Waypoint()
		{
		}
	}
	[Token(Token = "0x200023F")]
	public class Zipline : GrabbableEvents
	{
		[Token(Token = "0x4001085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform ZiplineStart;

		[Token(Token = "0x4001086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform ZiplineEnd;

		[Token(Token = "0x4001087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float ZiplineSpeed;

		[Token(Token = "0x4001088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool UseLinearMovement;

		[Token(Token = "0x4001089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float lastMoveTime;

		[Token(Token = "0x400108A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool movingForward;

		[Token(Token = "0x400108B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private AudioSource audioSource;

		[Token(Token = "0x6000E58")]
		[Address(RVA = "0xD8AD50", Offset = "0xD8AD50", VA = "0xD8AD50")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E59")]
		[Address(RVA = "0xD8AE1C", Offset = "0xD8AE1C", VA = "0xD8AE1C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E5A")]
		[Address(RVA = "0xD8AEE4", Offset = "0xD8AEE4", VA = "0xD8AEE4")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000E5B")]
		[Address(RVA = "0xD8AFFC", Offset = "0xD8AFFC", VA = "0xD8AFFC", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6000E5C")]
		[Address(RVA = "0xD8B334", Offset = "0xD8B334", VA = "0xD8B334", Slot = "19")]
		public override void OnButton1()
		{
		}

		[Token(Token = "0x6000E5D")]
		[Address(RVA = "0xD8B36C", Offset = "0xD8B36C", VA = "0xD8B36C", Slot = "22")]
		public override void OnButton2()
		{
		}

		[Token(Token = "0x6000E5E")]
		[Address(RVA = "0xD8B050", Offset = "0xD8B050", VA = "0xD8B050")]
		private void moveTowards(Vector3 pos, bool forwardDirection)
		{
		}

		[Token(Token = "0x6000E5F")]
		[Address(RVA = "0xD8B3A4", Offset = "0xD8B3A4", VA = "0xD8B3A4")]
		public Zipline()
		{
		}
	}
	[Token(Token = "0x2000240")]
	public class ControllerOffsetHelper : MonoBehaviour
	{
		[Token(Token = "0x2000241")]
		[CompilerGenerated]
		private sealed class <checkForController>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001092")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001093")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001094")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ControllerOffsetHelper <>4__this;

			[Token(Token = "0x17000134")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000E6B")]
				[Address(RVA = "0xD8BDB0", Offset = "0xD8BDB0", VA = "0xD8BDB0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000135")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000E6D")]
				[Address(RVA = "0xD8BDF8", Offset = "0xD8BDF8", VA = "0xD8BDF8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000E68")]
			[Address(RVA = "0xD8B4DC", Offset = "0xD8B4DC", VA = "0xD8B4DC")]
			[DebuggerHidden]
			public <checkForController>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6000E69")]
			[Address(RVA = "0xD8BCA0", Offset = "0xD8BCA0", VA = "0xD8BCA0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000E6A")]
			[Address(RVA = "0xD8BCA4", Offset = "0xD8BCA4", VA = "0xD8BCA4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000E6C")]
			[Address(RVA = "0xD8BDB8", Offset = "0xD8BDB8", VA = "0xD8BDB8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400108C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ControllerHand ControllerHand;

		[Token(Token = "0x400108D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The model of controller found")]
		[Header("Shown for Debug :")]
		[SerializeField]
		private string thisControllerModel;

		[Token(Token = "0x400108E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private ControllerOffset thisOffset;

		[Token(Token = "0x400108F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The position offset is defined within this script and loaded once the controller is found.")]
		public Vector3 OffsetPosition;

		[Token(Token = "0x4001090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The rotation offset is defined within this script and loaded once the controller is found.")]
		public Vector3 OffsetRotation;

		[Token(Token = "0x4001091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<ControllerOffset> ControllerOffsets;

		[Token(Token = "0x6000E60")]
		[Address(RVA = "0xD8B3C8", Offset = "0xD8B3C8", VA = "0xD8B3C8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E61")]
		[Address(RVA = "0xD8B468", Offset = "0xD8B468", VA = "0xD8B468")]
		[IteratorStateMachine(typeof(<checkForController>d__7))]
		private IEnumerator checkForController()
		{
			return null;
		}

		[Token(Token = "0x6000E62")]
		[Address(RVA = "0xD8B504", Offset = "0xD8B504", VA = "0xD8B504", Slot = "4")]
		public virtual void OnControllerFound()
		{
		}

		[Token(Token = "0x6000E63")]
		[Address(RVA = "0xD8B628", Offset = "0xD8B628", VA = "0xD8B628", Slot = "5")]
		public virtual ControllerOffset GetControllerOffset(string controllerName)
		{
			return null;
		}

		[Token(Token = "0x6000E64")]
		[Address(RVA = "0xD8B728", Offset = "0xD8B728", VA = "0xD8B728", Slot = "6")]
		public virtual void DefineControllerOffsets()
		{
		}

		[Token(Token = "0x6000E65")]
		[Address(RVA = "0xD8BBC8", Offset = "0xD8BBC8", VA = "0xD8BBC8", Slot = "7")]
		public virtual ControllerOffset GetOpenXROffset()
		{
			return null;
		}

		[Token(Token = "0x6000E66")]
		[Address(RVA = "0xD8BC6C", Offset = "0xD8BC6C", VA = "0xD8BC6C")]
		public ControllerOffsetHelper()
		{
		}
	}
	[Token(Token = "0x2000242")]
	public class ControllerOffset
	{
		[Token(Token = "0x17000136")]
		public string ControllerName
		{
			[Token(Token = "0x6000E6E")]
			[Address(RVA = "0xD8BE00", Offset = "0xD8BE00", VA = "0xD8BE00")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000E6F")]
			[Address(RVA = "0xD8BE08", Offset = "0xD8BE08", VA = "0xD8BE08")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000137")]
		public Vector3 LeftControllerPositionOffset
		{
			[Token(Token = "0x6000E70")]
			[Address(RVA = "0xD8BE10", Offset = "0xD8BE10", VA = "0xD8BE10")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000E71")]
			[Address(RVA = "0xD8BE1C", Offset = "0xD8BE1C", VA = "0xD8BE1C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000138")]
		public Vector3 RightControllerPositionOffset
		{
			[Token(Token = "0x6000E72")]
			[Address(RVA = "0xD8BE28", Offset = "0xD8BE28", VA = "0xD8BE28")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000E73")]
			[Address(RVA = "0xD8BE34", Offset = "0xD8BE34", VA = "0xD8BE34")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000139")]
		public Vector3 LeftControllerRotationOffset
		{
			[Token(Token = "0x6000E74")]
			[Address(RVA = "0xD8BE40", Offset = "0xD8BE40", VA = "0xD8BE40")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000E75")]
			[Address(RVA = "0xD8BE4C", Offset = "0xD8BE4C", VA = "0xD8BE4C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700013A")]
		public Vector3 RightControlleRotationOffset
		{
			[Token(Token = "0x6000E76")]
			[Address(RVA = "0xD8BE58", Offset = "0xD8BE58", VA = "0xD8BE58")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000E77")]
			[Address(RVA = "0xD8BE64", Offset = "0xD8BE64", VA = "0xD8BE64")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000E78")]
		[Address(RVA = "0xD8BBC0", Offset = "0xD8BBC0", VA = "0xD8BBC0")]
		public ControllerOffset()
		{
		}
	}
	[Token(Token = "0x2000243")]
	public class DetachableLimb : MonoBehaviour
	{
		[Token(Token = "0x400109A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform ShrinkBone;

		[Token(Token = "0x400109B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject ReplaceGrabbableWith;

		[Token(Token = "0x400109C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject EnableOnDetach;

		[Token(Token = "0x6000E79")]
		[Address(RVA = "0xD8BE70", Offset = "0xD8BE70", VA = "0xD8BE70")]
		public void DoDismemberment(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x6000E7A")]
		[Address(RVA = "0xD8C120", Offset = "0xD8C120", VA = "0xD8C120")]
		public void ReverseDismemberment()
		{
		}

		[Token(Token = "0x6000E7B")]
		[Address(RVA = "0xD8C240", Offset = "0xD8C240", VA = "0xD8C240")]
		public DetachableLimb()
		{
		}
	}
	[Token(Token = "0x2000244")]
	public class DoorHelper : MonoBehaviour
	{
		[Token(Token = "0x400109D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip DoorOpenSound;

		[Token(Token = "0x400109E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioClip DoorCloseSound;

		[Token(Token = "0x400109F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Does the handle need to be turned in order to open the door from the closed position?")]
		public bool RequireHandleTurnToOpen;

		[Token(Token = "0x40010A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool handleLocked;

		[Token(Token = "0x40010A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform HandleFollower;

		[Token(Token = "0x40010A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float DegreesTurned;

		[Token(Token = "0x40010A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float DegreesTurnToOpen;

		[Token(Token = "0x40010A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform DoorLockTransform;

		[Token(Token = "0x40010A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float initialLockPosition;

		[Token(Token = "0x40010A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private HingeJoint hinge;

		[Token(Token = "0x40010A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody rigid;

		[Token(Token = "0x40010A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool playedOpenSound;

		[Token(Token = "0x40010A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool readyToPlayCloseSound;

		[Token(Token = "0x40010AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float AngularVelocitySnapDoor;

		[Token(Token = "0x40010AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float angle;

		[Token(Token = "0x40010AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float AngularVelocity;

		[Token(Token = "0x40010AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("If true the door will not respond to user input")]
		public bool DoorIsLocked;

		[Token(Token = "0x40010AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float lockPos;

		[Token(Token = "0x40010AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 currentRotation;

		[Token(Token = "0x40010B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private float moveLockAmount;

		[Token(Token = "0x40010B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float rotateAngles;

		[Token(Token = "0x40010B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float ratio;

		[Token(Token = "0x6000E7C")]
		[Address(RVA = "0xD8C248", Offset = "0xD8C248", VA = "0xD8C248")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E7D")]
		[Address(RVA = "0xD8C33C", Offset = "0xD8C33C", VA = "0xD8C33C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E7E")]
		[Address(RVA = "0xD8CAD0", Offset = "0xD8CAD0", VA = "0xD8CAD0")]
		public DoorHelper()
		{
		}
	}
	[Token(Token = "0x2000245")]
	public class GrabberArea : MonoBehaviour
	{
		[Token(Token = "0x40010B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Grabber InArea;

		[Token(Token = "0x40010B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<Grabber> grabbersInArea;

		[Token(Token = "0x6000E7F")]
		[Address(RVA = "0xD8CAF0", Offset = "0xD8CAF0", VA = "0xD8CAF0")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E80")]
		[Address(RVA = "0xD8CB10", Offset = "0xD8CB10", VA = "0xD8CB10")]
		public Grabber GetOpenGrabber()
		{
			return null;
		}

		[Token(Token = "0x6000E81")]
		[Address(RVA = "0xD8CCA0", Offset = "0xD8CCA0", VA = "0xD8CCA0")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000E82")]
		[Address(RVA = "0xD8CE44", Offset = "0xD8CE44", VA = "0xD8CE44")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000E83")]
		[Address(RVA = "0xD8CF38", Offset = "0xD8CF38", VA = "0xD8CF38")]
		public GrabberArea()
		{
		}
	}
	[Token(Token = "0x2000246")]
	public class HandCollision : MonoBehaviour
	{
		[Token(Token = "0x40010B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HandController HandControl;

		[Token(Token = "0x40010B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabber HandGrabber;

		[Token(Token = "0x40010B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool EnableHandCollision;

		[Token(Token = "0x40010B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool EnableCollisionOnPoint;

		[Token(Token = "0x40010B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool EnableCollisionOnFist;

		[Token(Token = "0x40010BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		public bool EnableCollisionOnAllPoses;

		[Token(Token = "0x40010BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool EnableCollisionDuringGrab;

		[Token(Token = "0x40010BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float PointAmount;

		[Token(Token = "0x40010BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float GripAmount;

		[Token(Token = "0x40010BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool MakingFist;

		[Token(Token = "0x40010BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Collider> handColliders;

		[Token(Token = "0x6000E84")]
		[Address(RVA = "0xD8CF40", Offset = "0xD8CF40", VA = "0xD8CF40")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E85")]
		[Address(RVA = "0xD8D0BC", Offset = "0xD8D0BC", VA = "0xD8D0BC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E86")]
		[Address(RVA = "0xD8D3C0", Offset = "0xD8D3C0", VA = "0xD8D3C0")]
		public HandCollision()
		{
		}
	}
	[Token(Token = "0x2000247")]
	public class HandController : MonoBehaviour
	{
		[Token(Token = "0x40010C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("HandController parent will be set to this on Start if specified")]
		public Transform HandAnchor;

		[Token(Token = "0x40010C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If true, this transform will be parented to HandAnchor and it's position / rotation set to 0,0,0.")]
		public bool ResetHandAnchorPosition;

		[Token(Token = "0x40010C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Animator HandAnimator;

		[Token(Token = "0x40010C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("(Optional) If specified, this HandPoser can be used when setting poses retrieved from a grabbed Grabbable.")]
		public HandPoser handPoser;

		[Token(Token = "0x40010C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("(Optional) If specified, this AutoPoser component can be used when if set on the Grabbable, or if AutoPose is set to true")]
		public AutoPoser autoPoser;

		[Token(Token = "0x40010C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private HandPoseBlender poseBlender;

		[Token(Token = "0x40010C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("How to handle the hand when nothing is being grabbed / idle. Ex : Can use an Animator to control the hand via blending, a HandPoser to control via blend states, AutoPoser to continually auto pose while nothing is being held, or 'None' if you want to handle the idle state yourself.")]
		public HandPoserType IdlePoseType;

		[Token(Token = "0x40010C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("If true, the idle hand pose will be determined by the connected Valve Index Controller's finger tracking. Requires the SteamVR SDK. Make sure IdlePoseType is set to 'HandPoser'")]
		public bool UseIndexFingerTracking;

		[Token(Token = "0x40010C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("How fast to Lerp the Layer Animations")]
		public float HandAnimationSpeed;

		[Token(Token = "0x40010C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Check the state of this grabber to determine animation state. If null, a child Grabber component will be used.")]
		public Grabber grabber;

		[Token(Token = "0x40010CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Shown for Debug : ")]
		public float GripAmount;

		[Token(Token = "0x40010CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float _prevGrip;

		[Token(Token = "0x40010CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float PointAmount;

		[Token(Token = "0x40010CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float _prevPoint;

		[Token(Token = "0x40010CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float ThumbAmount;

		[Token(Token = "0x40010CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float _prevThumb;

		[Token(Token = "0x40010D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool _thumbIsNear;

		[Token(Token = "0x40010D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		private bool _indexIsNear;

		[Token(Token = "0x40010D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float _triggerValue;

		[Token(Token = "0x40010D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float _gripValue;

		[Token(Token = "0x40010D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public int PoseId;

		[Token(Token = "0x40010D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private ControllerOffsetHelper offset;

		[Token(Token = "0x40010D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private InputBridge input;

		[Token(Token = "0x40010D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Rigidbody rigid;

		[Token(Token = "0x40010D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Transform offsetTransform;

		[Token(Token = "0x40010D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public GameObject PreviousHeldObject;

		[Token(Token = "0x40010DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool DoUpdateAnimationStates;

		[Token(Token = "0x40010DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		public bool DoUpdateHandPoser;

		[Token(Token = "0x1700013B")]
		private Vector3 offsetPosition
		{
			[Token(Token = "0x6000E87")]
			[Address(RVA = "0xD8D3D8", Offset = "0xD8D3D8", VA = "0xD8D3D8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700013C")]
		private Vector3 offsetRotation
		{
			[Token(Token = "0x6000E88")]
			[Address(RVA = "0xD8D49C", Offset = "0xD8D49C", VA = "0xD8D49C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000E89")]
		[Address(RVA = "0xD8D560", Offset = "0xD8D560", VA = "0xD8D560")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E8A")]
		[Address(RVA = "0xD8D8C4", Offset = "0xD8D8C4", VA = "0xD8D8C4")]
		public void Update()
		{
		}

		[Token(Token = "0x6000E8B")]
		[Address(RVA = "0xD8D918", Offset = "0xD8D918", VA = "0xD8D918", Slot = "4")]
		public virtual void UpdateHeldObjectState()
		{
		}

		[Token(Token = "0x6000E8C")]
		[Address(RVA = "0xD8D978", Offset = "0xD8D978", VA = "0xD8D978", Slot = "5")]
		public virtual void UpdateIdleState()
		{
		}

		[Token(Token = "0x6000E8D")]
		[Address(RVA = "0xD8D9C4", Offset = "0xD8D9C4", VA = "0xD8D9C4", Slot = "6")]
		public virtual bool HoldingObject()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E8E")]
		[Address(RVA = "0xD8DA6C", Offset = "0xD8DA6C", VA = "0xD8DA6C", Slot = "7")]
		public virtual void CheckForGrabChange()
		{
		}

		[Token(Token = "0x6000E8F")]
		[Address(RVA = "0xD8DBD0", Offset = "0xD8DBD0", VA = "0xD8DBD0", Slot = "8")]
		public virtual void OnGrabChange(GameObject newlyHeldObject)
		{
		}

		[Token(Token = "0x6000E90")]
		[Address(RVA = "0xD8DD74", Offset = "0xD8DD74", VA = "0xD8DD74", Slot = "9")]
		public virtual void OnGrabDrop()
		{
		}

		[Token(Token = "0x6000E91")]
		[Address(RVA = "0xD8DE00", Offset = "0xD8DE00", VA = "0xD8DE00", Slot = "10")]
		public virtual void SetHandAnimator()
		{
		}

		[Token(Token = "0x6000E92")]
		[Address(RVA = "0xD8DED4", Offset = "0xD8DED4", VA = "0xD8DED4", Slot = "11")]
		public virtual void UpdateFromInputs()
		{
		}

		[Token(Token = "0x6000E93")]
		[Address(RVA = "0xD8E0C4", Offset = "0xD8E0C4", VA = "0xD8E0C4", Slot = "12")]
		public virtual void UpdateAnimimationStates()
		{
		}

		[Token(Token = "0x6000E94")]
		[Address(RVA = "0xD8E4C4", Offset = "0xD8E4C4", VA = "0xD8E4C4")]
		private void setAnimatorBlend(float min, float max, float input, int animationLayer)
		{
		}

		[Token(Token = "0x6000E95")]
		[Address(RVA = "0xD8E4EC", Offset = "0xD8E4EC", VA = "0xD8E4EC", Slot = "13")]
		public virtual bool IsAnimatorGrabbable()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E96")]
		[Address(RVA = "0xD8E5D4", Offset = "0xD8E5D4", VA = "0xD8E5D4", Slot = "14")]
		public virtual void UpdateHandPoser()
		{
		}

		[Token(Token = "0x6000E97")]
		[Address(RVA = "0xD8E804", Offset = "0xD8E804", VA = "0xD8E804", Slot = "15")]
		public virtual bool IsHandPoserGrabbable()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E98")]
		[Address(RVA = "0xD8E8EC", Offset = "0xD8E8EC", VA = "0xD8E8EC", Slot = "16")]
		public virtual void UpdateHandPoserIdleState()
		{
		}

		[Token(Token = "0x6000E99")]
		[Address(RVA = "0xD8EA94", Offset = "0xD8EA94", VA = "0xD8EA94", Slot = "17")]
		public virtual void UpdateIndexFingerBlending()
		{
		}

		[Token(Token = "0x6000E9A")]
		[Address(RVA = "0xD8EA98", Offset = "0xD8EA98", VA = "0xD8EA98", Slot = "18")]
		public virtual bool SetupPoseBlender()
		{
			return default(bool);
		}

		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0xD8ECF0", Offset = "0xD8ECF0", VA = "0xD8ECF0", Slot = "19")]
		public virtual HandPose GetDefaultOpenPose()
		{
			return null;
		}

		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0xD8ED48", Offset = "0xD8ED48", VA = "0xD8ED48", Slot = "20")]
		public virtual HandPose GetDefaultClosedPose()
		{
			return null;
		}

		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0xD8EDA0", Offset = "0xD8EDA0", VA = "0xD8EDA0", Slot = "21")]
		public virtual void EnableHandPoser()
		{
		}

		[Token(Token = "0x6000E9E")]
		[Address(RVA = "0xD8EE24", Offset = "0xD8EE24", VA = "0xD8EE24", Slot = "22")]
		public virtual void EnableAutoPoser(bool continuous)
		{
		}

		[Token(Token = "0x6000E9F")]
		[Address(RVA = "0xD8EFC0", Offset = "0xD8EFC0", VA = "0xD8EFC0", Slot = "23")]
		public virtual void DisablePoseBlender()
		{
		}

		[Token(Token = "0x6000EA0")]
		[Address(RVA = "0xD8F038", Offset = "0xD8F038", VA = "0xD8F038", Slot = "24")]
		public virtual void DisableAutoPoser()
		{
		}

		[Token(Token = "0x6000EA1")]
		[Address(RVA = "0xD8F0B0", Offset = "0xD8F0B0", VA = "0xD8F0B0", Slot = "25")]
		public virtual bool IsAutoPoserGrabbable()
		{
			return default(bool);
		}

		[Token(Token = "0x6000EA2")]
		[Address(RVA = "0xD8F19C", Offset = "0xD8F19C", VA = "0xD8F19C", Slot = "26")]
		public virtual void EnableHandAnimator()
		{
		}

		[Token(Token = "0x6000EA3")]
		[Address(RVA = "0xD8F274", Offset = "0xD8F274", VA = "0xD8F274", Slot = "27")]
		public virtual void DisableHandAnimator()
		{
		}

		[Token(Token = "0x6000EA4")]
		[Address(RVA = "0xD8F310", Offset = "0xD8F310", VA = "0xD8F310", Slot = "28")]
		public virtual void OnGrabberGrabbed(Grabbable grabbed)
		{
		}

		[Token(Token = "0x6000EA5")]
		[Address(RVA = "0xD8F40C", Offset = "0xD8F40C", VA = "0xD8F40C", Slot = "29")]
		public virtual void UpdateCurrentHandPose()
		{
		}

		[Token(Token = "0x6000EA6")]
		[Address(RVA = "0xD8F4B4", Offset = "0xD8F4B4", VA = "0xD8F4B4", Slot = "30")]
		public virtual void OnGrabberReleased(Grabbable released)
		{
		}

		[Token(Token = "0x6000EA7")]
		[Address(RVA = "0xD8F4C0", Offset = "0xD8F4C0", VA = "0xD8F4C0")]
		public HandController()
		{
		}
	}
	[Token(Token = "0x2000248")]
	public enum HandPoserType
	{
		[Token(Token = "0x40010DD")]
		HandPoser,
		[Token(Token = "0x40010DE")]
		Animator,
		[Token(Token = "0x40010DF")]
		AutoPoser,
		[Token(Token = "0x40010E0")]
		None
	}
	[Token(Token = "0x2000249")]
	public class HandleGFXHelper : MonoBehaviour
	{
		[Token(Token = "0x40010E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform LookAt;

		[Token(Token = "0x40010E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabbable HandleGrabbable;

		[Token(Token = "0x40010E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float Speed;

		[Token(Token = "0x40010E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float LocalYMin;

		[Token(Token = "0x40010E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float LocalYMax;

		[Token(Token = "0x40010E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 initialRot;

		[Token(Token = "0x6000EA8")]
		[Address(RVA = "0xD8F4E4", Offset = "0xD8F4E4", VA = "0xD8F4E4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EA9")]
		[Address(RVA = "0xD8F514", Offset = "0xD8F514", VA = "0xD8F514")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0xD8F7A0", Offset = "0xD8F7A0", VA = "0xD8F7A0")]
		public HandleGFXHelper()
		{
		}
	}
	[Token(Token = "0x200024A")]
	public class HandleHelper : MonoBehaviour
	{
		[Token(Token = "0x200024B")]
		[CompilerGenerated]
		private sealed class <doRelease>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40010EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40010F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandleHelper <>4__this;

			[Token(Token = "0x1700013D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000EB3")]
				[Address(RVA = "0xD8FE78", Offset = "0xD8FE78", VA = "0xD8FE78", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700013E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000EB5")]
				[Address(RVA = "0xD8FEC0", Offset = "0xD8FEC0", VA = "0xD8FEC0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000EB0")]
			[Address(RVA = "0xD8FD88", Offset = "0xD8FD88", VA = "0xD8FD88")]
			[DebuggerHidden]
			public <doRelease>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6000EB1")]
			[Address(RVA = "0xD8FDB8", Offset = "0xD8FDB8", VA = "0xD8FDB8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000EB2")]
			[Address(RVA = "0xD8FDBC", Offset = "0xD8FDBC", VA = "0xD8FDBC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000EB4")]
			[Address(RVA = "0xD8FE80", Offset = "0xD8FE80", VA = "0xD8FE80", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40010E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody ParentRigid;

		[Token(Token = "0x40010E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform HandleTransform;

		[Token(Token = "0x40010E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Grabbable thisGrab;

		[Token(Token = "0x40010EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody rb;

		[Token(Token = "0x40010EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool didRelease;

		[Token(Token = "0x40010EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Collider col;

		[Token(Token = "0x40010ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 lastAngularVelocity;

		[Token(Token = "0x6000EAB")]
		[Address(RVA = "0xD8F7BC", Offset = "0xD8F7BC", VA = "0xD8F7BC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EAC")]
		[Address(RVA = "0xD8F964", Offset = "0xD8F964", VA = "0xD8F964")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000EAD")]
		[Address(RVA = "0xD8FD54", Offset = "0xD8FD54", VA = "0xD8FD54")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000EAE")]
		[Address(RVA = "0xD8FCE0", Offset = "0xD8FCE0", VA = "0xD8FCE0")]
		[IteratorStateMachine(typeof(<doRelease>d__10))]
		private IEnumerator doRelease()
		{
			return null;
		}

		[Token(Token = "0x6000EAF")]
		[Address(RVA = "0xD8FDB0", Offset = "0xD8FDB0", VA = "0xD8FDB0")]
		public HandleHelper()
		{
		}
	}
	[Token(Token = "0x200024C")]
	public class HandPhysics : MonoBehaviour
	{
		[Token(Token = "0x200024D")]
		[CompilerGenerated]
		private sealed class <UnignoreAllCollisions>d__31 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001108")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001109")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400110A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandPhysics <>4__this;

			[Token(Token = "0x400110B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Grabbable <thisGrabbable>5__2;

			[Token(Token = "0x17000140")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000ED1")]
				[Address(RVA = "0xD920B8", Offset = "0xD920B8", VA = "0xD920B8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000141")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000ED3")]
				[Address(RVA = "0xD92100", Offset = "0xD92100", VA = "0xD92100", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000ECE")]
			[Address(RVA = "0xD91310", Offset = "0xD91310", VA = "0xD91310")]
			[DebuggerHidden]
			public <UnignoreAllCollisions>d__31(int <>1__state)
			{
			}

			[Token(Token = "0x6000ECF")]
			[Address(RVA = "0xD91FD4", Offset = "0xD91FD4", VA = "0xD91FD4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000ED0")]
			[Address(RVA = "0xD91FD8", Offset = "0xD91FD8", VA = "0xD91FD8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000ED2")]
			[Address(RVA = "0xD920C0", Offset = "0xD920C0", VA = "0xD920C0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40010F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("This is the object our physical hand should try to follow / match. Should typically be an object on the controller Transform")]
		public Transform AttachTo;

		[Token(Token = "0x40010F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Amount of Velocity to apply to hands when trying to reach anchor point")]
		public float HandVelocity;

		[Token(Token = "0x40010F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("If true, Hand COlliders will be disabled while grabbing an object")]
		public bool DisableHandCollidersOnGrab;

		[Token(Token = "0x40010F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If the hand exceeds this distance from it's origin it will snap back to the original position. Specified in meters.")]
		public float SnapBackDistance;

		[Token(Token = "0x40010F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("This is the Grabber to use when this hand is active.")]
		public Grabber ThisGrabber;

		[Token(Token = "0x40010F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Disable this Grabber when this hand is active. (Optional)")]
		public Grabber DisableGrabber;

		[Token(Token = "0x40010F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("This is the RemoteGrabber to use when this hand is active.")]
		public RemoteGrabber ThisRemoteGrabber;

		[Token(Token = "0x40010F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Disable this RemoteGrabber when this hand is active. (Optional)")]
		public RemoteGrabber DisableRemoteGrabber;

		[Token(Token = "0x40010F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Assign Hand Colliders this material if provided")]
		public PhysicMaterial ColliderMaterial;

		[Token(Token = "0x40010FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform HandModel;

		[Token(Token = "0x40010FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform HandModelOffset;

		[Token(Token = "0x40010FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<Collider> handColliders;

		[Token(Token = "0x40010FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody rigid;

		[Token(Token = "0x40010FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private ConfigurableJoint configJoint;

		[Token(Token = "0x40010FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Grabbable heldGrabbable;

		[Token(Token = "0x4001100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<Collider> collisions;

		[Token(Token = "0x4001101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private LineRenderer line;

		[Token(Token = "0x4001102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 localHandOffset;

		[Token(Token = "0x4001103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 localHandOffsetRotation;

		[Token(Token = "0x4001104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool wasHoldingObject;

		[Token(Token = "0x4001105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Grabbable remoteIgnoredGrabbable;

		[Token(Token = "0x4001106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Transform _priorParent;

		[Token(Token = "0x4001107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Vector3 _priorLocalOffsetPosition;

		[Token(Token = "0x1700013F")]
		public bool HoldingObject
		{
			[Token(Token = "0x6000EB6")]
			[Address(RVA = "0xD8FEC8", Offset = "0xD8FEC8", VA = "0xD8FEC8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000EB7")]
		[Address(RVA = "0xD8FF6C", Offset = "0xD8FF6C", VA = "0xD8FF6C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EB8")]
		[Address(RVA = "0xD90520", Offset = "0xD90520", VA = "0xD90520")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EB9")]
		[Address(RVA = "0xD90D0C", Offset = "0xD90D0C", VA = "0xD90D0C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000EBA")]
		[Address(RVA = "0xD90298", Offset = "0xD90298", VA = "0xD90298")]
		private void initHandColliders()
		{
		}

		[Token(Token = "0x6000EBB")]
		[Address(RVA = "0xD90A40", Offset = "0xD90A40", VA = "0xD90A40")]
		private void checkRemoteCollision()
		{
		}

		[Token(Token = "0x6000EBC")]
		[Address(RVA = "0xD90874", Offset = "0xD90874", VA = "0xD90874")]
		private void drawDistanceLine()
		{
		}

		[Token(Token = "0x6000EBD")]
		[Address(RVA = "0xD90BE0", Offset = "0xD90BE0", VA = "0xD90BE0")]
		private void checkBreakDistance()
		{
		}

		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0xD906A8", Offset = "0xD906A8", VA = "0xD906A8")]
		private void updateHandGraphics()
		{
		}

		[Token(Token = "0x6000EBF")]
		[Address(RVA = "0xD9129C", Offset = "0xD9129C", VA = "0xD9129C")]
		[IteratorStateMachine(typeof(<UnignoreAllCollisions>d__31))]
		private IEnumerator UnignoreAllCollisions()
		{
			return null;
		}

		[Token(Token = "0x6000EC0")]
		[Address(RVA = "0xD91184", Offset = "0xD91184", VA = "0xD91184")]
		public void IgnoreGrabbableCollisions(Grabbable grab, bool ignorePhysics)
		{
		}

		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0xD91338", Offset = "0xD91338", VA = "0xD91338")]
		public void DisableHandColliders()
		{
		}

		[Token(Token = "0x6000EC2")]
		[Address(RVA = "0xD91448", Offset = "0xD91448", VA = "0xD91448")]
		public void EnableHandColliders()
		{
		}

		[Token(Token = "0x6000EC3")]
		[Address(RVA = "0xD91558", Offset = "0xD91558", VA = "0xD91558", Slot = "4")]
		public virtual void OnGrabbedObject(Grabbable grabbedObject)
		{
		}

		[Token(Token = "0x6000EC4")]
		[Address(RVA = "0xD915A4", Offset = "0xD915A4", VA = "0xD915A4", Slot = "5")]
		public virtual void LockLocalPosition()
		{
		}

		[Token(Token = "0x6000EC5")]
		[Address(RVA = "0xD915F4", Offset = "0xD915F4", VA = "0xD915F4", Slot = "6")]
		public virtual void UnlockLocalPosition()
		{
		}

		[Token(Token = "0x6000EC6")]
		[Address(RVA = "0xD9161C", Offset = "0xD9161C", VA = "0xD9161C", Slot = "7")]
		public virtual void OnReleasedObject(Grabbable grabbedObject)
		{
		}

		[Token(Token = "0x6000EC7")]
		[Address(RVA = "0xD916C8", Offset = "0xD916C8", VA = "0xD916C8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000EC8")]
		[Address(RVA = "0xD9195C", Offset = "0xD9195C", VA = "0xD9195C", Slot = "8")]
		public virtual void LockOffset()
		{
		}

		[Token(Token = "0x6000EC9")]
		[Address(RVA = "0xD919A8", Offset = "0xD919A8", VA = "0xD919A8", Slot = "9")]
		public virtual void UnlockOffset()
		{
		}

		[Token(Token = "0x6000ECA")]
		[Address(RVA = "0xD91AD4", Offset = "0xD91AD4", VA = "0xD91AD4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000ECB")]
		[Address(RVA = "0xD91D8C", Offset = "0xD91D8C", VA = "0xD91D8C")]
		private void OnCollisionStay(Collision collision)
		{
		}

		[Token(Token = "0x6000ECC")]
		[Address(RVA = "0xD91F28", Offset = "0xD91F28", VA = "0xD91F28")]
		public bool IsValidCollision(Collider col)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ECD")]
		[Address(RVA = "0xD91F30", Offset = "0xD91F30", VA = "0xD91F30")]
		public HandPhysics()
		{
		}
	}
	[Token(Token = "0x200024E")]
	public class HandRepresentationHelper : MonoBehaviour
	{
		[Token(Token = "0x400110C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The GameObject to be shown or hidden depending on Distance from OtherHandTransform")]
		public Transform HandToToggle;

		[Token(Token = "0x400110D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The other Hand Transform used to calculate distance")]
		public Transform OtherHandTransform;

		[Token(Token = "0x400110E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Distance required to show this Transform in meters")]
		public float DistanceToShow;

		[Token(Token = "0x6000ED4")]
		[Address(RVA = "0xD92108", Offset = "0xD92108", VA = "0xD92108")]
		private void Update()
		{
		}

		[Token(Token = "0x6000ED5")]
		[Address(RVA = "0xD921FC", Offset = "0xD921FC", VA = "0xD921FC")]
		public HandRepresentationHelper()
		{
		}
	}
	[Token(Token = "0x200024F")]
	public class IgnoreColliders : MonoBehaviour
	{
		[Token(Token = "0x400110F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Collider> CollidersToIgnore;

		[Token(Token = "0x6000ED6")]
		[Address(RVA = "0xD92210", Offset = "0xD92210", VA = "0xD92210")]
		private void Start()
		{
		}

		[Token(Token = "0x6000ED7")]
		[Address(RVA = "0xD923E4", Offset = "0xD923E4", VA = "0xD923E4")]
		public IgnoreColliders()
		{
		}
	}
	[Token(Token = "0x2000250")]
	public class InvalidTeleportArea : MonoBehaviour
	{
		[Token(Token = "0x6000ED8")]
		[Address(RVA = "0xD923EC", Offset = "0xD923EC", VA = "0xD923EC")]
		public InvalidTeleportArea()
		{
		}
	}
	[Token(Token = "0x2000251")]
	public class JointBreaker : MonoBehaviour
	{
		[Token(Token = "0x4001110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float BreakDistance;

		[Token(Token = "0x4001111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float JointDistance;

		[Token(Token = "0x4001112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool DestroyJointOnBreak;

		[Token(Token = "0x4001113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GrabberEvent OnBreakEvent;

		[Token(Token = "0x4001114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Joint theJoint;

		[Token(Token = "0x4001115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 startPos;

		[Token(Token = "0x4001116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool brokeJoint;

		[Token(Token = "0x6000ED9")]
		[Address(RVA = "0xD923F4", Offset = "0xD923F4", VA = "0xD923F4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EDA")]
		[Address(RVA = "0xD92470", Offset = "0xD92470", VA = "0xD92470")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EDB")]
		[Address(RVA = "0xD9255C", Offset = "0xD9255C", VA = "0xD9255C")]
		public void BreakJoint()
		{
		}

		[Token(Token = "0x6000EDC")]
		[Address(RVA = "0xD926CC", Offset = "0xD926CC", VA = "0xD926CC")]
		public JointBreaker()
		{
		}
	}
	[Token(Token = "0x2000252")]
	public class JointHelper : MonoBehaviour
	{
		[Token(Token = "0x4001117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool LockXPosition;

		[Token(Token = "0x4001118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool LockYPosition;

		[Token(Token = "0x4001119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool LockZPosition;

		[Token(Token = "0x400111A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool LockXScale;

		[Token(Token = "0x400111B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool LockYScale;

		[Token(Token = "0x400111C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool LockZScale;

		[Token(Token = "0x400111D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public bool LockXRotation;

		[Token(Token = "0x400111E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
		public bool LockYRotation;

		[Token(Token = "0x400111F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool LockZRotation;

		[Token(Token = "0x4001120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 initialPosition;

		[Token(Token = "0x4001121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 initialRotation;

		[Token(Token = "0x4001122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 initialScale;

		[Token(Token = "0x4001123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 currentPosition;

		[Token(Token = "0x4001124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 currentScale;

		[Token(Token = "0x4001125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 currentRotation;

		[Token(Token = "0x6000EDD")]
		[Address(RVA = "0xD926E4", Offset = "0xD926E4", VA = "0xD926E4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EDE")]
		[Address(RVA = "0xD92754", Offset = "0xD92754", VA = "0xD92754")]
		private void lockPosition()
		{
		}

		[Token(Token = "0x6000EDF")]
		[Address(RVA = "0xD92934", Offset = "0xD92934", VA = "0xD92934")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000EE0")]
		[Address(RVA = "0xD92938", Offset = "0xD92938", VA = "0xD92938")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000EE1")]
		[Address(RVA = "0xD9293C", Offset = "0xD9293C", VA = "0xD9293C")]
		public JointHelper()
		{
		}
	}
	[Token(Token = "0x2000253")]
	public class RagdollHelper : MonoBehaviour
	{
		[Token(Token = "0x4001126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform player;

		[Token(Token = "0x4001127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Collider> colliders;

		[Token(Token = "0x4001128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Collider playerCol;

		[Token(Token = "0x6000EE2")]
		[Address(RVA = "0xD92954", Offset = "0xD92954", VA = "0xD92954")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EE3")]
		[Address(RVA = "0xD92B68", Offset = "0xD92B68", VA = "0xD92B68")]
		public RagdollHelper()
		{
		}
	}
	[Token(Token = "0x2000254")]
	public class RingHelper : MonoBehaviour
	{
		[Token(Token = "0x4001129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Grabbable Object to Observe")]
		public Grabbable grabbable;

		[Token(Token = "0x400112A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("(Optional) If specified, the ring helper will only be valid if this Grabpoint is the nearest on the the grabbable object")]
		public GrabPoint Grabpoint;

		[Token(Token = "0x400112B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Default Color of the ring")]
		public Color RingColor;

		[Token(Token = "0x400112C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Color to use if selected by primary controller")]
		public Color RingSelectedColor;

		[Token(Token = "0x400112D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Color to use if selected by secondary controller")]
		public Color RingSecondarySelectedColor;

		[Token(Token = "0x400112E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float ringSizeInRange;

		[Token(Token = "0x400112F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float ringSizeGrabbable;

		[Token(Token = "0x4001130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Don't show grab rings if left and right controllers / grabbers are  holding something")]
		public bool HideIfHandsAreFull;

		[Token(Token = "0x4001131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("How fast to lerp the opacity if being hidden / shown")]
		public float RingFadeSpeed;

		[Token(Token = "0x4001132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Canvas canvas;

		[Token(Token = "0x4001133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Text text;

		[Token(Token = "0x4001134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private CanvasScaler scaler;

		[Token(Token = "0x4001135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Grabber leftGrabber;

		[Token(Token = "0x4001136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Grabber rightGrabber;

		[Token(Token = "0x4001137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Grabber closestGrabber;

		[Token(Token = "0x4001138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool handsFull;

		[Token(Token = "0x4001139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float _initalOpacity;

		[Token(Token = "0x400113A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float _currentOpacity;

		[Token(Token = "0x400113B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Transform mainCam;

		[Token(Token = "0x6000EE4")]
		[Address(RVA = "0xD92B70", Offset = "0xD92B70", VA = "0xD92B70")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EE5")]
		[Address(RVA = "0xD92D74", Offset = "0xD92D74", VA = "0xD92D74")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EE6")]
		[Address(RVA = "0xD93374", Offset = "0xD93374", VA = "0xD93374", Slot = "4")]
		public virtual void AssignCamera()
		{
		}

		[Token(Token = "0x6000EE7")]
		[Address(RVA = "0xD93468", Offset = "0xD93468", VA = "0xD93468", Slot = "5")]
		public virtual void AssignGrabbers()
		{
		}

		[Token(Token = "0x6000EE8")]
		[Address(RVA = "0xD93268", Offset = "0xD93268", VA = "0xD93268")]
		private Color getSelectedColor()
		{
			return default(Color);
		}

		[Token(Token = "0x6000EE9")]
		[Address(RVA = "0xD935B8", Offset = "0xD935B8", VA = "0xD935B8")]
		public RingHelper()
		{
		}
	}
	[Token(Token = "0x2000255")]
	public class ScaleMaterialHelper : MonoBehaviour
	{
		[Token(Token = "0x400113C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Renderer ren;

		[Token(Token = "0x400113D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2 Tiling;

		[Token(Token = "0x400113E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 Offset;

		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0xD935F0", Offset = "0xD935F0", VA = "0xD935F0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EEB")]
		[Address(RVA = "0xD93650", Offset = "0xD93650", VA = "0xD93650")]
		private void updateTexture()
		{
		}

		[Token(Token = "0x6000EEC")]
		[Address(RVA = "0xD93740", Offset = "0xD93740", VA = "0xD93740")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000EED")]
		[Address(RVA = "0xD93768", Offset = "0xD93768", VA = "0xD93768")]
		public ScaleMaterialHelper()
		{
		}
	}
	[Token(Token = "0x2000256")]
	public class StaticBatch : MonoBehaviour
	{
		[Token(Token = "0x400113F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material CombineMaterial;

		[Token(Token = "0x6000EEE")]
		[Address(RVA = "0xD93778", Offset = "0xD93778", VA = "0xD93778")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EEF")]
		[Address(RVA = "0xD93E30", Offset = "0xD93E30", VA = "0xD93E30")]
		public StaticBatch()
		{
		}
	}
	[Token(Token = "0x2000257")]
	public class TeleportDestination : MonoBehaviour
	{
		[Token(Token = "0x4001140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Where the player will be teleported to")]
		public Transform DestinationTransform;

		[Token(Token = "0x4001141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Snap player to this rotation?")]
		public bool ForcePlayerRotation;

		[Token(Token = "0x4001142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Called when a player uses the teleporter to enter this destination.")]
		public UnityEvent OnPlayerTeleported;

		[Token(Token = "0x6000EF0")]
		[Address(RVA = "0xD93E38", Offset = "0xD93E38", VA = "0xD93E38")]
		public TeleportDestination()
		{
		}
	}
	[Token(Token = "0x2000258")]
	public class TeleportPlayerOnEnter : MonoBehaviour
	{
		[Token(Token = "0x4001143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform TeleportDestination;

		[Token(Token = "0x6000EF1")]
		[Address(RVA = "0xD93E40", Offset = "0xD93E40", VA = "0xD93E40")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000EF2")]
		[Address(RVA = "0xD93F74", Offset = "0xD93F74", VA = "0xD93F74")]
		public TeleportPlayerOnEnter()
		{
		}
	}
	[Token(Token = "0x2000259")]
	public class UITrigger : MonoBehaviour
	{
		[Token(Token = "0x6000EF3")]
		[Address(RVA = "0xD93F7C", Offset = "0xD93F7C", VA = "0xD93F7C")]
		public UITrigger()
		{
		}
	}
	[Token(Token = "0x200025A")]
	public class VRIFGrabpointUpdater : MonoBehaviour
	{
		[Token(Token = "0x4001144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("This is the local position of the hand model that was defined in your previous xr rig, as well as what was used in the previewer.")]
		[Header("Right Hand Model")]
		public Vector3 PriorModelOffsetRightPosition;

		[Token(Token = "0x4001145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("This is the local position of the NEW hand model that is currently defined in your xr rig, as well as what is used in the previewer.")]
		public Vector3 NewModelOffsetRightPosition;

		[Token(Token = "0x4001146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("This is the local rotation of the hand model that was defined in your previous xr rig, as well as what was used in the previewer.")]
		public Vector3 PriorModelOffsetRightRotation;

		[Token(Token = "0x4001147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("This is the local rotation of the NEW hand model that is currently defined in your xr rig, as well as what is used in the previewer.")]
		public Vector3 NewModelOffsetRightRotation;

		[Token(Token = "0x4001148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("This is the local position of the hand model that was defined in your previous xr rig, as well as what was used in the previewer.")]
		[Header("Left Hand Model")]
		public Vector3 PriorModelOffsetLeftPosition;

		[Token(Token = "0x4001149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("This is the local position of the NEW hand model that is currently defined in your xr rig, as well as what is used in the previewer.")]
		public Vector3 NewModelOffsetLeftPosition;

		[Token(Token = "0x400114A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("This is the local rotation of the hand model that was defined in your previous xr rig, as well as what was used in the previewer.")]
		public Vector3 PriorModelOffsetLeftRotation;

		[Token(Token = "0x400114B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("This is the local rotation of the NEW hand model that is currently defined in your xr rig, as well as what is used in the previewer.")]
		public Vector3 NewModelOffsetLeftRotation;

		[Token(Token = "0x6000EF4")]
		[Address(RVA = "0xD93F84", Offset = "0xD93F84", VA = "0xD93F84")]
		private void Start()
		{
		}

		[Token(Token = "0x6000EF5")]
		[Address(RVA = "0xD93F88", Offset = "0xD93F88", VA = "0xD93F88")]
		public void ApplyGrabPointUpdate()
		{
		}

		[Token(Token = "0x6000EF6")]
		[Address(RVA = "0xD942F4", Offset = "0xD942F4", VA = "0xD942F4")]
		public VRIFGrabpointUpdater()
		{
		}
	}
	[Token(Token = "0x200025B")]
	public class UIButtonCollider : MonoBehaviour
	{
		[Token(Token = "0x400114C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If true, this button can be held down and the button's click event will be fired repeatedly. If false, the button's click event will only be called once per trigger enter")]
		[Header("Hold Button Down Option")]
		public bool CanBeHeldDown;

		[Token(Token = "0x400114D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Amount of time that must first pass before continuing to fire the button's click event. This value is used once. The 'HoldDownDelay' value is then used for each subsequent delay. ")]
		public float InitialHoldDownDelay;

		[Token(Token = "0x400114E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The amount of time that must pass in-between click events while the button is held down. ")]
		public float HoldDownDelay;

		[Token(Token = "0x400114F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("If true, this transform will be animated down on the Z axis by the PressedInZValue amount.")]
		[Header("Animate Key")]
		public bool AnimateKey;

		[Token(Token = "0x4001150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If AnimateKey is true, this transform will be animated down on the Z axis by this amount.")]
		public float PressedInZValue;

		[Token(Token = "0x4001151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("How fast to Lerp the key in")]
		public float PressInSpeed;

		[Token(Token = "0x4001152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private UnityEngine.UI.Button uiButton;

		[Token(Token = "0x4001153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected int itemsInTrigger;

		[Token(Token = "0x4001154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected bool readyForDownEvent;

		[Token(Token = "0x4001155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected int clickCount;

		[Token(Token = "0x4001156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected float lastPressTime;

		[Token(Token = "0x4001157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected BoxCollider boxCollider;

		[Token(Token = "0x4001158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected float colliderInitialCenterZ;

		[Token(Token = "0x6000EF7")]
		[Address(RVA = "0xD94344", Offset = "0xD94344", VA = "0xD94344")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EF8")]
		[Address(RVA = "0xD9442C", Offset = "0xD9442C", VA = "0xD9442C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EF9")]
		[Address(RVA = "0xD948D8", Offset = "0xD948D8", VA = "0xD948D8")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000EFA")]
		[Address(RVA = "0xD9497C", Offset = "0xD9497C", VA = "0xD9497C")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000EFB")]
		[Address(RVA = "0xD94A20", Offset = "0xD94A20", VA = "0xD94A20")]
		public UIButtonCollider()
		{
		}
	}
	[Token(Token = "0x200025C")]
	public class UICanvasGroup : MonoBehaviour
	{
		[Token(Token = "0x4001159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<GameObject> CanvasObjects;

		[Token(Token = "0x6000EFC")]
		[Address(RVA = "0xD94A50", Offset = "0xD94A50", VA = "0xD94A50")]
		public void ActivateCanvas(int CanvasIndex)
		{
		}

		[Token(Token = "0x6000EFD")]
		[Address(RVA = "0xD94B4C", Offset = "0xD94B4C", VA = "0xD94B4C")]
		public UICanvasGroup()
		{
		}
	}
	[Token(Token = "0x200025D")]
	public class UIPointer : MonoBehaviour
	{
		[Token(Token = "0x400115A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The controller side this pointer is on")]
		public ControllerHand ControllerSide;

		[Token(Token = "0x400115B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If true this object will update the VRUISystem's Left or Right Transform property")]
		public bool AutoUpdateUITransforms;

		[Token(Token = "0x400115C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject cursor;

		[Token(Token = "0x400115D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject _cursor;

		[Token(Token = "0x400115E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("If true the cursor and LineRenderer will be Hidden. Otherwise it will still be show at a fixed length")]
		public bool HidePointerIfNoObjectsFound;

		[Token(Token = "0x400115F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("How long the line / cursor should extend if no objects are found to point at")]
		public float FixedPointerLength;

		[Token(Token = "0x4001160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("If true the cursor object will scale based on how far away the pointer is from the origin. A cursor far away will have a larger cusor than one up close.")]
		public bool CursorScaling;

		[Token(Token = "0x4001161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Minimum scale of the Cursor object if CursorScaling is enabled")]
		public float CursorMinScale;

		[Token(Token = "0x4001162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float CursorMaxScale;

		[Token(Token = "0x4001163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 _cursorInitialLocalScale;

		[Token(Token = "0x4001164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Example : 0.5 = Line Goes Half Way. 1 = Line reaches end.")]
		public float LineDistanceModifier;

		[Token(Token = "0x4001165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private VRUISystem uiSystem;

		[Token(Token = "0x4001166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private PointerEvents selectedPointerEvents;

		[Token(Token = "0x4001167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private PointerEventData data;

		[Token(Token = "0x4001168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("LineRenderer to use when showing a valid UI Canvas. Leave null to attempt a GetComponent<> on this object.")]
		public LineRenderer lineRenderer;

		[Token(Token = "0x6000EFE")]
		[Address(RVA = "0xD94B54", Offset = "0xD94B54", VA = "0xD94B54")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EFF")]
		[Address(RVA = "0xD94ECC", Offset = "0xD94ECC", VA = "0xD94ECC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000F00")]
		[Address(RVA = "0xD94ED0", Offset = "0xD94ED0", VA = "0xD94ED0")]
		private void updateUITransforms()
		{
		}

		[Token(Token = "0x6000F01")]
		[Address(RVA = "0xD94F60", Offset = "0xD94F60", VA = "0xD94F60")]
		public void Update()
		{
		}

		[Token(Token = "0x6000F02")]
		[Address(RVA = "0xD94F6C", Offset = "0xD94F6C", VA = "0xD94F6C", Slot = "4")]
		public virtual void UpdatePointer()
		{
		}

		[Token(Token = "0x6000F03")]
		[Address(RVA = "0xD95540", Offset = "0xD95540", VA = "0xD95540", Slot = "5")]
		public virtual void HidePointer()
		{
		}

		[Token(Token = "0x6000F04")]
		[Address(RVA = "0xD956B8", Offset = "0xD956B8", VA = "0xD956B8")]
		public UIPointer()
		{
		}
	}
	[Token(Token = "0x200025E")]
	[RequireComponent(typeof(Canvas))]
	[RequireComponent(typeof(GraphicRaycaster))]
	public class VRCanvas : MonoBehaviour
	{
		[Token(Token = "0x6000F05")]
		[Address(RVA = "0xD956F4", Offset = "0xD956F4", VA = "0xD956F4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F06")]
		[Address(RVA = "0xD95764", Offset = "0xD95764", VA = "0xD95764")]
		public VRCanvas()
		{
		}
	}
	[Token(Token = "0x200025F")]
	public class VRKeyboard : MonoBehaviour
	{
		[Token(Token = "0x2000260")]
		[CompilerGenerated]
		private sealed class <IncreaseInputFieldCareteRoutine>d__11 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400116D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400116E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400116F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRKeyboard <>4__this;

			[Token(Token = "0x17000142")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F15")]
				[Address(RVA = "0xD9605C", Offset = "0xD9605C", VA = "0xD9605C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000143")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F17")]
				[Address(RVA = "0xD960A4", Offset = "0xD960A4", VA = "0xD960A4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F12")]
			[Address(RVA = "0xD95F20", Offset = "0xD95F20", VA = "0xD95F20")]
			[DebuggerHidden]
			public <IncreaseInputFieldCareteRoutine>d__11(int <>1__state)
			{
			}

			[Token(Token = "0x6000F13")]
			[Address(RVA = "0xD95F80", Offset = "0xD95F80", VA = "0xD95F80", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F14")]
			[Address(RVA = "0xD95F84", Offset = "0xD95F84", VA = "0xD95F84", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F16")]
			[Address(RVA = "0xD96064", Offset = "0xD96064", VA = "0xD96064", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000261")]
		[CompilerGenerated]
		private sealed class <DecreaseInputFieldCareteRoutine>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001170")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001171")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001172")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VRKeyboard <>4__this;

			[Token(Token = "0x17000144")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F1B")]
				[Address(RVA = "0xD96188", Offset = "0xD96188", VA = "0xD96188", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000145")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F1D")]
				[Address(RVA = "0xD961D0", Offset = "0xD961D0", VA = "0xD961D0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F18")]
			[Address(RVA = "0xD95F48", Offset = "0xD95F48", VA = "0xD95F48")]
			[DebuggerHidden]
			public <DecreaseInputFieldCareteRoutine>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x6000F19")]
			[Address(RVA = "0xD960AC", Offset = "0xD960AC", VA = "0xD960AC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F1A")]
			[Address(RVA = "0xD960B0", Offset = "0xD960B0", VA = "0xD960B0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F1C")]
			[Address(RVA = "0xD96190", Offset = "0xD96190", VA = "0xD96190", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InputField AttachedInputField;

		[Token(Token = "0x400116A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool UseShift;

		[Token(Token = "0x400116B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Sound FX")]
		public AudioClip KeyPressSound;

		[Token(Token = "0x400116C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<VRKeyboardKey> KeyboardKeys;

		[Token(Token = "0x6000F07")]
		[Address(RVA = "0xD9576C", Offset = "0xD9576C", VA = "0xD9576C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F08")]
		[Address(RVA = "0xD957F0", Offset = "0xD957F0", VA = "0xD957F0")]
		public void PressKey(string key)
		{
		}

		[Token(Token = "0x6000F09")]
		[Address(RVA = "0xD958D4", Offset = "0xD958D4", VA = "0xD958D4")]
		public void UpdateInputField(string key)
		{
		}

		[Token(Token = "0x6000F0A")]
		[Address(RVA = "0xD95D84", Offset = "0xD95D84", VA = "0xD95D84", Slot = "4")]
		public virtual void PlayClickSound()
		{
		}

		[Token(Token = "0x6000F0B")]
		[Address(RVA = "0xD95D64", Offset = "0xD95D64", VA = "0xD95D64")]
		public void MoveCaretUp()
		{
		}

		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0xD95B9C", Offset = "0xD95B9C", VA = "0xD95B9C")]
		public void MoveCaretBack()
		{
		}

		[Token(Token = "0x6000F0D")]
		[Address(RVA = "0xD95BBC", Offset = "0xD95BBC", VA = "0xD95BBC")]
		public void ToggleShift()
		{
		}

		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0xD95E38", Offset = "0xD95E38", VA = "0xD95E38")]
		[IteratorStateMachine(typeof(<IncreaseInputFieldCareteRoutine>d__11))]
		private IEnumerator IncreaseInputFieldCareteRoutine()
		{
			return null;
		}

		[Token(Token = "0x6000F0F")]
		[Address(RVA = "0xD95EAC", Offset = "0xD95EAC", VA = "0xD95EAC")]
		[IteratorStateMachine(typeof(<DecreaseInputFieldCareteRoutine>d__12))]
		private IEnumerator DecreaseInputFieldCareteRoutine()
		{
			return null;
		}

		[Token(Token = "0x6000F10")]
		[Address(RVA = "0xD95F70", Offset = "0xD95F70", VA = "0xD95F70")]
		public void AttachToInputField(InputField inputField)
		{
		}

		[Token(Token = "0x6000F11")]
		[Address(RVA = "0xD95F78", Offset = "0xD95F78", VA = "0xD95F78")]
		public VRKeyboard()
		{
		}
	}
	[Token(Token = "0x2000262")]
	public class VRKeyboardKey : MonoBehaviour
	{
		[Token(Token = "0x4001173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private UnityEngine.UI.Button thisButton;

		[Token(Token = "0x4001174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Text thisButtonText;

		[Token(Token = "0x4001175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private VRKeyboard vrKeyboard;

		[Token(Token = "0x4001176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string Keycode;

		[Token(Token = "0x4001177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string KeycodeShift;

		[Token(Token = "0x4001178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public bool UseShiftKey;

		[Token(Token = "0x6000F1E")]
		[Address(RVA = "0xD961D8", Offset = "0xD961D8", VA = "0xD961D8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F1F")]
		[Address(RVA = "0xD96334", Offset = "0xD96334", VA = "0xD96334", Slot = "4")]
		public virtual void ToggleShift()
		{
		}

		[Token(Token = "0x6000F20")]
		[Address(RVA = "0xD963FC", Offset = "0xD963FC", VA = "0xD963FC", Slot = "5")]
		public virtual void OnKeyHit()
		{
		}

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0xD96444", Offset = "0xD96444", VA = "0xD96444", Slot = "6")]
		public virtual void OnKeyHit(string key)
		{
		}

		[Token(Token = "0x6000F22")]
		[Address(RVA = "0xD96548", Offset = "0xD96548", VA = "0xD96548")]
		public VRKeyboardKey()
		{
		}
	}
	[Token(Token = "0x2000263")]
	public class VRTextInput : MonoBehaviour
	{
		[Token(Token = "0x4001179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private InputField thisInputField;

		[Token(Token = "0x400117A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool AttachToVRKeyboard;

		[Token(Token = "0x400117B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool ActivateKeyboardOnSelect;

		[Token(Token = "0x400117C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool DeactivateKeyboardOnDeselect;

		[Token(Token = "0x400117D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public VRKeyboard AttachedKeyboard;

		[Token(Token = "0x400117E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool isFocused;

		[Token(Token = "0x400117F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool wasFocused;

		[Token(Token = "0x6000F23")]
		[Address(RVA = "0xD96550", Offset = "0xD96550", VA = "0xD96550")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F24")]
		[Address(RVA = "0xD9663C", Offset = "0xD9663C", VA = "0xD9663C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F25")]
		[Address(RVA = "0xD966FC", Offset = "0xD966FC", VA = "0xD966FC")]
		public void OnInputSelect()
		{
		}

		[Token(Token = "0x6000F26")]
		[Address(RVA = "0xD967CC", Offset = "0xD967CC", VA = "0xD967CC")]
		public void OnInputDeselect()
		{
		}

		[Token(Token = "0x6000F27")]
		[Address(RVA = "0xD96888", Offset = "0xD96888", VA = "0xD96888")]
		private void Reset()
		{
		}

		[Token(Token = "0x6000F28")]
		[Address(RVA = "0xD9699C", Offset = "0xD9699C", VA = "0xD9699C")]
		public VRTextInput()
		{
		}
	}
	[Token(Token = "0x2000264")]
	public class VRUISystem : BaseInputModule
	{
		[Token(Token = "0x4001180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("XR Controller Options : ")]
		[Tooltip("This setting determines if LeftPointerTransform or RightPointerTransform will be used as a forward vector for World Space UI events")]
		public ControllerHand SelectedHand;

		[Token(Token = "0x4001181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("A transform on the left controller to use when raycasting for world space UI events")]
		public Transform LeftPointerTransform;

		[Token(Token = "0x4001182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("A transform on the right controller to use when raycasting for world space UI events")]
		public Transform RightPointerTransform;

		[Token(Token = "0x4001183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Controller Binding to use for input down, up, etc.")]
		public List<ControllerBinding> ControllerInput;

		[Token(Token = "0x4001184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Unity Input Action used to simulate a click or touch event")]
		public InputActionReference UIInputAction;

		[Token(Token = "0x4001185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("If true a PhysicsRaycaster component will be added to the UI camera, allowing physical objects to use IPointer events such as OnPointClick, OnPointEnter, etc.")]
		public bool AddPhysicsRaycaster;

		[Token(Token = "0x4001186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public LayerMask PhysicsRaycasterEventMask;

		[Token(Token = "0x4001187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("If true the Right Thumbstick will send scroll events to the UI")]
		public bool RightThumbstickScroll;

		[Token(Token = "0x4001188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Header("Shown for Debug : ")]
		public GameObject PressingObject;

		[Token(Token = "0x4001189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public GameObject DraggingObject;

		[Token(Token = "0x400118A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public GameObject ReleasingObject;

		[Token(Token = "0x400118C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Camera cameraCaster;

		[Token(Token = "0x400118D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private GameObject _initialPressObject;

		[Token(Token = "0x400118E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool _lastInputDown;

		[Token(Token = "0x400118F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
		private bool inputDown;

		[Token(Token = "0x4001190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static VRUISystem _instance;

		[Token(Token = "0x17000146")]
		public PointerEventData EventData
		{
			[Token(Token = "0x6000F29")]
			[Address(RVA = "0xD969AC", Offset = "0xD969AC", VA = "0xD969AC")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000F2A")]
			[Address(RVA = "0xD969B4", Offset = "0xD969B4", VA = "0xD969B4")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000147")]
		public static VRUISystem Instance
		{
			[Token(Token = "0x6000F2B")]
			[Address(RVA = "0xD94CCC", Offset = "0xD94CCC", VA = "0xD94CCC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F2C")]
		[Address(RVA = "0xD969BC", Offset = "0xD969BC", VA = "0xD969BC", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000F2D")]
		[Address(RVA = "0xD969CC", Offset = "0xD969CC", VA = "0xD969CC", Slot = "27")]
		protected virtual void initEventSystem()
		{
		}

		[Token(Token = "0x6000F2E")]
		[Address(RVA = "0xD96ACC", Offset = "0xD96ACC", VA = "0xD96ACC", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000F2F")]
		[Address(RVA = "0xD96AF8", Offset = "0xD96AF8", VA = "0xD96AF8")]
		private void init()
		{
		}

		[Token(Token = "0x6000F30")]
		[Address(RVA = "0xD96C80", Offset = "0xD96C80", VA = "0xD96C80", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x6000F31")]
		[Address(RVA = "0xD96C84", Offset = "0xD96C84", VA = "0xD96C84")]
		public void DoProcess()
		{
		}

		[Token(Token = "0x6000F32")]
		[Address(RVA = "0xD97054", Offset = "0xD97054", VA = "0xD97054", Slot = "28")]
		public virtual bool InputReady()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F33")]
		[Address(RVA = "0xD971CC", Offset = "0xD971CC", VA = "0xD971CC", Slot = "29")]
		public virtual bool CameraCasterReady()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F34")]
		[Address(RVA = "0xD97264", Offset = "0xD97264", VA = "0xD97264", Slot = "30")]
		public virtual void PressDown()
		{
		}

		[Token(Token = "0x6000F35")]
		[Address(RVA = "0xD974A0", Offset = "0xD974A0", VA = "0xD974A0", Slot = "31")]
		public virtual void Press()
		{
		}

		[Token(Token = "0x6000F36")]
		[Address(RVA = "0xD9767C", Offset = "0xD9767C", VA = "0xD9767C", Slot = "32")]
		public virtual void Release()
		{
		}

		[Token(Token = "0x6000F37")]
		[Address(RVA = "0xD978D8", Offset = "0xD978D8", VA = "0xD978D8", Slot = "33")]
		public virtual void ClearAll()
		{
		}

		[Token(Token = "0x6000F38")]
		[Address(RVA = "0xD97954", Offset = "0xD97954", VA = "0xD97954", Slot = "34")]
		public virtual void SetPressingObject(GameObject pressing)
		{
		}

		[Token(Token = "0x6000F39")]
		[Address(RVA = "0xD97990", Offset = "0xD97990", VA = "0xD97990", Slot = "35")]
		public virtual void SetDraggingObject(GameObject dragging)
		{
		}

		[Token(Token = "0x6000F3A")]
		[Address(RVA = "0xD979CC", Offset = "0xD979CC", VA = "0xD979CC", Slot = "36")]
		public virtual void SetReleasingObject(GameObject releasing)
		{
		}

		[Token(Token = "0x6000F3B")]
		[Address(RVA = "0xD979D4", Offset = "0xD979D4", VA = "0xD979D4", Slot = "37")]
		public virtual void AssignCameraToAllCanvases(Camera cam)
		{
		}

		[Token(Token = "0x6000F3C")]
		[Address(RVA = "0xD97AA8", Offset = "0xD97AA8", VA = "0xD97AA8", Slot = "38")]
		public virtual void AddCanvas(Canvas canvas)
		{
		}

		[Token(Token = "0x6000F3D")]
		[Address(RVA = "0xD97ABC", Offset = "0xD97ABC", VA = "0xD97ABC", Slot = "39")]
		public virtual void AddCanvasToCamera(Canvas canvas, Camera cam)
		{
		}

		[Token(Token = "0x6000F3E")]
		[Address(RVA = "0xD97B50", Offset = "0xD97B50", VA = "0xD97B50", Slot = "40")]
		public virtual void UpdateControllerHand(ControllerHand hand)
		{
		}

		[Token(Token = "0x6000F3F")]
		[Address(RVA = "0xD97CF8", Offset = "0xD97CF8", VA = "0xD97CF8")]
		public VRUISystem()
		{
		}
	}
	[Token(Token = "0x2000265")]
	public class DestroyIfPlayMode : MonoBehaviour
	{
		[Token(Token = "0x6000F40")]
		[Address(RVA = "0xD97E00", Offset = "0xD97E00", VA = "0xD97E00")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F41")]
		[Address(RVA = "0xD97EB0", Offset = "0xD97EB0", VA = "0xD97EB0")]
		public DestroyIfPlayMode()
		{
		}
	}
	[Token(Token = "0x2000266")]
	public class VRUtils : MonoBehaviour
	{
		[Token(Token = "0x4001191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static VRUtils _instance;

		[Token(Token = "0x4001192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color LogTextColor;

		[Token(Token = "0x4001193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Color WarnTextColor;

		[Token(Token = "0x4001194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color ErrTextColor;

		[Token(Token = "0x4001195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform DebugTextHolder;

		[Token(Token = "0x4001196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float MaxTextEntries;

		[Token(Token = "0x4001197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public string LastDebugMsg;

		[Token(Token = "0x4001198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int lastDebugMsgCount;

		[Token(Token = "0x17000148")]
		public static VRUtils Instance
		{
			[Token(Token = "0x6000F42")]
			[Address(RVA = "0xD8C7A4", Offset = "0xD8C7A4", VA = "0xD8C7A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F43")]
		[Address(RVA = "0xD97EB8", Offset = "0xD97EB8", VA = "0xD97EB8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F44")]
		[Address(RVA = "0xD97FB4", Offset = "0xD97FB4", VA = "0xD97FB4")]
		public void Log(string msg)
		{
		}

		[Token(Token = "0x6000F45")]
		[Address(RVA = "0xD9850C", Offset = "0xD9850C", VA = "0xD9850C")]
		public void Warn(string msg)
		{
		}

		[Token(Token = "0x6000F46")]
		[Address(RVA = "0xD9859C", Offset = "0xD9859C", VA = "0xD9859C")]
		public void Error(string msg)
		{
		}

		[Token(Token = "0x6000F47")]
		[Address(RVA = "0xD98044", Offset = "0xD98044", VA = "0xD98044")]
		public void VRDebugLog(string msg, Color logColor)
		{
		}

		[Token(Token = "0x6000F48")]
		[Address(RVA = "0xD9862C", Offset = "0xD9862C", VA = "0xD9862C")]
		public void CullDebugPanel()
		{
		}

		[Token(Token = "0x6000F49")]
		[Address(RVA = "0xD8C918", Offset = "0xD8C918", VA = "0xD8C918")]
		public AudioSource PlaySpatialClipAt(AudioClip clip, Vector3 pos, float volume, float spatialBlend = 1f, float randomizePitch = 0f)
		{
			return null;
		}

		[Token(Token = "0x6000F4A")]
		[Address(RVA = "0xD986F4", Offset = "0xD986F4", VA = "0xD986F4")]
		private float getRandomizedPitch(float randomAmount)
		{
			return default(float);
		}

		[Token(Token = "0x6000F4B")]
		[Address(RVA = "0xD98738", Offset = "0xD98738", VA = "0xD98738")]
		public VRUtils()
		{
		}
	}
	[Token(Token = "0x2000267")]
	public class AmmoDispenser : MonoBehaviour
	{
		[Token(Token = "0x4001199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Grabber LeftGrabber;

		[Token(Token = "0x400119A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabber RightGrabber;

		[Token(Token = "0x400119B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject AmmoDispenserObject;

		[Token(Token = "0x400119C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject PistolClip;

		[Token(Token = "0x400119D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject ShotgunShell;

		[Token(Token = "0x400119E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject RifleClip;

		[Token(Token = "0x400119F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int CurrentPistolClips;

		[Token(Token = "0x40011A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public int CurrentRifleClips;

		[Token(Token = "0x40011A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int CurrentShotgunShells;

		[Token(Token = "0x6000F4C")]
		[Address(RVA = "0xD9876C", Offset = "0xD9876C", VA = "0xD9876C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F4D")]
		[Address(RVA = "0xD987E0", Offset = "0xD987E0", VA = "0xD987E0")]
		private bool grabberHasWeapon(Grabber g)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F4E")]
		[Address(RVA = "0xD9891C", Offset = "0xD9891C", VA = "0xD9891C")]
		public GameObject GetAmmo()
		{
			return null;
		}

		[Token(Token = "0x6000F4F")]
		[Address(RVA = "0xD98C44", Offset = "0xD98C44", VA = "0xD98C44")]
		public void GrabAmmo(Grabber grabber)
		{
		}

		[Token(Token = "0x6000F50")]
		[Address(RVA = "0xD98EE4", Offset = "0xD98EE4", VA = "0xD98EE4", Slot = "4")]
		public virtual void AddAmmo(string AmmoName)
		{
		}

		[Token(Token = "0x6000F51")]
		[Address(RVA = "0xD98FC0", Offset = "0xD98FC0", VA = "0xD98FC0")]
		public AmmoDispenser()
		{
		}
	}
	[Token(Token = "0x2000268")]
	public class AmmoDisplay : MonoBehaviour
	{
		[Token(Token = "0x40011A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RaycastWeapon Weapon;

		[Token(Token = "0x40011A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text AmmoLabel;

		[Token(Token = "0x6000F52")]
		[Address(RVA = "0xD98FD8", Offset = "0xD98FD8", VA = "0xD98FD8")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6000F53")]
		[Address(RVA = "0xD990BC", Offset = "0xD990BC", VA = "0xD990BC")]
		public AmmoDisplay()
		{
		}
	}
	[Token(Token = "0x2000269")]
	public class Bullet : MonoBehaviour
	{
		[Token(Token = "0x6000F54")]
		[Address(RVA = "0xD990C4", Offset = "0xD990C4", VA = "0xD990C4")]
		public Bullet()
		{
		}
	}
	[Token(Token = "0x200026A")]
	public class BulletInsert : MonoBehaviour
	{
		[Token(Token = "0x40011A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RaycastWeapon Weapon;

		[Token(Token = "0x40011A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string AcceptBulletName;

		[Token(Token = "0x40011A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip InsertSound;

		[Token(Token = "0x6000F55")]
		[Address(RVA = "0xD990CC", Offset = "0xD990CC", VA = "0xD990CC")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000F56")]
		[Address(RVA = "0xD99314", Offset = "0xD99314", VA = "0xD99314")]
		public BulletInsert()
		{
		}
	}
	[Token(Token = "0x200026B")]
	public class MagazineSlide : MonoBehaviour
	{
		[Token(Token = "0x200026C")]
		[CompilerGenerated]
		private sealed class <EjectMagRoutine>d__23 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40011B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Grabbable ejectedMag;

			[Token(Token = "0x40011B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MagazineSlide <>4__this;

			[Token(Token = "0x17000149")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F67")]
				[Address(RVA = "0xD9A744", Offset = "0xD9A744", VA = "0xD9A744", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700014A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F69")]
				[Address(RVA = "0xD9A78C", Offset = "0xD9A78C", VA = "0xD9A78C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F64")]
			[Address(RVA = "0xD9A218", Offset = "0xD9A218", VA = "0xD9A218")]
			[DebuggerHidden]
			public <EjectMagRoutine>d__23(int <>1__state)
			{
			}

			[Token(Token = "0x6000F65")]
			[Address(RVA = "0xD9A4BC", Offset = "0xD9A4BC", VA = "0xD9A4BC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F66")]
			[Address(RVA = "0xD9A4C0", Offset = "0xD9A4C0", VA = "0xD9A4C0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F68")]
			[Address(RVA = "0xD9A74C", Offset = "0xD9A74C", VA = "0xD9A74C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40011A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Clip transform name must contain this to be considered valid")]
		public string AcceptableMagazineName;

		[Token(Token = "0x40011A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabbable AttachedWeapon;

		[Token(Token = "0x40011A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float ClipSnapDistance;

		[Token(Token = "0x40011AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float ClipUnsnapDistance;

		[Token(Token = "0x40011AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float EjectForce;

		[Token(Token = "0x40011AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Grabbable HeldMagazine;

		[Token(Token = "0x40011AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Collider HeldCollider;

		[Token(Token = "0x40011AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float MagazineDistance;

		[Token(Token = "0x40011AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool magazineInPlace;

		[Token(Token = "0x40011B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		private bool lockedInPlace;

		[Token(Token = "0x40011B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AudioClip ClipAttachSound;

		[Token(Token = "0x40011B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AudioClip ClipDetachSound;

		[Token(Token = "0x40011B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private RaycastWeapon parentWeapon;

		[Token(Token = "0x40011B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GrabberArea grabClipArea;

		[Token(Token = "0x40011B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float lastEjectTime;

		[Token(Token = "0x6000F57")]
		[Address(RVA = "0xD9936C", Offset = "0xD9936C", VA = "0xD9936C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F58")]
		[Address(RVA = "0xD994DC", Offset = "0xD994DC", VA = "0xD994DC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000F59")]
		[Address(RVA = "0xD99AC4", Offset = "0xD99AC4", VA = "0xD99AC4")]
		private bool recentlyEjected()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F5A")]
		[Address(RVA = "0xD99A74", Offset = "0xD99A74", VA = "0xD99A74")]
		private void moveMagazine(Vector3 localPosition)
		{
		}

		[Token(Token = "0x6000F5B")]
		[Address(RVA = "0xD998B0", Offset = "0xD998B0", VA = "0xD998B0")]
		public void CheckGrabClipInput()
		{
		}

		[Token(Token = "0x6000F5C")]
		[Address(RVA = "0xD99AF4", Offset = "0xD99AF4", VA = "0xD99AF4")]
		private void attachMagazine()
		{
		}

		[Token(Token = "0x6000F5D")]
		[Address(RVA = "0xD99DA4", Offset = "0xD99DA4", VA = "0xD99DA4")]
		private Grabbable detachMagazine()
		{
			return null;
		}

		[Token(Token = "0x6000F5E")]
		[Address(RVA = "0xD9A144", Offset = "0xD9A144", VA = "0xD9A144")]
		public void EjectMagazine()
		{
		}

		[Token(Token = "0x6000F5F")]
		[Address(RVA = "0xD9A188", Offset = "0xD9A188", VA = "0xD9A188")]
		[IteratorStateMachine(typeof(<EjectMagRoutine>d__23))]
		private IEnumerator EjectMagRoutine(Grabbable ejectedMag)
		{
			return null;
		}

		[Token(Token = "0x6000F60")]
		[Address(RVA = "0xD9A078", Offset = "0xD9A078", VA = "0xD9A078")]
		public void OnGrabClipArea(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x6000F61")]
		[Address(RVA = "0xD9A240", Offset = "0xD9A240", VA = "0xD9A240", Slot = "4")]
		public virtual void AttachGrabbableMagazine(Grabbable mag, Collider magCollider)
		{
		}

		[Token(Token = "0x6000F62")]
		[Address(RVA = "0xD9A334", Offset = "0xD9A334", VA = "0xD9A334")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000F63")]
		[Address(RVA = "0xD9A450", Offset = "0xD9A450", VA = "0xD9A450")]
		public MagazineSlide()
		{
		}
	}
	[Token(Token = "0x200026D")]
	public class Projectile : MonoBehaviour
	{
		[Token(Token = "0x200026E")]
		[CompilerGenerated]
		private sealed class <CheckForRaycast>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40011C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Projectile <>4__this;

			[Token(Token = "0x1700014B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F74")]
				[Address(RVA = "0xD9C0D0", Offset = "0xD9C0D0", VA = "0xD9C0D0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700014C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F76")]
				[Address(RVA = "0xD9C118", Offset = "0xD9C118", VA = "0xD9C118", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F71")]
			[Address(RVA = "0xD9BFC4", Offset = "0xD9BFC4", VA = "0xD9BFC4")]
			[DebuggerHidden]
			public <CheckForRaycast>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6000F72")]
			[Address(RVA = "0xD9BFEC", Offset = "0xD9BFEC", VA = "0xD9BFEC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F73")]
			[Address(RVA = "0xD9BFF0", Offset = "0xD9BFF0", VA = "0xD9BFF0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F75")]
			[Address(RVA = "0xD9C0D8", Offset = "0xD9C0D8", VA = "0xD9C0D8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40011BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject HitFXPrefab;

		[Token(Token = "0x40011BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool _checkRaycast;

		[Token(Token = "0x40011BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float Damage;

		[Token(Token = "0x40011BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float AddRigidForce;

		[Token(Token = "0x40011BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask ValidLayers;

		[Token(Token = "0x40011BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool StickToObject;

		[Token(Token = "0x40011C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float MinForceHit;

		[Token(Token = "0x40011C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Unity Event called when the projectile damages something")]
		public UnityEvent onDealtDamageEvent;

		[Token(Token = "0x6000F6A")]
		[Address(RVA = "0xD9A794", Offset = "0xD9A794", VA = "0xD9A794")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6000F6B")]
		[Address(RVA = "0xD9A7A0", Offset = "0xD9A7A0", VA = "0xD9A7A0", Slot = "4")]
		public virtual void OnCollisionEvent(Collision collision)
		{
		}

		[Token(Token = "0x6000F6C")]
		[Address(RVA = "0xD9AB28", Offset = "0xD9AB28", VA = "0xD9AB28", Slot = "5")]
		public virtual void DoHitFX(Vector3 pos, Quaternion rot, Collider col)
		{
		}

		[Token(Token = "0x6000F6D")]
		[Address(RVA = "0xD9AD0C", Offset = "0xD9AD0C", VA = "0xD9AD0C", Slot = "6")]
		public virtual void MarkAsRaycastBullet()
		{
		}

		[Token(Token = "0x6000F6E")]
		[Address(RVA = "0xD9ADA8", Offset = "0xD9ADA8", VA = "0xD9ADA8", Slot = "7")]
		public virtual void DoRayCastProjectile()
		{
		}

		[Token(Token = "0x6000F6F")]
		[Address(RVA = "0xD9AD34", Offset = "0xD9AD34", VA = "0xD9AD34")]
		[IteratorStateMachine(typeof(<CheckForRaycast>d__13))]
		private IEnumerator CheckForRaycast()
		{
			return null;
		}

		[Token(Token = "0x6000F70")]
		[Address(RVA = "0xD9AFA4", Offset = "0xD9AFA4", VA = "0xD9AFA4")]
		public Projectile()
		{
		}
	}
	[Token(Token = "0x200026F")]
	public class RaycastWeapon : GrabbableEvents
	{
		[Token(Token = "0x2000270")]
		[CompilerGenerated]
		private sealed class <doMuzzleFlash>d__74 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40011FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RaycastWeapon <>4__this;

			[Token(Token = "0x1700014D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F92")]
				[Address(RVA = "0xD9DEE4", Offset = "0xD9DEE4", VA = "0xD9DEE4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700014E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F94")]
				[Address(RVA = "0xD9DF2C", Offset = "0xD9DF2C", VA = "0xD9DF2C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F8F")]
			[Address(RVA = "0xD9DA2C", Offset = "0xD9DA2C", VA = "0xD9DA2C")]
			[DebuggerHidden]
			public <doMuzzleFlash>d__74(int <>1__state)
			{
			}

			[Token(Token = "0x6000F90")]
			[Address(RVA = "0xD9DDAC", Offset = "0xD9DDAC", VA = "0xD9DDAC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F91")]
			[Address(RVA = "0xD9DDB0", Offset = "0xD9DDB0", VA = "0xD9DDB0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F93")]
			[Address(RVA = "0xD9DEEC", Offset = "0xD9DEEC", VA = "0xD9DEEC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000271")]
		[CompilerGenerated]
		private sealed class <animateSlideAndEject>d__75 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40011FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RaycastWeapon <>4__this;

			[Token(Token = "0x4001200")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <frames>5__2;

			[Token(Token = "0x4001201")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private bool <slideEndReached>5__3;

			[Token(Token = "0x4001202")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 <slideDestination>5__4;

			[Token(Token = "0x4001203")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private bool <slideBeginningReached>5__5;

			[Token(Token = "0x1700014F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F98")]
				[Address(RVA = "0xD9E690", Offset = "0xD9E690", VA = "0xD9E690", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000150")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F9A")]
				[Address(RVA = "0xD9E6D8", Offset = "0xD9E6D8", VA = "0xD9E6D8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F95")]
			[Address(RVA = "0xD9DAC8", Offset = "0xD9DAC8", VA = "0xD9DAC8")]
			[DebuggerHidden]
			public <animateSlideAndEject>d__75(int <>1__state)
			{
			}

			[Token(Token = "0x6000F96")]
			[Address(RVA = "0xD9DF34", Offset = "0xD9DF34", VA = "0xD9DF34", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F97")]
			[Address(RVA = "0xD9DF38", Offset = "0xD9DF38", VA = "0xD9DF38", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F99")]
			[Address(RVA = "0xD9E698", Offset = "0xD9E698", VA = "0xD9E698", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40011C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("General : ")]
		public float MaxRange;

		[Token(Token = "0x40011C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float Damage;

		[Token(Token = "0x40011C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Semi requires user to press trigger repeatedly, Auto to hold down")]
		public FiringType FiringMethod;

		[Token(Token = "0x40011C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public ReloadType ReloadMethod;

		[Token(Token = "0x40011C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Ex : 0.2 = 5 Shots per second")]
		public float FiringRate;

		[Token(Token = "0x40011CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float lastShotTime;

		[Token(Token = "0x40011CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Amount of force to apply to a Rigidbody once damaged")]
		public float BulletImpactForce;

		[Token(Token = "0x40011CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Current Internal Ammo if you are keeping track of ammo yourself. Firing will deduct from this number. Reloading will cause this to equal MaxInternalAmmo.")]
		public float InternalAmmo;

		[Token(Token = "0x40011CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Maximum amount of internal ammo this weapon can hold. Does not account for attached clips.  For example, a shotgun has internal ammo")]
		public float MaxInternalAmmo;

		[Token(Token = "0x40011CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("Set true to automatically chamber a new round on fire. False to require charging. Example : Bolt-Action Rifle does not auto chamber. ")]
		public bool AutoChamberRounds;

		[Token(Token = "0x40011CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		[Tooltip("Does it matter if rounds are chambered or not. Does the user have to charge weapon as soon as ammo is inserted")]
		public bool MustChamberRounds;

		[Token(Token = "0x40011D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
		[Header("Projectile Settings : ")]
		[Tooltip("If true a projectile will always be used instead of a raycast")]
		public bool AlwaysFireProjectile;

		[Token(Token = "0x40011D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x57")]
		[Tooltip("If true the ProjectilePrefab will be instantiated during slowmo instead of using a raycast.")]
		public bool FireProjectileInSlowMo;

		[Token(Token = "0x40011D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("How fast to fire the weapon during slowmo. Keep in mind this is affected by Time.timeScale")]
		public float SlowMoRateOfFire;

		[Token(Token = "0x40011D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Amount of force to apply to Projectile")]
		public float ShotForce;

		[Token(Token = "0x40011D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Amount of force to apply to the BulletCasingPrefab object")]
		public float BulletCasingForce;

		[Token(Token = "0x40011D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Header("Recoil : ")]
		[Tooltip("How much force to apply to the tip of the barrel")]
		public Vector3 RecoilForce;

		[Token(Token = "0x40011D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Time in seconds to allow the gun to be springy")]
		public float RecoilDuration;

		[Token(Token = "0x40011D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody weaponRigid;

		[Token(Token = "0x40011D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Header("Raycast Options : ")]
		public LayerMask ValidLayers;

		[Token(Token = "0x40011D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Header("Weapon Setup : ")]
		[Tooltip("Transform of trigger to animate rotation of")]
		public Transform TriggerTransform;

		[Token(Token = "0x40011DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Animate this back on fire")]
		public Transform SlideTransform;

		[Token(Token = "0x40011DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Where our raycast or projectile will start from.")]
		public Transform MuzzlePointTransform;

		[Token(Token = "0x40011DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Where to eject a bullet casing (optional)")]
		public Transform EjectPointTransform;

		[Token(Token = "0x40011DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Transform of Chambered Bullet inside the weapon. Hide this when no bullet is chambered. (Optional)")]
		public Transform ChamberedBullet;

		[Token(Token = "0x40011DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Make this active on fire. Randomize scale / rotation")]
		public GameObject MuzzleFlashObject;

		[Token(Token = "0x40011DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("Eject this at EjectPointTransform (optional)")]
		public GameObject BulletCasingPrefab;

		[Token(Token = "0x40011E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("If time is slowed this object will be instantiated at muzzle point instead of using a raycast")]
		public GameObject ProjectilePrefab;

		[Token(Token = "0x40011E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Hit Effects spawned at point of impact")]
		public GameObject HitFXPrefab;

		[Token(Token = "0x40011E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Play this sound on shoot")]
		public AudioClip GunShotSound;

		[Token(Token = "0x40011E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Range(0f, 1f)]
		[Tooltip("Volume to play the GunShotSound clip at. Range 0-1")]
		public float GunShotVolume;

		[Token(Token = "0x40011E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("Play this sound if no ammo and user presses trigger")]
		public AudioClip EmptySound;

		[Token(Token = "0x40011E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Range(0f, 1f)]
		[Tooltip("Volume to play the EmptySound clip at. Range 0-1")]
		public float EmptySoundVolume;

		[Token(Token = "0x40011E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[Tooltip("How far back to move the slide on fire")]
		[Header("Slide Configuration : ")]
		public float SlideDistance;

		[Token(Token = "0x40011E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("Should the slide be forced back if we shoot the last bullet")]
		public bool ForceSlideBackOnLastShot;

		[Token(Token = "0x40011E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[Tooltip("How fast to move back the slide on fire. Default : 1")]
		public float slideSpeed;

		[Token(Token = "0x40011E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private float minSlideDistance;

		[Token(Token = "0x40011EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("Controller Input used to eject clip")]
		[Header("Inputs : ")]
		public List<GrabbedControllerBinding> EjectInput;

		[Token(Token = "0x40011EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Tooltip("Controller Input used to release the charging mechanism.")]
		public List<GrabbedControllerBinding> ReleaseSlideInput;

		[Token(Token = "0x40011EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Tooltip("Controller Input used to release reload the weapon if ReloadMethod = InternalAmmo.")]
		public List<GrabbedControllerBinding> ReloadInput;

		[Token(Token = "0x40011ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[Tooltip("Is there currently a bullet chambered and ready to be fired")]
		[Header("Shown for Debug : ")]
		public bool BulletInChamber;

		[Token(Token = "0x40011EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x119")]
		[Tooltip("Is there currently a bullet chambered and that must be ejected")]
		public bool EmptyBulletInChamber;

		[Token(Token = "0x40011EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[Tooltip("Unity Event called when Shoot() method is successfully called")]
		[Header("Events")]
		public UnityEvent onShootEvent;

		[Token(Token = "0x40011F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[Tooltip("Unity Event called when something attaches ammo to the weapon")]
		public UnityEvent onAttachedAmmoEvent;

		[Token(Token = "0x40011F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[Tooltip("Unity Event called when something detaches ammo from the weapon")]
		public UnityEvent onDetachedAmmoEvent;

		[Token(Token = "0x40011F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[Tooltip("Unity Event called when the charging handle is successfully pulled back on the weapon")]
		public UnityEvent onWeaponChargedEvent;

		[Token(Token = "0x40011F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[Tooltip("Unity Event called when weapon damaged something")]
		public FloatEvent onDealtDamageEvent;

		[Token(Token = "0x40011F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[Tooltip("Passes along Raycast Hit info whenever a Raycast hit is successfully detected. Use this to display fx, add force, etc.")]
		public RaycastHitEvent onRaycastHitEvent;

		[Token(Token = "0x40011F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		protected bool slideForcedBack;

		[Token(Token = "0x40011F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		protected WeaponSlide ws;

		[Token(Token = "0x40011F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		protected bool readyToShoot;

		[Token(Token = "0x40011F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x161")]
		protected bool playedEmptySound;

		[Token(Token = "0x40011F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		protected IEnumerator shotRoutine;

		[Token(Token = "0x6000F77")]
		[Address(RVA = "0xD9C120", Offset = "0xD9C120", VA = "0xD9C120")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F78")]
		[Address(RVA = "0xD9C2B8", Offset = "0xD9C2B8", VA = "0xD9C2B8", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6000F79")]
		[Address(RVA = "0xD9C3F4", Offset = "0xD9C3F4", VA = "0xD9C3F4")]
		private void checkSlideInput()
		{
		}

		[Token(Token = "0x6000F7A")]
		[Address(RVA = "0xD9C4FC", Offset = "0xD9C4FC", VA = "0xD9C4FC")]
		private void checkEjectInput()
		{
		}

		[Token(Token = "0x6000F7B")]
		[Address(RVA = "0xD9C604", Offset = "0xD9C604", VA = "0xD9C604", Slot = "27")]
		public virtual void CheckReloadInput()
		{
		}

		[Token(Token = "0x6000F7C")]
		[Address(RVA = "0xD9C718", Offset = "0xD9C718", VA = "0xD9C718", Slot = "28")]
		public virtual void UnlockSlide()
		{
		}

		[Token(Token = "0x6000F7D")]
		[Address(RVA = "0xD9C7A0", Offset = "0xD9C7A0", VA = "0xD9C7A0", Slot = "29")]
		public virtual void EjectMagazine()
		{
		}

		[Token(Token = "0x6000F7E")]
		[Address(RVA = "0xD9C854", Offset = "0xD9C854", VA = "0xD9C854", Slot = "30")]
		public virtual void Shoot()
		{
		}

		[Token(Token = "0x6000F7F")]
		[Address(RVA = "0xD9CE64", Offset = "0xD9CE64", VA = "0xD9CE64", Slot = "31")]
		public virtual void ApplyRecoil()
		{
		}

		[Token(Token = "0x6000F80")]
		[Address(RVA = "0xD9CFDC", Offset = "0xD9CFDC", VA = "0xD9CFDC", Slot = "32")]
		public virtual void OnRaycastHit(RaycastHit hit)
		{
		}

		[Token(Token = "0x6000F81")]
		[Address(RVA = "0xD9D324", Offset = "0xD9D324", VA = "0xD9D324", Slot = "33")]
		public virtual void ApplyParticleFX(Vector3 position, Quaternion rotation, Collider attachTo)
		{
		}

		[Token(Token = "0x6000F82")]
		[Address(RVA = "0xD9D484", Offset = "0xD9D484", VA = "0xD9D484", Slot = "34")]
		public virtual void OnAttachedAmmo()
		{
		}

		[Token(Token = "0x6000F83")]
		[Address(RVA = "0xD9D4AC", Offset = "0xD9D4AC", VA = "0xD9D4AC", Slot = "35")]
		public virtual void OnDetachedAmmo()
		{
		}

		[Token(Token = "0x6000F84")]
		[Address(RVA = "0xD9D4D4", Offset = "0xD9D4D4", VA = "0xD9D4D4", Slot = "36")]
		public virtual int GetBulletCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000F85")]
		[Address(RVA = "0xD9D568", Offset = "0xD9D568", VA = "0xD9D568", Slot = "37")]
		public virtual void RemoveBullet()
		{
		}

		[Token(Token = "0x6000F86")]
		[Address(RVA = "0xD9D66C", Offset = "0xD9D66C", VA = "0xD9D66C", Slot = "38")]
		public virtual void Reload()
		{
		}

		[Token(Token = "0x6000F87")]
		[Address(RVA = "0xD9C20C", Offset = "0xD9C20C", VA = "0xD9C20C")]
		private void updateChamberedBullet()
		{
		}

		[Token(Token = "0x6000F88")]
		[Address(RVA = "0xD9CE18", Offset = "0xD9CE18", VA = "0xD9CE18")]
		private void chamberRound()
		{
		}

		[Token(Token = "0x6000F89")]
		[Address(RVA = "0xD9D678", Offset = "0xD9D678", VA = "0xD9D678")]
		private void randomizeMuzzleFlashScaleRotation()
		{
		}

		[Token(Token = "0x6000F8A")]
		[Address(RVA = "0xD9D760", Offset = "0xD9D760", VA = "0xD9D760", Slot = "39")]
		public virtual void OnWeaponCharged(bool allowCasingEject)
		{
		}

		[Token(Token = "0x6000F8B")]
		[Address(RVA = "0xD9D814", Offset = "0xD9D814", VA = "0xD9D814", Slot = "40")]
		protected virtual void ejectCasing()
		{
		}

		[Token(Token = "0x6000F8C")]
		[Address(RVA = "0xD9D9B8", Offset = "0xD9D9B8", VA = "0xD9D9B8", Slot = "41")]
		[IteratorStateMachine(typeof(<doMuzzleFlash>d__74))]
		protected virtual IEnumerator doMuzzleFlash()
		{
			return null;
		}

		[Token(Token = "0x6000F8D")]
		[Address(RVA = "0xD9DA54", Offset = "0xD9DA54", VA = "0xD9DA54", Slot = "42")]
		[IteratorStateMachine(typeof(<animateSlideAndEject>d__75))]
		protected virtual IEnumerator animateSlideAndEject()
		{
			return null;
		}

		[Token(Token = "0x6000F8E")]
		[Address(RVA = "0xD9DAF0", Offset = "0xD9DAF0", VA = "0xD9DAF0")]
		public RaycastWeapon()
		{
		}
	}
	[Token(Token = "0x2000272")]
	public enum FiringType
	{
		[Token(Token = "0x4001205")]
		Semi,
		[Token(Token = "0x4001206")]
		Automatic
	}
	[Token(Token = "0x2000273")]
	public enum ReloadType
	{
		[Token(Token = "0x4001208")]
		InfiniteAmmo,
		[Token(Token = "0x4001209")]
		ManualClip,
		[Token(Token = "0x400120A")]
		InternalAmmo
	}
	[Token(Token = "0x2000274")]
	public class WeaponSlide : MonoBehaviour
	{
		[Token(Token = "0x2000275")]
		[CompilerGenerated]
		private sealed class <UnlockSlideRoutine>d__27 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400121B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400121C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400121D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WeaponSlide <>4__this;

			[Token(Token = "0x17000151")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000FAC")]
				[Address(RVA = "0xD9F2C4", Offset = "0xD9F2C4", VA = "0xD9F2C4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000152")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000FAE")]
				[Address(RVA = "0xD9F30C", Offset = "0xD9F30C", VA = "0xD9F30C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000FA9")]
			[Address(RVA = "0xD9F1C0", Offset = "0xD9F1C0", VA = "0xD9F1C0")]
			[DebuggerHidden]
			public <UnlockSlideRoutine>d__27(int <>1__state)
			{
			}

			[Token(Token = "0x6000FAA")]
			[Address(RVA = "0xD9F208", Offset = "0xD9F208", VA = "0xD9F208", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000FAB")]
			[Address(RVA = "0xD9F20C", Offset = "0xD9F20C", VA = "0xD9F20C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000FAD")]
			[Address(RVA = "0xD9F2CC", Offset = "0xD9F2CC", VA = "0xD9F2CC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400120B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float MinLocalZ;

		[Token(Token = "0x400120C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float MaxLocalZ;

		[Token(Token = "0x400120D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool slidingBack;

		[Token(Token = "0x400120E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool LockedBack;

		[Token(Token = "0x400120F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip SlideReleaseSound;

		[Token(Token = "0x4001210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioClip LockedBackSound;

		[Token(Token = "0x4001211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool ZeroMassWhenNotHeld;

		[Token(Token = "0x4001212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RaycastWeapon parentWeapon;

		[Token(Token = "0x4001213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Grabbable parentGrabbable;

		[Token(Token = "0x4001214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 initialLocalPos;

		[Token(Token = "0x4001215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Grabbable thisGrabbable;

		[Token(Token = "0x4001216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private AudioSource audioSource;

		[Token(Token = "0x4001217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody rigid;

		[Token(Token = "0x4001218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float initialMass;

		[Token(Token = "0x4001219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector3 _lockPosition;

		[Token(Token = "0x400121A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool lockSlidePosition;

		[Token(Token = "0x6000F9B")]
		[Address(RVA = "0xD9E6E0", Offset = "0xD9E6E0", VA = "0xD9E6E0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F9C")]
		[Address(RVA = "0xD9E8E0", Offset = "0xD9E8E0", VA = "0xD9E8E0", Slot = "4")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000F9D")]
		[Address(RVA = "0xD9E998", Offset = "0xD9E998", VA = "0xD9E998", Slot = "5")]
		public virtual void OnDisable()
		{
		}

		[Token(Token = "0x6000F9E")]
		[Address(RVA = "0xD9EA50", Offset = "0xD9EA50", VA = "0xD9EA50")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F9F")]
		[Address(RVA = "0xD9ED08", Offset = "0xD9ED08", VA = "0xD9ED08")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000FA0")]
		[Address(RVA = "0xD9EDE4", Offset = "0xD9EDE4", VA = "0xD9EDE4", Slot = "6")]
		public virtual void LockBack()
		{
		}

		[Token(Token = "0x6000FA1")]
		[Address(RVA = "0xD9EE7C", Offset = "0xD9EE7C", VA = "0xD9EE7C", Slot = "7")]
		public virtual void UnlockBack()
		{
		}

		[Token(Token = "0x6000FA2")]
		[Address(RVA = "0xD9EBE8", Offset = "0xD9EBE8", VA = "0xD9EBE8")]
		private void onSlideBack()
		{
		}

		[Token(Token = "0x6000FA3")]
		[Address(RVA = "0xD9ECB0", Offset = "0xD9ECB0", VA = "0xD9ECB0")]
		private void onSlideForward()
		{
		}

		[Token(Token = "0x6000FA4")]
		[Address(RVA = "0xD9F0B8", Offset = "0xD9F0B8", VA = "0xD9F0B8", Slot = "8")]
		public virtual void LockSlidePosition()
		{
		}

		[Token(Token = "0x6000FA5")]
		[Address(RVA = "0xD9F11C", Offset = "0xD9F11C", VA = "0xD9F11C", Slot = "9")]
		public virtual void UnlockSlidePosition()
		{
		}

		[Token(Token = "0x6000FA6")]
		[Address(RVA = "0xD9F14C", Offset = "0xD9F14C", VA = "0xD9F14C")]
		[IteratorStateMachine(typeof(<UnlockSlideRoutine>d__27))]
		public IEnumerator UnlockSlideRoutine()
		{
			return null;
		}

		[Token(Token = "0x6000FA7")]
		[Address(RVA = "0xD9EF84", Offset = "0xD9EF84", VA = "0xD9EF84")]
		private void playSoundInterval(float fromSeconds, float toSeconds, float volume)
		{
		}

		[Token(Token = "0x6000FA8")]
		[Address(RVA = "0xD9F1E8", Offset = "0xD9F1E8", VA = "0xD9F1E8")]
		public WeaponSlide()
		{
		}
	}
}
namespace AmplitudeNS.MiniJSON
{
	[Token(Token = "0x2000276")]
	public static class Json
	{
		[Token(Token = "0x2000277")]
		private sealed class Parser : IDisposable
		{
			[Token(Token = "0x2000278")]
			private enum TOKEN
			{
				[Token(Token = "0x4001222")]
				NONE,
				[Token(Token = "0x4001223")]
				CURLY_OPEN,
				[Token(Token = "0x4001224")]
				CURLY_CLOSE,
				[Token(Token = "0x4001225")]
				SQUARED_OPEN,
				[Token(Token = "0x4001226")]
				SQUARED_CLOSE,
				[Token(Token = "0x4001227")]
				COLON,
				[Token(Token = "0x4001228")]
				COMMA,
				[Token(Token = "0x4001229")]
				STRING,
				[Token(Token = "0x400122A")]
				NUMBER,
				[Token(Token = "0x400122B")]
				TRUE,
				[Token(Token = "0x400122C")]
				FALSE,
				[Token(Token = "0x400122D")]
				NULL
			}

			[Token(Token = "0x400121E")]
			private const string WHITE_SPACE = " \t\n\r";

			[Token(Token = "0x400121F")]
			private const string WORD_BREAK = " \t\n\r{}[],:\"";

			[Token(Token = "0x4001220")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private StringReader json;

			[Token(Token = "0x17000153")]
			private char PeekChar
			{
				[Token(Token = "0x6000FBB")]
				[Address(RVA = "0xD9FFD4", Offset = "0xD9FFD4", VA = "0xD9FFD4")]
				get
				{
					return default(char);
				}
			}

			[Token(Token = "0x17000154")]
			private char NextChar
			{
				[Token(Token = "0x6000FBC")]
				[Address(RVA = "0xD9FDE8", Offset = "0xD9FDE8", VA = "0xD9FDE8")]
				get
				{
					return default(char);
				}
			}

			[Token(Token = "0x17000155")]
			private string NextWord
			{
				[Token(Token = "0x6000FBD")]
				[Address(RVA = "0xD9FE60", Offset = "0xD9FE60", VA = "0xD9FE60")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000156")]
			private TOKEN NextToken
			{
				[Token(Token = "0x6000FBE")]
				[Address(RVA = "0xD9F728", Offset = "0xD9F728", VA = "0xD9F728")]
				get
				{
					return default(TOKEN);
				}
			}

			[Token(Token = "0x6000FB1")]
			[Address(RVA = "0xD9F534", Offset = "0xD9F534", VA = "0xD9F534")]
			private Parser(string jsonString)
			{
			}

			[Token(Token = "0x6000FB2")]
			[Address(RVA = "0xD9F320", Offset = "0xD9F320", VA = "0xD9F320")]
			public static object Parse(string jsonString)
			{
				return null;
			}

			[Token(Token = "0x6000FB3")]
			[Address(RVA = "0xD9F5D4", Offset = "0xD9F5D4", VA = "0xD9F5D4", Slot = "4")]
			public void Dispose()
			{
			}

			[Token(Token = "0x6000FB4")]
			[Address(RVA = "0xD9F604", Offset = "0xD9F604", VA = "0xD9F604")]
			private Dictionary<string, object> ParseObject()
			{
				return null;
			}

			[Token(Token = "0x6000FB5")]
			[Address(RVA = "0xD9FB28", Offset = "0xD9FB28", VA = "0xD9FB28")]
			private List<object> ParseArray()
			{
				return null;
			}

			[Token(Token = "0x6000FB6")]
			[Address(RVA = "0xD9F5B8", Offset = "0xD9F5B8", VA = "0xD9F5B8")]
			private object ParseValue()
			{
				return null;
			}

			[Token(Token = "0x6000FB7")]
			[Address(RVA = "0xD9FC50", Offset = "0xD9FC50", VA = "0xD9FC50")]
			private object ParseByToken(TOKEN token)
			{
				return null;
			}

			[Token(Token = "0x6000FB8")]
			[Address(RVA = "0xD9F8EC", Offset = "0xD9F8EC", VA = "0xD9F8EC")]
			private string ParseString()
			{
				return null;
			}

			[Token(Token = "0x6000FB9")]
			[Address(RVA = "0xD9FD38", Offset = "0xD9FD38", VA = "0xD9FD38")]
			private object ParseNumber()
			{
				return null;
			}

			[Token(Token = "0x6000FBA")]
			[Address(RVA = "0xD9FF38", Offset = "0xD9FF38", VA = "0xD9FF38")]
			private void EatWhitespace()
			{
			}
		}

		[Token(Token = "0x2000279")]
		private sealed class Serializer
		{
			[Token(Token = "0x400122E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private StringBuilder builder;

			[Token(Token = "0x6000FBF")]
			[Address(RVA = "0xDA004C", Offset = "0xDA004C", VA = "0xDA004C")]
			private Serializer()
			{
			}

			[Token(Token = "0x6000FC0")]
			[Address(RVA = "0xD9F4C0", Offset = "0xD9F4C0", VA = "0xD9F4C0")]
			public static string Serialize(object obj)
			{
				return null;
			}

			[Token(Token = "0x6000FC1")]
			[Address(RVA = "0xDA00C0", Offset = "0xDA00C0", VA = "0xDA00C0")]
			private void SerializeValue(object value)
			{
			}

			[Token(Token = "0x6000FC2")]
			[Address(RVA = "0xDA0878", Offset = "0xDA0878", VA = "0xDA0878")]
			private void SerializeObject(IDictionary obj)
			{
			}

			[Token(Token = "0x6000FC3")]
			[Address(RVA = "0xDA0518", Offset = "0xDA0518", VA = "0xDA0518")]
			private void SerializeArray(IList anArray)
			{
			}

			[Token(Token = "0x6000FC4")]
			[Address(RVA = "0xDA0260", Offset = "0xDA0260", VA = "0xDA0260")]
			private void SerializeString(string str)
			{
			}

			[Token(Token = "0x6000FC5")]
			[Address(RVA = "0xDA0D04", Offset = "0xDA0D04", VA = "0xDA0D04")]
			private void SerializeOther(object value)
			{
			}
		}

		[Token(Token = "0x6000FAF")]
		[Address(RVA = "0xD9F314", Offset = "0xD9F314", VA = "0xD9F314")]
		public static object Deserialize(string json)
		{
			return null;
		}

		[Token(Token = "0x6000FB0")]
		[Address(RVA = "0xD9F4BC", Offset = "0xD9F4BC", VA = "0xD9F4BC")]
		public static string Serialize(object obj)
		{
			return null;
		}
	}
}
