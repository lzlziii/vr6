using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using System.Threading;
using AOT;
using BNG;
using BeautifyEffect;
using ClockStone;
using FluffyUnderware.Curvy;
using FluffyUnderware.Curvy.Controllers;
using FluffyUnderware.DevTools;
using Il2CppDummyDll;
using MK.Glow;
using MirzaBeig.Scripting.Effects;
using Oculus.Spatializer.Propagation;
using PaintIn3D;
using RootMotion.Dynamics;
using RootMotion.FinalIK;
using SensorToolkit;
using TMPro;
using UnityEngine;
using UnityEngine.AI;
using UnityEngine.Animations;
using UnityEngine.Audio;
using UnityEngine.EventSystems;
using UnityEngine.Events;
using UnityEngine.InputSystem;
using UnityEngine.Rendering;
using UnityEngine.SceneManagement;
using UnityEngine.Serialization;
using UnityEngine.UI;
using UnityEngine.XR;
using VRKemono;
using VRUiKits.Utils;
using VacuumShaders.TerrainToMesh;
using XftWeapon;

[assembly: AssemblyVersion("0.0.0.0")]
[Token(Token = "0x2000002")]
public static class TransformExtensions
{
	[Token(Token = "0x6000001")]
	[Address(RVA = "0xAD87E4", Offset = "0xAD87E4", VA = "0xAD87E4")]
	public static bool IsVisibleFrom(this Transform transform, Camera camera)
	{
		return default(bool);
	}
}
[Token(Token = "0x2000003")]
public class MLPForceNoProbes : MonoBehaviour
{
	[Token(Token = "0x6000002")]
	[Address(RVA = "0xAD8898", Offset = "0xAD8898", VA = "0xAD8898")]
	public MLPForceNoProbes()
	{
	}
}
[Token(Token = "0x2000004")]
public class MLPForceSaveProbes : MonoBehaviour
{
	[Token(Token = "0x6000003")]
	[Address(RVA = "0xAD88A0", Offset = "0xAD88A0", VA = "0xAD88A0")]
	public MLPForceSaveProbes()
	{
	}
}
[Token(Token = "0x2000005")]
[AddComponentMenu("Camera-Control/Mouse Look")]
public class MouseLook : MonoBehaviour
{
	[Token(Token = "0x2000006")]
	public enum RotationAxes
	{
		[Token(Token = "0x400000A")]
		MouseXAndY,
		[Token(Token = "0x400000B")]
		MouseX,
		[Token(Token = "0x400000C")]
		MouseY
	}

	[Token(Token = "0x4000001")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RotationAxes axes;

	[Token(Token = "0x4000002")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float sensitivityX;

	[Token(Token = "0x4000003")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float sensitivityY;

	[Token(Token = "0x4000004")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float minimumX;

	[Token(Token = "0x4000005")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float maximumX;

	[Token(Token = "0x4000006")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float minimumY;

	[Token(Token = "0x4000007")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float maximumY;

	[Token(Token = "0x4000008")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float rotationY;

	[Token(Token = "0x6000004")]
	[Address(RVA = "0xAD88A8", Offset = "0xAD88A8", VA = "0xAD88A8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000005")]
	[Address(RVA = "0xAD8A74", Offset = "0xAD8A74", VA = "0xAD8A74")]
	private void Start()
	{
	}

	[Token(Token = "0x6000006")]
	[Address(RVA = "0xAD8B30", Offset = "0xAD8B30", VA = "0xAD8B30")]
	public MouseLook()
	{
	}
}
[Token(Token = "0x2000007")]
public struct ReflectionSnapshot
{
	[Token(Token = "0x400000D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public AudioMixerSnapshot mixerSnapshot;

	[Token(Token = "0x400000E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public float fadeTime;
}
[Token(Token = "0x2000008")]
public class ONSPReflectionZone : MonoBehaviour
{
	[Token(Token = "0x400000F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioMixerSnapshot mixerSnapshot;

	[Token(Token = "0x4000010")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float fadeTime;

	[Token(Token = "0x4000011")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Stack<ReflectionSnapshot> snapshotList;

	[Token(Token = "0x4000012")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static ReflectionSnapshot currentSnapshot;

	[Token(Token = "0x6000007")]
	[Address(RVA = "0xAD8B50", Offset = "0xAD8B50", VA = "0xAD8B50")]
	private void Start()
	{
	}

	[Token(Token = "0x6000008")]
	[Address(RVA = "0xAD8B54", Offset = "0xAD8B54", VA = "0xAD8B54")]
	private void Update()
	{
	}

	[Token(Token = "0x6000009")]
	[Address(RVA = "0xAD8B58", Offset = "0xAD8B58", VA = "0xAD8B58")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x600000A")]
	[Address(RVA = "0xAD8CA8", Offset = "0xAD8CA8", VA = "0xAD8CA8")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x600000B")]
	[Address(RVA = "0xAD8B94", Offset = "0xAD8B94", VA = "0xAD8B94")]
	private bool CheckForAudioListener(GameObject gameObject)
	{
		return default(bool);
	}

	[Token(Token = "0x600000C")]
	[Address(RVA = "0xAD8C20", Offset = "0xAD8C20", VA = "0xAD8C20")]
	private void PushCurrentMixerShapshot()
	{
	}

	[Token(Token = "0x600000D")]
	[Address(RVA = "0xAD8CE4", Offset = "0xAD8CE4", VA = "0xAD8CE4")]
	private void PopCurrentMixerSnapshot()
	{
	}

	[Token(Token = "0x600000E")]
	[Address(RVA = "0xAD8D78", Offset = "0xAD8D78", VA = "0xAD8D78")]
	private void SetReflectionValues()
	{
	}

	[Token(Token = "0x600000F")]
	[Address(RVA = "0xAD8EDC", Offset = "0xAD8EDC", VA = "0xAD8EDC")]
	private void SetReflectionValues(ref ReflectionSnapshot mss)
	{
	}

	[Token(Token = "0x6000010")]
	[Address(RVA = "0xAD9040", Offset = "0xAD9040", VA = "0xAD9040")]
	public ONSPReflectionZone()
	{
	}
}
[Token(Token = "0x2000009")]
public class OculusSpatializerUnity : MonoBehaviour
{
	[Token(Token = "0x200000A")]
	public delegate void AudioRaycastCallback(Vector3 origin, Vector3 direction, out Vector3 point, out Vector3 normal, IntPtr data);

	[Token(Token = "0x4000013")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LayerMask layerMask;

	[Token(Token = "0x4000014")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool visualizeRoom;

	[Token(Token = "0x4000015")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	private bool roomVisualizationInitialized;

	[Token(Token = "0x4000016")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int raysPerSecond;

	[Token(Token = "0x4000017")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float roomInterpSpeed;

	[Token(Token = "0x4000018")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float maxWallDistance;

	[Token(Token = "0x4000019")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int rayCacheSize;

	[Token(Token = "0x400001A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool dynamicReflectionsEnabled;

	[Token(Token = "0x400001B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float particleSize;

	[Token(Token = "0x400001C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float particleOffset;

	[Token(Token = "0x400001D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private GameObject room;

	[Token(Token = "0x400001E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Renderer[] wallRenderer;

	[Token(Token = "0x400001F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float[] dims;

	[Token(Token = "0x4000020")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float[] coefs;

	[Token(Token = "0x4000021")]
	private const int HIT_COUNT = 2048;

	[Token(Token = "0x4000022")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3[] points;

	[Token(Token = "0x4000023")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3[] normals;

	[Token(Token = "0x4000024")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private ParticleSystem sys;

	[Token(Token = "0x4000025")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x4000026")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static LayerMask gLayerMask;

	[Token(Token = "0x4000027")]
	private const string strOSP = "AudioPluginOculusSpatializer";

	[Token(Token = "0x6000012")]
	[Address(RVA = "0xAD9270", Offset = "0xAD9270", VA = "0xAD9270")]
	private static Vector3 swapHandedness(Vector3 vec)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000013")]
	[Address(RVA = "0xAD90E0", Offset = "0xAD90E0", VA = "0xAD90E0")]
	[MonoPInvokeCallback(typeof(AudioRaycastCallback))]
	private static void AudioRaycast(Vector3 origin, Vector3 direction, out Vector3 point, out Vector3 normal, IntPtr data)
	{
	}

	[Token(Token = "0x6000014")]
	[Address(RVA = "0xAD9278", Offset = "0xAD9278", VA = "0xAD9278")]
	private void Start()
	{
	}

	[Token(Token = "0x6000015")]
	[Address(RVA = "0xAD9480", Offset = "0xAD9480", VA = "0xAD9480")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000016")]
	[Address(RVA = "0xAD9578", Offset = "0xAD9578", VA = "0xAD9578")]
	private void Update()
	{
	}

	[Token(Token = "0x6000017")]
	[Address(RVA = "0xAD9F54", Offset = "0xAD9F54", VA = "0xAD9F54")]
	private void inititalizeRoomVisualization()
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000018")]
	[Address(RVA = "0xAD93F8", Offset = "0xAD93F8", VA = "0xAD93F8")]
	private static extern int OSP_Unity_AssignRaycastCallback(AudioRaycastCallback callback, IntPtr data);

	[PreserveSig]
	[Token(Token = "0x6000019")]
	[Address(RVA = "0xAD94F4", Offset = "0xAD94F4", VA = "0xAD94F4")]
	private static extern int OSP_Unity_AssignRaycastCallback(IntPtr callback, IntPtr data);

	[PreserveSig]
	[Token(Token = "0x600001A")]
	[Address(RVA = "0xAD9CE8", Offset = "0xAD9CE8", VA = "0xAD9CE8")]
	private static extern int OSP_Unity_SetDynamicRoomRaysPerSecond(int RaysPerSecond);

	[PreserveSig]
	[Token(Token = "0x600001B")]
	[Address(RVA = "0xAD9D64", Offset = "0xAD9D64", VA = "0xAD9D64")]
	private static extern int OSP_Unity_SetDynamicRoomInterpSpeed(float InterpSpeed);

	[PreserveSig]
	[Token(Token = "0x600001C")]
	[Address(RVA = "0xAD9DE0", Offset = "0xAD9DE0", VA = "0xAD9DE0")]
	private static extern int OSP_Unity_SetDynamicRoomMaxWallDistance(float MaxWallDistance);

	[PreserveSig]
	[Token(Token = "0x600001D")]
	[Address(RVA = "0xAD9E5C", Offset = "0xAD9E5C", VA = "0xAD9E5C")]
	private static extern int OSP_Unity_SetDynamicRoomRaysRayCacheSize(int RayCacheSize);

	[PreserveSig]
	[Token(Token = "0x600001E")]
	[Address(RVA = "0xAD9ED8", Offset = "0xAD9ED8", VA = "0xAD9ED8")]
	private static extern int OSP_Unity_UpdateRoomModel(float wetLevel);

	[PreserveSig]
	[Token(Token = "0x600001F")]
	[Address(RVA = "0xADAC9C", Offset = "0xADAC9C", VA = "0xADAC9C")]
	private static extern int OSP_Unity_GetRoomDimensions(float[] roomDimensions, float[] reflectionsCoefs, out Vector3 position);

	[PreserveSig]
	[Token(Token = "0x6000020")]
	[Address(RVA = "0xADAD40", Offset = "0xADAD40", VA = "0xADAD40")]
	private static extern int OSP_Unity_GetRaycastHits(Vector3[] points, Vector3[] normals, int length);

	[Token(Token = "0x6000021")]
	[Address(RVA = "0xADADE4", Offset = "0xADADE4", VA = "0xADADE4")]
	public OculusSpatializerUnity()
	{
	}
}
[Token(Token = "0x200000B")]
public class ONSPAmbisonicsNative : MonoBehaviour
{
	[Token(Token = "0x200000C")]
	public enum ovrAmbisonicsNativeStatus
	{
		[Token(Token = "0x400002D")]
		Uninitialized = -1,
		[Token(Token = "0x400002E")]
		NotEnabled,
		[Token(Token = "0x400002F")]
		Success,
		[Token(Token = "0x4000030")]
		StreamError,
		[Token(Token = "0x4000031")]
		ProcessError,
		[Token(Token = "0x4000032")]
		MaxStatValue
	}

	[Token(Token = "0x4000028")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private AudioSource source;

	[Token(Token = "0x4000029")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int numFOAChannels;

	[Token(Token = "0x400002A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static int paramAmbiStat;

	[Token(Token = "0x400002B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ovrAmbisonicsNativeStatus currentStatus;

	[Token(Token = "0x6000027")]
	[Address(RVA = "0xADB0D8", Offset = "0xADB0D8", VA = "0xADB0D8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000028")]
	[Address(RVA = "0xADB308", Offset = "0xADB308", VA = "0xADB308")]
	private void Update()
	{
	}

	[Token(Token = "0x6000029")]
	[Address(RVA = "0xADB4F0", Offset = "0xADB4F0", VA = "0xADB4F0")]
	public ONSPAmbisonicsNative()
	{
	}
}
[Token(Token = "0x200000D")]
public class ONSPAudioSource : MonoBehaviour
{
	[Token(Token = "0x200000E")]
	private enum Parameters
	{
		[Token(Token = "0x400003E")]
		P_GAIN,
		[Token(Token = "0x400003F")]
		P_USEINVSQR,
		[Token(Token = "0x4000040")]
		P_NEAR,
		[Token(Token = "0x4000041")]
		P_FAR,
		[Token(Token = "0x4000042")]
		P_RADIUS,
		[Token(Token = "0x4000043")]
		P_DISABLE_RFL,
		[Token(Token = "0x4000044")]
		P_AMBISTAT,
		[Token(Token = "0x4000045")]
		P_READONLY_GLOBAL_RFL_ENABLED,
		[Token(Token = "0x4000046")]
		P_READONLY_NUM_VOICES,
		[Token(Token = "0x4000047")]
		P_SENDLEVEL,
		[Token(Token = "0x4000048")]
		P_NUM
	}

	[Token(Token = "0x4000033")]
	public const string strONSPS = "AudioPluginOculusSpatializer";

	[Token(Token = "0x4000034")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool enableSpatialization;

	[Token(Token = "0x4000035")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	private float gain;

	[Token(Token = "0x4000036")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	private bool useInvSqr;

	[Token(Token = "0x4000037")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[SerializeField]
	private float near;

	[Token(Token = "0x4000038")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[SerializeField]
	private float far;

	[Token(Token = "0x4000039")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[SerializeField]
	private float volumetricRadius;

	[Token(Token = "0x400003A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[SerializeField]
	private float reverbSend;

	[Token(Token = "0x400003B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private bool enableRfl;

	[Token(Token = "0x400003C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ONSPAudioSource RoomReflectionGizmoAS;

	[Token(Token = "0x17000001")]
	public bool EnableSpatialization
	{
		[Token(Token = "0x600002D")]
		[Address(RVA = "0xADB7E8", Offset = "0xADB7E8", VA = "0xADB7E8")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600002E")]
		[Address(RVA = "0xADB7F0", Offset = "0xADB7F0", VA = "0xADB7F0")]
		set
		{
		}
	}

	[Token(Token = "0x17000002")]
	public float Gain
	{
		[Token(Token = "0x600002F")]
		[Address(RVA = "0xADB7FC", Offset = "0xADB7FC", VA = "0xADB7FC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000030")]
		[Address(RVA = "0xADB804", Offset = "0xADB804", VA = "0xADB804")]
		set
		{
		}
	}

	[Token(Token = "0x17000003")]
	public bool UseInvSqr
	{
		[Token(Token = "0x6000031")]
		[Address(RVA = "0xADB820", Offset = "0xADB820", VA = "0xADB820")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000032")]
		[Address(RVA = "0xADB828", Offset = "0xADB828", VA = "0xADB828")]
		set
		{
		}
	}

	[Token(Token = "0x17000004")]
	public float Near
	{
		[Token(Token = "0x6000033")]
		[Address(RVA = "0xADB834", Offset = "0xADB834", VA = "0xADB834")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000034")]
		[Address(RVA = "0xADB83C", Offset = "0xADB83C", VA = "0xADB83C")]
		set
		{
		}
	}

	[Token(Token = "0x17000005")]
	public float Far
	{
		[Token(Token = "0x6000035")]
		[Address(RVA = "0xADB85C", Offset = "0xADB85C", VA = "0xADB85C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000036")]
		[Address(RVA = "0xADB864", Offset = "0xADB864", VA = "0xADB864")]
		set
		{
		}
	}

	[Token(Token = "0x17000006")]
	public float VolumetricRadius
	{
		[Token(Token = "0x6000037")]
		[Address(RVA = "0xADB884", Offset = "0xADB884", VA = "0xADB884")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000038")]
		[Address(RVA = "0xADB88C", Offset = "0xADB88C", VA = "0xADB88C")]
		set
		{
		}
	}

	[Token(Token = "0x17000007")]
	public float ReverbSend
	{
		[Token(Token = "0x6000039")]
		[Address(RVA = "0xADB8AC", Offset = "0xADB8AC", VA = "0xADB8AC")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600003A")]
		[Address(RVA = "0xADB8B4", Offset = "0xADB8B4", VA = "0xADB8B4")]
		set
		{
		}
	}

	[Token(Token = "0x17000008")]
	public bool EnableRfl
	{
		[Token(Token = "0x600003B")]
		[Address(RVA = "0xADB8D4", Offset = "0xADB8D4", VA = "0xADB8D4")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600003C")]
		[Address(RVA = "0xADB8DC", Offset = "0xADB8DC", VA = "0xADB8DC")]
		set
		{
		}
	}

	[Token(Token = "0x600002B")]
	[Address(RVA = "0xADB550", Offset = "0xADB550", VA = "0xADB550")]
	[RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
	private static void OnBeforeSceneLoadRuntimeMethod()
	{
	}

	[PreserveSig]
	[Token(Token = "0x600002C")]
	[Address(RVA = "0xADB70C", Offset = "0xADB70C", VA = "0xADB70C")]
	private static extern void ONSP_GetGlobalRoomReflectionValues(ref bool reflOn, ref bool reverbOn, ref float width, ref float height, ref float length);

	[Token(Token = "0x600003D")]
	[Address(RVA = "0xADB8E8", Offset = "0xADB8E8", VA = "0xADB8E8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600003E")]
	[Address(RVA = "0xADBA4C", Offset = "0xADBA4C", VA = "0xADBA4C")]
	private void Start()
	{
	}

	[Token(Token = "0x600003F")]
	[Address(RVA = "0xADBA50", Offset = "0xADBA50", VA = "0xADBA50")]
	private void Update()
	{
	}

	[Token(Token = "0x6000040")]
	[Address(RVA = "0xADB94C", Offset = "0xADB94C", VA = "0xADB94C")]
	public void SetParameters(ref AudioSource source)
	{
	}

	[Token(Token = "0x6000041")]
	[Address(RVA = "0xADBB10", Offset = "0xADBB10", VA = "0xADBB10")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000042")]
	[Address(RVA = "0xADBE80", Offset = "0xADBE80", VA = "0xADBE80")]
	private void OnDestroy()
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000043")]
	[Address(RVA = "0xADB690", Offset = "0xADB690", VA = "0xADB690")]
	private static extern int OSP_SetGlobalVoiceLimit(int VoiceLimit);

	[Token(Token = "0x6000044")]
	[Address(RVA = "0xADBF18", Offset = "0xADBF18", VA = "0xADBF18")]
	public ONSPAudioSource()
	{
	}
}
[Token(Token = "0x200000F")]
public class ONSPProfiler : MonoBehaviour
{
	[Token(Token = "0x4000049")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool profilerEnabled;

	[Token(Token = "0x400004A")]
	private const int DEFAULT_PORT = 2121;

	[Token(Token = "0x400004B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int port;

	[Token(Token = "0x400004C")]
	public const string strONSPS = "AudioPluginOculusSpatializer";

	[Token(Token = "0x6000045")]
	[Address(RVA = "0xADBF34", Offset = "0xADBF34", VA = "0xADBF34")]
	private void Start()
	{
	}

	[Token(Token = "0x6000046")]
	[Address(RVA = "0xADBF40", Offset = "0xADBF40", VA = "0xADBF40")]
	private void Update()
	{
	}

	[PreserveSig]
	[Token(Token = "0x6000047")]
	[Address(RVA = "0xADBFE8", Offset = "0xADBFE8", VA = "0xADBFE8")]
	private static extern int ONSP_SetProfilerEnabled(bool enabled);

	[PreserveSig]
	[Token(Token = "0x6000048")]
	[Address(RVA = "0xADBF6C", Offset = "0xADBF6C", VA = "0xADBF6C")]
	private static extern int ONSP_SetProfilerPort(int port);

	[Token(Token = "0x6000049")]
	[Address(RVA = "0xADC064", Offset = "0xADC064", VA = "0xADC064")]
	public ONSPProfiler()
	{
	}
}
[Token(Token = "0x2000010")]
public class ONSPPropagationGeometry : MonoBehaviour
{
	[Token(Token = "0x2000011")]
	private struct MeshMaterial
	{
		[Token(Token = "0x4000055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public MeshFilter meshFilter;

		[Token(Token = "0x4000056")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ONSPPropagationMaterial[] materials;
	}

	[Token(Token = "0x2000012")]
	private struct TerrainMaterial
	{
		[Token(Token = "0x4000057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Terrain terrain;

		[Token(Token = "0x4000058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ONSPPropagationMaterial[] materials;

		[Token(Token = "0x4000059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Mesh[] treePrototypeMeshes;
	}

	[Token(Token = "0x400004D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static string GeometryAssetDirectory;

	[Token(Token = "0x400004E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string filePathRelative;

	[Token(Token = "0x400004F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool fileEnabled;

	[Token(Token = "0x4000050")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool includeChildMeshes;

	[Token(Token = "0x4000051")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private IntPtr geometryHandle;

	[Token(Token = "0x4000052")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int OSPSuccess;

	[Token(Token = "0x4000053")]
	public const string GEOMETRY_FILE_EXTENSION = "ovramesh";

	[Token(Token = "0x4000054")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	private static int terrainDecimation;

	[Token(Token = "0x17000009")]
	public static string GeometryAssetPath
	{
		[Token(Token = "0x600004A")]
		[Address(RVA = "0xADC074", Offset = "0xADC074", VA = "0xADC074")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x1700000A")]
	public string filePath
	{
		[Token(Token = "0x600004B")]
		[Address(RVA = "0xADC0FC", Offset = "0xADC0FC", VA = "0xADC0FC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600004C")]
	[Address(RVA = "0xADC170", Offset = "0xADC170", VA = "0xADC170")]
	private static string GetPath(Transform current)
	{
		return null;
	}

	[Token(Token = "0x600004D")]
	[Address(RVA = "0xADC2B4", Offset = "0xADC2B4", VA = "0xADC2B4")]
	private void Awake()
	{
	}

	[Token(Token = "0x600004E")]
	[Address(RVA = "0xADC2B8", Offset = "0xADC2B8", VA = "0xADC2B8")]
	private void CreatePropagationGeometry()
	{
	}

	[Token(Token = "0x600004F")]
	[Address(RVA = "0xADC8B4", Offset = "0xADC8B4", VA = "0xADC8B4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000050")]
	[Address(RVA = "0xADCC1C", Offset = "0xADCC1C", VA = "0xADCC1C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000051")]
	[Address(RVA = "0xADCDA4", Offset = "0xADCDA4", VA = "0xADCDA4")]
	private static void traverseMeshHierarchy(GameObject obj, ONSPPropagationMaterial[] currentMaterials, bool includeChildren, List<MeshMaterial> meshMaterials, List<TerrainMaterial> terrainMaterials, bool ignoreStatic, ref int ignoredMeshCount)
	{
	}

	[Token(Token = "0x6000052")]
	[Address(RVA = "0xADD600", Offset = "0xADD600", VA = "0xADD600")]
	private int uploadMesh(IntPtr geometryHandle, GameObject meshObject, Matrix4x4 worldToLocal)
	{
		return default(int);
	}

	[Token(Token = "0x6000053")]
	[Address(RVA = "0xADD638", Offset = "0xADD638", VA = "0xADD638")]
	private int uploadMesh(IntPtr geometryHandle, GameObject meshObject, Matrix4x4 worldToLocal, bool ignoreStatic, ref int ignoredMeshCount)
	{
		return default(int);
	}

	[Token(Token = "0x6000054")]
	[Address(RVA = "0xADECE4", Offset = "0xADECE4", VA = "0xADECE4")]
	private static void uploadMeshFilter(List<Vector3> tempVertices, List<int> tempIndices, MeshGroup[] groups, float[] vertices, int[] indices, ref int vertexOffset, ref int indexOffset, ref int groupOffset, Mesh mesh, ONSPPropagationMaterial[] materials, Matrix4x4 matrix)
	{
	}

	[Token(Token = "0x6000055")]
	[Address(RVA = "0xADEA34", Offset = "0xADEA34", VA = "0xADEA34")]
	private static void updateCountsForMesh(ref int totalVertexCount, ref uint totalIndexCount, ref int totalFaceCount, ref int totalMaterialCount, Mesh mesh)
	{
	}

	[Token(Token = "0x6000056")]
	[Address(RVA = "0xADC6D4", Offset = "0xADC6D4", VA = "0xADC6D4")]
	public void UploadGeometry()
	{
	}

	[Token(Token = "0x6000057")]
	[Address(RVA = "0xADC500", Offset = "0xADC500", VA = "0xADC500")]
	public bool ReadFile()
	{
		return default(bool);
	}

	[Token(Token = "0x6000058")]
	[Address(RVA = "0xADF308", Offset = "0xADF308", VA = "0xADF308")]
	public bool WriteToObj()
	{
		return default(bool);
	}

	[Token(Token = "0x6000059")]
	[Address(RVA = "0xADF774", Offset = "0xADF774", VA = "0xADF774")]
	public ONSPPropagationGeometry()
	{
	}
}
[Token(Token = "0x2000013")]
internal class ONSPPropagation
{
	[Token(Token = "0x2000014")]
	public enum ovrAudioScalarType : uint
	{
		[Token(Token = "0x400005C")]
		Int8,
		[Token(Token = "0x400005D")]
		UInt8,
		[Token(Token = "0x400005E")]
		Int16,
		[Token(Token = "0x400005F")]
		UInt16,
		[Token(Token = "0x4000060")]
		Int32,
		[Token(Token = "0x4000061")]
		UInt32,
		[Token(Token = "0x4000062")]
		Int64,
		[Token(Token = "0x4000063")]
		UInt64,
		[Token(Token = "0x4000064")]
		Float16,
		[Token(Token = "0x4000065")]
		Float32,
		[Token(Token = "0x4000066")]
		Float64
	}

	[Token(Token = "0x2000015")]
	public class ClientType
	{
		[Token(Token = "0x4000067")]
		public const uint OVRA_CLIENT_TYPE_NATIVE = 0u;

		[Token(Token = "0x4000068")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2016 = 1u;

		[Token(Token = "0x4000069")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2017_1 = 2u;

		[Token(Token = "0x400006A")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2017_2 = 3u;

		[Token(Token = "0x400006B")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2018_1 = 4u;

		[Token(Token = "0x400006C")]
		public const uint OVRA_CLIENT_TYPE_FMOD = 5u;

		[Token(Token = "0x400006D")]
		public const uint OVRA_CLIENT_TYPE_UNITY = 6u;

		[Token(Token = "0x400006E")]
		public const uint OVRA_CLIENT_TYPE_UE4 = 7u;

		[Token(Token = "0x400006F")]
		public const uint OVRA_CLIENT_TYPE_VST = 8u;

		[Token(Token = "0x4000070")]
		public const uint OVRA_CLIENT_TYPE_AAX = 9u;

		[Token(Token = "0x4000071")]
		public const uint OVRA_CLIENT_TYPE_TEST = 10u;

		[Token(Token = "0x4000072")]
		public const uint OVRA_CLIENT_TYPE_OTHER = 11u;

		[Token(Token = "0x4000073")]
		public const uint OVRA_CLIENT_TYPE_WWISE_UNKNOWN = 12u;

		[Token(Token = "0x4000074")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2019_1 = 13u;

		[Token(Token = "0x4000075")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2019_2 = 14u;

		[Token(Token = "0x4000076")]
		public const uint OVRA_CLIENT_TYPE_WWISE_2021_1 = 15u;

		[Token(Token = "0x600005E")]
		[Address(RVA = "0xADFCEC", Offset = "0xADFCEC", VA = "0xADFCEC")]
		public ClientType()
		{
		}
	}

	[Token(Token = "0x2000016")]
	public interface PropagationInterface
	{
		[Token(Token = "0x600005F")]
		int SetPropagationQuality(float quality);

		[Token(Token = "0x6000060")]
		int SetPropagationThreadAffinity(ulong cpuMask);

		[Token(Token = "0x6000061")]
		int CreateAudioGeometry(out IntPtr geometry);

		[Token(Token = "0x6000062")]
		int DestroyAudioGeometry(IntPtr geometry);

		[Token(Token = "0x6000063")]
		int AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, int vertexCount, int[] indices, int indexCount, MeshGroup[] groups, int groupCount);

		[Token(Token = "0x6000064")]
		int AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4);

		[Token(Token = "0x6000065")]
		int AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4);

		[Token(Token = "0x6000066")]
		int AudioGeometryWriteMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x6000067")]
		int AudioGeometryReadMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x6000068")]
		int AudioGeometryWriteMeshFileObj(IntPtr geometry, string filePath);

		[Token(Token = "0x6000069")]
		int AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value);

		[Token(Token = "0x600006A")]
		int CreateAudioMaterial(out IntPtr material);

		[Token(Token = "0x600006B")]
		int DestroyAudioMaterial(IntPtr material);

		[Token(Token = "0x600006C")]
		int AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value);

		[Token(Token = "0x600006D")]
		int AudioMaterialReset(IntPtr material, MaterialProperty property);
	}

	[Token(Token = "0x2000017")]
	public class UnityNativeInterface : PropagationInterface
	{
		[Token(Token = "0x4000077")]
		public const string strOSPS = "AudioPluginOculusSpatializer";

		[Token(Token = "0x4000078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr context_;

		[Token(Token = "0x1700000C")]
		private IntPtr context
		{
			[Token(Token = "0x600006E")]
			[Address(RVA = "0xADFCF4", Offset = "0xADFCF4", VA = "0xADFCF4")]
			get
			{
				return default(IntPtr);
			}
		}

		[PreserveSig]
		[Token(Token = "0x600006F")]
		[Address(RVA = "0xADFD60", Offset = "0xADFD60", VA = "0xADFD60")]
		public static extern int ovrAudio_GetPluginContext(out IntPtr context, uint clientType);

		[PreserveSig]
		[Token(Token = "0x6000070")]
		[Address(RVA = "0xADFDE4", Offset = "0xADFDE4", VA = "0xADFDE4")]
		private static extern int ovrAudio_SetPropagationQuality(IntPtr context, float quality);

		[Token(Token = "0x6000071")]
		[Address(RVA = "0xADFE70", Offset = "0xADFE70", VA = "0xADFE70", Slot = "4")]
		public int SetPropagationQuality(float quality)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000072")]
		[Address(RVA = "0xADFE90", Offset = "0xADFE90", VA = "0xADFE90")]
		private static extern int ovrAudio_SetPropagationThreadAffinity(IntPtr context, ulong cpuMask);

		[Token(Token = "0x6000073")]
		[Address(RVA = "0xADFF14", Offset = "0xADFF14", VA = "0xADFF14", Slot = "5")]
		public int SetPropagationThreadAffinity(ulong cpuMask)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000074")]
		[Address(RVA = "0xADFF2C", Offset = "0xADFF2C", VA = "0xADFF2C")]
		private static extern int ovrAudio_CreateAudioGeometry(IntPtr context, out IntPtr geometry);

		[Token(Token = "0x6000075")]
		[Address(RVA = "0xADFFAC", Offset = "0xADFFAC", VA = "0xADFFAC", Slot = "6")]
		public int CreateAudioGeometry(out IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000076")]
		[Address(RVA = "0xADFFC4", Offset = "0xADFFC4", VA = "0xADFFC4")]
		private static extern int ovrAudio_DestroyAudioGeometry(IntPtr geometry);

		[Token(Token = "0x6000077")]
		[Address(RVA = "0xAE0040", Offset = "0xAE0040", VA = "0xAE0040", Slot = "7")]
		public int DestroyAudioGeometry(IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000078")]
		[Address(RVA = "0xAE0048", Offset = "0xAE0048", VA = "0xAE0048")]
		private static extern int ovrAudio_AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, UIntPtr verticesBytesOffset, UIntPtr vertexCount, UIntPtr vertexStride, ovrAudioScalarType vertexType, int[] indices, UIntPtr indicesByteOffset, UIntPtr indexCount, ovrAudioScalarType indexType, MeshGroup[] groups, UIntPtr groupCount);

		[Token(Token = "0x6000079")]
		[Address(RVA = "0xAE015C", Offset = "0xAE015C", VA = "0xAE015C", Slot = "8")]
		public int AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, int vertexCount, int[] indices, int indexCount, MeshGroup[] groups, int groupCount)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x600007A")]
		[Address(RVA = "0xAE025C", Offset = "0xAE025C", VA = "0xAE025C")]
		private static extern int ovrAudio_AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4);

		[Token(Token = "0x600007B")]
		[Address(RVA = "0xAE02E8", Offset = "0xAE02E8", VA = "0xAE02E8", Slot = "9")]
		public int AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x600007C")]
		[Address(RVA = "0xAE02F4", Offset = "0xAE02F4", VA = "0xAE02F4")]
		private static extern int ovrAudio_AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4);

		[Token(Token = "0x600007D")]
		[Address(RVA = "0xAE0414", Offset = "0xAE0414", VA = "0xAE0414", Slot = "10")]
		public int AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x600007E")]
		[Address(RVA = "0xAE0420", Offset = "0xAE0420", VA = "0xAE0420")]
		private static extern int ovrAudio_AudioGeometryWriteMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x600007F")]
		[Address(RVA = "0xAE04C0", Offset = "0xAE04C0", VA = "0xAE04C0", Slot = "11")]
		public int AudioGeometryWriteMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000080")]
		[Address(RVA = "0xAE04CC", Offset = "0xAE04CC", VA = "0xAE04CC")]
		private static extern int ovrAudio_AudioGeometryReadMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x6000081")]
		[Address(RVA = "0xAE056C", Offset = "0xAE056C", VA = "0xAE056C", Slot = "12")]
		public int AudioGeometryReadMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000082")]
		[Address(RVA = "0xAE0578", Offset = "0xAE0578", VA = "0xAE0578")]
		private static extern int ovrAudio_AudioGeometryWriteMeshFileObj(IntPtr geometry, string filePath);

		[Token(Token = "0x6000083")]
		[Address(RVA = "0xAE0618", Offset = "0xAE0618", VA = "0xAE0618", Slot = "13")]
		public int AudioGeometryWriteMeshFileObj(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000084")]
		[Address(RVA = "0xAE0624", Offset = "0xAE0624", VA = "0xAE0624")]
		private static extern int ovrAudio_CreateAudioMaterial(IntPtr context, out IntPtr material);

		[Token(Token = "0x6000085")]
		[Address(RVA = "0xAE06A4", Offset = "0xAE06A4", VA = "0xAE06A4", Slot = "15")]
		public int CreateAudioMaterial(out IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000086")]
		[Address(RVA = "0xAE06BC", Offset = "0xAE06BC", VA = "0xAE06BC")]
		private static extern int ovrAudio_DestroyAudioMaterial(IntPtr material);

		[Token(Token = "0x6000087")]
		[Address(RVA = "0xAE0738", Offset = "0xAE0738", VA = "0xAE0738", Slot = "16")]
		public int DestroyAudioMaterial(IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000088")]
		[Address(RVA = "0xAE0740", Offset = "0xAE0740", VA = "0xAE0740")]
		private static extern int ovrAudio_AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value);

		[Token(Token = "0x6000089")]
		[Address(RVA = "0xAE07DC", Offset = "0xAE07DC", VA = "0xAE07DC", Slot = "17")]
		public int AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x600008A")]
		[Address(RVA = "0xAE07E8", Offset = "0xAE07E8", VA = "0xAE07E8")]
		private static extern int ovrAudio_AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value);

		[Token(Token = "0x600008B")]
		[Address(RVA = "0xAE088C", Offset = "0xAE088C", VA = "0xAE088C", Slot = "14")]
		public int AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x600008C")]
		[Address(RVA = "0xAE089C", Offset = "0xAE089C", VA = "0xAE089C")]
		private static extern int ovrAudio_AudioMaterialReset(IntPtr material, MaterialProperty property);

		[Token(Token = "0x600008D")]
		[Address(RVA = "0xAE0920", Offset = "0xAE0920", VA = "0xAE0920", Slot = "18")]
		public int AudioMaterialReset(IntPtr material, MaterialProperty property)
		{
			return default(int);
		}

		[Token(Token = "0x600008E")]
		[Address(RVA = "0xADFC8C", Offset = "0xADFC8C", VA = "0xADFC8C")]
		public UnityNativeInterface()
		{
		}
	}

	[Token(Token = "0x2000018")]
	public class WwisePluginInterface : PropagationInterface
	{
		[Token(Token = "0x4000079")]
		public const string strOSPS = "OculusSpatializerWwise";

		[Token(Token = "0x400007A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr context_;

		[Token(Token = "0x1700000D")]
		private IntPtr context
		{
			[Token(Token = "0x600008F")]
			[Address(RVA = "0xAE092C", Offset = "0xAE092C", VA = "0xAE092C")]
			get
			{
				return default(IntPtr);
			}
		}

		[PreserveSig]
		[Token(Token = "0x6000090")]
		[Address(RVA = "0xADFAD4", Offset = "0xADFAD4", VA = "0xADFAD4")]
		public static extern int ovrAudio_GetPluginContext(out IntPtr context, uint clientType);

		[PreserveSig]
		[Token(Token = "0x6000091")]
		[Address(RVA = "0xAE0998", Offset = "0xAE0998", VA = "0xAE0998")]
		private static extern int ovrAudio_SetPropagationQuality(IntPtr context, float quality);

		[Token(Token = "0x6000092")]
		[Address(RVA = "0xAE0A24", Offset = "0xAE0A24", VA = "0xAE0A24", Slot = "4")]
		public int SetPropagationQuality(float quality)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000093")]
		[Address(RVA = "0xAE0A44", Offset = "0xAE0A44", VA = "0xAE0A44")]
		private static extern int ovrAudio_SetPropagationThreadAffinity(IntPtr context, ulong cpuMask);

		[Token(Token = "0x6000094")]
		[Address(RVA = "0xAE0AC8", Offset = "0xAE0AC8", VA = "0xAE0AC8", Slot = "5")]
		public int SetPropagationThreadAffinity(ulong cpuMask)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000095")]
		[Address(RVA = "0xAE0AE0", Offset = "0xAE0AE0", VA = "0xAE0AE0")]
		private static extern int ovrAudio_CreateAudioGeometry(IntPtr context, out IntPtr geometry);

		[Token(Token = "0x6000096")]
		[Address(RVA = "0xAE0B64", Offset = "0xAE0B64", VA = "0xAE0B64", Slot = "6")]
		public int CreateAudioGeometry(out IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000097")]
		[Address(RVA = "0xAE0B7C", Offset = "0xAE0B7C", VA = "0xAE0B7C")]
		private static extern int ovrAudio_DestroyAudioGeometry(IntPtr geometry);

		[Token(Token = "0x6000098")]
		[Address(RVA = "0xAE0BF8", Offset = "0xAE0BF8", VA = "0xAE0BF8", Slot = "7")]
		public int DestroyAudioGeometry(IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x6000099")]
		[Address(RVA = "0xAE0C00", Offset = "0xAE0C00", VA = "0xAE0C00")]
		private static extern int ovrAudio_AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, UIntPtr verticesBytesOffset, UIntPtr vertexCount, UIntPtr vertexStride, ovrAudioScalarType vertexType, int[] indices, UIntPtr indicesByteOffset, UIntPtr indexCount, ovrAudioScalarType indexType, MeshGroup[] groups, UIntPtr groupCount);

		[Token(Token = "0x600009A")]
		[Address(RVA = "0xAE0D14", Offset = "0xAE0D14", VA = "0xAE0D14", Slot = "8")]
		public int AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, int vertexCount, int[] indices, int indexCount, MeshGroup[] groups, int groupCount)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x600009B")]
		[Address(RVA = "0xAE0E14", Offset = "0xAE0E14", VA = "0xAE0E14")]
		private static extern int ovrAudio_AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4);

		[Token(Token = "0x600009C")]
		[Address(RVA = "0xAE0EA0", Offset = "0xAE0EA0", VA = "0xAE0EA0", Slot = "9")]
		public int AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x600009D")]
		[Address(RVA = "0xAE0EAC", Offset = "0xAE0EAC", VA = "0xAE0EAC")]
		private static extern int ovrAudio_AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4);

		[Token(Token = "0x600009E")]
		[Address(RVA = "0xAE0FCC", Offset = "0xAE0FCC", VA = "0xAE0FCC", Slot = "10")]
		public int AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x600009F")]
		[Address(RVA = "0xAE0FD8", Offset = "0xAE0FD8", VA = "0xAE0FD8")]
		private static extern int ovrAudio_AudioGeometryWriteMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x60000A0")]
		[Address(RVA = "0xAE1078", Offset = "0xAE1078", VA = "0xAE1078", Slot = "11")]
		public int AudioGeometryWriteMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60000A1")]
		[Address(RVA = "0xAE1084", Offset = "0xAE1084", VA = "0xAE1084")]
		private static extern int ovrAudio_AudioGeometryReadMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x60000A2")]
		[Address(RVA = "0xAE1124", Offset = "0xAE1124", VA = "0xAE1124", Slot = "12")]
		public int AudioGeometryReadMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60000A3")]
		[Address(RVA = "0xAE1130", Offset = "0xAE1130", VA = "0xAE1130")]
		private static extern int ovrAudio_AudioGeometryWriteMeshFileObj(IntPtr geometry, string filePath);

		[Token(Token = "0x60000A4")]
		[Address(RVA = "0xAE11D0", Offset = "0xAE11D0", VA = "0xAE11D0", Slot = "13")]
		public int AudioGeometryWriteMeshFileObj(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60000A5")]
		[Address(RVA = "0xAE11DC", Offset = "0xAE11DC", VA = "0xAE11DC")]
		private static extern int ovrAudio_CreateAudioMaterial(IntPtr context, out IntPtr material);

		[Token(Token = "0x60000A6")]
		[Address(RVA = "0xAE1260", Offset = "0xAE1260", VA = "0xAE1260", Slot = "15")]
		public int CreateAudioMaterial(out IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60000A7")]
		[Address(RVA = "0xAE1278", Offset = "0xAE1278", VA = "0xAE1278")]
		private static extern int ovrAudio_DestroyAudioMaterial(IntPtr material);

		[Token(Token = "0x60000A8")]
		[Address(RVA = "0xAE12F4", Offset = "0xAE12F4", VA = "0xAE12F4", Slot = "16")]
		public int DestroyAudioMaterial(IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60000A9")]
		[Address(RVA = "0xAE12FC", Offset = "0xAE12FC", VA = "0xAE12FC")]
		private static extern int ovrAudio_AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value);

		[Token(Token = "0x60000AA")]
		[Address(RVA = "0xAE1398", Offset = "0xAE1398", VA = "0xAE1398", Slot = "17")]
		public int AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60000AB")]
		[Address(RVA = "0xAE13A4", Offset = "0xAE13A4", VA = "0xAE13A4")]
		private static extern int ovrAudio_AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value);

		[Token(Token = "0x60000AC")]
		[Address(RVA = "0xAE1448", Offset = "0xAE1448", VA = "0xAE1448", Slot = "14")]
		public int AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60000AD")]
		[Address(RVA = "0xAE1458", Offset = "0xAE1458", VA = "0xAE1458")]
		private static extern int ovrAudio_AudioMaterialReset(IntPtr material, MaterialProperty property);

		[Token(Token = "0x60000AE")]
		[Address(RVA = "0xAE14DC", Offset = "0xAE14DC", VA = "0xAE14DC", Slot = "18")]
		public int AudioMaterialReset(IntPtr material, MaterialProperty property)
		{
			return default(int);
		}

		[Token(Token = "0x60000AF")]
		[Address(RVA = "0xADFB58", Offset = "0xADFB58", VA = "0xADFB58")]
		public WwisePluginInterface()
		{
		}
	}

	[Token(Token = "0x2000019")]
	public class FMODPluginInterface : PropagationInterface
	{
		[Token(Token = "0x400007B")]
		public const string strOSPS = "OculusSpatializerFMOD";

		[Token(Token = "0x400007C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private IntPtr context_;

		[Token(Token = "0x1700000E")]
		private IntPtr context
		{
			[Token(Token = "0x60000B0")]
			[Address(RVA = "0xAE14E8", Offset = "0xAE14E8", VA = "0xAE14E8")]
			get
			{
				return default(IntPtr);
			}
		}

		[PreserveSig]
		[Token(Token = "0x60000B1")]
		[Address(RVA = "0xADFBB0", Offset = "0xADFBB0", VA = "0xADFBB0")]
		public static extern int ovrAudio_GetPluginContext(out IntPtr context, uint clientType);

		[PreserveSig]
		[Token(Token = "0x60000B2")]
		[Address(RVA = "0xAE1554", Offset = "0xAE1554", VA = "0xAE1554")]
		private static extern int ovrAudio_SetPropagationQuality(IntPtr context, float quality);

		[Token(Token = "0x60000B3")]
		[Address(RVA = "0xAE15E0", Offset = "0xAE15E0", VA = "0xAE15E0", Slot = "4")]
		public int SetPropagationQuality(float quality)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60000B4")]
		[Address(RVA = "0xAE1600", Offset = "0xAE1600", VA = "0xAE1600")]
		private static extern int ovrAudio_SetPropagationThreadAffinity(IntPtr context, ulong cpuMask);

		[Token(Token = "0x60000B5")]
		[Address(RVA = "0xAE1684", Offset = "0xAE1684", VA = "0xAE1684", Slot = "5")]
		public int SetPropagationThreadAffinity(ulong cpuMask)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60000B6")]
		[Address(RVA = "0xAE169C", Offset = "0xAE169C", VA = "0xAE169C")]
		private static extern int ovrAudio_CreateAudioGeometry(IntPtr context, out IntPtr geometry);

		[Token(Token = "0x60000B7")]
		[Address(RVA = "0xAE1720", Offset = "0xAE1720", VA = "0xAE1720", Slot = "6")]
		public int CreateAudioGeometry(out IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60000B8")]
		[Address(RVA = "0xAE1738", Offset = "0xAE1738", VA = "0xAE1738")]
		private static extern int ovrAudio_DestroyAudioGeometry(IntPtr geometry);

		[Token(Token = "0x60000B9")]
		[Address(RVA = "0xAE17B4", Offset = "0xAE17B4", VA = "0xAE17B4", Slot = "7")]
		public int DestroyAudioGeometry(IntPtr geometry)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60000BA")]
		[Address(RVA = "0xAE17BC", Offset = "0xAE17BC", VA = "0xAE17BC")]
		private static extern int ovrAudio_AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, UIntPtr verticesBytesOffset, UIntPtr vertexCount, UIntPtr vertexStride, ovrAudioScalarType vertexType, int[] indices, UIntPtr indicesByteOffset, UIntPtr indexCount, ovrAudioScalarType indexType, MeshGroup[] groups, UIntPtr groupCount);

		[Token(Token = "0x60000BB")]
		[Address(RVA = "0xAE18D0", Offset = "0xAE18D0", VA = "0xAE18D0", Slot = "8")]
		public int AudioGeometryUploadMeshArrays(IntPtr geometry, float[] vertices, int vertexCount, int[] indices, int indexCount, MeshGroup[] groups, int groupCount)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60000BC")]
		[Address(RVA = "0xAE19D0", Offset = "0xAE19D0", VA = "0xAE19D0")]
		private static extern int ovrAudio_AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4);

		[Token(Token = "0x60000BD")]
		[Address(RVA = "0xAE1A5C", Offset = "0xAE1A5C", VA = "0xAE1A5C", Slot = "9")]
		public int AudioGeometrySetTransform(IntPtr geometry, float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60000BE")]
		[Address(RVA = "0xAE1A68", Offset = "0xAE1A68", VA = "0xAE1A68")]
		private static extern int ovrAudio_AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4);

		[Token(Token = "0x60000BF")]
		[Address(RVA = "0xAE1B88", Offset = "0xAE1B88", VA = "0xAE1B88", Slot = "10")]
		public int AudioGeometryGetTransform(IntPtr geometry, out float[] matrix4x4)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60000C0")]
		[Address(RVA = "0xAE1B94", Offset = "0xAE1B94", VA = "0xAE1B94")]
		private static extern int ovrAudio_AudioGeometryWriteMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x60000C1")]
		[Address(RVA = "0xAE1C34", Offset = "0xAE1C34", VA = "0xAE1C34", Slot = "11")]
		public int AudioGeometryWriteMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60000C2")]
		[Address(RVA = "0xAE1C40", Offset = "0xAE1C40", VA = "0xAE1C40")]
		private static extern int ovrAudio_AudioGeometryReadMeshFile(IntPtr geometry, string filePath);

		[Token(Token = "0x60000C3")]
		[Address(RVA = "0xAE1CE0", Offset = "0xAE1CE0", VA = "0xAE1CE0", Slot = "12")]
		public int AudioGeometryReadMeshFile(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60000C4")]
		[Address(RVA = "0xAE1CEC", Offset = "0xAE1CEC", VA = "0xAE1CEC")]
		private static extern int ovrAudio_AudioGeometryWriteMeshFileObj(IntPtr geometry, string filePath);

		[Token(Token = "0x60000C5")]
		[Address(RVA = "0xAE1D8C", Offset = "0xAE1D8C", VA = "0xAE1D8C", Slot = "13")]
		public int AudioGeometryWriteMeshFileObj(IntPtr geometry, string filePath)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60000C6")]
		[Address(RVA = "0xAE1D98", Offset = "0xAE1D98", VA = "0xAE1D98")]
		private static extern int ovrAudio_CreateAudioMaterial(IntPtr context, out IntPtr material);

		[Token(Token = "0x60000C7")]
		[Address(RVA = "0xAE1E1C", Offset = "0xAE1E1C", VA = "0xAE1E1C", Slot = "15")]
		public int CreateAudioMaterial(out IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60000C8")]
		[Address(RVA = "0xAE1E34", Offset = "0xAE1E34", VA = "0xAE1E34")]
		private static extern int ovrAudio_DestroyAudioMaterial(IntPtr material);

		[Token(Token = "0x60000C9")]
		[Address(RVA = "0xAE1EB0", Offset = "0xAE1EB0", VA = "0xAE1EB0", Slot = "16")]
		public int DestroyAudioMaterial(IntPtr material)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60000CA")]
		[Address(RVA = "0xAE1EB8", Offset = "0xAE1EB8", VA = "0xAE1EB8")]
		private static extern int ovrAudio_AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value);

		[Token(Token = "0x60000CB")]
		[Address(RVA = "0xAE1F54", Offset = "0xAE1F54", VA = "0xAE1F54", Slot = "17")]
		public int AudioMaterialSetFrequency(IntPtr material, MaterialProperty property, float frequency, float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60000CC")]
		[Address(RVA = "0xAE1F60", Offset = "0xAE1F60", VA = "0xAE1F60")]
		private static extern int ovrAudio_AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value);

		[Token(Token = "0x60000CD")]
		[Address(RVA = "0xAE2004", Offset = "0xAE2004", VA = "0xAE2004", Slot = "14")]
		public int AudioMaterialGetFrequency(IntPtr material, MaterialProperty property, float frequency, out float value)
		{
			return default(int);
		}

		[PreserveSig]
		[Token(Token = "0x60000CE")]
		[Address(RVA = "0xAE2014", Offset = "0xAE2014", VA = "0xAE2014")]
		private static extern int ovrAudio_AudioMaterialReset(IntPtr material, MaterialProperty property);

		[Token(Token = "0x60000CF")]
		[Address(RVA = "0xAE2098", Offset = "0xAE2098", VA = "0xAE2098", Slot = "18")]
		public int AudioMaterialReset(IntPtr material, MaterialProperty property)
		{
			return default(int);
		}

		[Token(Token = "0x60000D0")]
		[Address(RVA = "0xADFC34", Offset = "0xADFC34", VA = "0xADFC34")]
		public FMODPluginInterface()
		{
		}
	}

	[Token(Token = "0x400005A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static PropagationInterface CachedInterface;

	[Token(Token = "0x1700000B")]
	public static PropagationInterface Interface
	{
		[Token(Token = "0x600005B")]
		[Address(RVA = "0xADC498", Offset = "0xADC498", VA = "0xADC498")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x600005C")]
	[Address(RVA = "0xADF86C", Offset = "0xADF86C", VA = "0xADF86C")]
	private static PropagationInterface FindInterface()
	{
		return null;
	}

	[Token(Token = "0x600005D")]
	[Address(RVA = "0xADFCE4", Offset = "0xADFCE4", VA = "0xADFCE4")]
	public ONSPPropagation()
	{
	}
}
[Token(Token = "0x200001A")]
public sealed class ONSPPropagationMaterial : MonoBehaviour
{
	[Token(Token = "0x200001B")]
	public enum Preset
	{
		[Token(Token = "0x4000083")]
		Custom,
		[Token(Token = "0x4000084")]
		AcousticTile,
		[Token(Token = "0x4000085")]
		Brick,
		[Token(Token = "0x4000086")]
		BrickPainted,
		[Token(Token = "0x4000087")]
		Carpet,
		[Token(Token = "0x4000088")]
		CarpetHeavy,
		[Token(Token = "0x4000089")]
		CarpetHeavyPadded,
		[Token(Token = "0x400008A")]
		CeramicTile,
		[Token(Token = "0x400008B")]
		Concrete,
		[Token(Token = "0x400008C")]
		ConcreteRough,
		[Token(Token = "0x400008D")]
		ConcreteBlock,
		[Token(Token = "0x400008E")]
		ConcreteBlockPainted,
		[Token(Token = "0x400008F")]
		Curtain,
		[Token(Token = "0x4000090")]
		Foliage,
		[Token(Token = "0x4000091")]
		Glass,
		[Token(Token = "0x4000092")]
		GlassHeavy,
		[Token(Token = "0x4000093")]
		Grass,
		[Token(Token = "0x4000094")]
		Gravel,
		[Token(Token = "0x4000095")]
		GypsumBoard,
		[Token(Token = "0x4000096")]
		PlasterOnBrick,
		[Token(Token = "0x4000097")]
		PlasterOnConcreteBlock,
		[Token(Token = "0x4000098")]
		Soil,
		[Token(Token = "0x4000099")]
		SoundProof,
		[Token(Token = "0x400009A")]
		Snow,
		[Token(Token = "0x400009B")]
		Steel,
		[Token(Token = "0x400009C")]
		Water,
		[Token(Token = "0x400009D")]
		WoodThin,
		[Token(Token = "0x400009E")]
		WoodThick,
		[Token(Token = "0x400009F")]
		WoodFloor,
		[Token(Token = "0x40000A0")]
		WoodOnConcrete
	}

	[Serializable]
	[Token(Token = "0x200001C")]
	public sealed class Point
	{
		[Token(Token = "0x40000A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float frequency;

		[Token(Token = "0x40000A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float data;

		[Token(Token = "0x60000F7")]
		[Address(RVA = "0xAF32C4", Offset = "0xAF32C4", VA = "0xAF32C4")]
		public Point(float frequency = 0f, float data = 0f)
		{
		}

		[Token(Token = "0x60000F8")]
		[Address(RVA = "0xAF3434", Offset = "0xAF3434", VA = "0xAF3434")]
		public static implicit operator Point(Vector2 v)
		{
			return null;
		}

		[Token(Token = "0x60000F9")]
		[Address(RVA = "0xAF34A4", Offset = "0xAF34A4", VA = "0xAF34A4")]
		public static implicit operator Vector2(Point point)
		{
			return default(Vector2);
		}
	}

	[Serializable]
	[Token(Token = "0x200001D")]
	public sealed class Spectrum
	{
		[Token(Token = "0x40000A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int selection;

		[Token(Token = "0x40000A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Point> points;

		[Token(Token = "0x17000010")]
		public float this[float f]
		{
			[Token(Token = "0x60000FA")]
			[Address(RVA = "0xAF34BC", Offset = "0xAF34BC", VA = "0xAF34BC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x60000FB")]
		[Address(RVA = "0xAF33B0", Offset = "0xAF33B0", VA = "0xAF33B0")]
		public Spectrum()
		{
		}
	}

	[Token(Token = "0x400007D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public IntPtr materialHandle;

	[Token(Token = "0x400007E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Tooltip("Absorption")]
	public Spectrum absorption;

	[Token(Token = "0x400007F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Tooltip("Transmission")]
	public Spectrum transmission;

	[Token(Token = "0x4000080")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Tooltip("Scattering")]
	public Spectrum scattering;

	[Token(Token = "0x4000081")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private Preset preset_;

	[Token(Token = "0x1700000F")]
	public Preset preset
	{
		[Token(Token = "0x60000D1")]
		[Address(RVA = "0xAE20A4", Offset = "0xAE20A4", VA = "0xAE20A4")]
		get
		{
			return default(Preset);
		}
		[Token(Token = "0x60000D2")]
		[Address(RVA = "0xAE20AC", Offset = "0xAE20AC", VA = "0xAE20AC")]
		set
		{
		}
	}

	[Token(Token = "0x60000D3")]
	[Address(RVA = "0xAE20D0", Offset = "0xAE20D0", VA = "0xAE20D0")]
	private void Start()
	{
	}

	[Token(Token = "0x60000D4")]
	[Address(RVA = "0xADF17C", Offset = "0xADF17C", VA = "0xADF17C")]
	public void StartInternal()
	{
	}

	[Token(Token = "0x60000D5")]
	[Address(RVA = "0xAE26F0", Offset = "0xAE26F0", VA = "0xAE26F0")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60000D6")]
	[Address(RVA = "0xAE26F4", Offset = "0xAE26F4", VA = "0xAE26F4")]
	public void DestroyInternal()
	{
	}

	[Token(Token = "0x60000D7")]
	[Address(RVA = "0xAE20D4", Offset = "0xAE20D4", VA = "0xAE20D4")]
	public void UploadMaterial()
	{
	}

	[Token(Token = "0x60000D8")]
	[Address(RVA = "0xADEB58", Offset = "0xADEB58", VA = "0xADEB58")]
	public void SetPreset(Preset preset)
	{
	}

	[Token(Token = "0x60000D9")]
	[Address(RVA = "0xAE27F0", Offset = "0xAE27F0", VA = "0xAE27F0")]
	private static void AcousticTile(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60000DA")]
	[Address(RVA = "0xAE31D0", Offset = "0xAE31D0", VA = "0xAE31D0")]
	private static void Brick(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60000DB")]
	[Address(RVA = "0xAE3BB0", Offset = "0xAE3BB0", VA = "0xAE3BB0")]
	private static void BrickPainted(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60000DC")]
	[Address(RVA = "0xAE4590", Offset = "0xAE4590", VA = "0xAE4590")]
	private static void Carpet(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60000DD")]
	[Address(RVA = "0xAE4F70", Offset = "0xAE4F70", VA = "0xAE4F70")]
	private static void CarpetHeavy(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60000DE")]
	[Address(RVA = "0xAE5950", Offset = "0xAE5950", VA = "0xAE5950")]
	private static void CarpetHeavyPadded(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60000DF")]
	[Address(RVA = "0xAE6330", Offset = "0xAE6330", VA = "0xAE6330")]
	private static void CeramicTile(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60000E0")]
	[Address(RVA = "0xAE6D10", Offset = "0xAE6D10", VA = "0xAE6D10")]
	private static void Concrete(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60000E1")]
	[Address(RVA = "0xAE76F0", Offset = "0xAE76F0", VA = "0xAE76F0")]
	private static void ConcreteRough(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60000E2")]
	[Address(RVA = "0xAE80D0", Offset = "0xAE80D0", VA = "0xAE80D0")]
	private static void ConcreteBlock(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60000E3")]
	[Address(RVA = "0xAE8AB0", Offset = "0xAE8AB0", VA = "0xAE8AB0")]
	private static void ConcreteBlockPainted(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60000E4")]
	[Address(RVA = "0xAE9490", Offset = "0xAE9490", VA = "0xAE9490")]
	private static void Curtain(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60000E5")]
	[Address(RVA = "0xAE9E70", Offset = "0xAE9E70", VA = "0xAE9E70")]
	private static void Foliage(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60000E6")]
	[Address(RVA = "0xAEA850", Offset = "0xAEA850", VA = "0xAEA850")]
	private static void Glass(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60000E7")]
	[Address(RVA = "0xAEB228", Offset = "0xAEB228", VA = "0xAEB228")]
	private static void GlassHeavy(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60000E8")]
	[Address(RVA = "0xAEBC08", Offset = "0xAEBC08", VA = "0xAEBC08")]
	private static void Grass(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60000E9")]
	[Address(RVA = "0xAEC2FC", Offset = "0xAEC2FC", VA = "0xAEC2FC")]
	private static void Gravel(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60000EA")]
	[Address(RVA = "0xAEC9F0", Offset = "0xAEC9F0", VA = "0xAEC9F0")]
	private static void GypsumBoard(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60000EB")]
	[Address(RVA = "0xAED3D0", Offset = "0xAED3D0", VA = "0xAED3D0")]
	private static void PlasterOnBrick(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60000EC")]
	[Address(RVA = "0xAEDDB0", Offset = "0xAEDDB0", VA = "0xAEDDB0")]
	private static void PlasterOnConcreteBlock(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60000ED")]
	[Address(RVA = "0xAEE790", Offset = "0xAEE790", VA = "0xAEE790")]
	private static void Soil(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60000EE")]
	[Address(RVA = "0xAEEE84", Offset = "0xAEEE84", VA = "0xAEEE84")]
	private static void SoundProof(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60000EF")]
	[Address(RVA = "0xAEF0A0", Offset = "0xAEF0A0", VA = "0xAEF0A0")]
	private static void Snow(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60000F0")]
	[Address(RVA = "0xAEF794", Offset = "0xAEF794", VA = "0xAEF794")]
	private static void Steel(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60000F1")]
	[Address(RVA = "0xAF016C", Offset = "0xAF016C", VA = "0xAF016C")]
	private static void Water(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60000F2")]
	[Address(RVA = "0xAF0B4C", Offset = "0xAF0B4C", VA = "0xAF0B4C")]
	private static void WoodThin(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60000F3")]
	[Address(RVA = "0xAF1524", Offset = "0xAF1524", VA = "0xAF1524")]
	private static void WoodThick(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60000F4")]
	[Address(RVA = "0xAF1F04", Offset = "0xAF1F04", VA = "0xAF1F04")]
	private static void WoodFloor(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60000F5")]
	[Address(RVA = "0xAF28E4", Offset = "0xAF28E4", VA = "0xAF28E4")]
	private static void WoodOnConcrete(ref ONSPPropagationMaterial material)
	{
	}

	[Token(Token = "0x60000F6")]
	[Address(RVA = "0xAF32F0", Offset = "0xAF32F0", VA = "0xAF32F0")]
	public ONSPPropagationMaterial()
	{
	}
}
[Token(Token = "0x200001F")]
public class ONSPPropagationSettings : MonoBehaviour
{
	[Token(Token = "0x40000A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float quality;

	[Token(Token = "0x6000100")]
	[Address(RVA = "0xAF397C", Offset = "0xAF397C", VA = "0xAF397C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000101")]
	[Address(RVA = "0xAF3A3C", Offset = "0xAF3A3C", VA = "0xAF3A3C")]
	public ONSPPropagationSettings()
	{
	}
}
[Token(Token = "0x2000020")]
public sealed class ONSPSettings : ScriptableObject
{
	[Token(Token = "0x40000A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	public int voiceLimit;

	[Token(Token = "0x40000AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static ONSPSettings instance;

	[Token(Token = "0x17000011")]
	public static ONSPSettings Instance
	{
		[Token(Token = "0x6000102")]
		[Address(RVA = "0xADB56C", Offset = "0xADB56C", VA = "0xADB56C")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x6000103")]
	[Address(RVA = "0xAF3A4C", Offset = "0xAF3A4C", VA = "0xAF3A4C")]
	public ONSPSettings()
	{
	}
}
[Token(Token = "0x2000021")]
public class ONSPVersion : MonoBehaviour
{
	[Token(Token = "0x40000AB")]
	public const string strONSPS = "AudioPluginOculusSpatializer";

	[PreserveSig]
	[Token(Token = "0x6000104")]
	[Address(RVA = "0xAF3A5C", Offset = "0xAF3A5C", VA = "0xAF3A5C")]
	private static extern void ONSP_GetVersion(ref int Major, ref int Minor, ref int Patch);

	[Token(Token = "0x6000105")]
	[Address(RVA = "0xAF3AF0", Offset = "0xAF3AF0", VA = "0xAF3AF0")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000106")]
	[Address(RVA = "0xAF3C00", Offset = "0xAF3C00", VA = "0xAF3C00")]
	private void Start()
	{
	}

	[Token(Token = "0x6000107")]
	[Address(RVA = "0xAF3C04", Offset = "0xAF3C04", VA = "0xAF3C04")]
	private void Update()
	{
	}

	[Token(Token = "0x6000108")]
	[Address(RVA = "0xAF3C08", Offset = "0xAF3C08", VA = "0xAF3C08")]
	public ONSPVersion()
	{
	}
}
[Token(Token = "0x2000022")]
public class FixNonUniformScale : MonoBehaviour
{
	[Token(Token = "0x40000AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private bool running;

	[Token(Token = "0x6000109")]
	[Address(RVA = "0xAF3C10", Offset = "0xAF3C10", VA = "0xAF3C10")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x600010A")]
	[Address(RVA = "0xAF3C8C", Offset = "0xAF3C8C", VA = "0xAF3C8C")]
	public void MakeUniform()
	{
	}

	[Token(Token = "0x600010B")]
	[Address(RVA = "0xAF4114", Offset = "0xAF4114", VA = "0xAF4114")]
	public FixNonUniformScale()
	{
	}
}
[Token(Token = "0x2000023")]
[AddComponentMenu("ClockStone/Audio/AudioController")]
public class AudioController : SingletonMonoBehaviour<AudioController>, ISerializationCallbackReceiver
{
	[Token(Token = "0x40000AD")]
	public const string AUDIO_TOOLKIT_VERSION = "10.3";

	[Token(Token = "0x40000AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject AudioObjectPrefab;

	[Token(Token = "0x40000AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool Persistent;

	[Token(Token = "0x40000B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool UnloadAudioClipsOnDestroy;

	[Token(Token = "0x40000B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	public bool UsePooledAudioObjects;

	[Token(Token = "0x40000B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
	public bool PlayWithZeroVolume;

	[Token(Token = "0x40000B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool EqualPowerCrossfade;

	[Token(Token = "0x40000B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float musicCrossFadeTime;

	[Token(Token = "0x40000B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float ambienceSoundCrossFadeTime;

	[Token(Token = "0x40000B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool specifyCrossFadeInAndOutSeperately;

	[Token(Token = "0x40000B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[SerializeField]
	private float _musicCrossFadeTime_In;

	[Token(Token = "0x40000B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[SerializeField]
	private float _musicCrossFadeTime_Out;

	[Token(Token = "0x40000B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[SerializeField]
	private float _ambienceSoundCrossFadeTime_In;

	[Token(Token = "0x40000BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[SerializeField]
	private float _ambienceSoundCrossFadeTime_Out;

	[Token(Token = "0x40000BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public AudioCategory[] AudioCategories;

	[Token(Token = "0x40000BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Playlist[] musicPlaylists;

	[Token(Token = "0x40000BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Action<Playlist> playlistFinishedEvent;

	[Token(Token = "0x40000BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	[Obsolete]
	public string[] musicPlaylist;

	[Token(Token = "0x40000BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool loopPlaylist;

	[Token(Token = "0x40000C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
	public bool shufflePlaylist;

	[Token(Token = "0x40000C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
	public bool crossfadePlaylist;

	[Token(Token = "0x40000C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float delayBetweenPlaylistTracks;

	[Token(Token = "0x40000C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	protected static PoolableReference<AudioObject> _currentMusicReference;

	[Token(Token = "0x40000C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	protected static PoolableReference<AudioObject> _currentAmbienceReference;

	[Token(Token = "0x40000C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private string _currentPlaylistName;

	[Token(Token = "0x40000C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	protected AudioListener _currentAudioListener;

	[Token(Token = "0x40000C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static Transform _musicParent;

	[Token(Token = "0x40000C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static Transform _ambienceParent;

	[Token(Token = "0x40000C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool _musicEnabled;

	[Token(Token = "0x40000CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
	private bool _ambienceSoundEnabled;

	[Token(Token = "0x40000CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
	private bool _soundMuted;

	[Token(Token = "0x40000CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x83")]
	private bool _categoriesValidated;

	[Token(Token = "0x40000CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	[SerializeField]
	private bool _isAdditionalAudioController;

	[Token(Token = "0x40000CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x85")]
	[SerializeField]
	private bool _audioDisabled;

	[Token(Token = "0x40000CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Dictionary<string, AudioItem> _audioItems;

	[Token(Token = "0x40000D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static List<int> _playlistPlayed;

	[Token(Token = "0x40000D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static bool _isPlaylistPlaying;

	[Token(Token = "0x40000D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[SerializeField]
	private float _volume;

	[Token(Token = "0x40000D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static double _systemTime;

	[Token(Token = "0x40000D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static double _lastSystemTime;

	[Token(Token = "0x40000D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static double _systemDeltaTime;

	[Token(Token = "0x40000D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static List<AudioController> _additionalControllerToRegister;

	[Token(Token = "0x40000D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private List<AudioController> _additionalAudioControllers;

	[Token(Token = "0x40000D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public AudioController_CurrentInspectorSelection _currentInspectorSelection;

	[Token(Token = "0x17000012")]
	public bool DisableAudio
	{
		[Token(Token = "0x600010D")]
		[Address(RVA = "0xAF4134", Offset = "0xAF4134", VA = "0xAF4134")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600010C")]
		[Address(RVA = "0xAF411C", Offset = "0xAF411C", VA = "0xAF411C")]
		set
		{
		}
	}

	[Token(Token = "0x17000013")]
	public bool isAdditionalAudioController
	{
		[Token(Token = "0x600010E")]
		[Address(RVA = "0xAF413C", Offset = "0xAF413C", VA = "0xAF413C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x600010F")]
		[Address(RVA = "0xAF4144", Offset = "0xAF4144", VA = "0xAF4144")]
		set
		{
		}
	}

	[Token(Token = "0x17000014")]
	public float Volume
	{
		[Token(Token = "0x6000110")]
		[Address(RVA = "0xAF4150", Offset = "0xAF4150", VA = "0xAF4150")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000111")]
		[Address(RVA = "0xAF4158", Offset = "0xAF4158", VA = "0xAF4158")]
		set
		{
		}
	}

	[Token(Token = "0x17000015")]
	public bool musicEnabled
	{
		[Token(Token = "0x6000112")]
		[Address(RVA = "0xAF4278", Offset = "0xAF4278", VA = "0xAF4278")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000113")]
		[Address(RVA = "0xAF4280", Offset = "0xAF4280", VA = "0xAF4280")]
		set
		{
		}
	}

	[Token(Token = "0x17000016")]
	public bool ambienceSoundEnabled
	{
		[Token(Token = "0x6000114")]
		[Address(RVA = "0xAF441C", Offset = "0xAF441C", VA = "0xAF441C")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000115")]
		[Address(RVA = "0xAF4424", Offset = "0xAF4424", VA = "0xAF4424")]
		set
		{
		}
	}

	[Token(Token = "0x17000017")]
	public bool soundMuted
	{
		[Token(Token = "0x6000116")]
		[Address(RVA = "0xAF45C0", Offset = "0xAF45C0", VA = "0xAF45C0")]
		get
		{
			return default(bool);
		}
		[Token(Token = "0x6000117")]
		[Address(RVA = "0xAF45C8", Offset = "0xAF45C8", VA = "0xAF45C8")]
		set
		{
		}
	}

	[Token(Token = "0x17000018")]
	public float musicCrossFadeTime_In
	{
		[Token(Token = "0x6000118")]
		[Address(RVA = "0xAF45D4", Offset = "0xAF45D4", VA = "0xAF45D4")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x6000119")]
		[Address(RVA = "0xAF45F0", Offset = "0xAF45F0", VA = "0xAF45F0")]
		set
		{
		}
	}

	[Token(Token = "0x17000019")]
	public float musicCrossFadeTime_Out
	{
		[Token(Token = "0x600011A")]
		[Address(RVA = "0xAF45F8", Offset = "0xAF45F8", VA = "0xAF45F8")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600011B")]
		[Address(RVA = "0xAF4614", Offset = "0xAF4614", VA = "0xAF4614")]
		set
		{
		}
	}

	[Token(Token = "0x1700001A")]
	public float ambienceSoundCrossFadeTime_In
	{
		[Token(Token = "0x600011C")]
		[Address(RVA = "0xAF461C", Offset = "0xAF461C", VA = "0xAF461C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600011D")]
		[Address(RVA = "0xAF4638", Offset = "0xAF4638", VA = "0xAF4638")]
		set
		{
		}
	}

	[Token(Token = "0x1700001B")]
	public float ambienceSoundCrossFadeTime_Out
	{
		[Token(Token = "0x600011E")]
		[Address(RVA = "0xAF4640", Offset = "0xAF4640", VA = "0xAF4640")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x600011F")]
		[Address(RVA = "0xAF465C", Offset = "0xAF465C", VA = "0xAF465C")]
		set
		{
		}
	}

	[Token(Token = "0x1700001C")]
	public static double systemTime
	{
		[Token(Token = "0x6000120")]
		[Address(RVA = "0xAF4664", Offset = "0xAF4664", VA = "0xAF4664")]
		get
		{
			return default(double);
		}
	}

	[Token(Token = "0x1700001D")]
	public static double systemDeltaTime
	{
		[Token(Token = "0x6000121")]
		[Address(RVA = "0xAF46BC", Offset = "0xAF46BC", VA = "0xAF46BC")]
		get
		{
			return default(double);
		}
	}

	[Token(Token = "0x1700001E")]
	public static Transform musicParent
	{
		[Token(Token = "0x6000123")]
		[Address(RVA = "0xAF4770", Offset = "0xAF4770", VA = "0xAF4770")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000122")]
		[Address(RVA = "0xAF4714", Offset = "0xAF4714", VA = "0xAF4714")]
		set
		{
		}
	}

	[Token(Token = "0x1700001F")]
	public static Transform ambienceParent
	{
		[Token(Token = "0x6000125")]
		[Address(RVA = "0xAF4824", Offset = "0xAF4824", VA = "0xAF4824")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000124")]
		[Address(RVA = "0xAF47C8", Offset = "0xAF47C8", VA = "0xAF47C8")]
		set
		{
		}
	}

	[Token(Token = "0x17000020")]
	private static AudioObject _currentMusic
	{
		[Token(Token = "0x6000172")]
		[Address(RVA = "0xAF43A4", Offset = "0xAF43A4", VA = "0xAF43A4")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000171")]
		[Address(RVA = "0xAFA144", Offset = "0xAFA144", VA = "0xAFA144")]
		set
		{
		}
	}

	[Token(Token = "0x17000021")]
	private static AudioObject _currentAmbienceSound
	{
		[Token(Token = "0x6000174")]
		[Address(RVA = "0xAF4548", Offset = "0xAF4548", VA = "0xAF4548")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000173")]
		[Address(RVA = "0xAFA1C8", Offset = "0xAFA1C8", VA = "0xAFA1C8")]
		set
		{
		}
	}

	[Token(Token = "0x17000022")]
	public override bool isSingletonObject
	{
		[Token(Token = "0x6000194")]
		[Address(RVA = "0xAFC008", Offset = "0xAFC008", VA = "0xAFC008", Slot = "7")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x6000126")]
	[Address(RVA = "0xAF487C", Offset = "0xAF487C", VA = "0xAF487C")]
	public static AudioObject PlayMusic(string audioID, float volume = 1f, float delay = 0f, float startTime = 0f)
	{
		return null;
	}

	[Token(Token = "0x6000127")]
	[Address(RVA = "0xAF4B38", Offset = "0xAF4B38", VA = "0xAF4B38")]
	public static AudioObject PlayMusic(string audioID, Vector3 worldPosition, [Optional] Transform parentObj, float volume = 1f, float delay = 0f, float startTime = 0f)
	{
		return null;
	}

	[Token(Token = "0x6000128")]
	[Address(RVA = "0xAF4EB0", Offset = "0xAF4EB0", VA = "0xAF4EB0")]
	public static AudioObject PlayMusic(string audioID, Transform parentObj, float volume = 1f, float delay = 0f, float startTime = 0f)
	{
		return null;
	}

	[Token(Token = "0x6000129")]
	[Address(RVA = "0xAF4F84", Offset = "0xAF4F84", VA = "0xAF4F84")]
	public static bool StopMusic()
	{
		return default(bool);
	}

	[Token(Token = "0x600012A")]
	[Address(RVA = "0xAF50AC", Offset = "0xAF50AC", VA = "0xAF50AC")]
	public static bool StopMusic(float fadeOut)
	{
		return default(bool);
	}

	[Token(Token = "0x600012B")]
	[Address(RVA = "0xAF5108", Offset = "0xAF5108", VA = "0xAF5108")]
	public static bool PauseMusic(float fadeOut = 0f)
	{
		return default(bool);
	}

	[Token(Token = "0x600012C")]
	[Address(RVA = "0xAF5234", Offset = "0xAF5234", VA = "0xAF5234")]
	public static bool IsMusicPaused()
	{
		return default(bool);
	}

	[Token(Token = "0x600012D")]
	[Address(RVA = "0xAF52F8", Offset = "0xAF52F8", VA = "0xAF52F8")]
	public static bool UnpauseMusic(float fadeIn = 0f)
	{
		return default(bool);
	}

	[Token(Token = "0x600012E")]
	[Address(RVA = "0xAF5418", Offset = "0xAF5418", VA = "0xAF5418")]
	public static AudioObject PlayAmbienceSound(string audioID, float volume = 1f, float delay = 0f, float startTime = 0f)
	{
		return null;
	}

	[Token(Token = "0x600012F")]
	[Address(RVA = "0xAF56A4", Offset = "0xAF56A4", VA = "0xAF56A4")]
	public static AudioObject PlayAmbienceSound(string audioID, Vector3 worldPosition, [Optional] Transform parentObj, float volume = 1f, float delay = 0f, float startTime = 0f)
	{
		return null;
	}

	[Token(Token = "0x6000130")]
	[Address(RVA = "0xAF59EC", Offset = "0xAF59EC", VA = "0xAF59EC")]
	public static AudioObject PlayAmbienceSound(string audioID, Transform parentObj, float volume = 1f, float delay = 0f, float startTime = 0f)
	{
		return null;
	}

	[Token(Token = "0x6000131")]
	[Address(RVA = "0xAF5A90", Offset = "0xAF5A90", VA = "0xAF5A90")]
	public static bool StopAmbienceSound()
	{
		return default(bool);
	}

	[Token(Token = "0x6000132")]
	[Address(RVA = "0xAF5BB8", Offset = "0xAF5BB8", VA = "0xAF5BB8")]
	public static bool StopAmbienceSound(float fadeOut)
	{
		return default(bool);
	}

	[Token(Token = "0x6000133")]
	[Address(RVA = "0xAF5C14", Offset = "0xAF5C14", VA = "0xAF5C14")]
	public static bool PauseAmbienceSound(float fadeOut = 0f)
	{
		return default(bool);
	}

	[Token(Token = "0x6000134")]
	[Address(RVA = "0xAF5D40", Offset = "0xAF5D40", VA = "0xAF5D40")]
	public static bool IsAmbienceSoundPaused()
	{
		return default(bool);
	}

	[Token(Token = "0x6000135")]
	[Address(RVA = "0xAF5E04", Offset = "0xAF5E04", VA = "0xAF5E04")]
	public static bool UnpauseAmbienceSound(float fadeIn = 0f)
	{
		return default(bool);
	}

	[Token(Token = "0x6000136")]
	[Address(RVA = "0xAF5F24", Offset = "0xAF5F24", VA = "0xAF5F24")]
	public static int EnqueueMusic(string audioID)
	{
		return default(int);
	}

	[Token(Token = "0x6000137")]
	[Address(RVA = "0xAF607C", Offset = "0xAF607C", VA = "0xAF607C")]
	private Playlist _GetCurrentPlaylist()
	{
		return null;
	}

	[Token(Token = "0x6000138")]
	[Address(RVA = "0xAF60B0", Offset = "0xAF60B0", VA = "0xAF60B0")]
	public Playlist GetPlaylistByName(string playlistName)
	{
		return null;
	}

	[Token(Token = "0x6000139")]
	[Address(RVA = "0xAF6238", Offset = "0xAF6238", VA = "0xAF6238")]
	public static string[] GetMusicPlaylist([Optional] string playlistName)
	{
		return null;
	}

	[Token(Token = "0x600013A")]
	[Address(RVA = "0xAF6314", Offset = "0xAF6314", VA = "0xAF6314")]
	public static bool SetCurrentMusicPlaylist(string playlistName)
	{
		return default(bool);
	}

	[Token(Token = "0x600013B")]
	[Address(RVA = "0xAF6400", Offset = "0xAF6400", VA = "0xAF6400")]
	public static AudioObject PlayMusicPlaylist([Optional] string playlistName)
	{
		return null;
	}

	[Token(Token = "0x600013C")]
	[Address(RVA = "0xAF64CC", Offset = "0xAF64CC", VA = "0xAF64CC")]
	public static AudioObject PlayNextMusicOnPlaylist()
	{
		return null;
	}

	[Token(Token = "0x600013D")]
	[Address(RVA = "0xAF6678", Offset = "0xAF6678", VA = "0xAF6678")]
	public static AudioObject PlayPreviousMusicOnPlaylist()
	{
		return null;
	}

	[Token(Token = "0x600013E")]
	[Address(RVA = "0xAF656C", Offset = "0xAF656C", VA = "0xAF656C")]
	public static bool IsPlaylistPlaying()
	{
		return default(bool);
	}

	[Token(Token = "0x600013F")]
	[Address(RVA = "0xAF6748", Offset = "0xAF6748", VA = "0xAF6748")]
	public static void ClearPlaylists()
	{
	}

	[Token(Token = "0x6000140")]
	[Address(RVA = "0xAF6798", Offset = "0xAF6798", VA = "0xAF6798")]
	public static void AddPlaylist(string playlistName, string[] audioItemIDs)
	{
	}

	[Token(Token = "0x6000141")]
	[Address(RVA = "0xAF6848", Offset = "0xAF6848", VA = "0xAF6848")]
	public static AudioObject Play(string audioID)
	{
		return null;
	}

	[Token(Token = "0x6000142")]
	[Address(RVA = "0xAF6C30", Offset = "0xAF6C30", VA = "0xAF6C30")]
	public static AudioObject Play(string audioID, float volume, float delay = 0f, float startTime = 0f)
	{
		return null;
	}

	[Token(Token = "0x6000143")]
	[Address(RVA = "0xAF6DD4", Offset = "0xAF6DD4", VA = "0xAF6DD4")]
	public static AudioObject Play(string audioID, Transform parentObj)
	{
		return null;
	}

	[Token(Token = "0x6000144")]
	[Address(RVA = "0xAF6E78", Offset = "0xAF6E78", VA = "0xAF6E78")]
	public static AudioObject Play(string audioID, Transform parentObj, float volume, float delay = 0f, float startTime = 0f)
	{
		return null;
	}

	[Token(Token = "0x6000145")]
	[Address(RVA = "0xAF6F30", Offset = "0xAF6F30", VA = "0xAF6F30")]
	public static AudioObject Play(string audioID, Vector3 worldPosition, [Optional] Transform parentObj)
	{
		return null;
	}

	[Token(Token = "0x6000146")]
	[Address(RVA = "0xAF6B70", Offset = "0xAF6B70", VA = "0xAF6B70")]
	public static AudioObject Play(string audioID, Vector3 worldPosition, Transform parentObj, float volume, float delay = 0f, float startTime = 0f)
	{
		return null;
	}

	[Token(Token = "0x6000147")]
	[Address(RVA = "0xAF7388", Offset = "0xAF7388", VA = "0xAF7388")]
	public static AudioObject PlayScheduled(string audioID, double dspTime, Vector3 worldPosition, [Optional] Transform parentObj, float volume = 1f, float startTime = 0f)
	{
		return null;
	}

	[Token(Token = "0x6000148")]
	[Address(RVA = "0xAF7448", Offset = "0xAF7448", VA = "0xAF7448")]
	public static AudioObject PlayAfter(string audioID, AudioObject playingAudio, double deltaDspTime = 0.0, float volume = 1f, float startTime = 0f)
	{
		return null;
	}

	[Token(Token = "0x6000149")]
	[Address(RVA = "0xAF7568", Offset = "0xAF7568", VA = "0xAF7568")]
	public static bool Stop(string audioID, float fadeOutLength)
	{
		return default(bool);
	}

	[Token(Token = "0x600014A")]
	[Address(RVA = "0xAF7970", Offset = "0xAF7970", VA = "0xAF7970")]
	public static bool Stop(string audioID)
	{
		return default(bool);
	}

	[Token(Token = "0x600014B")]
	[Address(RVA = "0xAF79C8", Offset = "0xAF79C8", VA = "0xAF79C8")]
	public static void StopAll(float fadeOutLength)
	{
	}

	[Token(Token = "0x600014C")]
	[Address(RVA = "0xAF7D4C", Offset = "0xAF7D4C", VA = "0xAF7D4C")]
	public static void StopAll()
	{
	}

	[Token(Token = "0x600014D")]
	[Address(RVA = "0xAF7D9C", Offset = "0xAF7D9C", VA = "0xAF7D9C")]
	public static void PauseAll(float fadeOutLength = 0f)
	{
	}

	[Token(Token = "0x600014E")]
	[Address(RVA = "0xAF7EF0", Offset = "0xAF7EF0", VA = "0xAF7EF0")]
	public static void UnpauseAll(float fadeInLength = 0f)
	{
	}

	[Token(Token = "0x600014F")]
	[Address(RVA = "0xAF80F4", Offset = "0xAF80F4", VA = "0xAF80F4")]
	public static void PauseCategory(string categoryName, float fadeOutLength = 0f)
	{
	}

	[Token(Token = "0x6000150")]
	[Address(RVA = "0xAF84DC", Offset = "0xAF84DC", VA = "0xAF84DC")]
	public static void UnpauseCategory(string categoryName, float fadeInLength = 0f)
	{
	}

	[Token(Token = "0x6000151")]
	[Address(RVA = "0xAF86FC", Offset = "0xAF86FC", VA = "0xAF86FC")]
	public static void StopCategory(string categoryName, float fadeOutLength = 0f)
	{
	}

	[Token(Token = "0x6000152")]
	[Address(RVA = "0xAF8904", Offset = "0xAF8904", VA = "0xAF8904")]
	public static bool IsPlaying(string audioID)
	{
		return default(bool);
	}

	[Token(Token = "0x6000153")]
	[Address(RVA = "0xAF7790", Offset = "0xAF7790", VA = "0xAF7790")]
	public static List<AudioObject> GetPlayingAudioObjects(string audioID, bool includePausedAudio = false)
	{
		return null;
	}

	[Token(Token = "0x6000154")]
	[Address(RVA = "0xAF82FC", Offset = "0xAF82FC", VA = "0xAF82FC")]
	public static List<AudioObject> GetPlayingAudioObjectsInCategory(string categoryName, bool includePausedAudio = false)
	{
		return null;
	}

	[Token(Token = "0x6000155")]
	[Address(RVA = "0xAF7B1C", Offset = "0xAF7B1C", VA = "0xAF7B1C")]
	public static List<AudioObject> GetPlayingAudioObjects(bool includePausedAudio = false)
	{
		return null;
	}

	[Token(Token = "0x6000156")]
	[Address(RVA = "0xAF8980", Offset = "0xAF8980", VA = "0xAF8980")]
	public static int GetPlayingAudioObjectsCount(string audioID, bool includePausedAudio = false)
	{
		return default(int);
	}

	[Token(Token = "0x6000157")]
	[Address(RVA = "0xAF8AB4", Offset = "0xAF8AB4", VA = "0xAF8AB4")]
	public static void EnableMusic(bool b)
	{
	}

	[Token(Token = "0x6000158")]
	[Address(RVA = "0xAF8B08", Offset = "0xAF8B08", VA = "0xAF8B08")]
	public static void EnableAmbienceSound(bool b)
	{
	}

	[Token(Token = "0x6000159")]
	[Address(RVA = "0xAF8B5C", Offset = "0xAF8B5C", VA = "0xAF8B5C")]
	public static void MuteSound(bool b)
	{
	}

	[Token(Token = "0x600015A")]
	[Address(RVA = "0xAF8BB4", Offset = "0xAF8BB4", VA = "0xAF8BB4")]
	public static bool IsMusicEnabled()
	{
		return default(bool);
	}

	[Token(Token = "0x600015B")]
	[Address(RVA = "0xAF8C04", Offset = "0xAF8C04", VA = "0xAF8C04")]
	public static bool IsAmbienceSoundEnabled()
	{
		return default(bool);
	}

	[Token(Token = "0x600015C")]
	[Address(RVA = "0xAF8C54", Offset = "0xAF8C54", VA = "0xAF8C54")]
	public static bool IsSoundMuted()
	{
		return default(bool);
	}

	[Token(Token = "0x600015D")]
	[Address(RVA = "0xAF69C8", Offset = "0xAF69C8", VA = "0xAF69C8")]
	public static AudioListener GetCurrentAudioListener()
	{
		return null;
	}

	[Token(Token = "0x600015E")]
	[Address(RVA = "0xAF8CA4", Offset = "0xAF8CA4", VA = "0xAF8CA4")]
	public static AudioObject GetCurrentMusic()
	{
		return null;
	}

	[Token(Token = "0x600015F")]
	[Address(RVA = "0xAF8CF0", Offset = "0xAF8CF0", VA = "0xAF8CF0")]
	public static AudioObject GetCurrentAmbienceSound()
	{
		return null;
	}

	[Token(Token = "0x6000160")]
	[Address(RVA = "0xAF8D3C", Offset = "0xAF8D3C", VA = "0xAF8D3C")]
	public static AudioCategory GetCategory(string name)
	{
		return null;
	}

	[Token(Token = "0x6000161")]
	[Address(RVA = "0xAF8E8C", Offset = "0xAF8E8C", VA = "0xAF8E8C")]
	public static void SetCategoryVolume(string name, float volume)
	{
	}

	[Token(Token = "0x6000162")]
	[Address(RVA = "0xAF91A8", Offset = "0xAF91A8", VA = "0xAF91A8")]
	public static float GetCategoryVolume(string name)
	{
		return default(float);
	}

	[Token(Token = "0x6000163")]
	[Address(RVA = "0xAF926C", Offset = "0xAF926C", VA = "0xAF926C")]
	public static void FadeOutCategory(string name, float fadeOutLength, float startToFadeTime = 0f)
	{
	}

	[Token(Token = "0x6000164")]
	[Address(RVA = "0xAF93B0", Offset = "0xAF93B0", VA = "0xAF93B0")]
	public static void FadeInCategory(string name, float fadeInTime, bool stopCurrentFadeOut = true)
	{
	}

	[Token(Token = "0x6000165")]
	[Address(RVA = "0xAF9504", Offset = "0xAF9504", VA = "0xAF9504")]
	public static void SetGlobalVolume(float volume)
	{
	}

	[Token(Token = "0x6000166")]
	[Address(RVA = "0xAF95DC", Offset = "0xAF95DC", VA = "0xAF95DC")]
	public static float GetGlobalVolume()
	{
		return default(float);
	}

	[Token(Token = "0x6000167")]
	[Address(RVA = "0xAF962C", Offset = "0xAF962C", VA = "0xAF962C")]
	public static AudioCategory NewCategory(string categoryName)
	{
		return null;
	}

	[Token(Token = "0x6000168")]
	[Address(RVA = "0xAF97D0", Offset = "0xAF97D0", VA = "0xAF97D0")]
	public static void RemoveCategory(string categoryName)
	{
	}

	[Token(Token = "0x6000169")]
	[Address(RVA = "0xAF9A80", Offset = "0xAF9A80", VA = "0xAF9A80")]
	public static void AddToCategory(AudioCategory category, AudioItem audioItem)
	{
	}

	[Token(Token = "0x600016A")]
	[Address(RVA = "0xAF9B84", Offset = "0xAF9B84", VA = "0xAF9B84")]
	public static AudioItem AddToCategory(AudioCategory category, AudioClip audioClip, string audioID)
	{
		return null;
	}

	[Token(Token = "0x600016B")]
	[Address(RVA = "0xAF9CBC", Offset = "0xAF9CBC", VA = "0xAF9CBC")]
	public static bool RemoveAudioItem(string audioID)
	{
		return default(bool);
	}

	[Token(Token = "0x600016C")]
	[Address(RVA = "0xAF9ED0", Offset = "0xAF9ED0", VA = "0xAF9ED0")]
	public static bool IsValidAudioID(string audioID)
	{
		return default(bool);
	}

	[Token(Token = "0x600016D")]
	[Address(RVA = "0xAF9F30", Offset = "0xAF9F30", VA = "0xAF9F30")]
	public static AudioItem GetAudioItem(string audioID)
	{
		return null;
	}

	[Token(Token = "0x600016E")]
	[Address(RVA = "0xAF9F84", Offset = "0xAF9F84", VA = "0xAF9F84")]
	public static void DetachAllAudios(GameObject gameObjectWithAudios)
	{
	}

	[Token(Token = "0x600016F")]
	[Address(RVA = "0xAFA034", Offset = "0xAFA034", VA = "0xAFA034")]
	public static float GetAudioItemMaxDistance(string audioID)
	{
		return default(float);
	}

	[Token(Token = "0x6000170")]
	[Address(RVA = "0xAFA0E4", Offset = "0xAFA0E4", VA = "0xAFA0E4")]
	public void UnloadAllAudioClips()
	{
	}

	[Token(Token = "0x6000175")]
	[Address(RVA = "0xAF4170", Offset = "0xAF4170", VA = "0xAF4170")]
	private void _ApplyVolumeChange()
	{
	}

	[Token(Token = "0x6000176")]
	[Address(RVA = "0xAF7700", Offset = "0xAF7700", VA = "0xAF7700")]
	internal AudioItem _GetAudioItem(string audioID)
	{
		return null;
	}

	[Token(Token = "0x6000177")]
	[Address(RVA = "0xAF4928", Offset = "0xAF4928", VA = "0xAF4928")]
	protected AudioObject _PlayMusic(string audioID, float volume, float delay, float startTime)
	{
		return null;
	}

	[Token(Token = "0x6000178")]
	[Address(RVA = "0xAF5494", Offset = "0xAF5494", VA = "0xAF5494")]
	protected AudioObject _PlayAmbienceSound(string audioID, float volume, float delay, float startTime)
	{
		return null;
	}

	[Token(Token = "0x6000179")]
	[Address(RVA = "0xAF4FD4", Offset = "0xAF4FD4", VA = "0xAF4FD4")]
	protected bool _StopMusic(float fadeOutLength)
	{
		return default(bool);
	}

	[Token(Token = "0x600017A")]
	[Address(RVA = "0xAF5164", Offset = "0xAF5164", VA = "0xAF5164")]
	protected bool _PauseMusic(float fadeOut)
	{
		return default(bool);
	}

	[Token(Token = "0x600017B")]
	[Address(RVA = "0xAF5AE0", Offset = "0xAF5AE0", VA = "0xAF5AE0")]
	protected bool _StopAmbienceSound(float fadeOutLength)
	{
		return default(bool);
	}

	[Token(Token = "0x600017C")]
	[Address(RVA = "0xAF5C70", Offset = "0xAF5C70", VA = "0xAF5C70")]
	protected bool _PauseAmbienceSound(float fadeOut)
	{
		return default(bool);
	}

	[Token(Token = "0x600017D")]
	[Address(RVA = "0xAF4C14", Offset = "0xAF4C14", VA = "0xAF4C14")]
	protected AudioObject _PlayMusic(string audioID, Vector3 position, Transform parentObj, float volume, float delay, float startTime)
	{
		return null;
	}

	[Token(Token = "0x600017E")]
	[Address(RVA = "0xAF5750", Offset = "0xAF5750", VA = "0xAF5750")]
	protected AudioObject _PlayAmbienceSound(string audioID, Vector3 position, Transform parentObj, float volume, float delay, float startTime)
	{
		return null;
	}

	[Token(Token = "0x600017F")]
	[Address(RVA = "0xAF5F78", Offset = "0xAF5F78", VA = "0xAF5F78")]
	protected int _EnqueueMusic(string audioID)
	{
		return default(int);
	}

	[Token(Token = "0x6000180")]
	[Address(RVA = "0xAF64A0", Offset = "0xAF64A0", VA = "0xAF64A0")]
	protected AudioObject _PlayMusicPlaylist()
	{
		return null;
	}

	[Token(Token = "0x6000181")]
	[Address(RVA = "0xAFA2E8", Offset = "0xAFA2E8", VA = "0xAFA2E8")]
	private AudioObject _PlayMusicTrackWithID(int nextTrack, float delay, bool addToPlayedList)
	{
		return null;
	}

	[Token(Token = "0x6000182")]
	[Address(RVA = "0xAF6648", Offset = "0xAF6648", VA = "0xAF6648")]
	internal AudioObject _PlayNextMusicOnPlaylist(float delay)
	{
		return null;
	}

	[Token(Token = "0x6000183")]
	[Address(RVA = "0xAF6718", Offset = "0xAF6718", VA = "0xAF6718")]
	internal AudioObject _PlayPreviousMusicOnPlaylist(float delay)
	{
		return null;
	}

	[Token(Token = "0x6000184")]
	[Address(RVA = "0xAFA270", Offset = "0xAFA270", VA = "0xAFA270")]
	private void _ResetLastPlayedList()
	{
	}

	[Token(Token = "0x6000185")]
	[Address(RVA = "0xAFA488", Offset = "0xAFA488", VA = "0xAFA488")]
	protected int _GetNextMusicTrack()
	{
		return default(int);
	}

	[Token(Token = "0x6000186")]
	[Address(RVA = "0xAFA54C", Offset = "0xAFA54C", VA = "0xAFA54C")]
	protected int _GetPreviousMusicTrack()
	{
		return default(int);
	}

	[Token(Token = "0x6000187")]
	[Address(RVA = "0xAFA980", Offset = "0xAFA980", VA = "0xAFA980")]
	private int _GetPreviousMusicTrackShuffled()
	{
		return default(int);
	}

	[Token(Token = "0x6000188")]
	[Address(RVA = "0xAFAB5C", Offset = "0xAFAB5C", VA = "0xAFAB5C")]
	private void _RemoveLastPlayedOnList()
	{
	}

	[Token(Token = "0x6000189")]
	[Address(RVA = "0xAFA5A0", Offset = "0xAFA5A0", VA = "0xAFA5A0")]
	private int _GetNextMusicTrackShuffled()
	{
		return default(int);
	}

	[Token(Token = "0x600018A")]
	[Address(RVA = "0xAFA888", Offset = "0xAFA888", VA = "0xAFA888")]
	private int _GetNextMusicTrackInOrder()
	{
		return default(int);
	}

	[Token(Token = "0x600018B")]
	[Address(RVA = "0xAFAA54", Offset = "0xAFAA54", VA = "0xAFAA54")]
	private int _GetPreviousMusicTrackInOrder()
	{
		return default(int);
	}

	[Token(Token = "0x600018C")]
	[Address(RVA = "0xAF6FDC", Offset = "0xAF6FDC", VA = "0xAF6FDC")]
	protected AudioObject _PlayEx(string audioID, AudioChannelType channel, float volume, Vector3 worldPosition, Transform parentObj, float delay, float startTime, bool playWithoutAudioObject, double dspTime = 0.0, [Optional] AudioObject useExistingAudioObject, float startVolumeMultiplier = 1f)
	{
		return null;
	}

	[Token(Token = "0x600018D")]
	[Address(RVA = "0xAFABE8", Offset = "0xAFABE8", VA = "0xAFABE8")]
	public AudioObject PlayAudioItem(AudioItem sndItem, float volume, Vector3 worldPosition, [Optional] Transform parentObj, float delay = 0f, float startTime = 0f, bool playWithoutAudioObject = false, [Optional] AudioObject useExistingAudioObj, double dspTime = 0.0, AudioChannelType channel = AudioChannelType.Default, float startVolumeMultiplier = 1f)
	{
		return null;
	}

	[Token(Token = "0x600018E")]
	[Address(RVA = "0xAF8E0C", Offset = "0xAF8E0C", VA = "0xAF8E0C")]
	internal AudioCategory _GetCategory(string name)
	{
		return null;
	}

	[Token(Token = "0x600018F")]
	[Address(RVA = "0xAFB760", Offset = "0xAFB760", VA = "0xAFB760")]
	private void Update()
	{
	}

	[Token(Token = "0x6000190")]
	[Address(RVA = "0xAFB7C4", Offset = "0xAFB7C4", VA = "0xAFB7C4")]
	private static void _UpdateSystemTime()
	{
	}

	[Token(Token = "0x6000191")]
	[Address(RVA = "0xAFB928", Offset = "0xAFB928", VA = "0xAFB928", Slot = "5")]
	protected override void Awake()
	{
	}

	[Token(Token = "0x6000192")]
	[Address(RVA = "0xAFB9C8", Offset = "0xAFB9C8", VA = "0xAFB9C8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000193")]
	[Address(RVA = "0xAFBDB0", Offset = "0xAFBDB0", VA = "0xAFBDB0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000195")]
	[Address(RVA = "0xAFC018", Offset = "0xAFC018", VA = "0xAFC018", Slot = "6")]
	protected override void OnDestroy()
	{
	}

	[Token(Token = "0x6000196")]
	[Address(RVA = "0xAFC070", Offset = "0xAFC070", VA = "0xAFC070")]
	private void AwakeSingleton()
	{
	}

	[Token(Token = "0x6000197")]
	[Address(RVA = "0xAFA24C", Offset = "0xAFA24C", VA = "0xAFA24C")]
	protected void _ValidateCategories()
	{
	}

	[Token(Token = "0x6000198")]
	[Address(RVA = "0xAF97C8", Offset = "0xAF97C8", VA = "0xAF97C8")]
	protected void _InvalidateCategories()
	{
	}

	[Token(Token = "0x6000199")]
	[Address(RVA = "0xAFC3E8", Offset = "0xAFC3E8", VA = "0xAFC3E8")]
	public void InitializeAudioItems()
	{
	}

	[Token(Token = "0x600019A")]
	[Address(RVA = "0xAFC514", Offset = "0xAFC514", VA = "0xAFC514")]
	private void _InitializeAudioItems(AudioController audioController)
	{
	}

	[Token(Token = "0x600019B")]
	[Address(RVA = "0xAFBCB8", Offset = "0xAFBCB8", VA = "0xAFBCB8")]
	private void _RegisterAdditionalAudioController(AudioController ac)
	{
	}

	[Token(Token = "0x600019C")]
	[Address(RVA = "0xAFC5EC", Offset = "0xAFC5EC", VA = "0xAFC5EC")]
	private void _SyncCategoryVolumes(AudioController toSync, AudioController syncWith)
	{
	}

	[Token(Token = "0x600019D")]
	[Address(RVA = "0xAFBE70", Offset = "0xAFBE70", VA = "0xAFBE70")]
	private void _UnregisterAdditionalAudioController(AudioController ac)
	{
	}

	[Token(Token = "0x600019E")]
	[Address(RVA = "0xAF8FC8", Offset = "0xAF8FC8", VA = "0xAF8FC8")]
	private static List<AudioCategory> _GetAllCategories(string name)
	{
		return null;
	}

	[Token(Token = "0x600019F")]
	[Address(RVA = "0xAFAEE4", Offset = "0xAFAEE4", VA = "0xAFAEE4")]
	public AudioObject PlayAudioSubItem(AudioSubItem subItem, float volume, Vector3 worldPosition, Transform parentObj, float delay, float startTime, bool playWithoutAudioObject, AudioObject useExistingAudioObj, double dspTime = 0.0, AudioChannelType channel = AudioChannelType.Default, float startVolumeMultiplier = 1f)
	{
		return null;
	}

	[Token(Token = "0x60001A0")]
	[Address(RVA = "0xAFC674", Offset = "0xAFC674", VA = "0xAFC674")]
	private AudioController _GetAudioController(AudioSubItem subItem)
	{
		return null;
	}

	[Token(Token = "0x60001A1")]
	[Address(RVA = "0xAFC69C", Offset = "0xAFC69C", VA = "0xAFC69C")]
	internal void _NotifyPlaylistTrackCompleteleyPlayed(AudioObject audioObject)
	{
	}

	[Token(Token = "0x60001A2")]
	[Address(RVA = "0xAFC214", Offset = "0xAFC214", VA = "0xAFC214")]
	private void _ValidateAudioObjectPrefab(GameObject audioPrefab)
	{
	}

	[Token(Token = "0x60001A3")]
	[Address(RVA = "0xAFC808", Offset = "0xAFC808", VA = "0xAFC808", Slot = "9")]
	public void OnAfterDeserialize()
	{
	}

	[Token(Token = "0x60001A4")]
	[Address(RVA = "0xAFC938", Offset = "0xAFC938", VA = "0xAFC938", Slot = "8")]
	public void OnBeforeSerialize()
	{
	}

	[Token(Token = "0x60001A5")]
	[Address(RVA = "0xAFC3C0", Offset = "0xAFC3C0", VA = "0xAFC3C0")]
	private void _SetDefaultCurrentPlaylist()
	{
	}

	[Token(Token = "0x60001A6")]
	[Address(RVA = "0xAFC93C", Offset = "0xAFC93C", VA = "0xAFC93C")]
	public AudioController()
	{
	}
}
[Serializable]
[Token(Token = "0x2000024")]
public class AudioController_CurrentInspectorSelection
{
	[Token(Token = "0x40000D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int currentCategoryIndex;

	[Token(Token = "0x40000DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public int currentItemIndex;

	[Token(Token = "0x40000DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int currentSubitemIndex;

	[Token(Token = "0x40000DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int currentPlaylistEntryIndex;

	[Token(Token = "0x40000DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int currentPlaylistIndex;

	[Token(Token = "0x60001A8")]
	[Address(RVA = "0xAFCAC8", Offset = "0xAFCAC8", VA = "0xAFCAC8")]
	public AudioController_CurrentInspectorSelection()
	{
	}
}
[Token(Token = "0x2000025")]
public enum AudioChannelType
{
	[Token(Token = "0x40000DF")]
	Default,
	[Token(Token = "0x40000E0")]
	Music,
	[Token(Token = "0x40000E1")]
	Ambience
}
[Token(Token = "0x2000026")]
public class AudioToolkitDemo : MonoBehaviour
{
	[Token(Token = "0x40000E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip customAudioClip;

	[Token(Token = "0x40000E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float musicVolume;

	[Token(Token = "0x40000E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float ambienceVolume;

	[Token(Token = "0x40000E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool musicPaused;

	[Token(Token = "0x40000E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector2 playlistScrollPos;

	[Token(Token = "0x40000E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private PoolableReference<AudioObject> introLoopOutroAudio;

	[Token(Token = "0x40000E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool wasClipAdded;

	[Token(Token = "0x40000E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	private bool wasCategoryAdded;

	[Token(Token = "0x40000EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<bool> disableGUILevels;

	[Token(Token = "0x60001A9")]
	[Address(RVA = "0xAFCAD0", Offset = "0xAFCAD0", VA = "0xAFCAD0")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60001AA")]
	[Address(RVA = "0xAFCAEC", Offset = "0xAFCAEC", VA = "0xAFCAEC")]
	private void DrawGuiLeftSide()
	{
	}

	[Token(Token = "0x60001AB")]
	[Address(RVA = "0xAFDB9C", Offset = "0xAFDB9C", VA = "0xAFDB9C")]
	private void DrawGuiRightSide()
	{
	}

	[Token(Token = "0x60001AC")]
	[Address(RVA = "0xAFE1BC", Offset = "0xAFE1BC", VA = "0xAFE1BC")]
	private void DrawGuiBottom()
	{
	}

	[Token(Token = "0x60001AD")]
	[Address(RVA = "0xAFE488", Offset = "0xAFE488", VA = "0xAFE488")]
	private void OnAudioCompleteleyPlayed(AudioObject audioObj)
	{
	}

	[Token(Token = "0x60001AE")]
	[Address(RVA = "0xAFE2A8", Offset = "0xAFE2A8", VA = "0xAFE2A8")]
	private void BeginDisabledGroup(bool condition)
	{
	}

	[Token(Token = "0x60001AF")]
	[Address(RVA = "0xAFE390", Offset = "0xAFE390", VA = "0xAFE390")]
	private void EndDisabledGroup()
	{
	}

	[Token(Token = "0x60001B0")]
	[Address(RVA = "0xAFE55C", Offset = "0xAFE55C", VA = "0xAFE55C")]
	private bool IsGUIDisabled()
	{
		return default(bool);
	}

	[Token(Token = "0x60001B1")]
	[Address(RVA = "0xAFE6CC", Offset = "0xAFE6CC", VA = "0xAFE6CC")]
	private void Update()
	{
	}

	[Token(Token = "0x60001B2")]
	[Address(RVA = "0xAFE74C", Offset = "0xAFE74C", VA = "0xAFE74C")]
	public AudioToolkitDemo()
	{
	}
}
[Token(Token = "0x2000027")]
public abstract class AudioTriggerBase : MonoBehaviour
{
	[Token(Token = "0x2000028")]
	public enum EventType
	{
		[Token(Token = "0x40000ED")]
		Start,
		[Token(Token = "0x40000EE")]
		Awake,
		[Token(Token = "0x40000EF")]
		OnDestroy,
		[Token(Token = "0x40000F0")]
		OnCollisionEnter,
		[Token(Token = "0x40000F1")]
		OnCollisionExit,
		[Token(Token = "0x40000F2")]
		OnEnable,
		[Token(Token = "0x40000F3")]
		OnDisable
	}

	[Token(Token = "0x40000EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public EventType triggerEvent;

	[Token(Token = "0x60001B3")]
	[Address(RVA = "0xAFE808", Offset = "0xAFE808", VA = "0xAFE808", Slot = "4")]
	protected virtual void Awake()
	{
	}

	[Token(Token = "0x60001B4")]
	[Address(RVA = "0xAFE818", Offset = "0xAFE818", VA = "0xAFE818", Slot = "5")]
	protected virtual void Start()
	{
	}

	[Token(Token = "0x60001B5")]
	[Address(RVA = "0xAFE828", Offset = "0xAFE828", VA = "0xAFE828", Slot = "6")]
	protected virtual void OnDestroy()
	{
	}

	[Token(Token = "0x60001B6")]
	[Address(RVA = "0xAFE8D4", Offset = "0xAFE8D4", VA = "0xAFE8D4", Slot = "7")]
	protected virtual void OnCollisionEnter()
	{
	}

	[Token(Token = "0x60001B7")]
	[Address(RVA = "0xAFE8E4", Offset = "0xAFE8E4", VA = "0xAFE8E4", Slot = "8")]
	protected virtual void OnCollisionExit()
	{
	}

	[Token(Token = "0x60001B8")]
	[Address(RVA = "0xAFE8F4", Offset = "0xAFE8F4", VA = "0xAFE8F4", Slot = "9")]
	protected virtual void OnEnable()
	{
	}

	[Token(Token = "0x60001B9")]
	[Address(RVA = "0xAFE904", Offset = "0xAFE904", VA = "0xAFE904", Slot = "10")]
	protected virtual void OnDisable()
	{
	}

	[Token(Token = "0x60001BA")]
	protected abstract void _OnEventTriggered();

	[Token(Token = "0x60001BB")]
	[Address(RVA = "0xAFE914", Offset = "0xAFE914", VA = "0xAFE914", Slot = "12")]
	protected virtual void _CheckEvent(EventType eventType)
	{
	}

	[Token(Token = "0x60001BC")]
	[Address(RVA = "0xAFE930", Offset = "0xAFE930", VA = "0xAFE930")]
	protected AudioTriggerBase()
	{
	}
}
[Token(Token = "0x2000029")]
public class PauseAllAudio : AudioTriggerBase
{
	[Token(Token = "0x200002A")]
	public enum PauseType
	{
		[Token(Token = "0x40000F8")]
		All,
		[Token(Token = "0x40000F9")]
		MusicOnly,
		[Token(Token = "0x40000FA")]
		AmbienceOnly,
		[Token(Token = "0x40000FB")]
		Category
	}

	[Token(Token = "0x40000F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public PauseType pauseType;

	[Token(Token = "0x40000F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float fadeOut;

	[Token(Token = "0x40000F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string categoryName;

	[Token(Token = "0x60001BD")]
	[Address(RVA = "0xAFE938", Offset = "0xAFE938", VA = "0xAFE938", Slot = "11")]
	protected override void _OnEventTriggered()
	{
	}

	[Token(Token = "0x60001BE")]
	[Address(RVA = "0xAFEA5C", Offset = "0xAFEA5C", VA = "0xAFEA5C")]
	public PauseAllAudio()
	{
	}
}
[Token(Token = "0x200002B")]
public static class ArrayHelper
{
	[Token(Token = "0x60001BF")]
	public static T AddArrayElement<T>(ref T[] array) where T : new()
	{
		return (T)null;
	}

	[Token(Token = "0x60001C0")]
	public static T AddArrayElement<T>(ref T[] array, T elToAdd)
	{
		return (T)null;
	}

	[Token(Token = "0x60001C1")]
	public static void DeleteArrayElement<T>(ref T[] array, int index)
	{
	}
}
[Token(Token = "0x200002C")]
public class OldGUIExamplesCS : MonoBehaviour
{
	[Token(Token = "0x40000FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture2D grumpy;

	[Token(Token = "0x40000FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Texture2D beauty;

	[Token(Token = "0x40000FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float w;

	[Token(Token = "0x40000FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float h;

	[Token(Token = "0x4000100")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private LTRect buttonRect1;

	[Token(Token = "0x4000101")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private LTRect buttonRect2;

	[Token(Token = "0x4000102")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private LTRect buttonRect3;

	[Token(Token = "0x4000103")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private LTRect buttonRect4;

	[Token(Token = "0x4000104")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private LTRect grumpyRect;

	[Token(Token = "0x4000105")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private LTRect beautyTileRect;

	[Token(Token = "0x60001C2")]
	[Address(RVA = "0xAFEA64", Offset = "0xAFEA64", VA = "0xAFEA64")]
	private void Start()
	{
	}

	[Token(Token = "0x60001C3")]
	[Address(RVA = "0xAFED84", Offset = "0xAFED84", VA = "0xAFED84")]
	public void catMoved()
	{
	}

	[Token(Token = "0x60001C4")]
	[Address(RVA = "0xAFEDEC", Offset = "0xAFEDEC", VA = "0xAFEDEC")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60001C5")]
	[Address(RVA = "0xAFF788", Offset = "0xAFF788", VA = "0xAFF788")]
	public OldGUIExamplesCS()
	{
	}
}
[Token(Token = "0x200002D")]
public class TestingPunch : MonoBehaviour
{
	[Token(Token = "0x4000106")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve exportCurve;

	[Token(Token = "0x4000107")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float overShootValue;

	[Token(Token = "0x4000108")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private LTDescr descr;

	[Token(Token = "0x60001C6")]
	[Address(RVA = "0xAFF790", Offset = "0xAFF790", VA = "0xAFF790")]
	private void Start()
	{
	}

	[Token(Token = "0x60001C7")]
	[Address(RVA = "0xAFFB54", Offset = "0xAFFB54", VA = "0xAFFB54")]
	private void Update()
	{
	}

	[Token(Token = "0x60001C8")]
	[Address(RVA = "0xB009F8", Offset = "0xB009F8", VA = "0xB009F8")]
	private static void tweenStatically(GameObject gameObject)
	{
	}

	[Token(Token = "0x60001C9")]
	[Address(RVA = "0xB00B60", Offset = "0xB00B60", VA = "0xB00B60")]
	private void enterMiniGameStart(object val)
	{
	}

	[Token(Token = "0x60001CA")]
	[Address(RVA = "0xB00C9C", Offset = "0xB00C9C", VA = "0xB00C9C")]
	private void updateColor(Color c)
	{
	}

	[Token(Token = "0x60001CB")]
	[Address(RVA = "0xB00D4C", Offset = "0xB00D4C", VA = "0xB00D4C")]
	private void delayedMethod(object myVal)
	{
	}

	[Token(Token = "0x60001CC")]
	[Address(RVA = "0xB00E40", Offset = "0xB00E40", VA = "0xB00E40")]
	private void destroyOnComp(object p)
	{
	}

	[Token(Token = "0x60001CD")]
	[Address(RVA = "0xAFF828", Offset = "0xAFF828", VA = "0xAFF828")]
	private string curveToString(AnimationCurve curve)
	{
		return null;
	}

	[Token(Token = "0x60001CE")]
	[Address(RVA = "0xB00ED0", Offset = "0xB00ED0", VA = "0xB00ED0")]
	public TestingPunch()
	{
	}
}
[Token(Token = "0x2000032")]
public class TestingRigidbodyCS : MonoBehaviour
{
	[Token(Token = "0x4000113")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GameObject ball1;

	[Token(Token = "0x60001DE")]
	[Address(RVA = "0xB01808", Offset = "0xB01808", VA = "0xB01808")]
	private void Start()
	{
	}

	[Token(Token = "0x60001DF")]
	[Address(RVA = "0xB01934", Offset = "0xB01934", VA = "0xB01934")]
	private void Update()
	{
	}

	[Token(Token = "0x60001E0")]
	[Address(RVA = "0xB01938", Offset = "0xB01938", VA = "0xB01938")]
	public TestingRigidbodyCS()
	{
	}
}
[Token(Token = "0x2000033")]
public class Following : MonoBehaviour
{
	[Token(Token = "0x4000114")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform planet;

	[Token(Token = "0x4000115")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform followArrow;

	[Token(Token = "0x4000116")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform dude1;

	[Token(Token = "0x4000117")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform dude2;

	[Token(Token = "0x4000118")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform dude3;

	[Token(Token = "0x4000119")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform dude4;

	[Token(Token = "0x400011A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Transform dude5;

	[Token(Token = "0x400011B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform dude1Title;

	[Token(Token = "0x400011C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform dude2Title;

	[Token(Token = "0x400011D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform dude3Title;

	[Token(Token = "0x400011E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Transform dude4Title;

	[Token(Token = "0x400011F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Transform dude5Title;

	[Token(Token = "0x4000120")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Color dude1ColorVelocity;

	[Token(Token = "0x4000121")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Vector3 velocityPos;

	[Token(Token = "0x4000122")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float fromY;

	[Token(Token = "0x4000123")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float velocityY;

	[Token(Token = "0x4000124")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private Vector3 fromVec3;

	[Token(Token = "0x4000125")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Vector3 velocityVec3;

	[Token(Token = "0x4000126")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private Color fromColor;

	[Token(Token = "0x4000127")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private Color velocityColor;

	[Token(Token = "0x60001E1")]
	[Address(RVA = "0xB01940", Offset = "0xB01940", VA = "0xB01940")]
	private void Start()
	{
	}

	[Token(Token = "0x60001E2")]
	[Address(RVA = "0xB01E98", Offset = "0xB01E98", VA = "0xB01E98")]
	private void Update()
	{
	}

	[Token(Token = "0x60001E3")]
	[Address(RVA = "0xB02234", Offset = "0xB02234", VA = "0xB02234")]
	private void moveArrow()
	{
	}

	[Token(Token = "0x60001E4")]
	[Address(RVA = "0xB02394", Offset = "0xB02394", VA = "0xB02394")]
	public Following()
	{
	}
}
[Token(Token = "0x2000034")]
public class GeneralAdvancedTechniques : MonoBehaviour
{
	[Token(Token = "0x4000128")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject avatarRecursive;

	[Token(Token = "0x4000129")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject avatar2dRecursive;

	[Token(Token = "0x400012A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public RectTransform wingPersonPanel;

	[Token(Token = "0x400012B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public RectTransform textField;

	[Token(Token = "0x400012C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject avatarMove;

	[Token(Token = "0x400012D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform[] movePts;

	[Token(Token = "0x400012E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject[] avatarSpeed;

	[Token(Token = "0x400012F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject[] avatarSpeed2;

	[Token(Token = "0x4000130")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3[] circleSm;

	[Token(Token = "0x4000131")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3[] circleLrg;

	[Token(Token = "0x60001E5")]
	[Address(RVA = "0xB0239C", Offset = "0xB0239C", VA = "0xB0239C")]
	private void Start()
	{
	}

	[Token(Token = "0x60001E6")]
	[Address(RVA = "0xB0274C", Offset = "0xB0274C", VA = "0xB0274C")]
	public GeneralAdvancedTechniques()
	{
	}
}
[Token(Token = "0x2000035")]
public class GeneralBasic : MonoBehaviour
{
	[Token(Token = "0x4000132")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject prefabAvatar;

	[Token(Token = "0x60001E8")]
	[Address(RVA = "0xB02EE8", Offset = "0xB02EE8", VA = "0xB02EE8")]
	private void Start()
	{
	}

	[Token(Token = "0x60001E9")]
	[Address(RVA = "0xB03200", Offset = "0xB03200", VA = "0xB03200")]
	private void advancedExamples()
	{
	}

	[Token(Token = "0x60001EA")]
	[Address(RVA = "0xB032E8", Offset = "0xB032E8", VA = "0xB032E8")]
	public GeneralBasic()
	{
	}
}
[Token(Token = "0x2000037")]
public class GeneralBasics2d : MonoBehaviour
{
	[Token(Token = "0x4000134")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Texture2D dudeTexture;

	[Token(Token = "0x4000135")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject prefabParticles;

	[Token(Token = "0x60001EF")]
	[Address(RVA = "0xB039D4", Offset = "0xB039D4", VA = "0xB039D4")]
	private void Start()
	{
	}

	[Token(Token = "0x60001F0")]
	[Address(RVA = "0xB03D38", Offset = "0xB03D38", VA = "0xB03D38")]
	private GameObject createSpriteDude(string name, Vector3 pos, bool hasParticles = true)
	{
		return null;
	}

	[Token(Token = "0x60001F1")]
	[Address(RVA = "0xB04014", Offset = "0xB04014", VA = "0xB04014")]
	private void advancedExamples()
	{
	}

	[Token(Token = "0x60001F2")]
	[Address(RVA = "0xB040FC", Offset = "0xB040FC", VA = "0xB040FC")]
	public GeneralBasics2d()
	{
	}
}
[Token(Token = "0x2000039")]
public class GeneralCameraShake : MonoBehaviour
{
	[Token(Token = "0x4000137")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private GameObject avatarBig;

	[Token(Token = "0x4000138")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float jumpIter;

	[Token(Token = "0x4000139")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private AudioClip boomAudioClip;

	[Token(Token = "0x60001F7")]
	[Address(RVA = "0xB04794", Offset = "0xB04794", VA = "0xB04794")]
	private void Start()
	{
	}

	[Token(Token = "0x60001F8")]
	[Address(RVA = "0xB04B5C", Offset = "0xB04B5C", VA = "0xB04B5C")]
	private void bigGuyJump()
	{
	}

	[Token(Token = "0x60001F9")]
	[Address(RVA = "0xB04CC4", Offset = "0xB04CC4", VA = "0xB04CC4")]
	public GeneralCameraShake()
	{
	}
}
[Token(Token = "0x200003C")]
public class GeneralEasingTypes : MonoBehaviour
{
	[Token(Token = "0x400013E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float lineDrawScale;

	[Token(Token = "0x400013F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve animationCurve;

	[Token(Token = "0x4000140")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private string[] easeTypes;

	[Token(Token = "0x60001FF")]
	[Address(RVA = "0xB052D8", Offset = "0xB052D8", VA = "0xB052D8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000200")]
	[Address(RVA = "0xB052DC", Offset = "0xB052DC", VA = "0xB052DC")]
	private void demoEaseTypes()
	{
	}

	[Token(Token = "0x6000201")]
	[Address(RVA = "0xB056C0", Offset = "0xB056C0", VA = "0xB056C0")]
	private void resetLines()
	{
	}

	[Token(Token = "0x6000202")]
	[Address(RVA = "0xB05778", Offset = "0xB05778", VA = "0xB05778")]
	public GeneralEasingTypes()
	{
	}
}
[Token(Token = "0x200003E")]
public class GeneralEventsListeners : MonoBehaviour
{
	[Token(Token = "0x200003F")]
	public enum MyEvents
	{
		[Token(Token = "0x4000149")]
		CHANGE_COLOR,
		[Token(Token = "0x400014A")]
		JUMP,
		[Token(Token = "0x400014B")]
		LENGTH
	}

	[Token(Token = "0x4000144")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Vector3 towardsRotation;

	[Token(Token = "0x4000145")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float turnForLength;

	[Token(Token = "0x4000146")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float turnForIter;

	[Token(Token = "0x4000147")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Color fromColor;

	[Token(Token = "0x6000205")]
	[Address(RVA = "0xB06140", Offset = "0xB06140", VA = "0xB06140")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000206")]
	[Address(RVA = "0xB061E8", Offset = "0xB061E8", VA = "0xB061E8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000207")]
	[Address(RVA = "0xB0630C", Offset = "0xB0630C", VA = "0xB0630C")]
	private void jumpUp(LTEvent e)
	{
	}

	[Token(Token = "0x6000208")]
	[Address(RVA = "0xB063B8", Offset = "0xB063B8", VA = "0xB063B8")]
	private void changeColor(LTEvent e)
	{
	}

	[Token(Token = "0x6000209")]
	[Address(RVA = "0xB0662C", Offset = "0xB0662C", VA = "0xB0662C")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x600020A")]
	[Address(RVA = "0xB06684", Offset = "0xB06684", VA = "0xB06684")]
	private void OnCollisionStay(Collision collision)
	{
	}

	[Token(Token = "0x600020B")]
	[Address(RVA = "0xB066D4", Offset = "0xB066D4", VA = "0xB066D4")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x600020C")]
	[Address(RVA = "0xB068AC", Offset = "0xB068AC", VA = "0xB068AC")]
	private void OnMouseDown()
	{
	}

	[Token(Token = "0x600020D")]
	[Address(RVA = "0xB06950", Offset = "0xB06950", VA = "0xB06950")]
	public GeneralEventsListeners()
	{
	}
}
[Token(Token = "0x2000040")]
public class GeneralSequencer : MonoBehaviour
{
	[Token(Token = "0x400014C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject avatar1;

	[Token(Token = "0x400014D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject star;

	[Token(Token = "0x400014E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject dustCloudPrefab;

	[Token(Token = "0x400014F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float speedScale;

	[Token(Token = "0x600020F")]
	[Address(RVA = "0xB069F4", Offset = "0xB069F4", VA = "0xB069F4")]
	public void Start()
	{
	}

	[Token(Token = "0x6000210")]
	[Address(RVA = "0xB06C68", Offset = "0xB06C68", VA = "0xB06C68")]
	public GeneralSequencer()
	{
	}
}
[Token(Token = "0x2000041")]
public class GeneralSimpleUI : MonoBehaviour
{
	[Token(Token = "0x4000150")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RectTransform button;

	[Token(Token = "0x6000212")]
	[Address(RVA = "0xB06F24", Offset = "0xB06F24", VA = "0xB06F24")]
	private void Start()
	{
	}

	[Token(Token = "0x6000213")]
	[Address(RVA = "0xB0750C", Offset = "0xB0750C", VA = "0xB0750C")]
	public GeneralSimpleUI()
	{
	}
}
[Token(Token = "0x2000043")]
public class GeneralUISpace : MonoBehaviour
{
	[Token(Token = "0x4000153")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RectTransform mainWindow;

	[Token(Token = "0x4000154")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public RectTransform mainParagraphText;

	[Token(Token = "0x4000155")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public RectTransform mainTitleText;

	[Token(Token = "0x4000156")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public RectTransform mainButton1;

	[Token(Token = "0x4000157")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public RectTransform mainButton2;

	[Token(Token = "0x4000158")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public RectTransform pauseRing1;

	[Token(Token = "0x4000159")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public RectTransform pauseRing2;

	[Token(Token = "0x400015A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public RectTransform pauseWindow;

	[Token(Token = "0x400015B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public RectTransform chatWindow;

	[Token(Token = "0x400015C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public RectTransform chatRect;

	[Token(Token = "0x400015D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public Sprite[] chatSprites;

	[Token(Token = "0x400015E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public RectTransform chatBar1;

	[Token(Token = "0x400015F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public RectTransform chatBar2;

	[Token(Token = "0x4000160")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Text chatText;

	[Token(Token = "0x4000161")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public RectTransform rawImageRect;

	[Token(Token = "0x600021A")]
	[Address(RVA = "0xB077DC", Offset = "0xB077DC", VA = "0xB077DC")]
	private void Start()
	{
	}

	[Token(Token = "0x600021B")]
	[Address(RVA = "0xB08034", Offset = "0xB08034", VA = "0xB08034")]
	public GeneralUISpace()
	{
	}
}
[Token(Token = "0x2000045")]
public class LogoCinematic : MonoBehaviour
{
	[Token(Token = "0x4000164")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject lean;

	[Token(Token = "0x4000165")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject tween;

	[Token(Token = "0x600021E")]
	[Address(RVA = "0xB08168", Offset = "0xB08168", VA = "0xB08168")]
	private void Awake()
	{
	}

	[Token(Token = "0x600021F")]
	[Address(RVA = "0xB0816C", Offset = "0xB0816C", VA = "0xB0816C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000220")]
	[Address(RVA = "0xB08584", Offset = "0xB08584", VA = "0xB08584")]
	private void playBoom()
	{
	}

	[Token(Token = "0x6000221")]
	[Address(RVA = "0xB08C2C", Offset = "0xB08C2C", VA = "0xB08C2C")]
	public LogoCinematic()
	{
	}
}
[Token(Token = "0x2000046")]
public class PathBezier2d : MonoBehaviour
{
	[Token(Token = "0x4000166")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform[] cubes;

	[Token(Token = "0x4000167")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject dude1;

	[Token(Token = "0x4000168")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject dude2;

	[Token(Token = "0x4000169")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private LTBezierPath visualizePath;

	[Token(Token = "0x6000222")]
	[Address(RVA = "0xB08C34", Offset = "0xB08C34", VA = "0xB08C34")]
	private void Start()
	{
	}

	[Token(Token = "0x6000223")]
	[Address(RVA = "0xB08E10", Offset = "0xB08E10", VA = "0xB08E10")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000224")]
	[Address(RVA = "0xB08E50", Offset = "0xB08E50", VA = "0xB08E50")]
	public PathBezier2d()
	{
	}
}
[Token(Token = "0x2000047")]
public class ExampleSpline : MonoBehaviour
{
	[Token(Token = "0x400016A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform[] trans;

	[Token(Token = "0x400016B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private LTSpline spline;

	[Token(Token = "0x400016C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject ltLogo;

	[Token(Token = "0x400016D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject ltLogo2;

	[Token(Token = "0x400016E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float iter;

	[Token(Token = "0x6000225")]
	[Address(RVA = "0xB08E58", Offset = "0xB08E58", VA = "0xB08E58")]
	private void Start()
	{
	}

	[Token(Token = "0x6000226")]
	[Address(RVA = "0xB091A8", Offset = "0xB091A8", VA = "0xB091A8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000227")]
	[Address(RVA = "0xB09238", Offset = "0xB09238", VA = "0xB09238")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000228")]
	[Address(RVA = "0xB09250", Offset = "0xB09250", VA = "0xB09250")]
	public ExampleSpline()
	{
	}
}
[Token(Token = "0x2000048")]
public class PathSpline2d : MonoBehaviour
{
	[Token(Token = "0x400016F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform[] cubes;

	[Token(Token = "0x4000170")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject dude1;

	[Token(Token = "0x4000171")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject dude2;

	[Token(Token = "0x4000172")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private LTSpline visualizePath;

	[Token(Token = "0x6000229")]
	[Address(RVA = "0xB09258", Offset = "0xB09258", VA = "0xB09258")]
	private void Start()
	{
	}

	[Token(Token = "0x600022A")]
	[Address(RVA = "0xB0948C", Offset = "0xB0948C", VA = "0xB0948C")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600022B")]
	[Address(RVA = "0xB094CC", Offset = "0xB094CC", VA = "0xB094CC")]
	public PathSpline2d()
	{
	}
}
[Token(Token = "0x2000049")]
public class PathSplineEndless : MonoBehaviour
{
	[Token(Token = "0x4000173")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject trackTrailRenderers;

	[Token(Token = "0x4000174")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject car;

	[Token(Token = "0x4000175")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject carInternal;

	[Token(Token = "0x4000176")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject[] cubes;

	[Token(Token = "0x4000177")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int cubesIter;

	[Token(Token = "0x4000178")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject[] trees;

	[Token(Token = "0x4000179")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int treesIter;

	[Token(Token = "0x400017A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float randomIterWidth;

	[Token(Token = "0x400017B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private LTSpline track;

	[Token(Token = "0x400017C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private List<Vector3> trackPts;

	[Token(Token = "0x400017D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int zIter;

	[Token(Token = "0x400017E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float carIter;

	[Token(Token = "0x400017F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float carAdd;

	[Token(Token = "0x4000180")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private int trackMaxItems;

	[Token(Token = "0x4000181")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int trackIter;

	[Token(Token = "0x4000182")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float pushTrackAhead;

	[Token(Token = "0x4000183")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float randomIter;

	[Token(Token = "0x600022C")]
	[Address(RVA = "0xB094D4", Offset = "0xB094D4", VA = "0xB094D4")]
	private void Start()
	{
	}

	[Token(Token = "0x600022D")]
	[Address(RVA = "0xB0995C", Offset = "0xB0995C", VA = "0xB0995C")]
	private void Update()
	{
	}

	[Token(Token = "0x600022E")]
	[Address(RVA = "0xB09F64", Offset = "0xB09F64", VA = "0xB09F64")]
	private GameObject objectQueue(GameObject[] arr, ref int lastIter)
	{
		return null;
	}

	[Token(Token = "0x600022F")]
	[Address(RVA = "0xB095DC", Offset = "0xB095DC", VA = "0xB095DC")]
	private void addRandomTrackPoint()
	{
	}

	[Token(Token = "0x6000230")]
	[Address(RVA = "0xB09884", Offset = "0xB09884", VA = "0xB09884")]
	private void refreshSpline()
	{
	}

	[Token(Token = "0x6000231")]
	[Address(RVA = "0xB09B54", Offset = "0xB09B54", VA = "0xB09B54")]
	private void playSwish()
	{
	}

	[Token(Token = "0x6000232")]
	[Address(RVA = "0xB0A09C", Offset = "0xB0A09C", VA = "0xB0A09C")]
	public PathSplineEndless()
	{
	}
}
[Token(Token = "0x200004A")]
public class PathSplinePerformance : MonoBehaviour
{
	[Token(Token = "0x4000184")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject trackTrailRenderers;

	[Token(Token = "0x4000185")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject car;

	[Token(Token = "0x4000186")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject carInternal;

	[Token(Token = "0x4000187")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float circleLength;

	[Token(Token = "0x4000188")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float randomRange;

	[Token(Token = "0x4000189")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int trackNodes;

	[Token(Token = "0x400018A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float carSpeed;

	[Token(Token = "0x400018B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float tracerSpeed;

	[Token(Token = "0x400018C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private LTSpline track;

	[Token(Token = "0x400018D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private int trackIter;

	[Token(Token = "0x400018E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private float carAdd;

	[Token(Token = "0x400018F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float trackPosition;

	[Token(Token = "0x6000234")]
	[Address(RVA = "0xB0A138", Offset = "0xB0A138", VA = "0xB0A138")]
	private void Start()
	{
	}

	[Token(Token = "0x6000235")]
	[Address(RVA = "0xB0A4FC", Offset = "0xB0A4FC", VA = "0xB0A4FC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000236")]
	[Address(RVA = "0xB0AA60", Offset = "0xB0AA60", VA = "0xB0AA60")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000237")]
	[Address(RVA = "0xB0A650", Offset = "0xB0A650", VA = "0xB0A650")]
	private void playSwish()
	{
	}

	[Token(Token = "0x6000238")]
	[Address(RVA = "0xB0AA84", Offset = "0xB0AA84", VA = "0xB0AA84")]
	public PathSplinePerformance()
	{
	}
}
[Token(Token = "0x200004B")]
public class PathSplines : MonoBehaviour
{
	[Token(Token = "0x4000190")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform[] trans;

	[Token(Token = "0x4000191")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private LTSpline cr;

	[Token(Token = "0x4000192")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject avatar1;

	[Token(Token = "0x4000193")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float iter;

	[Token(Token = "0x6000239")]
	[Address(RVA = "0xB0AAB4", Offset = "0xB0AAB4", VA = "0xB0AAB4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600023A")]
	[Address(RVA = "0xB0AC54", Offset = "0xB0AC54", VA = "0xB0AC54")]
	private void Start()
	{
	}

	[Token(Token = "0x600023B")]
	[Address(RVA = "0xB0AD80", Offset = "0xB0AD80", VA = "0xB0AD80")]
	private void Update()
	{
	}

	[Token(Token = "0x600023C")]
	[Address(RVA = "0xB0ADC8", Offset = "0xB0ADC8", VA = "0xB0ADC8")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600023D")]
	[Address(RVA = "0xB0AE18", Offset = "0xB0AE18", VA = "0xB0AE18")]
	public PathSplines()
	{
	}
}
[Token(Token = "0x200004C")]
public class PathSplineTrack : MonoBehaviour
{
	[Token(Token = "0x4000194")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject car;

	[Token(Token = "0x4000195")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject carInternal;

	[Token(Token = "0x4000196")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject trackTrailRenderers;

	[Token(Token = "0x4000197")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform[] trackOnePoints;

	[Token(Token = "0x4000198")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private LTSpline track;

	[Token(Token = "0x4000199")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int trackIter;

	[Token(Token = "0x400019A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float trackPosition;

	[Token(Token = "0x600023F")]
	[Address(RVA = "0xB0AFC4", Offset = "0xB0AFC4", VA = "0xB0AFC4")]
	private void Start()
	{
	}

	[Token(Token = "0x6000240")]
	[Address(RVA = "0xB0B234", Offset = "0xB0B234", VA = "0xB0B234")]
	private void Update()
	{
	}

	[Token(Token = "0x6000241")]
	[Address(RVA = "0xB0B7B0", Offset = "0xB0B7B0", VA = "0xB0B7B0")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000242")]
	[Address(RVA = "0xB0B3A0", Offset = "0xB0B3A0", VA = "0xB0B3A0")]
	private void playSwish()
	{
	}

	[Token(Token = "0x6000243")]
	[Address(RVA = "0xB0B81C", Offset = "0xB0B81C", VA = "0xB0B81C")]
	public PathSplineTrack()
	{
	}
}
[Token(Token = "0x200004D")]
public class TestingZLegacy : MonoBehaviour
{
	[Token(Token = "0x200004E")]
	public delegate void NextFunc();

	[Token(Token = "0x200004F")]
	public enum TimingType
	{
		[Token(Token = "0x40001A9")]
		SteadyNormalTime,
		[Token(Token = "0x40001AA")]
		IgnoreTimeScale,
		[Token(Token = "0x40001AB")]
		HalfTimeScale,
		[Token(Token = "0x40001AC")]
		VariableTimeScale,
		[Token(Token = "0x40001AD")]
		Length
	}

	[Token(Token = "0x400019B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve customAnimationCurve;

	[Token(Token = "0x400019C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform pt1;

	[Token(Token = "0x400019D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform pt2;

	[Token(Token = "0x400019E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform pt3;

	[Token(Token = "0x400019F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform pt4;

	[Token(Token = "0x40001A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform pt5;

	[Token(Token = "0x40001A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int exampleIter;

	[Token(Token = "0x40001A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private string[] exampleFunctions;

	[Token(Token = "0x40001A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool useEstimatedTime;

	[Token(Token = "0x40001A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private GameObject ltLogo;

	[Token(Token = "0x40001A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private TimingType timingType;

	[Token(Token = "0x40001A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private int descrTimeScaleChangeId;

	[Token(Token = "0x40001A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector3 origin;

	[Token(Token = "0x6000244")]
	[Address(RVA = "0xB0B82C", Offset = "0xB0B82C", VA = "0xB0B82C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000245")]
	[Address(RVA = "0xB0B830", Offset = "0xB0B830", VA = "0xB0B830")]
	private void Start()
	{
	}

	[Token(Token = "0x6000246")]
	[Address(RVA = "0xB0B92C", Offset = "0xB0B92C", VA = "0xB0B92C")]
	private void pauseNow()
	{
	}

	[Token(Token = "0x6000247")]
	[Address(RVA = "0xB0B9A0", Offset = "0xB0B9A0", VA = "0xB0B9A0")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000248")]
	[Address(RVA = "0xB0BAF0", Offset = "0xB0BAF0", VA = "0xB0BAF0")]
	private void endlessCallback()
	{
	}

	[Token(Token = "0x6000249")]
	[Address(RVA = "0xB0BB58", Offset = "0xB0BB58", VA = "0xB0BB58")]
	private void cycleThroughExamples()
	{
	}

	[Token(Token = "0x600024A")]
	[Address(RVA = "0xB0BEA4", Offset = "0xB0BEA4", VA = "0xB0BEA4")]
	public void updateValue3Example()
	{
	}

	[Token(Token = "0x600024B")]
	[Address(RVA = "0xB0C09C", Offset = "0xB0C09C", VA = "0xB0C09C")]
	public void updateValue3ExampleUpdate(Vector3 val)
	{
	}

	[Token(Token = "0x600024C")]
	[Address(RVA = "0xB0C0A0", Offset = "0xB0C0A0", VA = "0xB0C0A0")]
	public void updateValue3ExampleCallback(Vector3 val)
	{
	}

	[Token(Token = "0x600024D")]
	[Address(RVA = "0xB0C0F0", Offset = "0xB0C0F0", VA = "0xB0C0F0")]
	public void loopTestClamp()
	{
	}

	[Token(Token = "0x600024E")]
	[Address(RVA = "0xB0C25C", Offset = "0xB0C25C", VA = "0xB0C25C")]
	public void loopTestPingPong()
	{
	}

	[Token(Token = "0x600024F")]
	[Address(RVA = "0xB0C3BC", Offset = "0xB0C3BC", VA = "0xB0C3BC")]
	public void colorExample()
	{
	}

	[Token(Token = "0x6000250")]
	[Address(RVA = "0xB0C498", Offset = "0xB0C498", VA = "0xB0C498")]
	public void moveOnACurveExample()
	{
	}

	[Token(Token = "0x6000251")]
	[Address(RVA = "0xB0C6E8", Offset = "0xB0C6E8", VA = "0xB0C6E8")]
	public void customTweenExample()
	{
	}

	[Token(Token = "0x6000252")]
	[Address(RVA = "0xB0C8A4", Offset = "0xB0C8A4", VA = "0xB0C8A4")]
	public void moveExample()
	{
	}

	[Token(Token = "0x6000253")]
	[Address(RVA = "0xB0C9A0", Offset = "0xB0C9A0", VA = "0xB0C9A0")]
	public void rotateExample()
	{
	}

	[Token(Token = "0x6000254")]
	[Address(RVA = "0xB0CBE8", Offset = "0xB0CBE8", VA = "0xB0CBE8")]
	public void rotateOnUpdate(float val)
	{
	}

	[Token(Token = "0x6000255")]
	[Address(RVA = "0xB0CBEC", Offset = "0xB0CBEC", VA = "0xB0CBEC")]
	public void rotateFinished(object hash)
	{
	}

	[Token(Token = "0x6000256")]
	[Address(RVA = "0xB0CD00", Offset = "0xB0CD00", VA = "0xB0CD00")]
	public void scaleExample()
	{
	}

	[Token(Token = "0x6000257")]
	[Address(RVA = "0xB0CE14", Offset = "0xB0CE14", VA = "0xB0CE14")]
	public void updateValueExample()
	{
	}

	[Token(Token = "0x6000258")]
	[Address(RVA = "0xB0CFF4", Offset = "0xB0CFF4", VA = "0xB0CFF4")]
	public void updateValueExampleCallback(float val, object hash)
	{
	}

	[Token(Token = "0x6000259")]
	[Address(RVA = "0xB0D064", Offset = "0xB0D064", VA = "0xB0D064")]
	public void delayedCallExample()
	{
	}

	[Token(Token = "0x600025A")]
	[Address(RVA = "0xB0D160", Offset = "0xB0D160", VA = "0xB0D160")]
	public void delayedCallExampleCallback()
	{
	}

	[Token(Token = "0x600025B")]
	[Address(RVA = "0xB0D274", Offset = "0xB0D274", VA = "0xB0D274")]
	public void alphaExample()
	{
	}

	[Token(Token = "0x600025C")]
	[Address(RVA = "0xB0D390", Offset = "0xB0D390", VA = "0xB0D390")]
	public void moveLocalExample()
	{
	}

	[Token(Token = "0x600025D")]
	[Address(RVA = "0xB0D4E4", Offset = "0xB0D4E4", VA = "0xB0D4E4")]
	public void rotateAroundExample()
	{
	}

	[Token(Token = "0x600025E")]
	[Address(RVA = "0xB0D620", Offset = "0xB0D620", VA = "0xB0D620")]
	public void loopPause()
	{
	}

	[Token(Token = "0x600025F")]
	[Address(RVA = "0xB0D69C", Offset = "0xB0D69C", VA = "0xB0D69C")]
	public void loopResume()
	{
	}

	[Token(Token = "0x6000260")]
	[Address(RVA = "0xB0D718", Offset = "0xB0D718", VA = "0xB0D718")]
	public void punchTest()
	{
	}

	[Token(Token = "0x6000261")]
	[Address(RVA = "0xB0D7A0", Offset = "0xB0D7A0", VA = "0xB0D7A0")]
	public TestingZLegacy()
	{
	}
}
[Token(Token = "0x2000051")]
public class TestingZLegacyExt : MonoBehaviour
{
	[Token(Token = "0x2000052")]
	public delegate void NextFunc();

	[Token(Token = "0x2000053")]
	public enum TimingType
	{
		[Token(Token = "0x40001BE")]
		SteadyNormalTime,
		[Token(Token = "0x40001BF")]
		IgnoreTimeScale,
		[Token(Token = "0x40001C0")]
		HalfTimeScale,
		[Token(Token = "0x40001C1")]
		VariableTimeScale,
		[Token(Token = "0x40001C2")]
		Length
	}

	[Token(Token = "0x40001B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve customAnimationCurve;

	[Token(Token = "0x40001B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform pt1;

	[Token(Token = "0x40001B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Transform pt2;

	[Token(Token = "0x40001B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Transform pt3;

	[Token(Token = "0x40001B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform pt4;

	[Token(Token = "0x40001B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Transform pt5;

	[Token(Token = "0x40001B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int exampleIter;

	[Token(Token = "0x40001B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private string[] exampleFunctions;

	[Token(Token = "0x40001B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool useEstimatedTime;

	[Token(Token = "0x40001B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Transform ltLogo;

	[Token(Token = "0x40001BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private TimingType timingType;

	[Token(Token = "0x40001BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private int descrTimeScaleChangeId;

	[Token(Token = "0x40001BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector3 origin;

	[Token(Token = "0x6000269")]
	[Address(RVA = "0xB0DD08", Offset = "0xB0DD08", VA = "0xB0DD08")]
	private void Awake()
	{
	}

	[Token(Token = "0x600026A")]
	[Address(RVA = "0xB0DD0C", Offset = "0xB0DD0C", VA = "0xB0DD0C")]
	private void Start()
	{
	}

	[Token(Token = "0x600026B")]
	[Address(RVA = "0xB0DE00", Offset = "0xB0DE00", VA = "0xB0DE00")]
	private void pauseNow()
	{
	}

	[Token(Token = "0x600026C")]
	[Address(RVA = "0xB0DE74", Offset = "0xB0DE74", VA = "0xB0DE74")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600026D")]
	[Address(RVA = "0xB0DFC4", Offset = "0xB0DFC4", VA = "0xB0DFC4")]
	private void endlessCallback()
	{
	}

	[Token(Token = "0x600026E")]
	[Address(RVA = "0xB0E02C", Offset = "0xB0E02C", VA = "0xB0E02C")]
	private void cycleThroughExamples()
	{
	}

	[Token(Token = "0x600026F")]
	[Address(RVA = "0xB0E344", Offset = "0xB0E344", VA = "0xB0E344")]
	public void updateValue3Example()
	{
	}

	[Token(Token = "0x6000270")]
	[Address(RVA = "0xB0E510", Offset = "0xB0E510", VA = "0xB0E510")]
	public void updateValue3ExampleUpdate(Vector3 val)
	{
	}

	[Token(Token = "0x6000271")]
	[Address(RVA = "0xB0E514", Offset = "0xB0E514", VA = "0xB0E514")]
	public void updateValue3ExampleCallback(Vector3 val)
	{
	}

	[Token(Token = "0x6000272")]
	[Address(RVA = "0xB0E564", Offset = "0xB0E564", VA = "0xB0E564")]
	public void loopTestClamp()
	{
	}

	[Token(Token = "0x6000273")]
	[Address(RVA = "0xB0E6C0", Offset = "0xB0E6C0", VA = "0xB0E6C0")]
	public void loopTestPingPong()
	{
	}

	[Token(Token = "0x6000274")]
	[Address(RVA = "0xB0E810", Offset = "0xB0E810", VA = "0xB0E810")]
	public void colorExample()
	{
	}

	[Token(Token = "0x6000275")]
	[Address(RVA = "0xB0E8B4", Offset = "0xB0E8B4", VA = "0xB0E8B4")]
	public void moveOnACurveExample()
	{
	}

	[Token(Token = "0x6000276")]
	[Address(RVA = "0xB0EADC", Offset = "0xB0EADC", VA = "0xB0EADC")]
	public void customTweenExample()
	{
	}

	[Token(Token = "0x6000277")]
	[Address(RVA = "0xB0EC5C", Offset = "0xB0EC5C", VA = "0xB0EC5C")]
	public void moveExample()
	{
	}

	[Token(Token = "0x6000278")]
	[Address(RVA = "0xB0ED30", Offset = "0xB0ED30", VA = "0xB0ED30")]
	public void rotateExample()
	{
	}

	[Token(Token = "0x6000279")]
	[Address(RVA = "0xB0EF48", Offset = "0xB0EF48", VA = "0xB0EF48")]
	public void rotateOnUpdate(float val)
	{
	}

	[Token(Token = "0x600027A")]
	[Address(RVA = "0xB0EF4C", Offset = "0xB0EF4C", VA = "0xB0EF4C")]
	public void rotateFinished(object hash)
	{
	}

	[Token(Token = "0x600027B")]
	[Address(RVA = "0xB0F060", Offset = "0xB0F060", VA = "0xB0F060")]
	public void scaleExample()
	{
	}

	[Token(Token = "0x600027C")]
	[Address(RVA = "0xB0F124", Offset = "0xB0F124", VA = "0xB0F124")]
	public void updateValueExample()
	{
	}

	[Token(Token = "0x600027D")]
	[Address(RVA = "0xB0F2C8", Offset = "0xB0F2C8", VA = "0xB0F2C8")]
	public void updateValueExampleCallback(float val, object hash)
	{
	}

	[Token(Token = "0x600027E")]
	[Address(RVA = "0xB0F32C", Offset = "0xB0F32C", VA = "0xB0F32C")]
	public void delayedCallExample()
	{
	}

	[Token(Token = "0x600027F")]
	[Address(RVA = "0xB0F428", Offset = "0xB0F428", VA = "0xB0F428")]
	public void delayedCallExampleCallback()
	{
	}

	[Token(Token = "0x6000280")]
	[Address(RVA = "0xB0F4EC", Offset = "0xB0F4EC", VA = "0xB0F4EC")]
	public void alphaExample()
	{
	}

	[Token(Token = "0x6000281")]
	[Address(RVA = "0xB0F5D4", Offset = "0xB0F5D4", VA = "0xB0F5D4")]
	public void moveLocalExample()
	{
	}

	[Token(Token = "0x6000282")]
	[Address(RVA = "0xB0F704", Offset = "0xB0F704", VA = "0xB0F704")]
	public void rotateAroundExample()
	{
	}

	[Token(Token = "0x6000283")]
	[Address(RVA = "0xB0F7F8", Offset = "0xB0F7F8", VA = "0xB0F7F8")]
	public void loopPause()
	{
	}

	[Token(Token = "0x6000284")]
	[Address(RVA = "0xB0F844", Offset = "0xB0F844", VA = "0xB0F844")]
	public void loopResume()
	{
	}

	[Token(Token = "0x6000285")]
	[Address(RVA = "0xB0F890", Offset = "0xB0F890", VA = "0xB0F890")]
	public void punchTest()
	{
	}

	[Token(Token = "0x6000286")]
	[Address(RVA = "0xB0F8D4", Offset = "0xB0F8D4", VA = "0xB0F8D4")]
	public TestingZLegacyExt()
	{
	}
}
[Token(Token = "0x2000055")]
public static class LeanTweenExtensions
{
	[Token(Token = "0x600028E")]
	[Address(RVA = "0xBDD3D4", Offset = "0xBDD3D4", VA = "0xBDD3D4")]
	public static void LTCancel(this LTDescr self)
	{
	}

	[Token(Token = "0x600028F")]
	[Address(RVA = "0xBDD4A0", Offset = "0xBDD4A0", VA = "0xBDD4A0")]
	public static void LTCancel(this LTDescr self, bool callOnComplete)
	{
	}

	[Token(Token = "0x6000290")]
	[Address(RVA = "0xBDD684", Offset = "0xBDD684", VA = "0xBDD684")]
	public static void LTPause(this LTDescr self)
	{
	}

	[Token(Token = "0x6000291")]
	[Address(RVA = "0xBDD848", Offset = "0xBDD848", VA = "0xBDD848")]
	public static void LTResume(this LTDescr self)
	{
	}

	[Token(Token = "0x6000292")]
	[Address(RVA = "0xBDDA0C", Offset = "0xBDDA0C", VA = "0xBDDA0C")]
	public static bool LTIsTweening(this LTDescr self)
	{
		return default(bool);
	}

	[Token(Token = "0x6000293")]
	[Address(RVA = "0xBDDC60", Offset = "0xBDDC60", VA = "0xBDDC60")]
	public static LTDescr LTAlpha(this LTDescr self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000294")]
	[Address(RVA = "0xBDDDB0", Offset = "0xBDDDB0", VA = "0xBDDDB0")]
	public static LTDescr LTAlphaVertex(this LTDescr self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000295")]
	[Address(RVA = "0xBDDEC8", Offset = "0xBDDEC8", VA = "0xBDDEC8")]
	public static LTDescr LTColor(this LTDescr self, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000296")]
	[Address(RVA = "0xBDE074", Offset = "0xBDE074", VA = "0xBDE074")]
	public static LTDescr LTDelayedCall(this LTDescr self, float delayTime, Action callback)
	{
		return null;
	}

	[Token(Token = "0x6000297")]
	[Address(RVA = "0xBDE1E4", Offset = "0xBDE1E4", VA = "0xBDE1E4")]
	public static LTDescr LTDelayedCall(this LTDescr self, float delayTime, Action<object> callback)
	{
		return null;
	}

	[Token(Token = "0x6000298")]
	[Address(RVA = "0xBDE354", Offset = "0xBDE354", VA = "0xBDE354")]
	public static LTDescr LTMove(this LTDescr self, Transform to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000299")]
	[Address(RVA = "0xBDE4C4", Offset = "0xBDE4C4", VA = "0xBDE4C4")]
	public static LTDescr LTMove(this LTDescr self, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x600029A")]
	[Address(RVA = "0xBDE604", Offset = "0xBDE604", VA = "0xBDE604")]
	public static LTDescr LTMove(this LTDescr self, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x600029B")]
	[Address(RVA = "0xBDE758", Offset = "0xBDE758", VA = "0xBDE758")]
	public static LTDescr LTMove(this LTDescr self, Vector3[] to, float time)
	{
		return null;
	}

	[Token(Token = "0x600029C")]
	[Address(RVA = "0xBDE928", Offset = "0xBDE928", VA = "0xBDE928")]
	public static LTDescr LTMove(this LTDescr self, LTBezierPath to, float time)
	{
		return null;
	}

	[Token(Token = "0x600029D")]
	[Address(RVA = "0xBDEA64", Offset = "0xBDEA64", VA = "0xBDEA64")]
	public static LTDescr LTMove(this LTDescr self, LTSpline to, float time)
	{
		return null;
	}

	[Token(Token = "0x600029E")]
	[Address(RVA = "0xBDEBA0", Offset = "0xBDEBA0", VA = "0xBDEBA0")]
	public static LTDescr LTMoveX(this LTDescr self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x600029F")]
	[Address(RVA = "0xBDECB8", Offset = "0xBDECB8", VA = "0xBDECB8")]
	public static LTDescr LTMoveY(this LTDescr self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002A0")]
	[Address(RVA = "0xBDEDD0", Offset = "0xBDEDD0", VA = "0xBDEDD0")]
	public static LTDescr LTMoveZ(this LTDescr self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002A1")]
	[Address(RVA = "0xBDEEE8", Offset = "0xBDEEE8", VA = "0xBDEEE8")]
	public static LTDescr LTMoveLocal(this LTDescr self, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002A2")]
	[Address(RVA = "0xBDF028", Offset = "0xBDF028", VA = "0xBDF028")]
	public static LTDescr LTMoveLocal(this LTDescr self, Vector3[] to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002A3")]
	[Address(RVA = "0xBDF1F8", Offset = "0xBDF1F8", VA = "0xBDF1F8")]
	public static LTDescr LTMoveLocal(this LTDescr self, LTBezierPath to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002A4")]
	[Address(RVA = "0xBDF334", Offset = "0xBDF334", VA = "0xBDF334")]
	public static LTDescr LTMoveLocal(this LTDescr self, LTSpline to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002A5")]
	[Address(RVA = "0xBDF470", Offset = "0xBDF470", VA = "0xBDF470")]
	public static LTDescr LTMoveLocalX(this LTDescr self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002A6")]
	[Address(RVA = "0xBDF588", Offset = "0xBDF588", VA = "0xBDF588")]
	public static LTDescr LTMoveLocalY(this LTDescr self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002A7")]
	[Address(RVA = "0xBDF6A0", Offset = "0xBDF6A0", VA = "0xBDF6A0")]
	public static LTDescr LTMoveLocalZ(this LTDescr self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002A8")]
	[Address(RVA = "0xBDF7B8", Offset = "0xBDF7B8", VA = "0xBDF7B8")]
	public static LTDescr LTRotate(this LTDescr self, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002A9")]
	[Address(RVA = "0xBDF8F8", Offset = "0xBDF8F8", VA = "0xBDF8F8")]
	public static LTDescr LTRotateLocal(this LTDescr self, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002AA")]
	[Address(RVA = "0xBDFA38", Offset = "0xBDFA38", VA = "0xBDFA38")]
	public static LTDescr LTRotateX(this LTDescr self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002AB")]
	[Address(RVA = "0xBDFB50", Offset = "0xBDFB50", VA = "0xBDFB50")]
	public static LTDescr LTRotateY(this LTDescr self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002AC")]
	[Address(RVA = "0xBDFC68", Offset = "0xBDFC68", VA = "0xBDFC68")]
	public static LTDescr LTRotateZ(this LTDescr self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002AD")]
	[Address(RVA = "0xBDFD80", Offset = "0xBDFD80", VA = "0xBDFD80")]
	public static LTDescr LTRotateAround(this LTDescr self, Vector3 axis, float add, float time)
	{
		return null;
	}

	[Token(Token = "0x60002AE")]
	[Address(RVA = "0xBDFEF4", Offset = "0xBDFEF4", VA = "0xBDFEF4")]
	public static LTDescr LTRotateAroundLocal(this LTDescr self, Vector3 axis, float add, float time)
	{
		return null;
	}

	[Token(Token = "0x60002AF")]
	[Address(RVA = "0xBE0068", Offset = "0xBE0068", VA = "0xBE0068")]
	public static LTDescr LTScale(this LTDescr self, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002B0")]
	[Address(RVA = "0xBE01A8", Offset = "0xBE01A8", VA = "0xBE01A8")]
	public static LTDescr LTScaleX(this LTDescr self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002B1")]
	[Address(RVA = "0xBE02C0", Offset = "0xBE02C0", VA = "0xBE02C0")]
	public static LTDescr LTScaleY(this LTDescr self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002B2")]
	[Address(RVA = "0xBE03D8", Offset = "0xBE03D8", VA = "0xBE03D8")]
	public static LTDescr LTScaleZ(this LTDescr self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002B3")]
	[Address(RVA = "0xBE04F0", Offset = "0xBE04F0", VA = "0xBE04F0")]
	public static LTDescr LTValue(this LTDescr self, float from, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002B4")]
	[Address(RVA = "0xBE063C", Offset = "0xBE063C", VA = "0xBE063C")]
	public static LTDescr LTValue(this LTDescr self, Vector2 from, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002B5")]
	[Address(RVA = "0xBE07C8", Offset = "0xBE07C8", VA = "0xBE07C8")]
	public static LTDescr LTValue(this LTDescr self, Vector3 from, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002B6")]
	[Address(RVA = "0xBE0964", Offset = "0xBE0964", VA = "0xBE0964")]
	public static LTDescr LTValue(this LTDescr self, Color from, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002B7")]
	[Address(RVA = "0xBE0B7C", Offset = "0xBE0B7C", VA = "0xBE0B7C")]
	public static LTDescr LTValue(this LTDescr self, Action<float> callOnUpdate, float from, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002B8")]
	[Address(RVA = "0xBE0D04", Offset = "0xBE0D04", VA = "0xBE0D04")]
	public static LTDescr LTValue(this LTDescr self, Action<float, float> callOnUpdateRatio, float from, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002B9")]
	[Address(RVA = "0xBE0E8C", Offset = "0xBE0E8C", VA = "0xBE0E8C")]
	public static LTDescr LTValue(this LTDescr self, Action<Color> callOnUpdate, Color from, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002BA")]
	[Address(RVA = "0xBE10AC", Offset = "0xBE10AC", VA = "0xBE10AC")]
	public static LTDescr LTValue(this LTDescr self, Action<Vector2> callOnUpdate, Vector2 from, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002BB")]
	[Address(RVA = "0xBE125C", Offset = "0xBE125C", VA = "0xBE125C")]
	public static LTDescr LTValue(this LTDescr self, Action<Vector3> callOnUpdate, Vector3 from, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002BC")]
	[Address(RVA = "0xBE1434", Offset = "0xBE1434", VA = "0xBE1434")]
	public static LTDescr LTValue(this LTDescr self, Action<float, object> callOnUpdate, float from, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002BD")]
	[Address(RVA = "0xBE15C0", Offset = "0xBE15C0", VA = "0xBE15C0")]
	public static LTDescr LTDelayedSound(this LTDescr self, AudioClip audio, Vector3 pos, float volume)
	{
		return null;
	}

	[Token(Token = "0x60002BE")]
	[Address(RVA = "0xBE1754", Offset = "0xBE1754", VA = "0xBE1754")]
	public static void LTCancel(this Transform self)
	{
	}

	[Token(Token = "0x60002BF")]
	[Address(RVA = "0xBE17C4", Offset = "0xBE17C4", VA = "0xBE17C4")]
	public static void LTCancel(this Transform self, bool callOnComplete)
	{
	}

	[Token(Token = "0x60002C0")]
	[Address(RVA = "0xBE183C", Offset = "0xBE183C", VA = "0xBE183C")]
	public static void LTPause(this Transform self)
	{
	}

	[Token(Token = "0x60002C1")]
	[Address(RVA = "0xBE18AC", Offset = "0xBE18AC", VA = "0xBE18AC")]
	public static void LTResume(this Transform self)
	{
	}

	[Token(Token = "0x60002C2")]
	[Address(RVA = "0xBE191C", Offset = "0xBE191C", VA = "0xBE191C")]
	public static bool LTIsTweening(this Transform self)
	{
		return default(bool);
	}

	[Token(Token = "0x60002C3")]
	[Address(RVA = "0xBE198C", Offset = "0xBE198C", VA = "0xBE198C")]
	public static LTDescr LTAlpha(this Transform self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002C4")]
	[Address(RVA = "0xBE1A14", Offset = "0xBE1A14", VA = "0xBE1A14")]
	public static LTDescr LTAlphaVertex(this Transform self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002C5")]
	[Address(RVA = "0xBE1A9C", Offset = "0xBE1A9C", VA = "0xBE1A9C")]
	public static LTDescr LTColor(this Transform self, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002C6")]
	[Address(RVA = "0xBE1B4C", Offset = "0xBE1B4C", VA = "0xBE1B4C")]
	public static LTDescr LTDelayedCall(this Transform self, float delayTime, Action callback)
	{
		return null;
	}

	[Token(Token = "0x60002C7")]
	[Address(RVA = "0xBE1BD4", Offset = "0xBE1BD4", VA = "0xBE1BD4")]
	public static LTDescr LTDelayedCall(this Transform self, float delayTime, Action<object> callback)
	{
		return null;
	}

	[Token(Token = "0x60002C8")]
	[Address(RVA = "0xBE1C5C", Offset = "0xBE1C5C", VA = "0xBE1C5C")]
	public static LTDescr LTMove(this Transform self, Transform to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002C9")]
	[Address(RVA = "0xBE1CE4", Offset = "0xBE1CE4", VA = "0xBE1CE4")]
	public static LTDescr LTMove(this Transform self, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002CA")]
	[Address(RVA = "0xBE1D84", Offset = "0xBE1D84", VA = "0xBE1D84")]
	public static LTDescr LTMove(this Transform self, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002CB")]
	[Address(RVA = "0xBE1E1C", Offset = "0xBE1E1C", VA = "0xBE1E1C")]
	public static LTDescr LTMove(this Transform self, Vector3[] to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002CC")]
	[Address(RVA = "0xBE1EA4", Offset = "0xBE1EA4", VA = "0xBE1EA4")]
	public static LTDescr LTMove(this Transform self, LTBezierPath to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002CD")]
	[Address(RVA = "0xBE1F2C", Offset = "0xBE1F2C", VA = "0xBE1F2C")]
	public static LTDescr LTMove(this Transform self, LTSpline to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002CE")]
	[Address(RVA = "0xBE1FB4", Offset = "0xBE1FB4", VA = "0xBE1FB4")]
	public static LTDescr LTMoveX(this Transform self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002CF")]
	[Address(RVA = "0xBE203C", Offset = "0xBE203C", VA = "0xBE203C")]
	public static LTDescr LTMoveY(this Transform self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002D0")]
	[Address(RVA = "0xBE20C4", Offset = "0xBE20C4", VA = "0xBE20C4")]
	public static LTDescr LTMoveZ(this Transform self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002D1")]
	[Address(RVA = "0xBE214C", Offset = "0xBE214C", VA = "0xBE214C")]
	public static LTDescr LTMoveLocal(this Transform self, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002D2")]
	[Address(RVA = "0xBE21EC", Offset = "0xBE21EC", VA = "0xBE21EC")]
	public static LTDescr LTMoveLocal(this Transform self, Vector3[] to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002D3")]
	[Address(RVA = "0xBE2274", Offset = "0xBE2274", VA = "0xBE2274")]
	public static LTDescr LTMoveLocal(this Transform self, LTBezierPath to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002D4")]
	[Address(RVA = "0xBE22FC", Offset = "0xBE22FC", VA = "0xBE22FC")]
	public static LTDescr LTMoveLocal(this Transform self, LTSpline to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002D5")]
	[Address(RVA = "0xBE2384", Offset = "0xBE2384", VA = "0xBE2384")]
	public static LTDescr LTMoveLocalX(this Transform self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002D6")]
	[Address(RVA = "0xBE240C", Offset = "0xBE240C", VA = "0xBE240C")]
	public static LTDescr LTMoveLocalY(this Transform self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002D7")]
	[Address(RVA = "0xBE2494", Offset = "0xBE2494", VA = "0xBE2494")]
	public static LTDescr LTMoveLocalZ(this Transform self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002D8")]
	[Address(RVA = "0xBE251C", Offset = "0xBE251C", VA = "0xBE251C")]
	public static LTDescr LTRotate(this Transform self, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002D9")]
	[Address(RVA = "0xBE25BC", Offset = "0xBE25BC", VA = "0xBE25BC")]
	public static LTDescr LTRotateLocal(this Transform self, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002DA")]
	[Address(RVA = "0xBE265C", Offset = "0xBE265C", VA = "0xBE265C")]
	public static LTDescr LTRotateX(this Transform self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002DB")]
	[Address(RVA = "0xBE26E4", Offset = "0xBE26E4", VA = "0xBE26E4")]
	public static LTDescr LTRotateY(this Transform self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002DC")]
	[Address(RVA = "0xBE276C", Offset = "0xBE276C", VA = "0xBE276C")]
	public static LTDescr LTRotateZ(this Transform self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002DD")]
	[Address(RVA = "0xBE27F4", Offset = "0xBE27F4", VA = "0xBE27F4")]
	public static LTDescr LTRotateAround(this Transform self, Vector3 axis, float add, float time)
	{
		return null;
	}

	[Token(Token = "0x60002DE")]
	[Address(RVA = "0xBE28A4", Offset = "0xBE28A4", VA = "0xBE28A4")]
	public static LTDescr LTRotateAroundLocal(this Transform self, Vector3 axis, float add, float time)
	{
		return null;
	}

	[Token(Token = "0x60002DF")]
	[Address(RVA = "0xBE2954", Offset = "0xBE2954", VA = "0xBE2954")]
	public static LTDescr LTScale(this Transform self, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002E0")]
	[Address(RVA = "0xBE29F4", Offset = "0xBE29F4", VA = "0xBE29F4")]
	public static LTDescr LTScaleX(this Transform self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002E1")]
	[Address(RVA = "0xBE2A7C", Offset = "0xBE2A7C", VA = "0xBE2A7C")]
	public static LTDescr LTScaleY(this Transform self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002E2")]
	[Address(RVA = "0xBE2B04", Offset = "0xBE2B04", VA = "0xBE2B04")]
	public static LTDescr LTScaleZ(this Transform self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002E3")]
	[Address(RVA = "0xBE2B8C", Offset = "0xBE2B8C", VA = "0xBE2B8C")]
	public static LTDescr LTValue(this Transform self, float from, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002E4")]
	[Address(RVA = "0xBE2C24", Offset = "0xBE2C24", VA = "0xBE2C24")]
	public static LTDescr LTValue(this Transform self, Vector2 from, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002E5")]
	[Address(RVA = "0xBE2CD4", Offset = "0xBE2CD4", VA = "0xBE2CD4")]
	public static LTDescr LTValue(this Transform self, Vector3 from, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002E6")]
	[Address(RVA = "0xBE2D9C", Offset = "0xBE2D9C", VA = "0xBE2D9C")]
	public static LTDescr LTValue(this Transform self, Color from, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002E7")]
	[Address(RVA = "0xBE2E74", Offset = "0xBE2E74", VA = "0xBE2E74")]
	public static LTDescr LTValue(this Transform self, Action<float> callOnUpdate, float from, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002E8")]
	[Address(RVA = "0xBE2F14", Offset = "0xBE2F14", VA = "0xBE2F14")]
	public static LTDescr LTValue(this Transform self, Action<float, float> callOnUpdateRatio, float from, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002E9")]
	[Address(RVA = "0xBE2FB4", Offset = "0xBE2FB4", VA = "0xBE2FB4")]
	public static LTDescr LTValue(this Transform self, Action<Color> callOnUpdate, Color from, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002EA")]
	[Address(RVA = "0xBE309C", Offset = "0xBE309C", VA = "0xBE309C")]
	public static LTDescr LTValue(this Transform self, Action<Vector2> callOnUpdate, Vector2 from, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002EB")]
	[Address(RVA = "0xBE3154", Offset = "0xBE3154", VA = "0xBE3154")]
	public static LTDescr LTValue(this Transform self, Action<Vector3> callOnUpdate, Vector3 from, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002EC")]
	[Address(RVA = "0xBE3224", Offset = "0xBE3224", VA = "0xBE3224")]
	public static LTDescr LTValue(this Transform self, Action<float, object> callOnUpdate, float from, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002ED")]
	[Address(RVA = "0xBE32C4", Offset = "0xBE32C4", VA = "0xBE32C4")]
	public static LTDescr LTDelayedSound(this Transform self, AudioClip audio, Vector3 pos, float volume)
	{
		return null;
	}

	[Token(Token = "0x60002EE")]
	[Address(RVA = "0xBE336C", Offset = "0xBE336C", VA = "0xBE336C")]
	public static LTDescr LTPlay(this RectTransform rectTransform, Sprite[] sprites)
	{
		return null;
	}

	[Token(Token = "0x60002EF")]
	[Address(RVA = "0xBE34B4", Offset = "0xBE34B4", VA = "0xBE34B4")]
	public static LTDescr LTTextAlpha(this RectTransform rectTransform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002F0")]
	[Address(RVA = "0xBE35C4", Offset = "0xBE35C4", VA = "0xBE35C4")]
	public static LTDescr LTTextColor(this RectTransform rectTransform, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002F1")]
	[Address(RVA = "0xBE3730", Offset = "0xBE3730", VA = "0xBE3730")]
	public static LTDescr LTMove(this RectTransform rectTrans, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002F2")]
	[Address(RVA = "0xBE3878", Offset = "0xBE3878", VA = "0xBE3878")]
	public static LTDescr LTMoveX(this RectTransform rectTrans, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002F3")]
	[Address(RVA = "0xBE3998", Offset = "0xBE3998", VA = "0xBE3998")]
	public static LTDescr LTMoveY(this RectTransform rectTrans, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002F4")]
	[Address(RVA = "0xBE3AB8", Offset = "0xBE3AB8", VA = "0xBE3AB8")]
	public static LTDescr LTMoveZ(this RectTransform rectTrans, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002F5")]
	[Address(RVA = "0xBE3BD8", Offset = "0xBE3BD8", VA = "0xBE3BD8")]
	public static LTDescr LTRotate(this RectTransform rectTrans, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002F6")]
	[Address(RVA = "0xBE3D44", Offset = "0xBE3D44", VA = "0xBE3D44")]
	public static LTDescr LTRotateAround(this RectTransform rectTrans, Vector3 axis, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002F7")]
	[Address(RVA = "0xBE3EC0", Offset = "0xBE3EC0", VA = "0xBE3EC0")]
	public static LTDescr LTRotateAroundLocal(this RectTransform rectTrans, Vector3 axis, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002F8")]
	[Address(RVA = "0xBE403C", Offset = "0xBE403C", VA = "0xBE403C")]
	public static LTDescr LTScale(this RectTransform rectTrans, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002F9")]
	[Address(RVA = "0xBE4184", Offset = "0xBE4184", VA = "0xBE4184")]
	public static LTDescr LTAlpha(this RectTransform rectTrans, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002FA")]
	[Address(RVA = "0xBE42A4", Offset = "0xBE42A4", VA = "0xBE42A4")]
	public static LTDescr LTColor(this RectTransform rectTrans, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002FB")]
	[Address(RVA = "0xBE4420", Offset = "0xBE4420", VA = "0xBE4420")]
	public static LTDescr LTAnchorMax(this RectTransform self, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002FC")]
	[Address(RVA = "0xBE452C", Offset = "0xBE452C", VA = "0xBE452C")]
	public static LTDescr LTAnchorMin(this RectTransform self, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002FD")]
	[Address(RVA = "0xBE4638", Offset = "0xBE4638", VA = "0xBE4638")]
	public static LTDescr LTAnchoredPosition(this RectTransform self, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002FE")]
	[Address(RVA = "0xBE4744", Offset = "0xBE4744", VA = "0xBE4744")]
	public static LTDescr LTAnchoredPositionX(this RectTransform self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x60002FF")]
	[Address(RVA = "0xBE4780", Offset = "0xBE4780", VA = "0xBE4780")]
	public static LTDescr LTAnchoredPositionY(this RectTransform self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000300")]
	[Address(RVA = "0xBE47BC", Offset = "0xBE47BC", VA = "0xBE47BC")]
	public static LTDescr LTAnchoredPosition3D(this RectTransform self, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000301")]
	[Address(RVA = "0xBE48D0", Offset = "0xBE48D0", VA = "0xBE48D0")]
	public static LTDescr LTPivot(this RectTransform self, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000302")]
	[Address(RVA = "0xBE49F4", Offset = "0xBE49F4", VA = "0xBE49F4")]
	public static LTDescr LTPivotX(this RectTransform self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000303")]
	[Address(RVA = "0xBE4A30", Offset = "0xBE4A30", VA = "0xBE4A30")]
	public static LTDescr LTPivotY(this RectTransform self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000304")]
	[Address(RVA = "0xBE4A6C", Offset = "0xBE4A6C", VA = "0xBE4A6C")]
	public static LTDescr LTSizeDelta(this RectTransform self, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000305")]
	[Address(RVA = "0xBE4B78", Offset = "0xBE4B78", VA = "0xBE4B78")]
	public static LTDescr LTVolume(this AudioSource self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000306")]
	[Address(RVA = "0xBE4C88", Offset = "0xBE4C88", VA = "0xBE4C88")]
	public static LTDescr LTPitch(this AudioSource self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000307")]
	[Address(RVA = "0xBE4D98", Offset = "0xBE4D98", VA = "0xBE4D98")]
	public static LTDescr LTAspect(this Camera self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000308")]
	[Address(RVA = "0xBE4EA8", Offset = "0xBE4EA8", VA = "0xBE4EA8")]
	public static LTDescr LTBackgroundColor(this Camera self, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000309")]
	[Address(RVA = "0xBE4FE8", Offset = "0xBE4FE8", VA = "0xBE4FE8")]
	public static LTDescr LTFarClipPlane(this Camera self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x600030A")]
	[Address(RVA = "0xBE50F8", Offset = "0xBE50F8", VA = "0xBE50F8")]
	public static LTDescr LTFieldOfView(this Camera self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x600030B")]
	[Address(RVA = "0xBE5208", Offset = "0xBE5208", VA = "0xBE5208")]
	public static LTDescr LTNearClipPlane(this Camera self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x600030C")]
	[Address(RVA = "0xBE5318", Offset = "0xBE5318", VA = "0xBE5318")]
	public static LTDescr LTOrthographicSize(this Camera self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x600030D")]
	[Address(RVA = "0xBE5428", Offset = "0xBE5428", VA = "0xBE5428")]
	public static LTDescr LTColor(this Light self, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x600030E")]
	[Address(RVA = "0xBE5568", Offset = "0xBE5568", VA = "0xBE5568")]
	public static LTDescr LTIntensity(this Light self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x600030F")]
	[Address(RVA = "0xBE5678", Offset = "0xBE5678", VA = "0xBE5678")]
	public static LTDescr LTShadowStrength(this Light self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000310")]
	[Address(RVA = "0xBE5788", Offset = "0xBE5788", VA = "0xBE5788")]
	public static LTDescr LTColor(this Material self, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000311")]
	[Address(RVA = "0xBE5964", Offset = "0xBE5964", VA = "0xBE5964")]
	public static LTDescr LTColor(this Material self, string property, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000312")]
	[Address(RVA = "0xBE5AAC", Offset = "0xBE5AAC", VA = "0xBE5AAC")]
	public static LTDescr LTAlpha(this Material self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000313")]
	[Address(RVA = "0xBE5B18", Offset = "0xBE5B18", VA = "0xBE5B18")]
	public static LTDescr LTAlpha(this Material self, string property, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000314")]
	[Address(RVA = "0xBE5B78", Offset = "0xBE5B78", VA = "0xBE5B78")]
	public static LTDescr LTFloat(this Material self, string property, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000315")]
	[Address(RVA = "0xBE5D08", Offset = "0xBE5D08", VA = "0xBE5D08")]
	public static LTDescr LTOffset(this Material self, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000316")]
	[Address(RVA = "0xBE5EA0", Offset = "0xBE5EA0", VA = "0xBE5EA0")]
	public static LTDescr LTOffset(this Material self, string property, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000317")]
	[Address(RVA = "0xBE5FB8", Offset = "0xBE5FB8", VA = "0xBE5FB8")]
	public static LTDescr LTScale(this Material self, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000318")]
	[Address(RVA = "0xBE60C0", Offset = "0xBE60C0", VA = "0xBE60C0")]
	public static LTDescr LTScale(this Material self, string property, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000319")]
	[Address(RVA = "0xBE61D8", Offset = "0xBE61D8", VA = "0xBE61D8")]
	public static LTDescr LTColor(this SpriteRenderer self, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x600031A")]
	[Address(RVA = "0xBE6318", Offset = "0xBE6318", VA = "0xBE6318")]
	public static LTDescr LTAlpha(this SpriteRenderer self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x600031B")]
	[Address(RVA = "0xBE6448", Offset = "0xBE6448", VA = "0xBE6448")]
	public static LTDescr LTResize(this TrailRenderer self, float toStart, float toEnd, float time)
	{
		return null;
	}

	[Token(Token = "0x600031C")]
	[Address(RVA = "0xBE6588", Offset = "0xBE6588", VA = "0xBE6588")]
	public static LTDescr LTTime(this TrailRenderer self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x600031D")]
	[Address(RVA = "0xBE6698", Offset = "0xBE6698", VA = "0xBE6698")]
	public static LTDescr LTAlpha(this CanvasGroup self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x600031E")]
	[Address(RVA = "0xBE67A8", Offset = "0xBE67A8", VA = "0xBE67A8")]
	public static LTDescr LTColor(this Graphic self, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x600031F")]
	[Address(RVA = "0xBE68F0", Offset = "0xBE68F0", VA = "0xBE68F0")]
	public static LTDescr LTAlpha(this Graphic self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000320")]
	[Address(RVA = "0xBE6A38", Offset = "0xBE6A38", VA = "0xBE6A38")]
	public static LTDescr LTColor(this Image self, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000321")]
	[Address(RVA = "0xBE6B80", Offset = "0xBE6B80", VA = "0xBE6B80")]
	public static LTDescr LTAlpha(this Image self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000322")]
	[Address(RVA = "0xBE6C08", Offset = "0xBE6C08", VA = "0xBE6C08")]
	public static LTDescr LTFillAmount(this Image self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000323")]
	[Address(RVA = "0xBE6D08", Offset = "0xBE6D08", VA = "0xBE6D08")]
	public static LTDescr LTFlexibleSize(this LayoutElement self, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000324")]
	[Address(RVA = "0xBE6E58", Offset = "0xBE6E58", VA = "0xBE6E58")]
	public static LTDescr LTMinSize(this LayoutElement self, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000325")]
	[Address(RVA = "0xBE6FA8", Offset = "0xBE6FA8", VA = "0xBE6FA8")]
	public static LTDescr LTPreferredSize(this LayoutElement self, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000326")]
	[Address(RVA = "0xBE70F8", Offset = "0xBE70F8", VA = "0xBE70F8")]
	public static LTDescr LTEffectColor(this Outline self, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000327")]
	[Address(RVA = "0xBE722C", Offset = "0xBE722C", VA = "0xBE722C")]
	public static LTDescr LTAlpha(this Outline self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000328")]
	[Address(RVA = "0xBE7250", Offset = "0xBE7250", VA = "0xBE7250")]
	public static LTDescr LTNormalizedPosition(this ScrollRect self, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000329")]
	[Address(RVA = "0xBE7374", Offset = "0xBE7374", VA = "0xBE7374")]
	public static LTDescr LTHorizontalNormalizedPosition(this ScrollRect self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x600032A")]
	[Address(RVA = "0xBE7484", Offset = "0xBE7484", VA = "0xBE7484")]
	public static LTDescr LTVerticalNormalizedPosition(this ScrollRect self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x600032B")]
	[Address(RVA = "0xBE7594", Offset = "0xBE7594", VA = "0xBE7594")]
	public static LTDescr LTValue(this UnityEngine.UI.Slider self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x600032C")]
	[Address(RVA = "0xBE76AC", Offset = "0xBE76AC", VA = "0xBE76AC")]
	public static LTDescr LTColor(this Text self, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x600032D")]
	[Address(RVA = "0xBE77F4", Offset = "0xBE77F4", VA = "0xBE77F4")]
	public static LTDescr LTAlpha(this Text self, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x600032E")]
	[Address(RVA = "0xBE7878", Offset = "0xBE7878", VA = "0xBE7878")]
	public static LTDescr LTText(this Text self, string to, float time)
	{
		return null;
	}
}
[Token(Token = "0x2000081")]
public static class LeanVirtual
{
	[Token(Token = "0x6000385")]
	[Address(RVA = "0xBE7F84", Offset = "0xBE7F84", VA = "0xBE7F84")]
	public static LTDescr DelayedCall(float delayTime, Action callback)
	{
		return null;
	}

	[Token(Token = "0x6000386")]
	[Address(RVA = "0xBE8054", Offset = "0xBE8054", VA = "0xBE8054")]
	public static LTDescr DelayedCall(float delayTime, Action<object> callback)
	{
		return null;
	}

	[Token(Token = "0x6000387")]
	[Address(RVA = "0xBE5C90", Offset = "0xBE5C90", VA = "0xBE5C90")]
	public static LTDescr Value(float from, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000388")]
	[Address(RVA = "0xBE5E10", Offset = "0xBE5E10", VA = "0xBE5E10")]
	public static LTDescr Value(Vector2 from, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000389")]
	[Address(RVA = "0xBE80BC", Offset = "0xBE80BC", VA = "0xBE80BC")]
	public static LTDescr Value(Vector3 from, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x600038A")]
	[Address(RVA = "0xBE58AC", Offset = "0xBE58AC", VA = "0xBE58AC")]
	public static LTDescr Value(Color from, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x600038B")]
	[Address(RVA = "0xBE8164", Offset = "0xBE8164", VA = "0xBE8164")]
	public static LTDescr Value(Action<float> callOnUpdate, float from, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x600038C")]
	[Address(RVA = "0xBE81E4", Offset = "0xBE81E4", VA = "0xBE81E4")]
	public static LTDescr Value(Action<float, float> callOnUpdateRatio, float from, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x600038D")]
	[Address(RVA = "0xBE8264", Offset = "0xBE8264", VA = "0xBE8264")]
	public static LTDescr Value(Action<Color> callOnUpdate, Color from, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x600038E")]
	[Address(RVA = "0xBE832C", Offset = "0xBE832C", VA = "0xBE832C")]
	public static LTDescr Value(Action<Vector2> callOnUpdate, Vector2 from, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x600038F")]
	[Address(RVA = "0xBE83C4", Offset = "0xBE83C4", VA = "0xBE83C4")]
	public static LTDescr Value(Action<Vector3> callOnUpdate, Vector3 from, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000390")]
	[Address(RVA = "0xBE8474", Offset = "0xBE8474", VA = "0xBE8474")]
	public static LTDescr Value(Action<float, object> callOnUpdate, float from, float to, float time)
	{
		return null;
	}
}
[Token(Token = "0x2000082")]
public class LeanAudioStream
{
	[Token(Token = "0x40001F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int position;

	[Token(Token = "0x40001F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip audioClip;

	[Token(Token = "0x40001F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float[] audioArr;

	[Token(Token = "0x6000391")]
	[Address(RVA = "0xBE84F4", Offset = "0xBE84F4", VA = "0xBE84F4")]
	public LeanAudioStream(float[] audioArr)
	{
	}

	[Token(Token = "0x6000392")]
	[Address(RVA = "0xBE851C", Offset = "0xBE851C", VA = "0xBE851C")]
	public void OnAudioRead(float[] data)
	{
	}

	[Token(Token = "0x6000393")]
	[Address(RVA = "0xBE8590", Offset = "0xBE8590", VA = "0xBE8590")]
	public void OnAudioSetPosition(int newPosition)
	{
	}
}
[Token(Token = "0x2000083")]
public class LeanAudio
{
	[Token(Token = "0x40001F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static float MIN_FREQEUNCY_PERIOD;

	[Token(Token = "0x40001FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static int PROCESSING_ITERATIONS_MAX;

	[Token(Token = "0x40001FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static float[] generatedWaveDistances;

	[Token(Token = "0x40001FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static int generatedWaveDistancesCount;

	[Token(Token = "0x40001FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static float[] longList;

	[Token(Token = "0x6000394")]
	[Address(RVA = "0xBE8598", Offset = "0xBE8598", VA = "0xBE8598")]
	public static LeanAudioOptions options()
	{
		return null;
	}

	[Token(Token = "0x6000395")]
	[Address(RVA = "0xBE86C0", Offset = "0xBE86C0", VA = "0xBE86C0")]
	public static LeanAudioStream createAudioStream(AnimationCurve volume, AnimationCurve frequency, [Optional] LeanAudioOptions options)
	{
		return null;
	}

	[Token(Token = "0x6000396")]
	[Address(RVA = "0xBE9004", Offset = "0xBE9004", VA = "0xBE9004")]
	public static AudioClip createAudio(AnimationCurve volume, AnimationCurve frequency, [Optional] LeanAudioOptions options)
	{
		return null;
	}

	[Token(Token = "0x6000397")]
	[Address(RVA = "0xBE8790", Offset = "0xBE8790", VA = "0xBE8790")]
	private static int createAudioWave(AnimationCurve volume, AnimationCurve frequency, LeanAudioOptions options)
	{
		return default(int);
	}

	[Token(Token = "0x6000398")]
	[Address(RVA = "0xBE8B1C", Offset = "0xBE8B1C", VA = "0xBE8B1C")]
	private static AudioClip createAudioFromWave(int waveLength, LeanAudioOptions options)
	{
		return null;
	}

	[Token(Token = "0x6000399")]
	[Address(RVA = "0xBE90C8", Offset = "0xBE90C8", VA = "0xBE90C8")]
	private static void OnAudioSetPosition(int newPosition)
	{
	}

	[Token(Token = "0x600039A")]
	[Address(RVA = "0xBE90CC", Offset = "0xBE90CC", VA = "0xBE90CC")]
	public static AudioClip generateAudioFromCurve(AnimationCurve curve, int frequencyRate = 44100)
	{
		return null;
	}

	[Token(Token = "0x600039B")]
	[Address(RVA = "0xBE9238", Offset = "0xBE9238", VA = "0xBE9238")]
	public static AudioSource play(AudioClip audio, float volume)
	{
		return null;
	}

	[Token(Token = "0x600039C")]
	[Address(RVA = "0xBE9434", Offset = "0xBE9434", VA = "0xBE9434")]
	public static AudioSource play(AudioClip audio)
	{
		return null;
	}

	[Token(Token = "0x600039D")]
	[Address(RVA = "0xBE94DC", Offset = "0xBE94DC", VA = "0xBE94DC")]
	public static AudioSource play(AudioClip audio, Vector3 pos)
	{
		return null;
	}

	[Token(Token = "0x600039E")]
	[Address(RVA = "0xBE9558", Offset = "0xBE9558", VA = "0xBE9558")]
	public static AudioSource play(AudioClip audio, Vector3 pos, float volume)
	{
		return null;
	}

	[Token(Token = "0x600039F")]
	[Address(RVA = "0xBE9304", Offset = "0xBE9304", VA = "0xBE9304")]
	public static AudioSource playClipAt(AudioClip clip, Vector3 pos)
	{
		return null;
	}

	[Token(Token = "0x60003A0")]
	[Address(RVA = "0xBE9608", Offset = "0xBE9608", VA = "0xBE9608")]
	public static void printOutAudioClip(AudioClip audioClip, ref AnimationCurve curve, float scaleX = 1f)
	{
	}

	[Token(Token = "0x60003A1")]
	[Address(RVA = "0xBE97A4", Offset = "0xBE97A4", VA = "0xBE97A4")]
	public LeanAudio()
	{
	}
}
[Token(Token = "0x2000084")]
public class LeanAudioOptions
{
	[Token(Token = "0x2000085")]
	public enum LeanAudioWaveStyle
	{
		[Token(Token = "0x4000207")]
		Sine,
		[Token(Token = "0x4000208")]
		Square,
		[Token(Token = "0x4000209")]
		Sawtooth,
		[Token(Token = "0x400020A")]
		Noise
	}

	[Token(Token = "0x40001FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public LeanAudioWaveStyle waveStyle;

	[Token(Token = "0x40001FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3[] vibrato;

	[Token(Token = "0x4000200")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3[] modulation;

	[Token(Token = "0x4000201")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int frequencyRate;

	[Token(Token = "0x4000202")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float waveNoiseScale;

	[Token(Token = "0x4000203")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float waveNoiseInfluence;

	[Token(Token = "0x4000204")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool useSetData;

	[Token(Token = "0x4000205")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public LeanAudioStream stream;

	[Token(Token = "0x60003A3")]
	[Address(RVA = "0xBE869C", Offset = "0xBE869C", VA = "0xBE869C")]
	public LeanAudioOptions()
	{
	}

	[Token(Token = "0x60003A4")]
	[Address(RVA = "0xBE9804", Offset = "0xBE9804", VA = "0xBE9804")]
	public LeanAudioOptions setFrequency(int frequencyRate)
	{
		return null;
	}

	[Token(Token = "0x60003A5")]
	[Address(RVA = "0xBE980C", Offset = "0xBE980C", VA = "0xBE980C")]
	public LeanAudioOptions setVibrato(Vector3[] vibrato)
	{
		return null;
	}

	[Token(Token = "0x60003A6")]
	[Address(RVA = "0xBE9814", Offset = "0xBE9814", VA = "0xBE9814")]
	public LeanAudioOptions setWaveSine()
	{
		return null;
	}

	[Token(Token = "0x60003A7")]
	[Address(RVA = "0xBE981C", Offset = "0xBE981C", VA = "0xBE981C")]
	public LeanAudioOptions setWaveSquare()
	{
		return null;
	}

	[Token(Token = "0x60003A8")]
	[Address(RVA = "0xBE9828", Offset = "0xBE9828", VA = "0xBE9828")]
	public LeanAudioOptions setWaveSawtooth()
	{
		return null;
	}

	[Token(Token = "0x60003A9")]
	[Address(RVA = "0xBE9834", Offset = "0xBE9834", VA = "0xBE9834")]
	public LeanAudioOptions setWaveNoise()
	{
		return null;
	}

	[Token(Token = "0x60003AA")]
	[Address(RVA = "0xBE9840", Offset = "0xBE9840", VA = "0xBE9840")]
	public LeanAudioOptions setWaveStyle(LeanAudioWaveStyle style)
	{
		return null;
	}

	[Token(Token = "0x60003AB")]
	[Address(RVA = "0xBE9848", Offset = "0xBE9848", VA = "0xBE9848")]
	public LeanAudioOptions setWaveNoiseScale(float waveScale)
	{
		return null;
	}

	[Token(Token = "0x60003AC")]
	[Address(RVA = "0xBE9850", Offset = "0xBE9850", VA = "0xBE9850")]
	public LeanAudioOptions setWaveNoiseInfluence(float influence)
	{
		return null;
	}
}
[Token(Token = "0x2000086")]
public class LeanSmooth
{
	[Token(Token = "0x60003AD")]
	[Address(RVA = "0xBE9858", Offset = "0xBE9858", VA = "0xBE9858")]
	public static float damp(float current, float target, ref float currentVelocity, float smoothTime, float maxSpeed = -1f, float deltaTime = -1f)
	{
		return default(float);
	}

	[Token(Token = "0x60003AE")]
	[Address(RVA = "0xBE9974", Offset = "0xBE9974", VA = "0xBE9974")]
	public static Vector3 damp(Vector3 current, Vector3 target, ref Vector3 currentVelocity, float smoothTime, float maxSpeed = -1f, float deltaTime = -1f)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60003AF")]
	[Address(RVA = "0xBE9A20", Offset = "0xBE9A20", VA = "0xBE9A20")]
	public static Color damp(Color current, Color target, ref Color currentVelocity, float smoothTime, float maxSpeed = -1f, float deltaTime = -1f)
	{
		return default(Color);
	}

	[Token(Token = "0x60003B0")]
	[Address(RVA = "0xBE9AF8", Offset = "0xBE9AF8", VA = "0xBE9AF8")]
	public static float spring(float current, float target, ref float currentVelocity, float smoothTime, float maxSpeed = -1f, float deltaTime = -1f, float friction = 2f, float accelRate = 0.5f)
	{
		return default(float);
	}

	[Token(Token = "0x60003B1")]
	[Address(RVA = "0xBE9BA0", Offset = "0xBE9BA0", VA = "0xBE9BA0")]
	public static Vector3 spring(Vector3 current, Vector3 target, ref Vector3 currentVelocity, float smoothTime, float maxSpeed = -1f, float deltaTime = -1f, float friction = 2f, float accelRate = 0.5f)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60003B2")]
	[Address(RVA = "0xBE9C6C", Offset = "0xBE9C6C", VA = "0xBE9C6C")]
	public static Color spring(Color current, Color target, ref Color currentVelocity, float smoothTime, float maxSpeed = -1f, float deltaTime = -1f, float friction = 2f, float accelRate = 0.5f)
	{
		return default(Color);
	}

	[Token(Token = "0x60003B3")]
	[Address(RVA = "0xBE9D6C", Offset = "0xBE9D6C", VA = "0xBE9D6C")]
	public static float linear(float current, float target, float moveSpeed, float deltaTime = -1f)
	{
		return default(float);
	}

	[Token(Token = "0x60003B4")]
	[Address(RVA = "0xBE9DE0", Offset = "0xBE9DE0", VA = "0xBE9DE0")]
	public static Vector3 linear(Vector3 current, Vector3 target, float moveSpeed, float deltaTime = -1f)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60003B5")]
	[Address(RVA = "0xBE9F10", Offset = "0xBE9F10", VA = "0xBE9F10")]
	public static Color linear(Color current, Color target, float moveSpeed)
	{
		return default(Color);
	}

	[Token(Token = "0x60003B6")]
	[Address(RVA = "0xBEA064", Offset = "0xBEA064", VA = "0xBEA064")]
	public static float bounceOut(float current, float target, ref float currentVelocity, float smoothTime, float maxSpeed = -1f, float deltaTime = -1f, float friction = 2f, float accelRate = 0.5f, float hitDamping = 0.9f)
	{
		return default(float);
	}

	[Token(Token = "0x60003B7")]
	[Address(RVA = "0xBEA14C", Offset = "0xBEA14C", VA = "0xBEA14C")]
	public static Vector3 bounceOut(Vector3 current, Vector3 target, ref Vector3 currentVelocity, float smoothTime, float maxSpeed = -1f, float deltaTime = -1f, float friction = 2f, float accelRate = 0.5f, float hitDamping = 0.9f)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60003B8")]
	[Address(RVA = "0xBEA228", Offset = "0xBEA228", VA = "0xBEA228")]
	public static Color bounceOut(Color current, Color target, ref Color currentVelocity, float smoothTime, float maxSpeed = -1f, float deltaTime = -1f, float friction = 2f, float accelRate = 0.5f, float hitDamping = 0.9f)
	{
		return default(Color);
	}

	[Token(Token = "0x60003B9")]
	[Address(RVA = "0xBEA33C", Offset = "0xBEA33C", VA = "0xBEA33C")]
	public LeanSmooth()
	{
	}
}
[Token(Token = "0x2000087")]
public class LeanTester : MonoBehaviour
{
	[Token(Token = "0x2000088")]
	[CompilerGenerated]
	private sealed class <timeoutCheck>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400020C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x400020D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400020E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LeanTester <>4__this;

		[Token(Token = "0x400020F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <pauseEndTime>5__2;

		[Token(Token = "0x17000023")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60003C0")]
			[Address(RVA = "0xBEA8F0", Offset = "0xBEA8F0", VA = "0xBEA8F0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000024")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60003C2")]
			[Address(RVA = "0xBEA938", Offset = "0xBEA938", VA = "0xBEA938", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60003BD")]
		[Address(RVA = "0xBEA3CC", Offset = "0xBEA3CC", VA = "0xBEA3CC")]
		[DebuggerHidden]
		public <timeoutCheck>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x60003BE")]
		[Address(RVA = "0xBEA404", Offset = "0xBEA404", VA = "0xBEA404", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60003BF")]
		[Address(RVA = "0xBEA408", Offset = "0xBEA408", VA = "0xBEA408", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60003C1")]
		[Address(RVA = "0xBEA8F8", Offset = "0xBEA8F8", VA = "0xBEA8F8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400020B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float timeout;

	[Token(Token = "0x60003BA")]
	[Address(RVA = "0xBEA344", Offset = "0xBEA344", VA = "0xBEA344")]
	public void Start()
	{
	}

	[Token(Token = "0x60003BB")]
	[Address(RVA = "0xBEA364", Offset = "0xBEA364", VA = "0xBEA364")]
	[IteratorStateMachine(typeof(<timeoutCheck>d__2))]
	private IEnumerator timeoutCheck()
	{
		return null;
	}

	[Token(Token = "0x60003BC")]
	[Address(RVA = "0xBEA3F4", Offset = "0xBEA3F4", VA = "0xBEA3F4")]
	public LeanTester()
	{
	}
}
[Token(Token = "0x2000089")]
public class LeanTest
{
	[Token(Token = "0x4000210")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int expected;

	[Token(Token = "0x4000211")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	private static int tests;

	[Token(Token = "0x4000212")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static int passes;

	[Token(Token = "0x4000213")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public static float timeout;

	[Token(Token = "0x4000214")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public static bool timeoutStarted;

	[Token(Token = "0x4000215")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	public static bool testsFinished;

	[Token(Token = "0x60003C3")]
	[Address(RVA = "0xBEA940", Offset = "0xBEA940", VA = "0xBEA940")]
	public static void debug(string name, bool didPass, [Optional] string failExplaination)
	{
	}

	[Token(Token = "0x60003C4")]
	[Address(RVA = "0xBEA9AC", Offset = "0xBEA9AC", VA = "0xBEA9AC")]
	public static void expect(bool didPass, string definition, [Optional] string failExplaination)
	{
	}

	[Token(Token = "0x60003C5")]
	[Address(RVA = "0xBEB25C", Offset = "0xBEB25C", VA = "0xBEB25C")]
	public static string padRight(int len)
	{
		return null;
	}

	[Token(Token = "0x60003C6")]
	[Address(RVA = "0xBEAFA8", Offset = "0xBEAFA8", VA = "0xBEAFA8")]
	public static float printOutLength(string str)
	{
		return default(float);
	}

	[Token(Token = "0x60003C7")]
	[Address(RVA = "0xBEB2D0", Offset = "0xBEB2D0", VA = "0xBEB2D0")]
	public static string formatBC(string str, string color)
	{
		return null;
	}

	[Token(Token = "0x60003C8")]
	[Address(RVA = "0xBEA55C", Offset = "0xBEA55C", VA = "0xBEA55C")]
	public static string formatB(string str)
	{
		return null;
	}

	[Token(Token = "0x60003C9")]
	[Address(RVA = "0xBEB0D4", Offset = "0xBEB0D4", VA = "0xBEB0D4")]
	public static string formatC(string str, string color)
	{
		return null;
	}

	[Token(Token = "0x60003CA")]
	[Address(RVA = "0xBEA5C8", Offset = "0xBEA5C8", VA = "0xBEA5C8")]
	public static void overview()
	{
	}

	[Token(Token = "0x60003CB")]
	[Address(RVA = "0xBEB338", Offset = "0xBEB338", VA = "0xBEB338")]
	public LeanTest()
	{
	}
}
[Token(Token = "0x200008A")]
public enum TweenAction
{
	[Token(Token = "0x4000217")]
	MOVE_X,
	[Token(Token = "0x4000218")]
	MOVE_Y,
	[Token(Token = "0x4000219")]
	MOVE_Z,
	[Token(Token = "0x400021A")]
	MOVE_LOCAL_X,
	[Token(Token = "0x400021B")]
	MOVE_LOCAL_Y,
	[Token(Token = "0x400021C")]
	MOVE_LOCAL_Z,
	[Token(Token = "0x400021D")]
	MOVE_CURVED,
	[Token(Token = "0x400021E")]
	MOVE_CURVED_LOCAL,
	[Token(Token = "0x400021F")]
	MOVE_SPLINE,
	[Token(Token = "0x4000220")]
	MOVE_SPLINE_LOCAL,
	[Token(Token = "0x4000221")]
	SCALE_X,
	[Token(Token = "0x4000222")]
	SCALE_Y,
	[Token(Token = "0x4000223")]
	SCALE_Z,
	[Token(Token = "0x4000224")]
	ROTATE_X,
	[Token(Token = "0x4000225")]
	ROTATE_Y,
	[Token(Token = "0x4000226")]
	ROTATE_Z,
	[Token(Token = "0x4000227")]
	ROTATE_AROUND,
	[Token(Token = "0x4000228")]
	ROTATE_AROUND_LOCAL,
	[Token(Token = "0x4000229")]
	CANVAS_ROTATEAROUND,
	[Token(Token = "0x400022A")]
	CANVAS_ROTATEAROUND_LOCAL,
	[Token(Token = "0x400022B")]
	CANVAS_PLAYSPRITE,
	[Token(Token = "0x400022C")]
	ALPHA,
	[Token(Token = "0x400022D")]
	TEXT_ALPHA,
	[Token(Token = "0x400022E")]
	CANVAS_ALPHA,
	[Token(Token = "0x400022F")]
	CANVASGROUP_ALPHA,
	[Token(Token = "0x4000230")]
	ALPHA_VERTEX,
	[Token(Token = "0x4000231")]
	COLOR,
	[Token(Token = "0x4000232")]
	CALLBACK_COLOR,
	[Token(Token = "0x4000233")]
	TEXT_COLOR,
	[Token(Token = "0x4000234")]
	CANVAS_COLOR,
	[Token(Token = "0x4000235")]
	CANVAS_MOVE_X,
	[Token(Token = "0x4000236")]
	CANVAS_MOVE_Y,
	[Token(Token = "0x4000237")]
	CANVAS_MOVE_Z,
	[Token(Token = "0x4000238")]
	CALLBACK,
	[Token(Token = "0x4000239")]
	MOVE,
	[Token(Token = "0x400023A")]
	MOVE_LOCAL,
	[Token(Token = "0x400023B")]
	MOVE_TO_TRANSFORM,
	[Token(Token = "0x400023C")]
	ROTATE,
	[Token(Token = "0x400023D")]
	ROTATE_LOCAL,
	[Token(Token = "0x400023E")]
	SCALE,
	[Token(Token = "0x400023F")]
	VALUE3,
	[Token(Token = "0x4000240")]
	GUI_MOVE,
	[Token(Token = "0x4000241")]
	GUI_MOVE_MARGIN,
	[Token(Token = "0x4000242")]
	GUI_SCALE,
	[Token(Token = "0x4000243")]
	GUI_ALPHA,
	[Token(Token = "0x4000244")]
	GUI_ROTATE,
	[Token(Token = "0x4000245")]
	DELAYED_SOUND,
	[Token(Token = "0x4000246")]
	CANVAS_MOVE,
	[Token(Token = "0x4000247")]
	CANVAS_SCALE,
	[Token(Token = "0x4000248")]
	CANVAS_SIZEDELTA,
	[Token(Token = "0x4000249")]
	FOLLOW
}
[Token(Token = "0x200008B")]
public enum LeanTweenType
{
	[Token(Token = "0x400024B")]
	notUsed,
	[Token(Token = "0x400024C")]
	linear,
	[Token(Token = "0x400024D")]
	easeOutQuad,
	[Token(Token = "0x400024E")]
	easeInQuad,
	[Token(Token = "0x400024F")]
	easeInOutQuad,
	[Token(Token = "0x4000250")]
	easeInCubic,
	[Token(Token = "0x4000251")]
	easeOutCubic,
	[Token(Token = "0x4000252")]
	easeInOutCubic,
	[Token(Token = "0x4000253")]
	easeInQuart,
	[Token(Token = "0x4000254")]
	easeOutQuart,
	[Token(Token = "0x4000255")]
	easeInOutQuart,
	[Token(Token = "0x4000256")]
	easeInQuint,
	[Token(Token = "0x4000257")]
	easeOutQuint,
	[Token(Token = "0x4000258")]
	easeInOutQuint,
	[Token(Token = "0x4000259")]
	easeInSine,
	[Token(Token = "0x400025A")]
	easeOutSine,
	[Token(Token = "0x400025B")]
	easeInOutSine,
	[Token(Token = "0x400025C")]
	easeInExpo,
	[Token(Token = "0x400025D")]
	easeOutExpo,
	[Token(Token = "0x400025E")]
	easeInOutExpo,
	[Token(Token = "0x400025F")]
	easeInCirc,
	[Token(Token = "0x4000260")]
	easeOutCirc,
	[Token(Token = "0x4000261")]
	easeInOutCirc,
	[Token(Token = "0x4000262")]
	easeInBounce,
	[Token(Token = "0x4000263")]
	easeOutBounce,
	[Token(Token = "0x4000264")]
	easeInOutBounce,
	[Token(Token = "0x4000265")]
	easeInBack,
	[Token(Token = "0x4000266")]
	easeOutBack,
	[Token(Token = "0x4000267")]
	easeInOutBack,
	[Token(Token = "0x4000268")]
	easeInElastic,
	[Token(Token = "0x4000269")]
	easeOutElastic,
	[Token(Token = "0x400026A")]
	easeInOutElastic,
	[Token(Token = "0x400026B")]
	easeSpring,
	[Token(Token = "0x400026C")]
	easeShake,
	[Token(Token = "0x400026D")]
	punch,
	[Token(Token = "0x400026E")]
	once,
	[Token(Token = "0x400026F")]
	clamp,
	[Token(Token = "0x4000270")]
	pingPong,
	[Token(Token = "0x4000271")]
	animationCurve
}
[Token(Token = "0x200008C")]
public enum LeanProp
{
	[Token(Token = "0x4000273")]
	position,
	[Token(Token = "0x4000274")]
	localPosition,
	[Token(Token = "0x4000275")]
	x,
	[Token(Token = "0x4000276")]
	y,
	[Token(Token = "0x4000277")]
	z,
	[Token(Token = "0x4000278")]
	localX,
	[Token(Token = "0x4000279")]
	localY,
	[Token(Token = "0x400027A")]
	localZ,
	[Token(Token = "0x400027B")]
	scale,
	[Token(Token = "0x400027C")]
	color
}
[Token(Token = "0x200008D")]
public class LeanTween : MonoBehaviour
{
	[Token(Token = "0x400027D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool throwErrors;

	[Token(Token = "0x400027E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static float tau;

	[Token(Token = "0x400027F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static float PI_DIV2;

	[Token(Token = "0x4000280")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static LTSeq[] sequences;

	[Token(Token = "0x4000281")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static LTDescr[] tweens;

	[Token(Token = "0x4000282")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static int[] tweensFinished;

	[Token(Token = "0x4000283")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static int[] tweensFinishedIds;

	[Token(Token = "0x4000284")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static LTDescr tween;

	[Token(Token = "0x4000285")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static int tweenMaxSearch;

	[Token(Token = "0x4000286")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private static int maxTweens;

	[Token(Token = "0x4000287")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static int maxSequences;

	[Token(Token = "0x4000288")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private static int frameRendered;

	[Token(Token = "0x4000289")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private static GameObject _tweenEmpty;

	[Token(Token = "0x400028A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public static float dtEstimated;

	[Token(Token = "0x400028B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public static float dtManual;

	[Token(Token = "0x400028C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public static float dtActual;

	[Token(Token = "0x400028D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private static uint global_counter;

	[Token(Token = "0x400028E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private static int i;

	[Token(Token = "0x400028F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private static int j;

	[Token(Token = "0x4000290")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private static int finishedCnt;

	[Token(Token = "0x4000291")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public static AnimationCurve punch;

	[Token(Token = "0x4000292")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public static AnimationCurve shake;

	[Token(Token = "0x4000293")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private static int maxTweenReached;

	[Token(Token = "0x4000294")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public static int startSearch;

	[Token(Token = "0x4000295")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public static LTDescr d;

	[Token(Token = "0x4000296")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private static Action<LTEvent>[] eventListeners;

	[Token(Token = "0x4000297")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private static GameObject[] goListeners;

	[Token(Token = "0x4000298")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private static int eventsMaxSearch;

	[Token(Token = "0x4000299")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public static int EVENTS_MAX;

	[Token(Token = "0x400029A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public static int LISTENERS_MAX;

	[Token(Token = "0x400029B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private static int INIT_LISTENERS_MAX;

	[Token(Token = "0x17000025")]
	public static int maxSearch
	{
		[Token(Token = "0x60003CE")]
		[Address(RVA = "0xBEB448", Offset = "0xBEB448", VA = "0xBEB448")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000026")]
	public static int maxSimulataneousTweens
	{
		[Token(Token = "0x60003CF")]
		[Address(RVA = "0xBEB4A0", Offset = "0xBEB4A0", VA = "0xBEB4A0")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000027")]
	public static int tweensRunning
	{
		[Token(Token = "0x60003D0")]
		[Address(RVA = "0xBEB4F8", Offset = "0xBEB4F8", VA = "0xBEB4F8")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000028")]
	public static GameObject tweenEmpty
	{
		[Token(Token = "0x60003FB")]
		[Address(RVA = "0xBE7FEC", Offset = "0xBE7FEC", VA = "0xBE7FEC")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x60003CD")]
	[Address(RVA = "0xBEB390", Offset = "0xBEB390", VA = "0xBEB390")]
	public static void init()
	{
	}

	[Token(Token = "0x60003D1")]
	[Address(RVA = "0xBEB3E8", Offset = "0xBEB3E8", VA = "0xBEB3E8")]
	public static void init(int maxSimultaneousTweens)
	{
	}

	[Token(Token = "0x60003D2")]
	[Address(RVA = "0xBEB5B0", Offset = "0xBEB5B0", VA = "0xBEB5B0")]
	public static void init(int maxSimultaneousTweens, int maxSimultaneousSequences)
	{
	}

	[Token(Token = "0x60003D3")]
	[Address(RVA = "0xBEBA00", Offset = "0xBEBA00", VA = "0xBEBA00")]
	public static void reset()
	{
	}

	[Token(Token = "0x60003D4")]
	[Address(RVA = "0xBEBB48", Offset = "0xBEBB48", VA = "0xBEBB48")]
	public void Update()
	{
	}

	[Token(Token = "0x60003D5")]
	[Address(RVA = "0xBEBFBC", Offset = "0xBEBFBC", VA = "0xBEBFBC")]
	private static void onLevelWasLoaded54(Scene scene, LoadSceneMode mode)
	{
	}

	[Token(Token = "0x60003D6")]
	[Address(RVA = "0xBEC01C", Offset = "0xBEC01C", VA = "0xBEC01C")]
	private static void internalOnLevelWasLoaded(int lvl)
	{
	}

	[Token(Token = "0x60003D7")]
	[Address(RVA = "0xBEBB94", Offset = "0xBEBB94", VA = "0xBEBB94")]
	public static void update()
	{
	}

	[Token(Token = "0x60003D8")]
	[Address(RVA = "0xBEC388", Offset = "0xBEC388", VA = "0xBEC388")]
	public static void removeTween(int i, int uniqueId)
	{
	}

	[Token(Token = "0x60003D9")]
	[Address(RVA = "0xBEC06C", Offset = "0xBEC06C", VA = "0xBEC06C")]
	public static void removeTween(int i)
	{
	}

	[Token(Token = "0x60003DA")]
	[Address(RVA = "0xBEC448", Offset = "0xBEC448", VA = "0xBEC448")]
	public static Vector3[] add(Vector3[] a, Vector3 b)
	{
		return null;
	}

	[Token(Token = "0x60003DB")]
	[Address(RVA = "0xBEC5B4", Offset = "0xBEC5B4", VA = "0xBEC5B4")]
	public static float closestRot(float from, float to)
	{
		return default(float);
	}

	[Token(Token = "0x60003DC")]
	[Address(RVA = "0xBEC604", Offset = "0xBEC604", VA = "0xBEC604")]
	public static void cancelAll()
	{
	}

	[Token(Token = "0x60003DD")]
	[Address(RVA = "0xBEC654", Offset = "0xBEC654", VA = "0xBEC654")]
	public static void cancelAll(bool callComplete)
	{
	}

	[Token(Token = "0x60003DE")]
	[Address(RVA = "0xBDD448", Offset = "0xBDD448", VA = "0xBDD448")]
	public static void cancel(GameObject gameObject)
	{
	}

	[Token(Token = "0x60003DF")]
	[Address(RVA = "0xBDD51C", Offset = "0xBDD51C", VA = "0xBDD51C")]
	public static void cancel(GameObject gameObject, bool callOnComplete)
	{
	}

	[Token(Token = "0x60003E0")]
	[Address(RVA = "0xBEC81C", Offset = "0xBEC81C", VA = "0xBEC81C")]
	public static void cancel(RectTransform rect)
	{
	}

	[Token(Token = "0x60003E1")]
	[Address(RVA = "0xBEC890", Offset = "0xBEC890", VA = "0xBEC890")]
	public static void cancel(GameObject gameObject, int uniqueId, bool callOnComplete = false)
	{
	}

	[Token(Token = "0x60003E2")]
	[Address(RVA = "0xBECAF4", Offset = "0xBECAF4", VA = "0xBECAF4")]
	public static void cancel(LTRect ltRect, int uniqueId)
	{
	}

	[Token(Token = "0x60003E3")]
	[Address(RVA = "0xBECC04", Offset = "0xBECC04", VA = "0xBECC04")]
	public static void cancel(int uniqueId)
	{
	}

	[Token(Token = "0x60003E4")]
	[Address(RVA = "0xBECC5C", Offset = "0xBECC5C", VA = "0xBECC5C")]
	public static void cancel(int uniqueId, bool callOnComplete)
	{
	}

	[Token(Token = "0x60003E5")]
	[Address(RVA = "0xBECE94", Offset = "0xBECE94", VA = "0xBECE94")]
	public static LTDescr descr(int uniqueId)
	{
		return null;
	}

	[Token(Token = "0x60003E6")]
	[Address(RVA = "0xBED0D8", Offset = "0xBED0D8", VA = "0xBED0D8")]
	public static LTDescr description(int uniqueId)
	{
		return null;
	}

	[Token(Token = "0x60003E7")]
	[Address(RVA = "0xBED12C", Offset = "0xBED12C", VA = "0xBED12C")]
	public static LTDescr[] descriptions([Optional] GameObject gameObject)
	{
		return null;
	}

	[Token(Token = "0x60003E8")]
	[Address(RVA = "0xBED3B8", Offset = "0xBED3B8", VA = "0xBED3B8")]
	[Obsolete("Use 'pause( id )' instead")]
	public static void pause(GameObject gameObject, int uniqueId)
	{
	}

	[Token(Token = "0x60003E9")]
	[Address(RVA = "0xBED40C", Offset = "0xBED40C", VA = "0xBED40C")]
	public static void pause(int uniqueId)
	{
	}

	[Token(Token = "0x60003EA")]
	[Address(RVA = "0xBDD6F8", Offset = "0xBDD6F8", VA = "0xBDD6F8")]
	public static void pause(GameObject gameObject)
	{
	}

	[Token(Token = "0x60003EB")]
	[Address(RVA = "0xBED4E4", Offset = "0xBED4E4", VA = "0xBED4E4")]
	public static void pauseAll()
	{
	}

	[Token(Token = "0x60003EC")]
	[Address(RVA = "0xBED5A8", Offset = "0xBED5A8", VA = "0xBED5A8")]
	public static void resumeAll()
	{
	}

	[Token(Token = "0x60003ED")]
	[Address(RVA = "0xBED66C", Offset = "0xBED66C", VA = "0xBED66C")]
	[Obsolete("Use 'resume( id )' instead")]
	public static void resume(GameObject gameObject, int uniqueId)
	{
	}

	[Token(Token = "0x60003EE")]
	[Address(RVA = "0xBED6C0", Offset = "0xBED6C0", VA = "0xBED6C0")]
	public static void resume(int uniqueId)
	{
	}

	[Token(Token = "0x60003EF")]
	[Address(RVA = "0xBDD8BC", Offset = "0xBDD8BC", VA = "0xBDD8BC")]
	public static void resume(GameObject gameObject)
	{
	}

	[Token(Token = "0x60003F0")]
	[Address(RVA = "0xBED798", Offset = "0xBED798", VA = "0xBED798")]
	public static bool isPaused([Optional] GameObject gameObject)
	{
		return default(bool);
	}

	[Token(Token = "0x60003F1")]
	[Address(RVA = "0xBEDA08", Offset = "0xBEDA08", VA = "0xBEDA08")]
	public static bool isPaused(RectTransform rect)
	{
		return default(bool);
	}

	[Token(Token = "0x60003F2")]
	[Address(RVA = "0xBEDA78", Offset = "0xBEDA78", VA = "0xBEDA78")]
	public static bool isPaused(int uniqueId)
	{
		return default(bool);
	}

	[Token(Token = "0x60003F3")]
	[Address(RVA = "0xBDDA80", Offset = "0xBDDA80", VA = "0xBDDA80")]
	public static bool isTweening([Optional] GameObject gameObject)
	{
		return default(bool);
	}

	[Token(Token = "0x60003F4")]
	[Address(RVA = "0xBEDBC8", Offset = "0xBEDBC8", VA = "0xBEDBC8")]
	public static bool isTweening(RectTransform rect)
	{
		return default(bool);
	}

	[Token(Token = "0x60003F5")]
	[Address(RVA = "0xBEDC38", Offset = "0xBEDC38", VA = "0xBEDC38")]
	public static bool isTweening(int uniqueId)
	{
		return default(bool);
	}

	[Token(Token = "0x60003F6")]
	[Address(RVA = "0xBEDD34", Offset = "0xBEDD34", VA = "0xBEDD34")]
	public static bool isTweening(LTRect ltRect)
	{
		return default(bool);
	}

	[Token(Token = "0x60003F7")]
	[Address(RVA = "0xBEDE48", Offset = "0xBEDE48", VA = "0xBEDE48")]
	public static void drawBezierPath(Vector3 a, Vector3 b, Vector3 c, Vector3 d, float arrowSize = 0f, [Optional] Transform arrowTransform)
	{
	}

	[Token(Token = "0x60003F8")]
	[Address(RVA = "0xBEE478", Offset = "0xBEE478", VA = "0xBEE478")]
	public static object logError(string error)
	{
		return null;
	}

	[Token(Token = "0x60003F9")]
	[Address(RVA = "0xBEE518", Offset = "0xBEE518", VA = "0xBEE518")]
	public static LTDescr options(LTDescr seed)
	{
		return null;
	}

	[Token(Token = "0x60003FA")]
	[Address(RVA = "0xBEE588", Offset = "0xBEE588", VA = "0xBEE588")]
	public static LTDescr options()
	{
		return null;
	}

	[Token(Token = "0x60003FC")]
	[Address(RVA = "0xBEE8F0", Offset = "0xBEE8F0", VA = "0xBEE8F0")]
	private static LTDescr pushNewTween(GameObject gameObject, Vector3 to, float time, LTDescr tween)
	{
		return null;
	}

	[Token(Token = "0x60003FD")]
	[Address(RVA = "0xBE33D0", Offset = "0xBE33D0", VA = "0xBE33D0")]
	public static LTDescr play(RectTransform rectTransform, Sprite[] sprites)
	{
		return null;
	}

	[Token(Token = "0x60003FE")]
	[Address(RVA = "0xBEE9FC", Offset = "0xBEE9FC", VA = "0xBEE9FC")]
	public static LTSeq sequence(bool initSequence = true)
	{
		return null;
	}

	[Token(Token = "0x60003FF")]
	[Address(RVA = "0xBDDCEC", Offset = "0xBDDCEC", VA = "0xBDDCEC")]
	public static LTDescr alpha(GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000400")]
	[Address(RVA = "0xBEEC24", Offset = "0xBEEC24", VA = "0xBEEC24")]
	public static LTDescr alpha(LTRect ltRect, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000401")]
	[Address(RVA = "0xBE3520", Offset = "0xBE3520", VA = "0xBE3520")]
	public static LTDescr textAlpha(RectTransform rectTransform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000402")]
	[Address(RVA = "0xBEECD4", Offset = "0xBEECD4", VA = "0xBEECD4")]
	public static LTDescr alphaText(RectTransform rectTransform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000403")]
	[Address(RVA = "0xBEED78", Offset = "0xBEED78", VA = "0xBEED78")]
	public static LTDescr alphaCanvas(CanvasGroup canvasGroup, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000404")]
	[Address(RVA = "0xBDDE3C", Offset = "0xBDDE3C", VA = "0xBDDE3C")]
	public static LTDescr alphaVertex(GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000405")]
	[Address(RVA = "0xBDDF7C", Offset = "0xBDDF7C", VA = "0xBDDF7C")]
	public static LTDescr color(GameObject gameObject, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000406")]
	[Address(RVA = "0xBE3658", Offset = "0xBE3658", VA = "0xBE3658")]
	public static LTDescr textColor(RectTransform rectTransform, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000407")]
	[Address(RVA = "0xBEEE1C", Offset = "0xBEEE1C", VA = "0xBEEE1C")]
	public static LTDescr colorText(RectTransform rectTransform, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000408")]
	[Address(RVA = "0xBEEEF4", Offset = "0xBEEEF4", VA = "0xBEEEF4")]
	public static LTDescr delayedCall(float delayTime, Action callback)
	{
		return null;
	}

	[Token(Token = "0x6000409")]
	[Address(RVA = "0xBEEFD4", Offset = "0xBEEFD4", VA = "0xBEEFD4")]
	public static LTDescr delayedCall(float delayTime, Action<object> callback)
	{
		return null;
	}

	[Token(Token = "0x600040A")]
	[Address(RVA = "0xBDE100", Offset = "0xBDE100", VA = "0xBDE100")]
	public static LTDescr delayedCall(GameObject gameObject, float delayTime, Action callback)
	{
		return null;
	}

	[Token(Token = "0x600040B")]
	[Address(RVA = "0xBDE270", Offset = "0xBDE270", VA = "0xBDE270")]
	public static LTDescr delayedCall(GameObject gameObject, float delayTime, Action<object> callback)
	{
		return null;
	}

	[Token(Token = "0x600040C")]
	[Address(RVA = "0xBEF0B4", Offset = "0xBEF0B4", VA = "0xBEF0B4")]
	public static LTDescr destroyAfter(LTRect rect, float delayTime)
	{
		return null;
	}

	[Token(Token = "0x600040D")]
	[Address(RVA = "0xBDE568", Offset = "0xBDE568", VA = "0xBDE568")]
	public static LTDescr move(GameObject gameObject, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x600040E")]
	[Address(RVA = "0xBDE6A0", Offset = "0xBDE6A0", VA = "0xBDE6A0")]
	public static LTDescr move(GameObject gameObject, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x600040F")]
	[Address(RVA = "0xBDE7E4", Offset = "0xBDE7E4", VA = "0xBDE7E4")]
	public static LTDescr move(GameObject gameObject, Vector3[] to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000410")]
	[Address(RVA = "0xBDE9B4", Offset = "0xBDE9B4", VA = "0xBDE9B4")]
	public static LTDescr move(GameObject gameObject, LTBezierPath to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000411")]
	[Address(RVA = "0xBDEAF0", Offset = "0xBDEAF0", VA = "0xBDEAF0")]
	public static LTDescr move(GameObject gameObject, LTSpline to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000412")]
	[Address(RVA = "0xBEF1A4", Offset = "0xBEF1A4", VA = "0xBEF1A4")]
	public static LTDescr moveSpline(GameObject gameObject, Vector3[] to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000413")]
	[Address(RVA = "0xBEF28C", Offset = "0xBEF28C", VA = "0xBEF28C")]
	public static LTDescr moveSpline(GameObject gameObject, LTSpline to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000414")]
	[Address(RVA = "0xBEF33C", Offset = "0xBEF33C", VA = "0xBEF33C")]
	public static LTDescr moveSplineLocal(GameObject gameObject, Vector3[] to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000415")]
	[Address(RVA = "0xBEF424", Offset = "0xBEF424", VA = "0xBEF424")]
	public static LTDescr move(LTRect ltRect, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000416")]
	[Address(RVA = "0xBEF4D4", Offset = "0xBEF4D4", VA = "0xBEF4D4")]
	public static LTDescr moveMargin(LTRect ltRect, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000417")]
	[Address(RVA = "0xBDEC2C", Offset = "0xBDEC2C", VA = "0xBDEC2C")]
	public static LTDescr moveX(GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000418")]
	[Address(RVA = "0xBDED44", Offset = "0xBDED44", VA = "0xBDED44")]
	public static LTDescr moveY(GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000419")]
	[Address(RVA = "0xBDEE5C", Offset = "0xBDEE5C", VA = "0xBDEE5C")]
	public static LTDescr moveZ(GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x600041A")]
	[Address(RVA = "0xBDEF8C", Offset = "0xBDEF8C", VA = "0xBDEF8C")]
	public static LTDescr moveLocal(GameObject gameObject, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x600041B")]
	[Address(RVA = "0xBDF0B4", Offset = "0xBDF0B4", VA = "0xBDF0B4")]
	public static LTDescr moveLocal(GameObject gameObject, Vector3[] to, float time)
	{
		return null;
	}

	[Token(Token = "0x600041C")]
	[Address(RVA = "0xBDF4FC", Offset = "0xBDF4FC", VA = "0xBDF4FC")]
	public static LTDescr moveLocalX(GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x600041D")]
	[Address(RVA = "0xBDF614", Offset = "0xBDF614", VA = "0xBDF614")]
	public static LTDescr moveLocalY(GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x600041E")]
	[Address(RVA = "0xBDF72C", Offset = "0xBDF72C", VA = "0xBDF72C")]
	public static LTDescr moveLocalZ(GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x600041F")]
	[Address(RVA = "0xBDF284", Offset = "0xBDF284", VA = "0xBDF284")]
	public static LTDescr moveLocal(GameObject gameObject, LTBezierPath to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000420")]
	[Address(RVA = "0xBDF3C0", Offset = "0xBDF3C0", VA = "0xBDF3C0")]
	public static LTDescr moveLocal(GameObject gameObject, LTSpline to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000421")]
	[Address(RVA = "0xBDE3E0", Offset = "0xBDE3E0", VA = "0xBDE3E0")]
	public static LTDescr move(GameObject gameObject, Transform to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000422")]
	[Address(RVA = "0xBDF85C", Offset = "0xBDF85C", VA = "0xBDF85C")]
	public static LTDescr rotate(GameObject gameObject, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000423")]
	[Address(RVA = "0xBEF584", Offset = "0xBEF584", VA = "0xBEF584")]
	public static LTDescr rotate(LTRect ltRect, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000424")]
	[Address(RVA = "0xBDF99C", Offset = "0xBDF99C", VA = "0xBDF99C")]
	public static LTDescr rotateLocal(GameObject gameObject, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000425")]
	[Address(RVA = "0xBDFAC4", Offset = "0xBDFAC4", VA = "0xBDFAC4")]
	public static LTDescr rotateX(GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000426")]
	[Address(RVA = "0xBDFBDC", Offset = "0xBDFBDC", VA = "0xBDFBDC")]
	public static LTDescr rotateY(GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000427")]
	[Address(RVA = "0xBDFCF4", Offset = "0xBDFCF4", VA = "0xBDFCF4")]
	public static LTDescr rotateZ(GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000428")]
	[Address(RVA = "0xBDFE34", Offset = "0xBDFE34", VA = "0xBDFE34")]
	public static LTDescr rotateAround(GameObject gameObject, Vector3 axis, float add, float time)
	{
		return null;
	}

	[Token(Token = "0x6000429")]
	[Address(RVA = "0xBDFFA8", Offset = "0xBDFFA8", VA = "0xBDFFA8")]
	public static LTDescr rotateAroundLocal(GameObject gameObject, Vector3 axis, float add, float time)
	{
		return null;
	}

	[Token(Token = "0x600042A")]
	[Address(RVA = "0xBE010C", Offset = "0xBE010C", VA = "0xBE010C")]
	public static LTDescr scale(GameObject gameObject, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x600042B")]
	[Address(RVA = "0xBEF628", Offset = "0xBEF628", VA = "0xBEF628")]
	public static LTDescr scale(LTRect ltRect, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x600042C")]
	[Address(RVA = "0xBE0234", Offset = "0xBE0234", VA = "0xBE0234")]
	public static LTDescr scaleX(GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x600042D")]
	[Address(RVA = "0xBE034C", Offset = "0xBE034C", VA = "0xBE034C")]
	public static LTDescr scaleY(GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x600042E")]
	[Address(RVA = "0xBE0464", Offset = "0xBE0464", VA = "0xBE0464")]
	public static LTDescr scaleZ(GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x600042F")]
	[Address(RVA = "0xBE058C", Offset = "0xBE058C", VA = "0xBE058C")]
	public static LTDescr value(GameObject gameObject, float from, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000430")]
	[Address(RVA = "0xBEF6D8", Offset = "0xBEF6D8", VA = "0xBEF6D8")]
	public static LTDescr value(float from, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000431")]
	[Address(RVA = "0xBE06F0", Offset = "0xBE06F0", VA = "0xBE06F0")]
	public static LTDescr value(GameObject gameObject, Vector2 from, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000432")]
	[Address(RVA = "0xBE0894", Offset = "0xBE0894", VA = "0xBE0894")]
	public static LTDescr value(GameObject gameObject, Vector3 from, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000433")]
	[Address(RVA = "0xBE0A40", Offset = "0xBE0A40", VA = "0xBE0A40")]
	public static LTDescr value(GameObject gameObject, Color from, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000434")]
	[Address(RVA = "0xBE0C20", Offset = "0xBE0C20", VA = "0xBE0C20")]
	public static LTDescr value(GameObject gameObject, Action<float> callOnUpdate, float from, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000435")]
	[Address(RVA = "0xBE0DA8", Offset = "0xBE0DA8", VA = "0xBE0DA8")]
	public static LTDescr value(GameObject gameObject, Action<float, float> callOnUpdateRatio, float from, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000436")]
	[Address(RVA = "0xBE0F78", Offset = "0xBE0F78", VA = "0xBE0F78")]
	public static LTDescr value(GameObject gameObject, Action<Color> callOnUpdate, Color from, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000437")]
	[Address(RVA = "0xBEF78C", Offset = "0xBEF78C", VA = "0xBEF78C")]
	public static LTDescr value(GameObject gameObject, Action<Color, object> callOnUpdate, Color from, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000438")]
	[Address(RVA = "0xBE1168", Offset = "0xBE1168", VA = "0xBE1168")]
	public static LTDescr value(GameObject gameObject, Action<Vector2> callOnUpdate, Vector2 from, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000439")]
	[Address(RVA = "0xBE1330", Offset = "0xBE1330", VA = "0xBE1330")]
	public static LTDescr value(GameObject gameObject, Action<Vector3> callOnUpdate, Vector3 from, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x600043A")]
	[Address(RVA = "0xBE14D8", Offset = "0xBE14D8", VA = "0xBE14D8")]
	public static LTDescr value(GameObject gameObject, Action<float, object> callOnUpdate, float from, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x600043B")]
	[Address(RVA = "0xBEF8C0", Offset = "0xBEF8C0", VA = "0xBEF8C0")]
	public static LTDescr delayedSound(AudioClip audio, Vector3 pos, float volume)
	{
		return null;
	}

	[Token(Token = "0x600043C")]
	[Address(RVA = "0xBE166C", Offset = "0xBE166C", VA = "0xBE166C")]
	public static LTDescr delayedSound(GameObject gameObject, AudioClip audio, Vector3 pos, float volume)
	{
		return null;
	}

	[Token(Token = "0x600043D")]
	[Address(RVA = "0xBE37B4", Offset = "0xBE37B4", VA = "0xBE37B4")]
	public static LTDescr move(RectTransform rectTrans, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x600043E")]
	[Address(RVA = "0xBE38E4", Offset = "0xBE38E4", VA = "0xBE38E4")]
	public static LTDescr moveX(RectTransform rectTrans, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x600043F")]
	[Address(RVA = "0xBE3A04", Offset = "0xBE3A04", VA = "0xBE3A04")]
	public static LTDescr moveY(RectTransform rectTrans, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000440")]
	[Address(RVA = "0xBE3B24", Offset = "0xBE3B24", VA = "0xBE3B24")]
	public static LTDescr moveZ(RectTransform rectTrans, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000441")]
	[Address(RVA = "0xBE3C44", Offset = "0xBE3C44", VA = "0xBE3C44")]
	public static LTDescr rotate(RectTransform rectTrans, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000442")]
	[Address(RVA = "0xBEF9A4", Offset = "0xBEF9A4", VA = "0xBEF9A4")]
	public static LTDescr rotate(RectTransform rectTrans, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000443")]
	[Address(RVA = "0xBE3DD8", Offset = "0xBE3DD8", VA = "0xBE3DD8")]
	public static LTDescr rotateAround(RectTransform rectTrans, Vector3 axis, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000444")]
	[Address(RVA = "0xBE3F54", Offset = "0xBE3F54", VA = "0xBE3F54")]
	public static LTDescr rotateAroundLocal(RectTransform rectTrans, Vector3 axis, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000445")]
	[Address(RVA = "0xBE40C0", Offset = "0xBE40C0", VA = "0xBE40C0")]
	public static LTDescr scale(RectTransform rectTrans, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000446")]
	[Address(RVA = "0xBEFAB4", Offset = "0xBEFAB4", VA = "0xBEFAB4")]
	public static LTDescr size(RectTransform rectTrans, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000447")]
	[Address(RVA = "0xBE41F0", Offset = "0xBE41F0", VA = "0xBE41F0")]
	public static LTDescr alpha(RectTransform rectTrans, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000448")]
	[Address(RVA = "0xBE4338", Offset = "0xBE4338", VA = "0xBE4338")]
	public static LTDescr color(RectTransform rectTrans, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000449")]
	[Address(RVA = "0xBEFB74", Offset = "0xBEFB74", VA = "0xBEFB74")]
	public static float tweenOnCurve(LTDescr tweenDescr, float ratioPassed)
	{
		return default(float);
	}

	[Token(Token = "0x600044A")]
	[Address(RVA = "0xBEFBBC", Offset = "0xBEFBBC", VA = "0xBEFBBC")]
	public static Vector3 tweenOnCurveVector(LTDescr tweenDescr, float ratioPassed)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600044B")]
	[Address(RVA = "0xBEFC94", Offset = "0xBEFC94", VA = "0xBEFC94")]
	public static float easeOutQuadOpt(float start, float diff, float ratioPassed)
	{
		return default(float);
	}

	[Token(Token = "0x600044C")]
	[Address(RVA = "0xBEFCAC", Offset = "0xBEFCAC", VA = "0xBEFCAC")]
	public static float easeInQuadOpt(float start, float diff, float ratioPassed)
	{
		return default(float);
	}

	[Token(Token = "0x600044D")]
	[Address(RVA = "0xBEFCBC", Offset = "0xBEFCBC", VA = "0xBEFCBC")]
	public static float easeInOutQuadOpt(float start, float diff, float ratioPassed)
	{
		return default(float);
	}

	[Token(Token = "0x600044E")]
	[Address(RVA = "0xBEFD0C", Offset = "0xBEFD0C", VA = "0xBEFD0C")]
	public static Vector3 easeInOutQuadOpt(Vector3 start, Vector3 diff, float ratioPassed)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600044F")]
	[Address(RVA = "0xBEFD8C", Offset = "0xBEFD8C", VA = "0xBEFD8C")]
	public static float linear(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x6000450")]
	[Address(RVA = "0xBEFDB0", Offset = "0xBEFDB0", VA = "0xBEFDB0")]
	public static float clerp(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x6000451")]
	[Address(RVA = "0xBEFE14", Offset = "0xBEFE14", VA = "0xBEFE14")]
	public static float spring(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x6000452")]
	[Address(RVA = "0xBEFEC4", Offset = "0xBEFEC4", VA = "0xBEFEC4")]
	public static float easeInQuad(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x6000453")]
	[Address(RVA = "0xBEFED8", Offset = "0xBEFED8", VA = "0xBEFED8")]
	public static float easeOutQuad(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x6000454")]
	[Address(RVA = "0xBEFEF4", Offset = "0xBEFEF4", VA = "0xBEFEF4")]
	public static float easeInOutQuad(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x6000455")]
	[Address(RVA = "0xBEFF48", Offset = "0xBEFF48", VA = "0xBEFF48")]
	public static float easeInOutQuadOpt2(float start, float diffBy2, float val, float val2)
	{
		return default(float);
	}

	[Token(Token = "0x6000456")]
	[Address(RVA = "0xBEFF80", Offset = "0xBEFF80", VA = "0xBEFF80")]
	public static float easeInCubic(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x6000457")]
	[Address(RVA = "0xBEFF98", Offset = "0xBEFF98", VA = "0xBEFF98")]
	public static float easeOutCubic(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x6000458")]
	[Address(RVA = "0xBEFFC0", Offset = "0xBEFFC0", VA = "0xBEFFC0")]
	public static float easeInOutCubic(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x6000459")]
	[Address(RVA = "0xBF0018", Offset = "0xBF0018", VA = "0xBF0018")]
	public static float easeInQuart(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x600045A")]
	[Address(RVA = "0xBF0034", Offset = "0xBF0034", VA = "0xBF0034")]
	public static float easeOutQuart(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x600045B")]
	[Address(RVA = "0xBF005C", Offset = "0xBF005C", VA = "0xBF005C")]
	public static float easeInOutQuart(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x600045C")]
	[Address(RVA = "0xBF00B8", Offset = "0xBF00B8", VA = "0xBF00B8")]
	public static float easeInQuint(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x600045D")]
	[Address(RVA = "0xBF00D8", Offset = "0xBF00D8", VA = "0xBF00D8")]
	public static float easeOutQuint(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x600045E")]
	[Address(RVA = "0xBF0108", Offset = "0xBF0108", VA = "0xBF0108")]
	public static float easeInOutQuint(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x600045F")]
	[Address(RVA = "0xBF0170", Offset = "0xBF0170", VA = "0xBF0170")]
	public static float easeInSine(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x6000460")]
	[Address(RVA = "0xBF01A8", Offset = "0xBF01A8", VA = "0xBF01A8")]
	public static float easeOutSine(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x6000461")]
	[Address(RVA = "0xBF01DC", Offset = "0xBF01DC", VA = "0xBF01DC")]
	public static float easeInOutSine(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x6000462")]
	[Address(RVA = "0xBF0220", Offset = "0xBF0220", VA = "0xBF0220")]
	public static float easeInExpo(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x6000463")]
	[Address(RVA = "0xBF0258", Offset = "0xBF0258", VA = "0xBF0258")]
	public static float easeOutExpo(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x6000464")]
	[Address(RVA = "0xBF0290", Offset = "0xBF0290", VA = "0xBF0290")]
	public static float easeInOutExpo(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x6000465")]
	[Address(RVA = "0xBF0300", Offset = "0xBF0300", VA = "0xBF0300")]
	public static float easeInCirc(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x6000466")]
	[Address(RVA = "0xBF0328", Offset = "0xBF0328", VA = "0xBF0328")]
	public static float easeOutCirc(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x6000467")]
	[Address(RVA = "0xBF0350", Offset = "0xBF0350", VA = "0xBF0350")]
	public static float easeInOutCirc(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x6000468")]
	[Address(RVA = "0xBF03A4", Offset = "0xBF03A4", VA = "0xBF03A4")]
	public static float easeInBounce(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x6000469")]
	[Address(RVA = "0xBF042C", Offset = "0xBF042C", VA = "0xBF042C")]
	public static float easeOutBounce(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x600046A")]
	[Address(RVA = "0xBF04F4", Offset = "0xBF04F4", VA = "0xBF04F4")]
	public static float easeInOutBounce(float start, float end, float val)
	{
		return default(float);
	}

	[Token(Token = "0x600046B")]
	[Address(RVA = "0xBF05A8", Offset = "0xBF05A8", VA = "0xBF05A8")]
	public static float easeInBack(float start, float end, float val, float overshoot = 1f)
	{
		return default(float);
	}

	[Token(Token = "0x600046C")]
	[Address(RVA = "0xBF05DC", Offset = "0xBF05DC", VA = "0xBF05DC")]
	public static float easeOutBack(float start, float end, float val, float overshoot = 1f)
	{
		return default(float);
	}

	[Token(Token = "0x600046D")]
	[Address(RVA = "0xBF061C", Offset = "0xBF061C", VA = "0xBF061C")]
	public static float easeInOutBack(float start, float end, float val, float overshoot = 1f)
	{
		return default(float);
	}

	[Token(Token = "0x600046E")]
	[Address(RVA = "0xBF06B4", Offset = "0xBF06B4", VA = "0xBF06B4")]
	public static float easeInElastic(float start, float end, float val, float overshoot = 1f, float period = 0.3f)
	{
		return default(float);
	}

	[Token(Token = "0x600046F")]
	[Address(RVA = "0xBF078C", Offset = "0xBF078C", VA = "0xBF078C")]
	public static float easeOutElastic(float start, float end, float val, float overshoot = 1f, float period = 0.3f)
	{
		return default(float);
	}

	[Token(Token = "0x6000470")]
	[Address(RVA = "0xBF085C", Offset = "0xBF085C", VA = "0xBF085C")]
	public static float easeInOutElastic(float start, float end, float val, float overshoot = 1f, float period = 0.3f)
	{
		return default(float);
	}

	[Token(Token = "0x6000471")]
	[Address(RVA = "0xBF09AC", Offset = "0xBF09AC", VA = "0xBF09AC")]
	public static LTDescr followDamp(Transform trans, Transform target, LeanProp prop, float smoothTime, float maxSpeed = -1f)
	{
		return null;
	}

	[Token(Token = "0x6000472")]
	[Address(RVA = "0xBF0D04", Offset = "0xBF0D04", VA = "0xBF0D04")]
	public static LTDescr followSpring(Transform trans, Transform target, LeanProp prop, float smoothTime, float maxSpeed = -1f, float friction = 2f, float accelRate = 0.5f)
	{
		return null;
	}

	[Token(Token = "0x6000473")]
	[Address(RVA = "0xBF1068", Offset = "0xBF1068", VA = "0xBF1068")]
	public static LTDescr followBounceOut(Transform trans, Transform target, LeanProp prop, float smoothTime, float maxSpeed = -1f, float friction = 2f, float accelRate = 0.5f, float hitDamping = 0.9f)
	{
		return null;
	}

	[Token(Token = "0x6000474")]
	[Address(RVA = "0xBF13BC", Offset = "0xBF13BC", VA = "0xBF13BC")]
	public static LTDescr followLinear(Transform trans, Transform target, LeanProp prop, float moveSpeed)
	{
		return null;
	}

	[Token(Token = "0x6000475")]
	[Address(RVA = "0xBF16E8", Offset = "0xBF16E8", VA = "0xBF16E8")]
	public static void addListener(int eventId, Action<LTEvent> callback)
	{
	}

	[Token(Token = "0x6000476")]
	[Address(RVA = "0xBF1750", Offset = "0xBF1750", VA = "0xBF1750")]
	public static void addListener(GameObject caller, int eventId, Action<LTEvent> callback)
	{
	}

	[Token(Token = "0x6000477")]
	[Address(RVA = "0xBF1B70", Offset = "0xBF1B70", VA = "0xBF1B70")]
	public static bool removeListener(int eventId, Action<LTEvent> callback)
	{
		return default(bool);
	}

	[Token(Token = "0x6000478")]
	[Address(RVA = "0xBF1DC8", Offset = "0xBF1DC8", VA = "0xBF1DC8")]
	public static bool removeListener(int eventId)
	{
		return default(bool);
	}

	[Token(Token = "0x6000479")]
	[Address(RVA = "0xBF1BD8", Offset = "0xBF1BD8", VA = "0xBF1BD8")]
	public static bool removeListener(GameObject caller, int eventId, Action<LTEvent> callback)
	{
		return default(bool);
	}

	[Token(Token = "0x600047A")]
	[Address(RVA = "0xBF1E7C", Offset = "0xBF1E7C", VA = "0xBF1E7C")]
	public static void dispatchEvent(int eventId)
	{
	}

	[Token(Token = "0x600047B")]
	[Address(RVA = "0xBF1ED4", Offset = "0xBF1ED4", VA = "0xBF1ED4")]
	public static void dispatchEvent(int eventId, object data)
	{
	}

	[Token(Token = "0x600047C")]
	[Address(RVA = "0xBF20A4", Offset = "0xBF20A4", VA = "0xBF20A4")]
	public LeanTween()
	{
	}
}
[Token(Token = "0x2000092")]
public class LTUtility
{
	[Token(Token = "0x60004AA")]
	[Address(RVA = "0xC3480C", Offset = "0xC3480C", VA = "0xC3480C")]
	public static Vector3[] reverse(Vector3[] arr)
	{
		return null;
	}

	[Token(Token = "0x60004AB")]
	[Address(RVA = "0xC348A8", Offset = "0xC348A8", VA = "0xC348A8")]
	public LTUtility()
	{
	}
}
[Token(Token = "0x2000093")]
public class LTBezier
{
	[Token(Token = "0x40002AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float length;

	[Token(Token = "0x40002AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private Vector3 a;

	[Token(Token = "0x40002AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 aa;

	[Token(Token = "0x40002AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Vector3 bb;

	[Token(Token = "0x40002B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 cc;

	[Token(Token = "0x40002B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float len;

	[Token(Token = "0x40002B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float[] arcLengths;

	[Token(Token = "0x60004AC")]
	[Address(RVA = "0xC348B0", Offset = "0xC348B0", VA = "0xC348B0")]
	public LTBezier(Vector3 a, Vector3 b, Vector3 c, Vector3 d, float precision)
	{
	}

	[Token(Token = "0x60004AD")]
	[Address(RVA = "0xC34B84", Offset = "0xC34B84", VA = "0xC34B84")]
	private float map(float u)
	{
		return default(float);
	}

	[Token(Token = "0x60004AE")]
	[Address(RVA = "0xC34B2C", Offset = "0xC34B2C", VA = "0xC34B2C")]
	private Vector3 bezierPoint(float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60004AF")]
	[Address(RVA = "0xC34CA4", Offset = "0xC34CA4", VA = "0xC34CA4")]
	public Vector3 point(float t)
	{
		return default(Vector3);
	}
}
[Token(Token = "0x2000094")]
public class LTBezierPath
{
	[Token(Token = "0x40002B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Vector3[] pts;

	[Token(Token = "0x40002B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float length;

	[Token(Token = "0x40002B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool orientToPath;

	[Token(Token = "0x40002B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool orientToPath2d;

	[Token(Token = "0x40002B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private LTBezier[] beziers;

	[Token(Token = "0x40002B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float[] lengthRatio;

	[Token(Token = "0x40002B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int currentBezier;

	[Token(Token = "0x40002BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int previousBezier;

	[Token(Token = "0x17000029")]
	public float distance
	{
		[Token(Token = "0x60004B3")]
		[Address(RVA = "0xC35034", Offset = "0xC35034", VA = "0xC35034")]
		get
		{
			return default(float);
		}
	}

	[Token(Token = "0x60004B0")]
	[Address(RVA = "0xC34CBC", Offset = "0xC34CBC", VA = "0xC34CBC")]
	public LTBezierPath()
	{
	}

	[Token(Token = "0x60004B1")]
	[Address(RVA = "0xC34CC4", Offset = "0xC34CC4", VA = "0xC34CC4")]
	public LTBezierPath(Vector3[] pts_)
	{
	}

	[Token(Token = "0x60004B2")]
	[Address(RVA = "0xC34CF0", Offset = "0xC34CF0", VA = "0xC34CF0")]
	public void setPoints(Vector3[] pts_)
	{
	}

	[Token(Token = "0x60004B4")]
	[Address(RVA = "0xC3503C", Offset = "0xC3503C", VA = "0xC3503C")]
	public Vector3 point(float ratio)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60004B5")]
	[Address(RVA = "0xC35100", Offset = "0xC35100", VA = "0xC35100")]
	public void place2d(Transform transform, float ratio)
	{
	}

	[Token(Token = "0x60004B6")]
	[Address(RVA = "0xC351B4", Offset = "0xC351B4", VA = "0xC351B4")]
	public void placeLocal2d(Transform transform, float ratio)
	{
	}

	[Token(Token = "0x60004B7")]
	[Address(RVA = "0xC35268", Offset = "0xC35268", VA = "0xC35268")]
	public void place(Transform transform, float ratio)
	{
	}

	[Token(Token = "0x60004B8")]
	[Address(RVA = "0xC352D4", Offset = "0xC352D4", VA = "0xC352D4")]
	public void place(Transform transform, float ratio, Vector3 worldUp)
	{
	}

	[Token(Token = "0x60004B9")]
	[Address(RVA = "0xC35370", Offset = "0xC35370", VA = "0xC35370")]
	public void placeLocal(Transform transform, float ratio)
	{
	}

	[Token(Token = "0x60004BA")]
	[Address(RVA = "0xC353DC", Offset = "0xC353DC", VA = "0xC353DC")]
	public void placeLocal(Transform transform, float ratio, Vector3 worldUp)
	{
	}

	[Token(Token = "0x60004BB")]
	[Address(RVA = "0xC354C4", Offset = "0xC354C4", VA = "0xC354C4")]
	public void gizmoDraw(float t = -1f)
	{
	}

	[Token(Token = "0x60004BC")]
	[Address(RVA = "0xC355A4", Offset = "0xC355A4", VA = "0xC355A4")]
	public float ratioAtPoint(Vector3 pt, float precision = 0.01f)
	{
		return default(float);
	}
}
[Serializable]
[Token(Token = "0x2000095")]
public class LTSpline
{
	[Token(Token = "0x40002BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int DISTANCE_COUNT;

	[Token(Token = "0x40002BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static int SUBLINE_COUNT;

	[Token(Token = "0x40002BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public float distance;

	[Token(Token = "0x40002BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool constantSpeed;

	[Token(Token = "0x40002BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3[] pts;

	[NonSerialized]
	[Token(Token = "0x40002C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3[] ptsAdj;

	[Token(Token = "0x40002C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int ptsAdjLength;

	[Token(Token = "0x40002C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool orientToPath;

	[Token(Token = "0x40002C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool orientToPath2d;

	[Token(Token = "0x40002C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int numSections;

	[Token(Token = "0x40002C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int currPt;

	[Token(Token = "0x60004BD")]
	[Address(RVA = "0xC3577C", Offset = "0xC3577C", VA = "0xC3577C")]
	public LTSpline(Vector3[] pts)
	{
	}

	[Token(Token = "0x60004BE")]
	[Address(RVA = "0xC35B98", Offset = "0xC35B98", VA = "0xC35B98")]
	public LTSpline(Vector3[] pts, bool constantSpeed)
	{
	}

	[Token(Token = "0x60004BF")]
	[Address(RVA = "0xC357B4", Offset = "0xC357B4", VA = "0xC357B4")]
	private void init(Vector3[] pts, bool constantSpeed)
	{
	}

	[Token(Token = "0x60004C0")]
	[Address(RVA = "0xC35DDC", Offset = "0xC35DDC", VA = "0xC35DDC")]
	public Vector3 map(float u)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60004C1")]
	[Address(RVA = "0xC35BD8", Offset = "0xC35BD8", VA = "0xC35BD8")]
	public Vector3 interp(float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60004C2")]
	[Address(RVA = "0xC35ED8", Offset = "0xC35ED8", VA = "0xC35ED8")]
	public float ratioAtPoint(Vector3 pt)
	{
		return default(float);
	}

	[Token(Token = "0x60004C3")]
	[Address(RVA = "0xC36004", Offset = "0xC36004", VA = "0xC36004")]
	public Vector3 point(float ratio)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60004C4")]
	[Address(RVA = "0xC3601C", Offset = "0xC3601C", VA = "0xC3601C")]
	public void place2d(Transform transform, float ratio)
	{
	}

	[Token(Token = "0x60004C5")]
	[Address(RVA = "0xC360D0", Offset = "0xC360D0", VA = "0xC360D0")]
	public void placeLocal2d(Transform transform, float ratio)
	{
	}

	[Token(Token = "0x60004C6")]
	[Address(RVA = "0xC36208", Offset = "0xC36208", VA = "0xC36208")]
	public void place(Transform transform, float ratio)
	{
	}

	[Token(Token = "0x60004C7")]
	[Address(RVA = "0xC36274", Offset = "0xC36274", VA = "0xC36274")]
	public void place(Transform transform, float ratio, Vector3 worldUp)
	{
	}

	[Token(Token = "0x60004C8")]
	[Address(RVA = "0xC36310", Offset = "0xC36310", VA = "0xC36310")]
	public void placeLocal(Transform transform, float ratio)
	{
	}

	[Token(Token = "0x60004C9")]
	[Address(RVA = "0xC3637C", Offset = "0xC3637C", VA = "0xC3637C")]
	public void placeLocal(Transform transform, float ratio, Vector3 worldUp)
	{
	}

	[Token(Token = "0x60004CA")]
	[Address(RVA = "0xC3643C", Offset = "0xC3643C", VA = "0xC3643C")]
	public void gizmoDraw(float t = -1f)
	{
	}

	[Token(Token = "0x60004CB")]
	[Address(RVA = "0xC364F0", Offset = "0xC364F0", VA = "0xC364F0")]
	public void drawGizmo(Color color)
	{
	}

	[Token(Token = "0x60004CC")]
	[Address(RVA = "0xC3663C", Offset = "0xC3663C", VA = "0xC3663C")]
	public static void drawGizmo(Transform[] arr, Color color)
	{
	}

	[Token(Token = "0x60004CD")]
	[Address(RVA = "0xC3686C", Offset = "0xC3686C", VA = "0xC3686C")]
	public static void drawLine(Transform[] arr, float width, Color color)
	{
	}

	[Token(Token = "0x60004CE")]
	[Address(RVA = "0xC3687C", Offset = "0xC3687C", VA = "0xC3687C")]
	public void drawLinesGLLines(Material outlineMaterial, Color color, float width)
	{
	}

	[Token(Token = "0x60004CF")]
	[Address(RVA = "0xC36A44", Offset = "0xC36A44", VA = "0xC36A44")]
	public Vector3[] generateVectors()
	{
		return null;
	}
}
[Serializable]
[Token(Token = "0x2000096")]
public class LTRect
{
	[Token(Token = "0x40002C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public Rect _rect;

	[Token(Token = "0x40002C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float alpha;

	[Token(Token = "0x40002C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float rotation;

	[Token(Token = "0x40002C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector2 pivot;

	[Token(Token = "0x40002CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector2 margin;

	[Token(Token = "0x40002CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Rect relativeRect;

	[Token(Token = "0x40002CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool rotateEnabled;

	[Token(Token = "0x40002CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
	[HideInInspector]
	public bool rotateFinished;

	[Token(Token = "0x40002CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
	public bool alphaEnabled;

	[Token(Token = "0x40002CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string labelStr;

	[Token(Token = "0x40002D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public LTGUI.Element_Type type;

	[Token(Token = "0x40002D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public GUIStyle style;

	[Token(Token = "0x40002D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool useColor;

	[Token(Token = "0x40002D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public Color color;

	[Token(Token = "0x40002D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public bool fontScaleToFit;

	[Token(Token = "0x40002D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
	public bool useSimpleScale;

	[Token(Token = "0x40002D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7E")]
	public bool sizeByHeight;

	[Token(Token = "0x40002D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Texture texture;

	[Token(Token = "0x40002D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private int _id;

	[Token(Token = "0x40002D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[HideInInspector]
	public int counter;

	[Token(Token = "0x40002DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool colorTouched;

	[Token(Token = "0x1700002A")]
	public bool hasInitiliazed
	{
		[Token(Token = "0x60004D6")]
		[Address(RVA = "0xC372F8", Offset = "0xC372F8", VA = "0xC372F8")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x1700002B")]
	public int id
	{
		[Token(Token = "0x60004D7")]
		[Address(RVA = "0xC37308", Offset = "0xC37308", VA = "0xC37308")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x1700002C")]
	public float x
	{
		[Token(Token = "0x60004DB")]
		[Address(RVA = "0xC3731C", Offset = "0xC3731C", VA = "0xC3731C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60004DC")]
		[Address(RVA = "0xC37328", Offset = "0xC37328", VA = "0xC37328")]
		set
		{
		}
	}

	[Token(Token = "0x1700002D")]
	public float y
	{
		[Token(Token = "0x60004DD")]
		[Address(RVA = "0xC37334", Offset = "0xC37334", VA = "0xC37334")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60004DE")]
		[Address(RVA = "0xC37340", Offset = "0xC37340", VA = "0xC37340")]
		set
		{
		}
	}

	[Token(Token = "0x1700002E")]
	public float width
	{
		[Token(Token = "0x60004DF")]
		[Address(RVA = "0xC3734C", Offset = "0xC3734C", VA = "0xC3734C")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60004E0")]
		[Address(RVA = "0xC37358", Offset = "0xC37358", VA = "0xC37358")]
		set
		{
		}
	}

	[Token(Token = "0x1700002F")]
	public float height
	{
		[Token(Token = "0x60004E1")]
		[Address(RVA = "0xC37364", Offset = "0xC37364", VA = "0xC37364")]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60004E2")]
		[Address(RVA = "0xC37370", Offset = "0xC37370", VA = "0xC37370")]
		set
		{
		}
	}

	[Token(Token = "0x17000030")]
	public Rect rect
	{
		[Token(Token = "0x60004E3")]
		[Address(RVA = "0xC3737C", Offset = "0xC3737C", VA = "0xC3737C")]
		get
		{
			return default(Rect);
		}
		[Token(Token = "0x60004E4")]
		[Address(RVA = "0xC37564", Offset = "0xC37564", VA = "0xC37564")]
		set
		{
		}
	}

	[Token(Token = "0x60004D1")]
	[Address(RVA = "0xC36C78", Offset = "0xC36C78", VA = "0xC36C78")]
	public LTRect()
	{
	}

	[Token(Token = "0x60004D2")]
	[Address(RVA = "0xC36D88", Offset = "0xC36D88", VA = "0xC36D88")]
	public LTRect(Rect rect)
	{
	}

	[Token(Token = "0x60004D3")]
	[Address(RVA = "0xC36E20", Offset = "0xC36E20", VA = "0xC36E20")]
	public LTRect(float x, float y, float width, float height)
	{
	}

	[Token(Token = "0x60004D4")]
	[Address(RVA = "0xC36EE4", Offset = "0xC36EE4", VA = "0xC36EE4")]
	public LTRect(float x, float y, float width, float height, float alpha)
	{
	}

	[Token(Token = "0x60004D5")]
	[Address(RVA = "0xC36FB0", Offset = "0xC36FB0", VA = "0xC36FB0")]
	public LTRect(float x, float y, float width, float height, float alpha, float rotation)
	{
	}

	[Token(Token = "0x60004D8")]
	[Address(RVA = "0xC37314", Offset = "0xC37314", VA = "0xC37314")]
	public void setId(int id, int counter)
	{
	}

	[Token(Token = "0x60004D9")]
	[Address(RVA = "0xC36D1C", Offset = "0xC36D1C", VA = "0xC36D1C")]
	public void reset()
	{
	}

	[Token(Token = "0x60004DA")]
	[Address(RVA = "0xC37094", Offset = "0xC37094", VA = "0xC37094")]
	public void resetForRotation()
	{
	}

	[Token(Token = "0x60004E5")]
	[Address(RVA = "0xC37570", Offset = "0xC37570", VA = "0xC37570")]
	public LTRect setStyle(GUIStyle style)
	{
		return null;
	}

	[Token(Token = "0x60004E6")]
	[Address(RVA = "0xC37578", Offset = "0xC37578", VA = "0xC37578")]
	public LTRect setFontScaleToFit(bool fontScaleToFit)
	{
		return null;
	}

	[Token(Token = "0x60004E7")]
	[Address(RVA = "0xC37584", Offset = "0xC37584", VA = "0xC37584")]
	public LTRect setColor(Color color)
	{
		return null;
	}

	[Token(Token = "0x60004E8")]
	[Address(RVA = "0xC37598", Offset = "0xC37598", VA = "0xC37598")]
	public LTRect setAlpha(float alpha)
	{
		return null;
	}

	[Token(Token = "0x60004E9")]
	[Address(RVA = "0xC375A0", Offset = "0xC375A0", VA = "0xC375A0")]
	public LTRect setLabel(string str)
	{
		return null;
	}

	[Token(Token = "0x60004EA")]
	[Address(RVA = "0xC375A8", Offset = "0xC375A8", VA = "0xC375A8")]
	public LTRect setUseSimpleScale(bool useSimpleScale, Rect relativeRect)
	{
		return null;
	}

	[Token(Token = "0x60004EB")]
	[Address(RVA = "0xC375BC", Offset = "0xC375BC", VA = "0xC375BC")]
	public LTRect setUseSimpleScale(bool useSimpleScale)
	{
		return null;
	}

	[Token(Token = "0x60004EC")]
	[Address(RVA = "0xC37624", Offset = "0xC37624", VA = "0xC37624")]
	public LTRect setSizeByHeight(bool sizeByHeight)
	{
		return null;
	}

	[Token(Token = "0x60004ED")]
	[Address(RVA = "0xC37630", Offset = "0xC37630", VA = "0xC37630", Slot = "3")]
	public override string ToString()
	{
		return null;
	}
}
[Token(Token = "0x2000097")]
public class LTEvent
{
	[Token(Token = "0x40002DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public int id;

	[Token(Token = "0x40002DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public object data;

	[Token(Token = "0x60004EE")]
	[Address(RVA = "0xC378D0", Offset = "0xC378D0", VA = "0xC378D0")]
	public LTEvent(int id, object data)
	{
	}
}
[Token(Token = "0x2000098")]
public class LTGUI
{
	[Token(Token = "0x2000099")]
	public enum Element_Type
	{
		[Token(Token = "0x40002EA")]
		Texture,
		[Token(Token = "0x40002EB")]
		Label
	}

	[Token(Token = "0x40002DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static int RECT_LEVELS;

	[Token(Token = "0x40002DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static int RECTS_PER_LEVEL;

	[Token(Token = "0x40002DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static int BUTTONS_MAX;

	[Token(Token = "0x40002E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static LTRect[] levels;

	[Token(Token = "0x40002E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static int[] levelDepths;

	[Token(Token = "0x40002E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static Rect[] buttons;

	[Token(Token = "0x40002E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private static int[] buttonLevels;

	[Token(Token = "0x40002E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private static int[] buttonLastFrame;

	[Token(Token = "0x40002E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private static LTRect r;

	[Token(Token = "0x40002E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private static Color color;

	[Token(Token = "0x40002E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private static bool isGUIEnabled;

	[Token(Token = "0x40002E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private static int global_counter;

	[Token(Token = "0x60004EF")]
	[Address(RVA = "0xC37900", Offset = "0xC37900", VA = "0xC37900")]
	public static void init()
	{
	}

	[Token(Token = "0x60004F0")]
	[Address(RVA = "0xC379CC", Offset = "0xC379CC", VA = "0xC379CC")]
	public static void initRectCheck()
	{
	}

	[Token(Token = "0x60004F1")]
	[Address(RVA = "0xC37B20", Offset = "0xC37B20", VA = "0xC37B20")]
	public static void reset()
	{
	}

	[Token(Token = "0x60004F2")]
	[Address(RVA = "0xC37C68", Offset = "0xC37C68", VA = "0xC37C68")]
	public static void update(int updateLevel)
	{
	}

	[Token(Token = "0x60004F3")]
	[Address(RVA = "0xC38594", Offset = "0xC38594", VA = "0xC38594")]
	public static bool checkOnScreen(Rect rect)
	{
		return default(bool);
	}

	[Token(Token = "0x60004F4")]
	[Address(RVA = "0xC38670", Offset = "0xC38670", VA = "0xC38670")]
	public static void destroy(int id)
	{
	}

	[Token(Token = "0x60004F5")]
	[Address(RVA = "0xC387AC", Offset = "0xC387AC", VA = "0xC387AC")]
	public static void destroyAll(int depth)
	{
	}

	[Token(Token = "0x60004F6")]
	[Address(RVA = "0xC38888", Offset = "0xC38888", VA = "0xC38888")]
	public static LTRect label(Rect rect, string label, int depth)
	{
		return null;
	}

	[Token(Token = "0x60004F7")]
	[Address(RVA = "0xC3894C", Offset = "0xC3894C", VA = "0xC3894C")]
	public static LTRect label(LTRect rect, string label, int depth)
	{
		return null;
	}

	[Token(Token = "0x60004F8")]
	[Address(RVA = "0xC38CFC", Offset = "0xC38CFC", VA = "0xC38CFC")]
	public static LTRect texture(Rect rect, Texture texture, int depth)
	{
		return null;
	}

	[Token(Token = "0x60004F9")]
	[Address(RVA = "0xC38DC0", Offset = "0xC38DC0", VA = "0xC38DC0")]
	public static LTRect texture(LTRect rect, Texture texture, int depth)
	{
		return null;
	}

	[Token(Token = "0x60004FA")]
	[Address(RVA = "0xC389C8", Offset = "0xC389C8", VA = "0xC389C8")]
	public static LTRect element(LTRect rect, int depth)
	{
		return null;
	}

	[Token(Token = "0x60004FB")]
	[Address(RVA = "0xC38E38", Offset = "0xC38E38", VA = "0xC38E38")]
	public static bool hasNoOverlap(Rect rect, int depth)
	{
		return default(bool);
	}

	[Token(Token = "0x60004FC")]
	[Address(RVA = "0xC390F8", Offset = "0xC390F8", VA = "0xC390F8")]
	public static bool pressedWithinRect(Rect rect)
	{
		return default(bool);
	}

	[Token(Token = "0x60004FD")]
	[Address(RVA = "0xC3927C", Offset = "0xC3927C", VA = "0xC3927C")]
	public static bool checkWithinRect(Vector2 vec2, Rect rect)
	{
		return default(bool);
	}

	[Token(Token = "0x60004FE")]
	[Address(RVA = "0xC3920C", Offset = "0xC3920C", VA = "0xC3920C")]
	public static Vector2 firstTouch()
	{
		return default(Vector2);
	}

	[Token(Token = "0x60004FF")]
	[Address(RVA = "0xC39344", Offset = "0xC39344", VA = "0xC39344")]
	public LTGUI()
	{
	}
}
[Token(Token = "0x200009A")]
public static class LeanTweenExt
{
	[Token(Token = "0x6000501")]
	[Address(RVA = "0xC393B8", Offset = "0xC393B8", VA = "0xC393B8")]
	public static LTDescr LeanAlpha(this GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000502")]
	[Address(RVA = "0xC39428", Offset = "0xC39428", VA = "0xC39428")]
	public static LTDescr LeanAlphaVertex(this GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000503")]
	[Address(RVA = "0xC39498", Offset = "0xC39498", VA = "0xC39498")]
	public static LTDescr LeanAlpha(this RectTransform rectTransform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000504")]
	[Address(RVA = "0xC39508", Offset = "0xC39508", VA = "0xC39508")]
	public static LTDescr LeanAlpha(this CanvasGroup canvas, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000505")]
	[Address(RVA = "0xC39578", Offset = "0xC39578", VA = "0xC39578")]
	public static LTDescr LeanAlphaText(this RectTransform rectTransform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000506")]
	[Address(RVA = "0xC395E8", Offset = "0xC395E8", VA = "0xC395E8")]
	public static void LeanCancel(this GameObject gameObject)
	{
	}

	[Token(Token = "0x6000507")]
	[Address(RVA = "0xC39640", Offset = "0xC39640", VA = "0xC39640")]
	public static void LeanCancel(this GameObject gameObject, bool callOnComplete)
	{
	}

	[Token(Token = "0x6000508")]
	[Address(RVA = "0xC396A8", Offset = "0xC396A8", VA = "0xC396A8")]
	public static void LeanCancel(this GameObject gameObject, int uniqueId, bool callOnComplete = false)
	{
	}

	[Token(Token = "0x6000509")]
	[Address(RVA = "0xC39718", Offset = "0xC39718", VA = "0xC39718")]
	public static void LeanCancel(this RectTransform rectTransform)
	{
	}

	[Token(Token = "0x600050A")]
	[Address(RVA = "0xC39770", Offset = "0xC39770", VA = "0xC39770")]
	public static LTDescr LeanColor(this GameObject gameObject, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x600050B")]
	[Address(RVA = "0xC39808", Offset = "0xC39808", VA = "0xC39808")]
	public static LTDescr LeanColorText(this RectTransform rectTransform, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x600050C")]
	[Address(RVA = "0xC398A0", Offset = "0xC398A0", VA = "0xC398A0")]
	public static LTDescr LeanDelayedCall(this GameObject gameObject, float delayTime, Action callback)
	{
		return null;
	}

	[Token(Token = "0x600050D")]
	[Address(RVA = "0xC39918", Offset = "0xC39918", VA = "0xC39918")]
	public static LTDescr LeanDelayedCall(this GameObject gameObject, float delayTime, Action<object> callback)
	{
		return null;
	}

	[Token(Token = "0x600050E")]
	[Address(RVA = "0xC39990", Offset = "0xC39990", VA = "0xC39990")]
	public static bool LeanIsPaused(this GameObject gameObject)
	{
		return default(bool);
	}

	[Token(Token = "0x600050F")]
	[Address(RVA = "0xC399E8", Offset = "0xC399E8", VA = "0xC399E8")]
	public static bool LeanIsPaused(this RectTransform rectTransform)
	{
		return default(bool);
	}

	[Token(Token = "0x6000510")]
	[Address(RVA = "0xC39A40", Offset = "0xC39A40", VA = "0xC39A40")]
	public static bool LeanIsTweening(this GameObject gameObject)
	{
		return default(bool);
	}

	[Token(Token = "0x6000511")]
	[Address(RVA = "0xC39A98", Offset = "0xC39A98", VA = "0xC39A98")]
	public static LTDescr LeanMove(this GameObject gameObject, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000512")]
	[Address(RVA = "0xC39B20", Offset = "0xC39B20", VA = "0xC39B20")]
	public static LTDescr LeanMove(this Transform transform, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000513")]
	[Address(RVA = "0xC39BC4", Offset = "0xC39BC4", VA = "0xC39BC4")]
	public static LTDescr LeanMove(this RectTransform rectTransform, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000514")]
	[Address(RVA = "0xC39C4C", Offset = "0xC39C4C", VA = "0xC39C4C")]
	public static LTDescr LeanMove(this GameObject gameObject, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000515")]
	[Address(RVA = "0xC39CCC", Offset = "0xC39CCC", VA = "0xC39CCC")]
	public static LTDescr LeanMove(this Transform transform, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000516")]
	[Address(RVA = "0xC39D68", Offset = "0xC39D68", VA = "0xC39D68")]
	public static LTDescr LeanMove(this GameObject gameObject, Vector3[] to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000517")]
	[Address(RVA = "0xC39DE0", Offset = "0xC39DE0", VA = "0xC39DE0")]
	public static LTDescr LeanMove(this GameObject gameObject, LTBezierPath to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000518")]
	[Address(RVA = "0xC39E58", Offset = "0xC39E58", VA = "0xC39E58")]
	public static LTDescr LeanMove(this GameObject gameObject, LTSpline to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000519")]
	[Address(RVA = "0xC39ED0", Offset = "0xC39ED0", VA = "0xC39ED0")]
	public static LTDescr LeanMove(this Transform transform, Vector3[] to, float time)
	{
		return null;
	}

	[Token(Token = "0x600051A")]
	[Address(RVA = "0xC39F5C", Offset = "0xC39F5C", VA = "0xC39F5C")]
	public static LTDescr LeanMove(this Transform transform, LTBezierPath to, float time)
	{
		return null;
	}

	[Token(Token = "0x600051B")]
	[Address(RVA = "0xC39FE8", Offset = "0xC39FE8", VA = "0xC39FE8")]
	public static LTDescr LeanMove(this Transform transform, LTSpline to, float time)
	{
		return null;
	}

	[Token(Token = "0x600051C")]
	[Address(RVA = "0xC3A074", Offset = "0xC3A074", VA = "0xC3A074")]
	public static LTDescr LeanMoveLocal(this GameObject gameObject, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x600051D")]
	[Address(RVA = "0xC3A0FC", Offset = "0xC3A0FC", VA = "0xC3A0FC")]
	public static LTDescr LeanMoveLocal(this GameObject gameObject, LTBezierPath to, float time)
	{
		return null;
	}

	[Token(Token = "0x600051E")]
	[Address(RVA = "0xC3A174", Offset = "0xC3A174", VA = "0xC3A174")]
	public static LTDescr LeanMoveLocal(this GameObject gameObject, LTSpline to, float time)
	{
		return null;
	}

	[Token(Token = "0x600051F")]
	[Address(RVA = "0xC3A1EC", Offset = "0xC3A1EC", VA = "0xC3A1EC")]
	public static LTDescr LeanMoveLocal(this Transform transform, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000520")]
	[Address(RVA = "0xC3A290", Offset = "0xC3A290", VA = "0xC3A290")]
	public static LTDescr LeanMoveLocal(this Transform transform, LTBezierPath to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000521")]
	[Address(RVA = "0xC3A31C", Offset = "0xC3A31C", VA = "0xC3A31C")]
	public static LTDescr LeanMoveLocal(this Transform transform, LTSpline to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000522")]
	[Address(RVA = "0xC3A3A8", Offset = "0xC3A3A8", VA = "0xC3A3A8")]
	public static LTDescr LeanMoveLocalX(this GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000523")]
	[Address(RVA = "0xC3A418", Offset = "0xC3A418", VA = "0xC3A418")]
	public static LTDescr LeanMoveLocalY(this GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000524")]
	[Address(RVA = "0xC3A488", Offset = "0xC3A488", VA = "0xC3A488")]
	public static LTDescr LeanMoveLocalZ(this GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000525")]
	[Address(RVA = "0xC3A4F8", Offset = "0xC3A4F8", VA = "0xC3A4F8")]
	public static LTDescr LeanMoveLocalX(this Transform transform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000526")]
	[Address(RVA = "0xC3A584", Offset = "0xC3A584", VA = "0xC3A584")]
	public static LTDescr LeanMoveLocalY(this Transform transform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000527")]
	[Address(RVA = "0xC3A610", Offset = "0xC3A610", VA = "0xC3A610")]
	public static LTDescr LeanMoveLocalZ(this Transform transform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000528")]
	[Address(RVA = "0xC3A69C", Offset = "0xC3A69C", VA = "0xC3A69C")]
	public static LTDescr LeanMoveSpline(this GameObject gameObject, Vector3[] to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000529")]
	[Address(RVA = "0xC3A714", Offset = "0xC3A714", VA = "0xC3A714")]
	public static LTDescr LeanMoveSpline(this GameObject gameObject, LTSpline to, float time)
	{
		return null;
	}

	[Token(Token = "0x600052A")]
	[Address(RVA = "0xC3A78C", Offset = "0xC3A78C", VA = "0xC3A78C")]
	public static LTDescr LeanMoveSpline(this Transform transform, Vector3[] to, float time)
	{
		return null;
	}

	[Token(Token = "0x600052B")]
	[Address(RVA = "0xC3A818", Offset = "0xC3A818", VA = "0xC3A818")]
	public static LTDescr LeanMoveSpline(this Transform transform, LTSpline to, float time)
	{
		return null;
	}

	[Token(Token = "0x600052C")]
	[Address(RVA = "0xC3A8A4", Offset = "0xC3A8A4", VA = "0xC3A8A4")]
	public static LTDescr LeanMoveSplineLocal(this GameObject gameObject, Vector3[] to, float time)
	{
		return null;
	}

	[Token(Token = "0x600052D")]
	[Address(RVA = "0xC3A91C", Offset = "0xC3A91C", VA = "0xC3A91C")]
	public static LTDescr LeanMoveSplineLocal(this Transform transform, Vector3[] to, float time)
	{
		return null;
	}

	[Token(Token = "0x600052E")]
	[Address(RVA = "0xC3A9A8", Offset = "0xC3A9A8", VA = "0xC3A9A8")]
	public static LTDescr LeanMoveX(this GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x600052F")]
	[Address(RVA = "0xC3AA18", Offset = "0xC3AA18", VA = "0xC3AA18")]
	public static LTDescr LeanMoveX(this Transform transform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000530")]
	[Address(RVA = "0xC3AAA4", Offset = "0xC3AAA4", VA = "0xC3AAA4")]
	public static LTDescr LeanMoveX(this RectTransform rectTransform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000531")]
	[Address(RVA = "0xC3AB14", Offset = "0xC3AB14", VA = "0xC3AB14")]
	public static LTDescr LeanMoveY(this GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000532")]
	[Address(RVA = "0xC3AB84", Offset = "0xC3AB84", VA = "0xC3AB84")]
	public static LTDescr LeanMoveY(this Transform transform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000533")]
	[Address(RVA = "0xC3AC10", Offset = "0xC3AC10", VA = "0xC3AC10")]
	public static LTDescr LeanMoveY(this RectTransform rectTransform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000534")]
	[Address(RVA = "0xC3AC80", Offset = "0xC3AC80", VA = "0xC3AC80")]
	public static LTDescr LeanMoveZ(this GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000535")]
	[Address(RVA = "0xC3ACF0", Offset = "0xC3ACF0", VA = "0xC3ACF0")]
	public static LTDescr LeanMoveZ(this Transform transform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000536")]
	[Address(RVA = "0xC3AD7C", Offset = "0xC3AD7C", VA = "0xC3AD7C")]
	public static LTDescr LeanMoveZ(this RectTransform rectTransform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000537")]
	[Address(RVA = "0xC3ADEC", Offset = "0xC3ADEC", VA = "0xC3ADEC")]
	public static void LeanPause(this GameObject gameObject)
	{
	}

	[Token(Token = "0x6000538")]
	[Address(RVA = "0xC3AE44", Offset = "0xC3AE44", VA = "0xC3AE44")]
	public static LTDescr LeanPlay(this RectTransform rectTransform, Sprite[] sprites)
	{
		return null;
	}

	[Token(Token = "0x6000539")]
	[Address(RVA = "0xC3AEAC", Offset = "0xC3AEAC", VA = "0xC3AEAC")]
	public static void LeanResume(this GameObject gameObject)
	{
	}

	[Token(Token = "0x600053A")]
	[Address(RVA = "0xC3AF04", Offset = "0xC3AF04", VA = "0xC3AF04")]
	public static LTDescr LeanRotate(this GameObject gameObject, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x600053B")]
	[Address(RVA = "0xC3AF8C", Offset = "0xC3AF8C", VA = "0xC3AF8C")]
	public static LTDescr LeanRotate(this Transform transform, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x600053C")]
	[Address(RVA = "0xC3B030", Offset = "0xC3B030", VA = "0xC3B030")]
	public static LTDescr LeanRotate(this RectTransform rectTransform, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x600053D")]
	[Address(RVA = "0xC3B0B8", Offset = "0xC3B0B8", VA = "0xC3B0B8")]
	public static LTDescr LeanRotateAround(this GameObject gameObject, Vector3 axis, float add, float time)
	{
		return null;
	}

	[Token(Token = "0x600053E")]
	[Address(RVA = "0xC3B150", Offset = "0xC3B150", VA = "0xC3B150")]
	public static LTDescr LeanRotateAround(this Transform transform, Vector3 axis, float add, float time)
	{
		return null;
	}

	[Token(Token = "0x600053F")]
	[Address(RVA = "0xC3B204", Offset = "0xC3B204", VA = "0xC3B204")]
	public static LTDescr LeanRotateAround(this RectTransform rectTransform, Vector3 axis, float add, float time)
	{
		return null;
	}

	[Token(Token = "0x6000540")]
	[Address(RVA = "0xC3B29C", Offset = "0xC3B29C", VA = "0xC3B29C")]
	public static LTDescr LeanRotateAroundLocal(this GameObject gameObject, Vector3 axis, float add, float time)
	{
		return null;
	}

	[Token(Token = "0x6000541")]
	[Address(RVA = "0xC3B334", Offset = "0xC3B334", VA = "0xC3B334")]
	public static LTDescr LeanRotateAroundLocal(this Transform transform, Vector3 axis, float add, float time)
	{
		return null;
	}

	[Token(Token = "0x6000542")]
	[Address(RVA = "0xC3B3E8", Offset = "0xC3B3E8", VA = "0xC3B3E8")]
	public static LTDescr LeanRotateAroundLocal(this RectTransform rectTransform, Vector3 axis, float add, float time)
	{
		return null;
	}

	[Token(Token = "0x6000543")]
	[Address(RVA = "0xC3B480", Offset = "0xC3B480", VA = "0xC3B480")]
	public static LTDescr LeanRotateX(this GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000544")]
	[Address(RVA = "0xC3B4F0", Offset = "0xC3B4F0", VA = "0xC3B4F0")]
	public static LTDescr LeanRotateX(this Transform transform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000545")]
	[Address(RVA = "0xC3B57C", Offset = "0xC3B57C", VA = "0xC3B57C")]
	public static LTDescr LeanRotateY(this GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000546")]
	[Address(RVA = "0xC3B5EC", Offset = "0xC3B5EC", VA = "0xC3B5EC")]
	public static LTDescr LeanRotateY(this Transform transform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000547")]
	[Address(RVA = "0xC3B678", Offset = "0xC3B678", VA = "0xC3B678")]
	public static LTDescr LeanRotateZ(this GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000548")]
	[Address(RVA = "0xC3B6E8", Offset = "0xC3B6E8", VA = "0xC3B6E8")]
	public static LTDescr LeanRotateZ(this Transform transform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000549")]
	[Address(RVA = "0xC3B774", Offset = "0xC3B774", VA = "0xC3B774")]
	public static LTDescr LeanScale(this GameObject gameObject, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x600054A")]
	[Address(RVA = "0xC3B7FC", Offset = "0xC3B7FC", VA = "0xC3B7FC")]
	public static LTDescr LeanScale(this Transform transform, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x600054B")]
	[Address(RVA = "0xC3B8A0", Offset = "0xC3B8A0", VA = "0xC3B8A0")]
	public static LTDescr LeanScale(this RectTransform rectTransform, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x600054C")]
	[Address(RVA = "0xC3B928", Offset = "0xC3B928", VA = "0xC3B928")]
	public static LTDescr LeanScaleX(this GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x600054D")]
	[Address(RVA = "0xC3B998", Offset = "0xC3B998", VA = "0xC3B998")]
	public static LTDescr LeanScaleX(this Transform transform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x600054E")]
	[Address(RVA = "0xC3BA24", Offset = "0xC3BA24", VA = "0xC3BA24")]
	public static LTDescr LeanScaleY(this GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x600054F")]
	[Address(RVA = "0xC3BA94", Offset = "0xC3BA94", VA = "0xC3BA94")]
	public static LTDescr LeanScaleY(this Transform transform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000550")]
	[Address(RVA = "0xC3BB20", Offset = "0xC3BB20", VA = "0xC3BB20")]
	public static LTDescr LeanScaleZ(this GameObject gameObject, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000551")]
	[Address(RVA = "0xC3BB90", Offset = "0xC3BB90", VA = "0xC3BB90")]
	public static LTDescr LeanScaleZ(this Transform transform, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000552")]
	[Address(RVA = "0xC3BC1C", Offset = "0xC3BC1C", VA = "0xC3BC1C")]
	public static LTDescr LeanSize(this RectTransform rectTransform, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000553")]
	[Address(RVA = "0xC3BC9C", Offset = "0xC3BC9C", VA = "0xC3BC9C")]
	public static LTDescr LeanValue(this GameObject gameObject, Color from, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000554")]
	[Address(RVA = "0xC3BDB4", Offset = "0xC3BDB4", VA = "0xC3BDB4")]
	public static LTDescr LeanValue(this GameObject gameObject, float from, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000555")]
	[Address(RVA = "0xC3BE34", Offset = "0xC3BE34", VA = "0xC3BE34")]
	public static LTDescr LeanValue(this GameObject gameObject, Vector2 from, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000556")]
	[Address(RVA = "0xC3BECC", Offset = "0xC3BECC", VA = "0xC3BECC")]
	public static LTDescr LeanValue(this GameObject gameObject, Vector3 from, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000557")]
	[Address(RVA = "0xC3BF7C", Offset = "0xC3BF7C", VA = "0xC3BF7C")]
	public static LTDescr LeanValue(this GameObject gameObject, Action<float> callOnUpdate, float from, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000558")]
	[Address(RVA = "0xC3C00C", Offset = "0xC3C00C", VA = "0xC3C00C")]
	public static LTDescr LeanValue(this GameObject gameObject, Action<float, float> callOnUpdate, float from, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x6000559")]
	[Address(RVA = "0xC3C09C", Offset = "0xC3C09C", VA = "0xC3C09C")]
	public static LTDescr LeanValue(this GameObject gameObject, Action<float, object> callOnUpdate, float from, float to, float time)
	{
		return null;
	}

	[Token(Token = "0x600055A")]
	[Address(RVA = "0xC3C12C", Offset = "0xC3C12C", VA = "0xC3C12C")]
	public static LTDescr LeanValue(this GameObject gameObject, Action<Color> callOnUpdate, Color from, Color to, float time)
	{
		return null;
	}

	[Token(Token = "0x600055B")]
	[Address(RVA = "0xC3C24C", Offset = "0xC3C24C", VA = "0xC3C24C")]
	public static LTDescr LeanValue(this GameObject gameObject, Action<Vector2> callOnUpdate, Vector2 from, Vector2 to, float time)
	{
		return null;
	}

	[Token(Token = "0x600055C")]
	[Address(RVA = "0xC3C2F4", Offset = "0xC3C2F4", VA = "0xC3C2F4")]
	public static LTDescr LeanValue(this GameObject gameObject, Action<Vector3> callOnUpdate, Vector3 from, Vector3 to, float time)
	{
		return null;
	}

	[Token(Token = "0x600055D")]
	[Address(RVA = "0xC3440C", Offset = "0xC3440C", VA = "0xC3440C")]
	public static void LeanSetPosX(this Transform transform, float val)
	{
	}

	[Token(Token = "0x600055E")]
	[Address(RVA = "0xC344D4", Offset = "0xC344D4", VA = "0xC344D4")]
	public static void LeanSetPosY(this Transform transform, float val)
	{
	}

	[Token(Token = "0x600055F")]
	[Address(RVA = "0xC345A4", Offset = "0xC345A4", VA = "0xC345A4")]
	public static void LeanSetPosZ(this Transform transform, float val)
	{
	}

	[Token(Token = "0x6000560")]
	[Address(RVA = "0xC341A8", Offset = "0xC341A8", VA = "0xC341A8")]
	public static void LeanSetLocalPosX(this Transform transform, float val)
	{
	}

	[Token(Token = "0x6000561")]
	[Address(RVA = "0xC34270", Offset = "0xC34270", VA = "0xC34270")]
	public static void LeanSetLocalPosY(this Transform transform, float val)
	{
	}

	[Token(Token = "0x6000562")]
	[Address(RVA = "0xC34340", Offset = "0xC34340", VA = "0xC34340")]
	public static void LeanSetLocalPosZ(this Transform transform, float val)
	{
	}

	[Token(Token = "0x6000563")]
	[Address(RVA = "0xC347A4", Offset = "0xC347A4", VA = "0xC347A4")]
	public static Color LeanColor(this Transform transform)
	{
		return default(Color);
	}
}
[Token(Token = "0x200009B")]
public class LTDescr
{
	[Token(Token = "0x200009C")]
	public delegate Vector3 EaseTypeDelegate();

	[Token(Token = "0x200009D")]
	public delegate void ActionMethodDelegate();

	[Token(Token = "0x40002EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public bool toggle;

	[Token(Token = "0x40002ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
	public bool useEstimatedTime;

	[Token(Token = "0x40002EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
	public bool useFrames;

	[Token(Token = "0x40002EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
	public bool useManualTime;

	[Token(Token = "0x40002F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	public bool usesNormalDt;

	[Token(Token = "0x40002F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
	public bool hasInitiliazed;

	[Token(Token = "0x40002F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
	public bool hasExtraOnCompletes;

	[Token(Token = "0x40002F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x17")]
	public bool hasPhysics;

	[Token(Token = "0x40002F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool onCompleteOnRepeat;

	[Token(Token = "0x40002F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool onCompleteOnStart;

	[Token(Token = "0x40002F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
	public bool useRecursion;

	[Token(Token = "0x40002F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ratioPassed;

	[Token(Token = "0x40002F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float passed;

	[Token(Token = "0x40002F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float delay;

	[Token(Token = "0x40002FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float time;

	[Token(Token = "0x40002FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float speed;

	[Token(Token = "0x40002FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float lastVal;

	[Token(Token = "0x40002FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private uint _id;

	[Token(Token = "0x40002FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public int loopCount;

	[Token(Token = "0x40002FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public uint counter;

	[Token(Token = "0x4000300")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float direction;

	[Token(Token = "0x4000301")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float directionLast;

	[Token(Token = "0x4000302")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float overshoot;

	[Token(Token = "0x4000303")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float period;

	[Token(Token = "0x4000304")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float scale;

	[Token(Token = "0x4000305")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool destroyOnComplete;

	[Token(Token = "0x4000306")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform trans;

	[Token(Token = "0x4000307")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	internal Vector3 fromInternal;

	[Token(Token = "0x4000308")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	internal Vector3 toInternal;

	[Token(Token = "0x4000309")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	internal Vector3 diff;

	[Token(Token = "0x400030A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	internal Vector3 diffDiv2;

	[Token(Token = "0x400030B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public TweenAction type;

	[Token(Token = "0x400030C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private LeanTweenType easeType;

	[Token(Token = "0x400030D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public LeanTweenType loopType;

	[Token(Token = "0x400030E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public bool hasUpdateCallback;

	[Token(Token = "0x400030F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public EaseTypeDelegate easeMethod;

	[Token(Token = "0x4000312")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public SpriteRenderer spriteRen;

	[Token(Token = "0x4000313")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public RectTransform rectTransform;

	[Token(Token = "0x4000314")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public Text uiText;

	[Token(Token = "0x4000315")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public Image uiImage;

	[Token(Token = "0x4000316")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public RawImage rawImage;

	[Token(Token = "0x4000317")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Sprite[] sprites;

	[Token(Token = "0x4000318")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public LTDescrOptional _optional;

	[Token(Token = "0x4000319")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static float val;

	[Token(Token = "0x400031A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
	public static float dt;

	[Token(Token = "0x400031B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	public static Vector3 newVect;

	[Token(Token = "0x17000031")]
	public Vector3 from
	{
		[Token(Token = "0x6000564")]
		[Address(RVA = "0xC3C3B4", Offset = "0xC3C3B4", VA = "0xC3C3B4")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000565")]
		[Address(RVA = "0xC3C3C0", Offset = "0xC3C3C0", VA = "0xC3C3C0")]
		set
		{
		}
	}

	[Token(Token = "0x17000032")]
	public Vector3 to
	{
		[Token(Token = "0x6000566")]
		[Address(RVA = "0xC3C3CC", Offset = "0xC3C3CC", VA = "0xC3C3CC")]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x6000567")]
		[Address(RVA = "0xC3C3D8", Offset = "0xC3C3D8", VA = "0xC3C3D8")]
		set
		{
		}
	}

	[Token(Token = "0x17000033")]
	public ActionMethodDelegate easeInternal
	{
		[Token(Token = "0x6000568")]
		[Address(RVA = "0xC3C3E4", Offset = "0xC3C3E4", VA = "0xC3C3E4")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x6000569")]
		[Address(RVA = "0xC3C3EC", Offset = "0xC3C3EC", VA = "0xC3C3EC")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000034")]
	public ActionMethodDelegate initInternal
	{
		[Token(Token = "0x600056A")]
		[Address(RVA = "0xC3C3F4", Offset = "0xC3C3F4", VA = "0xC3C3F4")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x600056B")]
		[Address(RVA = "0xC3C3FC", Offset = "0xC3C3FC", VA = "0xC3C3FC")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000035")]
	public Transform toTrans
	{
		[Token(Token = "0x600056C")]
		[Address(RVA = "0xC34068", Offset = "0xC34068", VA = "0xC34068")]
		get
		{
			return null;
		}
	}

	[Token(Token = "0x17000036")]
	public int uniqueId
	{
		[Token(Token = "0x6000570")]
		[Address(RVA = "0xC3CD54", Offset = "0xC3CD54", VA = "0xC3CD54")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000037")]
	public int id
	{
		[Token(Token = "0x6000571")]
		[Address(RVA = "0xC3CC0C", Offset = "0xC3CC0C", VA = "0xC3CC0C")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x17000038")]
	public LTDescrOptional optional
	{
		[Token(Token = "0x6000572")]
		[Address(RVA = "0xC3CD64", Offset = "0xC3CD64", VA = "0xC3CD64")]
		get
		{
			return null;
		}
		[Token(Token = "0x6000573")]
		[Address(RVA = "0xC3CD6C", Offset = "0xC3CD6C", VA = "0xC3CD6C")]
		set
		{
		}
	}

	[Token(Token = "0x600056D")]
	[Address(RVA = "0xC3C404", Offset = "0xC3C404", VA = "0xC3C404", Slot = "3")]
	public override string ToString()
	{
		return null;
	}

	[Token(Token = "0x600056E")]
	[Address(RVA = "0xC3CC1C", Offset = "0xC3CC1C", VA = "0xC3CC1C")]
	public LTDescr()
	{
	}

	[Token(Token = "0x600056F")]
	[Address(RVA = "0xC3CC8C", Offset = "0xC3CC8C", VA = "0xC3CC8C")]
	[Obsolete("Use 'LeanTween.cancel( id )' instead")]
	public LTDescr cancel(GameObject gameObject)
	{
		return null;
	}

	[Token(Token = "0x6000574")]
	[Address(RVA = "0xC3CD74", Offset = "0xC3CD74", VA = "0xC3CD74")]
	public void reset()
	{
	}

	[Token(Token = "0x6000575")]
	[Address(RVA = "0xC3CEA0", Offset = "0xC3CEA0", VA = "0xC3CEA0")]
	public LTDescr setFollow()
	{
		return null;
	}

	[Token(Token = "0x6000576")]
	[Address(RVA = "0xC3CEAC", Offset = "0xC3CEAC", VA = "0xC3CEAC")]
	public LTDescr setMoveX()
	{
		return null;
	}

	[Token(Token = "0x6000577")]
	[Address(RVA = "0xC3CF68", Offset = "0xC3CF68", VA = "0xC3CF68")]
	public LTDescr setMoveY()
	{
		return null;
	}

	[Token(Token = "0x6000578")]
	[Address(RVA = "0xC3D028", Offset = "0xC3D028", VA = "0xC3D028")]
	public LTDescr setMoveZ()
	{
		return null;
	}

	[Token(Token = "0x6000579")]
	[Address(RVA = "0xC3D0E8", Offset = "0xC3D0E8", VA = "0xC3D0E8")]
	public LTDescr setMoveLocalX()
	{
		return null;
	}

	[Token(Token = "0x600057A")]
	[Address(RVA = "0xC3D1A8", Offset = "0xC3D1A8", VA = "0xC3D1A8")]
	public LTDescr setMoveLocalY()
	{
		return null;
	}

	[Token(Token = "0x600057B")]
	[Address(RVA = "0xC3D268", Offset = "0xC3D268", VA = "0xC3D268")]
	public LTDescr setMoveLocalZ()
	{
		return null;
	}

	[Token(Token = "0x600057C")]
	[Address(RVA = "0xC3D328", Offset = "0xC3D328", VA = "0xC3D328")]
	private void initFromInternal()
	{
	}

	[Token(Token = "0x600057D")]
	[Address(RVA = "0xC3D330", Offset = "0xC3D330", VA = "0xC3D330")]
	public LTDescr setOffset(Vector3 offset)
	{
		return null;
	}

	[Token(Token = "0x600057E")]
	[Address(RVA = "0xC3D33C", Offset = "0xC3D33C", VA = "0xC3D33C")]
	public LTDescr setMoveCurved()
	{
		return null;
	}

	[Token(Token = "0x600057F")]
	[Address(RVA = "0xC3D3FC", Offset = "0xC3D3FC", VA = "0xC3D3FC")]
	public LTDescr setMoveCurvedLocal()
	{
		return null;
	}

	[Token(Token = "0x6000580")]
	[Address(RVA = "0xC3D4BC", Offset = "0xC3D4BC", VA = "0xC3D4BC")]
	public LTDescr setMoveSpline()
	{
		return null;
	}

	[Token(Token = "0x6000581")]
	[Address(RVA = "0xC3D57C", Offset = "0xC3D57C", VA = "0xC3D57C")]
	public LTDescr setMoveSplineLocal()
	{
		return null;
	}

	[Token(Token = "0x6000582")]
	[Address(RVA = "0xC3D63C", Offset = "0xC3D63C", VA = "0xC3D63C")]
	public LTDescr setScaleX()
	{
		return null;
	}

	[Token(Token = "0x6000583")]
	[Address(RVA = "0xC3D6FC", Offset = "0xC3D6FC", VA = "0xC3D6FC")]
	public LTDescr setScaleY()
	{
		return null;
	}

	[Token(Token = "0x6000584")]
	[Address(RVA = "0xC3D7BC", Offset = "0xC3D7BC", VA = "0xC3D7BC")]
	public LTDescr setScaleZ()
	{
		return null;
	}

	[Token(Token = "0x6000585")]
	[Address(RVA = "0xC3D87C", Offset = "0xC3D87C", VA = "0xC3D87C")]
	public LTDescr setRotateX()
	{
		return null;
	}

	[Token(Token = "0x6000586")]
	[Address(RVA = "0xC3D93C", Offset = "0xC3D93C", VA = "0xC3D93C")]
	public LTDescr setRotateY()
	{
		return null;
	}

	[Token(Token = "0x6000587")]
	[Address(RVA = "0xC3D9FC", Offset = "0xC3D9FC", VA = "0xC3D9FC")]
	public LTDescr setRotateZ()
	{
		return null;
	}

	[Token(Token = "0x6000588")]
	[Address(RVA = "0xC3DABC", Offset = "0xC3DABC", VA = "0xC3DABC")]
	public LTDescr setRotateAround()
	{
		return null;
	}

	[Token(Token = "0x6000589")]
	[Address(RVA = "0xC3DB7C", Offset = "0xC3DB7C", VA = "0xC3DB7C")]
	public LTDescr setRotateAroundLocal()
	{
		return null;
	}

	[Token(Token = "0x600058A")]
	[Address(RVA = "0xC3DC3C", Offset = "0xC3DC3C", VA = "0xC3DC3C")]
	public LTDescr setAlpha()
	{
		return null;
	}

	[Token(Token = "0x600058B")]
	[Address(RVA = "0xC3DCFC", Offset = "0xC3DCFC", VA = "0xC3DCFC")]
	public LTDescr setTextAlpha()
	{
		return null;
	}

	[Token(Token = "0x600058C")]
	[Address(RVA = "0xC3DDBC", Offset = "0xC3DDBC", VA = "0xC3DDBC")]
	public LTDescr setAlphaVertex()
	{
		return null;
	}

	[Token(Token = "0x600058D")]
	[Address(RVA = "0xC3DE7C", Offset = "0xC3DE7C", VA = "0xC3DE7C")]
	public LTDescr setColor()
	{
		return null;
	}

	[Token(Token = "0x600058E")]
	[Address(RVA = "0xC3DF3C", Offset = "0xC3DF3C", VA = "0xC3DF3C")]
	public LTDescr setCallbackColor()
	{
		return null;
	}

	[Token(Token = "0x600058F")]
	[Address(RVA = "0xC3DFFC", Offset = "0xC3DFFC", VA = "0xC3DFFC")]
	public LTDescr setTextColor()
	{
		return null;
	}

	[Token(Token = "0x6000590")]
	[Address(RVA = "0xC3E0BC", Offset = "0xC3E0BC", VA = "0xC3E0BC")]
	public LTDescr setCanvasAlpha()
	{
		return null;
	}

	[Token(Token = "0x6000591")]
	[Address(RVA = "0xC3E17C", Offset = "0xC3E17C", VA = "0xC3E17C")]
	public LTDescr setCanvasGroupAlpha()
	{
		return null;
	}

	[Token(Token = "0x6000592")]
	[Address(RVA = "0xC3E23C", Offset = "0xC3E23C", VA = "0xC3E23C")]
	public LTDescr setCanvasColor()
	{
		return null;
	}

	[Token(Token = "0x6000593")]
	[Address(RVA = "0xC3E2FC", Offset = "0xC3E2FC", VA = "0xC3E2FC")]
	public LTDescr setCanvasMoveX()
	{
		return null;
	}

	[Token(Token = "0x6000594")]
	[Address(RVA = "0xC3E3BC", Offset = "0xC3E3BC", VA = "0xC3E3BC")]
	public LTDescr setCanvasMoveY()
	{
		return null;
	}

	[Token(Token = "0x6000595")]
	[Address(RVA = "0xC3E47C", Offset = "0xC3E47C", VA = "0xC3E47C")]
	public LTDescr setCanvasMoveZ()
	{
		return null;
	}

	[Token(Token = "0x6000596")]
	[Address(RVA = "0xC3E53C", Offset = "0xC3E53C", VA = "0xC3E53C")]
	private void initCanvasRotateAround()
	{
	}

	[Token(Token = "0x6000597")]
	[Address(RVA = "0xC3E578", Offset = "0xC3E578", VA = "0xC3E578")]
	public LTDescr setCanvasRotateAround()
	{
		return null;
	}

	[Token(Token = "0x6000598")]
	[Address(RVA = "0xC3E638", Offset = "0xC3E638", VA = "0xC3E638")]
	public LTDescr setCanvasRotateAroundLocal()
	{
		return null;
	}

	[Token(Token = "0x6000599")]
	[Address(RVA = "0xC3E6F8", Offset = "0xC3E6F8", VA = "0xC3E6F8")]
	public LTDescr setCanvasPlaySprite()
	{
		return null;
	}

	[Token(Token = "0x600059A")]
	[Address(RVA = "0xC3E7B8", Offset = "0xC3E7B8", VA = "0xC3E7B8")]
	public LTDescr setCanvasMove()
	{
		return null;
	}

	[Token(Token = "0x600059B")]
	[Address(RVA = "0xC3E878", Offset = "0xC3E878", VA = "0xC3E878")]
	public LTDescr setCanvasScale()
	{
		return null;
	}

	[Token(Token = "0x600059C")]
	[Address(RVA = "0xC3E938", Offset = "0xC3E938", VA = "0xC3E938")]
	public LTDescr setCanvasSizeDelta()
	{
		return null;
	}

	[Token(Token = "0x600059D")]
	[Address(RVA = "0xC3E9F8", Offset = "0xC3E9F8", VA = "0xC3E9F8")]
	private void callback()
	{
	}

	[Token(Token = "0x600059E")]
	[Address(RVA = "0xC3EA70", Offset = "0xC3EA70", VA = "0xC3EA70")]
	public LTDescr setCallback()
	{
		return null;
	}

	[Token(Token = "0x600059F")]
	[Address(RVA = "0xC3EB90", Offset = "0xC3EB90", VA = "0xC3EB90")]
	public LTDescr setValue3()
	{
		return null;
	}

	[Token(Token = "0x60005A0")]
	[Address(RVA = "0xC3ECB0", Offset = "0xC3ECB0", VA = "0xC3ECB0")]
	public LTDescr setMove()
	{
		return null;
	}

	[Token(Token = "0x60005A1")]
	[Address(RVA = "0xC3ED70", Offset = "0xC3ED70", VA = "0xC3ED70")]
	public LTDescr setMoveLocal()
	{
		return null;
	}

	[Token(Token = "0x60005A2")]
	[Address(RVA = "0xC3EE30", Offset = "0xC3EE30", VA = "0xC3EE30")]
	public LTDescr setMoveToTransform()
	{
		return null;
	}

	[Token(Token = "0x60005A3")]
	[Address(RVA = "0xC3EEF0", Offset = "0xC3EEF0", VA = "0xC3EEF0")]
	public LTDescr setRotate()
	{
		return null;
	}

	[Token(Token = "0x60005A4")]
	[Address(RVA = "0xC3EFB0", Offset = "0xC3EFB0", VA = "0xC3EFB0")]
	public LTDescr setRotateLocal()
	{
		return null;
	}

	[Token(Token = "0x60005A5")]
	[Address(RVA = "0xC3F070", Offset = "0xC3F070", VA = "0xC3F070")]
	public LTDescr setScale()
	{
		return null;
	}

	[Token(Token = "0x60005A6")]
	[Address(RVA = "0xC3F130", Offset = "0xC3F130", VA = "0xC3F130")]
	public LTDescr setGUIMove()
	{
		return null;
	}

	[Token(Token = "0x60005A7")]
	[Address(RVA = "0xC3F1F0", Offset = "0xC3F1F0", VA = "0xC3F1F0")]
	public LTDescr setGUIMoveMargin()
	{
		return null;
	}

	[Token(Token = "0x60005A8")]
	[Address(RVA = "0xC3F2B0", Offset = "0xC3F2B0", VA = "0xC3F2B0")]
	public LTDescr setGUIScale()
	{
		return null;
	}

	[Token(Token = "0x60005A9")]
	[Address(RVA = "0xC3F370", Offset = "0xC3F370", VA = "0xC3F370")]
	public LTDescr setGUIAlpha()
	{
		return null;
	}

	[Token(Token = "0x60005AA")]
	[Address(RVA = "0xC3F430", Offset = "0xC3F430", VA = "0xC3F430")]
	public LTDescr setGUIRotate()
	{
		return null;
	}

	[Token(Token = "0x60005AB")]
	[Address(RVA = "0xC3F4F0", Offset = "0xC3F4F0", VA = "0xC3F4F0")]
	public LTDescr setDelayedSound()
	{
		return null;
	}

	[Token(Token = "0x60005AC")]
	[Address(RVA = "0xC3F5B0", Offset = "0xC3F5B0", VA = "0xC3F5B0")]
	public LTDescr setTarget(Transform trans)
	{
		return null;
	}

	[Token(Token = "0x60005AD")]
	[Address(RVA = "0xC3F5CC", Offset = "0xC3F5CC", VA = "0xC3F5CC")]
	private void init()
	{
	}

	[Token(Token = "0x60005AE")]
	[Address(RVA = "0xC3F808", Offset = "0xC3F808", VA = "0xC3F808")]
	private void initSpeed()
	{
	}

	[Token(Token = "0x60005AF")]
	[Address(RVA = "0xC3F8FC", Offset = "0xC3F8FC", VA = "0xC3F8FC")]
	public LTDescr updateNow()
	{
		return null;
	}

	[Token(Token = "0x60005B0")]
	[Address(RVA = "0xC3F914", Offset = "0xC3F914", VA = "0xC3F914")]
	public bool updateInternal()
	{
		return default(bool);
	}

	[Token(Token = "0x60005B1")]
	[Address(RVA = "0xC3F710", Offset = "0xC3F710", VA = "0xC3F710")]
	public void callOnCompletes()
	{
	}

	[Token(Token = "0x60005B2")]
	[Address(RVA = "0xC3FBE0", Offset = "0xC3FBE0", VA = "0xC3FBE0")]
	public LTDescr setFromColor(Color col)
	{
		return null;
	}

	[Token(Token = "0x60005B3")]
	[Address(RVA = "0xC3FC1C", Offset = "0xC3FC1C", VA = "0xC3FC1C")]
	private static void alphaRecursive(Transform transform, float val, bool useRecursion = true)
	{
	}

	[Token(Token = "0x60005B4")]
	[Address(RVA = "0xC40094", Offset = "0xC40094", VA = "0xC40094")]
	private static void colorRecursive(Transform transform, Color toColor, bool useRecursion = true)
	{
	}

	[Token(Token = "0x60005B5")]
	[Address(RVA = "0xC40478", Offset = "0xC40478", VA = "0xC40478")]
	private static void alphaRecursive(RectTransform rectTransform, float val, int recursiveLevel = 0)
	{
	}

	[Token(Token = "0x60005B6")]
	[Address(RVA = "0xC408B8", Offset = "0xC408B8", VA = "0xC408B8")]
	private static void alphaRecursiveSprite(Transform transform, float val)
	{
	}

	[Token(Token = "0x60005B7")]
	[Address(RVA = "0xC40C90", Offset = "0xC40C90", VA = "0xC40C90")]
	private static void colorRecursiveSprite(Transform transform, Color toColor)
	{
	}

	[Token(Token = "0x60005B8")]
	[Address(RVA = "0xC41090", Offset = "0xC41090", VA = "0xC41090")]
	private static void colorRecursive(RectTransform rectTransform, Color toColor)
	{
	}

	[Token(Token = "0x60005B9")]
	[Address(RVA = "0xC414C8", Offset = "0xC414C8", VA = "0xC414C8")]
	private static void textAlphaChildrenRecursive(Transform trans, float val, bool useRecursion = true)
	{
	}

	[Token(Token = "0x60005BA")]
	[Address(RVA = "0xC41880", Offset = "0xC41880", VA = "0xC41880")]
	private static void textAlphaRecursive(Transform trans, float val, bool useRecursion = true)
	{
	}

	[Token(Token = "0x60005BB")]
	[Address(RVA = "0xC41C00", Offset = "0xC41C00", VA = "0xC41C00")]
	private static void textColorRecursive(Transform trans, Color toColor)
	{
	}

	[Token(Token = "0x60005BC")]
	[Address(RVA = "0xC41FBC", Offset = "0xC41FBC", VA = "0xC41FBC")]
	private static Color tweenColor(LTDescr tween, float val)
	{
		return default(Color);
	}

	[Token(Token = "0x60005BD")]
	[Address(RVA = "0xC42018", Offset = "0xC42018", VA = "0xC42018")]
	public LTDescr pause()
	{
		return null;
	}

	[Token(Token = "0x60005BE")]
	[Address(RVA = "0xC42030", Offset = "0xC42030", VA = "0xC42030")]
	public LTDescr resume()
	{
		return null;
	}

	[Token(Token = "0x60005BF")]
	[Address(RVA = "0xC4203C", Offset = "0xC4203C", VA = "0xC4203C")]
	public LTDescr setAxis(Vector3 axis)
	{
		return null;
	}

	[Token(Token = "0x60005C0")]
	[Address(RVA = "0xC4205C", Offset = "0xC4205C", VA = "0xC4205C")]
	public LTDescr setDelay(float delay)
	{
		return null;
	}

	[Token(Token = "0x60005C1")]
	[Address(RVA = "0xC42064", Offset = "0xC42064", VA = "0xC42064")]
	public LTDescr setEase(LeanTweenType easeType)
	{
		return null;
	}

	[Token(Token = "0x60005C2")]
	[Address(RVA = "0xC421A0", Offset = "0xC421A0", VA = "0xC421A0")]
	public LTDescr setEaseLinear()
	{
		return null;
	}

	[Token(Token = "0x60005C3")]
	[Address(RVA = "0xC433B0", Offset = "0xC433B0", VA = "0xC433B0")]
	public LTDescr setEaseSpring()
	{
		return null;
	}

	[Token(Token = "0x60005C4")]
	[Address(RVA = "0xC422B0", Offset = "0xC422B0", VA = "0xC422B0")]
	public LTDescr setEaseInQuad()
	{
		return null;
	}

	[Token(Token = "0x60005C5")]
	[Address(RVA = "0xC42228", Offset = "0xC42228", VA = "0xC42228")]
	public LTDescr setEaseOutQuad()
	{
		return null;
	}

	[Token(Token = "0x60005C6")]
	[Address(RVA = "0xC42338", Offset = "0xC42338", VA = "0xC42338")]
	public LTDescr setEaseInOutQuad()
	{
		return null;
	}

	[Token(Token = "0x60005C7")]
	[Address(RVA = "0xC423C0", Offset = "0xC423C0", VA = "0xC423C0")]
	public LTDescr setEaseInCubic()
	{
		return null;
	}

	[Token(Token = "0x60005C8")]
	[Address(RVA = "0xC42448", Offset = "0xC42448", VA = "0xC42448")]
	public LTDescr setEaseOutCubic()
	{
		return null;
	}

	[Token(Token = "0x60005C9")]
	[Address(RVA = "0xC424D0", Offset = "0xC424D0", VA = "0xC424D0")]
	public LTDescr setEaseInOutCubic()
	{
		return null;
	}

	[Token(Token = "0x60005CA")]
	[Address(RVA = "0xC42558", Offset = "0xC42558", VA = "0xC42558")]
	public LTDescr setEaseInQuart()
	{
		return null;
	}

	[Token(Token = "0x60005CB")]
	[Address(RVA = "0xC425E0", Offset = "0xC425E0", VA = "0xC425E0")]
	public LTDescr setEaseOutQuart()
	{
		return null;
	}

	[Token(Token = "0x60005CC")]
	[Address(RVA = "0xC42668", Offset = "0xC42668", VA = "0xC42668")]
	public LTDescr setEaseInOutQuart()
	{
		return null;
	}

	[Token(Token = "0x60005CD")]
	[Address(RVA = "0xC426F0", Offset = "0xC426F0", VA = "0xC426F0")]
	public LTDescr setEaseInQuint()
	{
		return null;
	}

	[Token(Token = "0x60005CE")]
	[Address(RVA = "0xC42778", Offset = "0xC42778", VA = "0xC42778")]
	public LTDescr setEaseOutQuint()
	{
		return null;
	}

	[Token(Token = "0x60005CF")]
	[Address(RVA = "0xC42800", Offset = "0xC42800", VA = "0xC42800")]
	public LTDescr setEaseInOutQuint()
	{
		return null;
	}

	[Token(Token = "0x60005D0")]
	[Address(RVA = "0xC42888", Offset = "0xC42888", VA = "0xC42888")]
	public LTDescr setEaseInSine()
	{
		return null;
	}

	[Token(Token = "0x60005D1")]
	[Address(RVA = "0xC42910", Offset = "0xC42910", VA = "0xC42910")]
	public LTDescr setEaseOutSine()
	{
		return null;
	}

	[Token(Token = "0x60005D2")]
	[Address(RVA = "0xC42998", Offset = "0xC42998", VA = "0xC42998")]
	public LTDescr setEaseInOutSine()
	{
		return null;
	}

	[Token(Token = "0x60005D3")]
	[Address(RVA = "0xC42A20", Offset = "0xC42A20", VA = "0xC42A20")]
	public LTDescr setEaseInExpo()
	{
		return null;
	}

	[Token(Token = "0x60005D4")]
	[Address(RVA = "0xC42AA8", Offset = "0xC42AA8", VA = "0xC42AA8")]
	public LTDescr setEaseOutExpo()
	{
		return null;
	}

	[Token(Token = "0x60005D5")]
	[Address(RVA = "0xC42B30", Offset = "0xC42B30", VA = "0xC42B30")]
	public LTDescr setEaseInOutExpo()
	{
		return null;
	}

	[Token(Token = "0x60005D6")]
	[Address(RVA = "0xC42BB8", Offset = "0xC42BB8", VA = "0xC42BB8")]
	public LTDescr setEaseInCirc()
	{
		return null;
	}

	[Token(Token = "0x60005D7")]
	[Address(RVA = "0xC42C40", Offset = "0xC42C40", VA = "0xC42C40")]
	public LTDescr setEaseOutCirc()
	{
		return null;
	}

	[Token(Token = "0x60005D8")]
	[Address(RVA = "0xC42CC8", Offset = "0xC42CC8", VA = "0xC42CC8")]
	public LTDescr setEaseInOutCirc()
	{
		return null;
	}

	[Token(Token = "0x60005D9")]
	[Address(RVA = "0xC42D50", Offset = "0xC42D50", VA = "0xC42D50")]
	public LTDescr setEaseInBounce()
	{
		return null;
	}

	[Token(Token = "0x60005DA")]
	[Address(RVA = "0xC42DD8", Offset = "0xC42DD8", VA = "0xC42DD8")]
	public LTDescr setEaseOutBounce()
	{
		return null;
	}

	[Token(Token = "0x60005DB")]
	[Address(RVA = "0xC42E60", Offset = "0xC42E60", VA = "0xC42E60")]
	public LTDescr setEaseInOutBounce()
	{
		return null;
	}

	[Token(Token = "0x60005DC")]
	[Address(RVA = "0xC42EE8", Offset = "0xC42EE8", VA = "0xC42EE8")]
	public LTDescr setEaseInBack()
	{
		return null;
	}

	[Token(Token = "0x60005DD")]
	[Address(RVA = "0xC42F70", Offset = "0xC42F70", VA = "0xC42F70")]
	public LTDescr setEaseOutBack()
	{
		return null;
	}

	[Token(Token = "0x60005DE")]
	[Address(RVA = "0xC42FF8", Offset = "0xC42FF8", VA = "0xC42FF8")]
	public LTDescr setEaseInOutBack()
	{
		return null;
	}

	[Token(Token = "0x60005DF")]
	[Address(RVA = "0xC43080", Offset = "0xC43080", VA = "0xC43080")]
	public LTDescr setEaseInElastic()
	{
		return null;
	}

	[Token(Token = "0x60005E0")]
	[Address(RVA = "0xC43108", Offset = "0xC43108", VA = "0xC43108")]
	public LTDescr setEaseOutElastic()
	{
		return null;
	}

	[Token(Token = "0x60005E1")]
	[Address(RVA = "0xC43190", Offset = "0xC43190", VA = "0xC43190")]
	public LTDescr setEaseInOutElastic()
	{
		return null;
	}

	[Token(Token = "0x60005E2")]
	[Address(RVA = "0xC43218", Offset = "0xC43218", VA = "0xC43218")]
	public LTDescr setEasePunch()
	{
		return null;
	}

	[Token(Token = "0x60005E3")]
	[Address(RVA = "0xC432E4", Offset = "0xC432E4", VA = "0xC432E4")]
	public LTDescr setEaseShake()
	{
		return null;
	}

	[Token(Token = "0x60005E4")]
	[Address(RVA = "0xC43438", Offset = "0xC43438", VA = "0xC43438")]
	private Vector3 tweenOnCurve()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005E5")]
	[Address(RVA = "0xC434F8", Offset = "0xC434F8", VA = "0xC434F8")]
	private Vector3 easeInOutQuad()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005E6")]
	[Address(RVA = "0xC4359C", Offset = "0xC4359C", VA = "0xC4359C")]
	private Vector3 easeInQuad()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005E7")]
	[Address(RVA = "0xC43614", Offset = "0xC43614", VA = "0xC43614")]
	private Vector3 easeOutQuad()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005E8")]
	[Address(RVA = "0xC43698", Offset = "0xC43698", VA = "0xC43698")]
	private Vector3 easeLinear()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005E9")]
	[Address(RVA = "0xC43710", Offset = "0xC43710", VA = "0xC43710")]
	private Vector3 easeSpring()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005EA")]
	[Address(RVA = "0xC4380C", Offset = "0xC4380C", VA = "0xC4380C")]
	private Vector3 easeInCubic()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005EB")]
	[Address(RVA = "0xC43888", Offset = "0xC43888", VA = "0xC43888")]
	private Vector3 easeOutCubic()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005EC")]
	[Address(RVA = "0xC43914", Offset = "0xC43914", VA = "0xC43914")]
	private Vector3 easeInOutCubic()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005ED")]
	[Address(RVA = "0xC439C0", Offset = "0xC439C0", VA = "0xC439C0")]
	private Vector3 easeInQuart()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005EE")]
	[Address(RVA = "0xC43A40", Offset = "0xC43A40", VA = "0xC43A40")]
	private Vector3 easeOutQuart()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005EF")]
	[Address(RVA = "0xC43AD0", Offset = "0xC43AD0", VA = "0xC43AD0")]
	private Vector3 easeInOutQuart()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005F0")]
	[Address(RVA = "0xC43BA4", Offset = "0xC43BA4", VA = "0xC43BA4")]
	private Vector3 easeInQuint()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005F1")]
	[Address(RVA = "0xC43C28", Offset = "0xC43C28", VA = "0xC43C28")]
	private Vector3 easeOutQuint()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005F2")]
	[Address(RVA = "0xC43CBC", Offset = "0xC43CBC", VA = "0xC43CBC")]
	private Vector3 easeInOutQuint()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005F3")]
	[Address(RVA = "0xC43D78", Offset = "0xC43D78", VA = "0xC43D78")]
	private Vector3 easeInSine()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005F4")]
	[Address(RVA = "0xC43E38", Offset = "0xC43E38", VA = "0xC43E38")]
	private Vector3 easeOutSine()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005F5")]
	[Address(RVA = "0xC43EEC", Offset = "0xC43EEC", VA = "0xC43EEC")]
	private Vector3 easeInOutSine()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005F6")]
	[Address(RVA = "0xC43F7C", Offset = "0xC43F7C", VA = "0xC43F7C")]
	private Vector3 easeInExpo()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005F7")]
	[Address(RVA = "0xC44004", Offset = "0xC44004", VA = "0xC44004")]
	private Vector3 easeOutExpo()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005F8")]
	[Address(RVA = "0xC4408C", Offset = "0xC4408C", VA = "0xC4408C")]
	private Vector3 easeInOutExpo()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005F9")]
	[Address(RVA = "0xC44158", Offset = "0xC44158", VA = "0xC44158")]
	private Vector3 easeInCirc()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005FA")]
	[Address(RVA = "0xC441E8", Offset = "0xC441E8", VA = "0xC441E8")]
	private Vector3 easeOutCirc()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005FB")]
	[Address(RVA = "0xC44274", Offset = "0xC44274", VA = "0xC44274")]
	private Vector3 easeInOutCirc()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005FC")]
	[Address(RVA = "0xC44344", Offset = "0xC44344", VA = "0xC44344")]
	private Vector3 easeInBounce()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005FD")]
	[Address(RVA = "0xC44470", Offset = "0xC44470", VA = "0xC44470")]
	private Vector3 easeOutBounce()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005FE")]
	[Address(RVA = "0xC445C0", Offset = "0xC445C0", VA = "0xC445C0")]
	private Vector3 easeInOutBounce()
	{
		return default(Vector3);
	}

	[Token(Token = "0x60005FF")]
	[Address(RVA = "0xC4479C", Offset = "0xC4479C", VA = "0xC4479C")]
	private Vector3 easeInBack()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000600")]
	[Address(RVA = "0xC44844", Offset = "0xC44844", VA = "0xC44844")]
	private Vector3 easeOutBack()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000601")]
	[Address(RVA = "0xC448EC", Offset = "0xC448EC", VA = "0xC448EC")]
	private Vector3 easeInOutBack()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000602")]
	[Address(RVA = "0xC449F0", Offset = "0xC449F0", VA = "0xC449F0")]
	private Vector3 easeInElastic()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000603")]
	[Address(RVA = "0xC44AD0", Offset = "0xC44AD0", VA = "0xC44AD0")]
	private Vector3 easeOutElastic()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000604")]
	[Address(RVA = "0xC44BB0", Offset = "0xC44BB0", VA = "0xC44BB0")]
	private Vector3 easeInOutElastic()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000605")]
	[Address(RVA = "0xC44C90", Offset = "0xC44C90", VA = "0xC44C90")]
	public LTDescr setOvershoot(float overshoot)
	{
		return null;
	}

	[Token(Token = "0x6000606")]
	[Address(RVA = "0xC44C98", Offset = "0xC44C98", VA = "0xC44C98")]
	public LTDescr setPeriod(float period)
	{
		return null;
	}

	[Token(Token = "0x6000607")]
	[Address(RVA = "0xC44CA0", Offset = "0xC44CA0", VA = "0xC44CA0")]
	public LTDescr setScale(float scale)
	{
		return null;
	}

	[Token(Token = "0x6000608")]
	[Address(RVA = "0xC44CA8", Offset = "0xC44CA8", VA = "0xC44CA8")]
	public LTDescr setEase(AnimationCurve easeCurve)
	{
		return null;
	}

	[Token(Token = "0x6000609")]
	[Address(RVA = "0xC44D40", Offset = "0xC44D40", VA = "0xC44D40")]
	public LTDescr setTo(Vector3 to)
	{
		return null;
	}

	[Token(Token = "0x600060A")]
	[Address(RVA = "0xC44D70", Offset = "0xC44D70", VA = "0xC44D70")]
	public LTDescr setTo(Transform to)
	{
		return null;
	}

	[Token(Token = "0x600060B")]
	[Address(RVA = "0xC44D8C", Offset = "0xC44D8C", VA = "0xC44D8C")]
	public LTDescr setFrom(Vector3 from)
	{
		return null;
	}

	[Token(Token = "0x600060C")]
	[Address(RVA = "0xC44E50", Offset = "0xC44E50", VA = "0xC44E50")]
	public LTDescr setFrom(float from)
	{
		return null;
	}

	[Token(Token = "0x600060D")]
	[Address(RVA = "0xC44E5C", Offset = "0xC44E5C", VA = "0xC44E5C")]
	public LTDescr setDiff(Vector3 diff)
	{
		return null;
	}

	[Token(Token = "0x600060E")]
	[Address(RVA = "0xC44E68", Offset = "0xC44E68", VA = "0xC44E68")]
	public LTDescr setHasInitialized(bool has)
	{
		return null;
	}

	[Token(Token = "0x600060F")]
	[Address(RVA = "0xC44E74", Offset = "0xC44E74", VA = "0xC44E74")]
	public LTDescr setId(uint id, uint global_counter)
	{
		return null;
	}

	[Token(Token = "0x6000610")]
	[Address(RVA = "0xC44E80", Offset = "0xC44E80", VA = "0xC44E80")]
	public LTDescr setPassed(float passed)
	{
		return null;
	}

	[Token(Token = "0x6000611")]
	[Address(RVA = "0xC44E88", Offset = "0xC44E88", VA = "0xC44E88")]
	public LTDescr setTime(float time)
	{
		return null;
	}

	[Token(Token = "0x6000612")]
	[Address(RVA = "0xC44EA4", Offset = "0xC44EA4", VA = "0xC44EA4")]
	public LTDescr setSpeed(float speed)
	{
		return null;
	}

	[Token(Token = "0x6000613")]
	[Address(RVA = "0xC44ECC", Offset = "0xC44ECC", VA = "0xC44ECC")]
	public LTDescr setRepeat(int repeat)
	{
		return null;
	}

	[Token(Token = "0x6000614")]
	[Address(RVA = "0xC44F1C", Offset = "0xC44F1C", VA = "0xC44F1C")]
	public LTDescr setLoopType(LeanTweenType loopType)
	{
		return null;
	}

	[Token(Token = "0x6000615")]
	[Address(RVA = "0xC44F24", Offset = "0xC44F24", VA = "0xC44F24")]
	public LTDescr setUseEstimatedTime(bool useEstimatedTime)
	{
		return null;
	}

	[Token(Token = "0x6000616")]
	[Address(RVA = "0xC44F34", Offset = "0xC44F34", VA = "0xC44F34")]
	public LTDescr setIgnoreTimeScale(bool useUnScaledTime)
	{
		return null;
	}

	[Token(Token = "0x6000617")]
	[Address(RVA = "0xC44F44", Offset = "0xC44F44", VA = "0xC44F44")]
	public LTDescr setUseFrames(bool useFrames)
	{
		return null;
	}

	[Token(Token = "0x6000618")]
	[Address(RVA = "0xC44F54", Offset = "0xC44F54", VA = "0xC44F54")]
	public LTDescr setUseManualTime(bool useManualTime)
	{
		return null;
	}

	[Token(Token = "0x6000619")]
	[Address(RVA = "0xC44F64", Offset = "0xC44F64", VA = "0xC44F64")]
	public LTDescr setLoopCount(int loopCount)
	{
		return null;
	}

	[Token(Token = "0x600061A")]
	[Address(RVA = "0xC44F74", Offset = "0xC44F74", VA = "0xC44F74")]
	public LTDescr setLoopOnce()
	{
		return null;
	}

	[Token(Token = "0x600061B")]
	[Address(RVA = "0xC44F80", Offset = "0xC44F80", VA = "0xC44F80")]
	public LTDescr setLoopClamp()
	{
		return null;
	}

	[Token(Token = "0x600061C")]
	[Address(RVA = "0xC44FA0", Offset = "0xC44FA0", VA = "0xC44FA0")]
	public LTDescr setLoopClamp(int loops)
	{
		return null;
	}

	[Token(Token = "0x600061D")]
	[Address(RVA = "0xC44FA8", Offset = "0xC44FA8", VA = "0xC44FA8")]
	public LTDescr setLoopPingPong()
	{
		return null;
	}

	[Token(Token = "0x600061E")]
	[Address(RVA = "0xC44FC8", Offset = "0xC44FC8", VA = "0xC44FC8")]
	public LTDescr setLoopPingPong(int loops)
	{
		return null;
	}

	[Token(Token = "0x600061F")]
	[Address(RVA = "0xC44FF4", Offset = "0xC44FF4", VA = "0xC44FF4")]
	public LTDescr setOnComplete(Action onComplete)
	{
		return null;
	}

	[Token(Token = "0x6000620")]
	[Address(RVA = "0xC45018", Offset = "0xC45018", VA = "0xC45018")]
	public LTDescr setOnComplete(Action<object> onComplete)
	{
		return null;
	}

	[Token(Token = "0x6000621")]
	[Address(RVA = "0xC4503C", Offset = "0xC4503C", VA = "0xC4503C")]
	public LTDescr setOnComplete(Action<object> onComplete, object onCompleteParam)
	{
		return null;
	}

	[Token(Token = "0x6000622")]
	[Address(RVA = "0xC45068", Offset = "0xC45068", VA = "0xC45068")]
	public LTDescr setOnCompleteParam(object onCompleteParam)
	{
		return null;
	}

	[Token(Token = "0x6000623")]
	[Address(RVA = "0xC4508C", Offset = "0xC4508C", VA = "0xC4508C")]
	public LTDescr setOnUpdate(Action<float> onUpdate)
	{
		return null;
	}

	[Token(Token = "0x6000624")]
	[Address(RVA = "0xC450B0", Offset = "0xC450B0", VA = "0xC450B0")]
	public LTDescr setOnUpdateRatio(Action<float, float> onUpdate)
	{
		return null;
	}

	[Token(Token = "0x6000625")]
	[Address(RVA = "0xC450D4", Offset = "0xC450D4", VA = "0xC450D4")]
	public LTDescr setOnUpdateObject(Action<float, object> onUpdate)
	{
		return null;
	}

	[Token(Token = "0x6000626")]
	[Address(RVA = "0xC450F8", Offset = "0xC450F8", VA = "0xC450F8")]
	public LTDescr setOnUpdateVector2(Action<Vector2> onUpdate)
	{
		return null;
	}

	[Token(Token = "0x6000627")]
	[Address(RVA = "0xC4511C", Offset = "0xC4511C", VA = "0xC4511C")]
	public LTDescr setOnUpdateVector3(Action<Vector3> onUpdate)
	{
		return null;
	}

	[Token(Token = "0x6000628")]
	[Address(RVA = "0xC45140", Offset = "0xC45140", VA = "0xC45140")]
	public LTDescr setOnUpdateColor(Action<Color> onUpdate)
	{
		return null;
	}

	[Token(Token = "0x6000629")]
	[Address(RVA = "0xC45164", Offset = "0xC45164", VA = "0xC45164")]
	public LTDescr setOnUpdateColor(Action<Color, object> onUpdate)
	{
		return null;
	}

	[Token(Token = "0x600062A")]
	[Address(RVA = "0xC45188", Offset = "0xC45188", VA = "0xC45188")]
	public LTDescr setOnUpdate(Action<Color> onUpdate)
	{
		return null;
	}

	[Token(Token = "0x600062B")]
	[Address(RVA = "0xC451AC", Offset = "0xC451AC", VA = "0xC451AC")]
	public LTDescr setOnUpdate(Action<Color, object> onUpdate)
	{
		return null;
	}

	[Token(Token = "0x600062C")]
	[Address(RVA = "0xC451D0", Offset = "0xC451D0", VA = "0xC451D0")]
	public LTDescr setOnUpdate(Action<float, object> onUpdate, [Optional] object onUpdateParam)
	{
		return null;
	}

	[Token(Token = "0x600062D")]
	[Address(RVA = "0xC451FC", Offset = "0xC451FC", VA = "0xC451FC")]
	public LTDescr setOnUpdate(Action<Vector3, object> onUpdate, [Optional] object onUpdateParam)
	{
		return null;
	}

	[Token(Token = "0x600062E")]
	[Address(RVA = "0xC45228", Offset = "0xC45228", VA = "0xC45228")]
	public LTDescr setOnUpdate(Action<Vector2> onUpdate, [Optional] object onUpdateParam)
	{
		return null;
	}

	[Token(Token = "0x600062F")]
	[Address(RVA = "0xC45254", Offset = "0xC45254", VA = "0xC45254")]
	public LTDescr setOnUpdate(Action<Vector3> onUpdate, [Optional] object onUpdateParam)
	{
		return null;
	}

	[Token(Token = "0x6000630")]
	[Address(RVA = "0xC45280", Offset = "0xC45280", VA = "0xC45280")]
	public LTDescr setOnUpdateParam(object onUpdateParam)
	{
		return null;
	}

	[Token(Token = "0x6000631")]
	[Address(RVA = "0xC4529C", Offset = "0xC4529C", VA = "0xC4529C")]
	public LTDescr setOrientToPath(bool doesOrient)
	{
		return null;
	}

	[Token(Token = "0x6000632")]
	[Address(RVA = "0xC4535C", Offset = "0xC4535C", VA = "0xC4535C")]
	public LTDescr setOrientToPath2d(bool doesOrient2d)
	{
		return null;
	}

	[Token(Token = "0x6000633")]
	[Address(RVA = "0xC453B4", Offset = "0xC453B4", VA = "0xC453B4")]
	public LTDescr setRect(LTRect rect)
	{
		return null;
	}

	[Token(Token = "0x6000634")]
	[Address(RVA = "0xC453D0", Offset = "0xC453D0", VA = "0xC453D0")]
	public LTDescr setRect(Rect rect)
	{
		return null;
	}

	[Token(Token = "0x6000635")]
	[Address(RVA = "0xC45468", Offset = "0xC45468", VA = "0xC45468")]
	public LTDescr setPath(LTBezierPath path)
	{
		return null;
	}

	[Token(Token = "0x6000636")]
	[Address(RVA = "0xC45484", Offset = "0xC45484", VA = "0xC45484")]
	public LTDescr setPoint(Vector3 point)
	{
		return null;
	}

	[Token(Token = "0x6000637")]
	[Address(RVA = "0xC454A4", Offset = "0xC454A4", VA = "0xC454A4")]
	public LTDescr setDestroyOnComplete(bool doesDestroy)
	{
		return null;
	}

	[Token(Token = "0x6000638")]
	[Address(RVA = "0xC454B0", Offset = "0xC454B0", VA = "0xC454B0")]
	public LTDescr setAudio(object audio)
	{
		return null;
	}

	[Token(Token = "0x6000639")]
	[Address(RVA = "0xC44F10", Offset = "0xC44F10", VA = "0xC44F10")]
	public LTDescr setOnCompleteOnRepeat(bool isOn)
	{
		return null;
	}

	[Token(Token = "0x600063A")]
	[Address(RVA = "0xC454CC", Offset = "0xC454CC", VA = "0xC454CC")]
	public LTDescr setOnCompleteOnStart(bool isOn)
	{
		return null;
	}

	[Token(Token = "0x600063B")]
	[Address(RVA = "0xC454D8", Offset = "0xC454D8", VA = "0xC454D8")]
	public LTDescr setRect(RectTransform rect)
	{
		return null;
	}

	[Token(Token = "0x600063C")]
	[Address(RVA = "0xC454E0", Offset = "0xC454E0", VA = "0xC454E0")]
	public LTDescr setSprites(Sprite[] sprites)
	{
		return null;
	}

	[Token(Token = "0x600063D")]
	[Address(RVA = "0xC454E8", Offset = "0xC454E8", VA = "0xC454E8")]
	public LTDescr setFrameRate(float frameRate)
	{
		return null;
	}

	[Token(Token = "0x600063E")]
	[Address(RVA = "0xC45510", Offset = "0xC45510", VA = "0xC45510")]
	public LTDescr setOnStart(Action onStart)
	{
		return null;
	}

	[Token(Token = "0x600063F")]
	[Address(RVA = "0xC4552C", Offset = "0xC4552C", VA = "0xC4552C")]
	public LTDescr setDirection(float direction)
	{
		return null;
	}

	[Token(Token = "0x6000640")]
	[Address(RVA = "0xC456F4", Offset = "0xC456F4", VA = "0xC456F4")]
	public LTDescr setRecursive(bool useRecursion)
	{
		return null;
	}
}
[Token(Token = "0x200009F")]
public class LTDescrOptional
{
	[Token(Token = "0x4000326")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public AnimationCurve animationCurve;

	[Token(Token = "0x4000327")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public int initFrameCount;

	[Token(Token = "0x4000328")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public Color color;

	[Token(Token = "0x17000039")]
	public Transform toTrans
	{
		[Token(Token = "0x60006A7")]
		[Address(RVA = "0xC4AB94", Offset = "0xC4AB94", VA = "0xC4AB94")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60006A8")]
		[Address(RVA = "0xC4AB9C", Offset = "0xC4AB9C", VA = "0xC4AB9C")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700003A")]
	public Vector3 point
	{
		[Token(Token = "0x60006A9")]
		[Address(RVA = "0xC4ABA4", Offset = "0xC4ABA4", VA = "0xC4ABA4")]
		[CompilerGenerated]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x60006AA")]
		[Address(RVA = "0xC4ABB0", Offset = "0xC4ABB0", VA = "0xC4ABB0")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700003B")]
	public Vector3 axis
	{
		[Token(Token = "0x60006AB")]
		[Address(RVA = "0xC4ABBC", Offset = "0xC4ABBC", VA = "0xC4ABBC")]
		[CompilerGenerated]
		get
		{
			return default(Vector3);
		}
		[Token(Token = "0x60006AC")]
		[Address(RVA = "0xC4ABC8", Offset = "0xC4ABC8", VA = "0xC4ABC8")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700003C")]
	public float lastVal
	{
		[Token(Token = "0x60006AD")]
		[Address(RVA = "0xC4ABD4", Offset = "0xC4ABD4", VA = "0xC4ABD4")]
		[CompilerGenerated]
		get
		{
			return default(float);
		}
		[Token(Token = "0x60006AE")]
		[Address(RVA = "0xC4ABDC", Offset = "0xC4ABDC", VA = "0xC4ABDC")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700003D")]
	public Quaternion origRotation
	{
		[Token(Token = "0x60006AF")]
		[Address(RVA = "0xC4ABE4", Offset = "0xC4ABE4", VA = "0xC4ABE4")]
		[CompilerGenerated]
		get
		{
			return default(Quaternion);
		}
		[Token(Token = "0x60006B0")]
		[Address(RVA = "0xC4ABF0", Offset = "0xC4ABF0", VA = "0xC4ABF0")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700003E")]
	public LTBezierPath path
	{
		[Token(Token = "0x60006B1")]
		[Address(RVA = "0xC4ABFC", Offset = "0xC4ABFC", VA = "0xC4ABFC")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60006B2")]
		[Address(RVA = "0xC4AC04", Offset = "0xC4AC04", VA = "0xC4AC04")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700003F")]
	public LTSpline spline
	{
		[Token(Token = "0x60006B3")]
		[Address(RVA = "0xC4AC0C", Offset = "0xC4AC0C", VA = "0xC4AC0C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60006B4")]
		[Address(RVA = "0xC4AC14", Offset = "0xC4AC14", VA = "0xC4AC14")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000040")]
	public LTRect ltRect
	{
		[Token(Token = "0x60006B5")]
		[Address(RVA = "0xC4AC1C", Offset = "0xC4AC1C", VA = "0xC4AC1C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60006B6")]
		[Address(RVA = "0xC4AC24", Offset = "0xC4AC24", VA = "0xC4AC24")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000041")]
	public Action<float> onUpdateFloat
	{
		[Token(Token = "0x60006B7")]
		[Address(RVA = "0xC4AC2C", Offset = "0xC4AC2C", VA = "0xC4AC2C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60006B8")]
		[Address(RVA = "0xC4AC34", Offset = "0xC4AC34", VA = "0xC4AC34")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000042")]
	public Action<float, float> onUpdateFloatRatio
	{
		[Token(Token = "0x60006B9")]
		[Address(RVA = "0xC4AC3C", Offset = "0xC4AC3C", VA = "0xC4AC3C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60006BA")]
		[Address(RVA = "0xC4AC44", Offset = "0xC4AC44", VA = "0xC4AC44")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000043")]
	public Action<float, object> onUpdateFloatObject
	{
		[Token(Token = "0x60006BB")]
		[Address(RVA = "0xC4AC4C", Offset = "0xC4AC4C", VA = "0xC4AC4C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60006BC")]
		[Address(RVA = "0xC4AC54", Offset = "0xC4AC54", VA = "0xC4AC54")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000044")]
	public Action<Vector2> onUpdateVector2
	{
		[Token(Token = "0x60006BD")]
		[Address(RVA = "0xC4AC5C", Offset = "0xC4AC5C", VA = "0xC4AC5C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60006BE")]
		[Address(RVA = "0xC4AC64", Offset = "0xC4AC64", VA = "0xC4AC64")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000045")]
	public Action<Vector3> onUpdateVector3
	{
		[Token(Token = "0x60006BF")]
		[Address(RVA = "0xC4AC6C", Offset = "0xC4AC6C", VA = "0xC4AC6C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60006C0")]
		[Address(RVA = "0xC4AC74", Offset = "0xC4AC74", VA = "0xC4AC74")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000046")]
	public Action<Vector3, object> onUpdateVector3Object
	{
		[Token(Token = "0x60006C1")]
		[Address(RVA = "0xC4AC7C", Offset = "0xC4AC7C", VA = "0xC4AC7C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60006C2")]
		[Address(RVA = "0xC4AC84", Offset = "0xC4AC84", VA = "0xC4AC84")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000047")]
	public Action<Color> onUpdateColor
	{
		[Token(Token = "0x60006C3")]
		[Address(RVA = "0xC4AC8C", Offset = "0xC4AC8C", VA = "0xC4AC8C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60006C4")]
		[Address(RVA = "0xC4AC94", Offset = "0xC4AC94", VA = "0xC4AC94")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000048")]
	public Action<Color, object> onUpdateColorObject
	{
		[Token(Token = "0x60006C5")]
		[Address(RVA = "0xC4AC9C", Offset = "0xC4AC9C", VA = "0xC4AC9C")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60006C6")]
		[Address(RVA = "0xC4ACA4", Offset = "0xC4ACA4", VA = "0xC4ACA4")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x17000049")]
	public Action onComplete
	{
		[Token(Token = "0x60006C7")]
		[Address(RVA = "0xC4ACAC", Offset = "0xC4ACAC", VA = "0xC4ACAC")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60006C8")]
		[Address(RVA = "0xC4ACB4", Offset = "0xC4ACB4", VA = "0xC4ACB4")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700004A")]
	public Action<object> onCompleteObject
	{
		[Token(Token = "0x60006C9")]
		[Address(RVA = "0xC4ACBC", Offset = "0xC4ACBC", VA = "0xC4ACBC")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60006CA")]
		[Address(RVA = "0xC4ACC4", Offset = "0xC4ACC4", VA = "0xC4ACC4")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700004B")]
	public object onCompleteParam
	{
		[Token(Token = "0x60006CB")]
		[Address(RVA = "0xC4ACCC", Offset = "0xC4ACCC", VA = "0xC4ACCC")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60006CC")]
		[Address(RVA = "0xC4ACD4", Offset = "0xC4ACD4", VA = "0xC4ACD4")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700004C")]
	public object onUpdateParam
	{
		[Token(Token = "0x60006CD")]
		[Address(RVA = "0xC4ACDC", Offset = "0xC4ACDC", VA = "0xC4ACDC")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60006CE")]
		[Address(RVA = "0xC4ACE4", Offset = "0xC4ACE4", VA = "0xC4ACE4")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x1700004D")]
	public Action onStart
	{
		[Token(Token = "0x60006CF")]
		[Address(RVA = "0xC4ACEC", Offset = "0xC4ACEC", VA = "0xC4ACEC")]
		[CompilerGenerated]
		get
		{
			return null;
		}
		[Token(Token = "0x60006D0")]
		[Address(RVA = "0xC4ACF4", Offset = "0xC4ACF4", VA = "0xC4ACF4")]
		[CompilerGenerated]
		set
		{
		}
	}

	[Token(Token = "0x60006D1")]
	[Address(RVA = "0xC4ACFC", Offset = "0xC4ACFC", VA = "0xC4ACFC")]
	public void reset()
	{
	}

	[Token(Token = "0x60006D2")]
	[Address(RVA = "0xC4AD78", Offset = "0xC4AD78", VA = "0xC4AD78")]
	public void callOnUpdate(float val, float ratioPassed)
	{
	}

	[Token(Token = "0x60006D3")]
	[Address(RVA = "0xC4AECC", Offset = "0xC4AECC", VA = "0xC4AECC")]
	public LTDescrOptional()
	{
	}
}
[Token(Token = "0x20000A0")]
public class LTSeq
{
	[Token(Token = "0x4000337")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	public LTSeq previous;

	[Token(Token = "0x4000338")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LTSeq current;

	[Token(Token = "0x4000339")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LTDescr tween;

	[Token(Token = "0x400033A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float totalDelay;

	[Token(Token = "0x400033B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float timeScale;

	[Token(Token = "0x400033C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int debugIter;

	[Token(Token = "0x400033D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public uint counter;

	[Token(Token = "0x400033E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool toggle;

	[Token(Token = "0x400033F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private uint _id;

	[Token(Token = "0x1700004E")]
	public int id
	{
		[Token(Token = "0x60006D4")]
		[Address(RVA = "0xC4AED4", Offset = "0xC4AED4", VA = "0xC4AED4")]
		get
		{
			return default(int);
		}
	}

	[Token(Token = "0x60006D5")]
	[Address(RVA = "0xC4AEE4", Offset = "0xC4AEE4", VA = "0xC4AEE4")]
	public void reset()
	{
	}

	[Token(Token = "0x60006D6")]
	[Address(RVA = "0xC4AEF4", Offset = "0xC4AEF4", VA = "0xC4AEF4")]
	public void init(uint id, uint global_counter)
	{
	}

	[Token(Token = "0x60006D7")]
	[Address(RVA = "0xC4AF0C", Offset = "0xC4AF0C", VA = "0xC4AF0C")]
	private LTSeq addOn()
	{
		return null;
	}

	[Token(Token = "0x60006D8")]
	[Address(RVA = "0xC4AFA0", Offset = "0xC4AFA0", VA = "0xC4AFA0")]
	private float addPreviousDelays()
	{
		return default(float);
	}

	[Token(Token = "0x60006D9")]
	[Address(RVA = "0xC4AFDC", Offset = "0xC4AFDC", VA = "0xC4AFDC")]
	public LTSeq append(float delay)
	{
		return null;
	}

	[Token(Token = "0x60006DA")]
	[Address(RVA = "0xC4B000", Offset = "0xC4B000", VA = "0xC4B000")]
	public LTSeq append(Action callback)
	{
		return null;
	}

	[Token(Token = "0x60006DB")]
	[Address(RVA = "0xC4B0C8", Offset = "0xC4B0C8", VA = "0xC4B0C8")]
	public LTSeq append(Action<object> callback, object obj)
	{
		return null;
	}

	[Token(Token = "0x60006DC")]
	[Address(RVA = "0xC4B15C", Offset = "0xC4B15C", VA = "0xC4B15C")]
	public LTSeq append(GameObject gameObject, Action callback)
	{
		return null;
	}

	[Token(Token = "0x60006DD")]
	[Address(RVA = "0xC4B1E0", Offset = "0xC4B1E0", VA = "0xC4B1E0")]
	public LTSeq append(GameObject gameObject, Action<object> callback, object obj)
	{
		return null;
	}

	[Token(Token = "0x60006DE")]
	[Address(RVA = "0xC4B074", Offset = "0xC4B074", VA = "0xC4B074")]
	public LTSeq append(LTDescr tween)
	{
		return null;
	}

	[Token(Token = "0x60006DF")]
	[Address(RVA = "0xC4B284", Offset = "0xC4B284", VA = "0xC4B284")]
	public LTSeq insert(LTDescr tween)
	{
		return null;
	}

	[Token(Token = "0x60006E0")]
	[Address(RVA = "0xC4B2C8", Offset = "0xC4B2C8", VA = "0xC4B2C8")]
	public LTSeq setScale(float timeScale)
	{
		return null;
	}

	[Token(Token = "0x60006E1")]
	[Address(RVA = "0xC4B2E8", Offset = "0xC4B2E8", VA = "0xC4B2E8")]
	private void setScaleRecursive(LTSeq seq, float timeScale, int count)
	{
	}

	[Token(Token = "0x60006E2")]
	[Address(RVA = "0xC4B37C", Offset = "0xC4B37C", VA = "0xC4B37C")]
	public LTSeq reverse()
	{
		return null;
	}

	[Token(Token = "0x60006E3")]
	[Address(RVA = "0xC4B380", Offset = "0xC4B380", VA = "0xC4B380")]
	public LTSeq()
	{
	}
}
[Token(Token = "0x20000A1")]
[ExecuteInEditMode]
public class ListMeshVertCount : MonoBehaviour
{
	[Token(Token = "0x4000340")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool includeInActive;

	[Token(Token = "0x4000341")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool listVertCount;

	[Token(Token = "0x60006E4")]
	[Address(RVA = "0xC4B388", Offset = "0xC4B388", VA = "0xC4B388")]
	private void Update()
	{
	}

	[Token(Token = "0x60006E5")]
	[Address(RVA = "0xC4B39C", Offset = "0xC4B39C", VA = "0xC4B39C")]
	private void ListVertCount()
	{
	}

	[Token(Token = "0x60006E6")]
	[Address(RVA = "0xC4B678", Offset = "0xC4B678", VA = "0xC4B678")]
	public ListMeshVertCount()
	{
	}
}
[Token(Token = "0x20000A2")]
[ExecuteInEditMode]
public class RaycastTest : MonoBehaviour
{
	[Token(Token = "0x4000342")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public MeshRenderer mr;

	[Token(Token = "0x4000343")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Collider collider;

	[Token(Token = "0x4000344")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public LayerMask layerMask;

	[Token(Token = "0x4000345")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool createTriangle;

	[Token(Token = "0x4000346")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int triangleIndex;

	[Token(Token = "0x4000347")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private RaycastHit hitInfo;

	[Token(Token = "0x4000348")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool step2;

	[Token(Token = "0x4000349")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	public bool drawTriangle;

	[Token(Token = "0x60006E7")]
	[Address(RVA = "0xC4B680", Offset = "0xC4B680", VA = "0xC4B680")]
	private void Update()
	{
	}

	[Token(Token = "0x60006E8")]
	[Address(RVA = "0xC4B694", Offset = "0xC4B694", VA = "0xC4B694")]
	private void CreateTriangle()
	{
	}

	[Token(Token = "0x60006E9")]
	private void Swap<T>(ref T v1, ref T v2)
	{
	}

	[Token(Token = "0x60006EA")]
	[Address(RVA = "0xC4B890", Offset = "0xC4B890", VA = "0xC4B890")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x60006EB")]
	[Address(RVA = "0xC4BC04", Offset = "0xC4BC04", VA = "0xC4BC04")]
	public RaycastTest()
	{
	}
}
[Token(Token = "0x20000A3")]
public struct TriangleTest
{
	[Token(Token = "0x400034A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public Vector3 a;

	[Token(Token = "0x400034B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
	public Vector3 b;

	[Token(Token = "0x400034C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 c;

	[Token(Token = "0x400034D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 dirAb;

	[Token(Token = "0x400034E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 dirAc;

	[Token(Token = "0x400034F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Vector3 dirBc;

	[Token(Token = "0x4000350")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector3 h1;

	[Token(Token = "0x4000351")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float ab;

	[Token(Token = "0x4000352")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float ac;

	[Token(Token = "0x4000353")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float bc;

	[Token(Token = "0x4000354")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float area;

	[Token(Token = "0x4000355")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float h;

	[Token(Token = "0x4000356")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float ah;

	[Token(Token = "0x4000357")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float hb;

	[Token(Token = "0x60006EC")]
	[Address(RVA = "0xC4BC0C", Offset = "0xC4BC0C", VA = "0xC4BC0C")]
	public void Calc()
	{
	}

	[Token(Token = "0x60006ED")]
	private void Swap<T>(ref T v1, ref T v2)
	{
	}
}
[Token(Token = "0x20000A4")]
public class VisualizeMesh : MonoBehaviour
{
	[Token(Token = "0x4000358")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float sphereRadius;

	[Token(Token = "0x4000359")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private MeshFilter mf;

	[Token(Token = "0x400035A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Mesh m;

	[Token(Token = "0x60006EE")]
	[Address(RVA = "0xC4C034", Offset = "0xC4C034", VA = "0xC4C034")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60006EF")]
	[Address(RVA = "0xC4C3D0", Offset = "0xC4C3D0", VA = "0xC4C3D0")]
	public VisualizeMesh()
	{
	}
}
[Token(Token = "0x20000A5")]
[ExecuteInEditMode]
public class EnableChildrenMeshRenderers : MonoBehaviour
{
	[Token(Token = "0x400035B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool execute;

	[Token(Token = "0x60006F0")]
	[Address(RVA = "0xC4C3E4", Offset = "0xC4C3E4", VA = "0xC4C3E4")]
	private void Update()
	{
	}

	[Token(Token = "0x60006F1")]
	[Address(RVA = "0xC4C3F8", Offset = "0xC4C3F8", VA = "0xC4C3F8")]
	private void Execute()
	{
	}

	[Token(Token = "0x60006F2")]
	[Address(RVA = "0xC4C494", Offset = "0xC4C494", VA = "0xC4C494")]
	public EnableChildrenMeshRenderers()
	{
	}
}
[Token(Token = "0x20000A6")]
public class ShadowDistance : MonoBehaviour
{
	[Token(Token = "0x400035C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float shadowDistance;

	[Token(Token = "0x60006F3")]
	[Address(RVA = "0xC4C49C", Offset = "0xC4C49C", VA = "0xC4C49C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60006F4")]
	[Address(RVA = "0xC4C4A8", Offset = "0xC4C4A8", VA = "0xC4C4A8")]
	public ShadowDistance()
	{
	}
}
[Token(Token = "0x20000A7")]
[AddComponentMenu("VacuumShaders/Terrain To Mesh/Example/Runtime Converter")]
public class RunTime_Terrain_Convertion : MonoBehaviour
{
	[Token(Token = "0x400035D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Terrain sourceTerrain;

	[Token(Token = "0x400035E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public TerrainConvertInfo convertInfo;

	[Token(Token = "0x400035F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool generateBasemap;

	[Token(Token = "0x4000360")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool attachMeshCollider;

	[Token(Token = "0x60006F5")]
	[Address(RVA = "0xC4C4B8", Offset = "0xC4C4B8", VA = "0xC4C4B8")]
	private void Start()
	{
	}

	[Token(Token = "0x60006F6")]
	[Address(RVA = "0xC4C8FC", Offset = "0xC4C8FC", VA = "0xC4C8FC")]
	private Material GenerateMaterial_Basemap()
	{
		return null;
	}

	[Token(Token = "0x60006F7")]
	[Address(RVA = "0xC4CC28", Offset = "0xC4CC28", VA = "0xC4CC28")]
	private Material GenerateMaterial_Splatmap()
	{
		return null;
	}

	[Token(Token = "0x60006F8")]
	[Address(RVA = "0xC4D48C", Offset = "0xC4D48C", VA = "0xC4D48C")]
	public RunTime_Terrain_Convertion()
	{
	}
}
[Token(Token = "0x20000A8")]
public static class MaterialModifier
{
	[Token(Token = "0x20000A9")]
	public interface Interface
	{
		[Token(Token = "0x60006F9")]
		void SetMaterialProp(int nameID, float value);

		[Token(Token = "0x60006FA")]
		void SetMaterialProp(int nameID, Vector4 value);

		[Token(Token = "0x60006FB")]
		void SetMaterialProp(int nameID, Color value);

		[Token(Token = "0x60006FC")]
		void SetMaterialProp(int nameID, Matrix4x4 value);

		[Token(Token = "0x60006FD")]
		void SetMaterialProp(int nameID, Texture value);
	}

	[Token(Token = "0x20000AA")]
	public delegate void Callback(Interface owner);
}
[Token(Token = "0x20000AB")]
public class FontainDistance : MonoBehaviour
{
	[Token(Token = "0x4000361")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] HQ_GO;

	[Token(Token = "0x4000362")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] LQ_GO;

	[Token(Token = "0x6000702")]
	[Address(RVA = "0xC4D600", Offset = "0xC4D600", VA = "0xC4D600")]
	private void Start()
	{
	}

	[Token(Token = "0x6000703")]
	[Address(RVA = "0xC4D6AC", Offset = "0xC4D6AC", VA = "0xC4D6AC")]
	private void OnTriggerEnter(Collider other)
	{
	}

	[Token(Token = "0x6000704")]
	[Address(RVA = "0xC4D6B0", Offset = "0xC4D6B0", VA = "0xC4D6B0")]
	private void OnTriggerExit(Collider other)
	{
	}

	[Token(Token = "0x6000705")]
	[Address(RVA = "0xC4D6B4", Offset = "0xC4D6B4", VA = "0xC4D6B4")]
	public FontainDistance()
	{
	}
}
[Token(Token = "0x20000AC")]
public class RandomMaterial : MonoBehaviour
{
	[Token(Token = "0x4000363")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Renderer targetRenderer;

	[Token(Token = "0x4000364")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material[] materials;

	[Token(Token = "0x6000706")]
	[Address(RVA = "0xC4D6BC", Offset = "0xC4D6BC", VA = "0xC4D6BC")]
	public void Start()
	{
	}

	[Token(Token = "0x6000707")]
	[Address(RVA = "0xC4D6C0", Offset = "0xC4D6C0", VA = "0xC4D6C0")]
	public void ChangeMaterial()
	{
	}

	[Token(Token = "0x6000708")]
	[Address(RVA = "0xC4D718", Offset = "0xC4D718", VA = "0xC4D718")]
	public RandomMaterial()
	{
	}
}
[Token(Token = "0x20000AD")]
public class UnluckDistanceDisabler : MonoBehaviour
{
	[Token(Token = "0x4000365")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int _distanceDisable;

	[Token(Token = "0x4000366")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform _distanceFrom;

	[Token(Token = "0x4000367")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool _distanceFromMainCam;

	[Token(Token = "0x4000368")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float _disableCheckInterval;

	[Token(Token = "0x4000369")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float _enableCheckInterval;

	[Token(Token = "0x400036A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool _disableOnStart;

	[Token(Token = "0x6000709")]
	[Address(RVA = "0xC4D720", Offset = "0xC4D720", VA = "0xC4D720")]
	public void Start()
	{
	}

	[Token(Token = "0x600070A")]
	[Address(RVA = "0xC4D820", Offset = "0xC4D820", VA = "0xC4D820")]
	public void DisableOnStart()
	{
	}

	[Token(Token = "0x600070B")]
	[Address(RVA = "0xC4D854", Offset = "0xC4D854", VA = "0xC4D854")]
	public void CheckDisable()
	{
	}

	[Token(Token = "0x600070C")]
	[Address(RVA = "0xC4D920", Offset = "0xC4D920", VA = "0xC4D920")]
	public void CheckEnable()
	{
	}

	[Token(Token = "0x600070D")]
	[Address(RVA = "0xC4D9EC", Offset = "0xC4D9EC", VA = "0xC4D9EC")]
	public UnluckDistanceDisabler()
	{
	}
}
[Token(Token = "0x20000AE")]
public class LookAtCamera : MonoBehaviour
{
	[Token(Token = "0x400036B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Camera lookAtCamera;

	[Token(Token = "0x400036C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool lookOnlyOnAwake;

	[Token(Token = "0x600070E")]
	[Address(RVA = "0xC4DA08", Offset = "0xC4DA08", VA = "0xC4DA08")]
	public void Start()
	{
	}

	[Token(Token = "0x600070F")]
	[Address(RVA = "0xC4DAD8", Offset = "0xC4DAD8", VA = "0xC4DAD8")]
	public void Update()
	{
	}

	[Token(Token = "0x6000710")]
	[Address(RVA = "0xC4DA94", Offset = "0xC4DA94", VA = "0xC4DA94")]
	public void LookCam()
	{
	}

	[Token(Token = "0x6000711")]
	[Address(RVA = "0xC4DAE8", Offset = "0xC4DAE8", VA = "0xC4DAE8")]
	public LookAtCamera()
	{
	}
}
[Token(Token = "0x20000AF")]
[AddComponentMenu("Camera-Control/Smooth Mouse Orbit - Unluck Software")]
public class SmoothCameraOrbit : MonoBehaviour
{
	[Token(Token = "0x400036D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x400036E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector3 targetOffset;

	[Token(Token = "0x400036F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float distance;

	[Token(Token = "0x4000370")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float maxDistance;

	[Token(Token = "0x4000371")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float minDistance;

	[Token(Token = "0x4000372")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float xSpeed;

	[Token(Token = "0x4000373")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float ySpeed;

	[Token(Token = "0x4000374")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public int yMinLimit;

	[Token(Token = "0x4000375")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public int yMaxLimit;

	[Token(Token = "0x4000376")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public int zoomRate;

	[Token(Token = "0x4000377")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float panSpeed;

	[Token(Token = "0x4000378")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float zoomDampening;

	[Token(Token = "0x4000379")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float autoRotate;

	[Token(Token = "0x400037A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float autoRotateSpeed;

	[Token(Token = "0x400037B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float xDeg;

	[Token(Token = "0x400037C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float yDeg;

	[Token(Token = "0x400037D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float currentDistance;

	[Token(Token = "0x400037E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float desiredDistance;

	[Token(Token = "0x400037F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private Quaternion currentRotation;

	[Token(Token = "0x4000380")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private Quaternion desiredRotation;

	[Token(Token = "0x4000381")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private Quaternion rotation;

	[Token(Token = "0x4000382")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private Vector3 position;

	[Token(Token = "0x4000383")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float idleTimer;

	[Token(Token = "0x4000384")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private float idleSmooth;

	[Token(Token = "0x6000712")]
	[Address(RVA = "0xC4DAF0", Offset = "0xC4DAF0", VA = "0xC4DAF0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000713")]
	[Address(RVA = "0xC4DFDC", Offset = "0xC4DFDC", VA = "0xC4DFDC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000714")]
	[Address(RVA = "0xC4DAF4", Offset = "0xC4DAF4", VA = "0xC4DAF4")]
	public void Init()
	{
	}

	[Token(Token = "0x6000715")]
	[Address(RVA = "0xC4DFE0", Offset = "0xC4DFE0", VA = "0xC4DFE0")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000716")]
	[Address(RVA = "0xC4E4B8", Offset = "0xC4E4B8", VA = "0xC4E4B8")]
	private static float ClampAngle(float angle, float min, float max)
	{
		return default(float);
	}

	[Token(Token = "0x6000717")]
	[Address(RVA = "0xC4E4F4", Offset = "0xC4E4F4", VA = "0xC4E4F4")]
	public SmoothCameraOrbit()
	{
	}
}
[Token(Token = "0x20000B0")]
public class FlockChild : MonoBehaviour
{
	[Token(Token = "0x4000385")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public FlockController _spawner;

	[Token(Token = "0x4000386")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public Vector3 _wayPoint;

	[Token(Token = "0x4000387")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float _speed;

	[Token(Token = "0x4000388")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public bool _dived;

	[Token(Token = "0x4000389")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[HideInInspector]
	public float _stuckCounter;

	[Token(Token = "0x400038A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[HideInInspector]
	public float _damping;

	[Token(Token = "0x400038B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[HideInInspector]
	public bool _soar;

	[Token(Token = "0x400038C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
	[HideInInspector]
	public bool _landing;

	[Token(Token = "0x400038D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public float _targetSpeed;

	[Token(Token = "0x400038E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	[HideInInspector]
	public bool _move;

	[Token(Token = "0x400038F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject _model;

	[Token(Token = "0x4000390")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform _modelT;

	[Token(Token = "0x4000391")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[HideInInspector]
	public float _avoidValue;

	[Token(Token = "0x4000392")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	[HideInInspector]
	public float _avoidDistance;

	[Token(Token = "0x4000393")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float _soarTimer;

	[Token(Token = "0x4000394")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private bool _instantiated;

	[Token(Token = "0x4000395")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int _updateNextSeed;

	[Token(Token = "0x4000396")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private int _updateSeed;

	[Token(Token = "0x4000397")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[HideInInspector]
	public bool _avoid;

	[Token(Token = "0x4000398")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Transform _thisT;

	[Token(Token = "0x4000399")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Vector3 _landingPosOffset;

	[Token(Token = "0x6000718")]
	[Address(RVA = "0xC4E530", Offset = "0xC4E530", VA = "0xC4E530")]
	public void Start()
	{
	}

	[Token(Token = "0x6000719")]
	[Address(RVA = "0xC4EC28", Offset = "0xC4EC28", VA = "0xC4EC28")]
	public void Update()
	{
	}

	[Token(Token = "0x600071A")]
	[Address(RVA = "0xC4F338", Offset = "0xC4F338", VA = "0xC4F338")]
	public void OnDisable()
	{
	}

	[Token(Token = "0x600071B")]
	[Address(RVA = "0xC4F36C", Offset = "0xC4F36C", VA = "0xC4F36C")]
	public void OnEnable()
	{
	}

	[Token(Token = "0x600071C")]
	[Address(RVA = "0xC4E614", Offset = "0xC4E614", VA = "0xC4E614")]
	public void FindRequiredComponents()
	{
	}

	[Token(Token = "0x600071D")]
	[Address(RVA = "0xC4E8D0", Offset = "0xC4E8D0", VA = "0xC4E8D0")]
	public void RandomizeStartAnimationFrame()
	{
	}

	[Token(Token = "0x600071E")]
	[Address(RVA = "0xC4EBD4", Offset = "0xC4EBD4", VA = "0xC4EBD4")]
	public void InitAvoidanceValues()
	{
	}

	[Token(Token = "0x600071F")]
	[Address(RVA = "0xC4E7D4", Offset = "0xC4E7D4", VA = "0xC4E7D4")]
	public void SetRandomScale()
	{
	}

	[Token(Token = "0x6000720")]
	[Address(RVA = "0xC4EC84", Offset = "0xC4EC84", VA = "0xC4EC84")]
	public void SoarTimeLimit()
	{
	}

	[Token(Token = "0x6000721")]
	[Address(RVA = "0xC4ECDC", Offset = "0xC4ECDC", VA = "0xC4ECDC")]
	public void CheckForDistanceToWaypoint()
	{
	}

	[Token(Token = "0x6000722")]
	[Address(RVA = "0xC4EDEC", Offset = "0xC4EDEC", VA = "0xC4EDEC")]
	public void RotationBasedOnWaypointOrAvoidance()
	{
	}

	[Token(Token = "0x6000723")]
	[Address(RVA = "0xC4F65C", Offset = "0xC4F65C", VA = "0xC4F65C")]
	public bool Avoidance()
	{
		return default(bool);
	}

	[Token(Token = "0x6000724")]
	[Address(RVA = "0xC4F0E0", Offset = "0xC4F0E0", VA = "0xC4F0E0")]
	public void LimitRotationOfModel()
	{
	}

	[Token(Token = "0x6000725")]
	[Address(RVA = "0xC4E72C", Offset = "0xC4E72C", VA = "0xC4E72C")]
	public void Wander(float delay)
	{
	}

	[Token(Token = "0x6000726")]
	[Address(RVA = "0xC4FBD8", Offset = "0xC4FBD8", VA = "0xC4FBD8")]
	public void SetRandomMode()
	{
	}

	[Token(Token = "0x6000727")]
	[Address(RVA = "0xC4F418", Offset = "0xC4F418", VA = "0xC4F418")]
	public void Flap()
	{
	}

	[Token(Token = "0x6000728")]
	[Address(RVA = "0xC4E810", Offset = "0xC4E810", VA = "0xC4E810")]
	public Vector3 findWaypoint()
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000729")]
	[Address(RVA = "0xC4FC98", Offset = "0xC4FC98", VA = "0xC4FC98")]
	public void Soar()
	{
	}

	[Token(Token = "0x600072A")]
	[Address(RVA = "0xC4FD28", Offset = "0xC4FD28", VA = "0xC4FD28")]
	public void Dive()
	{
	}

	[Token(Token = "0x600072B")]
	[Address(RVA = "0xC500C4", Offset = "0xC500C4", VA = "0xC500C4")]
	public void animationSpeed()
	{
	}

	[Token(Token = "0x600072C")]
	[Address(RVA = "0xC50408", Offset = "0xC50408", VA = "0xC50408")]
	public FlockChild()
	{
	}
}
[Token(Token = "0x20000B1")]
[RequireComponent(typeof(AudioSource))]
public class FlockChildSound : MonoBehaviour
{
	[Token(Token = "0x400039A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AudioClip[] _idleSounds;

	[Token(Token = "0x400039B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float _idleSoundRandomChance;

	[Token(Token = "0x400039C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AudioClip[] _flightSounds;

	[Token(Token = "0x400039D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float _flightSoundRandomChance;

	[Token(Token = "0x400039E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AudioClip[] _scareSounds;

	[Token(Token = "0x400039F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float _pitchMin;

	[Token(Token = "0x40003A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float _pitchMax;

	[Token(Token = "0x40003A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float _volumeMin;

	[Token(Token = "0x40003A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float _volumeMax;

	[Token(Token = "0x40003A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private FlockChild _flockChild;

	[Token(Token = "0x40003A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private AudioSource _audio;

	[Token(Token = "0x40003A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private bool _hasLanded;

	[Token(Token = "0x600072D")]
	[Address(RVA = "0xC5042C", Offset = "0xC5042C", VA = "0xC5042C")]
	public void Start()
	{
	}

	[Token(Token = "0x600072E")]
	[Address(RVA = "0xC5052C", Offset = "0xC5052C", VA = "0xC5052C")]
	public void PlayRandomSound()
	{
	}

	[Token(Token = "0x600072F")]
	[Address(RVA = "0xC50730", Offset = "0xC50730", VA = "0xC50730")]
	public void ScareSound()
	{
	}

	[Token(Token = "0x6000730")]
	[Address(RVA = "0xC5082C", Offset = "0xC5082C", VA = "0xC5082C")]
	public FlockChildSound()
	{
	}
}
[Token(Token = "0x20000B2")]
public class FlockController : MonoBehaviour
{
	[Token(Token = "0x40003A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public FlockChild _childPrefab;

	[Token(Token = "0x40003A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int _childAmount;

	[Token(Token = "0x40003A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool _slowSpawn;

	[Token(Token = "0x40003A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float _spawnSphere;

	[Token(Token = "0x40003AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float _spawnSphereHeight;

	[Token(Token = "0x40003AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float _spawnSphereDepth;

	[Token(Token = "0x40003AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float _minSpeed;

	[Token(Token = "0x40003AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float _maxSpeed;

	[Token(Token = "0x40003AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float _minScale;

	[Token(Token = "0x40003AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float _maxScale;

	[Token(Token = "0x40003B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float _soarFrequency;

	[Token(Token = "0x40003B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public string _soarAnimation;

	[Token(Token = "0x40003B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public string _flapAnimation;

	[Token(Token = "0x40003B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public string _idleAnimation;

	[Token(Token = "0x40003B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float _diveValue;

	[Token(Token = "0x40003B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float _diveFrequency;

	[Token(Token = "0x40003B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float _minDamping;

	[Token(Token = "0x40003B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float _maxDamping;

	[Token(Token = "0x40003B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public float _waypointDistance;

	[Token(Token = "0x40003B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float _minAnimationSpeed;

	[Token(Token = "0x40003BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float _maxAnimationSpeed;

	[Token(Token = "0x40003BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float _randomPositionTimer;

	[Token(Token = "0x40003BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public float _positionSphere;

	[Token(Token = "0x40003BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float _positionSphereHeight;

	[Token(Token = "0x40003BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float _positionSphereDepth;

	[Token(Token = "0x40003BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	public bool _childTriggerPos;

	[Token(Token = "0x40003C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8D")]
	public bool _forceChildWaypoints;

	[Token(Token = "0x40003C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public float _forcedRandomDelay;

	[Token(Token = "0x40003C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public bool _flatFly;

	[Token(Token = "0x40003C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
	public bool _flatSoar;

	[Token(Token = "0x40003C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x96")]
	public bool _birdAvoid;

	[Token(Token = "0x40003C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public int _birdAvoidHorizontalForce;

	[Token(Token = "0x40003C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public bool _birdAvoidDown;

	[Token(Token = "0x40003C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
	public bool _birdAvoidUp;

	[Token(Token = "0x40003C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public int _birdAvoidVerticalForce;

	[Token(Token = "0x40003C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	public float _birdAvoidDistanceMax;

	[Token(Token = "0x40003CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public float _birdAvoidDistanceMin;

	[Token(Token = "0x40003CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public float _soarMaxTime;

	[Token(Token = "0x40003CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public LayerMask _avoidanceMask;

	[Token(Token = "0x40003CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public List<FlockChild> _roamers;

	[Token(Token = "0x40003CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public Vector3 _posBuffer;

	[Token(Token = "0x40003CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
	public int _updateDivisor;

	[Token(Token = "0x40003D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public float _newDelta;

	[Token(Token = "0x40003D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	public int _updateCounter;

	[Token(Token = "0x40003D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public float _activeChildren;

	[Token(Token = "0x40003D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	public bool _groupChildToNewTransform;

	[Token(Token = "0x40003D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public Transform _groupTransform;

	[Token(Token = "0x40003D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	public string _groupName;

	[Token(Token = "0x40003D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public bool _groupChildToFlock;

	[Token(Token = "0x40003D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
	public Vector3 _startPosOffset;

	[Token(Token = "0x40003D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public Transform _thisT;

	[Token(Token = "0x6000731")]
	[Address(RVA = "0xC50850", Offset = "0xC50850", VA = "0xC50850")]
	public void Start()
	{
	}

	[Token(Token = "0x6000732")]
	[Address(RVA = "0xC50934", Offset = "0xC50934", VA = "0xC50934")]
	public void AddChild(int amount)
	{
	}

	[Token(Token = "0x6000733")]
	[Address(RVA = "0xC50BC8", Offset = "0xC50BC8", VA = "0xC50BC8")]
	public void AddChildToParent(Transform obj)
	{
	}

	[Token(Token = "0x6000734")]
	[Address(RVA = "0xC50C18", Offset = "0xC50C18", VA = "0xC50C18")]
	public void RemoveChild(int amount)
	{
	}

	[Token(Token = "0x6000735")]
	[Address(RVA = "0xC50D20", Offset = "0xC50D20", VA = "0xC50D20")]
	public void Update()
	{
	}

	[Token(Token = "0x6000736")]
	[Address(RVA = "0xC50A74", Offset = "0xC50A74", VA = "0xC50A74")]
	public void InstantiateGroup()
	{
	}

	[Token(Token = "0x6000737")]
	[Address(RVA = "0xC50D84", Offset = "0xC50D84", VA = "0xC50D84")]
	public void UpdateChildAmount()
	{
	}

	[Token(Token = "0x6000738")]
	[Address(RVA = "0xC50E14", Offset = "0xC50E14", VA = "0xC50E14")]
	public void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000739")]
	[Address(RVA = "0xC4F4EC", Offset = "0xC4F4EC", VA = "0xC4F4EC")]
	public void SetFlockRandomPosition()
	{
	}

	[Token(Token = "0x600073A")]
	[Address(RVA = "0xC50FEC", Offset = "0xC50FEC", VA = "0xC50FEC")]
	public void destroyBirds()
	{
	}

	[Token(Token = "0x600073B")]
	[Address(RVA = "0xC510F8", Offset = "0xC510F8", VA = "0xC510F8")]
	public FlockController()
	{
	}
}
[Token(Token = "0x20000B3")]
public class FlockScare : MonoBehaviour
{
	[Token(Token = "0x40003D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LandingSpotController[] landingSpotControllers;

	[Token(Token = "0x40003DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float scareInterval;

	[Token(Token = "0x40003DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float distanceToScare;

	[Token(Token = "0x40003DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int checkEveryNthLandingSpot;

	[Token(Token = "0x40003DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int InvokeAmounts;

	[Token(Token = "0x40003DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int lsc;

	[Token(Token = "0x40003DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private int ls;

	[Token(Token = "0x40003E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private LandingSpotController currentController;

	[Token(Token = "0x600073C")]
	[Address(RVA = "0xC5123C", Offset = "0xC5123C", VA = "0xC5123C")]
	private void CheckProximityToLandingSpots()
	{
	}

	[Token(Token = "0x600073D")]
	[Address(RVA = "0xC5130C", Offset = "0xC5130C", VA = "0xC5130C")]
	private void IterateLandingSpots()
	{
	}

	[Token(Token = "0x600073E")]
	[Address(RVA = "0xC513A8", Offset = "0xC513A8", VA = "0xC513A8")]
	private bool CheckDistanceToLandingSpot(LandingSpotController lc)
	{
		return default(bool);
	}

	[Token(Token = "0x600073F")]
	[Address(RVA = "0xC514EC", Offset = "0xC514EC", VA = "0xC514EC")]
	private void Invoker()
	{
	}

	[Token(Token = "0x6000740")]
	[Address(RVA = "0xC51574", Offset = "0xC51574", VA = "0xC51574")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000741")]
	[Address(RVA = "0xC515E8", Offset = "0xC515E8", VA = "0xC515E8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000742")]
	[Address(RVA = "0xC51634", Offset = "0xC51634", VA = "0xC51634")]
	public FlockScare()
	{
	}
}
[Token(Token = "0x20000B4")]
public class FlockWaypointTrigger : MonoBehaviour
{
	[Token(Token = "0x40003E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float _timer;

	[Token(Token = "0x40003E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public FlockChild _flockChild;

	[Token(Token = "0x6000743")]
	[Address(RVA = "0xC5164C", Offset = "0xC5164C", VA = "0xC5164C")]
	public void Start()
	{
	}

	[Token(Token = "0x6000744")]
	[Address(RVA = "0xC5172C", Offset = "0xC5172C", VA = "0xC5172C")]
	public void Trigger()
	{
	}

	[Token(Token = "0x6000745")]
	[Address(RVA = "0xC51748", Offset = "0xC51748", VA = "0xC51748")]
	public FlockWaypointTrigger()
	{
	}
}
[Token(Token = "0x20000B5")]
public class LandingButtons : MonoBehaviour
{
	[Token(Token = "0x40003E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LandingSpotController _landingSpotController;

	[Token(Token = "0x40003E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public FlockController _flockController;

	[Token(Token = "0x40003E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float hSliderValue;

	[Token(Token = "0x6000746")]
	[Address(RVA = "0xC51758", Offset = "0xC51758", VA = "0xC51758")]
	public void OnGUI()
	{
	}

	[Token(Token = "0x6000747")]
	[Address(RVA = "0xC51CC4", Offset = "0xC51CC4", VA = "0xC51CC4")]
	public LandingButtons()
	{
	}
}
[Token(Token = "0x20000B6")]
public class LandingSpot : MonoBehaviour
{
	[Token(Token = "0x20000B7")]
	[CompilerGenerated]
	private sealed class <GetFlockChild>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40003ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40003EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40003EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float minDelay;

		[Token(Token = "0x40003F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float maxDelay;

		[Token(Token = "0x40003F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LandingSpot <>4__this;

		[Token(Token = "0x1700004F")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000754")]
			[Address(RVA = "0xC53730", Offset = "0xC53730", VA = "0xC53730", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000050")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000756")]
			[Address(RVA = "0xC53778", Offset = "0xC53778", VA = "0xC53778", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000751")]
		[Address(RVA = "0xC52A40", Offset = "0xC52A40", VA = "0xC52A40")]
		[DebuggerHidden]
		public <GetFlockChild>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x6000752")]
		[Address(RVA = "0xC5301C", Offset = "0xC5301C", VA = "0xC5301C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000753")]
		[Address(RVA = "0xC53020", Offset = "0xC53020", VA = "0xC53020", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000755")]
		[Address(RVA = "0xC53738", Offset = "0xC53738", VA = "0xC53738", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[HideInInspector]
	public FlockChild landingChild;

	[Token(Token = "0x40003E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[HideInInspector]
	public bool landing;

	[Token(Token = "0x40003E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private int lerpCounter;

	[Token(Token = "0x40003E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[HideInInspector]
	public LandingSpotController _controller;

	[Token(Token = "0x40003EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool _idle;

	[Token(Token = "0x40003EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform _thisT;

	[Token(Token = "0x40003EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool _gotcha;

	[Token(Token = "0x6000748")]
	[Address(RVA = "0xC51CD4", Offset = "0xC51CD4", VA = "0xC51CD4")]
	public void Start()
	{
	}

	[Token(Token = "0x6000749")]
	[Address(RVA = "0xC51E68", Offset = "0xC51E68", VA = "0xC51E68")]
	public void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600074A")]
	[Address(RVA = "0xC52230", Offset = "0xC52230", VA = "0xC52230")]
	public void LateUpdate()
	{
	}

	[Token(Token = "0x600074B")]
	[Address(RVA = "0xC529D4", Offset = "0xC529D4", VA = "0xC529D4")]
	public void StraightenBird()
	{
	}

	[Token(Token = "0x600074C")]
	[Address(RVA = "0xC52810", Offset = "0xC52810", VA = "0xC52810")]
	public void RotateBird()
	{
	}

	[Token(Token = "0x600074D")]
	[Address(RVA = "0xC51DEC", Offset = "0xC51DEC", VA = "0xC51DEC")]
	[IteratorStateMachine(typeof(<GetFlockChild>d__12))]
	public IEnumerator GetFlockChild(float minDelay, float maxDelay)
	{
		return null;
	}

	[Token(Token = "0x600074E")]
	[Address(RVA = "0xC52A68", Offset = "0xC52A68", VA = "0xC52A68")]
	public void InstantLand()
	{
	}

	[Token(Token = "0x600074F")]
	[Address(RVA = "0xC52D94", Offset = "0xC52D94", VA = "0xC52D94")]
	public void ReleaseFlockChild()
	{
	}

	[Token(Token = "0x6000750")]
	[Address(RVA = "0xC53014", Offset = "0xC53014", VA = "0xC53014")]
	public LandingSpot()
	{
	}
}
[Token(Token = "0x20000B8")]
public class LandingSpotController : MonoBehaviour
{
	[Token(Token = "0x20000B9")]
	[CompilerGenerated]
	private sealed class <InstantLandOnStart>d__22 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x4000407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LandingSpotController <>4__this;

		[Token(Token = "0x17000051")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000761")]
			[Address(RVA = "0xC53D6C", Offset = "0xC53D6C", VA = "0xC53D6C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000052")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000763")]
			[Address(RVA = "0xC53DB4", Offset = "0xC53DB4", VA = "0xC53DB4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600075E")]
		[Address(RVA = "0xC53B54", Offset = "0xC53B54", VA = "0xC53B54")]
		[DebuggerHidden]
		public <InstantLandOnStart>d__22(int <>1__state)
		{
		}

		[Token(Token = "0x600075F")]
		[Address(RVA = "0xC53BF4", Offset = "0xC53BF4", VA = "0xC53BF4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000760")]
		[Address(RVA = "0xC53BF8", Offset = "0xC53BF8", VA = "0xC53BF8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000762")]
		[Address(RVA = "0xC53D74", Offset = "0xC53D74", VA = "0xC53D74", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x20000BA")]
	[CompilerGenerated]
	private sealed class <InstantLand>d__23 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x400040A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float delay;

		[Token(Token = "0x400040B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LandingSpotController <>4__this;

		[Token(Token = "0x17000053")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000767")]
			[Address(RVA = "0xC53F34", Offset = "0xC53F34", VA = "0xC53F34", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000054")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x6000769")]
			[Address(RVA = "0xC53F7C", Offset = "0xC53F7C", VA = "0xC53F7C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000764")]
		[Address(RVA = "0xC53B7C", Offset = "0xC53B7C", VA = "0xC53B7C")]
		[DebuggerHidden]
		public <InstantLand>d__23(int <>1__state)
		{
		}

		[Token(Token = "0x6000765")]
		[Address(RVA = "0xC53DBC", Offset = "0xC53DBC", VA = "0xC53DBC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000766")]
		[Address(RVA = "0xC53DC0", Offset = "0xC53DC0", VA = "0xC53DC0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x6000768")]
		[Address(RVA = "0xC53F3C", Offset = "0xC53F3C", VA = "0xC53F3C", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40003F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool _randomRotate;

	[Token(Token = "0x40003F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector2 _autoCatchDelay;

	[Token(Token = "0x40003F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector2 _autoDismountDelay;

	[Token(Token = "0x40003F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float _maxBirdDistance;

	[Token(Token = "0x40003F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float _minBirdDistance;

	[Token(Token = "0x40003F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool _takeClosest;

	[Token(Token = "0x40003F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public FlockController _flock;

	[Token(Token = "0x40003F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool _landOnStart;

	[Token(Token = "0x40003FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
	public bool _soarLand;

	[Token(Token = "0x40003FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x42")]
	public bool _onlyBirdsAbove;

	[Token(Token = "0x40003FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float _landingSpeedModifier;

	[Token(Token = "0x40003FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float _landingTurnSpeedModifier;

	[Token(Token = "0x40003FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform _featherPS;

	[Token(Token = "0x40003FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform _thisT;

	[Token(Token = "0x4000400")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public int _activeLandingSpots;

	[Token(Token = "0x4000401")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float _snapLandDistance;

	[Token(Token = "0x4000402")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float _landedRotateSpeed;

	[Token(Token = "0x4000403")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float _gizmoSize;

	[Token(Token = "0x6000757")]
	[Address(RVA = "0xC53780", Offset = "0xC53780", VA = "0xC53780")]
	public void Start()
	{
	}

	[Token(Token = "0x6000758")]
	[Address(RVA = "0xC514E0", Offset = "0xC514E0", VA = "0xC514E0")]
	public void ScareAll()
	{
	}

	[Token(Token = "0x6000759")]
	[Address(RVA = "0xC53A0C", Offset = "0xC53A0C", VA = "0xC53A0C")]
	public void ScareAll(float minDelay, float maxDelay)
	{
	}

	[Token(Token = "0x600075A")]
	[Address(RVA = "0xC51B2C", Offset = "0xC51B2C", VA = "0xC51B2C")]
	public void LandAll()
	{
	}

	[Token(Token = "0x600075B")]
	[Address(RVA = "0xC53994", Offset = "0xC53994", VA = "0xC53994")]
	[IteratorStateMachine(typeof(<InstantLandOnStart>d__22))]
	public IEnumerator InstantLandOnStart(float delay)
	{
		return null;
	}

	[Token(Token = "0x600075C")]
	[Address(RVA = "0xC51C4C", Offset = "0xC51C4C", VA = "0xC51C4C")]
	[IteratorStateMachine(typeof(<InstantLand>d__23))]
	public IEnumerator InstantLand(float delay)
	{
		return null;
	}

	[Token(Token = "0x600075D")]
	[Address(RVA = "0xC53BA4", Offset = "0xC53BA4", VA = "0xC53BA4")]
	public LandingSpotController()
	{
	}
}
[Token(Token = "0x20000BB")]
public class LightFlicker : MonoBehaviour
{
	[Token(Token = "0x400040C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[SerializeField]
	private bool flickering;

	[Token(Token = "0x400040D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[SerializeField]
	[Range(0f, 2f)]
	private float brightness;

	[Token(Token = "0x400040E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[SerializeField]
	[Range(0f, 0.2f)]
	private float speed;

	[Token(Token = "0x400040F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Range(0f, 0.2f)]
	[SerializeField]
	private float amplitude;

	[Token(Token = "0x4000410")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float currentBrightness;

	[Token(Token = "0x4000411")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private MaterialPropertyBlock block;

	[Token(Token = "0x4000412")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Renderer myRenderer;

	[Token(Token = "0x600076A")]
	[Address(RVA = "0xC53F84", Offset = "0xC53F84", VA = "0xC53F84")]
	private void Start()
	{
	}

	[Token(Token = "0x600076B")]
	[Address(RVA = "0xC540D0", Offset = "0xC540D0", VA = "0xC540D0")]
	private void Update()
	{
	}

	[Token(Token = "0x600076C")]
	[Address(RVA = "0xC54014", Offset = "0xC54014", VA = "0xC54014")]
	private void Reset()
	{
	}

	[Token(Token = "0x600076D")]
	[Address(RVA = "0xC541B8", Offset = "0xC541B8", VA = "0xC541B8")]
	public void overrideSettings(bool _flickering, float _brightness, float _speed, float _amplitude)
	{
	}

	[Token(Token = "0x600076E")]
	[Address(RVA = "0xC541CC", Offset = "0xC541CC", VA = "0xC541CC")]
	public LightFlicker()
	{
	}
}
[Token(Token = "0x20000BC")]
public class SetPhysicsLayersMatrix : MonoBehaviour
{
	[Token(Token = "0x600076F")]
	[Address(RVA = "0xC541F4", Offset = "0xC541F4", VA = "0xC541F4")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000770")]
	[Address(RVA = "0xC54208", Offset = "0xC54208", VA = "0xC54208")]
	public SetPhysicsLayersMatrix()
	{
	}
}
[Token(Token = "0x20000BD")]
public class LookCamera : MonoBehaviour
{
	[Token(Token = "0x4000413")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speedNormal;

	[Token(Token = "0x4000414")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float speedFast;

	[Token(Token = "0x4000415")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float mouseSensitivityX;

	[Token(Token = "0x4000416")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float mouseSensitivityY;

	[Token(Token = "0x4000417")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float rotY;

	[Token(Token = "0x6000771")]
	[Address(RVA = "0xC54210", Offset = "0xC54210", VA = "0xC54210")]
	private void Start()
	{
	}

	[Token(Token = "0x6000772")]
	[Address(RVA = "0xC542CC", Offset = "0xC542CC", VA = "0xC542CC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000773")]
	[Address(RVA = "0xC54430", Offset = "0xC54430", VA = "0xC54430")]
	public LookCamera()
	{
	}
}
[Token(Token = "0x20000BE")]
public class ExampleCardItemAction : MonoBehaviour
{
	[Token(Token = "0x4000418")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Text title;

	[Token(Token = "0x4000419")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text description;

	[Token(Token = "0x6000774")]
	[Address(RVA = "0xC54444", Offset = "0xC54444", VA = "0xC54444")]
	private void Start()
	{
	}

	[Token(Token = "0x6000775")]
	[Address(RVA = "0xC544FC", Offset = "0xC544FC", VA = "0xC544FC")]
	private void ShowDescription(Card card)
	{
	}

	[Token(Token = "0x6000776")]
	[Address(RVA = "0xC54554", Offset = "0xC54554", VA = "0xC54554")]
	public ExampleCardItemAction()
	{
	}
}
[Token(Token = "0x20000BF")]
public class ExampleDynamicCardList : MonoBehaviour
{
	[Token(Token = "0x400041A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public CardListManager clm;

	[Token(Token = "0x6000777")]
	[Address(RVA = "0xC5455C", Offset = "0xC5455C", VA = "0xC5455C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000778")]
	[Address(RVA = "0xC54560", Offset = "0xC54560", VA = "0xC54560")]
	public void UpdateList()
	{
	}

	[Token(Token = "0x6000779")]
	[Address(RVA = "0xC546F8", Offset = "0xC546F8", VA = "0xC546F8")]
	public ExampleDynamicCardList()
	{
	}
}
[Token(Token = "0x20000C0")]
public class ExampleOptionControl : MonoBehaviour
{
	[Token(Token = "0x400041B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private OptionsManager optionsManager;

	[Token(Token = "0x600077A")]
	[Address(RVA = "0xC54700", Offset = "0xC54700", VA = "0xC54700")]
	private void Start()
	{
	}

	[Token(Token = "0x600077B")]
	[Address(RVA = "0xC547B8", Offset = "0xC547B8", VA = "0xC547B8")]
	private void SwitchInteractionMode(int i)
	{
	}

	[Token(Token = "0x600077C")]
	[Address(RVA = "0xC54940", Offset = "0xC54940", VA = "0xC54940")]
	public ExampleOptionControl()
	{
	}
}
[Token(Token = "0x20000C1")]
public class InvokeKeyboard : MonoBehaviour, ISelectHandler, IEventSystemHandler, IDeselectHandler
{
	[Token(Token = "0x400041C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject keyboard;

	[Token(Token = "0x400041D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool hideKeyboardOnDeslect;

	[Token(Token = "0x600077D")]
	[Address(RVA = "0xC54948", Offset = "0xC54948", VA = "0xC54948", Slot = "4")]
	public void OnSelect(BaseEventData eventData)
	{
	}

	[Token(Token = "0x600077E")]
	[Address(RVA = "0xC54988", Offset = "0xC54988", VA = "0xC54988", Slot = "5")]
	public void OnDeselect(BaseEventData eventData)
	{
	}

	[Token(Token = "0x600077F")]
	[Address(RVA = "0xC549D0", Offset = "0xC549D0", VA = "0xC549D0")]
	public InvokeKeyboard()
	{
	}
}
[Token(Token = "0x20000C2")]
public class SwitchUI : MonoBehaviour
{
	[Token(Token = "0x400041E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public List<GameObject> canvas;

	[Token(Token = "0x400041F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private int currentIndex;

	[Token(Token = "0x6000780")]
	[Address(RVA = "0xC549D8", Offset = "0xC549D8", VA = "0xC549D8")]
	public void NextUI()
	{
	}

	[Token(Token = "0x6000781")]
	[Address(RVA = "0xC54A9C", Offset = "0xC54A9C", VA = "0xC54A9C")]
	public SwitchUI()
	{
	}
}
[Token(Token = "0x20000C3")]
[RequireComponent(typeof(ParticleSystem))]
public class CFX_AutoStopLoopedEffect : MonoBehaviour
{
	[Token(Token = "0x4000420")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float effectDuration;

	[Token(Token = "0x4000421")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float d;

	[Token(Token = "0x6000782")]
	[Address(RVA = "0xC54AA4", Offset = "0xC54AA4", VA = "0xC54AA4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000783")]
	[Address(RVA = "0xC54AB0", Offset = "0xC54AB0", VA = "0xC54AB0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000784")]
	[Address(RVA = "0xC54BC8", Offset = "0xC54BC8", VA = "0xC54BC8")]
	public CFX_AutoStopLoopedEffect()
	{
	}
}
[Token(Token = "0x20000C4")]
public class CFX_Demo_New : MonoBehaviour
{
	[Token(Token = "0x20000C6")]
	[CompilerGenerated]
	private sealed class <CheckForDeletedParticles>d__25 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000434")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000435")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000436")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CFX_Demo_New <>4__this;

		[Token(Token = "0x17000055")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000799")]
			[Address(RVA = "0xC55B6C", Offset = "0xC55B6C", VA = "0xC55B6C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000056")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600079B")]
			[Address(RVA = "0xC55BB4", Offset = "0xC55BB4", VA = "0xC55BB4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000796")]
		[Address(RVA = "0xC5589C", Offset = "0xC5589C", VA = "0xC5589C")]
		[DebuggerHidden]
		public <CheckForDeletedParticles>d__25(int <>1__state)
		{
		}

		[Token(Token = "0x6000797")]
		[Address(RVA = "0xC559FC", Offset = "0xC559FC", VA = "0xC559FC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000798")]
		[Address(RVA = "0xC55A00", Offset = "0xC55A00", VA = "0xC55A00", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600079A")]
		[Address(RVA = "0xC55B74", Offset = "0xC55B74", VA = "0xC55B74", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000422")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Renderer groundRenderer;

	[Token(Token = "0x4000423")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Collider groundCollider;

	[Token(Token = "0x4000424")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Space]
	[Space]
	public Image slowMoBtn;

	[Token(Token = "0x4000425")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Text slowMoLabel;

	[Token(Token = "0x4000426")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Image camRotBtn;

	[Token(Token = "0x4000427")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Text camRotLabel;

	[Token(Token = "0x4000428")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Image groundBtn;

	[Token(Token = "0x4000429")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Text groundLabel;

	[Token(Token = "0x400042A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	[Space]
	public Text EffectLabel;

	[Token(Token = "0x400042B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Text EffectIndexLabel;

	[Token(Token = "0x400042C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private GameObject[] ParticleExamples;

	[Token(Token = "0x400042D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private int exampleIndex;

	[Token(Token = "0x400042E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private bool slowMo;

	[Token(Token = "0x400042F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Vector3 defaultCamPosition;

	[Token(Token = "0x4000430")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private Quaternion defaultCamRotation;

	[Token(Token = "0x4000431")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private List<GameObject> onScreenParticles;

	[Token(Token = "0x6000785")]
	[Address(RVA = "0xC54BD8", Offset = "0xC54BD8", VA = "0xC54BD8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000786")]
	[Address(RVA = "0xC54FA4", Offset = "0xC54FA4", VA = "0xC54FA4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000787")]
	[Address(RVA = "0xC555FC", Offset = "0xC555FC", VA = "0xC555FC")]
	public void OnToggleGround()
	{
	}

	[Token(Token = "0x6000788")]
	[Address(RVA = "0xC556BC", Offset = "0xC556BC", VA = "0xC556BC")]
	public void OnToggleCamera()
	{
	}

	[Token(Token = "0x6000789")]
	[Address(RVA = "0xC5578C", Offset = "0xC5578C", VA = "0xC5578C")]
	public void OnToggleSlowMo()
	{
	}

	[Token(Token = "0x600078A")]
	[Address(RVA = "0xC5582C", Offset = "0xC5582C", VA = "0xC5582C")]
	public void OnPreviousEffect()
	{
	}

	[Token(Token = "0x600078B")]
	[Address(RVA = "0xC55830", Offset = "0xC55830", VA = "0xC55830")]
	public void OnNextEffect()
	{
	}

	[Token(Token = "0x600078C")]
	[Address(RVA = "0xC54E78", Offset = "0xC54E78", VA = "0xC54E78")]
	private void UpdateUI()
	{
	}

	[Token(Token = "0x600078D")]
	[Address(RVA = "0xC553E0", Offset = "0xC553E0", VA = "0xC553E0")]
	private GameObject spawnParticle()
	{
		return null;
	}

	[Token(Token = "0x600078E")]
	[Address(RVA = "0xC55834", Offset = "0xC55834", VA = "0xC55834")]
	[IteratorStateMachine(typeof(<CheckForDeletedParticles>d__25))]
	private IEnumerator CheckForDeletedParticles()
	{
		return null;
	}

	[Token(Token = "0x600078F")]
	[Address(RVA = "0xC55248", Offset = "0xC55248", VA = "0xC55248")]
	private void prevParticle()
	{
	}

	[Token(Token = "0x6000790")]
	[Address(RVA = "0xC5527C", Offset = "0xC5527C", VA = "0xC5527C")]
	private void nextParticle()
	{
	}

	[Token(Token = "0x6000791")]
	[Address(RVA = "0xC552B0", Offset = "0xC552B0", VA = "0xC552B0")]
	private void destroyParticles()
	{
	}

	[Token(Token = "0x6000792")]
	[Address(RVA = "0xC558C4", Offset = "0xC558C4", VA = "0xC558C4")]
	public CFX_Demo_New()
	{
	}
}
[Token(Token = "0x20000C7")]
public class CFX_Demo_RotateCamera : MonoBehaviour
{
	[Token(Token = "0x4000437")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	public static bool rotating;

	[Token(Token = "0x4000438")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speed;

	[Token(Token = "0x4000439")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform rotationCenter;

	[Token(Token = "0x600079C")]
	[Address(RVA = "0xC55BBC", Offset = "0xC55BBC", VA = "0xC55BBC")]
	private void Update()
	{
	}

	[Token(Token = "0x600079D")]
	[Address(RVA = "0xC55CF8", Offset = "0xC55CF8", VA = "0xC55CF8")]
	public CFX_Demo_RotateCamera()
	{
	}
}
[Token(Token = "0x20000C8")]
public class CFX_Demo_Translate : MonoBehaviour
{
	[Token(Token = "0x400043A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float speed;

	[Token(Token = "0x400043B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Vector3 rotation;

	[Token(Token = "0x400043C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 axis;

	[Token(Token = "0x400043D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool gravity;

	[Token(Token = "0x400043E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 dir;

	[Token(Token = "0x600079F")]
	[Address(RVA = "0xC55D54", Offset = "0xC55D54", VA = "0xC55D54")]
	private void Start()
	{
	}

	[Token(Token = "0x60007A0")]
	[Address(RVA = "0xC55DF4", Offset = "0xC55DF4", VA = "0xC55DF4")]
	private void Update()
	{
	}

	[Token(Token = "0x60007A1")]
	[Address(RVA = "0xC55E64", Offset = "0xC55E64", VA = "0xC55E64")]
	public CFX_Demo_Translate()
	{
	}
}
[Token(Token = "0x20000C9")]
[RequireComponent(typeof(ParticleSystem))]
public class CFX_AutoDestructShuriken : MonoBehaviour
{
	[Token(Token = "0x20000CA")]
	[CompilerGenerated]
	private sealed class <CheckIfAlive>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x4000440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CFX_AutoDestructShuriken <>4__this;

		[Token(Token = "0x17000057")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007A8")]
			[Address(RVA = "0xC560FC", Offset = "0xC560FC", VA = "0xC560FC", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000058")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007AA")]
			[Address(RVA = "0xC56144", Offset = "0xC56144", VA = "0xC56144", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007A5")]
		[Address(RVA = "0xC55F94", Offset = "0xC55F94", VA = "0xC55F94")]
		[DebuggerHidden]
		public <CheckIfAlive>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x60007A6")]
		[Address(RVA = "0xC55FC4", Offset = "0xC55FC4", VA = "0xC55FC4", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007A7")]
		[Address(RVA = "0xC55FC8", Offset = "0xC55FC8", VA = "0xC55FC8", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007A9")]
		[Address(RVA = "0xC56104", Offset = "0xC56104", VA = "0xC56104", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400043F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool OnlyDeactivate;

	[Token(Token = "0x60007A2")]
	[Address(RVA = "0xC55EE0", Offset = "0xC55EE0", VA = "0xC55EE0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60007A3")]
	[Address(RVA = "0xC55F2C", Offset = "0xC55F2C", VA = "0xC55F2C")]
	[IteratorStateMachine(typeof(<CheckIfAlive>d__2))]
	private IEnumerator CheckIfAlive()
	{
		return null;
	}

	[Token(Token = "0x60007A4")]
	[Address(RVA = "0xC55FBC", Offset = "0xC55FBC", VA = "0xC55FBC")]
	public CFX_AutoDestructShuriken()
	{
	}
}
[Token(Token = "0x20000CB")]
public class CFX_AutodestructWhenNoChildren : MonoBehaviour
{
	[Token(Token = "0x60007AB")]
	[Address(RVA = "0xC5614C", Offset = "0xC5614C", VA = "0xC5614C")]
	private void Update()
	{
	}

	[Token(Token = "0x60007AC")]
	[Address(RVA = "0xC561E4", Offset = "0xC561E4", VA = "0xC561E4")]
	public CFX_AutodestructWhenNoChildren()
	{
	}
}
[Token(Token = "0x20000CC")]
public class CFX_InspectorHelp : MonoBehaviour
{
	[Token(Token = "0x4000443")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool Locked;

	[Token(Token = "0x4000444")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public string Title;

	[Token(Token = "0x4000445")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public string HelpText;

	[Token(Token = "0x4000446")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public int MsgType;

	[Token(Token = "0x60007AD")]
	[Address(RVA = "0xC561EC", Offset = "0xC561EC", VA = "0xC561EC")]
	[ContextMenu("Unlock editing")]
	private void Unlock()
	{
	}

	[Token(Token = "0x60007AE")]
	[Address(RVA = "0xC561F4", Offset = "0xC561F4", VA = "0xC561F4")]
	public CFX_InspectorHelp()
	{
	}
}
[Token(Token = "0x20000CD")]
[RequireComponent(typeof(Light))]
public class CFX_LightIntensityFade : MonoBehaviour
{
	[Token(Token = "0x4000447")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float duration;

	[Token(Token = "0x4000448")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float delay;

	[Token(Token = "0x4000449")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float finalIntensity;

	[Token(Token = "0x400044A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float baseIntensity;

	[Token(Token = "0x400044B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool autodestruct;

	[Token(Token = "0x400044C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float p_lifetime;

	[Token(Token = "0x400044D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float p_delay;

	[Token(Token = "0x60007AF")]
	[Address(RVA = "0xC561FC", Offset = "0xC561FC", VA = "0xC561FC")]
	private void Start()
	{
	}

	[Token(Token = "0x60007B0")]
	[Address(RVA = "0xC5625C", Offset = "0xC5625C", VA = "0xC5625C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60007B1")]
	[Address(RVA = "0xC562D8", Offset = "0xC562D8", VA = "0xC562D8")]
	private void Update()
	{
	}

	[Token(Token = "0x60007B2")]
	[Address(RVA = "0xC5643C", Offset = "0xC5643C", VA = "0xC5643C")]
	public CFX_LightIntensityFade()
	{
	}
}
[Token(Token = "0x20000CE")]
public class CFX_ShurikenThreadFix : MonoBehaviour
{
	[Token(Token = "0x20000CF")]
	[CompilerGenerated]
	private sealed class <WaitFrame>d__2 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400044F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000450")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000451")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CFX_ShurikenThreadFix <>4__this;

		[Token(Token = "0x17000059")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007B9")]
			[Address(RVA = "0xC56660", Offset = "0xC56660", VA = "0xC56660", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005A")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007BB")]
			[Address(RVA = "0xC566A8", Offset = "0xC566A8", VA = "0xC566A8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007B6")]
		[Address(RVA = "0xC56590", Offset = "0xC56590", VA = "0xC56590")]
		[DebuggerHidden]
		public <WaitFrame>d__2(int <>1__state)
		{
		}

		[Token(Token = "0x60007B7")]
		[Address(RVA = "0xC565C0", Offset = "0xC565C0", VA = "0xC565C0", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007B8")]
		[Address(RVA = "0xC565C4", Offset = "0xC565C4", VA = "0xC565C4", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007BA")]
		[Address(RVA = "0xC56668", Offset = "0xC56668", VA = "0xC56668", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400044E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem[] systems;

	[Token(Token = "0x60007B3")]
	[Address(RVA = "0xC5644C", Offset = "0xC5644C", VA = "0xC5644C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60007B4")]
	[Address(RVA = "0xC56528", Offset = "0xC56528", VA = "0xC56528")]
	[IteratorStateMachine(typeof(<WaitFrame>d__2))]
	private IEnumerator WaitFrame()
	{
		return null;
	}

	[Token(Token = "0x60007B5")]
	[Address(RVA = "0xC565B8", Offset = "0xC565B8", VA = "0xC565B8")]
	public CFX_ShurikenThreadFix()
	{
	}
}
[Token(Token = "0x20000D0")]
public class CFX_SpawnSystem : MonoBehaviour
{
	[Token(Token = "0x4000452")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static CFX_SpawnSystem instance;

	[Token(Token = "0x4000453")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] objectsToPreload;

	[Token(Token = "0x4000454")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int[] objectsToPreloadTimes;

	[Token(Token = "0x4000455")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool hideObjectsInHierarchy;

	[Token(Token = "0x4000456")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool spawnAsChildren;

	[Token(Token = "0x4000457")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	public bool onlyGetInactiveObjects;

	[Token(Token = "0x4000458")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
	public bool instantiateIfNeeded;

	[Token(Token = "0x4000459")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool allObjectsLoaded;

	[Token(Token = "0x400045A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Dictionary<int, List<GameObject>> instantiatedObjects;

	[Token(Token = "0x400045B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Dictionary<int, int> poolCursors;

	[Token(Token = "0x1700005B")]
	public static bool AllObjectsLoaded
	{
		[Token(Token = "0x60007BF")]
		[Address(RVA = "0xC5755C", Offset = "0xC5755C", VA = "0xC5755C")]
		get
		{
			return default(bool);
		}
	}

	[Token(Token = "0x60007BC")]
	[Address(RVA = "0xC566B0", Offset = "0xC566B0", VA = "0xC566B0")]
	public static GameObject GetNextObject(GameObject sourceObj, bool activateObject = true)
	{
		return null;
	}

	[Token(Token = "0x60007BD")]
	[Address(RVA = "0xC56DC4", Offset = "0xC56DC4", VA = "0xC56DC4")]
	public static void PreloadObject(GameObject sourceObj, int poolSize = 1)
	{
	}

	[Token(Token = "0x60007BE")]
	[Address(RVA = "0xC57164", Offset = "0xC57164", VA = "0xC57164")]
	public static void UnloadObjects(GameObject sourceObj)
	{
	}

	[Token(Token = "0x60007C0")]
	[Address(RVA = "0xC56E2C", Offset = "0xC56E2C", VA = "0xC56E2C")]
	private void addObjectToPool(GameObject sourceObject, int number)
	{
	}

	[Token(Token = "0x60007C1")]
	[Address(RVA = "0xC571BC", Offset = "0xC571BC", VA = "0xC571BC")]
	private void removeObjectsFromPool(GameObject sourceObject)
	{
	}

	[Token(Token = "0x60007C2")]
	[Address(RVA = "0xC56C64", Offset = "0xC56C64", VA = "0xC56C64")]
	private void increasePoolCursor(int uniqueId)
	{
	}

	[Token(Token = "0x60007C3")]
	[Address(RVA = "0xC575B0", Offset = "0xC575B0", VA = "0xC575B0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007C4")]
	[Address(RVA = "0xC576A4", Offset = "0xC576A4", VA = "0xC576A4")]
	private void Start()
	{
	}

	[Token(Token = "0x60007C5")]
	[Address(RVA = "0xC57724", Offset = "0xC57724", VA = "0xC57724")]
	public CFX_SpawnSystem()
	{
	}
}
[Token(Token = "0x20000D1")]
public class ExplosionsBillboard : MonoBehaviour
{
	[Token(Token = "0x400045C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Camera Camera;

	[Token(Token = "0x400045D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool Active;

	[Token(Token = "0x400045E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	public bool AutoInitCamera;

	[Token(Token = "0x400045F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject myContainer;

	[Token(Token = "0x4000460")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform t;

	[Token(Token = "0x4000461")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform camT;

	[Token(Token = "0x4000462")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Transform contT;

	[Token(Token = "0x60007C6")]
	[Address(RVA = "0xC5783C", Offset = "0xC5783C", VA = "0xC5783C")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007C7")]
	[Address(RVA = "0xC57A2C", Offset = "0xC57A2C", VA = "0xC57A2C")]
	private void Update()
	{
	}

	[Token(Token = "0x60007C8")]
	[Address(RVA = "0xC57BB0", Offset = "0xC57BB0", VA = "0xC57BB0")]
	public ExplosionsBillboard()
	{
	}
}
[Token(Token = "0x20000D2")]
public class ExplosionsDeactivateRendererByTime : MonoBehaviour
{
	[Token(Token = "0x4000463")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float TimeDelay;

	[Token(Token = "0x4000464")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Renderer rend;

	[Token(Token = "0x60007C9")]
	[Address(RVA = "0xC57BC0", Offset = "0xC57BC0", VA = "0xC57BC0")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007CA")]
	[Address(RVA = "0xC57C10", Offset = "0xC57C10", VA = "0xC57C10")]
	private void DeactivateRenderer()
	{
	}

	[Token(Token = "0x60007CB")]
	[Address(RVA = "0xC57C30", Offset = "0xC57C30", VA = "0xC57C30")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60007CC")]
	[Address(RVA = "0xC57C98", Offset = "0xC57C98", VA = "0xC57C98")]
	public ExplosionsDeactivateRendererByTime()
	{
	}
}
[Token(Token = "0x20000D3")]
public class ExplosionsLightCurves : MonoBehaviour
{
	[Token(Token = "0x4000465")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve LightCurve;

	[Token(Token = "0x4000466")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x4000467")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float GraphIntensityMultiplier;

	[Token(Token = "0x4000468")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool canUpdate;

	[Token(Token = "0x4000469")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float startTime;

	[Token(Token = "0x400046A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Light lightSource;

	[Token(Token = "0x60007CD")]
	[Address(RVA = "0xC57CA8", Offset = "0xC57CA8", VA = "0xC57CA8")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007CE")]
	[Address(RVA = "0xC57D24", Offset = "0xC57D24", VA = "0xC57D24")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60007CF")]
	[Address(RVA = "0xC57D48", Offset = "0xC57D48", VA = "0xC57D48")]
	private void Update()
	{
	}

	[Token(Token = "0x60007D0")]
	[Address(RVA = "0xC57DBC", Offset = "0xC57DBC", VA = "0xC57DBC")]
	public ExplosionsLightCurves()
	{
	}
}
[Token(Token = "0x20000D4")]
[ExecuteInEditMode]
public class ExplosionsParticleSystemScaler : MonoBehaviour
{
	[Token(Token = "0x400046B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float particlesScale;

	[Token(Token = "0x400046C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float oldScale;

	[Token(Token = "0x60007D1")]
	[Address(RVA = "0xC57DF8", Offset = "0xC57DF8", VA = "0xC57DF8")]
	private void Start()
	{
	}

	[Token(Token = "0x60007D2")]
	[Address(RVA = "0xC57E04", Offset = "0xC57E04", VA = "0xC57E04")]
	private void Update()
	{
	}

	[Token(Token = "0x60007D3")]
	[Address(RVA = "0xC57E08", Offset = "0xC57E08", VA = "0xC57E08")]
	public ExplosionsParticleSystemScaler()
	{
	}
}
[Token(Token = "0x20000D5")]
public class ExplosionsScaleCurves : MonoBehaviour
{
	[Token(Token = "0x400046D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve ScaleCurveX;

	[Token(Token = "0x400046E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve ScaleCurveY;

	[Token(Token = "0x400046F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve ScaleCurveZ;

	[Token(Token = "0x4000470")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 GraphTimeMultiplier;

	[Token(Token = "0x4000471")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Vector3 GraphScaleMultiplier;

	[Token(Token = "0x4000472")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float startTime;

	[Token(Token = "0x4000473")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Transform t;

	[Token(Token = "0x4000474")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float evalX;

	[Token(Token = "0x4000475")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private float evalY;

	[Token(Token = "0x4000476")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private float evalZ;

	[Token(Token = "0x60007D4")]
	[Address(RVA = "0xC57E18", Offset = "0xC57E18", VA = "0xC57E18")]
	private void Awake()
	{
	}

	[Token(Token = "0x60007D5")]
	[Address(RVA = "0xC57E34", Offset = "0xC57E34", VA = "0xC57E34")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60007D6")]
	[Address(RVA = "0xC57E58", Offset = "0xC57E58", VA = "0xC57E58")]
	private void Update()
	{
	}

	[Token(Token = "0x60007D7")]
	[Address(RVA = "0xC57F1C", Offset = "0xC57F1C", VA = "0xC57F1C")]
	public ExplosionsScaleCurves()
	{
	}
}
[Token(Token = "0x20000D6")]
public class ExplosionsShaderColorGradient : MonoBehaviour
{
	[Token(Token = "0x4000477")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string ShaderProperty;

	[Token(Token = "0x4000478")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int MaterialID;

	[Token(Token = "0x4000479")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Gradient Color;

	[Token(Token = "0x400047A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float TimeMultiplier;

	[Token(Token = "0x400047B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool canUpdate;

	[Token(Token = "0x400047C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Material matInstance;

	[Token(Token = "0x400047D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private int propertyID;

	[Token(Token = "0x400047E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private float startTime;

	[Token(Token = "0x400047F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Color oldColor;

	[Token(Token = "0x60007D8")]
	[Address(RVA = "0xC57FF0", Offset = "0xC57FF0", VA = "0xC57FF0")]
	private void Start()
	{
	}

	[Token(Token = "0x60007D9")]
	[Address(RVA = "0xC58174", Offset = "0xC58174", VA = "0xC58174")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60007DA")]
	[Address(RVA = "0xC58198", Offset = "0xC58198", VA = "0xC58198")]
	private void Update()
	{
	}

	[Token(Token = "0x60007DB")]
	[Address(RVA = "0xC58220", Offset = "0xC58220", VA = "0xC58220")]
	public ExplosionsShaderColorGradient()
	{
	}
}
[Token(Token = "0x20000D7")]
public class ExplosionsShaderFloatCurves : MonoBehaviour
{
	[Token(Token = "0x4000480")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public string ShaderProperty;

	[Token(Token = "0x4000481")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int MaterialID;

	[Token(Token = "0x4000482")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve FloatPropertyCurve;

	[Token(Token = "0x4000483")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x4000484")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float GraphScaleMultiplier;

	[Token(Token = "0x4000485")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private bool canUpdate;

	[Token(Token = "0x4000486")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Material matInstance;

	[Token(Token = "0x4000487")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int propertyID;

	[Token(Token = "0x4000488")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private float startTime;

	[Token(Token = "0x60007DC")]
	[Address(RVA = "0xC582B4", Offset = "0xC582B4", VA = "0xC582B4")]
	private void Start()
	{
	}

	[Token(Token = "0x60007DD")]
	[Address(RVA = "0xC58418", Offset = "0xC58418", VA = "0xC58418")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60007DE")]
	[Address(RVA = "0xC5843C", Offset = "0xC5843C", VA = "0xC5843C")]
	private void Update()
	{
	}

	[Token(Token = "0x60007DF")]
	[Address(RVA = "0xC584B4", Offset = "0xC584B4", VA = "0xC584B4")]
	public ExplosionsShaderFloatCurves()
	{
	}
}
[Token(Token = "0x20000D8")]
public class ExplosionsShaderQueue : MonoBehaviour
{
	[Token(Token = "0x4000489")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int AddQueue;

	[Token(Token = "0x400048A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Renderer rend;

	[Token(Token = "0x60007E0")]
	[Address(RVA = "0xC58528", Offset = "0xC58528", VA = "0xC58528")]
	private void Start()
	{
	}

	[Token(Token = "0x60007E1")]
	[Address(RVA = "0xC58628", Offset = "0xC58628", VA = "0xC58628")]
	private void SetProjectorQueue()
	{
	}

	[Token(Token = "0x60007E2")]
	[Address(RVA = "0xC586A4", Offset = "0xC586A4", VA = "0xC586A4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60007E3")]
	[Address(RVA = "0xC58738", Offset = "0xC58738", VA = "0xC58738")]
	public ExplosionsShaderQueue()
	{
	}
}
[Token(Token = "0x20000D9")]
internal class ExplosionsSpriteSheetAnimation : MonoBehaviour
{
	[Token(Token = "0x20000DA")]
	[CompilerGenerated]
	private sealed class <UpdateCorutine>d__26 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400049F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40004A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40004A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ExplosionsSpriteSheetAnimation <>4__this;

		[Token(Token = "0x1700005C")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60007F2")]
			[Address(RVA = "0xC5908C", Offset = "0xC5908C", VA = "0xC5908C", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005D")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60007F4")]
			[Address(RVA = "0xC590D4", Offset = "0xC590D4", VA = "0xC590D4", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60007EF")]
		[Address(RVA = "0xC58B7C", Offset = "0xC58B7C", VA = "0xC58B7C")]
		[DebuggerHidden]
		public <UpdateCorutine>d__26(int <>1__state)
		{
		}

		[Token(Token = "0x60007F0")]
		[Address(RVA = "0xC58F34", Offset = "0xC58F34", VA = "0xC58F34", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60007F1")]
		[Address(RVA = "0xC58F38", Offset = "0xC58F38", VA = "0xC58F38", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60007F3")]
		[Address(RVA = "0xC59094", Offset = "0xC59094", VA = "0xC59094", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x400048B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int TilesX;

	[Token(Token = "0x400048C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int TilesY;

	[Token(Token = "0x400048D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float AnimationFPS;

	[Token(Token = "0x400048E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool IsInterpolateFrames;

	[Token(Token = "0x400048F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int StartFrameOffset;

	[Token(Token = "0x4000490")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool IsLoop;

	[Token(Token = "0x4000491")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float StartDelay;

	[Token(Token = "0x4000492")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public AnimationCurve FrameOverTime;

	[Token(Token = "0x4000493")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool isInizialised;

	[Token(Token = "0x4000494")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private int index;

	[Token(Token = "0x4000495")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int count;

	[Token(Token = "0x4000496")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int allCount;

	[Token(Token = "0x4000497")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float animationLifeTime;

	[Token(Token = "0x4000498")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private bool isVisible;

	[Token(Token = "0x4000499")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	private bool isCorutineStarted;

	[Token(Token = "0x400049A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Renderer currentRenderer;

	[Token(Token = "0x400049B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Material instanceMaterial;

	[Token(Token = "0x400049C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float currentInterpolatedTime;

	[Token(Token = "0x400049D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float animationStartTime;

	[Token(Token = "0x400049E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private bool animationStoped;

	[Token(Token = "0x60007E4")]
	[Address(RVA = "0xC58748", Offset = "0xC58748", VA = "0xC58748")]
	private void Start()
	{
	}

	[Token(Token = "0x60007E5")]
	[Address(RVA = "0xC587B0", Offset = "0xC587B0", VA = "0xC587B0")]
	private void InitDefaultVariables()
	{
	}

	[Token(Token = "0x60007E6")]
	[Address(RVA = "0xC589D8", Offset = "0xC589D8", VA = "0xC589D8")]
	private void Play()
	{
	}

	[Token(Token = "0x60007E7")]
	[Address(RVA = "0xC58AD0", Offset = "0xC58AD0", VA = "0xC58AD0")]
	private void PlayDelay()
	{
	}

	[Token(Token = "0x60007E8")]
	[Address(RVA = "0xC58AF0", Offset = "0xC58AF0", VA = "0xC58AF0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60007E9")]
	[Address(RVA = "0xC58B20", Offset = "0xC58B20", VA = "0xC58B20")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60007EA")]
	[Address(RVA = "0xC58A68", Offset = "0xC58A68", VA = "0xC58A68")]
	[IteratorStateMachine(typeof(<UpdateCorutine>d__26))]
	private IEnumerator UpdateCorutine()
	{
		return null;
	}

	[Token(Token = "0x60007EB")]
	[Address(RVA = "0xC58BA4", Offset = "0xC58BA4", VA = "0xC58BA4")]
	private void UpdateFrame()
	{
	}

	[Token(Token = "0x60007EC")]
	[Address(RVA = "0xC58CC8", Offset = "0xC58CC8", VA = "0xC58CC8")]
	private void Update()
	{
	}

	[Token(Token = "0x60007ED")]
	[Address(RVA = "0xC58E5C", Offset = "0xC58E5C", VA = "0xC58E5C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x60007EE")]
	[Address(RVA = "0xC58EE8", Offset = "0xC58EE8", VA = "0xC58EE8")]
	public ExplosionsSpriteSheetAnimation()
	{
	}
}
[Token(Token = "0x20000DB")]
public class StormVFXTerrainDemoCamera : MonoBehaviour
{
	[Token(Token = "0x40004A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float moveSpeed;

	[Token(Token = "0x40004A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float height;

	[Token(Token = "0x40004A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Space]
	public float acceleration;

	[Token(Token = "0x40004A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float deceleration;

	[Token(Token = "0x40004A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector3 velocity;

	[Token(Token = "0x60007F5")]
	[Address(RVA = "0xC590DC", Offset = "0xC590DC", VA = "0xC590DC")]
	private void Start()
	{
	}

	[Token(Token = "0x60007F6")]
	[Address(RVA = "0xC590E0", Offset = "0xC590E0", VA = "0xC590E0")]
	private void Update()
	{
	}

	[Token(Token = "0x60007F7")]
	[Address(RVA = "0xC59630", Offset = "0xC59630", VA = "0xC59630")]
	public StormVFXTerrainDemoCamera()
	{
	}
}
[Token(Token = "0x20000DC")]
public class StormVFXTerrainDemoFollowTargetPosition : MonoBehaviour
{
	[Token(Token = "0x40004A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x60007F8")]
	[Address(RVA = "0xC59644", Offset = "0xC59644", VA = "0xC59644")]
	private void Start()
	{
	}

	[Token(Token = "0x60007F9")]
	[Address(RVA = "0xC59648", Offset = "0xC59648", VA = "0xC59648")]
	private void Update()
	{
	}

	[Token(Token = "0x60007FA")]
	[Address(RVA = "0xC5964C", Offset = "0xC5964C", VA = "0xC5964C")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60007FB")]
	[Address(RVA = "0xC5968C", Offset = "0xC5968C", VA = "0xC5968C")]
	public StormVFXTerrainDemoFollowTargetPosition()
	{
	}
}
[Token(Token = "0x20000DD")]
public class ParticleSystemTimeRemap : MonoBehaviour
{
	[Token(Token = "0x40004A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem[] particleSystems;

	[Token(Token = "0x40004A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float[] startTimes;

	[Token(Token = "0x40004AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float[] simulationTimes;

	[Token(Token = "0x40004AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float startTime;

	[Token(Token = "0x40004AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float simulationSpeedScale;

	[Token(Token = "0x40004AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool useFixedDeltaTime;

	[Token(Token = "0x40004AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool gameObjectDeactivated;

	[Token(Token = "0x40004AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
	public bool reverseSimulation;

	[Token(Token = "0x40004B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float elapsedTime;

	[Token(Token = "0x40004B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AnimationCurve simulationSpeedOverTime;

	[Token(Token = "0x60007FC")]
	[Address(RVA = "0xC59694", Offset = "0xC59694", VA = "0xC59694")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60007FD")]
	[Address(RVA = "0xC59864", Offset = "0xC59864", VA = "0xC59864")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60007FE")]
	[Address(RVA = "0xC598C4", Offset = "0xC598C4", VA = "0xC598C4")]
	private void Update()
	{
	}

	[Token(Token = "0x60007FF")]
	[Address(RVA = "0xC59C44", Offset = "0xC59C44", VA = "0xC59C44")]
	public ParticleSystemTimeRemap()
	{
	}
}
[Token(Token = "0x20000DE")]
public class RewindParticleSystem : MonoBehaviour
{
	[Token(Token = "0x40004B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem[] particleSystems;

	[Token(Token = "0x40004B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float[] startTimes;

	[Token(Token = "0x40004B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float[] simulationTimes;

	[Token(Token = "0x40004B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float startTime;

	[Token(Token = "0x40004B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float simulationSpeedScale;

	[Token(Token = "0x40004B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool useFixedDeltaTime;

	[Token(Token = "0x40004B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	private bool gameObjectDeactivated;

	[Token(Token = "0x6000800")]
	[Address(RVA = "0xC59C8C", Offset = "0xC59C8C", VA = "0xC59C8C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000801")]
	[Address(RVA = "0xC59E24", Offset = "0xC59E24", VA = "0xC59E24")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000802")]
	[Address(RVA = "0xC59E84", Offset = "0xC59E84", VA = "0xC59E84")]
	private void Update()
	{
	}

	[Token(Token = "0x6000803")]
	[Address(RVA = "0xC5A17C", Offset = "0xC5A17C", VA = "0xC5A17C")]
	public RewindParticleSystem()
	{
	}
}
[Token(Token = "0x20000DF")]
public class RewindParticleSystemSimple : MonoBehaviour
{
	[Token(Token = "0x40004B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem[] particleSystems;

	[Token(Token = "0x40004BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float simulationTime;

	[Token(Token = "0x40004BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float startTime;

	[Token(Token = "0x40004BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float internalStartTime;

	[Token(Token = "0x40004BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private bool gameObjectDeactivated;

	[Token(Token = "0x40004BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float simulationSpeed;

	[Token(Token = "0x40004BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool useFixedDeltaTime;

	[Token(Token = "0x40004C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool rewind;

	[Token(Token = "0x6000804")]
	[Address(RVA = "0xC5A198", Offset = "0xC5A198", VA = "0xC5A198")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000805")]
	[Address(RVA = "0xC5A294", Offset = "0xC5A294", VA = "0xC5A294")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000806")]
	[Address(RVA = "0xC5A2F4", Offset = "0xC5A2F4", VA = "0xC5A2F4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000807")]
	[Address(RVA = "0xC5A4F8", Offset = "0xC5A4F8", VA = "0xC5A4F8")]
	public RewindParticleSystemSimple()
	{
	}
}
[Token(Token = "0x20000E0")]
public class RewindParticleSystemSuperSimple : MonoBehaviour
{
	[Token(Token = "0x40004C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ParticleSystem[] particleSystems;

	[Token(Token = "0x40004C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float[] simulationTimes;

	[Token(Token = "0x40004C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float startTime;

	[Token(Token = "0x40004C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float simulationSpeedScale;

	[Token(Token = "0x6000808")]
	[Address(RVA = "0xC5A518", Offset = "0xC5A518", VA = "0xC5A518")]
	private void Initialize()
	{
	}

	[Token(Token = "0x6000809")]
	[Address(RVA = "0xC5A59C", Offset = "0xC5A59C", VA = "0xC5A59C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600080A")]
	[Address(RVA = "0xC5A62C", Offset = "0xC5A62C", VA = "0xC5A62C")]
	private void Update()
	{
	}

	[Token(Token = "0x600080B")]
	[Address(RVA = "0xC5A90C", Offset = "0xC5A90C", VA = "0xC5A90C")]
	public RewindParticleSystemSuperSimple()
	{
	}
}
[Token(Token = "0x20000E1")]
public class ParticleForceFieldsDemo : MonoBehaviour
{
	[Token(Token = "0x40004C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Header("Overview")]
	public Text FPSText;

	[Token(Token = "0x40004C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text particleCountText;

	[Token(Token = "0x40004C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Toggle postProcessingToggle;

	[Token(Token = "0x40004C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public MonoBehaviour postProcessing;

	[Token(Token = "0x40004C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	[Header("Particle System Settings")]
	public ParticleSystem particleSystem;

	[Token(Token = "0x40004CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private ParticleSystem.MainModule particleSystemMainModule;

	[Token(Token = "0x40004CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ParticleSystem.EmissionModule particleSystemEmissionModule;

	[Token(Token = "0x40004CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Text maxParticlesText;

	[Token(Token = "0x40004CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Text particlesPerSecondText;

	[Token(Token = "0x40004CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public UnityEngine.UI.Slider maxParticlesSlider;

	[Token(Token = "0x40004CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public UnityEngine.UI.Slider particlesPerSecondSlider;

	[Token(Token = "0x40004D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	[Header("Attraction Particle Force Field Settings")]
	public AttractionParticleForceField attractionParticleForceField;

	[Token(Token = "0x40004D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Text attractionParticleForceFieldRadiusText;

	[Token(Token = "0x40004D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public Text attractionParticleForceFieldMaxForceText;

	[Token(Token = "0x40004D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public Text attractionParticleForceFieldArrivalRadiusText;

	[Token(Token = "0x40004D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	public Text attractionParticleForceFieldArrivedRadiusText;

	[Token(Token = "0x40004D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public Text attractionParticleForceFieldPositionTextX;

	[Token(Token = "0x40004D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public Text attractionParticleForceFieldPositionTextY;

	[Token(Token = "0x40004D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public Text attractionParticleForceFieldPositionTextZ;

	[Token(Token = "0x40004D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	public UnityEngine.UI.Slider attractionParticleForceFieldRadiusSlider;

	[Token(Token = "0x40004D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	public UnityEngine.UI.Slider attractionParticleForceFieldMaxForceSlider;

	[Token(Token = "0x40004DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	public UnityEngine.UI.Slider attractionParticleForceFieldArrivalRadiusSlider;

	[Token(Token = "0x40004DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	public UnityEngine.UI.Slider attractionParticleForceFieldArrivedRadiusSlider;

	[Token(Token = "0x40004DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	public UnityEngine.UI.Slider attractionParticleForceFieldPositionSliderX;

	[Token(Token = "0x40004DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	public UnityEngine.UI.Slider attractionParticleForceFieldPositionSliderY;

	[Token(Token = "0x40004DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	public UnityEngine.UI.Slider attractionParticleForceFieldPositionSliderZ;

	[Token(Token = "0x40004DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	[Header("Vortex Particle Force Field Settings")]
	public VortexParticleForceField vortexParticleForceField;

	[Token(Token = "0x40004E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	public Text vortexParticleForceFieldRadiusText;

	[Token(Token = "0x40004E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	public Text vortexParticleForceFieldMaxForceText;

	[Token(Token = "0x40004E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
	public Text vortexParticleForceFieldRotationTextX;

	[Token(Token = "0x40004E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	public Text vortexParticleForceFieldRotationTextY;

	[Token(Token = "0x40004E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	public Text vortexParticleForceFieldRotationTextZ;

	[Token(Token = "0x40004E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	public Text vortexParticleForceFieldPositionTextX;

	[Token(Token = "0x40004E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
	public Text vortexParticleForceFieldPositionTextY;

	[Token(Token = "0x40004E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
	public Text vortexParticleForceFieldPositionTextZ;

	[Token(Token = "0x40004E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
	public UnityEngine.UI.Slider vortexParticleForceFieldRadiusSlider;

	[Token(Token = "0x40004E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
	public UnityEngine.UI.Slider vortexParticleForceFieldMaxForceSlider;

	[Token(Token = "0x40004EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
	public UnityEngine.UI.Slider vortexParticleForceFieldRotationSliderX;

	[Token(Token = "0x40004EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
	public UnityEngine.UI.Slider vortexParticleForceFieldRotationSliderY;

	[Token(Token = "0x40004EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
	public UnityEngine.UI.Slider vortexParticleForceFieldRotationSliderZ;

	[Token(Token = "0x40004ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
	public UnityEngine.UI.Slider vortexParticleForceFieldPositionSliderX;

	[Token(Token = "0x40004EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
	public UnityEngine.UI.Slider vortexParticleForceFieldPositionSliderY;

	[Token(Token = "0x40004EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
	public UnityEngine.UI.Slider vortexParticleForceFieldPositionSliderZ;

	[Token(Token = "0x600080C")]
	[Address(RVA = "0xC5A920", Offset = "0xC5A920", VA = "0xC5A920")]
	private void Start()
	{
	}

	[Token(Token = "0x600080D")]
	[Address(RVA = "0xC5B3C0", Offset = "0xC5B3C0", VA = "0xC5B3C0")]
	private void Update()
	{
	}

	[Token(Token = "0x600080E")]
	[Address(RVA = "0xC5B4CC", Offset = "0xC5B4CC", VA = "0xC5B4CC")]
	public void ReloadScene()
	{
	}

	[Token(Token = "0x600080F")]
	[Address(RVA = "0xC5B53C", Offset = "0xC5B53C", VA = "0xC5B53C")]
	public void SetMaxParticles(float value)
	{
	}

	[Token(Token = "0x6000810")]
	[Address(RVA = "0xC5B5F4", Offset = "0xC5B5F4", VA = "0xC5B5F4")]
	public void SetParticleEmissionPerSecond(float value)
	{
	}

	[Token(Token = "0x6000811")]
	[Address(RVA = "0xC5B6BC", Offset = "0xC5B6BC", VA = "0xC5B6BC")]
	public void SetAttractionParticleForceFieldRadius(float value)
	{
	}

	[Token(Token = "0x6000812")]
	[Address(RVA = "0xC5B764", Offset = "0xC5B764", VA = "0xC5B764")]
	public void SetAttractionParticleForceFieldMaxForce(float value)
	{
	}

	[Token(Token = "0x6000813")]
	[Address(RVA = "0xC5B80C", Offset = "0xC5B80C", VA = "0xC5B80C")]
	public void SetAttractionParticleForceFieldArrivalRadius(float value)
	{
	}

	[Token(Token = "0x6000814")]
	[Address(RVA = "0xC5B8B4", Offset = "0xC5B8B4", VA = "0xC5B8B4")]
	public void SetAttractionParticleForceFieldArrivedRadius(float value)
	{
	}

	[Token(Token = "0x6000815")]
	[Address(RVA = "0xC5B95C", Offset = "0xC5B95C", VA = "0xC5B95C")]
	public void SetAttractionParticleForceFieldPositionX(float value)
	{
	}

	[Token(Token = "0x6000816")]
	[Address(RVA = "0xC5BA4C", Offset = "0xC5BA4C", VA = "0xC5BA4C")]
	public void SetAttractionParticleForceFieldPositionY(float value)
	{
	}

	[Token(Token = "0x6000817")]
	[Address(RVA = "0xC5BB3C", Offset = "0xC5BB3C", VA = "0xC5BB3C")]
	public void SetAttractionParticleForceFieldPositionZ(float value)
	{
	}

	[Token(Token = "0x6000818")]
	[Address(RVA = "0xC5BC2C", Offset = "0xC5BC2C", VA = "0xC5BC2C")]
	public void SetVortexParticleForceFieldRadius(float value)
	{
	}

	[Token(Token = "0x6000819")]
	[Address(RVA = "0xC5BCD4", Offset = "0xC5BCD4", VA = "0xC5BCD4")]
	public void SetVortexParticleForceFieldMaxForce(float value)
	{
	}

	[Token(Token = "0x600081A")]
	[Address(RVA = "0xC5BD7C", Offset = "0xC5BD7C", VA = "0xC5BD7C")]
	public void SetVortexParticleForceFieldRotationX(float value)
	{
	}

	[Token(Token = "0x600081B")]
	[Address(RVA = "0xC5BE6C", Offset = "0xC5BE6C", VA = "0xC5BE6C")]
	public void SetVortexParticleForceFieldRotationY(float value)
	{
	}

	[Token(Token = "0x600081C")]
	[Address(RVA = "0xC5BF5C", Offset = "0xC5BF5C", VA = "0xC5BF5C")]
	public void SetVortexParticleForceFieldRotationZ(float value)
	{
	}

	[Token(Token = "0x600081D")]
	[Address(RVA = "0xC5C04C", Offset = "0xC5C04C", VA = "0xC5C04C")]
	public void SetVortexParticleForceFieldPositionX(float value)
	{
	}

	[Token(Token = "0x600081E")]
	[Address(RVA = "0xC5C13C", Offset = "0xC5C13C", VA = "0xC5C13C")]
	public void SetVortexParticleForceFieldPositionY(float value)
	{
	}

	[Token(Token = "0x600081F")]
	[Address(RVA = "0xC5C22C", Offset = "0xC5C22C", VA = "0xC5C22C")]
	public void SetVortexParticleForceFieldPositionZ(float value)
	{
	}

	[Token(Token = "0x6000820")]
	[Address(RVA = "0xC5C31C", Offset = "0xC5C31C", VA = "0xC5C31C")]
	public ParticleForceFieldsDemo()
	{
	}
}
[Token(Token = "0x20000E2")]
public class ParticleForceFieldsDemo_CameraRig : MonoBehaviour
{
	[Token(Token = "0x40004F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform pivot;

	[Token(Token = "0x40004F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 targetRotation;

	[Token(Token = "0x40004F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Range(0f, 90f)]
	public float rotationLimit;

	[Token(Token = "0x40004F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float rotationSpeed;

	[Token(Token = "0x40004F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float rotationLerpSpeed;

	[Token(Token = "0x40004F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 startRotation;

	[Token(Token = "0x6000821")]
	[Address(RVA = "0xC5C324", Offset = "0xC5C324", VA = "0xC5C324")]
	private void Start()
	{
	}

	[Token(Token = "0x6000822")]
	[Address(RVA = "0xC5C360", Offset = "0xC5C360", VA = "0xC5C360")]
	private void Update()
	{
	}

	[Token(Token = "0x6000823")]
	[Address(RVA = "0xC5C55C", Offset = "0xC5C55C", VA = "0xC5C55C")]
	public ParticleForceFieldsDemo_CameraRig()
	{
	}
}
[Token(Token = "0x20000E3")]
public class ParticlePlexusDemo_CameraRig : MonoBehaviour
{
	[Token(Token = "0x40004F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform pivot;

	[Token(Token = "0x40004F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 targetRotation;

	[Token(Token = "0x40004F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	[Range(0f, 90f)]
	public float rotationLimit;

	[Token(Token = "0x40004F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float rotationSpeed;

	[Token(Token = "0x40004FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float rotationLerpSpeed;

	[Token(Token = "0x40004FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 startRotation;

	[Token(Token = "0x6000824")]
	[Address(RVA = "0xC5C578", Offset = "0xC5C578", VA = "0xC5C578")]
	private void Start()
	{
	}

	[Token(Token = "0x6000825")]
	[Address(RVA = "0xC5C5B4", Offset = "0xC5C5B4", VA = "0xC5C5B4")]
	private void Update()
	{
	}

	[Token(Token = "0x6000826")]
	[Address(RVA = "0xC5C7B0", Offset = "0xC5C7B0", VA = "0xC5C7B0")]
	public ParticlePlexusDemo_CameraRig()
	{
	}
}
[Token(Token = "0x20000E4")]
public class DemoScene : MonoBehaviour
{
	[Token(Token = "0x40004FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] prefabs;

	[Token(Token = "0x40004FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Text txtLabel;

	[Token(Token = "0x6000827")]
	[Address(RVA = "0xC5C7CC", Offset = "0xC5C7CC", VA = "0xC5C7CC")]
	public void ShowEffect1()
	{
	}

	[Token(Token = "0x6000828")]
	[Address(RVA = "0xC5C878", Offset = "0xC5C878", VA = "0xC5C878")]
	public void ShowEffect2()
	{
	}

	[Token(Token = "0x6000829")]
	[Address(RVA = "0xC5C924", Offset = "0xC5C924", VA = "0xC5C924")]
	public void ShowEffect3()
	{
	}

	[Token(Token = "0x600082A")]
	[Address(RVA = "0xC5C9D0", Offset = "0xC5C9D0", VA = "0xC5C9D0")]
	public DemoScene()
	{
	}
}
[Token(Token = "0x20000E5")]
public class RFX4_AudioCurves : MonoBehaviour
{
	[Token(Token = "0x40004FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve AudioCurve;

	[Token(Token = "0x40004FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x4000500")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public bool IsLoop;

	[Token(Token = "0x4000501")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
	private bool canUpdate;

	[Token(Token = "0x4000502")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float startTime;

	[Token(Token = "0x4000503")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private AudioSource audioSource;

	[Token(Token = "0x4000504")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float startVolume;

	[Token(Token = "0x600082B")]
	[Address(RVA = "0xC5C9D8", Offset = "0xC5C9D8", VA = "0xC5C9D8")]
	private void Awake()
	{
	}

	[Token(Token = "0x600082C")]
	[Address(RVA = "0xC5CA60", Offset = "0xC5CA60", VA = "0xC5CA60")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600082D")]
	[Address(RVA = "0xC5CA84", Offset = "0xC5CA84", VA = "0xC5CA84")]
	private void Update()
	{
	}

	[Token(Token = "0x600082E")]
	[Address(RVA = "0xC5CB10", Offset = "0xC5CB10", VA = "0xC5CB10")]
	public RFX4_AudioCurves()
	{
	}
}
[Token(Token = "0x20000E6")]
public class RFX4_LightCurves : MonoBehaviour
{
	[Token(Token = "0x4000505")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve LightCurve;

	[Token(Token = "0x4000506")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x4000507")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float GraphIntensityMultiplier;

	[Token(Token = "0x4000508")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool IsLoop;

	[Token(Token = "0x4000509")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool UseShadowsIfPossible;

	[Token(Token = "0x400050A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	[HideInInspector]
	public bool canUpdate;

	[Token(Token = "0x400050B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float startTime;

	[Token(Token = "0x400050C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Light lightSource;

	[Token(Token = "0x600082F")]
	[Address(RVA = "0xC5CB4C", Offset = "0xC5CB4C", VA = "0xC5CB4C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000830")]
	[Address(RVA = "0xC5CBC8", Offset = "0xC5CBC8", VA = "0xC5CBC8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000831")]
	[Address(RVA = "0xC5CBEC", Offset = "0xC5CBEC", VA = "0xC5CBEC")]
	private void Update()
	{
	}

	[Token(Token = "0x6000832")]
	[Address(RVA = "0xC5CC90", Offset = "0xC5CC90", VA = "0xC5CC90")]
	public RFX4_LightCurves()
	{
	}
}
[Token(Token = "0x20000E7")]
public class RFX4_PhysicsForceCurves : MonoBehaviour
{
	[Token(Token = "0x400050D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float ForceRadius;

	[Token(Token = "0x400050E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float ForceMultiplier;

	[Token(Token = "0x400050F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve ForceCurve;

	[Token(Token = "0x4000510")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public ForceMode ForceMode;

	[Token(Token = "0x4000511")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x4000512")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float GraphIntensityMultiplier;

	[Token(Token = "0x4000513")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool IsLoop;

	[Token(Token = "0x4000514")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float DestoryDistance;

	[Token(Token = "0x4000515")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public bool UseDistanceScale;

	[Token(Token = "0x4000516")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AnimationCurve DistanceScaleCurve;

	[Token(Token = "0x4000517")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool UseUPVector;

	[Token(Token = "0x4000518")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AnimationCurve DragCurve;

	[Token(Token = "0x4000519")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float DragGraphTimeMultiplier;

	[Token(Token = "0x400051A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public float DragGraphIntensityMultiplier;

	[Token(Token = "0x400051B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public string AffectedName;

	[Token(Token = "0x400051C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[HideInInspector]
	public float forceAdditionalMultiplier;

	[Token(Token = "0x400051D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private bool canUpdate;

	[Token(Token = "0x400051E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float startTime;

	[Token(Token = "0x400051F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Transform t;

	[Token(Token = "0x6000833")]
	[Address(RVA = "0xC5CCCC", Offset = "0xC5CCCC", VA = "0xC5CCCC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000834")]
	[Address(RVA = "0xC5CCE8", Offset = "0xC5CCE8", VA = "0xC5CCE8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000835")]
	[Address(RVA = "0xC5CD14", Offset = "0xC5CD14", VA = "0xC5CD14")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000836")]
	[Address(RVA = "0xC5D2F4", Offset = "0xC5D2F4", VA = "0xC5D2F4")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000837")]
	[Address(RVA = "0xC5D348", Offset = "0xC5D348", VA = "0xC5D348")]
	public RFX4_PhysicsForceCurves()
	{
	}
}
[Token(Token = "0x20000E8")]
public class RFX4_ScaleCurves : MonoBehaviour
{
	[Token(Token = "0x4000520")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve FloatCurve;

	[Token(Token = "0x4000521")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x4000522")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float GraphIntensityMultiplier;

	[Token(Token = "0x4000523")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool IsLoop;

	[Token(Token = "0x4000524")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool canUpdate;

	[Token(Token = "0x4000525")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float startTime;

	[Token(Token = "0x4000526")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform t;

	[Token(Token = "0x4000527")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int nameId;

	[Token(Token = "0x4000528")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Projector proj;

	[Token(Token = "0x4000529")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Vector3 startScale;

	[Token(Token = "0x6000838")]
	[Address(RVA = "0xC5D3EC", Offset = "0xC5D3EC", VA = "0xC5D3EC")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000839")]
	[Address(RVA = "0xC5D4C4", Offset = "0xC5D4C4", VA = "0xC5D4C4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600083A")]
	[Address(RVA = "0xC5D538", Offset = "0xC5D538", VA = "0xC5D538")]
	private void Update()
	{
	}

	[Token(Token = "0x600083B")]
	[Address(RVA = "0xC5D644", Offset = "0xC5D644", VA = "0xC5D644")]
	public RFX4_ScaleCurves()
	{
	}
}
[Token(Token = "0x20000E9")]
public class RFX4_ShaderColorGradient : MonoBehaviour
{
	[Token(Token = "0x400052A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RFX4_ShaderProperties ShaderColorProperty;

	[Token(Token = "0x400052B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Gradient Color;

	[Token(Token = "0x400052C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float TimeMultiplier;

	[Token(Token = "0x400052D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool IsLoop;

	[Token(Token = "0x400052E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[HideInInspector]
	public float HUE;

	[Token(Token = "0x400052F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	[HideInInspector]
	public bool canUpdate;

	[Token(Token = "0x4000530")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int propertyID;

	[Token(Token = "0x4000531")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float startTime;

	[Token(Token = "0x4000532")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Color startColor;

	[Token(Token = "0x4000533")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool isInitialized;

	[Token(Token = "0x4000534")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private string shaderProperty;

	[Token(Token = "0x4000535")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private MaterialPropertyBlock props;

	[Token(Token = "0x4000536")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Renderer rend;

	[Token(Token = "0x600083C")]
	[Address(RVA = "0xC5D680", Offset = "0xC5D680", VA = "0xC5D680")]
	private void Awake()
	{
	}

	[Token(Token = "0x600083D")]
	[Address(RVA = "0xC5D7C0", Offset = "0xC5D7C0", VA = "0xC5D7C0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600083E")]
	[Address(RVA = "0xC5D89C", Offset = "0xC5D89C", VA = "0xC5D89C")]
	private void Update()
	{
	}

	[Token(Token = "0x600083F")]
	[Address(RVA = "0xC5DB04", Offset = "0xC5DB04", VA = "0xC5DB04")]
	public RFX4_ShaderColorGradient()
	{
	}
}
[Token(Token = "0x20000EA")]
public class RFX4_ShaderFloatCurve : MonoBehaviour
{
	[Token(Token = "0x4000537")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public RFX4_ShaderProperties ShaderFloatProperty;

	[Token(Token = "0x4000538")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public AnimationCurve FloatCurve;

	[Token(Token = "0x4000539")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x400053A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float GraphIntensityMultiplier;

	[Token(Token = "0x400053B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool IsLoop;

	[Token(Token = "0x400053C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
	private bool canUpdate;

	[Token(Token = "0x400053D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float startTime;

	[Token(Token = "0x400053E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int propertyID;

	[Token(Token = "0x400053F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private string shaderProperty;

	[Token(Token = "0x4000540")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool isInitialized;

	[Token(Token = "0x4000541")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private MaterialPropertyBlock props;

	[Token(Token = "0x4000542")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Renderer rend;

	[Token(Token = "0x6000840")]
	[Address(RVA = "0xC5DB7C", Offset = "0xC5DB7C", VA = "0xC5DB7C")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000841")]
	[Address(RVA = "0xC5DC90", Offset = "0xC5DC90", VA = "0xC5DC90")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000842")]
	[Address(RVA = "0xC5DD0C", Offset = "0xC5DD0C", VA = "0xC5DD0C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000843")]
	[Address(RVA = "0xC5DDC0", Offset = "0xC5DDC0", VA = "0xC5DDC0")]
	public RFX4_ShaderFloatCurve()
	{
	}
}
[Token(Token = "0x20000EB")]
public enum RFX4_ShaderProperties
{
	[Token(Token = "0x4000544")]
	_TintColor,
	[Token(Token = "0x4000545")]
	_Cutoff,
	[Token(Token = "0x4000546")]
	_Color,
	[Token(Token = "0x4000547")]
	_EmissionColor,
	[Token(Token = "0x4000548")]
	_MaskPow,
	[Token(Token = "0x4000549")]
	_Cutout,
	[Token(Token = "0x400054A")]
	_Speed,
	[Token(Token = "0x400054B")]
	_BumpAmt,
	[Token(Token = "0x400054C")]
	_MainColor,
	[Token(Token = "0x400054D")]
	_Distortion,
	[Token(Token = "0x400054E")]
	_FresnelColor
}
[Token(Token = "0x20000EC")]
public class RFX4_WindCurves : MonoBehaviour
{
	[Token(Token = "0x400054F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve WindCurve;

	[Token(Token = "0x4000550")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float GraphTimeMultiplier;

	[Token(Token = "0x4000551")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float GraphIntensityMultiplier;

	[Token(Token = "0x4000552")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool IsLoop;

	[Token(Token = "0x4000553")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	private bool canUpdate;

	[Token(Token = "0x4000554")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float startTime;

	[Token(Token = "0x4000555")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private WindZone windZone;

	[Token(Token = "0x6000844")]
	[Address(RVA = "0xC5DE04", Offset = "0xC5DE04", VA = "0xC5DE04")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000845")]
	[Address(RVA = "0xC5DEAC", Offset = "0xC5DEAC", VA = "0xC5DEAC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000846")]
	[Address(RVA = "0xC5DED0", Offset = "0xC5DED0", VA = "0xC5DED0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000847")]
	[Address(RVA = "0xC5DF5C", Offset = "0xC5DF5C", VA = "0xC5DF5C")]
	public RFX4_WindCurves()
	{
	}
}
[Token(Token = "0x20000ED")]
public class RFX4_EffectSettings : MonoBehaviour
{
	[Token(Token = "0x20000EE")]
	[CompilerGenerated]
	private sealed class <Fadeout>d__32 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x400056F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x4000570")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x4000571")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RFX4_EffectSettings <>4__this;

		[Token(Token = "0x1700005E")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x6000859")]
			[Address(RVA = "0xC5FAD0", Offset = "0xC5FAD0", VA = "0xC5FAD0", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700005F")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600085B")]
			[Address(RVA = "0xC5FB18", Offset = "0xC5FB18", VA = "0xC5FB18", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000856")]
		[Address(RVA = "0xC5F47C", Offset = "0xC5F47C", VA = "0xC5F47C")]
		[DebuggerHidden]
		public <Fadeout>d__32(int <>1__state)
		{
		}

		[Token(Token = "0x6000857")]
		[Address(RVA = "0xC5F9EC", Offset = "0xC5F9EC", VA = "0xC5F9EC", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x6000858")]
		[Address(RVA = "0xC5F9F0", Offset = "0xC5F9F0", VA = "0xC5F9F0", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600085A")]
		[Address(RVA = "0xC5FAD8", Offset = "0xC5FAD8", VA = "0xC5FAD8", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x4000556")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Range(0.1f, 1f)]
	public float ParticlesBudget;

	[Token(Token = "0x4000557")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool UseLightShadows;

	[Token(Token = "0x4000558")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool UseFastFlatDecalsForMobiles;

	[Token(Token = "0x4000559")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
	public bool UseCustomColor;

	[Token(Token = "0x400055A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Color EffectColor;

	[Token(Token = "0x400055B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool IsVisible;

	[Token(Token = "0x400055C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float FadeoutTime;

	[Token(Token = "0x400055D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool UseCollisionDetection;

	[Token(Token = "0x400055E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
	public bool LimitMaxDistance;

	[Token(Token = "0x400055F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float MaxDistnace;

	[Token(Token = "0x4000560")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float Mass;

	[Token(Token = "0x4000561")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public float Speed;

	[Token(Token = "0x4000562")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public float AirDrag;

	[Token(Token = "0x4000563")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public bool UseGravity;

	[Token(Token = "0x4000564")]
	private const string distortionNamePC = "KriptoFX/RFX4/Distortion";

	[Token(Token = "0x4000565")]
	private const string distortionNameMobile = "KriptoFX/RFX4/DistortionMobile";

	[Token(Token = "0x4000566")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
	private bool isCheckedDistortion;

	[Token(Token = "0x4000567")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4E")]
	private bool prevIsVisible;

	[Token(Token = "0x4000568")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private float currentFadeoutTime;

	[Token(Token = "0x4000569")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Renderer[] renderers;

	[Token(Token = "0x400056A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Renderer[] skinRenderers;

	[Token(Token = "0x400056B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Light[] lights;

	[Token(Token = "0x400056C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private ParticleSystem[] particleSystems;

	[Token(Token = "0x400056D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private AudioSource[] audioSources;

	[Token(Token = "0x400056E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private string[] colorProperties;

	[Token(Token = "0x6000848")]
	[Address(RVA = "0xC5DF98", Offset = "0xC5DF98", VA = "0xC5DF98")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000849")]
	[Address(RVA = "0xC5E0A4", Offset = "0xC5E0A4", VA = "0xC5E0A4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600084A")]
	[Address(RVA = "0xC5E71C", Offset = "0xC5E71C", VA = "0xC5E71C")]
	private void Update()
	{
	}

	[Token(Token = "0x600084B")]
	[Address(RVA = "0xC5E11C", Offset = "0xC5E11C", VA = "0xC5E11C")]
	private void ChangeParticlesBudget(float particlesMul)
	{
	}

	[Token(Token = "0x600084C")]
	[Address(RVA = "0xC5E384", Offset = "0xC5E384", VA = "0xC5E384")]
	public void ChangeParticleColor()
	{
	}

	[Token(Token = "0x600084D")]
	[Address(RVA = "0xC5E52C", Offset = "0xC5E52C", VA = "0xC5E52C")]
	public void SetFlatDecals()
	{
	}

	[Token(Token = "0x600084E")]
	[Address(RVA = "0xC5E5AC", Offset = "0xC5E5AC", VA = "0xC5E5AC")]
	public void DisableShadows()
	{
	}

	[Token(Token = "0x600084F")]
	[Address(RVA = "0xC5E524", Offset = "0xC5E524", VA = "0xC5E524")]
	private bool IsMobilePlatform()
	{
		return default(bool);
	}

	[Token(Token = "0x6000850")]
	[Address(RVA = "0xC5E76C", Offset = "0xC5E76C", VA = "0xC5E76C")]
	[IteratorStateMachine(typeof(<Fadeout>d__32))]
	private IEnumerator Fadeout()
	{
		return null;
	}

	[Token(Token = "0x6000851")]
	[Address(RVA = "0xC5F4A4", Offset = "0xC5F4A4", VA = "0xC5F4A4")]
	private void UpdateAlphaByProperties(Material mat, float overrideAlpha = -1f)
	{
	}

	[Token(Token = "0x6000852")]
	[Address(RVA = "0xC5F588", Offset = "0xC5F588", VA = "0xC5F588")]
	private void ChangeAlphaFade()
	{
	}

	[Token(Token = "0x6000853")]
	[Address(RVA = "0xC5DFA4", Offset = "0xC5DFA4", VA = "0xC5DFA4")]
	private void CacheRenderers()
	{
	}

	[Token(Token = "0x6000854")]
	[Address(RVA = "0xC5E7D4", Offset = "0xC5E7D4", VA = "0xC5E7D4")]
	private void Fadein()
	{
	}

	[Token(Token = "0x6000855")]
	[Address(RVA = "0xC5F880", Offset = "0xC5F880", VA = "0xC5F880")]
	public RFX4_EffectSettings()
	{
	}
}
[Token(Token = "0x20000EF")]
public class RFX4_CollisionPropertyDeactiavtion : MonoBehaviour
{
	[Token(Token = "0x4000572")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float DeactivateTimeDelay;

	[Token(Token = "0x4000573")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private float startTime;

	[Token(Token = "0x4000574")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private WindZone windZone;

	[Token(Token = "0x4000575")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem ps;

	[Token(Token = "0x4000576")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem.CollisionModule collisionModule;

	[Token(Token = "0x600085C")]
	[Address(RVA = "0xC5FB20", Offset = "0xC5FB20", VA = "0xC5FB20")]
	private void Awake()
	{
	}

	[Token(Token = "0x600085D")]
	[Address(RVA = "0xC5FB84", Offset = "0xC5FB84", VA = "0xC5FB84")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600085E")]
	[Address(RVA = "0xC5FBAC", Offset = "0xC5FBAC", VA = "0xC5FBAC")]
	private void Update()
	{
	}

	[Token(Token = "0x600085F")]
	[Address(RVA = "0xC5FBE8", Offset = "0xC5FBE8", VA = "0xC5FBE8")]
	public RFX4_CollisionPropertyDeactiavtion()
	{
	}
}
[Token(Token = "0x20000F0")]
public class RFX4_ParticleGravityDelay : MonoBehaviour
{
	[Token(Token = "0x4000577")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve GravityByTime;

	[Token(Token = "0x4000578")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float TimeMultiplier;

	[Token(Token = "0x4000579")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	[Space]
	public float GravityMultiplierMin;

	[Token(Token = "0x400057A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float GravityMultiplierMax;

	[Token(Token = "0x400057B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem.MainModule main;

	[Token(Token = "0x400057C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float startTime;

	[Token(Token = "0x400057D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float startMinGrav;

	[Token(Token = "0x400057E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float startMaxGrav;

	[Token(Token = "0x6000860")]
	[Address(RVA = "0xC5FBF8", Offset = "0xC5FBF8", VA = "0xC5FBF8")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000861")]
	[Address(RVA = "0xC5FCB8", Offset = "0xC5FCB8", VA = "0xC5FCB8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000862")]
	[Address(RVA = "0xC5FD40", Offset = "0xC5FD40", VA = "0xC5FD40")]
	private void Update()
	{
	}

	[Token(Token = "0x6000863")]
	[Address(RVA = "0xC5FE08", Offset = "0xC5FE08", VA = "0xC5FE08")]
	public RFX4_ParticleGravityDelay()
	{
	}
}
[Token(Token = "0x20000F1")]
[ExecuteInEditMode]
[RequireComponent(typeof(ParticleSystem))]
public class RFX4_ParticleLight : MonoBehaviour
{
	[Token(Token = "0x400057F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float LightIntencityMultiplayer;

	[Token(Token = "0x4000580")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool UseShadows;

	[Token(Token = "0x4000581")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int LightsLimit;

	[Token(Token = "0x4000582")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem ps;

	[Token(Token = "0x4000583")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x4000584")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Light[] lights;

	[Token(Token = "0x4000585")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool isLocalSpace;

	[Token(Token = "0x6000864")]
	[Address(RVA = "0xC5FE50", Offset = "0xC5FE50", VA = "0xC5FE50")]
	private void Start()
	{
	}

	[Token(Token = "0x6000865")]
	[Address(RVA = "0xC60158", Offset = "0xC60158", VA = "0xC60158")]
	private void Update()
	{
	}

	[Token(Token = "0x6000866")]
	[Address(RVA = "0xC60518", Offset = "0xC60518", VA = "0xC60518")]
	public RFX4_ParticleLight()
	{
	}
}
[Token(Token = "0x20000F2")]
[RequireComponent(typeof(ParticleSystem))]
public class RFX4_ParticleTrail : MonoBehaviour
{
	[Token(Token = "0x4000586")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject Target;

	[Token(Token = "0x4000587")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Vector2 DefaultSizeMultiplayer;

	[Token(Token = "0x4000588")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float VertexLifeTime;

	[Token(Token = "0x4000589")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float TrailLifeTime;

	[Token(Token = "0x400058A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public bool UseShaderMaterial;

	[Token(Token = "0x400058B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Material TrailMaterial;

	[Token(Token = "0x400058C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public bool UseColorOverLifeTime;

	[Token(Token = "0x400058D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Gradient ColorOverLifeTime;

	[Token(Token = "0x400058E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public RFX4_ShaderProperties colorShaderProperty;

	[Token(Token = "0x400058F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float ColorLifeTime;

	[Token(Token = "0x4000590")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool UseUvAnimation;

	[Token(Token = "0x4000591")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public int TilesX;

	[Token(Token = "0x4000592")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public int TilesY;

	[Token(Token = "0x4000593")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public int FPS;

	[Token(Token = "0x4000594")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public bool IsLoop;

	[Token(Token = "0x4000595")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	[Range(0.001f, 1f)]
	public float MinVertexDistance;

	[Token(Token = "0x4000596")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public bool GetVelocityFromParticleSystem;

	[Token(Token = "0x4000597")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	public float Gravity;

	[Token(Token = "0x4000598")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public Vector3 Force;

	[Token(Token = "0x4000599")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	public float InheritVelocity;

	[Token(Token = "0x400059A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	public float Drag;

	[Token(Token = "0x400059B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	[Range(0.001f, 10f)]
	public float Frequency;

	[Token(Token = "0x400059C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	[Range(0.001f, 10f)]
	public float OffsetSpeed;

	[Token(Token = "0x400059D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	public bool RandomTurbulenceOffset;

	[Token(Token = "0x400059E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	[Range(0.001f, 10f)]
	public float Amplitude;

	[Token(Token = "0x400059F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	public float TurbulenceStrength;

	[Token(Token = "0x40005A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	public AnimationCurve VelocityByDistance;

	[Token(Token = "0x40005A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	public float AproximatedFlyDistance;

	[Token(Token = "0x40005A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	public bool SmoothCurves;

	[Token(Token = "0x40005A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Dictionary<int, LineRenderer> dict;

	[Token(Token = "0x40005A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private ParticleSystem ps;

	[Token(Token = "0x40005A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x40005A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private TrailRenderer[] trails;

	[Token(Token = "0x40005A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Color psColor;

	[Token(Token = "0x40005A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private Transform targetT;

	[Token(Token = "0x40005A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private int layer;

	[Token(Token = "0x40005AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private bool isLocalSpace;

	[Token(Token = "0x40005AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private Transform t;

	[Token(Token = "0x6000867")]
	[Address(RVA = "0xC60530", Offset = "0xC60530", VA = "0xC60530")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000868")]
	[Address(RVA = "0xC60EEC", Offset = "0xC60EEC", VA = "0xC60EEC")]
	private void ClearTrails()
	{
	}

	[Token(Token = "0x6000869")]
	[Address(RVA = "0xC60718", Offset = "0xC60718", VA = "0xC60718")]
	private void Update()
	{
	}

	[Token(Token = "0x600086A")]
	[Address(RVA = "0xC61104", Offset = "0xC61104", VA = "0xC61104")]
	private void InitTrailRenderer(GameObject go)
	{
	}

	[Token(Token = "0x600086B")]
	[Address(RVA = "0xC60FDC", Offset = "0xC60FDC", VA = "0xC60FDC")]
	private void RemoveEmptyTrails()
	{
	}

	[Token(Token = "0x600086C")]
	[Address(RVA = "0xC611D0", Offset = "0xC611D0", VA = "0xC611D0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600086D")]
	[Address(RVA = "0xC613D0", Offset = "0xC613D0", VA = "0xC613D0")]
	public RFX4_ParticleTrail()
	{
	}
}
[Token(Token = "0x20000F3")]
[ExecuteInEditMode]
[RequireComponent(typeof(ParticleSystem))]
public class RFX4_Turbulence : MonoBehaviour
{
	[Token(Token = "0x20000F4")]
	public enum MoveMethodEnum
	{
		[Token(Token = "0x40005CA")]
		Position,
		[Token(Token = "0x40005CB")]
		Velocity,
		[Token(Token = "0x40005CC")]
		RelativePosition
	}

	[Token(Token = "0x20000F5")]
	public enum PerfomanceEnum
	{
		[Token(Token = "0x40005CE")]
		High,
		[Token(Token = "0x40005CF")]
		Low
	}

	[Token(Token = "0x40005AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float TurbulenceStrenght;

	[Token(Token = "0x40005AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool TurbulenceByTime;

	[Token(Token = "0x40005AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float TimeDelay;

	[Token(Token = "0x40005AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public AnimationCurve TurbulenceStrengthByTime;

	[Token(Token = "0x40005B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Vector3 Frequency;

	[Token(Token = "0x40005B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Vector3 OffsetSpeed;

	[Token(Token = "0x40005B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public Vector3 Amplitude;

	[Token(Token = "0x40005B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public Vector3 GlobalForce;

	[Token(Token = "0x40005B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool UseGlobalOffset;

	[Token(Token = "0x40005B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public MoveMethodEnum MoveMethod;

	[Token(Token = "0x40005B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public PerfomanceEnum Perfomance;

	[Token(Token = "0x40005B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	public float ThreshholdSpeed;

	[Token(Token = "0x40005B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public AnimationCurve VelocityByDistance;

	[Token(Token = "0x40005B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float AproximatedFlyDistance;

	[Token(Token = "0x40005BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float lastStopTime;

	[Token(Token = "0x40005BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private Vector3 currentOffset;

	[Token(Token = "0x40005BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private float deltaTime;

	[Token(Token = "0x40005BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float deltaTimeLastUpdateOffset;

	[Token(Token = "0x40005BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private ParticleSystem.Particle[] particleArray;

	[Token(Token = "0x40005BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private ParticleSystem particleSys;

	[Token(Token = "0x40005C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private float time;

	[Token(Token = "0x40005C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
	private int currentSplit;

	[Token(Token = "0x40005C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private float fpsTime;

	[Token(Token = "0x40005C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private int FPS;

	[Token(Token = "0x40005C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private int splitUpdate;

	[Token(Token = "0x40005C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private PerfomanceEnum perfomanceOldSettings;

	[Token(Token = "0x40005C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
	private bool skipFrame;

	[Token(Token = "0x40005C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Transform t;

	[Token(Token = "0x40005C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private float currentDelay;

	[Token(Token = "0x600086E")]
	[Address(RVA = "0xC61548", Offset = "0xC61548", VA = "0xC61548")]
	private void Start()
	{
	}

	[Token(Token = "0x600086F")]
	[Address(RVA = "0xC616D0", Offset = "0xC616D0", VA = "0xC616D0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000870")]
	[Address(RVA = "0xC616D8", Offset = "0xC616D8", VA = "0xC616D8")]
	private void Update()
	{
	}

	[Token(Token = "0x6000871")]
	[Address(RVA = "0xC61680", Offset = "0xC61680", VA = "0xC61680")]
	private void UpdatePerfomanceSettings()
	{
	}

	[Token(Token = "0x6000872")]
	[Address(RVA = "0xC618E4", Offset = "0xC618E4", VA = "0xC618E4")]
	private void UpdateTurbulence()
	{
	}

	[Token(Token = "0x6000873")]
	[Address(RVA = "0xC61FC0", Offset = "0xC61FC0", VA = "0xC61FC0")]
	public RFX4_Turbulence()
	{
	}
}
[Token(Token = "0x20000F6")]
public class RFX4_MobileDistortion : MonoBehaviour
{
	[Token(Token = "0x40005D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool IsActive;

	[Token(Token = "0x40005D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private CommandBuffer buf;

	[Token(Token = "0x40005D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Camera cam;

	[Token(Token = "0x40005D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private bool bufferIsAdded;

	[Token(Token = "0x6000874")]
	[Address(RVA = "0xC62058", Offset = "0xC62058", VA = "0xC62058")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000875")]
	[Address(RVA = "0xC620AC", Offset = "0xC620AC", VA = "0xC620AC")]
	private void CreateBuffer()
	{
	}

	[Token(Token = "0x6000876")]
	[Address(RVA = "0xC622F0", Offset = "0xC622F0", VA = "0xC622F0")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000877")]
	[Address(RVA = "0xC62328", Offset = "0xC62328", VA = "0xC62328")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000878")]
	[Address(RVA = "0xC622F4", Offset = "0xC622F4", VA = "0xC622F4")]
	private void AddBuffer()
	{
	}

	[Token(Token = "0x6000879")]
	[Address(RVA = "0xC6232C", Offset = "0xC6232C", VA = "0xC6232C")]
	private void RemoveBuffer()
	{
	}

	[Token(Token = "0x600087A")]
	[Address(RVA = "0xC6235C", Offset = "0xC6235C", VA = "0xC6235C")]
	private void Update()
	{
	}

	[Token(Token = "0x600087B")]
	[Address(RVA = "0xC6237C", Offset = "0xC6237C", VA = "0xC6237C")]
	private bool IsSupportedHdr()
	{
		return default(bool);
	}

	[Token(Token = "0x600087C")]
	[Address(RVA = "0xC6239C", Offset = "0xC6239C", VA = "0xC6239C")]
	public RFX4_MobileDistortion()
	{
	}
}
[Token(Token = "0x20000F7")]
public class RFX4_PerPlatformSettings : MonoBehaviour
{
	[Token(Token = "0x40005D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool DisableOnMobiles;

	[Token(Token = "0x40005D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool RenderMobileDistortion;

	[Token(Token = "0x40005D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	[Range(0.1f, 1f)]
	public float ParticleBudgetForMobiles;

	[Token(Token = "0x40005D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool isMobile;

	[Token(Token = "0x600087D")]
	[Address(RVA = "0xC623AC", Offset = "0xC623AC", VA = "0xC623AC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600087E")]
	[Address(RVA = "0xC627F8", Offset = "0xC627F8", VA = "0xC627F8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600087F")]
	[Address(RVA = "0xC62930", Offset = "0xC62930", VA = "0xC62930")]
	private void Update()
	{
	}

	[Token(Token = "0x6000880")]
	[Address(RVA = "0xC62818", Offset = "0xC62818", VA = "0xC62818")]
	private void Legacy_Rendering_Check(Camera cam)
	{
	}

	[Token(Token = "0x6000881")]
	[Address(RVA = "0xC62950", Offset = "0xC62950", VA = "0xC62950")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000882")]
	[Address(RVA = "0xC6241C", Offset = "0xC6241C", VA = "0xC6241C")]
	private bool IsMobilePlatform()
	{
		return default(bool);
	}

	[Token(Token = "0x6000883")]
	[Address(RVA = "0xC62424", Offset = "0xC62424", VA = "0xC62424")]
	private void ChangeParticlesBudget(float particlesMul)
	{
	}

	[Token(Token = "0x6000884")]
	[Address(RVA = "0xC62A3C", Offset = "0xC62A3C", VA = "0xC62A3C")]
	public RFX4_PerPlatformSettings()
	{
	}
}
[Token(Token = "0x20000F8")]
public class RFX4_CameraShake : MonoBehaviour
{
	[Token(Token = "0x20000F9")]
	[CompilerGenerated]
	private sealed class <Shake>d__12 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40005E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40005E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40005E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public RFX4_CameraShake <>4__this;

		[Token(Token = "0x40005E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float <elapsed>5__2;

		[Token(Token = "0x40005E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform <camT>5__3;

		[Token(Token = "0x40005E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 <originalCamRotation>5__4;

		[Token(Token = "0x40005E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 <direction>5__5;

		[Token(Token = "0x40005E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float <time>5__6;

		[Token(Token = "0x40005E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float <randomStart>5__7;

		[Token(Token = "0x40005EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float <distanceDamper>5__8;

		[Token(Token = "0x40005EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 <oldRotation>5__9;

		[Token(Token = "0x17000060")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x600088D")]
			[Address(RVA = "0xC63270", Offset = "0xC63270", VA = "0xC63270", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000061")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x600088F")]
			[Address(RVA = "0xC632B8", Offset = "0xC632B8", VA = "0xC632B8", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600088A")]
		[Address(RVA = "0xC62C1C", Offset = "0xC62C1C", VA = "0xC62C1C")]
		[DebuggerHidden]
		public <Shake>d__12(int <>1__state)
		{
		}

		[Token(Token = "0x600088B")]
		[Address(RVA = "0xC62C94", Offset = "0xC62C94", VA = "0xC62C94", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x600088C")]
		[Address(RVA = "0xC62C98", Offset = "0xC62C98", VA = "0xC62C98", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x600088E")]
		[Address(RVA = "0xC63278", Offset = "0xC63278", VA = "0xC63278", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40005D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public AnimationCurve ShakeCurve;

	[Token(Token = "0x40005D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Duration;

	[Token(Token = "0x40005DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float Speed;

	[Token(Token = "0x40005DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float Magnitude;

	[Token(Token = "0x40005DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float DistanceForce;

	[Token(Token = "0x40005DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float RotationDamper;

	[Token(Token = "0x40005DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool IsEnabled;

	[Token(Token = "0x40005DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	private bool isPlaying;

	[Token(Token = "0x40005E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
	[HideInInspector]
	public bool canUpdate;

	[Token(Token = "0x6000885")]
	[Address(RVA = "0xC62A4C", Offset = "0xC62A4C", VA = "0xC62A4C")]
	private void PlayShake()
	{
	}

	[Token(Token = "0x6000886")]
	[Address(RVA = "0xC62AE0", Offset = "0xC62AE0", VA = "0xC62AE0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000887")]
	[Address(RVA = "0xC62AFC", Offset = "0xC62AFC", VA = "0xC62AFC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000888")]
	[Address(RVA = "0xC62A78", Offset = "0xC62A78", VA = "0xC62A78")]
	[IteratorStateMachine(typeof(<Shake>d__12))]
	private IEnumerator Shake()
	{
		return null;
	}

	[Token(Token = "0x6000889")]
	[Address(RVA = "0xC62C44", Offset = "0xC62C44", VA = "0xC62C44")]
	public RFX4_CameraShake()
	{
	}
}
[Token(Token = "0x20000FA")]
public static class RFX4_ColorHelper
{
	[Token(Token = "0x20000FB")]
	public struct HSBColor
	{
		[Token(Token = "0x40005EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float H;

		[Token(Token = "0x40005EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float S;

		[Token(Token = "0x40005F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float B;

		[Token(Token = "0x40005F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float A;

		[Token(Token = "0x6000897")]
		[Address(RVA = "0xC632C0", Offset = "0xC632C0", VA = "0xC632C0")]
		public HSBColor(float h, float s, float b, float a)
		{
		}
	}

	[Token(Token = "0x40005EC")]
	private const float TOLERANCE = 0.0001f;

	[Token(Token = "0x40005ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static string[] colorProperties;

	[Token(Token = "0x6000890")]
	[Address(RVA = "0xC5EA08", Offset = "0xC5EA08", VA = "0xC5EA08")]
	public static HSBColor ColorToHSV(Color color)
	{
		return default(HSBColor);
	}

	[Token(Token = "0x6000891")]
	[Address(RVA = "0xC632CC", Offset = "0xC632CC", VA = "0xC632CC")]
	public static Color HSVToColor(HSBColor hsbColor)
	{
		return default(Color);
	}

	[Token(Token = "0x6000892")]
	[Address(RVA = "0xC5DA18", Offset = "0xC5DA18", VA = "0xC5DA18")]
	public static Color ConvertRGBColorByHUE(Color rgbColor, float hue)
	{
		return default(Color);
	}

	[Token(Token = "0x6000893")]
	[Address(RVA = "0xC5EB78", Offset = "0xC5EB78", VA = "0xC5EB78")]
	public static void ChangeObjectColorByHUE(GameObject go, float hue)
	{
	}

	[Token(Token = "0x6000894")]
	[Address(RVA = "0xC63500", Offset = "0xC63500", VA = "0xC63500")]
	private static Material setMatHUEColor(Material mat, string name, float hueColor)
	{
		return null;
	}

	[Token(Token = "0x6000895")]
	[Address(RVA = "0xC635C4", Offset = "0xC635C4", VA = "0xC635C4")]
	private static Material setMatAlphaColor(Material mat, string name, float alpha)
	{
		return null;
	}
}
[Token(Token = "0x20000FC")]
public class RFX4_CopyPosition : MonoBehaviour
{
	[Token(Token = "0x40005F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform CopiedTransform;

	[Token(Token = "0x40005F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform t;

	[Token(Token = "0x6000898")]
	[Address(RVA = "0xC63894", Offset = "0xC63894", VA = "0xC63894")]
	private void Start()
	{
	}

	[Token(Token = "0x6000899")]
	[Address(RVA = "0xC638B0", Offset = "0xC638B0", VA = "0xC638B0")]
	private void Update()
	{
	}

	[Token(Token = "0x600089A")]
	[Address(RVA = "0xC638E4", Offset = "0xC638E4", VA = "0xC638E4")]
	public RFX4_CopyPosition()
	{
	}
}
[Token(Token = "0x20000FD")]
[ExecuteInEditMode]
public class RFX4_CustomLight : MonoBehaviour
{
	[Token(Token = "0x40005F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Light[] ImportantLights;

	[Token(Token = "0x40005F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static int MaxLightsCount;

	[Token(Token = "0x40005F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Texture2D PointLightAttenuation;

	[Token(Token = "0x40005F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private List<Light> sceneLights;

	[Token(Token = "0x600089B")]
	[Address(RVA = "0xC638EC", Offset = "0xC638EC", VA = "0xC638EC")]
	private void Awake()
	{
	}

	[Token(Token = "0x600089C")]
	[Address(RVA = "0xC63978", Offset = "0xC63978", VA = "0xC63978")]
	private void Update()
	{
	}

	[Token(Token = "0x600089D")]
	[Address(RVA = "0xC64C90", Offset = "0xC64C90", VA = "0xC64C90")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600089E")]
	[Address(RVA = "0xC63B6C", Offset = "0xC63B6C", VA = "0xC63B6C")]
	private List<Light> GetAllLights()
	{
		return null;
	}

	[Token(Token = "0x600089F")]
	[Address(RVA = "0xC63DDC", Offset = "0xC63DDC", VA = "0xC63DDC")]
	private int FillDirectionalLights(List<Light> lights, List<Vector4> lightPositions, List<Vector4> lightColors)
	{
		return default(int);
	}

	[Token(Token = "0x60008A0")]
	[Address(RVA = "0xC643EC", Offset = "0xC643EC", VA = "0xC643EC")]
	private int FillPointLights(List<Light> lights, List<Vector4> lightPositions, List<Vector4> lightColors)
	{
		return default(int);
	}

	[Token(Token = "0x60008A1")]
	[Address(RVA = "0xC64678", Offset = "0xC64678", VA = "0xC64678")]
	private Vector4[] ListToArrayWithMaxCount(List<Vector4> list, int count)
	{
		return null;
	}

	[Token(Token = "0x60008A2")]
	[Address(RVA = "0xC64034", Offset = "0xC64034", VA = "0xC64034")]
	private List<Light> SortPointLightsByDistance(List<Light> lights)
	{
		return null;
	}

	[Token(Token = "0x60008A3")]
	[Address(RVA = "0xC647B4", Offset = "0xC647B4", VA = "0xC647B4")]
	public Color SampleLightProbesUp(Vector3 pos, float grayScaleFactor)
	{
		return default(Color);
	}

	[Token(Token = "0x60008A4")]
	[Address(RVA = "0xC64E10", Offset = "0xC64E10", VA = "0xC64E10")]
	public RFX4_CustomLight()
	{
	}
}
[Token(Token = "0x20000FE")]
public class RFX4_DeactivateByTime : MonoBehaviour
{
	[Token(Token = "0x40005F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject DeactivatedGameObject;

	[Token(Token = "0x40005F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float DeactivateTime;

	[Token(Token = "0x40005FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private bool isActiveState;

	[Token(Token = "0x40005FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private float currentTime;

	[Token(Token = "0x60008A6")]
	[Address(RVA = "0xC64E64", Offset = "0xC64E64", VA = "0xC64E64")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60008A7")]
	[Address(RVA = "0xC64E74", Offset = "0xC64E74", VA = "0xC64E74")]
	private void Update()
	{
	}

	[Token(Token = "0x60008A8")]
	[Address(RVA = "0xC64ED8", Offset = "0xC64ED8", VA = "0xC64ED8")]
	public RFX4_DeactivateByTime()
	{
	}
}
[Token(Token = "0x20000FF")]
public class RFX4_DeactivateRigidbodyByTime : MonoBehaviour
{
	[Token(Token = "0x40005FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float TimeDelayToDeactivate;

	[Token(Token = "0x60008A9")]
	[Address(RVA = "0xC64EE8", Offset = "0xC64EE8", VA = "0xC64EE8")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60008AA")]
	[Address(RVA = "0xC64F80", Offset = "0xC64F80", VA = "0xC64F80")]
	private void Deactivate()
	{
	}

	[Token(Token = "0x60008AB")]
	[Address(RVA = "0xC64FF0", Offset = "0xC64FF0", VA = "0xC64FF0")]
	public RFX4_DeactivateRigidbodyByTime()
	{
	}
}
[Token(Token = "0x2000100")]
[ExecuteInEditMode]
public class RFX4_Decal : MonoBehaviour
{
	[Token(Token = "0x40005FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool IsScreenSpace;

	[Token(Token = "0x40005FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem ps;

	[Token(Token = "0x40005FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem.MainModule psMain;

	[Token(Token = "0x4000600")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private MaterialPropertyBlock props;

	[Token(Token = "0x4000601")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private MeshRenderer rend;

	[Token(Token = "0x60008AC")]
	[Address(RVA = "0xC65000", Offset = "0xC65000", VA = "0xC65000")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60008AD")]
	[Address(RVA = "0xC65288", Offset = "0xC65288", VA = "0xC65288")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60008AE")]
	[Address(RVA = "0xC65450", Offset = "0xC65450", VA = "0xC65450")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60008AF")]
	[Address(RVA = "0xC65614", Offset = "0xC65614", VA = "0xC65614")]
	public RFX4_Decal()
	{
	}
}
[Token(Token = "0x2000101")]
public class RFX4_DemoReactivation : MonoBehaviour
{
	[Token(Token = "0x4000602")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float ReactivationTime;

	[Token(Token = "0x4000603")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject Effect;

	[Token(Token = "0x60008B0")]
	[Address(RVA = "0xC65624", Offset = "0xC65624", VA = "0xC65624")]
	private void Start()
	{
	}

	[Token(Token = "0x60008B1")]
	[Address(RVA = "0xC65678", Offset = "0xC65678", VA = "0xC65678")]
	private void Reactivate()
	{
	}

	[Token(Token = "0x60008B2")]
	[Address(RVA = "0xC656B0", Offset = "0xC656B0", VA = "0xC656B0")]
	public RFX4_DemoReactivation()
	{
	}
}
[Token(Token = "0x2000102")]
public class RFX4_EffectEvent : MonoBehaviour
{
	[Token(Token = "0x4000604")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject CharacterEffect;

	[Token(Token = "0x4000605")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform CharacterAttachPoint;

	[Token(Token = "0x4000606")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float CharacterEffect_DestroyTime;

	[Token(Token = "0x4000607")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	[Space]
	public GameObject CharacterEffect2;

	[Token(Token = "0x4000608")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Transform CharacterAttachPoint2;

	[Token(Token = "0x4000609")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public float CharacterEffect2_DestroyTime;

	[Token(Token = "0x400060A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Space]
	public GameObject MainEffect;

	[Token(Token = "0x400060B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public Transform AttachPoint;

	[Token(Token = "0x400060C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public Transform OverrideAttachPointToTarget;

	[Token(Token = "0x400060D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public float Effect_DestroyTime;

	[Token(Token = "0x400060E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	[Space]
	public GameObject AdditionalEffect;

	[Token(Token = "0x400060F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Transform AdditionalEffectAttachPoint;

	[Token(Token = "0x4000610")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	public float AdditionalEffect_DestroyTime;

	[Token(Token = "0x4000611")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	[HideInInspector]
	public bool IsMobile;

	[Token(Token = "0x60008B3")]
	[Address(RVA = "0xC656C0", Offset = "0xC656C0", VA = "0xC656C0")]
	public void ActivateEffect()
	{
	}

	[Token(Token = "0x60008B4")]
	[Address(RVA = "0xC65954", Offset = "0xC65954", VA = "0xC65954")]
	public void ActivateAdditionalEffect()
	{
	}

	[Token(Token = "0x60008B5")]
	[Address(RVA = "0xC65B40", Offset = "0xC65B40", VA = "0xC65B40")]
	public void ActivateCharacterEffect()
	{
	}

	[Token(Token = "0x60008B6")]
	[Address(RVA = "0xC65CF0", Offset = "0xC65CF0", VA = "0xC65CF0")]
	public void ActivateCharacterEffect2()
	{
	}

	[Token(Token = "0x60008B7")]
	[Address(RVA = "0xC658C8", Offset = "0xC658C8", VA = "0xC658C8")]
	private void UpdateEffectForMobileIsNeed(GameObject instance)
	{
	}

	[Token(Token = "0x60008B8")]
	[Address(RVA = "0xC65E8C", Offset = "0xC65E8C", VA = "0xC65E8C")]
	public RFX4_EffectEvent()
	{
	}
}
[Token(Token = "0x2000103")]
[ExecuteInEditMode]
[RequireComponent(typeof(Renderer))]
public class RFX4_MaterialQueue : MonoBehaviour
{
	[Token(Token = "0x4000612")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Background=1000, Geometry=2000, AlphaTest=2450, Transparent=3000, Overlay=4000")]
	public int queue;

	[Token(Token = "0x4000613")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int[] queues;

	[Token(Token = "0x60008B9")]
	[Address(RVA = "0xC65EA8", Offset = "0xC65EA8", VA = "0xC65EA8")]
	private void Start()
	{
	}

	[Token(Token = "0x60008BA")]
	[Address(RVA = "0xC66028", Offset = "0xC66028", VA = "0xC66028")]
	private void OnValidate()
	{
	}

	[Token(Token = "0x60008BB")]
	[Address(RVA = "0xC6602C", Offset = "0xC6602C", VA = "0xC6602C")]
	private void Update()
	{
	}

	[Token(Token = "0x60008BC")]
	[Address(RVA = "0xC66054", Offset = "0xC66054", VA = "0xC66054")]
	public RFX4_MaterialQueue()
	{
	}
}
[Token(Token = "0x2000104")]
public class RFX4_OnEnableResetTransform : MonoBehaviour
{
	[Token(Token = "0x4000614")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Transform t;

	[Token(Token = "0x4000615")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector3 startPosition;

	[Token(Token = "0x4000616")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private Quaternion startRotation;

	[Token(Token = "0x4000617")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private Vector3 startScale;

	[Token(Token = "0x4000618")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool isInitialized;

	[Token(Token = "0x60008BD")]
	[Address(RVA = "0xC66064", Offset = "0xC66064", VA = "0xC66064")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60008BE")]
	[Address(RVA = "0xC66128", Offset = "0xC66128", VA = "0xC66128")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60008BF")]
	[Address(RVA = "0xC661EC", Offset = "0xC661EC", VA = "0xC661EC")]
	public RFX4_OnEnableResetTransform()
	{
	}
}
[Token(Token = "0x2000105")]
public class RFX4_ParticleCollisionGameObject : MonoBehaviour
{
	[Token(Token = "0x4000619")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject InstancedGO;

	[Token(Token = "0x400061A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float DestroyDelay;

	[Token(Token = "0x400061B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject RotationParent;

	[Token(Token = "0x400061C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private List<ParticleCollisionEvent> collisionEvents;

	[Token(Token = "0x400061D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ParticleSystem initiatorPS;

	[Token(Token = "0x60008C0")]
	[Address(RVA = "0xC661F4", Offset = "0xC661F4", VA = "0xC661F4")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60008C1")]
	[Address(RVA = "0xC66268", Offset = "0xC66268", VA = "0xC66268")]
	private void OnParticleCollision(GameObject other)
	{
	}

	[Token(Token = "0x60008C2")]
	[Address(RVA = "0xC664C0", Offset = "0xC664C0", VA = "0xC664C0")]
	public RFX4_ParticleCollisionGameObject()
	{
	}
}
[Token(Token = "0x2000106")]
[ExecuteInEditMode]
public class RFX4_ParticleGravityPoint : MonoBehaviour
{
	[Token(Token = "0x400061E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform target;

	[Token(Token = "0x400061F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Force;

	[Token(Token = "0x4000620")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float StopDistance;

	[Token(Token = "0x4000621")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem ps;

	[Token(Token = "0x4000622")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private ParticleSystem.Particle[] particles;

	[Token(Token = "0x4000623")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private ParticleSystem.MainModule mainModule;

	[Token(Token = "0x60008C3")]
	[Address(RVA = "0xC66544", Offset = "0xC66544", VA = "0xC66544")]
	private void Start()
	{
	}

	[Token(Token = "0x60008C4")]
	[Address(RVA = "0xC665A8", Offset = "0xC665A8", VA = "0xC665A8")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x60008C5")]
	[Address(RVA = "0xC669C4", Offset = "0xC669C4", VA = "0xC669C4")]
	public RFX4_ParticleGravityPoint()
	{
	}
}
[Token(Token = "0x2000107")]
public class RFX4_PhysicsMotion : MonoBehaviour
{
	[Token(Token = "0x2000108")]
	public class RFX4_CollisionInfo : EventArgs
	{
		[Token(Token = "0x4000647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 HitPoint;

		[Token(Token = "0x4000648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Collider HitCollider;

		[Token(Token = "0x4000649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject HitGameObject;

		[Token(Token = "0x60008D1")]
		[Address(RVA = "0xC67824", Offset = "0xC67824", VA = "0xC67824")]
		public RFX4_CollisionInfo()
		{
		}
	}

	[Token(Token = "0x4000624")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform Target;

	[Token(Token = "0x4000625")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool UseCollisionDetect;

	[Token(Token = "0x4000626")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float MaxDistnace;

	[Token(Token = "0x4000627")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float Mass;

	[Token(Token = "0x4000628")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float Speed;

	[Token(Token = "0x4000629")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float RandomSpeedOffset;

	[Token(Token = "0x400062A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float AirDrag;

	[Token(Token = "0x400062B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool UseGravity;

	[Token(Token = "0x400062C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public ForceMode ForceMode;

	[Token(Token = "0x400062D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Vector3 AddRealtimeForce;

	[Token(Token = "0x400062E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float MinSpeed;

	[Token(Token = "0x400062F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float ColliderRadius;

	[Token(Token = "0x4000630")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public bool FreezeRotation;

	[Token(Token = "0x4000631")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
	public bool UseTargetPositionAfterCollision;

	[Token(Token = "0x4000632")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GameObject EffectOnCollision;

	[Token(Token = "0x4000633")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public bool CollisionEffectInWorldSpace;

	[Token(Token = "0x4000634")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
	public bool LookAtNormal;

	[Token(Token = "0x4000635")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	public float CollisionEffectDestroyAfter;

	[Token(Token = "0x4000636")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public GameObject[] DeactivateObjectsAfterCollision;

	[Token(Token = "0x4000637")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public VoidEvent TriggerCollisionEffect;

	[Token(Token = "0x4000638")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	[HideInInspector]
	public float HUE;

	[Token(Token = "0x4000639")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	public float BlastForce;

	[Token(Token = "0x400063A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	public bool CauseBlastDamage;

	[Token(Token = "0x400063C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Rigidbody rigid;

	[Token(Token = "0x400063D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private SphereCollider collid;

	[Token(Token = "0x400063E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private ContactPoint lastContactPoint;

	[Token(Token = "0x400063F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Collider lastCollider;

	[Token(Token = "0x4000640")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
	private Vector3 offsetColliderPoint;

	[Token(Token = "0x4000641")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
	private bool isCollided;

	[Token(Token = "0x4000642")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
	private GameObject targetAnchor;

	[Token(Token = "0x4000643")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private bool isInitializedForce;

	[Token(Token = "0x4000644")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
	private float currentSpeedOffset;

	[Token(Token = "0x4000645")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
	private RFX4_EffectSettings effectSettings;

	[Token(Token = "0x4000646")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private Vector3 _fireDirection;

	[Token(Token = "0x14000001")]
	public event EventHandler<RFX4_CollisionInfo> CollisionEnter
	{
		[Token(Token = "0x60008C6")]
		[Address(RVA = "0xC669D8", Offset = "0xC669D8", VA = "0xC669D8")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60008C7")]
		[Address(RVA = "0xC66A88", Offset = "0xC66A88", VA = "0xC66A88")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60008C8")]
	[Address(RVA = "0xC66B38", Offset = "0xC66B38", VA = "0xC66B38")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60008C9")]
	[Address(RVA = "0xC66E14", Offset = "0xC66E14", VA = "0xC66E14")]
	private void InitializeRigid()
	{
	}

	[Token(Token = "0x60008CA")]
	[Address(RVA = "0xC66E98", Offset = "0xC66E98", VA = "0xC66E98")]
	private void InitializeForce()
	{
	}

	[Token(Token = "0x60008CB")]
	[Address(RVA = "0xC66FD0", Offset = "0xC66FD0", VA = "0xC66FD0")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60008CC")]
	[Address(RVA = "0xC6787C", Offset = "0xC6787C", VA = "0xC6787C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60008CD")]
	[Address(RVA = "0xC67C78", Offset = "0xC67C78", VA = "0xC67C78")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60008CE")]
	[Address(RVA = "0xC67B9C", Offset = "0xC67B9C", VA = "0xC67B9C")]
	private void RemoveRigidbody()
	{
	}

	[Token(Token = "0x60008CF")]
	[Address(RVA = "0xC67D14", Offset = "0xC67D14", VA = "0xC67D14")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60008D0")]
	[Address(RVA = "0xC67E34", Offset = "0xC67E34", VA = "0xC67E34")]
	public RFX4_PhysicsMotion()
	{
	}
}
[Token(Token = "0x2000109")]
public class RFX4_PhysXSetImpulse : MonoBehaviour
{
	[Token(Token = "0x400064A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float Force;

	[Token(Token = "0x400064B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public ForceMode ForceMode;

	[Token(Token = "0x400064C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Rigidbody rig;

	[Token(Token = "0x400064D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform t;

	[Token(Token = "0x60008D2")]
	[Address(RVA = "0xC67EE8", Offset = "0xC67EE8", VA = "0xC67EE8")]
	private void Start()
	{
	}

	[Token(Token = "0x60008D3")]
	[Address(RVA = "0xC67F48", Offset = "0xC67F48", VA = "0xC67F48")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x60008D4")]
	[Address(RVA = "0xC67FF4", Offset = "0xC67FF4", VA = "0xC67FF4")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60008D5")]
	[Address(RVA = "0xC680B4", Offset = "0xC680B4", VA = "0xC680B4")]
	public RFX4_PhysXSetImpulse()
	{
	}
}
[Token(Token = "0x200010A")]
public class RFX4_RaycastCollision : MonoBehaviour
{
	[Token(Token = "0x400064E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float RaycastDistance;

	[Token(Token = "0x400064F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] Effects;

	[Token(Token = "0x4000650")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float Offset;

	[Token(Token = "0x4000651")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float EnableTimeDelay;

	[Token(Token = "0x4000652")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float DestroyTime;

	[Token(Token = "0x4000653")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public bool UsePivotPosition;

	[Token(Token = "0x4000654")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
	public bool UseNormalRotation;

	[Token(Token = "0x4000655")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x36")]
	public bool IsWorldSpace;

	[Token(Token = "0x4000656")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x37")]
	public bool RealTimeUpdateRaycast;

	[Token(Token = "0x4000657")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public bool DestroyAfterDisabling;

	[Token(Token = "0x4000658")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[HideInInspector]
	public float HUE;

	[Token(Token = "0x4000659")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[HideInInspector]
	public List<GameObject> CollidedInstances;

	[Token(Token = "0x400065A")]
	private const string particlesAdditionalName = "Distance";

	[Token(Token = "0x400065B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private ParticleSystem[] distanceParticles;

	[Token(Token = "0x400065C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public GameObject[] OnCollisionGOs;

	[Token(Token = "0x400065D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool canUpdate;

	[Token(Token = "0x14000002")]
	public event EventHandler<RFX4_PhysicsMotion.RFX4_CollisionInfo> CollisionEnter
	{
		[Token(Token = "0x60008D6")]
		[Address(RVA = "0xC680C4", Offset = "0xC680C4", VA = "0xC680C4")]
		[CompilerGenerated]
		add
		{
		}
		[Token(Token = "0x60008D7")]
		[Address(RVA = "0xC68174", Offset = "0xC68174", VA = "0xC68174")]
		[CompilerGenerated]
		remove
		{
		}
	}

	[Token(Token = "0x60008D8")]
	[Address(RVA = "0xC68224", Offset = "0xC68224", VA = "0xC68224")]
	private void Awake()
	{
	}

	[Token(Token = "0x60008D9")]
	[Address(RVA = "0xC68290", Offset = "0xC68290", VA = "0xC68290")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60008DA")]
	[Address(RVA = "0xC68BCC", Offset = "0xC68BCC", VA = "0xC68BCC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x60008DB")]
	[Address(RVA = "0xC68D34", Offset = "0xC68D34", VA = "0xC68D34")]
	private void Update()
	{
	}

	[Token(Token = "0x60008DC")]
	[Address(RVA = "0xC68340", Offset = "0xC68340", VA = "0xC68340")]
	private void UpdateRaycast()
	{
	}

	[Token(Token = "0x60008DD")]
	[Address(RVA = "0xC68D44", Offset = "0xC68D44", VA = "0xC68D44")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x60008DE")]
	[Address(RVA = "0xC68E14", Offset = "0xC68E14", VA = "0xC68E14")]
	public RFX4_RaycastCollision()
	{
	}
}
[Token(Token = "0x200010B")]
public class RFX4_ReplaceModelOnCollision : MonoBehaviour
{
	[Token(Token = "0x400065F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] PhysicsObjects;

	[Token(Token = "0x4000660")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool isCollided;

	[Token(Token = "0x4000661")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Transform t;

	[Token(Token = "0x60008DF")]
	[Address(RVA = "0xC68EB0", Offset = "0xC68EB0", VA = "0xC68EB0")]
	private void OnCollisionEnter(Collision collision)
	{
	}

	[Token(Token = "0x60008E0")]
	[Address(RVA = "0xC68FFC", Offset = "0xC68FFC", VA = "0xC68FFC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60008E1")]
	[Address(RVA = "0xC69130", Offset = "0xC69130", VA = "0xC69130")]
	public RFX4_ReplaceModelOnCollision()
	{
	}
}
[Token(Token = "0x200010C")]
public class RFX4_RotateAround : MonoBehaviour
{
	[Token(Token = "0x4000662")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector3 Offset;

	[Token(Token = "0x4000663")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public Vector3 RotateVector;

	[Token(Token = "0x4000664")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float LifeTime;

	[Token(Token = "0x4000665")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform t;

	[Token(Token = "0x4000666")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float currentTime;

	[Token(Token = "0x4000667")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	private Quaternion rotation;

	[Token(Token = "0x60008E2")]
	[Address(RVA = "0xC69138", Offset = "0xC69138", VA = "0xC69138")]
	private void Start()
	{
	}

	[Token(Token = "0x60008E3")]
	[Address(RVA = "0xC6916C", Offset = "0xC6916C", VA = "0xC6916C")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60008E4")]
	[Address(RVA = "0xC691FC", Offset = "0xC691FC", VA = "0xC691FC")]
	private void Update()
	{
	}

	[Token(Token = "0x60008E5")]
	[Address(RVA = "0xC6929C", Offset = "0xC6929C", VA = "0xC6929C")]
	public RFX4_RotateAround()
	{
	}
}
[Token(Token = "0x200010D")]
public class RFX4_StartDelay : MonoBehaviour
{
	[Token(Token = "0x4000668")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject ActivatedGameObject;

	[Token(Token = "0x4000669")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Delay;

	[Token(Token = "0x400066A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float currentTime;

	[Token(Token = "0x400066B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private bool isEnabled;

	[Token(Token = "0x60008E6")]
	[Address(RVA = "0xC69314", Offset = "0xC69314", VA = "0xC69314")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60008E7")]
	[Address(RVA = "0xC69344", Offset = "0xC69344", VA = "0xC69344")]
	private void Update()
	{
	}

	[Token(Token = "0x60008E8")]
	[Address(RVA = "0xC693AC", Offset = "0xC693AC", VA = "0xC693AC")]
	public RFX4_StartDelay()
	{
	}
}
[Token(Token = "0x200010E")]
public enum RFX4_TextureShaderProperties
{
	[Token(Token = "0x400066D")]
	_MainTex,
	[Token(Token = "0x400066E")]
	_DistortTex,
	[Token(Token = "0x400066F")]
	_Mask,
	[Token(Token = "0x4000670")]
	_Cutout,
	[Token(Token = "0x4000671")]
	_CutoutTex,
	[Token(Token = "0x4000672")]
	_Bump,
	[Token(Token = "0x4000673")]
	_BumpTex,
	[Token(Token = "0x4000674")]
	_EmissionTex
}
[Token(Token = "0x200010F")]
public class RFX4_TornadoParticles : MonoBehaviour
{
	[Token(Token = "0x4000675")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Material TornadoMaterial;

	[Token(Token = "0x4000676")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private ParticleSystem.Particle[] particleArray;

	[Token(Token = "0x4000677")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private ParticleSystem particleSys;

	[Token(Token = "0x4000678")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Light myLight;

	[Token(Token = "0x4000679")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector4 _twistScale;

	[Token(Token = "0x400067A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int materialID;

	[Token(Token = "0x60008E9")]
	[Address(RVA = "0xC693BC", Offset = "0xC693BC", VA = "0xC693BC")]
	private void Start()
	{
	}

	[Token(Token = "0x60008EA")]
	[Address(RVA = "0xC6959C", Offset = "0xC6959C", VA = "0xC6959C")]
	private void Update()
	{
	}

	[Token(Token = "0x60008EB")]
	[Address(RVA = "0xC6984C", Offset = "0xC6984C", VA = "0xC6984C")]
	public RFX4_TornadoParticles()
	{
	}
}
[Token(Token = "0x2000110")]
[RequireComponent(typeof(LineRenderer))]
public class RFX4_TrailRenderer : MonoBehaviour
{
	[Token(Token = "0x400067B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float VertexLifeTime;

	[Token(Token = "0x400067C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float TrailLifeTime;

	[Token(Token = "0x400067D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Range(0.001f, 1f)]
	public float MinVertexDistance;

	[Token(Token = "0x400067E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float Gravity;

	[Token(Token = "0x400067F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Vector3 Force;

	[Token(Token = "0x4000680")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public float InheritVelocity;

	[Token(Token = "0x4000681")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float Drag;

	[Token(Token = "0x4000682")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	[Range(0.001f, 10f)]
	public float Frequency;

	[Token(Token = "0x4000683")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	[Range(0.001f, 10f)]
	public float OffsetSpeed;

	[Token(Token = "0x4000684")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
	public bool RandomTurbulenceOffset;

	[Token(Token = "0x4000685")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	[Range(0.001f, 10f)]
	public float Amplitude;

	[Token(Token = "0x4000686")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float TurbulenceStrength;

	[Token(Token = "0x4000687")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public AnimationCurve VelocityByDistance;

	[Token(Token = "0x4000688")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public float AproximatedFlyDistance;

	[Token(Token = "0x4000689")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	public bool SmoothCurves;

	[Token(Token = "0x400068A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private LineRenderer lineRenderer;

	[Token(Token = "0x400068B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private List<Vector3> positions;

	[Token(Token = "0x400068C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private List<float> currentTimes;

	[Token(Token = "0x400068D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private List<Vector3> velocities;

	[Token(Token = "0x400068E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	[HideInInspector]
	public float currentLifeTime;

	[Token(Token = "0x400068F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Transform t;

	[Token(Token = "0x4000690")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private Vector3 prevPosition;

	[Token(Token = "0x4000691")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private Vector3 startPosition;

	[Token(Token = "0x4000692")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private List<Vector3> controlPoints;

	[Token(Token = "0x4000693")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private int curveCount;

	[Token(Token = "0x4000694")]
	private const float MinimumSqrDistance = 0.01f;

	[Token(Token = "0x4000695")]
	private const float DivisionThreshold = -0.99f;

	[Token(Token = "0x4000696")]
	private const float SmoothCurvesScale = 0.5f;

	[Token(Token = "0x4000697")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private float currentVelocity;

	[Token(Token = "0x4000698")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private float turbulenceRandomOffset;

	[Token(Token = "0x4000699")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
	private bool isInitialized;

	[Token(Token = "0x60008EC")]
	[Address(RVA = "0xC6985C", Offset = "0xC6985C", VA = "0xC6985C")]
	private void Start()
	{
	}

	[Token(Token = "0x60008ED")]
	[Address(RVA = "0xC69B94", Offset = "0xC69B94", VA = "0xC69B94")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60008EE")]
	[Address(RVA = "0xC69878", Offset = "0xC69878", VA = "0xC69878")]
	private void Init()
	{
	}

	[Token(Token = "0x60008EF")]
	[Address(RVA = "0xC69BA4", Offset = "0xC69BA4", VA = "0xC69BA4")]
	private void Update()
	{
	}

	[Token(Token = "0x60008F0")]
	[Address(RVA = "0xC6A878", Offset = "0xC6A878", VA = "0xC6A878")]
	private int GetLastDeletedIndex()
	{
		return default(int);
	}

	[Token(Token = "0x60008F1")]
	[Address(RVA = "0xC69CE8", Offset = "0xC69CE8", VA = "0xC69CE8")]
	private void UpdatePositionsCount()
	{
	}

	[Token(Token = "0x60008F2")]
	[Address(RVA = "0xC6B1F4", Offset = "0xC6B1F4", VA = "0xC6B1F4")]
	private void AddInterpolatedPositions(Vector3 start, Vector3 end)
	{
	}

	[Token(Token = "0x60008F3")]
	[Address(RVA = "0xC6A984", Offset = "0xC6A984", VA = "0xC6A984")]
	private void RemovePositionsBeforeIndex(int lastDeletedIndex)
	{
	}

	[Token(Token = "0x60008F4")]
	[Address(RVA = "0xC69ED0", Offset = "0xC69ED0", VA = "0xC69ED0")]
	private void UpdateForce()
	{
	}

	[Token(Token = "0x60008F5")]
	[Address(RVA = "0xC6A34C", Offset = "0xC6A34C", VA = "0xC6A34C")]
	private void UpdateImpulse()
	{
	}

	[Token(Token = "0x60008F6")]
	[Address(RVA = "0xC6A5E4", Offset = "0xC6A5E4", VA = "0xC6A5E4")]
	private void UpdateVelocity()
	{
	}

	[Token(Token = "0x60008F7")]
	[Address(RVA = "0xC6AAA0", Offset = "0xC6AAA0", VA = "0xC6AAA0")]
	public void InterpolateBezier(List<Vector3> segmentPoints, float scale)
	{
	}

	[Token(Token = "0x60008F8")]
	[Address(RVA = "0xC6B0F0", Offset = "0xC6B0F0", VA = "0xC6B0F0")]
	public List<Vector3> GetDrawingPoints()
	{
		return null;
	}

	[Token(Token = "0x60008F9")]
	[Address(RVA = "0xC6B528", Offset = "0xC6B528", VA = "0xC6B528")]
	private List<Vector3> FindDrawingPoints(int curveIndex)
	{
		return null;
	}

	[Token(Token = "0x60008FA")]
	[Address(RVA = "0xC6B80C", Offset = "0xC6B80C", VA = "0xC6B80C")]
	private int FindDrawingPoints(int curveIndex, float t0, float t1, List<Vector3> pointList, int insertionIndex)
	{
		return default(int);
	}

	[Token(Token = "0x60008FB")]
	[Address(RVA = "0xC6B6F8", Offset = "0xC6B6F8", VA = "0xC6B6F8")]
	public Vector3 CalculateBezierPoint(int curveIndex, float t)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60008FC")]
	[Address(RVA = "0xC6BB64", Offset = "0xC6BB64", VA = "0xC6BB64")]
	private Vector3 CalculateBezierPoint(float t, Vector3 p0, Vector3 p1, Vector3 p2, Vector3 p3)
	{
		return default(Vector3);
	}

	[Token(Token = "0x60008FD")]
	[Address(RVA = "0xC6BBF8", Offset = "0xC6BBF8", VA = "0xC6BBF8")]
	public RFX4_TrailRenderer()
	{
	}
}
[Token(Token = "0x2000111")]
[ExecuteInEditMode]
public class RFX4_UVAnimation : MonoBehaviour
{
	[Token(Token = "0x400069A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int TilesX;

	[Token(Token = "0x400069B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int TilesY;

	[Token(Token = "0x400069C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Range(1f, 360f)]
	public int FPS;

	[Token(Token = "0x400069D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int StartFrameOffset;

	[Token(Token = "0x400069E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool IsLoop;

	[Token(Token = "0x400069F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool IsReverse;

	[Token(Token = "0x40006A0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
	public bool IsInterpolateFrames;

	[Token(Token = "0x40006A1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public RFX4_TextureShaderProperties[] TextureNames;

	[Token(Token = "0x40006A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int count;

	[Token(Token = "0x40006A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Renderer currentRenderer;

	[Token(Token = "0x40006A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Projector projector;

	[Token(Token = "0x40006A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Material instanceMaterial;

	[Token(Token = "0x40006A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private float animationStartTime;

	[Token(Token = "0x40006A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
	private bool canUpdate;

	[Token(Token = "0x40006A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private int previousIndex;

	[Token(Token = "0x40006A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private int totalFrames;

	[Token(Token = "0x40006AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float currentInterpolatedTime;

	[Token(Token = "0x40006AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private int currentIndex;

	[Token(Token = "0x40006AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Vector2 size;

	[Token(Token = "0x40006AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private bool isInitialized;

	[Token(Token = "0x40006AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private float prevRealTime;

	[Token(Token = "0x60008FE")]
	[Address(RVA = "0xC6BCCC", Offset = "0xC6BCCC", VA = "0xC6BCCC")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x60008FF")]
	[Address(RVA = "0xC6BEFC", Offset = "0xC6BEFC", VA = "0xC6BEFC")]
	private void Start()
	{
	}

	[Token(Token = "0x6000900")]
	[Address(RVA = "0xC6BF18", Offset = "0xC6BF18", VA = "0xC6BF18")]
	private void OnWillRenderObject()
	{
	}

	[Token(Token = "0x6000901")]
	[Address(RVA = "0xC6BF78", Offset = "0xC6BF78", VA = "0xC6BF78")]
	private void Update()
	{
	}

	[Token(Token = "0x6000902")]
	[Address(RVA = "0xC6BCDC", Offset = "0xC6BCDC", VA = "0xC6BCDC")]
	private void InitDefaultVariables()
	{
	}

	[Token(Token = "0x6000903")]
	[Address(RVA = "0xC6BF40", Offset = "0xC6BF40", VA = "0xC6BF40")]
	private void ManualUpdate()
	{
	}

	[Token(Token = "0x6000904")]
	[Address(RVA = "0xC6BFA0", Offset = "0xC6BFA0", VA = "0xC6BFA0")]
	private void UpdateMaterial()
	{
	}

	[Token(Token = "0x6000905")]
	[Address(RVA = "0xC6C080", Offset = "0xC6C080", VA = "0xC6C080")]
	private void SetSpriteAnimation()
	{
	}

	[Token(Token = "0x6000906")]
	[Address(RVA = "0xC6C418", Offset = "0xC6C418", VA = "0xC6C418")]
	public float DeltaTime()
	{
		return default(float);
	}

	[Token(Token = "0x6000907")]
	[Address(RVA = "0xC6C2A8", Offset = "0xC6C2A8", VA = "0xC6C2A8")]
	private void SetSpriteAnimationIterpolated()
	{
	}

	[Token(Token = "0x6000908")]
	[Address(RVA = "0xC6C470", Offset = "0xC6C470", VA = "0xC6C470")]
	public RFX4_UVAnimation()
	{
	}
}
[Token(Token = "0x2000112")]
public class RFX4_UVScroll : MonoBehaviour
{
	[Token(Token = "0x40006AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Vector2 UvScrollMultiplier;

	[Token(Token = "0x40006B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public RFX4_TextureShaderProperties TextureName;

	[Token(Token = "0x40006B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private Vector2 uvOffset;

	[Token(Token = "0x40006B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Material mat;

	[Token(Token = "0x6000909")]
	[Address(RVA = "0xC6C4E4", Offset = "0xC6C4E4", VA = "0xC6C4E4")]
	private void Start()
	{
	}

	[Token(Token = "0x600090A")]
	[Address(RVA = "0xC6C6CC", Offset = "0xC6C6CC", VA = "0xC6C6CC")]
	private void Update()
	{
	}

	[Token(Token = "0x600090B")]
	[Address(RVA = "0xC6C7B4", Offset = "0xC6C7B4", VA = "0xC6C7B4")]
	public RFX4_UVScroll()
	{
	}
}
[Token(Token = "0x2000113")]
public class FPS : MonoBehaviour
{
	[Token(Token = "0x40006B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float UpdateInterval;

	[Token(Token = "0x40006B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Text text;

	[Token(Token = "0x40006B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int frames;

	[Token(Token = "0x600090C")]
	[Address(RVA = "0xC6C818", Offset = "0xC6C818", VA = "0xC6C818")]
	private void Start()
	{
	}

	[Token(Token = "0x600090D")]
	[Address(RVA = "0xC6C8A4", Offset = "0xC6C8A4", VA = "0xC6C8A4")]
	private void UpdateFPS()
	{
	}

	[Token(Token = "0x600090E")]
	[Address(RVA = "0xC6C9C8", Offset = "0xC6C9C8", VA = "0xC6C9C8")]
	private void Update()
	{
	}

	[Token(Token = "0x600090F")]
	[Address(RVA = "0xC6C9D8", Offset = "0xC6C9D8", VA = "0xC6C9D8")]
	public FPS()
	{
	}
}
[Token(Token = "0x2000114")]
public class RFX4_Debug : MonoBehaviour
{
	[Token(Token = "0x6000910")]
	[Address(RVA = "0xC6C9E8", Offset = "0xC6C9E8", VA = "0xC6C9E8")]
	private void Start()
	{
	}

	[Token(Token = "0x6000911")]
	[Address(RVA = "0xC6CB7C", Offset = "0xC6CB7C", VA = "0xC6CB7C")]
	private void CollisionEnter(object sender, RFX4_PhysicsMotion.RFX4_CollisionInfo e)
	{
	}

	[Token(Token = "0x6000912")]
	[Address(RVA = "0xC6CC50", Offset = "0xC6CC50", VA = "0xC6CC50")]
	public RFX4_Debug()
	{
	}
}
[Token(Token = "0x2000115")]
public class RFX4_DemoGUI : MonoBehaviour
{
	[Token(Token = "0x40006B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject[] Prefabs;

	[Token(Token = "0x40006B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float[] ReactivationTimes;

	[Token(Token = "0x40006B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Light Sun;

	[Token(Token = "0x40006B9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public ReflectionProbe ReflectionProbe;

	[Token(Token = "0x40006BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public Light[] NightLights;

	[Token(Token = "0x40006BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public Texture HUETexture;

	[Token(Token = "0x40006BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public bool isDay;

	[Token(Token = "0x40006BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int currentNomber;

	[Token(Token = "0x40006BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GameObject currentInstance;

	[Token(Token = "0x40006BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public GUIStyle guiStyleHeader;

	[Token(Token = "0x40006C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private GUIStyle guiStyleHeaderMobile;

	[Token(Token = "0x40006C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private float dpiScale;

	[Token(Token = "0x40006C2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
	private float colorHUE;

	[Token(Token = "0x40006C3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private float startSunIntensity;

	[Token(Token = "0x40006C4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private Quaternion startSunRotation;

	[Token(Token = "0x40006C5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private Color startAmbientLight;

	[Token(Token = "0x40006C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private float startAmbientIntencity;

	[Token(Token = "0x40006C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private float startReflectionIntencity;

	[Token(Token = "0x40006C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
	private LightShadows startLightShadows;

	[Token(Token = "0x40006C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private bool isButtonPressed;

	[Token(Token = "0x6000913")]
	[Address(RVA = "0xC6CC58", Offset = "0xC6CC58", VA = "0xC6CC58")]
	private void Start()
	{
	}

	[Token(Token = "0x6000914")]
	[Address(RVA = "0xC6D1A4", Offset = "0xC6D1A4", VA = "0xC6D1A4")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000915")]
	[Address(RVA = "0xC6CF58", Offset = "0xC6CF58", VA = "0xC6CF58")]
	private void ChangeDayNight()
	{
	}

	[Token(Token = "0x6000916")]
	[Address(RVA = "0xC6CDAC", Offset = "0xC6CDAC", VA = "0xC6CDAC")]
	private void ChangeCurrent(int delta)
	{
	}

	[Token(Token = "0x6000917")]
	[Address(RVA = "0xC6D554", Offset = "0xC6D554", VA = "0xC6D554")]
	private void RemoveClones()
	{
	}

	[Token(Token = "0x6000918")]
	[Address(RVA = "0xC6D658", Offset = "0xC6D658", VA = "0xC6D658")]
	private void Reactivate()
	{
	}

	[Token(Token = "0x6000919")]
	[Address(RVA = "0xC6D690", Offset = "0xC6D690", VA = "0xC6D690")]
	public RFX4_DemoGUI()
	{
	}
}
[Token(Token = "0x2000116")]
public class RFX4_FPS : MonoBehaviour
{
	[Token(Token = "0x40006CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private readonly GUIStyle guiStyleHeader;

	[Token(Token = "0x40006CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private float timeleft;

	[Token(Token = "0x40006CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	private float fps;

	[Token(Token = "0x40006CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private int frames;

	[Token(Token = "0x600091A")]
	[Address(RVA = "0xC6D740", Offset = "0xC6D740", VA = "0xC6D740")]
	private void Awake()
	{
	}

	[Token(Token = "0x600091B")]
	[Address(RVA = "0xC6D790", Offset = "0xC6D790", VA = "0xC6D790")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600091C")]
	[Address(RVA = "0xC6D888", Offset = "0xC6D888", VA = "0xC6D888")]
	private void Update()
	{
	}

	[Token(Token = "0x600091D")]
	[Address(RVA = "0xC6D8DC", Offset = "0xC6D8DC", VA = "0xC6D8DC")]
	public RFX4_FPS()
	{
	}
}
[Token(Token = "0x2000117")]
public class RFX4_MouseOrbit : MonoBehaviour
{
	[Token(Token = "0x40006CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject target;

	[Token(Token = "0x40006CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float distance;

	[Token(Token = "0x40006D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float xSpeed;

	[Token(Token = "0x40006D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float ySpeed;

	[Token(Token = "0x40006D2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float yMinLimit;

	[Token(Token = "0x40006D3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float yMaxLimit;

	[Token(Token = "0x40006D4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float x;

	[Token(Token = "0x40006D5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private float y;

	[Token(Token = "0x40006D6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private float prevDistance;

	[Token(Token = "0x600091E")]
	[Address(RVA = "0xC6D944", Offset = "0xC6D944", VA = "0xC6D944")]
	private void Start()
	{
	}

	[Token(Token = "0x600091F")]
	[Address(RVA = "0xC6D970", Offset = "0xC6D970", VA = "0xC6D970")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x6000920")]
	[Address(RVA = "0xC6DDC8", Offset = "0xC6DDC8", VA = "0xC6DDC8")]
	private static float ClampAngle(float angle, float min, float max)
	{
		return default(float);
	}

	[Token(Token = "0x6000921")]
	[Address(RVA = "0xC6DE04", Offset = "0xC6DE04", VA = "0xC6DE04")]
	public RFX4_MouseOrbit()
	{
	}
}
[Token(Token = "0x2000118")]
public class RFX4_RealtimeReflection : MonoBehaviour
{
	[Token(Token = "0x40006D7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private ReflectionProbe probe;

	[Token(Token = "0x40006D8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Transform camT;

	[Token(Token = "0x6000922")]
	[Address(RVA = "0xC6DE20", Offset = "0xC6DE20", VA = "0xC6DE20")]
	private void Awake()
	{
	}

	[Token(Token = "0x6000923")]
	[Address(RVA = "0xC6DE8C", Offset = "0xC6DE8C", VA = "0xC6DE8C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000924")]
	[Address(RVA = "0xC6DF00", Offset = "0xC6DF00", VA = "0xC6DF00")]
	public RFX4_RealtimeReflection()
	{
	}
}
[Token(Token = "0x2000119")]
public class CannonBehavior : MonoBehaviour
{
	[Token(Token = "0x40006D9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Transform m_cannonRot;

	[Token(Token = "0x40006DA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform m_muzzle;

	[Token(Token = "0x40006DB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public GameObject m_shotPrefab;

	[Token(Token = "0x40006DC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Texture2D m_guiTexture;

	[Token(Token = "0x6000925")]
	[Address(RVA = "0xC6DF08", Offset = "0xC6DF08", VA = "0xC6DF08")]
	private void Start()
	{
	}

	[Token(Token = "0x6000926")]
	[Address(RVA = "0xC6DF0C", Offset = "0xC6DF0C", VA = "0xC6DF0C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000927")]
	[Address(RVA = "0xC6E148", Offset = "0xC6E148", VA = "0xC6E148")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x6000928")]
	[Address(RVA = "0xC6E224", Offset = "0xC6E224", VA = "0xC6E224")]
	public CannonBehavior()
	{
	}
}
[Token(Token = "0x200011A")]
public class CreateSinShapedLineStrip : MonoBehaviour
{
	[Token(Token = "0x40006DD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int m_numVertices;

	[Token(Token = "0x40006DE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Material m_volumetricLineStripMaterial;

	[Token(Token = "0x40006DF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Color m_color;

	[Token(Token = "0x40006E0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public float m_start;

	[Token(Token = "0x40006E1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public float m_end;

	[Token(Token = "0x6000929")]
	[Address(RVA = "0xC6E22C", Offset = "0xC6E22C", VA = "0xC6E22C")]
	private void Start()
	{
	}

	[Token(Token = "0x600092A")]
	[Address(RVA = "0xC6E464", Offset = "0xC6E464", VA = "0xC6E464")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x600092B")]
	[Address(RVA = "0xC6E550", Offset = "0xC6E550", VA = "0xC6E550")]
	public CreateSinShapedLineStrip()
	{
	}
}
[Token(Token = "0x200011B")]
public class ShotBehavior : MonoBehaviour
{
	[Token(Token = "0x600092C")]
	[Address(RVA = "0xC6E56C", Offset = "0xC6E56C", VA = "0xC6E56C")]
	private void Start()
	{
	}

	[Token(Token = "0x600092D")]
	[Address(RVA = "0xC6E570", Offset = "0xC6E570", VA = "0xC6E570")]
	private void Update()
	{
	}

	[Token(Token = "0x600092E")]
	[Address(RVA = "0xC6E628", Offset = "0xC6E628", VA = "0xC6E628")]
	public ShotBehavior()
	{
	}
}
[Token(Token = "0x200011C")]
public class CausticDecal : MonoBehaviour
{
	[Token(Token = "0x40006E2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float maxAngle;

	[Token(Token = "0x40006E3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float pushDistance;

	[Token(Token = "0x40006E4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public LayerMask affectedLayers;

	[Token(Token = "0x600092F")]
	[Address(RVA = "0xC6E630", Offset = "0xC6E630", VA = "0xC6E630")]
	private void OnDrawGizmosSelected()
	{
	}

	[Token(Token = "0x6000930")]
	[Address(RVA = "0xC6E714", Offset = "0xC6E714", VA = "0xC6E714")]
	public Bounds GetBounds()
	{
		return default(Bounds);
	}

	[Token(Token = "0x6000931")]
	[Address(RVA = "0xC6E96C", Offset = "0xC6E96C", VA = "0xC6E96C")]
	public CausticDecal()
	{
	}
}
[Token(Token = "0x200011D")]
public class BoatSimulator : MonoBehaviour
{
	[Token(Token = "0x40006E5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private Rigidbody rigid;

	[Token(Token = "0x40006E6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private bool keyPressedW;

	[Token(Token = "0x40006E7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
	private bool keyPressedA;

	[Token(Token = "0x40006E8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
	private bool keyPressedS;

	[Token(Token = "0x40006E9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
	private bool keyPressedD;

	[Token(Token = "0x6000932")]
	[Address(RVA = "0xC6E9A0", Offset = "0xC6E9A0", VA = "0xC6E9A0")]
	private void Start()
	{
	}

	[Token(Token = "0x6000933")]
	[Address(RVA = "0xC6E9F0", Offset = "0xC6E9F0", VA = "0xC6E9F0")]
	private void Update()
	{
	}

	[Token(Token = "0x6000934")]
	[Address(RVA = "0xC6EC8C", Offset = "0xC6EC8C", VA = "0xC6EC8C")]
	public BoatSimulator()
	{
	}
}
[Token(Token = "0x200011E")]
public class CubeGenerator : MonoBehaviour
{
	[Token(Token = "0x40006EA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject cubes;

	[Token(Token = "0x6000935")]
	[Address(RVA = "0xC6EC94", Offset = "0xC6EC94", VA = "0xC6EC94")]
	private void Start()
	{
	}

	[Token(Token = "0x6000936")]
	[Address(RVA = "0xC6ECE8", Offset = "0xC6ECE8", VA = "0xC6ECE8")]
	private void UpdateCube()
	{
	}

	[Token(Token = "0x6000937")]
	[Address(RVA = "0xC6EEFC", Offset = "0xC6EEFC", VA = "0xC6EEFC")]
	public CubeGenerator()
	{
	}
}
[Token(Token = "0x200011F")]
public class DemoGUIWater : MonoBehaviour
{
	[Token(Token = "0x40006EB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float UpdateInterval;

	[Token(Token = "0x40006EC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int MaxScenes;

	[Token(Token = "0x40006ED")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool IsMobileScene;

	[Token(Token = "0x40006EE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public Light Sun;

	[Token(Token = "0x40006EF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject SunTransform;

	[Token(Token = "0x40006F0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject Boat;

	[Token(Token = "0x40006F1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public GameObject water1;

	[Token(Token = "0x40006F2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	public GameObject water2;

	[Token(Token = "0x40006F3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float angle;

	[Token(Token = "0x40006F4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	private bool canUpdateTestMaterial;

	[Token(Token = "0x40006F5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private GameObject cam;

	[Token(Token = "0x40006F6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private GUIStyle guiStyleHeader;

	[Token(Token = "0x40006F7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Material currentWaterMaterial;

	[Token(Token = "0x40006F8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Material causticMaterial;

	[Token(Token = "0x40006F9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private GameObject currentWater;

	[Token(Token = "0x40006FA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float transparent;

	[Token(Token = "0x40006FB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private float fadeBlend;

	[Token(Token = "0x40006FC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private float refl;

	[Token(Token = "0x40006FD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
	private float refraction;

	[Token(Token = "0x40006FE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private float waterWaveScaleXZ;

	[Token(Token = "0x40006FF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
	private Vector4 waterDirection;

	[Token(Token = "0x4000700")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
	private Vector4 causticDirection;

	[Token(Token = "0x4000701")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
	private Vector4 foamDirection;

	[Token(Token = "0x4000702")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
	private Vector4 ABDirection;

	[Token(Token = "0x4000703")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
	private Vector4 CDDirection;

	[Token(Token = "0x4000704")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
	private float direction;

	[Token(Token = "0x4000705")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Color reflectionColor;

	[Token(Token = "0x4000706")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private Vector3 oldCausticScale;

	[Token(Token = "0x4000707")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
	private float oldTextureScale;

	[Token(Token = "0x4000708")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private float oldWaveScale;

	[Token(Token = "0x4000709")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
	private GameObject caustic;

	[Token(Token = "0x400070A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
	private float startSunIntencity;

	[Token(Token = "0x6000938")]
	[Address(RVA = "0xC6EF04", Offset = "0xC6EF04", VA = "0xC6EF04")]
	private void Start()
	{
	}

	[Token(Token = "0x6000939")]
	[Address(RVA = "0xC6EF5C", Offset = "0xC6EF5C", VA = "0xC6EF5C")]
	private void UpdateCurrentWater()
	{
	}

	[Token(Token = "0x600093A")]
	[Address(RVA = "0xC6F3C8", Offset = "0xC6F3C8", VA = "0xC6F3C8")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x600093B")]
	[Address(RVA = "0xC6F3D8", Offset = "0xC6F3D8", VA = "0xC6F3D8")]
	private void GUIMobile()
	{
	}

	[Token(Token = "0x600093C")]
	[Address(RVA = "0xC6FA64", Offset = "0xC6FA64", VA = "0xC6FA64")]
	private void GUIPC()
	{
	}

	[Token(Token = "0x600093D")]
	[Address(RVA = "0xC705E4", Offset = "0xC705E4", VA = "0xC705E4")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x600093E")]
	[Address(RVA = "0xC70654", Offset = "0xC70654", VA = "0xC70654")]
	private void OnSetColorMain(Color color)
	{
	}

	[Token(Token = "0x600093F")]
	[Address(RVA = "0xC706D8", Offset = "0xC706D8", VA = "0xC706D8")]
	public DemoGUIWater()
	{
	}
}
[Token(Token = "0x2000120")]
public class Buoyancy : MonoBehaviour
{
	[Token(Token = "0x400070B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float Density;

	[Token(Token = "0x400070C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int SlicesPerAxis;

	[Token(Token = "0x400070D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public bool IsConcave;

	[Token(Token = "0x400070E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int VoxelsLimit;

	[Token(Token = "0x400070F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float WaveVelocity;

	[Token(Token = "0x4000710")]
	private const float Dampfer = 0.1f;

	[Token(Token = "0x4000711")]
	private const float WaterDensity = 1000f;

	[Token(Token = "0x4000712")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	private float voxelHalfHeight;

	[Token(Token = "0x4000713")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float localArchimedesForce;

	[Token(Token = "0x4000714")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private List<Vector3> voxels;

	[Token(Token = "0x4000715")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private bool isMeshCollider;

	[Token(Token = "0x4000716")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private List<Vector3[]> forces;

	[Token(Token = "0x4000717")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private WaterRipples waterRipples;

	[Token(Token = "0x6000940")]
	[Address(RVA = "0xC70760", Offset = "0xC70760", VA = "0xC70760")]
	private void Start()
	{
	}

	[Token(Token = "0x6000941")]
	[Address(RVA = "0xC70D28", Offset = "0xC70D28", VA = "0xC70D28")]
	private List<Vector3> SliceIntoVoxels(bool concave)
	{
		return null;
	}

	[Token(Token = "0x6000942")]
	[Address(RVA = "0xC71620", Offset = "0xC71620", VA = "0xC71620")]
	private static bool PointIsInsideMeshCollider(Collider c, Vector3 p)
	{
		return default(bool);
	}

	[Token(Token = "0x6000943")]
	[Address(RVA = "0xC71908", Offset = "0xC71908", VA = "0xC71908")]
	private static void FindClosestPoints(IList<Vector3> list, out int firstIndex, out int secondIndex)
	{
	}

	[Token(Token = "0x6000944")]
	[Address(RVA = "0xC7128C", Offset = "0xC7128C", VA = "0xC7128C")]
	private static void WeldPoints(IList<Vector3> list, int targetCount)
	{
	}

	[Token(Token = "0x6000945")]
	[Address(RVA = "0xC71BD8", Offset = "0xC71BD8", VA = "0xC71BD8")]
	private Vector3 GetNormal(Vector3 a, Vector3 b, Vector3 c)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000946")]
	[Address(RVA = "0xC71CF0", Offset = "0xC71CF0", VA = "0xC71CF0")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000947")]
	[Address(RVA = "0xC7232C", Offset = "0xC7232C", VA = "0xC7232C")]
	private void OnDrawGizmos()
	{
	}

	[Token(Token = "0x6000948")]
	[Address(RVA = "0xC726FC", Offset = "0xC726FC", VA = "0xC726FC")]
	private void OnTriggerEnter(Collider collidedObj)
	{
	}

	[Token(Token = "0x6000949")]
	[Address(RVA = "0xC72798", Offset = "0xC72798", VA = "0xC72798")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600094A")]
	[Address(RVA = "0xC727A0", Offset = "0xC727A0", VA = "0xC727A0")]
	public Buoyancy()
	{
	}
}
[Token(Token = "0x2000121")]
[ExecuteInEditMode]
public class DepthFix : MonoBehaviour
{
	[Token(Token = "0x600094B")]
	[Address(RVA = "0xC727C4", Offset = "0xC727C4", VA = "0xC727C4")]
	private void OnWillRenderObject()
	{
	}

	[Token(Token = "0x600094C")]
	[Address(RVA = "0xC727F8", Offset = "0xC727F8", VA = "0xC727F8")]
	public DepthFix()
	{
	}
}
[Token(Token = "0x2000122")]
public class MoveCameraToCharacter : MonoBehaviour
{
	[Token(Token = "0x4000718")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject Target;

	[Token(Token = "0x600094D")]
	[Address(RVA = "0xC72800", Offset = "0xC72800", VA = "0xC72800")]
	private void Update()
	{
	}

	[Token(Token = "0x600094E")]
	[Address(RVA = "0xC7284C", Offset = "0xC7284C", VA = "0xC7284C")]
	public MoveCameraToCharacter()
	{
	}
}
[Token(Token = "0x2000123")]
public class MoveWaterToCamera : MonoBehaviour
{
	[Token(Token = "0x4000719")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject CurrenCamera;

	[Token(Token = "0x600094F")]
	[Address(RVA = "0xC72854", Offset = "0xC72854", VA = "0xC72854")]
	private void Update()
	{
	}

	[Token(Token = "0x6000950")]
	[Address(RVA = "0xC72A08", Offset = "0xC72A08", VA = "0xC72A08")]
	public MoveWaterToCamera()
	{
	}
}
[Token(Token = "0x2000124")]
[ExecuteInEditMode]
public class ProjectorMatrix : MonoBehaviour
{
	[Token(Token = "0x2000125")]
	public enum matrixName
	{
		[Token(Token = "0x4000720")]
		_projectiveMatrWaves,
		[Token(Token = "0x4000721")]
		_projectiveMatrCausticScale
	}

	[Token(Token = "0x400071A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public matrixName GlobalMatrixName;

	[Token(Token = "0x400071B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform ProjectiveTranform;

	[Token(Token = "0x400071C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public bool UpdateOnStart;

	[Token(Token = "0x400071D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
	public bool CanUpdate;

	[Token(Token = "0x400071E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Transform t;

	[Token(Token = "0x6000951")]
	[Address(RVA = "0xC72A10", Offset = "0xC72A10", VA = "0xC72A10")]
	private void Start()
	{
	}

	[Token(Token = "0x6000952")]
	[Address(RVA = "0xC72A40", Offset = "0xC72A40", VA = "0xC72A40")]
	private void Update()
	{
	}

	[Token(Token = "0x6000953")]
	[Address(RVA = "0xC704C8", Offset = "0xC704C8", VA = "0xC704C8")]
	public void UpdateMatrix()
	{
	}

	[Token(Token = "0x6000954")]
	[Address(RVA = "0xC72A50", Offset = "0xC72A50", VA = "0xC72A50")]
	public ProjectorMatrix()
	{
	}
}
[Token(Token = "0x2000126")]
public class ReflectionCamera : MonoBehaviour
{
	[Token(Token = "0x4000722")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LayerMask CullingMask;

	[Token(Token = "0x4000723")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool HDR;

	[Token(Token = "0x4000724")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	[Range(0.1f, 1f)]
	public float TextureScale;

	[Token(Token = "0x4000725")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RenderTexture reflectionTexture;

	[Token(Token = "0x4000726")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private GameObject goCam;

	[Token(Token = "0x4000727")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Camera reflectionCamera;

	[Token(Token = "0x4000728")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Vector3 oldPos;

	[Token(Token = "0x4000729")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static float ClipPlaneOffset;

	[Token(Token = "0x6000955")]
	[Address(RVA = "0xC72A60", Offset = "0xC72A60", VA = "0xC72A60")]
	private void UpdateCamera(Camera cam)
	{
	}

	[Token(Token = "0x6000956")]
	[Address(RVA = "0xC72EBC", Offset = "0xC72EBC", VA = "0xC72EBC")]
	private void CheckCamera(Camera cam)
	{
	}

	[Token(Token = "0x6000957")]
	[Address(RVA = "0xC7365C", Offset = "0xC7365C", VA = "0xC7365C")]
	private static float Sgn(float a)
	{
		return default(float);
	}

	[Token(Token = "0x6000958")]
	[Address(RVA = "0xC73494", Offset = "0xC73494", VA = "0xC73494")]
	private static Matrix4x4 CalculateObliqueMatrix(Matrix4x4 projection, Vector4 clipPlane)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x6000959")]
	[Address(RVA = "0xC731E8", Offset = "0xC731E8", VA = "0xC731E8")]
	private static Matrix4x4 CalculateReflectionMatrix(Matrix4x4 reflectionMat, Vector4 plane)
	{
		return default(Matrix4x4);
	}

	[Token(Token = "0x600095A")]
	[Address(RVA = "0xC7328C", Offset = "0xC7328C", VA = "0xC7328C")]
	private Vector4 CameraSpacePlane(Camera cam, Vector3 pos, Vector3 normal, float sideSign)
	{
		return default(Vector4);
	}

	[Token(Token = "0x600095B")]
	private void SafeDestroy<T>(T component) where T : UnityEngine.Object
	{
	}

	[Token(Token = "0x600095C")]
	[Address(RVA = "0xC7367C", Offset = "0xC7367C", VA = "0xC7367C")]
	private void ClearCamera()
	{
	}

	[Token(Token = "0x600095D")]
	[Address(RVA = "0xC73754", Offset = "0xC73754", VA = "0xC73754")]
	public void OnWillRenderObject()
	{
	}

	[Token(Token = "0x600095E")]
	[Address(RVA = "0xC73774", Offset = "0xC73774", VA = "0xC73774")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600095F")]
	[Address(RVA = "0xC737B8", Offset = "0xC737B8", VA = "0xC737B8")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000960")]
	[Address(RVA = "0xC73808", Offset = "0xC73808", VA = "0xC73808")]
	public ReflectionCamera()
	{
	}
}
[Token(Token = "0x2000127")]
public class RippleCreator : MonoBehaviour
{
	[Token(Token = "0x2000128")]
	private class ReversedRipple
	{
		[Token(Token = "0x4000740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 Position;

		[Token(Token = "0x4000741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float Velocity;

		[Token(Token = "0x600096A")]
		[Address(RVA = "0xC73CA4", Offset = "0xC73CA4", VA = "0xC73CA4")]
		public ReversedRipple()
		{
		}
	}

	[Token(Token = "0x400072A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool IsReversedRipple;

	[Token(Token = "0x400072B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float RippleStrenght;

	[Token(Token = "0x400072C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float MaxVelocity;

	[Token(Token = "0x400072D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float RandomRipplesInterval;

	[Token(Token = "0x400072E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float reversedRippleDelay;

	[Token(Token = "0x400072F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public GameObject SplashEffect;

	[Token(Token = "0x4000730")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	public GameObject SplashEffectMoved;

	[Token(Token = "0x4000731")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	public AudioSource SplashAudioSource;

	[Token(Token = "0x4000732")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private int fadeInVelocityLimit;

	[Token(Token = "0x4000733")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private int fadeInVelocity;

	[Token(Token = "0x4000734")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private WaterRipples waterRipples;

	[Token(Token = "0x4000735")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Vector3 oldPos;

	[Token(Token = "0x4000736")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
	private float currentVelocity;

	[Token(Token = "0x4000737")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Transform t;

	[Token(Token = "0x4000738")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private Queue<ReversedRipple> reversedVelocityQueue;

	[Token(Token = "0x4000739")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float triggeredTime;

	[Token(Token = "0x400073A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
	private bool canUpdate;

	[Token(Token = "0x400073B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private float randomRipplesCurrentTime;

	[Token(Token = "0x400073C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
	private bool canInstantiateRandomRipple;

	[Token(Token = "0x400073D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private GameObject splashMovedInstance;

	[Token(Token = "0x400073E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private ParticleSystem splashParticleSystem;

	[Token(Token = "0x400073F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	public float splashSizeMultiplier;

	[Token(Token = "0x6000962")]
	[Address(RVA = "0xC73888", Offset = "0xC73888", VA = "0xC73888")]
	private void Start()
	{
	}

	[Token(Token = "0x6000963")]
	[Address(RVA = "0xC7390C", Offset = "0xC7390C", VA = "0xC7390C")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000964")]
	[Address(RVA = "0xC74010", Offset = "0xC74010", VA = "0xC74010")]
	private void OnTriggerEnter(Collider collidedObj)
	{
	}

	[Token(Token = "0x6000965")]
	[Address(RVA = "0xC73D74", Offset = "0xC73D74", VA = "0xC73D74")]
	private void UpdateMovedSplash()
	{
	}

	[Token(Token = "0x6000966")]
	[Address(RVA = "0xC74224", Offset = "0xC74224", VA = "0xC74224")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000967")]
	[Address(RVA = "0xC742BC", Offset = "0xC742BC", VA = "0xC742BC")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000968")]
	[Address(RVA = "0xC7434C", Offset = "0xC7434C", VA = "0xC7434C")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000969")]
	[Address(RVA = "0xC743DC", Offset = "0xC743DC", VA = "0xC743DC")]
	public RippleCreator()
	{
	}
}
[Token(Token = "0x2000129")]
public class TextureScale
{
	[Token(Token = "0x200012A")]
	public class ThreadData
	{
		[Token(Token = "0x4000749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int start;

		[Token(Token = "0x400074A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public int end;

		[Token(Token = "0x6000972")]
		[Address(RVA = "0xC74608", Offset = "0xC74608", VA = "0xC74608")]
		public ThreadData(int s, int e)
		{
		}
	}

	[Token(Token = "0x4000742")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
	private static Color[] texColors;

	[Token(Token = "0x4000743")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
	private static Color[] newColors;

	[Token(Token = "0x4000744")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
	private static int w;

	[Token(Token = "0x4000745")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
	private static float ratioX;

	[Token(Token = "0x4000746")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	private static float ratioY;

	[Token(Token = "0x4000747")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	private static int w2;

	[Token(Token = "0x4000748")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private static int finishCount;

	[Token(Token = "0x600096B")]
	[Address(RVA = "0xC74410", Offset = "0xC74410", VA = "0xC74410")]
	public static void Point(Texture2D tex, int newWidth, int newHeight)
	{
	}

	[Token(Token = "0x600096C")]
	[Address(RVA = "0xC74600", Offset = "0xC74600", VA = "0xC74600")]
	public static void Bilinear(Texture2D tex, int newWidth, int newHeight)
	{
	}

	[Token(Token = "0x600096D")]
	[Address(RVA = "0xC74418", Offset = "0xC74418", VA = "0xC74418")]
	private static void ThreadedScale(Texture2D tex, int newWidth, int newHeight, bool useBilinear)
	{
	}

	[Token(Token = "0x600096E")]
	[Address(RVA = "0xC74634", Offset = "0xC74634", VA = "0xC74634")]
	public static void BilinearScale(object obj)
	{
	}

	[Token(Token = "0x600096F")]
	[Address(RVA = "0xC74844", Offset = "0xC74844", VA = "0xC74844")]
	public static void PointScale(object obj)
	{
	}

	[Token(Token = "0x6000970")]
	[Address(RVA = "0xC749CC", Offset = "0xC749CC", VA = "0xC749CC")]
	private static Color ColorLerpUnclamped(Color c1, Color c2, float value)
	{
		return default(Color);
	}

	[Token(Token = "0x6000971")]
	[Address(RVA = "0xC74A04", Offset = "0xC74A04", VA = "0xC74A04")]
	public TextureScale()
	{
	}
}
[Token(Token = "0x200012B")]
public class Underwater : MonoBehaviour
{
	[Token(Token = "0x400074B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float UnderwaterLevel;

	[Token(Token = "0x400074C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public Color FogColor;

	[Token(Token = "0x400074D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float FogDensity;

	[Token(Token = "0x400074E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public FogMode FogMode;

	[Token(Token = "0x400074F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private bool defaultFog;

	[Token(Token = "0x4000750")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Color defaultFogColor;

	[Token(Token = "0x4000751")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private float defaultFogDensity;

	[Token(Token = "0x4000752")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	private FogMode defaultFogMod;

	[Token(Token = "0x4000753")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Material defaultSkybox;

	[Token(Token = "0x6000973")]
	[Address(RVA = "0xC74A0C", Offset = "0xC74A0C", VA = "0xC74A0C")]
	private void Start()
	{
	}

	[Token(Token = "0x6000974")]
	[Address(RVA = "0xC74A54", Offset = "0xC74A54", VA = "0xC74A54")]
	private void Update()
	{
	}

	[Token(Token = "0x6000975")]
	[Address(RVA = "0xC74B00", Offset = "0xC74B00", VA = "0xC74B00")]
	public Underwater()
	{
	}
}
[Token(Token = "0x200012C")]
public class UnderwaterPostEffects : MonoBehaviour
{
	[Token(Token = "0x4000754")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public Color FogColor;

	[Token(Token = "0x4000755")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float FogDensity;

	[Token(Token = "0x4000756")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool UseSunShafts;

	[Token(Token = "0x4000757")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float ShuftsIntensity;

	[Token(Token = "0x4000758")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	public WFX_SunShafts.ShaftsScreenBlendMode SunShuftsScreenBlend;

	[Token(Token = "0x4000759")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 SunShaftTargetPosition;

	[Token(Token = "0x400075A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Camera cam;

	[Token(Token = "0x400075B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private WFX_SunShafts SunShafts;

	[Token(Token = "0x6000976")]
	[Address(RVA = "0xC74B24", Offset = "0xC74B24", VA = "0xC74B24")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x6000977")]
	[Address(RVA = "0xC74D14", Offset = "0xC74D14", VA = "0xC74D14")]
	private void Update()
	{
	}

	[Token(Token = "0x6000978")]
	[Address(RVA = "0xC74E14", Offset = "0xC74E14", VA = "0xC74E14")]
	public UnderwaterPostEffects()
	{
	}
}
[Token(Token = "0x200012D")]
public class WaterRipples : MonoBehaviour
{
	[Token(Token = "0x400075C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Range(20f, 200f)]
	public int UpdateFPS;

	[Token(Token = "0x400075D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool Multithreading;

	[Token(Token = "0x400075E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int DisplacementResolution;

	[Token(Token = "0x400075F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float Damping;

	[Token(Token = "0x4000760")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	[Range(0.0001f, 2f)]
	public float Speed;

	[Token(Token = "0x4000761")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public bool UseSmoothWaves;

	[Token(Token = "0x4000762")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
	public bool UseProjectedWaves;

	[Token(Token = "0x4000763")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public Texture2D CutOutTexture;

	[Token(Token = "0x4000764")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Transform t;

	[Token(Token = "0x4000765")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float textureColorMultiplier;

	[Token(Token = "0x4000766")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Texture2D displacementTexture;

	[Token(Token = "0x4000767")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private Vector2[,] waveAcceleration;

	[Token(Token = "0x4000768")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private Color[] col;

	[Token(Token = "0x4000769")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private Vector3[] wavePoints;

	[Token(Token = "0x400076A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Vector3 scaleBounds;

	[Token(Token = "0x400076B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
	private float inversedDamping;

	[Token(Token = "0x400076C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private float[] cutOutTextureGray;

	[Token(Token = "0x400076D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool cutOutTextureInitialized;

	[Token(Token = "0x400076E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private Thread thread;

	[Token(Token = "0x400076F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
	private bool canUpdate;

	[Token(Token = "0x4000770")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
	private double threadDeltaTime;

	[Token(Token = "0x4000771")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
	private DateTime oldDateTime;

	[Token(Token = "0x4000772")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
	private Vector2 movedObjPos;

	[Token(Token = "0x4000773")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
	private Vector2 projectorPosition;

	[Token(Token = "0x4000774")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
	private Vector4 _GAmplitude;

	[Token(Token = "0x4000775")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
	private Vector4 _GFrequency;

	[Token(Token = "0x4000776")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
	private Vector4 _GSteepness;

	[Token(Token = "0x4000777")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
	private Vector4 _GSpeed;

	[Token(Token = "0x4000778")]
	[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
	private Vector4 _GDirectionAB;

	[Token(Token = "0x4000779")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
	private Vector4 _GDirectionCD;

	[Token(Token = "0x6000979")]
	[Address(RVA = "0xC74E58", Offset = "0xC74E58", VA = "0xC74E58")]
	private void OnEnable()
	{
	}

	[Token(Token = "0x600097A")]
	[Address(RVA = "0xC72238", Offset = "0xC72238", VA = "0xC72238")]
	public Vector3 GetOffsetByPosition(Vector3 position)
	{
		return default(Vector3);
	}

	[Token(Token = "0x600097B")]
	[Address(RVA = "0xC73CAC", Offset = "0xC73CAC", VA = "0xC73CAC")]
	public void CreateRippleByPosition(Vector3 position, float velocity)
	{
	}

	[Token(Token = "0x600097C")]
	[Address(RVA = "0xC75144", Offset = "0xC75144", VA = "0xC75144")]
	private void InitializeRipple()
	{
	}

	[Token(Token = "0x600097D")]
	[Address(RVA = "0xC759D0", Offset = "0xC759D0", VA = "0xC759D0")]
	private Texture2D ScaleTexture(Texture2D source, int targetWidth, int targetHeight)
	{
		return null;
	}

	[Token(Token = "0x600097E")]
	[Address(RVA = "0xC75AC4", Offset = "0xC75AC4", VA = "0xC75AC4")]
	private void UpdateRipples()
	{
	}

	[Token(Token = "0x600097F")]
	[Address(RVA = "0xC76124", Offset = "0xC76124", VA = "0xC76124")]
	private void FixedUpdate()
	{
	}

	[Token(Token = "0x6000980")]
	[Address(RVA = "0xC7616C", Offset = "0xC7616C", VA = "0xC7616C")]
	private void Update()
	{
	}

	[Token(Token = "0x6000981")]
	[Address(RVA = "0xC761B0", Offset = "0xC761B0", VA = "0xC761B0")]
	private void UpdateProjector()
	{
	}

	[Token(Token = "0x6000982")]
	[Address(RVA = "0xC768A8", Offset = "0xC768A8", VA = "0xC768A8")]
	private void OnDestroy()
	{
	}

	[Token(Token = "0x6000983")]
	[Address(RVA = "0xC768B0", Offset = "0xC768B0", VA = "0xC768B0")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x6000984")]
	[Address(RVA = "0xC75BE8", Offset = "0xC75BE8", VA = "0xC75BE8")]
	private void RippleTextureRecalculate()
	{
	}

	[Token(Token = "0x6000985")]
	[Address(RVA = "0xC75794", Offset = "0xC75794", VA = "0xC75794")]
	private void SetRippleTexture(int x, int y, float strength)
	{
	}

	[Token(Token = "0x6000986")]
	[Address(RVA = "0xC756D4", Offset = "0xC756D4", VA = "0xC756D4")]
	private float GetTextureHeightByPosition(float x, float y)
	{
		return default(float);
	}

	[Token(Token = "0x6000987")]
	[Address(RVA = "0xC75484", Offset = "0xC75484", VA = "0xC75484")]
	private Vector3 GerstnerOffset4(Vector2 xzVtx, Vector4 _GSteepness, Vector4 _GAmplitude, Vector4 _GFrequency, Vector4 _GSpeed, Vector4 _GDirectionAB, Vector4 _GDirectionCD)
	{
		return default(Vector3);
	}

	[Token(Token = "0x6000988")]
	[Address(RVA = "0xC76900", Offset = "0xC76900", VA = "0xC76900")]
	public WaterRipples()
	{
	}
}
[Token(Token = "0x200012E")]
[ExecuteInEditMode]
public class Water_DistortionAndBloom : MonoBehaviour
{
	[Token(Token = "0x400077A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	[Tooltip("Camera render texture resolution")]
	[Range(0.05f, 1f)]
	public float RenderTextureResolutoinFactor;

	[Token(Token = "0x400077B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public LayerMask CullingMask;

	[Token(Token = "0x400077C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private RenderTexture source;

	[Token(Token = "0x400077D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private RenderTexture depth;

	[Token(Token = "0x400077E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private RenderTexture destination;

	[Token(Token = "0x400077F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private int previuosFrameWidth;

	[Token(Token = "0x4000780")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	private int previuosFrameHeight;

	[Token(Token = "0x4000781")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private float previousScale;

	[Token(Token = "0x4000782")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private Camera addCamera;

	[Token(Token = "0x4000783")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private GameObject tempGO;

	[Token(Token = "0x4000784")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	private bool HDRSupported;

	[Token(Token = "0x4000785")]
	private const int kMaxIterations = 16;

	[Token(Token = "0x4000786")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	private readonly RenderTexture[] m_blurBuffer1;

	[Token(Token = "0x4000787")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private readonly RenderTexture[] m_blurBuffer2;

	[Token(Token = "0x4000788")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	private GUIStyle guiStyleHeader;

	[Token(Token = "0x6000989")]
	[Address(RVA = "0xC76938", Offset = "0xC76938", VA = "0xC76938")]
	public static Material CheckShaderAndCreateMaterial(Shader s)
	{
		return null;
	}

	[Token(Token = "0x600098A")]
	[Address(RVA = "0xC76A00", Offset = "0xC76A00", VA = "0xC76A00")]
	private void OnDisable()
	{
	}

	[Token(Token = "0x600098B")]
	[Address(RVA = "0xC76ACC", Offset = "0xC76ACC", VA = "0xC76ACC")]
	private void Start()
	{
	}

	[Token(Token = "0x600098C")]
	[Address(RVA = "0xC76BCC", Offset = "0xC76BCC", VA = "0xC76BCC")]
	private void LateUpdate()
	{
	}

	[Token(Token = "0x600098D")]
	[Address(RVA = "0xC76AD0", Offset = "0xC76AD0", VA = "0xC76AD0")]
	private void InitializeRenderTarget()
	{
	}

	[Token(Token = "0x600098E")]
	[Address(RVA = "0xC76D2C", Offset = "0xC76D2C", VA = "0xC76D2C")]
	private void GrabImage()
	{
	}

	[Token(Token = "0x600098F")]
	[Address(RVA = "0xC76F40", Offset = "0xC76F40", VA = "0xC76F40")]
	public Water_DistortionAndBloom()
	{
	}
}
[Token(Token = "0x200012F")]
public class WFX_SunShafts : MonoBehaviour
{
	[Token(Token = "0x2000130")]
	public enum SunShaftsResolution
	{
		[Token(Token = "0x400079C")]
		Low,
		[Token(Token = "0x400079D")]
		Normal,
		[Token(Token = "0x400079E")]
		High
	}

	[Token(Token = "0x2000131")]
	public enum ShaftsScreenBlendMode
	{
		[Token(Token = "0x40007A0")]
		Screen,
		[Token(Token = "0x40007A1")]
		Add
	}

	[Token(Token = "0x4000789")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public SunShaftsResolution resolution;

	[Token(Token = "0x400078A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public ShaftsScreenBlendMode screenBlendMode;

	[Token(Token = "0x400078B")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform sunTransform;

	[Token(Token = "0x400078C")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int radialBlurIterations;

	[Token(Token = "0x400078D")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public Color sunColor;

	[Token(Token = "0x400078E")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
	public Color sunThreshold;

	[Token(Token = "0x400078F")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
	public float sunShaftBlurRadius;

	[Token(Token = "0x4000790")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	public float sunShaftIntensity;

	[Token(Token = "0x4000791")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
	public float maxRadius;

	[Token(Token = "0x4000792")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
	public bool useDepthTexture;

	[Token(Token = "0x4000793")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Shader sunShaftsShader;

	[Token(Token = "0x4000794")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	private Material sunShaftsMaterial;

	[Token(Token = "0x4000795")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
	public Shader simpleClearShader;

	[Token(Token = "0x4000796")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
	private Material simpleClearMaterial;

	[Token(Token = "0x4000797")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
	private bool supportHDRTextures;

	[Token(Token = "0x4000798")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
	private bool supportDX11;

	[Token(Token = "0x4000799")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x82")]
	private bool isSupported;

	[Token(Token = "0x400079A")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
	private List<Material> createdMaterials;

	[Token(Token = "0x6000990")]
	[Address(RVA = "0xC76FFC", Offset = "0xC76FFC", VA = "0xC76FFC")]
	protected void NotSupported()
	{
	}

	[Token(Token = "0x6000991")]
	[Address(RVA = "0xC7701C", Offset = "0xC7701C", VA = "0xC7701C")]
	private bool CheckSupport(bool needDepth)
	{
		return default(bool);
	}

	[Token(Token = "0x6000992")]
	[Address(RVA = "0xC77114", Offset = "0xC77114", VA = "0xC77114")]
	protected Material CheckShaderAndCreateMaterial(Shader s, Material m2Create)
	{
		return null;
	}

	[Token(Token = "0x6000993")]
	[Address(RVA = "0xC774F8", Offset = "0xC774F8", VA = "0xC774F8")]
	protected void ReportAutoDisable()
	{
	}

	[Token(Token = "0x6000994")]
	[Address(RVA = "0xC775B0", Offset = "0xC775B0", VA = "0xC775B0")]
	public bool CheckResources()
	{
		return default(bool);
	}

	[Token(Token = "0x6000995")]
	[Address(RVA = "0xC7767C", Offset = "0xC7767C", VA = "0xC7767C")]
	private void OnRenderImage(RenderTexture source, RenderTexture destination)
	{
	}

	[Token(Token = "0x6000996")]
	[Address(RVA = "0xC77D24", Offset = "0xC77D24", VA = "0xC77D24")]
	public WFX_SunShafts()
	{
	}
}
[Token(Token = "0x2000132")]
public class TEST : MonoBehaviour
{
	[Token(Token = "0x40007A2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int Index;

	[Token(Token = "0x40007A3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public GameObject[] NINJAS;

	[Token(Token = "0x6000997")]
	[Address(RVA = "0xC77DE8", Offset = "0xC77DE8", VA = "0xC77DE8")]
	private void Activate()
	{
	}

	[Token(Token = "0x6000998")]
	[Address(RVA = "0xC77E44", Offset = "0xC77E44", VA = "0xC77E44")]
	private void Update()
	{
	}

	[Token(Token = "0x6000999")]
	[Address(RVA = "0xC77E70", Offset = "0xC77E70", VA = "0xC77E70")]
	public TEST()
	{
	}
}
[Token(Token = "0x2000133")]
public class SpawnOnKey : MonoBehaviour
{
	[Token(Token = "0x40007A4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public GameObject SpawnGO;

	[Token(Token = "0x40007A5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform[] GOs;

	[Token(Token = "0x40007A6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private GameObject[] iGo;

	[Token(Token = "0x40007A7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private Vector3[] pos;

	[Token(Token = "0x600099A")]
	[Address(RVA = "0xC77E78", Offset = "0xC77E78", VA = "0xC77E78")]
	private void Start()
	{
	}

	[Token(Token = "0x600099B")]
	[Address(RVA = "0xC77F7C", Offset = "0xC77F7C", VA = "0xC77F7C")]
	private void SpawnGOs()
	{
	}

	[Token(Token = "0x600099C")]
	[Address(RVA = "0xC78188", Offset = "0xC78188", VA = "0xC78188")]
	private void Update()
	{
	}

	[Token(Token = "0x600099D")]
	[Address(RVA = "0xC781B4", Offset = "0xC781B4", VA = "0xC781B4")]
	public SpawnOnKey()
	{
	}
}
[Token(Token = "0x2000134")]
public class BH_DetectandPair : MonoBehaviour
{
	[Token(Token = "0x600099E")]
	[Address(RVA = "0xC781BC", Offset = "0xC781BC", VA = "0xC781BC")]
	public BH_DetectandPair()
	{
	}
}
[Token(Token = "0x2000135")]
[CreateAssetMenu(fileName = "New GameBaseStats", menuName = "VRKemono/GameBaseStats", order = 0)]
public class GameBaseStats : ScriptableObject
{
	[Token(Token = "0x40007A8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public int HeavyDamage;

	[Token(Token = "0x40007A9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public int LightDamage;

	[Token(Token = "0x40007AA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public int Level1Lamp;

	[Token(Token = "0x40007AB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public int Level2Lamp;

	[Token(Token = "0x40007AC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public int Level3Lamp;

	[Token(Token = "0x40007AD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public int BowHitScore;

	[Token(Token = "0x40007AE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	public float portalSpawnTime;

	[Token(Token = "0x600099F")]
	[Address(RVA = "0xC781C4", Offset = "0xC781C4", VA = "0xC781C4")]
	public GameBaseStats()
	{
	}
}
[Token(Token = "0x2000136")]
public class PlayerDamageScore : MonoBehaviour
{
	[Token(Token = "0x60009A0")]
	[Address(RVA = "0xC781EC", Offset = "0xC781EC", VA = "0xC781EC")]
	private void Start()
	{
	}

	[Token(Token = "0x60009A1")]
	[Address(RVA = "0xC781F0", Offset = "0xC781F0", VA = "0xC781F0")]
	private void Update()
	{
	}

	[Token(Token = "0x60009A2")]
	[Address(RVA = "0xC781F4", Offset = "0xC781F4", VA = "0xC781F4")]
	public PlayerDamageScore()
	{
	}
}
[Token(Token = "0x2000137")]
public class ApplyDamage : MonoBehaviour
{
	[Token(Token = "0x40007AF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public bool DebugMode;

	[Token(Token = "0x40007B0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
	public bool ShowOnGuiInfo;

	[Token(Token = "0x40007B1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float HitRadius;

	[Token(Token = "0x40007B2")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public float Dirt;

	[Token(Token = "0x40007B3")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
	public float Burn;

	[Token(Token = "0x40007B4")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float Heat;

	[Token(Token = "0x40007B5")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float Clip;

	[Token(Token = "0x40007B6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private RaycastHit _hitInfo;

	[Token(Token = "0x40007B7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
	public Transform ImpactFX;

	[Token(Token = "0x40007B8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
	public float ImpactSize;

	[Token(Token = "0x60009A3")]
	[Address(RVA = "0xC781FC", Offset = "0xC781FC", VA = "0xC781FC")]
	private void DealDamage()
	{
	}

	[Token(Token = "0x60009A4")]
	[Address(RVA = "0xC7833C", Offset = "0xC7833C", VA = "0xC7833C")]
	private void OnGUI()
	{
	}

	[Token(Token = "0x60009A5")]
	[Address(RVA = "0xC78690", Offset = "0xC78690", VA = "0xC78690")]
	private void Update()
	{
	}

	[Token(Token = "0x60009A6")]
	[Address(RVA = "0xC78DF4", Offset = "0xC78DF4", VA = "0xC78DF4")]
	public ApplyDamage()
	{
	}
}
[Token(Token = "0x2000138")]
public class DamageFX : MonoBehaviour
{
	[Token(Token = "0x2000139")]
	[CompilerGenerated]
	private sealed class <SetData>d__14 : IEnumerator<object>, IEnumerator, IDisposable
	{
		[Token(Token = "0x40007C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private int <>1__state;

		[Token(Token = "0x40007C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private object <>2__current;

		[Token(Token = "0x40007C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DamageFX <>4__this;

		[Token(Token = "0x40007C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float delay;

		[Token(Token = "0x17000062")]
		private object System.Collections.Generic.IEnumerator<System.Object>.Current
		{
			[Token(Token = "0x60009B1")]
			[Address(RVA = "0xC794D4", Offset = "0xC794D4", VA = "0xC794D4", Slot = "4")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000063")]
		private object System.Collections.IEnumerator.Current
		{
			[Token(Token = "0x60009B3")]
			[Address(RVA = "0xC7951C", Offset = "0xC7951C", VA = "0xC7951C", Slot = "7")]
			[DebuggerHidden]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60009AE")]
		[Address(RVA = "0xC79250", Offset = "0xC79250", VA = "0xC79250")]
		[DebuggerHidden]
		public <SetData>d__14(int <>1__state)
		{
		}

		[Token(Token = "0x60009AF")]
		[Address(RVA = "0xC7928C", Offset = "0xC7928C", VA = "0xC7928C", Slot = "5")]
		[DebuggerHidden]
		private void System.IDisposable.Dispose()
		{
		}

		[Token(Token = "0x60009B0")]
		[Address(RVA = "0xC79290", Offset = "0xC79290", VA = "0xC79290", Slot = "6")]
		private bool MoveNext()
		{
			return default(bool);
		}

		[Token(Token = "0x60009B2")]
		[Address(RVA = "0xC794DC", Offset = "0xC794DC", VA = "0xC794DC", Slot = "8")]
		[DebuggerHidden]
		private void System.Collections.IEnumerator.Reset()
		{
		}
	}

	[Token(Token = "0x40007B9")]
	private const int TotalPoints = 1000;

	[Token(Token = "0x40007BA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public float DecayTickRate;

	[Token(Token = "0x40007BB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public float DecayPerTick;

	[Token(Token = "0x40007BC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	private Vector4[] _points;

	[Token(Token = "0x40007BD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	private Vector4[] _data;

	[Token(Token = "0x40007BE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private int _counter;

	[Token(Token = "0x40007BF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Renderer _renderer;

	[Token(Token = "0x40007C0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
	private Material[] _cachedMaterials;

	[Token(Token = "0x40007C1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private bool _dataDirty;

	[Token(Token = "0x60009A7")]
	[Address(RVA = "0xC78E28", Offset = "0xC78E28", VA = "0xC78E28")]
	private void Awake()
	{
	}

	[Token(Token = "0x60009A8")]
	[Address(RVA = "0xC78F70", Offset = "0xC78F70", VA = "0xC78F70")]
	private void MaterialUpdateArrays(int points)
	{
	}

	[Token(Token = "0x60009A9")]
	[Address(RVA = "0xC78C7C", Offset = "0xC78C7C", VA = "0xC78C7C")]
	public void Clear()
	{
	}

	[Token(Token = "0x60009AA")]
	[Address(RVA = "0xC79094", Offset = "0xC79094", VA = "0xC79094")]
	private void AddPoint(Vector3 point, float hitRadius, float dirt, float burn, float heat, float clip)
	{
	}

	[Token(Token = "0x60009AB")]
	[Address(RVA = "0xC78310", Offset = "0xC78310", VA = "0xC78310")]
	public void Hit(Vector3 point, float hitRadius, float dirt, float burn, float heat, float clip)
	{
	}

	[Token(Token = "0x60009AC")]
	[Address(RVA = "0xC791D8", Offset = "0xC791D8", VA = "0xC791D8")]
	[IteratorStateMachine(typeof(<SetData>d__14))]
	private IEnumerator SetData(float delay)
	{
		return null;
	}

	[Token(Token = "0x60009AD")]
	[Address(RVA = "0xC79278", Offset = "0xC79278", VA = "0xC79278")]
	public DamageFX()
	{
	}
}
[Token(Token = "0x200013A")]
public class FeetSoundManager : MonoBehaviour
{
	[Token(Token = "0x40007C6")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
	public LayerMask groundLayers;

	[Token(Token = "0x40007C7")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
	public bool bAutoFeetSound;

	[Token(Token = "0x40007C8")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
	public bool broadcastFeedSounds;

	[Token(Token = "0x40007C9")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
	public Transform characterTr;

	[Token(Token = "0x40007CA")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
	public float stepDistance;

	[Token(Token = "0x40007CB")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
	public float checkStepRate;

	[Token(Token = "0x40007CC")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
	private float _distanceTravelled;

	[Token(Token = "0x40007CD")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
	private float _stepRand;

	[Token(Token = "0x40007CE")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
	private Vector3 _prevPos;

	[Token(Token = "0x40007CF")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
	private SoundBroadcaster _sBroadcaster;

	[Token(Token = "0x40007D0")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
	private bool _isHapticsEnabled;

	[Token(Token = "0x40007D1")]
	[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
	private bool _isRightFootStep;

	[Token(Token = "0x60009B4")]
	[Address(RVA = "0xC79524", Offset = "0xC79524", VA = "0xC79524")]
	public void Init()
	{
	}

	[Token(Token = "0x60009B5")]
	[Address(RVA = "0xC796D0", Offset = "0xC796D0", VA = "0xC796D0")]
	public void PlayFootstepSound()
	{
	}

	[Token(Token = "0x60009B6")]
	[Address(RVA = "0xC79914", Offset = "0xC79914", VA = "0xC79914")]
	private void IR_CheckStepPlaced()
	{
	}

	[Token(Token = "0x60009B7")]
	[Address(RVA = "0xC79A30", Offset = "0xC79A30", VA = "0xC79A30")]
	public FeetSoundManager()
	{
	}
}
namespace BLINDED_AM_ME
{
	[Token(Token = "0x200013B")]
	public class MeshCut
	{
		[Token(Token = "0x40007D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Plane _blade;

		[Token(Token = "0x40007D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static Mesh _victim_mesh;

		[Token(Token = "0x40007D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static Mesh_Maker _leftSide;

		[Token(Token = "0x40007D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static Mesh_Maker _rightSide;

		[Token(Token = "0x40007D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static Mesh_Maker.Triangle _triangleCache;

		[Token(Token = "0x40007D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private static List<Vector3> _newVerticesCache;

		[Token(Token = "0x40007D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private static bool[] _isLeftSideCache;

		[Token(Token = "0x40007D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private static int _capMatSub;

		[Token(Token = "0x40007DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private static Mesh_Maker.Triangle _leftTriangleCache;

		[Token(Token = "0x40007DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private static Mesh_Maker.Triangle _rightTriangleCache;

		[Token(Token = "0x40007DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private static Mesh_Maker.Triangle _newTriangleCache;

		[Token(Token = "0x40007DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private static List<int> _capUsedIndicesCache;

		[Token(Token = "0x40007DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private static List<int> _capPolygonIndicesCache;

		[Token(Token = "0x60009B8")]
		[Address(RVA = "0xC79A4C", Offset = "0xC79A4C", VA = "0xC79A4C")]
		public static GameObject[] Cut(GameObject victim, Vector3 anchorPoint, Vector3 normalDirection, Material capMaterial)
		{
			return null;
		}

		[Token(Token = "0x60009B9")]
		[Address(RVA = "0xC7A8BC", Offset = "0xC7A8BC", VA = "0xC7A8BC")]
		private static void Cut_this_Face(ref Mesh_Maker.Triangle triangle, int submesh)
		{
		}

		[Token(Token = "0x60009BA")]
		[Address(RVA = "0xC7CAAC", Offset = "0xC7CAAC", VA = "0xC7CAAC")]
		private static void Cap_the_Cut()
		{
		}

		[Token(Token = "0x60009BB")]
		[Address(RVA = "0xC7D6A4", Offset = "0xC7D6A4", VA = "0xC7D6A4")]
		private static void FillCap_Method1(List<int> indices)
		{
		}

		[Token(Token = "0x60009BC")]
		[Address(RVA = "0xC7DF68", Offset = "0xC7DF68", VA = "0xC7DF68")]
		private static void FillCap_Method2(List<int> indices)
		{
		}

		[Token(Token = "0x60009BD")]
		[Address(RVA = "0xC7D4D8", Offset = "0xC7D4D8", VA = "0xC7D4D8")]
		private static void NormalCheck(ref Mesh_Maker.Triangle triangle)
		{
		}

		[Token(Token = "0x60009BE")]
		[Address(RVA = "0xC7E794", Offset = "0xC7E794", VA = "0xC7E794")]
		public MeshCut()
		{
		}
	}
	[Token(Token = "0x200013C")]
	public class Mesh_Maker
	{
		[Token(Token = "0x200013D")]
		public struct Triangle
		{
			[Token(Token = "0x40007E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector3[] vertices;

			[Token(Token = "0x40007E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Vector2[] uvs;

			[Token(Token = "0x40007E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3[] normals;

			[Token(Token = "0x40007E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector4[] tangents;

			[Token(Token = "0x60009C9")]
			[Address(RVA = "0xC7FD94", Offset = "0xC7FD94", VA = "0xC7FD94")]
			public Triangle([Optional] Vector3[] vertices, [Optional] Vector2[] uvs, [Optional] Vector3[] normals, [Optional] Vector4[] tangents)
			{
			}
		}

		[Token(Token = "0x40007DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private List<Vector3> _vertices;

		[Token(Token = "0x40007E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private List<Vector3> _normals;

		[Token(Token = "0x40007E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Vector2> _uvs;

		[Token(Token = "0x40007E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Vector4> _tangents;

		[Token(Token = "0x40007E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<List<int>> _subIndices;

		[Token(Token = "0x17000064")]
		public int VertCount
		{
			[Token(Token = "0x60009C0")]
			[Address(RVA = "0xC7EB78", Offset = "0xC7EB78", VA = "0xC7EB78")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60009C1")]
		[Address(RVA = "0xC7EBC0", Offset = "0xC7EBC0", VA = "0xC7EBC0")]
		public void Clear()
		{
		}

		[Token(Token = "0x60009C2")]
		[Address(RVA = "0xC7ECA4", Offset = "0xC7ECA4", VA = "0xC7ECA4")]
		public void AddTriangle(Triangle triangle, int submesh)
		{
		}

		[Token(Token = "0x60009C3")]
		[Address(RVA = "0xC7F510", Offset = "0xC7F510", VA = "0xC7F510")]
		public void AddTriangle(Vector3[] vertices, Vector2[] uvs, Vector3[] normals, int submesh = 0)
		{
		}

		[Token(Token = "0x60009C4")]
		[Address(RVA = "0xC7ECB8", Offset = "0xC7ECB8", VA = "0xC7ECB8")]
		public void AddTriangle(Vector3[] vertices, Vector2[] uvs, Vector3[] normals, Vector4[] tangents, int submesh = 0)
		{
		}

		[Token(Token = "0x60009C5")]
		[Address(RVA = "0xC7F51C", Offset = "0xC7F51C", VA = "0xC7F51C")]
		public void RemoveDoubles()
		{
		}

		[Token(Token = "0x60009C6")]
		[Address(RVA = "0xC7F84C", Offset = "0xC7F84C", VA = "0xC7F84C")]
		private void DoubleFound(int first, int duplicate)
		{
		}

		[Token(Token = "0x60009C7")]
		[Address(RVA = "0xC7FAAC", Offset = "0xC7FAAC", VA = "0xC7FAAC")]
		public Mesh GetMesh()
		{
			return null;
		}

		[Token(Token = "0x60009C8")]
		[Address(RVA = "0xC7FC28", Offset = "0xC7FC28", VA = "0xC7FC28")]
		public Mesh_Maker()
		{
		}
	}
}
namespace VolumetricLines
{
	[Token(Token = "0x200013E")]
	public class VolumetricMultiLineBehavior : MonoBehaviour
	{
		[Token(Token = "0x40007E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Material m_templateMaterial;

		[Token(Token = "0x40007E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool m_doNotOverwriteTemplateMaterialProperties;

		[Token(Token = "0x40007EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private Color m_lineColor;

		[Token(Token = "0x40007EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float m_lineWidth;

		[Token(Token = "0x40007EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 1f)]
		[SerializeField]
		private float m_lightSaberFactor;

		[Token(Token = "0x40007ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Vector3[] m_lineVertices;

		[Token(Token = "0x40007EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private VolumetricLineBehavior[] m_volumetricLines;

		[Token(Token = "0x17000065")]
		public Material TemplateMaterial
		{
			[Token(Token = "0x60009CA")]
			[Address(RVA = "0xC7FDA0", Offset = "0xC7FDA0", VA = "0xC7FDA0")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009CB")]
			[Address(RVA = "0xC7FDA8", Offset = "0xC7FDA8", VA = "0xC7FDA8")]
			set
			{
			}
		}

		[Token(Token = "0x17000066")]
		public bool DoNotOverwriteTemplateMaterialProperties
		{
			[Token(Token = "0x60009CC")]
			[Address(RVA = "0xC7FDB0", Offset = "0xC7FDB0", VA = "0xC7FDB0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60009CD")]
			[Address(RVA = "0xC7FDB8", Offset = "0xC7FDB8", VA = "0xC7FDB8")]
			set
			{
			}
		}

		[Token(Token = "0x17000067")]
		public Color LineColor
		{
			[Token(Token = "0x60009CE")]
			[Address(RVA = "0xC7FDC4", Offset = "0xC7FDC4", VA = "0xC7FDC4")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x60009CF")]
			[Address(RVA = "0xC7FDD0", Offset = "0xC7FDD0", VA = "0xC7FDD0")]
			set
			{
			}
		}

		[Token(Token = "0x17000068")]
		public float LineWidth
		{
			[Token(Token = "0x60009D0")]
			[Address(RVA = "0xC7FFD4", Offset = "0xC7FFD4", VA = "0xC7FFD4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60009D1")]
			[Address(RVA = "0xC7FFDC", Offset = "0xC7FFDC", VA = "0xC7FFDC")]
			set
			{
			}
		}

		[Token(Token = "0x17000069")]
		public float LightSaberFactor
		{
			[Token(Token = "0x60009D2")]
			[Address(RVA = "0xC801A4", Offset = "0xC801A4", VA = "0xC801A4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60009D3")]
			[Address(RVA = "0xC801AC", Offset = "0xC801AC", VA = "0xC801AC")]
			set
			{
			}
		}

		[Token(Token = "0x60009D4")]
		[Address(RVA = "0xC8037C", Offset = "0xC8037C", VA = "0xC8037C")]
		public void CreateAllVolumetricLines()
		{
		}

		[Token(Token = "0x60009D5")]
		[Address(RVA = "0xC806F4", Offset = "0xC806F4", VA = "0xC806F4")]
		public void DestroyAllVolumetricLines()
		{
		}

		[Token(Token = "0x60009D6")]
		[Address(RVA = "0xC80840", Offset = "0xC80840", VA = "0xC80840")]
		public void UpdateLineVertices(Vector3[] newSetOfVertices)
		{
		}

		[Token(Token = "0x60009D7")]
		[Address(RVA = "0xC80868", Offset = "0xC80868", VA = "0xC80868")]
		private void SetAllMaterialProperties()
		{
		}

		[Token(Token = "0x60009D8")]
		[Address(RVA = "0xC80898", Offset = "0xC80898", VA = "0xC80898")]
		private void Start()
		{
		}

		[Token(Token = "0x60009D9")]
		[Address(RVA = "0xC8089C", Offset = "0xC8089C", VA = "0xC8089C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60009DA")]
		[Address(RVA = "0xC808A0", Offset = "0xC808A0", VA = "0xC808A0")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x60009DB")]
		[Address(RVA = "0xC808A4", Offset = "0xC808A4", VA = "0xC808A4")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x60009DC")]
		[Address(RVA = "0xC809F8", Offset = "0xC809F8", VA = "0xC809F8")]
		public VolumetricMultiLineBehavior()
		{
		}
	}
	[Token(Token = "0x200013F")]
	[RequireComponent(typeof(MeshFilter))]
	[RequireComponent(typeof(MeshRenderer))]
	[ExecuteInEditMode]
	public class VolumetricLineBehavior : MonoBehaviour
	{
		[Token(Token = "0x40007EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Vector3 Average;

		[Token(Token = "0x40007F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Material m_templateMaterial;

		[Token(Token = "0x40007F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool m_doNotOverwriteTemplateMaterialProperties;

		[Token(Token = "0x40007F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private Vector3 m_startPos;

		[Token(Token = "0x40007F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Vector3 m_endPos;

		[Token(Token = "0x40007F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		private Color m_lineColor;

		[Token(Token = "0x40007F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		private float m_lineWidth;

		[Token(Token = "0x40007F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Range(0f, 1f)]
		[SerializeField]
		private float m_lightSaberFactor;

		[Token(Token = "0x40007F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Material m_material;

		[Token(Token = "0x40007F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private MeshFilter m_meshFilter;

		[Token(Token = "0x1700006A")]
		public Material TemplateMaterial
		{
			[Token(Token = "0x60009DD")]
			[Address(RVA = "0xC80A00", Offset = "0xC80A00", VA = "0xC80A00")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009DE")]
			[Address(RVA = "0xC80A08", Offset = "0xC80A08", VA = "0xC80A08")]
			set
			{
			}
		}

		[Token(Token = "0x1700006B")]
		public bool DoNotOverwriteTemplateMaterialProperties
		{
			[Token(Token = "0x60009DF")]
			[Address(RVA = "0xC80A10", Offset = "0xC80A10", VA = "0xC80A10")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60009E0")]
			[Address(RVA = "0xC80A18", Offset = "0xC80A18", VA = "0xC80A18")]
			set
			{
			}
		}

		[Token(Token = "0x1700006C")]
		public Color LineColor
		{
			[Token(Token = "0x60009E1")]
			[Address(RVA = "0xC80A24", Offset = "0xC80A24", VA = "0xC80A24")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x60009E2")]
			[Address(RVA = "0xC7FF08", Offset = "0xC7FF08", VA = "0xC7FF08")]
			set
			{
			}
		}

		[Token(Token = "0x1700006D")]
		public float LineWidth
		{
			[Token(Token = "0x60009E3")]
			[Address(RVA = "0xC80BA8", Offset = "0xC80BA8", VA = "0xC80BA8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60009E4")]
			[Address(RVA = "0xC800F0", Offset = "0xC800F0", VA = "0xC800F0")]
			set
			{
			}
		}

		[Token(Token = "0x1700006E")]
		public float LightSaberFactor
		{
			[Token(Token = "0x60009E5")]
			[Address(RVA = "0xC80C90", Offset = "0xC80C90", VA = "0xC80C90")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60009E6")]
			[Address(RVA = "0xC802C0", Offset = "0xC802C0", VA = "0xC802C0")]
			set
			{
			}
		}

		[Token(Token = "0x1700006F")]
		public Vector3 StartPos
		{
			[Token(Token = "0x60009E7")]
			[Address(RVA = "0xC80C98", Offset = "0xC80C98", VA = "0xC80C98")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60009E8")]
			[Address(RVA = "0xC806C0", Offset = "0xC806C0", VA = "0xC806C0")]
			set
			{
			}
		}

		[Token(Token = "0x17000070")]
		public Vector3 EndPos
		{
			[Token(Token = "0x60009E9")]
			[Address(RVA = "0xC80F94", Offset = "0xC80F94", VA = "0xC80F94")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x60009EA")]
			[Address(RVA = "0xC806D4", Offset = "0xC806D4", VA = "0xC806D4")]
			set
			{
			}
		}

		[Token(Token = "0x60009EB")]
		[Address(RVA = "0xC80A30", Offset = "0xC80A30", VA = "0xC80A30")]
		private void CreateMaterial()
		{
		}

		[Token(Token = "0x60009EC")]
		[Address(RVA = "0xC810A8", Offset = "0xC810A8", VA = "0xC810A8")]
		private void DestroyMaterial()
		{
		}

		[Token(Token = "0x60009ED")]
		[Address(RVA = "0xC81134", Offset = "0xC81134", VA = "0xC81134")]
		private float CalculateLineScale()
		{
			return default(float);
		}

		[Token(Token = "0x60009EE")]
		[Address(RVA = "0xC811E0", Offset = "0xC811E0", VA = "0xC811E0")]
		public void UpdateLineScale()
		{
		}

		[Token(Token = "0x60009EF")]
		[Address(RVA = "0xC80FA0", Offset = "0xC80FA0", VA = "0xC80FA0")]
		private void SetAllMaterialProperties()
		{
		}

		[Token(Token = "0x60009F0")]
		[Address(RVA = "0xC81288", Offset = "0xC81288", VA = "0xC81288")]
		private Bounds CalculateBounds()
		{
			return default(Bounds);
		}

		[Token(Token = "0x60009F1")]
		[Address(RVA = "0xC80BB0", Offset = "0xC80BB0", VA = "0xC80BB0")]
		public void UpdateBounds()
		{
		}

		[Token(Token = "0x60009F2")]
		[Address(RVA = "0xC80CA4", Offset = "0xC80CA4", VA = "0xC80CA4")]
		public void SetStartAndEndPoints(Vector3 startPoint, Vector3 endPoint)
		{
		}

		[Token(Token = "0x60009F3")]
		[Address(RVA = "0xC81440", Offset = "0xC81440", VA = "0xC81440")]
		private void Start()
		{
		}

		[Token(Token = "0x60009F4")]
		[Address(RVA = "0xC8155C", Offset = "0xC8155C", VA = "0xC8155C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60009F5")]
		[Address(RVA = "0xC81630", Offset = "0xC81630", VA = "0xC81630")]
		private void Update()
		{
		}

		[Token(Token = "0x60009F6")]
		[Address(RVA = "0xC81670", Offset = "0xC81670", VA = "0xC81670")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x60009F7")]
		[Address(RVA = "0xC8170C", Offset = "0xC8170C", VA = "0xC8170C")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x60009F8")]
		[Address(RVA = "0xC817C8", Offset = "0xC817C8", VA = "0xC817C8")]
		public VolumetricLineBehavior()
		{
		}
	}
	[Token(Token = "0x2000140")]
	[RequireComponent(typeof(MeshFilter))]
	[ExecuteInEditMode]
	[RequireComponent(typeof(MeshRenderer))]
	public class VolumetricLineStripBehavior : MonoBehaviour
	{
		[Token(Token = "0x40007F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly Vector3 Average;

		[Token(Token = "0x40007FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public Material m_templateMaterial;

		[Token(Token = "0x40007FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private bool m_doNotOverwriteTemplateMaterialProperties;

		[Token(Token = "0x40007FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private Color m_lineColor;

		[Token(Token = "0x40007FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[SerializeField]
		private float m_lineWidth;

		[Token(Token = "0x40007FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 1f)]
		[SerializeField]
		private float m_lightSaberFactor;

		[Token(Token = "0x40007FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Material m_material;

		[Token(Token = "0x4000800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private MeshFilter m_meshFilter;

		[Token(Token = "0x4000801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Vector3[] m_lineVertices;

		[Token(Token = "0x17000071")]
		public Material TemplateMaterial
		{
			[Token(Token = "0x60009FA")]
			[Address(RVA = "0xC81834", Offset = "0xC81834", VA = "0xC81834")]
			get
			{
				return null;
			}
			[Token(Token = "0x60009FB")]
			[Address(RVA = "0xC8183C", Offset = "0xC8183C", VA = "0xC8183C")]
			set
			{
			}
		}

		[Token(Token = "0x17000072")]
		public bool DoNotOverwriteTemplateMaterialProperties
		{
			[Token(Token = "0x60009FC")]
			[Address(RVA = "0xC81844", Offset = "0xC81844", VA = "0xC81844")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60009FD")]
			[Address(RVA = "0xC8184C", Offset = "0xC8184C", VA = "0xC8184C")]
			set
			{
			}
		}

		[Token(Token = "0x17000073")]
		public Color LineColor
		{
			[Token(Token = "0x60009FE")]
			[Address(RVA = "0xC81858", Offset = "0xC81858", VA = "0xC81858")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x60009FF")]
			[Address(RVA = "0xC81864", Offset = "0xC81864", VA = "0xC81864")]
			set
			{
			}
		}

		[Token(Token = "0x17000074")]
		public float LineWidth
		{
			[Token(Token = "0x6000A00")]
			[Address(RVA = "0xC81AA8", Offset = "0xC81AA8", VA = "0xC81AA8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A01")]
			[Address(RVA = "0xC81AB0", Offset = "0xC81AB0", VA = "0xC81AB0")]
			set
			{
			}
		}

		[Token(Token = "0x17000075")]
		public float LightSaberFactor
		{
			[Token(Token = "0x6000A02")]
			[Address(RVA = "0xC81C44", Offset = "0xC81C44", VA = "0xC81C44")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A03")]
			[Address(RVA = "0xC81C4C", Offset = "0xC81C4C", VA = "0xC81C4C")]
			set
			{
			}
		}

		[Token(Token = "0x17000076")]
		public Vector3[] LineVertices
		{
			[Token(Token = "0x6000A04")]
			[Address(RVA = "0xC81D08", Offset = "0xC81D08", VA = "0xC81D08")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A05")]
		[Address(RVA = "0xC81930", Offset = "0xC81930", VA = "0xC81930")]
		private void CreateMaterial()
		{
		}

		[Token(Token = "0x6000A06")]
		[Address(RVA = "0xC81E10", Offset = "0xC81E10", VA = "0xC81E10")]
		private void DestroyMaterial()
		{
		}

		[Token(Token = "0x6000A07")]
		[Address(RVA = "0xC81E9C", Offset = "0xC81E9C", VA = "0xC81E9C")]
		private float CalculateLineScale()
		{
			return default(float);
		}

		[Token(Token = "0x6000A08")]
		[Address(RVA = "0xC81F48", Offset = "0xC81F48", VA = "0xC81F48")]
		public void UpdateLineScale()
		{
		}

		[Token(Token = "0x6000A09")]
		[Address(RVA = "0xC81D10", Offset = "0xC81D10", VA = "0xC81D10")]
		private void SetAllMaterialProperties()
		{
		}

		[Token(Token = "0x6000A0A")]
		[Address(RVA = "0xC82C04", Offset = "0xC82C04", VA = "0xC82C04")]
		private Bounds CalculateBounds()
		{
			return default(Bounds);
		}

		[Token(Token = "0x6000A0B")]
		[Address(RVA = "0xC81B64", Offset = "0xC81B64", VA = "0xC81B64")]
		public void UpdateBounds()
		{
		}

		[Token(Token = "0x6000A0C")]
		[Address(RVA = "0xC81FF0", Offset = "0xC81FF0", VA = "0xC81FF0")]
		public void UpdateLineVertices(Vector3[] newSetOfVertices)
		{
		}

		[Token(Token = "0x6000A0D")]
		[Address(RVA = "0xC82E20", Offset = "0xC82E20", VA = "0xC82E20")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A0E")]
		[Address(RVA = "0xC82EC0", Offset = "0xC82EC0", VA = "0xC82EC0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000A0F")]
		[Address(RVA = "0xC82F94", Offset = "0xC82F94", VA = "0xC82F94")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A10")]
		[Address(RVA = "0xC82FD4", Offset = "0xC82FD4", VA = "0xC82FD4")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6000A11")]
		[Address(RVA = "0xC83070", Offset = "0xC83070", VA = "0xC83070")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6000A12")]
		[Address(RVA = "0xC831C4", Offset = "0xC831C4", VA = "0xC831C4")]
		public VolumetricLineStripBehavior()
		{
		}
	}
	[Token(Token = "0x2000141")]
	public static class VolumetricLineVertexData
	{
		[Token(Token = "0x4000802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly Vector2[] TexCoords;

		[Token(Token = "0x4000803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly Vector2[] VertexOffsets;

		[Token(Token = "0x4000804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly int[] Indices;
	}
}
namespace MirzaBeig.Shaders.ImageEffects
{
	[Serializable]
	[Token(Token = "0x2000142")]
	[ExecuteInEditMode]
	public class Sharpen : IEBase
	{
		[Token(Token = "0x4000805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(-2f, 2f)]
		public float strength;

		[Token(Token = "0x4000806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 8f)]
		public float edgeMult;

		[Token(Token = "0x6000A15")]
		[Address(RVA = "0xC83400", Offset = "0xC83400", VA = "0xC83400")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A16")]
		[Address(RVA = "0xC83450", Offset = "0xC83450", VA = "0xC83450")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A17")]
		[Address(RVA = "0xC83454", Offset = "0xC83454", VA = "0xC83454")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A18")]
		[Address(RVA = "0xC83458", Offset = "0xC83458", VA = "0xC83458")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000A19")]
		[Address(RVA = "0xC83638", Offset = "0xC83638", VA = "0xC83638")]
		public Sharpen()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000143")]
	[ExecuteInEditMode]
	public class IEBase : MonoBehaviour
	{
		[Token(Token = "0x4000807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Material _material;

		[Token(Token = "0x4000809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Camera _camera;

		[Token(Token = "0x17000077")]
		protected Material material
		{
			[Token(Token = "0x6000A1A")]
			[Address(RVA = "0xC83504", Offset = "0xC83504", VA = "0xC83504")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000078")]
		protected Shader shader
		{
			[Token(Token = "0x6000A1B")]
			[Address(RVA = "0xC83654", Offset = "0xC83654", VA = "0xC83654")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000A1C")]
			[Address(RVA = "0xC8365C", Offset = "0xC8365C", VA = "0xC8365C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000079")]
		protected Camera camera
		{
			[Token(Token = "0x6000A1D")]
			[Address(RVA = "0xC83664", Offset = "0xC83664", VA = "0xC83664")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000A1E")]
		[Address(RVA = "0xC836F4", Offset = "0xC836F4", VA = "0xC836F4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A1F")]
		[Address(RVA = "0xC836F8", Offset = "0xC836F8", VA = "0xC836F8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A20")]
		[Address(RVA = "0xC836FC", Offset = "0xC836FC", VA = "0xC836FC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A21")]
		[Address(RVA = "0xC83700", Offset = "0xC83700", VA = "0xC83700")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000A22")]
		[Address(RVA = "0xC835B8", Offset = "0xC835B8", VA = "0xC835B8")]
		protected void blit(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000A23")]
		[Address(RVA = "0xC83704", Offset = "0xC83704", VA = "0xC83704")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000A24")]
		[Address(RVA = "0xC8364C", Offset = "0xC8364C", VA = "0xC8364C")]
		public IEBase()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000144")]
	[ExecuteInEditMode]
	public class MirzaPostProcessing : MonoBehaviour
	{
		[Token(Token = "0x400080A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material material;

		[Token(Token = "0x6000A25")]
		[Address(RVA = "0xC83790", Offset = "0xC83790", VA = "0xC83790")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000A26")]
		[Address(RVA = "0xC83804", Offset = "0xC83804", VA = "0xC83804")]
		public MirzaPostProcessing()
		{
		}
	}
}
namespace MirzaBeig.Scripting.Effects
{
	[Token(Token = "0x2000145")]
	public class AttractionParticleAffector : ParticleAffector
	{
		[Token(Token = "0x400080B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Header("Affector Controls")]
		public float arrivalRadius;

		[Token(Token = "0x400080C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float arrivedRadius;

		[Token(Token = "0x400080D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float arrivalRadiusSqr;

		[Token(Token = "0x400080E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private float arrivedRadiusSqr;

		[Token(Token = "0x6000A27")]
		[Address(RVA = "0xC8380C", Offset = "0xC8380C", VA = "0xC8380C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000A28")]
		[Address(RVA = "0xC83814", Offset = "0xC83814", VA = "0xC83814", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000A29")]
		[Address(RVA = "0xC83868", Offset = "0xC83868", VA = "0xC83868", Slot = "8")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000A2A")]
		[Address(RVA = "0xC83870", Offset = "0xC83870", VA = "0xC83870", Slot = "9")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x6000A2B")]
		[Address(RVA = "0xC845F0", Offset = "0xC845F0", VA = "0xC845F0", Slot = "7")]
		protected override Vector3 GetForce()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A2C")]
		[Address(RVA = "0xC847B8", Offset = "0xC847B8", VA = "0xC847B8", Slot = "10")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000A2D")]
		[Address(RVA = "0xC8494C", Offset = "0xC8494C", VA = "0xC8494C")]
		public AttractionParticleAffector()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000146")]
	public static class Noise
	{
		[Token(Token = "0x400080F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float F3;

		[Token(Token = "0x4000810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static float G3;

		[Token(Token = "0x4000811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static byte[] perm;

		[Token(Token = "0x6000A2E")]
		[Address(RVA = "0xC84B2C", Offset = "0xC84B2C", VA = "0xC84B2C")]
		private static float smooth(float t)
		{
			return default(float);
		}

		[Token(Token = "0x6000A2F")]
		[Address(RVA = "0xC84B44", Offset = "0xC84B44", VA = "0xC84B44")]
		private static float fade(float t)
		{
			return default(float);
		}

		[Token(Token = "0x6000A30")]
		[Address(RVA = "0xC84B70", Offset = "0xC84B70", VA = "0xC84B70")]
		private static int floor(float x)
		{
			return default(int);
		}

		[Token(Token = "0x6000A31")]
		[Address(RVA = "0xC84B98", Offset = "0xC84B98", VA = "0xC84B98")]
		private static float lerp(float from, float to, float t)
		{
			return default(float);
		}

		[Token(Token = "0x6000A32")]
		[Address(RVA = "0xC84BA8", Offset = "0xC84BA8", VA = "0xC84BA8")]
		private static float grad(int hash, float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x6000A33")]
		[Address(RVA = "0xC84C10", Offset = "0xC84C10", VA = "0xC84C10")]
		public static float perlin(float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x6000A34")]
		[Address(RVA = "0xC85508", Offset = "0xC85508", VA = "0xC85508")]
		public static float simplex(float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x6000A35")]
		[Address(RVA = "0xC85CA8", Offset = "0xC85CA8", VA = "0xC85CA8")]
		public static float octavePerlin(float x, float y, float z, float frequency, int octaves, float lacunarity, float persistence)
		{
			return default(float);
		}

		[Token(Token = "0x6000A36")]
		[Address(RVA = "0xC85DB4", Offset = "0xC85DB4", VA = "0xC85DB4")]
		public static float octaveSimplex(float x, float y, float z, float frequency, int octaves, float lacunarity, float persistence)
		{
			return default(float);
		}

		[Token(Token = "0x6000A37")]
		[Address(RVA = "0xC85EC0", Offset = "0xC85EC0", VA = "0xC85EC0")]
		public static float perlinUnoptimized(float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x6000A38")]
		[Address(RVA = "0xC86294", Offset = "0xC86294", VA = "0xC86294")]
		public static float simplexUnoptimized(float x, float y, float z)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000147")]
	public abstract class ParticleAffector : MonoBehaviour
	{
		[Token(Token = "0x2000148")]
		protected struct GetForceParameters
		{
			[Token(Token = "0x4000825")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float distanceToAffectorCenterSqr;

			[Token(Token = "0x4000826")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public Vector3 scaledDirectionToAffectorCenter;

			[Token(Token = "0x4000827")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 particlePosition;
		}

		[Token(Token = "0x4000812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Common Controls")]
		public float radius;

		[Token(Token = "0x4000813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float force;

		[Token(Token = "0x4000814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 offset;

		[Token(Token = "0x4000815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float _radius;

		[Token(Token = "0x4000816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float radiusSqr;

		[Token(Token = "0x4000817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float forceDeltaTime;

		[Token(Token = "0x4000818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 transformPosition;

		[Token(Token = "0x4000819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float[] particleSystemExternalForcesMultipliers;

		[Token(Token = "0x400081A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AnimationCurve scaleForceByDistance;

		[Token(Token = "0x400081B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x400081C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<ParticleSystem> _particleSystems;

		[Token(Token = "0x400081D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int particleSystemsCount;

		[Token(Token = "0x400081E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private List<ParticleSystem> particleSystems;

		[Token(Token = "0x400081F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private ParticleSystem.Particle[][] particleSystemParticles;

		[Token(Token = "0x4000820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private ParticleSystem.MainModule[] particleSystemMainModules;

		[Token(Token = "0x4000821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Renderer[] particleSystemRenderers;

		[Token(Token = "0x4000822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected ParticleSystem currentParticleSystem;

		[Token(Token = "0x4000823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected GetForceParameters parameters;

		[Token(Token = "0x4000824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public bool alwaysUpdate;

		[Token(Token = "0x1700007A")]
		public float scaledRadius
		{
			[Token(Token = "0x6000A3A")]
			[Address(RVA = "0xC868E4", Offset = "0xC868E4", VA = "0xC868E4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000A3B")]
		[Address(RVA = "0xC83810", Offset = "0xC83810", VA = "0xC83810", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000A3C")]
		[Address(RVA = "0xC83818", Offset = "0xC83818", VA = "0xC83818", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000A3D")]
		[Address(RVA = "0xC86918", Offset = "0xC86918", VA = "0xC86918", Slot = "6")]
		protected virtual void PerParticleSystemSetup()
		{
		}

		[Token(Token = "0x6000A3E")]
		[Address(RVA = "0xC8691C", Offset = "0xC8691C", VA = "0xC8691C", Slot = "7")]
		protected virtual Vector3 GetForce()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A3F")]
		[Address(RVA = "0xC8386C", Offset = "0xC8386C", VA = "0xC8386C", Slot = "8")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000A40")]
		[Address(RVA = "0xC86960", Offset = "0xC86960", VA = "0xC86960")]
		public void AddParticleSystem(ParticleSystem particleSystem)
		{
		}

		[Token(Token = "0x6000A41")]
		[Address(RVA = "0xC86A08", Offset = "0xC86A08", VA = "0xC86A08")]
		public void RemoveParticleSystem(ParticleSystem particleSystem)
		{
		}

		[Token(Token = "0x6000A42")]
		[Address(RVA = "0xC838AC", Offset = "0xC838AC", VA = "0xC838AC", Slot = "9")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6000A43")]
		[Address(RVA = "0xC86A60", Offset = "0xC86A60", VA = "0xC86A60")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000A44")]
		[Address(RVA = "0xC848C8", Offset = "0xC848C8", VA = "0xC848C8", Slot = "10")]
		protected virtual void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000A45")]
		[Address(RVA = "0xC8495C", Offset = "0xC8495C", VA = "0xC8495C")]
		protected ParticleAffector()
		{
		}
	}
	[Token(Token = "0x2000149")]
	public class TurbulenceParticleAffector : ParticleAffector
	{
		[Token(Token = "0x200014A")]
		public enum NoiseType
		{
			[Token(Token = "0x4000836")]
			PseudoPerlin,
			[Token(Token = "0x4000837")]
			Perlin,
			[Token(Token = "0x4000838")]
			Simplex,
			[Token(Token = "0x4000839")]
			OctavePerlin,
			[Token(Token = "0x400083A")]
			OctaveSimplex
		}

		[Token(Token = "0x4000828")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Header("Affector Controls")]
		public float speed;

		[Token(Token = "0x4000829")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[Range(0f, 8f)]
		public float frequency;

		[Token(Token = "0x400082A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public NoiseType noiseType;

		[Token(Token = "0x400082B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Range(1f, 8f)]
		[Header("Octave Variant-Only Controls")]
		public int octaves;

		[Token(Token = "0x400082C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Range(0f, 4f)]
		public float lacunarity;

		[Token(Token = "0x400082D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[Range(0f, 1f)]
		public float persistence;

		[Token(Token = "0x400082E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float time;

		[Token(Token = "0x400082F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float randomX;

		[Token(Token = "0x4000830")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private float randomY;

		[Token(Token = "0x4000831")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private float randomZ;

		[Token(Token = "0x4000832")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float offsetX;

		[Token(Token = "0x4000833")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float offsetY;

		[Token(Token = "0x4000834")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float offsetZ;

		[Token(Token = "0x6000A46")]
		[Address(RVA = "0xC86A64", Offset = "0xC86A64", VA = "0xC86A64", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000A47")]
		[Address(RVA = "0xC86A68", Offset = "0xC86A68", VA = "0xC86A68", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000A48")]
		[Address(RVA = "0xC86AD0", Offset = "0xC86AD0", VA = "0xC86AD0", Slot = "8")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000A49")]
		[Address(RVA = "0xC86AEC", Offset = "0xC86AEC", VA = "0xC86AEC", Slot = "9")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x6000A4A")]
		[Address(RVA = "0xC86B18", Offset = "0xC86B18", VA = "0xC86B18", Slot = "7")]
		protected override Vector3 GetForce()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A4B")]
		[Address(RVA = "0xC86F08", Offset = "0xC86F08", VA = "0xC86F08", Slot = "10")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000A4C")]
		[Address(RVA = "0xC86F30", Offset = "0xC86F30", VA = "0xC86F30")]
		public TurbulenceParticleAffector()
		{
		}
	}
	[Token(Token = "0x200014B")]
	public class VortexParticleAffector : ParticleAffector
	{
		[Token(Token = "0x400083B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 axisOfRotation;

		[Token(Token = "0x400083C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Header("Affector Controls")]
		public Vector3 axisOfRotationOffset;

		[Token(Token = "0x6000A4D")]
		[Address(RVA = "0xC86F4C", Offset = "0xC86F4C", VA = "0xC86F4C", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000A4E")]
		[Address(RVA = "0xC86F50", Offset = "0xC86F50", VA = "0xC86F50", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000A4F")]
		[Address(RVA = "0xC86F54", Offset = "0xC86F54", VA = "0xC86F54", Slot = "8")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000A50")]
		[Address(RVA = "0xC86F58", Offset = "0xC86F58", VA = "0xC86F58", Slot = "9")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x6000A51")]
		[Address(RVA = "0xC86F5C", Offset = "0xC86F5C", VA = "0xC86F5C")]
		private void UpdateAxisOfRotation()
		{
		}

		[Token(Token = "0x6000A52")]
		[Address(RVA = "0xC86FF8", Offset = "0xC86FF8", VA = "0xC86FF8", Slot = "6")]
		protected override void PerParticleSystemSetup()
		{
		}

		[Token(Token = "0x6000A53")]
		[Address(RVA = "0xC86FFC", Offset = "0xC86FFC", VA = "0xC86FFC", Slot = "7")]
		protected override Vector3 GetForce()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A54")]
		[Address(RVA = "0xC87104", Offset = "0xC87104", VA = "0xC87104", Slot = "10")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000A55")]
		[Address(RVA = "0xC872CC", Offset = "0xC872CC", VA = "0xC872CC")]
		public VortexParticleAffector()
		{
		}
	}
	[Token(Token = "0x200014C")]
	[RequireComponent(typeof(ParticleSystem))]
	public class ParticleFlocking : MonoBehaviour
	{
		[Token(Token = "0x200014D")]
		public struct Voxel
		{
			[Token(Token = "0x400084E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Bounds bounds;

			[Token(Token = "0x400084F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int[] particles;

			[Token(Token = "0x4000850")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int particleCount;
		}

		[Token(Token = "0x400083D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("N^2 Mode Settings")]
		public float maxDistance;

		[Token(Token = "0x400083E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Header("Forces")]
		public float cohesion;

		[Token(Token = "0x400083F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float separation;

		[Token(Token = "0x4000840")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Header("Voxel Mode Settings")]
		public bool useVoxels;

		[Token(Token = "0x4000841")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25")]
		public bool voxelLocalCenterFromBounds;

		[Token(Token = "0x4000842")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float voxelVolume;

		[Token(Token = "0x4000843")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int voxelsPerAxis;

		[Token(Token = "0x4000844")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int previousVoxelsPerAxisValue;

		[Token(Token = "0x4000845")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Voxel[] voxels;

		[Token(Token = "0x4000846")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4000847")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private ParticleSystem.Particle[] particles;

		[Token(Token = "0x4000848")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3[] particlePositions;

		[Token(Token = "0x4000849")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ParticleSystem.MainModule particleSystemMainModule;

		[Token(Token = "0x400084A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Range(0f, 1f)]
		[Header("General Performance Settings")]
		public float delay;

		[Token(Token = "0x400084B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float timer;

		[Token(Token = "0x400084C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool alwaysUpdate;

		[Token(Token = "0x400084D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool visible;

		[Token(Token = "0x6000A56")]
		[Address(RVA = "0xC87328", Offset = "0xC87328", VA = "0xC87328")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A57")]
		[Address(RVA = "0xC8738C", Offset = "0xC8738C", VA = "0xC8738C")]
		private void OnBecameVisible()
		{
		}

		[Token(Token = "0x6000A58")]
		[Address(RVA = "0xC87398", Offset = "0xC87398", VA = "0xC87398")]
		private void OnBecameInvisible()
		{
		}

		[Token(Token = "0x6000A59")]
		[Address(RVA = "0xC873A0", Offset = "0xC873A0", VA = "0xC873A0")]
		private void buildVoxelGrid()
		{
		}

		[Token(Token = "0x6000A5A")]
		[Address(RVA = "0xC875C4", Offset = "0xC875C4", VA = "0xC875C4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000A5B")]
		[Address(RVA = "0xC87F54", Offset = "0xC87F54", VA = "0xC87F54")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000A5C")]
		[Address(RVA = "0xC88134", Offset = "0xC88134", VA = "0xC88134")]
		public ParticleFlocking()
		{
		}
	}
	[Token(Token = "0x200014E")]
	[AddComponentMenu("Effects/Particle Force Fields/Attraction Particle Force Field")]
	public class AttractionParticleForceField : ParticleForceField
	{
		[Token(Token = "0x4000851")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Header("ForceField Controls")]
		[Tooltip("Tether force based on linear inverse particle distance to force field center.")]
		public float arrivalRadius;

		[Token(Token = "0x4000852")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Tooltip("Dead zone from force field center in which no additional force is applied.")]
		public float arrivedRadius;

		[Token(Token = "0x4000853")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float arrivalRadiusSqr;

		[Token(Token = "0x4000854")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private float arrivedRadiusSqr;

		[Token(Token = "0x6000A5D")]
		[Address(RVA = "0xC88160", Offset = "0xC88160", VA = "0xC88160", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000A5E")]
		[Address(RVA = "0xC88168", Offset = "0xC88168", VA = "0xC88168", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000A5F")]
		[Address(RVA = "0xC88170", Offset = "0xC88170", VA = "0xC88170", Slot = "8")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000A60")]
		[Address(RVA = "0xC88178", Offset = "0xC88178", VA = "0xC88178", Slot = "9")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x6000A61")]
		[Address(RVA = "0xC881B8", Offset = "0xC881B8", VA = "0xC881B8", Slot = "7")]
		protected override Vector3 GetForce()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A62")]
		[Address(RVA = "0xC88380", Offset = "0xC88380", VA = "0xC88380", Slot = "10")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000A63")]
		[Address(RVA = "0xC88494", Offset = "0xC88494", VA = "0xC88494")]
		public AttractionParticleForceField()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200014F")]
	public static class Noise2
	{
		[Token(Token = "0x4000855")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static float F3;

		[Token(Token = "0x4000856")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		private static float G3;

		[Token(Token = "0x4000857")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static byte[] perm;

		[Token(Token = "0x6000A64")]
		[Address(RVA = "0xC884A8", Offset = "0xC884A8", VA = "0xC884A8")]
		private static float smooth(float t)
		{
			return default(float);
		}

		[Token(Token = "0x6000A65")]
		[Address(RVA = "0xC884C0", Offset = "0xC884C0", VA = "0xC884C0")]
		private static float fade(float t)
		{
			return default(float);
		}

		[Token(Token = "0x6000A66")]
		[Address(RVA = "0xC884EC", Offset = "0xC884EC", VA = "0xC884EC")]
		private static int floor(float x)
		{
			return default(int);
		}

		[Token(Token = "0x6000A67")]
		[Address(RVA = "0xC88514", Offset = "0xC88514", VA = "0xC88514")]
		private static float lerp(float from, float to, float t)
		{
			return default(float);
		}

		[Token(Token = "0x6000A68")]
		[Address(RVA = "0xC88524", Offset = "0xC88524", VA = "0xC88524")]
		private static float grad(int hash, float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x6000A69")]
		[Address(RVA = "0xC8858C", Offset = "0xC8858C", VA = "0xC8858C")]
		public static float perlin(float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x6000A6A")]
		[Address(RVA = "0xC88E84", Offset = "0xC88E84", VA = "0xC88E84")]
		public static float simplex(float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x6000A6B")]
		[Address(RVA = "0xC89624", Offset = "0xC89624", VA = "0xC89624")]
		public static float octavePerlin(float x, float y, float z, float frequency, int octaves, float lacunarity, float persistence)
		{
			return default(float);
		}

		[Token(Token = "0x6000A6C")]
		[Address(RVA = "0xC89730", Offset = "0xC89730", VA = "0xC89730")]
		public static float octaveSimplex(float x, float y, float z, float frequency, int octaves, float lacunarity, float persistence)
		{
			return default(float);
		}

		[Token(Token = "0x6000A6D")]
		[Address(RVA = "0xC8983C", Offset = "0xC8983C", VA = "0xC8983C")]
		public static float perlinUnoptimized(float x, float y, float z)
		{
			return default(float);
		}

		[Token(Token = "0x6000A6E")]
		[Address(RVA = "0xC89C10", Offset = "0xC89C10", VA = "0xC89C10")]
		public static float simplexUnoptimized(float x, float y, float z)
		{
			return default(float);
		}
	}
	[Token(Token = "0x2000150")]
	public abstract class ParticleForceField : MonoBehaviour
	{
		[Token(Token = "0x2000151")]
		protected struct GetForceParameters
		{
			[Token(Token = "0x400086A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float distanceToForceFieldCenterSqr;

			[Token(Token = "0x400086B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public Vector3 scaledDirectionToForceFieldCenter;

			[Token(Token = "0x400086C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 particlePosition;
		}

		[Token(Token = "0x4000858")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Common Controls")]
		[Tooltip("Force field spherical range.")]
		public float radius;

		[Token(Token = "0x4000859")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Maximum baseline force.")]
		public float force;

		[Token(Token = "0x400085A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Internal force field position offset.")]
		public Vector3 center;

		[Token(Token = "0x400085B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float _radius;

		[Token(Token = "0x400085C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float radiusSqr;

		[Token(Token = "0x400085D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 transformPosition;

		[Token(Token = "0x400085E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float[] particleSystemExternalForcesMultipliers;

		[Token(Token = "0x400085F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Force scale as determined by distance to individual particles.")]
		public AnimationCurve forceOverDistance;

		[Token(Token = "0x4000860")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4000861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("If nothing no particle systems are assigned, this force field will operate globally on ALL particle systems in the scene (NOT recommended).\n\nIf attached to a particle system, the force field will operate only on that system.\n\nIf specific particle systems are assigned, then the force field will operate on those systems only, even if attached to a particle system.")]
		public List<ParticleSystem> _particleSystems;

		[Token(Token = "0x4000862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int particleSystemsCount;

		[Token(Token = "0x4000863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<ParticleSystem> particleSystems;

		[Token(Token = "0x4000864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private ParticleSystem.Particle[][] particleSystemParticles;

		[Token(Token = "0x4000865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private ParticleSystem.MainModule[] particleSystemMainModules;

		[Token(Token = "0x4000866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Renderer[] particleSystemRenderers;

		[Token(Token = "0x4000867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected ParticleSystem currentParticleSystem;

		[Token(Token = "0x4000868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected GetForceParameters parameters;

		[Token(Token = "0x4000869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[Tooltip("If TRUE, update even if target particle system(s) are invisible/offscreen.\n\nIf FALSE, update only if particles of the target system(s) are visible/onscreen.")]
		public bool alwaysUpdate;

		[Token(Token = "0x1700007B")]
		public float scaledRadius
		{
			[Token(Token = "0x6000A70")]
			[Address(RVA = "0xC8A260", Offset = "0xC8A260", VA = "0xC8A260")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000A71")]
		[Address(RVA = "0xC8A294", Offset = "0xC8A294", VA = "0xC8A294", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000A72")]
		[Address(RVA = "0xC8A298", Offset = "0xC8A298", VA = "0xC8A298", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000A73")]
		[Address(RVA = "0xC8A2E8", Offset = "0xC8A2E8", VA = "0xC8A2E8", Slot = "6")]
		protected virtual void PerParticleSystemSetup()
		{
		}

		[Token(Token = "0x6000A74")]
		[Address(RVA = "0xC8A2EC", Offset = "0xC8A2EC", VA = "0xC8A2EC", Slot = "7")]
		protected virtual Vector3 GetForce()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A75")]
		[Address(RVA = "0xC8A330", Offset = "0xC8A330", VA = "0xC8A330", Slot = "8")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000A76")]
		[Address(RVA = "0xC8A334", Offset = "0xC8A334", VA = "0xC8A334")]
		public void AddParticleSystem(ParticleSystem particleSystem)
		{
		}

		[Token(Token = "0x6000A77")]
		[Address(RVA = "0xC8A3DC", Offset = "0xC8A3DC", VA = "0xC8A3DC")]
		public void RemoveParticleSystem(ParticleSystem particleSystem)
		{
		}

		[Token(Token = "0x6000A78")]
		[Address(RVA = "0xC8A434", Offset = "0xC8A434", VA = "0xC8A434", Slot = "9")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6000A79")]
		[Address(RVA = "0xC8B1A8", Offset = "0xC8B1A8", VA = "0xC8B1A8")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6000A7A")]
		[Address(RVA = "0xC8B1AC", Offset = "0xC8B1AC", VA = "0xC8B1AC", Slot = "10")]
		protected virtual void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000A7B")]
		[Address(RVA = "0xC8B230", Offset = "0xC8B230", VA = "0xC8B230")]
		protected ParticleForceField()
		{
		}
	}
	[Token(Token = "0x2000152")]
	[AddComponentMenu("Effects/Particle Force Fields/Turbulence Particle Force Field")]
	public class TurbulenceParticleForceField : ParticleForceField
	{
		[Token(Token = "0x2000153")]
		public enum NoiseType
		{
			[Token(Token = "0x400087B")]
			PseudoPerlin,
			[Token(Token = "0x400087C")]
			Perlin,
			[Token(Token = "0x400087D")]
			Simplex,
			[Token(Token = "0x400087E")]
			OctavePerlin,
			[Token(Token = "0x400087F")]
			OctaveSimplex
		}

		[Token(Token = "0x400086D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Header("ForceField Controls")]
		[Tooltip("Noise texture mutation speed.")]
		public float scrollSpeed;

		[Token(Token = "0x400086E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Tooltip("Noise texture detail amplifier.")]
		[Range(0f, 8f)]
		public float frequency;

		[Token(Token = "0x400086F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public NoiseType noiseType;

		[Token(Token = "0x4000870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[Range(1f, 8f)]
		[Tooltip("Overlapping noise iterations. 1 = no additional iterations.")]
		[Header("Octave Variant-Only Controls")]
		public int octaves;

		[Token(Token = "0x4000871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("Frequency scale per-octave. Can be used to change the overlap every iteration.")]
		[Range(0f, 4f)]
		public float octaveMultiplier;

		[Token(Token = "0x4000872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Range(0f, 1f)]
		[Tooltip("Amplitude scale per-octave. Can be used to change the overlap every iteration.")]
		public float octaveScale;

		[Token(Token = "0x4000873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float time;

		[Token(Token = "0x4000874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		private float randomX;

		[Token(Token = "0x4000875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float randomY;

		[Token(Token = "0x4000876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private float randomZ;

		[Token(Token = "0x4000877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private float offsetX;

		[Token(Token = "0x4000878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private float offsetY;

		[Token(Token = "0x4000879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float offsetZ;

		[Token(Token = "0x6000A7C")]
		[Address(RVA = "0xC8B400", Offset = "0xC8B400", VA = "0xC8B400", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000A7D")]
		[Address(RVA = "0xC8B404", Offset = "0xC8B404", VA = "0xC8B404", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000A7E")]
		[Address(RVA = "0xC8B46C", Offset = "0xC8B46C", VA = "0xC8B46C", Slot = "8")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000A7F")]
		[Address(RVA = "0xC8B488", Offset = "0xC8B488", VA = "0xC8B488", Slot = "9")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x6000A80")]
		[Address(RVA = "0xC8B4B4", Offset = "0xC8B4B4", VA = "0xC8B4B4", Slot = "7")]
		protected override Vector3 GetForce()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A81")]
		[Address(RVA = "0xC8B8D4", Offset = "0xC8B8D4", VA = "0xC8B8D4", Slot = "10")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000A82")]
		[Address(RVA = "0xC8B8FC", Offset = "0xC8B8FC", VA = "0xC8B8FC")]
		public TurbulenceParticleForceField()
		{
		}
	}
	[Token(Token = "0x2000154")]
	[AddComponentMenu("Effects/Particle Force Fields/Vortex Particle Force Field")]
	public class VortexParticleForceField : ParticleForceField
	{
		[Token(Token = "0x4000880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 axisOfRotation;

		[Token(Token = "0x4000881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[Tooltip("Internal offset for the axis of rotation.\n\nUseful if the force field and particle system are on the same game object, and you need a seperate rotation for the system, and the affector, but don't want to make the two different game objects.")]
		[Header("ForceField Controls")]
		public Vector3 axisOfRotationOffset;

		[Token(Token = "0x6000A83")]
		[Address(RVA = "0xC8B918", Offset = "0xC8B918", VA = "0xC8B918", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000A84")]
		[Address(RVA = "0xC8B91C", Offset = "0xC8B91C", VA = "0xC8B91C", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000A85")]
		[Address(RVA = "0xC8B920", Offset = "0xC8B920", VA = "0xC8B920", Slot = "8")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000A86")]
		[Address(RVA = "0xC8B924", Offset = "0xC8B924", VA = "0xC8B924", Slot = "9")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x6000A87")]
		[Address(RVA = "0xC8B928", Offset = "0xC8B928", VA = "0xC8B928")]
		private void UpdateAxisOfRotation()
		{
		}

		[Token(Token = "0x6000A88")]
		[Address(RVA = "0xC8B9C4", Offset = "0xC8B9C4", VA = "0xC8B9C4", Slot = "6")]
		protected override void PerParticleSystemSetup()
		{
		}

		[Token(Token = "0x6000A89")]
		[Address(RVA = "0xC8B9C8", Offset = "0xC8B9C8", VA = "0xC8B9C8", Slot = "7")]
		protected override Vector3 GetForce()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000A8A")]
		[Address(RVA = "0xC8BAD0", Offset = "0xC8BAD0", VA = "0xC8BAD0", Slot = "10")]
		protected override void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000A8B")]
		[Address(RVA = "0xC8BC44", Offset = "0xC8BC44", VA = "0xC8BC44")]
		public VortexParticleForceField()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000155")]
	[RequireComponent(typeof(ParticleSystem))]
	public class ParticleLights : MonoBehaviour
	{
		[Token(Token = "0x4000882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ParticleSystem ps;

		[Token(Token = "0x4000883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Light> lights;

		[Token(Token = "0x4000884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float scale;

		[Token(Token = "0x4000885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0f, 8f)]
		public float intensity;

		[Token(Token = "0x4000886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color colour;

		[Token(Token = "0x4000887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(0f, 1f)]
		public float colourFromParticle;

		[Token(Token = "0x4000888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public LightShadows shadows;

		[Token(Token = "0x4000889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GameObject template;

		[Token(Token = "0x6000A8C")]
		[Address(RVA = "0xC8BCA0", Offset = "0xC8BCA0", VA = "0xC8BCA0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A8D")]
		[Address(RVA = "0xC8BCA4", Offset = "0xC8BCA4", VA = "0xC8BCA4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A8E")]
		[Address(RVA = "0xC8BD84", Offset = "0xC8BD84", VA = "0xC8BD84")]
		private void Update()
		{
		}

		[Token(Token = "0x6000A8F")]
		[Address(RVA = "0xC8BD88", Offset = "0xC8BD88", VA = "0xC8BD88")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000A90")]
		[Address(RVA = "0xC8C26C", Offset = "0xC8C26C", VA = "0xC8C26C")]
		public ParticleLights()
		{
		}
	}
	[Token(Token = "0x2000156")]
	[RequireComponent(typeof(ParticleSystem))]
	[AddComponentMenu("Effects/Particle Plexus")]
	public class ParticlePlexus : MonoBehaviour
	{
		[Token(Token = "0x400088A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxDistance;

		[Token(Token = "0x400088B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int maxConnections;

		[Token(Token = "0x400088C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int maxLineRenderers;

		[Token(Token = "0x400088D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Space]
		[Range(0f, 1f)]
		public float widthFromParticle;

		[Token(Token = "0x400088E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Space]
		[Range(0f, 1f)]
		public float colourFromParticle;

		[Token(Token = "0x400088F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0f, 1f)]
		public float alphaFromParticle;

		[Token(Token = "0x4000890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Space]
		public AnimationCurve alphaOverNormalizedDistance;

		[Token(Token = "0x4000891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ParticleSystem particleSystem;

		[Token(Token = "0x4000892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private ParticleSystem.Particle[] particles;

		[Token(Token = "0x4000893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3[] particlePositions;

		[Token(Token = "0x4000894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Color[] particleColours;

		[Token(Token = "0x4000895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float[] particleSizes;

		[Token(Token = "0x4000896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private ParticleSystem.MainModule particleSystemMainModule;

		[Token(Token = "0x4000897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Space]
		public LineRenderer lineRendererTemplate;

		[Token(Token = "0x4000898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private List<LineRenderer> lineRenderers;

		[Token(Token = "0x4000899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform _transform;

		[Token(Token = "0x400089A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Header("Triangle Mesh Settings")]
		public MeshFilter trianglesMeshFilter;

		[Token(Token = "0x400089B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Mesh trianglesMesh;

		[Token(Token = "0x400089C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private List<int[]> allConnectedParticles;

		[Token(Token = "0x400089D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Range(0f, 1f)]
		[Space]
		public float maxDistanceTriangleBias;

		[Token(Token = "0x400089E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Space]
		public bool trianglesDistanceCheck;

		[Token(Token = "0x400089F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Range(0f, 1f)]
		[Space]
		public float triangleColourFromParticle;

		[Token(Token = "0x40008A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[Range(0f, 1f)]
		public float triangleAlphaFromParticle;

		[Token(Token = "0x40008A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Range(0f, 1f)]
		[Header("General Performance Settings")]
		public float delay;

		[Token(Token = "0x40008A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float timer;

		[Token(Token = "0x40008A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool alwaysUpdate;

		[Token(Token = "0x40008A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		private bool visible;

		[Token(Token = "0x6000A91")]
		[Address(RVA = "0xC8C304", Offset = "0xC8C304", VA = "0xC8C304")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A92")]
		[Address(RVA = "0xC8C3FC", Offset = "0xC8C3FC", VA = "0xC8C3FC")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000A93")]
		[Address(RVA = "0xC8C48C", Offset = "0xC8C48C", VA = "0xC8C48C")]
		private void OnBecameVisible()
		{
		}

		[Token(Token = "0x6000A94")]
		[Address(RVA = "0xC8C498", Offset = "0xC8C498", VA = "0xC8C498")]
		private void OnBecameInvisible()
		{
		}

		[Token(Token = "0x6000A95")]
		[Address(RVA = "0xC8C4A0", Offset = "0xC8C4A0", VA = "0xC8C4A0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000A96")]
		[Address(RVA = "0xC8DEE0", Offset = "0xC8DEE0", VA = "0xC8DEE0")]
		public ParticlePlexus()
		{
		}
	}
	[Token(Token = "0x2000157")]
	public static class CreateLUT
	{
		[Token(Token = "0x6000A97")]
		[Address(RVA = "0xC8DFF0", Offset = "0xC8DFF0", VA = "0xC8DFF0")]
		public static void fromGradient(int steps, Gradient gradient, ref Texture2D texture)
		{
		}

		[Token(Token = "0x6000A98")]
		[Address(RVA = "0xC8E180", Offset = "0xC8E180", VA = "0xC8E180")]
		public static void fromAnimationCurve(int steps, AnimationCurve curve, ref Texture2D texture)
		{
		}
	}
}
namespace MirzaBeig.ParticleSystems
{
	[Token(Token = "0x2000158")]
	[RequireComponent(typeof(Light))]
	public class AnimatedLight : MonoBehaviour
	{
		[Token(Token = "0x40008A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Light light;

		[Token(Token = "0x40008A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float duration;

		[Token(Token = "0x40008A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool evaluating;

		[Token(Token = "0x40008A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Gradient colourOverLifetime;

		[Token(Token = "0x40008AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimationCurve intensityOverLifetime;

		[Token(Token = "0x40008AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool loop;

		[Token(Token = "0x40008AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		public bool autoDestruct;

		[Token(Token = "0x40008AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Color startColour;

		[Token(Token = "0x40008AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float startIntensity;

		[Token(Token = "0x1700007C")]
		public float time
		{
			[Token(Token = "0x6000A99")]
			[Address(RVA = "0xC8E340", Offset = "0xC8E340", VA = "0xC8E340")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000A9A")]
			[Address(RVA = "0xC8E348", Offset = "0xC8E348", VA = "0xC8E348")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000A9B")]
		[Address(RVA = "0xC8E350", Offset = "0xC8E350", VA = "0xC8E350")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000A9C")]
		[Address(RVA = "0xC8E3A0", Offset = "0xC8E3A0", VA = "0xC8E3A0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000A9D")]
		[Address(RVA = "0xC8E464", Offset = "0xC8E464", VA = "0xC8E464")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000A9E")]
		[Address(RVA = "0xC8E468", Offset = "0xC8E468", VA = "0xC8E468")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000A9F")]
		[Address(RVA = "0xC8E538", Offset = "0xC8E538", VA = "0xC8E538")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AA0")]
		[Address(RVA = "0xC8E6B4", Offset = "0xC8E6B4", VA = "0xC8E6B4")]
		public AnimatedLight()
		{
		}
	}
	[Token(Token = "0x2000159")]
	public class Billboard : MonoBehaviour
	{
		[Token(Token = "0x6000AA1")]
		[Address(RVA = "0xC8E854", Offset = "0xC8E854", VA = "0xC8E854")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000AA2")]
		[Address(RVA = "0xC8E89C", Offset = "0xC8E89C", VA = "0xC8E89C")]
		public Billboard()
		{
		}
	}
	[Token(Token = "0x200015A")]
	public class DestroyAfterTime : MonoBehaviour
	{
		[Token(Token = "0x40008AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float time;

		[Token(Token = "0x6000AA3")]
		[Address(RVA = "0xC8E8A4", Offset = "0xC8E8A4", VA = "0xC8E8A4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AA4")]
		[Address(RVA = "0xC8E920", Offset = "0xC8E920", VA = "0xC8E920")]
		public DestroyAfterTime()
		{
		}
	}
	[Token(Token = "0x200015B")]
	public class DestroyOnParticlesDead : ParticleSystems
	{
		[Token(Token = "0x6000AA5")]
		[Address(RVA = "0xC8E930", Offset = "0xC8E930", VA = "0xC8E930", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000AA6")]
		[Address(RVA = "0xC8E984", Offset = "0xC8E984", VA = "0xC8E984", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000AA7")]
		[Address(RVA = "0xC8E98C", Offset = "0xC8E98C", VA = "0xC8E98C")]
		private void onParticleSystemsDead()
		{
		}

		[Token(Token = "0x6000AA8")]
		[Address(RVA = "0xC8E9F8", Offset = "0xC8E9F8", VA = "0xC8E9F8", Slot = "6")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000AA9")]
		[Address(RVA = "0xC8EA00", Offset = "0xC8EA00", VA = "0xC8EA00", Slot = "7")]
		protected override void LateUpdate()
		{
		}

		[Token(Token = "0x6000AAA")]
		[Address(RVA = "0xC8EA08", Offset = "0xC8EA08", VA = "0xC8EA08")]
		public DestroyOnParticlesDead()
		{
		}
	}
	[Token(Token = "0x200015C")]
	public class DestroyOnTrailsDestroyed : TrailRenderers
	{
		[Token(Token = "0x6000AAB")]
		[Address(RVA = "0xC8EA18", Offset = "0xC8EA18", VA = "0xC8EA18", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000AAC")]
		[Address(RVA = "0xC8EA20", Offset = "0xC8EA20", VA = "0xC8EA20", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000AAD")]
		[Address(RVA = "0xC8EA74", Offset = "0xC8EA74", VA = "0xC8EA74", Slot = "6")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000AAE")]
		[Address(RVA = "0xC8EB5C", Offset = "0xC8EB5C", VA = "0xC8EB5C")]
		public DestroyOnTrailsDestroyed()
		{
		}
	}
	[Token(Token = "0x200015D")]
	public class ParticleSystems : MonoBehaviour
	{
		[Token(Token = "0x1700007D")]
		public ParticleSystem[] particleSystems
		{
			[Token(Token = "0x6000AAF")]
			[Address(RVA = "0xC8EB6C", Offset = "0xC8EB6C", VA = "0xC8EB6C")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000AB0")]
			[Address(RVA = "0xC8EB74", Offset = "0xC8EB74", VA = "0xC8EB74")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000AB1")]
		[Address(RVA = "0xC8E934", Offset = "0xC8E934", VA = "0xC8E934", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000AB2")]
		[Address(RVA = "0xC8E988", Offset = "0xC8E988", VA = "0xC8E988", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000AB3")]
		[Address(RVA = "0xC8E9FC", Offset = "0xC8E9FC", VA = "0xC8E9FC", Slot = "6")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000AB4")]
		[Address(RVA = "0xC8EA04", Offset = "0xC8EA04", VA = "0xC8EA04", Slot = "7")]
		protected virtual void LateUpdate()
		{
		}

		[Token(Token = "0x6000AB5")]
		[Address(RVA = "0xC8EB7C", Offset = "0xC8EB7C", VA = "0xC8EB7C")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000AB6")]
		[Address(RVA = "0xC8EBE0", Offset = "0xC8EBE0", VA = "0xC8EBE0")]
		public void Play()
		{
		}

		[Token(Token = "0x6000AB7")]
		[Address(RVA = "0xC8EC44", Offset = "0xC8EC44", VA = "0xC8EC44")]
		public void Pause()
		{
		}

		[Token(Token = "0x6000AB8")]
		[Address(RVA = "0xC8ECA8", Offset = "0xC8ECA8", VA = "0xC8ECA8")]
		public void Stop()
		{
		}

		[Token(Token = "0x6000AB9")]
		[Address(RVA = "0xC8ED0C", Offset = "0xC8ED0C", VA = "0xC8ED0C")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000ABA")]
		[Address(RVA = "0xC8ED70", Offset = "0xC8ED70", VA = "0xC8ED70")]
		public void SetLoop(bool loop)
		{
		}

		[Token(Token = "0x6000ABB")]
		[Address(RVA = "0xC8EDF4", Offset = "0xC8EDF4", VA = "0xC8EDF4")]
		public void SetPlaybackSpeed(float speed)
		{
		}

		[Token(Token = "0x6000ABC")]
		[Address(RVA = "0xC8EE80", Offset = "0xC8EE80", VA = "0xC8EE80")]
		public void Simulate(float time, bool reset = false)
		{
		}

		[Token(Token = "0x6000ABD")]
		[Address(RVA = "0xC8EEFC", Offset = "0xC8EEFC", VA = "0xC8EEFC")]
		public bool IsAlive()
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABE")]
		[Address(RVA = "0xC8EFD4", Offset = "0xC8EFD4", VA = "0xC8EFD4")]
		public bool IsPlaying(bool checkAll = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ABF")]
		[Address(RVA = "0xC8F01C", Offset = "0xC8F01C", VA = "0xC8F01C")]
		public int GetParticleCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000AC0")]
		[Address(RVA = "0xC8EA10", Offset = "0xC8EA10", VA = "0xC8EA10")]
		public ParticleSystems()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200015E")]
	public class PerlinNoise
	{
		[Token(Token = "0x40008B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Vector2 offset;

		[Token(Token = "0x40008B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float amplitude;

		[Token(Token = "0x40008B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float frequency;

		[Token(Token = "0x40008B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool unscaledTime;

		[Token(Token = "0x6000AC1")]
		[Address(RVA = "0xC8F0F8", Offset = "0xC8F0F8", VA = "0xC8F0F8")]
		public void init()
		{
		}

		[Token(Token = "0x6000AC2")]
		[Address(RVA = "0xC8F148", Offset = "0xC8F148", VA = "0xC8F148")]
		public float GetValue(float time)
		{
			return default(float);
		}

		[Token(Token = "0x6000AC3")]
		[Address(RVA = "0xC8F184", Offset = "0xC8F184", VA = "0xC8F184")]
		public PerlinNoise()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200015F")]
	public class PerlinNoiseXYZ
	{
		[Token(Token = "0x40008B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public PerlinNoise x;

		[Token(Token = "0x40008B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PerlinNoise y;

		[Token(Token = "0x40008B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PerlinNoise z;

		[Token(Token = "0x40008B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool unscaledTime;

		[Token(Token = "0x40008B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float amplitudeScale;

		[Token(Token = "0x40008BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float frequencyScale;

		[Token(Token = "0x6000AC4")]
		[Address(RVA = "0xC8F194", Offset = "0xC8F194", VA = "0xC8F194")]
		public void init()
		{
		}

		[Token(Token = "0x6000AC5")]
		[Address(RVA = "0xC8F278", Offset = "0xC8F278", VA = "0xC8F278")]
		public Vector3 GetXYZ(float time)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AC6")]
		[Address(RVA = "0xC8F354", Offset = "0xC8F354", VA = "0xC8F354")]
		public PerlinNoiseXYZ()
		{
		}
	}
	[Token(Token = "0x2000160")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Renderer))]
	public class RendererSortingOrder : MonoBehaviour
	{
		[Token(Token = "0x40008BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int sortingOrder;

		[Token(Token = "0x6000AC7")]
		[Address(RVA = "0xC8F364", Offset = "0xC8F364", VA = "0xC8F364")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000AC8")]
		[Address(RVA = "0xC8F368", Offset = "0xC8F368", VA = "0xC8F368")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AC9")]
		[Address(RVA = "0xC8F3C4", Offset = "0xC8F3C4", VA = "0xC8F3C4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000ACA")]
		[Address(RVA = "0xC8F3C8", Offset = "0xC8F3C8", VA = "0xC8F3C8")]
		public RendererSortingOrder()
		{
		}
	}
	[Token(Token = "0x2000161")]
	public class Rotator : MonoBehaviour
	{
		[Token(Token = "0x40008BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 localRotationSpeed;

		[Token(Token = "0x40008BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 worldRotationSpeed;

		[Token(Token = "0x40008BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool executeInEditMode;

		[Token(Token = "0x40008BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool unscaledTime;

		[Token(Token = "0x6000ACB")]
		[Address(RVA = "0xC8F3D0", Offset = "0xC8F3D0", VA = "0xC8F3D0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000ACC")]
		[Address(RVA = "0xC8F3D4", Offset = "0xC8F3D4", VA = "0xC8F3D4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000ACD")]
		[Address(RVA = "0xC8F3D8", Offset = "0xC8F3D8", VA = "0xC8F3D8")]
		private void OnRenderObject()
		{
		}

		[Token(Token = "0x6000ACE")]
		[Address(RVA = "0xC8F598", Offset = "0xC8F598", VA = "0xC8F598")]
		private void Update()
		{
		}

		[Token(Token = "0x6000ACF")]
		[Address(RVA = "0xC8F408", Offset = "0xC8F408", VA = "0xC8F408")]
		private void rotate()
		{
		}

		[Token(Token = "0x6000AD0")]
		[Address(RVA = "0xC8F5C0", Offset = "0xC8F5C0", VA = "0xC8F5C0")]
		public Rotator()
		{
		}
	}
	[Token(Token = "0x2000162")]
	public class TrailRenderers : MonoBehaviour
	{
		[Token(Token = "0x40008C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public TrailRenderer[] trailRenderers;

		[Token(Token = "0x6000AD1")]
		[Address(RVA = "0xC8EA1C", Offset = "0xC8EA1C", VA = "0xC8EA1C", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000AD2")]
		[Address(RVA = "0xC8EA24", Offset = "0xC8EA24", VA = "0xC8EA24", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000AD3")]
		[Address(RVA = "0xC8EB58", Offset = "0xC8EB58", VA = "0xC8EB58", Slot = "6")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000AD4")]
		[Address(RVA = "0xC8F5C8", Offset = "0xC8F5C8", VA = "0xC8F5C8")]
		public void setAutoDestruct(bool value)
		{
		}

		[Token(Token = "0x6000AD5")]
		[Address(RVA = "0xC8EB64", Offset = "0xC8EB64", VA = "0xC8EB64")]
		public TrailRenderers()
		{
		}
	}
	[Token(Token = "0x2000163")]
	public class TransformNoise : MonoBehaviour
	{
		[Token(Token = "0x40008C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PerlinNoiseXYZ positionNoise;

		[Token(Token = "0x40008C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public PerlinNoiseXYZ rotationNoise;

		[Token(Token = "0x40008C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool unscaledTime;

		[Token(Token = "0x40008C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float time;

		[Token(Token = "0x6000AD6")]
		[Address(RVA = "0xC8F630", Offset = "0xC8F630", VA = "0xC8F630")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AD7")]
		[Address(RVA = "0xC8F658", Offset = "0xC8F658", VA = "0xC8F658")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AD8")]
		[Address(RVA = "0xC8F6F8", Offset = "0xC8F6F8", VA = "0xC8F6F8")]
		public TransformNoise()
		{
		}
	}
}
namespace MirzaBeig.ParticleSystems.Demos
{
	[Serializable]
	[Token(Token = "0x2000164")]
	public class DemoManager_XPTitles : MonoBehaviour
	{
		[Token(Token = "0x40008C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private LoopingParticleSystemsManager list;

		[Token(Token = "0x40008C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text particleCountText;

		[Token(Token = "0x40008C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text currentParticleSystemText;

		[Token(Token = "0x40008C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rotator cameraRotator;

		[Token(Token = "0x6000AD9")]
		[Address(RVA = "0xC8F700", Offset = "0xC8F700", VA = "0xC8F700")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000ADA")]
		[Address(RVA = "0xC8F950", Offset = "0xC8F950", VA = "0xC8F950")]
		private void Start()
		{
		}

		[Token(Token = "0x6000ADB")]
		[Address(RVA = "0xC8FA50", Offset = "0xC8FA50", VA = "0xC8FA50")]
		public void ToggleRotation()
		{
		}

		[Token(Token = "0x6000ADC")]
		[Address(RVA = "0xC8FA84", Offset = "0xC8FA84", VA = "0xC8FA84")]
		public void ResetRotation()
		{
		}

		[Token(Token = "0x6000ADD")]
		[Address(RVA = "0xC8FAF4", Offset = "0xC8FAF4", VA = "0xC8FAF4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000ADE")]
		[Address(RVA = "0xC8FBD4", Offset = "0xC8FBD4", VA = "0xC8FBD4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000ADF")]
		[Address(RVA = "0xC8FB7C", Offset = "0xC8FB7C", VA = "0xC8FB7C")]
		public void Next()
		{
		}

		[Token(Token = "0x6000AE0")]
		[Address(RVA = "0xC8FBA8", Offset = "0xC8FBA8", VA = "0xC8FBA8")]
		public void previous()
		{
		}

		[Token(Token = "0x6000AE1")]
		[Address(RVA = "0xC8F9B0", Offset = "0xC8F9B0", VA = "0xC8F9B0")]
		private void updateCurrentParticleSystemNameText()
		{
		}

		[Token(Token = "0x6000AE2")]
		[Address(RVA = "0xC90038", Offset = "0xC90038", VA = "0xC90038")]
		public DemoManager_XPTitles()
		{
		}
	}
	[Token(Token = "0x2000165")]
	public enum CameraShakeTarget
	{
		[Token(Token = "0x40008CA")]
		Position,
		[Token(Token = "0x40008CB")]
		Rotation
	}
	[Token(Token = "0x2000166")]
	public enum CameraShakeAmplitudeCurve
	{
		[Token(Token = "0x40008CD")]
		Constant,
		[Token(Token = "0x40008CE")]
		FadeInOut25,
		[Token(Token = "0x40008CF")]
		FadeInOut50,
		[Token(Token = "0x40008D0")]
		FadeInOut75
	}
	[Token(Token = "0x2000167")]
	public enum CameraShakeAmplitudeOverDistanceCurve
	{
		[Token(Token = "0x40008D2")]
		Constant,
		[Token(Token = "0x40008D3")]
		LinearFadeIn,
		[Token(Token = "0x40008D4")]
		LinearFadeOut
	}
	[Token(Token = "0x2000168")]
	public class CameraShake : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x2000169")]
		public class Shake
		{
			[Token(Token = "0x40008DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float amplitude;

			[Token(Token = "0x40008DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float frequency;

			[Token(Token = "0x40008DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float duration;

			[Token(Token = "0x40008DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			[HideInInspector]
			public CameraShakeTarget target;

			[Token(Token = "0x40008DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private float timeRemaining;

			[Token(Token = "0x40008E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private Vector2 perlinNoiseX;

			[Token(Token = "0x40008E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private Vector2 perlinNoiseY;

			[Token(Token = "0x40008E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Vector2 perlinNoiseZ;

			[Token(Token = "0x40008E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			[HideInInspector]
			public Vector3 noise;

			[Token(Token = "0x40008E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public AnimationCurve amplitudeOverLifetimeCurve;

			[Token(Token = "0x6000AE8")]
			[Address(RVA = "0xC90F64", Offset = "0xC90F64", VA = "0xC90F64")]
			public void Init()
			{
			}

			[Token(Token = "0x6000AE9")]
			[Address(RVA = "0xC91010", Offset = "0xC91010", VA = "0xC91010")]
			private void Init(float amplitude, float frequency, float duration, CameraShakeTarget target)
			{
			}

			[Token(Token = "0x6000AEA")]
			[Address(RVA = "0xC90F70", Offset = "0xC90F70", VA = "0xC90F70")]
			public void ApplyRandomSeed()
			{
			}

			[Token(Token = "0x6000AEB")]
			[Address(RVA = "0xC90160", Offset = "0xC90160", VA = "0xC90160")]
			public Shake(float amplitude, float frequency, float duration, CameraShakeTarget target, AnimationCurve amplitudeOverLifetimeCurve)
			{
			}

			[Token(Token = "0x6000AEC")]
			[Address(RVA = "0xC90404", Offset = "0xC90404", VA = "0xC90404")]
			public Shake(float amplitude, float frequency, float duration, CameraShakeTarget target, CameraShakeAmplitudeCurve amplitudeOverLifetimeCurve)
			{
			}

			[Token(Token = "0x6000AED")]
			[Address(RVA = "0xC91024", Offset = "0xC91024", VA = "0xC91024")]
			public bool IsAlive()
			{
				return default(bool);
			}

			[Token(Token = "0x6000AEE")]
			[Address(RVA = "0xC90DE4", Offset = "0xC90DE4", VA = "0xC90DE4")]
			public void Update()
			{
			}
		}

		[Token(Token = "0x40008D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float smoothDampTime;

		[Token(Token = "0x40008D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private Vector3 smoothDampPositionVelocity;

		[Token(Token = "0x40008D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float smoothDampRotationVelocityX;

		[Token(Token = "0x40008D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float smoothDampRotationVelocityY;

		[Token(Token = "0x40008D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float smoothDampRotationVelocityZ;

		[Token(Token = "0x40008DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private List<Shake> shakes;

		[Token(Token = "0x6000AE3")]
		[Address(RVA = "0xC90040", Offset = "0xC90040", VA = "0xC90040")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AE4")]
		[Address(RVA = "0xC90044", Offset = "0xC90044", VA = "0xC90044")]
		public void Add(float amplitude, float frequency, float duration, CameraShakeTarget target, AnimationCurve amplitudeOverLifetimeCurve)
		{
		}

		[Token(Token = "0x6000AE5")]
		[Address(RVA = "0xC902E8", Offset = "0xC902E8", VA = "0xC902E8")]
		public void Add(float amplitude, float frequency, float duration, CameraShakeTarget target, CameraShakeAmplitudeCurve amplitudeOverLifetimeCurve)
		{
		}

		[Token(Token = "0x6000AE6")]
		[Address(RVA = "0xC9092C", Offset = "0xC9092C", VA = "0xC9092C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AE7")]
		[Address(RVA = "0xC90EDC", Offset = "0xC90EDC", VA = "0xC90EDC")]
		public CameraShake()
		{
		}
	}
	[Token(Token = "0x200016B")]
	public class DemoManager : MonoBehaviour
	{
		[Token(Token = "0x200016C")]
		public enum ParticleMode
		{
			[Token(Token = "0x400090D")]
			looping,
			[Token(Token = "0x400090E")]
			oneshot
		}

		[Token(Token = "0x200016D")]
		public enum Level
		{
			[Token(Token = "0x4000910")]
			none,
			[Token(Token = "0x4000911")]
			basic
		}

		[Token(Token = "0x40008E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform cameraRotationTransform;

		[Token(Token = "0x40008E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform cameraTranslationTransform;

		[Token(Token = "0x40008E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 cameraLookAtPosition;

		[Token(Token = "0x40008EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public MouseFollow mouse;

		[Token(Token = "0x40008EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 targetCameraPosition;

		[Token(Token = "0x40008EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 targetCameraRotation;

		[Token(Token = "0x40008ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Vector3 cameraPositionStart;

		[Token(Token = "0x40008EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private Vector3 cameraRotationStart;

		[Token(Token = "0x40008EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector2 input;

		[Token(Token = "0x40008F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 cameraRotation;

		[Token(Token = "0x40008F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float cameraMoveAmount;

		[Token(Token = "0x40008F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float cameraRotateAmount;

		[Token(Token = "0x40008F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float cameraMoveSpeed;

		[Token(Token = "0x40008F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float cameraRotationSpeed;

		[Token(Token = "0x40008F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public Vector2 cameraAngleLimits;

		[Token(Token = "0x40008F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public GameObject[] levels;

		[Token(Token = "0x40008F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Level currentLevel;

		[Token(Token = "0x40008F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public ParticleMode particleMode;

		[Token(Token = "0x40008F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool advancedRendering;

		[Token(Token = "0x40008FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public Toggle loopingParticleModeToggle;

		[Token(Token = "0x40008FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Toggle oneshotParticleModeToggle;

		[Token(Token = "0x40008FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Toggle advancedRenderingToggle;

		[Token(Token = "0x40008FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public Toggle mouseParticlesToggle;

		[Token(Token = "0x40008FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Toggle[] levelToggles;

		[Token(Token = "0x40008FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public ToggleGroup levelTogglesContainer;

		[Token(Token = "0x4000900")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private LoopingParticleSystemsManager loopingParticleSystems;

		[Token(Token = "0x4000901")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private OneshotParticleSystemsManager oneshotParticleSystems;

		[Token(Token = "0x4000902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public GameObject ui;

		[Token(Token = "0x4000903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Text particleCountText;

		[Token(Token = "0x4000904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public Text currentParticleSystemText;

		[Token(Token = "0x4000905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public Text particleSpawnInstructionText;

		[Token(Token = "0x4000906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public UnityEngine.UI.Slider timeScaleSlider;

		[Token(Token = "0x4000907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public Text timeScaleSliderValueText;

		[Token(Token = "0x4000908")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public Camera mainCamera;

		[Token(Token = "0x4000909")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public MonoBehaviour[] mainCameraPostEffects;

		[Token(Token = "0x400090A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Vector3 cameraPositionSmoothDampVelocity;

		[Token(Token = "0x400090B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		private Vector3 cameraRotationSmoothDampVelocity;

		[Token(Token = "0x6000AF2")]
		[Address(RVA = "0xC910C0", Offset = "0xC910C0", VA = "0xC910C0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000AF3")]
		[Address(RVA = "0xC9116C", Offset = "0xC9116C", VA = "0xC9116C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000AF4")]
		[Address(RVA = "0xC9170C", Offset = "0xC9170C", VA = "0xC9170C")]
		public void OnTimeScaleSliderValueChanged(float value)
		{
		}

		[Token(Token = "0x6000AF5")]
		[Address(RVA = "0xC91488", Offset = "0xC91488", VA = "0xC91488")]
		public void SetToLoopingParticleMode(bool set)
		{
		}

		[Token(Token = "0x6000AF6")]
		[Address(RVA = "0xC9151C", Offset = "0xC9151C", VA = "0xC9151C")]
		public void SetToOneshotParticleMode(bool set)
		{
		}

		[Token(Token = "0x6000AF7")]
		[Address(RVA = "0xC91900", Offset = "0xC91900", VA = "0xC91900")]
		public void SetLevel(Level level)
		{
		}

		[Token(Token = "0x6000AF8")]
		[Address(RVA = "0xC91970", Offset = "0xC91970", VA = "0xC91970")]
		public void SetLevelFromToggle(Toggle toggle)
		{
		}

		[Token(Token = "0x6000AF9")]
		[Address(RVA = "0xC915B4", Offset = "0xC915B4", VA = "0xC915B4")]
		public void SetAdvancedRendering(bool value)
		{
		}

		[Token(Token = "0x6000AFA")]
		[Address(RVA = "0xC919E8", Offset = "0xC919E8", VA = "0xC919E8")]
		public void SetMouseParticlesRendering(bool value)
		{
		}

		[Token(Token = "0x6000AFB")]
		[Address(RVA = "0xC91A18", Offset = "0xC91A18", VA = "0xC91A18")]
		public static Vector3 DampVector3(Vector3 from, Vector3 to, float speed, float dt)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000AFC")]
		[Address(RVA = "0xC91A98", Offset = "0xC91A98", VA = "0xC91A98")]
		private void Update()
		{
		}

		[Token(Token = "0x6000AFD")]
		[Address(RVA = "0xC9236C", Offset = "0xC9236C", VA = "0xC9236C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000AFE")]
		[Address(RVA = "0xC91464", Offset = "0xC91464", VA = "0xC91464")]
		private void ResetCameraTransformTargets()
		{
		}

		[Token(Token = "0x6000AFF")]
		[Address(RVA = "0xC916A8", Offset = "0xC916A8", VA = "0xC916A8")]
		private void UpdateCurrentParticleSystemNameText()
		{
		}

		[Token(Token = "0x6000B00")]
		[Address(RVA = "0xC91F7C", Offset = "0xC91F7C", VA = "0xC91F7C")]
		public void Next()
		{
		}

		[Token(Token = "0x6000B01")]
		[Address(RVA = "0xC91FC0", Offset = "0xC91FC0", VA = "0xC91FC0")]
		public void Previous()
		{
		}

		[Token(Token = "0x6000B02")]
		[Address(RVA = "0xC92478", Offset = "0xC92478", VA = "0xC92478")]
		public DemoManager()
		{
		}
	}
	[Token(Token = "0x200016E")]
	public class FPSDisplay : MonoBehaviour
	{
		[Token(Token = "0x4000912")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float timer;

		[Token(Token = "0x4000913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float updateTime;

		[Token(Token = "0x4000914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int frameCount;

		[Token(Token = "0x4000915")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float fpsAccum;

		[Token(Token = "0x4000916")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Text fpsText;

		[Token(Token = "0x6000B03")]
		[Address(RVA = "0xC924B4", Offset = "0xC924B4", VA = "0xC924B4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B04")]
		[Address(RVA = "0xC924B8", Offset = "0xC924B8", VA = "0xC924B8")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B05")]
		[Address(RVA = "0xC92508", Offset = "0xC92508", VA = "0xC92508")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B06")]
		[Address(RVA = "0xC926BC", Offset = "0xC926BC", VA = "0xC926BC")]
		public FPSDisplay()
		{
		}
	}
	[Token(Token = "0x200016F")]
	public class FPSTest : MonoBehaviour
	{
		[Token(Token = "0x4000917")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int targetFPS1;

		[Token(Token = "0x4000918")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int targetFPS2;

		[Token(Token = "0x4000919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int previousVSyncCount;

		[Token(Token = "0x6000B07")]
		[Address(RVA = "0xC926CC", Offset = "0xC926CC", VA = "0xC926CC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B08")]
		[Address(RVA = "0xC926D0", Offset = "0xC926D0", VA = "0xC926D0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B09")]
		[Address(RVA = "0xC926D4", Offset = "0xC926D4", VA = "0xC926D4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B0A")]
		[Address(RVA = "0xC92744", Offset = "0xC92744", VA = "0xC92744")]
		public FPSTest()
		{
		}
	}
	[Token(Token = "0x2000170")]
	public class LoopingParticleSystemsManager : ParticleManager
	{
		[Token(Token = "0x6000B0B")]
		[Address(RVA = "0xC92758", Offset = "0xC92758", VA = "0xC92758", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000B0C")]
		[Address(RVA = "0xC92760", Offset = "0xC92760", VA = "0xC92760", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000B0D")]
		[Address(RVA = "0xC92804", Offset = "0xC92804", VA = "0xC92804", Slot = "6")]
		public override void Next()
		{
		}

		[Token(Token = "0x6000B0E")]
		[Address(RVA = "0xC92934", Offset = "0xC92934", VA = "0xC92934", Slot = "7")]
		public override void Previous()
		{
		}

		[Token(Token = "0x6000B0F")]
		[Address(RVA = "0xC92A60", Offset = "0xC92A60", VA = "0xC92A60", Slot = "9")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000B10")]
		[Address(RVA = "0xC92A68", Offset = "0xC92A68", VA = "0xC92A68", Slot = "8")]
		public override int GetParticleCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000B11")]
		[Address(RVA = "0xC92B1C", Offset = "0xC92B1C", VA = "0xC92B1C")]
		public LoopingParticleSystemsManager()
		{
		}
	}
	[Token(Token = "0x2000171")]
	public class MouseFollow : MonoBehaviour
	{
		[Token(Token = "0x400091A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float speed;

		[Token(Token = "0x400091B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float distanceFromCamera;

		[Token(Token = "0x400091C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool ignoreTimeScale;

		[Token(Token = "0x6000B12")]
		[Address(RVA = "0xC92B4C", Offset = "0xC92B4C", VA = "0xC92B4C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B13")]
		[Address(RVA = "0xC92B50", Offset = "0xC92B50", VA = "0xC92B50")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B14")]
		[Address(RVA = "0xC92B54", Offset = "0xC92B54", VA = "0xC92B54")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B15")]
		[Address(RVA = "0xC92C64", Offset = "0xC92C64", VA = "0xC92C64")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000B16")]
		[Address(RVA = "0xC92C68", Offset = "0xC92C68", VA = "0xC92C68")]
		public MouseFollow()
		{
		}
	}
	[Token(Token = "0x2000172")]
	public class OneshotParticleSystemsManager : ParticleManager
	{
		[Token(Token = "0x400091D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask mouseRaycastLayerMask;

		[Token(Token = "0x400091E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<ParticleSystem[]> spawnedPrefabs;

		[Token(Token = "0x1700007E")]
		public bool disableSpawn
		{
			[Token(Token = "0x6000B17")]
			[Address(RVA = "0xC92C7C", Offset = "0xC92C7C", VA = "0xC92C7C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B18")]
			[Address(RVA = "0xC92C84", Offset = "0xC92C84", VA = "0xC92C84")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6000B19")]
		[Address(RVA = "0xC92C90", Offset = "0xC92C90", VA = "0xC92C90", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000B1A")]
		[Address(RVA = "0xC92C94", Offset = "0xC92C94", VA = "0xC92C94", Slot = "5")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000B1B")]
		[Address(RVA = "0xC92D1C", Offset = "0xC92D1C", VA = "0xC92D1C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000B1C")]
		[Address(RVA = "0xC9179C", Offset = "0xC9179C", VA = "0xC9179C")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000B1D")]
		[Address(RVA = "0xC92D20", Offset = "0xC92D20", VA = "0xC92D20", Slot = "9")]
		protected override void Update()
		{
		}

		[Token(Token = "0x6000B1E")]
		[Address(RVA = "0xC92004", Offset = "0xC92004", VA = "0xC92004")]
		public void InstantiateParticlePrefab(Vector2 mousePosition, float maxDistance)
		{
		}

		[Token(Token = "0x6000B1F")]
		[Address(RVA = "0xC92D24", Offset = "0xC92D24", VA = "0xC92D24")]
		public void Randomize()
		{
		}

		[Token(Token = "0x6000B20")]
		[Address(RVA = "0xC92D7C", Offset = "0xC92D7C", VA = "0xC92D7C", Slot = "8")]
		public override int GetParticleCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000B21")]
		[Address(RVA = "0xC92F04", Offset = "0xC92F04", VA = "0xC92F04")]
		public OneshotParticleSystemsManager()
		{
		}
	}
	[Token(Token = "0x2000173")]
	public class ParticleManager : MonoBehaviour
	{
		[Token(Token = "0x4000920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected List<ParticleSystem[]> particlePrefabs;

		[Token(Token = "0x4000921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int currentParticlePrefabIndex;

		[Token(Token = "0x4000922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int prefabNameUnderscoreCountCutoff;

		[Token(Token = "0x4000923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool disableChildrenAtStart;

		[Token(Token = "0x4000924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool initialized;

		[Token(Token = "0x6000B22")]
		[Address(RVA = "0xC8F758", Offset = "0xC8F758", VA = "0xC8F758")]
		public void Init()
		{
		}

		[Token(Token = "0x6000B23")]
		[Address(RVA = "0xC9275C", Offset = "0xC9275C", VA = "0xC9275C", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000B24")]
		[Address(RVA = "0xC927F4", Offset = "0xC927F4", VA = "0xC927F4", Slot = "5")]
		protected virtual void Start()
		{
		}

		[Token(Token = "0x6000B25")]
		[Address(RVA = "0xC928D0", Offset = "0xC928D0", VA = "0xC928D0", Slot = "6")]
		public virtual void Next()
		{
		}

		[Token(Token = "0x6000B26")]
		[Address(RVA = "0xC92A00", Offset = "0xC92A00", VA = "0xC92A00", Slot = "7")]
		public virtual void Previous()
		{
		}

		[Token(Token = "0x6000B27")]
		[Address(RVA = "0xC8FCE8", Offset = "0xC8FCE8", VA = "0xC8FCE8")]
		public string GetCurrentPrefabName(bool shorten = false)
		{
			return null;
		}

		[Token(Token = "0x6000B28")]
		[Address(RVA = "0xC92F3C", Offset = "0xC92F3C", VA = "0xC92F3C", Slot = "8")]
		public virtual int GetParticleCount()
		{
			return default(int);
		}

		[Token(Token = "0x6000B29")]
		[Address(RVA = "0xC92A64", Offset = "0xC92A64", VA = "0xC92A64", Slot = "9")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6000B2A")]
		[Address(RVA = "0xC92B34", Offset = "0xC92B34", VA = "0xC92B34")]
		public ParticleManager()
		{
		}
	}
}
namespace MirzaBeig.Demos
{
	[Token(Token = "0x2000174")]
	public class MouseRotateCamera : MonoBehaviour
	{
		[Token(Token = "0x4000925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float maxRotation;

		[Token(Token = "0x4000926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float speed;

		[Token(Token = "0x4000927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool unscaledTime;

		[Token(Token = "0x6000B2B")]
		[Address(RVA = "0xC92F44", Offset = "0xC92F44", VA = "0xC92F44")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B2C")]
		[Address(RVA = "0xC92F48", Offset = "0xC92F48", VA = "0xC92F48")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B2D")]
		[Address(RVA = "0xC92F4C", Offset = "0xC92F4C", VA = "0xC92F4C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B2E")]
		[Address(RVA = "0xC92F50", Offset = "0xC92F50", VA = "0xC92F50")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000B2F")]
		[Address(RVA = "0xC93120", Offset = "0xC93120", VA = "0xC93120")]
		public MouseRotateCamera()
		{
		}
	}
}
namespace MirzaBeig.Demos.Wallpapers
{
	[Token(Token = "0x2000175")]
	public class GravityClockInteractivityUVFX : MonoBehaviour
	{
		[Token(Token = "0x4000928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject forceAffectors;

		[Token(Token = "0x4000929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject forceAffectors2;

		[Token(Token = "0x400092A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ParticleSystem gravityClockPrefab;

		[Token(Token = "0x400092B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ParticleSystem gravityClock;

		[Token(Token = "0x400092C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool enableGravityClockVisualEffects;

		[Token(Token = "0x400092D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool enableGravityClockAttractionForce;

		[Token(Token = "0x6000B30")]
		[Address(RVA = "0xC93134", Offset = "0xC93134", VA = "0xC93134")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B31")]
		[Address(RVA = "0xC93138", Offset = "0xC93138", VA = "0xC93138")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B32")]
		[Address(RVA = "0xC9313C", Offset = "0xC9313C", VA = "0xC9313C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B33")]
		[Address(RVA = "0xC93140", Offset = "0xC93140", VA = "0xC93140")]
		public void SetGravityClockVisualEffectsActive(bool value)
		{
		}

		[Token(Token = "0x6000B34")]
		[Address(RVA = "0xC932B4", Offset = "0xC932B4", VA = "0xC932B4")]
		public void SetGravityClockAttractionForceActive(bool value)
		{
		}

		[Token(Token = "0x6000B35")]
		[Address(RVA = "0xC93354", Offset = "0xC93354", VA = "0xC93354")]
		public GravityClockInteractivityUVFX()
		{
		}
	}
}
namespace MirzaBeig.Demos.ParticlePlayground
{
	[Token(Token = "0x2000176")]
	public class BillboardCameraPlaneUVFX : MonoBehaviour
	{
		[Token(Token = "0x400092E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform cameraTransform;

		[Token(Token = "0x6000B36")]
		[Address(RVA = "0xC93364", Offset = "0xC93364", VA = "0xC93364")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000B37")]
		[Address(RVA = "0xC93368", Offset = "0xC93368", VA = "0xC93368")]
		private void Start()
		{
		}

		[Token(Token = "0x6000B38")]
		[Address(RVA = "0xC93394", Offset = "0xC93394", VA = "0xC93394")]
		private void Update()
		{
		}

		[Token(Token = "0x6000B39")]
		[Address(RVA = "0xC93398", Offset = "0xC93398", VA = "0xC93398")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000B3A")]
		[Address(RVA = "0xC933E4", Offset = "0xC933E4", VA = "0xC933E4")]
		public BillboardCameraPlaneUVFX()
		{
		}
	}
}
namespace BeautifyEffect
{
	[Token(Token = "0x2000177")]
	public delegate float OnBeforeFocusEvent(float currentFocusDistance);
	[Token(Token = "0x2000178")]
	public enum BEAUTIFY_QUALITY
	{
		[Token(Token = "0x4000930")]
		BestQuality,
		[Token(Token = "0x4000931")]
		BestPerformance,
		[Token(Token = "0x4000932")]
		Basic
	}
	[Token(Token = "0x2000179")]
	public enum BEAUTIFY_PRESET
	{
		[Token(Token = "0x4000934")]
		Soft = 10,
		[Token(Token = "0x4000935")]
		Medium = 20,
		[Token(Token = "0x4000936")]
		Strong = 30,
		[Token(Token = "0x4000937")]
		Exaggerated = 40,
		[Token(Token = "0x4000938")]
		Custom = 999
	}
	[Token(Token = "0x200017A")]
	public enum BEAUTIFY_TMO
	{
		[Token(Token = "0x400093A")]
		Linear = 0,
		[Token(Token = "0x400093B")]
		ACES = 10
	}
	[Token(Token = "0x200017B")]
	public enum BEAUTIFY_PRERENDER_EVENT
	{
		[Token(Token = "0x400093D")]
		OnPreCull,
		[Token(Token = "0x400093E")]
		OnPreRender
	}
	[Token(Token = "0x200017C")]
	[HelpURL("http://kronnect.com/taptapgo")]
	[ExecuteInEditMode]
	[AddComponentMenu("Image Effects/Rendering/Beautify")]
	[RequireComponent(typeof(Camera))]
	[ImageEffectAllowedInSceneView]
	public class Beautify : MonoBehaviour
	{
		[Token(Token = "0x200017D")]
		[CompilerGenerated]
		private sealed class <DoBlink>d__747 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000A21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000A22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000A23")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float duration;

			[Token(Token = "0x4000A24")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Beautify <>4__this;

			[Token(Token = "0x4000A25")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float maxValue;

			[Token(Token = "0x4000A26")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <start>5__2;

			[Token(Token = "0x4000A27")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <t>5__3;

			[Token(Token = "0x4000A28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private WaitForEndOfFrame <w>5__4;

			[Token(Token = "0x17000124")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000CAA")]
				[Address(RVA = "0xC9EF84", Offset = "0xC9EF84", VA = "0xC9EF84", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000125")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000CAC")]
				[Address(RVA = "0xC9EFCC", Offset = "0xC9EFCC", VA = "0xC9EFCC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000CA7")]
			[Address(RVA = "0xC9EDCC", Offset = "0xC9EDCC", VA = "0xC9EDCC")]
			[DebuggerHidden]
			public <DoBlink>d__747(int <>1__state)
			{
			}

			[Token(Token = "0x6000CA8")]
			[Address(RVA = "0xC9EDF4", Offset = "0xC9EDF4", VA = "0xC9EDF4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000CA9")]
			[Address(RVA = "0xC9EDF8", Offset = "0xC9EDF8", VA = "0xC9EDF8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000CAB")]
			[Address(RVA = "0xC9EF8C", Offset = "0xC9EF8C", VA = "0xC9EF8C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400093F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private BEAUTIFY_PRESET _preset;

		[Token(Token = "0x4000940")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private BEAUTIFY_QUALITY _quality;

		[Token(Token = "0x4000941")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private BeautifyProfile _profile;

		[Token(Token = "0x4000942")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private bool _syncWithProfile;

		[Token(Token = "0x4000943")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[SerializeField]
		private bool _compareMode;

		[Token(Token = "0x4000944")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[SerializeField]
		[Range(-(float)Math.PI, (float)Math.PI)]
		private float _compareLineAngle;

		[Token(Token = "0x4000945")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[Range(0.0001f, 0.05f)]
		private float _compareLineWidth;

		[Token(Token = "0x4000946")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 0.2f)]
		[SerializeField]
		private float _dither;

		[Token(Token = "0x4000947")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		[Range(0f, 1f)]
		private float _ditherDepth;

		[Token(Token = "0x4000948")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[SerializeField]
		[Range(0f, 1f)]
		private float _sharpenMinDepth;

		[Token(Token = "0x4000949")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(0f, 1.1f)]
		[SerializeField]
		private float _sharpenMaxDepth;

		[Token(Token = "0x400094A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Range(0f, 1f)]
		[SerializeField]
		private float _sharpenMinMaxDepthFallOff;

		[Token(Token = "0x400094B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 15f)]
		[SerializeField]
		private float _sharpen;

		[Token(Token = "0x400094C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[SerializeField]
		[Range(0f, 0.05f)]
		private float _sharpenDepthThreshold;

		[Token(Token = "0x400094D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Color _tintColor;

		[Token(Token = "0x400094E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		[Range(0f, 0.2f)]
		private float _sharpenRelaxation;

		[Token(Token = "0x400094F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[SerializeField]
		[Range(0f, 1f)]
		private float _sharpenClamp;

		[Token(Token = "0x4000950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		[Range(0f, 1f)]
		private float _sharpenMotionSensibility;

		[Token(Token = "0x4000951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[SerializeField]
		[Range(-2f, 3f)]
		private float _saturate;

		[Token(Token = "0x4000952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		[Range(0.5f, 1.5f)]
		private float _contrast;

		[Token(Token = "0x4000953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[SerializeField]
		private float _brightness;

		[Token(Token = "0x4000954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		[Range(0f, 2f)]
		private float _daltonize;

		[Token(Token = "0x4000955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[SerializeField]
		private bool _vignetting;

		[Token(Token = "0x4000956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private Color _vignettingColor;

		[Token(Token = "0x4000957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		[Range(0f, 1f)]
		private float _vignettingFade;

		[Token(Token = "0x4000958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[SerializeField]
		private bool _vignettingCircularShape;

		[Token(Token = "0x4000959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private float _vignettingAspectRatio;

		[Token(Token = "0x400095A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[SerializeField]
		[Range(0f, 1f)]
		private float _vignettingBlink;

		[Token(Token = "0x400095B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private Texture2D _vignettingMask;

		[Token(Token = "0x400095C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private bool _frame;

		[Token(Token = "0x400095D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[SerializeField]
		private Color _frameColor;

		[Token(Token = "0x400095E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private Texture2D _frameMask;

		[Token(Token = "0x400095F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		private bool _lut;

		[Token(Token = "0x4000960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[SerializeField]
		[Range(0f, 1f)]
		private float _lutIntensity;

		[Token(Token = "0x4000961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private Texture2D _lutTexture;

		[Token(Token = "0x4000962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private bool _nightVision;

		[Token(Token = "0x4000963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[SerializeField]
		private Color _nightVisionColor;

		[Token(Token = "0x4000964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[SerializeField]
		private bool _outline;

		[Token(Token = "0x4000965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		private Color _outlineColor;

		[Token(Token = "0x4000966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[SerializeField]
		private bool _thermalVision;

		[Token(Token = "0x4000967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x101")]
		[SerializeField]
		private bool _lensDirt;

		[Token(Token = "0x4000968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[SerializeField]
		[Range(0f, 1f)]
		private float _lensDirtThreshold;

		[Token(Token = "0x4000969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[SerializeField]
		[Range(0f, 1f)]
		private float _lensDirtIntensity;

		[Token(Token = "0x400096A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private Texture2D _lensDirtTexture;

		[Token(Token = "0x400096B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[SerializeField]
		private bool _bloom;

		[Token(Token = "0x400096C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[SerializeField]
		private LayerMask _bloomCullingMask;

		[Token(Token = "0x400096D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		[Range(1f, 4f)]
		private float _bloomLayerMaskDownsampling;

		[Token(Token = "0x400096E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		[SerializeField]
		[Range(0f, 10f)]
		private float _bloomIntensity;

		[Token(Token = "0x400096F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[SerializeField]
		private float _bloomMaxBrightness;

		[Token(Token = "0x4000970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		[SerializeField]
		[Range(0f, 3f)]
		private float _bloomBoost0;

		[Token(Token = "0x4000971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[SerializeField]
		[Range(0f, 3f)]
		private float _bloomBoost1;

		[Token(Token = "0x4000972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		[SerializeField]
		[Range(0f, 3f)]
		private float _bloomBoost2;

		[Token(Token = "0x4000973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[SerializeField]
		[Range(0f, 3f)]
		private float _bloomBoost3;

		[Token(Token = "0x4000974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		[SerializeField]
		[Range(0f, 3f)]
		private float _bloomBoost4;

		[Token(Token = "0x4000975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		[Range(0f, 3f)]
		[SerializeField]
		private float _bloomBoost5;

		[Token(Token = "0x4000976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		[SerializeField]
		private bool _bloomAntiflicker;

		[Token(Token = "0x4000977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x145")]
		[SerializeField]
		private bool _bloomUltra;

		[Token(Token = "0x4000978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[SerializeField]
		[Range(1f, 10f)]
		private int _bloomUltraResolution;

		[Token(Token = "0x4000979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		[SerializeField]
		[Range(0f, 5f)]
		private float _bloomThreshold;

		[Token(Token = "0x400097A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[SerializeField]
		private bool _bloomCustomize;

		[Token(Token = "0x400097B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x151")]
		[SerializeField]
		private bool _bloomDebug;

		[Token(Token = "0x400097C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		[Range(0f, 1f)]
		[SerializeField]
		private float _bloomWeight0;

		[Token(Token = "0x400097D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[SerializeField]
		[Range(0f, 1f)]
		private float _bloomWeight1;

		[Token(Token = "0x400097E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		[SerializeField]
		[Range(0f, 1f)]
		private float _bloomWeight2;

		[Token(Token = "0x400097F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[SerializeField]
		[Range(0f, 1f)]
		private float _bloomWeight3;

		[Token(Token = "0x4000980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		[SerializeField]
		[Range(0f, 1f)]
		private float _bloomWeight4;

		[Token(Token = "0x4000981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[SerializeField]
		[Range(0f, 1f)]
		private float _bloomWeight5;

		[Token(Token = "0x4000982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		[SerializeField]
		private bool _bloomBlur;

		[Token(Token = "0x4000983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16D")]
		[SerializeField]
		private bool _bloomQuickerBlur;

		[Token(Token = "0x4000984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[Range(0f, 1f)]
		[SerializeField]
		private float _bloomDepthAtten;

		[Token(Token = "0x4000985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		[SerializeField]
		[Range(-1f, 1f)]
		private float _bloomLayerZBias;

		[Token(Token = "0x4000986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		[SerializeField]
		private BEAUTIFY_PRERENDER_EVENT _preRenderCameraEvent;

		[Token(Token = "0x4000987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		[SerializeField]
		private bool _anamorphicFlares;

		[Token(Token = "0x4000988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[SerializeField]
		[Range(0f, 10f)]
		private float _anamorphicFlaresIntensity;

		[Token(Token = "0x4000989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		[SerializeField]
		private bool _anamorphicFlaresAntiflicker;

		[Token(Token = "0x400098A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x185")]
		[SerializeField]
		private bool _anamorphicFlaresUltra;

		[Token(Token = "0x400098B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		[Range(1f, 10f)]
		[SerializeField]
		private int _anamorphicUltraResolution;

		[Token(Token = "0x400098C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		[Range(0f, 5f)]
		[SerializeField]
		private float _anamorphicFlaresThreshold;

		[Token(Token = "0x400098D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		[SerializeField]
		[Range(0.1f, 2f)]
		private float _anamorphicFlaresSpread;

		[Token(Token = "0x400098E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		[SerializeField]
		private bool _anamorphicFlaresVertical;

		[Token(Token = "0x400098F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		[SerializeField]
		private Color _anamorphicFlaresTint;

		[Token(Token = "0x4000990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		[SerializeField]
		private bool _anamorphicFlaresBlur;

		[Token(Token = "0x4000991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A9")]
		[SerializeField]
		private bool _depthOfField;

		[Token(Token = "0x4000992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AA")]
		[SerializeField]
		private bool _depthOfFieldTransparencySupport;

		[Token(Token = "0x4000993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		[SerializeField]
		private LayerMask _depthOfFieldTransparencyLayerMask;

		[Token(Token = "0x4000994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		[SerializeField]
		private Transform _depthOfFieldTargetFocus;

		[Token(Token = "0x4000995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		[SerializeField]
		private bool _depthOfFieldDebug;

		[Token(Token = "0x4000996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B9")]
		[SerializeField]
		private bool _depthOfFieldAutofocus;

		[Token(Token = "0x4000997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		[SerializeField]
		private Vector2 _depthofFieldAutofocusViewportPoint;

		[Token(Token = "0x4000998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		[SerializeField]
		private float _depthOfFieldAutofocusMinDistance;

		[Token(Token = "0x4000999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		[SerializeField]
		private float _depthOfFieldAutofocusMaxDistance;

		[Token(Token = "0x400099A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		[SerializeField]
		private LayerMask _depthOfFieldAutofocusLayerMask;

		[Token(Token = "0x400099B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		[SerializeField]
		private LayerMask _depthOfFieldExclusionLayerMask;

		[Token(Token = "0x400099C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		[SerializeField]
		[Range(1f, 4f)]
		private float _depthOfFieldExclusionLayerMaskDownsampling;

		[Token(Token = "0x400099D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		[SerializeField]
		[Range(1f, 4f)]
		private float _depthOfFieldTransparencySupportDownsampling;

		[Token(Token = "0x400099E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		[SerializeField]
		[Range(0.9f, 1f)]
		private float _depthOfFieldExclusionBias;

		[Token(Token = "0x400099F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		[Range(1f, 100f)]
		[SerializeField]
		private float _depthOfFieldDistance;

		[Token(Token = "0x40009A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		[SerializeField]
		[Range(0.001f, 5f)]
		private float _depthOfFieldFocusSpeed;

		[Token(Token = "0x40009A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		[SerializeField]
		[Range(1f, 5f)]
		private int _depthOfFieldDownsampling;

		[Token(Token = "0x40009A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		[SerializeField]
		[Range(2f, 16f)]
		private int _depthOfFieldMaxSamples;

		[Token(Token = "0x40009A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		[SerializeField]
		[Range(0.005f, 0.5f)]
		private float _depthOfFieldFocalLength;

		[Token(Token = "0x40009A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
		[SerializeField]
		private float _depthOfFieldAperture;

		[Token(Token = "0x40009A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		[SerializeField]
		private bool _depthOfFieldForegroundBlur;

		[Token(Token = "0x40009A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F9")]
		[SerializeField]
		private bool _depthOfFieldForegroundBlurHQ;

		[Token(Token = "0x40009A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		[SerializeField]
		private float _depthOfFieldForegroundDistance;

		[Token(Token = "0x40009A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		[SerializeField]
		private bool _depthOfFieldBokeh;

		[Token(Token = "0x40009A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		[SerializeField]
		[Range(0.5f, 3f)]
		private float _depthOfFieldBokehThreshold;

		[Token(Token = "0x40009AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		[SerializeField]
		[Range(0f, 8f)]
		private float _depthOfFieldBokehIntensity;

		[Token(Token = "0x40009AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
		[SerializeField]
		private float _depthOfFieldMaxBrightness;

		[Token(Token = "0x40009AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		[SerializeField]
		[Range(0f, 1f)]
		private float _depthOfFieldMaxDistance;

		[Token(Token = "0x40009AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
		[SerializeField]
		private FilterMode _depthOfFieldFilterMode;

		[NonSerialized]
		[Token(Token = "0x40009AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		public OnBeforeFocusEvent OnBeforeFocus;

		[Token(Token = "0x40009AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		[SerializeField]
		private bool _eyeAdaptation;

		[Token(Token = "0x40009B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
		[Range(0f, 1f)]
		[SerializeField]
		private float _eyeAdaptationMinExposure;

		[Token(Token = "0x40009B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		[SerializeField]
		[Range(1f, 100f)]
		private float _eyeAdaptationMaxExposure;

		[Token(Token = "0x40009B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22C")]
		[Range(0f, 1f)]
		[SerializeField]
		private float _eyeAdaptationSpeedToLight;

		[Token(Token = "0x40009B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		[SerializeField]
		[Range(0f, 1f)]
		private float _eyeAdaptationSpeedToDark;

		[Token(Token = "0x40009B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x234")]
		[SerializeField]
		private bool _purkinje;

		[Token(Token = "0x40009B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		[SerializeField]
		[Range(0f, 5f)]
		private float _purkinjeAmount;

		[Token(Token = "0x40009B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23C")]
		[Range(0f, 1f)]
		[SerializeField]
		private float _purkinjeLuminanceThreshold;

		[Token(Token = "0x40009B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		[SerializeField]
		private BEAUTIFY_TMO _tonemap;

		[Token(Token = "0x40009B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x244")]
		[SerializeField]
		private bool _sunFlares;

		[Token(Token = "0x40009B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		[SerializeField]
		private Transform _sun;

		[Token(Token = "0x40009BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		[SerializeField]
		private LayerMask _sunFlaresLayerMask;

		[Token(Token = "0x40009BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x254")]
		[Range(0f, 1f)]
		[SerializeField]
		private float _sunFlaresIntensity;

		[Token(Token = "0x40009BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		[Range(0f, 1f)]
		[SerializeField]
		private float _sunFlaresSolarWindSpeed;

		[Token(Token = "0x40009BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25C")]
		[SerializeField]
		private Color _sunFlaresTint;

		[Token(Token = "0x40009BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26C")]
		[Range(1f, 5f)]
		[SerializeField]
		private int _sunFlaresDownsampling;

		[Token(Token = "0x40009BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		[SerializeField]
		[Range(0f, 1f)]
		private float _sunFlaresSunIntensity;

		[Token(Token = "0x40009C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x274")]
		[SerializeField]
		[Range(0f, 1f)]
		private float _sunFlaresSunDiskSize;

		[Token(Token = "0x40009C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		[Range(0f, 10f)]
		[SerializeField]
		private float _sunFlaresSunRayDiffractionIntensity;

		[Token(Token = "0x40009C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27C")]
		[SerializeField]
		[Range(0f, 1f)]
		private float _sunFlaresSunRayDiffractionThreshold;

		[Token(Token = "0x40009C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		[SerializeField]
		[Range(0f, 0.2f)]
		private float _sunFlaresCoronaRays1Length;

		[Token(Token = "0x40009C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x284")]
		[Range(2f, 30f)]
		[SerializeField]
		private int _sunFlaresCoronaRays1Streaks;

		[Token(Token = "0x40009C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		[SerializeField]
		[Range(0f, 0.1f)]
		private float _sunFlaresCoronaRays1Spread;

		[Token(Token = "0x40009C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28C")]
		[SerializeField]
		[Range(0f, (float)Math.PI * 2f)]
		private float _sunFlaresCoronaRays1AngleOffset;

		[Token(Token = "0x40009C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		[Range(0f, 0.2f)]
		[SerializeField]
		private float _sunFlaresCoronaRays2Length;

		[Token(Token = "0x40009C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x294")]
		[Range(2f, 30f)]
		[SerializeField]
		private int _sunFlaresCoronaRays2Streaks;

		[Token(Token = "0x40009C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		[Range(0f, 0.1f)]
		[SerializeField]
		private float _sunFlaresCoronaRays2Spread;

		[Token(Token = "0x40009CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29C")]
		[Range(0f, (float)Math.PI * 2f)]
		[SerializeField]
		private float _sunFlaresCoronaRays2AngleOffset;

		[Token(Token = "0x40009CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		[Range(0f, 1f)]
		[SerializeField]
		private float _sunFlaresGhosts1Size;

		[Token(Token = "0x40009CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A4")]
		[Range(-3f, 3f)]
		[SerializeField]
		private float _sunFlaresGhosts1Offset;

		[Token(Token = "0x40009CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		[Range(0f, 1f)]
		[SerializeField]
		private float _sunFlaresGhosts1Brightness;

		[Token(Token = "0x40009CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2AC")]
		[SerializeField]
		[Range(0f, 1f)]
		private float _sunFlaresGhosts2Size;

		[Token(Token = "0x40009CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		[SerializeField]
		[Range(-3f, 3f)]
		private float _sunFlaresGhosts2Offset;

		[Token(Token = "0x40009D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B4")]
		[SerializeField]
		[Range(0f, 1f)]
		private float _sunFlaresGhosts2Brightness;

		[Token(Token = "0x40009D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		[SerializeField]
		[Range(0f, 1f)]
		private float _sunFlaresGhosts3Size;

		[Token(Token = "0x40009D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2BC")]
		[SerializeField]
		[Range(-3f, 3f)]
		private float _sunFlaresGhosts3Brightness;

		[Token(Token = "0x40009D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		[SerializeField]
		[Range(0f, 1f)]
		private float _sunFlaresGhosts3Offset;

		[Token(Token = "0x40009D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C4")]
		[SerializeField]
		[Range(0f, 1f)]
		private float _sunFlaresGhosts4Size;

		[Token(Token = "0x40009D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		[SerializeField]
		[Range(-3f, 3f)]
		private float _sunFlaresGhosts4Offset;

		[Token(Token = "0x40009D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2CC")]
		[SerializeField]
		[Range(0f, 1f)]
		private float _sunFlaresGhosts4Brightness;

		[Token(Token = "0x40009D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		[SerializeField]
		[Range(0f, 1f)]
		private float _sunFlaresHaloOffset;

		[Token(Token = "0x40009D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D4")]
		[Range(0f, 50f)]
		[SerializeField]
		private float _sunFlaresHaloAmplitude;

		[Token(Token = "0x40009D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
		[SerializeField]
		[Range(0f, 1f)]
		private float _sunFlaresHaloIntensity;

		[Token(Token = "0x40009DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2DC")]
		[SerializeField]
		private bool _sunFlaresRotationDeadZone;

		[Token(Token = "0x40009DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2DD")]
		[SerializeField]
		private bool _blur;

		[Token(Token = "0x40009DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		[Range(0f, 4f)]
		[SerializeField]
		private float _blurIntensity;

		[Token(Token = "0x40009DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E4")]
		[Range(1f, 8f)]
		[SerializeField]
		private int _downscale;

		[Token(Token = "0x40009DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		[SerializeField]
		[Range(1f, 256f)]
		private int _pixelateAmount;

		[Token(Token = "0x40009DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2EC")]
		[SerializeField]
		private bool _pixelateDownscale;

		[Token(Token = "0x40009E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
		[SerializeField]
		[Range(0f, 20f)]
		private float _antialiasStrength;

		[Token(Token = "0x40009E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F4")]
		[SerializeField]
		[Range(0f, 0.05f)]
		private float _antialiasDepthThreshold;

		[Token(Token = "0x40009E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		public bool isDirty;

		[Token(Token = "0x40009E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Beautify _beautify;

		[Token(Token = "0x40009E4")]
		public const string SKW_BLOOM = "BEAUTIFY_BLOOM";

		[Token(Token = "0x40009E5")]
		public const string SKW_LUT = "BEAUTIFY_LUT";

		[Token(Token = "0x40009E6")]
		public const string SKW_NIGHT_VISION = "BEAUTIFY_NIGHT_VISION";

		[Token(Token = "0x40009E7")]
		public const string SKW_THERMAL_VISION = "BEAUTIFY_THERMAL_VISION";

		[Token(Token = "0x40009E8")]
		public const string SKW_OUTLINE = "BEAUTIFY_OUTLINE";

		[Token(Token = "0x40009E9")]
		public const string SKW_FRAME = "BEAUTIFY_FRAME";

		[Token(Token = "0x40009EA")]
		public const string SKW_FRAME_MASK = "BEAUTIFY_FRAME_MASK";

		[Token(Token = "0x40009EB")]
		public const string SKW_DALTONIZE = "BEAUTIFY_DALTONIZE";

		[Token(Token = "0x40009EC")]
		public const string SKW_DIRT = "BEAUTIFY_DIRT";

		[Token(Token = "0x40009ED")]
		public const string SKW_VIGNETTING = "BEAUTIFY_VIGNETTING";

		[Token(Token = "0x40009EE")]
		public const string SKW_VIGNETTING_MASK = "BEAUTIFY_VIGNETTING_MASK";

		[Token(Token = "0x40009EF")]
		public const string SKW_DEPTH_OF_FIELD = "BEAUTIFY_DEPTH_OF_FIELD";

		[Token(Token = "0x40009F0")]
		public const string SKW_DEPTH_OF_FIELD_TRANSPARENT = "BEAUTIFY_DEPTH_OF_FIELD_TRANSPARENT";

		[Token(Token = "0x40009F1")]
		public const string SKW_EYE_ADAPTATION = "BEAUTIFY_EYE_ADAPTATION";

		[Token(Token = "0x40009F2")]
		public const string SKW_TONEMAP_ACES = "BEAUTIFY_TONEMAP_ACES";

		[Token(Token = "0x40009F3")]
		public const string SKW_PURKINJE = "BEAUTIFY_PURKINJE";

		[Token(Token = "0x40009F4")]
		public const string SKW_BLOOM_USE_DEPTH = "BEAUTIFY_BLOOM_USE_DEPTH";

		[Token(Token = "0x40009F5")]
		public const string SKW_BLOOM_USE_LAYER = "BEAUTIFY_BLOOM_USE_LAYER";

		[Token(Token = "0x40009F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		private Material bMatDesktop;

		[Token(Token = "0x40009F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		private Material bMatMobile;

		[Token(Token = "0x40009F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
		private Material bMatBasic;

		[Token(Token = "0x40009F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		[SerializeField]
		private Material bMat;

		[Token(Token = "0x40009FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
		private Camera currentCamera;

		[Token(Token = "0x40009FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
		private Vector3 camPrevForward;

		[Token(Token = "0x40009FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x334")]
		private Vector3 camPrevPos;

		[Token(Token = "0x40009FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
		private float currSens;

		[Token(Token = "0x40009FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x344")]
		private int renderPass;

		[Token(Token = "0x40009FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
		private RenderTextureFormat rtFormat;

		[Token(Token = "0x4000A00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
		private RenderTexture[] rt;

		[Token(Token = "0x4000A01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
		private RenderTexture[] rtAF;

		[Token(Token = "0x4000A02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x360")]
		private RenderTexture[] rtEA;

		[Token(Token = "0x4000A03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x368")]
		private RenderTexture rtEAacum;

		[Token(Token = "0x4000A04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x370")]
		private RenderTexture rtEAHist;

		[Token(Token = "0x4000A05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x378")]
		private float dofPrevDistance;

		[Token(Token = "0x4000A06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x37C")]
		private float dofLastAutofocusDistance;

		[Token(Token = "0x4000A07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x380")]
		private Vector4 dofLastBokehData;

		[Token(Token = "0x4000A08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x390")]
		private Camera sceneCamera;

		[Token(Token = "0x4000A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x398")]
		private Camera depthCam;

		[Token(Token = "0x4000A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A0")]
		private GameObject depthCamObj;

		[Token(Token = "0x4000A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A8")]
		private List<string> shaderKeywords;

		[Token(Token = "0x4000A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B0")]
		private Shader depthShader;

		[Token(Token = "0x4000A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3B8")]
		private Shader dofExclusionShader;

		[Token(Token = "0x4000A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C0")]
		private bool shouldUpdateMaterialProperties;

		[Token(Token = "0x4000A0F")]
		private const string BEAUTIFY_BUILD_HINT = "BeautifyBuildHint731RC1";

		[Token(Token = "0x4000A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C4")]
		private float sunFlareCurrentIntensity;

		[Token(Token = "0x4000A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C8")]
		private Vector4 sunLastScrPos;

		[Token(Token = "0x4000A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3D8")]
		private float sunLastRot;

		[Token(Token = "0x4000A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E0")]
		private Texture2D flareNoise;

		[Token(Token = "0x4000A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3E8")]
		private RenderTexture dofDepthTexture;

		[Token(Token = "0x4000A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F0")]
		private RenderTexture dofExclusionTexture;

		[Token(Token = "0x4000A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3F8")]
		private RenderTexture bloomSourceTexture;

		[Token(Token = "0x4000A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x400")]
		private RenderTexture bloomSourceDepthTexture;

		[Token(Token = "0x4000A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x408")]
		private RenderTexture bloomSourceTextureRightEye;

		[Token(Token = "0x4000A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x410")]
		private RenderTexture bloomSourceDepthTextureRightEye;

		[Token(Token = "0x4000A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x418")]
		private RenderTexture pixelateTexture;

		[Token(Token = "0x4000A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x420")]
		private RenderTextureDescriptor rtDescBase;

		[Token(Token = "0x4000A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x454")]
		private float sunFlareTime;

		[Token(Token = "0x4000A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x458")]
		private int dofCurrentLayerMaskValue;

		[Token(Token = "0x4000A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45C")]
		private int bloomCurrentLayerMaskValue;

		[Token(Token = "0x4000A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x460")]
		private int eyeWidth;

		[Token(Token = "0x4000A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x464")]
		private int eyeHeight;

		[Token(Token = "0x1700007F")]
		public BEAUTIFY_PRESET preset
		{
			[Token(Token = "0x6000B3F")]
			[Address(RVA = "0xC93570", Offset = "0xC93570", VA = "0xC93570")]
			get
			{
				return default(BEAUTIFY_PRESET);
			}
			[Token(Token = "0x6000B40")]
			[Address(RVA = "0xC93578", Offset = "0xC93578", VA = "0xC93578")]
			set
			{
			}
		}

		[Token(Token = "0x17000080")]
		public BEAUTIFY_QUALITY quality
		{
			[Token(Token = "0x6000B41")]
			[Address(RVA = "0xC935E8", Offset = "0xC935E8", VA = "0xC935E8")]
			get
			{
				return default(BEAUTIFY_QUALITY);
			}
			[Token(Token = "0x6000B42")]
			[Address(RVA = "0xC935F0", Offset = "0xC935F0", VA = "0xC935F0")]
			set
			{
			}
		}

		[Token(Token = "0x17000081")]
		public BeautifyProfile profile
		{
			[Token(Token = "0x6000B43")]
			[Address(RVA = "0xC936A0", Offset = "0xC936A0", VA = "0xC936A0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B44")]
			[Address(RVA = "0xC936A8", Offset = "0xC936A8", VA = "0xC936A8")]
			set
			{
			}
		}

		[Token(Token = "0x17000082")]
		public bool syncWithProfile
		{
			[Token(Token = "0x6000B45")]
			[Address(RVA = "0xC93764", Offset = "0xC93764", VA = "0xC93764")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B46")]
			[Address(RVA = "0xC9376C", Offset = "0xC9376C", VA = "0xC9376C")]
			set
			{
			}
		}

		[Token(Token = "0x17000083")]
		public bool compareMode
		{
			[Token(Token = "0x6000B47")]
			[Address(RVA = "0xC93778", Offset = "0xC93778", VA = "0xC93778")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B48")]
			[Address(RVA = "0xC93780", Offset = "0xC93780", VA = "0xC93780")]
			set
			{
			}
		}

		[Token(Token = "0x17000084")]
		public float compareLineAngle
		{
			[Token(Token = "0x6000B49")]
			[Address(RVA = "0xC937C4", Offset = "0xC937C4", VA = "0xC937C4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B4A")]
			[Address(RVA = "0xC937CC", Offset = "0xC937CC", VA = "0xC937CC")]
			set
			{
			}
		}

		[Token(Token = "0x17000085")]
		public float compareLineWidth
		{
			[Token(Token = "0x6000B4B")]
			[Address(RVA = "0xC9380C", Offset = "0xC9380C", VA = "0xC9380C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B4C")]
			[Address(RVA = "0xC93814", Offset = "0xC93814", VA = "0xC93814")]
			set
			{
			}
		}

		[Token(Token = "0x17000086")]
		public float dither
		{
			[Token(Token = "0x6000B4D")]
			[Address(RVA = "0xC93854", Offset = "0xC93854", VA = "0xC93854")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B4E")]
			[Address(RVA = "0xC9385C", Offset = "0xC9385C", VA = "0xC9385C")]
			set
			{
			}
		}

		[Token(Token = "0x17000087")]
		public float ditherDepth
		{
			[Token(Token = "0x6000B4F")]
			[Address(RVA = "0xC938A4", Offset = "0xC938A4", VA = "0xC938A4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B50")]
			[Address(RVA = "0xC938AC", Offset = "0xC938AC", VA = "0xC938AC")]
			set
			{
			}
		}

		[Token(Token = "0x17000088")]
		public float sharpenMinDepth
		{
			[Token(Token = "0x6000B51")]
			[Address(RVA = "0xC938F4", Offset = "0xC938F4", VA = "0xC938F4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B52")]
			[Address(RVA = "0xC938FC", Offset = "0xC938FC", VA = "0xC938FC")]
			set
			{
			}
		}

		[Token(Token = "0x17000089")]
		public float sharpenMaxDepth
		{
			[Token(Token = "0x6000B53")]
			[Address(RVA = "0xC9393C", Offset = "0xC9393C", VA = "0xC9393C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B54")]
			[Address(RVA = "0xC93944", Offset = "0xC93944", VA = "0xC93944")]
			set
			{
			}
		}

		[Token(Token = "0x1700008A")]
		public float sharpenMinMaxDepthFallOff
		{
			[Token(Token = "0x6000B55")]
			[Address(RVA = "0xC93984", Offset = "0xC93984", VA = "0xC93984")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B56")]
			[Address(RVA = "0xC9398C", Offset = "0xC9398C", VA = "0xC9398C")]
			set
			{
			}
		}

		[Token(Token = "0x1700008B")]
		public float sharpen
		{
			[Token(Token = "0x6000B57")]
			[Address(RVA = "0xC939CC", Offset = "0xC939CC", VA = "0xC939CC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B58")]
			[Address(RVA = "0xC939D4", Offset = "0xC939D4", VA = "0xC939D4")]
			set
			{
			}
		}

		[Token(Token = "0x1700008C")]
		public float sharpenDepthThreshold
		{
			[Token(Token = "0x6000B59")]
			[Address(RVA = "0xC93A1C", Offset = "0xC93A1C", VA = "0xC93A1C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B5A")]
			[Address(RVA = "0xC93A24", Offset = "0xC93A24", VA = "0xC93A24")]
			set
			{
			}
		}

		[Token(Token = "0x1700008D")]
		public Color tintColor
		{
			[Token(Token = "0x6000B5B")]
			[Address(RVA = "0xC93A6C", Offset = "0xC93A6C", VA = "0xC93A6C")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000B5C")]
			[Address(RVA = "0xC93A78", Offset = "0xC93A78", VA = "0xC93A78")]
			set
			{
			}
		}

		[Token(Token = "0x1700008E")]
		public float sharpenRelaxation
		{
			[Token(Token = "0x6000B5D")]
			[Address(RVA = "0xC93AF4", Offset = "0xC93AF4", VA = "0xC93AF4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B5E")]
			[Address(RVA = "0xC93AFC", Offset = "0xC93AFC", VA = "0xC93AFC")]
			set
			{
			}
		}

		[Token(Token = "0x1700008F")]
		public float sharpenClamp
		{
			[Token(Token = "0x6000B5F")]
			[Address(RVA = "0xC93B44", Offset = "0xC93B44", VA = "0xC93B44")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B60")]
			[Address(RVA = "0xC93B4C", Offset = "0xC93B4C", VA = "0xC93B4C")]
			set
			{
			}
		}

		[Token(Token = "0x17000090")]
		public float sharpenMotionSensibility
		{
			[Token(Token = "0x6000B61")]
			[Address(RVA = "0xC93B94", Offset = "0xC93B94", VA = "0xC93B94")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B62")]
			[Address(RVA = "0xC93B9C", Offset = "0xC93B9C", VA = "0xC93B9C")]
			set
			{
			}
		}

		[Token(Token = "0x17000091")]
		public float saturate
		{
			[Token(Token = "0x6000B63")]
			[Address(RVA = "0xC93BDC", Offset = "0xC93BDC", VA = "0xC93BDC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B64")]
			[Address(RVA = "0xC93BE4", Offset = "0xC93BE4", VA = "0xC93BE4")]
			set
			{
			}
		}

		[Token(Token = "0x17000092")]
		public float contrast
		{
			[Token(Token = "0x6000B65")]
			[Address(RVA = "0xC93C2C", Offset = "0xC93C2C", VA = "0xC93C2C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B66")]
			[Address(RVA = "0xC93C34", Offset = "0xC93C34", VA = "0xC93C34")]
			set
			{
			}
		}

		[Token(Token = "0x17000093")]
		public float brightness
		{
			[Token(Token = "0x6000B67")]
			[Address(RVA = "0xC93C7C", Offset = "0xC93C7C", VA = "0xC93C7C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B68")]
			[Address(RVA = "0xC93C84", Offset = "0xC93C84", VA = "0xC93C84")]
			set
			{
			}
		}

		[Token(Token = "0x17000094")]
		public float daltonize
		{
			[Token(Token = "0x6000B69")]
			[Address(RVA = "0xC93CCC", Offset = "0xC93CCC", VA = "0xC93CCC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B6A")]
			[Address(RVA = "0xC93CD4", Offset = "0xC93CD4", VA = "0xC93CD4")]
			set
			{
			}
		}

		[Token(Token = "0x17000095")]
		public bool vignetting
		{
			[Token(Token = "0x6000B6B")]
			[Address(RVA = "0xC93D1C", Offset = "0xC93D1C", VA = "0xC93D1C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B6C")]
			[Address(RVA = "0xC93D24", Offset = "0xC93D24", VA = "0xC93D24")]
			set
			{
			}
		}

		[Token(Token = "0x17000096")]
		public Color vignettingColor
		{
			[Token(Token = "0x6000B6D")]
			[Address(RVA = "0xC93D68", Offset = "0xC93D68", VA = "0xC93D68")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000B6E")]
			[Address(RVA = "0xC93D74", Offset = "0xC93D74", VA = "0xC93D74")]
			set
			{
			}
		}

		[Token(Token = "0x17000097")]
		public float vignettingFade
		{
			[Token(Token = "0x6000B6F")]
			[Address(RVA = "0xC93DF0", Offset = "0xC93DF0", VA = "0xC93DF0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B70")]
			[Address(RVA = "0xC93DF8", Offset = "0xC93DF8", VA = "0xC93DF8")]
			set
			{
			}
		}

		[Token(Token = "0x17000098")]
		public bool vignettingCircularShape
		{
			[Token(Token = "0x6000B71")]
			[Address(RVA = "0xC93E38", Offset = "0xC93E38", VA = "0xC93E38")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B72")]
			[Address(RVA = "0xC93E40", Offset = "0xC93E40", VA = "0xC93E40")]
			set
			{
			}
		}

		[Token(Token = "0x17000099")]
		public float vignettingAspectRatio
		{
			[Token(Token = "0x6000B73")]
			[Address(RVA = "0xC93E84", Offset = "0xC93E84", VA = "0xC93E84")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B74")]
			[Address(RVA = "0xC93E8C", Offset = "0xC93E8C", VA = "0xC93E8C")]
			set
			{
			}
		}

		[Token(Token = "0x1700009A")]
		public float vignettingBlink
		{
			[Token(Token = "0x6000B75")]
			[Address(RVA = "0xC93ECC", Offset = "0xC93ECC", VA = "0xC93ECC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B76")]
			[Address(RVA = "0xC93ED4", Offset = "0xC93ED4", VA = "0xC93ED4")]
			set
			{
			}
		}

		[Token(Token = "0x1700009B")]
		public Texture2D vignettingMask
		{
			[Token(Token = "0x6000B77")]
			[Address(RVA = "0xC93F14", Offset = "0xC93F14", VA = "0xC93F14")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B78")]
			[Address(RVA = "0xC93F1C", Offset = "0xC93F1C", VA = "0xC93F1C")]
			set
			{
			}
		}

		[Token(Token = "0x1700009C")]
		public bool frame
		{
			[Token(Token = "0x6000B79")]
			[Address(RVA = "0xC93FBC", Offset = "0xC93FBC", VA = "0xC93FBC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B7A")]
			[Address(RVA = "0xC93FC4", Offset = "0xC93FC4", VA = "0xC93FC4")]
			set
			{
			}
		}

		[Token(Token = "0x1700009D")]
		public Color frameColor
		{
			[Token(Token = "0x6000B7B")]
			[Address(RVA = "0xC94008", Offset = "0xC94008", VA = "0xC94008")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000B7C")]
			[Address(RVA = "0xC94014", Offset = "0xC94014", VA = "0xC94014")]
			set
			{
			}
		}

		[Token(Token = "0x1700009E")]
		public Texture2D frameMask
		{
			[Token(Token = "0x6000B7D")]
			[Address(RVA = "0xC94090", Offset = "0xC94090", VA = "0xC94090")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B7E")]
			[Address(RVA = "0xC94098", Offset = "0xC94098", VA = "0xC94098")]
			set
			{
			}
		}

		[Token(Token = "0x1700009F")]
		public bool lut
		{
			[Token(Token = "0x6000B7F")]
			[Address(RVA = "0xC94138", Offset = "0xC94138", VA = "0xC94138")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B80")]
			[Address(RVA = "0xC94140", Offset = "0xC94140", VA = "0xC94140")]
			set
			{
			}
		}

		[Token(Token = "0x170000A0")]
		public float lutIntensity
		{
			[Token(Token = "0x6000B81")]
			[Address(RVA = "0xC94190", Offset = "0xC94190", VA = "0xC94190")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B82")]
			[Address(RVA = "0xC94198", Offset = "0xC94198", VA = "0xC94198")]
			set
			{
			}
		}

		[Token(Token = "0x170000A1")]
		public Texture2D lutTexture
		{
			[Token(Token = "0x6000B83")]
			[Address(RVA = "0xC941D8", Offset = "0xC941D8", VA = "0xC941D8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B84")]
			[Address(RVA = "0xC941E0", Offset = "0xC941E0", VA = "0xC941E0")]
			set
			{
			}
		}

		[Token(Token = "0x170000A2")]
		public bool nightVision
		{
			[Token(Token = "0x6000B85")]
			[Address(RVA = "0xC94280", Offset = "0xC94280", VA = "0xC94280")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B86")]
			[Address(RVA = "0xC94288", Offset = "0xC94288", VA = "0xC94288")]
			set
			{
			}
		}

		[Token(Token = "0x170000A3")]
		public Color nightVisionColor
		{
			[Token(Token = "0x6000B87")]
			[Address(RVA = "0xC942FC", Offset = "0xC942FC", VA = "0xC942FC")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000B88")]
			[Address(RVA = "0xC94308", Offset = "0xC94308", VA = "0xC94308")]
			set
			{
			}
		}

		[Token(Token = "0x170000A4")]
		public bool outline
		{
			[Token(Token = "0x6000B89")]
			[Address(RVA = "0xC94384", Offset = "0xC94384", VA = "0xC94384")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B8A")]
			[Address(RVA = "0xC9438C", Offset = "0xC9438C", VA = "0xC9438C")]
			set
			{
			}
		}

		[Token(Token = "0x170000A5")]
		public Color outlineColor
		{
			[Token(Token = "0x6000B8B")]
			[Address(RVA = "0xC943D0", Offset = "0xC943D0", VA = "0xC943D0")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000B8C")]
			[Address(RVA = "0xC943DC", Offset = "0xC943DC", VA = "0xC943DC")]
			set
			{
			}
		}

		[Token(Token = "0x170000A6")]
		public bool thermalVision
		{
			[Token(Token = "0x6000B8D")]
			[Address(RVA = "0xC94458", Offset = "0xC94458", VA = "0xC94458")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B8E")]
			[Address(RVA = "0xC94460", Offset = "0xC94460", VA = "0xC94460")]
			set
			{
			}
		}

		[Token(Token = "0x170000A7")]
		public bool lensDirt
		{
			[Token(Token = "0x6000B8F")]
			[Address(RVA = "0xC944D4", Offset = "0xC944D4", VA = "0xC944D4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B90")]
			[Address(RVA = "0xC944DC", Offset = "0xC944DC", VA = "0xC944DC")]
			set
			{
			}
		}

		[Token(Token = "0x170000A8")]
		public float lensDirtThreshold
		{
			[Token(Token = "0x6000B91")]
			[Address(RVA = "0xC94520", Offset = "0xC94520", VA = "0xC94520")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B92")]
			[Address(RVA = "0xC94528", Offset = "0xC94528", VA = "0xC94528")]
			set
			{
			}
		}

		[Token(Token = "0x170000A9")]
		public float lensDirtIntensity
		{
			[Token(Token = "0x6000B93")]
			[Address(RVA = "0xC94568", Offset = "0xC94568", VA = "0xC94568")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B94")]
			[Address(RVA = "0xC94570", Offset = "0xC94570", VA = "0xC94570")]
			set
			{
			}
		}

		[Token(Token = "0x170000AA")]
		public Texture2D lensDirtTexture
		{
			[Token(Token = "0x6000B95")]
			[Address(RVA = "0xC945B0", Offset = "0xC945B0", VA = "0xC945B0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000B96")]
			[Address(RVA = "0xC945B8", Offset = "0xC945B8", VA = "0xC945B8")]
			set
			{
			}
		}

		[Token(Token = "0x170000AB")]
		public bool bloom
		{
			[Token(Token = "0x6000B97")]
			[Address(RVA = "0xC94658", Offset = "0xC94658", VA = "0xC94658")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000B98")]
			[Address(RVA = "0xC94660", Offset = "0xC94660", VA = "0xC94660")]
			set
			{
			}
		}

		[Token(Token = "0x170000AC")]
		public LayerMask bloomCullingMask
		{
			[Token(Token = "0x6000B99")]
			[Address(RVA = "0xC946A4", Offset = "0xC946A4", VA = "0xC946A4")]
			get
			{
				return default(LayerMask);
			}
			[Token(Token = "0x6000B9A")]
			[Address(RVA = "0xC946AC", Offset = "0xC946AC", VA = "0xC946AC")]
			set
			{
			}
		}

		[Token(Token = "0x170000AD")]
		public float bloomLayerMaskDownsampling
		{
			[Token(Token = "0x6000B9B")]
			[Address(RVA = "0xC94714", Offset = "0xC94714", VA = "0xC94714")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B9C")]
			[Address(RVA = "0xC9471C", Offset = "0xC9471C", VA = "0xC9471C")]
			set
			{
			}
		}

		[Token(Token = "0x170000AE")]
		public float bloomIntensity
		{
			[Token(Token = "0x6000B9D")]
			[Address(RVA = "0xC94764", Offset = "0xC94764", VA = "0xC94764")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000B9E")]
			[Address(RVA = "0xC9476C", Offset = "0xC9476C", VA = "0xC9476C")]
			set
			{
			}
		}

		[Token(Token = "0x170000AF")]
		public float bloomMaxBrightness
		{
			[Token(Token = "0x6000B9F")]
			[Address(RVA = "0xC947B0", Offset = "0xC947B0", VA = "0xC947B0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BA0")]
			[Address(RVA = "0xC947B8", Offset = "0xC947B8", VA = "0xC947B8")]
			set
			{
			}
		}

		[Token(Token = "0x170000B0")]
		public float bloomBoost0
		{
			[Token(Token = "0x6000BA1")]
			[Address(RVA = "0xC947FC", Offset = "0xC947FC", VA = "0xC947FC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BA2")]
			[Address(RVA = "0xC94804", Offset = "0xC94804", VA = "0xC94804")]
			set
			{
			}
		}

		[Token(Token = "0x170000B1")]
		public float bloomBoost1
		{
			[Token(Token = "0x6000BA3")]
			[Address(RVA = "0xC94844", Offset = "0xC94844", VA = "0xC94844")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BA4")]
			[Address(RVA = "0xC9484C", Offset = "0xC9484C", VA = "0xC9484C")]
			set
			{
			}
		}

		[Token(Token = "0x170000B2")]
		public float bloomBoost2
		{
			[Token(Token = "0x6000BA5")]
			[Address(RVA = "0xC9488C", Offset = "0xC9488C", VA = "0xC9488C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BA6")]
			[Address(RVA = "0xC94894", Offset = "0xC94894", VA = "0xC94894")]
			set
			{
			}
		}

		[Token(Token = "0x170000B3")]
		public float bloomBoost3
		{
			[Token(Token = "0x6000BA7")]
			[Address(RVA = "0xC948D4", Offset = "0xC948D4", VA = "0xC948D4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BA8")]
			[Address(RVA = "0xC948DC", Offset = "0xC948DC", VA = "0xC948DC")]
			set
			{
			}
		}

		[Token(Token = "0x170000B4")]
		public float bloomBoost4
		{
			[Token(Token = "0x6000BA9")]
			[Address(RVA = "0xC9491C", Offset = "0xC9491C", VA = "0xC9491C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BAA")]
			[Address(RVA = "0xC94924", Offset = "0xC94924", VA = "0xC94924")]
			set
			{
			}
		}

		[Token(Token = "0x170000B5")]
		public float bloomBoost5
		{
			[Token(Token = "0x6000BAB")]
			[Address(RVA = "0xC94964", Offset = "0xC94964", VA = "0xC94964")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BAC")]
			[Address(RVA = "0xC9496C", Offset = "0xC9496C", VA = "0xC9496C")]
			set
			{
			}
		}

		[Token(Token = "0x170000B6")]
		public bool bloomAntiflicker
		{
			[Token(Token = "0x6000BAD")]
			[Address(RVA = "0xC949AC", Offset = "0xC949AC", VA = "0xC949AC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BAE")]
			[Address(RVA = "0xC949B4", Offset = "0xC949B4", VA = "0xC949B4")]
			set
			{
			}
		}

		[Token(Token = "0x170000B7")]
		public bool bloomUltra
		{
			[Token(Token = "0x6000BAF")]
			[Address(RVA = "0xC949F8", Offset = "0xC949F8", VA = "0xC949F8")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BB0")]
			[Address(RVA = "0xC94A00", Offset = "0xC94A00", VA = "0xC94A00")]
			set
			{
			}
		}

		[Token(Token = "0x170000B8")]
		public int bloomUltraResolution
		{
			[Token(Token = "0x6000BB1")]
			[Address(RVA = "0xC94A44", Offset = "0xC94A44", VA = "0xC94A44")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000BB2")]
			[Address(RVA = "0xC94A4C", Offset = "0xC94A4C", VA = "0xC94A4C")]
			set
			{
			}
		}

		[Token(Token = "0x170000B9")]
		public float bloomThreshold
		{
			[Token(Token = "0x6000BB3")]
			[Address(RVA = "0xC94A8C", Offset = "0xC94A8C", VA = "0xC94A8C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BB4")]
			[Address(RVA = "0xC94A94", Offset = "0xC94A94", VA = "0xC94A94")]
			set
			{
			}
		}

		[Token(Token = "0x170000BA")]
		public bool bloomCustomize
		{
			[Token(Token = "0x6000BB5")]
			[Address(RVA = "0xC94AD4", Offset = "0xC94AD4", VA = "0xC94AD4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BB6")]
			[Address(RVA = "0xC94ADC", Offset = "0xC94ADC", VA = "0xC94ADC")]
			set
			{
			}
		}

		[Token(Token = "0x170000BB")]
		public bool bloomDebug
		{
			[Token(Token = "0x6000BB7")]
			[Address(RVA = "0xC94B20", Offset = "0xC94B20", VA = "0xC94B20")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BB8")]
			[Address(RVA = "0xC94B28", Offset = "0xC94B28", VA = "0xC94B28")]
			set
			{
			}
		}

		[Token(Token = "0x170000BC")]
		public float bloomWeight0
		{
			[Token(Token = "0x6000BB9")]
			[Address(RVA = "0xC94B6C", Offset = "0xC94B6C", VA = "0xC94B6C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BBA")]
			[Address(RVA = "0xC94B74", Offset = "0xC94B74", VA = "0xC94B74")]
			set
			{
			}
		}

		[Token(Token = "0x170000BD")]
		public float bloomWeight1
		{
			[Token(Token = "0x6000BBB")]
			[Address(RVA = "0xC94BB4", Offset = "0xC94BB4", VA = "0xC94BB4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BBC")]
			[Address(RVA = "0xC94BBC", Offset = "0xC94BBC", VA = "0xC94BBC")]
			set
			{
			}
		}

		[Token(Token = "0x170000BE")]
		public float bloomWeight2
		{
			[Token(Token = "0x6000BBD")]
			[Address(RVA = "0xC94BFC", Offset = "0xC94BFC", VA = "0xC94BFC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BBE")]
			[Address(RVA = "0xC94C04", Offset = "0xC94C04", VA = "0xC94C04")]
			set
			{
			}
		}

		[Token(Token = "0x170000BF")]
		public float bloomWeight3
		{
			[Token(Token = "0x6000BBF")]
			[Address(RVA = "0xC94C44", Offset = "0xC94C44", VA = "0xC94C44")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BC0")]
			[Address(RVA = "0xC94C4C", Offset = "0xC94C4C", VA = "0xC94C4C")]
			set
			{
			}
		}

		[Token(Token = "0x170000C0")]
		public float bloomWeight4
		{
			[Token(Token = "0x6000BC1")]
			[Address(RVA = "0xC94C8C", Offset = "0xC94C8C", VA = "0xC94C8C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BC2")]
			[Address(RVA = "0xC94C94", Offset = "0xC94C94", VA = "0xC94C94")]
			set
			{
			}
		}

		[Token(Token = "0x170000C1")]
		public float bloomWeight5
		{
			[Token(Token = "0x6000BC3")]
			[Address(RVA = "0xC94CD4", Offset = "0xC94CD4", VA = "0xC94CD4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BC4")]
			[Address(RVA = "0xC94CDC", Offset = "0xC94CDC", VA = "0xC94CDC")]
			set
			{
			}
		}

		[Token(Token = "0x170000C2")]
		public bool bloomBlur
		{
			[Token(Token = "0x6000BC5")]
			[Address(RVA = "0xC94D1C", Offset = "0xC94D1C", VA = "0xC94D1C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BC6")]
			[Address(RVA = "0xC94D24", Offset = "0xC94D24", VA = "0xC94D24")]
			set
			{
			}
		}

		[Token(Token = "0x170000C3")]
		public bool bloomQuickerBlur
		{
			[Token(Token = "0x6000BC7")]
			[Address(RVA = "0xC94D68", Offset = "0xC94D68", VA = "0xC94D68")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BC8")]
			[Address(RVA = "0xC94D70", Offset = "0xC94D70", VA = "0xC94D70")]
			set
			{
			}
		}

		[Token(Token = "0x170000C4")]
		public float bloomDepthAtten
		{
			[Token(Token = "0x6000BC9")]
			[Address(RVA = "0xC94DB4", Offset = "0xC94DB4", VA = "0xC94DB4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BCA")]
			[Address(RVA = "0xC94DBC", Offset = "0xC94DBC", VA = "0xC94DBC")]
			set
			{
			}
		}

		[Token(Token = "0x170000C5")]
		public float bloomLayerZBias
		{
			[Token(Token = "0x6000BCB")]
			[Address(RVA = "0xC94DFC", Offset = "0xC94DFC", VA = "0xC94DFC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BCC")]
			[Address(RVA = "0xC94E04", Offset = "0xC94E04", VA = "0xC94E04")]
			set
			{
			}
		}

		[Token(Token = "0x170000C6")]
		public BEAUTIFY_PRERENDER_EVENT preRenderCameraEvent
		{
			[Token(Token = "0x6000BCD")]
			[Address(RVA = "0xC94E58", Offset = "0xC94E58", VA = "0xC94E58")]
			get
			{
				return default(BEAUTIFY_PRERENDER_EVENT);
			}
			[Token(Token = "0x6000BCE")]
			[Address(RVA = "0xC94E60", Offset = "0xC94E60", VA = "0xC94E60")]
			set
			{
			}
		}

		[Token(Token = "0x170000C7")]
		public bool anamorphicFlares
		{
			[Token(Token = "0x6000BCF")]
			[Address(RVA = "0xC94E74", Offset = "0xC94E74", VA = "0xC94E74")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BD0")]
			[Address(RVA = "0xC94E7C", Offset = "0xC94E7C", VA = "0xC94E7C")]
			set
			{
			}
		}

		[Token(Token = "0x170000C8")]
		public float anamorphicFlaresIntensity
		{
			[Token(Token = "0x6000BD1")]
			[Address(RVA = "0xC94EC0", Offset = "0xC94EC0", VA = "0xC94EC0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BD2")]
			[Address(RVA = "0xC94EC8", Offset = "0xC94EC8", VA = "0xC94EC8")]
			set
			{
			}
		}

		[Token(Token = "0x170000C9")]
		public bool anamorphicFlaresAntiflicker
		{
			[Token(Token = "0x6000BD3")]
			[Address(RVA = "0xC94F0C", Offset = "0xC94F0C", VA = "0xC94F0C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BD4")]
			[Address(RVA = "0xC94F14", Offset = "0xC94F14", VA = "0xC94F14")]
			set
			{
			}
		}

		[Token(Token = "0x170000CA")]
		public bool anamorphicFlaresUltra
		{
			[Token(Token = "0x6000BD5")]
			[Address(RVA = "0xC94F58", Offset = "0xC94F58", VA = "0xC94F58")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BD6")]
			[Address(RVA = "0xC94F60", Offset = "0xC94F60", VA = "0xC94F60")]
			set
			{
			}
		}

		[Token(Token = "0x170000CB")]
		public int anamorphicUltraResolution
		{
			[Token(Token = "0x6000BD7")]
			[Address(RVA = "0xC94FA4", Offset = "0xC94FA4", VA = "0xC94FA4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000BD8")]
			[Address(RVA = "0xC94FAC", Offset = "0xC94FAC", VA = "0xC94FAC")]
			set
			{
			}
		}

		[Token(Token = "0x170000CC")]
		public float anamorphicFlaresThreshold
		{
			[Token(Token = "0x6000BD9")]
			[Address(RVA = "0xC94FEC", Offset = "0xC94FEC", VA = "0xC94FEC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BDA")]
			[Address(RVA = "0xC94FF4", Offset = "0xC94FF4", VA = "0xC94FF4")]
			set
			{
			}
		}

		[Token(Token = "0x170000CD")]
		public float anamorphicFlaresSpread
		{
			[Token(Token = "0x6000BDB")]
			[Address(RVA = "0xC95034", Offset = "0xC95034", VA = "0xC95034")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BDC")]
			[Address(RVA = "0xC9503C", Offset = "0xC9503C", VA = "0xC9503C")]
			set
			{
			}
		}

		[Token(Token = "0x170000CE")]
		public bool anamorphicFlaresVertical
		{
			[Token(Token = "0x6000BDD")]
			[Address(RVA = "0xC9507C", Offset = "0xC9507C", VA = "0xC9507C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BDE")]
			[Address(RVA = "0xC95084", Offset = "0xC95084", VA = "0xC95084")]
			set
			{
			}
		}

		[Token(Token = "0x170000CF")]
		public Color anamorphicFlaresTint
		{
			[Token(Token = "0x6000BDF")]
			[Address(RVA = "0xC950C8", Offset = "0xC950C8", VA = "0xC950C8")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000BE0")]
			[Address(RVA = "0xC950DC", Offset = "0xC950DC", VA = "0xC950DC")]
			set
			{
			}
		}

		[Token(Token = "0x170000D0")]
		public bool anamorphicFlaresBlur
		{
			[Token(Token = "0x6000BE1")]
			[Address(RVA = "0xC95168", Offset = "0xC95168", VA = "0xC95168")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BE2")]
			[Address(RVA = "0xC95170", Offset = "0xC95170", VA = "0xC95170")]
			set
			{
			}
		}

		[Token(Token = "0x170000D1")]
		public bool depthOfField
		{
			[Token(Token = "0x6000BE3")]
			[Address(RVA = "0xC951B4", Offset = "0xC951B4", VA = "0xC951B4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BE4")]
			[Address(RVA = "0xC951BC", Offset = "0xC951BC", VA = "0xC951BC")]
			set
			{
			}
		}

		[Token(Token = "0x170000D2")]
		public bool depthOfFieldTransparencySupport
		{
			[Token(Token = "0x6000BE5")]
			[Address(RVA = "0xC95200", Offset = "0xC95200", VA = "0xC95200")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BE6")]
			[Address(RVA = "0xC95208", Offset = "0xC95208", VA = "0xC95208")]
			set
			{
			}
		}

		[Token(Token = "0x170000D3")]
		public LayerMask depthOfFieldTransparencyLayerMask
		{
			[Token(Token = "0x6000BE7")]
			[Address(RVA = "0xC9524C", Offset = "0xC9524C", VA = "0xC9524C")]
			get
			{
				return default(LayerMask);
			}
			[Token(Token = "0x6000BE8")]
			[Address(RVA = "0xC95254", Offset = "0xC95254", VA = "0xC95254")]
			set
			{
			}
		}

		[Token(Token = "0x170000D4")]
		public Transform depthOfFieldTargetFocus
		{
			[Token(Token = "0x6000BE9")]
			[Address(RVA = "0xC952BC", Offset = "0xC952BC", VA = "0xC952BC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000BEA")]
			[Address(RVA = "0xC952C4", Offset = "0xC952C4", VA = "0xC952C4")]
			set
			{
			}
		}

		[Token(Token = "0x170000D5")]
		public bool depthOfFieldDebug
		{
			[Token(Token = "0x6000BEB")]
			[Address(RVA = "0xC95364", Offset = "0xC95364", VA = "0xC95364")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BEC")]
			[Address(RVA = "0xC9536C", Offset = "0xC9536C", VA = "0xC9536C")]
			set
			{
			}
		}

		[Token(Token = "0x170000D6")]
		public bool depthOfFieldAutofocus
		{
			[Token(Token = "0x6000BED")]
			[Address(RVA = "0xC953B0", Offset = "0xC953B0", VA = "0xC953B0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000BEE")]
			[Address(RVA = "0xC953B8", Offset = "0xC953B8", VA = "0xC953B8")]
			set
			{
			}
		}

		[Token(Token = "0x170000D7")]
		public Vector2 depthofFieldAutofocusViewportPoint
		{
			[Token(Token = "0x6000BEF")]
			[Address(RVA = "0xC953FC", Offset = "0xC953FC", VA = "0xC953FC")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6000BF0")]
			[Address(RVA = "0xC95408", Offset = "0xC95408", VA = "0xC95408")]
			set
			{
			}
		}

		[Token(Token = "0x170000D8")]
		public float depthOfFieldAutofocusMinDistance
		{
			[Token(Token = "0x6000BF1")]
			[Address(RVA = "0xC9546C", Offset = "0xC9546C", VA = "0xC9546C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BF2")]
			[Address(RVA = "0xC95474", Offset = "0xC95474", VA = "0xC95474")]
			set
			{
			}
		}

		[Token(Token = "0x170000D9")]
		public float depthOfFieldAutofocusMaxDistance
		{
			[Token(Token = "0x6000BF3")]
			[Address(RVA = "0xC954B4", Offset = "0xC954B4", VA = "0xC954B4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BF4")]
			[Address(RVA = "0xC954BC", Offset = "0xC954BC", VA = "0xC954BC")]
			set
			{
			}
		}

		[Token(Token = "0x170000DA")]
		public LayerMask depthOfFieldAutofocusLayerMask
		{
			[Token(Token = "0x6000BF5")]
			[Address(RVA = "0xC954FC", Offset = "0xC954FC", VA = "0xC954FC")]
			get
			{
				return default(LayerMask);
			}
			[Token(Token = "0x6000BF6")]
			[Address(RVA = "0xC95504", Offset = "0xC95504", VA = "0xC95504")]
			set
			{
			}
		}

		[Token(Token = "0x170000DB")]
		public LayerMask depthOfFieldExclusionLayerMask
		{
			[Token(Token = "0x6000BF7")]
			[Address(RVA = "0xC9556C", Offset = "0xC9556C", VA = "0xC9556C")]
			get
			{
				return default(LayerMask);
			}
			[Token(Token = "0x6000BF8")]
			[Address(RVA = "0xC95574", Offset = "0xC95574", VA = "0xC95574")]
			set
			{
			}
		}

		[Token(Token = "0x170000DC")]
		public float depthOfFieldExclusionLayerMaskDownsampling
		{
			[Token(Token = "0x6000BF9")]
			[Address(RVA = "0xC955DC", Offset = "0xC955DC", VA = "0xC955DC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BFA")]
			[Address(RVA = "0xC955E4", Offset = "0xC955E4", VA = "0xC955E4")]
			set
			{
			}
		}

		[Token(Token = "0x170000DD")]
		public float depthOfFieldTransparencySupportDownsampling
		{
			[Token(Token = "0x6000BFB")]
			[Address(RVA = "0xC9562C", Offset = "0xC9562C", VA = "0xC9562C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BFC")]
			[Address(RVA = "0xC95634", Offset = "0xC95634", VA = "0xC95634")]
			set
			{
			}
		}

		[Token(Token = "0x170000DE")]
		public float depthOfFieldExclusionBias
		{
			[Token(Token = "0x6000BFD")]
			[Address(RVA = "0xC9567C", Offset = "0xC9567C", VA = "0xC9567C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000BFE")]
			[Address(RVA = "0xC95684", Offset = "0xC95684", VA = "0xC95684")]
			set
			{
			}
		}

		[Token(Token = "0x170000DF")]
		public float depthOfFieldDistance
		{
			[Token(Token = "0x6000BFF")]
			[Address(RVA = "0xC956D8", Offset = "0xC956D8", VA = "0xC956D8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C00")]
			[Address(RVA = "0xC956E0", Offset = "0xC956E0", VA = "0xC956E0")]
			set
			{
			}
		}

		[Token(Token = "0x170000E0")]
		public float depthOfFieldFocusSpeed
		{
			[Token(Token = "0x6000C01")]
			[Address(RVA = "0xC95728", Offset = "0xC95728", VA = "0xC95728")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C02")]
			[Address(RVA = "0xC95730", Offset = "0xC95730", VA = "0xC95730")]
			set
			{
			}
		}

		[Token(Token = "0x170000E1")]
		public int depthOfFieldDownsampling
		{
			[Token(Token = "0x6000C03")]
			[Address(RVA = "0xC95788", Offset = "0xC95788", VA = "0xC95788")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C04")]
			[Address(RVA = "0xC95790", Offset = "0xC95790", VA = "0xC95790")]
			set
			{
			}
		}

		[Token(Token = "0x170000E2")]
		public int depthOfFieldMaxSamples
		{
			[Token(Token = "0x6000C05")]
			[Address(RVA = "0xC957D8", Offset = "0xC957D8", VA = "0xC957D8")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C06")]
			[Address(RVA = "0xC957E0", Offset = "0xC957E0", VA = "0xC957E0")]
			set
			{
			}
		}

		[Token(Token = "0x170000E3")]
		public float depthOfFieldFocalLength
		{
			[Token(Token = "0x6000C07")]
			[Address(RVA = "0xC9582C", Offset = "0xC9582C", VA = "0xC9582C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C08")]
			[Address(RVA = "0xC95834", Offset = "0xC95834", VA = "0xC95834")]
			set
			{
			}
		}

		[Token(Token = "0x170000E4")]
		public float depthOfFieldAperture
		{
			[Token(Token = "0x6000C09")]
			[Address(RVA = "0xC95878", Offset = "0xC95878", VA = "0xC95878")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C0A")]
			[Address(RVA = "0xC95880", Offset = "0xC95880", VA = "0xC95880")]
			set
			{
			}
		}

		[Token(Token = "0x170000E5")]
		public bool depthOfFieldForegroundBlur
		{
			[Token(Token = "0x6000C0B")]
			[Address(RVA = "0xC958C4", Offset = "0xC958C4", VA = "0xC958C4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C0C")]
			[Address(RVA = "0xC958CC", Offset = "0xC958CC", VA = "0xC958CC")]
			set
			{
			}
		}

		[Token(Token = "0x170000E6")]
		public bool depthOfFieldForegroundBlurHQ
		{
			[Token(Token = "0x6000C0D")]
			[Address(RVA = "0xC95910", Offset = "0xC95910", VA = "0xC95910")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C0E")]
			[Address(RVA = "0xC95918", Offset = "0xC95918", VA = "0xC95918")]
			set
			{
			}
		}

		[Token(Token = "0x170000E7")]
		public float depthOfFieldForegroundDistance
		{
			[Token(Token = "0x6000C0F")]
			[Address(RVA = "0xC9595C", Offset = "0xC9595C", VA = "0xC9595C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C10")]
			[Address(RVA = "0xC95964", Offset = "0xC95964", VA = "0xC95964")]
			set
			{
			}
		}

		[Token(Token = "0x170000E8")]
		public bool depthOfFieldBokeh
		{
			[Token(Token = "0x6000C11")]
			[Address(RVA = "0xC959A4", Offset = "0xC959A4", VA = "0xC959A4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C12")]
			[Address(RVA = "0xC959AC", Offset = "0xC959AC", VA = "0xC959AC")]
			set
			{
			}
		}

		[Token(Token = "0x170000E9")]
		public float depthOfFieldBokehThreshold
		{
			[Token(Token = "0x6000C13")]
			[Address(RVA = "0xC959F0", Offset = "0xC959F0", VA = "0xC959F0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C14")]
			[Address(RVA = "0xC959F8", Offset = "0xC959F8", VA = "0xC959F8")]
			set
			{
			}
		}

		[Token(Token = "0x170000EA")]
		public float depthOfFieldBokehIntensity
		{
			[Token(Token = "0x6000C15")]
			[Address(RVA = "0xC95A40", Offset = "0xC95A40", VA = "0xC95A40")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C16")]
			[Address(RVA = "0xC95A48", Offset = "0xC95A48", VA = "0xC95A48")]
			set
			{
			}
		}

		[Token(Token = "0x170000EB")]
		public float depthOfFieldMaxBrightness
		{
			[Token(Token = "0x6000C17")]
			[Address(RVA = "0xC95A90", Offset = "0xC95A90", VA = "0xC95A90")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C18")]
			[Address(RVA = "0xC95A98", Offset = "0xC95A98", VA = "0xC95A98")]
			set
			{
			}
		}

		[Token(Token = "0x170000EC")]
		public float depthOfFieldMaxDistance
		{
			[Token(Token = "0x6000C19")]
			[Address(RVA = "0xC95ADC", Offset = "0xC95ADC", VA = "0xC95ADC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C1A")]
			[Address(RVA = "0xC95AE4", Offset = "0xC95AE4", VA = "0xC95AE4")]
			set
			{
			}
		}

		[Token(Token = "0x170000ED")]
		public FilterMode depthOfFieldFilterMode
		{
			[Token(Token = "0x6000C1B")]
			[Address(RVA = "0xC95B28", Offset = "0xC95B28", VA = "0xC95B28")]
			get
			{
				return default(FilterMode);
			}
			[Token(Token = "0x6000C1C")]
			[Address(RVA = "0xC95B30", Offset = "0xC95B30", VA = "0xC95B30")]
			set
			{
			}
		}

		[Token(Token = "0x170000EE")]
		public bool eyeAdaptation
		{
			[Token(Token = "0x6000C1D")]
			[Address(RVA = "0xC95B70", Offset = "0xC95B70", VA = "0xC95B70")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C1E")]
			[Address(RVA = "0xC95B78", Offset = "0xC95B78", VA = "0xC95B78")]
			set
			{
			}
		}

		[Token(Token = "0x170000EF")]
		public float eyeAdaptationMinExposure
		{
			[Token(Token = "0x6000C1F")]
			[Address(RVA = "0xC95BBC", Offset = "0xC95BBC", VA = "0xC95BBC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C20")]
			[Address(RVA = "0xC95BC4", Offset = "0xC95BC4", VA = "0xC95BC4")]
			set
			{
			}
		}

		[Token(Token = "0x170000F0")]
		public float eyeAdaptationMaxExposure
		{
			[Token(Token = "0x6000C21")]
			[Address(RVA = "0xC95C18", Offset = "0xC95C18", VA = "0xC95C18")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C22")]
			[Address(RVA = "0xC95C20", Offset = "0xC95C20", VA = "0xC95C20")]
			set
			{
			}
		}

		[Token(Token = "0x170000F1")]
		public float eyeAdaptationSpeedToLight
		{
			[Token(Token = "0x6000C23")]
			[Address(RVA = "0xC95C78", Offset = "0xC95C78", VA = "0xC95C78")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C24")]
			[Address(RVA = "0xC95C80", Offset = "0xC95C80", VA = "0xC95C80")]
			set
			{
			}
		}

		[Token(Token = "0x170000F2")]
		public float eyeAdaptationSpeedToDark
		{
			[Token(Token = "0x6000C25")]
			[Address(RVA = "0xC95CD4", Offset = "0xC95CD4", VA = "0xC95CD4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C26")]
			[Address(RVA = "0xC95CDC", Offset = "0xC95CDC", VA = "0xC95CDC")]
			set
			{
			}
		}

		[Token(Token = "0x170000F3")]
		public bool purkinje
		{
			[Token(Token = "0x6000C27")]
			[Address(RVA = "0xC95D30", Offset = "0xC95D30", VA = "0xC95D30")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C28")]
			[Address(RVA = "0xC95D38", Offset = "0xC95D38", VA = "0xC95D38")]
			set
			{
			}
		}

		[Token(Token = "0x170000F4")]
		public float purkinjeAmount
		{
			[Token(Token = "0x6000C29")]
			[Address(RVA = "0xC95D7C", Offset = "0xC95D7C", VA = "0xC95D7C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C2A")]
			[Address(RVA = "0xC95D84", Offset = "0xC95D84", VA = "0xC95D84")]
			set
			{
			}
		}

		[Token(Token = "0x170000F5")]
		public float purkinjeLuminanceThreshold
		{
			[Token(Token = "0x6000C2B")]
			[Address(RVA = "0xC95DD8", Offset = "0xC95DD8", VA = "0xC95DD8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C2C")]
			[Address(RVA = "0xC95DE0", Offset = "0xC95DE0", VA = "0xC95DE0")]
			set
			{
			}
		}

		[Token(Token = "0x170000F6")]
		public BEAUTIFY_TMO tonemap
		{
			[Token(Token = "0x6000C2D")]
			[Address(RVA = "0xC95E34", Offset = "0xC95E34", VA = "0xC95E34")]
			get
			{
				return default(BEAUTIFY_TMO);
			}
			[Token(Token = "0x6000C2E")]
			[Address(RVA = "0xC95E3C", Offset = "0xC95E3C", VA = "0xC95E3C")]
			set
			{
			}
		}

		[Token(Token = "0x170000F7")]
		public bool sunFlares
		{
			[Token(Token = "0x6000C2F")]
			[Address(RVA = "0xC95E90", Offset = "0xC95E90", VA = "0xC95E90")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C30")]
			[Address(RVA = "0xC95E98", Offset = "0xC95E98", VA = "0xC95E98")]
			set
			{
			}
		}

		[Token(Token = "0x170000F8")]
		public Transform sun
		{
			[Token(Token = "0x6000C31")]
			[Address(RVA = "0xC95EDC", Offset = "0xC95EDC", VA = "0xC95EDC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000C32")]
			[Address(RVA = "0xC95EE4", Offset = "0xC95EE4", VA = "0xC95EE4")]
			set
			{
			}
		}

		[Token(Token = "0x170000F9")]
		public LayerMask sunFlaresLayerMask
		{
			[Token(Token = "0x6000C33")]
			[Address(RVA = "0xC95F84", Offset = "0xC95F84", VA = "0xC95F84")]
			get
			{
				return default(LayerMask);
			}
			[Token(Token = "0x6000C34")]
			[Address(RVA = "0xC95F8C", Offset = "0xC95F8C", VA = "0xC95F8C")]
			set
			{
			}
		}

		[Token(Token = "0x170000FA")]
		public float sunFlaresIntensity
		{
			[Token(Token = "0x6000C35")]
			[Address(RVA = "0xC95FF4", Offset = "0xC95FF4", VA = "0xC95FF4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C36")]
			[Address(RVA = "0xC95FFC", Offset = "0xC95FFC", VA = "0xC95FFC")]
			set
			{
			}
		}

		[Token(Token = "0x170000FB")]
		public float sunFlaresSolarWindSpeed
		{
			[Token(Token = "0x6000C37")]
			[Address(RVA = "0xC9603C", Offset = "0xC9603C", VA = "0xC9603C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C38")]
			[Address(RVA = "0xC96044", Offset = "0xC96044", VA = "0xC96044")]
			set
			{
			}
		}

		[Token(Token = "0x170000FC")]
		public Color sunFlaresTint
		{
			[Token(Token = "0x6000C39")]
			[Address(RVA = "0xC96084", Offset = "0xC96084", VA = "0xC96084")]
			get
			{
				return default(Color);
			}
			[Token(Token = "0x6000C3A")]
			[Address(RVA = "0xC96098", Offset = "0xC96098", VA = "0xC96098")]
			set
			{
			}
		}

		[Token(Token = "0x170000FD")]
		public int sunFlaresDownsampling
		{
			[Token(Token = "0x6000C3B")]
			[Address(RVA = "0xC96124", Offset = "0xC96124", VA = "0xC96124")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C3C")]
			[Address(RVA = "0xC9612C", Offset = "0xC9612C", VA = "0xC9612C")]
			set
			{
			}
		}

		[Token(Token = "0x170000FE")]
		public float sunFlaresSunIntensity
		{
			[Token(Token = "0x6000C3D")]
			[Address(RVA = "0xC96174", Offset = "0xC96174", VA = "0xC96174")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C3E")]
			[Address(RVA = "0xC9617C", Offset = "0xC9617C", VA = "0xC9617C")]
			set
			{
			}
		}

		[Token(Token = "0x170000FF")]
		public float sunFlaresSunDiskSize
		{
			[Token(Token = "0x6000C3F")]
			[Address(RVA = "0xC961BC", Offset = "0xC961BC", VA = "0xC961BC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C40")]
			[Address(RVA = "0xC961C4", Offset = "0xC961C4", VA = "0xC961C4")]
			set
			{
			}
		}

		[Token(Token = "0x17000100")]
		public float sunFlaresSunRayDiffractionIntensity
		{
			[Token(Token = "0x6000C41")]
			[Address(RVA = "0xC96204", Offset = "0xC96204", VA = "0xC96204")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C42")]
			[Address(RVA = "0xC9620C", Offset = "0xC9620C", VA = "0xC9620C")]
			set
			{
			}
		}

		[Token(Token = "0x17000101")]
		public float sunFlaresSunRayDiffractionThreshold
		{
			[Token(Token = "0x6000C43")]
			[Address(RVA = "0xC9624C", Offset = "0xC9624C", VA = "0xC9624C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C44")]
			[Address(RVA = "0xC96254", Offset = "0xC96254", VA = "0xC96254")]
			set
			{
			}
		}

		[Token(Token = "0x17000102")]
		public float sunFlaresCoronaRays1Length
		{
			[Token(Token = "0x6000C45")]
			[Address(RVA = "0xC96294", Offset = "0xC96294", VA = "0xC96294")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C46")]
			[Address(RVA = "0xC9629C", Offset = "0xC9629C", VA = "0xC9629C")]
			set
			{
			}
		}

		[Token(Token = "0x17000103")]
		public int sunFlaresCoronaRays1Streaks
		{
			[Token(Token = "0x6000C47")]
			[Address(RVA = "0xC962DC", Offset = "0xC962DC", VA = "0xC962DC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C48")]
			[Address(RVA = "0xC962E4", Offset = "0xC962E4", VA = "0xC962E4")]
			set
			{
			}
		}

		[Token(Token = "0x17000104")]
		public float sunFlaresCoronaRays1Spread
		{
			[Token(Token = "0x6000C49")]
			[Address(RVA = "0xC96324", Offset = "0xC96324", VA = "0xC96324")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C4A")]
			[Address(RVA = "0xC9632C", Offset = "0xC9632C", VA = "0xC9632C")]
			set
			{
			}
		}

		[Token(Token = "0x17000105")]
		public float sunFlaresCoronaRays1AngleOffset
		{
			[Token(Token = "0x6000C4B")]
			[Address(RVA = "0xC9636C", Offset = "0xC9636C", VA = "0xC9636C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C4C")]
			[Address(RVA = "0xC96374", Offset = "0xC96374", VA = "0xC96374")]
			set
			{
			}
		}

		[Token(Token = "0x17000106")]
		public float sunFlaresCoronaRays2Length
		{
			[Token(Token = "0x6000C4D")]
			[Address(RVA = "0xC963B4", Offset = "0xC963B4", VA = "0xC963B4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C4E")]
			[Address(RVA = "0xC963BC", Offset = "0xC963BC", VA = "0xC963BC")]
			set
			{
			}
		}

		[Token(Token = "0x17000107")]
		public int sunFlaresCoronaRays2Streaks
		{
			[Token(Token = "0x6000C4F")]
			[Address(RVA = "0xC963FC", Offset = "0xC963FC", VA = "0xC963FC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C50")]
			[Address(RVA = "0xC96404", Offset = "0xC96404", VA = "0xC96404")]
			set
			{
			}
		}

		[Token(Token = "0x17000108")]
		public float sunFlaresCoronaRays2Spread
		{
			[Token(Token = "0x6000C51")]
			[Address(RVA = "0xC96444", Offset = "0xC96444", VA = "0xC96444")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C52")]
			[Address(RVA = "0xC9644C", Offset = "0xC9644C", VA = "0xC9644C")]
			set
			{
			}
		}

		[Token(Token = "0x17000109")]
		public float sunFlaresCoronaRays2AngleOffset
		{
			[Token(Token = "0x6000C53")]
			[Address(RVA = "0xC9648C", Offset = "0xC9648C", VA = "0xC9648C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C54")]
			[Address(RVA = "0xC96494", Offset = "0xC96494", VA = "0xC96494")]
			set
			{
			}
		}

		[Token(Token = "0x1700010A")]
		public float sunFlaresGhosts1Size
		{
			[Token(Token = "0x6000C55")]
			[Address(RVA = "0xC964D4", Offset = "0xC964D4", VA = "0xC964D4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C56")]
			[Address(RVA = "0xC964DC", Offset = "0xC964DC", VA = "0xC964DC")]
			set
			{
			}
		}

		[Token(Token = "0x1700010B")]
		public float sunFlaresGhosts1Offset
		{
			[Token(Token = "0x6000C57")]
			[Address(RVA = "0xC9651C", Offset = "0xC9651C", VA = "0xC9651C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C58")]
			[Address(RVA = "0xC96524", Offset = "0xC96524", VA = "0xC96524")]
			set
			{
			}
		}

		[Token(Token = "0x1700010C")]
		public float sunFlaresGhosts1Brightness
		{
			[Token(Token = "0x6000C59")]
			[Address(RVA = "0xC96564", Offset = "0xC96564", VA = "0xC96564")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C5A")]
			[Address(RVA = "0xC9656C", Offset = "0xC9656C", VA = "0xC9656C")]
			set
			{
			}
		}

		[Token(Token = "0x1700010D")]
		public float sunFlaresGhosts2Size
		{
			[Token(Token = "0x6000C5B")]
			[Address(RVA = "0xC965AC", Offset = "0xC965AC", VA = "0xC965AC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C5C")]
			[Address(RVA = "0xC965B4", Offset = "0xC965B4", VA = "0xC965B4")]
			set
			{
			}
		}

		[Token(Token = "0x1700010E")]
		public float sunFlaresGhosts2Offset
		{
			[Token(Token = "0x6000C5D")]
			[Address(RVA = "0xC965F4", Offset = "0xC965F4", VA = "0xC965F4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C5E")]
			[Address(RVA = "0xC965FC", Offset = "0xC965FC", VA = "0xC965FC")]
			set
			{
			}
		}

		[Token(Token = "0x1700010F")]
		public float sunFlaresGhosts2Brightness
		{
			[Token(Token = "0x6000C5F")]
			[Address(RVA = "0xC9663C", Offset = "0xC9663C", VA = "0xC9663C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C60")]
			[Address(RVA = "0xC96644", Offset = "0xC96644", VA = "0xC96644")]
			set
			{
			}
		}

		[Token(Token = "0x17000110")]
		public float sunFlaresGhosts3Size
		{
			[Token(Token = "0x6000C61")]
			[Address(RVA = "0xC96684", Offset = "0xC96684", VA = "0xC96684")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C62")]
			[Address(RVA = "0xC9668C", Offset = "0xC9668C", VA = "0xC9668C")]
			set
			{
			}
		}

		[Token(Token = "0x17000111")]
		public float sunFlaresGhosts3Brightness
		{
			[Token(Token = "0x6000C63")]
			[Address(RVA = "0xC966CC", Offset = "0xC966CC", VA = "0xC966CC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C64")]
			[Address(RVA = "0xC966D4", Offset = "0xC966D4", VA = "0xC966D4")]
			set
			{
			}
		}

		[Token(Token = "0x17000112")]
		public float sunFlaresGhosts3Offset
		{
			[Token(Token = "0x6000C65")]
			[Address(RVA = "0xC96714", Offset = "0xC96714", VA = "0xC96714")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C66")]
			[Address(RVA = "0xC9671C", Offset = "0xC9671C", VA = "0xC9671C")]
			set
			{
			}
		}

		[Token(Token = "0x17000113")]
		public float sunFlaresGhosts4Size
		{
			[Token(Token = "0x6000C67")]
			[Address(RVA = "0xC9675C", Offset = "0xC9675C", VA = "0xC9675C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C68")]
			[Address(RVA = "0xC96764", Offset = "0xC96764", VA = "0xC96764")]
			set
			{
			}
		}

		[Token(Token = "0x17000114")]
		public float sunFlaresGhosts4Offset
		{
			[Token(Token = "0x6000C69")]
			[Address(RVA = "0xC967A4", Offset = "0xC967A4", VA = "0xC967A4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C6A")]
			[Address(RVA = "0xC967AC", Offset = "0xC967AC", VA = "0xC967AC")]
			set
			{
			}
		}

		[Token(Token = "0x17000115")]
		public float sunFlaresGhosts4Brightness
		{
			[Token(Token = "0x6000C6B")]
			[Address(RVA = "0xC967EC", Offset = "0xC967EC", VA = "0xC967EC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C6C")]
			[Address(RVA = "0xC967F4", Offset = "0xC967F4", VA = "0xC967F4")]
			set
			{
			}
		}

		[Token(Token = "0x17000116")]
		public float sunFlaresHaloOffset
		{
			[Token(Token = "0x6000C6D")]
			[Address(RVA = "0xC96834", Offset = "0xC96834", VA = "0xC96834")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C6E")]
			[Address(RVA = "0xC9683C", Offset = "0xC9683C", VA = "0xC9683C")]
			set
			{
			}
		}

		[Token(Token = "0x17000117")]
		public float sunFlaresHaloAmplitude
		{
			[Token(Token = "0x6000C6F")]
			[Address(RVA = "0xC9687C", Offset = "0xC9687C", VA = "0xC9687C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C70")]
			[Address(RVA = "0xC96884", Offset = "0xC96884", VA = "0xC96884")]
			set
			{
			}
		}

		[Token(Token = "0x17000118")]
		public float sunFlaresHaloIntensity
		{
			[Token(Token = "0x6000C71")]
			[Address(RVA = "0xC968C4", Offset = "0xC968C4", VA = "0xC968C4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C72")]
			[Address(RVA = "0xC968CC", Offset = "0xC968CC", VA = "0xC968CC")]
			set
			{
			}
		}

		[Token(Token = "0x17000119")]
		public bool sunFlaresRotationDeadZone
		{
			[Token(Token = "0x6000C73")]
			[Address(RVA = "0xC9690C", Offset = "0xC9690C", VA = "0xC9690C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C74")]
			[Address(RVA = "0xC96914", Offset = "0xC96914", VA = "0xC96914")]
			set
			{
			}
		}

		[Token(Token = "0x1700011A")]
		public bool blur
		{
			[Token(Token = "0x6000C75")]
			[Address(RVA = "0xC96958", Offset = "0xC96958", VA = "0xC96958")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C76")]
			[Address(RVA = "0xC96960", Offset = "0xC96960", VA = "0xC96960")]
			set
			{
			}
		}

		[Token(Token = "0x1700011B")]
		public float blurIntensity
		{
			[Token(Token = "0x6000C77")]
			[Address(RVA = "0xC969A4", Offset = "0xC969A4", VA = "0xC969A4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C78")]
			[Address(RVA = "0xC969AC", Offset = "0xC969AC", VA = "0xC969AC")]
			set
			{
			}
		}

		[Token(Token = "0x1700011C")]
		public int downscale
		{
			[Token(Token = "0x6000C79")]
			[Address(RVA = "0xC969EC", Offset = "0xC969EC", VA = "0xC969EC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C7A")]
			[Address(RVA = "0xC969F4", Offset = "0xC969F4", VA = "0xC969F4")]
			set
			{
			}
		}

		[Token(Token = "0x1700011D")]
		public int pixelateAmount
		{
			[Token(Token = "0x6000C7B")]
			[Address(RVA = "0xC96A34", Offset = "0xC96A34", VA = "0xC96A34")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000C7C")]
			[Address(RVA = "0xC96A3C", Offset = "0xC96A3C", VA = "0xC96A3C")]
			set
			{
			}
		}

		[Token(Token = "0x1700011E")]
		public bool pixelateDownscale
		{
			[Token(Token = "0x6000C7D")]
			[Address(RVA = "0xC96A7C", Offset = "0xC96A7C", VA = "0xC96A7C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000C7E")]
			[Address(RVA = "0xC96A84", Offset = "0xC96A84", VA = "0xC96A84")]
			set
			{
			}
		}

		[Token(Token = "0x1700011F")]
		public float antialiasStrength
		{
			[Token(Token = "0x6000C7F")]
			[Address(RVA = "0xC96AC8", Offset = "0xC96AC8", VA = "0xC96AC8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C80")]
			[Address(RVA = "0xC96AD0", Offset = "0xC96AD0", VA = "0xC96AD0")]
			set
			{
			}
		}

		[Token(Token = "0x17000120")]
		public float antialiasDepthThreshold
		{
			[Token(Token = "0x6000C81")]
			[Address(RVA = "0xC96B10", Offset = "0xC96B10", VA = "0xC96B10")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000C82")]
			[Address(RVA = "0xC96B18", Offset = "0xC96B18", VA = "0xC96B18")]
			set
			{
			}
		}

		[Token(Token = "0x17000121")]
		public static Beautify instance
		{
			[Token(Token = "0x6000C83")]
			[Address(RVA = "0xC96B58", Offset = "0xC96B58", VA = "0xC96B58")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000122")]
		public Camera cameraEffect
		{
			[Token(Token = "0x6000C84")]
			[Address(RVA = "0xC96C98", Offset = "0xC96C98", VA = "0xC96C98")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000123")]
		public float depthOfFieldCurrentFocalPointDistance
		{
			[Token(Token = "0x6000CA5")]
			[Address(RVA = "0xC9DB04", Offset = "0xC9DB04", VA = "0xC9DB04")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000C85")]
		[Address(RVA = "0xC96CA0", Offset = "0xC96CA0", VA = "0xC96CA0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000C86")]
		[Address(RVA = "0xC98650", Offset = "0xC98650", VA = "0xC98650")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000C87")]
		[Address(RVA = "0xC98A08", Offset = "0xC98A08", VA = "0xC98A08")]
		private void Reset()
		{
		}

		[Token(Token = "0x6000C88")]
		[Address(RVA = "0xC98A0C", Offset = "0xC98A0C", VA = "0xC98A0C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000C89")]
		[Address(RVA = "0xC98D88", Offset = "0xC98D88", VA = "0xC98D88")]
		private void OnPreCull()
		{
		}

		[Token(Token = "0x6000C8A")]
		[Address(RVA = "0xC98D98", Offset = "0xC98D98", VA = "0xC98D98")]
		private void DoOnPreRenderTasks()
		{
		}

		[Token(Token = "0x6000C8B")]
		[Address(RVA = "0xC99B94", Offset = "0xC99B94", VA = "0xC99B94")]
		private void OnPreRender()
		{
		}

		[Token(Token = "0x6000C8C")]
		[Address(RVA = "0xC98840", Offset = "0xC98840", VA = "0xC98840")]
		private void CleanUpRT()
		{
		}

		[Token(Token = "0x6000C8D")]
		[Address(RVA = "0xC98F1C", Offset = "0xC98F1C", VA = "0xC98F1C")]
		private void CheckDoFTransparencySupport()
		{
		}

		[Token(Token = "0x6000C8E")]
		[Address(RVA = "0xC992F0", Offset = "0xC992F0", VA = "0xC992F0")]
		private void CheckDoFExclusionMask()
		{
		}

		[Token(Token = "0x6000C8F")]
		[Address(RVA = "0xC996B0", Offset = "0xC996B0", VA = "0xC996B0")]
		private void CheckBloomCullingLayer()
		{
		}

		[Token(Token = "0x6000C90")]
		[Address(RVA = "0xC9A038", Offset = "0xC9A038", VA = "0xC9A038")]
		private void RenderLeftEyeDepth()
		{
		}

		[Token(Token = "0x6000C91")]
		[Address(RVA = "0xC9A1DC", Offset = "0xC9A1DC", VA = "0xC9A1DC")]
		private void RenderRightEyeDepth()
		{
		}

		[Token(Token = "0x6000C92")]
		[Address(RVA = "0xC9A380", Offset = "0xC9A380", VA = "0xC9A380", Slot = "4")]
		protected virtual void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6000C93")]
		[Address(RVA = "0xC9D780", Offset = "0xC9D780", VA = "0xC9D780")]
		private void OnPostRender()
		{
		}

		[Token(Token = "0x6000C94")]
		[Address(RVA = "0xC9D2C0", Offset = "0xC9D2C0", VA = "0xC9D2C0")]
		private void BlurThis(RenderTexture rt, float blurScale = 1f)
		{
		}

		[Token(Token = "0x6000C95")]
		[Address(RVA = "0xC9D3FC", Offset = "0xC9D3FC", VA = "0xC9D3FC")]
		private void BlurThisDownscaling(RenderTexture rt, RenderTexture downscaled, float blurScale = 1f)
		{
		}

		[Token(Token = "0x6000C96")]
		[Address(RVA = "0xC9D654", Offset = "0xC9D654", VA = "0xC9D654")]
		private RenderTexture BlurThisOneDirection(RenderTexture rt, bool vertical, float blurScale = 1f)
		{
			return null;
		}

		[Token(Token = "0x6000C97")]
		[Address(RVA = "0xC9D044", Offset = "0xC9D044", VA = "0xC9D044")]
		private void BlurThisDoF(RenderTexture rt, int renderPass)
		{
		}

		[Token(Token = "0x6000C98")]
		[Address(RVA = "0xC9CF08", Offset = "0xC9CF08", VA = "0xC9CF08")]
		private void BlurThisAlpha(RenderTexture rt, float blurScale = 1f)
		{
		}

		[Token(Token = "0x6000C99")]
		[Address(RVA = "0xC9D964", Offset = "0xC9D964", VA = "0xC9D964")]
		private void OnDidApplyAnimationProperties()
		{
		}

		[Token(Token = "0x6000C9A")]
		[Address(RVA = "0xC93668", Offset = "0xC93668", VA = "0xC93668")]
		public void UpdateQualitySettings()
		{
		}

		[Token(Token = "0x6000C9B")]
		[Address(RVA = "0xC935B8", Offset = "0xC935B8", VA = "0xC935B8")]
		public void UpdateMaterialProperties()
		{
		}

		[Token(Token = "0x6000C9C")]
		[Address(RVA = "0xC96DAC", Offset = "0xC96DAC", VA = "0xC96DAC")]
		public void UpdateMaterialPropertiesNow()
		{
		}

		[Token(Token = "0x6000C9D")]
		[Address(RVA = "0xC9D220", Offset = "0xC9D220", VA = "0xC9D220")]
		private void UpdateMaterialBloomIntensityAndThreshold()
		{
		}

		[Token(Token = "0x6000C9E")]
		[Address(RVA = "0xC9D5BC", Offset = "0xC9D5BC", VA = "0xC9D5BC")]
		private void UpdateMaterialAnamorphicIntensityAndThreshold()
		{
		}

		[Token(Token = "0x6000C9F")]
		[Address(RVA = "0xC98D1C", Offset = "0xC98D1C", VA = "0xC98D1C")]
		private void UpdateSharpenParams(float sharpen)
		{
		}

		[Token(Token = "0x6000CA0")]
		[Address(RVA = "0xC9CBE0", Offset = "0xC9CBE0", VA = "0xC9CBE0")]
		private void UpdateDepthOfFieldData()
		{
		}

		[Token(Token = "0x6000CA1")]
		[Address(RVA = "0xC9D8D8", Offset = "0xC9D8D8", VA = "0xC9D8D8")]
		private void UpdateDepthOfFieldBlurData(Vector2 blurDir)
		{
		}

		[Token(Token = "0x6000CA2")]
		[Address(RVA = "0xC9D970", Offset = "0xC9D970", VA = "0xC9D970")]
		private void UpdateDoFAutofocusDistance()
		{
		}

		[Token(Token = "0x6000CA3")]
		[Address(RVA = "0xC9DA58", Offset = "0xC9DA58", VA = "0xC9DA58")]
		public void Blink(float duration, float maxValue = 1f)
		{
		}

		[Token(Token = "0x6000CA4")]
		[Address(RVA = "0xC9DA84", Offset = "0xC9DA84", VA = "0xC9DA84")]
		[IteratorStateMachine(typeof(<DoBlink>d__747))]
		private IEnumerator DoBlink(float duration, float maxValue)
		{
			return null;
		}

		[Token(Token = "0x6000CA6")]
		[Address(RVA = "0xC9DB0C", Offset = "0xC9DB0C", VA = "0xC9DB0C")]
		public Beautify()
		{
		}
	}
	[Token(Token = "0x200017E")]
	[CreateAssetMenu(fileName = "BeautifyProfile", menuName = "Beautify Profile", order = 101)]
	public class BeautifyProfile : ScriptableObject
	{
		[Token(Token = "0x4000A29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 0.2f)]
		public float dither;

		[Token(Token = "0x4000A2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0f, 1f)]
		public float ditherDepth;

		[Token(Token = "0x4000A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float sharpenMinDepth;

		[Token(Token = "0x4000A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 1.1f)]
		public float sharpenMaxDepth;

		[Token(Token = "0x4000A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 15f)]
		public float sharpen;

		[Token(Token = "0x4000A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0f, 1f)]
		public float sharpenMinMaxDepthFallOff;

		[Token(Token = "0x4000A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 0.05f)]
		public float sharpenDepthThreshold;

		[Token(Token = "0x4000A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Color tintColor;

		[Token(Token = "0x4000A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Range(0f, 0.2f)]
		public float sharpenRelaxation;

		[Token(Token = "0x4000A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 1f)]
		public float sharpenClamp;

		[Token(Token = "0x4000A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Range(0f, 1f)]
		public float sharpenMotionSensibility;

		[Token(Token = "0x4000A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Range(0f, 20f)]
		public float antialiasStrength;

		[Token(Token = "0x4000A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Range(0f, 0.05f)]
		public float antialiasDepthThreshold;

		[Token(Token = "0x4000A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Range(1f, 8f)]
		public int downscale;

		[Token(Token = "0x4000A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Range(-2f, 3f)]
		public float saturate;

		[Token(Token = "0x4000A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Range(0.5f, 1.5f)]
		public float contrast;

		[Token(Token = "0x4000A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Range(0f, 2f)]
		public float brightness;

		[Token(Token = "0x4000A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Range(0f, 2f)]
		public float daltonize;

		[Token(Token = "0x4000A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public bool vignetting;

		[Token(Token = "0x4000A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Color vignettingColor;

		[Token(Token = "0x4000A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float vignettingFade;

		[Token(Token = "0x4000A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public bool vignettingCircularShape;

		[Token(Token = "0x4000A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float vignettingAspectRatio;

		[Token(Token = "0x4000A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Range(0f, 1f)]
		public float vignettingBlink;

		[Token(Token = "0x4000A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Texture2D vignettingMask;

		[Token(Token = "0x4000A42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool frame;

		[Token(Token = "0x4000A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public Color frameColor;

		[Token(Token = "0x4000A44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Texture2D frameMask;

		[Token(Token = "0x4000A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public bool lut;

		[Token(Token = "0x4000A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[Range(0f, 1f)]
		public float lutIntensity;

		[Token(Token = "0x4000A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Texture2D lutTexture;

		[Token(Token = "0x4000A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public bool nightVision;

		[Token(Token = "0x4000A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public Color nightVisionColor;

		[Token(Token = "0x4000A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public bool outline;

		[Token(Token = "0x4000A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Color outlineColor;

		[Token(Token = "0x4000A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public bool thermalVision;

		[Token(Token = "0x4000A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF1")]
		public bool lensDirt;

		[Token(Token = "0x4000A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[Range(0f, 1f)]
		public float lensDirtThreshold;

		[Token(Token = "0x4000A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Range(0f, 1f)]
		public float lensDirtIntensity;

		[Token(Token = "0x4000A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Texture2D lensDirtTexture;

		[Token(Token = "0x4000A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public bool bloom;

		[Token(Token = "0x4000A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public LayerMask bloomCullingMask;

		[Token(Token = "0x4000A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Range(1f, 4f)]
		public float bloomLayerMaskDownsampling;

		[Token(Token = "0x4000A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		[Range(0f, 10f)]
		public float bloomIntensity;

		[Token(Token = "0x4000A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public float bloomMaxBrightness;

		[Token(Token = "0x4000A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[Range(0f, 3f)]
		public float bloomBoost0;

		[Token(Token = "0x4000A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[Range(0f, 3f)]
		public float bloomBoost1;

		[Token(Token = "0x4000A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		[Range(0f, 3f)]
		public float bloomBoost2;

		[Token(Token = "0x4000A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[Range(0f, 3f)]
		public float bloomBoost3;

		[Token(Token = "0x4000A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		[Range(0f, 3f)]
		public float bloomBoost4;

		[Token(Token = "0x4000A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[Range(0f, 3f)]
		public float bloomBoost5;

		[Token(Token = "0x4000A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		public bool bloomAntiflicker;

		[Token(Token = "0x4000A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x135")]
		public bool bloomUltra;

		[Token(Token = "0x4000A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		[Range(1f, 10f)]
		public int bloomUltraResolution;

		[Token(Token = "0x4000A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		[Range(0f, 5f)]
		public float bloomThreshold;

		[Token(Token = "0x4000A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public bool bloomCustomize;

		[Token(Token = "0x4000A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		[Range(0f, 1f)]
		public float bloomWeight0;

		[Token(Token = "0x4000A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[Range(0f, 1f)]
		public float bloomWeight1;

		[Token(Token = "0x4000A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		[Range(0f, 1f)]
		public float bloomWeight2;

		[Token(Token = "0x4000A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		[Range(0f, 1f)]
		public float bloomWeight3;

		[Token(Token = "0x4000A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		[Range(0f, 1f)]
		public float bloomWeight4;

		[Token(Token = "0x4000A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[Range(0f, 1f)]
		public float bloomWeight5;

		[Token(Token = "0x4000A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		public bool bloomBlur;

		[Token(Token = "0x4000A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[Range(0f, 1f)]
		public float bloomDepthAtten;

		[Token(Token = "0x4000A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		[Range(-1f, 1f)]
		public float bloomLayerZBias;

		[Token(Token = "0x4000A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public bool anamorphicFlares;

		[Token(Token = "0x4000A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		[Range(0f, 10f)]
		public float anamorphicFlaresIntensity;

		[Token(Token = "0x4000A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public bool anamorphicFlaresAntiflicker;

		[Token(Token = "0x4000A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x171")]
		public bool anamorphicFlaresUltra;

		[Token(Token = "0x4000A6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		[Range(1f, 10f)]
		public int anamorphicFlaresUltraResolution;

		[Token(Token = "0x4000A6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		[Range(0f, 5f)]
		public float anamorphicFlaresThreshold;

		[Token(Token = "0x4000A70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		[Range(0.1f, 2f)]
		public float anamorphicFlaresSpread;

		[Token(Token = "0x4000A71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public bool anamorphicFlaresVertical;

		[Token(Token = "0x4000A72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		public Color anamorphicFlaresTint;

		[Token(Token = "0x4000A73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x194")]
		public bool anamorphicFlaresBlur;

		[Token(Token = "0x4000A74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x195")]
		public bool depthOfField;

		[Token(Token = "0x4000A75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x196")]
		public bool depthOfFieldTransparencySupport;

		[Token(Token = "0x4000A76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public Transform depthOfFieldTargetFocus;

		[Token(Token = "0x4000A77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public bool depthOfFieldAutofocus;

		[Token(Token = "0x4000A78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		public Vector2 depthofFieldAutofocusViewportPoint;

		[Token(Token = "0x4000A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1AC")]
		public LayerMask depthOfFieldAutofocusLayerMask;

		[Token(Token = "0x4000A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public float depthOfFieldAutofocusMinDistance;

		[Token(Token = "0x4000A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		public float depthOfFieldAutofocusMaxDistance;

		[Token(Token = "0x4000A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public LayerMask depthOfFieldExclusionLayerMask;

		[Token(Token = "0x4000A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		[Range(1f, 4f)]
		public float depthOfFieldExclusionLayerMaskDownsampling;

		[Token(Token = "0x4000A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		[Range(1f, 4f)]
		public float depthOfFieldTransparencySupportDownsampling;

		[Token(Token = "0x4000A7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		[Range(0.9f, 1f)]
		public float depthOfFieldExclusionBias;

		[Token(Token = "0x4000A80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		[Range(1f, 100f)]
		public float depthOfFieldDistance;

		[Token(Token = "0x4000A81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		[Range(0.001f, 1f)]
		public float depthOfFieldFocusSpeed;

		[Token(Token = "0x4000A82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		[Range(1f, 5f)]
		public int depthOfFieldDownsampling;

		[Token(Token = "0x4000A83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		[Range(2f, 16f)]
		public int depthOfFieldMaxSamples;

		[Token(Token = "0x4000A84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		[Range(0.005f, 0.5f)]
		public float depthOfFieldFocalLength;

		[Token(Token = "0x4000A85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		public float depthOfFieldAperture;

		[Token(Token = "0x4000A86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public bool depthOfFieldForegroundBlur;

		[Token(Token = "0x4000A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E1")]
		public bool depthOfFieldForegroundBlurHQ;

		[Token(Token = "0x4000A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E4")]
		public float depthOfFieldForegroundDistance;

		[Token(Token = "0x4000A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public bool depthOfFieldBokeh;

		[Token(Token = "0x4000A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1EC")]
		[Range(0.5f, 3f)]
		public float depthOfFieldBokehThreshold;

		[Token(Token = "0x4000A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		[Range(0f, 8f)]
		public float depthOfFieldBokehIntensity;

		[Token(Token = "0x4000A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
		public float depthOfFieldMaxBrightness;

		[Token(Token = "0x4000A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		public float depthOfFieldMaxDistance;

		[Token(Token = "0x4000A8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		public FilterMode depthOfFieldFilterMode;

		[Token(Token = "0x4000A8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public LayerMask depthOfFieldTransparencyLayerMask;

		[Token(Token = "0x4000A90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		public bool eyeAdaptation;

		[Token(Token = "0x4000A91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		[Range(0f, 1f)]
		public float eyeAdaptationMinExposure;

		[Token(Token = "0x4000A92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
		[Range(1f, 100f)]
		public float eyeAdaptationMaxExposure;

		[Token(Token = "0x4000A93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		[Range(0f, 1f)]
		public float eyeAdaptationSpeedToLight;

		[Token(Token = "0x4000A94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
		[Range(0f, 1f)]
		public float eyeAdaptationSpeedToDark;

		[Token(Token = "0x4000A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		public bool purkinje;

		[Token(Token = "0x4000A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21C")]
		[Range(0f, 5f)]
		public float purkinjeAmount;

		[Token(Token = "0x4000A97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		[Range(0f, 1f)]
		public float purkinjeLuminanceThreshold;

		[Token(Token = "0x4000A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
		public BEAUTIFY_TMO tonemap;

		[Token(Token = "0x4000A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		public bool sunFlares;

		[Token(Token = "0x4000A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22C")]
		[Range(0f, 1f)]
		public float sunFlaresIntensity;

		[Token(Token = "0x4000A9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		[Range(0f, 1f)]
		public float sunFlaresSolarWindSpeed;

		[Token(Token = "0x4000A9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x234")]
		public Color sunFlaresTint;

		[Token(Token = "0x4000A9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x244")]
		[Range(1f, 5f)]
		public int sunFlaresDownsampling;

		[Token(Token = "0x4000A9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		[Range(0f, 1f)]
		public float sunFlaresSunIntensity;

		[Token(Token = "0x4000A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24C")]
		[Range(0f, 1f)]
		public float sunFlaresSunDiskSize;

		[Token(Token = "0x4000AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		[Range(0f, 10f)]
		public float sunFlaresSunRayDiffractionIntensity;

		[Token(Token = "0x4000AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x254")]
		[Range(0f, 1f)]
		public float sunFlaresSunRayDiffractionThreshold;

		[Token(Token = "0x4000AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		[Range(0f, 0.2f)]
		public float sunFlaresCoronaRays1Length;

		[Token(Token = "0x4000AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x25C")]
		[Range(2f, 30f)]
		public int sunFlaresCoronaRays1Streaks;

		[Token(Token = "0x4000AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		[Range(0f, 0.1f)]
		public float sunFlaresCoronaRays1Spread;

		[Token(Token = "0x4000AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x264")]
		[Range(0f, (float)Math.PI * 2f)]
		public float sunFlaresCoronaRays1AngleOffset;

		[Token(Token = "0x4000AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		[Range(0f, 0.2f)]
		public float sunFlaresCoronaRays2Length;

		[Token(Token = "0x4000AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x26C")]
		[Range(2f, 30f)]
		public int sunFlaresCoronaRays2Streaks;

		[Token(Token = "0x4000AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		[Range(0f, 0.1f)]
		public float sunFlaresCoronaRays2Spread;

		[Token(Token = "0x4000AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x274")]
		[Range(0f, (float)Math.PI * 2f)]
		public float sunFlaresCoronaRays2AngleOffset;

		[Token(Token = "0x4000AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		[Range(0f, 1f)]
		public float sunFlaresGhosts1Size;

		[Token(Token = "0x4000AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x27C")]
		[Range(-3f, 3f)]
		public float sunFlaresGhosts1Offset;

		[Token(Token = "0x4000AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		[Range(0f, 1f)]
		public float sunFlaresGhosts1Brightness;

		[Token(Token = "0x4000AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x284")]
		[Range(0f, 1f)]
		public float sunFlaresGhosts2Size;

		[Token(Token = "0x4000AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		[Range(-3f, 3f)]
		public float sunFlaresGhosts2Offset;

		[Token(Token = "0x4000AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28C")]
		[Range(0f, 1f)]
		public float sunFlaresGhosts2Brightness;

		[Token(Token = "0x4000AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		[Range(0f, 1f)]
		public float sunFlaresGhosts3Size;

		[Token(Token = "0x4000AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x294")]
		[Range(-3f, 3f)]
		public float sunFlaresGhosts3Brightness;

		[Token(Token = "0x4000AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		[Range(0f, 1f)]
		public float sunFlaresGhosts3Offset;

		[Token(Token = "0x4000AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29C")]
		[Range(0f, 1f)]
		public float sunFlaresGhosts4Size;

		[Token(Token = "0x4000AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		[Range(-3f, 3f)]
		public float sunFlaresGhosts4Offset;

		[Token(Token = "0x4000AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A4")]
		[Range(0f, 1f)]
		public float sunFlaresGhosts4Brightness;

		[Token(Token = "0x4000AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		[Range(0f, 1f)]
		public float sunFlaresHaloOffset;

		[Token(Token = "0x4000AB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2AC")]
		[Range(0f, 50f)]
		public float sunFlaresHaloAmplitude;

		[Token(Token = "0x4000AB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		[Range(0f, 1f)]
		public float sunFlaresHaloIntensity;

		[Token(Token = "0x4000AB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B4")]
		public bool sunFlaresRotationDeadZone;

		[Token(Token = "0x4000ABA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B5")]
		public bool blur;

		[Token(Token = "0x4000ABB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		[Range(0f, 4f)]
		public float blurIntensity;

		[Token(Token = "0x4000ABC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2BC")]
		public int pixelateAmount;

		[Token(Token = "0x4000ABD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		public bool pixelateDownscale;

		[Token(Token = "0x6000CAD")]
		[Address(RVA = "0xC9EFD4", Offset = "0xC9EFD4", VA = "0xC9EFD4")]
		public void Load(Beautify b)
		{
		}

		[Token(Token = "0x6000CAE")]
		[Address(RVA = "0xC9F974", Offset = "0xC9F974", VA = "0xC9F974")]
		public void Save(Beautify b)
		{
		}

		[Token(Token = "0x6000CAF")]
		[Address(RVA = "0xC9FCC8", Offset = "0xC9FCC8", VA = "0xC9FCC8")]
		public BeautifyProfile()
		{
		}
	}
}
namespace VRUiKits.Utils
{
	[Token(Token = "0x200017F")]
	public class TextMeshProConverter : MonoBehaviour
	{
		[Token(Token = "0x6000CB0")]
		[Address(RVA = "0xC9FF74", Offset = "0xC9FF74", VA = "0xC9FF74")]
		public static int CheckTextsTotalNumber()
		{
			return default(int);
		}

		[Token(Token = "0x6000CB1")]
		[Address(RVA = "0xCA0070", Offset = "0xCA0070", VA = "0xCA0070")]
		public static void ConvertAllTexts(bool allowTMPControlRectSize, TMP_FontAsset fontAsset)
		{
		}

		[Token(Token = "0x6000CB2")]
		[Address(RVA = "0xCA06E0", Offset = "0xCA06E0", VA = "0xCA06E0")]
		public static void ConvertSelectedTexts(UnityEngine.Object[] selected, bool allowTMPControlRectSize, TMP_FontAsset fontAsset)
		{
		}

		[Token(Token = "0x6000CB3")]
		[Address(RVA = "0xCA0210", Offset = "0xCA0210", VA = "0xCA0210")]
		private static void ConvertTextToTMP(Text[] foundedTexts, bool allowTMPControlRectSize, TMP_FontAsset fontAsset)
		{
		}

		[Token(Token = "0x6000CB4")]
		[Address(RVA = "0xCA0A58", Offset = "0xCA0A58", VA = "0xCA0A58")]
		public static void UpdateAllTmp(TMP_FontAsset fontAsset)
		{
		}

		[Token(Token = "0x6000CB5")]
		[Address(RVA = "0xCA0C24", Offset = "0xCA0C24", VA = "0xCA0C24")]
		public static void UpdateSelectedTmp(UnityEngine.Object[] selected, TMP_FontAsset fontAsset, bool includeInactive)
		{
		}

		[Token(Token = "0x6000CB6")]
		[Address(RVA = "0xCA0A14", Offset = "0xCA0A14", VA = "0xCA0A14")]
		private static FontStyles ConvertFontStyle(FontStyle style)
		{
			return default(FontStyles);
		}

		[Token(Token = "0x6000CB7")]
		[Address(RVA = "0xCA0A38", Offset = "0xCA0A38", VA = "0xCA0A38")]
		private static TextAlignmentOptions ConvertTextAlignment(TextAnchor anchor)
		{
			return default(TextAlignmentOptions);
		}

		[Token(Token = "0x6000CB8")]
		[Address(RVA = "0xCA0E0C", Offset = "0xCA0E0C", VA = "0xCA0E0C")]
		public TextMeshProConverter()
		{
		}
	}
	[Token(Token = "0x2000180")]
	public class ImageHoverOutline : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
	{
		[Token(Token = "0x4000ABE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Image targetImage;

		[Token(Token = "0x4000ABF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color outlineColor;

		[Token(Token = "0x4000AC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float outlineWidth;

		[Token(Token = "0x4000AC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Outline outline;

		[Token(Token = "0x17000126")]
		private Outline _Outline
		{
			[Token(Token = "0x6000CB9")]
			[Address(RVA = "0xCA0E14", Offset = "0xCA0E14", VA = "0xCA0E14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CBA")]
		[Address(RVA = "0xCA0F90", Offset = "0xCA0F90", VA = "0xCA0F90", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000CBB")]
		[Address(RVA = "0xCA1028", Offset = "0xCA1028", VA = "0xCA1028", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000CBC")]
		[Address(RVA = "0xCA10C0", Offset = "0xCA10C0", VA = "0xCA10C0")]
		public ImageHoverOutline()
		{
		}
	}
	[Token(Token = "0x2000181")]
	public class TextHoverScale : MonoBehaviour, IPointerEnterHandler, IEventSystemHandler, IPointerExitHandler
	{
		[Token(Token = "0x4000AC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Text targetText;

		[Token(Token = "0x4000AC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float scale;

		[Token(Token = "0x4000AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int originSize;

		[Token(Token = "0x17000127")]
		private Text TargetText
		{
			[Token(Token = "0x6000CBD")]
			[Address(RVA = "0xCA10DC", Offset = "0xCA10DC", VA = "0xCA10DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CBE")]
		[Address(RVA = "0xCA11AC", Offset = "0xCA11AC", VA = "0xCA11AC", Slot = "4")]
		public void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000CBF")]
		[Address(RVA = "0xCA131C", Offset = "0xCA131C", VA = "0xCA131C", Slot = "5")]
		public void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000CC0")]
		[Address(RVA = "0xCA13B4", Offset = "0xCA13B4", VA = "0xCA13B4")]
		public TextHoverScale()
		{
		}
	}
	[Token(Token = "0x2000182")]
	public class GazeInputModule : UIKitInputModule
	{
		[Token(Token = "0x4000AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool previewWithoutHeadset;

		[Token(Token = "0x4000AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		public bool preventRepeatClick;

		[Token(Token = "0x4000AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public RaycastResult currentRaycast;

		[Token(Token = "0x4000AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static GazeInputModule Instance;

		[Token(Token = "0x4000AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private PointerEventData pointerEventData;

		[Token(Token = "0x4000ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private PointerEventData lastPressedEventData;

		[Token(Token = "0x4000ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private GameObject currentTarget;

		[Token(Token = "0x4000ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private float currentClickTime;

		[Token(Token = "0x6000CC1")]
		[Address(RVA = "0xCA13C8", Offset = "0xCA13C8", VA = "0xCA13C8")]
		protected GazeInputModule()
		{
		}

		[Token(Token = "0x6000CC2")]
		[Address(RVA = "0xCA1440", Offset = "0xCA1440", VA = "0xCA1440", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x6000CC3")]
		[Address(RVA = "0xCA1458", Offset = "0xCA1458", VA = "0xCA1458")]
		private void GazeControl()
		{
		}

		[Token(Token = "0x6000CC4")]
		[Address(RVA = "0xCA163C", Offset = "0xCA163C", VA = "0xCA163C")]
		private void HandleSelection()
		{
		}

		[Token(Token = "0x6000CC5")]
		[Address(RVA = "0xCA191C", Offset = "0xCA191C", VA = "0xCA191C")]
		private void ReleaseLastPress()
		{
		}

		[Token(Token = "0x6000CC6")]
		[Address(RVA = "0xCA19E4", Offset = "0xCA19E4", VA = "0xCA19E4", Slot = "23")]
		public override void ActivateModule()
		{
		}

		[Token(Token = "0x6000CC7")]
		[Address(RVA = "0xCA1A98", Offset = "0xCA1A98", VA = "0xCA1A98", Slot = "22")]
		public override void DeactivateModule()
		{
		}

		[Token(Token = "0x6000CC8")]
		[Address(RVA = "0xCA1AB4", Offset = "0xCA1AB4", VA = "0xCA1AB4")]
		protected void ClearSelection()
		{
		}

		[Token(Token = "0x6000CC9")]
		[Address(RVA = "0xCA1AF0", Offset = "0xCA1AF0", VA = "0xCA1AF0", Slot = "27")]
		protected virtual void ProcessMove(PointerEventData pointerEvent)
		{
		}
	}
	[Token(Token = "0x2000183")]
	[RequireComponent(typeof(VREventSystemHelper))]
	public class LaserInputModule : UIKitInputModule
	{
		[Token(Token = "0x4000ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public VRPlatform platform;

		[Token(Token = "0x4000ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Pointer pointer;

		[Token(Token = "0x4000ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GameObject currentTarget;

		[Token(Token = "0x4000AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float currentClickTime;

		[Token(Token = "0x4000AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static LaserInputModule _instance;

		[Token(Token = "0x4000AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Camera helperCamera;

		[Token(Token = "0x4000AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private UIKitPointer controller;

		[Token(Token = "0x4000AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool triggerPressed;

		[Token(Token = "0x4000AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		private bool triggerPressedLastFrame;

		[Token(Token = "0x4000AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private PointerEventData pointerEventData;

		[Token(Token = "0x4000AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 lastRaycastHitPoint;

		[Token(Token = "0x4000AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private float pressedDistance;

		[Token(Token = "0x17000128")]
		public static LaserInputModule instance
		{
			[Token(Token = "0x6000CCA")]
			[Address(RVA = "0xCA1B38", Offset = "0xCA1B38", VA = "0xCA1B38")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000CCB")]
		[Address(RVA = "0xCA1B80", Offset = "0xCA1B80", VA = "0xCA1B80", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000CCC")]
		[Address(RVA = "0xCA1CD0", Offset = "0xCA1CD0", VA = "0xCA1CD0", Slot = "6")]
		protected override void Start()
		{
		}

		[Token(Token = "0x6000CCD")]
		[Address(RVA = "0xCA1F7C", Offset = "0xCA1F7C", VA = "0xCA1F7C")]
		private void OnSceneLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x6000CCE")]
		[Address(RVA = "0xCA1EA4", Offset = "0xCA1EA4", VA = "0xCA1EA4")]
		private void SetCanvasCamera()
		{
		}

		[Token(Token = "0x6000CCF")]
		[Address(RVA = "0xCA1F78", Offset = "0xCA1F78", VA = "0xCA1F78")]
		private void SetupHmd()
		{
		}

		[Token(Token = "0x6000CD0")]
		[Address(RVA = "0xCA1F80", Offset = "0xCA1F80", VA = "0xCA1F80")]
		public void SetController(UIKitPointer _controller)
		{
		}

		[Token(Token = "0x6000CD1")]
		[Address(RVA = "0xCA1F88", Offset = "0xCA1F88", VA = "0xCA1F88")]
		public void RemoveController(UIKitPointer _controller)
		{
		}

		[Token(Token = "0x6000CD2")]
		[Address(RVA = "0xCA2028", Offset = "0xCA2028", VA = "0xCA2028", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x6000CD3")]
		[Address(RVA = "0xCA20CC", Offset = "0xCA20CC", VA = "0xCA20CC")]
		private void UpdateHelperCamera()
		{
		}

		[Token(Token = "0x6000CD4")]
		[Address(RVA = "0xCA23A8", Offset = "0xCA23A8", VA = "0xCA23A8")]
		private void CheckTriggerStatus()
		{
		}

		[Token(Token = "0x6000CD5")]
		[Address(RVA = "0xCA216C", Offset = "0xCA216C", VA = "0xCA216C")]
		private void ProcessGazePointer()
		{
		}

		[Token(Token = "0x6000CD6")]
		[Address(RVA = "0xCA23FC", Offset = "0xCA23FC", VA = "0xCA23FC")]
		private void ProcessLaserPointer()
		{
		}

		[Token(Token = "0x6000CD7")]
		[Address(RVA = "0xCA2C68", Offset = "0xCA2C68", VA = "0xCA2C68")]
		private void ProcessPress(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000CD8")]
		[Address(RVA = "0xCA2704", Offset = "0xCA2704", VA = "0xCA2704")]
		private PointerEventData GetPointerEventData()
		{
			return null;
		}

		[Token(Token = "0x6000CD9")]
		[Address(RVA = "0xCA3588", Offset = "0xCA3588", VA = "0xCA3588")]
		private bool TriggerReleasedThisFrame()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CDA")]
		[Address(RVA = "0xCA3568", Offset = "0xCA3568", VA = "0xCA3568")]
		private bool TriggerPressedThisFrame()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CDB")]
		[Address(RVA = "0xCA25BC", Offset = "0xCA25BC", VA = "0xCA25BC")]
		private bool SendUpdateEventToSelectedObject()
		{
			return default(bool);
		}

		[Token(Token = "0x6000CDC")]
		[Address(RVA = "0xCA35A8", Offset = "0xCA35A8", VA = "0xCA35A8", Slot = "23")]
		public override void ActivateModule()
		{
		}

		[Token(Token = "0x6000CDD")]
		[Address(RVA = "0xCA365C", Offset = "0xCA365C", VA = "0xCA365C", Slot = "22")]
		public override void DeactivateModule()
		{
		}

		[Token(Token = "0x6000CDE")]
		[Address(RVA = "0xCA3678", Offset = "0xCA3678", VA = "0xCA3678")]
		protected void ClearSelection()
		{
		}

		[Token(Token = "0x6000CDF")]
		[Address(RVA = "0xCA36B4", Offset = "0xCA36B4", VA = "0xCA36B4")]
		private bool ShouldStartDrag(float threshold, bool useDragThreshold)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CE0")]
		[Address(RVA = "0xCA36D0", Offset = "0xCA36D0", VA = "0xCA36D0", Slot = "27")]
		protected virtual void ProcessMove(PointerEventData pointerEvent)
		{
		}

		[Token(Token = "0x6000CE1")]
		[Address(RVA = "0xCA32DC", Offset = "0xCA32DC", VA = "0xCA32DC")]
		private void ProcessDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000CE2")]
		[Address(RVA = "0xCA3718", Offset = "0xCA3718", VA = "0xCA3718")]
		public LaserInputModule()
		{
		}
	}
	[Token(Token = "0x2000184")]
	public enum VRPlatform
	{
		[Token(Token = "0x4000ADA")]
		NONE,
		[Token(Token = "0x4000ADB")]
		OCULUS,
		[Token(Token = "0x4000ADC")]
		VIVE,
		[Token(Token = "0x4000ADD")]
		VIVE_STEAM2
	}
	[Token(Token = "0x2000185")]
	public enum Pointer
	{
		[Token(Token = "0x4000ADF")]
		RightHand,
		[Token(Token = "0x4000AE0")]
		LeftHand,
		[Token(Token = "0x4000AE1")]
		Eye
	}
	[Token(Token = "0x2000186")]
	public class MouseInputModule : StandaloneInputModule
	{
		[Token(Token = "0x6000CE3")]
		[Address(RVA = "0xCA3734", Offset = "0xCA3734", VA = "0xCA3734", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x6000CE4")]
		[Address(RVA = "0xCA378C", Offset = "0xCA378C", VA = "0xCA378C")]
		protected new void ProcessMouseEvent()
		{
		}

		[Token(Token = "0x6000CE5")]
		[Address(RVA = "0xCA3A64", Offset = "0xCA3A64", VA = "0xCA3A64")]
		private static bool UseMouse(bool pressed, bool released, PointerEventData pointerData)
		{
			return default(bool);
		}

		[Token(Token = "0x6000CE6")]
		[Address(RVA = "0xCA3AA8", Offset = "0xCA3AA8", VA = "0xCA3AA8")]
		protected new void ProcessMousePress(MouseButtonEventData data)
		{
		}

		[Token(Token = "0x6000CE7")]
		[Address(RVA = "0xCA40C4", Offset = "0xCA40C4", VA = "0xCA40C4")]
		public MouseInputModule()
		{
		}
	}
	[Token(Token = "0x2000187")]
	public class GazeProgressCircle : MonoBehaviour
	{
		[Token(Token = "0x2000188")]
		[CompilerGenerated]
		private sealed class <FillCircle>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000AE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000AE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000AE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GazeProgressCircle <>4__this;

			[Token(Token = "0x4000AE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <timer>5__2;

			[Token(Token = "0x17000129")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000CF0")]
				[Address(RVA = "0xCA4654", Offset = "0xCA4654", VA = "0xCA4654", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700012A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000CF2")]
				[Address(RVA = "0xCA469C", Offset = "0xCA469C", VA = "0xCA469C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000CED")]
			[Address(RVA = "0xCA44D4", Offset = "0xCA44D4", VA = "0xCA44D4")]
			[DebuggerHidden]
			public <FillCircle>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6000CEE")]
			[Address(RVA = "0xCA4504", Offset = "0xCA4504", VA = "0xCA4504", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000CEF")]
			[Address(RVA = "0xCA4508", Offset = "0xCA4508", VA = "0xCA4508", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000CF1")]
			[Address(RVA = "0xCA465C", Offset = "0xCA465C", VA = "0xCA465C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Image circle;

		[Token(Token = "0x4000AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Coroutine fillCircle;

		[Token(Token = "0x4000AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private UIKitInputModule m_inputModule;

		[Token(Token = "0x6000CE8")]
		[Address(RVA = "0xCA40CC", Offset = "0xCA40CC", VA = "0xCA40CC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CE9")]
		[Address(RVA = "0xCA4304", Offset = "0xCA4304", VA = "0xCA4304")]
		private void HandleProgressCircle(GameObject target)
		{
		}

		[Token(Token = "0x6000CEA")]
		[Address(RVA = "0xCA446C", Offset = "0xCA446C", VA = "0xCA446C")]
		[IteratorStateMachine(typeof(<FillCircle>d__5))]
		private IEnumerator FillCircle()
		{
			return null;
		}

		[Token(Token = "0x6000CEB")]
		[Address(RVA = "0xCA43A4", Offset = "0xCA43A4", VA = "0xCA43A4")]
		private void ResetGazer()
		{
		}

		[Token(Token = "0x6000CEC")]
		[Address(RVA = "0xCA44FC", Offset = "0xCA44FC", VA = "0xCA44FC")]
		public GazeProgressCircle()
		{
		}
	}
	[Token(Token = "0x2000189")]
	public class LaserPointer : MonoBehaviour
	{
		[Token(Token = "0x4000AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private LineRenderer lr;

		[Token(Token = "0x6000CF3")]
		[Address(RVA = "0xCA46A4", Offset = "0xCA46A4", VA = "0xCA46A4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000CF4")]
		[Address(RVA = "0xCA46F4", Offset = "0xCA46F4", VA = "0xCA46F4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000CF5")]
		[Address(RVA = "0xCA48B4", Offset = "0xCA48B4", VA = "0xCA48B4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000CF6")]
		[Address(RVA = "0xCA49C8", Offset = "0xCA49C8", VA = "0xCA49C8")]
		public LaserPointer()
		{
		}
	}
	[Token(Token = "0x200018A")]
	public class UIKitPointer : MonoBehaviour
	{
		[Token(Token = "0x4000AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject gazePointer;

		[Token(Token = "0x4000AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject laser;

		[Token(Token = "0x4000AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Pointer? temp;

		[Token(Token = "0x6000CF7")]
		[Address(RVA = "0xCA49D0", Offset = "0xCA49D0", VA = "0xCA49D0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000CF8")]
		[Address(RVA = "0xCA4AA4", Offset = "0xCA4AA4", VA = "0xCA4AA4")]
		private void Update()
		{
		}

		[Token(Token = "0x6000CF9")]
		[Address(RVA = "0xCA4BD0", Offset = "0xCA4BD0", VA = "0xCA4BD0")]
		private void ResetTransform(Transform trans)
		{
		}

		[Token(Token = "0x6000CFA")]
		[Address(RVA = "0xCA4CB0", Offset = "0xCA4CB0", VA = "0xCA4CB0")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6000CFB")]
		[Address(RVA = "0xCA4D94", Offset = "0xCA4D94", VA = "0xCA4D94")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000CFC")]
		[Address(RVA = "0xCA4E68", Offset = "0xCA4E68", VA = "0xCA4E68")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000CFD")]
		[Address(RVA = "0xCA4F4C", Offset = "0xCA4F4C", VA = "0xCA4F4C")]
		public UIKitPointer()
		{
		}
	}
	[Token(Token = "0x200018B")]
	public class UIKitInputModule : BaseInputModule
	{
		[Token(Token = "0x200018C")]
		public delegate void OnGazeChangedHandler(GameObject target);

		[Token(Token = "0x4000AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		public float gazeTimeInSeconds;

		[Token(Token = "0x4000AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[HideInInspector]
		public float delayTimeInSeconds;

		[Token(Token = "0x14000003")]
		public event OnGazeChangedHandler OnGazeChanged
		{
			[Token(Token = "0x6000CFE")]
			[Address(RVA = "0xCA4268", Offset = "0xCA4268", VA = "0xCA4268")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000CFF")]
			[Address(RVA = "0xCA4F54", Offset = "0xCA4F54", VA = "0xCA4F54")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000D00")]
		[Address(RVA = "0xCA1900", Offset = "0xCA1900", VA = "0xCA1900")]
		protected void RaiseGazeChangeEvent(GameObject target)
		{
		}

		[Token(Token = "0x6000D01")]
		[Address(RVA = "0xCA4FF0", Offset = "0xCA4FF0", VA = "0xCA4FF0", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x6000D02")]
		[Address(RVA = "0xCA142C", Offset = "0xCA142C", VA = "0xCA142C")]
		public UIKitInputModule()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200018D")]
	public class Card
	{
		[Token(Token = "0x4000AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string title;

		[Token(Token = "0x4000AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string subtitle;

		[Token(Token = "0x4000AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string description;

		[Token(Token = "0x4000AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Sprite image;

		[Token(Token = "0x6000D07")]
		[Address(RVA = "0xCA5034", Offset = "0xCA5034", VA = "0xCA5034")]
		public Card()
		{
		}
	}
	[Token(Token = "0x200018E")]
	public class CardItem : MonoBehaviour
	{
		[Token(Token = "0x200018F")]
		public delegate void OnCardClickedHandler(Card card);

		[Token(Token = "0x4000AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform title;

		[Token(Token = "0x4000AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform subtitle;

		[Token(Token = "0x4000AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform description;

		[Token(Token = "0x4000AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Image image;

		[Token(Token = "0x4000AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Card card;

		[Token(Token = "0x1700012B")]
		public TextMeshProUGUI Title
		{
			[Token(Token = "0x6000D0A")]
			[Address(RVA = "0xCA5174", Offset = "0xCA5174", VA = "0xCA5174")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012C")]
		public TextMeshProUGUI Subtitle
		{
			[Token(Token = "0x6000D0B")]
			[Address(RVA = "0xCA5210", Offset = "0xCA5210", VA = "0xCA5210")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012D")]
		public TextMeshProUGUI Description
		{
			[Token(Token = "0x6000D0C")]
			[Address(RVA = "0xCA52AC", Offset = "0xCA52AC", VA = "0xCA52AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700012E")]
		public Card Card
		{
			[Token(Token = "0x6000D0D")]
			[Address(RVA = "0xCA5348", Offset = "0xCA5348", VA = "0xCA5348")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D0E")]
			[Address(RVA = "0xCA5350", Offset = "0xCA5350", VA = "0xCA5350")]
			set
			{
			}
		}

		[Token(Token = "0x14000004")]
		public event OnCardClickedHandler OnCardClicked
		{
			[Token(Token = "0x6000D08")]
			[Address(RVA = "0xCA503C", Offset = "0xCA503C", VA = "0xCA503C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000D09")]
			[Address(RVA = "0xCA50D8", Offset = "0xCA50D8", VA = "0xCA50D8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000D0F")]
		[Address(RVA = "0xCA5508", Offset = "0xCA5508", VA = "0xCA5508")]
		public void Awake()
		{
		}

		[Token(Token = "0x6000D10")]
		[Address(RVA = "0xCA561C", Offset = "0xCA561C", VA = "0xCA561C")]
		public CardItem()
		{
		}
	}
	[Token(Token = "0x2000190")]
	public class CardListManager : MonoBehaviour
	{
		[Token(Token = "0x4000AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform listContent;

		[Token(Token = "0x4000AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject itemTemplate;

		[Token(Token = "0x4000AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public List<Card> cardList;

		[Token(Token = "0x4000AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<CardItem> cardItems;

		[Token(Token = "0x4000AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public Card selectedCard;

		[Token(Token = "0x6000D16")]
		[Address(RVA = "0xCA57B8", Offset = "0xCA57B8", VA = "0xCA57B8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D17")]
		[Address(RVA = "0xCA5870", Offset = "0xCA5870", VA = "0xCA5870")]
		private void SetSelectedCard(Card card)
		{
		}

		[Token(Token = "0x6000D18")]
		[Address(RVA = "0xCA5878", Offset = "0xCA5878", VA = "0xCA5878")]
		public void Reset()
		{
		}

		[Token(Token = "0x6000D19")]
		[Address(RVA = "0xCA57E4", Offset = "0xCA57E4", VA = "0xCA57E4")]
		public void PopulateList()
		{
		}

		[Token(Token = "0x6000D1A")]
		[Address(RVA = "0xCA5A0C", Offset = "0xCA5A0C", VA = "0xCA5A0C")]
		public void AddCardItem(Card card)
		{
		}

		[Token(Token = "0x6000D1B")]
		[Address(RVA = "0xCA5B9C", Offset = "0xCA5B9C", VA = "0xCA5B9C")]
		public CardListManager()
		{
		}
	}
	[Token(Token = "0x2000191")]
	public class InputFocusHelper : MonoBehaviour, ISelectHandler, IEventSystemHandler, IPointerClickHandler, IEndDragHandler
	{
		[Token(Token = "0x2000192")]
		[CompilerGenerated]
		private sealed class <ActivateInputFieldWithCaret>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InputFocusHelper <>4__this;

			[Token(Token = "0x4000B07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool isMoveCaretToEnd;

			[Token(Token = "0x1700012F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D29")]
				[Address(RVA = "0xCA607C", Offset = "0xCA607C", VA = "0xCA607C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000130")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D2B")]
				[Address(RVA = "0xCA60C4", Offset = "0xCA60C4", VA = "0xCA60C4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D26")]
			[Address(RVA = "0xCA5EDC", Offset = "0xCA5EDC", VA = "0xCA5EDC")]
			[DebuggerHidden]
			public <ActivateInputFieldWithCaret>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x6000D27")]
			[Address(RVA = "0xCA5FA0", Offset = "0xCA5FA0", VA = "0xCA5FA0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D28")]
			[Address(RVA = "0xCA5FA4", Offset = "0xCA5FA4", VA = "0xCA5FA4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D2A")]
			[Address(RVA = "0xCA6084", Offset = "0xCA6084", VA = "0xCA6084", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private InputField input;

		[Token(Token = "0x4000B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int caretPosition;

		[Token(Token = "0x4000B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private int selectionAnchorPosition;

		[Token(Token = "0x4000B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int selectionFocusPosition;

		[Token(Token = "0x4000B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float originColorAlpha;

		[Token(Token = "0x6000D1C")]
		[Address(RVA = "0xCA5C5C", Offset = "0xCA5C5C", VA = "0xCA5C5C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D1D")]
		[Address(RVA = "0xCA5CBC", Offset = "0xCA5CBC", VA = "0xCA5CBC", Slot = "4")]
		public void OnSelect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000D1E")]
		[Address(RVA = "0xCA5E7C", Offset = "0xCA5E7C", VA = "0xCA5E7C", Slot = "5")]
		public void OnPointerClick(PointerEventData pointerEventData)
		{
		}

		[Token(Token = "0x6000D1F")]
		[Address(RVA = "0xCA5ED8", Offset = "0xCA5ED8", VA = "0xCA5ED8", Slot = "7")]
		public virtual void OnEndDrag(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6000D20")]
		[Address(RVA = "0xCA5E00", Offset = "0xCA5E00", VA = "0xCA5E00")]
		[IteratorStateMachine(typeof(<ActivateInputFieldWithCaret>d__9))]
		private IEnumerator ActivateInputFieldWithCaret(bool isMoveCaretToEnd)
		{
			return null;
		}

		[Token(Token = "0x6000D21")]
		[Address(RVA = "0xCA5F04", Offset = "0xCA5F04", VA = "0xCA5F04")]
		public void ForceActivate()
		{
		}

		[Token(Token = "0x6000D22")]
		[Address(RVA = "0xCA5E80", Offset = "0xCA5E80", VA = "0xCA5E80")]
		public void StorePositionInfo()
		{
		}

		[Token(Token = "0x6000D23")]
		[Address(RVA = "0xCA5F20", Offset = "0xCA5F20", VA = "0xCA5F20")]
		private void SetPosition()
		{
		}

		[Token(Token = "0x6000D24")]
		[Address(RVA = "0xCA5F6C", Offset = "0xCA5F6C", VA = "0xCA5F6C")]
		private void SetSelectionAlpha(float alpha)
		{
		}

		[Token(Token = "0x6000D25")]
		[Address(RVA = "0xCA5F98", Offset = "0xCA5F98", VA = "0xCA5F98")]
		public InputFocusHelper()
		{
		}
	}
	[Token(Token = "0x2000193")]
	public class UIKitInputField : MonoBehaviour, ISelectHandler, IEventSystemHandler, IPointerClickHandler, IDeselectHandler
	{
		[Token(Token = "0x2000194")]
		public enum ContentType
		{
			[Token(Token = "0x4000B15")]
			Standard,
			[Token(Token = "0x4000B16")]
			Password
		}

		[Token(Token = "0x2000195")]
		[CompilerGenerated]
		private sealed class <BlinkCaret>d__20 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B17")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public UIKitInputField <>4__this;

			[Token(Token = "0x17000131")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D38")]
				[Address(RVA = "0xCA6860", Offset = "0xCA6860", VA = "0xCA6860", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000132")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D3A")]
				[Address(RVA = "0xCA68A8", Offset = "0xCA68A8", VA = "0xCA68A8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D35")]
			[Address(RVA = "0xCA66AC", Offset = "0xCA66AC", VA = "0xCA66AC")]
			[DebuggerHidden]
			public <BlinkCaret>d__20(int <>1__state)
			{
			}

			[Token(Token = "0x6000D36")]
			[Address(RVA = "0xCA6730", Offset = "0xCA6730", VA = "0xCA6730", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D37")]
			[Address(RVA = "0xCA6734", Offset = "0xCA6734", VA = "0xCA6734", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D39")]
			[Address(RVA = "0xCA6868", Offset = "0xCA6868", VA = "0xCA6868", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RectTransform wrapper;

		[Token(Token = "0x4000B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text textComponent;

		[Token(Token = "0x4000B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string text;

		[Token(Token = "0x4000B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int characterLimit;

		[Token(Token = "0x4000B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public ContentType contentType;

		[Token(Token = "0x4000B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Text placeholder;

		[Token(Token = "0x4000B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public RectTransform caretTransform;

		[Token(Token = "0x4000B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(0f, 4f)]
		public float caretBlinkRate;

		[Token(Token = "0x4000B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float maxW_textComponent;

		[Token(Token = "0x4000B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private string displayedText;

		[Token(Token = "0x4000B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private string prevText;

		[Token(Token = "0x4000B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Text caretText;

		[Token(Token = "0x6000D2C")]
		[Address(RVA = "0xCA60CC", Offset = "0xCA60CC", VA = "0xCA60CC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D2D")]
		[Address(RVA = "0xCA6160", Offset = "0xCA6160", VA = "0xCA6160", Slot = "4")]
		public void OnSelect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000D2E")]
		[Address(RVA = "0xCA6204", Offset = "0xCA6204", VA = "0xCA6204", Slot = "5")]
		public void OnPointerClick(PointerEventData pointerEventData)
		{
		}

		[Token(Token = "0x6000D2F")]
		[Address(RVA = "0xCA6280", Offset = "0xCA6280", VA = "0xCA6280", Slot = "6")]
		public void OnDeselect(BaseEventData eventData)
		{
		}

		[Token(Token = "0x6000D30")]
		[Address(RVA = "0xCA62F0", Offset = "0xCA62F0", VA = "0xCA62F0")]
		public void ForceCaretUpdate()
		{
		}

		[Token(Token = "0x6000D31")]
		[Address(RVA = "0xCA634C", Offset = "0xCA634C", VA = "0xCA634C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000D32")]
		[Address(RVA = "0xCA6468", Offset = "0xCA6468", VA = "0xCA6468")]
		private void CalculateLengthOfText(string text)
		{
		}

		[Token(Token = "0x6000D33")]
		[Address(RVA = "0xCA6644", Offset = "0xCA6644", VA = "0xCA6644")]
		[IteratorStateMachine(typeof(<BlinkCaret>d__20))]
		private IEnumerator BlinkCaret()
		{
			return null;
		}

		[Token(Token = "0x6000D34")]
		[Address(RVA = "0xCA66D4", Offset = "0xCA66D4", VA = "0xCA66D4")]
		public UIKitInputField()
		{
		}
	}
	[Token(Token = "0x2000196")]
	public class KeyboardExtentionMethods : MonoBehaviour
	{
		[Token(Token = "0x4000B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject symbols;

		[Token(Token = "0x4000B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject alphabets;

		[Token(Token = "0x6000D3B")]
		[Address(RVA = "0xCA68B0", Offset = "0xCA68B0", VA = "0xCA68B0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D3C")]
		[Address(RVA = "0xCA69B4", Offset = "0xCA69B4", VA = "0xCA69B4")]
		public void SwitchSymbols()
		{
		}

		[Token(Token = "0x6000D3D")]
		[Address(RVA = "0xCA69D0", Offset = "0xCA69D0", VA = "0xCA69D0")]
		public void ToggleObject(GameObject go)
		{
		}

		[Token(Token = "0x6000D3E")]
		[Address(RVA = "0xCA6A04", Offset = "0xCA6A04", VA = "0xCA6A04")]
		public KeyboardExtentionMethods()
		{
		}
	}
	[Token(Token = "0x2000197")]
	public class KeyboardManager : MonoBehaviour
	{
		[Token(Token = "0x2000198")]
		public delegate void OnInputValueUpdatedHandler(string value);

		[Token(Token = "0x200019B")]
		[CompilerGenerated]
		private sealed class <WaitTargetProcessEvent>d__25 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Action callback;

			[Token(Token = "0x4000B2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public KeyboardManager <>4__this;

			[Token(Token = "0x17000135")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000D5E")]
				[Address(RVA = "0xCA7C10", Offset = "0xCA7C10", VA = "0xCA7C10", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000136")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000D60")]
				[Address(RVA = "0xCA7C58", Offset = "0xCA7C58", VA = "0xCA7C58", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000D5B")]
			[Address(RVA = "0xCA76FC", Offset = "0xCA76FC", VA = "0xCA76FC")]
			[DebuggerHidden]
			public <WaitTargetProcessEvent>d__25(int <>1__state)
			{
			}

			[Token(Token = "0x6000D5C")]
			[Address(RVA = "0xCA7A14", Offset = "0xCA7A14", VA = "0xCA7A14", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000D5D")]
			[Address(RVA = "0xCA7A18", Offset = "0xCA7A18", VA = "0xCA7A18", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000D5F")]
			[Address(RVA = "0xCA7C18", Offset = "0xCA7C18", VA = "0xCA7C18", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If the character is uppercase at the initialization")]
		[Header("User defined")]
		public bool isUppercase;

		[Token(Token = "0x4000B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Essentials")]
		public Transform keys;

		[Token(Token = "0x4000B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static InputField lastTarget;

		[Token(Token = "0x4000B20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static InputField target;

		[Token(Token = "0x4000B21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Key[] keyList;

		[Token(Token = "0x4000B22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool capslockFlag;

		[Token(Token = "0x17000133")]
		public static InputField Target
		{
			[Token(Token = "0x6000D3F")]
			[Address(RVA = "0xCA6A0C", Offset = "0xCA6A0C", VA = "0xCA6A0C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D40")]
			[Address(RVA = "0xCA5DA4", Offset = "0xCA5DA4", VA = "0xCA5DA4")]
			set
			{
			}
		}

		[Token(Token = "0x17000134")]
		private string Input
		{
			[Token(Token = "0x6000D43")]
			[Address(RVA = "0xCA6CA8", Offset = "0xCA6CA8", VA = "0xCA6CA8")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D44")]
			[Address(RVA = "0xCA6D40", Offset = "0xCA6D40", VA = "0xCA6D40")]
			set
			{
			}
		}

		[Token(Token = "0x14000005")]
		public event OnInputValueUpdatedHandler OnInputValueUpdated
		{
			[Token(Token = "0x6000D41")]
			[Address(RVA = "0xCA6B70", Offset = "0xCA6B70", VA = "0xCA6B70")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000D42")]
			[Address(RVA = "0xCA6C0C", Offset = "0xCA6C0C", VA = "0xCA6C0C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000D45")]
		[Address(RVA = "0xCA6DD0", Offset = "0xCA6DD0", VA = "0xCA6DD0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D46")]
		[Address(RVA = "0xCA6E2C", Offset = "0xCA6E2C", VA = "0xCA6E2C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D47")]
		[Address(RVA = "0xCA714C", Offset = "0xCA714C", VA = "0xCA714C")]
		public void Backspace()
		{
		}

		[Token(Token = "0x6000D48")]
		[Address(RVA = "0xCA73C8", Offset = "0xCA73C8", VA = "0xCA73C8")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000D49")]
		[Address(RVA = "0xCA7078", Offset = "0xCA7078", VA = "0xCA7078")]
		public void CapsLock()
		{
		}

		[Token(Token = "0x6000D4A")]
		[Address(RVA = "0xCA750C", Offset = "0xCA750C", VA = "0xCA750C")]
		public void Shift()
		{
		}

		[Token(Token = "0x6000D4B")]
		[Address(RVA = "0xCA75D0", Offset = "0xCA75D0", VA = "0xCA75D0")]
		public void GenerateInput(string s)
		{
		}

		[Token(Token = "0x6000D4C")]
		[Address(RVA = "0xCA7408", Offset = "0xCA7408", VA = "0xCA7408")]
		public void SetInput(string s)
		{
		}

		[Token(Token = "0x6000D4D")]
		[Address(RVA = "0xCA7298", Offset = "0xCA7298", VA = "0xCA7298")]
		private void ForceInputFieldActivated()
		{
		}

		[Token(Token = "0x6000D4E")]
		[Address(RVA = "0xCA7354", Offset = "0xCA7354", VA = "0xCA7354")]
		[IteratorStateMachine(typeof(<WaitTargetProcessEvent>d__25))]
		private IEnumerator WaitTargetProcessEvent(Action callback)
		{
			return null;
		}

		[Token(Token = "0x6000D4F")]
		[Address(RVA = "0xCA7724", Offset = "0xCA7724", VA = "0xCA7724")]
		private void SimulateKeyboardEvent(string s)
		{
		}

		[Token(Token = "0x6000D50")]
		[Address(RVA = "0xCA77EC", Offset = "0xCA77EC", VA = "0xCA77EC")]
		public KeyboardManager()
		{
		}
	}
	[Token(Token = "0x200019C")]
	public class Alphabet : Key
	{
		[Token(Token = "0x6000D61")]
		[Address(RVA = "0xCA7C60", Offset = "0xCA7C60", VA = "0xCA7C60", Slot = "5")]
		public override void CapsLock(bool isUppercase)
		{
		}

		[Token(Token = "0x6000D62")]
		[Address(RVA = "0xCA7CC4", Offset = "0xCA7CC4", VA = "0xCA7CC4")]
		public Alphabet()
		{
		}
	}
	[Token(Token = "0x200019D")]
	public class Key : MonoBehaviour
	{
		[Token(Token = "0x200019E")]
		public delegate void OnKeyClickedHandler(string key);

		[Token(Token = "0x4000B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected TextMeshProUGUI key;

		[Token(Token = "0x14000006")]
		public event OnKeyClickedHandler OnKeyClicked
		{
			[Token(Token = "0x6000D63")]
			[Address(RVA = "0xCA6FDC", Offset = "0xCA6FDC", VA = "0xCA6FDC")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000D64")]
			[Address(RVA = "0xCA7CD4", Offset = "0xCA7CD4", VA = "0xCA7CD4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000D65")]
		[Address(RVA = "0xCA7D70", Offset = "0xCA7D70", VA = "0xCA7D70", Slot = "4")]
		public virtual void Awake()
		{
		}

		[Token(Token = "0x6000D66")]
		[Address(RVA = "0xCA7F28", Offset = "0xCA7F28", VA = "0xCA7F28", Slot = "5")]
		public virtual void CapsLock(bool isUppercase)
		{
		}

		[Token(Token = "0x6000D67")]
		[Address(RVA = "0xCA7F2C", Offset = "0xCA7F2C", VA = "0xCA7F2C", Slot = "6")]
		public virtual void ShiftKey()
		{
		}

		[Token(Token = "0x6000D68")]
		[Address(RVA = "0xCA7CCC", Offset = "0xCA7CCC", VA = "0xCA7CCC")]
		public Key()
		{
		}
	}
	[Token(Token = "0x200019F")]
	public class Number : Key
	{
		[Token(Token = "0x6000D6E")]
		[Address(RVA = "0xCA7FB4", Offset = "0xCA7FB4", VA = "0xCA7FB4")]
		public Number()
		{
		}
	}
	[Token(Token = "0x20001A0")]
	public class Shift : Key
	{
		[Token(Token = "0x4000B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TextMeshProUGUI subscript;

		[Token(Token = "0x6000D6F")]
		[Address(RVA = "0xCA7FBC", Offset = "0xCA7FBC", VA = "0xCA7FBC", Slot = "4")]
		public override void Awake()
		{
		}

		[Token(Token = "0x6000D70")]
		[Address(RVA = "0xCA8048", Offset = "0xCA8048", VA = "0xCA8048", Slot = "6")]
		public override void ShiftKey()
		{
		}

		[Token(Token = "0x6000D71")]
		[Address(RVA = "0xCA80D4", Offset = "0xCA80D4", VA = "0xCA80D4")]
		public Shift()
		{
		}
	}
	[Token(Token = "0x20001A1")]
	public class Symbol : Key
	{
		[Token(Token = "0x6000D72")]
		[Address(RVA = "0xCA80DC", Offset = "0xCA80DC", VA = "0xCA80DC")]
		public Symbol()
		{
		}
	}
	[Token(Token = "0x20001A2")]
	public class MobileKeyboardManager : MonoBehaviour
	{
		[Token(Token = "0x4000B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("User defined")]
		[Tooltip("If the character is uppercase at the initialization")]
		public bool isUppercase;

		[Token(Token = "0x4000B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Essentials")]
		public Transform keys;

		[Token(Token = "0x4000B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static UIKitInputField target;

		[Token(Token = "0x4000B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Key[] keyList;

		[Token(Token = "0x4000B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool capslockFlag;

		[Token(Token = "0x17000137")]
		public static UIKitInputField Target
		{
			[Token(Token = "0x6000D73")]
			[Address(RVA = "0xCA80E4", Offset = "0xCA80E4", VA = "0xCA80E4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D74")]
			[Address(RVA = "0xCA8248", Offset = "0xCA8248", VA = "0xCA8248")]
			set
			{
			}
		}

		[Token(Token = "0x17000138")]
		private string Input
		{
			[Token(Token = "0x6000D75")]
			[Address(RVA = "0xCA8294", Offset = "0xCA8294", VA = "0xCA8294")]
			get
			{
				return null;
			}
			[Token(Token = "0x6000D76")]
			[Address(RVA = "0xCA832C", Offset = "0xCA832C", VA = "0xCA832C")]
			set
			{
			}
		}

		[Token(Token = "0x6000D77")]
		[Address(RVA = "0xCA8408", Offset = "0xCA8408", VA = "0xCA8408")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D78")]
		[Address(RVA = "0xCA8464", Offset = "0xCA8464", VA = "0xCA8464")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D79")]
		[Address(RVA = "0xCA8614", Offset = "0xCA8614", VA = "0xCA8614")]
		public void Backspace()
		{
		}

		[Token(Token = "0x6000D7A")]
		[Address(RVA = "0xCA866C", Offset = "0xCA866C", VA = "0xCA866C")]
		public void Clear()
		{
		}

		[Token(Token = "0x6000D7B")]
		[Address(RVA = "0xCA8540", Offset = "0xCA8540", VA = "0xCA8540")]
		public void CapsLock()
		{
		}

		[Token(Token = "0x6000D7C")]
		[Address(RVA = "0xCA870C", Offset = "0xCA870C", VA = "0xCA870C")]
		public void Shift()
		{
		}

		[Token(Token = "0x6000D7D")]
		[Address(RVA = "0xCA87D0", Offset = "0xCA87D0", VA = "0xCA87D0")]
		public void GenerateInput(string s)
		{
		}

		[Token(Token = "0x6000D7E")]
		[Address(RVA = "0xCA87F4", Offset = "0xCA87F4", VA = "0xCA87F4")]
		public MobileKeyboardManager()
		{
		}
	}
	[Token(Token = "0x20001A3")]
	public class KeyboardSuggestions : MonoBehaviour
	{
		[Token(Token = "0x4000B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public KeyboardManager keyboardManager;

		[Token(Token = "0x4000B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int maxNumberOfSuggestions;

		[Token(Token = "0x4000B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<string> suggestions;

		[Token(Token = "0x4000B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string pattern;

		[Token(Token = "0x4000B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SuggestionButton[] suggestionButtons;

		[Token(Token = "0x6000D7F")]
		[Address(RVA = "0xCA87FC", Offset = "0xCA87FC", VA = "0xCA87FC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D80")]
		[Address(RVA = "0xCA8984", Offset = "0xCA8984", VA = "0xCA8984")]
		private void Start()
		{
		}

		[Token(Token = "0x6000D81")]
		[Address(RVA = "0xCA8C1C", Offset = "0xCA8C1C", VA = "0xCA8C1C")]
		private void Suggest(string word)
		{
		}

		[Token(Token = "0x6000D82")]
		[Address(RVA = "0xCA8CFC", Offset = "0xCA8CFC", VA = "0xCA8CFC")]
		private bool IsSkipSugestion()
		{
			return default(bool);
		}

		[Token(Token = "0x6000D83")]
		[Address(RVA = "0xCA9120", Offset = "0xCA9120", VA = "0xCA9120")]
		private void GenerateSuggestionsUI()
		{
		}

		[Token(Token = "0x6000D84")]
		[Address(RVA = "0xCA92A0", Offset = "0xCA92A0", VA = "0xCA92A0")]
		private void SetSuggestionToCurrentInput(string word)
		{
		}

		[Token(Token = "0x6000D85")]
		[Address(RVA = "0xCA945C", Offset = "0xCA945C", VA = "0xCA945C")]
		public KeyboardSuggestions()
		{
		}
	}
	[Token(Token = "0x20001A4")]
	public class SuggestionButton : MonoBehaviour
	{
		[Token(Token = "0x20001A5")]
		public delegate void OnSuggestionClickedHandler(string word);

		[Token(Token = "0x4000B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private TextMeshProUGUI suggestionText;

		[Token(Token = "0x14000007")]
		public event OnSuggestionClickedHandler OnSuggestionClicked
		{
			[Token(Token = "0x6000D86")]
			[Address(RVA = "0xCA8B80", Offset = "0xCA8B80", VA = "0xCA8B80")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000D87")]
			[Address(RVA = "0xCA94B4", Offset = "0xCA94B4", VA = "0xCA94B4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000D88")]
		[Address(RVA = "0xCA9550", Offset = "0xCA9550", VA = "0xCA9550")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D89")]
		[Address(RVA = "0xCA9200", Offset = "0xCA9200", VA = "0xCA9200")]
		public void SetSuggestion(string word)
		{
		}

		[Token(Token = "0x6000D8A")]
		[Address(RVA = "0xCA962C", Offset = "0xCA962C", VA = "0xCA962C")]
		public SuggestionButton()
		{
		}
	}
	[Token(Token = "0x20001A6")]
	public class SuggestionSetup
	{
		[Token(Token = "0x4000B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static SuggestionSetup instance;

		[Token(Token = "0x4000B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Node root;

		[Token(Token = "0x4000B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private string[] textArray;

		[Token(Token = "0x6000D90")]
		[Address(RVA = "0xCA88E4", Offset = "0xCA88E4", VA = "0xCA88E4")]
		public SuggestionSetup(string[] textArray)
		{
		}

		[Token(Token = "0x6000D91")]
		[Address(RVA = "0xCA9778", Offset = "0xCA9778", VA = "0xCA9778")]
		private void PreProcess()
		{
		}

		[Token(Token = "0x6000D92")]
		[Address(RVA = "0xCA8DD8", Offset = "0xCA8DD8", VA = "0xCA8DD8")]
		public List<string> GetSuggestions(string word, int maxNumberOfSuggestions)
		{
			return null;
		}
	}
	[Token(Token = "0x20001A7")]
	public class Node
	{
		[Token(Token = "0x4000B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Dictionary<char, Node> nodes;

		[Token(Token = "0x4000B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<int> indexes;

		[Token(Token = "0x6000D93")]
		[Address(RVA = "0xCA96B8", Offset = "0xCA96B8", VA = "0xCA96B8")]
		public Node()
		{
		}
	}
	[Token(Token = "0x20001A8")]
	public class Item : MonoBehaviour
	{
		[Token(Token = "0x20001A9")]
		public delegate void OnItemSelectedHandler(Item item);

		[Token(Token = "0x4000B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.UI.Button button;

		[Token(Token = "0x4000B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Color normalColor;

		[Token(Token = "0x4000B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Color highlightedColor;

		[Token(Token = "0x14000008")]
		public event OnItemSelectedHandler OnItemSelected
		{
			[Token(Token = "0x6000D94")]
			[Address(RVA = "0xCA9970", Offset = "0xCA9970", VA = "0xCA9970")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000D95")]
			[Address(RVA = "0xCA9A0C", Offset = "0xCA9A0C", VA = "0xCA9A0C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000D96")]
		[Address(RVA = "0xCA9AA8", Offset = "0xCA9AA8", VA = "0xCA9AA8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000D97")]
		[Address(RVA = "0xCA9C50", Offset = "0xCA9C50", VA = "0xCA9C50", Slot = "4")]
		public virtual void Activate()
		{
		}

		[Token(Token = "0x6000D98")]
		[Address(RVA = "0xCA9CDC", Offset = "0xCA9CDC", VA = "0xCA9CDC", Slot = "5")]
		public virtual void Deactivate()
		{
		}

		[Token(Token = "0x6000D99")]
		[Address(RVA = "0xCA9D50", Offset = "0xCA9D50", VA = "0xCA9D50", Slot = "6")]
		public virtual void DeactivateSubMenu()
		{
		}

		[Token(Token = "0x6000D9A")]
		[Address(RVA = "0xCA9D54", Offset = "0xCA9D54", VA = "0xCA9D54")]
		public Item()
		{
		}
	}
	[Token(Token = "0x20001AA")]
	public class ListSelectionHelper : MonoBehaviour
	{
		[Token(Token = "0x4000B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform list;

		[Token(Token = "0x4000B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Item initialActivatedItem;

		[Token(Token = "0x4000B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public Item currentSelectedItem;

		[Token(Token = "0x4000B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Item[] items;

		[Token(Token = "0x6000DA0")]
		[Address(RVA = "0xCA9EE8", Offset = "0xCA9EE8", VA = "0xCA9EE8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000DA1")]
		[Address(RVA = "0xCA9F40", Offset = "0xCA9F40", VA = "0xCA9F40")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DA2")]
		[Address(RVA = "0xCAA07C", Offset = "0xCAA07C", VA = "0xCAA07C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6000DA3")]
		[Address(RVA = "0xCAA20C", Offset = "0xCAA20C", VA = "0xCAA20C")]
		private void SelectionHelper(Item item)
		{
		}

		[Token(Token = "0x6000DA4")]
		[Address(RVA = "0xCAA188", Offset = "0xCAA188", VA = "0xCAA188")]
		public void DeselectCurrentItem()
		{
		}

		[Token(Token = "0x6000DA5")]
		[Address(RVA = "0xCAA248", Offset = "0xCAA248", VA = "0xCAA248")]
		public ListSelectionHelper()
		{
		}
	}
	[Token(Token = "0x20001AB")]
	public class MenuItem : Item
	{
		[Token(Token = "0x4000B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject subMenu;

		[Token(Token = "0x6000DA6")]
		[Address(RVA = "0xCAA250", Offset = "0xCAA250", VA = "0xCAA250", Slot = "4")]
		public override void Activate()
		{
		}

		[Token(Token = "0x6000DA7")]
		[Address(RVA = "0xCAA2E0", Offset = "0xCAA2E0", VA = "0xCAA2E0", Slot = "5")]
		public override void Deactivate()
		{
		}

		[Token(Token = "0x6000DA8")]
		[Address(RVA = "0xCAA300", Offset = "0xCAA300", VA = "0xCAA300", Slot = "6")]
		public override void DeactivateSubMenu()
		{
		}

		[Token(Token = "0x6000DA9")]
		[Address(RVA = "0xCAA388", Offset = "0xCAA388", VA = "0xCAA388")]
		public MenuItem()
		{
		}
	}
	[Token(Token = "0x20001AC")]
	public class TabItem : Item
	{
		[Token(Token = "0x4000B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject relatedPanel;

		[Token(Token = "0x6000DAA")]
		[Address(RVA = "0xCAA390", Offset = "0xCAA390", VA = "0xCAA390", Slot = "4")]
		public override void Activate()
		{
		}

		[Token(Token = "0x6000DAB")]
		[Address(RVA = "0xCAA498", Offset = "0xCAA498", VA = "0xCAA498", Slot = "5")]
		public override void Deactivate()
		{
		}

		[Token(Token = "0x6000DAC")]
		[Address(RVA = "0xCAA594", Offset = "0xCAA594", VA = "0xCAA594")]
		public TabItem()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20001AD")]
	public struct Option
	{
		[Token(Token = "0x4000B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public string value;
	}
	[Token(Token = "0x20001AE")]
	public class OptionItem : MonoBehaviour
	{
		[Token(Token = "0x4000B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Option option;

		[Token(Token = "0x17000139")]
		public string Value
		{
			[Token(Token = "0x6000DAD")]
			[Address(RVA = "0xCAA59C", Offset = "0xCAA59C", VA = "0xCAA59C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013A")]
		public Option Option
		{
			[Token(Token = "0x6000DAE")]
			[Address(RVA = "0xCAA5A4", Offset = "0xCAA5A4", VA = "0xCAA5A4")]
			get
			{
				return default(Option);
			}
			[Token(Token = "0x6000DAF")]
			[Address(RVA = "0xCAA5AC", Offset = "0xCAA5AC", VA = "0xCAA5AC")]
			set
			{
			}
		}

		[Token(Token = "0x6000DB0")]
		[Address(RVA = "0xCAA6E4", Offset = "0xCAA6E4", VA = "0xCAA6E4")]
		public void Activate()
		{
		}

		[Token(Token = "0x6000DB1")]
		[Address(RVA = "0xCAA708", Offset = "0xCAA708", VA = "0xCAA708")]
		public void Deactivate()
		{
		}

		[Token(Token = "0x6000DB2")]
		[Address(RVA = "0xCAA72C", Offset = "0xCAA72C", VA = "0xCAA72C")]
		public OptionItem()
		{
		}
	}
	[Token(Token = "0x20001AF")]
	public class OptionsManager : MonoBehaviour
	{
		[Token(Token = "0x20001B0")]
		public delegate void OnOptionSelectedHandler(int index);

		[Token(Token = "0x4000B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Template")]
		public GameObject optionTemplate;

		[Token(Token = "0x4000B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public List<Option> optionsList;

		[Token(Token = "0x4000B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public string selectedValue;

		[Token(Token = "0x4000B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int firstSelectedIndex;

		[Token(Token = "0x4000B51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int selectedIdx;

		[Token(Token = "0x4000B52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<OptionItem> optionItems;

		[Token(Token = "0x1700013B")]
		public int SelectedIdx
		{
			[Token(Token = "0x6000DB5")]
			[Address(RVA = "0xCAA86C", Offset = "0xCAA86C", VA = "0xCAA86C")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000DB6")]
			[Address(RVA = "0xCAA874", Offset = "0xCAA874", VA = "0xCAA874")]
			set
			{
			}
		}

		[Token(Token = "0x14000009")]
		public event OnOptionSelectedHandler OnOptionSelected
		{
			[Token(Token = "0x6000DB3")]
			[Address(RVA = "0xCAA734", Offset = "0xCAA734", VA = "0xCAA734")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000DB4")]
			[Address(RVA = "0xCAA7D0", Offset = "0xCAA7D0", VA = "0xCAA7D0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000DB7")]
		[Address(RVA = "0xCAA90C", Offset = "0xCAA90C", VA = "0xCAA90C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000DB8")]
		[Address(RVA = "0xCAAB7C", Offset = "0xCAAB7C", VA = "0xCAAB7C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DB9")]
		[Address(RVA = "0xCAA87C", Offset = "0xCAA87C", VA = "0xCAA87C")]
		public void RefreshOptions()
		{
		}

		[Token(Token = "0x6000DBA")]
		[Address(RVA = "0xCAA938", Offset = "0xCAA938", VA = "0xCAA938")]
		private void PopulateOptions()
		{
		}

		[Token(Token = "0x6000DBB")]
		[Address(RVA = "0xCAAD98", Offset = "0xCAAD98", VA = "0xCAAD98")]
		public void PrevOption()
		{
		}

		[Token(Token = "0x6000DBC")]
		[Address(RVA = "0xCAAEA4", Offset = "0xCAAEA4", VA = "0xCAAEA4")]
		public void NextOption()
		{
		}

		[Token(Token = "0x6000DBD")]
		[Address(RVA = "0xCAAC34", Offset = "0xCAAC34", VA = "0xCAAC34")]
		public void ActivateOption(int i)
		{
		}

		[Token(Token = "0x6000DBE")]
		[Address(RVA = "0xCAAE1C", Offset = "0xCAAE1C", VA = "0xCAAE1C")]
		public void DeactivateOption(int i)
		{
		}

		[Token(Token = "0x6000DBF")]
		[Address(RVA = "0xCAAF4C", Offset = "0xCAAF4C", VA = "0xCAAF4C")]
		public OptionsManager()
		{
		}
	}
	[Token(Token = "0x20001B1")]
	public enum ButtonDeactiveStyle
	{
		[Token(Token = "0x4000B54")]
		Disabled,
		[Token(Token = "0x4000B55")]
		Hidden
	}
	[Token(Token = "0x20001B2")]
	public class Pagination : MonoBehaviour
	{
		[Token(Token = "0x4000B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Target")]
		public Transform targetObject;

		[Token(Token = "0x4000B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Pagination Buttons")]
		public ButtonDeactiveStyle buttonDeactiveStyle;

		[Token(Token = "0x4000B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEngine.UI.Button nextBtn;

		[Token(Token = "0x4000B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEngine.UI.Button prevBtn;

		[Token(Token = "0x4000B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int currentPage;

		[Token(Token = "0x1700013C")]
		public int CurrentPage
		{
			[Token(Token = "0x6000DC4")]
			[Address(RVA = "0xCAB0B0", Offset = "0xCAB0B0", VA = "0xCAB0B0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000DC5")]
			[Address(RVA = "0xCAB0B8", Offset = "0xCAB0B8", VA = "0xCAB0B8")]
			set
			{
			}
		}

		[Token(Token = "0x6000DC6")]
		[Address(RVA = "0xCAB3D4", Offset = "0xCAB3D4", VA = "0xCAB3D4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DC7")]
		[Address(RVA = "0xCAB544", Offset = "0xCAB544", VA = "0xCAB544")]
		public void Next()
		{
		}

		[Token(Token = "0x6000DC8")]
		[Address(RVA = "0xCAB550", Offset = "0xCAB550", VA = "0xCAB550")]
		public void Prev()
		{
		}

		[Token(Token = "0x6000DC9")]
		[Address(RVA = "0xCAB28C", Offset = "0xCAB28C", VA = "0xCAB28C")]
		private void PagintionBtnControl(bool nextEnabled, bool prevEnabled)
		{
		}

		[Token(Token = "0x6000DCA")]
		[Address(RVA = "0xCAB55C", Offset = "0xCAB55C", VA = "0xCAB55C")]
		public Pagination()
		{
		}
	}
	[Token(Token = "0x20001B3")]
	[RequireComponent(typeof(ProgressBarManager))]
	public class CircularProgressBar : MonoBehaviour
	{
		[Token(Token = "0x4000B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Image circle;

		[Token(Token = "0x4000B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float step;

		[Token(Token = "0x4000B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Value")]
		public Transform valueText;

		[Token(Token = "0x4000B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float min;

		[Token(Token = "0x4000B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float max;

		[Token(Token = "0x4000B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ProgressBarManager progressBarManager;

		[Token(Token = "0x1700013D")]
		public TextMeshProUGUI ValueText
		{
			[Token(Token = "0x6000DCB")]
			[Address(RVA = "0xCAB564", Offset = "0xCAB564", VA = "0xCAB564")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700013E")]
		public float Value
		{
			[Token(Token = "0x6000DCC")]
			[Address(RVA = "0xCAB5B4", Offset = "0xCAB5B4", VA = "0xCAB5B4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DCD")]
			[Address(RVA = "0xCAB5D0", Offset = "0xCAB5D0", VA = "0xCAB5D0")]
			set
			{
			}
		}

		[Token(Token = "0x6000DCE")]
		[Address(RVA = "0xCAB5EC", Offset = "0xCAB5EC", VA = "0xCAB5EC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000DCF")]
		[Address(RVA = "0xCAB63C", Offset = "0xCAB63C", VA = "0xCAB63C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DD0")]
		[Address(RVA = "0xCABA20", Offset = "0xCABA20", VA = "0xCABA20")]
		public void IncreaseValue()
		{
		}

		[Token(Token = "0x6000DD1")]
		[Address(RVA = "0xCABAD0", Offset = "0xCABAD0", VA = "0xCABAD0")]
		public void DecreaseValue()
		{
		}

		[Token(Token = "0x6000DD2")]
		[Address(RVA = "0xCABB80", Offset = "0xCABB80", VA = "0xCABB80")]
		private void UpdateValue(float newValue)
		{
		}

		[Token(Token = "0x6000DD3")]
		[Address(RVA = "0xCAB720", Offset = "0xCAB720", VA = "0xCAB720")]
		private void UpdateValueText(float newValue)
		{
		}

		[Token(Token = "0x6000DD4")]
		[Address(RVA = "0xCABB9C", Offset = "0xCABB9C", VA = "0xCABB9C")]
		public CircularProgressBar()
		{
		}
	}
	[Token(Token = "0x20001B4")]
	public class ProgressBarManager : MonoBehaviour
	{
		[Token(Token = "0x20001B5")]
		public delegate void OnValueUpdatedHandler(float updatedValue);

		[Token(Token = "0x20001B6")]
		[CompilerGenerated]
		private sealed class <SlideTo>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000B64")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000B65")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000B66")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float target;

			[Token(Token = "0x4000B67")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float toValue;

			[Token(Token = "0x4000B68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float time;

			[Token(Token = "0x4000B69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public ProgressBarManager <>4__this;

			[Token(Token = "0x4000B6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <fromValue>5__2;

			[Token(Token = "0x4000B6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private float <elapsedTime>5__3;

			[Token(Token = "0x1700013F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000DE4")]
				[Address(RVA = "0xCABF4C", Offset = "0xCABF4C", VA = "0xCABF4C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000140")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000DE6")]
				[Address(RVA = "0xCABF94", Offset = "0xCABF94", VA = "0xCABF94", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000DE1")]
			[Address(RVA = "0xCABD7C", Offset = "0xCABD7C", VA = "0xCABD7C")]
			[DebuggerHidden]
			public <SlideTo>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x6000DE2")]
			[Address(RVA = "0xCABE50", Offset = "0xCABE50", VA = "0xCABE50", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000DE3")]
			[Address(RVA = "0xCABE54", Offset = "0xCABE54", VA = "0xCABE54", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000DE5")]
			[Address(RVA = "0xCABF54", Offset = "0xCABF54", VA = "0xCABF54", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Coroutine slideCoroutine;

		[Token(Token = "0x1400000A")]
		public event OnValueUpdatedHandler OnValueIsUpdating
		{
			[Token(Token = "0x6000DD5")]
			[Address(RVA = "0xCAB8E8", Offset = "0xCAB8E8", VA = "0xCAB8E8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000DD6")]
			[Address(RVA = "0xCABBB8", Offset = "0xCABBB8", VA = "0xCABBB8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400000B")]
		public event OnValueUpdatedHandler OnValueStopUpgating
		{
			[Token(Token = "0x6000DD7")]
			[Address(RVA = "0xCAB984", Offset = "0xCAB984", VA = "0xCAB984")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000DD8")]
			[Address(RVA = "0xCABC54", Offset = "0xCABC54", VA = "0xCABC54")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000DD9")]
		[Address(RVA = "0xCABA50", Offset = "0xCABA50", VA = "0xCABA50")]
		public void IncreaseValue(float target, float step, float min, float max)
		{
		}

		[Token(Token = "0x6000DDA")]
		[Address(RVA = "0xCABB00", Offset = "0xCABB00", VA = "0xCABB00")]
		public void DecreaseValue(float target, float step, float min, float max)
		{
		}

		[Token(Token = "0x6000DDB")]
		[Address(RVA = "0xCABCF0", Offset = "0xCABCF0", VA = "0xCABCF0")]
		[IteratorStateMachine(typeof(<SlideTo>d__10))]
		private IEnumerator SlideTo(float target, float toValue, float time = 0.2f)
		{
			return null;
		}

		[Token(Token = "0x6000DDC")]
		[Address(RVA = "0xCABDA4", Offset = "0xCABDA4", VA = "0xCABDA4")]
		public ProgressBarManager()
		{
		}
	}
	[Token(Token = "0x20001B7")]
	[RequireComponent(typeof(ProgressBarManager))]
	public class ScrollController : MonoBehaviour
	{
		[Token(Token = "0x4000B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Scrollbar scrollbar;

		[Token(Token = "0x4000B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0f, 1f)]
		public float step;

		[Token(Token = "0x4000B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float min;

		[Token(Token = "0x4000B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float max;

		[Token(Token = "0x4000B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ProgressBarManager progressBarManager;

		[Token(Token = "0x17000141")]
		public float Value
		{
			[Token(Token = "0x6000DE7")]
			[Address(RVA = "0xCABF9C", Offset = "0xCABF9C", VA = "0xCABF9C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DE8")]
			[Address(RVA = "0xCABFB8", Offset = "0xCABFB8", VA = "0xCABFB8")]
			set
			{
			}
		}

		[Token(Token = "0x6000DE9")]
		[Address(RVA = "0xCABFD4", Offset = "0xCABFD4", VA = "0xCABFD4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000DEA")]
		[Address(RVA = "0xCAC024", Offset = "0xCAC024", VA = "0xCAC024")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DEB")]
		[Address(RVA = "0xCAC0A8", Offset = "0xCAC0A8", VA = "0xCAC0A8")]
		public void IncreaseValue()
		{
		}

		[Token(Token = "0x6000DEC")]
		[Address(RVA = "0xCAC0E8", Offset = "0xCAC0E8", VA = "0xCAC0E8")]
		public void DecreaseValue()
		{
		}

		[Token(Token = "0x6000DED")]
		[Address(RVA = "0xCAC128", Offset = "0xCAC128", VA = "0xCAC128")]
		private void UpdateValue(float newValue)
		{
		}

		[Token(Token = "0x6000DEE")]
		[Address(RVA = "0xCAC144", Offset = "0xCAC144", VA = "0xCAC144")]
		public ScrollController()
		{
		}
	}
	[Token(Token = "0x20001B8")]
	[RequireComponent(typeof(ProgressBarManager))]
	public class SliderProgressBar : MonoBehaviour
	{
		[Token(Token = "0x20001B9")]
		public enum ValueType
		{
			[Token(Token = "0x4000B79")]
			Percentage,
			[Token(Token = "0x4000B7A")]
			Number
		}

		[Token(Token = "0x4000B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEngine.UI.Slider slider;

		[Token(Token = "0x4000B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float step;

		[Token(Token = "0x4000B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Header("Value")]
		public ValueType valuePresentedAs;

		[Token(Token = "0x4000B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform valueText;

		[Token(Token = "0x4000B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public float roundedPercentage;

		[Token(Token = "0x4000B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[HideInInspector]
		public float roundedValue;

		[Token(Token = "0x4000B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ProgressBarManager progressBarManager;

		[Token(Token = "0x17000142")]
		public TextMeshProUGUI ValueText
		{
			[Token(Token = "0x6000DEF")]
			[Address(RVA = "0xCAC15C", Offset = "0xCAC15C", VA = "0xCAC15C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000143")]
		public float Value
		{
			[Token(Token = "0x6000DF0")]
			[Address(RVA = "0xCAC1AC", Offset = "0xCAC1AC", VA = "0xCAC1AC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000DF1")]
			[Address(RVA = "0xCAC1D0", Offset = "0xCAC1D0", VA = "0xCAC1D0")]
			set
			{
			}
		}

		[Token(Token = "0x6000DF2")]
		[Address(RVA = "0xCAC1F4", Offset = "0xCAC1F4", VA = "0xCAC1F4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000DF3")]
		[Address(RVA = "0xCAC244", Offset = "0xCAC244", VA = "0xCAC244")]
		private void Start()
		{
		}

		[Token(Token = "0x6000DF4")]
		[Address(RVA = "0xCAC620", Offset = "0xCAC620", VA = "0xCAC620")]
		public void IncreaseValue()
		{
		}

		[Token(Token = "0x6000DF5")]
		[Address(RVA = "0xCAC674", Offset = "0xCAC674", VA = "0xCAC674")]
		public void DecreaseValue()
		{
		}

		[Token(Token = "0x6000DF6")]
		[Address(RVA = "0xCAC6C8", Offset = "0xCAC6C8", VA = "0xCAC6C8")]
		private void UpdateValue(float newValue)
		{
		}

		[Token(Token = "0x6000DF7")]
		[Address(RVA = "0xCAC398", Offset = "0xCAC398", VA = "0xCAC398")]
		private void CalculateValue(float newValue)
		{
		}

		[Token(Token = "0x6000DF8")]
		[Address(RVA = "0xCAC520", Offset = "0xCAC520", VA = "0xCAC520")]
		public void UpdateValueText(float newValue)
		{
		}

		[Token(Token = "0x6000DF9")]
		[Address(RVA = "0xCAC6EC", Offset = "0xCAC6EC", VA = "0xCAC6EC")]
		public SliderProgressBar()
		{
		}
	}
	[Token(Token = "0x20001BA")]
	public class Util : MonoBehaviour
	{
		[Token(Token = "0x6000DFA")]
		public static T SafeDestroy<T>(T obj) where T : UnityEngine.Object
		{
			return null;
		}

		[Token(Token = "0x6000DFB")]
		public static T SafeDestroyGameObject<T>(T component) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6000DFC")]
		[Address(RVA = "0xCAC700", Offset = "0xCAC700", VA = "0xCAC700")]
		public static void DestroyChildren(Transform root)
		{
		}

		[Token(Token = "0x6000DFD")]
		[Address(RVA = "0xCA93DC", Offset = "0xCA93DC", VA = "0xCA93DC")]
		public static string ReplaceLastOccurrence(string Source, string Find, string Replace)
		{
			return null;
		}

		[Token(Token = "0x6000DFE")]
		[Address(RVA = "0xCAC784", Offset = "0xCAC784", VA = "0xCAC784")]
		public Util()
		{
		}
	}
	[Token(Token = "0x20001BB")]
	public class VREventSystemHelper : EventSystem
	{
		[Token(Token = "0x6000DFF")]
		[Address(RVA = "0xCAC78C", Offset = "0xCAC78C", VA = "0xCAC78C", Slot = "17")]
		protected override void OnApplicationFocus(bool hasFocus)
		{
		}

		[Token(Token = "0x6000E00")]
		[Address(RVA = "0xCAC798", Offset = "0xCAC798", VA = "0xCAC798")]
		public VREventSystemHelper()
		{
		}
	}
}
namespace VRUiKits.Demo
{
	[Token(Token = "0x20001BC")]
	public class ChangeColor : MonoBehaviour
	{
		[Token(Token = "0x4000B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Material material;

		[Token(Token = "0x4000B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Color color;

		[Token(Token = "0x4000B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool isClicked;

		[Token(Token = "0x6000E01")]
		[Address(RVA = "0xCAC7F0", Offset = "0xCAC7F0", VA = "0xCAC7F0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000E02")]
		[Address(RVA = "0xCAC850", Offset = "0xCAC850", VA = "0xCAC850")]
		public void PointerEnter()
		{
		}

		[Token(Token = "0x6000E03")]
		[Address(RVA = "0xCAC8A0", Offset = "0xCAC8A0", VA = "0xCAC8A0")]
		public void PointerLeave()
		{
		}

		[Token(Token = "0x6000E04")]
		[Address(RVA = "0xCAC8D8", Offset = "0xCAC8D8", VA = "0xCAC8D8")]
		public void PointerClick()
		{
		}

		[Token(Token = "0x6000E05")]
		[Address(RVA = "0xCAC914", Offset = "0xCAC914", VA = "0xCAC914")]
		public ChangeColor()
		{
		}
	}
	[Token(Token = "0x20001BD")]
	public class FaceVRCamera : MonoBehaviour
	{
		[Token(Token = "0x4000B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform vrCamera;

		[Token(Token = "0x4000B7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FaceCameraType type;

		[Token(Token = "0x4000B80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private float distance;

		[Token(Token = "0x6000E06")]
		[Address(RVA = "0xCAC91C", Offset = "0xCAC91C", VA = "0xCAC91C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E07")]
		[Address(RVA = "0xCAC968", Offset = "0xCAC968", VA = "0xCAC968")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E08")]
		[Address(RVA = "0xCACA80", Offset = "0xCACA80", VA = "0xCACA80")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6000E09")]
		[Address(RVA = "0xCAC97C", Offset = "0xCAC97C", VA = "0xCAC97C")]
		private void CalibratePosition()
		{
		}

		[Token(Token = "0x6000E0A")]
		[Address(RVA = "0xCACA90", Offset = "0xCACA90", VA = "0xCACA90")]
		public FaceVRCamera()
		{
		}
	}
	[Token(Token = "0x20001BE")]
	public enum FaceCameraType
	{
		[Token(Token = "0x4000B82")]
		Always,
		[Token(Token = "0x4000B83")]
		OnToggle
	}
	[Token(Token = "0x20001BF")]
	public class KeyboardDisplay : MonoBehaviour
	{
		[Token(Token = "0x4000B84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform vrCamera;

		[Token(Token = "0x4000B85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 offset;

		[Token(Token = "0x6000E0B")]
		[Address(RVA = "0xCACA98", Offset = "0xCACA98", VA = "0xCACA98")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E0C")]
		[Address(RVA = "0xCACB00", Offset = "0xCACB00", VA = "0xCACB00")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E0D")]
		[Address(RVA = "0xCACB04", Offset = "0xCACB04", VA = "0xCACB04")]
		private void SetPosition()
		{
		}

		[Token(Token = "0x6000E0E")]
		[Address(RVA = "0xCACB60", Offset = "0xCACB60", VA = "0xCACB60")]
		public KeyboardDisplay()
		{
		}
	}
	[Token(Token = "0x20001C0")]
	public class MouseLook : MonoBehaviour
	{
		[Token(Token = "0x4000B86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float speed;

		[Token(Token = "0x4000B87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float x;

		[Token(Token = "0x4000B88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float y;

		[Token(Token = "0x6000E0F")]
		[Address(RVA = "0xCACB68", Offset = "0xCACB68", VA = "0xCACB68")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E10")]
		[Address(RVA = "0xCACCF0", Offset = "0xCACCF0", VA = "0xCACCF0")]
		public MouseLook()
		{
		}
	}
	[Token(Token = "0x20001C1")]
	public class ToggleUIKitHelper : MonoBehaviour
	{
		[Token(Token = "0x4000B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UIKitPointer pointer;

		[Token(Token = "0x4000B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<GameObject> objectsToToggle;

		[Token(Token = "0x6000E11")]
		[Address(RVA = "0xCACD00", Offset = "0xCACD00", VA = "0xCACD00")]
		public void Pause()
		{
		}

		[Token(Token = "0x6000E12")]
		[Address(RVA = "0xCACF20", Offset = "0xCACF20", VA = "0xCACF20")]
		public void Run()
		{
		}

		[Token(Token = "0x6000E13")]
		[Address(RVA = "0xCACDAC", Offset = "0xCACDAC", VA = "0xCACDAC")]
		private void Toggle(bool enabled)
		{
		}

		[Token(Token = "0x6000E14")]
		[Address(RVA = "0xCACFCC", Offset = "0xCACFCC", VA = "0xCACFCC")]
		public ToggleUIKitHelper()
		{
		}
	}
}
namespace SensorToolkit
{
	[Token(Token = "0x20001C2")]
	[RequireComponent(typeof(MeshCollider))]
	[ExecuteInEditMode]
	public class FOVCollider : MonoBehaviour
	{
		[Token(Token = "0x4000B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The length of the field of view cone in world units.")]
		public float Length;

		[Token(Token = "0x4000B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The size of the field of view cones base in world units.")]
		public float BaseSize;

		[Token(Token = "0x4000B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(1f, 180f)]
		[Tooltip("The arc angle of the fov cone.")]
		public float FOVAngle;

		[Token(Token = "0x4000B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("The elevation angle of the cone.")]
		[Range(1f, 180f)]
		public float ElevationAngle;

		[Token(Token = "0x4000B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Range(0f, 8f)]
		[Tooltip("The number of vertices used to approximate the arc of the fov cone. Ideally this should be as low as possible.")]
		public int Resolution;

		[Token(Token = "0x4000B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Mesh mesh;

		[Token(Token = "0x4000B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private MeshCollider mc;

		[Token(Token = "0x4000B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3[] pts;

		[Token(Token = "0x4000B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int[] triangles;

		[Token(Token = "0x17000144")]
		public Mesh FOVMesh
		{
			[Token(Token = "0x6000E15")]
			[Address(RVA = "0xCACFD4", Offset = "0xCACFD4", VA = "0xCACFD4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E16")]
		[Address(RVA = "0xCACFDC", Offset = "0xCACFDC", VA = "0xCACFDC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E17")]
		[Address(RVA = "0xCAD84C", Offset = "0xCAD84C", VA = "0xCAD84C")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6000E18")]
		[Address(RVA = "0xCAD030", Offset = "0xCAD030", VA = "0xCAD030")]
		public void CreateCollider()
		{
		}

		[Token(Token = "0x6000E19")]
		[Address(RVA = "0xCAD8D8", Offset = "0xCAD8D8", VA = "0xCAD8D8")]
		private void releaseMesh()
		{
		}

		[Token(Token = "0x6000E1A")]
		[Address(RVA = "0xCAD9E4", Offset = "0xCAD9E4", VA = "0xCAD9E4")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000E1B")]
		[Address(RVA = "0xCADAB0", Offset = "0xCADAB0", VA = "0xCADAB0")]
		public FOVCollider()
		{
		}
	}
	[Token(Token = "0x20001C3")]
	[RequireComponent(typeof(PolygonCollider2D))]
	[ExecuteInEditMode]
	public class FOVCollider2D : MonoBehaviour
	{
		[Token(Token = "0x4000B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The length of the field of view cone in world units.")]
		public float Length;

		[Token(Token = "0x4000B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The size of the field of view cones base in world units.")]
		public float BaseSize;

		[Token(Token = "0x4000B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(1f, 360f)]
		[Tooltip("The arc angle of the fov cone.")]
		public float FOVAngle;

		[Token(Token = "0x4000B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0f, 16f)]
		[Tooltip("The number of vertices used to approximate the arc of the fov cone. Ideally this should be as low as possible.")]
		public int Resolution;

		[Token(Token = "0x4000B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private PolygonCollider2D pc;

		[Token(Token = "0x4000B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector2[] pts;

		[Token(Token = "0x4000B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Mesh mesh;

		[Token(Token = "0x17000145")]
		public Mesh FOVMesh
		{
			[Token(Token = "0x6000E1C")]
			[Address(RVA = "0xCADAC4", Offset = "0xCADAC4", VA = "0xCADAC4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E1D")]
		[Address(RVA = "0xCADACC", Offset = "0xCADACC", VA = "0xCADACC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000E1E")]
		[Address(RVA = "0xCADEF4", Offset = "0xCADEF4", VA = "0xCADEF4")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x6000E1F")]
		[Address(RVA = "0xCADB20", Offset = "0xCADB20", VA = "0xCADB20")]
		public void CreateCollider()
		{
		}

		[Token(Token = "0x6000E20")]
		[Address(RVA = "0xCADF80", Offset = "0xCADF80", VA = "0xCADF80")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000E21")]
		[Address(RVA = "0xCAE048", Offset = "0xCAE048", VA = "0xCAE048")]
		public FOVCollider2D()
		{
		}
	}
	[Token(Token = "0x20001C4")]
	public class LOSTargets : MonoBehaviour
	{
		[Token(Token = "0x4000B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform[] Targets;

		[Token(Token = "0x4000B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static readonly Color GizmoColor;

		[Token(Token = "0x6000E22")]
		[Address(RVA = "0xCAE064", Offset = "0xCAE064", VA = "0xCAE064", Slot = "4")]
		public virtual void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000E23")]
		[Address(RVA = "0xCAE1E4", Offset = "0xCAE1E4", VA = "0xCAE1E4")]
		public LOSTargets()
		{
		}
	}
	[Token(Token = "0x20001C5")]
	[ExecuteInEditMode]
	public class RangeSensor : BaseVolumeSensor
	{
		[Token(Token = "0x20001C6")]
		public enum UpdateMode
		{
			[Token(Token = "0x4000BA9")]
			FixedInterval,
			[Token(Token = "0x4000BAA")]
			Manual
		}

		[Token(Token = "0x20001C7")]
		public delegate void SensorUpdateHandler();

		[Token(Token = "0x4000B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Tooltip("The radius in world units that the sensor detects colliders in.")]
		public float SensorRange;

		[Token(Token = "0x4000B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("The physics layer mask that the sensor detects colliders on.")]
		public LayerMask DetectsOnLayers;

		[Token(Token = "0x4000B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[Tooltip("Automatic or manually pulsing mode.")]
		public UpdateMode SensorUpdateMode;

		[Token(Token = "0x4000BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("If the chosen update mode is automatic then this is the interval in seconds between each automatic pulse.")]
		public float CheckInterval;

		[Token(Token = "0x4000BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Tooltip("The initial size of the buffer used when calling Physics.OverlapSphereNoAlloc.")]
		public int InitialBufferSize;

		[Token(Token = "0x4000BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("When set true the buffer used with Physics.OverlapSphereNoAlloc is expanded if its not sufficiently large.")]
		public bool DynamicallyIncreaseBufferSize;

		[Token(Token = "0x4000BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private HashSet<GameObject> previousDetectedObjects;

		[Token(Token = "0x4000BA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Collider[] collidersBuffer;

		[Token(Token = "0x4000BA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float timer;

		[Token(Token = "0x17000146")]
		public int CurrentBufferSize
		{
			[Token(Token = "0x6000E25")]
			[Address(RVA = "0xCAE23C", Offset = "0xCAE23C", VA = "0xCAE23C")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E26")]
			[Address(RVA = "0xCAE244", Offset = "0xCAE244", VA = "0xCAE244")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1400000C")]
		public event SensorUpdateHandler OnSensorUpdate
		{
			[Token(Token = "0x6000E27")]
			[Address(RVA = "0xCAE24C", Offset = "0xCAE24C", VA = "0xCAE24C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E28")]
			[Address(RVA = "0xCAE2E8", Offset = "0xCAE2E8", VA = "0xCAE2E8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000E29")]
		[Address(RVA = "0xCAE384", Offset = "0xCAE384", VA = "0xCAE384", Slot = "9")]
		public override void Pulse()
		{
		}

		[Token(Token = "0x6000E2A")]
		[Address(RVA = "0xCAE710", Offset = "0xCAE710", VA = "0xCAE710", Slot = "6")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000E2B")]
		[Address(RVA = "0xCAE72C", Offset = "0xCAE72C", VA = "0xCAE72C", Slot = "10")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000E2C")]
		[Address(RVA = "0xCAE788", Offset = "0xCAE788", VA = "0xCAE788")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E2D")]
		[Address(RVA = "0xCAE3AC", Offset = "0xCAE3AC", VA = "0xCAE3AC")]
		private void testSensor()
		{
		}

		[Token(Token = "0x6000E2E")]
		[Address(RVA = "0xCAE88C", Offset = "0xCAE88C", VA = "0xCAE88C")]
		private void logInsufficientBufferSize()
		{
		}

		[Token(Token = "0x6000E2F")]
		[Address(RVA = "0xCAE7E0", Offset = "0xCAE7E0", VA = "0xCAE7E0")]
		private void prepareCollidersBuffer()
		{
		}

		[Token(Token = "0x6000E30")]
		[Address(RVA = "0xCAE940", Offset = "0xCAE940", VA = "0xCAE940")]
		private void reset()
		{
		}

		[Token(Token = "0x6000E31")]
		[Address(RVA = "0xCAE95C", Offset = "0xCAE95C", VA = "0xCAE95C", Slot = "11")]
		public override void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000E32")]
		[Address(RVA = "0xCAEA10", Offset = "0xCAEA10", VA = "0xCAEA10")]
		public RangeSensor()
		{
		}
	}
	[Token(Token = "0x20001C8")]
	[ExecuteInEditMode]
	public class RangeSensor2D : BaseAreaSensor
	{
		[Token(Token = "0x20001C9")]
		public enum UpdateMode
		{
			[Token(Token = "0x4000BB7")]
			FixedInterval,
			[Token(Token = "0x4000BB8")]
			Manual
		}

		[Token(Token = "0x20001CA")]
		public delegate void SensorUpdateHandler();

		[Token(Token = "0x4000BAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Tooltip("The radius in world units that the sensor detects colliders in.")]
		public float SensorRange;

		[Token(Token = "0x4000BAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("The physics layer mask that the sensor detects colliders on.")]
		public LayerMask DetectsOnLayers;

		[Token(Token = "0x4000BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[Tooltip("Automatic or manually pulsing mode.")]
		public UpdateMode SensorUpdateMode;

		[Token(Token = "0x4000BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("If the chosen update mode is automatic then this is the interval in seconds between each automatic pulse.")]
		public float CheckInterval;

		[Token(Token = "0x4000BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Tooltip("The initial size of the buffer used when calling Physics.OverlapSphereNoAlloc.")]
		public int InitialBufferSize;

		[Token(Token = "0x4000BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("When set true the buffer used with Physics.OverlapSphereNoAlloc is expanded if its not sufficiently large.")]
		public bool DynamicallyIncreaseBufferSize;

		[Token(Token = "0x4000BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private HashSet<GameObject> previousDetectedObjects;

		[Token(Token = "0x4000BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Collider2D[] collidersBuffer;

		[Token(Token = "0x4000BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private float timer;

		[Token(Token = "0x17000147")]
		public int CurrentBufferSize
		{
			[Token(Token = "0x6000E37")]
			[Address(RVA = "0xCAEBC8", Offset = "0xCAEBC8", VA = "0xCAEBC8")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E38")]
			[Address(RVA = "0xCAEBD0", Offset = "0xCAEBD0", VA = "0xCAEBD0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1400000D")]
		public event SensorUpdateHandler OnSensorUpdate
		{
			[Token(Token = "0x6000E39")]
			[Address(RVA = "0xCAEBD8", Offset = "0xCAEBD8", VA = "0xCAEBD8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E3A")]
			[Address(RVA = "0xCAEC74", Offset = "0xCAEC74", VA = "0xCAEC74")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000E3B")]
		[Address(RVA = "0xCAED10", Offset = "0xCAED10", VA = "0xCAED10", Slot = "9")]
		public override void Pulse()
		{
		}

		[Token(Token = "0x6000E3C")]
		[Address(RVA = "0xCAF0C0", Offset = "0xCAF0C0", VA = "0xCAF0C0", Slot = "6")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000E3D")]
		[Address(RVA = "0xCAF0DC", Offset = "0xCAF0DC", VA = "0xCAF0DC", Slot = "10")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000E3E")]
		[Address(RVA = "0xCAF138", Offset = "0xCAF138", VA = "0xCAF138")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E3F")]
		[Address(RVA = "0xCAED38", Offset = "0xCAED38", VA = "0xCAED38")]
		private void testSensor()
		{
		}

		[Token(Token = "0x6000E40")]
		[Address(RVA = "0xCAF23C", Offset = "0xCAF23C", VA = "0xCAF23C")]
		private void logInsufficientBufferSize()
		{
		}

		[Token(Token = "0x6000E41")]
		[Address(RVA = "0xCAF190", Offset = "0xCAF190", VA = "0xCAF190")]
		private void prepareCollidersBuffer()
		{
		}

		[Token(Token = "0x6000E42")]
		[Address(RVA = "0xCAF2F0", Offset = "0xCAF2F0", VA = "0xCAF2F0")]
		private void reset()
		{
		}

		[Token(Token = "0x6000E43")]
		[Address(RVA = "0xCAF30C", Offset = "0xCAF30C", VA = "0xCAF30C", Slot = "11")]
		public override void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000E44")]
		[Address(RVA = "0xCAF3C0", Offset = "0xCAF3C0", VA = "0xCAF3C0")]
		public RangeSensor2D()
		{
		}
	}
	[Token(Token = "0x20001CB")]
	[ExecuteInEditMode]
	public class RaySensor : Sensor
	{
		[Token(Token = "0x20001CC")]
		public enum UpdateMode
		{
			[Token(Token = "0x4000BD3")]
			EachFrame,
			[Token(Token = "0x4000BD4")]
			Manual
		}

		[Token(Token = "0x20001CD")]
		public delegate void SensorUpdateHandler();

		[Token(Token = "0x20001CE")]
		private class RayDistanceComparer : IComparer<RaycastHit>
		{
			[Token(Token = "0x6000E6C")]
			[Address(RVA = "0xB0FDC8", Offset = "0xB0FDC8", VA = "0xB0FDC8", Slot = "4")]
			public int Compare(RaycastHit x, RaycastHit y)
			{
				return default(int);
			}

			[Token(Token = "0x6000E6D")]
			[Address(RVA = "0xB0FE3C", Offset = "0xB0FE3C", VA = "0xB0FE3C")]
			public RayDistanceComparer()
			{
			}
		}

		[Token(Token = "0x4000BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The detection range in world units.")]
		public float Length;

		[Token(Token = "0x4000BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("The radius of the ray, with values above zero the sensor will do a spherecast")]
		public float Radius;

		[Token(Token = "0x4000BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("A layermask for colliders that will block the ray sensors path.")]
		public LayerMask ObstructedByLayers;

		[Token(Token = "0x4000BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("A layermask for colliders that are detected by the ray sensor.")]
		public LayerMask DetectsOnLayers;

		[Token(Token = "0x4000BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("In Collider mode the sensor detects GameObjects attached to colliders. In RigidBody mode it detects the RigidBody GameObject attached to colliders.")]
		public SensorMode DetectionMode;

		[Token(Token = "0x4000BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("What direction does the ray sensor point in.")]
		public Vector3 Direction;

		[Token(Token = "0x4000BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Is the Direction parameter in world space or local space.")]
		public bool WorldSpace;

		[Token(Token = "0x4000BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("Should the sensor pulse each frame automatically or will it be pulsed manually.")]
		public UpdateMode SensorUpdateMode;

		[Token(Token = "0x4000BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("The initial size of the buffer used when calling Physics.RaycastNonAlloc or Physics.SphereCastNonAlloc.")]
		public int InitialBufferSize;

		[Token(Token = "0x4000BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("When set true the buffer used with Physics.RaycastNonAlloc is expanded if its not sufficiently large.")]
		public bool DynamicallyIncreaseBufferSize;

		[Token(Token = "0x4000BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		public SensorEventHandler OnObstruction;

		[Token(Token = "0x4000BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		public SensorEventHandler OnClear;

		[Token(Token = "0x4000BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private RayDistanceComparer distanceComparer;

		[Token(Token = "0x4000BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool isObstructed;

		[Token(Token = "0x4000BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private RaycastHit obstructionRayHit;

		[Token(Token = "0x4000BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Dictionary<GameObject, RaycastHit> detectedObjectHits;

		[Token(Token = "0x4000BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private HashSet<GameObject> previousDetectedObjects;

		[Token(Token = "0x4000BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private List<GameObject> detectedObjectsInternal;

		[Token(Token = "0x4000BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private List<GameObject> detectedObjects;

		[Token(Token = "0x4000BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private RaycastHit[] hitsBuffer;

		[Token(Token = "0x4000BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static readonly Color GizmoColor;

		[Token(Token = "0x4000BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected static readonly Color GizmoBlockedColor;

		[Token(Token = "0x4000BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static Mesh primitiveCylinderCache;

		[Token(Token = "0x17000148")]
		public int CurrentBufferSize
		{
			[Token(Token = "0x6000E49")]
			[Address(RVA = "0xCAF578", Offset = "0xCAF578", VA = "0xCAF578")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E4A")]
			[Address(RVA = "0xCAF580", Offset = "0xCAF580", VA = "0xCAF580")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000149")]
		public override List<GameObject> DetectedObjects
		{
			[Token(Token = "0x6000E4B")]
			[Address(RVA = "0xCAF588", Offset = "0xCAF588", VA = "0xCAF588", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014A")]
		public override List<GameObject> DetectedObjectsOrderedByDistance
		{
			[Token(Token = "0x6000E4C")]
			[Address(RVA = "0xCAF734", Offset = "0xCAF734", VA = "0xCAF734", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014B")]
		public List<RaycastHit> DetectedObjectRayHits
		{
			[Token(Token = "0x6000E4D")]
			[Address(RVA = "0xCAF740", Offset = "0xCAF740", VA = "0xCAF740")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014C")]
		public Collider ObstructedBy
		{
			[Token(Token = "0x6000E4E")]
			[Address(RVA = "0xCAF7E4", Offset = "0xCAF7E4", VA = "0xCAF7E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700014D")]
		public RaycastHit ObstructionRayHit
		{
			[Token(Token = "0x6000E4F")]
			[Address(RVA = "0xCAF7F0", Offset = "0xCAF7F0", VA = "0xCAF7F0")]
			get
			{
				return default(RaycastHit);
			}
		}

		[Token(Token = "0x1700014E")]
		public bool IsObstructed
		{
			[Token(Token = "0x6000E50")]
			[Address(RVA = "0xCAF808", Offset = "0xCAF808", VA = "0xCAF808")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700014F")]
		private Vector3 direction
		{
			[Token(Token = "0x6000E53")]
			[Address(RVA = "0xCAF9C8", Offset = "0xCAF9C8", VA = "0xCAF9C8")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000150")]
		private static Mesh primitiveCylinder
		{
			[Token(Token = "0x6000E64")]
			[Address(RVA = "0xCB0C30", Offset = "0xCB0C30", VA = "0xCB0C30")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1400000E")]
		public event SensorUpdateHandler OnSensorUpdate
		{
			[Token(Token = "0x6000E51")]
			[Address(RVA = "0xCAF890", Offset = "0xCAF890", VA = "0xCAF890")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E52")]
			[Address(RVA = "0xCAF92C", Offset = "0xCAF92C", VA = "0xCAF92C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000E54")]
		[Address(RVA = "0xCAFBB0", Offset = "0xCAFBB0", VA = "0xCAFBB0", Slot = "7")]
		public override bool IsDetected(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E55")]
		[Address(RVA = "0xCAFC08", Offset = "0xCAFC08", VA = "0xCAFC08", Slot = "9")]
		public override void Pulse()
		{
		}

		[Token(Token = "0x6000E56")]
		[Address(RVA = "0xCAFCF4", Offset = "0xCAFCF4", VA = "0xCAFCF4")]
		public RaycastHit GetRayHit(GameObject detectedGameObject)
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x6000E57")]
		[Address(RVA = "0xCAFDCC", Offset = "0xCAFDCC", VA = "0xCAFDCC", Slot = "6")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000E58")]
		[Address(RVA = "0xCAFE68", Offset = "0xCAFE68", VA = "0xCAFE68")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E59")]
		[Address(RVA = "0xCAFF90", Offset = "0xCAFF90", VA = "0xCAFF90")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E5A")]
		[Address(RVA = "0xCAFFC0", Offset = "0xCAFFC0", VA = "0xCAFFC0")]
		private bool layerMaskIsSubsetOf(LayerMask lm, LayerMask subsetOf)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E5B")]
		[Address(RVA = "0xCAFC30", Offset = "0xCAFC30", VA = "0xCAFC30")]
		private void testRay()
		{
		}

		[Token(Token = "0x6000E5C")]
		[Address(RVA = "0xCB05F8", Offset = "0xCB05F8", VA = "0xCB05F8")]
		private void obstructionEvents()
		{
		}

		[Token(Token = "0x6000E5D")]
		[Address(RVA = "0xCB070C", Offset = "0xCB070C", VA = "0xCB070C")]
		private void detectionEvents()
		{
		}

		[Token(Token = "0x6000E5E")]
		[Address(RVA = "0xCB0014", Offset = "0xCB0014", VA = "0xCB0014")]
		private void testRaySingle()
		{
		}

		[Token(Token = "0x6000E5F")]
		[Address(RVA = "0xCB0234", Offset = "0xCB0234", VA = "0xCB0234")]
		private void testRayMulti()
		{
		}

		[Token(Token = "0x6000E60")]
		[Address(RVA = "0xCB0B7C", Offset = "0xCB0B7C", VA = "0xCB0B7C")]
		private void logInsufficientBufferSize()
		{
		}

		[Token(Token = "0x6000E61")]
		[Address(RVA = "0xCB0AD0", Offset = "0xCB0AD0", VA = "0xCB0AD0")]
		private void prepareHitsBuffer()
		{
		}

		[Token(Token = "0x6000E62")]
		[Address(RVA = "0xCB0888", Offset = "0xCB0888", VA = "0xCB0888")]
		private void addRayHit(RaycastHit hit)
		{
		}

		[Token(Token = "0x6000E63")]
		[Address(RVA = "0xCAFEC0", Offset = "0xCAFEC0", VA = "0xCAFEC0")]
		private void clearDetectedObjects()
		{
		}

		[Token(Token = "0x6000E65")]
		[Address(RVA = "0xCB0D68", Offset = "0xCB0D68", VA = "0xCB0D68")]
		public void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000E66")]
		[Address(RVA = "0xCB1390", Offset = "0xCB1390", VA = "0xCB1390")]
		public RaySensor()
		{
		}
	}
	[Token(Token = "0x20001CF")]
	[ExecuteInEditMode]
	public class RaySensor2D : Sensor
	{
		[Token(Token = "0x20001D0")]
		public enum UpdateMode
		{
			[Token(Token = "0x4000BEF")]
			EachFrame,
			[Token(Token = "0x4000BF0")]
			Manual
		}

		[Token(Token = "0x20001D1")]
		public delegate void SensorUpdateHandler();

		[Token(Token = "0x20001D2")]
		private class RayDistanceComparer2D : IComparer<RaycastHit2D>
		{
			[Token(Token = "0x6000E91")]
			[Address(RVA = "0xB1222C", Offset = "0xB1222C", VA = "0xB1222C", Slot = "4")]
			public int Compare(RaycastHit2D x, RaycastHit2D y)
			{
				return default(int);
			}

			[Token(Token = "0x6000E92")]
			[Address(RVA = "0xB120BC", Offset = "0xB120BC", VA = "0xB120BC")]
			public RayDistanceComparer2D()
			{
			}
		}

		[Token(Token = "0x4000BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The detection range in world units.")]
		public float Length;

		[Token(Token = "0x4000BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("The radius of the ray, with values above zero the sensor will do a circlecast")]
		public float Radius;

		[Token(Token = "0x4000BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("A layermask for colliders that will block the ray sensors path.")]
		public LayerMask ObstructedByLayers;

		[Token(Token = "0x4000BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("A layermask for colliders that are detected by the ray sensor.")]
		public LayerMask DetectsOnLayers;

		[Token(Token = "0x4000BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("In Collider mode the sensor detects GameObjects attached to colliders. In RigidBody mode it detects the RigidBody GameObject attached to colliders.")]
		public SensorMode DetectionMode;

		[Token(Token = "0x4000BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("What direction does the ray sensor point in.")]
		public Vector2 Direction;

		[Token(Token = "0x4000BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Is the Direction parameter in world space or local space.")]
		public bool WorldSpace;

		[Token(Token = "0x4000BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Should the sensor pulse each frame automatically or will it be pulsed manually.")]
		public UpdateMode SensorUpdateMode;

		[Token(Token = "0x4000BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("The initial size of the buffer used when calling Physics2D.RaycastNonAlloc or Physics2D.CircleCastNnoAlloc.")]
		public int InitialBufferSize;

		[Token(Token = "0x4000BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("When set true the buffer used with Physics2D.RaycastNonAlloc is expanded if its not sufficiently large.")]
		public bool DynamicallyIncreaseBufferSize;

		[Token(Token = "0x4000BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		public SensorEventHandler OnObstruction;

		[Token(Token = "0x4000BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		public SensorEventHandler OnClear;

		[Token(Token = "0x4000BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private RayDistanceComparer2D distanceComparer;

		[Token(Token = "0x4000BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool isObstructed;

		[Token(Token = "0x4000BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private RaycastHit2D obstructionRayHit;

		[Token(Token = "0x4000BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Dictionary<GameObject, RaycastHit2D> detectedObjectHits;

		[Token(Token = "0x4000BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private HashSet<GameObject> previousDetectedObjects;

		[Token(Token = "0x4000BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private List<GameObject> detectedObjectsInternal;

		[Token(Token = "0x4000BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private List<GameObject> detectedObjects;

		[Token(Token = "0x4000BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private RaycastHit2D[] hitsBuffer;

		[Token(Token = "0x4000BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static readonly Color GizmoColor;

		[Token(Token = "0x4000BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected static readonly Color GizmoBlockedColor;

		[Token(Token = "0x4000BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static Mesh primitiveBoxCache;

		[Token(Token = "0x17000151")]
		public int CurrentBufferSize
		{
			[Token(Token = "0x6000E6E")]
			[Address(RVA = "0xB0FE44", Offset = "0xB0FE44", VA = "0xB0FE44")]
			[CompilerGenerated]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6000E6F")]
			[Address(RVA = "0xB0FE4C", Offset = "0xB0FE4C", VA = "0xB0FE4C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000152")]
		public override List<GameObject> DetectedObjects
		{
			[Token(Token = "0x6000E70")]
			[Address(RVA = "0xB0FE54", Offset = "0xB0FE54", VA = "0xB0FE54", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000153")]
		public override List<GameObject> DetectedObjectsOrderedByDistance
		{
			[Token(Token = "0x6000E71")]
			[Address(RVA = "0xB10000", Offset = "0xB10000", VA = "0xB10000", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000154")]
		public List<RaycastHit2D> DetectedObjectRayHits
		{
			[Token(Token = "0x6000E72")]
			[Address(RVA = "0xB1000C", Offset = "0xB1000C", VA = "0xB1000C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000155")]
		public Collider2D ObstructedBy
		{
			[Token(Token = "0x6000E73")]
			[Address(RVA = "0xB100B0", Offset = "0xB100B0", VA = "0xB100B0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000156")]
		public RaycastHit2D ObstructionRayHit
		{
			[Token(Token = "0x6000E74")]
			[Address(RVA = "0xB100BC", Offset = "0xB100BC", VA = "0xB100BC")]
			get
			{
				return default(RaycastHit2D);
			}
		}

		[Token(Token = "0x17000157")]
		public bool IsObstructed
		{
			[Token(Token = "0x6000E75")]
			[Address(RVA = "0xB100D4", Offset = "0xB100D4", VA = "0xB100D4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000158")]
		private Vector2 direction
		{
			[Token(Token = "0x6000E78")]
			[Address(RVA = "0xB10294", Offset = "0xB10294", VA = "0xB10294")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x17000159")]
		private static Mesh primitiveBox
		{
			[Token(Token = "0x6000E89")]
			[Address(RVA = "0xB1175C", Offset = "0xB1175C", VA = "0xB1175C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1400000F")]
		public event SensorUpdateHandler OnSensorUpdate
		{
			[Token(Token = "0x6000E76")]
			[Address(RVA = "0xB1015C", Offset = "0xB1015C", VA = "0xB1015C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000E77")]
			[Address(RVA = "0xB101F8", Offset = "0xB101F8", VA = "0xB101F8")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000E79")]
		[Address(RVA = "0xB10424", Offset = "0xB10424", VA = "0xB10424", Slot = "7")]
		public override bool IsDetected(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E7A")]
		[Address(RVA = "0xB1047C", Offset = "0xB1047C", VA = "0xB1047C", Slot = "9")]
		public override void Pulse()
		{
		}

		[Token(Token = "0x6000E7B")]
		[Address(RVA = "0xB10568", Offset = "0xB10568", VA = "0xB10568")]
		public RaycastHit2D GetRayHit(GameObject detectedGameObject)
		{
			return default(RaycastHit2D);
		}

		[Token(Token = "0x6000E7C")]
		[Address(RVA = "0xB10640", Offset = "0xB10640", VA = "0xB10640", Slot = "6")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6000E7D")]
		[Address(RVA = "0xB107E8", Offset = "0xB107E8", VA = "0xB107E8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000E7E")]
		[Address(RVA = "0xB10910", Offset = "0xB10910", VA = "0xB10910")]
		private void Update()
		{
		}

		[Token(Token = "0x6000E7F")]
		[Address(RVA = "0xB10940", Offset = "0xB10940", VA = "0xB10940")]
		private bool layerMaskIsSubsetOf(LayerMask lm, LayerMask subsetOf)
		{
			return default(bool);
		}

		[Token(Token = "0x6000E80")]
		[Address(RVA = "0xB104A4", Offset = "0xB104A4", VA = "0xB104A4")]
		private void testRay()
		{
		}

		[Token(Token = "0x6000E81")]
		[Address(RVA = "0xB10F90", Offset = "0xB10F90", VA = "0xB10F90")]
		private void obstructionEvents()
		{
		}

		[Token(Token = "0x6000E82")]
		[Address(RVA = "0xB110A4", Offset = "0xB110A4", VA = "0xB110A4")]
		private void detectionEvents()
		{
		}

		[Token(Token = "0x6000E83")]
		[Address(RVA = "0xB10994", Offset = "0xB10994", VA = "0xB10994")]
		private void testRaySingle()
		{
		}

		[Token(Token = "0x6000E84")]
		[Address(RVA = "0xB10BD8", Offset = "0xB10BD8", VA = "0xB10BD8")]
		private void testRayMulti()
		{
		}

		[Token(Token = "0x6000E85")]
		[Address(RVA = "0xB11510", Offset = "0xB11510", VA = "0xB11510")]
		private void logInsufficientBufferSize()
		{
		}

		[Token(Token = "0x6000E86")]
		[Address(RVA = "0xB11464", Offset = "0xB11464", VA = "0xB11464")]
		private void prepareHitsBuffer()
		{
		}

		[Token(Token = "0x6000E87")]
		[Address(RVA = "0xB11220", Offset = "0xB11220", VA = "0xB11220")]
		private void addRayHit(RaycastHit2D hit)
		{
		}

		[Token(Token = "0x6000E88")]
		[Address(RVA = "0xB10840", Offset = "0xB10840", VA = "0xB10840")]
		private void clearDetectedObjects()
		{
		}

		[Token(Token = "0x6000E8A")]
		[Address(RVA = "0xB11894", Offset = "0xB11894", VA = "0xB11894")]
		public void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000E8B")]
		[Address(RVA = "0xB11F14", Offset = "0xB11F14", VA = "0xB11F14")]
		public RaySensor2D()
		{
		}
	}
	[Token(Token = "0x20001D3")]
	[ExecuteInEditMode]
	public abstract class BaseAreaSensor : Sensor
	{
		[Token(Token = "0x20001D4")]
		private class RayCastTargetsCache : ObjectCache<RayCastTargets>
		{
			[Token(Token = "0x6000EAD")]
			[Address(RVA = "0xB15DBC", Offset = "0xB15DBC", VA = "0xB15DBC", Slot = "4")]
			public override void Dispose(RayCastTargets obj)
			{
			}

			[Token(Token = "0x6000EAE")]
			[Address(RVA = "0xB15D74", Offset = "0xB15D74", VA = "0xB15D74")]
			public RayCastTargetsCache()
			{
			}
		}

		[Token(Token = "0x20001D5")]
		private struct RayCastResult
		{
			[Token(Token = "0x4000C08")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public GameObject go;

			[Token(Token = "0x4000C09")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Vector2 testPoint;

			[Token(Token = "0x4000C0A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector2 obstructionPoint;

			[Token(Token = "0x4000C0B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public bool isObstructed;
		}

		[Token(Token = "0x20001D6")]
		private class RayCastTargets
		{
			[Token(Token = "0x4000C0C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private GameObject go;

			[Token(Token = "0x4000C0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Transform[] targetTransforms;

			[Token(Token = "0x4000C0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private List<Vector2> targetPoints;

			[Token(Token = "0x4000C0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private List<Vector2> returnPoints;

			[Token(Token = "0x4000C10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private List<bool> isTargetVisible;

			[Token(Token = "0x6000EAF")]
			[Address(RVA = "0xB15EA0", Offset = "0xB15EA0", VA = "0xB15EA0")]
			public RayCastTargets()
			{
			}

			[Token(Token = "0x6000EB0")]
			[Address(RVA = "0xB13908", Offset = "0xB13908", VA = "0xB13908")]
			public bool IsTransforms()
			{
				return default(bool);
			}

			[Token(Token = "0x6000EB1")]
			[Address(RVA = "0xB14BD0", Offset = "0xB14BD0", VA = "0xB14BD0")]
			public void Set(GameObject go, Transform[] targets)
			{
			}

			[Token(Token = "0x6000EB2")]
			[Address(RVA = "0xB14EB0", Offset = "0xB14EB0", VA = "0xB14EB0")]
			public void Set(GameObject go, List<Vector2> targets)
			{
			}

			[Token(Token = "0x6000EB3")]
			[Address(RVA = "0xB12970", Offset = "0xB12970", VA = "0xB12970")]
			public List<Transform> GetVisibleTransforms()
			{
				return null;
			}

			[Token(Token = "0x6000EB4")]
			[Address(RVA = "0xB12BC8", Offset = "0xB12BC8", VA = "0xB12BC8")]
			public List<Vector2> GetVisibleTargetPositions()
			{
				return null;
			}

			[Token(Token = "0x6000EB5")]
			[Address(RVA = "0xB14B68", Offset = "0xB14B68", VA = "0xB14B68")]
			public void SetIsTargetVisible(int i, bool isVisible)
			{
			}

			[Token(Token = "0x6000EB6")]
			[Address(RVA = "0xB145FC", Offset = "0xB145FC", VA = "0xB145FC")]
			public List<Vector2> getTargetPoints()
			{
				return null;
			}

			[Token(Token = "0x6000EB7")]
			[Address(RVA = "0xB15E1C", Offset = "0xB15E1C", VA = "0xB15E1C")]
			public void dispose()
			{
			}
		}

		[Token(Token = "0x4000BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("In Collider mode the sensor detects GameObjects attached to colliders. In RigidBody mode it detects the RigidBody GameObject attached to colliders.")]
		public SensorMode DetectionMode;

		[Token(Token = "0x4000BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("GameObjects are only detected if they pass a line of sight test.")]
		public bool RequiresLineOfSight;

		[Token(Token = "0x4000BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Line of Sight rays will be tested against this layer mask.")]
		public LayerMask BlocksLineOfSight;

		[Token(Token = "0x4000BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("If true will only perform line of sight tests on objects with a LOSTargets component, if false then the sensor will auto-generate test points for object which don't have this component.")]
		public bool TestLOSTargetsOnly;

		[Token(Token = "0x4000BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Range(1f, 20f)]
		[Tooltip("Number of test points the Sensor will generate on objects that don't have a LOSTargets component.")]
		public int NumberOfRays;

		[Token(Token = "0x4000BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Range(0f, 1f)]
		[Tooltip("Minimum visibility an object must be for it to be detected.")]
		public float MinimumVisibility;

		[Token(Token = "0x4000BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public HashSet<GameObject> ShowRayCastDebug;

		[Token(Token = "0x4000BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<GameObject, List<Collider2D>> gameObjectColliders;

		[Token(Token = "0x4000BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Dictionary<GameObject, List<Collider2D>> rigidBodyColliders;

		[Token(Token = "0x4000BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Dictionary<Collider2D, GameObject> attachedRigidBody;

		[Token(Token = "0x4000BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Dictionary<GameObject, RayCastTargets> rayCastTargets;

		[Token(Token = "0x4000BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Dictionary<GameObject, float> objectVisibility;

		[Token(Token = "0x4000BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<RayCastResult> raycastResults;

		[Token(Token = "0x4000BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private List<GameObject> gameObjectList;

		[Token(Token = "0x4000BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private List<GameObject> detectedObjects;

		[Token(Token = "0x4000C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<GameObject> detectedObjectsOrderedByDistance;

		[Token(Token = "0x4000C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private DistanceFromPointComparer distanceComparer;

		[Token(Token = "0x4000C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private int prevNumberOfRays;

		[Token(Token = "0x4000C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static ListCache<Collider2D> colliderListCache;

		[Token(Token = "0x4000C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		protected static ListCache<Vector2> vector2ListCache;

		[Token(Token = "0x4000C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static RayCastTargetsCache rayCastTargetsCache;

		[Token(Token = "0x4000C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected static readonly Color GizmoColor;

		[Token(Token = "0x4000C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected static readonly Color GizmoBlockedColor;

		[Token(Token = "0x1700015A")]
		public override List<GameObject> DetectedObjects
		{
			[Token(Token = "0x6000E93")]
			[Address(RVA = "0xB122A0", Offset = "0xB122A0", VA = "0xB122A0", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015B")]
		public override List<GameObject> DetectedObjectsOrderedByDistance
		{
			[Token(Token = "0x6000E94")]
			[Address(RVA = "0xB12688", Offset = "0xB12688", VA = "0xB12688", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015C")]
		public Dictionary<GameObject, float> ObjectVisibilities
		{
			[Token(Token = "0x6000E95")]
			[Address(RVA = "0xB12780", Offset = "0xB12780", VA = "0xB12780")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000E96")]
		[Address(RVA = "0xB12788", Offset = "0xB12788", VA = "0xB12788", Slot = "8")]
		public override float GetVisibility(GameObject go)
		{
			return default(float);
		}

		[Token(Token = "0x6000E97")]
		[Address(RVA = "0xB12870", Offset = "0xB12870", VA = "0xB12870")]
		public List<Transform> GetVisibleTransforms(GameObject go)
		{
			return null;
		}

		[Token(Token = "0x6000E98")]
		[Address(RVA = "0xB12AC8", Offset = "0xB12AC8", VA = "0xB12AC8")]
		public List<Vector2> GetVisiblePositions(GameObject go)
		{
			return null;
		}

		[Token(Token = "0x6000E99")]
		[Address(RVA = "0xB12E18", Offset = "0xB12E18", VA = "0xB12E18", Slot = "10")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000E9A")]
		[Address(RVA = "0xB131F8", Offset = "0xB131F8", VA = "0xB131F8")]
		protected GameObject addCollider(Collider2D c)
		{
			return null;
		}

		[Token(Token = "0x6000E9B")]
		[Address(RVA = "0xB13B38", Offset = "0xB13B38", VA = "0xB13B38")]
		protected GameObject removeCollider(Collider2D c)
		{
			return null;
		}

		[Token(Token = "0x6000E9C")]
		[Address(RVA = "0xB13D60", Offset = "0xB13D60", VA = "0xB13D60")]
		protected void clearDestroyedGameObjects()
		{
		}

		[Token(Token = "0x6000E9D")]
		[Address(RVA = "0xB12EF4", Offset = "0xB12EF4", VA = "0xB12EF4")]
		protected void clearColliders()
		{
		}

		[Token(Token = "0x6000E9E")]
		[Address(RVA = "0xB142D8", Offset = "0xB142D8", VA = "0xB142D8")]
		protected void clearLineOfSight()
		{
		}

		[Token(Token = "0x6000E9F")]
		[Address(RVA = "0xB1436C", Offset = "0xB1436C", VA = "0xB1436C")]
		protected void refreshLineOfSight()
		{
		}

		[Token(Token = "0x6000EA0")]
		[Address(RVA = "0xB13918", Offset = "0xB13918", VA = "0xB13918")]
		private float testObjectVisibility(GameObject go, RayCastTargets targets)
		{
			return default(float);
		}

		[Token(Token = "0x6000EA1")]
		[Address(RVA = "0xB13768", Offset = "0xB13768", VA = "0xB13768")]
		private RayCastTargets getRayCastTargets(GameObject go)
		{
			return null;
		}

		[Token(Token = "0x6000EA2")]
		[Address(RVA = "0xB14CCC", Offset = "0xB14CCC", VA = "0xB14CCC")]
		private List<Vector2> generateRayCastTargets(GameObject go)
		{
			return null;
		}

		[Token(Token = "0x6000EA3")]
		[Address(RVA = "0xB147FC", Offset = "0xB147FC", VA = "0xB147FC")]
		private bool isInLineOfSight(GameObject go, Vector2 testPoint, out Vector2 obstructionPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EA4")]
		[Address(RVA = "0xB14FB8", Offset = "0xB14FB8", VA = "0xB14FB8")]
		private Vector2 getCentreOfColliders(GameObject goRoot, List<Collider2D> goColliders)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000EA5")]
		[Address(RVA = "0xB15108", Offset = "0xB15108", VA = "0xB15108")]
		private Vector2 getRandomPointInColliders(GameObject goRoot, List<Collider2D> colliders)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000EA6")]
		[Address(RVA = "0xB134C8", Offset = "0xB134C8", VA = "0xB134C8")]
		private bool addColliderToMap(Collider2D c, GameObject go, Dictionary<GameObject, List<Collider2D>> dict)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EA7")]
		[Address(RVA = "0xB141AC", Offset = "0xB141AC", VA = "0xB141AC")]
		private bool removeColliderFromMap(Collider2D c, GameObject go, Dictionary<GameObject, List<Collider2D>> dict)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EA8")]
		[Address(RVA = "0xB130CC", Offset = "0xB130CC", VA = "0xB130CC")]
		private void clearRayCastTargets()
		{
		}

		[Token(Token = "0x6000EA9")]
		[Address(RVA = "0xB13664", Offset = "0xB13664", VA = "0xB13664")]
		private void disposeRayCastTarget(GameObject forGameObject)
		{
		}

		[Token(Token = "0x6000EAA")]
		[Address(RVA = "0xB153D8", Offset = "0xB153D8", VA = "0xB153D8", Slot = "11")]
		public virtual void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000EAB")]
		[Address(RVA = "0xB159DC", Offset = "0xB159DC", VA = "0xB159DC")]
		protected BaseAreaSensor()
		{
		}
	}
	[Token(Token = "0x20001D7")]
	[ExecuteInEditMode]
	public abstract class BaseVolumeSensor : Sensor
	{
		[Token(Token = "0x20001D8")]
		private class RayCastTargetsCache : ObjectCache<RayCastTargets>
		{
			[Token(Token = "0x6000ED2")]
			[Address(RVA = "0xB19BD4", Offset = "0xB19BD4", VA = "0xB19BD4", Slot = "4")]
			public override void Dispose(RayCastTargets obj)
			{
			}

			[Token(Token = "0x6000ED3")]
			[Address(RVA = "0xB19B8C", Offset = "0xB19B8C", VA = "0xB19B8C")]
			public RayCastTargetsCache()
			{
			}
		}

		[Token(Token = "0x20001D9")]
		private struct RayCastResult
		{
			[Token(Token = "0x4000C28")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public GameObject go;

			[Token(Token = "0x4000C29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Vector3 testPoint;

			[Token(Token = "0x4000C2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 obstructionPoint;

			[Token(Token = "0x4000C2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool isObstructed;
		}

		[Token(Token = "0x20001DA")]
		private class RayCastTargets
		{
			[Token(Token = "0x4000C2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private GameObject go;

			[Token(Token = "0x4000C2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private Transform[] targetTransforms;

			[Token(Token = "0x4000C2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private List<Vector3> targetPoints;

			[Token(Token = "0x4000C2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private List<Vector3> returnPoints;

			[Token(Token = "0x4000C30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private List<bool> isTargetVisible;

			[Token(Token = "0x6000ED4")]
			[Address(RVA = "0xB19CB8", Offset = "0xB19CB8", VA = "0xB19CB8")]
			public RayCastTargets()
			{
			}

			[Token(Token = "0x6000ED5")]
			[Address(RVA = "0xB175B8", Offset = "0xB175B8", VA = "0xB175B8")]
			public bool IsTransforms()
			{
				return default(bool);
			}

			[Token(Token = "0x6000ED6")]
			[Address(RVA = "0xB18908", Offset = "0xB18908", VA = "0xB18908")]
			public void Set(GameObject go, Transform[] targets)
			{
			}

			[Token(Token = "0x6000ED7")]
			[Address(RVA = "0xB18BF8", Offset = "0xB18BF8", VA = "0xB18BF8")]
			public void Set(GameObject go, List<Vector3> targets)
			{
			}

			[Token(Token = "0x6000ED8")]
			[Address(RVA = "0xB1660C", Offset = "0xB1660C", VA = "0xB1660C")]
			public List<Transform> GetVisibleTransforms()
			{
				return null;
			}

			[Token(Token = "0x6000ED9")]
			[Address(RVA = "0xB16864", Offset = "0xB16864", VA = "0xB16864")]
			public List<Vector3> GetVisibleTargetPositions()
			{
				return null;
			}

			[Token(Token = "0x6000EDA")]
			[Address(RVA = "0xB188A0", Offset = "0xB188A0", VA = "0xB188A0")]
			public void SetIsTargetVisible(int i, bool isVisible)
			{
			}

			[Token(Token = "0x6000EDB")]
			[Address(RVA = "0xB1831C", Offset = "0xB1831C", VA = "0xB1831C")]
			public List<Vector3> getTargetPoints()
			{
				return null;
			}

			[Token(Token = "0x6000EDC")]
			[Address(RVA = "0xB19C34", Offset = "0xB19C34", VA = "0xB19C34")]
			public void dispose()
			{
			}
		}

		[Token(Token = "0x4000C11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("In Collider mode the sensor detects GameObjects attached to colliders. In RigidBody mode it detects the RigidBody GameObject attached to colliders.")]
		public SensorMode DetectionMode;

		[Token(Token = "0x4000C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("GameObjects are only detected if they pass a line of sight test.")]
		public bool RequiresLineOfSight;

		[Token(Token = "0x4000C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Line of Sight rays will be tested against this layer mask.")]
		public LayerMask BlocksLineOfSight;

		[Token(Token = "0x4000C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("If true will only perform line of sight tests on objects with a LOSTargets component, if false then the sensor will auto-generate test points for object which don't have this component.")]
		public bool TestLOSTargetsOnly;

		[Token(Token = "0x4000C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Number of test points the Sensor will generate on objects that don't have a LOSTargets component.")]
		[Range(1f, 20f)]
		public int NumberOfRays;

		[Token(Token = "0x4000C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("Minimum visibility an object must be for it to be detected.")]
		[Range(0f, 1f)]
		public float MinimumVisibility;

		[Token(Token = "0x4000C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public HashSet<GameObject> ShowRayCastDebug;

		[Token(Token = "0x4000C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<GameObject, List<Collider>> gameObjectColliders;

		[Token(Token = "0x4000C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Dictionary<GameObject, List<Collider>> rigidBodyColliders;

		[Token(Token = "0x4000C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Dictionary<Collider, GameObject> attachedRigidBody;

		[Token(Token = "0x4000C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Dictionary<GameObject, RayCastTargets> rayCastTargets;

		[Token(Token = "0x4000C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Dictionary<GameObject, float> objectVisibility;

		[Token(Token = "0x4000C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<RayCastResult> raycastResults;

		[Token(Token = "0x4000C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private List<GameObject> gameObjectList;

		[Token(Token = "0x4000C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private List<GameObject> detectedObjects;

		[Token(Token = "0x4000C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private List<GameObject> detectedObjectsOrderedByDistance;

		[Token(Token = "0x4000C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private DistanceFromPointComparer distanceComparer;

		[Token(Token = "0x4000C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private int prevNumberOfRays;

		[Token(Token = "0x4000C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static ListCache<Collider> colliderListCache;

		[Token(Token = "0x4000C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		protected static ListCache<Vector3> vector3ListCache;

		[Token(Token = "0x4000C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static RayCastTargetsCache rayCastTargetsCache;

		[Token(Token = "0x4000C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected static readonly Color GizmoColor;

		[Token(Token = "0x4000C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected static readonly Color GizmoBlockedColor;

		[Token(Token = "0x1700015D")]
		public override List<GameObject> DetectedObjects
		{
			[Token(Token = "0x6000EB8")]
			[Address(RVA = "0xB15F64", Offset = "0xB15F64", VA = "0xB15F64", Slot = "4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015E")]
		public override List<GameObject> DetectedObjectsOrderedByDistance
		{
			[Token(Token = "0x6000EB9")]
			[Address(RVA = "0xB1634C", Offset = "0xB1634C", VA = "0xB1634C", Slot = "5")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700015F")]
		public Dictionary<GameObject, float> ObjectVisibilities
		{
			[Token(Token = "0x6000EBA")]
			[Address(RVA = "0xB16444", Offset = "0xB16444", VA = "0xB16444")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000EBB")]
		[Address(RVA = "0xB1644C", Offset = "0xB1644C", VA = "0xB1644C", Slot = "8")]
		public override float GetVisibility(GameObject go)
		{
			return default(float);
		}

		[Token(Token = "0x6000EBC")]
		[Address(RVA = "0xB1650C", Offset = "0xB1650C", VA = "0xB1650C")]
		public List<Transform> GetVisibleTransforms(GameObject go)
		{
			return null;
		}

		[Token(Token = "0x6000EBD")]
		[Address(RVA = "0xB16764", Offset = "0xB16764", VA = "0xB16764")]
		public List<Vector3> GetVisiblePositions(GameObject go)
		{
			return null;
		}

		[Token(Token = "0x6000EBE")]
		[Address(RVA = "0xB16AC8", Offset = "0xB16AC8", VA = "0xB16AC8", Slot = "10")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6000EBF")]
		[Address(RVA = "0xB16EA8", Offset = "0xB16EA8", VA = "0xB16EA8")]
		protected GameObject addCollider(Collider c)
		{
			return null;
		}

		[Token(Token = "0x6000EC0")]
		[Address(RVA = "0xB17858", Offset = "0xB17858", VA = "0xB17858")]
		protected GameObject removeCollider(Collider c)
		{
			return null;
		}

		[Token(Token = "0x6000EC1")]
		[Address(RVA = "0xB17A80", Offset = "0xB17A80", VA = "0xB17A80")]
		protected void clearDestroyedGameObjects()
		{
		}

		[Token(Token = "0x6000EC2")]
		[Address(RVA = "0xB16BA4", Offset = "0xB16BA4", VA = "0xB16BA4")]
		protected void clearColliders()
		{
		}

		[Token(Token = "0x6000EC3")]
		[Address(RVA = "0xB17FF8", Offset = "0xB17FF8", VA = "0xB17FF8")]
		protected void clearLineOfSight()
		{
		}

		[Token(Token = "0x6000EC4")]
		[Address(RVA = "0xB1808C", Offset = "0xB1808C", VA = "0xB1808C")]
		protected void refreshLineOfSight()
		{
		}

		[Token(Token = "0x6000EC5")]
		[Address(RVA = "0xB175C8", Offset = "0xB175C8", VA = "0xB175C8")]
		private float testObjectVisibility(GameObject go, RayCastTargets targets)
		{
			return default(float);
		}

		[Token(Token = "0x6000EC6")]
		[Address(RVA = "0xB17418", Offset = "0xB17418", VA = "0xB17418")]
		private RayCastTargets getRayCastTargets(GameObject go)
		{
			return null;
		}

		[Token(Token = "0x6000EC7")]
		[Address(RVA = "0xB18A04", Offset = "0xB18A04", VA = "0xB18A04")]
		private List<Vector3> generateRayCastTargets(GameObject go)
		{
			return null;
		}

		[Token(Token = "0x6000EC8")]
		[Address(RVA = "0xB18530", Offset = "0xB18530", VA = "0xB18530")]
		private bool isInLineOfSight(GameObject go, Vector3 testPoint, out Vector3 obstructionPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EC9")]
		[Address(RVA = "0xB18D00", Offset = "0xB18D00", VA = "0xB18D00")]
		private Vector3 getCentreOfColliders(GameObject goRoot, List<Collider> goColliders)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000ECA")]
		[Address(RVA = "0xB18E6C", Offset = "0xB18E6C", VA = "0xB18E6C")]
		private Vector3 getRandomPointInColliders(GameObject goRoot, List<Collider> colliders)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000ECB")]
		[Address(RVA = "0xB17178", Offset = "0xB17178", VA = "0xB17178")]
		private bool addColliderToMap(Collider c, GameObject go, Dictionary<GameObject, List<Collider>> dict)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ECC")]
		[Address(RVA = "0xB17ECC", Offset = "0xB17ECC", VA = "0xB17ECC")]
		private bool removeColliderFromMap(Collider c, GameObject go, Dictionary<GameObject, List<Collider>> dict)
		{
			return default(bool);
		}

		[Token(Token = "0x6000ECD")]
		[Address(RVA = "0xB16D7C", Offset = "0xB16D7C", VA = "0xB16D7C")]
		private void clearRayCastTargets()
		{
		}

		[Token(Token = "0x6000ECE")]
		[Address(RVA = "0xB17314", Offset = "0xB17314", VA = "0xB17314")]
		private void disposeRayCastTarget(GameObject forGameObject)
		{
		}

		[Token(Token = "0x6000ECF")]
		[Address(RVA = "0xB191D8", Offset = "0xB191D8", VA = "0xB191D8", Slot = "11")]
		public virtual void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000ED0")]
		[Address(RVA = "0xB197FC", Offset = "0xB197FC", VA = "0xB197FC")]
		protected BaseVolumeSensor()
		{
		}
	}
	[Token(Token = "0x20001DB")]
	public class ObjectCache<T>
	{
		[Token(Token = "0x4000C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private Stack<T> cache;

		[Token(Token = "0x6000EDD")]
		public ObjectCache()
		{
		}

		[Token(Token = "0x6000EDE")]
		public ObjectCache(int startSize)
		{
		}

		[Token(Token = "0x6000EDF")]
		public T Get()
		{
			return (T)null;
		}

		[Token(Token = "0x6000EE0")]
		public virtual void Dispose(T obj)
		{
		}

		[Token(Token = "0x6000EE1")]
		protected virtual T create()
		{
			return (T)null;
		}
	}
	[Token(Token = "0x20001DC")]
	public class ListCache<T> : ObjectCache<List<T>>
	{
		[Token(Token = "0x6000EE2")]
		public override void Dispose(List<T> obj)
		{
		}

		[Token(Token = "0x6000EE3")]
		public ListCache()
		{
		}
	}
	[Token(Token = "0x20001DD")]
	[RequireComponent(typeof(MeshFilter), typeof(MeshRenderer), typeof(FOVCollider))]
	[ExecuteInEditMode]
	public class RenderFOVCollider : MonoBehaviour
	{
		[Token(Token = "0x4000C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MeshFilter mf;

		[Token(Token = "0x4000C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FOVCollider fov;

		[Token(Token = "0x6000EE4")]
		[Address(RVA = "0xB19D7C", Offset = "0xB19D7C", VA = "0xB19D7C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EE5")]
		[Address(RVA = "0xB19DF8", Offset = "0xB19DF8", VA = "0xB19DF8")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EE6")]
		[Address(RVA = "0xB19EA4", Offset = "0xB19EA4", VA = "0xB19EA4")]
		public RenderFOVCollider()
		{
		}
	}
	[Token(Token = "0x20001DE")]
	[RequireComponent(typeof(MeshFilter), typeof(MeshRenderer), typeof(FOVCollider2D))]
	[ExecuteInEditMode]
	public class RenderFOVCollider2D : MonoBehaviour
	{
		[Token(Token = "0x4000C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MeshFilter mf;

		[Token(Token = "0x4000C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private FOVCollider2D fov;

		[Token(Token = "0x6000EE7")]
		[Address(RVA = "0xB19EAC", Offset = "0xB19EAC", VA = "0xB19EAC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000EE8")]
		[Address(RVA = "0xB19F28", Offset = "0xB19F28", VA = "0xB19F28")]
		private void Update()
		{
		}

		[Token(Token = "0x6000EE9")]
		[Address(RVA = "0xB19FD4", Offset = "0xB19FD4", VA = "0xB19FD4")]
		public RenderFOVCollider2D()
		{
		}
	}
	[Token(Token = "0x20001DF")]
	public enum SensorMode
	{
		[Token(Token = "0x4000C37")]
		Colliders,
		[Token(Token = "0x4000C38")]
		RigidBodies
	}
	[Token(Token = "0x20001E0")]
	public class TagSelectorAttribute : PropertyAttribute
	{
		[Token(Token = "0x6000EEA")]
		[Address(RVA = "0xB19FDC", Offset = "0xB19FDC", VA = "0xB19FDC")]
		public TagSelectorAttribute()
		{
		}
	}
	[Token(Token = "0x20001E1")]
	public abstract class Sensor : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20001E2")]
		public class SensorEventHandler : UnityEvent<Sensor>
		{
			[Token(Token = "0x6000F23")]
			[Address(RVA = "0xB107A0", Offset = "0xB107A0", VA = "0xB107A0")]
			public SensorEventHandler()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20001E3")]
		public class SensorDetectionEventHandler : UnityEvent<GameObject, Sensor>
		{
			[Token(Token = "0x6000F24")]
			[Address(RVA = "0xB19FE4", Offset = "0xB19FE4", VA = "0xB19FE4")]
			public SensorDetectionEventHandler()
			{
			}
		}

		[Token(Token = "0x4000C39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Any GameObject in this list will not be detected by this sensor, however it may still block line of sight.")]
		public List<GameObject> IgnoreList;

		[Token(Token = "0x4000C3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("When set to true the sensor will only detect objects whose tags are in the 'TagFilter' array.")]
		public bool EnableTagFilter;

		[Token(Token = "0x4000C3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Array of tags that will be detected by the sensor.")]
		[TagSelector]
		public string[] AllowedTags;

		[Token(Token = "0x4000C3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		public SensorDetectionEventHandler OnDetected;

		[Token(Token = "0x4000C3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		public SensorDetectionEventHandler OnLostDetection;

		[Token(Token = "0x17000160")]
		public abstract List<GameObject> DetectedObjects
		{
			[Token(Token = "0x6000EEB")]
			get;
		}

		[Token(Token = "0x17000161")]
		public abstract List<GameObject> DetectedObjectsOrderedByDistance
		{
			[Token(Token = "0x6000EEC")]
			get;
		}

		[Token(Token = "0x6000EED")]
		[Address(RVA = "0xB106D0", Offset = "0xB106D0", VA = "0xB106D0", Slot = "6")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6000EEE")]
		[Address(RVA = "0xB1A02C", Offset = "0xB1A02C", VA = "0xB1A02C", Slot = "7")]
		public virtual bool IsDetected(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x6000EEF")]
		[Address(RVA = "0xB12848", Offset = "0xB12848", VA = "0xB12848", Slot = "8")]
		public virtual float GetVisibility(GameObject go)
		{
			return default(float);
		}

		[Token(Token = "0x6000EF0")]
		public abstract void Pulse();

		[Token(Token = "0x6000EF1")]
		[Address(RVA = "0xB1A124", Offset = "0xB1A124", VA = "0xB1A124")]
		public List<GameObject> GetDetected()
		{
			return null;
		}

		[Token(Token = "0x6000EF2")]
		public List<T> GetDetectedByComponent<T>() where T : Component
		{
			return null;
		}

		[Token(Token = "0x6000EF3")]
		[Address(RVA = "0xB1A1B4", Offset = "0xB1A1B4", VA = "0xB1A1B4")]
		public List<Component> GetDetectedByComponent(Type t)
		{
			return null;
		}

		[Token(Token = "0x6000EF4")]
		[Address(RVA = "0xB1A380", Offset = "0xB1A380", VA = "0xB1A380")]
		public List<GameObject> GetDetectedByName(string name)
		{
			return null;
		}

		[Token(Token = "0x6000EF5")]
		public List<T> GetDetectedByNameAndComponent<T>(string name) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6000EF6")]
		[Address(RVA = "0xB1A514", Offset = "0xB1A514", VA = "0xB1A514")]
		public List<Component> GetDetectedByNameAndComponent(string name, Type t)
		{
			return null;
		}

		[Token(Token = "0x6000EF7")]
		[Address(RVA = "0xB1A710", Offset = "0xB1A710", VA = "0xB1A710")]
		public List<GameObject> GetDetectedByTag(string tag)
		{
			return null;
		}

		[Token(Token = "0x6000EF8")]
		public List<T> GetDetectedByTagAndComponent<T>(string tag) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6000EF9")]
		[Address(RVA = "0xB1A89C", Offset = "0xB1A89C", VA = "0xB1A89C")]
		public List<Component> GetDetectedByTagAndComponent(string tag, Type t)
		{
			return null;
		}

		[Token(Token = "0x6000EFA")]
		[Address(RVA = "0xB1AA84", Offset = "0xB1AA84", VA = "0xB1AA84")]
		public List<GameObject> GetDetectedByNameAndTag(string name, string tag)
		{
			return null;
		}

		[Token(Token = "0x6000EFB")]
		public List<T> GetDetectedByNameAndTagAndComponent<T>(string name, string tag) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6000EFC")]
		[Address(RVA = "0xB1AC38", Offset = "0xB1AC38", VA = "0xB1AC38")]
		public List<Component> GetDetectedByNameAndTagAndComponent(string name, string tag, Type t)
		{
			return null;
		}

		[Token(Token = "0x6000EFD")]
		[Address(RVA = "0xB1AE48", Offset = "0xB1AE48", VA = "0xB1AE48")]
		public GameObject GetNearestToPoint(Vector3 p)
		{
			return null;
		}

		[Token(Token = "0x6000EFE")]
		public T GetNearestToPointByComponent<T>(Vector3 p) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6000EFF")]
		[Address(RVA = "0xB1AFF8", Offset = "0xB1AFF8", VA = "0xB1AFF8")]
		public Component GetNearestToPointByComponent(Vector3 p, Type t)
		{
			return null;
		}

		[Token(Token = "0x6000F00")]
		[Address(RVA = "0xB1B1EC", Offset = "0xB1B1EC", VA = "0xB1B1EC")]
		public GameObject GetNearestToPointByName(Vector3 p, string name)
		{
			return null;
		}

		[Token(Token = "0x6000F01")]
		public T GetNearestToPointByNameAndComponent<T>(Vector3 p, string name) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6000F02")]
		[Address(RVA = "0xB1B3B8", Offset = "0xB1B3B8", VA = "0xB1B3B8")]
		public Component GetNearestToPointByNameAndComponent(Vector3 p, string name, Type t)
		{
			return null;
		}

		[Token(Token = "0x6000F03")]
		[Address(RVA = "0xB1B5F4", Offset = "0xB1B5F4", VA = "0xB1B5F4")]
		public GameObject GetNearestToPointByTag(Vector3 p, string tag)
		{
			return null;
		}

		[Token(Token = "0x6000F04")]
		public T GetNearestToPointByTagAndComponent<T>(Vector3 p, string tag) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6000F05")]
		[Address(RVA = "0xB1B7B8", Offset = "0xB1B7B8", VA = "0xB1B7B8")]
		public Component GetNearestToPointByTagAndComponent(Vector3 p, string tag, Type t)
		{
			return null;
		}

		[Token(Token = "0x6000F06")]
		[Address(RVA = "0xB1B9EC", Offset = "0xB1B9EC", VA = "0xB1B9EC")]
		public GameObject GetNearestToPointByNameAndTag(Vector3 p, string name, string tag)
		{
			return null;
		}

		[Token(Token = "0x6000F07")]
		public T GetNearestToPointByNameAndTagAndComponent<T>(Vector3 p, string name, string tag) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6000F08")]
		[Address(RVA = "0xB1BC00", Offset = "0xB1BC00", VA = "0xB1BC00")]
		public Component GetNearestToPointByNameAndTagAndComponent(Vector3 p, string name, string tag, Type t)
		{
			return null;
		}

		[Token(Token = "0x6000F09")]
		[Address(RVA = "0xB1BE64", Offset = "0xB1BE64", VA = "0xB1BE64")]
		public GameObject GetNearest()
		{
			return null;
		}

		[Token(Token = "0x6000F0A")]
		public T GetNearestByComponent<T>() where T : Component
		{
			return null;
		}

		[Token(Token = "0x6000F0B")]
		[Address(RVA = "0xB1BEAC", Offset = "0xB1BEAC", VA = "0xB1BEAC")]
		public Component GetNearestByComponent(Type t)
		{
			return null;
		}

		[Token(Token = "0x6000F0C")]
		[Address(RVA = "0xB1BF00", Offset = "0xB1BF00", VA = "0xB1BF00")]
		public GameObject GetNearestByName(string name)
		{
			return null;
		}

		[Token(Token = "0x6000F0D")]
		public T GetNearestByNameAndComponent<T>(string name) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6000F0E")]
		[Address(RVA = "0xB1BF54", Offset = "0xB1BF54", VA = "0xB1BF54")]
		public Component GetNearestByNameAndComponent(string name, Type t)
		{
			return null;
		}

		[Token(Token = "0x6000F0F")]
		[Address(RVA = "0xB1BFB8", Offset = "0xB1BFB8", VA = "0xB1BFB8")]
		public GameObject GetNearestByTag(string tag)
		{
			return null;
		}

		[Token(Token = "0x6000F10")]
		public T GetNearestByTagAndComponent<T>(string tag) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6000F11")]
		[Address(RVA = "0xB1C00C", Offset = "0xB1C00C", VA = "0xB1C00C")]
		public Component GetNearestByTagAndComponent(string tag, Type t)
		{
			return null;
		}

		[Token(Token = "0x6000F12")]
		[Address(RVA = "0xB1C070", Offset = "0xB1C070", VA = "0xB1C070")]
		public GameObject GetNearestByNameAndTag(string name, string tag)
		{
			return null;
		}

		[Token(Token = "0x6000F13")]
		public T GetNearestByNameAndTagAndComponent<T>(string name, string tag) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6000F14")]
		[Address(RVA = "0xB1C0D4", Offset = "0xB1C0D4", VA = "0xB1C0D4")]
		public Component GetNearestByNameAndTagAndComponent(string name, string tag, Type t)
		{
			return null;
		}

		[Token(Token = "0x6000F15")]
		[Address(RVA = "0xB115C4", Offset = "0xB115C4", VA = "0xB115C4")]
		protected bool shouldIgnore(GameObject go)
		{
			return default(bool);
		}

		[Token(Token = "0x6000F16")]
		[Address(RVA = "0xB1AE8C", Offset = "0xB1AE8C", VA = "0xB1AE8C")]
		private GameObject nearestToPoint(List<GameObject> gos, Vector3 point)
		{
			return null;
		}

		[Token(Token = "0x6000F17")]
		private T nearestToPointWithComponent<T>(List<GameObject> gos, Vector3 point) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6000F18")]
		[Address(RVA = "0xB1B044", Offset = "0xB1B044", VA = "0xB1B044")]
		private Component nearestToPointWithComponent(List<GameObject> gos, Vector3 point, Type t)
		{
			return null;
		}

		[Token(Token = "0x6000F19")]
		[Address(RVA = "0xB1B238", Offset = "0xB1B238", VA = "0xB1B238")]
		private GameObject nearestToPointWithName(List<GameObject> gos, Vector3 point, string name)
		{
			return null;
		}

		[Token(Token = "0x6000F1A")]
		private T nearestToPointWithNameAndComponent<T>(List<GameObject> gos, Vector3 point, string name) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6000F1B")]
		[Address(RVA = "0xB1B414", Offset = "0xB1B414", VA = "0xB1B414")]
		private Component nearestToPointWithNameAndComponent(List<GameObject> gos, Vector3 point, string name, Type t)
		{
			return null;
		}

		[Token(Token = "0x6000F1C")]
		[Address(RVA = "0xB1B640", Offset = "0xB1B640", VA = "0xB1B640")]
		private GameObject nearestToPointWithTag(List<GameObject> gos, Vector3 point, string tag)
		{
			return null;
		}

		[Token(Token = "0x6000F1D")]
		private T nearestToPointWithTagAndComponent<T>(List<GameObject> gos, Vector3 point, string tag) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6000F1E")]
		[Address(RVA = "0xB1B814", Offset = "0xB1B814", VA = "0xB1B814")]
		private Component nearestToPointWithTagAndComponent(List<GameObject> gos, Vector3 point, string tag, Type t)
		{
			return null;
		}

		[Token(Token = "0x6000F1F")]
		[Address(RVA = "0xB1BA48", Offset = "0xB1BA48", VA = "0xB1BA48")]
		private GameObject nearestToPointWithNameAndTag(List<GameObject> gos, Vector3 point, string name, string tag)
		{
			return null;
		}

		[Token(Token = "0x6000F20")]
		private T nearestToPointWithNameAndTagAndComponent<T>(List<GameObject> gos, Vector3 point, string name, string tag) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6000F21")]
		[Address(RVA = "0xB1BC64", Offset = "0xB1BC64", VA = "0xB1BC64")]
		private Component nearestToPointWithNameAndTagAndComponent(List<GameObject> gos, Vector3 point, string name, string tag, Type t)
		{
			return null;
		}

		[Token(Token = "0x6000F22")]
		[Address(RVA = "0xB120C4", Offset = "0xB120C4", VA = "0xB120C4")]
		protected Sensor()
		{
		}
	}
	[Token(Token = "0x20001E4")]
	public class DistanceFromPointComparer : IComparer<GameObject>
	{
		[Token(Token = "0x4000C3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 Point;

		[Token(Token = "0x6000F25")]
		[Address(RVA = "0xB1C140", Offset = "0xB1C140", VA = "0xB1C140", Slot = "4")]
		public int Compare(GameObject x, GameObject y)
		{
			return default(int);
		}

		[Token(Token = "0x6000F26")]
		[Address(RVA = "0xB15C44", Offset = "0xB15C44", VA = "0xB15C44")]
		public DistanceFromPointComparer()
		{
		}
	}
	[Token(Token = "0x20001E5")]
	public class SteeringRig : MonoBehaviour
	{
		[Token(Token = "0x4000C3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The rig won't try to steer around objects in this list.")]
		public List<GameObject> IgnoreList;

		[Token(Token = "0x4000C40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0.1f, 4f)]
		[Tooltip("Lower numbers mean the rig will move closer to obstacles.")]
		public float AvoidanceSensitivity;

		[Token(Token = "0x4000C41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("The max distance that can be steered from the target direction.")]
		[Range(1f, 2f)]
		public float MaxAvoidanceLength;

		[Token(Token = "0x4000C42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Should the rig steer along the Y-axis, up and down. Should be false for characters that move along the ground, but true for spaceships or airoplanes.")]
		public bool YAxis;

		[Token(Token = "0x4000C43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[Tooltip("Rotate the rig towards the target direction before calculating steer vectors. Useful for creating asymetric ray sensor setups. See the example prefabs, they are all RotateTowardsTarget = true.")]
		public bool RotateTowardsTarget;

		[Token(Token = "0x4000C44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("If assigned the steering rig will control the movement of this rigid body.")]
		public Rigidbody RB;

		[Token(Token = "0x4000C45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The maximum torque that will be applied to the rigid body.")]
		public float TurnForce;

		[Token(Token = "0x4000C46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The maximum force that will be applied to the rigid body in a forwards direction.")]
		public float MoveForce;

		[Token(Token = "0x4000C47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The maximum force that will be applied to the rigid body in a sideways or backwards direction.")]
		public float StrafeForce;

		[Token(Token = "0x4000C48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("The maximum turning speed that will be applied to kinematic rigid bodies.")]
		public float TurnSpeed;

		[Token(Token = "0x4000C49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The maximum movement speed that will be applied to kinematic rigid bodies in a forwards direction.")]
		public float MoveSpeed;

		[Token(Token = "0x4000C4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The maximum movement speed that will be applied to kinematic rigid bodies in a sideways or backwards direction.")]
		public float StrafeSpeed;

		[Token(Token = "0x4000C4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The distance threshold for the rig to arrive at a destination position.")]
		public float StoppingDistance;

		[Token(Token = "0x4000C4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The rig will attempt to move towards this transform.")]
		public Transform DestinationTransform;

		[Token(Token = "0x4000C4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The rig will face towards this transform, even strafing while moving towards destination.")]
		public Transform FaceTowardsTransform;

		[Token(Token = "0x4000C4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private RaySensor[] sensors;

		[Token(Token = "0x4000C4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector3 destination;

		[Token(Token = "0x4000C50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private bool trackingToDestinationPosition;

		[Token(Token = "0x4000C51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 faceDirection;

		[Token(Token = "0x4000C52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private bool directionToFaceAssigned;

		[Token(Token = "0x4000C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 previousAttractionVector;

		[Token(Token = "0x4000C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Vector3 previousRepulsionVector;

		[Token(Token = "0x4000C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 previousAvoidanceVector;

		[Token(Token = "0x4000C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static readonly Color AttractionVectorColor;

		[Token(Token = "0x4000C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected static readonly Color RepulsionVectorColor;

		[Token(Token = "0x4000C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected static readonly Color AvoidanceVectorColor;

		[Token(Token = "0x17000162")]
		public Vector3 Destination
		{
			[Token(Token = "0x6000F27")]
			[Address(RVA = "0xB1C220", Offset = "0xB1C220", VA = "0xB1C220")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000F28")]
			[Address(RVA = "0xB1C2E0", Offset = "0xB1C2E0", VA = "0xB1C2E0")]
			set
			{
			}
		}

		[Token(Token = "0x17000163")]
		public bool IsSeeking
		{
			[Token(Token = "0x6000F29")]
			[Address(RVA = "0xB1C3C8", Offset = "0xB1C3C8", VA = "0xB1C3C8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000164")]
		public Vector3 DirectionToFace
		{
			[Token(Token = "0x6000F2A")]
			[Address(RVA = "0xB1C474", Offset = "0xB1C474", VA = "0xB1C474")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000F2B")]
			[Address(RVA = "0xB1C604", Offset = "0xB1C604", VA = "0xB1C604")]
			set
			{
			}
		}

		[Token(Token = "0x17000165")]
		public bool IsDirectionToFaceAssigned
		{
			[Token(Token = "0x6000F2C")]
			[Address(RVA = "0xB1C810", Offset = "0xB1C810", VA = "0xB1C810")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000166")]
		private Vector3 axisConstraint
		{
			[Token(Token = "0x6000F2F")]
			[Address(RVA = "0xB1C2C4", Offset = "0xB1C2C4", VA = "0xB1C2C4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6000F2D")]
		[Address(RVA = "0xB1C804", Offset = "0xB1C804", VA = "0xB1C804")]
		public void ClearDirectionToFace()
		{
		}

		[Token(Token = "0x6000F2E")]
		[Address(RVA = "0xB1C88C", Offset = "0xB1C88C", VA = "0xB1C88C")]
		public Vector3 GetSteeredDirection(Vector3 targetDirection)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F30")]
		[Address(RVA = "0xB1CB38", Offset = "0xB1CB38", VA = "0xB1CB38")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F31")]
		[Address(RVA = "0xB1CBDC", Offset = "0xB1CBDC", VA = "0xB1CBDC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F32")]
		[Address(RVA = "0xB1CF84", Offset = "0xB1CF84", VA = "0xB1CF84")]
		private void FaceDirectionKinematic(Vector3 direction)
		{
		}

		[Token(Token = "0x6000F33")]
		[Address(RVA = "0xB1D224", Offset = "0xB1D224", VA = "0xB1D224")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F34")]
		[Address(RVA = "0xB1D498", Offset = "0xB1D498", VA = "0xB1D498")]
		private void FaceDirectionForces(Vector3 direction)
		{
		}

		[Token(Token = "0x6000F35")]
		[Address(RVA = "0xB1CA08", Offset = "0xB1CA08", VA = "0xB1CA08")]
		private Vector3 accumForces(Vector3 targetDirection)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F36")]
		[Address(RVA = "0xB1D680", Offset = "0xB1D680", VA = "0xB1D680")]
		private Vector3 attractionForce(Vector3 targetDirection)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F37")]
		[Address(RVA = "0xB1D778", Offset = "0xB1D778", VA = "0xB1D778")]
		private Vector3 repulsionForce()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F38")]
		[Address(RVA = "0xB1D5EC", Offset = "0xB1D5EC", VA = "0xB1D5EC")]
		private float signedAngleXZ(Vector3 a, Vector3 b)
		{
			return default(float);
		}

		[Token(Token = "0x6000F39")]
		[Address(RVA = "0xB1D14C", Offset = "0xB1D14C", VA = "0xB1D14C")]
		private bool hasReachedDestination()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F3A")]
		[Address(RVA = "0xB1D9EC", Offset = "0xB1D9EC", VA = "0xB1D9EC")]
		public void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000F3B")]
		[Address(RVA = "0xB1DC0C", Offset = "0xB1DC0C", VA = "0xB1DC0C")]
		public SteeringRig()
		{
		}
	}
	[Token(Token = "0x20001E6")]
	public class SteeringRig2D : MonoBehaviour
	{
		[Token(Token = "0x4000C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The rig won't try to steer around objects in this list.")]
		public List<GameObject> IgnoreList;

		[Token(Token = "0x4000C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0.1f, 4f)]
		[Tooltip("Lower numbers mean the rig will move closer to obstacles.")]
		public float AvoidanceSensitivity;

		[Token(Token = "0x4000C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(1f, 2f)]
		[Tooltip("The max distance that can be steered from the target direction.")]
		public float MaxAvoidanceLength;

		[Token(Token = "0x4000C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Rotate the rig towards the target direction before calculating steer vectors. Useful for creating asymetric ray sensor setups. See the example prefabs, they are all RotateTowardsTarget = true.")]
		public bool RotateTowardsTarget;

		[Token(Token = "0x4000C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("If assigned the steering rig will control the movement of this rigid body.")]
		public Rigidbody2D RB;

		[Token(Token = "0x4000C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The maximum torque that will be applied to the rigid body.")]
		public float TurnForce;

		[Token(Token = "0x4000C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The maximum force that will be applied to the rigid body in a forwards direction.")]
		public float MoveForce;

		[Token(Token = "0x4000C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The maximum force that will be applied to the rigid body in a sideways or backwards direction.")]
		public float StrafeForce;

		[Token(Token = "0x4000C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("The maximum turning speed that will be applied to kinematic rigid bodies.")]
		public float TurnSpeed;

		[Token(Token = "0x4000C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("The maximum movement speed that will be applied to kinematic rigid bodies in a forwards direction.")]
		public float MoveSpeed;

		[Token(Token = "0x4000C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("The maximum movement speed that will be applied to kinematic rigid bodies in a sideways or backwards direction.")]
		public float StrafeSpeed;

		[Token(Token = "0x4000C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("The distance threshold for the rig to arrive at a destination position.")]
		public float StoppingDistance;

		[Token(Token = "0x4000C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("The rig will attempt to move towards this transform.")]
		public Transform DestinationTransform;

		[Token(Token = "0x4000C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The rig will face towards this transform, even strafing while moving towards destination.")]
		public Transform FaceTowardsTransform;

		[Token(Token = "0x4000C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private RaySensor2D[] sensors;

		[Token(Token = "0x4000C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Vector2 destination;

		[Token(Token = "0x4000C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private bool trackingToDestinationPosition;

		[Token(Token = "0x4000C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector2 faceDirection;

		[Token(Token = "0x4000C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private bool directionToFaceAssigned;

		[Token(Token = "0x4000C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector2 previousAttractionVector;

		[Token(Token = "0x4000C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector2 previousRepulsionVector;

		[Token(Token = "0x4000C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector2 previousAvoidanceVector;

		[Token(Token = "0x4000C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static readonly Color AttractionVectorColor;

		[Token(Token = "0x4000C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected static readonly Color RepulsionVectorColor;

		[Token(Token = "0x4000C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected static readonly Color AvoidanceVectorColor;

		[Token(Token = "0x17000167")]
		public Vector2 Destination
		{
			[Token(Token = "0x6000F3D")]
			[Address(RVA = "0xB1DCA0", Offset = "0xB1DCA0", VA = "0xB1DCA0")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6000F3E")]
			[Address(RVA = "0xB1DD24", Offset = "0xB1DD24", VA = "0xB1DD24")]
			set
			{
			}
		}

		[Token(Token = "0x17000168")]
		public bool IsSeeking
		{
			[Token(Token = "0x6000F3F")]
			[Address(RVA = "0xB1DDF8", Offset = "0xB1DDF8", VA = "0xB1DDF8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000169")]
		public Vector2 DirectionToFace
		{
			[Token(Token = "0x6000F40")]
			[Address(RVA = "0xB1DEA4", Offset = "0xB1DEA4", VA = "0xB1DEA4")]
			get
			{
				return default(Vector2);
			}
			[Token(Token = "0x6000F41")]
			[Address(RVA = "0xB1E054", Offset = "0xB1E054", VA = "0xB1E054")]
			set
			{
			}
		}

		[Token(Token = "0x1700016A")]
		public bool IsDirectionToFaceAssigned
		{
			[Token(Token = "0x6000F42")]
			[Address(RVA = "0xB1E22C", Offset = "0xB1E22C", VA = "0xB1E22C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000F43")]
		[Address(RVA = "0xB1E220", Offset = "0xB1E220", VA = "0xB1E220")]
		public void ClearDirectionToFace()
		{
		}

		[Token(Token = "0x6000F44")]
		[Address(RVA = "0xB1E2A8", Offset = "0xB1E2A8", VA = "0xB1E2A8")]
		public Vector2 GetSteeredDirection(Vector2 targetDirection)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6000F45")]
		[Address(RVA = "0xB1E460", Offset = "0xB1E460", VA = "0xB1E460")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000F46")]
		[Address(RVA = "0xB1E504", Offset = "0xB1E504", VA = "0xB1E504")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F47")]
		[Address(RVA = "0xB1E84C", Offset = "0xB1E84C", VA = "0xB1E84C")]
		private void FaceDirectionKinematic(Vector2 direction)
		{
		}

		[Token(Token = "0x6000F48")]
		[Address(RVA = "0xB1EAA8", Offset = "0xB1EAA8", VA = "0xB1EAA8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000F49")]
		[Address(RVA = "0xB1EC44", Offset = "0xB1EC44", VA = "0xB1EC44")]
		private void FaceDirectionForces(Vector2 direction)
		{
		}

		[Token(Token = "0x6000F4A")]
		[Address(RVA = "0xB1E354", Offset = "0xB1E354", VA = "0xB1E354")]
		private Vector3 accumForces(Vector3 targetDirection)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F4B")]
		[Address(RVA = "0xB1ECC0", Offset = "0xB1ECC0", VA = "0xB1ECC0")]
		private Vector3 attractionForce(Vector3 targetDirection)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F4C")]
		[Address(RVA = "0xB1EDA8", Offset = "0xB1EDA8", VA = "0xB1EDA8")]
		private Vector3 repulsionForce()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000F4D")]
		[Address(RVA = "0xB1EA18", Offset = "0xB1EA18", VA = "0xB1EA18")]
		private float signedAngleXY(Vector2 a, Vector2 b)
		{
			return default(float);
		}

		[Token(Token = "0x6000F4E")]
		[Address(RVA = "0xB1E95C", Offset = "0xB1E95C", VA = "0xB1E95C")]
		private bool hasReachedDestination()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F4F")]
		[Address(RVA = "0xB1EF4C", Offset = "0xB1EF4C", VA = "0xB1EF4C")]
		public void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000F50")]
		[Address(RVA = "0xB1F11C", Offset = "0xB1F11C", VA = "0xB1F11C")]
		public SteeringRig2D()
		{
		}
	}
	[Token(Token = "0x20001E7")]
	public class TriggerSensor : BaseVolumeSensor
	{
		[Token(Token = "0x20001E8")]
		public enum UpdateMode
		{
			[Token(Token = "0x4000C7E")]
			FixedInterval,
			[Token(Token = "0x4000C7F")]
			Manual
		}

		[Token(Token = "0x20001E9")]
		public delegate void SensorUpdateHandler();

		[Token(Token = "0x4000C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Tooltip("Should the sensor be pulsed automatically at fixed intervals or should it be pulsed manually. For the trigger sensor this is only relevant to refreshing the line of sight tests as the colliders are detected outside of the pulse method.")]
		public UpdateMode LineOfSightUpdateMode;

		[Token(Token = "0x4000C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("If set to pulse automatically this is the interval in seconds between each automatic pulse.")]
		public float CheckLineOfSightInterval;

		[Token(Token = "0x4000C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private HashSet<GameObject> previousDetectedObjects;

		[Token(Token = "0x4000C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Dictionary<Collider, int> triggerStayLag;

		[Token(Token = "0x4000C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private SensorMode oldDetectionMode;

		[Token(Token = "0x4000C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private bool oldRequiresLineOfSight;

		[Token(Token = "0x4000C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private List<Collider> collidersToRemove;

		[Token(Token = "0x4000C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private List<Collider> collidersToIncrement;

		[Token(Token = "0x4000C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float timer;

		[Token(Token = "0x4000C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private List<GameObject> tempGOList;

		[Token(Token = "0x14000010")]
		public event SensorUpdateHandler OnSensorUpdate
		{
			[Token(Token = "0x6000F52")]
			[Address(RVA = "0xB1F1A8", Offset = "0xB1F1A8", VA = "0xB1F1A8")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000F53")]
			[Address(RVA = "0xB1F244", Offset = "0xB1F244", VA = "0xB1F244")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000F54")]
		[Address(RVA = "0xB1F2E0", Offset = "0xB1F2E0", VA = "0xB1F2E0", Slot = "9")]
		public override void Pulse()
		{
		}

		[Token(Token = "0x6000F55")]
		[Address(RVA = "0xB1F340", Offset = "0xB1F340", VA = "0xB1F340", Slot = "10")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000F56")]
		[Address(RVA = "0xB1F6EC", Offset = "0xB1F6EC", VA = "0xB1F6EC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F57")]
		[Address(RVA = "0xB1FE48", Offset = "0xB1FE48", VA = "0xB1FE48")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6000F58")]
		[Address(RVA = "0xB1FF78", Offset = "0xB1FF78", VA = "0xB1FF78")]
		private void OnTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x6000F59")]
		[Address(RVA = "0xB2000C", Offset = "0xB2000C", VA = "0xB2000C")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6000F5A")]
		[Address(RVA = "0xB1FE4C", Offset = "0xB1FE4C", VA = "0xB1FE4C")]
		private new void addCollider(Collider other)
		{
		}

		[Token(Token = "0x6000F5B")]
		[Address(RVA = "0xB1FD2C", Offset = "0xB1FD2C", VA = "0xB1FD2C")]
		private new void removeCollider(Collider other)
		{
		}

		[Token(Token = "0x6000F5C")]
		[Address(RVA = "0xB1F308", Offset = "0xB1F308", VA = "0xB1F308")]
		private void testSensor()
		{
		}

		[Token(Token = "0x6000F5D")]
		[Address(RVA = "0xB1FA4C", Offset = "0xB1FA4C", VA = "0xB1FA4C")]
		private void sensorDetectionEvents()
		{
		}

		[Token(Token = "0x6000F5E")]
		[Address(RVA = "0xB1F548", Offset = "0xB1F548", VA = "0xB1F548")]
		private bool checkForTriggers()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F5F")]
		[Address(RVA = "0xB20010", Offset = "0xB20010", VA = "0xB20010")]
		public TriggerSensor()
		{
		}
	}
	[Token(Token = "0x20001EA")]
	public class TriggerSensor2D : BaseAreaSensor
	{
		[Token(Token = "0x20001EB")]
		public enum UpdateMode
		{
			[Token(Token = "0x4000C8C")]
			FixedInterval,
			[Token(Token = "0x4000C8D")]
			Manual
		}

		[Token(Token = "0x20001EC")]
		public delegate void SensorUpdateHandler();

		[Token(Token = "0x4000C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Tooltip("Should the sensor be pulsed automatically at fixed intervals or should it be pulsed manually. For the trigger sensor this is only relevant to refreshing the line of sight tests as the colliders are detected outside of the pulse method.")]
		public UpdateMode LineOfSightUpdateMode;

		[Token(Token = "0x4000C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("If set to pulse automatically this is the interval in seconds between each automatic pulse.")]
		public float CheckLineOfSightInterval;

		[Token(Token = "0x4000C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private HashSet<GameObject> previousDetectedObjects;

		[Token(Token = "0x4000C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Dictionary<Collider2D, int> triggerStayLag;

		[Token(Token = "0x4000C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private SensorMode oldDetectionMode;

		[Token(Token = "0x4000C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private bool oldRequiresLineOfSight;

		[Token(Token = "0x4000C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private List<Collider2D> collidersToRemove;

		[Token(Token = "0x4000C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private List<Collider2D> collidersToIncrement;

		[Token(Token = "0x4000C89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private float timer;

		[Token(Token = "0x4000C8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private List<GameObject> tempGOList;

		[Token(Token = "0x14000011")]
		public event SensorUpdateHandler OnSensorUpdate
		{
			[Token(Token = "0x6000F64")]
			[Address(RVA = "0xB202A0", Offset = "0xB202A0", VA = "0xB202A0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6000F65")]
			[Address(RVA = "0xB2033C", Offset = "0xB2033C", VA = "0xB2033C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6000F66")]
		[Address(RVA = "0xB203D8", Offset = "0xB203D8", VA = "0xB203D8", Slot = "9")]
		public override void Pulse()
		{
		}

		[Token(Token = "0x6000F67")]
		[Address(RVA = "0xB20438", Offset = "0xB20438", VA = "0xB20438", Slot = "10")]
		protected override void OnEnable()
		{
		}

		[Token(Token = "0x6000F68")]
		[Address(RVA = "0xB2082C", Offset = "0xB2082C", VA = "0xB2082C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F69")]
		[Address(RVA = "0xB20F94", Offset = "0xB20F94", VA = "0xB20F94")]
		private void OnTriggerEnter2D(Collider2D other)
		{
		}

		[Token(Token = "0x6000F6A")]
		[Address(RVA = "0xB210C4", Offset = "0xB210C4", VA = "0xB210C4")]
		private void OnTriggerStay2D(Collider2D other)
		{
		}

		[Token(Token = "0x6000F6B")]
		[Address(RVA = "0xB21158", Offset = "0xB21158", VA = "0xB21158")]
		private void OnTriggerExit2D(Collider2D other)
		{
		}

		[Token(Token = "0x6000F6C")]
		[Address(RVA = "0xB20F98", Offset = "0xB20F98", VA = "0xB20F98")]
		private new void addCollider(Collider2D other)
		{
		}

		[Token(Token = "0x6000F6D")]
		[Address(RVA = "0xB20E78", Offset = "0xB20E78", VA = "0xB20E78")]
		private new void removeCollider(Collider2D other)
		{
		}

		[Token(Token = "0x6000F6E")]
		[Address(RVA = "0xB20400", Offset = "0xB20400", VA = "0xB20400")]
		private void testSensor()
		{
		}

		[Token(Token = "0x6000F6F")]
		[Address(RVA = "0xB20B8C", Offset = "0xB20B8C", VA = "0xB20B8C")]
		private void sensorDetectionEvents()
		{
		}

		[Token(Token = "0x6000F70")]
		[Address(RVA = "0xB20688", Offset = "0xB20688", VA = "0xB20688")]
		private bool checkForTriggers()
		{
			return default(bool);
		}

		[Token(Token = "0x6000F71")]
		[Address(RVA = "0xB2115C", Offset = "0xB2115C", VA = "0xB2115C")]
		public TriggerSensor2D()
		{
		}
	}
}
namespace SensorToolkit.Example
{
	[Token(Token = "0x20001ED")]
	public class ScoreZone : MonoBehaviour
	{
		[Token(Token = "0x4000C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Sensor PickupSensor;

		[Token(Token = "0x4000C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject ScoreEffect;

		[Token(Token = "0x6000F76")]
		[Address(RVA = "0xB213EC", Offset = "0xB213EC", VA = "0xB213EC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000F77")]
		[Address(RVA = "0xB215C4", Offset = "0xB215C4", VA = "0xB215C4")]
		public ScoreZone()
		{
		}
	}
	[Token(Token = "0x20001EE")]
	[RequireComponent(typeof(CharacterControls), typeof(GunWithClip), typeof(TeamMember))]
	public class SoldierAI : MonoBehaviour
	{
		[Token(Token = "0x20001EF")]
		[CompilerGenerated]
		private sealed class <DefaultState>d__16 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000C97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000C98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000C99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SoldierAI <>4__this;

			[Token(Token = "0x4000C9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <countdown>5__2;

			[Token(Token = "0x1700016F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F86")]
				[Address(RVA = "0xB2224C", Offset = "0xB2224C", VA = "0xB2224C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000170")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F88")]
				[Address(RVA = "0xB22294", Offset = "0xB22294", VA = "0xB22294", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F83")]
			[Address(RVA = "0xB21AE0", Offset = "0xB21AE0", VA = "0xB21AE0")]
			[DebuggerHidden]
			public <DefaultState>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x6000F84")]
			[Address(RVA = "0xB21D5C", Offset = "0xB21D5C", VA = "0xB21D5C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F85")]
			[Address(RVA = "0xB21D60", Offset = "0xB21D60", VA = "0xB21D60", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F87")]
			[Address(RVA = "0xB22254", Offset = "0xB22254", VA = "0xB22254", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001F0")]
		[CompilerGenerated]
		private sealed class <AttackState>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000C9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000C9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000C9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameObject target;

			[Token(Token = "0x4000C9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public SoldierAI <>4__this;

			[Token(Token = "0x4000C9F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <cooldown>5__2;

			[Token(Token = "0x4000CA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private Vector3 <strafeDirection>5__3;

			[Token(Token = "0x17000171")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F8C")]
				[Address(RVA = "0xB22C90", Offset = "0xB22C90", VA = "0xB22C90", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000172")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F8E")]
				[Address(RVA = "0xB22CD8", Offset = "0xB22CD8", VA = "0xB22CD8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F89")]
			[Address(RVA = "0xB21B7C", Offset = "0xB21B7C", VA = "0xB21B7C")]
			[DebuggerHidden]
			public <AttackState>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x6000F8A")]
			[Address(RVA = "0xB2229C", Offset = "0xB2229C", VA = "0xB2229C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F8B")]
			[Address(RVA = "0xB222A0", Offset = "0xB222A0", VA = "0xB222A0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F8D")]
			[Address(RVA = "0xB22C98", Offset = "0xB22C98", VA = "0xB22C98", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001F1")]
		[CompilerGenerated]
		private sealed class <FleeState>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000CA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000CA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000CA3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SoldierAI <>4__this;

			[Token(Token = "0x4000CA4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <cooldown>5__2;

			[Token(Token = "0x4000CA5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private Vector3 <enemyRepulse>5__3;

			[Token(Token = "0x17000173")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F92")]
				[Address(RVA = "0xB23078", Offset = "0xB23078", VA = "0xB23078", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000174")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F94")]
				[Address(RVA = "0xB230C0", Offset = "0xB230C0", VA = "0xB230C0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F8F")]
			[Address(RVA = "0xB21C0C", Offset = "0xB21C0C", VA = "0xB21C0C")]
			[DebuggerHidden]
			public <FleeState>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x6000F90")]
			[Address(RVA = "0xB22CE0", Offset = "0xB22CE0", VA = "0xB22CE0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F91")]
			[Address(RVA = "0xB22CE4", Offset = "0xB22CE4", VA = "0xB22CE4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F93")]
			[Address(RVA = "0xB23080", Offset = "0xB23080", VA = "0xB23080", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001F2")]
		[CompilerGenerated]
		private sealed class <PickUpState>d__19 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000CA6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000CA7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000CA8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SoldierAI <>4__this;

			[Token(Token = "0x4000CA9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Holdable <pickup>5__2;

			[Token(Token = "0x4000CAA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <countdown>5__3;

			[Token(Token = "0x17000175")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F98")]
				[Address(RVA = "0xB23394", Offset = "0xB23394", VA = "0xB23394", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000176")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000F9A")]
				[Address(RVA = "0xB233DC", Offset = "0xB233DC", VA = "0xB233DC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F95")]
			[Address(RVA = "0xB21C9C", Offset = "0xB21C9C", VA = "0xB21C9C")]
			[DebuggerHidden]
			public <PickUpState>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x6000F96")]
			[Address(RVA = "0xB230C8", Offset = "0xB230C8", VA = "0xB230C8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F97")]
			[Address(RVA = "0xB230CC", Offset = "0xB230CC", VA = "0xB230CC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F99")]
			[Address(RVA = "0xB2339C", Offset = "0xB2339C", VA = "0xB2339C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001F3")]
		[CompilerGenerated]
		private sealed class <CarryToBaseState>d__20 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000CAB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000CAC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000CAD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SoldierAI <>4__this;

			[Token(Token = "0x17000177")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000F9E")]
				[Address(RVA = "0xB23534", Offset = "0xB23534", VA = "0xB23534", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000178")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000FA0")]
				[Address(RVA = "0xB2357C", Offset = "0xB2357C", VA = "0xB2357C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000F9B")]
			[Address(RVA = "0xB21D2C", Offset = "0xB21D2C", VA = "0xB21D2C")]
			[DebuggerHidden]
			public <CarryToBaseState>d__20(int <>1__state)
			{
			}

			[Token(Token = "0x6000F9C")]
			[Address(RVA = "0xB233E4", Offset = "0xB233E4", VA = "0xB233E4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000F9D")]
			[Address(RVA = "0xB233E8", Offset = "0xB233E8", VA = "0xB233E8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000F9F")]
			[Address(RVA = "0xB2353C", Offset = "0xB2353C", VA = "0xB2353C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Sensor Sight;

		[Token(Token = "0x4000C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Sensor InteractionRange;

		[Token(Token = "0x4000C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SteeringRig SteerSensor;

		[Token(Token = "0x4000C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CharacterControls movement;

		[Token(Token = "0x4000C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GunWithClip gun;

		[Token(Token = "0x4000C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Teams team;

		[Token(Token = "0x4000C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GameObject myBaseCache;

		[Token(Token = "0x1700016B")]
		private List<GameObject> enemiesSpotted
		{
			[Token(Token = "0x6000F79")]
			[Address(RVA = "0xB21724", Offset = "0xB21724", VA = "0xB21724")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016C")]
		private List<GameObject> friendsSpotted
		{
			[Token(Token = "0x6000F7A")]
			[Address(RVA = "0xB21880", Offset = "0xB21880", VA = "0xB21880")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016D")]
		private List<Holdable> pickupsSpotted
		{
			[Token(Token = "0x6000F7B")]
			[Address(RVA = "0xB219DC", Offset = "0xB219DC", VA = "0xB219DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700016E")]
		private GameObject MyBase
		{
			[Token(Token = "0x6000F7C")]
			[Address(RVA = "0xB21A2C", Offset = "0xB21A2C", VA = "0xB21A2C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6000F78")]
		[Address(RVA = "0xB215CC", Offset = "0xB215CC", VA = "0xB215CC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000F7D")]
		[Address(RVA = "0xB216BC", Offset = "0xB216BC", VA = "0xB216BC")]
		[IteratorStateMachine(typeof(<DefaultState>d__16))]
		private IEnumerator DefaultState()
		{
			return null;
		}

		[Token(Token = "0x6000F7E")]
		[Address(RVA = "0xB21B08", Offset = "0xB21B08", VA = "0xB21B08")]
		[IteratorStateMachine(typeof(<AttackState>d__17))]
		private IEnumerator AttackState([Optional] GameObject target)
		{
			return null;
		}

		[Token(Token = "0x6000F7F")]
		[Address(RVA = "0xB21BA4", Offset = "0xB21BA4", VA = "0xB21BA4")]
		[IteratorStateMachine(typeof(<FleeState>d__18))]
		private IEnumerator FleeState()
		{
			return null;
		}

		[Token(Token = "0x6000F80")]
		[Address(RVA = "0xB21C34", Offset = "0xB21C34", VA = "0xB21C34")]
		[IteratorStateMachine(typeof(<PickUpState>d__19))]
		private IEnumerator PickUpState()
		{
			return null;
		}

		[Token(Token = "0x6000F81")]
		[Address(RVA = "0xB21CC4", Offset = "0xB21CC4", VA = "0xB21CC4")]
		[IteratorStateMachine(typeof(<CarryToBaseState>d__20))]
		private IEnumerator CarryToBaseState()
		{
			return null;
		}

		[Token(Token = "0x6000F82")]
		[Address(RVA = "0xB21D54", Offset = "0xB21D54", VA = "0xB21D54")]
		public SoldierAI()
		{
		}
	}
	[Token(Token = "0x20001F4")]
	public class BoxSpawner : MonoBehaviour
	{
		[Token(Token = "0x20001F5")]
		[CompilerGenerated]
		private sealed class <SpawnRoutine>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000CBE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000CBF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000CC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BoxSpawner <>4__this;

			[Token(Token = "0x1700017A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000FAF")]
				[Address(RVA = "0xB23E50", Offset = "0xB23E50", VA = "0xB23E50", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700017B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000FB1")]
				[Address(RVA = "0xB23E98", Offset = "0xB23E98", VA = "0xB23E98", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000FAC")]
			[Address(RVA = "0xB2395C", Offset = "0xB2395C", VA = "0xB2395C")]
			[DebuggerHidden]
			public <SpawnRoutine>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6000FAD")]
			[Address(RVA = "0xB23DB8", Offset = "0xB23DB8", VA = "0xB23DB8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000FAE")]
			[Address(RVA = "0xB23DBC", Offset = "0xB23DBC", VA = "0xB23DBC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000FB0")]
			[Address(RVA = "0xB23E58", Offset = "0xB23E58", VA = "0xB23E58", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Teams Team;

		[Token(Token = "0x4000CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject ToSpawn;

		[Token(Token = "0x4000CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int Number;

		[Token(Token = "0x4000CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float SpawnInterval;

		[Token(Token = "0x4000CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int StartSpawnAmount;

		[Token(Token = "0x4000CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float SizeX;

		[Token(Token = "0x4000CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float SizeY;

		[Token(Token = "0x4000CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float SizeZ;

		[Token(Token = "0x4000CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float ClearRadius;

		[Token(Token = "0x4000CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public LayerMask ObstructingLayers;

		[Token(Token = "0x4000CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float spawnCountdown;

		[Token(Token = "0x4000CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GameObject[] spawned;

		[Token(Token = "0x4000CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected static readonly Color YellowColor;

		[Token(Token = "0x4000CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected static readonly Color MagentaColor;

		[Token(Token = "0x4000CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected static readonly Color NoneColor;

		[Token(Token = "0x4000CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected static readonly Color RedColor;

		[Token(Token = "0x17000179")]
		private int nextAvailableSlot
		{
			[Token(Token = "0x6000FA5")]
			[Address(RVA = "0xB23984", Offset = "0xB23984", VA = "0xB23984")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x6000FA1")]
		[Address(RVA = "0xB23584", Offset = "0xB23584", VA = "0xB23584")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000FA2")]
		[Address(RVA = "0xB235D4", Offset = "0xB235D4", VA = "0xB235D4")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FA3")]
		[Address(RVA = "0xB238D4", Offset = "0xB238D4", VA = "0xB238D4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000FA4")]
		[Address(RVA = "0xB238F4", Offset = "0xB238F4", VA = "0xB238F4")]
		[IteratorStateMachine(typeof(<SpawnRoutine>d__15))]
		private IEnumerator SpawnRoutine()
		{
			return null;
		}

		[Token(Token = "0x6000FA6")]
		[Address(RVA = "0xB23614", Offset = "0xB23614", VA = "0xB23614")]
		private void spawn()
		{
		}

		[Token(Token = "0x6000FA7")]
		[Address(RVA = "0xB23A34", Offset = "0xB23A34", VA = "0xB23A34")]
		private Vector3 chooseLocation()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FA8")]
		[Address(RVA = "0xB23AF4", Offset = "0xB23AF4", VA = "0xB23AF4")]
		private bool locationIsObstructed(Vector3 location)
		{
			return default(bool);
		}

		[Token(Token = "0x6000FA9")]
		[Address(RVA = "0xB23B40", Offset = "0xB23B40", VA = "0xB23B40")]
		public void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6000FAA")]
		[Address(RVA = "0xB23D20", Offset = "0xB23D20", VA = "0xB23D20")]
		public BoxSpawner()
		{
		}
	}
	[Token(Token = "0x20001F6")]
	[RequireComponent(typeof(RaySensor))]
	public class Bullet : MonoBehaviour
	{
		[Token(Token = "0x4000CC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Speed;

		[Token(Token = "0x4000CC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float Damage;

		[Token(Token = "0x4000CC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float MaxAge;

		[Token(Token = "0x4000CC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float ImpactForce;

		[Token(Token = "0x4000CC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject HitEffect;

		[Token(Token = "0x4000CC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float age;

		[Token(Token = "0x4000CC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private RaySensor raySensor;

		[Token(Token = "0x6000FB2")]
		[Address(RVA = "0xB23EA0", Offset = "0xB23EA0", VA = "0xB23EA0")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FB3")]
		[Address(RVA = "0xB23F04", Offset = "0xB23F04", VA = "0xB23F04")]
		private void Update()
		{
		}

		[Token(Token = "0x6000FB4")]
		[Address(RVA = "0xB241FC", Offset = "0xB241FC", VA = "0xB241FC")]
		public void HitObject(GameObject g, Sensor s)
		{
		}

		[Token(Token = "0x6000FB5")]
		[Address(RVA = "0xB246F4", Offset = "0xB246F4", VA = "0xB246F4")]
		public void HitWall()
		{
		}

		[Token(Token = "0x6000FB6")]
		[Address(RVA = "0xB24098", Offset = "0xB24098", VA = "0xB24098")]
		private void explode(Vector3 direction)
		{
		}

		[Token(Token = "0x6000FB7")]
		[Address(RVA = "0xB2474C", Offset = "0xB2474C", VA = "0xB2474C")]
		public Bullet()
		{
		}
	}
	[Token(Token = "0x20001F7")]
	[RequireComponent(typeof(Rigidbody))]
	public class CharacterControls : MonoBehaviour
	{
		[Token(Token = "0x20001F8")]
		[CompilerGenerated]
		private sealed class <PickUpRoutine>d__19 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000CD2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000CD3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000CD4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Holdable holdable;

			[Token(Token = "0x4000CD5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public CharacterControls <>4__this;

			[Token(Token = "0x4000CD6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <countdown>5__2;

			[Token(Token = "0x17000180")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000FC7")]
				[Address(RVA = "0xB24E74", Offset = "0xB24E74", VA = "0xB24E74", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000181")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000FC9")]
				[Address(RVA = "0xB24EBC", Offset = "0xB24EBC", VA = "0xB24EBC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000FC4")]
			[Address(RVA = "0xB247E8", Offset = "0xB247E8", VA = "0xB247E8")]
			[DebuggerHidden]
			public <PickUpRoutine>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x6000FC5")]
			[Address(RVA = "0xB24BE8", Offset = "0xB24BE8", VA = "0xB24BE8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000FC6")]
			[Address(RVA = "0xB24BEC", Offset = "0xB24BEC", VA = "0xB24BEC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000FC8")]
			[Address(RVA = "0xB24E7C", Offset = "0xB24E7C", VA = "0xB24E7C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000CC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float MaxMoveForce;

		[Token(Token = "0x4000CC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float MaxStrafeForce;

		[Token(Token = "0x4000CCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float MaxTurnForce;

		[Token(Token = "0x4000CCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Sensor InteractionRange;

		[Token(Token = "0x4000CCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public FixedJoint HoldSlot;

		[Token(Token = "0x4000CCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody rb;

		[Token(Token = "0x4000CCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool isInteracting;

		[Token(Token = "0x4000CCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Holdable held;

		[Token(Token = "0x4000CD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 move;

		[Token(Token = "0x4000CD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Vector3 face;

		[Token(Token = "0x1700017C")]
		public Vector3 Move
		{
			[Token(Token = "0x6000FB8")]
			[Address(RVA = "0xB24754", Offset = "0xB24754", VA = "0xB24754")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000FB9")]
			[Address(RVA = "0xB2206C", Offset = "0xB2206C", VA = "0xB2206C")]
			set
			{
			}
		}

		[Token(Token = "0x1700017D")]
		public Vector3 Face
		{
			[Token(Token = "0x6000FBA")]
			[Address(RVA = "0xB24760", Offset = "0xB24760", VA = "0xB24760")]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6000FBB")]
			[Address(RVA = "0xB22168", Offset = "0xB22168", VA = "0xB22168")]
			set
			{
			}
		}

		[Token(Token = "0x1700017E")]
		public Holdable Held
		{
			[Token(Token = "0x6000FBC")]
			[Address(RVA = "0xB2476C", Offset = "0xB2476C", VA = "0xB2476C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700017F")]
		private float weightPenalty
		{
			[Token(Token = "0x6000FBF")]
			[Address(RVA = "0xB24810", Offset = "0xB24810", VA = "0xB24810")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000FBD")]
		[Address(RVA = "0xB232B0", Offset = "0xB232B0", VA = "0xB232B0")]
		public void PickUp(Holdable holdable)
		{
		}

		[Token(Token = "0x6000FBE")]
		[Address(RVA = "0xB24774", Offset = "0xB24774", VA = "0xB24774")]
		[IteratorStateMachine(typeof(<PickUpRoutine>d__19))]
		private IEnumerator PickUpRoutine(Holdable holdable)
		{
			return null;
		}

		[Token(Token = "0x6000FC0")]
		[Address(RVA = "0xB24898", Offset = "0xB24898", VA = "0xB24898")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FC1")]
		[Address(RVA = "0xB248F0", Offset = "0xB248F0", VA = "0xB248F0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6000FC2")]
		[Address(RVA = "0xB24B4C", Offset = "0xB24B4C", VA = "0xB24B4C")]
		private float signedAngleXZ(Vector3 a, Vector3 b)
		{
			return default(float);
		}

		[Token(Token = "0x6000FC3")]
		[Address(RVA = "0xB24BE0", Offset = "0xB24BE0", VA = "0xB24BE0")]
		public CharacterControls()
		{
		}
	}
	[Token(Token = "0x20001F9")]
	public class Gravity : MonoBehaviour
	{
		[Token(Token = "0x4000CD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 GravityForce;

		[Token(Token = "0x6000FCA")]
		[Address(RVA = "0xB24EC4", Offset = "0xB24EC4", VA = "0xB24EC4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6000FCB")]
		[Address(RVA = "0xB24ED4", Offset = "0xB24ED4", VA = "0xB24ED4")]
		public Gravity()
		{
		}
	}
	[Token(Token = "0x20001FA")]
	public class GunWithClip : MonoBehaviour
	{
		[Token(Token = "0x20001FB")]
		[CompilerGenerated]
		private sealed class <FiringRoutine>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000CE1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000CE2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000CE3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GunWithClip <>4__this;

			[Token(Token = "0x17000186")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000FDA")]
				[Address(RVA = "0xB25138", Offset = "0xB25138", VA = "0xB25138", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000187")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000FDC")]
				[Address(RVA = "0xB25180", Offset = "0xB25180", VA = "0xB25180", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000FD7")]
			[Address(RVA = "0xB24FE4", Offset = "0xB24FE4", VA = "0xB24FE4")]
			[DebuggerHidden]
			public <FiringRoutine>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x6000FD8")]
			[Address(RVA = "0xB250A4", Offset = "0xB250A4", VA = "0xB250A4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000FD9")]
			[Address(RVA = "0xB250A8", Offset = "0xB250A8", VA = "0xB250A8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000FDB")]
			[Address(RVA = "0xB25140", Offset = "0xB25140", VA = "0xB25140", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20001FC")]
		[CompilerGenerated]
		private sealed class <ReloadRoutine>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000CE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000CE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000CE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GunWithClip <>4__this;

			[Token(Token = "0x17000188")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6000FE0")]
				[Address(RVA = "0xB25264", Offset = "0xB25264", VA = "0xB25264", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000189")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6000FE2")]
				[Address(RVA = "0xB252AC", Offset = "0xB252AC", VA = "0xB252AC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6000FDD")]
			[Address(RVA = "0xB25074", Offset = "0xB25074", VA = "0xB25074")]
			[DebuggerHidden]
			public <ReloadRoutine>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x6000FDE")]
			[Address(RVA = "0xB25188", Offset = "0xB25188", VA = "0xB25188", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6000FDF")]
			[Address(RVA = "0xB2518C", Offset = "0xB2518C", VA = "0xB2518C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6000FE1")]
			[Address(RVA = "0xB2526C", Offset = "0xB2526C", VA = "0xB2526C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000CD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float FireInterval;

		[Token(Token = "0x4000CD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int ClipSize;

		[Token(Token = "0x4000CDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float ReloadTime;

		[Token(Token = "0x4000CDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject Nozzle;

		[Token(Token = "0x4000CDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject Bullet;

		[Token(Token = "0x4000CDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject FireEffect;

		[Token(Token = "0x4000CDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int clipRemaining;

		[Token(Token = "0x4000CDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float cooldown;

		[Token(Token = "0x17000182")]
		public bool IsReady
		{
			[Token(Token = "0x6000FCC")]
			[Address(RVA = "0xB24EDC", Offset = "0xB24EDC", VA = "0xB24EDC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000183")]
		public bool IsEmptyClip
		{
			[Token(Token = "0x6000FCD")]
			[Address(RVA = "0xB22BD8", Offset = "0xB22BD8", VA = "0xB22BD8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000184")]
		public bool IsReloading
		{
			[Token(Token = "0x6000FCE")]
			[Address(RVA = "0xB24EF4", Offset = "0xB24EF4", VA = "0xB24EF4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6000FCF")]
			[Address(RVA = "0xB24EFC", Offset = "0xB24EFC", VA = "0xB24EFC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000185")]
		public float ReloadFraction
		{
			[Token(Token = "0x6000FD0")]
			[Address(RVA = "0xB24F08", Offset = "0xB24F08", VA = "0xB24F08")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6000FD1")]
		[Address(RVA = "0xB228F0", Offset = "0xB228F0", VA = "0xB228F0")]
		public void Fire()
		{
		}

		[Token(Token = "0x6000FD2")]
		[Address(RVA = "0xB22BE8", Offset = "0xB22BE8", VA = "0xB22BE8")]
		public void Reload()
		{
		}

		[Token(Token = "0x6000FD3")]
		[Address(RVA = "0xB24F30", Offset = "0xB24F30", VA = "0xB24F30")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FD4")]
		[Address(RVA = "0xB24F7C", Offset = "0xB24F7C", VA = "0xB24F7C")]
		[IteratorStateMachine(typeof(<FiringRoutine>d__21))]
		private IEnumerator FiringRoutine()
		{
			return null;
		}

		[Token(Token = "0x6000FD5")]
		[Address(RVA = "0xB2500C", Offset = "0xB2500C", VA = "0xB2500C")]
		[IteratorStateMachine(typeof(<ReloadRoutine>d__22))]
		private IEnumerator ReloadRoutine()
		{
			return null;
		}

		[Token(Token = "0x6000FD6")]
		[Address(RVA = "0xB2509C", Offset = "0xB2509C", VA = "0xB2509C")]
		public GunWithClip()
		{
		}
	}
	[Token(Token = "0x20001FD")]
	public class Health : MonoBehaviour
	{
		[Token(Token = "0x4000CE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float MaxHP;

		[Token(Token = "0x4000CE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject Corpse;

		[Token(Token = "0x4000CE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Rigidbody rb;

		[Token(Token = "0x1700018A")]
		public float HP
		{
			[Token(Token = "0x6000FE3")]
			[Address(RVA = "0xB252B4", Offset = "0xB252B4", VA = "0xB252B4")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6000FE4")]
			[Address(RVA = "0xB252BC", Offset = "0xB252BC", VA = "0xB252BC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6000FE5")]
		[Address(RVA = "0xB24384", Offset = "0xB24384", VA = "0xB24384")]
		public void Impact(float amount, Vector3 impactForce, Vector3 impactPoint)
		{
		}

		[Token(Token = "0x6000FE6")]
		[Address(RVA = "0xB252C4", Offset = "0xB252C4", VA = "0xB252C4")]
		public void Damage(float amount)
		{
		}

		[Token(Token = "0x6000FE7")]
		[Address(RVA = "0xB25334", Offset = "0xB25334", VA = "0xB25334")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FE8")]
		[Address(RVA = "0xB2538C", Offset = "0xB2538C", VA = "0xB2538C")]
		public Health()
		{
		}
	}
	[Token(Token = "0x20001FE")]
	public class Holdable : MonoBehaviour
	{
		[Token(Token = "0x4000CEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float PickupTime;

		[Token(Token = "0x4000CEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float WeightPenalty;

		[Token(Token = "0x4000CED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Collider[] colliders;

		[Token(Token = "0x4000CEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool collidersDisabled;

		[Token(Token = "0x1700018B")]
		public GameObject Holder
		{
			[Token(Token = "0x6000FE9")]
			[Address(RVA = "0xB25394", Offset = "0xB25394", VA = "0xB25394")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6000FEA")]
			[Address(RVA = "0xB2539C", Offset = "0xB2539C", VA = "0xB2539C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700018C")]
		public bool IsHeld
		{
			[Token(Token = "0x6000FEB")]
			[Address(RVA = "0xB2200C", Offset = "0xB2200C", VA = "0xB2200C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6000FEC")]
		[Address(RVA = "0xB24E4C", Offset = "0xB24E4C", VA = "0xB24E4C")]
		public void PickUp(GameObject holder)
		{
		}

		[Token(Token = "0x6000FED")]
		[Address(RVA = "0xB253A4", Offset = "0xB253A4", VA = "0xB253A4")]
		public void Drop()
		{
		}

		[Token(Token = "0x6000FEE")]
		[Address(RVA = "0xB253AC", Offset = "0xB253AC", VA = "0xB253AC")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FEF")]
		[Address(RVA = "0xB25400", Offset = "0xB25400", VA = "0xB25400")]
		private void Update()
		{
		}

		[Token(Token = "0x6000FF0")]
		[Address(RVA = "0xB254DC", Offset = "0xB254DC", VA = "0xB254DC")]
		public Holdable()
		{
		}
	}
	[Token(Token = "0x20001FF")]
	public class Lifetime : MonoBehaviour
	{
		[Token(Token = "0x4000CF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float MaxAge;

		[Token(Token = "0x4000CF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float age;

		[Token(Token = "0x6000FF1")]
		[Address(RVA = "0xB254E4", Offset = "0xB254E4", VA = "0xB254E4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6000FF2")]
		[Address(RVA = "0xB254EC", Offset = "0xB254EC", VA = "0xB254EC")]
		private void Update()
		{
		}

		[Token(Token = "0x6000FF3")]
		[Address(RVA = "0xB25590", Offset = "0xB25590", VA = "0xB25590")]
		public Lifetime()
		{
		}
	}
	[Token(Token = "0x2000200")]
	public enum Teams
	{
		[Token(Token = "0x4000CF3")]
		Yellow,
		[Token(Token = "0x4000CF4")]
		Magenta,
		[Token(Token = "0x4000CF5")]
		None
	}
	[Token(Token = "0x2000201")]
	public class TeamMember : MonoBehaviour
	{
		[Token(Token = "0x4000CF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Teams StartTeam;

		[Token(Token = "0x4000CF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material YellowMaterial;

		[Token(Token = "0x4000CF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Material MagentaMaterial;

		[Token(Token = "0x4000CF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public MeshRenderer[] TeamRenderers;

		[Token(Token = "0x4000CFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Teams team;

		[Token(Token = "0x4000CFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool initialised;

		[Token(Token = "0x1700018D")]
		public Teams Team
		{
			[Token(Token = "0x6000FF4")]
			[Address(RVA = "0xB216A0", Offset = "0xB216A0", VA = "0xB216A0")]
			get
			{
				return default(Teams);
			}
			[Token(Token = "0x6000FF5")]
			[Address(RVA = "0xB25598", Offset = "0xB25598", VA = "0xB25598")]
			set
			{
			}
		}

		[Token(Token = "0x6000FF6")]
		[Address(RVA = "0xB25614", Offset = "0xB25614", VA = "0xB25614")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FF7")]
		[Address(RVA = "0xB25634", Offset = "0xB25634", VA = "0xB25634")]
		public TeamMember()
		{
		}
	}
	[Token(Token = "0x2000202")]
	[RequireComponent(typeof(Rigidbody))]
	public class Asteroid : MonoBehaviour
	{
		[Token(Token = "0x4000CFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float MaxRandomSpin;

		[Token(Token = "0x4000CFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float MaxRandomForce;

		[Token(Token = "0x4000CFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float BoundaryRadius;

		[Token(Token = "0x4000CFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float ReturnForce;

		[Token(Token = "0x4000D00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float ReturnForceLerpDistance;

		[Token(Token = "0x4000D01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody rb;

		[Token(Token = "0x6000FF8")]
		[Address(RVA = "0xB2563C", Offset = "0xB2563C", VA = "0xB2563C")]
		private void Start()
		{
		}

		[Token(Token = "0x6000FF9")]
		[Address(RVA = "0xB2582C", Offset = "0xB2582C", VA = "0xB2582C")]
		private void Update()
		{
		}

		[Token(Token = "0x6000FFA")]
		[Address(RVA = "0xB25724", Offset = "0xB25724", VA = "0xB25724")]
		private Vector3 randomVector()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6000FFB")]
		[Address(RVA = "0xB25A00", Offset = "0xB25A00", VA = "0xB25A00")]
		public Asteroid()
		{
		}
	}
	[Token(Token = "0x2000203")]
	public class CollectPickups : MonoBehaviour
	{
		[Token(Token = "0x4000D02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Sensor PickupSensor;

		[Token(Token = "0x4000D03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Sensor InteractionRange;

		[Token(Token = "0x4000D04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SteeringRig Steering;

		[Token(Token = "0x4000D05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Holdable target;

		[Token(Token = "0x6000FFC")]
		[Address(RVA = "0xB25A08", Offset = "0xB25A08", VA = "0xB25A08")]
		private void Update()
		{
		}

		[Token(Token = "0x6000FFD")]
		[Address(RVA = "0xB25C18", Offset = "0xB25C18", VA = "0xB25C18")]
		public CollectPickups()
		{
		}
	}
	[Token(Token = "0x2000204")]
	public class AlarmController : MonoBehaviour
	{
		[Token(Token = "0x2000205")]
		[CompilerGenerated]
		private sealed class <alarmRoutine>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D0D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D0E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D0F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AlarmController <>4__this;

			[Token(Token = "0x4000D10")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <startIntensity>5__2;

			[Token(Token = "0x17000191")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001009")]
				[Address(RVA = "0xB26180", Offset = "0xB26180", VA = "0xB26180", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000192")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600100B")]
				[Address(RVA = "0xB261C8", Offset = "0xB261C8", VA = "0xB261C8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001006")]
			[Address(RVA = "0xB26060", Offset = "0xB26060", VA = "0xB26060")]
			[DebuggerHidden]
			public <alarmRoutine>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6001007")]
			[Address(RVA = "0xB26090", Offset = "0xB26090", VA = "0xB26090", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001008")]
			[Address(RVA = "0xB26094", Offset = "0xB26094", VA = "0xB26094", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600100A")]
			[Address(RVA = "0xB26188", Offset = "0xB26188", VA = "0xB26188", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Light PointLight;

		[Token(Token = "0x4000D07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color AlarmColour;

		[Token(Token = "0x4000D08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float FlashFrequency;

		[Token(Token = "0x4000D09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform[] LinearLevelWaypoints;

		[Token(Token = "0x4000D0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool alarmStarted;

		[Token(Token = "0x4000D0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GameObject whoTrippedAlarm;

		[Token(Token = "0x4000D0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static AlarmController instance;

		[Token(Token = "0x1700018E")]
		public static AlarmController Instance
		{
			[Token(Token = "0x6000FFE")]
			[Address(RVA = "0xB25C20", Offset = "0xB25C20", VA = "0xB25C20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700018F")]
		public bool IsAlarmState
		{
			[Token(Token = "0x6000FFF")]
			[Address(RVA = "0xB25CE4", Offset = "0xB25CE4", VA = "0xB25CE4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000190")]
		public GameObject WhoTrippedAlarm
		{
			[Token(Token = "0x6001000")]
			[Address(RVA = "0xB25D5C", Offset = "0xB25D5C", VA = "0xB25D5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001001")]
		[Address(RVA = "0xB25D64", Offset = "0xB25D64", VA = "0xB25D64")]
		public void StartAlarm(GameObject whoTrippedAlarm)
		{
		}

		[Token(Token = "0x6001002")]
		[Address(RVA = "0xB25E00", Offset = "0xB25E00", VA = "0xB25E00")]
		public Transform[] PathToWhoTrippedAlarm(GameObject from)
		{
			return null;
		}

		[Token(Token = "0x6001003")]
		[Address(RVA = "0xB25D98", Offset = "0xB25D98", VA = "0xB25D98")]
		[IteratorStateMachine(typeof(<alarmRoutine>d__15))]
		private IEnumerator alarmRoutine()
		{
			return null;
		}

		[Token(Token = "0x6001004")]
		[Address(RVA = "0xB25F98", Offset = "0xB25F98", VA = "0xB25F98")]
		private int getNearestWaypointIndex(Vector3 toPos)
		{
			return default(int);
		}

		[Token(Token = "0x6001005")]
		[Address(RVA = "0xB26088", Offset = "0xB26088", VA = "0xB26088")]
		public AlarmController()
		{
		}
	}
	[Token(Token = "0x2000206")]
	public class AutomaticSlidingDoor : MonoBehaviour
	{
		[Token(Token = "0x2000207")]
		[CompilerGenerated]
		private sealed class <ClosingState>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D18")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D19")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D1A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AutomaticSlidingDoor <>4__this;

			[Token(Token = "0x17000193")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001013")]
				[Address(RVA = "0xB27590", Offset = "0xB27590", VA = "0xB27590", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000194")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001015")]
				[Address(RVA = "0xB275D8", Offset = "0xB275D8", VA = "0xB275D8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001010")]
			[Address(RVA = "0xB272A8", Offset = "0xB272A8", VA = "0xB272A8")]
			[DebuggerHidden]
			public <ClosingState>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6001011")]
			[Address(RVA = "0xB27368", Offset = "0xB27368", VA = "0xB27368", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001012")]
			[Address(RVA = "0xB2736C", Offset = "0xB2736C", VA = "0xB2736C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001014")]
			[Address(RVA = "0xB27598", Offset = "0xB27598", VA = "0xB27598", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000208")]
		[CompilerGenerated]
		private sealed class <OpeningState>d__9 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D1B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D1C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D1D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AutomaticSlidingDoor <>4__this;

			[Token(Token = "0x17000195")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001019")]
				[Address(RVA = "0xB278AC", Offset = "0xB278AC", VA = "0xB278AC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000196")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600101B")]
				[Address(RVA = "0xB278F4", Offset = "0xB278F4", VA = "0xB278F4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001016")]
			[Address(RVA = "0xB27338", Offset = "0xB27338", VA = "0xB27338")]
			[DebuggerHidden]
			public <OpeningState>d__9(int <>1__state)
			{
			}

			[Token(Token = "0x6001017")]
			[Address(RVA = "0xB275E0", Offset = "0xB275E0", VA = "0xB275E0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001018")]
			[Address(RVA = "0xB275E4", Offset = "0xB275E4", VA = "0xB275E4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600101A")]
			[Address(RVA = "0xB278B4", Offset = "0xB278B4", VA = "0xB278B4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Sensor ObjectSensor;

		[Token(Token = "0x4000D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject LeftDoor;

		[Token(Token = "0x4000D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject RightDoor;

		[Token(Token = "0x4000D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float SlideAmount;

		[Token(Token = "0x4000D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float Speed;

		[Token(Token = "0x4000D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 leftStart;

		[Token(Token = "0x4000D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 rightStart;

		[Token(Token = "0x600100C")]
		[Address(RVA = "0xB271D0", Offset = "0xB271D0", VA = "0xB271D0")]
		private void Start()
		{
		}

		[Token(Token = "0x600100D")]
		[Address(RVA = "0xB27240", Offset = "0xB27240", VA = "0xB27240")]
		[IteratorStateMachine(typeof(<ClosingState>d__8))]
		private IEnumerator ClosingState()
		{
			return null;
		}

		[Token(Token = "0x600100E")]
		[Address(RVA = "0xB272D0", Offset = "0xB272D0", VA = "0xB272D0")]
		[IteratorStateMachine(typeof(<OpeningState>d__9))]
		private IEnumerator OpeningState()
		{
			return null;
		}

		[Token(Token = "0x600100F")]
		[Address(RVA = "0xB27360", Offset = "0xB27360", VA = "0xB27360")]
		public AutomaticSlidingDoor()
		{
		}
	}
	[Token(Token = "0x2000209")]
	public class CameraFollow : MonoBehaviour
	{
		[Token(Token = "0x4000D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject ToFollow;

		[Token(Token = "0x4000D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float Speed;

		[Token(Token = "0x4000D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 offset;

		[Token(Token = "0x600101C")]
		[Address(RVA = "0xB278FC", Offset = "0xB278FC", VA = "0xB278FC")]
		private void Start()
		{
		}

		[Token(Token = "0x600101D")]
		[Address(RVA = "0xB27970", Offset = "0xB27970", VA = "0xB27970")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600101E")]
		[Address(RVA = "0xB27AF0", Offset = "0xB27AF0", VA = "0xB27AF0")]
		public CameraFollow()
		{
		}
	}
	[Token(Token = "0x200020A")]
	[RequireComponent(typeof(GunWithClip), typeof(TeamMember))]
	public class GuardAI : MonoBehaviour
	{
		[Token(Token = "0x200020B")]
		[CompilerGenerated]
		private sealed class <PatrolState>d__12 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D2C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GuardAI <>4__this;

			[Token(Token = "0x4000D2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <nextWaypoint>5__2;

			[Token(Token = "0x17000197")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600102D")]
				[Address(RVA = "0xB283F4", Offset = "0xB283F4", VA = "0xB283F4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000198")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600102F")]
				[Address(RVA = "0xB2843C", Offset = "0xB2843C", VA = "0xB2843C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600102A")]
			[Address(RVA = "0xB27BF0", Offset = "0xB27BF0", VA = "0xB27BF0")]
			[DebuggerHidden]
			public <PatrolState>d__12(int <>1__state)
			{
			}

			[Token(Token = "0x600102B")]
			[Address(RVA = "0xB28208", Offset = "0xB28208", VA = "0xB28208", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600102C")]
			[Address(RVA = "0xB2820C", Offset = "0xB2820C", VA = "0xB2820C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600102E")]
			[Address(RVA = "0xB283FC", Offset = "0xB283FC", VA = "0xB283FC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200020C")]
		[CompilerGenerated]
		private sealed class <PauseState>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D30")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D31")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D32")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GuardAI <>4__this;

			[Token(Token = "0x4000D33")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <timer>5__2;

			[Token(Token = "0x17000199")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001033")]
				[Address(RVA = "0xB28564", Offset = "0xB28564", VA = "0xB28564", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700019A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001035")]
				[Address(RVA = "0xB285AC", Offset = "0xB285AC", VA = "0xB285AC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001030")]
			[Address(RVA = "0xB27C80", Offset = "0xB27C80", VA = "0xB27C80")]
			[DebuggerHidden]
			public <PauseState>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6001031")]
			[Address(RVA = "0xB28444", Offset = "0xB28444", VA = "0xB28444", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001032")]
			[Address(RVA = "0xB28448", Offset = "0xB28448", VA = "0xB28448", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001034")]
			[Address(RVA = "0xB2856C", Offset = "0xB2856C", VA = "0xB2856C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200020D")]
		[CompilerGenerated]
		private sealed class <AttackState>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D34")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D35")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D36")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GuardAI <>4__this;

			[Token(Token = "0x4000D37")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public GameObject ToAttack;

			[Token(Token = "0x4000D38")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <alarmTimer>5__2;

			[Token(Token = "0x1700019B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001039")]
				[Address(RVA = "0xB28860", Offset = "0xB28860", VA = "0xB28860", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700019C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600103B")]
				[Address(RVA = "0xB288A8", Offset = "0xB288A8", VA = "0xB288A8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001036")]
			[Address(RVA = "0xB27D1C", Offset = "0xB27D1C", VA = "0xB27D1C")]
			[DebuggerHidden]
			public <AttackState>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6001037")]
			[Address(RVA = "0xB285B4", Offset = "0xB285B4", VA = "0xB285B4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001038")]
			[Address(RVA = "0xB285B8", Offset = "0xB285B8", VA = "0xB285B8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600103A")]
			[Address(RVA = "0xB28868", Offset = "0xB28868", VA = "0xB28868", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200020E")]
		[CompilerGenerated]
		private sealed class <Investigate>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D39")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D3A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D3B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GuardAI <>4__this;

			[Token(Token = "0x4000D3C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 position;

			[Token(Token = "0x4000D3D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <timer>5__2;

			[Token(Token = "0x1700019D")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600103F")]
				[Address(RVA = "0xB28994", Offset = "0xB28994", VA = "0xB28994", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700019E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001041")]
				[Address(RVA = "0xB289DC", Offset = "0xB289DC", VA = "0xB289DC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600103C")]
			[Address(RVA = "0xB27DD0", Offset = "0xB27DD0", VA = "0xB27DD0")]
			[DebuggerHidden]
			public <Investigate>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x600103D")]
			[Address(RVA = "0xB288B0", Offset = "0xB288B0", VA = "0xB288B0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600103E")]
			[Address(RVA = "0xB288B4", Offset = "0xB288B4", VA = "0xB288B4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001040")]
			[Address(RVA = "0xB2899C", Offset = "0xB2899C", VA = "0xB2899C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200020F")]
		[CompilerGenerated]
		private sealed class <Chase>d__16 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D3E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D3F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D40")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GuardAI <>4__this;

			[Token(Token = "0x4000D41")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Transform[] <chasePath>5__2;

			[Token(Token = "0x4000D42")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <nextWaypoint>5__3;

			[Token(Token = "0x1700019F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001045")]
				[Address(RVA = "0xB28BF0", Offset = "0xB28BF0", VA = "0xB28BF0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001A0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001047")]
				[Address(RVA = "0xB28C38", Offset = "0xB28C38", VA = "0xB28C38", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001042")]
			[Address(RVA = "0xB27E60", Offset = "0xB27E60", VA = "0xB27E60")]
			[DebuggerHidden]
			public <Chase>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x6001043")]
			[Address(RVA = "0xB289E4", Offset = "0xB289E4", VA = "0xB289E4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001044")]
			[Address(RVA = "0xB289E8", Offset = "0xB289E8", VA = "0xB289E8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001046")]
			[Address(RVA = "0xB28BF8", Offset = "0xB28BF8", VA = "0xB28BF8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject GunPivot;

		[Token(Token = "0x4000D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SteeringRig Steering;

		[Token(Token = "0x4000D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Sensor Sight;

		[Token(Token = "0x4000D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform[] PatrolPath;

		[Token(Token = "0x4000D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float WaypointArriveDistance;

		[Token(Token = "0x4000D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float PauseTime;

		[Token(Token = "0x4000D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float WanderDistance;

		[Token(Token = "0x4000D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float SoundAlarmTime;

		[Token(Token = "0x4000D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private GunWithClip gun;

		[Token(Token = "0x4000D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private TeamMember team;

		[Token(Token = "0x4000D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool ascending;

		[Token(Token = "0x600101F")]
		[Address(RVA = "0xB27AF8", Offset = "0xB27AF8", VA = "0xB27AF8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001020")]
		[Address(RVA = "0xB27B88", Offset = "0xB27B88", VA = "0xB27B88")]
		[IteratorStateMachine(typeof(<PatrolState>d__12))]
		private IEnumerator PatrolState()
		{
			return null;
		}

		[Token(Token = "0x6001021")]
		[Address(RVA = "0xB27C18", Offset = "0xB27C18", VA = "0xB27C18")]
		[IteratorStateMachine(typeof(<PauseState>d__13))]
		private IEnumerator PauseState()
		{
			return null;
		}

		[Token(Token = "0x6001022")]
		[Address(RVA = "0xB27CA8", Offset = "0xB27CA8", VA = "0xB27CA8")]
		[IteratorStateMachine(typeof(<AttackState>d__14))]
		private IEnumerator AttackState(GameObject ToAttack)
		{
			return null;
		}

		[Token(Token = "0x6001023")]
		[Address(RVA = "0xB27D44", Offset = "0xB27D44", VA = "0xB27D44")]
		[IteratorStateMachine(typeof(<Investigate>d__15))]
		private IEnumerator Investigate(Vector3 position)
		{
			return null;
		}

		[Token(Token = "0x6001024")]
		[Address(RVA = "0xB27DF8", Offset = "0xB27DF8", VA = "0xB27DF8")]
		[IteratorStateMachine(typeof(<Chase>d__16))]
		private IEnumerator Chase()
		{
			return null;
		}

		[Token(Token = "0x6001025")]
		[Address(RVA = "0xB27E88", Offset = "0xB27E88", VA = "0xB27E88")]
		private bool attackEnemyIfSpotted()
		{
			return default(bool);
		}

		[Token(Token = "0x6001026")]
		[Address(RVA = "0xB27FAC", Offset = "0xB27FAC", VA = "0xB27FAC")]
		private bool chaseIfAlarmSounded()
		{
			return default(bool);
		}

		[Token(Token = "0x6001027")]
		[Address(RVA = "0xB27FFC", Offset = "0xB27FFC", VA = "0xB27FFC")]
		private int getNearestWaypointIndex()
		{
			return default(int);
		}

		[Token(Token = "0x6001028")]
		[Address(RVA = "0xB280E8", Offset = "0xB280E8", VA = "0xB280E8")]
		private Vector3 wanderVector()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001029")]
		[Address(RVA = "0xB281F8", Offset = "0xB281F8", VA = "0xB281F8")]
		public GuardAI()
		{
		}
	}
	[Token(Token = "0x2000210")]
	[RequireComponent(typeof(CharacterControls))]
	public class PlayerInput : MonoBehaviour
	{
		[Token(Token = "0x4000D43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Sensor InteractionRange;

		[Token(Token = "0x4000D44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CharacterControls cc;

		[Token(Token = "0x6001048")]
		[Address(RVA = "0xB28C40", Offset = "0xB28C40", VA = "0xB28C40")]
		private void Start()
		{
		}

		[Token(Token = "0x6001049")]
		[Address(RVA = "0xB28C90", Offset = "0xB28C90", VA = "0xB28C90")]
		private void Update()
		{
		}

		[Token(Token = "0x600104A")]
		[Address(RVA = "0xB28F5C", Offset = "0xB28F5C", VA = "0xB28F5C")]
		public PlayerInput()
		{
		}
	}
	[Token(Token = "0x2000211")]
	[RequireComponent(typeof(TeamMember))]
	public class SecurityCamera : MonoBehaviour
	{
		[Token(Token = "0x2000212")]
		[CompilerGenerated]
		private sealed class <scanState>d__16 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D52")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D53")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D54")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SecurityCamera <>4__this;

			[Token(Token = "0x170001A1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001057")]
				[Address(RVA = "0xB297D4", Offset = "0xB297D4", VA = "0xB297D4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001A2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001059")]
				[Address(RVA = "0xB2981C", Offset = "0xB2981C", VA = "0xB2981C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001054")]
			[Address(RVA = "0xB293BC", Offset = "0xB293BC", VA = "0xB293BC")]
			[DebuggerHidden]
			public <scanState>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x6001055")]
			[Address(RVA = "0xB296A8", Offset = "0xB296A8", VA = "0xB296A8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001056")]
			[Address(RVA = "0xB296AC", Offset = "0xB296AC", VA = "0xB296AC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001058")]
			[Address(RVA = "0xB297DC", Offset = "0xB297DC", VA = "0xB297DC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000213")]
		[CompilerGenerated]
		private sealed class <scanMovement>d__17 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SecurityCamera <>4__this;

			[Token(Token = "0x170001A3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600105D")]
				[Address(RVA = "0xB29938", Offset = "0xB29938", VA = "0xB29938", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001A4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600105F")]
				[Address(RVA = "0xB29980", Offset = "0xB29980", VA = "0xB29980", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600105A")]
			[Address(RVA = "0xB2944C", Offset = "0xB2944C", VA = "0xB2944C")]
			[DebuggerHidden]
			public <scanMovement>d__17(int <>1__state)
			{
			}

			[Token(Token = "0x600105B")]
			[Address(RVA = "0xB29824", Offset = "0xB29824", VA = "0xB29824", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600105C")]
			[Address(RVA = "0xB29828", Offset = "0xB29828", VA = "0xB29828", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600105E")]
			[Address(RVA = "0xB29940", Offset = "0xB29940", VA = "0xB29940", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000214")]
		[CompilerGenerated]
		private sealed class <trackState>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D58")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D59")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D5A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SecurityCamera <>4__this;

			[Token(Token = "0x4000D5B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private GameObject <enemy>5__2;

			[Token(Token = "0x4000D5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private float <timer>5__3;

			[Token(Token = "0x170001A5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001063")]
				[Address(RVA = "0xB29B60", Offset = "0xB29B60", VA = "0xB29B60", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001A6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001065")]
				[Address(RVA = "0xB29BA8", Offset = "0xB29BA8", VA = "0xB29BA8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001060")]
			[Address(RVA = "0xB294DC", Offset = "0xB294DC", VA = "0xB294DC")]
			[DebuggerHidden]
			public <trackState>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x6001061")]
			[Address(RVA = "0xB29988", Offset = "0xB29988", VA = "0xB29988", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001062")]
			[Address(RVA = "0xB2998C", Offset = "0xB2998C", VA = "0xB2998C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001064")]
			[Address(RVA = "0xB29B68", Offset = "0xB29B68", VA = "0xB29B68", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000215")]
		[CompilerGenerated]
		private sealed class <alarmState>d__19 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000D5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000D5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000D5F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SecurityCamera <>4__this;

			[Token(Token = "0x170001A7")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001069")]
				[Address(RVA = "0xB29C44", Offset = "0xB29C44", VA = "0xB29C44", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001A8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600106B")]
				[Address(RVA = "0xB29C8C", Offset = "0xB29C8C", VA = "0xB29C8C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001066")]
			[Address(RVA = "0xB2956C", Offset = "0xB2956C", VA = "0xB2956C")]
			[DebuggerHidden]
			public <alarmState>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x6001067")]
			[Address(RVA = "0xB29BB0", Offset = "0xB29BB0", VA = "0xB29BB0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001068")]
			[Address(RVA = "0xB29BB4", Offset = "0xB29BB4", VA = "0xB29BB4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600106A")]
			[Address(RVA = "0xB29C4C", Offset = "0xB29C4C", VA = "0xB29C4C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float RotationSpeed;

		[Token(Token = "0x4000D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float ScanTime;

		[Token(Token = "0x4000D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float TrackTime;

		[Token(Token = "0x4000D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float ScanArcAngle;

		[Token(Token = "0x4000D49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Light SpotLight;

		[Token(Token = "0x4000D4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Sensor Sensor;

		[Token(Token = "0x4000D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color ScanColour;

		[Token(Token = "0x4000D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Color TrackColour;

		[Token(Token = "0x4000D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Color AlarmColour;

		[Token(Token = "0x4000D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Quaternion leftExtreme;

		[Token(Token = "0x4000D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Quaternion rightExtreme;

		[Token(Token = "0x4000D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private TeamMember team;

		[Token(Token = "0x4000D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Quaternion targetRotation;

		[Token(Token = "0x600104B")]
		[Address(RVA = "0xB28F64", Offset = "0xB28F64", VA = "0xB28F64")]
		private void Awake()
		{
		}

		[Token(Token = "0x600104C")]
		[Address(RVA = "0xB29194", Offset = "0xB29194", VA = "0xB29194")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600104D")]
		[Address(RVA = "0xB29260", Offset = "0xB29260", VA = "0xB29260")]
		private void Update()
		{
		}

		[Token(Token = "0x600104E")]
		[Address(RVA = "0xB291F8", Offset = "0xB291F8", VA = "0xB291F8")]
		[IteratorStateMachine(typeof(<scanState>d__16))]
		private IEnumerator scanState()
		{
			return null;
		}

		[Token(Token = "0x600104F")]
		[Address(RVA = "0xB293E4", Offset = "0xB293E4", VA = "0xB293E4")]
		[IteratorStateMachine(typeof(<scanMovement>d__17))]
		private IEnumerator scanMovement()
		{
			return null;
		}

		[Token(Token = "0x6001050")]
		[Address(RVA = "0xB29474", Offset = "0xB29474", VA = "0xB29474")]
		[IteratorStateMachine(typeof(<trackState>d__18))]
		private IEnumerator trackState()
		{
			return null;
		}

		[Token(Token = "0x6001051")]
		[Address(RVA = "0xB29504", Offset = "0xB29504", VA = "0xB29504")]
		[IteratorStateMachine(typeof(<alarmState>d__19))]
		private IEnumerator alarmState()
		{
			return null;
		}

		[Token(Token = "0x6001052")]
		[Address(RVA = "0xB29594", Offset = "0xB29594", VA = "0xB29594")]
		private GameObject getSpottedEnemy()
		{
			return null;
		}

		[Token(Token = "0x6001053")]
		[Address(RVA = "0xB296A0", Offset = "0xB296A0", VA = "0xB296A0")]
		public SecurityCamera()
		{
		}
	}
}
namespace VisualDesignCafe.Rendering.Nature
{
	[Token(Token = "0x2000216")]
	public static class NatureRendererSrp
	{
		[Token(Token = "0x600106C")]
		[Address(RVA = "0xB29C94", Offset = "0xB29C94", VA = "0xB29C94")]
		[RuntimeInitializeOnLoadMethod]
		private static void Initialize()
		{
		}

		[Token(Token = "0x600106D")]
		[Address(RVA = "0xB29D68", Offset = "0xB29D68", VA = "0xB29D68")]
		private static void OnBeginFrameRendering(ScriptableRenderContext context, Camera[] cameras)
		{
		}
	}
}
namespace StylizedWaterShader
{
	[Token(Token = "0x2000217")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	public class EnableDepthBuffer : MonoBehaviour
	{
		[Token(Token = "0x4000D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Camera cam;

		[Token(Token = "0x600106E")]
		[Address(RVA = "0xB2A178", Offset = "0xB2A178", VA = "0xB2A178")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x600106F")]
		[Address(RVA = "0xB2A200", Offset = "0xB2A200", VA = "0xB2A200")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001070")]
		[Address(RVA = "0xB2A2E4", Offset = "0xB2A2E4", VA = "0xB2A2E4")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001071")]
		[Address(RVA = "0xB2A368", Offset = "0xB2A368", VA = "0xB2A368")]
		public EnableDepthBuffer()
		{
		}
	}
	[Token(Token = "0x2000218")]
	[HelpURL("http://staggart.xyz/unity/stylized-water-shader/documentation/")]
	[RequireComponent(typeof(MeshRenderer))]
	[ExecuteInEditMode]
	public class StylizedWater : MonoBehaviour
	{
		[Token(Token = "0x4000D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string[] shaderNames;

		[Token(Token = "0x4000D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int shaderIndex;

		[Token(Token = "0x4000D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Shader shader;

		[Token(Token = "0x4000D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Shader DesktopShader;

		[Token(Token = "0x4000D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Shader MobileAdvancedShader;

		[Token(Token = "0x4000D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(2000f, 4000f)]
		public int renderQueue;

		[Token(Token = "0x4000D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool enableVertexColors;

		[Token(Token = "0x4000D68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		public bool enableDepthTex;

		[Token(Token = "0x4000D69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		public bool isUnlit;

		[Token(Token = "0x4000D6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
		public bool enableGradient;

		[Token(Token = "0x4000D6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Gradient colorGradient;

		[Token(Token = "0x4000D6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[ColorUsage(true, true)]
		public Color waterShallowColor;

		[Token(Token = "0x4000D6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Range(0f, 100f)]
		public float depth;

		[Token(Token = "0x4000D6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[ColorUsage(true, true)]
		public Color waterColor;

		[Token(Token = "0x4000D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[ColorUsage(true, true)]
		public Color fresnelColor;

		[Token(Token = "0x4000D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float fresnel;

		[Token(Token = "0x4000D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[ColorUsage(true, true)]
		public Color rimColor;

		[Token(Token = "0x4000D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Range(-0.5f, 0.5f)]
		public float waveTint;

		[Token(Token = "0x4000D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Range(0f, 1f)]
		public float transparency;

		[Token(Token = "0x4000D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Range(0.01f, 1f)]
		public float glossiness;

		[Token(Token = "0x4000D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[Range(0f, 1f)]
		public float metallicness;

		[Token(Token = "0x4000D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Range(0f, 3f)]
		public float edgeFade;

		[Token(Token = "0x4000D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public string[] tilingMethodNames;

		[Token(Token = "0x4000D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float worldSpaceTiling;

		[Token(Token = "0x4000D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[Range(0f, 0.2f)]
		public float refractionAmount;

		[Token(Token = "0x4000D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool enableNormalMap;

		[Token(Token = "0x4000D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Range(0f, 1f)]
		public float normalStrength;

		[Token(Token = "0x4000D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public bool enableMacroNormals;

		[Token(Token = "0x4000D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[Range(250f, 3000f)]
		public float macroNormalsDistance;

		[Token(Token = "0x4000D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Range(0f, 50f)]
		public float normalTiling;

		[Token(Token = "0x4000D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public int intersectionSolver;

		[Token(Token = "0x4000D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public string[] intersectionSolverNames;

		[Token(Token = "0x4000D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Range(0f, 30f)]
		public float rimSize;

		[Token(Token = "0x4000D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[Range(0.1f, 30f)]
		public float rimFalloff;

		[Token(Token = "0x4000D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public float rimTiling;

		[Token(Token = "0x4000D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[Range(0f, 1f)]
		public float rimDistortion;

		[Token(Token = "0x4000D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public bool enableVCIntersection;

		[Token(Token = "0x4000D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public int foamSolver;

		[Token(Token = "0x4000D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public string[] foamSolverNames;

		[Token(Token = "0x4000D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Range(-1f, 1f)]
		public float foamOpacity;

		[Token(Token = "0x4000D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		public float foamTiling;

		[Token(Token = "0x4000D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Range(0f, 1f)]
		public float foamSize;

		[Token(Token = "0x4000D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		[Range(0f, 3f)]
		public float foamDistortion;

		[Token(Token = "0x4000D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Range(0f, 1f)]
		public float foamSpeed;

		[Token(Token = "0x4000D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		[Range(0f, 1f)]
		public float waveFoam;

		[Token(Token = "0x4000D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[Range(0f, 1f)]
		public float reflectionStrength;

		[Token(Token = "0x4000D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		[Range(0.01f, 10f)]
		public float reflectionFresnel;

		[Token(Token = "0x4000D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public bool showReflection;

		[Token(Token = "0x4000D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		[Range(0f, 0.2f)]
		public float reflectionRefraction;

		[Token(Token = "0x4000D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[Range(0.01f, 10f)]
		public float waveSpeed;

		[Token(Token = "0x4000D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		[Range(0f, 1f)]
		public float waveStrength;

		[Token(Token = "0x4000D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[Range(-1f, 1f)]
		public Vector4 waveDirectionXZ;

		[Token(Token = "0x4000D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public bool enableSecondaryWaves;

		[Token(Token = "0x4000D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public Texture2D customIntersection;

		[Token(Token = "0x4000D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public Texture2D customNormal;

		[Token(Token = "0x4000D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public Texture2D customHeightmap;

		[Token(Token = "0x4000D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public string[] intersectionStyleNames;

		[Token(Token = "0x4000D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public int intersectionStyle;

		[Token(Token = "0x4000D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public string[] waveStyleNames;

		[Token(Token = "0x4000D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public int waveStyle;

		[Token(Token = "0x4000D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public string[] waveHeightmapNames;

		[Token(Token = "0x4000D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public int waveHeightmapStyle;

		[Token(Token = "0x4000D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		public float waveSize;

		[Token(Token = "0x4000DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public bool useCustomIntersection;

		[Token(Token = "0x4000DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x191")]
		public bool useCustomNormals;

		[Token(Token = "0x4000DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x192")]
		public bool useCustomHeightmap;

		[Token(Token = "0x4000DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public Texture2D normals;

		[Token(Token = "0x4000DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public Texture2D shadermap;

		[Token(Token = "0x4000DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public Texture2D colorGradientTex;

		[Token(Token = "0x4000DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public bool useCompression;

		[Token(Token = "0x4000DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool EnableReflections;

		[Token(Token = "0x4000DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private Camera reflectionCamera;

		[Token(Token = "0x4000DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private Camera refractCamera;

		[Token(Token = "0x4000DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public bool useReflection;

		[Token(Token = "0x4000DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C9")]
		public bool useRefractionCam;

		[Token(Token = "0x4000DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CA")]
		public bool enableReflectionBlur;

		[Token(Token = "0x4000DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		[Range(1f, 15f)]
		public float reflectionBlurLength;

		[Token(Token = "0x4000DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		[Range(1f, 4f)]
		public int reflectionBlurPasses;

		[Token(Token = "0x4000DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private StylizedWaterBlur reflectionBlurRenderer;

		[Token(Token = "0x4000DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public string[] refractionSolverNames;

		[Token(Token = "0x4000DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public int refractionSolver;

		[Token(Token = "0x4000DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		public string[] resolutionNames;

		[Token(Token = "0x4000DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		public int reflectionRes;

		[Token(Token = "0x4000DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1FC")]
		public int refractRes;

		[Token(Token = "0x4000DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		public int reflectionTextureSize;

		[Token(Token = "0x4000DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		public int refractTextureSize;

		[Token(Token = "0x4000DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		[Range(0f, 10f)]
		public float clipPlaneOffset;

		[Token(Token = "0x4000DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20C")]
		public LayerMask reflectLayers;

		[Token(Token = "0x4000DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		public LayerMask refractLayers;

		[Token(Token = "0x4000DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private Dictionary<Camera, Camera> m_ReflectionCameras;

		[Token(Token = "0x4000DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private Dictionary<Camera, StylizedWaterBlur> m_BlurRenderers;

		[Token(Token = "0x4000DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private Dictionary<Camera, Camera> m_RefractCameras;

		[Token(Token = "0x4000DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private RenderTexture m_ReflectionTexture;

		[Token(Token = "0x4000DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		private RenderTexture m_RefractTexture;

		[Token(Token = "0x4000DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		private int m_OldReflectionTextureSize;

		[Token(Token = "0x4000DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x244")]
		private int m_OldRefractTextureSize;

		[Token(Token = "0x4000DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		private bool s_InsideRendering;

		[Token(Token = "0x4000DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24C")]
		public int lightingMethod;

		[Token(Token = "0x4000DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		public string[] lightingMethodNames;

		[Token(Token = "0x4000DC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		public bool enableShadows;

		[Token(Token = "0x4000DC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		private StylizedWaterShadowCaster shadowRenderer;

		[Token(Token = "0x4000DC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		public Light shadowCaster;

		[NonSerialized]
		[Token(Token = "0x4000DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		private MeshRenderer meshRenderer;

		[Token(Token = "0x4000DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		public Material material;

		[Token(Token = "0x4000DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		public bool isMobileAdvanced;

		[Token(Token = "0x4000DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x281")]
		public bool isMobilePlatform;

		[Token(Token = "0x4000DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		public string shaderName;

		[Token(Token = "0x4000DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		public bool isWaterLayer;

		[Token(Token = "0x4000DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x291")]
		public bool hasShaderParams;

		[Token(Token = "0x4000DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x292")]
		public bool hasMaterial;

		[Token(Token = "0x4000DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x293")]
		public bool usingSinglePassRendering;

		[Token(Token = "0x4000DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x294")]
		public bool hideMeshRenderer;

		[Token(Token = "0x6001072")]
		[Address(RVA = "0xB2A370", Offset = "0xB2A370", VA = "0xB2A370")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6001073")]
		[Address(RVA = "0xB2A484", Offset = "0xB2A484", VA = "0xB2A484")]
		public void Init()
		{
		}

		[Token(Token = "0x6001074")]
		[Address(RVA = "0xB2A3FC", Offset = "0xB2A3FC", VA = "0xB2A3FC")]
		public void GetProperties()
		{
		}

		[Token(Token = "0x6001075")]
		[Address(RVA = "0xB2A488", Offset = "0xB2A488", VA = "0xB2A488")]
		private void GetShaderProperties()
		{
		}

		[Token(Token = "0x6001076")]
		[Address(RVA = "0xB2AEB8", Offset = "0xB2AEB8", VA = "0xB2AEB8")]
		private void GetShaderType()
		{
		}

		[Token(Token = "0x6001077")]
		[Address(RVA = "0xB2AEBC", Offset = "0xB2AEBC", VA = "0xB2AEBC")]
		private void SetShaderType()
		{
		}

		[Token(Token = "0x6001078")]
		[Address(RVA = "0xB2A400", Offset = "0xB2A400", VA = "0xB2A400")]
		public void SetProperties()
		{
		}

		[Token(Token = "0x6001079")]
		[Address(RVA = "0xB2B140", Offset = "0xB2B140", VA = "0xB2B140")]
		private void SetShaderProperties()
		{
		}

		[Token(Token = "0x600107A")]
		[Address(RVA = "0xB2BE24", Offset = "0xB2BE24", VA = "0xB2BE24")]
		public void DisableReflectionCam()
		{
		}

		[Token(Token = "0x600107B")]
		[Address(RVA = "0xB2BC28", Offset = "0xB2BC28", VA = "0xB2BC28")]
		public void DisableRefractionCam()
		{
		}

		[Token(Token = "0x600107C")]
		[Address(RVA = "0xB2AEC0", Offset = "0xB2AEC0", VA = "0xB2AEC0")]
		private void EnableShadowRendering()
		{
		}

		[Token(Token = "0x600107D")]
		[Address(RVA = "0xB2AF88", Offset = "0xB2AF88", VA = "0xB2AF88")]
		private void DisableShadowRendering()
		{
		}

		[Token(Token = "0x600107E")]
		[Address(RVA = "0xB2C08C", Offset = "0xB2C08C", VA = "0xB2C08C")]
		public void SetVegetationStudioWaterLevel()
		{
		}

		[Token(Token = "0x600107F")]
		[Address(RVA = "0xB2C090", Offset = "0xB2C090", VA = "0xB2C090")]
		public void OnWillRenderObject()
		{
		}

		[Token(Token = "0x6001080")]
		[Address(RVA = "0xB2D670", Offset = "0xB2D670", VA = "0xB2D670")]
		public void CreateReflectionTexture()
		{
		}

		[Token(Token = "0x6001081")]
		[Address(RVA = "0xB2D79C", Offset = "0xB2D79C", VA = "0xB2D79C")]
		public void CreateRefractionTexture()
		{
		}

		[Token(Token = "0x6001082")]
		[Address(RVA = "0xB2C77C", Offset = "0xB2C77C", VA = "0xB2C77C")]
		private void CreateWaterObjects(Camera currentCamera, out Camera reflectionCamera, out Camera refractCamera)
		{
		}

		[Token(Token = "0x6001083")]
		[Address(RVA = "0xB2D92C", Offset = "0xB2D92C", VA = "0xB2D92C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001084")]
		[Address(RVA = "0xB2D9C8", Offset = "0xB2D9C8", VA = "0xB2D9C8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001085")]
		[Address(RVA = "0xB2D9CC", Offset = "0xB2D9CC", VA = "0xB2D9CC")]
		public StylizedWater()
		{
		}
	}
	[Token(Token = "0x2000219")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Camera))]
	public class StylizedWaterBlur : MonoBehaviour
	{
		[Token(Token = "0x4000DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Camera cam;

		[Token(Token = "0x4000DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float length;

		[Token(Token = "0x4000DD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int passes;

		[Token(Token = "0x4000DD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Shader m_BlurRenderShader;

		[Token(Token = "0x4000DD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Material m_BlurRenderMat;

		[Token(Token = "0x4000DD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CommandBuffer cmd;

		[Token(Token = "0x170001A9")]
		private static Shader BlurRenderShader
		{
			[Token(Token = "0x6001086")]
			[Address(RVA = "0xB2DB2C", Offset = "0xB2DB2C", VA = "0xB2DB2C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001AA")]
		private static Material BlurRenderMat
		{
			[Token(Token = "0x6001087")]
			[Address(RVA = "0xB2DBE4", Offset = "0xB2DBE4", VA = "0xB2DBE4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001088")]
		[Address(RVA = "0xB2DCCC", Offset = "0xB2DCCC", VA = "0xB2DCCC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001089")]
		[Address(RVA = "0xB2DD58", Offset = "0xB2DD58", VA = "0xB2DD58")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600108A")]
		[Address(RVA = "0xB2D248", Offset = "0xB2D248", VA = "0xB2D248")]
		public void Render()
		{
		}

		[Token(Token = "0x600108B")]
		[Address(RVA = "0xB2DDF4", Offset = "0xB2DDF4", VA = "0xB2DDF4")]
		public StylizedWaterBlur()
		{
		}
	}
	[Token(Token = "0x200021A")]
	[ExecuteInEditMode]
	[RequireComponent(typeof(Light))]
	public class StylizedWaterShadowCaster : MonoBehaviour
	{
		[Token(Token = "0x4000DD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CommandBuffer cmd;

		[Token(Token = "0x4000DD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Light dirLight;

		[Token(Token = "0x600108C")]
		[Address(RVA = "0xB2DE08", Offset = "0xB2DE08", VA = "0xB2DE08")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600108D")]
		[Address(RVA = "0xB2DFB4", Offset = "0xB2DFB4", VA = "0xB2DFB4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600108E")]
		[Address(RVA = "0xB2E034", Offset = "0xB2E034", VA = "0xB2E034")]
		public StylizedWaterShadowCaster()
		{
		}
	}
	[Token(Token = "0x200021B")]
	public static class StylizedWaterUtilities
	{
		[Token(Token = "0x200021C")]
		public static class CameraUtils
		{
			[Token(Token = "0x6001092")]
			[Address(RVA = "0xB2D0A0", Offset = "0xB2D0A0", VA = "0xB2D0A0")]
			public static Vector4 CameraSpacePlane(Camera cam, Vector3 pos, Vector3 normal, float sideSign, float clipPlaneOffset)
			{
				return default(Vector4);
			}

			[Token(Token = "0x6001093")]
			[Address(RVA = "0xB2D00C", Offset = "0xB2D00C", VA = "0xB2D00C")]
			public static void CalculateReflectionMatrix(ref Matrix4x4 reflectionMat, Vector4 plane)
			{
			}

			[Token(Token = "0x6001094")]
			[Address(RVA = "0xB2CE84", Offset = "0xB2CE84", VA = "0xB2CE84")]
			public static void CopyCameraSettings(Camera src, Camera dest)
			{
			}
		}

		[Token(Token = "0x4000DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool DEBUG;

		[Token(Token = "0x600108F")]
		[Address(RVA = "0xB2E03C", Offset = "0xB2E03C", VA = "0xB2E03C")]
		public static string[] ComposeDropdown(Texture2D[] resource, string replaceFilter)
		{
			return null;
		}

		[Token(Token = "0x6001090")]
		[Address(RVA = "0xB2E25C", Offset = "0xB2E25C", VA = "0xB2E25C")]
		public static bool IsApproximatelyEqual(float a, float b)
		{
			return default(bool);
		}

		[Token(Token = "0x6001091")]
		[Address(RVA = "0xB2E274", Offset = "0xB2E274", VA = "0xB2E274")]
		public static bool HasVertexColors(Mesh mesh)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200021D")]
	public class OrbitCamera : MonoBehaviour
	{
		[Token(Token = "0x4000DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Space]
		[Header("Stylized Water Demo")]
		public Transform pivot;

		[Token(Token = "0x4000DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Space]
		public bool enableMouse;

		[Token(Token = "0x4000DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float idleRotationSpeed;

		[Token(Token = "0x4000DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Transform cam;

		[Token(Token = "0x4000DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float cameraRotSide;

		[Token(Token = "0x4000DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float cameraRotUp;

		[Token(Token = "0x4000DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float cameraRotSideCur;

		[Token(Token = "0x4000DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float cameraRotUpCur;

		[Token(Token = "0x4000DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float distance;

		[Token(Token = "0x6001095")]
		[Address(RVA = "0xB2E40C", Offset = "0xB2E40C", VA = "0xB2E40C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001096")]
		[Address(RVA = "0xB2E4C0", Offset = "0xB2E4C0", VA = "0xB2E4C0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001097")]
		[Address(RVA = "0xB2E894", Offset = "0xB2E894", VA = "0xB2E894")]
		public OrbitCamera()
		{
		}
	}
}
namespace VRKemono
{
	[Token(Token = "0x200021E")]
	public class KoiFishSwim : MonoBehaviour
	{
		[Token(Token = "0x4000DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform trCenter;

		[Token(Token = "0x4000DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float radius;

		[Token(Token = "0x4000DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector2 moveMM;

		[Token(Token = "0x4000DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float moveSpeed;

		[Token(Token = "0x4000DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float accuracy;

		[Token(Token = "0x4000DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float angle;

		[Token(Token = "0x4000DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float radiusUpdate;

		[Token(Token = "0x4000DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool clockWise;

		[Token(Token = "0x4000DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Animator anim;

		[Token(Token = "0x4000DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 moveVector;

		[Token(Token = "0x4000DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float changeSpeedTime;

		[Token(Token = "0x6001098")]
		[Address(RVA = "0xB2E8B0", Offset = "0xB2E8B0", VA = "0xB2E8B0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001099")]
		[Address(RVA = "0xB2E948", Offset = "0xB2E948", VA = "0xB2E948")]
		private void I_ActivateAnimation()
		{
		}

		[Token(Token = "0x600109A")]
		[Address(RVA = "0xB2E9C8", Offset = "0xB2E9C8", VA = "0xB2E9C8")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x600109B")]
		[Address(RVA = "0xB2E994", Offset = "0xB2E994", VA = "0xB2E994")]
		private void SetRandomParams()
		{
		}

		[Token(Token = "0x600109C")]
		[Address(RVA = "0xB2EAF0", Offset = "0xB2EAF0", VA = "0xB2EAF0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600109D")]
		[Address(RVA = "0xB2ECE8", Offset = "0xB2ECE8", VA = "0xB2ECE8")]
		public KoiFishSwim()
		{
		}
	}
	[Token(Token = "0x200021F")]
	public class ROE_LOC : ScriptableObject
	{
		[Token(Token = "0x2000220")]
		public interface IDataGetter
		{
			[Token(Token = "0x60010A2")]
			Localisation GetLocalisation(string ENGLISH);
		}

		[Token(Token = "0x2000221")]
		private class DataGetter : IDataGetter
		{
			[Token(Token = "0x4000DF1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private Func<string, Localisation> _GetLocalisation;

			[Token(Token = "0x60010A3")]
			[Address(RVA = "0xB2EF08", Offset = "0xB2EF08", VA = "0xB2EF08", Slot = "4")]
			public Localisation GetLocalisation(string ENGLISH)
			{
				return null;
			}

			[Token(Token = "0x60010A4")]
			[Address(RVA = "0xB2EED0", Offset = "0xB2EED0", VA = "0xB2EED0")]
			public DataGetter(Func<string, Localisation> getLocalisation)
			{
			}
		}

		[NonSerialized]
		[Token(Token = "0x4000DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int mVersion;

		[Token(Token = "0x4000DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		internal Localisation[] _LocalisationItems;

		[NonSerialized]
		[Token(Token = "0x4000DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private DataGetter mDataGetterObject;

		[Token(Token = "0x170001AB")]
		private DataGetter DataGetterObject
		{
			[Token(Token = "0x60010A0")]
			[Address(RVA = "0xB2EDF4", Offset = "0xB2EDF4", VA = "0xB2EDF4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600109E")]
		[Address(RVA = "0xB2ED1C", Offset = "0xB2ED1C", VA = "0xB2ED1C")]
		public Localisation GetLocalisation(string eNGLISH)
		{
			return null;
		}

		[Token(Token = "0x600109F")]
		[Address(RVA = "0xB2EEC0", Offset = "0xB2EEC0", VA = "0xB2EEC0")]
		public void Reset()
		{
		}

		[Token(Token = "0x60010A1")]
		[Address(RVA = "0xB2EEF8", Offset = "0xB2EEF8", VA = "0xB2EEF8")]
		public ROE_LOC()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000222")]
	public class Localisation
	{
		[Token(Token = "0x4000DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		[SerializeField]
		private string _ENGLISH;

		[Token(Token = "0x4000DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private string _CHINESE;

		[Token(Token = "0x4000DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private string _Ja;

		[Token(Token = "0x4000DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private string _Ko;

		[NonSerialized]
		[Token(Token = "0x4000DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int mVersion;

		[Token(Token = "0x170001AC")]
		public string ENGLISH
		{
			[Token(Token = "0x60010A5")]
			[Address(RVA = "0xB2EF2C", Offset = "0xB2EF2C", VA = "0xB2EF2C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001AD")]
		public string CHINESE
		{
			[Token(Token = "0x60010A6")]
			[Address(RVA = "0xB2EF34", Offset = "0xB2EF34", VA = "0xB2EF34")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001AE")]
		public string ja
		{
			[Token(Token = "0x60010A7")]
			[Address(RVA = "0xB2EF3C", Offset = "0xB2EF3C", VA = "0xB2EF3C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001AF")]
		public string ko
		{
			[Token(Token = "0x60010A8")]
			[Address(RVA = "0xB2EF44", Offset = "0xB2EF44", VA = "0xB2EF44")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010A9")]
		[Address(RVA = "0xB2EEAC", Offset = "0xB2EEAC", VA = "0xB2EEAC")]
		public Localisation Init(int version, ROE_LOC.IDataGetter getter)
		{
			return null;
		}

		[Token(Token = "0x60010AA")]
		[Address(RVA = "0xB2EF4C", Offset = "0xB2EF4C", VA = "0xB2EF4C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}

		[Token(Token = "0x60010AB")]
		[Address(RVA = "0xB2F080", Offset = "0xB2F080", VA = "0xB2F080")]
		public Localisation()
		{
		}
	}
	[Token(Token = "0x2000223")]
	public class SwitchLanguage : MonoBehaviour
	{
		[Token(Token = "0x4000DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int langID;

		[Token(Token = "0x4000DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextEvent SwitchSignal;

		[Token(Token = "0x60010AC")]
		[Address(RVA = "0xB2F088", Offset = "0xB2F088", VA = "0xB2F088")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60010AD")]
		[Address(RVA = "0xB2F318", Offset = "0xB2F318", VA = "0xB2F318")]
		public SwitchLanguage()
		{
		}
	}
	[Token(Token = "0x2000224")]
	public class FruitNinjaExitTrigger : MonoBehaviour
	{
		[Token(Token = "0x4000DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public FruitNinjaManager fnm;

		[Token(Token = "0x60010AE")]
		[Address(RVA = "0xB2F320", Offset = "0xB2F320", VA = "0xB2F320")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60010AF")]
		[Address(RVA = "0xB2F518", Offset = "0xB2F518", VA = "0xB2F518")]
		public FruitNinjaExitTrigger()
		{
		}
	}
	[Token(Token = "0x2000225")]
	public class FruitNinjaManager : MonoBehaviour
	{
		[Token(Token = "0x4000DFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float forceUp;

		[Token(Token = "0x4000DFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector2 spawnMinMax;

		[Token(Token = "0x4000DFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject PF_StartTrigger;

		[Token(Token = "0x4000DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform T_StartTrigger;

		[Token(Token = "0x4000DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject[] PF_CutObjects;

		[Token(Token = "0x4000DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform[] TR_SpawnPoints;

		[Token(Token = "0x4000E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool _gameIsRunning;

		[Token(Token = "0x4000E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private Vector3 _startTPos;

		[Token(Token = "0x60010B0")]
		[Address(RVA = "0xB2F520", Offset = "0xB2F520", VA = "0xB2F520")]
		private void Start()
		{
		}

		[Token(Token = "0x60010B1")]
		[Address(RVA = "0xB2F54C", Offset = "0xB2F54C", VA = "0xB2F54C")]
		public void EVT_StartGame()
		{
		}

		[Token(Token = "0x60010B2")]
		[Address(RVA = "0xB2F5C0", Offset = "0xB2F5C0", VA = "0xB2F5C0")]
		private void I_SpawnFruit()
		{
		}

		[Token(Token = "0x60010B3")]
		[Address(RVA = "0xB2F3B4", Offset = "0xB2F3B4", VA = "0xB2F3B4")]
		public void EVT_StopGame()
		{
		}

		[Token(Token = "0x60010B4")]
		[Address(RVA = "0xB2F8C8", Offset = "0xB2F8C8", VA = "0xB2F8C8")]
		public FruitNinjaManager()
		{
		}
	}
	[Token(Token = "0x2000226")]
	public class GravityAfterTime : MonoBehaviour
	{
		[Token(Token = "0x4000E02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float timeToTurnOn;

		[Token(Token = "0x60010B5")]
		[Address(RVA = "0xB2F8E4", Offset = "0xB2F8E4", VA = "0xB2F8E4")]
		private void Start()
		{
		}

		[Token(Token = "0x60010B6")]
		[Address(RVA = "0xB2F934", Offset = "0xB2F934", VA = "0xB2F934")]
		private void I_TurnOnGravity()
		{
		}

		[Token(Token = "0x60010B7")]
		[Address(RVA = "0xB2F990", Offset = "0xB2F990", VA = "0xB2F990")]
		public GravityAfterTime()
		{
		}
	}
	[Token(Token = "0x2000227")]
	public class RotateAround : MonoBehaviour
	{
		[Token(Token = "0x4000E03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform center;

		[Token(Token = "0x4000E04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 axis;

		[Token(Token = "0x4000E05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 desiredPosition;

		[Token(Token = "0x4000E06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float radius;

		[Token(Token = "0x4000E07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float radiusSpeed;

		[Token(Token = "0x4000E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float rotationSpeed;

		[Token(Token = "0x60010B8")]
		[Address(RVA = "0xB2F9A0", Offset = "0xB2F9A0", VA = "0xB2F9A0")]
		private void Start()
		{
		}

		[Token(Token = "0x60010B9")]
		[Address(RVA = "0xB2FB0C", Offset = "0xB2FB0C", VA = "0xB2FB0C")]
		private void Update()
		{
		}

		[Token(Token = "0x60010BA")]
		[Address(RVA = "0xB2FE10", Offset = "0xB2FE10", VA = "0xB2FE10")]
		public RotateAround()
		{
		}
	}
	[Token(Token = "0x2000228")]
	public class AI_FootTrigger : MonoBehaviour
	{
		[Token(Token = "0x4000E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AI_Controller _controller;

		[Token(Token = "0x4000E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FootstepEvent footstepEvent;

		[Token(Token = "0x4000E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected Collider _trigger;

		[Token(Token = "0x4000E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color NormalFeetColor;

		[Token(Token = "0x4000E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Color BleedlFeetColor;

		[Token(Token = "0x170001B0")]
		public Collider trigger
		{
			[Token(Token = "0x60010BB")]
			[Address(RVA = "0xB2FE84", Offset = "0xB2FE84", VA = "0xB2FE84")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010BC")]
		[Address(RVA = "0xB2FF18", Offset = "0xB2FF18", VA = "0xB2FF18")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60010BD")]
		[Address(RVA = "0xB300E4", Offset = "0xB300E4", VA = "0xB300E4")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x60010BE")]
		[Address(RVA = "0xB30274", Offset = "0xB30274", VA = "0xB30274")]
		public AI_FootTrigger()
		{
		}
	}
	[Token(Token = "0x2000229")]
	public abstract class AI_RotState : AI_State
	{
		[Token(Token = "0x4000E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Quaternion _destRot;

		[Token(Token = "0x170001B1")]
		protected bool TargetMoved
		{
			[Token(Token = "0x60010BF")]
			[Address(RVA = "0xB3027C", Offset = "0xB3027C", VA = "0xB3027C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001B2")]
		protected bool TargetDisengadged
		{
			[Token(Token = "0x60010C0")]
			[Address(RVA = "0xB30444", Offset = "0xB30444", VA = "0xB30444")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60010C1")]
		[Address(RVA = "0xB30514", Offset = "0xB30514", VA = "0xB30514")]
		private void FindRotationToPlayer()
		{
		}

		[Token(Token = "0x60010C2")]
		[Address(RVA = "0xB306D0", Offset = "0xB306D0", VA = "0xB306D0", Slot = "7")]
		protected override void CorrectPlayerRotation()
		{
		}

		[Token(Token = "0x60010C3")]
		[Address(RVA = "0xB30898", Offset = "0xB30898", VA = "0xB30898")]
		protected AI_RotState()
		{
		}
	}
	[Token(Token = "0x200022A")]
	public abstract class AI_State : MonoBehaviour
	{
		[Token(Token = "0x4000E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected I_WaveEnemy _waveEnemy;

		[Token(Token = "0x4000E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		public bool bCanBeSwitchedExternally;

		[Token(Token = "0x4000E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[SerializeField]
		public bool bIsFinalState;

		[Token(Token = "0x4000E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		protected AI_StateMachine.AIStateType _switchState;

		[Token(Token = "0x4000E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected AI_StateMachine _stateMachine;

		[Token(Token = "0x170001B3")]
		protected Animator _anim
		{
			[Token(Token = "0x60010C4")]
			[Address(RVA = "0xB308B8", Offset = "0xB308B8", VA = "0xB308B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B4")]
		protected NavMeshAgent _agent
		{
			[Token(Token = "0x60010C5")]
			[Address(RVA = "0xB303C8", Offset = "0xB303C8", VA = "0xB303C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B5")]
		protected Transform _target
		{
			[Token(Token = "0x60010C6")]
			[Address(RVA = "0xB3034C", Offset = "0xB3034C", VA = "0xB3034C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B6")]
		protected Transform _trNinja
		{
			[Token(Token = "0x60010C7")]
			[Address(RVA = "0xB306B4", Offset = "0xB306B4", VA = "0xB306B4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010C8")]
		[Address(RVA = "0xB30934", Offset = "0xB30934", VA = "0xB30934", Slot = "4")]
		public virtual void SetWaveEnemy(I_WaveEnemy pEnemy)
		{
		}

		[Token(Token = "0x60010C9")]
		[Address(RVA = "0xB3093C", Offset = "0xB3093C", VA = "0xB3093C", Slot = "5")]
		public virtual void SetStateMachine(AI_StateMachine stateMachine)
		{
		}

		[Token(Token = "0x60010CA")]
		[Address(RVA = "0xB30944", Offset = "0xB30944", VA = "0xB30944", Slot = "6")]
		public virtual void SwitchState(AI_StateMachine.AIStateType nextState)
		{
		}

		[Token(Token = "0x60010CB")]
		[Address(RVA = "0xB30954", Offset = "0xB30954", VA = "0xB30954", Slot = "7")]
		protected virtual void CorrectPlayerRotation()
		{
		}

		[Token(Token = "0x60010CC")]
		[Address(RVA = "0xB30958", Offset = "0xB30958", VA = "0xB30958")]
		public void OnPreInitState()
		{
		}

		[Token(Token = "0x60010CD")]
		[Address(RVA = "0xB30978", Offset = "0xB30978", VA = "0xB30978")]
		public AI_StateMachine.AIStateType OnSwitchState()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x60010CE")]
		[Address(RVA = "0xB309B8", Offset = "0xB309B8", VA = "0xB309B8", Slot = "8")]
		public virtual void OnEnterState()
		{
		}

		[Token(Token = "0x60010CF")]
		[Address(RVA = "0xB309BC", Offset = "0xB309BC", VA = "0xB309BC", Slot = "9")]
		public virtual void OnExitState()
		{
		}

		[Token(Token = "0x60010D0")]
		[Address(RVA = "0xB309C0", Offset = "0xB309C0", VA = "0xB309C0", Slot = "10")]
		public virtual void OnAnimatorIKUpdated()
		{
		}

		[Token(Token = "0x60010D1")]
		[Address(RVA = "0xB309C4", Offset = "0xB309C4", VA = "0xB309C4", Slot = "11")]
		public virtual void OnDestinationReached(bool isReached)
		{
		}

		[Token(Token = "0x60010D2")]
		public abstract AI_StateMachine.AIStateType GetStateType();

		[Token(Token = "0x60010D3")]
		public abstract AI_StateMachine.AIStateType OnUpdate();

		[Token(Token = "0x60010D4")]
		[Address(RVA = "0xB308A8", Offset = "0xB308A8", VA = "0xB308A8")]
		protected AI_State()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200022B")]
	public class AIStatesDictionary : Extensions.SerializableDictionary<AI_StateMachine.AIStateType, AI_State>
	{
		[Token(Token = "0x60010D5")]
		[Address(RVA = "0xB309C8", Offset = "0xB309C8", VA = "0xB309C8")]
		public AIStatesDictionary()
		{
		}
	}
	[Token(Token = "0x200022C")]
	public class AI_StateMachine : MonoBehaviour
	{
		[Token(Token = "0x200022D")]
		public enum AIStateType
		{
			[Token(Token = "0x4000E1B")]
			NONE,
			[Token(Token = "0x4000E1C")]
			IDLE,
			[Token(Token = "0x4000E1D")]
			SPAWN,
			[Token(Token = "0x4000E1E")]
			SCAN,
			[Token(Token = "0x4000E1F")]
			PATROL,
			[Token(Token = "0x4000E20")]
			DRAW_SWORD,
			[Token(Token = "0x4000E21")]
			FIND_TARGET,
			[Token(Token = "0x4000E22")]
			HIT_REACT,
			[Token(Token = "0x4000E23")]
			PURSUIT,
			[Token(Token = "0x4000E24")]
			INVESTIGATE,
			[Token(Token = "0x4000E25")]
			ATTACK,
			[Token(Token = "0x4000E26")]
			TELEPORT,
			[Token(Token = "0x4000E27")]
			DEAD
		}

		[Token(Token = "0x4000E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public bool useRootPosition;

		[Token(Token = "0x4000E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[HideInInspector]
		public bool useRootRotation;

		[Token(Token = "0x4000E16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		[Label("Current State", "")]
		protected AIStateType _currentStateType;

		[Token(Token = "0x4000E17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AIStatesDictionary States;

		[Token(Token = "0x4000E18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected AI_State _currentState;

		[Token(Token = "0x4000E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public UnityEvent ON_Death;

		[Token(Token = "0x170001B7")]
		public AI_State CurrentState
		{
			[Token(Token = "0x60010D6")]
			[Address(RVA = "0xB30A10", Offset = "0xB30A10", VA = "0xB30A10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60010D7")]
		[Address(RVA = "0xB30A18", Offset = "0xB30A18", VA = "0xB30A18")]
		public void Init(I_WaveEnemy pEnemy)
		{
		}

		[Token(Token = "0x60010D8")]
		[Address(RVA = "0xB30C20", Offset = "0xB30C20", VA = "0xB30C20", Slot = "4")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x60010D9")]
		[Address(RVA = "0xB30D74", Offset = "0xB30D74", VA = "0xB30D74")]
		public void SwitchState(AI_State newState)
		{
		}

		[Token(Token = "0x60010DA")]
		[Address(RVA = "0xB30DD4", Offset = "0xB30DD4", VA = "0xB30DD4")]
		public AI_StateMachine()
		{
		}
	}
	[Token(Token = "0x200022E")]
	public class AI_AnimController : MonoBehaviour
	{
		[Token(Token = "0x200022F")]
		public enum ANIM_CB
		{
			[Token(Token = "0x4000E4A")]
			NOT_DEFINED,
			[Token(Token = "0x4000E4B")]
			PICKUP,
			[Token(Token = "0x4000E4C")]
			JUMP_START,
			[Token(Token = "0x4000E4D")]
			JUMP_FORWARD,
			[Token(Token = "0x4000E4E")]
			IDLE,
			[Token(Token = "0x4000E4F")]
			SWORD_IN,
			[Token(Token = "0x4000E50")]
			SWORD_OUT,
			[Token(Token = "0x4000E51")]
			DEATH,
			[Token(Token = "0x4000E52")]
			KATANA_START,
			[Token(Token = "0x4000E53")]
			KATANA_ATTACK,
			[Token(Token = "0x4000E54")]
			CROSSBOW_SHOT,
			[Token(Token = "0x4000E55")]
			FALL,
			[Token(Token = "0x4000E56")]
			CROSSBOW_ARMED
		}

		[Token(Token = "0x2000230")]
		public enum ANIM_ACTIONS
		{
			[Token(Token = "0x4000E58")]
			HOLSTER_KATANA = 1,
			[Token(Token = "0x4000E59")]
			DRAW_KATANA,
			[Token(Token = "0x4000E5A")]
			BANANA_FALL,
			[Token(Token = "0x4000E5B")]
			PICKUP
		}

		[Token(Token = "0x2000231")]
		[CompilerGenerated]
		private sealed class <CR_DestinationBehaviour>d__60 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E5C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E5D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E5E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AI_AnimController <>4__this;

			[Token(Token = "0x170001BD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60010FB")]
				[Address(RVA = "0xB33054", Offset = "0xB33054", VA = "0xB33054", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001BE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60010FD")]
				[Address(RVA = "0xB3309C", Offset = "0xB3309C", VA = "0xB3309C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60010F8")]
			[Address(RVA = "0xB31A6C", Offset = "0xB31A6C", VA = "0xB31A6C")]
			[DebuggerHidden]
			public <CR_DestinationBehaviour>d__60(int <>1__state)
			{
			}

			[Token(Token = "0x60010F9")]
			[Address(RVA = "0xB32F18", Offset = "0xB32F18", VA = "0xB32F18", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60010FA")]
			[Address(RVA = "0xB32F1C", Offset = "0xB32F1C", VA = "0xB32F1C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60010FC")]
			[Address(RVA = "0xB3305C", Offset = "0xB3305C", VA = "0xB3305C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 destination;

		[Token(Token = "0x4000E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool isAttacking;

		[Token(Token = "0x4000E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float destinationRoutineIteration;

		[Token(Token = "0x4000E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float attackRotationSpeed;

		[Token(Token = "0x4000E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private AI_Controller _controller;

		[Token(Token = "0x4000E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private NavMeshAgent _agent;

		[Token(Token = "0x4000E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Animator _animator;

		[Token(Token = "0x4000E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Rigidbody _rigidbody;

		[Token(Token = "0x4000E30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		public FBKEvent _OnFBKEvent;

		[Token(Token = "0x4000E31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Quaternion _desiredRotation;

		[Token(Token = "0x4000E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private CapsuleCollider _capsuleCollider;

		[Token(Token = "0x4000E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private int _poseIDHash;

		[Token(Token = "0x4000E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int _SpeedHash;

		[Token(Token = "0x4000E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int _AngleHash;

		[Token(Token = "0x4000E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int _ActionIDHash;

		[Token(Token = "0x4000E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int _AttacIDkHash;

		[Token(Token = "0x4000E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private int _DeadkHash;

		[Token(Token = "0x4000E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _DeathAnimkHash;

		[Token(Token = "0x4000E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private int _AttackHash;

		[Token(Token = "0x4000E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private int _IdleAnimHash;

		[Token(Token = "0x4000E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private int _IdleHash;

		[Token(Token = "0x4000E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private int _InAirHash;

		[Token(Token = "0x4000E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private int _ActionHash;

		[Token(Token = "0x4000E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public AI_AnimStateBH.AnimCallbackDelegate CBD_AnimStart;

		[Token(Token = "0x4000E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public AI_AnimStateBH.AnimCallbackDelegate CBD_AnimEnd;

		[Token(Token = "0x4000E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public AI_AnimStateBH.AnimCallbackDelegate CBD_AnimTimed;

		[Token(Token = "0x4000E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool _bInAir;

		[Token(Token = "0x4000E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private float _restoreSpeed;

		[Token(Token = "0x4000E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected RaycastHit groundHit;

		[Token(Token = "0x4000E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		protected float groundDistance;

		[Token(Token = "0x4000E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private bool _bIsLeamping;

		[Token(Token = "0x4000E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF1")]
		private bool _bIsKatanaDrawn;

		[Token(Token = "0x4000E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF2")]
		public bool drawAgentPath;

		[Token(Token = "0x170001B8")]
		public NavMeshAgent Agent
		{
			[Token(Token = "0x60010DB")]
			[Address(RVA = "0xB30E40", Offset = "0xB30E40", VA = "0xB30E40")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001B9")]
		private GameObject KatanaBack
		{
			[Token(Token = "0x60010DC")]
			[Address(RVA = "0xB30E48", Offset = "0xB30E48", VA = "0xB30E48")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001BA")]
		private GameObject KatanaHand
		{
			[Token(Token = "0x60010DD")]
			[Address(RVA = "0xB30E64", Offset = "0xB30E64", VA = "0xB30E64")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001BB")]
		public bool IsKatanaDrawn
		{
			[Token(Token = "0x60010DE")]
			[Address(RVA = "0xB30E80", Offset = "0xB30E80", VA = "0xB30E80")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170001BC")]
		public bool IsLeamping
		{
			[Token(Token = "0x60010DF")]
			[Address(RVA = "0xB30E88", Offset = "0xB30E88", VA = "0xB30E88")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60010E0")]
		[Address(RVA = "0xB30E90", Offset = "0xB30E90", VA = "0xB30E90")]
		private void Start()
		{
		}

		[Token(Token = "0x60010E1")]
		[Address(RVA = "0xB311CC", Offset = "0xB311CC", VA = "0xB311CC")]
		public void EVT_DoyouHearMe(Collider playerCO)
		{
		}

		[Token(Token = "0x60010E2")]
		[Address(RVA = "0xB30FFC", Offset = "0xB30FFC", VA = "0xB30FFC")]
		private void IniAnimationCallbacks()
		{
		}

		[Token(Token = "0x60010E3")]
		[Address(RVA = "0xB31334", Offset = "0xB31334", VA = "0xB31334")]
		private void ON_AnimStart(ANIM_CB cbState)
		{
		}

		[Token(Token = "0x60010E4")]
		[Address(RVA = "0xB31350", Offset = "0xB31350", VA = "0xB31350")]
		private void ON_AnimTimed(ANIM_CB cbState)
		{
		}

		[Token(Token = "0x60010E5")]
		[Address(RVA = "0xB315B8", Offset = "0xB315B8", VA = "0xB315B8")]
		private void ON_AnimEnd(ANIM_CB cbState)
		{
		}

		[Token(Token = "0x60010E6")]
		[Address(RVA = "0xB31728", Offset = "0xB31728", VA = "0xB31728")]
		internal void PLAY_BananaFall()
		{
		}

		[Token(Token = "0x60010E7")]
		[Address(RVA = "0xB31764", Offset = "0xB31764", VA = "0xB31764")]
		internal void PLAY_PikcupAndStand()
		{
		}

		[Token(Token = "0x60010E8")]
		[Address(RVA = "0xB317A0", Offset = "0xB317A0", VA = "0xB317A0")]
		internal void SwitchFeetHurtPose()
		{
		}

		[Token(Token = "0x60010E9")]
		[Address(RVA = "0xB31874", Offset = "0xB31874", VA = "0xB31874")]
		internal void PLAY_DeathAnimation(int animID)
		{
		}

		[Token(Token = "0x60010EA")]
		[Address(RVA = "0xB318B4", Offset = "0xB318B4", VA = "0xB318B4")]
		internal void PLAY_IdleAnimation(int animID)
		{
		}

		[Token(Token = "0x60010EB")]
		[Address(RVA = "0xB318F4", Offset = "0xB318F4", VA = "0xB318F4")]
		internal void PLAY_RandomIdleAnimation()
		{
		}

		[Token(Token = "0x60010EC")]
		[Address(RVA = "0xB31964", Offset = "0xB31964", VA = "0xB31964")]
		internal void PLAY_DrawKatana()
		{
		}

		[Token(Token = "0x60010ED")]
		[Address(RVA = "0xB319BC", Offset = "0xB319BC", VA = "0xB319BC")]
		internal void PLAY_HolsterKatana()
		{
		}

		[Token(Token = "0x60010EE")]
		[Address(RVA = "0xB31A10", Offset = "0xB31A10", VA = "0xB31A10")]
		internal void PLAY_AttackAnimation()
		{
		}

		[Token(Token = "0x60010EF")]
		[Address(RVA = "0xB31164", Offset = "0xB31164", VA = "0xB31164")]
		[IteratorStateMachine(typeof(<CR_DestinationBehaviour>d__60))]
		protected IEnumerator CR_DestinationBehaviour()
		{
			return null;
		}

		[Token(Token = "0x60010F0")]
		[Address(RVA = "0xB31A94", Offset = "0xB31A94", VA = "0xB31A94", Slot = "4")]
		protected virtual void UpdateDestination(Vector3 position)
		{
		}

		[Token(Token = "0x60010F1")]
		[Address(RVA = "0xB31CC8", Offset = "0xB31CC8", VA = "0xB31CC8")]
		private void CheckGroundDistance()
		{
		}

		[Token(Token = "0x60010F2")]
		[Address(RVA = "0xB3214C", Offset = "0xB3214C", VA = "0xB3214C")]
		public bool AgentDone()
		{
			return default(bool);
		}

		[Token(Token = "0x60010F3")]
		[Address(RVA = "0xB321C8", Offset = "0xB321C8", VA = "0xB321C8")]
		public bool AgentStopping()
		{
			return default(bool);
		}

		[Token(Token = "0x60010F4")]
		[Address(RVA = "0xB32240", Offset = "0xB32240", VA = "0xB32240")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60010F5")]
		[Address(RVA = "0xB32378", Offset = "0xB32378", VA = "0xB32378")]
		private void UpdateAnimator(float pSpeed, float pDireciton)
		{
		}

		[Token(Token = "0x60010F6")]
		[Address(RVA = "0xB32410", Offset = "0xB32410", VA = "0xB32410")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x60010F7")]
		[Address(RVA = "0xB32D08", Offset = "0xB32D08", VA = "0xB32D08")]
		public AI_AnimController()
		{
		}
	}
	[Token(Token = "0x2000232")]
	public class AI_Controller : AI_ControllerBase
	{
		[Token(Token = "0x2000233")]
		public enum AI_ROLE
		{
			[Token(Token = "0x4000E7E")]
			GUARD,
			[Token(Token = "0x4000E7F")]
			PATROL,
			[Token(Token = "0x4000E80")]
			SEEK_N_DESTROY
		}

		[Token(Token = "0x2000234")]
		public enum MOOD_STATE
		{
			[Token(Token = "0x4000E82")]
			NONE,
			[Token(Token = "0x4000E83")]
			CALM,
			[Token(Token = "0x4000E84")]
			ALERT,
			[Token(Token = "0x4000E85")]
			INVESTIGATE,
			[Token(Token = "0x4000E86")]
			RETREAT
		}

		[Token(Token = "0x2000235")]
		public enum DEATH_CAUSE
		{
			[Token(Token = "0x4000E88")]
			NONE,
			[Token(Token = "0x4000E89")]
			ARROW,
			[Token(Token = "0x4000E8A")]
			FIRE,
			[Token(Token = "0x4000E8B")]
			DART,
			[Token(Token = "0x4000E8C")]
			FREEZE,
			[Token(Token = "0x4000E8D")]
			BANANA,
			[Token(Token = "0x4000E8E")]
			POISON
		}

		[Token(Token = "0x2000236")]
		[CompilerGenerated]
		private sealed class <CR_BananaPoison>d__37 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E8F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E90")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E91")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AI_Controller <>4__this;

			[Token(Token = "0x170001BF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001114")]
				[Address(RVA = "0xB341B8", Offset = "0xB341B8", VA = "0xB341B8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001C0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001116")]
				[Address(RVA = "0xB34200", Offset = "0xB34200", VA = "0xB34200", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001111")]
			[Address(RVA = "0xB33678", Offset = "0xB33678", VA = "0xB33678")]
			[DebuggerHidden]
			public <CR_BananaPoison>d__37(int <>1__state)
			{
			}

			[Token(Token = "0x6001112")]
			[Address(RVA = "0xB340EC", Offset = "0xB340EC", VA = "0xB340EC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001113")]
			[Address(RVA = "0xB340F0", Offset = "0xB340F0", VA = "0xB340F0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001115")]
			[Address(RVA = "0xB341C0", Offset = "0xB341C0", VA = "0xB341C0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000237")]
		[CompilerGenerated]
		private sealed class <CR_MoveToTarget>d__45 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E92")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E93")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E94")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AI_Controller <>4__this;

			[Token(Token = "0x170001C1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600111A")]
				[Address(RVA = "0xB34344", Offset = "0xB34344", VA = "0xB34344", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001C2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600111C")]
				[Address(RVA = "0xB3438C", Offset = "0xB3438C", VA = "0xB3438C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001117")]
			[Address(RVA = "0xB33D74", Offset = "0xB33D74", VA = "0xB33D74")]
			[DebuggerHidden]
			public <CR_MoveToTarget>d__45(int <>1__state)
			{
			}

			[Token(Token = "0x6001118")]
			[Address(RVA = "0xB34208", Offset = "0xB34208", VA = "0xB34208", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001119")]
			[Address(RVA = "0xB3420C", Offset = "0xB3420C", VA = "0xB3420C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600111B")]
			[Address(RVA = "0xB3434C", Offset = "0xB3434C", VA = "0xB3434C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000238")]
		[CompilerGenerated]
		private sealed class <CR_LookAtTarget>d__50 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000E95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000E96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000E97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AI_Controller <>4__this;

			[Token(Token = "0x4000E98")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private float <cDist>5__2;

			[Token(Token = "0x4000E99")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private Vector3 <destLoc>5__3;

			[Token(Token = "0x4000E9A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <Koef>5__4;

			[Token(Token = "0x170001C3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001120")]
				[Address(RVA = "0xB34590", Offset = "0xB34590", VA = "0xB34590", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001C4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001122")]
				[Address(RVA = "0xB345D8", Offset = "0xB345D8", VA = "0xB345D8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600111D")]
			[Address(RVA = "0xB33FB0", Offset = "0xB33FB0", VA = "0xB33FB0")]
			[DebuggerHidden]
			public <CR_LookAtTarget>d__50(int <>1__state)
			{
			}

			[Token(Token = "0x600111E")]
			[Address(RVA = "0xB34394", Offset = "0xB34394", VA = "0xB34394", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600111F")]
			[Address(RVA = "0xB34398", Offset = "0xB34398", VA = "0xB34398", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001121")]
			[Address(RVA = "0xB34598", Offset = "0xB34598", VA = "0xB34598", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public bool IgnorePlayer;

		[Token(Token = "0x4000E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public AI_ROLE AI_Role;

		[Token(Token = "0x4000E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public MOOD_STATE AI_Mood;

		[Token(Token = "0x4000E62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public DEATH_CAUSE DeathCause;

		[Token(Token = "0x4000E63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public AI_AnimController animCtrl;

		[Token(Token = "0x4000E64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Transform TR_LookAt;

		[Token(Token = "0x4000E65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public LookAtIK LookAtIK;

		[Token(Token = "0x4000E66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public Animator Anim;

		[Token(Token = "0x4000E67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public PuppetMaster pMaster;

		[Token(Token = "0x4000E68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public HitReaction hReaction;

		[Token(Token = "0x4000E69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public GameObject KatanaBack;

		[Token(Token = "0x4000E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public GameObject KatanaHand;

		[Token(Token = "0x4000E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public AI_FootTrigger leftFootTrigger;

		[Token(Token = "0x4000E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public AI_FootTrigger rightFootTrigger;

		[Token(Token = "0x4000E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public GameObject pfInvestigateZone;

		[Token(Token = "0x4000E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public GrounderFBBIK GroundIK;

		[Token(Token = "0x4000E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public TriggerSensor SightSensor;

		[Token(Token = "0x4000E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public Transform TR_Chest_Blood;

		[Token(Token = "0x4000E71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public bool DrawGizmos;

		[Token(Token = "0x4000E72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		public float attackRadius;

		[Token(Token = "0x4000E73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[Range(25f, 160f)]
		public float attackFOV;

		[Token(Token = "0x4000E74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		public float hearRadius;

		[Token(Token = "0x4000E75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public float detectRadius;

		[Token(Token = "0x4000E76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		public int PatrolZoneID;

		[Token(Token = "0x4000E77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public string EnemyLayer;

		[Token(Token = "0x4000E78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public Collider boneHit;

		[Token(Token = "0x4000E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public float hitPower;

		[Token(Token = "0x4000E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public Transform TrInvestigate;

		[Token(Token = "0x4000E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public float moveSpeed;

		[Token(Token = "0x4000E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		public int actionID;

		[Token(Token = "0x60010FE")]
		[Address(RVA = "0xB330A4", Offset = "0xB330A4", VA = "0xB330A4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60010FF")]
		[Address(RVA = "0xB3313C", Offset = "0xB3313C", VA = "0xB3313C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001100")]
		[Address(RVA = "0xB333C4", Offset = "0xB333C4", VA = "0xB333C4")]
		private void DisableInternalCollisions()
		{
		}

		[Token(Token = "0x6001101")]
		[Address(RVA = "0xB335D4", Offset = "0xB335D4", VA = "0xB335D4")]
		public void MakeSleep()
		{
		}

		[Token(Token = "0x6001102")]
		[Address(RVA = "0xB335F0", Offset = "0xB335F0", VA = "0xB335F0")]
		internal void ON_BananaPoison(Vector3 position)
		{
		}

		[Token(Token = "0x6001103")]
		[Address(RVA = "0xB33610", Offset = "0xB33610", VA = "0xB33610")]
		[IteratorStateMachine(typeof(<CR_BananaPoison>d__37))]
		private IEnumerator CR_BananaPoison()
		{
			return null;
		}

		[Token(Token = "0x6001104")]
		[Address(RVA = "0xB336A0", Offset = "0xB336A0", VA = "0xB336A0")]
		internal void ON_SleepingDart()
		{
		}

		[Token(Token = "0x6001105")]
		[Address(RVA = "0xB336C8", Offset = "0xB336C8", VA = "0xB336C8")]
		internal void ON_CaltropTrap()
		{
		}

		[Token(Token = "0x6001106")]
		[Address(RVA = "0xB33788", Offset = "0xB33788", VA = "0xB33788")]
		internal void ON_BananaTrap(bool haveKunai)
		{
		}

		[Token(Token = "0x6001107")]
		[Address(RVA = "0xB311E4", Offset = "0xB311E4", VA = "0xB311E4")]
		internal void ON_Audio_Detect(Collider playerCO)
		{
		}

		[Token(Token = "0x6001108")]
		[Address(RVA = "0xB338C0", Offset = "0xB338C0", VA = "0xB338C0")]
		public void ON_SIGHT_Detect()
		{
		}

		[Token(Token = "0x6001109")]
		[Address(RVA = "0xB33BD4", Offset = "0xB33BD4", VA = "0xB33BD4")]
		private void HIT()
		{
		}

		[Token(Token = "0x600110A")]
		[Address(RVA = "0xB33C78", Offset = "0xB33C78", VA = "0xB33C78")]
		private void DEAD()
		{
		}

		[Token(Token = "0x600110B")]
		[Address(RVA = "0xB33D0C", Offset = "0xB33D0C", VA = "0xB33D0C")]
		[IteratorStateMachine(typeof(<CR_MoveToTarget>d__45))]
		private IEnumerator CR_MoveToTarget()
		{
			return null;
		}

		[Token(Token = "0x600110C")]
		[Address(RVA = "0xB33D9C", Offset = "0xB33D9C", VA = "0xB33D9C")]
		private void IDLE()
		{
		}

		[Token(Token = "0x600110D")]
		[Address(RVA = "0xB33E44", Offset = "0xB33E44", VA = "0xB33E44")]
		private void ACTION()
		{
		}

		[Token(Token = "0x600110E")]
		[Address(RVA = "0xB33EB4", Offset = "0xB33EB4", VA = "0xB33EB4")]
		private void ATTACK()
		{
		}

		[Token(Token = "0x600110F")]
		[Address(RVA = "0xB33F48", Offset = "0xB33F48", VA = "0xB33F48")]
		[IteratorStateMachine(typeof(<CR_LookAtTarget>d__50))]
		private IEnumerator CR_LookAtTarget()
		{
			return null;
		}

		[Token(Token = "0x6001110")]
		[Address(RVA = "0xB33FD8", Offset = "0xB33FD8", VA = "0xB33FD8")]
		public AI_Controller()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000239")]
	public class AIStateBaseDictionary : Extensions.SerializableDictionary<AI_StateMachine.AIStateType, AI_StateBase>
	{
		[Token(Token = "0x6001123")]
		[Address(RVA = "0xB345E0", Offset = "0xB345E0", VA = "0xB345E0")]
		public AIStateBaseDictionary()
		{
		}
	}
	[Token(Token = "0x200023A")]
	public abstract class AI_ControllerBase : MonoBehaviour
	{
		[Token(Token = "0x4000E9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected int _Health;

		[Token(Token = "0x4000E9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		protected int _Level;

		[Token(Token = "0x4000E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool hconfig;

		[Token(Token = "0x4000E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int min;

		[Token(Token = "0x4000E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int max;

		[Token(Token = "0x4000EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AITarget Target;

		[Token(Token = "0x4000EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public AITarget VisualThreat;

		[Token(Token = "0x4000EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideInInspector]
		public AITarget AudioThreat;

		[Token(Token = "0x4000EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Label("Current State", "")]
		[SerializeField]
		protected AI_StateMachine.AIStateType _currentStateType;

		[Token(Token = "0x4000EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected AI_StateBase _currentState;

		[Token(Token = "0x4000EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		protected AIStateBaseDictionary _states;

		[Token(Token = "0x4000EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool config;

		[Token(Token = "0x4000EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[TextArea(5, 10)]
		public string AI_LOG;

		[Token(Token = "0x170001C5")]
		public AITargetType targetType
		{
			[Token(Token = "0x6001126")]
			[Address(RVA = "0xB346EC", Offset = "0xB346EC", VA = "0xB346EC")]
			get
			{
				return default(AITargetType);
			}
		}

		[Token(Token = "0x6001124")]
		[Address(RVA = "0xB34628", Offset = "0xB34628", VA = "0xB34628")]
		private Color GetHealthColor()
		{
			return default(Color);
		}

		[Token(Token = "0x6001125")]
		[Address(RVA = "0xB346A4", Offset = "0xB346A4", VA = "0xB346A4")]
		private Color GetLevelColor()
		{
			return default(Color);
		}

		[Token(Token = "0x6001127")]
		[Address(RVA = "0xB331D8", Offset = "0xB331D8", VA = "0xB331D8")]
		protected void Init_AI_System()
		{
		}

		[Token(Token = "0x6001128")]
		[Address(RVA = "0xB346F4", Offset = "0xB346F4", VA = "0xB346F4", Slot = "4")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6001129")]
		[Address(RVA = "0xB347E8", Offset = "0xB347E8", VA = "0xB347E8", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x600112A")]
		[Address(RVA = "0xB3499C", Offset = "0xB3499C", VA = "0xB3499C")]
		public void SwitchState(AI_StateBase newState)
		{
		}

		[Token(Token = "0x600112B")]
		[Address(RVA = "0xB34058", Offset = "0xB34058", VA = "0xB34058")]
		protected AI_ControllerBase()
		{
		}
	}
	[Token(Token = "0x200023B")]
	public enum AITargetType
	{
		[Token(Token = "0x4000EA9")]
		NONE,
		[Token(Token = "0x4000EAA")]
		WAYPOINT,
		[Token(Token = "0x4000EAB")]
		PLAYER,
		[Token(Token = "0x4000EAC")]
		LIGHT,
		[Token(Token = "0x4000EAD")]
		AUDIO
	}
	[Serializable]
	[Token(Token = "0x200023C")]
	public struct AITarget
	{
		[Token(Token = "0x4000EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private AITargetType _type;

		[Token(Token = "0x4000EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private Collider _collider;

		[Token(Token = "0x4000EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Vector3 _position;

		[Token(Token = "0x4000EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		private float _distance;

		[Token(Token = "0x4000EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float _time;

		[Token(Token = "0x170001C6")]
		public AITargetType type
		{
			[Token(Token = "0x600112C")]
			[Address(RVA = "0xB34A90", Offset = "0xB34A90", VA = "0xB34A90")]
			get
			{
				return default(AITargetType);
			}
		}

		[Token(Token = "0x170001C7")]
		public Collider collider
		{
			[Token(Token = "0x600112D")]
			[Address(RVA = "0xB34A98", Offset = "0xB34A98", VA = "0xB34A98")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001C8")]
		public Vector3 position
		{
			[Token(Token = "0x600112E")]
			[Address(RVA = "0xB34AA0", Offset = "0xB34AA0", VA = "0xB34AA0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170001C9")]
		public float distance
		{
			[Token(Token = "0x600112F")]
			[Address(RVA = "0xB34AAC", Offset = "0xB34AAC", VA = "0xB34AAC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001130")]
			[Address(RVA = "0xB34AB4", Offset = "0xB34AB4", VA = "0xB34AB4")]
			set
			{
			}
		}

		[Token(Token = "0x170001CA")]
		public float time
		{
			[Token(Token = "0x6001131")]
			[Address(RVA = "0xB34ABC", Offset = "0xB34ABC", VA = "0xB34ABC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001132")]
		[Address(RVA = "0xB34AC4", Offset = "0xB34AC4", VA = "0xB34AC4")]
		public void UpdatePosition(Vector3 nPos)
		{
		}

		[Token(Token = "0x6001133")]
		[Address(RVA = "0xB33894", Offset = "0xB33894", VA = "0xB33894")]
		public void Set(AITargetType t, Collider c, Vector3 p, float d)
		{
		}

		[Token(Token = "0x6001134")]
		[Address(RVA = "0xB34A00", Offset = "0xB34A00", VA = "0xB34A00")]
		public void Clear()
		{
		}
	}
	[Token(Token = "0x200023D")]
	public abstract class AI_StateBase : MonoBehaviour
	{
		[Token(Token = "0x200023E")]
		public enum AI_DO
		{
			[Token(Token = "0x4000EB8")]
			BANANA_FALL,
			[Token(Token = "0x4000EB9")]
			PICKUP,
			[Token(Token = "0x4000EBA")]
			IDLE_ANIM,
			[Token(Token = "0x4000EBB")]
			RANDOM_IDLE_ANIM,
			[Token(Token = "0x4000EBC")]
			DEATH_ANIM,
			[Token(Token = "0x4000EBD")]
			ATTACK_MELEE
		}

		[Token(Token = "0x4000EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public bool bCanBeSwitchedExternally;

		[Token(Token = "0x4000EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[SerializeField]
		public bool bIsFinalState;

		[Token(Token = "0x4000EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		protected AI_StateMachine.AIStateType _switchState;

		[Token(Token = "0x4000EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected AI_ControllerBase _stateMachine;

		[Token(Token = "0x170001CB")]
		protected AI_AnimController AnimCtrl
		{
			[Token(Token = "0x6001135")]
			[Address(RVA = "0xB34AD0", Offset = "0xB34AD0", VA = "0xB34AD0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001136")]
		[Address(RVA = "0xB34B4C", Offset = "0xB34B4C", VA = "0xB34B4C", Slot = "4")]
		public virtual void SetStateMachine(AI_ControllerBase stateMachine)
		{
		}

		[Token(Token = "0x6001137")]
		[Address(RVA = "0xB34B54", Offset = "0xB34B54", VA = "0xB34B54", Slot = "5")]
		public virtual void SwitchState(AI_StateMachine.AIStateType nextState)
		{
		}

		[Token(Token = "0x6001138")]
		[Address(RVA = "0xB34B64", Offset = "0xB34B64", VA = "0xB34B64", Slot = "6")]
		protected virtual void CorrectPlayerRotation()
		{
		}

		[Token(Token = "0x6001139")]
		[Address(RVA = "0xB34A6C", Offset = "0xB34A6C", VA = "0xB34A6C")]
		public void OnPreInitState()
		{
		}

		[Token(Token = "0x600113A")]
		[Address(RVA = "0xB34954", Offset = "0xB34954", VA = "0xB34954")]
		public AI_StateMachine.AIStateType OnSwitchState()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x600113B")]
		[Address(RVA = "0xB34B68", Offset = "0xB34B68", VA = "0xB34B68", Slot = "7")]
		public virtual void OnEnterState()
		{
		}

		[Token(Token = "0x600113C")]
		[Address(RVA = "0xB34D14", Offset = "0xB34D14", VA = "0xB34D14", Slot = "8")]
		public virtual void OnExitState()
		{
		}

		[Token(Token = "0x600113D")]
		[Address(RVA = "0xB34EC0", Offset = "0xB34EC0", VA = "0xB34EC0", Slot = "9")]
		public virtual void OnDestinationReached(bool isReached)
		{
		}

		[Token(Token = "0x600113E")]
		[Address(RVA = "0xB34EC4", Offset = "0xB34EC4", VA = "0xB34EC4", Slot = "10")]
		protected virtual void CB_AnimStart(AI_AnimController.ANIM_CB cbState)
		{
		}

		[Token(Token = "0x600113F")]
		[Address(RVA = "0xB34EC8", Offset = "0xB34EC8", VA = "0xB34EC8", Slot = "11")]
		protected virtual void CB_AnimEnd(AI_AnimController.ANIM_CB cbState)
		{
		}

		[Token(Token = "0x6001140")]
		[Address(RVA = "0xB34ECC", Offset = "0xB34ECC", VA = "0xB34ECC", Slot = "12")]
		protected virtual void CB_AnimTimed(AI_AnimController.ANIM_CB cbState)
		{
		}

		[Token(Token = "0x6001141")]
		public abstract AI_StateMachine.AIStateType GetStateType();

		[Token(Token = "0x6001142")]
		public abstract AI_StateMachine.AIStateType OnUpdate();

		[Token(Token = "0x6001143")]
		[Address(RVA = "0xB34ED0", Offset = "0xB34ED0", VA = "0xB34ED0")]
		protected AI_StateBase()
		{
		}
	}
	[Token(Token = "0x200023F")]
	public class Footstep : MonoBehaviour
	{
		[Token(Token = "0x4000EBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public int poolIndex;

		[Token(Token = "0x4000EBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public FootstepsPOOL parentPool;

		[Token(Token = "0x4000EC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float timeout;

		[Token(Token = "0x4000EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Renderer cRenderer;

		[Token(Token = "0x4000EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color fColor;

		[Token(Token = "0x4000EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private MaterialPropertyBlock mpb;

		[Token(Token = "0x6001144")]
		[Address(RVA = "0xB34EE0", Offset = "0xB34EE0", VA = "0xB34EE0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001145")]
		[Address(RVA = "0xB34FDC", Offset = "0xB34FDC", VA = "0xB34FDC")]
		private void I_HideFootStep()
		{
		}

		[Token(Token = "0x6001146")]
		[Address(RVA = "0xB35004", Offset = "0xB35004", VA = "0xB35004")]
		public Footstep()
		{
		}
	}
	[Token(Token = "0x2000240")]
	public class FootstepsPOOL : PoolManager<FootstepsPOOL, Footstep>
	{
		[Token(Token = "0x6001147")]
		[Address(RVA = "0xB35014", Offset = "0xB35014", VA = "0xB35014", Slot = "4")]
		protected override void CB_OnIniPoolItem(int index)
		{
		}

		[Token(Token = "0x6001148")]
		[Address(RVA = "0xB35094", Offset = "0xB35094", VA = "0xB35094", Slot = "5")]
		public override void BackToPool(int index)
		{
		}

		[Token(Token = "0x6001149")]
		[Address(RVA = "0xB35188", Offset = "0xB35188", VA = "0xB35188")]
		public void EVT_OnFootStep((Transform sender, Transform ground, Color feetColor) fInfo)
		{
		}

		[Token(Token = "0x600114A")]
		[Address(RVA = "0xB355D8", Offset = "0xB355D8", VA = "0xB355D8")]
		public FootstepsPOOL()
		{
		}
	}
	[Token(Token = "0x2000241")]
	public class AIB_ATTACK : AI_StateBase
	{
		[Token(Token = "0x4000EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float _attackTime;

		[Token(Token = "0x170001CC")]
		private LookAtIK LookAtIK
		{
			[Token(Token = "0x600114B")]
			[Address(RVA = "0xB35620", Offset = "0xB35620", VA = "0xB35620")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001CD")]
		private AITarget Target
		{
			[Token(Token = "0x600114C")]
			[Address(RVA = "0xB3569C", Offset = "0xB3569C", VA = "0xB3569C")]
			get
			{
				return default(AITarget);
			}
		}

		[Token(Token = "0x600114D")]
		[Address(RVA = "0xB35728", Offset = "0xB35728", VA = "0xB35728", Slot = "13")]
		public override AI_StateMachine.AIStateType GetStateType()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x600114E")]
		[Address(RVA = "0xB35730", Offset = "0xB35730", VA = "0xB35730", Slot = "7")]
		public override void OnEnterState()
		{
		}

		[Token(Token = "0x600114F")]
		[Address(RVA = "0xB3582C", Offset = "0xB3582C", VA = "0xB3582C")]
		private void UpdateTargetPos()
		{
		}

		[Token(Token = "0x6001150")]
		[Address(RVA = "0xB358A8", Offset = "0xB358A8", VA = "0xB358A8", Slot = "14")]
		public override AI_StateMachine.AIStateType OnUpdate()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x6001151")]
		[Address(RVA = "0xB35954", Offset = "0xB35954", VA = "0xB35954")]
		public AIB_ATTACK()
		{
		}
	}
	[Token(Token = "0x2000242")]
	public class AIB_DEAD : AI_StateBase
	{
		[Token(Token = "0x170001CE")]
		private Animator Anim
		{
			[Token(Token = "0x6001152")]
			[Address(RVA = "0xB35964", Offset = "0xB35964", VA = "0xB35964")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001153")]
		[Address(RVA = "0xB359E0", Offset = "0xB359E0", VA = "0xB359E0", Slot = "13")]
		public override AI_StateMachine.AIStateType GetStateType()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x6001154")]
		[Address(RVA = "0xB359E8", Offset = "0xB359E8", VA = "0xB359E8", Slot = "7")]
		public override void OnEnterState()
		{
		}

		[Token(Token = "0x6001155")]
		[Address(RVA = "0xB35B28", Offset = "0xB35B28", VA = "0xB35B28", Slot = "11")]
		protected override void CB_AnimEnd(AI_AnimController.ANIM_CB cbState)
		{
		}

		[Token(Token = "0x6001156")]
		[Address(RVA = "0xB35E84", Offset = "0xB35E84", VA = "0xB35E84", Slot = "14")]
		public override AI_StateMachine.AIStateType OnUpdate()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x6001157")]
		[Address(RVA = "0xB35E8C", Offset = "0xB35E8C", VA = "0xB35E8C")]
		public AIB_DEAD()
		{
		}
	}
	[Token(Token = "0x2000243")]
	public class AIB_GETHURT : AI_StateBase
	{
		[Token(Token = "0x6001158")]
		[Address(RVA = "0xB35E9C", Offset = "0xB35E9C", VA = "0xB35E9C", Slot = "13")]
		public override AI_StateMachine.AIStateType GetStateType()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x6001159")]
		[Address(RVA = "0xB35EA4", Offset = "0xB35EA4", VA = "0xB35EA4", Slot = "14")]
		public override AI_StateMachine.AIStateType OnUpdate()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x600115A")]
		[Address(RVA = "0xB35EAC", Offset = "0xB35EAC", VA = "0xB35EAC")]
		public AIB_GETHURT()
		{
		}
	}
	[Token(Token = "0x2000244")]
	public class AIB_IDLE : AI_StateBase
	{
		[Token(Token = "0x4000EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 IdleAnimTimer;

		[Token(Token = "0x4000EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector2 patrolTimer;

		[Token(Token = "0x4000EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _idleTimer;

		[Token(Token = "0x4000EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float _patrolTimer;

		[Token(Token = "0x170001CF")]
		private LookAtIK LookAtIK
		{
			[Token(Token = "0x600115B")]
			[Address(RVA = "0xB35EBC", Offset = "0xB35EBC", VA = "0xB35EBC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D0")]
		private AITarget VisualThreat
		{
			[Token(Token = "0x600115C")]
			[Address(RVA = "0xB35F38", Offset = "0xB35F38", VA = "0xB35F38")]
			get
			{
				return default(AITarget);
			}
		}

		[Token(Token = "0x170001D1")]
		private AITarget AudioThreat
		{
			[Token(Token = "0x600115D")]
			[Address(RVA = "0xB35FC8", Offset = "0xB35FC8", VA = "0xB35FC8")]
			get
			{
				return default(AITarget);
			}
		}

		[Token(Token = "0x170001D2")]
		private bool _isPatroling
		{
			[Token(Token = "0x600115E")]
			[Address(RVA = "0xB36054", Offset = "0xB36054", VA = "0xB36054")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600115F")]
		[Address(RVA = "0xB360D8", Offset = "0xB360D8", VA = "0xB360D8", Slot = "13")]
		public override AI_StateMachine.AIStateType GetStateType()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x6001160")]
		[Address(RVA = "0xB360E0", Offset = "0xB360E0", VA = "0xB360E0", Slot = "7")]
		public override void OnEnterState()
		{
		}

		[Token(Token = "0x6001161")]
		[Address(RVA = "0xB36160", Offset = "0xB36160", VA = "0xB36160", Slot = "14")]
		public override AI_StateMachine.AIStateType OnUpdate()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x6001162")]
		[Address(RVA = "0xB363AC", Offset = "0xB363AC", VA = "0xB363AC")]
		public AIB_IDLE()
		{
		}
	}
	[Token(Token = "0x2000245")]
	public class AIB_PATROL : AI_StateBase
	{
		[Token(Token = "0x4000EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float _idleTimer;

		[Token(Token = "0x4000ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CubeSpawnZone _investigateZone;

		[Token(Token = "0x170001D3")]
		private LookAtIK LookAtIK
		{
			[Token(Token = "0x6001163")]
			[Address(RVA = "0xB363C8", Offset = "0xB363C8", VA = "0xB363C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D4")]
		private AITarget Target
		{
			[Token(Token = "0x6001164")]
			[Address(RVA = "0xB36444", Offset = "0xB36444", VA = "0xB36444")]
			get
			{
				return default(AITarget);
			}
		}

		[Token(Token = "0x170001D5")]
		private Animator Anim
		{
			[Token(Token = "0x6001165")]
			[Address(RVA = "0xB364D0", Offset = "0xB364D0", VA = "0xB364D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001D6")]
		private int PatrolZoneID
		{
			[Token(Token = "0x6001166")]
			[Address(RVA = "0xB3654C", Offset = "0xB3654C", VA = "0xB3654C")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001D7")]
		private AI_Controller.MOOD_STATE AI_Mood
		{
			[Token(Token = "0x6001167")]
			[Address(RVA = "0xB365C8", Offset = "0xB365C8", VA = "0xB365C8")]
			get
			{
				return default(AI_Controller.MOOD_STATE);
			}
		}

		[Token(Token = "0x170001D8")]
		private AITarget VisualThreat
		{
			[Token(Token = "0x6001168")]
			[Address(RVA = "0xB36644", Offset = "0xB36644", VA = "0xB36644")]
			get
			{
				return default(AITarget);
			}
		}

		[Token(Token = "0x170001D9")]
		private AITarget AudioThreat
		{
			[Token(Token = "0x6001169")]
			[Address(RVA = "0xB366D4", Offset = "0xB366D4", VA = "0xB366D4")]
			get
			{
				return default(AITarget);
			}
		}

		[Token(Token = "0x600116A")]
		[Address(RVA = "0xB36760", Offset = "0xB36760", VA = "0xB36760", Slot = "13")]
		public override AI_StateMachine.AIStateType GetStateType()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x600116B")]
		[Address(RVA = "0xB36768", Offset = "0xB36768", VA = "0xB36768", Slot = "7")]
		public override void OnEnterState()
		{
		}

		[Token(Token = "0x600116C")]
		[Address(RVA = "0xB36C48", Offset = "0xB36C48", VA = "0xB36C48", Slot = "12")]
		protected override void CB_AnimTimed(AI_AnimController.ANIM_CB cbState)
		{
		}

		[Token(Token = "0x600116D")]
		[Address(RVA = "0xB36D24", Offset = "0xB36D24", VA = "0xB36D24", Slot = "11")]
		protected override void CB_AnimEnd(AI_AnimController.ANIM_CB cbState)
		{
		}

		[Token(Token = "0x600116E")]
		[Address(RVA = "0xB36EBC", Offset = "0xB36EBC", VA = "0xB36EBC", Slot = "14")]
		public override AI_StateMachine.AIStateType OnUpdate()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x600116F")]
		[Address(RVA = "0xB37114", Offset = "0xB37114", VA = "0xB37114")]
		public AIB_PATROL()
		{
		}
	}
	[Token(Token = "0x2000246")]
	public class AIB_PURSUIT : AI_StateBase
	{
		[Token(Token = "0x170001DA")]
		private LookAtIK LookAtIK
		{
			[Token(Token = "0x6001170")]
			[Address(RVA = "0xB37124", Offset = "0xB37124", VA = "0xB37124")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001DB")]
		private AITarget Target
		{
			[Token(Token = "0x6001171")]
			[Address(RVA = "0xB371A0", Offset = "0xB371A0", VA = "0xB371A0")]
			get
			{
				return default(AITarget);
			}
		}

		[Token(Token = "0x170001DC")]
		private new AI_AnimController AnimCtrl
		{
			[Token(Token = "0x6001172")]
			[Address(RVA = "0xB3722C", Offset = "0xB3722C", VA = "0xB3722C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001173")]
		[Address(RVA = "0xB372A8", Offset = "0xB372A8", VA = "0xB372A8", Slot = "13")]
		public override AI_StateMachine.AIStateType GetStateType()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x6001174")]
		[Address(RVA = "0xB372B0", Offset = "0xB372B0", VA = "0xB372B0", Slot = "7")]
		public override void OnEnterState()
		{
		}

		[Token(Token = "0x6001175")]
		[Address(RVA = "0xB3743C", Offset = "0xB3743C", VA = "0xB3743C", Slot = "8")]
		public override void OnExitState()
		{
		}

		[Token(Token = "0x6001176")]
		[Address(RVA = "0xB373C0", Offset = "0xB373C0", VA = "0xB373C0")]
		private void UpdateTargetPos()
		{
		}

		[Token(Token = "0x6001177")]
		[Address(RVA = "0xB37440", Offset = "0xB37440", VA = "0xB37440", Slot = "14")]
		public override AI_StateMachine.AIStateType OnUpdate()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x6001178")]
		[Address(RVA = "0xB374A0", Offset = "0xB374A0", VA = "0xB374A0")]
		public AIB_PURSUIT()
		{
		}
	}
	[Token(Token = "0x2000247")]
	public class AIB_TELEPORT : AI_StateBase
	{
		[Token(Token = "0x6001179")]
		[Address(RVA = "0xB374B0", Offset = "0xB374B0", VA = "0xB374B0", Slot = "13")]
		public override AI_StateMachine.AIStateType GetStateType()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x600117A")]
		[Address(RVA = "0xB374B8", Offset = "0xB374B8", VA = "0xB374B8", Slot = "14")]
		public override AI_StateMachine.AIStateType OnUpdate()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x600117B")]
		[Address(RVA = "0xB374C0", Offset = "0xB374C0", VA = "0xB374C0")]
		public AIB_TELEPORT()
		{
		}
	}
	[Token(Token = "0x2000248")]
	public class MiniMonsterAI : MonoBehaviour
	{
		[Token(Token = "0x2000249")]
		[CompilerGenerated]
		private sealed class <CR_Attack>d__19 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000EDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000EDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000EDD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MiniMonsterAI <>4__this;

			[Token(Token = "0x170001DD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001185")]
				[Address(RVA = "0xB37E24", Offset = "0xB37E24", VA = "0xB37E24", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001DE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001187")]
				[Address(RVA = "0xB37E6C", Offset = "0xB37E6C", VA = "0xB37E6C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001182")]
			[Address(RVA = "0xB37A34", Offset = "0xB37A34", VA = "0xB37A34")]
			[DebuggerHidden]
			public <CR_Attack>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x6001183")]
			[Address(RVA = "0xB37C88", Offset = "0xB37C88", VA = "0xB37C88", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001184")]
			[Address(RVA = "0xB37C8C", Offset = "0xB37C8C", VA = "0xB37C8C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001186")]
			[Address(RVA = "0xB37E2C", Offset = "0xB37E2C", VA = "0xB37E2C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject PF_Slicable;

		[Token(Token = "0x4000ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SkinnedMeshRenderer ren;

		[Token(Token = "0x4000ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public ConstantForce cForce;

		[Token(Token = "0x4000ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float moveSpeed;

		[Token(Token = "0x4000ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float attackDist;

		[Token(Token = "0x4000ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float attackForce;

		[Token(Token = "0x4000ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float upForceKoef;

		[Token(Token = "0x4000ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Animator Anim;

		[Token(Token = "0x4000ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float _distToPortal;

		[Token(Token = "0x4000ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Rigidbody monsterRBody;

		[Token(Token = "0x4000ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AudioSource SFX_Spawn;

		[Token(Token = "0x4000ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 _moveDir;

		[Token(Token = "0x4000ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool _attackSoundPlayed;

		[Token(Token = "0x4000ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		private bool _wasJumped;

		[Token(Token = "0x4000ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6E")]
		private bool _wasKilled;

		[Token(Token = "0x4000EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Vector3 Target;

		[Token(Token = "0x600117C")]
		[Address(RVA = "0xB374D0", Offset = "0xB374D0", VA = "0xB374D0")]
		private void Start()
		{
		}

		[Token(Token = "0x600117D")]
		[Address(RVA = "0xB37568", Offset = "0xB37568", VA = "0xB37568")]
		private void Jump()
		{
		}

		[Token(Token = "0x600117E")]
		[Address(RVA = "0xB375FC", Offset = "0xB375FC", VA = "0xB375FC")]
		private void Update()
		{
		}

		[Token(Token = "0x600117F")]
		[Address(RVA = "0xB379CC", Offset = "0xB379CC", VA = "0xB379CC")]
		[IteratorStateMachine(typeof(<CR_Attack>d__19))]
		private IEnumerator CR_Attack()
		{
			return null;
		}

		[Token(Token = "0x6001180")]
		[Address(RVA = "0xB37A5C", Offset = "0xB37A5C", VA = "0xB37A5C")]
		internal void EVT_Kill()
		{
		}

		[Token(Token = "0x6001181")]
		[Address(RVA = "0xB37C1C", Offset = "0xB37C1C", VA = "0xB37C1C")]
		public MiniMonsterAI()
		{
		}
	}
	[Token(Token = "0x200024A")]
	public class MiniWormSpawner : MonoBehaviour
	{
		[Token(Token = "0x4000EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform Target;

		[Token(Token = "0x4000EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject PF_MiniWorm;

		[Token(Token = "0x4000EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<Transform> spawnLocs;

		[Token(Token = "0x6001188")]
		[Address(RVA = "0xB37E74", Offset = "0xB37E74", VA = "0xB37E74")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001189")]
		[Address(RVA = "0xB37F74", Offset = "0xB37F74", VA = "0xB37F74")]
		public GameObject SpawnMonster()
		{
			return null;
		}

		[Token(Token = "0x600118A")]
		[Address(RVA = "0xB38130", Offset = "0xB38130", VA = "0xB38130")]
		public MiniWormSpawner()
		{
		}
	}
	[Token(Token = "0x200024B")]
	public class AIS_NinjaAttack : AI_RotState
	{
		[Token(Token = "0x200024C")]
		[CompilerGenerated]
		private sealed class <CR_Attack>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000EE4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000EE5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000EE6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AIS_NinjaAttack <>4__this;

			[Token(Token = "0x170001E3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001199")]
				[Address(RVA = "0xB38F44", Offset = "0xB38F44", VA = "0xB38F44", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001E4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600119B")]
				[Address(RVA = "0xB38F8C", Offset = "0xB38F8C", VA = "0xB38F8C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001196")]
			[Address(RVA = "0xB385BC", Offset = "0xB385BC", VA = "0xB385BC")]
			[DebuggerHidden]
			public <CR_Attack>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6001197")]
			[Address(RVA = "0xB38D58", Offset = "0xB38D58", VA = "0xB38D58", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001198")]
			[Address(RVA = "0xB38D5C", Offset = "0xB38D5C", VA = "0xB38D5C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600119A")]
			[Address(RVA = "0xB38F4C", Offset = "0xB38F4C", VA = "0xB38F4C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float _attackInterval;

		[Token(Token = "0x4000EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float _nextAttackTime;

		[Token(Token = "0x4000EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int _findEnemy;

		[Token(Token = "0x170001DF")]
		private ShurikenEvent _shEvent
		{
			[Token(Token = "0x600118B")]
			[Address(RVA = "0xB381AC", Offset = "0xB381AC", VA = "0xB381AC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E0")]
		private int _level
		{
			[Token(Token = "0x600118C")]
			[Address(RVA = "0xB38228", Offset = "0xB38228", VA = "0xB38228")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001E1")]
		private Transform _rHand
		{
			[Token(Token = "0x600118D")]
			[Address(RVA = "0xB382A4", Offset = "0xB382A4", VA = "0xB382A4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E2")]
		private bool _shurikenAttack
		{
			[Token(Token = "0x600118E")]
			[Address(RVA = "0xB38320", Offset = "0xB38320", VA = "0xB38320")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600118F")]
		[Address(RVA = "0xB383A4", Offset = "0xB383A4", VA = "0xB383A4", Slot = "8")]
		public override void OnEnterState()
		{
		}

		[Token(Token = "0x6001190")]
		[Address(RVA = "0xB38524", Offset = "0xB38524", VA = "0xB38524", Slot = "9")]
		public override void OnExitState()
		{
		}

		[Token(Token = "0x6001191")]
		[Address(RVA = "0xB3854C", Offset = "0xB3854C", VA = "0xB3854C", Slot = "12")]
		public override AI_StateMachine.AIStateType GetStateType()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x6001192")]
		[Address(RVA = "0xB38554", Offset = "0xB38554", VA = "0xB38554")]
		[IteratorStateMachine(typeof(<CR_Attack>d__14))]
		private IEnumerator CR_Attack()
		{
			return null;
		}

		[Token(Token = "0x6001193")]
		[Address(RVA = "0xB385E4", Offset = "0xB385E4", VA = "0xB385E4")]
		public void EVT_OnThrowShuriken()
		{
		}

		[Token(Token = "0x6001194")]
		[Address(RVA = "0xB38C00", Offset = "0xB38C00", VA = "0xB38C00", Slot = "13")]
		public override AI_StateMachine.AIStateType OnUpdate()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x6001195")]
		[Address(RVA = "0xB38CEC", Offset = "0xB38CEC", VA = "0xB38CEC")]
		public AIS_NinjaAttack()
		{
		}
	}
	[Token(Token = "0x200024D")]
	public class AIS_NinjaDead : AI_State
	{
		[Token(Token = "0x4000EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int _deadAnimIDHash;

		[Token(Token = "0x4000EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int _isDeadHash;

		[Token(Token = "0x4000EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _DeathfailsafeTime;

		[Token(Token = "0x4000EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool _bFailSafeCalled;

		[Token(Token = "0x170001E5")]
		private int _level
		{
			[Token(Token = "0x600119C")]
			[Address(RVA = "0xB38F94", Offset = "0xB38F94", VA = "0xB38F94")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001E6")]
		private GameObject _katana
		{
			[Token(Token = "0x600119D")]
			[Address(RVA = "0xB39010", Offset = "0xB39010", VA = "0xB39010")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600119E")]
		[Address(RVA = "0xB3908C", Offset = "0xB3908C", VA = "0xB3908C", Slot = "8")]
		public override void OnEnterState()
		{
		}

		[Token(Token = "0x600119F")]
		[Address(RVA = "0xB394A0", Offset = "0xB394A0", VA = "0xB394A0")]
		private void DropKatana()
		{
		}

		[Token(Token = "0x60011A0")]
		[Address(RVA = "0xB39854", Offset = "0xB39854", VA = "0xB39854")]
		public void EVT_OnDeathAnimation()
		{
		}

		[Token(Token = "0x60011A1")]
		[Address(RVA = "0xB39858", Offset = "0xB39858", VA = "0xB39858", Slot = "12")]
		public override AI_StateMachine.AIStateType GetStateType()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x60011A2")]
		[Address(RVA = "0xB3960C", Offset = "0xB3960C", VA = "0xB3960C")]
		private void DestroyNinja()
		{
		}

		[Token(Token = "0x60011A3")]
		[Address(RVA = "0xB39860", Offset = "0xB39860", VA = "0xB39860", Slot = "13")]
		public override AI_StateMachine.AIStateType OnUpdate()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x60011A4")]
		[Address(RVA = "0xB39898", Offset = "0xB39898", VA = "0xB39898")]
		public AIS_NinjaDead()
		{
		}
	}
	[Token(Token = "0x200024E")]
	public class AIS_NinjaFindTarget : AI_RotState
	{
		[Token(Token = "0x60011A5")]
		[Address(RVA = "0xB39924", Offset = "0xB39924", VA = "0xB39924", Slot = "8")]
		public override void OnEnterState()
		{
		}

		[Token(Token = "0x60011A6")]
		[Address(RVA = "0xB39A70", Offset = "0xB39A70", VA = "0xB39A70", Slot = "12")]
		public override AI_StateMachine.AIStateType GetStateType()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x60011A7")]
		[Address(RVA = "0xB39A78", Offset = "0xB39A78", VA = "0xB39A78", Slot = "13")]
		public override AI_StateMachine.AIStateType OnUpdate()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x60011A8")]
		[Address(RVA = "0xB39B98", Offset = "0xB39B98", VA = "0xB39B98")]
		public AIS_NinjaFindTarget()
		{
		}
	}
	[Token(Token = "0x200024F")]
	public class AIS_NinjaHitReact : AI_State
	{
		[Token(Token = "0x4000EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool _IsKatanaDropped;

		[Token(Token = "0x4000EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int _SwitchHash;

		[Token(Token = "0x4000EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int _InjuredHash;

		[Token(Token = "0x4000EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private int _StandinngHash;

		[Token(Token = "0x4000EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int _throwShurikenHash;

		[Token(Token = "0x170001E7")]
		private ScoreEvent _scoreEvent
		{
			[Token(Token = "0x60011A9")]
			[Address(RVA = "0xB39BA8", Offset = "0xB39BA8", VA = "0xB39BA8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001E8")]
		private int _level
		{
			[Token(Token = "0x60011AA")]
			[Address(RVA = "0xB39C24", Offset = "0xB39C24", VA = "0xB39C24")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001E9")]
		private float _health
		{
			[Token(Token = "0x60011AB")]
			[Address(RVA = "0xB39CA0", Offset = "0xB39CA0", VA = "0xB39CA0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001EA")]
		private GameObject _katana
		{
			[Token(Token = "0x60011AC")]
			[Address(RVA = "0xB39D20", Offset = "0xB39D20", VA = "0xB39D20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001EB")]
		private bool _shurikenAttack
		{
			[Token(Token = "0x60011AD")]
			[Address(RVA = "0xB39D9C", Offset = "0xB39D9C", VA = "0xB39D9C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60011AE")]
		[Address(RVA = "0xB39E20", Offset = "0xB39E20", VA = "0xB39E20", Slot = "8")]
		public override void OnEnterState()
		{
		}

		[Token(Token = "0x60011AF")]
		[Address(RVA = "0xB3B174", Offset = "0xB3B174", VA = "0xB3B174")]
		private void DropKatana()
		{
		}

		[Token(Token = "0x60011B0")]
		[Address(RVA = "0xB3B2B4", Offset = "0xB3B2B4", VA = "0xB3B2B4", Slot = "12")]
		public override AI_StateMachine.AIStateType GetStateType()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x60011B1")]
		[Address(RVA = "0xB3B2BC", Offset = "0xB3B2BC", VA = "0xB3B2BC", Slot = "13")]
		public override AI_StateMachine.AIStateType OnUpdate()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x60011B2")]
		[Address(RVA = "0xB3B614", Offset = "0xB3B614", VA = "0xB3B614")]
		public AIS_NinjaHitReact()
		{
		}
	}
	[Token(Token = "0x2000250")]
	public class AIS_NinjaIdle : AI_State
	{
		[Token(Token = "0x170001EC")]
		private GameObject _katana
		{
			[Token(Token = "0x60011B3")]
			[Address(RVA = "0xB3B6F0", Offset = "0xB3B6F0", VA = "0xB3B6F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001ED")]
		private GameObject _mask
		{
			[Token(Token = "0x60011B4")]
			[Address(RVA = "0xB3B76C", Offset = "0xB3B76C", VA = "0xB3B76C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001EE")]
		private GameObject _mask2
		{
			[Token(Token = "0x60011B5")]
			[Address(RVA = "0xB3B7E8", Offset = "0xB3B7E8", VA = "0xB3B7E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001EF")]
		private int _level
		{
			[Token(Token = "0x60011B6")]
			[Address(RVA = "0xB3B864", Offset = "0xB3B864", VA = "0xB3B864")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001F0")]
		private CharacterController _char
		{
			[Token(Token = "0x60011B7")]
			[Address(RVA = "0xB3B8E0", Offset = "0xB3B8E0", VA = "0xB3B8E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011B8")]
		[Address(RVA = "0xB3B95C", Offset = "0xB3B95C", VA = "0xB3B95C", Slot = "12")]
		public override AI_StateMachine.AIStateType GetStateType()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x60011B9")]
		[Address(RVA = "0xB3B964", Offset = "0xB3B964", VA = "0xB3B964", Slot = "8")]
		public override void OnEnterState()
		{
		}

		[Token(Token = "0x60011BA")]
		[Address(RVA = "0xB3BAD8", Offset = "0xB3BAD8", VA = "0xB3BAD8", Slot = "9")]
		public override void OnExitState()
		{
		}

		[Token(Token = "0x60011BB")]
		[Address(RVA = "0xB3BADC", Offset = "0xB3BADC", VA = "0xB3BADC", Slot = "13")]
		public override AI_StateMachine.AIStateType OnUpdate()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x60011BC")]
		[Address(RVA = "0xB3BAE4", Offset = "0xB3BAE4", VA = "0xB3BAE4")]
		public AIS_NinjaIdle()
		{
		}
	}
	[Token(Token = "0x2000251")]
	public class AIS_NinjaPursuit : AI_RotState
	{
		[Token(Token = "0x4000EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int _findEnemyHash;

		[Token(Token = "0x4000EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private int _OffsetHash;

		[Token(Token = "0x170001F1")]
		private int _level
		{
			[Token(Token = "0x60011BD")]
			[Address(RVA = "0xB3BAEC", Offset = "0xB3BAEC", VA = "0xB3BAEC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60011BE")]
		[Address(RVA = "0xB3BB68", Offset = "0xB3BB68", VA = "0xB3BB68", Slot = "8")]
		public override void OnEnterState()
		{
		}

		[Token(Token = "0x60011BF")]
		[Address(RVA = "0xB3BC7C", Offset = "0xB3BC7C", VA = "0xB3BC7C", Slot = "9")]
		public override void OnExitState()
		{
		}

		[Token(Token = "0x60011C0")]
		[Address(RVA = "0xB3BCA8", Offset = "0xB3BCA8", VA = "0xB3BCA8", Slot = "12")]
		public override AI_StateMachine.AIStateType GetStateType()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x60011C1")]
		[Address(RVA = "0xB3BCB0", Offset = "0xB3BCB0", VA = "0xB3BCB0")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x60011C2")]
		[Address(RVA = "0xB3BE58", Offset = "0xB3BE58", VA = "0xB3BE58", Slot = "13")]
		public override AI_StateMachine.AIStateType OnUpdate()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x60011C3")]
		[Address(RVA = "0xB3BFE0", Offset = "0xB3BFE0", VA = "0xB3BFE0")]
		public AIS_NinjaPursuit()
		{
		}
	}
	[Token(Token = "0x2000252")]
	public class AIS_NinjaSpawn : AI_State
	{
		[Token(Token = "0x4000EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int _initHash;

		[Token(Token = "0x4000EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int _onGround;

		[Token(Token = "0x4000EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool _IsFalling;

		[Token(Token = "0x4000EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float _ExitTime;

		[Token(Token = "0x170001F2")]
		private float _Health
		{
			[Token(Token = "0x60011C4")]
			[Address(RVA = "0xB3C064", Offset = "0xB3C064", VA = "0xB3C064")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170001F3")]
		private CharacterController _char
		{
			[Token(Token = "0x60011C5")]
			[Address(RVA = "0xB3C0E4", Offset = "0xB3C0E4", VA = "0xB3C0E4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011C6")]
		[Address(RVA = "0xB3C160", Offset = "0xB3C160", VA = "0xB3C160", Slot = "12")]
		public override AI_StateMachine.AIStateType GetStateType()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x60011C7")]
		[Address(RVA = "0xB3C168", Offset = "0xB3C168", VA = "0xB3C168", Slot = "8")]
		public override void OnEnterState()
		{
		}

		[Token(Token = "0x60011C8")]
		[Address(RVA = "0xB3C1B0", Offset = "0xB3C1B0", VA = "0xB3C1B0", Slot = "9")]
		public override void OnExitState()
		{
		}

		[Token(Token = "0x60011C9")]
		[Address(RVA = "0xB3C1BC", Offset = "0xB3C1BC", VA = "0xB3C1BC", Slot = "13")]
		public override AI_StateMachine.AIStateType OnUpdate()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x60011CA")]
		[Address(RVA = "0xB3C344", Offset = "0xB3C344", VA = "0xB3C344")]
		public AIS_NinjaSpawn()
		{
		}
	}
	[Token(Token = "0x2000253")]
	public class AIS_NinjaSwordOut : AI_State
	{
		[Token(Token = "0x4000EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int _swordOutHash;

		[Token(Token = "0x4000EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int _throwShuriken;

		[Token(Token = "0x4000EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _stateExitTime;

		[Token(Token = "0x170001F4")]
		private int _level
		{
			[Token(Token = "0x60011CB")]
			[Address(RVA = "0xB3C3D0", Offset = "0xB3C3D0", VA = "0xB3C3D0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170001F5")]
		private GameObject _katana
		{
			[Token(Token = "0x60011CC")]
			[Address(RVA = "0xB3C44C", Offset = "0xB3C44C", VA = "0xB3C44C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011CD")]
		[Address(RVA = "0xB3C4C8", Offset = "0xB3C4C8", VA = "0xB3C4C8", Slot = "8")]
		public override void OnEnterState()
		{
		}

		[Token(Token = "0x60011CE")]
		[Address(RVA = "0xB3C590", Offset = "0xB3C590", VA = "0xB3C590", Slot = "12")]
		public override AI_StateMachine.AIStateType GetStateType()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x60011CF")]
		[Address(RVA = "0xB3C598", Offset = "0xB3C598", VA = "0xB3C598", Slot = "13")]
		public override AI_StateMachine.AIStateType OnUpdate()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x60011D0")]
		[Address(RVA = "0xB3C918", Offset = "0xB3C918", VA = "0xB3C918")]
		public AIS_NinjaSwordOut()
		{
		}
	}
	[Token(Token = "0x2000254")]
	public class AIS_NinjaTeleport : AI_State
	{
		[Token(Token = "0x2000255")]
		[CompilerGenerated]
		private sealed class <CR_Teleport>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000EFA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000EFB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000EFC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AIS_NinjaTeleport <>4__this;

			[Token(Token = "0x170001F6")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60011D9")]
				[Address(RVA = "0xB3D414", Offset = "0xB3D414", VA = "0xB3D414", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170001F7")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60011DB")]
				[Address(RVA = "0xB3D45C", Offset = "0xB3D45C", VA = "0xB3D45C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60011D6")]
			[Address(RVA = "0xB3CEE4", Offset = "0xB3CEE4", VA = "0xB3CEE4")]
			[DebuggerHidden]
			public <CR_Teleport>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x60011D7")]
			[Address(RVA = "0xB3CF2C", Offset = "0xB3CF2C", VA = "0xB3CF2C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60011D8")]
			[Address(RVA = "0xB3CF30", Offset = "0xB3CF30", VA = "0xB3CF30", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60011DA")]
			[Address(RVA = "0xB3D41C", Offset = "0xB3D41C", VA = "0xB3D41C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool _WasTeleported;

		[Token(Token = "0x60011D1")]
		[Address(RVA = "0xB3C99C", Offset = "0xB3C99C", VA = "0xB3C99C", Slot = "8")]
		public override void OnEnterState()
		{
		}

		[Token(Token = "0x60011D2")]
		[Address(RVA = "0xB3CEDC", Offset = "0xB3CEDC", VA = "0xB3CEDC", Slot = "12")]
		public override AI_StateMachine.AIStateType GetStateType()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x60011D3")]
		[Address(RVA = "0xB3CE74", Offset = "0xB3CE74", VA = "0xB3CE74")]
		[IteratorStateMachine(typeof(<CR_Teleport>d__3))]
		private IEnumerator CR_Teleport()
		{
			return null;
		}

		[Token(Token = "0x60011D4")]
		[Address(RVA = "0xB3CF0C", Offset = "0xB3CF0C", VA = "0xB3CF0C", Slot = "13")]
		public override AI_StateMachine.AIStateType OnUpdate()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x60011D5")]
		[Address(RVA = "0xB3CF24", Offset = "0xB3CF24", VA = "0xB3CF24")]
		public AIS_NinjaTeleport()
		{
		}
	}
	[Token(Token = "0x2000256")]
	public class AI_SensorTrigger : MonoBehaviour
	{
		[Token(Token = "0x4000EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform T_Attach;

		[Token(Token = "0x4000EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private AI_StateMachine _aiState;

		[Token(Token = "0x4000EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AI_State PursuitState;

		[Token(Token = "0x4000F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AI_State AttackState;

		[Token(Token = "0x60011DC")]
		[Address(RVA = "0xB3D464", Offset = "0xB3D464", VA = "0xB3D464")]
		private void Start()
		{
		}

		[Token(Token = "0x60011DD")]
		[Address(RVA = "0xB3D48C", Offset = "0xB3D48C", VA = "0xB3D48C")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60011DE")]
		[Address(RVA = "0xB3D528", Offset = "0xB3D528", VA = "0xB3D528")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60011DF")]
		[Address(RVA = "0xB3D5C4", Offset = "0xB3D5C4", VA = "0xB3D5C4")]
		public AI_SensorTrigger()
		{
		}
	}
	[Token(Token = "0x2000257")]
	public class AI_AnimEventsDispatcher : MonoBehaviour
	{
		[Token(Token = "0x4000F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AI_NGStateMachine stMachine;

		[Token(Token = "0x4000F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AI_HumanBased aiHB;

		[Token(Token = "0x60011E0")]
		[Address(RVA = "0xB3D5CC", Offset = "0xB3D5CC", VA = "0xB3D5CC")]
		private void OnAnimatorMove()
		{
		}

		[Token(Token = "0x60011E1")]
		[Address(RVA = "0xB3D6C8", Offset = "0xB3D6C8", VA = "0xB3D6C8")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60011E2")]
		[Address(RVA = "0xB3D6E8", Offset = "0xB3D6E8", VA = "0xB3D6E8")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60011E3")]
		[Address(RVA = "0xB3D708", Offset = "0xB3D708", VA = "0xB3D708")]
		public void EVT_DoyouHearMe(Collider playerCO)
		{
		}

		[Token(Token = "0x60011E4")]
		[Address(RVA = "0xB3D904", Offset = "0xB3D904", VA = "0xB3D904")]
		public AI_AnimEventsDispatcher()
		{
		}
	}
	[Token(Token = "0x2000258")]
	public class AI_AnimStateBH : StateMachineBehaviour
	{
		[Token(Token = "0x2000259")]
		public delegate void AnimCallbackDelegate(AI_AnimController.ANIM_CB cbState);

		[Token(Token = "0x4000F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float delayUpdate;

		[Token(Token = "0x4000F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public AI_AnimController.ANIM_CB cbState;

		[Token(Token = "0x4000F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float _callTime;

		[Token(Token = "0x4000F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AnimCallbackDelegate CB_StateEnter;

		[Token(Token = "0x4000F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AnimCallbackDelegate CB_StateExit;

		[Token(Token = "0x4000F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AnimCallbackDelegate CB_Delayed;

		[Token(Token = "0x60011E5")]
		[Address(RVA = "0xB3D90C", Offset = "0xB3D90C", VA = "0xB3D90C", Slot = "4")]
		public override void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x60011E6")]
		[Address(RVA = "0xB3D94C", Offset = "0xB3D94C", VA = "0xB3D94C", Slot = "6")]
		public override void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x60011E7")]
		[Address(RVA = "0xB3D96C", Offset = "0xB3D96C", VA = "0xB3D96C", Slot = "5")]
		public override void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
		{
		}

		[Token(Token = "0x60011E8")]
		[Address(RVA = "0xB3D9D8", Offset = "0xB3D9D8", VA = "0xB3D9D8")]
		public AI_AnimStateBH()
		{
		}
	}
	[Token(Token = "0x200025A")]
	public abstract class AI_HumanBased : MonoBehaviour
	{
		[Token(Token = "0x4000F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected int _Health;

		[Token(Token = "0x4000F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[SerializeField]
		protected int _Level;

		[Token(Token = "0x4000F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool config;

		[Token(Token = "0x4000F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int min;

		[Token(Token = "0x4000F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int max;

		[Token(Token = "0x4000F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected ShurikenEvent _evtShurikenThrow;

		[Token(Token = "0x4000F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		protected Animator _animator;

		[Token(Token = "0x4000F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		protected NavMeshAgent _navAgent;

		[Token(Token = "0x4000F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		protected AI_NGStateMachine AIstateMachine;

		[Token(Token = "0x4000F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public CharacterController charContrtoller;

		[Token(Token = "0x170001F8")]
		public Animator anim
		{
			[Token(Token = "0x60011EF")]
			[Address(RVA = "0xB3DC18", Offset = "0xB3DC18", VA = "0xB3DC18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001F9")]
		public NavMeshAgent navAgent
		{
			[Token(Token = "0x60011F0")]
			[Address(RVA = "0xB3DC20", Offset = "0xB3DC20", VA = "0xB3DC20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011ED")]
		[Address(RVA = "0xB3DB54", Offset = "0xB3DB54", VA = "0xB3DB54")]
		private Color GetHealthColor()
		{
			return default(Color);
		}

		[Token(Token = "0x60011EE")]
		[Address(RVA = "0xB3DBD0", Offset = "0xB3DBD0", VA = "0xB3DBD0")]
		private Color GetLevelColor()
		{
			return default(Color);
		}

		[Token(Token = "0x60011F1")]
		[Address(RVA = "0xB3DC28", Offset = "0xB3DC28", VA = "0xB3DC28")]
		private void Start()
		{
		}

		[Token(Token = "0x60011F2")]
		[Address(RVA = "0xB3D5E4", Offset = "0xB3D5E4", VA = "0xB3D5E4")]
		internal void CB_OnAnimatorMove()
		{
		}

		[Token(Token = "0x60011F3")]
		[Address(RVA = "0xB3DC74", Offset = "0xB3DC74", VA = "0xB3DC74")]
		protected AI_HumanBased()
		{
		}
	}
	[Token(Token = "0x200025B")]
	public class AI_NGStateMachine : MonoBehaviour
	{
		[Token(Token = "0x4000F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected AITarget _target;

		[Token(Token = "0x4000F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform T_SensorMount;

		[Token(Token = "0x4000F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform T_ScanTarget;

		[Token(Token = "0x4000F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		protected TriggerSensor _sightSensor;

		[Token(Token = "0x4000F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HideInInspector]
		public AITarget VisualThreat;

		[Token(Token = "0x4000F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[HideInInspector]
		public AITarget AudioThreat;

		[Token(Token = "0x4000F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public AimConstraint AimConstr;

		[Token(Token = "0x4000F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		protected SphereCollider _targetTrigger;

		[Token(Token = "0x4000F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		[Range(0f, 15f)]
		protected float _stoppingDistance;

		[Token(Token = "0x4000F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public AI_HumanBased controller;

		[Token(Token = "0x4000F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		[Label("Current State", "")]
		protected AI_StateMachine.AIStateType _currentStateType;

		[Token(Token = "0x4000F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected AI_NState _currentState;

		[Token(Token = "0x4000F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public AI_AnimStateBH.AnimCallbackDelegate CB_AnimEnter;

		[Token(Token = "0x4000F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public AI_AnimStateBH.AnimCallbackDelegate CB_AnimExit;

		[Token(Token = "0x4000F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public AI_AnimStateBH.AnimCallbackDelegate CB_AnimDelayed;

		[Token(Token = "0x4000F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		protected AISTtatesDictionary _states;

		[Token(Token = "0x170001FA")]
		public AITargetType targetType
		{
			[Token(Token = "0x60011F4")]
			[Address(RVA = "0xB3DC8C", Offset = "0xB3DC8C", VA = "0xB3DC8C")]
			get
			{
				return default(AITargetType);
			}
		}

		[Token(Token = "0x170001FB")]
		public AITarget Target
		{
			[Token(Token = "0x60011F5")]
			[Address(RVA = "0xB3DC94", Offset = "0xB3DC94", VA = "0xB3DC94")]
			get
			{
				return default(AITarget);
			}
		}

		[Token(Token = "0x170001FC")]
		private GameObject KatanaBack
		{
			[Token(Token = "0x60011F6")]
			[Address(RVA = "0xB3DCAC", Offset = "0xB3DCAC", VA = "0xB3DCAC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001FD")]
		private GameObject KatanaHand
		{
			[Token(Token = "0x60011F7")]
			[Address(RVA = "0xB3DD28", Offset = "0xB3DD28", VA = "0xB3DD28")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001FE")]
		protected Animator _animator
		{
			[Token(Token = "0x60011F8")]
			[Address(RVA = "0xB3DDA4", Offset = "0xB3DDA4", VA = "0xB3DDA4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170001FF")]
		protected LookAtIK _lookAtIK
		{
			[Token(Token = "0x60011F9")]
			[Address(RVA = "0xB3DDC0", Offset = "0xB3DDC0", VA = "0xB3DDC0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60011FA")]
		[Address(RVA = "0xB3DE3C", Offset = "0xB3DE3C", VA = "0xB3DE3C")]
		private void Start()
		{
		}

		[Token(Token = "0x60011FB")]
		[Address(RVA = "0xB3E2A8", Offset = "0xB3E2A8", VA = "0xB3E2A8")]
		public void HideEyeSensor(bool bShow)
		{
		}

		[Token(Token = "0x60011FC")]
		[Address(RVA = "0xB3E1F0", Offset = "0xB3E1F0", VA = "0xB3E1F0")]
		public void RelocateSightSensor(bool bForward)
		{
		}

		[Token(Token = "0x60011FD")]
		[Address(RVA = "0xB3E3BC", Offset = "0xB3E3BC", VA = "0xB3E3BC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60011FE")]
		[Address(RVA = "0xB3E4E8", Offset = "0xB3E4E8", VA = "0xB3E4E8", Slot = "4")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x60011FF")]
		[Address(RVA = "0xB3E614", Offset = "0xB3E614", VA = "0xB3E614", Slot = "5")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001200")]
		[Address(RVA = "0xB3E830", Offset = "0xB3E830", VA = "0xB3E830")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6001201")]
		[Address(RVA = "0xB3E8D4", Offset = "0xB3E8D4", VA = "0xB3E8D4")]
		public void SetTargetTriggerRadius(float radius)
		{
		}

		[Token(Token = "0x6001202")]
		[Address(RVA = "0xB3E8F0", Offset = "0xB3E8F0", VA = "0xB3E8F0")]
		public void ON_SIGHT_Detect()
		{
		}

		[Token(Token = "0x6001203")]
		[Address(RVA = "0xB3EDB8", Offset = "0xB3EDB8", VA = "0xB3EDB8")]
		public void ON_SIGHT_Lost()
		{
		}

		[Token(Token = "0x6001204")]
		[Address(RVA = "0xB3D720", Offset = "0xB3D720", VA = "0xB3D720")]
		internal void ON_PlayerSound(Collider playerCO)
		{
		}

		[Token(Token = "0x6001205")]
		[Address(RVA = "0xB3F29C", Offset = "0xB3F29C", VA = "0xB3F29C", Slot = "6")]
		public virtual void ON_TriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001206")]
		[Address(RVA = "0xB3F388", Offset = "0xB3F388", VA = "0xB3F388", Slot = "7")]
		public virtual void ON_TriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6001207")]
		[Address(RVA = "0xB3E7D0", Offset = "0xB3E7D0", VA = "0xB3E7D0")]
		public void SwitchState(AI_NState newState)
		{
		}

		[Token(Token = "0x6001208")]
		[Address(RVA = "0xB3F494", Offset = "0xB3F494", VA = "0xB3F494")]
		public void ON_AnimStart(AI_AnimController.ANIM_CB cbState)
		{
		}

		[Token(Token = "0x6001209")]
		[Address(RVA = "0xB3F4B0", Offset = "0xB3F4B0", VA = "0xB3F4B0")]
		public void ON_AnimEnd(AI_AnimController.ANIM_CB cbState)
		{
		}

		[Token(Token = "0x600120A")]
		[Address(RVA = "0xB3F4CC", Offset = "0xB3F4CC", VA = "0xB3F4CC")]
		public void ON_AnimTimed(AI_AnimController.ANIM_CB cbState)
		{
		}

		[Token(Token = "0x600120B")]
		[Address(RVA = "0xB3F4E8", Offset = "0xB3F4E8", VA = "0xB3F4E8")]
		private void CB_ANIM_OnDrawHideSword(AI_AnimController.ANIM_CB cbState)
		{
		}

		[Token(Token = "0x600120C")]
		[Address(RVA = "0xB3F17C", Offset = "0xB3F17C", VA = "0xB3F17C")]
		public void SetTarget(AITargetType t, Collider c, Vector3 p, float d)
		{
		}

		[Token(Token = "0x600120D")]
		[Address(RVA = "0xB3F680", Offset = "0xB3F680", VA = "0xB3F680")]
		public void SetTarget(AITargetType t, Collider c, Vector3 p, float d, float s)
		{
		}

		[Token(Token = "0x600120E")]
		[Address(RVA = "0xB3F7B0", Offset = "0xB3F7B0", VA = "0xB3F7B0")]
		public void SetTarget(AITarget t)
		{
		}

		[Token(Token = "0x600120F")]
		[Address(RVA = "0xB3F894", Offset = "0xB3F894", VA = "0xB3F894")]
		public void ClearTarget()
		{
		}

		[Token(Token = "0x6001210")]
		[Address(RVA = "0xB3F928", Offset = "0xB3F928", VA = "0xB3F928")]
		public AI_NGStateMachine()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200025C")]
	public class AISTtatesDictionary : Extensions.SerializableDictionary<AI_StateMachine.AIStateType, AI_NState>
	{
		[Token(Token = "0x6001211")]
		[Address(RVA = "0xB3F99C", Offset = "0xB3F99C", VA = "0xB3F99C")]
		public AISTtatesDictionary()
		{
		}
	}
	[Token(Token = "0x200025D")]
	public abstract class AI_NState : MonoBehaviour
	{
		[Token(Token = "0x4000F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public bool bCanBeSwitchedExternally;

		[Token(Token = "0x4000F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[SerializeField]
		public bool bIsFinalState;

		[Token(Token = "0x4000F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		protected AI_StateMachine.AIStateType _switchState;

		[Token(Token = "0x4000F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected AI_NGStateMachine _stateMachine;

		[Token(Token = "0x6001212")]
		[Address(RVA = "0xB3F9E4", Offset = "0xB3F9E4", VA = "0xB3F9E4", Slot = "4")]
		public virtual void SetStateMachine(AI_NGStateMachine stateMachine)
		{
		}

		[Token(Token = "0x6001213")]
		[Address(RVA = "0xB3F9EC", Offset = "0xB3F9EC", VA = "0xB3F9EC", Slot = "5")]
		public virtual void SwitchState(AI_StateMachine.AIStateType nextState)
		{
		}

		[Token(Token = "0x6001214")]
		[Address(RVA = "0xB3F9FC", Offset = "0xB3F9FC", VA = "0xB3F9FC", Slot = "6")]
		protected virtual void CorrectPlayerRotation()
		{
		}

		[Token(Token = "0x6001215")]
		[Address(RVA = "0xB3F474", Offset = "0xB3F474", VA = "0xB3F474")]
		public void OnPreInitState()
		{
		}

		[Token(Token = "0x6001216")]
		[Address(RVA = "0xB3E790", Offset = "0xB3E790", VA = "0xB3E790")]
		public AI_StateMachine.AIStateType OnSwitchState()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x6001217")]
		[Address(RVA = "0xB3FA00", Offset = "0xB3FA00", VA = "0xB3FA00", Slot = "7")]
		public virtual void OnEnterState()
		{
		}

		[Token(Token = "0x6001218")]
		[Address(RVA = "0xB3FA04", Offset = "0xB3FA04", VA = "0xB3FA04", Slot = "8")]
		public virtual void OnExitState()
		{
		}

		[Token(Token = "0x6001219")]
		[Address(RVA = "0xB3FA08", Offset = "0xB3FA08", VA = "0xB3FA08", Slot = "9")]
		public virtual void OnDestinationReached(bool isReached)
		{
		}

		[Token(Token = "0x600121A")]
		public abstract AI_StateMachine.AIStateType GetStateType();

		[Token(Token = "0x600121B")]
		public abstract AI_StateMachine.AIStateType OnUpdate();

		[Token(Token = "0x600121C")]
		[Address(RVA = "0xB3FA0C", Offset = "0xB3FA0C", VA = "0xB3FA0C", Slot = "12")]
		public virtual void CB_OnAnimatorMove()
		{
		}

		[Token(Token = "0x600121D")]
		[Address(RVA = "0xB3FA10", Offset = "0xB3FA10", VA = "0xB3FA10")]
		protected AI_NState()
		{
		}
	}
	[Token(Token = "0x200025E")]
	public class NG_NinjaController : AI_HumanBased
	{
		[Token(Token = "0x200025F")]
		[CompilerGenerated]
		private sealed class <CR_DrawKatana>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F2D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F2E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4000F2F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public NG_NinjaController <>4__this;

			[Token(Token = "0x17000200")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001225")]
				[Address(RVA = "0xB3FBAC", Offset = "0xB3FBAC", VA = "0xB3FBAC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000201")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001227")]
				[Address(RVA = "0xB3FBF4", Offset = "0xB3FBF4", VA = "0xB3FBF4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001222")]
			[Address(RVA = "0xB3FA88", Offset = "0xB3FA88", VA = "0xB3FA88")]
			[DebuggerHidden]
			public <CR_DrawKatana>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6001223")]
			[Address(RVA = "0xB3FAC8", Offset = "0xB3FAC8", VA = "0xB3FAC8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001224")]
			[Address(RVA = "0xB3FACC", Offset = "0xB3FACC", VA = "0xB3FACC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001226")]
			[Address(RVA = "0xB3FBB4", Offset = "0xB3FBB4", VA = "0xB3FBB4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject _katanaBack;

		[Token(Token = "0x4000F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject _katanaHand;

		[Token(Token = "0x4000F29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public LookAtIK lookAtIK;

		[Token(Token = "0x4000F2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public PuppetMaster pMaster;

		[Token(Token = "0x4000F2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool bSwordIsOut;

		[Token(Token = "0x4000F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		private bool _IsSwordSrawInProcess;

		[Token(Token = "0x600121E")]
		[Address(RVA = "0xB3ECE4", Offset = "0xB3ECE4", VA = "0xB3ECE4")]
		public void On_AlertState()
		{
		}

		[Token(Token = "0x600121F")]
		[Address(RVA = "0xB3F0E8", Offset = "0xB3F0E8", VA = "0xB3F0E8")]
		public void On_CalmState()
		{
		}

		[Token(Token = "0x6001220")]
		[Address(RVA = "0xB3FA20", Offset = "0xB3FA20", VA = "0xB3FA20")]
		[IteratorStateMachine(typeof(<CR_DrawKatana>d__8))]
		private IEnumerator CR_DrawKatana()
		{
			return null;
		}

		[Token(Token = "0x6001221")]
		[Address(RVA = "0xB3FAB0", Offset = "0xB3FAB0", VA = "0xB3FAB0")]
		public NG_NinjaController()
		{
		}
	}
	[Token(Token = "0x2000260")]
	public class SoundBroadcaster : MonoBehaviour
	{
		[Token(Token = "0x4000F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LayerMask notifyLayers;

		[Token(Token = "0x4000F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float broadcastRadius;

		[Token(Token = "0x6001228")]
		[Address(RVA = "0xB3FBFC", Offset = "0xB3FBFC", VA = "0xB3FBFC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001229")]
		[Address(RVA = "0xB3FC84", Offset = "0xB3FC84", VA = "0xB3FC84")]
		public void BroadcastSound()
		{
		}

		[Token(Token = "0x600122A")]
		[Address(RVA = "0xB3FC88", Offset = "0xB3FC88", VA = "0xB3FC88")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x600122B")]
		[Address(RVA = "0xB3FCD4", Offset = "0xB3FCD4", VA = "0xB3FCD4")]
		public SoundBroadcaster()
		{
		}
	}
	[Token(Token = "0x2000261")]
	public class AIST_ATTACK : AIVS_MOVABLE
	{
		[Token(Token = "0x4000F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int _AnAttackHash;

		[Token(Token = "0x4000F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float disengageRadius;

		[Token(Token = "0x600122C")]
		[Address(RVA = "0xB3FCE4", Offset = "0xB3FCE4", VA = "0xB3FCE4", Slot = "10")]
		public override AI_StateMachine.AIStateType GetStateType()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x600122D")]
		[Address(RVA = "0xB3FCEC", Offset = "0xB3FCEC", VA = "0xB3FCEC", Slot = "7")]
		public override void OnEnterState()
		{
		}

		[Token(Token = "0x600122E")]
		[Address(RVA = "0xB3FF08", Offset = "0xB3FF08", VA = "0xB3FF08", Slot = "8")]
		public override void OnExitState()
		{
		}

		[Token(Token = "0x600122F")]
		[Address(RVA = "0xB400CC", Offset = "0xB400CC", VA = "0xB400CC", Slot = "9")]
		public override void OnDestinationReached(bool isReached)
		{
		}

		[Token(Token = "0x6001230")]
		[Address(RVA = "0xB40104", Offset = "0xB40104", VA = "0xB40104")]
		private void OnAttackStart(AI_AnimController.ANIM_CB cbState)
		{
		}

		[Token(Token = "0x6001231")]
		[Address(RVA = "0xB401A4", Offset = "0xB401A4", VA = "0xB401A4", Slot = "11")]
		public override AI_StateMachine.AIStateType OnUpdate()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x6001232")]
		[Address(RVA = "0xB401AC", Offset = "0xB401AC", VA = "0xB401AC")]
		public AIST_ATTACK()
		{
		}
	}
	[Token(Token = "0x2000262")]
	public class AIST_DAMAGE : AI_NState
	{
		[Token(Token = "0x6001233")]
		[Address(RVA = "0xB402BC", Offset = "0xB402BC", VA = "0xB402BC", Slot = "10")]
		public override AI_StateMachine.AIStateType GetStateType()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x6001234")]
		[Address(RVA = "0xB402C4", Offset = "0xB402C4", VA = "0xB402C4", Slot = "11")]
		public override AI_StateMachine.AIStateType OnUpdate()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x6001235")]
		[Address(RVA = "0xB402CC", Offset = "0xB402CC", VA = "0xB402CC")]
		public AIST_DAMAGE()
		{
		}
	}
	[Token(Token = "0x2000263")]
	public class AIST_DEATH : AI_NState
	{
		[Token(Token = "0x6001236")]
		[Address(RVA = "0xB402DC", Offset = "0xB402DC", VA = "0xB402DC", Slot = "10")]
		public override AI_StateMachine.AIStateType GetStateType()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x6001237")]
		[Address(RVA = "0xB402E4", Offset = "0xB402E4", VA = "0xB402E4", Slot = "11")]
		public override AI_StateMachine.AIStateType OnUpdate()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x6001238")]
		[Address(RVA = "0xB402EC", Offset = "0xB402EC", VA = "0xB402EC")]
		public AIST_DEATH()
		{
		}
	}
	[Token(Token = "0x2000264")]
	public class AIST_IDLE : AI_NState
	{
		[Token(Token = "0x4000F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private int _animAngleHash;

		[Token(Token = "0x4000F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int _animSpeedHash;

		[Token(Token = "0x4000F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector2 lookUpTimerMinMax;

		[Token(Token = "0x4000F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _actionTimer;

		[Token(Token = "0x17000202")]
		private AITarget Target
		{
			[Token(Token = "0x6001239")]
			[Address(RVA = "0xB402FC", Offset = "0xB402FC", VA = "0xB402FC")]
			get
			{
				return default(AITarget);
			}
		}

		[Token(Token = "0x17000203")]
		private Animator Anim
		{
			[Token(Token = "0x600123A")]
			[Address(RVA = "0xB40328", Offset = "0xB40328", VA = "0xB40328")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600123B")]
		[Address(RVA = "0xB403B0", Offset = "0xB403B0", VA = "0xB403B0", Slot = "10")]
		public override AI_StateMachine.AIStateType GetStateType()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x600123C")]
		[Address(RVA = "0xB403B8", Offset = "0xB403B8", VA = "0xB403B8", Slot = "4")]
		public override void SetStateMachine(AI_NGStateMachine stateMachine)
		{
		}

		[Token(Token = "0x600123D")]
		[Address(RVA = "0xB403C0", Offset = "0xB403C0", VA = "0xB403C0", Slot = "7")]
		public override void OnEnterState()
		{
		}

		[Token(Token = "0x600123E")]
		[Address(RVA = "0xB40434", Offset = "0xB40434", VA = "0xB40434", Slot = "11")]
		public override AI_StateMachine.AIStateType OnUpdate()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x600123F")]
		[Address(RVA = "0xB40500", Offset = "0xB40500", VA = "0xB40500")]
		public AIST_IDLE()
		{
		}
	}
	[Token(Token = "0x2000265")]
	public class AIST_PATROL : AIVS_MOVABLE
	{
		[Token(Token = "0x4000F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 _currentPos;

		[Token(Token = "0x6001240")]
		[Address(RVA = "0xB40598", Offset = "0xB40598", VA = "0xB40598", Slot = "10")]
		public override AI_StateMachine.AIStateType GetStateType()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x6001241")]
		[Address(RVA = "0xB405A0", Offset = "0xB405A0", VA = "0xB405A0", Slot = "7")]
		public override void OnEnterState()
		{
		}

		[Token(Token = "0x6001242")]
		[Address(RVA = "0xB4077C", Offset = "0xB4077C", VA = "0xB4077C", Slot = "11")]
		public override AI_StateMachine.AIStateType OnUpdate()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x6001243")]
		[Address(RVA = "0xB40C48", Offset = "0xB40C48", VA = "0xB40C48", Slot = "9")]
		public override void OnDestinationReached(bool isReached)
		{
		}

		[Token(Token = "0x6001244")]
		[Address(RVA = "0xB40CFC", Offset = "0xB40CFC", VA = "0xB40CFC")]
		public AIST_PATROL()
		{
		}
	}
	[Token(Token = "0x2000266")]
	public class AIST_PURSUIT : AIVS_MOVABLE
	{
		[Token(Token = "0x6001245")]
		[Address(RVA = "0xB40D00", Offset = "0xB40D00", VA = "0xB40D00", Slot = "10")]
		public override AI_StateMachine.AIStateType GetStateType()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x6001246")]
		[Address(RVA = "0xB40D08", Offset = "0xB40D08", VA = "0xB40D08", Slot = "7")]
		public override void OnEnterState()
		{
		}

		[Token(Token = "0x6001247")]
		[Address(RVA = "0xB40D7C", Offset = "0xB40D7C", VA = "0xB40D7C", Slot = "8")]
		public override void OnExitState()
		{
		}

		[Token(Token = "0x6001248")]
		[Address(RVA = "0xB40D98", Offset = "0xB40D98", VA = "0xB40D98", Slot = "9")]
		public override void OnDestinationReached(bool isReached)
		{
		}

		[Token(Token = "0x6001249")]
		[Address(RVA = "0xB40E74", Offset = "0xB40E74", VA = "0xB40E74", Slot = "11")]
		public override AI_StateMachine.AIStateType OnUpdate()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x600124A")]
		[Address(RVA = "0xB40FD0", Offset = "0xB40FD0", VA = "0xB40FD0")]
		public AIST_PURSUIT()
		{
		}
	}
	[Token(Token = "0x2000267")]
	public class AIST_SCAN : AI_NState
	{
		[Token(Token = "0x4000F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector3 vMin;

		[Token(Token = "0x4000F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector3 vMax;

		[Token(Token = "0x4000F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float LerpDurationL;

		[Token(Token = "0x4000F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float LerpDurationR;

		[Token(Token = "0x4000F3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float _ScanTimeStart;

		[Token(Token = "0x17000204")]
		private LookAtIK lookIK
		{
			[Token(Token = "0x600124B")]
			[Address(RVA = "0xB40FD4", Offset = "0xB40FD4", VA = "0xB40FD4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000205")]
		private Transform LOOT_target
		{
			[Token(Token = "0x600124C")]
			[Address(RVA = "0xB4105C", Offset = "0xB4105C", VA = "0xB4105C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600124D")]
		[Address(RVA = "0xB41078", Offset = "0xB41078", VA = "0xB41078", Slot = "10")]
		public override AI_StateMachine.AIStateType GetStateType()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x600124E")]
		[Address(RVA = "0xB41080", Offset = "0xB41080", VA = "0xB41080", Slot = "7")]
		public override void OnEnterState()
		{
		}

		[Token(Token = "0x600124F")]
		[Address(RVA = "0xB41100", Offset = "0xB41100", VA = "0xB41100", Slot = "8")]
		public override void OnExitState()
		{
		}

		[Token(Token = "0x6001250")]
		[Address(RVA = "0xB4113C", Offset = "0xB4113C", VA = "0xB4113C", Slot = "11")]
		public override AI_StateMachine.AIStateType OnUpdate()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x6001251")]
		[Address(RVA = "0xB411BC", Offset = "0xB411BC", VA = "0xB411BC")]
		public AIST_SCAN()
		{
		}
	}
	[Token(Token = "0x2000268")]
	public class AIST_TELEPORT : AI_NState
	{
		[Token(Token = "0x6001252")]
		[Address(RVA = "0xB411D4", Offset = "0xB411D4", VA = "0xB411D4", Slot = "10")]
		public override AI_StateMachine.AIStateType GetStateType()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x6001253")]
		[Address(RVA = "0xB411DC", Offset = "0xB411DC", VA = "0xB411DC", Slot = "11")]
		public override AI_StateMachine.AIStateType OnUpdate()
		{
			return default(AI_StateMachine.AIStateType);
		}

		[Token(Token = "0x6001254")]
		[Address(RVA = "0xB411E4", Offset = "0xB411E4", VA = "0xB411E4")]
		public AIST_TELEPORT()
		{
		}
	}
	[Token(Token = "0x2000269")]
	public abstract class AIVS_MOVABLE : AI_NState
	{
		[Token(Token = "0x4000F3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected float _smoothAngle;

		[Token(Token = "0x4000F3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		protected int _animAngleHash;

		[Token(Token = "0x4000F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected int _animSpeedHash;

		[Token(Token = "0x4000F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private int _InAirHash;

		[Token(Token = "0x17000206")]
		protected AITarget Target
		{
			[Token(Token = "0x6001255")]
			[Address(RVA = "0xB40D50", Offset = "0xB40D50", VA = "0xB40D50")]
			get
			{
				return default(AITarget);
			}
		}

		[Token(Token = "0x17000207")]
		protected Animator Anim
		{
			[Token(Token = "0x6001256")]
			[Address(RVA = "0xB3FE80", Offset = "0xB3FE80", VA = "0xB3FE80")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000208")]
		protected NavMeshAgent navAgent
		{
			[Token(Token = "0x6001257")]
			[Address(RVA = "0xB40044", Offset = "0xB40044", VA = "0xB40044")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000209")]
		protected CharacterController charController
		{
			[Token(Token = "0x6001258")]
			[Address(RVA = "0xB411F4", Offset = "0xB411F4", VA = "0xB411F4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700020A")]
		protected PuppetMaster pMaster
		{
			[Token(Token = "0x6001259")]
			[Address(RVA = "0xB4127C", Offset = "0xB4127C", VA = "0xB4127C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600125A")]
		[Address(RVA = "0xB40898", Offset = "0xB40898", VA = "0xB40898")]
		protected void MovaAndRotate(Vector3 cPos, float speedKoef)
		{
		}

		[Token(Token = "0x600125B")]
		[Address(RVA = "0xB40AAC", Offset = "0xB40AAC", VA = "0xB40AAC")]
		protected void StopAndRotate(Vector3 cPos)
		{
		}

		[Token(Token = "0x600125C")]
		[Address(RVA = "0xB40204", Offset = "0xB40204", VA = "0xB40204")]
		protected AIVS_MOVABLE()
		{
		}
	}
	[Token(Token = "0x200026A")]
	public class TagSelectorAttribute : PropertyAttribute
	{
		[Token(Token = "0x4000F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool UseDefaultTagFieldDrawer;

		[Token(Token = "0x600125D")]
		[Address(RVA = "0xB41304", Offset = "0xB41304", VA = "0xB41304")]
		public TagSelectorAttribute()
		{
		}
	}
	[Token(Token = "0x200026B")]
	public static class Extensions
	{
		[Serializable]
		[Token(Token = "0x200026C")]
		public class SerializableDictionary<TKey, TValue> : Dictionary<TKey, TValue>, ISerializationCallbackReceiver
		{
			[Token(Token = "0x4000F43")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[SerializeField]
			private List<TKey> keys;

			[Token(Token = "0x4000F44")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[SerializeField]
			private List<TValue> values;

			[Token(Token = "0x6001268")]
			public void OnBeforeSerialize()
			{
			}

			[Token(Token = "0x6001269")]
			public void OnAfterDeserialize()
			{
			}

			[Token(Token = "0x600126A")]
			public SerializableDictionary()
			{
			}
		}

		[Token(Token = "0x600125E")]
		[Address(RVA = "0xB3ECE0", Offset = "0xB3ECE0", VA = "0xB3ECE0")]
		public static void VRK_Debug(string message, string tcolor = "yellow")
		{
		}

		[Token(Token = "0x600125F")]
		public static void With<T>(this MonoBehaviour mono, Action<T> action) where T : Component
		{
		}

		[Token(Token = "0x6001260")]
		public static void FindAllChildren<T>(this GameObject go, Action<T> action) where T : Component
		{
		}

		[Token(Token = "0x6001261")]
		public static void FindAll<T>(this GameObject go, Action<T> action) where T : Component
		{
		}

		[Token(Token = "0x6001262")]
		[Address(RVA = "0xB4130C", Offset = "0xB4130C", VA = "0xB4130C")]
		public static float Remap(this float value, float from1, float to1, float from2, float to2)
		{
			return default(float);
		}

		[Token(Token = "0x6001263")]
		[Address(RVA = "0xB41328", Offset = "0xB41328", VA = "0xB41328")]
		public static Transform FindChildByName(this GameObject go, string name)
		{
			return null;
		}

		[Token(Token = "0x6001264")]
		[Address(RVA = "0xB413EC", Offset = "0xB413EC", VA = "0xB413EC")]
		public static Transform FindParentChildByName(this GameObject go, string name)
		{
			return null;
		}

		[Token(Token = "0x6001265")]
		[Address(RVA = "0xB414C8", Offset = "0xB414C8", VA = "0xB414C8")]
		public static Vector3 WithY(this Vector3 value, float vY)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001266")]
		[Address(RVA = "0xB414D0", Offset = "0xB414D0", VA = "0xB414D0")]
		public static void SetMaterial(this Renderer renderer, Material material)
		{
		}

		[Token(Token = "0x6001267")]
		[Address(RVA = "0xB3E2DC", Offset = "0xB3E2DC", VA = "0xB3E2DC")]
		public static void ResetTransform(this Transform trans)
		{
		}
	}
	[Token(Token = "0x200026D")]
	public class fts
	{
		[Token(Token = "0x600126B")]
		[Address(RVA = "0xB4153C", Offset = "0xB4153C", VA = "0xB4153C")]
		public static bool IsZero(double d)
		{
			return default(bool);
		}

		[Token(Token = "0x600126C")]
		[Address(RVA = "0xB41564", Offset = "0xB41564", VA = "0xB41564")]
		public static int SolveQuadric(double c0, double c1, double c2, out double s0, out double s1)
		{
			return default(int);
		}

		[Token(Token = "0x600126D")]
		[Address(RVA = "0xB41654", Offset = "0xB41654", VA = "0xB41654")]
		public static int SolveCubic(double c0, double c1, double c2, double c3, out double s0, out double s1, out double s2)
		{
			return default(int);
		}

		[Token(Token = "0x600126E")]
		[Address(RVA = "0xB418A0", Offset = "0xB418A0", VA = "0xB418A0")]
		public static int SolveQuartic(double c0, double c1, double c2, double c3, double c4, out double s0, out double s1, out double s2, out double s3)
		{
			return default(int);
		}

		[Token(Token = "0x600126F")]
		[Address(RVA = "0xB41C58", Offset = "0xB41C58", VA = "0xB41C58")]
		public static float ballistic_range(float speed, float gravity, float initial_height)
		{
			return default(float);
		}

		[Token(Token = "0x6001270")]
		[Address(RVA = "0xB41C90", Offset = "0xB41C90", VA = "0xB41C90")]
		public static int solve_ballistic_arc(Vector3 proj_pos, float proj_speed, Vector3 target, float gravity, out Vector3 s0, out Vector3 s1)
		{
			return default(int);
		}

		[Token(Token = "0x6001271")]
		[Address(RVA = "0xB41FA4", Offset = "0xB41FA4", VA = "0xB41FA4")]
		public static int solve_ballistic_arc(Vector3 proj_pos, float proj_speed, Vector3 target_pos, Vector3 target_velocity, float gravity, out Vector3 s0, out Vector3 s1)
		{
			return default(int);
		}

		[Token(Token = "0x6001272")]
		[Address(RVA = "0xB422C8", Offset = "0xB422C8", VA = "0xB422C8")]
		public static bool solve_ballistic_arc_lateral(Vector3 proj_pos, float lateral_speed, Vector3 target_pos, float max_height, out Vector3 fire_velocity, out float gravity)
		{
			return default(bool);
		}

		[Token(Token = "0x6001273")]
		[Address(RVA = "0xB424B4", Offset = "0xB424B4", VA = "0xB424B4")]
		public static bool solve_ballistic_arc_lateral(Vector3 proj_pos, float lateral_speed, Vector3 target, Vector3 target_velocity, float max_height_offset, out Vector3 fire_velocity, out float gravity, out Vector3 impact_point)
		{
			return default(bool);
		}

		[Token(Token = "0x6001274")]
		[Address(RVA = "0xB427AC", Offset = "0xB427AC", VA = "0xB427AC")]
		public fts()
		{
		}
	}
	[Token(Token = "0x200026E")]
	[CreateAssetMenu(fileName = "new GameConfig", menuName = "VRKemono/Game Config", order = 0)]
	public class GameConfig : ScriptableObject
	{
		[Token(Token = "0x4000F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool VIVEPORT_BUILD;

		[Token(Token = "0x4000F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public uint SteamID;

		[Token(Token = "0x4000F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LayerMask CameraCullingMask;

		[Token(Token = "0x4000F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public LayerMask GroundLayers;

		[Token(Token = "0x4000F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LayerMask BroadcastLayers;

		[Token(Token = "0x4000F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask TeleportCLayers;

		[Token(Token = "0x4000F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public LayerMask WeaponIgnoreLayers;

		[Token(Token = "0x4000F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float PoolObjectsTTL;

		[Token(Token = "0x4000F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public LayerMask MeleeIgnoreLayer;

		[Token(Token = "0x4000F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public LayerMask MeleeCutLayer;

		[Token(Token = "0x4000F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string SavePass;

		[Token(Token = "0x4000F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float HoslterTimoutOut;

		[Token(Token = "0x6001275")]
		[Address(RVA = "0xB427B4", Offset = "0xB427B4", VA = "0xB427B4")]
		public GameConfig()
		{
		}
	}
	[Token(Token = "0x200026F")]
	public interface IGrabCallbacks
	{
		[Token(Token = "0x6001276")]
		void EVT_OnSnapZoneGrab();

		[Token(Token = "0x6001277")]
		void EVT_OnSnapZoneRelease();

		[Token(Token = "0x6001278")]
		void EVT_OnGrab();

		[Token(Token = "0x6001279")]
		void EVT_OnRelease();
	}
	[Token(Token = "0x2000270")]
	public class LinearAnimator : MonoBehaviour
	{
		[Token(Token = "0x4000F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float value;

		[Token(Token = "0x4000F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Animator animator;

		[Token(Token = "0x4000F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float currentLinearMapping;

		[Token(Token = "0x4000F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private int framesUnchanged;

		[Token(Token = "0x4000F55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool isActivated;

		[Token(Token = "0x600127A")]
		[Address(RVA = "0xB427D8", Offset = "0xB427D8", VA = "0xB427D8")]
		private void Awake()
		{
		}

		[Token(Token = "0x600127B")]
		[Address(RVA = "0xB42880", Offset = "0xB42880", VA = "0xB42880")]
		private void Update()
		{
		}

		[Token(Token = "0x600127C")]
		[Address(RVA = "0xB4294C", Offset = "0xB4294C", VA = "0xB4294C")]
		public LinearAnimator()
		{
		}
	}
	[Token(Token = "0x2000271")]
	public abstract class MonoSingleton<T> : MonoBehaviour where T : MonoSingleton<T>
	{
		[Token(Token = "0x1700020B")]
		public static T Instance
		{
			[Token(Token = "0x600127D")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x600127E")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x600127F")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001280")]
		protected virtual void OnAwake()
		{
		}

		[Token(Token = "0x6001281")]
		protected MonoSingleton()
		{
		}
	}
	[Token(Token = "0x2000272")]
	public abstract class MonoSelfCreateSingleton<T> : MonoBehaviour where T : MonoSelfCreateSingleton<T>
	{
		[Token(Token = "0x4000F57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T _instance;

		[Token(Token = "0x1700020C")]
		public static T Instance
		{
			[Token(Token = "0x6001282")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001283")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001284")]
		protected MonoSelfCreateSingleton()
		{
		}
	}
	[Token(Token = "0x2000273")]
	public abstract class PoolManager<C, T> : MonoBehaviour where C : PoolManager<C, T>
	{
		[Token(Token = "0x4000F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int POOL_MIN;

		[Token(Token = "0x4000F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int POOL_COUNT;

		[Token(Token = "0x4000F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int poolSize;

		[Token(Token = "0x4000F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GameObject prefab;

		[Token(Token = "0x4000F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public bool bAutoInit;

		[Token(Token = "0x4000F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public List<T> Pool;

		[Token(Token = "0x4000F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		protected int _cIndex;

		[Token(Token = "0x4000F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private bool _isInited;

		[Token(Token = "0x6001285")]
		private Color GetBarColor()
		{
			return default(Color);
		}

		[Token(Token = "0x6001286")]
		private void Start()
		{
		}

		[Token(Token = "0x6001287")]
		public void EVT_Init()
		{
		}

		[Token(Token = "0x6001288")]
		protected T GetItem()
		{
			return (T)null;
		}

		[Token(Token = "0x6001289")]
		protected virtual void CB_OnIniPoolItem(int index)
		{
		}

		[Token(Token = "0x600128A")]
		public virtual void BackToPool(int index)
		{
		}

		[Token(Token = "0x600128B")]
		protected PoolManager()
		{
		}
	}
	[Token(Token = "0x2000274")]
	public abstract class ScriptableSingleton<T> : ScriptableObject where T : ScriptableObject
	{
		[Token(Token = "0x4000F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T _instance;

		[Token(Token = "0x1700020D")]
		public static T Instance
		{
			[Token(Token = "0x600128C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600128D")]
		protected ScriptableSingleton()
		{
		}
	}
	[Token(Token = "0x2000275")]
	[CreateAssetMenu(menuName = "VRKemono/AppSetting")]
	public class SO_AppSettingsDefaults : ScriptableObject
	{
		[Token(Token = "0x4000F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int lightCount;

		[Token(Token = "0x4000F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int MSAA;

		[Token(Token = "0x4000F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ShadowQuality shadowQuality;

		[Token(Token = "0x4000F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public ShadowResolution shadowResolution;

		[Token(Token = "0x4000F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float shadowDistance;

		[Token(Token = "0x4000F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool EnableBloom;

		[Token(Token = "0x4000F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Quality GlowQuality;

		[Token(Token = "0x4000F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Vector2 GlowMinMax;

		[Token(Token = "0x600128E")]
		[Address(RVA = "0xB4295C", Offset = "0xB4295C", VA = "0xB4295C")]
		public SO_AppSettingsDefaults()
		{
		}
	}
	[Token(Token = "0x2000276")]
	public class BH_MainMenu : MonoBehaviour
	{
		[Token(Token = "0x600128F")]
		[Address(RVA = "0xB42994", Offset = "0xB42994", VA = "0xB42994")]
		public BH_MainMenu()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000277")]
	public class VFX_InstancedEntity
	{
		[Token(Token = "0x4000F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public byte aIndex;

		[Token(Token = "0x4000F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<ParticleSystem> vfxInstances;

		[Token(Token = "0x6001290")]
		[Address(RVA = "0xB4299C", Offset = "0xB4299C", VA = "0xB4299C")]
		public VFX_InstancedEntity()
		{
		}
	}
	[Token(Token = "0x2000278")]
	[CreateAssetMenu(menuName = "VRKemono/DB_Damage")]
	public class DB_DamageVFX : ScriptableObject
	{
		[Serializable]
		[Token(Token = "0x2000279")]
		public class FDBEffectDictionary : Extensions.SerializableDictionary<string, VFXInfo>
		{
			[Token(Token = "0x6001292")]
			[Address(RVA = "0xB42A84", Offset = "0xB42A84", VA = "0xB42A84")]
			public FDBEffectDictionary()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x200027A")]
		public class VFXInfo
		{
			[Token(Token = "0x4000F6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject PF_Reference;

			[Token(Token = "0x4000F6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public float playTimeOverride;

			[Token(Token = "0x4000F6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VFX_InstancedEntity effStack;

			[Token(Token = "0x6001293")]
			[Address(RVA = "0xB42ACC", Offset = "0xB42ACC", VA = "0xB42ACC")]
			public VFXInfo()
			{
			}
		}

		[Token(Token = "0x4000F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int maxPerPoolObject;

		[Token(Token = "0x4000F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FDBEffectDictionary DATA;

		[Token(Token = "0x6001291")]
		[Address(RVA = "0xB42A18", Offset = "0xB42A18", VA = "0xB42A18")]
		public DB_DamageVFX()
		{
		}
	}
	[Token(Token = "0x200027B")]
	public class FeedbackManager : MonoBehaviour
	{
		[Token(Token = "0x200027C")]
		public enum VHands
		{
			[Token(Token = "0x4000F77")]
			NONE,
			[Token(Token = "0x4000F78")]
			LEFT,
			[Token(Token = "0x4000F79")]
			RIGHT,
			[Token(Token = "0x4000F7A")]
			BOTH
		}

		[Token(Token = "0x200027D")]
		[CompilerGenerated]
		private sealed class <CR_ExecuteEffect>d__15 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F7B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F7C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4000F7D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public SO_ComplexEffectData eff;

			[Token(Token = "0x4000F7E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FeedbackManager <>4__this;

			[Token(Token = "0x4000F7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 pos;

			[Token(Token = "0x4000F80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Vector3 pNorm;

			[Token(Token = "0x4000F81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Transform pAttch;

			[Token(Token = "0x4000F82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public ControllerHand hand;

			[Token(Token = "0x4000F83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private List<SO_ComplexEffectData.stNodeData>.Enumerator <>7__wrap1;

			[Token(Token = "0x4000F84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			private SO_ComplexEffectData.stNodeData <nData>5__3;

			[Token(Token = "0x1700020E")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60012A7")]
				[Address(RVA = "0xB43EA8", Offset = "0xB43EA8", VA = "0xB43EA8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700020F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60012A9")]
				[Address(RVA = "0xB43EF0", Offset = "0xB43EF0", VA = "0xB43EF0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60012A3")]
			[Address(RVA = "0xB43818", Offset = "0xB43818", VA = "0xB43818")]
			[DebuggerHidden]
			public <CR_ExecuteEffect>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x60012A4")]
			[Address(RVA = "0xB43BCC", Offset = "0xB43BCC", VA = "0xB43BCC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60012A5")]
			[Address(RVA = "0xB43BE8", Offset = "0xB43BE8", VA = "0xB43BE8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60012A6")]
			[Address(RVA = "0xB43E58", Offset = "0xB43E58", VA = "0xB43E58")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x60012A8")]
			[Address(RVA = "0xB43EB0", Offset = "0xB43EB0", VA = "0xB43EB0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200027F")]
		[CompilerGenerated]
		private sealed class <CR_PlayEffect>d__20 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4000F86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4000F87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4000F88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public ParticleSystem pSystem;

			[Token(Token = "0x4000F89")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform trAttach;

			[Token(Token = "0x4000F8A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float playtime;

			[Token(Token = "0x4000F8B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public FeedbackManager <>4__this;

			[Token(Token = "0x17000210")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60012AF")]
				[Address(RVA = "0xB44290", Offset = "0xB44290", VA = "0xB44290", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000211")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60012B1")]
				[Address(RVA = "0xB442D8", Offset = "0xB442D8", VA = "0xB442D8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60012AC")]
			[Address(RVA = "0xB43AFC", Offset = "0xB43AFC", VA = "0xB43AFC")]
			[DebuggerHidden]
			public <CR_PlayEffect>d__20(int <>1__state)
			{
			}

			[Token(Token = "0x60012AD")]
			[Address(RVA = "0xB43F78", Offset = "0xB43F78", VA = "0xB43F78", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60012AE")]
			[Address(RVA = "0xB43F7C", Offset = "0xB43F7C", VA = "0xB43F7C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60012B0")]
			[Address(RVA = "0xB44298", Offset = "0xB44298", VA = "0xB44298", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DB_DamageVFX Damage_DB;

		[Token(Token = "0x4000F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<SO_ComplexEffectData> ComplexEffects_DB;

		[Token(Token = "0x4000F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<AudioController> AudioEffects_DB;

		[Token(Token = "0x4000F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public HapticEffect[] HapticsDATA;

		[Token(Token = "0x4000F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public DB_DamageVFX.FDBEffectDictionary Feedback_DB;

		[Token(Token = "0x4000F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int _cPlayIndex;

		[Token(Token = "0x6001294")]
		[Address(RVA = "0xB42AD4", Offset = "0xB42AD4", VA = "0xB42AD4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001295")]
		[Address(RVA = "0xB42E8C", Offset = "0xB42E8C", VA = "0xB42E8C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001296")]
		[Address(RVA = "0xB42B2C", Offset = "0xB42B2C", VA = "0xB42B2C")]
		public void CreateDamagesPool()
		{
		}

		[Token(Token = "0x6001297")]
		[Address(RVA = "0xB42E90", Offset = "0xB42E90", VA = "0xB42E90")]
		private void ClearPool()
		{
		}

		[Token(Token = "0x6001298")]
		[Address(RVA = "0xB430A0", Offset = "0xB430A0", VA = "0xB430A0")]
		public void EVT_PlayFBKEvent((string effName, Vector3 pos, Vector3 normal, Transform trAtt, ControllerHand hand) fbkInfo)
		{
		}

		[Token(Token = "0x6001299")]
		[Address(RVA = "0xB43544", Offset = "0xB43544", VA = "0xB43544")]
		public void PlaybHapticEffect(string effName, ControllerHand hand = ControllerHand.None)
		{
		}

		[Token(Token = "0x600129A")]
		[Address(RVA = "0xB43394", Offset = "0xB43394", VA = "0xB43394")]
		public void PlayVFXEffect(string vfxName, Vector3 pos, Vector3 hNormal, Transform T_AttacchTo)
		{
		}

		[Token(Token = "0x600129B")]
		[Address(RVA = "0xB43648", Offset = "0xB43648", VA = "0xB43648")]
		private Vector3 ParseValues(string cmd)
		{
			return default(Vector3);
		}

		[Token(Token = "0x600129C")]
		[Address(RVA = "0xB43750", Offset = "0xB43750", VA = "0xB43750")]
		[IteratorStateMachine(typeof(<CR_ExecuteEffect>d__15))]
		public IEnumerator<float> CR_ExecuteEffect(SO_ComplexEffectData eff, Vector3 pos, Vector3 pNorm, [Optional] Transform pAttch, ControllerHand hand = ControllerHand.None)
		{
			return null;
		}

		[Token(Token = "0x600129D")]
		[Address(RVA = "0xB43840", Offset = "0xB43840", VA = "0xB43840")]
		private void ExecuteEffect(string cmdName, SO_ComplexEffectData.EffectType cmdType, Vector3 position, Vector3 normal, Transform T_Attach, ControllerHand hand)
		{
		}

		[Token(Token = "0x600129E")]
		[Address(RVA = "0xB431B0", Offset = "0xB431B0", VA = "0xB431B0")]
		private void PlayComplexEffect(string effectName, Vector3 pos, Vector3 hNormal, [Optional] Transform tAttach, ControllerHand hand = ControllerHand.None)
		{
		}

		[Token(Token = "0x600129F")]
		[Address(RVA = "0xB43A6C", Offset = "0xB43A6C", VA = "0xB43A6C")]
		private void SetFakeParent()
		{
		}

		[Token(Token = "0x60012A0")]
		[Address(RVA = "0xB43548", Offset = "0xB43548", VA = "0xB43548")]
		private void Play_VFX_EffectAt(ParticleSystem pSystem, Vector3 position, [Optional] Transform trAttach, [Optional] Vector3? hitNormal, [Optional][MetadataOffset(Offset = "0x459905")] float? timeOverride)
		{
		}

		[Token(Token = "0x60012A1")]
		[Address(RVA = "0xB43A70", Offset = "0xB43A70", VA = "0xB43A70")]
		[IteratorStateMachine(typeof(<CR_PlayEffect>d__20))]
		private IEnumerator<float> CR_PlayEffect(ParticleSystem pSystem, float playtime, Transform trAttach)
		{
			return null;
		}

		[Token(Token = "0x60012A2")]
		[Address(RVA = "0xB43B24", Offset = "0xB43B24", VA = "0xB43B24")]
		public FeedbackManager()
		{
		}
	}
	[Token(Token = "0x2000280")]
	public class HapticEffect : MonoBehaviour
	{
		[Token(Token = "0x60012B2")]
		[Address(RVA = "0xB44334", Offset = "0xB44334", VA = "0xB44334")]
		public HapticEffect()
		{
		}
	}
	[Token(Token = "0x2000281")]
	[CreateAssetMenu(menuName = "VRKemono/Complex Effect")]
	public class SO_ComplexEffectData : ScriptableObject
	{
		[Token(Token = "0x2000282")]
		public enum EffectType
		{
			[Token(Token = "0x4000F8E")]
			NONE,
			[Token(Token = "0x4000F8F")]
			SFX,
			[Token(Token = "0x4000F90")]
			VFX,
			[Token(Token = "0x4000F91")]
			VHAND_SINGLE,
			[Token(Token = "0x4000F92")]
			VHAND_BOTH,
			[Token(Token = "0x4000F93")]
			BHAPTIC,
			[Token(Token = "0x4000F94")]
			COMPLEX
		}

		[Serializable]
		[Token(Token = "0x2000283")]
		public struct stNodeData
		{
			[Token(Token = "0x4000F95")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public EffectType effType;

			[Token(Token = "0x4000F96")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public string input;

			[Token(Token = "0x4000F97")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float delay;

			[Token(Token = "0x60012B4")]
			[Address(RVA = "0xB44344", Offset = "0xB44344", VA = "0xB44344")]
			public Color GetColor()
			{
				return default(Color);
			}
		}

		[Token(Token = "0x4000F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<stNodeData> effects;

		[Token(Token = "0x60012B3")]
		[Address(RVA = "0xB4433C", Offset = "0xB4433C", VA = "0xB4433C")]
		public SO_ComplexEffectData()
		{
		}
	}
	[Token(Token = "0x2000284")]
	public class SettingsManager : MonoSingleton<SettingsManager>
	{
		[Token(Token = "0x2000285")]
		public enum VR_HandMat
		{
			[Token(Token = "0x4000FC9")]
			GLOVE_BLACK,
			[Token(Token = "0x4000FCA")]
			GLOVE_GRAY,
			[Token(Token = "0x4000FCB")]
			GLOVE_RED
		}

		[Token(Token = "0x2000286")]
		public enum PostProcess
		{
			[Token(Token = "0x4000FCD")]
			NONE,
			[Token(Token = "0x4000FCE")]
			BASIC,
			[Token(Token = "0x4000FCF")]
			BASIC_BLOOM
		}

		[Token(Token = "0x4000F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameBaseStats stats;

		[Token(Token = "0x4000F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameConfig config;

		[Token(Token = "0x4000F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public LocomotionType Locomotion;

		[Token(Token = "0x4000F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float sprintSpeed;

		[Token(Token = "0x4000F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public RotationMechanic rotationMechanic;

		[Token(Token = "0x4000F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float smoothTurnSpeed;

		[Token(Token = "0x4000F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float cameraYOffset;

		[Token(Token = "0x4000F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int lightCount;

		[Token(Token = "0x4000FA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int MSAA;

		[Token(Token = "0x4000FA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int TextureFiltering;

		[Token(Token = "0x4000FA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public ShadowQuality shadowQuality;

		[Token(Token = "0x4000FA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public ShadowResolution shadowResolution;

		[Token(Token = "0x4000FA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float shadowDistance;

		[Token(Token = "0x4000FA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Quality GlowQuality;

		[Token(Token = "0x4000FA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector2 GlowMinMax;

		[Token(Token = "0x4000FA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public PostProcess postProcess;

		[Token(Token = "0x4000FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject sunShafts;

		[Token(Token = "0x4000FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float SFX_Volume;

		[Token(Token = "0x4000FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float Music_Volume;

		[Token(Token = "0x4000FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool disableHDMStatesTracking;

		[Token(Token = "0x4000FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float eyeTextureScale;

		[Token(Token = "0x4000FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public bool enableExperimentalFeatures;

		[Token(Token = "0x4000FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		public bool KurosavaMode;

		[Token(Token = "0x4000FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static LocDATA Localisation;

		[Token(Token = "0x4000FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public int preset;

		[Token(Token = "0x4000FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public bool isLeftHanded;

		[Token(Token = "0x4000FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public VR_HandMat HandSelectedMaterial;

		[Token(Token = "0x4000FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Material[] handMaterials;

		[Token(Token = "0x4000FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public SO_AppSettingsDefaults customPC;

		[Token(Token = "0x4000FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public SO_AppSettingsDefaults customMobile;

		[Token(Token = "0x4000FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public SO_AppSettingsDefaults[] defSettings;

		[Token(Token = "0x4000FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool IsSettingLoaded;

		[Token(Token = "0x4000FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public AudioMixer AM_Sound;

		[Token(Token = "0x4000FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public AudioMixerSnapshot AMS_Normal;

		[Token(Token = "0x4000FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public AudioMixerSnapshot AMS_MenuPaused;

		[Token(Token = "0x4000FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public E_CUT_LEVEL SliceMasterLevel;

		[Token(Token = "0x4000FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public bool EquipKatana;

		[Token(Token = "0x4000FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD5")]
		public bool EquipBow;

		[Token(Token = "0x4000FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD6")]
		public bool OpenedFirstPortal;

		[Token(Token = "0x4000FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD7")]
		public bool OpenedSecondPortal;

		[Token(Token = "0x4000FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public bool CrossBowsUnlocked;

		[Token(Token = "0x4000FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[Range(10f, 30f)]
		public int lBoardMaxName;

		[Token(Token = "0x4000FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public Color[] cPlaceColor;

		[Token(Token = "0x4000FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public bool IsQuest2;

		[Token(Token = "0x4000FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		private VoidEvent _SettingsLoaded;

		[Token(Token = "0x4000FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Quest_FixMSAA QFAA;

		[Token(Token = "0x4000FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private bool _bGamePauseMenuVisible;

		[Token(Token = "0x4000FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x101")]
		public bool bLoadSettings;

		[Token(Token = "0x17000212")]
		private bool _IsHdmMounted
		{
			[Token(Token = "0x60012B5")]
			[Address(RVA = "0xB4438C", Offset = "0xB4438C", VA = "0xB4438C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60012B6")]
		[Address(RVA = "0xB443EC", Offset = "0xB443EC", VA = "0xB443EC")]
		public static LocDATA GetLC()
		{
			return null;
		}

		[Token(Token = "0x60012B7")]
		[Address(RVA = "0xB444B8", Offset = "0xB444B8", VA = "0xB444B8")]
		private void Start()
		{
		}

		[Token(Token = "0x60012B8")]
		[Address(RVA = "0xB44C2C", Offset = "0xB44C2C", VA = "0xB44C2C")]
		private void Update()
		{
		}

		[Token(Token = "0x60012B9")]
		[Address(RVA = "0xB44C58", Offset = "0xB44C58", VA = "0xB44C58")]
		private void ON_HMDMounted()
		{
		}

		[Token(Token = "0x60012BA")]
		[Address(RVA = "0xB44F30", Offset = "0xB44F30", VA = "0xB44F30")]
		private void ON_HMDUnMounted()
		{
		}

		[Token(Token = "0x60012BB")]
		[Address(RVA = "0xB4520C", Offset = "0xB4520C", VA = "0xB4520C")]
		public void ApplySettingsToApp()
		{
		}

		[Token(Token = "0x60012BC")]
		[Address(RVA = "0xB457E0", Offset = "0xB457E0", VA = "0xB457E0")]
		internal void SwapHandsMaterial()
		{
		}

		[Token(Token = "0x60012BD")]
		[Address(RVA = "0xB459A4", Offset = "0xB459A4", VA = "0xB459A4")]
		private void SetSettingsSavePath()
		{
		}

		[Token(Token = "0x60012BE")]
		[Address(RVA = "0xB44528", Offset = "0xB44528", VA = "0xB44528")]
		public void LoadSettings()
		{
		}

		[Token(Token = "0x60012BF")]
		[Address(RVA = "0xB45A38", Offset = "0xB45A38", VA = "0xB45A38")]
		public void SaveSettings()
		{
		}

		[Token(Token = "0x60012C0")]
		[Address(RVA = "0xB45E64", Offset = "0xB45E64", VA = "0xB45E64")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x60012C1")]
		[Address(RVA = "0xB45E68", Offset = "0xB45E68", VA = "0xB45E68")]
		public SettingsManager()
		{
		}
	}
	[Token(Token = "0x2000287")]
	public class IO_HandTextureSwitcher : MonoBehaviour
	{
		[Token(Token = "0x4000FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rotSpeed;

		[Token(Token = "0x4000FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioSource ASource;

		[Token(Token = "0x4000FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SettingsManager.VR_HandMat SelectedMaterial;

		[Token(Token = "0x60012C2")]
		[Address(RVA = "0xB45F18", Offset = "0xB45F18", VA = "0xB45F18")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60012C3")]
		[Address(RVA = "0xB460B8", Offset = "0xB460B8", VA = "0xB460B8")]
		private void Update()
		{
		}

		[Token(Token = "0x60012C4")]
		[Address(RVA = "0xB46104", Offset = "0xB46104", VA = "0xB46104")]
		public IO_HandTextureSwitcher()
		{
		}
	}
	[Token(Token = "0x2000288")]
	[CreateAssetMenu(fileName = "New Localization DB", menuName = "VRKemono/Localization DB")]
	public class LocDATA : ScriptableObject
	{
		[Serializable]
		[Token(Token = "0x2000289")]
		public struct LocLanguage
		{
			[Token(Token = "0x4000FDB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			[SerializeField]
			public string ID;

			[Token(Token = "0x4000FDC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			[SerializeField]
			[TextArea]
			public List<string> strData;

			[Token(Token = "0x60012CD")]
			[Address(RVA = "0xB46910", Offset = "0xB46910", VA = "0xB46910")]
			public LocLanguage(string pID, List<string> pData)
			{
			}
		}

		[Token(Token = "0x4000FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TMP_FontAsset UniFont;

		[Token(Token = "0x4000FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Font UniFontPure;

		[Token(Token = "0x4000FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextEvent SwitchLanguage;

		[Token(Token = "0x4000FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int currentLanguage;

		[Token(Token = "0x4000FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private IEnumerable CurrentLanguages;

		[Token(Token = "0x4000FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		public List<LocLanguage> DATA;

		[Token(Token = "0x4000FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string ENG_TEXT;

		[Token(Token = "0x4000FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string LOC_TEXT;

		[Token(Token = "0x60012C5")]
		[Address(RVA = "0xB4611C", Offset = "0xB4611C", VA = "0xB4611C")]
		public string IDtoLang(int language)
		{
			return null;
		}

		[Token(Token = "0x60012C6")]
		[Address(RVA = "0xB461AC", Offset = "0xB461AC", VA = "0xB461AC")]
		private void EVT_SwitchLanguage()
		{
		}

		[Token(Token = "0x60012C7")]
		[Address(RVA = "0xB46304", Offset = "0xB46304", VA = "0xB46304")]
		public string GetEngText(int Index)
		{
			return null;
		}

		[Token(Token = "0x60012C8")]
		[Address(RVA = "0xB46384", Offset = "0xB46384", VA = "0xB46384")]
		public int GetIndex(string sString)
		{
			return default(int);
		}

		[Token(Token = "0x60012C9")]
		[Address(RVA = "0xB46490", Offset = "0xB46490", VA = "0xB46490")]
		public IEnumerable LocText()
		{
			return null;
		}

		[Token(Token = "0x60012CA")]
		[Address(RVA = "0xB4655C", Offset = "0xB4655C", VA = "0xB4655C")]
		private void UpdateLocText()
		{
		}

		[Token(Token = "0x60012CB")]
		[Address(RVA = "0xB46568", Offset = "0xB46568", VA = "0xB46568")]
		public LocDATA()
		{
		}
	}
	[Token(Token = "0x200028B")]
	public class LocTextLabel : MonoBehaviour, IGameEventListener<(Vector3, string)>
	{
		[Token(Token = "0x4000FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string TEXT_ID;

		[Token(Token = "0x4000FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string TR_TEXT;

		[Token(Token = "0x4000FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Text _text;

		[Token(Token = "0x4000FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private TextMeshPro _tPro;

		[Token(Token = "0x4000FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private TextMeshProUGUI _tProGUI;

		[Token(Token = "0x4000FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private int _index;

		[Token(Token = "0x4000FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private TMP_FontAsset _SavedFont;

		[Token(Token = "0x4000FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Font _SavedFontPure;

		[Token(Token = "0x4000FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private OptionsManager _Options;

		[Token(Token = "0x4000FE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool bLateInit;

		[Token(Token = "0x4000FE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		public bool bFineTuneFont;

		[Token(Token = "0x4000FE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		public bool bIsOptions;

		[Token(Token = "0x4000FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<string> _OrigOptions;

		[Token(Token = "0x4000FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private List<int> _TranslatedIndexes;

		[Token(Token = "0x4000FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private TextMeshProUGUI[] _GoOptions;

		[Token(Token = "0x60012D0")]
		[Address(RVA = "0xB4698C", Offset = "0xB4698C", VA = "0xB4698C")]
		private string GetEngText(int Index)
		{
			return null;
		}

		[Token(Token = "0x60012D1")]
		[Address(RVA = "0xB46A10", Offset = "0xB46A10", VA = "0xB46A10")]
		private int GetIndex(string sString)
		{
			return default(int);
		}

		[Token(Token = "0x60012D2")]
		[Address(RVA = "0xB46B18", Offset = "0xB46B18", VA = "0xB46B18")]
		private IEnumerable LocText()
		{
			return null;
		}

		[Token(Token = "0x60012D3")]
		[Address(RVA = "0xB46BEC", Offset = "0xB46BEC", VA = "0xB46BEC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60012D4")]
		[Address(RVA = "0xB46E0C", Offset = "0xB46E0C", VA = "0xB46E0C")]
		public void CB_LoadOptions()
		{
		}

		[Token(Token = "0x60012D5")]
		[Address(RVA = "0xB474C8", Offset = "0xB474C8", VA = "0xB474C8")]
		internal string TypeTextInit(string textFind)
		{
			return null;
		}

		[Token(Token = "0x60012D6")]
		[Address(RVA = "0xB46D20", Offset = "0xB46D20", VA = "0xB46D20")]
		private void Init()
		{
		}

		[Token(Token = "0x60012D7")]
		[Address(RVA = "0xB47270", Offset = "0xB47270", VA = "0xB47270")]
		private void TranslateOptions()
		{
		}

		[Token(Token = "0x60012D8")]
		[Address(RVA = "0xB47698", Offset = "0xB47698", VA = "0xB47698")]
		private void UpdateLocText(GameObject cGO)
		{
		}

		[Token(Token = "0x60012D9")]
		[Address(RVA = "0xB47AB8", Offset = "0xB47AB8", VA = "0xB47AB8", Slot = "4")]
		public void OnEventRaised((Vector3, string) item)
		{
		}

		[Token(Token = "0x60012DA")]
		[Address(RVA = "0xB47AF0", Offset = "0xB47AF0", VA = "0xB47AF0")]
		public LocTextLabel()
		{
		}
	}
	[Token(Token = "0x200028F")]
	public class MessangerKunoichi : MonoBehaviour
	{
		[Token(Token = "0x4000FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject PF_VFX;

		[Token(Token = "0x4000FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject T_VFX;

		[Token(Token = "0x4000FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[TextArea(5, 10)]
		public string message;

		[Token(Token = "0x4000FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextEvent signalMessage;

		[Token(Token = "0x4000FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool MessageSent;

		[Token(Token = "0x4000FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float ActivateDelay;

		[Token(Token = "0x4000FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float AutoDeliverTimeot;

		[Token(Token = "0x4000FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public SkinnedMeshRenderer skMesh;

		[Token(Token = "0x4000FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject hat;

		[Token(Token = "0x4000FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject Scroll;

		[Token(Token = "0x4000FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject ActivatePrize;

		[Token(Token = "0x4000FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Animator anim;

		[Token(Token = "0x4000FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool bMasterLevelRequired;

		[Token(Token = "0x4000FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public E_CUT_LEVEL masterLevel;

		[Token(Token = "0x4000FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float _autoSentTime;

		[Token(Token = "0x60012E3")]
		[Address(RVA = "0xB47C94", Offset = "0xB47C94", VA = "0xB47C94")]
		private void Awake()
		{
		}

		[Token(Token = "0x60012E4")]
		[Address(RVA = "0xB47CF4", Offset = "0xB47CF4", VA = "0xB47CF4")]
		public void EVT_SettingsLoaded()
		{
		}

		[Token(Token = "0x60012E5")]
		[Address(RVA = "0xB47DF4", Offset = "0xB47DF4", VA = "0xB47DF4")]
		private void Start()
		{
		}

		[Token(Token = "0x60012E6")]
		[Address(RVA = "0xB47E70", Offset = "0xB47E70", VA = "0xB47E70")]
		private void I_Activate()
		{
		}

		[Token(Token = "0x60012E7")]
		[Address(RVA = "0xB48098", Offset = "0xB48098", VA = "0xB48098")]
		private void Update()
		{
		}

		[Token(Token = "0x60012E8")]
		[Address(RVA = "0xB480DC", Offset = "0xB480DC", VA = "0xB480DC")]
		private void ActivateMessage()
		{
		}

		[Token(Token = "0x60012E9")]
		[Address(RVA = "0xB482D8", Offset = "0xB482D8", VA = "0xB482D8")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60012EA")]
		[Address(RVA = "0xB48374", Offset = "0xB48374", VA = "0xB48374")]
		public MessangerKunoichi()
		{
		}
	}
	[Token(Token = "0x2000290")]
	public class PlayerMessageManager : MonoBehaviour
	{
		[Token(Token = "0x2000291")]
		[CompilerGenerated]
		private sealed class <CR_ShowScroll>d__3 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001001")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001002")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001003")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlayerMessageManager <>4__this;

			[Token(Token = "0x4001004")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 pos;

			[Token(Token = "0x4001005")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public string msg;

			[Token(Token = "0x17000213")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60012F1")]
				[Address(RVA = "0xB487D4", Offset = "0xB487D4", VA = "0xB487D4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000214")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60012F3")]
				[Address(RVA = "0xB4881C", Offset = "0xB4881C", VA = "0xB4881C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60012EE")]
			[Address(RVA = "0xB4844C", Offset = "0xB4844C", VA = "0xB4844C")]
			[DebuggerHidden]
			public <CR_ShowScroll>d__3(int <>1__state)
			{
			}

			[Token(Token = "0x60012EF")]
			[Address(RVA = "0xB4847C", Offset = "0xB4847C", VA = "0xB4847C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60012F0")]
			[Address(RVA = "0xB48480", Offset = "0xB48480", VA = "0xB48480", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60012F2")]
			[Address(RVA = "0xB487DC", Offset = "0xB487DC", VA = "0xB487DC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4000FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject MessageScroll;

		[Token(Token = "0x4001000")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TypeWriterEffect txtEffect;

		[Token(Token = "0x60012EB")]
		[Address(RVA = "0xB48384", Offset = "0xB48384", VA = "0xB48384")]
		public void EVT_OnPlayerMessage((Vector3 pos, string msg) sInfo)
		{
		}

		[Token(Token = "0x60012EC")]
		[Address(RVA = "0xB483B0", Offset = "0xB483B0", VA = "0xB483B0")]
		[IteratorStateMachine(typeof(<CR_ShowScroll>d__3))]
		private IEnumerator CR_ShowScroll(Vector3 pos, string msg)
		{
			return null;
		}

		[Token(Token = "0x60012ED")]
		[Address(RVA = "0xB48474", Offset = "0xB48474", VA = "0xB48474")]
		public PlayerMessageManager()
		{
		}
	}
	[Token(Token = "0x2000292")]
	public class TypeWriterEffect : MonoBehaviour
	{
		[Token(Token = "0x2000293")]
		[CompilerGenerated]
		private sealed class <RevealAll>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400100D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400100E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400100F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TypeWriterEffect <>4__this;

			[Token(Token = "0x17000216")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001303")]
				[Address(RVA = "0xB48F60", Offset = "0xB48F60", VA = "0xB48F60", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000217")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001305")]
				[Address(RVA = "0xB48FA8", Offset = "0xB48FA8", VA = "0xB48FA8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001300")]
			[Address(RVA = "0xB48984", Offset = "0xB48984", VA = "0xB48984")]
			[DebuggerHidden]
			public <RevealAll>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6001301")]
			[Address(RVA = "0xB48E8C", Offset = "0xB48E8C", VA = "0xB48E8C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001302")]
			[Address(RVA = "0xB48E90", Offset = "0xB48E90", VA = "0xB48E90", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001304")]
			[Address(RVA = "0xB48F68", Offset = "0xB48F68", VA = "0xB48F68", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000294")]
		[CompilerGenerated]
		private sealed class <RevealNextParagraph>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001010")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001011")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001012")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TypeWriterEffect <>4__this;

			[Token(Token = "0x4001013")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <paragraphEnd>5__2;

			[Token(Token = "0x4001014")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private float <keyChar>5__3;

			[Token(Token = "0x4001015")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <keyCharEnd>5__4;

			[Token(Token = "0x4001016")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <speed>5__5;

			[Token(Token = "0x4001017")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <secondsElapsed>5__6;

			[Token(Token = "0x17000218")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001309")]
				[Address(RVA = "0xB491FC", Offset = "0xB491FC", VA = "0xB491FC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000219")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600130B")]
				[Address(RVA = "0xB49244", Offset = "0xB49244", VA = "0xB49244", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001306")]
			[Address(RVA = "0xB48A14", Offset = "0xB48A14", VA = "0xB48A14")]
			[DebuggerHidden]
			public <RevealNextParagraph>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6001307")]
			[Address(RVA = "0xB48FB0", Offset = "0xB48FB0", VA = "0xB48FB0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001308")]
			[Address(RVA = "0xB48FB4", Offset = "0xB48FB4", VA = "0xB48FB4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600130A")]
			[Address(RVA = "0xB49204", Offset = "0xB49204", VA = "0xB49204", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Configuration")]
		public int numCharactersFade;

		[Token(Token = "0x4001007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float charsPerSecond;

		[Token(Token = "0x4001008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float smoothSeconds;

		[Token(Token = "0x4001009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("References")]
		public TextMeshPro text;

		[Token(Token = "0x400100A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private string originalString;

		[Token(Token = "0x400100B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int nRevealedCharacters;

		[Token(Token = "0x400100C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private bool isRevealing;

		[Token(Token = "0x17000215")]
		public bool IsRevealing
		{
			[Token(Token = "0x60012F5")]
			[Address(RVA = "0xB488CC", Offset = "0xB488CC", VA = "0xB488CC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60012F4")]
		[Address(RVA = "0xB48824", Offset = "0xB48824", VA = "0xB48824")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60012F6")]
		[Address(RVA = "0xB488D4", Offset = "0xB488D4", VA = "0xB488D4")]
		private void Restart()
		{
		}

		[Token(Token = "0x60012F7")]
		[Address(RVA = "0xB48960", Offset = "0xB48960", VA = "0xB48960")]
		private void I_AutoHide()
		{
		}

		[Token(Token = "0x60012F8")]
		[Address(RVA = "0xB486D8", Offset = "0xB486D8", VA = "0xB486D8")]
		public void RestartWithText(string strText)
		{
		}

		[Token(Token = "0x60012F9")]
		[Address(RVA = "0xB488F8", Offset = "0xB488F8", VA = "0xB488F8")]
		[IteratorStateMachine(typeof(<RevealAll>d__13))]
		private IEnumerator RevealAll()
		{
			return null;
		}

		[Token(Token = "0x60012FA")]
		[Address(RVA = "0xB489AC", Offset = "0xB489AC", VA = "0xB489AC")]
		[IteratorStateMachine(typeof(<RevealNextParagraph>d__14))]
		public IEnumerator RevealNextParagraph()
		{
			return null;
		}

		[Token(Token = "0x60012FB")]
		[Address(RVA = "0xB48A3C", Offset = "0xB48A3C", VA = "0xB48A3C")]
		public bool IsAllRevealed()
		{
			return default(bool);
		}

		[Token(Token = "0x60012FC")]
		[Address(RVA = "0xB48A64", Offset = "0xB48A64", VA = "0xB48A64")]
		private int GetNextParagraphEnd(int startingFrom)
		{
			return default(int);
		}

		[Token(Token = "0x60012FD")]
		[Address(RVA = "0xB48AB8", Offset = "0xB48AB8", VA = "0xB48AB8")]
		private string BuildPartiallyRevealedString(string original, float keyCharIndex, int minIndex, int maxIndex, int fadeLength)
		{
			return null;
		}

		[Token(Token = "0x60012FE")]
		[Address(RVA = "0xB48E18", Offset = "0xB48E18", VA = "0xB48E18")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60012FF")]
		[Address(RVA = "0xB48E70", Offset = "0xB48E70", VA = "0xB48E70")]
		public TypeWriterEffect()
		{
		}
	}
	[Token(Token = "0x2000295")]
	public class ArrowsPool : PoolManager<ArrowsPool, WEAP_Arrow>
	{
		[Token(Token = "0x600130C")]
		[Address(RVA = "0xB4924C", Offset = "0xB4924C", VA = "0xB4924C", Slot = "4")]
		protected override void CB_OnIniPoolItem(int index)
		{
		}

		[Token(Token = "0x600130D")]
		[Address(RVA = "0xB49320", Offset = "0xB49320", VA = "0xB49320", Slot = "5")]
		public override void BackToPool(int index)
		{
		}

		[Token(Token = "0x600130E")]
		[Address(RVA = "0xB49410", Offset = "0xB49410", VA = "0xB49410")]
		internal WEAP_Arrow GetByIndex(int Index)
		{
			return null;
		}

		[Token(Token = "0x600130F")]
		[Address(RVA = "0xB49468", Offset = "0xB49468", VA = "0xB49468")]
		public void EVT_Shoot((Transform arrow, Vector3 force, bool AI_mode, EN_Enemy_Archer archer, Vector3 tPos, Vector3 tVel, I_BowBase.eArrowType type) sInfo)
		{
		}

		[Token(Token = "0x6001310")]
		[Address(RVA = "0xB49814", Offset = "0xB49814", VA = "0xB49814")]
		public ArrowsPool()
		{
		}
	}
	[Token(Token = "0x2000296")]
	public class CipherWheel : MonoBehaviour
	{
		[Token(Token = "0x4001018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int ID;

		[Token(Token = "0x4001019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool bInitRandom;

		[Token(Token = "0x400101A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2 DecipherCode;

		[Token(Token = "0x400101B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float cCode;

		[Token(Token = "0x400101C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Renderer wRenderer;

		[Token(Token = "0x400101D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color UnlockColor;

		[Token(Token = "0x400101E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Color LockColor;

		[Token(Token = "0x400101F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float colorMult;

		[Token(Token = "0x4001020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public IntEvent _SicpherCracked;

		[Token(Token = "0x4001021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private MaterialPropertyBlock _mpb;

		[Token(Token = "0x6001311")]
		[Address(RVA = "0xB4985C", Offset = "0xB4985C", VA = "0xB4985C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001312")]
		[Address(RVA = "0xB49918", Offset = "0xB49918", VA = "0xB49918")]
		public void EVT_OnAngleChange(float pAngle)
		{
		}

		[Token(Token = "0x6001313")]
		[Address(RVA = "0xB49B84", Offset = "0xB49B84", VA = "0xB49B84")]
		public CipherWheel()
		{
		}
	}
	[Token(Token = "0x2000297")]
	public class CubeSpawnZone : MonoBehaviour
	{
		[Token(Token = "0x4001022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private bool surfaceOnly;

		[Token(Token = "0x1700021A")]
		public Vector3 SpawnPoint
		{
			[Token(Token = "0x6001314")]
			[Address(RVA = "0xB49BE4", Offset = "0xB49BE4", VA = "0xB49BE4")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x6001315")]
		[Address(RVA = "0xB49D38", Offset = "0xB49D38", VA = "0xB49D38")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6001316")]
		[Address(RVA = "0xB49E3C", Offset = "0xB49E3C", VA = "0xB49E3C")]
		public CubeSpawnZone()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000298")]
	public struct objArr
	{
		[Token(Token = "0x4001023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		public GameObject[] Items;
	}
	[Serializable]
	[Token(Token = "0x2000299")]
	public class UnlockItemsDictionary : Extensions.SerializableDictionary<E_CUT_LEVEL, objArr>
	{
		[Token(Token = "0x6001317")]
		[Address(RVA = "0xB49E44", Offset = "0xB49E44", VA = "0xB49E44")]
		public UnlockItemsDictionary()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200029A")]
	public enum E_CUT_LEVEL
	{
		[Token(Token = "0x4001025")]
		NEWBIE,
		[Token(Token = "0x4001026")]
		BRONZE,
		[Token(Token = "0x4001027")]
		SILVER,
		[Token(Token = "0x4001028")]
		GOLD,
		[Token(Token = "0x4001029")]
		JADE
	}
	[Token(Token = "0x200029B")]
	public class Kendo_CutChallenge : MonoBehaviour, IGameEventListener<(Vector3, string)>
	{
		[Token(Token = "0x400102A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public E_CUT_LEVEL Level;

		[Token(Token = "0x400102B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnlockItemsDictionary UnlockByCutLevel;

		[Token(Token = "0x400102C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float sliceMaxLength;

		[Token(Token = "0x400102D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextMeshPro ScoreText;

		[Token(Token = "0x400102E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject PF_CutBamboo;

		[Token(Token = "0x400102F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform TR_Center;

		[Token(Token = "0x4001030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject GoldDoorSign;

		[Token(Token = "0x4001031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject JadeDoorSign;

		[Token(Token = "0x4001032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject[] PF_Cuttables;

		[Token(Token = "0x4001033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject[] Inst_Cuttables;

		[Token(Token = "0x4001034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public TextEvent _evtAchvievment;

		[Token(Token = "0x4001035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public AudioSource SFX_Win;

		[Token(Token = "0x4001036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public AudioSource SFX_Fail;

		[Token(Token = "0x4001037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public ParticleSystem VFX_Win;

		[Token(Token = "0x4001038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<GameObject> _spawnBamboos;

		[Token(Token = "0x4001039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private HashSet<int> _sliceCache;

		[Token(Token = "0x400103A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float _sliceEndTime;

		[Token(Token = "0x400103B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private bool _bCanSliceAgain;

		[Token(Token = "0x400103C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public string TR_TEXT_NONE;

		[Token(Token = "0x400103D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public string TR_TEXT_BRONZE;

		[Token(Token = "0x400103E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public string TR_TEXT_SILVER;

		[Token(Token = "0x400103F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public string TR_TEXT_GOLD;

		[Token(Token = "0x4001040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public string TR_TEXT_JADE;

		[Token(Token = "0x4001041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private TMP_FontAsset _SavedFont;

		[Token(Token = "0x6001318")]
		[Address(RVA = "0xB49E8C", Offset = "0xB49E8C", VA = "0xB49E8C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001319")]
		[Address(RVA = "0xB49FB4", Offset = "0xB49FB4", VA = "0xB49FB4")]
		public void EVT_ONSettingsLoaded()
		{
		}

		[Token(Token = "0x600131A")]
		[Address(RVA = "0xB4AC64", Offset = "0xB4AC64", VA = "0xB4AC64")]
		public void EVT_OnSliceStart()
		{
		}

		[Token(Token = "0x600131B")]
		[Address(RVA = "0xB4ACF0", Offset = "0xB4ACF0", VA = "0xB4ACF0")]
		public void EVT_OnSlice(int bambooID)
		{
		}

		[Token(Token = "0x600131C")]
		[Address(RVA = "0xB4ADB4", Offset = "0xB4ADB4", VA = "0xB4ADB4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600131D")]
		[Address(RVA = "0xB4ADF4", Offset = "0xB4ADF4", VA = "0xB4ADF4")]
		public void AnalyzeSliceResults()
		{
		}

		[Token(Token = "0x600131E")]
		[Address(RVA = "0xB4B130", Offset = "0xB4B130", VA = "0xB4B130")]
		private void UnclockLevelItems(E_CUT_LEVEL pLevel)
		{
		}

		[Token(Token = "0x600131F")]
		[Address(RVA = "0xB4B204", Offset = "0xB4B204", VA = "0xB4B204", Slot = "4")]
		public void OnEventRaised((Vector3, string) item)
		{
		}

		[Token(Token = "0x6001320")]
		[Address(RVA = "0xB4B208", Offset = "0xB4B208", VA = "0xB4B208")]
		private int GetIndex(string sString)
		{
			return default(int);
		}

		[Token(Token = "0x6001321")]
		[Address(RVA = "0xB4B310", Offset = "0xB4B310", VA = "0xB4B310")]
		private string GetEngText(int Index)
		{
			return null;
		}

		[Token(Token = "0x6001322")]
		[Address(RVA = "0xB4B394", Offset = "0xB4B394", VA = "0xB4B394")]
		private IEnumerable LocText()
		{
			return null;
		}

		[Token(Token = "0x6001323")]
		[Address(RVA = "0xB4A048", Offset = "0xB4A048", VA = "0xB4A048")]
		private void UpdateSliceLevel()
		{
		}

		[Token(Token = "0x6001324")]
		[Address(RVA = "0xB4A6A0", Offset = "0xB4A6A0", VA = "0xB4A6A0")]
		public void EVT_RefreshLevel()
		{
		}

		[Token(Token = "0x6001325")]
		[Address(RVA = "0xB4A824", Offset = "0xB4A824", VA = "0xB4A824")]
		public void RespawnBamboos()
		{
		}

		[Token(Token = "0x6001326")]
		[Address(RVA = "0xB4B468", Offset = "0xB4B468", VA = "0xB4B468")]
		public Kendo_CutChallenge()
		{
		}
	}
	[Token(Token = "0x200029D")]
	public class EnemySpawner : MonoBehaviour
	{
		[Token(Token = "0x4001043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SpawnedEnemiesDATA BT_SpawnQueue;

		[Token(Token = "0x4001044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ActiveEnemiesValue BT_SpawnEnemies;

		[Token(Token = "0x4001045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public WaveDataValue BT_CurrentWave;

		[Token(Token = "0x4001046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private SplinesDictionary _instSplines;

		[Token(Token = "0x4001047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int _enemyIndex;

		[Token(Token = "0x600132F")]
		[Address(RVA = "0xB4B71C", Offset = "0xB4B71C", VA = "0xB4B71C")]
		private bool IsSplineInstantiated(string splineKey)
		{
			return default(bool);
		}

		[Token(Token = "0x6001330")]
		[Address(RVA = "0xB4B774", Offset = "0xB4B774", VA = "0xB4B774")]
		private void AddSplineInstance(string splineKey, GameObject pfInstance)
		{
		}

		[Token(Token = "0x6001331")]
		[Address(RVA = "0xB4B7DC", Offset = "0xB4B7DC", VA = "0xB4B7DC")]
		private GameObject GetSplineInstance(string splineKey)
		{
			return null;
		}

		[Token(Token = "0x6001332")]
		[Address(RVA = "0xB4B834", Offset = "0xB4B834", VA = "0xB4B834")]
		public void EVT_ON_WaveStart()
		{
		}

		[Token(Token = "0x6001333")]
		[Address(RVA = "0xB4B8B0", Offset = "0xB4B8B0", VA = "0xB4B8B0")]
		public void EVT_ON_SpawnRequest_Pos((GameObject prefab, Vector3 pos) spawnInfo)
		{
		}

		[Token(Token = "0x6001334")]
		[Address(RVA = "0xB4BA60", Offset = "0xB4BA60", VA = "0xB4BA60")]
		public void EVT_ON_SpawnRequest((GameObject prefab, float spawnDelay, bool bRespawn) spawnInfo)
		{
		}

		[Token(Token = "0x6001335")]
		[Address(RVA = "0xB4C010", Offset = "0xB4C010", VA = "0xB4C010")]
		public EnemySpawner()
		{
		}
	}
	[Token(Token = "0x200029E")]
	public class EN_AnimationDispatcher : MonoBehaviour
	{
		[Token(Token = "0x4001048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject Arrow;

		[Token(Token = "0x4001049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public EN_Enemy_Archer archer;

		[Token(Token = "0x6001336")]
		[Address(RVA = "0xB4C078", Offset = "0xB4C078", VA = "0xB4C078")]
		public void AC_DrawArrow()
		{
		}

		[Token(Token = "0x6001337")]
		[Address(RVA = "0xB4C0C8", Offset = "0xB4C0C8", VA = "0xB4C0C8")]
		public void AC_ShootArrow()
		{
		}

		[Token(Token = "0x6001338")]
		[Address(RVA = "0xB4C2D8", Offset = "0xB4C2D8", VA = "0xB4C2D8")]
		public void ANIM_PostShoot()
		{
		}

		[Token(Token = "0x6001339")]
		[Address(RVA = "0xB4C310", Offset = "0xB4C310", VA = "0xB4C310")]
		public EN_AnimationDispatcher()
		{
		}
	}
	[Token(Token = "0x200029F")]
	public class EN_BowTarget : I_WaveEnemy
	{
		[Token(Token = "0x20002A0")]
		[CompilerGenerated]
		private sealed class <CR_Destroy>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001050")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001051")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001052")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public EN_BowTarget <>4__this;

			[Token(Token = "0x1700021B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001345")]
				[Address(RVA = "0xB4CB7C", Offset = "0xB4CB7C", VA = "0xB4CB7C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700021C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001347")]
				[Address(RVA = "0xB4CBC4", Offset = "0xB4CBC4", VA = "0xB4CBC4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001342")]
			[Address(RVA = "0xB4C68C", Offset = "0xB4C68C", VA = "0xB4C68C")]
			[DebuggerHidden]
			public <CR_Destroy>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x6001343")]
			[Address(RVA = "0xB4C884", Offset = "0xB4C884", VA = "0xB4C884", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001344")]
			[Address(RVA = "0xB4C888", Offset = "0xB4C888", VA = "0xB4C888", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001346")]
			[Address(RVA = "0xB4CB84", Offset = "0xB4CB84", VA = "0xB4CB84", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400104A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private Transform T_Center;

		[Token(Token = "0x400104B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private List<Vector2> _Dist2Prize;

		[Token(Token = "0x400104C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private int _PrizeScore;

		[Token(Token = "0x400104D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 _scorePos;

		[Token(Token = "0x400104E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private ScoreEvent _scoreEvent;

		[Token(Token = "0x400104F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float Radius;

		[Token(Token = "0x600133A")]
		[Address(RVA = "0xB4C318", Offset = "0xB4C318", VA = "0xB4C318")]
		public void CalcScore(Vector3 hPoint)
		{
		}

		[Token(Token = "0x600133B")]
		[Address(RVA = "0xB4C50C", Offset = "0xB4C50C", VA = "0xB4C50C")]
		private void DESTROY()
		{
		}

		[Token(Token = "0x600133C")]
		[Address(RVA = "0xB4C590", Offset = "0xB4C590", VA = "0xB4C590", Slot = "8")]
		public override void EVT_OnArrowHit(RaycastHit hit, GameObject arrow)
		{
		}

		[Token(Token = "0x600133D")]
		[Address(RVA = "0xB4C624", Offset = "0xB4C624", VA = "0xB4C624")]
		[IteratorStateMachine(typeof(<CR_Destroy>d__8))]
		private IEnumerator CR_Destroy()
		{
			return null;
		}

		[Token(Token = "0x600133E")]
		[Address(RVA = "0xB4C6B4", Offset = "0xB4C6B4", VA = "0xB4C6B4", Slot = "6")]
		public override void ON_Init()
		{
		}

		[Token(Token = "0x600133F")]
		[Address(RVA = "0xB4C7B0", Offset = "0xB4C7B0", VA = "0xB4C7B0", Slot = "7")]
		public override void ON_Update()
		{
		}

		[Token(Token = "0x6001340")]
		[Address(RVA = "0xB4C7B8", Offset = "0xB4C7B8", VA = "0xB4C7B8")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001341")]
		[Address(RVA = "0xB4C7FC", Offset = "0xB4C7FC", VA = "0xB4C7FC")]
		public EN_BowTarget()
		{
		}
	}
	[Token(Token = "0x20002A1")]
	public class EN_EnemyONE : EN_EnemyZERO
	{
		[Token(Token = "0x20002A2")]
		[CompilerGenerated]
		private sealed class <CR_DoAttack>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001056")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001057")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001058")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public EN_EnemyONE <>4__this;

			[Token(Token = "0x1700021E")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001356")]
				[Address(RVA = "0xB4D798", Offset = "0xB4D798", VA = "0xB4D798", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700021F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001358")]
				[Address(RVA = "0xB4D7E0", Offset = "0xB4D7E0", VA = "0xB4D7E0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001353")]
			[Address(RVA = "0xB4D310", Offset = "0xB4D310", VA = "0xB4D310")]
			[DebuggerHidden]
			public <CR_DoAttack>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x6001354")]
			[Address(RVA = "0xB4D3A4", Offset = "0xB4D3A4", VA = "0xB4D3A4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001355")]
			[Address(RVA = "0xB4D3A8", Offset = "0xB4D3A8", VA = "0xB4D3A8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001357")]
			[Address(RVA = "0xB4D7A0", Offset = "0xB4D7A0", VA = "0xB4D7A0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Transform[] Shurikens;

		[Token(Token = "0x4001054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Animator Anim;

		[Token(Token = "0x4001055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float _nextAttackTime;

		[Token(Token = "0x1700021D")]
		private bool _isAttackTime
		{
			[Token(Token = "0x6001348")]
			[Address(RVA = "0xB4CBCC", Offset = "0xB4CBCC", VA = "0xB4CBCC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001349")]
		[Address(RVA = "0xB4CBF0", Offset = "0xB4CBF0", VA = "0xB4CBF0", Slot = "6")]
		public override void ON_Init()
		{
		}

		[Token(Token = "0x600134A")]
		[Address(RVA = "0xB4CCD4", Offset = "0xB4CCD4", VA = "0xB4CCD4")]
		private void UpdateNextAttackTime()
		{
		}

		[Token(Token = "0x600134B")]
		[Address(RVA = "0xB4CD1C", Offset = "0xB4CD1C", VA = "0xB4CD1C", Slot = "7")]
		public override void ON_Update()
		{
		}

		[Token(Token = "0x600134C")]
		[Address(RVA = "0xB4CE34", Offset = "0xB4CE34", VA = "0xB4CE34", Slot = "10")]
		protected override void CBV_ONDestroy()
		{
		}

		[Token(Token = "0x600134D")]
		[Address(RVA = "0xB4CFF4", Offset = "0xB4CFF4", VA = "0xB4CFF4")]
		private void SpawnShurikens(Transform[] trSh, int shurikenNum = 8)
		{
		}

		[Token(Token = "0x600134E")]
		[Address(RVA = "0xB4CE50", Offset = "0xB4CE50", VA = "0xB4CE50")]
		private void DestroyShurikerns(Transform[] trSh)
		{
		}

		[Token(Token = "0x600134F")]
		[Address(RVA = "0xB4D308", Offset = "0xB4D308", VA = "0xB4D308", Slot = "11")]
		protected virtual void VCB_BeforeAttack()
		{
		}

		[Token(Token = "0x6001350")]
		[Address(RVA = "0xB4D30C", Offset = "0xB4D30C", VA = "0xB4D30C", Slot = "12")]
		protected virtual void VCB_AfterAttack()
		{
		}

		[Token(Token = "0x6001351")]
		[Address(RVA = "0xB4CDCC", Offset = "0xB4CDCC", VA = "0xB4CDCC")]
		[IteratorStateMachine(typeof(<CR_DoAttack>d__13))]
		private IEnumerator CR_DoAttack()
		{
			return null;
		}

		[Token(Token = "0x6001352")]
		[Address(RVA = "0xB4D338", Offset = "0xB4D338", VA = "0xB4D338")]
		public EN_EnemyONE()
		{
		}
	}
	[Token(Token = "0x20002A3")]
	public class EN_EnemyONE_Move : EN_EnemyONE
	{
		[Token(Token = "0x4001059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public SplineController Controller;

		[Token(Token = "0x6001359")]
		[Address(RVA = "0xB4D7E8", Offset = "0xB4D7E8", VA = "0xB4D7E8", Slot = "11")]
		protected override void VCB_BeforeAttack()
		{
		}

		[Token(Token = "0x600135A")]
		[Address(RVA = "0xB4D808", Offset = "0xB4D808", VA = "0xB4D808", Slot = "12")]
		protected override void VCB_AfterAttack()
		{
		}

		[Token(Token = "0x600135B")]
		[Address(RVA = "0xB4D828", Offset = "0xB4D828", VA = "0xB4D828")]
		public EN_EnemyONE_Move()
		{
		}
	}
	[Token(Token = "0x20002A4")]
	public class EN_EnemyZERO : I_WaveEnemy
	{
		[Token(Token = "0x400105A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public int PrizeScore;

		[Token(Token = "0x400105B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float RotationSpeed;

		[Token(Token = "0x400105C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Vector3 AimCorrection;

		[Token(Token = "0x400105D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Renderer _renderer;

		[Token(Token = "0x400105E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private MaterialPropertyBlock _block;

		[Token(Token = "0x400105F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 _scorePos;

		[Token(Token = "0x4001060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[SerializeField]
		protected ShurikenEvent _shEvent;

		[Token(Token = "0x4001061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private ScoreEvent _scoreEvent;

		[Token(Token = "0x600135C")]
		[Address(RVA = "0xB4CC3C", Offset = "0xB4CC3C", VA = "0xB4CC3C", Slot = "6")]
		public override void ON_Init()
		{
		}

		[Token(Token = "0x600135D")]
		[Address(RVA = "0xB4D82C", Offset = "0xB4D82C", VA = "0xB4D82C", Slot = "7")]
		public override void ON_Update()
		{
		}

		[Token(Token = "0x600135E")]
		[Address(RVA = "0xB4D690", Offset = "0xB4D690", VA = "0xB4D690")]
		protected void SetEmmisionBrightness(float pBrightness)
		{
		}

		[Token(Token = "0x600135F")]
		[Address(RVA = "0xB4D874", Offset = "0xB4D874", VA = "0xB4D874")]
		private void DESTROY()
		{
		}

		[Token(Token = "0x6001360")]
		[Address(RVA = "0xB4D8F8", Offset = "0xB4D8F8", VA = "0xB4D8F8", Slot = "8")]
		public override void EVT_OnArrowHit(RaycastHit hit, GameObject arrow)
		{
		}

		[Token(Token = "0x6001361")]
		[Address(RVA = "0xB4DC84", Offset = "0xB4DC84", VA = "0xB4DC84")]
		private void ThrowDeathShuriken(Vector2 devAngles)
		{
		}

		[Token(Token = "0x6001362")]
		[Address(RVA = "0xB4CF2C", Offset = "0xB4CF2C", VA = "0xB4CF2C", Slot = "10")]
		protected virtual void CBV_ONDestroy()
		{
		}

		[Token(Token = "0x6001363")]
		[Address(RVA = "0xB4D33C", Offset = "0xB4D33C", VA = "0xB4D33C")]
		public EN_EnemyZERO()
		{
		}
	}
	[Token(Token = "0x20002A5")]
	public class EN_Enemy_Archer : I_HumanEnemy
	{
		[Token(Token = "0x4001062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Transform ArrowDirection;

		[Token(Token = "0x4001063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public GameObject PF_Arrow;

		[Token(Token = "0x4001064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Transform T_Ninja;

		[Token(Token = "0x4001065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public AimIK aimIK;

		[Token(Token = "0x4001066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private float _accuracyKoef;

		[Token(Token = "0x4001067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private CharacterController _charController;

		[Token(Token = "0x4001068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Vector3 _targetVelocity;

		[Token(Token = "0x4001069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Transform _target;

		[Token(Token = "0x400106A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected Quaternion _destRot;

		[Token(Token = "0x400106B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private int _deadAnimIDHash;

		[Token(Token = "0x400106C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		private int _isDeadHash;

		[Token(Token = "0x400106D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[SerializeField]
		private Animator _anim;

		[Token(Token = "0x400106E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public ScoreEvent OnShowEvent;

		[Token(Token = "0x400106F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[SerializeField]
		protected ArrowEvent evtArrowShoot;

		[Token(Token = "0x6001364")]
		[Address(RVA = "0xB4DDE8", Offset = "0xB4DDE8", VA = "0xB4DDE8")]
		private void DO_DAMAGE()
		{
		}

		[Token(Token = "0x6001365")]
		[Address(RVA = "0xB4DE20", Offset = "0xB4DE20", VA = "0xB4DE20")]
		private bool FindRotationToPlayer()
		{
			return default(bool);
		}

		[Token(Token = "0x6001366")]
		[Address(RVA = "0xB4DFE4", Offset = "0xB4DFE4", VA = "0xB4DFE4")]
		private void CorrectPlayerRotation()
		{
		}

		[Token(Token = "0x6001367")]
		[Address(RVA = "0xB4E16C", Offset = "0xB4E16C", VA = "0xB4E16C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001368")]
		[Address(RVA = "0xB4C0F8", Offset = "0xB4C0F8", VA = "0xB4C0F8")]
		public void AC_ShootArrow()
		{
		}

		[Token(Token = "0x6001369")]
		[Address(RVA = "0xB4E170", Offset = "0xB4E170", VA = "0xB4E170")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x600136A")]
		[Address(RVA = "0xB4E274", Offset = "0xB4E274", VA = "0xB4E274")]
		public void ON_PlayerHitReaction()
		{
		}

		[Token(Token = "0x600136B")]
		[Address(RVA = "0xB4E328", Offset = "0xB4E328", VA = "0xB4E328", Slot = "6")]
		public override void ON_Init()
		{
		}

		[Token(Token = "0x600136C")]
		[Address(RVA = "0xB4E4F8", Offset = "0xB4E4F8", VA = "0xB4E4F8", Slot = "8")]
		public override void EVT_OnArrowHit(RaycastHit hit, GameObject pArrow)
		{
		}

		[Token(Token = "0x600136D")]
		[Address(RVA = "0xB4C0A8", Offset = "0xB4C0A8", VA = "0xB4C0A8")]
		internal void ANC_PreShoot()
		{
		}

		[Token(Token = "0x600136E")]
		[Address(RVA = "0xB4C2F0", Offset = "0xB4C2F0", VA = "0xB4C2F0")]
		internal void ANC_PostShoot()
		{
		}

		[Token(Token = "0x600136F")]
		[Address(RVA = "0xB4ED2C", Offset = "0xB4ED2C", VA = "0xB4ED2C")]
		private void DestroyArcher()
		{
		}

		[Token(Token = "0x6001370")]
		[Address(RVA = "0xB4E3E0", Offset = "0xB4E3E0", VA = "0xB4E3E0")]
		private void SetupByLevel()
		{
		}

		[Token(Token = "0x6001371")]
		[Address(RVA = "0xB4EE84", Offset = "0xB4EE84", VA = "0xB4EE84")]
		private void I_Shoot()
		{
		}

		[Token(Token = "0x6001372")]
		[Address(RVA = "0xB4EED8", Offset = "0xB4EED8", VA = "0xB4EED8", Slot = "7")]
		public override void ON_Update()
		{
		}

		[Token(Token = "0x6001373")]
		[Address(RVA = "0xB4EEE0", Offset = "0xB4EEE0", VA = "0xB4EEE0")]
		public EN_Enemy_Archer()
		{
		}
	}
	[Token(Token = "0x20002A6")]
	public class EN_NinjaBlack : I_HumanMovableEnemy
	{
		[Token(Token = "0x20002A7")]
		public enum ATTACK_TYPE
		{
			[Token(Token = "0x4001083")]
			NONE,
			[Token(Token = "0x4001084")]
			KATANA,
			[Token(Token = "0x4001085")]
			SHURIKEN
		}

		[Token(Token = "0x4001070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public SkinnedMeshRenderer renNinja;

		[Token(Token = "0x4001071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Transform T_RightHand;

		[Token(Token = "0x4001072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public int ENemySpawnNum;

		[Token(Token = "0x4001073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public GameObject PF_EnemySpawn;

		[Token(Token = "0x4001074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public LookAtIK lookAt;

		[Token(Token = "0x4001075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public RangeSensor rangeSensor;

		[Token(Token = "0x4001076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public GameObject katana;

		[Token(Token = "0x4001077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public GameObject mask;

		[Token(Token = "0x4001078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public GameObject mask10;

		[Token(Token = "0x4001079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public ShurikenEvent OnShurikenThrowRequest;

		[Token(Token = "0x400107A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public ScoreEvent OnShowEvent;

		[Token(Token = "0x400107B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public UnityEvent OnDeathAnimEnd;

		[Token(Token = "0x400107C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public UnityEvent OnShurikenThrow;

		[Token(Token = "0x400107D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[HideInInspector]
		public RaycastHit hit;

		[Token(Token = "0x400107E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[HideInInspector]
		public GameObject arrow;

		[Token(Token = "0x400107F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private AI_StateMachine _StateMachine;

		[Token(Token = "0x4001080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[HideInInspector]
		public string overrideHitBone;

		[Token(Token = "0x4001081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[HideInInspector]
		public ATTACK_TYPE attackType;

		[Token(Token = "0x6001374")]
		[Address(RVA = "0xB4EF70", Offset = "0xB4EF70", VA = "0xB4EF70", Slot = "6")]
		public override void ON_Init()
		{
		}

		[Token(Token = "0x6001375")]
		[Address(RVA = "0xB4F00C", Offset = "0xB4F00C", VA = "0xB4F00C")]
		public void EVT_DetectedPlayer()
		{
		}

		[Token(Token = "0x6001376")]
		[Address(RVA = "0xB4F0A8", Offset = "0xB4F0A8", VA = "0xB4F0A8")]
		public void EVT_OnLostPlayer()
		{
		}

		[Token(Token = "0x6001377")]
		[Address(RVA = "0xB4F144", Offset = "0xB4F144", VA = "0xB4F144", Slot = "8")]
		public override void EVT_OnArrowHit(RaycastHit pHit, GameObject pArrow)
		{
		}

		[Token(Token = "0x6001378")]
		[Address(RVA = "0xB4F214", Offset = "0xB4F214", VA = "0xB4F214")]
		public void EVT_OnDeath()
		{
		}

		[Token(Token = "0x6001379")]
		[Address(RVA = "0xB4F218", Offset = "0xB4F218", VA = "0xB4F218", Slot = "9")]
		public override void EVT_OnMeleeHit(Collider boneHit)
		{
		}

		[Token(Token = "0x600137A")]
		[Address(RVA = "0xB4F75C", Offset = "0xB4F75C", VA = "0xB4F75C")]
		public void ANIM_UnsheatheKatana()
		{
		}

		[Token(Token = "0x600137B")]
		[Address(RVA = "0xB4F760", Offset = "0xB4F760", VA = "0xB4F760")]
		public void ANIM_IKEvent()
		{
		}

		[Token(Token = "0x600137C")]
		[Address(RVA = "0xB4F788", Offset = "0xB4F788", VA = "0xB4F788")]
		public void ANIM_AnimatorMove()
		{
		}

		[Token(Token = "0x600137D")]
		[Address(RVA = "0xB4F78C", Offset = "0xB4F78C", VA = "0xB4F78C")]
		public void ANIM_OnBodyFalldown()
		{
		}

		[Token(Token = "0x600137E")]
		[Address(RVA = "0xB4F840", Offset = "0xB4F840", VA = "0xB4F840")]
		public void ANIM_OnDeathAnimEnd()
		{
		}

		[Token(Token = "0x600137F")]
		[Address(RVA = "0xB4F854", Offset = "0xB4F854", VA = "0xB4F854")]
		public void ANIM_OnAttackStart()
		{
		}

		[Token(Token = "0x6001380")]
		[Address(RVA = "0xB4F858", Offset = "0xB4F858", VA = "0xB4F858")]
		public void ANIM_ThrowShuriken()
		{
		}

		[Token(Token = "0x6001381")]
		[Address(RVA = "0xB4F86C", Offset = "0xB4F86C", VA = "0xB4F86C")]
		public EN_NinjaBlack()
		{
		}
	}
	[Token(Token = "0x20002A8")]
	public class GuardElectricTower : MonoBehaviour
	{
		[Token(Token = "0x6001382")]
		[Address(RVA = "0xB4F8C4", Offset = "0xB4F8C4", VA = "0xB4F8C4")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001383")]
		[Address(RVA = "0xB4F96C", Offset = "0xB4F96C", VA = "0xB4F96C")]
		public GuardElectricTower()
		{
		}
	}
	[Token(Token = "0x20002A9")]
	public class I_HumanEnemy : I_WaveEnemy
	{
		[Token(Token = "0x4001086")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public string SFX_Reaction;

		[Token(Token = "0x4001087")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public string SFX_Death;

		[Token(Token = "0x4001088")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Transform Target;

		[Token(Token = "0x4001089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public PuppetMaster pMaster;

		[Token(Token = "0x400108A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public HitReaction hReaction;

		[Token(Token = "0x400108B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Animator Anim;

		[Token(Token = "0x400108C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public GameObject[] HideGO;

		[Token(Token = "0x6001384")]
		[Address(RVA = "0xB4F974", Offset = "0xB4F974", VA = "0xB4F974")]
		public void HideShow(bool bShow)
		{
		}

		[Token(Token = "0x6001385")]
		[Address(RVA = "0xB4F9DC", Offset = "0xB4F9DC", VA = "0xB4F9DC", Slot = "8")]
		public override void EVT_OnArrowHit(RaycastHit hit, GameObject arrow)
		{
		}

		[Token(Token = "0x6001386")]
		[Address(RVA = "0xB4F9E0", Offset = "0xB4F9E0", VA = "0xB4F9E0", Slot = "6")]
		public override void ON_Init()
		{
		}

		[Token(Token = "0x6001387")]
		[Address(RVA = "0xB4F9E4", Offset = "0xB4F9E4", VA = "0xB4F9E4", Slot = "7")]
		public override void ON_Update()
		{
		}

		[Token(Token = "0x6001388")]
		[Address(RVA = "0xB4F9E8", Offset = "0xB4F9E8", VA = "0xB4F9E8")]
		public I_HumanEnemy()
		{
		}
	}
	[Token(Token = "0x20002AA")]
	public class I_HumanMovableEnemy : I_HumanEnemy
	{
		[Token(Token = "0x400108D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public CharacterController charController;

		[Token(Token = "0x400108E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public NavMeshAgent agent;

		[Token(Token = "0x6001389")]
		[Address(RVA = "0xB4F8C0", Offset = "0xB4F8C0", VA = "0xB4F8C0")]
		public I_HumanMovableEnemy()
		{
		}
	}
	[Token(Token = "0x20002AB")]
	public abstract class I_WaveEnemy : MonoBehaviour
	{
		[Token(Token = "0x400108F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int health;

		[Token(Token = "0x4001090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int Level;

		[Token(Token = "0x4001091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool config;

		[Token(Token = "0x4001092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int min;

		[Token(Token = "0x4001093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int max;

		[Token(Token = "0x4001094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string SFX_spawnSound;

		[Token(Token = "0x4001095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public float AttackInterval;

		[Token(Token = "0x4001096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public (GameObject prefab, float spawnDelay, bool bRespawn) spawnInfo;

		[Token(Token = "0x4001097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FBKEvent OnFBKEvent;

		[Token(Token = "0x4001098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public EnemySpawnEvent _On_EnemySpawnRequest;

		[Token(Token = "0x4001099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public PrefabSpawnEvent _On_PrefabSpawnRequest;

		[Token(Token = "0x400109A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		protected SpawnedEnemiesDATA spDATA;

		[Token(Token = "0x400109B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private IntEvent _playerScoreSignal;

		[Token(Token = "0x17000220")]
		protected bool IsDead
		{
			[Token(Token = "0x600138C")]
			[Address(RVA = "0xB4F73C", Offset = "0xB4F73C", VA = "0xB4F73C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000221")]
		public int Health
		{
			[Token(Token = "0x600138E")]
			[Address(RVA = "0xB4FBB0", Offset = "0xB4FBB0", VA = "0xB4FBB0")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600138F")]
			[Address(RVA = "0xB4F74C", Offset = "0xB4F74C", VA = "0xB4F74C")]
			set
			{
			}
		}

		[Token(Token = "0x600138A")]
		[Address(RVA = "0xB4FA94", Offset = "0xB4FA94", VA = "0xB4FA94")]
		private Color GetHealthColor()
		{
			return default(Color);
		}

		[Token(Token = "0x600138B")]
		[Address(RVA = "0xB4FB10", Offset = "0xB4FB10", VA = "0xB4FB10")]
		private Color GetLevelColor()
		{
			return default(Color);
		}

		[Token(Token = "0x600138D")]
		[Address(RVA = "0xB4FB58", Offset = "0xB4FB58", VA = "0xB4FB58")]
		public void UpdateScore(int addScore)
		{
		}

		[Token(Token = "0x6001390")]
		[Address(RVA = "0xB4FBB8", Offset = "0xB4FBB8", VA = "0xB4FBB8")]
		public void EVT_Kharakiri()
		{
		}

		[Token(Token = "0x6001391")]
		[Address(RVA = "0xB4FC84", Offset = "0xB4FC84", VA = "0xB4FC84")]
		private void Start()
		{
		}

		[Token(Token = "0x6001392")]
		[Address(RVA = "0xB4FD38", Offset = "0xB4FD38", VA = "0xB4FD38")]
		private void Update()
		{
		}

		[Token(Token = "0x6001393")]
		[Address(RVA = "0xB4FD44", Offset = "0xB4FD44", VA = "0xB4FD44", Slot = "4")]
		protected virtual void CB_HealthChanged()
		{
		}

		[Token(Token = "0x6001394")]
		[Address(RVA = "0xB4FD48", Offset = "0xB4FD48", VA = "0xB4FD48", Slot = "5")]
		public virtual bool CheckAvoidedArrow(Vector3 hPoint)
		{
			return default(bool);
		}

		[Token(Token = "0x6001395")]
		public abstract void ON_Init();

		[Token(Token = "0x6001396")]
		public abstract void ON_Update();

		[Token(Token = "0x6001397")]
		public abstract void EVT_OnArrowHit(RaycastHit hit, GameObject arrow);

		[Token(Token = "0x6001398")]
		[Address(RVA = "0xB4FD50", Offset = "0xB4FD50", VA = "0xB4FD50", Slot = "9")]
		public virtual void EVT_OnMeleeHit(Collider boneHit)
		{
		}

		[Token(Token = "0x6001399")]
		[Address(RVA = "0xB4FA34", Offset = "0xB4FA34", VA = "0xB4FA34")]
		protected I_WaveEnemy()
		{
		}
	}
	[Token(Token = "0x20002AC")]
	public class KyodoLevelSelector : MonoBehaviour
	{
		[Token(Token = "0x400109C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public BowTrainerManager BowTrainer;

		[Token(Token = "0x400109D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public WaveData[] Waves;

		[Token(Token = "0x400109E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int currentWave;

		[Token(Token = "0x400109F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextMeshPro txtLevel;

		[Token(Token = "0x600139A")]
		[Address(RVA = "0xB4FD54", Offset = "0xB4FD54", VA = "0xB4FD54")]
		private void Start()
		{
		}

		[Token(Token = "0x600139B")]
		[Address(RVA = "0xB4FDC4", Offset = "0xB4FDC4", VA = "0xB4FDC4")]
		public void EVT_OnBowGameStart()
		{
		}

		[Token(Token = "0x600139C")]
		[Address(RVA = "0xB4FDE8", Offset = "0xB4FDE8", VA = "0xB4FDE8")]
		public void EVT_OnPrevPress()
		{
		}

		[Token(Token = "0x600139D")]
		[Address(RVA = "0xB4FEA8", Offset = "0xB4FEA8", VA = "0xB4FEA8")]
		public void EVT_OnNextPress()
		{
		}

		[Token(Token = "0x600139E")]
		[Address(RVA = "0xB4FF74", Offset = "0xB4FF74", VA = "0xB4FF74")]
		public KyodoLevelSelector()
		{
		}
	}
	[Token(Token = "0x20002AD")]
	public class BowTrainingTarget : MonoBehaviour
	{
		[Token(Token = "0x40010A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int ScoreMult;

		[Token(Token = "0x40010A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform T_Center;

		[Token(Token = "0x40010A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform T_CameraTransform;

		[Token(Token = "0x40010A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextEvent _HitEvent;

		[Token(Token = "0x600139F")]
		[Address(RVA = "0xB4FF84", Offset = "0xB4FF84", VA = "0xB4FF84")]
		public void CalculateScore(Vector3 hitPoint)
		{
		}

		[Token(Token = "0x60013A0")]
		[Address(RVA = "0xB501C4", Offset = "0xB501C4", VA = "0xB501C4")]
		public BowTrainingTarget()
		{
		}
	}
	[Token(Token = "0x20002AE")]
	public class ExplodingBarrel : MonoBehaviour
	{
		[Token(Token = "0x40010A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private GameObject _VFX;

		[Token(Token = "0x40010A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public VoidEvent _evtBarrelDestroyed;

		[Token(Token = "0x40010A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float _destroyTime;

		[Token(Token = "0x60013A1")]
		[Address(RVA = "0xB501D4", Offset = "0xB501D4", VA = "0xB501D4")]
		private void Start()
		{
		}

		[Token(Token = "0x60013A2")]
		[Address(RVA = "0xB50224", Offset = "0xB50224", VA = "0xB50224")]
		private void Update()
		{
		}

		[Token(Token = "0x60013A3")]
		[Address(RVA = "0xB502B0", Offset = "0xB502B0", VA = "0xB502B0")]
		private void I_Explode()
		{
		}

		[Token(Token = "0x60013A4")]
		[Address(RVA = "0xB5036C", Offset = "0xB5036C", VA = "0xB5036C")]
		public void ExplodeBarrel()
		{
		}

		[Token(Token = "0x60013A5")]
		[Address(RVA = "0xB503BC", Offset = "0xB503BC", VA = "0xB503BC")]
		public ExplodingBarrel()
		{
		}
	}
	[Token(Token = "0x20002AF")]
	public class KyodoModeSwitcher : MonoBehaviour
	{
		[Token(Token = "0x40010A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshPro txtTraining;

		[Token(Token = "0x40010A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshPro txtMinigame;

		[Token(Token = "0x40010A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject[] objTraining;

		[Token(Token = "0x40010AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject[] objMinigame;

		[Token(Token = "0x40010AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform T_TargetCamera;

		[Token(Token = "0x40010AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool bEnableBarrelSpawn;

		[Token(Token = "0x40010AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector2 BarrelSpawnMinMax;

		[Token(Token = "0x40010AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject PF_ExplodingBarrel;

		[Token(Token = "0x40010AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public CubeSpawnZone BarrelSpawnZone;

		[Token(Token = "0x40010B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float barrelUpForce;

		[Token(Token = "0x40010B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public TextEvent ArchEvent;

		[Token(Token = "0x40010B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float _nextbarrelSpawnTime;

		[Token(Token = "0x40010B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private int _barrelCount;

		[Token(Token = "0x60013A6")]
		[Address(RVA = "0xB503C4", Offset = "0xB503C4", VA = "0xB503C4")]
		private void Start()
		{
		}

		[Token(Token = "0x60013A7")]
		[Address(RVA = "0xB5043C", Offset = "0xB5043C", VA = "0xB5043C")]
		public void EVT_OnBowGameStart()
		{
		}

		[Token(Token = "0x60013A8")]
		[Address(RVA = "0xB50460", Offset = "0xB50460", VA = "0xB50460")]
		public void EVT_OnBarrelExploded()
		{
		}

		[Token(Token = "0x60013A9")]
		[Address(RVA = "0xB50568", Offset = "0xB50568", VA = "0xB50568")]
		public void EVT_TargetHit((Vector3 pos, string TargetName) hInfo)
		{
		}

		[Token(Token = "0x60013AA")]
		[Address(RVA = "0xB505D0", Offset = "0xB505D0", VA = "0xB505D0")]
		private void Update()
		{
		}

		[Token(Token = "0x60013AB")]
		[Address(RVA = "0xB50400", Offset = "0xB50400", VA = "0xB50400")]
		private void SetNextBarrelSpawnTime()
		{
		}

		[Token(Token = "0x60013AC")]
		[Address(RVA = "0xB50824", Offset = "0xB50824", VA = "0xB50824")]
		public void EVT_OnTrainingModeSwitch()
		{
		}

		[Token(Token = "0x60013AD")]
		[Address(RVA = "0xB50AD8", Offset = "0xB50AD8", VA = "0xB50AD8")]
		public void EVT_OnMinigameModeSwitch()
		{
		}

		[Token(Token = "0x60013AE")]
		[Address(RVA = "0xB50CE0", Offset = "0xB50CE0", VA = "0xB50CE0")]
		public KyodoModeSwitcher()
		{
		}
	}
	[Token(Token = "0x20002B0")]
	public class KyodoReset : MonoBehaviour
	{
		[Token(Token = "0x40010B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VoidEvent _levelReset;

		[Token(Token = "0x60013AF")]
		[Address(RVA = "0xB50D40", Offset = "0xB50D40", VA = "0xB50D40")]
		public void EVT_RESET()
		{
		}

		[Token(Token = "0x60013B0")]
		[Address(RVA = "0xB50D5C", Offset = "0xB50D5C", VA = "0xB50D5C")]
		public KyodoReset()
		{
		}
	}
	[Token(Token = "0x20002B1")]
	public class NinjaStarPool : PoolManager<NinjaStarPool, EnemyNinjaStar>
	{
		[Token(Token = "0x60013B1")]
		[Address(RVA = "0xB50D64", Offset = "0xB50D64", VA = "0xB50D64", Slot = "4")]
		protected override void CB_OnIniPoolItem(int index)
		{
		}

		[Token(Token = "0x60013B2")]
		[Address(RVA = "0xB50DC8", Offset = "0xB50DC8", VA = "0xB50DC8", Slot = "5")]
		public override void BackToPool(int index)
		{
		}

		[Token(Token = "0x60013B3")]
		[Address(RVA = "0xB50EB0", Offset = "0xB50EB0", VA = "0xB50EB0")]
		public void Shoot(Vector3 pos)
		{
		}

		[Token(Token = "0x60013B4")]
		[Address(RVA = "0xB51230", Offset = "0xB51230", VA = "0xB51230")]
		public void Shoot(Vector3 pos, Vector3 rot)
		{
		}

		[Token(Token = "0x60013B5")]
		[Address(RVA = "0xB51350", Offset = "0xB51350", VA = "0xB51350")]
		public NinjaStarPool()
		{
		}
	}
	[Token(Token = "0x20002B2")]
	public class ScorePool : PoolManager<ScorePool, TextMeshPro>
	{
		[Token(Token = "0x20002B3")]
		[CompilerGenerated]
		private sealed class <CR_BackToPool>d__1 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40010B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40010B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ScorePool <>4__this;

			[Token(Token = "0x40010B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int pIndex;

			[Token(Token = "0x17000222")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60013BC")]
				[Address(RVA = "0xB51850", Offset = "0xB51850", VA = "0xB51850", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000223")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013BE")]
				[Address(RVA = "0xB51898", Offset = "0xB51898", VA = "0xB51898", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013B9")]
			[Address(RVA = "0xB516FC", Offset = "0xB516FC", VA = "0xB516FC")]
			[DebuggerHidden]
			public <CR_BackToPool>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x60013BA")]
			[Address(RVA = "0xB5176C", Offset = "0xB5176C", VA = "0xB5176C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013BB")]
			[Address(RVA = "0xB51770", Offset = "0xB51770", VA = "0xB51770", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013BD")]
			[Address(RVA = "0xB51858", Offset = "0xB51858", VA = "0xB51858", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x60013B6")]
		[Address(RVA = "0xB51398", Offset = "0xB51398", VA = "0xB51398")]
		public void EVT_DisplayScore((Vector3 pos, string text) sInfo)
		{
		}

		[Token(Token = "0x60013B7")]
		[Address(RVA = "0xB51684", Offset = "0xB51684", VA = "0xB51684")]
		[IteratorStateMachine(typeof(<CR_BackToPool>d__1))]
		private IEnumerator CR_BackToPool(int pIndex)
		{
			return null;
		}

		[Token(Token = "0x60013B8")]
		[Address(RVA = "0xB51724", Offset = "0xB51724", VA = "0xB51724")]
		public ScorePool()
		{
		}
	}
	[Token(Token = "0x20002B4")]
	public class ShaiHulud : MonoBehaviour
	{
		[Token(Token = "0x20002B5")]
		[CompilerGenerated]
		private sealed class <CR_Die>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40010CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40010CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ShaiHulud <>4__this;

			[Token(Token = "0x17000224")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60013CF")]
				[Address(RVA = "0xB52AF8", Offset = "0xB52AF8", VA = "0xB52AF8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000225")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013D1")]
				[Address(RVA = "0xB52B40", Offset = "0xB52B40", VA = "0xB52B40", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013CC")]
			[Address(RVA = "0xB52088", Offset = "0xB52088", VA = "0xB52088")]
			[DebuggerHidden]
			public <CR_Die>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x60013CD")]
			[Address(RVA = "0xB528BC", Offset = "0xB528BC", VA = "0xB528BC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013CE")]
			[Address(RVA = "0xB528C0", Offset = "0xB528C0", VA = "0xB528C0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013D0")]
			[Address(RVA = "0xB52B00", Offset = "0xB52B00", VA = "0xB52B00", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002B6")]
		[CompilerGenerated]
		private sealed class <CR_DiveOut>d__25 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40010D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40010D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ShaiHulud <>4__this;

			[Token(Token = "0x40010D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <monsterBatch>5__2;

			[Token(Token = "0x40010D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private GameObject <spawnMonster>5__3;

			[Token(Token = "0x40010D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <i>5__4;

			[Token(Token = "0x40010D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int <monsterNum>5__5;

			[Token(Token = "0x40010D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <m>5__6;

			[Token(Token = "0x17000226")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60013D5")]
				[Address(RVA = "0xB52DA0", Offset = "0xB52DA0", VA = "0xB52DA0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000227")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013D7")]
				[Address(RVA = "0xB52DE8", Offset = "0xB52DE8", VA = "0xB52DE8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013D2")]
			[Address(RVA = "0xB52448", Offset = "0xB52448", VA = "0xB52448")]
			[DebuggerHidden]
			public <CR_DiveOut>d__25(int <>1__state)
			{
			}

			[Token(Token = "0x60013D3")]
			[Address(RVA = "0xB52B48", Offset = "0xB52B48", VA = "0xB52B48", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013D4")]
			[Address(RVA = "0xB52B4C", Offset = "0xB52B4C", VA = "0xB52B4C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013D6")]
			[Address(RVA = "0xB52DA8", Offset = "0xB52DA8", VA = "0xB52DA8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40010B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextEvent _AchievmentEvent;

		[Token(Token = "0x40010BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CurvySpline[] PatrolPaths;

		[Token(Token = "0x40010BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SplineController spCtrl;

		[Token(Token = "0x40010BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject VFX_SandBlast;

		[Token(Token = "0x40010BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject LevelTeleport;

		[Token(Token = "0x40010BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject[] VFX_Teleport;

		[Token(Token = "0x40010BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform T_ShootPos;

		[Token(Token = "0x40010C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform FirstTarget;

		[Token(Token = "0x40010C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject PF_FireBall;

		[Token(Token = "0x40010C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Animator Anim;

		[Token(Token = "0x40010C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Material ShaiHuludMaterial;

		[Token(Token = "0x40010C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Material eggsSharedMaterial;

		[Token(Token = "0x40010C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float eggAnimSpeed;

		[Token(Token = "0x40010C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float aimCoef;

		[Token(Token = "0x40010C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float min;

		[Token(Token = "0x40010C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float max;

		[Token(Token = "0x40010C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public int EggsLeft;

		[Token(Token = "0x40010CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private AudioObject _growl;

		[Token(Token = "0x40010CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public MiniWormSpawner mWormSpaner;

		[Token(Token = "0x60013BF")]
		[Address(RVA = "0xB518A0", Offset = "0xB518A0", VA = "0xB518A0")]
		private void Start()
		{
		}

		[Token(Token = "0x60013C0")]
		[Address(RVA = "0xB51B50", Offset = "0xB51B50", VA = "0xB51B50")]
		public void ANC_ShootFireball()
		{
		}

		[Token(Token = "0x60013C1")]
		[Address(RVA = "0xB51E74", Offset = "0xB51E74", VA = "0xB51E74")]
		public void EVT_EggDestroyed()
		{
		}

		[Token(Token = "0x60013C2")]
		[Address(RVA = "0xB52020", Offset = "0xB52020", VA = "0xB52020")]
		[IteratorStateMachine(typeof(<CR_Die>d__22))]
		private IEnumerator CR_Die()
		{
			return null;
		}

		[Token(Token = "0x60013C3")]
		[Address(RVA = "0xB520B0", Offset = "0xB520B0", VA = "0xB520B0")]
		private void TestDiveIN()
		{
		}

		[Token(Token = "0x60013C4")]
		[Address(RVA = "0xB521B8", Offset = "0xB521B8", VA = "0xB521B8")]
		private void DO_DiveOut()
		{
		}

		[Token(Token = "0x60013C5")]
		[Address(RVA = "0xB51FB8", Offset = "0xB51FB8", VA = "0xB51FB8")]
		[IteratorStateMachine(typeof(<CR_DiveOut>d__25))]
		private IEnumerator CR_DiveOut()
		{
			return null;
		}

		[Token(Token = "0x60013C6")]
		[Address(RVA = "0xB52378", Offset = "0xB52378", VA = "0xB52378")]
		private void I_ResumeCrawl()
		{
		}

		[Token(Token = "0x60013C7")]
		[Address(RVA = "0xB52470", Offset = "0xB52470", VA = "0xB52470")]
		private void ShootFireBall()
		{
		}

		[Token(Token = "0x60013C8")]
		[Address(RVA = "0xB52574", Offset = "0xB52574", VA = "0xB52574")]
		private void I_Attack()
		{
		}

		[Token(Token = "0x60013C9")]
		[Address(RVA = "0xB525DC", Offset = "0xB525DC", VA = "0xB525DC")]
		private void Update()
		{
		}

		[Token(Token = "0x60013CA")]
		[Address(RVA = "0xB52708", Offset = "0xB52708", VA = "0xB52708")]
		private void I_PlaySound()
		{
		}

		[Token(Token = "0x60013CB")]
		[Address(RVA = "0xB528A0", Offset = "0xB528A0", VA = "0xB528A0")]
		public ShaiHulud()
		{
		}
	}
	[Token(Token = "0x20002B7")]
	public class ShurikenPool : PoolManager<ShurikenPool, EnemyShuriken>
	{
		[Token(Token = "0x60013D8")]
		[Address(RVA = "0xB52DF0", Offset = "0xB52DF0", VA = "0xB52DF0", Slot = "4")]
		protected override void CB_OnIniPoolItem(int index)
		{
		}

		[Token(Token = "0x60013D9")]
		[Address(RVA = "0xB52E70", Offset = "0xB52E70", VA = "0xB52E70", Slot = "5")]
		public override void BackToPool(int index)
		{
		}

		[Token(Token = "0x60013DA")]
		[Address(RVA = "0xB52F64", Offset = "0xB52F64", VA = "0xB52F64")]
		public void EVT_Shoot((bool aimPlayer, Vector3 pos, Vector2 devAngles, Vector3 aimCorrection) sInfo)
		{
		}

		[Token(Token = "0x60013DB")]
		[Address(RVA = "0xB52F90", Offset = "0xB52F90", VA = "0xB52F90")]
		private void Shoot(Vector3 pos, Vector2 devAngles, Vector3 aimCorrection)
		{
		}

		[Token(Token = "0x60013DC")]
		[Address(RVA = "0xB532E0", Offset = "0xB532E0", VA = "0xB532E0")]
		private void Shoot(Vector3 pos, Vector3 rot)
		{
		}

		[Token(Token = "0x60013DD")]
		[Address(RVA = "0xB53554", Offset = "0xB53554", VA = "0xB53554")]
		public ShurikenPool()
		{
		}
	}
	[Token(Token = "0x20002B8")]
	public class SpawnZoneManager : MonoSingleton<SpawnZoneManager>
	{
		[Token(Token = "0x40010D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private List<CubeSpawnZone> _spawnZones;

		[Token(Token = "0x60013DE")]
		[Address(RVA = "0xB5359C", Offset = "0xB5359C", VA = "0xB5359C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60013DF")]
		[Address(RVA = "0xB53644", Offset = "0xB53644", VA = "0xB53644")]
		public Vector3 RandomSpawnPoint()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60013E0")]
		[Address(RVA = "0xB536C4", Offset = "0xB536C4", VA = "0xB536C4")]
		public Vector3 RandomSpawnPoint(int ZoneID)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60013E1")]
		[Address(RVA = "0xB53728", Offset = "0xB53728", VA = "0xB53728")]
		public SpawnZoneManager()
		{
		}
	}
	[Token(Token = "0x20002B9")]
	public class SwordCollision : MonoBehaviour
	{
		[Token(Token = "0x40010D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public int OnlyFirstCollision;

		[Token(Token = "0x40010D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool bIgnoreCollision;

		[Token(Token = "0x40010DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject SwordTip;

		[Token(Token = "0x40010DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private IntEvent _playerScoreSignal;

		[Token(Token = "0x40010DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private ScoreEvent _scoreEvent;

		[Token(Token = "0x40010DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private FBKEvent OnFBKEvent;

		[Token(Token = "0x60013E2")]
		[Address(RVA = "0xB537B8", Offset = "0xB537B8", VA = "0xB537B8")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60013E3")]
		[Address(RVA = "0xB53BCC", Offset = "0xB53BCC", VA = "0xB53BCC")]
		public SwordCollision()
		{
		}
	}
	[Token(Token = "0x20002BA")]
	public class TiggerShaiHulud : MonoBehaviour
	{
		[Token(Token = "0x20002BB")]
		[CompilerGenerated]
		private sealed class <CR_ActivateMonster>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40010E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40010E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40010E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TiggerShaiHulud <>4__this;

			[Token(Token = "0x17000228")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60013EA")]
				[Address(RVA = "0xB54350", Offset = "0xB54350", VA = "0xB54350", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000229")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013EC")]
				[Address(RVA = "0xB54398", Offset = "0xB54398", VA = "0xB54398", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013E7")]
			[Address(RVA = "0xB53D3C", Offset = "0xB53D3C", VA = "0xB53D3C")]
			[DebuggerHidden]
			public <CR_ActivateMonster>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x60013E8")]
			[Address(RVA = "0xB53DBC", Offset = "0xB53DBC", VA = "0xB53DBC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013E9")]
			[Address(RVA = "0xB53DC0", Offset = "0xB53DC0", VA = "0xB53DC0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013EB")]
			[Address(RVA = "0xB54358", Offset = "0xB54358", VA = "0xB54358", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40010DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject ShaiHulud;

		[Token(Token = "0x40010DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Animator AnimBell1;

		[Token(Token = "0x40010E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Animator AnimBell2;

		[Token(Token = "0x40010E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioClip[] BellClips;

		[Token(Token = "0x40010E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioSource Bell1;

		[Token(Token = "0x40010E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AudioSource Bell2;

		[Token(Token = "0x40010E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Animator CiperAnim;

		[Token(Token = "0x40010E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool _IsActivated;

		[Token(Token = "0x40010E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool[] CorrectCipher;

		[Token(Token = "0x60013E4")]
		[Address(RVA = "0xB53BDC", Offset = "0xB53BDC", VA = "0xB53BDC")]
		public void EVT_ChiperCracked(int ID)
		{
		}

		[Token(Token = "0x60013E5")]
		[Address(RVA = "0xB53CD4", Offset = "0xB53CD4", VA = "0xB53CD4")]
		[IteratorStateMachine(typeof(<CR_ActivateMonster>d__10))]
		private IEnumerator CR_ActivateMonster()
		{
			return null;
		}

		[Token(Token = "0x60013E6")]
		[Address(RVA = "0xB53D64", Offset = "0xB53D64", VA = "0xB53D64")]
		public TiggerShaiHulud()
		{
		}
	}
	[Token(Token = "0x20002BC")]
	[CreateAssetMenu(menuName = "VRKemono/Bow Wave")]
	public class WaveData : ScriptableObject
	{
		[Serializable]
		[Token(Token = "0x20002BD")]
		public struct BatchElement
		{
			[Token(Token = "0x40010FA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float spawnDelay;

			[Token(Token = "0x40010FB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public bool bRespawnOnDeath;

			[Token(Token = "0x40010FC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public GameObject prefab;
		}

		[Serializable]
		[Token(Token = "0x20002BE")]
		public struct BatchData
		{
			[Token(Token = "0x40010FD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float batchInitTime;

			[Token(Token = "0x40010FE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int batchRepeatTime;

			[Token(Token = "0x40010FF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public bool spawnOnlyOnce;

			[Token(Token = "0x4001100")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public List<BatchElement> SpawnData;
		}

		[Token(Token = "0x40010EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string WaveInfo;

		[Token(Token = "0x40010EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string TrmOutInfo;

		[Token(Token = "0x40010EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool UpdateLeaderboard;

		[Token(Token = "0x40010ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool TimeoutBased;

		[Token(Token = "0x40010EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float WaveTimeOut;

		[Token(Token = "0x40010EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public WaveData nextWave;

		[Token(Token = "0x40010F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int WaveID;

		[Token(Token = "0x40010F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float NextWaveDelay;

		[Token(Token = "0x40010F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float EnemyInterval;

		[Token(Token = "0x40010F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float EnemySpeed;

		[Token(Token = "0x40010F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float AttackInterval;

		[Token(Token = "0x40010F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool RemoveRoof;

		[Token(Token = "0x40010F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<GameObject> Splines;

		[Token(Token = "0x40010F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector2 AOIndexes;

		[Token(Token = "0x40010F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector2 DEOIndexes;

		[Token(Token = "0x40010F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<BatchData> BatchList;

		[Token(Token = "0x1700022A")]
		private string TimerValue
		{
			[Token(Token = "0x60013ED")]
			[Address(RVA = "0xB543A0", Offset = "0xB543A0", VA = "0xB543A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60013EE")]
		[Address(RVA = "0xB54424", Offset = "0xB54424", VA = "0xB54424")]
		public WaveData()
		{
		}
	}
	[Token(Token = "0x20002BF")]
	public class SoundtrackManager : MonoSingleton<SoundtrackManager>
	{
		[Token(Token = "0x20002C0")]
		[CompilerGenerated]
		private sealed class <CR_FadeInMusic>d__7 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001105")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001106")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001107")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public SoundtrackManager <>4__this;

			[Token(Token = "0x4001108")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float maxVolume;

			[Token(Token = "0x4001109")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public float timeToFade;

			[Token(Token = "0x400110A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <i>5__2;

			[Token(Token = "0x1700022B")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60013F8")]
				[Address(RVA = "0xB54A30", Offset = "0xB54A30", VA = "0xB54A30", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700022C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60013FA")]
				[Address(RVA = "0xB54A78", Offset = "0xB54A78", VA = "0xB54A78", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013F5")]
			[Address(RVA = "0xB54870", Offset = "0xB54870", VA = "0xB54870")]
			[DebuggerHidden]
			public <CR_FadeInMusic>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x60013F6")]
			[Address(RVA = "0xB54914", Offset = "0xB54914", VA = "0xB54914", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013F7")]
			[Address(RVA = "0xB54918", Offset = "0xB54918", VA = "0xB54918", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013F9")]
			[Address(RVA = "0xB54A38", Offset = "0xB54A38", VA = "0xB54A38", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002C1")]
		[CompilerGenerated]
		private sealed class <CR_CrossFadeMusic>d__8 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400110B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400110C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x400110D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public SoundtrackManager <>4__this;

			[Token(Token = "0x400110E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float timeToFade;

			[Token(Token = "0x400110F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AudioClip MusicToStart;

			[Token(Token = "0x4001110")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float maxVolume;

			[Token(Token = "0x4001111")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public float timeToStart;

			[Token(Token = "0x4001112")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private float <startValue>5__2;

			[Token(Token = "0x4001113")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private int <i>5__3;

			[Token(Token = "0x1700022D")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60013FE")]
				[Address(RVA = "0xB54CD4", Offset = "0xB54CD4", VA = "0xB54CD4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700022E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001400")]
				[Address(RVA = "0xB54D1C", Offset = "0xB54D1C", VA = "0xB54D1C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60013FB")]
			[Address(RVA = "0xB54898", Offset = "0xB54898", VA = "0xB54898")]
			[DebuggerHidden]
			public <CR_CrossFadeMusic>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x60013FC")]
			[Address(RVA = "0xB54AD4", Offset = "0xB54AD4", VA = "0xB54AD4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60013FD")]
			[Address(RVA = "0xB54AD8", Offset = "0xB54AD8", VA = "0xB54AD8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60013FF")]
			[Address(RVA = "0xB54CDC", Offset = "0xB54CDC", VA = "0xB54CDC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip BG_Calm_Track;

		[Token(Token = "0x4001102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioClip BG_Battle_Track;

		[Token(Token = "0x4001103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AudioSource audioSource;

		[Token(Token = "0x4001104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Range(0f, 1f)]
		public float maxMusicVolume;

		[Token(Token = "0x60013EF")]
		[Address(RVA = "0xB54540", Offset = "0xB54540", VA = "0xB54540")]
		private void Start()
		{
		}

		[Token(Token = "0x60013F0")]
		[Address(RVA = "0xB54694", Offset = "0xB54694", VA = "0xB54694")]
		public void PlayBattleTrack(float maxVolumeOverride = 0.2f)
		{
		}

		[Token(Token = "0x60013F1")]
		[Address(RVA = "0xB547D4", Offset = "0xB547D4", VA = "0xB547D4")]
		public void PlayCalmTrack()
		{
		}

		[Token(Token = "0x60013F2")]
		[Address(RVA = "0xB54618", Offset = "0xB54618", VA = "0xB54618")]
		[IteratorStateMachine(typeof(<CR_FadeInMusic>d__7))]
		private IEnumerator<float> CR_FadeInMusic(float maxVolume, float timeToFade)
		{
			return null;
		}

		[Token(Token = "0x60013F3")]
		[Address(RVA = "0xB54738", Offset = "0xB54738", VA = "0xB54738")]
		[IteratorStateMachine(typeof(<CR_CrossFadeMusic>d__8))]
		private IEnumerator<float> CR_CrossFadeMusic(float maxVolume, float timeToFade, AudioClip MusicToStart, float timeToStart)
		{
			return null;
		}

		[Token(Token = "0x60013F4")]
		[Address(RVA = "0xB548C0", Offset = "0xB548C0", VA = "0xB548C0")]
		public SoundtrackManager()
		{
		}
	}
	[Token(Token = "0x20002C2")]
	public class SteamVR_Achievments : MonoBehaviour
	{
		[Token(Token = "0x6001401")]
		[Address(RVA = "0xB54D78", Offset = "0xB54D78", VA = "0xB54D78")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001402")]
		[Address(RVA = "0xB54DE4", Offset = "0xB54DE4", VA = "0xB54DE4")]
		public void EVT_OnAchievmentActivate((Vector3 pos, string achvID) ahcInfo)
		{
		}

		[Token(Token = "0x6001403")]
		[Address(RVA = "0xB54DE8", Offset = "0xB54DE8", VA = "0xB54DE8")]
		public SteamVR_Achievments()
		{
		}
	}
	[Token(Token = "0x20002C3")]
	public class SteamVR_Leaderboard : MonoBehaviour
	{
		[Token(Token = "0x4001114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int LDRB_Score;

		[Token(Token = "0x4001115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private IntValue _playerScore;

		[Token(Token = "0x4001116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public BowTrainerManager bowTrainer;

		[Token(Token = "0x4001117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string LeaderboardName;

		[Token(Token = "0x4001118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public TextMeshPro tmNames;

		[Token(Token = "0x4001119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public TextMeshPro tmScores;

		[Token(Token = "0x6001404")]
		[Address(RVA = "0xB54DF0", Offset = "0xB54DF0", VA = "0xB54DF0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001405")]
		[Address(RVA = "0xB54E5C", Offset = "0xB54E5C", VA = "0xB54E5C")]
		public void EVT_OnWaveEnd()
		{
		}

		[Token(Token = "0x6001406")]
		[Address(RVA = "0xB54F94", Offset = "0xB54F94", VA = "0xB54F94")]
		public void UpdateLeaderboardScore(int lbScore)
		{
		}

		[Token(Token = "0x6001407")]
		[Address(RVA = "0xB54FAC", Offset = "0xB54FAC", VA = "0xB54FAC")]
		public SteamVR_Leaderboard()
		{
		}
	}
	[Token(Token = "0x20002C4")]
	public class Quest_FixMSAA : MonoBehaviour
	{
		[Token(Token = "0x20002C5")]
		[CompilerGenerated]
		private sealed class <CR_FIxAA>d__1 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400111A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400111B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x1700022F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600140E")]
				[Address(RVA = "0xB552B4", Offset = "0xB552B4", VA = "0xB552B4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000230")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001410")]
				[Address(RVA = "0xB552FC", Offset = "0xB552FC", VA = "0xB552FC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600140B")]
			[Address(RVA = "0xB5507C", Offset = "0xB5507C", VA = "0xB5507C")]
			[DebuggerHidden]
			public <CR_FIxAA>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x600140C")]
			[Address(RVA = "0xB550AC", Offset = "0xB550AC", VA = "0xB550AC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600140D")]
			[Address(RVA = "0xB550B0", Offset = "0xB550B0", VA = "0xB550B0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600140F")]
			[Address(RVA = "0xB552BC", Offset = "0xB552BC", VA = "0xB552BC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6001408")]
		[Address(RVA = "0xB54FFC", Offset = "0xB54FFC", VA = "0xB54FFC")]
		public void EVT_ApplyAA()
		{
		}

		[Token(Token = "0x6001409")]
		[Address(RVA = "0xB5501C", Offset = "0xB5501C", VA = "0xB5501C")]
		[IteratorStateMachine(typeof(<CR_FIxAA>d__1))]
		private IEnumerator CR_FIxAA()
		{
			return null;
		}

		[Token(Token = "0x600140A")]
		[Address(RVA = "0xB550A4", Offset = "0xB550A4", VA = "0xB550A4")]
		public Quest_FixMSAA()
		{
		}
	}
	[Token(Token = "0x20002C6")]
	[CreateAssetMenu(menuName = "VRKemono/Inventory")]
	public class SO_Inventory : ScriptableObject
	{
		[Token(Token = "0x400111C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<SnapZone> returnZone;

		[Token(Token = "0x6001411")]
		[Address(RVA = "0xB55304", Offset = "0xB55304", VA = "0xB55304")]
		public SO_Inventory()
		{
		}
	}
	[Token(Token = "0x20002C7")]
	public class Player : MonoSingleton<Player>
	{
		[Token(Token = "0x400111D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private HealthValue playerHealth;

		[Token(Token = "0x400111E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool restrictLocomotion;

		[Token(Token = "0x400111F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float pauseMenuDelay;

		[Token(Token = "0x4001120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SO_Inventory inventory;

		[Token(Token = "0x4001121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float UI_Y_Offset;

		[Token(Token = "0x4001122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		private Camera _camera;

		[Token(Token = "0x4001123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		private BNGPlayerController _bngPlayerCtrl;

		[Token(Token = "0x4001124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public SmoothLocomotion smoothLoc;

		[Token(Token = "0x4001125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform TR_FeetSound;

		[Token(Token = "0x4001126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform AP_UI;

		[Token(Token = "0x4001127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform AP_LaserPointer_R;

		[Token(Token = "0x4001128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform AP_LaserPointer_L;

		[Token(Token = "0x4001129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform PC;

		[Token(Token = "0x400112A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public GameObject UI_PauseMenuRoot;

		[Token(Token = "0x400112B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Image UI_PauseMenuIndicator;

		[Token(Token = "0x400112C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public GameObject R_Claw;

		[Token(Token = "0x400112D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public GameObject L_Claw;

		[Token(Token = "0x400112E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public WeaponHolster HolsterData;

		[Token(Token = "0x400112F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private LTDescr _tweenID;

		[Token(Token = "0x4001130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Grabbable RightGrabbable;

		[Token(Token = "0x4001131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Grabbable LeftGrabbable;

		[Token(Token = "0x4001132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private PlayerRotation _pRotation;

		[Token(Token = "0x4001133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private float _recentTeleportTime;

		[Token(Token = "0x17000231")]
		public BNGPlayerController BngPlayerCtrl
		{
			[Token(Token = "0x6001412")]
			[Address(RVA = "0xB55380", Offset = "0xB55380", VA = "0xB55380")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001413")]
			[Address(RVA = "0xB55450", Offset = "0xB55450", VA = "0xB55450")]
			set
			{
			}
		}

		[Token(Token = "0x17000232")]
		public Camera Camera
		{
			[Token(Token = "0x6001414")]
			[Address(RVA = "0xB50A5C", Offset = "0xB50A5C", VA = "0xB50A5C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001415")]
			[Address(RVA = "0xB55458", Offset = "0xB55458", VA = "0xB55458")]
			set
			{
			}
		}

		[Token(Token = "0x17000233")]
		public SphereCollider HeadCollider
		{
			[Token(Token = "0x6001416")]
			[Address(RVA = "0xB55460", Offset = "0xB55460", VA = "0xB55460")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001417")]
			[Address(RVA = "0xB55468", Offset = "0xB55468", VA = "0xB55468")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x6001418")]
		[Address(RVA = "0xB55470", Offset = "0xB55470", VA = "0xB55470")]
		private void Start()
		{
		}

		[Token(Token = "0x6001419")]
		[Address(RVA = "0xB55830", Offset = "0xB55830", VA = "0xB55830")]
		private void I_CheckLocomotion()
		{
		}

		[Token(Token = "0x600141A")]
		[Address(RVA = "0xB55720", Offset = "0xB55720", VA = "0xB55720")]
		public void BindPlayerController()
		{
		}

		[Token(Token = "0x600141B")]
		[Address(RVA = "0xB559A4", Offset = "0xB559A4", VA = "0xB559A4")]
		public Transform GetEyeTarget()
		{
			return null;
		}

		[Token(Token = "0x600141C")]
		[Address(RVA = "0xB559AC", Offset = "0xB559AC", VA = "0xB559AC")]
		public void InitPauseIndicator()
		{
		}

		[Token(Token = "0x600141D")]
		[Address(RVA = "0xB55C38", Offset = "0xB55C38", VA = "0xB55C38")]
		private void CB_ShowPauseMenu()
		{
		}

		[Token(Token = "0x600141E")]
		[Address(RVA = "0xB55E98", Offset = "0xB55E98", VA = "0xB55E98")]
		public void CancelPauseIndicator()
		{
		}

		[Token(Token = "0x600141F")]
		[Address(RVA = "0xB55F90", Offset = "0xB55F90", VA = "0xB55F90")]
		public void SetUIPosition(GameObject UI)
		{
		}

		[Token(Token = "0x6001420")]
		[Address(RVA = "0xB56180", Offset = "0xB56180", VA = "0xB56180")]
		public void OnAfterTeleport()
		{
		}

		[Token(Token = "0x6001421")]
		[Address(RVA = "0xB5619C", Offset = "0xB5619C", VA = "0xB5619C")]
		public bool RecentlyTeleported()
		{
			return default(bool);
		}

		[Token(Token = "0x6001422")]
		[Address(RVA = "0xB561CC", Offset = "0xB561CC", VA = "0xB561CC")]
		public bool RecentLocomotionEventsOK()
		{
			return default(bool);
		}

		[Token(Token = "0x6001423")]
		[Address(RVA = "0xB562F0", Offset = "0xB562F0", VA = "0xB562F0")]
		internal void EVT_WeaponSZoneEnter(I_AutoHolster pWeapon, SnapZone newZone)
		{
		}

		[Token(Token = "0x6001424")]
		[Address(RVA = "0xB566E8", Offset = "0xB566E8", VA = "0xB566E8")]
		internal void EVT_WeaponSZoneExit(I_AutoHolster pWeapon, SnapZone sZone)
		{
		}

		[Token(Token = "0x6001425")]
		[Address(RVA = "0xB56710", Offset = "0xB56710", VA = "0xB56710")]
		internal SnapZone AssignFreeSnapZone(GameObject go)
		{
			return null;
		}

		[Token(Token = "0x6001426")]
		[Address(RVA = "0xB56A24", Offset = "0xB56A24", VA = "0xB56A24")]
		internal void ClearSnapZone(GameObject go)
		{
		}

		[Token(Token = "0x6001427")]
		[Address(RVA = "0xB565E4", Offset = "0xB565E4", VA = "0xB565E4")]
		private SnapZone GetFreeSnapZone()
		{
			return null;
		}

		[Token(Token = "0x6001428")]
		[Address(RVA = "0xB56BC0", Offset = "0xB56BC0", VA = "0xB56BC0")]
		internal SnapZone GetWeaponSnapZone(int weaponID)
		{
			return null;
		}

		[Token(Token = "0x6001429")]
		[Address(RVA = "0xB56C54", Offset = "0xB56C54", VA = "0xB56C54")]
		public Player()
		{
		}
	}
	[Token(Token = "0x20002C8")]
	public class SpawnPositions : MonoSingleton<SpawnPositions>
	{
		[Token(Token = "0x4001135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform[] T_Positions;

		[Token(Token = "0x600142A")]
		[Address(RVA = "0xB56CE4", Offset = "0xB56CE4", VA = "0xB56CE4")]
		public SpawnPositions()
		{
		}
	}
	[Token(Token = "0x20002C9")]
	public class TimeSlowEffect : MonoBehaviour
	{
		[Token(Token = "0x20002CA")]
		[CompilerGenerated]
		private sealed class <resumeTimeRoutine>d__16 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001140")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001141")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001142")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TimeSlowEffect <>4__this;

			[Token(Token = "0x17000235")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001435")]
				[Address(RVA = "0xB57218", Offset = "0xB57218", VA = "0xB57218", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000236")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001437")]
				[Address(RVA = "0xB57260", Offset = "0xB57260", VA = "0xB57260", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001432")]
			[Address(RVA = "0xB57018", Offset = "0xB57018", VA = "0xB57018")]
			[DebuggerHidden]
			public <resumeTimeRoutine>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x6001433")]
			[Address(RVA = "0xB57058", Offset = "0xB57058", VA = "0xB57058", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001434")]
			[Address(RVA = "0xB5705C", Offset = "0xB5705C", VA = "0xB5705C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001436")]
			[Address(RVA = "0xB57220", Offset = "0xB57220", VA = "0xB57220", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool SetFixedDelta;

		[Token(Token = "0x4001137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float SlowTimeScale;

		[Token(Token = "0x4001138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioClip SlowTimeClip;

		[Token(Token = "0x4001139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip SpeedupTimeClip;

		[Token(Token = "0x400113A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool _slowingTime;

		[Token(Token = "0x400113B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		private bool routineRunning;

		[Token(Token = "0x400113C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float originalFixedDelta;

		[Token(Token = "0x400113D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AudioSource audioSource;

		[Token(Token = "0x400113E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool ForceTimeScale;

		[Token(Token = "0x400113F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private IEnumerator resumeRoutine;

		[Token(Token = "0x17000234")]
		public bool TimeSlowing
		{
			[Token(Token = "0x600142B")]
			[Address(RVA = "0xB56D2C", Offset = "0xB56D2C", VA = "0xB56D2C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x600142C")]
		[Address(RVA = "0xB56D34", Offset = "0xB56D34", VA = "0xB56D34")]
		private void Start()
		{
		}

		[Token(Token = "0x600142D")]
		[Address(RVA = "0xB56DC0", Offset = "0xB56DC0", VA = "0xB56DC0")]
		public void EVT_OnPlayerScore(int score)
		{
		}

		[Token(Token = "0x600142E")]
		[Address(RVA = "0xB56DD8", Offset = "0xB56DD8", VA = "0xB56DD8")]
		public void SlowTime()
		{
		}

		[Token(Token = "0x600142F")]
		[Address(RVA = "0xB56F70", Offset = "0xB56F70", VA = "0xB56F70")]
		public void ResumeTime()
		{
		}

		[Token(Token = "0x6001430")]
		[Address(RVA = "0xB56FB0", Offset = "0xB56FB0", VA = "0xB56FB0")]
		[IteratorStateMachine(typeof(<resumeTimeRoutine>d__16))]
		private IEnumerator resumeTimeRoutine()
		{
			return null;
		}

		[Token(Token = "0x6001431")]
		[Address(RVA = "0xB57040", Offset = "0xB57040", VA = "0xB57040")]
		public TimeSlowEffect()
		{
		}
	}
	[Token(Token = "0x20002CB")]
	public class PortalActivator : MonoBehaviour
	{
		[Token(Token = "0x4001143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject Portal;

		[Token(Token = "0x4001144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject VFX_Portal;

		[Token(Token = "0x4001145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool isActivated;

		[Token(Token = "0x6001438")]
		[Address(RVA = "0xB57268", Offset = "0xB57268", VA = "0xB57268")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001439")]
		[Address(RVA = "0xB573CC", Offset = "0xB573CC", VA = "0xB573CC")]
		private void I_ActivatePortal()
		{
		}

		[Token(Token = "0x600143A")]
		[Address(RVA = "0xB57450", Offset = "0xB57450", VA = "0xB57450")]
		public PortalActivator()
		{
		}
	}
	[Token(Token = "0x20002CC")]
	public class ZG_PuzzleActivator : MonoBehaviour
	{
		[Token(Token = "0x20002CD")]
		[CompilerGenerated]
		private sealed class <CR_Activate>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400114A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400114B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400114C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ZG_PuzzleActivator <>4__this;

			[Token(Token = "0x400114D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Color <colour>5__2;

			[Token(Token = "0x17000237")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001442")]
				[Address(RVA = "0xB57958", Offset = "0xB57958", VA = "0xB57958", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000238")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001444")]
				[Address(RVA = "0xB579A0", Offset = "0xB579A0", VA = "0xB579A0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600143F")]
			[Address(RVA = "0xB5763C", Offset = "0xB5763C", VA = "0xB5763C")]
			[DebuggerHidden]
			public <CR_Activate>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x6001440")]
			[Address(RVA = "0xB576B4", Offset = "0xB576B4", VA = "0xB576B4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001441")]
			[Address(RVA = "0xB576B8", Offset = "0xB576B8", VA = "0xB576B8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001443")]
			[Address(RVA = "0xB57960", Offset = "0xB57960", VA = "0xB57960", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string activator;

		[Token(Token = "0x4001147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool activated;

		[Token(Token = "0x4001148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Animator cAnim;

		[Token(Token = "0x4001149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material cMat;

		[Token(Token = "0x600143B")]
		[Address(RVA = "0xB57458", Offset = "0xB57458", VA = "0xB57458")]
		private void Start()
		{
		}

		[Token(Token = "0x600143C")]
		[Address(RVA = "0xB57504", Offset = "0xB57504", VA = "0xB57504")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600143D")]
		[Address(RVA = "0xB575D4", Offset = "0xB575D4", VA = "0xB575D4")]
		[IteratorStateMachine(typeof(<CR_Activate>d__6))]
		private IEnumerator CR_Activate()
		{
			return null;
		}

		[Token(Token = "0x600143E")]
		[Address(RVA = "0xB57664", Offset = "0xB57664", VA = "0xB57664")]
		public ZG_PuzzleActivator()
		{
		}
	}
	[Token(Token = "0x20002CE")]
	public class ZG_PuzzleSolver : MonoBehaviour
	{
		[Token(Token = "0x400114E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float portalActivateDelay;

		[Token(Token = "0x400114F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject Solve_VFX;

		[Token(Token = "0x4001150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject Portal;

		[Token(Token = "0x4001151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject[] lSabers;

		[Token(Token = "0x4001152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject Portal1Trigger;

		[Token(Token = "0x4001153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject SecondPortal;

		[Token(Token = "0x4001154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Renderer RuneStone;

		[Token(Token = "0x4001155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject VFX_RuneStone;

		[Token(Token = "0x4001156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject FirstMessanger;

		[Token(Token = "0x4001157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject SecondMessanger;

		[Token(Token = "0x4001158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private int lightSaberUsed;

		[Token(Token = "0x4001159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private bool bSettingsLoadedOnce;

		[Token(Token = "0x6001445")]
		[Address(RVA = "0xB579A8", Offset = "0xB579A8", VA = "0xB579A8")]
		public void EVT_SettingsLoaded()
		{
		}

		[Token(Token = "0x6001446")]
		[Address(RVA = "0xB57DA0", Offset = "0xB57DA0", VA = "0xB57DA0")]
		private void I_FirstMessanger()
		{
		}

		[Token(Token = "0x6001447")]
		[Address(RVA = "0xB57844", Offset = "0xB57844", VA = "0xB57844")]
		public void OnSolvePuzzle()
		{
		}

		[Token(Token = "0x6001448")]
		[Address(RVA = "0xB57DC0", Offset = "0xB57DC0", VA = "0xB57DC0")]
		private void I_ActivatePortal()
		{
		}

		[Token(Token = "0x6001449")]
		[Address(RVA = "0xB57DE0", Offset = "0xB57DE0", VA = "0xB57DE0")]
		public ZG_PuzzleSolver()
		{
		}
	}
	[Token(Token = "0x20002CF")]
	public class SceneLoader : MonoBehaviour
	{
		[Token(Token = "0x20002D0")]
		public enum GameLevels
		{
			[Token(Token = "0x400116B")]
			START = -1,
			[Token(Token = "0x400116C")]
			SCENE_CHANGE,
			[Token(Token = "0x400116D")]
			ZEN_GARDEN,
			[Token(Token = "0x400116E")]
			KYODO_DOJO,
			[Token(Token = "0x400116F")]
			KENDO_DOJO,
			[Token(Token = "0x4001170")]
			SHAI_HULUD,
			[Token(Token = "0x4001171")]
			BOWTRIS
		}

		[Token(Token = "0x20002D1")]
		[CompilerGenerated]
		private sealed class <CR_SetFrequency>d__19 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001172")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001173")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x17000239")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001459")]
				[Address(RVA = "0xB58638", Offset = "0xB58638", VA = "0xB58638", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700023A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600145B")]
				[Address(RVA = "0xB58680", Offset = "0xB58680", VA = "0xB58680", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001456")]
			[Address(RVA = "0xB57F00", Offset = "0xB57F00", VA = "0xB57F00")]
			[DebuggerHidden]
			public <CR_SetFrequency>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x6001457")]
			[Address(RVA = "0xB58600", Offset = "0xB58600", VA = "0xB58600", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001458")]
			[Address(RVA = "0xB58604", Offset = "0xB58604", VA = "0xB58604", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600145A")]
			[Address(RVA = "0xB58640", Offset = "0xB58640", VA = "0xB58640", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002D2")]
		[CompilerGenerated]
		private sealed class <CR_LoadLevelAsync>d__24 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001174")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001175")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x4001176")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public SceneLoader <>4__this;

			[Token(Token = "0x4001177")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int SceneIndex;

			[Token(Token = "0x1700023B")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x600145F")]
				[Address(RVA = "0xB58A04", Offset = "0xB58A04", VA = "0xB58A04", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700023C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001461")]
				[Address(RVA = "0xB58A4C", Offset = "0xB58A4C", VA = "0xB58A4C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600145C")]
			[Address(RVA = "0xB58210", Offset = "0xB58210", VA = "0xB58210")]
			[DebuggerHidden]
			public <CR_LoadLevelAsync>d__24(int <>1__state)
			{
			}

			[Token(Token = "0x600145D")]
			[Address(RVA = "0xB58688", Offset = "0xB58688", VA = "0xB58688", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600145E")]
			[Address(RVA = "0xB5868C", Offset = "0xB5868C", VA = "0xB5868C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001460")]
			[Address(RVA = "0xB58A0C", Offset = "0xB58A0C", VA = "0xB58A0C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002D3")]
		[CompilerGenerated]
		private sealed class <CR_ChangeLevel>d__25 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001178")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001179")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x400117A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public SceneLoader <>4__this;

			[Token(Token = "0x1700023D")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x6001465")]
				[Address(RVA = "0xB58B70", Offset = "0xB58B70", VA = "0xB58B70", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700023E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001467")]
				[Address(RVA = "0xB58BB8", Offset = "0xB58BB8", VA = "0xB58BB8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001462")]
			[Address(RVA = "0xB582A0", Offset = "0xB582A0", VA = "0xB582A0")]
			[DebuggerHidden]
			public <CR_ChangeLevel>d__25(int <>1__state)
			{
			}

			[Token(Token = "0x6001463")]
			[Address(RVA = "0xB58AA8", Offset = "0xB58AA8", VA = "0xB58AA8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001464")]
			[Address(RVA = "0xB58AAC", Offset = "0xB58AAC", VA = "0xB58AAC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001466")]
			[Address(RVA = "0xB58B78", Offset = "0xB58B78", VA = "0xB58B78", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400115A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Animator logoAnim;

		[Token(Token = "0x400115B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ScreenFader fader;

		[Token(Token = "0x400115C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float skyboxrotatekoef;

		[Token(Token = "0x400115D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static GameLevels LevelToLoadID;

		[Token(Token = "0x400115E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static int spawnPosition;

		[Token(Token = "0x400115F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject Logo;

		[Token(Token = "0x4001160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject uiPresents;

		[Token(Token = "0x4001161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public TextMeshProUGUI PressAny;

		[Token(Token = "0x4001162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject vrKemono;

		[Token(Token = "0x4001163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public TextMeshProUGUI txtTitle;

		[Token(Token = "0x4001164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEngine.UI.Slider loadScreen;

		[Token(Token = "0x4001165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool loadingLevel;

		[Token(Token = "0x4001166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool levelLoaded;

		[Token(Token = "0x4001167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private AsyncOperation status;

		[Token(Token = "0x4001168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GameObject fadeSphere;

		[Token(Token = "0x4001169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public GameObject[] ObjToHide;

		[Token(Token = "0x600144A")]
		[Address(RVA = "0xB57DF0", Offset = "0xB57DF0", VA = "0xB57DF0")]
		private void LOADLEVEL(GameLevels lvl)
		{
		}

		[Token(Token = "0x600144B")]
		[Address(RVA = "0xB57E80", Offset = "0xB57E80", VA = "0xB57E80")]
		private void Awake()
		{
		}

		[Token(Token = "0x600144C")]
		[Address(RVA = "0xB57EA0", Offset = "0xB57EA0", VA = "0xB57EA0")]
		[IteratorStateMachine(typeof(<CR_SetFrequency>d__19))]
		private IEnumerator CR_SetFrequency()
		{
			return null;
		}

		[Token(Token = "0x600144D")]
		[Address(RVA = "0xB57F28", Offset = "0xB57F28", VA = "0xB57F28")]
		private void Start()
		{
		}

		[Token(Token = "0x600144E")]
		[Address(RVA = "0xB580BC", Offset = "0xB580BC", VA = "0xB580BC")]
		private void I_LogoAnim()
		{
		}

		[Token(Token = "0x600144F")]
		[Address(RVA = "0xB57DF4", Offset = "0xB57DF4", VA = "0xB57DF4")]
		private void LoadLevel(GameLevels sceneIndex)
		{
		}

		[Token(Token = "0x6001450")]
		[Address(RVA = "0xB58188", Offset = "0xB58188", VA = "0xB58188")]
		private void FadeSet(bool fadeOn)
		{
		}

		[Token(Token = "0x6001451")]
		[Address(RVA = "0xB58110", Offset = "0xB58110", VA = "0xB58110")]
		[IteratorStateMachine(typeof(<CR_LoadLevelAsync>d__24))]
		private IEnumerator<float> CR_LoadLevelAsync(int SceneIndex)
		{
			return null;
		}

		[Token(Token = "0x6001452")]
		[Address(RVA = "0xB58238", Offset = "0xB58238", VA = "0xB58238")]
		[IteratorStateMachine(typeof(<CR_ChangeLevel>d__25))]
		private IEnumerator<float> CR_ChangeLevel()
		{
			return null;
		}

		[Token(Token = "0x6001453")]
		[Address(RVA = "0xB582C8", Offset = "0xB582C8", VA = "0xB582C8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001454")]
		[Address(RVA = "0xB585A0", Offset = "0xB585A0", VA = "0xB585A0")]
		public SceneLoader()
		{
		}
	}
	[Token(Token = "0x20002D4")]
	[CreateAssetMenu(fileName = "newActiveEnemiesValue", menuName = "VRKemono/ActiveEnemiesValue", order = 0)]
	public class ActiveEnemiesValue : ScriptableObject
	{
		[Token(Token = "0x400117B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<I_WaveEnemy> value;

		[Token(Token = "0x6001468")]
		[Address(RVA = "0xB58C14", Offset = "0xB58C14", VA = "0xB58C14")]
		public ActiveEnemiesValue()
		{
		}
	}
	[Token(Token = "0x20002D5")]
	[CreateAssetMenu(fileName = "newBoolValue", menuName = "VRKemono/BoolValue", order = 0)]
	public class BoolValue : ScriptableObject
	{
		[Token(Token = "0x400117C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool value;

		[Token(Token = "0x6001469")]
		[Address(RVA = "0xB58C90", Offset = "0xB58C90", VA = "0xB58C90")]
		public BoolValue()
		{
		}
	}
	[Token(Token = "0x20002D6")]
	[CreateAssetMenu(fileName = "NewFloatValue", menuName = "VRKemono/FloatValue", order = 0)]
	public class FloatValue : ScriptableObject
	{
		[Token(Token = "0x400117D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float value;

		[Token(Token = "0x600146A")]
		[Address(RVA = "0xB58C98", Offset = "0xB58C98", VA = "0xB58C98")]
		public FloatValue()
		{
		}
	}
	[Token(Token = "0x20002D7")]
	[CreateAssetMenu(fileName = "newHealthValue", menuName = "VRKemono/HealthValue", order = 0)]
	public class HealthValue : ScriptableObject
	{
		[Token(Token = "0x400117E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int value;

		[Token(Token = "0x400117F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool config;

		[Token(Token = "0x4001180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int min;

		[Token(Token = "0x4001181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int max;

		[Token(Token = "0x600146B")]
		[Address(RVA = "0xB58CA0", Offset = "0xB58CA0", VA = "0xB58CA0")]
		private Color GetHealthColor()
		{
			return default(Color);
		}

		[Token(Token = "0x600146C")]
		[Address(RVA = "0xB58D1C", Offset = "0xB58D1C", VA = "0xB58D1C")]
		public HealthValue()
		{
		}
	}
	[Token(Token = "0x20002D8")]
	[CreateAssetMenu(fileName = "newIntValue", menuName = "VRKemono/IntValue", order = 0)]
	public class IntValue : ScriptableObject
	{
		[Token(Token = "0x4001182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int value;

		[Token(Token = "0x600146D")]
		[Address(RVA = "0xB58D2C", Offset = "0xB58D2C", VA = "0xB58D2C")]
		public IntValue()
		{
		}
	}
	[Token(Token = "0x20002D9")]
	[CreateAssetMenu(fileName = "BT_SpawnedEnemiesDATA", menuName = "VRKemono/SpawnedEnemiesDATA", order = 0)]
	public class SpawnedEnemiesDATA : ScriptableObject
	{
		[Token(Token = "0x4001183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<(float spawnTime, GameObject prefab, bool bRespawn, float spawnDelay)> spawnQueue;

		[Token(Token = "0x600146E")]
		[Address(RVA = "0xB58D34", Offset = "0xB58D34", VA = "0xB58D34")]
		public SpawnedEnemiesDATA()
		{
		}
	}
	[Token(Token = "0x20002DA")]
	[CreateAssetMenu(fileName = "newWaveDataValue", menuName = "VRKemono/WaveDataValue", order = 0)]
	public class WaveDataValue : ScriptableObject
	{
		[Token(Token = "0x4001184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WaveData value;

		[Token(Token = "0x600146F")]
		[Address(RVA = "0xB58DB0", Offset = "0xB58DB0", VA = "0xB58DB0")]
		public WaveDataValue()
		{
		}
	}
	[Token(Token = "0x20002DB")]
	public class AI_Archer : MonoBehaviour
	{
		[Token(Token = "0x4001185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int Level;

		[Token(Token = "0x4001186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float Health;

		[Token(Token = "0x4001187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform Target;

		[Token(Token = "0x4001188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform ArrowDirection;

		[Token(Token = "0x4001189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject PF_Arrow;

		[Token(Token = "0x400118A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float _accuracyKoef;

		[Token(Token = "0x400118B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Animator _anim;

		[Token(Token = "0x400118C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CharacterController _charController;

		[Token(Token = "0x400118D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 _targetVelocity;

		[Token(Token = "0x6001470")]
		[Address(RVA = "0xB58DB8", Offset = "0xB58DB8", VA = "0xB58DB8")]
		private Color GetHealthColor()
		{
			return default(Color);
		}

		[Token(Token = "0x6001471")]
		[Address(RVA = "0xB58E20", Offset = "0xB58E20", VA = "0xB58E20")]
		private Color GetLevelColor()
		{
			return default(Color);
		}

		[Token(Token = "0x6001472")]
		[Address(RVA = "0xB58E68", Offset = "0xB58E68", VA = "0xB58E68")]
		private void Start()
		{
		}

		[Token(Token = "0x6001473")]
		[Address(RVA = "0xB59028", Offset = "0xB59028", VA = "0xB59028")]
		private void SetupByLevel()
		{
		}

		[Token(Token = "0x6001474")]
		[Address(RVA = "0xB58F54", Offset = "0xB58F54", VA = "0xB58F54")]
		private void LookAtTarget()
		{
		}

		[Token(Token = "0x6001475")]
		[Address(RVA = "0xB590F8", Offset = "0xB590F8", VA = "0xB590F8")]
		private void I_Shoot()
		{
		}

		[Token(Token = "0x6001476")]
		[Address(RVA = "0xB5914C", Offset = "0xB5914C", VA = "0xB5914C")]
		public void AC_ShootArrow()
		{
		}

		[Token(Token = "0x6001477")]
		[Address(RVA = "0xB59384", Offset = "0xB59384", VA = "0xB59384")]
		public AI_Archer()
		{
		}
	}
	[Token(Token = "0x20002DC")]
	public class AI_EnemyLampion : MonoBehaviour
	{
		[Token(Token = "0x20002DD")]
		public enum LAMP_AI
		{
			[Token(Token = "0x40011A5")]
			IDLE,
			[Token(Token = "0x40011A6")]
			STAGE_1,
			[Token(Token = "0x40011A7")]
			STAGE_2,
			[Token(Token = "0x40011A8")]
			ATTACK,
			[Token(Token = "0x40011A9")]
			DEAD
		}

		[Token(Token = "0x20002DE")]
		[CompilerGenerated]
		private sealed class <CR_Phase2>d__28 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40011AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AI_EnemyLampion <>4__this;

			[Token(Token = "0x1700023F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600148A")]
				[Address(RVA = "0xB5A29C", Offset = "0xB5A29C", VA = "0xB5A29C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000240")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600148C")]
				[Address(RVA = "0xB5A2E4", Offset = "0xB5A2E4", VA = "0xB5A2E4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001487")]
			[Address(RVA = "0xB59810", Offset = "0xB59810", VA = "0xB59810")]
			[DebuggerHidden]
			public <CR_Phase2>d__28(int <>1__state)
			{
			}

			[Token(Token = "0x6001488")]
			[Address(RVA = "0xB5A160", Offset = "0xB5A160", VA = "0xB5A160", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001489")]
			[Address(RVA = "0xB5A164", Offset = "0xB5A164", VA = "0xB5A164", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600148B")]
			[Address(RVA = "0xB5A2A4", Offset = "0xB5A2A4", VA = "0xB5A2A4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002DF")]
		[CompilerGenerated]
		private sealed class <CR_Phase1>d__29 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40011AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AI_EnemyLampion <>4__this;

			[Token(Token = "0x17000241")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001490")]
				[Address(RVA = "0xB5A428", Offset = "0xB5A428", VA = "0xB5A428", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000242")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001492")]
				[Address(RVA = "0xB5A470", Offset = "0xB5A470", VA = "0xB5A470", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600148D")]
			[Address(RVA = "0xB59838", Offset = "0xB59838", VA = "0xB59838")]
			[DebuggerHidden]
			public <CR_Phase1>d__29(int <>1__state)
			{
			}

			[Token(Token = "0x600148E")]
			[Address(RVA = "0xB5A2EC", Offset = "0xB5A2EC", VA = "0xB5A2EC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600148F")]
			[Address(RVA = "0xB5A2F0", Offset = "0xB5A2F0", VA = "0xB5A2F0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001491")]
			[Address(RVA = "0xB5A430", Offset = "0xB5A430", VA = "0xB5A430", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002E0")]
		[CompilerGenerated]
		private sealed class <CR_Attack>d__32 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40011B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AI_EnemyLampion <>4__this;

			[Token(Token = "0x40011B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private LAMP_AI <prevState>5__2;

			[Token(Token = "0x17000243")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001496")]
				[Address(RVA = "0xB5A7AC", Offset = "0xB5A7AC", VA = "0xB5A7AC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000244")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001498")]
				[Address(RVA = "0xB5A7F4", Offset = "0xB5A7F4", VA = "0xB5A7F4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001493")]
			[Address(RVA = "0xB59A84", Offset = "0xB59A84", VA = "0xB59A84")]
			[DebuggerHidden]
			public <CR_Attack>d__32(int <>1__state)
			{
			}

			[Token(Token = "0x6001494")]
			[Address(RVA = "0xB5A478", Offset = "0xB5A478", VA = "0xB5A478", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001495")]
			[Address(RVA = "0xB5A47C", Offset = "0xB5A47C", VA = "0xB5A47C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001497")]
			[Address(RVA = "0xB5A7B4", Offset = "0xB5A7B4", VA = "0xB5A7B4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002E1")]
		[CompilerGenerated]
		private sealed class <CR_Destroy>d__35 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40011B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AI_EnemyLampion <>4__this;

			[Token(Token = "0x17000245")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600149C")]
				[Address(RVA = "0xB5AB90", Offset = "0xB5AB90", VA = "0xB5AB90", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000246")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600149E")]
				[Address(RVA = "0xB5ABD8", Offset = "0xB5ABD8", VA = "0xB5ABD8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001499")]
			[Address(RVA = "0xB5A0C0", Offset = "0xB5A0C0", VA = "0xB5A0C0")]
			[DebuggerHidden]
			public <CR_Destroy>d__35(int <>1__state)
			{
			}

			[Token(Token = "0x600149A")]
			[Address(RVA = "0xB5A7FC", Offset = "0xB5A7FC", VA = "0xB5A7FC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600149B")]
			[Address(RVA = "0xB5A800", Offset = "0xB5A800", VA = "0xB5A800", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600149D")]
			[Address(RVA = "0xB5AB98", Offset = "0xB5AB98", VA = "0xB5AB98", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400118E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int Level;

		[Token(Token = "0x400118F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Animator animL2;

		[Token(Token = "0x4001190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Animator animL3;

		[Token(Token = "0x4001191")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioSource sndShurThrow;

		[Token(Token = "0x4001192")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public LAMP_AI AI_State;

		[Token(Token = "0x4001193")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SplineController Controller;

		[Token(Token = "0x4001194")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public TextMeshPro Score;

		[Token(Token = "0x4001195")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject PF_Shuriken;

		[Token(Token = "0x4001196")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Range(0f, 1f)]
		public float calmTurnSpeed;

		[Token(Token = "0x4001197")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float activeTurnSpeed;

		[Token(Token = "0x4001198")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Animator anim;

		[Token(Token = "0x4001199")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform[] ShurikensMain;

		[Token(Token = "0x400119A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform[] ShurikensLeft;

		[Token(Token = "0x400119B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform[] ShurikensRight;

		[Token(Token = "0x400119C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private MaterialPropertyBlock _block;

		[Token(Token = "0x400119D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Renderer _rendererMain;

		[Token(Token = "0x400119E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Renderer _rendererLeft;

		[Token(Token = "0x400119F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Renderer _rendererRight;

		[Token(Token = "0x40011A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Vector3 aimCorrection;

		[Token(Token = "0x40011A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private int _prizeScore;

		[Token(Token = "0x40011A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private int _partsDestroyed;

		[Token(Token = "0x40011A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private int _shurikenNum;

		[Token(Token = "0x6001478")]
		[Address(RVA = "0xB593A4", Offset = "0xB593A4", VA = "0xB593A4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001479")]
		[Address(RVA = "0xB59584", Offset = "0xB59584", VA = "0xB59584")]
		private void SetEmmisionBrightness(float pBrightness)
		{
		}

		[Token(Token = "0x600147A")]
		[Address(RVA = "0xB594E0", Offset = "0xB594E0", VA = "0xB594E0")]
		private void UpdateAnimByState()
		{
		}

		[Token(Token = "0x600147B")]
		[Address(RVA = "0xB596C8", Offset = "0xB596C8", VA = "0xB596C8")]
		public void EVT_PHASE1()
		{
		}

		[Token(Token = "0x600147C")]
		[Address(RVA = "0xB5976C", Offset = "0xB5976C", VA = "0xB5976C")]
		public void EVT_PHASE2()
		{
		}

		[Token(Token = "0x600147D")]
		[Address(RVA = "0xB597A8", Offset = "0xB597A8", VA = "0xB597A8")]
		[IteratorStateMachine(typeof(<CR_Phase2>d__28))]
		private IEnumerator CR_Phase2()
		{
			return null;
		}

		[Token(Token = "0x600147E")]
		[Address(RVA = "0xB59704", Offset = "0xB59704", VA = "0xB59704")]
		[IteratorStateMachine(typeof(<CR_Phase1>d__29))]
		private IEnumerator CR_Phase1()
		{
			return null;
		}

		[Token(Token = "0x600147F")]
		[Address(RVA = "0xB59860", Offset = "0xB59860", VA = "0xB59860")]
		public void EVT_Attack()
		{
		}

		[Token(Token = "0x6001480")]
		[Address(RVA = "0xB598FC", Offset = "0xB598FC", VA = "0xB598FC")]
		private void SpawnShurikens(Transform[] trSh, int shurikenNum = 8)
		{
		}

		[Token(Token = "0x6001481")]
		[Address(RVA = "0xB59894", Offset = "0xB59894", VA = "0xB59894")]
		[IteratorStateMachine(typeof(<CR_Attack>d__32))]
		private IEnumerator CR_Attack()
		{
			return null;
		}

		[Token(Token = "0x6001482")]
		[Address(RVA = "0xB59AAC", Offset = "0xB59AAC", VA = "0xB59AAC")]
		private void DestroyShurikerns(Transform[] trSh)
		{
		}

		[Token(Token = "0x6001483")]
		[Address(RVA = "0xB59B88", Offset = "0xB59B88", VA = "0xB59B88")]
		public void EVT_Destroy(GameObject hitLamp)
		{
		}

		[Token(Token = "0x6001484")]
		[Address(RVA = "0xB5A058", Offset = "0xB5A058", VA = "0xB5A058")]
		[IteratorStateMachine(typeof(<CR_Destroy>d__35))]
		private IEnumerator CR_Destroy()
		{
			return null;
		}

		[Token(Token = "0x6001485")]
		[Address(RVA = "0xB59DEC", Offset = "0xB59DEC", VA = "0xB59DEC")]
		private void ThrowDeathShuriken(float deviationAngle)
		{
		}

		[Token(Token = "0x6001486")]
		[Address(RVA = "0xB5A0E8", Offset = "0xB5A0E8", VA = "0xB5A0E8")]
		public AI_EnemyLampion()
		{
		}
	}
	[Token(Token = "0x20002E2")]
	public class AI_Ninja : MonoBehaviour
	{
		[Token(Token = "0x20002E3")]
		[CompilerGenerated]
		private sealed class <CR_Start>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40011BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public AI_Ninja <>4__this;

			[Token(Token = "0x40011C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <i>5__2;

			[Token(Token = "0x17000247")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014A7")]
				[Address(RVA = "0xB5B358", Offset = "0xB5B358", VA = "0xB5B358", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000248")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014A9")]
				[Address(RVA = "0xB5B3A0", Offset = "0xB5B3A0", VA = "0xB5B3A0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014A4")]
			[Address(RVA = "0xB5ACE8", Offset = "0xB5ACE8", VA = "0xB5ACE8")]
			[DebuggerHidden]
			public <CR_Start>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x60014A5")]
			[Address(RVA = "0xB5B088", Offset = "0xB5B088", VA = "0xB5B088", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014A6")]
			[Address(RVA = "0xB5B08C", Offset = "0xB5B08C", VA = "0xB5B08C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014A8")]
			[Address(RVA = "0xB5B360", Offset = "0xB5B360", VA = "0xB5B360", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40011B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public PuppetMaster pMaster;

		[Token(Token = "0x40011B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public HitReaction hReaction;

		[Token(Token = "0x40011B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IArcadeWave aWave;

		[Token(Token = "0x40011BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Animator anim;

		[Token(Token = "0x40011BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject Katana;

		[Token(Token = "0x40011BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float Health;

		[Token(Token = "0x600149F")]
		[Address(RVA = "0xB5ABE0", Offset = "0xB5ABE0", VA = "0xB5ABE0")]
		private void Start()
		{
		}

		[Token(Token = "0x60014A0")]
		[Address(RVA = "0xB5AC80", Offset = "0xB5AC80", VA = "0xB5AC80")]
		[IteratorStateMachine(typeof(<CR_Start>d__7))]
		private IEnumerator CR_Start()
		{
			return null;
		}

		[Token(Token = "0x60014A1")]
		[Address(RVA = "0xB5AD10", Offset = "0xB5AD10", VA = "0xB5AD10")]
		public void ON_ArrowHit(RaycastHit hit)
		{
		}

		[Token(Token = "0x60014A2")]
		[Address(RVA = "0xB5AF3C", Offset = "0xB5AF3C", VA = "0xB5AF3C")]
		private void Dead()
		{
		}

		[Token(Token = "0x60014A3")]
		[Address(RVA = "0xB5B078", Offset = "0xB5B078", VA = "0xB5B078")]
		public AI_Ninja()
		{
		}
	}
	[Token(Token = "0x20002E4")]
	public class AI_SwordThing : MonoBehaviour
	{
		[Token(Token = "0x40011C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float rotSpeed;

		[Token(Token = "0x60014AA")]
		[Address(RVA = "0xB5B3A8", Offset = "0xB5B3A8", VA = "0xB5B3A8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60014AB")]
		[Address(RVA = "0xB5B3F4", Offset = "0xB5B3F4", VA = "0xB5B3F4")]
		public AI_SwordThing()
		{
		}
	}
	[Token(Token = "0x20002E5")]
	public class ANDR_LevelFilter : MonoBehaviour
	{
		[Token(Token = "0x40011C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string AddonSceneName;

		[Token(Token = "0x40011C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string MobileAddonScene;

		[Token(Token = "0x40011C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string Quest2AddonScene;

		[Token(Token = "0x40011C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject[] objToHide;

		[Token(Token = "0x40011C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject[] objToShow;

		[Token(Token = "0x40011C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool bJustHideShow;

		[Token(Token = "0x60014AC")]
		[Address(RVA = "0xB5B404", Offset = "0xB5B404", VA = "0xB5B404")]
		private void Start()
		{
		}

		[Token(Token = "0x60014AD")]
		[Address(RVA = "0xB5B560", Offset = "0xB5B560", VA = "0xB5B560")]
		public void EVT_OnSettingsLoaded()
		{
		}

		[Token(Token = "0x60014AE")]
		[Address(RVA = "0xB5B6B8", Offset = "0xB5B6B8", VA = "0xB5B6B8")]
		private void LoadScenes()
		{
		}

		[Token(Token = "0x60014AF")]
		[Address(RVA = "0xB5B7B4", Offset = "0xB5B7B4", VA = "0xB5B7B4")]
		public ANDR_LevelFilter()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20002E6")]
	public class SplinesDictionary : Extensions.SerializableDictionary<string, GameObject>
	{
		[Token(Token = "0x60014B0")]
		[Address(RVA = "0xB5B7BC", Offset = "0xB5B7BC", VA = "0xB5B7BC")]
		public SplinesDictionary()
		{
		}
	}
	[Token(Token = "0x20002E7")]
	public class BowTrainerManager : MonoBehaviour
	{
		[Token(Token = "0x20002E8")]
		[CompilerGenerated]
		private sealed class <CR_SpawnProcess>d__37 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40011E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BowTrainerManager <>4__this;

			[Token(Token = "0x1700024B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014C6")]
				[Address(RVA = "0xB5D2A0", Offset = "0xB5D2A0", VA = "0xB5D2A0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700024C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014C8")]
				[Address(RVA = "0xB5D2E8", Offset = "0xB5D2E8", VA = "0xB5D2E8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014C3")]
			[Address(RVA = "0xB5CB88", Offset = "0xB5CB88", VA = "0xB5CB88")]
			[DebuggerHidden]
			public <CR_SpawnProcess>d__37(int <>1__state)
			{
			}

			[Token(Token = "0x60014C4")]
			[Address(RVA = "0xB5D000", Offset = "0xB5D000", VA = "0xB5D000", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014C5")]
			[Address(RVA = "0xB5D004", Offset = "0xB5D004", VA = "0xB5D004", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014C7")]
			[Address(RVA = "0xB5D2A8", Offset = "0xB5D2A8", VA = "0xB5D2A8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002E9")]
		[CompilerGenerated]
		private sealed class <CR_WaitForWaveEnd>d__38 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x40011E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public BowTrainerManager <>4__this;

			[Token(Token = "0x40011E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <i>5__2;

			[Token(Token = "0x1700024D")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60014CC")]
				[Address(RVA = "0xB5D738", Offset = "0xB5D738", VA = "0xB5D738", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700024E")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014CE")]
				[Address(RVA = "0xB5D780", Offset = "0xB5D780", VA = "0xB5D780", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014C9")]
			[Address(RVA = "0xB5CBB0", Offset = "0xB5CBB0", VA = "0xB5CBB0")]
			[DebuggerHidden]
			public <CR_WaitForWaveEnd>d__38(int <>1__state)
			{
			}

			[Token(Token = "0x60014CA")]
			[Address(RVA = "0xB5D2F0", Offset = "0xB5D2F0", VA = "0xB5D2F0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014CB")]
			[Address(RVA = "0xB5D2F4", Offset = "0xB5D2F4", VA = "0xB5D2F4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014CD")]
			[Address(RVA = "0xB5D740", Offset = "0xB5D740", VA = "0xB5D740", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20002EA")]
		[CompilerGenerated]
		private sealed class <CR_RunAfterSpawnFinished>d__40 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40011E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40011E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x40011EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public BowTrainerManager <>4__this;

			[Token(Token = "0x40011EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private int <cDownTime>5__2;

			[Token(Token = "0x40011EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			private int <i>5__3;

			[Token(Token = "0x1700024F")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60014D2")]
				[Address(RVA = "0xB5DE88", Offset = "0xB5DE88", VA = "0xB5DE88", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x17000250")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014D4")]
				[Address(RVA = "0xB5DED0", Offset = "0xB5DED0", VA = "0xB5DED0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014CF")]
			[Address(RVA = "0xB5CD84", Offset = "0xB5CD84", VA = "0xB5CD84")]
			[DebuggerHidden]
			public <CR_RunAfterSpawnFinished>d__40(int <>1__state)
			{
			}

			[Token(Token = "0x60014D0")]
			[Address(RVA = "0xB5D7DC", Offset = "0xB5D7DC", VA = "0xB5D7DC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014D1")]
			[Address(RVA = "0xB5D7E0", Offset = "0xB5D7E0", VA = "0xB5D7E0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014D3")]
			[Address(RVA = "0xB5DE90", Offset = "0xB5DE90", VA = "0xB5DE90", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40011C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private IntValue _playerScore;

		[Token(Token = "0x40011C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private IntEvent _playerScoreSignal;

		[Token(Token = "0x40011CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		public WaveData startData;

		[Token(Token = "0x40011CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private WaveDataValue _currentWave;

		[Token(Token = "0x40011CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		public int CrossbowUnlockScore;

		[Token(Token = "0x40011CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject[] ActivateObjects;

		[Token(Token = "0x40011CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject[] DeactivateObjects;

		[Token(Token = "0x40011CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject[] RoofScaleObjs;

		[Token(Token = "0x40011D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public GameObject RoofObject;

		[Token(Token = "0x40011D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject Messanger;

		[Token(Token = "0x40011D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject[] CrossBowPrizes;

		[Token(Token = "0x40011D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private VoidEvent _OnWaveStartEvent;

		[Token(Token = "0x40011D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private VoidEvent _OnWaveEndEvent;

		[Token(Token = "0x40011D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private TextEvent _OnUI_CountDown;

		[Token(Token = "0x40011D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private TextEvent _OnUI_WaveInfoChanged;

		[Token(Token = "0x40011D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[SerializeField]
		private VoidEvent _On_MassKharakiri;

		[Token(Token = "0x40011D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		private EnemySpawnEvent _On_EnemySpawnRequest;

		[Token(Token = "0x40011D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		private TextEvent _On_Achievment;

		[Token(Token = "0x40011DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[SerializeField]
		private VoidEvent _On_Game_Start;

		[Token(Token = "0x40011DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float _waveStartTime;

		[Token(Token = "0x40011DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[SerializeField]
		private ActiveEnemiesValue _spawnedEnemies;

		[Token(Token = "0x40011DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[SerializeField]
		private SpawnedEnemiesDATA _spawnedDATA;

		[Token(Token = "0x40011DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool _CONTINUE_SPAWNING;

		[Token(Token = "0x40011DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC9")]
		private bool _gameStarted;

		[Token(Token = "0x40011E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private HashSet<int> _singleBatchIDs;

		[Token(Token = "0x17000249")]
		private bool _hasWaveTimedout
		{
			[Token(Token = "0x60014B1")]
			[Address(RVA = "0xB5B804", Offset = "0xB5B804", VA = "0xB5B804")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700024A")]
		public WaveDataValue currentWave
		{
			[Token(Token = "0x60014B2")]
			[Address(RVA = "0xB5B844", Offset = "0xB5B844", VA = "0xB5B844")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60014B3")]
		[Address(RVA = "0xB5B84C", Offset = "0xB5B84C", VA = "0xB5B84C")]
		public void EVT_OnSettingsLoaded()
		{
		}

		[Token(Token = "0x60014B4")]
		[Address(RVA = "0xB5B91C", Offset = "0xB5B91C", VA = "0xB5B91C")]
		public void EVT_GameStartRequested()
		{
		}

		[Token(Token = "0x60014B5")]
		[Address(RVA = "0xB5B938", Offset = "0xB5B938", VA = "0xB5B938")]
		public void EVT_OnStartGame()
		{
		}

		[Token(Token = "0x60014B6")]
		[Address(RVA = "0xB5BD2C", Offset = "0xB5BD2C", VA = "0xB5BD2C")]
		public bool UnlockedKyodoPrize()
		{
			return default(bool);
		}

		[Token(Token = "0x60014B7")]
		[Address(RVA = "0xB5BDCC", Offset = "0xB5BDCC", VA = "0xB5BDCC")]
		private void ABORT()
		{
		}

		[Token(Token = "0x60014B8")]
		[Address(RVA = "0xB5BA8C", Offset = "0xB5BA8C", VA = "0xB5BA8C")]
		private void PrepareNewWave()
		{
		}

		[Token(Token = "0x60014B9")]
		[Address(RVA = "0xB5C740", Offset = "0xB5C740", VA = "0xB5C740")]
		private int CalcBatchCount()
		{
			return default(int);
		}

		[Token(Token = "0x60014BA")]
		[Address(RVA = "0xB5BDD4", Offset = "0xB5BDD4", VA = "0xB5BDD4")]
		private void ParseAndSheduleSpawners()
		{
		}

		[Token(Token = "0x60014BB")]
		[Address(RVA = "0xB5CA50", Offset = "0xB5CA50", VA = "0xB5CA50")]
		[IteratorStateMachine(typeof(<CR_SpawnProcess>d__37))]
		private IEnumerator CR_SpawnProcess()
		{
			return null;
		}

		[Token(Token = "0x60014BC")]
		[Address(RVA = "0xB5CAB8", Offset = "0xB5CAB8", VA = "0xB5CAB8")]
		[IteratorStateMachine(typeof(<CR_WaitForWaveEnd>d__38))]
		private IEnumerator<float> CR_WaitForWaveEnd()
		{
			return null;
		}

		[Token(Token = "0x60014BD")]
		[Address(RVA = "0xB5CBD8", Offset = "0xB5CBD8", VA = "0xB5CBD8")]
		private bool LiveEnemyLeft()
		{
			return default(bool);
		}

		[Token(Token = "0x60014BE")]
		[Address(RVA = "0xB5CB20", Offset = "0xB5CB20", VA = "0xB5CB20")]
		[IteratorStateMachine(typeof(<CR_RunAfterSpawnFinished>d__40))]
		private IEnumerator<float> CR_RunAfterSpawnFinished()
		{
			return null;
		}

		[Token(Token = "0x60014BF")]
		[Address(RVA = "0xB5CDAC", Offset = "0xB5CDAC", VA = "0xB5CDAC")]
		private static void RestrictPlayerColomotion()
		{
		}

		[Token(Token = "0x60014C0")]
		[Address(RVA = "0xB5C660", Offset = "0xB5C660", VA = "0xB5C660")]
		private void AcivateWaveObjects(bool bHideOverride = true)
		{
		}

		[Token(Token = "0x60014C1")]
		[Address(RVA = "0xB5C590", Offset = "0xB5C590", VA = "0xB5C590")]
		private void DeactivateWaveObjects()
		{
		}

		[Token(Token = "0x60014C2")]
		[Address(RVA = "0xB5CF74", Offset = "0xB5CF74", VA = "0xB5CF74")]
		public BowTrainerManager()
		{
		}
	}
	[Token(Token = "0x20002EB")]
	public class EnemyNinjaStar : MonoBehaviour
	{
		[Token(Token = "0x40011ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int poolIndex;

		[Token(Token = "0x40011EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float Time2Live;

		[Token(Token = "0x40011EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Rigidbody rBody;

		[Token(Token = "0x40011F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float throwForce;

		[Token(Token = "0x40011F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool _hitObject;

		[Token(Token = "0x40011F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		private bool _isInited;

		[Token(Token = "0x40011F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected FBKEvent _effEvent;

		[Token(Token = "0x60014D5")]
		[Address(RVA = "0xB51194", Offset = "0xB51194", VA = "0xB51194")]
		public void Shoot()
		{
		}

		[Token(Token = "0x60014D6")]
		[Address(RVA = "0xB5DF2C", Offset = "0xB5DF2C", VA = "0xB5DF2C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60014D7")]
		[Address(RVA = "0xB5DF70", Offset = "0xB5DF70", VA = "0xB5DF70")]
		private void I_ReturnToPool()
		{
		}

		[Token(Token = "0x60014D8")]
		[Address(RVA = "0xB5DF98", Offset = "0xB5DF98", VA = "0xB5DF98")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60014D9")]
		[Address(RVA = "0xB5E2D0", Offset = "0xB5E2D0", VA = "0xB5E2D0")]
		public EnemyNinjaStar()
		{
		}
	}
	[Token(Token = "0x20002EC")]
	public class EnemyShuriken : MonoBehaviour
	{
		[Token(Token = "0x40011F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public int poolIndex;

		[Token(Token = "0x40011F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float Time2Live;

		[Token(Token = "0x40011F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Rigidbody rBody;

		[Token(Token = "0x40011F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float throwForce;

		[Token(Token = "0x40011F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private bool _hitObject;

		[Token(Token = "0x40011F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		private bool _isInited;

		[Token(Token = "0x40011FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public ShurikenPool parentPool;

		[Token(Token = "0x40011FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private IntEvent _playerScoreSignal;

		[Token(Token = "0x40011FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private ScoreEvent _scoreEvent;

		[Token(Token = "0x60014DA")]
		[Address(RVA = "0xB534A4", Offset = "0xB534A4", VA = "0xB534A4")]
		public void Shoot()
		{
		}

		[Token(Token = "0x60014DB")]
		[Address(RVA = "0xB5E2E8", Offset = "0xB5E2E8", VA = "0xB5E2E8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60014DC")]
		[Address(RVA = "0xB5E32C", Offset = "0xB5E32C", VA = "0xB5E32C")]
		private void I_ReturnToPool()
		{
		}

		[Token(Token = "0x60014DD")]
		[Address(RVA = "0xB5E36C", Offset = "0xB5E36C", VA = "0xB5E36C")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60014DE")]
		[Address(RVA = "0xB5E650", Offset = "0xB5E650", VA = "0xB5E650")]
		public EnemyShuriken()
		{
		}
	}
	[Token(Token = "0x20002ED")]
	public abstract class IArcadeWave : MonoBehaviour
	{
		[Token(Token = "0x40011FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int currentCount;

		[Token(Token = "0x40011FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float attackDelay;

		[Token(Token = "0x40011FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float nextWaveStartDelay;

		[Token(Token = "0x4001200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IArcadeWave nextWave;

		[Token(Token = "0x4001201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected bool _waveEnded;

		[Token(Token = "0x4001202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public LampGroupManager groupManager;

		[Token(Token = "0x60014DF")]
		[Address(RVA = "0xB5E668", Offset = "0xB5E668", VA = "0xB5E668")]
		private void Start()
		{
		}

		[Token(Token = "0x60014E0")]
		[Address(RVA = "0xB5E674", Offset = "0xB5E674", VA = "0xB5E674")]
		private void Update()
		{
		}

		[Token(Token = "0x60014E1")]
		[Address(RVA = "0xB5E680", Offset = "0xB5E680", VA = "0xB5E680")]
		public void I_StartNextWave()
		{
		}

		[Token(Token = "0x60014E2")]
		public abstract void ON_EnemtDestroy();

		[Token(Token = "0x60014E3")]
		public abstract void ON_WaveStart();

		[Token(Token = "0x60014E4")]
		public abstract void ON_WaveCheck();

		[Token(Token = "0x60014E5")]
		[Address(RVA = "0xB5E710", Offset = "0xB5E710", VA = "0xB5E710", Slot = "7")]
		public virtual void ON_WaveEnd()
		{
		}

		[Token(Token = "0x60014E6")]
		[Address(RVA = "0xB5E7B0", Offset = "0xB5E7B0", VA = "0xB5E7B0")]
		protected IArcadeWave()
		{
		}
	}
	[Token(Token = "0x20002EE")]
	public class LampGroupManager : MonoBehaviour
	{
		[Token(Token = "0x4001203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject lampPrefab;

		[Token(Token = "0x4001204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CurvySpline path;

		[Token(Token = "0x4001205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MovementDirection direction;

		[Token(Token = "0x4001206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float speed;

		[Token(Token = "0x4001207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int lampNum;

		[Token(Token = "0x4001208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(0f, 1f)]
		public float startOffset;

		[Token(Token = "0x4001209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0.01f, 0.2f)]
		public float interval;

		[Token(Token = "0x400120A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<AI_EnemyLampion> AI_Lamps;

		[Token(Token = "0x60014E7")]
		[Address(RVA = "0xB5E7CC", Offset = "0xB5E7CC", VA = "0xB5E7CC")]
		public void InstantiateLamps()
		{
		}

		[Token(Token = "0x60014E8")]
		[Address(RVA = "0xB5EA90", Offset = "0xB5EA90", VA = "0xB5EA90")]
		public void CleanUpLampList()
		{
		}

		[Token(Token = "0x60014E9")]
		[Address(RVA = "0xB5EC04", Offset = "0xB5EC04", VA = "0xB5EC04")]
		public AI_EnemyLampion GetRandomLamp()
		{
			return null;
		}

		[Token(Token = "0x60014EA")]
		[Address(RVA = "0xB5EC98", Offset = "0xB5EC98", VA = "0xB5EC98")]
		private void Start()
		{
		}

		[Token(Token = "0x60014EB")]
		[Address(RVA = "0xB5ED9C", Offset = "0xB5ED9C", VA = "0xB5ED9C")]
		public LampGroupManager()
		{
		}
	}
	[Token(Token = "0x20002EF")]
	public class LampWaveManager : IArcadeWave
	{
		[Token(Token = "0x400120B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float _cAttackTime;

		[Token(Token = "0x60014EC")]
		[Address(RVA = "0xB5EE30", Offset = "0xB5EE30", VA = "0xB5EE30", Slot = "4")]
		public override void ON_EnemtDestroy()
		{
		}

		[Token(Token = "0x60014ED")]
		[Address(RVA = "0xB5EED4", Offset = "0xB5EED4", VA = "0xB5EED4", Slot = "5")]
		public override void ON_WaveStart()
		{
		}

		[Token(Token = "0x60014EE")]
		[Address(RVA = "0xB5EF88", Offset = "0xB5EF88", VA = "0xB5EF88", Slot = "6")]
		public override void ON_WaveCheck()
		{
		}

		[Token(Token = "0x60014EF")]
		[Address(RVA = "0xB5F05C", Offset = "0xB5F05C", VA = "0xB5F05C")]
		public LampWaveManager()
		{
		}
	}
	[Token(Token = "0x20002F0")]
	public class LevelLoadTrigger : MonoBehaviour
	{
		[Token(Token = "0x20002F1")]
		[CompilerGenerated]
		private sealed class <CR_LoadLevel>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001210")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001211")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001212")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LevelLoadTrigger <>4__this;

			[Token(Token = "0x17000251")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60014F6")]
				[Address(RVA = "0xB5F374", Offset = "0xB5F374", VA = "0xB5F374", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000252")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60014F8")]
				[Address(RVA = "0xB5F3BC", Offset = "0xB5F3BC", VA = "0xB5F3BC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60014F3")]
			[Address(RVA = "0xB5F208", Offset = "0xB5F208", VA = "0xB5F208")]
			[DebuggerHidden]
			public <CR_LoadLevel>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x60014F4")]
			[Address(RVA = "0xB5F240", Offset = "0xB5F240", VA = "0xB5F240", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60014F5")]
			[Address(RVA = "0xB5F244", Offset = "0xB5F244", VA = "0xB5F244", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60014F7")]
			[Address(RVA = "0xB5F37C", Offset = "0xB5F37C", VA = "0xB5F37C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400120C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VoidEvent LevelChangeSignal;

		[Token(Token = "0x400120D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SceneLoader.GameLevels LevelToLoad;

		[Token(Token = "0x400120E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int SpawnPositionID;

		[Token(Token = "0x400120F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioSource SFX_Teleport;

		[Token(Token = "0x60014F0")]
		[Address(RVA = "0xB5F078", Offset = "0xB5F078", VA = "0xB5F078")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60014F1")]
		[Address(RVA = "0xB5F1A0", Offset = "0xB5F1A0", VA = "0xB5F1A0")]
		[IteratorStateMachine(typeof(<CR_LoadLevel>d__5))]
		private IEnumerator CR_LoadLevel()
		{
			return null;
		}

		[Token(Token = "0x60014F2")]
		[Address(RVA = "0xB5F230", Offset = "0xB5F230", VA = "0xB5F230")]
		public LevelLoadTrigger()
		{
		}
	}
	[Token(Token = "0x20002F2")]
	public class LODGroupPlatform : MonoBehaviour
	{
		[Token(Token = "0x4001213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LODGroup lodGroup;

		[Token(Token = "0x60014F9")]
		[Address(RVA = "0xB5F3C4", Offset = "0xB5F3C4", VA = "0xB5F3C4")]
		private void Awake()
		{
		}

		[Token(Token = "0x60014FA")]
		[Address(RVA = "0xB5F4C8", Offset = "0xB5F4C8", VA = "0xB5F4C8")]
		public LODGroupPlatform()
		{
		}
	}
	[Token(Token = "0x20002F3")]
	public class NinjaAnimationEvents : MonoBehaviour
	{
		[Token(Token = "0x4001214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public EN_NinjaBlack ninja;

		[Token(Token = "0x4001215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FeetSoundManager mngFeetSound;

		[Token(Token = "0x60014FB")]
		[Address(RVA = "0xB5F4D0", Offset = "0xB5F4D0", VA = "0xB5F4D0")]
		public void ANC_OnFeetStep()
		{
		}

		[Token(Token = "0x60014FC")]
		[Address(RVA = "0xB5F4E4", Offset = "0xB5F4E4", VA = "0xB5F4E4")]
		public void ANC_UnsheatheKatana()
		{
		}

		[Token(Token = "0x60014FD")]
		[Address(RVA = "0xB5F4E8", Offset = "0xB5F4E8", VA = "0xB5F4E8")]
		public void ANC_OnDeathAnimEnd()
		{
		}

		[Token(Token = "0x60014FE")]
		[Address(RVA = "0xB5F504", Offset = "0xB5F504", VA = "0xB5F504")]
		public void ANC_OnAttackStart()
		{
		}

		[Token(Token = "0x60014FF")]
		[Address(RVA = "0xB5F508", Offset = "0xB5F508", VA = "0xB5F508")]
		public void ANC_ThrowShuriken()
		{
		}

		[Token(Token = "0x6001500")]
		[Address(RVA = "0xB5F524", Offset = "0xB5F524", VA = "0xB5F524")]
		public void ANC_OnBodeFalldown()
		{
		}

		[Token(Token = "0x6001501")]
		[Address(RVA = "0xB5F534", Offset = "0xB5F534", VA = "0xB5F534")]
		public NinjaAnimationEvents()
		{
		}
	}
	[Token(Token = "0x20002F4")]
	public class NinjaGroupManager : IArcadeWave
	{
		[Token(Token = "0x4001216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<AI_Ninja> Ninjas;

		[Token(Token = "0x6001502")]
		[Address(RVA = "0xB5F53C", Offset = "0xB5F53C", VA = "0xB5F53C", Slot = "5")]
		public override void ON_WaveStart()
		{
		}

		[Token(Token = "0x6001503")]
		[Address(RVA = "0xB5F75C", Offset = "0xB5F75C", VA = "0xB5F75C", Slot = "6")]
		public override void ON_WaveCheck()
		{
		}

		[Token(Token = "0x6001504")]
		[Address(RVA = "0xB5F808", Offset = "0xB5F808", VA = "0xB5F808")]
		private void I_ActivateNext()
		{
		}

		[Token(Token = "0x6001505")]
		[Address(RVA = "0xB5F8F0", Offset = "0xB5F8F0", VA = "0xB5F8F0", Slot = "4")]
		public override void ON_EnemtDestroy()
		{
		}

		[Token(Token = "0x6001506")]
		[Address(RVA = "0xB5F9DC", Offset = "0xB5F9DC", VA = "0xB5F9DC")]
		public NinjaGroupManager()
		{
		}
	}
	[Token(Token = "0x20002F5")]
	public class Quest2ShowHide : MonoBehaviour
	{
		[Token(Token = "0x4001217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool bShowHideQ1;

		[Token(Token = "0x4001218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool bShowHideQ2;

		[Token(Token = "0x4001219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject[] Objs;

		[Token(Token = "0x6001507")]
		[Address(RVA = "0xB5FA6C", Offset = "0xB5FA6C", VA = "0xB5FA6C")]
		public void Start()
		{
		}

		[Token(Token = "0x6001508")]
		[Address(RVA = "0xB5FC0C", Offset = "0xB5FC0C", VA = "0xB5FC0C")]
		public Quest2ShowHide()
		{
		}
	}
	[Token(Token = "0x20002F6")]
	public class Screenshotmaker : MonoBehaviour
	{
		[Token(Token = "0x400121A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string savePath;

		[Token(Token = "0x400121B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int index;

		[Token(Token = "0x6001509")]
		[Address(RVA = "0xB5FC1C", Offset = "0xB5FC1C", VA = "0xB5FC1C")]
		private void Update()
		{
		}

		[Token(Token = "0x600150A")]
		[Address(RVA = "0xB5FFDC", Offset = "0xB5FFDC", VA = "0xB5FFDC")]
		public Screenshotmaker()
		{
		}
	}
	[Token(Token = "0x20002F7")]
	public class SetKinematicTimed : MonoBehaviour
	{
		[Token(Token = "0x400121C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float setTimeout;

		[Token(Token = "0x600150B")]
		[Address(RVA = "0xB5FFE4", Offset = "0xB5FFE4", VA = "0xB5FFE4")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600150C")]
		[Address(RVA = "0xB60034", Offset = "0xB60034", VA = "0xB60034")]
		private void I_SetKinematic()
		{
		}

		[Token(Token = "0x600150D")]
		[Address(RVA = "0xB60090", Offset = "0xB60090", VA = "0xB60090")]
		public SetKinematicTimed()
		{
		}
	}
	[Token(Token = "0x20002F8")]
	public class TEST_NinjaStar : MonoBehaviour
	{
		[Token(Token = "0x20002F9")]
		[CompilerGenerated]
		private sealed class <CR_ThrowNinjaStarSeries>d__5 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001221")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001222")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001223")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TEST_NinjaStar <>4__this;

			[Token(Token = "0x4001224")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <i>5__2;

			[Token(Token = "0x17000253")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001519")]
				[Address(RVA = "0xB60508", Offset = "0xB60508", VA = "0xB60508", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000254")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600151B")]
				[Address(RVA = "0xB60550", Offset = "0xB60550", VA = "0xB60550", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001516")]
			[Address(RVA = "0xB60128", Offset = "0xB60128", VA = "0xB60128")]
			[DebuggerHidden]
			public <CR_ThrowNinjaStarSeries>d__5(int <>1__state)
			{
			}

			[Token(Token = "0x6001517")]
			[Address(RVA = "0xB60408", Offset = "0xB60408", VA = "0xB60408", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001518")]
			[Address(RVA = "0xB6040C", Offset = "0xB6040C", VA = "0xB6040C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600151A")]
			[Address(RVA = "0xB60510", Offset = "0xB60510", VA = "0xB60510", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400121D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform T_Hand;

		[Token(Token = "0x400121E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Animator anim;

		[Token(Token = "0x400121F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioSource asource;

		[Token(Token = "0x4001220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int starNum;

		[Token(Token = "0x600150E")]
		[Address(RVA = "0xB600A0", Offset = "0xB600A0", VA = "0xB600A0")]
		private void ThrowSeries()
		{
		}

		[Token(Token = "0x600150F")]
		[Address(RVA = "0xB600C0", Offset = "0xB600C0", VA = "0xB600C0")]
		[IteratorStateMachine(typeof(<CR_ThrowNinjaStarSeries>d__5))]
		private IEnumerator CR_ThrowNinjaStarSeries()
		{
			return null;
		}

		[Token(Token = "0x6001510")]
		[Address(RVA = "0xB60150", Offset = "0xB60150", VA = "0xB60150")]
		public void ANC_YOU()
		{
		}

		[Token(Token = "0x6001511")]
		[Address(RVA = "0xB6016C", Offset = "0xB6016C", VA = "0xB6016C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001512")]
		[Address(RVA = "0xB601DC", Offset = "0xB601DC", VA = "0xB601DC")]
		public void ANC_AttackStart()
		{
		}

		[Token(Token = "0x6001513")]
		[Address(RVA = "0xB60290", Offset = "0xB60290", VA = "0xB60290")]
		public void ANC_Attack()
		{
		}

		[Token(Token = "0x6001514")]
		[Address(RVA = "0xB60344", Offset = "0xB60344", VA = "0xB60344")]
		public void ANC_ThrowNinjaStar()
		{
		}

		[Token(Token = "0x6001515")]
		[Address(RVA = "0xB603F8", Offset = "0xB603F8", VA = "0xB603F8")]
		public TEST_NinjaStar()
		{
		}
	}
	[Token(Token = "0x20002FA")]
	public class VFX_ByPlatform : MonoBehaviour
	{
		[Token(Token = "0x4001225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] VFX;

		[Token(Token = "0x600151C")]
		[Address(RVA = "0xB60558", Offset = "0xB60558", VA = "0xB60558")]
		private void Awake()
		{
		}

		[Token(Token = "0x600151D")]
		[Address(RVA = "0xB605CC", Offset = "0xB605CC", VA = "0xB605CC")]
		public VFX_ByPlatform()
		{
		}
	}
	[Token(Token = "0x20002FB")]
	public class WavesManager : MonoSingleton<WavesManager>
	{
		[Token(Token = "0x4001226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<IArcadeWave> waves;

		[Token(Token = "0x600151E")]
		[Address(RVA = "0xB605D4", Offset = "0xB605D4", VA = "0xB605D4")]
		private void REFRESH_WAVES()
		{
		}

		[Token(Token = "0x600151F")]
		[Address(RVA = "0xB60858", Offset = "0xB60858", VA = "0xB60858")]
		public WavesManager()
		{
		}
	}
	[Token(Token = "0x20002FC")]
	public class UI_BowTrainter : MonoBehaviour
	{
		[Token(Token = "0x4001227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TextMeshPro uicScore;

		[Token(Token = "0x4001228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TextMeshPro uiWave;

		[Token(Token = "0x4001229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TextMeshPro uiNextWave;

		[Token(Token = "0x400122A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public TextMeshPro uiNextWaveCDown;

		[Token(Token = "0x400122B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private IntValue _playerScore;

		[Token(Token = "0x400122C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private IntEvent _leaderBoardScoreSignal;

		[Token(Token = "0x6001520")]
		[Address(RVA = "0xB608E8", Offset = "0xB608E8", VA = "0xB608E8")]
		public void EVT_UpdateWaveInfo((Vector3 pos, string WaveID) info)
		{
		}

		[Token(Token = "0x6001521")]
		[Address(RVA = "0xB60910", Offset = "0xB60910", VA = "0xB60910")]
		public void EVT_UpdateCountDown(string text)
		{
		}

		[Token(Token = "0x6001522")]
		[Address(RVA = "0xB609A8", Offset = "0xB609A8", VA = "0xB609A8")]
		public void EVT_UpdateScore(int addScore)
		{
		}

		[Token(Token = "0x6001523")]
		[Address(RVA = "0xB60A48", Offset = "0xB60A48", VA = "0xB60A48")]
		public UI_BowTrainter()
		{
		}
	}
	[Token(Token = "0x20002FD")]
	public class UI_Manager : MonoSingleton<UI_Manager>
	{
		[Token(Token = "0x20002FE")]
		[CompilerGenerated]
		private sealed class <CR_ResetProgress>d__71 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001252")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001253")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x17000255")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600154C")]
				[Address(RVA = "0xB62DF0", Offset = "0xB62DF0", VA = "0xB62DF0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000256")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600154E")]
				[Address(RVA = "0xB62E38", Offset = "0xB62E38", VA = "0xB62E38", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001549")]
			[Address(RVA = "0xB62A2C", Offset = "0xB62A2C", VA = "0xB62A2C")]
			[DebuggerHidden]
			public <CR_ResetProgress>d__71(int <>1__state)
			{
			}

			[Token(Token = "0x600154A")]
			[Address(RVA = "0xB62B50", Offset = "0xB62B50", VA = "0xB62B50", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600154B")]
			[Address(RVA = "0xB62B54", Offset = "0xB62B54", VA = "0xB62B54", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600154D")]
			[Address(RVA = "0xB62DF8", Offset = "0xB62DF8", VA = "0xB62DF8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400122D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector2 SitStandOffsets;

		[Token(Token = "0x400122E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool bIsPauseMenuOn;

		[Token(Token = "0x400122F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject UI_ROOT;

		[Token(Token = "0x4001230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject DLG_QuitApp;

		[Token(Token = "0x4001231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject DLG_PauseMenu;

		[Token(Token = "0x4001232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject DLG_ResetProgress;

		[Token(Token = "0x4001233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject DLG_PAUSE;

		[Token(Token = "0x4001234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject Menu_Tooltip;

		[Token(Token = "0x4001235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Image UI_LeftHand;

		[Token(Token = "0x4001236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Image UI_RightHand;

		[Token(Token = "0x4001237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Sprite SP_LeftHand;

		[Token(Token = "0x4001238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Sprite SP_RightHand;

		[Token(Token = "0x4001239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Sprite SP_SelLeftHand;

		[Token(Token = "0x400123A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Sprite SP_SelRightHand;

		[Token(Token = "0x400123B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public TextMeshProUGUI txtVersion;

		[Token(Token = "0x400123C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public AudioSource aSource;

		[Token(Token = "0x400123D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public AudioClip SFX_Show;

		[Token(Token = "0x400123E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public AudioClip SFX_Hide;

		[Token(Token = "0x400123F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public AudioClip SFX_Click;

		[Token(Token = "0x4001240")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public OptionsManager UI_LocType;

		[Token(Token = "0x4001241")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public OptionsManager UI_RotType;

		[Token(Token = "0x4001242")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public SliderProgressBar UI_RotAngle;

		[Token(Token = "0x4001243")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public OptionsManager UI_CameraHeight;

		[Token(Token = "0x4001244")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public OptionsManager UI_Preset;

		[Token(Token = "0x4001245")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public OptionsManager UI_MSAA;

		[Token(Token = "0x4001246")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public OptionsManager UI_ShadowType;

		[Token(Token = "0x4001247")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public SliderProgressBar UI_ShadowDistance;

		[Token(Token = "0x4001248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public SliderProgressBar UI_LightCount;

		[Token(Token = "0x4001249")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public OptionsManager UI_PostEffect;

		[Token(Token = "0x400124A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public OptionsManager UI_TexFiltering;

		[Token(Token = "0x400124B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public SliderProgressBar UI_SFXVol;

		[Token(Token = "0x400124C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public SliderProgressBar UI_MusicVol;

		[Token(Token = "0x400124D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public SliderProgressBar UI_TextureScale;

		[Token(Token = "0x400124E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public OptionsManager UI_Experimental;

		[Token(Token = "0x400124F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public OptionsManager UI_KurosavaMode;

		[Token(Token = "0x4001250")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private bool _bCanInvokePauseMenu;

		[Token(Token = "0x4001251")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public TextEvent SwitchSignal;

		[Token(Token = "0x6001524")]
		[Address(RVA = "0xB60A50", Offset = "0xB60A50", VA = "0xB60A50")]
		private void Start()
		{
		}

		[Token(Token = "0x6001525")]
		[Address(RVA = "0xB60BA0", Offset = "0xB60BA0", VA = "0xB60BA0")]
		public void ON_Pause()
		{
		}

		[Token(Token = "0x6001526")]
		[Address(RVA = "0xB60F0C", Offset = "0xB60F0C", VA = "0xB60F0C")]
		public void ON_UnPause()
		{
		}

		[Token(Token = "0x6001527")]
		[Address(RVA = "0xB60FD0", Offset = "0xB60FD0", VA = "0xB60FD0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001528")]
		[Address(RVA = "0xB61110", Offset = "0xB61110", VA = "0xB61110")]
		private bool MenuButtonPressed()
		{
			return default(bool);
		}

		[Token(Token = "0x6001529")]
		[Address(RVA = "0xB61170", Offset = "0xB61170", VA = "0xB61170")]
		private void RestrictDrop(bool show)
		{
		}

		[Token(Token = "0x600152A")]
		[Address(RVA = "0xB55CD8", Offset = "0xB55CD8", VA = "0xB55CD8")]
		public void ShowPauseMenu()
		{
		}

		[Token(Token = "0x600152B")]
		[Address(RVA = "0xB60CC4", Offset = "0xB60CC4", VA = "0xB60CC4")]
		private void HidePauseMenu()
		{
		}

		[Token(Token = "0x600152C")]
		[Address(RVA = "0xB618BC", Offset = "0xB618BC", VA = "0xB618BC")]
		private void UI_2_Settings()
		{
		}

		[Token(Token = "0x600152D")]
		[Address(RVA = "0xB6130C", Offset = "0xB6130C", VA = "0xB6130C")]
		public void Settings_2_UI()
		{
		}

		[Token(Token = "0x600152E")]
		[Address(RVA = "0xB62104", Offset = "0xB62104", VA = "0xB62104")]
		public void UI_PAUSE_ResumeGame()
		{
		}

		[Token(Token = "0x600152F")]
		[Address(RVA = "0xB62130", Offset = "0xB62130", VA = "0xB62130")]
		public void UI_SWITCH_LANGUAGE(int langID)
		{
		}

		[Token(Token = "0x6001530")]
		[Address(RVA = "0xB6231C", Offset = "0xB6231C", VA = "0xB6231C")]
		public void QUIT_OK()
		{
		}

		[Token(Token = "0x6001531")]
		[Address(RVA = "0xB6234C", Offset = "0xB6234C", VA = "0xB6234C")]
		public void QUIT_CANCEL()
		{
		}

		[Token(Token = "0x6001532")]
		[Address(RVA = "0xB62398", Offset = "0xB62398", VA = "0xB62398")]
		public void UI_QUIT_GAME()
		{
		}

		[Token(Token = "0x6001533")]
		[Address(RVA = "0xB61F28", Offset = "0xB61F28", VA = "0xB61F28")]
		public void UI_PAUSE_LeftHand(bool playSFX = true)
		{
		}

		[Token(Token = "0x6001534")]
		[Address(RVA = "0xB61FEC", Offset = "0xB61FEC", VA = "0xB61FEC")]
		public void UI_PAUSE_RightHand(bool playSFX = true)
		{
		}

		[Token(Token = "0x6001535")]
		[Address(RVA = "0xB623E4", Offset = "0xB623E4", VA = "0xB623E4")]
		public void UI_SHITCH_HANDS()
		{
		}

		[Token(Token = "0x6001536")]
		[Address(RVA = "0xB623E8", Offset = "0xB623E8", VA = "0xB623E8")]
		public void UI_PLAY_CLICK_SFX()
		{
		}

		[Token(Token = "0x6001537")]
		[Address(RVA = "0xB6240C", Offset = "0xB6240C", VA = "0xB6240C")]
		public void UI_MENU_CLICK()
		{
		}

		[Token(Token = "0x6001538")]
		[Address(RVA = "0xB62410", Offset = "0xB62410", VA = "0xB62410")]
		private SO_AppSettingsDefaults GetDefPreset()
		{
			return null;
		}

		[Token(Token = "0x6001539")]
		[Address(RVA = "0xB624D4", Offset = "0xB624D4", VA = "0xB624D4")]
		public void UI_PAUSE_PRESET_NEXT()
		{
		}

		[Token(Token = "0x600153A")]
		[Address(RVA = "0xB62724", Offset = "0xB62724", VA = "0xB62724")]
		public void UI_PAUSE_PRESET_PREV()
		{
		}

		[Token(Token = "0x600153B")]
		[Address(RVA = "0xB620AC", Offset = "0xB620AC", VA = "0xB620AC")]
		private void MSAA_2_Index(int pMSAA)
		{
		}

		[Token(Token = "0x600153C")]
		[Address(RVA = "0xB61DD0", Offset = "0xB61DD0", VA = "0xB61DD0")]
		private void Index_2_MSAA(int pIndex)
		{
		}

		[Token(Token = "0x600153D")]
		[Address(RVA = "0xB624FC", Offset = "0xB624FC", VA = "0xB624FC")]
		public void OnPresetAction()
		{
		}

		[Token(Token = "0x600153E")]
		[Address(RVA = "0xB6274C", Offset = "0xB6274C", VA = "0xB6274C")]
		private int Index_MSAA(int Index)
		{
			return default(int);
		}

		[Token(Token = "0x600153F")]
		[Address(RVA = "0xB62788", Offset = "0xB62788", VA = "0xB62788")]
		private void UI_2_Preset()
		{
		}

		[Token(Token = "0x6001540")]
		[Address(RVA = "0xB62840", Offset = "0xB62840", VA = "0xB62840")]
		public void UI_SFX_Volume_Changed()
		{
		}

		[Token(Token = "0x6001541")]
		[Address(RVA = "0xB62844", Offset = "0xB62844", VA = "0xB62844")]
		public void UI_Music_Volume_Changed()
		{
		}

		[Token(Token = "0x6001542")]
		[Address(RVA = "0xB62848", Offset = "0xB62848", VA = "0xB62848")]
		public void UI_VISUAL_ACTION()
		{
		}

		[Token(Token = "0x6001543")]
		[Address(RVA = "0xB62888", Offset = "0xB62888", VA = "0xB62888")]
		public void UI_CANCEL_RESET()
		{
		}

		[Token(Token = "0x6001544")]
		[Address(RVA = "0xB628D4", Offset = "0xB628D4", VA = "0xB628D4")]
		public void UI_RESET_DIALOG()
		{
		}

		[Token(Token = "0x6001545")]
		[Address(RVA = "0xB62920", Offset = "0xB62920", VA = "0xB62920")]
		public void UI_RESET_PROGRESS()
		{
		}

		[Token(Token = "0x6001546")]
		[Address(RVA = "0xB629CC", Offset = "0xB629CC", VA = "0xB629CC")]
		[IteratorStateMachine(typeof(<CR_ResetProgress>d__71))]
		private IEnumerator CR_ResetProgress()
		{
			return null;
		}

		[Token(Token = "0x6001547")]
		[Address(RVA = "0xB62A54", Offset = "0xB62A54", VA = "0xB62A54")]
		public void UI_GAME_SELECT_STUB(int GameType)
		{
		}

		[Token(Token = "0x6001548")]
		[Address(RVA = "0xB62AF4", Offset = "0xB62AF4", VA = "0xB62AF4")]
		public UI_Manager()
		{
		}
	}
	[Token(Token = "0x20002FF")]
	[CreateAssetMenu(fileName = "New Arrow Damage Event", menuName = "VRKemono/Events/Arrow Damage Event")]
	public class ArrowDamageEvent : BaseGameEvent<(RaycastHit hit, int arrowIndex)>
	{
		[Token(Token = "0x600154F")]
		[Address(RVA = "0xB62E40", Offset = "0xB62E40", VA = "0xB62E40")]
		public ArrowDamageEvent()
		{
		}
	}
	[Token(Token = "0x2000300")]
	[CreateAssetMenu(fileName = "New Arrow Event", menuName = "VRKemono/Events/Arrow Event")]
	public class ArrowEvent : BaseGameEvent<(Transform arrow, Vector3 force, bool AI_mode, EN_Enemy_Archer archer, Vector3 targetPos, Vector3 targetVelocity, I_BowBase.eArrowType type)>
	{
		[Token(Token = "0x6001550")]
		[Address(RVA = "0xB62E88", Offset = "0xB62E88", VA = "0xB62E88")]
		public ArrowEvent()
		{
		}
	}
	[Token(Token = "0x2000301")]
	public abstract class BaseGameEvent<T> : ScriptableObject
	{
		[Token(Token = "0x4001254")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private readonly List<IGameEventListener<T>> eventListeners;

		[Token(Token = "0x6001551")]
		public void Signal(T item)
		{
		}

		[Token(Token = "0x6001552")]
		public void RegisterListener(IGameEventListener<T> listener)
		{
		}

		[Token(Token = "0x6001553")]
		public void UnRegisterListener(IGameEventListener<T> listener)
		{
		}

		[Token(Token = "0x6001554")]
		protected BaseGameEvent()
		{
		}
	}
	[Token(Token = "0x2000302")]
	[CreateAssetMenu(fileName = "New Dirt paint Event", menuName = "VRKemono/Events/Dirt Paint")]
	public class DirtPaintEvent : BaseGameEvent<(P3dPaintableTexture texture, Vector3 PosHit, Vector3 Normal, DirtPaintManager.eDirtType dirtType)>
	{
		[Token(Token = "0x6001555")]
		[Address(RVA = "0xB62ED0", Offset = "0xB62ED0", VA = "0xB62ED0")]
		public DirtPaintEvent()
		{
		}
	}
	[Token(Token = "0x2000303")]
	[CreateAssetMenu(fileName = "EVT_NewEnemySpawn", menuName = "VRKemono/Events/Enemy Spawn Event")]
	public class EnemySpawnEvent : BaseGameEvent<(GameObject prefab, float spawnDelay, bool bRespawn)>
	{
		[Token(Token = "0x6001556")]
		[Address(RVA = "0xB62F18", Offset = "0xB62F18", VA = "0xB62F18")]
		public EnemySpawnEvent()
		{
		}
	}
	[Token(Token = "0x2000304")]
	[CreateAssetMenu(fileName = "EVT_NewFeedbackEvent", menuName = "VRKemono/Events/Feedback Effect Event")]
	public class FBKEvent : BaseGameEvent<(string effName, Vector3 pos, Vector3 normal, Transform trAtt, ControllerHand hand)>
	{
		[Token(Token = "0x6001557")]
		[Address(RVA = "0xB62F60", Offset = "0xB62F60", VA = "0xB62F60")]
		public FBKEvent()
		{
		}
	}
	[Token(Token = "0x2000305")]
	[CreateAssetMenu(fileName = "New Footstep Event", menuName = "VRKemono/Events/Footstep Event")]
	public class FootstepEvent : BaseGameEvent<(Transform sender, Transform ground, Color feetColor)>
	{
		[Token(Token = "0x6001558")]
		[Address(RVA = "0xB62FA8", Offset = "0xB62FA8", VA = "0xB62FA8")]
		public FootstepEvent()
		{
		}
	}
	[Token(Token = "0x2000306")]
	[CreateAssetMenu(fileName = "New Integer Event", menuName = "VRKemono/Events/Int Event")]
	public class IntEvent : BaseGameEvent<int>
	{
		[Token(Token = "0x6001559")]
		[Address(RVA = "0xB62FF0", Offset = "0xB62FF0", VA = "0xB62FF0")]
		public IntEvent()
		{
		}
	}
	[Token(Token = "0x2000307")]
	[CreateAssetMenu(fileName = "EVT_NewPrefabSpawn", menuName = "VRKemono/Events/Prefab Spawn Event")]
	public class PrefabSpawnEvent : BaseGameEvent<(GameObject prefab, Vector3 pos)>
	{
		[Token(Token = "0x600155A")]
		[Address(RVA = "0xB63038", Offset = "0xB63038", VA = "0xB63038")]
		public PrefabSpawnEvent()
		{
		}
	}
	[Token(Token = "0x2000308")]
	[CreateAssetMenu(fileName = "New Score Event", menuName = "VRKemono/Events/Score Event")]
	public class ScoreEvent : BaseGameEvent<(Vector3 pos, string text)>
	{
		[Token(Token = "0x600155B")]
		[Address(RVA = "0xB63080", Offset = "0xB63080", VA = "0xB63080")]
		public ScoreEvent()
		{
		}
	}
	[Token(Token = "0x2000309")]
	[CreateAssetMenu(fileName = "New Shuriken Event", menuName = "VRKemono/Events/Shuriken Event")]
	public class ShurikenEvent : BaseGameEvent<(bool aimPlayer, Vector3 pos, Vector2 devAngles, Vector3 aimCorrection)>
	{
		[Token(Token = "0x600155C")]
		[Address(RVA = "0xB640C8", Offset = "0xB640C8", VA = "0xB640C8")]
		public ShurikenEvent()
		{
		}
	}
	[Token(Token = "0x200030A")]
	[CreateAssetMenu(fileName = "New Text Event", menuName = "VRKemono/Events/Text Event")]
	public class TextEvent : BaseGameEvent<(Vector3, string)>
	{
		[Token(Token = "0x600155D")]
		[Address(RVA = "0xB64110", Offset = "0xB64110", VA = "0xB64110")]
		public TextEvent()
		{
		}
	}
	[Token(Token = "0x200030B")]
	[CreateAssetMenu(fileName = "New Void Event", menuName = "VRKemono/Events/Void Event")]
	public class VoidEvent : BaseGameEvent<Void>
	{
		[Token(Token = "0x600155E")]
		[Address(RVA = "0xB64158", Offset = "0xB64158", VA = "0xB64158")]
		public void Signal()
		{
		}

		[Token(Token = "0x600155F")]
		[Address(RVA = "0xB641A4", Offset = "0xB641A4", VA = "0xB641A4")]
		public VoidEvent()
		{
		}
	}
	[Token(Token = "0x200030C")]
	public class ArrowDamageListener : BaseGameEventListener<(RaycastHit hit, int arrowIndex), ArrowDamageEvent, UnityArrowDamageEvent>
	{
		[Token(Token = "0x6001560")]
		[Address(RVA = "0xB641EC", Offset = "0xB641EC", VA = "0xB641EC")]
		public ArrowDamageListener()
		{
		}
	}
	[Token(Token = "0x200030D")]
	public class ArrowshootListener : BaseGameEventListener<(Transform arrow, Vector3 force, bool AI_mode, EN_Enemy_Archer archer, Vector3 targetPos, Vector3 targetVelocity, I_BowBase.eArrowType type), ArrowEvent, UnityArrowEvent>
	{
		[Token(Token = "0x6001561")]
		[Address(RVA = "0xB64234", Offset = "0xB64234", VA = "0xB64234")]
		public ArrowshootListener()
		{
		}
	}
	[Token(Token = "0x200030E")]
	public class BaseGameEventListener<T, E, UER> : MonoBehaviour, IGameEventListener<T> where E : BaseGameEvent<T> where UER : UnityEvent<T>
	{
		[Token(Token = "0x4001255")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private E gameEvent;

		[Token(Token = "0x4001256")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		[SerializeField]
		private UER unityEventResponse;

		[Token(Token = "0x17000257")]
		public E GameEvent
		{
			[Token(Token = "0x6001562")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001563")]
			set
			{
			}
		}

		[Token(Token = "0x6001564")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001565")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001566")]
		public void OnEventRaised(T item)
		{
		}

		[Token(Token = "0x6001567")]
		public BaseGameEventListener()
		{
		}
	}
	[Token(Token = "0x200030F")]
	public class DirtPaintListener : BaseGameEventListener<(P3dPaintableTexture texture, Vector3 PosHit, Vector3 Normal, DirtPaintManager.eDirtType dirtType), DirtPaintEvent, UnityDirtPaintEvent>
	{
		[Token(Token = "0x6001568")]
		[Address(RVA = "0xB6427C", Offset = "0xB6427C", VA = "0xB6427C")]
		public DirtPaintListener()
		{
		}
	}
	[Token(Token = "0x2000310")]
	public class EnemySpawnerListener : BaseGameEventListener<(GameObject prefab, float spawnDelay, bool bRespawn), EnemySpawnEvent, UnityEnemySpawnEvent>
	{
		[Token(Token = "0x6001569")]
		[Address(RVA = "0xB642C4", Offset = "0xB642C4", VA = "0xB642C4")]
		public EnemySpawnerListener()
		{
		}
	}
	[Token(Token = "0x2000311")]
	public class FBKEventListener : BaseGameEventListener<(string effName, Vector3 pos, Vector3 normal, Transform trAtt, ControllerHand hand), FBKEvent, UnityFBKEvent>
	{
		[Token(Token = "0x600156A")]
		[Address(RVA = "0xB6430C", Offset = "0xB6430C", VA = "0xB6430C")]
		public FBKEventListener()
		{
		}
	}
	[Token(Token = "0x2000312")]
	public class FootstepListener : BaseGameEventListener<(Transform sender, Transform ground, Color feetColor), FootstepEvent, UnityFootstepEvent>
	{
		[Token(Token = "0x600156B")]
		[Address(RVA = "0xB64354", Offset = "0xB64354", VA = "0xB64354")]
		public FootstepListener()
		{
		}
	}
	[Token(Token = "0x2000313")]
	public interface IGameEventListener<T>
	{
		[Token(Token = "0x600156C")]
		void OnEventRaised(T item);
	}
	[Token(Token = "0x2000314")]
	public class IntListener : BaseGameEventListener<int, IntEvent, UnityIntEvent>
	{
		[Token(Token = "0x600156D")]
		[Address(RVA = "0xB6439C", Offset = "0xB6439C", VA = "0xB6439C")]
		public IntListener()
		{
		}
	}
	[Token(Token = "0x2000315")]
	public class PrefabSpawnerListener : BaseGameEventListener<(GameObject prefab, Vector3 pos), PrefabSpawnEvent, UnityPrefabSpawnEvent>
	{
		[Token(Token = "0x600156E")]
		[Address(RVA = "0xB643E4", Offset = "0xB643E4", VA = "0xB643E4")]
		public PrefabSpawnerListener()
		{
		}
	}
	[Token(Token = "0x2000316")]
	public class ScoreListener : BaseGameEventListener<(Vector3 pos, string text), ScoreEvent, UnityScoreEvent>
	{
		[Token(Token = "0x600156F")]
		[Address(RVA = "0xB6442C", Offset = "0xB6442C", VA = "0xB6442C")]
		public ScoreListener()
		{
		}
	}
	[Token(Token = "0x2000317")]
	public class ShurikenListener : BaseGameEventListener<(bool aimPlayer, Vector3 pos, Vector2 devAngles, Vector3 aimCorrection), ShurikenEvent, UnityShurikenEvent>
	{
		[Token(Token = "0x6001570")]
		[Address(RVA = "0xB64474", Offset = "0xB64474", VA = "0xB64474")]
		public ShurikenListener()
		{
		}
	}
	[Token(Token = "0x2000318")]
	public class TextListener : BaseGameEventListener<(Vector3, string), TextEvent, UnityTextEvent>
	{
		[Token(Token = "0x6001571")]
		[Address(RVA = "0xB644BC", Offset = "0xB644BC", VA = "0xB644BC")]
		public TextListener()
		{
		}
	}
	[Token(Token = "0x2000319")]
	public class VoidListener : BaseGameEventListener<Void, VoidEvent, UnityVoidEvent>
	{
		[Token(Token = "0x6001572")]
		[Address(RVA = "0xB64504", Offset = "0xB64504", VA = "0xB64504")]
		public VoidListener()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200031A")]
	public class UnityArrowDamageEvent : UnityEvent<(RaycastHit hit, int arrowIndex)>
	{
		[Token(Token = "0x6001573")]
		[Address(RVA = "0xB6454C", Offset = "0xB6454C", VA = "0xB6454C")]
		public UnityArrowDamageEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200031B")]
	public class UnityArrowEvent : UnityEvent<(Transform arrow, Vector3 force, bool AI_mode, EN_Enemy_Archer archer, Vector3 targetPos, Vector3 targetVelocity, I_BowBase.eArrowType type)>
	{
		[Token(Token = "0x6001574")]
		[Address(RVA = "0xB64594", Offset = "0xB64594", VA = "0xB64594")]
		public UnityArrowEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200031C")]
	public class UnityDirtPaintEvent : UnityEvent<(P3dPaintableTexture texture, Vector3 PosHit, Vector3 Normal, DirtPaintManager.eDirtType dirtType)>
	{
		[Token(Token = "0x6001575")]
		[Address(RVA = "0xB645DC", Offset = "0xB645DC", VA = "0xB645DC")]
		public UnityDirtPaintEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200031D")]
	public class UnityEnemySpawnEvent : UnityEvent<(GameObject prefab, float spawnDelay, bool bRespawn)>
	{
		[Token(Token = "0x6001576")]
		[Address(RVA = "0xB64624", Offset = "0xB64624", VA = "0xB64624")]
		public UnityEnemySpawnEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200031E")]
	public class UnityFBKEvent : UnityEvent<(string effName, Vector3 pos, Vector3 normal, Transform trAtt, ControllerHand hand)>
	{
		[Token(Token = "0x6001577")]
		[Address(RVA = "0xB6466C", Offset = "0xB6466C", VA = "0xB6466C")]
		public UnityFBKEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200031F")]
	public class UnityFootstepEvent : UnityEvent<(Transform sender, Transform ground, Color feetColor)>
	{
		[Token(Token = "0x6001578")]
		[Address(RVA = "0xB646B4", Offset = "0xB646B4", VA = "0xB646B4")]
		public UnityFootstepEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000320")]
	public class UnityIntEvent : UnityEvent<int>
	{
		[Token(Token = "0x6001579")]
		[Address(RVA = "0xB646FC", Offset = "0xB646FC", VA = "0xB646FC")]
		public UnityIntEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000321")]
	public class UnityPrefabSpawnEvent : UnityEvent<(GameObject prefab, Vector3 pos)>
	{
		[Token(Token = "0x600157A")]
		[Address(RVA = "0xB64744", Offset = "0xB64744", VA = "0xB64744")]
		public UnityPrefabSpawnEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000322")]
	public class UnityScoreEvent : UnityEvent<(Vector3 pos, string text)>
	{
		[Token(Token = "0x600157B")]
		[Address(RVA = "0xB6478C", Offset = "0xB6478C", VA = "0xB6478C")]
		public UnityScoreEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000323")]
	public class UnityShurikenEvent : UnityEvent<(bool aimPlayer, Vector3 pos, Vector2 devAngles, Vector3 aimCorrection)>
	{
		[Token(Token = "0x600157C")]
		[Address(RVA = "0xB647D4", Offset = "0xB647D4", VA = "0xB647D4")]
		public UnityShurikenEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000324")]
	public class UnityTextEvent : UnityEvent<(Vector3, string)>
	{
		[Token(Token = "0x600157D")]
		[Address(RVA = "0xB6481C", Offset = "0xB6481C", VA = "0xB6481C")]
		public UnityTextEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000325")]
	public class UnityVoidEvent : UnityEvent<Void>
	{
		[Token(Token = "0x600157E")]
		[Address(RVA = "0xB64864", Offset = "0xB64864", VA = "0xB64864")]
		public UnityVoidEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000326")]
	public struct Void
	{
	}
	[Token(Token = "0x2000327")]
	public class BananaArmTrigger : MonoBehaviour
	{
		[Token(Token = "0x4001257")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WEAP_Banana banana;

		[Token(Token = "0x600157F")]
		[Address(RVA = "0xB648AC", Offset = "0xB648AC", VA = "0xB648AC")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001580")]
		[Address(RVA = "0xB64CA4", Offset = "0xB64CA4", VA = "0xB64CA4")]
		public BananaArmTrigger()
		{
		}
	}
	[Token(Token = "0x2000328")]
	public class Banana_Trigger : MonoBehaviour
	{
		[Token(Token = "0x4001258")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public WEAP_Banana Banana;

		[Token(Token = "0x6001581")]
		[Address(RVA = "0xB64CAC", Offset = "0xB64CAC", VA = "0xB64CAC")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001582")]
		[Address(RVA = "0xB64FB0", Offset = "0xB64FB0", VA = "0xB64FB0")]
		public Banana_Trigger()
		{
		}
	}
	[Token(Token = "0x2000329")]
	public class WEAP_Banana : GrabbableEvents
	{
		[Token(Token = "0x200032A")]
		public enum BN_STATE
		{
			[Token(Token = "0x4001266")]
			NORMAL,
			[Token(Token = "0x4001267")]
			ARMED,
			[Token(Token = "0x4001268")]
			WEAPON,
			[Token(Token = "0x4001269")]
			WENTOFF
		}

		[Token(Token = "0x200032B")]
		[CompilerGenerated]
		private sealed class <CR_OnBananaDropped>d__20 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400126A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400126B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400126C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WEAP_Banana <>4__this;

			[Token(Token = "0x17000258")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001591")]
				[Address(RVA = "0xB659C4", Offset = "0xB659C4", VA = "0xB659C4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000259")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001593")]
				[Address(RVA = "0xB65A0C", Offset = "0xB65A0C", VA = "0xB65A0C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600158E")]
			[Address(RVA = "0xB65734", Offset = "0xB65734", VA = "0xB65734")]
			[DebuggerHidden]
			public <CR_OnBananaDropped>d__20(int <>1__state)
			{
			}

			[Token(Token = "0x600158F")]
			[Address(RVA = "0xB658C0", Offset = "0xB658C0", VA = "0xB658C0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001590")]
			[Address(RVA = "0xB658C4", Offset = "0xB658C4", VA = "0xB658C4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001592")]
			[Address(RVA = "0xB659CC", Offset = "0xB659CC", VA = "0xB659CC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001259")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public BN_STATE BananaState;

		[Token(Token = "0x400125A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject Kunai;

		[Token(Token = "0x400125B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject Trap;

		[Token(Token = "0x400125C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject Dart;

		[Token(Token = "0x400125D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject[] Peels;

		[Token(Token = "0x400125E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public SphereCollider cTrapTrigger;

		[Token(Token = "0x400125F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FBKEvent OnFBKEvent;

		[Token(Token = "0x4001260")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool _bUpdateRotation;

		[Token(Token = "0x4001261")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public GrabbableRingHelper ringHelper;

		[Token(Token = "0x4001262")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public BoxCollider ArmTrigger;

		[Token(Token = "0x4001263")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool _wasSnapped;

		[Token(Token = "0x4001264")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x81")]
		private bool _isPoisoned;

		[Token(Token = "0x6001583")]
		[Address(RVA = "0xB64E08", Offset = "0xB64E08", VA = "0xB64E08")]
		internal void ON_HalfBite()
		{
		}

		[Token(Token = "0x6001584")]
		[Address(RVA = "0xB64B48", Offset = "0xB64B48", VA = "0xB64B48")]
		public void EVT_ON_Trap(Collider collision)
		{
		}

		[Token(Token = "0x6001585")]
		[Address(RVA = "0xB649EC", Offset = "0xB649EC", VA = "0xB649EC")]
		public void EVT_ON_Kunai(Collider collision)
		{
		}

		[Token(Token = "0x6001586")]
		[Address(RVA = "0xB64FB8", Offset = "0xB64FB8", VA = "0xB64FB8")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001587")]
		[Address(RVA = "0xB65390", Offset = "0xB65390", VA = "0xB65390")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001588")]
		[Address(RVA = "0xB65660", Offset = "0xB65660", VA = "0xB65660", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6001589")]
		[Address(RVA = "0xB65690", Offset = "0xB65690", VA = "0xB65690", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x600158A")]
		[Address(RVA = "0xB656CC", Offset = "0xB656CC", VA = "0xB656CC")]
		[IteratorStateMachine(typeof(<CR_OnBananaDropped>d__20))]
		private IEnumerator CR_OnBananaDropped()
		{
			return null;
		}

		[Token(Token = "0x600158B")]
		[Address(RVA = "0xB6575C", Offset = "0xB6575C", VA = "0xB6575C", Slot = "25")]
		public override void OnSnapZoneEnter(SnapZone sZone)
		{
		}

		[Token(Token = "0x600158C")]
		[Address(RVA = "0xB65768", Offset = "0xB65768", VA = "0xB65768")]
		private void Update()
		{
		}

		[Token(Token = "0x600158D")]
		[Address(RVA = "0xB658B8", Offset = "0xB658B8", VA = "0xB658B8")]
		public WEAP_Banana()
		{
		}
	}
	[Token(Token = "0x200032C")]
	public class WEAP_Blowgun : GrabbableEvents
	{
		[Token(Token = "0x400126D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform TR_ShootDir;

		[Token(Token = "0x400126E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject PF_Dart;

		[Token(Token = "0x400126F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool _IsArmed;

		[Token(Token = "0x6001594")]
		[Address(RVA = "0xB65A14", Offset = "0xB65A14", VA = "0xB65A14", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6001595")]
		[Address(RVA = "0xB65A30", Offset = "0xB65A30", VA = "0xB65A30")]
		private void ShootDart()
		{
		}

		[Token(Token = "0x6001596")]
		[Address(RVA = "0xB65B98", Offset = "0xB65B98", VA = "0xB65B98", Slot = "18")]
		public override void OnTriggerUp()
		{
		}

		[Token(Token = "0x6001597")]
		[Address(RVA = "0xB65BA4", Offset = "0xB65BA4", VA = "0xB65BA4")]
		public WEAP_Blowgun()
		{
		}
	}
	[Token(Token = "0x200032D")]
	public class WEAP_Dart : MonoBehaviour
	{
		[Token(Token = "0x4001270")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform T_DartTip;

		[Token(Token = "0x4001271")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Rigidbody rBody;

		[Token(Token = "0x4001272")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 shootSpeed;

		[Token(Token = "0x4001273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private bool _hitSomething;

		[Token(Token = "0x6001598")]
		[Address(RVA = "0xB65BB4", Offset = "0xB65BB4", VA = "0xB65BB4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001599")]
		[Address(RVA = "0xB65D94", Offset = "0xB65D94", VA = "0xB65D94")]
		protected float CalcArrowShootForce()
		{
			return default(float);
		}

		[Token(Token = "0x600159A")]
		[Address(RVA = "0xB65DCC", Offset = "0xB65DCC", VA = "0xB65DCC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600159B")]
		[Address(RVA = "0xB66028", Offset = "0xB66028", VA = "0xB66028")]
		private void OnObjectHit(RaycastHit hit)
		{
		}

		[Token(Token = "0x600159C")]
		[Address(RVA = "0xB66380", Offset = "0xB66380", VA = "0xB66380")]
		private void Update()
		{
		}

		[Token(Token = "0x600159D")]
		[Address(RVA = "0xB664A8", Offset = "0xB664A8", VA = "0xB664A8")]
		public WEAP_Dart()
		{
		}
	}
	[Token(Token = "0x200032E")]
	public class BowDrawTrigger : MonoBehaviour
	{
		[Token(Token = "0x4001274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GrabberEvent onEnter;

		[Token(Token = "0x4001275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent onExit;

		[Token(Token = "0x4001276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public UnityEvent onStay;

		[Token(Token = "0x4001277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public CapsuleCollider cCollider;

		[Token(Token = "0x4001278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Grabber ExcludeGrabber;

		[Token(Token = "0x600159E")]
		[Address(RVA = "0xB664BC", Offset = "0xB664BC", VA = "0xB664BC")]
		private void Start()
		{
		}

		[Token(Token = "0x600159F")]
		[Address(RVA = "0xB6651C", Offset = "0xB6651C", VA = "0xB6651C")]
		public void SwitchCollider(bool bEnable)
		{
		}

		[Token(Token = "0x60015A0")]
		[Address(RVA = "0xB6653C", Offset = "0xB6653C", VA = "0xB6653C")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60015A1")]
		[Address(RVA = "0xB666BC", Offset = "0xB666BC", VA = "0xB666BC")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60015A2")]
		[Address(RVA = "0xB66824", Offset = "0xB66824", VA = "0xB66824")]
		private void OnTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x60015A3")]
		[Address(RVA = "0xB66828", Offset = "0xB66828", VA = "0xB66828")]
		public BowDrawTrigger()
		{
		}
	}
	[Token(Token = "0x200032F")]
	public class CrossbowAnchorTrigger : MonoBehaviour
	{
		[Token(Token = "0x60015A4")]
		[Address(RVA = "0xB66830", Offset = "0xB66830", VA = "0xB66830")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60015A5")]
		[Address(RVA = "0xB669DC", Offset = "0xB669DC", VA = "0xB669DC")]
		public CrossbowAnchorTrigger()
		{
		}
	}
	[Token(Token = "0x2000330")]
	public class FlameArrowTrigger : MonoBehaviour
	{
		[Token(Token = "0x4001279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected VoidEvent _FlameUpArrow;

		[Token(Token = "0x60015A6")]
		[Address(RVA = "0xB669E4", Offset = "0xB669E4", VA = "0xB669E4")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60015A7")]
		[Address(RVA = "0xB66AB4", Offset = "0xB66AB4", VA = "0xB66AB4")]
		public FlameArrowTrigger()
		{
		}
	}
	[Token(Token = "0x2000331")]
	public class Grabable2Climb : Climbable
	{
		[Token(Token = "0x400127A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x228")]
		private GrabPhysics PrevGrabPhysics;

		[Token(Token = "0x60015A8")]
		[Address(RVA = "0xB66ABC", Offset = "0xB66ABC", VA = "0xB66ABC")]
		public void Switch2Grabbable(Grabber grab)
		{
		}

		[Token(Token = "0x60015A9")]
		[Address(RVA = "0xB66AD4", Offset = "0xB66AD4", VA = "0xB66AD4")]
		public void Switch2Climbable(Grabber grab)
		{
		}

		[Token(Token = "0x60015AA")]
		[Address(RVA = "0xB66B14", Offset = "0xB66B14", VA = "0xB66B14")]
		public Grabable2Climb()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000332")]
	public class ArrowCountDictionary : Extensions.SerializableDictionary<I_BowBase.eArrowType, int>
	{
		[Token(Token = "0x60015AB")]
		[Address(RVA = "0xB66B1C", Offset = "0xB66B1C", VA = "0xB66B1C")]
		public ArrowCountDictionary()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000333")]
	public class ArrowGoDictionary : Extensions.SerializableDictionary<I_BowBase.eArrowType, GameObject>
	{
		[Token(Token = "0x60015AC")]
		[Address(RVA = "0xB66B64", Offset = "0xB66B64", VA = "0xB66B64")]
		public ArrowGoDictionary()
		{
		}
	}
	[Token(Token = "0x2000334")]
	public class I_BowBase : I_AutoHolster
	{
		[Token(Token = "0x2000335")]
		public enum eBowGrabSide
		{
			[Token(Token = "0x400129C")]
			NAN,
			[Token(Token = "0x400129D")]
			RIGHT,
			[Token(Token = "0x400129E")]
			LEFT
		}

		[Token(Token = "0x2000336")]
		public enum eArrowType
		{
			[Token(Token = "0x40012A0")]
			NORMAL,
			[Token(Token = "0x40012A1")]
			ROPE,
			[Token(Token = "0x40012A2")]
			FIRE,
			[Token(Token = "0x40012A3")]
			FREEZE,
			[Token(Token = "0x40012A4")]
			GRAVITY,
			[Token(Token = "0x40012A5")]
			BOLT
		}

		[Token(Token = "0x2000337")]
		public enum eBowState
		{
			[Token(Token = "0x40012A7")]
			NAN,
			[Token(Token = "0x40012A8")]
			READY,
			[Token(Token = "0x40012A9")]
			ARROW_NOCKED,
			[Token(Token = "0x40012AA")]
			ARROW_HAND_PLACED,
			[Token(Token = "0x40012AB")]
			ARROW_GRABBED,
			[Token(Token = "0x40012AC")]
			READY_TO_FIRE,
			[Token(Token = "0x40012AD")]
			FIRED
		}

		[Token(Token = "0x400127B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool bUnlimitedAmmo;

		[Token(Token = "0x400127C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public eBowState BowState;

		[Token(Token = "0x400127D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public eBowGrabSide GrabSide;

		[Token(Token = "0x400127E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject pfArrow;

		[Token(Token = "0x400127F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float arrowRespawnTime;

		[Token(Token = "0x4001280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public Vector2 damageMinMax;

		[Token(Token = "0x4001281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Vector2 forceMinMax;

		[Token(Token = "0x4001282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float maxBowTension;

		[Token(Token = "0x4001283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public ArrowCountDictionary ArrowCount;

		[Token(Token = "0x4001284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public ArrowGoDictionary ArrowParts;

		[Token(Token = "0x4001285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		protected ArrowEvent evtArrowShoot;

		[Token(Token = "0x4001286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		protected FBKEvent _effEvent;

		[Token(Token = "0x4001287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Transform T_StringMin;

		[Token(Token = "0x4001288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Transform T_StringMax;

		[Token(Token = "0x4001289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Transform T_LeftArrowHand;

		[Token(Token = "0x400128A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public Transform T_RightArrowHand;

		[Token(Token = "0x400128B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool bAutofillTransforms;

		[Token(Token = "0x400128C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public ParticleSystem VFX_Flame;

		[Token(Token = "0x400128D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public GameObject fakeArrow;

		[Token(Token = "0x400128E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public TextMeshPro txtArrowCount;

		[Token(Token = "0x400128F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public TextMeshPro txtArrowType;

		[Token(Token = "0x4001290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public GameObject fakeHand;

		[Token(Token = "0x4001291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public CapsuleCollider cpCollider;

		[Token(Token = "0x4001292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected eArrowType _arrowType;

		[Token(Token = "0x4001293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected Animator _anim;

		[Token(Token = "0x4001294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected Animator _handAnim;

		[Token(Token = "0x4001295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		protected LinearAnimator _linAnimator;

		[Token(Token = "0x4001296")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		protected Grabber _ArrowGrabber;

		[Token(Token = "0x4001297")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		protected BowDrawTrigger _bowDrawTrigger;

		[Token(Token = "0x4001298")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		protected Renderer _arrowRenderer;

		[Token(Token = "0x4001299")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		protected bool _playedDrawSound;

		[Token(Token = "0x400129A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		protected float _bowTension;

		[Token(Token = "0x1700025A")]
		public eArrowType ArrowType
		{
			[Token(Token = "0x60015AD")]
			[Address(RVA = "0xB66BAC", Offset = "0xB66BAC", VA = "0xB66BAC")]
			get
			{
				return default(eArrowType);
			}
			[Token(Token = "0x60015AE")]
			[Address(RVA = "0xB66BB4", Offset = "0xB66BB4", VA = "0xB66BB4")]
			set
			{
			}
		}

		[Token(Token = "0x60015AF")]
		[Address(RVA = "0xB66BBC", Offset = "0xB66BBC", VA = "0xB66BBC")]
		protected void Init()
		{
		}

		[Token(Token = "0x60015B0")]
		[Address(RVA = "0xB66FF0", Offset = "0xB66FF0", VA = "0xB66FF0")]
		private void I_UpdateHandMaterials()
		{
		}

		[Token(Token = "0x60015B1")]
		[Address(RVA = "0xB66EEC", Offset = "0xB66EEC", VA = "0xB66EEC")]
		protected void UI_UpdateArrowsCount()
		{
		}

		[Token(Token = "0x60015B2")]
		[Address(RVA = "0xB66D14", Offset = "0xB66D14", VA = "0xB66D14")]
		protected void AutoFillHandTransforms()
		{
		}

		[Token(Token = "0x60015B3")]
		[Address(RVA = "0xB670FC", Offset = "0xB670FC", VA = "0xB670FC")]
		public bool HaveArrow()
		{
			return default(bool);
		}

		[Token(Token = "0x60015B4")]
		[Address(RVA = "0xB6716C", Offset = "0xB6716C", VA = "0xB6716C")]
		protected void ResetArrow(bool show)
		{
		}

		[Token(Token = "0x60015B5")]
		[Address(RVA = "0xB671F4", Offset = "0xB671F4", VA = "0xB671F4")]
		protected float CalcArrowShootForce()
		{
			return default(float);
		}

		[Token(Token = "0x60015B6")]
		[Address(RVA = "0xB6723C", Offset = "0xB6723C", VA = "0xB6723C")]
		private void ShowFakeHand()
		{
		}

		[Token(Token = "0x60015B7")]
		[Address(RVA = "0xB673E0", Offset = "0xB673E0", VA = "0xB673E0")]
		private void HideFakeHand()
		{
		}

		[Token(Token = "0x60015B8")]
		[Address(RVA = "0xB67418", Offset = "0xB67418", VA = "0xB67418")]
		protected float getTriggerInput(ControllerHand handSide)
		{
			return default(float);
		}

		[Token(Token = "0x60015B9")]
		[Address(RVA = "0xB67450", Offset = "0xB67450", VA = "0xB67450")]
		private void ON_ChangeArrowType()
		{
		}

		[Token(Token = "0x60015BA")]
		[Address(RVA = "0xB67644", Offset = "0xB67644", VA = "0xB67644")]
		public void EVT_OnArrowTriggerEnter()
		{
		}

		[Token(Token = "0x60015BB")]
		[Address(RVA = "0xB676B0", Offset = "0xB676B0", VA = "0xB676B0")]
		public void EVT_OnArrowTriggerExit()
		{
		}

		[Token(Token = "0x60015BC")]
		[Address(RVA = "0xB676DC", Offset = "0xB676DC", VA = "0xB676DC")]
		private void SetGrabbables(Grabber grabber)
		{
		}

		[Token(Token = "0x60015BD")]
		[Address(RVA = "0xB67824", Offset = "0xB67824", VA = "0xB67824")]
		public void EVT_IgniteArrow()
		{
		}

		[Token(Token = "0x60015BE")]
		[Address(RVA = "0xB67918", Offset = "0xB67918", VA = "0xB67918", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x60015BF")]
		[Address(RVA = "0xB67B68", Offset = "0xB67B68", VA = "0xB67B68", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x60015C0")]
		[Address(RVA = "0xB67BF8", Offset = "0xB67BF8", VA = "0xB67BF8")]
		protected void ResetBow()
		{
		}

		[Token(Token = "0x60015C1")]
		[Address(RVA = "0xB67CC8", Offset = "0xB67CC8", VA = "0xB67CC8")]
		public I_BowBase()
		{
		}
	}
	[Token(Token = "0x2000338")]
	[RequireComponent(typeof(Rigidbody))]
	[RequireComponent(typeof(LineRenderer))]
	public class RopeScript : MonoBehaviour
	{
		[Token(Token = "0x40012AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform target;

		[Token(Token = "0x40012AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float resolution;

		[Token(Token = "0x40012B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float ropeDrag;

		[Token(Token = "0x40012B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float ropeMass;

		[Token(Token = "0x40012B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float ropeColRadius;

		[Token(Token = "0x40012B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3[] segmentPos;

		[Token(Token = "0x40012B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject[] joints;

		[Token(Token = "0x40012B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private LineRenderer line;

		[Token(Token = "0x40012B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private int segments;

		[Token(Token = "0x40012B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool rope;

		[Token(Token = "0x40012B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3 swingAxis;

		[Token(Token = "0x40012B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float lowTwistLimit;

		[Token(Token = "0x40012BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float highTwistLimit;

		[Token(Token = "0x40012BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float swing1Limit;

		[Token(Token = "0x40012BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject ClimbGripPrefab;

		[Token(Token = "0x40012BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<GameObject> RopeGrabs;

		[Token(Token = "0x60015C2")]
		[Address(RVA = "0xB67D84", Offset = "0xB67D84", VA = "0xB67D84")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60015C3")]
		[Address(RVA = "0xB67EC0", Offset = "0xB67EC0", VA = "0xB67EC0")]
		public void BuildRope(Vector3 rotDir, bool IgnoreGrabbers = false)
		{
		}

		[Token(Token = "0x60015C4")]
		[Address(RVA = "0xB6884C", Offset = "0xB6884C", VA = "0xB6884C")]
		private void AddJointPhysics(int n)
		{
		}

		[Token(Token = "0x60015C5")]
		[Address(RVA = "0xB68C40", Offset = "0xB68C40", VA = "0xB68C40")]
		private void DestroyRope()
		{
		}

		[Token(Token = "0x60015C6")]
		[Address(RVA = "0xB68D78", Offset = "0xB68D78", VA = "0xB68D78")]
		public RopeScript()
		{
		}
	}
	[Token(Token = "0x2000339")]
	public class WEAP_AnimDispatch : MonoBehaviour
	{
		[Token(Token = "0x40012BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public UnityEvent[] On_AnimStart;

		[Token(Token = "0x40012BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public UnityEvent[] On_AnimEnd;

		[Token(Token = "0x60015C7")]
		[Address(RVA = "0xB68E18", Offset = "0xB68E18", VA = "0xB68E18")]
		public void AC_Start()
		{
		}

		[Token(Token = "0x60015C8")]
		[Address(RVA = "0xB68E78", Offset = "0xB68E78", VA = "0xB68E78")]
		public void AC_End()
		{
		}

		[Token(Token = "0x60015C9")]
		[Address(RVA = "0xB68ED8", Offset = "0xB68ED8", VA = "0xB68ED8")]
		public WEAP_AnimDispatch()
		{
		}
	}
	[Token(Token = "0x200033A")]
	public class WEAP_Arrow : MonoBehaviour
	{
		[Token(Token = "0x40012C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public int poolIndex;

		[Token(Token = "0x40012C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public ArrowsPool parentPool;

		[Token(Token = "0x40012C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public bool isFlameArrow;

		[Token(Token = "0x40012C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Renderer arrowRen;

		[Token(Token = "0x40012C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Renderer boltRen;

		[Token(Token = "0x40012C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject FlameArrow;

		[Token(Token = "0x40012C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject TrailRenderer;

		[Token(Token = "0x40012C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform T_ArrowTip;

		[Token(Token = "0x40012C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Rigidbody rBody;

		[Token(Token = "0x40012C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public GameObject HitPointer;

		[Token(Token = "0x40012CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool AI_AimMode;

		[Token(Token = "0x40012CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public ArrowDamageEvent _arrowDamageEvent;

		[Token(Token = "0x40012CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[TagSelector]
		public string[] TagFilterArray;

		[Token(Token = "0x40012CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[TagSelector]
		public string[] ColliderTags;

		[Token(Token = "0x40012CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public FBKEvent OnFBKEvent;

		[Token(Token = "0x40012CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool _hitSomething;

		[Token(Token = "0x40012D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Vector3 _lastPos;

		[Token(Token = "0x40012D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 _impulse;

		[Token(Token = "0x40012D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float _speed;

		[Token(Token = "0x40012D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 _targetPos;

		[Token(Token = "0x40012D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private float _gravity;

		[Token(Token = "0x40012D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Vector3 _targetVelocity;

		[Token(Token = "0x40012D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		internal EN_Enemy_Archer _archer;

		[Token(Token = "0x40012D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		private IntEvent _playerScoreSignal;

		[Token(Token = "0x40012D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		private ScoreEvent _scoreEvent;

		[Token(Token = "0x40012D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		private VoidEvent _eggDestroyed;

		[Token(Token = "0x40012DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private bool _isAttachedToParent;

		[Token(Token = "0x40012DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Transform _FakeParent;

		[Token(Token = "0x40012DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private bool _IsInPool;

		[Token(Token = "0x40012DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private Vector3 _positionOffset;

		[Token(Token = "0x40012DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Quaternion _rotationOffset;

		[Token(Token = "0x40012DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private Vector3 _hitPoint;

		[Token(Token = "0x60015CA")]
		[Address(RVA = "0xB68EE0", Offset = "0xB68EE0", VA = "0xB68EE0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60015CB")]
		[Address(RVA = "0xB690F0", Offset = "0xB690F0", VA = "0xB690F0")]
		public void InitAsAI_Arrow(Vector3 pos, Vector3 targetPos, Vector3 targetVelocity, [Optional] EN_Enemy_Archer archer)
		{
		}

		[Token(Token = "0x60015CC")]
		[Address(RVA = "0xB691B4", Offset = "0xB691B4", VA = "0xB691B4")]
		private void CalcTrajectory()
		{
		}

		[Token(Token = "0x60015CD")]
		[Address(RVA = "0xB69514", Offset = "0xB69514", VA = "0xB69514")]
		public void AddImpulse(Vector3 impulse)
		{
		}

		[Token(Token = "0x60015CE")]
		[Address(RVA = "0xB693E8", Offset = "0xB693E8", VA = "0xB693E8")]
		private void calcArrowSpeedByRange()
		{
		}

		[Token(Token = "0x60015CF")]
		[Address(RVA = "0xB695F4", Offset = "0xB695F4", VA = "0xB695F4")]
		private void CalcPosition()
		{
		}

		[Token(Token = "0x60015D0")]
		[Address(RVA = "0xB69798", Offset = "0xB69798", VA = "0xB69798")]
		private void I_PlayFlySound()
		{
		}

		[Token(Token = "0x60015D1")]
		[Address(RVA = "0xB6984C", Offset = "0xB6984C", VA = "0xB6984C")]
		internal bool WasEnemyHit(string hObjectTag)
		{
			return default(bool);
		}

		[Token(Token = "0x60015D2")]
		[Address(RVA = "0xB698CC", Offset = "0xB698CC", VA = "0xB698CC")]
		internal bool EnableCollider(string hObjectTag)
		{
			return default(bool);
		}

		[Token(Token = "0x60015D3")]
		[Address(RVA = "0xB6994C", Offset = "0xB6994C", VA = "0xB6994C")]
		private void ProcessArrowHit(RaycastHit hit)
		{
		}

		[Token(Token = "0x60015D4")]
		[Address(RVA = "0xB6A5E0", Offset = "0xB6A5E0", VA = "0xB6A5E0")]
		public void SetFakeParent(Transform parent)
		{
		}

		[Token(Token = "0x60015D5")]
		[Address(RVA = "0xB6A760", Offset = "0xB6A760", VA = "0xB6A760")]
		internal void I_ReturnToPool()
		{
		}

		[Token(Token = "0x60015D6")]
		[Address(RVA = "0xB6A820", Offset = "0xB6A820", VA = "0xB6A820")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60015D7")]
		[Address(RVA = "0xB6A9C0", Offset = "0xB6A9C0", VA = "0xB6A9C0")]
		private void Update()
		{
		}

		[Token(Token = "0x60015D8")]
		[Address(RVA = "0xB6AAFC", Offset = "0xB6AAFC", VA = "0xB6AAFC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60015D9")]
		[Address(RVA = "0xB6ADF0", Offset = "0xB6ADF0", VA = "0xB6ADF0")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x60015DA")]
		[Address(RVA = "0xB6AE94", Offset = "0xB6AE94", VA = "0xB6AE94")]
		public WEAP_Arrow()
		{
		}
	}
	[Token(Token = "0x200033B")]
	public class WEAP_Bolt : MonoBehaviour
	{
		[Token(Token = "0x40012E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform T_ArrowTip;

		[Token(Token = "0x40012E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Rigidbody rBody;

		[Token(Token = "0x40012E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public WEAP_Crossbow Shooter;

		[Token(Token = "0x40012E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector2 ForceMinMax;

		[Token(Token = "0x40012E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool _hitSomething;

		[Token(Token = "0x60015DB")]
		[Address(RVA = "0xB6AF18", Offset = "0xB6AF18", VA = "0xB6AF18")]
		private void Start()
		{
		}

		[Token(Token = "0x60015DC")]
		[Address(RVA = "0xB6B1D8", Offset = "0xB6B1D8", VA = "0xB6B1D8")]
		private void OnObjectHit(RaycastHit hit)
		{
		}

		[Token(Token = "0x60015DD")]
		[Address(RVA = "0xB6B1A0", Offset = "0xB6B1A0", VA = "0xB6B1A0")]
		protected float CalcArrowShootForce()
		{
			return default(float);
		}

		[Token(Token = "0x60015DE")]
		[Address(RVA = "0xB6B41C", Offset = "0xB6B41C", VA = "0xB6B41C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60015DF")]
		[Address(RVA = "0xB6B678", Offset = "0xB6B678", VA = "0xB6B678")]
		private void Update()
		{
		}

		[Token(Token = "0x60015E0")]
		[Address(RVA = "0xB6B7A0", Offset = "0xB6B7A0", VA = "0xB6B7A0")]
		public WEAP_Bolt()
		{
		}
	}
	[Token(Token = "0x200033C")]
	public class WEAP_Bow : I_BowBase
	{
		[Token(Token = "0x40012E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public GameObject Tooltip;

		[Token(Token = "0x60015E1")]
		[Address(RVA = "0xB6B7B4", Offset = "0xB6B7B4", VA = "0xB6B7B4")]
		private void Start()
		{
		}

		[Token(Token = "0x60015E2")]
		[Address(RVA = "0xB6B7B8", Offset = "0xB6B7B8", VA = "0xB6B7B8")]
		private void Update()
		{
		}

		[Token(Token = "0x60015E3")]
		[Address(RVA = "0xB6BC88", Offset = "0xB6BC88", VA = "0xB6BC88")]
		private void ShootArrow()
		{
		}

		[Token(Token = "0x60015E4")]
		[Address(RVA = "0xB6BF6C", Offset = "0xB6BF6C", VA = "0xB6BF6C")]
		private void I_SpawnArrow()
		{
		}

		[Token(Token = "0x60015E5")]
		[Address(RVA = "0xB6C064", Offset = "0xB6C064", VA = "0xB6C064", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x60015E6")]
		[Address(RVA = "0xB6C108", Offset = "0xB6C108", VA = "0xB6C108")]
		public WEAP_Bow()
		{
		}
	}
	[Token(Token = "0x200033D")]
	public class WEAP_Crossbow : I_AutoHolster
	{
		[Token(Token = "0x40012E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector2 ForceMinMax;

		[Token(Token = "0x40012E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		protected FBKEvent _effEvent;

		[Token(Token = "0x40012E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform TR_ShootDir;

		[Token(Token = "0x40012E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform ropeAnchor;

		[Token(Token = "0x40012EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Rigidbody rBody;

		[Token(Token = "0x40012EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GameObject Anchor;

		[Token(Token = "0x40012EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public ArrowEvent evtArrowShoot;

		[Token(Token = "0x40012ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Animator _anim;

		[Token(Token = "0x40012EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool _bIsArmed;

		[Token(Token = "0x40012EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Collider[] _colliders;

		[Token(Token = "0x60015E7")]
		[Address(RVA = "0xB6C10C", Offset = "0xB6C10C", VA = "0xB6C10C")]
		private void Start()
		{
		}

		[Token(Token = "0x60015E8")]
		[Address(RVA = "0xB6C194", Offset = "0xB6C194", VA = "0xB6C194")]
		protected float CalcArrowShootForce()
		{
			return default(float);
		}

		[Token(Token = "0x60015E9")]
		[Address(RVA = "0xB6C1CC", Offset = "0xB6C1CC", VA = "0xB6C1CC")]
		public void AC_ReadyToFire()
		{
		}

		[Token(Token = "0x60015EA")]
		[Address(RVA = "0xB6C1D8", Offset = "0xB6C1D8", VA = "0xB6C1D8", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x60015EB")]
		[Address(RVA = "0xB6C220", Offset = "0xB6C220", VA = "0xB6C220")]
		private void ShootBolt()
		{
		}

		[Token(Token = "0x60015EC")]
		[Address(RVA = "0xB6C574", Offset = "0xB6C574", VA = "0xB6C574", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x60015ED")]
		[Address(RVA = "0xB6C5E0", Offset = "0xB6C5E0", VA = "0xB6C5E0", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x60015EE")]
		[Address(RVA = "0xB6C64C", Offset = "0xB6C64C", VA = "0xB6C64C")]
		public WEAP_Crossbow()
		{
		}
	}
	[Token(Token = "0x200033E")]
	public class ZIPL_Crossbow : GrabbableEvents
	{
		[Token(Token = "0x40012F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioSource zipAudioSource;

		[Token(Token = "0x40012F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 lineStart;

		[Token(Token = "0x40012F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 lineEnd;

		[Token(Token = "0x40012F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float ZiplineSpeed;

		[Token(Token = "0x40012F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform ropeAnchor;

		[Token(Token = "0x40012F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public LineRenderer LineRen;

		[Token(Token = "0x40012F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float _lastMoveTime;

		[Token(Token = "0x60015EF")]
		[Address(RVA = "0xB6C668", Offset = "0xB6C668", VA = "0xB6C668")]
		private void Update()
		{
		}

		[Token(Token = "0x60015F0")]
		[Address(RVA = "0xB6C718", Offset = "0xB6C718", VA = "0xB6C718", Slot = "19")]
		public override void OnButton1()
		{
		}

		[Token(Token = "0x60015F1")]
		[Address(RVA = "0xB6C728", Offset = "0xB6C728", VA = "0xB6C728")]
		private void moveTowards(Vector3 pos, bool forwardDirection)
		{
		}

		[Token(Token = "0x60015F2")]
		[Address(RVA = "0xB6C98C", Offset = "0xB6C98C", VA = "0xB6C98C")]
		public void SetRopeData(Vector3 st, Vector3 end)
		{
		}

		[Token(Token = "0x60015F3")]
		[Address(RVA = "0xB6CA38", Offset = "0xB6CA38", VA = "0xB6CA38")]
		public ZIPL_Crossbow()
		{
		}
	}
	[Token(Token = "0x200033F")]
	public class Claw_Collision : MonoBehaviour
	{
		[Token(Token = "0x40012F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool isRightHand;

		[Token(Token = "0x40012F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform sparkPos;

		[Token(Token = "0x40012F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private FBKEvent OnFBKEvent;

		[Token(Token = "0x40012FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float nextPlayTime;

		[Token(Token = "0x60015F4")]
		[Address(RVA = "0xB6CA50", Offset = "0xB6CA50", VA = "0xB6CA50")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60015F5")]
		[Address(RVA = "0xB6CBE4", Offset = "0xB6CBE4", VA = "0xB6CBE4")]
		public Claw_Collision()
		{
		}
	}
	[Token(Token = "0x2000340")]
	public class DamageManager : MonoBehaviour
	{
		[Token(Token = "0x40012FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		public FBKEvent OnFBKEvent;

		[Token(Token = "0x40012FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private VoidEvent _eggDestroyed;

		[Token(Token = "0x40012FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private IntEvent _playerScoreSignal;

		[Token(Token = "0x40012FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private ScoreEvent _scoreEvent;

		[Token(Token = "0x60015F6")]
		[Address(RVA = "0xB6CBF4", Offset = "0xB6CBF4", VA = "0xB6CBF4")]
		public void EVT_OnArrowHit((RaycastHit hit, int arrowID) hInfo)
		{
		}

		[Token(Token = "0x60015F7")]
		[Address(RVA = "0xB6CBF8", Offset = "0xB6CBF8", VA = "0xB6CBF8")]
		public DamageManager()
		{
		}
	}
	[Token(Token = "0x2000341")]
	public class KatanaScabbardLimiter : GrabbableEvents
	{
		[Token(Token = "0x40012FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject KatanaReal;

		[Token(Token = "0x4001300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Grabbable grabRealKatanaHand;

		[Token(Token = "0x4001301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject ScabbardTriggers;

		[Token(Token = "0x4001302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Rigidbody KatanaRBody;

		[Token(Token = "0x4001303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public FixedJoint fJoint;

		[Token(Token = "0x4001304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Vector2 MinMaxPos;

		[Token(Token = "0x4001305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector2 MinMaxRot;

		[Token(Token = "0x4001306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float cPos;

		[Token(Token = "0x4001307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 _initialPosition;

		[Token(Token = "0x4001308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 _initialRotation;

		[Token(Token = "0x4001309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Grabbable _rgKatana;

		[Token(Token = "0x400130A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool _KatanaIsDrawed;

		[Token(Token = "0x400130B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		private bool _KatanaIsGrabbed;

		[Token(Token = "0x400130C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Grabber _grabHand;

		[Token(Token = "0x400130D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Transform _realKatanaParent;

		[Token(Token = "0x60015F8")]
		[Address(RVA = "0xB6CC00", Offset = "0xB6CC00", VA = "0xB6CC00")]
		private void Start()
		{
		}

		[Token(Token = "0x60015F9")]
		[Address(RVA = "0xB6CC94", Offset = "0xB6CC94", VA = "0xB6CC94", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x60015FA")]
		[Address(RVA = "0xB6CCA8", Offset = "0xB6CCA8", VA = "0xB6CCA8", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x60015FB")]
		[Address(RVA = "0xB6CD90", Offset = "0xB6CD90", VA = "0xB6CD90")]
		internal void ReplaceKatana()
		{
		}

		[Token(Token = "0x60015FC")]
		[Address(RVA = "0xB6D064", Offset = "0xB6D064", VA = "0xB6D064")]
		private void lockPosition()
		{
		}

		[Token(Token = "0x60015FD")]
		[Address(RVA = "0xB6D26C", Offset = "0xB6D26C", VA = "0xB6D26C")]
		private void ClampPosition()
		{
		}

		[Token(Token = "0x60015FE")]
		[Address(RVA = "0xB6D310", Offset = "0xB6D310", VA = "0xB6D310")]
		private void CalcPosition()
		{
		}

		[Token(Token = "0x60015FF")]
		[Address(RVA = "0xB6D320", Offset = "0xB6D320", VA = "0xB6D320")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001600")]
		[Address(RVA = "0xB6D330", Offset = "0xB6D330", VA = "0xB6D330")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001601")]
		[Address(RVA = "0xB6D340", Offset = "0xB6D340", VA = "0xB6D340")]
		public KatanaScabbardLimiter()
		{
		}
	}
	[Token(Token = "0x2000342")]
	public class ScabbardColliders : MonoBehaviour
	{
		[Token(Token = "0x400130E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ScabbardColliders upCollider;

		[Token(Token = "0x400130F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool activated;

		[Token(Token = "0x4001310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public KatanaScabbardLimiter ktScabbard;

		[Token(Token = "0x6001602")]
		[Address(RVA = "0xB6D3A4", Offset = "0xB6D3A4", VA = "0xB6D3A4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001603")]
		[Address(RVA = "0xB6D3AC", Offset = "0xB6D3AC", VA = "0xB6D3AC")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001604")]
		[Address(RVA = "0xB6D470", Offset = "0xB6D470", VA = "0xB6D470")]
		public ScabbardColliders()
		{
		}
	}
	[Token(Token = "0x2000343")]
	public class WEAP_Scabbard : MonoBehaviour
	{
		[Token(Token = "0x4001311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody scBody;

		[Token(Token = "0x4001312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Rigidbody _rBody;

		[Token(Token = "0x4001313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CapsuleCollider _scabbardCollider;

		[Token(Token = "0x6001605")]
		[Address(RVA = "0xB6D478", Offset = "0xB6D478", VA = "0xB6D478")]
		private void Start()
		{
		}

		[Token(Token = "0x6001606")]
		[Address(RVA = "0xB6D4F4", Offset = "0xB6D4F4", VA = "0xB6D4F4")]
		public void EVT_OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6001607")]
		[Address(RVA = "0xB6D540", Offset = "0xB6D540", VA = "0xB6D540")]
		public void EVT_OnRelease()
		{
		}

		[Token(Token = "0x6001608")]
		[Address(RVA = "0xB6D58C", Offset = "0xB6D58C", VA = "0xB6D58C")]
		public WEAP_Scabbard()
		{
		}
	}
	[Token(Token = "0x2000344")]
	public class WEAP_KatanaScabbard : GrabbableEvents
	{
		[Token(Token = "0x4001314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool IsKatanaGrabbed;

		[Token(Token = "0x4001315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Katana_FakeSecondHand RightFakeHand;

		[Token(Token = "0x4001316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Katana_FakeSecondHand LeftFakeHand;

		[Token(Token = "0x4001317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Animator scAnim;

		[Token(Token = "0x4001318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Grabbable RealKatana;

		[Token(Token = "0x4001319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public MeshRenderer FakeKatana;

		[Token(Token = "0x400131A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public LinearAnimator LinAnim;

		[Token(Token = "0x400131B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Grabber _grabber;

		[Token(Token = "0x6001609")]
		[Address(RVA = "0xB6D594", Offset = "0xB6D594", VA = "0xB6D594", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x600160A")]
		[Address(RVA = "0xB6D748", Offset = "0xB6D748", VA = "0xB6D748", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x600160B")]
		[Address(RVA = "0xB6D5EC", Offset = "0xB6D5EC", VA = "0xB6D5EC")]
		public void EVT_OnKatanaGrabbed()
		{
		}

		[Token(Token = "0x600160C")]
		[Address(RVA = "0xB6D88C", Offset = "0xB6D88C", VA = "0xB6D88C")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600160D")]
		[Address(RVA = "0xB6D798", Offset = "0xB6D798", VA = "0xB6D798")]
		private void RestoreCollider()
		{
		}

		[Token(Token = "0x600160E")]
		[Address(RVA = "0xB6DAF8", Offset = "0xB6DAF8", VA = "0xB6DAF8")]
		public WEAP_KatanaScabbard()
		{
		}
	}
	[Token(Token = "0x2000345")]
	public class WEAP_SwordKatana : I_SwordBase
	{
		[Token(Token = "0x400131C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool bloodOnSword;

		[Token(Token = "0x400131D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[SerializeField]
		protected Transform T_A;

		[Token(Token = "0x400131E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[SerializeField]
		private Transform T_B;

		[Token(Token = "0x400131F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[SerializeField]
		protected TextMeshPro tDebug;

		[Token(Token = "0x4001320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[SerializeField]
		protected P3dPaintableTexture _pTexture;

		[Token(Token = "0x4001321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		protected P3dPaintable _pPaintable;

		[Token(Token = "0x4001322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		private XWeaponTrail mWeaponTrail;

		[Token(Token = "0x600160F")]
		[Address(RVA = "0xB6DB00", Offset = "0xB6DB00", VA = "0xB6DB00")]
		private void Start()
		{
		}

		[Token(Token = "0x6001610")]
		[Address(RVA = "0xB6DBD0", Offset = "0xB6DBD0", VA = "0xB6DBD0")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001611")]
		[Address(RVA = "0xB6DFE8", Offset = "0xB6DFE8", VA = "0xB6DFE8", Slot = "27")]
		public override void ON_SliceFailed(Vector3 cPoint, Vector3 nPoint)
		{
		}

		[Token(Token = "0x6001612")]
		[Address(RVA = "0xB6E108", Offset = "0xB6E108", VA = "0xB6E108")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001613")]
		[Address(RVA = "0xB6E580", Offset = "0xB6E580", VA = "0xB6E580", Slot = "25")]
		public override void OnSnapZoneEnter(SnapZone sZone)
		{
		}

		[Token(Token = "0x6001614")]
		[Address(RVA = "0xB6E81C", Offset = "0xB6E81C", VA = "0xB6E81C", Slot = "26")]
		public override void OnSnapZoneExit(SnapZone sZone)
		{
		}

		[Token(Token = "0x6001615")]
		[Address(RVA = "0xB6EA90", Offset = "0xB6EA90", VA = "0xB6EA90")]
		public WEAP_SwordKatana()
		{
		}
	}
	[Token(Token = "0x2000346")]
	public class JointHelperLimiter : MonoBehaviour
	{
		[Token(Token = "0x4001323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool LockXPosition;

		[Token(Token = "0x4001324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool LockYPosition;

		[Token(Token = "0x4001325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool LockZPosition;

		[Token(Token = "0x4001326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool LockXScale;

		[Token(Token = "0x4001327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool LockYScale;

		[Token(Token = "0x4001328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool LockZScale;

		[Token(Token = "0x4001329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public bool LockXRotation;

		[Token(Token = "0x400132A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
		public bool LockYRotation;

		[Token(Token = "0x400132B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool LockZRotation;

		[Token(Token = "0x400132C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 initialPosition;

		[Token(Token = "0x400132D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 initialRotation;

		[Token(Token = "0x400132E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 initialScale;

		[Token(Token = "0x400132F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 currentPosition;

		[Token(Token = "0x4001330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 currentScale;

		[Token(Token = "0x4001331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 currentRotation;

		[Token(Token = "0x4001332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public Vector3 maxDistanceLimit;

		[Token(Token = "0x6001616")]
		[Address(RVA = "0xB6EB04", Offset = "0xB6EB04", VA = "0xB6EB04")]
		private void Start()
		{
		}

		[Token(Token = "0x6001617")]
		[Address(RVA = "0xB6EB74", Offset = "0xB6EB74", VA = "0xB6EB74")]
		private float GetLimitedValue(bool lockValue, float maxDistLimit, float initPos, float curPos)
		{
			return default(float);
		}

		[Token(Token = "0x6001618")]
		[Address(RVA = "0xB6EBB0", Offset = "0xB6EBB0", VA = "0xB6EBB0")]
		private void lockPosition()
		{
		}

		[Token(Token = "0x6001619")]
		[Address(RVA = "0xB6EE2C", Offset = "0xB6EE2C", VA = "0xB6EE2C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600161A")]
		[Address(RVA = "0xB6EE30", Offset = "0xB6EE30", VA = "0xB6EE30")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600161B")]
		[Address(RVA = "0xB6EE34", Offset = "0xB6EE34", VA = "0xB6EE34")]
		public JointHelperLimiter()
		{
		}
	}
	[Token(Token = "0x2000347")]
	public class WEAP_DualLightsaber : MonoBehaviour
	{
		[Token(Token = "0x4001333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		protected Renderer[] saberRens;

		[Token(Token = "0x4001334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		protected SwordVelocityFilter velFilter;

		[Token(Token = "0x4001335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject MobileEffect;

		[Token(Token = "0x4001336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		protected AdvancedMeleeSlicer slicer;

		[Token(Token = "0x4001337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Rigidbody[] rBodies;

		[Token(Token = "0x4001338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AnimationCurve volumeCurve;

		[Token(Token = "0x4001339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float volumeScale;

		[Token(Token = "0x400133A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Material cutMatOverride;

		[Token(Token = "0x400133B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float minCutSpeed;

		[Token(Token = "0x400133C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float minSoundSpeed;

		[Token(Token = "0x400133D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector2 soundMinSpeed;

		[Token(Token = "0x400133E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		protected FBKEvent _effEvent;

		[Token(Token = "0x400133F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		protected VoidEvent _sliceStart;

		[Token(Token = "0x4001340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float DamageTimeout;

		[Token(Token = "0x4001341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float HitRadius;

		[Token(Token = "0x4001342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float Dirt;

		[Token(Token = "0x4001343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public float Burn;

		[Token(Token = "0x4001344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public float Heat;

		[Token(Token = "0x4001345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float Clip;

		[Token(Token = "0x4001346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Animator _anim;

		[Token(Token = "0x4001347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private AudioObject _saberHit;

		[Token(Token = "0x4001348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private AudioObject _saberSwing;

		[Token(Token = "0x4001349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private AudioObject _saberHumObject;

		[Token(Token = "0x400134A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private CapsuleCollider _mainCollider;

		[Token(Token = "0x400134B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private float _lastTouchTime;

		[Token(Token = "0x400134C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float _avgVelocity;

		[Token(Token = "0x400134D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private DamageFX _dfx;

		[Token(Token = "0x400134E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool _sparkParticlePlayeEnded;

		[Token(Token = "0x400134F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Grabber _grabberHand;

		[Token(Token = "0x4001350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public int GrabbedHandsCount;

		[Token(Token = "0x600161C")]
		[Address(RVA = "0xB6EEA0", Offset = "0xB6EEA0", VA = "0xB6EEA0")]
		private void Awake()
		{
		}

		[Token(Token = "0x600161D")]
		[Address(RVA = "0xB6EF30", Offset = "0xB6EF30", VA = "0xB6EF30")]
		public bool IsSwordSwingCorrect()
		{
			return default(bool);
		}

		[Token(Token = "0x600161E")]
		[Address(RVA = "0xB6EFCC", Offset = "0xB6EFCC", VA = "0xB6EFCC")]
		private void Update()
		{
		}

		[Token(Token = "0x600161F")]
		[Address(RVA = "0xB6EFF4", Offset = "0xB6EFF4", VA = "0xB6EFF4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001620")]
		[Address(RVA = "0xB6F25C", Offset = "0xB6F25C", VA = "0xB6F25C")]
		protected bool IsSound_1_OK()
		{
			return default(bool);
		}

		[Token(Token = "0x6001621")]
		[Address(RVA = "0xB6F334", Offset = "0xB6F334", VA = "0xB6F334")]
		protected bool IsSound_2_OK()
		{
			return default(bool);
		}

		[Token(Token = "0x6001622")]
		[Address(RVA = "0xB6F3DC", Offset = "0xB6F3DC", VA = "0xB6F3DC")]
		protected bool ShouldIgnore(int goLayer)
		{
			return default(bool);
		}

		[Token(Token = "0x6001623")]
		[Address(RVA = "0xB6F4D0", Offset = "0xB6F4D0", VA = "0xB6F4D0")]
		private void PlaySparkParticle(Vector3 point, Vector3 normal)
		{
		}

		[Token(Token = "0x6001624")]
		[Address(RVA = "0xB6F7DC", Offset = "0xB6F7DC", VA = "0xB6F7DC")]
		private void OnSparksParticlePlayEnd()
		{
		}

		[Token(Token = "0x6001625")]
		[Address(RVA = "0xB6F7E8", Offset = "0xB6F7E8", VA = "0xB6F7E8")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001626")]
		[Address(RVA = "0xB6FA74", Offset = "0xB6FA74", VA = "0xB6FA74")]
		private void OnCollisionStay(Collision collision)
		{
		}

		[Token(Token = "0x6001627")]
		[Address(RVA = "0xB6FC34", Offset = "0xB6FC34", VA = "0xB6FC34")]
		private void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x6001628")]
		[Address(RVA = "0xB6FC68", Offset = "0xB6FC68", VA = "0xB6FC68")]
		public void EVT_OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6001629")]
		[Address(RVA = "0xB6FE28", Offset = "0xB6FE28", VA = "0xB6FE28")]
		public void EVT_OnRelease()
		{
		}

		[Token(Token = "0x600162A")]
		[Address(RVA = "0xB6FFDC", Offset = "0xB6FFDC", VA = "0xB6FFDC")]
		public void ANC_ExtendAnimationEnded()
		{
		}

		[Token(Token = "0x600162B")]
		[Address(RVA = "0xB6FFE0", Offset = "0xB6FFE0", VA = "0xB6FFE0")]
		public void CB_OnSliceProcessed(Vector3 colPoint, Vector3 colNormal)
		{
		}

		[Token(Token = "0x600162C")]
		[Address(RVA = "0xB700AC", Offset = "0xB700AC", VA = "0xB700AC", Slot = "4")]
		public virtual void ON_SliceFailed(Vector3 cPoint, Vector3 nPoint)
		{
		}

		[Token(Token = "0x600162D")]
		[Address(RVA = "0xB6F980", Offset = "0xB6F980", VA = "0xB6F980")]
		protected bool IsSlicable(int goLayer)
		{
			return default(bool);
		}

		[Token(Token = "0x600162E")]
		[Address(RVA = "0xB700B0", Offset = "0xB700B0", VA = "0xB700B0")]
		public WEAP_DualLightsaber()
		{
		}
	}
	[Token(Token = "0x2000348")]
	public class WEAP_LightSaber : I_SwordBase
	{
		[Token(Token = "0x2000349")]
		public enum LightBladeType
		{
			[Token(Token = "0x4001366")]
			SINGLE,
			[Token(Token = "0x4001367")]
			DUAL
		}

		[Token(Token = "0x4001351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public LightBladeType LBladeType;

		[Token(Token = "0x4001352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public GameObject MobileEffect;

		[Token(Token = "0x4001353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public float DamageTimeout;

		[Token(Token = "0x4001354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public float HitRadius;

		[Token(Token = "0x4001355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public float Dirt;

		[Token(Token = "0x4001356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public float Burn;

		[Token(Token = "0x4001357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public float Heat;

		[Token(Token = "0x4001358")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public float Clip;

		[Token(Token = "0x4001359")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private bool _bladeExtended;

		[Token(Token = "0x400135A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private Animator _anim;

		[Token(Token = "0x400135B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Grabbable _grabbable;

		[Token(Token = "0x400135C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private InputBridge _VRInput;

		[Token(Token = "0x400135D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private bool _AnimationIsPlaying;

		[Token(Token = "0x400135E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private DamageFX _dfx;

		[Token(Token = "0x400135F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private float _lastTouchTime;

		[Token(Token = "0x4001360")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11C")]
		private bool _sparkParticlePlayeEnded;

		[Token(Token = "0x4001361")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private AudioObject _saberHit;

		[Token(Token = "0x4001362")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private AudioObject _saberSwing;

		[Token(Token = "0x4001363")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private AudioObject _saberHumObject;

		[Token(Token = "0x4001364")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private List<Rigidbody> _rBodies;

		[Token(Token = "0x600162F")]
		[Address(RVA = "0xB70174", Offset = "0xB70174", VA = "0xB70174")]
		private void Start()
		{
		}

		[Token(Token = "0x6001630")]
		[Address(RVA = "0xB7026C", Offset = "0xB7026C", VA = "0xB7026C")]
		private void IR_FixSlicedPartsPhysics()
		{
		}

		[Token(Token = "0x6001631")]
		[Address(RVA = "0xB704A4", Offset = "0xB704A4", VA = "0xB704A4")]
		protected float getTriggerInput(ControllerHand handSide)
		{
			return default(float);
		}

		[Token(Token = "0x6001632")]
		[Address(RVA = "0xB704E4", Offset = "0xB704E4", VA = "0xB704E4")]
		private void ExtendBlade()
		{
		}

		[Token(Token = "0x6001633")]
		[Address(RVA = "0xB705F8", Offset = "0xB705F8", VA = "0xB705F8")]
		private void RetractBlade()
		{
		}

		[Token(Token = "0x6001634")]
		[Address(RVA = "0xB70718", Offset = "0xB70718", VA = "0xB70718")]
		private void Update()
		{
		}

		[Token(Token = "0x6001635")]
		[Address(RVA = "0xB707F0", Offset = "0xB707F0", VA = "0xB707F0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001636")]
		[Address(RVA = "0xB70B60", Offset = "0xB70B60", VA = "0xB70B60")]
		private void OnSparksParticlePlayEnd()
		{
		}

		[Token(Token = "0x6001637")]
		[Address(RVA = "0xB70B6C", Offset = "0xB70B6C", VA = "0xB70B6C")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001638")]
		[Address(RVA = "0xB70FD0", Offset = "0xB70FD0", VA = "0xB70FD0")]
		private void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x6001639")]
		[Address(RVA = "0xB70FD8", Offset = "0xB70FD8", VA = "0xB70FD8", Slot = "28")]
		public override void CB_OnSliceProcessed(Vector3 colPoint, Vector3 colNormal)
		{
		}

		[Token(Token = "0x600163A")]
		[Address(RVA = "0xB70CBC", Offset = "0xB70CBC", VA = "0xB70CBC")]
		private void PlaySparkParticle(Vector3 point, Vector3 normal)
		{
		}

		[Token(Token = "0x600163B")]
		[Address(RVA = "0xB710A4", Offset = "0xB710A4", VA = "0xB710A4")]
		private void OnCollisionStay(Collision collision)
		{
		}

		[Token(Token = "0x600163C")]
		[Address(RVA = "0xB71290", Offset = "0xB71290", VA = "0xB71290")]
		public void ANC_ExtendAnimationEnded()
		{
		}

		[Token(Token = "0x600163D")]
		[Address(RVA = "0xB71298", Offset = "0xB71298", VA = "0xB71298", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x600163E")]
		[Address(RVA = "0xB71440", Offset = "0xB71440", VA = "0xB71440", Slot = "25")]
		public override void OnSnapZoneEnter(SnapZone sZone)
		{
		}

		[Token(Token = "0x600163F")]
		[Address(RVA = "0xB714DC", Offset = "0xB714DC", VA = "0xB714DC", Slot = "26")]
		public override void OnSnapZoneExit(SnapZone sZone)
		{
		}

		[Token(Token = "0x6001640")]
		[Address(RVA = "0xB71578", Offset = "0xB71578", VA = "0xB71578", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x6001641")]
		[Address(RVA = "0xB71630", Offset = "0xB71630", VA = "0xB71630")]
		public WEAP_LightSaber()
		{
		}
	}
	[Token(Token = "0x200034B")]
	public class AdvancedMeleeSlicer : MonoBehaviour
	{
		[Token(Token = "0x400136A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool IsActive;

		[Token(Token = "0x400136B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool useBatchRaycast;

		[Token(Token = "0x400136C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool IsLigthSaber;

		[Token(Token = "0x400136D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool useCapsuleCut;

		[Token(Token = "0x400136E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public SwordVelocityFilter velFilter;

		[Token(Token = "0x400136F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public I_SwordBase swordRef;

		[Token(Token = "0x4001370")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public WEAP_DualLightsaber lsaberRef;

		[Token(Token = "0x4001371")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public P3dPaintableTexture pTexture;

		[Token(Token = "0x4001372")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public DirtPaintEvent dPaintEvent;

		[Token(Token = "0x4001373")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<SlicePoint> cutScans;

		[Token(Token = "0x4001374")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public CapsuleCollider cutCollider;

		[Token(Token = "0x4001375")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<Vector3> prevNodes;

		[Token(Token = "0x4001376")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 _prevStart;

		[Token(Token = "0x4001377")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 _prevTip;

		[Token(Token = "0x6001645")]
		[Address(RVA = "0xB71794", Offset = "0xB71794", VA = "0xB71794")]
		private void Start()
		{
		}

		[Token(Token = "0x6001646")]
		[Address(RVA = "0xB719A8", Offset = "0xB719A8", VA = "0xB719A8")]
		public void ProcessHit(Collider hCol, Vector3 hPoint, Vector3 hNormal, Vector3 origPos)
		{
		}

		[Token(Token = "0x6001647")]
		[Address(RVA = "0xB72240", Offset = "0xB72240", VA = "0xB72240")]
		private void PaintDirt(Vector3 origPos, I_SliceInfo sliceInfo)
		{
		}

		[Token(Token = "0x6001648")]
		[Address(RVA = "0xB723F0", Offset = "0xB723F0", VA = "0xB723F0")]
		private void CleanUpAfterCast()
		{
		}

		[Token(Token = "0x6001649")]
		[Address(RVA = "0xB72624", Offset = "0xB72624", VA = "0xB72624")]
		public void CastRaysBatched()
		{
		}

		[Token(Token = "0x600164A")]
		[Address(RVA = "0xB72B70", Offset = "0xB72B70", VA = "0xB72B70")]
		public void CastRays()
		{
		}

		[Token(Token = "0x600164B")]
		[Address(RVA = "0xB72F2C", Offset = "0xB72F2C", VA = "0xB72F2C")]
		private Vector3 GetAvgDir()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600164C")]
		[Address(RVA = "0xB72F7C", Offset = "0xB72F7C", VA = "0xB72F7C")]
		private float GetAvgLen()
		{
			return default(float);
		}

		[Token(Token = "0x600164D")]
		[Address(RVA = "0xB73030", Offset = "0xB73030", VA = "0xB73030")]
		private void CastCapsule()
		{
		}

		[Token(Token = "0x600164E")]
		[Address(RVA = "0xB733AC", Offset = "0xB733AC", VA = "0xB733AC")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600164F")]
		[Address(RVA = "0xB7358C", Offset = "0xB7358C", VA = "0xB7358C")]
		public AdvancedMeleeSlicer()
		{
		}
	}
	[Token(Token = "0x200034C")]
	public class AutoDamagePlacer : MonoBehaviour
	{
		[Token(Token = "0x4001378")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AdvancedMeleeSlicer slicer;

		[Token(Token = "0x4001379")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(0.01f, 0.3f)]
		public float placeDistance;

		[Token(Token = "0x400137A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Range(0.01f, 0.5f)]
		public float slicerRadius;

		[Token(Token = "0x400137B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool doubleSided;

		[Token(Token = "0x400137C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector2 dir;

		[Token(Token = "0x400137D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform T_Start;

		[Token(Token = "0x400137E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform T_End;

		[Token(Token = "0x400137F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform T_Start2;

		[Token(Token = "0x4001380")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3 locRot;

		[Token(Token = "0x6001650")]
		[Address(RVA = "0xB7364C", Offset = "0xB7364C", VA = "0xB7364C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001651")]
		[Address(RVA = "0xB736A4", Offset = "0xB736A4", VA = "0xB736A4")]
		private void AutoPlace()
		{
		}

		[Token(Token = "0x6001652")]
		[Address(RVA = "0xB73C1C", Offset = "0xB73C1C", VA = "0xB73C1C")]
		public AutoDamagePlacer()
		{
		}
	}
	[Token(Token = "0x200034D")]
	public class DirtPaintManager : MonoBehaviour
	{
		[Token(Token = "0x200034E")]
		public enum eDirtType
		{
			[Token(Token = "0x4001383")]
			NONE,
			[Token(Token = "0x4001384")]
			BLOOD_RED,
			[Token(Token = "0x4001385")]
			BLOOD_GREEN,
			[Token(Token = "0x4001386")]
			BLOOD_YELLOW,
			[Token(Token = "0x4001387")]
			BLOOD_ORANGE
		}

		[Serializable]
		[Token(Token = "0x200034F")]
		public class DirtPaintDictionary : Extensions.SerializableDictionary<eDirtType, ProjectBlood>
		{
			[Token(Token = "0x6001655")]
			[Address(RVA = "0xB73DB8", Offset = "0xB73DB8", VA = "0xB73DB8")]
			public DirtPaintDictionary()
			{
			}
		}

		[Token(Token = "0x4001381")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DirtPaintDictionary dirtDecals;

		[Token(Token = "0x6001653")]
		[Address(RVA = "0xB73C84", Offset = "0xB73C84", VA = "0xB73C84")]
		public void EVT_DirtPaint((P3dPaintableTexture texture, Vector3 posA, Vector3 posB, eDirtType dirtType) dInfo)
		{
		}

		[Token(Token = "0x6001654")]
		[Address(RVA = "0xB73D54", Offset = "0xB73D54", VA = "0xB73D54")]
		public DirtPaintManager()
		{
		}
	}
	[Token(Token = "0x2000350")]
	public interface IDamagable
	{
		[Token(Token = "0x6001656")]
		void ON_MeleeHit();

		[Token(Token = "0x6001657")]
		void ON_ArrowHit();
	}
	[Token(Token = "0x2000351")]
	public abstract class IMeleeBase : I_AutoHolster
	{
		[Token(Token = "0x2000352")]
		public struct cutInfo
		{
			[Token(Token = "0x400139F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public GameObject GO;

			[Token(Token = "0x40013A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public Vector3 pos;

			[Token(Token = "0x40013A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Vector3 dir;
		}

		[Token(Token = "0x4001388")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public I_SwordBase.eCutSideType cutSide;

		[Token(Token = "0x4001389")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public LayerMask cutObjectLayer;

		[Token(Token = "0x400138A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public LayerMask IgnoreObjectLayer;

		[Token(Token = "0x400138B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public PhysicMaterial cutPhysMaterial;

		[Token(Token = "0x400138C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float swordHitVelocity;

		[Token(Token = "0x400138D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float swordCutVelocity;

		[Token(Token = "0x400138E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float MAX_ANGLE;

		[Token(Token = "0x400138F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[TagSelector]
		public string[] TagFilterArray;

		[Token(Token = "0x4001390")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		protected FBKEvent _effEvent;

		[Token(Token = "0x4001391")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform T_tip;

		[Token(Token = "0x4001392")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Grabber GrabberHand;

		[Token(Token = "0x4001393")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Material CutMaterial;

		[Token(Token = "0x4001394")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public SecondaryHandSnapper FakeHand_L;

		[Token(Token = "0x4001395")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public SecondaryHandSnapper FakeHand_R;

		[Token(Token = "0x4001396")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected List<SliceCaster> mSliceCasters;

		[Token(Token = "0x4001397")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected XWeaponTrail mWeaponTrail;

		[Token(Token = "0x4001398")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected Grabbable mMeleeGrabber;

		[Token(Token = "0x4001399")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected bool IsMovingForward;

		[Token(Token = "0x400139A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		protected float cSwordVelocity;

		[Token(Token = "0x400139B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected float mSwingDirection;

		[Token(Token = "0x400139C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		protected Vector3 mVelocityDir;

		[Token(Token = "0x400139D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected List<Vector3> prevPos;

		[Token(Token = "0x400139E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected Dictionary<int, Vector3> mSlicePoint;

		[Token(Token = "0x6001658")]
		[Address(RVA = "0xB73E00", Offset = "0xB73E00", VA = "0xB73E00")]
		protected void Init()
		{
		}

		[Token(Token = "0x6001659")]
		[Address(RVA = "0xB73EE4", Offset = "0xB73EE4", VA = "0xB73EE4")]
		protected bool WasEnemyHit(string hObjectTag)
		{
			return default(bool);
		}

		[Token(Token = "0x600165A")]
		[Address(RVA = "0xB73F64", Offset = "0xB73F64", VA = "0xB73F64")]
		protected bool ShouldIgnore(int goLayer)
		{
			return default(bool);
		}

		[Token(Token = "0x600165B")]
		[Address(RVA = "0xB73FB4", Offset = "0xB73FB4", VA = "0xB73FB4")]
		protected bool IsSlicable(int goLayer)
		{
			return default(bool);
		}

		[Token(Token = "0x600165C")]
		[Address(RVA = "0xB74004", Offset = "0xB74004", VA = "0xB74004")]
		private void ProcessCutObject(GameObject GO, Vector3 moveVelocity)
		{
		}

		[Token(Token = "0x600165D")]
		[Address(RVA = "0xB74350", Offset = "0xB74350", VA = "0xB74350")]
		public void TryToSlice(GameObject sGO)
		{
		}

		[Token(Token = "0x600165E")]
		[Address(RVA = "0xB745E0", Offset = "0xB745E0", VA = "0xB745E0")]
		public void UpdateSlicePoint(GameObject sGO, Vector3 point)
		{
		}

		[Token(Token = "0x600165F")]
		[Address(RVA = "0xB746E8", Offset = "0xB746E8", VA = "0xB746E8")]
		public void CheckIfCutSomehting()
		{
		}

		[Token(Token = "0x6001660")]
		[Address(RVA = "0xB74EA8", Offset = "0xB74EA8", VA = "0xB74EA8")]
		protected void UpdateVelocityDir()
		{
		}

		[Token(Token = "0x6001661")]
		[Address(RVA = "0xB750BC", Offset = "0xB750BC", VA = "0xB750BC")]
		protected void BaseOnRelease()
		{
		}

		[Token(Token = "0x6001662")]
		[Address(RVA = "0xB7510C", Offset = "0xB7510C", VA = "0xB7510C")]
		protected void UpdateSwordVelocity()
		{
		}

		[Token(Token = "0x6001663")]
		[Address(RVA = "0xB75148", Offset = "0xB75148", VA = "0xB75148")]
		protected IMeleeBase()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000354")]
	public class WeaponHolster : Extensions.SerializableDictionary<int, SnapZone>
	{
		[Token(Token = "0x6001668")]
		[Address(RVA = "0xB754A8", Offset = "0xB754A8", VA = "0xB754A8")]
		public WeaponHolster()
		{
		}
	}
	[Token(Token = "0x2000355")]
	[RequireComponent(typeof(ReturnToSnapZone))]
	public class I_AutoHolster : GrabbableEvents
	{
		[Token(Token = "0x40013A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool bAutoReturnToSnapZone;

		[Token(Token = "0x40013A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private ReturnToSnapZone _retSnapZone;

		[Token(Token = "0x6001669")]
		[Address(RVA = "0xB67C9C", Offset = "0xB67C9C", VA = "0xB67C9C", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x600166A")]
		[Address(RVA = "0xB754F0", Offset = "0xB754F0", VA = "0xB754F0")]
		private void AssignSnapZone()
		{
		}

		[Token(Token = "0x600166B")]
		[Address(RVA = "0xB67AA8", Offset = "0xB67AA8", VA = "0xB67AA8", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x600166C")]
		[Address(RVA = "0xB6E6F8", Offset = "0xB6E6F8", VA = "0xB6E6F8", Slot = "25")]
		public override void OnSnapZoneEnter(SnapZone sZone)
		{
		}

		[Token(Token = "0x600166D")]
		[Address(RVA = "0xB6E974", Offset = "0xB6E974", VA = "0xB6E974", Slot = "26")]
		public override void OnSnapZoneExit(SnapZone sZone)
		{
		}

		[Token(Token = "0x600166E")]
		[Address(RVA = "0xB67D7C", Offset = "0xB67D7C", VA = "0xB67D7C")]
		public I_AutoHolster()
		{
		}
	}
	[Token(Token = "0x2000356")]
	public class I_SliceInfo : MonoBehaviour
	{
		[Token(Token = "0x2000358")]
		[CompilerGenerated]
		private sealed class <CR_DoFade>d__21 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40013B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public I_SliceInfo <>4__this;

			[Token(Token = "0x40013B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private List<int> <mIndexes>5__2;

			[Token(Token = "0x40013BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Color <cColor>5__3;

			[Token(Token = "0x40013BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private float <heatVal>5__4;

			[Token(Token = "0x1700025B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600167C")]
				[Address(RVA = "0xB76350", Offset = "0xB76350", VA = "0xB76350", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700025C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600167E")]
				[Address(RVA = "0xB76398", Offset = "0xB76398", VA = "0xB76398", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001679")]
			[Address(RVA = "0xB75CE8", Offset = "0xB75CE8", VA = "0xB75CE8")]
			[DebuggerHidden]
			public <CR_DoFade>d__21(int <>1__state)
			{
			}

			[Token(Token = "0x600167A")]
			[Address(RVA = "0xB75D3C", Offset = "0xB75D3C", VA = "0xB75D3C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600167B")]
			[Address(RVA = "0xB75D40", Offset = "0xB75D40", VA = "0xB75D40", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600167D")]
			[Address(RVA = "0xB76358", Offset = "0xB76358", VA = "0xB76358", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40013A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool IsChallengeBamboo;

		[Token(Token = "0x40013A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool IsSliceChunk;

		[Token(Token = "0x40013A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject PF_SubstituteMesh;

		[Token(Token = "0x40013A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool OnlyLightSaber;

		[Token(Token = "0x40013AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public DirtPaintManager.eDirtType DirtType;

		[Token(Token = "0x40013AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Material SliceMaterial;

		[Token(Token = "0x40013AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Material androidMaterial;

		[Token(Token = "0x40013AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string SpawnEffectInfo;

		[Token(Token = "0x40013AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float TTLOverride;

		[Token(Token = "0x40013AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool propagatePhysxToChild;

		[Token(Token = "0x40013B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		public bool makeLowerPartKinematic;

		[Token(Token = "0x40013B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public VoidEvent _startFruitNinja;

		[Token(Token = "0x40013B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public IntEvent _sliceEvent;

		[Token(Token = "0x40013B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private MaterialPropertyBlock _mpb;

		[Token(Token = "0x40013B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Renderer _renderer;

		[Token(Token = "0x600166F")]
		[Address(RVA = "0xB7568C", Offset = "0xB7568C", VA = "0xB7568C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001670")]
		[Address(RVA = "0xB75720", Offset = "0xB75720", VA = "0xB75720")]
		private void Start()
		{
		}

		[Token(Token = "0x6001671")]
		[Address(RVA = "0xB75810", Offset = "0xB75810", VA = "0xB75810")]
		public void RecalcPhysx()
		{
		}

		[Token(Token = "0x6001672")]
		[Address(RVA = "0xB75A28", Offset = "0xB75A28", VA = "0xB75A28")]
		public void SignalSliceEvent(int SliceObjID)
		{
		}

		[Token(Token = "0x6001673")]
		[Address(RVA = "0xB75AD4", Offset = "0xB75AD4", VA = "0xB75AD4")]
		internal void FadeHeat()
		{
		}

		[Token(Token = "0x6001674")]
		[Address(RVA = "0xB75BC4", Offset = "0xB75BC4", VA = "0xB75BC4")]
		private bool HaveSaberCutMaterial()
		{
			return default(bool);
		}

		[Token(Token = "0x6001675")]
		[Address(RVA = "0xB75C80", Offset = "0xB75C80", VA = "0xB75C80")]
		[IteratorStateMachine(typeof(<CR_DoFade>d__21))]
		private IEnumerator CR_DoFade()
		{
			return null;
		}

		[Token(Token = "0x6001676")]
		[Address(RVA = "0xB75D10", Offset = "0xB75D10", VA = "0xB75D10")]
		public I_SliceInfo()
		{
		}
	}
	[Token(Token = "0x2000359")]
	public class I_SwordBase : I_AutoHolster
	{
		[Token(Token = "0x200035A")]
		public enum eCutSideType
		{
			[Token(Token = "0x40013CF")]
			E_SINGLE_SIDED,
			[Token(Token = "0x40013D0")]
			E_DOUBLE_SIDED
		}

		[Token(Token = "0x200035B")]
		public delegate void CollisionCallback(Vector3 colPoint, Vector3 colNormal);

		[Token(Token = "0x40013BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public eCutSideType cutType;

		[Token(Token = "0x40013BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool supportSecondHandGrab;

		[Token(Token = "0x40013BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float minCutSpeed;

		[Token(Token = "0x40013BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float minSoundSpeed;

		[Token(Token = "0x40013C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector2 soundMinSpeed;

		[Token(Token = "0x40013C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Material cutMatOverride;

		[Token(Token = "0x40013C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		protected FBKEvent _effEvent;

		[Token(Token = "0x40013C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		protected VoidEvent _sliceStart;

		[Token(Token = "0x40013C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		protected VoidEvent _sliceEnd;

		[Token(Token = "0x40013C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		protected SwordVelocityFilter velFilter;

		[Token(Token = "0x40013C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		protected AdvancedMeleeSlicer slicer;

		[Token(Token = "0x40013C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public AnimationCurve volumeCurve;

		[Token(Token = "0x40013C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float volumeScale;

		[Token(Token = "0x40013C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[SerializeField]
		protected GameObject leftFakeHand;

		[Token(Token = "0x40013CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[SerializeField]
		protected GameObject rightFakeHand;

		[Token(Token = "0x40013CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected float _avgVelocity;

		[Token(Token = "0x40013CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected Grabber _grabberHand;

		[Token(Token = "0x40013CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected Collider[] _swordCols;

		[Token(Token = "0x1700025D")]
		public Grabber GrabberHand
		{
			[Token(Token = "0x600167F")]
			[Address(RVA = "0xB763A0", Offset = "0xB763A0", VA = "0xB763A0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001680")]
		[Address(RVA = "0xB6DEF4", Offset = "0xB6DEF4", VA = "0xB6DEF4")]
		protected bool IsSlicable(int goLayer)
		{
			return default(bool);
		}

		[Token(Token = "0x6001681")]
		[Address(RVA = "0xB6DE00", Offset = "0xB6DE00", VA = "0xB6DE00")]
		protected bool ShouldIgnore(int goLayer)
		{
			return default(bool);
		}

		[Token(Token = "0x6001682")]
		[Address(RVA = "0xB763A8", Offset = "0xB763A8", VA = "0xB763A8", Slot = "27")]
		public virtual void ON_SliceFailed(Vector3 cPoint, Vector3 nPoint)
		{
		}

		[Token(Token = "0x6001683")]
		[Address(RVA = "0xB6E32C", Offset = "0xB6E32C", VA = "0xB6E32C")]
		protected bool IsSound_1_OK()
		{
			return default(bool);
		}

		[Token(Token = "0x6001684")]
		[Address(RVA = "0xB70AB8", Offset = "0xB70AB8", VA = "0xB70AB8")]
		protected bool IsSound_2_OK()
		{
			return default(bool);
		}

		[Token(Token = "0x6001685")]
		[Address(RVA = "0xB763AC", Offset = "0xB763AC", VA = "0xB763AC")]
		public Vector3 GetAvgVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001686")]
		[Address(RVA = "0xB6E404", Offset = "0xB6E404", VA = "0xB6E404")]
		public bool IsSwordSwingCorrect()
		{
			return default(bool);
		}

		[Token(Token = "0x6001687")]
		[Address(RVA = "0xB76498", Offset = "0xB76498", VA = "0xB76498")]
		private void SetGrabbables(Grabber grabber)
		{
		}

		[Token(Token = "0x6001688")]
		[Address(RVA = "0xB6E518", Offset = "0xB6E518", VA = "0xB6E518")]
		public void Convert2Trigger(bool bSetTrigger)
		{
		}

		[Token(Token = "0x6001689")]
		[Address(RVA = "0xB712C0", Offset = "0xB712C0", VA = "0xB712C0", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x600168A")]
		[Address(RVA = "0xB76660", Offset = "0xB76660", VA = "0xB76660", Slot = "28")]
		public virtual void CB_OnSliceProcessed(Vector3 colPoint, Vector3 colNormal)
		{
		}

		[Token(Token = "0x600168B")]
		[Address(RVA = "0xB715B0", Offset = "0xB715B0", VA = "0xB715B0", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x600168C")]
		[Address(RVA = "0xB6EA9C", Offset = "0xB6EA9C", VA = "0xB6EA9C")]
		public I_SwordBase()
		{
		}
	}
	[Token(Token = "0x200035C")]
	public class Katana_FakeSecondHand : MonoBehaviour
	{
		[Token(Token = "0x40013D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public InputBridge input;

		[Token(Token = "0x40013D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabbable katanaHand;

		[Token(Token = "0x40013D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SkinnedMeshRenderer skMesh;

		[Token(Token = "0x40013D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Animator anim;

		[Token(Token = "0x40013D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public LinearAnimator linAnim;

		[Token(Token = "0x40013D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float maxDrawDistance;

		[Token(Token = "0x40013D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public MeshRenderer FakeKatana;

		[Token(Token = "0x40013D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Grabbable RealKatana;

		[Token(Token = "0x40013D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform T_ScabbardPoint;

		[Token(Token = "0x40013DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public WEAP_KatanaScabbard Scabbard;

		[Token(Token = "0x40013DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool IsEnabled;

		[Token(Token = "0x40013DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Grabber _hidedHand;

		[Token(Token = "0x40013DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float _drawDistance;

		[Token(Token = "0x40013DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private bool _playedOutSound;

		[Token(Token = "0x40013DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7D")]
		private bool _IsReadyForScabbard;

		[Token(Token = "0x6001691")]
		[Address(RVA = "0xB6D790", Offset = "0xB6D790", VA = "0xB6D790")]
		internal void OnRelease()
		{
		}

		[Token(Token = "0x6001692")]
		[Address(RVA = "0xB768F8", Offset = "0xB768F8", VA = "0xB768F8")]
		private void Reset()
		{
		}

		[Token(Token = "0x6001693")]
		[Address(RVA = "0xB76A24", Offset = "0xB76A24", VA = "0xB76A24")]
		private void ResetAnim()
		{
		}

		[Token(Token = "0x6001694")]
		[Address(RVA = "0xB76AC0", Offset = "0xB76AC0", VA = "0xB76AC0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001695")]
		[Address(RVA = "0xB76BE8", Offset = "0xB76BE8", VA = "0xB76BE8")]
		private float GetGripInput(ControllerHand HandSide)
		{
			return default(float);
		}

		[Token(Token = "0x6001696")]
		[Address(RVA = "0xB76C28", Offset = "0xB76C28", VA = "0xB76C28")]
		private void OnTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x6001697")]
		[Address(RVA = "0xB76E1C", Offset = "0xB76E1C", VA = "0xB76E1C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001698")]
		[Address(RVA = "0xB77184", Offset = "0xB77184", VA = "0xB77184")]
		public Katana_FakeSecondHand()
		{
		}
	}
	[Token(Token = "0x200035D")]
	public class ProjectBlood : P3dConnectableLines
	{
		[Token(Token = "0x40013E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 positionA;

		[Token(Token = "0x40013E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 positionB;

		[Token(Token = "0x40013E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public P3dPaintableTexture pTexture;

		[Token(Token = "0x40013E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform T_A;

		[Token(Token = "0x40013E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform T_B;

		[Token(Token = "0x6001699")]
		[Address(RVA = "0xB77194", Offset = "0xB77194", VA = "0xB77194")]
		public void Test()
		{
		}

		[Token(Token = "0x600169A")]
		[Address(RVA = "0xB73D4C", Offset = "0xB73D4C", VA = "0xB73D4C")]
		public void Project()
		{
		}

		[Token(Token = "0x600169B")]
		[Address(RVA = "0xB772A4", Offset = "0xB772A4", VA = "0xB772A4")]
		public void Clear()
		{
		}

		[Token(Token = "0x600169C")]
		[Address(RVA = "0xB771E0", Offset = "0xB771E0", VA = "0xB771E0")]
		private void SubmitHit(bool preview)
		{
		}

		[Token(Token = "0x600169D")]
		[Address(RVA = "0xB77328", Offset = "0xB77328", VA = "0xB77328")]
		public ProjectBlood()
		{
		}
	}
	[Token(Token = "0x200035E")]
	public class SliceCaster : MonoBehaviour
	{
		[Token(Token = "0x40013E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float castDistance;

		[Token(Token = "0x40013E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Vector3> hitPoints;

		[Token(Token = "0x600169E")]
		[Address(RVA = "0xB77380", Offset = "0xB77380", VA = "0xB77380")]
		public RaycastHit CastRay(LayerMask castMask)
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x600169F")]
		[Address(RVA = "0xB74C68", Offset = "0xB74C68", VA = "0xB74C68")]
		public RaycastHit CastRay(Vector3 start, LayerMask castMask)
		{
			return default(RaycastHit);
		}

		[Token(Token = "0x60016A0")]
		[Address(RVA = "0xB77560", Offset = "0xB77560", VA = "0xB77560")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x60016A1")]
		[Address(RVA = "0xB77818", Offset = "0xB77818", VA = "0xB77818")]
		public SliceCaster()
		{
		}
	}
	[Token(Token = "0x200035F")]
	public class SliceManager : MonoSingleton<SliceManager>
	{
		[Token(Token = "0x2000360")]
		private struct sliceObject
		{
			[Token(Token = "0x40013EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int swordID;

			[Token(Token = "0x40013ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			private GameObject sliceChunk;
		}

		[Serializable]
		[Token(Token = "0x2000361")]
		public class SliceDictionary : Extensions.SerializableDictionary<int, (int, GameObject)>
		{
			[Token(Token = "0x60016A7")]
			[Address(RVA = "0xB781D8", Offset = "0xB781D8", VA = "0xB781D8")]
			public SliceDictionary()
			{
			}
		}

		[Token(Token = "0x2000362")]
		[CompilerGenerated]
		private sealed class <CR_SliceObject>d__8 : IEnumerator<float>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40013EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40013EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			private float <>2__current;

			[Token(Token = "0x40013F0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public SliceManager <>4__this;

			[Token(Token = "0x40013F1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public I_SliceInfo sliceInfo;

			[Token(Token = "0x40013F2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public GameObject slCandidate;

			[Token(Token = "0x40013F3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Vector3 cPoint;

			[Token(Token = "0x40013F4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public Vector3 sliceDir;

			[Token(Token = "0x40013F5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private Material <cutMaterial>5__2;

			[Token(Token = "0x1700025E")]
			private float System.Collections.Generic.IEnumerator<System.Single>.Current
			{
				[Token(Token = "0x60016AB")]
				[Address(RVA = "0xB78794", Offset = "0xB78794", VA = "0xB78794", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return default(float);
				}
			}

			[Token(Token = "0x1700025F")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60016AD")]
				[Address(RVA = "0xB787DC", Offset = "0xB787DC", VA = "0xB787DC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60016A8")]
			[Address(RVA = "0xB77958", Offset = "0xB77958", VA = "0xB77958")]
			[DebuggerHidden]
			public <CR_SliceObject>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x60016A9")]
			[Address(RVA = "0xB78220", Offset = "0xB78220", VA = "0xB78220", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60016AA")]
			[Address(RVA = "0xB78224", Offset = "0xB78224", VA = "0xB78224", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60016AC")]
			[Address(RVA = "0xB7879C", Offset = "0xB7879C", VA = "0xB7879C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40013E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material defaultCutMaterial;

		[Token(Token = "0x40013E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Range(10f, 60f)]
		public float chunkLifetime;

		[Token(Token = "0x40013E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float slicePause;

		[Token(Token = "0x40013EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		protected FBKEvent _effEvent;

		[Token(Token = "0x40013EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SliceDictionary sliceCandidates;

		[Token(Token = "0x60016A2")]
		[Address(RVA = "0xB72004", Offset = "0xB72004", VA = "0xB72004")]
		public bool ProcessSlice(int swordID, Collider slCandidate, Vector3 cPoint, Vector3 sliceDir, I_SliceInfo sliceInfo)
		{
			return default(bool);
		}

		[Token(Token = "0x60016A3")]
		[Address(RVA = "0xB778A0", Offset = "0xB778A0", VA = "0xB778A0")]
		[IteratorStateMachine(typeof(<CR_SliceObject>d__8))]
		private IEnumerator<float> CR_SliceObject(GameObject slCandidate, Vector3 cPoint, Vector3 sliceDir, I_SliceInfo sliceInfo)
		{
			return null;
		}

		[Token(Token = "0x60016A4")]
		[Address(RVA = "0xB77980", Offset = "0xB77980", VA = "0xB77980")]
		private float GetMaxYPoint(Collider coll, Vector3 topPoint)
		{
			return default(float);
		}

		[Token(Token = "0x60016A5")]
		[Address(RVA = "0xB77A5C", Offset = "0xB77A5C", VA = "0xB77A5C")]
		private I_SliceInfo ProcessCutObject(GameObject GO, Vector3 moveVelocity, float parentMass, I_SliceInfo parenSI)
		{
			return null;
		}

		[Token(Token = "0x60016A6")]
		[Address(RVA = "0xB78154", Offset = "0xB78154", VA = "0xB78154")]
		public SliceManager()
		{
		}
	}
	[Token(Token = "0x2000364")]
	public class SlicePoint : MonoBehaviour
	{
		[Token(Token = "0x40013F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float radius;

		[Token(Token = "0x60016B1")]
		[Address(RVA = "0xB798FC", Offset = "0xB798FC", VA = "0xB798FC")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x60016B2")]
		[Address(RVA = "0xB79A88", Offset = "0xB79A88", VA = "0xB79A88")]
		public SlicePoint()
		{
		}
	}
	[Token(Token = "0x2000365")]
	public class SwordVelocityFilter : MonoBehaviour
	{
		[Token(Token = "0x40013F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool ResumeUpdates;

		[Token(Token = "0x40013FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float tipSpeedForCutting;

		[Token(Token = "0x40013FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float lengthInWorldUnits;

		[Token(Token = "0x40013FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float tipSpeed;

		[Token(Token = "0x40013FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float swingAngle;

		[Token(Token = "0x40013FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector3 swingVelocity;

		[Token(Token = "0x40013FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float minDistance;

		[Token(Token = "0x4001400")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[HideInInspector]
		public Transform T_SwordTip;

		[Token(Token = "0x4001401")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public Transform T_SwordStart;

		[Token(Token = "0x4001402")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 priorTipPositionInWorldSpace;

		[Token(Token = "0x4001403")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private bool _IsFastEnoughToCut;

		[Token(Token = "0x4001404")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float swingDirection;

		[Token(Token = "0x17000260")]
		public bool IsFastEnoughToCut
		{
			[Token(Token = "0x60016B4")]
			[Address(RVA = "0xB79C5C", Offset = "0xB79C5C", VA = "0xB79C5C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60016B3")]
		[Address(RVA = "0xB79A9C", Offset = "0xB79A9C", VA = "0xB79A9C")]
		private void Start()
		{
		}

		[Token(Token = "0x60016B5")]
		[Address(RVA = "0xB79BB0", Offset = "0xB79BB0", VA = "0xB79BB0")]
		private Vector3 deriveTipPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x60016B6")]
		[Address(RVA = "0xB79C64", Offset = "0xB79C64", VA = "0xB79C64")]
		private void Update()
		{
		}

		[Token(Token = "0x60016B7")]
		[Address(RVA = "0xB79F10", Offset = "0xB79F10", VA = "0xB79F10")]
		public SwordVelocityFilter()
		{
		}
	}
	[Token(Token = "0x2000366")]
	public class WEAP_Katana : IMeleeBase
	{
		[Token(Token = "0x4001405")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public TextMeshPro tmp;

		[Token(Token = "0x4001406")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private SoundBroadcaster _soundBr;

		[Token(Token = "0x60016B8")]
		[Address(RVA = "0xB79F30", Offset = "0xB79F30", VA = "0xB79F30")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60016B9")]
		[Address(RVA = "0xB79FAC", Offset = "0xB79FAC", VA = "0xB79FAC")]
		private void Start()
		{
		}

		[Token(Token = "0x60016BA")]
		[Address(RVA = "0xB79FB4", Offset = "0xB79FB4", VA = "0xB79FB4")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60016BB")]
		[Address(RVA = "0xB7A1D8", Offset = "0xB7A1D8", VA = "0xB7A1D8")]
		private void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x60016BC")]
		[Address(RVA = "0xB7A380", Offset = "0xB7A380", VA = "0xB7A380")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x60016BD")]
		[Address(RVA = "0xB7A4C4", Offset = "0xB7A4C4", VA = "0xB7A4C4", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x60016BE")]
		[Address(RVA = "0xB7A55C", Offset = "0xB7A55C", VA = "0xB7A55C", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x60016BF")]
		[Address(RVA = "0xB7A728", Offset = "0xB7A728", VA = "0xB7A728", Slot = "25")]
		public override void OnSnapZoneEnter(SnapZone sZone)
		{
		}

		[Token(Token = "0x60016C0")]
		[Address(RVA = "0xB7A88C", Offset = "0xB7A88C", VA = "0xB7A88C", Slot = "26")]
		public override void OnSnapZoneExit(SnapZone sZone)
		{
		}

		[Token(Token = "0x60016C1")]
		[Address(RVA = "0xB7A9F0", Offset = "0xB7A9F0", VA = "0xB7A9F0")]
		public WEAP_Katana()
		{
		}
	}
	[Token(Token = "0x2000367")]
	public class WEAP_Kunai : MonoBehaviour
	{
		[Token(Token = "0x60016C2")]
		[Address(RVA = "0xB7A9F8", Offset = "0xB7A9F8", VA = "0xB7A9F8")]
		public WEAP_Kunai()
		{
		}
	}
	[Token(Token = "0x2000368")]
	public class Weap_Spear : MonoBehaviour
	{
		[Token(Token = "0x2000369")]
		[CompilerGenerated]
		private sealed class <CR_Dead>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400140B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400140C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400140D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RaycastHit hit;

			[Token(Token = "0x400140E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Weap_Spear <>4__this;

			[Token(Token = "0x400140F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private PuppetMaster <pMaster>5__2;

			[Token(Token = "0x17000261")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60016CE")]
				[Address(RVA = "0xB7B2F8", Offset = "0xB7B2F8", VA = "0xB7B2F8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000262")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60016D0")]
				[Address(RVA = "0xB7B340", Offset = "0xB7B340", VA = "0xB7B340", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60016CB")]
			[Address(RVA = "0xB7AC08", Offset = "0xB7AC08", VA = "0xB7AC08")]
			[DebuggerHidden]
			public <CR_Dead>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x60016CC")]
			[Address(RVA = "0xB7B064", Offset = "0xB7B064", VA = "0xB7B064", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60016CD")]
			[Address(RVA = "0xB7B068", Offset = "0xB7B068", VA = "0xB7B068", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60016CF")]
			[Address(RVA = "0xB7B300", Offset = "0xB7B300", VA = "0xB7B300", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001407")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform T_SpearTip;

		[Token(Token = "0x4001408")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Rigidbody _rBody;

		[Token(Token = "0x4001409")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool _IsGrabbed;

		[Token(Token = "0x400140A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool _hitSomething;

		[Token(Token = "0x60016C3")]
		[Address(RVA = "0xB7AA00", Offset = "0xB7AA00", VA = "0xB7AA00")]
		private void Start()
		{
		}

		[Token(Token = "0x60016C4")]
		[Address(RVA = "0xB7AA50", Offset = "0xB7AA50", VA = "0xB7AA50")]
		private void Update()
		{
		}

		[Token(Token = "0x60016C5")]
		[Address(RVA = "0xB7AB48", Offset = "0xB7AB48", VA = "0xB7AB48")]
		public void EVT_ONRelease()
		{
		}

		[Token(Token = "0x60016C6")]
		[Address(RVA = "0xB7AB50", Offset = "0xB7AB50", VA = "0xB7AB50")]
		public void EVT_ONGrab()
		{
		}

		[Token(Token = "0x60016C7")]
		[Address(RVA = "0xB7AB7C", Offset = "0xB7AB7C", VA = "0xB7AB7C")]
		[IteratorStateMachine(typeof(<CR_Dead>d__8))]
		private IEnumerator CR_Dead(RaycastHit hit)
		{
			return null;
		}

		[Token(Token = "0x60016C8")]
		[Address(RVA = "0xB7AC30", Offset = "0xB7AC30", VA = "0xB7AC30")]
		private void I_SpearCast()
		{
		}

		[Token(Token = "0x60016C9")]
		[Address(RVA = "0xB7B03C", Offset = "0xB7B03C", VA = "0xB7B03C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60016CA")]
		[Address(RVA = "0xB7B054", Offset = "0xB7B054", VA = "0xB7B054")]
		public Weap_Spear()
		{
		}
	}
	[Token(Token = "0x200036A")]
	public class SecondaryHandSnapper : MonoBehaviour
	{
		[Token(Token = "0x4001410")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject HandRef;

		[Token(Token = "0x4001411")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public I_SwordBase swordRef;

		[Token(Token = "0x4001412")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public InputBridge input;

		[Token(Token = "0x4001413")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public SkinnedMeshRenderer skMesh;

		[Token(Token = "0x60016D1")]
		[Address(RVA = "0xB7B348", Offset = "0xB7B348", VA = "0xB7B348")]
		private void Start()
		{
		}

		[Token(Token = "0x60016D2")]
		[Address(RVA = "0xB7B470", Offset = "0xB7B470", VA = "0xB7B470")]
		private float GetGripInput(ControllerHand HandSide)
		{
			return default(float);
		}

		[Token(Token = "0x60016D3")]
		[Address(RVA = "0xB7A658", Offset = "0xB7A658", VA = "0xB7A658")]
		public void HideFakeHand()
		{
		}

		[Token(Token = "0x60016D4")]
		[Address(RVA = "0xB7B4B0", Offset = "0xB7B4B0", VA = "0xB7B4B0")]
		private void OnTriggerStay(Collider other)
		{
		}

		[Token(Token = "0x60016D5")]
		[Address(RVA = "0xB7B668", Offset = "0xB7B668", VA = "0xB7B668")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x60016D6")]
		[Address(RVA = "0xB7B730", Offset = "0xB7B730", VA = "0xB7B730")]
		public SecondaryHandSnapper()
		{
		}
	}
	[Token(Token = "0x200036B")]
	public class SnapZoneEventDispatcher : MonoBehaviour
	{
		[Token(Token = "0x60016D7")]
		[Address(RVA = "0xB7B738", Offset = "0xB7B738", VA = "0xB7B738")]
		public void ON_GrabEquipped(Grabbable grabber)
		{
		}

		[Token(Token = "0x60016D8")]
		[Address(RVA = "0xB7B80C", Offset = "0xB7B80C", VA = "0xB7B80C")]
		public void ON_GrabReleased(Grabbable grabber)
		{
		}

		[Token(Token = "0x60016D9")]
		[Address(RVA = "0xB7B8E0", Offset = "0xB7B8E0", VA = "0xB7B8E0")]
		public void ON_SnapZoneEquipped(Grabbable grabber)
		{
		}

		[Token(Token = "0x60016DA")]
		[Address(RVA = "0xB7B9B0", Offset = "0xB7B9B0", VA = "0xB7B9B0")]
		public void ON_SnapZoneReleased(Grabbable grabber)
		{
		}

		[Token(Token = "0x60016DB")]
		[Address(RVA = "0xB7BA84", Offset = "0xB7BA84", VA = "0xB7BA84")]
		public SnapZoneEventDispatcher()
		{
		}
	}
	[Token(Token = "0x200036C")]
	public class VRK_Integration : MonoSingleton<VRK_Integration>
	{
		[Token(Token = "0x4001414")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform XR_RIG;

		[Token(Token = "0x4001415")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool ShowTooltipAtStart;

		[Token(Token = "0x4001416")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool bDisableHandModelSelector;

		[Token(Token = "0x4001417")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject BlackoutSphere;

		[Token(Token = "0x4001418")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float charCtrlRadius;

		[Token(Token = "0x4001419")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float sprintSpeed;

		[Token(Token = "0x400141A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject FootStepSFX;

		[Token(Token = "0x400141B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject CustomLeftHand;

		[Token(Token = "0x400141C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public GameObject CustomRightHand;

		[Token(Token = "0x400141D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform T_LeftHand;

		[Token(Token = "0x400141E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform T_RightHand;

		[Token(Token = "0x400141F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform T_SoundSFX;

		[Token(Token = "0x4001420")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Transform LeftHandAttachPoint;

		[Token(Token = "0x4001421")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform RightHandAttachPoint;

		[Token(Token = "0x4001422")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public Transform SoundSFXAttachPoint;

		[Token(Token = "0x4001423")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public GameObject MenuTooltip;

		[Token(Token = "0x4001424")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public Text MenuToolText;

		[Token(Token = "0x4001425")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Grabber LeftHandGrabber;

		[Token(Token = "0x4001426")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public Grabber RightHandGrabber;

		[Token(Token = "0x4001427")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public BeautifyProfile bProfile;

		[Token(Token = "0x60016DC")]
		[Address(RVA = "0xB7BA8C", Offset = "0xB7BA8C", VA = "0xB7BA8C")]
		private void Start()
		{
		}

		[Token(Token = "0x60016DD")]
		[Address(RVA = "0xB7BBEC", Offset = "0xB7BBEC", VA = "0xB7BBEC")]
		public void EVT_SettingsLoaded()
		{
		}

		[Token(Token = "0x60016DE")]
		[Address(RVA = "0xB7D2F8", Offset = "0xB7D2F8", VA = "0xB7D2F8")]
		private void SetTooltipText()
		{
		}

		[Token(Token = "0x60016DF")]
		[Address(RVA = "0xB7D2FC", Offset = "0xB7D2FC", VA = "0xB7D2FC")]
		private void I_DisableToolTip()
		{
		}

		[Token(Token = "0x60016E0")]
		[Address(RVA = "0xB7A678", Offset = "0xB7A678", VA = "0xB7A678")]
		public Grabber GetOppositeGrabber(Grabber grab)
		{
			return null;
		}

		[Token(Token = "0x60016E1")]
		[Address(RVA = "0xB7D380", Offset = "0xB7D380", VA = "0xB7D380")]
		public bool IsHandGrabbaber(Grabber grab)
		{
			return default(bool);
		}

		[Token(Token = "0x60016E2")]
		[Address(RVA = "0xB7D454", Offset = "0xB7D454", VA = "0xB7D454")]
		private void AttachAndPosition(GameObject Go, Transform atPoint, Transform lTrans)
		{
		}

		[Token(Token = "0x60016E3")]
		[Address(RVA = "0xB7D51C", Offset = "0xB7D51C", VA = "0xB7D51C")]
		private void DetachAndPosition(GameObject Go, Transform atPoint, Transform lTrans)
		{
		}

		[Token(Token = "0x60016E4")]
		[Address(RVA = "0xB7C020", Offset = "0xB7C020", VA = "0xB7C020")]
		private void INIT()
		{
		}

		[Token(Token = "0x60016E5")]
		[Address(RVA = "0xB7CCB4", Offset = "0xB7CCB4", VA = "0xB7CCB4")]
		private void ATTACH()
		{
		}

		[Token(Token = "0x60016E6")]
		[Address(RVA = "0xB7D6F0", Offset = "0xB7D6F0", VA = "0xB7D6F0")]
		private void ChangeTouchControllers(bool bShow)
		{
		}

		[Token(Token = "0x60016E7")]
		[Address(RVA = "0xB7D9E4", Offset = "0xB7D9E4", VA = "0xB7D9E4")]
		private void DETACH()
		{
		}

		[Token(Token = "0x60016E8")]
		[Address(RVA = "0xB7DCE4", Offset = "0xB7DCE4", VA = "0xB7DCE4")]
		public VRK_Integration()
		{
		}
	}
	[Token(Token = "0x200036D")]
	public class VRK_SmoothLocomotion : SmoothLocomotion
	{
		[Token(Token = "0x4001428")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private bool SprintIsOn;

		[Token(Token = "0x60016E9")]
		[Address(RVA = "0xB7DD40", Offset = "0xB7DD40", VA = "0xB7DD40")]
		public VRK_SmoothLocomotion()
		{
		}
	}
}
namespace VLB
{
	[Token(Token = "0x200036E")]
	public static class BatchingHelper
	{
		[Token(Token = "0x4001429")]
		public const bool isGpuInstancingSupported = true;

		[Token(Token = "0x17000263")]
		public static bool forceEnableDepthBlend
		{
			[Token(Token = "0x60016EA")]
			[Address(RVA = "0xB7DD48", Offset = "0xB7DD48", VA = "0xB7DD48")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60016EB")]
		[Address(RVA = "0xB7DDE8", Offset = "0xB7DDE8", VA = "0xB7DDE8")]
		public static bool IsGpuInstancingEnabled(Material material)
		{
			return default(bool);
		}

		[Token(Token = "0x60016EC")]
		[Address(RVA = "0xB7DDFC", Offset = "0xB7DDFC", VA = "0xB7DDFC")]
		public static void SetMaterialProperties(Material material, bool enableGpuInstancing)
		{
		}

		[Token(Token = "0x60016ED")]
		[Address(RVA = "0xB7DE14", Offset = "0xB7DE14", VA = "0xB7DE14")]
		public static bool CanBeBatched(VolumetricLightBeam beamA, VolumetricLightBeam beamB, ref string reasons)
		{
			return default(bool);
		}

		[Token(Token = "0x60016EE")]
		[Address(RVA = "0xB7E320", Offset = "0xB7E320", VA = "0xB7E320")]
		public static bool CanBeBatched(VolumetricLightBeam beam, ref string reasons)
		{
			return default(bool);
		}

		[Token(Token = "0x60016EF")]
		[Address(RVA = "0xB7E474", Offset = "0xB7E474", VA = "0xB7E474")]
		private static void AppendErrorMessage(ref string message, string toAppend)
		{
		}
	}
	[Token(Token = "0x200036F")]
	[AddComponentMenu("")]
	[ExecuteInEditMode]
	[HelpURL("http://saladgamer.com/vlb-doc/comp-lightbeam/")]
	public class BeamGeometry : MonoBehaviour, MaterialModifier.Interface
	{
		[Token(Token = "0x2000370")]
		[CompilerGenerated]
		private sealed class <CoUpdateFadeOut>d__30 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001434")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001435")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001436")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public BeamGeometry <>4__this;

			[Token(Token = "0x1700026F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001720")]
				[Address(RVA = "0xB828C4", Offset = "0xB828C4", VA = "0xB828C4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000270")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001722")]
				[Address(RVA = "0xB8290C", Offset = "0xB8290C", VA = "0xB8290C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600171D")]
			[Address(RVA = "0xB7E7C8", Offset = "0xB7E7C8", VA = "0xB7E7C8")]
			[DebuggerHidden]
			public <CoUpdateFadeOut>d__30(int <>1__state)
			{
			}

			[Token(Token = "0x600171E")]
			[Address(RVA = "0xB82834", Offset = "0xB82834", VA = "0xB82834", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600171F")]
			[Address(RVA = "0xB82838", Offset = "0xB82838", VA = "0xB82838", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001721")]
			[Address(RVA = "0xB828CC", Offset = "0xB828CC", VA = "0xB828CC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400142A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private VolumetricLightBeam m_Master;

		[Token(Token = "0x400142B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Matrix4x4 m_ColorGradientMatrix;

		[Token(Token = "0x400142C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private MeshType m_CurrentMeshType;

		[Token(Token = "0x400142D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material m_CustomMaterial;

		[Token(Token = "0x400142E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private MaterialModifier.Callback m_MaterialModifierCallback;

		[Token(Token = "0x400142F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Coroutine m_CoFadeOut;

		[Token(Token = "0x4001433")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Camera m_CurrentCameraRenderingSRP;

		[Token(Token = "0x17000264")]
		public MeshRenderer meshRenderer
		{
			[Token(Token = "0x60016F0")]
			[Address(RVA = "0xB7E540", Offset = "0xB7E540", VA = "0xB7E540")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60016F1")]
			[Address(RVA = "0xB7E548", Offset = "0xB7E548", VA = "0xB7E548")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000265")]
		public MeshFilter meshFilter
		{
			[Token(Token = "0x60016F2")]
			[Address(RVA = "0xB7E550", Offset = "0xB7E550", VA = "0xB7E550")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60016F3")]
			[Address(RVA = "0xB7E558", Offset = "0xB7E558", VA = "0xB7E558")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000266")]
		public Mesh coneMesh
		{
			[Token(Token = "0x60016F4")]
			[Address(RVA = "0xB7E560", Offset = "0xB7E560", VA = "0xB7E560")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x60016F5")]
			[Address(RVA = "0xB7E568", Offset = "0xB7E568", VA = "0xB7E568")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000267")]
		public bool visible
		{
			[Token(Token = "0x60016F6")]
			[Address(RVA = "0xB7E570", Offset = "0xB7E570", VA = "0xB7E570")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60016F7")]
			[Address(RVA = "0xB7E58C", Offset = "0xB7E58C", VA = "0xB7E58C")]
			set
			{
			}
		}

		[Token(Token = "0x17000268")]
		public int sortingLayerID
		{
			[Token(Token = "0x60016F8")]
			[Address(RVA = "0xB7E5AC", Offset = "0xB7E5AC", VA = "0xB7E5AC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60016F9")]
			[Address(RVA = "0xB7E5C8", Offset = "0xB7E5C8", VA = "0xB7E5C8")]
			set
			{
			}
		}

		[Token(Token = "0x17000269")]
		public int sortingOrder
		{
			[Token(Token = "0x60016FA")]
			[Address(RVA = "0xB7E5E4", Offset = "0xB7E5E4", VA = "0xB7E5E4")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x60016FB")]
			[Address(RVA = "0xB7E600", Offset = "0xB7E600", VA = "0xB7E600")]
			set
			{
			}
		}

		[Token(Token = "0x1700026A")]
		public bool _INTERNAL_IsFadeOutCoroutineRunning
		{
			[Token(Token = "0x60016FC")]
			[Address(RVA = "0xB7E61C", Offset = "0xB7E61C", VA = "0xB7E61C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700026B")]
		public static bool isCustomRenderPipelineSupported
		{
			[Token(Token = "0x6001705")]
			[Address(RVA = "0xB7EED8", Offset = "0xB7EED8", VA = "0xB7EED8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700026C")]
		private bool shouldUseGPUInstancedMaterial
		{
			[Token(Token = "0x6001706")]
			[Address(RVA = "0xB7EEE0", Offset = "0xB7EEE0", VA = "0xB7EEE0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700026D")]
		private bool isNoiseEnabled
		{
			[Token(Token = "0x600170B")]
			[Address(RVA = "0xB80C48", Offset = "0xB80C48", VA = "0xB80C48")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700026E")]
		private bool isDepthBlendEnabled
		{
			[Token(Token = "0x600170C")]
			[Address(RVA = "0xB80D3C", Offset = "0xB80D3C", VA = "0xB80D3C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x60016FD")]
		[Address(RVA = "0xB7E62C", Offset = "0xB7E62C", VA = "0xB7E62C")]
		private float ComputeFadeOutFactor(Transform camTransform)
		{
			return default(float);
		}

		[Token(Token = "0x60016FE")]
		[Address(RVA = "0xB7E760", Offset = "0xB7E760", VA = "0xB7E760")]
		[IteratorStateMachine(typeof(<CoUpdateFadeOut>d__30))]
		private IEnumerator CoUpdateFadeOut()
		{
			return null;
		}

		[Token(Token = "0x60016FF")]
		[Address(RVA = "0xB7E7F0", Offset = "0xB7E7F0", VA = "0xB7E7F0")]
		private void ComputeFadeOutFactor()
		{
		}

		[Token(Token = "0x6001700")]
		[Address(RVA = "0xB7E8F8", Offset = "0xB7E8F8", VA = "0xB7E8F8")]
		private void SetFadeOutFactorProp(float value)
		{
		}

		[Token(Token = "0x6001701")]
		[Address(RVA = "0xB7EC08", Offset = "0xB7EC08", VA = "0xB7EC08")]
		public void RestartFadeOutCoroutine()
		{
		}

		[Token(Token = "0x6001702")]
		[Address(RVA = "0xB7ECC4", Offset = "0xB7ECC4", VA = "0xB7ECC4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001703")]
		[Address(RVA = "0xB7ED60", Offset = "0xB7ED60", VA = "0xB7ED60")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001704")]
		[Address(RVA = "0xB7EDE8", Offset = "0xB7EDE8", VA = "0xB7EDE8")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001707")]
		[Address(RVA = "0xB7EF24", Offset = "0xB7EF24", VA = "0xB7EF24")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001708")]
		[Address(RVA = "0xB7F020", Offset = "0xB7F020", VA = "0xB7F020")]
		public void Initialize(VolumetricLightBeam master)
		{
		}

		[Token(Token = "0x6001709")]
		[Address(RVA = "0xB7F714", Offset = "0xB7F714", VA = "0xB7F714")]
		public void RegenerateMesh()
		{
		}

		[Token(Token = "0x600170A")]
		[Address(RVA = "0xB80A00", Offset = "0xB80A00", VA = "0xB80A00")]
		private Vector3 ComputeLocalMatrix()
		{
			return default(Vector3);
		}

		[Token(Token = "0x600170D")]
		[Address(RVA = "0xB7F468", Offset = "0xB7F468", VA = "0xB7F468")]
		private bool ApplyMaterial()
		{
			return default(bool);
		}

		[Token(Token = "0x600170E")]
		[Address(RVA = "0xB7EA68", Offset = "0xB7EA68", VA = "0xB7EA68", Slot = "4")]
		public void SetMaterialProp(int nameID, float value)
		{
		}

		[Token(Token = "0x600170F")]
		[Address(RVA = "0xB81454", Offset = "0xB81454", VA = "0xB81454", Slot = "5")]
		public void SetMaterialProp(int nameID, Vector4 value)
		{
		}

		[Token(Token = "0x6001710")]
		[Address(RVA = "0xB8156C", Offset = "0xB8156C", VA = "0xB8156C", Slot = "6")]
		public void SetMaterialProp(int nameID, Color value)
		{
		}

		[Token(Token = "0x6001711")]
		[Address(RVA = "0xB81684", Offset = "0xB81684", VA = "0xB81684", Slot = "7")]
		public void SetMaterialProp(int nameID, Matrix4x4 value)
		{
		}

		[Token(Token = "0x6001712")]
		[Address(RVA = "0xB817B4", Offset = "0xB817B4", VA = "0xB817B4", Slot = "8")]
		public void SetMaterialProp(int nameID, Texture value)
		{
		}

		[Token(Token = "0x6001713")]
		[Address(RVA = "0xB7E9B0", Offset = "0xB7E9B0", VA = "0xB7E9B0")]
		private void MaterialChangeStart()
		{
		}

		[Token(Token = "0x6001714")]
		[Address(RVA = "0xB7EB50", Offset = "0xB7EB50", VA = "0xB7EB50")]
		private void MaterialChangeStop()
		{
		}

		[Token(Token = "0x6001715")]
		[Address(RVA = "0xB81890", Offset = "0xB81890", VA = "0xB81890")]
		public void SetDynamicOcclusionCallback(string shaderKeyword, MaterialModifier.Callback cb)
		{
		}

		[Token(Token = "0x6001716")]
		[Address(RVA = "0xB802EC", Offset = "0xB802EC", VA = "0xB802EC")]
		public void UpdateMaterialAndBounds()
		{
		}

		[Token(Token = "0x6001717")]
		[Address(RVA = "0xB82030", Offset = "0xB82030", VA = "0xB82030")]
		private void UpdateMatricesPropertiesForGPUInstancingSRP()
		{
		}

		[Token(Token = "0x6001718")]
		[Address(RVA = "0xB82228", Offset = "0xB82228", VA = "0xB82228")]
		private void OnBeginCameraRenderingSRP(ScriptableRenderContext context, Camera cam)
		{
		}

		[Token(Token = "0x6001719")]
		[Address(RVA = "0xB82230", Offset = "0xB82230", VA = "0xB82230")]
		private void OnWillRenderObject()
		{
		}

		[Token(Token = "0x600171A")]
		[Address(RVA = "0xB82260", Offset = "0xB82260", VA = "0xB82260")]
		private void OnWillCameraRenderThisBeam(Camera cam)
		{
		}

		[Token(Token = "0x600171B")]
		[Address(RVA = "0xB82344", Offset = "0xB82344", VA = "0xB82344")]
		private void UpdateCameraRelatedProperties(Camera cam)
		{
		}

		[Token(Token = "0x600171C")]
		[Address(RVA = "0xB8282C", Offset = "0xB8282C", VA = "0xB8282C")]
		public BeamGeometry()
		{
		}
	}
	[Token(Token = "0x2000371")]
	[HelpURL("http://saladgamer.com/vlb-doc/config/")]
	public class Config : ScriptableObject
	{
		[Token(Token = "0x4001437")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool geometryOverrideLayer;

		[Token(Token = "0x4001438")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int geometryLayerID;

		[Token(Token = "0x4001439")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string geometryTag;

		[Token(Token = "0x400143A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int geometryRenderQueue;

		[Token(Token = "0x400143B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[FormerlySerializedAs("renderPipeline")]
		[SerializeField]
		private RenderPipeline _RenderPipeline;

		[Token(Token = "0x400143C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		[FormerlySerializedAs("renderingMode")]
		private RenderingMode _RenderingMode;

		[Token(Token = "0x400143D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float ditheringFactor;

		[Token(Token = "0x400143E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int sharedMeshSides;

		[Token(Token = "0x400143F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int sharedMeshSegments;

		[Token(Token = "0x4001440")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Range(0.01f, 2f)]
		public float globalNoiseScale;

		[Token(Token = "0x4001441")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 globalNoiseVelocity;

		[Token(Token = "0x4001442")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public string fadeOutCameraTag;

		[Token(Token = "0x4001443")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[HighlightNull]
		public TextAsset noise3DData;

		[Token(Token = "0x4001444")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int noise3DSize;

		[Token(Token = "0x4001445")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HighlightNull]
		public ParticleSystem dustParticlesPrefab;

		[Token(Token = "0x4001446")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Texture2D ditheringNoiseTexture;

		[Token(Token = "0x4001447")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[SerializeField]
		private int pluginVersion;

		[Token(Token = "0x4001448")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		private Material _DummyMaterial;

		[Token(Token = "0x4001449")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[SerializeField]
		private Shader _BeamShader;

		[Token(Token = "0x400144A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Transform m_CachedFadeOutCamera;

		[Token(Token = "0x400144B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Config m_Instance;

		[Token(Token = "0x17000271")]
		public RenderPipeline renderPipeline
		{
			[Token(Token = "0x6001723")]
			[Address(RVA = "0xB82914", Offset = "0xB82914", VA = "0xB82914")]
			get
			{
				return default(RenderPipeline);
			}
			[Token(Token = "0x6001724")]
			[Address(RVA = "0xB8291C", Offset = "0xB8291C", VA = "0xB8291C")]
			set
			{
			}
		}

		[Token(Token = "0x17000272")]
		public RenderingMode renderingMode
		{
			[Token(Token = "0x6001725")]
			[Address(RVA = "0xB82984", Offset = "0xB82984", VA = "0xB82984")]
			get
			{
				return default(RenderingMode);
			}
			[Token(Token = "0x6001726")]
			[Address(RVA = "0xB8298C", Offset = "0xB8298C", VA = "0xB8298C")]
			set
			{
			}
		}

		[Token(Token = "0x17000273")]
		public RenderingMode actualRenderingMode
		{
			[Token(Token = "0x6001729")]
			[Address(RVA = "0xB7DD98", Offset = "0xB7DD98", VA = "0xB7DD98")]
			get
			{
				return default(RenderingMode);
			}
		}

		[Token(Token = "0x17000274")]
		public bool useSinglePassShader
		{
			[Token(Token = "0x600172A")]
			[Address(RVA = "0xB82A8C", Offset = "0xB82A8C", VA = "0xB82A8C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000275")]
		public bool requiresDoubleSidedMesh
		{
			[Token(Token = "0x600172B")]
			[Address(RVA = "0xB7F974", Offset = "0xB7F974", VA = "0xB7F974")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000276")]
		public Shader beamShader
		{
			[Token(Token = "0x600172C")]
			[Address(RVA = "0xB82AA4", Offset = "0xB82AA4", VA = "0xB82AA4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000277")]
		public Transform fadeOutCameraTransform
		{
			[Token(Token = "0x600172D")]
			[Address(RVA = "0xB7E884", Offset = "0xB7E884", VA = "0xB7E884")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000278")]
		public bool hasRenderPipelineMismatch
		{
			[Token(Token = "0x600172F")]
			[Address(RVA = "0xB82B38", Offset = "0xB82B38", VA = "0xB82B38")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000279")]
		public static Config Instance
		{
			[Token(Token = "0x6001737")]
			[Address(RVA = "0xB7DD90", Offset = "0xB7DD90", VA = "0xB7DD90")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001727")]
		[Address(RVA = "0xB829F4", Offset = "0xB829F4", VA = "0xB829F4")]
		public void SetRenderingModeAndRefreshShader(RenderingMode mode)
		{
		}

		[Token(Token = "0x6001728")]
		[Address(RVA = "0xB829F8", Offset = "0xB829F8", VA = "0xB829F8")]
		public bool IsSRPBatcherSupported()
		{
			return default(bool);
		}

		[Token(Token = "0x600172E")]
		[Address(RVA = "0xB82AAC", Offset = "0xB82AAC", VA = "0xB82AAC")]
		public void ForceUpdateFadeOutCamera()
		{
		}

		[Token(Token = "0x6001730")]
		[Address(RVA = "0xB82B64", Offset = "0xB82B64", VA = "0xB82B64")]
		[RuntimeInitializeOnLoadMethod]
		private static void OnStartup()
		{
		}

		[Token(Token = "0x6001731")]
		[Address(RVA = "0xB82CBC", Offset = "0xB82CBC", VA = "0xB82CBC")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001732")]
		[Address(RVA = "0xB82C40", Offset = "0xB82C40", VA = "0xB82C40")]
		private void RefreshGlobalShaderProperties()
		{
		}

		[Token(Token = "0x6001733")]
		[Address(RVA = "0xB82D80", Offset = "0xB82D80", VA = "0xB82D80")]
		public void ResetInternalData()
		{
		}

		[Token(Token = "0x6001734")]
		[Address(RVA = "0xB82F4C", Offset = "0xB82F4C", VA = "0xB82F4C")]
		public ParticleSystem NewVolumetricDustParticles()
		{
			return null;
		}

		[Token(Token = "0x6001735")]
		[Address(RVA = "0xB830EC", Offset = "0xB830EC", VA = "0xB830EC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001736")]
		[Address(RVA = "0xB830F8", Offset = "0xB830F8", VA = "0xB830F8")]
		private void HandleBackwardCompatibility(int serializedVersion, int newVersion)
		{
		}

		[Token(Token = "0x6001738")]
		[Address(RVA = "0xB830FC", Offset = "0xB830FC", VA = "0xB830FC")]
		private static Config GetInstance(bool assertIfNotFound)
		{
			return null;
		}

		[Token(Token = "0x6001739")]
		[Address(RVA = "0xB831F0", Offset = "0xB831F0", VA = "0xB831F0")]
		public Config()
		{
		}
	}
	[Token(Token = "0x2000372")]
	[HelpURL("http://saladgamer.com/vlb-doc/config/")]
	public class ConfigOverride : Config
	{
		[Token(Token = "0x400144C")]
		public const string kAssetName = "VLBConfigOverride";

		[Token(Token = "0x600173A")]
		[Address(RVA = "0xB832DC", Offset = "0xB832DC", VA = "0xB832DC")]
		public ConfigOverride()
		{
		}
	}
	[Token(Token = "0x2000373")]
	public static class Consts
	{
		[Token(Token = "0x400144D")]
		private const string HelpUrlBase = "http://saladgamer.com/vlb-doc/";

		[Token(Token = "0x400144E")]
		public const string HelpUrlBeam = "http://saladgamer.com/vlb-doc/comp-lightbeam/";

		[Token(Token = "0x400144F")]
		public const string HelpUrlDustParticles = "http://saladgamer.com/vlb-doc/comp-dustparticles/";

		[Token(Token = "0x4001450")]
		public const string HelpUrlDynamicOcclusionRaycasting = "http://saladgamer.com/vlb-doc/comp-dynocclusion-raycasting/";

		[Token(Token = "0x4001451")]
		public const string HelpUrlDynamicOcclusionDepthBuffer = "http://saladgamer.com/vlb-doc/comp-dynocclusion-depthbuffer/";

		[Token(Token = "0x4001452")]
		public const string HelpUrlTriggerZone = "http://saladgamer.com/vlb-doc/comp-triggerzone/";

		[Token(Token = "0x4001453")]
		public const string HelpUrlSkewingHandle = "http://saladgamer.com/vlb-doc/comp-skewinghandle/";

		[Token(Token = "0x4001454")]
		public const string HelpUrlConfig = "http://saladgamer.com/vlb-doc/config/";

		[Token(Token = "0x4001455")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly bool ProceduralObjectsVisibleInEditor;

		[Token(Token = "0x4001456")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static readonly Color FlatColor;

		[Token(Token = "0x4001457")]
		public const ColorMode ColorModeDefault = ColorMode.Flat;

		[Token(Token = "0x4001458")]
		public const float IntensityDefault = 1f;

		[Token(Token = "0x4001459")]
		public const float IntensityMin = 0f;

		[Token(Token = "0x400145A")]
		public const float IntensityMax = 8f;

		[Token(Token = "0x400145B")]
		public const float SpotAngleDefault = 35f;

		[Token(Token = "0x400145C")]
		public const float SpotAngleMin = 0.1f;

		[Token(Token = "0x400145D")]
		public const float SpotAngleMax = 179.9f;

		[Token(Token = "0x400145E")]
		public const float ConeRadiusStart = 0.1f;

		[Token(Token = "0x400145F")]
		public const MeshType GeomMeshType = MeshType.Shared;

		[Token(Token = "0x4001460")]
		public const int GeomSidesDefault = 18;

		[Token(Token = "0x4001461")]
		public const int GeomSidesMin = 3;

		[Token(Token = "0x4001462")]
		public const int GeomSidesMax = 256;

		[Token(Token = "0x4001463")]
		public const int GeomSegmentsDefault = 5;

		[Token(Token = "0x4001464")]
		public const int GeomSegmentsMin = 0;

		[Token(Token = "0x4001465")]
		public const int GeomSegmentsMax = 64;

		[Token(Token = "0x4001466")]
		public const bool GeomCap = false;

		[Token(Token = "0x4001467")]
		public const AttenuationEquation AttenuationEquationDefault = AttenuationEquation.Quadratic;

		[Token(Token = "0x4001468")]
		public const float AttenuationCustomBlending = 0.5f;

		[Token(Token = "0x4001469")]
		public const float FallOffStart = 0f;

		[Token(Token = "0x400146A")]
		public const float FallOffEnd = 3f;

		[Token(Token = "0x400146B")]
		public const float FallOffDistancesMinThreshold = 0.01f;

		[Token(Token = "0x400146C")]
		public const float DepthBlendDistance = 2f;

		[Token(Token = "0x400146D")]
		public const float CameraClippingDistance = 0.5f;

		[Token(Token = "0x400146E")]
		public const float FresnelPowMaxValue = 10f;

		[Token(Token = "0x400146F")]
		public const float FresnelPow = 8f;

		[Token(Token = "0x4001470")]
		public const float GlareFrontal = 0.5f;

		[Token(Token = "0x4001471")]
		public const float GlareBehind = 0.5f;

		[Token(Token = "0x4001472")]
		public const NoiseMode NoiseModeDefault = NoiseMode.Disabled;

		[Token(Token = "0x4001473")]
		public const float NoiseIntensityMin = 0f;

		[Token(Token = "0x4001474")]
		public const float NoiseIntensityMax = 1f;

		[Token(Token = "0x4001475")]
		public const float NoiseIntensityDefault = 0.5f;

		[Token(Token = "0x4001476")]
		public const float NoiseScaleMin = 0.01f;

		[Token(Token = "0x4001477")]
		public const float NoiseScaleMax = 2f;

		[Token(Token = "0x4001478")]
		public const float NoiseScaleDefault = 0.5f;

		[Token(Token = "0x4001479")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static readonly Vector3 NoiseVelocityDefault;

		[Token(Token = "0x400147A")]
		public const BlendingMode BlendingModeDefault = BlendingMode.Additive;

		[Token(Token = "0x400147B")]
		public const ShaderAccuracy ShaderAccuracyDefault = ShaderAccuracy.Fast;

		[Token(Token = "0x400147C")]
		public const float FadeOutBeginDefault = -150f;

		[Token(Token = "0x400147D")]
		public const float FadeOutEndDefault = -200f;

		[Token(Token = "0x400147E")]
		public const Dimensions DimensionsDefault = Dimensions.Dim3D;

		[Token(Token = "0x400147F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly Vector2 TiltDefault;

		[Token(Token = "0x4001480")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly LayerMask DynOcclusionLayerMaskDefault;

		[Token(Token = "0x4001481")]
		public const float DynOcclusionFadeDistanceToSurfaceDefault = 0.25f;

		[Token(Token = "0x4001482")]
		public const DynamicOcclusionUpdateRate DynamicOcclusionUpdateRateDefault = DynamicOcclusionUpdateRate.EveryXFrames;

		[Token(Token = "0x4001483")]
		public const int DynOcclusionWaitFramesCountDefault = 3;

		[Token(Token = "0x4001484")]
		public const Dimensions DynOcclusionRaycastingDimensionsDefault = Dimensions.Dim3D;

		[Token(Token = "0x4001485")]
		public const bool DynOcclusionRaycastingConsiderTriggersDefault = false;

		[Token(Token = "0x4001486")]
		public const float DynOcclusionRaycastingMinOccluderAreaDefault = 0f;

		[Token(Token = "0x4001487")]
		public const float DynOcclusionRaycastingMinSurfaceRatioDefault = 0.5f;

		[Token(Token = "0x4001488")]
		public const float DynOcclusionRaycastingMinSurfaceRatioMin = 50f;

		[Token(Token = "0x4001489")]
		public const float DynOcclusionRaycastingMinSurfaceRatioMax = 100f;

		[Token(Token = "0x400148A")]
		public const float DynOcclusionRaycastingMaxSurfaceDotDefault = 0.25f;

		[Token(Token = "0x400148B")]
		public const float DynOcclusionRaycastingMaxSurfaceAngleMin = 45f;

		[Token(Token = "0x400148C")]
		public const float DynOcclusionRaycastingMaxSurfaceAngleMax = 90f;

		[Token(Token = "0x400148D")]
		public const PlaneAlignment DynOcclusionRaycastingPlaneAlignmentDefault = PlaneAlignment.Surface;

		[Token(Token = "0x400148E")]
		public const float DynOcclusionRaycastingPlaneOffsetDefault = 0.1f;

		[Token(Token = "0x400148F")]
		public const int DynOcclusionDepthBufferDepthMapResolutionDefault = 32;

		[Token(Token = "0x4001490")]
		public const bool DynOcclusionDepthBufferOcclusionCullingDefault = true;

		[Token(Token = "0x4001491")]
		public const bool ConfigGeometryOverrideLayerDefault = true;

		[Token(Token = "0x4001492")]
		public const int ConfigGeometryLayerIDDefault = 1;

		[Token(Token = "0x4001493")]
		public const string ConfigGeometryTagDefault = "Untagged";

		[Token(Token = "0x4001494")]
		public const string ConfigFadeOutCameraTagDefault = "MainCamera";

		[Token(Token = "0x4001495")]
		public const RenderQueue ConfigGeometryRenderQueueDefault = RenderQueue.Transparent;

		[Token(Token = "0x4001496")]
		public const RenderPipeline ConfigGeometryRenderPipelineDefault = RenderPipeline.BuiltIn;

		[Token(Token = "0x4001497")]
		public const RenderingMode ConfigGeometryRenderingModeDefault = RenderingMode.SinglePass;

		[Token(Token = "0x4001498")]
		public const int ConfigNoise3DSizeDefault = 64;

		[Token(Token = "0x4001499")]
		public const int ConfigSharedMeshSides = 24;

		[Token(Token = "0x400149A")]
		public const int ConfigSharedMeshSegments = 5;

		[Token(Token = "0x400149B")]
		public const float ConfigDitheringFactor = 0f;

		[Token(Token = "0x1700027A")]
		public static HideFlags ProceduralObjectsHideFlags
		{
			[Token(Token = "0x600173B")]
			[Address(RVA = "0xB7F2F8", Offset = "0xB7F2F8", VA = "0xB7F2F8")]
			get
			{
				return default(HideFlags);
			}
		}
	}
	[Token(Token = "0x2000374")]
	public static class DummyMaterial
	{
	}
	[Token(Token = "0x2000375")]
	[RequireComponent(typeof(VolumetricLightBeam))]
	[DisallowMultipleComponent]
	[AddComponentMenu("")]
	public abstract class DynamicOcclusionAbstractBase : MonoBehaviour
	{
		[Token(Token = "0x2000376")]
		protected enum ProcessOcclusionSource
		{
			[Token(Token = "0x40014A4")]
			RenderLoop,
			[Token(Token = "0x40014A5")]
			OnEnable,
			[Token(Token = "0x40014A6")]
			EditorUpdate,
			[Token(Token = "0x40014A7")]
			User
		}

		[Token(Token = "0x400149C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public DynamicOcclusionUpdateRate updateRate;

		[Token(Token = "0x400149D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[FormerlySerializedAs("waitFrameCount")]
		public int waitXFrames;

		[Token(Token = "0x400149F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool _INTERNAL_ApplyRandomFrameOffset;

		[Token(Token = "0x40014A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private TransformUtils.Packed m_TransformPacked;

		[Token(Token = "0x40014A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private int m_LastFrameRendered;

		[Token(Token = "0x40014A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected VolumetricLightBeam m_Master;

		[Token(Token = "0x1700027B")]
		public int _INTERNAL_LastFrameRendered
		{
			[Token(Token = "0x6001741")]
			[Address(RVA = "0xB837C4", Offset = "0xB837C4", VA = "0xB837C4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x14000012")]
		public event Action onOcclusionProcessed
		{
			[Token(Token = "0x600173E")]
			[Address(RVA = "0xB83548", Offset = "0xB83548", VA = "0xB83548")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x600173F")]
			[Address(RVA = "0xB835E4", Offset = "0xB835E4", VA = "0xB835E4")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x600173D")]
		[Address(RVA = "0xB833A8", Offset = "0xB833A8", VA = "0xB833A8")]
		public void ProcessOcclusionManually()
		{
		}

		[Token(Token = "0x6001740")]
		[Address(RVA = "0xB833B0", Offset = "0xB833B0", VA = "0xB833B0")]
		protected void ProcessOcclusion(ProcessOcclusionSource source)
		{
		}

		[Token(Token = "0x6001742")]
		protected abstract string GetShaderKeyword();

		[Token(Token = "0x6001743")]
		protected abstract MaterialManager.DynamicOcclusion GetDynamicOcclusionMode();

		[Token(Token = "0x6001744")]
		protected abstract bool OnProcessOcclusion(ProcessOcclusionSource source);

		[Token(Token = "0x6001745")]
		protected abstract void OnModifyMaterialCallback(MaterialModifier.Interface owner);

		[Token(Token = "0x6001746")]
		protected abstract void OnEnablePostValidate();

		[Token(Token = "0x6001747")]
		[Address(RVA = "0xB837CC", Offset = "0xB837CC", VA = "0xB837CC", Slot = "9")]
		protected virtual void OnValidateProperties()
		{
		}

		[Token(Token = "0x6001748")]
		[Address(RVA = "0xB837EC", Offset = "0xB837EC", VA = "0xB837EC", Slot = "10")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001749")]
		[Address(RVA = "0xB8385C", Offset = "0xB8385C", VA = "0xB8385C", Slot = "11")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x600174A")]
		[Address(RVA = "0xB838A8", Offset = "0xB838A8", VA = "0xB838A8", Slot = "12")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x600174B")]
		[Address(RVA = "0xB83CB8", Offset = "0xB83CB8", VA = "0xB83CB8", Slot = "13")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x600174C")]
		[Address(RVA = "0xB83DE0", Offset = "0xB83DE0", VA = "0xB83DE0")]
		private void OnWillCameraRender(Camera cam)
		{
		}

		[Token(Token = "0x600174D")]
		[Address(RVA = "0xB83878", Offset = "0xB83878", VA = "0xB83878")]
		private void DisableOcclusion()
		{
		}

		[Token(Token = "0x600174E")]
		[Address(RVA = "0xB83FD0", Offset = "0xB83FD0", VA = "0xB83FD0")]
		protected DynamicOcclusionAbstractBase()
		{
		}
	}
	[Token(Token = "0x2000377")]
	[HelpURL("http://saladgamer.com/vlb-doc/comp-dynocclusion-depthbuffer/")]
	[ExecuteInEditMode]
	public class DynamicOcclusionDepthBuffer : DynamicOcclusionAbstractBase
	{
		[Token(Token = "0x40014A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public LayerMask layerMask;

		[Token(Token = "0x40014A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool useOcclusionCulling;

		[Token(Token = "0x40014AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public int depthMapResolution;

		[Token(Token = "0x40014AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float fadeDistanceToSurface;

		[Token(Token = "0x40014AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Camera m_DepthCamera;

		[Token(Token = "0x40014AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private bool m_NeedToUpdateOcclusionNextFrame;

		[Token(Token = "0x6001751")]
		[Address(RVA = "0xB84040", Offset = "0xB84040", VA = "0xB84040", Slot = "4")]
		protected override string GetShaderKeyword()
		{
			return null;
		}

		[Token(Token = "0x6001752")]
		[Address(RVA = "0xB84080", Offset = "0xB84080", VA = "0xB84080", Slot = "5")]
		protected override MaterialManager.DynamicOcclusion GetDynamicOcclusionMode()
		{
			return default(MaterialManager.DynamicOcclusion);
		}

		[Token(Token = "0x6001753")]
		[Address(RVA = "0xB84088", Offset = "0xB84088", VA = "0xB84088")]
		private void ProcessOcclusionInternal()
		{
		}

		[Token(Token = "0x6001754")]
		[Address(RVA = "0xB84298", Offset = "0xB84298", VA = "0xB84298", Slot = "6")]
		protected override bool OnProcessOcclusion(ProcessOcclusionSource source)
		{
			return default(bool);
		}

		[Token(Token = "0x6001755")]
		[Address(RVA = "0xB842CC", Offset = "0xB842CC", VA = "0xB842CC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001756")]
		[Address(RVA = "0xB840AC", Offset = "0xB840AC", VA = "0xB840AC")]
		private void UpdateDepthCameraPropertiesAccordingToBeam()
		{
		}

		[Token(Token = "0x6001757")]
		[Address(RVA = "0xB84498", Offset = "0xB84498", VA = "0xB84498")]
		public bool HasLayerMaskIssues()
		{
			return default(bool);
		}

		[Token(Token = "0x6001758")]
		[Address(RVA = "0xB844FC", Offset = "0xB844FC", VA = "0xB844FC", Slot = "9")]
		protected override void OnValidateProperties()
		{
		}

		[Token(Token = "0x6001759")]
		[Address(RVA = "0xB84560", Offset = "0xB84560", VA = "0xB84560")]
		private void InstantiateOrActivateDepthCamera()
		{
		}

		[Token(Token = "0x600175A")]
		[Address(RVA = "0xB8482C", Offset = "0xB8482C", VA = "0xB8482C", Slot = "8")]
		protected override void OnEnablePostValidate()
		{
		}

		[Token(Token = "0x600175B")]
		[Address(RVA = "0xB84830", Offset = "0xB84830", VA = "0xB84830", Slot = "13")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x600175C")]
		[Address(RVA = "0xB848C8", Offset = "0xB848C8", VA = "0xB848C8", Slot = "10")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x600175D")]
		[Address(RVA = "0xB848CC", Offset = "0xB848CC", VA = "0xB848CC", Slot = "11")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x600175E")]
		[Address(RVA = "0xB848E4", Offset = "0xB848E4", VA = "0xB848E4")]
		private void DestroyDepthCamera()
		{
		}

		[Token(Token = "0x600175F")]
		[Address(RVA = "0xB84A20", Offset = "0xB84A20", VA = "0xB84A20", Slot = "7")]
		protected override void OnModifyMaterialCallback(MaterialModifier.Interface owner)
		{
		}

		[Token(Token = "0x6001760")]
		[Address(RVA = "0xB84B9C", Offset = "0xB84B9C", VA = "0xB84B9C")]
		public DynamicOcclusionDepthBuffer()
		{
		}
	}
	[Token(Token = "0x2000378")]
	[HelpURL("http://saladgamer.com/vlb-doc/comp-dynocclusion-raycasting/")]
	[ExecuteInEditMode]
	public class DynamicOcclusionRaycasting : DynamicOcclusionAbstractBase
	{
		[Token(Token = "0x2000379")]
		public class HitResult
		{
			[Token(Token = "0x40014BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 point;

			[Token(Token = "0x40014BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Vector3 normal;

			[Token(Token = "0x40014BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public float distance;

			[Token(Token = "0x40014BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Collider2D collider2D;

			[Token(Token = "0x40014BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Collider collider3D;

			[Token(Token = "0x17000281")]
			public bool hasCollider
			{
				[Token(Token = "0x6001781")]
				[Address(RVA = "0xB85ADC", Offset = "0xB85ADC", VA = "0xB85ADC")]
				get
				{
					return default(bool);
				}
			}

			[Token(Token = "0x17000282")]
			public string name
			{
				[Token(Token = "0x6001782")]
				[Address(RVA = "0xB86524", Offset = "0xB86524", VA = "0xB86524")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000283")]
			public Bounds bounds
			{
				[Token(Token = "0x6001783")]
				[Address(RVA = "0xB865E8", Offset = "0xB865E8", VA = "0xB865E8")]
				get
				{
					return default(Bounds);
				}
			}

			[Token(Token = "0x600177E")]
			[Address(RVA = "0xB85794", Offset = "0xB85794", VA = "0xB85794")]
			public HitResult(RaycastHit hit3D)
			{
			}

			[Token(Token = "0x600177F")]
			[Address(RVA = "0xB85878", Offset = "0xB85878", VA = "0xB85878")]
			public HitResult(RaycastHit2D hit2D)
			{
			}

			[Token(Token = "0x6001780")]
			[Address(RVA = "0xB85800", Offset = "0xB85800", VA = "0xB85800")]
			public HitResult()
			{
			}
		}

		[Token(Token = "0x200037A")]
		private enum Direction
		{
			[Token(Token = "0x40014C1")]
			Up = 0,
			[Token(Token = "0x40014C2")]
			Down = 1,
			[Token(Token = "0x40014C3")]
			Left = 2,
			[Token(Token = "0x40014C4")]
			Right = 3,
			[Token(Token = "0x40014C5")]
			Max2D = 1,
			[Token(Token = "0x40014C6")]
			Max3D = 3
		}

		[Token(Token = "0x40014AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Dimensions dimensions;

		[Token(Token = "0x40014AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public LayerMask layerMask;

		[Token(Token = "0x40014B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool considerTriggers;

		[Token(Token = "0x40014B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float minOccluderArea;

		[Token(Token = "0x40014B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float minSurfaceRatio;

		[Token(Token = "0x40014B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float maxSurfaceDot;

		[Token(Token = "0x40014B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public PlaneAlignment planeAlignment;

		[Token(Token = "0x40014B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float planeOffset;

		[Token(Token = "0x40014B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[FormerlySerializedAs("fadeDistanceToPlane")]
		public float fadeDistanceToSurface;

		[Token(Token = "0x40014B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float m_RangeMultiplier;

		[Token(Token = "0x40014BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private uint m_PrevNonSubHitDirectionId;

		[Token(Token = "0x1700027C")]
		[Obsolete("Use 'fadeDistanceToSurface' instead")]
		public float fadeDistanceToPlane
		{
			[Token(Token = "0x6001761")]
			[Address(RVA = "0xB84C50", Offset = "0xB84C50", VA = "0xB84C50")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001762")]
			[Address(RVA = "0xB84C58", Offset = "0xB84C58", VA = "0xB84C58")]
			set
			{
			}
		}

		[Token(Token = "0x1700027D")]
		public HitResult currentHit
		{
			[Token(Token = "0x6001764")]
			[Address(RVA = "0xB84D74", Offset = "0xB84D74", VA = "0xB84D74")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001765")]
			[Address(RVA = "0xB84D7C", Offset = "0xB84D7C", VA = "0xB84D7C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700027E")]
		public Plane planeEquationWS
		{
			[Token(Token = "0x6001768")]
			[Address(RVA = "0xB84DCC", Offset = "0xB84DCC", VA = "0xB84DCC")]
			[CompilerGenerated]
			get
			{
				return default(Plane);
			}
			[Token(Token = "0x6001769")]
			[Address(RVA = "0xB84DD8", Offset = "0xB84DD8", VA = "0xB84DD8")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700027F")]
		private QueryTriggerInteraction queryTriggerInteraction
		{
			[Token(Token = "0x600176F")]
			[Address(RVA = "0xB8503C", Offset = "0xB8503C", VA = "0xB8503C")]
			get
			{
				return default(QueryTriggerInteraction);
			}
		}

		[Token(Token = "0x17000280")]
		private float raycastMaxDistance
		{
			[Token(Token = "0x6001770")]
			[Address(RVA = "0xB85050", Offset = "0xB85050", VA = "0xB85050")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001763")]
		[Address(RVA = "0xB84C60", Offset = "0xB84C60", VA = "0xB84C60")]
		public bool IsColliderHiddenByDynamicOccluder(Collider collider)
		{
			return default(bool);
		}

		[Token(Token = "0x6001766")]
		[Address(RVA = "0xB84D84", Offset = "0xB84D84", VA = "0xB84D84", Slot = "4")]
		protected override string GetShaderKeyword()
		{
			return null;
		}

		[Token(Token = "0x6001767")]
		[Address(RVA = "0xB84DC4", Offset = "0xB84DC4", VA = "0xB84DC4", Slot = "5")]
		protected override MaterialManager.DynamicOcclusion GetDynamicOcclusionMode()
		{
			return default(MaterialManager.DynamicOcclusion);
		}

		[Token(Token = "0x600176A")]
		[Address(RVA = "0xB84DE4", Offset = "0xB84DE4", VA = "0xB84DE4", Slot = "9")]
		protected override void OnValidateProperties()
		{
		}

		[Token(Token = "0x600176B")]
		[Address(RVA = "0xB84E20", Offset = "0xB84E20", VA = "0xB84E20", Slot = "8")]
		protected override void OnEnablePostValidate()
		{
		}

		[Token(Token = "0x600176C")]
		[Address(RVA = "0xB84E28", Offset = "0xB84E28", VA = "0xB84E28", Slot = "13")]
		protected override void OnDisable()
		{
		}

		[Token(Token = "0x600176D")]
		[Address(RVA = "0xB84EE0", Offset = "0xB84EE0", VA = "0xB84EE0")]
		private void Start()
		{
		}

		[Token(Token = "0x600176E")]
		[Address(RVA = "0xB84F8C", Offset = "0xB84F8C", VA = "0xB84F8C")]
		private Vector3 GetRandomVectorAround(Vector3 direction, float angleDiff)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001771")]
		[Address(RVA = "0xB85170", Offset = "0xB85170", VA = "0xB85170")]
		private HitResult GetBestHit(Vector3 rayPos, Vector3 rayDir)
		{
			return null;
		}

		[Token(Token = "0x6001772")]
		[Address(RVA = "0xB85184", Offset = "0xB85184", VA = "0xB85184")]
		private HitResult GetBestHit3D(Vector3 rayPos, Vector3 rayDir)
		{
			return null;
		}

		[Token(Token = "0x6001773")]
		[Address(RVA = "0xB85428", Offset = "0xB85428", VA = "0xB85428")]
		private HitResult GetBestHit2D(Vector3 rayPos, Vector3 rayDir)
		{
			return null;
		}

		[Token(Token = "0x6001774")]
		[Address(RVA = "0xB858E4", Offset = "0xB858E4", VA = "0xB858E4")]
		private uint GetDirectionCount()
		{
			return default(uint);
		}

		[Token(Token = "0x6001775")]
		[Address(RVA = "0xB858FC", Offset = "0xB858FC", VA = "0xB858FC")]
		private Vector3 GetDirection(uint dirInt)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001776")]
		[Address(RVA = "0xB85A60", Offset = "0xB85A60", VA = "0xB85A60")]
		private bool IsHitValid(HitResult hit, Vector3 forwardVec)
		{
			return default(bool);
		}

		[Token(Token = "0x6001777")]
		[Address(RVA = "0xB85B6C", Offset = "0xB85B6C", VA = "0xB85B6C", Slot = "6")]
		protected override bool OnProcessOcclusion(ProcessOcclusionSource source)
		{
			return default(bool);
		}

		[Token(Token = "0x6001778")]
		[Address(RVA = "0xB84E48", Offset = "0xB84E48", VA = "0xB84E48")]
		private void SetHit(HitResult hit)
		{
		}

		[Token(Token = "0x6001779")]
		[Address(RVA = "0xB86128", Offset = "0xB86128", VA = "0xB86128", Slot = "7")]
		protected override void OnModifyMaterialCallback(MaterialModifier.Interface owner)
		{
		}

		[Token(Token = "0x600177A")]
		[Address(RVA = "0xB86018", Offset = "0xB86018", VA = "0xB86018")]
		private void SetClippingPlane(Plane planeWS)
		{
		}

		[Token(Token = "0x600177B")]
		[Address(RVA = "0xB85FE0", Offset = "0xB85FE0", VA = "0xB85FE0")]
		private void SetClippingPlaneOff()
		{
		}

		[Token(Token = "0x600177C")]
		[Address(RVA = "0xB86458", Offset = "0xB86458", VA = "0xB86458")]
		private void SetPlaneWS(Plane planeWS)
		{
		}

		[Token(Token = "0x600177D")]
		[Address(RVA = "0xB86464", Offset = "0xB86464", VA = "0xB86464")]
		public DynamicOcclusionRaycasting()
		{
		}
	}
	[Token(Token = "0x200037B")]
	public enum ColorMode
	{
		[Token(Token = "0x40014C8")]
		Flat,
		[Token(Token = "0x40014C9")]
		Gradient
	}
	[Token(Token = "0x200037C")]
	public enum AttenuationEquation
	{
		[Token(Token = "0x40014CB")]
		Linear,
		[Token(Token = "0x40014CC")]
		Quadratic,
		[Token(Token = "0x40014CD")]
		Blend
	}
	[Token(Token = "0x200037D")]
	public enum BlendingMode
	{
		[Token(Token = "0x40014CF")]
		Additive,
		[Token(Token = "0x40014D0")]
		SoftAdditive,
		[Token(Token = "0x40014D1")]
		TraditionalTransparency
	}
	[Token(Token = "0x200037E")]
	public enum ShaderAccuracy
	{
		[Token(Token = "0x40014D3")]
		Fast,
		[Token(Token = "0x40014D4")]
		High
	}
	[Token(Token = "0x200037F")]
	public enum NoiseMode
	{
		[Token(Token = "0x40014D6")]
		Disabled,
		[Token(Token = "0x40014D7")]
		WorldSpace,
		[Token(Token = "0x40014D8")]
		LocalSpace
	}
	[Token(Token = "0x2000380")]
	public enum MeshType
	{
		[Token(Token = "0x40014DA")]
		Shared,
		[Token(Token = "0x40014DB")]
		Custom
	}
	[Token(Token = "0x2000381")]
	public enum RenderPipeline
	{
		[Token(Token = "0x40014DD")]
		BuiltIn,
		[Token(Token = "0x40014DE")]
		URP,
		[Token(Token = "0x40014DF")]
		HDRP
	}
	[Token(Token = "0x2000382")]
	public enum RenderingMode
	{
		[Token(Token = "0x40014E1")]
		MultiPass,
		[Token(Token = "0x40014E2")]
		SinglePass,
		[Token(Token = "0x40014E3")]
		GPUInstancing,
		[Token(Token = "0x40014E4")]
		SRPBatcher
	}
	[Token(Token = "0x2000383")]
	public enum RenderQueue
	{
		[Token(Token = "0x40014E6")]
		Custom = 0,
		[Token(Token = "0x40014E7")]
		Background = 1000,
		[Token(Token = "0x40014E8")]
		Geometry = 2000,
		[Token(Token = "0x40014E9")]
		AlphaTest = 2450,
		[Token(Token = "0x40014EA")]
		GeometryLast = 2500,
		[Token(Token = "0x40014EB")]
		Transparent = 3000,
		[Token(Token = "0x40014EC")]
		Overlay = 4000
	}
	[Token(Token = "0x2000384")]
	public enum Dimensions
	{
		[Token(Token = "0x40014EE")]
		Dim3D,
		[Token(Token = "0x40014EF")]
		Dim2D
	}
	[Token(Token = "0x2000385")]
	public enum PlaneAlignment
	{
		[Token(Token = "0x40014F1")]
		Surface,
		[Token(Token = "0x40014F2")]
		Beam
	}
	[Token(Token = "0x2000386")]
	[Flags]
	public enum DynamicOcclusionUpdateRate
	{
		[Token(Token = "0x40014F4")]
		Never = 1,
		[Token(Token = "0x40014F5")]
		OnEnable = 2,
		[Token(Token = "0x40014F6")]
		OnBeamMove = 4,
		[Token(Token = "0x40014F7")]
		EveryXFrames = 8,
		[Token(Token = "0x40014F8")]
		OnBeamMoveAndEveryXFrames = 0xC
	}
	[Token(Token = "0x2000387")]
	public enum ParticlesDirection
	{
		[Token(Token = "0x40014FA")]
		Random,
		[Token(Token = "0x40014FB")]
		LocalSpace,
		[Token(Token = "0x40014FC")]
		WorldSpace
	}
	[Token(Token = "0x2000388")]
	public static class GlobalMesh
	{
		[Token(Token = "0x40014FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Mesh ms_Mesh;

		[Token(Token = "0x40014FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static bool ms_DoubleSided;

		[Token(Token = "0x6001784")]
		[Address(RVA = "0xB80178", Offset = "0xB80178", VA = "0xB80178")]
		public static Mesh Get()
		{
			return null;
		}

		[Token(Token = "0x6001785")]
		[Address(RVA = "0xB866D0", Offset = "0xB866D0", VA = "0xB866D0")]
		public static void Destroy()
		{
		}
	}
	[Token(Token = "0x2000389")]
	public sealed class HighlightNullAttribute : PropertyAttribute
	{
		[Token(Token = "0x6001786")]
		[Address(RVA = "0xB86784", Offset = "0xB86784", VA = "0xB86784")]
		public HighlightNullAttribute()
		{
		}
	}
	[Token(Token = "0x200038A")]
	public static class MaterialManager
	{
		[Token(Token = "0x200038B")]
		public enum BlendingMode
		{
			[Token(Token = "0x4001506")]
			Additive,
			[Token(Token = "0x4001507")]
			SoftAdditive,
			[Token(Token = "0x4001508")]
			TraditionalTransparency,
			[Token(Token = "0x4001509")]
			Count
		}

		[Token(Token = "0x200038C")]
		public enum Noise3D
		{
			[Token(Token = "0x400150B")]
			Off,
			[Token(Token = "0x400150C")]
			On,
			[Token(Token = "0x400150D")]
			Count
		}

		[Token(Token = "0x200038D")]
		public enum DepthBlend
		{
			[Token(Token = "0x400150F")]
			Off,
			[Token(Token = "0x4001510")]
			On,
			[Token(Token = "0x4001511")]
			Count
		}

		[Token(Token = "0x200038E")]
		public enum ColorGradient
		{
			[Token(Token = "0x4001513")]
			Off,
			[Token(Token = "0x4001514")]
			MatrixLow,
			[Token(Token = "0x4001515")]
			MatrixHigh,
			[Token(Token = "0x4001516")]
			Count
		}

		[Token(Token = "0x200038F")]
		public enum DynamicOcclusion
		{
			[Token(Token = "0x4001518")]
			Off,
			[Token(Token = "0x4001519")]
			ClippingPlane,
			[Token(Token = "0x400151A")]
			DepthTexture,
			[Token(Token = "0x400151B")]
			Count
		}

		[Token(Token = "0x2000390")]
		public enum MeshSkewing
		{
			[Token(Token = "0x400151D")]
			Off,
			[Token(Token = "0x400151E")]
			On,
			[Token(Token = "0x400151F")]
			Count
		}

		[Token(Token = "0x2000391")]
		public enum ShaderAccuracy
		{
			[Token(Token = "0x4001521")]
			Fast,
			[Token(Token = "0x4001522")]
			High,
			[Token(Token = "0x4001523")]
			Count
		}

		[Token(Token = "0x2000392")]
		public class StaticProperties
		{
			[Token(Token = "0x4001524")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public BlendingMode blendingMode;

			[Token(Token = "0x4001525")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public Noise3D noise3D;

			[Token(Token = "0x4001526")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public DepthBlend depthBlend;

			[Token(Token = "0x4001527")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public ColorGradient colorGradient;

			[Token(Token = "0x4001528")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public DynamicOcclusion dynamicOcclusion;

			[Token(Token = "0x4001529")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public MeshSkewing meshSkewing;

			[Token(Token = "0x400152A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ShaderAccuracy shaderAccuracy;

			[Token(Token = "0x17000284")]
			public int materialID
			{
				[Token(Token = "0x600178B")]
				[Address(RVA = "0xB86910", Offset = "0xB86910", VA = "0xB86910")]
				get
				{
					return default(int);
				}
			}

			[Token(Token = "0x600178C")]
			[Address(RVA = "0xB80EF8", Offset = "0xB80EF8", VA = "0xB80EF8")]
			public void ApplyToMaterial(Material mat)
			{
			}

			[Token(Token = "0x600178D")]
			[Address(RVA = "0xB80DE4", Offset = "0xB80DE4", VA = "0xB80DE4")]
			public StaticProperties()
			{
			}
		}

		[Token(Token = "0x2000393")]
		private class MaterialsGroup
		{
			[Token(Token = "0x400152B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Material[] materials;

			[Token(Token = "0x600178E")]
			[Address(RVA = "0xB8688C", Offset = "0xB8688C", VA = "0xB8688C")]
			public MaterialsGroup()
			{
			}
		}

		[Token(Token = "0x40014FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static MaterialPropertyBlock materialPropertyBlock;

		[Token(Token = "0x4001500")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly BlendMode[] BlendingMode_SrcFactor;

		[Token(Token = "0x4001501")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly BlendMode[] BlendingMode_DstFactor;

		[Token(Token = "0x4001502")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private static readonly bool[] BlendingMode_AlphaAsBlack;

		[Token(Token = "0x4001503")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static int kStaticPropertiesCount;

		[Token(Token = "0x4001504")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private static Hashtable ms_MaterialsGroup;

		[Token(Token = "0x6001787")]
		[Address(RVA = "0xB7F35C", Offset = "0xB7F35C", VA = "0xB7F35C")]
		public static Material NewMaterialTransient(bool gpuInstanced)
		{
			return null;
		}

		[Token(Token = "0x6001788")]
		[Address(RVA = "0xB8678C", Offset = "0xB8678C", VA = "0xB8678C")]
		public static Material NewMaterialPersistent(Shader shader, bool gpuInstanced)
		{
			return null;
		}

		[Token(Token = "0x6001789")]
		[Address(RVA = "0xB811C0", Offset = "0xB811C0", VA = "0xB811C0")]
		public static Material GetInstancedMaterial(uint groupID, StaticProperties staticProps)
		{
			return null;
		}
	}
	[Token(Token = "0x2000394")]
	public static class MeshGenerator
	{
		[Token(Token = "0x400152C")]
		private const float kMinTruncatedRadius = 0.001f;

		[Token(Token = "0x600178F")]
		[Address(RVA = "0xB86AEC", Offset = "0xB86AEC", VA = "0xB86AEC")]
		private static float GetAngleOffset(int numSides)
		{
			return default(float);
		}

		[Token(Token = "0x6001790")]
		[Address(RVA = "0xB86B04", Offset = "0xB86B04", VA = "0xB86B04")]
		public static Mesh GenerateConeZ_RadiusAndAngle(float lengthZ, float radiusStart, float coneAngle, int numSides, int numSegments, bool cap, bool doubleSided)
		{
			return null;
		}

		[Token(Token = "0x6001791")]
		[Address(RVA = "0xB86B74", Offset = "0xB86B74", VA = "0xB86B74")]
		public static Mesh GenerateConeZ_Angle(float lengthZ, float coneAngle, int numSides, int numSegments, bool cap, bool doubleSided)
		{
			return null;
		}

		[Token(Token = "0x6001792")]
		[Address(RVA = "0xB7F98C", Offset = "0xB7F98C", VA = "0xB7F98C")]
		public static Mesh GenerateConeZ_Radius(float lengthZ, float radiusStart, float radiusEnd, int numSides, int numSegments, bool cap, bool doubleSided)
		{
			return null;
		}

		[Token(Token = "0x6001793")]
		[Address(RVA = "0xB81FF8", Offset = "0xB81FF8", VA = "0xB81FF8")]
		public static Bounds ComputeBounds(float lengthZ, float radiusStart, float radiusEnd)
		{
			return default(Bounds);
		}

		[Token(Token = "0x6001794")]
		[Address(RVA = "0xB86BE0", Offset = "0xB86BE0", VA = "0xB86BE0")]
		public static int GetVertexCount(int numSides, int numSegments, bool geomCap, bool doubleSided)
		{
			return default(int);
		}

		[Token(Token = "0x6001795")]
		[Address(RVA = "0xB86BFC", Offset = "0xB86BFC", VA = "0xB86BFC")]
		public static int GetIndicesCount(int numSides, int numSegments, bool geomCap, bool doubleSided)
		{
			return default(int);
		}

		[Token(Token = "0x6001796")]
		[Address(RVA = "0xB86C24", Offset = "0xB86C24", VA = "0xB86C24")]
		public static int GetSharedMeshVertexCount()
		{
			return default(int);
		}

		[Token(Token = "0x6001797")]
		[Address(RVA = "0xB86C84", Offset = "0xB86C84", VA = "0xB86C84")]
		public static int GetSharedMeshIndicesCount()
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000395")]
	public static class Noise3D
	{
		[Token(Token = "0x400152D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool ms_IsSupportedChecked;

		[Token(Token = "0x400152E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		private static bool ms_IsSupported;

		[Token(Token = "0x400152F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Texture3D ms_NoiseTexture;

		[Token(Token = "0x4001530")]
		private const HideFlags kHideFlags = HideFlags.HideAndDontSave;

		[Token(Token = "0x4001531")]
		private const int kMinShaderLevel = 35;

		[Token(Token = "0x17000285")]
		public static bool isSupported
		{
			[Token(Token = "0x6001798")]
			[Address(RVA = "0xB80C80", Offset = "0xB80C80", VA = "0xB80C80")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000286")]
		public static bool isProperlyLoaded
		{
			[Token(Token = "0x6001799")]
			[Address(RVA = "0xB86D8C", Offset = "0xB86D8C", VA = "0xB86D8C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000287")]
		public static string isNotSupportedString
		{
			[Token(Token = "0x600179A")]
			[Address(RVA = "0xB86CE8", Offset = "0xB86CE8", VA = "0xB86CE8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600179B")]
		[Address(RVA = "0xB86E04", Offset = "0xB86E04", VA = "0xB86E04")]
		[RuntimeInitializeOnLoadMethod]
		private static void OnStartUp()
		{
		}

		[Token(Token = "0x600179C")]
		[Address(RVA = "0xB81C48", Offset = "0xB81C48", VA = "0xB81C48")]
		public static void LoadIfNeeded()
		{
		}

		[Token(Token = "0x600179D")]
		[Address(RVA = "0xB86E08", Offset = "0xB86E08", VA = "0xB86E08")]
		private static Texture3D LoadTexture3D(TextAsset textData, int size)
		{
			return null;
		}
	}
	[Token(Token = "0x2000396")]
	public class PolygonHelper : MonoBehaviour
	{
		[Token(Token = "0x2000397")]
		public struct Plane2D
		{
			[Token(Token = "0x4001532")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public Vector2 normal;

			[Token(Token = "0x4001533")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float distance;

			[Token(Token = "0x600179F")]
			[Address(RVA = "0xB870A4", Offset = "0xB870A4", VA = "0xB870A4")]
			public float Distance(Vector2 point)
			{
				return default(float);
			}

			[Token(Token = "0x60017A0")]
			[Address(RVA = "0xB870C0", Offset = "0xB870C0", VA = "0xB870C0")]
			public Vector2 ClosestPoint(Vector2 pt)
			{
				return default(Vector2);
			}

			[Token(Token = "0x60017A1")]
			[Address(RVA = "0xB870EC", Offset = "0xB870EC", VA = "0xB870EC")]
			public Vector2 Intersect(Vector2 p1, Vector2 p2)
			{
				return default(Vector2);
			}

			[Token(Token = "0x60017A2")]
			[Address(RVA = "0xB8717C", Offset = "0xB8717C", VA = "0xB8717C")]
			public bool GetSide(Vector2 point)
			{
				return default(bool);
			}

			[Token(Token = "0x60017A3")]
			[Address(RVA = "0xB871A0", Offset = "0xB871A0", VA = "0xB871A0")]
			public static Plane2D FromPoints(Vector3 p1, Vector3 p2)
			{
				return default(Plane2D);
			}

			[Token(Token = "0x60017A4")]
			[Address(RVA = "0xB87298", Offset = "0xB87298", VA = "0xB87298")]
			public static Plane2D FromNormalAndPoint(Vector3 normalizedNormal, Vector3 p1)
			{
				return default(Plane2D);
			}

			[Token(Token = "0x60017A5")]
			[Address(RVA = "0xB872A8", Offset = "0xB872A8", VA = "0xB872A8")]
			public void Flip()
			{
			}

			[Token(Token = "0x60017A6")]
			[Address(RVA = "0xB872C4", Offset = "0xB872C4", VA = "0xB872C4")]
			public Vector2[] CutConvex(Vector2[] poly)
			{
				return null;
			}

			[Token(Token = "0x60017A7")]
			[Address(RVA = "0xB87564", Offset = "0xB87564", VA = "0xB87564", Slot = "3")]
			public override string ToString()
			{
				return null;
			}
		}

		[Token(Token = "0x600179E")]
		[Address(RVA = "0xB8709C", Offset = "0xB8709C", VA = "0xB8709C")]
		public PolygonHelper()
		{
		}
	}
	[Token(Token = "0x2000398")]
	public static class ShaderProperties
	{
		[Token(Token = "0x4001534")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int FadeOutFactor;

		[Token(Token = "0x4001535")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static readonly int ConeSlopeCosSin;

		[Token(Token = "0x4001536")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public static readonly int ConeRadius;

		[Token(Token = "0x4001537")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public static readonly int ConeApexOffsetZ;

		[Token(Token = "0x4001538")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public static readonly int ColorFlat;

		[Token(Token = "0x4001539")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public static readonly int AlphaInside;

		[Token(Token = "0x400153A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public static readonly int AlphaOutside;

		[Token(Token = "0x400153B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public static readonly int AttenuationLerpLinearQuad;

		[Token(Token = "0x400153C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public static readonly int DistanceFallOff;

		[Token(Token = "0x400153D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public static readonly int DistanceCamClipping;

		[Token(Token = "0x400153E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public static readonly int FresnelPow;

		[Token(Token = "0x400153F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public static readonly int GlareBehind;

		[Token(Token = "0x4001540")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public static readonly int GlareFrontal;

		[Token(Token = "0x4001541")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public static readonly int DrawCap;

		[Token(Token = "0x4001542")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public static readonly int DepthBlendDistance;

		[Token(Token = "0x4001543")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public static readonly int NoiseVelocityAndScale;

		[Token(Token = "0x4001544")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public static readonly int NoiseParam;

		[Token(Token = "0x4001545")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public static readonly int CameraParams;

		[Token(Token = "0x4001546")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public static readonly int ColorGradientMatrix;

		[Token(Token = "0x4001547")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public static readonly int LocalToWorldMatrix;

		[Token(Token = "0x4001548")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public static readonly int WorldToLocalMatrix;

		[Token(Token = "0x4001549")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public static readonly int BlendSrcFactor;

		[Token(Token = "0x400154A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public static readonly int BlendDstFactor;

		[Token(Token = "0x400154B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public static readonly int DynamicOcclusionClippingPlaneWS;

		[Token(Token = "0x400154C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public static readonly int DynamicOcclusionClippingPlaneProps;

		[Token(Token = "0x400154D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public static readonly int DynamicOcclusionDepthTexture;

		[Token(Token = "0x400154E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public static readonly int DynamicOcclusionDepthProps;

		[Token(Token = "0x400154F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public static readonly int LocalForwardDirection;

		[Token(Token = "0x4001550")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public static readonly int TiltVector;

		[Token(Token = "0x4001551")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public static readonly int AdditionalClippingPlaneWS;

		[Token(Token = "0x4001552")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public static readonly int GlobalNoiseTex3D;

		[Token(Token = "0x4001553")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public static readonly int GlobalNoiseCustomTime;

		[Token(Token = "0x4001554")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public static readonly int GlobalDitheringFactor;

		[Token(Token = "0x4001555")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public static readonly int GlobalDitheringNoiseTex;

		[Token(Token = "0x4001556")]
		public const string KeywordSRP = "VLB_SRP_API";
	}
	[Token(Token = "0x2000399")]
	[HelpURL("http://saladgamer.com/vlb-doc/comp-skewinghandle/")]
	[ExecuteInEditMode]
	public class SkewingHandle : MonoBehaviour
	{
		[Token(Token = "0x200039A")]
		[CompilerGenerated]
		private sealed class <CoUpdate>d__8 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001559")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400155A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400155B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public SkewingHandle <>4__this;

			[Token(Token = "0x17000288")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60017B5")]
				[Address(RVA = "0xB87FDC", Offset = "0xB87FDC", VA = "0xB87FDC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000289")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60017B7")]
				[Address(RVA = "0xB88024", Offset = "0xB88024", VA = "0xB88024", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60017B2")]
			[Address(RVA = "0xB87F40", Offset = "0xB87F40", VA = "0xB87F40")]
			[DebuggerHidden]
			public <CoUpdate>d__8(int <>1__state)
			{
			}

			[Token(Token = "0x60017B3")]
			[Address(RVA = "0xB87F70", Offset = "0xB87F70", VA = "0xB87F70", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60017B4")]
			[Address(RVA = "0xB87F74", Offset = "0xB87F74", VA = "0xB87F74", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60017B6")]
			[Address(RVA = "0xB87FE4", Offset = "0xB87FE4", VA = "0xB87FE4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001557")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public VolumetricLightBeam volumetricLightBeam;

		[Token(Token = "0x4001558")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool shouldUpdateEachFrame;

		[Token(Token = "0x60017A9")]
		[Address(RVA = "0xB87C5C", Offset = "0xB87C5C", VA = "0xB87C5C")]
		public bool IsAttachedToSelf()
		{
			return default(bool);
		}

		[Token(Token = "0x60017AA")]
		[Address(RVA = "0xB87D1C", Offset = "0xB87D1C", VA = "0xB87D1C")]
		public bool CanSetSkewingVector()
		{
			return default(bool);
		}

		[Token(Token = "0x60017AB")]
		[Address(RVA = "0xB87DB4", Offset = "0xB87DB4", VA = "0xB87DB4")]
		public bool CanUpdateEachFrame()
		{
			return default(bool);
		}

		[Token(Token = "0x60017AC")]
		[Address(RVA = "0xB87DEC", Offset = "0xB87DEC", VA = "0xB87DEC")]
		private bool ShouldUpdateEachFrame()
		{
			return default(bool);
		}

		[Token(Token = "0x60017AD")]
		[Address(RVA = "0xB87E00", Offset = "0xB87E00", VA = "0xB87E00")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60017AE")]
		[Address(RVA = "0xB87E8C", Offset = "0xB87E8C", VA = "0xB87E8C")]
		private void Start()
		{
		}

		[Token(Token = "0x60017AF")]
		[Address(RVA = "0xB87ED8", Offset = "0xB87ED8", VA = "0xB87ED8")]
		[IteratorStateMachine(typeof(<CoUpdate>d__8))]
		private IEnumerator CoUpdate()
		{
			return null;
		}

		[Token(Token = "0x60017B0")]
		[Address(RVA = "0xB87E24", Offset = "0xB87E24", VA = "0xB87E24")]
		private void SetSkewingVector()
		{
		}

		[Token(Token = "0x60017B1")]
		[Address(RVA = "0xB87F68", Offset = "0xB87F68", VA = "0xB87F68")]
		public SkewingHandle()
		{
		}
	}
	[Token(Token = "0x200039B")]
	public static class SRPHelper
	{
		[Token(Token = "0x200039C")]
		public enum RenderPipeline
		{
			[Token(Token = "0x400155E")]
			Undefined,
			[Token(Token = "0x400155F")]
			BuiltIn,
			[Token(Token = "0x4001560")]
			URP,
			[Token(Token = "0x4001561")]
			LWRP,
			[Token(Token = "0x4001562")]
			HDRP
		}

		[Token(Token = "0x400155C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static RenderPipeline m_RenderPipelineCached;

		[Token(Token = "0x1700028A")]
		public static RenderPipeline renderPipelineType
		{
			[Token(Token = "0x60017B8")]
			[Address(RVA = "0xB82A30", Offset = "0xB82A30", VA = "0xB82A30")]
			get
			{
				return default(RenderPipeline);
			}
		}

		[Token(Token = "0x60017B9")]
		[Address(RVA = "0xB8802C", Offset = "0xB8802C", VA = "0xB8802C")]
		private static RenderPipeline ComputeRenderPipeline()
		{
			return default(RenderPipeline);
		}

		[Token(Token = "0x60017BA")]
		[Address(RVA = "0xB8214C", Offset = "0xB8214C", VA = "0xB8214C")]
		public static bool IsUsingCustomRenderPipeline()
		{
			return default(bool);
		}

		[Token(Token = "0x60017BB")]
		[Address(RVA = "0xB7EFA8", Offset = "0xB7EFA8", VA = "0xB7EFA8")]
		public static void RegisterOnBeginCameraRendering(Action<ScriptableRenderContext, Camera> cb)
		{
		}

		[Token(Token = "0x60017BC")]
		[Address(RVA = "0xB7EE6C", Offset = "0xB7EE6C", VA = "0xB7EE6C")]
		public static void UnregisterOnBeginCameraRendering(Action<ScriptableRenderContext, Camera> cb)
		{
		}
	}
	[Token(Token = "0x200039D")]
	public static class TransformUtils
	{
		[Token(Token = "0x200039E")]
		public class Packed
		{
			[Token(Token = "0x4001563")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 position;

			[Token(Token = "0x4001564")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public Quaternion rotation;

			[Token(Token = "0x4001565")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public Vector3 lossyScale;

			[Token(Token = "0x60017BF")]
			[Address(RVA = "0xB88154", Offset = "0xB88154", VA = "0xB88154")]
			public Packed()
			{
			}
		}

		[Token(Token = "0x60017BD")]
		[Address(RVA = "0xB83724", Offset = "0xB83724", VA = "0xB83724")]
		public static Packed GetWorldPacked(this Transform self)
		{
			return null;
		}

		[Token(Token = "0x60017BE")]
		[Address(RVA = "0xB83ED8", Offset = "0xB83ED8", VA = "0xB83ED8")]
		public static bool IsSame(this Transform self, Packed packed)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200039F")]
	[RequireComponent(typeof(VolumetricLightBeam))]
	[HelpURL("http://saladgamer.com/vlb-doc/comp-triggerzone/")]
	[DisallowMultipleComponent]
	public class TriggerZone : MonoBehaviour
	{
		[Token(Token = "0x20003A0")]
		private enum TriggerZoneUpdateRate
		{
			[Token(Token = "0x400156D")]
			OnEnable,
			[Token(Token = "0x400156E")]
			OnOcclusionChange
		}

		[Token(Token = "0x4001566")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool setIsTrigger;

		[Token(Token = "0x4001567")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float rangeMultiplier;

		[Token(Token = "0x4001568")]
		private const int kMeshColliderNumSides = 8;

		[Token(Token = "0x4001569")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private VolumetricLightBeam m_Beam;

		[Token(Token = "0x400156A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private DynamicOcclusionRaycasting m_DynamicOcclusionRaycasting;

		[Token(Token = "0x400156B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private PolygonCollider2D m_PolygonCollider2D;

		[Token(Token = "0x1700028B")]
		private TriggerZoneUpdateRate updateRate
		{
			[Token(Token = "0x60017C0")]
			[Address(RVA = "0xB8815C", Offset = "0xB8815C", VA = "0xB8815C")]
			get
			{
				return default(TriggerZoneUpdateRate);
			}
		}

		[Token(Token = "0x60017C1")]
		[Address(RVA = "0xB881E0", Offset = "0xB881E0", VA = "0xB881E0")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60017C2")]
		[Address(RVA = "0xB88854", Offset = "0xB88854", VA = "0xB88854")]
		private void OnOcclusionProcessed()
		{
		}

		[Token(Token = "0x60017C3")]
		[Address(RVA = "0xB88338", Offset = "0xB88338", VA = "0xB88338")]
		private void ComputeZone()
		{
		}

		[Token(Token = "0x60017C4")]
		[Address(RVA = "0xB888D0", Offset = "0xB888D0", VA = "0xB888D0")]
		public TriggerZone()
		{
		}
	}
	[Token(Token = "0x20003A1")]
	public static class Utils
	{
		[Token(Token = "0x20003A2")]
		public enum FloatPackingPrecision
		{
			[Token(Token = "0x4001572")]
			High = 64,
			[Token(Token = "0x4001573")]
			Low = 8,
			[Token(Token = "0x4001574")]
			Undef = 0
		}

		[Token(Token = "0x400156F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static FloatPackingPrecision ms_FloatPackingPrecision;

		[Token(Token = "0x4001570")]
		private const int kFloatPackingHighMinShaderLevel = 35;

		[Token(Token = "0x60017C5")]
		[Address(RVA = "0xB888E8", Offset = "0xB888E8", VA = "0xB888E8")]
		public static float ComputeConeRadiusEnd(float fallOffEnd, float spotAngle)
		{
			return default(float);
		}

		[Token(Token = "0x60017C6")]
		public static void Swap<T>(ref T a, ref T b)
		{
		}

		[Token(Token = "0x60017C7")]
		[Address(RVA = "0xB7F628", Offset = "0xB7F628", VA = "0xB7F628")]
		public static string GetPath(Transform current)
		{
			return null;
		}

		[Token(Token = "0x60017C8")]
		public static T NewWithComponent<T>(string name) where T : Component
		{
			return null;
		}

		[Token(Token = "0x60017C9")]
		public static T GetOrAddComponent<T>(this GameObject self) where T : Component
		{
			return null;
		}

		[Token(Token = "0x60017CA")]
		public static T GetOrAddComponent<T>(this MonoBehaviour self) where T : Component
		{
			return null;
		}

		[Token(Token = "0x60017CB")]
		[Address(RVA = "0xB8891C", Offset = "0xB8891C", VA = "0xB8891C")]
		public static bool HasFlag(this Enum mask, Enum flags)
		{
			return default(bool);
		}

		[Token(Token = "0x60017CC")]
		[Address(RVA = "0xB889EC", Offset = "0xB889EC", VA = "0xB889EC")]
		public static Vector2 xy(this Vector3 aVector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60017CD")]
		[Address(RVA = "0xB889F0", Offset = "0xB889F0", VA = "0xB889F0")]
		public static Vector2 xz(this Vector3 aVector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60017CE")]
		[Address(RVA = "0xB889F8", Offset = "0xB889F8", VA = "0xB889F8")]
		public static Vector2 yz(this Vector3 aVector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60017CF")]
		[Address(RVA = "0xB88A04", Offset = "0xB88A04", VA = "0xB88A04")]
		public static Vector2 yx(this Vector3 aVector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60017D0")]
		[Address(RVA = "0xB88A14", Offset = "0xB88A14", VA = "0xB88A14")]
		public static Vector2 zx(this Vector3 aVector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60017D1")]
		[Address(RVA = "0xB88A20", Offset = "0xB88A20", VA = "0xB88A20")]
		public static Vector2 zy(this Vector3 aVector)
		{
			return default(Vector2);
		}

		[Token(Token = "0x60017D2")]
		[Address(RVA = "0xB88A28", Offset = "0xB88A28", VA = "0xB88A28")]
		public static bool Approximately(this Vector2 a, Vector2 b, float epsilon = 1E-05f)
		{
			return default(bool);
		}

		[Token(Token = "0x60017D3")]
		[Address(RVA = "0xB88A48", Offset = "0xB88A48", VA = "0xB88A48")]
		public static bool Approximately(this Vector3 a, Vector3 b, float epsilon = 1E-05f)
		{
			return default(bool);
		}

		[Token(Token = "0x60017D4")]
		[Address(RVA = "0xB88A74", Offset = "0xB88A74", VA = "0xB88A74")]
		public static bool Approximately(this Vector4 a, Vector4 b, float epsilon = 1E-05f)
		{
			return default(bool);
		}

		[Token(Token = "0x60017D5")]
		[Address(RVA = "0xB88AB0", Offset = "0xB88AB0", VA = "0xB88AB0")]
		public static Vector4 AsVector4(this Vector3 vec3, float w)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60017D6")]
		[Address(RVA = "0xB88AB4", Offset = "0xB88AB4", VA = "0xB88AB4")]
		public static Vector4 PlaneEquation(Vector3 normalizedNormal, Vector3 pt)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60017D7")]
		[Address(RVA = "0xB88AD0", Offset = "0xB88AD0", VA = "0xB88AD0")]
		public static float GetVolumeCubic(this Bounds self)
		{
			return default(float);
		}

		[Token(Token = "0x60017D8")]
		[Address(RVA = "0xB85704", Offset = "0xB85704", VA = "0xB85704")]
		public static float GetMaxArea2D(this Bounds self)
		{
			return default(float);
		}

		[Token(Token = "0x60017D9")]
		[Address(RVA = "0xB88B18", Offset = "0xB88B18", VA = "0xB88B18")]
		public static Color Opaque(this Color self)
		{
			return default(Color);
		}

		[Token(Token = "0x60017DA")]
		[Address(RVA = "0xB862EC", Offset = "0xB862EC", VA = "0xB862EC")]
		public static Plane TranslateCustom(this Plane plane, Vector3 translation)
		{
			return default(Plane);
		}

		[Token(Token = "0x60017DB")]
		[Address(RVA = "0xB88858", Offset = "0xB88858", VA = "0xB88858")]
		public static Vector3 ClosestPointOnPlaneCustom(this Plane plane, Vector3 point)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60017DC")]
		[Address(RVA = "0xB87164", Offset = "0xB87164", VA = "0xB87164")]
		public static bool IsAlmostZero(float f)
		{
			return default(bool);
		}

		[Token(Token = "0x60017DD")]
		[Address(RVA = "0xB84D2C", Offset = "0xB84D2C", VA = "0xB84D2C")]
		public static bool IsValid(this Plane plane)
		{
			return default(bool);
		}

		[Token(Token = "0x60017DE")]
		[Address(RVA = "0xB81954", Offset = "0xB81954", VA = "0xB81954")]
		public static void SetKeywordEnabled(this Material mat, string name, bool enabled)
		{
		}

		[Token(Token = "0x60017DF")]
		[Address(RVA = "0xB88B20", Offset = "0xB88B20", VA = "0xB88B20")]
		public static void SetShaderKeywordEnabled(string name, bool enabled)
		{
		}

		[Token(Token = "0x60017E0")]
		[Address(RVA = "0xB81A60", Offset = "0xB81A60", VA = "0xB81A60")]
		public static Matrix4x4 SampleInMatrix(this Gradient self, int floatPackingPrecision)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x60017E1")]
		[Address(RVA = "0xB88B90", Offset = "0xB88B90", VA = "0xB88B90")]
		public static Color[] SampleInArray(this Gradient self, int samplesCount)
		{
			return null;
		}

		[Token(Token = "0x60017E2")]
		[Address(RVA = "0xB88C74", Offset = "0xB88C74", VA = "0xB88C74")]
		private static Vector4 Vector4_Floor(Vector4 vec)
		{
			return default(Vector4);
		}

		[Token(Token = "0x60017E3")]
		[Address(RVA = "0xB88B34", Offset = "0xB88B34", VA = "0xB88B34")]
		public static float PackToFloat(this Color color, int floatPackingPrecision)
		{
			return default(float);
		}

		[Token(Token = "0x60017E4")]
		[Address(RVA = "0xB80D74", Offset = "0xB80D74", VA = "0xB80D74")]
		public static FloatPackingPrecision GetFloatPackingPrecision()
		{
			return default(FloatPackingPrecision);
		}

		[Token(Token = "0x60017E5")]
		[Address(RVA = "0xB88C88", Offset = "0xB88C88", VA = "0xB88C88")]
		public static void MarkCurrentSceneDirty()
		{
		}

		[Token(Token = "0x60017E6")]
		[Address(RVA = "0xB88C8C", Offset = "0xB88C8C", VA = "0xB88C8C")]
		public static void MarkObjectDirty(UnityEngine.Object obj)
		{
		}
	}
	[Token(Token = "0x20003A3")]
	public static class Version
	{
		[Token(Token = "0x4001575")]
		public const int Current = 1890;
	}
	[Token(Token = "0x20003A4")]
	[ExecuteInEditMode]
	[DisallowMultipleComponent]
	[RequireComponent(typeof(VolumetricLightBeam))]
	[HelpURL("http://saladgamer.com/vlb-doc/comp-dustparticles/")]
	public class VolumetricDustParticles : MonoBehaviour
	{
		[Token(Token = "0x4001576")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Range(0f, 1f)]
		public float alpha;

		[Token(Token = "0x4001577")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(0.0001f, 0.1f)]
		public float size;

		[Token(Token = "0x4001578")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public ParticlesDirection direction;

		[Token(Token = "0x4001579")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 velocity;

		[Token(Token = "0x400157A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Obsolete("Use 'velocity' instead")]
		public float speed;

		[Token(Token = "0x400157B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float density;

		[Token(Token = "0x400157C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 1f)]
		public float spawnMinDistance;

		[Token(Token = "0x400157D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 1f)]
		public float spawnMaxDistance;

		[Token(Token = "0x400157E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool cullingEnabled;

		[Token(Token = "0x400157F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float cullingMaxDistance;

		[Token(Token = "0x4001581")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool isFeatureSupported;

		[Token(Token = "0x4001582")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private ParticleSystem m_Particles;

		[Token(Token = "0x4001583")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ParticleSystemRenderer m_Renderer;

		[Token(Token = "0x4001584")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		private static bool ms_NoMainCameraLogged;

		[Token(Token = "0x4001585")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Camera ms_MainCamera;

		[Token(Token = "0x4001586")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private VolumetricLightBeam m_Master;

		[Token(Token = "0x1700028C")]
		public bool isCulled
		{
			[Token(Token = "0x60017E7")]
			[Address(RVA = "0xB88C90", Offset = "0xB88C90", VA = "0xB88C90")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60017E8")]
			[Address(RVA = "0xB88C98", Offset = "0xB88C98", VA = "0xB88C98")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700028D")]
		public bool particlesAreInstantiated
		{
			[Token(Token = "0x60017E9")]
			[Address(RVA = "0xB88CA4", Offset = "0xB88CA4", VA = "0xB88CA4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700028E")]
		public int particlesCurrentCount
		{
			[Token(Token = "0x60017EA")]
			[Address(RVA = "0xB88D00", Offset = "0xB88D00", VA = "0xB88D00")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x1700028F")]
		public int particlesMaxCount
		{
			[Token(Token = "0x60017EB")]
			[Address(RVA = "0xB88D84", Offset = "0xB88D84", VA = "0xB88D84")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x17000290")]
		public Camera mainCamera
		{
			[Token(Token = "0x60017EC")]
			[Address(RVA = "0xB88E20", Offset = "0xB88E20", VA = "0xB88E20")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60017ED")]
		[Address(RVA = "0xB89024", Offset = "0xB89024", VA = "0xB89024")]
		private void Start()
		{
		}

		[Token(Token = "0x60017EE")]
		[Address(RVA = "0xB890F4", Offset = "0xB890F4", VA = "0xB890F4")]
		private void InstantiateParticleSystem()
		{
		}

		[Token(Token = "0x60017EF")]
		[Address(RVA = "0xB89358", Offset = "0xB89358", VA = "0xB89358")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60017F0")]
		[Address(RVA = "0xB892AC", Offset = "0xB892AC", VA = "0xB892AC")]
		private void SetActiveAndPlay()
		{
		}

		[Token(Token = "0x60017F1")]
		[Address(RVA = "0xB89A1C", Offset = "0xB89A1C", VA = "0xB89A1C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x60017F2")]
		[Address(RVA = "0xB89AAC", Offset = "0xB89AAC", VA = "0xB89AAC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60017F3")]
		[Address(RVA = "0xB89B4C", Offset = "0xB89B4C", VA = "0xB89B4C")]
		private void Update()
		{
		}

		[Token(Token = "0x60017F4")]
		[Address(RVA = "0xB8935C", Offset = "0xB8935C", VA = "0xB8935C")]
		private void SetParticleProperties()
		{
		}

		[Token(Token = "0x60017F5")]
		[Address(RVA = "0xB890BC", Offset = "0xB890BC", VA = "0xB890BC")]
		private void HandleBackwardCompatibility(int serializedVersion, int newVersion)
		{
		}

		[Token(Token = "0x60017F6")]
		[Address(RVA = "0xB89B74", Offset = "0xB89B74", VA = "0xB89B74")]
		private void UpdateCulling()
		{
		}

		[Token(Token = "0x60017F7")]
		[Address(RVA = "0xB89EC8", Offset = "0xB89EC8", VA = "0xB89EC8")]
		public VolumetricDustParticles()
		{
		}
	}
	[Token(Token = "0x20003A5")]
	[HelpURL("http://saladgamer.com/vlb-doc/comp-lightbeam/")]
	[SelectionBase]
	[DisallowMultipleComponent]
	[ExecuteInEditMode]
	public class VolumetricLightBeam : MonoBehaviour
	{
		[Token(Token = "0x20003A6")]
		public delegate void OnWillCameraRenderCB(Camera cam);

		[Token(Token = "0x20003A7")]
		public delegate void OnBeamGeometryInitialized();

		[Token(Token = "0x20003A8")]
		[CompilerGenerated]
		private sealed class <CoPlaytimeUpdate>d__181 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40015BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40015BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40015BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VolumetricLightBeam <>4__this;

			[Token(Token = "0x170002C0")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600185D")]
				[Address(RVA = "0xB8B430", Offset = "0xB8B430", VA = "0xB8B430", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170002C1")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600185F")]
				[Address(RVA = "0xB8B478", Offset = "0xB8B478", VA = "0xB8B478", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600185A")]
			[Address(RVA = "0xB8AEF0", Offset = "0xB8AEF0", VA = "0xB8AEF0")]
			[DebuggerHidden]
			public <CoPlaytimeUpdate>d__181(int <>1__state)
			{
			}

			[Token(Token = "0x600185B")]
			[Address(RVA = "0xB8B3AC", Offset = "0xB8B3AC", VA = "0xB8B3AC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600185C")]
			[Address(RVA = "0xB8B3B0", Offset = "0xB8B3B0", VA = "0xB8B3B0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600185E")]
			[Address(RVA = "0xB8B438", Offset = "0xB8B438", VA = "0xB8B438", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001587")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool colorFromLight;

		[Token(Token = "0x4001588")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public ColorMode colorMode;

		[Token(Token = "0x4001589")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[ColorUsage(false, true)]
		[FormerlySerializedAs("colorValue")]
		public Color color;

		[Token(Token = "0x400158A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Gradient colorGradient;

		[Token(Token = "0x400158B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool intensityFromLight;

		[Token(Token = "0x400158C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		public bool intensityModeAdvanced;

		[Token(Token = "0x400158D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 8f)]
		[FormerlySerializedAs("alphaInside")]
		public float intensityInside;

		[Token(Token = "0x400158E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[FormerlySerializedAs("alphaOutside")]
		[FormerlySerializedAs("alpha")]
		[Range(0f, 8f)]
		public float intensityOutside;

		[Token(Token = "0x400158F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public BlendingMode blendingMode;

		[Token(Token = "0x4001590")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[FormerlySerializedAs("angleFromLight")]
		public bool spotAngleFromLight;

		[Token(Token = "0x4001591")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Range(0.1f, 179.9f)]
		public float spotAngle;

		[Token(Token = "0x4001592")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[FormerlySerializedAs("radiusStart")]
		public float coneRadiusStart;

		[Token(Token = "0x4001593")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public ShaderAccuracy shaderAccuracy;

		[Token(Token = "0x4001594")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public MeshType geomMeshType;

		[Token(Token = "0x4001595")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[FormerlySerializedAs("geomSides")]
		public int geomCustomSides;

		[Token(Token = "0x4001596")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int geomCustomSegments;

		[Token(Token = "0x4001597")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public Vector3 skewingLocalForwardDirection;

		[Token(Token = "0x4001598")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Transform clippingPlaneTransform;

		[Token(Token = "0x4001599")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool geomCap;

		[Token(Token = "0x400159A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		[FormerlySerializedAs("fadeEndFromLight")]
		public bool fallOffEndFromLight;

		[Token(Token = "0x400159B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public AttenuationEquation attenuationEquation;

		[Token(Token = "0x400159C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Range(0f, 1f)]
		public float attenuationCustomBlending;

		[Token(Token = "0x400159D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[FormerlySerializedAs("fadeStart")]
		public float fallOffStart;

		[Token(Token = "0x400159E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[FormerlySerializedAs("fadeEnd")]
		public float fallOffEnd;

		[Token(Token = "0x400159F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float depthBlendDistance;

		[Token(Token = "0x40015A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float cameraClippingDistance;

		[Token(Token = "0x40015A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Range(0f, 1f)]
		public float glareFrontal;

		[Token(Token = "0x40015A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Range(0f, 1f)]
		public float glareBehind;

		[Token(Token = "0x40015A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[FormerlySerializedAs("fresnelPowOutside")]
		public float fresnelPow;

		[Token(Token = "0x40015A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public NoiseMode noiseMode;

		[Token(Token = "0x40015A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[Range(0f, 1f)]
		public float noiseIntensity;

		[Token(Token = "0x40015A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public bool noiseScaleUseGlobal;

		[Token(Token = "0x40015A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[Range(0.01f, 2f)]
		public float noiseScaleLocal;

		[Token(Token = "0x40015A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool noiseVelocityUseGlobal;

		[Token(Token = "0x40015A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public Vector3 noiseVelocityLocal;

		[Token(Token = "0x40015AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Dimensions dimensions;

		[Token(Token = "0x40015AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public Vector2 tiltFactor;

		[Token(Token = "0x40015AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private bool m_IsDynamicOcclusionEnabled;

		[Token(Token = "0x40015AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private OnBeamGeometryInitialized m_OnBeamGeometryInitialized;

		[Token(Token = "0x40015B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		private int pluginVersion;

		[Token(Token = "0x40015B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		[SerializeField]
		[FormerlySerializedAs("trackChangesDuringPlaytime")]
		private bool _TrackChangesDuringPlaytime;

		[Token(Token = "0x40015B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[SerializeField]
		private int _SortingLayerID;

		[Token(Token = "0x40015B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[SerializeField]
		private int _SortingOrder;

		[Token(Token = "0x40015B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[SerializeField]
		[FormerlySerializedAs("fadeOutBegin")]
		private float _FadeOutBegin;

		[Token(Token = "0x40015B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		[SerializeField]
		[FormerlySerializedAs("fadeOutEnd")]
		private float _FadeOutEnd;

		[Token(Token = "0x40015B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private BeamGeometry m_BeamGeom;

		[Token(Token = "0x40015B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private Coroutine m_CoPlaytimeUpdate;

		[Token(Token = "0x40015B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Light _CachedLight;

		[Token(Token = "0x17000291")]
		[Obsolete("Use 'intensityGlobal' or 'intensityInside' instead")]
		public float alphaInside
		{
			[Token(Token = "0x60017F9")]
			[Address(RVA = "0xB89F5C", Offset = "0xB89F5C", VA = "0xB89F5C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60017FA")]
			[Address(RVA = "0xB89F64", Offset = "0xB89F64", VA = "0xB89F64")]
			set
			{
			}
		}

		[Token(Token = "0x17000292")]
		[Obsolete("Use 'intensityGlobal' or 'intensityOutside' instead")]
		public float alphaOutside
		{
			[Token(Token = "0x60017FB")]
			[Address(RVA = "0xB89F6C", Offset = "0xB89F6C", VA = "0xB89F6C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60017FC")]
			[Address(RVA = "0xB89F74", Offset = "0xB89F74", VA = "0xB89F74")]
			set
			{
			}
		}

		[Token(Token = "0x17000293")]
		public float intensityGlobal
		{
			[Token(Token = "0x60017FD")]
			[Address(RVA = "0xB89F7C", Offset = "0xB89F7C", VA = "0xB89F7C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60017FE")]
			[Address(RVA = "0xB89F84", Offset = "0xB89F84", VA = "0xB89F84")]
			set
			{
			}
		}

		[Token(Token = "0x17000294")]
		public float coneAngle
		{
			[Token(Token = "0x60017FF")]
			[Address(RVA = "0xB81974", Offset = "0xB81974", VA = "0xB81974")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000295")]
		public float coneRadiusEnd
		{
			[Token(Token = "0x6001800")]
			[Address(RVA = "0xB80AF8", Offset = "0xB80AF8", VA = "0xB80AF8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000296")]
		public float coneVolume
		{
			[Token(Token = "0x6001801")]
			[Address(RVA = "0xB89F8C", Offset = "0xB89F8C", VA = "0xB89F8C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000297")]
		public float coneApexOffsetZ
		{
			[Token(Token = "0x6001802")]
			[Address(RVA = "0xB819E8", Offset = "0xB819E8", VA = "0xB819E8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000298")]
		public int geomSides
		{
			[Token(Token = "0x6001803")]
			[Address(RVA = "0xB8A008", Offset = "0xB8A008", VA = "0xB8A008")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001804")]
			[Address(RVA = "0xB8A040", Offset = "0xB8A040", VA = "0xB8A040")]
			set
			{
			}
		}

		[Token(Token = "0x17000299")]
		public int geomSegments
		{
			[Token(Token = "0x6001805")]
			[Address(RVA = "0xB8A0BC", Offset = "0xB8A0BC", VA = "0xB8A0BC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001806")]
			[Address(RVA = "0xB8A0F4", Offset = "0xB8A0F4", VA = "0xB8A0F4")]
			set
			{
			}
		}

		[Token(Token = "0x1700029A")]
		public Vector3 skewingLocalForwardDirectionNormalized
		{
			[Token(Token = "0x6001807")]
			[Address(RVA = "0xB81DAC", Offset = "0xB81DAC", VA = "0xB81DAC")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x1700029B")]
		public Vector4 additionalClippingPlane
		{
			[Token(Token = "0x6001808")]
			[Address(RVA = "0xB81B40", Offset = "0xB81B40", VA = "0xB81B40")]
			get
			{
				return default(Vector4);
			}
		}

		[Token(Token = "0x1700029C")]
		public bool canHaveMeshSkewing
		{
			[Token(Token = "0x6001809")]
			[Address(RVA = "0xB87DA4", Offset = "0xB87DA4", VA = "0xB87DA4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700029D")]
		public bool hasMeshSkewing
		{
			[Token(Token = "0x600180A")]
			[Address(RVA = "0xB80E04", Offset = "0xB80E04", VA = "0xB80E04")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700029E")]
		[Obsolete("Use 'fallOffEndFromLight' instead")]
		public bool fadeEndFromLight
		{
			[Token(Token = "0x600180B")]
			[Address(RVA = "0xB8A170", Offset = "0xB8A170", VA = "0xB8A170")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600180C")]
			[Address(RVA = "0xB8A178", Offset = "0xB8A178", VA = "0xB8A178")]
			set
			{
			}
		}

		[Token(Token = "0x1700029F")]
		public float attenuationLerpLinearQuad
		{
			[Token(Token = "0x600180D")]
			[Address(RVA = "0xB81B18", Offset = "0xB81B18", VA = "0xB81B18")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002A0")]
		[Obsolete("Use 'fallOffStart' instead")]
		public float fadeStart
		{
			[Token(Token = "0x600180E")]
			[Address(RVA = "0xB8A184", Offset = "0xB8A184", VA = "0xB8A184")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600180F")]
			[Address(RVA = "0xB8A18C", Offset = "0xB8A18C", VA = "0xB8A18C")]
			set
			{
			}
		}

		[Token(Token = "0x170002A1")]
		[Obsolete("Use 'fallOffEnd' instead")]
		public float fadeEnd
		{
			[Token(Token = "0x6001810")]
			[Address(RVA = "0xB8A194", Offset = "0xB8A194", VA = "0xB8A194")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001811")]
			[Address(RVA = "0xB8A19C", Offset = "0xB8A19C", VA = "0xB8A19C")]
			set
			{
			}
		}

		[Token(Token = "0x170002A2")]
		public float maxGeometryDistance
		{
			[Token(Token = "0x6001812")]
			[Address(RVA = "0xB80B48", Offset = "0xB80B48", VA = "0xB80B48")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002A3")]
		public bool isNoiseEnabled
		{
			[Token(Token = "0x6001813")]
			[Address(RVA = "0xB7E530", Offset = "0xB7E530", VA = "0xB7E530")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002A4")]
		[Obsolete("Use 'noiseMode' instead")]
		public bool noiseEnabled
		{
			[Token(Token = "0x6001814")]
			[Address(RVA = "0xB8A1A4", Offset = "0xB8A1A4", VA = "0xB8A1A4")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001815")]
			[Address(RVA = "0xB8A1B4", Offset = "0xB8A1B4", VA = "0xB8A1B4")]
			set
			{
			}
		}

		[Token(Token = "0x170002A5")]
		public float fadeOutBegin
		{
			[Token(Token = "0x6001816")]
			[Address(RVA = "0xB8A1D0", Offset = "0xB8A1D0", VA = "0xB8A1D0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001817")]
			[Address(RVA = "0xB8A1D8", Offset = "0xB8A1D8", VA = "0xB8A1D8")]
			set
			{
			}
		}

		[Token(Token = "0x170002A6")]
		public float fadeOutEnd
		{
			[Token(Token = "0x6001818")]
			[Address(RVA = "0xB8A234", Offset = "0xB8A234", VA = "0xB8A234")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001819")]
			[Address(RVA = "0xB8A23C", Offset = "0xB8A23C", VA = "0xB8A23C")]
			set
			{
			}
		}

		[Token(Token = "0x170002A7")]
		public bool isFadeOutEnabled
		{
			[Token(Token = "0x600181A")]
			[Address(RVA = "0xB7E73C", Offset = "0xB7E73C", VA = "0xB7E73C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002A8")]
		public bool isTilted
		{
			[Token(Token = "0x600181B")]
			[Address(RVA = "0xB8A244", Offset = "0xB8A244", VA = "0xB8A244")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002A9")]
		public int sortingLayerID
		{
			[Token(Token = "0x600181C")]
			[Address(RVA = "0xB8A2AC", Offset = "0xB8A2AC", VA = "0xB8A2AC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x600181D")]
			[Address(RVA = "0xB8A2B4", Offset = "0xB8A2B4", VA = "0xB8A2B4")]
			set
			{
			}
		}

		[Token(Token = "0x170002AA")]
		public string sortingLayerName
		{
			[Token(Token = "0x600181E")]
			[Address(RVA = "0xB8A354", Offset = "0xB8A354", VA = "0xB8A354")]
			get
			{
				return null;
			}
			[Token(Token = "0x600181F")]
			[Address(RVA = "0xB8A360", Offset = "0xB8A360", VA = "0xB8A360")]
			set
			{
			}
		}

		[Token(Token = "0x170002AB")]
		public int sortingOrder
		{
			[Token(Token = "0x6001820")]
			[Address(RVA = "0xB8A384", Offset = "0xB8A384", VA = "0xB8A384")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001821")]
			[Address(RVA = "0xB8A38C", Offset = "0xB8A38C", VA = "0xB8A38C")]
			set
			{
			}
		}

		[Token(Token = "0x170002AC")]
		public bool trackChangesDuringPlaytime
		{
			[Token(Token = "0x6001822")]
			[Address(RVA = "0xB8A42C", Offset = "0xB8A42C", VA = "0xB8A42C")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001823")]
			[Address(RVA = "0xB8A434", Offset = "0xB8A434", VA = "0xB8A434")]
			set
			{
			}
		}

		[Token(Token = "0x170002AD")]
		public bool isCurrentlyTrackingChanges
		{
			[Token(Token = "0x6001824")]
			[Address(RVA = "0xB8A488", Offset = "0xB8A488", VA = "0xB8A488")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002AE")]
		public bool hasGeometry
		{
			[Token(Token = "0x6001825")]
			[Address(RVA = "0xB89D58", Offset = "0xB89D58", VA = "0xB89D58")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002AF")]
		public Bounds bounds
		{
			[Token(Token = "0x6001826")]
			[Address(RVA = "0xB89DB8", Offset = "0xB89DB8", VA = "0xB89DB8")]
			get
			{
				return default(Bounds);
			}
		}

		[Token(Token = "0x170002B0")]
		public int blendingModeAsInt
		{
			[Token(Token = "0x6001827")]
			[Address(RVA = "0xB8A498", Offset = "0xB8A498", VA = "0xB8A498")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002B1")]
		public Quaternion beamInternalLocalRotation
		{
			[Token(Token = "0x6001828")]
			[Address(RVA = "0xB80B68", Offset = "0xB80B68", VA = "0xB80B68")]
			get
			{
				return default(Quaternion);
			}
		}

		[Token(Token = "0x170002B2")]
		public Vector3 beamLocalForward
		{
			[Token(Token = "0x6001829")]
			[Address(RVA = "0xB84368", Offset = "0xB84368", VA = "0xB84368")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170002B3")]
		public Vector3 lossyScale
		{
			[Token(Token = "0x600182A")]
			[Address(RVA = "0xB84404", Offset = "0xB84404", VA = "0xB84404")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170002B4")]
		public float raycastDistance
		{
			[Token(Token = "0x600182B")]
			[Address(RVA = "0xB85094", Offset = "0xB85094", VA = "0xB85094")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x170002B5")]
		public Vector3 raycastGlobalForward
		{
			[Token(Token = "0x600182C")]
			[Address(RVA = "0xB85F3C", Offset = "0xB85F3C", VA = "0xB85F3C")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170002B6")]
		public Vector3 raycastGlobalUp
		{
			[Token(Token = "0x600182D")]
			[Address(RVA = "0xB85980", Offset = "0xB85980", VA = "0xB85980")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170002B7")]
		public Vector3 raycastGlobalRight
		{
			[Token(Token = "0x600182E")]
			[Address(RVA = "0xB859F0", Offset = "0xB859F0", VA = "0xB859F0")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170002B8")]
		public MaterialManager.DynamicOcclusion _INTERNAL_DynamicOcclusionMode
		{
			[Token(Token = "0x600182F")]
			[Address(RVA = "0xB8A570", Offset = "0xB8A570", VA = "0xB8A570")]
			[CompilerGenerated]
			get
			{
				return default(MaterialManager.DynamicOcclusion);
			}
			[Token(Token = "0x6001830")]
			[Address(RVA = "0xB8A578", Offset = "0xB8A578", VA = "0xB8A578")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170002B9")]
		public MaterialManager.DynamicOcclusion _INTERNAL_EnabledDynamicOcclusionMode
		{
			[Token(Token = "0x6001831")]
			[Address(RVA = "0xB80DEC", Offset = "0xB80DEC", VA = "0xB80DEC")]
			get
			{
				return default(MaterialManager.DynamicOcclusion);
			}
		}

		[Token(Token = "0x170002BA")]
		public int _INTERNAL_pluginVersion
		{
			[Token(Token = "0x6001838")]
			[Address(RVA = "0xB8A5AC", Offset = "0xB8A5AC", VA = "0xB8A5AC")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002BB")]
		public uint _INTERNAL_InstancedMaterialGroupID
		{
			[Token(Token = "0x600183B")]
			[Address(RVA = "0xB8A648", Offset = "0xB8A648", VA = "0xB8A648")]
			[CompilerGenerated]
			get
			{
				return default(uint);
			}
			[Token(Token = "0x600183C")]
			[Address(RVA = "0xB8A650", Offset = "0xB8A650", VA = "0xB8A650")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x170002BC")]
		public string meshStats
		{
			[Token(Token = "0x600183D")]
			[Address(RVA = "0xB8A658", Offset = "0xB8A658", VA = "0xB8A658")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002BD")]
		public int meshVerticesCount
		{
			[Token(Token = "0x600183E")]
			[Address(RVA = "0xB8A7F8", Offset = "0xB8A7F8", VA = "0xB8A7F8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002BE")]
		public int meshTrianglesCount
		{
			[Token(Token = "0x600183F")]
			[Address(RVA = "0xB8A8B0", Offset = "0xB8A8B0", VA = "0xB8A8B0")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002BF")]
		private Light lightSpotAttached
		{
			[Token(Token = "0x6001840")]
			[Address(RVA = "0xB8A984", Offset = "0xB8A984", VA = "0xB8A984")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x14000013")]
		public event OnWillCameraRenderCB onWillCameraRenderThisBeam
		{
			[Token(Token = "0x6001833")]
			[Address(RVA = "0xB83A8C", Offset = "0xB83A8C", VA = "0xB83A8C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001834")]
			[Address(RVA = "0xB83D44", Offset = "0xB83D44", VA = "0xB83D44")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001832")]
		[Address(RVA = "0xB83680", Offset = "0xB83680", VA = "0xB83680")]
		public void _INTERNAL_SetDynamicOcclusionCallback(string shaderKeyword, MaterialModifier.Callback cb)
		{
		}

		[Token(Token = "0x6001835")]
		[Address(RVA = "0xB8265C", Offset = "0xB8265C", VA = "0xB8265C")]
		public void _INTERNAL_OnWillCameraRenderThisBeam(Camera cam)
		{
		}

		[Token(Token = "0x6001836")]
		[Address(RVA = "0xB83BE4", Offset = "0xB83BE4", VA = "0xB83BE4")]
		public void RegisterOnBeamGeometryInitializedCallback(OnBeamGeometryInitialized cb)
		{
		}

		[Token(Token = "0x6001837")]
		[Address(RVA = "0xB8A580", Offset = "0xB8A580", VA = "0xB8A580")]
		private void CallOnBeamGeometryInitializedCallback()
		{
		}

		[Token(Token = "0x6001839")]
		[Address(RVA = "0xB8A1E0", Offset = "0xB8A1E0", VA = "0xB8A1E0")]
		private void SetFadeOutValue(ref float propToChange, float value)
		{
		}

		[Token(Token = "0x600183A")]
		[Address(RVA = "0xB8A5B4", Offset = "0xB8A5B4", VA = "0xB8A5B4")]
		private void OnFadeOutStateChanged()
		{
		}

		[Token(Token = "0x6001841")]
		[Address(RVA = "0xB8AA68", Offset = "0xB8AA68", VA = "0xB8AA68")]
		public float GetInsideBeamFactor(Vector3 posWS)
		{
			return default(float);
		}

		[Token(Token = "0x6001842")]
		[Address(RVA = "0xB82678", Offset = "0xB82678", VA = "0xB82678")]
		public float GetInsideBeamFactorFromObjectSpacePos(Vector3 posOS)
		{
			return default(float);
		}

		[Token(Token = "0x6001843")]
		[Address(RVA = "0xB8AABC", Offset = "0xB8AABC", VA = "0xB8AABC")]
		[Obsolete("Use 'GenerateGeometry()' instead")]
		public void Generate()
		{
		}

		[Token(Token = "0x6001844")]
		[Address(RVA = "0xB8AAC8", Offset = "0xB8AAC8", VA = "0xB8AAC8", Slot = "4")]
		public virtual void GenerateGeometry()
		{
		}

		[Token(Token = "0x6001845")]
		[Address(RVA = "0xB8ACE8", Offset = "0xB8ACE8", VA = "0xB8ACE8", Slot = "5")]
		public virtual void UpdateAfterManualPropertyChange()
		{
		}

		[Token(Token = "0x6001846")]
		[Address(RVA = "0xB8AD6C", Offset = "0xB8AD6C", VA = "0xB8AD6C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001847")]
		[Address(RVA = "0xB8AD78", Offset = "0xB8AD78", VA = "0xB8AD78")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001848")]
		[Address(RVA = "0xB8AE00", Offset = "0xB8AE00", VA = "0xB8AE00")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001849")]
		[Address(RVA = "0xB8A440", Offset = "0xB8A440", VA = "0xB8A440")]
		private void StartPlaytimeUpdateIfNeeded()
		{
		}

		[Token(Token = "0x600184A")]
		[Address(RVA = "0xB8AE88", Offset = "0xB8AE88", VA = "0xB8AE88")]
		[IteratorStateMachine(typeof(<CoPlaytimeUpdate>d__181))]
		private IEnumerator CoPlaytimeUpdate()
		{
			return null;
		}

		[Token(Token = "0x600184B")]
		[Address(RVA = "0xB8AF18", Offset = "0xB8AF18", VA = "0xB8AF18")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600184C")]
		[Address(RVA = "0xB8AF1C", Offset = "0xB8AF1C", VA = "0xB8AF1C")]
		private void DestroyBeam()
		{
		}

		[Token(Token = "0x600184D")]
		[Address(RVA = "0xB8AFBC", Offset = "0xB8AFBC", VA = "0xB8AFBC")]
		private void AssignPropertiesFromSpotLight(Light lightSpot)
		{
		}

		[Token(Token = "0x600184E")]
		[Address(RVA = "0xB8B0AC", Offset = "0xB8B0AC", VA = "0xB8B0AC")]
		private void ClampProperties()
		{
		}

		[Token(Token = "0x600184F")]
		[Address(RVA = "0xB8ACC4", Offset = "0xB8ACC4", VA = "0xB8ACC4")]
		private void ValidateProperties()
		{
		}

		[Token(Token = "0x6001850")]
		[Address(RVA = "0xB8ABE8", Offset = "0xB8ABE8", VA = "0xB8ABE8")]
		private void HandleBackwardCompatibility(int serializedVersion, int newVersion)
		{
		}

		[Token(Token = "0x6001851")]
		[Address(RVA = "0xB8B1DC", Offset = "0xB8B1DC", VA = "0xB8B1DC")]
		public VolumetricLightBeam()
		{
		}
	}
}
namespace VLB_Samples
{
	[Token(Token = "0x20003A9")]
	[RequireComponent(typeof(Camera))]
	public class CameraToggleBeamVisibility : MonoBehaviour
	{
		[Token(Token = "0x40015BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private KeyCode m_KeyCode;

		[Token(Token = "0x6001860")]
		[Address(RVA = "0xB8B480", Offset = "0xB8B480", VA = "0xB8B480")]
		private void Update()
		{
		}

		[Token(Token = "0x6001861")]
		[Address(RVA = "0xB8B540", Offset = "0xB8B540", VA = "0xB8B540")]
		public CameraToggleBeamVisibility()
		{
		}
	}
	[Token(Token = "0x20003AA")]
	[RequireComponent(typeof(Collider), typeof(Rigidbody), typeof(MeshRenderer))]
	public class CheckIfInsideBeam : MonoBehaviour
	{
		[Token(Token = "0x40015BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool isInsideBeam;

		[Token(Token = "0x40015BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Material m_Material;

		[Token(Token = "0x40015C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Collider m_Collider;

		[Token(Token = "0x6001862")]
		[Address(RVA = "0xB8B550", Offset = "0xB8B550", VA = "0xB8B550")]
		private void Start()
		{
		}

		[Token(Token = "0x6001863")]
		[Address(RVA = "0xB8B61C", Offset = "0xB8B61C", VA = "0xB8B61C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001864")]
		[Address(RVA = "0xB8B6D0", Offset = "0xB8B6D0", VA = "0xB8B6D0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001865")]
		[Address(RVA = "0xB8B6D8", Offset = "0xB8B6D8", VA = "0xB8B6D8")]
		private void OnTriggerStay(Collider trigger)
		{
		}

		[Token(Token = "0x6001866")]
		[Address(RVA = "0xB8B790", Offset = "0xB8B790", VA = "0xB8B790")]
		public CheckIfInsideBeam()
		{
		}
	}
	[Token(Token = "0x20003AB")]
	public class FeaturesNotSupportedMessage : MonoBehaviour
	{
		[Token(Token = "0x6001867")]
		[Address(RVA = "0xB8B798", Offset = "0xB8B798", VA = "0xB8B798")]
		private void Start()
		{
		}

		[Token(Token = "0x6001868")]
		[Address(RVA = "0xB8B800", Offset = "0xB8B800", VA = "0xB8B800")]
		public FeaturesNotSupportedMessage()
		{
		}
	}
	[Token(Token = "0x20003AC")]
	public class FreeCameraController : MonoBehaviour
	{
		[Token(Token = "0x40015C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float cameraSensitivity;

		[Token(Token = "0x40015C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float speedNormal;

		[Token(Token = "0x40015C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float speedFactorSlow;

		[Token(Token = "0x40015C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float speedFactorFast;

		[Token(Token = "0x40015C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float speedClimb;

		[Token(Token = "0x40015C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float rotationH;

		[Token(Token = "0x40015C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float rotationV;

		[Token(Token = "0x40015C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool m_UseMouseView;

		[Token(Token = "0x170002C2")]
		private bool useMouseView
		{
			[Token(Token = "0x6001869")]
			[Address(RVA = "0xB8B808", Offset = "0xB8B808", VA = "0xB8B808")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600186A")]
			[Address(RVA = "0xB8B810", Offset = "0xB8B810", VA = "0xB8B810")]
			set
			{
			}
		}

		[Token(Token = "0x600186B")]
		[Address(RVA = "0xB8B840", Offset = "0xB8B840", VA = "0xB8B840")]
		private void Start()
		{
		}

		[Token(Token = "0x600186C")]
		[Address(RVA = "0xB8B8D0", Offset = "0xB8B8D0", VA = "0xB8B8D0")]
		private void Update()
		{
		}

		[Token(Token = "0x600186D")]
		[Address(RVA = "0xB8BEAC", Offset = "0xB8BEAC", VA = "0xB8BEAC")]
		public FreeCameraController()
		{
		}
	}
	[Token(Token = "0x20003AD")]
	public class LightGenerator : MonoBehaviour
	{
		[Token(Token = "0x40015C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		[Range(1f, 100f)]
		private int CountX;

		[Token(Token = "0x40015CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Range(1f, 100f)]
		[SerializeField]
		private int CountY;

		[Token(Token = "0x40015CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private float OffsetUnits;

		[Token(Token = "0x40015CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[SerializeField]
		private float PositionY;

		[Token(Token = "0x40015CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private bool NoiseEnabled;

		[Token(Token = "0x40015CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		[SerializeField]
		private bool AddLight;

		[Token(Token = "0x600186E")]
		[Address(RVA = "0xB8BED0", Offset = "0xB8BED0", VA = "0xB8BED0")]
		public void Generate()
		{
		}

		[Token(Token = "0x600186F")]
		[Address(RVA = "0xB8C510", Offset = "0xB8C510", VA = "0xB8C510")]
		public LightGenerator()
		{
		}
	}
	[Token(Token = "0x20003AE")]
	public class Rotater : MonoBehaviour
	{
		[Token(Token = "0x40015CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[FormerlySerializedAs("m_EulerSpeed")]
		public Vector3 EulerSpeed;

		[Token(Token = "0x6001870")]
		[Address(RVA = "0xB8D52C", Offset = "0xB8D52C", VA = "0xB8D52C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001871")]
		[Address(RVA = "0xB8D5FC", Offset = "0xB8D5FC", VA = "0xB8D5FC")]
		public Rotater()
		{
		}
	}
}
namespace MK.Glow
{
	[Token(Token = "0x20003AF")]
	internal abstract class CameraData
	{
		[Token(Token = "0x40015D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		internal int width;

		[Token(Token = "0x40015D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal int height;

		[Token(Token = "0x40015D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal bool stereoEnabled;

		[Token(Token = "0x40015D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		internal float aspect;

		[Token(Token = "0x40015D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		internal Matrix4x4 worldToCameraMatrix;

		[Token(Token = "0x6001872")]
		[Address(RVA = "0xB8D65C", Offset = "0xB8D65C", VA = "0xB8D65C")]
		protected CameraData()
		{
		}
	}
	[Token(Token = "0x20003B0")]
	public enum Workflow
	{
		[Token(Token = "0x40015D6")]
		Threshold,
		[Token(Token = "0x40015D7")]
		Selective,
		[Token(Token = "0x40015D8")]
		Natural
	}
	[Token(Token = "0x20003B1")]
	public enum AntiFlickerMode
	{
		[Token(Token = "0x40015DA")]
		Balanced,
		[Token(Token = "0x40015DB")]
		Strong
	}
	[Token(Token = "0x20003B2")]
	public enum Quality
	{
		[Token(Token = "0x40015DD")]
		Ultra = 1,
		[Token(Token = "0x40015DE")]
		High = 2,
		[Token(Token = "0x40015DF")]
		Medium = 4,
		[Token(Token = "0x40015E0")]
		Low = 8,
		[Token(Token = "0x40015E1")]
		VeryLow = 12
	}
	[Token(Token = "0x20003B3")]
	public enum DebugView
	{
		[Token(Token = "0x40015E3")]
		None,
		[Token(Token = "0x40015E4")]
		RawBloom,
		[Token(Token = "0x40015E5")]
		RawLensFlare,
		[Token(Token = "0x40015E6")]
		RawGlare,
		[Token(Token = "0x40015E7")]
		Bloom,
		[Token(Token = "0x40015E8")]
		LensFlare,
		[Token(Token = "0x40015E9")]
		Glare,
		[Token(Token = "0x40015EA")]
		Composite
	}
	[Token(Token = "0x20003B4")]
	public enum RenderPriority
	{
		[Token(Token = "0x40015EC")]
		Quality,
		[Token(Token = "0x40015ED")]
		Balanced,
		[Token(Token = "0x40015EE")]
		Performance
	}
	[Token(Token = "0x20003B5")]
	public enum LensFlareStyle
	{
		[Token(Token = "0x40015F0")]
		Custom,
		[Token(Token = "0x40015F1")]
		Average,
		[Token(Token = "0x40015F2")]
		MultiAverage,
		[Token(Token = "0x40015F3")]
		Old,
		[Token(Token = "0x40015F4")]
		OldFocused,
		[Token(Token = "0x40015F5")]
		Distorted
	}
	[Token(Token = "0x20003B6")]
	public enum GlareStyle
	{
		[Token(Token = "0x40015F7")]
		Custom,
		[Token(Token = "0x40015F8")]
		Line,
		[Token(Token = "0x40015F9")]
		Tri,
		[Token(Token = "0x40015FA")]
		Cross,
		[Token(Token = "0x40015FB")]
		DistortedCross,
		[Token(Token = "0x40015FC")]
		Star,
		[Token(Token = "0x40015FD")]
		Flake
	}
	[Token(Token = "0x20003B7")]
	internal struct RenderDimension : IDimension
	{
		[Token(Token = "0x170002C3")]
		public int width
		{
			[Token(Token = "0x6001874")]
			[Address(RVA = "0xB8D6D4", Offset = "0xB8D6D4", VA = "0xB8D6D4", Slot = "4")]
			[CompilerGenerated]
			readonly get
			{
				return default(int);
			}
			[Token(Token = "0x6001875")]
			[Address(RVA = "0xB8D6DC", Offset = "0xB8D6DC", VA = "0xB8D6DC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170002C4")]
		public int height
		{
			[Token(Token = "0x6001876")]
			[Address(RVA = "0xB8D6E4", Offset = "0xB8D6E4", VA = "0xB8D6E4", Slot = "5")]
			[CompilerGenerated]
			readonly get
			{
				return default(int);
			}
			[Token(Token = "0x6001877")]
			[Address(RVA = "0xB8D6EC", Offset = "0xB8D6EC", VA = "0xB8D6EC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170002C5")]
		public RenderDimension renderDimension
		{
			[Token(Token = "0x6001878")]
			[Address(RVA = "0xB8D6F4", Offset = "0xB8D6F4", VA = "0xB8D6F4", Slot = "6")]
			get
			{
				return default(RenderDimension);
			}
		}

		[Token(Token = "0x6001873")]
		[Address(RVA = "0xB8D6CC", Offset = "0xB8D6CC", VA = "0xB8D6CC")]
		public RenderDimension(int width, int height)
		{
		}
	}
	[Token(Token = "0x20003B8")]
	internal enum RenderPipeline
	{
		[Token(Token = "0x4001601")]
		Legacy,
		[Token(Token = "0x4001602")]
		SRP
	}
	[Token(Token = "0x20003B9")]
	public static class Compatibility
	{
		[Token(Token = "0x4001603")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static readonly bool _defaultHDRFormatSupported;

		[Token(Token = "0x4001604")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		private static readonly bool _11R11G10BFormatSupported;

		[Token(Token = "0x4001605")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		private static readonly bool _2A10R10G10BFormatSupported;

		[Token(Token = "0x4001606")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
		public static readonly bool IsSupported;

		[Token(Token = "0x6001879")]
		[Address(RVA = "0xB8D6FC", Offset = "0xB8D6FC", VA = "0xB8D6FC")]
		public static bool CheckGeometryShaderSupport()
		{
			return default(bool);
		}

		[Token(Token = "0x600187A")]
		[Address(RVA = "0xB8D75C", Offset = "0xB8D75C", VA = "0xB8D75C")]
		public static bool CheckComputeShaderSupport()
		{
			return default(bool);
		}

		[Token(Token = "0x600187B")]
		[Address(RVA = "0xB8D7A0", Offset = "0xB8D7A0", VA = "0xB8D7A0")]
		public static bool CheckLensFlareFeatureSupport()
		{
			return default(bool);
		}

		[Token(Token = "0x600187C")]
		[Address(RVA = "0xB8D898", Offset = "0xB8D898", VA = "0xB8D898")]
		public static bool CheckGlareFeatureSupport()
		{
			return default(bool);
		}

		[Token(Token = "0x600187D")]
		[Address(RVA = "0xB8D948", Offset = "0xB8D948", VA = "0xB8D948")]
		internal static RenderTextureFormat CheckSupportedRenderTextureFormat()
		{
			return default(RenderTextureFormat);
		}
	}
	[Token(Token = "0x20003BA")]
	internal sealed class ComputeShaderVariants
	{
		[Token(Token = "0x20003BB")]
		internal static class KeywordValues
		{
			[Token(Token = "0x4001608")]
			internal const int BLOOM = 1;

			[Token(Token = "0x4001609")]
			internal const int LENS_SURFACE = 1;

			[Token(Token = "0x400160A")]
			internal const int LENS_FLARE = 1;

			[Token(Token = "0x400160B")]
			internal const int GLARE = 4;

			[Token(Token = "0x400160C")]
			internal const int MK_NATURAL = 1;

			[Token(Token = "0x400160D")]
			internal const int RENDER_PRIORITY = 2;
		}

		[Token(Token = "0x20003BC")]
		internal struct KeywordState
		{
			[Token(Token = "0x400160E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int bloom;

			[Token(Token = "0x400160F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public int lensSurface;

			[Token(Token = "0x4001610")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public int lensFlare;

			[Token(Token = "0x4001611")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
			public int glare;

			[Token(Token = "0x4001612")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int natural;

			[Token(Token = "0x4001613")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public int renderPriority;

			[Token(Token = "0x6001881")]
			[Address(RVA = "0xB8DC90", Offset = "0xB8DC90", VA = "0xB8DC90")]
			public KeywordState(int bloom, int lensSurface, int lensFlare, int glare, int natural, int renderPriority)
			{
			}
		}

		[Token(Token = "0x4001607")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private Dictionary<KeywordState, int> variants;

		[Token(Token = "0x600187F")]
		[Address(RVA = "0xB8DAA0", Offset = "0xB8DAA0", VA = "0xB8DAA0")]
		internal void GetVariantNumber(KeywordState features, out int index)
		{
		}

		[Token(Token = "0x6001880")]
		[Address(RVA = "0xB8DB34", Offset = "0xB8DB34", VA = "0xB8DB34")]
		public ComputeShaderVariants(int offset)
		{
		}
	}
	[Token(Token = "0x20003BD")]
	internal sealed class Effect
	{
		[Token(Token = "0x20003BE")]
		internal enum ShaderRenderPass
		{
			[Token(Token = "0x4001655")]
			Copy,
			[Token(Token = "0x4001656")]
			Presample,
			[Token(Token = "0x4001657")]
			Downsample,
			[Token(Token = "0x4001658")]
			Upsample,
			[Token(Token = "0x4001659")]
			Composite,
			[Token(Token = "0x400165A")]
			Debug
		}

		[Token(Token = "0x20003BF")]
		internal enum MaterialKeywords
		{
			[Token(Token = "0x400165C")]
			Bloom,
			[Token(Token = "0x400165D")]
			LensSurface,
			[Token(Token = "0x400165E")]
			LensFlare,
			[Token(Token = "0x400165F")]
			Glare1,
			[Token(Token = "0x4001660")]
			DebugRawBloom,
			[Token(Token = "0x4001661")]
			DebugRawLensFlare,
			[Token(Token = "0x4001662")]
			DebugRawGlare,
			[Token(Token = "0x4001663")]
			DebugBloom,
			[Token(Token = "0x4001664")]
			DebugLensFlare,
			[Token(Token = "0x4001665")]
			DebugGlare,
			[Token(Token = "0x4001666")]
			DebugComposite,
			[Token(Token = "0x4001667")]
			LegacyBlit,
			[Token(Token = "0x4001668")]
			RenderPriorityQuality,
			[Token(Token = "0x4001669")]
			Natural,
			[Token(Token = "0x400166A")]
			Glare2,
			[Token(Token = "0x400166B")]
			Glare3,
			[Token(Token = "0x400166C")]
			Glare4,
			[Token(Token = "0x400166D")]
			Null,
			[Token(Token = "0x400166E")]
			RenderPriorityBalanced,
			[Token(Token = "0x400166F")]
			HQAntiFlickerFilter
		}

		[Token(Token = "0x20003C0")]
		internal struct Keyword
		{
			[Token(Token = "0x4001670")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal string name;

			[Token(Token = "0x4001671")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal bool enabled;

			[Token(Token = "0x60018AF")]
			[Address(RVA = "0xB8E0C4", Offset = "0xB8E0C4", VA = "0xB8E0C4")]
			internal Keyword(string name, bool enabled)
			{
			}
		}

		[Token(Token = "0x4001614")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Resources _resources;

		[Token(Token = "0x4001615")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static readonly Vector2 _referenceResolution;

		[Token(Token = "0x4001616")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static readonly float _referenceAspectRatio;

		[Token(Token = "0x4001617")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		private static readonly Vector2 _selectiveWorkflowThreshold;

		[Token(Token = "0x4001618")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private static readonly int _cArgBufferSize;

		[Token(Token = "0x4001619")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static readonly int _glareIterationsBase;

		[Token(Token = "0x400161A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private static readonly RenderDimension _directComputeSize;

		[Token(Token = "0x400161B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private static readonly float naturalIntensityMult;

		[Token(Token = "0x400161C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private static readonly string _selectiveReplacementTag;

		[Token(Token = "0x400161D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private static readonly string _selectiveGlowCameraObjectName;

		[Token(Token = "0x400161E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private GameObject _selectiveGlowCameraObject;

		[Token(Token = "0x400161F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Camera _selectiveGlowCamera;

		[Token(Token = "0x4001620")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private ComputeShaderVariants _presampleComputeVariants;

		[Token(Token = "0x4001621")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private ComputeShaderVariants _downsampleComputeVariants;

		[Token(Token = "0x4001622")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private ComputeShaderVariants _upsampleComputeVariants;

		[Token(Token = "0x4001623")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CommandBuffer _commandBuffer;

		[Token(Token = "0x4001624")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool _finalBlit;

		[Token(Token = "0x4001625")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private RenderTarget _selectiveRenderTarget;

		[Token(Token = "0x4001626")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private MipBuffer _bloomDownsampleBuffer;

		[Token(Token = "0x4001627")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private MipBuffer _bloomUpsampleBuffer;

		[Token(Token = "0x4001628")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private MipBuffer _lensFlareDownsampleBuffer;

		[Token(Token = "0x4001629")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private MipBuffer _lensFlareUpsampleBuffer;

		[Token(Token = "0x400162A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private MipBuffer _glareDownsampleBuffer0;

		[Token(Token = "0x400162B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private MipBuffer _glareDownsampleBuffer1;

		[Token(Token = "0x400162C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private MipBuffer _glareDownsampleBuffer2;

		[Token(Token = "0x400162D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private MipBuffer _glareDownsampleBuffer3;

		[Token(Token = "0x400162E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private MipBuffer _glareUpsampleBuffer0;

		[Token(Token = "0x400162F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private MipBuffer _glareUpsampleBuffer1;

		[Token(Token = "0x4001630")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private MipBuffer _glareUpsampleBuffer2;

		[Token(Token = "0x4001631")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private MipBuffer _glareUpsampleBuffer3;

		[Token(Token = "0x4001632")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private RenderTarget _sourceFrameBuffer;

		[Token(Token = "0x4001633")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private RenderTarget _destinationFrameBuffer;

		[Token(Token = "0x4001634")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private Keyword[] _shaderKeywords;

		[Token(Token = "0x4001635")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private bool _useGeometryShaders;

		[Token(Token = "0x4001636")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x159")]
		private bool _useComputeShaders;

		[Token(Token = "0x4001637")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15A")]
		private bool _useLensSurface;

		[Token(Token = "0x4001638")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15B")]
		private bool _useLensFlare;

		[Token(Token = "0x4001639")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		private bool _useGlare;

		[Token(Token = "0x400163A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private List<RenderTarget> _renderTargetsBundle;

		[Token(Token = "0x400163B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private List<MaterialKeywords> _renderKeywordsBundle;

		[Token(Token = "0x400163C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private int _bloomIterations;

		[Token(Token = "0x400163D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x174")]
		private int _lensFlareIterations;

		[Token(Token = "0x400163E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		private int _minIterations;

		[Token(Token = "0x400163F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		private int _glareIterations;

		[Token(Token = "0x4001640")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private int _currentRenderIndex;

		[Token(Token = "0x4001641")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x184")]
		private float bloomUpsampleSpread;

		[Token(Token = "0x4001642")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private float _lensFlareUpsampleSpread;

		[Token(Token = "0x4001643")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18C")]
		private float _glareScatteringMult;

		[Token(Token = "0x4001644")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private Vector2 _resolutionScale;

		[Token(Token = "0x4001645")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private Vector2[] glareAngles;

		[Token(Token = "0x4001646")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		private RenderTextureFormat _renderTextureFormat;

		[Token(Token = "0x4001647")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A4")]
		private ComputeShaderVariants.KeywordState computeShaderFeatures;

		[Token(Token = "0x4001648")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		private RenderContext[] _sourceContext;

		[Token(Token = "0x4001649")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private RenderContext[] _renderContext;

		[Token(Token = "0x400164A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private RenderContext _selectiveRenderContext;

		[Token(Token = "0x400164B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private Camera _renderingCamera;

		[Token(Token = "0x400164C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private CameraData _cameraData;

		[Token(Token = "0x400164D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private RenderPipeline _renderPipeline;

		[Token(Token = "0x400164E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private Material _renderMaterialNoGeometry;

		[Token(Token = "0x400164F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private Material _renderMaterialGeometry;

		[Token(Token = "0x4001650")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private float[] _cArgArray;

		[Token(Token = "0x4001651")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private ComputeBuffer _cArgsComputeBuffer;

		[Token(Token = "0x4001652")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private RenderDimension _computeThreadGroups;

		[Token(Token = "0x4001653")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private Settings _settings;

		[Token(Token = "0x170002C6")]
		private RenderTarget sourceFrameBuffer
		{
			[Token(Token = "0x6001883")]
			[Address(RVA = "0xB8E0D4", Offset = "0xB8E0D4", VA = "0xB8E0D4")]
			get
			{
				return default(RenderTarget);
			}
		}

		[Token(Token = "0x170002C7")]
		internal int currentRenderIndex
		{
			[Token(Token = "0x6001884")]
			[Address(RVA = "0xB8E124", Offset = "0xB8E124", VA = "0xB8E124")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002C8")]
		internal RenderTextureFormat renderTextureFormat
		{
			[Token(Token = "0x6001885")]
			[Address(RVA = "0xB8E12C", Offset = "0xB8E12C", VA = "0xB8E12C")]
			get
			{
				return default(RenderTextureFormat);
			}
		}

		[Token(Token = "0x170002C9")]
		internal Material renderMaterialNoGeometry
		{
			[Token(Token = "0x6001886")]
			[Address(RVA = "0xB8E134", Offset = "0xB8E134", VA = "0xB8E134")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002CA")]
		private GameObject selectiveGlowCameraObject
		{
			[Token(Token = "0x600188C")]
			[Address(RVA = "0xB8F30C", Offset = "0xB8F30C", VA = "0xB8F30C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002CB")]
		private Camera selectiveGlowCamera
		{
			[Token(Token = "0x600188D")]
			[Address(RVA = "0xB8F418", Offset = "0xB8F418", VA = "0xB8F418")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001882")]
		[Address(RVA = "0xB8DCA0", Offset = "0xB8DCA0", VA = "0xB8DCA0")]
		internal Effect()
		{
		}

		[Token(Token = "0x6001887")]
		[Address(RVA = "0xB8E13C", Offset = "0xB8E13C", VA = "0xB8E13C")]
		internal void Enable(RenderPipeline renderPipeline, [Optional] Shader shaderOverwrite, [Optional] Shader shaderGeometryOverwrite)
		{
		}

		[Token(Token = "0x6001888")]
		[Address(RVA = "0xB8EB44", Offset = "0xB8EB44", VA = "0xB8EB44", Slot = "1")]
		~Effect()
		{
		}

		[Token(Token = "0x6001889")]
		[Address(RVA = "0xB8EB50", Offset = "0xB8EB50", VA = "0xB8EB50")]
		internal void Disable()
		{
		}

		[Token(Token = "0x600188A")]
		[Address(RVA = "0xB8EC30", Offset = "0xB8EC30", VA = "0xB8EC30")]
		private void PrepareScattering(float Scattering, float scale, ref int iterations, ref float spread)
		{
		}

		[Token(Token = "0x600188B")]
		[Address(RVA = "0xB8ECF8", Offset = "0xB8ECF8", VA = "0xB8ECF8")]
		private void UpdateRenderBuffers()
		{
		}

		[Token(Token = "0x600188E")]
		[Address(RVA = "0xB8F4D8", Offset = "0xB8F4D8", VA = "0xB8F4D8")]
		private void SetupSelectiveGlowCamera()
		{
		}

		[Token(Token = "0x600188F")]
		[Address(RVA = "0xB8F5F4", Offset = "0xB8F5F4", VA = "0xB8F5F4")]
		private void CheckFeatureSupport()
		{
		}

		[Token(Token = "0x6001890")]
		[Address(RVA = "0xB8F72C", Offset = "0xB8F72C", VA = "0xB8F72C")]
		private void BeginProfileSample(string text)
		{
		}

		[Token(Token = "0x6001891")]
		[Address(RVA = "0xB8F75C", Offset = "0xB8F75C", VA = "0xB8F75C")]
		private void EndProfileSample(string text)
		{
		}

		[Token(Token = "0x6001892")]
		[Address(RVA = "0xB8F78C", Offset = "0xB8F78C", VA = "0xB8F78C")]
		internal void Build(RenderTarget source, RenderTarget destination, Settings settings, CommandBuffer cmd, CameraData cameraData, [Optional] Camera renderingCamera, bool finalBlit = true)
		{
		}

		[Token(Token = "0x6001893")]
		[Address(RVA = "0xB8FAB4", Offset = "0xB8FAB4", VA = "0xB8FAB4")]
		private void UpdateConstantBuffers()
		{
		}

		[Token(Token = "0x6001894")]
		[Address(RVA = "0xB94A10", Offset = "0xB94A10", VA = "0xB94A10")]
		private void SetKeyword(MaterialKeywords keyword, bool enable)
		{
		}

		[Token(Token = "0x6001895")]
		[Address(RVA = "0xB949E8", Offset = "0xB949E8", VA = "0xB949E8")]
		private Vector2 AngleToDirection(float angleDegree)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001896")]
		[Address(RVA = "0xB94830", Offset = "0xB94830", VA = "0xB94830")]
		private float ConvertGammaValue(float gammaSpacedValue)
		{
			return default(float);
		}

		[Token(Token = "0x6001897")]
		[Address(RVA = "0xB9491C", Offset = "0xB9491C", VA = "0xB9491C")]
		private Vector4 ConvertGammaValue(Vector4 gammaSpacedVector)
		{
			return default(Vector4);
		}

		[Token(Token = "0x6001898")]
		[Address(RVA = "0xB94AF4", Offset = "0xB94AF4", VA = "0xB94AF4")]
		private void UpdateComputeShaderThreadGroups(RenderDimension renderDimension)
		{
		}

		[Token(Token = "0x6001899")]
		[Address(RVA = "0xB94C28", Offset = "0xB94C28", VA = "0xB94C28")]
		private void UpdateRenderIndex(int v)
		{
		}

		[Token(Token = "0x600189A")]
		[Address(RVA = "0xB94C30", Offset = "0xB94C30", VA = "0xB94C30")]
		private void UpdateRenderIndex(ComputeShaderVariants variants, ComputeShaderVariants.KeywordState features)
		{
		}

		[Token(Token = "0x600189B")]
		[Address(RVA = "0xB94C80", Offset = "0xB94C80", VA = "0xB94C80")]
		private void AttachCArgBufferToComputeKernel()
		{
		}

		[Token(Token = "0x600189C")]
		[Address(RVA = "0xB946F4", Offset = "0xB946F4", VA = "0xB946F4")]
		private void SetFloat(PipelineProperties.ShaderProperties.CBufferProperty property, float value, bool forcePixelShader = false)
		{
		}

		[Token(Token = "0x600189D")]
		[Address(RVA = "0xB94774", Offset = "0xB94774", VA = "0xB94774")]
		private void SetVector(PipelineProperties.ShaderProperties.CBufferProperty property, Vector4 value, bool forcePixelShader = false)
		{
		}

		[Token(Token = "0x600189E")]
		[Address(RVA = "0xB9486C", Offset = "0xB9486C", VA = "0xB9486C")]
		private void SetVector(PipelineProperties.ShaderProperties.CBufferProperty property, Vector3 value, bool forcePixelShader = false)
		{
		}

		[Token(Token = "0x600189F")]
		[Address(RVA = "0xB94620", Offset = "0xB94620", VA = "0xB94620")]
		private void SetVector(PipelineProperties.ShaderProperties.CBufferProperty property, Vector2 value, bool forcePixelShader = false)
		{
		}

		[Token(Token = "0x60018A0")]
		[Address(RVA = "0xB94E20", Offset = "0xB94E20", VA = "0xB94E20")]
		private void SetTexture(PipelineProperties.ShaderProperties.DefaultProperty property, RenderTarget rt, bool forcePixelShader = false)
		{
		}

		[Token(Token = "0x60018A1")]
		[Address(RVA = "0xB95038", Offset = "0xB95038", VA = "0xB95038")]
		private void SetTexture(PipelineProperties.ShaderProperties.DefaultProperty property, Texture tex, bool forcePixelShader = false)
		{
		}

		[Token(Token = "0x60018A2")]
		[Address(RVA = "0xB95240", Offset = "0xB95240", VA = "0xB95240")]
		private void PrepareDraw(int variant, RenderDimension renderDimension, bool forcePixelShader = false)
		{
		}

		[Token(Token = "0x60018A3")]
		[Address(RVA = "0xB955A8", Offset = "0xB955A8", VA = "0xB955A8")]
		private void PrepareDraw(int materialPass, ComputeShaderVariants variants, bool enableBloom, bool enableLensflare, bool enableGlare, RenderDimension renderDimension)
		{
		}

		[Token(Token = "0x60018A4")]
		[Address(RVA = "0xB957E0", Offset = "0xB957E0", VA = "0xB957E0")]
		private void Draw(RenderDimension dimension, bool forcePixelShader = false)
		{
		}

		[Token(Token = "0x60018A5")]
		[Address(RVA = "0xB95D70", Offset = "0xB95D70", VA = "0xB95D70")]
		private MaterialKeywords GetGlareKeyword(int streaks)
		{
			return default(MaterialKeywords);
		}

		[Token(Token = "0x60018A6")]
		[Address(RVA = "0xB954F0", Offset = "0xB954F0", VA = "0xB954F0")]
		private void DisableRenderKeywords()
		{
		}

		[Token(Token = "0x60018A7")]
		[Address(RVA = "0xB95D94", Offset = "0xB95D94", VA = "0xB95D94")]
		private void DisableDebugKeywords()
		{
		}

		[Token(Token = "0x60018A8")]
		[Address(RVA = "0xB953E4", Offset = "0xB953E4", VA = "0xB953E4")]
		private void SetRenderPriority()
		{
		}

		[Token(Token = "0x60018A9")]
		[Address(RVA = "0xB9092C", Offset = "0xB9092C", VA = "0xB9092C")]
		private void PreSample()
		{
		}

		[Token(Token = "0x60018AA")]
		[Address(RVA = "0xB91630", Offset = "0xB91630", VA = "0xB91630")]
		private void Downsample()
		{
		}

		[Token(Token = "0x60018AB")]
		[Address(RVA = "0xB9248C", Offset = "0xB9248C", VA = "0xB9248C")]
		private void Upsample()
		{
		}

		[Token(Token = "0x60018AC")]
		[Address(RVA = "0xB9381C", Offset = "0xB9381C", VA = "0xB9381C")]
		private void Composite()
		{
		}

		[Token(Token = "0x60018AD")]
		[Address(RVA = "0xB95F90", Offset = "0xB95F90", VA = "0xB95F90")]
		internal void AfterCompositeCleanup()
		{
		}
	}
	[Token(Token = "0x20003C1")]
	internal interface IDimension
	{
		[Token(Token = "0x170002CC")]
		int width
		{
			[Token(Token = "0x60018B0")]
			get;
		}

		[Token(Token = "0x170002CD")]
		int height
		{
			[Token(Token = "0x60018B1")]
			get;
		}

		[Token(Token = "0x170002CE")]
		RenderDimension renderDimension
		{
			[Token(Token = "0x60018B2")]
			get;
		}
	}
	[Token(Token = "0x20003C2")]
	public sealed class MinMaxRangeAttribute : PropertyAttribute
	{
		[Token(Token = "0x4001672")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float minLimit;

		[Token(Token = "0x4001673")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float maxLimit;

		[Token(Token = "0x60018B3")]
		[Address(RVA = "0xB961A8", Offset = "0xB961A8", VA = "0xB961A8")]
		public MinMaxRangeAttribute(float minLimit, float maxLimit)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003C3")]
	public struct MinMaxRange
	{
		[Token(Token = "0x4001674")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float minValue;

		[Token(Token = "0x4001675")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float maxValue;

		[Token(Token = "0x60018B4")]
		[Address(RVA = "0xB961D4", Offset = "0xB961D4", VA = "0xB961D4")]
		public MinMaxRange(float minValue, float maxValue)
		{
		}
	}
	[Token(Token = "0x20003C4")]
	internal sealed class MipBuffer
	{
		[Token(Token = "0x4001676")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private RenderTarget[] _renderTargets;

		[Token(Token = "0x170002CF")]
		internal RenderTarget[] renderTargets
		{
			[Token(Token = "0x60018B5")]
			[Address(RVA = "0xB961DC", Offset = "0xB961DC", VA = "0xB961DC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018B6")]
		[Address(RVA = "0xB8E918", Offset = "0xB8E918", VA = "0xB8E918")]
		public MipBuffer(string name, RenderPipeline renderPipeline)
		{
		}

		[Token(Token = "0x60018B7")]
		[Address(RVA = "0xB95E0C", Offset = "0xB95E0C", VA = "0xB95E0C")]
		internal void CreateTemporary(RenderContext[] renderContext, int level, CommandBuffer cmd, RenderTextureFormat format, bool useComputeShaders, RenderPipeline renderPipeline)
		{
		}

		[Token(Token = "0x60018B8")]
		[Address(RVA = "0xB95F28", Offset = "0xB95F28", VA = "0xB95F28")]
		internal void ClearTemporary(CommandBuffer cmd, int level, RenderPipeline renderPipeline)
		{
		}
	}
	[Token(Token = "0x20003C5")]
	internal static class PipelineExtensions
	{
		[Token(Token = "0x4001677")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Mesh _screenMesh;

		[Token(Token = "0x170002D0")]
		private static Mesh screenMesh
		{
			[Token(Token = "0x60018B9")]
			[Address(RVA = "0xB96224", Offset = "0xB96224", VA = "0xB96224")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018BA")]
		[Address(RVA = "0xB94AC0", Offset = "0xB94AC0", VA = "0xB94AC0")]
		internal static void SetKeyword(this CommandBuffer cmd, string keyword, bool enable)
		{
		}

		[Token(Token = "0x60018BB")]
		[Address(RVA = "0xB94AE0", Offset = "0xB94AE0", VA = "0xB94AE0")]
		internal static void SetKeyword(string keyword, bool enable)
		{
		}

		[Token(Token = "0x60018BC")]
		[Address(RVA = "0xB959F8", Offset = "0xB959F8", VA = "0xB959F8")]
		internal static void Draw(this CommandBuffer cmd, List<RenderTarget> destinations, Material material, bool useGeometryShader, int pass, Rect viewport)
		{
		}

		[Token(Token = "0x60018BD")]
		[Address(RVA = "0xB95BBC", Offset = "0xB95BBC", VA = "0xB95BBC")]
		internal static void Draw(List<RenderTarget> destinations, Material material, bool useGeometryShader, int pass)
		{
		}

		[Token(Token = "0x60018BE")]
		[Address(RVA = "0xB959CC", Offset = "0xB959CC", VA = "0xB959CC")]
		internal static void Draw(this CommandBuffer cmd, List<RenderTarget> destinations, ComputeShader computeShader, int kernelIndex, RenderDimension computeThreadGroups)
		{
		}

		[Token(Token = "0x60018BF")]
		[Address(RVA = "0xB95B90", Offset = "0xB95B90", VA = "0xB95B90")]
		internal static void Draw(List<RenderTarget> destinations, ComputeShader computeShader, int kernelIndex, RenderDimension computeThreadGroups)
		{
		}

		[Token(Token = "0x60018C0")]
		[Address(RVA = "0xB96A24", Offset = "0xB96A24", VA = "0xB96A24")]
		private static int SinglePassStereoDownscale(bool cameraIsStereo, int size, int scale)
		{
			return default(int);
		}

		[Token(Token = "0x60018C1")]
		[Address(RVA = "0xB8F238", Offset = "0xB8F238", VA = "0xB8F238")]
		internal static void UpdateMipRenderContext(this CameraData cameraData, RenderContext[] renderContexts, RenderDimension rawDimension, int levels, RenderTextureFormat format, int depthBufferBits, bool enableRandomWrite)
		{
		}

		[Token(Token = "0x60018C2")]
		[Address(RVA = "0xB961E4", Offset = "0xB961E4", VA = "0xB961E4")]
		internal static RenderTexture GetTemporary(RenderContext renderContext, RenderTextureFormat format)
		{
			return null;
		}
	}
	[Token(Token = "0x20003C6")]
	internal static class PipelineProperties
	{
		[Token(Token = "0x20003C7")]
		internal static class ShaderProperties
		{
			[Token(Token = "0x20003C8")]
			internal class DefaultProperty
			{
				[Token(Token = "0x40016A7")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
				protected string _name;

				[Token(Token = "0x40016A8")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
				protected int _id;

				[Token(Token = "0x170002D5")]
				internal string name
				{
					[Token(Token = "0x60018C9")]
					[Address(RVA = "0xB97994", Offset = "0xB97994", VA = "0xB97994")]
					get
					{
						return null;
					}
				}

				[Token(Token = "0x170002D6")]
				internal int id
				{
					[Token(Token = "0x60018CA")]
					[Address(RVA = "0xB9799C", Offset = "0xB9799C", VA = "0xB9799C")]
					get
					{
						return default(int);
					}
				}

				[Token(Token = "0x60018CB")]
				[Address(RVA = "0xB9795C", Offset = "0xB9795C", VA = "0xB9795C")]
				internal DefaultProperty(string name)
				{
				}
			}

			[Token(Token = "0x20003C9")]
			internal sealed class CBufferProperty : DefaultProperty
			{
				[Token(Token = "0x40016A9")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
				private int _index;

				[Token(Token = "0x40016AA")]
				[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
				private int _size;

				[Token(Token = "0x170002D7")]
				internal int index
				{
					[Token(Token = "0x60018CC")]
					[Address(RVA = "0xB979A4", Offset = "0xB979A4", VA = "0xB979A4")]
					get
					{
						return default(int);
					}
				}

				[Token(Token = "0x170002D8")]
				internal int size
				{
					[Token(Token = "0x60018CD")]
					[Address(RVA = "0xB979AC", Offset = "0xB979AC", VA = "0xB979AC")]
					get
					{
						return default(int);
					}
				}

				[Token(Token = "0x60018CE")]
				[Address(RVA = "0xB978C4", Offset = "0xB978C4", VA = "0xB978C4")]
				internal CBufferProperty(string name, int index, int size)
				{
				}
			}

			[Token(Token = "0x4001679")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly CBufferProperty screenSize;

			[Token(Token = "0x400167A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly CBufferProperty singlePassStereoScale;

			[Token(Token = "0x400167B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly CBufferProperty viewMatrix;

			[Token(Token = "0x400167C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal static readonly DefaultProperty cArgBuffer;

			[Token(Token = "0x400167D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal static readonly DefaultProperty sourceTex;

			[Token(Token = "0x400167E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal static readonly DefaultProperty targetTex;

			[Token(Token = "0x400167F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal static readonly DefaultProperty copyTargetTex;

			[Token(Token = "0x4001680")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal static readonly DefaultProperty bloomTex;

			[Token(Token = "0x4001681")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal static readonly DefaultProperty bloomTargetTex;

			[Token(Token = "0x4001682")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal static readonly CBufferProperty bloomSpread;

			[Token(Token = "0x4001683")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal static readonly CBufferProperty bloomThreshold;

			[Token(Token = "0x4001684")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			internal static readonly CBufferProperty lumaScale;

			[Token(Token = "0x4001685")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			internal static readonly CBufferProperty bloomIntensity;

			[Token(Token = "0x4001686")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			internal static readonly CBufferProperty blooming;

			[Token(Token = "0x4001687")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			internal static readonly DefaultProperty higherMipBloomTex;

			[Token(Token = "0x4001688")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			internal static readonly CBufferProperty resolutionScale;

			[Token(Token = "0x4001689")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			internal static readonly CBufferProperty renderTargetSize;

			[Token(Token = "0x400168A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			internal static readonly DefaultProperty lensSurfaceDirtTex;

			[Token(Token = "0x400168B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			internal static readonly DefaultProperty lensSurfaceDiffractionTex;

			[Token(Token = "0x400168C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			internal static readonly CBufferProperty lensSurfaceDirtIntensity;

			[Token(Token = "0x400168D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			internal static readonly CBufferProperty lensSurfaceDiffractionIntensity;

			[Token(Token = "0x400168E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			internal static readonly CBufferProperty lensSurfaceDirtTexST;

			[Token(Token = "0x400168F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			internal static readonly CBufferProperty lensFlareThreshold;

			[Token(Token = "0x4001690")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			internal static readonly CBufferProperty lensFlareGhostParams;

			[Token(Token = "0x4001691")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			internal static readonly CBufferProperty lensFlareHaloParams;

			[Token(Token = "0x4001692")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
			internal static readonly DefaultProperty lensFlareTex;

			[Token(Token = "0x4001693")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
			internal static readonly DefaultProperty lensFlareTargetTex;

			[Token(Token = "0x4001694")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
			internal static readonly CBufferProperty lensFlareSpread;

			[Token(Token = "0x4001695")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
			internal static readonly CBufferProperty lensFlareChromaticAberration;

			[Token(Token = "0x4001696")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
			internal static readonly DefaultProperty lensFlareColorRamp;

			[Token(Token = "0x4001697")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
			internal static readonly CBufferProperty glareThreshold;

			[Token(Token = "0x4001698")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
			internal static readonly CBufferProperty glareBlend;

			[Token(Token = "0x4001699")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
			internal static readonly CBufferProperty glareGlobalIntensity;

			[Token(Token = "0x400169A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
			internal static readonly CBufferProperty glareIntensity;

			[Token(Token = "0x400169B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
			internal static readonly CBufferProperty glareScattering;

			[Token(Token = "0x400169C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
			internal static readonly CBufferProperty glareDirection01;

			[Token(Token = "0x400169D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
			internal static readonly CBufferProperty glareDirection23;

			[Token(Token = "0x400169E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
			internal static readonly CBufferProperty glareOffset;

			[Token(Token = "0x400169F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
			internal static readonly DefaultProperty glare0Tex;

			[Token(Token = "0x40016A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
			internal static readonly DefaultProperty glare0TargetTex;

			[Token(Token = "0x40016A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
			internal static readonly DefaultProperty glare1Tex;

			[Token(Token = "0x40016A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
			internal static readonly DefaultProperty glare1TargetTex;

			[Token(Token = "0x40016A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
			internal static readonly DefaultProperty glare2Tex;

			[Token(Token = "0x40016A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
			internal static readonly DefaultProperty glare2TargetTex;

			[Token(Token = "0x40016A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
			internal static readonly DefaultProperty glare3Tex;

			[Token(Token = "0x40016A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
			internal static readonly DefaultProperty glare3TargetTex;
		}

		[Token(Token = "0x20003CA")]
		internal static class CommandBufferProperties
		{
			[Token(Token = "0x40016AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			internal static readonly string commandBufferName;

			[Token(Token = "0x40016AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			internal static readonly string selectiveRenderBuffer;

			[Token(Token = "0x40016AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			internal static readonly string bloomDownsampleBuffer;

			[Token(Token = "0x40016AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			internal static readonly string bloomUpsampleBuffer;

			[Token(Token = "0x40016AF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			internal static readonly string sourceBuffer;

			[Token(Token = "0x40016B0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			internal static readonly string glareDownsampleBuffer0;

			[Token(Token = "0x40016B1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			internal static readonly string glareDownsampleBuffer1;

			[Token(Token = "0x40016B2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			internal static readonly string glareDownsampleBuffer2;

			[Token(Token = "0x40016B3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			internal static readonly string glareDownsampleBuffer3;

			[Token(Token = "0x40016B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			internal static readonly string glareUpsampleBuffer0;

			[Token(Token = "0x40016B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			internal static readonly string glareUpsampleBuffer1;

			[Token(Token = "0x40016B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			internal static readonly string glareUpsampleBuffer2;

			[Token(Token = "0x40016B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			internal static readonly string glareUpsampleBuffer3;

			[Token(Token = "0x40016B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			internal static readonly string lensFlareDownsampleBuffer;

			[Token(Token = "0x40016B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			internal static readonly string lensFlareUpsampleBuffer;

			[Token(Token = "0x40016BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			internal static readonly string sampleDownsample;

			[Token(Token = "0x40016BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			internal static readonly string samplePreSample;

			[Token(Token = "0x40016BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			internal static readonly string sampleUpsample;

			[Token(Token = "0x40016BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			internal static readonly string sampleComposite;

			[Token(Token = "0x40016BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			internal static readonly string sampleCreateBuffers;

			[Token(Token = "0x40016BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			internal static readonly string sampleClearBuffers;

			[Token(Token = "0x40016C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			internal static readonly string sampleSetup;

			[Token(Token = "0x40016C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
			internal static readonly string sampleCopySource;

			[Token(Token = "0x40016C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
			internal static readonly string sampleReplacement;

			[Token(Token = "0x40016C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
			internal static readonly string samplePrepare;
		}

		[Token(Token = "0x4001678")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static readonly int renderBufferSize;

		[Token(Token = "0x170002D1")]
		internal static bool scriptableRenderPipelineActive
		{
			[Token(Token = "0x60018C3")]
			[Address(RVA = "0xB96AD8", Offset = "0xB96AD8", VA = "0xB96AD8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002D2")]
		internal static bool xrEnabled
		{
			[Token(Token = "0x60018C4")]
			[Address(RVA = "0xB96B40", Offset = "0xB96B40", VA = "0xB96B40")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002D3")]
		internal static bool singlePassStereoDoubleWideEnabled
		{
			[Token(Token = "0x60018C5")]
			[Address(RVA = "0xB946C4", Offset = "0xB946C4", VA = "0xB946C4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002D4")]
		internal static bool singlePassStereoInstancedEnabled
		{
			[Token(Token = "0x60018C6")]
			[Address(RVA = "0xB8D850", Offset = "0xB8D850", VA = "0xB8D850")]
			get
			{
				return default(bool);
			}
		}
	}
	[Token(Token = "0x20003CB")]
	internal sealed class RenderContext : IDimension
	{
		[Token(Token = "0x40016C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private RenderTextureDescriptor _descriptor;

		[Token(Token = "0x170002D9")]
		public RenderTextureDescriptor descriptor
		{
			[Token(Token = "0x60018D0")]
			[Address(RVA = "0xB97D5C", Offset = "0xB97D5C", VA = "0xB97D5C")]
			get
			{
				return default(RenderTextureDescriptor);
			}
		}

		[Token(Token = "0x170002DA")]
		public RenderDimension renderDimension
		{
			[Token(Token = "0x60018D1")]
			[Address(RVA = "0xB8FAAC", Offset = "0xB8FAAC", VA = "0xB8FAAC", Slot = "6")]
			get
			{
				return default(RenderDimension);
			}
		}

		[Token(Token = "0x170002DB")]
		public bool enableRandomWrite
		{
			[Token(Token = "0x60018D2")]
			[Address(RVA = "0xB97D78", Offset = "0xB97D78", VA = "0xB97D78")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170002DC")]
		public int width
		{
			[Token(Token = "0x60018D3")]
			[Address(RVA = "0xB8F228", Offset = "0xB8F228", VA = "0xB8F228", Slot = "4")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170002DD")]
		public int height
		{
			[Token(Token = "0x60018D4")]
			[Address(RVA = "0xB8F230", Offset = "0xB8F230", VA = "0xB8F230", Slot = "5")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x60018D5")]
		[Address(RVA = "0xB8E844", Offset = "0xB8E844", VA = "0xB8E844")]
		internal RenderContext()
		{
		}

		[Token(Token = "0x60018D6")]
		[Address(RVA = "0xB8F1A0", Offset = "0xB8F1A0", VA = "0xB8F1A0")]
		internal void SinglePassStereoAdjustWidth(bool stereoEnabled)
		{
		}

		[Token(Token = "0x60018D7")]
		[Address(RVA = "0xB8F0AC", Offset = "0xB8F0AC", VA = "0xB8F0AC")]
		internal void UpdateRenderContext(bool stereoEnabled, RenderTextureFormat format, int depthBufferBits, bool enableRandomWrite, RenderDimension dimension)
		{
		}
	}
	[Token(Token = "0x20003CC")]
	internal struct RenderTarget
	{
		[Token(Token = "0x40016C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal RenderTexture renderTexture;

		[Token(Token = "0x40016C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		internal RenderTargetIdentifier renderTargetIdentifier;

		[Token(Token = "0x40016C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal int identifier;
	}
	[Token(Token = "0x20003CD")]
	internal static class RenderTargetContext
	{
		[Token(Token = "0x40016C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int _renderTargetCount;

		[Token(Token = "0x40016C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static RenderTargetSetup[] _mrtBindingsLegacy;

		[Token(Token = "0x40016CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private static RenderTargetBinding[] _mrtBindingsSRP;

		[Token(Token = "0x60018D8")]
		[Address(RVA = "0xB96570", Offset = "0xB96570", VA = "0xB96570")]
		internal static void SetRenderTargetContext(this CommandBuffer cmd, List<RenderTarget> renderTargets)
		{
		}

		[Token(Token = "0x60018D9")]
		[Address(RVA = "0xB96804", Offset = "0xB96804", VA = "0xB96804")]
		internal static void SetRenderTargetContext(List<RenderTarget> renderTargets)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20003CE")]
	public sealed class Resources : ScriptableObject
	{
		[Token(Token = "0x40016CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[SerializeField]
		private Texture2D _lensSurfaceDirtTextureDefault;

		[Token(Token = "0x40016CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		private Texture2D _lensSurfaceDiffractionTextureDefault;

		[Token(Token = "0x40016CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private Texture2D _lensFlareColorRampDefault;

		[Token(Token = "0x40016CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[SerializeField]
		private Shader _selectiveRenderShader;

		[Token(Token = "0x40016CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[SerializeField]
		private Shader _sm20Shader;

		[Token(Token = "0x40016D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[SerializeField]
		private Shader _sm25Shader;

		[Token(Token = "0x40016D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private Shader _sm30Shader;

		[Token(Token = "0x40016D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[SerializeField]
		private Shader _sm35Shader;

		[Token(Token = "0x40016D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[SerializeField]
		private Shader _sm40Shader;

		[Token(Token = "0x40016D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[SerializeField]
		private Shader _sm40GeometryShader;

		[Token(Token = "0x40016D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[SerializeField]
		private ComputeShader _computeShader;

		[Token(Token = "0x40016D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		private ComputeShader _computeShaderGles;

		[Token(Token = "0x170002DE")]
		internal Texture2D lensSurfaceDirtTextureDefault
		{
			[Token(Token = "0x60018DD")]
			[Address(RVA = "0xB988B8", Offset = "0xB988B8", VA = "0xB988B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002DF")]
		internal Texture2D lensSurfaceDiffractionTextureDefault
		{
			[Token(Token = "0x60018DE")]
			[Address(RVA = "0xB988C0", Offset = "0xB988C0", VA = "0xB988C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E0")]
		internal Texture2D lensFlareColorRampDefault
		{
			[Token(Token = "0x60018DF")]
			[Address(RVA = "0xB988C8", Offset = "0xB988C8", VA = "0xB988C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E1")]
		internal Shader selectiveRenderShader
		{
			[Token(Token = "0x60018E0")]
			[Address(RVA = "0xB988D0", Offset = "0xB988D0", VA = "0xB988D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E2")]
		internal Shader sm20Shader
		{
			[Token(Token = "0x60018E1")]
			[Address(RVA = "0xB988D8", Offset = "0xB988D8", VA = "0xB988D8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E3")]
		internal Shader sm25Shader
		{
			[Token(Token = "0x60018E2")]
			[Address(RVA = "0xB988E0", Offset = "0xB988E0", VA = "0xB988E0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E4")]
		internal Shader sm30Shader
		{
			[Token(Token = "0x60018E3")]
			[Address(RVA = "0xB988E8", Offset = "0xB988E8", VA = "0xB988E8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E5")]
		internal Shader sm35Shader
		{
			[Token(Token = "0x60018E4")]
			[Address(RVA = "0xB988F0", Offset = "0xB988F0", VA = "0xB988F0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E6")]
		internal Shader sm40Shader
		{
			[Token(Token = "0x60018E5")]
			[Address(RVA = "0xB988F8", Offset = "0xB988F8", VA = "0xB988F8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E7")]
		internal Shader sm40GeometryShader
		{
			[Token(Token = "0x60018E6")]
			[Address(RVA = "0xB98900", Offset = "0xB98900", VA = "0xB98900")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170002E8")]
		internal ComputeShader computeShader
		{
			[Token(Token = "0x60018E7")]
			[Address(RVA = "0xB94DF4", Offset = "0xB94DF4", VA = "0xB94DF4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x60018DB")]
		[Address(RVA = "0xB98850", Offset = "0xB98850", VA = "0xB98850")]
		internal static void ResourcesNotAvailableWarning()
		{
		}

		[Token(Token = "0x60018DC")]
		[Address(RVA = "0xB8E7EC", Offset = "0xB8E7EC", VA = "0xB8E7EC")]
		internal static Resources LoadResourcesAsset()
		{
			return null;
		}

		[Token(Token = "0x60018E8")]
		[Address(RVA = "0xB98908", Offset = "0xB98908", VA = "0xB98908")]
		public Resources()
		{
		}
	}
	[Token(Token = "0x20003CF")]
	internal abstract class Settings
	{
		[Token(Token = "0x40016D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		protected bool _allowGeometryShaders;

		[Token(Token = "0x40016D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		protected bool _allowComputeShaders;

		[Token(Token = "0x40016D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		protected RenderPriority _renderPriority;

		[Token(Token = "0x40016DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected DebugView _debugView;

		[Token(Token = "0x40016DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		protected Quality _quality;

		[Token(Token = "0x40016DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected AntiFlickerMode _antiFlickerMode;

		[Token(Token = "0x40016DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		protected Workflow _workflow;

		[Token(Token = "0x40016DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected LayerMask _selectiveRenderLayerMask;

		[Token(Token = "0x40016DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		protected float _anamorphicRatio;

		[Token(Token = "0x40016E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected float _lumaScale;

		[Token(Token = "0x40016E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		protected float _blooming;

		[Token(Token = "0x40016E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected MinMaxRange _bloomThreshold;

		[Token(Token = "0x40016E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		protected float _bloomScattering;

		[Token(Token = "0x40016E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected float _bloomIntensity;

		[Token(Token = "0x40016E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		protected bool _allowLensSurface;

		[Token(Token = "0x40016E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		protected Texture2D _lensSurfaceDirtTexture;

		[Token(Token = "0x40016E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected float _lensSurfaceDirtIntensity;

		[Token(Token = "0x40016E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected Texture2D _lensSurfaceDirtDistortionTexture;

		[Token(Token = "0x40016E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		protected float _lensSurfaceDirtDistortion;

		[Token(Token = "0x40016EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		protected Texture2D _lensSurfaceDiffractionTexture;

		[Token(Token = "0x40016EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected float _lensSurfaceDiffractionIntensity;

		[Token(Token = "0x40016EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		protected bool _allowLensFlare;

		[Token(Token = "0x40016ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		protected LensFlareStyle _lensFlareStyle;

		[Token(Token = "0x40016EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected float _lensFlareGhostFade;

		[Token(Token = "0x40016EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		protected float _lensFlareGhostIntensity;

		[Token(Token = "0x40016F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		protected MinMaxRange _lensFlareThreshold;

		[Token(Token = "0x40016F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected float _lensFlareScattering;

		[Token(Token = "0x40016F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected Texture2D _lensFlareColorRamp;

		[Token(Token = "0x40016F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		protected float _lensFlareChromaticAberration;

		[Token(Token = "0x40016F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		protected int _lensFlareGhostCount;

		[Token(Token = "0x40016F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		protected float _lensFlareGhostDispersal;

		[Token(Token = "0x40016F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		protected float _lensFlareHaloFade;

		[Token(Token = "0x40016F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		protected float _lensFlareHaloIntensity;

		[Token(Token = "0x40016F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		protected float _lensFlareHaloSize;

		[Token(Token = "0x40016F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		protected bool _allowGlare;

		[Token(Token = "0x40016FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		protected float _glareBlend;

		[Token(Token = "0x40016FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		protected float _glareIntensity;

		[Token(Token = "0x40016FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		protected float _glareAngle;

		[Token(Token = "0x40016FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		protected MinMaxRange _glareThreshold;

		[Token(Token = "0x40016FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		protected int _glareStreaks;

		[Token(Token = "0x40016FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		protected float _glareScattering;

		[Token(Token = "0x4001700")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		protected GlareStyle _glareStyle;

		[Token(Token = "0x4001701")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		protected float _glareSample0Scattering;

		[Token(Token = "0x4001702")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		protected float _glareSample0Angle;

		[Token(Token = "0x4001703")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		protected float _glareSample0Intensity;

		[Token(Token = "0x4001704")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		protected float _glareSample0Offset;

		[Token(Token = "0x4001705")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		protected float _glareSample1Scattering;

		[Token(Token = "0x4001706")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		protected float _glareSample1Angle;

		[Token(Token = "0x4001707")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		protected float _glareSample1Intensity;

		[Token(Token = "0x4001708")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		protected float _glareSample1Offset;

		[Token(Token = "0x4001709")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		protected float _glareSample2Scattering;

		[Token(Token = "0x400170A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		protected float _glareSample2Angle;

		[Token(Token = "0x400170B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		protected float _glareSample2Intensity;

		[Token(Token = "0x400170C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		protected float _glareSample2Offset;

		[Token(Token = "0x400170D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		protected float _glareSample3Scattering;

		[Token(Token = "0x400170E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		protected float _glareSample3Angle;

		[Token(Token = "0x400170F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		protected float _glareSample3Intensity;

		[Token(Token = "0x4001710")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		protected float _glareSample3Offset;

		[Token(Token = "0x170002E9")]
		internal bool allowGeometryShaders
		{
			[Token(Token = "0x60018E9")]
			[Address(RVA = "0xB98910", Offset = "0xB98910", VA = "0xB98910")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60018EA")]
			[Address(RVA = "0xB98918", Offset = "0xB98918", VA = "0xB98918")]
			set
			{
			}
		}

		[Token(Token = "0x170002EA")]
		internal bool allowComputeShaders
		{
			[Token(Token = "0x60018EB")]
			[Address(RVA = "0xB98924", Offset = "0xB98924", VA = "0xB98924")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x60018EC")]
			[Address(RVA = "0xB9892C", Offset = "0xB9892C", VA = "0xB9892C")]
			set
			{
			}
		}

		[Token(Token = "0x170002EB")]
		internal RenderPriority renderPriority
		{
			[Token(Token = "0x60018ED")]
			[Address(RVA = "0xB98938", Offset = "0xB98938", VA = "0xB98938")]
			get
			{
				return default(RenderPriority);
			}
			[Token(Token = "0x60018EE")]
			[Address(RVA = "0xB98940", Offset = "0xB98940", VA = "0xB98940")]
			set
			{
			}
		}

		[Token(Token = "0x170002EC")]
		internal DebugView debugView
		{
			[Token(Token = "0x60018EF")]
			[Address(RVA = "0xB98948", Offset = "0xB98948", VA = "0xB98948")]
			get
			{
				return default(DebugView);
			}
			[Token(Token = "0x60018F0")]
			[Address(RVA = "0xB98950", Offset = "0xB98950", VA = "0xB98950")]
			set
			{
			}
		}

		[Token(Token = "0x170002ED")]
		internal Quality quality
		{
			[Token(Token = "0x60018F1")]
			[Address(RVA = "0xB98958", Offset = "0xB98958", VA = "0xB98958")]
			get
			{
				return default(Quality);
			}
			[Token(Token = "0x60018F2")]
			[Address(RVA = "0xB98960", Offset = "0xB98960", VA = "0xB98960")]
			set
			{
			}
		}

		[Token(Token = "0x170002EE")]
		internal AntiFlickerMode antiFlickerMode
		{
			[Token(Token = "0x60018F3")]
			[Address(RVA = "0xB98968", Offset = "0xB98968", VA = "0xB98968")]
			get
			{
				return default(AntiFlickerMode);
			}
			[Token(Token = "0x60018F4")]
			[Address(RVA = "0xB98970", Offset = "0xB98970", VA = "0xB98970")]
			set
			{
			}
		}

		[Token(Token = "0x170002EF")]
		internal Workflow workflow
		{
			[Token(Token = "0x60018F5")]
			[Address(RVA = "0xB98978", Offset = "0xB98978", VA = "0xB98978")]
			get
			{
				return default(Workflow);
			}
			[Token(Token = "0x60018F6")]
			[Address(RVA = "0xB98980", Offset = "0xB98980", VA = "0xB98980")]
			set
			{
			}
		}

		[Token(Token = "0x170002F0")]
		internal LayerMask selectiveRenderLayerMask
		{
			[Token(Token = "0x60018F7")]
			[Address(RVA = "0xB98988", Offset = "0xB98988", VA = "0xB98988")]
			get
			{
				return default(LayerMask);
			}
			[Token(Token = "0x60018F8")]
			[Address(RVA = "0xB98990", Offset = "0xB98990", VA = "0xB98990")]
			set
			{
			}
		}

		[Token(Token = "0x170002F1")]
		internal float anamorphicRatio
		{
			[Token(Token = "0x60018F9")]
			[Address(RVA = "0xB98998", Offset = "0xB98998", VA = "0xB98998")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018FA")]
			[Address(RVA = "0xB989A0", Offset = "0xB989A0", VA = "0xB989A0")]
			set
			{
			}
		}

		[Token(Token = "0x170002F2")]
		internal float lumaScale
		{
			[Token(Token = "0x60018FB")]
			[Address(RVA = "0xB989BC", Offset = "0xB989BC", VA = "0xB989BC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018FC")]
			[Address(RVA = "0xB989C4", Offset = "0xB989C4", VA = "0xB989C4")]
			set
			{
			}
		}

		[Token(Token = "0x170002F3")]
		internal float blooming
		{
			[Token(Token = "0x60018FD")]
			[Address(RVA = "0xB989E0", Offset = "0xB989E0", VA = "0xB989E0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x60018FE")]
			[Address(RVA = "0xB989E8", Offset = "0xB989E8", VA = "0xB989E8")]
			set
			{
			}
		}

		[Token(Token = "0x170002F4")]
		internal MinMaxRange bloomThreshold
		{
			[Token(Token = "0x60018FF")]
			[Address(RVA = "0xB98A04", Offset = "0xB98A04", VA = "0xB98A04")]
			get
			{
				return default(MinMaxRange);
			}
			[Token(Token = "0x6001900")]
			[Address(RVA = "0xB98A0C", Offset = "0xB98A0C", VA = "0xB98A0C")]
			set
			{
			}
		}

		[Token(Token = "0x170002F5")]
		internal float bloomScattering
		{
			[Token(Token = "0x6001901")]
			[Address(RVA = "0xB98A14", Offset = "0xB98A14", VA = "0xB98A14")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001902")]
			[Address(RVA = "0xB98A1C", Offset = "0xB98A1C", VA = "0xB98A1C")]
			set
			{
			}
		}

		[Token(Token = "0x170002F6")]
		internal float bloomIntensity
		{
			[Token(Token = "0x6001903")]
			[Address(RVA = "0xB98A38", Offset = "0xB98A38", VA = "0xB98A38")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001904")]
			[Address(RVA = "0xB98A40", Offset = "0xB98A40", VA = "0xB98A40")]
			set
			{
			}
		}

		[Token(Token = "0x170002F7")]
		internal bool allowLensSurface
		{
			[Token(Token = "0x6001905")]
			[Address(RVA = "0xB98A50", Offset = "0xB98A50", VA = "0xB98A50")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001906")]
			[Address(RVA = "0xB98A58", Offset = "0xB98A58", VA = "0xB98A58")]
			set
			{
			}
		}

		[Token(Token = "0x170002F8")]
		internal Texture2D lensSurfaceDirtTexture
		{
			[Token(Token = "0x6001907")]
			[Address(RVA = "0xB98A64", Offset = "0xB98A64", VA = "0xB98A64")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001908")]
			[Address(RVA = "0xB98A6C", Offset = "0xB98A6C", VA = "0xB98A6C")]
			set
			{
			}
		}

		[Token(Token = "0x170002F9")]
		internal float lensSurfaceDirtIntensity
		{
			[Token(Token = "0x6001909")]
			[Address(RVA = "0xB98A74", Offset = "0xB98A74", VA = "0xB98A74")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600190A")]
			[Address(RVA = "0xB98A7C", Offset = "0xB98A7C", VA = "0xB98A7C")]
			set
			{
			}
		}

		[Token(Token = "0x170002FA")]
		internal Texture2D lensSurfaceDirtDistortionTexture
		{
			[Token(Token = "0x600190B")]
			[Address(RVA = "0xB98A8C", Offset = "0xB98A8C", VA = "0xB98A8C")]
			get
			{
				return null;
			}
			[Token(Token = "0x600190C")]
			[Address(RVA = "0xB98A94", Offset = "0xB98A94", VA = "0xB98A94")]
			set
			{
			}
		}

		[Token(Token = "0x170002FB")]
		internal float lensSurfaceDirtDistortion
		{
			[Token(Token = "0x600190D")]
			[Address(RVA = "0xB98A9C", Offset = "0xB98A9C", VA = "0xB98A9C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600190E")]
			[Address(RVA = "0xB98AA4", Offset = "0xB98AA4", VA = "0xB98AA4")]
			set
			{
			}
		}

		[Token(Token = "0x170002FC")]
		internal Texture2D lensSurfaceDiffractionTexture
		{
			[Token(Token = "0x600190F")]
			[Address(RVA = "0xB98AB4", Offset = "0xB98AB4", VA = "0xB98AB4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001910")]
			[Address(RVA = "0xB98ABC", Offset = "0xB98ABC", VA = "0xB98ABC")]
			set
			{
			}
		}

		[Token(Token = "0x170002FD")]
		internal float lensSurfaceDiffractionIntensity
		{
			[Token(Token = "0x6001911")]
			[Address(RVA = "0xB98AC4", Offset = "0xB98AC4", VA = "0xB98AC4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001912")]
			[Address(RVA = "0xB98ACC", Offset = "0xB98ACC", VA = "0xB98ACC")]
			set
			{
			}
		}

		[Token(Token = "0x170002FE")]
		internal bool allowLensFlare
		{
			[Token(Token = "0x6001913")]
			[Address(RVA = "0xB98ADC", Offset = "0xB98ADC", VA = "0xB98ADC")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001914")]
			[Address(RVA = "0xB98AE4", Offset = "0xB98AE4", VA = "0xB98AE4")]
			set
			{
			}
		}

		[Token(Token = "0x170002FF")]
		internal LensFlareStyle lensFlareStyle
		{
			[Token(Token = "0x6001915")]
			[Address(RVA = "0xB98AF0", Offset = "0xB98AF0", VA = "0xB98AF0")]
			get
			{
				return default(LensFlareStyle);
			}
			[Token(Token = "0x6001916")]
			[Address(RVA = "0xB98AF8", Offset = "0xB98AF8", VA = "0xB98AF8")]
			set
			{
			}
		}

		[Token(Token = "0x17000300")]
		internal float lensFlareGhostFade
		{
			[Token(Token = "0x6001917")]
			[Address(RVA = "0xB98B00", Offset = "0xB98B00", VA = "0xB98B00")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001918")]
			[Address(RVA = "0xB98B08", Offset = "0xB98B08", VA = "0xB98B08")]
			set
			{
			}
		}

		[Token(Token = "0x17000301")]
		internal float lensFlareGhostIntensity
		{
			[Token(Token = "0x6001919")]
			[Address(RVA = "0xB98B18", Offset = "0xB98B18", VA = "0xB98B18")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600191A")]
			[Address(RVA = "0xB98B20", Offset = "0xB98B20", VA = "0xB98B20")]
			set
			{
			}
		}

		[Token(Token = "0x17000302")]
		internal MinMaxRange lensFlareThreshold
		{
			[Token(Token = "0x600191B")]
			[Address(RVA = "0xB98B30", Offset = "0xB98B30", VA = "0xB98B30")]
			get
			{
				return default(MinMaxRange);
			}
			[Token(Token = "0x600191C")]
			[Address(RVA = "0xB98B38", Offset = "0xB98B38", VA = "0xB98B38")]
			set
			{
			}
		}

		[Token(Token = "0x17000303")]
		internal float lensFlareScattering
		{
			[Token(Token = "0x600191D")]
			[Address(RVA = "0xB98B40", Offset = "0xB98B40", VA = "0xB98B40")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600191E")]
			[Address(RVA = "0xB98B48", Offset = "0xB98B48", VA = "0xB98B48")]
			set
			{
			}
		}

		[Token(Token = "0x17000304")]
		internal Texture2D lensFlareColorRamp
		{
			[Token(Token = "0x600191F")]
			[Address(RVA = "0xB98B64", Offset = "0xB98B64", VA = "0xB98B64")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001920")]
			[Address(RVA = "0xB98B6C", Offset = "0xB98B6C", VA = "0xB98B6C")]
			set
			{
			}
		}

		[Token(Token = "0x17000305")]
		internal float lensFlareChromaticAberration
		{
			[Token(Token = "0x6001921")]
			[Address(RVA = "0xB98B74", Offset = "0xB98B74", VA = "0xB98B74")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001922")]
			[Address(RVA = "0xB98B7C", Offset = "0xB98B7C", VA = "0xB98B7C")]
			set
			{
			}
		}

		[Token(Token = "0x17000306")]
		internal int lensFlareGhostCount
		{
			[Token(Token = "0x6001923")]
			[Address(RVA = "0xB98B84", Offset = "0xB98B84", VA = "0xB98B84")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001924")]
			[Address(RVA = "0xB98B8C", Offset = "0xB98B8C", VA = "0xB98B8C")]
			set
			{
			}
		}

		[Token(Token = "0x17000307")]
		internal float lensFlareGhostDispersal
		{
			[Token(Token = "0x6001925")]
			[Address(RVA = "0xB98BA4", Offset = "0xB98BA4", VA = "0xB98BA4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001926")]
			[Address(RVA = "0xB98BAC", Offset = "0xB98BAC", VA = "0xB98BAC")]
			set
			{
			}
		}

		[Token(Token = "0x17000308")]
		internal float lensFlareHaloFade
		{
			[Token(Token = "0x6001927")]
			[Address(RVA = "0xB98BC8", Offset = "0xB98BC8", VA = "0xB98BC8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001928")]
			[Address(RVA = "0xB98BD0", Offset = "0xB98BD0", VA = "0xB98BD0")]
			set
			{
			}
		}

		[Token(Token = "0x17000309")]
		internal float lensFlareHaloIntensity
		{
			[Token(Token = "0x6001929")]
			[Address(RVA = "0xB98BE0", Offset = "0xB98BE0", VA = "0xB98BE0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600192A")]
			[Address(RVA = "0xB98BE8", Offset = "0xB98BE8", VA = "0xB98BE8")]
			set
			{
			}
		}

		[Token(Token = "0x1700030A")]
		internal float lensFlareHaloSize
		{
			[Token(Token = "0x600192B")]
			[Address(RVA = "0xB98BF8", Offset = "0xB98BF8", VA = "0xB98BF8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600192C")]
			[Address(RVA = "0xB98C00", Offset = "0xB98C00", VA = "0xB98C00")]
			set
			{
			}
		}

		[Token(Token = "0x1700030B")]
		internal bool allowGlare
		{
			[Token(Token = "0x600192E")]
			[Address(RVA = "0xB98C64", Offset = "0xB98C64", VA = "0xB98C64")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600192F")]
			[Address(RVA = "0xB98C6C", Offset = "0xB98C6C", VA = "0xB98C6C")]
			set
			{
			}
		}

		[Token(Token = "0x1700030C")]
		internal float glareBlend
		{
			[Token(Token = "0x6001930")]
			[Address(RVA = "0xB98C78", Offset = "0xB98C78", VA = "0xB98C78")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001931")]
			[Address(RVA = "0xB98C80", Offset = "0xB98C80", VA = "0xB98C80")]
			set
			{
			}
		}

		[Token(Token = "0x1700030D")]
		internal float glareIntensity
		{
			[Token(Token = "0x6001932")]
			[Address(RVA = "0xB98C9C", Offset = "0xB98C9C", VA = "0xB98C9C")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001933")]
			[Address(RVA = "0xB98CA4", Offset = "0xB98CA4", VA = "0xB98CA4")]
			set
			{
			}
		}

		[Token(Token = "0x1700030E")]
		internal float glareAngle
		{
			[Token(Token = "0x6001934")]
			[Address(RVA = "0xB98CB4", Offset = "0xB98CB4", VA = "0xB98CB4")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001935")]
			[Address(RVA = "0xB98CBC", Offset = "0xB98CBC", VA = "0xB98CBC")]
			set
			{
			}
		}

		[Token(Token = "0x1700030F")]
		internal MinMaxRange glareThreshold
		{
			[Token(Token = "0x6001936")]
			[Address(RVA = "0xB98CDC", Offset = "0xB98CDC", VA = "0xB98CDC")]
			get
			{
				return default(MinMaxRange);
			}
			[Token(Token = "0x6001937")]
			[Address(RVA = "0xB98CE4", Offset = "0xB98CE4", VA = "0xB98CE4")]
			set
			{
			}
		}

		[Token(Token = "0x17000310")]
		internal int glareStreaks
		{
			[Token(Token = "0x6001938")]
			[Address(RVA = "0xB98CEC", Offset = "0xB98CEC", VA = "0xB98CEC")]
			get
			{
				return default(int);
			}
			[Token(Token = "0x6001939")]
			[Address(RVA = "0xB98CF4", Offset = "0xB98CF4", VA = "0xB98CF4")]
			set
			{
			}
		}

		[Token(Token = "0x17000311")]
		internal float glareScattering
		{
			[Token(Token = "0x600193A")]
			[Address(RVA = "0xB98D10", Offset = "0xB98D10", VA = "0xB98D10")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600193B")]
			[Address(RVA = "0xB98D18", Offset = "0xB98D18", VA = "0xB98D18")]
			set
			{
			}
		}

		[Token(Token = "0x17000312")]
		internal GlareStyle glareStyle
		{
			[Token(Token = "0x600193C")]
			[Address(RVA = "0xB98D28", Offset = "0xB98D28", VA = "0xB98D28")]
			get
			{
				return default(GlareStyle);
			}
			[Token(Token = "0x600193D")]
			[Address(RVA = "0xB98D30", Offset = "0xB98D30", VA = "0xB98D30")]
			set
			{
			}
		}

		[Token(Token = "0x17000313")]
		internal float glareSample0Scattering
		{
			[Token(Token = "0x600193E")]
			[Address(RVA = "0xB98D38", Offset = "0xB98D38", VA = "0xB98D38")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600193F")]
			[Address(RVA = "0xB98D40", Offset = "0xB98D40", VA = "0xB98D40")]
			set
			{
			}
		}

		[Token(Token = "0x17000314")]
		internal float glareSample0Angle
		{
			[Token(Token = "0x6001940")]
			[Address(RVA = "0xB98D48", Offset = "0xB98D48", VA = "0xB98D48")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001941")]
			[Address(RVA = "0xB98D50", Offset = "0xB98D50", VA = "0xB98D50")]
			set
			{
			}
		}

		[Token(Token = "0x17000315")]
		internal float glareSample0Intensity
		{
			[Token(Token = "0x6001942")]
			[Address(RVA = "0xB98D58", Offset = "0xB98D58", VA = "0xB98D58")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001943")]
			[Address(RVA = "0xB98D60", Offset = "0xB98D60", VA = "0xB98D60")]
			set
			{
			}
		}

		[Token(Token = "0x17000316")]
		internal float glareSample0Offset
		{
			[Token(Token = "0x6001944")]
			[Address(RVA = "0xB98D70", Offset = "0xB98D70", VA = "0xB98D70")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001945")]
			[Address(RVA = "0xB98D78", Offset = "0xB98D78", VA = "0xB98D78")]
			set
			{
			}
		}

		[Token(Token = "0x17000317")]
		internal float glareSample1Scattering
		{
			[Token(Token = "0x6001946")]
			[Address(RVA = "0xB98D80", Offset = "0xB98D80", VA = "0xB98D80")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001947")]
			[Address(RVA = "0xB98D88", Offset = "0xB98D88", VA = "0xB98D88")]
			set
			{
			}
		}

		[Token(Token = "0x17000318")]
		internal float glareSample1Angle
		{
			[Token(Token = "0x6001948")]
			[Address(RVA = "0xB98D90", Offset = "0xB98D90", VA = "0xB98D90")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001949")]
			[Address(RVA = "0xB98D98", Offset = "0xB98D98", VA = "0xB98D98")]
			set
			{
			}
		}

		[Token(Token = "0x17000319")]
		internal float glareSample1Intensity
		{
			[Token(Token = "0x600194A")]
			[Address(RVA = "0xB98DA0", Offset = "0xB98DA0", VA = "0xB98DA0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600194B")]
			[Address(RVA = "0xB98DA8", Offset = "0xB98DA8", VA = "0xB98DA8")]
			set
			{
			}
		}

		[Token(Token = "0x1700031A")]
		internal float glareSample1Offset
		{
			[Token(Token = "0x600194C")]
			[Address(RVA = "0xB98DB8", Offset = "0xB98DB8", VA = "0xB98DB8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600194D")]
			[Address(RVA = "0xB98DC0", Offset = "0xB98DC0", VA = "0xB98DC0")]
			set
			{
			}
		}

		[Token(Token = "0x1700031B")]
		internal float glareSample2Scattering
		{
			[Token(Token = "0x600194E")]
			[Address(RVA = "0xB98DC8", Offset = "0xB98DC8", VA = "0xB98DC8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600194F")]
			[Address(RVA = "0xB98DD0", Offset = "0xB98DD0", VA = "0xB98DD0")]
			set
			{
			}
		}

		[Token(Token = "0x1700031C")]
		internal float glareSample2Angle
		{
			[Token(Token = "0x6001950")]
			[Address(RVA = "0xB98DD8", Offset = "0xB98DD8", VA = "0xB98DD8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001951")]
			[Address(RVA = "0xB98DE0", Offset = "0xB98DE0", VA = "0xB98DE0")]
			set
			{
			}
		}

		[Token(Token = "0x1700031D")]
		internal float glareSample2Intensity
		{
			[Token(Token = "0x6001952")]
			[Address(RVA = "0xB98DE8", Offset = "0xB98DE8", VA = "0xB98DE8")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001953")]
			[Address(RVA = "0xB98DF0", Offset = "0xB98DF0", VA = "0xB98DF0")]
			set
			{
			}
		}

		[Token(Token = "0x1700031E")]
		internal float glareSample2Offset
		{
			[Token(Token = "0x6001954")]
			[Address(RVA = "0xB98E00", Offset = "0xB98E00", VA = "0xB98E00")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001955")]
			[Address(RVA = "0xB98E08", Offset = "0xB98E08", VA = "0xB98E08")]
			set
			{
			}
		}

		[Token(Token = "0x1700031F")]
		internal float glareSample3Scattering
		{
			[Token(Token = "0x6001956")]
			[Address(RVA = "0xB98E10", Offset = "0xB98E10", VA = "0xB98E10")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001957")]
			[Address(RVA = "0xB98E18", Offset = "0xB98E18", VA = "0xB98E18")]
			set
			{
			}
		}

		[Token(Token = "0x17000320")]
		internal float glareSample3Angle
		{
			[Token(Token = "0x6001958")]
			[Address(RVA = "0xB98E20", Offset = "0xB98E20", VA = "0xB98E20")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001959")]
			[Address(RVA = "0xB98E28", Offset = "0xB98E28", VA = "0xB98E28")]
			set
			{
			}
		}

		[Token(Token = "0x17000321")]
		internal float glareSample3Intensity
		{
			[Token(Token = "0x600195A")]
			[Address(RVA = "0xB98E30", Offset = "0xB98E30", VA = "0xB98E30")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600195B")]
			[Address(RVA = "0xB98E38", Offset = "0xB98E38", VA = "0xB98E38")]
			set
			{
			}
		}

		[Token(Token = "0x17000322")]
		internal float glareSample3Offset
		{
			[Token(Token = "0x600195C")]
			[Address(RVA = "0xB98E48", Offset = "0xB98E48", VA = "0xB98E48")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x600195D")]
			[Address(RVA = "0xB98E50", Offset = "0xB98E50", VA = "0xB98E50")]
			set
			{
			}
		}

		[Token(Token = "0x600192D")]
		[Address(RVA = "0xB98C1C", Offset = "0xB98C1C", VA = "0xB98C1C")]
		internal void SetLensFlarePreset(LensFlareStyle lensFlareStyle)
		{
		}

		[Token(Token = "0x600195E")]
		[Address(RVA = "0xB98E58", Offset = "0xB98E58", VA = "0xB98E58")]
		internal void SetGlarePreset(GlareStyle glareStyle)
		{
		}

		[Token(Token = "0x600195F")]
		[Address(RVA = "0xB98F98", Offset = "0xB98F98", VA = "0xB98F98")]
		protected Settings()
		{
		}
	}
}
namespace MK.Glow.Legacy
{
	[Token(Token = "0x20003D0")]
	internal class CameraDataLegacy : CameraData
	{
		[Token(Token = "0x6001960")]
		[Address(RVA = "0xB98FA0", Offset = "0xB98FA0", VA = "0xB98FA0")]
		public static implicit operator CameraDataLegacy(Camera input)
		{
			return null;
		}

		[Token(Token = "0x6001961")]
		[Address(RVA = "0xB99074", Offset = "0xB99074", VA = "0xB99074")]
		public CameraDataLegacy()
		{
		}
	}
	[Token(Token = "0x20003D1")]
	[RequireComponent(typeof(Camera))]
	[ImageEffectAllowedInSceneView]
	[ExecuteAlways]
	[DisallowMultipleComponent]
	public class MKGlow : MonoBehaviour
	{
		[Token(Token = "0x4001711")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool allowGeometryShaders;

		[Token(Token = "0x4001712")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool allowComputeShaders;

		[Token(Token = "0x4001713")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public RenderPriority renderPriority;

		[Token(Token = "0x4001714")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public DebugView debugView;

		[Token(Token = "0x4001715")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Quality quality;

		[Token(Token = "0x4001716")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AntiFlickerMode antiFlickerMode;

		[Token(Token = "0x4001717")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Workflow workflow;

		[Token(Token = "0x4001718")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public LayerMask selectiveRenderLayerMask;

		[Token(Token = "0x4001719")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Range(-1f, 1f)]
		public float anamorphicRatio;

		[Token(Token = "0x400171A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Range(0f, 1f)]
		public float lumaScale;

		[Token(Token = "0x400171B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Range(0f, 1f)]
		public float blooming;

		[Token(Token = "0x400171C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[MinMaxRange(0f, 10f)]
		public MinMaxRange bloomThreshold;

		[Token(Token = "0x400171D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Range(1f, 10f)]
		public float bloomScattering;

		[Token(Token = "0x400171E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float bloomIntensity;

		[Token(Token = "0x400171F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool allowLensSurface;

		[Token(Token = "0x4001720")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Texture2D lensSurfaceDirtTexture;

		[Token(Token = "0x4001721")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float lensSurfaceDirtIntensity;

		[Token(Token = "0x4001722")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public Texture2D lensSurfaceDiffractionTexture;

		[Token(Token = "0x4001723")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float lensSurfaceDiffractionIntensity;

		[Token(Token = "0x4001724")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public bool allowLensFlare;

		[Token(Token = "0x4001725")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public LensFlareStyle lensFlareStyle;

		[Token(Token = "0x4001726")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Range(0f, 25f)]
		public float lensFlareGhostFade;

		[Token(Token = "0x4001727")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float lensFlareGhostIntensity;

		[Token(Token = "0x4001728")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[MinMaxRange(0f, 10f)]
		public MinMaxRange lensFlareThreshold;

		[Token(Token = "0x4001729")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Range(0f, 8f)]
		public float lensFlareScattering;

		[Token(Token = "0x400172A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public Texture2D lensFlareColorRamp;

		[Token(Token = "0x400172B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Range(-100f, 100f)]
		public float lensFlareChromaticAberration;

		[Token(Token = "0x400172C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Range(1f, 4f)]
		public int lensFlareGhostCount;

		[Token(Token = "0x400172D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Range(-1f, 1f)]
		public float lensFlareGhostDispersal;

		[Token(Token = "0x400172E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[Range(0f, 25f)]
		public float lensFlareHaloFade;

		[Token(Token = "0x400172F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float lensFlareHaloIntensity;

		[Token(Token = "0x4001730")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[Range(0f, 1f)]
		public float lensFlareHaloSize;

		[Token(Token = "0x4001731")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool allowGlare;

		[Token(Token = "0x4001732")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Range(0f, 1f)]
		public float glareBlend;

		[Token(Token = "0x4001733")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float glareIntensity;

		[Token(Token = "0x4001734")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[Range(0f, 360f)]
		public float glareAngle;

		[Token(Token = "0x4001735")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[MinMaxRange(0f, 10f)]
		public MinMaxRange glareThreshold;

		[Token(Token = "0x4001736")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Range(1f, 4f)]
		public int glareStreaks;

		[Token(Token = "0x4001737")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public GlareStyle glareStyle;

		[Token(Token = "0x4001738")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Range(0f, 4f)]
		public float glareScattering;

		[Token(Token = "0x4001739")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[Range(0f, 10f)]
		public float glareSample0Scattering;

		[Token(Token = "0x400173A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Range(0f, 360f)]
		public float glareSample0Angle;

		[Token(Token = "0x400173B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public float glareSample0Intensity;

		[Token(Token = "0x400173C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Range(-5f, 5f)]
		public float glareSample0Offset;

		[Token(Token = "0x400173D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		[Range(0f, 10f)]
		public float glareSample1Scattering;

		[Token(Token = "0x400173E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Range(0f, 360f)]
		public float glareSample1Angle;

		[Token(Token = "0x400173F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public float glareSample1Intensity;

		[Token(Token = "0x4001740")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Range(-5f, 5f)]
		public float glareSample1Offset;

		[Token(Token = "0x4001741")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		[Range(0f, 10f)]
		public float glareSample2Scattering;

		[Token(Token = "0x4001742")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Range(0f, 360f)]
		public float glareSample2Angle;

		[Token(Token = "0x4001743")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public float glareSample2Intensity;

		[Token(Token = "0x4001744")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Range(-5f, 5f)]
		public float glareSample2Offset;

		[Token(Token = "0x4001745")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		[Range(0f, 10f)]
		public float glareSample3Scattering;

		[Token(Token = "0x4001746")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Range(0f, 360f)]
		public float glareSample3Angle;

		[Token(Token = "0x4001747")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public float glareSample3Intensity;

		[Token(Token = "0x4001748")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Range(-5f, 5f)]
		public float glareSample3Offset;

		[Token(Token = "0x4001749")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Effect _effect;

		[Token(Token = "0x400174A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private RenderTarget _source;

		[Token(Token = "0x400174B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		private RenderTarget _destination;

		[Token(Token = "0x17000323")]
		private Camera renderingCamera
		{
			[Token(Token = "0x6001962")]
			[Address(RVA = "0xB99078", Offset = "0xB99078", VA = "0xB99078")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001963")]
		[Address(RVA = "0xB990C0", Offset = "0xB990C0", VA = "0xB990C0")]
		[ContextMenu("Load Preset For Mobile")]
		private void LoadMobilePreset()
		{
		}

		[Token(Token = "0x6001964")]
		[Address(RVA = "0xB990EC", Offset = "0xB990EC", VA = "0xB990EC")]
		[ContextMenu("Load Preset For Quality")]
		private void LoadQualityPreset()
		{
		}

		[Token(Token = "0x6001965")]
		[Address(RVA = "0xB99118", Offset = "0xB99118", VA = "0xB99118")]
		public void OnEnable()
		{
		}

		[Token(Token = "0x6001966")]
		[Address(RVA = "0xB991C0", Offset = "0xB991C0", VA = "0xB991C0")]
		public void OnDisable()
		{
		}

		[Token(Token = "0x6001967")]
		[Address(RVA = "0xB991D8", Offset = "0xB991D8", VA = "0xB991D8")]
		private void OnRenderImage(RenderTexture source, RenderTexture destination)
		{
		}

		[Token(Token = "0x6001968")]
		[Address(RVA = "0xB996D0", Offset = "0xB996D0", VA = "0xB996D0")]
		public MKGlow()
		{
		}
	}
	[Token(Token = "0x20003D2")]
	internal sealed class SettingsLegacy : Settings
	{
		[Token(Token = "0x6001969")]
		[Address(RVA = "0xB993F8", Offset = "0xB993F8", VA = "0xB993F8")]
		public static implicit operator SettingsLegacy(MKGlow input)
		{
			return null;
		}

		[Token(Token = "0x600196A")]
		[Address(RVA = "0xB997E4", Offset = "0xB997E4", VA = "0xB997E4")]
		public SettingsLegacy()
		{
		}
	}
}
namespace MeshCombineStudio
{
	[Token(Token = "0x20003D3")]
	public class DisabledLODGroup : MonoBehaviour
	{
		[Token(Token = "0x400174C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public MeshCombiner meshCombiner;

		[Token(Token = "0x400174D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LODGroup lodGroup;

		[Token(Token = "0x600196B")]
		[Address(RVA = "0xB997EC", Offset = "0xB997EC", VA = "0xB997EC")]
		public DisabledLODGroup()
		{
		}
	}
	[Token(Token = "0x20003D4")]
	[ExecuteInEditMode]
	public class FindLodGroups : MonoBehaviour
	{
		[Token(Token = "0x400174E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool find;

		[Token(Token = "0x600196C")]
		[Address(RVA = "0xB997F4", Offset = "0xB997F4", VA = "0xB997F4")]
		private void Start()
		{
		}

		[Token(Token = "0x600196D")]
		[Address(RVA = "0xB99958", Offset = "0xB99958", VA = "0xB99958")]
		private void Update()
		{
		}

		[Token(Token = "0x600196E")]
		[Address(RVA = "0xB997F8", Offset = "0xB997F8", VA = "0xB997F8")]
		private void FindLods()
		{
		}

		[Token(Token = "0x600196F")]
		[Address(RVA = "0xB9996C", Offset = "0xB9996C", VA = "0xB9996C")]
		public FindLodGroups()
		{
		}
	}
	[Token(Token = "0x20003D5")]
	public class LODGroupSetup : MonoBehaviour
	{
		[Token(Token = "0x400174F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MeshCombiner meshCombiner;

		[Token(Token = "0x4001750")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LODGroup lodGroup;

		[Token(Token = "0x4001751")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int lodGroupParentIndex;

		[Token(Token = "0x4001752")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int lodCount;

		[Token(Token = "0x4001753")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private LODGroup[] lodGroups;

		[Token(Token = "0x6001970")]
		[Address(RVA = "0xB99974", Offset = "0xB99974", VA = "0xB99974")]
		public void Init(MeshCombiner meshCombiner, int lodGroupParentIndex)
		{
		}

		[Token(Token = "0x6001971")]
		[Address(RVA = "0xB99A30", Offset = "0xB99A30", VA = "0xB99A30")]
		private void GetSetup()
		{
		}

		[Token(Token = "0x6001972")]
		[Address(RVA = "0xB99B30", Offset = "0xB99B30", VA = "0xB99B30")]
		public void ApplySetup()
		{
		}

		[Token(Token = "0x6001973")]
		[Address(RVA = "0xB99E30", Offset = "0xB99E30", VA = "0xB99E30")]
		public void AddLODGroupsToChildren()
		{
		}

		[Token(Token = "0x6001974")]
		[Address(RVA = "0xB9A11C", Offset = "0xB9A11C", VA = "0xB9A11C")]
		public void RemoveLODGroupFromChildren()
		{
		}

		[Token(Token = "0x6001975")]
		[Address(RVA = "0xB9A22C", Offset = "0xB9A22C", VA = "0xB9A22C")]
		public LODGroupSetup()
		{
		}
	}
	[Token(Token = "0x20003D6")]
	public class CamGeometryCapture : MonoBehaviour
	{
		[Token(Token = "0x4001754")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ComputeShader computeDepthToArray;

		[Token(Token = "0x4001755")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Int2 resolution;

		[Token(Token = "0x4001756")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Camera cam;

		[Token(Token = "0x4001757")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform t;

		[Token(Token = "0x4001758")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public RenderTexture rtCapture;

		[Token(Token = "0x4001759")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float[] heights;

		[Token(Token = "0x400175A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Bounds bounds;

		[Token(Token = "0x400175B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float maxSize;

		[Token(Token = "0x6001976")]
		[Address(RVA = "0xB9A234", Offset = "0xB9A234", VA = "0xB9A234")]
		public void Init()
		{
		}

		[Token(Token = "0x6001977")]
		[Address(RVA = "0xB9A300", Offset = "0xB9A300", VA = "0xB9A300")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001978")]
		[Address(RVA = "0xB9A330", Offset = "0xB9A330", VA = "0xB9A330")]
		private void DisposeRenderTexture(ref RenderTexture rt)
		{
		}

		[Token(Token = "0x6001979")]
		[Address(RVA = "0xB9A304", Offset = "0xB9A304", VA = "0xB9A304")]
		public void DisposeRTCapture()
		{
		}

		[Token(Token = "0x600197A")]
		[Address(RVA = "0xB9A3D0", Offset = "0xB9A3D0", VA = "0xB9A3D0")]
		public void RemoveTrianglesBelowSurface(Transform t, MeshCombineJobManager.MeshCombineJob meshCombineJob, MeshCache.SubMeshCache newMeshCache, ref byte[] vertexIsBelow)
		{
		}

		[Token(Token = "0x600197B")]
		[Address(RVA = "0xB9A704", Offset = "0xB9A704", VA = "0xB9A704")]
		public void Capture(Bounds bounds, int collisionMask, Vector3 direction, Int2 resolution)
		{
		}

		[Token(Token = "0x600197C")]
		[Address(RVA = "0xB9AE3C", Offset = "0xB9AE3C", VA = "0xB9AE3C")]
		public void SetCamera(Vector3 direction)
		{
		}

		[Token(Token = "0x600197D")]
		[Address(RVA = "0xB9AB88", Offset = "0xB9AB88", VA = "0xB9AB88")]
		public float GetHeight(Vector3 pos)
		{
			return default(float);
		}

		[Token(Token = "0x600197E")]
		[Address(RVA = "0xB9B018", Offset = "0xB9B018", VA = "0xB9B018")]
		public CamGeometryCapture()
		{
		}
	}
	[Token(Token = "0x20003D7")]
	public class CombinedLODManager : MonoBehaviour
	{
		[Token(Token = "0x20003D8")]
		public enum LodMode
		{
			[Token(Token = "0x400176B")]
			Automatic,
			[Token(Token = "0x400176C")]
			DebugLod
		}

		[Token(Token = "0x20003D9")]
		public enum LodDistanceMode
		{
			[Token(Token = "0x400176E")]
			Automatic,
			[Token(Token = "0x400176F")]
			Manual
		}

		[Serializable]
		[Token(Token = "0x20003DA")]
		public class LOD
		{
			[Token(Token = "0x4001770")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Transform searchParent;

			[Token(Token = "0x4001771")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Sphere3 sphere;

			[Token(Token = "0x600198A")]
			[Address(RVA = "0xB9B588", Offset = "0xB9B588", VA = "0xB9B588")]
			public LOD()
			{
			}

			[Token(Token = "0x600198B")]
			[Address(RVA = "0xB9BE7C", Offset = "0xB9BE7C", VA = "0xB9BE7C")]
			public LOD(Transform searchParent)
			{
			}
		}

		[Token(Token = "0x20003DB")]
		public class Cell : BaseOctree.Cell
		{
			[Token(Token = "0x4001772")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Cell[] cells;

			[Token(Token = "0x4001773")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private AABB3 box;

			[Token(Token = "0x600198C")]
			[Address(RVA = "0xB9BEA4", Offset = "0xB9BEA4", VA = "0xB9BEA4")]
			public Cell()
			{
			}

			[Token(Token = "0x600198D")]
			[Address(RVA = "0xB9B12C", Offset = "0xB9B12C", VA = "0xB9B12C")]
			public Cell(Vector3 position, Vector3 size, int maxLevels)
			{
			}

			[Token(Token = "0x600198E")]
			[Address(RVA = "0xB9B5F8", Offset = "0xB9B5F8", VA = "0xB9B5F8")]
			public void AddMeshRenderer(MeshRenderer mr, Vector3 position, int lodLevel, int lodLevels)
			{
			}

			[Token(Token = "0x600198F")]
			[Address(RVA = "0xB9BEAC", Offset = "0xB9BEAC", VA = "0xB9BEAC")]
			private void AddMeshRendererInternal(MeshRenderer mr, Vector3 position, int lodLevel, int lodLevels)
			{
			}

			[Token(Token = "0x6001990")]
			[Address(RVA = "0xB9B790", Offset = "0xB9B790", VA = "0xB9B790")]
			public void AutoLodInternal(LOD[] lods, float lodCulledDistance)
			{
			}

			[Token(Token = "0x6001991")]
			[Address(RVA = "0xB9BB0C", Offset = "0xB9BB0C", VA = "0xB9BB0C")]
			public void LodInternal(LOD[] lods, int lodLevel)
			{
			}

			[Token(Token = "0x6001992")]
			[Address(RVA = "0xB9BCEC", Offset = "0xB9BCEC", VA = "0xB9BCEC")]
			public void DrawGizmos(LOD[] lods)
			{
			}

			[Token(Token = "0x6001993")]
			[Address(RVA = "0xB9C1DC", Offset = "0xB9C1DC", VA = "0xB9C1DC")]
			public void DrawGizmosInternal()
			{
			}
		}

		[Token(Token = "0x20003DC")]
		public class MaxCell : Cell
		{
			[Token(Token = "0x4001774")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public List<MeshRenderer>[] mrList;

			[Token(Token = "0x4001775")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public int currentLod;

			[Token(Token = "0x6001994")]
			[Address(RVA = "0xB9C3B8", Offset = "0xB9C3B8", VA = "0xB9C3B8")]
			public MaxCell()
			{
			}
		}

		[Token(Token = "0x400175C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool drawGizmos;

		[Token(Token = "0x400175D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public LOD[] lods;

		[Token(Token = "0x400175E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float[] distances;

		[Token(Token = "0x400175F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public LodDistanceMode lodDistanceMode;

		[Token(Token = "0x4001760")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public LodMode lodMode;

		[Token(Token = "0x4001761")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int showLod;

		[Token(Token = "0x4001762")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool lodCulled;

		[Token(Token = "0x4001763")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float lodCullDistance;

		[Token(Token = "0x4001764")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector3 octreeCenter;

		[Token(Token = "0x4001765")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Vector3 octreeSize;

		[Token(Token = "0x4001766")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public int maxLevels;

		[Token(Token = "0x4001767")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool search;

		[Token(Token = "0x4001768")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Cell octree;

		[Token(Token = "0x4001769")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform cameraMainT;

		[Token(Token = "0x600197F")]
		[Address(RVA = "0xB9B05C", Offset = "0xB9B05C", VA = "0xB9B05C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001980")]
		[Address(RVA = "0xB9B088", Offset = "0xB9B088", VA = "0xB9B088")]
		private void InitOctree()
		{
		}

		[Token(Token = "0x6001981")]
		[Address(RVA = "0xB9B134", Offset = "0xB9B134", VA = "0xB9B134")]
		private void Start()
		{
		}

		[Token(Token = "0x6001982")]
		[Address(RVA = "0xB9B2BC", Offset = "0xB9B2BC", VA = "0xB9B2BC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001983")]
		[Address(RVA = "0xB9B3E0", Offset = "0xB9B3E0", VA = "0xB9B3E0")]
		public void UpdateLods(MeshCombiner meshCombiner, int lodAmount)
		{
		}

		[Token(Token = "0x6001984")]
		[Address(RVA = "0xB9B590", Offset = "0xB9B590", VA = "0xB9B590")]
		public void UpdateDistances(MeshCombiner meshCombiner)
		{
		}

		[Token(Token = "0x6001985")]
		[Address(RVA = "0xB9B160", Offset = "0xB9B160", VA = "0xB9B160")]
		public void Search()
		{
		}

		[Token(Token = "0x6001986")]
		[Address(RVA = "0xB9B680", Offset = "0xB9B680", VA = "0xB9B680")]
		public void ResetOctree()
		{
		}

		[Token(Token = "0x6001987")]
		[Address(RVA = "0xB9B2E8", Offset = "0xB9B2E8", VA = "0xB9B2E8")]
		public void Lod(LodMode lodMode)
		{
		}

		[Token(Token = "0x6001988")]
		[Address(RVA = "0xB9BCC4", Offset = "0xB9BCC4", VA = "0xB9BCC4")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001989")]
		[Address(RVA = "0xB9BDF4", Offset = "0xB9BDF4", VA = "0xB9BDF4")]
		public CombinedLODManager()
		{
		}
	}
	[Token(Token = "0x20003DD")]
	public class MCSDynamicObject : MonoBehaviour
	{
		[Token(Token = "0x6001995")]
		[Address(RVA = "0xB9C3C0", Offset = "0xB9C3C0", VA = "0xB9C3C0")]
		public MCSDynamicObject()
		{
		}
	}
	[Token(Token = "0x20003DE")]
	[ExecuteInEditMode]
	public class MeshCombineJobManager : MonoBehaviour
	{
		[Serializable]
		[Token(Token = "0x20003DF")]
		public class JobSettings
		{
			[Token(Token = "0x4001786")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public CombineJobMode combineJobMode;

			[Token(Token = "0x4001787")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public ThreadAmountMode threadAmountMode;

			[Token(Token = "0x4001788")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int combineMeshesPerFrame;

			[Token(Token = "0x4001789")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
			public bool useMultiThreading;

			[Token(Token = "0x400178A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
			public bool useMainThread;

			[Token(Token = "0x400178B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public int customThreadAmount;

			[Token(Token = "0x400178C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public bool showStats;

			[Token(Token = "0x60019A7")]
			[Address(RVA = "0xB9E06C", Offset = "0xB9E06C", VA = "0xB9E06C")]
			public void CopySettings(JobSettings source)
			{
			}

			[Token(Token = "0x60019A8")]
			[Address(RVA = "0xB9E0A8", Offset = "0xB9E0A8", VA = "0xB9E0A8")]
			public void ReportStatus()
			{
			}

			[Token(Token = "0x60019A9")]
			[Address(RVA = "0xB9E2F4", Offset = "0xB9E2F4", VA = "0xB9E2F4")]
			public JobSettings()
			{
			}
		}

		[Token(Token = "0x20003E0")]
		public enum CombineJobMode
		{
			[Token(Token = "0x400178E")]
			CombineAtOnce,
			[Token(Token = "0x400178F")]
			CombinePerFrame
		}

		[Token(Token = "0x20003E1")]
		public enum ThreadAmountMode
		{
			[Token(Token = "0x4001791")]
			AllThreads,
			[Token(Token = "0x4001792")]
			HalfThreads,
			[Token(Token = "0x4001793")]
			Custom
		}

		[Token(Token = "0x20003E2")]
		public enum ThreadState
		{
			[Token(Token = "0x4001795")]
			isFree,
			[Token(Token = "0x4001796")]
			isReady,
			[Token(Token = "0x4001797")]
			isRunning,
			[Token(Token = "0x4001798")]
			hasError
		}

		[Token(Token = "0x20003E3")]
		public class MeshCombineJobsThread
		{
			[Token(Token = "0x4001799")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public int threadId;

			[Token(Token = "0x400179A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public ThreadState threadState;

			[Token(Token = "0x400179B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Queue<MeshCombineJob> meshCombineJobs;

			[Token(Token = "0x400179C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Queue<NewMeshObject> newMeshObjectsDone;

			[Token(Token = "0x60019AA")]
			[Address(RVA = "0xB9E314", Offset = "0xB9E314", VA = "0xB9E314")]
			public MeshCombineJobsThread(int threadId)
			{
			}

			[Token(Token = "0x60019AB")]
			[Address(RVA = "0xB9E3E8", Offset = "0xB9E3E8", VA = "0xB9E3E8")]
			public void ExecuteJobsThread(object state)
			{
			}
		}

		[Token(Token = "0x20003E4")]
		public class MeshCombineJob
		{
			[Token(Token = "0x400179D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public MeshCombiner meshCombiner;

			[Token(Token = "0x400179E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public MeshObjectsHolder meshObjectsHolder;

			[Token(Token = "0x400179F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Transform parent;

			[Token(Token = "0x40017A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 position;

			[Token(Token = "0x40017A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public int startIndex;

			[Token(Token = "0x40017A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public int endIndex;

			[Token(Token = "0x40017A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			public bool firstMesh;

			[Token(Token = "0x40017A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3D")]
			public bool intersectsSurface;

			[Token(Token = "0x40017A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public int backFaceTrianglesRemoved;

			[Token(Token = "0x40017A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public int trianglesRemoved;

			[Token(Token = "0x40017A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public bool abort;

			[Token(Token = "0x40017A8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public string name;

			[Token(Token = "0x60019AC")]
			[Address(RVA = "0xB9F654", Offset = "0xB9F654", VA = "0xB9F654")]
			public MeshCombineJob(MeshCombiner meshCombiner, MeshObjectsHolder meshObjectsHolder, Transform parent, Vector3 position, int startIndex, int length, bool firstMesh, bool intersectsSurface)
			{
			}
		}

		[Token(Token = "0x20003E5")]
		public class NewMeshObject
		{
			[Token(Token = "0x40017A9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static FastList<Vector3> weldVertices;

			[Token(Token = "0x40017AA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public MeshCombineJob meshCombineJob;

			[Token(Token = "0x40017AB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public MeshCache.SubMeshCache newMeshCache;

			[Token(Token = "0x40017AC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool allSkipped;

			[Token(Token = "0x40017AD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public Vector3 newPosition;

			[Token(Token = "0x40017AE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private byte[] vertexIsBelow;

			[Token(Token = "0x40017AF")]
			private const byte belowSurface = 1;

			[Token(Token = "0x40017B0")]
			private const byte aboveSurface = 2;

			[Token(Token = "0x60019AD")]
			[Address(RVA = "0xB9EA70", Offset = "0xB9EA70", VA = "0xB9EA70")]
			public NewMeshObject()
			{
			}

			[Token(Token = "0x60019AE")]
			[Address(RVA = "0xB9EAE8", Offset = "0xB9EAE8", VA = "0xB9EAE8")]
			public void Combine(MeshCombineJob meshCombineJob)
			{
			}

			[Token(Token = "0x60019AF")]
			[Address(RVA = "0xB9FAF4", Offset = "0xB9FAF4", VA = "0xB9FAF4")]
			private void PrintMissingArrayWarning(MeshCombiner meshCombiner, GameObject go, Mesh mesh, string text)
			{
			}

			[Token(Token = "0x60019B0")]
			private void HasArray<T>(ref bool hasNewArray, bool hasArray, ref T[] newArray, Array array, int vertexCount, int totalVertices, bool useDefaultValue = false, [Optional] T defaultValue)
			{
			}

			[Token(Token = "0x60019B1")]
			private void FillArray<T>(T[] array, int offset, int length, T value)
			{
			}

			[Token(Token = "0x60019B2")]
			[Address(RVA = "0xB9FD80", Offset = "0xB9FD80", VA = "0xB9FD80")]
			public void RemoveTrianglesBelowSurface(Transform t, MeshCombineJob meshCombineJob)
			{
			}

			[Token(Token = "0x60019B3")]
			[Address(RVA = "0xB9F7CC", Offset = "0xB9F7CC", VA = "0xB9F7CC")]
			public void RemoveBackFaceTriangles()
			{
			}

			[Token(Token = "0x60019B4")]
			[Address(RVA = "0xBA00EC", Offset = "0xBA00EC", VA = "0xBA00EC")]
			public void WeldVertices(MeshCombineJob meshCombineJob)
			{
			}

			[Token(Token = "0x60019B5")]
			[Address(RVA = "0xBA070C", Offset = "0xBA070C", VA = "0xBA070C")]
			private void ArrangeTriangles()
			{
			}

			[Token(Token = "0x60019B6")]
			[Address(RVA = "0xBA07D8", Offset = "0xBA07D8", VA = "0xBA07D8")]
			public void CreateMesh()
			{
			}
		}

		[Token(Token = "0x4001776")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static MeshCombineJobManager instance;

		[Token(Token = "0x4001777")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public JobSettings jobSettings;

		[NonSerialized]
		[Token(Token = "0x4001778")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FastList<NewMeshObject> newMeshObjectsPool;

		[Token(Token = "0x4001779")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Dictionary<Mesh, MeshCache> meshCacheDictionary;

		[NonSerialized]
		[Token(Token = "0x400177A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int totalNewMeshObjects;

		[Token(Token = "0x400177B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Queue<MeshCombineJob> meshCombineJobs;

		[Token(Token = "0x400177C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public MeshCombineJobsThread[] meshCombineJobsThreads;

		[Token(Token = "0x400177D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public CamGeometryCapture camGeometryCapture;

		[Token(Token = "0x400177E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int cores;

		[Token(Token = "0x400177F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public int threadAmount;

		[Token(Token = "0x4001780")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public int startThreadId;

		[Token(Token = "0x4001781")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public int endThreadId;

		[Token(Token = "0x4001782")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool abort;

		[Token(Token = "0x4001783")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private MeshCache.SubMeshCache tempMeshCache;

		[Token(Token = "0x4001784")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Ray ray;

		[Token(Token = "0x4001785")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private RaycastHit hitInfo;

		[Token(Token = "0x6001996")]
		[Address(RVA = "0xB9C3C8", Offset = "0xB9C3C8", VA = "0xB9C3C8")]
		public static MeshCombineJobManager CreateInstance(MeshCombiner meshCombiner, GameObject instantiatePrefab)
		{
			return null;
		}

		[Token(Token = "0x6001997")]
		[Address(RVA = "0xB9C7C0", Offset = "0xB9C7C0", VA = "0xB9C7C0")]
		public static void ResetMeshCache()
		{
		}

		[Token(Token = "0x6001998")]
		[Address(RVA = "0xB9C87C", Offset = "0xB9C87C", VA = "0xB9C87C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001999")]
		[Address(RVA = "0xB9C8C8", Offset = "0xB9C8C8", VA = "0xB9C8C8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x600199A")]
		[Address(RVA = "0xB9C938", Offset = "0xB9C938", VA = "0xB9C938")]
		public void Init()
		{
		}

		[Token(Token = "0x600199B")]
		[Address(RVA = "0xB9CA40", Offset = "0xB9CA40", VA = "0xB9CA40")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x600199C")]
		[Address(RVA = "0xB9CA44", Offset = "0xB9CA44", VA = "0xB9CA44")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x600199D")]
		[Address(RVA = "0xB9CE78", Offset = "0xB9CE78", VA = "0xB9CE78")]
		private void Update()
		{
		}

		[Token(Token = "0x600199E")]
		[Address(RVA = "0xB9CEA0", Offset = "0xB9CEA0", VA = "0xB9CEA0")]
		private void MyUpdate()
		{
		}

		[Token(Token = "0x600199F")]
		[Address(RVA = "0xB9C5A0", Offset = "0xB9C5A0", VA = "0xB9C5A0")]
		public void SetJobMode(JobSettings newJobSettings)
		{
		}

		[Token(Token = "0x60019A0")]
		[Address(RVA = "0xB9D4A4", Offset = "0xB9D4A4", VA = "0xB9D4A4")]
		public void AddJob(MeshCombiner meshCombiner, MeshObjectsHolder meshObjectsHolder, Transform parent, Vector3 position)
		{
		}

		[Token(Token = "0x60019A1")]
		[Address(RVA = "0xB9D880", Offset = "0xB9D880", VA = "0xB9D880")]
		private void EnqueueJob(MeshCombiner meshCombiner, MeshCombineJob meshCombineJob)
		{
		}

		[Token(Token = "0x60019A2")]
		[Address(RVA = "0xB9D91C", Offset = "0xB9D91C", VA = "0xB9D91C")]
		public int MeshIntersectsSurface(MeshCombiner meshCombiner, CachedGameObject cachedGO)
		{
			return default(int);
		}

		[Token(Token = "0x60019A3")]
		[Address(RVA = "0xB9CA98", Offset = "0xB9CA98", VA = "0xB9CA98")]
		public void AbortJobs()
		{
		}

		[Token(Token = "0x60019A4")]
		[Address(RVA = "0xB9CEA4", Offset = "0xB9CEA4", VA = "0xB9CEA4")]
		public void ExecuteJobs()
		{
		}

		[Token(Token = "0x60019A5")]
		[Address(RVA = "0xB9DB34", Offset = "0xB9DB34", VA = "0xB9DB34")]
		public void CombineMeshesDone(MeshCombineJobsThread meshCombineJobThread)
		{
		}

		[Token(Token = "0x60019A6")]
		[Address(RVA = "0xB9DE88", Offset = "0xB9DE88", VA = "0xB9DE88")]
		public MeshCombineJobManager()
		{
		}
	}
	[Token(Token = "0x20003E6")]
	public class MeshCache
	{
		[Token(Token = "0x20003E7")]
		public class SubMeshCache
		{
			[Token(Token = "0x40017B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3[] vertices;

			[Token(Token = "0x40017B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Vector3[] normals;

			[Token(Token = "0x40017B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Vector4[] tangents;

			[Token(Token = "0x40017B7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector2[] uv;

			[Token(Token = "0x40017B8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Vector2[] uv2;

			[Token(Token = "0x40017B9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Vector2[] uv3;

			[Token(Token = "0x40017BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public Vector2[] uv4;

			[Token(Token = "0x40017BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public Color32[] colors32;

			[Token(Token = "0x40017BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public int[] triangles;

			[Token(Token = "0x40017BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public bool hasNormals;

			[Token(Token = "0x40017BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
			public bool hasTangents;

			[Token(Token = "0x40017BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
			public bool hasUv;

			[Token(Token = "0x40017C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5B")]
			public bool hasUv2;

			[Token(Token = "0x40017C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public bool hasUv3;

			[Token(Token = "0x40017C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
			public bool hasUv4;

			[Token(Token = "0x40017C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
			public bool hasColors;

			[Token(Token = "0x40017C4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public int vertexCount;

			[Token(Token = "0x40017C5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
			public int triangleCount;

			[Token(Token = "0x60019B8")]
			[Address(RVA = "0xB9F730", Offset = "0xB9F730", VA = "0xB9F730")]
			public SubMeshCache()
			{
			}

			[Token(Token = "0x60019B9")]
			[Address(RVA = "0xBA10AC", Offset = "0xBA10AC", VA = "0xBA10AC")]
			public void CopySubMeshCache(SubMeshCache source)
			{
			}

			[Token(Token = "0x60019BA")]
			public void CopyArray<T>(Array sourceArray, ref T[] destinationArray, int vertexCount)
			{
			}

			[Token(Token = "0x60019BB")]
			[Address(RVA = "0xBA19D4", Offset = "0xBA19D4", VA = "0xBA19D4")]
			public SubMeshCache(Mesh mesh, int subMeshIndex)
			{
			}

			[Token(Token = "0x60019BC")]
			[Address(RVA = "0xBA18EC", Offset = "0xBA18EC", VA = "0xBA18EC")]
			public SubMeshCache(Mesh mesh, bool assignTriangles)
			{
			}

			[Token(Token = "0x60019BD")]
			[Address(RVA = "0xBA1A24", Offset = "0xBA1A24", VA = "0xBA1A24")]
			public void CheckHasArrays()
			{
			}

			[Token(Token = "0x60019BE")]
			[Address(RVA = "0xB9F7C0", Offset = "0xB9F7C0", VA = "0xB9F7C0")]
			public void ResetHasBooleans()
			{
			}

			[Token(Token = "0x60019BF")]
			[Address(RVA = "0xB9F738", Offset = "0xB9F738", VA = "0xB9F738")]
			public void Init(bool initTriangles = true)
			{
			}

			[Token(Token = "0x60019C0")]
			[Address(RVA = "0xBA1274", Offset = "0xBA1274", VA = "0xBA1274")]
			public void RebuildVertexBuffer(SubMeshCache sub, bool resizeArrays)
			{
			}
		}

		[Token(Token = "0x40017B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Mesh mesh;

		[Token(Token = "0x40017B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SubMeshCache[] subMeshCache;

		[Token(Token = "0x40017B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int subMeshCount;

		[Token(Token = "0x60019B7")]
		[Address(RVA = "0xBA1738", Offset = "0xBA1738", VA = "0xBA1738")]
		public MeshCache(Mesh mesh)
		{
		}
	}
	[Token(Token = "0x20003E8")]
	public static class MeshExtensionAlloc
	{
		[Token(Token = "0x60019C1")]
		[Address(RVA = "0xBA1AD0", Offset = "0xBA1AD0", VA = "0xBA1AD0")]
		public static void ApplyVertices(Mesh mesh, Vector3[] vertices, int length)
		{
		}

		[Token(Token = "0x60019C2")]
		[Address(RVA = "0xBA1B58", Offset = "0xBA1B58", VA = "0xBA1B58")]
		public static void ApplyNormals(Mesh mesh, Vector3[] normals, int length)
		{
		}

		[Token(Token = "0x60019C3")]
		[Address(RVA = "0xBA1BE0", Offset = "0xBA1BE0", VA = "0xBA1BE0")]
		public static void ApplyTangents(Mesh mesh, Vector4[] tangents, int length)
		{
		}

		[Token(Token = "0x60019C4")]
		[Address(RVA = "0xBA1C68", Offset = "0xBA1C68", VA = "0xBA1C68")]
		public static void ApplyUvs(Mesh mesh, int channel, Vector2[] uvs, int length)
		{
		}

		[Token(Token = "0x60019C5")]
		[Address(RVA = "0xBA1D7C", Offset = "0xBA1D7C", VA = "0xBA1D7C")]
		public static void ApplyColors32(Mesh mesh, Color32[] colors, int length)
		{
		}

		[Token(Token = "0x60019C6")]
		[Address(RVA = "0xBA1E04", Offset = "0xBA1E04", VA = "0xBA1E04")]
		public static void ApplyTriangles(Mesh mesh, int[] triangles, int length)
		{
		}
	}
	[Token(Token = "0x20003E9")]
	public enum CombineMode
	{
		[Token(Token = "0x40017C7")]
		StaticObjects,
		[Token(Token = "0x40017C8")]
		DynamicObjects
	}
	[Token(Token = "0x20003EA")]
	[ExecuteInEditMode]
	public class MeshCombiner : MonoBehaviour
	{
		[Token(Token = "0x20003EB")]
		public enum ObjectType
		{
			[Token(Token = "0x4001829")]
			Normal,
			[Token(Token = "0x400182A")]
			LodGroup,
			[Token(Token = "0x400182B")]
			LodRenderer
		}

		[Token(Token = "0x20003EC")]
		public enum HandleComponent
		{
			[Token(Token = "0x400182D")]
			Disable,
			[Token(Token = "0x400182E")]
			Destroy
		}

		[Token(Token = "0x20003ED")]
		public enum ObjectCenter
		{
			[Token(Token = "0x4001830")]
			BoundsCenter,
			[Token(Token = "0x4001831")]
			TransformPosition
		}

		[Token(Token = "0x20003EE")]
		public enum BackFaceTriangleMode
		{
			[Token(Token = "0x4001833")]
			Box,
			[Token(Token = "0x4001834")]
			Direction
		}

		[Token(Token = "0x20003EF")]
		public delegate void EventMethod(MeshCombiner meshCombiner);

		[Token(Token = "0x20003F0")]
		public enum RebakeLightingMode
		{
			[Token(Token = "0x4001836")]
			CopyLightmapUvs,
			[Token(Token = "0x4001837")]
			RegenarateLightmapUvs
		}

		[Serializable]
		[Token(Token = "0x20003F1")]
		public class SearchOptions
		{
			[Token(Token = "0x20003F2")]
			public enum ComponentCondition
			{
				[Token(Token = "0x4001854")]
				And,
				[Token(Token = "0x4001855")]
				Or,
				[Token(Token = "0x4001856")]
				Not
			}

			[Token(Token = "0x20003F3")]
			public enum LODGroupSearchMode
			{
				[Token(Token = "0x4001858")]
				LodGroup,
				[Token(Token = "0x4001859")]
				LodRenderers
			}

			[Token(Token = "0x4001838")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public bool foldoutSearchParents;

			[Token(Token = "0x4001839")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
			public bool foldoutSearchConditions;

			[Token(Token = "0x400183A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public GameObject parent;

			[Token(Token = "0x400183B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameObject[] parentGOs;

			[Token(Token = "0x400183C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ObjectCenter objectCenter;

			[Token(Token = "0x400183D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public LODGroupSearchMode lodGroupSearchMode;

			[Token(Token = "0x400183E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool useSearchBox;

			[Token(Token = "0x400183F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Bounds searchBoxBounds;

			[Token(Token = "0x4001840")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public bool searchBoxSquare;

			[Token(Token = "0x4001841")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Vector3 searchBoxPivot;

			[Token(Token = "0x4001842")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Vector3 searchBoxSize;

			[Token(Token = "0x4001843")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public bool useMaxBoundsFactor;

			[Token(Token = "0x4001844")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public float maxBoundsFactor;

			[Token(Token = "0x4001845")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public bool useVertexInputLimit;

			[Token(Token = "0x4001846")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			public int vertexInputLimit;

			[Token(Token = "0x4001847")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public bool useLayerMask;

			[Token(Token = "0x4001848")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			public LayerMask layerMask;

			[Token(Token = "0x4001849")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public bool useTag;

			[Token(Token = "0x400184A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			public string tag;

			[Token(Token = "0x400184B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public bool useNameContains;

			[Token(Token = "0x400184C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			public List<string> nameContainList;

			[Token(Token = "0x400184D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			public bool onlyActive;

			[Token(Token = "0x400184E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
			public bool onlyStatic;

			[Token(Token = "0x400184F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA2")]
			public bool onlyActiveMeshRenderers;

			[Token(Token = "0x4001850")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA3")]
			public bool useComponentsFilter;

			[Token(Token = "0x4001851")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
			public ComponentCondition componentCondition;

			[Token(Token = "0x4001852")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			public List<string> componentNameList;

			[Token(Token = "0x60019F4")]
			[Address(RVA = "0xBA3B08", Offset = "0xBA3B08", VA = "0xBA3B08")]
			public void GetSearchBoxBounds()
			{
			}

			[Token(Token = "0x60019F5")]
			[Address(RVA = "0xBA710C", Offset = "0xBA710C", VA = "0xBA710C")]
			public SearchOptions()
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003F4")]
		public class LODGroupSettings
		{
			[Token(Token = "0x400185A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public LODSettings[] lodSettings;

			[Token(Token = "0x60019F6")]
			[Address(RVA = "0xBA3188", Offset = "0xBA3188", VA = "0xBA3188")]
			public LODGroupSettings(int lodParentIndex)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003F5")]
		public class LODSettings
		{
			[Token(Token = "0x400185B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public float screenRelativeTransitionHeight;

			[Token(Token = "0x400185C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
			public float fadeTransitionWidth;

			[Token(Token = "0x60019F7")]
			[Address(RVA = "0xBA7200", Offset = "0xBA7200", VA = "0xBA7200")]
			public LODSettings(float screenRelativeTransitionHeight)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x20003F6")]
		public class LodParentHolder
		{
			[Token(Token = "0x400185D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject go;

			[Token(Token = "0x400185E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform t;

			[Token(Token = "0x400185F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool found;

			[Token(Token = "0x4001860")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public int[] lods;

			[Token(Token = "0x60019F8")]
			[Address(RVA = "0xBA5ED0", Offset = "0xBA5ED0", VA = "0xBA5ED0")]
			public void Init(int lodCount)
			{
			}

			[Token(Token = "0x60019F9")]
			[Address(RVA = "0xBA56B4", Offset = "0xBA56B4", VA = "0xBA56B4")]
			public void Create(MeshCombiner meshCombiner, int lodParentIndex)
			{
			}

			[Token(Token = "0x60019FA")]
			[Address(RVA = "0xBA5F2C", Offset = "0xBA5F2C", VA = "0xBA5F2C")]
			public void Reset()
			{
			}

			[Token(Token = "0x60019FB")]
			[Address(RVA = "0xBA7228", Offset = "0xBA7228", VA = "0xBA7228")]
			public LodParentHolder()
			{
			}
		}

		[Token(Token = "0x40017C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static List<MeshCombiner> instances;

		[Token(Token = "0x40017CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MeshCombineJobManager.JobSettings jobSettings;

		[Token(Token = "0x40017CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public LODGroupSettings[] lodGroupsSettings;

		[Token(Token = "0x40017CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ComputeShader computeDepthToArray;

		[Token(Token = "0x40017CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject instantiatePrefab;

		[Token(Token = "0x40017D0")]
		public const int maxLodCount = 8;

		[Token(Token = "0x40017D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public string saveMeshesFolder;

		[Token(Token = "0x40017D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ObjectOctree.Cell octree;

		[Token(Token = "0x40017D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<ObjectOctree.MaxCell> changedCells;

		[NonSerialized]
		[Token(Token = "0x40017D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool octreeContainsObjects;

		[Token(Token = "0x40017D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		public bool unitySettingsFoldout;

		[Token(Token = "0x40017D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public SearchOptions searchOptions;

		[Token(Token = "0x40017D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public CombineConditionSettings combineConditionSettings;

		[Token(Token = "0x40017D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool outputSettingsFoldout;

		[Token(Token = "0x40017D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public CombineMode combineMode;

		[Token(Token = "0x40017DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public int cellSize;

		[Token(Token = "0x40017DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Vector3 cellOffset;

		[Token(Token = "0x40017DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public int cellCount;

		[Token(Token = "0x40017DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public bool useVertexOutputLimit;

		[Token(Token = "0x40017DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public int vertexOutputLimit;

		[Token(Token = "0x40017DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public RebakeLightingMode rebakeLightingMode;

		[Token(Token = "0x40017E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public bool copyBakedLighting;

		[Token(Token = "0x40017E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA1")]
		public bool validCopyBakedLighting;

		[Token(Token = "0x40017E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA2")]
		public bool rebakeLighting;

		[Token(Token = "0x40017E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA3")]
		public bool validRebakeLighting;

		[Token(Token = "0x40017E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float scaleInLightmap;

		[Token(Token = "0x40017E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public bool addMeshColliders;

		[Token(Token = "0x40017E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA9")]
		public bool addMeshCollidersInRange;

		[Token(Token = "0x40017E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public Bounds addMeshCollidersBounds;

		[Token(Token = "0x40017E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public bool makeMeshesUnreadable;

		[Token(Token = "0x40017E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC5")]
		public bool removeTrianglesBelowSurface;

		[Token(Token = "0x40017EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC6")]
		public bool noColliders;

		[Token(Token = "0x40017EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public LayerMask surfaceLayerMask;

		[Token(Token = "0x40017EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float maxSurfaceHeight;

		[Token(Token = "0x40017ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public bool removeOverlappingTriangles;

		[Token(Token = "0x40017EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
		public bool removeSamePositionTriangles;

		[Token(Token = "0x40017EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public GameObject overlappingCollidersGO;

		[Token(Token = "0x40017F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public LayerMask overlapLayerMask;

		[Token(Token = "0x40017F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public int voxelizeLayer;

		[Token(Token = "0x40017F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public int lodGroupLayer;

		[Token(Token = "0x40017F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public GameObject overlappingNonCombineGO;

		[Token(Token = "0x40017F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public bool disableOverlappingNonCombineGO;

		[Token(Token = "0x40017F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF9")]
		public bool removeBackFaceTriangles;

		[Token(Token = "0x40017F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public BackFaceTriangleMode backFaceTriangleMode;

		[Token(Token = "0x40017F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public Vector3 backFaceDirection;

		[Token(Token = "0x40017F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10C")]
		public Bounds backFaceBounds;

		[Token(Token = "0x40017F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x124")]
		public bool twoSidedShadows;

		[Token(Token = "0x40017FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x125")]
		public bool weldVertices;

		[Token(Token = "0x40017FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x126")]
		public bool weldSnapVertices;

		[Token(Token = "0x40017FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public float weldSnapSize;

		[Token(Token = "0x40017FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12C")]
		public bool weldIncludeNormals;

		[Token(Token = "0x40017FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12D")]
		public bool jobSettingsFoldout;

		[Token(Token = "0x40017FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12E")]
		public bool runtimeSettingsFoldout;

		[Token(Token = "0x4001800")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12F")]
		public bool combineInRuntime;

		[Token(Token = "0x4001801")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public bool combineOnStart;

		[Token(Token = "0x4001802")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x131")]
		public bool useCombineSwapKey;

		[Token(Token = "0x4001803")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x134")]
		public KeyCode combineSwapKey;

		[Token(Token = "0x4001804")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public HandleComponent originalMeshRenderers;

		[Token(Token = "0x4001805")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		public HandleComponent originalLODGroups;

		[Token(Token = "0x4001806")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public Vector3 oldPosition;

		[Token(Token = "0x4001807")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		public Vector3 oldScale;

		[Token(Token = "0x4001808")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public LodParentHolder[] lodParentHolders;

		[Token(Token = "0x4001809")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		[HideInInspector]
		public List<GameObject> combinedGameObjects;

		[Token(Token = "0x400180A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		[HideInInspector]
		public List<CachedGameObject> foundObjects;

		[Token(Token = "0x400180B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		[HideInInspector]
		public List<CachedLodGameObject> foundLodObjects;

		[Token(Token = "0x400180C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		[HideInInspector]
		public List<LODGroup> foundLodGroups;

		[Token(Token = "0x400180D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		[HideInInspector]
		public List<Collider> foundColliders;

		[Token(Token = "0x400180E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public HashSet<LODGroup> uniqueFoundLodGroups;

		[Token(Token = "0x400180F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public HashSet<Mesh> unreadableMeshes;

		[Token(Token = "0x4001810")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public HashSet<Mesh> selectImportSettingsMeshes;

		[Token(Token = "0x4001811")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public FoundCombineConditions foundCombineConditions;

		[Token(Token = "0x4001812")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public HashSet<MeshCombineJobManager.MeshCombineJob> meshCombineJobs;

		[Token(Token = "0x4001813")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public int totalMeshCombineJobs;

		[Token(Token = "0x4001814")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		public int mrDisabledCount;

		[Token(Token = "0x4001815")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public bool combined;

		[Token(Token = "0x4001816")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B9")]
		public bool activeOriginal;

		[Token(Token = "0x4001817")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BA")]
		public bool combinedActive;

		[Token(Token = "0x4001818")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BB")]
		public bool drawGizmos;

		[Token(Token = "0x4001819")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1BC")]
		public bool drawMeshBounds;

		[Token(Token = "0x400181A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public int originalTotalVertices;

		[Token(Token = "0x400181B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		public int originalTotalTriangles;

		[Token(Token = "0x400181C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		public int totalVertices;

		[Token(Token = "0x400181D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1CC")]
		public int totalTriangles;

		[Token(Token = "0x400181E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		public int originalDrawCalls;

		[Token(Token = "0x400181F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D4")]
		public int newDrawCalls;

		[Token(Token = "0x4001820")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		public float combineTime;

		[NonSerialized]
		[Token(Token = "0x4001821")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		public MeshCombinerData data;

		[Token(Token = "0x4001822")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		public FastList<MeshColliderAdd> addMeshCollidersList;

		[Token(Token = "0x4001823")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private HashSet<Transform> uniqueLodObjects;

		[NonSerialized]
		[Token(Token = "0x4001824")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private MeshCombiner thisInstance;

		[Token(Token = "0x4001825")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private bool hasFoundFirstObject;

		[Token(Token = "0x4001826")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x204")]
		private Bounds bounds;

		[Token(Token = "0x4001827")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private Stopwatch stopwatch;

		[Token(Token = "0x14000014")]
		public event EventMethod onCombiningStart
		{
			[Token(Token = "0x60019C7")]
			[Address(RVA = "0xBA1E8C", Offset = "0xBA1E8C", VA = "0xBA1E8C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60019C8")]
			[Address(RVA = "0xBA1F28", Offset = "0xBA1F28", VA = "0xBA1F28")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000015")]
		public event EventMethod onCombiningReady
		{
			[Token(Token = "0x60019C9")]
			[Address(RVA = "0xBA1FC4", Offset = "0xBA1FC4", VA = "0xBA1FC4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x60019CA")]
			[Address(RVA = "0xBA2060", Offset = "0xBA2060", VA = "0xBA2060")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x60019CB")]
		[Address(RVA = "0xBA20FC", Offset = "0xBA20FC", VA = "0xBA20FC")]
		public void AddMeshColliders()
		{
		}

		[Token(Token = "0x60019CC")]
		[Address(RVA = "0xBA230C", Offset = "0xBA230C", VA = "0xBA230C")]
		public void ExecuteOnCombiningReady()
		{
		}

		[Token(Token = "0x60019CD")]
		[Address(RVA = "0xBA2384", Offset = "0xBA2384", VA = "0xBA2384")]
		private void Awake()
		{
		}

		[Token(Token = "0x60019CE")]
		[Address(RVA = "0xBA2454", Offset = "0xBA2454", VA = "0xBA2454")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x60019CF")]
		[Address(RVA = "0xBA2560", Offset = "0xBA2560", VA = "0xBA2560")]
		public void InitData()
		{
		}

		[Token(Token = "0x60019D0")]
		[Address(RVA = "0xBA29C8", Offset = "0xBA29C8", VA = "0xBA29C8")]
		private void Start()
		{
		}

		[Token(Token = "0x60019D1")]
		[Address(RVA = "0xBA2D1C", Offset = "0xBA2D1C", VA = "0xBA2D1C")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x60019D2")]
		[Address(RVA = "0xBA2E8C", Offset = "0xBA2E8C", VA = "0xBA2E8C")]
		public static MeshCombiner GetInstance(string name)
		{
			return null;
		}

		[Token(Token = "0x60019D3")]
		[Address(RVA = "0xBA2FC0", Offset = "0xBA2FC0", VA = "0xBA2FC0")]
		public void CopyJobSettingsToAllInstances()
		{
		}

		[Token(Token = "0x60019D4")]
		[Address(RVA = "0xBA2B00", Offset = "0xBA2B00", VA = "0xBA2B00")]
		public void InitMeshCombineJobManager()
		{
		}

		[Token(Token = "0x60019D5")]
		[Address(RVA = "0xBA30A4", Offset = "0xBA30A4", VA = "0xBA30A4")]
		public void CreateLodGroupsSettings()
		{
		}

		[Token(Token = "0x60019D6")]
		[Address(RVA = "0xBA2BA8", Offset = "0xBA2BA8", VA = "0xBA2BA8")]
		private void StartRuntime()
		{
		}

		[Token(Token = "0x60019D7")]
		[Address(RVA = "0xBA3580", Offset = "0xBA3580", VA = "0xBA3580")]
		public void DestroyCombinedObjects()
		{
		}

		[Token(Token = "0x60019D8")]
		[Address(RVA = "0xBA37EC", Offset = "0xBA37EC", VA = "0xBA37EC")]
		public void Reset()
		{
		}

		[Token(Token = "0x60019D9")]
		[Address(RVA = "0xBA3694", Offset = "0xBA3694", VA = "0xBA3694")]
		public void AbortAndClearMeshCombineJobs()
		{
		}

		[Token(Token = "0x60019DA")]
		[Address(RVA = "0xBA3BE8", Offset = "0xBA3BE8", VA = "0xBA3BE8")]
		public void ClearMeshCombineJobs()
		{
		}

		[Token(Token = "0x60019DB")]
		[Address(RVA = "0xBA3C40", Offset = "0xBA3C40", VA = "0xBA3C40")]
		public void AddObjects(Transform rootT, List<Transform> transforms, bool useSearchOptions, bool checkForLODGroups = true)
		{
		}

		[Token(Token = "0x60019DC")]
		[Address(RVA = "0xBA4858", Offset = "0xBA4858", VA = "0xBA4858")]
		public void AddObjectsAutomatically()
		{
		}

		[Token(Token = "0x60019DD")]
		[Address(RVA = "0xBA4D2C", Offset = "0xBA4D2C", VA = "0xBA4D2C")]
		public void AddFoundObjectsToOctree()
		{
		}

		[Token(Token = "0x60019DE")]
		[Address(RVA = "0xBA3A80", Offset = "0xBA3A80", VA = "0xBA3A80")]
		public void ResetOctree()
		{
		}

		[Token(Token = "0x60019DF")]
		[Address(RVA = "0xBA5190", Offset = "0xBA5190", VA = "0xBA5190")]
		public void CalcOctreeSize(Bounds bounds)
		{
		}

		[Token(Token = "0x60019E0")]
		[Address(RVA = "0xBA548C", Offset = "0xBA548C", VA = "0xBA548C")]
		public void ApplyChanges()
		{
		}

		[Token(Token = "0x60019E1")]
		[Address(RVA = "0xBA32BC", Offset = "0xBA32BC", VA = "0xBA32BC")]
		public void CombineAll()
		{
		}

		[Token(Token = "0x60019E2")]
		[Address(RVA = "0xBA3B6C", Offset = "0xBA3B6C", VA = "0xBA3B6C")]
		private void InitAndResetLodParentsCount()
		{
		}

		[Token(Token = "0x60019E3")]
		[Address(RVA = "0xBA4A44", Offset = "0xBA4A44", VA = "0xBA4A44")]
		public void AddObjectsFromSearchParent()
		{
		}

		[Token(Token = "0x60019E4")]
		[Address(RVA = "0xBA3E88", Offset = "0xBA3E88", VA = "0xBA3E88")]
		private void AddLodGroups(Transform searchParentT, LODGroup[] lodGroups, bool useSearchOptions = true)
		{
		}

		[Token(Token = "0x60019E5")]
		[Address(RVA = "0xBA45B8", Offset = "0xBA45B8", VA = "0xBA45B8")]
		private void AddTransforms(Transform searchParentT, Transform[] transforms, bool useSearchOptions = true)
		{
		}

		[Token(Token = "0x60019E6")]
		[Address(RVA = "0xBA5F58", Offset = "0xBA5F58", VA = "0xBA5F58")]
		private int ValidObject(Transform searchParentT, Transform t, ObjectType objectType, bool useSearchOptions, ref CachedGameObject cachedGameObject)
		{
			return default(int);
		}

		[Token(Token = "0x60019E7")]
		[Address(RVA = "0xBA2E6C", Offset = "0xBA2E6C", VA = "0xBA2E6C")]
		public void RestoreOriginalRenderersAndLODGroups()
		{
		}

		[Token(Token = "0x60019E8")]
		[Address(RVA = "0xBA66FC", Offset = "0xBA66FC", VA = "0xBA66FC")]
		public void SwapCombine()
		{
		}

		[Token(Token = "0x60019E9")]
		[Address(RVA = "0xBA558C", Offset = "0xBA558C", VA = "0xBA558C")]
		private void SetOriginalCollidersActive(bool active)
		{
		}

		[Token(Token = "0x60019EA")]
		[Address(RVA = "0xBA5888", Offset = "0xBA5888", VA = "0xBA5888")]
		public void ExecuteHandleObjects(bool active, HandleComponent handleOriginalObjects, HandleComponent handleOriginalLodGroups, bool includeColliders = true)
		{
		}

		[Token(Token = "0x60019EB")]
		[Address(RVA = "0xBA672C", Offset = "0xBA672C", VA = "0xBA672C")]
		private void DrawGizmosCube(Bounds bounds, Color color)
		{
		}

		[Token(Token = "0x60019EC")]
		[Address(RVA = "0xBA681C", Offset = "0xBA681C", VA = "0xBA681C")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x60019ED")]
		[Address(RVA = "0xBA4F90", Offset = "0xBA4F90", VA = "0xBA4F90")]
		private void LogOctreeInfo()
		{
		}

		[Token(Token = "0x60019EE")]
		[Address(RVA = "0xBA6AD8", Offset = "0xBA6AD8", VA = "0xBA6AD8")]
		public MeshCombiner()
		{
		}
	}
	[Token(Token = "0x20003F7")]
	public struct MeshColliderAdd
	{
		[Token(Token = "0x4001861")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public GameObject go;

		[Token(Token = "0x4001862")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public Mesh mesh;

		[Token(Token = "0x60019FC")]
		[Address(RVA = "0xBA1730", Offset = "0xBA1730", VA = "0xBA1730")]
		public MeshColliderAdd(GameObject go, Mesh mesh)
		{
		}
	}
	[Token(Token = "0x20003F8")]
	public class MeshCombinerData : MonoBehaviour
	{
		[Token(Token = "0x4001863")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public List<GameObject> combinedGameObjects;

		[Token(Token = "0x4001864")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public List<CachedGameObject> foundObjects;

		[Token(Token = "0x4001865")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public List<CachedLodGameObject> foundLodObjects;

		[Token(Token = "0x4001866")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[HideInInspector]
		public List<LODGroup> foundLodGroups;

		[Token(Token = "0x4001867")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[HideInInspector]
		public List<Collider> foundColliders;

		[Token(Token = "0x60019FD")]
		[Address(RVA = "0xBA7230", Offset = "0xBA7230", VA = "0xBA7230")]
		private void OnValidate()
		{
		}

		[Token(Token = "0x60019FE")]
		[Address(RVA = "0xBA3968", Offset = "0xBA3968", VA = "0xBA3968")]
		public void ClearFound()
		{
		}

		[Token(Token = "0x60019FF")]
		[Address(RVA = "0xBA723C", Offset = "0xBA723C", VA = "0xBA723C")]
		public MeshCombinerData()
		{
		}
	}
	[Token(Token = "0x20003F9")]
	[ExecuteInEditMode]
	public class ObjectSpawner : MonoBehaviour
	{
		[Token(Token = "0x4001868")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject[] objects;

		[Token(Token = "0x4001869")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 spawnArea;

		[Token(Token = "0x400186A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float density;

		[Token(Token = "0x400186B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector2 scaleRange;

		[Token(Token = "0x400186C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 rotationRange;

		[Token(Token = "0x400186D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Vector2 heightRange;

		[Token(Token = "0x400186E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float scaleMulti;

		[Token(Token = "0x400186F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float metersBetweenSpawning;

		[Token(Token = "0x4001870")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool spawnInRuntime;

		[Token(Token = "0x4001871")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		public bool spawn;

		[Token(Token = "0x4001872")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
		public bool deleteChildren;

		[Token(Token = "0x4001873")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform t;

		[Token(Token = "0x6001A00")]
		[Address(RVA = "0xBA73C8", Offset = "0xBA73C8", VA = "0xBA73C8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001A01")]
		[Address(RVA = "0xBA7878", Offset = "0xBA7878", VA = "0xBA7878")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A02")]
		[Address(RVA = "0xBA78B4", Offset = "0xBA78B4", VA = "0xBA78B4")]
		public void DeleteChildren()
		{
		}

		[Token(Token = "0x6001A03")]
		[Address(RVA = "0xBA7404", Offset = "0xBA7404", VA = "0xBA7404")]
		public void Spawn()
		{
		}

		[Token(Token = "0x6001A04")]
		[Address(RVA = "0xBA7A04", Offset = "0xBA7A04", VA = "0xBA7A04")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001A05")]
		[Address(RVA = "0xBA7A50", Offset = "0xBA7A50", VA = "0xBA7A50")]
		public ObjectSpawner()
		{
		}
	}
	[Token(Token = "0x20003FA")]
	public class RemoveGeometryBelowTerrain : MonoBehaviour
	{
		[Token(Token = "0x4001874")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int totalTriangles;

		[Token(Token = "0x4001875")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private int removeTriangles;

		[Token(Token = "0x4001876")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private int skippedObjects;

		[Token(Token = "0x4001877")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public List<Transform> terrains;

		[Token(Token = "0x4001878")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<Transform> meshTerrains;

		[Token(Token = "0x4001879")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Bounds[] terrainBounds;

		[Token(Token = "0x400187A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Bounds[] meshBounds;

		[Token(Token = "0x400187B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Terrain[] terrainComponents;

		[Token(Token = "0x400187C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Terrain[] terrainArray;

		[Token(Token = "0x400187D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Bounds[] terrainBoundsArray;

		[Token(Token = "0x400187E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private MeshRenderer[] mrs;

		[Token(Token = "0x400187F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Mesh[] meshTerrainComponents;

		[Token(Token = "0x4001880")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Mesh[] meshArray;

		[Token(Token = "0x4001881")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool runOnStart;

		[Token(Token = "0x6001A06")]
		[Address(RVA = "0xBA7A98", Offset = "0xBA7A98", VA = "0xBA7A98")]
		private void Start()
		{
		}

		[Token(Token = "0x6001A07")]
		[Address(RVA = "0xBA7AC8", Offset = "0xBA7AC8", VA = "0xBA7AC8")]
		public void Remove(GameObject go)
		{
		}

		[Token(Token = "0x6001A08")]
		[Address(RVA = "0xBA7E24", Offset = "0xBA7E24", VA = "0xBA7E24")]
		public void RemoveMesh(Transform t, Mesh mesh)
		{
		}

		[Token(Token = "0x6001A09")]
		[Address(RVA = "0xBA7FEC", Offset = "0xBA7FEC", VA = "0xBA7FEC")]
		public bool IsMeshUnderTerrain(Transform t, Mesh mesh)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A0A")]
		[Address(RVA = "0xBA83A8", Offset = "0xBA83A8", VA = "0xBA83A8")]
		public void GetTerrainComponents()
		{
		}

		[Token(Token = "0x6001A0B")]
		[Address(RVA = "0xBA84D0", Offset = "0xBA84D0", VA = "0xBA84D0")]
		public void GetMeshRenderersAndComponents()
		{
		}

		[Token(Token = "0x6001A0C")]
		[Address(RVA = "0xBA869C", Offset = "0xBA869C", VA = "0xBA869C")]
		public void CreateTerrainBounds()
		{
		}

		[Token(Token = "0x6001A0D")]
		[Address(RVA = "0xBA890C", Offset = "0xBA890C", VA = "0xBA890C")]
		public void MakeIntersectLists(Bounds bounds)
		{
		}

		[Token(Token = "0x6001A0E")]
		[Address(RVA = "0xBA8EA0", Offset = "0xBA8EA0", VA = "0xBA8EA0")]
		public int InterectTerrain(Vector3 pos)
		{
			return default(int);
		}

		[Token(Token = "0x6001A0F")]
		[Address(RVA = "0xBA8F34", Offset = "0xBA8F34", VA = "0xBA8F34")]
		public int InterectMesh(Vector3 pos)
		{
			return default(int);
		}

		[Token(Token = "0x6001A10")]
		[Address(RVA = "0xBA8FC8", Offset = "0xBA8FC8", VA = "0xBA8FC8")]
		public float GetTerrainHeight(Vector3 pos)
		{
			return default(float);
		}

		[Token(Token = "0x6001A11")]
		[Address(RVA = "0xBA80A8", Offset = "0xBA80A8", VA = "0xBA80A8")]
		public void RemoveTriangles(Transform t, List<int> newTriangles, Vector3[] vertices)
		{
		}

		[Token(Token = "0x6001A12")]
		[Address(RVA = "0xBA90AC", Offset = "0xBA90AC", VA = "0xBA90AC")]
		public RemoveGeometryBelowTerrain()
		{
		}
	}
	[Token(Token = "0x20003FB")]
	public class SwapCombineKey : MonoBehaviour
	{
		[Token(Token = "0x4001882")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static SwapCombineKey instance;

		[Token(Token = "0x4001883")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<MeshCombiner> meshCombinerList;

		[Token(Token = "0x4001884")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private MeshCombiner meshCombiner;

		[Token(Token = "0x4001885")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GUIStyle textStyle;

		[Token(Token = "0x6001A13")]
		[Address(RVA = "0xBA914C", Offset = "0xBA914C", VA = "0xBA914C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001A14")]
		[Address(RVA = "0xBA9244", Offset = "0xBA9244", VA = "0xBA9244")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001A15")]
		[Address(RVA = "0xBA928C", Offset = "0xBA928C", VA = "0xBA928C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A16")]
		[Address(RVA = "0xBA937C", Offset = "0xBA937C", VA = "0xBA937C")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6001A17")]
		[Address(RVA = "0xBA980C", Offset = "0xBA980C", VA = "0xBA980C")]
		public SwapCombineKey()
		{
		}
	}
	[Token(Token = "0x20003FC")]
	public class CachedComponents : MonoBehaviour
	{
		[Token(Token = "0x4001886")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject go;

		[Token(Token = "0x4001887")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform t;

		[Token(Token = "0x4001888")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MeshRenderer mr;

		[Token(Token = "0x4001889")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public MeshFilter mf;

		[Token(Token = "0x400188A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GarbageCollectMesh garbageCollectMesh;

		[Token(Token = "0x6001A18")]
		[Address(RVA = "0xBA9888", Offset = "0xBA9888", VA = "0xBA9888")]
		public CachedComponents()
		{
		}
	}
	[Token(Token = "0x20003FD")]
	public class Console : MonoBehaviour
	{
		[Token(Token = "0x20003FE")]
		public class LogEntry
		{
			[Token(Token = "0x40018A0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public string logString;

			[Token(Token = "0x40018A1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public string stackTrace;

			[Token(Token = "0x40018A2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LogType logType;

			[Token(Token = "0x40018A3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
			public int commandType;

			[Token(Token = "0x40018A4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public bool unityLog;

			[Token(Token = "0x40018A5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			public float tStamp;

			[Token(Token = "0x40018A6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public GameObject go;

			[Token(Token = "0x40018A7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public MeshCombiner meshCombiner;

			[Token(Token = "0x6001A39")]
			[Address(RVA = "0xBAA334", Offset = "0xBAA334", VA = "0xBAA334")]
			public LogEntry(string logString, string stackTrace, LogType logType, bool unityLog = false, int commandType = 0, [Optional] GameObject go, [Optional] MeshCombiner meshCombiner)
			{
			}
		}

		[Token(Token = "0x400188B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static Console instance;

		[Token(Token = "0x400188C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public KeyCode consoleKey;

		[Token(Token = "0x400188D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool logActive;

		[Token(Token = "0x400188E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool showConsole;

		[Token(Token = "0x400188F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public bool showOnError;

		[Token(Token = "0x4001890")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
		public bool combineAutomatic;

		[Token(Token = "0x4001891")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool showLast;

		[Token(Token = "0x4001892")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		private bool setFocus;

		[Token(Token = "0x4001893")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject selectGO;

		[Token(Token = "0x4001894")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<LogEntry> logs;

		[Token(Token = "0x4001895")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rect window;

		[Token(Token = "0x4001896")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Rect inputRect;

		[Token(Token = "0x4001897")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rect logRect;

		[Token(Token = "0x4001898")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Rect vScrollRect;

		[Token(Token = "0x4001899")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private string inputText;

		[Token(Token = "0x400189A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private float scrollPos;

		[Token(Token = "0x400189B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private int lines;

		[Token(Token = "0x400189C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool showUnityLog;

		[Token(Token = "0x400189D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x89")]
		private bool showInputLog;

		[Token(Token = "0x400189E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private MeshCombiner[] meshCombiners;

		[Token(Token = "0x400189F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private MeshCombiner selectedMeshCombiner;

		[Token(Token = "0x6001A19")]
		[Address(RVA = "0xBA9890", Offset = "0xBA9890", VA = "0xBA9890")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001A1A")]
		[Address(RVA = "0xBA9988", Offset = "0xBA9988", VA = "0xBA9988")]
		private void ReportStartup()
		{
		}

		[Token(Token = "0x6001A1B")]
		[Address(RVA = "0xBA9918", Offset = "0xBA9918", VA = "0xBA9918")]
		private void FindMeshCombiners()
		{
		}

		[Token(Token = "0x6001A1C")]
		[Address(RVA = "0xBA9B3C", Offset = "0xBA9B3C", VA = "0xBA9B3C")]
		private void ReportMeshCombiners(bool reportSelected = true)
		{
		}

		[Token(Token = "0x6001A1D")]
		[Address(RVA = "0xBA9EA4", Offset = "0xBA9EA4", VA = "0xBA9EA4")]
		private void ReportMeshCombiner(MeshCombiner meshCombiner, bool foundText = false)
		{
		}

		[Token(Token = "0x6001A1E")]
		[Address(RVA = "0xBA9C44", Offset = "0xBA9C44", VA = "0xBA9C44")]
		public int SelectMeshCombiner(string name)
		{
			return default(int);
		}

		[Token(Token = "0x6001A1F")]
		[Address(RVA = "0xBAA1EC", Offset = "0xBAA1EC", VA = "0xBAA1EC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001A20")]
		[Address(RVA = "0xBAA26C", Offset = "0xBAA26C", VA = "0xBAA26C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001A21")]
		[Address(RVA = "0xBAA2EC", Offset = "0xBAA2EC", VA = "0xBAA2EC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001A22")]
		[Address(RVA = "0xBA6990", Offset = "0xBA6990", VA = "0xBA6990")]
		public static void Log(string logString, int commandType = 0, [Optional] GameObject go, [Optional] MeshCombiner meshCombiner)
		{
		}

		[Token(Token = "0x6001A23")]
		[Address(RVA = "0xBAA398", Offset = "0xBAA398", VA = "0xBAA398")]
		private void HandleLog(string logString, string stackTrace, LogType logType)
		{
		}

		[Token(Token = "0x6001A24")]
		[Address(RVA = "0xBAA4E0", Offset = "0xBAA4E0", VA = "0xBAA4E0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A25")]
		[Address(RVA = "0xBAA4C8", Offset = "0xBAA4C8", VA = "0xBAA4C8")]
		private void SetConsoleActive(bool active)
		{
		}

		[Token(Token = "0x6001A26")]
		[Address(RVA = "0xBAA518", Offset = "0xBAA518", VA = "0xBAA518")]
		private void ExecuteCommand(string cmd)
		{
		}

		[Token(Token = "0x6001A27")]
		[Address(RVA = "0xBAC618", Offset = "0xBAC618", VA = "0xBAC618")]
		private void DirSort()
		{
		}

		[Token(Token = "0x6001A28")]
		[Address(RVA = "0xBAC474", Offset = "0xBAC474", VA = "0xBAC474")]
		private void DirSort(string name)
		{
		}

		[Token(Token = "0x6001A29")]
		[Address(RVA = "0xBAC670", Offset = "0xBAC670", VA = "0xBAC670")]
		public void SortLog(GameObject[] gos, bool showMeshInfo = false)
		{
		}

		[Token(Token = "0x6001A2A")]
		[Address(RVA = "0xBACCB8", Offset = "0xBACCB8", VA = "0xBACCB8")]
		private string GetMeshInfo(GameObject go, ref int meshCount)
		{
			return null;
		}

		[Token(Token = "0x6001A2B")]
		[Address(RVA = "0xBACFAC", Offset = "0xBACFAC", VA = "0xBACFAC")]
		private void TimeStep(string cmd)
		{
		}

		[Token(Token = "0x6001A2C")]
		[Address(RVA = "0xBACFD8", Offset = "0xBACFD8", VA = "0xBACFD8")]
		private void TimeScale(string cmd)
		{
		}

		[Token(Token = "0x6001A2D")]
		[Address(RVA = "0xBABE68", Offset = "0xBABE68", VA = "0xBABE68")]
		private void Clear(LogEntry log, string cmd)
		{
		}

		[Token(Token = "0x6001A2E")]
		[Address(RVA = "0xBAC1A4", Offset = "0xBAC1A4", VA = "0xBAC1A4")]
		private void DirAll()
		{
		}

		[Token(Token = "0x6001A2F")]
		[Address(RVA = "0xBAB35C", Offset = "0xBAB35C", VA = "0xBAB35C")]
		private void Dir()
		{
		}

		[Token(Token = "0x6001A30")]
		[Address(RVA = "0xBAB86C", Offset = "0xBAB86C", VA = "0xBAB86C")]
		private void Components(LogEntry log)
		{
		}

		[Token(Token = "0x6001A31")]
		[Address(RVA = "0xBAD158", Offset = "0xBAD158", VA = "0xBAD158")]
		private void ShowPath(bool showLines = true)
		{
		}

		[Token(Token = "0x6001A32")]
		[Address(RVA = "0xBAD004", Offset = "0xBAD004", VA = "0xBAD004")]
		private string GetPath(GameObject go)
		{
			return null;
		}

		[Token(Token = "0x6001A33")]
		[Address(RVA = "0xBAB9D4", Offset = "0xBAB9D4", VA = "0xBAB9D4")]
		private void CD(LogEntry log, string name)
		{
		}

		[Token(Token = "0x6001A34")]
		[Address(RVA = "0xBABBC8", Offset = "0xBABBC8", VA = "0xBABBC8")]
		public void SetActiveContains(string textContains, bool active)
		{
		}

		[Token(Token = "0x6001A35")]
		[Address(RVA = "0xBAC05C", Offset = "0xBAC05C", VA = "0xBAC05C")]
		public void DirContains(string textContains)
		{
		}

		[Token(Token = "0x6001A36")]
		[Address(RVA = "0xBAD224", Offset = "0xBAD224", VA = "0xBAD224")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6001A37")]
		[Address(RVA = "0xBADE8C", Offset = "0xBADE8C", VA = "0xBADE8C")]
		private void AnimateColor(Color col, LogEntry log, float multi)
		{
		}

		[Token(Token = "0x6001A38")]
		[Address(RVA = "0xBADF78", Offset = "0xBADF78", VA = "0xBADF78")]
		public Console()
		{
		}
	}
	[Token(Token = "0x20003FF")]
	public class DirectDraw : MonoBehaviour
	{
		[Token(Token = "0x40018A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private MeshRenderer[] mrs;

		[Token(Token = "0x40018A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Mesh[] meshes;

		[Token(Token = "0x40018AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Material[] mats;

		[Token(Token = "0x40018AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3[] positions;

		[Token(Token = "0x40018AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Quaternion[] rotations;

		[Token(Token = "0x6001A3A")]
		[Address(RVA = "0xBAE018", Offset = "0xBAE018", VA = "0xBAE018")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001A3B")]
		[Address(RVA = "0xBAE2F4", Offset = "0xBAE2F4", VA = "0xBAE2F4")]
		private void SetMeshRenderersEnabled(bool enabled)
		{
		}

		[Token(Token = "0x6001A3C")]
		[Address(RVA = "0xBAE35C", Offset = "0xBAE35C", VA = "0xBAE35C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A3D")]
		[Address(RVA = "0xBAE4BC", Offset = "0xBAE4BC", VA = "0xBAE4BC")]
		public DirectDraw()
		{
		}
	}
	[Token(Token = "0x2000400")]
	public class DisabledLodMeshRender : MonoBehaviour
	{
		[Token(Token = "0x40018AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public MeshCombiner meshCombiner;

		[Token(Token = "0x40018AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CachedLodGameObject cachedLodGO;

		[Token(Token = "0x6001A3E")]
		[Address(RVA = "0xBAE4C4", Offset = "0xBAE4C4", VA = "0xBAE4C4")]
		public DisabledLodMeshRender()
		{
		}
	}
	[Token(Token = "0x2000401")]
	public class DisabledMeshRenderer : MonoBehaviour
	{
		[Token(Token = "0x40018AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public MeshCombiner meshCombiner;

		[Token(Token = "0x40018B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public CachedGameObject cachedGO;

		[Token(Token = "0x6001A3F")]
		[Address(RVA = "0xBAE4CC", Offset = "0xBAE4CC", VA = "0xBAE4CC")]
		public DisabledMeshRenderer()
		{
		}
	}
	[Token(Token = "0x2000402")]
	public class FastListBase
	{
		[Token(Token = "0x40018B1")]
		protected const int defaultCapacity = 4;

		[Token(Token = "0x40018B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public int Count;

		[Token(Token = "0x40018B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		protected int _count;

		[Token(Token = "0x40018B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected int arraySize;

		[Token(Token = "0x6001A40")]
		[Address(RVA = "0xBAE4D4", Offset = "0xBAE4D4", VA = "0xBAE4D4")]
		public FastListBase()
		{
		}
	}
	[Token(Token = "0x2000403")]
	public class FastListBase<T> : FastListBase
	{
		[Token(Token = "0x40018B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public T[] items;

		[Token(Token = "0x6001A41")]
		protected void DoubleCapacity()
		{
		}

		[Token(Token = "0x6001A42")]
		public FastListBase()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000404")]
	public class FastList<T> : FastListBase<T>
	{
		[Token(Token = "0x6001A43")]
		public FastList()
		{
		}

		[Token(Token = "0x6001A44")]
		public FastList(bool reserve, int reserved)
		{
		}

		[Token(Token = "0x6001A45")]
		public FastList(int capacity)
		{
		}

		[Token(Token = "0x6001A46")]
		public FastList(FastList<T> list)
		{
		}

		[Token(Token = "0x6001A47")]
		public FastList(T[] items)
		{
		}

		[Token(Token = "0x6001A48")]
		protected void SetCapacity(int capacity)
		{
		}

		[Token(Token = "0x6001A49")]
		public void SetCount(int count)
		{
		}

		[Token(Token = "0x6001A4A")]
		public void EnsureCount(int count)
		{
		}

		[Token(Token = "0x6001A4B")]
		public virtual void SetArray(T[] items)
		{
		}

		[Token(Token = "0x6001A4C")]
		public int AddUnique(T item)
		{
			return default(int);
		}

		[Token(Token = "0x6001A4D")]
		public bool Contains(T item)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A4E")]
		public int IndexOf(T item)
		{
			return default(int);
		}

		[Token(Token = "0x6001A4F")]
		public T GetIndex(T item)
		{
			return (T)null;
		}

		[Token(Token = "0x6001A50")]
		public virtual int Add(T item)
		{
			return default(int);
		}

		[Token(Token = "0x6001A51")]
		public virtual int AddThreadSafe(T item)
		{
			return default(int);
		}

		[Token(Token = "0x6001A52")]
		public virtual void Add(T item, T item2)
		{
		}

		[Token(Token = "0x6001A53")]
		public virtual void Add(T item, T item2, T item3)
		{
		}

		[Token(Token = "0x6001A54")]
		public virtual void Add(T item, T item2, T item3, T item4)
		{
		}

		[Token(Token = "0x6001A55")]
		public virtual void Add(T item, T item2, T item3, T item4, T item5)
		{
		}

		[Token(Token = "0x6001A56")]
		public virtual void Insert(int index, T item)
		{
		}

		[Token(Token = "0x6001A57")]
		public virtual void AddRange(T[] arrayItems)
		{
		}

		[Token(Token = "0x6001A58")]
		public virtual void AddRange(T[] arrayItems, int startIndex, int length)
		{
		}

		[Token(Token = "0x6001A59")]
		public virtual void AddRange(FastList<T> list)
		{
		}

		[Token(Token = "0x6001A5A")]
		public virtual int GrabListThreadSafe(FastList<T> threadList, bool fastClear = false)
		{
			return default(int);
		}

		[Token(Token = "0x6001A5B")]
		public virtual void ChangeRange(int startIndex, T[] arrayItems)
		{
		}

		[Token(Token = "0x6001A5C")]
		public virtual bool Remove(T item, bool weakReference = false)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A5D")]
		public virtual void RemoveAt(int index)
		{
		}

		[Token(Token = "0x6001A5E")]
		public virtual void RemoveLast()
		{
		}

		[Token(Token = "0x6001A5F")]
		public virtual void RemoveRange(int index, int length)
		{
		}

		[Token(Token = "0x6001A60")]
		public virtual T Dequeue()
		{
			return (T)null;
		}

		[Token(Token = "0x6001A61")]
		public virtual T Dequeue(int index)
		{
			return (T)null;
		}

		[Token(Token = "0x6001A62")]
		public virtual void Clear()
		{
		}

		[Token(Token = "0x6001A63")]
		public virtual void ClearThreadSafe()
		{
		}

		[Token(Token = "0x6001A64")]
		public virtual void ClearRange(int startIndex)
		{
		}

		[Token(Token = "0x6001A65")]
		public virtual void FastClear()
		{
		}

		[Token(Token = "0x6001A66")]
		public virtual void FastClear(int newCount)
		{
		}

		[Token(Token = "0x6001A67")]
		public virtual T[] ToArray()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000405")]
	public class SortedFastList<T> : FastList<T>
	{
		[Token(Token = "0x6001A68")]
		public new void RemoveAt(int index)
		{
		}

		[Token(Token = "0x6001A69")]
		public new void RemoveRange(int index, int endIndex)
		{
		}

		[Token(Token = "0x6001A6A")]
		public SortedFastList()
		{
		}
	}
	[Token(Token = "0x2000406")]
	[ExecuteInEditMode]
	public class GarbageCollectMesh : MonoBehaviour
	{
		[Token(Token = "0x40018B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Mesh mesh;

		[Token(Token = "0x6001A6B")]
		[Address(RVA = "0xBAE4DC", Offset = "0xBAE4DC", VA = "0xBAE4DC")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001A6C")]
		[Address(RVA = "0xBAE56C", Offset = "0xBAE56C", VA = "0xBAE56C")]
		public GarbageCollectMesh()
		{
		}
	}
	[Token(Token = "0x2000407")]
	[ExecuteInEditMode]
	public class LightmapSettings : MonoBehaviour
	{
		[Token(Token = "0x40018B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MeshRenderer mr;

		[Token(Token = "0x40018B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int lightmapIndex;

		[Token(Token = "0x6001A6D")]
		[Address(RVA = "0xBAE574", Offset = "0xBAE574", VA = "0xBAE574")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001A6E")]
		[Address(RVA = "0xBAE5F8", Offset = "0xBAE5F8", VA = "0xBAE5F8")]
		public LightmapSettings()
		{
		}
	}
	[Token(Token = "0x2000408")]
	public struct AABB3
	{
		[Token(Token = "0x40018B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 min;

		[Token(Token = "0x40018BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 max;

		[Token(Token = "0x6001A6F")]
		[Address(RVA = "0xBAE600", Offset = "0xBAE600", VA = "0xBAE600")]
		public AABB3(Vector3 min, Vector3 max)
		{
		}
	}
	[Token(Token = "0x2000409")]
	public struct Triangle3
	{
		[Token(Token = "0x40018BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 a;

		[Token(Token = "0x40018BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public Vector3 b;

		[Token(Token = "0x40018BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 c;

		[Token(Token = "0x40018BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 dirAb;

		[Token(Token = "0x40018BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 dirAc;

		[Token(Token = "0x40018C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Vector3 dirBc;

		[Token(Token = "0x40018C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 h1;

		[Token(Token = "0x40018C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float ab;

		[Token(Token = "0x40018C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float ac;

		[Token(Token = "0x40018C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float bc;

		[Token(Token = "0x40018C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float area;

		[Token(Token = "0x40018C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float h;

		[Token(Token = "0x40018C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float ah;

		[Token(Token = "0x40018C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float hb;

		[Token(Token = "0x6001A70")]
		[Address(RVA = "0xBAE610", Offset = "0xBAE610", VA = "0xBAE610")]
		public void Calc()
		{
		}
	}
	[Token(Token = "0x200040A")]
	public struct Sphere3
	{
		[Token(Token = "0x40018C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 center;

		[Token(Token = "0x40018CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float radius;

		[Token(Token = "0x6001A71")]
		[Address(RVA = "0xBAEA38", Offset = "0xBAEA38", VA = "0xBAEA38")]
		public Sphere3(Vector3 center, float radius)
		{
		}
	}
	[Token(Token = "0x200040B")]
	public struct Int2
	{
		[Token(Token = "0x40018CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int x;

		[Token(Token = "0x40018CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int y;

		[Token(Token = "0x6001A72")]
		[Address(RVA = "0xBAEA44", Offset = "0xBAEA44", VA = "0xBAEA44")]
		public Int2(int x, int y)
		{
		}
	}
	[Token(Token = "0x200040C")]
	public struct Int3
	{
		[Token(Token = "0x40018CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int x;

		[Token(Token = "0x40018CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int y;

		[Token(Token = "0x40018CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public int z;

		[Token(Token = "0x6001A73")]
		[Address(RVA = "0xBAEA4C", Offset = "0xBAEA4C", VA = "0xBAEA4C")]
		public Int3(int x, int y, int z)
		{
		}

		[Token(Token = "0x6001A74")]
		[Address(RVA = "0xBAEA58", Offset = "0xBAEA58", VA = "0xBAEA58")]
		public static Int3 operator +(Int3 a, Int3 b)
		{
			return default(Int3);
		}
	}
	[Token(Token = "0x200040D")]
	public static class Mathw
	{
		[Token(Token = "0x40018D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int[] bits;

		[Token(Token = "0x6001A75")]
		[Address(RVA = "0xBAEA74", Offset = "0xBAEA74", VA = "0xBAEA74")]
		public static Vector3 Clamp(Vector3 v, float min, float max)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001A76")]
		[Address(RVA = "0xBAEAA8", Offset = "0xBAEAA8", VA = "0xBAEAA8")]
		public static Vector3 FloatToVector3(float v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001A77")]
		[Address(RVA = "0xBAEAB4", Offset = "0xBAEAB4", VA = "0xBAEAB4")]
		public static float SinDeg(float angle)
		{
			return default(float);
		}

		[Token(Token = "0x6001A78")]
		[Address(RVA = "0xBA5478", Offset = "0xBA5478", VA = "0xBA5478")]
		public static float GetMax(Vector3 v)
		{
			return default(float);
		}

		[Token(Token = "0x6001A79")]
		[Address(RVA = "0xBAEAC4", Offset = "0xBAEAC4", VA = "0xBAEAC4")]
		public static Vector3 SetMin(Vector3 v, float min)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001A7A")]
		[Address(RVA = "0xBAEAE0", Offset = "0xBAEAE0", VA = "0xBAEAE0")]
		public static Vector3 Snap(Vector3 v, float snapSize)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001A7B")]
		[Address(RVA = "0xBA0554", Offset = "0xBA0554", VA = "0xBA0554")]
		public static Vector3 SnapRound(Vector3 v, float snapSize)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001A7C")]
		[Address(RVA = "0xBAEB08", Offset = "0xBAEB08", VA = "0xBAEB08")]
		public static Vector3 Abs(Vector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001A7D")]
		[Address(RVA = "0xBAEB30", Offset = "0xBAEB30", VA = "0xBAEB30")]
		public static bool IntersectAABB3Sphere3(AABB3 box, Sphere3 sphere)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A7E")]
		[Address(RVA = "0xBAEBC4", Offset = "0xBAEBC4", VA = "0xBAEBC4")]
		public static bool IntersectAABB3Triangle3(Vector3 boxCenter, Vector3 boxHalfSize, Triangle3 triangle)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A7F")]
		[Address(RVA = "0xBAF82C", Offset = "0xBAF82C", VA = "0xBAF82C")]
		private static void GetMinMax(float x0, float x1, float x2, out float min, out float max)
		{
		}

		[Token(Token = "0x6001A80")]
		[Address(RVA = "0xBAF87C", Offset = "0xBAF87C", VA = "0xBAF87C")]
		private static bool PlaneBoxOverlap(Vector3 normal, Vector3 vert, Vector3 maxBox)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A81")]
		[Address(RVA = "0xBAF574", Offset = "0xBAF574", VA = "0xBAF574")]
		private static float Abs(float v)
		{
			return default(float);
		}

		[Token(Token = "0x6001A82")]
		[Address(RVA = "0xBAF584", Offset = "0xBAF584", VA = "0xBAF584")]
		private static bool AxisTest_X01(Vector3 v0, Vector3 v2, Vector3 boxHalfSize, float a, float b, float fa, float fb, out float min, out float max)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A83")]
		[Address(RVA = "0xBAF748", Offset = "0xBAF748", VA = "0xBAF748")]
		private static bool AxisTest_X2(Vector3 v0, Vector3 v1, Vector3 boxHalfSize, float a, float b, float fa, float fb, out float min, out float max)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A84")]
		[Address(RVA = "0xBAF5F4", Offset = "0xBAF5F4", VA = "0xBAF5F4")]
		private static bool AxisTest_Y02(Vector3 v0, Vector3 v2, Vector3 boxHalfSize, float a, float b, float fa, float fb, out float min, out float max)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A85")]
		[Address(RVA = "0xBAF7B8", Offset = "0xBAF7B8", VA = "0xBAF7B8")]
		private static bool AxisTest_Y1(Vector3 v0, Vector3 v1, Vector3 boxHalfSize, float a, float b, float fa, float fb, out float min, out float max)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A86")]
		[Address(RVA = "0xBAF668", Offset = "0xBAF668", VA = "0xBAF668")]
		private static bool AxisTest_Z12(Vector3 v1, Vector3 v2, Vector3 boxHalfSize, float a, float b, float fa, float fb, out float min, out float max)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A87")]
		[Address(RVA = "0xBAF6D8", Offset = "0xBAF6D8", VA = "0xBAF6D8")]
		private static bool AxisTest_Z0(Vector3 v0, Vector3 v1, Vector3 boxHalfSize, float a, float b, float fa, float fb, out float min, out float max)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x200040E")]
	public class MCS_CameraController : MonoBehaviour
	{
		[Token(Token = "0x40018D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float speed;

		[Token(Token = "0x40018D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float mouseMoveSpeed;

		[Token(Token = "0x40018D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float shiftMulti;

		[Token(Token = "0x40018D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float controlMulti;

		[Token(Token = "0x40018D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Vector3 oldMousePosition;

		[Token(Token = "0x40018D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject cameraMountGO;

		[Token(Token = "0x40018D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private GameObject cameraChildGO;

		[Token(Token = "0x40018D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform cameraMountT;

		[Token(Token = "0x40018D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform cameraChildT;

		[Token(Token = "0x40018DA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform t;

		[Token(Token = "0x6001A89")]
		[Address(RVA = "0xBB0A1C", Offset = "0xBB0A1C", VA = "0xBB0A1C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001A8A")]
		[Address(RVA = "0xBB0A3C", Offset = "0xBB0A3C", VA = "0xBB0A3C")]
		private void CreateParents()
		{
		}

		[Token(Token = "0x6001A8B")]
		[Address(RVA = "0xBB0B7C", Offset = "0xBB0B7C", VA = "0xBB0B7C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A8C")]
		[Address(RVA = "0xBB0E48", Offset = "0xBB0E48", VA = "0xBB0E48")]
		public MCS_CameraController()
		{
		}
	}
	[Token(Token = "0x200040F")]
	public class MCS_FPSCounter : MonoBehaviour
	{
		[Token(Token = "0x2000410")]
		public enum GUIType
		{
			[Token(Token = "0x4001916")]
			DisplayRunning,
			[Token(Token = "0x4001917")]
			DisplayResults,
			[Token(Token = "0x4001918")]
			DisplayNothing
		}

		[Token(Token = "0x40018DB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static MCS_FPSCounter instance;

		[Token(Token = "0x40018DC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("___ Settings ___________________________________________________________________________________________________________")]
		public float interval;

		[Token(Token = "0x40018DD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public GUIType displayType;

		[Token(Token = "0x40018DE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2 gradientRange;

		[Token(Token = "0x40018DF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Font fontRun;

		[Token(Token = "0x40018E0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Font fontResult;

		[Token(Token = "0x40018E1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Texture logo;

		[Token(Token = "0x40018E2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool showLogoOnResultsScreen;

		[Token(Token = "0x40018E3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public KeyCode showHideButton;

		[Token(Token = "0x40018E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool acceptInput;

		[Token(Token = "0x40018E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool reset;

		[Token(Token = "0x40018E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Header("___ Results ___________________________________________________________________________________________________________")]
		public float currentFPS;

		[Token(Token = "0x40018E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float averageFPS;

		[Token(Token = "0x40018E8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float minimumFPS;

		[Token(Token = "0x40018E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float maximumFPS;

		[Token(Token = "0x40018EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private int totalFrameCount;

		[Token(Token = "0x40018EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private int tempFrameCount;

		[Token(Token = "0x40018EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private double tStamp;

		[Token(Token = "0x40018ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private double tStampTemp;

		[Token(Token = "0x40018EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private string currentFPSText;

		[Token(Token = "0x40018EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private string avgFPSText;

		[Token(Token = "0x40018F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private string minFPSText;

		[Token(Token = "0x40018F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private string maxFSPText;

		[Token(Token = "0x40018F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private GUIStyle bigStyle;

		[Token(Token = "0x40018F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private GUIStyle bigStyleShadow;

		[Token(Token = "0x40018F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private GUIStyle smallStyle;

		[Token(Token = "0x40018F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private GUIStyle smallStyleShadow;

		[Token(Token = "0x40018F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private GUIStyle smallStyleLabel;

		[Token(Token = "0x40018F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private GUIStyle headerStyle;

		[Token(Token = "0x40018F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Rect[] rectsRun;

		[Token(Token = "0x40018F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Rect[] rectsResult;

		[Token(Token = "0x40018FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Gradient gradient;

		[Token(Token = "0x40018FB")]
		private const float line1 = 4f;

		[Token(Token = "0x40018FC")]
		private const float line2 = 30f;

		[Token(Token = "0x40018FD")]
		private const float line3 = 44f;

		[Token(Token = "0x40018FE")]
		private const float line4 = 58f;

		[Token(Token = "0x40018FF")]
		private const float labelWidth = 26f;

		[Token(Token = "0x4001900")]
		private const float paddingH = 8f;

		[Token(Token = "0x4001901")]
		private const float lineHeight = 22f;

		[Token(Token = "0x4001902")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float columnRight;

		[Token(Token = "0x4001903")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float columnLeft;

		[Token(Token = "0x4001904")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Color fontShadow;

		[Token(Token = "0x4001905")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private Color label;

		[Token(Token = "0x4001906")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private Color colorCurrent;

		[Token(Token = "0x4001907")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private Color colorAvg;

		[Token(Token = "0x4001908")]
		private const string resultHeader = "BENCHMARK RESULTS";

		[Token(Token = "0x4001909")]
		private const string resultLabelAvg = "AVERAGE FPS:";

		[Token(Token = "0x400190A")]
		private const string resultLabelMin = "MINIMUM FPS:";

		[Token(Token = "0x400190B")]
		private const string resultLabelMax = "MAXIMUM FPS:";

		[Token(Token = "0x400190C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private GUIContent resultHeaderGUI;

		[Token(Token = "0x400190D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private GUIContent reslutLabelAvgGUI;

		[Token(Token = "0x400190E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private GUIContent avgTextGUI;

		[Token(Token = "0x400190F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private GUIContent instructions;

		[Token(Token = "0x4001910")]
		private const string runLabelAvg = "Avg:";

		[Token(Token = "0x4001911")]
		private const string runLabelMin = "Min:";

		[Token(Token = "0x4001912")]
		private const string runLabelMax = "Max:";

		[Token(Token = "0x4001913")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private Vector2 screenSize;

		[Token(Token = "0x4001914")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private GUIType oldDisplayType;

		[Token(Token = "0x6001A8D")]
		[Address(RVA = "0xBB0E5C", Offset = "0xBB0E5C", VA = "0xBB0E5C")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001A8E")]
		[Address(RVA = "0xBB0FF8", Offset = "0xBB0FF8", VA = "0xBB0FF8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001A8F")]
		[Address(RVA = "0xBB1090", Offset = "0xBB1090", VA = "0xBB1090")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6001A90")]
		[Address(RVA = "0xBB16C8", Offset = "0xBB16C8", VA = "0xBB16C8")]
		private void SetRectsRun()
		{
		}

		[Token(Token = "0x6001A91")]
		[Address(RVA = "0xBB1A28", Offset = "0xBB1A28", VA = "0xBB1A28")]
		private void SetRectsResult()
		{
		}

		[Token(Token = "0x6001A92")]
		[Address(RVA = "0xBB1F64", Offset = "0xBB1F64", VA = "0xBB1F64")]
		private void Start()
		{
		}

		[Token(Token = "0x6001A93")]
		[Address(RVA = "0xBB21D8", Offset = "0xBB21D8", VA = "0xBB21D8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001A94")]
		[Address(RVA = "0xBB2568", Offset = "0xBB2568", VA = "0xBB2568")]
		public void StartBenchmark()
		{
		}

		[Token(Token = "0x6001A95")]
		[Address(RVA = "0xBB2588", Offset = "0xBB2588", VA = "0xBB2588")]
		public void StopBenchmark()
		{
		}

		[Token(Token = "0x6001A96")]
		[Address(RVA = "0xBB2378", Offset = "0xBB2378", VA = "0xBB2378")]
		private void GetFPS()
		{
		}

		[Token(Token = "0x6001A97")]
		[Address(RVA = "0xBB2338", Offset = "0xBB2338", VA = "0xBB2338")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001A98")]
		[Address(RVA = "0xBB22F4", Offset = "0xBB22F4", VA = "0xBB22F4")]
		private Color EvaluateGradient(float f)
		{
			return default(Color);
		}

		[Token(Token = "0x6001A99")]
		[Address(RVA = "0xBB25EC", Offset = "0xBB25EC", VA = "0xBB25EC")]
		public MCS_FPSCounter()
		{
		}
	}
	[Token(Token = "0x2000411")]
	public static class Methods
	{
		[Token(Token = "0x6001A9A")]
		[Address(RVA = "0xBB280C", Offset = "0xBB280C", VA = "0xBB280C")]
		public static void SetTag(GameObject go, string tag)
		{
		}

		[Token(Token = "0x6001A9B")]
		[Address(RVA = "0xBB28B0", Offset = "0xBB28B0", VA = "0xBB28B0")]
		public static void SetTagWhenCollider(GameObject go, string tag)
		{
		}

		[Token(Token = "0x6001A9C")]
		[Address(RVA = "0xBB29D4", Offset = "0xBB29D4", VA = "0xBB29D4")]
		public static void SetTagAndLayer(GameObject go, string tag, int layer)
		{
		}

		[Token(Token = "0x6001A9D")]
		[Address(RVA = "0xBB2AB0", Offset = "0xBB2AB0", VA = "0xBB2AB0")]
		public static void SetLayer(GameObject go, int layer)
		{
		}

		[Token(Token = "0x6001A9E")]
		[Address(RVA = "0xBB2B70", Offset = "0xBB2B70", VA = "0xBB2B70")]
		public static bool LayerMaskContainsLayer(int layerMask, int layer)
		{
			return default(bool);
		}

		[Token(Token = "0x6001A9F")]
		[Address(RVA = "0xBB2B84", Offset = "0xBB2B84", VA = "0xBB2B84")]
		public static int GetFirstLayerInLayerMask(int layerMask)
		{
			return default(int);
		}

		[Token(Token = "0x6001AA0")]
		[Address(RVA = "0xBB2C20", Offset = "0xBB2C20", VA = "0xBB2C20")]
		public static bool Contains(string compare, string name)
		{
			return default(bool);
		}

		[Token(Token = "0x6001AA1")]
		public static T[] Search<T>([Optional] GameObject parentGO)
		{
			return null;
		}

		[Token(Token = "0x6001AA2")]
		[Address(RVA = "0xBB2E54", Offset = "0xBB2E54", VA = "0xBB2E54")]
		public static FastList<GameObject> GetAllRootGameObjects()
		{
			return null;
		}

		[Token(Token = "0x6001AA3")]
		public static T[] SearchParent<T>(GameObject parentGO, bool searchInActiveGameObjects) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6001AA4")]
		public static T[] SearchScene<T>(Scene scene, bool searchInActiveGameObjects) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6001AA5")]
		public static FastList<T> SearchAllScenes<T>(bool searchInActiveGameObjects) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6001AA6")]
		public static T Find<T>(GameObject parentGO, string name) where T : Component
		{
			return null;
		}

		[Token(Token = "0x6001AA7")]
		[Address(RVA = "0xBB2F50", Offset = "0xBB2F50", VA = "0xBB2F50")]
		public static void SetCollidersActive(Collider[] colliders, bool active, string[] nameList)
		{
		}

		[Token(Token = "0x6001AA8")]
		[Address(RVA = "0xBB3038", Offset = "0xBB3038", VA = "0xBB3038")]
		public static void SelectChildrenWithMeshRenderer(GameObject[] parentGOs)
		{
		}

		[Token(Token = "0x6001AA9")]
		[Address(RVA = "0xBB303C", Offset = "0xBB303C", VA = "0xBB303C")]
		public static void SelectChildrenWithMeshRenderer(Transform t)
		{
		}

		[Token(Token = "0x6001AAA")]
		[Address(RVA = "0xBB3040", Offset = "0xBB3040", VA = "0xBB3040")]
		public static void DestroyChildren(Transform t)
		{
		}

		[Token(Token = "0x6001AAB")]
		[Address(RVA = "0xBB3104", Offset = "0xBB3104", VA = "0xBB3104")]
		public static void Destroy(GameObject go)
		{
		}

		[Token(Token = "0x6001AAC")]
		[Address(RVA = "0xBB318C", Offset = "0xBB318C", VA = "0xBB318C")]
		public static void SetChildrenActive(Transform t, bool active)
		{
		}

		[Token(Token = "0x6001AAD")]
		[Address(RVA = "0xBB320C", Offset = "0xBB320C", VA = "0xBB320C")]
		public static void SnapBoundsAndPreserveArea(ref Bounds bounds, float snapSize, Vector3 offset)
		{
		}

		[Token(Token = "0x6001AAE")]
		public static void ListRemoveAt<T>(List<T> list, int index)
		{
		}

		[Token(Token = "0x6001AAF")]
		[Address(RVA = "0xBB3338", Offset = "0xBB3338", VA = "0xBB3338")]
		public static void CopyComponent(Component component, GameObject target)
		{
		}

		[Token(Token = "0x6001AB0")]
		[Address(RVA = "0xBB3438", Offset = "0xBB3438", VA = "0xBB3438")]
		public static Transform GetChildRootTransform(Transform t, Transform rootT)
		{
			return null;
		}
	}
	[Token(Token = "0x2000412")]
	public class ReadMe : MonoBehaviour
	{
		[Token(Token = "0x4001919")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool buttonEdit;

		[Token(Token = "0x400191A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string readme;

		[Token(Token = "0x6001AB1")]
		[Address(RVA = "0xBB34E8", Offset = "0xBB34E8", VA = "0xBB34E8")]
		public ReadMe()
		{
		}
	}
	[Token(Token = "0x2000413")]
	public class SimpleMove : MonoBehaviour
	{
		[Token(Token = "0x400191B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 rotDirMulti;

		[Token(Token = "0x400191C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float moveMulti;

		[Token(Token = "0x400191D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float rotMulti;

		[Token(Token = "0x400191E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 dir;

		[Token(Token = "0x400191F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float t;

		[Token(Token = "0x6001AB2")]
		[Address(RVA = "0xBB34F0", Offset = "0xBB34F0", VA = "0xBB34F0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001AB3")]
		[Address(RVA = "0xBB3524", Offset = "0xBB3524", VA = "0xBB3524")]
		private void Update()
		{
		}

		[Token(Token = "0x6001AB4")]
		[Address(RVA = "0xBB3628", Offset = "0xBB3628", VA = "0xBB3628")]
		public SimpleMove()
		{
		}
	}
	[Token(Token = "0x2000414")]
	public static class TriangleAAB3
	{
	}
	[Token(Token = "0x2000415")]
	public class NavigationCamera : MonoBehaviour
	{
		[Token(Token = "0x4001920")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static float fov;

		[Token(Token = "0x4001921")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SO_NavigationCamera data;

		[Token(Token = "0x4001922")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Quaternion rot;

		[Token(Token = "0x4001923")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 currentSpeed;

		[Token(Token = "0x4001924")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float tStamp;

		[Token(Token = "0x4001925")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float deltaTime;

		[Token(Token = "0x4001926")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 startPosition;

		[Token(Token = "0x4001927")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 position;

		[Token(Token = "0x4001928")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Quaternion startRotation;

		[Token(Token = "0x4001929")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float scrollWheel;

		[Token(Token = "0x6001AB5")]
		[Address(RVA = "0xBB3694", Offset = "0xBB3694", VA = "0xBB3694")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001AB6")]
		[Address(RVA = "0xBB3700", Offset = "0xBB3700", VA = "0xBB3700")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001AB7")]
		[Address(RVA = "0xBB3750", Offset = "0xBB3750", VA = "0xBB3750")]
		private void Update()
		{
		}

		[Token(Token = "0x6001AB8")]
		[Address(RVA = "0xBB3780", Offset = "0xBB3780", VA = "0xBB3780")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001AB9")]
		[Address(RVA = "0xBB3CA8", Offset = "0xBB3CA8", VA = "0xBB3CA8")]
		public void SetCam()
		{
		}

		[Token(Token = "0x6001ABA")]
		[Address(RVA = "0xBB3704", Offset = "0xBB3704", VA = "0xBB3704")]
		public void RestoreCam()
		{
		}

		[Token(Token = "0x6001ABB")]
		[Address(RVA = "0xBB3B9C", Offset = "0xBB3B9C", VA = "0xBB3B9C")]
		private float GetSpeedMulti()
		{
			return default(float);
		}

		[Token(Token = "0x6001ABC")]
		[Address(RVA = "0xBB3BF8", Offset = "0xBB3BF8", VA = "0xBB3BF8")]
		private void Lerp2Way(ref Vector3 v, Vector3 targetV, float upMulti, float downMulti)
		{
		}

		[Token(Token = "0x6001ABD")]
		[Address(RVA = "0xBB3CF4", Offset = "0xBB3CF4", VA = "0xBB3CF4")]
		private void Lerp2Way(ref float v, float targetV, float upMulti, float downMulti)
		{
		}

		[Token(Token = "0x6001ABE")]
		[Address(RVA = "0xBB3D38", Offset = "0xBB3D38", VA = "0xBB3D38")]
		public NavigationCamera()
		{
		}
	}
	[Token(Token = "0x2000416")]
	public class SO_NavigationCamera : ScriptableObject
	{
		[Token(Token = "0x400192A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float mouseSensitity;

		[Token(Token = "0x400192B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float speedUpLerpMulti;

		[Token(Token = "0x400192C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float speedDownLerpMulti;

		[Token(Token = "0x400192D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float speedSlow;

		[Token(Token = "0x400192E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float speedNormal;

		[Token(Token = "0x400192F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float speedFast;

		[Token(Token = "0x4001930")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float mouseScrollWheelMulti;

		[Token(Token = "0x6001ABF")]
		[Address(RVA = "0xBB3D40", Offset = "0xBB3D40", VA = "0xBB3D40")]
		public SO_NavigationCamera()
		{
		}
	}
	[Token(Token = "0x2000417")]
	public class BaseOctree
	{
		[Token(Token = "0x2000418")]
		public class Cell
		{
			[Token(Token = "0x4001931")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Cell mainParent;

			[Token(Token = "0x4001932")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Cell parent;

			[Token(Token = "0x4001933")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public bool[] cellsUsed;

			[Token(Token = "0x4001934")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Bounds bounds;

			[Token(Token = "0x4001935")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public int cellIndex;

			[Token(Token = "0x4001936")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
			public int cellCount;

			[Token(Token = "0x4001937")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public int level;

			[Token(Token = "0x4001938")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
			public int maxLevels;

			[Token(Token = "0x6001AC1")]
			[Address(RVA = "0xBB3D70", Offset = "0xBB3D70", VA = "0xBB3D70")]
			public Cell()
			{
			}

			[Token(Token = "0x6001AC2")]
			[Address(RVA = "0xBB3D78", Offset = "0xBB3D78", VA = "0xBB3D78")]
			public Cell(Vector3 position, Vector3 size, int maxLevels)
			{
			}

			[Token(Token = "0x6001AC3")]
			[Address(RVA = "0xBB3E14", Offset = "0xBB3E14", VA = "0xBB3E14")]
			public Cell(Cell parent, int cellIndex, Bounds bounds)
			{
			}

			[Token(Token = "0x6001AC4")]
			[Address(RVA = "0xBB3E80", Offset = "0xBB3E80", VA = "0xBB3E80")]
			public void SetCell(Cell parent, int cellIndex, Bounds bounds)
			{
			}

			[Token(Token = "0x6001AC5")]
			protected int AddCell<T, U>(ref T[] cells, Vector3 position, out bool maxCellCreated) where T : Cell, new() where U : Cell, new()
			{
				return default(int);
			}

			[Token(Token = "0x6001AC6")]
			protected void AddCell<T, U>(ref T[] cells, int index, int x, int y, int z, out bool maxCellCreated) where T : Cell, new() where U : Cell, new()
			{
			}

			[Token(Token = "0x6001AC7")]
			[Address(RVA = "0xBB3EBC", Offset = "0xBB3EBC", VA = "0xBB3EBC")]
			public bool InsideBounds(Vector3 position)
			{
				return default(bool);
			}

			[Token(Token = "0x6001AC8")]
			[Address(RVA = "0xBB3F6C", Offset = "0xBB3F6C", VA = "0xBB3F6C")]
			public void Reset(ref Cell[] cells)
			{
			}
		}

		[Token(Token = "0x6001AC0")]
		[Address(RVA = "0xBB3D68", Offset = "0xBB3D68", VA = "0xBB3D68")]
		public BaseOctree()
		{
		}
	}
	[Token(Token = "0x2000419")]
	public class ObjectOctree
	{
		[Token(Token = "0x200041A")]
		public class LODParent
		{
			[Token(Token = "0x4001939")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public GameObject cellGO;

			[Token(Token = "0x400193A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Transform cellT;

			[Token(Token = "0x400193B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LODGroup lodGroup;

			[Token(Token = "0x400193C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public LODLevel[] lodLevels;

			[Token(Token = "0x400193D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool hasChanged;

			[Token(Token = "0x400193E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public int jobsPending;

			[Token(Token = "0x6001ACA")]
			[Address(RVA = "0xBB3F80", Offset = "0xBB3F80", VA = "0xBB3F80")]
			public LODParent(int lodCount)
			{
			}

			[Token(Token = "0x6001ACB")]
			[Address(RVA = "0xBB4130", Offset = "0xBB4130", VA = "0xBB4130")]
			public void AssignLODGroup(MeshCombiner meshCombiner)
			{
			}

			[Token(Token = "0x6001ACC")]
			[Address(RVA = "0xBB42C0", Offset = "0xBB42C0", VA = "0xBB42C0")]
			public void ApplyChanges(MeshCombiner meshCombiner)
			{
			}
		}

		[Token(Token = "0x200041B")]
		public class LODLevel
		{
			[Token(Token = "0x400193F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public FastList<CachedGameObject> cachedGOs;

			[Token(Token = "0x4001940")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public Dictionary<CombineCondition, MeshObjectsHolder> meshObjectsHoldersLookup;

			[Token(Token = "0x4001941")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public FastList<MeshObjectsHolder> changedMeshObjectsHolders;

			[Token(Token = "0x4001942")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public FastList<MeshRenderer> newMeshRenderers;

			[Token(Token = "0x4001943")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public int vertCount;

			[Token(Token = "0x4001944")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public int objectCount;

			[Token(Token = "0x6001ACD")]
			[Address(RVA = "0xBB4320", Offset = "0xBB4320", VA = "0xBB4320")]
			public void ApplyChanges(MeshCombiner meshCombiner)
			{
			}

			[Token(Token = "0x6001ACE")]
			[Address(RVA = "0xBB4070", Offset = "0xBB4070", VA = "0xBB4070")]
			public LODLevel()
			{
			}
		}

		[Token(Token = "0x200041C")]
		public class MaxCell : Cell
		{
			[Token(Token = "0x4001945")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public static int maxCellCount;

			[Token(Token = "0x4001946")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public LODParent[] lodParents;

			[Token(Token = "0x4001947")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			public List<LODParent> changedLodParents;

			[Token(Token = "0x4001948")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public bool hasChanged;

			[Token(Token = "0x6001ACF")]
			[Address(RVA = "0xBB4388", Offset = "0xBB4388", VA = "0xBB4388")]
			public void ApplyChanges(MeshCombiner meshCombiner)
			{
			}

			[Token(Token = "0x6001AD0")]
			[Address(RVA = "0xBB4454", Offset = "0xBB4454", VA = "0xBB4454")]
			public MaxCell()
			{
			}
		}

		[Token(Token = "0x200041D")]
		public class Cell : BaseOctree.Cell
		{
			[Token(Token = "0x4001949")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public Cell[] cells;

			[Token(Token = "0x6001AD1")]
			[Address(RVA = "0xBB445C", Offset = "0xBB445C", VA = "0xBB445C")]
			public Cell()
			{
			}

			[Token(Token = "0x6001AD2")]
			[Address(RVA = "0xBB4464", Offset = "0xBB4464", VA = "0xBB4464")]
			public Cell(Vector3 position, Vector3 size, int maxLevels)
			{
			}

			[Token(Token = "0x6001AD3")]
			[Address(RVA = "0xBB4500", Offset = "0xBB4500", VA = "0xBB4500")]
			public CachedGameObject AddObject(Vector3 position, MeshCombiner meshCombiner, CachedGameObject cachedGO, int lodParentIndex, int lodLevel, bool isChangeMode = false)
			{
				return null;
			}

			[Token(Token = "0x6001AD4")]
			[Address(RVA = "0xBB4594", Offset = "0xBB4594", VA = "0xBB4594")]
			private void AddObjectInternal(MeshCombiner meshCombiner, CachedGameObject cachedGO, Vector3 position, int lodParentIndex, int lodLevel, bool isChangeMode)
			{
			}

			[Token(Token = "0x6001AD5")]
			[Address(RVA = "0xBB4D80", Offset = "0xBB4D80", VA = "0xBB4D80")]
			public void SortObjects(MeshCombiner meshCombiner)
			{
			}

			[Token(Token = "0x6001AD6")]
			[Address(RVA = "0xBB49AC", Offset = "0xBB49AC", VA = "0xBB49AC")]
			public bool SortObject(MeshCombiner meshCombiner, LODLevel lod, CachedGameObject cachedGO, bool isChangeMode = false)
			{
				return default(bool);
			}

			[Token(Token = "0x6001AD7")]
			[Address(RVA = "0xBB529C", Offset = "0xBB529C", VA = "0xBB529C")]
			public void CombineMeshes(MeshCombiner meshCombiner, int lodParentIndex)
			{
			}

			[Token(Token = "0x6001AD8")]
			[Address(RVA = "0xBB5894", Offset = "0xBB5894", VA = "0xBB5894")]
			public void Draw(MeshCombiner meshCombiner, bool onlyMaxLevel, bool drawLevel0)
			{
			}
		}

		[Token(Token = "0x6001AC9")]
		[Address(RVA = "0xBB3F78", Offset = "0xBB3F78", VA = "0xBB3F78")]
		public ObjectOctree()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200041E")]
	public class MeshObjectsHolder
	{
		[Token(Token = "0x400194A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FastList<MeshObject> meshObjects;

		[Token(Token = "0x400194B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ObjectOctree.LODParent lodParent;

		[Token(Token = "0x400194C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FastList<CachedGameObject> newCachedGOs;

		[Token(Token = "0x400194D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int lodLevel;

		[Token(Token = "0x400194E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Material mat;

		[Token(Token = "0x400194F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool hasChanged;

		[Token(Token = "0x4001950")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public CombineCondition combineCondition;

		[Token(Token = "0x6001AD9")]
		[Address(RVA = "0xBB5164", Offset = "0xBB5164", VA = "0xBB5164")]
		public MeshObjectsHolder(ref CombineCondition combineCondition, Material mat)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200041F")]
	public class FoundCombineConditions
	{
		[Token(Token = "0x4001951")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public HashSet<CombineCondition> combineConditions;

		[Token(Token = "0x4001952")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public int combineConditionsCount;

		[Token(Token = "0x4001953")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int matCount;

		[Token(Token = "0x4001954")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int lightmapIndexCount;

		[Token(Token = "0x4001955")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int shadowCastingCount;

		[Token(Token = "0x4001956")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int receiveShadowsCount;

		[Token(Token = "0x4001957")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int receiveGICount;

		[Token(Token = "0x4001958")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int lightProbeUsageCount;

		[Token(Token = "0x4001959")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public int reflectionProbeUsageCount;

		[Token(Token = "0x400195A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int probeAnchorCount;

		[Token(Token = "0x400195B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public int motionVectorGenerationModeCount;

		[Token(Token = "0x400195C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int layerCount;

		[Token(Token = "0x400195D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int staticEditorFlagsCount;

		[Token(Token = "0x6001ADA")]
		[Address(RVA = "0xBB5C3C", Offset = "0xBB5C3C", VA = "0xBB5C3C")]
		public FoundCombineConditions()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000420")]
	public struct CombineCondition
	{
		[Token(Token = "0x400195E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static HashSet<object> countSet;

		[Token(Token = "0x400195F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public int matInstanceId;

		[Token(Token = "0x4001960")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public int lightmapIndex;

		[Token(Token = "0x4001961")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public ShadowCastingMode shadowCastingMode;

		[Token(Token = "0x4001962")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public bool receiveShadows;

		[Token(Token = "0x4001963")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public LightProbeUsage lightProbeUsage;

		[Token(Token = "0x4001964")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public ReflectionProbeUsage reflectionProbeUsage;

		[Token(Token = "0x4001965")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform probeAnchor;

		[Token(Token = "0x4001966")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MotionVectorGenerationMode motionVectorGenerationMode;

		[Token(Token = "0x4001967")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int layer;

		[Token(Token = "0x4001968")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int rootInstanceId;

		[Token(Token = "0x17000324")]
		public static CombineCondition Default
		{
			[Token(Token = "0x6001ADB")]
			[Address(RVA = "0xBB5CB8", Offset = "0xBB5CB8", VA = "0xBB5CB8")]
			get
			{
				return default(CombineCondition);
			}
		}

		[Token(Token = "0x6001ADC")]
		[Address(RVA = "0xBB5CEC", Offset = "0xBB5CEC", VA = "0xBB5CEC")]
		public static void MakeFoundReport(FoundCombineConditions fcc)
		{
		}

		[Token(Token = "0x6001ADD")]
		[Address(RVA = "0xBB4FD0", Offset = "0xBB4FD0", VA = "0xBB4FD0")]
		public void ReadFromGameObject(int rootInstanceId, CombineConditionSettings combineConditions, bool copyBakedLighting, GameObject go, Transform t, MeshRenderer mr, Material mat)
		{
		}

		[Token(Token = "0x6001ADE")]
		[Address(RVA = "0xBB6A70", Offset = "0xBB6A70", VA = "0xBB6A70")]
		public void WriteToGameObject(GameObject go, MeshRenderer mr)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000421")]
	public class CombineConditionSettings
	{
		[Token(Token = "0x4001969")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public bool foldout;

		[Token(Token = "0x400196A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x11")]
		public bool sameMaterial;

		[Token(Token = "0x400196B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12")]
		public bool sameShadowCastingMode;

		[Token(Token = "0x400196C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13")]
		public bool sameReceiveShadows;

		[Token(Token = "0x400196D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public bool sameReceiveGI;

		[Token(Token = "0x400196E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15")]
		public bool sameLightProbeUsage;

		[Token(Token = "0x400196F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16")]
		public bool sameReflectionProbeUsage;

		[Token(Token = "0x4001970")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17")]
		public bool sameProbeAnchor;

		[Token(Token = "0x4001971")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool sameMotionVectorGenerationMode;

		[Token(Token = "0x4001972")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool sameStaticEditorFlags;

		[Token(Token = "0x4001973")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool sameLayer;

		[Token(Token = "0x4001974")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material material;

		[Token(Token = "0x4001975")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public CombineCondition combineCondition;

		[Token(Token = "0x6001AE0")]
		[Address(RVA = "0xBB6B94", Offset = "0xBB6B94", VA = "0xBB6B94")]
		public CombineConditionSettings()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000422")]
	public class MeshObject
	{
		[Token(Token = "0x4001976")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public CachedGameObject cachedGO;

		[Token(Token = "0x4001977")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MeshCache meshCache;

		[Token(Token = "0x4001978")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int subMeshIndex;

		[Token(Token = "0x4001979")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 position;

		[Token(Token = "0x400197A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Vector3 scale;

		[Token(Token = "0x400197B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public Quaternion rotation;

		[Token(Token = "0x400197C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Vector4 lightmapScaleOffset;

		[Token(Token = "0x400197D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool intersectsSurface;

		[Token(Token = "0x400197E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public int startNewTriangleIndex;

		[Token(Token = "0x400197F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public int newTriangleCount;

		[Token(Token = "0x4001980")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool skip;

		[Token(Token = "0x6001AE1")]
		[Address(RVA = "0xBB5208", Offset = "0xBB5208", VA = "0xBB5208")]
		public MeshObject(CachedGameObject cachedGO, int subMeshIndex)
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000423")]
	public class CachedGameObject
	{
		[Token(Token = "0x4001981")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Transform searchParentT;

		[Token(Token = "0x4001982")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject go;

		[Token(Token = "0x4001983")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform t;

		[Token(Token = "0x4001984")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public MeshRenderer mr;

		[Token(Token = "0x4001985")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public MeshFilter mf;

		[Token(Token = "0x4001986")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Mesh mesh;

		[Token(Token = "0x4001987")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Matrix4x4 mt;

		[Token(Token = "0x4001988")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public Matrix4x4 mtNormals;

		[Token(Token = "0x4001989")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Transform rootT;

		[Token(Token = "0x400198A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public Vector3 rootTLossyScale;

		[Token(Token = "0x400198B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public int rootInstanceId;

		[Token(Token = "0x6001AE2")]
		[Address(RVA = "0xBB6C24", Offset = "0xBB6C24", VA = "0xBB6C24")]
		public CachedGameObject(Transform searchParentT, GameObject go, Transform t, MeshRenderer mr, MeshFilter mf, Mesh mesh)
		{
		}

		[Token(Token = "0x6001AE3")]
		[Address(RVA = "0xBB6D1C", Offset = "0xBB6D1C", VA = "0xBB6D1C")]
		public CachedGameObject(CachedComponents cachedComponent)
		{
		}

		[Token(Token = "0x6001AE4")]
		[Address(RVA = "0xBB4F80", Offset = "0xBB4F80", VA = "0xBB4F80")]
		public void GetRoot()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000424")]
	public class CachedLodGameObject : CachedGameObject
	{
		[Token(Token = "0x400198C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public Vector3 center;

		[Token(Token = "0x400198D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public int lodCount;

		[Token(Token = "0x400198E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public int lodLevel;

		[Token(Token = "0x6001AE5")]
		[Address(RVA = "0xBB6E0C", Offset = "0xBB6E0C", VA = "0xBB6E0C")]
		public CachedLodGameObject(CachedGameObject cachedGO, int lodCount, int lodLevel)
		{
		}
	}
}
namespace DentedPixel
{
	[Token(Token = "0x2000425")]
	public class LeanDummy
	{
		[Token(Token = "0x6001AE6")]
		[Address(RVA = "0xBB6E4C", Offset = "0xBB6E4C", VA = "0xBB6E4C")]
		public LeanDummy()
		{
		}
	}
}
namespace DentedPixel.LTExamples
{
	[Token(Token = "0x2000426")]
	public class PathBezier : MonoBehaviour
	{
		[Token(Token = "0x400198F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform[] trans;

		[Token(Token = "0x4001990")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LTBezierPath cr;

		[Token(Token = "0x4001991")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject avatar1;

		[Token(Token = "0x4001992")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float iter;

		[Token(Token = "0x6001AE7")]
		[Address(RVA = "0xBB6E54", Offset = "0xBB6E54", VA = "0xBB6E54")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001AE8")]
		[Address(RVA = "0xBB709C", Offset = "0xBB709C", VA = "0xBB709C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001AE9")]
		[Address(RVA = "0xBB721C", Offset = "0xBB721C", VA = "0xBB721C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001AEA")]
		[Address(RVA = "0xBB7264", Offset = "0xBB7264", VA = "0xBB7264")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6001AEB")]
		[Address(RVA = "0xBB72B4", Offset = "0xBB72B4", VA = "0xBB72B4")]
		public PathBezier()
		{
		}
	}
	[Token(Token = "0x2000427")]
	public class TestingUnitTests : MonoBehaviour
	{
		[Token(Token = "0x200042C")]
		[CompilerGenerated]
		private sealed class <>c__DisplayClass24_0
		{
			[Token(Token = "0x40019C9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public TestingUnitTests <>4__this;

			[Token(Token = "0x40019CA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			public int pauseCount;

			[Token(Token = "0x40019CB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public GameObject cubeRound;

			[Token(Token = "0x40019CC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 onStartPos;

			[Token(Token = "0x40019CD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public Vector3 onStartPosSpline;

			[Token(Token = "0x40019CE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			public GameObject cubeSpline;

			[Token(Token = "0x40019CF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			public GameObject cubeSeq;

			[Token(Token = "0x40019D0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			public GameObject cubeBounds;

			[Token(Token = "0x40019D1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			public bool didPassBounds;

			[Token(Token = "0x40019D2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
			public Vector3 failPoint;

			[Token(Token = "0x40019D3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			public int setOnStartNum;

			[Token(Token = "0x40019D4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
			public bool setPosOnUpdate;

			[Token(Token = "0x40019D5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
			public int setPosNum;

			[Token(Token = "0x40019D6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
			public bool hasGroupTweensCheckStarted;

			[Token(Token = "0x40019D7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
			public float previousXlt4;

			[Token(Token = "0x40019D8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
			public bool onUpdateWasCalled;

			[Token(Token = "0x40019D9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
			public float start;

			[Token(Token = "0x40019DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
			public float expectedTime;

			[Token(Token = "0x40019DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
			public bool didGetCorrectOnUpdate;

			[Token(Token = "0x40019DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
			public Action <>9__13;

			[Token(Token = "0x40019DD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
			public Action<Vector3> <>9__14;

			[Token(Token = "0x40019DE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
			public Action <>9__16;

			[Token(Token = "0x40019DF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
			public Action<object> <>9__15;

			[Token(Token = "0x6001B18")]
			[Address(RVA = "0xBBB07C", Offset = "0xBBB07C", VA = "0xBBB07C")]
			public <>c__DisplayClass24_0()
			{
			}

			[Token(Token = "0x6001B19")]
			[Address(RVA = "0xBBB084", Offset = "0xBBB084", VA = "0xBBB084")]
			internal void <timeBasedTesting>b__0()
			{
			}

			[Token(Token = "0x6001B1A")]
			[Address(RVA = "0xBBB0A8", Offset = "0xBBB0A8", VA = "0xBBB0A8")]
			internal void <timeBasedTesting>b__1()
			{
			}

			[Token(Token = "0x6001B1B")]
			[Address(RVA = "0xBBB0CC", Offset = "0xBBB0CC", VA = "0xBBB0CC")]
			internal void <timeBasedTesting>b__2(float val)
			{
			}

			[Token(Token = "0x6001B1C")]
			[Address(RVA = "0xBBB0DC", Offset = "0xBBB0DC", VA = "0xBBB0DC")]
			internal void <timeBasedTesting>b__3()
			{
			}

			[Token(Token = "0x6001B1D")]
			[Address(RVA = "0xBBB284", Offset = "0xBBB284", VA = "0xBBB284")]
			internal void <timeBasedTesting>b__4()
			{
			}

			[Token(Token = "0x6001B1E")]
			[Address(RVA = "0xBBB66C", Offset = "0xBBB66C", VA = "0xBBB66C")]
			internal void <timeBasedTesting>b__5()
			{
			}

			[Token(Token = "0x6001B1F")]
			[Address(RVA = "0xBBB83C", Offset = "0xBBB83C", VA = "0xBBB83C")]
			internal void <timeBasedTesting>b__6(float val)
			{
			}

			[Token(Token = "0x6001B20")]
			[Address(RVA = "0xBBB95C", Offset = "0xBBB95C", VA = "0xBBB95C")]
			internal void <timeBasedTesting>b__7()
			{
			}

			[Token(Token = "0x6001B21")]
			[Address(RVA = "0xBBBB94", Offset = "0xBBBB94", VA = "0xBBBB94")]
			internal void <timeBasedTesting>b__13()
			{
			}

			[Token(Token = "0x6001B22")]
			[Address(RVA = "0xBBBBA4", Offset = "0xBBBBA4", VA = "0xBBBBA4")]
			internal void <timeBasedTesting>b__14(Vector3 newPosition)
			{
			}

			[Token(Token = "0x6001B23")]
			[Address(RVA = "0xBBBBEC", Offset = "0xBBBBEC", VA = "0xBBBBEC")]
			internal void <timeBasedTesting>b__15(object param)
			{
			}

			[Token(Token = "0x6001B24")]
			[Address(RVA = "0xBBBE88", Offset = "0xBBBE88", VA = "0xBBBE88")]
			internal void <timeBasedTesting>b__16()
			{
			}

			[Token(Token = "0x6001B25")]
			[Address(RVA = "0xBBC11C", Offset = "0xBBC11C", VA = "0xBBC11C")]
			internal void <timeBasedTesting>b__8()
			{
			}

			[Token(Token = "0x6001B26")]
			[Address(RVA = "0xBBC458", Offset = "0xBBC458", VA = "0xBBC458")]
			internal void <timeBasedTesting>b__9(float val)
			{
			}

			[Token(Token = "0x6001B27")]
			[Address(RVA = "0xBBC464", Offset = "0xBBC464", VA = "0xBBC464")]
			internal void <timeBasedTesting>b__10()
			{
			}

			[Token(Token = "0x6001B28")]
			[Address(RVA = "0xBBC6DC", Offset = "0xBBC6DC", VA = "0xBBC6DC")]
			internal void <timeBasedTesting>b__11(Vector3 val)
			{
			}

			[Token(Token = "0x6001B29")]
			[Address(RVA = "0xBBC718", Offset = "0xBBC718", VA = "0xBBC718")]
			internal void <timeBasedTesting>b__12()
			{
			}
		}

		[Token(Token = "0x200042D")]
		[CompilerGenerated]
		private sealed class <timeBasedTesting>d__24 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40019E0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40019E1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40019E2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TestingUnitTests <>4__this;

			[Token(Token = "0x40019E3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private <>c__DisplayClass24_0 <>8__1;

			[Token(Token = "0x40019E4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <descriptionMatchCount>5__2;

			[Token(Token = "0x17000325")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B2D")]
				[Address(RVA = "0xBBE80C", Offset = "0xBBE80C", VA = "0xBBE80C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000326")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B2F")]
				[Address(RVA = "0xBBE854", Offset = "0xBBE854", VA = "0xBBE854", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B2A")]
			[Address(RVA = "0xBB8EE8", Offset = "0xBB8EE8", VA = "0xBB8EE8")]
			[DebuggerHidden]
			public <timeBasedTesting>d__24(int <>1__state)
			{
			}

			[Token(Token = "0x6001B2B")]
			[Address(RVA = "0xBBC794", Offset = "0xBBC794", VA = "0xBBC794", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B2C")]
			[Address(RVA = "0xBBC798", Offset = "0xBBC798", VA = "0xBBC798", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B2E")]
			[Address(RVA = "0xBBE814", Offset = "0xBBE814", VA = "0xBBE814", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200042E")]
		[CompilerGenerated]
		private sealed class <lotsOfCancels>d__25 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40019E5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40019E6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40019E7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TestingUnitTests <>4__this;

			[Token(Token = "0x40019E8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <cubeCount>5__2;

			[Token(Token = "0x40019E9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int[] <tweensA>5__3;

			[Token(Token = "0x40019EA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private GameObject[] <aGOs>5__4;

			[Token(Token = "0x40019EB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int[] <tweensB>5__5;

			[Token(Token = "0x40019EC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private GameObject[] <bGOs>5__6;

			[Token(Token = "0x17000327")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B33")]
				[Address(RVA = "0xBBF2D0", Offset = "0xBBF2D0", VA = "0xBBF2D0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000328")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B35")]
				[Address(RVA = "0xBBF318", Offset = "0xBBF318", VA = "0xBBF318", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B30")]
			[Address(RVA = "0xBB8F78", Offset = "0xBB8F78", VA = "0xBB8F78")]
			[DebuggerHidden]
			public <lotsOfCancels>d__25(int <>1__state)
			{
			}

			[Token(Token = "0x6001B31")]
			[Address(RVA = "0xBBE85C", Offset = "0xBBE85C", VA = "0xBBE85C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B32")]
			[Address(RVA = "0xBBE860", Offset = "0xBBE860", VA = "0xBBE860", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B34")]
			[Address(RVA = "0xBBF2D8", Offset = "0xBBF2D8", VA = "0xBBF2D8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200042F")]
		[CompilerGenerated]
		private sealed class <pauseTimeNow>d__26 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40019ED")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40019EE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40019EF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TestingUnitTests <>4__this;

			[Token(Token = "0x17000329")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001B39")]
				[Address(RVA = "0xBBF508", Offset = "0xBBF508", VA = "0xBBF508", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700032A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001B3B")]
				[Address(RVA = "0xBBF550", Offset = "0xBBF550", VA = "0xBBF550", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001B36")]
			[Address(RVA = "0xBB9008", Offset = "0xBB9008", VA = "0xBB9008")]
			[DebuggerHidden]
			public <pauseTimeNow>d__26(int <>1__state)
			{
			}

			[Token(Token = "0x6001B37")]
			[Address(RVA = "0xBBF320", Offset = "0xBBF320", VA = "0xBBF320", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001B38")]
			[Address(RVA = "0xBBF324", Offset = "0xBBF324", VA = "0xBBF324", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001B3A")]
			[Address(RVA = "0xBBF510", Offset = "0xBBF510", VA = "0xBBF510", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001993")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject cube1;

		[Token(Token = "0x4001994")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject cube2;

		[Token(Token = "0x4001995")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject cube3;

		[Token(Token = "0x4001996")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject cube4;

		[Token(Token = "0x4001997")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject cubeAlpha1;

		[Token(Token = "0x4001998")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject cubeAlpha2;

		[Token(Token = "0x4001999")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool eventGameObjectWasCalled;

		[Token(Token = "0x400199A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		private bool eventGeneralWasCalled;

		[Token(Token = "0x400199B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private int lt1Id;

		[Token(Token = "0x400199C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private LTDescr lt2;

		[Token(Token = "0x400199D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private LTDescr lt3;

		[Token(Token = "0x400199E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private LTDescr lt4;

		[Token(Token = "0x400199F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private LTDescr[] groupTweens;

		[Token(Token = "0x40019A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GameObject[] groupGOs;

		[Token(Token = "0x40019A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private int groupTweensCnt;

		[Token(Token = "0x40019A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private int rotateRepeat;

		[Token(Token = "0x40019A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private int rotateRepeatAngle;

		[Token(Token = "0x40019A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private GameObject boxNoCollider;

		[Token(Token = "0x40019A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float timeElapsedNormalTimeScale;

		[Token(Token = "0x40019A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private float timeElapsedIgnoreTimeScale;

		[Token(Token = "0x40019A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool pauseTweenDidFinish;

		[Token(Token = "0x6001AEC")]
		[Address(RVA = "0xBB72BC", Offset = "0xBB72BC", VA = "0xBB72BC")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001AED")]
		[Address(RVA = "0xBB7398", Offset = "0xBB7398", VA = "0xBB7398")]
		private void Start()
		{
		}

		[Token(Token = "0x6001AEE")]
		[Address(RVA = "0xBB8DDC", Offset = "0xBB8DDC", VA = "0xBB8DDC")]
		private GameObject cubeNamed(string name)
		{
			return null;
		}

		[Token(Token = "0x6001AEF")]
		[Address(RVA = "0xBB8E80", Offset = "0xBB8E80", VA = "0xBB8E80")]
		[IteratorStateMachine(typeof(<timeBasedTesting>d__24))]
		private IEnumerator timeBasedTesting()
		{
			return null;
		}

		[Token(Token = "0x6001AF0")]
		[Address(RVA = "0xBB8F10", Offset = "0xBB8F10", VA = "0xBB8F10")]
		[IteratorStateMachine(typeof(<lotsOfCancels>d__25))]
		private IEnumerator lotsOfCancels()
		{
			return null;
		}

		[Token(Token = "0x6001AF1")]
		[Address(RVA = "0xBB8FA0", Offset = "0xBB8FA0", VA = "0xBB8FA0")]
		[IteratorStateMachine(typeof(<pauseTimeNow>d__26))]
		private IEnumerator pauseTimeNow()
		{
			return null;
		}

		[Token(Token = "0x6001AF2")]
		[Address(RVA = "0xBB9030", Offset = "0xBB9030", VA = "0xBB9030")]
		private void rotateRepeatFinished()
		{
		}

		[Token(Token = "0x6001AF3")]
		[Address(RVA = "0xBB908C", Offset = "0xBB908C", VA = "0xBB908C")]
		private void rotateRepeatAllFinished()
		{
		}

		[Token(Token = "0x6001AF4")]
		[Address(RVA = "0xBB929C", Offset = "0xBB929C", VA = "0xBB929C")]
		private void eventGameObjectCalled(LTEvent e)
		{
		}

		[Token(Token = "0x6001AF5")]
		[Address(RVA = "0xBB92A8", Offset = "0xBB92A8", VA = "0xBB92A8")]
		private void eventGeneralCalled(LTEvent e)
		{
		}

		[Token(Token = "0x6001AF6")]
		[Address(RVA = "0xBB92B4", Offset = "0xBB92B4", VA = "0xBB92B4")]
		public TestingUnitTests()
		{
		}
	}
}
namespace MessengerExtensions
{
	[Token(Token = "0x2000430")]
	public static class MessengerThatIncludesInactiveElements
	{
		[Token(Token = "0x40019F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static BindingFlags flags;

		[Token(Token = "0x6001B3C")]
		[Address(RVA = "0xBBF558", Offset = "0xBBF558", VA = "0xBBF558")]
		private static void InvokeIfExists(this object objectToCheck, string methodName, params object[] parameters)
		{
		}

		[Token(Token = "0x6001B3D")]
		[Address(RVA = "0xBBF688", Offset = "0xBBF688", VA = "0xBBF688")]
		private static void InvokeIfExists(this object objectToCheck, string methodName)
		{
		}

		[Token(Token = "0x6001B3E")]
		[Address(RVA = "0xBBF7B4", Offset = "0xBBF7B4", VA = "0xBBF7B4")]
		public static void InvokeMethod(this GameObject gameobject, string methodName, bool includeInactive, params object[] parameters)
		{
		}

		[Token(Token = "0x6001B3F")]
		[Address(RVA = "0xBBF8B8", Offset = "0xBBF8B8", VA = "0xBBF8B8")]
		public static void InvokeMethod(this GameObject gameobject, string methodName, bool includeInactive)
		{
		}

		[Token(Token = "0x6001B40")]
		[Address(RVA = "0xBBF9AC", Offset = "0xBBF9AC", VA = "0xBBF9AC")]
		public static void InvokeMethod(this Component component, string methodName, bool includeInactive, params object[] parameters)
		{
		}

		[Token(Token = "0x6001B41")]
		[Address(RVA = "0xBBFA3C", Offset = "0xBBFA3C", VA = "0xBBFA3C")]
		public static void InvokeMethod(this Component component, string methodName, bool includeInactive)
		{
		}

		[Token(Token = "0x6001B42")]
		[Address(RVA = "0xBBFAC4", Offset = "0xBBFAC4", VA = "0xBBFAC4")]
		public static void InvokeMethodInChildren(this GameObject gameobject, string methodName, bool includeInactive, params object[] parameters)
		{
		}

		[Token(Token = "0x6001B43")]
		[Address(RVA = "0xBBFBCC", Offset = "0xBBFBCC", VA = "0xBBFBCC")]
		public static void InvokeMethodInChildren(this GameObject gameobject, string methodName, bool includeInactive)
		{
		}

		[Token(Token = "0x6001B44")]
		[Address(RVA = "0xBBFCC4", Offset = "0xBBFCC4", VA = "0xBBFCC4")]
		public static void InvokeMethodInChildren(this Component component, string methodName, bool includeInactive, params object[] parameters)
		{
		}

		[Token(Token = "0x6001B45")]
		[Address(RVA = "0xBBFD54", Offset = "0xBBFD54", VA = "0xBBFD54")]
		public static void InvokeMethodInChildren(this Component component, string methodName, bool includeInactive)
		{
		}

		[Token(Token = "0x6001B46")]
		[Address(RVA = "0xBBFDDC", Offset = "0xBBFDDC", VA = "0xBBFDDC")]
		public static void SendMessageUpwardsToAll(this GameObject gameobject, string methodName, bool includeInactive, params object[] parameters)
		{
		}

		[Token(Token = "0x6001B47")]
		[Address(RVA = "0xBBFEDC", Offset = "0xBBFEDC", VA = "0xBBFEDC")]
		public static void SendMessageUpwardsToAll(this Component component, string methodName, bool includeInactive, params object[] parameters)
		{
		}
	}
}
namespace ClockStone
{
	[Token(Token = "0x2000431")]
	public static class AudioControllerHelper
	{
		[Token(Token = "0x6001B49")]
		[Address(RVA = "0xBBFFB8", Offset = "0xBBFFB8", VA = "0xBBFFB8")]
		public static AudioSubItem[] _ChooseSubItems(AudioItem audioItem, AudioObject useExistingAudioObj)
		{
			return null;
		}

		[Token(Token = "0x6001B4A")]
		[Address(RVA = "0xBC0284", Offset = "0xBC0284", VA = "0xBC0284")]
		public static AudioSubItem _ChooseSingleSubItem(AudioItem audioItem, AudioPickSubItemMode pickMode, AudioObject useExistingAudioObj)
		{
			return null;
		}

		[Token(Token = "0x6001B4B")]
		[Address(RVA = "0xBC02AC", Offset = "0xBC02AC", VA = "0xBC02AC")]
		public static AudioSubItem _ChooseSingleSubItem(AudioItem audioItem)
		{
			return null;
		}

		[Token(Token = "0x6001B4C")]
		[Address(RVA = "0xBBFFD4", Offset = "0xBBFFD4", VA = "0xBBFFD4")]
		private static AudioSubItem[] _ChooseSubItems(AudioItem audioItem, AudioPickSubItemMode pickMode, AudioObject useExistingAudioObj)
		{
			return null;
		}

		[Token(Token = "0x6001B4D")]
		[Address(RVA = "0xBC02C8", Offset = "0xBC02C8", VA = "0xBC02C8")]
		private static int _ChooseRandomSubitem(AudioItem audioItem, bool allowSameElementTwiceInRow, int lastChosen, bool switchOddsEvens = false)
		{
			return default(int);
		}

		[Token(Token = "0x6001B4E")]
		[Address(RVA = "0xBC0434", Offset = "0xBC0434", VA = "0xBC0434")]
		private static bool isOdd(int i)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000432")]
	public class AudioFader
	{
		[Token(Token = "0x40019F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private float _fadeOutTotalTime;

		[Token(Token = "0x40019F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private double _fadeOutStartTime;

		[Token(Token = "0x40019F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float _fadeInTotalTime;

		[Token(Token = "0x40019F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private double _fadeInStartTime;

		[Token(Token = "0x1700032B")]
		public double time
		{
			[Token(Token = "0x6001B4F")]
			[Address(RVA = "0xBC043C", Offset = "0xBC043C", VA = "0xBC043C")]
			[CompilerGenerated]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001B50")]
			[Address(RVA = "0xBC0444", Offset = "0xBC0444", VA = "0xBC0444")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700032C")]
		public bool isFadingOutComplete
		{
			[Token(Token = "0x6001B51")]
			[Address(RVA = "0xBC044C", Offset = "0xBC044C", VA = "0xBC044C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700032D")]
		public bool isFadingOut
		{
			[Token(Token = "0x6001B52")]
			[Address(RVA = "0xBC049C", Offset = "0xBC049C", VA = "0xBC049C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700032E")]
		public bool isFadingOutOrScheduled
		{
			[Token(Token = "0x6001B53")]
			[Address(RVA = "0xBC04F4", Offset = "0xBC04F4", VA = "0xBC04F4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700032F")]
		public bool isFadingIn
		{
			[Token(Token = "0x6001B54")]
			[Address(RVA = "0xBC0504", Offset = "0xBC0504", VA = "0xBC0504")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001B55")]
		[Address(RVA = "0xBC0554", Offset = "0xBC0554", VA = "0xBC0554")]
		public void Set0()
		{
		}

		[Token(Token = "0x6001B56")]
		[Address(RVA = "0xBC0578", Offset = "0xBC0578", VA = "0xBC0578")]
		public void FadeIn(float fadeInTime, bool stopCurrentFadeOut = false)
		{
		}

		[Token(Token = "0x6001B57")]
		[Address(RVA = "0xBC0584", Offset = "0xBC0584", VA = "0xBC0584")]
		public void FadeIn(float fadeInTime, double startToFadeTime, bool stopCurrentFadeOut = false)
		{
		}

		[Token(Token = "0x6001B58")]
		[Address(RVA = "0xBC0654", Offset = "0xBC0654", VA = "0xBC0654")]
		public void FadeOut(float fadeOutLength, float startToFadeTime)
		{
		}

		[Token(Token = "0x6001B59")]
		[Address(RVA = "0xBC06D8", Offset = "0xBC06D8", VA = "0xBC06D8")]
		public float Get()
		{
			return default(float);
		}

		[Token(Token = "0x6001B5A")]
		[Address(RVA = "0xBC06F0", Offset = "0xBC06F0", VA = "0xBC06F0")]
		public float Get(out bool finishedFadeOut)
		{
			return default(float);
		}

		[Token(Token = "0x6001B5B")]
		[Address(RVA = "0xBC0608", Offset = "0xBC0608", VA = "0xBC0608")]
		private float _GetFadeOutValue()
		{
			return default(float);
		}

		[Token(Token = "0x6001B5C")]
		[Address(RVA = "0xBC0800", Offset = "0xBC0800", VA = "0xBC0800")]
		private float _GetFadeInValue()
		{
			return default(float);
		}

		[Token(Token = "0x6001B5D")]
		[Address(RVA = "0xBC0848", Offset = "0xBC0848", VA = "0xBC0848")]
		private float _GetFadeValue(float t, float dt)
		{
			return default(float);
		}

		[Token(Token = "0x6001B5E")]
		[Address(RVA = "0xBC0880", Offset = "0xBC0880", VA = "0xBC0880")]
		public AudioFader()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000433")]
	public class AudioCategory
	{
		[Token(Token = "0x40019F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x40019F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private AudioCategory _parentCategory;

		[Token(Token = "0x40019F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AudioFader _audioFader;

		[Token(Token = "0x40019F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private string _parentCategoryName;

		[Token(Token = "0x40019FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject AudioObjectPrefab;

		[Token(Token = "0x40019FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public AudioItem[] AudioItems;

		[Token(Token = "0x40019FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[SerializeField]
		private float _volume;

		[Token(Token = "0x40019FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AudioMixerGroup audioMixerGroup;

		[Token(Token = "0x17000330")]
		public float Volume
		{
			[Token(Token = "0x6001B5F")]
			[Address(RVA = "0xBC08A0", Offset = "0xBC08A0", VA = "0xBC08A0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001B60")]
			[Address(RVA = "0xBC08A8", Offset = "0xBC08A8", VA = "0xBC08A8")]
			set
			{
			}
		}

		[Token(Token = "0x17000331")]
		public float VolumeTotal
		{
			[Token(Token = "0x6001B61")]
			[Address(RVA = "0xBC09A0", Offset = "0xBC09A0", VA = "0xBC09A0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000332")]
		public AudioCategory parentCategory
		{
			[Token(Token = "0x6001B63")]
			[Address(RVA = "0xBC0B38", Offset = "0xBC0B38", VA = "0xBC0B38")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B62")]
			[Address(RVA = "0xBC0C28", Offset = "0xBC0C28", VA = "0xBC0C28")]
			set
			{
			}
		}

		[Token(Token = "0x17000333")]
		private AudioFader audioFader
		{
			[Token(Token = "0x6001B64")]
			[Address(RVA = "0xBC0AB4", Offset = "0xBC0AB4", VA = "0xBC0AB4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000334")]
		public AudioController audioController
		{
			[Token(Token = "0x6001B65")]
			[Address(RVA = "0xBC0C44", Offset = "0xBC0C44", VA = "0xBC0C44")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B66")]
			[Address(RVA = "0xBC0C4C", Offset = "0xBC0C4C", VA = "0xBC0C4C")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x17000335")]
		public bool isFadingIn
		{
			[Token(Token = "0x6001B72")]
			[Address(RVA = "0xBC11D8", Offset = "0xBC11D8", VA = "0xBC11D8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000336")]
		public bool isFadingOut
		{
			[Token(Token = "0x6001B73")]
			[Address(RVA = "0xBC123C", Offset = "0xBC123C", VA = "0xBC123C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000337")]
		public bool isFadeOutComplete
		{
			[Token(Token = "0x6001B74")]
			[Address(RVA = "0xBC12A8", Offset = "0xBC12A8", VA = "0xBC12A8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001B67")]
		[Address(RVA = "0xBC0C54", Offset = "0xBC0C54", VA = "0xBC0C54")]
		public AudioCategory(AudioController audioController)
		{
		}

		[Token(Token = "0x6001B68")]
		[Address(RVA = "0xBC0C84", Offset = "0xBC0C84", VA = "0xBC0C84")]
		public GameObject GetAudioObjectPrefab()
		{
			return null;
		}

		[Token(Token = "0x6001B69")]
		[Address(RVA = "0xBC0D2C", Offset = "0xBC0D2C", VA = "0xBC0D2C")]
		public AudioMixerGroup GetAudioMixerGroup()
		{
			return null;
		}

		[Token(Token = "0x6001B6A")]
		[Address(RVA = "0xBC0DBC", Offset = "0xBC0DBC", VA = "0xBC0DBC")]
		internal void _AnalyseAudioItems(Dictionary<string, AudioItem> audioItemsDict)
		{
		}

		[Token(Token = "0x6001B6B")]
		[Address(RVA = "0xBC0F94", Offset = "0xBC0F94", VA = "0xBC0F94")]
		internal int _GetIndexOf(AudioItem audioItem)
		{
			return default(int);
		}

		[Token(Token = "0x6001B6C")]
		[Address(RVA = "0xBC08B0", Offset = "0xBC08B0", VA = "0xBC08B0")]
		private void _ApplyVolumeChange()
		{
		}

		[Token(Token = "0x6001B6D")]
		[Address(RVA = "0xBC0FE4", Offset = "0xBC0FE4", VA = "0xBC0FE4")]
		private bool _IsCategoryParentOf(AudioCategory toTest, AudioCategory parent)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B6E")]
		[Address(RVA = "0xBC1014", Offset = "0xBC1014", VA = "0xBC1014")]
		public void UnloadAllAudioClips()
		{
		}

		[Token(Token = "0x6001B6F")]
		[Address(RVA = "0xBC1154", Offset = "0xBC1154", VA = "0xBC1154")]
		public void FadeIn(float fadeInTime, bool stopCurrentFadeOut = true)
		{
		}

		[Token(Token = "0x6001B70")]
		[Address(RVA = "0xBC119C", Offset = "0xBC119C", VA = "0xBC119C")]
		public void FadeOut(float fadeOutLength, float startToFadeTime = 0f)
		{
		}

		[Token(Token = "0x6001B71")]
		[Address(RVA = "0xBC0A0C", Offset = "0xBC0A0C", VA = "0xBC0A0C")]
		private void _UpdateFadeTime()
		{
		}
	}
	[Token(Token = "0x2000434")]
	public enum AudioPickSubItemMode
	{
		[Token(Token = "0x4001A00")]
		Disabled,
		[Token(Token = "0x4001A01")]
		Random,
		[Token(Token = "0x4001A02")]
		RandomNotSameTwice,
		[Token(Token = "0x4001A03")]
		Sequence,
		[Token(Token = "0x4001A04")]
		SequenceWithRandomStart,
		[Token(Token = "0x4001A05")]
		AllSimultaneously,
		[Token(Token = "0x4001A06")]
		TwoSimultaneously,
		[Token(Token = "0x4001A07")]
		StartLoopSequenceWithFirst,
		[Token(Token = "0x4001A08")]
		RandomNotSameTwiceOddsEvens
	}
	[Serializable]
	[Token(Token = "0x2000435")]
	public class AudioItem
	{
		[Serializable]
		[Token(Token = "0x2000436")]
		public enum LoopMode
		{
			[Token(Token = "0x4001A23")]
			DoNotLoop = 0,
			[Token(Token = "0x4001A24")]
			LoopSubitem = 1,
			[Token(Token = "0x4001A25")]
			LoopSequence = 2,
			[Token(Token = "0x4001A26")]
			PlaySequenceAndLoopLast = 4,
			[Token(Token = "0x4001A27")]
			IntroLoopOutroSequence = 5
		}

		[Token(Token = "0x4001A09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string Name;

		[Token(Token = "0x4001A0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public LoopMode Loop;

		[Token(Token = "0x4001A0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int loopSequenceCount;

		[Token(Token = "0x4001A0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float loopSequenceOverlap;

		[Token(Token = "0x4001A0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float loopSequenceRandomDelay;

		[Token(Token = "0x4001A0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float loopSequenceRandomPitch;

		[Token(Token = "0x4001A0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float loopSequenceRandomVolume;

		[Token(Token = "0x4001A10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool DestroyOnLoad;

		[Token(Token = "0x4001A11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float Volume;

		[Token(Token = "0x4001A12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public AudioPickSubItemMode SubItemPickMode;

		[Token(Token = "0x4001A13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float MinTimeBetweenPlayCalls;

		[Token(Token = "0x4001A14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int MaxInstanceCount;

		[Token(Token = "0x4001A15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float Delay;

		[Token(Token = "0x4001A16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float PitchShift;

		[Token(Token = "0x4001A17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float RandomVolume;

		[Token(Token = "0x4001A18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float RandomPitch;

		[Token(Token = "0x4001A19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float RandomDelay;

		[Token(Token = "0x4001A1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool overrideAudioSourceSettings;

		[Token(Token = "0x4001A1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float audioSource_MinDistance;

		[Token(Token = "0x4001A1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float audioSource_MaxDistance;

		[Token(Token = "0x4001A1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float spatialBlend;

		[Token(Token = "0x4001A1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AudioSubItem[] subItems;

		[Token(Token = "0x4001A1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		internal int _lastChosen;

		[Token(Token = "0x4001A20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		internal double _lastPlayedTime;

		[NonSerialized]
		[Token(Token = "0x4001A21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private AudioCategory _category;

		[Token(Token = "0x17000338")]
		public AudioCategory category
		{
			[Token(Token = "0x6001B78")]
			[Address(RVA = "0xBC14DC", Offset = "0xBC14DC", VA = "0xBC14DC")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B77")]
			[Address(RVA = "0xBC14D4", Offset = "0xBC14D4", VA = "0xBC14D4")]
			private set
			{
			}
		}

		[Token(Token = "0x6001B75")]
		[Address(RVA = "0xBC130C", Offset = "0xBC130C", VA = "0xBC130C")]
		public AudioItem()
		{
		}

		[Token(Token = "0x6001B76")]
		[Address(RVA = "0xBC1350", Offset = "0xBC1350", VA = "0xBC1350")]
		public AudioItem(AudioItem orig)
		{
		}

		[Token(Token = "0x6001B79")]
		[Address(RVA = "0xBC14E4", Offset = "0xBC14E4", VA = "0xBC14E4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001B7A")]
		[Address(RVA = "0xBC1504", Offset = "0xBC1504", VA = "0xBC1504")]
		public void ResetSequence()
		{
		}

		[Token(Token = "0x6001B7B")]
		[Address(RVA = "0xBC0F8C", Offset = "0xBC0F8C", VA = "0xBC0F8C")]
		internal void _Initialize(AudioCategory categ)
		{
		}

		[Token(Token = "0x6001B7C")]
		[Address(RVA = "0xBC1510", Offset = "0xBC1510", VA = "0xBC1510")]
		private void _NormalizeSubItems()
		{
		}

		[Token(Token = "0x6001B7D")]
		[Address(RVA = "0xBC1694", Offset = "0xBC1694", VA = "0xBC1694")]
		private static bool _IsValidSubItem(AudioSubItem item)
		{
			return default(bool);
		}

		[Token(Token = "0x6001B7E")]
		[Address(RVA = "0xBC1070", Offset = "0xBC1070", VA = "0xBC1070")]
		public void UnloadAudioClip()
		{
		}
	}
	[Token(Token = "0x2000437")]
	public enum AudioSubItemType
	{
		[Token(Token = "0x4001A29")]
		Clip,
		[Token(Token = "0x4001A2A")]
		Item
	}
	[Serializable]
	[Token(Token = "0x2000438")]
	public class AudioSubItem
	{
		[Token(Token = "0x4001A2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public AudioSubItemType SubItemType;

		[Token(Token = "0x4001A2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float Probability;

		[Token(Token = "0x4001A2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool DisableOtherSubitems;

		[Token(Token = "0x4001A2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string ItemModeAudioID;

		[Token(Token = "0x4001A2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip Clip;

		[Token(Token = "0x4001A30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float Volume;

		[Token(Token = "0x4001A31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float PitchShift;

		[Token(Token = "0x4001A32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float Pan2D;

		[Token(Token = "0x4001A33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float Delay;

		[Token(Token = "0x4001A34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float RandomPitch;

		[Token(Token = "0x4001A35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float RandomVolume;

		[Token(Token = "0x4001A36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float RandomDelay;

		[Token(Token = "0x4001A37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float ClipStopTime;

		[Token(Token = "0x4001A38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float ClipStartTime;

		[Token(Token = "0x4001A39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float FadeIn;

		[Token(Token = "0x4001A3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float FadeOut;

		[Token(Token = "0x4001A3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public bool RandomStartPosition;

		[Token(Token = "0x4001A3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<string> individualSettings;

		[Token(Token = "0x4001A3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float _summedProbability;

		[Token(Token = "0x4001A3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		internal int _subItemID;

		[NonSerialized]
		[Token(Token = "0x4001A3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private AudioItem _item;

		[Token(Token = "0x17000339")]
		internal float _SummedProbability
		{
			[Token(Token = "0x6001B81")]
			[Address(RVA = "0xBC29AC", Offset = "0xBC29AC", VA = "0xBC29AC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001B82")]
			[Address(RVA = "0xBC29B4", Offset = "0xBC29B4", VA = "0xBC29B4")]
			set
			{
			}
		}

		[Token(Token = "0x1700033A")]
		public AudioItem item
		{
			[Token(Token = "0x6001B84")]
			[Address(RVA = "0xBC29C4", Offset = "0xBC29C4", VA = "0xBC29C4")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B83")]
			[Address(RVA = "0xBC29BC", Offset = "0xBC29BC", VA = "0xBC29BC")]
			internal set
			{
			}
		}

		[Token(Token = "0x6001B7F")]
		[Address(RVA = "0xBC2734", Offset = "0xBC2734", VA = "0xBC2734")]
		public AudioSubItem()
		{
		}

		[Token(Token = "0x6001B80")]
		[Address(RVA = "0xBC27C4", Offset = "0xBC27C4", VA = "0xBC27C4")]
		public AudioSubItem(AudioSubItem orig, AudioItem item)
		{
		}

		[Token(Token = "0x6001B85")]
		[Address(RVA = "0xBC29CC", Offset = "0xBC29CC", VA = "0xBC29CC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Serializable]
	[Token(Token = "0x2000439")]
	public class Playlist
	{
		[Token(Token = "0x4001A40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string name;

		[Token(Token = "0x4001A41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string[] playlistItems;

		[Token(Token = "0x6001B86")]
		[Address(RVA = "0xBC2A50", Offset = "0xBC2A50", VA = "0xBC2A50")]
		public Playlist()
		{
		}

		[Token(Token = "0x6001B87")]
		[Address(RVA = "0xBC2AA4", Offset = "0xBC2AA4", VA = "0xBC2AA4")]
		public Playlist(string name, string[] playlistItems)
		{
		}
	}
	[Token(Token = "0x200043A")]
	[RequireComponent(typeof(AudioSource))]
	[AddComponentMenu("ClockStone/Audio/AudioObject")]
	public class AudioObject : RegisteredComponent
	{
		[Token(Token = "0x200043B")]
		public delegate void AudioEventDelegate(AudioObject audioObject);

		[Token(Token = "0x200043C")]
		[CompilerGenerated]
		private sealed class <_WaitForSecondsThenStop>d__76 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001A6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001A70")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001A71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float startToFadeTime;

			[Token(Token = "0x4001A72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AudioObject <>4__this;

			[Token(Token = "0x4001A73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float fadeOutLength;

			[Token(Token = "0x1700035A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001BF3")]
				[Address(RVA = "0xBC5CD8", Offset = "0xBC5CD8", VA = "0xBC5CD8", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700035B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001BF5")]
				[Address(RVA = "0xBC5D20", Offset = "0xBC5D20", VA = "0xBC5D20", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001BF0")]
			[Address(RVA = "0xBC3D68", Offset = "0xBC3D68", VA = "0xBC3D68")]
			[DebuggerHidden]
			public <_WaitForSecondsThenStop>d__76(int <>1__state)
			{
			}

			[Token(Token = "0x6001BF1")]
			[Address(RVA = "0xBC5C18", Offset = "0xBC5C18", VA = "0xBC5C18", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001BF2")]
			[Address(RVA = "0xBC5C1C", Offset = "0xBC5C1C", VA = "0xBC5C1C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001BF4")]
			[Address(RVA = "0xBC5CE0", Offset = "0xBC5CE0", VA = "0xBC5CE0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200043D")]
		[CompilerGenerated]
		private sealed class <_WaitThenPause>d__86 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001A74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001A75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001A76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float waitTime;

			[Token(Token = "0x4001A77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public AudioObject <>4__this;

			[Token(Token = "0x4001A78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public int counter;

			[Token(Token = "0x1700035C")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001BF9")]
				[Address(RVA = "0xBC5DF0", Offset = "0xBC5DF0", VA = "0xBC5DF0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700035D")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001BFB")]
				[Address(RVA = "0xBC5E38", Offset = "0xBC5E38", VA = "0xBC5E38", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001BF6")]
			[Address(RVA = "0xBC41D4", Offset = "0xBC41D4", VA = "0xBC41D4")]
			[DebuggerHidden]
			public <_WaitThenPause>d__86(int <>1__state)
			{
			}

			[Token(Token = "0x6001BF7")]
			[Address(RVA = "0xBC5D28", Offset = "0xBC5D28", VA = "0xBC5D28", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001BF8")]
			[Address(RVA = "0xBC5D2C", Offset = "0xBC5D2C", VA = "0xBC5D2C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001BFA")]
			[Address(RVA = "0xBC5DF8", Offset = "0xBC5DF8", VA = "0xBC5DF8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[NonSerialized]
		[Token(Token = "0x4001A43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private AudioCategory _category;

		[Token(Token = "0x4001A45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AudioSubItem _subItemPrimary;

		[Token(Token = "0x4001A46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AudioSubItem _subItemSecondary;

		[Token(Token = "0x4001A47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private AudioEventDelegate _completelyPlayedDelegate;

		[Token(Token = "0x4001A48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private int _pauseCoroutineCounter;

		[Token(Token = "0x4001A49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private bool areSources1and2Swapped;

		[Token(Token = "0x4001A4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		internal float _volumeExcludingCategory;

		[Token(Token = "0x4001A4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float _volumeFromPrimaryFade;

		[Token(Token = "0x4001A4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float _volumeFromSecondaryFade;

		[Token(Token = "0x4001A4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		internal float _volumeFromScriptCall;

		[Token(Token = "0x4001A4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool _paused;

		[Token(Token = "0x4001A4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool _applicationPaused;

		[Token(Token = "0x4001A50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private AudioFader _primaryFader;

		[Token(Token = "0x4001A51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private AudioFader _secondaryFader;

		[Token(Token = "0x4001A52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private double _playTime;

		[Token(Token = "0x4001A53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private double _playStartTimeLocal;

		[Token(Token = "0x4001A54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private double _playStartTimeSystem;

		[Token(Token = "0x4001A55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private double _playScheduledTimeDsp;

		[Token(Token = "0x4001A56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private double _audioObjectTime;

		[Token(Token = "0x4001A57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private bool _IsInactive;

		[Token(Token = "0x4001A58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA9")]
		private bool _stopRequested;

		[Token(Token = "0x4001A59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAA")]
		private bool _finishSequence;

		[Token(Token = "0x4001A5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private int _loopSequenceCount;

		[Token(Token = "0x4001A5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool _stopAfterFadeoutUserSetting;

		[Token(Token = "0x4001A5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		private bool _pauseWithFadeOutRequested;

		[Token(Token = "0x4001A5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private double _dspTimeRemainingAtPause;

		[Token(Token = "0x4001A5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private AudioController _audioController;

		[Token(Token = "0x4001A5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		internal bool _isCurrentPlaylistTrack;

		[Token(Token = "0x4001A60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		internal float _audioSource_MinDistance_Saved;

		[Token(Token = "0x4001A61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		internal float _audioSource_MaxDistance_Saved;

		[Token(Token = "0x4001A62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		internal float _audioSource_SpatialBlend_Saved;

		[Token(Token = "0x4001A63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		internal float _audioSource_Pan_Saved;

		[Token(Token = "0x4001A64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private AudioMixerGroup _audioMixerGroup;

		[Token(Token = "0x4001A65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		internal int _lastChosenSubItemIndex;

		[Token(Token = "0x4001A66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private AudioSource _audioSource1;

		[Token(Token = "0x4001A67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private AudioSource _audioSource2;

		[Token(Token = "0x4001A68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private bool _primaryAudioSourcePaused;

		[Token(Token = "0x4001A69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x101")]
		private bool _secondaryAudioSourcePaused;

		[Token(Token = "0x4001A6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x102")]
		private bool _primarySourceWasPlayingWhenDisabled;

		[Token(Token = "0x4001A6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x103")]
		private bool _primarySourceWasPlayingLastUpdate;

		[Token(Token = "0x4001A6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x104")]
		private bool _secondarySourceWasPlayingWhenDisabled;

		[Token(Token = "0x4001A6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x105")]
		private bool _secondarySourceWasPlayingLastUpdate;

		[Token(Token = "0x4001A6E")]
		private const float VOLUME_TRANSFORM_POWER = 1.6f;

		[Token(Token = "0x1700033B")]
		public string audioID
		{
			[Token(Token = "0x6001B88")]
			[Address(RVA = "0xBC2AD0", Offset = "0xBC2AD0", VA = "0xBC2AD0")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B89")]
			[Address(RVA = "0xBC2AD8", Offset = "0xBC2AD8", VA = "0xBC2AD8")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x1700033C")]
		public AudioCategory category
		{
			[Token(Token = "0x6001B8A")]
			[Address(RVA = "0xBC2AE0", Offset = "0xBC2AE0", VA = "0xBC2AE0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B8B")]
			[Address(RVA = "0xBC2AE8", Offset = "0xBC2AE8", VA = "0xBC2AE8")]
			internal set
			{
			}
		}

		[Token(Token = "0x1700033D")]
		public AudioSubItem subItem
		{
			[Token(Token = "0x6001B8C")]
			[Address(RVA = "0xBC2AF0", Offset = "0xBC2AF0", VA = "0xBC2AF0")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B8D")]
			[Address(RVA = "0xBC2AF8", Offset = "0xBC2AF8", VA = "0xBC2AF8")]
			internal set
			{
			}
		}

		[Token(Token = "0x1700033E")]
		public AudioChannelType channel
		{
			[Token(Token = "0x6001B8E")]
			[Address(RVA = "0xBC2B00", Offset = "0xBC2B00", VA = "0xBC2B00")]
			[CompilerGenerated]
			get
			{
				return default(AudioChannelType);
			}
			[Token(Token = "0x6001B8F")]
			[Address(RVA = "0xBC2B08", Offset = "0xBC2B08", VA = "0xBC2B08")]
			[CompilerGenerated]
			internal set
			{
			}
		}

		[Token(Token = "0x1700033F")]
		public AudioItem audioItem
		{
			[Token(Token = "0x6001B90")]
			[Address(RVA = "0xBC2B10", Offset = "0xBC2B10", VA = "0xBC2B10")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000340")]
		public AudioEventDelegate completelyPlayedDelegate
		{
			[Token(Token = "0x6001B92")]
			[Address(RVA = "0xBC2B30", Offset = "0xBC2B30", VA = "0xBC2B30")]
			get
			{
				return null;
			}
			[Token(Token = "0x6001B91")]
			[Address(RVA = "0xBC2B28", Offset = "0xBC2B28", VA = "0xBC2B28")]
			set
			{
			}
		}

		[Token(Token = "0x17000341")]
		public float volume
		{
			[Token(Token = "0x6001B93")]
			[Address(RVA = "0xBC2B38", Offset = "0xBC2B38", VA = "0xBC2B38")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001B94")]
			[Address(RVA = "0xBC2B98", Offset = "0xBC2B98", VA = "0xBC2B98")]
			set
			{
			}
		}

		[Token(Token = "0x17000342")]
		public float volumeItem
		{
			[Token(Token = "0x6001B95")]
			[Address(RVA = "0xBC2CD0", Offset = "0xBC2CD0", VA = "0xBC2CD0")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001B96")]
			[Address(RVA = "0xBC2CE8", Offset = "0xBC2CE8", VA = "0xBC2CE8")]
			set
			{
			}
		}

		[Token(Token = "0x17000343")]
		public float volumeTotal
		{
			[Token(Token = "0x6001B97")]
			[Address(RVA = "0xBC2CF8", Offset = "0xBC2CF8", VA = "0xBC2CF8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000344")]
		public float volumeTotalWithoutFade
		{
			[Token(Token = "0x6001B98")]
			[Address(RVA = "0xBC2D14", Offset = "0xBC2D14", VA = "0xBC2D14")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000345")]
		public double playCalledAtTime
		{
			[Token(Token = "0x6001B99")]
			[Address(RVA = "0xBC2DE4", Offset = "0xBC2DE4", VA = "0xBC2DE4")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000346")]
		public double startedPlayingAtTime
		{
			[Token(Token = "0x6001B9A")]
			[Address(RVA = "0xBC2DEC", Offset = "0xBC2DEC", VA = "0xBC2DEC")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000347")]
		public float timeUntilEnd
		{
			[Token(Token = "0x6001B9B")]
			[Address(RVA = "0xBC2DF4", Offset = "0xBC2DF4", VA = "0xBC2DF4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000348")]
		public double scheduledPlayingAtDspTime
		{
			[Token(Token = "0x6001B9C")]
			[Address(RVA = "0xBC2F28", Offset = "0xBC2F28", VA = "0xBC2F28")]
			get
			{
				return default(double);
			}
			[Token(Token = "0x6001B9D")]
			[Address(RVA = "0xBC2F30", Offset = "0xBC2F30", VA = "0xBC2F30")]
			set
			{
			}
		}

		[Token(Token = "0x17000349")]
		public float clipLength
		{
			[Token(Token = "0x6001B9E")]
			[Address(RVA = "0xBC2E20", Offset = "0xBC2E20", VA = "0xBC2E20")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x1700034A")]
		public float audioTime
		{
			[Token(Token = "0x6001B9F")]
			[Address(RVA = "0xBC2EEC", Offset = "0xBC2EEC", VA = "0xBC2EEC")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BA0")]
			[Address(RVA = "0xBC2F84", Offset = "0xBC2F84", VA = "0xBC2F84")]
			set
			{
			}
		}

		[Token(Token = "0x1700034B")]
		public bool isFadingOut
		{
			[Token(Token = "0x6001BA1")]
			[Address(RVA = "0xBC2FB8", Offset = "0xBC2FB8", VA = "0xBC2FB8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700034C")]
		public bool isFadeOutComplete
		{
			[Token(Token = "0x6001BA2")]
			[Address(RVA = "0xBC2FD4", Offset = "0xBC2FD4", VA = "0xBC2FD4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700034D")]
		public bool isFadingOutOrScheduled
		{
			[Token(Token = "0x6001BA3")]
			[Address(RVA = "0xBC2FF0", Offset = "0xBC2FF0", VA = "0xBC2FF0")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700034E")]
		public bool isFadingIn
		{
			[Token(Token = "0x6001BA4")]
			[Address(RVA = "0xBC300C", Offset = "0xBC300C", VA = "0xBC300C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700034F")]
		public float pitch
		{
			[Token(Token = "0x6001BA5")]
			[Address(RVA = "0xBC3028", Offset = "0xBC3028", VA = "0xBC3028")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BA6")]
			[Address(RVA = "0xBC3044", Offset = "0xBC3044", VA = "0xBC3044")]
			set
			{
			}
		}

		[Token(Token = "0x17000350")]
		public float pan
		{
			[Token(Token = "0x6001BA7")]
			[Address(RVA = "0xBC3060", Offset = "0xBC3060", VA = "0xBC3060")]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001BA8")]
			[Address(RVA = "0xBC307C", Offset = "0xBC307C", VA = "0xBC307C")]
			set
			{
			}
		}

		[Token(Token = "0x17000351")]
		public double audioObjectTime
		{
			[Token(Token = "0x6001BA9")]
			[Address(RVA = "0xBC3098", Offset = "0xBC3098", VA = "0xBC3098")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000352")]
		public bool stopAfterFadeOut
		{
			[Token(Token = "0x6001BAA")]
			[Address(RVA = "0xBC30A0", Offset = "0xBC30A0", VA = "0xBC30A0")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001BAB")]
			[Address(RVA = "0xBC30A8", Offset = "0xBC30A8", VA = "0xBC30A8")]
			set
			{
			}
		}

		[Token(Token = "0x17000353")]
		public AudioSource primaryAudioSource
		{
			[Token(Token = "0x6001BC4")]
			[Address(RVA = "0xBC4250", Offset = "0xBC4250", VA = "0xBC4250")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000354")]
		public AudioSource secondaryAudioSource
		{
			[Token(Token = "0x6001BC5")]
			[Address(RVA = "0xBC4258", Offset = "0xBC4258", VA = "0xBC4258")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000355")]
		internal float _volumeFromCategory
		{
			[Token(Token = "0x6001BC8")]
			[Address(RVA = "0xBC2BE0", Offset = "0xBC2BE0", VA = "0xBC2BE0")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000356")]
		internal float _volumeWithCategory
		{
			[Token(Token = "0x6001BC9")]
			[Address(RVA = "0xBC2B68", Offset = "0xBC2B68", VA = "0xBC2B68")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000357")]
		private float _stopClipAtTime
		{
			[Token(Token = "0x6001BCA")]
			[Address(RVA = "0xBC2F54", Offset = "0xBC2F54", VA = "0xBC2F54")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000358")]
		private float _startClipAtTime
		{
			[Token(Token = "0x6001BCB")]
			[Address(RVA = "0xBC2F6C", Offset = "0xBC2F6C", VA = "0xBC2F6C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000359")]
		private bool _shouldStopIfPrimaryFadedOut
		{
			[Token(Token = "0x6001BDC")]
			[Address(RVA = "0xBC32BC", Offset = "0xBC32BC", VA = "0xBC32BC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001BAC")]
		[Address(RVA = "0xBC30B4", Offset = "0xBC30B4", VA = "0xBC30B4")]
		public void FadeIn(float fadeInTime)
		{
		}

		[Token(Token = "0x6001BAD")]
		[Address(RVA = "0xBC32DC", Offset = "0xBC32DC", VA = "0xBC32DC")]
		public void PlayScheduled(double dspTime)
		{
		}

		[Token(Token = "0x6001BAE")]
		[Address(RVA = "0xBC3488", Offset = "0xBC3488", VA = "0xBC3488")]
		public void PlayAfter(string audioID, double deltaDspTime = 0.0, float volume = 1f, float startTime = 0f)
		{
		}

		[Token(Token = "0x6001BAF")]
		[Address(RVA = "0xBC3518", Offset = "0xBC3518", VA = "0xBC3518")]
		public void PlayNow(string audioID, float delay = 0f, float volume = 1f, float startTime = 0f)
		{
		}

		[Token(Token = "0x6001BB0")]
		[Address(RVA = "0xBC36BC", Offset = "0xBC36BC", VA = "0xBC36BC")]
		public void Play(float delay = 0f)
		{
		}

		[Token(Token = "0x6001BB1")]
		[Address(RVA = "0xBC3864", Offset = "0xBC3864", VA = "0xBC3864")]
		public void Stop()
		{
		}

		[Token(Token = "0x6001BB2")]
		[Address(RVA = "0xBC3870", Offset = "0xBC3870", VA = "0xBC3870")]
		public void Stop(float fadeOutLength)
		{
		}

		[Token(Token = "0x6001BB3")]
		[Address(RVA = "0xBC3878", Offset = "0xBC3878", VA = "0xBC3878")]
		public void Stop(float fadeOutLength, float startToFadeTime)
		{
		}

		[Token(Token = "0x6001BB4")]
		[Address(RVA = "0xBC3D00", Offset = "0xBC3D00", VA = "0xBC3D00")]
		public void FinishSequence()
		{
		}

		[Token(Token = "0x6001BB5")]
		[Address(RVA = "0xBC3990", Offset = "0xBC3990", VA = "0xBC3990")]
		[IteratorStateMachine(typeof(<_WaitForSecondsThenStop>d__76))]
		private IEnumerator _WaitForSecondsThenStop(float startToFadeTime, float fadeOutLength)
		{
			return null;
		}

		[Token(Token = "0x6001BB6")]
		[Address(RVA = "0xBC3D90", Offset = "0xBC3D90", VA = "0xBC3D90")]
		public void FadeOut(float fadeOutLength)
		{
		}

		[Token(Token = "0x6001BB7")]
		[Address(RVA = "0xBC3AC8", Offset = "0xBC3AC8", VA = "0xBC3AC8")]
		public void FadeOut(float fadeOutLength, float startToFadeTime)
		{
		}

		[Token(Token = "0x6001BB8")]
		[Address(RVA = "0xBC3D98", Offset = "0xBC3D98", VA = "0xBC3D98")]
		public void Pause()
		{
		}

		[Token(Token = "0x6001BB9")]
		[Address(RVA = "0xBC3DB0", Offset = "0xBC3DB0", VA = "0xBC3DB0")]
		public void Pause(float fadeOutTime)
		{
		}

		[Token(Token = "0x6001BBA")]
		[Address(RVA = "0xBC3EC0", Offset = "0xBC3EC0", VA = "0xBC3EC0")]
		private void _PauseNow()
		{
		}

		[Token(Token = "0x6001BBB")]
		[Address(RVA = "0xBC4008", Offset = "0xBC4008", VA = "0xBC4008")]
		public void Unpause()
		{
		}

		[Token(Token = "0x6001BBC")]
		[Address(RVA = "0xBC4028", Offset = "0xBC4028", VA = "0xBC4028")]
		public void Unpause(float fadeInTime)
		{
		}

		[Token(Token = "0x6001BBD")]
		[Address(RVA = "0xBC4068", Offset = "0xBC4068", VA = "0xBC4068")]
		private void _UnpauseNow()
		{
		}

		[Token(Token = "0x6001BBE")]
		[Address(RVA = "0xBC3E38", Offset = "0xBC3E38", VA = "0xBC3E38")]
		[IteratorStateMachine(typeof(<_WaitThenPause>d__86))]
		private IEnumerator _WaitThenPause(float waitTime, int counter)
		{
			return null;
		}

		[Token(Token = "0x6001BBF")]
		[Address(RVA = "0xBC3F34", Offset = "0xBC3F34", VA = "0xBC3F34")]
		private void _PauseAudioSources()
		{
		}

		[Token(Token = "0x6001BC0")]
		[Address(RVA = "0xBC396C", Offset = "0xBC396C", VA = "0xBC396C")]
		public bool IsPaused(bool returnTrueIfStillFadingOut = true)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BC1")]
		[Address(RVA = "0xBC41FC", Offset = "0xBC41FC", VA = "0xBC41FC")]
		public bool IsPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x6001BC2")]
		[Address(RVA = "0xBC4234", Offset = "0xBC4234", VA = "0xBC4234")]
		public bool IsPrimaryPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x6001BC3")]
		[Address(RVA = "0xBC3B48", Offset = "0xBC3B48", VA = "0xBC3B48")]
		public bool IsSecondaryPlaying()
		{
			return default(bool);
		}

		[Token(Token = "0x6001BC6")]
		[Address(RVA = "0xBC3BD0", Offset = "0xBC3BD0", VA = "0xBC3BD0")]
		public void SwitchAudioSources()
		{
		}

		[Token(Token = "0x6001BC7")]
		private void _SwitchValues<T>(ref T v1, ref T v2)
		{
		}

		[Token(Token = "0x6001BCC")]
		[Address(RVA = "0xBC45B4", Offset = "0xBC45B4", VA = "0xBC45B4", Slot = "5")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001BCD")]
		[Address(RVA = "0xBC4984", Offset = "0xBC4984", VA = "0xBC4984")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001BCE")]
		[Address(RVA = "0xBC49D4", Offset = "0xBC49D4", VA = "0xBC49D4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001BCF")]
		[Address(RVA = "0xBC4260", Offset = "0xBC4260", VA = "0xBC4260")]
		private void _CreateSecondAudioSource()
		{
		}

		[Token(Token = "0x6001BD0")]
		[Address(RVA = "0xBC4884", Offset = "0xBC4884", VA = "0xBC4884")]
		private void _Set0()
		{
		}

		[Token(Token = "0x6001BD1")]
		[Address(RVA = "0xBC4AA0", Offset = "0xBC4AA0", VA = "0xBC4AA0")]
		private void _SetReferences0()
		{
		}

		[Token(Token = "0x6001BD2")]
		[Address(RVA = "0xBC32E0", Offset = "0xBC32E0", VA = "0xBC32E0")]
		private void _PlayScheduled(double dspTime)
		{
		}

		[Token(Token = "0x6001BD3")]
		[Address(RVA = "0xBC36C0", Offset = "0xBC36C0", VA = "0xBC36C0")]
		private void _PlayDelayed(float delay)
		{
		}

		[Token(Token = "0x6001BD4")]
		[Address(RVA = "0xBC4B58", Offset = "0xBC4B58", VA = "0xBC4B58")]
		private void _OnPlay()
		{
		}

		[Token(Token = "0x6001BD5")]
		[Address(RVA = "0xBC3A10", Offset = "0xBC3A10", VA = "0xBC3A10")]
		private void _Stop()
		{
		}

		[Token(Token = "0x6001BD6")]
		[Address(RVA = "0xBC4B8C", Offset = "0xBC4B8C", VA = "0xBC4B8C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001BD7")]
		[Address(RVA = "0xBC5298", Offset = "0xBC5298", VA = "0xBC5298")]
		private void _StartFadeOutIfNecessary()
		{
		}

		[Token(Token = "0x6001BD8")]
		[Address(RVA = "0xBC4FD0", Offset = "0xBC4FD0", VA = "0xBC4FD0")]
		private bool _IsAudioLoopSequenceMode()
		{
			return default(bool);
		}

		[Token(Token = "0x6001BD9")]
		[Address(RVA = "0xBC5030", Offset = "0xBC5030", VA = "0xBC5030")]
		private bool _ScheduleNextInLoopSequence()
		{
			return default(bool);
		}

		[Token(Token = "0x6001BDA")]
		[Address(RVA = "0xBC3124", Offset = "0xBC3124", VA = "0xBC3124")]
		private void _UpdateFadeVolume()
		{
		}

		[Token(Token = "0x6001BDB")]
		[Address(RVA = "0xBC53F8", Offset = "0xBC53F8", VA = "0xBC53F8")]
		private float _EqualizePowerForCrossfading(float v)
		{
			return default(float);
		}

		[Token(Token = "0x6001BDD")]
		[Address(RVA = "0xBC5588", Offset = "0xBC5588", VA = "0xBC5588")]
		private void OnApplicationPause(bool b)
		{
		}

		[Token(Token = "0x6001BDE")]
		[Address(RVA = "0xBC5594", Offset = "0xBC5594", VA = "0xBC5594")]
		private void SetApplicationPaused(bool isPaused)
		{
		}

		[Token(Token = "0x6001BDF")]
		[Address(RVA = "0xBC4F4C", Offset = "0xBC4F4C", VA = "0xBC4F4C")]
		public void DestroyAudioObject()
		{
		}

		[Token(Token = "0x6001BE0")]
		[Address(RVA = "0xBC5614", Offset = "0xBC5614", VA = "0xBC5614")]
		public static float TransformVolume(float volume)
		{
			return default(float);
		}

		[Token(Token = "0x6001BE1")]
		[Address(RVA = "0xBC5580", Offset = "0xBC5580", VA = "0xBC5580")]
		public static float InverseTransformVolume(float volume)
		{
			return default(float);
		}

		[Token(Token = "0x6001BE2")]
		[Address(RVA = "0xBC5620", Offset = "0xBC5620", VA = "0xBC5620")]
		public static float TransformPitch(float pitchSemiTones)
		{
			return default(float);
		}

		[Token(Token = "0x6001BE3")]
		[Address(RVA = "0xBC562C", Offset = "0xBC562C", VA = "0xBC562C")]
		public static float InverseTransformPitch(float pitch)
		{
			return default(float);
		}

		[Token(Token = "0x6001BE4")]
		[Address(RVA = "0xBC2BF8", Offset = "0xBC2BF8", VA = "0xBC2BF8")]
		internal void _ApplyVolumeBoth()
		{
		}

		[Token(Token = "0x6001BE5")]
		[Address(RVA = "0xBC543C", Offset = "0xBC543C", VA = "0xBC543C")]
		internal void _ApplyVolumePrimary(float volumeMultiplier = 1f)
		{
		}

		[Token(Token = "0x6001BE6")]
		[Address(RVA = "0xBC54B0", Offset = "0xBC54B0", VA = "0xBC54B0")]
		internal void _ApplyVolumeSecondary(float volumeMultiplier = 1f)
		{
		}

		[Token(Token = "0x6001BE7")]
		[Address(RVA = "0xBC5650", Offset = "0xBC5650", VA = "0xBC5650", Slot = "6")]
		protected override void OnDestroy()
		{
		}

		[Token(Token = "0x6001BE8")]
		[Address(RVA = "0xBC592C", Offset = "0xBC592C", VA = "0xBC592C")]
		private void _RestoreOverrideAudioSourceSettings()
		{
		}

		[Token(Token = "0x6001BE9")]
		[Address(RVA = "0xBC5A18", Offset = "0xBC5A18", VA = "0xBC5A18")]
		public bool DoesBelongToCategory(string categoryName)
		{
			return default(bool);
		}

		[Token(Token = "0x6001BEA")]
		[Address(RVA = "0xBC53B4", Offset = "0xBC53B4", VA = "0xBC53B4")]
		private float _GetRandomLoopSequenceDelay(AudioItem audioItem)
		{
			return default(float);
		}

		[Token(Token = "0x6001BEB")]
		[Address(RVA = "0xBC5A70", Offset = "0xBC5A70", VA = "0xBC5A70")]
		public AudioObject()
		{
		}
	}
	[Token(Token = "0x200043E")]
	public class PlayAudio : AudioTriggerBase
	{
		[Token(Token = "0x200043F")]
		public enum PlayPosition
		{
			[Token(Token = "0x4001A80")]
			Global,
			[Token(Token = "0x4001A81")]
			ChildObject,
			[Token(Token = "0x4001A82")]
			ObjectPosition
		}

		[Token(Token = "0x2000440")]
		public enum SoundType
		{
			[Token(Token = "0x4001A84")]
			SFX,
			[Token(Token = "0x4001A85")]
			Music,
			[Token(Token = "0x4001A86")]
			AmbienceSound
		}

		[Token(Token = "0x4001A79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string audioID;

		[Token(Token = "0x4001A7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SoundType soundType;

		[Token(Token = "0x4001A7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public PlayPosition position;

		[Token(Token = "0x4001A7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float volume;

		[Token(Token = "0x4001A7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float delay;

		[Token(Token = "0x4001A7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float startTime;

		[Token(Token = "0x6001BFC")]
		[Address(RVA = "0xBC5E40", Offset = "0xBC5E40", VA = "0xBC5E40", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6001BFD")]
		[Address(RVA = "0xBC5ED8", Offset = "0xBC5ED8", VA = "0xBC5ED8")]
		private void _Play()
		{
		}

		[Token(Token = "0x6001BFE")]
		[Address(RVA = "0xBC6070", Offset = "0xBC6070", VA = "0xBC6070", Slot = "11")]
		protected override void _OnEventTriggered()
		{
		}

		[Token(Token = "0x6001BFF")]
		[Address(RVA = "0xBC60CC", Offset = "0xBC60CC", VA = "0xBC60CC")]
		private void _PlayMusic()
		{
		}

		[Token(Token = "0x6001C00")]
		[Address(RVA = "0xBC6264", Offset = "0xBC6264", VA = "0xBC6264")]
		private void _PlayAmbienceSound()
		{
		}

		[Token(Token = "0x6001C01")]
		[Address(RVA = "0xBC63FC", Offset = "0xBC63FC", VA = "0xBC63FC")]
		public PlayAudio()
		{
		}
	}
	[Token(Token = "0x2000441")]
	public class PlayMusicPlaylist : AudioTriggerBase
	{
		[Token(Token = "0x4001A87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string playListName;

		[Token(Token = "0x6001C02")]
		[Address(RVA = "0xBC640C", Offset = "0xBC640C", VA = "0xBC640C", Slot = "11")]
		protected override void _OnEventTriggered()
		{
		}

		[Token(Token = "0x6001C03")]
		[Address(RVA = "0xBC6468", Offset = "0xBC6468", VA = "0xBC6468")]
		public PlayMusicPlaylist()
		{
		}
	}
	[Token(Token = "0x2000442")]
	public class StopAllAudio : AudioTriggerBase
	{
		[Token(Token = "0x4001A88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float fadeOut;

		[Token(Token = "0x6001C04")]
		[Address(RVA = "0xBC64B8", Offset = "0xBC64B8", VA = "0xBC64B8", Slot = "11")]
		protected override void _OnEventTriggered()
		{
		}

		[Token(Token = "0x6001C05")]
		[Address(RVA = "0xBC651C", Offset = "0xBC651C", VA = "0xBC651C")]
		public StopAllAudio()
		{
		}
	}
	[Token(Token = "0x2000443")]
	public class StopAudio : AudioTriggerBase
	{
		[Token(Token = "0x4001A89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string audioID;

		[Token(Token = "0x4001A8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float fadeOut;

		[Token(Token = "0x6001C06")]
		[Address(RVA = "0xBC6524", Offset = "0xBC6524", VA = "0xBC6524", Slot = "11")]
		protected override void _OnEventTriggered()
		{
		}

		[Token(Token = "0x6001C07")]
		[Address(RVA = "0xBC6590", Offset = "0xBC6590", VA = "0xBC6590")]
		public StopAudio()
		{
		}
	}
	[Token(Token = "0x2000444")]
	public class UnpauseAllAudio : AudioTriggerBase
	{
		[Token(Token = "0x2000445")]
		public enum PauseType
		{
			[Token(Token = "0x4001A8F")]
			All,
			[Token(Token = "0x4001A90")]
			MusicOnly,
			[Token(Token = "0x4001A91")]
			AmbienceOnly,
			[Token(Token = "0x4001A92")]
			Category
		}

		[Token(Token = "0x4001A8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public PauseType pauseType;

		[Token(Token = "0x4001A8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float fadeIn;

		[Token(Token = "0x4001A8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string categoryName;

		[Token(Token = "0x6001C08")]
		[Address(RVA = "0xBC6598", Offset = "0xBC6598", VA = "0xBC6598", Slot = "11")]
		protected override void _OnEventTriggered()
		{
		}

		[Token(Token = "0x6001C09")]
		[Address(RVA = "0xBC66BC", Offset = "0xBC66BC", VA = "0xBC66BC")]
		public UnpauseAllAudio()
		{
		}
	}
	[Token(Token = "0x2000446")]
	public static class ObjectPoolController
	{
		[Token(Token = "0x2000447")]
		internal class ObjectPool
		{
			[Token(Token = "0x4001A9B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private List<PoolableObject> _pool;

			[Token(Token = "0x4001A9C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private GameObject _prefab;

			[Token(Token = "0x4001A9D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			private PoolableObject _poolableObjectComponent;

			[Token(Token = "0x4001A9E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Transform _poolParent;

			[Token(Token = "0x1700035F")]
			internal Transform poolParent
			{
				[Token(Token = "0x6001C17")]
				[Address(RVA = "0xBC7F38", Offset = "0xBC7F38", VA = "0xBC7F38")]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C18")]
			[Address(RVA = "0xBC7A90", Offset = "0xBC7A90", VA = "0xBC7A90")]
			public ObjectPool(GameObject prefab)
			{
			}

			[Token(Token = "0x6001C19")]
			[Address(RVA = "0xBC82C4", Offset = "0xBC82C4", VA = "0xBC82C4")]
			private void _ValidatePooledObjectDataContainer()
			{
			}

			[Token(Token = "0x6001C1A")]
			[Address(RVA = "0xBC7F50", Offset = "0xBC7F50", VA = "0xBC7F50")]
			private void _ValidatePoolParentDummy()
			{
			}

			[Token(Token = "0x6001C1B")]
			[Address(RVA = "0xBC8350", Offset = "0xBC8350", VA = "0xBC8350")]
			internal void Remove(PoolableObject poolObj)
			{
			}

			[Token(Token = "0x6001C1C")]
			[Address(RVA = "0xBC79F8", Offset = "0xBC79F8", VA = "0xBC79F8")]
			internal int GetObjectCount()
			{
				return default(int);
			}

			[Token(Token = "0x6001C1D")]
			[Address(RVA = "0xBC6BA8", Offset = "0xBC6BA8", VA = "0xBC6BA8")]
			internal GameObject GetPooledInstance(Vector3? position, Quaternion? rotation, bool activateObject, [Optional] Transform parent)
			{
				return null;
			}

			[Token(Token = "0x6001C1E")]
			[Address(RVA = "0xBC7A44", Offset = "0xBC7A44", VA = "0xBC7A44")]
			internal PoolableObject PreloadInstance(bool preloadActive)
			{
				return null;
			}

			[Token(Token = "0x6001C1F")]
			[Address(RVA = "0xBC83A8", Offset = "0xBC83A8", VA = "0xBC83A8")]
			private PoolableObject _NewPooledInstance(Vector3? position, Quaternion? rotation, bool createActive, bool addToPool)
			{
				return null;
			}

			[Token(Token = "0x6001C20")]
			[Address(RVA = "0xBC8B60", Offset = "0xBC8B60", VA = "0xBC8B60")]
			internal int _SetAllAvailable()
			{
				return default(int);
			}

			[Token(Token = "0x6001C21")]
			[Address(RVA = "0xBC89F4", Offset = "0xBC89F4", VA = "0xBC89F4")]
			internal void CallMethodOnObject(GameObject obj, string method, bool includeChildren, bool includeInactive, bool useReflection)
			{
			}
		}

		[Token(Token = "0x4001A93")]
		private const string objectPoolsParentName = "ObjectPools";

		[Token(Token = "0x4001A94")]
		private const string persistentObjectPoolsParentName = "PersistentObjectPools";

		[Token(Token = "0x4001A95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Transform poolsParent;

		[Token(Token = "0x4001A96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static Transform persistentPoolsParent;

		[Token(Token = "0x4001A98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		internal static int _globalSerialNumber;

		[Token(Token = "0x4001A99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		internal static bool _isDuringInstantiate;

		[Token(Token = "0x4001A9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private static Dictionary<int, ObjectPool> _pools;

		[Token(Token = "0x1700035E")]
		public static bool isDuringPreload
		{
			[Token(Token = "0x6001C0A")]
			[Address(RVA = "0xBC66C4", Offset = "0xBC66C4", VA = "0xBC66C4")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001C0B")]
			[Address(RVA = "0xBC671C", Offset = "0xBC671C", VA = "0xBC671C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001C0C")]
		[Address(RVA = "0xBC6778", Offset = "0xBC6778", VA = "0xBC6778")]
		public static GameObject Instantiate(GameObject prefab, [Optional] Transform parent)
		{
			return null;
		}

		[Token(Token = "0x6001C0D")]
		[Address(RVA = "0xBC6FE8", Offset = "0xBC6FE8", VA = "0xBC6FE8")]
		public static GameObject Instantiate(GameObject prefab, Vector3 position, Quaternion quaternion, [Optional] Transform parent)
		{
			return null;
		}

		[Token(Token = "0x6001C0E")]
		[Address(RVA = "0xBC6ED8", Offset = "0xBC6ED8", VA = "0xBC6ED8")]
		public static GameObject InstantiateWithoutPool(GameObject prefab, [Optional] Transform parent)
		{
			return null;
		}

		[Token(Token = "0x6001C0F")]
		[Address(RVA = "0xBC7238", Offset = "0xBC7238", VA = "0xBC7238")]
		public static GameObject InstantiateWithoutPool(GameObject prefab, Vector3 position, Quaternion quaternion, [Optional] Transform parent)
		{
			return null;
		}

		[Token(Token = "0x6001C10")]
		[Address(RVA = "0xBC699C", Offset = "0xBC699C", VA = "0xBC699C")]
		private static GameObject _InstantiateGameObject(GameObject prefab, Vector3 position, Quaternion rotation, Transform parent)
		{
			return null;
		}

		[Token(Token = "0x6001C11")]
		[Address(RVA = "0xBC55A0", Offset = "0xBC55A0", VA = "0xBC55A0")]
		public static bool Destroy(GameObject obj)
		{
			return default(bool);
		}

		[Token(Token = "0x6001C12")]
		[Address(RVA = "0xBC7660", Offset = "0xBC7660", VA = "0xBC7660")]
		public static void DestroyImmediate(GameObject obj)
		{
		}

		[Token(Token = "0x6001C13")]
		[Address(RVA = "0xBC76D4", Offset = "0xBC76D4", VA = "0xBC76D4")]
		public static void Preload(GameObject prefab)
		{
		}

		[Token(Token = "0x6001C14")]
		[Address(RVA = "0xBC6A70", Offset = "0xBC6A70", VA = "0xBC6A70")]
		internal static ObjectPool _GetPool(PoolableObject prefabPoolComponent)
		{
			return null;
		}

		[Token(Token = "0x6001C15")]
		[Address(RVA = "0xBC73A8", Offset = "0xBC73A8", VA = "0xBC73A8")]
		private static bool _DetachChildrenAndDestroy(Transform transform, bool destroyImmediate)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x2000448")]
	[AddComponentMenu("ClockStone/PoolableObject")]
	public class PoolableObject : MonoBehaviour
	{
		[Token(Token = "0x4001A9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Specifies the maximum number of objects on the pool")]
		public int maxPoolSize;

		[Token(Token = "0x4001AA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Specifies the number of objects that will be created on the pool at program start (improves speed of later instantiation)")]
		public int preloadCount;

		[Token(Token = "0x4001AA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If enabled the pool of deactivated objects will surivive a scene change")]
		public bool doNotDestroyOnLoad;

		[Token(Token = "0x4001AA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool sendAwakeStartOnDestroyMessage;

		[Token(Token = "0x4001AA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x22")]
		public bool sendPoolableActivateDeactivateMessages;

		[Token(Token = "0x4001AA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x23")]
		public bool useReflectionInsteadOfMessages;

		[Token(Token = "0x4001AA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		internal bool _isInPool;

		[Token(Token = "0x4001AA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		internal ObjectPoolController.ObjectPool _pool;

		[Token(Token = "0x4001AA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		internal int _serialNumber;

		[Token(Token = "0x4001AA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		internal int _usageCount;

		[Token(Token = "0x4001AA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		internal bool _awakeJustCalledByUnity;

		[Token(Token = "0x4001AAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		internal bool _wasInstantiatedByObjectPoolController;

		[Token(Token = "0x4001AAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		private bool _justInvokingOnDestroy;

		[Token(Token = "0x17000360")]
		public bool isPooledInstance
		{
			[Token(Token = "0x6001C22")]
			[Address(RVA = "0xBC8C50", Offset = "0xBC8C50", VA = "0xBC8C50")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001C23")]
		[Address(RVA = "0xBC8C60", Offset = "0xBC8C60", VA = "0xBC8C60")]
		protected void Awake()
		{
		}

		[Token(Token = "0x6001C24")]
		[Address(RVA = "0xBC8C6C", Offset = "0xBC8C6C", VA = "0xBC8C6C")]
		protected void OnDestroy()
		{
		}

		[Token(Token = "0x6001C25")]
		[Address(RVA = "0xBC8C88", Offset = "0xBC8C88", VA = "0xBC8C88")]
		public int GetSerialNumber()
		{
			return default(int);
		}

		[Token(Token = "0x6001C26")]
		[Address(RVA = "0xBC8C90", Offset = "0xBC8C90", VA = "0xBC8C90")]
		public int GetUsageCount()
		{
			return default(int);
		}

		[Token(Token = "0x6001C27")]
		[Address(RVA = "0xBC8C98", Offset = "0xBC8C98", VA = "0xBC8C98")]
		public int DeactivateAllPoolableObjectsOfMyKind()
		{
			return default(int);
		}

		[Token(Token = "0x6001C28")]
		[Address(RVA = "0xBC8CA8", Offset = "0xBC8CA8", VA = "0xBC8CA8")]
		public bool IsDeactivated()
		{
			return default(bool);
		}

		[Token(Token = "0x6001C29")]
		[Address(RVA = "0xBC7AFC", Offset = "0xBC7AFC", VA = "0xBC7AFC")]
		internal void _PutIntoPool()
		{
		}

		[Token(Token = "0x6001C2A")]
		[Address(RVA = "0xBC877C", Offset = "0xBC877C", VA = "0xBC877C")]
		internal void TakeFromPool(Transform parent, bool activateObject)
		{
		}

		[Token(Token = "0x6001C2B")]
		[Address(RVA = "0xBC8CB0", Offset = "0xBC8CB0", VA = "0xBC8CB0")]
		public PoolableObject()
		{
		}
	}
	[Token(Token = "0x2000449")]
	public class PoolableReference<T> where T : Component
	{
		[Token(Token = "0x4001AAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private PoolableObject _pooledObj;

		[Token(Token = "0x4001AAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private int _initialUsageCount;

		[Token(Token = "0x4001AAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private T _objComponent;

		[Token(Token = "0x6001C2C")]
		public PoolableReference()
		{
		}

		[Token(Token = "0x6001C2D")]
		public PoolableReference(T componentOfPoolableObject)
		{
		}

		[Token(Token = "0x6001C2E")]
		public PoolableReference(PoolableReference<T> poolableReference)
		{
		}

		[Token(Token = "0x6001C2F")]
		public void Reset()
		{
		}

		[Token(Token = "0x6001C30")]
		public T Get()
		{
			return null;
		}

		[Token(Token = "0x6001C31")]
		public void Set(T componentOfPoolableObject)
		{
		}

		[Token(Token = "0x6001C32")]
		public void Set(T componentOfPoolableObject, bool allowNonePoolable)
		{
		}
	}
	[Token(Token = "0x200044A")]
	public interface IRegisteredComponent
	{
		[Token(Token = "0x6001C33")]
		Type GetRegisteredComponentBaseClassType();
	}
	[Token(Token = "0x200044B")]
	public abstract class RegisteredComponent : MonoBehaviour, IRegisteredComponent
	{
		[Token(Token = "0x4001AAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private bool isRegistered;

		[Token(Token = "0x4001AB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		private bool isUnregistered;

		[Token(Token = "0x6001C34")]
		[Address(RVA = "0xBC47A8", Offset = "0xBC47A8", VA = "0xBC47A8", Slot = "5")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001C35")]
		[Address(RVA = "0xBC56B4", Offset = "0xBC56B4", VA = "0xBC56B4", Slot = "6")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001C36")]
		[Address(RVA = "0xBC8F60", Offset = "0xBC8F60", VA = "0xBC8F60", Slot = "4")]
		public Type GetRegisteredComponentBaseClassType()
		{
			return null;
		}

		[Token(Token = "0x6001C37")]
		[Address(RVA = "0xBC5AA4", Offset = "0xBC5AA4", VA = "0xBC5AA4")]
		protected RegisteredComponent()
		{
		}
	}
	[Token(Token = "0x200044C")]
	public static class RegisteredComponentController
	{
		[Token(Token = "0x200044D")]
		public class InstanceContainer : HashSet<IRegisteredComponent>
		{
			[Token(Token = "0x6001C41")]
			[Address(RVA = "0xBC9328", Offset = "0xBC9328", VA = "0xBC9328")]
			public InstanceContainer()
			{
			}
		}

		[Token(Token = "0x4001AB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static Dictionary<Type, InstanceContainer> _instanceContainers;

		[Token(Token = "0x6001C38")]
		public static T[] GetAllOfType<T>() where T : IRegisteredComponent
		{
			return null;
		}

		[Token(Token = "0x6001C39")]
		[Address(RVA = "0xBC8FCC", Offset = "0xBC8FCC", VA = "0xBC8FCC")]
		public static object[] GetAllOfType(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001C3A")]
		public static int InstanceCountOfType<T>() where T : IRegisteredComponent
		{
			return default(int);
		}

		[Token(Token = "0x6001C3B")]
		[Address(RVA = "0xBC921C", Offset = "0xBC921C", VA = "0xBC921C")]
		private static InstanceContainer _GetInstanceContainer(Type type)
		{
			return null;
		}

		[Token(Token = "0x6001C3C")]
		[Address(RVA = "0xBC9370", Offset = "0xBC9370", VA = "0xBC9370")]
		private static void _RegisterType(IRegisteredComponent component, Type type)
		{
		}

		[Token(Token = "0x6001C3D")]
		[Address(RVA = "0xBC8CC8", Offset = "0xBC8CC8", VA = "0xBC8CC8")]
		internal static void _Register(IRegisteredComponent component)
		{
		}

		[Token(Token = "0x6001C3E")]
		[Address(RVA = "0xBC9450", Offset = "0xBC9450", VA = "0xBC9450")]
		internal static void _UnregisterType(IRegisteredComponent component, Type type)
		{
		}

		[Token(Token = "0x6001C3F")]
		[Address(RVA = "0xBC8E14", Offset = "0xBC8E14", VA = "0xBC8E14")]
		internal static void _Unregister(IRegisteredComponent component)
		{
		}
	}
	[Token(Token = "0x200044E")]
	public static class SystemTime
	{
		[Token(Token = "0x4001AB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static double _timeAtLaunch;

		[Token(Token = "0x17000361")]
		public static double time
		{
			[Token(Token = "0x6001C42")]
			[Address(RVA = "0xBC95BC", Offset = "0xBC95BC", VA = "0xBC95BC")]
			get
			{
				return default(double);
			}
		}

		[Token(Token = "0x17000362")]
		public static double timeSinceLaunch
		{
			[Token(Token = "0x6001C43")]
			[Address(RVA = "0xBC9634", Offset = "0xBC9634", VA = "0xBC9634")]
			get
			{
				return default(double);
			}
		}
	}
	[Token(Token = "0x200044F")]
	public class UnitySingleton<T> where T : MonoBehaviour
	{
		[Token(Token = "0x4001AB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static T _instance;

		[Token(Token = "0x4001AB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		internal static GameObject _autoCreatePrefab;

		[Token(Token = "0x4001AB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static int _GlobalInstanceCount;

		[Token(Token = "0x4001AB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static bool _awakeSingletonCalled;

		[Token(Token = "0x6001C45")]
		public static T GetSingleton(bool throwErrorIfNotFound, bool autoCreate, bool searchInObjectHierarchy = true)
		{
			return null;
		}

		[Token(Token = "0x6001C46")]
		private UnitySingleton()
		{
		}

		[Token(Token = "0x6001C47")]
		internal static void _Awake(T instance)
		{
		}

		[Token(Token = "0x6001C48")]
		internal static void _Destroy()
		{
		}

		[Token(Token = "0x6001C49")]
		private static void _AwakeSingleton(T instance)
		{
		}
	}
	[Token(Token = "0x2000450")]
	public interface ISingletonMonoBehaviour
	{
		[Token(Token = "0x17000363")]
		bool isSingletonObject
		{
			[Token(Token = "0x6001C4A")]
			get;
		}
	}
	[Token(Token = "0x2000451")]
	public abstract class SingletonMonoBehaviour<T> : MonoBehaviour, ISingletonMonoBehaviour where T : MonoBehaviour
	{
		[Token(Token = "0x17000364")]
		public static T Instance
		{
			[Token(Token = "0x6001C4B")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000365")]
		public virtual bool isSingletonObject
		{
			[Token(Token = "0x6001C51")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001C4C")]
		public static T DoesInstanceExist()
		{
			return null;
		}

		[Token(Token = "0x6001C4D")]
		public static void ActivateSingletonInstance()
		{
		}

		[Token(Token = "0x6001C4E")]
		public static void SetSingletonAutoCreate(GameObject autoCreatePrefab)
		{
		}

		[Token(Token = "0x6001C4F")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001C50")]
		protected virtual void OnDestroy()
		{
		}

		[Token(Token = "0x6001C52")]
		protected SingletonMonoBehaviour()
		{
		}
	}
}
namespace BNG
{
	[Token(Token = "0x2000452")]
	public enum HandPoseId
	{
		[Token(Token = "0x4001AB8")]
		Default = 0,
		[Token(Token = "0x4001AB9")]
		Generic = 1,
		[Token(Token = "0x4001ABA")]
		PingPongBall = 2,
		[Token(Token = "0x4001ABB")]
		Controller = 3,
		[Token(Token = "0x4001ABC")]
		Rock = 4,
		[Token(Token = "0x4001ABD")]
		PistolGrip = 50,
		[Token(Token = "0x4001ABE")]
		GRAB_KATANA = 61,
		[Token(Token = "0x4001ABF")]
		GRAB_SHURIKEN = 62,
		[Token(Token = "0x4001AC0")]
		GRAB_BOW = 63,
		[Token(Token = "0x4001AC1")]
		GRAB_SPEAR = 64,
		[Token(Token = "0x4001AC2")]
		GRAB_CROSSBOW = 65,
		[Token(Token = "0x4001AC3")]
		GRAB_SCABBARD = 66
	}
	[Token(Token = "0x2000453")]
	public class HandPoseDefinitions : MonoBehaviour
	{
		[Token(Token = "0x6001C53")]
		[Address(RVA = "0xBC96E0", Offset = "0xBC96E0", VA = "0xBC96E0")]
		public HandPoseDefinitions()
		{
		}
	}
	[Token(Token = "0x2000454")]
	public class DemoCube : MonoBehaviour
	{
		[Token(Token = "0x4001AC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material HighlightMaterial;

		[Token(Token = "0x4001AC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Material ActiveMaterial;

		[Token(Token = "0x4001AC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private bool active;

		[Token(Token = "0x4001AC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		private bool hovering;

		[Token(Token = "0x4001AC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Material initialMaterial;

		[Token(Token = "0x4001AC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private MeshRenderer render;

		[Token(Token = "0x6001C54")]
		[Address(RVA = "0xBC96E8", Offset = "0xBC96E8", VA = "0xBC96E8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001C55")]
		[Address(RVA = "0xBC974C", Offset = "0xBC974C", VA = "0xBC974C")]
		public void SetActive(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001C56")]
		[Address(RVA = "0xBC97AC", Offset = "0xBC97AC", VA = "0xBC97AC")]
		public void SetInactive(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001C57")]
		[Address(RVA = "0xBC97B4", Offset = "0xBC97B4", VA = "0xBC97B4")]
		public void SetHovering(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001C58")]
		[Address(RVA = "0xBC97C0", Offset = "0xBC97C0", VA = "0xBC97C0")]
		public void ResetHovering(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001C59")]
		[Address(RVA = "0xBC9758", Offset = "0xBC9758", VA = "0xBC9758")]
		public void UpdateMaterial()
		{
		}

		[Token(Token = "0x6001C5A")]
		[Address(RVA = "0xBC97C8", Offset = "0xBC97C8", VA = "0xBC97C8")]
		public DemoCube()
		{
		}
	}
	[Token(Token = "0x2000455")]
	public class DemoScript : MonoBehaviour
	{
		[Token(Token = "0x4001ACA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If true, the Escape key will exit the game")]
		public bool ExitOnEscape;

		[Token(Token = "0x4001ACB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject DebugMenu;

		[Token(Token = "0x4001ACC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Text LabelToUpdate;

		[Token(Token = "0x4001ACD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ProjectileLauncher DemoLauncher;

		[Token(Token = "0x4001ACE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public int MaxLaunchedObjects;

		[Token(Token = "0x4001ACF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<GameObject> launchedObjects;

		[Token(Token = "0x4001AD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Text JoystickText;

		[Token(Token = "0x4001AD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject AmmoObject;

		[Token(Token = "0x4001AD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform ItemsHolder;

		[Token(Token = "0x4001AD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<Grabbable, PosRot> _initalGrabbables;

		[Token(Token = "0x4001AD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Rigidbody cubeRigid;

		[Token(Token = "0x4001AD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody cubeRigid1;

		[Token(Token = "0x4001AD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody cubeRigid2;

		[Token(Token = "0x4001AD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Rigidbody cubeRigid3;

		[Token(Token = "0x4001AD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<Grabbable> demoClips;

		[Token(Token = "0x4001AD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 rotateX;

		[Token(Token = "0x4001ADA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private Vector3 rotateY;

		[Token(Token = "0x4001ADB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Vector3 rotateZ;

		[Token(Token = "0x4001ADC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private Vector3 rotateXYX;

		[Token(Token = "0x6001C5B")]
		[Address(RVA = "0xBC97D0", Offset = "0xBC97D0", VA = "0xBC97D0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001C5C")]
		[Address(RVA = "0xBC9C2C", Offset = "0xBC9C2C", VA = "0xBC9C2C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001C5D")]
		[Address(RVA = "0xBC9E70", Offset = "0xBC9E70", VA = "0xBC9E70")]
		public void UpdateSliderText(float sliderValue)
		{
		}

		[Token(Token = "0x6001C5E")]
		[Address(RVA = "0xBC9FC0", Offset = "0xBC9FC0", VA = "0xBC9FC0")]
		public void UpdateJoystickText(float leverX, float leverY)
		{
		}

		[Token(Token = "0x6001C5F")]
		[Address(RVA = "0xBCA0FC", Offset = "0xBCA0FC", VA = "0xBCA0FC")]
		public void ResetGrabbables()
		{
		}

		[Token(Token = "0x6001C60")]
		[Address(RVA = "0xBCA478", Offset = "0xBCA478", VA = "0xBCA478")]
		public void GrabAmmo(Grabber grabber)
		{
		}

		[Token(Token = "0x6001C61")]
		[Address(RVA = "0xBCA9F0", Offset = "0xBCA9F0", VA = "0xBCA9F0")]
		public void ShootLauncher()
		{
		}

		[Token(Token = "0x6001C62")]
		[Address(RVA = "0xBC9A3C", Offset = "0xBC9A3C", VA = "0xBC9A3C")]
		private void initGravityCubes()
		{
		}

		[Token(Token = "0x6001C63")]
		[Address(RVA = "0xBC9D34", Offset = "0xBC9D34", VA = "0xBC9D34")]
		private void rotateGravityCubes()
		{
		}

		[Token(Token = "0x6001C64")]
		[Address(RVA = "0xBCABB4", Offset = "0xBCABB4", VA = "0xBCABB4")]
		public DemoScript()
		{
		}
	}
	[Token(Token = "0x2000456")]
	public class PosRot
	{
		[Token(Token = "0x4001ADD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 Position;

		[Token(Token = "0x4001ADE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Quaternion Rotation;

		[Token(Token = "0x6001C65")]
		[Address(RVA = "0xBC9A34", Offset = "0xBC9A34", VA = "0xBC9A34")]
		public PosRot()
		{
		}
	}
	[Token(Token = "0x2000457")]
	public class CharacterConstraint : MonoBehaviour
	{
		[Token(Token = "0x4001ADF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private BNGPlayerController bngController;

		[Token(Token = "0x4001AE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CharacterController character;

		[Token(Token = "0x6001C66")]
		[Address(RVA = "0xBCABE8", Offset = "0xBCABE8", VA = "0xBCABE8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001C67")]
		[Address(RVA = "0xBCAC6C", Offset = "0xBCAC6C", VA = "0xBCAC6C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001C68")]
		[Address(RVA = "0xBCAC78", Offset = "0xBCAC78", VA = "0xBCAC78", Slot = "4")]
		public virtual void CheckCharacterCollisionMove()
		{
		}

		[Token(Token = "0x6001C69")]
		[Address(RVA = "0xBCADE8", Offset = "0xBCADE8", VA = "0xBCADE8")]
		public CharacterConstraint()
		{
		}
	}
	[Token(Token = "0x2000458")]
	public class CharacterIK : MonoBehaviour
	{
		[Token(Token = "0x4001AE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform FollowLeftController;

		[Token(Token = "0x4001AE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform FollowRightController;

		[Token(Token = "0x4001AE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform FollowLeftFoot;

		[Token(Token = "0x4001AE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform FollowRightFoot;

		[Token(Token = "0x4001AE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform FollowHead;

		[Token(Token = "0x4001AE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float FootYPosition;

		[Token(Token = "0x4001AE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool IKActive;

		[Token(Token = "0x4001AE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		public bool IKFeetActive;

		[Token(Token = "0x4001AE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x46")]
		public bool HideHead;

		[Token(Token = "0x4001AEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x47")]
		public bool HideLeftArm;

		[Token(Token = "0x4001AEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool HideRightArm;

		[Token(Token = "0x4001AEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool HideLeftHand;

		[Token(Token = "0x4001AED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		public bool HideRightHand;

		[Token(Token = "0x4001AEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4B")]
		public bool HideLegs;

		[Token(Token = "0x4001AEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform HipsJoint;

		[Token(Token = "0x4001AF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public CharacterController FollowPlayer;

		[Token(Token = "0x4001AF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform headBone;

		[Token(Token = "0x4001AF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform leftShoulderJoint;

		[Token(Token = "0x4001AF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform rightShoulderJoint;

		[Token(Token = "0x4001AF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform leftHandJoint;

		[Token(Token = "0x4001AF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform rightHandJoint;

		[Token(Token = "0x4001AF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Animator animator;

		[Token(Token = "0x4001AF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float HipOffset;

		[Token(Token = "0x4001AF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public Vector3 hideBoneScale;

		[Token(Token = "0x6001C6A")]
		[Address(RVA = "0xBCADF0", Offset = "0xBCADF0", VA = "0xBCADF0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001C6B")]
		[Address(RVA = "0xBCAEC8", Offset = "0xBCAEC8", VA = "0xBCAEC8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001C6C")]
		[Address(RVA = "0xBCB330", Offset = "0xBCB330", VA = "0xBCB330")]
		private void OnAnimatorIK()
		{
		}

		[Token(Token = "0x6001C6D")]
		[Address(RVA = "0xBCB778", Offset = "0xBCB778", VA = "0xBCB778")]
		public CharacterIK()
		{
		}
	}
	[Token(Token = "0x2000459")]
	public class CharacterYOffset : MonoBehaviour
	{
		[Token(Token = "0x6001C6E")]
		[Address(RVA = "0xBCB7A4", Offset = "0xBCB7A4", VA = "0xBCB7A4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001C6F")]
		[Address(RVA = "0xBCB848", Offset = "0xBCB848", VA = "0xBCB848")]
		public CharacterYOffset()
		{
		}
	}
	[Token(Token = "0x200045A")]
	public class Climbable : Grabbable
	{
		[Token(Token = "0x4001AF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x220")]
		private PlayerClimbing playerClimbing;

		[Token(Token = "0x6001C70")]
		[Address(RVA = "0xBCB850", Offset = "0xBCB850", VA = "0xBCB850")]
		private void Start()
		{
		}

		[Token(Token = "0x6001C71")]
		[Address(RVA = "0xBCB950", Offset = "0xBCB950", VA = "0xBCB950", Slot = "15")]
		public override void GrabItem(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x6001C72")]
		[Address(RVA = "0xBCC238", Offset = "0xBCC238", VA = "0xBCC238", Slot = "22")]
		public override void DropItem(Grabber droppedBy)
		{
		}

		[Token(Token = "0x6001C73")]
		[Address(RVA = "0xBCC320", Offset = "0xBCC320", VA = "0xBCC320")]
		public Climbable()
		{
		}
	}
	[Token(Token = "0x200045B")]
	public class CollisionSound : MonoBehaviour
	{
		[Token(Token = "0x4001AFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip CollisionAudio;

		[Token(Token = "0x4001AFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private AudioSource audioSource;

		[Token(Token = "0x4001AFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float startTime;

		[Token(Token = "0x4001AFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Collider col;

		[Token(Token = "0x4001AFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Grabbable grab;

		[Token(Token = "0x4001AFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float MinimumVolume;

		[Token(Token = "0x4001B00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float MaximumVolume;

		[Token(Token = "0x4001B01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool RecentlyPlayedSound;

		[Token(Token = "0x4001B02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float lastPlayedSound;

		[Token(Token = "0x4001B03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float LastRelativeVelocity;

		[Token(Token = "0x6001C74")]
		[Address(RVA = "0xBCC3B0", Offset = "0xBCC3B0", VA = "0xBCC3B0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001C75")]
		[Address(RVA = "0xBCC4DC", Offset = "0xBCC4DC", VA = "0xBCC4DC")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001C76")]
		[Address(RVA = "0xBCC8A4", Offset = "0xBCC8A4", VA = "0xBCC8A4")]
		private void resetLastPlayedSound()
		{
		}

		[Token(Token = "0x6001C77")]
		[Address(RVA = "0xBCC8AC", Offset = "0xBCC8AC", VA = "0xBCC8AC")]
		public CollisionSound()
		{
		}
	}
	[Token(Token = "0x200045C")]
	public class ConstrainLocalPosition : MonoBehaviour
	{
		[Token(Token = "0x4001B04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool ConstrainLocalX;

		[Token(Token = "0x4001B05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float LocalXMin;

		[Token(Token = "0x4001B06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float LocalXMax;

		[Token(Token = "0x4001B07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool ConstrainLocalY;

		[Token(Token = "0x4001B08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float LocalYMin;

		[Token(Token = "0x4001B09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float LocalYMax;

		[Token(Token = "0x4001B0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool ConstrainLocalZ;

		[Token(Token = "0x4001B0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float LocalZMin;

		[Token(Token = "0x4001B0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float LocalZMax;

		[Token(Token = "0x6001C78")]
		[Address(RVA = "0xBCC8C0", Offset = "0xBCC8C0", VA = "0xBCC8C0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001C79")]
		[Address(RVA = "0xBCC8C4", Offset = "0xBCC8C4", VA = "0xBCC8C4")]
		private void doConstrain()
		{
		}

		[Token(Token = "0x6001C7A")]
		[Address(RVA = "0xBCC9C0", Offset = "0xBCC9C0", VA = "0xBCC9C0")]
		public ConstrainLocalPosition()
		{
		}
	}
	[Token(Token = "0x200045D")]
	public class Damageable : MonoBehaviour
	{
		[Token(Token = "0x200045E")]
		[CompilerGenerated]
		private sealed class <RespawnRoutine>d__22 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001B1F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001B20")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001B21")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float seconds;

			[Token(Token = "0x4001B22")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Damageable <>4__this;

			[Token(Token = "0x17000366")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001C84")]
				[Address(RVA = "0xBCD73C", Offset = "0xBCD73C", VA = "0xBCD73C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000367")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001C86")]
				[Address(RVA = "0xBCD784", Offset = "0xBCD784", VA = "0xBCD784", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001C81")]
			[Address(RVA = "0xBCD2D8", Offset = "0xBCD2D8", VA = "0xBCD2D8")]
			[DebuggerHidden]
			public <RespawnRoutine>d__22(int <>1__state)
			{
			}

			[Token(Token = "0x6001C82")]
			[Address(RVA = "0xBCD328", Offset = "0xBCD328", VA = "0xBCD328", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001C83")]
			[Address(RVA = "0xBCD32C", Offset = "0xBCD32C", VA = "0xBCD32C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001C85")]
			[Address(RVA = "0xBCD744", Offset = "0xBCD744", VA = "0xBCD744", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001B0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Health;

		[Token(Token = "0x4001B0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private float _startingHealth;

		[Token(Token = "0x4001B0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If specified, this GameObject will be instantiated at this transform's position on death.")]
		public GameObject SpawnOnDeath;

		[Token(Token = "0x4001B10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Activate these GameObjects on Death")]
		public List<GameObject> ActivateGameObjectsOnDeath;

		[Token(Token = "0x4001B11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Deactivate these GameObjects on Death")]
		public List<GameObject> DeactivateGameObjectsOnDeath;

		[Token(Token = "0x4001B12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Deactivate these Colliders on Death")]
		public List<Collider> DeactivateCollidersOnDeath;

		[Token(Token = "0x4001B13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Destroy this object on Death? False if need to respawn.")]
		public bool DestroyOnDeath;

		[Token(Token = "0x4001B14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x41")]
		[Tooltip("If this object is a Grabbable it can be dropped on Death")]
		public bool DropOnDeath;

		[Token(Token = "0x4001B15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("How long to wait before destroying this objects")]
		public float DestroyDelay;

		[Token(Token = "0x4001B16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("If true the object will be reactivated according to RespawnTime")]
		public bool Respawn;

		[Token(Token = "0x4001B17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("If Respawn true, this gameObject will reactivate after RespawnTime. In seconds.")]
		public float RespawnTime;

		[Token(Token = "0x4001B18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Remove any decals that were parented to this object on death. Useful for clearing unused decals.")]
		public bool RemoveBulletHolesOnDeath;

		[Token(Token = "0x4001B19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Optional Event to be called when receiving damage. Takes damage amount as a float parameter.")]
		[Header("Events")]
		public FloatEvent onDamaged;

		[Token(Token = "0x4001B1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Optional Event to be called once health is <= 0")]
		public UnityEvent onDestroyed;

		[Token(Token = "0x4001B1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Optional Event to be called once the object has been respawned, if Respawn is true and after RespawnTime")]
		public UnityEvent onRespawn;

		[Token(Token = "0x4001B1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool destroyed;

		[Token(Token = "0x4001B1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody rigid;

		[Token(Token = "0x4001B1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool initialWasKinematic;

		[Token(Token = "0x6001C7B")]
		[Address(RVA = "0xBCC9DC", Offset = "0xBCC9DC", VA = "0xBCC9DC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001C7C")]
		[Address(RVA = "0xBCCA90", Offset = "0xBCCA90", VA = "0xBCCA90", Slot = "4")]
		public virtual void DealDamage(float damageAmount)
		{
		}

		[Token(Token = "0x6001C7D")]
		[Address(RVA = "0xBCCB40", Offset = "0xBCCB40", VA = "0xBCCB40", Slot = "5")]
		public virtual void DealDamage(float damageAmount, [Optional] Vector3? hitPosition, [Optional] Vector3? hitNormal, bool reactToHit = true, [Optional] GameObject sender, [Optional] GameObject receiver)
		{
		}

		[Token(Token = "0x6001C7E")]
		[Address(RVA = "0xBCCBDC", Offset = "0xBCCBDC", VA = "0xBCCBDC", Slot = "6")]
		public virtual void DestroyThis()
		{
		}

		[Token(Token = "0x6001C7F")]
		[Address(RVA = "0xBCD260", Offset = "0xBCD260", VA = "0xBCD260")]
		[IteratorStateMachine(typeof(<RespawnRoutine>d__22))]
		private IEnumerator RespawnRoutine(float seconds)
		{
			return null;
		}

		[Token(Token = "0x6001C80")]
		[Address(RVA = "0xBCD300", Offset = "0xBCD300", VA = "0xBCD300")]
		public Damageable()
		{
		}
	}
	[Token(Token = "0x200045F")]
	public class DamageCollider : MonoBehaviour
	{
		[Token(Token = "0x4001B23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float Damage;

		[Token(Token = "0x4001B24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Rigidbody ColliderRigidbody;

		[Token(Token = "0x4001B25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float MinForce;

		[Token(Token = "0x4001B26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float LastRelativeVelocity;

		[Token(Token = "0x4001B27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float LastDamageForce;

		[Token(Token = "0x4001B28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool TakeCollisionDamage;

		[Token(Token = "0x4001B29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float CollisionDamage;

		[Token(Token = "0x4001B2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Damageable thisDamageable;

		[Token(Token = "0x6001C87")]
		[Address(RVA = "0xBCD78C", Offset = "0xBCD78C", VA = "0xBCD78C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001C88")]
		[Address(RVA = "0xBCD83C", Offset = "0xBCD83C", VA = "0xBCD83C")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001C89")]
		[Address(RVA = "0xBCD880", Offset = "0xBCD880", VA = "0xBCD880", Slot = "4")]
		public virtual void OnCollisionEvent(Collision collision)
		{
		}

		[Token(Token = "0x6001C8A")]
		[Address(RVA = "0xBCDB50", Offset = "0xBCDB50", VA = "0xBCDB50")]
		public DamageCollider()
		{
		}
	}
	[Token(Token = "0x2000460")]
	public class DestroyObjectWithDelay : MonoBehaviour
	{
		[Token(Token = "0x4001B2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float DestroySeconds;

		[Token(Token = "0x6001C8B")]
		[Address(RVA = "0xBCDB74", Offset = "0xBCDB74", VA = "0xBCDB74")]
		private void Start()
		{
		}

		[Token(Token = "0x6001C8C")]
		[Address(RVA = "0xBCDBF0", Offset = "0xBCDBF0", VA = "0xBCDBF0")]
		public DestroyObjectWithDelay()
		{
		}
	}
	[Token(Token = "0x2000461")]
	public class FollowRigidbody : MonoBehaviour
	{
		[Token(Token = "0x4001B2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform FollowTransform;

		[Token(Token = "0x4001B2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Rigidbody rigid;

		[Token(Token = "0x6001C8D")]
		[Address(RVA = "0xBCDBF8", Offset = "0xBCDBF8", VA = "0xBCDBF8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001C8E")]
		[Address(RVA = "0xBCDC48", Offset = "0xBCDC48", VA = "0xBCDC48")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001C8F")]
		[Address(RVA = "0xBCDC88", Offset = "0xBCDC88", VA = "0xBCDC88")]
		public FollowRigidbody()
		{
		}
	}
	[Token(Token = "0x2000462")]
	public class FollowTransform : MonoBehaviour
	{
		[Token(Token = "0x4001B2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform FollowTarget;

		[Token(Token = "0x4001B2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool MatchRotation;

		[Token(Token = "0x6001C90")]
		[Address(RVA = "0xBCDC90", Offset = "0xBCDC90", VA = "0xBCDC90")]
		private void Update()
		{
		}

		[Token(Token = "0x6001C91")]
		[Address(RVA = "0xBCDD70", Offset = "0xBCDD70", VA = "0xBCDD70")]
		public FollowTransform()
		{
		}
	}
	[Token(Token = "0x2000463")]
	public class GrabAction : GrabbableEvents
	{
		[Token(Token = "0x4001B30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GrabberEvent OnGrabEvent;

		[Token(Token = "0x4001B31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Grabbable g;

		[Token(Token = "0x4001B32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float lastGrabTime;

		[Token(Token = "0x4001B33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float minTimeBetweenGrabs;

		[Token(Token = "0x6001C92")]
		[Address(RVA = "0xBCDD80", Offset = "0xBCDD80", VA = "0xBCDD80", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6001C93")]
		[Address(RVA = "0xBCDEC0", Offset = "0xBCDEC0", VA = "0xBCDEC0")]
		public GrabAction()
		{
		}
	}
	[Token(Token = "0x2000464")]
	public class GrabbableHaptics : GrabbableEvents
	{
		[Token(Token = "0x4001B34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool HapticsOnValidPickup;

		[Token(Token = "0x4001B35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool HapticsOnValidRemotePickup;

		[Token(Token = "0x4001B36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32")]
		public bool HapticsOnCollision;

		[Token(Token = "0x4001B37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33")]
		public bool HapticsOnGrab;

		[Token(Token = "0x4001B38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float VibrateFrequency;

		[Token(Token = "0x4001B39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float VibrateAmplitude;

		[Token(Token = "0x4001B3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float VibrateDuration;

		[Token(Token = "0x4001B3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Grabber currentGrabber;

		[Token(Token = "0x6001C94")]
		[Address(RVA = "0xBCDED4", Offset = "0xBCDED4", VA = "0xBCDED4", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6001C95")]
		[Address(RVA = "0xBCDF9C", Offset = "0xBCDF9C", VA = "0xBCDF9C", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x6001C96")]
		[Address(RVA = "0xBCDFA4", Offset = "0xBCDFA4", VA = "0xBCDFA4", Slot = "7")]
		public override void OnBecomesClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001C97")]
		[Address(RVA = "0xBCDFB4", Offset = "0xBCDFB4", VA = "0xBCDFB4", Slot = "11")]
		public override void OnBecomesClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001C98")]
		[Address(RVA = "0xBCDF00", Offset = "0xBCDF00", VA = "0xBCDF00")]
		private void doHaptics(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001C99")]
		[Address(RVA = "0xBCDFC4", Offset = "0xBCDFC4", VA = "0xBCDFC4")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001C9A")]
		[Address(RVA = "0xBCE0CC", Offset = "0xBCE0CC", VA = "0xBCE0CC")]
		public GrabbableHaptics()
		{
		}
	}
	[Token(Token = "0x2000465")]
	public class GrabbableHighlight : GrabbableEvents
	{
		[Token(Token = "0x4001B3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool HighlightOnGrabbable;

		[Token(Token = "0x4001B3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool HighlightOnRemoteGrabbable;

		[Token(Token = "0x6001C9B")]
		[Address(RVA = "0xBCE0F4", Offset = "0xBCE0F4", VA = "0xBCE0F4", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6001C9C")]
		[Address(RVA = "0xBCE0FC", Offset = "0xBCE0FC", VA = "0xBCE0FC", Slot = "7")]
		public override void OnBecomesClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001C9D")]
		[Address(RVA = "0xBCE104", Offset = "0xBCE104", VA = "0xBCE104", Slot = "9")]
		public override void OnNoLongerClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001C9E")]
		[Address(RVA = "0xBCE108", Offset = "0xBCE108", VA = "0xBCE108", Slot = "11")]
		public override void OnBecomesClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001C9F")]
		[Address(RVA = "0xBCE10C", Offset = "0xBCE10C", VA = "0xBCE10C", Slot = "13")]
		public override void OnNoLongerClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001CA0")]
		[Address(RVA = "0xBCE100", Offset = "0xBCE100", VA = "0xBCE100")]
		public void HighlightItem()
		{
		}

		[Token(Token = "0x6001CA1")]
		[Address(RVA = "0xBCE0F8", Offset = "0xBCE0F8", VA = "0xBCE0F8")]
		public void UnhighlightItem()
		{
		}

		[Token(Token = "0x6001CA2")]
		[Address(RVA = "0xBCE110", Offset = "0xBCE110", VA = "0xBCE110")]
		public GrabbableHighlight()
		{
		}
	}
	[Token(Token = "0x2000466")]
	public class GrabbableHighlightMaterial : GrabbableEvents
	{
		[Token(Token = "0x4001B3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool HighlightOnGrabbable;

		[Token(Token = "0x4001B3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool HighlightOnRemoteGrabbable;

		[Token(Token = "0x4001B40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Materials to assign to Renderer when not being highlighted. ")]
		public List<Material> StandardMaterials;

		[Token(Token = "0x4001B41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Materials to assign to Renderer when being highlighted")]
		public List<Material> HighlightMaterials;

		[Token(Token = "0x4001B42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Renderer Renderer;

		[Token(Token = "0x6001CA3")]
		[Address(RVA = "0xBCE120", Offset = "0xBCE120", VA = "0xBCE120")]
		private void Start()
		{
		}

		[Token(Token = "0x6001CA4")]
		[Address(RVA = "0xBCE2FC", Offset = "0xBCE2FC", VA = "0xBCE2FC", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6001CA5")]
		[Address(RVA = "0xBCE3B0", Offset = "0xBCE3B0", VA = "0xBCE3B0", Slot = "7")]
		public override void OnBecomesClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001CA6")]
		[Address(RVA = "0xBCE470", Offset = "0xBCE470", VA = "0xBCE470", Slot = "9")]
		public override void OnNoLongerClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001CA7")]
		[Address(RVA = "0xBCE480", Offset = "0xBCE480", VA = "0xBCE480", Slot = "11")]
		public override void OnBecomesClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001CA8")]
		[Address(RVA = "0xBCE490", Offset = "0xBCE490", VA = "0xBCE490", Slot = "13")]
		public override void OnNoLongerClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001CA9")]
		[Address(RVA = "0xBCE3C0", Offset = "0xBCE3C0", VA = "0xBCE3C0")]
		public void HighlightItem()
		{
		}

		[Token(Token = "0x6001CAA")]
		[Address(RVA = "0xBCE300", Offset = "0xBCE300", VA = "0xBCE300")]
		public void UnhighlightItem()
		{
		}

		[Token(Token = "0x6001CAB")]
		[Address(RVA = "0xBCE4A0", Offset = "0xBCE4A0", VA = "0xBCE4A0")]
		public GrabbableHighlightMaterial()
		{
		}
	}
	[Token(Token = "0x2000467")]
	public class GrabbableRingHelper : GrabbableEvents
	{
		[Token(Token = "0x4001B43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool RingOnValidPickup;

		[Token(Token = "0x4001B44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		public bool RingOnValidRemotePickup;

		[Token(Token = "0x4001B45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float RingHelperScale;

		[Token(Token = "0x6001CAC")]
		[Address(RVA = "0xBCE4B0", Offset = "0xBCE4B0", VA = "0xBCE4B0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001CAD")]
		[Address(RVA = "0xBCE764", Offset = "0xBCE764", VA = "0xBCE764")]
		public GrabbableRingHelper()
		{
		}
	}
	[Token(Token = "0x2000468")]
	public class GrabPointTrigger : MonoBehaviour
	{
		[Token(Token = "0x2000469")]
		public enum HandMovement
		{
			[Token(Token = "0x4001B52")]
			Instant,
			[Token(Token = "0x4001B53")]
			Lerp,
			[Token(Token = "0x4001B54")]
			None
		}

		[Token(Token = "0x4001B46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Hand Movement")]
		[Tooltip("How to move the hand to the nearest grab point. If set to 'None', the hand model will remain at the controller.")]
		public HandMovement MoveInStyle;

		[Token(Token = "0x4001B47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("How to move the hand back to the grabber")]
		public HandMovement MoveOutStyle;

		[Token(Token = "0x4001B48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("How to fast to move the hand if MovementStyle = 'Lerp' or 'Linear'")]
		public float HandSpeed;

		[Token(Token = "0x4001B49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("If true the hand model will continue to move towards the closest grab point. If false, the hand will only move towards the closest grab point once upon entering the trigger.")]
		public bool LiveUpdateNearestGrabPoint;

		[Token(Token = "0x4001B4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Grabbable Options")]
		[Tooltip("If specified this Grabbable will be grabbed if the user holds down the grab button while this preview is active")]
		public Grabbable GrabObject;

		[Token(Token = "0x4001B4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("If specified this Grabbable must be held for this component to work")]
		public Grabbable OtherGrabbableMustBeHeld;

		[Token(Token = "0x4001B4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Grab Points to move towards when the grabber is within the Trigger area.")]
		public List<GrabPoint> GrabPoints;

		[Token(Token = "0x4001B4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Grabber currentGrabber;

		[Token(Token = "0x4001B4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Grabbable dummyGrabbable;

		[Token(Token = "0x4001B4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private GrabPoint closestPoint;

		[Token(Token = "0x4001B50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Grabber grabberInTrigger;

		[Token(Token = "0x6001CAE")]
		[Address(RVA = "0xBCE780", Offset = "0xBCE780", VA = "0xBCE780")]
		private void Start()
		{
		}

		[Token(Token = "0x6001CAF")]
		[Address(RVA = "0xBCEAB0", Offset = "0xBCEAB0", VA = "0xBCEAB0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001CB0")]
		[Address(RVA = "0xBCEF38", Offset = "0xBCEF38", VA = "0xBCEF38", Slot = "4")]
		public virtual void UpdateGrabPoint(GrabPoint newPoint)
		{
		}

		[Token(Token = "0x6001CB1")]
		[Address(RVA = "0xBCF0B0", Offset = "0xBCF0B0", VA = "0xBCF0B0")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001CB2")]
		[Address(RVA = "0xBCF2BC", Offset = "0xBCF2BC", VA = "0xBCF2BC")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6001CB3")]
		[Address(RVA = "0xBCEEFC", Offset = "0xBCEEFC", VA = "0xBCEEFC")]
		private void setGrabber(Grabber theGrabber)
		{
		}

		[Token(Token = "0x6001CB4")]
		[Address(RVA = "0xBCF3F0", Offset = "0xBCF3F0", VA = "0xBCF3F0", Slot = "5")]
		public virtual void ReleaseGrabber()
		{
		}

		[Token(Token = "0x6001CB5")]
		[Address(RVA = "0xBCF49C", Offset = "0xBCF49C", VA = "0xBCF49C")]
		public GrabPointTrigger()
		{
		}
	}
	[Token(Token = "0x200046A")]
	public class LineToTransform : MonoBehaviour
	{
		[Token(Token = "0x4001B55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform ConnectTo;

		[Token(Token = "0x4001B56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private LineRenderer line;

		[Token(Token = "0x6001CB6")]
		[Address(RVA = "0xBCF4B4", Offset = "0xBCF4B4", VA = "0xBCF4B4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001CB7")]
		[Address(RVA = "0xBCF4B8", Offset = "0xBCF4B8", VA = "0xBCF4B8")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001CB8")]
		[Address(RVA = "0xBCF4BC", Offset = "0xBCF4BC", VA = "0xBCF4BC")]
		public void UpdateLine()
		{
		}

		[Token(Token = "0x6001CB9")]
		[Address(RVA = "0xBCF654", Offset = "0xBCF654", VA = "0xBCF654")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6001CBA")]
		[Address(RVA = "0xBCF658", Offset = "0xBCF658", VA = "0xBCF658")]
		public LineToTransform()
		{
		}
	}
	[Token(Token = "0x200046B")]
	public class LookAtTransform : MonoBehaviour
	{
		[Token(Token = "0x4001B57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform LookAt;

		[Token(Token = "0x4001B58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool UseLerp;

		[Token(Token = "0x4001B59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float Speed;

		[Token(Token = "0x4001B5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool UseUpdate;

		[Token(Token = "0x4001B5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool UseLateUpdate;

		[Token(Token = "0x6001CBB")]
		[Address(RVA = "0xBCF660", Offset = "0xBCF660", VA = "0xBCF660")]
		private void Update()
		{
		}

		[Token(Token = "0x6001CBC")]
		[Address(RVA = "0xBCF860", Offset = "0xBCF860", VA = "0xBCF860")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001CBD")]
		[Address(RVA = "0xBCF670", Offset = "0xBCF670", VA = "0xBCF670")]
		private void lookAt()
		{
		}

		[Token(Token = "0x6001CBE")]
		[Address(RVA = "0xBCF870", Offset = "0xBCF870", VA = "0xBCF870")]
		public LookAtTransform()
		{
		}
	}
	[Token(Token = "0x200046C")]
	public class PlaySoundOnGrab : GrabbableEvents
	{
		[Token(Token = "0x4001B5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioClip SoundToPlay;

		[Token(Token = "0x6001CBF")]
		[Address(RVA = "0xBCF88C", Offset = "0xBCF88C", VA = "0xBCF88C", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6001CC0")]
		[Address(RVA = "0xBCF94C", Offset = "0xBCF94C", VA = "0xBCF94C")]
		public PlaySoundOnGrab()
		{
		}
	}
	[Token(Token = "0x200046D")]
	public class ReturnToSnapZone : MonoBehaviour
	{
		[Token(Token = "0x4001B5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The SnapZone to return to if not being held")]
		public SnapZone ReturnTo;

		[Token(Token = "0x4001B5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("How fast to Lerp Towards the SnapZone")]
		public float LerpSpeed;

		[Token(Token = "0x4001B5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("How long to wait before starting to Lerp the object back towards the SnapZone. In Seconds.")]
		public float ReturnDelay;

		[Token(Token = "0x4001B60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float currentDelay;

		[Token(Token = "0x4001B61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Grabbable grab;

		[Token(Token = "0x4001B62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody rigid;

		[Token(Token = "0x4001B63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool useGravityInitial;

		[Token(Token = "0x4001B64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Initiate snap if distance between the Grabbable and SnapZone is <= SnapDistance")]
		public float SnapDistance;

		[Token(Token = "0x6001CC1")]
		[Address(RVA = "0xBCF954", Offset = "0xBCF954", VA = "0xBCF954")]
		private void Start()
		{
		}

		[Token(Token = "0x6001CC2")]
		[Address(RVA = "0xBCF9E8", Offset = "0xBCF9E8", VA = "0xBCF9E8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001CC3")]
		[Address(RVA = "0xBCFB0C", Offset = "0xBCFB0C", VA = "0xBCFB0C")]
		private void moveToSnapZone()
		{
		}

		[Token(Token = "0x6001CC4")]
		[Address(RVA = "0xBCFDA4", Offset = "0xBCFDA4", VA = "0xBCFDA4")]
		public ReturnToSnapZone()
		{
		}
	}
	[Token(Token = "0x200046E")]
	public class RotateTowards : MonoBehaviour
	{
		[Token(Token = "0x4001B65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform TargetTransform;

		[Token(Token = "0x6001CC5")]
		[Address(RVA = "0xBCFDC4", Offset = "0xBCFDC4", VA = "0xBCFDC4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001CC6")]
		[Address(RVA = "0xBCFEAC", Offset = "0xBCFEAC", VA = "0xBCFEAC")]
		public RotateTowards()
		{
		}
	}
	[Token(Token = "0x200046F")]
	public class RotateWithHMD : MonoBehaviour
	{
		[Token(Token = "0x4001B66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Character Capsule to  rotate along with")]
		public CharacterController Character;

		[Token(Token = "0x4001B67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector3 Offset;

		[Token(Token = "0x4001B68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float RotateSpeed;

		[Token(Token = "0x4001B69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float MovementSmoothing;

		[Token(Token = "0x4001B6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 velocity;

		[Token(Token = "0x4001B6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("If true this transform will be parented to the characterController. Set this to true if you want the position and rotation to align with the character controller without delay.")]
		public bool ParentToCharacter;

		[Token(Token = "0x4001B6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform originalParent;

		[Token(Token = "0x4001B6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Transform followTransform;

		[Token(Token = "0x4001B6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform camTransform;

		[Token(Token = "0x6001CC7")]
		[Address(RVA = "0xBCFEB4", Offset = "0xBCFEB4", VA = "0xBCFEB4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001CC8")]
		[Address(RVA = "0xBD0060", Offset = "0xBD0060", VA = "0xBD0060")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001CC9")]
		[Address(RVA = "0xBD0064", Offset = "0xBD0064", VA = "0xBD0064")]
		private void UpdatePosition()
		{
		}

		[Token(Token = "0x6001CCA")]
		[Address(RVA = "0xBD0414", Offset = "0xBD0414", VA = "0xBD0414")]
		public RotateWithHMD()
		{
		}
	}
	[Token(Token = "0x2000470")]
	public class ScaleBetweenPoints : MonoBehaviour
	{
		[Token(Token = "0x4001B6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform Begin;

		[Token(Token = "0x4001B70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform End;

		[Token(Token = "0x4001B71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool DoUpdate;

		[Token(Token = "0x4001B72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool DoLateUpdate;

		[Token(Token = "0x4001B73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool LookAtTarget;

		[Token(Token = "0x6001CCB")]
		[Address(RVA = "0xBD0480", Offset = "0xBD0480", VA = "0xBD0480")]
		private void Update()
		{
		}

		[Token(Token = "0x6001CCC")]
		[Address(RVA = "0xBD0684", Offset = "0xBD0684", VA = "0xBD0684")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001CCD")]
		[Address(RVA = "0xBD0490", Offset = "0xBD0490", VA = "0xBD0490")]
		private void doScale()
		{
		}

		[Token(Token = "0x6001CCE")]
		[Address(RVA = "0xBD0694", Offset = "0xBD0694", VA = "0xBD0694")]
		public ScaleBetweenPoints()
		{
		}
	}
	[Token(Token = "0x2000471")]
	public class ScreenFader : MonoBehaviour
	{
		[Token(Token = "0x2000472")]
		[CompilerGenerated]
		private sealed class <fadeOutWithDelay>d__16 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001B7F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001B80")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001B81")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delaySeconds;

			[Token(Token = "0x4001B82")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ScreenFader <>4__this;

			[Token(Token = "0x17000368")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001CDE")]
				[Address(RVA = "0xBD1154", Offset = "0xBD1154", VA = "0xBD1154", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000369")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001CE0")]
				[Address(RVA = "0xBD119C", Offset = "0xBD119C", VA = "0xBD119C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001CDB")]
			[Address(RVA = "0xBD0CA8", Offset = "0xBD0CA8", VA = "0xBD0CA8")]
			[DebuggerHidden]
			public <fadeOutWithDelay>d__16(int <>1__state)
			{
			}

			[Token(Token = "0x6001CDC")]
			[Address(RVA = "0xBD109C", Offset = "0xBD109C", VA = "0xBD109C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001CDD")]
			[Address(RVA = "0xBD10A0", Offset = "0xBD10A0", VA = "0xBD10A0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001CDF")]
			[Address(RVA = "0xBD115C", Offset = "0xBD115C", VA = "0xBD115C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x2000473")]
		[CompilerGenerated]
		private sealed class <doFade>d__20 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001B83")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001B84")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001B85")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float alphaFrom;

			[Token(Token = "0x4001B86")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public ScreenFader <>4__this;

			[Token(Token = "0x4001B87")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public float alphaTo;

			[Token(Token = "0x4001B88")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			private float <alpha>5__2;

			[Token(Token = "0x1700036A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001CE4")]
				[Address(RVA = "0xBD1338", Offset = "0xBD1338", VA = "0xBD1338", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700036B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001CE6")]
				[Address(RVA = "0xBD1380", Offset = "0xBD1380", VA = "0xBD1380", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001CE1")]
			[Address(RVA = "0xBD0F24", Offset = "0xBD0F24", VA = "0xBD0F24")]
			[DebuggerHidden]
			public <doFade>d__20(int <>1__state)
			{
			}

			[Token(Token = "0x6001CE2")]
			[Address(RVA = "0xBD11A4", Offset = "0xBD11A4", VA = "0xBD11A4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001CE3")]
			[Address(RVA = "0xBD11A8", Offset = "0xBD11A8", VA = "0xBD11A8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001CE5")]
			[Address(RVA = "0xBD1340", Offset = "0xBD1340", VA = "0xBD1340", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001B74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Should the screen fade in when a new level is loaded")]
		public bool FadeOnSceneLoaded;

		[Token(Token = "0x4001B75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Color of the fade. Alpha will be modified when fading in / out")]
		public Color FadeColor;

		[Token(Token = "0x4001B76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("How fast to fade in / out")]
		public float FadeInSpeed;

		[Token(Token = "0x4001B77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float FadeOutSpeed;

		[Token(Token = "0x4001B78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Wait X seconds before fading scene in")]
		public float SceneFadeInDelay;

		[Token(Token = "0x4001B79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private GameObject fadeObject;

		[Token(Token = "0x4001B7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RectTransform fadeObjectRect;

		[Token(Token = "0x4001B7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Canvas fadeCanvas;

		[Token(Token = "0x4001B7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CanvasGroup canvasGroup;

		[Token(Token = "0x4001B7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Image fadeImage;

		[Token(Token = "0x4001B7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private IEnumerator fadeRoutine;

		[Token(Token = "0x6001CCF")]
		[Address(RVA = "0xBD06A4", Offset = "0xBD06A4", VA = "0xBD06A4")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001CD0")]
		[Address(RVA = "0xBD06B0", Offset = "0xBD06B0", VA = "0xBD06B0", Slot = "4")]
		protected virtual void initialize()
		{
		}

		[Token(Token = "0x6001CD1")]
		[Address(RVA = "0xBD0A40", Offset = "0xBD0A40", VA = "0xBD0A40")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001CD2")]
		[Address(RVA = "0xBD0AE4", Offset = "0xBD0AE4", VA = "0xBD0AE4")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001CD3")]
		[Address(RVA = "0xBD0B88", Offset = "0xBD0B88", VA = "0xBD0B88")]
		private void OnSceneLoaded(Scene scene, LoadSceneMode mode)
		{
		}

		[Token(Token = "0x6001CD4")]
		[Address(RVA = "0xBD0C30", Offset = "0xBD0C30", VA = "0xBD0C30")]
		[IteratorStateMachine(typeof(<fadeOutWithDelay>d__16))]
		private IEnumerator fadeOutWithDelay(float delaySeconds)
		{
			return null;
		}

		[Token(Token = "0x6001CD5")]
		[Address(RVA = "0xBD0CD0", Offset = "0xBD0CD0", VA = "0xBD0CD0", Slot = "5")]
		public virtual void DoFadeIn()
		{
		}

		[Token(Token = "0x6001CD6")]
		[Address(RVA = "0xBD0E08", Offset = "0xBD0E08", VA = "0xBD0E08", Slot = "6")]
		public virtual void DoFadeOut()
		{
		}

		[Token(Token = "0x6001CD7")]
		[Address(RVA = "0xBD0E5C", Offset = "0xBD0E5C", VA = "0xBD0E5C", Slot = "7")]
		public virtual void SetFadeLevel(float fadeLevel)
		{
		}

		[Token(Token = "0x6001CD8")]
		[Address(RVA = "0xBD0D88", Offset = "0xBD0D88", VA = "0xBD0D88")]
		[IteratorStateMachine(typeof(<doFade>d__20))]
		private IEnumerator doFade(float alphaFrom, float alphaTo)
		{
			return null;
		}

		[Token(Token = "0x6001CD9")]
		[Address(RVA = "0xBD0F4C", Offset = "0xBD0F4C", VA = "0xBD0F4C", Slot = "8")]
		protected virtual void updateImageAlpha(float alphaValue)
		{
		}

		[Token(Token = "0x6001CDA")]
		[Address(RVA = "0xBD106C", Offset = "0xBD106C", VA = "0xBD106C")]
		public ScreenFader()
		{
		}
	}
	[Token(Token = "0x2000474")]
	public class SnapZoneRingHelper : MonoBehaviour
	{
		[Token(Token = "0x4001B89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public SnapZone Snap;

		[Token(Token = "0x4001B8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Color RestingColor;

		[Token(Token = "0x4001B8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Color ValidSnapColor;

		[Token(Token = "0x4001B8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float RestingScale;

		[Token(Token = "0x4001B8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public float ValidSnapScale;

		[Token(Token = "0x4001B8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CanvasScaler ringCanvas;

		[Token(Token = "0x4001B8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Text ringText;

		[Token(Token = "0x4001B90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private GrabbablesInTrigger nearbyGrabbables;

		[Token(Token = "0x4001B91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool validSnap;

		[Token(Token = "0x4001B92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float ScaleSpeed;

		[Token(Token = "0x6001CE7")]
		[Address(RVA = "0xBD1388", Offset = "0xBD1388", VA = "0xBD1388")]
		private void Start()
		{
		}

		[Token(Token = "0x6001CE8")]
		[Address(RVA = "0xBD1434", Offset = "0xBD1434", VA = "0xBD1434")]
		private void Update()
		{
		}

		[Token(Token = "0x6001CE9")]
		[Address(RVA = "0xBD1508", Offset = "0xBD1508", VA = "0xBD1508")]
		private bool checkIsValidSnap()
		{
			return default(bool);
		}

		[Token(Token = "0x6001CEA")]
		[Address(RVA = "0xBD15E0", Offset = "0xBD15E0", VA = "0xBD15E0")]
		public SnapZoneRingHelper()
		{
		}
	}
	[Token(Token = "0x2000475")]
	public class Tooltip : MonoBehaviour
	{
		[Token(Token = "0x4001B93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 TipOffset;

		[Token(Token = "0x4001B94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public bool UseWorldYAxis;

		[Token(Token = "0x4001B95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float MaxViewDistance;

		[Token(Token = "0x4001B96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Transform childTransform;

		[Token(Token = "0x4001B97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform DrawLineTo;

		[Token(Token = "0x4001B98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private LineToTransform lineTo;

		[Token(Token = "0x4001B99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform lookAt;

		[Token(Token = "0x6001CEB")]
		[Address(RVA = "0xBD160C", Offset = "0xBD160C", VA = "0xBD160C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001CEC")]
		[Address(RVA = "0xBD1704", Offset = "0xBD1704", VA = "0xBD1704")]
		private void Update()
		{
		}

		[Token(Token = "0x6001CED")]
		[Address(RVA = "0xBD19C0", Offset = "0xBD19C0", VA = "0xBD19C0")]
		public Tooltip()
		{
		}
	}
	[Token(Token = "0x2000476")]
	public class VelocityTracker : MonoBehaviour
	{
		[Token(Token = "0x2000477")]
		public enum VelocityTrackingType
		{
			[Token(Token = "0x4001BA7")]
			Device,
			[Token(Token = "0x4001BA8")]
			PerFrame
		}

		[Token(Token = "0x4001B9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("This setting determines how retrieve the velocity. If 'Device' is selected and ControllerHand is specified, then velocity will be retrieved from the connected physical controller. Otherwise velocity is calculated on a per frame basis.")]
		public VelocityTrackingType trackingType;

		[Token(Token = "0x4001B9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If ControllerHand is specified as Left or Right then velocity will attempt to be retrieved from the physical controller. If None, velocity will be calculated per frame.")]
		public ControllerHand controllerHand;

		[Token(Token = "0x4001B9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("How many frames to use when averaging retrieving velocity using GetAveragedVelocity / GetAveragedAngularVelocity")]
		public float AverageVelocityCount;

		[Token(Token = "0x4001B9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 _velocity;

		[Token(Token = "0x4001B9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 _angularVelocity;

		[Token(Token = "0x4001B9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 _lastPosition;

		[Token(Token = "0x4001BA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Quaternion _lastRotation;

		[Token(Token = "0x4001BA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private List<Vector3> previousVelocities;

		[Token(Token = "0x4001BA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private List<Vector3> previousAngularVelocities;

		[Token(Token = "0x4001BA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float angle;

		[Token(Token = "0x4001BA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 axis;

		[Token(Token = "0x4001BA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private GameObject playSpace;

		[Token(Token = "0x6001CEE")]
		[Address(RVA = "0xBD19E8", Offset = "0xBD19E8", VA = "0xBD19E8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001CEF")]
		[Address(RVA = "0xBD1A38", Offset = "0xBD1A38", VA = "0xBD1A38")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001CF0")]
		[Address(RVA = "0xBD1A98", Offset = "0xBD1A98", VA = "0xBD1A98", Slot = "4")]
		public virtual void UpdateVelocities()
		{
		}

		[Token(Token = "0x6001CF1")]
		[Address(RVA = "0xBD1AC0", Offset = "0xBD1AC0", VA = "0xBD1AC0", Slot = "5")]
		public virtual void UpdateVelocity()
		{
		}

		[Token(Token = "0x6001CF2")]
		[Address(RVA = "0xBD1C1C", Offset = "0xBD1C1C", VA = "0xBD1C1C", Slot = "6")]
		public virtual void UpdateAngularVelocity()
		{
		}

		[Token(Token = "0x6001CF3")]
		[Address(RVA = "0xBD1E48", Offset = "0xBD1E48", VA = "0xBD1E48", Slot = "7")]
		public virtual Vector3 GetVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001CF4")]
		[Address(RVA = "0xBD1FD4", Offset = "0xBD1FD4", VA = "0xBD1FD4", Slot = "8")]
		public virtual Vector3 GetAveragedVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001CF5")]
		[Address(RVA = "0xBD1FE4", Offset = "0xBD1FE4", VA = "0xBD1FE4", Slot = "9")]
		public virtual Vector3 GetAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001CF6")]
		[Address(RVA = "0xBD1FF0", Offset = "0xBD1FF0", VA = "0xBD1FF0", Slot = "10")]
		public virtual Vector3 GetAveragedAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001CF7")]
		[Address(RVA = "0xBD2000", Offset = "0xBD2000", VA = "0xBD2000", Slot = "11")]
		public virtual Vector3 GetAveragedVector(List<Vector3> vectors)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001CF8")]
		[Address(RVA = "0xBD2108", Offset = "0xBD2108", VA = "0xBD2108")]
		public VelocityTracker()
		{
		}
	}
	[Token(Token = "0x2000478")]
	public enum LocomotionType
	{
		[Token(Token = "0x4001BAA")]
		Teleport,
		[Token(Token = "0x4001BAB")]
		SmoothLocomotion,
		[Token(Token = "0x4001BAC")]
		None
	}
	[Token(Token = "0x2000479")]
	public class BNGPlayerController : MonoBehaviour
	{
		[Token(Token = "0x4001BAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Camera Options : ")]
		[Tooltip("If true the CharacterController will move along with the HMD, as long as there are no obstacle's in the way")]
		public bool MoveCharacterWithCamera;

		[Token(Token = "0x4001BAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		[Tooltip("If true the CharacterController will rotate it's Y angle to match the HMD's Y angle")]
		public bool RotateCharacterWithCamera;

		[Token(Token = "0x4001BAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The TrackingSpace represents your tracking space origin.")]
		[Header("Transform Setup ")]
		public Transform TrackingSpace;

		[Token(Token = "0x4001BB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("The CameraRig is a Transform that is used to offset the main camera. The main camera should be parented to this.")]
		public Transform CameraRig;

		[Token(Token = "0x4001BB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The CenterEyeAnchor is typically the Transform that contains your Main Camera")]
		public Transform CenterEyeAnchor;

		[Token(Token = "0x4001BB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Ground checks : ")]
		[Tooltip("Raycast against these layers to check if player is grounded")]
		public LayerMask GroundedLayers;

		[Token(Token = "0x4001BB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("How far off the ground the player currently is. 0 = Grounded, 1 = 1 Meter in the air.")]
		public float DistanceFromGround;

		[Token(Token = "0x4001BB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Player Capsule Settings : ")]
		[Tooltip("Minimum Height our Player's capsule collider can be (in meters)")]
		public float MinimumCapsuleHeight;

		[Token(Token = "0x4001BB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("Maximum Height our Player's capsule collider can be (in meters)")]
		public float MaximumCapsuleHeight;

		[Token(Token = "0x4001BB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[HideInInspector]
		public float LastTeleportTime;

		[Token(Token = "0x4001BB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Header("Player Y Offset : ")]
		[Tooltip("Offset the height of the CharacterController by this amount")]
		public float CharacterControllerYOffset;

		[Token(Token = "0x4001BB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[HideInInspector]
		public float CameraHeight;

		[Token(Token = "0x4001BB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Header("Misc : ")]
		[Tooltip("If true the Camera will be offset by ElevateCameraHeight if no HMD is active or connected. This prevents the camera from falling to the floor and can allow you to use keyboard controls.")]
		public bool ElevateCameraIfNoHMDPresent;

		[Token(Token = "0x4001BBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("How high (in meters) to elevate the player camera if no HMD is present and ElevateCameraIfNoHMDPresent is true. 1.65 = about 5.4' tall. ")]
		public float ElevateCameraHeight;

		[Token(Token = "0x4001BBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Minimum Y position our player is allowed to go. Useful for floating point precision and making sure player didn't fall through the map.")]
		public float MinElevation;

		[Token(Token = "0x4001BBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float MaxElevation;

		[Token(Token = "0x4001BBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[HideInInspector]
		public float LastPlayerMoveTime;

		[Token(Token = "0x4001BBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private CharacterController characterController;

		[Token(Token = "0x4001BBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x4001BC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private PlayerClimbing playerClimbing;

		[Token(Token = "0x4001BC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public RaycastHit groundHit;

		[Token(Token = "0x4001BC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Transform mainCamera;

		[Token(Token = "0x4001BC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 _initialPosition;

		[Token(Token = "0x6001CF9")]
		[Address(RVA = "0xBD21B4", Offset = "0xBD21B4", VA = "0xBD21B4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001CFA")]
		[Address(RVA = "0xBD22EC", Offset = "0xBD22EC", VA = "0xBD22EC")]
		private void Update()
		{
		}

		[Token(Token = "0x6001CFB")]
		[Address(RVA = "0xBD2428", Offset = "0xBD2428", VA = "0xBD2428")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001CFC")]
		[Address(RVA = "0xBD2450", Offset = "0xBD2450", VA = "0xBD2450", Slot = "4")]
		public virtual void CheckPlayerElevationRespawn()
		{
		}

		[Token(Token = "0x6001CFD")]
		[Address(RVA = "0xBD2594", Offset = "0xBD2594", VA = "0xBD2594", Slot = "5")]
		public virtual void UpdateDistanceFromGround()
		{
		}

		[Token(Token = "0x6001CFE")]
		[Address(RVA = "0xBD2988", Offset = "0xBD2988", VA = "0xBD2988", Slot = "6")]
		public virtual void RotateTrackingSpaceToCamera()
		{
		}

		[Token(Token = "0x6001CFF")]
		[Address(RVA = "0xBD2AB0", Offset = "0xBD2AB0", VA = "0xBD2AB0", Slot = "7")]
		public virtual void UpdateCameraRigPosition()
		{
		}

		[Token(Token = "0x6001D00")]
		[Address(RVA = "0xBD2C5C", Offset = "0xBD2C5C", VA = "0xBD2C5C", Slot = "8")]
		public virtual void UpdateCharacterHeight()
		{
		}

		[Token(Token = "0x6001D01")]
		[Address(RVA = "0xBD2DFC", Offset = "0xBD2DFC", VA = "0xBD2DFC", Slot = "9")]
		public virtual void UpdateCameraHeight()
		{
		}

		[Token(Token = "0x6001D02")]
		[Address(RVA = "0xBD2E78", Offset = "0xBD2E78", VA = "0xBD2E78", Slot = "10")]
		public virtual void CheckCharacterCollisionMove()
		{
		}

		[Token(Token = "0x6001D03")]
		[Address(RVA = "0xBD3098", Offset = "0xBD3098", VA = "0xBD3098")]
		public bool IsGrounded()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D04")]
		[Address(RVA = "0xBD3134", Offset = "0xBD3134", VA = "0xBD3134")]
		public BNGPlayerController()
		{
		}
	}
	[Token(Token = "0x200047A")]
	public class Button : MonoBehaviour
	{
		[Token(Token = "0x4001BC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Local Y position of the button when it is pushed all the way down. Local Y position will never be less than this.")]
		public float MinLocalY;

		[Token(Token = "0x4001BC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("The Local Y position of the button when it is not being pushed. Local Y position will never be greater than this.")]
		public float MaxLocalY;

		[Token(Token = "0x4001BC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("How far away from MinLocalY / MaxLocalY to be considered a click")]
		public float ClickTolerance;

		[Token(Token = "0x4001BC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("If true the button can be pressed by physical object by utiizing a Spring Joint. Set to false if you don't need / want physics interactions, or are using this on a moving platform.")]
		public bool AllowPhysicsForces;

		[Token(Token = "0x4001BC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private List<Grabber> grabbers;

		[Token(Token = "0x4001BC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<UITrigger> uiTriggers;

		[Token(Token = "0x4001BCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private SpringJoint joint;

		[Token(Token = "0x4001BCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private bool clickingDown;

		[Token(Token = "0x4001BCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public AudioClip ButtonClick;

		[Token(Token = "0x4001BCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AudioClip ButtonClickUp;

		[Token(Token = "0x4001BCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent onButtonDown;

		[Token(Token = "0x4001BCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public UnityEvent onButtonUp;

		[Token(Token = "0x4001BD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private AudioSource audioSource;

		[Token(Token = "0x4001BD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody rigid;

		[Token(Token = "0x4001BD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float ButtonSpeed;

		[Token(Token = "0x4001BD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private float SpringForce;

		[Token(Token = "0x4001BD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Vector3 buttonDownPosition;

		[Token(Token = "0x4001BD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private Vector3 buttonUpPosition;

		[Token(Token = "0x6001D05")]
		[Address(RVA = "0xBD317C", Offset = "0xBD317C", VA = "0xBD317C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001D06")]
		[Address(RVA = "0xBD32A0", Offset = "0xBD32A0", VA = "0xBD32A0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D07")]
		[Address(RVA = "0xBD3694", Offset = "0xBD3694", VA = "0xBD3694", Slot = "4")]
		public virtual Vector3 GetButtonUpPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001D08")]
		[Address(RVA = "0xBD36EC", Offset = "0xBD36EC", VA = "0xBD36EC", Slot = "5")]
		public virtual Vector3 GetButtonDownPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001D09")]
		[Address(RVA = "0xBD3744", Offset = "0xBD3744", VA = "0xBD3744", Slot = "6")]
		public virtual void OnButtonDown()
		{
		}

		[Token(Token = "0x6001D0A")]
		[Address(RVA = "0xBD380C", Offset = "0xBD380C", VA = "0xBD380C", Slot = "7")]
		public virtual void OnButtonUp()
		{
		}

		[Token(Token = "0x6001D0B")]
		[Address(RVA = "0xBD38D4", Offset = "0xBD38D4", VA = "0xBD38D4")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001D0C")]
		[Address(RVA = "0xBD3B90", Offset = "0xBD3B90", VA = "0xBD3B90")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6001D0D")]
		[Address(RVA = "0xBD3D30", Offset = "0xBD3D30", VA = "0xBD3D30")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001D0E")]
		[Address(RVA = "0xBD3EFC", Offset = "0xBD3EFC", VA = "0xBD3EFC")]
		public Button()
		{
		}
	}
	[Token(Token = "0x200047B")]
	public class ControllerModelSelector : MonoBehaviour
	{
		[Token(Token = "0x4001BD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private int disableIndex;

		[Token(Token = "0x4001BD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private bool isQuitting;

		[Token(Token = "0x6001D0F")]
		[Address(RVA = "0xBD3FE8", Offset = "0xBD3FE8", VA = "0xBD3FE8")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001D10")]
		[Address(RVA = "0xBD408C", Offset = "0xBD408C", VA = "0xBD408C")]
		public void UpdateControllerModel()
		{
		}

		[Token(Token = "0x6001D11")]
		[Address(RVA = "0xBD41A8", Offset = "0xBD41A8", VA = "0xBD41A8")]
		public void EnableChildController(int childIndex)
		{
		}

		[Token(Token = "0x6001D12")]
		[Address(RVA = "0xBD4238", Offset = "0xBD4238", VA = "0xBD4238")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001D13")]
		[Address(RVA = "0xBD42F0", Offset = "0xBD42F0", VA = "0xBD42F0")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6001D14")]
		[Address(RVA = "0xBD42FC", Offset = "0xBD42FC", VA = "0xBD42FC")]
		public ControllerModelSelector()
		{
		}
	}
	[Token(Token = "0x200047C")]
	public class Grabbable : MonoBehaviour
	{
		[Token(Token = "0x4001BD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool BeingHeld;

		[Token(Token = "0x4001BD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Grabber> validGrabbers;

		[Token(Token = "0x4001BDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected List<Grabber> heldByGrabbers;

		[Token(Token = "0x4001BDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected bool wasKinematic;

		[Token(Token = "0x4001BDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31")]
		protected bool usedGravity;

		[Token(Token = "0x4001BDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		protected CollisionDetectionMode initialCollisionMode;

		[Token(Token = "0x4001BDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected RigidbodyInterpolation initialInterpolationMode;

		[Token(Token = "0x4001BDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected bool remoteGrabbing;

		[Token(Token = "0x4001BE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Grab Settings")]
		[Tooltip("Configure which button is used to initiate the grab")]
		public GrabButton GrabButton;

		[Token(Token = "0x4001BE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("'Inherit' will inherit this setting from the Grabber. 'Hold' requires the user to hold the GrabButton down. 'Toggle' will drop / release the Grabbable on button activation.")]
		public HoldType Grabtype;

		[Token(Token = "0x4001BE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Kinematic Physics locks the object in place on the hand / grabber. Physics Joint and Velocity types allow collisions with the environment.")]
		public GrabPhysics GrabPhysics;

		[Token(Token = "0x4001BE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Snap to a location or grab anywhere on the object")]
		public GrabType GrabMechanic;

		[Token(Token = "0x4001BE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("How fast to Lerp the object to the hand")]
		public float GrabSpeed;

		[Token(Token = "0x4001BE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("Can the object be picked up from far away. Must be within RemoteGrabber Trigger")]
		[Header("Remote Grab")]
		public bool RemoteGrabbable;

		[Token(Token = "0x4001BE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Max Distance Object can be Remote Grabbed. Not applicable if RemoteGrabbable is false")]
		public float RemoteGrabDistance;

		[Token(Token = "0x4001BE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Multiply controller's velocity times this when throwing")]
		[Header("Throwing")]
		public float ThrowForceMultiplier;

		[Token(Token = "0x4001BE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Multiply controller's angular velocity times this when throwing")]
		public float ThrowForceMultiplierAngular;

		[Token(Token = "0x4001BE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("Drop the item if object's center travels this far from the Grabber's Center (in meters). Set to 0 to disable distance break.")]
		public float BreakDistance;

		[Token(Token = "0x4001BEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Hand Options")]
		[Tooltip("Enabling this will hide the Transform specified in the Grabber's HandGraphics property")]
		public bool HideHandGraphics;

		[Token(Token = "0x4001BEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		[Tooltip("Parent this object to the hands for instantaneous movement. Object will travel 1:1 with the controller but may have trouble detecting fast moving collisions.")]
		public bool ParentToHands;

		[Token(Token = "0x4001BEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		[Tooltip("If true, the hand model will be attached to the grabbed object. This separates it from a 1:1 match with the controller, but may look more realistic.")]
		public bool ParentHandModel;

		[Token(Token = "0x4001BED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
		[Tooltip("If true, the hand model will snap to the nearest GrabPoint. Otherwise the hand model will stay with the Grabber.")]
		public bool SnapHandModel;

		[Token(Token = "0x4001BEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("Set to false to disable dropping. If false, will be permanently attached to whatever grabs this.")]
		[Header("Misc")]
		public bool CanBeDropped;

		[Token(Token = "0x4001BEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		[Tooltip("Can this object be snapped to snap zones? Set to false if you never want this to be snappable. Further filtering can be done on the SnapZones")]
		public bool CanBeSnappedToSnapZone;

		[Token(Token = "0x4001BF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6E")]
		[Tooltip("If true, the object will always have kinematic disabled when dropped, even if it was initially kinematic.")]
		public bool ForceDisableKinematicOnDrop;

		[Token(Token = "0x4001BF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6F")]
		[Tooltip("If true, the object will instantly position / rotate to the grabber instead of using velocity / force. This will only happen if no collisions have recently occurred. When using this method, the Grabbable's Rigidbody willbe instantly rotated / moved, taking in to account the interpolation settings. May clip through objects if moving fast enough.")]
		public bool InstantMovement;

		[Token(Token = "0x4001BF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Default Hand Pose")]
		[Tooltip("This HandPose Id will be passed to the Hand Animator when equipped. You can add new hand poses in the HandPoseDefinitions.cs file.")]
		public HandPoseId CustomHandPose;

		[Token(Token = "0x4001BF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		protected HandPoseId initialHandPoseId;

		[Token(Token = "0x4001BF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("What to do if another grabber grabs this while equipped.")]
		[Header("Two-Handed Grab Behavior")]
		public OtherGrabBehavior SecondaryGrabBehavior;

		[Token(Token = "0x4001BF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("How to behave when two hands are grabbing this object. LookAt = Have the primary Grabber 'LookAt' the secondary grabber. For example, holding a rifle in the right controller will have it rotate towards the left controller. AveragePositionRotation = Use a point and rotation in space that is half-way between both grabbers.")]
		public TwoHandedPositionType TwoHandedPosition;

		[Token(Token = "0x4001BF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("How far to lerp between grabber positions. For example, 0.5 = halfway between the primary and secondary grabber. 0 = use the primary grabber's position, 1 = use the secondary grabber's position.")]
		[Range(0f, 1f)]
		public float TwoHandedPostionLerpAmount;

		[Token(Token = "0x4001BF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Tooltip("How to behave when two hands are grabbing this object. LookAt = Have the primary Grabber 'LookAt' the secondary grabber. For example, holding a rifle in the right controller will have it rotate towards the left controller. AveragePositionRotation = Use a point and rotation in space that is half-way between both grabbers.")]
		public TwoHandedRotationType TwoHandedRotation;

		[Token(Token = "0x4001BF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("How far to lerp / slerp between grabber rotation. For example, 0.5 = halfway between the primary and secondary grabber. 0 = use the primary grabber's rotation, 1 = use the secondary grabber's position.")]
		[Range(0f, 1f)]
		public float TwoHandedRotationLerpAmount;

		[Token(Token = "0x4001BF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("How to repond if you are holding an object with two hands, and then drop the primary grabber. For example, you may want to drop the object, transfer it to the second hand, or do nothing at all.")]
		public TwoHandedDropMechanic TwoHandedDropBehavior;

		[Token(Token = "0x4001BFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Which vector to use when TwoHandedRotation = LookAtSecondary. Ex : Horizontal = A rifle type setup where you want to aim down the sites; Vertical = A melee type setup where the object is vertical")]
		public TwoHandedLookDirection TwoHandedLookVector;

		[Token(Token = "0x4001BFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("How quickly to Lerp towards the SecondaryGrabbable if TwoHandedGrabBehavior = LookAt")]
		public float SecondHandLookSpeed;

		[Token(Token = "0x4001BFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Header("Secondary Grabbale Object")]
		[Tooltip("If specified, this object will be used as a secondary grabbable instead of relying on grab points on this object. If 'TwoHandedGrabBehavior' is specified as LookAt, this is the object the grabber will be rotated towards. If 'TwoHandedGrabBehavior' is specified as AveragePositionRotation, this is the object the grabber use to calculate position.")]
		public Grabbable SecondaryGrabbable;

		[Token(Token = "0x4001BFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("The Grabbable can only be grabbed if this grabbable is being held. Example : If you only want a weapon part to be grabbable if the weapon itself is being held.")]
		[Header("Grab Restrictions")]
		public Grabbable OtherGrabbableMustBeGrabbed;

		[Token(Token = "0x4001BFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("A higher Spring Force will make the Grabbable more rigid")]
		[Header("Physics Joint Settings")]
		public float CollisionSpring;

		[Token(Token = "0x4001BFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[Tooltip("How much Slerp Force to apply to the joint when something is in contact with the grabbable")]
		public float CollisionSlerp;

		[Token(Token = "0x4001C00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("How to restrict the Configurable Joint's xMotion when colliding with an object. Position can be free, completely locked, or limited.")]
		public ConfigurableJointMotion CollisionLinearMotionX;

		[Token(Token = "0x4001C01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		[Tooltip("How to restrict the Configurable Joint's yMotion when colliding with an object. Position can be free, completely locked, or limited.")]
		public ConfigurableJointMotion CollisionLinearMotionY;

		[Token(Token = "0x4001C02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("How to restrict the Configurable Joint's zMotion when colliding with an object. Position can be free, completely locked, or limited.")]
		public ConfigurableJointMotion CollisionLinearMotionZ;

		[Token(Token = "0x4001C03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[Tooltip("Restrict the rotation around the X axes to be Free, completely Locked, or Limited when colliding with an object.")]
		public ConfigurableJointMotion CollisionAngularMotionX;

		[Token(Token = "0x4001C04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("Restrict the rotation around the Y axes to be Free, completely Locked, or Limited when colliding with an object.")]
		public ConfigurableJointMotion CollisionAngularMotionY;

		[Token(Token = "0x4001C05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		[Tooltip("Restrict the rotation around Z axes to be Free, completely Locked, or Limited when colliding with an object.")]
		public ConfigurableJointMotion CollisionAngularMotionZ;

		[Token(Token = "0x4001C06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("If true, the object's velocity will be adjusted to match the grabber. This is in addition to any forces added by the configurable joint.")]
		public bool ApplyCorrectiveForce;

		[Token(Token = "0x4001C07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		[Header("Velocity Grab Settings")]
		public float MoveVelocityForce;

		[Token(Token = "0x4001C08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public float MoveAngularVelocityForce;

		[Token(Token = "0x4001C09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		[HideInInspector]
		public float LastGrabTime;

		[Token(Token = "0x4001C0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[HideInInspector]
		public float LastDropTime;

		[Token(Token = "0x4001C0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[HideInInspector]
		public bool AddControllerVelocityOnDrop;

		[Token(Token = "0x4001C0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private float journeyLength;

		[Token(Token = "0x4001C0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[SerializeField]
		[Header("Shown for Debug : ")]
		public List<Collider> collisions;

		[Token(Token = "0x4001C12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		protected Transform primaryGrabOffset;

		[Token(Token = "0x4001C13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		protected Transform secondaryGrabOffset;

		[Token(Token = "0x4001C14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[HideInInspector]
		public GrabPoint ActiveGrabPoint;

		[Token(Token = "0x4001C15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[HideInInspector]
		public Vector3 SecondaryLookOffset;

		[Token(Token = "0x4001C16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[HideInInspector]
		public Transform SecondaryLookAtTransform;

		[Token(Token = "0x4001C17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		[HideInInspector]
		public Transform LocalOffsetTransform;

		[Token(Token = "0x4001C18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private Transform _grabTransform;

		[Token(Token = "0x4001C19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private Transform _grabTransformSecondary;

		[Token(Token = "0x4001C1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		[Tooltip("If Grab Mechanic is set to Snap, the closest GrabPoint will be used. Add a SnapPoint Component to a GrabPoint to specify custom hand poses and rotation.")]
		[Header("Grab Points")]
		public List<Transform> GrabPoints;

		[Token(Token = "0x4001C1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private bool _canBeMoved;

		[Token(Token = "0x4001C1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		protected Transform originalParent;

		[Token(Token = "0x4001C1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		protected InputBridge input;

		[Token(Token = "0x4001C1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		protected ConfigurableJoint connectedJoint;

		[Token(Token = "0x4001C1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		protected Vector3 previousPosition;

		[Token(Token = "0x4001C20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x17C")]
		protected float lastItemTeleportTime;

		[Token(Token = "0x4001C21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		protected bool recentlyTeleported;

		[Token(Token = "0x4001C22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x181")]
		[HideInInspector]
		public bool UseCustomInspector;

		[Token(Token = "0x4001C23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private BNGPlayerController _player;

		[Token(Token = "0x4001C24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		protected Collider col;

		[Token(Token = "0x4001C25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		protected Rigidbody rigid;

		[Token(Token = "0x4001C26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		protected Grabber flyingTo;

		[Token(Token = "0x4001C27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		protected List<GrabbableEvents> events;

		[Token(Token = "0x4001C28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		protected bool didParentHands;

		[Token(Token = "0x4001C29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B4")]
		private float angle;

		[Token(Token = "0x4001C2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		private Vector3 axis;

		[Token(Token = "0x4001C2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C4")]
		private Vector3 angularTarget;

		[Token(Token = "0x4001C2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private Vector3 angularMovement;

		[Token(Token = "0x4001C2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DC")]
		private bool subscribedToEvents;

		[Token(Token = "0x4001C2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1DD")]
		private bool grabbableIsLocked;

		[Token(Token = "0x4001C2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private Transform _priorParent;

		[Token(Token = "0x4001C30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private Vector3 _priorLocalOffsetPosition;

		[Token(Token = "0x4001C31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F4")]
		private Quaternion _priorLocalOffsetRotation;

		[Token(Token = "0x4001C32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private Grabber _priorPrimaryGrabber;

		[Token(Token = "0x4001C33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x210")]
		private bool lockPos;

		[Token(Token = "0x4001C34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x211")]
		private bool lockRot;

		[Token(Token = "0x4001C35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x214")]
		private int lockRequests;

		[Token(Token = "0x4001C36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x218")]
		private bool quitting;

		[Token(Token = "0x1700036C")]
		public bool BeingHeldWithTwoHands
		{
			[Token(Token = "0x6001D15")]
			[Address(RVA = "0xBD4304", Offset = "0xBD4304", VA = "0xBD4304")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700036D")]
		public List<Grabber> HeldByGrabbers
		{
			[Token(Token = "0x6001D16")]
			[Address(RVA = "0xBD43C0", Offset = "0xBD43C0", VA = "0xBD43C0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700036E")]
		public float OriginalScale
		{
			[Token(Token = "0x6001D17")]
			[Address(RVA = "0xBD43C8", Offset = "0xBD43C8", VA = "0xBD43C8")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001D18")]
			[Address(RVA = "0xBD43D0", Offset = "0xBD43D0", VA = "0xBD43D0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700036F")]
		public float lastCollisionSeconds
		{
			[Token(Token = "0x6001D19")]
			[Address(RVA = "0xBD43D8", Offset = "0xBD43D8", VA = "0xBD43D8")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001D1A")]
			[Address(RVA = "0xBD43E0", Offset = "0xBD43E0", VA = "0xBD43E0")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x17000370")]
		public float lastNoCollisionSeconds
		{
			[Token(Token = "0x6001D1B")]
			[Address(RVA = "0xBD43E8", Offset = "0xBD43E8", VA = "0xBD43E8")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001D1C")]
			[Address(RVA = "0xBD43F0", Offset = "0xBD43F0", VA = "0xBD43F0")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x17000371")]
		public bool RecentlyCollided
		{
			[Token(Token = "0x6001D1D")]
			[Address(RVA = "0xBD43F8", Offset = "0xBD43F8", VA = "0xBD43F8")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000372")]
		public float requestSpringTime
		{
			[Token(Token = "0x6001D1E")]
			[Address(RVA = "0xBD4470", Offset = "0xBD4470", VA = "0xBD4470")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001D1F")]
			[Address(RVA = "0xBD4478", Offset = "0xBD4478", VA = "0xBD4478")]
			[CompilerGenerated]
			protected set
			{
			}
		}

		[Token(Token = "0x17000373")]
		private Vector3 grabPosition
		{
			[Token(Token = "0x6001D20")]
			[Address(RVA = "0xBD4480", Offset = "0xBD4480", VA = "0xBD4480")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000374")]
		[HideInInspector]
		public Vector3 GrabPositionOffset
		{
			[Token(Token = "0x6001D21")]
			[Address(RVA = "0xBCA930", Offset = "0xBCA930", VA = "0xBCA930")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000375")]
		[HideInInspector]
		public Vector3 GrabRotationOffset
		{
			[Token(Token = "0x6001D22")]
			[Address(RVA = "0xBD4508", Offset = "0xBD4508", VA = "0xBD4508")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x17000376")]
		public Transform grabTransform
		{
			[Token(Token = "0x6001D23")]
			[Address(RVA = "0xBD45C8", Offset = "0xBD45C8", VA = "0xBD45C8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000377")]
		public Transform grabTransformSecondary
		{
			[Token(Token = "0x6001D24")]
			[Address(RVA = "0xBD470C", Offset = "0xBD470C", VA = "0xBD470C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000378")]
		public bool CanBeMoved
		{
			[Token(Token = "0x6001D25")]
			[Address(RVA = "0xBD4864", Offset = "0xBD4864", VA = "0xBD4864")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x17000379")]
		protected BNGPlayerController player
		{
			[Token(Token = "0x6001D26")]
			[Address(RVA = "0xBCB940", Offset = "0xBCB940", VA = "0xBCB940")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700037A")]
		public bool DidParentHands
		{
			[Token(Token = "0x6001D27")]
			[Address(RVA = "0xBD486C", Offset = "0xBD486C", VA = "0xBD486C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001D28")]
		[Address(RVA = "0xBD4874", Offset = "0xBD4874", VA = "0xBD4874")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001D29")]
		[Address(RVA = "0xBD4CDC", Offset = "0xBD4CDC", VA = "0xBD4CDC", Slot = "4")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x6001D2A")]
		[Address(RVA = "0xBD68A8", Offset = "0xBD68A8", VA = "0xBD68A8", Slot = "5")]
		public virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6001D2B")]
		[Address(RVA = "0xBD69AC", Offset = "0xBD69AC", VA = "0xBD69AC", Slot = "6")]
		public virtual Vector3 GetGrabberWithGrabPointOffset(Grabber grabber, Transform grabPoint)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001D2C")]
		[Address(RVA = "0xBD6ABC", Offset = "0xBD6ABC", VA = "0xBD6ABC", Slot = "7")]
		public virtual Quaternion GetGrabberWithOffsetWorldRotation(Grabber grabber)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001D2D")]
		[Address(RVA = "0xBD6244", Offset = "0xBD6244", VA = "0xBD6244")]
		protected void positionHandGraphics(Grabber g)
		{
		}

		[Token(Token = "0x6001D2E")]
		[Address(RVA = "0xBD6B7C", Offset = "0xBD6B7C", VA = "0xBD6B7C", Slot = "8")]
		public virtual bool IsGrabbable()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D2F")]
		[Address(RVA = "0xBD6C54", Offset = "0xBD6C54", VA = "0xBD6C54", Slot = "9")]
		public virtual void UpdateFixedJoints()
		{
		}

		[Token(Token = "0x6001D30")]
		[Address(RVA = "0xBD6FD0", Offset = "0xBD6FD0", VA = "0xBD6FD0", Slot = "10")]
		public virtual void UpdatePhysicsJoints()
		{
		}

		[Token(Token = "0x6001D31")]
		[Address(RVA = "0xBD7420", Offset = "0xBD7420", VA = "0xBD7420")]
		private void setPositionSpring(float spring, float damper)
		{
		}

		[Token(Token = "0x6001D32")]
		[Address(RVA = "0xBD75AC", Offset = "0xBD75AC", VA = "0xBD75AC")]
		private void setSlerpDrive(float slerp, float damper)
		{
		}

		[Token(Token = "0x6001D33")]
		[Address(RVA = "0xBD7684", Offset = "0xBD7684", VA = "0xBD7684", Slot = "11")]
		public virtual Vector3 GetGrabberVector3(Grabber grabber, bool isSecondary)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001D34")]
		[Address(RVA = "0xBD76D8", Offset = "0xBD76D8", VA = "0xBD76D8", Slot = "12")]
		public virtual Quaternion GetGrabberQuaternion(Grabber grabber, bool isSecondary)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001D35")]
		[Address(RVA = "0xBD6D10", Offset = "0xBD6D10", VA = "0xBD6D10")]
		private void moveWithVelocity()
		{
		}

		[Token(Token = "0x6001D36")]
		[Address(RVA = "0xBD78B8", Offset = "0xBD78B8", VA = "0xBD78B8")]
		private void rotateWithVelocity()
		{
		}

		[Token(Token = "0x6001D37")]
		[Address(RVA = "0xBD7718", Offset = "0xBD7718", VA = "0xBD7718")]
		public Vector3 GetGrabbersAveragedPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001D38")]
		[Address(RVA = "0xBD7D0C", Offset = "0xBD7D0C", VA = "0xBD7D0C")]
		public Quaternion GetGrabbersAveragedRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001D39")]
		[Address(RVA = "0xBD8400", Offset = "0xBD8400", VA = "0xBD8400", Slot = "13")]
		public virtual void UpdateKinematicPhysics()
		{
		}

		[Token(Token = "0x6001D3A")]
		[Address(RVA = "0xBD89E4", Offset = "0xBD89E4", VA = "0xBD89E4", Slot = "14")]
		public virtual void UpdateVelocityPhysics()
		{
		}

		[Token(Token = "0x6001D3B")]
		[Address(RVA = "0xBD5F8C", Offset = "0xBD5F8C", VA = "0xBD5F8C")]
		private void checkParentHands(Grabber g)
		{
		}

		[Token(Token = "0x6001D3C")]
		[Address(RVA = "0xBD4BF0", Offset = "0xBD4BF0", VA = "0xBD4BF0")]
		private bool canBeMoved()
		{
			return default(bool);
		}

		[Token(Token = "0x6001D3D")]
		[Address(RVA = "0xBD6338", Offset = "0xBD6338", VA = "0xBD6338")]
		private void checkSecondaryLook()
		{
		}

		[Token(Token = "0x6001D3E")]
		[Address(RVA = "0xBD8D10", Offset = "0xBD8D10", VA = "0xBD8D10")]
		private void rotateGrabber(bool lerp = false)
		{
		}

		[Token(Token = "0x6001D3F")]
		[Address(RVA = "0xBD8ED8", Offset = "0xBD8ED8", VA = "0xBD8ED8")]
		public Transform GetGrabPoint()
		{
			return null;
		}

		[Token(Token = "0x6001D40")]
		[Address(RVA = "0xBCB9E8", Offset = "0xBCB9E8", VA = "0xBCB9E8", Slot = "15")]
		public virtual void GrabItem(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x6001D41")]
		[Address(RVA = "0xBD90C4", Offset = "0xBD90C4", VA = "0xBD90C4", Slot = "16")]
		protected virtual void setupConfigJointGrab(Grabber grabbedBy, GrabType grabType)
		{
		}

		[Token(Token = "0x6001D42")]
		[Address(RVA = "0xBD92B0", Offset = "0xBD92B0", VA = "0xBD92B0", Slot = "17")]
		protected virtual void setupFixedJointGrab(Grabber grabbedBy, GrabType grabType)
		{
		}

		[Token(Token = "0x6001D43")]
		[Address(RVA = "0xBD93C0", Offset = "0xBD93C0", VA = "0xBD93C0", Slot = "18")]
		protected virtual void setupKinematicGrab(Grabber grabbedBy, GrabType grabType)
		{
		}

		[Token(Token = "0x6001D44")]
		[Address(RVA = "0xBD94CC", Offset = "0xBD94CC", VA = "0xBD94CC", Slot = "19")]
		protected virtual void setupVelocityGrab(Grabber grabbedBy, GrabType grabType)
		{
		}

		[Token(Token = "0x6001D45")]
		[Address(RVA = "0xBD9518", Offset = "0xBD9518", VA = "0xBD9518", Slot = "20")]
		public virtual void GrabRemoteItem(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x6001D46")]
		[Address(RVA = "0xBD8EE0", Offset = "0xBD8EE0", VA = "0xBD8EE0")]
		public void ResetGrabbing()
		{
		}

		[Token(Token = "0x6001D47")]
		[Address(RVA = "0xBD9690", Offset = "0xBD9690", VA = "0xBD9690", Slot = "21")]
		public virtual void DropItem(Grabber droppedBy, bool resetVelocity, bool resetParent)
		{
		}

		[Token(Token = "0x6001D48")]
		[Address(RVA = "0xBD8C2C", Offset = "0xBD8C2C", VA = "0xBD8C2C")]
		private void clearLookAtTransform()
		{
		}

		[Token(Token = "0x6001D49")]
		[Address(RVA = "0xBD5A78", Offset = "0xBD5A78", VA = "0xBD5A78")]
		private void callEvents(Grabber g)
		{
		}

		[Token(Token = "0x6001D4A")]
		[Address(RVA = "0xBCC308", Offset = "0xBCC308", VA = "0xBCC308", Slot = "22")]
		public virtual void DropItem(Grabber droppedBy)
		{
		}

		[Token(Token = "0x6001D4B")]
		[Address(RVA = "0xBDA144", Offset = "0xBDA144", VA = "0xBDA144", Slot = "23")]
		public virtual void DropItem(bool resetVelocity, bool resetParent)
		{
		}

		[Token(Token = "0x6001D4C")]
		[Address(RVA = "0xBDA194", Offset = "0xBDA194", VA = "0xBDA194")]
		public void ResetScale()
		{
		}

		[Token(Token = "0x6001D4D")]
		[Address(RVA = "0xBD9E48", Offset = "0xBD9E48", VA = "0xBD9E48")]
		public void ResetParent()
		{
		}

		[Token(Token = "0x6001D4E")]
		[Address(RVA = "0xBDA1C4", Offset = "0xBDA1C4", VA = "0xBDA1C4")]
		public void UpdateOriginalParent(Transform newOriginalParent)
		{
		}

		[Token(Token = "0x6001D4F")]
		[Address(RVA = "0xBDA1CC", Offset = "0xBDA1CC", VA = "0xBDA1CC")]
		public void UpdateOriginalParent()
		{
		}

		[Token(Token = "0x6001D50")]
		[Address(RVA = "0xBDA1F8", Offset = "0xBDA1F8", VA = "0xBDA1F8")]
		public ControllerHand GetControllerHand(Grabber g)
		{
			return default(ControllerHand);
		}

		[Token(Token = "0x6001D51")]
		[Address(RVA = "0xBDA270", Offset = "0xBDA270", VA = "0xBDA270", Slot = "24")]
		public virtual Grabber GetPrimaryGrabber()
		{
			return null;
		}

		[Token(Token = "0x6001D52")]
		[Address(RVA = "0xBDA3A4", Offset = "0xBDA3A4", VA = "0xBDA3A4", Slot = "25")]
		public virtual Grabber GetClosestGrabber()
		{
			return null;
		}

		[Token(Token = "0x6001D53")]
		[Address(RVA = "0xBDA550", Offset = "0xBDA550", VA = "0xBDA550", Slot = "26")]
		public virtual Transform GetClosestGrabPoint(Grabber grabber)
		{
			return null;
		}

		[Token(Token = "0x6001D54")]
		[Address(RVA = "0xBDA880", Offset = "0xBDA880", VA = "0xBDA880", Slot = "27")]
		public virtual void Release(Vector3 velocity, Vector3 angularVelocity)
		{
		}

		[Token(Token = "0x6001D55")]
		[Address(RVA = "0xBDA9C0", Offset = "0xBDA9C0", VA = "0xBDA9C0", Slot = "28")]
		public virtual bool IsValidCollision(Collision collision)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D56")]
		[Address(RVA = "0xBDA9F8", Offset = "0xBDA9F8", VA = "0xBDA9F8", Slot = "29")]
		public virtual bool IsValidCollision(Collider col)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D57")]
		[Address(RVA = "0xBDAB90", Offset = "0xBDAB90", VA = "0xBDAB90", Slot = "30")]
		public virtual void parentHandGraphics(Grabber g)
		{
		}

		[Token(Token = "0x6001D58")]
		[Address(RVA = "0xBD91CC", Offset = "0xBD91CC", VA = "0xBD91CC")]
		private void setupConfigJoint(Grabber g)
		{
		}

		[Token(Token = "0x6001D59")]
		[Address(RVA = "0xBD9E70", Offset = "0xBD9E70", VA = "0xBD9E70")]
		private void removeConfigJoint()
		{
		}

		[Token(Token = "0x6001D5A")]
		[Address(RVA = "0xBD8FA8", Offset = "0xBD8FA8", VA = "0xBD8FA8")]
		private void addGrabber(Grabber g)
		{
		}

		[Token(Token = "0x6001D5B")]
		[Address(RVA = "0xBD9F44", Offset = "0xBD9F44", VA = "0xBD9F44")]
		private void removeGrabber(Grabber g)
		{
		}

		[Token(Token = "0x6001D5C")]
		[Address(RVA = "0xBD5758", Offset = "0xBD5758", VA = "0xBD5758")]
		private void movePosition(Vector3 worldPosition)
		{
		}

		[Token(Token = "0x6001D5D")]
		[Address(RVA = "0xBD5828", Offset = "0xBD5828", VA = "0xBD5828")]
		private void moveRotation(Quaternion worldRotation)
		{
		}

		[Token(Token = "0x6001D5E")]
		[Address(RVA = "0xBD8830", Offset = "0xBD8830", VA = "0xBD8830")]
		protected Vector3 getRemotePosition(Grabber toGrabber)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001D5F")]
		[Address(RVA = "0xBD5524", Offset = "0xBD5524", VA = "0xBD5524")]
		protected Quaternion getRemoteRotation(Grabber grabber)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001D60")]
		[Address(RVA = "0xBD5904", Offset = "0xBD5904", VA = "0xBD5904")]
		private void filterCollisions()
		{
		}

		[Token(Token = "0x6001D61")]
		[Address(RVA = "0xBDAC84", Offset = "0xBDAC84", VA = "0xBDAC84", Slot = "31")]
		public virtual BNGPlayerController GetBNGPlayerController()
		{
			return null;
		}

		[Token(Token = "0x6001D62")]
		[Address(RVA = "0xBDADA8", Offset = "0xBDADA8", VA = "0xBDADA8", Slot = "32")]
		public virtual void RequestSpringTime(float seconds)
		{
		}

		[Token(Token = "0x6001D63")]
		[Address(RVA = "0xBDADE0", Offset = "0xBDADE0", VA = "0xBDADE0", Slot = "33")]
		public virtual void AddValidGrabber(Grabber grabber)
		{
		}

		[Token(Token = "0x6001D64")]
		[Address(RVA = "0xBDAEFC", Offset = "0xBDAEFC", VA = "0xBDAEFC", Slot = "34")]
		public virtual void RemoveValidGrabber(Grabber grabber)
		{
		}

		[Token(Token = "0x6001D65")]
		[Address(RVA = "0xBDAF8C", Offset = "0xBDAF8C", VA = "0xBDAF8C", Slot = "35")]
		public virtual void SubscribeToMoveEvents()
		{
		}

		[Token(Token = "0x6001D66")]
		[Address(RVA = "0xBDB21C", Offset = "0xBDB21C", VA = "0xBDB21C", Slot = "36")]
		public virtual void UnsubscribeFromMoveEvents()
		{
		}

		[Token(Token = "0x6001D67")]
		[Address(RVA = "0xBDB498", Offset = "0xBDB498", VA = "0xBDB498", Slot = "37")]
		public virtual void LockGrabbable()
		{
		}

		[Token(Token = "0x6001D68")]
		[Address(RVA = "0xBDB4B4", Offset = "0xBDB4B4", VA = "0xBDB4B4", Slot = "38")]
		public virtual void LockGrabbableWithRotation()
		{
		}

		[Token(Token = "0x6001D69")]
		[Address(RVA = "0xBDB4D0", Offset = "0xBDB4D0", VA = "0xBDB4D0", Slot = "39")]
		public virtual void RequestLockGrabbable()
		{
		}

		[Token(Token = "0x6001D6A")]
		[Address(RVA = "0xBDB67C", Offset = "0xBDB67C", VA = "0xBDB67C", Slot = "40")]
		public virtual void RequestUnlockGrabbable()
		{
		}

		[Token(Token = "0x6001D6B")]
		[Address(RVA = "0xBDB6AC", Offset = "0xBDB6AC", VA = "0xBDB6AC", Slot = "41")]
		public virtual void ResetLockResets()
		{
		}

		[Token(Token = "0x6001D6C")]
		[Address(RVA = "0xBDB764", Offset = "0xBDB764", VA = "0xBDB764", Slot = "42")]
		public virtual void LockGrabbable(bool lockPosition, bool lockRotation, bool overridePriorLock)
		{
		}

		[Token(Token = "0x6001D6D")]
		[Address(RVA = "0xBDB994", Offset = "0xBDB994", VA = "0xBDB994", Slot = "43")]
		public virtual void UnlockGrabbable()
		{
		}

		[Token(Token = "0x6001D6E")]
		[Address(RVA = "0xBDBD40", Offset = "0xBDBD40", VA = "0xBDBD40")]
		private void OnCollisionStay(Collision collision)
		{
		}

		[Token(Token = "0x6001D6F")]
		[Address(RVA = "0xBDBF04", Offset = "0xBDBF04", VA = "0xBDBF04")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001D70")]
		[Address(RVA = "0xBDC020", Offset = "0xBDC020", VA = "0xBDC020")]
		private void OnCollisionExit(Collision collision)
		{
		}

		[Token(Token = "0x6001D71")]
		[Address(RVA = "0xBDC0DC", Offset = "0xBDC0DC", VA = "0xBDC0DC")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6001D72")]
		[Address(RVA = "0xBDC0E8", Offset = "0xBDC0E8", VA = "0xBDC0E8")]
		private void OnDestroy()
		{
		}

		[Token(Token = "0x6001D73")]
		[Address(RVA = "0xBDC114", Offset = "0xBDC114", VA = "0xBDC114")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001D74")]
		[Address(RVA = "0xBCC324", Offset = "0xBCC324", VA = "0xBCC324")]
		public Grabbable()
		{
		}
	}
	[Token(Token = "0x200047D")]
	public enum GrabType
	{
		[Token(Token = "0x4001C38")]
		Snap,
		[Token(Token = "0x4001C39")]
		Precise
	}
	[Token(Token = "0x200047E")]
	public enum GrabPhysics
	{
		[Token(Token = "0x4001C3B")]
		None = 2,
		[Token(Token = "0x4001C3C")]
		PhysicsJoint = 0,
		[Token(Token = "0x4001C3D")]
		FixedJoint = 3,
		[Token(Token = "0x4001C3E")]
		Velocity = 4,
		[Token(Token = "0x4001C3F")]
		Kinematic = 1
	}
	[Token(Token = "0x200047F")]
	public enum OtherGrabBehavior
	{
		[Token(Token = "0x4001C41")]
		None,
		[Token(Token = "0x4001C42")]
		SwapHands,
		[Token(Token = "0x4001C43")]
		DualGrab
	}
	[Token(Token = "0x2000480")]
	public enum TwoHandedPositionType
	{
		[Token(Token = "0x4001C45")]
		Lerp,
		[Token(Token = "0x4001C46")]
		None
	}
	[Token(Token = "0x2000481")]
	public enum TwoHandedRotationType
	{
		[Token(Token = "0x4001C48")]
		Lerp,
		[Token(Token = "0x4001C49")]
		Slerp,
		[Token(Token = "0x4001C4A")]
		LookAtSecondary,
		[Token(Token = "0x4001C4B")]
		None
	}
	[Token(Token = "0x2000482")]
	public enum TwoHandedDropMechanic
	{
		[Token(Token = "0x4001C4D")]
		Drop,
		[Token(Token = "0x4001C4E")]
		Transfer,
		[Token(Token = "0x4001C4F")]
		None
	}
	[Token(Token = "0x2000483")]
	public enum TwoHandedLookDirection
	{
		[Token(Token = "0x4001C51")]
		Horizontal,
		[Token(Token = "0x4001C52")]
		Vertical
	}
	[Token(Token = "0x2000484")]
	public class GrabbableChild : MonoBehaviour
	{
		[Token(Token = "0x4001C53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Parent Grabbable Object to be grabbed.")]
		public Grabbable ParentGrabbable;

		[Token(Token = "0x6001D75")]
		[Address(RVA = "0xBF4F24", Offset = "0xBF4F24", VA = "0xBF4F24")]
		public GrabbableChild()
		{
		}
	}
	[Token(Token = "0x2000485")]
	[RequireComponent(typeof(Grabbable))]
	public abstract class GrabbableEvents : MonoBehaviour
	{
		[Token(Token = "0x4001C54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		protected Grabbable grab;

		[Token(Token = "0x4001C55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected Grabber thisGrabber;

		[Token(Token = "0x4001C56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		protected InputBridge input;

		[Token(Token = "0x6001D76")]
		[Address(RVA = "0xBF4F2C", Offset = "0xBF4F2C", VA = "0xBF4F2C", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001D77")]
		[Address(RVA = "0xBF5158", Offset = "0xBF5158", VA = "0xBF5158", Slot = "5")]
		public virtual void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6001D78")]
		[Address(RVA = "0xBF5160", Offset = "0xBF5160", VA = "0xBF5160", Slot = "6")]
		public virtual void OnRelease()
		{
		}

		[Token(Token = "0x6001D79")]
		[Address(RVA = "0xBF5164", Offset = "0xBF5164", VA = "0xBF5164", Slot = "7")]
		public virtual void OnBecomesClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001D7A")]
		[Address(RVA = "0xBF5168", Offset = "0xBF5168", VA = "0xBF5168", Slot = "8")]
		public virtual void OnBecomesClosestGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6001D7B")]
		[Address(RVA = "0xBF516C", Offset = "0xBF516C", VA = "0xBF516C", Slot = "9")]
		public virtual void OnNoLongerClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001D7C")]
		[Address(RVA = "0xBF5170", Offset = "0xBF5170", VA = "0xBF5170", Slot = "10")]
		public virtual void OnNoLongerClosestGrabbable(Grabber touchingGrabber)
		{
		}

		[Token(Token = "0x6001D7D")]
		[Address(RVA = "0xBF5174", Offset = "0xBF5174", VA = "0xBF5174", Slot = "11")]
		public virtual void OnBecomesClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001D7E")]
		[Address(RVA = "0xBF5178", Offset = "0xBF5178", VA = "0xBF5178", Slot = "12")]
		public virtual void OnBecomesClosestRemoteGrabbable(Grabber theGrabber)
		{
		}

		[Token(Token = "0x6001D7F")]
		[Address(RVA = "0xBF517C", Offset = "0xBF517C", VA = "0xBF517C", Slot = "13")]
		public virtual void OnNoLongerClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001D80")]
		[Address(RVA = "0xBF5180", Offset = "0xBF5180", VA = "0xBF5180", Slot = "14")]
		public virtual void OnNoLongerClosestRemoteGrabbable(Grabber theGrabber)
		{
		}

		[Token(Token = "0x6001D81")]
		[Address(RVA = "0xBF5184", Offset = "0xBF5184", VA = "0xBF5184", Slot = "15")]
		public virtual void OnGrip(float gripValue)
		{
		}

		[Token(Token = "0x6001D82")]
		[Address(RVA = "0xBF5188", Offset = "0xBF5188", VA = "0xBF5188", Slot = "16")]
		public virtual void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6001D83")]
		[Address(RVA = "0xBF518C", Offset = "0xBF518C", VA = "0xBF518C", Slot = "17")]
		public virtual void OnTriggerDown()
		{
		}

		[Token(Token = "0x6001D84")]
		[Address(RVA = "0xBF5190", Offset = "0xBF5190", VA = "0xBF5190", Slot = "18")]
		public virtual void OnTriggerUp()
		{
		}

		[Token(Token = "0x6001D85")]
		[Address(RVA = "0xBF5194", Offset = "0xBF5194", VA = "0xBF5194", Slot = "19")]
		public virtual void OnButton1()
		{
		}

		[Token(Token = "0x6001D86")]
		[Address(RVA = "0xBF5198", Offset = "0xBF5198", VA = "0xBF5198", Slot = "20")]
		public virtual void OnButton1Down()
		{
		}

		[Token(Token = "0x6001D87")]
		[Address(RVA = "0xBF519C", Offset = "0xBF519C", VA = "0xBF519C", Slot = "21")]
		public virtual void OnButton1Up()
		{
		}

		[Token(Token = "0x6001D88")]
		[Address(RVA = "0xBF51A0", Offset = "0xBF51A0", VA = "0xBF51A0", Slot = "22")]
		public virtual void OnButton2()
		{
		}

		[Token(Token = "0x6001D89")]
		[Address(RVA = "0xBF51A4", Offset = "0xBF51A4", VA = "0xBF51A4", Slot = "23")]
		public virtual void OnButton2Down()
		{
		}

		[Token(Token = "0x6001D8A")]
		[Address(RVA = "0xBF51A8", Offset = "0xBF51A8", VA = "0xBF51A8", Slot = "24")]
		public virtual void OnButton2Up()
		{
		}

		[Token(Token = "0x6001D8B")]
		[Address(RVA = "0xBF51AC", Offset = "0xBF51AC", VA = "0xBF51AC", Slot = "25")]
		public virtual void OnSnapZoneEnter(SnapZone snapZone)
		{
		}

		[Token(Token = "0x6001D8C")]
		[Address(RVA = "0xBF51B0", Offset = "0xBF51B0", VA = "0xBF51B0", Slot = "26")]
		public virtual void OnSnapZoneExit(SnapZone snapZone)
		{
		}

		[Token(Token = "0x6001D8D")]
		[Address(RVA = "0xBF51B4", Offset = "0xBF51B4", VA = "0xBF51B4")]
		protected GrabbableEvents()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000486")]
	public class FloatEvent : UnityEvent<float>
	{
		[Token(Token = "0x6001D8E")]
		[Address(RVA = "0xBF51BC", Offset = "0xBF51BC", VA = "0xBF51BC")]
		public FloatEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000487")]
	public class FloatFloatEvent : UnityEvent<float, float>
	{
		[Token(Token = "0x6001D8F")]
		[Address(RVA = "0xBF5204", Offset = "0xBF5204", VA = "0xBF5204")]
		public FloatFloatEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000488")]
	public class GrabberEvent : UnityEvent<Grabber>
	{
		[Token(Token = "0x6001D90")]
		[Address(RVA = "0xBF524C", Offset = "0xBF524C", VA = "0xBF524C")]
		public GrabberEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x2000489")]
	public class GrabbableEvent : UnityEvent<Grabbable>
	{
		[Token(Token = "0x6001D91")]
		[Address(RVA = "0xBF5294", Offset = "0xBF5294", VA = "0xBF5294")]
		public GrabbableEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200048A")]
	public class RaycastHitEvent : UnityEvent<RaycastHit>
	{
		[Token(Token = "0x6001D92")]
		[Address(RVA = "0xBF52DC", Offset = "0xBF52DC", VA = "0xBF52DC")]
		public RaycastHitEvent()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200048B")]
	public class Vector2Event : UnityEvent<Vector2>
	{
		[Token(Token = "0x6001D93")]
		[Address(RVA = "0xBF5324", Offset = "0xBF5324", VA = "0xBF5324")]
		public Vector2Event()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200048C")]
	public class Vector3Event : UnityEvent<Vector3>
	{
		[Token(Token = "0x6001D94")]
		[Address(RVA = "0xBF536C", Offset = "0xBF536C", VA = "0xBF536C")]
		public Vector3Event()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200048D")]
	public class PointerEventDataEvent : UnityEvent<PointerEventData>
	{
		[Token(Token = "0x6001D95")]
		[Address(RVA = "0xBF53B4", Offset = "0xBF53B4", VA = "0xBF53B4")]
		public PointerEventDataEvent()
		{
		}
	}
	[Token(Token = "0x200048E")]
	public class GrabbablesInTrigger : MonoBehaviour
	{
		[Token(Token = "0x4001C57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Dictionary<Collider, Grabbable> NearbyGrabbables;

		[Token(Token = "0x4001C58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Dictionary<Collider, Grabbable> ValidGrabbables;

		[Token(Token = "0x4001C59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Grabbable ClosestGrabbable;

		[Token(Token = "0x4001C5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Dictionary<Collider, Grabbable> ValidRemoteGrabbables;

		[Token(Token = "0x4001C5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Grabbable ClosestRemoteGrabbable;

		[Token(Token = "0x4001C5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool FireGrabbableEvents;

		[Token(Token = "0x4001C5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Grabbable _closest;

		[Token(Token = "0x4001C5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float _lastDistance;

		[Token(Token = "0x4001C5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private float _thisDistance;

		[Token(Token = "0x4001C60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Dictionary<Collider, Grabbable> _valids;

		[Token(Token = "0x4001C61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Dictionary<Collider, Grabbable> _filtered;

		[Token(Token = "0x6001D96")]
		[Address(RVA = "0xBF53FC", Offset = "0xBF53FC", VA = "0xBF53FC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001D97")]
		[Address(RVA = "0xBF54B0", Offset = "0xBF54B0", VA = "0xBF54B0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001D98")]
		[Address(RVA = "0xBF54C8", Offset = "0xBF54C8", VA = "0xBF54C8")]
		private void updateClosestGrabbable()
		{
		}

		[Token(Token = "0x6001D99")]
		[Address(RVA = "0xBF5510", Offset = "0xBF5510", VA = "0xBF5510")]
		private void updateClosestRemoteGrabbables()
		{
		}

		[Token(Token = "0x6001D9A")]
		[Address(RVA = "0xBF5B4C", Offset = "0xBF5B4C", VA = "0xBF5B4C", Slot = "4")]
		public virtual Grabbable GetClosestGrabbable(Dictionary<Collider, Grabbable> grabbables, bool remoteOnly = false)
		{
			return null;
		}

		[Token(Token = "0x6001D9B")]
		[Address(RVA = "0xBF5908", Offset = "0xBF5908", VA = "0xBF5908")]
		private Dictionary<Collider, Grabbable> getValidGrabbables(Dictionary<Collider, Grabbable> grabs)
		{
			return null;
		}

		[Token(Token = "0x6001D9C")]
		[Address(RVA = "0xBF5E60", Offset = "0xBF5E60", VA = "0xBF5E60", Slot = "5")]
		protected virtual bool isValidGrabbale(Collider col, Grabbable grab)
		{
			return default(bool);
		}

		[Token(Token = "0x6001D9D")]
		[Address(RVA = "0xBF5598", Offset = "0xBF5598", VA = "0xBF5598")]
		private Dictionary<Collider, Grabbable> sanitizeGrabbables(Dictionary<Collider, Grabbable> grabs)
		{
			return null;
		}

		[Token(Token = "0x6001D9E")]
		[Address(RVA = "0xBF60C8", Offset = "0xBF60C8", VA = "0xBF60C8", Slot = "6")]
		public virtual void AddNearbyGrabbable(Collider col, Grabbable grabObject)
		{
		}

		[Token(Token = "0x6001D9F")]
		[Address(RVA = "0xBF61F0", Offset = "0xBF61F0", VA = "0xBF61F0", Slot = "7")]
		public virtual void RemoveNearbyGrabbable(Collider col, Grabbable grabObject)
		{
		}

		[Token(Token = "0x6001DA0")]
		[Address(RVA = "0xBF62C8", Offset = "0xBF62C8", VA = "0xBF62C8", Slot = "8")]
		public virtual void RemoveNearbyGrabbable(Grabbable grabObject)
		{
		}

		[Token(Token = "0x6001DA1")]
		[Address(RVA = "0xBF64B8", Offset = "0xBF64B8", VA = "0xBF64B8", Slot = "9")]
		public virtual void AddValidRemoteGrabbable(Collider col, Grabbable grabObject)
		{
		}

		[Token(Token = "0x6001DA2")]
		[Address(RVA = "0xBF6784", Offset = "0xBF6784", VA = "0xBF6784", Slot = "10")]
		public virtual void RemoveValidRemoteGrabbable(Collider col, Grabbable grabObject)
		{
		}

		[Token(Token = "0x6001DA3")]
		[Address(RVA = "0xBF685C", Offset = "0xBF685C", VA = "0xBF685C")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001DA4")]
		[Address(RVA = "0xBF69AC", Offset = "0xBF69AC", VA = "0xBF69AC")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6001DA5")]
		[Address(RVA = "0xBF6AD4", Offset = "0xBF6AD4", VA = "0xBF6AD4")]
		public GrabbablesInTrigger()
		{
		}
	}
	[Token(Token = "0x200048F")]
	public class GrabbableUnityEvents : GrabbableEvents
	{
		[Token(Token = "0x4001C62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GrabberEvent onGrab;

		[Token(Token = "0x4001C63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public UnityEvent onRelease;

		[Token(Token = "0x4001C64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public UnityEvent onBecomesClosestGrabbable;

		[Token(Token = "0x4001C65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public UnityEvent onNoLongerClosestGrabbable;

		[Token(Token = "0x4001C66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public UnityEvent onBecomesClosestRemoteGrabbable;

		[Token(Token = "0x4001C67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public UnityEvent onNoLongerClosestRemoteGrabbable;

		[Token(Token = "0x4001C68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FloatEvent onGrip;

		[Token(Token = "0x4001C69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public FloatEvent onTrigger;

		[Token(Token = "0x4001C6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public UnityEvent onTriggerDown;

		[Token(Token = "0x4001C6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public UnityEvent onTriggerUp;

		[Token(Token = "0x4001C6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public UnityEvent onButton1;

		[Token(Token = "0x4001C6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public UnityEvent onButton1Down;

		[Token(Token = "0x4001C6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public UnityEvent onButton1Up;

		[Token(Token = "0x4001C6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public UnityEvent onButton2;

		[Token(Token = "0x4001C70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public UnityEvent onButton2Down;

		[Token(Token = "0x4001C71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public UnityEvent onButton2Up;

		[Token(Token = "0x4001C72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public UnityEvent onSnapZoneEnter;

		[Token(Token = "0x4001C73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public UnityEvent onSnapZoneExit;

		[Token(Token = "0x6001DA6")]
		[Address(RVA = "0xBF6AE4", Offset = "0xBF6AE4", VA = "0xBF6AE4", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6001DA7")]
		[Address(RVA = "0xBF6B48", Offset = "0xBF6B48", VA = "0xBF6B48", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x6001DA8")]
		[Address(RVA = "0xBF6B5C", Offset = "0xBF6B5C", VA = "0xBF6B5C", Slot = "7")]
		public override void OnBecomesClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001DA9")]
		[Address(RVA = "0xBF6B70", Offset = "0xBF6B70", VA = "0xBF6B70", Slot = "9")]
		public override void OnNoLongerClosestGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001DAA")]
		[Address(RVA = "0xBF6B84", Offset = "0xBF6B84", VA = "0xBF6B84", Slot = "11")]
		public override void OnBecomesClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001DAB")]
		[Address(RVA = "0xBF6B98", Offset = "0xBF6B98", VA = "0xBF6B98", Slot = "13")]
		public override void OnNoLongerClosestRemoteGrabbable(ControllerHand touchingHand)
		{
		}

		[Token(Token = "0x6001DAC")]
		[Address(RVA = "0xBF6BAC", Offset = "0xBF6BAC", VA = "0xBF6BAC", Slot = "15")]
		public override void OnGrip(float gripValue)
		{
		}

		[Token(Token = "0x6001DAD")]
		[Address(RVA = "0xBF6C18", Offset = "0xBF6C18", VA = "0xBF6C18", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6001DAE")]
		[Address(RVA = "0xBF6C84", Offset = "0xBF6C84", VA = "0xBF6C84", Slot = "17")]
		public override void OnTriggerDown()
		{
		}

		[Token(Token = "0x6001DAF")]
		[Address(RVA = "0xBF6C98", Offset = "0xBF6C98", VA = "0xBF6C98", Slot = "18")]
		public override void OnTriggerUp()
		{
		}

		[Token(Token = "0x6001DB0")]
		[Address(RVA = "0xBF6CAC", Offset = "0xBF6CAC", VA = "0xBF6CAC", Slot = "19")]
		public override void OnButton1()
		{
		}

		[Token(Token = "0x6001DB1")]
		[Address(RVA = "0xBF6CC0", Offset = "0xBF6CC0", VA = "0xBF6CC0", Slot = "20")]
		public override void OnButton1Down()
		{
		}

		[Token(Token = "0x6001DB2")]
		[Address(RVA = "0xBF6CD4", Offset = "0xBF6CD4", VA = "0xBF6CD4", Slot = "21")]
		public override void OnButton1Up()
		{
		}

		[Token(Token = "0x6001DB3")]
		[Address(RVA = "0xBF6CE8", Offset = "0xBF6CE8", VA = "0xBF6CE8", Slot = "22")]
		public override void OnButton2()
		{
		}

		[Token(Token = "0x6001DB4")]
		[Address(RVA = "0xBF6CFC", Offset = "0xBF6CFC", VA = "0xBF6CFC", Slot = "23")]
		public override void OnButton2Down()
		{
		}

		[Token(Token = "0x6001DB5")]
		[Address(RVA = "0xBF6D10", Offset = "0xBF6D10", VA = "0xBF6D10", Slot = "24")]
		public override void OnButton2Up()
		{
		}

		[Token(Token = "0x6001DB6")]
		[Address(RVA = "0xBF6D24", Offset = "0xBF6D24", VA = "0xBF6D24", Slot = "25")]
		public override void OnSnapZoneEnter(SnapZone sZone)
		{
		}

		[Token(Token = "0x6001DB7")]
		[Address(RVA = "0xBF6D38", Offset = "0xBF6D38", VA = "0xBF6D38", Slot = "26")]
		public override void OnSnapZoneExit(SnapZone sZone)
		{
		}

		[Token(Token = "0x6001DB8")]
		[Address(RVA = "0xBF6D4C", Offset = "0xBF6D4C", VA = "0xBF6D4C")]
		public GrabbableUnityEvents()
		{
		}
	}
	[Token(Token = "0x2000490")]
	[RequireComponent(typeof(GrabbablesInTrigger))]
	public class Grabber : MonoBehaviour
	{
		[Token(Token = "0x4001C74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Hand Side")]
		[Tooltip("Which controller side. None if not attached to a controller.")]
		public ControllerHand HandSide;

		[Token(Token = "0x4001C75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Header("Grab Settings")]
		[Tooltip("The default hold type for all Grabbables. A Grabbable can manually override this default.")]
		public HoldType DefaultHoldType;

		[Token(Token = "0x4001C76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The default grab button for all Grabbables. A Grabbable can manually override this default.")]
		public GrabButton DefaultGrabButton;

		[Token(Token = "0x4001C77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Header("Hold / Release")]
		[Range(0f, 1f)]
		[Tooltip("0-1 determine how much to consider a grip. Example : 0.75 is holding the grip down 3/4 of the way.")]
		public float GripAmount;

		[Token(Token = "0x4001C78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("How much grip considered to release an object (0-1). Example : 0.75 is holding the grip down 3/4 of the way")]
		[Range(0f, 1f)]
		public float ReleaseGripAmount;

		[Token(Token = "0x4001C79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("How many seconds to check for grab input while Grip is held down. After grip is held down for this long, grip will need to be repressed in order to pick up an object.")]
		public float GrabCheckSeconds;

		[Token(Token = "0x4001C7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float currentGrabTime;

		[Token(Token = "0x4001C7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Assign a Grabbable here if you want to auto equip it on Start")]
		[Header("Equip on Start")]
		public Grabbable EquipGrabbableOnStart;

		[Token(Token = "0x4001C7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Root transform that holds hands models. We may want to hide these while holding certain objects, or parent this object to the grabbable so they follow the object perfectly.")]
		[Header("Hand Graphics")]
		public Transform HandsGraphics;

		[Token(Token = "0x4001C7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Transform handsGraphicsParent;

		[Token(Token = "0x4001C7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 handsGraphicsPosition;

		[Token(Token = "0x4001C7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private Quaternion handsGraphicsRotation;

		[Token(Token = "0x4001C80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("The Grabbable we are currently holding. Null if not holding anything.")]
		[Header("Shown for Debug :")]
		public Grabbable HeldGrabbable;

		[Token(Token = "0x4001C81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("Same as holding down grip if set to true. Should not have same value as ForceRelease.")]
		public bool ForceGrab;

		[Token(Token = "0x4001C82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		[Tooltip("Force the release of grip if set to true. Should not have same value as ForceGrab.")]
		public bool ForceRelease;

		[Token(Token = "0x4001C83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("Time.time when we last dropped a Grabbable")]
		public float LastDropTime;

		[Token(Token = "0x4001C84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Grabbable previousClosest;

		[Token(Token = "0x4001C85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Grabbable previousClosestRemote;

		[Token(Token = "0x4001C86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private GrabbablesInTrigger grabsInTrigger;

		[Token(Token = "0x4001C87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Grabbable flyingGrabbable;

		[Token(Token = "0x4001C88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float flyingTime;

		[Token(Token = "0x4001C8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		[HideInInspector]
		public Vector3 PreviousPosition;

		[Token(Token = "0x4001C8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[HideInInspector]
		public Transform DummyTransform;

		[Token(Token = "0x4001C8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private Rigidbody rb;

		[Token(Token = "0x4001C8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private InputBridge input;

		[Token(Token = "0x4001C8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private ConfigurableJoint joint;

		[Token(Token = "0x4001C90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[HideInInspector]
		public bool FreshGrip;

		[Token(Token = "0x4001C91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Header("Grabber Events")]
		public GrabbableEvent onGrabEvent;

		[Token(Token = "0x4001C92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public GrabbableEvent onReleaseEvent;

		[Token(Token = "0x4001C93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[HideInInspector]
		public VelocityTracker velocityTracker;

		[Token(Token = "0x1700037B")]
		public bool HoldingItem
		{
			[Token(Token = "0x6001DB9")]
			[Address(RVA = "0xBF6D54", Offset = "0xBF6D54", VA = "0xBF6D54")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700037C")]
		public bool RemoteGrabbingItem
		{
			[Token(Token = "0x6001DBA")]
			[Address(RVA = "0xBF6DB4", Offset = "0xBF6DB4", VA = "0xBF6DB4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x1700037D")]
		public GrabbablesInTrigger GrabsInTrigger
		{
			[Token(Token = "0x6001DBB")]
			[Address(RVA = "0xBF6E14", Offset = "0xBF6E14", VA = "0xBF6E14")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700037E")]
		public Vector3 handsGraphicsGrabberOffset
		{
			[Token(Token = "0x6001DBC")]
			[Address(RVA = "0xBF6E1C", Offset = "0xBF6E1C", VA = "0xBF6E1C")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001DBD")]
			[Address(RVA = "0xBF6E28", Offset = "0xBF6E28", VA = "0xBF6E28")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x1700037F")]
		public Vector3 handsGraphicsGrabberOffsetRotation
		{
			[Token(Token = "0x6001DBE")]
			[Address(RVA = "0xBF6E34", Offset = "0xBF6E34", VA = "0xBF6E34")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6001DBF")]
			[Address(RVA = "0xBF6E40", Offset = "0xBF6E40", VA = "0xBF6E40")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001DC0")]
		[Address(RVA = "0xBF6E4C", Offset = "0xBF6E4C", VA = "0xBF6E4C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001DC1")]
		[Address(RVA = "0xBF72A8", Offset = "0xBF72A8", VA = "0xBF72A8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001DC2")]
		[Address(RVA = "0xBF7450", Offset = "0xBF7450", VA = "0xBF7450")]
		private void updateFreshGrabStatus()
		{
		}

		[Token(Token = "0x6001DC3")]
		[Address(RVA = "0xBF74C4", Offset = "0xBF74C4", VA = "0xBF74C4")]
		private void checkGrabbableEvents()
		{
		}

		[Token(Token = "0x6001DC4")]
		[Address(RVA = "0xBF7B58", Offset = "0xBF7B58", VA = "0xBF7B58", Slot = "4")]
		public virtual bool InputCheckGrab()
		{
			return default(bool);
		}

		[Token(Token = "0x6001DC5")]
		[Address(RVA = "0xBF7C40", Offset = "0xBF7C40", VA = "0xBF7C40", Slot = "5")]
		public virtual bool GetInputDownForGrabbable(Grabbable grabObject)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DC6")]
		[Address(RVA = "0xBF7D24", Offset = "0xBF7D24", VA = "0xBF7D24")]
		private HoldType getHoldType(Grabbable grab)
		{
			return default(HoldType);
		}

		[Token(Token = "0x6001DC7")]
		[Address(RVA = "0xBF7EA8", Offset = "0xBF7EA8", VA = "0xBF7EA8", Slot = "6")]
		public virtual GrabButton GetGrabButton(Grabbable grab)
		{
			return default(GrabButton);
		}

		[Token(Token = "0x6001DC8")]
		[Address(RVA = "0xBF7B7C", Offset = "0xBF7B7C", VA = "0xBF7B7C")]
		private Grabbable getClosestOrRemote()
		{
			return null;
		}

		[Token(Token = "0x6001DC9")]
		[Address(RVA = "0xBF7998", Offset = "0xBF7998", VA = "0xBF7998")]
		private bool inputCheckRelease()
		{
			return default(bool);
		}

		[Token(Token = "0x6001DCA")]
		[Address(RVA = "0xBF7A78", Offset = "0xBF7A78", VA = "0xBF7A78")]
		private float getGrabInput(GrabButton btn)
		{
			return default(float);
		}

		[Token(Token = "0x6001DCB")]
		[Address(RVA = "0xBF7DBC", Offset = "0xBF7DBC", VA = "0xBF7DBC")]
		private bool getToggleInput(GrabButton btn)
		{
			return default(bool);
		}

		[Token(Token = "0x6001DCC")]
		[Address(RVA = "0xBF7F40", Offset = "0xBF7F40", VA = "0xBF7F40", Slot = "7")]
		public virtual bool TryGrab()
		{
			return default(bool);
		}

		[Token(Token = "0x6001DCD")]
		[Address(RVA = "0xBF8080", Offset = "0xBF8080", VA = "0xBF8080", Slot = "8")]
		public virtual void GrabGrabbable(Grabbable item)
		{
		}

		[Token(Token = "0x6001DCE")]
		[Address(RVA = "0xBF81DC", Offset = "0xBF81DC", VA = "0xBF81DC", Slot = "9")]
		public virtual void DidDrop()
		{
		}

		[Token(Token = "0x6001DCF")]
		[Address(RVA = "0xBF82F4", Offset = "0xBF82F4", VA = "0xBF82F4", Slot = "10")]
		public virtual void HideHandGraphics()
		{
		}

		[Token(Token = "0x6001DD0")]
		[Address(RVA = "0xBF8388", Offset = "0xBF8388", VA = "0xBF8388", Slot = "11")]
		public virtual void ResetHandGraphics()
		{
		}

		[Token(Token = "0x6001DD1")]
		[Address(RVA = "0xBF8484", Offset = "0xBF8484", VA = "0xBF8484", Slot = "12")]
		public virtual void TryRelease()
		{
		}

		[Token(Token = "0x6001DD2")]
		[Address(RVA = "0xBF73CC", Offset = "0xBF73CC", VA = "0xBF73CC")]
		private void resetFlyingGrabbable()
		{
		}

		[Token(Token = "0x6001DD3")]
		[Address(RVA = "0xBF8518", Offset = "0xBF8518", VA = "0xBF8518", Slot = "13")]
		public virtual Vector3 GetGrabberAveragedVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001DD4")]
		[Address(RVA = "0xBF8538", Offset = "0xBF8538", VA = "0xBF8538", Slot = "14")]
		public virtual Vector3 GetGrabberAveragedAngularVelocity()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001DD5")]
		[Address(RVA = "0xBF8558", Offset = "0xBF8558", VA = "0xBF8558")]
		public Grabber()
		{
		}
	}
	[Token(Token = "0x2000491")]
	public class GrabPoint : MonoBehaviour
	{
		[Token(Token = "0x4001C94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Pose")]
		public HandPoseId HandPose;

		[Token(Token = "0x4001C95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Can this Grab Point be used by a left-handed Grabber?")]
		[Header("Valid Hands")]
		public bool LeftHandIsValid;

		[Token(Token = "0x4001C96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		[Tooltip("Can this Grab Point be used by a right-handed Grabber?")]
		public bool RightHandIsValid;

		[Token(Token = "0x4001C97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If specified, the Hand Model will be parented here when snapped")]
		[Header("Parent to")]
		public Transform HandPosition;

		[Token(Token = "0x4001C98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Angle Restriction")]
		[Range(0f, 360f)]
		[Tooltip("GrabPoint is not considered valid if the angle between the GrabPoint and Grabber is greater than this amount")]
		public float MaxDegreeDifferenceAllowed;

		[Token(Token = "0x4001C99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Range(0f, 1f)]
		[Header("Finger Blending")]
		[Tooltip("Minimum value Hand Animator will blend to. Example : If IndexBlendMin = 0.4 and Trigger button is not held down, the LayerWeight will be set to 0.4")]
		public float IndexBlendMin;

		[Token(Token = "0x4001C9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Maximum value Hand Animator will blend to. Example : If IndexBlendMax = 0.6 and Trigger button is held all the way down, the LayerWeight will be set to 0.6")]
		[Range(0f, 1f)]
		public float IndexBlendMax;

		[Token(Token = "0x4001C9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Minimum value Hand Animator will blend to if thumb control is not being touched.")]
		[Range(0f, 1f)]
		public float ThumbBlendMin;

		[Token(Token = "0x4001C9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Maximum value Hand Animator will blend to if thumb control is being touched.")]
		[Range(0f, 1f)]
		public float ThumbBlendMax;

		[Token(Token = "0x4001C9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 previewModelOffsetLeft;

		[Token(Token = "0x4001C9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 previewModelOffsetRight;

		[Token(Token = "0x4001C9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Header("Editor")]
		[Tooltip("Show a green arc in the Scene view representing MaxDegreeDifferenceAllowed")]
		public bool ShowAngleGizmo;

		[Token(Token = "0x6001DD6")]
		[Address(RVA = "0xBF857C", Offset = "0xBF857C", VA = "0xBF857C")]
		public void UpdatePreviewTransforms()
		{
		}

		[Token(Token = "0x6001DD7")]
		[Address(RVA = "0xBF8894", Offset = "0xBF8894", VA = "0xBF8894")]
		private void updateChildAnimators()
		{
		}

		[Token(Token = "0x6001DD8")]
		[Address(RVA = "0xBF8938", Offset = "0xBF8938", VA = "0xBF8938")]
		public GrabPoint()
		{
		}
	}
	[Token(Token = "0x2000492")]
	public class HandModelSelector : MonoBehaviour
	{
		[Token(Token = "0x4001CA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Child index of the hand model to use if nothing stored in playerprefs or LoadHandSelectionFromPrefs set to false")]
		public int DefaultHandsModel;

		[Token(Token = "0x4001CA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If true, the selected hand model will be saved and loaded from player prefs")]
		public bool LoadHandSelectionFromPrefs;

		[Token(Token = "0x4001CA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Input used to toggle between hands")]
		public ControllerBinding ToggleHandsInput;

		[Token(Token = "0x4001CA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("This transform holds all of the hand models. Can be used to enabled / disabled various hand options.")]
		public Transform LeftHandGFXHolder;

		[Token(Token = "0x4001CA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("This transform holds all of the hand models. Can be used to enabled / disabled various hand options")]
		public Transform RightHandGFXHolder;

		[Token(Token = "0x4001CA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private int _selectedHandGFX;

		[Token(Token = "0x4001CA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Used for IK Hands / Body option")]
		public CharacterIK IKBody;

		[Token(Token = "0x4001CA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private UIPointer uiPoint;

		[Token(Token = "0x6001DD9")]
		[Address(RVA = "0xBF8978", Offset = "0xBF8978", VA = "0xBF8978")]
		private void Start()
		{
		}

		[Token(Token = "0x6001DDA")]
		[Address(RVA = "0xBF8E60", Offset = "0xBF8E60", VA = "0xBF8E60")]
		private void Update()
		{
		}

		[Token(Token = "0x6001DDB")]
		[Address(RVA = "0xBF8A00", Offset = "0xBF8A00", VA = "0xBF8A00")]
		public void ChangeHandsModel(int childIndex, bool save = false)
		{
		}

		[Token(Token = "0x6001DDC")]
		[Address(RVA = "0xBF8E98", Offset = "0xBF8E98", VA = "0xBF8E98")]
		public HandModelSelector()
		{
		}
	}
	[Token(Token = "0x2000493")]
	public class HeadCollisionFade : MonoBehaviour
	{
		[Token(Token = "0x4001CA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private ScreenFader fader;

		[Token(Token = "0x4001CA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float FadeDistance;

		[Token(Token = "0x4001CAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float FadeOutDistance;

		[Token(Token = "0x4001CAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float MinFade;

		[Token(Token = "0x4001CAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float MaxFade;

		[Token(Token = "0x4001CAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float FadeSpeed;

		[Token(Token = "0x4001CAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Only fade the screen if the HMD is registering as Active")]
		public bool CheckOnlyIfHMDActive;

		[Token(Token = "0x4001CAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		public bool IgnoreHeldGrabbables;

		[Token(Token = "0x4001CB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform DistanceTransform;

		[Token(Token = "0x4001CB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int cols;

		[Token(Token = "0x4001CB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float currentFade;

		[Token(Token = "0x4001CB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float lastFade;

		[Token(Token = "0x4001CB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<Collider> collisions;

		[Token(Token = "0x6001DDD")]
		[Address(RVA = "0xBF8EB0", Offset = "0xBF8EB0", VA = "0xBF8EB0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001DDE")]
		[Address(RVA = "0xBF8F5C", Offset = "0xBF8F5C", VA = "0xBF8F5C")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001DDF")]
		[Address(RVA = "0xBF9210", Offset = "0xBF9210", VA = "0xBF9210")]
		private void OnCollisionEnter(Collision col)
		{
		}

		[Token(Token = "0x6001DE0")]
		[Address(RVA = "0xBF94A8", Offset = "0xBF94A8", VA = "0xBF94A8")]
		private void OnCollisionExit(Collision col)
		{
		}

		[Token(Token = "0x6001DE1")]
		[Address(RVA = "0xBF95A8", Offset = "0xBF95A8", VA = "0xBF95A8")]
		public HeadCollisionFade()
		{
		}
	}
	[Token(Token = "0x2000494")]
	public class HingeHelper : GrabbableEvents
	{
		[Token(Token = "0x4001CB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("If True the SnapGraphics tranfsorm will have its local Y rotation snapped to the nearest degrees specified in SnapDegrees")]
		public bool SnapToDegrees;

		[Token(Token = "0x4001CB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Snap the Y rotation to the nearest")]
		public float SnapDegrees;

		[Token(Token = "0x4001CB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("The Transform of the object to be rotated if SnapToDegrees is true")]
		public Transform SnapGraphics;

		[Token(Token = "0x4001CB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Play this sound on snap")]
		public AudioClip SnapSound;

		[Token(Token = "0x4001CB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Randomize pitch of SnapSound by this amount")]
		public float RandomizePitch;

		[Token(Token = "0x4001CBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Add haptics amount (0-1) to controller if SnapToDegrees is True. Set this to 0 for no Haptics.")]
		public float SnapHaptics;

		[Token(Token = "0x4001CBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Text LabelToUpdate;

		[Token(Token = "0x4001CBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public FloatEvent onHingeChange;

		[Token(Token = "0x4001CBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public FloatEvent onHingeSnapChange;

		[Token(Token = "0x4001CBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Rigidbody rigid;

		[Token(Token = "0x4001CBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float _lastDegrees;

		[Token(Token = "0x4001CC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		private float _lastSnapDegrees;

		[Token(Token = "0x6001DE2")]
		[Address(RVA = "0xBF95CC", Offset = "0xBF95CC", VA = "0xBF95CC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001DE3")]
		[Address(RVA = "0xBF961C", Offset = "0xBF961C", VA = "0xBF961C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001DE4")]
		[Address(RVA = "0xBF98B8", Offset = "0xBF98B8", VA = "0xBF98B8")]
		public void OnSnapChange(float yAngle)
		{
		}

		[Token(Token = "0x6001DE5")]
		[Address(RVA = "0xBF9C3C", Offset = "0xBF9C3C", VA = "0xBF9C3C", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x6001DE6")]
		[Address(RVA = "0xBF984C", Offset = "0xBF984C", VA = "0xBF984C")]
		public void OnHingeChange(float hingeAmount)
		{
		}

		[Token(Token = "0x6001DE7")]
		[Address(RVA = "0xBF9828", Offset = "0xBF9828", VA = "0xBF9828")]
		private float getSmoothedValue(float val)
		{
			return default(float);
		}

		[Token(Token = "0x6001DE8")]
		[Address(RVA = "0xBF9CE8", Offset = "0xBF9CE8", VA = "0xBF9CE8")]
		public HingeHelper()
		{
		}
	}
	[Token(Token = "0x2000495")]
	public enum ControllerHand
	{
		[Token(Token = "0x4001CC2")]
		Left,
		[Token(Token = "0x4001CC3")]
		Right,
		[Token(Token = "0x4001CC4")]
		None
	}
	[Token(Token = "0x2000496")]
	public enum ControllerBinding
	{
		[Token(Token = "0x4001CC6")]
		None,
		[Token(Token = "0x4001CC7")]
		AButton,
		[Token(Token = "0x4001CC8")]
		AButtonDown,
		[Token(Token = "0x4001CC9")]
		BButton,
		[Token(Token = "0x4001CCA")]
		BButtonDown,
		[Token(Token = "0x4001CCB")]
		XButton,
		[Token(Token = "0x4001CCC")]
		XButtonDown,
		[Token(Token = "0x4001CCD")]
		YButton,
		[Token(Token = "0x4001CCE")]
		YButtonDown,
		[Token(Token = "0x4001CCF")]
		LeftTrigger,
		[Token(Token = "0x4001CD0")]
		LeftTriggerDown,
		[Token(Token = "0x4001CD1")]
		LeftGrip,
		[Token(Token = "0x4001CD2")]
		LeftGripDown,
		[Token(Token = "0x4001CD3")]
		LeftThumbstick,
		[Token(Token = "0x4001CD4")]
		LeftThumbstickDown,
		[Token(Token = "0x4001CD5")]
		RightTrigger,
		[Token(Token = "0x4001CD6")]
		RightTriggerDown,
		[Token(Token = "0x4001CD7")]
		RightGrip,
		[Token(Token = "0x4001CD8")]
		RightGripDown,
		[Token(Token = "0x4001CD9")]
		RightThumbstick,
		[Token(Token = "0x4001CDA")]
		RightThumbstickDown,
		[Token(Token = "0x4001CDB")]
		StartButton,
		[Token(Token = "0x4001CDC")]
		StartButtonDown,
		[Token(Token = "0x4001CDD")]
		BackButton,
		[Token(Token = "0x4001CDE")]
		BackButtonDown
	}
	[Token(Token = "0x2000497")]
	public enum GrabbedControllerBinding
	{
		[Token(Token = "0x4001CE0")]
		None,
		[Token(Token = "0x4001CE1")]
		Button1,
		[Token(Token = "0x4001CE2")]
		Button1Down,
		[Token(Token = "0x4001CE3")]
		Button2,
		[Token(Token = "0x4001CE4")]
		Button2Down,
		[Token(Token = "0x4001CE5")]
		Trigger,
		[Token(Token = "0x4001CE6")]
		TriggerDown,
		[Token(Token = "0x4001CE7")]
		Grip,
		[Token(Token = "0x4001CE8")]
		GripDown
	}
	[Token(Token = "0x2000498")]
	public enum InputAxis
	{
		[Token(Token = "0x4001CEA")]
		None,
		[Token(Token = "0x4001CEB")]
		LeftThumbStickAxis,
		[Token(Token = "0x4001CEC")]
		LeftTouchPadAxis,
		[Token(Token = "0x4001CED")]
		RightThumbStickAxis,
		[Token(Token = "0x4001CEE")]
		RightTouchPadAxis
	}
	[Token(Token = "0x2000499")]
	public enum ControllerType
	{
		[Token(Token = "0x4001CF0")]
		None,
		[Token(Token = "0x4001CF1")]
		Unknown,
		[Token(Token = "0x4001CF2")]
		OculusTouch,
		[Token(Token = "0x4001CF3")]
		Wand,
		[Token(Token = "0x4001CF4")]
		Knuckles
	}
	[Token(Token = "0x200049A")]
	public enum HandControl
	{
		[Token(Token = "0x4001CF6")]
		LeftGrip,
		[Token(Token = "0x4001CF7")]
		RightGrip,
		[Token(Token = "0x4001CF8")]
		LeftTrigger,
		[Token(Token = "0x4001CF9")]
		RightTrigger,
		[Token(Token = "0x4001CFA")]
		None
	}
	[Token(Token = "0x200049B")]
	public enum GrabButton
	{
		[Token(Token = "0x4001CFC")]
		Grip,
		[Token(Token = "0x4001CFD")]
		Trigger,
		[Token(Token = "0x4001CFE")]
		Inherit
	}
	[Token(Token = "0x200049C")]
	public enum HoldType
	{
		[Token(Token = "0x4001D00")]
		HoldDown,
		[Token(Token = "0x4001D01")]
		Toggle,
		[Token(Token = "0x4001D02")]
		Inherit
	}
	[Token(Token = "0x200049D")]
	public enum XRInputSource
	{
		[Token(Token = "0x4001D04")]
		XRInput,
		[Token(Token = "0x4001D05")]
		OVRInput,
		[Token(Token = "0x4001D06")]
		SteamVR,
		[Token(Token = "0x4001D07")]
		Pico,
		[Token(Token = "0x4001D08")]
		UnityInput
	}
	[Token(Token = "0x200049E")]
	public enum SDKProvider
	{
		[Token(Token = "0x4001D0A")]
		Unknown,
		[Token(Token = "0x4001D0B")]
		OculusSDK,
		[Token(Token = "0x4001D0C")]
		OpenVR
	}
	[Token(Token = "0x200049F")]
	public class InputBridge : MonoBehaviour
	{
		[Token(Token = "0x20004A0")]
		public delegate void InputsUpdatedAction();

		[Token(Token = "0x20004A1")]
		public delegate void ControllerFoundAction();

		[Token(Token = "0x20004A2")]
		[CompilerGenerated]
		private sealed class <changeOriginModeRoutine>d__167 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D68")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D69")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001D6A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public InputBridge <>4__this;

			[Token(Token = "0x4001D6B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public TrackingOriginModeFlags trackingOrigin;

			[Token(Token = "0x17000388")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001E3B")]
				[Address(RVA = "0xBFDD70", Offset = "0xBFDD70", VA = "0xBFDD70", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000389")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001E3D")]
				[Address(RVA = "0xBFDDB8", Offset = "0xBFDDB8", VA = "0xBFDDB8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001E38")]
			[Address(RVA = "0xBFD764", Offset = "0xBFD764", VA = "0xBFD764")]
			[DebuggerHidden]
			public <changeOriginModeRoutine>d__167(int <>1__state)
			{
			}

			[Token(Token = "0x6001E39")]
			[Address(RVA = "0xBFDAD4", Offset = "0xBFDAD4", VA = "0xBFDAD4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001E3A")]
			[Address(RVA = "0xBFDAD8", Offset = "0xBFDAD8", VA = "0xBFDAD8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001E3C")]
			[Address(RVA = "0xBFDD78", Offset = "0xBFDD78", VA = "0xBFDD78", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20004A3")]
		[CompilerGenerated]
		private sealed class <Vibrate>d__169 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001D6C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001D6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001D6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float duration;

			[Token(Token = "0x1700038A")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001E41")]
				[Address(RVA = "0xBFDE64", Offset = "0xBFDE64", VA = "0xBFDE64", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700038B")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001E43")]
				[Address(RVA = "0xBFDEAC", Offset = "0xBFDEAC", VA = "0xBFDEAC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001E3E")]
			[Address(RVA = "0xBFD7FC", Offset = "0xBFD7FC", VA = "0xBFD7FC")]
			[DebuggerHidden]
			public <Vibrate>d__169(int <>1__state)
			{
			}

			[Token(Token = "0x6001E3F")]
			[Address(RVA = "0xBFDDC0", Offset = "0xBFDDC0", VA = "0xBFDDC0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001E40")]
			[Address(RVA = "0xBFDDC4", Offset = "0xBFDDC4", VA = "0xBFDDC4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001E42")]
			[Address(RVA = "0xBFDE6C", Offset = "0xBFDE6C", VA = "0xBFDE6C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001D0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static InputBridge _instance;

		[Token(Token = "0x4001D0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Input Settings")]
		[SerializeField]
		public XRInputSource InputSource;

		[Token(Token = "0x4001D0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Tooltip("Specify an InputActionSet for when using the Unity Input system. These actions will be enabled on load.")]
		public InputActionAsset actionSet;

		[Token(Token = "0x4001D10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Set the TrackingOriginModeFlags on device connect. Should typically be set to 'Floor'")]
		[SerializeField]
		[Header("Tracking Origin")]
		public TrackingOriginModeFlags TrackingOrigin;

		[Token(Token = "0x4001D11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Thumbstick X must be greater than this amount to be considered valid")]
		[Header("Thumbstick Deadzone")]
		public float ThumbstickDeadzoneX;

		[Token(Token = "0x4001D12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Thumbstick Y must be greater than this amount to be considered valid")]
		public float ThumbstickDeadzoneY;

		[Token(Token = "0x4001D13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Header("Grip")]
		public float LeftGrip;

		[Token(Token = "0x4001D14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool LeftGripDown;

		[Token(Token = "0x4001D15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float RightGrip;

		[Token(Token = "0x4001D16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public bool RightGripDown;

		[Token(Token = "0x4001D17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Header("Trigger")]
		public float LeftTrigger;

		[Token(Token = "0x4001D18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool LeftTriggerNear;

		[Token(Token = "0x4001D19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x49")]
		public bool LeftTriggerUp;

		[Token(Token = "0x4001D1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4A")]
		public bool LeftTriggerDown;

		[Token(Token = "0x4001D1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float RightTrigger;

		[Token(Token = "0x4001D1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool RightTriggerUp;

		[Token(Token = "0x4001D1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool RightTriggerDown;

		[Token(Token = "0x4001D1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		public bool RightTriggerNear;

		[Token(Token = "0x4001D1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		public bool LeftThumbNear;

		[Token(Token = "0x4001D20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool RightThumbNear;

		[Token(Token = "0x4001D21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		[Header("Thumbstick")]
		public bool LeftThumbstickDown;

		[Token(Token = "0x4001D22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
		public bool LeftThumbstickUp;

		[Token(Token = "0x4001D23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x57")]
		public bool RightThumbstickDown;

		[Token(Token = "0x4001D24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool RightThumbstickUp;

		[Token(Token = "0x4001D25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		public bool LeftThumbstick;

		[Token(Token = "0x4001D26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		public bool RightThumbstick;

		[Token(Token = "0x4001D27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5B")]
		[Header("Buttons")]
		public bool AButton;

		[Token(Token = "0x4001D28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Returns true if the A Button was pressed down this frame but not last")]
		public bool AButtonDown;

		[Token(Token = "0x4001D29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5D")]
		public bool AButtonUp;

		[Token(Token = "0x4001D2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5E")]
		public bool BButton;

		[Token(Token = "0x4001D2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5F")]
		[Tooltip("Returns true if the B Button was pressed down this frame but not last")]
		public bool BButtonDown;

		[Token(Token = "0x4001D2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public bool BButtonUp;

		[Token(Token = "0x4001D2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		public bool XButton;

		[Token(Token = "0x4001D2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x62")]
		[Tooltip("Returns true if the X Button was pressed down this frame but not last")]
		public bool XButtonDown;

		[Token(Token = "0x4001D2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x63")]
		public bool XButtonUp;

		[Token(Token = "0x4001D30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public bool YButton;

		[Token(Token = "0x4001D31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		public bool YButtonDown;

		[Token(Token = "0x4001D32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x66")]
		public bool YButtonUp;

		[Token(Token = "0x4001D33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x67")]
		public bool StartButton;

		[Token(Token = "0x4001D34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public bool StartButtonDown;

		[Token(Token = "0x4001D35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool BackButton;

		[Token(Token = "0x4001D36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		public bool BackButtonDown;

		[Token(Token = "0x4001D37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Header("Axis")]
		public Vector2 LeftThumbstickAxis;

		[Token(Token = "0x4001D38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public Vector2 RightThumbstickAxis;

		[Token(Token = "0x4001D39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public Vector2 LeftTouchPadAxis;

		[Token(Token = "0x4001D3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public Vector2 RightTouchPadAxis;

		[Token(Token = "0x4001D3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float _downThreshold;

		[Token(Token = "0x4001D3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool SteamVRSupport;

		[Token(Token = "0x4001D3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Header("HMD / Hardware")]
		public ControllerType ConnectedControllerType;

		[Token(Token = "0x4001D3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Is there an HMD present and in use.")]
		public bool HMDActive;

		[Token(Token = "0x4001D45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA5")]
		[Tooltip("Returns true if the controller has both a Touchpad and a Joystick. Currently on the Valve Index has both.")]
		public bool SupportsBothTouchPadAndJoystick;

		[Token(Token = "0x4001D46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA6")]
		[Tooltip("Returns true if the controllers support the 'indexTouch' XR input mapping. Currently only Oculus devices on the Oculus SDK support thumb touch. OpenVR is not supported.")]
		public bool SupportsIndexTouch;

		[Token(Token = "0x4001D47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA7")]
		[Tooltip("Returns true if the controllers support the 'ThumbTouch' (or near thumbstick) XR input mapping. Currently only Oculus devices on the Oculus SDK support thumb touch. OpenVR is not supported.")]
		public bool SupportsThumbTouch;

		[Token(Token = "0x4001D48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		private static List<UnityEngine.XR.InputDevice> devices;

		[Token(Token = "0x4001D4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private InputAction leftGrip;

		[Token(Token = "0x4001D4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private InputAction leftTrigger;

		[Token(Token = "0x4001D4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private InputAction leftTriggerNear;

		[Token(Token = "0x4001D4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private InputAction rightGrip;

		[Token(Token = "0x4001D4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private InputAction rightTrigger;

		[Token(Token = "0x4001D50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private InputAction rightTriggerNear;

		[Token(Token = "0x4001D51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private InputAction leftThumbstick;

		[Token(Token = "0x4001D52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private InputAction leftThumbstickDown;

		[Token(Token = "0x4001D53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private InputAction leftThumbNear;

		[Token(Token = "0x4001D54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		private InputAction leftTouchpad;

		[Token(Token = "0x4001D55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private InputAction leftTouchpadDown;

		[Token(Token = "0x4001D56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		private InputAction rightThumbstick;

		[Token(Token = "0x4001D57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		private InputAction rightThumbstickDown;

		[Token(Token = "0x4001D58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		private InputAction rightThumbNear;

		[Token(Token = "0x4001D59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		private InputAction rightTouchpad;

		[Token(Token = "0x4001D5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		private InputAction rightTouchpadDown;

		[Token(Token = "0x4001D5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		private InputAction aButton;

		[Token(Token = "0x4001D5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private InputAction bButton;

		[Token(Token = "0x4001D5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private InputAction xButton;

		[Token(Token = "0x4001D5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private InputAction yButton;

		[Token(Token = "0x4001D5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private InputAction startButton;

		[Token(Token = "0x4001D60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		private InputAction backButton;

		[Token(Token = "0x4001D61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		[HideInInspector]
		public bool ShowInputDebugger;

		[Token(Token = "0x4001D62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private UnityEngine.XR.InputDevice primaryLeftController;

		[Token(Token = "0x4001D63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private UnityEngine.XR.InputDevice primaryRightController;

		[Token(Token = "0x4001D64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		private InputFeatureUsage<Vector2> thumbstickAxis;

		[Token(Token = "0x4001D65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		private InputFeatureUsage<Vector2> thumbstickAxisSecondary;

		[Token(Token = "0x4001D66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		private InputFeatureUsage<bool> thumbstickAxisClick;

		[Token(Token = "0x4001D67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		private bool setTrackingOrigin;

		[Token(Token = "0x17000380")]
		public static InputBridge Instance
		{
			[Token(Token = "0x6001DE9")]
			[Address(RVA = "0xBF4FB0", Offset = "0xBF4FB0", VA = "0xBF4FB0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000381")]
		public float DownThreshold
		{
			[Token(Token = "0x6001DEA")]
			[Address(RVA = "0xBF9D04", Offset = "0xBF9D04", VA = "0xBF9D04")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000382")]
		public SDKProvider LoadedSDK
		{
			[Token(Token = "0x6001DEB")]
			[Address(RVA = "0xBF9D0C", Offset = "0xBF9D0C", VA = "0xBF9D0C")]
			[CompilerGenerated]
			get
			{
				return default(SDKProvider);
			}
			[Token(Token = "0x6001DEC")]
			[Address(RVA = "0xBF9D14", Offset = "0xBF9D14", VA = "0xBF9D14")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000383")]
		public bool IsOculusDevice
		{
			[Token(Token = "0x6001DED")]
			[Address(RVA = "0xBF9D1C", Offset = "0xBF9D1C", VA = "0xBF9D1C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001DEE")]
			[Address(RVA = "0xBF9D24", Offset = "0xBF9D24", VA = "0xBF9D24")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000384")]
		public bool IsOculusQuest
		{
			[Token(Token = "0x6001DEF")]
			[Address(RVA = "0xBF9D30", Offset = "0xBF9D30", VA = "0xBF9D30")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001DF0")]
			[Address(RVA = "0xBF9D38", Offset = "0xBF9D38", VA = "0xBF9D38")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000385")]
		public bool IsHTCDevice
		{
			[Token(Token = "0x6001DF1")]
			[Address(RVA = "0xBF9D44", Offset = "0xBF9D44", VA = "0xBF9D44")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001DF2")]
			[Address(RVA = "0xBF9D4C", Offset = "0xBF9D4C", VA = "0xBF9D4C")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000386")]
		public bool IsPicoDevice
		{
			[Token(Token = "0x6001DF3")]
			[Address(RVA = "0xBF9D58", Offset = "0xBF9D58", VA = "0xBF9D58")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001DF4")]
			[Address(RVA = "0xBF9D60", Offset = "0xBF9D60", VA = "0xBF9D60")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x17000387")]
		public bool IsValveIndexController
		{
			[Token(Token = "0x6001DF5")]
			[Address(RVA = "0xBF9D6C", Offset = "0xBF9D6C", VA = "0xBF9D6C")]
			[CompilerGenerated]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6001DF6")]
			[Address(RVA = "0xBF9D74", Offset = "0xBF9D74", VA = "0xBF9D74")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x14000016")]
		public static event InputsUpdatedAction OnInputsUpdated
		{
			[Token(Token = "0x6001DF7")]
			[Address(RVA = "0xBF9D80", Offset = "0xBF9D80", VA = "0xBF9D80")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001DF8")]
			[Address(RVA = "0xBF9E5C", Offset = "0xBF9E5C", VA = "0xBF9E5C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000017")]
		public static event ControllerFoundAction OnControllerFound
		{
			[Token(Token = "0x6001DF9")]
			[Address(RVA = "0xBF9F38", Offset = "0xBF9F38", VA = "0xBF9F38")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001DFA")]
			[Address(RVA = "0xBFA014", Offset = "0xBFA014", VA = "0xBFA014")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001DFB")]
		[Address(RVA = "0xBFA0F0", Offset = "0xBFA0F0", VA = "0xBFA0F0")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001DFC")]
		[Address(RVA = "0xBFA418", Offset = "0xBFA418", VA = "0xBFA418")]
		private void Start()
		{
		}

		[Token(Token = "0x6001DFD")]
		[Address(RVA = "0xBFA42C", Offset = "0xBFA42C", VA = "0xBFA42C")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001DFE")]
		[Address(RVA = "0xBFA52C", Offset = "0xBFA52C", VA = "0xBFA52C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001DFF")]
		[Address(RVA = "0xBFA61C", Offset = "0xBFA61C", VA = "0xBFA61C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001E00")]
		[Address(RVA = "0xBFA648", Offset = "0xBFA648", VA = "0xBFA648", Slot = "4")]
		public virtual void UpdateInputs()
		{
		}

		[Token(Token = "0x6001E01")]
		[Address(RVA = "0xBFA72C", Offset = "0xBFA72C", VA = "0xBFA72C", Slot = "5")]
		public virtual void UpdateSteamInput()
		{
		}

		[Token(Token = "0x6001E02")]
		[Address(RVA = "0xBFA730", Offset = "0xBFA730", VA = "0xBFA730", Slot = "6")]
		public virtual void UpdateXRInput()
		{
		}

		[Token(Token = "0x6001E03")]
		[Address(RVA = "0xBFB478", Offset = "0xBFB478", VA = "0xBFB478", Slot = "7")]
		public virtual void UpdateUnityInput()
		{
		}

		[Token(Token = "0x6001E04")]
		[Address(RVA = "0xBFB8C0", Offset = "0xBFB8C0", VA = "0xBFB8C0", Slot = "8")]
		public virtual void CreateUnityInputActions()
		{
		}

		[Token(Token = "0x6001E05")]
		[Address(RVA = "0xBFBECC", Offset = "0xBFBECC", VA = "0xBFBECC", Slot = "9")]
		public virtual void EnableActions()
		{
		}

		[Token(Token = "0x6001E06")]
		[Address(RVA = "0xBFC2E0", Offset = "0xBFC2E0", VA = "0xBFC2E0", Slot = "10")]
		public virtual void DisableActions()
		{
		}

		[Token(Token = "0x6001E07")]
		[Address(RVA = "0xBFBE34", Offset = "0xBFBE34", VA = "0xBFBE34")]
		public InputAction CreateInputAction(string actionName, string binding, bool valueType)
		{
			return null;
		}

		[Token(Token = "0x6001E08")]
		[Address(RVA = "0xBFC6F4", Offset = "0xBFC6F4", VA = "0xBFC6F4", Slot = "11")]
		public virtual void UpdateOVRInput()
		{
		}

		[Token(Token = "0x6001E09")]
		[Address(RVA = "0xBFC768", Offset = "0xBFC768", VA = "0xBFC768", Slot = "12")]
		public virtual void UpdatePicoInput()
		{
		}

		[Token(Token = "0x6001E0A")]
		[Address(RVA = "0xBFC76C", Offset = "0xBFC76C", VA = "0xBFC76C", Slot = "13")]
		public virtual void UpdateDeviceActive()
		{
		}

		[Token(Token = "0x6001E0B")]
		[Address(RVA = "0xBFB398", Offset = "0xBFB398", VA = "0xBFB398")]
		private float correctValue(float inputValue)
		{
			return default(float);
		}

		[Token(Token = "0x6001E0C")]
		[Address(RVA = "0xBFC8F0", Offset = "0xBFC8F0", VA = "0xBFC8F0")]
		public bool GetControllerBindingValue(ControllerBinding val)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E0D")]
		[Address(RVA = "0xBFCA38", Offset = "0xBFCA38", VA = "0xBFCA38")]
		public bool GetGrabbedControllerBinding(GrabbedControllerBinding val, ControllerHand hand)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E0E")]
		[Address(RVA = "0xBFCB50", Offset = "0xBFCB50", VA = "0xBFCB50")]
		public Vector2 GetInputAxisValue(InputAxis val)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001E0F")]
		[Address(RVA = "0xBFB330", Offset = "0xBFB330", VA = "0xBFB330")]
		private Vector2 ApplyDeadZones(Vector2 pos, float deadZoneX, float deadZoneY)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001E10")]
		[Address(RVA = "0xBFCBEC", Offset = "0xBFCBEC", VA = "0xBFCBEC")]
		private void onDeviceChanged(UnityEngine.XR.InputDevice inputDevice)
		{
		}

		[Token(Token = "0x6001E11")]
		[Address(RVA = "0xBFA26C", Offset = "0xBFA26C", VA = "0xBFA26C")]
		private void setDeviceProperties()
		{
		}

		[Token(Token = "0x6001E12")]
		[Address(RVA = "0xBFCC14", Offset = "0xBFCC14", VA = "0xBFCC14", Slot = "14")]
		public virtual bool GetSupportsIndexTouch()
		{
			return default(bool);
		}

		[Token(Token = "0x6001E13")]
		[Address(RVA = "0xBFCC34", Offset = "0xBFCC34", VA = "0xBFCC34", Slot = "15")]
		public virtual SDKProvider GetLoadedSDK()
		{
			return default(SDKProvider);
		}

		[Token(Token = "0x6001E14")]
		[Address(RVA = "0xBFCCDC", Offset = "0xBFCCDC", VA = "0xBFCCDC", Slot = "16")]
		public virtual bool GetSupportsThumbTouch()
		{
			return default(bool);
		}

		[Token(Token = "0x6001E15")]
		[Address(RVA = "0xBFCCFC", Offset = "0xBFCCFC", VA = "0xBFCCFC", Slot = "17")]
		public virtual bool GetIsOculusDevice()
		{
			return default(bool);
		}

		[Token(Token = "0x6001E16")]
		[Address(RVA = "0xBFCDB8", Offset = "0xBFCDB8", VA = "0xBFCDB8", Slot = "18")]
		public virtual bool GetIsOculusQuest()
		{
			return default(bool);
		}

		[Token(Token = "0x6001E17")]
		[Address(RVA = "0xBFCEC0", Offset = "0xBFCEC0", VA = "0xBFCEC0", Slot = "19")]
		public virtual bool GetIsHTCDevice()
		{
			return default(bool);
		}

		[Token(Token = "0x6001E18")]
		[Address(RVA = "0xBFCF50", Offset = "0xBFCF50", VA = "0xBFCF50", Slot = "20")]
		public virtual bool GetIsPicoDevice()
		{
			return default(bool);
		}

		[Token(Token = "0x6001E19")]
		[Address(RVA = "0xBFC820", Offset = "0xBFC820", VA = "0xBFC820")]
		public UnityEngine.XR.InputDevice GetHMD()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x6001E1A")]
		[Address(RVA = "0xBFCFC4", Offset = "0xBFCFC4", VA = "0xBFCFC4")]
		public string GetHMDName()
		{
			return null;
		}

		[Token(Token = "0x6001E1B")]
		[Address(RVA = "0xBFCFEC", Offset = "0xBFCFEC", VA = "0xBFCFEC")]
		public Vector3 GetHMDLocalPosition()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001E1C")]
		[Address(RVA = "0xBFD078", Offset = "0xBFD078", VA = "0xBFD078")]
		public Quaternion GetHMDLocalRotation()
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001E1D")]
		[Address(RVA = "0xBFB128", Offset = "0xBFB128", VA = "0xBFB128")]
		public UnityEngine.XR.InputDevice GetLeftController()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x6001E1E")]
		[Address(RVA = "0xBFB1F8", Offset = "0xBFB1F8", VA = "0xBFB1F8")]
		public UnityEngine.XR.InputDevice GetRightController()
		{
			return default(UnityEngine.XR.InputDevice);
		}

		[Token(Token = "0x6001E1F")]
		[Address(RVA = "0xBFD100", Offset = "0xBFD100", VA = "0xBFD100")]
		public Vector3 GetControllerLocalPosition(ControllerHand handSide)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001E20")]
		[Address(RVA = "0xBFD1E8", Offset = "0xBFD1E8", VA = "0xBFD1E8")]
		public Quaternion GetControllerLocalRotation(ControllerHand handSide)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6001E21")]
		[Address(RVA = "0xBFD2C4", Offset = "0xBFD2C4", VA = "0xBFD2C4", Slot = "21")]
		public virtual ControllerType GetControllerType()
		{
			return default(ControllerType);
		}

		[Token(Token = "0x6001E22")]
		[Address(RVA = "0xBFD2F8", Offset = "0xBFD2F8", VA = "0xBFD2F8")]
		public Vector3 GetControllerVelocity(ControllerHand hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001E23")]
		[Address(RVA = "0xBFD3D4", Offset = "0xBFD3D4", VA = "0xBFD3D4")]
		public Vector3 GetControllerAngularVelocity(ControllerHand hand)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001E24")]
		[Address(RVA = "0xBFD474", Offset = "0xBFD474", VA = "0xBFD474", Slot = "22")]
		public virtual string GetControllerName()
		{
			return null;
		}

		[Token(Token = "0x6001E25")]
		[Address(RVA = "0xBFD5CC", Offset = "0xBFD5CC", VA = "0xBFD5CC", Slot = "23")]
		public virtual bool GetIsValveIndexController()
		{
			return default(bool);
		}

		[Token(Token = "0x6001E26")]
		[Address(RVA = "0xBFB350", Offset = "0xBFB350", VA = "0xBFB350")]
		private float getFeatureUsage(UnityEngine.XR.InputDevice device, InputFeatureUsage<float> usage, bool clamp = true)
		{
			return default(float);
		}

		[Token(Token = "0x6001E27")]
		[Address(RVA = "0xBFB2C8", Offset = "0xBFB2C8", VA = "0xBFB2C8")]
		private bool getFeatureUsage(UnityEngine.XR.InputDevice device, InputFeatureUsage<bool> usage)
		{
			return default(bool);
		}

		[Token(Token = "0x6001E28")]
		[Address(RVA = "0xBFB2FC", Offset = "0xBFB2FC", VA = "0xBFB2FC")]
		private Vector2 getFeatureUsage(UnityEngine.XR.InputDevice device, InputFeatureUsage<Vector2> usage)
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001E29")]
		[Address(RVA = "0xBFD398", Offset = "0xBFD398", VA = "0xBFD398")]
		private Vector3 getFeatureUsage(UnityEngine.XR.InputDevice device, InputFeatureUsage<Vector3> usage)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001E2A")]
		[Address(RVA = "0xBFD6CC", Offset = "0xBFD6CC", VA = "0xBFD6CC", Slot = "24")]
		public virtual void SetTrackingOriginMode(TrackingOriginModeFlags trackingOrigin)
		{
		}

		[Token(Token = "0x6001E2B")]
		[Address(RVA = "0xBFD6EC", Offset = "0xBFD6EC", VA = "0xBFD6EC")]
		[IteratorStateMachine(typeof(<changeOriginModeRoutine>d__167))]
		private IEnumerator changeOriginModeRoutine(TrackingOriginModeFlags trackingOrigin)
		{
			return null;
		}

		[Token(Token = "0x6001E2C")]
		[Address(RVA = "0xBF9A70", Offset = "0xBF9A70", VA = "0xBF9A70")]
		public void VibrateController(float frequency, float amplitude, float duration, ControllerHand hand)
		{
		}

		[Token(Token = "0x6001E2D")]
		[Address(RVA = "0xBFD78C", Offset = "0xBFD78C", VA = "0xBFD78C")]
		[IteratorStateMachine(typeof(<Vibrate>d__169))]
		private IEnumerator Vibrate(float frequency, float amplitude, float duration, ControllerHand hand)
		{
			return null;
		}

		[Token(Token = "0x6001E2E")]
		[Address(RVA = "0xBFD824", Offset = "0xBFD824", VA = "0xBFD824")]
		public InputBridge()
		{
		}
	}
	[Token(Token = "0x20004A4")]
	public class JoystickControl : MonoBehaviour
	{
		[Token(Token = "0x4001D6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Any values below this threshold will not be passed to events")]
		[Header("Deadzone")]
		public float DeadZone;

		[Token(Token = "0x4001D70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float MinDegrees;

		[Token(Token = "0x4001D71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float MaxDegrees;

		[Token(Token = "0x4001D72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float LeverPercentageX;

		[Token(Token = "0x4001D73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float LeverPercentageY;

		[Token(Token = "0x4001D74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public Vector2 LeverVector;

		[Token(Token = "0x4001D75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public bool UseSmoothLook;

		[Token(Token = "0x4001D76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float SmoothLookSpeed;

		[Token(Token = "0x4001D77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public bool KinematicWhileInactive;

		[Token(Token = "0x4001D78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public FloatFloatEvent onJoystickChange;

		[Token(Token = "0x4001D79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector2Event onJoystickVectorChange;

		[Token(Token = "0x4001D7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Grabbable grab;

		[Token(Token = "0x4001D7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody rb;

		[Token(Token = "0x4001D7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 currentRotation;

		[Token(Token = "0x4001D7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float angleX;

		[Token(Token = "0x4001D7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float angleY;

		[Token(Token = "0x6001E44")]
		[Address(RVA = "0xBFDEB4", Offset = "0xBFDEB4", VA = "0xBFDEB4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E45")]
		[Address(RVA = "0xBFDF30", Offset = "0xBFDF30", VA = "0xBFDF30")]
		private void Update()
		{
		}

		[Token(Token = "0x6001E46")]
		[Address(RVA = "0xBFE250", Offset = "0xBFE250", VA = "0xBFE250")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001E47")]
		[Address(RVA = "0xBFE254", Offset = "0xBFE254", VA = "0xBFE254")]
		private void doJoystickLook()
		{
		}

		[Token(Token = "0x6001E48")]
		[Address(RVA = "0xBFE61C", Offset = "0xBFE61C", VA = "0xBFE61C", Slot = "4")]
		public virtual void OnJoystickChange(float leverX, float leverY)
		{
		}

		[Token(Token = "0x6001E49")]
		[Address(RVA = "0xBFE690", Offset = "0xBFE690", VA = "0xBFE690", Slot = "5")]
		public virtual void OnJoystickChange(Vector2 joystickVector)
		{
		}

		[Token(Token = "0x6001E4A")]
		[Address(RVA = "0xBFE704", Offset = "0xBFE704", VA = "0xBFE704")]
		public JoystickControl()
		{
		}
	}
	[Token(Token = "0x20004A5")]
	public class Lever : MonoBehaviour
	{
		[Token(Token = "0x4001D7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Rotation Limits")]
		[Tooltip("Minimum X value in Local Euler Angles")]
		public float MinimumXRotation;

		[Token(Token = "0x4001D80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Maximum X value in Local Euler Angles")]
		public float MaximumXRotation;

		[Token(Token = "0x4001D81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Initial Rotation")]
		public float InitialXRotation;

		[Token(Token = "0x4001D82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Audio")]
		public AudioClip SwitchOnSound;

		[Token(Token = "0x4001D83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioClip SwitchOffSound;

		[Token(Token = "0x4001D84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Tolerance before considering a switch flipped On or Off. Ex : 1.25 Tolerance means switch can be 98.25% up and considered switched on, or 1.25% down to be considered switched off.")]
		[Header("Tolerance")]
		public float SwitchTolerance;

		[Token(Token = "0x4001D85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("If true the lever will lerp towards the Grabber. If false the lever will instantly point to the grabber")]
		[Header("Smooth Look")]
		public bool UseSmoothLook;

		[Token(Token = "0x4001D86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The speed at which to Lerp towards the Grabber if UseSmoothLook is enabled")]
		public float SmoothLookSpeed;

		[Token(Token = "0x4001D87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("If false, the lever's rigidbody will be kinematic when not being held. Disable this if you don't want your lever to interact with physics or if you need moving platform support.")]
		[Header("Moving Platform Support")]
		public bool AllowPhysicsForces;

		[Token(Token = "0x4001D88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		[Tooltip("If ReturnToCenter true and KinematicWhileInactive true then the lever will smooth look back to center when not being held")]
		[Header("Return to Center (Must be Kinematic)")]
		public bool ReturnToCenter;

		[Token(Token = "0x4001D89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("How fast to return to center if not being held")]
		public float ReturnLookSpeed;

		[Token(Token = "0x4001D8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Header("Snap Settings")]
		[Tooltip("If true the lever will look directly at the Grabber and not factor in an initial offset")]
		public bool SnapToGrabber;

		[Token(Token = "0x4001D8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		[Header("Misc")]
		[Tooltip("If true, the Lever will be dropped once switched on or off")]
		public bool DropLeverOnActivation;

		[Token(Token = "0x4001D8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Shown for Debug")]
		[Tooltip("Current position of the lever as expressed as a percentage 1-100")]
		public float LeverPercentage;

		[Token(Token = "0x4001D8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("If true will show an angle helper in editor mode (Gizmos must be enabled)")]
		public bool ShowEditorGizmos;

		[Token(Token = "0x4001D8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Events")]
		[Tooltip("Called when lever was up, but is now in the down position")]
		public UnityEvent onLeverDown;

		[Token(Token = "0x4001D8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Called when lever was down, but is now in the up position")]
		public UnityEvent onLeverUp;

		[Token(Token = "0x4001D90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Called if the lever changes position at all")]
		public FloatEvent onLeverChange;

		[Token(Token = "0x4001D91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Grabbable grab;

		[Token(Token = "0x4001D92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody rb;

		[Token(Token = "0x4001D93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private AudioSource audioSource;

		[Token(Token = "0x4001D94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool switchedOn;

		[Token(Token = "0x4001D95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private ConfigurableJoint configJoint;

		[Token(Token = "0x4001D96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private HingeJoint hingedJoint;

		[Token(Token = "0x4001D97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Vector3 _lastLocalAngle;

		[Token(Token = "0x4001D98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private Quaternion initialOffset;

		[Token(Token = "0x6001E4B")]
		[Address(RVA = "0xBFE730", Offset = "0xBFE730", VA = "0xBFE730")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E4C")]
		[Address(RVA = "0xBFE8E8", Offset = "0xBFE8E8", VA = "0xBFE8E8")]
		private void Awake()
		{
		}

		[Token(Token = "0x6001E4D")]
		[Address(RVA = "0xBFE918", Offset = "0xBFE918", VA = "0xBFE918")]
		private void Update()
		{
		}

		[Token(Token = "0x6001E4E")]
		[Address(RVA = "0xBFEAD8", Offset = "0xBFEAD8", VA = "0xBFEAD8", Slot = "4")]
		public virtual float GetAnglePercentage(float currentAngle)
		{
			return default(float);
		}

		[Token(Token = "0x6001E4F")]
		[Address(RVA = "0xBFEC78", Offset = "0xBFEC78", VA = "0xBFEC78")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001E50")]
		[Address(RVA = "0xBFEC7C", Offset = "0xBFEC7C", VA = "0xBFEC7C")]
		private void doLeverLook()
		{
		}

		[Token(Token = "0x6001E51")]
		[Address(RVA = "0xBFF1F0", Offset = "0xBFF1F0", VA = "0xBFF1F0", Slot = "5")]
		public virtual void SetLeverAngle(float angle)
		{
		}

		[Token(Token = "0x6001E52")]
		[Address(RVA = "0xBFF23C", Offset = "0xBFF23C", VA = "0xBFF23C", Slot = "6")]
		public virtual void OnLeverChange(float percentage)
		{
		}

		[Token(Token = "0x6001E53")]
		[Address(RVA = "0xBFF2A8", Offset = "0xBFF2A8", VA = "0xBFF2A8", Slot = "7")]
		public virtual void OnLeverDown()
		{
		}

		[Token(Token = "0x6001E54")]
		[Address(RVA = "0xBFF3A4", Offset = "0xBFF3A4", VA = "0xBFF3A4", Slot = "8")]
		public virtual void OnLeverUp()
		{
		}

		[Token(Token = "0x6001E55")]
		[Address(RVA = "0xBFF4A4", Offset = "0xBFF4A4", VA = "0xBFF4A4")]
		public Lever()
		{
		}
	}
	[Token(Token = "0x20004A6")]
	public class LocomotionManager : MonoBehaviour
	{
		[Token(Token = "0x4001D99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Default locomotion to use if nothing stored in playerprefs. 0 = Teleport. 1 = SmoothLocomotion")]
		[Header("Locomotion Type")]
		public LocomotionType DefaultLocomotion;

		[Token(Token = "0x4001D9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		private LocomotionType selectedLocomotion;

		[Token(Token = "0x4001D9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If true, locomotion type will be saved and loaded from player prefs")]
		[Header("Save / Loading")]
		public bool LoadLocomotionFromPrefs;

		[Token(Token = "0x4001D9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Input")]
		[Tooltip("The key(s) to use to toggle locomotion type")]
		public List<ControllerBinding> locomotionToggleInput;

		[Token(Token = "0x4001D9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The action used to toggle locomotion type")]
		public InputActionReference LocomotionToggleAction;

		[Token(Token = "0x4001D9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private BNGPlayerController player;

		[Token(Token = "0x4001D9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private PlayerTeleport teleport;

		[Token(Token = "0x4001DA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x1700038C")]
		public LocomotionType SelectedLocomotion
		{
			[Token(Token = "0x6001E56")]
			[Address(RVA = "0xBFF530", Offset = "0xBFF530", VA = "0xBFF530")]
			get
			{
				return default(LocomotionType);
			}
		}

		[Token(Token = "0x6001E57")]
		[Address(RVA = "0xBFF538", Offset = "0xBFF538", VA = "0xBFF538")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E58")]
		[Address(RVA = "0xBFF670", Offset = "0xBFF670", VA = "0xBFF670")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001E59")]
		[Address(RVA = "0xBFF770", Offset = "0xBFF770", VA = "0xBFF770")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001E5A")]
		[Address(RVA = "0xBFF870", Offset = "0xBFF870", VA = "0xBFF870")]
		public void OnLocomotionToggle(InputAction.CallbackContext context)
		{
		}

		[Token(Token = "0x6001E5B")]
		[Address(RVA = "0xBFF894", Offset = "0xBFF894", VA = "0xBFF894")]
		public void UpdateTeleportStatus()
		{
		}

		[Token(Token = "0x6001E5C")]
		[Address(RVA = "0xBFF5F8", Offset = "0xBFF5F8", VA = "0xBFF5F8")]
		public void ChangeLocomotion(LocomotionType locomotionType, bool save)
		{
		}

		[Token(Token = "0x6001E5D")]
		[Address(RVA = "0xBFF8C0", Offset = "0xBFF8C0", VA = "0xBFF8C0")]
		public void ChangeLocomotionType(LocomotionType loc)
		{
		}

		[Token(Token = "0x6001E5E")]
		[Address(RVA = "0xBFF9CC", Offset = "0xBFF9CC", VA = "0xBFF9CC")]
		private void toggleTeleport(bool enabled)
		{
		}

		[Token(Token = "0x6001E5F")]
		[Address(RVA = "0xBFFA00", Offset = "0xBFFA00", VA = "0xBFFA00")]
		private void toggleSmoothLocomotion(bool enabled)
		{
		}

		[Token(Token = "0x6001E60")]
		[Address(RVA = "0xBFFAAC", Offset = "0xBFFAAC", VA = "0xBFFAAC")]
		public void ToggleLocomotionType()
		{
		}

		[Token(Token = "0x6001E61")]
		[Address(RVA = "0xBFFABC", Offset = "0xBFFABC", VA = "0xBFFABC")]
		public LocomotionManager()
		{
		}
	}
	[Token(Token = "0x20004A7")]
	public class PlayerClimbing : MonoBehaviour
	{
		[Token(Token = "0x4001DA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Climbing Transforms")]
		public Transform LeftControllerTransform;

		[Token(Token = "0x4001DA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform RightControllerTransform;

		[Token(Token = "0x4001DA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Capsule Settings")]
		[Tooltip("Set the player's capsule collider height to this amount while climbing. This can allow you to shorten the capsule collider a bit, making it easier to navigate over ledges.")]
		public float ClimbingCapsuleHeight;

		[Token(Token = "0x4001DA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		[Tooltip("Set the player's capsule collider capsule center to this amount while climbing.")]
		public float ClimbingCapsuleCenter;

		[Token(Token = "0x4001DA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Haptics")]
		public bool ApplyHapticsOnGrab;

		[Token(Token = "0x4001DA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Frequency of haptics to play on grab if 'ApplyHapticsOnGrab' is true")]
		public float VibrateFrequency;

		[Token(Token = "0x4001DA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Amplitute of haptics to play on grab if 'ApplyHapticsOnGrab' is true")]
		public float VibrateAmplitude;

		[Token(Token = "0x4001DA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Duration of haptics to play on grab if 'ApplyHapticsOnGrab' is true")]
		public float VibrateDuration;

		[Token(Token = "0x4001DA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Grabber> climbers;

		[Token(Token = "0x4001DAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private bool wasGrippingClimbable;

		[Token(Token = "0x4001DAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CharacterController characterController;

		[Token(Token = "0x4001DAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x4001DAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private PlayerGravity playerGravity;

		[Token(Token = "0x4001DAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Shown for Debug : ")]
		public bool GrippingClimbable;

		[Token(Token = "0x4001DAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 moveDirection;

		[Token(Token = "0x4001DB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 previousLeftControllerPosition;

		[Token(Token = "0x4001DB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		private Vector3 previousRightControllerPosition;

		[Token(Token = "0x4001DB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Vector3 controllerMoveAmount;

		[Token(Token = "0x6001E62")]
		[Address(RVA = "0xBFFBA4", Offset = "0xBFFBA4", VA = "0xBFFBA4")]
		public void Start()
		{
		}

		[Token(Token = "0x6001E63")]
		[Address(RVA = "0xBFFC8C", Offset = "0xBFFC8C", VA = "0xBFFC8C")]
		public void LateUpdate()
		{
		}

		[Token(Token = "0x6001E64")]
		[Address(RVA = "0xBFFD60", Offset = "0xBFFD60", VA = "0xBFFD60", Slot = "4")]
		public virtual void AddClimber(Climbable climbable, Grabber grab)
		{
		}

		[Token(Token = "0x6001E65")]
		[Address(RVA = "0xC00094", Offset = "0xC00094", VA = "0xC00094", Slot = "5")]
		public virtual void RemoveClimber(Grabber grab)
		{
		}

		[Token(Token = "0x6001E66")]
		[Address(RVA = "0xC001A4", Offset = "0xC001A4", VA = "0xC001A4", Slot = "6")]
		public virtual bool GrippingAtLeastOneClimbable()
		{
			return default(bool);
		}

		[Token(Token = "0x6001E67")]
		[Address(RVA = "0xC002F8", Offset = "0xC002F8", VA = "0xC002F8", Slot = "7")]
		protected virtual void checkClimbing()
		{
		}

		[Token(Token = "0x6001E68")]
		[Address(RVA = "0xC006DC", Offset = "0xC006DC", VA = "0xC006DC")]
		private void onGrabbedClimbable()
		{
		}

		[Token(Token = "0x6001E69")]
		[Address(RVA = "0xC00798", Offset = "0xC00798", VA = "0xC00798")]
		private void onReleasedClimbable()
		{
		}

		[Token(Token = "0x6001E6A")]
		[Address(RVA = "0xC008D4", Offset = "0xC008D4", VA = "0xC008D4")]
		public PlayerClimbing()
		{
		}
	}
	[Token(Token = "0x20004A8")]
	public class PlayerGravity : MonoBehaviour
	{
		[Token(Token = "0x4001DB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If true, will apply gravity to the CharacterController component, or RigidBody if no CC is present.")]
		public bool GravityEnabled;

		[Token(Token = "0x4001DB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Amount of Gravity to apply to the CharacterController or Rigidbody. Default is 'Physics.gravity'.")]
		public Vector3 Gravity;

		[Token(Token = "0x4001DB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CharacterController characterController;

		[Token(Token = "0x4001DB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x4001DB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody playerRigidbody;

		[Token(Token = "0x4001DB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float _movementY;

		[Token(Token = "0x4001DB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 _initialGravityModifier;

		[Token(Token = "0x4001DBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private bool _validRigidBody;

		[Token(Token = "0x6001E6B")]
		[Address(RVA = "0xC0095C", Offset = "0xC0095C", VA = "0xC0095C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E6C")]
		[Address(RVA = "0xC00A54", Offset = "0xC00A54", VA = "0xC00A54")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001E6D")]
		[Address(RVA = "0xC00BC8", Offset = "0xC00BC8", VA = "0xC00BC8")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001E6E")]
		[Address(RVA = "0xC0085C", Offset = "0xC0085C", VA = "0xC0085C")]
		public void ToggleGravity(bool gravityOn)
		{
		}

		[Token(Token = "0x6001E6F")]
		[Address(RVA = "0xC00C60", Offset = "0xC00C60", VA = "0xC00C60")]
		public PlayerGravity()
		{
		}
	}
	[Token(Token = "0x20004A9")]
	public class PlayerMovingPlatformSupport : MonoBehaviour
	{
		[Token(Token = "0x4001DBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Ground checks : ")]
		[Tooltip("Raycast against these layers to check if player is on a moving platform")]
		public LayerMask GroundedLayers;

		[Token(Token = "0x4001DBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		protected RaycastHit groundHit;

		[Token(Token = "0x4001DBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x4001DBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CharacterController characterController;

		[Token(Token = "0x4001DBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform _initialCharacterParent;

		[Token(Token = "0x4001DC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		protected float DistanceFromGround;

		[Token(Token = "0x4001DC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private MovingPlatform currentPlatform;

		[Token(Token = "0x4001DC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool wasOnPlatform;

		[Token(Token = "0x4001DC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x71")]
		private bool requiresReparent;

		[Token(Token = "0x6001E70")]
		[Address(RVA = "0xC00C90", Offset = "0xC00C90", VA = "0xC00C90")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E71")]
		[Address(RVA = "0xC00D2C", Offset = "0xC00D2C", VA = "0xC00D2C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001E72")]
		[Address(RVA = "0xC00D38", Offset = "0xC00D38", VA = "0xC00D38")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001E73")]
		[Address(RVA = "0xC00D44", Offset = "0xC00D44", VA = "0xC00D44", Slot = "4")]
		public virtual void CheckMovingPlatform()
		{
		}

		[Token(Token = "0x6001E74")]
		[Address(RVA = "0xC01048", Offset = "0xC01048", VA = "0xC01048", Slot = "5")]
		public virtual void UpdateDistanceFromGround()
		{
		}

		[Token(Token = "0x6001E75")]
		[Address(RVA = "0xC0143C", Offset = "0xC0143C", VA = "0xC0143C")]
		public PlayerMovingPlatformSupport()
		{
		}
	}
	[Token(Token = "0x20004AA")]
	public enum RotationMechanic
	{
		[Token(Token = "0x4001DC5")]
		Snap,
		[Token(Token = "0x4001DC6")]
		Smooth
	}
	[Token(Token = "0x20004AB")]
	public class PlayerRotation : MonoBehaviour
	{
		[Token(Token = "0x20004AC")]
		public delegate void OnBeforeRotateAction();

		[Token(Token = "0x20004AD")]
		public delegate void OnAfterRotateAction();

		[Token(Token = "0x4001DC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Input")]
		[Tooltip("Set to false to skip Update")]
		public bool AllowInput;

		[Token(Token = "0x4001DC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Used to determine whether to turn left / right. This can be an X Axis on the thumbstick, for example. -1 to snap left, 1 to snap right.")]
		public List<InputAxis> inputAxis;

		[Token(Token = "0x4001DC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Unity Input Action used to rotate the player")]
		public InputActionReference RotateAction;

		[Token(Token = "0x4001DCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Snap rotation will rotate a fixed amount of degrees on turn. Smooth will linearly rotate the player.")]
		[Header("Smooth / Snap Turning")]
		public RotationMechanic RotationType;

		[Token(Token = "0x4001DCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Header("Snap Turn Settings")]
		[Tooltip("How many degrees to rotate if RotationType is set to 'Snap'")]
		public float SnapRotationAmount;

		[Token(Token = "0x4001DCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Thumbstick X axis must be >= this amount to be considered an input event")]
		public float SnapInputAmount;

		[Token(Token = "0x4001DCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Header("Smooth Turn Settings")]
		[Tooltip("How fast to rotate the player if RotationType is set to 'Smooth'")]
		public float SmoothTurnSpeed;

		[Token(Token = "0x4001DCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Thumbstick X axis must be >= this amount to be considered an input event")]
		public float SmoothTurnMinInput;

		[Token(Token = "0x4001DCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float recentSnapTurnTime;

		[Token(Token = "0x4001DD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float rotationAmount;

		[Token(Token = "0x4001DD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float xAxis;

		[Token(Token = "0x4001DD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private float previousXInput;

		[Token(Token = "0x14000018")]
		public static event OnBeforeRotateAction OnBeforeRotate
		{
			[Token(Token = "0x6001E76")]
			[Address(RVA = "0xC01444", Offset = "0xC01444", VA = "0xC01444")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001E77")]
			[Address(RVA = "0xC014FC", Offset = "0xC014FC", VA = "0xC014FC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x14000019")]
		public static event OnAfterRotateAction OnAfterRotate
		{
			[Token(Token = "0x6001E78")]
			[Address(RVA = "0xC015B4", Offset = "0xC015B4", VA = "0xC015B4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001E79")]
			[Address(RVA = "0xC01670", Offset = "0xC01670", VA = "0xC01670")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001E7A")]
		[Address(RVA = "0xC0172C", Offset = "0xC0172C", VA = "0xC0172C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001E7B")]
		[Address(RVA = "0xC01788", Offset = "0xC01788", VA = "0xC01788", Slot = "4")]
		public virtual float GetAxisInput()
		{
			return default(float);
		}

		[Token(Token = "0x6001E7C")]
		[Address(RVA = "0xC01918", Offset = "0xC01918", VA = "0xC01918", Slot = "5")]
		public virtual void DoSnapRotation(float xInput)
		{
		}

		[Token(Token = "0x6001E7D")]
		[Address(RVA = "0xC01AF4", Offset = "0xC01AF4", VA = "0xC01AF4", Slot = "6")]
		public virtual bool RecentlySnapTurned()
		{
			return default(bool);
		}

		[Token(Token = "0x6001E7E")]
		[Address(RVA = "0xC01B24", Offset = "0xC01B24", VA = "0xC01B24", Slot = "7")]
		public virtual void DoSmoothRotation(float xInput)
		{
		}

		[Token(Token = "0x6001E7F")]
		[Address(RVA = "0xC01C20", Offset = "0xC01C20", VA = "0xC01C20")]
		public PlayerRotation()
		{
		}
	}
	[Token(Token = "0x20004AE")]
	public enum TeleportControls
	{
		[Token(Token = "0x4001DD6")]
		ThumbstickRotate,
		[Token(Token = "0x4001DD7")]
		ThumbstickDown,
		[Token(Token = "0x4001DD8")]
		BButton
	}
	[Token(Token = "0x20004AF")]
	public class PlayerTeleport : MonoBehaviour
	{
		[Token(Token = "0x20004B0")]
		public delegate void OnBeforeTeleportFadeAction();

		[Token(Token = "0x20004B1")]
		public delegate void OnBeforeTeleportAction();

		[Token(Token = "0x20004B2")]
		public delegate void OnAfterTeleportAction();

		[Token(Token = "0x20004B3")]
		[CompilerGenerated]
		private sealed class <doTeleport>d__71 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001E02")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001E03")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001E04")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public PlayerTeleport <>4__this;

			[Token(Token = "0x4001E05")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Vector3 playerDestination;

			[Token(Token = "0x4001E06")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
			public bool rotatePlayer;

			[Token(Token = "0x4001E07")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public Quaternion playerRotation;

			[Token(Token = "0x1700038F")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001EB7")]
				[Address(RVA = "0xC04664", Offset = "0xC04664", VA = "0xC04664", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x17000390")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001EB9")]
				[Address(RVA = "0xC046AC", Offset = "0xC046AC", VA = "0xC046AC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001EB4")]
			[Address(RVA = "0xC03BF4", Offset = "0xC03BF4", VA = "0xC03BF4")]
			[DebuggerHidden]
			public <doTeleport>d__71(int <>1__state)
			{
			}

			[Token(Token = "0x6001EB5")]
			[Address(RVA = "0xC043F4", Offset = "0xC043F4", VA = "0xC043F4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001EB6")]
			[Address(RVA = "0xC043F8", Offset = "0xC043F8", VA = "0xC043F8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001EB8")]
			[Address(RVA = "0xC0466C", Offset = "0xC0466C", VA = "0xC0466C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001DD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The LineRenderer to use when showing a teleport preview")]
		[Header("Colors")]
		public LineRenderer TeleportLine;

		[Token(Token = "0x4001DDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If a Valid Teleport destination is found, color of 'TeleportLine' will be updated to this.")]
		public Color ValidTeleport;

		[Token(Token = "0x4001DDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("If a Valid Teleport destination is not found, color of 'TeleportLine' will be updated to this.")]
		public Color InvalidTeleport;

		[Token(Token = "0x4001DDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Whether the Teleport should initiate from the left or right controller. This affects input and where the teleport line should begin from.")]
		[Header("Hand Side")]
		public ControllerHand HandSide;

		[Token(Token = "0x4001DDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Where the Teleport Line should begin if using the left ControllerHand")]
		[Header("Transform Definitions")]
		public Transform TeleportBeginTransform;

		[Token(Token = "0x4001DDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Where the Teleport Line should begin if using the right ControllerHand")]
		public Transform TeleportBeginTransformAlt;

		[Token(Token = "0x4001DDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Transform indicating where Player should be placed on teleport.")]
		public Transform TeleportDestination;

		[Token(Token = "0x4001DE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The TeleportDestination if we are hitting one. Null if not.")]
		[HideInInspector]
		public TeleportDestination DestinationObject;

		[Token(Token = "0x4001DE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("GameObject to move around when initiating a teleport.")]
		public GameObject TeleportMarker;

		[Token(Token = "0x4001DE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Transform indicating direction Player will rotate to on teleport.")]
		public Transform DirectionIndicator;

		[Token(Token = "0x4001DE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("Teleport Physics")]
		public float MaxRange;

		[Token(Token = "0x4001DE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[Tooltip("More segments means a smoother line, at the cost of performance.")]
		public int SegmentCount;

		[Token(Token = "0x4001DE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("How much velocity to apply when calculating a parabola. Set to a very high number for a straight line.")]
		public float SimulationVelocity;

		[Token(Token = "0x4001DE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		[Tooltip("Scale of each segment used when calculating parabola")]
		public float SegmentScale;

		[Token(Token = "0x4001DE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Header("Layers")]
		[Tooltip("Raycast layers to use when determining collision")]
		public LayerMask CollisionLayers;

		[Token(Token = "0x4001DE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		[Tooltip("Raycast layers to use when determining if the collided object is a valid teleport. If it is not valid then the line will be red and unable to teleport.")]
		public LayerMask ValidLayers;

		[Token(Token = "0x4001DE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Header("Controls")]
		[Tooltip("Method used to initiate a teleport. If these don't fit your needs you can override the KeyDownForTeleport() and KeyUpFromTeleport() methods.")]
		public TeleportControls ControlType;

		[Token(Token = "0x4001DEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		[Tooltip("If true the user can rotate the teleport marker before initiating a teleport.")]
		public bool AllowTeleportRotation;

		[Token(Token = "0x4001DEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x95")]
		private bool _reachThumbThreshold;

		[Token(Token = "0x4001DEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Max Angle / Slope the teleport marker can be to be considered a valid teleport.")]
		[Header("Slope")]
		public float MaxSlope;

		[Token(Token = "0x4001DED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Header("Screen Fade")]
		[Tooltip("Use ScreenFader on teleportation if true.")]
		public bool FadeScreenOnTeleport;

		[Token(Token = "0x4001DEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("If FadeScreenOnTeleport = true, fade the screen at this speed.")]
		public float TeleportFadeSpeed;

		[Token(Token = "0x4001DEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		[Tooltip("Seconds to wait before initiating teleport. Useful if you want to fade the screen  before teleporting.")]
		public float TeleportDelay;

		[Token(Token = "0x4001DF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private CharacterController controller;

		[Token(Token = "0x4001DF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private BNGPlayerController playerController;

		[Token(Token = "0x4001DF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private InputBridge input;

		[Token(Token = "0x4001DF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Transform cameraRig;

		[Token(Token = "0x4001DF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private ScreenFader fader;

		[Token(Token = "0x4001DF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		private bool aimingTeleport;

		[Token(Token = "0x4001DF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD1")]
		private bool validTeleport;

		[Token(Token = "0x4001DF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD2")]
		private bool teleportationEnabled;

		[Token(Token = "0x4001DF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		private int _invalidFrames;

		[Token(Token = "0x4001DF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private float _initialLineWidth;

		[Token(Token = "0x4001DFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		private bool setVariables;

		[Token(Token = "0x4001DFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private Collider _hitObject;

		[Token(Token = "0x4001DFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		private Vector3 _hitVector;

		[Token(Token = "0x4001E00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		private float _hitAngle;

		[Token(Token = "0x4001E01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		private RaycastHit hit;

		[Token(Token = "0x1700038D")]
		private Transform teleportTransform
		{
			[Token(Token = "0x6001E88")]
			[Address(RVA = "0xC01F18", Offset = "0xC01F18", VA = "0xC01F18")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x1700038E")]
		private Vector2 handedThumbstickAxis
		{
			[Token(Token = "0x6001E89")]
			[Address(RVA = "0xC01F34", Offset = "0xC01F34", VA = "0xC01F34")]
			get
			{
				return default(Vector2);
			}
		}

		[Token(Token = "0x1400001A")]
		public static event OnBeforeTeleportFadeAction OnBeforeTeleportFade
		{
			[Token(Token = "0x6001E8A")]
			[Address(RVA = "0xC01F74", Offset = "0xC01F74", VA = "0xC01F74")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001E8B")]
			[Address(RVA = "0xC0202C", Offset = "0xC0202C", VA = "0xC0202C")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001B")]
		public static event OnBeforeTeleportAction OnBeforeTeleport
		{
			[Token(Token = "0x6001E8C")]
			[Address(RVA = "0xC020E4", Offset = "0xC020E4", VA = "0xC020E4")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001E8D")]
			[Address(RVA = "0xC021A0", Offset = "0xC021A0", VA = "0xC021A0")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001C")]
		public static event OnAfterTeleportAction OnAfterTeleport
		{
			[Token(Token = "0x6001E8E")]
			[Address(RVA = "0xC0225C", Offset = "0xC0225C", VA = "0xC0225C")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001E8F")]
			[Address(RVA = "0xC02318", Offset = "0xC02318", VA = "0xC02318")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001E90")]
		[Address(RVA = "0xC023D4", Offset = "0xC023D4", VA = "0xC023D4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001E91")]
		[Address(RVA = "0xC023D8", Offset = "0xC023D8", VA = "0xC023D8")]
		private void setupVariables()
		{
		}

		[Token(Token = "0x6001E92")]
		[Address(RVA = "0xC02694", Offset = "0xC02694", VA = "0xC02694")]
		private void Update()
		{
		}

		[Token(Token = "0x6001E93")]
		[Address(RVA = "0xC027F4", Offset = "0xC027F4", VA = "0xC027F4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001E94")]
		[Address(RVA = "0xC026E8", Offset = "0xC026E8", VA = "0xC026E8")]
		public void DoCheckTeleport()
		{
		}

		[Token(Token = "0x6001E95")]
		[Address(RVA = "0xC027E4", Offset = "0xC027E4", VA = "0xC027E4")]
		public void TryOrHideTeleport()
		{
		}

		[Token(Token = "0x6001E96")]
		[Address(RVA = "0xBFFA94", Offset = "0xBFFA94", VA = "0xBFFA94")]
		public void EnableTeleportation()
		{
		}

		[Token(Token = "0x6001E97")]
		[Address(RVA = "0xBFFAA0", Offset = "0xBFFAA0", VA = "0xBFFAA0")]
		public void DisableTeleportation()
		{
		}

		[Token(Token = "0x6001E98")]
		[Address(RVA = "0xC02804", Offset = "0xC02804", VA = "0xC02804")]
		private void calculateParabola()
		{
		}

		[Token(Token = "0x6001E99")]
		[Address(RVA = "0xC03378", Offset = "0xC03378", VA = "0xC03378")]
		private bool teleportClear()
		{
			return default(bool);
		}

		[Token(Token = "0x6001E9A")]
		[Address(RVA = "0xC03324", Offset = "0xC03324", VA = "0xC03324")]
		private void hideTeleport()
		{
		}

		[Token(Token = "0x6001E9B")]
		[Address(RVA = "0xC0312C", Offset = "0xC0312C", VA = "0xC0312C")]
		private void updateTeleport()
		{
		}

		[Token(Token = "0x6001E9C")]
		[Address(RVA = "0xC035A4", Offset = "0xC035A4", VA = "0xC035A4")]
		private void rotateMarker()
		{
		}

		[Token(Token = "0x6001E9D")]
		[Address(RVA = "0xC0317C", Offset = "0xC0317C", VA = "0xC0317C")]
		private void tryTeleport()
		{
		}

		[Token(Token = "0x6001E9E")]
		[Address(RVA = "0xC03968", Offset = "0xC03968", VA = "0xC03968", Slot = "4")]
		public virtual void BeforeTeleportFade()
		{
		}

		[Token(Token = "0x6001E9F")]
		[Address(RVA = "0xC03A30", Offset = "0xC03A30", VA = "0xC03A30", Slot = "5")]
		public virtual void BeforeTeleport()
		{
		}

		[Token(Token = "0x6001EA0")]
		[Address(RVA = "0xC03AF8", Offset = "0xC03AF8", VA = "0xC03AF8", Slot = "6")]
		public virtual void AfterTeleport()
		{
		}

		[Token(Token = "0x6001EA1")]
		[Address(RVA = "0xC038A0", Offset = "0xC038A0", VA = "0xC038A0")]
		[IteratorStateMachine(typeof(<doTeleport>d__71))]
		private IEnumerator doTeleport(Vector3 playerDestination, Quaternion playerRotation, bool rotatePlayer)
		{
			return null;
		}

		[Token(Token = "0x6001EA2")]
		[Address(RVA = "0xC03C1C", Offset = "0xC03C1C", VA = "0xC03C1C")]
		public void TeleportPlayer(Vector3 destination, Quaternion rotation)
		{
		}

		[Token(Token = "0x6001EA3")]
		[Address(RVA = "0xC03C40", Offset = "0xC03C40", VA = "0xC03C40")]
		public void TeleportPlayerToTransform(Transform destination)
		{
		}

		[Token(Token = "0x6001EA4")]
		[Address(RVA = "0xC03CDC", Offset = "0xC03CDC", VA = "0xC03CDC", Slot = "7")]
		public virtual bool KeyDownForTeleport()
		{
			return default(bool);
		}

		[Token(Token = "0x6001EA5")]
		[Address(RVA = "0xC03EA8", Offset = "0xC03EA8", VA = "0xC03EA8", Slot = "8")]
		public virtual bool KeyUpFromTeleport()
		{
			return default(bool);
		}

		[Token(Token = "0x6001EA6")]
		[Address(RVA = "0xC03F98", Offset = "0xC03F98", VA = "0xC03F98")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001EA7")]
		[Address(RVA = "0xC040A4", Offset = "0xC040A4", VA = "0xC040A4")]
		public PlayerTeleport()
		{
		}
	}
	[Token(Token = "0x20004B4")]
	public class PointerEvents : MonoBehaviour, IPointerClickHandler, IEventSystemHandler, IPointerEnterHandler, IPointerExitHandler, IPointerDownHandler, IPointerUpHandler
	{
		[Token(Token = "0x4001E08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Maximium Distance")]
		[Tooltip("Maximum Distance this object can be from the UIPointer to be considered valid and receive events")]
		public float MaxDistance;

		[Token(Token = "0x4001E09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Header("Enable Events")]
		[Tooltip("If True then the Unity Events below will be sent. Set to False if you need to disable sending pointer events.")]
		public bool Enabled;

		[Token(Token = "0x4001E0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Unity Events : ")]
		public PointerEventDataEvent OnPointerClickEvent;

		[Token(Token = "0x4001E0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public PointerEventDataEvent OnPointerEnterEvent;

		[Token(Token = "0x4001E0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public PointerEventDataEvent OnPointerExitEvent;

		[Token(Token = "0x4001E0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public PointerEventDataEvent OnPointerDownEvent;

		[Token(Token = "0x4001E0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public PointerEventDataEvent OnPointerUpEvent;

		[Token(Token = "0x6001EBA")]
		[Address(RVA = "0xC046B4", Offset = "0xC046B4", VA = "0xC046B4", Slot = "9")]
		public virtual void OnPointerClick(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001EBB")]
		[Address(RVA = "0xC04730", Offset = "0xC04730", VA = "0xC04730", Slot = "10")]
		public virtual void OnPointerEnter(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001EBC")]
		[Address(RVA = "0xC047AC", Offset = "0xC047AC", VA = "0xC047AC", Slot = "11")]
		public virtual void OnPointerExit(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001EBD")]
		[Address(RVA = "0xC0480C", Offset = "0xC0480C", VA = "0xC0480C", Slot = "12")]
		public virtual void OnPointerDown(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001EBE")]
		[Address(RVA = "0xC04888", Offset = "0xC04888", VA = "0xC04888", Slot = "13")]
		public virtual void OnPointerUp(PointerEventData eventData)
		{
		}

		[Token(Token = "0x6001EBF")]
		[Address(RVA = "0xC048E8", Offset = "0xC048E8", VA = "0xC048E8", Slot = "14")]
		public virtual bool DistanceExceeded(PointerEventData eventData)
		{
			return default(bool);
		}

		[Token(Token = "0x6001EC0")]
		[Address(RVA = "0xC04908", Offset = "0xC04908", VA = "0xC04908")]
		public PointerEvents()
		{
		}
	}
	[Token(Token = "0x20004B5")]
	public class RemoteGrabber : MonoBehaviour
	{
		[Token(Token = "0x4001E0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GrabbablesInTrigger ParentGrabber;

		[Token(Token = "0x6001EC1")]
		[Address(RVA = "0xC04920", Offset = "0xC04920", VA = "0xC04920")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001EC2")]
		[Address(RVA = "0xC04AE8", Offset = "0xC04AE8", VA = "0xC04AE8")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6001EC3")]
		[Address(RVA = "0xC04C68", Offset = "0xC04C68", VA = "0xC04C68")]
		public RemoteGrabber()
		{
		}
	}
	[Token(Token = "0x20004B6")]
	public class Slider : MonoBehaviour
	{
		[Token(Token = "0x4001E10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private float _slidePercentage;

		[Token(Token = "0x4001E11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public FloatEvent onSliderChange;

		[Token(Token = "0x4001E12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float lastSliderPercentage;

		[Token(Token = "0x4001E13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private float slideRangeLow;

		[Token(Token = "0x4001E14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float slideRangeHigh;

		[Token(Token = "0x4001E15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private float slideRange;

		[Token(Token = "0x17000391")]
		public float SlidePercentage
		{
			[Token(Token = "0x6001EC4")]
			[Address(RVA = "0xC04C70", Offset = "0xC04C70", VA = "0xC04C70")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x6001EC5")]
		[Address(RVA = "0xC04C78", Offset = "0xC04C78", VA = "0xC04C78")]
		private void Start()
		{
		}

		[Token(Token = "0x6001EC6")]
		[Address(RVA = "0xC04D80", Offset = "0xC04D80", VA = "0xC04D80")]
		private void Update()
		{
		}

		[Token(Token = "0x6001EC7")]
		[Address(RVA = "0xC04E00", Offset = "0xC04E00", VA = "0xC04E00", Slot = "4")]
		public virtual void OnSliderChange(float percentage)
		{
		}

		[Token(Token = "0x6001EC8")]
		[Address(RVA = "0xC04E6C", Offset = "0xC04E6C", VA = "0xC04E6C")]
		public Slider()
		{
		}
	}
	[Token(Token = "0x20004B7")]
	public enum MovementVector
	{
		[Token(Token = "0x4001E17")]
		HMD,
		[Token(Token = "0x4001E18")]
		Controller
	}
	[Token(Token = "0x20004B8")]
	public class SmoothLocomotion : MonoBehaviour
	{
		[Token(Token = "0x20004B9")]
		public delegate void OnBeforeMoveAction();

		[Token(Token = "0x20004BA")]
		public delegate void OnAfterMoveAction();

		[Token(Token = "0x4001E19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Movement : ")]
		public float MovementSpeed;

		[Token(Token = "0x4001E1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("(Optional) If specified, this transform's forward direction will determine the movement direction ")]
		public Transform ForwardDirection;

		[Token(Token = "0x4001E1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Used to determine which direction to move. Example : Left Thumbstick Axis or Touchpad. ")]
		public List<InputAxis> inputAxis;

		[Token(Token = "0x4001E1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Input Action used to affect movement")]
		public InputActionReference MoveAction;

		[Token(Token = "0x4001E1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("If true, W,A,S,D can be used to move. Useful for testing.")]
		public bool AllowKeyboardInputs;

		[Token(Token = "0x4001E1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		[Tooltip("If true, movement events will only be sent if the Application has focus (Or Play window, if running in the Unity Editor)")]
		public bool RequireAppFocus;

		[Token(Token = "0x4001E1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Header("Sprint : ")]
		public float SprintSpeed;

		[Token(Token = "0x4001E20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("The key(s) to use to initiate sprint. You can also override the SprintKeyDown() function to determine your sprint criteria.")]
		public List<ControllerBinding> SprintInput;

		[Token(Token = "0x4001E21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Unity Input Action used to enable sprinting")]
		public InputActionReference SprintAction;

		[Token(Token = "0x4001E22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Strafe : ")]
		public float StrafeSpeed;

		[Token(Token = "0x4001E23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float StrafeSprintSpeed;

		[Token(Token = "0x4001E24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Jump : ")]
		[Tooltip("Amount of 'force' to apply to the player during Jump")]
		public float JumpForce;

		[Token(Token = "0x4001E25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("The key(s) to use to initiate a jump. You can also override the CheckJump() function to determine your jump criteria.")]
		public List<ControllerBinding> JumpInput;

		[Token(Token = "0x4001E26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Unity Input Action used to initiate a jump")]
		public InputActionReference JumpAction;

		[Token(Token = "0x4001E27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("Can the player move when not grounded? Set to true if you want to be able to move the joysticks and have the player respond to input even when not grounded.")]
		[Header("Air Control : ")]
		public bool AirControl;

		[Token(Token = "0x4001E28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		[Tooltip("How fast the player can move in the air if AirControl = true. Example : 0.5 = Player will move at half the speed of MovementSpeed")]
		public float AirControlSpeed;

		[Token(Token = "0x4001E29")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private BNGPlayerController playerController;

		[Token(Token = "0x4001E2A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private CharacterController characterController;

		[Token(Token = "0x4001E2B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private float movementX;

		[Token(Token = "0x4001E2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		private float movementY;

		[Token(Token = "0x4001E2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private float movementZ;

		[Token(Token = "0x4001E2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private bool movementDisabled;

		[Token(Token = "0x4001E2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float _verticalSpeed;

		[Token(Token = "0x4001E32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public float Magnitude;

		[Token(Token = "0x1400001D")]
		public static event OnBeforeMoveAction OnBeforeMove
		{
			[Token(Token = "0x6001EC9")]
			[Address(RVA = "0xC04E80", Offset = "0xC04E80", VA = "0xC04E80")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001ECA")]
			[Address(RVA = "0xC04F38", Offset = "0xC04F38", VA = "0xC04F38")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x1400001E")]
		public static event OnAfterMoveAction OnAfterMove
		{
			[Token(Token = "0x6001ECB")]
			[Address(RVA = "0xC04FF0", Offset = "0xC04FF0", VA = "0xC04FF0")]
			[CompilerGenerated]
			add
			{
			}
			[Token(Token = "0x6001ECC")]
			[Address(RVA = "0xC050AC", Offset = "0xC050AC", VA = "0xC050AC")]
			[CompilerGenerated]
			remove
			{
			}
		}

		[Token(Token = "0x6001ECD")]
		[Address(RVA = "0xC05168", Offset = "0xC05168", VA = "0xC05168", Slot = "4")]
		public virtual void Update()
		{
		}

		[Token(Token = "0x6001ECE")]
		[Address(RVA = "0xC051A0", Offset = "0xC051A0", VA = "0xC051A0", Slot = "5")]
		public virtual void CheckControllerReferences()
		{
		}

		[Token(Token = "0x6001ECF")]
		[Address(RVA = "0xC05278", Offset = "0xC05278", VA = "0xC05278", Slot = "6")]
		public virtual void UpdateInputs()
		{
		}

		[Token(Token = "0x6001ED0")]
		[Address(RVA = "0xC053D8", Offset = "0xC053D8", VA = "0xC053D8", Slot = "7")]
		public virtual Vector2 GetMovementAxis()
		{
			return default(Vector2);
		}

		[Token(Token = "0x6001ED1")]
		[Address(RVA = "0xC05814", Offset = "0xC05814", VA = "0xC05814", Slot = "8")]
		public virtual void MoveCharacter()
		{
		}

		[Token(Token = "0x6001ED2")]
		[Address(RVA = "0xC05A40", Offset = "0xC05A40", VA = "0xC05A40", Slot = "9")]
		public virtual void MoveCharacter(Vector3 motion)
		{
		}

		[Token(Token = "0x6001ED3")]
		[Address(RVA = "0xC05D04", Offset = "0xC05D04", VA = "0xC05D04", Slot = "10")]
		public virtual void GetKeyBoardInputs()
		{
		}

		[Token(Token = "0x6001ED4")]
		[Address(RVA = "0xC05DD4", Offset = "0xC05DD4", VA = "0xC05DD4", Slot = "11")]
		public virtual bool CheckJump()
		{
			return default(bool);
		}

		[Token(Token = "0x6001ED5")]
		[Address(RVA = "0xC05F70", Offset = "0xC05F70", VA = "0xC05F70", Slot = "12")]
		public virtual bool CheckSprint()
		{
			return default(bool);
		}

		[Token(Token = "0x6001ED6")]
		[Address(RVA = "0xC060D8", Offset = "0xC060D8", VA = "0xC060D8", Slot = "13")]
		public virtual void EnableMovement()
		{
		}

		[Token(Token = "0x6001ED7")]
		[Address(RVA = "0xC060E0", Offset = "0xC060E0", VA = "0xC060E0", Slot = "14")]
		public virtual void DisableMovement()
		{
		}

		[Token(Token = "0x6001ED8")]
		[Address(RVA = "0xC060EC", Offset = "0xC060EC", VA = "0xC060EC")]
		public SmoothLocomotion()
		{
		}
	}
	[Token(Token = "0x20004BB")]
	public class SnapZone : MonoBehaviour
	{
		[Token(Token = "0x4001E33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Starting / Held Item")]
		[Tooltip("The currently held item. Set this in the editor to equip on start.")]
		public Grabbable HeldItem;

		[Token(Token = "0x4001E34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Header("Options")]
		[Tooltip("If false, Item will Move back to inventory space if player drops it.")]
		public bool CanDropItem;

		[Token(Token = "0x4001E35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		[Tooltip("If false the snap zone cannot have it's content replaced.")]
		public bool CanSwapItem;

		[Token(Token = "0x4001E36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Multiply Item Scale times this when in snap zone.")]
		public float ScaleItem;

		[Token(Token = "0x4001E37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private float _scaleTo;

		[Token(Token = "0x4001E38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool DisableColliders;

		[Token(Token = "0x4001E39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private List<Collider> disabledColliders;

		[Token(Token = "0x4001E3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("If true the item inside the SnapZone will be duplicated, instead of removed, from the SnapZone.")]
		public bool DuplicateItemOnGrab;

		[Token(Token = "0x4001E3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Only snap if Grabbable was dropped maximum of X seconds ago")]
		public float MaxDropTime;

		[Token(Token = "0x4001E3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("If not empty, can only snap objects if transform name contains one of these strings")]
		[Header("Filtering")]
		public List<string> OnlyAllowNames;

		[Token(Token = "0x4001E3D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Do not allow snapping if transform contains one of these names")]
		public List<string> ExcludeTransformNames;

		[Token(Token = "0x4001E3E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Audio")]
		public AudioClip SoundOnSnap;

		[Token(Token = "0x4001E3F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AudioClip SoundOnUnsnap;

		[Token(Token = "0x4001E40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Events")]
		public GrabbableEvent OnSnapEvent;

		[Token(Token = "0x4001E41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public GrabbableEvent OnDetachEvent;

		[Token(Token = "0x4001E42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private GrabbablesInTrigger gZone;

		[Token(Token = "0x4001E43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Rigidbody heldItemRigid;

		[Token(Token = "0x4001E44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private bool heldItemWasKinematic;

		[Token(Token = "0x4001E45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Grabbable trackedItem;

		[Token(Token = "0x4001E46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HideInInspector]
		public Grabbable ClosestGrabbable;

		[Token(Token = "0x4001E47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private SnapZoneOffset offset;

		[Token(Token = "0x6001EE1")]
		[Address(RVA = "0xC06538", Offset = "0xC06538", VA = "0xC06538")]
		private void Start()
		{
		}

		[Token(Token = "0x6001EE2")]
		[Address(RVA = "0xC06B70", Offset = "0xC06B70", VA = "0xC06B70")]
		private void Update()
		{
		}

		[Token(Token = "0x6001EE3")]
		[Address(RVA = "0xC06ED0", Offset = "0xC06ED0", VA = "0xC06ED0")]
		private Grabbable getClosestGrabbable()
		{
			return null;
		}

		[Token(Token = "0x6001EE4")]
		[Address(RVA = "0xC065EC", Offset = "0xC065EC", VA = "0xC065EC")]
		public void GrabGrabbable(Grabbable grab)
		{
		}

		[Token(Token = "0x6001EE5")]
		[Address(RVA = "0xC077E4", Offset = "0xC077E4", VA = "0xC077E4")]
		private void disableGrabbable(Grabbable grab)
		{
		}

		[Token(Token = "0x6001EE6")]
		[Address(RVA = "0xC078E0", Offset = "0xC078E0", VA = "0xC078E0")]
		public void GrabEquipped(Grabber grabber)
		{
		}

		[Token(Token = "0x6001EE7")]
		[Address(RVA = "0xC07414", Offset = "0xC07414", VA = "0xC07414")]
		public void ReleaseAll()
		{
		}

		[Token(Token = "0x6001EE8")]
		[Address(RVA = "0xC07C00", Offset = "0xC07C00", VA = "0xC07C00")]
		public SnapZone()
		{
		}
	}
	[Token(Token = "0x20004BC")]
	public class SnapZoneOffset : MonoBehaviour
	{
		[Token(Token = "0x4001E48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 LocalPositionOffset;

		[Token(Token = "0x4001E49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public Vector3 LocalRotationOffset;

		[Token(Token = "0x6001EE9")]
		[Address(RVA = "0xC08CA0", Offset = "0xC08CA0", VA = "0xC08CA0")]
		public SnapZoneOffset()
		{
		}
	}
	[Token(Token = "0x20004BD")]
	public class SnapZoneScale : MonoBehaviour
	{
		[Token(Token = "0x4001E4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Local Scale (x, y and z) of Grabbable when inside the SnapZone")]
		public float Scale;

		[Token(Token = "0x6001EEA")]
		[Address(RVA = "0xC08CA8", Offset = "0xC08CA8", VA = "0xC08CA8")]
		public SnapZoneScale()
		{
		}
	}
	[Token(Token = "0x20004BE")]
	public class SteeringWheel : GrabbableEvents
	{
		[Token(Token = "0x4001E4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Maximum Z value in Local Euler Angles. Can be < -360. Ex : -450")]
		[Header("Rotation Limits")]
		public float MinAngle;

		[Token(Token = "0x4001E4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("Maximum Z value in Local Euler Angles. Can be > 360. Ex : 450")]
		public float MaxAngle;

		[Token(Token = "0x4001E4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Header("Rotation Object")]
		[Tooltip("The Transform to rotate on its Z axis.")]
		public Transform RotatorObject;

		[Token(Token = "0x4001E4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Rotation Speed")]
		[Tooltip("How fast to move the wheel towards the target angle. 0 = Instant.")]
		public float RotationSpeed;

		[Token(Token = "0x4001E4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Tooltip("IF true both hands will effect the rotation of the steering wheel while grabbed with both hands. Set to false if you only want one hand to control the rotation.")]
		[Header("Two-Handed Option")]
		public bool AllowTwoHanded;

		[Token(Token = "0x4001E50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x45")]
		[Header("Return to Center")]
		public bool ReturnToCenter;

		[Token(Token = "0x4001E51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float ReturnToCenterSpeed;

		[Token(Token = "0x4001E52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Header("Debug Options")]
		public Text DebugText;

		[Token(Token = "0x4001E53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Header("Events")]
		[Tooltip("Called if the SteeringWheel changes angle. Returns the current angle in degrees, clamped between MinAngle / MaxAngle")]
		public FloatEvent onAngleChange;

		[Token(Token = "0x4001E54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Called every frame. Returns the current current rotation between -1, 1")]
		public FloatEvent onValueChange;

		[Token(Token = "0x4001E55")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("If true will show an angle helper in editor mode (Gizmos must be enabled)")]
		[Header("Editor Option")]
		public bool ShowEditorGizmos;

		[Token(Token = "0x4001E56")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		protected Vector3 rotatePosition;

		[Token(Token = "0x4001E57")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		protected Vector3 previousPrimaryPosition;

		[Token(Token = "0x4001E58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		protected Vector3 previousSecondaryPosition;

		[Token(Token = "0x4001E59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		protected float targetAngle;

		[Token(Token = "0x4001E5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		protected float previousTargetAngle;

		[Token(Token = "0x4001E5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		protected float smoothedAngle;

		[Token(Token = "0x17000392")]
		public float Angle
		{
			[Token(Token = "0x6001EEB")]
			[Address(RVA = "0xC08CB8", Offset = "0xC08CB8", VA = "0xC08CB8")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000393")]
		public float RawAngle
		{
			[Token(Token = "0x6001EEC")]
			[Address(RVA = "0xC08CD4", Offset = "0xC08CD4", VA = "0xC08CD4")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000394")]
		public float ScaleValue
		{
			[Token(Token = "0x6001EED")]
			[Address(RVA = "0xC08CDC", Offset = "0xC08CDC", VA = "0xC08CDC")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000395")]
		public float ScaleValueInverted
		{
			[Token(Token = "0x6001EEE")]
			[Address(RVA = "0xC08D04", Offset = "0xC08D04", VA = "0xC08D04")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000396")]
		public float AngleInverted
		{
			[Token(Token = "0x6001EEF")]
			[Address(RVA = "0xC08D3C", Offset = "0xC08D3C", VA = "0xC08D3C")]
			get
			{
				return default(float);
			}
		}

		[Token(Token = "0x17000397")]
		public Grabber PrimaryGrabber
		{
			[Token(Token = "0x6001EF0")]
			[Address(RVA = "0xC08D5C", Offset = "0xC08D5C", VA = "0xC08D5C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x17000398")]
		public Grabber SecondaryGrabber
		{
			[Token(Token = "0x6001EF1")]
			[Address(RVA = "0xC08E04", Offset = "0xC08E04", VA = "0xC08E04")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6001EF2")]
		[Address(RVA = "0xC08EA8", Offset = "0xC08EA8", VA = "0xC08EA8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001EF3")]
		[Address(RVA = "0xC08F60", Offset = "0xC08F60", VA = "0xC08F60", Slot = "27")]
		public virtual void UpdateAngleCalculations()
		{
		}

		[Token(Token = "0x6001EF4")]
		[Address(RVA = "0xC09200", Offset = "0xC09200", VA = "0xC09200")]
		public float GetRelativeAngle(Vector3 position1, Vector3 position2)
		{
			return default(float);
		}

		[Token(Token = "0x6001EF5")]
		[Address(RVA = "0xC0933C", Offset = "0xC0933C", VA = "0xC0933C", Slot = "28")]
		public virtual void ApplyAngleToSteeringWheel(float angle)
		{
		}

		[Token(Token = "0x6001EF6")]
		[Address(RVA = "0xC09364", Offset = "0xC09364", VA = "0xC09364", Slot = "29")]
		public virtual void UpdatePreviewText()
		{
		}

		[Token(Token = "0x6001EF7")]
		[Address(RVA = "0xC094E0", Offset = "0xC094E0", VA = "0xC094E0", Slot = "30")]
		public virtual void CallEvents()
		{
		}

		[Token(Token = "0x6001EF8")]
		[Address(RVA = "0xC0957C", Offset = "0xC0957C", VA = "0xC0957C", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6001EF9")]
		[Address(RVA = "0xC09684", Offset = "0xC09684", VA = "0xC09684", Slot = "31")]
		public virtual void ReturnToCenterAngle()
		{
		}

		[Token(Token = "0x6001EFA")]
		[Address(RVA = "0xC08D60", Offset = "0xC08D60", VA = "0xC08D60")]
		public Grabber GetPrimaryGrabber()
		{
			return null;
		}

		[Token(Token = "0x6001EFB")]
		[Address(RVA = "0xC08E08", Offset = "0xC08E08", VA = "0xC08E08")]
		public Grabber GetSecondaryGrabber()
		{
			return null;
		}

		[Token(Token = "0x6001EFC")]
		[Address(RVA = "0xC09724", Offset = "0xC09724", VA = "0xC09724", Slot = "32")]
		public virtual void UpdatePreviousAngle(float angle)
		{
		}

		[Token(Token = "0x6001EFD")]
		[Address(RVA = "0xC0972C", Offset = "0xC0972C", VA = "0xC0972C", Slot = "33")]
		public virtual float GetScaledValue(float value, float min, float max)
		{
			return default(float);
		}

		[Token(Token = "0x6001EFE")]
		[Address(RVA = "0xC0974C", Offset = "0xC0974C", VA = "0xC0974C")]
		public SteeringWheel()
		{
		}
	}
	[Token(Token = "0x20004BF")]
	public class TrackedDevice : MonoBehaviour
	{
		[Token(Token = "0x4001E5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TrackableDevice Device;

		[Token(Token = "0x4001E5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		protected UnityEngine.XR.InputDevice deviceToTrack;

		[Token(Token = "0x4001E5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		protected Vector3 initialLocalPosition;

		[Token(Token = "0x4001E5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		protected Quaternion initialLocalRotation;

		[Token(Token = "0x4001E60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		protected Vector3 currentLocalPosition;

		[Token(Token = "0x4001E61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		protected Quaternion currentLocalRotation;

		[Token(Token = "0x6001EFF")]
		[Address(RVA = "0xC09774", Offset = "0xC09774", VA = "0xC09774", Slot = "4")]
		protected virtual void Awake()
		{
		}

		[Token(Token = "0x6001F00")]
		[Address(RVA = "0xC097C4", Offset = "0xC097C4", VA = "0xC097C4", Slot = "5")]
		protected virtual void OnEnable()
		{
		}

		[Token(Token = "0x6001F01")]
		[Address(RVA = "0xC09838", Offset = "0xC09838", VA = "0xC09838", Slot = "6")]
		protected virtual void OnDisable()
		{
		}

		[Token(Token = "0x6001F02")]
		[Address(RVA = "0xC098AC", Offset = "0xC098AC", VA = "0xC098AC", Slot = "7")]
		protected virtual void Update()
		{
		}

		[Token(Token = "0x6001F03")]
		[Address(RVA = "0xC098D4", Offset = "0xC098D4", VA = "0xC098D4", Slot = "8")]
		protected virtual void FixedUpdate()
		{
		}

		[Token(Token = "0x6001F04")]
		[Address(RVA = "0xC098E0", Offset = "0xC098E0", VA = "0xC098E0", Slot = "9")]
		public virtual void RefreshDeviceStatus()
		{
		}

		[Token(Token = "0x6001F05")]
		[Address(RVA = "0xC099C4", Offset = "0xC099C4", VA = "0xC099C4", Slot = "10")]
		public virtual void UpdateDevice()
		{
		}

		[Token(Token = "0x6001F06")]
		[Address(RVA = "0xC09BBC", Offset = "0xC09BBC", VA = "0xC09BBC", Slot = "11")]
		protected virtual void OnBeforeRender()
		{
		}

		[Token(Token = "0x6001F07")]
		[Address(RVA = "0xC09BC8", Offset = "0xC09BC8", VA = "0xC09BC8")]
		public TrackedDevice()
		{
		}
	}
	[Token(Token = "0x20004C0")]
	public enum TrackableDevice
	{
		[Token(Token = "0x4001E63")]
		HMD,
		[Token(Token = "0x4001E64")]
		LeftController,
		[Token(Token = "0x4001E65")]
		RightController
	}
	[Token(Token = "0x20004C1")]
	public class Arrow : MonoBehaviour
	{
		[Token(Token = "0x20004C2")]
		[CompilerGenerated]
		private sealed class <QueueDestroy>d__14 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001E71")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001E72")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001E73")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Arrow <>4__this;

			[Token(Token = "0x17000399")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001F14")]
				[Address(RVA = "0xC0AD64", Offset = "0xC0AD64", VA = "0xC0AD64", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700039A")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001F16")]
				[Address(RVA = "0xC0ADAC", Offset = "0xC0ADAC", VA = "0xC0ADAC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001F11")]
			[Address(RVA = "0xC0A138", Offset = "0xC0A138", VA = "0xC0A138")]
			[DebuggerHidden]
			public <QueueDestroy>d__14(int <>1__state)
			{
			}

			[Token(Token = "0x6001F12")]
			[Address(RVA = "0xC0ABF4", Offset = "0xC0ABF4", VA = "0xC0ABF4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001F13")]
			[Address(RVA = "0xC0ABF8", Offset = "0xC0ABF8", VA = "0xC0ABF8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001F15")]
			[Address(RVA = "0xC0AD6C", Offset = "0xC0AD6C", VA = "0xC0AD6C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20004C3")]
		[CompilerGenerated]
		private sealed class <ReEnableCollider>d__15 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001E74")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001E75")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001E76")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Arrow <>4__this;

			[Token(Token = "0x4001E77")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <waitFrames>5__2;

			[Token(Token = "0x4001E78")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private int <x>5__3;

			[Token(Token = "0x1700039B")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001F1A")]
				[Address(RVA = "0xC0AE88", Offset = "0xC0AE88", VA = "0xC0AE88", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x1700039C")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001F1C")]
				[Address(RVA = "0xC0AED0", Offset = "0xC0AED0", VA = "0xC0AED0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001F17")]
			[Address(RVA = "0xC0A160", Offset = "0xC0A160", VA = "0xC0A160")]
			[DebuggerHidden]
			public <ReEnableCollider>d__15(int <>1__state)
			{
			}

			[Token(Token = "0x6001F18")]
			[Address(RVA = "0xC0ADB4", Offset = "0xC0ADB4", VA = "0xC0ADB4", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001F19")]
			[Address(RVA = "0xC0ADB8", Offset = "0xC0ADB8", VA = "0xC0ADB8", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001F1B")]
			[Address(RVA = "0xC0AE90", Offset = "0xC0AE90", VA = "0xC0AE90", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001E66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Rigidbody rb;

		[Token(Token = "0x4001E67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Grabbable grab;

		[Token(Token = "0x4001E68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool Flying;

		[Token(Token = "0x4001E69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float ZVel;

		[Token(Token = "0x4001E6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Collider ShaftCollider;

		[Token(Token = "0x4001E6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private AudioSource impactSound;

		[Token(Token = "0x4001E6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float flightTime;

		[Token(Token = "0x4001E6D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float destroyTime;

		[Token(Token = "0x4001E6E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Coroutine queueDestroy;

		[Token(Token = "0x4001E6F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Projectile ProjectileObject;

		[Token(Token = "0x4001E70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private float arrowDamage;

		[Token(Token = "0x6001F08")]
		[Address(RVA = "0xC09BD0", Offset = "0xC09BD0", VA = "0xC09BD0")]
		private void Start()
		{
		}

		[Token(Token = "0x6001F09")]
		[Address(RVA = "0xC09D3C", Offset = "0xC09D3C", VA = "0xC09D3C")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001F0A")]
		[Address(RVA = "0xC09F70", Offset = "0xC09F70", VA = "0xC09F70")]
		public void ShootArrow(Vector3 shotForce)
		{
		}

		[Token(Token = "0x6001F0B")]
		[Address(RVA = "0xC0A0D0", Offset = "0xC0A0D0", VA = "0xC0A0D0")]
		[IteratorStateMachine(typeof(<QueueDestroy>d__14))]
		private IEnumerator QueueDestroy()
		{
			return null;
		}

		[Token(Token = "0x6001F0C")]
		[Address(RVA = "0xC0A068", Offset = "0xC0A068", VA = "0xC0A068")]
		[IteratorStateMachine(typeof(<ReEnableCollider>d__15))]
		private IEnumerator ReEnableCollider()
		{
			return null;
		}

		[Token(Token = "0x6001F0D")]
		[Address(RVA = "0xC0A188", Offset = "0xC0A188", VA = "0xC0A188")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001F0E")]
		[Address(RVA = "0xC0A6A4", Offset = "0xC0A6A4", VA = "0xC0A6A4")]
		private void tryStickArrow(Collision collision)
		{
		}

		[Token(Token = "0x6001F0F")]
		[Address(RVA = "0xC0AAD4", Offset = "0xC0AAD4", VA = "0xC0AAD4")]
		private void playSoundInterval(float fromSeconds, float toSeconds)
		{
		}

		[Token(Token = "0x6001F10")]
		[Address(RVA = "0xC0ABE4", Offset = "0xC0ABE4", VA = "0xC0ABE4")]
		public Arrow()
		{
		}
	}
	[Token(Token = "0x20004C4")]
	public class ArrowGrabArea : MonoBehaviour
	{
		[Token(Token = "0x4001E79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Bow theBow;

		[Token(Token = "0x6001F1D")]
		[Address(RVA = "0xC0AED8", Offset = "0xC0AED8", VA = "0xC0AED8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001F1E")]
		[Address(RVA = "0xC0AF44", Offset = "0xC0AF44", VA = "0xC0AF44")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6001F1F")]
		[Address(RVA = "0xC0B284", Offset = "0xC0B284", VA = "0xC0B284")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6001F20")]
		[Address(RVA = "0xC0B390", Offset = "0xC0B390", VA = "0xC0B390")]
		public ArrowGrabArea()
		{
		}
	}
	[Token(Token = "0x20004C5")]
	public class Bow : GrabbableEvents
	{
		[Token(Token = "0x4001E7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Bow Settings")]
		[Tooltip("")]
		public float BowForce;

		[Token(Token = "0x4001E7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("If True the BowModel Transform will align itself with the grabber holding the arrow")]
		public bool AlignBowToArrow;

		[Token(Token = "0x4001E7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("If AlignBowToArrow is true this transform will align itself with the grabber holding the arrow")]
		public Transform BowModel;

		[Token(Token = "0x4001E7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Arrow Settings")]
		[Tooltip("Arrow will rotate around this if bow is held in left hand or ArrowRestLeftHanded is null")]
		public Transform ArrowRest;

		[Token(Token = "0x4001E7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool CanGrabArrowFromKnock;

		[Token(Token = "0x4001E7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Name of the prefab used to create an arrow. Must be in a /Resources/ directory.")]
		public string ArrowPrefabName;

		[Token(Token = "0x4001E80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Arrow will rotate around this if bow is being held in right hand")]
		public Transform ArrowRestLeftHanded;

		[Token(Token = "0x4001E81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform ArrowKnock;

		[Token(Token = "0x4001E82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Header("Arrow Positioning")]
		public bool IgnoreXPosition;

		[Token(Token = "0x4001E83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		public bool IgnoreYPosition;

		[Token(Token = "0x4001E84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6A")]
		public bool AllowNegativeZ;

		[Token(Token = "0x4001E85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6B")]
		[Header("Arrow Grabbing")]
		public bool CanGrabArrow;

		[Token(Token = "0x4001E86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[HideInInspector]
		public Grabber ClosestGrabber;

		[Token(Token = "0x4001E87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[HideInInspector]
		public Arrow GrabbedArrow;

		[Token(Token = "0x4001E88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Grabbable arrowGrabbable;

		[Token(Token = "0x4001E89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[HideInInspector]
		public Grabber arrowGrabber;

		[Token(Token = "0x4001E8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[HideInInspector]
		public Vector3 LastValidPosition;

		[Token(Token = "0x4001E8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		[Header("String Settings")]
		public float MaxStringDistance;

		[Token(Token = "0x4001E8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public float StringDistance;

		[Token(Token = "0x4001E8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float _lastDrawPercent;

		[Token(Token = "0x4001E8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		private float _lastDrawHaptic;

		[Token(Token = "0x4001E90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private float _lastDrawHapticTime;

		[Token(Token = "0x4001E91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		private bool playedDrawSound;

		[Token(Token = "0x4001E92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Vector3 initialKnockPosition;

		[Token(Token = "0x4001E93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		private bool holdingArrow;

		[Token(Token = "0x4001E94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Grabbable bowGrabbable;

		[Token(Token = "0x4001E95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Header("Debug Text")]
		public Text PercentageUI;

		[Token(Token = "0x4001E96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private List<DrawDefinition> drawDefs;

		[Token(Token = "0x4001E97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		private AudioSource audioSource;

		[Token(Token = "0x4001E98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Vector3 BowUp;

		[Token(Token = "0x4001E99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public float AlignBowSpeed;

		[Token(Token = "0x1700039D")]
		public float DrawPercent
		{
			[Token(Token = "0x6001F21")]
			[Address(RVA = "0xC0B398", Offset = "0xC0B398", VA = "0xC0B398")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001F22")]
			[Address(RVA = "0xC0B3A0", Offset = "0xC0B3A0", VA = "0xC0B3A0")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x6001F23")]
		[Address(RVA = "0xC0B3A8", Offset = "0xC0B3A8", VA = "0xC0B3A8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001F24")]
		[Address(RVA = "0xC0B8F0", Offset = "0xC0B8F0", VA = "0xC0B8F0")]
		private void Update()
		{
		}

		[Token(Token = "0x6001F25")]
		[Address(RVA = "0xC0C254", Offset = "0xC0C254", VA = "0xC0C254")]
		private Transform getArrowRest()
		{
			return null;
		}

		[Token(Token = "0x6001F26")]
		[Address(RVA = "0xC0C1CC", Offset = "0xC0C1CC", VA = "0xC0C1CC")]
		private bool canGrabArrowFromKnock()
		{
			return default(bool);
		}

		[Token(Token = "0x6001F27")]
		[Address(RVA = "0xC0C5C4", Offset = "0xC0C5C4", VA = "0xC0C5C4")]
		private float getGrabArrowInput()
		{
			return default(float);
		}

		[Token(Token = "0x6001F28")]
		[Address(RVA = "0xC0C6F8", Offset = "0xC0C6F8", VA = "0xC0C6F8")]
		private float getGripInput(ControllerHand handSide)
		{
			return default(float);
		}

		[Token(Token = "0x6001F29")]
		[Address(RVA = "0xC0C6B8", Offset = "0xC0C6B8", VA = "0xC0C6B8")]
		private float getTriggerInput(ControllerHand handSide)
		{
			return default(float);
		}

		[Token(Token = "0x6001F2A")]
		[Address(RVA = "0xC0C340", Offset = "0xC0C340", VA = "0xC0C340")]
		private void setKnockPosition()
		{
		}

		[Token(Token = "0x6001F2B")]
		[Address(RVA = "0xC0C570", Offset = "0xC0C570", VA = "0xC0C570")]
		private void checkDrawSound()
		{
		}

		[Token(Token = "0x6001F2C")]
		[Address(RVA = "0xC0BCD8", Offset = "0xC0BCD8", VA = "0xC0BCD8")]
		private void updateDrawDistance()
		{
		}

		[Token(Token = "0x6001F2D")]
		[Address(RVA = "0xC0BE94", Offset = "0xC0BE94", VA = "0xC0BE94")]
		private void checkBowHaptics()
		{
		}

		[Token(Token = "0x6001F2E")]
		[Address(RVA = "0xC0C11C", Offset = "0xC0C11C", VA = "0xC0C11C")]
		private void resetStringPosition()
		{
		}

		[Token(Token = "0x6001F2F")]
		[Address(RVA = "0xC0C750", Offset = "0xC0C750", VA = "0xC0C750", Slot = "27")]
		protected virtual void alignArrow()
		{
		}

		[Token(Token = "0x6001F30")]
		[Address(RVA = "0xC0C878", Offset = "0xC0C878", VA = "0xC0C878", Slot = "28")]
		protected virtual void alignBow()
		{
		}

		[Token(Token = "0x6001F31")]
		[Address(RVA = "0xC0CAFC", Offset = "0xC0CAFC", VA = "0xC0CAFC", Slot = "29")]
		public virtual void ResetBowAlignment()
		{
		}

		[Token(Token = "0x6001F32")]
		[Address(RVA = "0xC0B0E8", Offset = "0xC0B0E8", VA = "0xC0B0E8")]
		public void GrabArrow(Arrow arrow)
		{
		}

		[Token(Token = "0x6001F33")]
		[Address(RVA = "0xC0BFF0", Offset = "0xC0BFF0", VA = "0xC0BFF0")]
		public void ReleaseArrow()
		{
		}

		[Token(Token = "0x6001F34")]
		[Address(RVA = "0xC0CBEC", Offset = "0xC0CBEC", VA = "0xC0CBEC", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x6001F35")]
		[Address(RVA = "0xC0CBD8", Offset = "0xC0CBD8", VA = "0xC0CBD8")]
		private void resetArrowValues()
		{
		}

		[Token(Token = "0x6001F36")]
		[Address(RVA = "0xC0CC10", Offset = "0xC0CC10", VA = "0xC0CC10")]
		private void playSoundInterval(float fromSeconds, float toSeconds, float volume)
		{
		}

		[Token(Token = "0x6001F37")]
		[Address(RVA = "0xC0C738", Offset = "0xC0C738", VA = "0xC0C738")]
		private void playBowDraw()
		{
		}

		[Token(Token = "0x6001F38")]
		[Address(RVA = "0xC0CBBC", Offset = "0xC0CBBC", VA = "0xC0CBBC")]
		private void playBowRelease()
		{
		}

		[Token(Token = "0x6001F39")]
		[Address(RVA = "0xC0CD44", Offset = "0xC0CD44", VA = "0xC0CD44")]
		public Bow()
		{
		}
	}
	[Token(Token = "0x20004C6")]
	public class DrawDefinition
	{
		[Token(Token = "0x1700039E")]
		public float DrawPercentage
		{
			[Token(Token = "0x6001F3B")]
			[Address(RVA = "0xC0CE30", Offset = "0xC0CE30", VA = "0xC0CE30")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001F3C")]
			[Address(RVA = "0xC0CE38", Offset = "0xC0CE38", VA = "0xC0CE38")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x1700039F")]
		public float HapticAmplitude
		{
			[Token(Token = "0x6001F3D")]
			[Address(RVA = "0xC0CE40", Offset = "0xC0CE40", VA = "0xC0CE40")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001F3E")]
			[Address(RVA = "0xC0CE48", Offset = "0xC0CE48", VA = "0xC0CE48")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170003A0")]
		public float HapticFrequency
		{
			[Token(Token = "0x6001F3F")]
			[Address(RVA = "0xC0CE50", Offset = "0xC0CE50", VA = "0xC0CE50")]
			[CompilerGenerated]
			get
			{
				return default(float);
			}
			[Token(Token = "0x6001F40")]
			[Address(RVA = "0xC0CE58", Offset = "0xC0CE58", VA = "0xC0CE58")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x6001F41")]
		[Address(RVA = "0xC0B8E8", Offset = "0xC0B8E8", VA = "0xC0B8E8")]
		public DrawDefinition()
		{
		}
	}
	[Token(Token = "0x20004C7")]
	public class BowArm : MonoBehaviour
	{
		[Token(Token = "0x4001E9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Bow BowItem;

		[Token(Token = "0x4001E9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float BowPercentStart;

		[Token(Token = "0x4001E9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float RotateDegrees;

		[Token(Token = "0x4001EA0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float Speed;

		[Token(Token = "0x4001EA1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Quaternion _startRotation;

		[Token(Token = "0x4001EA2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Quaternion _endRotation;

		[Token(Token = "0x4001EA3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public bool RotateX;

		[Token(Token = "0x4001EA4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		public bool RotateZ;

		[Token(Token = "0x6001F42")]
		[Address(RVA = "0xC0CE60", Offset = "0xC0CE60", VA = "0xC0CE60")]
		private void Start()
		{
		}

		[Token(Token = "0x6001F43")]
		[Address(RVA = "0xC0CF9C", Offset = "0xC0CF9C", VA = "0xC0CF9C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001F44")]
		[Address(RVA = "0xC0D174", Offset = "0xC0D174", VA = "0xC0D174")]
		public BowArm()
		{
		}
	}
	[Token(Token = "0x20004C8")]
	public class BulletHole : MonoBehaviour
	{
		[Token(Token = "0x4001EA5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform BulletHoleDecal;

		[Token(Token = "0x4001EA6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float MaxScale;

		[Token(Token = "0x4001EA7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float MinScale;

		[Token(Token = "0x4001EA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool RandomYRotation;

		[Token(Token = "0x4001EA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float DestroyTime;

		[Token(Token = "0x6001F45")]
		[Address(RVA = "0xC0D198", Offset = "0xC0D198", VA = "0xC0D198")]
		private void Start()
		{
		}

		[Token(Token = "0x6001F46")]
		[Address(RVA = "0xC0D35C", Offset = "0xC0D35C", VA = "0xC0D35C")]
		public void TryAttachTo(Collider col)
		{
		}

		[Token(Token = "0x6001F47")]
		[Address(RVA = "0xC0D488", Offset = "0xC0D488", VA = "0xC0D488")]
		private bool transformIsEqualScale(Transform theTransform)
		{
			return default(bool);
		}

		[Token(Token = "0x6001F48")]
		[Address(RVA = "0xC0D4F8", Offset = "0xC0D4F8", VA = "0xC0D4F8")]
		private void DestroySelf()
		{
		}

		[Token(Token = "0x6001F49")]
		[Address(RVA = "0xC0D584", Offset = "0xC0D584", VA = "0xC0D584")]
		public BulletHole()
		{
		}
	}
	[Token(Token = "0x20004C9")]
	public class CustomCenterOfMass : MonoBehaviour
	{
		[Token(Token = "0x4001EAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Local coordinates to use as center of mass if 'CenterOfMassTransform' is not specified.")]
		[Header("Define Center of Mass")]
		public Vector3 CenterOfMass;

		[Token(Token = "0x4001EAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Use this Transform's local position for the center of mass if specified.")]
		public Transform CenterOfMassTransform;

		[Token(Token = "0x4001EAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("Debug Options")]
		[Tooltip("If true a red sphere will in the editor show where the center of mass will be positioned")]
		public bool ShowGizmo;

		[Token(Token = "0x4001EAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Rigidbody rigid;

		[Token(Token = "0x6001F4A")]
		[Address(RVA = "0xC0D5A8", Offset = "0xC0D5A8", VA = "0xC0D5A8")]
		private void Start()
		{
		}

		[Token(Token = "0x6001F4B")]
		[Address(RVA = "0xC0D614", Offset = "0xC0D614", VA = "0xC0D614", Slot = "4")]
		public virtual void SetCenterOfMass(Vector3 center)
		{
		}

		[Token(Token = "0x6001F4C")]
		[Address(RVA = "0xC0D6C4", Offset = "0xC0D6C4", VA = "0xC0D6C4", Slot = "5")]
		protected virtual Vector3 getThisCenterOfMass()
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001F4D")]
		[Address(RVA = "0xC0D74C", Offset = "0xC0D74C", VA = "0xC0D74C")]
		private void OnDrawGizmos()
		{
		}

		[Token(Token = "0x6001F4E")]
		[Address(RVA = "0xC0D878", Offset = "0xC0D878", VA = "0xC0D878")]
		public CustomCenterOfMass()
		{
		}
	}
	[Token(Token = "0x20004CA")]
	public class DrawerSound : MonoBehaviour
	{
		[Token(Token = "0x4001EAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip DrawerOpenSound;

		[Token(Token = "0x4001EAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float DrawerOpenValue;

		[Token(Token = "0x4001EB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip DrawerCloseSound;

		[Token(Token = "0x4001EB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float DrawerCloseValue;

		[Token(Token = "0x4001EB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool playedOpenSound;

		[Token(Token = "0x4001EB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35")]
		private bool playedCloseSound;

		[Token(Token = "0x6001F4F")]
		[Address(RVA = "0xC0D8E0", Offset = "0xC0D8E0", VA = "0xC0D8E0")]
		public void OnDrawerUpdate(float drawerValue)
		{
		}

		[Token(Token = "0x6001F50")]
		[Address(RVA = "0xC0DA70", Offset = "0xC0DA70", VA = "0xC0DA70")]
		public DrawerSound()
		{
		}
	}
	[Token(Token = "0x20004CB")]
	public class Explosive : MonoBehaviour
	{
		[Token(Token = "0x20004CC")]
		[CompilerGenerated]
		private sealed class <explosionRoutine>d__6 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001EB9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001EBA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001EBB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Explosive <>4__this;

			[Token(Token = "0x170003A1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001F59")]
				[Address(RVA = "0xC0E050", Offset = "0xC0E050", VA = "0xC0E050", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003A2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001F5B")]
				[Address(RVA = "0xC0E098", Offset = "0xC0E098", VA = "0xC0E098", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001F56")]
			[Address(RVA = "0xC0DB10", Offset = "0xC0DB10", VA = "0xC0DB10")]
			[DebuggerHidden]
			public <explosionRoutine>d__6(int <>1__state)
			{
			}

			[Token(Token = "0x6001F57")]
			[Address(RVA = "0xC0DC64", Offset = "0xC0DC64", VA = "0xC0DC64", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001F58")]
			[Address(RVA = "0xC0DC68", Offset = "0xC0DC68", VA = "0xC0DC68", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001F5A")]
			[Address(RVA = "0xC0E058", Offset = "0xC0E058", VA = "0xC0E058", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x20004CD")]
		[CompilerGenerated]
		private sealed class <dealDelayedDamaged>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001EBC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001EBD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001EBE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public float delayTime;

			[Token(Token = "0x4001EBF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public Damageable damageable;

			[Token(Token = "0x4001EC0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public Explosive <>4__this;

			[Token(Token = "0x170003A3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001F5F")]
				[Address(RVA = "0xC0E164", Offset = "0xC0E164", VA = "0xC0E164", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003A4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001F61")]
				[Address(RVA = "0xC0E1AC", Offset = "0xC0E1AC", VA = "0xC0E1AC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001F5C")]
			[Address(RVA = "0xC0DBBC", Offset = "0xC0DBBC", VA = "0xC0DBBC")]
			[DebuggerHidden]
			public <dealDelayedDamaged>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6001F5D")]
			[Address(RVA = "0xC0E0A0", Offset = "0xC0E0A0", VA = "0xC0E0A0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001F5E")]
			[Address(RVA = "0xC0E0A4", Offset = "0xC0E0A4", VA = "0xC0E0A4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001F60")]
			[Address(RVA = "0xC0E16C", Offset = "0xC0E16C", VA = "0xC0E16C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001EB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Objects within this radius will have damage and force applied to it")]
		[Header("Explosion Settings : ")]
		public float ExplosionRadius;

		[Token(Token = "0x4001EB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("Apply damage to an item if it has a Damageable component attached. ")]
		public float ExplosionDamage;

		[Token(Token = "0x4001EB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If an object has a Rigidbody and is within ExplosionRadius, it will have this amount of ExplosionForce added to it")]
		public float ExplosionForce;

		[Token(Token = "0x4001EB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("Add an UpwardsModifier to AddExplosionForce. Use this to make objects fly more up into the air, instead of just outwardly.")]
		public float ExplosiveUpwardsModifier;

		[Token(Token = "0x4001EB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Header("Shown for Debug : ")]
		public bool ShowExplosionRadius;

		[Token(Token = "0x6001F51")]
		[Address(RVA = "0xC0DA88", Offset = "0xC0DA88", VA = "0xC0DA88", Slot = "4")]
		public virtual void DoExplosion()
		{
		}

		[Token(Token = "0x6001F52")]
		[Address(RVA = "0xC0DAA8", Offset = "0xC0DAA8", VA = "0xC0DAA8")]
		[IteratorStateMachine(typeof(<explosionRoutine>d__6))]
		private IEnumerator explosionRoutine()
		{
			return null;
		}

		[Token(Token = "0x6001F53")]
		[Address(RVA = "0xC0DB38", Offset = "0xC0DB38", VA = "0xC0DB38")]
		[IteratorStateMachine(typeof(<dealDelayedDamaged>d__7))]
		private IEnumerator dealDelayedDamaged(Damageable damageable, float delayTime)
		{
			return null;
		}

		[Token(Token = "0x6001F54")]
		[Address(RVA = "0xC0DBE4", Offset = "0xC0DBE4", VA = "0xC0DBE4")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001F55")]
		[Address(RVA = "0xC0DC48", Offset = "0xC0DC48", VA = "0xC0DC48")]
		public Explosive()
		{
		}
	}
	[Token(Token = "0x20004CE")]
	public static class ExtensionMethods
	{
		[Token(Token = "0x6001F62")]
		[Address(RVA = "0xC0E1B4", Offset = "0xC0E1B4", VA = "0xC0E1B4")]
		public static bool GetDown(this ControllerBinding binding)
		{
			return default(bool);
		}
	}
	[Token(Token = "0x20004CF")]
	public class Flashlight : GrabbableEvents
	{
		[Token(Token = "0x4001EC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Light SpotLight;

		[Token(Token = "0x4001EC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform LightSwitch;

		[Token(Token = "0x4001EC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Vector3 originalSwitchPosition;

		[Token(Token = "0x6001F63")]
		[Address(RVA = "0xC0E21C", Offset = "0xC0E21C", VA = "0xC0E21C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001F64")]
		[Address(RVA = "0xC0E254", Offset = "0xC0E254", VA = "0xC0E254", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6001F65")]
		[Address(RVA = "0xC0E2BC", Offset = "0xC0E2BC", VA = "0xC0E2BC", Slot = "18")]
		public override void OnTriggerUp()
		{
		}

		[Token(Token = "0x6001F66")]
		[Address(RVA = "0xC0E304", Offset = "0xC0E304", VA = "0xC0E304")]
		public Flashlight()
		{
		}
	}
	[Token(Token = "0x20004D0")]
	public class FPSText : MonoBehaviour
	{
		[Token(Token = "0x4001EC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Text text;

		[Token(Token = "0x4001EC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private float deltaTime;

		[Token(Token = "0x6001F67")]
		[Address(RVA = "0xC0E30C", Offset = "0xC0E30C", VA = "0xC0E30C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001F68")]
		[Address(RVA = "0xC0E35C", Offset = "0xC0E35C", VA = "0xC0E35C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001F69")]
		[Address(RVA = "0xC0E39C", Offset = "0xC0E39C", VA = "0xC0E39C")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6001F6A")]
		[Address(RVA = "0xC0E460", Offset = "0xC0E460", VA = "0xC0E460")]
		public FPSText()
		{
		}
	}
	[Token(Token = "0x20004D1")]
	public class GrappleShot : GrabbableEvents
	{
		[Token(Token = "0x4001EC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float MaxRange;

		[Token(Token = "0x4001EC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float GrappleReelForce;

		[Token(Token = "0x4001EC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float MinReelDistance;

		[Token(Token = "0x4001EC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public LayerMask GrappleLayers;

		[Token(Token = "0x4001ECA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform MuzzleTransform;

		[Token(Token = "0x4001ECB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Transform HitTargetPrefab;

		[Token(Token = "0x4001ECC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public LineRenderer GrappleLine;

		[Token(Token = "0x4001ECD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public LineRenderer HelperLine;

		[Token(Token = "0x4001ECE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public AudioClip GrappleShotSound;

		[Token(Token = "0x4001ECF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool grappling;

		[Token(Token = "0x4001ED0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x69")]
		private bool wasGrappling;

		[Token(Token = "0x4001ED1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private CharacterController characterController;

		[Token(Token = "0x4001ED2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x4001ED3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private PlayerGravity playerGravity;

		[Token(Token = "0x4001ED4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private PlayerClimbing playerClimbing;

		[Token(Token = "0x4001ED5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private AudioSource audioSource;

		[Token(Token = "0x4001ED6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public float currentGrappleDistance;

		[Token(Token = "0x4001ED7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private bool validTargetFound;

		[Token(Token = "0x4001ED8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9D")]
		private bool isDynamic;

		[Token(Token = "0x4001ED9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Rigidbody grappleTargetRigid;

		[Token(Token = "0x4001EDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Collider grappleTargetCollider;

		[Token(Token = "0x4001EDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Transform grappleTargetParent;

		[Token(Token = "0x4001EDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private bool requireRelease;

		[Token(Token = "0x4001EDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
		private bool climbing;

		[Token(Token = "0x4001EDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public Climbable ClimbHelper;

		[Token(Token = "0x6001F6B")]
		[Address(RVA = "0xC0E468", Offset = "0xC0E468", VA = "0xC0E468")]
		private void Start()
		{
		}

		[Token(Token = "0x6001F6C")]
		[Address(RVA = "0xC0E5FC", Offset = "0xC0E5FC", VA = "0xC0E5FC")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001F6D")]
		[Address(RVA = "0xC0ED04", Offset = "0xC0ED04", VA = "0xC0ED04", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6001F6E")]
		[Address(RVA = "0xC0ED80", Offset = "0xC0ED80", VA = "0xC0ED80")]
		private void updateGrappleDistance()
		{
		}

		[Token(Token = "0x6001F6F")]
		[Address(RVA = "0xC0F500", Offset = "0xC0F500", VA = "0xC0F500", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6001F70")]
		[Address(RVA = "0xC0F508", Offset = "0xC0F508", VA = "0xC0F508", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x6001F71")]
		[Address(RVA = "0xC0F34C", Offset = "0xC0F34C", VA = "0xC0F34C")]
		private void onReleaseGrapple()
		{
		}

		[Token(Token = "0x6001F72")]
		[Address(RVA = "0xC0E674", Offset = "0xC0E674", VA = "0xC0E674")]
		private void drawGrappleHelper()
		{
		}

		[Token(Token = "0x6001F73")]
		[Address(RVA = "0xC0EBCC", Offset = "0xC0EBCC", VA = "0xC0EBCC")]
		private void drawGrappleLine()
		{
		}

		[Token(Token = "0x6001F74")]
		[Address(RVA = "0xC0EC54", Offset = "0xC0EC54", VA = "0xC0EC54")]
		private void hideGrappleLine()
		{
		}

		[Token(Token = "0x6001F75")]
		[Address(RVA = "0xC0F5B8", Offset = "0xC0F5B8", VA = "0xC0F5B8")]
		private void showGrappleHelper(Vector3 pos, Quaternion rot)
		{
		}

		[Token(Token = "0x6001F76")]
		[Address(RVA = "0xC0EAB8", Offset = "0xC0EAB8", VA = "0xC0EAB8")]
		private void hideGrappleHelper()
		{
		}

		[Token(Token = "0x6001F77")]
		[Address(RVA = "0xC0EE5C", Offset = "0xC0EE5C", VA = "0xC0EE5C")]
		private void reelInGrapple(float triggerValue)
		{
		}

		[Token(Token = "0x6001F78")]
		[Address(RVA = "0xC0F268", Offset = "0xC0F268", VA = "0xC0F268")]
		private void shootGrapple()
		{
		}

		[Token(Token = "0x6001F79")]
		[Address(RVA = "0xC0F784", Offset = "0xC0F784", VA = "0xC0F784")]
		private void dropGrapple()
		{
		}

		[Token(Token = "0x6001F7A")]
		[Address(RVA = "0xC0F524", Offset = "0xC0F524", VA = "0xC0F524")]
		private void changeGravity(bool gravityOn)
		{
		}

		[Token(Token = "0x6001F7B")]
		[Address(RVA = "0xC0F790", Offset = "0xC0F790", VA = "0xC0F790")]
		public GrappleShot()
		{
		}
	}
	[Token(Token = "0x20004D2")]
	public class HandJet : GrabbableEvents
	{
		[Token(Token = "0x4001EDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float JetForce;

		[Token(Token = "0x4001EE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public ParticleSystem JetFX;

		[Token(Token = "0x4001EE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CharacterController characterController;

		[Token(Token = "0x4001EE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x4001EE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private PlayerGravity playerGravity;

		[Token(Token = "0x4001EE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private AudioSource audioSource;

		[Token(Token = "0x6001F7C")]
		[Address(RVA = "0xC0F7AC", Offset = "0xC0F7AC", VA = "0xC0F7AC")]
		private void Start()
		{
		}

		[Token(Token = "0x6001F7D")]
		[Address(RVA = "0xC0F91C", Offset = "0xC0F91C", VA = "0xC0F91C", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6001F7E")]
		[Address(RVA = "0xC0FC94", Offset = "0xC0FC94", VA = "0xC0FC94", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6001F7F")]
		[Address(RVA = "0xC0FC9C", Offset = "0xC0FC9C", VA = "0xC0FC9C")]
		public void ChangeGravity(bool gravityOn)
		{
		}

		[Token(Token = "0x6001F80")]
		[Address(RVA = "0xC0FD30", Offset = "0xC0FD30", VA = "0xC0FD30", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x6001F81")]
		[Address(RVA = "0xC0F960", Offset = "0xC0F960", VA = "0xC0F960")]
		private void doJet(float triggerValue)
		{
		}

		[Token(Token = "0x6001F82")]
		[Address(RVA = "0xC0FBD8", Offset = "0xC0FBD8", VA = "0xC0FBD8")]
		private void stopJet()
		{
		}

		[Token(Token = "0x6001F83")]
		[Address(RVA = "0xC0FD4C", Offset = "0xC0FD4C", VA = "0xC0FD4C", Slot = "18")]
		public override void OnTriggerUp()
		{
		}

		[Token(Token = "0x6001F84")]
		[Address(RVA = "0xC0FD68", Offset = "0xC0FD68", VA = "0xC0FD68")]
		public HandJet()
		{
		}
	}
	[Token(Token = "0x20004D3")]
	public class IKDummy : MonoBehaviour
	{
		[Token(Token = "0x4001EE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform ThisEyeBone;

		[Token(Token = "0x4001EE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform PlayerTransform;

		[Token(Token = "0x4001EE7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform HeadFollow;

		[Token(Token = "0x4001EE8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform RightHandFollow;

		[Token(Token = "0x4001EE9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform LeftHandFollow;

		[Token(Token = "0x4001EEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 HandRotationOffset;

		[Token(Token = "0x4001EEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Animator animator;

		[Token(Token = "0x4001EEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform headBone;

		[Token(Token = "0x4001EED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform leftHandDummy;

		[Token(Token = "0x4001EEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform rightHandDummy;

		[Token(Token = "0x4001EEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform leftHandOnPlayer;

		[Token(Token = "0x4001EF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform rightHandOnPlayer;

		[Token(Token = "0x4001EF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform lookatDummy;

		[Token(Token = "0x4001EF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Vector3 localPos;

		[Token(Token = "0x4001EF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		private Quaternion localRot;

		[Token(Token = "0x4001EF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Transform cam;

		[Token(Token = "0x4001EF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Vector3 leftHandLocalPos;

		[Token(Token = "0x4001EF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		private Vector3 rightHandLocalPos;

		[Token(Token = "0x4001EF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Quaternion leftHandLocalRot;

		[Token(Token = "0x4001EF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		private Quaternion rightHandLocalRot;

		[Token(Token = "0x4001EF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public Vector3 LeftHandsOffset;

		[Token(Token = "0x4001EFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public Vector3 RightHandsOffset;

		[Token(Token = "0x6001F85")]
		[Address(RVA = "0xC0FD78", Offset = "0xC0FD78", VA = "0xC0FD78")]
		private void Start()
		{
		}

		[Token(Token = "0x6001F86")]
		[Address(RVA = "0xC0FFDC", Offset = "0xC0FFDC", VA = "0xC0FFDC")]
		public Transform SetParentAndLocalPosRot(string transformName, Transform parentToSet)
		{
			return null;
		}

		[Token(Token = "0x6001F87")]
		[Address(RVA = "0xC100F4", Offset = "0xC100F4", VA = "0xC100F4")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001F88")]
		[Address(RVA = "0xC103B4", Offset = "0xC103B4", VA = "0xC103B4")]
		private void OnAnimatorIK()
		{
		}

		[Token(Token = "0x6001F89")]
		[Address(RVA = "0xC1067C", Offset = "0xC1067C", VA = "0xC1067C")]
		public IKDummy()
		{
		}
	}
	[Token(Token = "0x20004D4")]
	public class LaserPointer : MonoBehaviour
	{
		[Token(Token = "0x4001EFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float MaxRange;

		[Token(Token = "0x4001EFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public LayerMask ValidLayers;

		[Token(Token = "0x4001EFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform LaserEnd;

		[Token(Token = "0x4001EFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool Active;

		[Token(Token = "0x4001EFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private LineRenderer line;

		[Token(Token = "0x6001F8A")]
		[Address(RVA = "0xC10704", Offset = "0xC10704", VA = "0xC10704")]
		private void Start()
		{
		}

		[Token(Token = "0x6001F8B")]
		[Address(RVA = "0xC10754", Offset = "0xC10754", VA = "0xC10754")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x6001F8C")]
		[Address(RVA = "0xC10A78", Offset = "0xC10A78", VA = "0xC10A78")]
		public LaserPointer()
		{
		}
	}
	[Token(Token = "0x20004D5")]
	public class LaserSword : GrabbableEvents
	{
		[Token(Token = "0x4001F00")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Grabbable grabbable;

		[Token(Token = "0x4001F01")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform BladeTransform;

		[Token(Token = "0x4001F02")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform RaycastTransform;

		[Token(Token = "0x4001F03")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public LayerMask LaserCollision;

		[Token(Token = "0x4001F04")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public ParticleSystem CollisionParticle;

		[Token(Token = "0x4001F05")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool BladeEnabled;

		[Token(Token = "0x4001F06")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		private bool SaberSwitchOn;

		[Token(Token = "0x4001F07")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float LaserLength;

		[Token(Token = "0x4001F08")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float LaserActivateSpeed;

		[Token(Token = "0x4001F09")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public AudioSource CollisionAudio;

		[Token(Token = "0x4001F0A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public bool Colliding;

		[Token(Token = "0x6001F8D")]
		[Address(RVA = "0xC10A90", Offset = "0xC10A90", VA = "0xC10A90")]
		private void Start()
		{
		}

		[Token(Token = "0x6001F8E")]
		[Address(RVA = "0xC10B44", Offset = "0xC10B44", VA = "0xC10B44")]
		private void Update()
		{
		}

		[Token(Token = "0x6001F8F")]
		[Address(RVA = "0xC110C4", Offset = "0xC110C4", VA = "0xC110C4", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6001F90")]
		[Address(RVA = "0xC10D34", Offset = "0xC10D34", VA = "0xC10D34")]
		private void checkCollision()
		{
		}

		[Token(Token = "0x6001F91")]
		[Address(RVA = "0xC110E0", Offset = "0xC110E0", VA = "0xC110E0")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001F92")]
		[Address(RVA = "0xC11208", Offset = "0xC11208", VA = "0xC11208")]
		public LaserSword()
		{
		}
	}
	[Token(Token = "0x20004D6")]
	public class LiquidWobble : MonoBehaviour
	{
		[Token(Token = "0x4001F0B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Renderer rend;

		[Token(Token = "0x4001F0C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private Vector3 lastPos;

		[Token(Token = "0x4001F0D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		private Vector3 velocity;

		[Token(Token = "0x4001F0E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 lastRot;

		[Token(Token = "0x4001F0F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 angularVelocity;

		[Token(Token = "0x4001F10")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float MaxWobble;

		[Token(Token = "0x4001F11")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float WobbleSpeed;

		[Token(Token = "0x4001F12")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float Recovery;

		[Token(Token = "0x4001F13")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		private float wobbleAmountX;

		[Token(Token = "0x4001F14")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private float wobbleAmountZ;

		[Token(Token = "0x4001F15")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		private float wobbleAmountToAddX;

		[Token(Token = "0x4001F16")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private float wobbleAmountToAddZ;

		[Token(Token = "0x4001F17")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private float pulse;

		[Token(Token = "0x4001F18")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float time;

		[Token(Token = "0x6001F93")]
		[Address(RVA = "0xC1121C", Offset = "0xC1121C", VA = "0xC1121C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001F94")]
		[Address(RVA = "0xC1126C", Offset = "0xC1126C", VA = "0xC1126C")]
		private void Update()
		{
		}

		[Token(Token = "0x6001F95")]
		[Address(RVA = "0xC1151C", Offset = "0xC1151C", VA = "0xC1151C")]
		public LiquidWobble()
		{
		}
	}
	[Token(Token = "0x20004D7")]
	public class Marker : GrabbableEvents
	{
		[Token(Token = "0x20004D8")]
		[CompilerGenerated]
		private sealed class <WriteRoutine>d__18 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F29")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001F2A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001F2B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Marker <>4__this;

			[Token(Token = "0x170003A5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001FA0")]
				[Address(RVA = "0xC12084", Offset = "0xC12084", VA = "0xC12084", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003A6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001FA2")]
				[Address(RVA = "0xC120CC", Offset = "0xC120CC", VA = "0xC120CC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001F9D")]
			[Address(RVA = "0xC1161C", Offset = "0xC1161C", VA = "0xC1161C")]
			[DebuggerHidden]
			public <WriteRoutine>d__18(int <>1__state)
			{
			}

			[Token(Token = "0x6001F9E")]
			[Address(RVA = "0xC11D88", Offset = "0xC11D88", VA = "0xC11D88", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001F9F")]
			[Address(RVA = "0xC11D8C", Offset = "0xC11D8C", VA = "0xC11D8C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001FA1")]
			[Address(RVA = "0xC1208C", Offset = "0xC1208C", VA = "0xC1208C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001F19")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Material DrawMaterial;

		[Token(Token = "0x4001F1A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Color DrawColor;

		[Token(Token = "0x4001F1B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float LineWidth;

		[Token(Token = "0x4001F1C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Transform RaycastStart;

		[Token(Token = "0x4001F1D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public LayerMask DrawingLayers;

		[Token(Token = "0x4001F1E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float RaycastLength;

		[Token(Token = "0x4001F1F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float MinDrawDistance;

		[Token(Token = "0x4001F20")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float ReuseTolerance;

		[Token(Token = "0x4001F21")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private bool IsNewDraw;

		[Token(Token = "0x4001F22")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		private Vector3 lastDrawPoint;

		[Token(Token = "0x4001F23")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private LineRenderer LineRenderer;

		[Token(Token = "0x4001F24")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Transform root;

		[Token(Token = "0x4001F25")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Transform lastTransform;

		[Token(Token = "0x4001F26")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Coroutine drawRoutine;

		[Token(Token = "0x4001F27")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private float lastLineWidth;

		[Token(Token = "0x4001F28")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private int renderLifeTime;

		[Token(Token = "0x6001F96")]
		[Address(RVA = "0xC11540", Offset = "0xC11540", VA = "0xC11540", Slot = "5")]
		public override void OnGrab(Grabber grabber)
		{
		}

		[Token(Token = "0x6001F97")]
		[Address(RVA = "0xC115EC", Offset = "0xC115EC", VA = "0xC115EC", Slot = "6")]
		public override void OnRelease()
		{
		}

		[Token(Token = "0x6001F98")]
		[Address(RVA = "0xC11584", Offset = "0xC11584", VA = "0xC11584")]
		[IteratorStateMachine(typeof(<WriteRoutine>d__18))]
		private IEnumerator WriteRoutine()
		{
			return null;
		}

		[Token(Token = "0x6001F99")]
		[Address(RVA = "0xC11644", Offset = "0xC11644", VA = "0xC11644")]
		private void InitDraw(Vector3 position, Quaternion rotation, float lineWidth, Color lineColor)
		{
		}

		[Token(Token = "0x6001F9A")]
		[Address(RVA = "0xC117B8", Offset = "0xC117B8", VA = "0xC117B8")]
		private Vector3 DrawPoint(Vector3 lastDrawPoint, Vector3 endPosition, float lineWidth, Color lineColor, Quaternion rotation)
		{
			return default(Vector3);
		}

		[Token(Token = "0x6001F9B")]
		[Address(RVA = "0xC11C98", Offset = "0xC11C98", VA = "0xC11C98")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001F9C")]
		[Address(RVA = "0xC11D50", Offset = "0xC11D50", VA = "0xC11D50")]
		public Marker()
		{
		}
	}
	[Token(Token = "0x20004D9")]
	public class MoveToWaypoint : MonoBehaviour
	{
		[Token(Token = "0x4001F2C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool IsActive;

		[Token(Token = "0x4001F2D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Waypoint Destination;

		[Token(Token = "0x4001F2E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float MovementSpeed;

		[Token(Token = "0x4001F2F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool ReachedDestination;

		[Token(Token = "0x4001F30")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Delay in seconds to way before starting movement towards Destination")]
		public float StartDelay;

		[Token(Token = "0x4001F31")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private bool reachedDelay;

		[Token(Token = "0x4001F32")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private float delayedTime;

		[Token(Token = "0x4001F33")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 previousPosition;

		[Token(Token = "0x4001F34")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Vector3 PositionDifference;

		[Token(Token = "0x4001F35")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool MoveInUpdate;

		[Token(Token = "0x4001F36")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		public bool MoveInFixedUpdate;

		[Token(Token = "0x4001F37")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody rigid;

		[Token(Token = "0x6001FA3")]
		[Address(RVA = "0xC120D4", Offset = "0xC120D4", VA = "0xC120D4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001FA4")]
		[Address(RVA = "0xC12134", Offset = "0xC12134", VA = "0xC12134")]
		private void Update()
		{
		}

		[Token(Token = "0x6001FA5")]
		[Address(RVA = "0xC125B0", Offset = "0xC125B0", VA = "0xC125B0")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001FA6")]
		[Address(RVA = "0xC121EC", Offset = "0xC121EC", VA = "0xC121EC")]
		private void movePlatform(float timeDelta)
		{
		}

		[Token(Token = "0x6001FA7")]
		[Address(RVA = "0xC125DC", Offset = "0xC125DC", VA = "0xC125DC")]
		private void resetDelayStatus()
		{
		}

		[Token(Token = "0x6001FA8")]
		[Address(RVA = "0xC125E8", Offset = "0xC125E8", VA = "0xC125E8")]
		public MoveToWaypoint()
		{
		}
	}
	[Token(Token = "0x20004DA")]
	public class MovingPlatform : MonoBehaviour
	{
		[Token(Token = "0x4001F38")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("If set to ParentToPlatform the CharacterController will be parented to any MovingPlatform object below it each frame. If set to PositionDifference the movement will be read from the PositionDifference property of the MoveToWaypoint object below it. ")]
		public MovingPlatformMethod MovementMethod;

		[Token(Token = "0x4001F39")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[HideInInspector]
		public Vector3 PositionDelta;

		[Token(Token = "0x4001F3A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public Quaternion RotationDelta;

		[Token(Token = "0x4001F3B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		protected Vector3 previousPosition;

		[Token(Token = "0x4001F3C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		protected Quaternion previousRotation;

		[Token(Token = "0x6001FA9")]
		[Address(RVA = "0xC12608", Offset = "0xC12608", VA = "0xC12608")]
		protected void Update()
		{
		}

		[Token(Token = "0x6001FAA")]
		[Address(RVA = "0xC12750", Offset = "0xC12750", VA = "0xC12750")]
		public MovingPlatform()
		{
		}
	}
	[Token(Token = "0x20004DB")]
	public enum MovingPlatformMethod
	{
		[Token(Token = "0x4001F3E")]
		ParentToPlatform,
		[Token(Token = "0x4001F3F")]
		PositionDifference
	}
	[Token(Token = "0x20004DC")]
	public class PlayerScaler : MonoBehaviour
	{
		[Token(Token = "0x4001F40")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Transform> ScaleObjects;

		[Token(Token = "0x4001F41")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float Scale;

		[Token(Token = "0x4001F42")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float scaleSpeed;

		[Token(Token = "0x6001FAB")]
		[Address(RVA = "0xC12758", Offset = "0xC12758", VA = "0xC12758")]
		private void Update()
		{
		}

		[Token(Token = "0x6001FAC")]
		[Address(RVA = "0xC12990", Offset = "0xC12990", VA = "0xC12990")]
		public PlayerScaler()
		{
		}
	}
	[Token(Token = "0x20004DD")]
	public class ProjectileLauncher : MonoBehaviour
	{
		[Token(Token = "0x4001F43")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject ProjectileObject;

		[Token(Token = "0x4001F44")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float ProjectileForce;

		[Token(Token = "0x4001F45")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip LaunchSound;

		[Token(Token = "0x4001F46")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public ParticleSystem LaunchParticles;

		[Token(Token = "0x4001F47")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform MuzzleTransform;

		[Token(Token = "0x4001F48")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float _initialProjectileForce;

		[Token(Token = "0x6001FAD")]
		[Address(RVA = "0xC129A4", Offset = "0xC129A4", VA = "0xC129A4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001FAE")]
		[Address(RVA = "0xC129B0", Offset = "0xC129B0", VA = "0xC129B0")]
		public GameObject ShootProjectile(float projectileForce)
		{
			return null;
		}

		[Token(Token = "0x6001FAF")]
		[Address(RVA = "0xC12C5C", Offset = "0xC12C5C", VA = "0xC12C5C")]
		public void ShootProjectile()
		{
		}

		[Token(Token = "0x6001FB0")]
		[Address(RVA = "0xC12C64", Offset = "0xC12C64", VA = "0xC12C64")]
		public void SetForce(float force)
		{
		}

		[Token(Token = "0x6001FB1")]
		[Address(RVA = "0xC12C6C", Offset = "0xC12C6C", VA = "0xC12C6C")]
		public float GetInitialProjectileForce()
		{
			return default(float);
		}

		[Token(Token = "0x6001FB2")]
		[Address(RVA = "0xC12C74", Offset = "0xC12C74", VA = "0xC12C74")]
		public ProjectileLauncher()
		{
		}
	}
	[Token(Token = "0x20004DE")]
	public class TimeController : MonoBehaviour
	{
		[Token(Token = "0x20004DF")]
		[CompilerGenerated]
		private sealed class <resumeTimeRoutine>d__19 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F55")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001F56")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001F57")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TimeController <>4__this;

			[Token(Token = "0x170003A8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001FBE")]
				[Address(RVA = "0xC131F0", Offset = "0xC131F0", VA = "0xC131F0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003A9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001FC0")]
				[Address(RVA = "0xC13238", Offset = "0xC13238", VA = "0xC13238", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001FBB")]
			[Address(RVA = "0xC1304C", Offset = "0xC1304C", VA = "0xC1304C")]
			[DebuggerHidden]
			public <resumeTimeRoutine>d__19(int <>1__state)
			{
			}

			[Token(Token = "0x6001FBC")]
			[Address(RVA = "0xC1308C", Offset = "0xC1308C", VA = "0xC1308C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001FBD")]
			[Address(RVA = "0xC13090", Offset = "0xC13090", VA = "0xC13090", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001FBF")]
			[Address(RVA = "0xC131F8", Offset = "0xC131F8", VA = "0xC131F8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001F49")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Timescale to slow down to if slow down key is pressed")]
		public float SlowTimeScale;

		[Token(Token = "0x4001F4A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If true, Y Button will always slow time. Useful for debugging. Otherwise call SlowTime / ResumeTime yourself")]
		public bool YKeySlowsTime;

		[Token(Token = "0x4001F4B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Input Action used to initiate slow time")]
		public InputActionReference SlowTimeAction;

		[Token(Token = "0x4001F4C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("(Optional) Play this clip when starting to slow time")]
		public AudioClip SlowTimeClip;

		[Token(Token = "0x4001F4D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("(Optional) Play this clip when ending slow mo")]
		public AudioClip SpeedupTimeClip;

		[Token(Token = "0x4001F4E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("If true, will set Time.fixedDeltaTime to the device refresh rate")]
		public bool SetFixedDelta;

		[Token(Token = "0x4001F4F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x39")]
		private bool _slowingTime;

		[Token(Token = "0x4001F50")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3A")]
		private bool routineRunning;

		[Token(Token = "0x4001F51")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float originalFixedDelta;

		[Token(Token = "0x4001F52")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private AudioSource audioSource;

		[Token(Token = "0x4001F53")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public bool ForceTimeScale;

		[Token(Token = "0x4001F54")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private IEnumerator resumeRoutine;

		[Token(Token = "0x170003A7")]
		public bool TimeSlowing
		{
			[Token(Token = "0x6001FB3")]
			[Address(RVA = "0xC12C84", Offset = "0xC12C84", VA = "0xC12C84")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6001FB4")]
		[Address(RVA = "0xC12C8C", Offset = "0xC12C8C", VA = "0xC12C8C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001FB5")]
		[Address(RVA = "0xC12D18", Offset = "0xC12D18", VA = "0xC12D18")]
		private void Update()
		{
		}

		[Token(Token = "0x6001FB6")]
		[Address(RVA = "0xC12EF0", Offset = "0xC12EF0", VA = "0xC12EF0", Slot = "4")]
		public virtual bool SlowTimeInputDown()
		{
			return default(bool);
		}

		[Token(Token = "0x6001FB7")]
		[Address(RVA = "0xC12D50", Offset = "0xC12D50", VA = "0xC12D50")]
		public void SlowTime()
		{
		}

		[Token(Token = "0x6001FB8")]
		[Address(RVA = "0xC12E98", Offset = "0xC12E98", VA = "0xC12E98")]
		public void ResumeTime()
		{
		}

		[Token(Token = "0x6001FB9")]
		[Address(RVA = "0xC12FE4", Offset = "0xC12FE4", VA = "0xC12FE4")]
		[IteratorStateMachine(typeof(<resumeTimeRoutine>d__19))]
		private IEnumerator resumeTimeRoutine()
		{
			return null;
		}

		[Token(Token = "0x6001FBA")]
		[Address(RVA = "0xC13074", Offset = "0xC13074", VA = "0xC13074")]
		public TimeController()
		{
		}
	}
	[Token(Token = "0x20004E0")]
	public class VehicleController : MonoBehaviour
	{
		[Token(Token = "0x20004E1")]
		[CompilerGenerated]
		private sealed class <crankEngine>d__24 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001F6D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001F6E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001F6F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public VehicleController <>4__this;

			[Token(Token = "0x170003AA")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6001FD9")]
				[Address(RVA = "0xC13DD4", Offset = "0xC13DD4", VA = "0xC13DD4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003AB")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6001FDB")]
				[Address(RVA = "0xC13E1C", Offset = "0xC13E1C", VA = "0xC13E1C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001FD6")]
			[Address(RVA = "0xC134C4", Offset = "0xC134C4", VA = "0xC134C4")]
			[DebuggerHidden]
			public <crankEngine>d__24(int <>1__state)
			{
			}

			[Token(Token = "0x6001FD7")]
			[Address(RVA = "0xC13BE0", Offset = "0xC13BE0", VA = "0xC13BE0", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001FD8")]
			[Address(RVA = "0xC13BE4", Offset = "0xC13BE4", VA = "0xC13BE4", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6001FDA")]
			[Address(RVA = "0xC13DDC", Offset = "0xC13DDC", VA = "0xC13DDC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001F58")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Engine Properties")]
		public float MotorTorque;

		[Token(Token = "0x4001F59")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float MaxSpeed;

		[Token(Token = "0x4001F5A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float MaxSteeringAngle;

		[Token(Token = "0x4001F5B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("If true and SteeringGrabbable is being held, the right / left trigger will act as input for acceleration / defceleration.")]
		[Header("Steering Grabbable")]
		public bool CheckTriggerInput;

		[Token(Token = "0x4001F5C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Grabbable SteeringGrabbable;

		[Token(Token = "0x4001F5D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Is the Engine on and ready for input. If false, engine will need to be started first.")]
		[Header("Engine Status")]
		public bool EngineOn;

		[Token(Token = "0x4001F5E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("How long it takes to start the engine")]
		public float CrankTime;

		[Token(Token = "0x4001F5F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Output the current speed to this label if specified")]
		[Header("Speedometer")]
		public Text SpeedLabel;

		[Token(Token = "0x4001F60")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Header("Audio Setup")]
		public AudioSource EngineAudio;

		[Token(Token = "0x4001F61")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Sound to play / loop when EngineOn = true. Pitch will be altered according to speed.")]
		public AudioClip IdleSound;

		[Token(Token = "0x4001F62")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("If specified this clip will play before the engine is turned on. Clip to play when starting the Engine.")]
		public AudioClip CrankSound;

		[Token(Token = "0x4001F63")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AudioClip CollisionSound;

		[Token(Token = "0x4001F64")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[HideInInspector]
		public float SteeringAngle;

		[Token(Token = "0x4001F65")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[HideInInspector]
		public float MotorInput;

		[Token(Token = "0x4001F66")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[HideInInspector]
		public float CurrentSpeed;

		[Token(Token = "0x4001F67")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Header("Wheel Configuration")]
		public List<WheelObject> Wheels;

		[Token(Token = "0x4001F68")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Vector3 initialPosition;

		[Token(Token = "0x4001F69")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Rigidbody rb;

		[Token(Token = "0x4001F6A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool wasHoldingSteering;

		[Token(Token = "0x4001F6B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x91")]
		private bool isHoldingSteering;

		[Token(Token = "0x4001F6C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x92")]
		protected bool crankingEngine;

		[Token(Token = "0x6001FC1")]
		[Address(RVA = "0xC13240", Offset = "0xC13240", VA = "0xC13240")]
		private void Start()
		{
		}

		[Token(Token = "0x6001FC2")]
		[Address(RVA = "0xC132B4", Offset = "0xC132B4", VA = "0xC132B4")]
		private void Update()
		{
		}

		[Token(Token = "0x6001FC3")]
		[Address(RVA = "0xC13420", Offset = "0xC13420", VA = "0xC13420", Slot = "4")]
		public virtual void CrankEngine()
		{
		}

		[Token(Token = "0x6001FC4")]
		[Address(RVA = "0xC1345C", Offset = "0xC1345C", VA = "0xC1345C")]
		[IteratorStateMachine(typeof(<crankEngine>d__24))]
		private IEnumerator crankEngine()
		{
			return null;
		}

		[Token(Token = "0x6001FC5")]
		[Address(RVA = "0xC134EC", Offset = "0xC134EC", VA = "0xC134EC", Slot = "5")]
		public virtual void CheckOutOfBounds()
		{
		}

		[Token(Token = "0x6001FC6")]
		[Address(RVA = "0xC13548", Offset = "0xC13548", VA = "0xC13548", Slot = "6")]
		public virtual void GetTorqueInputFromTriggers()
		{
		}

		[Token(Token = "0x6001FC7")]
		[Address(RVA = "0xC13604", Offset = "0xC13604", VA = "0xC13604")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6001FC8")]
		[Address(RVA = "0xC1379C", Offset = "0xC1379C", VA = "0xC1379C", Slot = "7")]
		public virtual void UpdateWheelTorque()
		{
		}

		[Token(Token = "0x6001FC9")]
		[Address(RVA = "0xC138A4", Offset = "0xC138A4", VA = "0xC138A4", Slot = "8")]
		public virtual void SetSteeringAngle(float steeringAngle)
		{
		}

		[Token(Token = "0x6001FCA")]
		[Address(RVA = "0xC138AC", Offset = "0xC138AC", VA = "0xC138AC", Slot = "9")]
		public virtual void SetSteeringAngleInverted(float steeringAngle)
		{
		}

		[Token(Token = "0x6001FCB")]
		[Address(RVA = "0xC138B8", Offset = "0xC138B8", VA = "0xC138B8", Slot = "10")]
		public virtual void SetSteeringAngle(Vector2 steeringAngle)
		{
		}

		[Token(Token = "0x6001FCC")]
		[Address(RVA = "0xC138C0", Offset = "0xC138C0", VA = "0xC138C0", Slot = "11")]
		public virtual void SetSteeringAngleInverted(Vector2 steeringAngle)
		{
		}

		[Token(Token = "0x6001FCD")]
		[Address(RVA = "0xC138CC", Offset = "0xC138CC", VA = "0xC138CC", Slot = "12")]
		public virtual void SetMotorTorqueInput(float input)
		{
		}

		[Token(Token = "0x6001FCE")]
		[Address(RVA = "0xC138D4", Offset = "0xC138D4", VA = "0xC138D4", Slot = "13")]
		public virtual void SetMotorTorqueInputInverted(float input)
		{
		}

		[Token(Token = "0x6001FCF")]
		[Address(RVA = "0xC138E0", Offset = "0xC138E0", VA = "0xC138E0", Slot = "14")]
		public virtual void SetMotorTorqueInput(Vector2 input)
		{
		}

		[Token(Token = "0x6001FD0")]
		[Address(RVA = "0xC138E8", Offset = "0xC138E8", VA = "0xC138E8", Slot = "15")]
		public virtual void SetMotorTorqueInputInverted(Vector2 input)
		{
		}

		[Token(Token = "0x6001FD1")]
		[Address(RVA = "0xC138F4", Offset = "0xC138F4", VA = "0xC138F4", Slot = "16")]
		public virtual void UpdateWheelVisuals(WheelObject wheel)
		{
		}

		[Token(Token = "0x6001FD2")]
		[Address(RVA = "0xC139D8", Offset = "0xC139D8", VA = "0xC139D8", Slot = "17")]
		public virtual void UpdateEngineAudio()
		{
		}

		[Token(Token = "0x6001FD3")]
		[Address(RVA = "0xC13A8C", Offset = "0xC13A8C", VA = "0xC13A8C")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6001FD4")]
		[Address(RVA = "0xC136BC", Offset = "0xC136BC", VA = "0xC136BC")]
		private float correctValue(float inputValue)
		{
			return default(float);
		}

		[Token(Token = "0x6001FD5")]
		[Address(RVA = "0xC13BB0", Offset = "0xC13BB0", VA = "0xC13BB0")]
		public VehicleController()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x20004E2")]
	public class WheelObject
	{
		[Token(Token = "0x4001F70")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public WheelCollider Wheel;

		[Token(Token = "0x4001F71")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform WheelVisual;

		[Token(Token = "0x4001F72")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool ApplyTorque;

		[Token(Token = "0x4001F73")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool ApplySteering;

		[Token(Token = "0x6001FDC")]
		[Address(RVA = "0xC13E24", Offset = "0xC13E24", VA = "0xC13E24")]
		public WheelObject()
		{
		}
	}
	[Token(Token = "0x20004E3")]
	public class VREmulator : MonoBehaviour
	{
		[Token(Token = "0x4001F74")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Header("Enable / Disable : ")]
		[Tooltip("Use Emulator if true and HMDIsActive is false")]
		public bool EmulatorEnabled;

		[Token(Token = "0x4001F75")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Header("Key Bindings : ")]
		public KeyCode PlayerUp;

		[Token(Token = "0x4001F76")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public KeyCode PlayerDown;

		[Token(Token = "0x4001F77")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public KeyCode RightTrigger;

		[Token(Token = "0x4001F78")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public KeyCode RightGrip;

		[Token(Token = "0x4001F79")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public KeyCode RightThumbNear;

		[Token(Token = "0x4001F7A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public KeyCode LeftTrigger;

		[Token(Token = "0x4001F7B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public KeyCode LeftGrip;

		[Token(Token = "0x4001F7C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public KeyCode LeftThumbNear;

		[Token(Token = "0x4001F7D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float mouseRotationX;

		[Token(Token = "0x4001F7E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private float mouseRotationY;

		[Token(Token = "0x4001F7F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		[Header("Camera Look : ")]
		public float MouseSensitivityX;

		[Token(Token = "0x4001F80")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float MouseSensitivityY;

		[Token(Token = "0x4001F81")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public float MinimumCameraY;

		[Token(Token = "0x4001F82")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public float MaximumCameraY;

		[Token(Token = "0x4001F83")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Transform mainCameraTransform;

		[Token(Token = "0x4001F84")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Transform leftControllerTranform;

		[Token(Token = "0x4001F85")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Transform rightControllerTranform;

		[Token(Token = "0x4001F86")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform leftHandAnchor;

		[Token(Token = "0x4001F87")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Transform rightHandAnchor;

		[Token(Token = "0x4001F88")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private BNGPlayerController player;

		[Token(Token = "0x4001F89")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private SmoothLocomotion smoothLocomotion;

		[Token(Token = "0x4001F8A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private bool didFirstActivate;

		[Token(Token = "0x4001F8B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Grabber grabberLeft;

		[Token(Token = "0x4001F8C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Grabber grabberRight;

		[Token(Token = "0x4001F8D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private float _originalPlayerYOffset;

		[Token(Token = "0x4001F8E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		[Header("Shown for Debug : ")]
		public bool HMDIsActive;

		[Token(Token = "0x4001F8F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public Vector3 LeftControllerPosition;

		[Token(Token = "0x4001F90")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public Vector3 RightControllerPosition;

		[Token(Token = "0x4001F91")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private bool isQuitting;

		[Token(Token = "0x6001FDD")]
		[Address(RVA = "0xC13E2C", Offset = "0xC13E2C", VA = "0xC13E2C")]
		private void Start()
		{
		}

		[Token(Token = "0x6001FDE")]
		[Address(RVA = "0xC140A8", Offset = "0xC140A8", VA = "0xC140A8")]
		public void OnBeforeRender()
		{
		}

		[Token(Token = "0x6001FDF")]
		[Address(RVA = "0xC14134", Offset = "0xC14134", VA = "0xC14134")]
		private void onFirstActivate()
		{
		}

		[Token(Token = "0x6001FE0")]
		[Address(RVA = "0xC14158", Offset = "0xC14158", VA = "0xC14158")]
		private void Update()
		{
		}

		[Token(Token = "0x6001FE1")]
		[Address(RVA = "0xC1423C", Offset = "0xC1423C", VA = "0xC1423C")]
		public void CheckHeadControls()
		{
		}

		[Token(Token = "0x6001FE2")]
		[Address(RVA = "0xC144B0", Offset = "0xC144B0", VA = "0xC144B0")]
		public void UpdateInputs()
		{
		}

		[Token(Token = "0x6001FE3")]
		[Address(RVA = "0xC14370", Offset = "0xC14370", VA = "0xC14370")]
		public void CheckPlayerControls()
		{
		}

		[Token(Token = "0x6001FE4")]
		[Address(RVA = "0xC14BF8", Offset = "0xC14BF8", VA = "0xC14BF8", Slot = "4")]
		public virtual void UpdateControllerPositions()
		{
		}

		[Token(Token = "0x6001FE5")]
		[Address(RVA = "0xC149A0", Offset = "0xC149A0", VA = "0xC149A0")]
		private void checkGrabbers()
		{
		}

		[Token(Token = "0x6001FE6")]
		[Address(RVA = "0xC14D0C", Offset = "0xC14D0C", VA = "0xC14D0C", Slot = "5")]
		public virtual void ResetHands()
		{
		}

		[Token(Token = "0x6001FE7")]
		[Address(RVA = "0xC14E78", Offset = "0xC14E78", VA = "0xC14E78", Slot = "6")]
		public virtual void ResetAll()
		{
		}

		[Token(Token = "0x6001FE8")]
		[Address(RVA = "0xC14F50", Offset = "0xC14F50", VA = "0xC14F50")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6001FE9")]
		[Address(RVA = "0xC15050", Offset = "0xC15050", VA = "0xC15050")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6001FEA")]
		[Address(RVA = "0xC1516C", Offset = "0xC1516C", VA = "0xC1516C")]
		private void OnApplicationQuit()
		{
		}

		[Token(Token = "0x6001FEB")]
		[Address(RVA = "0xC15178", Offset = "0xC15178", VA = "0xC15178")]
		public VREmulator()
		{
		}
	}
	[Token(Token = "0x20004E4")]
	public class Waypoint : MonoBehaviour
	{
		[Token(Token = "0x4001F92")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Waypoint Destination;

		[Token(Token = "0x6001FEC")]
		[Address(RVA = "0xC151D4", Offset = "0xC151D4", VA = "0xC151D4")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001FED")]
		[Address(RVA = "0xC1532C", Offset = "0xC1532C", VA = "0xC1532C")]
		public Waypoint()
		{
		}
	}
	[Token(Token = "0x20004E5")]
	public class Zipline : GrabbableEvents
	{
		[Token(Token = "0x4001F93")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform ZiplineStart;

		[Token(Token = "0x4001F94")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Transform ZiplineEnd;

		[Token(Token = "0x4001F95")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float ZiplineSpeed;

		[Token(Token = "0x4001F96")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public bool UseLinearMovement;

		[Token(Token = "0x4001F97")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float lastMoveTime;

		[Token(Token = "0x4001F98")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool movingForward;

		[Token(Token = "0x4001F99")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private AudioSource audioSource;

		[Token(Token = "0x6001FEE")]
		[Address(RVA = "0xC15334", Offset = "0xC15334", VA = "0xC15334")]
		private void Start()
		{
		}

		[Token(Token = "0x6001FEF")]
		[Address(RVA = "0xC153F8", Offset = "0xC153F8", VA = "0xC153F8")]
		private void Update()
		{
		}

		[Token(Token = "0x6001FF0")]
		[Address(RVA = "0xC154C0", Offset = "0xC154C0", VA = "0xC154C0")]
		private void OnDrawGizmosSelected()
		{
		}

		[Token(Token = "0x6001FF1")]
		[Address(RVA = "0xC155D8", Offset = "0xC155D8", VA = "0xC155D8", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x6001FF2")]
		[Address(RVA = "0xC15910", Offset = "0xC15910", VA = "0xC15910", Slot = "19")]
		public override void OnButton1()
		{
		}

		[Token(Token = "0x6001FF3")]
		[Address(RVA = "0xC15948", Offset = "0xC15948", VA = "0xC15948", Slot = "22")]
		public override void OnButton2()
		{
		}

		[Token(Token = "0x6001FF4")]
		[Address(RVA = "0xC1562C", Offset = "0xC1562C", VA = "0xC1562C")]
		private void moveTowards(Vector3 pos, bool forwardDirection)
		{
		}

		[Token(Token = "0x6001FF5")]
		[Address(RVA = "0xC15980", Offset = "0xC15980", VA = "0xC15980")]
		public Zipline()
		{
		}
	}
	[Token(Token = "0x20004E6")]
	public class ControllerOffsetHelper : MonoBehaviour
	{
		[Token(Token = "0x20004E7")]
		[CompilerGenerated]
		private sealed class <checkForController>d__7 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001FA0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001FA1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001FA2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public ControllerOffsetHelper <>4__this;

			[Token(Token = "0x170003AC")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002000")]
				[Address(RVA = "0xC16064", Offset = "0xC16064", VA = "0xC16064", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003AD")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002002")]
				[Address(RVA = "0xC160AC", Offset = "0xC160AC", VA = "0xC160AC", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6001FFD")]
			[Address(RVA = "0xC15A9C", Offset = "0xC15A9C", VA = "0xC15A9C")]
			[DebuggerHidden]
			public <checkForController>d__7(int <>1__state)
			{
			}

			[Token(Token = "0x6001FFE")]
			[Address(RVA = "0xC15F70", Offset = "0xC15F70", VA = "0xC15F70", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6001FFF")]
			[Address(RVA = "0xC15F74", Offset = "0xC15F74", VA = "0xC15F74", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002001")]
			[Address(RVA = "0xC1606C", Offset = "0xC1606C", VA = "0xC1606C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001F9A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public ControllerHand ControllerHand;

		[Token(Token = "0x4001F9B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[SerializeField]
		[Tooltip("The model of controller found")]
		[Header("Shown for Debug :")]
		private string thisControllerModel;

		[Token(Token = "0x4001F9C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[SerializeField]
		private ControllerOffset thisOffset;

		[Token(Token = "0x4001F9D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("The position offset is defined within this script and loaded once the controller is found.")]
		public Vector3 OffsetPosition;

		[Token(Token = "0x4001F9E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("The rotation offset is defined within this script and loaded once the controller is found.")]
		public Vector3 OffsetRotation;

		[Token(Token = "0x4001F9F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<ControllerOffset> ControllerOffsets;

		[Token(Token = "0x6001FF6")]
		[Address(RVA = "0xC159A4", Offset = "0xC159A4", VA = "0xC159A4")]
		private void Start()
		{
		}

		[Token(Token = "0x6001FF7")]
		[Address(RVA = "0xC15A34", Offset = "0xC15A34", VA = "0xC15A34")]
		[IteratorStateMachine(typeof(<checkForController>d__7))]
		private IEnumerator checkForController()
		{
			return null;
		}

		[Token(Token = "0x6001FF8")]
		[Address(RVA = "0xC15AC4", Offset = "0xC15AC4", VA = "0xC15AC4", Slot = "4")]
		public virtual void OnControllerFound()
		{
		}

		[Token(Token = "0x6001FF9")]
		[Address(RVA = "0xC15BD4", Offset = "0xC15BD4", VA = "0xC15BD4", Slot = "5")]
		public virtual ControllerOffset GetControllerOffset(string controllerName)
		{
			return null;
		}

		[Token(Token = "0x6001FFA")]
		[Address(RVA = "0xC15C78", Offset = "0xC15C78", VA = "0xC15C78", Slot = "6")]
		public virtual void DefineControllerOffsets()
		{
		}

		[Token(Token = "0x6001FFB")]
		[Address(RVA = "0xC15F3C", Offset = "0xC15F3C", VA = "0xC15F3C")]
		public ControllerOffsetHelper()
		{
		}
	}
	[Token(Token = "0x20004E8")]
	public class ControllerOffset
	{
		[Token(Token = "0x170003AE")]
		public string ControllerName
		{
			[Token(Token = "0x6002003")]
			[Address(RVA = "0xC160B4", Offset = "0xC160B4", VA = "0xC160B4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002004")]
			[Address(RVA = "0xC160BC", Offset = "0xC160BC", VA = "0xC160BC")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170003AF")]
		public Vector3 LeftControllerPositionOffset
		{
			[Token(Token = "0x6002005")]
			[Address(RVA = "0xC160C4", Offset = "0xC160C4", VA = "0xC160C4")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6002006")]
			[Address(RVA = "0xC160D0", Offset = "0xC160D0", VA = "0xC160D0")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170003B0")]
		public Vector3 RightControllerPositionOffset
		{
			[Token(Token = "0x6002007")]
			[Address(RVA = "0xC160DC", Offset = "0xC160DC", VA = "0xC160DC")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x6002008")]
			[Address(RVA = "0xC160E8", Offset = "0xC160E8", VA = "0xC160E8")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170003B1")]
		public Vector3 LeftControllerRotationOffset
		{
			[Token(Token = "0x6002009")]
			[Address(RVA = "0xC160F4", Offset = "0xC160F4", VA = "0xC160F4")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600200A")]
			[Address(RVA = "0xC16100", Offset = "0xC16100", VA = "0xC16100")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x170003B2")]
		public Vector3 RightControlleRotationOffset
		{
			[Token(Token = "0x600200B")]
			[Address(RVA = "0xC1610C", Offset = "0xC1610C", VA = "0xC1610C")]
			[CompilerGenerated]
			get
			{
				return default(Vector3);
			}
			[Token(Token = "0x600200C")]
			[Address(RVA = "0xC16118", Offset = "0xC16118", VA = "0xC16118")]
			[CompilerGenerated]
			set
			{
			}
		}

		[Token(Token = "0x600200D")]
		[Address(RVA = "0xC15F34", Offset = "0xC15F34", VA = "0xC15F34")]
		public ControllerOffset()
		{
		}
	}
	[Token(Token = "0x20004E9")]
	public class DetachableLimb : MonoBehaviour
	{
		[Token(Token = "0x4001FA8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform ShrinkBone;

		[Token(Token = "0x4001FA9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject ReplaceGrabbableWith;

		[Token(Token = "0x4001FAA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject EnableOnDetach;

		[Token(Token = "0x600200E")]
		[Address(RVA = "0xC16124", Offset = "0xC16124", VA = "0xC16124")]
		public void DoDismemberment(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x600200F")]
		[Address(RVA = "0xC163D4", Offset = "0xC163D4", VA = "0xC163D4")]
		public void ReverseDismemberment()
		{
		}

		[Token(Token = "0x6002010")]
		[Address(RVA = "0xC164F4", Offset = "0xC164F4", VA = "0xC164F4")]
		public DetachableLimb()
		{
		}
	}
	[Token(Token = "0x20004EA")]
	public class DoorHelper : MonoBehaviour
	{
		[Token(Token = "0x4001FAB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public AudioClip DoorOpenSound;

		[Token(Token = "0x4001FAC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public AudioClip DoorCloseSound;

		[Token(Token = "0x4001FAD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Does the handle need to be turned in order to open the door from the closed position?")]
		public bool RequireHandleTurnToOpen;

		[Token(Token = "0x4001FAE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Transform HandleFollower;

		[Token(Token = "0x4001FAF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float DegreesTurned;

		[Token(Token = "0x4001FB0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float DegreesTurnToOpen;

		[Token(Token = "0x4001FB1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Transform DoorLockTransform;

		[Token(Token = "0x4001FB2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private float initialLockPosition;

		[Token(Token = "0x4001FB3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private HingeJoint hinge;

		[Token(Token = "0x4001FB4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Rigidbody rigid;

		[Token(Token = "0x4001FB5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private bool playedOpenSound;

		[Token(Token = "0x4001FB6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x61")]
		private bool readyToPlayCloseSound;

		[Token(Token = "0x4001FB7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float AngularVelocitySnapDoor;

		[Token(Token = "0x4001FB8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float angle;

		[Token(Token = "0x4001FB9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float AngularVelocity;

		[Token(Token = "0x4001FBA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private bool doorLocked;

		[Token(Token = "0x4001FBB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float lockPos;

		[Token(Token = "0x4001FBC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public string DebugText;

		[Token(Token = "0x6002011")]
		[Address(RVA = "0xC164FC", Offset = "0xC164FC", VA = "0xC164FC")]
		private void Start()
		{
		}

		[Token(Token = "0x6002012")]
		[Address(RVA = "0xC165D4", Offset = "0xC165D4", VA = "0xC165D4")]
		private void Update()
		{
		}

		[Token(Token = "0x6002013")]
		[Address(RVA = "0xC16C00", Offset = "0xC16C00", VA = "0xC16C00")]
		public DoorHelper()
		{
		}
	}
	[Token(Token = "0x20004EB")]
	public class GrabberArea : MonoBehaviour
	{
		[Token(Token = "0x4001FBD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Grabber InArea;

		[Token(Token = "0x4001FBE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public List<Grabber> grabbersInArea;

		[Token(Token = "0x6002014")]
		[Address(RVA = "0xC16C20", Offset = "0xC16C20", VA = "0xC16C20")]
		private void Update()
		{
		}

		[Token(Token = "0x6002015")]
		[Address(RVA = "0xC16C38", Offset = "0xC16C38", VA = "0xC16C38")]
		public Grabber GetOpenGrabber()
		{
			return null;
		}

		[Token(Token = "0x6002016")]
		[Address(RVA = "0xC16DC8", Offset = "0xC16DC8", VA = "0xC16DC8")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6002017")]
		[Address(RVA = "0xC16F48", Offset = "0xC16F48", VA = "0xC16F48")]
		private void OnTriggerExit(Collider other)
		{
		}

		[Token(Token = "0x6002018")]
		[Address(RVA = "0xC1703C", Offset = "0xC1703C", VA = "0xC1703C")]
		public GrabberArea()
		{
		}
	}
	[Token(Token = "0x20004EC")]
	public class HandCollision : MonoBehaviour
	{
		[Token(Token = "0x4001FBF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public HandController HandControl;

		[Token(Token = "0x4001FC0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabber HandGrabber;

		[Token(Token = "0x4001FC1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool EnableHandCollision;

		[Token(Token = "0x4001FC2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool EnableCollisionOnPoint;

		[Token(Token = "0x4001FC3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool EnableCollisionOnFist;

		[Token(Token = "0x4001FC4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		public bool EnableCollisionOnAllPoses;

		[Token(Token = "0x4001FC5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool EnableCollisionDuringGrab;

		[Token(Token = "0x4001FC6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float PointAmount;

		[Token(Token = "0x4001FC7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float GripAmount;

		[Token(Token = "0x4001FC8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool MakingFist;

		[Token(Token = "0x4001FC9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private List<Collider> handColliders;

		[Token(Token = "0x6002019")]
		[Address(RVA = "0xC17044", Offset = "0xC17044", VA = "0xC17044")]
		private void Start()
		{
		}

		[Token(Token = "0x600201A")]
		[Address(RVA = "0xC171A4", Offset = "0xC171A4", VA = "0xC171A4")]
		private void Update()
		{
		}

		[Token(Token = "0x600201B")]
		[Address(RVA = "0xC1744C", Offset = "0xC1744C", VA = "0xC1744C")]
		public HandCollision()
		{
		}
	}
	[Token(Token = "0x20004ED")]
	public class HandController : MonoBehaviour
	{
		[Token(Token = "0x4001FCA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("HandController parent will be set to this on Start if specified")]
		public Transform HandAnchor;

		[Token(Token = "0x4001FCB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("If true, this transform will be parented to HandAnchor and it's position / rotation set to 0,0,0.")]
		public bool ResetHandAnchorPosition;

		[Token(Token = "0x4001FCC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Animator HandAnimator;

		[Token(Token = "0x4001FCD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("Check the state of this grabber to determine animation state. If null, a child Grabber component will be used.")]
		public Grabber grabber;

		[Token(Token = "0x4001FCE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float GripAmount;

		[Token(Token = "0x4001FCF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private float _prevGrip;

		[Token(Token = "0x4001FD0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float PointAmount;

		[Token(Token = "0x4001FD1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float _prevPoint;

		[Token(Token = "0x4001FD2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float ThumbAmount;

		[Token(Token = "0x4001FD3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private float _prevThumb;

		[Token(Token = "0x4001FD4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public int PoseId;

		[Token(Token = "0x4001FD5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public float HandAnimationSpeed;

		[Token(Token = "0x4001FD6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private ControllerOffsetHelper offset;

		[Token(Token = "0x4001FD7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private InputBridge input;

		[Token(Token = "0x4001FD8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Rigidbody rigid;

		[Token(Token = "0x4001FD9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Transform offsetTransform;

		[Token(Token = "0x170003B3")]
		private Vector3 offsetPosition
		{
			[Token(Token = "0x600201C")]
			[Address(RVA = "0xC17464", Offset = "0xC17464", VA = "0xC17464")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x170003B4")]
		private Vector3 offsetRotation
		{
			[Token(Token = "0x600201D")]
			[Address(RVA = "0xC17528", Offset = "0xC17528", VA = "0xC17528")]
			get
			{
				return default(Vector3);
			}
		}

		[Token(Token = "0x600201E")]
		[Address(RVA = "0xC175EC", Offset = "0xC175EC", VA = "0xC175EC")]
		private void Start()
		{
		}

		[Token(Token = "0x600201F")]
		[Address(RVA = "0xC17820", Offset = "0xC17820", VA = "0xC17820")]
		private void Update()
		{
		}

		[Token(Token = "0x6002020")]
		[Address(RVA = "0xC17AE4", Offset = "0xC17AE4", VA = "0xC17AE4")]
		private void updateAnimimationStates()
		{
		}

		[Token(Token = "0x6002021")]
		[Address(RVA = "0xC17E9C", Offset = "0xC17E9C", VA = "0xC17E9C")]
		public HandController()
		{
		}
	}
	[Token(Token = "0x20004EE")]
	public class HandleGFXHelper : MonoBehaviour
	{
		[Token(Token = "0x4001FDA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform LookAt;

		[Token(Token = "0x4001FDB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabbable HandleGrabbable;

		[Token(Token = "0x4001FDC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float Speed;

		[Token(Token = "0x4001FDD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float LocalYMin;

		[Token(Token = "0x4001FDE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float LocalYMax;

		[Token(Token = "0x4001FDF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		private Vector3 initialRot;

		[Token(Token = "0x6002023")]
		[Address(RVA = "0xC17EB4", Offset = "0xC17EB4", VA = "0xC17EB4")]
		private void Start()
		{
		}

		[Token(Token = "0x6002024")]
		[Address(RVA = "0xC17EE4", Offset = "0xC17EE4", VA = "0xC17EE4")]
		private void Update()
		{
		}

		[Token(Token = "0x6002025")]
		[Address(RVA = "0xC18170", Offset = "0xC18170", VA = "0xC18170")]
		public HandleGFXHelper()
		{
		}
	}
	[Token(Token = "0x20004EF")]
	public class HandleHelper : MonoBehaviour
	{
		[Token(Token = "0x20004F0")]
		[CompilerGenerated]
		private sealed class <doRelease>d__10 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4001FE7")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4001FE8")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4001FE9")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandleHelper <>4__this;

			[Token(Token = "0x170003B5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600202E")]
				[Address(RVA = "0xC187F4", Offset = "0xC187F4", VA = "0xC187F4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003B6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002030")]
				[Address(RVA = "0xC1883C", Offset = "0xC1883C", VA = "0xC1883C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600202B")]
			[Address(RVA = "0xC18710", Offset = "0xC18710", VA = "0xC18710")]
			[DebuggerHidden]
			public <doRelease>d__10(int <>1__state)
			{
			}

			[Token(Token = "0x600202C")]
			[Address(RVA = "0xC18740", Offset = "0xC18740", VA = "0xC18740", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600202D")]
			[Address(RVA = "0xC18744", Offset = "0xC18744", VA = "0xC18744", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600202F")]
			[Address(RVA = "0xC187FC", Offset = "0xC187FC", VA = "0xC187FC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001FE0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Rigidbody ParentRigid;

		[Token(Token = "0x4001FE1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Transform HandleTransform;

		[Token(Token = "0x4001FE2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Grabbable thisGrab;

		[Token(Token = "0x4001FE3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Rigidbody rb;

		[Token(Token = "0x4001FE4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private bool didRelease;

		[Token(Token = "0x4001FE5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Collider col;

		[Token(Token = "0x4001FE6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 lastAngularVelocity;

		[Token(Token = "0x6002026")]
		[Address(RVA = "0xC1818C", Offset = "0xC1818C", VA = "0xC1818C")]
		private void Start()
		{
		}

		[Token(Token = "0x6002027")]
		[Address(RVA = "0xC18304", Offset = "0xC18304", VA = "0xC18304")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6002028")]
		[Address(RVA = "0xC186DC", Offset = "0xC186DC", VA = "0xC186DC")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x6002029")]
		[Address(RVA = "0xC18674", Offset = "0xC18674", VA = "0xC18674")]
		[IteratorStateMachine(typeof(<doRelease>d__10))]
		private IEnumerator doRelease()
		{
			return null;
		}

		[Token(Token = "0x600202A")]
		[Address(RVA = "0xC18738", Offset = "0xC18738", VA = "0xC18738")]
		public HandleHelper()
		{
		}
	}
	[Token(Token = "0x20004F1")]
	public class HandPhysics : MonoBehaviour
	{
		[Token(Token = "0x20004F2")]
		[CompilerGenerated]
		private sealed class <UnignoreAllCollisions>d__29 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002000")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002001")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002002")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public HandPhysics <>4__this;

			[Token(Token = "0x4002003")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private Grabbable <thisGrabbable>5__2;

			[Token(Token = "0x170003B8")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600204B")]
				[Address(RVA = "0xC1B74C", Offset = "0xC1B74C", VA = "0xC1B74C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003B9")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600204D")]
				[Address(RVA = "0xC1B794", Offset = "0xC1B794", VA = "0xC1B794", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002048")]
			[Address(RVA = "0xC1B660", Offset = "0xC1B660", VA = "0xC1B660")]
			[DebuggerHidden]
			public <UnignoreAllCollisions>d__29(int <>1__state)
			{
			}

			[Token(Token = "0x6002049")]
			[Address(RVA = "0xC1B688", Offset = "0xC1B688", VA = "0xC1B688", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600204A")]
			[Address(RVA = "0xC1B68C", Offset = "0xC1B68C", VA = "0xC1B68C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600204C")]
			[Address(RVA = "0xC1B754", Offset = "0xC1B754", VA = "0xC1B754", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4001FEA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("This is the object our physical hand should try to follow / match. Should typically be an object on the controller Transform")]
		public Transform AttachTo;

		[Token(Token = "0x4001FEB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Amount of Velocity to apply to hands when trying to reach anchor point")]
		public float HandVelocity;

		[Token(Token = "0x4001FEC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		[Tooltip("If true, Hand COlliders will be disabled while grabbing an object")]
		public bool DisableHandCollidersOnGrab;

		[Token(Token = "0x4001FED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("If the hand exceeds this distance from it's origin it will snap back to the original position. Specified in meters.")]
		public float SnapBackDistance;

		[Token(Token = "0x4001FEE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("This is the Grabber to use when this hand is active.")]
		public Grabber ThisGrabber;

		[Token(Token = "0x4001FEF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Disable this Grabber when this hand is active. (Optional)")]
		public Grabber DisableGrabber;

		[Token(Token = "0x4001FF0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("This is the RemoteGrabber to use when this hand is active.")]
		public RemoteGrabber ThisRemoteGrabber;

		[Token(Token = "0x4001FF1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Disable this RemoteGrabber when this hand is active. (Optional)")]
		public RemoteGrabber DisableRemoteGrabber;

		[Token(Token = "0x4001FF2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Assign Hand Colliders this material if provided")]
		public PhysicMaterial ColliderMaterial;

		[Token(Token = "0x4001FF3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public Transform HandModel;

		[Token(Token = "0x4001FF4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Transform HandModelOffset;

		[Token(Token = "0x4001FF5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private List<Collider> handColliders;

		[Token(Token = "0x4001FF6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody rigid;

		[Token(Token = "0x4001FF7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private ConfigurableJoint configJoint;

		[Token(Token = "0x4001FF8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Grabbable heldGrabbable;

		[Token(Token = "0x4001FF9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private List<Collider> collisions;

		[Token(Token = "0x4001FFA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private LineRenderer line;

		[Token(Token = "0x4001FFB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Vector3 localHandOffset;

		[Token(Token = "0x4001FFC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		private Vector3 localHandOffsetRotation;

		[Token(Token = "0x4001FFD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool wasHoldingObject;

		[Token(Token = "0x4001FFE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private Transform _priorParent;

		[Token(Token = "0x4001FFF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private Vector3 _priorLocalOffsetPosition;

		[Token(Token = "0x170003B7")]
		public bool HoldingObject
		{
			[Token(Token = "0x6002031")]
			[Address(RVA = "0xC18844", Offset = "0xC18844", VA = "0xC18844")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6002032")]
		[Address(RVA = "0xC188E8", Offset = "0xC188E8", VA = "0xC188E8")]
		private void Start()
		{
		}

		[Token(Token = "0x6002033")]
		[Address(RVA = "0xC18E40", Offset = "0xC18E40", VA = "0xC18E40")]
		private void Update()
		{
		}

		[Token(Token = "0x6002034")]
		[Address(RVA = "0xC19484", Offset = "0xC19484", VA = "0xC19484")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x6002035")]
		[Address(RVA = "0xC18BDC", Offset = "0xC18BDC", VA = "0xC18BDC")]
		private void initHandColliders()
		{
		}

		[Token(Token = "0x6002036")]
		[Address(RVA = "0xC1918C", Offset = "0xC1918C", VA = "0xC1918C")]
		private void drawDistanceLine()
		{
		}

		[Token(Token = "0x6002037")]
		[Address(RVA = "0xC19358", Offset = "0xC19358", VA = "0xC19358")]
		private void checkBreakDistance()
		{
		}

		[Token(Token = "0x6002038")]
		[Address(RVA = "0xC18FC0", Offset = "0xC18FC0", VA = "0xC18FC0")]
		private void updateHandGraphics()
		{
		}

		[Token(Token = "0x6002039")]
		[Address(RVA = "0xC198F0", Offset = "0xC198F0", VA = "0xC198F0")]
		[IteratorStateMachine(typeof(<UnignoreAllCollisions>d__29))]
		private IEnumerator UnignoreAllCollisions()
		{
			return null;
		}

		[Token(Token = "0x600203A")]
		[Address(RVA = "0xC19958", Offset = "0xC19958", VA = "0xC19958")]
		public void IgnoreGrabbableCollisions(Grabbable grab, bool ignorePhysics)
		{
		}

		[Token(Token = "0x600203B")]
		[Address(RVA = "0xC19A70", Offset = "0xC19A70", VA = "0xC19A70")]
		public void DisableHandColliders()
		{
		}

		[Token(Token = "0x600203C")]
		[Address(RVA = "0xC19B80", Offset = "0xC19B80", VA = "0xC19B80")]
		public void EnableHandColliders()
		{
		}

		[Token(Token = "0x600203D")]
		[Address(RVA = "0xC19C90", Offset = "0xC19C90", VA = "0xC19C90", Slot = "4")]
		public virtual void OnGrabbedObject(Grabbable grabbedObject)
		{
		}

		[Token(Token = "0x600203E")]
		[Address(RVA = "0xC19CA8", Offset = "0xC19CA8", VA = "0xC19CA8", Slot = "5")]
		public virtual void LockLocalPosition()
		{
		}

		[Token(Token = "0x600203F")]
		[Address(RVA = "0xC19CEC", Offset = "0xC19CEC", VA = "0xC19CEC", Slot = "6")]
		public virtual void UnlockLocalPosition()
		{
		}

		[Token(Token = "0x6002040")]
		[Address(RVA = "0xC19D14", Offset = "0xC19D14", VA = "0xC19D14", Slot = "7")]
		public virtual void OnReleasedObject(Grabbable grabbedObject)
		{
		}

		[Token(Token = "0x6002041")]
		[Address(RVA = "0xC19DAC", Offset = "0xC19DAC", VA = "0xC19DAC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002042")]
		[Address(RVA = "0xC19FF8", Offset = "0xC19FF8", VA = "0xC19FF8", Slot = "8")]
		public virtual void LockOffset()
		{
		}

		[Token(Token = "0x6002043")]
		[Address(RVA = "0xC1A044", Offset = "0xC1A044", VA = "0xC1A044", Slot = "9")]
		public virtual void UnlockOffset()
		{
		}

		[Token(Token = "0x6002044")]
		[Address(RVA = "0xC1A170", Offset = "0xC1A170", VA = "0xC1A170")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002045")]
		[Address(RVA = "0xC1A428", Offset = "0xC1A428", VA = "0xC1A428")]
		private void OnCollisionStay(Collision collision)
		{
		}

		[Token(Token = "0x6002046")]
		[Address(RVA = "0xC1A5C0", Offset = "0xC1A5C0", VA = "0xC1A5C0")]
		public bool IsValidCollision(Collider col)
		{
			return default(bool);
		}

		[Token(Token = "0x6002047")]
		[Address(RVA = "0xC1A5C8", Offset = "0xC1A5C8", VA = "0xC1A5C8")]
		public HandPhysics()
		{
		}
	}
	[Token(Token = "0x20004F3")]
	public class HandRepresentationHelper : MonoBehaviour
	{
		[Token(Token = "0x4002004")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The GameObject to be shown or hidden depending on Distance from OtherHandTransform")]
		public Transform HandToToggle;

		[Token(Token = "0x4002005")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("The other Hand Transform used to calculate distance")]
		public Transform OtherHandTransform;

		[Token(Token = "0x4002006")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Distance required to show this Transform in meters")]
		public float DistanceToShow;

		[Token(Token = "0x600204E")]
		[Address(RVA = "0xC1B79C", Offset = "0xC1B79C", VA = "0xC1B79C")]
		private void Update()
		{
		}

		[Token(Token = "0x600204F")]
		[Address(RVA = "0xC1B890", Offset = "0xC1B890", VA = "0xC1B890")]
		public HandRepresentationHelper()
		{
		}
	}
	[Token(Token = "0x20004F4")]
	public class IgnoreColliders : MonoBehaviour
	{
		[Token(Token = "0x4002007")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public List<Collider> CollidersToIgnore;

		[Token(Token = "0x6002050")]
		[Address(RVA = "0xC1B8A4", Offset = "0xC1B8A4", VA = "0xC1B8A4")]
		private void Start()
		{
		}

		[Token(Token = "0x6002051")]
		[Address(RVA = "0xC1BA78", Offset = "0xC1BA78", VA = "0xC1BA78")]
		public IgnoreColliders()
		{
		}
	}
	[Token(Token = "0x20004F5")]
	public class InvalidTeleportArea : MonoBehaviour
	{
		[Token(Token = "0x6002052")]
		[Address(RVA = "0xC1BA80", Offset = "0xC1BA80", VA = "0xC1BA80")]
		public InvalidTeleportArea()
		{
		}
	}
	[Token(Token = "0x20004F6")]
	public class JointBreaker : MonoBehaviour
	{
		[Token(Token = "0x4002008")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float BreakDistance;

		[Token(Token = "0x4002009")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float JointDistance;

		[Token(Token = "0x400200A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool DestroyJointOnBreak;

		[Token(Token = "0x400200B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GrabberEvent OnBreakEvent;

		[Token(Token = "0x400200C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Joint theJoint;

		[Token(Token = "0x400200D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private Vector3 startPos;

		[Token(Token = "0x400200E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private bool brokeJoint;

		[Token(Token = "0x6002053")]
		[Address(RVA = "0xC1BA88", Offset = "0xC1BA88", VA = "0xC1BA88")]
		private void Start()
		{
		}

		[Token(Token = "0x6002054")]
		[Address(RVA = "0xC1BAFC", Offset = "0xC1BAFC", VA = "0xC1BAFC")]
		private void Update()
		{
		}

		[Token(Token = "0x6002055")]
		[Address(RVA = "0xC1BBE8", Offset = "0xC1BBE8", VA = "0xC1BBE8")]
		public void BreakJoint()
		{
		}

		[Token(Token = "0x6002056")]
		[Address(RVA = "0xC1BD58", Offset = "0xC1BD58", VA = "0xC1BD58")]
		public JointBreaker()
		{
		}
	}
	[Token(Token = "0x20004F7")]
	public class JointHelper : MonoBehaviour
	{
		[Token(Token = "0x400200F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public bool LockXPosition;

		[Token(Token = "0x4002010")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x19")]
		public bool LockYPosition;

		[Token(Token = "0x4002011")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A")]
		public bool LockZPosition;

		[Token(Token = "0x4002012")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B")]
		public bool LockXScale;

		[Token(Token = "0x4002013")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public bool LockYScale;

		[Token(Token = "0x4002014")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D")]
		public bool LockZScale;

		[Token(Token = "0x4002015")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E")]
		public bool LockXRotation;

		[Token(Token = "0x4002016")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F")]
		public bool LockYRotation;

		[Token(Token = "0x4002017")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public bool LockZRotation;

		[Token(Token = "0x4002018")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		private Vector3 initialPosition;

		[Token(Token = "0x4002019")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private Vector3 initialRotation;

		[Token(Token = "0x400201A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		private Vector3 initialScale;

		[Token(Token = "0x400201B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Vector3 currentPosition;

		[Token(Token = "0x400201C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private Vector3 currentScale;

		[Token(Token = "0x400201D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Vector3 currentRotation;

		[Token(Token = "0x6002057")]
		[Address(RVA = "0xC1BD70", Offset = "0xC1BD70", VA = "0xC1BD70")]
		private void Start()
		{
		}

		[Token(Token = "0x6002058")]
		[Address(RVA = "0xC1BDE0", Offset = "0xC1BDE0", VA = "0xC1BDE0")]
		private void lockPosition()
		{
		}

		[Token(Token = "0x6002059")]
		[Address(RVA = "0xC1BFC0", Offset = "0xC1BFC0", VA = "0xC1BFC0")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600205A")]
		[Address(RVA = "0xC1BFC4", Offset = "0xC1BFC4", VA = "0xC1BFC4")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x600205B")]
		[Address(RVA = "0xC1BFC8", Offset = "0xC1BFC8", VA = "0xC1BFC8")]
		public JointHelper()
		{
		}
	}
	[Token(Token = "0x20004F8")]
	public class RagdollHelper : MonoBehaviour
	{
		[Token(Token = "0x400201E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Transform player;

		[Token(Token = "0x400201F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private List<Collider> colliders;

		[Token(Token = "0x4002020")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private Collider playerCol;

		[Token(Token = "0x600205C")]
		[Address(RVA = "0xC1BFE0", Offset = "0xC1BFE0", VA = "0xC1BFE0")]
		private void Start()
		{
		}

		[Token(Token = "0x600205D")]
		[Address(RVA = "0xC1C1A8", Offset = "0xC1C1A8", VA = "0xC1C1A8")]
		public RagdollHelper()
		{
		}
	}
	[Token(Token = "0x20004F9")]
	public class RingHelper : MonoBehaviour
	{
		[Token(Token = "0x4002021")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The Grabbable Object to Observe")]
		public Grabbable grabbable;

		[Token(Token = "0x4002022")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("(Optional) If specified, the ring helper will only be valid if this Grabpoint is the nearest on the the grabbable object")]
		public GrabPoint Grabpoint;

		[Token(Token = "0x4002023")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Default Color of the ring")]
		public Color RingColor;

		[Token(Token = "0x4002024")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Color to use if selected by primary controller")]
		public Color RingSelectedColor;

		[Token(Token = "0x4002025")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Color to use if selected by secondary controller")]
		public Color RingSecondarySelectedColor;

		[Token(Token = "0x4002026")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public float ringSizeInRange;

		[Token(Token = "0x4002027")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float ringSizeGrabbable;

		[Token(Token = "0x4002028")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("Don't show grab rings if left and right controllers / grabbers are  holding something")]
		public bool HideIfHandsAreFull;

		[Token(Token = "0x4002029")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		[Tooltip("How fast to lerp the opacity if being hidden / shown")]
		public float RingFadeSpeed;

		[Token(Token = "0x400202A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Canvas canvas;

		[Token(Token = "0x400202B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Text text;

		[Token(Token = "0x400202C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private CanvasScaler scaler;

		[Token(Token = "0x400202D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Grabber leftGrabber;

		[Token(Token = "0x400202E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Grabber rightGrabber;

		[Token(Token = "0x400202F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Grabber closestGrabber;

		[Token(Token = "0x4002030")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool handsFull;

		[Token(Token = "0x4002031")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private float _initalOpacity;

		[Token(Token = "0x4002032")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private float _currentOpacity;

		[Token(Token = "0x4002033")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Transform mainCam;

		[Token(Token = "0x600205E")]
		[Address(RVA = "0xC1C1B0", Offset = "0xC1C1B0", VA = "0xC1C1B0")]
		private void Start()
		{
		}

		[Token(Token = "0x600205F")]
		[Address(RVA = "0xC1C37C", Offset = "0xC1C37C", VA = "0xC1C37C")]
		private void Update()
		{
		}

		[Token(Token = "0x6002060")]
		[Address(RVA = "0xC1C964", Offset = "0xC1C964", VA = "0xC1C964", Slot = "4")]
		public virtual void AssignCamera()
		{
		}

		[Token(Token = "0x6002061")]
		[Address(RVA = "0xC1CA40", Offset = "0xC1CA40", VA = "0xC1CA40", Slot = "5")]
		public virtual void AssignGrabbers()
		{
		}

		[Token(Token = "0x6002062")]
		[Address(RVA = "0xC1C870", Offset = "0xC1C870", VA = "0xC1C870")]
		private Color getSelectedColor()
		{
			return default(Color);
		}

		[Token(Token = "0x6002063")]
		[Address(RVA = "0xC1CB7C", Offset = "0xC1CB7C", VA = "0xC1CB7C")]
		public RingHelper()
		{
		}
	}
	[Token(Token = "0x20004FA")]
	public class ScaleMaterialHelper : MonoBehaviour
	{
		[Token(Token = "0x4002034")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private Renderer ren;

		[Token(Token = "0x4002035")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Vector2 Tiling;

		[Token(Token = "0x4002036")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Vector2 Offset;

		[Token(Token = "0x6002064")]
		[Address(RVA = "0xC1CBB4", Offset = "0xC1CBB4", VA = "0xC1CBB4")]
		private void Start()
		{
		}

		[Token(Token = "0x6002065")]
		[Address(RVA = "0xC1CCF8", Offset = "0xC1CCF8", VA = "0xC1CCF8")]
		private void Update()
		{
		}

		[Token(Token = "0x6002066")]
		[Address(RVA = "0xC1CC08", Offset = "0xC1CC08", VA = "0xC1CC08")]
		private void updateTexture()
		{
		}

		[Token(Token = "0x6002067")]
		[Address(RVA = "0xC1CD20", Offset = "0xC1CD20", VA = "0xC1CD20")]
		public ScaleMaterialHelper()
		{
		}
	}
	[Token(Token = "0x20004FB")]
	public class StaticBatch : MonoBehaviour
	{
		[Token(Token = "0x4002037")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Material CombineMaterial;

		[Token(Token = "0x6002068")]
		[Address(RVA = "0xC1CD30", Offset = "0xC1CD30", VA = "0xC1CD30")]
		private void Start()
		{
		}

		[Token(Token = "0x6002069")]
		[Address(RVA = "0xC1D3E4", Offset = "0xC1D3E4", VA = "0xC1D3E4")]
		public StaticBatch()
		{
		}
	}
	[Token(Token = "0x20004FC")]
	public class TeleportDestination : MonoBehaviour
	{
		[Token(Token = "0x4002038")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("Where the player will be teleported to")]
		public Transform DestinationTransform;

		[Token(Token = "0x4002039")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[Tooltip("Snap player to this rotation?")]
		public bool ForcePlayerRotation;

		[Token(Token = "0x400203A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[Tooltip("Called when a player uses the teleporter to enter this destination.")]
		public UnityEvent OnPlayerTeleported;

		[Token(Token = "0x600206A")]
		[Address(RVA = "0xC1D3EC", Offset = "0xC1D3EC", VA = "0xC1D3EC")]
		public TeleportDestination()
		{
		}
	}
	[Token(Token = "0x20004FD")]
	public class TeleportPlayerOnEnter : MonoBehaviour
	{
		[Token(Token = "0x400203B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Transform TeleportDestination;

		[Token(Token = "0x600206B")]
		[Address(RVA = "0xC1D3F4", Offset = "0xC1D3F4", VA = "0xC1D3F4")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x600206C")]
		[Address(RVA = "0xC1D528", Offset = "0xC1D528", VA = "0xC1D528")]
		public TeleportPlayerOnEnter()
		{
		}
	}
	[Token(Token = "0x20004FE")]
	public class UITrigger : MonoBehaviour
	{
		[Token(Token = "0x600206D")]
		[Address(RVA = "0xC1D530", Offset = "0xC1D530", VA = "0xC1D530")]
		public UITrigger()
		{
		}
	}
	[Token(Token = "0x20004FF")]
	public class UIPointer : MonoBehaviour
	{
		[Token(Token = "0x400203C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[Tooltip("The controller side this pointer is on")]
		public ControllerHand ControllerSide;

		[Token(Token = "0x400203D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		[Tooltip("If true this object will update the VRUISystem's Left or Right Transform property")]
		public bool AutoUpdateUITransforms;

		[Token(Token = "0x400203E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public GameObject cursor;

		[Token(Token = "0x400203F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private GameObject _cursor;

		[Token(Token = "0x4002040")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Tooltip("If true the cursor and LineRenderer will be Hidden. Otherwise it will still be show at a fixed length")]
		public bool HidePointerIfNoObjectsFound;

		[Token(Token = "0x4002041")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		[Tooltip("How long the line / cursor should extend if no object are found to point at")]
		public float FixedPointerLength;

		[Token(Token = "0x4002042")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("If true the cursor object will scale based on how far away the pointer is from the origin. A cursor far away will have a larger cusor than one up close.")]
		public bool CursorScaling;

		[Token(Token = "0x4002043")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		[Tooltip("Minimum scale of the Cursor object if CursorScaling is enabled")]
		public float CursorMinScale;

		[Token(Token = "0x4002044")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public float CursorMaxScale;

		[Token(Token = "0x4002045")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private Vector3 _cursorInitialLocalScale;

		[Token(Token = "0x4002046")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Example : 0.5 = Line Goes Half Way. 1 = Line reaches end.")]
		public float LineDistanceModifier;

		[Token(Token = "0x4002047")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private VRUISystem uiSystem;

		[Token(Token = "0x4002048")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private PointerEvents selectedPointerEvents;

		[Token(Token = "0x4002049")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private PointerEventData data;

		[Token(Token = "0x400204A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("LineRenderer to use when showing a valid UI Canvas. Leave null to attempt a GetComponent<> on this object.")]
		public LineRenderer lineRenderer;

		[Token(Token = "0x600206E")]
		[Address(RVA = "0xC1D538", Offset = "0xC1D538", VA = "0xC1D538")]
		private void Awake()
		{
		}

		[Token(Token = "0x600206F")]
		[Address(RVA = "0xC1D864", Offset = "0xC1D864", VA = "0xC1D864")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002070")]
		[Address(RVA = "0xC1D8E4", Offset = "0xC1D8E4", VA = "0xC1D8E4")]
		public void Update()
		{
		}

		[Token(Token = "0x6002071")]
		[Address(RVA = "0xC1DE88", Offset = "0xC1DE88", VA = "0xC1DE88", Slot = "4")]
		public virtual void HidePointer()
		{
		}

		[Token(Token = "0x6002072")]
		[Address(RVA = "0xC1E000", Offset = "0xC1E000", VA = "0xC1E000")]
		public UIPointer()
		{
		}
	}
	[Token(Token = "0x2000500")]
	[RequireComponent(typeof(GraphicRaycaster))]
	[RequireComponent(typeof(Canvas))]
	public class VRCanvas : MonoBehaviour
	{
		[Token(Token = "0x6002073")]
		[Address(RVA = "0xC1E03C", Offset = "0xC1E03C", VA = "0xC1E03C")]
		private void Start()
		{
		}

		[Token(Token = "0x6002074")]
		[Address(RVA = "0xC1E0AC", Offset = "0xC1E0AC", VA = "0xC1E0AC")]
		public VRCanvas()
		{
		}
	}
	[Token(Token = "0x2000501")]
	public class VRUISystem : BaseInputModule
	{
		[Token(Token = "0x400204B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("This setting determines if LeftPointerTransform or RightPointerTransform will be used as a forward vector for World Space UI events")]
		[Header("XR Controller Options : ")]
		public ControllerHand SelectedHand;

		[Token(Token = "0x400204C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("A transform on the left controller to use when raycasting for world space UI events")]
		public Transform LeftPointerTransform;

		[Token(Token = "0x400204D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("A transform on the right controller to use when raycasting for world space UI events")]
		public Transform RightPointerTransform;

		[Token(Token = "0x400204E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("Controller Binding to use for input down, up, etc.")]
		public List<ControllerBinding> ControllerInput;

		[Token(Token = "0x400204F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[Tooltip("If true a PhysicsRaycaster component will be added to the UI camera, allowing physical objects to use IPointer events such as OnPointClick, OnPointEnter, etc.")]
		public bool AddPhysicsRaycaster;

		[Token(Token = "0x4002050")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public LayerMask PhysicsRaycasterEventMask;

		[Token(Token = "0x4002051")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Tooltip("If true the Right Thumbstick will send scroll events to the UI")]
		public bool RightThumbstickScroll;

		[Token(Token = "0x4002052")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x79")]
		[Tooltip("If true, Left Mouse Button down event will be sent as a click")]
		public bool AllowMouseInput;

		[Token(Token = "0x4002053")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Header("Shown for Debug : ")]
		public GameObject PressingObject;

		[Token(Token = "0x4002054")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public GameObject DraggingObject;

		[Token(Token = "0x4002055")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public GameObject ReleasingObject;

		[Token(Token = "0x4002057")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Camera cameraCaster;

		[Token(Token = "0x4002058")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private GameObject _initialPressObject;

		[Token(Token = "0x4002059")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private bool _lastInputDown;

		[Token(Token = "0x400205A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		private bool inputDown;

		[Token(Token = "0x400205B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static VRUISystem _instance;

		[Token(Token = "0x170003BA")]
		public PointerEventData EventData
		{
			[Token(Token = "0x6002075")]
			[Address(RVA = "0xC1E0B4", Offset = "0xC1E0B4", VA = "0xC1E0B4")]
			[CompilerGenerated]
			get
			{
				return null;
			}
			[Token(Token = "0x6002076")]
			[Address(RVA = "0xC1E0BC", Offset = "0xC1E0BC", VA = "0xC1E0BC")]
			[CompilerGenerated]
			private set
			{
			}
		}

		[Token(Token = "0x170003BB")]
		public static VRUISystem Instance
		{
			[Token(Token = "0x6002077")]
			[Address(RVA = "0xC1D684", Offset = "0xC1D684", VA = "0xC1D684")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002078")]
		[Address(RVA = "0xC1E0C4", Offset = "0xC1E0C4", VA = "0xC1E0C4", Slot = "4")]
		protected override void Awake()
		{
		}

		[Token(Token = "0x6002079")]
		[Address(RVA = "0xC1E1A4", Offset = "0xC1E1A4", VA = "0xC1E1A4")]
		private void init()
		{
		}

		[Token(Token = "0x600207A")]
		[Address(RVA = "0xC1E310", Offset = "0xC1E310", VA = "0xC1E310", Slot = "17")]
		public override void Process()
		{
		}

		[Token(Token = "0x600207B")]
		[Address(RVA = "0xC1E6AC", Offset = "0xC1E6AC", VA = "0xC1E6AC", Slot = "27")]
		public virtual bool InputReady()
		{
			return default(bool);
		}

		[Token(Token = "0x600207C")]
		[Address(RVA = "0xC1E7AC", Offset = "0xC1E7AC", VA = "0xC1E7AC", Slot = "28")]
		public virtual void PressDown()
		{
		}

		[Token(Token = "0x600207D")]
		[Address(RVA = "0xC1E9BC", Offset = "0xC1E9BC", VA = "0xC1E9BC", Slot = "29")]
		public virtual void Press()
		{
		}

		[Token(Token = "0x600207E")]
		[Address(RVA = "0xC1EB88", Offset = "0xC1EB88", VA = "0xC1EB88", Slot = "30")]
		public virtual void Release()
		{
		}

		[Token(Token = "0x600207F")]
		[Address(RVA = "0xC1EDE4", Offset = "0xC1EDE4", VA = "0xC1EDE4", Slot = "31")]
		public virtual void ClearAll()
		{
		}

		[Token(Token = "0x6002080")]
		[Address(RVA = "0xC1EE60", Offset = "0xC1EE60", VA = "0xC1EE60", Slot = "32")]
		public virtual void SetPressingObject(GameObject pressing)
		{
		}

		[Token(Token = "0x6002081")]
		[Address(RVA = "0xC1EE94", Offset = "0xC1EE94", VA = "0xC1EE94", Slot = "33")]
		public virtual void SetDraggingObject(GameObject dragging)
		{
		}

		[Token(Token = "0x6002082")]
		[Address(RVA = "0xC1EEB4", Offset = "0xC1EEB4", VA = "0xC1EEB4", Slot = "34")]
		public virtual void SetReleasingObject(GameObject releasing)
		{
		}

		[Token(Token = "0x6002083")]
		[Address(RVA = "0xC1EEBC", Offset = "0xC1EEBC", VA = "0xC1EEBC", Slot = "35")]
		public virtual void AssignCameraToAllCanvases(Camera cam)
		{
		}

		[Token(Token = "0x6002084")]
		[Address(RVA = "0xC1EF90", Offset = "0xC1EF90", VA = "0xC1EF90", Slot = "36")]
		public virtual void AddCanvas(Canvas canvas)
		{
		}

		[Token(Token = "0x6002085")]
		[Address(RVA = "0xC1EFA4", Offset = "0xC1EFA4", VA = "0xC1EFA4", Slot = "37")]
		public virtual void AddCanvasToCamera(Canvas canvas, Camera cam)
		{
		}

		[Token(Token = "0x6002086")]
		[Address(RVA = "0xC1EFC0", Offset = "0xC1EFC0", VA = "0xC1EFC0", Slot = "38")]
		public virtual void UpdateControllerHand(ControllerHand hand)
		{
		}

		[Token(Token = "0x6002087")]
		[Address(RVA = "0xC1F168", Offset = "0xC1F168", VA = "0xC1F168")]
		public VRUISystem()
		{
		}
	}
	[Token(Token = "0x2000502")]
	public class DestroyIfPlayMode : MonoBehaviour
	{
		[Token(Token = "0x6002088")]
		[Address(RVA = "0xC1F264", Offset = "0xC1F264", VA = "0xC1F264")]
		private void Start()
		{
		}

		[Token(Token = "0x6002089")]
		[Address(RVA = "0xC1F314", Offset = "0xC1F314", VA = "0xC1F314")]
		public DestroyIfPlayMode()
		{
		}
	}
	[Token(Token = "0x2000503")]
	public class VRUtils : MonoBehaviour
	{
		[Token(Token = "0x400205C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static VRUtils _instance;

		[Token(Token = "0x400205D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Color DebugTextColor;

		[Token(Token = "0x400205E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Transform DebugTextHolder;

		[Token(Token = "0x400205F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private float MaxTextEntries;

		[Token(Token = "0x170003BC")]
		public static VRUtils Instance
		{
			[Token(Token = "0x600208A")]
			[Address(RVA = "0xC1F31C", Offset = "0xC1F31C", VA = "0xC1F31C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x600208B")]
		[Address(RVA = "0xC1F470", Offset = "0xC1F470", VA = "0xC1F470")]
		private void Awake()
		{
		}

		[Token(Token = "0x600208C")]
		[Address(RVA = "0xC1F560", Offset = "0xC1F560", VA = "0xC1F560")]
		public void Log(string msg)
		{
		}

		[Token(Token = "0x600208D")]
		[Address(RVA = "0xC1F9A4", Offset = "0xC1F9A4", VA = "0xC1F9A4")]
		public AudioSource PlaySpatialClipAt(AudioClip clip, Vector3 pos, float volume, float spatialBlend = 1f, float randomizePitch = 0f)
		{
			return null;
		}

		[Token(Token = "0x600208E")]
		[Address(RVA = "0xC1FB5C", Offset = "0xC1FB5C", VA = "0xC1FB5C")]
		private float getRandomizedPitch(float randomAmount)
		{
			return default(float);
		}

		[Token(Token = "0x600208F")]
		[Address(RVA = "0xC1FBA0", Offset = "0xC1FBA0", VA = "0xC1FBA0")]
		public VRUtils()
		{
		}
	}
	[Token(Token = "0x2000504")]
	public class AmmoDispenser : MonoBehaviour
	{
		[Token(Token = "0x4002060")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Grabber LeftGrabber;

		[Token(Token = "0x4002061")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabber RightGrabber;

		[Token(Token = "0x4002062")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public GameObject AmmoDispenserObject;

		[Token(Token = "0x4002063")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject PistolClip;

		[Token(Token = "0x4002064")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject ShotgunShell;

		[Token(Token = "0x4002065")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public GameObject RifleClip;

		[Token(Token = "0x6002090")]
		[Address(RVA = "0xC1FBB8", Offset = "0xC1FBB8", VA = "0xC1FBB8")]
		private void Update()
		{
		}

		[Token(Token = "0x6002091")]
		[Address(RVA = "0xC1FC2C", Offset = "0xC1FC2C", VA = "0xC1FC2C")]
		private bool grabberHasWeapon(Grabber g)
		{
			return default(bool);
		}

		[Token(Token = "0x6002092")]
		[Address(RVA = "0xC1FD68", Offset = "0xC1FD68", VA = "0xC1FD68")]
		private GameObject getAmmo()
		{
			return null;
		}

		[Token(Token = "0x6002093")]
		[Address(RVA = "0xC1FFA4", Offset = "0xC1FFA4", VA = "0xC1FFA4")]
		public void GrabAmmo(Grabber grabber)
		{
		}

		[Token(Token = "0x6002094")]
		[Address(RVA = "0xC201FC", Offset = "0xC201FC", VA = "0xC201FC")]
		public AmmoDispenser()
		{
		}
	}
	[Token(Token = "0x2000505")]
	public class AmmoDisplay : MonoBehaviour
	{
		[Token(Token = "0x4002066")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RaycastWeapon Weapon;

		[Token(Token = "0x4002067")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Text AmmoLabel;

		[Token(Token = "0x6002095")]
		[Address(RVA = "0xC20204", Offset = "0xC20204", VA = "0xC20204")]
		private void OnGUI()
		{
		}

		[Token(Token = "0x6002096")]
		[Address(RVA = "0xC202E8", Offset = "0xC202E8", VA = "0xC202E8")]
		public AmmoDisplay()
		{
		}
	}
	[Token(Token = "0x2000506")]
	public class Bullet : MonoBehaviour
	{
		[Token(Token = "0x6002097")]
		[Address(RVA = "0xC202F0", Offset = "0xC202F0", VA = "0xC202F0")]
		public Bullet()
		{
		}
	}
	[Token(Token = "0x2000507")]
	public class BulletInsert : MonoBehaviour
	{
		[Token(Token = "0x4002068")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public RaycastWeapon Weapon;

		[Token(Token = "0x4002069")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string AcceptBulletName;

		[Token(Token = "0x400206A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip InsertSound;

		[Token(Token = "0x6002098")]
		[Address(RVA = "0xC202F8", Offset = "0xC202F8", VA = "0xC202F8")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x6002099")]
		[Address(RVA = "0xC20540", Offset = "0xC20540", VA = "0xC20540")]
		public BulletInsert()
		{
		}
	}
	[Token(Token = "0x2000508")]
	public class MagazineSlide : MonoBehaviour
	{
		[Token(Token = "0x2000509")]
		[CompilerGenerated]
		private sealed class <EjectMagRoutine>d__23 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400207A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400207B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400207C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Grabbable ejectedMag;

			[Token(Token = "0x400207D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MagazineSlide <>4__this;

			[Token(Token = "0x170003BD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60020A9")]
				[Address(RVA = "0xC217AC", Offset = "0xC217AC", VA = "0xC217AC", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003BE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60020AB")]
				[Address(RVA = "0xC217F4", Offset = "0xC217F4", VA = "0xC217F4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60020A6")]
			[Address(RVA = "0xC21340", Offset = "0xC21340", VA = "0xC21340")]
			[DebuggerHidden]
			public <EjectMagRoutine>d__23(int <>1__state)
			{
			}

			[Token(Token = "0x60020A7")]
			[Address(RVA = "0xC21540", Offset = "0xC21540", VA = "0xC21540", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60020A8")]
			[Address(RVA = "0xC21544", Offset = "0xC21544", VA = "0xC21544", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60020AA")]
			[Address(RVA = "0xC217B4", Offset = "0xC217B4", VA = "0xC217B4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400206B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string AcceptableMagazineName;

		[Token(Token = "0x400206C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Grabbable AttachedWeapon;

		[Token(Token = "0x400206D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float ClipSnapDistance;

		[Token(Token = "0x400206E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float ClipUnsnapDistance;

		[Token(Token = "0x400206F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float EjectForce;

		[Token(Token = "0x4002070")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Grabbable HeldMagazine;

		[Token(Token = "0x4002071")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private Collider HeldCollider;

		[Token(Token = "0x4002072")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float MagazineDistance;

		[Token(Token = "0x4002073")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private bool magazineInPlace;

		[Token(Token = "0x4002074")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4D")]
		private bool lockedInPlace;

		[Token(Token = "0x4002075")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public AudioClip ClipAttachSound;

		[Token(Token = "0x4002076")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public AudioClip ClipDetachSound;

		[Token(Token = "0x4002077")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private RaycastWeapon parentWeapon;

		[Token(Token = "0x4002078")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private GrabberArea grabClipArea;

		[Token(Token = "0x4002079")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private float lastEjectTime;

		[Token(Token = "0x600209A")]
		[Address(RVA = "0xC20590", Offset = "0xC20590", VA = "0xC20590")]
		private void Start()
		{
		}

		[Token(Token = "0x600209B")]
		[Address(RVA = "0xC20678", Offset = "0xC20678", VA = "0xC20678")]
		private void LateUpdate()
		{
		}

		[Token(Token = "0x600209C")]
		[Address(RVA = "0xC20C64", Offset = "0xC20C64", VA = "0xC20C64")]
		private bool recentlyEjected()
		{
			return default(bool);
		}

		[Token(Token = "0x600209D")]
		[Address(RVA = "0xC20C14", Offset = "0xC20C14", VA = "0xC20C14")]
		private void moveMagazine(Vector3 localPosition)
		{
		}

		[Token(Token = "0x600209E")]
		[Address(RVA = "0xC20A4C", Offset = "0xC20A4C", VA = "0xC20A4C")]
		public void CheckGrabClipInput()
		{
		}

		[Token(Token = "0x600209F")]
		[Address(RVA = "0xC20C94", Offset = "0xC20C94", VA = "0xC20C94")]
		private void attachMagazine()
		{
		}

		[Token(Token = "0x60020A0")]
		[Address(RVA = "0xC20F08", Offset = "0xC20F08", VA = "0xC20F08")]
		private Grabbable detachMagazine()
		{
			return null;
		}

		[Token(Token = "0x60020A1")]
		[Address(RVA = "0xC21288", Offset = "0xC21288", VA = "0xC21288")]
		public void EjectMagazine()
		{
		}

		[Token(Token = "0x60020A2")]
		[Address(RVA = "0xC212CC", Offset = "0xC212CC", VA = "0xC212CC")]
		[IteratorStateMachine(typeof(<EjectMagRoutine>d__23))]
		private IEnumerator EjectMagRoutine(Grabbable ejectedMag)
		{
			return null;
		}

		[Token(Token = "0x60020A3")]
		[Address(RVA = "0xC211BC", Offset = "0xC211BC", VA = "0xC211BC")]
		public void OnGrabClipArea(Grabber grabbedBy)
		{
		}

		[Token(Token = "0x60020A4")]
		[Address(RVA = "0xC21368", Offset = "0xC21368", VA = "0xC21368")]
		private void OnTriggerEnter(Collider other)
		{
		}

		[Token(Token = "0x60020A5")]
		[Address(RVA = "0xC214DC", Offset = "0xC214DC", VA = "0xC214DC")]
		public MagazineSlide()
		{
		}
	}
	[Token(Token = "0x200050A")]
	public class Projectile : MonoBehaviour
	{
		[Token(Token = "0x200050B")]
		[CompilerGenerated]
		private sealed class <CheckForRaycast>d__13 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002086")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002087")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002088")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public Projectile <>4__this;

			[Token(Token = "0x170003BF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60020B6")]
				[Address(RVA = "0xC22120", Offset = "0xC22120", VA = "0xC22120", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003C0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60020B8")]
				[Address(RVA = "0xC22168", Offset = "0xC22168", VA = "0xC22168", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60020B3")]
			[Address(RVA = "0xC22000", Offset = "0xC22000", VA = "0xC22000")]
			[DebuggerHidden]
			public <CheckForRaycast>d__13(int <>1__state)
			{
			}

			[Token(Token = "0x60020B4")]
			[Address(RVA = "0xC22048", Offset = "0xC22048", VA = "0xC22048", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60020B5")]
			[Address(RVA = "0xC2204C", Offset = "0xC2204C", VA = "0xC2204C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60020B7")]
			[Address(RVA = "0xC22128", Offset = "0xC22128", VA = "0xC22128", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x400207E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public GameObject HitFXPrefab;

		[Token(Token = "0x400207F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool _checkRaycast;

		[Token(Token = "0x4002080")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float Damage;

		[Token(Token = "0x4002081")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float AddRigidForce;

		[Token(Token = "0x4002082")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LayerMask ValidLayers;

		[Token(Token = "0x4002083")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public bool StickToObject;

		[Token(Token = "0x4002084")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float MinForceHit;

		[Token(Token = "0x4002085")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Unity Event called when the projectile damages something")]
		public UnityEvent onDealtDamageEvent;

		[Token(Token = "0x60020AC")]
		[Address(RVA = "0xC217FC", Offset = "0xC217FC", VA = "0xC217FC")]
		private void OnCollisionEnter(Collision collision)
		{
		}

		[Token(Token = "0x60020AD")]
		[Address(RVA = "0xC21808", Offset = "0xC21808", VA = "0xC21808", Slot = "4")]
		public virtual void OnCollisionEvent(Collision collision)
		{
		}

		[Token(Token = "0x60020AE")]
		[Address(RVA = "0xC21B90", Offset = "0xC21B90", VA = "0xC21B90", Slot = "5")]
		public virtual void DoHitFX(Vector3 pos, Quaternion rot, Collider col)
		{
		}

		[Token(Token = "0x60020AF")]
		[Address(RVA = "0xC21D74", Offset = "0xC21D74", VA = "0xC21D74", Slot = "6")]
		public virtual void MarkAsRaycastBullet()
		{
		}

		[Token(Token = "0x60020B0")]
		[Address(RVA = "0xC21E04", Offset = "0xC21E04", VA = "0xC21E04", Slot = "7")]
		public virtual void DoRayCastProjectile()
		{
		}

		[Token(Token = "0x60020B1")]
		[Address(RVA = "0xC21D9C", Offset = "0xC21D9C", VA = "0xC21D9C")]
		[IteratorStateMachine(typeof(<CheckForRaycast>d__13))]
		private IEnumerator CheckForRaycast()
		{
			return null;
		}

		[Token(Token = "0x60020B2")]
		[Address(RVA = "0xC22028", Offset = "0xC22028", VA = "0xC22028")]
		public Projectile()
		{
		}
	}
	[Token(Token = "0x200050C")]
	public class RaycastWeapon : GrabbableEvents
	{
		[Token(Token = "0x200050D")]
		[CompilerGenerated]
		private sealed class <doMuzzleFlash>d__68 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40020BA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40020BB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40020BC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RaycastWeapon <>4__this;

			[Token(Token = "0x170003C1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60020D2")]
				[Address(RVA = "0xC23C6C", Offset = "0xC23C6C", VA = "0xC23C6C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003C2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60020D4")]
				[Address(RVA = "0xC23CB4", Offset = "0xC23CB4", VA = "0xC23CB4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60020CF")]
			[Address(RVA = "0xC238E8", Offset = "0xC238E8", VA = "0xC238E8")]
			[DebuggerHidden]
			public <doMuzzleFlash>d__68(int <>1__state)
			{
			}

			[Token(Token = "0x60020D0")]
			[Address(RVA = "0xC23B4C", Offset = "0xC23B4C", VA = "0xC23B4C", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60020D1")]
			[Address(RVA = "0xC23B50", Offset = "0xC23B50", VA = "0xC23B50", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60020D3")]
			[Address(RVA = "0xC23C74", Offset = "0xC23C74", VA = "0xC23C74", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x200050E")]
		[CompilerGenerated]
		private sealed class <animateSlideAndEject>d__69 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40020BD")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40020BE")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40020BF")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public RaycastWeapon <>4__this;

			[Token(Token = "0x40020C0")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <frames>5__2;

			[Token(Token = "0x40020C1")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
			private bool <slideEndReached>5__3;

			[Token(Token = "0x40020C2")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3 <slideDestination>5__4;

			[Token(Token = "0x40020C3")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
			private bool <slideBeginningReached>5__5;

			[Token(Token = "0x170003C3")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60020D8")]
				[Address(RVA = "0xC243D0", Offset = "0xC243D0", VA = "0xC243D0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003C4")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60020DA")]
				[Address(RVA = "0xC24418", Offset = "0xC24418", VA = "0xC24418", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60020D5")]
			[Address(RVA = "0xC23910", Offset = "0xC23910", VA = "0xC23910")]
			[DebuggerHidden]
			public <animateSlideAndEject>d__69(int <>1__state)
			{
			}

			[Token(Token = "0x60020D6")]
			[Address(RVA = "0xC23CBC", Offset = "0xC23CBC", VA = "0xC23CBC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60020D7")]
			[Address(RVA = "0xC23CC0", Offset = "0xC23CC0", VA = "0xC23CC0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60020D9")]
			[Address(RVA = "0xC243D8", Offset = "0xC243D8", VA = "0xC243D8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002089")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		[Header("General : ")]
		public float MaxRange;

		[Token(Token = "0x400208A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float Damage;

		[Token(Token = "0x400208B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		[Tooltip("Semi requires user to press trigger repeatedly, Auto to hold down")]
		public FiringType FiringMethod;

		[Token(Token = "0x400208C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public ReloadType ReloadMethod;

		[Token(Token = "0x400208D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		[Tooltip("Ex : 0.2 = 5 Shots per second")]
		public float FiringRate;

		[Token(Token = "0x400208E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private float lastShotTime;

		[Token(Token = "0x400208F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		[Tooltip("Amount of force to apply to a Rigidbody once damaged")]
		public float BulletImpactForce;

		[Token(Token = "0x4002090")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		[Tooltip("Maximum amount of internal ammo this weapon can hold. Does not account for attached clips.  For example, a shotgun has internal ammo")]
		public float MaxInternalAmmo;

		[Token(Token = "0x4002091")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		[Tooltip("Set true to automatically chamber a new round on fire. False to require charging. Example : Bolt-Action Rifle does not auto chamber. ")]
		public bool AutoChamberRounds;

		[Token(Token = "0x4002092")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		[Tooltip("Does it matter if rounds are chambered or not. Does the user have to charge weapon as soon as ammo is inserted")]
		public bool MustChamberRounds;

		[Token(Token = "0x4002093")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		[Tooltip("If true a projectile will always be used instead of a raycast")]
		[Header("Projectile Settings : ")]
		public bool AlwaysFireProjectile;

		[Token(Token = "0x4002094")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		[Tooltip("If true the ProjectilePrefab will be instantiated during slowmo instead of using a raycast.")]
		public bool FireProjectileInSlowMo;

		[Token(Token = "0x4002095")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		[Tooltip("How fast to fire the weapon during slowmo. Keep in mind this is affected by Time.timeScale")]
		public float SlowMoRateOfFire;

		[Token(Token = "0x4002096")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("Amount of force to apply to Projectile")]
		public float ShotForce;

		[Token(Token = "0x4002097")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		[Tooltip("Amount of force to apply to the BulletCasingPrefab object")]
		public float BulletCasingForce;

		[Token(Token = "0x4002098")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Header("Recoil : ")]
		[Tooltip("How much force to apply to the tip of the barrel")]
		public Vector3 RecoilForce;

		[Token(Token = "0x4002099")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		[Tooltip("Time in seconds to allow the gun to be springy")]
		public float RecoilDuration;

		[Token(Token = "0x400209A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody weaponRigid;

		[Token(Token = "0x400209B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[Header("Raycast Options : ")]
		public LayerMask ValidLayers;

		[Token(Token = "0x400209C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[Tooltip("Transform of trigger to animate rotation of")]
		[Header("Weapon Setup : ")]
		public Transform TriggerTransform;

		[Token(Token = "0x400209D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Animate this back on fire")]
		public Transform SlideTransform;

		[Token(Token = "0x400209E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		[Tooltip("Where our raycast or projectile will start from.")]
		public Transform MuzzlePointTransform;

		[Token(Token = "0x400209F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		[Tooltip("Where to eject a bullet casing (optional)")]
		public Transform EjectPointTransform;

		[Token(Token = "0x40020A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		[Tooltip("Transform of Chambered Bullet inside the weapon. Hide this when no bullet is chambered. (Optional)")]
		public Transform ChamberedBullet;

		[Token(Token = "0x40020A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		[Tooltip("Make this active on fire. Randomize scale / rotation")]
		public GameObject MuzzleFlashObject;

		[Token(Token = "0x40020A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		[Tooltip("Eject this at EjectPointTransform (optional)")]
		public GameObject BulletCasingPrefab;

		[Token(Token = "0x40020A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		[Tooltip("If time is slowed this object will be instantiated at muzzle point instead of using a raycast")]
		public GameObject ProjectilePrefab;

		[Token(Token = "0x40020A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		[Tooltip("Hit Effects spawned at point of impact")]
		public GameObject HitFXPrefab;

		[Token(Token = "0x40020A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		[Tooltip("Play this sound on shoot")]
		public AudioClip GunShotSound;

		[Token(Token = "0x40020A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		[Tooltip("Play this sound if no ammo and user presses trigger")]
		public AudioClip EmptySound;

		[Token(Token = "0x40020A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		[Header("Slide Configuration : ")]
		[Tooltip("How far back to move the slide on fire")]
		public float SlideDistance;

		[Token(Token = "0x40020A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		[Tooltip("Should the slide be forced back if we shoot the last bullet")]
		public bool ForceSlideBackOnLastShot;

		[Token(Token = "0x40020A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		[Tooltip("How fast to move back the slide on fire. Default : 1")]
		public float slideSpeed;

		[Token(Token = "0x40020AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		private float minSlideDistance;

		[Token(Token = "0x40020AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		[Tooltip("Controller Input used to eject clip")]
		[Header("Inputs : ")]
		public List<GrabbedControllerBinding> EjectInput;

		[Token(Token = "0x40020AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		[Tooltip("Controller Input used to release the charging mechanism.")]
		public List<GrabbedControllerBinding> ReleaseSlideInput;

		[Token(Token = "0x40020AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		[Tooltip("Is there currently a bullet chambered and ready to be fired")]
		[Header("Shown for Debug : ")]
		public bool BulletInChamber;

		[Token(Token = "0x40020AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF9")]
		[Tooltip("Is there currently a bullet chambered and that must be ejected")]
		public bool EmptyBulletInChamber;

		[Token(Token = "0x40020AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		[Tooltip("Unity Event called when Shoot() method is successfully called")]
		[Header("Events")]
		public UnityEvent onShootEvent;

		[Token(Token = "0x40020B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		[Tooltip("Unity Event called when something attaches ammo to the weapon")]
		public UnityEvent onAttachedAmmoEvent;

		[Token(Token = "0x40020B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		[Tooltip("Unity Event called when something detaches ammo from the weapon")]
		public UnityEvent onDetachedAmmoEvent;

		[Token(Token = "0x40020B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		[Tooltip("Unity Event called when the charging handle is successfully pulled back on the weapon")]
		public UnityEvent onWeaponChargedEvent;

		[Token(Token = "0x40020B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		[Tooltip("Unity Event called when weapon damaged something")]
		public FloatEvent onDealtDamageEvent;

		[Token(Token = "0x40020B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		[Tooltip("Passes along Raycast Hit info whenever a Raycast hit is successfully detected. Use this to display fx, add force, etc.")]
		public RaycastHitEvent onRaycastHitEvent;

		[Token(Token = "0x40020B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		private bool slideForcedBack;

		[Token(Token = "0x40020B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		private WeaponSlide ws;

		[Token(Token = "0x40020B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		private bool readyToShoot;

		[Token(Token = "0x40020B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x141")]
		private bool playedEmptySound;

		[Token(Token = "0x40020B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		private IEnumerator shotRoutine;

		[Token(Token = "0x60020B9")]
		[Address(RVA = "0xC22170", Offset = "0xC22170", VA = "0xC22170")]
		private void Start()
		{
		}

		[Token(Token = "0x60020BA")]
		[Address(RVA = "0xC222EC", Offset = "0xC222EC", VA = "0xC222EC", Slot = "16")]
		public override void OnTrigger(float triggerValue)
		{
		}

		[Token(Token = "0x60020BB")]
		[Address(RVA = "0xC22414", Offset = "0xC22414", VA = "0xC22414")]
		private void checkSlideInput()
		{
		}

		[Token(Token = "0x60020BC")]
		[Address(RVA = "0xC2251C", Offset = "0xC2251C", VA = "0xC2251C")]
		private void checkEjectInput()
		{
		}

		[Token(Token = "0x60020BD")]
		[Address(RVA = "0xC22624", Offset = "0xC22624", VA = "0xC22624", Slot = "27")]
		public virtual void UnlockSlide()
		{
		}

		[Token(Token = "0x60020BE")]
		[Address(RVA = "0xC226AC", Offset = "0xC226AC", VA = "0xC226AC", Slot = "28")]
		public virtual void EjectMagazine()
		{
		}

		[Token(Token = "0x60020BF")]
		[Address(RVA = "0xC2275C", Offset = "0xC2275C", VA = "0xC2275C", Slot = "29")]
		public virtual void Shoot()
		{
		}

		[Token(Token = "0x60020C0")]
		[Address(RVA = "0xC22DF0", Offset = "0xC22DF0", VA = "0xC22DF0", Slot = "30")]
		public virtual void ApplyRecoil()
		{
		}

		[Token(Token = "0x60020C1")]
		[Address(RVA = "0xC22F70", Offset = "0xC22F70", VA = "0xC22F70", Slot = "31")]
		public virtual void OnRaycastHit(RaycastHit hit)
		{
		}

		[Token(Token = "0x60020C2")]
		[Address(RVA = "0xC232B8", Offset = "0xC232B8", VA = "0xC232B8", Slot = "32")]
		public virtual void ApplyParticleFX(Vector3 position, Quaternion rotation, Collider attachTo)
		{
		}

		[Token(Token = "0x60020C3")]
		[Address(RVA = "0xC23418", Offset = "0xC23418", VA = "0xC23418", Slot = "33")]
		public virtual void OnAttachedAmmo()
		{
		}

		[Token(Token = "0x60020C4")]
		[Address(RVA = "0xC23440", Offset = "0xC23440", VA = "0xC23440", Slot = "34")]
		public virtual void OnDetachedAmmo()
		{
		}

		[Token(Token = "0x60020C5")]
		[Address(RVA = "0xC23468", Offset = "0xC23468", VA = "0xC23468", Slot = "35")]
		public virtual int GetBulletCount()
		{
			return default(int);
		}

		[Token(Token = "0x60020C6")]
		[Address(RVA = "0xC234D4", Offset = "0xC234D4", VA = "0xC234D4")]
		private void removeBullet()
		{
		}

		[Token(Token = "0x60020C7")]
		[Address(RVA = "0xC22240", Offset = "0xC22240", VA = "0xC22240")]
		private void updateChamberedBullet()
		{
		}

		[Token(Token = "0x60020C8")]
		[Address(RVA = "0xC22CE0", Offset = "0xC22CE0", VA = "0xC22CE0")]
		private void chamberRound()
		{
		}

		[Token(Token = "0x60020C9")]
		[Address(RVA = "0xC235B4", Offset = "0xC235B4", VA = "0xC235B4")]
		private void randomizeMuzzleFlashScaleRotation()
		{
		}

		[Token(Token = "0x60020CA")]
		[Address(RVA = "0xC2369C", Offset = "0xC2369C", VA = "0xC2369C", Slot = "36")]
		public virtual void OnWeaponCharged(bool allowCasingEject)
		{
		}

		[Token(Token = "0x60020CB")]
		[Address(RVA = "0xC23744", Offset = "0xC23744", VA = "0xC23744", Slot = "37")]
		protected virtual void ejectCasing()
		{
		}

		[Token(Token = "0x60020CC")]
		[Address(RVA = "0xC22D88", Offset = "0xC22D88", VA = "0xC22D88")]
		[IteratorStateMachine(typeof(<doMuzzleFlash>d__68))]
		private IEnumerator doMuzzleFlash()
		{
			return null;
		}

		[Token(Token = "0x60020CD")]
		[Address(RVA = "0xC22D20", Offset = "0xC22D20", VA = "0xC22D20")]
		[IteratorStateMachine(typeof(<animateSlideAndEject>d__69))]
		private IEnumerator animateSlideAndEject()
		{
			return null;
		}

		[Token(Token = "0x60020CE")]
		[Address(RVA = "0xC23938", Offset = "0xC23938", VA = "0xC23938")]
		public RaycastWeapon()
		{
		}
	}
	[Token(Token = "0x200050F")]
	public enum FiringType
	{
		[Token(Token = "0x40020C5")]
		Semi,
		[Token(Token = "0x40020C6")]
		Automatic
	}
	[Token(Token = "0x2000510")]
	public enum ReloadType
	{
		[Token(Token = "0x40020C8")]
		InfiniteAmmo,
		[Token(Token = "0x40020C9")]
		ManualClip
	}
	[Token(Token = "0x2000511")]
	public class WeaponSlide : MonoBehaviour
	{
		[Token(Token = "0x2000512")]
		[CompilerGenerated]
		private sealed class <UnlockSlideRoutine>d__27 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x40020DA")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x40020DB")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x40020DC")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public WeaponSlide <>4__this;

			[Token(Token = "0x170003C5")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x60020EC")]
				[Address(RVA = "0xC24F98", Offset = "0xC24F98", VA = "0xC24F98", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003C6")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x60020EE")]
				[Address(RVA = "0xC24FE0", Offset = "0xC24FE0", VA = "0xC24FE0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x60020E9")]
			[Address(RVA = "0xC24EA0", Offset = "0xC24EA0", VA = "0xC24EA0")]
			[DebuggerHidden]
			public <UnlockSlideRoutine>d__27(int <>1__state)
			{
			}

			[Token(Token = "0x60020EA")]
			[Address(RVA = "0xC24EE8", Offset = "0xC24EE8", VA = "0xC24EE8", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x60020EB")]
			[Address(RVA = "0xC24EEC", Offset = "0xC24EEC", VA = "0xC24EEC", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x60020ED")]
			[Address(RVA = "0xC24FA0", Offset = "0xC24FA0", VA = "0xC24FA0", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x40020CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float MinLocalZ;

		[Token(Token = "0x40020CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float MaxLocalZ;

		[Token(Token = "0x40020CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private bool slidingBack;

		[Token(Token = "0x40020CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x21")]
		public bool LockedBack;

		[Token(Token = "0x40020CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public AudioClip SlideReleaseSound;

		[Token(Token = "0x40020CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public AudioClip LockedBackSound;

		[Token(Token = "0x40020D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public bool ZeroMassWhenNotHeld;

		[Token(Token = "0x40020D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private RaycastWeapon parentWeapon;

		[Token(Token = "0x40020D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private Grabbable parentGrabbable;

		[Token(Token = "0x40020D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private Vector3 initialLocalPos;

		[Token(Token = "0x40020D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Grabbable thisGrabbable;

		[Token(Token = "0x40020D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private AudioSource audioSource;

		[Token(Token = "0x40020D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Rigidbody rigid;

		[Token(Token = "0x40020D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private float initialMass;

		[Token(Token = "0x40020D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		private Vector3 _lockPosition;

		[Token(Token = "0x40020D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private bool lockSlidePosition;

		[Token(Token = "0x60020DB")]
		[Address(RVA = "0xC24420", Offset = "0xC24420", VA = "0xC24420")]
		private void Start()
		{
		}

		[Token(Token = "0x60020DC")]
		[Address(RVA = "0xC245DC", Offset = "0xC245DC", VA = "0xC245DC", Slot = "4")]
		public virtual void OnEnable()
		{
		}

		[Token(Token = "0x60020DD")]
		[Address(RVA = "0xC24694", Offset = "0xC24694", VA = "0xC24694", Slot = "5")]
		public virtual void OnDisable()
		{
		}

		[Token(Token = "0x60020DE")]
		[Address(RVA = "0xC2474C", Offset = "0xC2474C", VA = "0xC2474C")]
		private void Update()
		{
		}

		[Token(Token = "0x60020DF")]
		[Address(RVA = "0xC24A04", Offset = "0xC24A04", VA = "0xC24A04")]
		private void FixedUpdate()
		{
		}

		[Token(Token = "0x60020E0")]
		[Address(RVA = "0xC24AE0", Offset = "0xC24AE0", VA = "0xC24AE0", Slot = "6")]
		public virtual void LockBack()
		{
		}

		[Token(Token = "0x60020E1")]
		[Address(RVA = "0xC24B70", Offset = "0xC24B70", VA = "0xC24B70", Slot = "7")]
		public virtual void UnlockBack()
		{
		}

		[Token(Token = "0x60020E2")]
		[Address(RVA = "0xC248E4", Offset = "0xC248E4", VA = "0xC248E4")]
		private void onSlideBack()
		{
		}

		[Token(Token = "0x60020E3")]
		[Address(RVA = "0xC249AC", Offset = "0xC249AC", VA = "0xC249AC")]
		private void onSlideForward()
		{
		}

		[Token(Token = "0x60020E4")]
		[Address(RVA = "0xC24DA4", Offset = "0xC24DA4", VA = "0xC24DA4", Slot = "8")]
		public virtual void LockSlidePosition()
		{
		}

		[Token(Token = "0x60020E5")]
		[Address(RVA = "0xC24E08", Offset = "0xC24E08", VA = "0xC24E08", Slot = "9")]
		public virtual void UnlockSlidePosition()
		{
		}

		[Token(Token = "0x60020E6")]
		[Address(RVA = "0xC24E38", Offset = "0xC24E38", VA = "0xC24E38")]
		[IteratorStateMachine(typeof(<UnlockSlideRoutine>d__27))]
		public IEnumerator UnlockSlideRoutine()
		{
			return null;
		}

		[Token(Token = "0x60020E7")]
		[Address(RVA = "0xC24C70", Offset = "0xC24C70", VA = "0xC24C70")]
		private void playSoundInterval(float fromSeconds, float toSeconds, float volume)
		{
		}

		[Token(Token = "0x60020E8")]
		[Address(RVA = "0xC24EC8", Offset = "0xC24EC8", VA = "0xC24EC8")]
		public WeaponSlide()
		{
		}
	}
}
namespace Oculus.Spatializer.Propagation
{
	[Token(Token = "0x2000513")]
	public enum FaceType : uint
	{
		[Token(Token = "0x40020DE")]
		TRIANGLES,
		[Token(Token = "0x40020DF")]
		QUADS
	}
	[Token(Token = "0x2000514")]
	public enum MaterialProperty : uint
	{
		[Token(Token = "0x40020E1")]
		ABSORPTION,
		[Token(Token = "0x40020E2")]
		TRANSMISSION,
		[Token(Token = "0x40020E3")]
		SCATTERING
	}
	[Token(Token = "0x2000515")]
	public struct MeshGroup
	{
		[Token(Token = "0x40020E4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public UIntPtr indexOffset;

		[Token(Token = "0x40020E5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public UIntPtr faceCount;

		[Token(Token = "0x40020E6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public FaceType faceType;

		[Token(Token = "0x40020E7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public IntPtr material;
	}
}
namespace MagicLightProbes
{
	[Token(Token = "0x2000516")]
	public class MLPDataSaver
	{
		[Token(Token = "0x60020EF")]
		public static void SaveData<T>(T data, string fullFilePath, string consoleString = "")
		{
		}

		[Token(Token = "0x60020F0")]
		public static T LoadData<T>(T dataRecipient, string fullFilePath, string consoleStringSuccess = "", string consoleStringFail = "")
		{
			return (T)null;
		}

		[Token(Token = "0x60020F1")]
		[Address(RVA = "0xC24FE8", Offset = "0xC24FE8", VA = "0xC24FE8")]
		public MLPDataSaver()
		{
		}
	}
	[Token(Token = "0x2000517")]
	[HelpURL("https://motion-games-studio.gitbook.io/magic-light-probes/system-components/main-component")]
	[ExecuteInEditMode]
	public class MagicLightProbes : MonoBehaviour
	{
		[Token(Token = "0x2000518")]
		public struct VolumeParameters
		{
			[Token(Token = "0x4002191")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public int volumeIndex;

			[Token(Token = "0x4002192")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public Vector3 position;

			[Token(Token = "0x4002193")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			public Vector3 demensions;

			[Token(Token = "0x60020F7")]
			[Address(RVA = "0xC25B10", Offset = "0xC25B10", VA = "0xC25B10")]
			public VolumeParameters(int _volumeIndex, Vector3 _position, Vector3 _demensions)
			{
			}
		}

		[Token(Token = "0x2000519")]
		public enum FillingMode
		{
			[Token(Token = "0x4002195")]
			VerticalDublicating,
			[Token(Token = "0x4002196")]
			FullFilling,
			[Token(Token = "0x4002197")]
			SeparateFilling
		}

		[Token(Token = "0x200051A")]
		public enum Workflow
		{
			[Token(Token = "0x4002199")]
			Simple,
			[Token(Token = "0x400219A")]
			Advanced
		}

		[Token(Token = "0x200051B")]
		public enum BoundsDisplayMode
		{
			[Token(Token = "0x400219C")]
			Always,
			[Token(Token = "0x400219D")]
			OnSelection
		}

		[Token(Token = "0x200051C")]
		public enum DebugPasses
		{
			[Token(Token = "0x400219F")]
			MaximumHeight,
			[Token(Token = "0x40021A0")]
			GeometryCollision,
			[Token(Token = "0x40021A1")]
			GeometryIntersections,
			[Token(Token = "0x40021A2")]
			NearGeometry,
			[Token(Token = "0x40021A3")]
			OutOfRange,
			[Token(Token = "0x40021A4")]
			OutOfRangeBorders,
			[Token(Token = "0x40021A5")]
			ShadingBorders,
			[Token(Token = "0x40021A6")]
			ContrastAreas,
			[Token(Token = "0x40021A7")]
			NearLights,
			[Token(Token = "0x40021A8")]
			LightIntensity,
			[Token(Token = "0x40021A9")]
			UnlitProbes,
			[Token(Token = "0x40021AA")]
			EqualProbes,
			[Token(Token = "0x40021AB")]
			GeometryEdges,
			[Token(Token = "0x40021AC")]
			EqualColor
		}

		[Token(Token = "0x200051D")]
		public enum DrawModes
		{
			[Token(Token = "0x40021AE")]
			Accepted,
			[Token(Token = "0x40021AF")]
			Culled,
			[Token(Token = "0x40021B0")]
			Both
		}

		[Token(Token = "0x200051E")]
		public enum CalculationTarget
		{
			[Token(Token = "0x40021B2")]
			GeometryEdges,
			[Token(Token = "0x40021B3")]
			GeneralCalculation
		}

		[Serializable]
		[Token(Token = "0x200051F")]
		private struct TempPointData
		{
			[Token(Token = "0x40021B4")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public float xPos;

			[Token(Token = "0x40021B5")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			public float yPos;

			[Token(Token = "0x40021B6")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
			public float zPos;

			[Token(Token = "0x60020F8")]
			[Address(RVA = "0xC25B24", Offset = "0xC25B24", VA = "0xC25B24")]
			public TempPointData(Vector3 _position)
			{
			}
		}

		[Serializable]
		[Token(Token = "0x2000520")]
		public class WorkPathFoundEvent : UnityEvent<string>
		{
			[Token(Token = "0x60020F9")]
			[Address(RVA = "0xC25B30", Offset = "0xC25B30", VA = "0xC25B30")]
			public WorkPathFoundEvent()
			{
			}
		}

		[Token(Token = "0x40020E8")]
		private const string COMPUTE_SHADERS_FOLDER = "/Passes/Compute Shaders/";

		[Token(Token = "0x40020E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public IEnumerator colorThresholdRecalculationRoutine;

		[Token(Token = "0x40020EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public IEnumerator lightProbesVolumeCalculatingRoutine;

		[Token(Token = "0x40020EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public IEnumerator lightProbesVolumeCalculatingSubRoutine;

		[Token(Token = "0x40020EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public IEnumerator executingPassesRoutine;

		[Token(Token = "0x40020ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public IEnumerator volumeDivideingRoutine;

		[Token(Token = "0x40020EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<string> groundAndFloorKeywords;

		[Token(Token = "0x40020EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<string> storedGroundAndFloorKeywords;

		[Token(Token = "0x40020F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public GameObject probesVolume;

		[Token(Token = "0x40020F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool useDynamicDensity;

		[Token(Token = "0x40020F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float volumeSpacing;

		[Token(Token = "0x40020F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float volumeSpacingMin;

		[Token(Token = "0x40020F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float volumeSpacingMax;

		[Token(Token = "0x40020F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float cornersDetectionThreshold;

		[Token(Token = "0x40020F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public float cornersDetectionThresholdMin;

		[Token(Token = "0x40020F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public float cornersDetectionThresholdMax;

		[Token(Token = "0x40020F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public float lastCornersDetectionThreshold;

		[Token(Token = "0x40020F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public float lastCornersDetectionThresholdMin;

		[Token(Token = "0x40020FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float lastCornersDetectionThresholdMax;

		[Token(Token = "0x40020FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public int lastMaxProbesInVolume;

		[Token(Token = "0x40020FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x84")]
		public int maxProbesInVolume;

		[Token(Token = "0x40020FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public int defaultMaxProbesCount;

		[Token(Token = "0x40020FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8C")]
		public float lastVolumeSpacing;

		[Token(Token = "0x40020FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public float lastVolumeSpacingMin;

		[Token(Token = "0x4002100")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x94")]
		public float lastVolumeSpacingMax;

		[Token(Token = "0x4002101")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public bool volumeSpacingChanged;

		[Token(Token = "0x4002102")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x99")]
		public bool tooManySubVolumes;

		[Token(Token = "0x4002103")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		public FillingMode fillingMode;

		[Token(Token = "0x4002104")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Workflow workflow;

		[Token(Token = "0x4002105")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA4")]
		public float maxHeightAboveGeometry;

		[Token(Token = "0x4002106")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public float lastMaxHeightAboveGeometry;

		[Token(Token = "0x4002107")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xAC")]
		public float maxHeightAboveTerrain;

		[Token(Token = "0x4002108")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool considerDistanceToLights;

		[Token(Token = "0x4002109")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float lightIntensityTreshold;

		[Token(Token = "0x400210A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public float colorTreshold;

		[Token(Token = "0x400210B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float collisionDetectionRadius;

		[Token(Token = "0x400210C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool saveProbesNearbyGeometry;

		[Token(Token = "0x400210D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC4")]
		public float cornerProbesSpacing;

		[Token(Token = "0x400210E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public float nearbyGeometryDetectionRadius;

		[Token(Token = "0x400210F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xCC")]
		public float nearbyGeometryDetectionRadiusMin;

		[Token(Token = "0x4002110")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public float nearbyGeometryDetectionRadiusMax;

		[Token(Token = "0x4002111")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD4")]
		public float distanceFromNearbyGeometry;

		[Token(Token = "0x4002112")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD8")]
		public bool fillEquivalentVolume;

		[Token(Token = "0x4002113")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xDC")]
		public float equivalentVolumeFillingRate;

		[Token(Token = "0x4002114")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE0")]
		public bool fillUnlitVolume;

		[Token(Token = "0x4002115")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE1")]
		public bool fillFreeVolume;

		[Token(Token = "0x4002116")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE4")]
		public float unlitVolumeFillingRate;

		[Token(Token = "0x4002117")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public float freeVolumeFillingRate;

		[Token(Token = "0x4002118")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xEC")]
		public bool cullAcceptedVolume;

		[Token(Token = "0x4002119")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public float acceptedVolumeFillingRate;

		[Token(Token = "0x400211A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF4")]
		public float nearbyGeometryVolumeFillingRate;

		[Token(Token = "0x400211B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF8")]
		public float verticalDublicatingHeight;

		[Token(Token = "0x400211C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xFC")]
		public float verticalDublicatingStep;

		[Token(Token = "0x400211D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x100")]
		public LayerMask raycastFilter;

		[Token(Token = "0x400211E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x108")]
		public List<MLPLight> excludedLights;

		[Token(Token = "0x400211F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x110")]
		public LayerMask layerMask;

		[Token(Token = "0x4002120")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x114")]
		public int firstCollisionLayer;

		[Token(Token = "0x4002121")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x118")]
		public bool useMultithreading;

		[Token(Token = "0x4002122")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x120")]
		public GameObject previousSelection;

		[Token(Token = "0x4002123")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x128")]
		public bool unloaded;

		[Token(Token = "0x4002124")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x129")]
		public bool sceneChanging;

		[Token(Token = "0x4002125")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x12A")]
		public bool waitForPrevious;

		[Token(Token = "0x4002126")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x130")]
		public MagicLightProbes previousVolume;

		[Token(Token = "0x4002127")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x138")]
		public bool optimizeForMixedLighting;

		[Token(Token = "0x4002128")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x139")]
		public bool lastOptimizeForMixedLightingValue;

		[Token(Token = "0x4002129")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13A")]
		public bool preventLeakageThroughWalls;

		[Token(Token = "0x400212A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13B")]
		public bool useVolumeBottom;

		[Token(Token = "0x400212B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x13C")]
		public float lastColorThreshold;

		[Token(Token = "0x400212C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public float lastLightIntensityThreshold;

		[Token(Token = "0x400212D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x144")]
		public float lastEquivalentVolumeFillingRate;

		[Token(Token = "0x400212E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public float lastUnlitVolumeFillingRate;

		[Token(Token = "0x400212F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14C")]
		public float lastFreeVolumeFillingRate;

		[Token(Token = "0x4002130")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public float lastCornerProbesSpacing;

		[Token(Token = "0x4002131")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x154")]
		public float lastDistanceFromGeometry;

		[Token(Token = "0x4002132")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x158")]
		public bool debugMode;

		[Token(Token = "0x4002133")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x15C")]
		public float debugObjectScale;

		[Token(Token = "0x4002134")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		public BoundsDisplayMode boundsDisplayMode;

		[Token(Token = "0x4002135")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		public DebugPasses debugPass;

		[Token(Token = "0x4002136")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		public DrawModes drawMode;

		[Token(Token = "0x4002137")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16C")]
		public bool debugShowLightIntensity;

		[Token(Token = "0x4002138")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16D")]
		public bool showPreviewGrid;

		[Token(Token = "0x4002139")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16E")]
		public bool nextStep;

		[Token(Token = "0x400213A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x16F")]
		public bool cullByColor;

		[Token(Token = "0x400213B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		public bool forceSaveProbesOnShadingBorders;

		[Token(Token = "0x400213C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x178")]
		public string dataPath;

		[Token(Token = "0x400213D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x180")]
		public string workPath;

		[Token(Token = "0x400213E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x188")]
		public bool workPathFound;

		[Token(Token = "0x400213F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x190")]
		public List<Vector3> localFinishedPositions;

		[Token(Token = "0x4002140")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x198")]
		public ComputeShader calculateVolumeFilling;

		[Token(Token = "0x4002141")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A0")]
		public ComputeShader calculateProbeSpacing;

		[Token(Token = "0x4002142")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1A8")]
		public ComputeShader calculateDistanceFromGeometry;

		[Token(Token = "0x4002143")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B0")]
		public MLPVolume currentVolume;

		[Token(Token = "0x4002144")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1B8")]
		public MLPQuickEditing quickEditingComponent;

		[Token(Token = "0x4002145")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C0")]
		public bool recalculationRequired;

		[Token(Token = "0x4002146")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C8")]
		private List<Collider> lightColliders;

		[Token(Token = "0x4002147")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D0")]
		private List<Collider> objectColliders;

		[Token(Token = "0x4002148")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1D8")]
		private List<MLPPointData> finalDebugAcceptedPoints;

		[Token(Token = "0x4002149")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E0")]
		private List<MLPPointData> finalDebugCulledPoints;

		[Token(Token = "0x400214A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1E8")]
		private List<GameObject> tempObjects;

		[Token(Token = "0x400214B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F0")]
		private List<GameObject> temporarilyDisabledDynamicObjects;

		[Token(Token = "0x400214C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1F8")]
		private List<GameObject> staticObjectsWithoutCollider;

		[Token(Token = "0x400214D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x200")]
		private GameObject combinedVolumeObject;

		[Token(Token = "0x400214E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x208")]
		private VolumeParameters currentEditingVolume;

		[Token(Token = "0x400214F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x224")]
		private Vector3 currentSelectedObjectLastPosition;

		[Token(Token = "0x4002150")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x230")]
		private GameObject lastSelectedObject;

		[Token(Token = "0x4002151")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x238")]
		public bool cancelCombination;

		[Token(Token = "0x4002152")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x240")]
		public List<IEnumerator> passesToExecute;

		[Token(Token = "0x4002153")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x248")]
		public List<GameObject> staticObjects;

		[Token(Token = "0x4002154")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x250")]
		public List<MLPLight> lights;

		[Token(Token = "0x4002155")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x258")]
		public List<MLPPointData> tmpSharedPointsArray;

		[Token(Token = "0x4002156")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x260")]
		public List<MLPPointData> tmpOutOfRangePoints;

		[Token(Token = "0x4002157")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x268")]
		public List<MLPPointData> tmpOutOfMaxHeightPoints;

		[Token(Token = "0x4002158")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x270")]
		public List<MLPPointData> tmpGeometryCollisionPoints;

		[Token(Token = "0x4002159")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x278")]
		public List<MLPPointData> tmpContrastOnOutOfRangePoints;

		[Token(Token = "0x400215A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x280")]
		public List<MLPPointData> tmpContrastShadingBordersPoints;

		[Token(Token = "0x400215B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x288")]
		public List<MLPPointData> tmpUnlitPoints;

		[Token(Token = "0x400215C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x290")]
		public List<MLPPointData> tmpFreePoints;

		[Token(Token = "0x400215D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x298")]
		public List<MLPPointData> tmpNearbyGeometryPoints;

		[Token(Token = "0x400215E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A0")]
		public List<MLPPointData> tmpPointsNearGeometryIntersections;

		[Token(Token = "0x400215F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A8")]
		public List<MLPPointData> tmpNearbyLightsPoints;

		[Token(Token = "0x4002160")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B0")]
		public List<MLPPointData> tmpEqualPoints;

		[Token(Token = "0x4002161")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B8")]
		public List<MLPPointData> debugCulledPoints;

		[Token(Token = "0x4002162")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C0")]
		public List<MLPPointData> debugAcceptedPoints;

		[Token(Token = "0x4002163")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		public List<GameObject> subVolumesDivided;

		[Token(Token = "0x4002164")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		public List<Vector3> points;

		[Token(Token = "0x4002165")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D8")]
		public List<VolumeParameters> innerVolumes;

		[Token(Token = "0x4002166")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E0")]
		public List<VolumeParameters> subVolumesParameters;

		[Token(Token = "0x4002167")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E8")]
		public List<MagicLightProbes> innerVolumesObjects;

		[Token(Token = "0x4002168")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F0")]
		public List<LayerMask> layerMasks;

		[Token(Token = "0x4002169")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2F8")]
		public List<Vector3> transformedPoints;

		[Token(Token = "0x400216A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x300")]
		public string assetEditorPath;

		[Token(Token = "0x400216B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x308")]
		public MagicLightProbes parentVolume;

		[Token(Token = "0x400216C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static bool operationalDataLost;

		[Token(Token = "0x400216D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x310")]
		public bool localOperationalDataLost;

		[Token(Token = "0x400216E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x311")]
		public bool recombinationNeeded;

		[Token(Token = "0x400216F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x312")]
		public bool isInBackground;

		[Token(Token = "0x4002170")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x313")]
		public bool realtimeEditing;

		[Token(Token = "0x4002171")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x314")]
		public bool calculated;

		[Token(Token = "0x4002172")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x315")]
		public bool calculatingError;

		[Token(Token = "0x4002173")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x318")]
		public int xPointsCount;

		[Token(Token = "0x4002174")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x31C")]
		public int yPointsCount;

		[Token(Token = "0x4002175")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x320")]
		public int zPointsCount;

		[Token(Token = "0x4002176")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x324")]
		public float prevVolumeScaleX;

		[Token(Token = "0x4002177")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x328")]
		public float prevVolumeScaleY;

		[Token(Token = "0x4002178")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x32C")]
		public float prevVolumeScaleZ;

		[Token(Token = "0x4002179")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x330")]
		public int totalProbes;

		[Token(Token = "0x400217A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x334")]
		public int totalProbesInSubVolume;

		[Token(Token = "0x400217B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x338")]
		public int totalProbesInVolume;

		[Token(Token = "0x400217C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33C")]
		public bool calculatingVolume;

		[Token(Token = "0x400217D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x33D")]
		public bool calculatingVolumeSubPass;

		[Token(Token = "0x400217E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
		public string currentPass;

		[Token(Token = "0x400217F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x348")]
		public int currentPassProgressCounter;

		[Token(Token = "0x4002180")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34C")]
		public int currentPassProgressFrameSkipper;

		[Token(Token = "0x4002181")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x350")]
		public float totalProgress;

		[Token(Token = "0x4002182")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x354")]
		public float currentPassProgress;

		[Token(Token = "0x4002183")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x358")]
		public int selectedTab;

		[Token(Token = "0x4002184")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35C")]
		public bool showOptionsInManagerWindow;

		[Token(Token = "0x4002185")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x35D")]
		public bool restored;

		[Token(Token = "0x4002186")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x360")]
		public int currentVolumePart;

		[Token(Token = "0x4002187")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x364")]
		public float eta;

		[Token(Token = "0x4002188")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x368")]
		public bool changed;

		[Token(Token = "0x4002189")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x369")]
		public bool redivideParts;

		[Token(Token = "0x400218A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36A")]
		public bool combinedVolumeError;

		[Token(Token = "0x400218B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36B")]
		private bool passesExecuting;

		[Token(Token = "0x400218C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x36C")]
		private int totalProgressCounter;

		[Token(Token = "0x400218D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x370")]
		private int totalProgressFrameSkipper;

		[Token(Token = "0x400218E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x374")]
		private float startTime;

		[Token(Token = "0x400218F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x378")]
		private float endTime;

		[Token(Token = "0x4002190")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x37C")]
		private bool scenePreparing;

		[Token(Token = "0x60020F2")]
		[Address(RVA = "0xC24FF0", Offset = "0xC24FF0", VA = "0xC24FF0")]
		public void CheckForNearContrast(MLPPointData pointForCheck)
		{
		}

		[Token(Token = "0x60020F3")]
		[Address(RVA = "0xC253C4", Offset = "0xC253C4", VA = "0xC253C4")]
		public bool UpdateProgress(int count, int period = 100)
		{
			return default(bool);
		}

		[Token(Token = "0x60020F4")]
		[Address(RVA = "0xC2540C", Offset = "0xC2540C", VA = "0xC2540C")]
		private bool UpdateTotalProgress(int count, int period = 100)
		{
			return default(bool);
		}

		[Token(Token = "0x60020F5")]
		[Address(RVA = "0xC25454", Offset = "0xC25454", VA = "0xC25454")]
		public MagicLightProbes()
		{
		}
	}
	[Token(Token = "0x2000521")]
	[ExecuteInEditMode]
	[HelpURL("https://motion-games-studio.gitbook.io/magic-light-probes/system-components/mlp-combined-volume")]
	public class MLPCombinedVolume : MonoBehaviour
	{
		[Token(Token = "0x60020FA")]
		[Address(RVA = "0xC25B78", Offset = "0xC25B78", VA = "0xC25B78")]
		public MLPCombinedVolume()
		{
		}
	}
	[Token(Token = "0x2000522")]
	[DisallowMultipleComponent]
	[ExecuteInEditMode]
	[HelpURL("https://motion-games-studio.gitbook.io/magic-light-probes/system-components/mlp-light")]
	public class MLPLight : MonoBehaviour
	{
		[Token(Token = "0x2000523")]
		public enum CalculationType
		{
			[Token(Token = "0x40021DB")]
			AccurateShadows,
			[Token(Token = "0x40021DC")]
			LightIntensity
		}

		[Token(Token = "0x2000524")]
		public enum MLPLightType
		{
			[Token(Token = "0x40021DE")]
			Spot,
			[Token(Token = "0x40021DF")]
			Directional,
			[Token(Token = "0x40021E0")]
			Point,
			[Token(Token = "0x40021E1")]
			Area,
			[Token(Token = "0x40021E2")]
			Mesh
		}

		[Token(Token = "0x2000525")]
		public enum MLPLightTypeMA
		{
			[Token(Token = "0x40021E4")]
			Area = 3,
			[Token(Token = "0x40021E5")]
			Mesh
		}

		[Token(Token = "0x2000526")]
		public enum TracePointSettingType
		{
			[Token(Token = "0x40021E7")]
			Auto,
			[Token(Token = "0x40021E8")]
			Custom
		}

		[Token(Token = "0x40021B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MLPLightType lightType;

		[Token(Token = "0x40021B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public MLPLightTypeMA lightTypeMA;

		[Token(Token = "0x40021B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public MLPLightType lastLightType;

		[Token(Token = "0x40021BA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public CalculationType calculationType;

		[Token(Token = "0x40021BB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TracePointSettingType tracePointSettingType;

		[Token(Token = "0x40021BC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public LightmapBakeType lightMode;

		[Token(Token = "0x40021BD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Light targetLight;

		[Token(Token = "0x40021BE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public GameObject parentGameObject;

		[Token(Token = "0x40021BF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Vector3 position;

		[Token(Token = "0x40021C0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public Vector3 forward;

		[Token(Token = "0x40021C1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool saveNearbyProbes;

		[Token(Token = "0x40021C2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float saveRadius;

		[Token(Token = "0x40021C3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float range;

		[Token(Token = "0x40021C4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public bool useSourceParameters;

		[Token(Token = "0x40021C5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x65")]
		public bool reverseDirection;

		[Token(Token = "0x40021C6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public float angle;

		[Token(Token = "0x40021C7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public bool customTracePoints;

		[Token(Token = "0x40021C8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		public bool accurateTrace;

		[Token(Token = "0x40021C9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public int accuracy;

		[Token(Token = "0x40021CA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x74")]
		public int lastAccuracy;

		[Token(Token = "0x40021CB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public bool isDirectional;

		[Token(Token = "0x40021CC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public float tracePointSize;

		[Token(Token = "0x40021CD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public float lastTracePointSize;

		[Token(Token = "0x40021CE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public MeshFilter lastMesh;

		[Token(Token = "0x40021CF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public List<GameObject> tracePoints;

		[Token(Token = "0x40021D0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public List<MLPTracePoint> tracePointsData;

		[Token(Token = "0x40021D1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public MLPTracePoint mainTracePoint;

		[Token(Token = "0x40021D2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public MagicLightProbes parentVolume;

		[Token(Token = "0x40021D3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool showOptionsInManagerWindow;

		[Token(Token = "0x40021D4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public float intensity;

		[Token(Token = "0x40021D5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public bool resetEditor;

		[Token(Token = "0x40021D6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB9")]
		public bool showLightOnScene;

		[Token(Token = "0x40021D7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBA")]
		public bool saveOnOutOfRange;

		[Token(Token = "0x40021D8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBB")]
		public bool isHDRP;

		[Token(Token = "0x40021D9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public Vector2 hdrpAreaSize;

		[Token(Token = "0x60020FB")]
		[Address(RVA = "0xC25B80", Offset = "0xC25B80", VA = "0xC25B80")]
		public MLPLight()
		{
		}
	}
	[Token(Token = "0x2000527")]
	public class MLPPointData
	{
		[Token(Token = "0x40021E9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float lightIntensity;

		[Token(Token = "0x40021EA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float maxIntencity;

		[Token(Token = "0x40021EB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Vector3 position;

		[Token(Token = "0x40021EC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int col;

		[Token(Token = "0x40021ED")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public int row;

		[Token(Token = "0x40021EE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int depth;

		[Token(Token = "0x40021EF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public List<float> distancesToLights;

		[Token(Token = "0x40021F0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public List<Vector3> collisionPoints;

		[Token(Token = "0x40021F1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public List<MLPPointData> nearbyPoints;

		[Token(Token = "0x40021F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<MLPPointData> nearbyPointsOptimaziable;

		[Token(Token = "0x40021F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public bool removed;

		[Token(Token = "0x40021F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x51")]
		public bool outOfRange;

		[Token(Token = "0x40021F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x52")]
		public bool inSaveRange;

		[Token(Token = "0x40021F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x53")]
		public bool savedNearGeometry;

		[Token(Token = "0x40021F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public bool contrastOnOutOfRangeArea;

		[Token(Token = "0x40021F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x55")]
		public bool inRangeOfLight;

		[Token(Token = "0x40021F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x56")]
		public bool contrastOnShadingArea;

		[Token(Token = "0x40021FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x57")]
		public bool equalIntensity;

		[Token(Token = "0x40021FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public bool equalColor;

		[Token(Token = "0x40021FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x59")]
		public bool borderPoint;

		[Token(Token = "0x40021FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5A")]
		public bool outOfMaxHeight;

		[Token(Token = "0x40021FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float angleToLight;

		[Token(Token = "0x40021FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Vector3 contactPoint;

		[Token(Token = "0x4002200")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public bool inCorner;

		[Token(Token = "0x4002201")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6D")]
		public bool lockForCull;

		[Token(Token = "0x4002202")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6E")]
		public bool onGeometryEdge;

		[Token(Token = "0x4002203")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6F")]
		public bool lightLeakLocked;

		[Token(Token = "0x4002204")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Vector3 collisionNormal;

		[Token(Token = "0x4002205")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public List<MLPLight> inRangeForLights;

		[Token(Token = "0x4002206")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public List<MLPLight> inShadowForLights;

		[Token(Token = "0x4002207")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public GameObject temporaryObject;

		[Token(Token = "0x4002208")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public GameObject collisionObject;

		[Token(Token = "0x4002209")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public Color averagedColor;

		[Token(Token = "0x400220A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public bool xEndPoint;

		[Token(Token = "0x400220B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB1")]
		public bool yEndPoint;

		[Token(Token = "0x400220C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB2")]
		public bool zEndPoint;

		[Token(Token = "0x400220D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB3")]
		public bool xStartPoint;

		[Token(Token = "0x400220E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB4")]
		public bool yStartPoint;

		[Token(Token = "0x400220F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB5")]
		public bool zStartPoint;

		[Token(Token = "0x4002210")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public int equivalent;

		[Token(Token = "0x4002211")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public float avaragedColorValue;

		[Token(Token = "0x4002212")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public bool isUnlit;

		[Token(Token = "0x60020FC")]
		[Address(RVA = "0xC25C4C", Offset = "0xC25C4C", VA = "0xC25C4C")]
		public void SetPosition(Vector3 position)
		{
		}

		[Token(Token = "0x60020FD")]
		[Address(RVA = "0xC25C58", Offset = "0xC25C58", VA = "0xC25C58")]
		public void SetOutOfRange(bool visibility)
		{
		}

		[Token(Token = "0x60020FE")]
		[Address(RVA = "0xC25C64", Offset = "0xC25C64", VA = "0xC25C64")]
		public void SetLightIntensity(float intensity)
		{
		}

		[Token(Token = "0x60020FF")]
		[Address(RVA = "0xC25C6C", Offset = "0xC25C6C", VA = "0xC25C6C")]
		public void SetInSaveRange(bool value)
		{
		}

		[Token(Token = "0x6002100")]
		[Address(RVA = "0xC25C78", Offset = "0xC25C78", VA = "0xC25C78")]
		public void SetInContrastArea(bool value)
		{
		}

		[Token(Token = "0x6002101")]
		[Address(RVA = "0xC25C84", Offset = "0xC25C84", VA = "0xC25C84")]
		public MLPPointData()
		{
		}
	}
	[Token(Token = "0x2000528")]
	[ExecuteInEditMode]
	public class MLPPortal : MonoBehaviour
	{
		[Token(Token = "0x4002213")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float yStep;

		[Token(Token = "0x4002214")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float zStep;

		[Token(Token = "0x4002215")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public int yCounter;

		[Token(Token = "0x4002216")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public int zCounter;

		[Token(Token = "0x4002217")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public bool calculate;

		[Token(Token = "0x6002102")]
		[Address(RVA = "0xC25E0C", Offset = "0xC25E0C", VA = "0xC25E0C")]
		private void Start()
		{
		}

		[Token(Token = "0x6002103")]
		[Address(RVA = "0xC25E10", Offset = "0xC25E10", VA = "0xC25E10")]
		private void Update()
		{
		}

		[Token(Token = "0x6002104")]
		[Address(RVA = "0xC25E7C", Offset = "0xC25E7C", VA = "0xC25E7C")]
		private void DrawRayX(Vector3 dir)
		{
		}

		[Token(Token = "0x6002105")]
		[Address(RVA = "0xC260D8", Offset = "0xC260D8", VA = "0xC260D8")]
		private void DrawRayZ(Vector3 dir)
		{
		}

		[Token(Token = "0x6002106")]
		[Address(RVA = "0xC262F8", Offset = "0xC262F8", VA = "0xC262F8")]
		public MLPPortal()
		{
		}
	}
	[Token(Token = "0x2000529")]
	[HelpURL("https://motion-games-studio.gitbook.io/magic-light-probes/system-components/mlp-quick-editing")]
	public class MLPQuickEditing : MonoBehaviour
	{
		[Token(Token = "0x4002218")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public MagicLightProbes parent;

		[Token(Token = "0x4002219")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float gizmoScale;

		[Token(Token = "0x400221A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float drawDistance;

		[Token(Token = "0x6002107")]
		[Address(RVA = "0xC26300", Offset = "0xC26300", VA = "0xC26300")]
		public MLPQuickEditing()
		{
		}
	}
	[Serializable]
	[Token(Token = "0x200052A")]
	public class MLPTracePoint
	{
		[Token(Token = "0x400221B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public Vector3 position;

		[Token(Token = "0x400221C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 forward;

		[Token(Token = "0x400221D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string name;

		[Token(Token = "0x400221E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public GameObject pointGameObject;

		[Token(Token = "0x6002108")]
		[Address(RVA = "0xC26310", Offset = "0xC26310", VA = "0xC26310")]
		public MLPTracePoint()
		{
		}
	}
	[Token(Token = "0x200052B")]
	[ExecuteInEditMode]
	public class MLPVolume : MonoBehaviour
	{
		[Token(Token = "0x400221F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		[HideInInspector]
		public MagicLightProbes parentRootComponent;

		[Token(Token = "0x4002220")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		[HideInInspector]
		public MeshRenderer selfRenderer;

		[Token(Token = "0x4002221")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		[HideInInspector]
		public bool showGizmo;

		[Token(Token = "0x4002222")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x29")]
		public bool showGizmoSelected;

		[Token(Token = "0x4002223")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2A")]
		public bool isPartVolume;

		[Token(Token = "0x4002224")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2B")]
		public bool isSubdividedPart;

		[Token(Token = "0x4002225")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public bool isCalculated;

		[Token(Token = "0x4002226")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D")]
		public bool isInProcess;

		[Token(Token = "0x4002227")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2E")]
		public bool skipped;

		[Token(Token = "0x4002228")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int id;

		[Token(Token = "0x4002229")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public Color colorOnSelection;

		[Token(Token = "0x400222A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public List<MLPPointData> localAcceptedPoints;

		[Token(Token = "0x400222B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public List<MLPPointData> localNearbyGeometryPoints;

		[Token(Token = "0x400222C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		public List<MLPPointData> localContrastPoints;

		[Token(Token = "0x400222D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public List<MLPPointData> localCornerPoints;

		[Token(Token = "0x400222E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public List<Vector3> localNearbyGeometryPointsPositions;

		[Token(Token = "0x400222F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public List<Vector3> resultNearbyGeometryPointsPositions;

		[Token(Token = "0x4002230")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		public List<Vector3> localCornerPointsPositions;

		[Token(Token = "0x4002231")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		public List<Vector3> resultLocalCornerPointsPositions;

		[Token(Token = "0x4002232")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		public List<Vector3> localEquivalentPointsPositions;

		[Token(Token = "0x4002233")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		public List<Vector3> resultLocalEquivalentPointsPositions;

		[Token(Token = "0x4002234")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		public List<Vector3> resultLocalFreePointsPositions;

		[Token(Token = "0x4002235")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		public List<Vector3> localUnlitPointsPositions;

		[Token(Token = "0x4002236")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		public List<Vector3> localFreePointsPositions;

		[Token(Token = "0x4002237")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		public List<Vector3> resultLocalUnlitPointsPositions;

		[Token(Token = "0x4002238")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		public List<Vector3> localDirections;

		[Token(Token = "0x4002239")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		public List<Vector3> localAvaragedDirections;

		[Token(Token = "0x400223A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		public List<MLPPointData> localColorThresholdEditingPoints;

		[Token(Token = "0x400223B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xD0")]
		public int objectsInside;

		[Token(Token = "0x6002109")]
		[Address(RVA = "0xC26318", Offset = "0xC26318", VA = "0xC26318")]
		public MLPVolume()
		{
		}
	}
	[Token(Token = "0x200052C")]
	public class CheckForLightLeakAreas
	{
		[Token(Token = "0x200052D")]
		[CompilerGenerated]
		private sealed class <ExecutePass>d__0 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400223C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400223D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400223E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MagicLightProbes parent;

			[Token(Token = "0x400223F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <i>5__2;

			[Token(Token = "0x170003C7")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600210F")]
				[Address(RVA = "0xC26C58", Offset = "0xC26C58", VA = "0xC26C58", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003C8")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002111")]
				[Address(RVA = "0xC26CA0", Offset = "0xC26CA0", VA = "0xC26CA0", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600210C")]
			[Address(RVA = "0xC265F4", Offset = "0xC265F4", VA = "0xC265F4")]
			[DebuggerHidden]
			public <ExecutePass>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x600210D")]
			[Address(RVA = "0xC26624", Offset = "0xC26624", VA = "0xC26624", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x600210E")]
			[Address(RVA = "0xC26628", Offset = "0xC26628", VA = "0xC26628", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002110")]
			[Address(RVA = "0xC26C60", Offset = "0xC26C60", VA = "0xC26C60", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x600210A")]
		[Address(RVA = "0xC2658C", Offset = "0xC2658C", VA = "0xC2658C")]
		[IteratorStateMachine(typeof(<ExecutePass>d__0))]
		public IEnumerator ExecutePass(MagicLightProbes parent)
		{
			return null;
		}

		[Token(Token = "0x600210B")]
		[Address(RVA = "0xC2661C", Offset = "0xC2661C", VA = "0xC2661C")]
		public CheckForLightLeakAreas()
		{
		}
	}
	[Token(Token = "0x200052E")]
	public class DublicateVertical
	{
		[Token(Token = "0x200052F")]
		[CompilerGenerated]
		private sealed class <ExecutePass>d__0 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002240")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002241")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002242")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MagicLightProbes parent;

			[Token(Token = "0x4002243")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private int <steps>5__2;

			[Token(Token = "0x4002244")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private List<MLPPointData> <candidates>5__3;

			[Token(Token = "0x4002245")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private List<MLPPointData> <savedNearGeometry>5__4;

			[Token(Token = "0x4002246")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private int <i>5__5;

			[Token(Token = "0x4002247")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private List<MLPPointData>.Enumerator <>7__wrap5;

			[Token(Token = "0x170003C9")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002118")]
				[Address(RVA = "0xC278B0", Offset = "0xC278B0", VA = "0xC278B0", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003CA")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600211A")]
				[Address(RVA = "0xC278F8", Offset = "0xC278F8", VA = "0xC278F8", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002114")]
			[Address(RVA = "0xC26D10", Offset = "0xC26D10", VA = "0xC26D10")]
			[DebuggerHidden]
			public <ExecutePass>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x6002115")]
			[Address(RVA = "0xC26D40", Offset = "0xC26D40", VA = "0xC26D40", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002116")]
			[Address(RVA = "0xC26D5C", Offset = "0xC26D5C", VA = "0xC26D5C", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002117")]
			[Address(RVA = "0xC27860", Offset = "0xC27860", VA = "0xC27860")]
			private void <>m__Finally1()
			{
			}

			[Token(Token = "0x6002119")]
			[Address(RVA = "0xC278B8", Offset = "0xC278B8", VA = "0xC278B8", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6002112")]
		[Address(RVA = "0xC26CA8", Offset = "0xC26CA8", VA = "0xC26CA8")]
		[IteratorStateMachine(typeof(<ExecutePass>d__0))]
		public IEnumerator ExecutePass(MagicLightProbes parent)
		{
			return null;
		}

		[Token(Token = "0x6002113")]
		[Address(RVA = "0xC26D38", Offset = "0xC26D38", VA = "0xC26D38")]
		public DublicateVertical()
		{
		}
	}
	[Token(Token = "0x2000530")]
	public static class RandomGen
	{
		[Token(Token = "0x4002248")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static System.Random _global;

		[Token(Token = "0x4002249")]
		[ThreadStatic]
		private static System.Random _local;

		[Token(Token = "0x600211B")]
		[Address(RVA = "0xC27900", Offset = "0xC27900", VA = "0xC27900")]
		public static int Next(int min, int max)
		{
			return default(int);
		}
	}
	[Token(Token = "0x2000531")]
	public class EquivalentProbesOptimization
	{
		[Token(Token = "0x2000532")]
		[CompilerGenerated]
		private sealed class <ExecutePass>d__0 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400224A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400224B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400224C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MagicLightProbes parent;

			[Token(Token = "0x400224D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MLPVolume currentVolume;

			[Token(Token = "0x400224E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public bool realtimeEditing;

			[Token(Token = "0x400224F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private Vector3[] <exit>5__2;

			[Token(Token = "0x4002250")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private List<MLPPointData> <tempList>5__3;

			[Token(Token = "0x4002251")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private int <i>5__4;

			[Token(Token = "0x170003CB")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002122")]
				[Address(RVA = "0xC28354", Offset = "0xC28354", VA = "0xC28354", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003CC")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002124")]
				[Address(RVA = "0xC2839C", Offset = "0xC2839C", VA = "0xC2839C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600211F")]
			[Address(RVA = "0xC27BF0", Offset = "0xC27BF0", VA = "0xC27BF0")]
			[DebuggerHidden]
			public <ExecutePass>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x6002120")]
			[Address(RVA = "0xC27C20", Offset = "0xC27C20", VA = "0xC27C20", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002121")]
			[Address(RVA = "0xC27C24", Offset = "0xC27C24", VA = "0xC27C24", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002123")]
			[Address(RVA = "0xC2835C", Offset = "0xC2835C", VA = "0xC2835C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x600211D")]
		[Address(RVA = "0xC27B70", Offset = "0xC27B70", VA = "0xC27B70")]
		[IteratorStateMachine(typeof(<ExecutePass>d__0))]
		public IEnumerator ExecutePass(MagicLightProbes parent, [Optional] MLPVolume currentVolume, bool realtimeEditing = false)
		{
			return null;
		}

		[Token(Token = "0x600211E")]
		[Address(RVA = "0xC27C18", Offset = "0xC27C18", VA = "0xC27C18")]
		public EquivalentProbesOptimization()
		{
		}
	}
	[Token(Token = "0x2000533")]
	public class PartialVolumeFilling
	{
		[Token(Token = "0x2000534")]
		public enum TargetPoint
		{
			[Token(Token = "0x4002253")]
			Unlit,
			[Token(Token = "0x4002254")]
			Equivalent,
			[Token(Token = "0x4002255")]
			Free
		}

		[Token(Token = "0x2000535")]
		[CompilerGenerated]
		private sealed class <ExecutePass>d__1 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002256")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002257")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002258")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public TargetPoint targetPoint;

			[Token(Token = "0x4002259")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MagicLightProbes parent;

			[Token(Token = "0x400225A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			public MLPVolume currentVolume;

			[Token(Token = "0x400225B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			public bool realtimeEditing;

			[Token(Token = "0x400225C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
			private List<MLPPointData> <tempList>5__2;

			[Token(Token = "0x400225D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
			private List<Vector3> <realTimeEditingList>5__3;

			[Token(Token = "0x400225E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
			private List<Vector3> <targetPoints>5__4;

			[Token(Token = "0x400225F")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
			private float <fillingRate>5__5;

			[Token(Token = "0x4002260")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
			private Vector3[] <exit>5__6;

			[Token(Token = "0x4002261")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
			private int <i>5__7;

			[Token(Token = "0x170003CD")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600212A")]
				[Address(RVA = "0xC293F4", Offset = "0xC293F4", VA = "0xC293F4", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003CE")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600212C")]
				[Address(RVA = "0xC2943C", Offset = "0xC2943C", VA = "0xC2943C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002127")]
			[Address(RVA = "0xC28434", Offset = "0xC28434", VA = "0xC28434")]
			[DebuggerHidden]
			public <ExecutePass>d__1(int <>1__state)
			{
			}

			[Token(Token = "0x6002128")]
			[Address(RVA = "0xC28464", Offset = "0xC28464", VA = "0xC28464", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002129")]
			[Address(RVA = "0xC28468", Offset = "0xC28468", VA = "0xC28468", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600212B")]
			[Address(RVA = "0xC293FC", Offset = "0xC293FC", VA = "0xC293FC", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6002125")]
		[Address(RVA = "0xC283A4", Offset = "0xC283A4", VA = "0xC283A4")]
		[IteratorStateMachine(typeof(<ExecutePass>d__1))]
		public IEnumerator ExecutePass(MagicLightProbes parent, TargetPoint targetPoint, [Optional] MLPVolume currentVolume, bool realtimeEditing = false)
		{
			return null;
		}

		[Token(Token = "0x6002126")]
		[Address(RVA = "0xC2845C", Offset = "0xC2845C", VA = "0xC2845C")]
		public PartialVolumeFilling()
		{
		}
	}
	[Token(Token = "0x2000536")]
	public class RemoveUnusedPoints
	{
		[Token(Token = "0x2000537")]
		[CompilerGenerated]
		private sealed class <ExecutePass>d__0 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002262")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002263")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002264")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MagicLightProbes parent;

			[Token(Token = "0x4002265")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			private List<MLPPointData> <pointsToRemove>5__2;

			[Token(Token = "0x4002266")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private int <i>5__3;

			[Token(Token = "0x170003CF")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002132")]
				[Address(RVA = "0xC29A20", Offset = "0xC29A20", VA = "0xC29A20", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003D0")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002134")]
				[Address(RVA = "0xC29A68", Offset = "0xC29A68", VA = "0xC29A68", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x600212F")]
			[Address(RVA = "0xC294AC", Offset = "0xC294AC", VA = "0xC294AC")]
			[DebuggerHidden]
			public <ExecutePass>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x6002130")]
			[Address(RVA = "0xC294DC", Offset = "0xC294DC", VA = "0xC294DC", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002131")]
			[Address(RVA = "0xC294E0", Offset = "0xC294E0", VA = "0xC294E0", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002133")]
			[Address(RVA = "0xC29A28", Offset = "0xC29A28", VA = "0xC29A28", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x600212D")]
		[Address(RVA = "0xC29444", Offset = "0xC29444", VA = "0xC29444")]
		[IteratorStateMachine(typeof(<ExecutePass>d__0))]
		public IEnumerator ExecutePass(MagicLightProbes parent)
		{
			return null;
		}

		[Token(Token = "0x600212E")]
		[Address(RVA = "0xC294D4", Offset = "0xC294D4", VA = "0xC294D4")]
		public RemoveUnusedPoints()
		{
		}
	}
	[Token(Token = "0x2000538")]
	public class SetDistanceFromGeometry
	{
		[Token(Token = "0x2000539")]
		[CompilerGenerated]
		private sealed class <ExecutePass>d__0 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x4002267")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x4002268")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x4002269")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public MLPVolume currentVolume;

			[Token(Token = "0x400226A")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
			public MagicLightProbes parent;

			[Token(Token = "0x400226B")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
			private Vector3[] <exit>5__2;

			[Token(Token = "0x400226C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
			private int <i>5__3;

			[Token(Token = "0x170003D1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x600213A")]
				[Address(RVA = "0xC2A09C", Offset = "0xC2A09C", VA = "0xC2A09C", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003D2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x600213C")]
				[Address(RVA = "0xC2A0E4", Offset = "0xC2A0E4", VA = "0xC2A0E4", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002137")]
			[Address(RVA = "0xC29AE4", Offset = "0xC29AE4", VA = "0xC29AE4")]
			[DebuggerHidden]
			public <ExecutePass>d__0(int <>1__state)
			{
			}

			[Token(Token = "0x6002138")]
			[Address(RVA = "0xC29B14", Offset = "0xC29B14", VA = "0xC29B14", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002139")]
			[Address(RVA = "0xC29B18", Offset = "0xC29B18", VA = "0xC29B18", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x600213B")]
			[Address(RVA = "0xC2A0A4", Offset = "0xC2A0A4", VA = "0xC2A0A4", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x6002135")]
		[Address(RVA = "0xC29A70", Offset = "0xC29A70", VA = "0xC29A70")]
		[IteratorStateMachine(typeof(<ExecutePass>d__0))]
		public IEnumerator ExecutePass(MagicLightProbes parent, MLPVolume currentVolume)
		{
			return null;
		}

		[Token(Token = "0x6002136")]
		[Address(RVA = "0xC29B0C", Offset = "0xC29B0C", VA = "0xC29B0C")]
		public SetDistanceFromGeometry()
		{
		}
	}
}
namespace LIV.SDK.Unity
{
	[Token(Token = "0x200053A")]
	[Flags]
	public enum INVALIDATION_FLAGS : uint
	{
		[Token(Token = "0x400226E")]
		NONE = 0u,
		[Token(Token = "0x400226F")]
		HMD_CAMERA = 1u,
		[Token(Token = "0x4002270")]
		STAGE = 2u,
		[Token(Token = "0x4002271")]
		MR_CAMERA_PREFAB = 4u,
		[Token(Token = "0x4002272")]
		EXCLUDE_BEHAVIOURS = 8u
	}
	[Token(Token = "0x200053B")]
	[AddComponentMenu("LIV/LIV")]
	[HelpURL("https://liv.tv/sdk-unity-docs")]
	public class LIV : MonoBehaviour
	{
		[Token(Token = "0x200053C")]
		[CompilerGenerated]
		private sealed class <WaitForUnityEndOfFrame>d__65 : IEnumerator<object>, IEnumerator, IDisposable
		{
			[Token(Token = "0x400228C")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
			private int <>1__state;

			[Token(Token = "0x400228D")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
			private object <>2__current;

			[Token(Token = "0x400228E")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
			public LIV <>4__this;

			[Token(Token = "0x170003E1")]
			private object System.Collections.Generic.IEnumerator<System.Object>.Current
			{
				[Token(Token = "0x6002166")]
				[Address(RVA = "0xC2B504", Offset = "0xC2B504", VA = "0xC2B504", Slot = "4")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x170003E2")]
			private object System.Collections.IEnumerator.Current
			{
				[Token(Token = "0x6002168")]
				[Address(RVA = "0xC2B54C", Offset = "0xC2B54C", VA = "0xC2B54C", Slot = "7")]
				[DebuggerHidden]
				get
				{
					return null;
				}
			}

			[Token(Token = "0x6002163")]
			[Address(RVA = "0xC2AADC", Offset = "0xC2AADC", VA = "0xC2AADC")]
			[DebuggerHidden]
			public <WaitForUnityEndOfFrame>d__65(int <>1__state)
			{
			}

			[Token(Token = "0x6002164")]
			[Address(RVA = "0xC2B394", Offset = "0xC2B394", VA = "0xC2B394", Slot = "5")]
			[DebuggerHidden]
			private void System.IDisposable.Dispose()
			{
			}

			[Token(Token = "0x6002165")]
			[Address(RVA = "0xC2B398", Offset = "0xC2B398", VA = "0xC2B398", Slot = "6")]
			private bool MoveNext()
			{
				return default(bool);
			}

			[Token(Token = "0x6002167")]
			[Address(RVA = "0xC2B50C", Offset = "0xC2B50C", VA = "0xC2B50C", Slot = "8")]
			[DebuggerHidden]
			private void System.Collections.IEnumerator.Reset()
			{
			}
		}

		[Token(Token = "0x4002273")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public Action onActivate;

		[Token(Token = "0x4002274")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public Action<SDKRender> onPreRender;

		[Token(Token = "0x4002275")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Action<SDKRender> onPreRenderBackground;

		[Token(Token = "0x4002276")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public Action<SDKRender> onPostRenderBackground;

		[Token(Token = "0x4002277")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Action<SDKRender> onPreRenderForeground;

		[Token(Token = "0x4002278")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public Action<SDKRender> onPostRenderForeground;

		[Token(Token = "0x4002279")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public Action<SDKRender> onPostRender;

		[Token(Token = "0x400227A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		public Action onDeactivate;

		[Token(Token = "0x400227B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		[Tooltip("This is the topmost transform of your VR rig.")]
		[SerializeField]
		[FormerlySerializedAs("TrackedSpaceOrigin")]
		private Transform _stage;

		[Token(Token = "0x400227C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		[Tooltip("This transform is an additional wrapper to the user’s playspace.")]
		[FormerlySerializedAs("StageTransform")]
		[SerializeField]
		private Transform _stageTransform;

		[Token(Token = "0x400227D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		[Tooltip("This is the camera responsible for rendering the user’s HMD.")]
		[FormerlySerializedAs("HMDCamera")]
		[SerializeField]
		private Camera _HMDCamera;

		[Token(Token = "0x400227E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		[SerializeField]
		[FormerlySerializedAs("MRCameraPrefab")]
		[Tooltip("Camera prefab for customized rendering.")]
		private Camera _MRCameraPrefab;

		[Token(Token = "0x400227F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		[FormerlySerializedAs("DisableStandardAssets")]
		[SerializeField]
		[Tooltip("This option disables all standard Unity assets for the Mixed Reality rendering.")]
		private bool _disableStandardAssets;

		[Token(Token = "0x4002280")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		[SerializeField]
		[FormerlySerializedAs("SpectatorLayerMask")]
		[Tooltip("The layer mask defines exactly which object layers should be rendered in MR.")]
		private LayerMask _spectatorLayerMask;

		[Token(Token = "0x4002281")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		[SerializeField]
		[FormerlySerializedAs("ExcludeBehaviours")]
		[Tooltip("This is for removing unwanted scripts from the cloned MR camera.")]
		private string[] _excludeBehaviours;

		[Token(Token = "0x4002282")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		[Tooltip("Recovers corrupted alpha channel when using post-effects.")]
		[FormerlySerializedAs("FixPostEffectsAlpha")]
		[SerializeField]
		private bool _fixPostEffectsAlpha;

		[Token(Token = "0x4002283")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private SDKRender _render;

		[Token(Token = "0x4002284")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private bool _wasActive;

		[Token(Token = "0x4002285")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x9C")]
		private INVALIDATION_FLAGS _invalidate;

		[Token(Token = "0x4002286")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private Transform _stageCandidate;

		[Token(Token = "0x4002287")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private Camera _HMDCameraCandidate;

		[Token(Token = "0x4002288")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private Camera _MRCameraPrefabCandidate;

		[Token(Token = "0x4002289")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private string[] _excludeBehavioursCandidate;

		[Token(Token = "0x400228A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private bool _enabled;

		[Token(Token = "0x400228B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC8")]
		private Coroutine _waitForEndOfFrameCoroutine;

		[Token(Token = "0x170003D3")]
		public Transform stage
		{
			[Token(Token = "0x600213D")]
			[Address(RVA = "0xC2A0EC", Offset = "0xC2A0EC", VA = "0xC2A0EC")]
			get
			{
				return null;
			}
			[Token(Token = "0x600213E")]
			[Address(RVA = "0xC2A17C", Offset = "0xC2A17C", VA = "0xC2A17C")]
			set
			{
			}
		}

		[Token(Token = "0x170003D4")]
		[Obsolete("Use stage instead")]
		public Transform trackedSpaceOrigin
		{
			[Token(Token = "0x600213F")]
			[Address(RVA = "0xC2A274", Offset = "0xC2A274", VA = "0xC2A274")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002140")]
			[Address(RVA = "0xC2A278", Offset = "0xC2A278", VA = "0xC2A278")]
			set
			{
			}
		}

		[Token(Token = "0x170003D5")]
		public Matrix4x4 stageLocalToWorldMatrix
		{
			[Token(Token = "0x6002141")]
			[Address(RVA = "0xC2A27C", Offset = "0xC2A27C", VA = "0xC2A27C")]
			get
			{
				return default(Matrix4x4);
			}
		}

		[Token(Token = "0x170003D6")]
		public Matrix4x4 stageWorldToLocalMatrix
		{
			[Token(Token = "0x6002142")]
			[Address(RVA = "0xC2A374", Offset = "0xC2A374", VA = "0xC2A374")]
			get
			{
				return default(Matrix4x4);
			}
		}

		[Token(Token = "0x170003D7")]
		public Transform stageTransform
		{
			[Token(Token = "0x6002143")]
			[Address(RVA = "0xC2A46C", Offset = "0xC2A46C", VA = "0xC2A46C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002144")]
			[Address(RVA = "0xC2A474", Offset = "0xC2A474", VA = "0xC2A474")]
			set
			{
			}
		}

		[Token(Token = "0x170003D8")]
		public Camera HMDCamera
		{
			[Token(Token = "0x6002145")]
			[Address(RVA = "0xC2A47C", Offset = "0xC2A47C", VA = "0xC2A47C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002146")]
			[Address(RVA = "0xC2A484", Offset = "0xC2A484", VA = "0xC2A484")]
			set
			{
			}
		}

		[Token(Token = "0x170003D9")]
		public Camera MRCameraPrefab
		{
			[Token(Token = "0x6002147")]
			[Address(RVA = "0xC2A57C", Offset = "0xC2A57C", VA = "0xC2A57C")]
			get
			{
				return null;
			}
			[Token(Token = "0x6002148")]
			[Address(RVA = "0xC2A584", Offset = "0xC2A584", VA = "0xC2A584")]
			set
			{
			}
		}

		[Token(Token = "0x170003DA")]
		public bool disableStandardAssets
		{
			[Token(Token = "0x6002149")]
			[Address(RVA = "0xC2A614", Offset = "0xC2A614", VA = "0xC2A614")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x600214A")]
			[Address(RVA = "0xC2A61C", Offset = "0xC2A61C", VA = "0xC2A61C")]
			set
			{
			}
		}

		[Token(Token = "0x170003DB")]
		public LayerMask spectatorLayerMask
		{
			[Token(Token = "0x600214B")]
			[Address(RVA = "0xC2A628", Offset = "0xC2A628", VA = "0xC2A628")]
			get
			{
				return default(LayerMask);
			}
			[Token(Token = "0x600214C")]
			[Address(RVA = "0xC2A630", Offset = "0xC2A630", VA = "0xC2A630")]
			set
			{
			}
		}

		[Token(Token = "0x170003DC")]
		public string[] excludeBehaviours
		{
			[Token(Token = "0x600214D")]
			[Address(RVA = "0xC2A638", Offset = "0xC2A638", VA = "0xC2A638")]
			get
			{
				return null;
			}
			[Token(Token = "0x600214E")]
			[Address(RVA = "0xC2A640", Offset = "0xC2A640", VA = "0xC2A640")]
			set
			{
			}
		}

		[Token(Token = "0x170003DD")]
		public bool fixPostEffectsAlpha
		{
			[Token(Token = "0x600214F")]
			[Address(RVA = "0xC2A678", Offset = "0xC2A678", VA = "0xC2A678")]
			get
			{
				return default(bool);
			}
			[Token(Token = "0x6002150")]
			[Address(RVA = "0xC2A680", Offset = "0xC2A680", VA = "0xC2A680")]
			set
			{
			}
		}

		[Token(Token = "0x170003DE")]
		public bool isValid
		{
			[Token(Token = "0x6002151")]
			[Address(RVA = "0xC2A68C", Offset = "0xC2A68C", VA = "0xC2A68C")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170003DF")]
		public bool isActive
		{
			[Token(Token = "0x6002152")]
			[Address(RVA = "0xC2A7EC", Offset = "0xC2A7EC", VA = "0xC2A7EC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170003E0")]
		public SDKRender render
		{
			[Token(Token = "0x6002153")]
			[Address(RVA = "0xC2A8F4", Offset = "0xC2A8F4", VA = "0xC2A8F4")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x6002154")]
		[Address(RVA = "0xC2A8FC", Offset = "0xC2A8FC", VA = "0xC2A8FC")]
		private void OnEnable()
		{
		}

		[Token(Token = "0x6002155")]
		[Address(RVA = "0xC2A94C", Offset = "0xC2A94C", VA = "0xC2A94C")]
		private void Update()
		{
		}

		[Token(Token = "0x6002156")]
		[Address(RVA = "0xC2AA6C", Offset = "0xC2AA6C", VA = "0xC2AA6C")]
		private void OnDisable()
		{
		}

		[Token(Token = "0x6002157")]
		[Address(RVA = "0xC2AA74", Offset = "0xC2AA74", VA = "0xC2AA74")]
		[IteratorStateMachine(typeof(<WaitForUnityEndOfFrame>d__65))]
		private IEnumerator WaitForUnityEndOfFrame()
		{
			return null;
		}

		[Token(Token = "0x6002158")]
		[Address(RVA = "0xC2A908", Offset = "0xC2A908", VA = "0xC2A908")]
		private void UpdateSDKActive()
		{
		}

		[Token(Token = "0x6002159")]
		[Address(RVA = "0xC2AB04", Offset = "0xC2AB04", VA = "0xC2AB04")]
		private void OnSDKActiveChanged(bool value)
		{
		}

		[Token(Token = "0x600215A")]
		[Address(RVA = "0xC2AB10", Offset = "0xC2AB10", VA = "0xC2AB10")]
		private void OnSDKActivate()
		{
		}

		[Token(Token = "0x600215B")]
		[Address(RVA = "0xC2ABB4", Offset = "0xC2ABB4", VA = "0xC2ABB4")]
		private void OnSDKDeactivate()
		{
		}

		[Token(Token = "0x600215C")]
		[Address(RVA = "0xC2ADB4", Offset = "0xC2ADB4", VA = "0xC2ADB4")]
		private void CreateAssets()
		{
		}

		[Token(Token = "0x600215D")]
		[Address(RVA = "0xC2AE8C", Offset = "0xC2AE8C", VA = "0xC2AE8C")]
		private void DestroyAssets()
		{
		}

		[Token(Token = "0x600215E")]
		[Address(RVA = "0xC2AE24", Offset = "0xC2AE24", VA = "0xC2AE24")]
		private void StartRenderCoroutine()
		{
		}

		[Token(Token = "0x600215F")]
		[Address(RVA = "0xC2AE68", Offset = "0xC2AE68", VA = "0xC2AE68")]
		private void StopRenderCoroutine()
		{
		}

		[Token(Token = "0x6002160")]
		[Address(RVA = "0xC2AC64", Offset = "0xC2AC64", VA = "0xC2AC64")]
		private void SubmitSDKOutput()
		{
		}

		[Token(Token = "0x6002161")]
		[Address(RVA = "0xC2A964", Offset = "0xC2A964", VA = "0xC2A964")]
		private void Invalidate()
		{
		}

		[Token(Token = "0x6002162")]
		[Address(RVA = "0xC2B1D4", Offset = "0xC2B1D4", VA = "0xC2B1D4")]
		public LIV()
		{
		}
	}
	[Token(Token = "0x200053D")]
	public static class SDKBridge
	{
		[Token(Token = "0x200053E")]
		public struct SDKInjection<T>
		{
			[Token(Token = "0x4002296")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public bool active;

			[Token(Token = "0x4002297")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			public T data;
		}

		[Token(Token = "0x200053F")]
		private struct testing
		{
			[Token(Token = "0x4002298")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
			private int x;

			[Token(Token = "0x4002299")]
			[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
			private int y;
		}

		[Token(Token = "0x400228F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		private static SDKInjection<SDKInputFrame> _injection_SDKInputFrame;

		[Token(Token = "0x4002290")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x160")]
		private static SDKInjection<bool> _injection_IsActive;

		[Token(Token = "0x4002291")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x162")]
		private static bool _injection_DisableSubmit;

		[Token(Token = "0x4002292")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x163")]
		private static bool _injection_DisableSubmitApplicationOutput;

		[Token(Token = "0x4002293")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x164")]
		private static bool _injection_DisableAddTexture;

		[Token(Token = "0x4002294")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x165")]
		private static bool _injection_DisableCreateFrame;

		[Token(Token = "0x4002295")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x168")]
		private static Action _injection_InputFrameHandler;

		[Token(Token = "0x170003E3")]
		public static bool IsActive
		{
			[Token(Token = "0x600218A")]
			[Address(RVA = "0xC2A860", Offset = "0xC2A860", VA = "0xC2A860")]
			get
			{
				return default(bool);
			}
		}

		[PreserveSig]
		[Token(Token = "0x6002169")]
		[Address(RVA = "0xC2B554", Offset = "0xC2B554", VA = "0xC2B554")]
		private static extern IntPtr GetRenderEventFunc();

		[PreserveSig]
		[Token(Token = "0x600216A")]
		[Address(RVA = "0xC2B5BC", Offset = "0xC2B5BC", VA = "0xC2B5BC")]
		private static extern bool GetIsCaptureActive();

		[PreserveSig]
		[Token(Token = "0x600216B")]
		[Address(RVA = "0xC2B62C", Offset = "0xC2B62C", VA = "0xC2B62C")]
		private static extern int GetTextureWidth();

		[PreserveSig]
		[Token(Token = "0x600216C")]
		[Address(RVA = "0xC2B694", Offset = "0xC2B694", VA = "0xC2B694")]
		private static extern int GetTextureHeight();

		[PreserveSig]
		[Token(Token = "0x600216D")]
		[Address(RVA = "0xC2B6FC", Offset = "0xC2B6FC", VA = "0xC2B6FC")]
		private static extern void SetTexture(IntPtr texture);

		[PreserveSig]
		[Token(Token = "0x600216E")]
		[Address(RVA = "0xC2B778", Offset = "0xC2B778", VA = "0xC2B778")]
		public static extern int AcquireCompositorFrame(ulong timestamp);

		[PreserveSig]
		[Token(Token = "0x600216F")]
		[Address(RVA = "0xC2B7F4", Offset = "0xC2B7F4", VA = "0xC2B7F4")]
		public static extern int ReleaseCompositorFrame();

		[PreserveSig]
		[Token(Token = "0x6002170")]
		[Address(RVA = "0xC2B85C", Offset = "0xC2B85C", VA = "0xC2B85C")]
		public static extern ulong GetObjectTimeStamp(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6002171")]
		[Address(RVA = "0xC2B8D8", Offset = "0xC2B8D8", VA = "0xC2B8D8")]
		private static extern ulong GetCurrentTimeTicks();

		[PreserveSig]
		[Token(Token = "0x6002172")]
		[Address(RVA = "0xC2B940", Offset = "0xC2B940", VA = "0xC2B940")]
		public static extern ulong GetObjectTag(IntPtr obj);

		[PreserveSig]
		[Token(Token = "0x6002173")]
		[Address(RVA = "0xC2B9BC", Offset = "0xC2B9BC", VA = "0xC2B9BC")]
		public static extern IntPtr GetCompositorFrameObject(ulong tag);

		[PreserveSig]
		[Token(Token = "0x6002174")]
		[Address(RVA = "0xC2BA38", Offset = "0xC2BA38", VA = "0xC2BA38")]
		public static extern IntPtr GetViewportTexture();

		[PreserveSig]
		[Token(Token = "0x6002175")]
		[Address(RVA = "0xC2BAA0", Offset = "0xC2BAA0", VA = "0xC2BAA0")]
		public static extern IntPtr GetCompositorChannelObject(int slot, ulong tag, ulong timestamp);

		[PreserveSig]
		[Token(Token = "0x6002176")]
		[Address(RVA = "0xC2BB34", Offset = "0xC2BB34", VA = "0xC2BB34")]
		public static extern IntPtr GetChannelObject(int slot, ulong tag, ulong timestamp);

		[PreserveSig]
		[Token(Token = "0x6002177")]
		[Address(RVA = "0xC2BBC8", Offset = "0xC2BBC8", VA = "0xC2BBC8")]
		public static extern int AddObjectToChannel(int slot, IntPtr obj, int objectsize, ulong tag);

		[PreserveSig]
		[Token(Token = "0x6002178")]
		[Address(RVA = "0xC2BC64", Offset = "0xC2BC64", VA = "0xC2BC64")]
		public static extern int AddObjectToCompositorChannel(int slot, IntPtr obj, int objectsize, ulong tag);

		[PreserveSig]
		[Token(Token = "0x6002179")]
		[Address(RVA = "0xC2BD00", Offset = "0xC2BD00", VA = "0xC2BD00")]
		public static extern int AddObjectToFrame(IntPtr obj, int objectsize, ulong tag);

		[PreserveSig]
		[Token(Token = "0x600217A")]
		[Address(RVA = "0xC2BD94", Offset = "0xC2BD94", VA = "0xC2BD94")]
		public static extern int AddStringToFrame(IntPtr str, ulong tag);

		[PreserveSig]
		[Token(Token = "0x600217B")]
		[Address(RVA = "0xC2BE14", Offset = "0xC2BE14", VA = "0xC2BE14")]
		public static extern int AddStringToChannel(int slot, IntPtr str, int length, ulong tag);

		[PreserveSig]
		[Token(Token = "0x600217C")]
		[Address(RVA = "0xC2BEB0", Offset = "0xC2BEB0", VA = "0xC2BEB0")]
		public static extern int NewFrame();

		[PreserveSig]
		[Token(Token = "0x600217D")]
		[Address(RVA = "0xC2BF18", Offset = "0xC2BF18", VA = "0xC2BF18")]
		public static extern IntPtr CommitFrame();

		[PreserveSig]
		[Token(Token = "0x600217E")]
		[Address(RVA = "0xC2BF80", Offset = "0xC2BF80", VA = "0xC2BF80")]
		public static extern int addsharedtexture(int width, int height, int format, IntPtr sourcetexture, ulong tag);

		[PreserveSig]
		[Token(Token = "0x600217F")]
		[Address(RVA = "0xC2C02C", Offset = "0xC2C02C", VA = "0xC2C02C")]
		public static extern int addtexture(IntPtr sourcetexture, ulong tag);

		[PreserveSig]
		[Token(Token = "0x6002180")]
		[Address(RVA = "0xC2C0AC", Offset = "0xC2C0AC", VA = "0xC2C0AC")]
		public static extern void PublishTextures();

		[PreserveSig]
		[Token(Token = "0x6002181")]
		[Address(RVA = "0xC2C110", Offset = "0xC2C110", VA = "0xC2C110")]
		public static extern IntPtr updatinputframe(IntPtr InputFrame);

		[PreserveSig]
		[Token(Token = "0x6002182")]
		[Address(RVA = "0xC2C18C", Offset = "0xC2C18C", VA = "0xC2C18C")]
		public static extern IntPtr setinputframe(float x, float y, float z, float q0, float q1, float q2, float q3, float fov, int priority);

		[PreserveSig]
		[Token(Token = "0x6002183")]
		[Address(RVA = "0xC2C268", Offset = "0xC2C268", VA = "0xC2C268")]
		public static extern ulong setfeature(ulong feature);

		[PreserveSig]
		[Token(Token = "0x6002184")]
		[Address(RVA = "0xC2C2E0", Offset = "0xC2C2E0", VA = "0xC2C2E0")]
		public static extern ulong clearfeature(ulong feature);

		[Token(Token = "0x6002185")]
		[Address(RVA = "0xC2C35C", Offset = "0xC2C35C", VA = "0xC2C35C")]
		public static ulong Tag(string str)
		{
			return default(ulong);
		}

		[Token(Token = "0x6002186")]
		[Address(RVA = "0xC2C3E0", Offset = "0xC2C3E0", VA = "0xC2C3E0")]
		public static void AddString(string tag, string value, int slot)
		{
		}

		[Token(Token = "0x6002187")]
		[Address(RVA = "0xC2C500", Offset = "0xC2C500", VA = "0xC2C500")]
		public static void AddTexture(SDKTexture texture, ulong tag)
		{
		}

		[Token(Token = "0x6002188")]
		[Address(RVA = "0xC2C5D8", Offset = "0xC2C5D8", VA = "0xC2C5D8")]
		public static ulong GetObjectTime(IntPtr objectptr)
		{
			return default(ulong);
		}

		[Token(Token = "0x6002189")]
		[Address(RVA = "0xC2C644", Offset = "0xC2C644", VA = "0xC2C644")]
		public static ulong GetCurrentTime()
		{
			return default(ulong);
		}

		[Token(Token = "0x600218B")]
		[Address(RVA = "0xC2C6A8", Offset = "0xC2C6A8", VA = "0xC2C6A8")]
		public static void IssuePluginEvent()
		{
		}

		[Token(Token = "0x600218C")]
		[Address(RVA = "0xC2AFC0", Offset = "0xC2AFC0", VA = "0xC2AFC0")]
		public static void SubmitApplicationOutput(SDKApplicationOutput applicationOutput)
		{
		}

		[Token(Token = "0x600218D")]
		[Address(RVA = "0xC2C728", Offset = "0xC2C728", VA = "0xC2C728")]
		public static SDKInputFrame GetInputFrame()
		{
			return default(SDKInputFrame);
		}

		[Token(Token = "0x600218E")]
		public static bool GetStructFromBridgeChannel<T>(ref T mystruct, int channel, ulong tag)
		{
			return default(bool);
		}

		[Token(Token = "0x600218F")]
		public static int AddStructToBridgeChannel<T>(ref T mystruct, int channel, ulong tag)
		{
			return default(int);
		}

		[Token(Token = "0x6002190")]
		public static void AddStructToFrame<T>(ref T mystruct, ulong tag)
		{
		}

		[Token(Token = "0x6002191")]
		[Address(RVA = "0xC2C9C4", Offset = "0xC2C9C4", VA = "0xC2C9C4")]
		public static bool UpdateInputFrame(ref SDKInputFrame setframe)
		{
			return default(bool);
		}

		[Token(Token = "0x6002192")]
		[Address(RVA = "0xC2CC90", Offset = "0xC2CC90", VA = "0xC2CC90")]
		public static SDKTexture GetViewfinderTexture()
		{
			return default(SDKTexture);
		}

		[Token(Token = "0x6002193")]
		[Address(RVA = "0xC2CE44", Offset = "0xC2CE44", VA = "0xC2CE44")]
		public static void AddTexture(SDKTexture texture)
		{
		}

		[Token(Token = "0x6002194")]
		[Address(RVA = "0xC2CF50", Offset = "0xC2CF50", VA = "0xC2CF50")]
		public static void CreateFrame(SDKOutputFrame frame)
		{
		}
	}
	[Token(Token = "0x2000540")]
	public class SDKRender : IDisposable
	{
		[Token(Token = "0x400229A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		private CommandBuffer _clipPlaneCommandBuffer;

		[Token(Token = "0x400229B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		private CommandBuffer _addAlphaCommandBuffer;

		[Token(Token = "0x400229C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		private CommandBuffer _captureBackgroundCommandBuffer;

		[Token(Token = "0x400229D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		private CommandBuffer _captureForegroundCommandBuffer;

		[Token(Token = "0x400229E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		private CommandBuffer _applyBackgroundCommandBuffer;

		[Token(Token = "0x400229F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		private CommandBuffer _applyForegroundCommandBuffer;

		[Token(Token = "0x40022A0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		private CameraEvent _clipPlaneCameraEvent;

		[Token(Token = "0x40022A1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		private CameraEvent _clipPlaneFixAlphaCameraEvent;

		[Token(Token = "0x40022A2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		private CameraEvent _captureBackgroundEvent;

		[Token(Token = "0x40022A3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		private CameraEvent _captureForegroundEvent;

		[Token(Token = "0x40022A4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x50")]
		private CameraEvent _applyBackgroundEvent;

		[Token(Token = "0x40022A5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		private CameraEvent _applyForegroundEvent;

		[Token(Token = "0x40022A6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x58")]
		private Mesh _clipPlaneMesh;

		[Token(Token = "0x40022A7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		private Material _clipPlaneSimpleMaterial;

		[Token(Token = "0x40022A8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		private Material _clipPlaneSimpleDebugMaterial;

		[Token(Token = "0x40022A9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		private Material _clipPlaneComplexMaterial;

		[Token(Token = "0x40022AA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x78")]
		private Material _clipPlaneComplexDebugMaterial;

		[Token(Token = "0x40022AB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x80")]
		private Material _clipPlaneFixAlphaMaterial;

		[Token(Token = "0x40022AC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x88")]
		private Material _addAlphaMaterial;

		[Token(Token = "0x40022AD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x90")]
		private Material _writeAlphaMaterial;

		[Token(Token = "0x40022AE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x98")]
		private Material _forceForwardRenderingMaterial;

		[Token(Token = "0x40022AF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA0")]
		private RenderTexture _backgroundRenderTexture;

		[Token(Token = "0x40022B0")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xA8")]
		private RenderTexture _foregroundRenderTexture;

		[Token(Token = "0x40022B1")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB0")]
		private RenderTexture _complexClipPlaneRenderTexture;

		[Token(Token = "0x40022B2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xB8")]
		private LIV _liv;

		[Token(Token = "0x40022B3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC0")]
		private SDKOutputFrame _outputFrame;

		[Token(Token = "0x40022B4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x170")]
		private SDKInputFrame _inputFrame;

		[Token(Token = "0x40022B5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C8")]
		private Camera _cameraInstance;

		[Token(Token = "0x40022B6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2D0")]
		private SDKPose _requestedPose;

		[Token(Token = "0x40022B7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x340")]
		private int _requestedPoseFrameIndex;

		[Token(Token = "0x170003E4")]
		public LIV liv
		{
			[Token(Token = "0x600219D")]
			[Address(RVA = "0xC2F76C", Offset = "0xC2F76C", VA = "0xC2F76C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003E5")]
		public SDKOutputFrame outputFrame
		{
			[Token(Token = "0x600219E")]
			[Address(RVA = "0xC2F774", Offset = "0xC2F774", VA = "0xC2F774")]
			get
			{
				return default(SDKOutputFrame);
			}
		}

		[Token(Token = "0x170003E6")]
		public SDKInputFrame inputFrame
		{
			[Token(Token = "0x600219F")]
			[Address(RVA = "0xC2F784", Offset = "0xC2F784", VA = "0xC2F784")]
			get
			{
				return default(SDKInputFrame);
			}
		}

		[Token(Token = "0x170003E7")]
		public Camera cameraInstance
		{
			[Token(Token = "0x60021A0")]
			[Address(RVA = "0xC2F794", Offset = "0xC2F794", VA = "0xC2F794")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003E8")]
		public Camera cameraReference
		{
			[Token(Token = "0x60021A1")]
			[Address(RVA = "0xC2F4EC", Offset = "0xC2F4EC", VA = "0xC2F4EC")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003E9")]
		public Camera hmdCamera
		{
			[Token(Token = "0x60021A2")]
			[Address(RVA = "0xC2F79C", Offset = "0xC2F79C", VA = "0xC2F79C")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003EA")]
		public Transform stage
		{
			[Token(Token = "0x60021A3")]
			[Address(RVA = "0xC2F7B8", Offset = "0xC2F7B8", VA = "0xC2F7B8")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003EB")]
		public Transform stageTransform
		{
			[Token(Token = "0x60021A4")]
			[Address(RVA = "0xC2F7D0", Offset = "0xC2F7D0", VA = "0xC2F7D0")]
			get
			{
				return null;
			}
		}

		[Token(Token = "0x170003EC")]
		public Matrix4x4 stageLocalToWorldMatrix
		{
			[Token(Token = "0x60021A5")]
			[Address(RVA = "0xC2F7EC", Offset = "0xC2F7EC", VA = "0xC2F7EC")]
			get
			{
				return default(Matrix4x4);
			}
		}

		[Token(Token = "0x170003ED")]
		public Matrix4x4 localToWorldMatrix
		{
			[Token(Token = "0x60021A6")]
			[Address(RVA = "0xC2F004", Offset = "0xC2F004", VA = "0xC2F004")]
			get
			{
				return default(Matrix4x4);
			}
		}

		[Token(Token = "0x170003EE")]
		public int spectatorLayerMask
		{
			[Token(Token = "0x60021A7")]
			[Address(RVA = "0xC2F0C8", Offset = "0xC2F0C8", VA = "0xC2F0C8")]
			get
			{
				return default(int);
			}
		}

		[Token(Token = "0x170003EF")]
		public bool disableStandardAssets
		{
			[Token(Token = "0x60021A8")]
			[Address(RVA = "0xC2F2DC", Offset = "0xC2F2DC", VA = "0xC2F2DC")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x170003F0")]
		public bool canSetPose
		{
			[Token(Token = "0x60021A9")]
			[Address(RVA = "0xC2F8E4", Offset = "0xC2F8E4", VA = "0xC2F8E4")]
			get
			{
				return default(bool);
			}
		}

		[Token(Token = "0x6002196")]
		[Address(RVA = "0xC2AEAC", Offset = "0xC2AEAC", VA = "0xC2AEAC")]
		public SDKRender(LIV liv)
		{
		}

		[Token(Token = "0x6002197")]
		[Address(RVA = "0xC2B46C", Offset = "0xC2B46C", VA = "0xC2B46C")]
		public void Render()
		{
		}

		[Token(Token = "0x6002198")]
		[Address(RVA = "0xC2DD58", Offset = "0xC2DD58", VA = "0xC2DD58")]
		private void RenderBackground()
		{
		}

		[Token(Token = "0x6002199")]
		[Address(RVA = "0xC2E0B4", Offset = "0xC2E0B4", VA = "0xC2E0B4")]
		private void RenderForeground()
		{
		}

		[Token(Token = "0x600219A")]
		[Address(RVA = "0xC2D1B4", Offset = "0xC2D1B4", VA = "0xC2D1B4")]
		private void CreateAssets()
		{
		}

		[Token(Token = "0x600219B")]
		[Address(RVA = "0xC2F578", Offset = "0xC2F578", VA = "0xC2F578")]
		private void DestroyAssets()
		{
		}

		[Token(Token = "0x600219C")]
		[Address(RVA = "0xC2AF84", Offset = "0xC2AF84", VA = "0xC2AF84", Slot = "4")]
		public void Dispose()
		{
		}

		[Token(Token = "0x60021AA")]
		[Address(RVA = "0xC2F904", Offset = "0xC2F904", VA = "0xC2F904")]
		public bool SetPose(Vector3 position, Quaternion rotation, float verticalFieldOfView = 60f, bool useLocalSpace = false)
		{
			return default(bool);
		}

		[Token(Token = "0x60021AB")]
		[Address(RVA = "0xC2FBC8", Offset = "0xC2FBC8", VA = "0xC2FBC8")]
		public void SetGroundPlane(float distance, Vector3 normal, bool useLocalSpace = false)
		{
		}

		[Token(Token = "0x60021AC")]
		[Address(RVA = "0xC2FCEC", Offset = "0xC2FCEC", VA = "0xC2FCEC")]
		public void SetGroundPlane(Plane plane, bool useLocalSpace = false)
		{
		}

		[Token(Token = "0x60021AD")]
		[Address(RVA = "0xC2FD64", Offset = "0xC2FD64", VA = "0xC2FD64")]
		public void SetGroundPlane(Transform transform, bool useLocalSpace = false)
		{
		}

		[Token(Token = "0x60021AE")]
		[Address(RVA = "0xC2F708", Offset = "0xC2F708", VA = "0xC2F708")]
		private void ReleaseBridgePoseControl()
		{
		}

		[Token(Token = "0x60021AF")]
		[Address(RVA = "0xC2D9BC", Offset = "0xC2D9BC", VA = "0xC2D9BC")]
		private void UpdateBridgeInputFrame()
		{
		}

		[Token(Token = "0x60021B0")]
		[Address(RVA = "0xC2DD20", Offset = "0xC2DD20", VA = "0xC2DD20")]
		private void InvokePreRender()
		{
		}

		[Token(Token = "0x60021B1")]
		[Address(RVA = "0xC2EFCC", Offset = "0xC2EFCC", VA = "0xC2EFCC")]
		private void IvokePostRender()
		{
		}

		[Token(Token = "0x60021B2")]
		[Address(RVA = "0xC2F0E8", Offset = "0xC2F0E8", VA = "0xC2F0E8")]
		private void InvokePreRenderBackground()
		{
		}

		[Token(Token = "0x60021B3")]
		[Address(RVA = "0xC2F2A4", Offset = "0xC2F2A4", VA = "0xC2F2A4")]
		private void InvokePostRenderBackground()
		{
		}

		[Token(Token = "0x60021B4")]
		[Address(RVA = "0xC2F2F8", Offset = "0xC2F2F8", VA = "0xC2F2F8")]
		private void InvokePreRenderForeground()
		{
		}

		[Token(Token = "0x60021B5")]
		[Address(RVA = "0xC2F4B4", Offset = "0xC2F4B4", VA = "0xC2F4B4")]
		private void InvokePostRenderForeground()
		{
		}

		[Token(Token = "0x60021B6")]
		[Address(RVA = "0xC2FF04", Offset = "0xC2FF04", VA = "0xC2FF04")]
		private void CreateBackgroundTexture()
		{
		}

		[Token(Token = "0x60021B7")]
		[Address(RVA = "0xC2FFC8", Offset = "0xC2FFC8", VA = "0xC2FFC8")]
		private void CreateForegroundTexture()
		{
		}

		[Token(Token = "0x60021B8")]
		[Address(RVA = "0xC3008C", Offset = "0xC3008C", VA = "0xC3008C")]
		private void CreateComplexClipPlaneTexture()
		{
		}

		[Token(Token = "0x60021B9")]
		[Address(RVA = "0xC2F120", Offset = "0xC2F120", VA = "0xC2F120")]
		private void SendBackgroundTextureToBridge()
		{
		}

		[Token(Token = "0x60021BA")]
		[Address(RVA = "0xC2F330", Offset = "0xC2F330", VA = "0xC2F330")]
		private void SendForegroundTextureToBridge()
		{
		}

		[Token(Token = "0x60021BB")]
		[Address(RVA = "0xC2DAF8", Offset = "0xC2DAF8", VA = "0xC2DAF8")]
		private void UpdateTextures()
		{
		}
	}
	[Token(Token = "0x2000541")]
	internal static class SDKShaders
	{
		[Token(Token = "0x40022B8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public static readonly int LIV_TESSELLATION_PROPERTY;

		[Token(Token = "0x40022B9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public static readonly int LIV_CLIP_PLANE_HEIGHT_MAP_PROPERTY;

		[Token(Token = "0x40022BA")]
		public const string LIV_MR_FOREGROUND_KEYWORD = "LIV_MR_FOREGROUND";

		[Token(Token = "0x40022BB")]
		public const string LIV_MR_BACKGROUND_KEYWORD = "LIV_MR_BACKGROUND";

		[Token(Token = "0x40022BC")]
		public const string LIV_MR_KEYWORD = "LIV_MR";

		[Token(Token = "0x40022BD")]
		public const string LIV_CLIP_PLANE_SIMPLE_SHADER = "Hidden/LIV_ClipPlaneSimple";

		[Token(Token = "0x40022BE")]
		public const string LIV_CLIP_PLANE_SIMPLE_DEBUG_SHADER = "Hidden/LIV_ClipPlaneSimpleDebug";

		[Token(Token = "0x40022BF")]
		public const string LIV_CLIP_PLANE_COMPLEX_SHADER = "Hidden/LIV_ClipPlaneComplex";

		[Token(Token = "0x40022C0")]
		public const string LIV_CLIP_PLANE_COMPLEX_DEBUG_SHADER = "Hidden/LIV_ClipPlaneComplexDebug";

		[Token(Token = "0x40022C1")]
		public const string LIV_CLIP_PLANE_FIX_ALPHA_SHADER = "Hidden/LIV_ClipPlaneFixAlpha";

		[Token(Token = "0x40022C2")]
		public const string LIV_ADD_ALPHA_SHADER = "Hidden/LIV_AddAlpha";

		[Token(Token = "0x40022C3")]
		public const string LIV_WRITE_ALPHA_SHADER = "Hidden/LIV_WriteAlpha";

		[Token(Token = "0x40022C4")]
		public const string LIV_FORCE_FORWARD_RENDERING_SHADER = "Hidden/LIV_ForceForwardRendering";

		[Token(Token = "0x60021BC")]
		[Address(RVA = "0xC30150", Offset = "0xC30150", VA = "0xC30150")]
		public static void StartRendering()
		{
		}

		[Token(Token = "0x60021BD")]
		[Address(RVA = "0xC30194", Offset = "0xC30194", VA = "0xC30194")]
		public static void StopRendering()
		{
		}

		[Token(Token = "0x60021BE")]
		[Address(RVA = "0xC301D8", Offset = "0xC301D8", VA = "0xC301D8")]
		public static void StartForegroundRendering()
		{
		}

		[Token(Token = "0x60021BF")]
		[Address(RVA = "0xC3021C", Offset = "0xC3021C", VA = "0xC3021C")]
		public static void StopForegroundRendering()
		{
		}

		[Token(Token = "0x60021C0")]
		[Address(RVA = "0xC30260", Offset = "0xC30260", VA = "0xC30260")]
		public static void StartBackgroundRendering()
		{
		}

		[Token(Token = "0x60021C1")]
		[Address(RVA = "0xC302A4", Offset = "0xC302A4", VA = "0xC302A4")]
		public static void StopBackgroundRendering()
		{
		}
	}
	[Token(Token = "0x2000542")]
	public struct SDKConstants
	{
		[Token(Token = "0x40022C5")]
		public const string SDK_ID = "GPCBR7AGP8GC1SKYYDILJRZFOPBIMHYM";

		[Token(Token = "0x40022C6")]
		public const string SDK_VERSION = "1.5.2";

		[Token(Token = "0x40022C7")]
		public const string ENGINE_NAME = "unity";
	}
	[Token(Token = "0x2000543")]
	public enum PRIORITY : sbyte
	{
		[Token(Token = "0x40022C9")]
		NONE = 0,
		[Token(Token = "0x40022CA")]
		GAME = 63
	}
	[Token(Token = "0x2000544")]
	[Flags]
	public enum FEATURES : ulong
	{
		[Token(Token = "0x40022CC")]
		NONE = 0uL,
		[Token(Token = "0x40022CD")]
		BACKGROUND_RENDER = 1uL,
		[Token(Token = "0x40022CE")]
		FOREGROUND_RENDER = 2uL,
		[Token(Token = "0x40022CF")]
		COMPLEX_CLIP_PLANE = 4uL,
		[Token(Token = "0x40022D0")]
		BACKGROUND_DEPTH_RENDER = 8uL,
		[Token(Token = "0x40022D1")]
		OVERRIDE_POST_PROCESSING = 0x10uL,
		[Token(Token = "0x40022D2")]
		FIX_FOREGROUND_ALPHA = 0x20uL,
		[Token(Token = "0x40022D3")]
		GROUND_CLIP_PLANE = 0x40uL,
		[Token(Token = "0x40022D4")]
		RELEASE_CONTROL = 0x8000uL,
		[Token(Token = "0x40022D5")]
		DEBUG_CLIP_PLANE = 0x1000000000000uL
	}
	[Token(Token = "0x2000545")]
	public enum TEXTURE_ID : uint
	{
		[Token(Token = "0x40022D7")]
		UNDEFINED = 0u,
		[Token(Token = "0x40022D8")]
		BACKGROUND_COLOR_BUFFER_ID = 10u,
		[Token(Token = "0x40022D9")]
		FOREGROUND_COLOR_BUFFER_ID = 20u
	}
	[Token(Token = "0x2000546")]
	public enum TEXTURE_TYPE : uint
	{
		[Token(Token = "0x40022DB")]
		UNDEFINED,
		[Token(Token = "0x40022DC")]
		COLOR_BUFFER
	}
	[Token(Token = "0x2000547")]
	public enum TEXTURE_FORMAT : uint
	{
		[Token(Token = "0x40022DE")]
		UNDEFINED = 0u,
		[Token(Token = "0x40022DF")]
		ARGB32 = 10u
	}
	[Token(Token = "0x2000548")]
	public enum TEXTURE_DEVICE : uint
	{
		[Token(Token = "0x40022E1")]
		UNDEFINED,
		[Token(Token = "0x40022E2")]
		RAW,
		[Token(Token = "0x40022E3")]
		DIRECTX,
		[Token(Token = "0x40022E4")]
		OPENGL,
		[Token(Token = "0x40022E5")]
		VULKAN,
		[Token(Token = "0x40022E6")]
		METAL
	}
	[Token(Token = "0x2000549")]
	public enum TEXTURE_COLOR_SPACE : uint
	{
		[Token(Token = "0x40022E8")]
		UNDEFINED,
		[Token(Token = "0x40022E9")]
		LINEAR,
		[Token(Token = "0x40022EA")]
		SRGB
	}
	[Token(Token = "0x200054A")]
	public enum RENDERING_PIPELINE : uint
	{
		[Token(Token = "0x40022EC")]
		UNDEFINED,
		[Token(Token = "0x40022ED")]
		FORWARD,
		[Token(Token = "0x40022EE")]
		DEFERRED,
		[Token(Token = "0x40022EF")]
		VERTEX_LIT,
		[Token(Token = "0x40022F0")]
		UNIVERSAL,
		[Token(Token = "0x40022F1")]
		HIGH_DEFINITION
	}
	[Token(Token = "0x200054B")]
	public struct SDKVector3
	{
		[Token(Token = "0x40022F2")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x40022F3")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x40022F4")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;

		[Token(Token = "0x170003F1")]
		public static SDKVector3 zero
		{
			[Token(Token = "0x60021C3")]
			[Address(RVA = "0xC30384", Offset = "0xC30384", VA = "0xC30384")]
			get
			{
				return default(SDKVector3);
			}
		}

		[Token(Token = "0x170003F2")]
		public static SDKVector3 one
		{
			[Token(Token = "0x60021C4")]
			[Address(RVA = "0xC30394", Offset = "0xC30394", VA = "0xC30394")]
			get
			{
				return default(SDKVector3);
			}
		}

		[Token(Token = "0x170003F3")]
		public static SDKVector3 forward
		{
			[Token(Token = "0x60021C5")]
			[Address(RVA = "0xC303A4", Offset = "0xC303A4", VA = "0xC303A4")]
			get
			{
				return default(SDKVector3);
			}
		}

		[Token(Token = "0x170003F4")]
		public static SDKVector3 up
		{
			[Token(Token = "0x60021C6")]
			[Address(RVA = "0xC303B4", Offset = "0xC303B4", VA = "0xC303B4")]
			get
			{
				return default(SDKVector3);
			}
		}

		[Token(Token = "0x170003F5")]
		public static SDKVector3 right
		{
			[Token(Token = "0x60021C7")]
			[Address(RVA = "0xC303C4", Offset = "0xC303C4", VA = "0xC303C4")]
			get
			{
				return default(SDKVector3);
			}
		}

		[Token(Token = "0x60021C8")]
		[Address(RVA = "0xC303D4", Offset = "0xC303D4", VA = "0xC303D4")]
		public static implicit operator Vector3(SDKVector3 v)
		{
			return default(Vector3);
		}

		[Token(Token = "0x60021C9")]
		[Address(RVA = "0xC303D8", Offset = "0xC303D8", VA = "0xC303D8")]
		public static implicit operator SDKVector3(Vector3 v)
		{
			return default(SDKVector3);
		}

		[Token(Token = "0x60021CA")]
		[Address(RVA = "0xC303DC", Offset = "0xC303DC", VA = "0xC303DC")]
		public static SDKVector3 operator +(SDKVector3 lhs, SDKVector3 rhs)
		{
			return default(SDKVector3);
		}

		[Token(Token = "0x60021CB")]
		[Address(RVA = "0xC303EC", Offset = "0xC303EC", VA = "0xC303EC")]
		public static SDKVector3 operator -(SDKVector3 lhs, SDKVector3 rhs)
		{
			return default(SDKVector3);
		}

		[Token(Token = "0x60021CC")]
		[Address(RVA = "0xC303FC", Offset = "0xC303FC", VA = "0xC303FC")]
		public static SDKVector3 operator *(SDKVector3 lhs, SDKVector3 rhs)
		{
			return default(SDKVector3);
		}

		[Token(Token = "0x60021CD")]
		[Address(RVA = "0xC3040C", Offset = "0xC3040C", VA = "0xC3040C")]
		public static SDKVector3 operator *(SDKVector3 lhs, float rhs)
		{
			return default(SDKVector3);
		}

		[Token(Token = "0x60021CE")]
		[Address(RVA = "0xC3041C", Offset = "0xC3041C", VA = "0xC3041C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200054C")]
	public struct SDKQuaternion
	{
		[Token(Token = "0x40022F5")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float x;

		[Token(Token = "0x40022F6")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float y;

		[Token(Token = "0x40022F7")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float z;

		[Token(Token = "0x40022F8")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float w;

		[Token(Token = "0x170003F6")]
		public static SDKQuaternion identity
		{
			[Token(Token = "0x60021CF")]
			[Address(RVA = "0xC304E0", Offset = "0xC304E0", VA = "0xC304E0")]
			get
			{
				return default(SDKQuaternion);
			}
		}

		[Token(Token = "0x60021D0")]
		[Address(RVA = "0xC304F4", Offset = "0xC304F4", VA = "0xC304F4")]
		public static implicit operator Quaternion(SDKQuaternion v)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x60021D1")]
		[Address(RVA = "0xC304F8", Offset = "0xC304F8", VA = "0xC304F8")]
		public static implicit operator SDKQuaternion(Quaternion v)
		{
			return default(SDKQuaternion);
		}

		[Token(Token = "0x60021D2")]
		[Address(RVA = "0xC304FC", Offset = "0xC304FC", VA = "0xC304FC")]
		public static SDKQuaternion Euler(float pitch, float yaw, float roll)
		{
			return default(SDKQuaternion);
		}

		[Token(Token = "0x60021D3")]
		[Address(RVA = "0xC305B0", Offset = "0xC305B0", VA = "0xC305B0")]
		public static SDKQuaternion operator *(SDKQuaternion lhs, SDKQuaternion rhs)
		{
			return default(SDKQuaternion);
		}

		[Token(Token = "0x60021D4")]
		[Address(RVA = "0xC30624", Offset = "0xC30624", VA = "0xC30624")]
		public static SDKVector3 operator *(SDKQuaternion lhs, SDKVector3 rhs)
		{
			return default(SDKVector3);
		}

		[Token(Token = "0x60021D5")]
		[Address(RVA = "0xC306C8", Offset = "0xC306C8", VA = "0xC306C8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200054D")]
	public struct SDKMatrix4x4
	{
		[Token(Token = "0x40022F9")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float m00;

		[Token(Token = "0x40022FA")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public float m01;

		[Token(Token = "0x40022FB")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public float m02;

		[Token(Token = "0x40022FC")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public float m03;

		[Token(Token = "0x40022FD")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public float m10;

		[Token(Token = "0x40022FE")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x14")]
		public float m11;

		[Token(Token = "0x40022FF")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public float m12;

		[Token(Token = "0x4002300")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public float m13;

		[Token(Token = "0x4002301")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public float m20;

		[Token(Token = "0x4002302")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public float m21;

		[Token(Token = "0x4002303")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public float m22;

		[Token(Token = "0x4002304")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public float m23;

		[Token(Token = "0x4002305")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public float m30;

		[Token(Token = "0x4002306")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x34")]
		public float m31;

		[Token(Token = "0x4002307")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public float m32;

		[Token(Token = "0x4002308")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3C")]
		public float m33;

		[Token(Token = "0x170003F7")]
		public static SDKMatrix4x4 identity
		{
			[Token(Token = "0x60021D6")]
			[Address(RVA = "0xC30874", Offset = "0xC30874", VA = "0xC30874")]
			get
			{
				return default(SDKMatrix4x4);
			}
		}

		[Token(Token = "0x60021D7")]
		[Address(RVA = "0xC308A0", Offset = "0xC308A0", VA = "0xC308A0")]
		public static implicit operator Matrix4x4(SDKMatrix4x4 v)
		{
			return default(Matrix4x4);
		}

		[Token(Token = "0x60021D8")]
		[Address(RVA = "0xC308E4", Offset = "0xC308E4", VA = "0xC308E4")]
		public static implicit operator SDKMatrix4x4(Matrix4x4 v)
		{
			return default(SDKMatrix4x4);
		}

		[Token(Token = "0x60021D9")]
		[Address(RVA = "0xC30928", Offset = "0xC30928", VA = "0xC30928")]
		public static SDKMatrix4x4 Perspective(float vFov, float aspect, float zNear, float zFar)
		{
			return default(SDKMatrix4x4);
		}

		[Token(Token = "0x60021DA")]
		[Address(RVA = "0xC309D4", Offset = "0xC309D4", VA = "0xC309D4")]
		public static SDKMatrix4x4 operator *(SDKMatrix4x4 lhs, SDKMatrix4x4 rhs)
		{
			return default(SDKMatrix4x4);
		}

		[Token(Token = "0x60021DB")]
		[Address(RVA = "0xC30AE0", Offset = "0xC30AE0", VA = "0xC30AE0")]
		public static SDKVector3 operator *(SDKMatrix4x4 lhs, SDKVector3 rhs)
		{
			return default(SDKVector3);
		}

		[Token(Token = "0x60021DC")]
		[Address(RVA = "0xC30B38", Offset = "0xC30B38", VA = "0xC30B38")]
		public static SDKMatrix4x4 Translate(SDKVector3 value)
		{
			return default(SDKMatrix4x4);
		}

		[Token(Token = "0x60021DD")]
		[Address(RVA = "0xC30B74", Offset = "0xC30B74", VA = "0xC30B74")]
		public static SDKMatrix4x4 Rotate(SDKQuaternion value)
		{
			return default(SDKMatrix4x4);
		}

		[Token(Token = "0x60021DE")]
		[Address(RVA = "0xC30C08", Offset = "0xC30C08", VA = "0xC30C08")]
		public static SDKMatrix4x4 Scale(SDKVector3 value)
		{
			return default(SDKMatrix4x4);
		}

		[Token(Token = "0x60021DF")]
		[Address(RVA = "0xC30C34", Offset = "0xC30C34", VA = "0xC30C34")]
		public static SDKMatrix4x4 TRS(SDKVector3 translation, SDKQuaternion rotation, SDKVector3 scale)
		{
			return default(SDKMatrix4x4);
		}

		[Token(Token = "0x60021E0")]
		[Address(RVA = "0xC30D18", Offset = "0xC30D18", VA = "0xC30D18", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200054E")]
	public struct SDKPlane
	{
		[Token(Token = "0x4002309")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public float distance;

		[Token(Token = "0x400230A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public SDKVector3 normal;

		[Token(Token = "0x170003F8")]
		public static SDKPlane empty
		{
			[Token(Token = "0x60021E3")]
			[Address(RVA = "0xC312E4", Offset = "0xC312E4", VA = "0xC312E4")]
			get
			{
				return default(SDKPlane);
			}
		}

		[Token(Token = "0x60021E1")]
		[Address(RVA = "0xC311C4", Offset = "0xC311C4", VA = "0xC311C4")]
		public static implicit operator SDKPlane(Plane v)
		{
			return default(SDKPlane);
		}

		[Token(Token = "0x60021E2")]
		[Address(RVA = "0xC31220", Offset = "0xC31220", VA = "0xC31220", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200054F")]
	public struct SDKPriority
	{
		[Token(Token = "0x400230B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public sbyte pose;

		[Token(Token = "0x400230C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1")]
		public sbyte clipPlane;

		[Token(Token = "0x400230D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2")]
		public sbyte stage;

		[Token(Token = "0x400230E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x3")]
		public sbyte resolution;

		[Token(Token = "0x400230F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public sbyte feature;

		[Token(Token = "0x4002310")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5")]
		public sbyte nearFarAdjustment;

		[Token(Token = "0x4002311")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6")]
		public sbyte groundPlane;

		[Token(Token = "0x4002312")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7")]
		public sbyte reserved2;

		[Token(Token = "0x170003F9")]
		public static SDKPriority empty
		{
			[Token(Token = "0x60021E4")]
			[Address(RVA = "0xC312F8", Offset = "0xC312F8", VA = "0xC312F8")]
			get
			{
				return default(SDKPriority);
			}
		}

		[Token(Token = "0x60021E5")]
		[Address(RVA = "0xC31304", Offset = "0xC31304", VA = "0xC31304", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000550")]
	public struct SDKApplicationOutput
	{
		[Token(Token = "0x4002313")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public FEATURES supportedFeatures;

		[Token(Token = "0x4002314")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public string engineName;

		[Token(Token = "0x4002315")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public string engineVersion;

		[Token(Token = "0x4002316")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public string applicationName;

		[Token(Token = "0x4002317")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public string applicationVersion;

		[Token(Token = "0x4002318")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public string xrDeviceName;

		[Token(Token = "0x4002319")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public string graphicsAPI;

		[Token(Token = "0x400231A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public string sdkID;

		[Token(Token = "0x400231B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public string sdkVersion;

		[Token(Token = "0x170003FA")]
		public static SDKApplicationOutput empty
		{
			[Token(Token = "0x60021E6")]
			[Address(RVA = "0xC314F0", Offset = "0xC314F0", VA = "0xC314F0")]
			get
			{
				return default(SDKApplicationOutput);
			}
		}

		[Token(Token = "0x60021E7")]
		[Address(RVA = "0xC31570", Offset = "0xC31570", VA = "0xC31570", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000551")]
	public struct SDKTrackers
	{
		[Token(Token = "0x400231C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public Vector3 hmdposition;

		[Token(Token = "0x400231D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public SDKQuaternion hmdrotation;

		[Token(Token = "0x400231E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public Vector3 calibrationcameraposition;

		[Token(Token = "0x400231F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public Quaternion calibrationcamerarotation;

		[Token(Token = "0x4002320")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public Vector3 cameraposition;

		[Token(Token = "0x4002321")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public Quaternion camerarotation;

		[Token(Token = "0x4002322")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public Vector3 leftposition;

		[Token(Token = "0x4002323")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public Quaternion leftrotation;

		[Token(Token = "0x4002324")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public Vector3 rightposition;

		[Token(Token = "0x4002325")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public Quaternion rightrotation;
	}
	[Token(Token = "0x2000552")]
	public struct SDKInputFrame
	{
		[Token(Token = "0x4002326")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SDKPose pose;

		[Token(Token = "0x4002327")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public SDKClipPlane clipPlane;

		[Token(Token = "0x4002328")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xBC")]
		public SDKTransform stageTransform;

		[Token(Token = "0x4002329")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xE8")]
		public FEATURES features;

		[Token(Token = "0x400232A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xF0")]
		public SDKClipPlane groundClipPlane;

		[Token(Token = "0x400232B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x140")]
		public ulong frameid;

		[Token(Token = "0x400232C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x148")]
		public ulong referenceframe;

		[Token(Token = "0x400232D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x150")]
		public SDKPriority priority;

		[Token(Token = "0x170003FB")]
		public static SDKInputFrame empty
		{
			[Token(Token = "0x60021E8")]
			[Address(RVA = "0xC317B4", Offset = "0xC317B4", VA = "0xC317B4")]
			get
			{
				return default(SDKInputFrame);
			}
		}

		[Token(Token = "0x60021E9")]
		[Address(RVA = "0xC319B4", Offset = "0xC319B4", VA = "0xC319B4")]
		public void ReleaseControl()
		{
		}

		[Token(Token = "0x60021EA")]
		[Address(RVA = "0xC319C4", Offset = "0xC319C4", VA = "0xC319C4")]
		public void ObtainControl()
		{
		}

		[Token(Token = "0x60021EB")]
		[Address(RVA = "0xC319D8", Offset = "0xC319D8", VA = "0xC319D8", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000553")]
	public struct SDKOutputFrame
	{
		[Token(Token = "0x400232E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public RENDERING_PIPELINE renderingPipeline;

		[Token(Token = "0x400232F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4")]
		public SDKTrackedSpace trackedSpace;

		[Token(Token = "0x170003FC")]
		public static SDKOutputFrame empty
		{
			[Token(Token = "0x60021EC")]
			[Address(RVA = "0xC31CC4", Offset = "0xC31CC4", VA = "0xC31CC4")]
			get
			{
				return default(SDKOutputFrame);
			}
		}

		[Token(Token = "0x60021ED")]
		[Address(RVA = "0xC31D88", Offset = "0xC31D88", VA = "0xC31D88", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000554")]
	public struct SDKTrackedSpace
	{
		[Token(Token = "0x4002330")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SDKVector3 trackedSpaceWorldPosition;

		[Token(Token = "0x4002331")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public SDKQuaternion trackedSpaceWorldRotation;

		[Token(Token = "0x4002332")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public SDKVector3 trackedSpaceLocalScale;

		[Token(Token = "0x4002333")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SDKMatrix4x4 trackedSpaceLocalToWorldMatrix;

		[Token(Token = "0x4002334")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public SDKMatrix4x4 trackedSpaceWorldToLocalMatrix;

		[Token(Token = "0x170003FD")]
		public static SDKTrackedSpace empty
		{
			[Token(Token = "0x60021EE")]
			[Address(RVA = "0xC31D24", Offset = "0xC31D24", VA = "0xC31D24")]
			get
			{
				return default(SDKTrackedSpace);
			}
		}

		[Token(Token = "0x60021EF")]
		[Address(RVA = "0xC31E4C", Offset = "0xC31E4C", VA = "0xC31E4C", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000555")]
	public struct SDKTexture
	{
		[Token(Token = "0x4002335")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public TEXTURE_ID id;

		[Token(Token = "0x4002336")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x8")]
		public IntPtr texturePtr;

		[Token(Token = "0x4002337")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x10")]
		public IntPtr SharedHandle;

		[Token(Token = "0x4002338")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x18")]
		public TEXTURE_DEVICE device;

		[Token(Token = "0x4002339")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public int dummy;

		[Token(Token = "0x400233A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x20")]
		public TEXTURE_TYPE type;

		[Token(Token = "0x400233B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x24")]
		public TEXTURE_FORMAT format;

		[Token(Token = "0x400233C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public TEXTURE_COLOR_SPACE colorSpace;

		[Token(Token = "0x400233D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x2C")]
		public int width;

		[Token(Token = "0x400233E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x30")]
		public int height;

		[Token(Token = "0x170003FE")]
		public static SDKTexture empty
		{
			[Token(Token = "0x60021F0")]
			[Address(RVA = "0xC32090", Offset = "0xC32090", VA = "0xC32090")]
			get
			{
				return default(SDKTexture);
			}
		}

		[Token(Token = "0x60021F1")]
		[Address(RVA = "0xC320EC", Offset = "0xC320EC", VA = "0xC320EC", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000556")]
	public struct SDKTransform
	{
		[Token(Token = "0x400233F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SDKVector3 localPosition;

		[Token(Token = "0x4002340")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public SDKQuaternion localRotation;

		[Token(Token = "0x4002341")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public SDKVector3 localScale;

		[Token(Token = "0x170003FF")]
		public static SDKTransform empty
		{
			[Token(Token = "0x60021F2")]
			[Address(RVA = "0xC319A0", Offset = "0xC319A0", VA = "0xC319A0")]
			get
			{
				return default(SDKTransform);
			}
		}

		[Token(Token = "0x60021F3")]
		[Address(RVA = "0xC32490", Offset = "0xC32490", VA = "0xC32490", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000557")]
	public struct SDKClipPlane
	{
		[Token(Token = "0x4002342")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SDKMatrix4x4 transform;

		[Token(Token = "0x4002343")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public int width;

		[Token(Token = "0x4002344")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public int height;

		[Token(Token = "0x4002345")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x48")]
		public float tesselation;

		[Token(Token = "0x17000400")]
		public static SDKClipPlane empty
		{
			[Token(Token = "0x60021F4")]
			[Address(RVA = "0xC3196C", Offset = "0xC3196C", VA = "0xC3196C")]
			get
			{
				return default(SDKClipPlane);
			}
		}

		[Token(Token = "0x60021F5")]
		[Address(RVA = "0xC32578", Offset = "0xC32578", VA = "0xC32578", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x2000558")]
	public struct SDKControllerState
	{
		[Token(Token = "0x4002346")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SDKVector3 hmdposition;

		[Token(Token = "0x4002347")]
		[Il2CppDummyDll.FieldOffset(Offset = "0xC")]
		public SDKQuaternion hmdrotation;

		[Token(Token = "0x4002348")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x1C")]
		public SDKVector3 calibrationcameraposition;

		[Token(Token = "0x4002349")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x28")]
		public SDKQuaternion calibrationcamerarotation;

		[Token(Token = "0x400234A")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x38")]
		public SDKVector3 cameraposition;

		[Token(Token = "0x400234B")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x44")]
		public SDKQuaternion camerarotation;

		[Token(Token = "0x400234C")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x54")]
		public SDKVector3 leftposition;

		[Token(Token = "0x400234D")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public SDKQuaternion leftrotation;

		[Token(Token = "0x400234E")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x70")]
		public SDKVector3 rightposition;

		[Token(Token = "0x400234F")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x7C")]
		public SDKQuaternion rightrotation;

		[Token(Token = "0x17000401")]
		public static SDKControllerState empty
		{
			[Token(Token = "0x60021F6")]
			[Address(RVA = "0xC32754", Offset = "0xC32754", VA = "0xC32754")]
			get
			{
				return default(SDKControllerState);
			}
		}
	}
	[Token(Token = "0x2000559")]
	public struct SDKPose
	{
		[Token(Token = "0x4002350")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x0")]
		public SDKMatrix4x4 projectionMatrix;

		[Token(Token = "0x4002351")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x40")]
		public SDKVector3 localPosition;

		[Token(Token = "0x4002352")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x4C")]
		public SDKQuaternion localRotation;

		[Token(Token = "0x4002353")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x5C")]
		public float verticalFieldOfView;

		[Token(Token = "0x4002354")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x60")]
		public float nearClipPlane;

		[Token(Token = "0x4002355")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x64")]
		public float farClipPlane;

		[Token(Token = "0x4002356")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x68")]
		public int width;

		[Token(Token = "0x4002357")]
		[Il2CppDummyDll.FieldOffset(Offset = "0x6C")]
		public int height;

		[Token(Token = "0x17000402")]
		public static SDKPose empty
		{
			[Token(Token = "0x60021F7")]
			[Address(RVA = "0xC318FC", Offset = "0xC318FC", VA = "0xC318FC")]
			get
			{
				return default(SDKPose);
			}
		}

		[Token(Token = "0x60021F8")]
		[Address(RVA = "0xC327A0", Offset = "0xC327A0", VA = "0xC327A0", Slot = "3")]
		public override string ToString()
		{
			return null;
		}
	}
	[Token(Token = "0x200055A")]
	public static class SDKUtils
	{
		[Token(Token = "0x17000403")]
		public static TEXTURE_COLOR_SPACE GetDefaultColorSpace
		{
			[Token(Token = "0x60021FB")]
			[Address(RVA = "0xC32F80", Offset = "0xC32F80", VA = "0xC32F80")]
			get
			{
				return default(TEXTURE_COLOR_SPACE);
			}
		}

		[Token(Token = "0x60021F9")]
		[Address(RVA = "0xC32AAC", Offset = "0xC32AAC", VA = "0xC32AAC")]
		public static void CreateClipPlane(Mesh mesh, int resX, int resY, bool useQuads, float skirtLength)
		{
		}

		[Token(Token = "0x60021FA")]
		[Address(RVA = "0xC32F68", Offset = "0xC32F68", VA = "0xC32F68")]
		public static RenderTextureReadWrite GetReadWriteFromColorSpace(TEXTURE_COLOR_SPACE colorSpace)
		{
			return default(RenderTextureReadWrite);
		}

		[Token(Token = "0x60021FC")]
		[Address(RVA = "0xC32FAC", Offset = "0xC32FAC", VA = "0xC32FAC")]
		public static TEXTURE_COLOR_SPACE GetColorSpace(RenderTexture renderTexture)
		{
			return default(TEXTURE_COLOR_SPACE);
		}

		[Token(Token = "0x60021FD")]
		[Address(RVA = "0xC33038", Offset = "0xC33038", VA = "0xC33038")]
		public static RENDERING_PIPELINE GetRenderingPipeline(RenderingPath renderingPath)
		{
			return default(RENDERING_PIPELINE);
		}

		[Token(Token = "0x60021FE")]
		[Address(RVA = "0xC33058", Offset = "0xC33058", VA = "0xC33058")]
		public static TEXTURE_DEVICE GetDevice()
		{
			return default(TEXTURE_DEVICE);
		}

		[Token(Token = "0x60021FF")]
		[Address(RVA = "0xC330BC", Offset = "0xC330BC", VA = "0xC330BC")]
		public static bool ContainsFlag(ulong flags, ulong flag)
		{
			return default(bool);
		}

		[Token(Token = "0x6002200")]
		[Address(RVA = "0xC330C8", Offset = "0xC330C8", VA = "0xC330C8")]
		public static ulong SetFlag(ulong flags, ulong flag, bool enabled)
		{
			return default(ulong);
		}

		[Token(Token = "0x6002201")]
		[Address(RVA = "0xC330DC", Offset = "0xC330DC", VA = "0xC330DC")]
		public static void GetCameraPositionAndRotation(SDKPose pose, Matrix4x4 originLocalToWorldMatrix, out Vector3 position, out Quaternion rotation)
		{
		}

		[Token(Token = "0x6002202")]
		[Address(RVA = "0xC332B8", Offset = "0xC332B8", VA = "0xC332B8")]
		public static void CleanCameraBehaviours(Camera camera, string[] excludeBehaviours)
		{
		}

		[Token(Token = "0x6002203")]
		[Address(RVA = "0xC3363C", Offset = "0xC3363C", VA = "0xC3363C")]
		public static void SetCamera(Camera camera, SDKInputFrame inputFrame, Matrix4x4 originLocalToWorldMatrix, int layerMask)
		{
		}

		[Token(Token = "0x6002204")]
		[Address(RVA = "0xC33154", Offset = "0xC33154", VA = "0xC33154")]
		public static Quaternion RotateQuaternionByMatrix(Matrix4x4 matrix, Quaternion rotation)
		{
			return default(Quaternion);
		}

		[Token(Token = "0x6002205")]
		[Address(RVA = "0xC3388C", Offset = "0xC3388C", VA = "0xC3388C")]
		public static SDKTrackedSpace GetTrackedSpace(Transform transform)
		{
			return default(SDKTrackedSpace);
		}

		[Token(Token = "0x6002206")]
		public static bool DestroyObject<T>(ref T reference) where T : UnityEngine.Object
		{
			return default(bool);
		}

		[Token(Token = "0x6002207")]
		public static bool DisposeObject<T>(ref T reference) where T : IDisposable
		{
			return default(bool);
		}

		[Token(Token = "0x6002208")]
		[Address(RVA = "0xC33B08", Offset = "0xC33B08", VA = "0xC33B08")]
		public static bool CreateTexture(ref RenderTexture renderTexture, int width, int height, int depth, RenderTextureFormat format)
		{
			return default(bool);
		}

		[Token(Token = "0x6002209")]
		[Address(RVA = "0xC33C78", Offset = "0xC33C78", VA = "0xC33C78")]
		public static void DestroyTexture(ref RenderTexture _renderTexture)
		{
		}

		[Token(Token = "0x600220A")]
		[Address(RVA = "0xC33D0C", Offset = "0xC33D0C", VA = "0xC33D0C")]
		public static void ApplyUserSpaceTransform(SDKRender render)
		{
		}

		[Token(Token = "0x600220B")]
		[Address(RVA = "0xC33E04", Offset = "0xC33E04", VA = "0xC33E04")]
		public static void CreateBridgeOutputFrame(SDKRender render)
		{
		}

		[Token(Token = "0x600220C")]
		[Address(RVA = "0xC33F98", Offset = "0xC33F98", VA = "0xC33F98")]
		public static bool FeatureEnabled(FEATURES features, FEATURES feature)
		{
			return default(bool);
		}
	}
}
